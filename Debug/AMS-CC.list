
AMS-CC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a7f8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000850  0801a988  0801a988  0002a988  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b1d8  0801b1d8  0003142c  2**0
                  CONTENTS
  4 .ARM          00000008  0801b1d8  0801b1d8  0002b1d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b1e0  0801b1e0  0003142c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b1e0  0801b1e0  0002b1e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801b1e4  0801b1e4  0002b1e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000142c  20000000  0801b1e8  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0003142c  2**0
                  CONTENTS
 10 .bss          0001d5f4  20001430  20001430  00031430  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2001ea24  2001ea24  00031430  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0003142c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000558aa  00000000  00000000  0003145c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000096bd  00000000  00000000  00086d06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00005200  00000000  00000000  000903c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00004ca8  00000000  00000000  000955c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002bacc  00000000  00000000  0009a270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003fa7e  00000000  00000000  000c5d3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00100746  00000000  00000000  001057ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000c8  00000000  00000000  00205f00  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00016678  00000000  00000000  00205fc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20001430 	.word	0x20001430
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801a970 	.word	0x0801a970

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20001434 	.word	0x20001434
 80001cc:	0801a970 	.word	0x0801a970

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	2001e970 	.word	0x2001e970

08000264 <__aeabi_drsub>:
 8000264:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000268:	e002      	b.n	8000270 <__adddf3>
 800026a:	bf00      	nop

0800026c <__aeabi_dsub>:
 800026c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000270 <__adddf3>:
 8000270:	b530      	push	{r4, r5, lr}
 8000272:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000276:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800027a:	ea94 0f05 	teq	r4, r5
 800027e:	bf08      	it	eq
 8000280:	ea90 0f02 	teqeq	r0, r2
 8000284:	bf1f      	itttt	ne
 8000286:	ea54 0c00 	orrsne.w	ip, r4, r0
 800028a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800028e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000292:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000296:	f000 80e2 	beq.w	800045e <__adddf3+0x1ee>
 800029a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800029e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002a2:	bfb8      	it	lt
 80002a4:	426d      	neglt	r5, r5
 80002a6:	dd0c      	ble.n	80002c2 <__adddf3+0x52>
 80002a8:	442c      	add	r4, r5
 80002aa:	ea80 0202 	eor.w	r2, r0, r2
 80002ae:	ea81 0303 	eor.w	r3, r1, r3
 80002b2:	ea82 0000 	eor.w	r0, r2, r0
 80002b6:	ea83 0101 	eor.w	r1, r3, r1
 80002ba:	ea80 0202 	eor.w	r2, r0, r2
 80002be:	ea81 0303 	eor.w	r3, r1, r3
 80002c2:	2d36      	cmp	r5, #54	; 0x36
 80002c4:	bf88      	it	hi
 80002c6:	bd30      	pophi	{r4, r5, pc}
 80002c8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002d0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002d4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002d8:	d002      	beq.n	80002e0 <__adddf3+0x70>
 80002da:	4240      	negs	r0, r0
 80002dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002e0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002e8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002ec:	d002      	beq.n	80002f4 <__adddf3+0x84>
 80002ee:	4252      	negs	r2, r2
 80002f0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002f4:	ea94 0f05 	teq	r4, r5
 80002f8:	f000 80a7 	beq.w	800044a <__adddf3+0x1da>
 80002fc:	f1a4 0401 	sub.w	r4, r4, #1
 8000300:	f1d5 0e20 	rsbs	lr, r5, #32
 8000304:	db0d      	blt.n	8000322 <__adddf3+0xb2>
 8000306:	fa02 fc0e 	lsl.w	ip, r2, lr
 800030a:	fa22 f205 	lsr.w	r2, r2, r5
 800030e:	1880      	adds	r0, r0, r2
 8000310:	f141 0100 	adc.w	r1, r1, #0
 8000314:	fa03 f20e 	lsl.w	r2, r3, lr
 8000318:	1880      	adds	r0, r0, r2
 800031a:	fa43 f305 	asr.w	r3, r3, r5
 800031e:	4159      	adcs	r1, r3
 8000320:	e00e      	b.n	8000340 <__adddf3+0xd0>
 8000322:	f1a5 0520 	sub.w	r5, r5, #32
 8000326:	f10e 0e20 	add.w	lr, lr, #32
 800032a:	2a01      	cmp	r2, #1
 800032c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000330:	bf28      	it	cs
 8000332:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	18c0      	adds	r0, r0, r3
 800033c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000340:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000344:	d507      	bpl.n	8000356 <__adddf3+0xe6>
 8000346:	f04f 0e00 	mov.w	lr, #0
 800034a:	f1dc 0c00 	rsbs	ip, ip, #0
 800034e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000352:	eb6e 0101 	sbc.w	r1, lr, r1
 8000356:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800035a:	d31b      	bcc.n	8000394 <__adddf3+0x124>
 800035c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000360:	d30c      	bcc.n	800037c <__adddf3+0x10c>
 8000362:	0849      	lsrs	r1, r1, #1
 8000364:	ea5f 0030 	movs.w	r0, r0, rrx
 8000368:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800036c:	f104 0401 	add.w	r4, r4, #1
 8000370:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000374:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000378:	f080 809a 	bcs.w	80004b0 <__adddf3+0x240>
 800037c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000380:	bf08      	it	eq
 8000382:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000386:	f150 0000 	adcs.w	r0, r0, #0
 800038a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800038e:	ea41 0105 	orr.w	r1, r1, r5
 8000392:	bd30      	pop	{r4, r5, pc}
 8000394:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000398:	4140      	adcs	r0, r0
 800039a:	eb41 0101 	adc.w	r1, r1, r1
 800039e:	3c01      	subs	r4, #1
 80003a0:	bf28      	it	cs
 80003a2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003a6:	d2e9      	bcs.n	800037c <__adddf3+0x10c>
 80003a8:	f091 0f00 	teq	r1, #0
 80003ac:	bf04      	itt	eq
 80003ae:	4601      	moveq	r1, r0
 80003b0:	2000      	moveq	r0, #0
 80003b2:	fab1 f381 	clz	r3, r1
 80003b6:	bf08      	it	eq
 80003b8:	3320      	addeq	r3, #32
 80003ba:	f1a3 030b 	sub.w	r3, r3, #11
 80003be:	f1b3 0220 	subs.w	r2, r3, #32
 80003c2:	da0c      	bge.n	80003de <__adddf3+0x16e>
 80003c4:	320c      	adds	r2, #12
 80003c6:	dd08      	ble.n	80003da <__adddf3+0x16a>
 80003c8:	f102 0c14 	add.w	ip, r2, #20
 80003cc:	f1c2 020c 	rsb	r2, r2, #12
 80003d0:	fa01 f00c 	lsl.w	r0, r1, ip
 80003d4:	fa21 f102 	lsr.w	r1, r1, r2
 80003d8:	e00c      	b.n	80003f4 <__adddf3+0x184>
 80003da:	f102 0214 	add.w	r2, r2, #20
 80003de:	bfd8      	it	le
 80003e0:	f1c2 0c20 	rsble	ip, r2, #32
 80003e4:	fa01 f102 	lsl.w	r1, r1, r2
 80003e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003ec:	bfdc      	itt	le
 80003ee:	ea41 010c 	orrle.w	r1, r1, ip
 80003f2:	4090      	lslle	r0, r2
 80003f4:	1ae4      	subs	r4, r4, r3
 80003f6:	bfa2      	ittt	ge
 80003f8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003fc:	4329      	orrge	r1, r5
 80003fe:	bd30      	popge	{r4, r5, pc}
 8000400:	ea6f 0404 	mvn.w	r4, r4
 8000404:	3c1f      	subs	r4, #31
 8000406:	da1c      	bge.n	8000442 <__adddf3+0x1d2>
 8000408:	340c      	adds	r4, #12
 800040a:	dc0e      	bgt.n	800042a <__adddf3+0x1ba>
 800040c:	f104 0414 	add.w	r4, r4, #20
 8000410:	f1c4 0220 	rsb	r2, r4, #32
 8000414:	fa20 f004 	lsr.w	r0, r0, r4
 8000418:	fa01 f302 	lsl.w	r3, r1, r2
 800041c:	ea40 0003 	orr.w	r0, r0, r3
 8000420:	fa21 f304 	lsr.w	r3, r1, r4
 8000424:	ea45 0103 	orr.w	r1, r5, r3
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	f1c4 040c 	rsb	r4, r4, #12
 800042e:	f1c4 0220 	rsb	r2, r4, #32
 8000432:	fa20 f002 	lsr.w	r0, r0, r2
 8000436:	fa01 f304 	lsl.w	r3, r1, r4
 800043a:	ea40 0003 	orr.w	r0, r0, r3
 800043e:	4629      	mov	r1, r5
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	fa21 f004 	lsr.w	r0, r1, r4
 8000446:	4629      	mov	r1, r5
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	f094 0f00 	teq	r4, #0
 800044e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000452:	bf06      	itte	eq
 8000454:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000458:	3401      	addeq	r4, #1
 800045a:	3d01      	subne	r5, #1
 800045c:	e74e      	b.n	80002fc <__adddf3+0x8c>
 800045e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000462:	bf18      	it	ne
 8000464:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000468:	d029      	beq.n	80004be <__adddf3+0x24e>
 800046a:	ea94 0f05 	teq	r4, r5
 800046e:	bf08      	it	eq
 8000470:	ea90 0f02 	teqeq	r0, r2
 8000474:	d005      	beq.n	8000482 <__adddf3+0x212>
 8000476:	ea54 0c00 	orrs.w	ip, r4, r0
 800047a:	bf04      	itt	eq
 800047c:	4619      	moveq	r1, r3
 800047e:	4610      	moveq	r0, r2
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea91 0f03 	teq	r1, r3
 8000486:	bf1e      	ittt	ne
 8000488:	2100      	movne	r1, #0
 800048a:	2000      	movne	r0, #0
 800048c:	bd30      	popne	{r4, r5, pc}
 800048e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000492:	d105      	bne.n	80004a0 <__adddf3+0x230>
 8000494:	0040      	lsls	r0, r0, #1
 8000496:	4149      	adcs	r1, r1
 8000498:	bf28      	it	cs
 800049a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800049e:	bd30      	pop	{r4, r5, pc}
 80004a0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004a4:	bf3c      	itt	cc
 80004a6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004aa:	bd30      	popcc	{r4, r5, pc}
 80004ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004b0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004b8:	f04f 0000 	mov.w	r0, #0
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c2:	bf1a      	itte	ne
 80004c4:	4619      	movne	r1, r3
 80004c6:	4610      	movne	r0, r2
 80004c8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004cc:	bf1c      	itt	ne
 80004ce:	460b      	movne	r3, r1
 80004d0:	4602      	movne	r2, r0
 80004d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004d6:	bf06      	itte	eq
 80004d8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004dc:	ea91 0f03 	teqeq	r1, r3
 80004e0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	bf00      	nop

080004e8 <__aeabi_ui2d>:
 80004e8:	f090 0f00 	teq	r0, #0
 80004ec:	bf04      	itt	eq
 80004ee:	2100      	moveq	r1, #0
 80004f0:	4770      	bxeq	lr
 80004f2:	b530      	push	{r4, r5, lr}
 80004f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fc:	f04f 0500 	mov.w	r5, #0
 8000500:	f04f 0100 	mov.w	r1, #0
 8000504:	e750      	b.n	80003a8 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_i2d>:
 8000508:	f090 0f00 	teq	r0, #0
 800050c:	bf04      	itt	eq
 800050e:	2100      	moveq	r1, #0
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000518:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000520:	bf48      	it	mi
 8000522:	4240      	negmi	r0, r0
 8000524:	f04f 0100 	mov.w	r1, #0
 8000528:	e73e      	b.n	80003a8 <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_f2d>:
 800052c:	0042      	lsls	r2, r0, #1
 800052e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000532:	ea4f 0131 	mov.w	r1, r1, rrx
 8000536:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800053a:	bf1f      	itttt	ne
 800053c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000540:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000544:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000548:	4770      	bxne	lr
 800054a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800054e:	bf08      	it	eq
 8000550:	4770      	bxeq	lr
 8000552:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000556:	bf04      	itt	eq
 8000558:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000564:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000568:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800056c:	e71c      	b.n	80003a8 <__adddf3+0x138>
 800056e:	bf00      	nop

08000570 <__aeabi_ul2d>:
 8000570:	ea50 0201 	orrs.w	r2, r0, r1
 8000574:	bf08      	it	eq
 8000576:	4770      	bxeq	lr
 8000578:	b530      	push	{r4, r5, lr}
 800057a:	f04f 0500 	mov.w	r5, #0
 800057e:	e00a      	b.n	8000596 <__aeabi_l2d+0x16>

08000580 <__aeabi_l2d>:
 8000580:	ea50 0201 	orrs.w	r2, r0, r1
 8000584:	bf08      	it	eq
 8000586:	4770      	bxeq	lr
 8000588:	b530      	push	{r4, r5, lr}
 800058a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800058e:	d502      	bpl.n	8000596 <__aeabi_l2d+0x16>
 8000590:	4240      	negs	r0, r0
 8000592:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000596:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800059a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800059e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005a2:	f43f aed8 	beq.w	8000356 <__adddf3+0xe6>
 80005a6:	f04f 0203 	mov.w	r2, #3
 80005aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ae:	bf18      	it	ne
 80005b0:	3203      	addne	r2, #3
 80005b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005b6:	bf18      	it	ne
 80005b8:	3203      	addne	r2, #3
 80005ba:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005be:	f1c2 0320 	rsb	r3, r2, #32
 80005c2:	fa00 fc03 	lsl.w	ip, r0, r3
 80005c6:	fa20 f002 	lsr.w	r0, r0, r2
 80005ca:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ce:	ea40 000e 	orr.w	r0, r0, lr
 80005d2:	fa21 f102 	lsr.w	r1, r1, r2
 80005d6:	4414      	add	r4, r2
 80005d8:	e6bd      	b.n	8000356 <__adddf3+0xe6>
 80005da:	bf00      	nop

080005dc <__aeabi_dmul>:
 80005dc:	b570      	push	{r4, r5, r6, lr}
 80005de:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ea:	bf1d      	ittte	ne
 80005ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005f0:	ea94 0f0c 	teqne	r4, ip
 80005f4:	ea95 0f0c 	teqne	r5, ip
 80005f8:	f000 f8de 	bleq	80007b8 <__aeabi_dmul+0x1dc>
 80005fc:	442c      	add	r4, r5
 80005fe:	ea81 0603 	eor.w	r6, r1, r3
 8000602:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000606:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800060a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800060e:	bf18      	it	ne
 8000610:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800061c:	d038      	beq.n	8000690 <__aeabi_dmul+0xb4>
 800061e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000622:	f04f 0500 	mov.w	r5, #0
 8000626:	fbe1 e502 	umlal	lr, r5, r1, r2
 800062a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800062e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000632:	f04f 0600 	mov.w	r6, #0
 8000636:	fbe1 5603 	umlal	r5, r6, r1, r3
 800063a:	f09c 0f00 	teq	ip, #0
 800063e:	bf18      	it	ne
 8000640:	f04e 0e01 	orrne.w	lr, lr, #1
 8000644:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000648:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800064c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000650:	d204      	bcs.n	800065c <__aeabi_dmul+0x80>
 8000652:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000656:	416d      	adcs	r5, r5
 8000658:	eb46 0606 	adc.w	r6, r6, r6
 800065c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000660:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000664:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000668:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800066c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000670:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000674:	bf88      	it	hi
 8000676:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800067a:	d81e      	bhi.n	80006ba <__aeabi_dmul+0xde>
 800067c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000680:	bf08      	it	eq
 8000682:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000686:	f150 0000 	adcs.w	r0, r0, #0
 800068a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800068e:	bd70      	pop	{r4, r5, r6, pc}
 8000690:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000694:	ea46 0101 	orr.w	r1, r6, r1
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	ea81 0103 	eor.w	r1, r1, r3
 80006a0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006a4:	bfc2      	ittt	gt
 80006a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ae:	bd70      	popgt	{r4, r5, r6, pc}
 80006b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006b4:	f04f 0e00 	mov.w	lr, #0
 80006b8:	3c01      	subs	r4, #1
 80006ba:	f300 80ab 	bgt.w	8000814 <__aeabi_dmul+0x238>
 80006be:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006c2:	bfde      	ittt	le
 80006c4:	2000      	movle	r0, #0
 80006c6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ca:	bd70      	pople	{r4, r5, r6, pc}
 80006cc:	f1c4 0400 	rsb	r4, r4, #0
 80006d0:	3c20      	subs	r4, #32
 80006d2:	da35      	bge.n	8000740 <__aeabi_dmul+0x164>
 80006d4:	340c      	adds	r4, #12
 80006d6:	dc1b      	bgt.n	8000710 <__aeabi_dmul+0x134>
 80006d8:	f104 0414 	add.w	r4, r4, #20
 80006dc:	f1c4 0520 	rsb	r5, r4, #32
 80006e0:	fa00 f305 	lsl.w	r3, r0, r5
 80006e4:	fa20 f004 	lsr.w	r0, r0, r4
 80006e8:	fa01 f205 	lsl.w	r2, r1, r5
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	fa21 f604 	lsr.w	r6, r1, r4
 8000700:	eb42 0106 	adc.w	r1, r2, r6
 8000704:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000708:	bf08      	it	eq
 800070a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070e:	bd70      	pop	{r4, r5, r6, pc}
 8000710:	f1c4 040c 	rsb	r4, r4, #12
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f304 	lsl.w	r3, r0, r4
 800071c:	fa20 f005 	lsr.w	r0, r0, r5
 8000720:	fa01 f204 	lsl.w	r2, r1, r4
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000730:	f141 0100 	adc.w	r1, r1, #0
 8000734:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000738:	bf08      	it	eq
 800073a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073e:	bd70      	pop	{r4, r5, r6, pc}
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f205 	lsl.w	r2, r0, r5
 8000748:	ea4e 0e02 	orr.w	lr, lr, r2
 800074c:	fa20 f304 	lsr.w	r3, r0, r4
 8000750:	fa01 f205 	lsl.w	r2, r1, r5
 8000754:	ea43 0302 	orr.w	r3, r3, r2
 8000758:	fa21 f004 	lsr.w	r0, r1, r4
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	fa21 f204 	lsr.w	r2, r1, r4
 8000764:	ea20 0002 	bic.w	r0, r0, r2
 8000768:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800076c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000770:	bf08      	it	eq
 8000772:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000776:	bd70      	pop	{r4, r5, r6, pc}
 8000778:	f094 0f00 	teq	r4, #0
 800077c:	d10f      	bne.n	800079e <__aeabi_dmul+0x1c2>
 800077e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000782:	0040      	lsls	r0, r0, #1
 8000784:	eb41 0101 	adc.w	r1, r1, r1
 8000788:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800078c:	bf08      	it	eq
 800078e:	3c01      	subeq	r4, #1
 8000790:	d0f7      	beq.n	8000782 <__aeabi_dmul+0x1a6>
 8000792:	ea41 0106 	orr.w	r1, r1, r6
 8000796:	f095 0f00 	teq	r5, #0
 800079a:	bf18      	it	ne
 800079c:	4770      	bxne	lr
 800079e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007a2:	0052      	lsls	r2, r2, #1
 80007a4:	eb43 0303 	adc.w	r3, r3, r3
 80007a8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007ac:	bf08      	it	eq
 80007ae:	3d01      	subeq	r5, #1
 80007b0:	d0f7      	beq.n	80007a2 <__aeabi_dmul+0x1c6>
 80007b2:	ea43 0306 	orr.w	r3, r3, r6
 80007b6:	4770      	bx	lr
 80007b8:	ea94 0f0c 	teq	r4, ip
 80007bc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007c0:	bf18      	it	ne
 80007c2:	ea95 0f0c 	teqne	r5, ip
 80007c6:	d00c      	beq.n	80007e2 <__aeabi_dmul+0x206>
 80007c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007cc:	bf18      	it	ne
 80007ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007d2:	d1d1      	bne.n	8000778 <__aeabi_dmul+0x19c>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e6:	bf06      	itte	eq
 80007e8:	4610      	moveq	r0, r2
 80007ea:	4619      	moveq	r1, r3
 80007ec:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f0:	d019      	beq.n	8000826 <__aeabi_dmul+0x24a>
 80007f2:	ea94 0f0c 	teq	r4, ip
 80007f6:	d102      	bne.n	80007fe <__aeabi_dmul+0x222>
 80007f8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007fc:	d113      	bne.n	8000826 <__aeabi_dmul+0x24a>
 80007fe:	ea95 0f0c 	teq	r5, ip
 8000802:	d105      	bne.n	8000810 <__aeabi_dmul+0x234>
 8000804:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000808:	bf1c      	itt	ne
 800080a:	4610      	movne	r0, r2
 800080c:	4619      	movne	r1, r3
 800080e:	d10a      	bne.n	8000826 <__aeabi_dmul+0x24a>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800081c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000820:	f04f 0000 	mov.w	r0, #0
 8000824:	bd70      	pop	{r4, r5, r6, pc}
 8000826:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800082a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800082e:	bd70      	pop	{r4, r5, r6, pc}

08000830 <__aeabi_ddiv>:
 8000830:	b570      	push	{r4, r5, r6, lr}
 8000832:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000836:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800083a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800083e:	bf1d      	ittte	ne
 8000840:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000844:	ea94 0f0c 	teqne	r4, ip
 8000848:	ea95 0f0c 	teqne	r5, ip
 800084c:	f000 f8a7 	bleq	800099e <__aeabi_ddiv+0x16e>
 8000850:	eba4 0405 	sub.w	r4, r4, r5
 8000854:	ea81 0e03 	eor.w	lr, r1, r3
 8000858:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800085c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000860:	f000 8088 	beq.w	8000974 <__aeabi_ddiv+0x144>
 8000864:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000868:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800086c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000870:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000874:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000878:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800087c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000880:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000884:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000888:	429d      	cmp	r5, r3
 800088a:	bf08      	it	eq
 800088c:	4296      	cmpeq	r6, r2
 800088e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000892:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000896:	d202      	bcs.n	800089e <__aeabi_ddiv+0x6e>
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	1ab6      	subs	r6, r6, r2
 80008a0:	eb65 0503 	sbc.w	r5, r5, r3
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ae:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ba:	bf22      	ittt	cs
 80008bc:	1ab6      	subcs	r6, r6, r2
 80008be:	4675      	movcs	r5, lr
 80008c0:	ea40 000c 	orrcs.w	r0, r0, ip
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d2:	bf22      	ittt	cs
 80008d4:	1ab6      	subcs	r6, r6, r2
 80008d6:	4675      	movcs	r5, lr
 80008d8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008dc:	085b      	lsrs	r3, r3, #1
 80008de:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ea:	bf22      	ittt	cs
 80008ec:	1ab6      	subcs	r6, r6, r2
 80008ee:	4675      	movcs	r5, lr
 80008f0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000902:	bf22      	ittt	cs
 8000904:	1ab6      	subcs	r6, r6, r2
 8000906:	4675      	movcs	r5, lr
 8000908:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800090c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000910:	d018      	beq.n	8000944 <__aeabi_ddiv+0x114>
 8000912:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000916:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800091a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800091e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000922:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000926:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800092a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800092e:	d1c0      	bne.n	80008b2 <__aeabi_ddiv+0x82>
 8000930:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000934:	d10b      	bne.n	800094e <__aeabi_ddiv+0x11e>
 8000936:	ea41 0100 	orr.w	r1, r1, r0
 800093a:	f04f 0000 	mov.w	r0, #0
 800093e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000942:	e7b6      	b.n	80008b2 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	bf04      	itt	eq
 800094a:	4301      	orreq	r1, r0
 800094c:	2000      	moveq	r0, #0
 800094e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000952:	bf88      	it	hi
 8000954:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000958:	f63f aeaf 	bhi.w	80006ba <__aeabi_dmul+0xde>
 800095c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000960:	bf04      	itt	eq
 8000962:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000966:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800096a:	f150 0000 	adcs.w	r0, r0, #0
 800096e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000972:	bd70      	pop	{r4, r5, r6, pc}
 8000974:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000978:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800097c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000980:	bfc2      	ittt	gt
 8000982:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000986:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800098a:	bd70      	popgt	{r4, r5, r6, pc}
 800098c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000990:	f04f 0e00 	mov.w	lr, #0
 8000994:	3c01      	subs	r4, #1
 8000996:	e690      	b.n	80006ba <__aeabi_dmul+0xde>
 8000998:	ea45 0e06 	orr.w	lr, r5, r6
 800099c:	e68d      	b.n	80006ba <__aeabi_dmul+0xde>
 800099e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009a2:	ea94 0f0c 	teq	r4, ip
 80009a6:	bf08      	it	eq
 80009a8:	ea95 0f0c 	teqeq	r5, ip
 80009ac:	f43f af3b 	beq.w	8000826 <__aeabi_dmul+0x24a>
 80009b0:	ea94 0f0c 	teq	r4, ip
 80009b4:	d10a      	bne.n	80009cc <__aeabi_ddiv+0x19c>
 80009b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ba:	f47f af34 	bne.w	8000826 <__aeabi_dmul+0x24a>
 80009be:	ea95 0f0c 	teq	r5, ip
 80009c2:	f47f af25 	bne.w	8000810 <__aeabi_dmul+0x234>
 80009c6:	4610      	mov	r0, r2
 80009c8:	4619      	mov	r1, r3
 80009ca:	e72c      	b.n	8000826 <__aeabi_dmul+0x24a>
 80009cc:	ea95 0f0c 	teq	r5, ip
 80009d0:	d106      	bne.n	80009e0 <__aeabi_ddiv+0x1b0>
 80009d2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009d6:	f43f aefd 	beq.w	80007d4 <__aeabi_dmul+0x1f8>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e722      	b.n	8000826 <__aeabi_dmul+0x24a>
 80009e0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009e4:	bf18      	it	ne
 80009e6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ea:	f47f aec5 	bne.w	8000778 <__aeabi_dmul+0x19c>
 80009ee:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009f2:	f47f af0d 	bne.w	8000810 <__aeabi_dmul+0x234>
 80009f6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009fa:	f47f aeeb 	bne.w	80007d4 <__aeabi_dmul+0x1f8>
 80009fe:	e712      	b.n	8000826 <__aeabi_dmul+0x24a>

08000a00 <__gedf2>:
 8000a00:	f04f 3cff 	mov.w	ip, #4294967295
 8000a04:	e006      	b.n	8000a14 <__cmpdf2+0x4>
 8000a06:	bf00      	nop

08000a08 <__ledf2>:
 8000a08:	f04f 0c01 	mov.w	ip, #1
 8000a0c:	e002      	b.n	8000a14 <__cmpdf2+0x4>
 8000a0e:	bf00      	nop

08000a10 <__cmpdf2>:
 8000a10:	f04f 0c01 	mov.w	ip, #1
 8000a14:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a24:	bf18      	it	ne
 8000a26:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a2a:	d01b      	beq.n	8000a64 <__cmpdf2+0x54>
 8000a2c:	b001      	add	sp, #4
 8000a2e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a32:	bf0c      	ite	eq
 8000a34:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a38:	ea91 0f03 	teqne	r1, r3
 8000a3c:	bf02      	ittt	eq
 8000a3e:	ea90 0f02 	teqeq	r0, r2
 8000a42:	2000      	moveq	r0, #0
 8000a44:	4770      	bxeq	lr
 8000a46:	f110 0f00 	cmn.w	r0, #0
 8000a4a:	ea91 0f03 	teq	r1, r3
 8000a4e:	bf58      	it	pl
 8000a50:	4299      	cmppl	r1, r3
 8000a52:	bf08      	it	eq
 8000a54:	4290      	cmpeq	r0, r2
 8000a56:	bf2c      	ite	cs
 8000a58:	17d8      	asrcs	r0, r3, #31
 8000a5a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a5e:	f040 0001 	orr.w	r0, r0, #1
 8000a62:	4770      	bx	lr
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	d102      	bne.n	8000a74 <__cmpdf2+0x64>
 8000a6e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a72:	d107      	bne.n	8000a84 <__cmpdf2+0x74>
 8000a74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d1d6      	bne.n	8000a2c <__cmpdf2+0x1c>
 8000a7e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a82:	d0d3      	beq.n	8000a2c <__cmpdf2+0x1c>
 8000a84:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop

08000a8c <__aeabi_cdrcmple>:
 8000a8c:	4684      	mov	ip, r0
 8000a8e:	4610      	mov	r0, r2
 8000a90:	4662      	mov	r2, ip
 8000a92:	468c      	mov	ip, r1
 8000a94:	4619      	mov	r1, r3
 8000a96:	4663      	mov	r3, ip
 8000a98:	e000      	b.n	8000a9c <__aeabi_cdcmpeq>
 8000a9a:	bf00      	nop

08000a9c <__aeabi_cdcmpeq>:
 8000a9c:	b501      	push	{r0, lr}
 8000a9e:	f7ff ffb7 	bl	8000a10 <__cmpdf2>
 8000aa2:	2800      	cmp	r0, #0
 8000aa4:	bf48      	it	mi
 8000aa6:	f110 0f00 	cmnmi.w	r0, #0
 8000aaa:	bd01      	pop	{r0, pc}

08000aac <__aeabi_dcmpeq>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff fff4 	bl	8000a9c <__aeabi_cdcmpeq>
 8000ab4:	bf0c      	ite	eq
 8000ab6:	2001      	moveq	r0, #1
 8000ab8:	2000      	movne	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmplt>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffea 	bl	8000a9c <__aeabi_cdcmpeq>
 8000ac8:	bf34      	ite	cc
 8000aca:	2001      	movcc	r0, #1
 8000acc:	2000      	movcs	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmple>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffe0 	bl	8000a9c <__aeabi_cdcmpeq>
 8000adc:	bf94      	ite	ls
 8000ade:	2001      	movls	r0, #1
 8000ae0:	2000      	movhi	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmpge>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffce 	bl	8000a8c <__aeabi_cdrcmple>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpgt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffc4 	bl	8000a8c <__aeabi_cdrcmple>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmpun>:
 8000b10:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b18:	d102      	bne.n	8000b20 <__aeabi_dcmpun+0x10>
 8000b1a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b1e:	d10a      	bne.n	8000b36 <__aeabi_dcmpun+0x26>
 8000b20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b28:	d102      	bne.n	8000b30 <__aeabi_dcmpun+0x20>
 8000b2a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b2e:	d102      	bne.n	8000b36 <__aeabi_dcmpun+0x26>
 8000b30:	f04f 0000 	mov.w	r0, #0
 8000b34:	4770      	bx	lr
 8000b36:	f04f 0001 	mov.w	r0, #1
 8000b3a:	4770      	bx	lr

08000b3c <__aeabi_d2iz>:
 8000b3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b44:	d215      	bcs.n	8000b72 <__aeabi_d2iz+0x36>
 8000b46:	d511      	bpl.n	8000b6c <__aeabi_d2iz+0x30>
 8000b48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b50:	d912      	bls.n	8000b78 <__aeabi_d2iz+0x3c>
 8000b52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b5e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b62:	fa23 f002 	lsr.w	r0, r3, r2
 8000b66:	bf18      	it	ne
 8000b68:	4240      	negne	r0, r0
 8000b6a:	4770      	bx	lr
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b76:	d105      	bne.n	8000b84 <__aeabi_d2iz+0x48>
 8000b78:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b7c:	bf08      	it	eq
 8000b7e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b82:	4770      	bx	lr
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <__aeabi_d2uiz>:
 8000b8c:	004a      	lsls	r2, r1, #1
 8000b8e:	d211      	bcs.n	8000bb4 <__aeabi_d2uiz+0x28>
 8000b90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b94:	d211      	bcs.n	8000bba <__aeabi_d2uiz+0x2e>
 8000b96:	d50d      	bpl.n	8000bb4 <__aeabi_d2uiz+0x28>
 8000b98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba0:	d40e      	bmi.n	8000bc0 <__aeabi_d2uiz+0x34>
 8000ba2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000baa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bbe:	d102      	bne.n	8000bc6 <__aeabi_d2uiz+0x3a>
 8000bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc4:	4770      	bx	lr
 8000bc6:	f04f 0000 	mov.w	r0, #0
 8000bca:	4770      	bx	lr

08000bcc <__aeabi_d2f>:
 8000bcc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bd0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd4:	bf24      	itt	cs
 8000bd6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bda:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bde:	d90d      	bls.n	8000bfc <__aeabi_d2f+0x30>
 8000be0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bf0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf4:	bf08      	it	eq
 8000bf6:	f020 0001 	biceq.w	r0, r0, #1
 8000bfa:	4770      	bx	lr
 8000bfc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c00:	d121      	bne.n	8000c46 <__aeabi_d2f+0x7a>
 8000c02:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c06:	bfbc      	itt	lt
 8000c08:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c0c:	4770      	bxlt	lr
 8000c0e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c12:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c16:	f1c2 0218 	rsb	r2, r2, #24
 8000c1a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c22:	fa20 f002 	lsr.w	r0, r0, r2
 8000c26:	bf18      	it	ne
 8000c28:	f040 0001 	orrne.w	r0, r0, #1
 8000c2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c34:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c38:	ea40 000c 	orr.w	r0, r0, ip
 8000c3c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c44:	e7cc      	b.n	8000be0 <__aeabi_d2f+0x14>
 8000c46:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c4a:	d107      	bne.n	8000c5c <__aeabi_d2f+0x90>
 8000c4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c50:	bf1e      	ittt	ne
 8000c52:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c56:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c5a:	4770      	bxne	lr
 8000c5c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c60:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop

08000c6c <__aeabi_uldivmod>:
 8000c6c:	b953      	cbnz	r3, 8000c84 <__aeabi_uldivmod+0x18>
 8000c6e:	b94a      	cbnz	r2, 8000c84 <__aeabi_uldivmod+0x18>
 8000c70:	2900      	cmp	r1, #0
 8000c72:	bf08      	it	eq
 8000c74:	2800      	cmpeq	r0, #0
 8000c76:	bf1c      	itt	ne
 8000c78:	f04f 31ff 	movne.w	r1, #4294967295
 8000c7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c80:	f000 b96e 	b.w	8000f60 <__aeabi_idiv0>
 8000c84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c8c:	f000 f806 	bl	8000c9c <__udivmoddi4>
 8000c90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c98:	b004      	add	sp, #16
 8000c9a:	4770      	bx	lr

08000c9c <__udivmoddi4>:
 8000c9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ca0:	9d08      	ldr	r5, [sp, #32]
 8000ca2:	4604      	mov	r4, r0
 8000ca4:	468c      	mov	ip, r1
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	f040 8083 	bne.w	8000db2 <__udivmoddi4+0x116>
 8000cac:	428a      	cmp	r2, r1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	d947      	bls.n	8000d42 <__udivmoddi4+0xa6>
 8000cb2:	fab2 f282 	clz	r2, r2
 8000cb6:	b142      	cbz	r2, 8000cca <__udivmoddi4+0x2e>
 8000cb8:	f1c2 0020 	rsb	r0, r2, #32
 8000cbc:	fa24 f000 	lsr.w	r0, r4, r0
 8000cc0:	4091      	lsls	r1, r2
 8000cc2:	4097      	lsls	r7, r2
 8000cc4:	ea40 0c01 	orr.w	ip, r0, r1
 8000cc8:	4094      	lsls	r4, r2
 8000cca:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cce:	0c23      	lsrs	r3, r4, #16
 8000cd0:	fbbc f6f8 	udiv	r6, ip, r8
 8000cd4:	fa1f fe87 	uxth.w	lr, r7
 8000cd8:	fb08 c116 	mls	r1, r8, r6, ip
 8000cdc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ce0:	fb06 f10e 	mul.w	r1, r6, lr
 8000ce4:	4299      	cmp	r1, r3
 8000ce6:	d909      	bls.n	8000cfc <__udivmoddi4+0x60>
 8000ce8:	18fb      	adds	r3, r7, r3
 8000cea:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cee:	f080 8119 	bcs.w	8000f24 <__udivmoddi4+0x288>
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	f240 8116 	bls.w	8000f24 <__udivmoddi4+0x288>
 8000cf8:	3e02      	subs	r6, #2
 8000cfa:	443b      	add	r3, r7
 8000cfc:	1a5b      	subs	r3, r3, r1
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d04:	fb08 3310 	mls	r3, r8, r0, r3
 8000d08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x8c>
 8000d14:	193c      	adds	r4, r7, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	f080 8105 	bcs.w	8000f28 <__udivmoddi4+0x28c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f240 8102 	bls.w	8000f28 <__udivmoddi4+0x28c>
 8000d24:	3802      	subs	r0, #2
 8000d26:	443c      	add	r4, r7
 8000d28:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d2c:	eba4 040e 	sub.w	r4, r4, lr
 8000d30:	2600      	movs	r6, #0
 8000d32:	b11d      	cbz	r5, 8000d3c <__udivmoddi4+0xa0>
 8000d34:	40d4      	lsrs	r4, r2
 8000d36:	2300      	movs	r3, #0
 8000d38:	e9c5 4300 	strd	r4, r3, [r5]
 8000d3c:	4631      	mov	r1, r6
 8000d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d42:	b902      	cbnz	r2, 8000d46 <__udivmoddi4+0xaa>
 8000d44:	deff      	udf	#255	; 0xff
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	2a00      	cmp	r2, #0
 8000d4c:	d150      	bne.n	8000df0 <__udivmoddi4+0x154>
 8000d4e:	1bcb      	subs	r3, r1, r7
 8000d50:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d54:	fa1f f887 	uxth.w	r8, r7
 8000d58:	2601      	movs	r6, #1
 8000d5a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d5e:	0c21      	lsrs	r1, r4, #16
 8000d60:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d68:	fb08 f30c 	mul.w	r3, r8, ip
 8000d6c:	428b      	cmp	r3, r1
 8000d6e:	d907      	bls.n	8000d80 <__udivmoddi4+0xe4>
 8000d70:	1879      	adds	r1, r7, r1
 8000d72:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d76:	d202      	bcs.n	8000d7e <__udivmoddi4+0xe2>
 8000d78:	428b      	cmp	r3, r1
 8000d7a:	f200 80e9 	bhi.w	8000f50 <__udivmoddi4+0x2b4>
 8000d7e:	4684      	mov	ip, r0
 8000d80:	1ac9      	subs	r1, r1, r3
 8000d82:	b2a3      	uxth	r3, r4
 8000d84:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d88:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d8c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d90:	fb08 f800 	mul.w	r8, r8, r0
 8000d94:	45a0      	cmp	r8, r4
 8000d96:	d907      	bls.n	8000da8 <__udivmoddi4+0x10c>
 8000d98:	193c      	adds	r4, r7, r4
 8000d9a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d9e:	d202      	bcs.n	8000da6 <__udivmoddi4+0x10a>
 8000da0:	45a0      	cmp	r8, r4
 8000da2:	f200 80d9 	bhi.w	8000f58 <__udivmoddi4+0x2bc>
 8000da6:	4618      	mov	r0, r3
 8000da8:	eba4 0408 	sub.w	r4, r4, r8
 8000dac:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000db0:	e7bf      	b.n	8000d32 <__udivmoddi4+0x96>
 8000db2:	428b      	cmp	r3, r1
 8000db4:	d909      	bls.n	8000dca <__udivmoddi4+0x12e>
 8000db6:	2d00      	cmp	r5, #0
 8000db8:	f000 80b1 	beq.w	8000f1e <__udivmoddi4+0x282>
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000dc2:	4630      	mov	r0, r6
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	fab3 f683 	clz	r6, r3
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	d14a      	bne.n	8000e68 <__udivmoddi4+0x1cc>
 8000dd2:	428b      	cmp	r3, r1
 8000dd4:	d302      	bcc.n	8000ddc <__udivmoddi4+0x140>
 8000dd6:	4282      	cmp	r2, r0
 8000dd8:	f200 80b8 	bhi.w	8000f4c <__udivmoddi4+0x2b0>
 8000ddc:	1a84      	subs	r4, r0, r2
 8000dde:	eb61 0103 	sbc.w	r1, r1, r3
 8000de2:	2001      	movs	r0, #1
 8000de4:	468c      	mov	ip, r1
 8000de6:	2d00      	cmp	r5, #0
 8000de8:	d0a8      	beq.n	8000d3c <__udivmoddi4+0xa0>
 8000dea:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dee:	e7a5      	b.n	8000d3c <__udivmoddi4+0xa0>
 8000df0:	f1c2 0320 	rsb	r3, r2, #32
 8000df4:	fa20 f603 	lsr.w	r6, r0, r3
 8000df8:	4097      	lsls	r7, r2
 8000dfa:	fa01 f002 	lsl.w	r0, r1, r2
 8000dfe:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e02:	40d9      	lsrs	r1, r3
 8000e04:	4330      	orrs	r0, r6
 8000e06:	0c03      	lsrs	r3, r0, #16
 8000e08:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e0c:	fa1f f887 	uxth.w	r8, r7
 8000e10:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e14:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e18:	fb06 f108 	mul.w	r1, r6, r8
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	fa04 f402 	lsl.w	r4, r4, r2
 8000e22:	d909      	bls.n	8000e38 <__udivmoddi4+0x19c>
 8000e24:	18fb      	adds	r3, r7, r3
 8000e26:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e2a:	f080 808d 	bcs.w	8000f48 <__udivmoddi4+0x2ac>
 8000e2e:	4299      	cmp	r1, r3
 8000e30:	f240 808a 	bls.w	8000f48 <__udivmoddi4+0x2ac>
 8000e34:	3e02      	subs	r6, #2
 8000e36:	443b      	add	r3, r7
 8000e38:	1a5b      	subs	r3, r3, r1
 8000e3a:	b281      	uxth	r1, r0
 8000e3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb00 f308 	mul.w	r3, r0, r8
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d907      	bls.n	8000e60 <__udivmoddi4+0x1c4>
 8000e50:	1879      	adds	r1, r7, r1
 8000e52:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e56:	d273      	bcs.n	8000f40 <__udivmoddi4+0x2a4>
 8000e58:	428b      	cmp	r3, r1
 8000e5a:	d971      	bls.n	8000f40 <__udivmoddi4+0x2a4>
 8000e5c:	3802      	subs	r0, #2
 8000e5e:	4439      	add	r1, r7
 8000e60:	1acb      	subs	r3, r1, r3
 8000e62:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e66:	e778      	b.n	8000d5a <__udivmoddi4+0xbe>
 8000e68:	f1c6 0c20 	rsb	ip, r6, #32
 8000e6c:	fa03 f406 	lsl.w	r4, r3, r6
 8000e70:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e74:	431c      	orrs	r4, r3
 8000e76:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e7e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e82:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e86:	431f      	orrs	r7, r3
 8000e88:	0c3b      	lsrs	r3, r7, #16
 8000e8a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e8e:	fa1f f884 	uxth.w	r8, r4
 8000e92:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e96:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e9a:	fb09 fa08 	mul.w	sl, r9, r8
 8000e9e:	458a      	cmp	sl, r1
 8000ea0:	fa02 f206 	lsl.w	r2, r2, r6
 8000ea4:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x220>
 8000eaa:	1861      	adds	r1, r4, r1
 8000eac:	f109 30ff 	add.w	r0, r9, #4294967295
 8000eb0:	d248      	bcs.n	8000f44 <__udivmoddi4+0x2a8>
 8000eb2:	458a      	cmp	sl, r1
 8000eb4:	d946      	bls.n	8000f44 <__udivmoddi4+0x2a8>
 8000eb6:	f1a9 0902 	sub.w	r9, r9, #2
 8000eba:	4421      	add	r1, r4
 8000ebc:	eba1 010a 	sub.w	r1, r1, sl
 8000ec0:	b2bf      	uxth	r7, r7
 8000ec2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ec6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000eca:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000ece:	fb00 f808 	mul.w	r8, r0, r8
 8000ed2:	45b8      	cmp	r8, r7
 8000ed4:	d907      	bls.n	8000ee6 <__udivmoddi4+0x24a>
 8000ed6:	19e7      	adds	r7, r4, r7
 8000ed8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000edc:	d22e      	bcs.n	8000f3c <__udivmoddi4+0x2a0>
 8000ede:	45b8      	cmp	r8, r7
 8000ee0:	d92c      	bls.n	8000f3c <__udivmoddi4+0x2a0>
 8000ee2:	3802      	subs	r0, #2
 8000ee4:	4427      	add	r7, r4
 8000ee6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eea:	eba7 0708 	sub.w	r7, r7, r8
 8000eee:	fba0 8902 	umull	r8, r9, r0, r2
 8000ef2:	454f      	cmp	r7, r9
 8000ef4:	46c6      	mov	lr, r8
 8000ef6:	4649      	mov	r1, r9
 8000ef8:	d31a      	bcc.n	8000f30 <__udivmoddi4+0x294>
 8000efa:	d017      	beq.n	8000f2c <__udivmoddi4+0x290>
 8000efc:	b15d      	cbz	r5, 8000f16 <__udivmoddi4+0x27a>
 8000efe:	ebb3 020e 	subs.w	r2, r3, lr
 8000f02:	eb67 0701 	sbc.w	r7, r7, r1
 8000f06:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f0a:	40f2      	lsrs	r2, r6
 8000f0c:	ea4c 0202 	orr.w	r2, ip, r2
 8000f10:	40f7      	lsrs	r7, r6
 8000f12:	e9c5 2700 	strd	r2, r7, [r5]
 8000f16:	2600      	movs	r6, #0
 8000f18:	4631      	mov	r1, r6
 8000f1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f1e:	462e      	mov	r6, r5
 8000f20:	4628      	mov	r0, r5
 8000f22:	e70b      	b.n	8000d3c <__udivmoddi4+0xa0>
 8000f24:	4606      	mov	r6, r0
 8000f26:	e6e9      	b.n	8000cfc <__udivmoddi4+0x60>
 8000f28:	4618      	mov	r0, r3
 8000f2a:	e6fd      	b.n	8000d28 <__udivmoddi4+0x8c>
 8000f2c:	4543      	cmp	r3, r8
 8000f2e:	d2e5      	bcs.n	8000efc <__udivmoddi4+0x260>
 8000f30:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f34:	eb69 0104 	sbc.w	r1, r9, r4
 8000f38:	3801      	subs	r0, #1
 8000f3a:	e7df      	b.n	8000efc <__udivmoddi4+0x260>
 8000f3c:	4608      	mov	r0, r1
 8000f3e:	e7d2      	b.n	8000ee6 <__udivmoddi4+0x24a>
 8000f40:	4660      	mov	r0, ip
 8000f42:	e78d      	b.n	8000e60 <__udivmoddi4+0x1c4>
 8000f44:	4681      	mov	r9, r0
 8000f46:	e7b9      	b.n	8000ebc <__udivmoddi4+0x220>
 8000f48:	4666      	mov	r6, ip
 8000f4a:	e775      	b.n	8000e38 <__udivmoddi4+0x19c>
 8000f4c:	4630      	mov	r0, r6
 8000f4e:	e74a      	b.n	8000de6 <__udivmoddi4+0x14a>
 8000f50:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f54:	4439      	add	r1, r7
 8000f56:	e713      	b.n	8000d80 <__udivmoddi4+0xe4>
 8000f58:	3802      	subs	r0, #2
 8000f5a:	443c      	add	r4, r7
 8000f5c:	e724      	b.n	8000da8 <__udivmoddi4+0x10c>
 8000f5e:	bf00      	nop

08000f60 <__aeabi_idiv0>:
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop

08000f64 <unpack_left_shift_u16>:

static inline uint16_t unpack_left_shift_u16(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	71fb      	strb	r3, [r7, #7]
 8000f6e:	460b      	mov	r3, r1
 8000f70:	71bb      	strb	r3, [r7, #6]
 8000f72:	4613      	mov	r3, r2
 8000f74:	717b      	strb	r3, [r7, #5]
    return (uint16_t)((uint16_t)(value & mask) << shift);
 8000f76:	79fa      	ldrb	r2, [r7, #7]
 8000f78:	797b      	ldrb	r3, [r7, #5]
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	461a      	mov	r2, r3
 8000f80:	79bb      	ldrb	r3, [r7, #6]
 8000f82:	fa02 f303 	lsl.w	r3, r2, r3
 8000f86:	b29b      	uxth	r3, r3
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	370c      	adds	r7, #12
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr

08000f94 <unpack_right_shift_u8>:

static inline uint8_t unpack_right_shift_u8(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	71fb      	strb	r3, [r7, #7]
 8000f9e:	460b      	mov	r3, r1
 8000fa0:	71bb      	strb	r3, [r7, #6]
 8000fa2:	4613      	mov	r3, r2
 8000fa4:	717b      	strb	r3, [r7, #5]
    return (uint8_t)((uint8_t)(value & mask) >> shift);
 8000fa6:	79fa      	ldrb	r2, [r7, #7]
 8000fa8:	797b      	ldrb	r3, [r7, #5]
 8000faa:	4013      	ands	r3, r2
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	461a      	mov	r2, r3
 8000fb0:	79bb      	ldrb	r3, [r7, #6]
 8000fb2:	fa42 f303 	asr.w	r3, r2, r3
 8000fb6:	b2db      	uxtb	r3, r3
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <unpack_right_shift_u16>:

static inline uint16_t unpack_right_shift_u16(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	71fb      	strb	r3, [r7, #7]
 8000fce:	460b      	mov	r3, r1
 8000fd0:	71bb      	strb	r3, [r7, #6]
 8000fd2:	4613      	mov	r3, r2
 8000fd4:	717b      	strb	r3, [r7, #5]
    return (uint16_t)((uint16_t)(value & mask) >> shift);
 8000fd6:	79fa      	ldrb	r2, [r7, #7]
 8000fd8:	797b      	ldrb	r3, [r7, #5]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	461a      	mov	r2, r3
 8000fe0:	79bb      	ldrb	r3, [r7, #6]
 8000fe2:	fa42 f303 	asr.w	r3, r2, r3
 8000fe6:	b29b      	uxth	r3, r3
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	370c      	adds	r7, #12
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr

08000ff4 <can1_dbu_status_1_unpack>:

int can1_dbu_status_1_unpack(
    struct can1_dbu_status_1_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b086      	sub	sp, #24
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	60f8      	str	r0, [r7, #12]
 8000ffc:	60b9      	str	r1, [r7, #8]
 8000ffe:	607a      	str	r2, [r7, #4]
    uint16_t dbu_temperature;

    if (size < 8u) {
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2b07      	cmp	r3, #7
 8001004:	d802      	bhi.n	800100c <can1_dbu_status_1_unpack+0x18>
        return (-EINVAL);
 8001006:	f06f 0315 	mvn.w	r3, #21
 800100a:	e03b      	b.n	8001084 <can1_dbu_status_1_unpack+0x90>
    }

    dst_p->activate_ts_button = unpack_right_shift_u8(src_p[0], 0u, 0x01u);
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	2201      	movs	r2, #1
 8001012:	2100      	movs	r1, #0
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff ffbd 	bl	8000f94 <unpack_right_shift_u8>
 800101a:	4603      	mov	r3, r0
 800101c:	461a      	mov	r2, r3
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	701a      	strb	r2, [r3, #0]
    dst_p->ready_to_drive_button = unpack_right_shift_u8(src_p[0], 1u, 0x02u);
 8001022:	68bb      	ldr	r3, [r7, #8]
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	2202      	movs	r2, #2
 8001028:	2101      	movs	r1, #1
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff ffb2 	bl	8000f94 <unpack_right_shift_u8>
 8001030:	4603      	mov	r3, r0
 8001032:	461a      	mov	r2, r3
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	705a      	strb	r2, [r3, #1]
    dbu_temperature = unpack_right_shift_u16(src_p[0], 4u, 0xf0u);
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	22f0      	movs	r2, #240	; 0xf0
 800103e:	2104      	movs	r1, #4
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff ffbf 	bl	8000fc4 <unpack_right_shift_u16>
 8001046:	4603      	mov	r3, r0
 8001048:	82fb      	strh	r3, [r7, #22]
    dbu_temperature |= unpack_left_shift_u16(src_p[1], 4u, 0xffu);
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	3301      	adds	r3, #1
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	22ff      	movs	r2, #255	; 0xff
 8001052:	2104      	movs	r1, #4
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff ff85 	bl	8000f64 <unpack_left_shift_u16>
 800105a:	4603      	mov	r3, r0
 800105c:	461a      	mov	r2, r3
 800105e:	8afb      	ldrh	r3, [r7, #22]
 8001060:	4313      	orrs	r3, r2
 8001062:	82fb      	strh	r3, [r7, #22]

    if ((dbu_temperature & (1u << 11)) != 0u) {
 8001064:	8afb      	ldrh	r3, [r7, #22]
 8001066:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800106a:	2b00      	cmp	r3, #0
 800106c:	d005      	beq.n	800107a <can1_dbu_status_1_unpack+0x86>
        dbu_temperature |= 0xf000u;
 800106e:	8afb      	ldrh	r3, [r7, #22]
 8001070:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8001074:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8001078:	82fb      	strh	r3, [r7, #22]
    }

    dst_p->dbu_temperature = (int16_t)dbu_temperature;
 800107a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	805a      	strh	r2, [r3, #2]

    return (0);
 8001082:	2300      	movs	r3, #0
}
 8001084:	4618      	mov	r0, r3
 8001086:	3718      	adds	r7, #24
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}

0800108c <unpack_left_shift_u16>:

static inline uint16_t unpack_left_shift_u16(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	71fb      	strb	r3, [r7, #7]
 8001096:	460b      	mov	r3, r1
 8001098:	71bb      	strb	r3, [r7, #6]
 800109a:	4613      	mov	r3, r2
 800109c:	717b      	strb	r3, [r7, #5]
    return (uint16_t)((uint16_t)(value & mask) << shift);
 800109e:	79fa      	ldrb	r2, [r7, #7]
 80010a0:	797b      	ldrb	r3, [r7, #5]
 80010a2:	4013      	ands	r3, r2
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	461a      	mov	r2, r3
 80010a8:	79bb      	ldrb	r3, [r7, #6]
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	b29b      	uxth	r3, r3
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr

080010bc <unpack_left_shift_u64>:

static inline uint64_t unpack_left_shift_u64(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 80010bc:	b4f0      	push	{r4, r5, r6, r7}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	71fb      	strb	r3, [r7, #7]
 80010c6:	460b      	mov	r3, r1
 80010c8:	71bb      	strb	r3, [r7, #6]
 80010ca:	4613      	mov	r3, r2
 80010cc:	717b      	strb	r3, [r7, #5]
    return (uint64_t)((uint64_t)(value & mask) << shift);
 80010ce:	79fa      	ldrb	r2, [r7, #7]
 80010d0:	797b      	ldrb	r3, [r7, #5]
 80010d2:	4013      	ands	r3, r2
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	b2da      	uxtb	r2, r3
 80010d8:	f04f 0300 	mov.w	r3, #0
 80010dc:	79b9      	ldrb	r1, [r7, #6]
 80010de:	f1a1 0620 	sub.w	r6, r1, #32
 80010e2:	f1c1 0020 	rsb	r0, r1, #32
 80010e6:	fa03 f501 	lsl.w	r5, r3, r1
 80010ea:	fa02 f606 	lsl.w	r6, r2, r6
 80010ee:	4335      	orrs	r5, r6
 80010f0:	fa22 f000 	lsr.w	r0, r2, r0
 80010f4:	4305      	orrs	r5, r0
 80010f6:	fa02 f401 	lsl.w	r4, r2, r1
 80010fa:	4622      	mov	r2, r4
 80010fc:	462b      	mov	r3, r5
}
 80010fe:	4610      	mov	r0, r2
 8001100:	4619      	mov	r1, r3
 8001102:	3708      	adds	r7, #8
 8001104:	46bd      	mov	sp, r7
 8001106:	bcf0      	pop	{r4, r5, r6, r7}
 8001108:	4770      	bx	lr

0800110a <unpack_right_shift_u8>:

static inline uint8_t unpack_right_shift_u8(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 800110a:	b480      	push	{r7}
 800110c:	b083      	sub	sp, #12
 800110e:	af00      	add	r7, sp, #0
 8001110:	4603      	mov	r3, r0
 8001112:	71fb      	strb	r3, [r7, #7]
 8001114:	460b      	mov	r3, r1
 8001116:	71bb      	strb	r3, [r7, #6]
 8001118:	4613      	mov	r3, r2
 800111a:	717b      	strb	r3, [r7, #5]
    return (uint8_t)((uint8_t)(value & mask) >> shift);
 800111c:	79fa      	ldrb	r2, [r7, #7]
 800111e:	797b      	ldrb	r3, [r7, #5]
 8001120:	4013      	ands	r3, r2
 8001122:	b2db      	uxtb	r3, r3
 8001124:	461a      	mov	r2, r3
 8001126:	79bb      	ldrb	r3, [r7, #6]
 8001128:	fa42 f303 	asr.w	r3, r2, r3
 800112c:	b2db      	uxtb	r3, r3
}
 800112e:	4618      	mov	r0, r3
 8001130:	370c      	adds	r7, #12
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr

0800113a <unpack_right_shift_u16>:

static inline uint16_t unpack_right_shift_u16(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 800113a:	b480      	push	{r7}
 800113c:	b083      	sub	sp, #12
 800113e:	af00      	add	r7, sp, #0
 8001140:	4603      	mov	r3, r0
 8001142:	71fb      	strb	r3, [r7, #7]
 8001144:	460b      	mov	r3, r1
 8001146:	71bb      	strb	r3, [r7, #6]
 8001148:	4613      	mov	r3, r2
 800114a:	717b      	strb	r3, [r7, #5]
    return (uint16_t)((uint16_t)(value & mask) >> shift);
 800114c:	79fa      	ldrb	r2, [r7, #7]
 800114e:	797b      	ldrb	r3, [r7, #5]
 8001150:	4013      	ands	r3, r2
 8001152:	b2db      	uxtb	r3, r3
 8001154:	461a      	mov	r2, r3
 8001156:	79bb      	ldrb	r3, [r7, #6]
 8001158:	fa42 f303 	asr.w	r3, r2, r3
 800115c:	b29b      	uxth	r3, r3
}
 800115e:	4618      	mov	r0, r3
 8001160:	370c      	adds	r7, #12
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr

0800116a <unpack_right_shift_u64>:

static inline uint64_t unpack_right_shift_u64(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 800116a:	b4f0      	push	{r4, r5, r6, r7}
 800116c:	b082      	sub	sp, #8
 800116e:	af00      	add	r7, sp, #0
 8001170:	4603      	mov	r3, r0
 8001172:	71fb      	strb	r3, [r7, #7]
 8001174:	460b      	mov	r3, r1
 8001176:	71bb      	strb	r3, [r7, #6]
 8001178:	4613      	mov	r3, r2
 800117a:	717b      	strb	r3, [r7, #5]
    return (uint64_t)((uint64_t)(value & mask) >> shift);
 800117c:	79fa      	ldrb	r2, [r7, #7]
 800117e:	797b      	ldrb	r3, [r7, #5]
 8001180:	4013      	ands	r3, r2
 8001182:	b2db      	uxtb	r3, r3
 8001184:	b2da      	uxtb	r2, r3
 8001186:	f04f 0300 	mov.w	r3, #0
 800118a:	79b9      	ldrb	r1, [r7, #6]
 800118c:	f1c1 0620 	rsb	r6, r1, #32
 8001190:	f1a1 0020 	sub.w	r0, r1, #32
 8001194:	fa22 f401 	lsr.w	r4, r2, r1
 8001198:	fa03 f606 	lsl.w	r6, r3, r6
 800119c:	4334      	orrs	r4, r6
 800119e:	fa23 f000 	lsr.w	r0, r3, r0
 80011a2:	4304      	orrs	r4, r0
 80011a4:	fa23 f501 	lsr.w	r5, r3, r1
 80011a8:	4622      	mov	r2, r4
 80011aa:	462b      	mov	r3, r5
}
 80011ac:	4610      	mov	r0, r2
 80011ae:	4619      	mov	r1, r3
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bcf0      	pop	{r4, r5, r6, r7}
 80011b6:	4770      	bx	lr

080011b8 <can2_amk1_setpoints_1_unpack>:

int can2_amk1_setpoints_1_unpack(
    struct can2_amk1_setpoints_1_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b086      	sub	sp, #24
 80011bc:	af00      	add	r7, sp, #0
 80011be:	60f8      	str	r0, [r7, #12]
 80011c0:	60b9      	str	r1, [r7, #8]
 80011c2:	607a      	str	r2, [r7, #4]
    uint16_t amk1_target_velocity;
    uint16_t amk1_torque_limit_negativ;
    uint16_t amk1_torque_limit_positiv;

    if (size < 8u) {
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2b07      	cmp	r3, #7
 80011c8:	d802      	bhi.n	80011d0 <can2_amk1_setpoints_1_unpack+0x18>
        return (-EINVAL);
 80011ca:	f06f 0315 	mvn.w	r3, #21
 80011ce:	e081      	b.n	80012d4 <can2_amk1_setpoints_1_unpack+0x11c>
    }

    dst_p->amk1_control_inverter_on = unpack_right_shift_u8(src_p[1], 0u, 0x01u);
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	3301      	adds	r3, #1
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	2201      	movs	r2, #1
 80011d8:	2100      	movs	r1, #0
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff ff95 	bl	800110a <unpack_right_shift_u8>
 80011e0:	4603      	mov	r3, r0
 80011e2:	461a      	mov	r2, r3
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	701a      	strb	r2, [r3, #0]
    dst_p->amk1_control_dc_on = unpack_right_shift_u8(src_p[1], 1u, 0x02u);
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	3301      	adds	r3, #1
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	2202      	movs	r2, #2
 80011f0:	2101      	movs	r1, #1
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7ff ff89 	bl	800110a <unpack_right_shift_u8>
 80011f8:	4603      	mov	r3, r0
 80011fa:	461a      	mov	r2, r3
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	705a      	strb	r2, [r3, #1]
    dst_p->amk1_control_enable = unpack_right_shift_u8(src_p[1], 2u, 0x04u);
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	3301      	adds	r3, #1
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	2204      	movs	r2, #4
 8001208:	2102      	movs	r1, #2
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff ff7d 	bl	800110a <unpack_right_shift_u8>
 8001210:	4603      	mov	r3, r0
 8001212:	461a      	mov	r2, r3
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	709a      	strb	r2, [r3, #2]
    dst_p->amk1_control_error_reset = unpack_right_shift_u8(src_p[1], 3u, 0x08u);
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	3301      	adds	r3, #1
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	2208      	movs	r2, #8
 8001220:	2103      	movs	r1, #3
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff ff71 	bl	800110a <unpack_right_shift_u8>
 8001228:	4603      	mov	r3, r0
 800122a:	461a      	mov	r2, r3
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	70da      	strb	r2, [r3, #3]
    amk1_target_velocity = unpack_right_shift_u16(src_p[2], 0u, 0xffu);
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	3302      	adds	r3, #2
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	22ff      	movs	r2, #255	; 0xff
 8001238:	2100      	movs	r1, #0
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff ff7d 	bl	800113a <unpack_right_shift_u16>
 8001240:	4603      	mov	r3, r0
 8001242:	82fb      	strh	r3, [r7, #22]
    amk1_target_velocity |= unpack_left_shift_u16(src_p[3], 8u, 0xffu);
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	3303      	adds	r3, #3
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	22ff      	movs	r2, #255	; 0xff
 800124c:	2108      	movs	r1, #8
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff ff1c 	bl	800108c <unpack_left_shift_u16>
 8001254:	4603      	mov	r3, r0
 8001256:	461a      	mov	r2, r3
 8001258:	8afb      	ldrh	r3, [r7, #22]
 800125a:	4313      	orrs	r3, r2
 800125c:	82fb      	strh	r3, [r7, #22]
    dst_p->amk1_target_velocity = (int16_t)amk1_target_velocity;
 800125e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	809a      	strh	r2, [r3, #4]
    amk1_torque_limit_positiv = unpack_right_shift_u16(src_p[4], 0u, 0xffu);
 8001266:	68bb      	ldr	r3, [r7, #8]
 8001268:	3304      	adds	r3, #4
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	22ff      	movs	r2, #255	; 0xff
 800126e:	2100      	movs	r1, #0
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff ff62 	bl	800113a <unpack_right_shift_u16>
 8001276:	4603      	mov	r3, r0
 8001278:	82bb      	strh	r3, [r7, #20]
    amk1_torque_limit_positiv |= unpack_left_shift_u16(src_p[5], 8u, 0xffu);
 800127a:	68bb      	ldr	r3, [r7, #8]
 800127c:	3305      	adds	r3, #5
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	22ff      	movs	r2, #255	; 0xff
 8001282:	2108      	movs	r1, #8
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff ff01 	bl	800108c <unpack_left_shift_u16>
 800128a:	4603      	mov	r3, r0
 800128c:	461a      	mov	r2, r3
 800128e:	8abb      	ldrh	r3, [r7, #20]
 8001290:	4313      	orrs	r3, r2
 8001292:	82bb      	strh	r3, [r7, #20]
    dst_p->amk1_torque_limit_positiv = (int16_t)amk1_torque_limit_positiv;
 8001294:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	80da      	strh	r2, [r3, #6]
    amk1_torque_limit_negativ = unpack_right_shift_u16(src_p[6], 0u, 0xffu);
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	3306      	adds	r3, #6
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	22ff      	movs	r2, #255	; 0xff
 80012a4:	2100      	movs	r1, #0
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff ff47 	bl	800113a <unpack_right_shift_u16>
 80012ac:	4603      	mov	r3, r0
 80012ae:	827b      	strh	r3, [r7, #18]
    amk1_torque_limit_negativ |= unpack_left_shift_u16(src_p[7], 8u, 0xffu);
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	3307      	adds	r3, #7
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	22ff      	movs	r2, #255	; 0xff
 80012b8:	2108      	movs	r1, #8
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff fee6 	bl	800108c <unpack_left_shift_u16>
 80012c0:	4603      	mov	r3, r0
 80012c2:	461a      	mov	r2, r3
 80012c4:	8a7b      	ldrh	r3, [r7, #18]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	827b      	strh	r3, [r7, #18]
    dst_p->amk1_torque_limit_negativ = (int16_t)amk1_torque_limit_negativ;
 80012ca:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	811a      	strh	r2, [r3, #8]

    return (0);
 80012d2:	2300      	movs	r3, #0
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3718      	adds	r7, #24
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}

080012dc <can2_ivt_msg_result_i_unpack>:

int can2_ivt_msg_result_i_unpack(
    struct can2_ivt_msg_result_i_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
 80012dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80012e0:	b08e      	sub	sp, #56	; 0x38
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	62f8      	str	r0, [r7, #44]	; 0x2c
 80012e6:	62b9      	str	r1, [r7, #40]	; 0x28
 80012e8:	627a      	str	r2, [r7, #36]	; 0x24
    uint64_t i_ts;

    if (size < 6u) {
 80012ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ec:	2b05      	cmp	r3, #5
 80012ee:	d802      	bhi.n	80012f6 <can2_ivt_msg_result_i_unpack+0x1a>
        return (-EINVAL);
 80012f0:	f06f 0315 	mvn.w	r3, #21
 80012f4:	e081      	b.n	80013fa <can2_ivt_msg_result_i_unpack+0x11e>
    }

    i_ts = unpack_left_shift_u64(src_p[0], 40u, 0xffu);
 80012f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	22ff      	movs	r2, #255	; 0xff
 80012fc:	2128      	movs	r1, #40	; 0x28
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff fedc 	bl	80010bc <unpack_left_shift_u64>
 8001304:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
    i_ts |= unpack_left_shift_u64(src_p[1], 32u, 0xffu);
 8001308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800130a:	3301      	adds	r3, #1
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	22ff      	movs	r2, #255	; 0xff
 8001310:	2120      	movs	r1, #32
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff fed2 	bl	80010bc <unpack_left_shift_u64>
 8001318:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800131c:	ea42 0400 	orr.w	r4, r2, r0
 8001320:	ea43 0501 	orr.w	r5, r3, r1
 8001324:	e9c7 450c 	strd	r4, r5, [r7, #48]	; 0x30
    i_ts |= unpack_left_shift_u64(src_p[2], 24u, 0xffu);
 8001328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800132a:	3302      	adds	r3, #2
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	22ff      	movs	r2, #255	; 0xff
 8001330:	2118      	movs	r1, #24
 8001332:	4618      	mov	r0, r3
 8001334:	f7ff fec2 	bl	80010bc <unpack_left_shift_u64>
 8001338:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800133c:	ea42 0800 	orr.w	r8, r2, r0
 8001340:	ea43 0901 	orr.w	r9, r3, r1
 8001344:	e9c7 890c 	strd	r8, r9, [r7, #48]	; 0x30
    i_ts |= unpack_left_shift_u64(src_p[3], 16u, 0xffu);
 8001348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800134a:	3303      	adds	r3, #3
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	22ff      	movs	r2, #255	; 0xff
 8001350:	2110      	movs	r1, #16
 8001352:	4618      	mov	r0, r3
 8001354:	f7ff feb2 	bl	80010bc <unpack_left_shift_u64>
 8001358:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800135c:	ea42 0400 	orr.w	r4, r2, r0
 8001360:	613c      	str	r4, [r7, #16]
 8001362:	430b      	orrs	r3, r1
 8001364:	617b      	str	r3, [r7, #20]
 8001366:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800136a:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    i_ts |= unpack_left_shift_u64(src_p[4], 8u, 0xffu);
 800136e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001370:	3304      	adds	r3, #4
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	22ff      	movs	r2, #255	; 0xff
 8001376:	2108      	movs	r1, #8
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff fe9f 	bl	80010bc <unpack_left_shift_u64>
 800137e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001382:	ea42 0400 	orr.w	r4, r2, r0
 8001386:	60bc      	str	r4, [r7, #8]
 8001388:	430b      	orrs	r3, r1
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001390:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    i_ts |= unpack_right_shift_u64(src_p[5], 0u, 0xffu);
 8001394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001396:	3305      	adds	r3, #5
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	22ff      	movs	r2, #255	; 0xff
 800139c:	2100      	movs	r1, #0
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff fee3 	bl	800116a <unpack_right_shift_u64>
 80013a4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80013a8:	ea42 0400 	orr.w	r4, r2, r0
 80013ac:	603c      	str	r4, [r7, #0]
 80013ae:	430b      	orrs	r3, r1
 80013b0:	607b      	str	r3, [r7, #4]
 80013b2:	e9d7 3400 	ldrd	r3, r4, [r7]
 80013b6:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    if ((i_ts & (1ull << 47)) != 0ull) {
 80013ba:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80013be:	f04f 0000 	mov.w	r0, #0
 80013c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013c6:	ea02 0400 	and.w	r4, r2, r0
 80013ca:	61bc      	str	r4, [r7, #24]
 80013cc:	400b      	ands	r3, r1
 80013ce:	61fb      	str	r3, [r7, #28]
 80013d0:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80013d4:	4323      	orrs	r3, r4
 80013d6:	d00a      	beq.n	80013ee <can2_ivt_msg_result_i_unpack+0x112>
        i_ts |= 0xffff000000000000ull;
 80013d8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80013dc:	f04f 0000 	mov.w	r0, #0
 80013e0:	4908      	ldr	r1, [pc, #32]	; (8001404 <can2_ivt_msg_result_i_unpack+0x128>)
 80013e2:	ea42 0a00 	orr.w	sl, r2, r0
 80013e6:	ea43 0b01 	orr.w	fp, r3, r1
 80013ea:	e9c7 ab0c 	strd	sl, fp, [r7, #48]	; 0x30
    }

    dst_p->i_ts = (int64_t)i_ts;
 80013ee:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80013f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80013f4:	e9c1 2300 	strd	r2, r3, [r1]

    return (0);
 80013f8:	2300      	movs	r3, #0
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3738      	adds	r7, #56	; 0x38
 80013fe:	46bd      	mov	sp, r7
 8001400:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001404:	ffff0000 	.word	0xffff0000

08001408 <can2_ivt_msg_result_u1_unpack>:

int can2_ivt_msg_result_u1_unpack(
    struct can2_ivt_msg_result_u1_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
 8001408:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800140c:	b08e      	sub	sp, #56	; 0x38
 800140e:	af00      	add	r7, sp, #0
 8001410:	62f8      	str	r0, [r7, #44]	; 0x2c
 8001412:	62b9      	str	r1, [r7, #40]	; 0x28
 8001414:	627a      	str	r2, [r7, #36]	; 0x24
    uint64_t u_cells;

    if (size < 6u) {
 8001416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001418:	2b05      	cmp	r3, #5
 800141a:	d802      	bhi.n	8001422 <can2_ivt_msg_result_u1_unpack+0x1a>
        return (-EINVAL);
 800141c:	f06f 0315 	mvn.w	r3, #21
 8001420:	e081      	b.n	8001526 <can2_ivt_msg_result_u1_unpack+0x11e>
    }

    u_cells = unpack_left_shift_u64(src_p[0], 40u, 0xffu);
 8001422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	22ff      	movs	r2, #255	; 0xff
 8001428:	2128      	movs	r1, #40	; 0x28
 800142a:	4618      	mov	r0, r3
 800142c:	f7ff fe46 	bl	80010bc <unpack_left_shift_u64>
 8001430:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
    u_cells |= unpack_left_shift_u64(src_p[1], 32u, 0xffu);
 8001434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001436:	3301      	adds	r3, #1
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	22ff      	movs	r2, #255	; 0xff
 800143c:	2120      	movs	r1, #32
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff fe3c 	bl	80010bc <unpack_left_shift_u64>
 8001444:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001448:	ea42 0400 	orr.w	r4, r2, r0
 800144c:	ea43 0501 	orr.w	r5, r3, r1
 8001450:	e9c7 450c 	strd	r4, r5, [r7, #48]	; 0x30
    u_cells |= unpack_left_shift_u64(src_p[2], 24u, 0xffu);
 8001454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001456:	3302      	adds	r3, #2
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	22ff      	movs	r2, #255	; 0xff
 800145c:	2118      	movs	r1, #24
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff fe2c 	bl	80010bc <unpack_left_shift_u64>
 8001464:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001468:	ea42 0800 	orr.w	r8, r2, r0
 800146c:	ea43 0901 	orr.w	r9, r3, r1
 8001470:	e9c7 890c 	strd	r8, r9, [r7, #48]	; 0x30
    u_cells |= unpack_left_shift_u64(src_p[3], 16u, 0xffu);
 8001474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001476:	3303      	adds	r3, #3
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	22ff      	movs	r2, #255	; 0xff
 800147c:	2110      	movs	r1, #16
 800147e:	4618      	mov	r0, r3
 8001480:	f7ff fe1c 	bl	80010bc <unpack_left_shift_u64>
 8001484:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001488:	ea42 0400 	orr.w	r4, r2, r0
 800148c:	613c      	str	r4, [r7, #16]
 800148e:	430b      	orrs	r3, r1
 8001490:	617b      	str	r3, [r7, #20]
 8001492:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001496:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    u_cells |= unpack_left_shift_u64(src_p[4], 8u, 0xffu);
 800149a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800149c:	3304      	adds	r3, #4
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	22ff      	movs	r2, #255	; 0xff
 80014a2:	2108      	movs	r1, #8
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff fe09 	bl	80010bc <unpack_left_shift_u64>
 80014aa:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80014ae:	ea42 0400 	orr.w	r4, r2, r0
 80014b2:	60bc      	str	r4, [r7, #8]
 80014b4:	430b      	orrs	r3, r1
 80014b6:	60fb      	str	r3, [r7, #12]
 80014b8:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80014bc:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    u_cells |= unpack_right_shift_u64(src_p[5], 0u, 0xffu);
 80014c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014c2:	3305      	adds	r3, #5
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	22ff      	movs	r2, #255	; 0xff
 80014c8:	2100      	movs	r1, #0
 80014ca:	4618      	mov	r0, r3
 80014cc:	f7ff fe4d 	bl	800116a <unpack_right_shift_u64>
 80014d0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80014d4:	ea42 0400 	orr.w	r4, r2, r0
 80014d8:	603c      	str	r4, [r7, #0]
 80014da:	430b      	orrs	r3, r1
 80014dc:	607b      	str	r3, [r7, #4]
 80014de:	e9d7 3400 	ldrd	r3, r4, [r7]
 80014e2:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    if ((u_cells & (1ull << 47)) != 0ull) {
 80014e6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80014ea:	f04f 0000 	mov.w	r0, #0
 80014ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014f2:	ea02 0400 	and.w	r4, r2, r0
 80014f6:	61bc      	str	r4, [r7, #24]
 80014f8:	400b      	ands	r3, r1
 80014fa:	61fb      	str	r3, [r7, #28]
 80014fc:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001500:	4323      	orrs	r3, r4
 8001502:	d00a      	beq.n	800151a <can2_ivt_msg_result_u1_unpack+0x112>
        u_cells |= 0xffff000000000000ull;
 8001504:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001508:	f04f 0000 	mov.w	r0, #0
 800150c:	4908      	ldr	r1, [pc, #32]	; (8001530 <can2_ivt_msg_result_u1_unpack+0x128>)
 800150e:	ea42 0a00 	orr.w	sl, r2, r0
 8001512:	ea43 0b01 	orr.w	fp, r3, r1
 8001516:	e9c7 ab0c 	strd	sl, fp, [r7, #48]	; 0x30
    }

    dst_p->u_cells = (int64_t)u_cells;
 800151a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800151e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001520:	e9c1 2300 	strd	r2, r3, [r1]

    return (0);
 8001524:	2300      	movs	r3, #0
}
 8001526:	4618      	mov	r0, r3
 8001528:	3738      	adds	r7, #56	; 0x38
 800152a:	46bd      	mov	sp, r7
 800152c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001530:	ffff0000 	.word	0xffff0000

08001534 <can2_ivt_msg_result_u3_unpack>:

int can2_ivt_msg_result_u3_unpack(
    struct can2_ivt_msg_result_u3_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
 8001534:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001538:	b08e      	sub	sp, #56	; 0x38
 800153a:	af00      	add	r7, sp, #0
 800153c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800153e:	62b9      	str	r1, [r7, #40]	; 0x28
 8001540:	627a      	str	r2, [r7, #36]	; 0x24
    uint64_t u_vehicle;

    if (size < 6u) {
 8001542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001544:	2b05      	cmp	r3, #5
 8001546:	d802      	bhi.n	800154e <can2_ivt_msg_result_u3_unpack+0x1a>
        return (-EINVAL);
 8001548:	f06f 0315 	mvn.w	r3, #21
 800154c:	e081      	b.n	8001652 <can2_ivt_msg_result_u3_unpack+0x11e>
    }

    u_vehicle = unpack_left_shift_u64(src_p[0], 40u, 0xffu);
 800154e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	22ff      	movs	r2, #255	; 0xff
 8001554:	2128      	movs	r1, #40	; 0x28
 8001556:	4618      	mov	r0, r3
 8001558:	f7ff fdb0 	bl	80010bc <unpack_left_shift_u64>
 800155c:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
    u_vehicle |= unpack_left_shift_u64(src_p[1], 32u, 0xffu);
 8001560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001562:	3301      	adds	r3, #1
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	22ff      	movs	r2, #255	; 0xff
 8001568:	2120      	movs	r1, #32
 800156a:	4618      	mov	r0, r3
 800156c:	f7ff fda6 	bl	80010bc <unpack_left_shift_u64>
 8001570:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001574:	ea42 0400 	orr.w	r4, r2, r0
 8001578:	ea43 0501 	orr.w	r5, r3, r1
 800157c:	e9c7 450c 	strd	r4, r5, [r7, #48]	; 0x30
    u_vehicle |= unpack_left_shift_u64(src_p[2], 24u, 0xffu);
 8001580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001582:	3302      	adds	r3, #2
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	22ff      	movs	r2, #255	; 0xff
 8001588:	2118      	movs	r1, #24
 800158a:	4618      	mov	r0, r3
 800158c:	f7ff fd96 	bl	80010bc <unpack_left_shift_u64>
 8001590:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001594:	ea42 0800 	orr.w	r8, r2, r0
 8001598:	ea43 0901 	orr.w	r9, r3, r1
 800159c:	e9c7 890c 	strd	r8, r9, [r7, #48]	; 0x30
    u_vehicle |= unpack_left_shift_u64(src_p[3], 16u, 0xffu);
 80015a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015a2:	3303      	adds	r3, #3
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	22ff      	movs	r2, #255	; 0xff
 80015a8:	2110      	movs	r1, #16
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7ff fd86 	bl	80010bc <unpack_left_shift_u64>
 80015b0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80015b4:	ea42 0400 	orr.w	r4, r2, r0
 80015b8:	613c      	str	r4, [r7, #16]
 80015ba:	430b      	orrs	r3, r1
 80015bc:	617b      	str	r3, [r7, #20]
 80015be:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80015c2:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    u_vehicle |= unpack_left_shift_u64(src_p[4], 8u, 0xffu);
 80015c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015c8:	3304      	adds	r3, #4
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	22ff      	movs	r2, #255	; 0xff
 80015ce:	2108      	movs	r1, #8
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7ff fd73 	bl	80010bc <unpack_left_shift_u64>
 80015d6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80015da:	ea42 0400 	orr.w	r4, r2, r0
 80015de:	60bc      	str	r4, [r7, #8]
 80015e0:	430b      	orrs	r3, r1
 80015e2:	60fb      	str	r3, [r7, #12]
 80015e4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80015e8:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    u_vehicle |= unpack_right_shift_u64(src_p[5], 0u, 0xffu);
 80015ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015ee:	3305      	adds	r3, #5
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	22ff      	movs	r2, #255	; 0xff
 80015f4:	2100      	movs	r1, #0
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7ff fdb7 	bl	800116a <unpack_right_shift_u64>
 80015fc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001600:	ea42 0400 	orr.w	r4, r2, r0
 8001604:	603c      	str	r4, [r7, #0]
 8001606:	430b      	orrs	r3, r1
 8001608:	607b      	str	r3, [r7, #4]
 800160a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800160e:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    if ((u_vehicle & (1ull << 47)) != 0ull) {
 8001612:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001616:	f04f 0000 	mov.w	r0, #0
 800161a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800161e:	ea02 0400 	and.w	r4, r2, r0
 8001622:	61bc      	str	r4, [r7, #24]
 8001624:	400b      	ands	r3, r1
 8001626:	61fb      	str	r3, [r7, #28]
 8001628:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800162c:	4323      	orrs	r3, r4
 800162e:	d00a      	beq.n	8001646 <can2_ivt_msg_result_u3_unpack+0x112>
        u_vehicle |= 0xffff000000000000ull;
 8001630:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001634:	f04f 0000 	mov.w	r0, #0
 8001638:	4908      	ldr	r1, [pc, #32]	; (800165c <can2_ivt_msg_result_u3_unpack+0x128>)
 800163a:	ea42 0a00 	orr.w	sl, r2, r0
 800163e:	ea43 0b01 	orr.w	fp, r3, r1
 8001642:	e9c7 ab0c 	strd	sl, fp, [r7, #48]	; 0x30
    }

    dst_p->u_vehicle = (int64_t)u_vehicle;
 8001646:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800164a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800164c:	e9c1 2300 	strd	r2, r3, [r1]

    return (0);
 8001650:	2300      	movs	r3, #0
}
 8001652:	4618      	mov	r0, r3
 8001654:	3738      	adds	r7, #56	; 0x38
 8001656:	46bd      	mov	sp, r7
 8001658:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800165c:	ffff0000 	.word	0xffff0000

08001660 <can2_cc_status_unpack>:

int can2_cc_status_unpack(
    struct can2_cc_status_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	607a      	str	r2, [r7, #4]
    if (size < 1u) {
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d102      	bne.n	8001678 <can2_cc_status_unpack+0x18>
        return (-EINVAL);
 8001672:	f06f 0315 	mvn.w	r3, #21
 8001676:	e00b      	b.n	8001690 <can2_cc_status_unpack+0x30>
    }

    dst_p->enable_ams_charging = unpack_right_shift_u8(src_p[0], 0u, 0x01u);
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	2201      	movs	r2, #1
 800167e:	2100      	movs	r1, #0
 8001680:	4618      	mov	r0, r3
 8001682:	f7ff fd42 	bl	800110a <unpack_right_shift_u8>
 8001686:	4603      	mov	r3, r0
 8001688:	461a      	mov	r2, r3
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	701a      	strb	r2, [r3, #0]

    return (0);
 800168e:	2300      	movs	r3, #0
}
 8001690:	4618      	mov	r0, r3
 8001692:	3710      	adds	r7, #16
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}

08001698 <can1_dbu_status_1_decode>:

/*
 * @Brief  
 * @Retval None
 */
void can1_dbu_status_1_decode() {
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
   can1_dbu_status_1_unpack(&can1_dbu_status_1, rx_data, 8);
 800169c:	2208      	movs	r2, #8
 800169e:	4904      	ldr	r1, [pc, #16]	; (80016b0 <can1_dbu_status_1_decode+0x18>)
 80016a0:	4804      	ldr	r0, [pc, #16]	; (80016b4 <can1_dbu_status_1_decode+0x1c>)
 80016a2:	f7ff fca7 	bl	8000ff4 <can1_dbu_status_1_unpack>
   can1_dbu_status_1_flag = 1;
 80016a6:	4b04      	ldr	r3, [pc, #16]	; (80016b8 <can1_dbu_status_1_decode+0x20>)
 80016a8:	2201      	movs	r2, #1
 80016aa:	701a      	strb	r2, [r3, #0]
}
 80016ac:	bf00      	nop
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	2000144c 	.word	0x2000144c
 80016b4:	20001454 	.word	0x20001454
 80016b8:	20001481 	.word	0x20001481

080016bc <can2_amk1_setpoints_1_decode>:

/*
 * @Brief  
 * @Retval None
 */
void can2_amk1_setpoints_1_decode() {
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
   can2_amk1_setpoints_1_unpack(&can2_amk1_setpoints_1, rx_data, 8);
 80016c0:	2208      	movs	r2, #8
 80016c2:	4904      	ldr	r1, [pc, #16]	; (80016d4 <can2_amk1_setpoints_1_decode+0x18>)
 80016c4:	4804      	ldr	r0, [pc, #16]	; (80016d8 <can2_amk1_setpoints_1_decode+0x1c>)
 80016c6:	f7ff fd77 	bl	80011b8 <can2_amk1_setpoints_1_unpack>
   can2_amk1_setpoints_1_flag = 1;
 80016ca:	4b04      	ldr	r3, [pc, #16]	; (80016dc <can2_amk1_setpoints_1_decode+0x20>)
 80016cc:	2201      	movs	r2, #1
 80016ce:	701a      	strb	r2, [r3, #0]
}
 80016d0:	bf00      	nop
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	2000144c 	.word	0x2000144c
 80016d8:	20001458 	.word	0x20001458
 80016dc:	20001482 	.word	0x20001482

080016e0 <can2_ivt_msg_result_i_decode>:

/*
 * @Brief  
 * @Retval None
 */
void can2_ivt_msg_result_i_decode() {
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
   can2_ivt_msg_result_i_unpack(&can2_ivt_msg_result_i, rx_data, 6);
 80016e4:	2206      	movs	r2, #6
 80016e6:	4904      	ldr	r1, [pc, #16]	; (80016f8 <can2_ivt_msg_result_i_decode+0x18>)
 80016e8:	4804      	ldr	r0, [pc, #16]	; (80016fc <can2_ivt_msg_result_i_decode+0x1c>)
 80016ea:	f7ff fdf7 	bl	80012dc <can2_ivt_msg_result_i_unpack>
   can2_ivt_msg_result_i_flag = 1;
 80016ee:	4b04      	ldr	r3, [pc, #16]	; (8001700 <can2_ivt_msg_result_i_decode+0x20>)
 80016f0:	2201      	movs	r2, #1
 80016f2:	701a      	strb	r2, [r3, #0]
}
 80016f4:	bf00      	nop
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	2000144c 	.word	0x2000144c
 80016fc:	20001468 	.word	0x20001468
 8001700:	20001483 	.word	0x20001483

08001704 <can2_ivt_msg_result_u1_decode>:

/*
 * @Brief  
 * @Retval None
 */
void can2_ivt_msg_result_u1_decode() {
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
   can2_ivt_msg_result_u1_unpack(&can2_ivt_msg_result_u1, rx_data, 6);
 8001708:	2206      	movs	r2, #6
 800170a:	4904      	ldr	r1, [pc, #16]	; (800171c <can2_ivt_msg_result_u1_decode+0x18>)
 800170c:	4804      	ldr	r0, [pc, #16]	; (8001720 <can2_ivt_msg_result_u1_decode+0x1c>)
 800170e:	f7ff fe7b 	bl	8001408 <can2_ivt_msg_result_u1_unpack>
   can2_ivt_msg_result_u1_flag = 1;
 8001712:	4b04      	ldr	r3, [pc, #16]	; (8001724 <can2_ivt_msg_result_u1_decode+0x20>)
 8001714:	2201      	movs	r2, #1
 8001716:	701a      	strb	r2, [r3, #0]
}
 8001718:	bf00      	nop
 800171a:	bd80      	pop	{r7, pc}
 800171c:	2000144c 	.word	0x2000144c
 8001720:	20001470 	.word	0x20001470
 8001724:	20001484 	.word	0x20001484

08001728 <can2_ivt_msg_result_u3_decode>:

/*
 * @Brief  
 * @Retval None
 */
void can2_ivt_msg_result_u3_decode() {
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
   can2_ivt_msg_result_u3_unpack(&can2_ivt_msg_result_u3, rx_data, 6);
 800172c:	2206      	movs	r2, #6
 800172e:	4904      	ldr	r1, [pc, #16]	; (8001740 <can2_ivt_msg_result_u3_decode+0x18>)
 8001730:	4804      	ldr	r0, [pc, #16]	; (8001744 <can2_ivt_msg_result_u3_decode+0x1c>)
 8001732:	f7ff feff 	bl	8001534 <can2_ivt_msg_result_u3_unpack>
   can2_ivt_msg_result_u3_flag = 1;
 8001736:	4b04      	ldr	r3, [pc, #16]	; (8001748 <can2_ivt_msg_result_u3_decode+0x20>)
 8001738:	2201      	movs	r2, #1
 800173a:	701a      	strb	r2, [r3, #0]
}
 800173c:	bf00      	nop
 800173e:	bd80      	pop	{r7, pc}
 8001740:	2000144c 	.word	0x2000144c
 8001744:	20001478 	.word	0x20001478
 8001748:	20001485 	.word	0x20001485

0800174c <can2_cc_status_decode>:

/*
 * @Brief  
 * @Retval None
 */
void can2_cc_status_decode() {
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
   can2_cc_status_unpack(&can2_cc_status, rx_data, 1);
 8001750:	2201      	movs	r2, #1
 8001752:	4904      	ldr	r1, [pc, #16]	; (8001764 <can2_cc_status_decode+0x18>)
 8001754:	4804      	ldr	r0, [pc, #16]	; (8001768 <can2_cc_status_decode+0x1c>)
 8001756:	f7ff ff83 	bl	8001660 <can2_cc_status_unpack>
   can2_cc_status_flag = 1;
 800175a:	4b04      	ldr	r3, [pc, #16]	; (800176c <can2_cc_status_decode+0x20>)
 800175c:	2201      	movs	r2, #1
 800175e:	701a      	strb	r2, [r3, #0]
}
 8001760:	bf00      	nop
 8001762:	bd80      	pop	{r7, pc}
 8001764:	2000144c 	.word	0x2000144c
 8001768:	20001480 	.word	0x20001480
 800176c:	20001486 	.word	0x20001486

08001770 <HAL_CAN_RxFifo0MsgPendingCallback>:
       can2_cc_status_rx_callback(&cc_status);
       can2_cc_status_flag = 0;
   }
}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001770:	b580      	push	{r7, lr}
 8001772:	b08a      	sub	sp, #40	; 0x28
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
   CAN_RxHeaderTypeDef rx_header;
   static uint8_t rx_data[8];

   if (HAL_OK == HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_header, rx_data)) {
 8001778:	f107 020c 	add.w	r2, r7, #12
 800177c:	4b21      	ldr	r3, [pc, #132]	; (8001804 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 800177e:	2100      	movs	r1, #0
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	f00f fdc6 	bl	8011312 <HAL_CAN_GetRxMessage>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d136      	bne.n	80017fa <HAL_CAN_RxFifo0MsgPendingCallback+0x8a>
       switch(rx_header.StdId) {
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	f240 5224 	movw	r2, #1316	; 0x524
 8001792:	4293      	cmp	r3, r2
 8001794:	d02b      	beq.n	80017ee <HAL_CAN_RxFifo0MsgPendingCallback+0x7e>
 8001796:	f240 5224 	movw	r2, #1316	; 0x524
 800179a:	4293      	cmp	r3, r2
 800179c:	d82e      	bhi.n	80017fc <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>
 800179e:	f240 5222 	movw	r2, #1314	; 0x522
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d020      	beq.n	80017e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>
 80017a6:	f240 5222 	movw	r2, #1314	; 0x522
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d826      	bhi.n	80017fc <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>
 80017ae:	f240 5221 	movw	r2, #1313	; 0x521
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d015      	beq.n	80017e2 <HAL_CAN_RxFifo0MsgPendingCallback+0x72>
 80017b6:	f240 5221 	movw	r2, #1313	; 0x521
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d81e      	bhi.n	80017fc <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>
 80017be:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 80017c2:	d017      	beq.n	80017f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>
 80017c4:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 80017c8:	d818      	bhi.n	80017fc <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>
 80017ca:	2b40      	cmp	r3, #64	; 0x40
 80017cc:	d003      	beq.n	80017d6 <HAL_CAN_RxFifo0MsgPendingCallback+0x66>
 80017ce:	f5b3 7fc2 	cmp.w	r3, #388	; 0x184
 80017d2:	d003      	beq.n	80017dc <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>
           case 592:
               can2_cc_status_decode();
               break;
        }
    }
}
 80017d4:	e012      	b.n	80017fc <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>
               can1_dbu_status_1_decode();
 80017d6:	f7ff ff5f 	bl	8001698 <can1_dbu_status_1_decode>
               break;
 80017da:	e00f      	b.n	80017fc <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>
               can2_amk1_setpoints_1_decode();
 80017dc:	f7ff ff6e 	bl	80016bc <can2_amk1_setpoints_1_decode>
               break;
 80017e0:	e00c      	b.n	80017fc <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>
               can2_ivt_msg_result_i_decode();
 80017e2:	f7ff ff7d 	bl	80016e0 <can2_ivt_msg_result_i_decode>
               break;
 80017e6:	e009      	b.n	80017fc <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>
               can2_ivt_msg_result_u1_decode();
 80017e8:	f7ff ff8c 	bl	8001704 <can2_ivt_msg_result_u1_decode>
               break;
 80017ec:	e006      	b.n	80017fc <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>
               can2_ivt_msg_result_u3_decode();
 80017ee:	f7ff ff9b 	bl	8001728 <can2_ivt_msg_result_u3_decode>
               break;
 80017f2:	e003      	b.n	80017fc <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>
               can2_cc_status_decode();
 80017f4:	f7ff ffaa 	bl	800174c <can2_cc_status_decode>
               break;
 80017f8:	e000      	b.n	80017fc <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>
    }
 80017fa:	bf00      	nop
}
 80017fc:	bf00      	nop
 80017fe:	3728      	adds	r7, #40	; 0x28
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	20001488 	.word	0x20001488

08001808 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001808:	b580      	push	{r7, lr}
 800180a:	b08a      	sub	sp, #40	; 0x28
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
   CAN_RxHeaderTypeDef rx_header;
   static uint8_t rx_data[8];

   if (HAL_OK == HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &rx_header, rx_data)) {
 8001810:	f107 020c 	add.w	r2, r7, #12
 8001814:	4b21      	ldr	r3, [pc, #132]	; (800189c <HAL_CAN_RxFifo1MsgPendingCallback+0x94>)
 8001816:	2101      	movs	r1, #1
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f00f fd7a 	bl	8011312 <HAL_CAN_GetRxMessage>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d136      	bne.n	8001892 <HAL_CAN_RxFifo1MsgPendingCallback+0x8a>
       switch(rx_header.StdId) {
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	f240 5224 	movw	r2, #1316	; 0x524
 800182a:	4293      	cmp	r3, r2
 800182c:	d02b      	beq.n	8001886 <HAL_CAN_RxFifo1MsgPendingCallback+0x7e>
 800182e:	f240 5224 	movw	r2, #1316	; 0x524
 8001832:	4293      	cmp	r3, r2
 8001834:	d82e      	bhi.n	8001894 <HAL_CAN_RxFifo1MsgPendingCallback+0x8c>
 8001836:	f240 5222 	movw	r2, #1314	; 0x522
 800183a:	4293      	cmp	r3, r2
 800183c:	d020      	beq.n	8001880 <HAL_CAN_RxFifo1MsgPendingCallback+0x78>
 800183e:	f240 5222 	movw	r2, #1314	; 0x522
 8001842:	4293      	cmp	r3, r2
 8001844:	d826      	bhi.n	8001894 <HAL_CAN_RxFifo1MsgPendingCallback+0x8c>
 8001846:	f240 5221 	movw	r2, #1313	; 0x521
 800184a:	4293      	cmp	r3, r2
 800184c:	d015      	beq.n	800187a <HAL_CAN_RxFifo1MsgPendingCallback+0x72>
 800184e:	f240 5221 	movw	r2, #1313	; 0x521
 8001852:	4293      	cmp	r3, r2
 8001854:	d81e      	bhi.n	8001894 <HAL_CAN_RxFifo1MsgPendingCallback+0x8c>
 8001856:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800185a:	d017      	beq.n	800188c <HAL_CAN_RxFifo1MsgPendingCallback+0x84>
 800185c:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8001860:	d818      	bhi.n	8001894 <HAL_CAN_RxFifo1MsgPendingCallback+0x8c>
 8001862:	2b40      	cmp	r3, #64	; 0x40
 8001864:	d003      	beq.n	800186e <HAL_CAN_RxFifo1MsgPendingCallback+0x66>
 8001866:	f5b3 7fc2 	cmp.w	r3, #388	; 0x184
 800186a:	d003      	beq.n	8001874 <HAL_CAN_RxFifo1MsgPendingCallback+0x6c>
           case 592:
               can2_cc_status_decode();
               break;
        }
    }
}
 800186c:	e012      	b.n	8001894 <HAL_CAN_RxFifo1MsgPendingCallback+0x8c>
               can1_dbu_status_1_decode();
 800186e:	f7ff ff13 	bl	8001698 <can1_dbu_status_1_decode>
               break;
 8001872:	e00f      	b.n	8001894 <HAL_CAN_RxFifo1MsgPendingCallback+0x8c>
               can2_amk1_setpoints_1_decode();
 8001874:	f7ff ff22 	bl	80016bc <can2_amk1_setpoints_1_decode>
               break;
 8001878:	e00c      	b.n	8001894 <HAL_CAN_RxFifo1MsgPendingCallback+0x8c>
               can2_ivt_msg_result_i_decode();
 800187a:	f7ff ff31 	bl	80016e0 <can2_ivt_msg_result_i_decode>
               break;
 800187e:	e009      	b.n	8001894 <HAL_CAN_RxFifo1MsgPendingCallback+0x8c>
               can2_ivt_msg_result_u1_decode();
 8001880:	f7ff ff40 	bl	8001704 <can2_ivt_msg_result_u1_decode>
               break;
 8001884:	e006      	b.n	8001894 <HAL_CAN_RxFifo1MsgPendingCallback+0x8c>
               can2_ivt_msg_result_u3_decode();
 8001886:	f7ff ff4f 	bl	8001728 <can2_ivt_msg_result_u3_decode>
               break;
 800188a:	e003      	b.n	8001894 <HAL_CAN_RxFifo1MsgPendingCallback+0x8c>
               can2_cc_status_decode();
 800188c:	f7ff ff5e 	bl	800174c <can2_cc_status_decode>
               break;
 8001890:	e000      	b.n	8001894 <HAL_CAN_RxFifo1MsgPendingCallback+0x8c>
    }
 8001892:	bf00      	nop
}
 8001894:	bf00      	nop
 8001896:	3728      	adds	r7, #40	; 0x28
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	20001490 	.word	0x20001490

080018a0 <inc_res>:
 * @Brief	Increments if true, resets (to zero) otherwise
 * @Param	A conditional statement which evaluates to true or false
 * @Param	A pointer to an integer which may be incremented or reset
 * @Retval	Void
 */
static void inc_res(uint8_t cnd, uint8_t *ptr) {
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	4603      	mov	r3, r0
 80018a8:	6039      	str	r1, [r7, #0]
 80018aa:	71fb      	strb	r3, [r7, #7]
	if (cnd) {
 80018ac:	79fb      	ldrb	r3, [r7, #7]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d006      	beq.n	80018c0 <inc_res+0x20>
		ptr[0]++;
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	3301      	adds	r3, #1
 80018b8:	b2da      	uxtb	r2, r3
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	701a      	strb	r2, [r3, #0]
	} else {
		ptr[0] = 0;
	}
}
 80018be:	e002      	b.n	80018c6 <inc_res+0x26>
		ptr[0] = 0;
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	2200      	movs	r2, #0
 80018c4:	701a      	strb	r2, [r3, #0]
}
 80018c6:	bf00      	nop
 80018c8:	370c      	adds	r7, #12
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
	...

080018d4 <COM_voltages_ok_d>:
 * @Param	A flag which says whether the values are valid or not (due to corruption, etc.)
 * @Param	The sample constraint. How many consecutive samples may be wrong before an error is triggered
 * @retval	1 if there is no error
 */
uint8_t COM_voltages_ok_d(double *voltages, uint8_t valid,
		uint16_t sample_constraint) {
 80018d4:	b5b0      	push	{r4, r5, r7, lr}
 80018d6:	b086      	sub	sp, #24
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	460b      	mov	r3, r1
 80018de:	70fb      	strb	r3, [r7, #3]
 80018e0:	4613      	mov	r3, r2
 80018e2:	803b      	strh	r3, [r7, #0]
	const float upper_boundary = 4.19;
 80018e4:	4b30      	ldr	r3, [pc, #192]	; (80019a8 <COM_voltages_ok_d+0xd4>)
 80018e6:	613b      	str	r3, [r7, #16]
	const float lower_boundary = 2.81;
 80018e8:	4b30      	ldr	r3, [pc, #192]	; (80019ac <COM_voltages_ok_d+0xd8>)
 80018ea:	60fb      	str	r3, [r7, #12]

	for (int p = 0; p < 126; p++) {
 80018ec:	2300      	movs	r3, #0
 80018ee:	617b      	str	r3, [r7, #20]
 80018f0:	e052      	b.n	8001998 <COM_voltages_ok_d+0xc4>
		inc_res(valid && (voltages[p] > upper_boundary), &over_voltages[p]);
 80018f2:	78fb      	ldrb	r3, [r7, #3]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d013      	beq.n	8001920 <COM_voltages_ok_d+0x4c>
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	00db      	lsls	r3, r3, #3
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	4413      	add	r3, r2
 8001900:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001904:	6938      	ldr	r0, [r7, #16]
 8001906:	f7fe fe11 	bl	800052c <__aeabi_f2d>
 800190a:	4602      	mov	r2, r0
 800190c:	460b      	mov	r3, r1
 800190e:	4620      	mov	r0, r4
 8001910:	4629      	mov	r1, r5
 8001912:	f7ff f8f3 	bl	8000afc <__aeabi_dcmpgt>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <COM_voltages_ok_d+0x4c>
 800191c:	2301      	movs	r3, #1
 800191e:	e000      	b.n	8001922 <COM_voltages_ok_d+0x4e>
 8001920:	2300      	movs	r3, #0
 8001922:	b2da      	uxtb	r2, r3
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	4922      	ldr	r1, [pc, #136]	; (80019b0 <COM_voltages_ok_d+0xdc>)
 8001928:	440b      	add	r3, r1
 800192a:	4619      	mov	r1, r3
 800192c:	4610      	mov	r0, r2
 800192e:	f7ff ffb7 	bl	80018a0 <inc_res>
		inc_res(valid && (lower_boundary > voltages[p]), &under_voltages[p]);
 8001932:	78fb      	ldrb	r3, [r7, #3]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d00f      	beq.n	8001958 <COM_voltages_ok_d+0x84>
 8001938:	68f8      	ldr	r0, [r7, #12]
 800193a:	f7fe fdf7 	bl	800052c <__aeabi_f2d>
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	00db      	lsls	r3, r3, #3
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	4413      	add	r3, r2
 8001946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800194a:	f7ff f8d7 	bl	8000afc <__aeabi_dcmpgt>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <COM_voltages_ok_d+0x84>
 8001954:	2301      	movs	r3, #1
 8001956:	e000      	b.n	800195a <COM_voltages_ok_d+0x86>
 8001958:	2300      	movs	r3, #0
 800195a:	b2da      	uxtb	r2, r3
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	4915      	ldr	r1, [pc, #84]	; (80019b4 <COM_voltages_ok_d+0xe0>)
 8001960:	440b      	add	r3, r1
 8001962:	4619      	mov	r1, r3
 8001964:	4610      	mov	r0, r2
 8001966:	f7ff ff9b 	bl	80018a0 <inc_res>

		if (over_voltages[p] > sample_constraint) {
 800196a:	4a11      	ldr	r2, [pc, #68]	; (80019b0 <COM_voltages_ok_d+0xdc>)
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	4413      	add	r3, r2
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	b29b      	uxth	r3, r3
 8001974:	883a      	ldrh	r2, [r7, #0]
 8001976:	429a      	cmp	r2, r3
 8001978:	d201      	bcs.n	800197e <COM_voltages_ok_d+0xaa>
			return 0;
 800197a:	2300      	movs	r3, #0
 800197c:	e010      	b.n	80019a0 <COM_voltages_ok_d+0xcc>
		}
		if (under_voltages[p] > sample_constraint) {
 800197e:	4a0d      	ldr	r2, [pc, #52]	; (80019b4 <COM_voltages_ok_d+0xe0>)
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	4413      	add	r3, r2
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	b29b      	uxth	r3, r3
 8001988:	883a      	ldrh	r2, [r7, #0]
 800198a:	429a      	cmp	r2, r3
 800198c:	d201      	bcs.n	8001992 <COM_voltages_ok_d+0xbe>
			return 0;
 800198e:	2300      	movs	r3, #0
 8001990:	e006      	b.n	80019a0 <COM_voltages_ok_d+0xcc>
	for (int p = 0; p < 126; p++) {
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	3301      	adds	r3, #1
 8001996:	617b      	str	r3, [r7, #20]
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	2b7d      	cmp	r3, #125	; 0x7d
 800199c:	dda9      	ble.n	80018f2 <COM_voltages_ok_d+0x1e>
		}
	}

	return 1;
 800199e:	2301      	movs	r3, #1

}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3718      	adds	r7, #24
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bdb0      	pop	{r4, r5, r7, pc}
 80019a8:	4086147b 	.word	0x4086147b
 80019ac:	4033d70a 	.word	0x4033d70a
 80019b0:	20001498 	.word	0x20001498
 80019b4:	20001518 	.word	0x20001518

080019b8 <COM_temperatures_ok_d>:
 * @Param	A flag which says whether the values are valid or not (due to corruption, etc.)
 * @Param	The sample constraint. How many consecutive samples may be wrong before an error is triggered
 * @retval	1 if there is no error
 */
uint8_t COM_temperatures_ok_d(double *temperatures, uint8_t valid,
		uint16_t sample_constraint) {
 80019b8:	b5b0      	push	{r4, r5, r7, lr}
 80019ba:	b086      	sub	sp, #24
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	460b      	mov	r3, r1
 80019c2:	70fb      	strb	r3, [r7, #3]
 80019c4:	4613      	mov	r3, r2
 80019c6:	803b      	strh	r3, [r7, #0]
	const float upper_boundary = 60;
 80019c8:	4b30      	ldr	r3, [pc, #192]	; (8001a8c <COM_temperatures_ok_d+0xd4>)
 80019ca:	613b      	str	r3, [r7, #16]
	const float lower_boundary = -20;
 80019cc:	4b30      	ldr	r3, [pc, #192]	; (8001a90 <COM_temperatures_ok_d+0xd8>)
 80019ce:	60fb      	str	r3, [r7, #12]

	for (int p = 0; p < 60; p++) {
 80019d0:	2300      	movs	r3, #0
 80019d2:	617b      	str	r3, [r7, #20]
 80019d4:	e052      	b.n	8001a7c <COM_temperatures_ok_d+0xc4>
		inc_res(valid && (temperatures[p] > upper_boundary),
 80019d6:	78fb      	ldrb	r3, [r7, #3]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d013      	beq.n	8001a04 <COM_temperatures_ok_d+0x4c>
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	00db      	lsls	r3, r3, #3
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	4413      	add	r3, r2
 80019e4:	e9d3 4500 	ldrd	r4, r5, [r3]
 80019e8:	6938      	ldr	r0, [r7, #16]
 80019ea:	f7fe fd9f 	bl	800052c <__aeabi_f2d>
 80019ee:	4602      	mov	r2, r0
 80019f0:	460b      	mov	r3, r1
 80019f2:	4620      	mov	r0, r4
 80019f4:	4629      	mov	r1, r5
 80019f6:	f7ff f881 	bl	8000afc <__aeabi_dcmpgt>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <COM_temperatures_ok_d+0x4c>
 8001a00:	2301      	movs	r3, #1
 8001a02:	e000      	b.n	8001a06 <COM_temperatures_ok_d+0x4e>
 8001a04:	2300      	movs	r3, #0
 8001a06:	b2da      	uxtb	r2, r3
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	4922      	ldr	r1, [pc, #136]	; (8001a94 <COM_temperatures_ok_d+0xdc>)
 8001a0c:	440b      	add	r3, r1
 8001a0e:	4619      	mov	r1, r3
 8001a10:	4610      	mov	r0, r2
 8001a12:	f7ff ff45 	bl	80018a0 <inc_res>
				&over_temperatures[p]);
		inc_res(valid && (lower_boundary > temperatures[p]),
 8001a16:	78fb      	ldrb	r3, [r7, #3]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d00f      	beq.n	8001a3c <COM_temperatures_ok_d+0x84>
 8001a1c:	68f8      	ldr	r0, [r7, #12]
 8001a1e:	f7fe fd85 	bl	800052c <__aeabi_f2d>
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	00db      	lsls	r3, r3, #3
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	4413      	add	r3, r2
 8001a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a2e:	f7ff f865 	bl	8000afc <__aeabi_dcmpgt>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <COM_temperatures_ok_d+0x84>
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e000      	b.n	8001a3e <COM_temperatures_ok_d+0x86>
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	b2da      	uxtb	r2, r3
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	4915      	ldr	r1, [pc, #84]	; (8001a98 <COM_temperatures_ok_d+0xe0>)
 8001a44:	440b      	add	r3, r1
 8001a46:	4619      	mov	r1, r3
 8001a48:	4610      	mov	r0, r2
 8001a4a:	f7ff ff29 	bl	80018a0 <inc_res>
				&under_temperatures[p]);

		if (over_temperatures[p] > sample_constraint) {
 8001a4e:	4a11      	ldr	r2, [pc, #68]	; (8001a94 <COM_temperatures_ok_d+0xdc>)
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	4413      	add	r3, r2
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	b29b      	uxth	r3, r3
 8001a58:	883a      	ldrh	r2, [r7, #0]
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	d201      	bcs.n	8001a62 <COM_temperatures_ok_d+0xaa>
			return 0;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	e010      	b.n	8001a84 <COM_temperatures_ok_d+0xcc>
		}
		if (under_temperatures[p] > sample_constraint) {
 8001a62:	4a0d      	ldr	r2, [pc, #52]	; (8001a98 <COM_temperatures_ok_d+0xe0>)
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	4413      	add	r3, r2
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	b29b      	uxth	r3, r3
 8001a6c:	883a      	ldrh	r2, [r7, #0]
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d201      	bcs.n	8001a76 <COM_temperatures_ok_d+0xbe>
			return 0;
 8001a72:	2300      	movs	r3, #0
 8001a74:	e006      	b.n	8001a84 <COM_temperatures_ok_d+0xcc>
	for (int p = 0; p < 60; p++) {
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	3301      	adds	r3, #1
 8001a7a:	617b      	str	r3, [r7, #20]
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	2b3b      	cmp	r3, #59	; 0x3b
 8001a80:	dda9      	ble.n	80019d6 <COM_temperatures_ok_d+0x1e>
		}
	}

	return 1;
 8001a82:	2301      	movs	r3, #1

}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3718      	adds	r7, #24
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bdb0      	pop	{r4, r5, r7, pc}
 8001a8c:	42700000 	.word	0x42700000
 8001a90:	c1a00000 	.word	0xc1a00000
 8001a94:	20001598 	.word	0x20001598
 8001a98:	200015d4 	.word	0x200015d4

08001a9c <COM_current_ok_d>:
 * @Param	A flag which says whether the value is valid or not (due to corruption, etc.)
 * @Param	The sample constraint. How many consecutive samples may be wrong before an error is triggered
 * @retval	1 if there is no error
 */
uint8_t COM_current_ok_d(double *current, uint8_t valid,
		uint16_t sample_constraint) {
 8001a9c:	b5b0      	push	{r4, r5, r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	70fb      	strb	r3, [r7, #3]
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	803b      	strh	r3, [r7, #0]
	const float upper_boundary = 40;
 8001aac:	4b24      	ldr	r3, [pc, #144]	; (8001b40 <COM_current_ok_d+0xa4>)
 8001aae:	60fb      	str	r3, [r7, #12]
	const float lower_boundary = -100;
 8001ab0:	4b24      	ldr	r3, [pc, #144]	; (8001b44 <COM_current_ok_d+0xa8>)
 8001ab2:	60bb      	str	r3, [r7, #8]

	inc_res(valid && (current[0] > upper_boundary), &over_current);
 8001ab4:	78fb      	ldrb	r3, [r7, #3]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d010      	beq.n	8001adc <COM_current_ok_d+0x40>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001ac0:	68f8      	ldr	r0, [r7, #12]
 8001ac2:	f7fe fd33 	bl	800052c <__aeabi_f2d>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	460b      	mov	r3, r1
 8001aca:	4620      	mov	r0, r4
 8001acc:	4629      	mov	r1, r5
 8001ace:	f7ff f815 	bl	8000afc <__aeabi_dcmpgt>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <COM_current_ok_d+0x40>
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e000      	b.n	8001ade <COM_current_ok_d+0x42>
 8001adc:	2300      	movs	r3, #0
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	4919      	ldr	r1, [pc, #100]	; (8001b48 <COM_current_ok_d+0xac>)
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7ff fedc 	bl	80018a0 <inc_res>
	inc_res(valid && (lower_boundary > current[0]), &under_current);
 8001ae8:	78fb      	ldrb	r3, [r7, #3]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d00c      	beq.n	8001b08 <COM_current_ok_d+0x6c>
 8001aee:	68b8      	ldr	r0, [r7, #8]
 8001af0:	f7fe fd1c 	bl	800052c <__aeabi_f2d>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001afa:	f7fe ffff 	bl	8000afc <__aeabi_dcmpgt>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <COM_current_ok_d+0x6c>
 8001b04:	2301      	movs	r3, #1
 8001b06:	e000      	b.n	8001b0a <COM_current_ok_d+0x6e>
 8001b08:	2300      	movs	r3, #0
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	490f      	ldr	r1, [pc, #60]	; (8001b4c <COM_current_ok_d+0xb0>)
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7ff fec6 	bl	80018a0 <inc_res>

	if (over_current > sample_constraint) {
 8001b14:	4b0c      	ldr	r3, [pc, #48]	; (8001b48 <COM_current_ok_d+0xac>)
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	b29b      	uxth	r3, r3
 8001b1a:	883a      	ldrh	r2, [r7, #0]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d201      	bcs.n	8001b24 <COM_current_ok_d+0x88>
		return 0;
 8001b20:	2300      	movs	r3, #0
 8001b22:	e008      	b.n	8001b36 <COM_current_ok_d+0x9a>
	}
	if (under_current > sample_constraint) {
 8001b24:	4b09      	ldr	r3, [pc, #36]	; (8001b4c <COM_current_ok_d+0xb0>)
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	883a      	ldrh	r2, [r7, #0]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d201      	bcs.n	8001b34 <COM_current_ok_d+0x98>
		return 0;
 8001b30:	2300      	movs	r3, #0
 8001b32:	e000      	b.n	8001b36 <COM_current_ok_d+0x9a>
	}

	return 1;
 8001b34:	2301      	movs	r3, #1

}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3710      	adds	r7, #16
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bdb0      	pop	{r4, r5, r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	42200000 	.word	0x42200000
 8001b44:	c2c80000 	.word	0xc2c80000
 8001b48:	20001610 	.word	0x20001610
 8001b4c:	20001611 	.word	0x20001611

08001b50 <COM_data_valid_ok>:
 * @Param	A single current to check
 * @Param	The sample constraint. How many consecutive samples may be wrong before an error is triggered
 * @retval	1 if there is no error
 */
uint8_t COM_data_valid_ok(uint8_t valid,
		uint16_t sample_constraint) {
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	4603      	mov	r3, r0
 8001b58:	460a      	mov	r2, r1
 8001b5a:	71fb      	strb	r3, [r7, #7]
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	80bb      	strh	r3, [r7, #4]
	inc_res(valid, &invalid);
 8001b60:	79fb      	ldrb	r3, [r7, #7]
 8001b62:	4908      	ldr	r1, [pc, #32]	; (8001b84 <COM_data_valid_ok+0x34>)
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7ff fe9b 	bl	80018a0 <inc_res>

	if (invalid > sample_constraint) {
 8001b6a:	4b06      	ldr	r3, [pc, #24]	; (8001b84 <COM_data_valid_ok+0x34>)
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	88ba      	ldrh	r2, [r7, #4]
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d201      	bcs.n	8001b7a <COM_data_valid_ok+0x2a>
		return 0;
 8001b76:	2300      	movs	r3, #0
 8001b78:	e000      	b.n	8001b7c <COM_data_valid_ok+0x2c>
	}

	return 1;
 8001b7a:	2301      	movs	r3, #1
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3708      	adds	r7, #8
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	20001612 	.word	0x20001612

08001b88 <FAN_initialize>:
#include "main.h"
#include "programme_data.h"

#include "FAN.h"

void FAN_initialize(TIM_HandleTypeDef *htim) {
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
	const float frequency = 1000;
 8001b90:	4b10      	ldr	r3, [pc, #64]	; (8001bd4 <FAN_initialize+0x4c>)
 8001b92:	60fb      	str	r3, [r7, #12]

	htim->Instance->ARR = 65535 / frequency;
 8001b94:	eddf 6a10 	vldr	s13, [pc, #64]	; 8001bd8 <FAN_initialize+0x50>
 8001b98:	ed97 7a03 	vldr	s14, [r7, #12]
 8001b9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ba8:	ee17 2a90 	vmov	r2, s15
 8001bac:	62da      	str	r2, [r3, #44]	; 0x2c
	htim->Instance->CCR3 = htim->Instance->ARR / 2;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	0852      	lsrs	r2, r2, #1
 8001bba:	63da      	str	r2, [r3, #60]	; 0x3c
	htim->Instance->CNT = 0;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_PWM_Start(htim, TIM_CHANNEL_3);
 8001bc4:	2108      	movs	r1, #8
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f012 f882 	bl	8013cd0 <HAL_TIM_PWM_Start>

}
 8001bcc:	bf00      	nop
 8001bce:	3710      	adds	r7, #16
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	447a0000 	.word	0x447a0000
 8001bd8:	477fff00 	.word	0x477fff00

08001bdc <FAN_duty_cycle>:

void FAN_duty_cycle(TIM_HandleTypeDef *htim, float duty_cycle) {
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	ed87 0a00 	vstr	s0, [r7]
	if (duty_cycle < 0) {
 8001be8:	edd7 7a00 	vldr	s15, [r7]
 8001bec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001bf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bf4:	d502      	bpl.n	8001bfc <FAN_duty_cycle+0x20>
		duty_cycle = 0;
 8001bf6:	f04f 0300 	mov.w	r3, #0
 8001bfa:	603b      	str	r3, [r7, #0]
	}
	if (100 < duty_cycle) {
 8001bfc:	edd7 7a00 	vldr	s15, [r7]
 8001c00:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001c54 <FAN_duty_cycle+0x78>
 8001c04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c0c:	dd01      	ble.n	8001c12 <FAN_duty_cycle+0x36>
		duty_cycle = 100;
 8001c0e:	4b12      	ldr	r3, [pc, #72]	; (8001c58 <FAN_duty_cycle+0x7c>)
 8001c10:	603b      	str	r3, [r7, #0]
	}

	htim->Instance->CCR3 = (duty_cycle / 100) * htim->Instance->ARR;
 8001c12:	edd7 7a00 	vldr	s15, [r7]
 8001c16:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8001c54 <FAN_duty_cycle+0x78>
 8001c1a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c24:	ee07 3a90 	vmov	s15, r3
 8001c28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c38:	ee17 2a90 	vmov	r2, s15
 8001c3c:	63da      	str	r2, [r3, #60]	; 0x3c
	htim->Instance->CNT = 0;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	2200      	movs	r2, #0
 8001c44:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001c46:	bf00      	nop
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	42c80000 	.word	0x42c80000
 8001c58:	42c80000 	.word	0x42c80000

08001c5c <HAL_TIM_IC_CaptureCallback>:
#include "programme_data.h"
#include "programme_queues.h"

static IMD_t IMD;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b086      	sub	sp, #24
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
	float ante = 0;
 8001c64:	f04f 0300 	mov.w	r3, #0
 8001c68:	617b      	str	r3, [r7, #20]
	float conq = 0;
 8001c6a:	f04f 0300 	mov.w	r3, #0
 8001c6e:	613b      	str	r3, [r7, #16]

	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001c70:	2300      	movs	r3, #0
 8001c72:	60fb      	str	r3, [r7, #12]

	if (htim->Instance == TIM2) {
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c7c:	d13c      	bne.n	8001cf8 <HAL_TIM_IC_CaptureCallback+0x9c>
		ante = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8001c7e:	2104      	movs	r1, #4
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f012 febb 	bl	80149fc <HAL_TIM_ReadCapturedValue>
 8001c86:	ee07 0a90 	vmov	s15, r0
 8001c8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c8e:	edc7 7a05 	vstr	s15, [r7, #20]
		conq = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001c92:	2100      	movs	r1, #0
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f012 feb1 	bl	80149fc <HAL_TIM_ReadCapturedValue>
 8001c9a:	ee07 0a90 	vmov	s15, r0
 8001c9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ca2:	edc7 7a04 	vstr	s15, [r7, #16]

		IMD.duty_cycle = ante / conq;
 8001ca6:	edd7 6a05 	vldr	s13, [r7, #20]
 8001caa:	ed97 7a04 	vldr	s14, [r7, #16]
 8001cae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cb2:	4b13      	ldr	r3, [pc, #76]	; (8001d00 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8001cb4:	edc3 7a00 	vstr	s15, [r3]
		IMD.frequency = 100000000 / (conq + 1);
 8001cb8:	edd7 7a04 	vldr	s15, [r7, #16]
 8001cbc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001cc0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001cc4:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8001d04 <HAL_TIM_IC_CaptureCallback+0xa8>
 8001cc8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ccc:	4b0c      	ldr	r3, [pc, #48]	; (8001d00 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8001cce:	edc3 7a01 	vstr	s15, [r3, #4]

		xQueueOverwriteFromISR(IMD_queue, &IMD, &xHigherPriorityTaskWoken);
 8001cd2:	4b0d      	ldr	r3, [pc, #52]	; (8001d08 <HAL_TIM_IC_CaptureCallback+0xac>)
 8001cd4:	6818      	ldr	r0, [r3, #0]
 8001cd6:	f107 020c 	add.w	r2, r7, #12
 8001cda:	2302      	movs	r3, #2
 8001cdc:	4908      	ldr	r1, [pc, #32]	; (8001d00 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8001cde:	f014 f951 	bl	8015f84 <xQueueGenericSendFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d007      	beq.n	8001cf8 <HAL_TIM_IC_CaptureCallback+0x9c>
 8001ce8:	4b08      	ldr	r3, [pc, #32]	; (8001d0c <HAL_TIM_IC_CaptureCallback+0xb0>)
 8001cea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001cee:	601a      	str	r2, [r3, #0]
 8001cf0:	f3bf 8f4f 	dsb	sy
 8001cf4:	f3bf 8f6f 	isb	sy
	}
}
 8001cf8:	bf00      	nop
 8001cfa:	3718      	adds	r7, #24
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	20001614 	.word	0x20001614
 8001d04:	4cbebc20 	.word	0x4cbebc20
 8001d08:	2001b57c 	.word	0x2001b57c
 8001d0c:	e000ed04 	.word	0xe000ed04

08001d10 <initialize_IMD>:

void initialize_IMD(TIM_HandleTypeDef *htim) {
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
	htim->Instance->ARR = 42000000;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a0b      	ldr	r2, [pc, #44]	; (8001d4c <initialize_IMD+0x3c>)
 8001d1e:	62da      	str	r2, [r3, #44]	; 0x2c

	if (HAL_TIM_IC_Start_IT(htim, TIM_CHANNEL_1) != HAL_OK) {
 8001d20:	2100      	movs	r1, #0
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f012 f9d2 	bl	80140cc <HAL_TIM_IC_Start_IT>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <initialize_IMD+0x22>
		Error_Handler();
 8001d2e:	f001 fddf 	bl	80038f0 <Error_Handler>
	}

	if (HAL_TIM_IC_Start(htim, TIM_CHANNEL_2) != HAL_OK) {
 8001d32:	2104      	movs	r1, #4
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f012 f8ed 	bl	8013f14 <HAL_TIM_IC_Start>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d001      	beq.n	8001d44 <initialize_IMD+0x34>
		Error_Handler();
 8001d40:	f001 fdd6 	bl	80038f0 <Error_Handler>
	}
}
 8001d44:	bf00      	nop
 8001d46:	3708      	adds	r7, #8
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	0280de80 	.word	0x0280de80

08001d50 <PID_progress>:
/*
 * @brief	Progress the PID
 * @param	Input at current timestep
 * @retval	1 if it went through, 0 else
 */
uint8_t PID_progress(PID_t *ctrl, float input) {
 8001d50:	b480      	push	{r7}
 8001d52:	b087      	sub	sp, #28
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	ed87 0a00 	vstr	s0, [r7]
	ctrl->input = input;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	683a      	ldr	r2, [r7, #0]
 8001d60:	605a      	str	r2, [r3, #4]
	ctrl->error = ctrl->input - ctrl->reference;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	ed93 7a01 	vldr	s14, [r3, #4]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	edd3 7a03 	vldr	s15, [r3, #12]
 8001d6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	edc3 7a00 	vstr	s15, [r3]

	ctrl->output = arm_pid_f32(&(ctrl->controller), ctrl->error);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	f103 0218 	add.w	r2, r3, #24
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	617a      	str	r2, [r7, #20]
 8001d84:	613b      	str	r3, [r7, #16]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	ed93 7a00 	vldr	s14, [r3]
 8001d8c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d90:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	edd3 6a01 	vldr	s13, [r3, #4]
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001da0:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8001da4:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	edd3 6a02 	vldr	s13, [r3, #8]
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	edd3 7a04 	vldr	s15, [r3, #16]
 8001db4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001db8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8001dc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dc6:	edc7 7a03 	vstr	s15, [r7, #12]

    /* Update state */
    S->state[1] = S->state[0];
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	68da      	ldr	r2, [r3, #12]
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	693a      	ldr	r2, [r7, #16]
 8001dd6:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	68fa      	ldr	r2, [r7, #12]
 8001ddc:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8001dde:	68fa      	ldr	r2, [r7, #12]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	609a      	str	r2, [r3, #8]

	if (ctrl->output < ctrl->output_lower_bound) {
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	ed93 7a02 	vldr	s14, [r3, #8]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	edd3 7a05 	vldr	s15, [r3, #20]
 8001df0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001df4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001df8:	d503      	bpl.n	8001e02 <PID_progress+0xb2>
		ctrl->output = ctrl->output_lower_bound;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	695a      	ldr	r2, [r3, #20]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	609a      	str	r2, [r3, #8]
	}

	if (ctrl->output_upper_bound < ctrl->output) {
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	ed93 7a04 	vldr	s14, [r3, #16]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	edd3 7a02 	vldr	s15, [r3, #8]
 8001e0e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e16:	d503      	bpl.n	8001e20 <PID_progress+0xd0>
		ctrl->output = ctrl->output_upper_bound;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	691a      	ldr	r2, [r3, #16]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	609a      	str	r2, [r3, #8]
	}

	return 1;
 8001e20:	2301      	movs	r3, #1
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	371c      	adds	r7, #28
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr

08001e2e <PID_initialize>:
 * @param	output upper bound, ex 100 for PWM
 * @retval	1 if it went through, 0 else
 */
uint8_t PID_initialize(PID_t *ctrl, float reference,
		float proportional, float integral, float derivative,
		float output_lower_bound, float output_upper_bound) {
 8001e2e:	b580      	push	{r7, lr}
 8001e30:	b088      	sub	sp, #32
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	61f8      	str	r0, [r7, #28]
 8001e36:	ed87 0a06 	vstr	s0, [r7, #24]
 8001e3a:	edc7 0a05 	vstr	s1, [r7, #20]
 8001e3e:	ed87 1a04 	vstr	s2, [r7, #16]
 8001e42:	edc7 1a03 	vstr	s3, [r7, #12]
 8001e46:	ed87 2a02 	vstr	s4, [r7, #8]
 8001e4a:	edc7 2a01 	vstr	s5, [r7, #4]
	if (output_upper_bound < output_lower_bound) {
 8001e4e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001e52:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e56:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e5e:	d501      	bpl.n	8001e64 <PID_initialize+0x36>
		return 0;
 8001e60:	2300      	movs	r3, #0
 8001e62:	e024      	b.n	8001eae <PID_initialize+0x80>
	}

	ctrl->error = 0.;
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	f04f 0200 	mov.w	r2, #0
 8001e6a:	601a      	str	r2, [r3, #0]
	ctrl->input = 0.;
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	f04f 0200 	mov.w	r2, #0
 8001e72:	605a      	str	r2, [r3, #4]
	ctrl->output = 0.;
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	f04f 0200 	mov.w	r2, #0
 8001e7a:	609a      	str	r2, [r3, #8]
	ctrl->reference = reference;
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	69ba      	ldr	r2, [r7, #24]
 8001e80:	60da      	str	r2, [r3, #12]

	ctrl->output_upper_bound = output_upper_bound;
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	611a      	str	r2, [r3, #16]
	ctrl->output_lower_bound = output_lower_bound;
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	68ba      	ldr	r2, [r7, #8]
 8001e8c:	615a      	str	r2, [r3, #20]

	ctrl->controller.Kp = proportional;
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	697a      	ldr	r2, [r7, #20]
 8001e92:	631a      	str	r2, [r3, #48]	; 0x30
	ctrl->controller.Ki = integral;
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	693a      	ldr	r2, [r7, #16]
 8001e98:	635a      	str	r2, [r3, #52]	; 0x34
	ctrl->controller.Kd = derivative;
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	68fa      	ldr	r2, [r7, #12]
 8001e9e:	639a      	str	r2, [r3, #56]	; 0x38

	arm_pid_init_f32(&(ctrl->controller), 1);
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	3318      	adds	r3, #24
 8001ea4:	2101      	movs	r1, #1
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f017 ff10 	bl	8019ccc <arm_pid_init_f32>

	return 1;
 8001eac:	2301      	movs	r3, #1
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3720      	adds	r7, #32
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
	...

08001eb8 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8001ebc:	4803      	ldr	r0, [pc, #12]	; (8001ecc <_cbSendSystemDesc+0x14>)
 8001ebe:	f017 fc85 	bl	80197cc <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8001ec2:	4803      	ldr	r0, [pc, #12]	; (8001ed0 <_cbSendSystemDesc+0x18>)
 8001ec4:	f017 fc82 	bl	80197cc <SEGGER_SYSVIEW_SendSysDesc>
}
 8001ec8:	bf00      	nop
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	0801a988 	.word	0x0801a988
 8001ed0:	0801a9b4 	.word	0x0801a9b4

08001ed4 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8001ed8:	4b06      	ldr	r3, [pc, #24]	; (8001ef4 <SEGGER_SYSVIEW_Conf+0x20>)
 8001eda:	6818      	ldr	r0, [r3, #0]
 8001edc:	4b05      	ldr	r3, [pc, #20]	; (8001ef4 <SEGGER_SYSVIEW_Conf+0x20>)
 8001ede:	6819      	ldr	r1, [r3, #0]
 8001ee0:	4b05      	ldr	r3, [pc, #20]	; (8001ef8 <SEGGER_SYSVIEW_Conf+0x24>)
 8001ee2:	4a06      	ldr	r2, [pc, #24]	; (8001efc <SEGGER_SYSVIEW_Conf+0x28>)
 8001ee4:	f016 fff0 	bl	8018ec8 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8001ee8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001eec:	f017 f830 	bl	8018f50 <SEGGER_SYSVIEW_SetRAMBase>
}
 8001ef0:	bf00      	nop
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	20000004 	.word	0x20000004
 8001ef8:	08001eb9 	.word	0x08001eb9
 8001efc:	0801aadc 	.word	0x0801aadc

08001f00 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8001f00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f02:	b085      	sub	sp, #20
 8001f04:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8001f06:	2300      	movs	r3, #0
 8001f08:	607b      	str	r3, [r7, #4]
 8001f0a:	e048      	b.n	8001f9e <_cbSendTaskList+0x9e>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
 8001f0c:	4929      	ldr	r1, [pc, #164]	; (8001fb4 <_cbSendTaskList+0xb4>)
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	4613      	mov	r3, r2
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	4413      	add	r3, r2
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	440b      	add	r3, r1
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f015 fb1b 	bl	8017558 <uxTaskGetStackHighWaterMark>
 8001f22:	4601      	mov	r1, r0
 8001f24:	4823      	ldr	r0, [pc, #140]	; (8001fb4 <_cbSendTaskList+0xb4>)
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	4613      	mov	r3, r2
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	4413      	add	r3, r2
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	4403      	add	r3, r0
 8001f32:	3310      	adds	r3, #16
 8001f34:	6019      	str	r1, [r3, #0]
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8001f36:	491f      	ldr	r1, [pc, #124]	; (8001fb4 <_cbSendTaskList+0xb4>)
 8001f38:	687a      	ldr	r2, [r7, #4]
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	4413      	add	r3, r2
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	440b      	add	r3, r1
 8001f44:	6818      	ldr	r0, [r3, #0]
 8001f46:	491b      	ldr	r1, [pc, #108]	; (8001fb4 <_cbSendTaskList+0xb4>)
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	4413      	add	r3, r2
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	440b      	add	r3, r1
 8001f54:	3304      	adds	r3, #4
 8001f56:	6819      	ldr	r1, [r3, #0]
 8001f58:	4c16      	ldr	r4, [pc, #88]	; (8001fb4 <_cbSendTaskList+0xb4>)
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	4413      	add	r3, r2
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	4423      	add	r3, r4
 8001f66:	3308      	adds	r3, #8
 8001f68:	681c      	ldr	r4, [r3, #0]
 8001f6a:	4d12      	ldr	r5, [pc, #72]	; (8001fb4 <_cbSendTaskList+0xb4>)
 8001f6c:	687a      	ldr	r2, [r7, #4]
 8001f6e:	4613      	mov	r3, r2
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	4413      	add	r3, r2
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	442b      	add	r3, r5
 8001f78:	330c      	adds	r3, #12
 8001f7a:	681d      	ldr	r5, [r3, #0]
 8001f7c:	4e0d      	ldr	r6, [pc, #52]	; (8001fb4 <_cbSendTaskList+0xb4>)
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	4613      	mov	r3, r2
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	4413      	add	r3, r2
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	4433      	add	r3, r6
 8001f8a:	3310      	adds	r3, #16
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	9300      	str	r3, [sp, #0]
 8001f90:	462b      	mov	r3, r5
 8001f92:	4622      	mov	r2, r4
 8001f94:	f000 f8b6 	bl	8002104 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	607b      	str	r3, [r7, #4]
 8001f9e:	4b06      	ldr	r3, [pc, #24]	; (8001fb8 <_cbSendTaskList+0xb8>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d3b1      	bcc.n	8001f0c <_cbSendTaskList+0xc>
  }
}
 8001fa8:	bf00      	nop
 8001faa:	bf00      	nop
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	2000161c 	.word	0x2000161c
 8001fb8:	2000175c 	.word	0x2000175c

08001fbc <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8001fbc:	b5b0      	push	{r4, r5, r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8001fc2:	f014 ffa1 	bl	8016f08 <xTaskGetTickCountFromISR>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	461a      	mov	r2, r3
 8001fca:	f04f 0300 	mov.w	r3, #0
 8001fce:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8001fd2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	460b      	mov	r3, r1
 8001fda:	f04f 0400 	mov.w	r4, #0
 8001fde:	f04f 0500 	mov.w	r5, #0
 8001fe2:	015d      	lsls	r5, r3, #5
 8001fe4:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8001fe8:	0154      	lsls	r4, r2, #5
 8001fea:	4622      	mov	r2, r4
 8001fec:	462b      	mov	r3, r5
 8001fee:	1a12      	subs	r2, r2, r0
 8001ff0:	eb63 0301 	sbc.w	r3, r3, r1
 8001ff4:	f04f 0400 	mov.w	r4, #0
 8001ff8:	f04f 0500 	mov.w	r5, #0
 8001ffc:	009d      	lsls	r5, r3, #2
 8001ffe:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 8002002:	0094      	lsls	r4, r2, #2
 8002004:	4622      	mov	r2, r4
 8002006:	462b      	mov	r3, r5
 8002008:	1812      	adds	r2, r2, r0
 800200a:	eb41 0303 	adc.w	r3, r1, r3
 800200e:	f04f 0000 	mov.w	r0, #0
 8002012:	f04f 0100 	mov.w	r1, #0
 8002016:	00d9      	lsls	r1, r3, #3
 8002018:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800201c:	00d0      	lsls	r0, r2, #3
 800201e:	4602      	mov	r2, r0
 8002020:	460b      	mov	r3, r1
 8002022:	e9c7 2300 	strd	r2, r3, [r7]
  return Time;
 8002026:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800202a:	4610      	mov	r0, r2
 800202c:	4619      	mov	r1, r3
 800202e:	3708      	adds	r7, #8
 8002030:	46bd      	mov	sp, r7
 8002032:	bdb0      	pop	{r4, r5, r7, pc}

08002034 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8002034:	b580      	push	{r7, lr}
 8002036:	b086      	sub	sp, #24
 8002038:	af02      	add	r7, sp, #8
 800203a:	60f8      	str	r0, [r7, #12]
 800203c:	60b9      	str	r1, [r7, #8]
 800203e:	607a      	str	r2, [r7, #4]
 8002040:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8002042:	2205      	movs	r2, #5
 8002044:	492b      	ldr	r1, [pc, #172]	; (80020f4 <SYSVIEW_AddTask+0xc0>)
 8002046:	68b8      	ldr	r0, [r7, #8]
 8002048:	f017 fe8a 	bl	8019d60 <memcmp>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d04b      	beq.n	80020ea <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8002052:	4b29      	ldr	r3, [pc, #164]	; (80020f8 <SYSVIEW_AddTask+0xc4>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	2b0f      	cmp	r3, #15
 8002058:	d903      	bls.n	8002062 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800205a:	4828      	ldr	r0, [pc, #160]	; (80020fc <SYSVIEW_AddTask+0xc8>)
 800205c:	f017 fdda 	bl	8019c14 <SEGGER_SYSVIEW_Warn>
    return;
 8002060:	e044      	b.n	80020ec <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8002062:	4b25      	ldr	r3, [pc, #148]	; (80020f8 <SYSVIEW_AddTask+0xc4>)
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	4926      	ldr	r1, [pc, #152]	; (8002100 <SYSVIEW_AddTask+0xcc>)
 8002068:	4613      	mov	r3, r2
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	4413      	add	r3, r2
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	440b      	add	r3, r1
 8002072:	68fa      	ldr	r2, [r7, #12]
 8002074:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8002076:	4b20      	ldr	r3, [pc, #128]	; (80020f8 <SYSVIEW_AddTask+0xc4>)
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	4921      	ldr	r1, [pc, #132]	; (8002100 <SYSVIEW_AddTask+0xcc>)
 800207c:	4613      	mov	r3, r2
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	4413      	add	r3, r2
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	440b      	add	r3, r1
 8002086:	3304      	adds	r3, #4
 8002088:	68ba      	ldr	r2, [r7, #8]
 800208a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 800208c:	4b1a      	ldr	r3, [pc, #104]	; (80020f8 <SYSVIEW_AddTask+0xc4>)
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	491b      	ldr	r1, [pc, #108]	; (8002100 <SYSVIEW_AddTask+0xcc>)
 8002092:	4613      	mov	r3, r2
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	4413      	add	r3, r2
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	440b      	add	r3, r1
 800209c:	3308      	adds	r3, #8
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80020a2:	4b15      	ldr	r3, [pc, #84]	; (80020f8 <SYSVIEW_AddTask+0xc4>)
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	4916      	ldr	r1, [pc, #88]	; (8002100 <SYSVIEW_AddTask+0xcc>)
 80020a8:	4613      	mov	r3, r2
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	4413      	add	r3, r2
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	440b      	add	r3, r1
 80020b2:	330c      	adds	r3, #12
 80020b4:	683a      	ldr	r2, [r7, #0]
 80020b6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80020b8:	4b0f      	ldr	r3, [pc, #60]	; (80020f8 <SYSVIEW_AddTask+0xc4>)
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	4910      	ldr	r1, [pc, #64]	; (8002100 <SYSVIEW_AddTask+0xcc>)
 80020be:	4613      	mov	r3, r2
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	4413      	add	r3, r2
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	440b      	add	r3, r1
 80020c8:	3310      	adds	r3, #16
 80020ca:	69ba      	ldr	r2, [r7, #24]
 80020cc:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80020ce:	4b0a      	ldr	r3, [pc, #40]	; (80020f8 <SYSVIEW_AddTask+0xc4>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	3301      	adds	r3, #1
 80020d4:	4a08      	ldr	r2, [pc, #32]	; (80020f8 <SYSVIEW_AddTask+0xc4>)
 80020d6:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80020d8:	69bb      	ldr	r3, [r7, #24]
 80020da:	9300      	str	r3, [sp, #0]
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	68b9      	ldr	r1, [r7, #8]
 80020e2:	68f8      	ldr	r0, [r7, #12]
 80020e4:	f000 f80e 	bl	8002104 <SYSVIEW_SendTaskInfo>
 80020e8:	e000      	b.n	80020ec <SYSVIEW_AddTask+0xb8>
    return;
 80020ea:	bf00      	nop

}
 80020ec:	3710      	adds	r7, #16
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	0801a9c4 	.word	0x0801a9c4
 80020f8:	2000175c 	.word	0x2000175c
 80020fc:	0801a9cc 	.word	0x0801a9cc
 8002100:	2000161c 	.word	0x2000161c

08002104 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8002104:	b580      	push	{r7, lr}
 8002106:	b08a      	sub	sp, #40	; 0x28
 8002108:	af00      	add	r7, sp, #0
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	60b9      	str	r1, [r7, #8]
 800210e:	607a      	str	r2, [r7, #4]
 8002110:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8002112:	f107 0314 	add.w	r3, r7, #20
 8002116:	2214      	movs	r2, #20
 8002118:	2100      	movs	r1, #0
 800211a:	4618      	mov	r0, r3
 800211c:	f017 fe3c 	bl	8019d98 <memset>
  TaskInfo.TaskID     = TaskID;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8002130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002132:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8002134:	f107 0314 	add.w	r3, r7, #20
 8002138:	4618      	mov	r0, r3
 800213a:	f017 fa4f 	bl	80195dc <SEGGER_SYSVIEW_SendTaskInfo>
}
 800213e:	bf00      	nop
 8002140:	3728      	adds	r7, #40	; 0x28
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
	...

08002148 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800214e:	463b      	mov	r3, r7
 8002150:	2200      	movs	r2, #0
 8002152:	601a      	str	r2, [r3, #0]
 8002154:	605a      	str	r2, [r3, #4]
 8002156:	609a      	str	r2, [r3, #8]
 8002158:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800215a:	4b37      	ldr	r3, [pc, #220]	; (8002238 <MX_ADC1_Init+0xf0>)
 800215c:	4a37      	ldr	r2, [pc, #220]	; (800223c <MX_ADC1_Init+0xf4>)
 800215e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002160:	4b35      	ldr	r3, [pc, #212]	; (8002238 <MX_ADC1_Init+0xf0>)
 8002162:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002166:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002168:	4b33      	ldr	r3, [pc, #204]	; (8002238 <MX_ADC1_Init+0xf0>)
 800216a:	2200      	movs	r2, #0
 800216c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800216e:	4b32      	ldr	r3, [pc, #200]	; (8002238 <MX_ADC1_Init+0xf0>)
 8002170:	2201      	movs	r2, #1
 8002172:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002174:	4b30      	ldr	r3, [pc, #192]	; (8002238 <MX_ADC1_Init+0xf0>)
 8002176:	2200      	movs	r2, #0
 8002178:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800217a:	4b2f      	ldr	r3, [pc, #188]	; (8002238 <MX_ADC1_Init+0xf0>)
 800217c:	2200      	movs	r2, #0
 800217e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002182:	4b2d      	ldr	r3, [pc, #180]	; (8002238 <MX_ADC1_Init+0xf0>)
 8002184:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002188:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 800218a:	4b2b      	ldr	r3, [pc, #172]	; (8002238 <MX_ADC1_Init+0xf0>)
 800218c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002190:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002192:	4b29      	ldr	r3, [pc, #164]	; (8002238 <MX_ADC1_Init+0xf0>)
 8002194:	2200      	movs	r2, #0
 8002196:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8002198:	4b27      	ldr	r3, [pc, #156]	; (8002238 <MX_ADC1_Init+0xf0>)
 800219a:	2204      	movs	r2, #4
 800219c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800219e:	4b26      	ldr	r3, [pc, #152]	; (8002238 <MX_ADC1_Init+0xf0>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80021a6:	4b24      	ldr	r3, [pc, #144]	; (8002238 <MX_ADC1_Init+0xf0>)
 80021a8:	2201      	movs	r2, #1
 80021aa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80021ac:	4822      	ldr	r0, [pc, #136]	; (8002238 <MX_ADC1_Init+0xf0>)
 80021ae:	f00e fa59 	bl	8010664 <HAL_ADC_Init>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d001      	beq.n	80021bc <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 80021b8:	f001 fb9a 	bl	80038f0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80021bc:	2301      	movs	r3, #1
 80021be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80021c0:	2301      	movs	r3, #1
 80021c2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 80021c4:	2302      	movs	r3, #2
 80021c6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80021c8:	463b      	mov	r3, r7
 80021ca:	4619      	mov	r1, r3
 80021cc:	481a      	ldr	r0, [pc, #104]	; (8002238 <MX_ADC1_Init+0xf0>)
 80021ce:	f00e fcfb 	bl	8010bc8 <HAL_ADC_ConfigChannel>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d001      	beq.n	80021dc <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80021d8:	f001 fb8a 	bl	80038f0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80021dc:	2302      	movs	r3, #2
 80021de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80021e0:	2302      	movs	r3, #2
 80021e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80021e4:	463b      	mov	r3, r7
 80021e6:	4619      	mov	r1, r3
 80021e8:	4813      	ldr	r0, [pc, #76]	; (8002238 <MX_ADC1_Init+0xf0>)
 80021ea:	f00e fced 	bl	8010bc8 <HAL_ADC_ConfigChannel>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d001      	beq.n	80021f8 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 80021f4:	f001 fb7c 	bl	80038f0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80021f8:	2303      	movs	r3, #3
 80021fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80021fc:	2303      	movs	r3, #3
 80021fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002200:	463b      	mov	r3, r7
 8002202:	4619      	mov	r1, r3
 8002204:	480c      	ldr	r0, [pc, #48]	; (8002238 <MX_ADC1_Init+0xf0>)
 8002206:	f00e fcdf 	bl	8010bc8 <HAL_ADC_ConfigChannel>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d001      	beq.n	8002214 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8002210:	f001 fb6e 	bl	80038f0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002214:	2304      	movs	r3, #4
 8002216:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8002218:	2304      	movs	r3, #4
 800221a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800221c:	463b      	mov	r3, r7
 800221e:	4619      	mov	r1, r3
 8002220:	4805      	ldr	r0, [pc, #20]	; (8002238 <MX_ADC1_Init+0xf0>)
 8002222:	f00e fcd1 	bl	8010bc8 <HAL_ADC_ConfigChannel>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d001      	beq.n	8002230 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 800222c:	f001 fb60 	bl	80038f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002230:	bf00      	nop
 8002232:	3710      	adds	r7, #16
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	2001b59c 	.word	0x2001b59c
 800223c:	40012000 	.word	0x40012000

08002240 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b08a      	sub	sp, #40	; 0x28
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002248:	f107 0314 	add.w	r3, r7, #20
 800224c:	2200      	movs	r2, #0
 800224e:	601a      	str	r2, [r3, #0]
 8002250:	605a      	str	r2, [r3, #4]
 8002252:	609a      	str	r2, [r3, #8]
 8002254:	60da      	str	r2, [r3, #12]
 8002256:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a33      	ldr	r2, [pc, #204]	; (800232c <HAL_ADC_MspInit+0xec>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d15f      	bne.n	8002322 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002262:	2300      	movs	r3, #0
 8002264:	613b      	str	r3, [r7, #16]
 8002266:	4b32      	ldr	r3, [pc, #200]	; (8002330 <HAL_ADC_MspInit+0xf0>)
 8002268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800226a:	4a31      	ldr	r2, [pc, #196]	; (8002330 <HAL_ADC_MspInit+0xf0>)
 800226c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002270:	6453      	str	r3, [r2, #68]	; 0x44
 8002272:	4b2f      	ldr	r3, [pc, #188]	; (8002330 <HAL_ADC_MspInit+0xf0>)
 8002274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002276:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800227a:	613b      	str	r3, [r7, #16]
 800227c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800227e:	2300      	movs	r3, #0
 8002280:	60fb      	str	r3, [r7, #12]
 8002282:	4b2b      	ldr	r3, [pc, #172]	; (8002330 <HAL_ADC_MspInit+0xf0>)
 8002284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002286:	4a2a      	ldr	r2, [pc, #168]	; (8002330 <HAL_ADC_MspInit+0xf0>)
 8002288:	f043 0301 	orr.w	r3, r3, #1
 800228c:	6313      	str	r3, [r2, #48]	; 0x30
 800228e:	4b28      	ldr	r3, [pc, #160]	; (8002330 <HAL_ADC_MspInit+0xf0>)
 8002290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002292:	f003 0301 	and.w	r3, r3, #1
 8002296:	60fb      	str	r3, [r7, #12]
 8002298:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = precharge_resistor_temperature_Pin|fuse_resistor_temperature_Pin|aux_temp1_Pin|aux_temp2_Pin;
 800229a:	231e      	movs	r3, #30
 800229c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800229e:	2303      	movs	r3, #3
 80022a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a2:	2300      	movs	r3, #0
 80022a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022a6:	f107 0314 	add.w	r3, r7, #20
 80022aa:	4619      	mov	r1, r3
 80022ac:	4821      	ldr	r0, [pc, #132]	; (8002334 <HAL_ADC_MspInit+0xf4>)
 80022ae:	f00f ffb9 	bl	8012224 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80022b2:	4b21      	ldr	r3, [pc, #132]	; (8002338 <HAL_ADC_MspInit+0xf8>)
 80022b4:	4a21      	ldr	r2, [pc, #132]	; (800233c <HAL_ADC_MspInit+0xfc>)
 80022b6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80022b8:	4b1f      	ldr	r3, [pc, #124]	; (8002338 <HAL_ADC_MspInit+0xf8>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80022be:	4b1e      	ldr	r3, [pc, #120]	; (8002338 <HAL_ADC_MspInit+0xf8>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80022c4:	4b1c      	ldr	r3, [pc, #112]	; (8002338 <HAL_ADC_MspInit+0xf8>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80022ca:	4b1b      	ldr	r3, [pc, #108]	; (8002338 <HAL_ADC_MspInit+0xf8>)
 80022cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022d0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80022d2:	4b19      	ldr	r3, [pc, #100]	; (8002338 <HAL_ADC_MspInit+0xf8>)
 80022d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80022d8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80022da:	4b17      	ldr	r3, [pc, #92]	; (8002338 <HAL_ADC_MspInit+0xf8>)
 80022dc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022e0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80022e2:	4b15      	ldr	r3, [pc, #84]	; (8002338 <HAL_ADC_MspInit+0xf8>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80022e8:	4b13      	ldr	r3, [pc, #76]	; (8002338 <HAL_ADC_MspInit+0xf8>)
 80022ea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80022ee:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80022f0:	4b11      	ldr	r3, [pc, #68]	; (8002338 <HAL_ADC_MspInit+0xf8>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80022f6:	4810      	ldr	r0, [pc, #64]	; (8002338 <HAL_ADC_MspInit+0xf8>)
 80022f8:	f00f fc24 	bl	8011b44 <HAL_DMA_Init>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8002302:	f001 faf5 	bl	80038f0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a0b      	ldr	r2, [pc, #44]	; (8002338 <HAL_ADC_MspInit+0xf8>)
 800230a:	639a      	str	r2, [r3, #56]	; 0x38
 800230c:	4a0a      	ldr	r2, [pc, #40]	; (8002338 <HAL_ADC_MspInit+0xf8>)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8002312:	2200      	movs	r2, #0
 8002314:	2105      	movs	r1, #5
 8002316:	2012      	movs	r0, #18
 8002318:	f00f fbea 	bl	8011af0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800231c:	2012      	movs	r0, #18
 800231e:	f00f fc03 	bl	8011b28 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002322:	bf00      	nop
 8002324:	3728      	adds	r7, #40	; 0x28
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	40012000 	.word	0x40012000
 8002330:	40023800 	.word	0x40023800
 8002334:	40020000 	.word	0x40020000
 8002338:	2001b5e4 	.word	0x2001b5e4
 800233c:	40026410 	.word	0x40026410

08002340 <interpret_ADC_buffer>:
/* USER CODE BEGIN 1 */

uint16_t ADC_FLAG = 1;

void interpret_ADC_buffer(temperatures_t *temperatures,
		uint16_t *adcBuffer, uint8_t L) {
 8002340:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002344:	b08e      	sub	sp, #56	; 0x38
 8002346:	af00      	add	r7, sp, #0
 8002348:	60f8      	str	r0, [r7, #12]
 800234a:	60b9      	str	r1, [r7, #8]
 800234c:	4613      	mov	r3, r2
 800234e:	71fb      	strb	r3, [r7, #7]
	uint16_t i, j;
	float adcAverageBuffer[4];

	float beta = 3500;
 8002350:	4bdb      	ldr	r3, [pc, #876]	; (80026c0 <interpret_ADC_buffer+0x380>)
 8002352:	633b      	str	r3, [r7, #48]	; 0x30
	float temp = 25 + 273.15;
 8002354:	4bdb      	ldr	r3, [pc, #876]	; (80026c4 <interpret_ADC_buffer+0x384>)
 8002356:	62fb      	str	r3, [r7, #44]	; 0x2c
	float R0 = 10000 * exp(-beta / temp);
 8002358:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800235c:	eeb1 7a67 	vneg.f32	s14, s15
 8002360:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002364:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002368:	ee16 0a90 	vmov	r0, s13
 800236c:	f7fe f8de 	bl	800052c <__aeabi_f2d>
 8002370:	4602      	mov	r2, r0
 8002372:	460b      	mov	r3, r1
 8002374:	ec43 2b10 	vmov	d0, r2, r3
 8002378:	f017 fe2e 	bl	8019fd8 <exp>
 800237c:	ec51 0b10 	vmov	r0, r1, d0
 8002380:	a3cb      	add	r3, pc, #812	; (adr r3, 80026b0 <interpret_ADC_buffer+0x370>)
 8002382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002386:	f7fe f929 	bl	80005dc <__aeabi_dmul>
 800238a:	4602      	mov	r2, r0
 800238c:	460b      	mov	r3, r1
 800238e:	4610      	mov	r0, r2
 8002390:	4619      	mov	r1, r3
 8002392:	f7fe fc1b 	bl	8000bcc <__aeabi_d2f>
 8002396:	4603      	mov	r3, r0
 8002398:	62bb      	str	r3, [r7, #40]	; 0x28
	float R = 10000;
 800239a:	4bcb      	ldr	r3, [pc, #812]	; (80026c8 <interpret_ADC_buffer+0x388>)
 800239c:	627b      	str	r3, [r7, #36]	; 0x24
	float resolution = pow(2, 12) - 1;
 800239e:	4bcb      	ldr	r3, [pc, #812]	; (80026cc <interpret_ADC_buffer+0x38c>)
 80023a0:	623b      	str	r3, [r7, #32]

	for (i = 0; i < 4; i++) {
 80023a2:	2300      	movs	r3, #0
 80023a4:	86fb      	strh	r3, [r7, #54]	; 0x36
 80023a6:	e063      	b.n	8002470 <interpret_ADC_buffer+0x130>
		adcAverageBuffer[i] = 0;
 80023a8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80023b0:	4413      	add	r3, r2
 80023b2:	3b28      	subs	r3, #40	; 0x28
 80023b4:	f04f 0200 	mov.w	r2, #0
 80023b8:	601a      	str	r2, [r3, #0]
		for (j = 0; j < L; j++) {
 80023ba:	2300      	movs	r3, #0
 80023bc:	86bb      	strh	r3, [r7, #52]	; 0x34
 80023be:	e020      	b.n	8002402 <interpret_ADC_buffer+0xc2>
			adcAverageBuffer[i] += adcBuffer[4 * j + i];
 80023c0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80023c8:	4413      	add	r3, r2
 80023ca:	3b28      	subs	r3, #40	; 0x28
 80023cc:	ed93 7a00 	vldr	s14, [r3]
 80023d0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80023d2:	009a      	lsls	r2, r3, #2
 80023d4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80023d6:	4413      	add	r3, r2
 80023d8:	005b      	lsls	r3, r3, #1
 80023da:	68ba      	ldr	r2, [r7, #8]
 80023dc:	4413      	add	r3, r2
 80023de:	881b      	ldrh	r3, [r3, #0]
 80023e0:	ee07 3a90 	vmov	s15, r3
 80023e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023e8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80023ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80023f4:	4413      	add	r3, r2
 80023f6:	3b28      	subs	r3, #40	; 0x28
 80023f8:	edc3 7a00 	vstr	s15, [r3]
		for (j = 0; j < L; j++) {
 80023fc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80023fe:	3301      	adds	r3, #1
 8002400:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002402:	79fb      	ldrb	r3, [r7, #7]
 8002404:	b29b      	uxth	r3, r3
 8002406:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002408:	429a      	cmp	r2, r3
 800240a:	d3d9      	bcc.n	80023c0 <interpret_ADC_buffer+0x80>
		}
		adcAverageBuffer[i] /= L;
 800240c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002414:	4413      	add	r3, r2
 8002416:	3b28      	subs	r3, #40	; 0x28
 8002418:	edd3 6a00 	vldr	s13, [r3]
 800241c:	79fb      	ldrb	r3, [r7, #7]
 800241e:	ee07 3a90 	vmov	s15, r3
 8002422:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002426:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002428:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002432:	4413      	add	r3, r2
 8002434:	3b28      	subs	r3, #40	; 0x28
 8002436:	edc3 7a00 	vstr	s15, [r3]

		/* The adc value shouldn't be negative, nor should it be 0 */
		if (adcAverageBuffer[i] < 0.25) {
 800243a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002442:	4413      	add	r3, r2
 8002444:	3b28      	subs	r3, #40	; 0x28
 8002446:	edd3 7a00 	vldr	s15, [r3]
 800244a:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 800244e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002456:	d508      	bpl.n	800246a <interpret_ADC_buffer+0x12a>
			adcAverageBuffer[i] = 1;
 8002458:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002460:	4413      	add	r3, r2
 8002462:	3b28      	subs	r3, #40	; 0x28
 8002464:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002468:	601a      	str	r2, [r3, #0]
	for (i = 0; i < 4; i++) {
 800246a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800246c:	3301      	adds	r3, #1
 800246e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002470:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002472:	2b03      	cmp	r3, #3
 8002474:	d998      	bls.n	80023a8 <interpret_ADC_buffer+0x68>
	}
	/* temperature = beta / (log(R0 * ( resolution / adcAverageBuffer[i] - 1) ) - log(R)); */
	/* v/vt = ((2^n - 1)*v/vref)/((2^n - 1)*vt/vref) = ((2^n - 1)*v/vref)/adcAverageBuffer[i] */
	/* Assume v = vref, n = 12 */
	temperatures->precharge_resistor = beta
			/ (log(R0 * (resolution / adcAverageBuffer[0] - 1)) - log(R))
 8002476:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002478:	f7fe f858 	bl	800052c <__aeabi_f2d>
 800247c:	4604      	mov	r4, r0
 800247e:	460d      	mov	r5, r1
 8002480:	ed97 7a04 	vldr	s14, [r7, #16]
 8002484:	edd7 6a08 	vldr	s13, [r7, #32]
 8002488:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800248c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002490:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002494:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002498:	ee67 7a27 	vmul.f32	s15, s14, s15
 800249c:	ee17 0a90 	vmov	r0, s15
 80024a0:	f7fe f844 	bl	800052c <__aeabi_f2d>
 80024a4:	4602      	mov	r2, r0
 80024a6:	460b      	mov	r3, r1
 80024a8:	ec43 2b10 	vmov	d0, r2, r3
 80024ac:	f017 fde4 	bl	801a078 <log>
 80024b0:	ec59 8b10 	vmov	r8, r9, d0
 80024b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80024b6:	f7fe f839 	bl	800052c <__aeabi_f2d>
 80024ba:	4602      	mov	r2, r0
 80024bc:	460b      	mov	r3, r1
 80024be:	ec43 2b10 	vmov	d0, r2, r3
 80024c2:	f017 fdd9 	bl	801a078 <log>
 80024c6:	ec53 2b10 	vmov	r2, r3, d0
 80024ca:	4640      	mov	r0, r8
 80024cc:	4649      	mov	r1, r9
 80024ce:	f7fd fecd 	bl	800026c <__aeabi_dsub>
 80024d2:	4602      	mov	r2, r0
 80024d4:	460b      	mov	r3, r1
 80024d6:	4620      	mov	r0, r4
 80024d8:	4629      	mov	r1, r5
 80024da:	f7fe f9a9 	bl	8000830 <__aeabi_ddiv>
 80024de:	4602      	mov	r2, r0
 80024e0:	460b      	mov	r3, r1
 80024e2:	4610      	mov	r0, r2
 80024e4:	4619      	mov	r1, r3
			- 273.15;
 80024e6:	a374      	add	r3, pc, #464	; (adr r3, 80026b8 <interpret_ADC_buffer+0x378>)
 80024e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ec:	f7fd febe 	bl	800026c <__aeabi_dsub>
 80024f0:	4602      	mov	r2, r0
 80024f2:	460b      	mov	r3, r1
 80024f4:	4610      	mov	r0, r2
 80024f6:	4619      	mov	r1, r3
 80024f8:	f7fe fb68 	bl	8000bcc <__aeabi_d2f>
 80024fc:	4602      	mov	r2, r0
	temperatures->precharge_resistor = beta
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	601a      	str	r2, [r3, #0]
	temperatures->fuse = beta
			/ (log(R0 * (resolution / adcAverageBuffer[1] - 1)) - log(R))
 8002502:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002504:	f7fe f812 	bl	800052c <__aeabi_f2d>
 8002508:	4604      	mov	r4, r0
 800250a:	460d      	mov	r5, r1
 800250c:	ed97 7a05 	vldr	s14, [r7, #20]
 8002510:	edd7 6a08 	vldr	s13, [r7, #32]
 8002514:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002518:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800251c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002520:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002524:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002528:	ee17 0a90 	vmov	r0, s15
 800252c:	f7fd fffe 	bl	800052c <__aeabi_f2d>
 8002530:	4602      	mov	r2, r0
 8002532:	460b      	mov	r3, r1
 8002534:	ec43 2b10 	vmov	d0, r2, r3
 8002538:	f017 fd9e 	bl	801a078 <log>
 800253c:	ec59 8b10 	vmov	r8, r9, d0
 8002540:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002542:	f7fd fff3 	bl	800052c <__aeabi_f2d>
 8002546:	4602      	mov	r2, r0
 8002548:	460b      	mov	r3, r1
 800254a:	ec43 2b10 	vmov	d0, r2, r3
 800254e:	f017 fd93 	bl	801a078 <log>
 8002552:	ec53 2b10 	vmov	r2, r3, d0
 8002556:	4640      	mov	r0, r8
 8002558:	4649      	mov	r1, r9
 800255a:	f7fd fe87 	bl	800026c <__aeabi_dsub>
 800255e:	4602      	mov	r2, r0
 8002560:	460b      	mov	r3, r1
 8002562:	4620      	mov	r0, r4
 8002564:	4629      	mov	r1, r5
 8002566:	f7fe f963 	bl	8000830 <__aeabi_ddiv>
 800256a:	4602      	mov	r2, r0
 800256c:	460b      	mov	r3, r1
 800256e:	4610      	mov	r0, r2
 8002570:	4619      	mov	r1, r3
			- 273.15;
 8002572:	a351      	add	r3, pc, #324	; (adr r3, 80026b8 <interpret_ADC_buffer+0x378>)
 8002574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002578:	f7fd fe78 	bl	800026c <__aeabi_dsub>
 800257c:	4602      	mov	r2, r0
 800257e:	460b      	mov	r3, r1
 8002580:	4610      	mov	r0, r2
 8002582:	4619      	mov	r1, r3
 8002584:	f7fe fb22 	bl	8000bcc <__aeabi_d2f>
 8002588:	4602      	mov	r2, r0
	temperatures->fuse = beta
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	605a      	str	r2, [r3, #4]
	temperatures->aux_1 = beta
			/ (log(R0 * (resolution / adcAverageBuffer[2] - 1)) - log(R))
 800258e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002590:	f7fd ffcc 	bl	800052c <__aeabi_f2d>
 8002594:	4604      	mov	r4, r0
 8002596:	460d      	mov	r5, r1
 8002598:	ed97 7a06 	vldr	s14, [r7, #24]
 800259c:	edd7 6a08 	vldr	s13, [r7, #32]
 80025a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80025a8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80025ac:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80025b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025b4:	ee17 0a90 	vmov	r0, s15
 80025b8:	f7fd ffb8 	bl	800052c <__aeabi_f2d>
 80025bc:	4602      	mov	r2, r0
 80025be:	460b      	mov	r3, r1
 80025c0:	ec43 2b10 	vmov	d0, r2, r3
 80025c4:	f017 fd58 	bl	801a078 <log>
 80025c8:	ec59 8b10 	vmov	r8, r9, d0
 80025cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80025ce:	f7fd ffad 	bl	800052c <__aeabi_f2d>
 80025d2:	4602      	mov	r2, r0
 80025d4:	460b      	mov	r3, r1
 80025d6:	ec43 2b10 	vmov	d0, r2, r3
 80025da:	f017 fd4d 	bl	801a078 <log>
 80025de:	ec53 2b10 	vmov	r2, r3, d0
 80025e2:	4640      	mov	r0, r8
 80025e4:	4649      	mov	r1, r9
 80025e6:	f7fd fe41 	bl	800026c <__aeabi_dsub>
 80025ea:	4602      	mov	r2, r0
 80025ec:	460b      	mov	r3, r1
 80025ee:	4620      	mov	r0, r4
 80025f0:	4629      	mov	r1, r5
 80025f2:	f7fe f91d 	bl	8000830 <__aeabi_ddiv>
 80025f6:	4602      	mov	r2, r0
 80025f8:	460b      	mov	r3, r1
 80025fa:	4610      	mov	r0, r2
 80025fc:	4619      	mov	r1, r3
			- 273.15;
 80025fe:	a32e      	add	r3, pc, #184	; (adr r3, 80026b8 <interpret_ADC_buffer+0x378>)
 8002600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002604:	f7fd fe32 	bl	800026c <__aeabi_dsub>
 8002608:	4602      	mov	r2, r0
 800260a:	460b      	mov	r3, r1
 800260c:	4610      	mov	r0, r2
 800260e:	4619      	mov	r1, r3
 8002610:	f7fe fadc 	bl	8000bcc <__aeabi_d2f>
 8002614:	4602      	mov	r2, r0
	temperatures->aux_1 = beta
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	609a      	str	r2, [r3, #8]
	temperatures->aux_2 = beta
			/ (log(R0 * (resolution / adcAverageBuffer[3] - 1)) - log(R))
 800261a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800261c:	f7fd ff86 	bl	800052c <__aeabi_f2d>
 8002620:	4604      	mov	r4, r0
 8002622:	460d      	mov	r5, r1
 8002624:	ed97 7a07 	vldr	s14, [r7, #28]
 8002628:	edd7 6a08 	vldr	s13, [r7, #32]
 800262c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002630:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002634:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002638:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800263c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002640:	ee17 0a90 	vmov	r0, s15
 8002644:	f7fd ff72 	bl	800052c <__aeabi_f2d>
 8002648:	4602      	mov	r2, r0
 800264a:	460b      	mov	r3, r1
 800264c:	ec43 2b10 	vmov	d0, r2, r3
 8002650:	f017 fd12 	bl	801a078 <log>
 8002654:	ec59 8b10 	vmov	r8, r9, d0
 8002658:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800265a:	f7fd ff67 	bl	800052c <__aeabi_f2d>
 800265e:	4602      	mov	r2, r0
 8002660:	460b      	mov	r3, r1
 8002662:	ec43 2b10 	vmov	d0, r2, r3
 8002666:	f017 fd07 	bl	801a078 <log>
 800266a:	ec53 2b10 	vmov	r2, r3, d0
 800266e:	4640      	mov	r0, r8
 8002670:	4649      	mov	r1, r9
 8002672:	f7fd fdfb 	bl	800026c <__aeabi_dsub>
 8002676:	4602      	mov	r2, r0
 8002678:	460b      	mov	r3, r1
 800267a:	4620      	mov	r0, r4
 800267c:	4629      	mov	r1, r5
 800267e:	f7fe f8d7 	bl	8000830 <__aeabi_ddiv>
 8002682:	4602      	mov	r2, r0
 8002684:	460b      	mov	r3, r1
 8002686:	4610      	mov	r0, r2
 8002688:	4619      	mov	r1, r3
			- 273.15;
 800268a:	a30b      	add	r3, pc, #44	; (adr r3, 80026b8 <interpret_ADC_buffer+0x378>)
 800268c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002690:	f7fd fdec 	bl	800026c <__aeabi_dsub>
 8002694:	4602      	mov	r2, r0
 8002696:	460b      	mov	r3, r1
 8002698:	4610      	mov	r0, r2
 800269a:	4619      	mov	r1, r3
 800269c:	f7fe fa96 	bl	8000bcc <__aeabi_d2f>
 80026a0:	4602      	mov	r2, r0
	temperatures->aux_2 = beta
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	60da      	str	r2, [r3, #12]

}
 80026a6:	bf00      	nop
 80026a8:	3738      	adds	r7, #56	; 0x38
 80026aa:	46bd      	mov	sp, r7
 80026ac:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80026b0:	00000000 	.word	0x00000000
 80026b4:	40c38800 	.word	0x40c38800
 80026b8:	66666666 	.word	0x66666666
 80026bc:	40711266 	.word	0x40711266
 80026c0:	455ac000 	.word	0x455ac000
 80026c4:	43951333 	.word	0x43951333
 80026c8:	461c4000 	.word	0x461c4000
 80026cc:	457ff000 	.word	0x457ff000

080026d0 <ADC_initialize>:

void ADC_initialize(TIM_HandleTypeDef* htim) {
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
	htim->Instance->ARR = 65535 / 1000; // 100 Hz sample rate
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2241      	movs	r2, #65	; 0x41
 80026de:	62da      	str	r2, [r3, #44]	; 0x2c
	HAL_TIM_Base_Start(htim);
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f011 f9c3 	bl	8013a6c <HAL_TIM_Base_Start>
	ADC_FLAG = 1;
 80026e6:	4b03      	ldr	r3, [pc, #12]	; (80026f4 <ADC_initialize+0x24>)
 80026e8:	2201      	movs	r2, #1
 80026ea:	801a      	strh	r2, [r3, #0]
}
 80026ec:	bf00      	nop
 80026ee:	3708      	adds	r7, #8
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	20000000 	.word	0x20000000

080026f8 <ADC_step>:

void ADC_step(uint32_t *buf, uint16_t len) {
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	460b      	mov	r3, r1
 8002702:	807b      	strh	r3, [r7, #2]
	if (ADC_FLAG == 1) {
 8002704:	4b08      	ldr	r3, [pc, #32]	; (8002728 <ADC_step+0x30>)
 8002706:	881b      	ldrh	r3, [r3, #0]
 8002708:	2b01      	cmp	r3, #1
 800270a:	d108      	bne.n	800271e <ADC_step+0x26>
		ADC_FLAG = 0;
 800270c:	4b06      	ldr	r3, [pc, #24]	; (8002728 <ADC_step+0x30>)
 800270e:	2200      	movs	r2, #0
 8002710:	801a      	strh	r2, [r3, #0]
		HAL_ADC_Start_DMA(&hadc1, buf, len);
 8002712:	887b      	ldrh	r3, [r7, #2]
 8002714:	461a      	mov	r2, r3
 8002716:	6879      	ldr	r1, [r7, #4]
 8002718:	4804      	ldr	r0, [pc, #16]	; (800272c <ADC_step+0x34>)
 800271a:	f00e f927 	bl	801096c <HAL_ADC_Start_DMA>
	}
}
 800271e:	bf00      	nop
 8002720:	3708      	adds	r7, #8
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	20000000 	.word	0x20000000
 800272c:	2001b59c 	.word	0x2001b59c

08002730 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
	ADC_FLAG = 1;
 8002738:	4b04      	ldr	r3, [pc, #16]	; (800274c <HAL_ADC_ConvCpltCallback+0x1c>)
 800273a:	2201      	movs	r2, #1
 800273c:	801a      	strh	r2, [r3, #0]

}
 800273e:	bf00      	nop
 8002740:	370c      	adds	r7, #12
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	20000000 	.word	0x20000000

08002750 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8002754:	4b18      	ldr	r3, [pc, #96]	; (80027b8 <MX_CAN1_Init+0x68>)
 8002756:	4a19      	ldr	r2, [pc, #100]	; (80027bc <MX_CAN1_Init+0x6c>)
 8002758:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 800275a:	4b17      	ldr	r3, [pc, #92]	; (80027b8 <MX_CAN1_Init+0x68>)
 800275c:	2203      	movs	r2, #3
 800275e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_LOOPBACK;
 8002760:	4b15      	ldr	r3, [pc, #84]	; (80027b8 <MX_CAN1_Init+0x68>)
 8002762:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002766:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002768:	4b13      	ldr	r3, [pc, #76]	; (80027b8 <MX_CAN1_Init+0x68>)
 800276a:	2200      	movs	r2, #0
 800276c:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 800276e:	4b12      	ldr	r3, [pc, #72]	; (80027b8 <MX_CAN1_Init+0x68>)
 8002770:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 8002774:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8002776:	4b10      	ldr	r3, [pc, #64]	; (80027b8 <MX_CAN1_Init+0x68>)
 8002778:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800277c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800277e:	4b0e      	ldr	r3, [pc, #56]	; (80027b8 <MX_CAN1_Init+0x68>)
 8002780:	2200      	movs	r2, #0
 8002782:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8002784:	4b0c      	ldr	r3, [pc, #48]	; (80027b8 <MX_CAN1_Init+0x68>)
 8002786:	2200      	movs	r2, #0
 8002788:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800278a:	4b0b      	ldr	r3, [pc, #44]	; (80027b8 <MX_CAN1_Init+0x68>)
 800278c:	2200      	movs	r2, #0
 800278e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8002790:	4b09      	ldr	r3, [pc, #36]	; (80027b8 <MX_CAN1_Init+0x68>)
 8002792:	2200      	movs	r2, #0
 8002794:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8002796:	4b08      	ldr	r3, [pc, #32]	; (80027b8 <MX_CAN1_Init+0x68>)
 8002798:	2200      	movs	r2, #0
 800279a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800279c:	4b06      	ldr	r3, [pc, #24]	; (80027b8 <MX_CAN1_Init+0x68>)
 800279e:	2200      	movs	r2, #0
 80027a0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80027a2:	4805      	ldr	r0, [pc, #20]	; (80027b8 <MX_CAN1_Init+0x68>)
 80027a4:	f00e fcba 	bl	801111c <HAL_CAN_Init>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d001      	beq.n	80027b2 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 80027ae:	f001 f89f 	bl	80038f0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80027b2:	bf00      	nop
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	2001b66c 	.word	0x2001b66c
 80027bc:	40006400 	.word	0x40006400

080027c0 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80027c4:	4b17      	ldr	r3, [pc, #92]	; (8002824 <MX_CAN2_Init+0x64>)
 80027c6:	4a18      	ldr	r2, [pc, #96]	; (8002828 <MX_CAN2_Init+0x68>)
 80027c8:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 6;
 80027ca:	4b16      	ldr	r3, [pc, #88]	; (8002824 <MX_CAN2_Init+0x64>)
 80027cc:	2206      	movs	r2, #6
 80027ce:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80027d0:	4b14      	ldr	r3, [pc, #80]	; (8002824 <MX_CAN2_Init+0x64>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80027d6:	4b13      	ldr	r3, [pc, #76]	; (8002824 <MX_CAN2_Init+0x64>)
 80027d8:	2200      	movs	r2, #0
 80027da:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_11TQ;
 80027dc:	4b11      	ldr	r3, [pc, #68]	; (8002824 <MX_CAN2_Init+0x64>)
 80027de:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 80027e2:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 80027e4:	4b0f      	ldr	r3, [pc, #60]	; (8002824 <MX_CAN2_Init+0x64>)
 80027e6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80027ea:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80027ec:	4b0d      	ldr	r3, [pc, #52]	; (8002824 <MX_CAN2_Init+0x64>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80027f2:	4b0c      	ldr	r3, [pc, #48]	; (8002824 <MX_CAN2_Init+0x64>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80027f8:	4b0a      	ldr	r3, [pc, #40]	; (8002824 <MX_CAN2_Init+0x64>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80027fe:	4b09      	ldr	r3, [pc, #36]	; (8002824 <MX_CAN2_Init+0x64>)
 8002800:	2200      	movs	r2, #0
 8002802:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8002804:	4b07      	ldr	r3, [pc, #28]	; (8002824 <MX_CAN2_Init+0x64>)
 8002806:	2200      	movs	r2, #0
 8002808:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 800280a:	4b06      	ldr	r3, [pc, #24]	; (8002824 <MX_CAN2_Init+0x64>)
 800280c:	2200      	movs	r2, #0
 800280e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8002810:	4804      	ldr	r0, [pc, #16]	; (8002824 <MX_CAN2_Init+0x64>)
 8002812:	f00e fc83 	bl	801111c <HAL_CAN_Init>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d001      	beq.n	8002820 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 800281c:	f001 f868 	bl	80038f0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8002820:	bf00      	nop
 8002822:	bd80      	pop	{r7, pc}
 8002824:	2001b644 	.word	0x2001b644
 8002828:	40006800 	.word	0x40006800

0800282c <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b08c      	sub	sp, #48	; 0x30
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002834:	f107 031c 	add.w	r3, r7, #28
 8002838:	2200      	movs	r2, #0
 800283a:	601a      	str	r2, [r3, #0]
 800283c:	605a      	str	r2, [r3, #4]
 800283e:	609a      	str	r2, [r3, #8]
 8002840:	60da      	str	r2, [r3, #12]
 8002842:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a4f      	ldr	r2, [pc, #316]	; (8002988 <HAL_CAN_MspInit+0x15c>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d14e      	bne.n	80028ec <HAL_CAN_MspInit+0xc0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 800284e:	4b4f      	ldr	r3, [pc, #316]	; (800298c <HAL_CAN_MspInit+0x160>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	3301      	adds	r3, #1
 8002854:	4a4d      	ldr	r2, [pc, #308]	; (800298c <HAL_CAN_MspInit+0x160>)
 8002856:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002858:	4b4c      	ldr	r3, [pc, #304]	; (800298c <HAL_CAN_MspInit+0x160>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2b01      	cmp	r3, #1
 800285e:	d10d      	bne.n	800287c <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002860:	2300      	movs	r3, #0
 8002862:	61bb      	str	r3, [r7, #24]
 8002864:	4b4a      	ldr	r3, [pc, #296]	; (8002990 <HAL_CAN_MspInit+0x164>)
 8002866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002868:	4a49      	ldr	r2, [pc, #292]	; (8002990 <HAL_CAN_MspInit+0x164>)
 800286a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800286e:	6413      	str	r3, [r2, #64]	; 0x40
 8002870:	4b47      	ldr	r3, [pc, #284]	; (8002990 <HAL_CAN_MspInit+0x164>)
 8002872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002874:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002878:	61bb      	str	r3, [r7, #24]
 800287a:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800287c:	2300      	movs	r3, #0
 800287e:	617b      	str	r3, [r7, #20]
 8002880:	4b43      	ldr	r3, [pc, #268]	; (8002990 <HAL_CAN_MspInit+0x164>)
 8002882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002884:	4a42      	ldr	r2, [pc, #264]	; (8002990 <HAL_CAN_MspInit+0x164>)
 8002886:	f043 0301 	orr.w	r3, r3, #1
 800288a:	6313      	str	r3, [r2, #48]	; 0x30
 800288c:	4b40      	ldr	r3, [pc, #256]	; (8002990 <HAL_CAN_MspInit+0x164>)
 800288e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002890:	f003 0301 	and.w	r3, r3, #1
 8002894:	617b      	str	r3, [r7, #20]
 8002896:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002898:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800289c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800289e:	2302      	movs	r3, #2
 80028a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a2:	2300      	movs	r3, #0
 80028a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028a6:	2303      	movs	r3, #3
 80028a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80028aa:	2309      	movs	r3, #9
 80028ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028ae:	f107 031c 	add.w	r3, r7, #28
 80028b2:	4619      	mov	r1, r3
 80028b4:	4837      	ldr	r0, [pc, #220]	; (8002994 <HAL_CAN_MspInit+0x168>)
 80028b6:	f00f fcb5 	bl	8012224 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 80028ba:	2200      	movs	r2, #0
 80028bc:	2105      	movs	r1, #5
 80028be:	2013      	movs	r0, #19
 80028c0:	f00f f916 	bl	8011af0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 80028c4:	2013      	movs	r0, #19
 80028c6:	f00f f92f 	bl	8011b28 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 80028ca:	2200      	movs	r2, #0
 80028cc:	2105      	movs	r1, #5
 80028ce:	2014      	movs	r0, #20
 80028d0:	f00f f90e 	bl	8011af0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80028d4:	2014      	movs	r0, #20
 80028d6:	f00f f927 	bl	8011b28 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 80028da:	2200      	movs	r2, #0
 80028dc:	2105      	movs	r1, #5
 80028de:	2015      	movs	r0, #21
 80028e0:	f00f f906 	bl	8011af0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80028e4:	2015      	movs	r0, #21
 80028e6:	f00f f91f 	bl	8011b28 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 80028ea:	e048      	b.n	800297e <HAL_CAN_MspInit+0x152>
  else if(canHandle->Instance==CAN2)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a29      	ldr	r2, [pc, #164]	; (8002998 <HAL_CAN_MspInit+0x16c>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d143      	bne.n	800297e <HAL_CAN_MspInit+0x152>
    __HAL_RCC_CAN2_CLK_ENABLE();
 80028f6:	2300      	movs	r3, #0
 80028f8:	613b      	str	r3, [r7, #16]
 80028fa:	4b25      	ldr	r3, [pc, #148]	; (8002990 <HAL_CAN_MspInit+0x164>)
 80028fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fe:	4a24      	ldr	r2, [pc, #144]	; (8002990 <HAL_CAN_MspInit+0x164>)
 8002900:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002904:	6413      	str	r3, [r2, #64]	; 0x40
 8002906:	4b22      	ldr	r3, [pc, #136]	; (8002990 <HAL_CAN_MspInit+0x164>)
 8002908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800290e:	613b      	str	r3, [r7, #16]
 8002910:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002912:	4b1e      	ldr	r3, [pc, #120]	; (800298c <HAL_CAN_MspInit+0x160>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	3301      	adds	r3, #1
 8002918:	4a1c      	ldr	r2, [pc, #112]	; (800298c <HAL_CAN_MspInit+0x160>)
 800291a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800291c:	4b1b      	ldr	r3, [pc, #108]	; (800298c <HAL_CAN_MspInit+0x160>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2b01      	cmp	r3, #1
 8002922:	d10d      	bne.n	8002940 <HAL_CAN_MspInit+0x114>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002924:	2300      	movs	r3, #0
 8002926:	60fb      	str	r3, [r7, #12]
 8002928:	4b19      	ldr	r3, [pc, #100]	; (8002990 <HAL_CAN_MspInit+0x164>)
 800292a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292c:	4a18      	ldr	r2, [pc, #96]	; (8002990 <HAL_CAN_MspInit+0x164>)
 800292e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002932:	6413      	str	r3, [r2, #64]	; 0x40
 8002934:	4b16      	ldr	r3, [pc, #88]	; (8002990 <HAL_CAN_MspInit+0x164>)
 8002936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002938:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800293c:	60fb      	str	r3, [r7, #12]
 800293e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002940:	2300      	movs	r3, #0
 8002942:	60bb      	str	r3, [r7, #8]
 8002944:	4b12      	ldr	r3, [pc, #72]	; (8002990 <HAL_CAN_MspInit+0x164>)
 8002946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002948:	4a11      	ldr	r2, [pc, #68]	; (8002990 <HAL_CAN_MspInit+0x164>)
 800294a:	f043 0302 	orr.w	r3, r3, #2
 800294e:	6313      	str	r3, [r2, #48]	; 0x30
 8002950:	4b0f      	ldr	r3, [pc, #60]	; (8002990 <HAL_CAN_MspInit+0x164>)
 8002952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002954:	f003 0302 	and.w	r3, r3, #2
 8002958:	60bb      	str	r3, [r7, #8]
 800295a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800295c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002960:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002962:	2302      	movs	r3, #2
 8002964:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002966:	2300      	movs	r3, #0
 8002968:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800296a:	2303      	movs	r3, #3
 800296c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 800296e:	2309      	movs	r3, #9
 8002970:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002972:	f107 031c 	add.w	r3, r7, #28
 8002976:	4619      	mov	r1, r3
 8002978:	4808      	ldr	r0, [pc, #32]	; (800299c <HAL_CAN_MspInit+0x170>)
 800297a:	f00f fc53 	bl	8012224 <HAL_GPIO_Init>
}
 800297e:	bf00      	nop
 8002980:	3730      	adds	r7, #48	; 0x30
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	40006400 	.word	0x40006400
 800298c:	20001760 	.word	0x20001760
 8002990:	40023800 	.word	0x40023800
 8002994:	40020000 	.word	0x40020000
 8002998:	40006800 	.word	0x40006800
 800299c:	40020400 	.word	0x40020400

080029a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80029a6:	2300      	movs	r3, #0
 80029a8:	607b      	str	r3, [r7, #4]
 80029aa:	4b0c      	ldr	r3, [pc, #48]	; (80029dc <MX_DMA_Init+0x3c>)
 80029ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ae:	4a0b      	ldr	r2, [pc, #44]	; (80029dc <MX_DMA_Init+0x3c>)
 80029b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80029b4:	6313      	str	r3, [r2, #48]	; 0x30
 80029b6:	4b09      	ldr	r3, [pc, #36]	; (80029dc <MX_DMA_Init+0x3c>)
 80029b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029be:	607b      	str	r3, [r7, #4]
 80029c0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80029c2:	2200      	movs	r2, #0
 80029c4:	2105      	movs	r1, #5
 80029c6:	2038      	movs	r0, #56	; 0x38
 80029c8:	f00f f892 	bl	8011af0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80029cc:	2038      	movs	r0, #56	; 0x38
 80029ce:	f00f f8ab 	bl	8011b28 <HAL_NVIC_EnableIRQ>

}
 80029d2:	bf00      	nop
 80029d4:	3708      	adds	r7, #8
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	40023800 	.word	0x40023800

080029e0 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b08a      	sub	sp, #40	; 0x28
 80029e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029e6:	f107 0314 	add.w	r3, r7, #20
 80029ea:	2200      	movs	r2, #0
 80029ec:	601a      	str	r2, [r3, #0]
 80029ee:	605a      	str	r2, [r3, #4]
 80029f0:	609a      	str	r2, [r3, #8]
 80029f2:	60da      	str	r2, [r3, #12]
 80029f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80029f6:	2300      	movs	r3, #0
 80029f8:	613b      	str	r3, [r7, #16]
 80029fa:	4b4d      	ldr	r3, [pc, #308]	; (8002b30 <MX_GPIO_Init+0x150>)
 80029fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fe:	4a4c      	ldr	r2, [pc, #304]	; (8002b30 <MX_GPIO_Init+0x150>)
 8002a00:	f043 0310 	orr.w	r3, r3, #16
 8002a04:	6313      	str	r3, [r2, #48]	; 0x30
 8002a06:	4b4a      	ldr	r3, [pc, #296]	; (8002b30 <MX_GPIO_Init+0x150>)
 8002a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0a:	f003 0310 	and.w	r3, r3, #16
 8002a0e:	613b      	str	r3, [r7, #16]
 8002a10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a12:	2300      	movs	r3, #0
 8002a14:	60fb      	str	r3, [r7, #12]
 8002a16:	4b46      	ldr	r3, [pc, #280]	; (8002b30 <MX_GPIO_Init+0x150>)
 8002a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1a:	4a45      	ldr	r2, [pc, #276]	; (8002b30 <MX_GPIO_Init+0x150>)
 8002a1c:	f043 0304 	orr.w	r3, r3, #4
 8002a20:	6313      	str	r3, [r2, #48]	; 0x30
 8002a22:	4b43      	ldr	r3, [pc, #268]	; (8002b30 <MX_GPIO_Init+0x150>)
 8002a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a26:	f003 0304 	and.w	r3, r3, #4
 8002a2a:	60fb      	str	r3, [r7, #12]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a2e:	2300      	movs	r3, #0
 8002a30:	60bb      	str	r3, [r7, #8]
 8002a32:	4b3f      	ldr	r3, [pc, #252]	; (8002b30 <MX_GPIO_Init+0x150>)
 8002a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a36:	4a3e      	ldr	r2, [pc, #248]	; (8002b30 <MX_GPIO_Init+0x150>)
 8002a38:	f043 0301 	orr.w	r3, r3, #1
 8002a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a3e:	4b3c      	ldr	r3, [pc, #240]	; (8002b30 <MX_GPIO_Init+0x150>)
 8002a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a42:	f003 0301 	and.w	r3, r3, #1
 8002a46:	60bb      	str	r3, [r7, #8]
 8002a48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	607b      	str	r3, [r7, #4]
 8002a4e:	4b38      	ldr	r3, [pc, #224]	; (8002b30 <MX_GPIO_Init+0x150>)
 8002a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a52:	4a37      	ldr	r2, [pc, #220]	; (8002b30 <MX_GPIO_Init+0x150>)
 8002a54:	f043 0302 	orr.w	r3, r3, #2
 8002a58:	6313      	str	r3, [r2, #48]	; 0x30
 8002a5a:	4b35      	ldr	r3, [pc, #212]	; (8002b30 <MX_GPIO_Init+0x150>)
 8002a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5e:	f003 0302 	and.w	r3, r3, #2
 8002a62:	607b      	str	r3, [r7, #4]
 8002a64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, enable_AIR_plus_Pin|enable_AIR_minus_Pin|enable_precharge_Pin, GPIO_PIN_RESET);
 8002a66:	2200      	movs	r2, #0
 8002a68:	210e      	movs	r1, #14
 8002a6a:	4832      	ldr	r0, [pc, #200]	; (8002b34 <MX_GPIO_Init+0x154>)
 8002a6c:	f00f fd76 	bl	801255c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, WARNING_LED_Pin|HEARTBEAT_LED_Pin|OK_LED_Pin, GPIO_PIN_RESET);
 8002a70:	2200      	movs	r2, #0
 8002a72:	21e0      	movs	r1, #224	; 0xe0
 8002a74:	4830      	ldr	r0, [pc, #192]	; (8002b38 <MX_GPIO_Init+0x158>)
 8002a76:	f00f fd71 	bl	801255c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LTC_CS_Pin|error_LED_Pin|AMS_error_Pin|IMD_error_Pin, GPIO_PIN_RESET);
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	f44f 712c 	mov.w	r1, #688	; 0x2b0
 8002a80:	482e      	ldr	r0, [pc, #184]	; (8002b3c <MX_GPIO_Init+0x15c>)
 8002a82:	f00f fd6b 	bl	801255c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = enable_AIR_plus_Pin|enable_AIR_minus_Pin|enable_precharge_Pin;
 8002a86:	230e      	movs	r3, #14
 8002a88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a92:	2300      	movs	r3, #0
 8002a94:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a96:	f107 0314 	add.w	r3, r7, #20
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	4825      	ldr	r0, [pc, #148]	; (8002b34 <MX_GPIO_Init+0x154>)
 8002a9e:	f00f fbc1 	bl	8012224 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = AIR_plus_closed_Pin|AIR_minus_closed_Pin|precharge_closed_Pin;
 8002aa2:	2370      	movs	r3, #112	; 0x70
 8002aa4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002aaa:	2302      	movs	r3, #2
 8002aac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002aae:	f107 0314 	add.w	r3, r7, #20
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	481f      	ldr	r0, [pc, #124]	; (8002b34 <MX_GPIO_Init+0x154>)
 8002ab6:	f00f fbb5 	bl	8012224 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = WARNING_LED_Pin|HEARTBEAT_LED_Pin|OK_LED_Pin;
 8002aba:	23e0      	movs	r3, #224	; 0xe0
 8002abc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aca:	f107 0314 	add.w	r3, r7, #20
 8002ace:	4619      	mov	r1, r3
 8002ad0:	4819      	ldr	r0, [pc, #100]	; (8002b38 <MX_GPIO_Init+0x158>)
 8002ad2:	f00f fba7 	bl	8012224 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LTC_CS_Pin|error_LED_Pin|AMS_error_Pin|IMD_error_Pin;
 8002ad6:	f44f 732c 	mov.w	r3, #688	; 0x2b0
 8002ada:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002adc:	2301      	movs	r3, #1
 8002ade:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ae8:	f107 0314 	add.w	r3, r7, #20
 8002aec:	4619      	mov	r1, r3
 8002aee:	4813      	ldr	r0, [pc, #76]	; (8002b3c <MX_GPIO_Init+0x15c>)
 8002af0:	f00f fb98 	bl	8012224 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SC_probe_Pin|IMD_ok_Pin;
 8002af4:	2306      	movs	r3, #6
 8002af6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002af8:	2300      	movs	r3, #0
 8002afa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002afc:	2300      	movs	r3, #0
 8002afe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b00:	f107 0314 	add.w	r3, r7, #20
 8002b04:	4619      	mov	r1, r3
 8002b06:	480e      	ldr	r0, [pc, #56]	; (8002b40 <MX_GPIO_Init+0x160>)
 8002b08:	f00f fb8c 	bl	8012224 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = AMS_error_latched_Pin|IMD_error_latched_Pin;
 8002b0c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002b10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b12:	2300      	movs	r3, #0
 8002b14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b16:	2300      	movs	r3, #0
 8002b18:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b1a:	f107 0314 	add.w	r3, r7, #20
 8002b1e:	4619      	mov	r1, r3
 8002b20:	4806      	ldr	r0, [pc, #24]	; (8002b3c <MX_GPIO_Init+0x15c>)
 8002b22:	f00f fb7f 	bl	8012224 <HAL_GPIO_Init>

}
 8002b26:	bf00      	nop
 8002b28:	3728      	adds	r7, #40	; 0x28
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	40023800 	.word	0x40023800
 8002b34:	40021000 	.word	0x40021000
 8002b38:	40020000 	.word	0x40020000
 8002b3c:	40020800 	.word	0x40020800
 8002b40:	40020400 	.word	0x40020400

08002b44 <main>:
		sizeof(uint8_t), };

const queue_info start_balance_queue_info = { .element_count = 1,
		.element_size = sizeof(uint8_t), };

int main() {
 8002b44:	b580      	push	{r7, lr}
 8002b46:	af00      	add	r7, sp, #0
	/* INSTRUMENTATE */
	SEGGER_SYSVIEW_Conf();
 8002b48:	f7ff f9c4 	bl	8001ed4 <SEGGER_SYSVIEW_Conf>

	/* RESET PERIPHERALS, ETC. */
	HAL_Init();
 8002b4c:	f00d fd24 	bl	8010598 <HAL_Init>

	/* CONFIGURE SYSTEM CLOCK */
	SystemClock_Config();
 8002b50:	f000 f952 	bl	8002df8 <SystemClock_Config>

	/* INITIALZE PERIPHERALS */
	MX_GPIO_Init();
 8002b54:	f7ff ff44 	bl	80029e0 <MX_GPIO_Init>
	MX_SPI2_Init();
 8002b58:	f001 fa74 	bl	8004044 <MX_SPI2_Init>
	MX_CAN1_Init();
 8002b5c:	f7ff fdf8 	bl	8002750 <MX_CAN1_Init>
	MX_CAN2_Init();
 8002b60:	f7ff fe2e 	bl	80027c0 <MX_CAN2_Init>
	MX_TIM1_Init();
 8002b64:	f001 fc0a 	bl	800437c <MX_TIM1_Init>
	MX_DMA_Init();
 8002b68:	f7ff ff1a 	bl	80029a0 <MX_DMA_Init>
	MX_TIM3_Init();
 8002b6c:	f001 fd42 	bl	80045f4 <MX_TIM3_Init>
	MX_TIM2_Init();
 8002b70:	f001 fca4 	bl	80044bc <MX_TIM2_Init>
	MX_ADC1_Init();
 8002b74:	f7ff fae8 	bl	8002148 <MX_ADC1_Init>

	//initialize_CAN(&hcan1, &hcan2);
	initialize_LTC(&hspi2);
 8002b78:	4870      	ldr	r0, [pc, #448]	; (8002d3c <main+0x1f8>)
 8002b7a:	f000 ff99 	bl	8003ab0 <initialize_LTC>

	/* Initialize kernel */
	osKernelInitialize();
 8002b7e:	f012 fd91 	bl	80156a4 <osKernelInitialize>

	/* INITIALIZE QUEUES */

	GPIO_queue = xQueueCreate(GPIO_queue_info.element_count,
 8002b82:	2301      	movs	r3, #1
 8002b84:	2207      	movs	r2, #7
 8002b86:	4611      	mov	r1, r2
 8002b88:	2200      	movs	r2, #0
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f013 f870 	bl	8015c70 <xQueueGenericCreate>
 8002b90:	4603      	mov	r3, r0
 8002b92:	4a6b      	ldr	r2, [pc, #428]	; (8002d40 <main+0x1fc>)
 8002b94:	6013      	str	r3, [r2, #0]
			GPIO_queue_info.element_size);

	IMD_queue = xQueueCreate(IMD_queue_info.element_count,
 8002b96:	2301      	movs	r3, #1
 8002b98:	2208      	movs	r2, #8
 8002b9a:	4611      	mov	r1, r2
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f013 f866 	bl	8015c70 <xQueueGenericCreate>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	4a67      	ldr	r2, [pc, #412]	; (8002d44 <main+0x200>)
 8002ba8:	6013      	str	r3, [r2, #0]
			IMD_queue_info.element_size);

	temperatures_queue = xQueueCreate(temperatures_queue_info.element_count,
 8002baa:	2301      	movs	r3, #1
 8002bac:	2210      	movs	r2, #16
 8002bae:	4611      	mov	r1, r2
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f013 f85c 	bl	8015c70 <xQueueGenericCreate>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	4a63      	ldr	r2, [pc, #396]	; (8002d48 <main+0x204>)
 8002bbc:	6013      	str	r3, [r2, #0]
			temperatures_queue_info.element_size);

	accumulator_voltage_queue = xQueueCreate(
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	2204      	movs	r2, #4
 8002bc2:	4611      	mov	r1, r2
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f013 f852 	bl	8015c70 <xQueueGenericCreate>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	4a5f      	ldr	r2, [pc, #380]	; (8002d4c <main+0x208>)
 8002bd0:	6013      	str	r3, [r2, #0]
			accumulator_voltage_queue_info.element_count,
			accumulator_voltage_queue_info.element_size);

	vehicle_voltage_queue = xQueueCreate(
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	2204      	movs	r2, #4
 8002bd6:	4611      	mov	r1, r2
 8002bd8:	2200      	movs	r2, #0
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f013 f848 	bl	8015c70 <xQueueGenericCreate>
 8002be0:	4603      	mov	r3, r0
 8002be2:	4a5b      	ldr	r2, [pc, #364]	; (8002d50 <main+0x20c>)
 8002be4:	6013      	str	r3, [r2, #0]
			vehicle_voltage_queue_info.element_count,
			vehicle_voltage_queue_info.element_size);

	accumulator_current_queue = xQueueCreate(
 8002be6:	2301      	movs	r3, #1
 8002be8:	2204      	movs	r2, #4
 8002bea:	4611      	mov	r1, r2
 8002bec:	2200      	movs	r2, #0
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f013 f83e 	bl	8015c70 <xQueueGenericCreate>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	4a57      	ldr	r2, [pc, #348]	; (8002d54 <main+0x210>)
 8002bf8:	6013      	str	r3, [r2, #0]
			accumulator_current_queue_info.element_count,
			accumulator_current_queue_info.element_size);

	cell_voltages_queue = xQueueCreate(cell_voltages_queue_info.element_count,
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	2204      	movs	r2, #4
 8002bfe:	4611      	mov	r1, r2
 8002c00:	2200      	movs	r2, #0
 8002c02:	4618      	mov	r0, r3
 8002c04:	f013 f834 	bl	8015c70 <xQueueGenericCreate>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	4a53      	ldr	r2, [pc, #332]	; (8002d58 <main+0x214>)
 8002c0c:	6013      	str	r3, [r2, #0]
			cell_voltages_queue_info.element_size);

	cell_temperatures_queue = xQueueCreate(
 8002c0e:	2301      	movs	r3, #1
 8002c10:	2204      	movs	r2, #4
 8002c12:	4611      	mov	r1, r2
 8002c14:	2200      	movs	r2, #0
 8002c16:	4618      	mov	r0, r3
 8002c18:	f013 f82a 	bl	8015c70 <xQueueGenericCreate>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	4a4f      	ldr	r2, [pc, #316]	; (8002d5c <main+0x218>)
 8002c20:	6013      	str	r3, [r2, #0]
			cell_temperatures_queue_info.element_count,
			cell_temperatures_queue_info.element_size);

	start_drive_queue = xQueueCreate(start_drive_queue_info.element_count,
 8002c22:	2301      	movs	r3, #1
 8002c24:	2201      	movs	r2, #1
 8002c26:	4611      	mov	r1, r2
 8002c28:	2200      	movs	r2, #0
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f013 f820 	bl	8015c70 <xQueueGenericCreate>
 8002c30:	4603      	mov	r3, r0
 8002c32:	4a4b      	ldr	r2, [pc, #300]	; (8002d60 <main+0x21c>)
 8002c34:	6013      	str	r3, [r2, #0]
			start_drive_queue_info.element_size);

	start_charge_queue = xQueueCreate(start_charge_queue_info.element_count,
 8002c36:	2301      	movs	r3, #1
 8002c38:	2201      	movs	r2, #1
 8002c3a:	4611      	mov	r1, r2
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f013 f816 	bl	8015c70 <xQueueGenericCreate>
 8002c44:	4603      	mov	r3, r0
 8002c46:	4a47      	ldr	r2, [pc, #284]	; (8002d64 <main+0x220>)
 8002c48:	6013      	str	r3, [r2, #0]
			start_charge_queue_info.element_size);

	start_balance_queue = xQueueCreate(start_balance_queue_info.element_count,
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	4611      	mov	r1, r2
 8002c50:	2200      	movs	r2, #0
 8002c52:	4618      	mov	r0, r3
 8002c54:	f013 f80c 	bl	8015c70 <xQueueGenericCreate>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	4a43      	ldr	r2, [pc, #268]	; (8002d68 <main+0x224>)
 8002c5c:	6013      	str	r3, [r2, #0]
			start_balance_queue_info.element_size);

	/* INITIALIZE TASKS */

	first_tick = 0.25 * TICK2HZ + osKernelGetTickCount(); // Wait for segger, etc
 8002c5e:	f012 fd6b 	bl	8015738 <osKernelGetTickCount>
 8002c62:	4603      	mov	r3, r0
 8002c64:	4618      	mov	r0, r3
 8002c66:	f7fd fc3f 	bl	80004e8 <__aeabi_ui2d>
 8002c6a:	f04f 0200 	mov.w	r2, #0
 8002c6e:	4b3f      	ldr	r3, [pc, #252]	; (8002d6c <main+0x228>)
 8002c70:	f7fd fafe 	bl	8000270 <__adddf3>
 8002c74:	4602      	mov	r2, r0
 8002c76:	460b      	mov	r3, r1
 8002c78:	4610      	mov	r0, r2
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	f7fd ff86 	bl	8000b8c <__aeabi_d2uiz>
 8002c80:	4603      	mov	r3, r0
 8002c82:	4a3b      	ldr	r2, [pc, #236]	; (8002d70 <main+0x22c>)
 8002c84:	6013      	str	r3, [r2, #0]

	SM_task_handle = osThreadNew(start_SM_task, NULL, &SM_task_info.attributes);
 8002c86:	4a3b      	ldr	r2, [pc, #236]	; (8002d74 <main+0x230>)
 8002c88:	2100      	movs	r1, #0
 8002c8a:	483b      	ldr	r0, [pc, #236]	; (8002d78 <main+0x234>)
 8002c8c:	f012 fd69 	bl	8015762 <osThreadNew>
 8002c90:	4603      	mov	r3, r0
 8002c92:	4a3a      	ldr	r2, [pc, #232]	; (8002d7c <main+0x238>)
 8002c94:	6013      	str	r3, [r2, #0]

	SIM_task_handle = osThreadNew(start_SIM_task, NULL,
 8002c96:	4a3a      	ldr	r2, [pc, #232]	; (8002d80 <main+0x23c>)
 8002c98:	2100      	movs	r1, #0
 8002c9a:	483a      	ldr	r0, [pc, #232]	; (8002d84 <main+0x240>)
 8002c9c:	f012 fd61 	bl	8015762 <osThreadNew>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	4a39      	ldr	r2, [pc, #228]	; (8002d88 <main+0x244>)
 8002ca4:	6013      	str	r3, [r2, #0]
			&SIM_task_info.attributes);

	CSE_task_handle = osThreadNew(start_CSE_task, NULL,
 8002ca6:	4a39      	ldr	r2, [pc, #228]	; (8002d8c <main+0x248>)
 8002ca8:	2100      	movs	r1, #0
 8002caa:	4839      	ldr	r0, [pc, #228]	; (8002d90 <main+0x24c>)
 8002cac:	f012 fd59 	bl	8015762 <osThreadNew>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	4a38      	ldr	r2, [pc, #224]	; (8002d94 <main+0x250>)
 8002cb4:	6013      	str	r3, [r2, #0]
			&CSE_task_info.attributes);

	IMD_task_handle = osThreadNew(start_IMD_task, NULL,
 8002cb6:	4a38      	ldr	r2, [pc, #224]	; (8002d98 <main+0x254>)
 8002cb8:	2100      	movs	r1, #0
 8002cba:	4838      	ldr	r0, [pc, #224]	; (8002d9c <main+0x258>)
 8002cbc:	f012 fd51 	bl	8015762 <osThreadNew>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	4a37      	ldr	r2, [pc, #220]	; (8002da0 <main+0x25c>)
 8002cc4:	6013      	str	r3, [r2, #0]
			&IMD_task_info.attributes);

	GPIO_task_handle = osThreadNew(start_GPIO_task, NULL,
 8002cc6:	4a37      	ldr	r2, [pc, #220]	; (8002da4 <main+0x260>)
 8002cc8:	2100      	movs	r1, #0
 8002cca:	4837      	ldr	r0, [pc, #220]	; (8002da8 <main+0x264>)
 8002ccc:	f012 fd49 	bl	8015762 <osThreadNew>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	4a36      	ldr	r2, [pc, #216]	; (8002dac <main+0x268>)
 8002cd4:	6013      	str	r3, [r2, #0]
			&GPIO_task_info.attributes);

	ADC_task_handle = osThreadNew(start_ADC_task, NULL,
 8002cd6:	4a36      	ldr	r2, [pc, #216]	; (8002db0 <main+0x26c>)
 8002cd8:	2100      	movs	r1, #0
 8002cda:	4836      	ldr	r0, [pc, #216]	; (8002db4 <main+0x270>)
 8002cdc:	f012 fd41 	bl	8015762 <osThreadNew>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	4a35      	ldr	r2, [pc, #212]	; (8002db8 <main+0x274>)
 8002ce4:	6013      	str	r3, [r2, #0]
			&ADC_task_info.attributes);

	COOL_task_handle = osThreadNew(start_COOL_task, NULL,
 8002ce6:	4a35      	ldr	r2, [pc, #212]	; (8002dbc <main+0x278>)
 8002ce8:	2100      	movs	r1, #0
 8002cea:	4835      	ldr	r0, [pc, #212]	; (8002dc0 <main+0x27c>)
 8002cec:	f012 fd39 	bl	8015762 <osThreadNew>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	4a34      	ldr	r2, [pc, #208]	; (8002dc4 <main+0x280>)
 8002cf4:	6013      	str	r3, [r2, #0]
			&COOL_task_info.attributes);

	CAN_task_handle = osThreadNew(start_CAN_task, NULL,
 8002cf6:	4a34      	ldr	r2, [pc, #208]	; (8002dc8 <main+0x284>)
 8002cf8:	2100      	movs	r1, #0
 8002cfa:	4834      	ldr	r0, [pc, #208]	; (8002dcc <main+0x288>)
 8002cfc:	f012 fd31 	bl	8015762 <osThreadNew>
 8002d00:	4603      	mov	r3, r0
 8002d02:	4a33      	ldr	r2, [pc, #204]	; (8002dd0 <main+0x28c>)
 8002d04:	6013      	str	r3, [r2, #0]
			&CAN_task_info.attributes);

	COM_task_handle = osThreadNew(start_COM_task, NULL,
 8002d06:	4a33      	ldr	r2, [pc, #204]	; (8002dd4 <main+0x290>)
 8002d08:	2100      	movs	r1, #0
 8002d0a:	4833      	ldr	r0, [pc, #204]	; (8002dd8 <main+0x294>)
 8002d0c:	f012 fd29 	bl	8015762 <osThreadNew>
 8002d10:	4603      	mov	r3, r0
 8002d12:	4a32      	ldr	r2, [pc, #200]	; (8002ddc <main+0x298>)
 8002d14:	6013      	str	r3, [r2, #0]
			&COM_task_info.attributes);

	IWDG_task_handle = osThreadNew(start_IWDG_task, NULL,
 8002d16:	4a32      	ldr	r2, [pc, #200]	; (8002de0 <main+0x29c>)
 8002d18:	2100      	movs	r1, #0
 8002d1a:	4832      	ldr	r0, [pc, #200]	; (8002de4 <main+0x2a0>)
 8002d1c:	f012 fd21 	bl	8015762 <osThreadNew>
 8002d20:	4603      	mov	r3, r0
 8002d22:	4a31      	ldr	r2, [pc, #196]	; (8002de8 <main+0x2a4>)
 8002d24:	6013      	str	r3, [r2, #0]
			&IWDG_task_info.attributes);

	event_handler_task_handle = osThreadNew(start_event_handler_task, NULL,
 8002d26:	4a31      	ldr	r2, [pc, #196]	; (8002dec <main+0x2a8>)
 8002d28:	2100      	movs	r1, #0
 8002d2a:	4831      	ldr	r0, [pc, #196]	; (8002df0 <main+0x2ac>)
 8002d2c:	f012 fd19 	bl	8015762 <osThreadNew>
 8002d30:	4603      	mov	r3, r0
 8002d32:	4a30      	ldr	r2, [pc, #192]	; (8002df4 <main+0x2b0>)
 8002d34:	6013      	str	r3, [r2, #0]
			&event_handler_task_info.attributes);

	/* Launch RTOS ! */
	osKernelStart();
 8002d36:	f012 fcd9 	bl	80156ec <osKernelStart>

	for (;;)
 8002d3a:	e7fe      	b.n	8002d3a <main+0x1f6>
 8002d3c:	2001bc58 	.word	0x2001bc58
 8002d40:	2001b58c 	.word	0x2001b58c
 8002d44:	2001b57c 	.word	0x2001b57c
 8002d48:	2001b578 	.word	0x2001b578
 8002d4c:	2001b590 	.word	0x2001b590
 8002d50:	2001b588 	.word	0x2001b588
 8002d54:	2001b598 	.word	0x2001b598
 8002d58:	2001b570 	.word	0x2001b570
 8002d5c:	2001b584 	.word	0x2001b584
 8002d60:	2001b574 	.word	0x2001b574
 8002d64:	2001b580 	.word	0x2001b580
 8002d68:	2001b594 	.word	0x2001b594
 8002d6c:	406f4000 	.word	0x406f4000
 8002d70:	2001b790 	.word	0x2001b790
 8002d74:	0801aae4 	.word	0x0801aae4
 8002d78:	08002ecd 	.word	0x08002ecd
 8002d7c:	2001b6e8 	.word	0x2001b6e8
 8002d80:	0801ab14 	.word	0x0801ab14
 8002d84:	080036fd 	.word	0x080036fd
 8002d88:	2001b77c 	.word	0x2001b77c
 8002d8c:	0801ab74 	.word	0x0801ab74
 8002d90:	08003575 	.word	0x08003575
 8002d94:	2001b784 	.word	0x2001b784
 8002d98:	0801ac64 	.word	0x0801ac64
 8002d9c:	0800311d 	.word	0x0800311d
 8002da0:	2001b798 	.word	0x2001b798
 8002da4:	0801ac34 	.word	0x0801ac34
 8002da8:	080031c9 	.word	0x080031c9
 8002dac:	2001b6e4 	.word	0x2001b6e4
 8002db0:	0801ac04 	.word	0x0801ac04
 8002db4:	08003285 	.word	0x08003285
 8002db8:	2001b788 	.word	0x2001b788
 8002dbc:	0801ab44 	.word	0x0801ab44
 8002dc0:	0800360d 	.word	0x0800360d
 8002dc4:	2001b780 	.word	0x2001b780
 8002dc8:	0801aba4 	.word	0x0801aba4
 8002dcc:	08003505 	.word	0x08003505
 8002dd0:	2001b78c 	.word	0x2001b78c
 8002dd4:	0801abd4 	.word	0x0801abd4
 8002dd8:	08003341 	.word	0x08003341
 8002ddc:	2001b6a4 	.word	0x2001b6a4
 8002de0:	0801acc4 	.word	0x0801acc4
 8002de4:	08003035 	.word	0x08003035
 8002de8:	2001b794 	.word	0x2001b794
 8002dec:	0801ac94 	.word	0x0801ac94
 8002df0:	080030ad 	.word	0x080030ad
 8002df4:	2001b6a0 	.word	0x2001b6a0

08002df8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b094      	sub	sp, #80	; 0x50
 8002dfc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002dfe:	f107 0320 	add.w	r3, r7, #32
 8002e02:	2230      	movs	r2, #48	; 0x30
 8002e04:	2100      	movs	r1, #0
 8002e06:	4618      	mov	r0, r3
 8002e08:	f016 ffc6 	bl	8019d98 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002e0c:	f107 030c 	add.w	r3, r7, #12
 8002e10:	2200      	movs	r2, #0
 8002e12:	601a      	str	r2, [r3, #0]
 8002e14:	605a      	str	r2, [r3, #4]
 8002e16:	609a      	str	r2, [r3, #8]
 8002e18:	60da      	str	r2, [r3, #12]
 8002e1a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	60bb      	str	r3, [r7, #8]
 8002e20:	4b28      	ldr	r3, [pc, #160]	; (8002ec4 <SystemClock_Config+0xcc>)
 8002e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e24:	4a27      	ldr	r2, [pc, #156]	; (8002ec4 <SystemClock_Config+0xcc>)
 8002e26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e2a:	6413      	str	r3, [r2, #64]	; 0x40
 8002e2c:	4b25      	ldr	r3, [pc, #148]	; (8002ec4 <SystemClock_Config+0xcc>)
 8002e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e34:	60bb      	str	r3, [r7, #8]
 8002e36:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e38:	2300      	movs	r3, #0
 8002e3a:	607b      	str	r3, [r7, #4]
 8002e3c:	4b22      	ldr	r3, [pc, #136]	; (8002ec8 <SystemClock_Config+0xd0>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a21      	ldr	r2, [pc, #132]	; (8002ec8 <SystemClock_Config+0xd0>)
 8002e42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e46:	6013      	str	r3, [r2, #0]
 8002e48:	4b1f      	ldr	r3, [pc, #124]	; (8002ec8 <SystemClock_Config+0xd0>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e50:	607b      	str	r3, [r7, #4]
 8002e52:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 8002e54:	230a      	movs	r3, #10
 8002e56:	623b      	str	r3, [r7, #32]
			| RCC_OSCILLATORTYPE_LSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002e5c:	2310      	movs	r3, #16
 8002e5e:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002e60:	2301      	movs	r3, #1
 8002e62:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e64:	2302      	movs	r3, #2
 8002e66:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8002e6c:	2308      	movs	r3, #8
 8002e6e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 84;
 8002e70:	2354      	movs	r3, #84	; 0x54
 8002e72:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002e74:	2302      	movs	r3, #2
 8002e76:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8002e78:	2304      	movs	r3, #4
 8002e7a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002e7c:	f107 0320 	add.w	r3, r7, #32
 8002e80:	4618      	mov	r0, r3
 8002e82:	f00f fb95 	bl	80125b0 <HAL_RCC_OscConfig>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d001      	beq.n	8002e90 <SystemClock_Config+0x98>
		Error_Handler();
 8002e8c:	f000 fd30 	bl	80038f0 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002e90:	230f      	movs	r3, #15
 8002e92:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002e94:	2302      	movs	r3, #2
 8002e96:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002e9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ea0:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8002ea6:	f107 030c 	add.w	r3, r7, #12
 8002eaa:	2102      	movs	r1, #2
 8002eac:	4618      	mov	r0, r3
 8002eae:	f00f fdf7 	bl	8012aa0 <HAL_RCC_ClockConfig>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d001      	beq.n	8002ebc <SystemClock_Config+0xc4>
		Error_Handler();
 8002eb8:	f000 fd1a 	bl	80038f0 <Error_Handler>
	}
}
 8002ebc:	bf00      	nop
 8002ebe:	3750      	adds	r7, #80	; 0x50
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	40023800 	.word	0x40023800
 8002ec8:	40007000 	.word	0x40007000

08002ecc <start_SM_task>:
uint8_t vv;
uint8_t av;
uint16_t state;

/* ENTER TASKS */
void start_SM_task(void *argument) {
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b086      	sub	sp, #24
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
	SEGGER_SYSVIEW_Start();
 8002ed4:	f016 fa08 	bl	80192e8 <SEGGER_SYSVIEW_Start>

	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 8002ed8:	4b45      	ldr	r3, [pc, #276]	; (8002ff0 <start_SM_task+0x124>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	617b      	str	r3, [r7, #20]
	uint32_t tick_increment = TICK2HZ * SM_task_info.periodicity;
 8002ede:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8002ff4 <start_SM_task+0x128>
 8002ee2:	eddf 7a45 	vldr	s15, [pc, #276]	; 8002ff8 <start_SM_task+0x12c>
 8002ee6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002eea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002eee:	ee17 3a90 	vmov	r3, s15
 8002ef2:	613b      	str	r3, [r7, #16]

	/* Make task-specific structures */
	ams_parameters.Ts_f32 = SM_task_info.periodicity;
 8002ef4:	4a41      	ldr	r2, [pc, #260]	; (8002ffc <start_SM_task+0x130>)
 8002ef6:	4b42      	ldr	r3, [pc, #264]	; (8003000 <start_SM_task+0x134>)
 8002ef8:	605a      	str	r2, [r3, #4]
	double *cell_voltages;

	xQueueReceive(start_drive_queue, &ams_inputs.drive_u8, 0);
 8002efa:	4b42      	ldr	r3, [pc, #264]	; (8003004 <start_SM_task+0x138>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	2200      	movs	r2, #0
 8002f00:	4941      	ldr	r1, [pc, #260]	; (8003008 <start_SM_task+0x13c>)
 8002f02:	4618      	mov	r0, r3
 8002f04:	f013 f8ee 	bl	80160e4 <xQueueReceive>
	xQueueReceive(start_charge_queue, &ams_inputs.charge_u8, 0);
 8002f08:	4b40      	ldr	r3, [pc, #256]	; (800300c <start_SM_task+0x140>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	4940      	ldr	r1, [pc, #256]	; (8003010 <start_SM_task+0x144>)
 8002f10:	4618      	mov	r0, r3
 8002f12:	f013 f8e7 	bl	80160e4 <xQueueReceive>
	xQueueReceive(start_balance_queue, &ams_inputs.balance_u8, 0);
 8002f16:	4b3f      	ldr	r3, [pc, #252]	; (8003014 <start_SM_task+0x148>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	493e      	ldr	r1, [pc, #248]	; (8003018 <start_SM_task+0x14c>)
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f013 f8e0 	bl	80160e4 <xQueueReceive>

	/* Wait until offset */
	next_tick += TICK2HZ * SM_task_info.offset;
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	ee07 3a90 	vmov	s15, r3
 8002f2a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002f2e:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800301c <start_SM_task+0x150>
 8002f32:	eddf 7a31 	vldr	s15, [pc, #196]	; 8002ff8 <start_SM_task+0x12c>
 8002f36:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f42:	ee17 3a90 	vmov	r3, s15
 8002f46:	617b      	str	r3, [r7, #20]
	osDelayUntil(next_tick);
 8002f48:	6978      	ldr	r0, [r7, #20]
 8002f4a:	f012 fc9c 	bl	8015886 <osDelayUntil>

	for (;;) {
		/* Enter periodic behaviour */
		xQueueReceive(cell_voltages_queue, &cell_voltages, 0);
 8002f4e:	4b34      	ldr	r3, [pc, #208]	; (8003020 <start_SM_task+0x154>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f107 010c 	add.w	r1, r7, #12
 8002f56:	2200      	movs	r2, #0
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f013 f8c3 	bl	80160e4 <xQueueReceive>

		ams_inputs.AIR_minus_closed_u8 = get_air_minus_ext();
 8002f5e:	f000 fd05 	bl	800396c <get_air_minus_ext>
 8002f62:	4603      	mov	r3, r0
 8002f64:	461a      	mov	r2, r3
 8002f66:	4b2f      	ldr	r3, [pc, #188]	; (8003024 <start_SM_task+0x158>)
 8002f68:	721a      	strb	r2, [r3, #8]
		ams_inputs.AIR_plus_closed_u8 = get_air_plus_ext();
 8002f6a:	f000 fcdb 	bl	8003924 <get_air_plus_ext>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	461a      	mov	r2, r3
 8002f72:	4b2c      	ldr	r3, [pc, #176]	; (8003024 <start_SM_task+0x158>)
 8002f74:	72da      	strb	r2, [r3, #11]
		ams_inputs.precharge_closed_u8 = get_precharge_ext();
 8002f76:	f000 fd1d 	bl	80039b4 <get_precharge_ext>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	4b29      	ldr	r3, [pc, #164]	; (8003024 <start_SM_task+0x158>)
 8002f80:	765a      	strb	r2, [r3, #25]
		ams_inputs.SC_u8 = get_sc_probe_ext();
 8002f82:	f000 fd3f 	bl	8003a04 <get_sc_probe_ext>
 8002f86:	4603      	mov	r3, r0
 8002f88:	461a      	mov	r2, r3
 8002f8a:	4b26      	ldr	r3, [pc, #152]	; (8003024 <start_SM_task+0x158>)
 8002f8c:	769a      	strb	r2, [r3, #26]
		ams_inputs.accumulator_voltage_f64 = SIM0_Y.accumulator_voltage;
 8002f8e:	4b26      	ldr	r3, [pc, #152]	; (8003028 <start_SM_task+0x15c>)
 8002f90:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002f94:	4923      	ldr	r1, [pc, #140]	; (8003024 <start_SM_task+0x158>)
 8002f96:	e9c1 2308 	strd	r2, r3, [r1, #32]
		ams_inputs.vehicle_voltage_f64 = SIM0_Y.vehicle_voltage;
 8002f9a:	4b23      	ldr	r3, [pc, #140]	; (8003028 <start_SM_task+0x15c>)
 8002f9c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002fa0:	4920      	ldr	r1, [pc, #128]	; (8003024 <start_SM_task+0x158>)
 8002fa2:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		ams_inputs.drive_u8 = 0;
 8002fa6:	4b1f      	ldr	r3, [pc, #124]	; (8003024 <start_SM_task+0x158>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	725a      	strb	r2, [r3, #9]
		ams_inputs.charge_u8 = 1;
 8002fac:	4b1d      	ldr	r3, [pc, #116]	; (8003024 <start_SM_task+0x158>)
 8002fae:	2201      	movs	r2, #1
 8002fb0:	761a      	strb	r2, [r3, #24]
		ams_inputs.charger_is_live_u8 = 1;
 8002fb2:	4b1c      	ldr	r3, [pc, #112]	; (8003024 <start_SM_task+0x158>)
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	771a      	strb	r2, [r3, #28]
		ams(&state);
 8002fb8:	481c      	ldr	r0, [pc, #112]	; (800302c <start_SM_task+0x160>)
 8002fba:	f00d fa6f 	bl	801049c <ams>
		set_air_minus_ext(ams_outputs.enable_AIR_minus_u8);
 8002fbe:	4b1c      	ldr	r3, [pc, #112]	; (8003030 <start_SM_task+0x164>)
 8002fc0:	785b      	ldrb	r3, [r3, #1]
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f000 fcbe 	bl	8003944 <set_air_minus_ext>
		set_air_plus_ext(ams_outputs.enable_AIR_plus_u8);
 8002fc8:	4b19      	ldr	r3, [pc, #100]	; (8003030 <start_SM_task+0x164>)
 8002fca:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f000 fc94 	bl	80038fc <set_air_plus_ext>
		set_precharge_ext(ams_outputs.enable_precharge_u8);
 8002fd4:	4b16      	ldr	r3, [pc, #88]	; (8003030 <start_SM_task+0x164>)
 8002fd6:	789b      	ldrb	r3, [r3, #2]
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f000 fcd7 	bl	800398c <set_precharge_ext>

		/* Wait until next period */
		next_tick += tick_increment;
 8002fde:	697a      	ldr	r2, [r7, #20]
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	4413      	add	r3, r2
 8002fe4:	617b      	str	r3, [r7, #20]
		osDelayUntil(next_tick);
 8002fe6:	6978      	ldr	r0, [r7, #20]
 8002fe8:	f012 fc4d 	bl	8015886 <osDelayUntil>
		xQueueReceive(cell_voltages_queue, &cell_voltages, 0);
 8002fec:	e7af      	b.n	8002f4e <start_SM_task+0x82>
 8002fee:	bf00      	nop
 8002ff0:	2001b790 	.word	0x2001b790
 8002ff4:	3f4ccccd 	.word	0x3f4ccccd
 8002ff8:	447a0000 	.word	0x447a0000
 8002ffc:	3f4ccccd 	.word	0x3f4ccccd
 8003000:	2001b6ec 	.word	0x2001b6ec
 8003004:	2001b574 	.word	0x2001b574
 8003008:	2001b6b9 	.word	0x2001b6b9
 800300c:	2001b580 	.word	0x2001b580
 8003010:	2001b6c8 	.word	0x2001b6c8
 8003014:	2001b594 	.word	0x2001b594
 8003018:	2001b6ba 	.word	0x2001b6ba
 800301c:	00000000 	.word	0x00000000
 8003020:	2001b570 	.word	0x2001b570
 8003024:	2001b6b0 	.word	0x2001b6b0
 8003028:	2001d6b0 	.word	0x2001d6b0
 800302c:	2001b6e2 	.word	0x2001b6e2
 8003030:	2001b6f4 	.word	0x2001b6f4

08003034 <start_IWDG_task>:
	}
}

void start_IWDG_task(void *argument) {
 8003034:	b580      	push	{r7, lr}
 8003036:	b084      	sub	sp, #16
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 800303c:	4b16      	ldr	r3, [pc, #88]	; (8003098 <start_IWDG_task+0x64>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	60fb      	str	r3, [r7, #12]
	uint32_t tick_increment = TICK2HZ * IWDG_task_info.periodicity;
 8003042:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800309c <start_IWDG_task+0x68>
 8003046:	eddf 7a16 	vldr	s15, [pc, #88]	; 80030a0 <start_IWDG_task+0x6c>
 800304a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800304e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003052:	ee17 3a90 	vmov	r3, s15
 8003056:	60bb      	str	r3, [r7, #8]

	/* Make task-specific structures */

	/* Wait until offset */
	next_tick += TICK2HZ * IWDG_task_info.offset;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	ee07 3a90 	vmov	s15, r3
 800305e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003062:	eddf 6a10 	vldr	s13, [pc, #64]	; 80030a4 <start_IWDG_task+0x70>
 8003066:	eddf 7a0e 	vldr	s15, [pc, #56]	; 80030a0 <start_IWDG_task+0x6c>
 800306a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800306e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003072:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003076:	ee17 3a90 	vmov	r3, s15
 800307a:	60fb      	str	r3, [r7, #12]
	osDelayUntil(next_tick);
 800307c:	68f8      	ldr	r0, [r7, #12]
 800307e:	f012 fc02 	bl	8015886 <osDelayUntil>

	//initialize_IWDG(&hiwdg, IWDG_task_info.periodicity);

	for (;;) {
		/* Enter periodic behaviour */
		HAL_IWDG_Refresh(&hiwdg);
 8003082:	4809      	ldr	r0, [pc, #36]	; (80030a8 <start_IWDG_task+0x74>)
 8003084:	f00f fa83 	bl	801258e <HAL_IWDG_Refresh>

		/* Wait until next period */
		next_tick += tick_increment;
 8003088:	68fa      	ldr	r2, [r7, #12]
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	4413      	add	r3, r2
 800308e:	60fb      	str	r3, [r7, #12]
		osDelayUntil(next_tick);
 8003090:	68f8      	ldr	r0, [r7, #12]
 8003092:	f012 fbf8 	bl	8015886 <osDelayUntil>
		HAL_IWDG_Refresh(&hiwdg);
 8003096:	e7f4      	b.n	8003082 <start_IWDG_task+0x4e>
 8003098:	2001b790 	.word	0x2001b790
 800309c:	3f4ccccd 	.word	0x3f4ccccd
 80030a0:	447a0000 	.word	0x447a0000
 80030a4:	00000000 	.word	0x00000000
 80030a8:	2001b694 	.word	0x2001b694

080030ac <start_event_handler_task>:
	}
}

void start_event_handler_task(void *argument) {
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b084      	sub	sp, #16
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 80030b4:	4b15      	ldr	r3, [pc, #84]	; (800310c <start_event_handler_task+0x60>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	60fb      	str	r3, [r7, #12]
	uint32_t tick_increment = TICK2HZ * event_handler_task_info.periodicity;
 80030ba:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8003110 <start_event_handler_task+0x64>
 80030be:	eddf 7a15 	vldr	s15, [pc, #84]	; 8003114 <start_event_handler_task+0x68>
 80030c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80030ca:	ee17 3a90 	vmov	r3, s15
 80030ce:	60bb      	str	r3, [r7, #8]

	/* Make task-specific structures */

	/* Wait until offset */
	next_tick += TICK2HZ * event_handler_task_info.offset;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	ee07 3a90 	vmov	s15, r3
 80030d6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80030da:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8003118 <start_event_handler_task+0x6c>
 80030de:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8003114 <start_event_handler_task+0x68>
 80030e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80030ee:	ee17 3a90 	vmov	r3, s15
 80030f2:	60fb      	str	r3, [r7, #12]
	osDelayUntil(next_tick);
 80030f4:	68f8      	ldr	r0, [r7, #12]
 80030f6:	f012 fbc6 	bl	8015886 <osDelayUntil>

	for (;;) {
		/* Enter periodic behaviour */

		/* Wait until next period */
		next_tick += tick_increment;
 80030fa:	68fa      	ldr	r2, [r7, #12]
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	4413      	add	r3, r2
 8003100:	60fb      	str	r3, [r7, #12]
		osDelayUntil(next_tick);
 8003102:	68f8      	ldr	r0, [r7, #12]
 8003104:	f012 fbbf 	bl	8015886 <osDelayUntil>
		next_tick += tick_increment;
 8003108:	e7f7      	b.n	80030fa <start_event_handler_task+0x4e>
 800310a:	bf00      	nop
 800310c:	2001b790 	.word	0x2001b790
 8003110:	3f4ccccd 	.word	0x3f4ccccd
 8003114:	447a0000 	.word	0x447a0000
 8003118:	00000000 	.word	0x00000000

0800311c <start_IMD_task>:
	}
}

void start_IMD_task(void *argument) {
 800311c:	b580      	push	{r7, lr}
 800311e:	b088      	sub	sp, #32
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 8003124:	4b22      	ldr	r3, [pc, #136]	; (80031b0 <start_IMD_task+0x94>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	61fb      	str	r3, [r7, #28]
	uint32_t tick_increment = TICK2HZ * IMD_task_info.periodicity;
 800312a:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80031b4 <start_IMD_task+0x98>
 800312e:	eddf 7a22 	vldr	s15, [pc, #136]	; 80031b8 <start_IMD_task+0x9c>
 8003132:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003136:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800313a:	ee17 3a90 	vmov	r3, s15
 800313e:	61bb      	str	r3, [r7, #24]

	/* Make task-specific structures */
	IMD_t IMD;
	initialize_IMD(&htim2);
 8003140:	481e      	ldr	r0, [pc, #120]	; (80031bc <start_IMD_task+0xa0>)
 8003142:	f7fe fde5 	bl	8001d10 <initialize_IMD>

	/* Wait until offset */
	next_tick += TICK2HZ * IMD_task_info.offset;
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	ee07 3a90 	vmov	s15, r3
 800314c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003150:	eddf 6a1b 	vldr	s13, [pc, #108]	; 80031c0 <start_IMD_task+0xa4>
 8003154:	eddf 7a18 	vldr	s15, [pc, #96]	; 80031b8 <start_IMD_task+0x9c>
 8003158:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800315c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003160:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003164:	ee17 3a90 	vmov	r3, s15
 8003168:	61fb      	str	r3, [r7, #28]
	osDelayUntil(next_tick);
 800316a:	69f8      	ldr	r0, [r7, #28]
 800316c:	f012 fb8b 	bl	8015886 <osDelayUntil>

	for (;;) {
		/* Enter periodic behaviour */

		if (xQueueReceive(IMD_queue, &IMD, 0)) {
 8003170:	4b14      	ldr	r3, [pc, #80]	; (80031c4 <start_IMD_task+0xa8>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f107 010c 	add.w	r1, r7, #12
 8003178:	2200      	movs	r2, #0
 800317a:	4618      	mov	r0, r3
 800317c:	f012 ffb2 	bl	80160e4 <xQueueReceive>
 8003180:	4603      	mov	r3, r0
 8003182:	2b00      	cmp	r3, #0
 8003184:	d00b      	beq.n	800319e <start_IMD_task+0x82>
			uint8_t frequency_range = (uint8_t) (IMD.frequency / 10);
 8003186:	ed97 7a04 	vldr	s14, [r7, #16]
 800318a:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800318e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003192:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003196:	edc7 7a00 	vstr	s15, [r7]
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	75fb      	strb	r3, [r7, #23]

		}

		/* Wait until next period */
		next_tick += tick_increment;
 800319e:	69fa      	ldr	r2, [r7, #28]
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	4413      	add	r3, r2
 80031a4:	61fb      	str	r3, [r7, #28]
		osDelayUntil(next_tick);
 80031a6:	69f8      	ldr	r0, [r7, #28]
 80031a8:	f012 fb6d 	bl	8015886 <osDelayUntil>
		if (xQueueReceive(IMD_queue, &IMD, 0)) {
 80031ac:	e7e0      	b.n	8003170 <start_IMD_task+0x54>
 80031ae:	bf00      	nop
 80031b0:	2001b790 	.word	0x2001b790
 80031b4:	3f4ccccd 	.word	0x3f4ccccd
 80031b8:	447a0000 	.word	0x447a0000
 80031bc:	2001bd88 	.word	0x2001bd88
 80031c0:	00000000 	.word	0x00000000
 80031c4:	2001b57c 	.word	0x2001b57c

080031c8 <start_GPIO_task>:
	}
}

void start_GPIO_task(void *argument) {
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b086      	sub	sp, #24
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 80031d0:	4b27      	ldr	r3, [pc, #156]	; (8003270 <start_GPIO_task+0xa8>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	617b      	str	r3, [r7, #20]
	uint32_t tick_increment = TICK2HZ * GPIO_task_info.periodicity;
 80031d6:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8003274 <start_GPIO_task+0xac>
 80031da:	eddf 7a27 	vldr	s15, [pc, #156]	; 8003278 <start_GPIO_task+0xb0>
 80031de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031e6:	ee17 3a90 	vmov	r3, s15
 80031ea:	613b      	str	r3, [r7, #16]

	/* Make task-specific structures */
	GPIO_t GPIO;

	/* Wait until offset */
	next_tick += TICK2HZ * GPIO_task_info.offset;
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	ee07 3a90 	vmov	s15, r3
 80031f2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80031f6:	eddf 6a21 	vldr	s13, [pc, #132]	; 800327c <start_GPIO_task+0xb4>
 80031fa:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8003278 <start_GPIO_task+0xb0>
 80031fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003202:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003206:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800320a:	ee17 3a90 	vmov	r3, s15
 800320e:	617b      	str	r3, [r7, #20]
	osDelayUntil(next_tick);
 8003210:	6978      	ldr	r0, [r7, #20]
 8003212:	f012 fb38 	bl	8015886 <osDelayUntil>

	for (;;) {
		/* Enter periodic behaviour */
		GPIO.AMS_error_latched = get_ams_error_latched_ext();
 8003216:	f000 fbdd 	bl	80039d4 <get_ams_error_latched_ext>
 800321a:	4603      	mov	r3, r0
 800321c:	723b      	strb	r3, [r7, #8]
		GPIO.IMD_error_latched = get_imd_error_latched_ext();
 800321e:	f000 fbe5 	bl	80039ec <get_imd_error_latched_ext>
 8003222:	4603      	mov	r3, r0
 8003224:	727b      	strb	r3, [r7, #9]
		GPIO.SC_probe = get_sc_probe_ext();
 8003226:	f000 fbed 	bl	8003a04 <get_sc_probe_ext>
 800322a:	4603      	mov	r3, r0
 800322c:	72bb      	strb	r3, [r7, #10]
		GPIO.IMD_ok = get_imd_ok_ext();
 800322e:	f000 fbf9 	bl	8003a24 <get_imd_ok_ext>
 8003232:	4603      	mov	r3, r0
 8003234:	72fb      	strb	r3, [r7, #11]
		GPIO.AIR_plus_closed = get_air_plus_ext();
 8003236:	f000 fb75 	bl	8003924 <get_air_plus_ext>
 800323a:	4603      	mov	r3, r0
 800323c:	733b      	strb	r3, [r7, #12]
		GPIO.AIR_minus_closed = get_air_minus_ext();
 800323e:	f000 fb95 	bl	800396c <get_air_minus_ext>
 8003242:	4603      	mov	r3, r0
 8003244:	737b      	strb	r3, [r7, #13]
		GPIO.precharge_closed = get_precharge_ext();
 8003246:	f000 fbb5 	bl	80039b4 <get_precharge_ext>
 800324a:	4603      	mov	r3, r0
 800324c:	73bb      	strb	r3, [r7, #14]

		xQueueOverwrite(GPIO_queue, &GPIO);
 800324e:	4b0c      	ldr	r3, [pc, #48]	; (8003280 <start_GPIO_task+0xb8>)
 8003250:	6818      	ldr	r0, [r3, #0]
 8003252:	f107 0108 	add.w	r1, r7, #8
 8003256:	2302      	movs	r3, #2
 8003258:	2200      	movs	r2, #0
 800325a:	f012 fd6d 	bl	8015d38 <xQueueGenericSend>

		/* Wait until next period */
		next_tick += tick_increment;
 800325e:	697a      	ldr	r2, [r7, #20]
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	4413      	add	r3, r2
 8003264:	617b      	str	r3, [r7, #20]
		osDelayUntil(next_tick);
 8003266:	6978      	ldr	r0, [r7, #20]
 8003268:	f012 fb0d 	bl	8015886 <osDelayUntil>
		GPIO.AMS_error_latched = get_ams_error_latched_ext();
 800326c:	e7d3      	b.n	8003216 <start_GPIO_task+0x4e>
 800326e:	bf00      	nop
 8003270:	2001b790 	.word	0x2001b790
 8003274:	3f4ccccd 	.word	0x3f4ccccd
 8003278:	447a0000 	.word	0x447a0000
 800327c:	00000000 	.word	0x00000000
 8003280:	2001b58c 	.word	0x2001b58c

08003284 <start_ADC_task>:
	}
}

void start_ADC_task(void *argument) {
 8003284:	b580      	push	{r7, lr}
 8003286:	b0a8      	sub	sp, #160	; 0xa0
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 800328c:	4b26      	ldr	r3, [pc, #152]	; (8003328 <start_ADC_task+0xa4>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	uint32_t tick_increment = TICK2HZ * ADC_task_info.periodicity;
 8003294:	ed9f 7a25 	vldr	s14, [pc, #148]	; 800332c <start_ADC_task+0xa8>
 8003298:	eddf 7a25 	vldr	s15, [pc, #148]	; 8003330 <start_ADC_task+0xac>
 800329c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80032a4:	ee17 3a90 	vmov	r3, s15
 80032a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

	/* Make task-specific structures */
	uint16_t adc_readings[4 * 16];
	ADC_initialize(&htim3);
 80032ac:	4821      	ldr	r0, [pc, #132]	; (8003334 <start_ADC_task+0xb0>)
 80032ae:	f7ff fa0f 	bl	80026d0 <ADC_initialize>
	temperatures_t temperatures;

	/* Wait until offset */
	next_tick += TICK2HZ * ADC_task_info.offset;
 80032b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80032b6:	ee07 3a90 	vmov	s15, r3
 80032ba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80032be:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8003338 <start_ADC_task+0xb4>
 80032c2:	eddf 7a1b 	vldr	s15, [pc, #108]	; 8003330 <start_ADC_task+0xac>
 80032c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80032d2:	ee17 3a90 	vmov	r3, s15
 80032d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	osDelayUntil(next_tick);
 80032da:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80032de:	f012 fad2 	bl	8015886 <osDelayUntil>

	for (;;) {
		/* Enter periodic behaviour */
		ADC_step((uint32_t*) &adc_readings, sizeof((uint32_t*) adc_readings));
 80032e2:	f107 0318 	add.w	r3, r7, #24
 80032e6:	2104      	movs	r1, #4
 80032e8:	4618      	mov	r0, r3
 80032ea:	f7ff fa05 	bl	80026f8 <ADC_step>
		interpret_ADC_buffer(&temperatures, adc_readings, 16);
 80032ee:	f107 0118 	add.w	r1, r7, #24
 80032f2:	f107 0308 	add.w	r3, r7, #8
 80032f6:	2210      	movs	r2, #16
 80032f8:	4618      	mov	r0, r3
 80032fa:	f7ff f821 	bl	8002340 <interpret_ADC_buffer>

		xQueueOverwrite(temperatures_queue, &temperatures);
 80032fe:	4b0f      	ldr	r3, [pc, #60]	; (800333c <start_ADC_task+0xb8>)
 8003300:	6818      	ldr	r0, [r3, #0]
 8003302:	f107 0108 	add.w	r1, r7, #8
 8003306:	2302      	movs	r3, #2
 8003308:	2200      	movs	r2, #0
 800330a:	f012 fd15 	bl	8015d38 <xQueueGenericSend>

		/* Wait until next period */
		next_tick += tick_increment;
 800330e:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8003312:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003316:	4413      	add	r3, r2
 8003318:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		osDelayUntil(next_tick);
 800331c:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8003320:	f012 fab1 	bl	8015886 <osDelayUntil>
		ADC_step((uint32_t*) &adc_readings, sizeof((uint32_t*) adc_readings));
 8003324:	e7dd      	b.n	80032e2 <start_ADC_task+0x5e>
 8003326:	bf00      	nop
 8003328:	2001b790 	.word	0x2001b790
 800332c:	3f4ccccd 	.word	0x3f4ccccd
 8003330:	447a0000 	.word	0x447a0000
 8003334:	2001bcf8 	.word	0x2001bcf8
 8003338:	00000000 	.word	0x00000000
 800333c:	2001b578 	.word	0x2001b578

08003340 <start_COM_task>:
	}
}

void start_COM_task(void *argument) {
 8003340:	b580      	push	{r7, lr}
 8003342:	b090      	sub	sp, #64	; 0x40
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 8003348:	4b64      	ldr	r3, [pc, #400]	; (80034dc <start_COM_task+0x19c>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t tick_increment = TICK2HZ * COM_task_info.periodicity;
 800334e:	ed9f 7a64 	vldr	s14, [pc, #400]	; 80034e0 <start_COM_task+0x1a0>
 8003352:	eddf 7a64 	vldr	s15, [pc, #400]	; 80034e4 <start_COM_task+0x1a4>
 8003356:	ee67 7a27 	vmul.f32	s15, s14, s15
 800335a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800335e:	ee17 3a90 	vmov	r3, s15
 8003362:	633b      	str	r3, [r7, #48]	; 0x30

	/* Make task-specific structures */
	const float voltage_time_constraint = 0.5;
 8003364:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8003368:	62fb      	str	r3, [r7, #44]	; 0x2c
	const float temperature_time_constraint = 1.0;
 800336a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800336e:	62bb      	str	r3, [r7, #40]	; 0x28
	const float current_time_constraint = 0.5;
 8003370:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8003374:	627b      	str	r3, [r7, #36]	; 0x24
	const float valid_data_time_constraint = 5.0;
 8003376:	4b5c      	ldr	r3, [pc, #368]	; (80034e8 <start_COM_task+0x1a8>)
 8003378:	623b      	str	r3, [r7, #32]

	uint16_t voltage_sample_constraint = (voltage_time_constraint
			/ COM_task_info.periodicity);
 800337a:	eddf 6a59 	vldr	s13, [pc, #356]	; 80034e0 <start_COM_task+0x1a0>
 800337e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8003382:	eec7 7a26 	vdiv.f32	s15, s14, s13
	uint16_t voltage_sample_constraint = (voltage_time_constraint
 8003386:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800338a:	ee17 3a90 	vmov	r3, s15
 800338e:	877b      	strh	r3, [r7, #58]	; 0x3a
	if (voltage_sample_constraint < 1) {
 8003390:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003392:	2b00      	cmp	r3, #0
 8003394:	d101      	bne.n	800339a <start_COM_task+0x5a>
		voltage_sample_constraint = 1;
 8003396:	2301      	movs	r3, #1
 8003398:	877b      	strh	r3, [r7, #58]	; 0x3a
	}

	uint16_t temperature_sample_constraint = (temperature_time_constraint
			/ COM_task_info.periodicity);
 800339a:	eddf 6a51 	vldr	s13, [pc, #324]	; 80034e0 <start_COM_task+0x1a0>
 800339e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80033a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
	uint16_t temperature_sample_constraint = (temperature_time_constraint
 80033a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033aa:	ee17 3a90 	vmov	r3, s15
 80033ae:	873b      	strh	r3, [r7, #56]	; 0x38
	if (temperature_sample_constraint < 1) {
 80033b0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d101      	bne.n	80033ba <start_COM_task+0x7a>
		temperature_sample_constraint = 1;
 80033b6:	2301      	movs	r3, #1
 80033b8:	873b      	strh	r3, [r7, #56]	; 0x38
	}

	uint16_t current_sample_constraint = (current_time_constraint
			/ COM_task_info.periodicity);
 80033ba:	eddf 6a49 	vldr	s13, [pc, #292]	; 80034e0 <start_COM_task+0x1a0>
 80033be:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80033c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
	uint16_t current_sample_constraint = (current_time_constraint
 80033c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033ca:	ee17 3a90 	vmov	r3, s15
 80033ce:	86fb      	strh	r3, [r7, #54]	; 0x36
	if (current_sample_constraint < 1) {
 80033d0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d101      	bne.n	80033da <start_COM_task+0x9a>
		current_sample_constraint = 1;
 80033d6:	2301      	movs	r3, #1
 80033d8:	86fb      	strh	r3, [r7, #54]	; 0x36
	}

	uint16_t valid_data_sample_constraint = (valid_data_time_constraint
			/ COM_task_info.periodicity);
 80033da:	eddf 6a41 	vldr	s13, [pc, #260]	; 80034e0 <start_COM_task+0x1a0>
 80033de:	ed97 7a08 	vldr	s14, [r7, #32]
 80033e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
	uint16_t valid_data_sample_constraint = (valid_data_time_constraint
 80033e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033ea:	ee17 3a90 	vmov	r3, s15
 80033ee:	86bb      	strh	r3, [r7, #52]	; 0x34
	if (valid_data_sample_constraint < 1) {
 80033f0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d101      	bne.n	80033fa <start_COM_task+0xba>
		valid_data_sample_constraint = 1;
 80033f6:	2301      	movs	r3, #1
 80033f8:	86bb      	strh	r3, [r7, #52]	; 0x34
	uint16_t cell_temperatures_valid;
	double current;
	uint16_t current_valid;

	/* Wait until offset */
	next_tick += TICK2HZ * COM_task_info.offset;
 80033fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033fc:	ee07 3a90 	vmov	s15, r3
 8003400:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003404:	eddf 6a39 	vldr	s13, [pc, #228]	; 80034ec <start_COM_task+0x1ac>
 8003408:	eddf 7a36 	vldr	s15, [pc, #216]	; 80034e4 <start_COM_task+0x1a4>
 800340c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003410:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003414:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003418:	ee17 3a90 	vmov	r3, s15
 800341c:	63fb      	str	r3, [r7, #60]	; 0x3c
	osDelayUntil(next_tick);
 800341e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003420:	f012 fa31 	bl	8015886 <osDelayUntil>

	for (;;) {
		/* Enter periodic behaviour */

		LTC_acquire_data(1);
 8003424:	2001      	movs	r0, #1
 8003426:	f000 fc3f 	bl	8003ca8 <LTC_acquire_data>

		cell_voltages = &SIM0_Y.cell_voltages;
 800342a:	4b31      	ldr	r3, [pc, #196]	; (80034f0 <start_COM_task+0x1b0>)
 800342c:	617b      	str	r3, [r7, #20]
		cell_temperatures = &SIM0_Y.cell_temperatures;
 800342e:	4b31      	ldr	r3, [pc, #196]	; (80034f4 <start_COM_task+0x1b4>)
 8003430:	613b      	str	r3, [r7, #16]
		cell_voltages_valid = 0x3FFF;
 8003432:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8003436:	83fb      	strh	r3, [r7, #30]
		cell_temperatures_valid = 0x3FFF;
 8003438:	f643 73ff 	movw	r3, #16383	; 0x3fff
 800343c:	83bb      	strh	r3, [r7, #28]

		current_valid = xQueueReceive(accumulator_current_queue, &current, 0);
 800343e:	4b2e      	ldr	r3, [pc, #184]	; (80034f8 <start_COM_task+0x1b8>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f107 0108 	add.w	r1, r7, #8
 8003446:	2200      	movs	r2, #0
 8003448:	4618      	mov	r0, r3
 800344a:	f012 fe4b 	bl	80160e4 <xQueueReceive>
 800344e:	4603      	mov	r3, r0
 8003450:	837b      	strh	r3, [r7, #26]

		//cell_voltages = LTC_voltages;
		//cell_temperatures = LTC_temperatures;
		if (!COM_data_valid_ok(
				(cell_voltages_valid == 0x03FF)
						&& (cell_temperatures_valid == 0x03FF) && current_valid,
 8003452:	8bfb      	ldrh	r3, [r7, #30]
 8003454:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8003458:	4293      	cmp	r3, r2
 800345a:	d109      	bne.n	8003470 <start_COM_task+0x130>
 800345c:	8bbb      	ldrh	r3, [r7, #28]
 800345e:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8003462:	4293      	cmp	r3, r2
 8003464:	d104      	bne.n	8003470 <start_COM_task+0x130>
 8003466:	8b7b      	ldrh	r3, [r7, #26]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d001      	beq.n	8003470 <start_COM_task+0x130>
 800346c:	2301      	movs	r3, #1
 800346e:	e000      	b.n	8003472 <start_COM_task+0x132>
 8003470:	2300      	movs	r3, #0
		if (!COM_data_valid_ok(
 8003472:	b2db      	uxtb	r3, r3
 8003474:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003476:	4611      	mov	r1, r2
 8003478:	4618      	mov	r0, r3
 800347a:	f7fe fb69 	bl	8001b50 <COM_data_valid_ok>
				valid_data_sample_constraint)) {

			//Error_Handler();
		}

		if (!COM_voltages_ok_d(cell_voltages, cell_voltages_valid,
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	8bfa      	ldrh	r2, [r7, #30]
 8003482:	b2d1      	uxtb	r1, r2
 8003484:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8003486:	4618      	mov	r0, r3
 8003488:	f7fe fa24 	bl	80018d4 <COM_voltages_ok_d>
				voltage_sample_constraint)) {

			//Error_Handler();
		}

		if (!COM_temperatures_ok_d(cell_temperatures, cell_temperatures_valid,
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	8bba      	ldrh	r2, [r7, #28]
 8003490:	b2d1      	uxtb	r1, r2
 8003492:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8003494:	4618      	mov	r0, r3
 8003496:	f7fe fa8f 	bl	80019b8 <COM_temperatures_ok_d>
				temperature_sample_constraint)) {

			//Error_Handler();
		}

		if (!COM_current_ok_d(&current, current_valid,
 800349a:	8b7b      	ldrh	r3, [r7, #26]
 800349c:	b2d9      	uxtb	r1, r3
 800349e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80034a0:	f107 0308 	add.w	r3, r7, #8
 80034a4:	4618      	mov	r0, r3
 80034a6:	f7fe faf9 	bl	8001a9c <COM_current_ok_d>

			//Error_Handler();

		}

		xQueueOverwrite(cell_voltages_queue, &cell_voltages);
 80034aa:	4b14      	ldr	r3, [pc, #80]	; (80034fc <start_COM_task+0x1bc>)
 80034ac:	6818      	ldr	r0, [r3, #0]
 80034ae:	f107 0114 	add.w	r1, r7, #20
 80034b2:	2302      	movs	r3, #2
 80034b4:	2200      	movs	r2, #0
 80034b6:	f012 fc3f 	bl	8015d38 <xQueueGenericSend>
		xQueueOverwrite(cell_temperatures_queue, &cell_temperatures);
 80034ba:	4b11      	ldr	r3, [pc, #68]	; (8003500 <start_COM_task+0x1c0>)
 80034bc:	6818      	ldr	r0, [r3, #0]
 80034be:	f107 0110 	add.w	r1, r7, #16
 80034c2:	2302      	movs	r3, #2
 80034c4:	2200      	movs	r2, #0
 80034c6:	f012 fc37 	bl	8015d38 <xQueueGenericSend>

		/* Wait until next period */
		next_tick += tick_increment;
 80034ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80034cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ce:	4413      	add	r3, r2
 80034d0:	63fb      	str	r3, [r7, #60]	; 0x3c
		osDelayUntil(next_tick);
 80034d2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80034d4:	f012 f9d7 	bl	8015886 <osDelayUntil>
		LTC_acquire_data(1);
 80034d8:	e7a4      	b.n	8003424 <start_COM_task+0xe4>
 80034da:	bf00      	nop
 80034dc:	2001b790 	.word	0x2001b790
 80034e0:	3f4ccccd 	.word	0x3f4ccccd
 80034e4:	447a0000 	.word	0x447a0000
 80034e8:	40a00000 	.word	0x40a00000
 80034ec:	00000000 	.word	0x00000000
 80034f0:	2001d6f0 	.word	0x2001d6f0
 80034f4:	2001e2c0 	.word	0x2001e2c0
 80034f8:	2001b598 	.word	0x2001b598
 80034fc:	2001b570 	.word	0x2001b570
 8003500:	2001b584 	.word	0x2001b584

08003504 <start_CAN_task>:
	}
}

void start_CAN_task(void *argument) {
 8003504:	b580      	push	{r7, lr}
 8003506:	b084      	sub	sp, #16
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 800350c:	4b15      	ldr	r3, [pc, #84]	; (8003564 <start_CAN_task+0x60>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	60fb      	str	r3, [r7, #12]
	uint32_t tick_increment = TICK2HZ * CAN_task_info.periodicity;
 8003512:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8003568 <start_CAN_task+0x64>
 8003516:	eddf 7a15 	vldr	s15, [pc, #84]	; 800356c <start_CAN_task+0x68>
 800351a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800351e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003522:	ee17 3a90 	vmov	r3, s15
 8003526:	60bb      	str	r3, [r7, #8]

	/* Make task-specific structures */

	/* Wait until offset */
	next_tick += TICK2HZ * CAN_task_info.offset;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	ee07 3a90 	vmov	s15, r3
 800352e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003532:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8003570 <start_CAN_task+0x6c>
 8003536:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800356c <start_CAN_task+0x68>
 800353a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800353e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003542:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003546:	ee17 3a90 	vmov	r3, s15
 800354a:	60fb      	str	r3, [r7, #12]
	osDelayUntil(next_tick);
 800354c:	68f8      	ldr	r0, [r7, #12]
 800354e:	f012 f99a 	bl	8015886 <osDelayUntil>

	for (;;) {
		/* Enter periodic behaviour */

		/* Wait until next period */
		next_tick += tick_increment;
 8003552:	68fa      	ldr	r2, [r7, #12]
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	4413      	add	r3, r2
 8003558:	60fb      	str	r3, [r7, #12]
		osDelayUntil(next_tick);
 800355a:	68f8      	ldr	r0, [r7, #12]
 800355c:	f012 f993 	bl	8015886 <osDelayUntil>
		next_tick += tick_increment;
 8003560:	e7f7      	b.n	8003552 <start_CAN_task+0x4e>
 8003562:	bf00      	nop
 8003564:	2001b790 	.word	0x2001b790
 8003568:	3f4ccccd 	.word	0x3f4ccccd
 800356c:	447a0000 	.word	0x447a0000
 8003570:	00000000 	.word	0x00000000

08003574 <start_CSE_task>:
	}
}

void start_CSE_task(void *argument) {
 8003574:	b580      	push	{r7, lr}
 8003576:	b084      	sub	sp, #16
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 800357c:	4b1d      	ldr	r3, [pc, #116]	; (80035f4 <start_CSE_task+0x80>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	60fb      	str	r3, [r7, #12]
	uint32_t tick_increment = TICK2HZ * CSE_task_info.periodicity;
 8003582:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80035f8 <start_CSE_task+0x84>
 8003586:	eddf 7a1d 	vldr	s15, [pc, #116]	; 80035fc <start_CSE_task+0x88>
 800358a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800358e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003592:	ee17 3a90 	vmov	r3, s15
 8003596:	60bb      	str	r3, [r7, #8]

	/* Make task-specific structures */
	CSE_initialize();
 8003598:	f003 f8b2 	bl	8006700 <CSE_initialize>

	/* Wait until offset */
	next_tick += TICK2HZ * CSE_task_info.offset;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	ee07 3a90 	vmov	s15, r3
 80035a2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80035a6:	eddf 6a16 	vldr	s13, [pc, #88]	; 8003600 <start_CSE_task+0x8c>
 80035aa:	eddf 7a14 	vldr	s15, [pc, #80]	; 80035fc <start_CSE_task+0x88>
 80035ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80035b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80035ba:	ee17 3a90 	vmov	r3, s15
 80035be:	60fb      	str	r3, [r7, #12]
	osDelayUntil(next_tick);
 80035c0:	68f8      	ldr	r0, [r7, #12]
 80035c2:	f012 f960 	bl	8015886 <osDelayUntil>

	for (;;) {
		/* Enter periodic behaviour */
		CSE_U.current = SIM0_Y.current;
 80035c6:	4b0f      	ldr	r3, [pc, #60]	; (8003604 <start_CSE_task+0x90>)
 80035c8:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80035cc:	490e      	ldr	r1, [pc, #56]	; (8003608 <start_CSE_task+0x94>)
 80035ce:	e9c1 2300 	strd	r2, r3, [r1]
		CSE_U.y = SIM0_Y.cell_voltages[0];
 80035d2:	4b0c      	ldr	r3, [pc, #48]	; (8003604 <start_CSE_task+0x90>)
 80035d4:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80035d8:	490b      	ldr	r1, [pc, #44]	; (8003608 <start_CSE_task+0x94>)
 80035da:	e9c1 2302 	strd	r2, r3, [r1, #8]

		CSE_step();
 80035de:	f001 fd8b 	bl	80050f8 <CSE_step>

		/* Wait until next period */
		next_tick += tick_increment;
 80035e2:	68fa      	ldr	r2, [r7, #12]
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	4413      	add	r3, r2
 80035e8:	60fb      	str	r3, [r7, #12]
		osDelayUntil(next_tick);
 80035ea:	68f8      	ldr	r0, [r7, #12]
 80035ec:	f012 f94b 	bl	8015886 <osDelayUntil>
		CSE_U.current = SIM0_Y.current;
 80035f0:	e7e9      	b.n	80035c6 <start_CSE_task+0x52>
 80035f2:	bf00      	nop
 80035f4:	2001b790 	.word	0x2001b790
 80035f8:	3f4ccccd 	.word	0x3f4ccccd
 80035fc:	447a0000 	.word	0x447a0000
 8003600:	00000000 	.word	0x00000000
 8003604:	2001d6b0 	.word	0x2001d6b0
 8003608:	2001bde0 	.word	0x2001bde0

0800360c <start_COOL_task>:
	}
}

void start_COOL_task(void *argument) {
 800360c:	b580      	push	{r7, lr}
 800360e:	b096      	sub	sp, #88	; 0x58
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 8003614:	4b31      	ldr	r3, [pc, #196]	; (80036dc <start_COOL_task+0xd0>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t tick_increment = TICK2HZ * COOL_task_info.periodicity;
 800361a:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80036e0 <start_COOL_task+0xd4>
 800361e:	eddf 7a31 	vldr	s15, [pc, #196]	; 80036e4 <start_COOL_task+0xd8>
 8003622:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003626:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800362a:	ee17 3a90 	vmov	r3, s15
 800362e:	64fb      	str	r3, [r7, #76]	; 0x4c

	/* Make task-specific structures */
	PID_t PID;
	float temperature = 20;
 8003630:	4b2d      	ldr	r3, [pc, #180]	; (80036e8 <start_COOL_task+0xdc>)
 8003632:	653b      	str	r3, [r7, #80]	; 0x50

	PID_initialize(&PID, // *ptr
 8003634:	f107 0310 	add.w	r3, r7, #16
 8003638:	eddf 2a2c 	vldr	s5, [pc, #176]	; 80036ec <start_COOL_task+0xe0>
 800363c:	eeb3 2a04 	vmov.f32	s4, #52	; 0x41a00000  20.0
 8003640:	eddf 1a2b 	vldr	s3, [pc, #172]	; 80036f0 <start_COOL_task+0xe4>
 8003644:	ed9f 1a2a 	vldr	s2, [pc, #168]	; 80036f0 <start_COOL_task+0xe4>
 8003648:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800364c:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8003650:	4618      	mov	r0, r3
 8003652:	f7fe fbec 	bl	8001e2e <PID_initialize>
			0,	// Proportionate gain
			0,	// Proportionate gain
			20,	// Lower PID output bound
			100	// Upper PID output bound
			);
	FAN_initialize(&htim1);
 8003656:	4827      	ldr	r0, [pc, #156]	; (80036f4 <start_COOL_task+0xe8>)
 8003658:	f7fe fa96 	bl	8001b88 <FAN_initialize>

	double *temperatures;

	/* Wait until offset */
	next_tick += TICK2HZ * COOL_task_info.offset;
 800365c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800365e:	ee07 3a90 	vmov	s15, r3
 8003662:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003666:	eddf 6a22 	vldr	s13, [pc, #136]	; 80036f0 <start_COOL_task+0xe4>
 800366a:	eddf 7a1e 	vldr	s15, [pc, #120]	; 80036e4 <start_COOL_task+0xd8>
 800366e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003672:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003676:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800367a:	ee17 3a90 	vmov	r3, s15
 800367e:	657b      	str	r3, [r7, #84]	; 0x54
	osDelayUntil(next_tick);
 8003680:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8003682:	f012 f900 	bl	8015886 <osDelayUntil>

	for (;;) {
		/* Enter periodic behaviour */

		if (xQueuePeek(cell_temperatures_queue, &temperatures, 0)) {
 8003686:	4b1c      	ldr	r3, [pc, #112]	; (80036f8 <start_COOL_task+0xec>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f107 010c 	add.w	r1, r7, #12
 800368e:	2200      	movs	r2, #0
 8003690:	4618      	mov	r0, r3
 8003692:	f012 fe37 	bl	8016304 <xQueuePeek>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d008      	beq.n	80036ae <start_COOL_task+0xa2>
			temperature = temperatures[0];
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036a2:	4610      	mov	r0, r2
 80036a4:	4619      	mov	r1, r3
 80036a6:	f7fd fa91 	bl	8000bcc <__aeabi_d2f>
 80036aa:	4603      	mov	r3, r0
 80036ac:	653b      	str	r3, [r7, #80]	; 0x50
		}

		PID_progress(&PID, temperature);
 80036ae:	f107 0310 	add.w	r3, r7, #16
 80036b2:	ed97 0a14 	vldr	s0, [r7, #80]	; 0x50
 80036b6:	4618      	mov	r0, r3
 80036b8:	f7fe fb4a 	bl	8001d50 <PID_progress>
		FAN_duty_cycle(&htim1, PID.output);
 80036bc:	edd7 7a06 	vldr	s15, [r7, #24]
 80036c0:	eeb0 0a67 	vmov.f32	s0, s15
 80036c4:	480b      	ldr	r0, [pc, #44]	; (80036f4 <start_COOL_task+0xe8>)
 80036c6:	f7fe fa89 	bl	8001bdc <FAN_duty_cycle>

		/* Wait until next period */
		next_tick += tick_increment;
 80036ca:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80036cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036ce:	4413      	add	r3, r2
 80036d0:	657b      	str	r3, [r7, #84]	; 0x54
		osDelayUntil(next_tick);
 80036d2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80036d4:	f012 f8d7 	bl	8015886 <osDelayUntil>
		if (xQueuePeek(cell_temperatures_queue, &temperatures, 0)) {
 80036d8:	e7d5      	b.n	8003686 <start_COOL_task+0x7a>
 80036da:	bf00      	nop
 80036dc:	2001b790 	.word	0x2001b790
 80036e0:	3f4ccccd 	.word	0x3f4ccccd
 80036e4:	447a0000 	.word	0x447a0000
 80036e8:	41a00000 	.word	0x41a00000
 80036ec:	42c80000 	.word	0x42c80000
 80036f0:	00000000 	.word	0x00000000
 80036f4:	2001bd40 	.word	0x2001bd40
 80036f8:	2001b584 	.word	0x2001b584

080036fc <start_SIM_task>:
	}
}

void start_SIM_task(void *argument) {
 80036fc:	b590      	push	{r4, r7, lr}
 80036fe:	b087      	sub	sp, #28
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 8003704:	4b5d      	ldr	r3, [pc, #372]	; (800387c <start_SIM_task+0x180>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	617b      	str	r3, [r7, #20]
	uint32_t tick_increment = TICK2HZ * SIM_task_info.periodicity;
 800370a:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8003880 <start_SIM_task+0x184>
 800370e:	eddf 7a5d 	vldr	s15, [pc, #372]	; 8003884 <start_SIM_task+0x188>
 8003712:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003716:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800371a:	ee17 3a90 	vmov	r3, s15
 800371e:	613b      	str	r3, [r7, #16]

	/* Make task-specific structures */
	SIM0_initialize();
 8003720:	f004 f94a 	bl	80079b8 <SIM0_initialize>

	SIM0_P.Ts = SIM_task_info.periodicity;
 8003724:	4b58      	ldr	r3, [pc, #352]	; (8003888 <start_SIM_task+0x18c>)
 8003726:	4618      	mov	r0, r3
 8003728:	f7fc ff00 	bl	800052c <__aeabi_f2d>
 800372c:	4602      	mov	r2, r0
 800372e:	460b      	mov	r3, r1
 8003730:	4956      	ldr	r1, [pc, #344]	; (800388c <start_SIM_task+0x190>)
 8003732:	e9c1 233c 	strd	r2, r3, [r1, #240]	; 0xf0
	SIM0_U.SC = 1;
 8003736:	4956      	ldr	r1, [pc, #344]	; (8003890 <start_SIM_task+0x194>)
 8003738:	f04f 0200 	mov.w	r2, #0
 800373c:	4b55      	ldr	r3, [pc, #340]	; (8003894 <start_SIM_task+0x198>)
 800373e:	e9c1 2308 	strd	r2, r3, [r1, #32]
	SIM0_U.drive = 0;
 8003742:	4953      	ldr	r1, [pc, #332]	; (8003890 <start_SIM_task+0x194>)
 8003744:	f04f 0200 	mov.w	r2, #0
 8003748:	f04f 0300 	mov.w	r3, #0
 800374c:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	SIM0_U.charge = 1;
 8003750:	494f      	ldr	r1, [pc, #316]	; (8003890 <start_SIM_task+0x194>)
 8003752:	f04f 0200 	mov.w	r2, #0
 8003756:	4b4f      	ldr	r3, [pc, #316]	; (8003894 <start_SIM_task+0x198>)
 8003758:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	SIM0_U.drive_current = -100;
 800375c:	4b4c      	ldr	r3, [pc, #304]	; (8003890 <start_SIM_task+0x194>)
 800375e:	f503 618b 	add.w	r1, r3, #1112	; 0x458
 8003762:	f04f 0200 	mov.w	r2, #0
 8003766:	4b4c      	ldr	r3, [pc, #304]	; (8003898 <start_SIM_task+0x19c>)
 8003768:	e9c1 2300 	strd	r2, r3, [r1]
	{
		uint8_t start_drive = SIM0_U.drive > 0.5;
 800376c:	4b48      	ldr	r3, [pc, #288]	; (8003890 <start_SIM_task+0x194>)
 800376e:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8003772:	2301      	movs	r3, #1
 8003774:	461c      	mov	r4, r3
 8003776:	f04f 0200 	mov.w	r2, #0
 800377a:	4b48      	ldr	r3, [pc, #288]	; (800389c <start_SIM_task+0x1a0>)
 800377c:	f7fd f9be 	bl	8000afc <__aeabi_dcmpgt>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d101      	bne.n	800378a <start_SIM_task+0x8e>
 8003786:	2300      	movs	r3, #0
 8003788:	461c      	mov	r4, r3
 800378a:	b2e3      	uxtb	r3, r4
 800378c:	73fb      	strb	r3, [r7, #15]
		xQueueOverwrite(start_drive_queue, &start_drive);
 800378e:	4b44      	ldr	r3, [pc, #272]	; (80038a0 <start_SIM_task+0x1a4>)
 8003790:	6818      	ldr	r0, [r3, #0]
 8003792:	f107 010f 	add.w	r1, r7, #15
 8003796:	2302      	movs	r3, #2
 8003798:	2200      	movs	r2, #0
 800379a:	f012 facd 	bl	8015d38 <xQueueGenericSend>
	}
	{
		uint8_t start_charge = SIM0_U.charge > 0.5;
 800379e:	4b3c      	ldr	r3, [pc, #240]	; (8003890 <start_SIM_task+0x194>)
 80037a0:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 80037a4:	2301      	movs	r3, #1
 80037a6:	461c      	mov	r4, r3
 80037a8:	f04f 0200 	mov.w	r2, #0
 80037ac:	4b3b      	ldr	r3, [pc, #236]	; (800389c <start_SIM_task+0x1a0>)
 80037ae:	f7fd f9a5 	bl	8000afc <__aeabi_dcmpgt>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d101      	bne.n	80037bc <start_SIM_task+0xc0>
 80037b8:	2300      	movs	r3, #0
 80037ba:	461c      	mov	r4, r3
 80037bc:	b2e3      	uxtb	r3, r4
 80037be:	73bb      	strb	r3, [r7, #14]
		xQueueOverwrite(start_charge_queue, &start_charge);
 80037c0:	4b38      	ldr	r3, [pc, #224]	; (80038a4 <start_SIM_task+0x1a8>)
 80037c2:	6818      	ldr	r0, [r3, #0]
 80037c4:	f107 010e 	add.w	r1, r7, #14
 80037c8:	2302      	movs	r3, #2
 80037ca:	2200      	movs	r2, #0
 80037cc:	f012 fab4 	bl	8015d38 <xQueueGenericSend>
	}
	{
		uint8_t start_balance = SIM0_U.drive + SIM0_U.charge > 1.5;
 80037d0:	4b2f      	ldr	r3, [pc, #188]	; (8003890 <start_SIM_task+0x194>)
 80037d2:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 80037d6:	4b2e      	ldr	r3, [pc, #184]	; (8003890 <start_SIM_task+0x194>)
 80037d8:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 80037dc:	f7fc fd48 	bl	8000270 <__adddf3>
 80037e0:	4602      	mov	r2, r0
 80037e2:	460b      	mov	r3, r1
 80037e4:	4610      	mov	r0, r2
 80037e6:	4619      	mov	r1, r3
 80037e8:	2301      	movs	r3, #1
 80037ea:	461c      	mov	r4, r3
 80037ec:	f04f 0200 	mov.w	r2, #0
 80037f0:	4b2d      	ldr	r3, [pc, #180]	; (80038a8 <start_SIM_task+0x1ac>)
 80037f2:	f7fd f983 	bl	8000afc <__aeabi_dcmpgt>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d101      	bne.n	8003800 <start_SIM_task+0x104>
 80037fc:	2300      	movs	r3, #0
 80037fe:	461c      	mov	r4, r3
 8003800:	b2e3      	uxtb	r3, r4
 8003802:	737b      	strb	r3, [r7, #13]
		xQueueOverwrite(start_balance_queue, &start_balance);
 8003804:	4b29      	ldr	r3, [pc, #164]	; (80038ac <start_SIM_task+0x1b0>)
 8003806:	6818      	ldr	r0, [r3, #0]
 8003808:	f107 010d 	add.w	r1, r7, #13
 800380c:	2302      	movs	r3, #2
 800380e:	2200      	movs	r2, #0
 8003810:	f012 fa92 	bl	8015d38 <xQueueGenericSend>
	}

	/* Wait until offset */
	next_tick += TICK2HZ * SIM_task_info.offset;
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	ee07 3a90 	vmov	s15, r3
 800381a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800381e:	eddf 6a24 	vldr	s13, [pc, #144]	; 80038b0 <start_SIM_task+0x1b4>
 8003822:	eddf 7a18 	vldr	s15, [pc, #96]	; 8003884 <start_SIM_task+0x188>
 8003826:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800382a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800382e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003832:	ee17 3a90 	vmov	r3, s15
 8003836:	617b      	str	r3, [r7, #20]
	osDelayUntil(next_tick);
 8003838:	6978      	ldr	r0, [r7, #20]
 800383a:	f012 f824 	bl	8015886 <osDelayUntil>

	for (;;) {
		/* Enter periodic behaviour */
		SIM0_step();
 800383e:	f002 ff83 	bl	8006748 <SIM0_step>

		xQueueOverwrite(accumulator_voltage_queue, &SIM0_Y.accumulator_voltage);
 8003842:	4b1c      	ldr	r3, [pc, #112]	; (80038b4 <start_SIM_task+0x1b8>)
 8003844:	6818      	ldr	r0, [r3, #0]
 8003846:	2302      	movs	r3, #2
 8003848:	2200      	movs	r2, #0
 800384a:	491b      	ldr	r1, [pc, #108]	; (80038b8 <start_SIM_task+0x1bc>)
 800384c:	f012 fa74 	bl	8015d38 <xQueueGenericSend>
		xQueueOverwrite(vehicle_voltage_queue, &SIM0_Y.vehicle_voltage);
 8003850:	4b1a      	ldr	r3, [pc, #104]	; (80038bc <start_SIM_task+0x1c0>)
 8003852:	6818      	ldr	r0, [r3, #0]
 8003854:	2302      	movs	r3, #2
 8003856:	2200      	movs	r2, #0
 8003858:	4919      	ldr	r1, [pc, #100]	; (80038c0 <start_SIM_task+0x1c4>)
 800385a:	f012 fa6d 	bl	8015d38 <xQueueGenericSend>
		xQueueOverwrite(accumulator_current_queue, &SIM0_Y.current);
 800385e:	4b19      	ldr	r3, [pc, #100]	; (80038c4 <start_SIM_task+0x1c8>)
 8003860:	6818      	ldr	r0, [r3, #0]
 8003862:	2302      	movs	r3, #2
 8003864:	2200      	movs	r2, #0
 8003866:	4918      	ldr	r1, [pc, #96]	; (80038c8 <start_SIM_task+0x1cc>)
 8003868:	f012 fa66 	bl	8015d38 <xQueueGenericSend>

		/* Wait until next period */
		next_tick += tick_increment;
 800386c:	697a      	ldr	r2, [r7, #20]
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	4413      	add	r3, r2
 8003872:	617b      	str	r3, [r7, #20]
		osDelayUntil(next_tick);
 8003874:	6978      	ldr	r0, [r7, #20]
 8003876:	f012 f806 	bl	8015886 <osDelayUntil>
		SIM0_step();
 800387a:	e7e0      	b.n	800383e <start_SIM_task+0x142>
 800387c:	2001b790 	.word	0x2001b790
 8003880:	3f4ccccd 	.word	0x3f4ccccd
 8003884:	447a0000 	.word	0x447a0000
 8003888:	3f4ccccd 	.word	0x3f4ccccd
 800388c:	200002e0 	.word	0x200002e0
 8003890:	2001e4a8 	.word	0x2001e4a8
 8003894:	3ff00000 	.word	0x3ff00000
 8003898:	c0590000 	.word	0xc0590000
 800389c:	3fe00000 	.word	0x3fe00000
 80038a0:	2001b574 	.word	0x2001b574
 80038a4:	2001b580 	.word	0x2001b580
 80038a8:	3ff80000 	.word	0x3ff80000
 80038ac:	2001b594 	.word	0x2001b594
 80038b0:	00000000 	.word	0x00000000
 80038b4:	2001b590 	.word	0x2001b590
 80038b8:	2001d6e8 	.word	0x2001d6e8
 80038bc:	2001b588 	.word	0x2001b588
 80038c0:	2001d6d8 	.word	0x2001d6d8
 80038c4:	2001b598 	.word	0x2001b598
 80038c8:	2001d6e0 	.word	0x2001d6e0

080038cc <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b082      	sub	sp, #8
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM5) {
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a04      	ldr	r2, [pc, #16]	; (80038ec <HAL_TIM_PeriodElapsedCallback+0x20>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d101      	bne.n	80038e2 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 80038de:	f00c fe7d 	bl	80105dc <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80038e2:	bf00      	nop
 80038e4:	3708      	adds	r7, #8
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	40000c00 	.word	0x40000c00

080038f0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80038f0:	b480      	push	{r7}
 80038f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80038f4:	b672      	cpsid	i
}
 80038f6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80038f8:	e7fe      	b.n	80038f8 <Error_Handler+0x8>
	...

080038fc <set_air_plus_ext>:
#include "main.h"

#include "canlib_callbacks.h"
#include "SIM0.h"

void set_air_plus_ext(uint8_t closed){
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
 8003902:	4603      	mov	r3, r0
 8003904:	71fb      	strb	r3, [r7, #7]
	SIM0_U.EnableAirPlus = closed;
 8003906:	79fb      	ldrb	r3, [r7, #7]
 8003908:	4618      	mov	r0, r3
 800390a:	f7fc fded 	bl	80004e8 <__aeabi_ui2d>
 800390e:	4602      	mov	r2, r0
 8003910:	460b      	mov	r3, r1
 8003912:	4903      	ldr	r1, [pc, #12]	; (8003920 <set_air_plus_ext+0x24>)
 8003914:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
}
 8003918:	bf00      	nop
 800391a:	3708      	adds	r7, #8
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}
 8003920:	2001e4a8 	.word	0x2001e4a8

08003924 <get_air_plus_ext>:

uint8_t get_air_plus_ext(){
 8003924:	b580      	push	{r7, lr}
 8003926:	af00      	add	r7, sp, #0
	return SIM0_Y.AIR_plus_closed;
 8003928:	4b05      	ldr	r3, [pc, #20]	; (8003940 <get_air_plus_ext+0x1c>)
 800392a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800392e:	4610      	mov	r0, r2
 8003930:	4619      	mov	r1, r3
 8003932:	f7fd f92b 	bl	8000b8c <__aeabi_d2uiz>
 8003936:	4603      	mov	r3, r0
 8003938:	b2db      	uxtb	r3, r3
}
 800393a:	4618      	mov	r0, r3
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	2001d6b0 	.word	0x2001d6b0

08003944 <set_air_minus_ext>:

void set_air_minus_ext(uint8_t closed){
 8003944:	b580      	push	{r7, lr}
 8003946:	b082      	sub	sp, #8
 8003948:	af00      	add	r7, sp, #0
 800394a:	4603      	mov	r3, r0
 800394c:	71fb      	strb	r3, [r7, #7]
	SIM0_U.EnableAirMinus = closed;
 800394e:	79fb      	ldrb	r3, [r7, #7]
 8003950:	4618      	mov	r0, r3
 8003952:	f7fc fdc9 	bl	80004e8 <__aeabi_ui2d>
 8003956:	4602      	mov	r2, r0
 8003958:	460b      	mov	r3, r1
 800395a:	4903      	ldr	r1, [pc, #12]	; (8003968 <set_air_minus_ext+0x24>)
 800395c:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
}
 8003960:	bf00      	nop
 8003962:	3708      	adds	r7, #8
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}
 8003968:	2001e4a8 	.word	0x2001e4a8

0800396c <get_air_minus_ext>:

uint8_t get_air_minus_ext(){
 800396c:	b580      	push	{r7, lr}
 800396e:	af00      	add	r7, sp, #0
	return SIM0_Y.AIR_minus_closed;
 8003970:	4b05      	ldr	r3, [pc, #20]	; (8003988 <get_air_minus_ext+0x1c>)
 8003972:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003976:	4610      	mov	r0, r2
 8003978:	4619      	mov	r1, r3
 800397a:	f7fd f907 	bl	8000b8c <__aeabi_d2uiz>
 800397e:	4603      	mov	r3, r0
 8003980:	b2db      	uxtb	r3, r3
}
 8003982:	4618      	mov	r0, r3
 8003984:	bd80      	pop	{r7, pc}
 8003986:	bf00      	nop
 8003988:	2001d6b0 	.word	0x2001d6b0

0800398c <set_precharge_ext>:

void set_precharge_ext(uint8_t closed){
 800398c:	b580      	push	{r7, lr}
 800398e:	b082      	sub	sp, #8
 8003990:	af00      	add	r7, sp, #0
 8003992:	4603      	mov	r3, r0
 8003994:	71fb      	strb	r3, [r7, #7]
	SIM0_U.EnablePrecharge = closed;
 8003996:	79fb      	ldrb	r3, [r7, #7]
 8003998:	4618      	mov	r0, r3
 800399a:	f7fc fda5 	bl	80004e8 <__aeabi_ui2d>
 800399e:	4602      	mov	r2, r0
 80039a0:	460b      	mov	r3, r1
 80039a2:	4903      	ldr	r1, [pc, #12]	; (80039b0 <set_precharge_ext+0x24>)
 80039a4:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
}
 80039a8:	bf00      	nop
 80039aa:	3708      	adds	r7, #8
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}
 80039b0:	2001e4a8 	.word	0x2001e4a8

080039b4 <get_precharge_ext>:

uint8_t get_precharge_ext(){
 80039b4:	b580      	push	{r7, lr}
 80039b6:	af00      	add	r7, sp, #0
	return SIM0_Y.precharge_closed;
 80039b8:	4b05      	ldr	r3, [pc, #20]	; (80039d0 <get_precharge_ext+0x1c>)
 80039ba:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80039be:	4610      	mov	r0, r2
 80039c0:	4619      	mov	r1, r3
 80039c2:	f7fd f8e3 	bl	8000b8c <__aeabi_d2uiz>
 80039c6:	4603      	mov	r3, r0
 80039c8:	b2db      	uxtb	r3, r3

}
 80039ca:	4618      	mov	r0, r3
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	2001d6b0 	.word	0x2001d6b0

080039d4 <get_ams_error_latched_ext>:

void set_ams_error_ext(uint8_t raise_error){
	SIM0_U.AMS_error = raise_error;
}

uint8_t get_ams_error_latched_ext(){
 80039d4:	b480      	push	{r7}
 80039d6:	af00      	add	r7, sp, #0
	return SIM0_Y.AMS_error_latched;
 80039d8:	4b03      	ldr	r3, [pc, #12]	; (80039e8 <get_ams_error_latched_ext+0x14>)
 80039da:	781b      	ldrb	r3, [r3, #0]
}
 80039dc:	4618      	mov	r0, r3
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr
 80039e6:	bf00      	nop
 80039e8:	2001d6b0 	.word	0x2001d6b0

080039ec <get_imd_error_latched_ext>:

void set_imd_error_ext(uint8_t raise_error){
	SIM0_U.IMD_error = raise_error;
}

uint8_t get_imd_error_latched_ext(){
 80039ec:	b480      	push	{r7}
 80039ee:	af00      	add	r7, sp, #0
	return SIM0_Y.IMD_error_latched;
 80039f0:	4b03      	ldr	r3, [pc, #12]	; (8003a00 <get_imd_error_latched_ext+0x14>)
 80039f2:	785b      	ldrb	r3, [r3, #1]
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr
 80039fe:	bf00      	nop
 8003a00:	2001d6b0 	.word	0x2001d6b0

08003a04 <get_sc_probe_ext>:

uint8_t get_sc_probe_ext(){
 8003a04:	b580      	push	{r7, lr}
 8003a06:	af00      	add	r7, sp, #0
	return SIM0_Y.SC_probe;
 8003a08:	4b05      	ldr	r3, [pc, #20]	; (8003a20 <get_sc_probe_ext+0x1c>)
 8003a0a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003a0e:	4610      	mov	r0, r2
 8003a10:	4619      	mov	r1, r3
 8003a12:	f7fd f8bb 	bl	8000b8c <__aeabi_d2uiz>
 8003a16:	4603      	mov	r3, r0
 8003a18:	b2db      	uxtb	r3, r3
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	2001d6b0 	.word	0x2001d6b0

08003a24 <get_imd_ok_ext>:

uint8_t get_imd_ok_ext(){
 8003a24:	b580      	push	{r7, lr}
 8003a26:	af00      	add	r7, sp, #0
	return SIM0_Y.IMD_ok;
 8003a28:	4b06      	ldr	r3, [pc, #24]	; (8003a44 <get_imd_ok_ext+0x20>)
 8003a2a:	f503 635f 	add.w	r3, r3, #3568	; 0xdf0
 8003a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a32:	4610      	mov	r0, r2
 8003a34:	4619      	mov	r1, r3
 8003a36:	f7fd f8a9 	bl	8000b8c <__aeabi_d2uiz>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	b2db      	uxtb	r3, r3
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	2001d6b0 	.word	0x2001d6b0

08003a48 <pec15_calc>:
 * @param	The data used to calculate the PEC
 * @retval	The 16-bit PEC code
 */
uint16_t pec15_calc(uint8_t len, // Number of bytes that will be used to calculate a PEC
		uint8_t *data  // Array of data that will be used to calculate  a PEC
		) {
 8003a48:	b480      	push	{r7}
 8003a4a:	b085      	sub	sp, #20
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	4603      	mov	r3, r0
 8003a50:	6039      	str	r1, [r7, #0]
 8003a52:	71fb      	strb	r3, [r7, #7]
	uint16_t remainder, addr;
	remainder = 16;                    // initialize the PEC
 8003a54:	2310      	movs	r3, #16
 8003a56:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i < len; i++)  // loops for each byte in data array
 8003a58:	2300      	movs	r3, #0
 8003a5a:	737b      	strb	r3, [r7, #13]
 8003a5c:	e018      	b.n	8003a90 <pec15_calc+0x48>
			{
		addr = ((remainder >> 7) ^ data[i]) & 0xff; // calculate PEC table address
 8003a5e:	89fb      	ldrh	r3, [r7, #14]
 8003a60:	09db      	lsrs	r3, r3, #7
 8003a62:	b29a      	uxth	r2, r3
 8003a64:	7b7b      	ldrb	r3, [r7, #13]
 8003a66:	6839      	ldr	r1, [r7, #0]
 8003a68:	440b      	add	r3, r1
 8003a6a:	781b      	ldrb	r3, [r3, #0]
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	4053      	eors	r3, r2
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	817b      	strh	r3, [r7, #10]
		remainder = (remainder << 8) ^ crc15Table[addr];
 8003a76:	89fb      	ldrh	r3, [r7, #14]
 8003a78:	021b      	lsls	r3, r3, #8
 8003a7a:	b29a      	uxth	r2, r3
 8003a7c:	897b      	ldrh	r3, [r7, #10]
 8003a7e:	490b      	ldr	r1, [pc, #44]	; (8003aac <pec15_calc+0x64>)
 8003a80:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	4053      	eors	r3, r2
 8003a88:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i < len; i++)  // loops for each byte in data array
 8003a8a:	7b7b      	ldrb	r3, [r7, #13]
 8003a8c:	3301      	adds	r3, #1
 8003a8e:	737b      	strb	r3, [r7, #13]
 8003a90:	7b7a      	ldrb	r2, [r7, #13]
 8003a92:	79fb      	ldrb	r3, [r7, #7]
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d3e2      	bcc.n	8003a5e <pec15_calc+0x16>
	}
	return (remainder * 2);  // The CRC15 has a 0 in the LSB so the remainder
 8003a98:	89fb      	ldrh	r3, [r7, #14]
 8003a9a:	005b      	lsls	r3, r3, #1
 8003a9c:	b29b      	uxth	r3, r3
							 // must be multiplied by 2
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3714      	adds	r7, #20
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr
 8003aaa:	bf00      	nop
 8003aac:	0801acf4 	.word	0x0801acf4

08003ab0 <initialize_LTC>:
/*
 * @brief	Set the hspi which LTC uses
 * @param	The hspi to be used
 * @retval	None
 */
void initialize_LTC(SPI_HandleTypeDef *hspi) {
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
	hltc = hspi;
 8003ab8:	4a04      	ldr	r2, [pc, #16]	; (8003acc <initialize_LTC+0x1c>)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6013      	str	r3, [r2, #0]
}
 8003abe:	bf00      	nop
 8003ac0:	370c      	adds	r7, #12
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr
 8003aca:	bf00      	nop
 8003acc:	2001b7ac 	.word	0x2001b7ac

08003ad0 <LTC_CS_select>:

/*
 * @brief	Selects CS
 * @retval	None
 */
void LTC_CS_select(void) {
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LTC_CS_GPIO_Port, LTC_CS_Pin, 0);
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	2110      	movs	r1, #16
 8003ad8:	4802      	ldr	r0, [pc, #8]	; (8003ae4 <LTC_CS_select+0x14>)
 8003ada:	f00e fd3f 	bl	801255c <HAL_GPIO_WritePin>
}
 8003ade:	bf00      	nop
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	40020800 	.word	0x40020800

08003ae8 <LTC_CS_deselect>:

/*
 * @brief	Deselects CS
 * @retval	None
 */
void LTC_CS_deselect(void) {
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LTC_CS_GPIO_Port, LTC_CS_Pin, 1);
 8003aec:	2201      	movs	r2, #1
 8003aee:	2110      	movs	r1, #16
 8003af0:	4802      	ldr	r0, [pc, #8]	; (8003afc <LTC_CS_deselect+0x14>)
 8003af2:	f00e fd33 	bl	801255c <HAL_GPIO_WritePin>
}
 8003af6:	bf00      	nop
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	40020800 	.word	0x40020800

08003b00 <LTC_wake>:

/*
 * @brief	A helper function which interfaces with SPI. wakes the isoSPI port from sleep
 * @retval	LTC Status
 */
uint8_t LTC_wake() {
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b082      	sub	sp, #8
 8003b04:	af00      	add	r7, sp, #0
	uint16_t pec;

	// This is the ADSTAT command. Chosen for no specific reason
	uint16_t command = 0b0000010101101000;
 8003b06:	f44f 63ad 	mov.w	r3, #1384	; 0x568
 8003b0a:	80fb      	strh	r3, [r7, #6]

	// This is how one would pack the command, calculate the PEC, and the pack the contents.
	LTC_command_buffer[0] = command >> 8;
 8003b0c:	88fb      	ldrh	r3, [r7, #6]
 8003b0e:	0a1b      	lsrs	r3, r3, #8
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	b2da      	uxtb	r2, r3
 8003b14:	4b12      	ldr	r3, [pc, #72]	; (8003b60 <LTC_wake+0x60>)
 8003b16:	701a      	strb	r2, [r3, #0]
	LTC_command_buffer[1] = command;
 8003b18:	88fb      	ldrh	r3, [r7, #6]
 8003b1a:	b2da      	uxtb	r2, r3
 8003b1c:	4b10      	ldr	r3, [pc, #64]	; (8003b60 <LTC_wake+0x60>)
 8003b1e:	705a      	strb	r2, [r3, #1]
	pec = pec15_calc(2, LTC_command_buffer);
 8003b20:	490f      	ldr	r1, [pc, #60]	; (8003b60 <LTC_wake+0x60>)
 8003b22:	2002      	movs	r0, #2
 8003b24:	f7ff ff90 	bl	8003a48 <pec15_calc>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	80bb      	strh	r3, [r7, #4]
	LTC_command_buffer[2] = pec >> 8;
 8003b2c:	88bb      	ldrh	r3, [r7, #4]
 8003b2e:	0a1b      	lsrs	r3, r3, #8
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	b2da      	uxtb	r2, r3
 8003b34:	4b0a      	ldr	r3, [pc, #40]	; (8003b60 <LTC_wake+0x60>)
 8003b36:	709a      	strb	r2, [r3, #2]
	LTC_command_buffer[3] = pec;
 8003b38:	88bb      	ldrh	r3, [r7, #4]
 8003b3a:	b2da      	uxtb	r2, r3
 8003b3c:	4b08      	ldr	r3, [pc, #32]	; (8003b60 <LTC_wake+0x60>)
 8003b3e:	70da      	strb	r2, [r3, #3]

	// Simply lock the CS before transmitting and/or receiving
	LTC_CS_select();
 8003b40:	f7ff ffc6 	bl	8003ad0 <LTC_CS_select>
	HAL_SPI_Transmit(hltc, LTC_command_buffer, 4, LTC_COM_TIMEOUT);
 8003b44:	4b07      	ldr	r3, [pc, #28]	; (8003b64 <LTC_wake+0x64>)
 8003b46:	6818      	ldr	r0, [r3, #0]
 8003b48:	2300      	movs	r3, #0
 8003b4a:	2204      	movs	r2, #4
 8003b4c:	4904      	ldr	r1, [pc, #16]	; (8003b60 <LTC_wake+0x60>)
 8003b4e:	f00f fa1e 	bl	8012f8e <HAL_SPI_Transmit>
	LTC_CS_deselect();
 8003b52:	f7ff ffc9 	bl	8003ae8 <LTC_CS_deselect>

	return 1;
 8003b56:	2301      	movs	r3, #1
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3708      	adds	r7, #8
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}
 8003b60:	2001b7bc 	.word	0x2001b7bc
 8003b64:	2001b7ac 	.word	0x2001b7ac

08003b68 <LTC_command>:
 * @brief	A helper function which interfaces with SPI.
 * @param	Wether or not to wake the isoSPI port first
 * @param	Which command to be sent
 * @retval	LTC Status
 */
uint8_t LTC_command(uint8_t wake, uint16_t command) {
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b084      	sub	sp, #16
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	4603      	mov	r3, r0
 8003b70:	460a      	mov	r2, r1
 8003b72:	71fb      	strb	r3, [r7, #7]
 8003b74:	4613      	mov	r3, r2
 8003b76:	80bb      	strh	r3, [r7, #4]
	uint16_t pec;

	if (wake) {
 8003b78:	79fb      	ldrb	r3, [r7, #7]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d006      	beq.n	8003b8c <LTC_command+0x24>
		if (!LTC_wake()) {
 8003b7e:	f7ff ffbf 	bl	8003b00 <LTC_wake>
 8003b82:	4603      	mov	r3, r0
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d101      	bne.n	8003b8c <LTC_command+0x24>
			return 0;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	e025      	b.n	8003bd8 <LTC_command+0x70>
		}
	}

	LTC_command_buffer[0] = command >> 8;
 8003b8c:	88bb      	ldrh	r3, [r7, #4]
 8003b8e:	0a1b      	lsrs	r3, r3, #8
 8003b90:	b29b      	uxth	r3, r3
 8003b92:	b2da      	uxtb	r2, r3
 8003b94:	4b12      	ldr	r3, [pc, #72]	; (8003be0 <LTC_command+0x78>)
 8003b96:	701a      	strb	r2, [r3, #0]
	LTC_command_buffer[1] = command;
 8003b98:	88bb      	ldrh	r3, [r7, #4]
 8003b9a:	b2da      	uxtb	r2, r3
 8003b9c:	4b10      	ldr	r3, [pc, #64]	; (8003be0 <LTC_command+0x78>)
 8003b9e:	705a      	strb	r2, [r3, #1]
	pec = pec15_calc(2, LTC_command_buffer);
 8003ba0:	490f      	ldr	r1, [pc, #60]	; (8003be0 <LTC_command+0x78>)
 8003ba2:	2002      	movs	r0, #2
 8003ba4:	f7ff ff50 	bl	8003a48 <pec15_calc>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	81fb      	strh	r3, [r7, #14]
	LTC_command_buffer[2] = pec >> 8;
 8003bac:	89fb      	ldrh	r3, [r7, #14]
 8003bae:	0a1b      	lsrs	r3, r3, #8
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	b2da      	uxtb	r2, r3
 8003bb4:	4b0a      	ldr	r3, [pc, #40]	; (8003be0 <LTC_command+0x78>)
 8003bb6:	709a      	strb	r2, [r3, #2]
	LTC_command_buffer[3] = pec;
 8003bb8:	89fb      	ldrh	r3, [r7, #14]
 8003bba:	b2da      	uxtb	r2, r3
 8003bbc:	4b08      	ldr	r3, [pc, #32]	; (8003be0 <LTC_command+0x78>)
 8003bbe:	70da      	strb	r2, [r3, #3]

	LTC_CS_select();
 8003bc0:	f7ff ff86 	bl	8003ad0 <LTC_CS_select>
	HAL_SPI_Transmit(hltc, LTC_command_buffer, 4, LTC_COM_TIMEOUT);
 8003bc4:	4b07      	ldr	r3, [pc, #28]	; (8003be4 <LTC_command+0x7c>)
 8003bc6:	6818      	ldr	r0, [r3, #0]
 8003bc8:	2300      	movs	r3, #0
 8003bca:	2204      	movs	r2, #4
 8003bcc:	4904      	ldr	r1, [pc, #16]	; (8003be0 <LTC_command+0x78>)
 8003bce:	f00f f9de 	bl	8012f8e <HAL_SPI_Transmit>
	LTC_CS_deselect();
 8003bd2:	f7ff ff89 	bl	8003ae8 <LTC_CS_deselect>

	return 1;
 8003bd6:	2301      	movs	r3, #1
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3710      	adds	r7, #16
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}
 8003be0:	2001b7bc 	.word	0x2001b7bc
 8003be4:	2001b7ac 	.word	0x2001b7ac

08003be8 <LTC_read_command>:
 * @brief	A helper function which interfaces with SPI. Puts received data in LTC_read_buffer
 * @param	Whether or not to wake the isoSPI port first
 * @param	Which command the received data corresponds to
 * @retval	LTC Status
 */
uint8_t LTC_read_command(uint8_t wake, uint16_t command) {
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b084      	sub	sp, #16
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	4603      	mov	r3, r0
 8003bf0:	460a      	mov	r2, r1
 8003bf2:	71fb      	strb	r3, [r7, #7]
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	80bb      	strh	r3, [r7, #4]
	uint16_t pec;

	if (wake) {
 8003bf8:	79fb      	ldrb	r3, [r7, #7]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d006      	beq.n	8003c0c <LTC_read_command+0x24>
		if (!LTC_wake()) {
 8003bfe:	f7ff ff7f 	bl	8003b00 <LTC_wake>
 8003c02:	4603      	mov	r3, r0
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d101      	bne.n	8003c0c <LTC_read_command+0x24>
			return 0;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	e042      	b.n	8003c92 <LTC_read_command+0xaa>
		}
	}

	LTC_command_buffer[0] = command >> 8;
 8003c0c:	88bb      	ldrh	r3, [r7, #4]
 8003c0e:	0a1b      	lsrs	r3, r3, #8
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	b2da      	uxtb	r2, r3
 8003c14:	4b21      	ldr	r3, [pc, #132]	; (8003c9c <LTC_read_command+0xb4>)
 8003c16:	701a      	strb	r2, [r3, #0]
	LTC_command_buffer[1] = command;
 8003c18:	88bb      	ldrh	r3, [r7, #4]
 8003c1a:	b2da      	uxtb	r2, r3
 8003c1c:	4b1f      	ldr	r3, [pc, #124]	; (8003c9c <LTC_read_command+0xb4>)
 8003c1e:	705a      	strb	r2, [r3, #1]
	pec = pec15_calc(2, LTC_command_buffer);
 8003c20:	491e      	ldr	r1, [pc, #120]	; (8003c9c <LTC_read_command+0xb4>)
 8003c22:	2002      	movs	r0, #2
 8003c24:	f7ff ff10 	bl	8003a48 <pec15_calc>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	81fb      	strh	r3, [r7, #14]
	LTC_command_buffer[2] = pec >> 8;
 8003c2c:	89fb      	ldrh	r3, [r7, #14]
 8003c2e:	0a1b      	lsrs	r3, r3, #8
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	b2da      	uxtb	r2, r3
 8003c34:	4b19      	ldr	r3, [pc, #100]	; (8003c9c <LTC_read_command+0xb4>)
 8003c36:	709a      	strb	r2, [r3, #2]
	LTC_command_buffer[3] = pec;
 8003c38:	89fb      	ldrh	r3, [r7, #14]
 8003c3a:	b2da      	uxtb	r2, r3
 8003c3c:	4b17      	ldr	r3, [pc, #92]	; (8003c9c <LTC_read_command+0xb4>)
 8003c3e:	70da      	strb	r2, [r3, #3]

	// We receive at the same instance
	LTC_CS_select();
 8003c40:	f7ff ff46 	bl	8003ad0 <LTC_CS_select>
	HAL_SPI_Transmit(hltc, LTC_command_buffer, 4, LTC_COM_TIMEOUT);
 8003c44:	4b16      	ldr	r3, [pc, #88]	; (8003ca0 <LTC_read_command+0xb8>)
 8003c46:	6818      	ldr	r0, [r3, #0]
 8003c48:	2300      	movs	r3, #0
 8003c4a:	2204      	movs	r2, #4
 8003c4c:	4913      	ldr	r1, [pc, #76]	; (8003c9c <LTC_read_command+0xb4>)
 8003c4e:	f00f f99e 	bl	8012f8e <HAL_SPI_Transmit>
	HAL_SPI_Receive(hltc, LTC_read_buffer, 10, LTC_COM_TIMEOUT);
 8003c52:	4b13      	ldr	r3, [pc, #76]	; (8003ca0 <LTC_read_command+0xb8>)
 8003c54:	6818      	ldr	r0, [r3, #0]
 8003c56:	2300      	movs	r3, #0
 8003c58:	220a      	movs	r2, #10
 8003c5a:	4912      	ldr	r1, [pc, #72]	; (8003ca4 <LTC_read_command+0xbc>)
 8003c5c:	f00f fad3 	bl	8013206 <HAL_SPI_Receive>
	LTC_CS_deselect();
 8003c60:	f7ff ff42 	bl	8003ae8 <LTC_CS_deselect>

	// We should make sure that the data is correct
	pec = pec15_calc(8, LTC_read_buffer);
 8003c64:	490f      	ldr	r1, [pc, #60]	; (8003ca4 <LTC_read_command+0xbc>)
 8003c66:	2008      	movs	r0, #8
 8003c68:	f7ff feee 	bl	8003a48 <pec15_calc>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	81fb      	strh	r3, [r7, #14]

	// If there is a discrepancy we return an error code
	if (!((((pec >> 8) & 0xff) != LTC_read_buffer[8])
 8003c70:	89fb      	ldrh	r3, [r7, #14]
 8003c72:	0a1b      	lsrs	r3, r3, #8
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	4a0a      	ldr	r2, [pc, #40]	; (8003ca4 <LTC_read_command+0xbc>)
 8003c7a:	7a12      	ldrb	r2, [r2, #8]
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d005      	beq.n	8003c8c <LTC_read_command+0xa4>
			&& (((pec >> 0) & 0xff) != LTC_read_buffer[9]))) {
 8003c80:	89fb      	ldrh	r3, [r7, #14]
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	4a07      	ldr	r2, [pc, #28]	; (8003ca4 <LTC_read_command+0xbc>)
 8003c86:	7a52      	ldrb	r2, [r2, #9]
	if (!((((pec >> 8) & 0xff) != LTC_read_buffer[8])
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d101      	bne.n	8003c90 <LTC_read_command+0xa8>
		return 0;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	e000      	b.n	8003c92 <LTC_read_command+0xaa>
	}

	return 1;
 8003c90:	2301      	movs	r3, #1
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3710      	adds	r7, #16
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	bf00      	nop
 8003c9c:	2001b7bc 	.word	0x2001b7bc
 8003ca0:	2001b7ac 	.word	0x2001b7ac
 8003ca4:	2001b7b0 	.word	0x2001b7b0

08003ca8 <LTC_acquire_data>:
 * @brief	The function which acquires all of the cell temperatures and voltages, and places them in cell_voltages and cell_temperatures
 * @param	Whether or not to wake the isoSPI port beforehand
 * @param	LTC_ccv[n] is high if the n:th slave has given valid data
 * @retval	LTC Status
 */
uint8_t LTC_acquire_data(uint8_t wake) {
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b08a      	sub	sp, #40	; 0x28
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	4603      	mov	r3, r0
 8003cb0:	71fb      	strb	r3, [r7, #7]
	uint16_t all_read; /* LTC_ccv[n] might only be high if slave n was read (PEC correct, among other things) */
	uint16_t all_zeros; /* LTC_ccv[n] might only be high if the bits are not all zero, as this would constitute a zero voltage reference (or zeroed/floating cell voltages) */
	uint16_t all_ones; /* LTC_ccv[n] might only be high if the bits are not all ones, as this is indicative of the message being corrupted */
	uint16_t all_good; /* LTC_ccv[n] is high if this is high for slave n */

	LTC_ccv = 0;
 8003cb2:	4b51      	ldr	r3, [pc, #324]	; (8003df8 <LTC_acquire_data+0x150>)
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	801a      	strh	r2, [r3, #0]

	/* ADCV, MD = 10, PUP = 1, DCP = 0, CH = 000 */
	command = 0b0000001101110000;
 8003cb8:	f44f 735c 	mov.w	r3, #880	; 0x370
 8003cbc:	60fb      	str	r3, [r7, #12]

	LTC_command(wake, command);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	b29a      	uxth	r2, r3
 8003cc2:	79fb      	ldrb	r3, [r7, #7]
 8003cc4:	4611      	mov	r1, r2
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f7ff ff4e 	bl	8003b68 <LTC_command>

	//osDelay(configTICK_RATE_HZ * 0.02); // ~2 ms
	HAL_Delay(2);
 8003ccc:	2002      	movs	r0, #2
 8003cce:	f00c fca5 	bl	801061c <HAL_Delay>

	/* ADAX : MD = 10, PUP = 1, CH = 000 */
	command = 0b0000010101100000;
 8003cd2:	f44f 63ac 	mov.w	r3, #1376	; 0x560
 8003cd6:	60fb      	str	r3, [r7, #12]

	LTC_command(0, command);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	4619      	mov	r1, r3
 8003cde:	2000      	movs	r0, #0
 8003ce0:	f7ff ff42 	bl	8003b68 <LTC_command>

	//osDelay(configTICK_RATE_HZ * 0.02); // ~2 ms
	HAL_Delay(2);
 8003ce4:	2002      	movs	r0, #2
 8003ce6:	f00c fc99 	bl	801061c <HAL_Delay>

	// First we fill the cell_voltage buffer with the integer values
	p = 0;
 8003cea:	2300      	movs	r3, #0
 8003cec:	627b      	str	r3, [r7, #36]	; 0x24

	for (k = 0; k < 12; k++) { // 12 segments
 8003cee:	2300      	movs	r3, #0
 8003cf0:	623b      	str	r3, [r7, #32]
 8003cf2:	e074      	b.n	8003dde <LTC_acquire_data+0x136>
		all_read = 1;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	82fb      	strh	r3, [r7, #22]
		all_zeros = 1;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	82bb      	strh	r3, [r7, #20]
		all_read = 1;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	82fb      	strh	r3, [r7, #22]
		all_good = 0;
 8003d00:	2300      	movs	r3, #0
 8003d02:	817b      	strh	r3, [r7, #10]

		for (i = 0; i < 6; i++) {
 8003d04:	2300      	movs	r3, #0
 8003d06:	61fb      	str	r3, [r7, #28]
 8003d08:	e049      	b.n	8003d9e <LTC_acquire_data+0xf6>
			// We use the RDCVA command and increment it every pass to get RDCVB, RDCVC .. RDAUXB
			command = 0b1000000000000100 | (cellstack_address_map(k) << 11);
 8003d0a:	6a3b      	ldr	r3, [r7, #32]
 8003d0c:	02db      	lsls	r3, r3, #11
 8003d0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d12:	f043 0304 	orr.w	r3, r3, #4
 8003d16:	60fb      	str	r3, [r7, #12]
			command += 2 * i;
 8003d18:	69fb      	ldr	r3, [r7, #28]
 8003d1a:	005b      	lsls	r3, r3, #1
 8003d1c:	68fa      	ldr	r2, [r7, #12]
 8003d1e:	4413      	add	r3, r2
 8003d20:	60fb      	str	r3, [r7, #12]

			all_read &= LTC_read_command(0, command);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	4619      	mov	r1, r3
 8003d28:	2000      	movs	r0, #0
 8003d2a:	f7ff ff5d 	bl	8003be8 <LTC_read_command>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	b29a      	uxth	r2, r3
 8003d32:	8afb      	ldrh	r3, [r7, #22]
 8003d34:	4013      	ands	r3, r2
 8003d36:	82fb      	strh	r3, [r7, #22]

			for (j = 0; j < 3; j++) {
 8003d38:	2300      	movs	r3, #0
 8003d3a:	61bb      	str	r3, [r7, #24]
 8003d3c:	e029      	b.n	8003d92 <LTC_acquire_data+0xea>
				LTC_data[p] = LTC_read_buffer[2 * j]
 8003d3e:	69bb      	ldr	r3, [r7, #24]
 8003d40:	005b      	lsls	r3, r3, #1
 8003d42:	4a2e      	ldr	r2, [pc, #184]	; (8003dfc <LTC_acquire_data+0x154>)
 8003d44:	5cd3      	ldrb	r3, [r2, r3]
 8003d46:	b21a      	sxth	r2, r3
						| (LTC_read_buffer[2 * j + 1] << 8);
 8003d48:	69bb      	ldr	r3, [r7, #24]
 8003d4a:	005b      	lsls	r3, r3, #1
 8003d4c:	3301      	adds	r3, #1
 8003d4e:	492b      	ldr	r1, [pc, #172]	; (8003dfc <LTC_acquire_data+0x154>)
 8003d50:	5ccb      	ldrb	r3, [r1, r3]
 8003d52:	021b      	lsls	r3, r3, #8
 8003d54:	b21b      	sxth	r3, r3
 8003d56:	4313      	orrs	r3, r2
 8003d58:	b21b      	sxth	r3, r3
 8003d5a:	b299      	uxth	r1, r3
				LTC_data[p] = LTC_read_buffer[2 * j]
 8003d5c:	4a28      	ldr	r2, [pc, #160]	; (8003e00 <LTC_acquire_data+0x158>)
 8003d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d60:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

				all_zeros &= (LTC_data[p] == 0);
 8003d64:	4a26      	ldr	r2, [pc, #152]	; (8003e00 <LTC_acquire_data+0x158>)
 8003d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	bf0c      	ite	eq
 8003d70:	2301      	moveq	r3, #1
 8003d72:	2300      	movne	r3, #0
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	b21a      	sxth	r2, r3
 8003d78:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	b21b      	sxth	r3, r3
 8003d80:	82bb      	strh	r3, [r7, #20]
				all_ones &= (LTC_data[p] == -1);
 8003d82:	2300      	movs	r3, #0
 8003d84:	827b      	strh	r3, [r7, #18]

				p++;
 8003d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d88:	3301      	adds	r3, #1
 8003d8a:	627b      	str	r3, [r7, #36]	; 0x24
			for (j = 0; j < 3; j++) {
 8003d8c:	69bb      	ldr	r3, [r7, #24]
 8003d8e:	3301      	adds	r3, #1
 8003d90:	61bb      	str	r3, [r7, #24]
 8003d92:	69bb      	ldr	r3, [r7, #24]
 8003d94:	2b02      	cmp	r3, #2
 8003d96:	ddd2      	ble.n	8003d3e <LTC_acquire_data+0x96>
		for (i = 0; i < 6; i++) {
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	3301      	adds	r3, #1
 8003d9c:	61fb      	str	r3, [r7, #28]
 8003d9e:	69fb      	ldr	r3, [r7, #28]
 8003da0:	2b05      	cmp	r3, #5
 8003da2:	ddb2      	ble.n	8003d0a <LTC_acquire_data+0x62>
			}
		}

		all_good = (all_read && !all_zeros && !all_ones);
 8003da4:	8afb      	ldrh	r3, [r7, #22]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d007      	beq.n	8003dba <LTC_acquire_data+0x112>
 8003daa:	8abb      	ldrh	r3, [r7, #20]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d104      	bne.n	8003dba <LTC_acquire_data+0x112>
 8003db0:	8a7b      	ldrh	r3, [r7, #18]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d101      	bne.n	8003dba <LTC_acquire_data+0x112>
 8003db6:	2301      	movs	r3, #1
 8003db8:	e000      	b.n	8003dbc <LTC_acquire_data+0x114>
 8003dba:	2300      	movs	r3, #0
 8003dbc:	817b      	strh	r3, [r7, #10]
		LTC_ccv |= (all_good << k);
 8003dbe:	897a      	ldrh	r2, [r7, #10]
 8003dc0:	6a3b      	ldr	r3, [r7, #32]
 8003dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc6:	b21a      	sxth	r2, r3
 8003dc8:	4b0b      	ldr	r3, [pc, #44]	; (8003df8 <LTC_acquire_data+0x150>)
 8003dca:	881b      	ldrh	r3, [r3, #0]
 8003dcc:	b21b      	sxth	r3, r3
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	b21b      	sxth	r3, r3
 8003dd2:	b29a      	uxth	r2, r3
 8003dd4:	4b08      	ldr	r3, [pc, #32]	; (8003df8 <LTC_acquire_data+0x150>)
 8003dd6:	801a      	strh	r2, [r3, #0]
	for (k = 0; k < 12; k++) { // 12 segments
 8003dd8:	6a3b      	ldr	r3, [r7, #32]
 8003dda:	3301      	adds	r3, #1
 8003ddc:	623b      	str	r3, [r7, #32]
 8003dde:	6a3b      	ldr	r3, [r7, #32]
 8003de0:	2b0b      	cmp	r3, #11
 8003de2:	dd87      	ble.n	8003cf4 <LTC_acquire_data+0x4c>
	}

	LTC_make_voltages();
 8003de4:	f000 f810 	bl	8003e08 <LTC_make_voltages>
	LTC_make_temperatures();
 8003de8:	f000 f85a 	bl	8003ea0 <LTC_make_temperatures>

	return 1;
 8003dec:	2301      	movs	r3, #1
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3728      	adds	r7, #40	; 0x28
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	bf00      	nop
 8003df8:	2001b79c 	.word	0x2001b79c
 8003dfc:	2001b7b0 	.word	0x2001b7b0
 8003e00:	2001b9b8 	.word	0x2001b9b8
 8003e04:	00000000 	.word	0x00000000

08003e08 <LTC_make_voltages>:
#define cellstack_voltage_count(cellstack) (11 - (cellstack % 2))
/*
 * @brief	A function which takes data from LTC_data and translates it into LTC_voltages
 * @retval	1 if successful
 */
uint8_t LTC_make_voltages(void) {
 8003e08:	b590      	push	{r4, r7, lr}
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	af00      	add	r7, sp, #0
	uint16_t cellstack, K, k, p;

	p = 0;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	807b      	strh	r3, [r7, #2]

	for (cellstack = 0; cellstack < 12; cellstack++) {
 8003e12:	2300      	movs	r3, #0
 8003e14:	80fb      	strh	r3, [r7, #6]
 8003e16:	e032      	b.n	8003e7e <LTC_make_voltages+0x76>
		K = cellstack_voltage_count(cellstack);
 8003e18:	88fb      	ldrh	r3, [r7, #6]
 8003e1a:	f003 0301 	and.w	r3, r3, #1
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	f1c3 030b 	rsb	r3, r3, #11
 8003e24:	803b      	strh	r3, [r7, #0]
		for (k = 0; k < K; k++) {
 8003e26:	2300      	movs	r3, #0
 8003e28:	80bb      	strh	r3, [r7, #4]
 8003e2a:	e021      	b.n	8003e70 <LTC_make_voltages+0x68>
			LTC_voltages[p] = 0.0001 * LTC_data[18 * cellstack + k];
 8003e2c:	88fa      	ldrh	r2, [r7, #6]
 8003e2e:	4613      	mov	r3, r2
 8003e30:	00db      	lsls	r3, r3, #3
 8003e32:	4413      	add	r3, r2
 8003e34:	005b      	lsls	r3, r3, #1
 8003e36:	461a      	mov	r2, r3
 8003e38:	88bb      	ldrh	r3, [r7, #4]
 8003e3a:	4413      	add	r3, r2
 8003e3c:	4a16      	ldr	r2, [pc, #88]	; (8003e98 <LTC_make_voltages+0x90>)
 8003e3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003e42:	4618      	mov	r0, r3
 8003e44:	f7fc fb60 	bl	8000508 <__aeabi_i2d>
 8003e48:	a311      	add	r3, pc, #68	; (adr r3, 8003e90 <LTC_make_voltages+0x88>)
 8003e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e4e:	f7fc fbc5 	bl	80005dc <__aeabi_dmul>
 8003e52:	4602      	mov	r2, r0
 8003e54:	460b      	mov	r3, r1
 8003e56:	887c      	ldrh	r4, [r7, #2]
 8003e58:	4610      	mov	r0, r2
 8003e5a:	4619      	mov	r1, r3
 8003e5c:	f7fc feb6 	bl	8000bcc <__aeabi_d2f>
 8003e60:	4602      	mov	r2, r0
 8003e62:	490e      	ldr	r1, [pc, #56]	; (8003e9c <LTC_make_voltages+0x94>)
 8003e64:	00a3      	lsls	r3, r4, #2
 8003e66:	440b      	add	r3, r1
 8003e68:	601a      	str	r2, [r3, #0]
		for (k = 0; k < K; k++) {
 8003e6a:	88bb      	ldrh	r3, [r7, #4]
 8003e6c:	3301      	adds	r3, #1
 8003e6e:	80bb      	strh	r3, [r7, #4]
 8003e70:	88ba      	ldrh	r2, [r7, #4]
 8003e72:	883b      	ldrh	r3, [r7, #0]
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d3d9      	bcc.n	8003e2c <LTC_make_voltages+0x24>
	for (cellstack = 0; cellstack < 12; cellstack++) {
 8003e78:	88fb      	ldrh	r3, [r7, #6]
 8003e7a:	3301      	adds	r3, #1
 8003e7c:	80fb      	strh	r3, [r7, #6]
 8003e7e:	88fb      	ldrh	r3, [r7, #6]
 8003e80:	2b0b      	cmp	r3, #11
 8003e82:	d9c9      	bls.n	8003e18 <LTC_make_voltages+0x10>
		}
	}

	return 1;
 8003e84:	2301      	movs	r3, #1
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	370c      	adds	r7, #12
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd90      	pop	{r4, r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	eb1c432d 	.word	0xeb1c432d
 8003e94:	3f1a36e2 	.word	0x3f1a36e2
 8003e98:	2001b9b8 	.word	0x2001b9b8
 8003e9c:	2001b7c0 	.word	0x2001b7c0

08003ea0 <LTC_make_temperatures>:

/*
 * @brief	A function which takes data from LTC_data and translates it into LTC_temperatures
 * @retval	1 if successful
 */
uint8_t LTC_make_temperatures(void) {
 8003ea0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003ea4:	b086      	sub	sp, #24
 8003ea6:	af00      	add	r7, sp, #0
	uint16_t cellstack, K, k, p;

	float beta = 3500;
 8003ea8:	4b61      	ldr	r3, [pc, #388]	; (8004030 <LTC_make_temperatures+0x190>)
 8003eaa:	613b      	str	r3, [r7, #16]
	float temp = 25 + 273.15;
 8003eac:	4b61      	ldr	r3, [pc, #388]	; (8004034 <LTC_make_temperatures+0x194>)
 8003eae:	60fb      	str	r3, [r7, #12]
	float R0 = 10000 * exp(-beta / temp);
 8003eb0:	edd7 7a04 	vldr	s15, [r7, #16]
 8003eb4:	eeb1 7a67 	vneg.f32	s14, s15
 8003eb8:	edd7 7a03 	vldr	s15, [r7, #12]
 8003ebc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003ec0:	ee16 0a90 	vmov	r0, s13
 8003ec4:	f7fc fb32 	bl	800052c <__aeabi_f2d>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	460b      	mov	r3, r1
 8003ecc:	ec43 2b10 	vmov	d0, r2, r3
 8003ed0:	f016 f882 	bl	8019fd8 <exp>
 8003ed4:	ec51 0b10 	vmov	r0, r1, d0
 8003ed8:	a351      	add	r3, pc, #324	; (adr r3, 8004020 <LTC_make_temperatures+0x180>)
 8003eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ede:	f7fc fb7d 	bl	80005dc <__aeabi_dmul>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	460b      	mov	r3, r1
 8003ee6:	4610      	mov	r0, r2
 8003ee8:	4619      	mov	r1, r3
 8003eea:	f7fc fe6f 	bl	8000bcc <__aeabi_d2f>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	60bb      	str	r3, [r7, #8]
	float R = 10000;
 8003ef2:	4b51      	ldr	r3, [pc, #324]	; (8004038 <LTC_make_temperatures+0x198>)
 8003ef4:	607b      	str	r3, [r7, #4]

	p = 0;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	807b      	strh	r3, [r7, #2]

	for (cellstack = 0; cellstack < 12; cellstack++) {
 8003efa:	2300      	movs	r3, #0
 8003efc:	82fb      	strh	r3, [r7, #22]
 8003efe:	e082      	b.n	8004006 <LTC_make_temperatures+0x166>
		K = 5;
 8003f00:	2305      	movs	r3, #5
 8003f02:	803b      	strh	r3, [r7, #0]

		for (k = 0; k < K; k++) {
 8003f04:	2300      	movs	r3, #0
 8003f06:	82bb      	strh	r3, [r7, #20]
 8003f08:	e076      	b.n	8003ff8 <LTC_make_temperatures+0x158>
			LTC_temperatures[p] = beta
					/ (log(R * LTC_data[18 * cellstack + 12 + k])
 8003f0a:	6938      	ldr	r0, [r7, #16]
 8003f0c:	f7fc fb0e 	bl	800052c <__aeabi_f2d>
 8003f10:	4604      	mov	r4, r0
 8003f12:	460d      	mov	r5, r1
 8003f14:	8afa      	ldrh	r2, [r7, #22]
 8003f16:	4613      	mov	r3, r2
 8003f18:	00db      	lsls	r3, r3, #3
 8003f1a:	4413      	add	r3, r2
 8003f1c:	005b      	lsls	r3, r3, #1
 8003f1e:	f103 020c 	add.w	r2, r3, #12
 8003f22:	8abb      	ldrh	r3, [r7, #20]
 8003f24:	4413      	add	r3, r2
 8003f26:	4a45      	ldr	r2, [pc, #276]	; (800403c <LTC_make_temperatures+0x19c>)
 8003f28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003f2c:	ee07 3a90 	vmov	s15, r3
 8003f30:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f34:	edd7 7a01 	vldr	s15, [r7, #4]
 8003f38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f3c:	ee17 0a90 	vmov	r0, s15
 8003f40:	f7fc faf4 	bl	800052c <__aeabi_f2d>
 8003f44:	4602      	mov	r2, r0
 8003f46:	460b      	mov	r3, r1
 8003f48:	ec43 2b10 	vmov	d0, r2, r3
 8003f4c:	f016 f894 	bl	801a078 <log>
 8003f50:	ec59 8b10 	vmov	r8, r9, d0
							- log(
									-R0
 8003f54:	edd7 7a02 	vldr	s15, [r7, #8]
 8003f58:	eeb1 7a67 	vneg.f32	s14, s15
											* (LTC_data[18 * cellstack + 12 + k]
 8003f5c:	8afa      	ldrh	r2, [r7, #22]
 8003f5e:	4613      	mov	r3, r2
 8003f60:	00db      	lsls	r3, r3, #3
 8003f62:	4413      	add	r3, r2
 8003f64:	005b      	lsls	r3, r3, #1
 8003f66:	f103 020c 	add.w	r2, r3, #12
 8003f6a:	8abb      	ldrh	r3, [r7, #20]
 8003f6c:	4413      	add	r3, r2
 8003f6e:	4a33      	ldr	r2, [pc, #204]	; (800403c <LTC_make_temperatures+0x19c>)
 8003f70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003f74:	4619      	mov	r1, r3
													- LTC_data[18 * cellstack
 8003f76:	8afa      	ldrh	r2, [r7, #22]
 8003f78:	4613      	mov	r3, r2
 8003f7a:	00db      	lsls	r3, r3, #3
 8003f7c:	4413      	add	r3, r2
 8003f7e:	005b      	lsls	r3, r3, #1
															+ 12 + K])))
 8003f80:	f103 020c 	add.w	r2, r3, #12
 8003f84:	883b      	ldrh	r3, [r7, #0]
 8003f86:	4413      	add	r3, r2
													- LTC_data[18 * cellstack
 8003f88:	4a2c      	ldr	r2, [pc, #176]	; (800403c <LTC_make_temperatures+0x19c>)
 8003f8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003f8e:	1acb      	subs	r3, r1, r3
											* (LTC_data[18 * cellstack + 12 + k]
 8003f90:	ee07 3a90 	vmov	s15, r3
 8003f94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f98:	ee67 7a27 	vmul.f32	s15, s14, s15
							- log(
 8003f9c:	ee17 0a90 	vmov	r0, s15
 8003fa0:	f7fc fac4 	bl	800052c <__aeabi_f2d>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	460b      	mov	r3, r1
 8003fa8:	ec43 2b10 	vmov	d0, r2, r3
 8003fac:	f016 f864 	bl	801a078 <log>
 8003fb0:	ec53 2b10 	vmov	r2, r3, d0
 8003fb4:	4640      	mov	r0, r8
 8003fb6:	4649      	mov	r1, r9
 8003fb8:	f7fc f958 	bl	800026c <__aeabi_dsub>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	460b      	mov	r3, r1
					/ (log(R * LTC_data[18 * cellstack + 12 + k])
 8003fc0:	4620      	mov	r0, r4
 8003fc2:	4629      	mov	r1, r5
 8003fc4:	f7fc fc34 	bl	8000830 <__aeabi_ddiv>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	460b      	mov	r3, r1
 8003fcc:	4610      	mov	r0, r2
 8003fce:	4619      	mov	r1, r3
					- 273.15;
 8003fd0:	a315      	add	r3, pc, #84	; (adr r3, 8004028 <LTC_make_temperatures+0x188>)
 8003fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fd6:	f7fc f949 	bl	800026c <__aeabi_dsub>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	460b      	mov	r3, r1
			LTC_temperatures[p] = beta
 8003fde:	887c      	ldrh	r4, [r7, #2]
					- 273.15;
 8003fe0:	4610      	mov	r0, r2
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	f7fc fdf2 	bl	8000bcc <__aeabi_d2f>
 8003fe8:	4602      	mov	r2, r0
			LTC_temperatures[p] = beta
 8003fea:	4915      	ldr	r1, [pc, #84]	; (8004040 <LTC_make_temperatures+0x1a0>)
 8003fec:	00a3      	lsls	r3, r4, #2
 8003fee:	440b      	add	r3, r1
 8003ff0:	601a      	str	r2, [r3, #0]
		for (k = 0; k < K; k++) {
 8003ff2:	8abb      	ldrh	r3, [r7, #20]
 8003ff4:	3301      	adds	r3, #1
 8003ff6:	82bb      	strh	r3, [r7, #20]
 8003ff8:	8aba      	ldrh	r2, [r7, #20]
 8003ffa:	883b      	ldrh	r3, [r7, #0]
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d384      	bcc.n	8003f0a <LTC_make_temperatures+0x6a>
	for (cellstack = 0; cellstack < 12; cellstack++) {
 8004000:	8afb      	ldrh	r3, [r7, #22]
 8004002:	3301      	adds	r3, #1
 8004004:	82fb      	strh	r3, [r7, #22]
 8004006:	8afb      	ldrh	r3, [r7, #22]
 8004008:	2b0b      	cmp	r3, #11
 800400a:	f67f af79 	bls.w	8003f00 <LTC_make_temperatures+0x60>

		}
	}

	return 1;
 800400e:	2301      	movs	r3, #1
}
 8004010:	4618      	mov	r0, r3
 8004012:	3718      	adds	r7, #24
 8004014:	46bd      	mov	sp, r7
 8004016:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800401a:	bf00      	nop
 800401c:	f3af 8000 	nop.w
 8004020:	00000000 	.word	0x00000000
 8004024:	40c38800 	.word	0x40c38800
 8004028:	66666666 	.word	0x66666666
 800402c:	40711266 	.word	0x40711266
 8004030:	455ac000 	.word	0x455ac000
 8004034:	43951333 	.word	0x43951333
 8004038:	461c4000 	.word	0x461c4000
 800403c:	2001b9b8 	.word	0x2001b9b8
 8004040:	2001bb68 	.word	0x2001bb68

08004044 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8004048:	4b17      	ldr	r3, [pc, #92]	; (80040a8 <MX_SPI2_Init+0x64>)
 800404a:	4a18      	ldr	r2, [pc, #96]	; (80040ac <MX_SPI2_Init+0x68>)
 800404c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800404e:	4b16      	ldr	r3, [pc, #88]	; (80040a8 <MX_SPI2_Init+0x64>)
 8004050:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004054:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8004056:	4b14      	ldr	r3, [pc, #80]	; (80040a8 <MX_SPI2_Init+0x64>)
 8004058:	2200      	movs	r2, #0
 800405a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800405c:	4b12      	ldr	r3, [pc, #72]	; (80040a8 <MX_SPI2_Init+0x64>)
 800405e:	2200      	movs	r2, #0
 8004060:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004062:	4b11      	ldr	r3, [pc, #68]	; (80040a8 <MX_SPI2_Init+0x64>)
 8004064:	2200      	movs	r2, #0
 8004066:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004068:	4b0f      	ldr	r3, [pc, #60]	; (80040a8 <MX_SPI2_Init+0x64>)
 800406a:	2200      	movs	r2, #0
 800406c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800406e:	4b0e      	ldr	r3, [pc, #56]	; (80040a8 <MX_SPI2_Init+0x64>)
 8004070:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004074:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8004076:	4b0c      	ldr	r3, [pc, #48]	; (80040a8 <MX_SPI2_Init+0x64>)
 8004078:	2220      	movs	r2, #32
 800407a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800407c:	4b0a      	ldr	r3, [pc, #40]	; (80040a8 <MX_SPI2_Init+0x64>)
 800407e:	2200      	movs	r2, #0
 8004080:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004082:	4b09      	ldr	r3, [pc, #36]	; (80040a8 <MX_SPI2_Init+0x64>)
 8004084:	2200      	movs	r2, #0
 8004086:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004088:	4b07      	ldr	r3, [pc, #28]	; (80040a8 <MX_SPI2_Init+0x64>)
 800408a:	2200      	movs	r2, #0
 800408c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800408e:	4b06      	ldr	r3, [pc, #24]	; (80040a8 <MX_SPI2_Init+0x64>)
 8004090:	220a      	movs	r2, #10
 8004092:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004094:	4804      	ldr	r0, [pc, #16]	; (80040a8 <MX_SPI2_Init+0x64>)
 8004096:	f00e fef1 	bl	8012e7c <HAL_SPI_Init>
 800409a:	4603      	mov	r3, r0
 800409c:	2b00      	cmp	r3, #0
 800409e:	d001      	beq.n	80040a4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80040a0:	f7ff fc26 	bl	80038f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80040a4:	bf00      	nop
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	2001bc58 	.word	0x2001bc58
 80040ac:	40003800 	.word	0x40003800

080040b0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b08a      	sub	sp, #40	; 0x28
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040b8:	f107 0314 	add.w	r3, r7, #20
 80040bc:	2200      	movs	r2, #0
 80040be:	601a      	str	r2, [r3, #0]
 80040c0:	605a      	str	r2, [r3, #4]
 80040c2:	609a      	str	r2, [r3, #8]
 80040c4:	60da      	str	r2, [r3, #12]
 80040c6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a28      	ldr	r2, [pc, #160]	; (8004170 <HAL_SPI_MspInit+0xc0>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d14a      	bne.n	8004168 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80040d2:	2300      	movs	r3, #0
 80040d4:	613b      	str	r3, [r7, #16]
 80040d6:	4b27      	ldr	r3, [pc, #156]	; (8004174 <HAL_SPI_MspInit+0xc4>)
 80040d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040da:	4a26      	ldr	r2, [pc, #152]	; (8004174 <HAL_SPI_MspInit+0xc4>)
 80040dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80040e0:	6413      	str	r3, [r2, #64]	; 0x40
 80040e2:	4b24      	ldr	r3, [pc, #144]	; (8004174 <HAL_SPI_MspInit+0xc4>)
 80040e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040ea:	613b      	str	r3, [r7, #16]
 80040ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80040ee:	2300      	movs	r3, #0
 80040f0:	60fb      	str	r3, [r7, #12]
 80040f2:	4b20      	ldr	r3, [pc, #128]	; (8004174 <HAL_SPI_MspInit+0xc4>)
 80040f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f6:	4a1f      	ldr	r2, [pc, #124]	; (8004174 <HAL_SPI_MspInit+0xc4>)
 80040f8:	f043 0304 	orr.w	r3, r3, #4
 80040fc:	6313      	str	r3, [r2, #48]	; 0x30
 80040fe:	4b1d      	ldr	r3, [pc, #116]	; (8004174 <HAL_SPI_MspInit+0xc4>)
 8004100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004102:	f003 0304 	and.w	r3, r3, #4
 8004106:	60fb      	str	r3, [r7, #12]
 8004108:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800410a:	2300      	movs	r3, #0
 800410c:	60bb      	str	r3, [r7, #8]
 800410e:	4b19      	ldr	r3, [pc, #100]	; (8004174 <HAL_SPI_MspInit+0xc4>)
 8004110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004112:	4a18      	ldr	r2, [pc, #96]	; (8004174 <HAL_SPI_MspInit+0xc4>)
 8004114:	f043 0302 	orr.w	r3, r3, #2
 8004118:	6313      	str	r3, [r2, #48]	; 0x30
 800411a:	4b16      	ldr	r3, [pc, #88]	; (8004174 <HAL_SPI_MspInit+0xc4>)
 800411c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800411e:	f003 0302 	and.w	r3, r3, #2
 8004122:	60bb      	str	r3, [r7, #8]
 8004124:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004126:	230c      	movs	r3, #12
 8004128:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800412a:	2302      	movs	r3, #2
 800412c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800412e:	2300      	movs	r3, #0
 8004130:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004132:	2303      	movs	r3, #3
 8004134:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004136:	2305      	movs	r3, #5
 8004138:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800413a:	f107 0314 	add.w	r3, r7, #20
 800413e:	4619      	mov	r1, r3
 8004140:	480d      	ldr	r0, [pc, #52]	; (8004178 <HAL_SPI_MspInit+0xc8>)
 8004142:	f00e f86f 	bl	8012224 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004146:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800414a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800414c:	2302      	movs	r3, #2
 800414e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004150:	2300      	movs	r3, #0
 8004152:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004154:	2303      	movs	r3, #3
 8004156:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004158:	2305      	movs	r3, #5
 800415a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800415c:	f107 0314 	add.w	r3, r7, #20
 8004160:	4619      	mov	r1, r3
 8004162:	4806      	ldr	r0, [pc, #24]	; (800417c <HAL_SPI_MspInit+0xcc>)
 8004164:	f00e f85e 	bl	8012224 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8004168:	bf00      	nop
 800416a:	3728      	adds	r7, #40	; 0x28
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}
 8004170:	40003800 	.word	0x40003800
 8004174:	40023800 	.word	0x40023800
 8004178:	40020800 	.word	0x40020800
 800417c:	40020400 	.word	0x40020400

08004180 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b082      	sub	sp, #8
 8004184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004186:	2300      	movs	r3, #0
 8004188:	607b      	str	r3, [r7, #4]
 800418a:	4b12      	ldr	r3, [pc, #72]	; (80041d4 <HAL_MspInit+0x54>)
 800418c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800418e:	4a11      	ldr	r2, [pc, #68]	; (80041d4 <HAL_MspInit+0x54>)
 8004190:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004194:	6453      	str	r3, [r2, #68]	; 0x44
 8004196:	4b0f      	ldr	r3, [pc, #60]	; (80041d4 <HAL_MspInit+0x54>)
 8004198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800419a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800419e:	607b      	str	r3, [r7, #4]
 80041a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80041a2:	2300      	movs	r3, #0
 80041a4:	603b      	str	r3, [r7, #0]
 80041a6:	4b0b      	ldr	r3, [pc, #44]	; (80041d4 <HAL_MspInit+0x54>)
 80041a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041aa:	4a0a      	ldr	r2, [pc, #40]	; (80041d4 <HAL_MspInit+0x54>)
 80041ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041b0:	6413      	str	r3, [r2, #64]	; 0x40
 80041b2:	4b08      	ldr	r3, [pc, #32]	; (80041d4 <HAL_MspInit+0x54>)
 80041b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041ba:	603b      	str	r3, [r7, #0]
 80041bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80041be:	2200      	movs	r2, #0
 80041c0:	210f      	movs	r1, #15
 80041c2:	f06f 0001 	mvn.w	r0, #1
 80041c6:	f00d fc93 	bl	8011af0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80041ca:	bf00      	nop
 80041cc:	3708      	adds	r7, #8
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	bf00      	nop
 80041d4:	40023800 	.word	0x40023800

080041d8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b08c      	sub	sp, #48	; 0x30
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80041e0:	2300      	movs	r3, #0
 80041e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80041e4:	2300      	movs	r3, #0
 80041e6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 80041e8:	2200      	movs	r2, #0
 80041ea:	6879      	ldr	r1, [r7, #4]
 80041ec:	2032      	movs	r0, #50	; 0x32
 80041ee:	f00d fc7f 	bl	8011af0 <HAL_NVIC_SetPriority>

  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80041f2:	2032      	movs	r0, #50	; 0x32
 80041f4:	f00d fc98 	bl	8011b28 <HAL_NVIC_EnableIRQ>

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 80041f8:	2300      	movs	r3, #0
 80041fa:	60fb      	str	r3, [r7, #12]
 80041fc:	4b1f      	ldr	r3, [pc, #124]	; (800427c <HAL_InitTick+0xa4>)
 80041fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004200:	4a1e      	ldr	r2, [pc, #120]	; (800427c <HAL_InitTick+0xa4>)
 8004202:	f043 0308 	orr.w	r3, r3, #8
 8004206:	6413      	str	r3, [r2, #64]	; 0x40
 8004208:	4b1c      	ldr	r3, [pc, #112]	; (800427c <HAL_InitTick+0xa4>)
 800420a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420c:	f003 0308 	and.w	r3, r3, #8
 8004210:	60fb      	str	r3, [r7, #12]
 8004212:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004214:	f107 0210 	add.w	r2, r7, #16
 8004218:	f107 0314 	add.w	r3, r7, #20
 800421c:	4611      	mov	r1, r2
 800421e:	4618      	mov	r0, r3
 8004220:	f00e fdfa 	bl	8012e18 <HAL_RCC_GetClockConfig>

  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8004224:	f00e fde4 	bl	8012df0 <HAL_RCC_GetPCLK1Freq>
 8004228:	4603      	mov	r3, r0
 800422a:	005b      	lsls	r3, r3, #1
 800422c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800422e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004230:	4a13      	ldr	r2, [pc, #76]	; (8004280 <HAL_InitTick+0xa8>)
 8004232:	fba2 2303 	umull	r2, r3, r2, r3
 8004236:	0c9b      	lsrs	r3, r3, #18
 8004238:	3b01      	subs	r3, #1
 800423a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 800423c:	4b11      	ldr	r3, [pc, #68]	; (8004284 <HAL_InitTick+0xac>)
 800423e:	4a12      	ldr	r2, [pc, #72]	; (8004288 <HAL_InitTick+0xb0>)
 8004240:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8004242:	4b10      	ldr	r3, [pc, #64]	; (8004284 <HAL_InitTick+0xac>)
 8004244:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004248:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 800424a:	4a0e      	ldr	r2, [pc, #56]	; (8004284 <HAL_InitTick+0xac>)
 800424c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800424e:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8004250:	4b0c      	ldr	r3, [pc, #48]	; (8004284 <HAL_InitTick+0xac>)
 8004252:	2200      	movs	r2, #0
 8004254:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004256:	4b0b      	ldr	r3, [pc, #44]	; (8004284 <HAL_InitTick+0xac>)
 8004258:	2200      	movs	r2, #0
 800425a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 800425c:	4809      	ldr	r0, [pc, #36]	; (8004284 <HAL_InitTick+0xac>)
 800425e:	f00f fbb5 	bl	80139cc <HAL_TIM_Base_Init>
 8004262:	4603      	mov	r3, r0
 8004264:	2b00      	cmp	r3, #0
 8004266:	d104      	bne.n	8004272 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8004268:	4806      	ldr	r0, [pc, #24]	; (8004284 <HAL_InitTick+0xac>)
 800426a:	f00f fc67 	bl	8013b3c <HAL_TIM_Base_Start_IT>
 800426e:	4603      	mov	r3, r0
 8004270:	e000      	b.n	8004274 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
}
 8004274:	4618      	mov	r0, r3
 8004276:	3730      	adds	r7, #48	; 0x30
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}
 800427c:	40023800 	.word	0x40023800
 8004280:	431bde83 	.word	0x431bde83
 8004284:	2001bcb0 	.word	0x2001bcb0
 8004288:	40000c00 	.word	0x40000c00

0800428c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800428c:	b480      	push	{r7}
 800428e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004290:	e7fe      	b.n	8004290 <NMI_Handler+0x4>

08004292 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004292:	b480      	push	{r7}
 8004294:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004296:	e7fe      	b.n	8004296 <HardFault_Handler+0x4>

08004298 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004298:	b480      	push	{r7}
 800429a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800429c:	e7fe      	b.n	800429c <MemManage_Handler+0x4>

0800429e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800429e:	b480      	push	{r7}
 80042a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80042a2:	e7fe      	b.n	80042a2 <BusFault_Handler+0x4>

080042a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80042a4:	b480      	push	{r7}
 80042a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80042a8:	e7fe      	b.n	80042a8 <UsageFault_Handler+0x4>

080042aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80042aa:	b480      	push	{r7}
 80042ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80042ae:	bf00      	nop
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr

080042b8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80042bc:	4802      	ldr	r0, [pc, #8]	; (80042c8 <ADC_IRQHandler+0x10>)
 80042be:	f00c fa14 	bl	80106ea <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80042c2:	bf00      	nop
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	bf00      	nop
 80042c8:	2001b59c 	.word	0x2001b59c

080042cc <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80042d0:	4802      	ldr	r0, [pc, #8]	; (80042dc <CAN1_TX_IRQHandler+0x10>)
 80042d2:	f00d f930 	bl	8011536 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 80042d6:	bf00      	nop
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	bf00      	nop
 80042dc:	2001b66c 	.word	0x2001b66c

080042e0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80042e4:	4802      	ldr	r0, [pc, #8]	; (80042f0 <CAN1_RX0_IRQHandler+0x10>)
 80042e6:	f00d f926 	bl	8011536 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80042ea:	bf00      	nop
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	bf00      	nop
 80042f0:	2001b66c 	.word	0x2001b66c

080042f4 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80042f8:	4802      	ldr	r0, [pc, #8]	; (8004304 <CAN1_RX1_IRQHandler+0x10>)
 80042fa:	f00d f91c 	bl	8011536 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80042fe:	bf00      	nop
 8004300:	bd80      	pop	{r7, pc}
 8004302:	bf00      	nop
 8004304:	2001b66c 	.word	0x2001b66c

08004308 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800430c:	4802      	ldr	r0, [pc, #8]	; (8004318 <TIM2_IRQHandler+0x10>)
 800430e:	f010 f805 	bl	801431c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004312:	bf00      	nop
 8004314:	bd80      	pop	{r7, pc}
 8004316:	bf00      	nop
 8004318:	2001bd88 	.word	0x2001bd88

0800431c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004320:	4802      	ldr	r0, [pc, #8]	; (800432c <TIM3_IRQHandler+0x10>)
 8004322:	f00f fffb 	bl	801431c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004326:	bf00      	nop
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	2001bcf8 	.word	0x2001bcf8

08004330 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8004334:	4802      	ldr	r0, [pc, #8]	; (8004340 <TIM5_IRQHandler+0x10>)
 8004336:	f00f fff1 	bl	801431c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800433a:	bf00      	nop
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	2001bcb0 	.word	0x2001bcb0

08004344 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004348:	4802      	ldr	r0, [pc, #8]	; (8004354 <DMA2_Stream0_IRQHandler+0x10>)
 800434a:	f00d fd01 	bl	8011d50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800434e:	bf00      	nop
 8004350:	bd80      	pop	{r7, pc}
 8004352:	bf00      	nop
 8004354:	2001b5e4 	.word	0x2001b5e4

08004358 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004358:	b480      	push	{r7}
 800435a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800435c:	4b06      	ldr	r3, [pc, #24]	; (8004378 <SystemInit+0x20>)
 800435e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004362:	4a05      	ldr	r2, [pc, #20]	; (8004378 <SystemInit+0x20>)
 8004364:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004368:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800436c:	bf00      	nop
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr
 8004376:	bf00      	nop
 8004378:	e000ed00 	.word	0xe000ed00

0800437c <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b096      	sub	sp, #88	; 0x58
 8004380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004382:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004386:	2200      	movs	r2, #0
 8004388:	601a      	str	r2, [r3, #0]
 800438a:	605a      	str	r2, [r3, #4]
 800438c:	609a      	str	r2, [r3, #8]
 800438e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004390:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004394:	2200      	movs	r2, #0
 8004396:	601a      	str	r2, [r3, #0]
 8004398:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800439a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800439e:	2200      	movs	r2, #0
 80043a0:	601a      	str	r2, [r3, #0]
 80043a2:	605a      	str	r2, [r3, #4]
 80043a4:	609a      	str	r2, [r3, #8]
 80043a6:	60da      	str	r2, [r3, #12]
 80043a8:	611a      	str	r2, [r3, #16]
 80043aa:	615a      	str	r2, [r3, #20]
 80043ac:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80043ae:	1d3b      	adds	r3, r7, #4
 80043b0:	2220      	movs	r2, #32
 80043b2:	2100      	movs	r1, #0
 80043b4:	4618      	mov	r0, r3
 80043b6:	f015 fcef 	bl	8019d98 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80043ba:	4b3e      	ldr	r3, [pc, #248]	; (80044b4 <MX_TIM1_Init+0x138>)
 80043bc:	4a3e      	ldr	r2, [pc, #248]	; (80044b8 <MX_TIM1_Init+0x13c>)
 80043be:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80043c0:	4b3c      	ldr	r3, [pc, #240]	; (80044b4 <MX_TIM1_Init+0x138>)
 80043c2:	2200      	movs	r2, #0
 80043c4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80043c6:	4b3b      	ldr	r3, [pc, #236]	; (80044b4 <MX_TIM1_Init+0x138>)
 80043c8:	2200      	movs	r2, #0
 80043ca:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80043cc:	4b39      	ldr	r3, [pc, #228]	; (80044b4 <MX_TIM1_Init+0x138>)
 80043ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80043d2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80043d4:	4b37      	ldr	r3, [pc, #220]	; (80044b4 <MX_TIM1_Init+0x138>)
 80043d6:	2200      	movs	r2, #0
 80043d8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80043da:	4b36      	ldr	r3, [pc, #216]	; (80044b4 <MX_TIM1_Init+0x138>)
 80043dc:	2200      	movs	r2, #0
 80043de:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80043e0:	4b34      	ldr	r3, [pc, #208]	; (80044b4 <MX_TIM1_Init+0x138>)
 80043e2:	2200      	movs	r2, #0
 80043e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80043e6:	4833      	ldr	r0, [pc, #204]	; (80044b4 <MX_TIM1_Init+0x138>)
 80043e8:	f00f faf0 	bl	80139cc <HAL_TIM_Base_Init>
 80043ec:	4603      	mov	r3, r0
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d001      	beq.n	80043f6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80043f2:	f7ff fa7d 	bl	80038f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80043f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80043fa:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80043fc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004400:	4619      	mov	r1, r3
 8004402:	482c      	ldr	r0, [pc, #176]	; (80044b4 <MX_TIM1_Init+0x138>)
 8004404:	f010 f9f0 	bl	80147e8 <HAL_TIM_ConfigClockSource>
 8004408:	4603      	mov	r3, r0
 800440a:	2b00      	cmp	r3, #0
 800440c:	d001      	beq.n	8004412 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800440e:	f7ff fa6f 	bl	80038f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004412:	4828      	ldr	r0, [pc, #160]	; (80044b4 <MX_TIM1_Init+0x138>)
 8004414:	f00f fc02 	bl	8013c1c <HAL_TIM_PWM_Init>
 8004418:	4603      	mov	r3, r0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d001      	beq.n	8004422 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800441e:	f7ff fa67 	bl	80038f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004422:	2300      	movs	r3, #0
 8004424:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004426:	2300      	movs	r3, #0
 8004428:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800442a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800442e:	4619      	mov	r1, r3
 8004430:	4820      	ldr	r0, [pc, #128]	; (80044b4 <MX_TIM1_Init+0x138>)
 8004432:	f011 f811 	bl	8015458 <HAL_TIMEx_MasterConfigSynchronization>
 8004436:	4603      	mov	r3, r0
 8004438:	2b00      	cmp	r3, #0
 800443a:	d001      	beq.n	8004440 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800443c:	f7ff fa58 	bl	80038f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004440:	2360      	movs	r3, #96	; 0x60
 8004442:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8004444:	2300      	movs	r3, #0
 8004446:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004448:	2300      	movs	r3, #0
 800444a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800444c:	2300      	movs	r3, #0
 800444e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004450:	2300      	movs	r3, #0
 8004452:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004454:	2300      	movs	r3, #0
 8004456:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004458:	2300      	movs	r3, #0
 800445a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800445c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004460:	2208      	movs	r2, #8
 8004462:	4619      	mov	r1, r3
 8004464:	4813      	ldr	r0, [pc, #76]	; (80044b4 <MX_TIM1_Init+0x138>)
 8004466:	f010 f8fd 	bl	8014664 <HAL_TIM_PWM_ConfigChannel>
 800446a:	4603      	mov	r3, r0
 800446c:	2b00      	cmp	r3, #0
 800446e:	d001      	beq.n	8004474 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8004470:	f7ff fa3e 	bl	80038f0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004474:	2300      	movs	r3, #0
 8004476:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004478:	2300      	movs	r3, #0
 800447a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800447c:	2300      	movs	r3, #0
 800447e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004480:	2300      	movs	r3, #0
 8004482:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004484:	2300      	movs	r3, #0
 8004486:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004488:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800448c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800448e:	2300      	movs	r3, #0
 8004490:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004492:	1d3b      	adds	r3, r7, #4
 8004494:	4619      	mov	r1, r3
 8004496:	4807      	ldr	r0, [pc, #28]	; (80044b4 <MX_TIM1_Init+0x138>)
 8004498:	f011 f85a 	bl	8015550 <HAL_TIMEx_ConfigBreakDeadTime>
 800449c:	4603      	mov	r3, r0
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d001      	beq.n	80044a6 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80044a2:	f7ff fa25 	bl	80038f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80044a6:	4803      	ldr	r0, [pc, #12]	; (80044b4 <MX_TIM1_Init+0x138>)
 80044a8:	f000 f974 	bl	8004794 <HAL_TIM_MspPostInit>

}
 80044ac:	bf00      	nop
 80044ae:	3758      	adds	r7, #88	; 0x58
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}
 80044b4:	2001bd40 	.word	0x2001bd40
 80044b8:	40010000 	.word	0x40010000

080044bc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b090      	sub	sp, #64	; 0x40
 80044c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80044c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80044c6:	2200      	movs	r2, #0
 80044c8:	601a      	str	r2, [r3, #0]
 80044ca:	605a      	str	r2, [r3, #4]
 80044cc:	609a      	str	r2, [r3, #8]
 80044ce:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80044d0:	f107 031c 	add.w	r3, r7, #28
 80044d4:	2200      	movs	r2, #0
 80044d6:	601a      	str	r2, [r3, #0]
 80044d8:	605a      	str	r2, [r3, #4]
 80044da:	609a      	str	r2, [r3, #8]
 80044dc:	60da      	str	r2, [r3, #12]
 80044de:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80044e0:	f107 030c 	add.w	r3, r7, #12
 80044e4:	2200      	movs	r2, #0
 80044e6:	601a      	str	r2, [r3, #0]
 80044e8:	605a      	str	r2, [r3, #4]
 80044ea:	609a      	str	r2, [r3, #8]
 80044ec:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80044ee:	1d3b      	adds	r3, r7, #4
 80044f0:	2200      	movs	r2, #0
 80044f2:	601a      	str	r2, [r3, #0]
 80044f4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80044f6:	4b3e      	ldr	r3, [pc, #248]	; (80045f0 <MX_TIM2_Init+0x134>)
 80044f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80044fc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80044fe:	4b3c      	ldr	r3, [pc, #240]	; (80045f0 <MX_TIM2_Init+0x134>)
 8004500:	2200      	movs	r2, #0
 8004502:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004504:	4b3a      	ldr	r3, [pc, #232]	; (80045f0 <MX_TIM2_Init+0x134>)
 8004506:	2200      	movs	r2, #0
 8004508:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800450a:	4b39      	ldr	r3, [pc, #228]	; (80045f0 <MX_TIM2_Init+0x134>)
 800450c:	f04f 32ff 	mov.w	r2, #4294967295
 8004510:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004512:	4b37      	ldr	r3, [pc, #220]	; (80045f0 <MX_TIM2_Init+0x134>)
 8004514:	2200      	movs	r2, #0
 8004516:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004518:	4b35      	ldr	r3, [pc, #212]	; (80045f0 <MX_TIM2_Init+0x134>)
 800451a:	2200      	movs	r2, #0
 800451c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800451e:	4834      	ldr	r0, [pc, #208]	; (80045f0 <MX_TIM2_Init+0x134>)
 8004520:	f00f fa54 	bl	80139cc <HAL_TIM_Base_Init>
 8004524:	4603      	mov	r3, r0
 8004526:	2b00      	cmp	r3, #0
 8004528:	d001      	beq.n	800452e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800452a:	f7ff f9e1 	bl	80038f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800452e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004532:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004534:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004538:	4619      	mov	r1, r3
 800453a:	482d      	ldr	r0, [pc, #180]	; (80045f0 <MX_TIM2_Init+0x134>)
 800453c:	f010 f954 	bl	80147e8 <HAL_TIM_ConfigClockSource>
 8004540:	4603      	mov	r3, r0
 8004542:	2b00      	cmp	r3, #0
 8004544:	d001      	beq.n	800454a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8004546:	f7ff f9d3 	bl	80038f0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800454a:	4829      	ldr	r0, [pc, #164]	; (80045f0 <MX_TIM2_Init+0x134>)
 800454c:	f00f fc88 	bl	8013e60 <HAL_TIM_IC_Init>
 8004550:	4603      	mov	r3, r0
 8004552:	2b00      	cmp	r3, #0
 8004554:	d001      	beq.n	800455a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8004556:	f7ff f9cb 	bl	80038f0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800455a:	2304      	movs	r3, #4
 800455c:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 800455e:	2350      	movs	r3, #80	; 0x50
 8004560:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8004562:	2300      	movs	r3, #0
 8004564:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8004566:	2300      	movs	r3, #0
 8004568:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 800456a:	2300      	movs	r3, #0
 800456c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 800456e:	f107 031c 	add.w	r3, r7, #28
 8004572:	4619      	mov	r1, r3
 8004574:	481e      	ldr	r0, [pc, #120]	; (80045f0 <MX_TIM2_Init+0x134>)
 8004576:	f010 f9fe 	bl	8014976 <HAL_TIM_SlaveConfigSynchro>
 800457a:	4603      	mov	r3, r0
 800457c:	2b00      	cmp	r3, #0
 800457e:	d001      	beq.n	8004584 <MX_TIM2_Init+0xc8>
  {
    Error_Handler();
 8004580:	f7ff f9b6 	bl	80038f0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8004584:	2300      	movs	r3, #0
 8004586:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8004588:	2301      	movs	r3, #1
 800458a:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800458c:	2300      	movs	r3, #0
 800458e:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8004590:	2300      	movs	r3, #0
 8004592:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8004594:	f107 030c 	add.w	r3, r7, #12
 8004598:	2200      	movs	r2, #0
 800459a:	4619      	mov	r1, r3
 800459c:	4814      	ldr	r0, [pc, #80]	; (80045f0 <MX_TIM2_Init+0x134>)
 800459e:	f00f ffc5 	bl	801452c <HAL_TIM_IC_ConfigChannel>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d001      	beq.n	80045ac <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 80045a8:	f7ff f9a2 	bl	80038f0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80045ac:	2302      	movs	r3, #2
 80045ae:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80045b0:	2302      	movs	r3, #2
 80045b2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80045b4:	f107 030c 	add.w	r3, r7, #12
 80045b8:	2204      	movs	r2, #4
 80045ba:	4619      	mov	r1, r3
 80045bc:	480c      	ldr	r0, [pc, #48]	; (80045f0 <MX_TIM2_Init+0x134>)
 80045be:	f00f ffb5 	bl	801452c <HAL_TIM_IC_ConfigChannel>
 80045c2:	4603      	mov	r3, r0
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d001      	beq.n	80045cc <MX_TIM2_Init+0x110>
  {
    Error_Handler();
 80045c8:	f7ff f992 	bl	80038f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80045cc:	2300      	movs	r3, #0
 80045ce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80045d0:	2300      	movs	r3, #0
 80045d2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80045d4:	1d3b      	adds	r3, r7, #4
 80045d6:	4619      	mov	r1, r3
 80045d8:	4805      	ldr	r0, [pc, #20]	; (80045f0 <MX_TIM2_Init+0x134>)
 80045da:	f010 ff3d 	bl	8015458 <HAL_TIMEx_MasterConfigSynchronization>
 80045de:	4603      	mov	r3, r0
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d001      	beq.n	80045e8 <MX_TIM2_Init+0x12c>
  {
    Error_Handler();
 80045e4:	f7ff f984 	bl	80038f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80045e8:	bf00      	nop
 80045ea:	3740      	adds	r7, #64	; 0x40
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}
 80045f0:	2001bd88 	.word	0x2001bd88

080045f4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b086      	sub	sp, #24
 80045f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80045fa:	f107 0308 	add.w	r3, r7, #8
 80045fe:	2200      	movs	r2, #0
 8004600:	601a      	str	r2, [r3, #0]
 8004602:	605a      	str	r2, [r3, #4]
 8004604:	609a      	str	r2, [r3, #8]
 8004606:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004608:	463b      	mov	r3, r7
 800460a:	2200      	movs	r2, #0
 800460c:	601a      	str	r2, [r3, #0]
 800460e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004610:	4b1d      	ldr	r3, [pc, #116]	; (8004688 <MX_TIM3_Init+0x94>)
 8004612:	4a1e      	ldr	r2, [pc, #120]	; (800468c <MX_TIM3_Init+0x98>)
 8004614:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8004616:	4b1c      	ldr	r3, [pc, #112]	; (8004688 <MX_TIM3_Init+0x94>)
 8004618:	2200      	movs	r2, #0
 800461a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800461c:	4b1a      	ldr	r3, [pc, #104]	; (8004688 <MX_TIM3_Init+0x94>)
 800461e:	2200      	movs	r2, #0
 8004620:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8004622:	4b19      	ldr	r3, [pc, #100]	; (8004688 <MX_TIM3_Init+0x94>)
 8004624:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004628:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800462a:	4b17      	ldr	r3, [pc, #92]	; (8004688 <MX_TIM3_Init+0x94>)
 800462c:	2200      	movs	r2, #0
 800462e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004630:	4b15      	ldr	r3, [pc, #84]	; (8004688 <MX_TIM3_Init+0x94>)
 8004632:	2200      	movs	r2, #0
 8004634:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004636:	4814      	ldr	r0, [pc, #80]	; (8004688 <MX_TIM3_Init+0x94>)
 8004638:	f00f f9c8 	bl	80139cc <HAL_TIM_Base_Init>
 800463c:	4603      	mov	r3, r0
 800463e:	2b00      	cmp	r3, #0
 8004640:	d001      	beq.n	8004646 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8004642:	f7ff f955 	bl	80038f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004646:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800464a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800464c:	f107 0308 	add.w	r3, r7, #8
 8004650:	4619      	mov	r1, r3
 8004652:	480d      	ldr	r0, [pc, #52]	; (8004688 <MX_TIM3_Init+0x94>)
 8004654:	f010 f8c8 	bl	80147e8 <HAL_TIM_ConfigClockSource>
 8004658:	4603      	mov	r3, r0
 800465a:	2b00      	cmp	r3, #0
 800465c:	d001      	beq.n	8004662 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800465e:	f7ff f947 	bl	80038f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004662:	2320      	movs	r3, #32
 8004664:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004666:	2300      	movs	r3, #0
 8004668:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800466a:	463b      	mov	r3, r7
 800466c:	4619      	mov	r1, r3
 800466e:	4806      	ldr	r0, [pc, #24]	; (8004688 <MX_TIM3_Init+0x94>)
 8004670:	f010 fef2 	bl	8015458 <HAL_TIMEx_MasterConfigSynchronization>
 8004674:	4603      	mov	r3, r0
 8004676:	2b00      	cmp	r3, #0
 8004678:	d001      	beq.n	800467e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800467a:	f7ff f939 	bl	80038f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800467e:	bf00      	nop
 8004680:	3718      	adds	r7, #24
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
 8004686:	bf00      	nop
 8004688:	2001bcf8 	.word	0x2001bcf8
 800468c:	40000400 	.word	0x40000400

08004690 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b08c      	sub	sp, #48	; 0x30
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004698:	f107 031c 	add.w	r3, r7, #28
 800469c:	2200      	movs	r2, #0
 800469e:	601a      	str	r2, [r3, #0]
 80046a0:	605a      	str	r2, [r3, #4]
 80046a2:	609a      	str	r2, [r3, #8]
 80046a4:	60da      	str	r2, [r3, #12]
 80046a6:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a35      	ldr	r2, [pc, #212]	; (8004784 <HAL_TIM_Base_MspInit+0xf4>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d10e      	bne.n	80046d0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80046b2:	2300      	movs	r3, #0
 80046b4:	61bb      	str	r3, [r7, #24]
 80046b6:	4b34      	ldr	r3, [pc, #208]	; (8004788 <HAL_TIM_Base_MspInit+0xf8>)
 80046b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ba:	4a33      	ldr	r2, [pc, #204]	; (8004788 <HAL_TIM_Base_MspInit+0xf8>)
 80046bc:	f043 0301 	orr.w	r3, r3, #1
 80046c0:	6453      	str	r3, [r2, #68]	; 0x44
 80046c2:	4b31      	ldr	r3, [pc, #196]	; (8004788 <HAL_TIM_Base_MspInit+0xf8>)
 80046c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046c6:	f003 0301 	and.w	r3, r3, #1
 80046ca:	61bb      	str	r3, [r7, #24]
 80046cc:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80046ce:	e055      	b.n	800477c <HAL_TIM_Base_MspInit+0xec>
  else if(tim_baseHandle->Instance==TIM2)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046d8:	d135      	bne.n	8004746 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80046da:	2300      	movs	r3, #0
 80046dc:	617b      	str	r3, [r7, #20]
 80046de:	4b2a      	ldr	r3, [pc, #168]	; (8004788 <HAL_TIM_Base_MspInit+0xf8>)
 80046e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e2:	4a29      	ldr	r2, [pc, #164]	; (8004788 <HAL_TIM_Base_MspInit+0xf8>)
 80046e4:	f043 0301 	orr.w	r3, r3, #1
 80046e8:	6413      	str	r3, [r2, #64]	; 0x40
 80046ea:	4b27      	ldr	r3, [pc, #156]	; (8004788 <HAL_TIM_Base_MspInit+0xf8>)
 80046ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ee:	f003 0301 	and.w	r3, r3, #1
 80046f2:	617b      	str	r3, [r7, #20]
 80046f4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046f6:	2300      	movs	r3, #0
 80046f8:	613b      	str	r3, [r7, #16]
 80046fa:	4b23      	ldr	r3, [pc, #140]	; (8004788 <HAL_TIM_Base_MspInit+0xf8>)
 80046fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046fe:	4a22      	ldr	r2, [pc, #136]	; (8004788 <HAL_TIM_Base_MspInit+0xf8>)
 8004700:	f043 0301 	orr.w	r3, r3, #1
 8004704:	6313      	str	r3, [r2, #48]	; 0x30
 8004706:	4b20      	ldr	r3, [pc, #128]	; (8004788 <HAL_TIM_Base_MspInit+0xf8>)
 8004708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800470a:	f003 0301 	and.w	r3, r3, #1
 800470e:	613b      	str	r3, [r7, #16]
 8004710:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = IMD_data_Pin;
 8004712:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004716:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004718:	2302      	movs	r3, #2
 800471a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800471c:	2300      	movs	r3, #0
 800471e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004720:	2300      	movs	r3, #0
 8004722:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004724:	2301      	movs	r3, #1
 8004726:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(IMD_data_GPIO_Port, &GPIO_InitStruct);
 8004728:	f107 031c 	add.w	r3, r7, #28
 800472c:	4619      	mov	r1, r3
 800472e:	4817      	ldr	r0, [pc, #92]	; (800478c <HAL_TIM_Base_MspInit+0xfc>)
 8004730:	f00d fd78 	bl	8012224 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8004734:	2200      	movs	r2, #0
 8004736:	2105      	movs	r1, #5
 8004738:	201c      	movs	r0, #28
 800473a:	f00d f9d9 	bl	8011af0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800473e:	201c      	movs	r0, #28
 8004740:	f00d f9f2 	bl	8011b28 <HAL_NVIC_EnableIRQ>
}
 8004744:	e01a      	b.n	800477c <HAL_TIM_Base_MspInit+0xec>
  else if(tim_baseHandle->Instance==TIM3)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a11      	ldr	r2, [pc, #68]	; (8004790 <HAL_TIM_Base_MspInit+0x100>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d115      	bne.n	800477c <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004750:	2300      	movs	r3, #0
 8004752:	60fb      	str	r3, [r7, #12]
 8004754:	4b0c      	ldr	r3, [pc, #48]	; (8004788 <HAL_TIM_Base_MspInit+0xf8>)
 8004756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004758:	4a0b      	ldr	r2, [pc, #44]	; (8004788 <HAL_TIM_Base_MspInit+0xf8>)
 800475a:	f043 0302 	orr.w	r3, r3, #2
 800475e:	6413      	str	r3, [r2, #64]	; 0x40
 8004760:	4b09      	ldr	r3, [pc, #36]	; (8004788 <HAL_TIM_Base_MspInit+0xf8>)
 8004762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004764:	f003 0302 	and.w	r3, r3, #2
 8004768:	60fb      	str	r3, [r7, #12]
 800476a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800476c:	2200      	movs	r2, #0
 800476e:	2105      	movs	r1, #5
 8004770:	201d      	movs	r0, #29
 8004772:	f00d f9bd 	bl	8011af0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004776:	201d      	movs	r0, #29
 8004778:	f00d f9d6 	bl	8011b28 <HAL_NVIC_EnableIRQ>
}
 800477c:	bf00      	nop
 800477e:	3730      	adds	r7, #48	; 0x30
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}
 8004784:	40010000 	.word	0x40010000
 8004788:	40023800 	.word	0x40023800
 800478c:	40020000 	.word	0x40020000
 8004790:	40000400 	.word	0x40000400

08004794 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b088      	sub	sp, #32
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800479c:	f107 030c 	add.w	r3, r7, #12
 80047a0:	2200      	movs	r2, #0
 80047a2:	601a      	str	r2, [r3, #0]
 80047a4:	605a      	str	r2, [r3, #4]
 80047a6:	609a      	str	r2, [r3, #8]
 80047a8:	60da      	str	r2, [r3, #12]
 80047aa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a12      	ldr	r2, [pc, #72]	; (80047fc <HAL_TIM_MspPostInit+0x68>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d11e      	bne.n	80047f4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80047b6:	2300      	movs	r3, #0
 80047b8:	60bb      	str	r3, [r7, #8]
 80047ba:	4b11      	ldr	r3, [pc, #68]	; (8004800 <HAL_TIM_MspPostInit+0x6c>)
 80047bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047be:	4a10      	ldr	r2, [pc, #64]	; (8004800 <HAL_TIM_MspPostInit+0x6c>)
 80047c0:	f043 0310 	orr.w	r3, r3, #16
 80047c4:	6313      	str	r3, [r2, #48]	; 0x30
 80047c6:	4b0e      	ldr	r3, [pc, #56]	; (8004800 <HAL_TIM_MspPostInit+0x6c>)
 80047c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ca:	f003 0310 	and.w	r3, r3, #16
 80047ce:	60bb      	str	r3, [r7, #8]
 80047d0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = fan_PWM_Pin;
 80047d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80047d6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047d8:	2302      	movs	r3, #2
 80047da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047dc:	2300      	movs	r3, #0
 80047de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047e0:	2300      	movs	r3, #0
 80047e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80047e4:	2301      	movs	r3, #1
 80047e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(fan_PWM_GPIO_Port, &GPIO_InitStruct);
 80047e8:	f107 030c 	add.w	r3, r7, #12
 80047ec:	4619      	mov	r1, r3
 80047ee:	4805      	ldr	r0, [pc, #20]	; (8004804 <HAL_TIM_MspPostInit+0x70>)
 80047f0:	f00d fd18 	bl	8012224 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80047f4:	bf00      	nop
 80047f6:	3720      	adds	r7, #32
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}
 80047fc:	40010000 	.word	0x40010000
 8004800:	40023800 	.word	0x40023800
 8004804:	40021000 	.word	0x40021000

08004808 <CSE_S_x>:
RT_MODEL_CSE_T *const CSE_M = &CSE_M_;
static void UKFCorrectorAdditive_getPredict(real_T Rs, const real_T X1[3], const
  real_T S[9], real_T alpha, real_T beta, real_T kappa, real_T *Ymean, real_T
  Pxy[3], real_T *Sy);
void CSE_S_x(const real_T rtu_x[3], real_T rty_x_next[3])
{
 8004808:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800480c:	b086      	sub	sp, #24
 800480e:	af00      	add	r7, sp, #0
 8004810:	6078      	str	r0, [r7, #4]
 8004812:	6039      	str	r1, [r7, #0]
  real_T rtb_Divide;
  real_T tmp;
  rtb_Divide = rtu_x[1] / rtu_x[2];
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	3308      	adds	r3, #8
 8004818:	e9d3 0100 	ldrd	r0, r1, [r3]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	3310      	adds	r3, #16
 8004820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004824:	f7fc f804 	bl	8000830 <__aeabi_ddiv>
 8004828:	4602      	mov	r2, r0
 800482a:	460b      	mov	r3, r1
 800482c:	e9c7 2304 	strd	r2, r3, [r7, #16]
  tmp = exp(-CSE_P.Ts / look1_binlxpw(rtb_Divide, CSE_P.soc, CSE_P.tau, 12U));
 8004830:	4b3e      	ldr	r3, [pc, #248]	; (800492c <CSE_S_x+0x124>)
 8004832:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	; 0xd0
 8004836:	4614      	mov	r4, r2
 8004838:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800483c:	220c      	movs	r2, #12
 800483e:	493c      	ldr	r1, [pc, #240]	; (8004930 <CSE_S_x+0x128>)
 8004840:	483c      	ldr	r0, [pc, #240]	; (8004934 <CSE_S_x+0x12c>)
 8004842:	ed97 0b04 	vldr	d0, [r7, #16]
 8004846:	f005 fb73 	bl	8009f30 <look1_binlxpw>
 800484a:	ec53 2b10 	vmov	r2, r3, d0
 800484e:	4620      	mov	r0, r4
 8004850:	4629      	mov	r1, r5
 8004852:	f7fb ffed 	bl	8000830 <__aeabi_ddiv>
 8004856:	4602      	mov	r2, r0
 8004858:	460b      	mov	r3, r1
 800485a:	ec43 2b17 	vmov	d7, r2, r3
 800485e:	eeb0 0a47 	vmov.f32	s0, s14
 8004862:	eef0 0a67 	vmov.f32	s1, s15
 8004866:	f015 fbb7 	bl	8019fd8 <exp>
 800486a:	ed87 0b02 	vstr	d0, [r7, #8]
  rty_x_next[0] = (1.0 - tmp) * CSE_U.current * look1_binlxpw(rtb_Divide,
 800486e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004872:	f04f 0000 	mov.w	r0, #0
 8004876:	4930      	ldr	r1, [pc, #192]	; (8004938 <CSE_S_x+0x130>)
 8004878:	f7fb fcf8 	bl	800026c <__aeabi_dsub>
 800487c:	4602      	mov	r2, r0
 800487e:	460b      	mov	r3, r1
 8004880:	4610      	mov	r0, r2
 8004882:	4619      	mov	r1, r3
 8004884:	4b2d      	ldr	r3, [pc, #180]	; (800493c <CSE_S_x+0x134>)
 8004886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800488a:	f7fb fea7 	bl	80005dc <__aeabi_dmul>
 800488e:	4602      	mov	r2, r0
 8004890:	460b      	mov	r3, r1
 8004892:	4614      	mov	r4, r2
 8004894:	461d      	mov	r5, r3
 8004896:	220c      	movs	r2, #12
 8004898:	4924      	ldr	r1, [pc, #144]	; (800492c <CSE_S_x+0x124>)
 800489a:	4826      	ldr	r0, [pc, #152]	; (8004934 <CSE_S_x+0x12c>)
 800489c:	ed97 0b04 	vldr	d0, [r7, #16]
 80048a0:	f005 fb46 	bl	8009f30 <look1_binlxpw>
 80048a4:	ec53 2b10 	vmov	r2, r3, d0
 80048a8:	4620      	mov	r0, r4
 80048aa:	4629      	mov	r1, r5
 80048ac:	f7fb fe96 	bl	80005dc <__aeabi_dmul>
 80048b0:	4602      	mov	r2, r0
 80048b2:	460b      	mov	r3, r1
 80048b4:	4614      	mov	r4, r2
 80048b6:	461d      	mov	r5, r3
    CSE_P.soc, CSE_P.Rp, 12U) + tmp * rtu_x[0];
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 80048be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80048c2:	f7fb fe8b 	bl	80005dc <__aeabi_dmul>
 80048c6:	4602      	mov	r2, r0
 80048c8:	460b      	mov	r3, r1
 80048ca:	4620      	mov	r0, r4
 80048cc:	4629      	mov	r1, r5
 80048ce:	f7fb fccf 	bl	8000270 <__adddf3>
 80048d2:	4602      	mov	r2, r0
 80048d4:	460b      	mov	r3, r1
  rty_x_next[0] = (1.0 - tmp) * CSE_U.current * look1_binlxpw(rtb_Divide,
 80048d6:	6839      	ldr	r1, [r7, #0]
 80048d8:	e9c1 2300 	strd	r2, r3, [r1]
  rty_x_next[1] = CSE_U.current * CSE_P.Ts + rtu_x[1];
 80048dc:	4b17      	ldr	r3, [pc, #92]	; (800493c <CSE_S_x+0x134>)
 80048de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80048e2:	4b12      	ldr	r3, [pc, #72]	; (800492c <CSE_S_x+0x124>)
 80048e4:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	; 0xd0
 80048e8:	f7fb fe78 	bl	80005dc <__aeabi_dmul>
 80048ec:	4602      	mov	r2, r0
 80048ee:	460b      	mov	r3, r1
 80048f0:	4690      	mov	r8, r2
 80048f2:	4699      	mov	r9, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	3308      	adds	r3, #8
 80048f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048fc:	6839      	ldr	r1, [r7, #0]
 80048fe:	f101 0408 	add.w	r4, r1, #8
 8004902:	4640      	mov	r0, r8
 8004904:	4649      	mov	r1, r9
 8004906:	f7fb fcb3 	bl	8000270 <__adddf3>
 800490a:	4602      	mov	r2, r0
 800490c:	460b      	mov	r3, r1
 800490e:	e9c4 2300 	strd	r2, r3, [r4]
  rty_x_next[2] = rtu_x[2];
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	f103 0110 	add.w	r1, r3, #16
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800491e:	e9c1 2300 	strd	r2, r3, [r1]
}
 8004922:	bf00      	nop
 8004924:	3718      	adds	r7, #24
 8004926:	46bd      	mov	sp, r7
 8004928:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800492c:	20000008 	.word	0x20000008
 8004930:	200001b0 	.word	0x200001b0
 8004934:	20000148 	.word	0x20000148
 8004938:	3ff00000 	.word	0x3ff00000
 800493c:	2001bde0 	.word	0x2001bde0

08004940 <CSE_M_x>:

void CSE_M_x(const real_T rtu_x[3], real_T *rty_y)
{
 8004940:	b5b0      	push	{r4, r5, r7, lr}
 8004942:	b084      	sub	sp, #16
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
 8004948:	6039      	str	r1, [r7, #0]
  real_T rtb_Divide;
  rtb_Divide = rtu_x[1] / rtu_x[2];
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	3308      	adds	r3, #8
 800494e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	3310      	adds	r3, #16
 8004956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800495a:	f7fb ff69 	bl	8000830 <__aeabi_ddiv>
 800495e:	4602      	mov	r2, r0
 8004960:	460b      	mov	r3, r1
 8004962:	e9c7 2302 	strd	r2, r3, [r7, #8]
  *rty_y = (CSE_U.current * look1_binlxpw(rtb_Divide, CSE_P.soc, CSE_P.Rs, 12U)
 8004966:	4b19      	ldr	r3, [pc, #100]	; (80049cc <CSE_M_x+0x8c>)
 8004968:	e9d3 4500 	ldrd	r4, r5, [r3]
 800496c:	220c      	movs	r2, #12
 800496e:	4918      	ldr	r1, [pc, #96]	; (80049d0 <CSE_M_x+0x90>)
 8004970:	4818      	ldr	r0, [pc, #96]	; (80049d4 <CSE_M_x+0x94>)
 8004972:	ed97 0b02 	vldr	d0, [r7, #8]
 8004976:	f005 fadb 	bl	8009f30 <look1_binlxpw>
 800497a:	ec53 2b10 	vmov	r2, r3, d0
 800497e:	4620      	mov	r0, r4
 8004980:	4629      	mov	r1, r5
 8004982:	f7fb fe2b 	bl	80005dc <__aeabi_dmul>
 8004986:	4602      	mov	r2, r0
 8004988:	460b      	mov	r3, r1
 800498a:	4614      	mov	r4, r2
 800498c:	461d      	mov	r5, r3
            + look1_binlxpw(rtb_Divide, CSE_P.soc, CSE_P.ocv, 12U)) + rtu_x[0];
 800498e:	220c      	movs	r2, #12
 8004990:	4911      	ldr	r1, [pc, #68]	; (80049d8 <CSE_M_x+0x98>)
 8004992:	4810      	ldr	r0, [pc, #64]	; (80049d4 <CSE_M_x+0x94>)
 8004994:	ed97 0b02 	vldr	d0, [r7, #8]
 8004998:	f005 faca 	bl	8009f30 <look1_binlxpw>
 800499c:	ec53 2b10 	vmov	r2, r3, d0
 80049a0:	4620      	mov	r0, r4
 80049a2:	4629      	mov	r1, r5
 80049a4:	f7fb fc64 	bl	8000270 <__adddf3>
 80049a8:	4602      	mov	r2, r0
 80049aa:	460b      	mov	r3, r1
 80049ac:	4610      	mov	r0, r2
 80049ae:	4619      	mov	r1, r3
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049b6:	f7fb fc5b 	bl	8000270 <__adddf3>
 80049ba:	4602      	mov	r2, r0
 80049bc:	460b      	mov	r3, r1
  *rty_y = (CSE_U.current * look1_binlxpw(rtb_Divide, CSE_P.soc, CSE_P.Rs, 12U)
 80049be:	6839      	ldr	r1, [r7, #0]
 80049c0:	e9c1 2300 	strd	r2, r3, [r1]
}
 80049c4:	bf00      	nop
 80049c6:	3710      	adds	r7, #16
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bdb0      	pop	{r4, r5, r7, pc}
 80049cc:	2001bde0 	.word	0x2001bde0
 80049d0:	20000070 	.word	0x20000070
 80049d4:	20000148 	.word	0x20000148
 80049d8:	200000e0 	.word	0x200000e0

080049dc <UKFCorrectorAdditive_getPredict>:

static void UKFCorrectorAdditive_getPredict(real_T Rs, const real_T X1[3], const
  real_T S[9], real_T alpha, real_T beta, real_T kappa, real_T *Ymean, real_T
  Pxy[3], real_T *Sy)
{
 80049dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049e0:	ed2d 8b02 	vpush	{d8}
 80049e4:	b0e1      	sub	sp, #388	; 0x184
 80049e6:	af04      	add	r7, sp, #16
 80049e8:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80049ec:	ed84 0b00 	vstr	d0, [r4]
 80049f0:	f107 0434 	add.w	r4, r7, #52	; 0x34
 80049f4:	6020      	str	r0, [r4, #0]
 80049f6:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80049fa:	6001      	str	r1, [r0, #0]
 80049fc:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8004a00:	ed81 1b00 	vstr	d1, [r1]
 8004a04:	f107 0120 	add.w	r1, r7, #32
 8004a08:	ed81 2b00 	vstr	d2, [r1]
 8004a0c:	f107 0118 	add.w	r1, r7, #24
 8004a10:	ed81 3b00 	vstr	d3, [r1]
 8004a14:	f107 0114 	add.w	r1, r7, #20
 8004a18:	600a      	str	r2, [r1, #0]
 8004a1a:	f107 0210 	add.w	r2, r7, #16
 8004a1e:	6013      	str	r3, [r2, #0]
  real_T Wmean[2];
  real_T tempY;
  real_T tempY_tmp;
  int32_T knt;
  int32_T knt_0;
  tempY_tmp = alpha * alpha;
 8004a20:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8004a24:	e9d1 2300 	ldrd	r2, r3, [r1]
 8004a28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a2c:	f7fb fdd6 	bl	80005dc <__aeabi_dmul>
 8004a30:	4602      	mov	r2, r0
 8004a32:	460b      	mov	r3, r1
 8004a34:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8004a38:	e9c1 2300 	strd	r2, r3, [r1]
  tempY = (kappa + 3.0) * tempY_tmp;
 8004a3c:	f107 0118 	add.w	r1, r7, #24
 8004a40:	f04f 0200 	mov.w	r2, #0
 8004a44:	4b96      	ldr	r3, [pc, #600]	; (8004ca0 <UKFCorrectorAdditive_getPredict+0x2c4>)
 8004a46:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a4a:	f7fb fc11 	bl	8000270 <__adddf3>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	460b      	mov	r3, r1
 8004a52:	4610      	mov	r0, r2
 8004a54:	4619      	mov	r1, r3
 8004a56:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a5e:	f7fb fdbd 	bl	80005dc <__aeabi_dmul>
 8004a62:	4602      	mov	r2, r0
 8004a64:	460b      	mov	r3, r1
 8004a66:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8004a6a:	e9c1 2300 	strd	r2, r3, [r1]
  Wmean[0] = 1.0 - 3.0 / tempY;
 8004a6e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a76:	f04f 0000 	mov.w	r0, #0
 8004a7a:	4989      	ldr	r1, [pc, #548]	; (8004ca0 <UKFCorrectorAdditive_getPredict+0x2c4>)
 8004a7c:	f7fb fed8 	bl	8000830 <__aeabi_ddiv>
 8004a80:	4602      	mov	r2, r0
 8004a82:	460b      	mov	r3, r1
 8004a84:	f04f 0000 	mov.w	r0, #0
 8004a88:	4986      	ldr	r1, [pc, #536]	; (8004ca4 <UKFCorrectorAdditive_getPredict+0x2c8>)
 8004a8a:	f7fb fbef 	bl	800026c <__aeabi_dsub>
 8004a8e:	4602      	mov	r2, r0
 8004a90:	460b      	mov	r3, r1
 8004a92:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8004a96:	e9c1 2300 	strd	r2, r3, [r1]
  Wmean[1] = 1.0 / (2.0 * tempY);
 8004a9a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004a9e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	460b      	mov	r3, r1
 8004aa6:	f7fb fbe3 	bl	8000270 <__adddf3>
 8004aaa:	4602      	mov	r2, r0
 8004aac:	460b      	mov	r3, r1
 8004aae:	f04f 0000 	mov.w	r0, #0
 8004ab2:	497c      	ldr	r1, [pc, #496]	; (8004ca4 <UKFCorrectorAdditive_getPredict+0x2c8>)
 8004ab4:	f7fb febc 	bl	8000830 <__aeabi_ddiv>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	460b      	mov	r3, r1
 8004abc:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8004ac0:	e9c1 2302 	strd	r2, r3, [r1, #8]
  Wcov[0] = ((1.0 - tempY_tmp) + beta) + Wmean[0];
 8004ac4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004acc:	f04f 0000 	mov.w	r0, #0
 8004ad0:	4974      	ldr	r1, [pc, #464]	; (8004ca4 <UKFCorrectorAdditive_getPredict+0x2c8>)
 8004ad2:	f7fb fbcb 	bl	800026c <__aeabi_dsub>
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	460b      	mov	r3, r1
 8004ada:	4610      	mov	r0, r2
 8004adc:	4619      	mov	r1, r3
 8004ade:	f107 0320 	add.w	r3, r7, #32
 8004ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ae6:	f7fb fbc3 	bl	8000270 <__adddf3>
 8004aea:	4602      	mov	r2, r0
 8004aec:	460b      	mov	r3, r1
 8004aee:	4610      	mov	r0, r2
 8004af0:	4619      	mov	r1, r3
 8004af2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004afa:	f7fb fbb9 	bl	8000270 <__adddf3>
 8004afe:	4602      	mov	r2, r0
 8004b00:	460b      	mov	r3, r1
 8004b02:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8004b06:	e9c1 2300 	strd	r2, r3, [r1]
  Wcov[1] = Wmean[1];
 8004b0a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004b0e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004b12:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8004b16:	e9c1 2302 	strd	r2, r3, [r1, #8]
  if (Wmean[0] != 0.0) {
 8004b1a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004b1e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004b22:	f04f 0200 	mov.w	r2, #0
 8004b26:	f04f 0300 	mov.w	r3, #0
 8004b2a:	f7fb ffbf 	bl	8000aac <__aeabi_dcmpeq>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d154      	bne.n	8004bde <UKFCorrectorAdditive_getPredict+0x202>
    real_T Wcov_0;
    *Sy = Wmean[0];
 8004b34:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b3c:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 8004b40:	e9c1 2300 	strd	r2, r3, [r1]
    tempY_tmp = Wmean[0];
 8004b44:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b4c:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8004b50:	e9c1 2300 	strd	r2, r3, [r1]
    Wmean[0] /= Wmean[0];
 8004b54:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004b58:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004b5c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b64:	f7fb fe64 	bl	8000830 <__aeabi_ddiv>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	460b      	mov	r3, r1
 8004b6c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8004b70:	e9c1 2300 	strd	r2, r3, [r1]
    Wcov[0] /= *Sy;
 8004b74:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8004b78:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004b7c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b84:	f7fb fe54 	bl	8000830 <__aeabi_ddiv>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	460b      	mov	r3, r1
 8004b8c:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8004b90:	e9c1 2300 	strd	r2, r3, [r1]
    Wcov_0 = Wmean[1];
 8004b94:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004b98:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004b9c:	e9c7 2358 	strd	r2, r3, [r7, #352]	; 0x160
    Wmean[1] /= tempY_tmp;
 8004ba0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004ba4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8004ba8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bb0:	f7fb fe3e 	bl	8000830 <__aeabi_ddiv>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	460b      	mov	r3, r1
 8004bb8:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8004bbc:	e9c1 2302 	strd	r2, r3, [r1, #8]
    Wcov[1] = Wcov_0 / *Sy;
 8004bc0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bc8:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	; 0x160
 8004bcc:	f7fb fe30 	bl	8000830 <__aeabi_ddiv>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	460b      	mov	r3, r1
 8004bd4:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8004bd8:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8004bdc:	e006      	b.n	8004bec <UKFCorrectorAdditive_getPredict+0x210>
  } else {
    *Sy = 1.0;
 8004bde:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 8004be2:	f04f 0200 	mov.w	r2, #0
 8004be6:	4b2f      	ldr	r3, [pc, #188]	; (8004ca4 <UKFCorrectorAdditive_getPredict+0x2c8>)
 8004be8:	e9c1 2300 	strd	r2, r3, [r1]
  }

  tempY = sqrt(tempY);
 8004bec:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004bf0:	ed93 7b00 	vldr	d7, [r3]
 8004bf4:	eeb0 0a47 	vmov.f32	s0, s14
 8004bf8:	eef0 0a67 	vmov.f32	s1, s15
 8004bfc:	f015 fa84 	bl	801a108 <sqrt>
 8004c00:	eeb0 7a40 	vmov.f32	s14, s0
 8004c04:	eef0 7a60 	vmov.f32	s15, s1
 8004c08:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004c0c:	ed83 7b00 	vstr	d7, [r3]
  for (knt = 0; knt < 9; knt++) {
 8004c10:	2300      	movs	r3, #0
 8004c12:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8004c16:	e037      	b.n	8004c88 <UKFCorrectorAdditive_getPredict+0x2ac>
    tempY_tmp = tempY * S[knt];
 8004c18:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004c1c:	00db      	lsls	r3, r3, #3
 8004c1e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004c22:	6812      	ldr	r2, [r2, #0]
 8004c24:	4413      	add	r3, r2
 8004c26:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004c2a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c32:	f7fb fcd3 	bl	80005dc <__aeabi_dmul>
 8004c36:	4602      	mov	r2, r0
 8004c38:	460b      	mov	r3, r1
 8004c3a:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8004c3e:	e9c1 2300 	strd	r2, r3, [r1]
    X2[knt] = tempY_tmp;
 8004c42:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c4a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8004c4e:	00c9      	lsls	r1, r1, #3
 8004c50:	f507 70b8 	add.w	r0, r7, #368	; 0x170
 8004c54:	4401      	add	r1, r0
 8004c56:	39a0      	subs	r1, #160	; 0xa0
 8004c58:	e9c1 2300 	strd	r2, r3, [r1]
    X2[knt + 9] = -tempY_tmp;
 8004c5c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c64:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8004c68:	3109      	adds	r1, #9
 8004c6a:	4690      	mov	r8, r2
 8004c6c:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8004c70:	00cb      	lsls	r3, r1, #3
 8004c72:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8004c76:	4413      	add	r3, r2
 8004c78:	3ba0      	subs	r3, #160	; 0xa0
 8004c7a:	e9c3 8900 	strd	r8, r9, [r3]
  for (knt = 0; knt < 9; knt++) {
 8004c7e:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004c82:	3301      	adds	r3, #1
 8004c84:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8004c88:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004c8c:	2b08      	cmp	r3, #8
 8004c8e:	ddc3      	ble.n	8004c18 <UKFCorrectorAdditive_getPredict+0x23c>
  }

  knt_0 = 0;
 8004c90:	2300      	movs	r3, #0
 8004c92:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  for (knt = 0; knt < 6; knt++) {
 8004c96:	2300      	movs	r3, #0
 8004c98:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8004c9c:	e065      	b.n	8004d6a <UKFCorrectorAdditive_getPredict+0x38e>
 8004c9e:	bf00      	nop
 8004ca0:	40080000 	.word	0x40080000
 8004ca4:	3ff00000 	.word	0x3ff00000
    X2[knt_0] += X1[0];
 8004ca8:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004cac:	00db      	lsls	r3, r3, #3
 8004cae:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8004cb2:	4413      	add	r3, r2
 8004cb4:	3ba0      	subs	r3, #160	; 0xa0
 8004cb6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004cba:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cc4:	f7fb fad4 	bl	8000270 <__adddf3>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	460b      	mov	r3, r1
 8004ccc:	f8d7 1168 	ldr.w	r1, [r7, #360]	; 0x168
 8004cd0:	00c9      	lsls	r1, r1, #3
 8004cd2:	f507 70b8 	add.w	r0, r7, #368	; 0x170
 8004cd6:	4401      	add	r1, r0
 8004cd8:	39a0      	subs	r1, #160	; 0xa0
 8004cda:	e9c1 2300 	strd	r2, r3, [r1]
    X2[knt_0 + 1] += X1[1];
 8004cde:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004ce2:	3301      	adds	r3, #1
 8004ce4:	00db      	lsls	r3, r3, #3
 8004ce6:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8004cea:	4413      	add	r3, r2
 8004cec:	3ba0      	subs	r3, #160	; 0xa0
 8004cee:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004cf2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	3308      	adds	r3, #8
 8004cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cfe:	f8d7 4168 	ldr.w	r4, [r7, #360]	; 0x168
 8004d02:	3401      	adds	r4, #1
 8004d04:	f7fb fab4 	bl	8000270 <__adddf3>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	460b      	mov	r3, r1
 8004d0c:	00e1      	lsls	r1, r4, #3
 8004d0e:	f507 70b8 	add.w	r0, r7, #368	; 0x170
 8004d12:	4401      	add	r1, r0
 8004d14:	39a0      	subs	r1, #160	; 0xa0
 8004d16:	e9c1 2300 	strd	r2, r3, [r1]
    X2[knt_0 + 2] += X1[2];
 8004d1a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004d1e:	3302      	adds	r3, #2
 8004d20:	00db      	lsls	r3, r3, #3
 8004d22:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8004d26:	4413      	add	r3, r2
 8004d28:	3ba0      	subs	r3, #160	; 0xa0
 8004d2a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004d2e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	3310      	adds	r3, #16
 8004d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d3a:	f8d7 4168 	ldr.w	r4, [r7, #360]	; 0x168
 8004d3e:	3402      	adds	r4, #2
 8004d40:	f7fb fa96 	bl	8000270 <__adddf3>
 8004d44:	4602      	mov	r2, r0
 8004d46:	460b      	mov	r3, r1
 8004d48:	00e1      	lsls	r1, r4, #3
 8004d4a:	f507 70b8 	add.w	r0, r7, #368	; 0x170
 8004d4e:	4401      	add	r1, r0
 8004d50:	39a0      	subs	r1, #160	; 0xa0
 8004d52:	e9c1 2300 	strd	r2, r3, [r1]
    knt_0 += 3;
 8004d56:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004d5a:	3303      	adds	r3, #3
 8004d5c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  for (knt = 0; knt < 6; knt++) {
 8004d60:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004d64:	3301      	adds	r3, #1
 8004d66:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8004d6a:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004d6e:	2b05      	cmp	r3, #5
 8004d70:	dd9a      	ble.n	8004ca8 <UKFCorrectorAdditive_getPredict+0x2cc>
  }

  knt_0 = 0;
 8004d72:	2300      	movs	r3, #0
 8004d74:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  for (knt = 0; knt < 6; knt++) {
 8004d78:	2300      	movs	r3, #0
 8004d7a:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8004d7e:	e018      	b.n	8004db2 <UKFCorrectorAdditive_getPredict+0x3d6>
    CSE_M_x(&X2[knt_0], &Y2[knt]);
 8004d80:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8004d84:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004d88:	00db      	lsls	r3, r3, #3
 8004d8a:	18d0      	adds	r0, r2, r3
 8004d8c:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8004d90:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004d94:	00db      	lsls	r3, r3, #3
 8004d96:	4413      	add	r3, r2
 8004d98:	4619      	mov	r1, r3
 8004d9a:	f7ff fdd1 	bl	8004940 <CSE_M_x>
    knt_0 += 3;
 8004d9e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004da2:	3303      	adds	r3, #3
 8004da4:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  for (knt = 0; knt < 6; knt++) {
 8004da8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004dac:	3301      	adds	r3, #1
 8004dae:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8004db2:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004db6:	2b05      	cmp	r3, #5
 8004db8:	dde2      	ble.n	8004d80 <UKFCorrectorAdditive_getPredict+0x3a4>
  }

  CSE_M_x(X1, &tempY);
 8004dba:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004dbe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004dc2:	4611      	mov	r1, r2
 8004dc4:	6818      	ldr	r0, [r3, #0]
 8004dc6:	f7ff fdbb 	bl	8004940 <CSE_M_x>
  for (knt = 0; knt < 6; knt++) {
 8004dca:	2300      	movs	r3, #0
 8004dcc:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8004dd0:	e027      	b.n	8004e22 <UKFCorrectorAdditive_getPredict+0x446>
    Y2_0[knt] = (Y2[knt] - tempY) + tempY;
 8004dd2:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004dd6:	00db      	lsls	r3, r3, #3
 8004dd8:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8004ddc:	4413      	add	r3, r2
 8004dde:	3bd0      	subs	r3, #208	; 0xd0
 8004de0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004de4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dec:	f7fb fa3e 	bl	800026c <__aeabi_dsub>
 8004df0:	4602      	mov	r2, r0
 8004df2:	460b      	mov	r3, r1
 8004df4:	4610      	mov	r0, r2
 8004df6:	4619      	mov	r1, r3
 8004df8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e00:	f7fb fa36 	bl	8000270 <__adddf3>
 8004e04:	4602      	mov	r2, r0
 8004e06:	460b      	mov	r3, r1
 8004e08:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8004e0c:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8004e10:	00c9      	lsls	r1, r1, #3
 8004e12:	4401      	add	r1, r0
 8004e14:	e9c1 2300 	strd	r2, r3, [r1]
  for (knt = 0; knt < 6; knt++) {
 8004e18:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004e1c:	3301      	adds	r3, #1
 8004e1e:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8004e22:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004e26:	2b05      	cmp	r3, #5
 8004e28:	ddd3      	ble.n	8004dd2 <UKFCorrectorAdditive_getPredict+0x3f6>
  }

  UTMeanCovSqrt_C6QfB9Td(Wmean, Wcov, *Sy, tempY, Y2_0, X1, X2, Ymean,
 8004e2a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004e2e:	ed93 7b00 	vldr	d7, [r3]
 8004e32:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004e36:	ed93 6b00 	vldr	d6, [r3]
 8004e3a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004e3e:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8004e42:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8004e46:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8004e4a:	f107 0210 	add.w	r2, r7, #16
 8004e4e:	6812      	ldr	r2, [r2, #0]
 8004e50:	9203      	str	r2, [sp, #12]
 8004e52:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8004e56:	9202      	str	r2, [sp, #8]
 8004e58:	f107 0214 	add.w	r2, r7, #20
 8004e5c:	6812      	ldr	r2, [r2, #0]
 8004e5e:	9201      	str	r2, [sp, #4]
 8004e60:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8004e64:	9200      	str	r2, [sp, #0]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4622      	mov	r2, r4
 8004e6a:	eeb0 1a46 	vmov.f32	s2, s12
 8004e6e:	eef0 1a66 	vmov.f32	s3, s13
 8004e72:	eeb0 0a47 	vmov.f32	s0, s14
 8004e76:	eef0 0a67 	vmov.f32	s1, s15
 8004e7a:	f004 fbff 	bl	800967c <UTMeanCovSqrt_C6QfB9Td>
    &tempY_tmp, Pxy);
  Wmean[0] = tempY_tmp;
 8004e7e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e86:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8004e8a:	e9c1 2300 	strd	r2, r3, [r1]
  Wmean[1] = Rs;
 8004e8e:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8004e92:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e9a:	e9c1 2302 	strd	r2, r3, [r1, #8]
  *Sy = tempY_tmp;
 8004e9e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ea6:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 8004eaa:	e9c1 2300 	strd	r2, r3, [r1]
  tempY = xnrm2_Mnmxg9YT(1, Wmean, 2);
 8004eae:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004eb2:	2202      	movs	r2, #2
 8004eb4:	4619      	mov	r1, r3
 8004eb6:	2001      	movs	r0, #1
 8004eb8:	f009 ff10 	bl	800ecdc <xnrm2_Mnmxg9YT>
 8004ebc:	eeb0 7a40 	vmov.f32	s14, s0
 8004ec0:	eef0 7a60 	vmov.f32	s15, s1
 8004ec4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004ec8:	ed83 7b00 	vstr	d7, [r3]
  if (tempY != 0.0) {
 8004ecc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004ed0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004ed4:	f04f 0200 	mov.w	r2, #0
 8004ed8:	f04f 0300 	mov.w	r3, #0
 8004edc:	f7fb fde6 	bl	8000aac <__aeabi_dcmpeq>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d000      	beq.n	8004ee8 <UKFCorrectorAdditive_getPredict+0x50c>
      *Sy = tempY;
    } else {
      *Sy = tempY;
    }
  }
}
 8004ee6:	e0fa      	b.n	80050de <UKFCorrectorAdditive_getPredict+0x702>
    tempY = rt_hypotd_snf(tempY_tmp, tempY);
 8004ee8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004eec:	ed93 7b00 	vldr	d7, [r3]
 8004ef0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004ef4:	ed93 6b00 	vldr	d6, [r3]
 8004ef8:	eeb0 1a46 	vmov.f32	s2, s12
 8004efc:	eef0 1a66 	vmov.f32	s3, s13
 8004f00:	eeb0 0a47 	vmov.f32	s0, s14
 8004f04:	eef0 0a67 	vmov.f32	s1, s15
 8004f08:	f007 fb5e 	bl	800c5c8 <rt_hypotd_snf>
 8004f0c:	eeb0 7a40 	vmov.f32	s14, s0
 8004f10:	eef0 7a60 	vmov.f32	s15, s1
 8004f14:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004f18:	ed83 7b00 	vstr	d7, [r3]
    if (tempY_tmp >= 0.0) {
 8004f1c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004f20:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004f24:	f04f 0200 	mov.w	r2, #0
 8004f28:	f04f 0300 	mov.w	r3, #0
 8004f2c:	f7fb fddc 	bl	8000ae8 <__aeabi_dcmpge>
 8004f30:	4603      	mov	r3, r0
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d00a      	beq.n	8004f4c <UKFCorrectorAdditive_getPredict+0x570>
      tempY = -tempY;
 8004f36:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f3e:	4615      	mov	r5, r2
 8004f40:	f083 4600 	eor.w	r6, r3, #2147483648	; 0x80000000
 8004f44:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004f48:	e9c3 5600 	strd	r5, r6, [r3]
    if (fabs(tempY) < 1.0020841800044864E-292) {
 8004f4c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f54:	60ba      	str	r2, [r7, #8]
 8004f56:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004f5a:	60fb      	str	r3, [r7, #12]
 8004f5c:	f04f 0200 	mov.w	r2, #0
 8004f60:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 8004f64:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004f68:	f7fb fdaa 	bl	8000ac0 <__aeabi_dcmplt>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	f000 80ad 	beq.w	80050ce <UKFCorrectorAdditive_getPredict+0x6f2>
      knt = 0;
 8004f74:	2300      	movs	r3, #0
 8004f76:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
        knt++;
 8004f7a:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004f7e:	3301      	adds	r3, #1
 8004f80:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
        Wmean[1] *= 9.9792015476736E+291;
 8004f84:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004f88:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8004f8c:	f04f 0200 	mov.w	r2, #0
 8004f90:	4b57      	ldr	r3, [pc, #348]	; (80050f0 <UKFCorrectorAdditive_getPredict+0x714>)
 8004f92:	f7fb fb23 	bl	80005dc <__aeabi_dmul>
 8004f96:	4602      	mov	r2, r0
 8004f98:	460b      	mov	r3, r1
 8004f9a:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8004f9e:	e9c1 2302 	strd	r2, r3, [r1, #8]
        tempY *= 9.9792015476736E+291;
 8004fa2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004fa6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004faa:	f04f 0200 	mov.w	r2, #0
 8004fae:	4b50      	ldr	r3, [pc, #320]	; (80050f0 <UKFCorrectorAdditive_getPredict+0x714>)
 8004fb0:	f7fb fb14 	bl	80005dc <__aeabi_dmul>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	460b      	mov	r3, r1
 8004fb8:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8004fbc:	e9c1 2300 	strd	r2, r3, [r1]
        *Sy *= 9.9792015476736E+291;
 8004fc0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004fc4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004fc8:	f04f 0200 	mov.w	r2, #0
 8004fcc:	4b48      	ldr	r3, [pc, #288]	; (80050f0 <UKFCorrectorAdditive_getPredict+0x714>)
 8004fce:	f7fb fb05 	bl	80005dc <__aeabi_dmul>
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	460b      	mov	r3, r1
 8004fd6:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 8004fda:	e9c1 2300 	strd	r2, r3, [r1]
      } while ((fabs(tempY) < 1.0020841800044864E-292) && (knt < 20));
 8004fde:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fe6:	603a      	str	r2, [r7, #0]
 8004fe8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004fec:	607b      	str	r3, [r7, #4]
 8004fee:	f04f 0200 	mov.w	r2, #0
 8004ff2:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 8004ff6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004ffa:	f7fb fd61 	bl	8000ac0 <__aeabi_dcmplt>
 8004ffe:	4603      	mov	r3, r0
 8005000:	2b00      	cmp	r3, #0
 8005002:	d003      	beq.n	800500c <UKFCorrectorAdditive_getPredict+0x630>
 8005004:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005008:	2b13      	cmp	r3, #19
 800500a:	ddb6      	ble.n	8004f7a <UKFCorrectorAdditive_getPredict+0x59e>
      tempY = rt_hypotd_snf(*Sy, xnrm2_Mnmxg9YT(1, Wmean, 2));
 800500c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8005010:	ed93 8b00 	vldr	d8, [r3]
 8005014:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005018:	2202      	movs	r2, #2
 800501a:	4619      	mov	r1, r3
 800501c:	2001      	movs	r0, #1
 800501e:	f009 fe5d 	bl	800ecdc <xnrm2_Mnmxg9YT>
 8005022:	eeb0 7a40 	vmov.f32	s14, s0
 8005026:	eef0 7a60 	vmov.f32	s15, s1
 800502a:	eeb0 1a47 	vmov.f32	s2, s14
 800502e:	eef0 1a67 	vmov.f32	s3, s15
 8005032:	eeb0 0a48 	vmov.f32	s0, s16
 8005036:	eef0 0a68 	vmov.f32	s1, s17
 800503a:	f007 fac5 	bl	800c5c8 <rt_hypotd_snf>
 800503e:	eeb0 7a40 	vmov.f32	s14, s0
 8005042:	eef0 7a60 	vmov.f32	s15, s1
 8005046:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800504a:	ed83 7b00 	vstr	d7, [r3]
      if (*Sy >= 0.0) {
 800504e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8005052:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005056:	f04f 0200 	mov.w	r2, #0
 800505a:	f04f 0300 	mov.w	r3, #0
 800505e:	f7fb fd43 	bl	8000ae8 <__aeabi_dcmpge>
 8005062:	4603      	mov	r3, r0
 8005064:	2b00      	cmp	r3, #0
 8005066:	d00a      	beq.n	800507e <UKFCorrectorAdditive_getPredict+0x6a2>
        tempY = -tempY;
 8005068:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800506c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005070:	4692      	mov	sl, r2
 8005072:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 8005076:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800507a:	e9c3 ab00 	strd	sl, fp, [r3]
      for (knt_0 = 0; knt_0 < knt; knt_0++) {
 800507e:	2300      	movs	r3, #0
 8005080:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8005084:	e014      	b.n	80050b0 <UKFCorrectorAdditive_getPredict+0x6d4>
        tempY *= 1.0020841800044864E-292;
 8005086:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800508a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800508e:	f04f 0200 	mov.w	r2, #0
 8005092:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 8005096:	f7fb faa1 	bl	80005dc <__aeabi_dmul>
 800509a:	4602      	mov	r2, r0
 800509c:	460b      	mov	r3, r1
 800509e:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80050a2:	e9c1 2300 	strd	r2, r3, [r1]
      for (knt_0 = 0; knt_0 < knt; knt_0++) {
 80050a6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80050aa:	3301      	adds	r3, #1
 80050ac:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 80050b0:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 80050b4:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80050b8:	429a      	cmp	r2, r3
 80050ba:	dbe4      	blt.n	8005086 <UKFCorrectorAdditive_getPredict+0x6aa>
      *Sy = tempY;
 80050bc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80050c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050c4:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 80050c8:	e9c1 2300 	strd	r2, r3, [r1]
}
 80050cc:	e007      	b.n	80050de <UKFCorrectorAdditive_getPredict+0x702>
      *Sy = tempY;
 80050ce:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80050d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050d6:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 80050da:	e9c1 2300 	strd	r2, r3, [r1]
}
 80050de:	bf00      	nop
 80050e0:	f507 77ba 	add.w	r7, r7, #372	; 0x174
 80050e4:	46bd      	mov	sp, r7
 80050e6:	ecbd 8b02 	vpop	{d8}
 80050ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050ee:	bf00      	nop
 80050f0:	7c900000 	.word	0x7c900000
 80050f4:	00000000 	.word	0x00000000

080050f8 <CSE_step>:

void CSE_step(void)
{
 80050f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80050fc:	f5ad 7d43 	sub.w	sp, sp, #780	; 0x30c
 8005100:	af06      	add	r7, sp, #24
  int32_T iAcol_0;
  static const real_T Wmean[2] = { 1.0, -0.1666668333335 };

  static const real_T Wcov[2] = { 0.999996999998, -0.1666668333335 };

  if (CSE_P.Enable1_Value) {
 8005102:	4bb3      	ldr	r3, [pc, #716]	; (80053d0 <CSE_step+0x2d8>)
 8005104:	f893 32d2 	ldrb.w	r3, [r3, #722]	; 0x2d2
 8005108:	2b00      	cmp	r3, #0
 800510a:	f001 803e 	beq.w	800618a <CSE_step+0x1092>
    boolean_T errorCondition;
    boolean_T guard1 = false;
 800510e:	2300      	movs	r3, #0
 8005110:	f887 32de 	strb.w	r3, [r7, #734]	; 0x2de
    CSE_M_x(CSE_DW.x, &s_0);
 8005114:	f107 0308 	add.w	r3, r7, #8
 8005118:	4619      	mov	r1, r3
 800511a:	48ae      	ldr	r0, [pc, #696]	; (80053d4 <CSE_step+0x2dc>)
 800511c:	f7ff fc10 	bl	8004940 <CSE_M_x>
    UKFCorrectorAdditive_getPredict(CSE_P.R1_Value, CSE_DW.x, CSE_DW.P, 0.001,
 8005120:	4bab      	ldr	r3, [pc, #684]	; (80053d0 <CSE_step+0x2d8>)
 8005122:	ed93 7b84 	vldr	d7, [r3, #528]	; 0x210
 8005126:	f107 0110 	add.w	r1, r7, #16
 800512a:	f107 0208 	add.w	r2, r7, #8
 800512e:	463b      	mov	r3, r7
 8005130:	9300      	str	r3, [sp, #0]
 8005132:	460b      	mov	r3, r1
 8005134:	ed9f 3ba0 	vldr	d3, [pc, #640]	; 80053b8 <CSE_step+0x2c0>
 8005138:	ed9f 2ba1 	vldr	d2, [pc, #644]	; 80053c0 <CSE_step+0x2c8>
 800513c:	ed9f 1ba2 	vldr	d1, [pc, #648]	; 80053c8 <CSE_step+0x2d0>
 8005140:	49a5      	ldr	r1, [pc, #660]	; (80053d8 <CSE_step+0x2e0>)
 8005142:	48a4      	ldr	r0, [pc, #656]	; (80053d4 <CSE_step+0x2dc>)
 8005144:	eeb0 0a47 	vmov.f32	s0, s14
 8005148:	eef0 0a67 	vmov.f32	s1, s15
 800514c:	f7ff fc46 	bl	80049dc <UKFCorrectorAdditive_getPredict>
      2.0, 0.0, &s_0, tempY, &temp);
    s_0 = CSE_U.y - s_0;
 8005150:	4ba2      	ldr	r3, [pc, #648]	; (80053dc <CSE_step+0x2e4>)
 8005152:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8005156:	f107 0308 	add.w	r3, r7, #8
 800515a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800515e:	f7fb f885 	bl	800026c <__aeabi_dsub>
 8005162:	4602      	mov	r2, r0
 8005164:	460b      	mov	r3, r1
 8005166:	f107 0108 	add.w	r1, r7, #8
 800516a:	e9c1 2300 	strd	r2, r3, [r1]
    iAcol_0 = 0;
 800516e:	2300      	movs	r3, #0
 8005170:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
    for (iAcol = 0; iAcol < 3; iAcol++) {
 8005174:	2300      	movs	r3, #0
 8005176:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 800517a:	e04a      	b.n	8005212 <CSE_step+0x11a>
      R[iAcol_0] = CSE_DW.P[iAcol];
 800517c:	4a96      	ldr	r2, [pc, #600]	; (80053d8 <CSE_step+0x2e0>)
 800517e:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005182:	00db      	lsls	r3, r3, #3
 8005184:	4413      	add	r3, r2
 8005186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800518a:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 800518e:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8005192:	00c9      	lsls	r1, r1, #3
 8005194:	4401      	add	r1, r0
 8005196:	e9c1 2300 	strd	r2, r3, [r1]
      R[iAcol_0 + 1] = CSE_DW.P[iAcol + 3];
 800519a:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 800519e:	3303      	adds	r3, #3
 80051a0:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 80051a4:	1c51      	adds	r1, r2, #1
 80051a6:	4a8c      	ldr	r2, [pc, #560]	; (80053d8 <CSE_step+0x2e0>)
 80051a8:	00db      	lsls	r3, r3, #3
 80051aa:	4413      	add	r3, r2
 80051ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051b0:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 80051b4:	00c9      	lsls	r1, r1, #3
 80051b6:	4401      	add	r1, r0
 80051b8:	e9c1 2300 	strd	r2, r3, [r1]
      R[iAcol_0 + 2] = CSE_DW.P[iAcol + 6];
 80051bc:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80051c0:	3306      	adds	r3, #6
 80051c2:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 80051c6:	1c91      	adds	r1, r2, #2
 80051c8:	4a83      	ldr	r2, [pc, #524]	; (80053d8 <CSE_step+0x2e0>)
 80051ca:	00db      	lsls	r3, r3, #3
 80051cc:	4413      	add	r3, r2
 80051ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051d2:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 80051d6:	00c9      	lsls	r1, r1, #3
 80051d8:	4401      	add	r1, r0
 80051da:	e9c1 2300 	strd	r2, r3, [r1]
      C[iAcol] = tempY[iAcol];
 80051de:	f107 0210 	add.w	r2, r7, #16
 80051e2:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80051e6:	00db      	lsls	r3, r3, #3
 80051e8:	4413      	add	r3, r2
 80051ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ee:	f107 0058 	add.w	r0, r7, #88	; 0x58
 80051f2:	f8d7 12e4 	ldr.w	r1, [r7, #740]	; 0x2e4
 80051f6:	00c9      	lsls	r1, r1, #3
 80051f8:	4401      	add	r1, r0
 80051fa:	e9c1 2300 	strd	r2, r3, [r1]
      iAcol_0 += 3;
 80051fe:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005202:	3303      	adds	r3, #3
 8005204:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
    for (iAcol = 0; iAcol < 3; iAcol++) {
 8005208:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 800520c:	3301      	adds	r3, #1
 800520e:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8005212:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005216:	2b02      	cmp	r3, #2
 8005218:	ddb0      	ble.n	800517c <CSE_step+0x84>
    }

    trisolve_BC1XmAGq(temp, C);
 800521a:	463b      	mov	r3, r7
 800521c:	ed93 7b00 	vldr	d7, [r3]
 8005220:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005224:	4618      	mov	r0, r3
 8005226:	eeb0 0a47 	vmov.f32	s0, s14
 800522a:	eef0 0a67 	vmov.f32	s1, s15
 800522e:	f009 f8ef 	bl	800e410 <trisolve_BC1XmAGq>
    K[0] = C[0];
 8005232:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800523a:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800523e:	e9c1 2300 	strd	r2, r3, [r1]
    K[1] = C[1];
 8005242:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005246:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800524a:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800524e:	e9c1 2302 	strd	r2, r3, [r1, #8]
    K[2] = C[2];
 8005252:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005256:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800525a:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800525e:	e9c1 2304 	strd	r2, r3, [r1, #16]
    trisolve_BC1XmAGq(temp, K);
 8005262:	463b      	mov	r3, r7
 8005264:	ed93 7b00 	vldr	d7, [r3]
 8005268:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800526c:	4618      	mov	r0, r3
 800526e:	eeb0 0a47 	vmov.f32	s0, s14
 8005272:	eef0 0a67 	vmov.f32	s1, s15
 8005276:	f009 f8cb 	bl	800e410 <trisolve_BC1XmAGq>
    tempY[0] = K[0] * temp;
 800527a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800527e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005282:	463b      	mov	r3, r7
 8005284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005288:	f7fb f9a8 	bl	80005dc <__aeabi_dmul>
 800528c:	4602      	mov	r2, r0
 800528e:	460b      	mov	r3, r1
 8005290:	f107 0110 	add.w	r1, r7, #16
 8005294:	e9c1 2300 	strd	r2, r3, [r1]
    for (iAcol = 0; iAcol < 2; iAcol++) {
 8005298:	2300      	movs	r3, #0
 800529a:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 800529e:	e011      	b.n	80052c4 <CSE_step+0x1cc>
      R[iAcol + 1] = 0.0;
 80052a0:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80052a4:	3301      	adds	r3, #1
 80052a6:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80052aa:	00db      	lsls	r3, r3, #3
 80052ac:	18d1      	adds	r1, r2, r3
 80052ae:	f04f 0200 	mov.w	r2, #0
 80052b2:	f04f 0300 	mov.w	r3, #0
 80052b6:	e9c1 2300 	strd	r2, r3, [r1]
    for (iAcol = 0; iAcol < 2; iAcol++) {
 80052ba:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80052be:	3301      	adds	r3, #1
 80052c0:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 80052c4:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	dde9      	ble.n	80052a0 <CSE_step+0x1a8>
    }

    tempY[1] = K[1] * temp;
 80052cc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80052d0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80052d4:	463b      	mov	r3, r7
 80052d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052da:	f7fb f97f 	bl	80005dc <__aeabi_dmul>
 80052de:	4602      	mov	r2, r0
 80052e0:	460b      	mov	r3, r1
 80052e2:	f107 0110 	add.w	r1, r7, #16
 80052e6:	e9c1 2302 	strd	r2, r3, [r1, #8]
    R[5] = 0.0;
 80052ea:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 80052ee:	f04f 0200 	mov.w	r2, #0
 80052f2:	f04f 0300 	mov.w	r3, #0
 80052f6:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    tempY[2] = K[2] * temp;
 80052fa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80052fe:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8005302:	463b      	mov	r3, r7
 8005304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005308:	f7fb f968 	bl	80005dc <__aeabi_dmul>
 800530c:	4602      	mov	r2, r0
 800530e:	460b      	mov	r3, r1
 8005310:	f107 0110 	add.w	r1, r7, #16
 8005314:	e9c1 2304 	strd	r2, r3, [r1, #16]
    errorCondition = (R[0] == 0.0);
 8005318:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800531c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005320:	2301      	movs	r3, #1
 8005322:	461e      	mov	r6, r3
 8005324:	f04f 0200 	mov.w	r2, #0
 8005328:	f04f 0300 	mov.w	r3, #0
 800532c:	f7fb fbbe 	bl	8000aac <__aeabi_dcmpeq>
 8005330:	4603      	mov	r3, r0
 8005332:	2b00      	cmp	r3, #0
 8005334:	d101      	bne.n	800533a <CSE_step+0x242>
 8005336:	2300      	movs	r3, #0
 8005338:	461e      	mov	r6, r3
 800533a:	b2f3      	uxtb	r3, r6
 800533c:	f887 32df 	strb.w	r3, [r7, #735]	; 0x2df
    if (!errorCondition) {
 8005340:	f897 32df 	ldrb.w	r3, [r7, #735]	; 0x2df
 8005344:	2b00      	cmp	r3, #0
 8005346:	d113      	bne.n	8005370 <CSE_step+0x278>
      errorCondition = (R[4] == 0.0);
 8005348:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800534c:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8005350:	2301      	movs	r3, #1
 8005352:	461e      	mov	r6, r3
 8005354:	f04f 0200 	mov.w	r2, #0
 8005358:	f04f 0300 	mov.w	r3, #0
 800535c:	f7fb fba6 	bl	8000aac <__aeabi_dcmpeq>
 8005360:	4603      	mov	r3, r0
 8005362:	2b00      	cmp	r3, #0
 8005364:	d101      	bne.n	800536a <CSE_step+0x272>
 8005366:	2300      	movs	r3, #0
 8005368:	461e      	mov	r6, r3
 800536a:	b2f3      	uxtb	r3, r6
 800536c:	f887 32df 	strb.w	r3, [r7, #735]	; 0x2df
    }

    if (!errorCondition) {
 8005370:	f897 32df 	ldrb.w	r3, [r7, #735]	; 0x2df
 8005374:	2b00      	cmp	r3, #0
 8005376:	d113      	bne.n	80053a0 <CSE_step+0x2a8>
      errorCondition = (R[8] == 0.0);
 8005378:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800537c:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8005380:	2301      	movs	r3, #1
 8005382:	461e      	mov	r6, r3
 8005384:	f04f 0200 	mov.w	r2, #0
 8005388:	f04f 0300 	mov.w	r3, #0
 800538c:	f7fb fb8e 	bl	8000aac <__aeabi_dcmpeq>
 8005390:	4603      	mov	r3, r0
 8005392:	2b00      	cmp	r3, #0
 8005394:	d101      	bne.n	800539a <CSE_step+0x2a2>
 8005396:	2300      	movs	r3, #0
 8005398:	461e      	mov	r6, r3
 800539a:	b2f3      	uxtb	r3, r6
 800539c:	f887 32df 	strb.w	r3, [r7, #735]	; 0x2df
    }

    guard1 = false;
 80053a0:	2300      	movs	r3, #0
 80053a2:	f887 32de 	strb.w	r3, [r7, #734]	; 0x2de
    if (errorCondition) {
 80053a6:	f897 32df 	ldrb.w	r3, [r7, #735]	; 0x2df
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d018      	beq.n	80053e0 <CSE_step+0x2e8>
      guard1 = true;
 80053ae:	2301      	movs	r3, #1
 80053b0:	f887 32de 	strb.w	r3, [r7, #734]	; 0x2de
 80053b4:	e395      	b.n	8005ae2 <CSE_step+0x9ea>
 80053b6:	bf00      	nop
	...
 80053c4:	40000000 	.word	0x40000000
 80053c8:	d2f1a9fc 	.word	0xd2f1a9fc
 80053cc:	3f50624d 	.word	0x3f50624d
 80053d0:	20000008 	.word	0x20000008
 80053d4:	2001be38 	.word	0x2001be38
 80053d8:	2001bdf0 	.word	0x2001bdf0
 80053dc:	2001bde0 	.word	0x2001bde0
    } else {
      real_T absxk;
      real_T scale;
      real_T t;
      C[2] = tempY[2];
 80053e0:	f107 0310 	add.w	r3, r7, #16
 80053e4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80053e8:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80053ec:	e9c1 2304 	strd	r2, r3, [r1, #16]
      C[0] = tempY[0] / R[0];
 80053f0:	f107 0310 	add.w	r3, r7, #16
 80053f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80053f8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80053fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005400:	f7fb fa16 	bl	8000830 <__aeabi_ddiv>
 8005404:	4602      	mov	r2, r0
 8005406:	460b      	mov	r3, r1
 8005408:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800540c:	e9c1 2300 	strd	r2, r3, [r1]
      C[1] = (tempY[1] - C[0] * R[3]) / R[4];
 8005410:	f107 0310 	add.w	r3, r7, #16
 8005414:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 8005418:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800541c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005420:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005424:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8005428:	f7fb f8d8 	bl	80005dc <__aeabi_dmul>
 800542c:	4602      	mov	r2, r0
 800542e:	460b      	mov	r3, r1
 8005430:	4640      	mov	r0, r8
 8005432:	4649      	mov	r1, r9
 8005434:	f7fa ff1a 	bl	800026c <__aeabi_dsub>
 8005438:	4602      	mov	r2, r0
 800543a:	460b      	mov	r3, r1
 800543c:	4610      	mov	r0, r2
 800543e:	4619      	mov	r1, r3
 8005440:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005444:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005448:	f7fb f9f2 	bl	8000830 <__aeabi_ddiv>
 800544c:	4602      	mov	r2, r0
 800544e:	460b      	mov	r3, r1
 8005450:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8005454:	e9c1 2302 	strd	r2, r3, [r1, #8]
      temp = tempY[2];
 8005458:	f107 0310 	add.w	r3, r7, #16
 800545c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8005460:	4639      	mov	r1, r7
 8005462:	e9c1 2300 	strd	r2, r3, [r1]
      for (iAcol_0 = 0; iAcol_0 < 2; iAcol_0++) {
 8005466:	2300      	movs	r3, #0
 8005468:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 800546c:	e025      	b.n	80054ba <CSE_step+0x3c2>
        temp -= R[iAcol_0 + 6] * C[iAcol_0];
 800546e:	463b      	mov	r3, r7
 8005470:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005474:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005478:	3306      	adds	r3, #6
 800547a:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800547e:	00db      	lsls	r3, r3, #3
 8005480:	4413      	add	r3, r2
 8005482:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005486:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800548a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800548e:	00db      	lsls	r3, r3, #3
 8005490:	4413      	add	r3, r2
 8005492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005496:	f7fb f8a1 	bl	80005dc <__aeabi_dmul>
 800549a:	4602      	mov	r2, r0
 800549c:	460b      	mov	r3, r1
 800549e:	4640      	mov	r0, r8
 80054a0:	4649      	mov	r1, r9
 80054a2:	f7fa fee3 	bl	800026c <__aeabi_dsub>
 80054a6:	4602      	mov	r2, r0
 80054a8:	460b      	mov	r3, r1
 80054aa:	4639      	mov	r1, r7
 80054ac:	e9c1 2300 	strd	r2, r3, [r1]
      for (iAcol_0 = 0; iAcol_0 < 2; iAcol_0++) {
 80054b0:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80054b4:	3301      	adds	r3, #1
 80054b6:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 80054ba:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80054be:	2b01      	cmp	r3, #1
 80054c0:	ddd5      	ble.n	800546e <CSE_step+0x376>
      }

      C[2] = temp / R[8];
 80054c2:	463b      	mov	r3, r7
 80054c4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80054c8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80054cc:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80054d0:	f7fb f9ae 	bl	8000830 <__aeabi_ddiv>
 80054d4:	4602      	mov	r2, r0
 80054d6:	460b      	mov	r3, r1
 80054d8:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80054dc:	e9c1 2304 	strd	r2, r3, [r1, #16]
      scale = 3.3121686421112381E-170;
 80054e0:	f04f 0200 	mov.w	r2, #0
 80054e4:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 80054e8:	e9c7 23b4 	strd	r2, r3, [r7, #720]	; 0x2d0
      absxk = fabs(C[0]);
 80054ec:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80054f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054f4:	4611      	mov	r1, r2
 80054f6:	f8c7 12c0 	str.w	r1, [r7, #704]	; 0x2c0
 80054fa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80054fe:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
      if (absxk > 3.3121686421112381E-170) {
 8005502:	f04f 0200 	mov.w	r2, #0
 8005506:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 800550a:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	; 0x2c0
 800550e:	f7fb faf5 	bl	8000afc <__aeabi_dcmpgt>
 8005512:	4603      	mov	r3, r0
 8005514:	2b00      	cmp	r3, #0
 8005516:	d00a      	beq.n	800552e <CSE_step+0x436>
        temp = 1.0;
 8005518:	4639      	mov	r1, r7
 800551a:	f04f 0200 	mov.w	r2, #0
 800551e:	4bbf      	ldr	r3, [pc, #764]	; (800581c <CSE_step+0x724>)
 8005520:	e9c1 2300 	strd	r2, r3, [r1]
        scale = absxk;
 8005524:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	; 0x2c0
 8005528:	e9c7 23b4 	strd	r2, r3, [r7, #720]	; 0x2d0
 800552c:	e016      	b.n	800555c <CSE_step+0x464>
      } else {
        t = absxk / 3.3121686421112381E-170;
 800552e:	f04f 0200 	mov.w	r2, #0
 8005532:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 8005536:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	; 0x2c0
 800553a:	f7fb f979 	bl	8000830 <__aeabi_ddiv>
 800553e:	4602      	mov	r2, r0
 8005540:	460b      	mov	r3, r1
 8005542:	e9c7 23ae 	strd	r2, r3, [r7, #696]	; 0x2b8
        temp = t * t;
 8005546:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 800554a:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	; 0x2b8
 800554e:	f7fb f845 	bl	80005dc <__aeabi_dmul>
 8005552:	4602      	mov	r2, r0
 8005554:	460b      	mov	r3, r1
 8005556:	4639      	mov	r1, r7
 8005558:	e9c1 2300 	strd	r2, r3, [r1]
      }

      absxk = fabs(C[1]);
 800555c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005560:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8005564:	4611      	mov	r1, r2
 8005566:	f8c7 12c0 	str.w	r1, [r7, #704]	; 0x2c0
 800556a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800556e:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
      if (absxk > scale) {
 8005572:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	; 0x2d0
 8005576:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	; 0x2c0
 800557a:	f7fb fabf 	bl	8000afc <__aeabi_dcmpgt>
 800557e:	4603      	mov	r3, r0
 8005580:	2b00      	cmp	r3, #0
 8005582:	d02b      	beq.n	80055dc <CSE_step+0x4e4>
        t = scale / absxk;
 8005584:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	; 0x2c0
 8005588:	e9d7 01b4 	ldrd	r0, r1, [r7, #720]	; 0x2d0
 800558c:	f7fb f950 	bl	8000830 <__aeabi_ddiv>
 8005590:	4602      	mov	r2, r0
 8005592:	460b      	mov	r3, r1
 8005594:	e9c7 23ae 	strd	r2, r3, [r7, #696]	; 0x2b8
        temp = temp * t * t + 1.0;
 8005598:	463b      	mov	r3, r7
 800559a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800559e:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 80055a2:	f7fb f81b 	bl	80005dc <__aeabi_dmul>
 80055a6:	4602      	mov	r2, r0
 80055a8:	460b      	mov	r3, r1
 80055aa:	4610      	mov	r0, r2
 80055ac:	4619      	mov	r1, r3
 80055ae:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 80055b2:	f7fb f813 	bl	80005dc <__aeabi_dmul>
 80055b6:	4602      	mov	r2, r0
 80055b8:	460b      	mov	r3, r1
 80055ba:	4610      	mov	r0, r2
 80055bc:	4619      	mov	r1, r3
 80055be:	f04f 0200 	mov.w	r2, #0
 80055c2:	4b96      	ldr	r3, [pc, #600]	; (800581c <CSE_step+0x724>)
 80055c4:	f7fa fe54 	bl	8000270 <__adddf3>
 80055c8:	4602      	mov	r2, r0
 80055ca:	460b      	mov	r3, r1
 80055cc:	4639      	mov	r1, r7
 80055ce:	e9c1 2300 	strd	r2, r3, [r1]
        scale = absxk;
 80055d2:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	; 0x2c0
 80055d6:	e9c7 23b4 	strd	r2, r3, [r7, #720]	; 0x2d0
 80055da:	e01d      	b.n	8005618 <CSE_step+0x520>
      } else {
        t = absxk / scale;
 80055dc:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	; 0x2d0
 80055e0:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	; 0x2c0
 80055e4:	f7fb f924 	bl	8000830 <__aeabi_ddiv>
 80055e8:	4602      	mov	r2, r0
 80055ea:	460b      	mov	r3, r1
 80055ec:	e9c7 23ae 	strd	r2, r3, [r7, #696]	; 0x2b8
        temp += t * t;
 80055f0:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 80055f4:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	; 0x2b8
 80055f8:	f7fa fff0 	bl	80005dc <__aeabi_dmul>
 80055fc:	4602      	mov	r2, r0
 80055fe:	460b      	mov	r3, r1
 8005600:	4610      	mov	r0, r2
 8005602:	4619      	mov	r1, r3
 8005604:	463b      	mov	r3, r7
 8005606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800560a:	f7fa fe31 	bl	8000270 <__adddf3>
 800560e:	4602      	mov	r2, r0
 8005610:	460b      	mov	r3, r1
 8005612:	4639      	mov	r1, r7
 8005614:	e9c1 2300 	strd	r2, r3, [r1]
      }

      absxk = fabs(C[2]);
 8005618:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800561c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8005620:	4611      	mov	r1, r2
 8005622:	f8c7 12c0 	str.w	r1, [r7, #704]	; 0x2c0
 8005626:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800562a:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
      if (absxk > scale) {
 800562e:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	; 0x2d0
 8005632:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	; 0x2c0
 8005636:	f7fb fa61 	bl	8000afc <__aeabi_dcmpgt>
 800563a:	4603      	mov	r3, r0
 800563c:	2b00      	cmp	r3, #0
 800563e:	d02b      	beq.n	8005698 <CSE_step+0x5a0>
        t = scale / absxk;
 8005640:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	; 0x2c0
 8005644:	e9d7 01b4 	ldrd	r0, r1, [r7, #720]	; 0x2d0
 8005648:	f7fb f8f2 	bl	8000830 <__aeabi_ddiv>
 800564c:	4602      	mov	r2, r0
 800564e:	460b      	mov	r3, r1
 8005650:	e9c7 23ae 	strd	r2, r3, [r7, #696]	; 0x2b8
        temp = temp * t * t + 1.0;
 8005654:	463b      	mov	r3, r7
 8005656:	e9d3 0100 	ldrd	r0, r1, [r3]
 800565a:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 800565e:	f7fa ffbd 	bl	80005dc <__aeabi_dmul>
 8005662:	4602      	mov	r2, r0
 8005664:	460b      	mov	r3, r1
 8005666:	4610      	mov	r0, r2
 8005668:	4619      	mov	r1, r3
 800566a:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 800566e:	f7fa ffb5 	bl	80005dc <__aeabi_dmul>
 8005672:	4602      	mov	r2, r0
 8005674:	460b      	mov	r3, r1
 8005676:	4610      	mov	r0, r2
 8005678:	4619      	mov	r1, r3
 800567a:	f04f 0200 	mov.w	r2, #0
 800567e:	4b67      	ldr	r3, [pc, #412]	; (800581c <CSE_step+0x724>)
 8005680:	f7fa fdf6 	bl	8000270 <__adddf3>
 8005684:	4602      	mov	r2, r0
 8005686:	460b      	mov	r3, r1
 8005688:	4639      	mov	r1, r7
 800568a:	e9c1 2300 	strd	r2, r3, [r1]
        scale = absxk;
 800568e:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	; 0x2c0
 8005692:	e9c7 23b4 	strd	r2, r3, [r7, #720]	; 0x2d0
 8005696:	e01d      	b.n	80056d4 <CSE_step+0x5dc>
      } else {
        t = absxk / scale;
 8005698:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	; 0x2d0
 800569c:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	; 0x2c0
 80056a0:	f7fb f8c6 	bl	8000830 <__aeabi_ddiv>
 80056a4:	4602      	mov	r2, r0
 80056a6:	460b      	mov	r3, r1
 80056a8:	e9c7 23ae 	strd	r2, r3, [r7, #696]	; 0x2b8
        temp += t * t;
 80056ac:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 80056b0:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	; 0x2b8
 80056b4:	f7fa ff92 	bl	80005dc <__aeabi_dmul>
 80056b8:	4602      	mov	r2, r0
 80056ba:	460b      	mov	r3, r1
 80056bc:	4610      	mov	r0, r2
 80056be:	4619      	mov	r1, r3
 80056c0:	463b      	mov	r3, r7
 80056c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056c6:	f7fa fdd3 	bl	8000270 <__adddf3>
 80056ca:	4602      	mov	r2, r0
 80056cc:	460b      	mov	r3, r1
 80056ce:	4639      	mov	r1, r7
 80056d0:	e9c1 2300 	strd	r2, r3, [r1]
      }

      temp = scale * sqrt(temp);
 80056d4:	463b      	mov	r3, r7
 80056d6:	ed93 7b00 	vldr	d7, [r3]
 80056da:	eeb0 0a47 	vmov.f32	s0, s14
 80056de:	eef0 0a67 	vmov.f32	s1, s15
 80056e2:	f014 fd11 	bl	801a108 <sqrt>
 80056e6:	ec51 0b10 	vmov	r0, r1, d0
 80056ea:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	; 0x2d0
 80056ee:	f7fa ff75 	bl	80005dc <__aeabi_dmul>
 80056f2:	4602      	mov	r2, r0
 80056f4:	460b      	mov	r3, r1
 80056f6:	4639      	mov	r1, r7
 80056f8:	e9c1 2300 	strd	r2, r3, [r1]
      if (temp >= 1.0) {
 80056fc:	463b      	mov	r3, r7
 80056fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005702:	f04f 0200 	mov.w	r2, #0
 8005706:	4b45      	ldr	r3, [pc, #276]	; (800581c <CSE_step+0x724>)
 8005708:	f7fb f9ee 	bl	8000ae8 <__aeabi_dcmpge>
 800570c:	4603      	mov	r3, r0
 800570e:	2b00      	cmp	r3, #0
 8005710:	d003      	beq.n	800571a <CSE_step+0x622>
        guard1 = true;
 8005712:	2301      	movs	r3, #1
 8005714:	f887 32de 	strb.w	r3, [r7, #734]	; 0x2de
 8005718:	e1e3      	b.n	8005ae2 <CSE_step+0x9ea>
      } else {
        rotate_LZ7ctbe0(sqrt(1.0 - temp * temp), C[2], &tempY[2], &s[2], &temp);
 800571a:	463b      	mov	r3, r7
 800571c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005720:	463b      	mov	r3, r7
 8005722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005726:	f7fa ff59 	bl	80005dc <__aeabi_dmul>
 800572a:	4602      	mov	r2, r0
 800572c:	460b      	mov	r3, r1
 800572e:	f04f 0000 	mov.w	r0, #0
 8005732:	493a      	ldr	r1, [pc, #232]	; (800581c <CSE_step+0x724>)
 8005734:	f7fa fd9a 	bl	800026c <__aeabi_dsub>
 8005738:	4602      	mov	r2, r0
 800573a:	460b      	mov	r3, r1
 800573c:	ec43 2b17 	vmov	d7, r2, r3
 8005740:	eeb0 0a47 	vmov.f32	s0, s14
 8005744:	eef0 0a67 	vmov.f32	s1, s15
 8005748:	f014 fcde 	bl	801a108 <sqrt>
 800574c:	eeb0 6a40 	vmov.f32	s12, s0
 8005750:	eef0 6a60 	vmov.f32	s13, s1
 8005754:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005758:	ed93 7b04 	vldr	d7, [r3, #16]
 800575c:	463a      	mov	r2, r7
 800575e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005762:	f103 0110 	add.w	r1, r3, #16
 8005766:	f107 0310 	add.w	r3, r7, #16
 800576a:	3310      	adds	r3, #16
 800576c:	4618      	mov	r0, r3
 800576e:	eeb0 1a47 	vmov.f32	s2, s14
 8005772:	eef0 1a67 	vmov.f32	s3, s15
 8005776:	eeb0 0a46 	vmov.f32	s0, s12
 800577a:	eef0 0a66 	vmov.f32	s1, s13
 800577e:	f006 fd99 	bl	800c2b4 <rotate_LZ7ctbe0>
        C[2] = 0.0;
 8005782:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8005786:	f04f 0200 	mov.w	r2, #0
 800578a:	f04f 0300 	mov.w	r3, #0
 800578e:	e9c1 2304 	strd	r2, r3, [r1, #16]
        rotate_LZ7ctbe0(temp, C[1], &tempY[1], &s[1], &temp);
 8005792:	463b      	mov	r3, r7
 8005794:	ed93 7b00 	vldr	d7, [r3]
 8005798:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800579c:	ed93 6b02 	vldr	d6, [r3, #8]
 80057a0:	463a      	mov	r2, r7
 80057a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80057a6:	f103 0108 	add.w	r1, r3, #8
 80057aa:	f107 0310 	add.w	r3, r7, #16
 80057ae:	3308      	adds	r3, #8
 80057b0:	4618      	mov	r0, r3
 80057b2:	eeb0 1a46 	vmov.f32	s2, s12
 80057b6:	eef0 1a66 	vmov.f32	s3, s13
 80057ba:	eeb0 0a47 	vmov.f32	s0, s14
 80057be:	eef0 0a67 	vmov.f32	s1, s15
 80057c2:	f006 fd77 	bl	800c2b4 <rotate_LZ7ctbe0>
        C[1] = 0.0;
 80057c6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80057ca:	f04f 0200 	mov.w	r2, #0
 80057ce:	f04f 0300 	mov.w	r3, #0
 80057d2:	e9c1 2302 	strd	r2, r3, [r1, #8]
        rotate_LZ7ctbe0(temp, C[0], &tempY[0], &s[0], &temp);
 80057d6:	463b      	mov	r3, r7
 80057d8:	ed93 7b00 	vldr	d7, [r3]
 80057dc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80057e0:	ed93 6b00 	vldr	d6, [r3]
 80057e4:	463a      	mov	r2, r7
 80057e6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80057ea:	f107 0310 	add.w	r3, r7, #16
 80057ee:	4618      	mov	r0, r3
 80057f0:	eeb0 1a46 	vmov.f32	s2, s12
 80057f4:	eef0 1a66 	vmov.f32	s3, s13
 80057f8:	eeb0 0a47 	vmov.f32	s0, s14
 80057fc:	eef0 0a67 	vmov.f32	s1, s15
 8005800:	f006 fd58 	bl	800c2b4 <rotate_LZ7ctbe0>
        C[0] = 0.0;
 8005804:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8005808:	f04f 0200 	mov.w	r2, #0
 800580c:	f04f 0300 	mov.w	r3, #0
 8005810:	e9c1 2300 	strd	r2, r3, [r1]
        for (iAcol_0 = 0; iAcol_0 + 1 > 0; iAcol_0--) {
 8005814:	2300      	movs	r3, #0
 8005816:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 800581a:	e06e      	b.n	80058fa <CSE_step+0x802>
 800581c:	3ff00000 	.word	0x3ff00000
          temp = s[iAcol_0] * R[iAcol_0];
 8005820:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005824:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005828:	00db      	lsls	r3, r3, #3
 800582a:	4413      	add	r3, r2
 800582c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005830:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8005834:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005838:	00db      	lsls	r3, r3, #3
 800583a:	4413      	add	r3, r2
 800583c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005840:	f7fa fecc 	bl	80005dc <__aeabi_dmul>
 8005844:	4602      	mov	r2, r0
 8005846:	460b      	mov	r3, r1
 8005848:	4639      	mov	r1, r7
 800584a:	e9c1 2300 	strd	r2, r3, [r1]
          R[iAcol_0] = tempY[iAcol_0] * R[iAcol_0] - s[iAcol_0] * C[0];
 800584e:	f107 0210 	add.w	r2, r7, #16
 8005852:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005856:	00db      	lsls	r3, r3, #3
 8005858:	4413      	add	r3, r2
 800585a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800585e:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8005862:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005866:	00db      	lsls	r3, r3, #3
 8005868:	4413      	add	r3, r2
 800586a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800586e:	f7fa feb5 	bl	80005dc <__aeabi_dmul>
 8005872:	4602      	mov	r2, r0
 8005874:	460b      	mov	r3, r1
 8005876:	4690      	mov	r8, r2
 8005878:	4699      	mov	r9, r3
 800587a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800587e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005882:	00db      	lsls	r3, r3, #3
 8005884:	4413      	add	r3, r2
 8005886:	e9d3 0100 	ldrd	r0, r1, [r3]
 800588a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800588e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005892:	f7fa fea3 	bl	80005dc <__aeabi_dmul>
 8005896:	4602      	mov	r2, r0
 8005898:	460b      	mov	r3, r1
 800589a:	4640      	mov	r0, r8
 800589c:	4649      	mov	r1, r9
 800589e:	f7fa fce5 	bl	800026c <__aeabi_dsub>
 80058a2:	4602      	mov	r2, r0
 80058a4:	460b      	mov	r3, r1
 80058a6:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 80058aa:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 80058ae:	00c9      	lsls	r1, r1, #3
 80058b0:	4401      	add	r1, r0
 80058b2:	e9c1 2300 	strd	r2, r3, [r1]
          C[0] = tempY[iAcol_0] * C[0] + temp;
 80058b6:	f107 0210 	add.w	r2, r7, #16
 80058ba:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80058be:	00db      	lsls	r3, r3, #3
 80058c0:	4413      	add	r3, r2
 80058c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80058c6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80058ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ce:	f7fa fe85 	bl	80005dc <__aeabi_dmul>
 80058d2:	4602      	mov	r2, r0
 80058d4:	460b      	mov	r3, r1
 80058d6:	4610      	mov	r0, r2
 80058d8:	4619      	mov	r1, r3
 80058da:	463b      	mov	r3, r7
 80058dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058e0:	f7fa fcc6 	bl	8000270 <__adddf3>
 80058e4:	4602      	mov	r2, r0
 80058e6:	460b      	mov	r3, r1
 80058e8:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80058ec:	e9c1 2300 	strd	r2, r3, [r1]
        for (iAcol_0 = 0; iAcol_0 + 1 > 0; iAcol_0--) {
 80058f0:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80058f4:	3b01      	subs	r3, #1
 80058f6:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 80058fa:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80058fe:	2b00      	cmp	r3, #0
 8005900:	da8e      	bge.n	8005820 <CSE_step+0x728>
        }

        for (iAcol_0 = 1; iAcol_0 + 1 > 0; iAcol_0--) {
 8005902:	2301      	movs	r3, #1
 8005904:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8005908:	e06f      	b.n	80059ea <CSE_step+0x8f2>
          temp = R[iAcol_0 + 3];
 800590a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800590e:	3303      	adds	r3, #3
 8005910:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8005914:	00db      	lsls	r3, r3, #3
 8005916:	4413      	add	r3, r2
 8005918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800591c:	4639      	mov	r1, r7
 800591e:	e9c1 2300 	strd	r2, r3, [r1]
          R[iAcol_0 + 3] = temp * tempY[iAcol_0] - s[iAcol_0] * C[1];
 8005922:	f107 0210 	add.w	r2, r7, #16
 8005926:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800592a:	00db      	lsls	r3, r3, #3
 800592c:	4413      	add	r3, r2
 800592e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005932:	463b      	mov	r3, r7
 8005934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005938:	f7fa fe50 	bl	80005dc <__aeabi_dmul>
 800593c:	4602      	mov	r2, r0
 800593e:	460b      	mov	r3, r1
 8005940:	4690      	mov	r8, r2
 8005942:	4699      	mov	r9, r3
 8005944:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005948:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800594c:	00db      	lsls	r3, r3, #3
 800594e:	4413      	add	r3, r2
 8005950:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005954:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005958:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800595c:	f7fa fe3e 	bl	80005dc <__aeabi_dmul>
 8005960:	4602      	mov	r2, r0
 8005962:	460b      	mov	r3, r1
 8005964:	4610      	mov	r0, r2
 8005966:	4619      	mov	r1, r3
 8005968:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800596c:	1cde      	adds	r6, r3, #3
 800596e:	4602      	mov	r2, r0
 8005970:	460b      	mov	r3, r1
 8005972:	4640      	mov	r0, r8
 8005974:	4649      	mov	r1, r9
 8005976:	f7fa fc79 	bl	800026c <__aeabi_dsub>
 800597a:	4602      	mov	r2, r0
 800597c:	460b      	mov	r3, r1
 800597e:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8005982:	00f1      	lsls	r1, r6, #3
 8005984:	4401      	add	r1, r0
 8005986:	e9c1 2300 	strd	r2, r3, [r1]
          C[1] = tempY[iAcol_0] * C[1] + temp * s[iAcol_0];
 800598a:	f107 0210 	add.w	r2, r7, #16
 800598e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005992:	00db      	lsls	r3, r3, #3
 8005994:	4413      	add	r3, r2
 8005996:	e9d3 0100 	ldrd	r0, r1, [r3]
 800599a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800599e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80059a2:	f7fa fe1b 	bl	80005dc <__aeabi_dmul>
 80059a6:	4602      	mov	r2, r0
 80059a8:	460b      	mov	r3, r1
 80059aa:	4690      	mov	r8, r2
 80059ac:	4699      	mov	r9, r3
 80059ae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80059b2:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80059b6:	00db      	lsls	r3, r3, #3
 80059b8:	4413      	add	r3, r2
 80059ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 80059be:	463b      	mov	r3, r7
 80059c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059c4:	f7fa fe0a 	bl	80005dc <__aeabi_dmul>
 80059c8:	4602      	mov	r2, r0
 80059ca:	460b      	mov	r3, r1
 80059cc:	4640      	mov	r0, r8
 80059ce:	4649      	mov	r1, r9
 80059d0:	f7fa fc4e 	bl	8000270 <__adddf3>
 80059d4:	4602      	mov	r2, r0
 80059d6:	460b      	mov	r3, r1
 80059d8:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80059dc:	e9c1 2302 	strd	r2, r3, [r1, #8]
        for (iAcol_0 = 1; iAcol_0 + 1 > 0; iAcol_0--) {
 80059e0:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80059e4:	3b01      	subs	r3, #1
 80059e6:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 80059ea:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	da8b      	bge.n	800590a <CSE_step+0x812>
        }

        for (iAcol_0 = 2; iAcol_0 + 1 > 0; iAcol_0--) {
 80059f2:	2302      	movs	r3, #2
 80059f4:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 80059f8:	e06f      	b.n	8005ada <CSE_step+0x9e2>
          temp = R[iAcol_0 + 6];
 80059fa:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80059fe:	3306      	adds	r3, #6
 8005a00:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8005a04:	00db      	lsls	r3, r3, #3
 8005a06:	4413      	add	r3, r2
 8005a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a0c:	4639      	mov	r1, r7
 8005a0e:	e9c1 2300 	strd	r2, r3, [r1]
          R[iAcol_0 + 6] = temp * tempY[iAcol_0] - s[iAcol_0] * C[2];
 8005a12:	f107 0210 	add.w	r2, r7, #16
 8005a16:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005a1a:	00db      	lsls	r3, r3, #3
 8005a1c:	4413      	add	r3, r2
 8005a1e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005a22:	463b      	mov	r3, r7
 8005a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a28:	f7fa fdd8 	bl	80005dc <__aeabi_dmul>
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	460b      	mov	r3, r1
 8005a30:	4690      	mov	r8, r2
 8005a32:	4699      	mov	r9, r3
 8005a34:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005a38:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005a3c:	00db      	lsls	r3, r3, #3
 8005a3e:	4413      	add	r3, r2
 8005a40:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005a44:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005a48:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8005a4c:	f7fa fdc6 	bl	80005dc <__aeabi_dmul>
 8005a50:	4602      	mov	r2, r0
 8005a52:	460b      	mov	r3, r1
 8005a54:	4610      	mov	r0, r2
 8005a56:	4619      	mov	r1, r3
 8005a58:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005a5c:	1d9e      	adds	r6, r3, #6
 8005a5e:	4602      	mov	r2, r0
 8005a60:	460b      	mov	r3, r1
 8005a62:	4640      	mov	r0, r8
 8005a64:	4649      	mov	r1, r9
 8005a66:	f7fa fc01 	bl	800026c <__aeabi_dsub>
 8005a6a:	4602      	mov	r2, r0
 8005a6c:	460b      	mov	r3, r1
 8005a6e:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8005a72:	00f1      	lsls	r1, r6, #3
 8005a74:	4401      	add	r1, r0
 8005a76:	e9c1 2300 	strd	r2, r3, [r1]
          C[2] = tempY[iAcol_0] * C[2] + temp * s[iAcol_0];
 8005a7a:	f107 0210 	add.w	r2, r7, #16
 8005a7e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005a82:	00db      	lsls	r3, r3, #3
 8005a84:	4413      	add	r3, r2
 8005a86:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005a8a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005a8e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8005a92:	f7fa fda3 	bl	80005dc <__aeabi_dmul>
 8005a96:	4602      	mov	r2, r0
 8005a98:	460b      	mov	r3, r1
 8005a9a:	4690      	mov	r8, r2
 8005a9c:	4699      	mov	r9, r3
 8005a9e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005aa2:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005aa6:	00db      	lsls	r3, r3, #3
 8005aa8:	4413      	add	r3, r2
 8005aaa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005aae:	463b      	mov	r3, r7
 8005ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ab4:	f7fa fd92 	bl	80005dc <__aeabi_dmul>
 8005ab8:	4602      	mov	r2, r0
 8005aba:	460b      	mov	r3, r1
 8005abc:	4640      	mov	r0, r8
 8005abe:	4649      	mov	r1, r9
 8005ac0:	f7fa fbd6 	bl	8000270 <__adddf3>
 8005ac4:	4602      	mov	r2, r0
 8005ac6:	460b      	mov	r3, r1
 8005ac8:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8005acc:	e9c1 2304 	strd	r2, r3, [r1, #16]
        for (iAcol_0 = 2; iAcol_0 + 1 > 0; iAcol_0--) {
 8005ad0:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005ad4:	3b01      	subs	r3, #1
 8005ad6:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8005ada:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	da8b      	bge.n	80059fa <CSE_step+0x902>
        }
      }
    }

    if (guard1) {
 8005ae2:	f897 32de 	ldrb.w	r3, [r7, #734]	; 0x2de
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	f000 82e1 	beq.w	80060ae <CSE_step+0xfb6>
      int32_T R_tmp;
      boolean_T exitg2;
      iAcol_0 = 0;
 8005aec:	2300      	movs	r3, #0
 8005aee:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
      for (iAcol = 0; iAcol < 3; iAcol++) {
 8005af2:	2300      	movs	r3, #0
 8005af4:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8005af8:	e0d6      	b.n	8005ca8 <CSE_step+0xbb0>
        coffset = 0;
 8005afa:	2300      	movs	r3, #0
 8005afc:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
        for (aoffset = 0; aoffset < 3; aoffset++) {
 8005b00:	2300      	movs	r3, #0
 8005b02:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 8005b06:	e0c0      	b.n	8005c8a <CSE_step+0xb92>
          R_tmp = coffset + iAcol;
 8005b08:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 8005b0c:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005b10:	4413      	add	r3, r2
 8005b12:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
          R_0[R_tmp] = 0.0;
 8005b16:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8005b1a:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8005b1e:	00db      	lsls	r3, r3, #3
 8005b20:	18d1      	adds	r1, r2, r3
 8005b22:	f04f 0200 	mov.w	r2, #0
 8005b26:	f04f 0300 	mov.w	r3, #0
 8005b2a:	e9c1 2300 	strd	r2, r3, [r1]
          R_0[R_tmp] += R[iAcol_0] * R[coffset];
 8005b2e:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8005b32:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8005b36:	00db      	lsls	r3, r3, #3
 8005b38:	4413      	add	r3, r2
 8005b3a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005b3e:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8005b42:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005b46:	00db      	lsls	r3, r3, #3
 8005b48:	4413      	add	r3, r2
 8005b4a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005b4e:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8005b52:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8005b56:	00db      	lsls	r3, r3, #3
 8005b58:	4413      	add	r3, r2
 8005b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b5e:	f7fa fd3d 	bl	80005dc <__aeabi_dmul>
 8005b62:	4602      	mov	r2, r0
 8005b64:	460b      	mov	r3, r1
 8005b66:	4640      	mov	r0, r8
 8005b68:	4649      	mov	r1, r9
 8005b6a:	f7fa fb81 	bl	8000270 <__adddf3>
 8005b6e:	4602      	mov	r2, r0
 8005b70:	460b      	mov	r3, r1
 8005b72:	f507 7080 	add.w	r0, r7, #256	; 0x100
 8005b76:	f8d7 12b4 	ldr.w	r1, [r7, #692]	; 0x2b4
 8005b7a:	00c9      	lsls	r1, r1, #3
 8005b7c:	4401      	add	r1, r0
 8005b7e:	e9c1 2300 	strd	r2, r3, [r1]
          R_0[R_tmp] += R[iAcol_0 + 1] * R[coffset + 1];
 8005b82:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8005b86:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8005b8a:	00db      	lsls	r3, r3, #3
 8005b8c:	4413      	add	r3, r2
 8005b8e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005b92:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005b96:	3301      	adds	r3, #1
 8005b98:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8005b9c:	00db      	lsls	r3, r3, #3
 8005b9e:	4413      	add	r3, r2
 8005ba0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005ba4:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8005ba8:	3301      	adds	r3, #1
 8005baa:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8005bae:	00db      	lsls	r3, r3, #3
 8005bb0:	4413      	add	r3, r2
 8005bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bb6:	f7fa fd11 	bl	80005dc <__aeabi_dmul>
 8005bba:	4602      	mov	r2, r0
 8005bbc:	460b      	mov	r3, r1
 8005bbe:	4640      	mov	r0, r8
 8005bc0:	4649      	mov	r1, r9
 8005bc2:	f7fa fb55 	bl	8000270 <__adddf3>
 8005bc6:	4602      	mov	r2, r0
 8005bc8:	460b      	mov	r3, r1
 8005bca:	f507 7080 	add.w	r0, r7, #256	; 0x100
 8005bce:	f8d7 12b4 	ldr.w	r1, [r7, #692]	; 0x2b4
 8005bd2:	00c9      	lsls	r1, r1, #3
 8005bd4:	4401      	add	r1, r0
 8005bd6:	e9c1 2300 	strd	r2, r3, [r1]
          R_0[R_tmp] += R[iAcol_0 + 2] * R[coffset + 2];
 8005bda:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8005bde:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8005be2:	00db      	lsls	r3, r3, #3
 8005be4:	4413      	add	r3, r2
 8005be6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005bea:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005bee:	3302      	adds	r3, #2
 8005bf0:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8005bf4:	00db      	lsls	r3, r3, #3
 8005bf6:	4413      	add	r3, r2
 8005bf8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005bfc:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8005c00:	3302      	adds	r3, #2
 8005c02:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8005c06:	00db      	lsls	r3, r3, #3
 8005c08:	4413      	add	r3, r2
 8005c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c0e:	f7fa fce5 	bl	80005dc <__aeabi_dmul>
 8005c12:	4602      	mov	r2, r0
 8005c14:	460b      	mov	r3, r1
 8005c16:	4640      	mov	r0, r8
 8005c18:	4649      	mov	r1, r9
 8005c1a:	f7fa fb29 	bl	8000270 <__adddf3>
 8005c1e:	4602      	mov	r2, r0
 8005c20:	460b      	mov	r3, r1
 8005c22:	f507 7080 	add.w	r0, r7, #256	; 0x100
 8005c26:	f8d7 12b4 	ldr.w	r1, [r7, #692]	; 0x2b4
 8005c2a:	00c9      	lsls	r1, r1, #3
 8005c2c:	4401      	add	r1, r0
 8005c2e:	e9c1 2300 	strd	r2, r3, [r1]
          tempY_0[aoffset + iAcol_0] = tempY[aoffset] * tempY[iAcol];
 8005c32:	f107 0210 	add.w	r2, r7, #16
 8005c36:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8005c3a:	00db      	lsls	r3, r3, #3
 8005c3c:	4413      	add	r3, r2
 8005c3e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005c42:	f107 0210 	add.w	r2, r7, #16
 8005c46:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005c4a:	00db      	lsls	r3, r3, #3
 8005c4c:	4413      	add	r3, r2
 8005c4e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005c52:	f8d7 62ec 	ldr.w	r6, [r7, #748]	; 0x2ec
 8005c56:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005c5a:	4433      	add	r3, r6
 8005c5c:	461e      	mov	r6, r3
 8005c5e:	4642      	mov	r2, r8
 8005c60:	464b      	mov	r3, r9
 8005c62:	f7fa fcbb 	bl	80005dc <__aeabi_dmul>
 8005c66:	4602      	mov	r2, r0
 8005c68:	460b      	mov	r3, r1
 8005c6a:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8005c6e:	00f1      	lsls	r1, r6, #3
 8005c70:	4401      	add	r1, r0
 8005c72:	e9c1 2300 	strd	r2, r3, [r1]
          coffset += 3;
 8005c76:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8005c7a:	3303      	adds	r3, #3
 8005c7c:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
        for (aoffset = 0; aoffset < 3; aoffset++) {
 8005c80:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8005c84:	3301      	adds	r3, #1
 8005c86:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 8005c8a:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8005c8e:	2b02      	cmp	r3, #2
 8005c90:	f77f af3a 	ble.w	8005b08 <CSE_step+0xa10>
        }

        iAcol_0 += 3;
 8005c94:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005c98:	3303      	adds	r3, #3
 8005c9a:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
      for (iAcol = 0; iAcol < 3; iAcol++) {
 8005c9e:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005ca2:	3301      	adds	r3, #1
 8005ca4:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8005ca8:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005cac:	2b02      	cmp	r3, #2
 8005cae:	f77f af24 	ble.w	8005afa <CSE_step+0xa02>
      }

      errorCondition = true;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	f887 32df 	strb.w	r3, [r7, #735]	; 0x2df
      for (iAcol = 0; iAcol < 9; iAcol++) {
 8005cb8:	2300      	movs	r3, #0
 8005cba:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8005cbe:	e045      	b.n	8005d4c <CSE_step+0xc54>
        temp = R_0[iAcol] - tempY_0[iAcol];
 8005cc0:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8005cc4:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005cc8:	00db      	lsls	r3, r3, #3
 8005cca:	4413      	add	r3, r2
 8005ccc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005cd0:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8005cd4:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005cd8:	00db      	lsls	r3, r3, #3
 8005cda:	4413      	add	r3, r2
 8005cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ce0:	f7fa fac4 	bl	800026c <__aeabi_dsub>
 8005ce4:	4602      	mov	r2, r0
 8005ce6:	460b      	mov	r3, r1
 8005ce8:	4639      	mov	r1, r7
 8005cea:	e9c1 2300 	strd	r2, r3, [r1]
        if (errorCondition && (rtIsInf(temp) || rtIsNaN(temp))) {
 8005cee:	f897 32df 	ldrb.w	r3, [r7, #735]	; 0x2df
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d01a      	beq.n	8005d2c <CSE_step+0xc34>
 8005cf6:	463b      	mov	r3, r7
 8005cf8:	ed93 7b00 	vldr	d7, [r3]
 8005cfc:	eeb0 0a47 	vmov.f32	s0, s14
 8005d00:	eef0 0a67 	vmov.f32	s1, s15
 8005d04:	f006 fd4a 	bl	800c79c <rtIsInf>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d10b      	bne.n	8005d26 <CSE_step+0xc2e>
 8005d0e:	463b      	mov	r3, r7
 8005d10:	ed93 7b00 	vldr	d7, [r3]
 8005d14:	eeb0 0a47 	vmov.f32	s0, s14
 8005d18:	eef0 0a67 	vmov.f32	s1, s15
 8005d1c:	f006 fd62 	bl	800c7e4 <rtIsNaN>
 8005d20:	4603      	mov	r3, r0
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d002      	beq.n	8005d2c <CSE_step+0xc34>
          errorCondition = false;
 8005d26:	2300      	movs	r3, #0
 8005d28:	f887 32df 	strb.w	r3, [r7, #735]	; 0x2df
        }

        Ss[iAcol] = temp;
 8005d2c:	463b      	mov	r3, r7
 8005d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d32:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 8005d36:	f8d7 12e4 	ldr.w	r1, [r7, #740]	; 0x2e4
 8005d3a:	00c9      	lsls	r1, r1, #3
 8005d3c:	4401      	add	r1, r0
 8005d3e:	e9c1 2300 	strd	r2, r3, [r1]
      for (iAcol = 0; iAcol < 9; iAcol++) {
 8005d42:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005d46:	3301      	adds	r3, #1
 8005d48:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8005d4c:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005d50:	2b08      	cmp	r3, #8
 8005d52:	ddb5      	ble.n	8005cc0 <CSE_step+0xbc8>
      }

      if (errorCondition) {
 8005d54:	f897 32df 	ldrb.w	r3, [r7, #735]	; 0x2df
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d00a      	beq.n	8005d72 <CSE_step+0xc7a>
        svd_u3DvUgOe(Ss, tempY_0, s, R_0);
 8005d5c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8005d60:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005d64:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8005d68:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 8005d6c:	f006 fd8c 	bl	800c888 <svd_u3DvUgOe>
 8005d70:	e02c      	b.n	8005dcc <CSE_step+0xcd4>
      } else {
        s[0] = (rtNaN);
 8005d72:	4bd2      	ldr	r3, [pc, #840]	; (80060bc <CSE_step+0xfc4>)
 8005d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d78:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8005d7c:	e9c1 2300 	strd	r2, r3, [r1]
        s[1] = (rtNaN);
 8005d80:	4bce      	ldr	r3, [pc, #824]	; (80060bc <CSE_step+0xfc4>)
 8005d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d86:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8005d8a:	e9c1 2302 	strd	r2, r3, [r1, #8]
        s[2] = (rtNaN);
 8005d8e:	4bcb      	ldr	r3, [pc, #812]	; (80060bc <CSE_step+0xfc4>)
 8005d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d94:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8005d98:	e9c1 2304 	strd	r2, r3, [r1, #16]
        for (iAcol_0 = 0; iAcol_0 < 9; iAcol_0++) {
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8005da2:	e00f      	b.n	8005dc4 <CSE_step+0xccc>
          R_0[iAcol_0] = (rtNaN);
 8005da4:	4bc5      	ldr	r3, [pc, #788]	; (80060bc <CSE_step+0xfc4>)
 8005da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005daa:	f507 7080 	add.w	r0, r7, #256	; 0x100
 8005dae:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8005db2:	00c9      	lsls	r1, r1, #3
 8005db4:	4401      	add	r1, r0
 8005db6:	e9c1 2300 	strd	r2, r3, [r1]
        for (iAcol_0 = 0; iAcol_0 < 9; iAcol_0++) {
 8005dba:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005dbe:	3301      	adds	r3, #1
 8005dc0:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8005dc4:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005dc8:	2b08      	cmp	r3, #8
 8005dca:	ddeb      	ble.n	8005da4 <CSE_step+0xcac>
        }
      }

      memset(&Ss[0], 0, 9U * sizeof(real_T));
 8005dcc:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8005dd0:	2248      	movs	r2, #72	; 0x48
 8005dd2:	2100      	movs	r1, #0
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f013 ffdf 	bl	8019d98 <memset>
      Ss[0] = s[0];
 8005dda:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de2:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 8005de6:	e9c1 2300 	strd	r2, r3, [r1]
      Ss[4] = s[1];
 8005dea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005dee:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8005df2:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 8005df6:	e9c1 2308 	strd	r2, r3, [r1, #32]
      Ss[8] = s[2];
 8005dfa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005dfe:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8005e02:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 8005e06:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
      for (iAcol_0 = 0; iAcol_0 < 9; iAcol_0++) {
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8005e10:	e01e      	b.n	8005e50 <CSE_step+0xd58>
        Ss[iAcol_0] = sqrt(Ss[iAcol_0]);
 8005e12:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8005e16:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005e1a:	00db      	lsls	r3, r3, #3
 8005e1c:	4413      	add	r3, r2
 8005e1e:	ed93 7b00 	vldr	d7, [r3]
 8005e22:	eeb0 0a47 	vmov.f32	s0, s14
 8005e26:	eef0 0a67 	vmov.f32	s1, s15
 8005e2a:	f014 f96d 	bl	801a108 <sqrt>
 8005e2e:	eeb0 7a40 	vmov.f32	s14, s0
 8005e32:	eef0 7a60 	vmov.f32	s15, s1
 8005e36:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8005e3a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005e3e:	00db      	lsls	r3, r3, #3
 8005e40:	4413      	add	r3, r2
 8005e42:	ed83 7b00 	vstr	d7, [r3]
      for (iAcol_0 = 0; iAcol_0 < 9; iAcol_0++) {
 8005e46:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005e4a:	3301      	adds	r3, #1
 8005e4c:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8005e50:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005e54:	2b08      	cmp	r3, #8
 8005e56:	dddc      	ble.n	8005e12 <CSE_step+0xd1a>
      }

      iAcol_0 = 0;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
      for (iAcol = 0; iAcol < 3; iAcol++) {
 8005e5e:	2300      	movs	r3, #0
 8005e60:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8005e64:	e0b4      	b.n	8005fd0 <CSE_step+0xed8>
        coffset = 0;
 8005e66:	2300      	movs	r3, #0
 8005e68:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
        for (aoffset = 0; aoffset < 3; aoffset++) {
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 8005e72:	e09e      	b.n	8005fb2 <CSE_step+0xeba>
          R_tmp = coffset + iAcol;
 8005e74:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 8005e78:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005e7c:	4413      	add	r3, r2
 8005e7e:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
          R[R_tmp] = 0.0;
 8005e82:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8005e86:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8005e8a:	00db      	lsls	r3, r3, #3
 8005e8c:	18d1      	adds	r1, r2, r3
 8005e8e:	f04f 0200 	mov.w	r2, #0
 8005e92:	f04f 0300 	mov.w	r3, #0
 8005e96:	e9c1 2300 	strd	r2, r3, [r1]
          R[R_tmp] += Ss[iAcol_0] * R_0[aoffset];
 8005e9a:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8005e9e:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8005ea2:	00db      	lsls	r3, r3, #3
 8005ea4:	4413      	add	r3, r2
 8005ea6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005eaa:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8005eae:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005eb2:	00db      	lsls	r3, r3, #3
 8005eb4:	4413      	add	r3, r2
 8005eb6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005eba:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8005ebe:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8005ec2:	00db      	lsls	r3, r3, #3
 8005ec4:	4413      	add	r3, r2
 8005ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eca:	f7fa fb87 	bl	80005dc <__aeabi_dmul>
 8005ece:	4602      	mov	r2, r0
 8005ed0:	460b      	mov	r3, r1
 8005ed2:	4640      	mov	r0, r8
 8005ed4:	4649      	mov	r1, r9
 8005ed6:	f7fa f9cb 	bl	8000270 <__adddf3>
 8005eda:	4602      	mov	r2, r0
 8005edc:	460b      	mov	r3, r1
 8005ede:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8005ee2:	f8d7 12b4 	ldr.w	r1, [r7, #692]	; 0x2b4
 8005ee6:	00c9      	lsls	r1, r1, #3
 8005ee8:	4401      	add	r1, r0
 8005eea:	e9c1 2300 	strd	r2, r3, [r1]
          R[R_tmp] += Ss[iAcol_0 + 1] * R_0[aoffset + 3];
 8005eee:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8005ef2:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8005ef6:	00db      	lsls	r3, r3, #3
 8005ef8:	4413      	add	r3, r2
 8005efa:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005efe:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005f02:	3301      	adds	r3, #1
 8005f04:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8005f08:	00db      	lsls	r3, r3, #3
 8005f0a:	4413      	add	r3, r2
 8005f0c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005f10:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8005f14:	3303      	adds	r3, #3
 8005f16:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8005f1a:	00db      	lsls	r3, r3, #3
 8005f1c:	4413      	add	r3, r2
 8005f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f22:	f7fa fb5b 	bl	80005dc <__aeabi_dmul>
 8005f26:	4602      	mov	r2, r0
 8005f28:	460b      	mov	r3, r1
 8005f2a:	4640      	mov	r0, r8
 8005f2c:	4649      	mov	r1, r9
 8005f2e:	f7fa f99f 	bl	8000270 <__adddf3>
 8005f32:	4602      	mov	r2, r0
 8005f34:	460b      	mov	r3, r1
 8005f36:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8005f3a:	f8d7 12b4 	ldr.w	r1, [r7, #692]	; 0x2b4
 8005f3e:	00c9      	lsls	r1, r1, #3
 8005f40:	4401      	add	r1, r0
 8005f42:	e9c1 2300 	strd	r2, r3, [r1]
          R[R_tmp] += Ss[iAcol_0 + 2] * R_0[aoffset + 6];
 8005f46:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8005f4a:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8005f4e:	00db      	lsls	r3, r3, #3
 8005f50:	4413      	add	r3, r2
 8005f52:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005f56:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005f5a:	3302      	adds	r3, #2
 8005f5c:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8005f60:	00db      	lsls	r3, r3, #3
 8005f62:	4413      	add	r3, r2
 8005f64:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005f68:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8005f6c:	3306      	adds	r3, #6
 8005f6e:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8005f72:	00db      	lsls	r3, r3, #3
 8005f74:	4413      	add	r3, r2
 8005f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f7a:	f7fa fb2f 	bl	80005dc <__aeabi_dmul>
 8005f7e:	4602      	mov	r2, r0
 8005f80:	460b      	mov	r3, r1
 8005f82:	4640      	mov	r0, r8
 8005f84:	4649      	mov	r1, r9
 8005f86:	f7fa f973 	bl	8000270 <__adddf3>
 8005f8a:	4602      	mov	r2, r0
 8005f8c:	460b      	mov	r3, r1
 8005f8e:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8005f92:	f8d7 12b4 	ldr.w	r1, [r7, #692]	; 0x2b4
 8005f96:	00c9      	lsls	r1, r1, #3
 8005f98:	4401      	add	r1, r0
 8005f9a:	e9c1 2300 	strd	r2, r3, [r1]
          coffset += 3;
 8005f9e:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8005fa2:	3303      	adds	r3, #3
 8005fa4:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
        for (aoffset = 0; aoffset < 3; aoffset++) {
 8005fa8:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8005fac:	3301      	adds	r3, #1
 8005fae:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 8005fb2:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8005fb6:	2b02      	cmp	r3, #2
 8005fb8:	f77f af5c 	ble.w	8005e74 <CSE_step+0xd7c>
        }

        iAcol_0 += 3;
 8005fbc:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005fc0:	3303      	adds	r3, #3
 8005fc2:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
      for (iAcol = 0; iAcol < 3; iAcol++) {
 8005fc6:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005fca:	3301      	adds	r3, #1
 8005fcc:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8005fd0:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005fd4:	2b02      	cmp	r3, #2
 8005fd6:	f77f af46 	ble.w	8005e66 <CSE_step+0xd6e>
      }

      errorCondition = true;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	f887 32df 	strb.w	r3, [r7, #735]	; 0x2df
      iAcol = 0;
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
      exitg2 = false;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	f887 32cf 	strb.w	r3, [r7, #719]	; 0x2cf
      while ((!exitg2) && (iAcol < 3)) {
 8005fec:	e042      	b.n	8006074 <CSE_step+0xf7c>
        int32_T exitg1;
        iAcol_0 = iAcol + 1;
 8005fee:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005ff2:	3301      	adds	r3, #1
 8005ff4:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
        do {
          exitg1 = 0;
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	f8c7 32c8 	str.w	r3, [r7, #712]	; 0x2c8
          if (iAcol_0 + 1 < 4) {
 8005ffe:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006002:	2b02      	cmp	r3, #2
 8006004:	dc23      	bgt.n	800604e <CSE_step+0xf56>
            if (!(R[3 * iAcol + iAcol_0] == 0.0)) {
 8006006:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 800600a:	4613      	mov	r3, r2
 800600c:	005b      	lsls	r3, r3, #1
 800600e:	441a      	add	r2, r3
 8006010:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006014:	4413      	add	r3, r2
 8006016:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800601a:	00db      	lsls	r3, r3, #3
 800601c:	4413      	add	r3, r2
 800601e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006022:	f04f 0200 	mov.w	r2, #0
 8006026:	f04f 0300 	mov.w	r3, #0
 800602a:	f7fa fd3f 	bl	8000aac <__aeabi_dcmpeq>
 800602e:	4603      	mov	r3, r0
 8006030:	2b00      	cmp	r3, #0
 8006032:	d106      	bne.n	8006042 <CSE_step+0xf4a>
              errorCondition = false;
 8006034:	2300      	movs	r3, #0
 8006036:	f887 32df 	strb.w	r3, [r7, #735]	; 0x2df
              exitg1 = 1;
 800603a:	2301      	movs	r3, #1
 800603c:	f8c7 32c8 	str.w	r3, [r7, #712]	; 0x2c8
 8006040:	e00d      	b.n	800605e <CSE_step+0xf66>
            } else {
              iAcol_0++;
 8006042:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006046:	3301      	adds	r3, #1
 8006048:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 800604c:	e007      	b.n	800605e <CSE_step+0xf66>
            }
          } else {
            iAcol++;
 800604e:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006052:	3301      	adds	r3, #1
 8006054:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
            exitg1 = 2;
 8006058:	2302      	movs	r3, #2
 800605a:	f8c7 32c8 	str.w	r3, [r7, #712]	; 0x2c8
          }
        } while (exitg1 == 0);
 800605e:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 8006062:	2b00      	cmp	r3, #0
 8006064:	d0c8      	beq.n	8005ff8 <CSE_step+0xf00>

        if (exitg1 == 1) {
 8006066:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 800606a:	2b01      	cmp	r3, #1
 800606c:	d102      	bne.n	8006074 <CSE_step+0xf7c>
          exitg2 = true;
 800606e:	2301      	movs	r3, #1
 8006070:	f887 32cf 	strb.w	r3, [r7, #719]	; 0x2cf
      while ((!exitg2) && (iAcol < 3)) {
 8006074:	f897 32cf 	ldrb.w	r3, [r7, #719]	; 0x2cf
 8006078:	2b00      	cmp	r3, #0
 800607a:	d103      	bne.n	8006084 <CSE_step+0xf8c>
 800607c:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006080:	2b02      	cmp	r3, #2
 8006082:	ddb4      	ble.n	8005fee <CSE_step+0xef6>
        }
      }

      if (!errorCondition) {
 8006084:	f897 32df 	ldrb.w	r3, [r7, #735]	; 0x2df
 8006088:	2b00      	cmp	r3, #0
 800608a:	d110      	bne.n	80060ae <CSE_step+0xfb6>
        memcpy(&R_0[0], &R[0], 9U * sizeof(real_T));
 800608c:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 8006090:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8006094:	2248      	movs	r2, #72	; 0x48
 8006096:	4618      	mov	r0, r3
 8006098:	f013 fe70 	bl	8019d7c <memcpy>
        qr_5a2P8Gh6(R_0, tempY_0, R);
 800609c:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80060a0:	f107 0170 	add.w	r1, r7, #112	; 0x70
 80060a4:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80060a8:	4618      	mov	r0, r3
 80060aa:	f004 f82b 	bl	800a104 <qr_5a2P8Gh6>
      }
    }

    iAcol_0 = 0;
 80060ae:	2300      	movs	r3, #0
 80060b0:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
    for (iAcol = 0; iAcol < 3; iAcol++) {
 80060b4:	2300      	movs	r3, #0
 80060b6:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 80060ba:	e062      	b.n	8006182 <CSE_step+0x108a>
 80060bc:	2001e918 	.word	0x2001e918
      CSE_DW.P[iAcol_0] = R[iAcol];
 80060c0:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80060c4:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80060c8:	00db      	lsls	r3, r3, #3
 80060ca:	4413      	add	r3, r2
 80060cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060d0:	48a5      	ldr	r0, [pc, #660]	; (8006368 <CSE_step+0x1270>)
 80060d2:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 80060d6:	00c9      	lsls	r1, r1, #3
 80060d8:	4401      	add	r1, r0
 80060da:	e9c1 2300 	strd	r2, r3, [r1]
      CSE_DW.P[iAcol_0 + 1] = R[iAcol + 3];
 80060de:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80060e2:	3303      	adds	r3, #3
 80060e4:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 80060e8:	1c51      	adds	r1, r2, #1
 80060ea:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80060ee:	00db      	lsls	r3, r3, #3
 80060f0:	4413      	add	r3, r2
 80060f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060f6:	489c      	ldr	r0, [pc, #624]	; (8006368 <CSE_step+0x1270>)
 80060f8:	00c9      	lsls	r1, r1, #3
 80060fa:	4401      	add	r1, r0
 80060fc:	e9c1 2300 	strd	r2, r3, [r1]
      CSE_DW.P[iAcol_0 + 2] = R[iAcol + 6];
 8006100:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006104:	3306      	adds	r3, #6
 8006106:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 800610a:	1c91      	adds	r1, r2, #2
 800610c:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8006110:	00db      	lsls	r3, r3, #3
 8006112:	4413      	add	r3, r2
 8006114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006118:	4893      	ldr	r0, [pc, #588]	; (8006368 <CSE_step+0x1270>)
 800611a:	00c9      	lsls	r1, r1, #3
 800611c:	4401      	add	r1, r0
 800611e:	e9c1 2300 	strd	r2, r3, [r1]
      CSE_DW.x[iAcol] += K[iAcol] * s_0;
 8006122:	4a91      	ldr	r2, [pc, #580]	; (8006368 <CSE_step+0x1270>)
 8006124:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006128:	3309      	adds	r3, #9
 800612a:	00db      	lsls	r3, r3, #3
 800612c:	4413      	add	r3, r2
 800612e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006132:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8006136:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 800613a:	00db      	lsls	r3, r3, #3
 800613c:	4413      	add	r3, r2
 800613e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006142:	f107 0308 	add.w	r3, r7, #8
 8006146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800614a:	f7fa fa47 	bl	80005dc <__aeabi_dmul>
 800614e:	4602      	mov	r2, r0
 8006150:	460b      	mov	r3, r1
 8006152:	4640      	mov	r0, r8
 8006154:	4649      	mov	r1, r9
 8006156:	f7fa f88b 	bl	8000270 <__adddf3>
 800615a:	4602      	mov	r2, r0
 800615c:	460b      	mov	r3, r1
 800615e:	4882      	ldr	r0, [pc, #520]	; (8006368 <CSE_step+0x1270>)
 8006160:	f8d7 12e4 	ldr.w	r1, [r7, #740]	; 0x2e4
 8006164:	3109      	adds	r1, #9
 8006166:	00c9      	lsls	r1, r1, #3
 8006168:	4401      	add	r1, r0
 800616a:	e9c1 2300 	strd	r2, r3, [r1]
      iAcol_0 += 3;
 800616e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006172:	3303      	adds	r3, #3
 8006174:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
    for (iAcol = 0; iAcol < 3; iAcol++) {
 8006178:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 800617c:	3301      	adds	r3, #1
 800617e:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8006182:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006186:	2b02      	cmp	r3, #2
 8006188:	dd9a      	ble.n	80060c0 <CSE_step+0xfc8>
    }
  }

  CSE_Y.soc = CSE_DW.x[1] / CSE_DW.x[2];
 800618a:	4b77      	ldr	r3, [pc, #476]	; (8006368 <CSE_step+0x1270>)
 800618c:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8006190:	4b75      	ldr	r3, [pc, #468]	; (8006368 <CSE_step+0x1270>)
 8006192:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8006196:	f7fa fb4b 	bl	8000830 <__aeabi_ddiv>
 800619a:	4602      	mov	r2, r0
 800619c:	460b      	mov	r3, r1
 800619e:	4973      	ldr	r1, [pc, #460]	; (800636c <CSE_step+0x1274>)
 80061a0:	e9c1 2300 	strd	r2, r3, [r1]
  CSE_Y.capacity = CSE_DW.x[2];
 80061a4:	4b70      	ldr	r3, [pc, #448]	; (8006368 <CSE_step+0x1270>)
 80061a6:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 80061aa:	4970      	ldr	r1, [pc, #448]	; (800636c <CSE_step+0x1274>)
 80061ac:	e9c1 2302 	strd	r2, r3, [r1, #8]
  CSE_S_x(CSE_DW.x, tempY);
 80061b0:	f107 0310 	add.w	r3, r7, #16
 80061b4:	4619      	mov	r1, r3
 80061b6:	486e      	ldr	r0, [pc, #440]	; (8006370 <CSE_step+0x1278>)
 80061b8:	f7fe fb26 	bl	8004808 <CSE_S_x>
  for (iAcol_0 = 0; iAcol_0 < 9; iAcol_0++) {
 80061bc:	2300      	movs	r3, #0
 80061be:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 80061c2:	e034      	b.n	800622e <CSE_step+0x1136>
    s_0 = 0.0017320508075688774 * CSE_DW.P[iAcol_0];
 80061c4:	4a68      	ldr	r2, [pc, #416]	; (8006368 <CSE_step+0x1270>)
 80061c6:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80061ca:	00db      	lsls	r3, r3, #3
 80061cc:	4413      	add	r3, r2
 80061ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80061d2:	a363      	add	r3, pc, #396	; (adr r3, 8006360 <CSE_step+0x1268>)
 80061d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061d8:	f7fa fa00 	bl	80005dc <__aeabi_dmul>
 80061dc:	4602      	mov	r2, r0
 80061de:	460b      	mov	r3, r1
 80061e0:	f107 0108 	add.w	r1, r7, #8
 80061e4:	e9c1 2300 	strd	r2, r3, [r1]
    X2state[iAcol_0] = s_0;
 80061e8:	f107 0308 	add.w	r3, r7, #8
 80061ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061f0:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 80061f4:	00c9      	lsls	r1, r1, #3
 80061f6:	f507 703c 	add.w	r0, r7, #752	; 0x2f0
 80061fa:	4401      	add	r1, r0
 80061fc:	39d0      	subs	r1, #208	; 0xd0
 80061fe:	e9c1 2300 	strd	r2, r3, [r1]
    X2state[iAcol_0 + 9] = -s_0;
 8006202:	f107 0308 	add.w	r3, r7, #8
 8006206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800620a:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 800620e:	3109      	adds	r1, #9
 8006210:	4614      	mov	r4, r2
 8006212:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8006216:	00cb      	lsls	r3, r1, #3
 8006218:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
 800621c:	4413      	add	r3, r2
 800621e:	3bd0      	subs	r3, #208	; 0xd0
 8006220:	e9c3 4500 	strd	r4, r5, [r3]
  for (iAcol_0 = 0; iAcol_0 < 9; iAcol_0++) {
 8006224:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006228:	3301      	adds	r3, #1
 800622a:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 800622e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006232:	2b08      	cmp	r3, #8
 8006234:	ddc6      	ble.n	80061c4 <CSE_step+0x10cc>
  }

  iAcol_0 = 0;
 8006236:	2300      	movs	r3, #0
 8006238:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
  for (iAcol = 0; iAcol < 6; iAcol++) {
 800623c:	2300      	movs	r3, #0
 800623e:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8006242:	e058      	b.n	80062f6 <CSE_step+0x11fe>
    X2state[iAcol_0] += CSE_DW.x[0];
 8006244:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006248:	00db      	lsls	r3, r3, #3
 800624a:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
 800624e:	4413      	add	r3, r2
 8006250:	3bd0      	subs	r3, #208	; 0xd0
 8006252:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006256:	4b44      	ldr	r3, [pc, #272]	; (8006368 <CSE_step+0x1270>)
 8006258:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800625c:	f7fa f808 	bl	8000270 <__adddf3>
 8006260:	4602      	mov	r2, r0
 8006262:	460b      	mov	r3, r1
 8006264:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8006268:	00c9      	lsls	r1, r1, #3
 800626a:	f507 703c 	add.w	r0, r7, #752	; 0x2f0
 800626e:	4401      	add	r1, r0
 8006270:	39d0      	subs	r1, #208	; 0xd0
 8006272:	e9c1 2300 	strd	r2, r3, [r1]
    X2state[iAcol_0 + 1] += CSE_DW.x[1];
 8006276:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800627a:	3301      	adds	r3, #1
 800627c:	00db      	lsls	r3, r3, #3
 800627e:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
 8006282:	4413      	add	r3, r2
 8006284:	3bd0      	subs	r3, #208	; 0xd0
 8006286:	e9d3 0100 	ldrd	r0, r1, [r3]
 800628a:	4b37      	ldr	r3, [pc, #220]	; (8006368 <CSE_step+0x1270>)
 800628c:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8006290:	f8d7 42e0 	ldr.w	r4, [r7, #736]	; 0x2e0
 8006294:	3401      	adds	r4, #1
 8006296:	f7f9 ffeb 	bl	8000270 <__adddf3>
 800629a:	4602      	mov	r2, r0
 800629c:	460b      	mov	r3, r1
 800629e:	00e1      	lsls	r1, r4, #3
 80062a0:	f507 703c 	add.w	r0, r7, #752	; 0x2f0
 80062a4:	4401      	add	r1, r0
 80062a6:	39d0      	subs	r1, #208	; 0xd0
 80062a8:	e9c1 2300 	strd	r2, r3, [r1]
    X2state[iAcol_0 + 2] += CSE_DW.x[2];
 80062ac:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80062b0:	3302      	adds	r3, #2
 80062b2:	00db      	lsls	r3, r3, #3
 80062b4:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
 80062b8:	4413      	add	r3, r2
 80062ba:	3bd0      	subs	r3, #208	; 0xd0
 80062bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80062c0:	4b29      	ldr	r3, [pc, #164]	; (8006368 <CSE_step+0x1270>)
 80062c2:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 80062c6:	f8d7 42e0 	ldr.w	r4, [r7, #736]	; 0x2e0
 80062ca:	3402      	adds	r4, #2
 80062cc:	f7f9 ffd0 	bl	8000270 <__adddf3>
 80062d0:	4602      	mov	r2, r0
 80062d2:	460b      	mov	r3, r1
 80062d4:	00e1      	lsls	r1, r4, #3
 80062d6:	f507 703c 	add.w	r0, r7, #752	; 0x2f0
 80062da:	4401      	add	r1, r0
 80062dc:	39d0      	subs	r1, #208	; 0xd0
 80062de:	e9c1 2300 	strd	r2, r3, [r1]
    iAcol_0 += 3;
 80062e2:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80062e6:	3303      	adds	r3, #3
 80062e8:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
  for (iAcol = 0; iAcol < 6; iAcol++) {
 80062ec:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80062f0:	3301      	adds	r3, #1
 80062f2:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 80062f6:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80062fa:	2b05      	cmp	r3, #5
 80062fc:	dda2      	ble.n	8006244 <CSE_step+0x114c>
  }

  iAcol_0 = 0;
 80062fe:	2300      	movs	r3, #0
 8006300:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
  for (iAcol = 0; iAcol < 6; iAcol++) {
 8006304:	2300      	movs	r3, #0
 8006306:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 800630a:	e018      	b.n	800633e <CSE_step+0x1246>
    CSE_S_x(&X2state[iAcol_0], &Y2[iAcol_0]);
 800630c:	f507 7208 	add.w	r2, r7, #544	; 0x220
 8006310:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006314:	00db      	lsls	r3, r3, #3
 8006316:	18d0      	adds	r0, r2, r3
 8006318:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 800631c:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006320:	00db      	lsls	r3, r3, #3
 8006322:	4413      	add	r3, r2
 8006324:	4619      	mov	r1, r3
 8006326:	f7fe fa6f 	bl	8004808 <CSE_S_x>
    iAcol_0 += 3;
 800632a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800632e:	3303      	adds	r3, #3
 8006330:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
  for (iAcol = 0; iAcol < 6; iAcol++) {
 8006334:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006338:	3301      	adds	r3, #1
 800633a:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 800633e:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006342:	2b05      	cmp	r3, #5
 8006344:	dde2      	ble.n	800630c <CSE_step+0x1214>
  }

  CSE_S_x(CSE_DW.x, tempY);
 8006346:	f107 0310 	add.w	r3, r7, #16
 800634a:	4619      	mov	r1, r3
 800634c:	4808      	ldr	r0, [pc, #32]	; (8006370 <CSE_step+0x1278>)
 800634e:	f7fe fa5b 	bl	8004808 <CSE_S_x>
  for (iAcol_0 = 0; iAcol_0 < 3; iAcol_0++) {
 8006352:	2300      	movs	r3, #0
 8006354:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8006358:	e021      	b.n	800639e <CSE_step+0x12a6>
 800635a:	bf00      	nop
 800635c:	f3af 8000 	nop.w
 8006360:	64b487da 	.word	0x64b487da
 8006364:	3f5c60bf 	.word	0x3f5c60bf
 8006368:	2001bdf0 	.word	0x2001bdf0
 800636c:	2001bdd0 	.word	0x2001bdd0
 8006370:	2001be38 	.word	0x2001be38
    C[iAcol_0] = CSE_DW.x[iAcol_0];
 8006374:	4ab8      	ldr	r2, [pc, #736]	; (8006658 <CSE_step+0x1560>)
 8006376:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800637a:	3309      	adds	r3, #9
 800637c:	00db      	lsls	r3, r3, #3
 800637e:	4413      	add	r3, r2
 8006380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006384:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8006388:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 800638c:	00c9      	lsls	r1, r1, #3
 800638e:	4401      	add	r1, r0
 8006390:	e9c1 2300 	strd	r2, r3, [r1]
  for (iAcol_0 = 0; iAcol_0 < 3; iAcol_0++) {
 8006394:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006398:	3301      	adds	r3, #1
 800639a:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 800639e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80063a2:	2b02      	cmp	r3, #2
 80063a4:	dde6      	ble.n	8006374 <CSE_step+0x127c>
  }

  UTMeanCovSqrt_C2vgLQ4W(Wmean, Wcov, -999999.0, tempY, Y2, C, X2state, CSE_DW.x,
 80063a6:	f507 71c8 	add.w	r1, r7, #400	; 0x190
 80063aa:	f107 0210 	add.w	r2, r7, #16
 80063ae:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80063b2:	9304      	str	r3, [sp, #16]
 80063b4:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80063b8:	9303      	str	r3, [sp, #12]
 80063ba:	4ba8      	ldr	r3, [pc, #672]	; (800665c <CSE_step+0x1564>)
 80063bc:	9302      	str	r3, [sp, #8]
 80063be:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80063c2:	9301      	str	r3, [sp, #4]
 80063c4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80063c8:	9300      	str	r3, [sp, #0]
 80063ca:	460b      	mov	r3, r1
 80063cc:	ed9f 0ba0 	vldr	d0, [pc, #640]	; 8006650 <CSE_step+0x1558>
 80063d0:	49a3      	ldr	r1, [pc, #652]	; (8006660 <CSE_step+0x1568>)
 80063d2:	48a4      	ldr	r0, [pc, #656]	; (8006664 <CSE_step+0x156c>)
 80063d4:	f001 fc66 	bl	8007ca4 <UTMeanCovSqrt_C2vgLQ4W>
    Ss, R);
  memset(&R[0], 0, 9U * sizeof(real_T));
 80063d8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80063dc:	2248      	movs	r2, #72	; 0x48
 80063de:	2100      	movs	r1, #0
 80063e0:	4618      	mov	r0, r3
 80063e2:	f013 fcd9 	bl	8019d98 <memset>
  R[0] = 1.0;
 80063e6:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 80063ea:	f04f 0200 	mov.w	r2, #0
 80063ee:	4b9e      	ldr	r3, [pc, #632]	; (8006668 <CSE_step+0x1570>)
 80063f0:	e9c1 2300 	strd	r2, r3, [r1]
  R[4] = 1.0;
 80063f4:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 80063f8:	f04f 0200 	mov.w	r2, #0
 80063fc:	4b9a      	ldr	r3, [pc, #616]	; (8006668 <CSE_step+0x1570>)
 80063fe:	e9c1 2308 	strd	r2, r3, [r1, #32]
  R[8] = 1.0;
 8006402:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 8006406:	f04f 0200 	mov.w	r2, #0
 800640a:	4b97      	ldr	r3, [pc, #604]	; (8006668 <CSE_step+0x1570>)
 800640c:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
  for (iAcol_0 = 0; iAcol_0 < 3; iAcol_0++) {
 8006410:	2300      	movs	r3, #0
 8006412:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8006416:	e07e      	b.n	8006516 <CSE_step+0x141e>
    coffset = iAcol_0 * 3;
 8006418:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 800641c:	4613      	mov	r3, r2
 800641e:	005b      	lsls	r3, r3, #1
 8006420:	4413      	add	r3, r2
 8006422:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
    for (iAcol = 0; iAcol < 3; iAcol++) {
 8006426:	2300      	movs	r3, #0
 8006428:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 800642c:	e06a      	b.n	8006504 <CSE_step+0x140c>
      aoffset = iAcol * 3;
 800642e:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8006432:	4613      	mov	r3, r2
 8006434:	005b      	lsls	r3, r3, #1
 8006436:	4413      	add	r3, r2
 8006438:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
      R_0[coffset + iAcol] = (Ss[aoffset + 1] * R[iAcol_0 + 3] + Ss[aoffset] *
 800643c:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8006440:	3301      	adds	r3, #1
 8006442:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8006446:	00db      	lsls	r3, r3, #3
 8006448:	4413      	add	r3, r2
 800644a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800644e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006452:	3303      	adds	r3, #3
 8006454:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8006458:	00db      	lsls	r3, r3, #3
 800645a:	4413      	add	r3, r2
 800645c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006460:	f7fa f8bc 	bl	80005dc <__aeabi_dmul>
 8006464:	4602      	mov	r2, r0
 8006466:	460b      	mov	r3, r1
 8006468:	4614      	mov	r4, r2
 800646a:	461d      	mov	r5, r3
 800646c:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8006470:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8006474:	00db      	lsls	r3, r3, #3
 8006476:	4413      	add	r3, r2
 8006478:	e9d3 0100 	ldrd	r0, r1, [r3]
        R[iAcol_0]) + Ss[aoffset + 2] * R[iAcol_0 + 6];
 800647c:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8006480:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006484:	00db      	lsls	r3, r3, #3
 8006486:	4413      	add	r3, r2
 8006488:	e9d3 2300 	ldrd	r2, r3, [r3]
      R_0[coffset + iAcol] = (Ss[aoffset + 1] * R[iAcol_0 + 3] + Ss[aoffset] *
 800648c:	f7fa f8a6 	bl	80005dc <__aeabi_dmul>
 8006490:	4602      	mov	r2, r0
 8006492:	460b      	mov	r3, r1
 8006494:	4620      	mov	r0, r4
 8006496:	4629      	mov	r1, r5
 8006498:	f7f9 feea 	bl	8000270 <__adddf3>
 800649c:	4602      	mov	r2, r0
 800649e:	460b      	mov	r3, r1
 80064a0:	4690      	mov	r8, r2
 80064a2:	4699      	mov	r9, r3
        R[iAcol_0]) + Ss[aoffset + 2] * R[iAcol_0 + 6];
 80064a4:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 80064a8:	3302      	adds	r3, #2
 80064aa:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 80064ae:	00db      	lsls	r3, r3, #3
 80064b0:	4413      	add	r3, r2
 80064b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80064b6:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80064ba:	3306      	adds	r3, #6
 80064bc:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80064c0:	00db      	lsls	r3, r3, #3
 80064c2:	4413      	add	r3, r2
 80064c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064c8:	f7fa f888 	bl	80005dc <__aeabi_dmul>
 80064cc:	4602      	mov	r2, r0
 80064ce:	460b      	mov	r3, r1
 80064d0:	4610      	mov	r0, r2
 80064d2:	4619      	mov	r1, r3
      R_0[coffset + iAcol] = (Ss[aoffset + 1] * R[iAcol_0 + 3] + Ss[aoffset] *
 80064d4:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 80064d8:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80064dc:	18d4      	adds	r4, r2, r3
        R[iAcol_0]) + Ss[aoffset + 2] * R[iAcol_0 + 6];
 80064de:	4602      	mov	r2, r0
 80064e0:	460b      	mov	r3, r1
 80064e2:	4640      	mov	r0, r8
 80064e4:	4649      	mov	r1, r9
 80064e6:	f7f9 fec3 	bl	8000270 <__adddf3>
 80064ea:	4602      	mov	r2, r0
 80064ec:	460b      	mov	r3, r1
      R_0[coffset + iAcol] = (Ss[aoffset + 1] * R[iAcol_0 + 3] + Ss[aoffset] *
 80064ee:	f507 7080 	add.w	r0, r7, #256	; 0x100
 80064f2:	00e1      	lsls	r1, r4, #3
 80064f4:	4401      	add	r1, r0
 80064f6:	e9c1 2300 	strd	r2, r3, [r1]
    for (iAcol = 0; iAcol < 3; iAcol++) {
 80064fa:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80064fe:	3301      	adds	r3, #1
 8006500:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8006504:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006508:	2b02      	cmp	r3, #2
 800650a:	dd90      	ble.n	800642e <CSE_step+0x1336>
  for (iAcol_0 = 0; iAcol_0 < 3; iAcol_0++) {
 800650c:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006510:	3301      	adds	r3, #1
 8006512:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8006516:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800651a:	2b02      	cmp	r3, #2
 800651c:	f77f af7c 	ble.w	8006418 <CSE_step+0x1320>
    }
  }

  iAcol_0 = 0;
 8006520:	2300      	movs	r3, #0
 8006522:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
  iAcol = 0;
 8006526:	2300      	movs	r3, #0
 8006528:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
  for (coffset = 0; coffset < 3; coffset++) {
 800652c:	2300      	movs	r3, #0
 800652e:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
 8006532:	e077      	b.n	8006624 <CSE_step+0x152c>
    Y2[iAcol_0] = R_0[iAcol];
 8006534:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8006538:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 800653c:	00db      	lsls	r3, r3, #3
 800653e:	4413      	add	r3, r2
 8006540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006544:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 8006548:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 800654c:	00c9      	lsls	r1, r1, #3
 800654e:	4401      	add	r1, r0
 8006550:	e9c1 2300 	strd	r2, r3, [r1]
    Y2[iAcol_0 + 3] = CSE_P.Q_Value[coffset];
 8006554:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006558:	1cd9      	adds	r1, r3, #3
 800655a:	4a44      	ldr	r2, [pc, #272]	; (800666c <CSE_step+0x1574>)
 800655c:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8006560:	3344      	adds	r3, #68	; 0x44
 8006562:	00db      	lsls	r3, r3, #3
 8006564:	4413      	add	r3, r2
 8006566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800656a:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 800656e:	00c9      	lsls	r1, r1, #3
 8006570:	4401      	add	r1, r0
 8006572:	e9c1 2300 	strd	r2, r3, [r1]
    Y2[iAcol_0 + 1] = R_0[iAcol + 1];
 8006576:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 800657a:	3301      	adds	r3, #1
 800657c:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8006580:	1c51      	adds	r1, r2, #1
 8006582:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8006586:	00db      	lsls	r3, r3, #3
 8006588:	4413      	add	r3, r2
 800658a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800658e:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 8006592:	00c9      	lsls	r1, r1, #3
 8006594:	4401      	add	r1, r0
 8006596:	e9c1 2300 	strd	r2, r3, [r1]
    Y2[iAcol_0 + 4] = CSE_P.Q_Value[coffset + 3];
 800659a:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 800659e:	3303      	adds	r3, #3
 80065a0:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 80065a4:	1d11      	adds	r1, r2, #4
 80065a6:	4a31      	ldr	r2, [pc, #196]	; (800666c <CSE_step+0x1574>)
 80065a8:	3344      	adds	r3, #68	; 0x44
 80065aa:	00db      	lsls	r3, r3, #3
 80065ac:	4413      	add	r3, r2
 80065ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065b2:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 80065b6:	00c9      	lsls	r1, r1, #3
 80065b8:	4401      	add	r1, r0
 80065ba:	e9c1 2300 	strd	r2, r3, [r1]
    Y2[iAcol_0 + 2] = R_0[iAcol + 2];
 80065be:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80065c2:	3302      	adds	r3, #2
 80065c4:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 80065c8:	1c91      	adds	r1, r2, #2
 80065ca:	f507 7280 	add.w	r2, r7, #256	; 0x100
 80065ce:	00db      	lsls	r3, r3, #3
 80065d0:	4413      	add	r3, r2
 80065d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065d6:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 80065da:	00c9      	lsls	r1, r1, #3
 80065dc:	4401      	add	r1, r0
 80065de:	e9c1 2300 	strd	r2, r3, [r1]
    Y2[iAcol_0 + 5] = CSE_P.Q_Value[coffset + 6];
 80065e2:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 80065e6:	3306      	adds	r3, #6
 80065e8:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 80065ec:	1d51      	adds	r1, r2, #5
 80065ee:	4a1f      	ldr	r2, [pc, #124]	; (800666c <CSE_step+0x1574>)
 80065f0:	3344      	adds	r3, #68	; 0x44
 80065f2:	00db      	lsls	r3, r3, #3
 80065f4:	4413      	add	r3, r2
 80065f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065fa:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 80065fe:	00c9      	lsls	r1, r1, #3
 8006600:	4401      	add	r1, r0
 8006602:	e9c1 2300 	strd	r2, r3, [r1]
    iAcol_0 += 6;
 8006606:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800660a:	3306      	adds	r3, #6
 800660c:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
    iAcol += 3;
 8006610:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006614:	3303      	adds	r3, #3
 8006616:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
  for (coffset = 0; coffset < 3; coffset++) {
 800661a:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 800661e:	3301      	adds	r3, #1
 8006620:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
 8006624:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8006628:	2b02      	cmp	r3, #2
 800662a:	dd83      	ble.n	8006534 <CSE_step+0x143c>
  }

  qr_DvOBrgQi(Y2, X2state, R);
 800662c:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8006630:	f507 7108 	add.w	r1, r7, #544	; 0x220
 8006634:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8006638:	4618      	mov	r0, r3
 800663a:	f004 fceb 	bl	800b014 <qr_DvOBrgQi>
  iAcol_0 = 0;
 800663e:	2300      	movs	r3, #0
 8006640:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
  for (iAcol = 0; iAcol < 3; iAcol++) {
 8006644:	2300      	movs	r3, #0
 8006646:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 800664a:	e04c      	b.n	80066e6 <CSE_step+0x15ee>
 800664c:	f3af 8000 	nop.w
 8006650:	00000000 	.word	0x00000000
 8006654:	c12e847e 	.word	0xc12e847e
 8006658:	2001bdf0 	.word	0x2001bdf0
 800665c:	2001be38 	.word	0x2001be38
 8006660:	0801b120 	.word	0x0801b120
 8006664:	0801b110 	.word	0x0801b110
 8006668:	3ff00000 	.word	0x3ff00000
 800666c:	20000008 	.word	0x20000008
    CSE_DW.P[iAcol_0] = R[iAcol];
 8006670:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8006674:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006678:	00db      	lsls	r3, r3, #3
 800667a:	4413      	add	r3, r2
 800667c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006680:	481e      	ldr	r0, [pc, #120]	; (80066fc <CSE_step+0x1604>)
 8006682:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8006686:	00c9      	lsls	r1, r1, #3
 8006688:	4401      	add	r1, r0
 800668a:	e9c1 2300 	strd	r2, r3, [r1]
    CSE_DW.P[iAcol_0 + 1] = R[iAcol + 3];
 800668e:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006692:	3303      	adds	r3, #3
 8006694:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8006698:	1c51      	adds	r1, r2, #1
 800669a:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800669e:	00db      	lsls	r3, r3, #3
 80066a0:	4413      	add	r3, r2
 80066a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066a6:	4815      	ldr	r0, [pc, #84]	; (80066fc <CSE_step+0x1604>)
 80066a8:	00c9      	lsls	r1, r1, #3
 80066aa:	4401      	add	r1, r0
 80066ac:	e9c1 2300 	strd	r2, r3, [r1]
    CSE_DW.P[iAcol_0 + 2] = R[iAcol + 6];
 80066b0:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80066b4:	3306      	adds	r3, #6
 80066b6:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 80066ba:	1c91      	adds	r1, r2, #2
 80066bc:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80066c0:	00db      	lsls	r3, r3, #3
 80066c2:	4413      	add	r3, r2
 80066c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c8:	480c      	ldr	r0, [pc, #48]	; (80066fc <CSE_step+0x1604>)
 80066ca:	00c9      	lsls	r1, r1, #3
 80066cc:	4401      	add	r1, r0
 80066ce:	e9c1 2300 	strd	r2, r3, [r1]
    iAcol_0 += 3;
 80066d2:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80066d6:	3303      	adds	r3, #3
 80066d8:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
  for (iAcol = 0; iAcol < 3; iAcol++) {
 80066dc:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80066e0:	3301      	adds	r3, #1
 80066e2:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 80066e6:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80066ea:	2b02      	cmp	r3, #2
 80066ec:	ddc0      	ble.n	8006670 <CSE_step+0x1578>
  }
}
 80066ee:	bf00      	nop
 80066f0:	bf00      	nop
 80066f2:	f507 773d 	add.w	r7, r7, #756	; 0x2f4
 80066f6:	46bd      	mov	sp, r7
 80066f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80066fc:	2001bdf0 	.word	0x2001bdf0

08006700 <CSE_initialize>:

void CSE_initialize(void)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	af00      	add	r7, sp, #0
  rt_InitInfAndNaN(sizeof(real_T));
 8006704:	2008      	movs	r0, #8
 8006706:	f006 f805 	bl	800c714 <rt_InitInfAndNaN>
  memcpy(&CSE_DW.P[0], &CSE_P.DataStoreMemoryP_InitialValue[0], 9U * sizeof
 800670a:	2248      	movs	r2, #72	; 0x48
 800670c:	490b      	ldr	r1, [pc, #44]	; (800673c <CSE_initialize+0x3c>)
 800670e:	480c      	ldr	r0, [pc, #48]	; (8006740 <CSE_initialize+0x40>)
 8006710:	f013 fb34 	bl	8019d7c <memcpy>
         (real_T));
  CSE_DW.x[0] = CSE_P.DataStoreMemoryx_InitialValue[0];
 8006714:	4b0b      	ldr	r3, [pc, #44]	; (8006744 <CSE_initialize+0x44>)
 8006716:	e9d3 23ae 	ldrd	r2, r3, [r3, #696]	; 0x2b8
 800671a:	4909      	ldr	r1, [pc, #36]	; (8006740 <CSE_initialize+0x40>)
 800671c:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
  CSE_DW.x[1] = CSE_P.DataStoreMemoryx_InitialValue[1];
 8006720:	4b08      	ldr	r3, [pc, #32]	; (8006744 <CSE_initialize+0x44>)
 8006722:	e9d3 23b0 	ldrd	r2, r3, [r3, #704]	; 0x2c0
 8006726:	4906      	ldr	r1, [pc, #24]	; (8006740 <CSE_initialize+0x40>)
 8006728:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
  CSE_DW.x[2] = CSE_P.DataStoreMemoryx_InitialValue[2];
 800672c:	4b05      	ldr	r3, [pc, #20]	; (8006744 <CSE_initialize+0x44>)
 800672e:	e9d3 23b2 	ldrd	r2, r3, [r3, #712]	; 0x2c8
 8006732:	4903      	ldr	r1, [pc, #12]	; (8006740 <CSE_initialize+0x40>)
 8006734:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
}
 8006738:	bf00      	nop
 800673a:	bd80      	pop	{r7, pc}
 800673c:	20000278 	.word	0x20000278
 8006740:	2001bdf0 	.word	0x2001bdf0
 8006744:	20000008 	.word	0x20000008

08006748 <SIM0_step>:
ExtU_SIM0_T SIM0_U;
ExtY_SIM0_T SIM0_Y;
static RT_MODEL_SIM0_T SIM0_M_;
RT_MODEL_SIM0_T *const SIM0_M = &SIM0_M_;
void SIM0_step(void)
{
 8006748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800674c:	f5ad 5da0 	sub.w	sp, sp, #5120	; 0x1400
 8006750:	b087      	sub	sp, #28
 8006752:	af00      	add	r7, sp, #0
  int32_T i;
  int32_T iU;
  int32_T rtb_is_charge;
  boolean_T rtb_Logic_idx_0;
  boolean_T rtb_Logic_p_idx_0;
  rtb_Memory20 = SIM0_DW.Memory20_PreviousInput;
 8006754:	4b20      	ldr	r3, [pc, #128]	; (80067d8 <SIM0_step+0x90>)
 8006756:	f603 0308 	addw	r3, r3, #2056	; 0x808
 800675a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800675e:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 8006762:	f101 0118 	add.w	r1, r1, #24
 8006766:	e9c1 2300 	strd	r2, r3, [r1]
  rtb_Exp = exp(SIM0_P.Cap_det / (SIM0_P.C_r * 3600.0) *
 800676a:	4b1c      	ldr	r3, [pc, #112]	; (80067dc <SIM0_step+0x94>)
 800676c:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
 8006770:	4b1a      	ldr	r3, [pc, #104]	; (80067dc <SIM0_step+0x94>)
 8006772:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006776:	a316      	add	r3, pc, #88	; (adr r3, 80067d0 <SIM0_step+0x88>)
 8006778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800677c:	f7f9 ff2e 	bl	80005dc <__aeabi_dmul>
 8006780:	4602      	mov	r2, r0
 8006782:	460b      	mov	r3, r1
 8006784:	4650      	mov	r0, sl
 8006786:	4659      	mov	r1, fp
 8006788:	f7fa f852 	bl	8000830 <__aeabi_ddiv>
 800678c:	4602      	mov	r2, r0
 800678e:	460b      	mov	r3, r1
 8006790:	4610      	mov	r0, r2
 8006792:	4619      	mov	r1, r3
                SIM0_DW.Memory9_PreviousInput);
 8006794:	4b10      	ldr	r3, [pc, #64]	; (80067d8 <SIM0_step+0x90>)
 8006796:	f603 73f8 	addw	r3, r3, #4088	; 0xff8
 800679a:	e9d3 2300 	ldrd	r2, r3, [r3]
  rtb_Exp = exp(SIM0_P.Cap_det / (SIM0_P.C_r * 3600.0) *
 800679e:	f7f9 ff1d 	bl	80005dc <__aeabi_dmul>
 80067a2:	4602      	mov	r2, r0
 80067a4:	460b      	mov	r3, r1
 80067a6:	ec43 2b17 	vmov	d7, r2, r3
 80067aa:	eeb0 0a47 	vmov.f32	s0, s14
 80067ae:	eef0 0a67 	vmov.f32	s1, s15
 80067b2:	f013 fc11 	bl	8019fd8 <exp>
 80067b6:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 80067ba:	f103 0308 	add.w	r3, r3, #8
 80067be:	ed83 0b00 	vstr	d0, [r3]
  for (i = 0; i < 126; i++) {
 80067c2:	2300      	movs	r3, #0
 80067c4:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 80067c8:	f102 020c 	add.w	r2, r2, #12
 80067cc:	6013      	str	r3, [r2, #0]
 80067ce:	e1df      	b.n	8006b90 <SIM0_step+0x448>
 80067d0:	00000000 	.word	0x00000000
 80067d4:	40ac2000 	.word	0x40ac2000
 80067d8:	2001be50 	.word	0x2001be50
 80067dc:	200002e0 	.word	0x200002e0
    rtb_Memory15[i] = SIM0_DW.Memory15_PreviousInput[i];
 80067e0:	4aca      	ldr	r2, [pc, #808]	; (8006b0c <SIM0_step+0x3c4>)
 80067e2:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 80067e6:	f103 030c 	add.w	r3, r3, #12
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	3305      	adds	r3, #5
 80067ee:	00db      	lsls	r3, r3, #3
 80067f0:	4413      	add	r3, r2
 80067f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067f6:	f607 70c8 	addw	r0, r7, #4040	; 0xfc8
 80067fa:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 80067fe:	f101 010c 	add.w	r1, r1, #12
 8006802:	6809      	ldr	r1, [r1, #0]
 8006804:	00c9      	lsls	r1, r1, #3
 8006806:	4401      	add	r1, r0
 8006808:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_Memory22 = SIM0_DW.Memory_PreviousInput[i] /
 800680c:	4abf      	ldr	r2, [pc, #764]	; (8006b0c <SIM0_step+0x3c4>)
 800680e:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8006812:	f103 030c 	add.w	r3, r3, #12
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f203 1303 	addw	r3, r3, #259	; 0x103
 800681c:	00db      	lsls	r3, r3, #3
 800681e:	4413      	add	r3, r2
 8006820:	e9d3 0100 	ldrd	r0, r1, [r3]
      SIM0_DW.Memory10_PreviousInput[i];
 8006824:	4ab9      	ldr	r2, [pc, #740]	; (8006b0c <SIM0_step+0x3c4>)
 8006826:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 800682a:	f103 030c 	add.w	r3, r3, #12
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f203 1381 	addw	r3, r3, #385	; 0x181
 8006834:	00db      	lsls	r3, r3, #3
 8006836:	4413      	add	r3, r2
 8006838:	e9d3 2300 	ldrd	r2, r3, [r3]
    rtb_Memory22 = SIM0_DW.Memory_PreviousInput[i] /
 800683c:	f7f9 fff8 	bl	8000830 <__aeabi_ddiv>
 8006840:	4602      	mov	r2, r0
 8006842:	460b      	mov	r3, r1
 8006844:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 8006848:	f101 0108 	add.w	r1, r1, #8
 800684c:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_Product1_n = look1_binlxpw(rtb_Memory22, SIM0_P.soc, SIM0_P.Rs, 12U);
 8006850:	220c      	movs	r2, #12
 8006852:	49af      	ldr	r1, [pc, #700]	; (8006b10 <SIM0_step+0x3c8>)
 8006854:	48af      	ldr	r0, [pc, #700]	; (8006b14 <SIM0_step+0x3cc>)
 8006856:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 800685a:	f103 0308 	add.w	r3, r3, #8
 800685e:	ed93 0b00 	vldr	d0, [r3]
 8006862:	f003 fb65 	bl	8009f30 <look1_binlxpw>
 8006866:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 800686a:	ed83 0b00 	vstr	d0, [r3]
    rtb_is_drive = look1_binlxpw(rtb_Memory22, SIM0_P.soc, SIM0_P.tau, 12U);
 800686e:	220c      	movs	r2, #12
 8006870:	49a9      	ldr	r1, [pc, #676]	; (8006b18 <SIM0_step+0x3d0>)
 8006872:	48a8      	ldr	r0, [pc, #672]	; (8006b14 <SIM0_step+0x3cc>)
 8006874:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8006878:	f103 0308 	add.w	r3, r3, #8
 800687c:	ed93 0b00 	vldr	d0, [r3]
 8006880:	f003 fb56 	bl	8009f30 <look1_binlxpw>
 8006884:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8006888:	f103 0318 	add.w	r3, r3, #24
 800688c:	ed83 0b00 	vstr	d0, [r3]
    rtb_Product9 = rtb_Product1_n * rtb_is_drive;
 8006890:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8006894:	f103 0318 	add.w	r3, r3, #24
 8006898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800689c:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 80068a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80068a4:	f7f9 fe9a 	bl	80005dc <__aeabi_dmul>
 80068a8:	4602      	mov	r2, r0
 80068aa:	460b      	mov	r3, r1
 80068ac:	f507 519d 	add.w	r1, r7, #5024	; 0x13a0
 80068b0:	f101 0118 	add.w	r1, r1, #24
 80068b4:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_Product1_n = (rtb_Product1_n + look1_binlxpw(rtb_Memory22, SIM0_P.soc,
 80068b8:	220c      	movs	r2, #12
 80068ba:	4998      	ldr	r1, [pc, #608]	; (8006b1c <SIM0_step+0x3d4>)
 80068bc:	4895      	ldr	r0, [pc, #596]	; (8006b14 <SIM0_step+0x3cc>)
 80068be:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 80068c2:	f103 0308 	add.w	r3, r3, #8
 80068c6:	ed93 0b00 	vldr	d0, [r3]
 80068ca:	f003 fb31 	bl	8009f30 <look1_binlxpw>
 80068ce:	ec51 0b10 	vmov	r0, r1, d0
 80068d2:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 80068d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068da:	f7f9 fcc9 	bl	8000270 <__adddf3>
 80068de:	4602      	mov	r2, r0
 80068e0:	460b      	mov	r3, r1
 80068e2:	4610      	mov	r0, r2
 80068e4:	4619      	mov	r1, r3
      SIM0_P.Rp, 12U)) * SIM0_P.Ts;
 80068e6:	4b8e      	ldr	r3, [pc, #568]	; (8006b20 <SIM0_step+0x3d8>)
 80068e8:	e9d3 233c 	ldrd	r2, r3, [r3, #240]	; 0xf0
    rtb_Product1_n = (rtb_Product1_n + look1_binlxpw(rtb_Memory22, SIM0_P.soc,
 80068ec:	f7f9 fe76 	bl	80005dc <__aeabi_dmul>
 80068f0:	4602      	mov	r2, r0
 80068f2:	460b      	mov	r3, r1
 80068f4:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 80068f8:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_Product1_n = (((2.0 * rtb_Product9 + rtb_Product1_n) * rtb_Memory20 +
 80068fc:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 8006900:	f103 0318 	add.w	r3, r3, #24
 8006904:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006908:	4602      	mov	r2, r0
 800690a:	460b      	mov	r3, r1
 800690c:	f7f9 fcb0 	bl	8000270 <__adddf3>
 8006910:	4602      	mov	r2, r0
 8006912:	460b      	mov	r3, r1
 8006914:	4610      	mov	r0, r2
 8006916:	4619      	mov	r1, r3
 8006918:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 800691c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006920:	f7f9 fca6 	bl	8000270 <__adddf3>
 8006924:	4602      	mov	r2, r0
 8006926:	460b      	mov	r3, r1
 8006928:	4610      	mov	r0, r2
 800692a:	4619      	mov	r1, r3
 800692c:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8006930:	f103 0318 	add.w	r3, r3, #24
 8006934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006938:	f7f9 fe50 	bl	80005dc <__aeabi_dmul>
 800693c:	4602      	mov	r2, r0
 800693e:	460b      	mov	r3, r1
 8006940:	4692      	mov	sl, r2
 8006942:	469b      	mov	fp, r3
                       (rtb_Product1_n - 2.0 * rtb_Product9) *
 8006944:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 8006948:	f103 0318 	add.w	r3, r3, #24
 800694c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006950:	4602      	mov	r2, r0
 8006952:	460b      	mov	r3, r1
 8006954:	f7f9 fc8c 	bl	8000270 <__adddf3>
 8006958:	4602      	mov	r2, r0
 800695a:	460b      	mov	r3, r1
 800695c:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 8006960:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006964:	f7f9 fc82 	bl	800026c <__aeabi_dsub>
 8006968:	4602      	mov	r2, r0
 800696a:	460b      	mov	r3, r1
 800696c:	4610      	mov	r0, r2
 800696e:	4619      	mov	r1, r3
                       SIM0_DW.Memory11_PreviousInput) - (SIM0_P.Ts - 2.0 *
 8006970:	4b66      	ldr	r3, [pc, #408]	; (8006b0c <SIM0_step+0x3c4>)
 8006972:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 8006976:	e9d3 2300 	ldrd	r2, r3, [r3]
                       (rtb_Product1_n - 2.0 * rtb_Product9) *
 800697a:	f7f9 fe2f 	bl	80005dc <__aeabi_dmul>
 800697e:	4602      	mov	r2, r0
 8006980:	460b      	mov	r3, r1
    rtb_Product1_n = (((2.0 * rtb_Product9 + rtb_Product1_n) * rtb_Memory20 +
 8006982:	4650      	mov	r0, sl
 8006984:	4659      	mov	r1, fp
 8006986:	f7f9 fc73 	bl	8000270 <__adddf3>
 800698a:	4602      	mov	r2, r0
 800698c:	460b      	mov	r3, r1
 800698e:	e9c7 2300 	strd	r2, r3, [r7]
                       SIM0_DW.Memory11_PreviousInput) - (SIM0_P.Ts - 2.0 *
 8006992:	4b63      	ldr	r3, [pc, #396]	; (8006b20 <SIM0_step+0x3d8>)
 8006994:	e9d3 ab3c 	ldrd	sl, fp, [r3, #240]	; 0xf0
 8006998:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 800699c:	f103 0318 	add.w	r3, r3, #24
 80069a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80069a4:	4602      	mov	r2, r0
 80069a6:	460b      	mov	r3, r1
 80069a8:	f7f9 fc62 	bl	8000270 <__adddf3>
 80069ac:	4602      	mov	r2, r0
 80069ae:	460b      	mov	r3, r1
 80069b0:	4650      	mov	r0, sl
 80069b2:	4659      	mov	r1, fp
 80069b4:	f7f9 fc5a 	bl	800026c <__aeabi_dsub>
 80069b8:	4602      	mov	r2, r0
 80069ba:	460b      	mov	r3, r1
 80069bc:	4610      	mov	r0, r2
 80069be:	4619      	mov	r1, r3
      rtb_is_drive) * SIM0_DW.Memory12_PreviousInput[i]) / (2.0 * rtb_is_drive +
 80069c0:	4a52      	ldr	r2, [pc, #328]	; (8006b0c <SIM0_step+0x3c4>)
 80069c2:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 80069c6:	f103 030c 	add.w	r3, r3, #12
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	3383      	adds	r3, #131	; 0x83
 80069ce:	00db      	lsls	r3, r3, #3
 80069d0:	4413      	add	r3, r2
 80069d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069d6:	f7f9 fe01 	bl	80005dc <__aeabi_dmul>
 80069da:	4602      	mov	r2, r0
 80069dc:	460b      	mov	r3, r1
                       SIM0_DW.Memory11_PreviousInput) - (SIM0_P.Ts - 2.0 *
 80069de:	e9d7 0100 	ldrd	r0, r1, [r7]
 80069e2:	f7f9 fc43 	bl	800026c <__aeabi_dsub>
 80069e6:	4602      	mov	r2, r0
 80069e8:	460b      	mov	r3, r1
 80069ea:	4692      	mov	sl, r2
 80069ec:	469b      	mov	fp, r3
      rtb_is_drive) * SIM0_DW.Memory12_PreviousInput[i]) / (2.0 * rtb_is_drive +
 80069ee:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 80069f2:	f103 0318 	add.w	r3, r3, #24
 80069f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80069fa:	4602      	mov	r2, r0
 80069fc:	460b      	mov	r3, r1
 80069fe:	f7f9 fc37 	bl	8000270 <__adddf3>
 8006a02:	4602      	mov	r2, r0
 8006a04:	460b      	mov	r3, r1
 8006a06:	4610      	mov	r0, r2
 8006a08:	4619      	mov	r1, r3
      SIM0_P.Ts);
 8006a0a:	4b45      	ldr	r3, [pc, #276]	; (8006b20 <SIM0_step+0x3d8>)
 8006a0c:	e9d3 233c 	ldrd	r2, r3, [r3, #240]	; 0xf0
      rtb_is_drive) * SIM0_DW.Memory12_PreviousInput[i]) / (2.0 * rtb_is_drive +
 8006a10:	f7f9 fc2e 	bl	8000270 <__adddf3>
 8006a14:	4602      	mov	r2, r0
 8006a16:	460b      	mov	r3, r1
    rtb_Product1_n = (((2.0 * rtb_Product9 + rtb_Product1_n) * rtb_Memory20 +
 8006a18:	4650      	mov	r0, sl
 8006a1a:	4659      	mov	r1, fp
 8006a1c:	f7f9 ff08 	bl	8000830 <__aeabi_ddiv>
 8006a20:	4602      	mov	r2, r0
 8006a22:	460b      	mov	r3, r1
 8006a24:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 8006a28:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_is_drive = rtb_Product1_n + look1_binlxpw(rtb_Memory22, SIM0_P.soc,
 8006a2c:	220c      	movs	r2, #12
 8006a2e:	493d      	ldr	r1, [pc, #244]	; (8006b24 <SIM0_step+0x3dc>)
 8006a30:	4838      	ldr	r0, [pc, #224]	; (8006b14 <SIM0_step+0x3cc>)
 8006a32:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8006a36:	f103 0308 	add.w	r3, r3, #8
 8006a3a:	ed93 0b00 	vldr	d0, [r3]
 8006a3e:	f003 fa77 	bl	8009f30 <look1_binlxpw>
 8006a42:	ec53 2b10 	vmov	r2, r3, d0
 8006a46:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 8006a4a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a4e:	f7f9 fc0f 	bl	8000270 <__adddf3>
 8006a52:	4602      	mov	r2, r0
 8006a54:	460b      	mov	r3, r1
 8006a56:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 8006a5a:	f101 0118 	add.w	r1, r1, #24
 8006a5e:	e9c1 2300 	strd	r2, r3, [r1]
      SIM0_P.ocv, 12U);
    SIM0_Y.cell_voltages[i] = rtb_is_drive;
 8006a62:	4a31      	ldr	r2, [pc, #196]	; (8006b28 <SIM0_step+0x3e0>)
 8006a64:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8006a68:	f103 030c 	add.w	r3, r3, #12
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	3308      	adds	r3, #8
 8006a70:	00db      	lsls	r3, r3, #3
 8006a72:	18d1      	adds	r1, r2, r3
 8006a74:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8006a78:	f103 0318 	add.w	r3, r3, #24
 8006a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a80:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_Y.cell_socs[i] = rtb_Memory22;
 8006a84:	4a28      	ldr	r2, [pc, #160]	; (8006b28 <SIM0_step+0x3e0>)
 8006a86:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8006a8a:	f103 030c 	add.w	r3, r3, #12
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	3386      	adds	r3, #134	; 0x86
 8006a92:	00db      	lsls	r3, r3, #3
 8006a94:	18d1      	adds	r1, r2, r3
 8006a96:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8006a9a:	f103 0308 	add.w	r3, r3, #8
 8006a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aa2:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_Y.cell_capacities[i] = SIM0_DW.Memory10_PreviousInput[i];
 8006aa6:	4a19      	ldr	r2, [pc, #100]	; (8006b0c <SIM0_step+0x3c4>)
 8006aa8:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8006aac:	f103 030c 	add.w	r3, r3, #12
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f203 1381 	addw	r3, r3, #385	; 0x181
 8006ab6:	00db      	lsls	r3, r3, #3
 8006ab8:	4413      	add	r3, r2
 8006aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006abe:	481a      	ldr	r0, [pc, #104]	; (8006b28 <SIM0_step+0x3e0>)
 8006ac0:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 8006ac4:	f101 010c 	add.w	r1, r1, #12
 8006ac8:	6809      	ldr	r1, [r1, #0]
 8006aca:	f501 7182 	add.w	r1, r1, #260	; 0x104
 8006ace:	00c9      	lsls	r1, r1, #3
 8006ad0:	4401      	add	r1, r0
 8006ad2:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_Memory21[i] = SIM0_DW.Memory10_PreviousInput[i] * rtb_Exp;
 8006ad6:	4a0d      	ldr	r2, [pc, #52]	; (8006b0c <SIM0_step+0x3c4>)
 8006ad8:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8006adc:	f103 030c 	add.w	r3, r3, #12
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f203 1381 	addw	r3, r3, #385	; 0x181
 8006ae6:	00db      	lsls	r3, r3, #3
 8006ae8:	4413      	add	r3, r2
 8006aea:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006aee:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 8006af2:	f103 0308 	add.w	r3, r3, #8
 8006af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006afa:	f7f9 fd6f 	bl	80005dc <__aeabi_dmul>
 8006afe:	4602      	mov	r2, r0
 8006b00:	460b      	mov	r3, r1
 8006b02:	f607 30d8 	addw	r0, r7, #3032	; 0xbd8
 8006b06:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 8006b0a:	e00f      	b.n	8006b2c <SIM0_step+0x3e4>
 8006b0c:	2001be50 	.word	0x2001be50
 8006b10:	20000368 	.word	0x20000368
 8006b14:	20000e00 	.word	0x20000e00
 8006b18:	20000e68 	.word	0x20000e68
 8006b1c:	20000300 	.word	0x20000300
 8006b20:	200002e0 	.word	0x200002e0
 8006b24:	20000d98 	.word	0x20000d98
 8006b28:	2001d6b0 	.word	0x2001d6b0
 8006b2c:	f101 010c 	add.w	r1, r1, #12
 8006b30:	6809      	ldr	r1, [r1, #0]
 8006b32:	00c9      	lsls	r1, r1, #3
 8006b34:	4401      	add	r1, r0
 8006b36:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_Rsz[i] = rtb_Product1_n;
 8006b3a:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 8006b3e:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8006b42:	f103 030c 	add.w	r3, r3, #12
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	00db      	lsls	r3, r3, #3
 8006b4a:	18d1      	adds	r1, r2, r3
 8006b4c:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8006b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b54:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_Rpz[i] = rtb_is_drive;
 8006b58:	f507 62fd 	add.w	r2, r7, #2024	; 0x7e8
 8006b5c:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8006b60:	f103 030c 	add.w	r3, r3, #12
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	00db      	lsls	r3, r3, #3
 8006b68:	18d1      	adds	r1, r2, r3
 8006b6a:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8006b6e:	f103 0318 	add.w	r3, r3, #24
 8006b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b76:	e9c1 2300 	strd	r2, r3, [r1]
  for (i = 0; i < 126; i++) {
 8006b7a:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8006b7e:	f103 030c 	add.w	r3, r3, #12
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	3301      	adds	r3, #1
 8006b86:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 8006b8a:	f102 020c 	add.w	r2, r2, #12
 8006b8e:	6013      	str	r3, [r2, #0]
 8006b90:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8006b94:	f103 030c 	add.w	r3, r3, #12
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	2b7d      	cmp	r3, #125	; 0x7d
 8006b9c:	f77f ae20 	ble.w	80067e0 <SIM0_step+0x98>
  }

  rtb_Exp = SIM0_P.Ts * rtb_Memory20;
 8006ba0:	4ba2      	ldr	r3, [pc, #648]	; (8006e2c <SIM0_step+0x6e4>)
 8006ba2:	e9d3 233c 	ldrd	r2, r3, [r3, #240]	; 0xf0
 8006ba6:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 8006baa:	f101 0118 	add.w	r1, r1, #24
 8006bae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006bb2:	f7f9 fd13 	bl	80005dc <__aeabi_dmul>
 8006bb6:	4602      	mov	r2, r0
 8006bb8:	460b      	mov	r3, r1
 8006bba:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 8006bbe:	f101 0108 	add.w	r1, r1, #8
 8006bc2:	e9c1 2300 	strd	r2, r3, [r1]
  for (i = 0; i < 126; i++) {
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 8006bcc:	f102 020c 	add.w	r2, r2, #12
 8006bd0:	6013      	str	r3, [r2, #0]
 8006bd2:	e067      	b.n	8006ca4 <SIM0_step+0x55c>
    rtb_Switch[i] = SIM0_DW.Memory21_PreviousInput[i] / SIM0_P.R_short
 8006bd4:	4a96      	ldr	r2, [pc, #600]	; (8006e30 <SIM0_step+0x6e8>)
 8006bd6:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8006bda:	f103 030c 	add.w	r3, r3, #12
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8006be4:	00db      	lsls	r3, r3, #3
 8006be6:	4413      	add	r3, r2
 8006be8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006bec:	4b8f      	ldr	r3, [pc, #572]	; (8006e2c <SIM0_step+0x6e4>)
 8006bee:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8006bf2:	f7f9 fe1d 	bl	8000830 <__aeabi_ddiv>
 8006bf6:	4602      	mov	r2, r0
 8006bf8:	460b      	mov	r3, r1
 8006bfa:	4610      	mov	r0, r2
 8006bfc:	4619      	mov	r1, r3
      * SIM0_DW.Memory19_PreviousInput[i] * SIM0_P.Gain_Gain + (rtb_Exp +
 8006bfe:	4a8c      	ldr	r2, [pc, #560]	; (8006e30 <SIM0_step+0x6e8>)
 8006c00:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8006c04:	f103 030c 	add.w	r3, r3, #12
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006c0e:	00db      	lsls	r3, r3, #3
 8006c10:	4413      	add	r3, r2
 8006c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c16:	f7f9 fce1 	bl	80005dc <__aeabi_dmul>
 8006c1a:	4602      	mov	r2, r0
 8006c1c:	460b      	mov	r3, r1
 8006c1e:	4610      	mov	r0, r2
 8006c20:	4619      	mov	r1, r3
 8006c22:	4b82      	ldr	r3, [pc, #520]	; (8006e2c <SIM0_step+0x6e4>)
 8006c24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c28:	3318      	adds	r3, #24
 8006c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c2e:	f7f9 fcd5 	bl	80005dc <__aeabi_dmul>
 8006c32:	4602      	mov	r2, r0
 8006c34:	460b      	mov	r3, r1
 8006c36:	4692      	mov	sl, r2
 8006c38:	469b      	mov	fp, r3
      SIM0_DW.Memory_PreviousInput[i]);
 8006c3a:	4a7d      	ldr	r2, [pc, #500]	; (8006e30 <SIM0_step+0x6e8>)
 8006c3c:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8006c40:	f103 030c 	add.w	r3, r3, #12
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f203 1303 	addw	r3, r3, #259	; 0x103
 8006c4a:	00db      	lsls	r3, r3, #3
 8006c4c:	4413      	add	r3, r2
 8006c4e:	e9d3 0100 	ldrd	r0, r1, [r3]
      * SIM0_DW.Memory19_PreviousInput[i] * SIM0_P.Gain_Gain + (rtb_Exp +
 8006c52:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 8006c56:	f103 0308 	add.w	r3, r3, #8
 8006c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c5e:	f7f9 fb07 	bl	8000270 <__adddf3>
 8006c62:	4602      	mov	r2, r0
 8006c64:	460b      	mov	r3, r1
 8006c66:	4650      	mov	r0, sl
 8006c68:	4659      	mov	r1, fp
 8006c6a:	f7f9 fb01 	bl	8000270 <__adddf3>
 8006c6e:	4602      	mov	r2, r0
 8006c70:	460b      	mov	r3, r1
 8006c72:	4610      	mov	r0, r2
 8006c74:	4619      	mov	r1, r3
    rtb_Switch[i] = SIM0_DW.Memory21_PreviousInput[i] / SIM0_P.R_short
 8006c76:	f107 0318 	add.w	r3, r7, #24
 8006c7a:	3b10      	subs	r3, #16
 8006c7c:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 8006c80:	f102 020c 	add.w	r2, r2, #12
 8006c84:	6812      	ldr	r2, [r2, #0]
 8006c86:	00d2      	lsls	r2, r2, #3
 8006c88:	4413      	add	r3, r2
 8006c8a:	e9c3 0100 	strd	r0, r1, [r3]
  for (i = 0; i < 126; i++) {
 8006c8e:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8006c92:	f103 030c 	add.w	r3, r3, #12
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	3301      	adds	r3, #1
 8006c9a:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 8006c9e:	f102 020c 	add.w	r2, r2, #12
 8006ca2:	6013      	str	r3, [r2, #0]
 8006ca4:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8006ca8:	f103 030c 	add.w	r3, r3, #12
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	2b7d      	cmp	r3, #125	; 0x7d
 8006cb0:	dd90      	ble.n	8006bd4 <SIM0_step+0x48c>
  }

  boolean_T rtb_Logic_idx_1;
  i = (int32_T)(((((uint32_T)(SIM0_DW.Memory1_PreviousInput != 0.0) << 1) +
 8006cb2:	4b5f      	ldr	r3, [pc, #380]	; (8006e30 <SIM0_step+0x6e8>)
 8006cb4:	f503 53bf 	add.w	r3, r3, #6112	; 0x17e0
 8006cb8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006cbc:	f04f 0200 	mov.w	r2, #0
 8006cc0:	f04f 0300 	mov.w	r3, #0
 8006cc4:	f7f9 fef2 	bl	8000aac <__aeabi_dcmpeq>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d101      	bne.n	8006cd2 <SIM0_step+0x58a>
 8006cce:	2602      	movs	r6, #2
 8006cd0:	e000      	b.n	8006cd4 <SIM0_step+0x58c>
 8006cd2:	2600      	movs	r6, #0
                  (SIM0_DW.Memory2_PreviousInput != 0.0)) << 1) +
 8006cd4:	4b56      	ldr	r3, [pc, #344]	; (8006e30 <SIM0_step+0x6e8>)
 8006cd6:	f503 53bf 	add.w	r3, r3, #6112	; 0x17e0
 8006cda:	3308      	adds	r3, #8
 8006cdc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	469a      	mov	sl, r3
 8006ce4:	f04f 0200 	mov.w	r2, #0
 8006ce8:	f04f 0300 	mov.w	r3, #0
 8006cec:	f7f9 fede 	bl	8000aac <__aeabi_dcmpeq>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d001      	beq.n	8006cfa <SIM0_step+0x5b2>
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	469a      	mov	sl, r3
 8006cfa:	fa5f f38a 	uxtb.w	r3, sl
  i = (int32_T)(((((uint32_T)(SIM0_DW.Memory1_PreviousInput != 0.0) << 1) +
 8006cfe:	4433      	add	r3, r6
                  (SIM0_DW.Memory2_PreviousInput != 0.0)) << 1) +
 8006d00:	005a      	lsls	r2, r3, #1
                SIM0_DW.Memory_PreviousInput_m);
 8006d02:	4b4b      	ldr	r3, [pc, #300]	; (8006e30 <SIM0_step+0x6e8>)
 8006d04:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 8006d08:	3318      	adds	r3, #24
 8006d0a:	781b      	ldrb	r3, [r3, #0]
                  (SIM0_DW.Memory2_PreviousInput != 0.0)) << 1) +
 8006d0c:	4413      	add	r3, r2
  i = (int32_T)(((((uint32_T)(SIM0_DW.Memory1_PreviousInput != 0.0) << 1) +
 8006d0e:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 8006d12:	f102 020c 	add.w	r2, r2, #12
 8006d16:	6013      	str	r3, [r2, #0]
  rtb_Logic_idx_0 = SIM0_P.Logic_table[(uint32_T)i];
 8006d18:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8006d1c:	f103 030c 	add.w	r3, r3, #12
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4a42      	ldr	r2, [pc, #264]	; (8006e2c <SIM0_step+0x6e4>)
 8006d24:	4413      	add	r3, r2
 8006d26:	f503 5385 	add.w	r3, r3, #4256	; 0x10a0
 8006d2a:	3318      	adds	r3, #24
 8006d2c:	781b      	ldrb	r3, [r3, #0]
 8006d2e:	f507 529e 	add.w	r2, r7, #5056	; 0x13c0
 8006d32:	f102 0217 	add.w	r2, r2, #23
 8006d36:	7013      	strb	r3, [r2, #0]
  rtb_Logic_idx_1 = SIM0_P.Logic_table[i + 8U];
 8006d38:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8006d3c:	f103 030c 	add.w	r3, r3, #12
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	3308      	adds	r3, #8
 8006d44:	4a39      	ldr	r2, [pc, #228]	; (8006e2c <SIM0_step+0x6e4>)
 8006d46:	4413      	add	r3, r2
 8006d48:	f503 5385 	add.w	r3, r3, #4256	; 0x10a0
 8006d4c:	3318      	adds	r3, #24
 8006d4e:	781b      	ldrb	r3, [r3, #0]
 8006d50:	f507 529e 	add.w	r2, r7, #5056	; 0x13c0
 8006d54:	f102 0216 	add.w	r2, r2, #22
 8006d58:	7013      	strb	r3, [r2, #0]
  SIM0_Y.AMS_error_latched = rtb_Logic_idx_0;
 8006d5a:	4a36      	ldr	r2, [pc, #216]	; (8006e34 <SIM0_step+0x6ec>)
 8006d5c:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8006d60:	f103 0317 	add.w	r3, r3, #23
 8006d64:	781b      	ldrb	r3, [r3, #0]
 8006d66:	7013      	strb	r3, [r2, #0]
  i = (int32_T)(((((uint32_T)(SIM0_DW.Memory3_PreviousInput != 0.0) << 1) +
 8006d68:	4b31      	ldr	r3, [pc, #196]	; (8006e30 <SIM0_step+0x6e8>)
 8006d6a:	f503 53bf 	add.w	r3, r3, #6112	; 0x17e0
 8006d6e:	3310      	adds	r3, #16
 8006d70:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006d74:	f04f 0200 	mov.w	r2, #0
 8006d78:	f04f 0300 	mov.w	r3, #0
 8006d7c:	f7f9 fe96 	bl	8000aac <__aeabi_dcmpeq>
 8006d80:	4603      	mov	r3, r0
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d101      	bne.n	8006d8a <SIM0_step+0x642>
 8006d86:	2602      	movs	r6, #2
 8006d88:	e000      	b.n	8006d8c <SIM0_step+0x644>
 8006d8a:	2600      	movs	r6, #0
                  (SIM0_DW.Memory4_PreviousInput != 0.0)) << 1) +
 8006d8c:	4b28      	ldr	r3, [pc, #160]	; (8006e30 <SIM0_step+0x6e8>)
 8006d8e:	f503 53bf 	add.w	r3, r3, #6112	; 0x17e0
 8006d92:	3318      	adds	r3, #24
 8006d94:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006d98:	2301      	movs	r3, #1
 8006d9a:	469a      	mov	sl, r3
 8006d9c:	f04f 0200 	mov.w	r2, #0
 8006da0:	f04f 0300 	mov.w	r3, #0
 8006da4:	f7f9 fe82 	bl	8000aac <__aeabi_dcmpeq>
 8006da8:	4603      	mov	r3, r0
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d001      	beq.n	8006db2 <SIM0_step+0x66a>
 8006dae:	2300      	movs	r3, #0
 8006db0:	469a      	mov	sl, r3
 8006db2:	fa5f f38a 	uxtb.w	r3, sl
  i = (int32_T)(((((uint32_T)(SIM0_DW.Memory3_PreviousInput != 0.0) << 1) +
 8006db6:	4433      	add	r3, r6
                  (SIM0_DW.Memory4_PreviousInput != 0.0)) << 1) +
 8006db8:	005a      	lsls	r2, r3, #1
                SIM0_DW.Memory_PreviousInput_c);
 8006dba:	4b1d      	ldr	r3, [pc, #116]	; (8006e30 <SIM0_step+0x6e8>)
 8006dbc:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 8006dc0:	3319      	adds	r3, #25
 8006dc2:	781b      	ldrb	r3, [r3, #0]
                  (SIM0_DW.Memory4_PreviousInput != 0.0)) << 1) +
 8006dc4:	4413      	add	r3, r2
  i = (int32_T)(((((uint32_T)(SIM0_DW.Memory3_PreviousInput != 0.0) << 1) +
 8006dc6:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 8006dca:	f102 020c 	add.w	r2, r2, #12
 8006dce:	6013      	str	r3, [r2, #0]
  rtb_Logic_p_idx_0 = SIM0_P.Logic_table_p[(uint32_T)i];
 8006dd0:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8006dd4:	f103 030c 	add.w	r3, r3, #12
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4a14      	ldr	r2, [pc, #80]	; (8006e2c <SIM0_step+0x6e4>)
 8006ddc:	4413      	add	r3, r2
 8006dde:	f503 5386 	add.w	r3, r3, #4288	; 0x10c0
 8006de2:	3308      	adds	r3, #8
 8006de4:	781b      	ldrb	r3, [r3, #0]
 8006de6:	f507 529e 	add.w	r2, r7, #5056	; 0x13c0
 8006dea:	f102 0215 	add.w	r2, r2, #21
 8006dee:	7013      	strb	r3, [r2, #0]
  SIM0_Y.IMD_error_latched = rtb_Logic_p_idx_0;
 8006df0:	4a10      	ldr	r2, [pc, #64]	; (8006e34 <SIM0_step+0x6ec>)
 8006df2:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8006df6:	f103 0315 	add.w	r3, r3, #21
 8006dfa:	781b      	ldrb	r3, [r3, #0]
 8006dfc:	7053      	strb	r3, [r2, #1]
  rtb_Memory22 = (rtb_Logic_idx_1 ? (real_T)SIM0_P.Logic_table_p[i + 8U] : 0.0) *
 8006dfe:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8006e02:	f103 0316 	add.w	r3, r3, #22
 8006e06:	781b      	ldrb	r3, [r3, #0]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d015      	beq.n	8006e38 <SIM0_step+0x6f0>
 8006e0c:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8006e10:	f103 030c 	add.w	r3, r3, #12
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	3308      	adds	r3, #8
 8006e18:	4a04      	ldr	r2, [pc, #16]	; (8006e2c <SIM0_step+0x6e4>)
 8006e1a:	4413      	add	r3, r2
 8006e1c:	f503 5386 	add.w	r3, r3, #4288	; 0x10c0
 8006e20:	3308      	adds	r3, #8
 8006e22:	781b      	ldrb	r3, [r3, #0]
 8006e24:	4618      	mov	r0, r3
 8006e26:	f7f9 fb5f 	bl	80004e8 <__aeabi_ui2d>
 8006e2a:	e009      	b.n	8006e40 <SIM0_step+0x6f8>
 8006e2c:	200002e0 	.word	0x200002e0
 8006e30:	2001be50 	.word	0x2001be50
 8006e34:	2001d6b0 	.word	0x2001d6b0
 8006e38:	f04f 0000 	mov.w	r0, #0
 8006e3c:	f04f 0100 	mov.w	r1, #0
    SIM0_DW.Memory5_PreviousInput;
 8006e40:	4bba      	ldr	r3, [pc, #744]	; (800712c <SIM0_step+0x9e4>)
 8006e42:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 8006e46:	e9d3 2300 	ldrd	r2, r3, [r3]
  rtb_Memory22 = (rtb_Logic_idx_1 ? (real_T)SIM0_P.Logic_table_p[i + 8U] : 0.0) *
 8006e4a:	f7f9 fbc7 	bl	80005dc <__aeabi_dmul>
 8006e4e:	4602      	mov	r2, r0
 8006e50:	460b      	mov	r3, r1
 8006e52:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 8006e56:	f101 0108 	add.w	r1, r1, #8
 8006e5a:	e9c1 2300 	strd	r2, r3, [r1]
  SIM0_Y.SC_probe = rtb_Memory22;
 8006e5e:	49b4      	ldr	r1, [pc, #720]	; (8007130 <SIM0_step+0x9e8>)
 8006e60:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8006e64:	f103 0308 	add.w	r3, r3, #8
 8006e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e6c:	e9c1 2302 	strd	r2, r3, [r1, #8]
  rtb_Exp = rtb_Memory22 * SIM0_DW.Delay1_DSTATE;
 8006e70:	4bae      	ldr	r3, [pc, #696]	; (800712c <SIM0_step+0x9e4>)
 8006e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e76:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 8006e7a:	f101 0108 	add.w	r1, r1, #8
 8006e7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e82:	f7f9 fbab 	bl	80005dc <__aeabi_dmul>
 8006e86:	4602      	mov	r2, r0
 8006e88:	460b      	mov	r3, r1
 8006e8a:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 8006e8e:	f101 0108 	add.w	r1, r1, #8
 8006e92:	e9c1 2300 	strd	r2, r3, [r1]
  SIM0_Y.precharge_closed = rtb_Exp;
 8006e96:	49a6      	ldr	r1, [pc, #664]	; (8007130 <SIM0_step+0x9e8>)
 8006e98:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 8006e9c:	f103 0308 	add.w	r3, r3, #8
 8006ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ea4:	e9c1 2308 	strd	r2, r3, [r1, #32]
  rtb_Product1_n = rtb_Memory22 * SIM0_DW.Delay2_DSTATE[0];
 8006ea8:	4ba0      	ldr	r3, [pc, #640]	; (800712c <SIM0_step+0x9e4>)
 8006eaa:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8006eae:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 8006eb2:	f101 0108 	add.w	r1, r1, #8
 8006eb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006eba:	f7f9 fb8f 	bl	80005dc <__aeabi_dmul>
 8006ebe:	4602      	mov	r2, r0
 8006ec0:	460b      	mov	r3, r1
 8006ec2:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 8006ec6:	e9c1 2300 	strd	r2, r3, [r1]
  rtb_Memory22 *= SIM0_DW.Delay3_DSTATE[0];
 8006eca:	4b98      	ldr	r3, [pc, #608]	; (800712c <SIM0_step+0x9e4>)
 8006ecc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8006ed0:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 8006ed4:	f101 0108 	add.w	r1, r1, #8
 8006ed8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006edc:	f7f9 fb7e 	bl	80005dc <__aeabi_dmul>
 8006ee0:	4602      	mov	r2, r0
 8006ee2:	460b      	mov	r3, r1
 8006ee4:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 8006ee8:	f101 0108 	add.w	r1, r1, #8
 8006eec:	e9c1 2300 	strd	r2, r3, [r1]
  i = 1;
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 8006ef6:	f102 020c 	add.w	r2, r2, #12
 8006efa:	6013      	str	r3, [r2, #0]
  rtb_is_charge = 0;
 8006efc:	2300      	movs	r3, #0
 8006efe:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 8006f02:	f102 0204 	add.w	r2, r2, #4
 8006f06:	6013      	str	r3, [r2, #0]
  rtb_is_drive = 0.0;
 8006f08:	f04f 0200 	mov.w	r2, #0
 8006f0c:	f04f 0300 	mov.w	r3, #0
 8006f10:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 8006f14:	f101 0118 	add.w	r1, r1, #24
 8006f18:	e9c1 2300 	strd	r2, r3, [r1]
  if (SIM0_DW.Memory6_PreviousInput != 0.0) {
 8006f1c:	4b83      	ldr	r3, [pc, #524]	; (800712c <SIM0_step+0x9e4>)
 8006f1e:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 8006f22:	3308      	adds	r3, #8
 8006f24:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006f28:	f04f 0200 	mov.w	r2, #0
 8006f2c:	f04f 0300 	mov.w	r3, #0
 8006f30:	f7f9 fdbc 	bl	8000aac <__aeabi_dcmpeq>
 8006f34:	4603      	mov	r3, r0
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d10c      	bne.n	8006f54 <SIM0_step+0x80c>
    i = 2;
 8006f3a:	2302      	movs	r3, #2
 8006f3c:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 8006f40:	f102 020c 	add.w	r2, r2, #12
 8006f44:	6013      	str	r3, [r2, #0]
    rtb_is_charge = 1;
 8006f46:	2301      	movs	r3, #1
 8006f48:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 8006f4c:	f102 0204 	add.w	r2, r2, #4
 8006f50:	6013      	str	r3, [r2, #0]
 8006f52:	e01d      	b.n	8006f90 <SIM0_step+0x848>
  } else if (SIM0_DW.Memory7_PreviousInput != 0.0) {
 8006f54:	4b75      	ldr	r3, [pc, #468]	; (800712c <SIM0_step+0x9e4>)
 8006f56:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 8006f5a:	3310      	adds	r3, #16
 8006f5c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006f60:	f04f 0200 	mov.w	r2, #0
 8006f64:	f04f 0300 	mov.w	r3, #0
 8006f68:	f7f9 fda0 	bl	8000aac <__aeabi_dcmpeq>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d10e      	bne.n	8006f90 <SIM0_step+0x848>
    i = 3;
 8006f72:	2303      	movs	r3, #3
 8006f74:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 8006f78:	f102 020c 	add.w	r2, r2, #12
 8006f7c:	6013      	str	r3, [r2, #0]
    rtb_is_drive = 1.0;
 8006f7e:	f04f 0200 	mov.w	r2, #0
 8006f82:	4b6c      	ldr	r3, [pc, #432]	; (8007134 <SIM0_step+0x9ec>)
 8006f84:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 8006f88:	f101 0118 	add.w	r1, r1, #24
 8006f8c:	e9c1 2300 	strd	r2, r3, [r1]
  }

  rtb_Product9 = rtb_Memory22 * rtb_Product1_n;
 8006f90:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8006f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f98:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 8006f9c:	f101 0108 	add.w	r1, r1, #8
 8006fa0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006fa4:	f7f9 fb1a 	bl	80005dc <__aeabi_dmul>
 8006fa8:	4602      	mov	r2, r0
 8006faa:	460b      	mov	r3, r1
 8006fac:	f507 519d 	add.w	r1, r7, #5024	; 0x13a0
 8006fb0:	f101 0118 	add.w	r1, r1, #24
 8006fb4:	e9c1 2300 	strd	r2, r3, [r1]
  rtb_is_drive = rtb_is_drive * SIM0_DW.Memory22_PreviousInput * rtb_Product9;
 8006fb8:	4b5c      	ldr	r3, [pc, #368]	; (800712c <SIM0_step+0x9e4>)
 8006fba:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 8006fbe:	3318      	adds	r3, #24
 8006fc0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006fc4:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8006fc8:	f103 0318 	add.w	r3, r3, #24
 8006fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fd0:	f7f9 fb04 	bl	80005dc <__aeabi_dmul>
 8006fd4:	4602      	mov	r2, r0
 8006fd6:	460b      	mov	r3, r1
 8006fd8:	f507 519d 	add.w	r1, r7, #5024	; 0x13a0
 8006fdc:	f101 0118 	add.w	r1, r1, #24
 8006fe0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006fe4:	f7f9 fafa 	bl	80005dc <__aeabi_dmul>
 8006fe8:	4602      	mov	r2, r0
 8006fea:	460b      	mov	r3, r1
 8006fec:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 8006ff0:	f101 0118 	add.w	r1, r1, #24
 8006ff4:	e9c1 2300 	strd	r2, r3, [r1]
  rtb_y = rtb_Memory15[0];
 8006ff8:	f607 73c8 	addw	r3, r7, #4040	; 0xfc8
 8006ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007000:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 8007004:	f101 0110 	add.w	r1, r1, #16
 8007008:	e9c1 2300 	strd	r2, r3, [r1]
  for (iU = 0; iU < 125; iU++) {
 800700c:	2300      	movs	r3, #0
 800700e:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 8007012:	f102 0208 	add.w	r2, r2, #8
 8007016:	6013      	str	r3, [r2, #0]
 8007018:	e026      	b.n	8007068 <SIM0_step+0x920>
    rtb_y += rtb_Memory15[iU + 1];
 800701a:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 800701e:	f103 0308 	add.w	r3, r3, #8
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	3301      	adds	r3, #1
 8007026:	f607 72c8 	addw	r2, r7, #4040	; 0xfc8
 800702a:	00db      	lsls	r3, r3, #3
 800702c:	4413      	add	r3, r2
 800702e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007032:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 8007036:	f101 0110 	add.w	r1, r1, #16
 800703a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800703e:	f7f9 f917 	bl	8000270 <__adddf3>
 8007042:	4602      	mov	r2, r0
 8007044:	460b      	mov	r3, r1
 8007046:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 800704a:	f101 0110 	add.w	r1, r1, #16
 800704e:	e9c1 2300 	strd	r2, r3, [r1]
  for (iU = 0; iU < 125; iU++) {
 8007052:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8007056:	f103 0308 	add.w	r3, r3, #8
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	3301      	adds	r3, #1
 800705e:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 8007062:	f102 0208 	add.w	r2, r2, #8
 8007066:	6013      	str	r3, [r2, #0]
 8007068:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 800706c:	f103 0308 	add.w	r3, r3, #8
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	2b7c      	cmp	r3, #124	; 0x7c
 8007074:	ddd1      	ble.n	800701a <SIM0_step+0x8d2>
  }

  if (SIM0_DW.Memory16_PreviousInput != 0.0) {
 8007076:	4b2d      	ldr	r3, [pc, #180]	; (800712c <SIM0_step+0x9e4>)
 8007078:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 800707c:	3308      	adds	r3, #8
 800707e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007082:	f04f 0200 	mov.w	r2, #0
 8007086:	f04f 0300 	mov.w	r3, #0
 800708a:	f7f9 fd0f 	bl	8000aac <__aeabi_dcmpeq>
 800708e:	4603      	mov	r3, r0
 8007090:	2b00      	cmp	r3, #0
 8007092:	d151      	bne.n	8007138 <SIM0_step+0x9f0>
    rtb_Current = SIM0_DW.Memory17_PreviousInput - rtb_y;
 8007094:	4b25      	ldr	r3, [pc, #148]	; (800712c <SIM0_step+0x9e4>)
 8007096:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 800709a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800709e:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 80070a2:	f103 0310 	add.w	r3, r3, #16
 80070a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070aa:	f7f9 f8df 	bl	800026c <__aeabi_dsub>
 80070ae:	4602      	mov	r2, r0
 80070b0:	460b      	mov	r3, r1
 80070b2:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 80070b6:	f101 0110 	add.w	r1, r1, #16
 80070ba:	e9c1 2300 	strd	r2, r3, [r1]
    if (rtb_Current < 0.0) {
 80070be:	f04f 0200 	mov.w	r2, #0
 80070c2:	f04f 0300 	mov.w	r3, #0
 80070c6:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 80070ca:	f101 0110 	add.w	r1, r1, #16
 80070ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80070d2:	f7f9 fcf5 	bl	8000ac0 <__aeabi_dcmplt>
 80070d6:	4603      	mov	r3, r0
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d009      	beq.n	80070f0 <SIM0_step+0x9a8>
      rtb_Current = 0.0;
 80070dc:	f04f 0200 	mov.w	r2, #0
 80070e0:	f04f 0300 	mov.w	r3, #0
 80070e4:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 80070e8:	f101 0110 	add.w	r1, r1, #16
 80070ec:	e9c1 2300 	strd	r2, r3, [r1]
    }

    if (SIM0_DW.Memory18_PreviousInput < rtb_Current) {
 80070f0:	4b0e      	ldr	r3, [pc, #56]	; (800712c <SIM0_step+0x9e4>)
 80070f2:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 80070f6:	3310      	adds	r3, #16
 80070f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070fc:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 8007100:	f101 0110 	add.w	r1, r1, #16
 8007104:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007108:	f7f9 fcf8 	bl	8000afc <__aeabi_dcmpgt>
 800710c:	4603      	mov	r3, r0
 800710e:	2b00      	cmp	r3, #0
 8007110:	d01c      	beq.n	800714c <SIM0_step+0xa04>
      rtb_Current = SIM0_DW.Memory18_PreviousInput;
 8007112:	4b06      	ldr	r3, [pc, #24]	; (800712c <SIM0_step+0x9e4>)
 8007114:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 8007118:	3310      	adds	r3, #16
 800711a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800711e:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 8007122:	f101 0110 	add.w	r1, r1, #16
 8007126:	e9c1 2300 	strd	r2, r3, [r1]
 800712a:	e00f      	b.n	800714c <SIM0_step+0xa04>
 800712c:	2001be50 	.word	0x2001be50
 8007130:	2001d6b0 	.word	0x2001d6b0
 8007134:	3ff00000 	.word	0x3ff00000
    }
  } else {
    rtb_Current = 0.0;
 8007138:	f04f 0200 	mov.w	r2, #0
 800713c:	f04f 0300 	mov.w	r3, #0
 8007140:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 8007144:	f101 0110 	add.w	r1, r1, #16
 8007148:	e9c1 2300 	strd	r2, r3, [r1]
  }

  rtb_current = 0.0;
 800714c:	f04f 0200 	mov.w	r2, #0
 8007150:	f04f 0300 	mov.w	r3, #0
 8007154:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 8007158:	e9c1 2300 	strd	r2, r3, [r1]
  if (i == 1) {
 800715c:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8007160:	f103 030c 	add.w	r3, r3, #12
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	2b01      	cmp	r3, #1
 8007168:	d109      	bne.n	800717e <SIM0_step+0xa36>
    rtb_Exp = -1.0;
 800716a:	f04f 0200 	mov.w	r2, #0
 800716e:	4bc0      	ldr	r3, [pc, #768]	; (8007470 <SIM0_step+0xd28>)
 8007170:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 8007174:	f101 0108 	add.w	r1, r1, #8
 8007178:	e9c1 2300 	strd	r2, r3, [r1]
 800717c:	e1d3      	b.n	8007526 <SIM0_step+0xdde>
  } else if (i == 2) {
 800717e:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8007182:	f103 030c 	add.w	r3, r3, #12
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	2b02      	cmp	r3, #2
 800718a:	f040 8099 	bne.w	80072c0 <SIM0_step+0xb78>
    if (rtb_Memory22 != 0.0) {
 800718e:	f04f 0200 	mov.w	r2, #0
 8007192:	f04f 0300 	mov.w	r3, #0
 8007196:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 800719a:	f101 0108 	add.w	r1, r1, #8
 800719e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80071a2:	f7f9 fc83 	bl	8000aac <__aeabi_dcmpeq>
 80071a6:	4603      	mov	r3, r0
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d17f      	bne.n	80072ac <SIM0_step+0xb64>
      if ((rtb_Product1_n != 0.0) || (rtb_Exp != 0.0)) {
 80071ac:	f04f 0200 	mov.w	r2, #0
 80071b0:	f04f 0300 	mov.w	r3, #0
 80071b4:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 80071b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80071bc:	f7f9 fc76 	bl	8000aac <__aeabi_dcmpeq>
 80071c0:	4603      	mov	r3, r0
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d00e      	beq.n	80071e4 <SIM0_step+0xa9c>
 80071c6:	f04f 0200 	mov.w	r2, #0
 80071ca:	f04f 0300 	mov.w	r3, #0
 80071ce:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 80071d2:	f101 0108 	add.w	r1, r1, #8
 80071d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80071da:	f7f9 fc67 	bl	8000aac <__aeabi_dcmpeq>
 80071de:	4603      	mov	r3, r0
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d141      	bne.n	8007268 <SIM0_step+0xb20>
        rtb_Exp = (rtb_y - SIM0_DW.Memory_PreviousInput_a) +
 80071e4:	4ba3      	ldr	r3, [pc, #652]	; (8007474 <SIM0_step+0xd2c>)
 80071e6:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 80071ea:	3318      	adds	r3, #24
 80071ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071f0:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 80071f4:	f101 0110 	add.w	r1, r1, #16
 80071f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80071fc:	f7f9 f836 	bl	800026c <__aeabi_dsub>
 8007200:	4602      	mov	r2, r0
 8007202:	460b      	mov	r3, r1
 8007204:	4610      	mov	r0, r2
 8007206:	4619      	mov	r1, r3
          SIM0_DW.Memory_PreviousInput_a;
 8007208:	4b9a      	ldr	r3, [pc, #616]	; (8007474 <SIM0_step+0xd2c>)
 800720a:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 800720e:	3318      	adds	r3, #24
 8007210:	e9d3 2300 	ldrd	r2, r3, [r3]
        rtb_Exp = (rtb_y - SIM0_DW.Memory_PreviousInput_a) +
 8007214:	f7f9 f82c 	bl	8000270 <__adddf3>
 8007218:	4602      	mov	r2, r0
 800721a:	460b      	mov	r3, r1
 800721c:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 8007220:	f101 0108 	add.w	r1, r1, #8
 8007224:	e9c1 2300 	strd	r2, r3, [r1]
        rtb_current = (real_T)rtb_is_charge * rtb_Current * rtb_Product9;
 8007228:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 800722c:	f103 0304 	add.w	r3, r3, #4
 8007230:	6818      	ldr	r0, [r3, #0]
 8007232:	f7f9 f969 	bl	8000508 <__aeabi_i2d>
 8007236:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 800723a:	f103 0310 	add.w	r3, r3, #16
 800723e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007242:	f7f9 f9cb 	bl	80005dc <__aeabi_dmul>
 8007246:	4602      	mov	r2, r0
 8007248:	460b      	mov	r3, r1
 800724a:	f507 519d 	add.w	r1, r7, #5024	; 0x13a0
 800724e:	f101 0118 	add.w	r1, r1, #24
 8007252:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007256:	f7f9 f9c1 	bl	80005dc <__aeabi_dmul>
 800725a:	4602      	mov	r2, r0
 800725c:	460b      	mov	r3, r1
 800725e:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 8007262:	e9c1 2300 	strd	r2, r3, [r1]
 8007266:	e15e      	b.n	8007526 <SIM0_step+0xdde>
      } else {
        rtb_Exp = (SIM0_DW.Memory17_PreviousInput -
 8007268:	4b82      	ldr	r3, [pc, #520]	; (8007474 <SIM0_step+0xd2c>)
 800726a:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 800726e:	e9d3 0100 	ldrd	r0, r1, [r3]
                   SIM0_DW.Memory_PreviousInput_a) +
 8007272:	4b80      	ldr	r3, [pc, #512]	; (8007474 <SIM0_step+0xd2c>)
 8007274:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 8007278:	3318      	adds	r3, #24
 800727a:	e9d3 2300 	ldrd	r2, r3, [r3]
        rtb_Exp = (SIM0_DW.Memory17_PreviousInput -
 800727e:	f7f8 fff5 	bl	800026c <__aeabi_dsub>
 8007282:	4602      	mov	r2, r0
 8007284:	460b      	mov	r3, r1
 8007286:	4610      	mov	r0, r2
 8007288:	4619      	mov	r1, r3
          SIM0_DW.Memory_PreviousInput_a;
 800728a:	4b7a      	ldr	r3, [pc, #488]	; (8007474 <SIM0_step+0xd2c>)
 800728c:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 8007290:	3318      	adds	r3, #24
 8007292:	e9d3 2300 	ldrd	r2, r3, [r3]
        rtb_Exp = (SIM0_DW.Memory17_PreviousInput -
 8007296:	f7f8 ffeb 	bl	8000270 <__adddf3>
 800729a:	4602      	mov	r2, r0
 800729c:	460b      	mov	r3, r1
 800729e:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 80072a2:	f101 0108 	add.w	r1, r1, #8
 80072a6:	e9c1 2300 	strd	r2, r3, [r1]
 80072aa:	e13c      	b.n	8007526 <SIM0_step+0xdde>
      }
    } else {
      rtb_Exp = -1.0;
 80072ac:	f04f 0200 	mov.w	r2, #0
 80072b0:	4b6f      	ldr	r3, [pc, #444]	; (8007470 <SIM0_step+0xd28>)
 80072b2:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 80072b6:	f101 0108 	add.w	r1, r1, #8
 80072ba:	e9c1 2300 	strd	r2, r3, [r1]
 80072be:	e132      	b.n	8007526 <SIM0_step+0xdde>
    }
  } else if (rtb_Memory22 != 0.0) {
 80072c0:	f04f 0200 	mov.w	r2, #0
 80072c4:	f04f 0300 	mov.w	r3, #0
 80072c8:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 80072cc:	f101 0108 	add.w	r1, r1, #8
 80072d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80072d4:	f7f9 fbea 	bl	8000aac <__aeabi_dcmpeq>
 80072d8:	4603      	mov	r3, r0
 80072da:	2b00      	cmp	r3, #0
 80072dc:	f040 811a 	bne.w	8007514 <SIM0_step+0xdcc>
    if (rtb_Product1_n != 0.0) {
 80072e0:	f04f 0200 	mov.w	r2, #0
 80072e4:	f04f 0300 	mov.w	r3, #0
 80072e8:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 80072ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80072f0:	f7f9 fbdc 	bl	8000aac <__aeabi_dcmpeq>
 80072f4:	4603      	mov	r3, r0
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d152      	bne.n	80073a0 <SIM0_step+0xc58>
      rtb_Exp = (rtb_y - SIM0_DW.Memory_PreviousInput_a) * 0.8 +
 80072fa:	4b5e      	ldr	r3, [pc, #376]	; (8007474 <SIM0_step+0xd2c>)
 80072fc:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 8007300:	3318      	adds	r3, #24
 8007302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007306:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 800730a:	f101 0110 	add.w	r1, r1, #16
 800730e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007312:	f7f8 ffab 	bl	800026c <__aeabi_dsub>
 8007316:	4602      	mov	r2, r0
 8007318:	460b      	mov	r3, r1
 800731a:	4610      	mov	r0, r2
 800731c:	4619      	mov	r1, r3
 800731e:	a352      	add	r3, pc, #328	; (adr r3, 8007468 <SIM0_step+0xd20>)
 8007320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007324:	f7f9 f95a 	bl	80005dc <__aeabi_dmul>
 8007328:	4602      	mov	r2, r0
 800732a:	460b      	mov	r3, r1
 800732c:	4610      	mov	r0, r2
 800732e:	4619      	mov	r1, r3
        SIM0_DW.Memory_PreviousInput_a;
 8007330:	4b50      	ldr	r3, [pc, #320]	; (8007474 <SIM0_step+0xd2c>)
 8007332:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 8007336:	3318      	adds	r3, #24
 8007338:	e9d3 2300 	ldrd	r2, r3, [r3]
      rtb_Exp = (rtb_y - SIM0_DW.Memory_PreviousInput_a) * 0.8 +
 800733c:	f7f8 ff98 	bl	8000270 <__adddf3>
 8007340:	4602      	mov	r2, r0
 8007342:	460b      	mov	r3, r1
 8007344:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 8007348:	f101 0108 	add.w	r1, r1, #8
 800734c:	e9c1 2300 	strd	r2, r3, [r1]
      rtb_current = rtb_is_drive - (rtb_y - rtb_Exp) / 0.5;
 8007350:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 8007354:	f103 0308 	add.w	r3, r3, #8
 8007358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800735c:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 8007360:	f101 0110 	add.w	r1, r1, #16
 8007364:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007368:	f7f8 ff80 	bl	800026c <__aeabi_dsub>
 800736c:	4602      	mov	r2, r0
 800736e:	460b      	mov	r3, r1
 8007370:	4610      	mov	r0, r2
 8007372:	4619      	mov	r1, r3
 8007374:	f04f 0200 	mov.w	r2, #0
 8007378:	4b3f      	ldr	r3, [pc, #252]	; (8007478 <SIM0_step+0xd30>)
 800737a:	f7f9 fa59 	bl	8000830 <__aeabi_ddiv>
 800737e:	4602      	mov	r2, r0
 8007380:	460b      	mov	r3, r1
 8007382:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 8007386:	f101 0118 	add.w	r1, r1, #24
 800738a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800738e:	f7f8 ff6d 	bl	800026c <__aeabi_dsub>
 8007392:	4602      	mov	r2, r0
 8007394:	460b      	mov	r3, r1
 8007396:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 800739a:	e9c1 2300 	strd	r2, r3, [r1]
 800739e:	e0c2      	b.n	8007526 <SIM0_step+0xdde>
    } else if (rtb_Exp != 0.0) {
 80073a0:	f04f 0200 	mov.w	r2, #0
 80073a4:	f04f 0300 	mov.w	r3, #0
 80073a8:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 80073ac:	f101 0108 	add.w	r1, r1, #8
 80073b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80073b4:	f7f9 fb7a 	bl	8000aac <__aeabi_dcmpeq>
 80073b8:	4603      	mov	r3, r0
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d162      	bne.n	8007484 <SIM0_step+0xd3c>
      rtb_Exp = (rtb_y - SIM0_DW.Memory_PreviousInput_a) / 50.0 +
 80073be:	4b2d      	ldr	r3, [pc, #180]	; (8007474 <SIM0_step+0xd2c>)
 80073c0:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 80073c4:	3318      	adds	r3, #24
 80073c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ca:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 80073ce:	f101 0110 	add.w	r1, r1, #16
 80073d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80073d6:	f7f8 ff49 	bl	800026c <__aeabi_dsub>
 80073da:	4602      	mov	r2, r0
 80073dc:	460b      	mov	r3, r1
 80073de:	4610      	mov	r0, r2
 80073e0:	4619      	mov	r1, r3
 80073e2:	f04f 0200 	mov.w	r2, #0
 80073e6:	4b25      	ldr	r3, [pc, #148]	; (800747c <SIM0_step+0xd34>)
 80073e8:	f7f9 fa22 	bl	8000830 <__aeabi_ddiv>
 80073ec:	4602      	mov	r2, r0
 80073ee:	460b      	mov	r3, r1
 80073f0:	4610      	mov	r0, r2
 80073f2:	4619      	mov	r1, r3
        SIM0_DW.Memory_PreviousInput_a;
 80073f4:	4b1f      	ldr	r3, [pc, #124]	; (8007474 <SIM0_step+0xd2c>)
 80073f6:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 80073fa:	3318      	adds	r3, #24
 80073fc:	e9d3 2300 	ldrd	r2, r3, [r3]
      rtb_Exp = (rtb_y - SIM0_DW.Memory_PreviousInput_a) / 50.0 +
 8007400:	f7f8 ff36 	bl	8000270 <__adddf3>
 8007404:	4602      	mov	r2, r0
 8007406:	460b      	mov	r3, r1
 8007408:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 800740c:	f101 0108 	add.w	r1, r1, #8
 8007410:	e9c1 2300 	strd	r2, r3, [r1]
      rtb_current = rtb_is_drive - (rtb_y - rtb_Exp) / 100.0;
 8007414:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 8007418:	f103 0308 	add.w	r3, r3, #8
 800741c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007420:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 8007424:	f101 0110 	add.w	r1, r1, #16
 8007428:	e9d1 0100 	ldrd	r0, r1, [r1]
 800742c:	f7f8 ff1e 	bl	800026c <__aeabi_dsub>
 8007430:	4602      	mov	r2, r0
 8007432:	460b      	mov	r3, r1
 8007434:	4610      	mov	r0, r2
 8007436:	4619      	mov	r1, r3
 8007438:	f04f 0200 	mov.w	r2, #0
 800743c:	4b10      	ldr	r3, [pc, #64]	; (8007480 <SIM0_step+0xd38>)
 800743e:	f7f9 f9f7 	bl	8000830 <__aeabi_ddiv>
 8007442:	4602      	mov	r2, r0
 8007444:	460b      	mov	r3, r1
 8007446:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 800744a:	f101 0118 	add.w	r1, r1, #24
 800744e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007452:	f7f8 ff0b 	bl	800026c <__aeabi_dsub>
 8007456:	4602      	mov	r2, r0
 8007458:	460b      	mov	r3, r1
 800745a:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 800745e:	e9c1 2300 	strd	r2, r3, [r1]
 8007462:	e060      	b.n	8007526 <SIM0_step+0xdde>
 8007464:	f3af 8000 	nop.w
 8007468:	9999999a 	.word	0x9999999a
 800746c:	3fe99999 	.word	0x3fe99999
 8007470:	bff00000 	.word	0xbff00000
 8007474:	2001be50 	.word	0x2001be50
 8007478:	3fe00000 	.word	0x3fe00000
 800747c:	40490000 	.word	0x40490000
 8007480:	40590000 	.word	0x40590000
    } else {
      rtb_Exp = (0.0 - SIM0_DW.Memory_PreviousInput_a) / 5.0 +
 8007484:	4bad      	ldr	r3, [pc, #692]	; (800773c <SIM0_step+0xff4>)
 8007486:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 800748a:	3318      	adds	r3, #24
 800748c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007490:	f04f 0000 	mov.w	r0, #0
 8007494:	f04f 0100 	mov.w	r1, #0
 8007498:	f7f8 fee8 	bl	800026c <__aeabi_dsub>
 800749c:	4602      	mov	r2, r0
 800749e:	460b      	mov	r3, r1
 80074a0:	4610      	mov	r0, r2
 80074a2:	4619      	mov	r1, r3
 80074a4:	f04f 0200 	mov.w	r2, #0
 80074a8:	4ba5      	ldr	r3, [pc, #660]	; (8007740 <SIM0_step+0xff8>)
 80074aa:	f7f9 f9c1 	bl	8000830 <__aeabi_ddiv>
 80074ae:	4602      	mov	r2, r0
 80074b0:	460b      	mov	r3, r1
 80074b2:	4610      	mov	r0, r2
 80074b4:	4619      	mov	r1, r3
        SIM0_DW.Memory_PreviousInput_a;
 80074b6:	4ba1      	ldr	r3, [pc, #644]	; (800773c <SIM0_step+0xff4>)
 80074b8:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 80074bc:	3318      	adds	r3, #24
 80074be:	e9d3 2300 	ldrd	r2, r3, [r3]
      rtb_Exp = (0.0 - SIM0_DW.Memory_PreviousInput_a) / 5.0 +
 80074c2:	f7f8 fed5 	bl	8000270 <__adddf3>
 80074c6:	4602      	mov	r2, r0
 80074c8:	460b      	mov	r3, r1
 80074ca:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 80074ce:	f101 0108 	add.w	r1, r1, #8
 80074d2:	e9c1 2300 	strd	r2, r3, [r1]
      rtb_current = -(0.0 - rtb_Exp) / 10.0;
 80074d6:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 80074da:	f103 0308 	add.w	r3, r3, #8
 80074de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074e2:	f04f 0000 	mov.w	r0, #0
 80074e6:	f04f 0100 	mov.w	r1, #0
 80074ea:	f7f8 febf 	bl	800026c <__aeabi_dsub>
 80074ee:	4602      	mov	r2, r0
 80074f0:	460b      	mov	r3, r1
 80074f2:	4690      	mov	r8, r2
 80074f4:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 80074f8:	f04f 0200 	mov.w	r2, #0
 80074fc:	4b91      	ldr	r3, [pc, #580]	; (8007744 <SIM0_step+0xffc>)
 80074fe:	4640      	mov	r0, r8
 8007500:	4649      	mov	r1, r9
 8007502:	f7f9 f995 	bl	8000830 <__aeabi_ddiv>
 8007506:	4602      	mov	r2, r0
 8007508:	460b      	mov	r3, r1
 800750a:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 800750e:	e9c1 2300 	strd	r2, r3, [r1]
 8007512:	e008      	b.n	8007526 <SIM0_step+0xdde>
    }
  } else {
    rtb_Exp = -1.0;
 8007514:	f04f 0200 	mov.w	r2, #0
 8007518:	4b8b      	ldr	r3, [pc, #556]	; (8007748 <SIM0_step+0x1000>)
 800751a:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 800751e:	f101 0108 	add.w	r1, r1, #8
 8007522:	e9c1 2300 	strd	r2, r3, [r1]
  }

  SIM0_Y.vehicle_voltage = rtb_Exp;
 8007526:	4989      	ldr	r1, [pc, #548]	; (800774c <SIM0_step+0x1004>)
 8007528:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 800752c:	f103 0308 	add.w	r3, r3, #8
 8007530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007534:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
  SIM0_Y.current = rtb_current;
 8007538:	4984      	ldr	r1, [pc, #528]	; (800774c <SIM0_step+0x1004>)
 800753a:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 800753e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007542:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
  SIM0_Y.accumulator_voltage = rtb_y;
 8007546:	4981      	ldr	r1, [pc, #516]	; (800774c <SIM0_step+0x1004>)
 8007548:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 800754c:	f103 0310 	add.w	r3, r3, #16
 8007550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007554:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
  SIM0_Y.AIR_minus_closed = rtb_Memory22;
 8007558:	497c      	ldr	r1, [pc, #496]	; (800774c <SIM0_step+0x1004>)
 800755a:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 800755e:	f103 0308 	add.w	r3, r3, #8
 8007562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007566:	e9c1 2304 	strd	r2, r3, [r1, #16]
  SIM0_Y.AIR_plus_closed = rtb_Product1_n;
 800756a:	4978      	ldr	r1, [pc, #480]	; (800774c <SIM0_step+0x1004>)
 800756c:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8007570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007574:	e9c1 2306 	strd	r2, r3, [r1, #24]
  memcpy(&SIM0_Y.cell_temperatures[0], &SIM0_P.cTmp[0], 60U * sizeof(real_T));
 8007578:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800757c:	4974      	ldr	r1, [pc, #464]	; (8007750 <SIM0_step+0x1008>)
 800757e:	4875      	ldr	r0, [pc, #468]	; (8007754 <SIM0_step+0x100c>)
 8007580:	f012 fbfc 	bl	8019d7c <memcpy>
  SIM0_Y.IMD_ok = SIM0_P.IMD_ok;
 8007584:	4b74      	ldr	r3, [pc, #464]	; (8007758 <SIM0_step+0x1010>)
 8007586:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800758a:	4970      	ldr	r1, [pc, #448]	; (800774c <SIM0_step+0x1004>)
 800758c:	f501 615f 	add.w	r1, r1, #3568	; 0xdf0
 8007590:	e9c1 2300 	strd	r2, r3, [r1]
  SIM0_DW.Memory20_PreviousInput = rtb_current;
 8007594:	4b69      	ldr	r3, [pc, #420]	; (800773c <SIM0_step+0xff4>)
 8007596:	f603 0108 	addw	r1, r3, #2056	; 0x808
 800759a:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 800759e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075a2:	e9c1 2300 	strd	r2, r3, [r1]
  SIM0_DW.Memory11_PreviousInput = rtb_Memory20;
 80075a6:	4b65      	ldr	r3, [pc, #404]	; (800773c <SIM0_step+0xff4>)
 80075a8:	f503 6101 	add.w	r1, r3, #2064	; 0x810
 80075ac:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 80075b0:	f103 0318 	add.w	r3, r3, #24
 80075b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075b8:	e9c1 2300 	strd	r2, r3, [r1]
  SIM0_DW.Memory9_PreviousInput = fabs(rtb_Memory20 +
    SIM0_DW.Memory9_PreviousInput);
 80075bc:	4b5f      	ldr	r3, [pc, #380]	; (800773c <SIM0_step+0xff4>)
 80075be:	f603 73f8 	addw	r3, r3, #4088	; 0xff8
 80075c2:	e9d3 0100 	ldrd	r0, r1, [r3]
  SIM0_DW.Memory9_PreviousInput = fabs(rtb_Memory20 +
 80075c6:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 80075ca:	f103 0318 	add.w	r3, r3, #24
 80075ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075d2:	f7f8 fe4d 	bl	8000270 <__adddf3>
 80075d6:	4602      	mov	r2, r0
 80075d8:	460b      	mov	r3, r1
 80075da:	4614      	mov	r4, r2
 80075dc:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80075e0:	4b56      	ldr	r3, [pc, #344]	; (800773c <SIM0_step+0xff4>)
 80075e2:	f603 73f8 	addw	r3, r3, #4088	; 0xff8
 80075e6:	e9c3 4500 	strd	r4, r5, [r3]
  for (i = 0; i < 126; i++) {
 80075ea:	2300      	movs	r3, #0
 80075ec:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 80075f0:	f102 020c 	add.w	r2, r2, #12
 80075f4:	6013      	str	r3, [r2, #0]
 80075f6:	e109      	b.n	800780c <SIM0_step+0x10c4>
    rtb_Memory22 = rtb_Memory21[i];
 80075f8:	f607 32d8 	addw	r2, r7, #3032	; 0xbd8
 80075fc:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8007600:	f103 030c 	add.w	r3, r3, #12
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	00db      	lsls	r3, r3, #3
 8007608:	4413      	add	r3, r2
 800760a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800760e:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 8007612:	f101 0108 	add.w	r1, r1, #8
 8007616:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_Memory20 = rtb_Switch[i];
 800761a:	f107 0318 	add.w	r3, r7, #24
 800761e:	3b10      	subs	r3, #16
 8007620:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 8007624:	f102 020c 	add.w	r2, r2, #12
 8007628:	6812      	ldr	r2, [r2, #0]
 800762a:	00d2      	lsls	r2, r2, #3
 800762c:	4413      	add	r3, r2
 800762e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007632:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 8007636:	f101 0118 	add.w	r1, r1, #24
 800763a:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_is_drive = rtb_Rpz[i];
 800763e:	f507 62fd 	add.w	r2, r7, #2024	; 0x7e8
 8007642:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8007646:	f103 030c 	add.w	r3, r3, #12
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	00db      	lsls	r3, r3, #3
 800764e:	4413      	add	r3, r2
 8007650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007654:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 8007658:	f101 0118 	add.w	r1, r1, #24
 800765c:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_DW.Memory15_PreviousInput[i] = rtb_is_drive;
 8007660:	4a36      	ldr	r2, [pc, #216]	; (800773c <SIM0_step+0xff4>)
 8007662:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8007666:	f103 030c 	add.w	r3, r3, #12
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	3305      	adds	r3, #5
 800766e:	00db      	lsls	r3, r3, #3
 8007670:	18d1      	adds	r1, r2, r3
 8007672:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8007676:	f103 0318 	add.w	r3, r3, #24
 800767a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800767e:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_DW.Memory12_PreviousInput[i] = rtb_Rsz[i];
 8007682:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 8007686:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 800768a:	f103 030c 	add.w	r3, r3, #12
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	00db      	lsls	r3, r3, #3
 8007692:	4413      	add	r3, r2
 8007694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007698:	4828      	ldr	r0, [pc, #160]	; (800773c <SIM0_step+0xff4>)
 800769a:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 800769e:	f101 010c 	add.w	r1, r1, #12
 80076a2:	6809      	ldr	r1, [r1, #0]
 80076a4:	3183      	adds	r1, #131	; 0x83
 80076a6:	00c9      	lsls	r1, r1, #3
 80076a8:	4401      	add	r1, r0
 80076aa:	e9c1 2300 	strd	r2, r3, [r1]
    if (rtb_Memory20 > rtb_Memory22) {
 80076ae:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 80076b2:	f103 0308 	add.w	r3, r3, #8
 80076b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ba:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 80076be:	f101 0118 	add.w	r1, r1, #24
 80076c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80076c6:	f7f9 fa19 	bl	8000afc <__aeabi_dcmpgt>
 80076ca:	4603      	mov	r3, r0
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d012      	beq.n	80076f6 <SIM0_step+0xfae>
      SIM0_DW.Memory_PreviousInput[i] = rtb_Memory22;
 80076d0:	4a1a      	ldr	r2, [pc, #104]	; (800773c <SIM0_step+0xff4>)
 80076d2:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 80076d6:	f103 030c 	add.w	r3, r3, #12
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f203 1303 	addw	r3, r3, #259	; 0x103
 80076e0:	00db      	lsls	r3, r3, #3
 80076e2:	18d1      	adds	r1, r2, r3
 80076e4:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 80076e8:	f103 0308 	add.w	r3, r3, #8
 80076ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076f0:	e9c1 2300 	strd	r2, r3, [r1]
 80076f4:	e044      	b.n	8007780 <SIM0_step+0x1038>
    } else if (rtb_Memory20 < SIM0_P.Constant1_Value) {
 80076f6:	4b18      	ldr	r3, [pc, #96]	; (8007758 <SIM0_step+0x1010>)
 80076f8:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80076fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007700:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 8007704:	f101 0118 	add.w	r1, r1, #24
 8007708:	e9d1 0100 	ldrd	r0, r1, [r1]
 800770c:	f7f9 f9d8 	bl	8000ac0 <__aeabi_dcmplt>
 8007710:	4603      	mov	r3, r0
 8007712:	2b00      	cmp	r3, #0
 8007714:	d022      	beq.n	800775c <SIM0_step+0x1014>
      SIM0_DW.Memory_PreviousInput[i] = SIM0_P.Constant1_Value;
 8007716:	4b10      	ldr	r3, [pc, #64]	; (8007758 <SIM0_step+0x1010>)
 8007718:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800771c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007720:	4806      	ldr	r0, [pc, #24]	; (800773c <SIM0_step+0xff4>)
 8007722:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 8007726:	f101 010c 	add.w	r1, r1, #12
 800772a:	6809      	ldr	r1, [r1, #0]
 800772c:	f201 1103 	addw	r1, r1, #259	; 0x103
 8007730:	00c9      	lsls	r1, r1, #3
 8007732:	4401      	add	r1, r0
 8007734:	e9c1 2300 	strd	r2, r3, [r1]
 8007738:	e022      	b.n	8007780 <SIM0_step+0x1038>
 800773a:	bf00      	nop
 800773c:	2001be50 	.word	0x2001be50
 8007740:	40140000 	.word	0x40140000
 8007744:	40240000 	.word	0x40240000
 8007748:	bff00000 	.word	0xbff00000
 800774c:	2001d6b0 	.word	0x2001d6b0
 8007750:	20000bb8 	.word	0x20000bb8
 8007754:	2001e2c0 	.word	0x2001e2c0
 8007758:	200002e0 	.word	0x200002e0
    } else {
      SIM0_DW.Memory_PreviousInput[i] = rtb_Memory20;
 800775c:	4a94      	ldr	r2, [pc, #592]	; (80079b0 <SIM0_step+0x1268>)
 800775e:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8007762:	f103 030c 	add.w	r3, r3, #12
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f203 1303 	addw	r3, r3, #259	; 0x103
 800776c:	00db      	lsls	r3, r3, #3
 800776e:	18d1      	adds	r1, r2, r3
 8007770:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8007774:	f103 0318 	add.w	r3, r3, #24
 8007778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800777c:	e9c1 2300 	strd	r2, r3, [r1]
    }

    SIM0_DW.Memory10_PreviousInput[i] = rtb_Memory22;
 8007780:	4a8b      	ldr	r2, [pc, #556]	; (80079b0 <SIM0_step+0x1268>)
 8007782:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8007786:	f103 030c 	add.w	r3, r3, #12
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f203 1381 	addw	r3, r3, #385	; 0x181
 8007790:	00db      	lsls	r3, r3, #3
 8007792:	18d1      	adds	r1, r2, r3
 8007794:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8007798:	f103 0308 	add.w	r3, r3, #8
 800779c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077a0:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_DW.Memory19_PreviousInput[i] = SIM0_U.BalanceOut[i];
 80077a4:	4a83      	ldr	r2, [pc, #524]	; (80079b4 <SIM0_step+0x126c>)
 80077a6:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 80077aa:	f103 030c 	add.w	r3, r3, #12
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	330d      	adds	r3, #13
 80077b2:	00db      	lsls	r3, r3, #3
 80077b4:	4413      	add	r3, r2
 80077b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ba:	487d      	ldr	r0, [pc, #500]	; (80079b0 <SIM0_step+0x1268>)
 80077bc:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 80077c0:	f101 010c 	add.w	r1, r1, #12
 80077c4:	6809      	ldr	r1, [r1, #0]
 80077c6:	f501 7100 	add.w	r1, r1, #512	; 0x200
 80077ca:	00c9      	lsls	r1, r1, #3
 80077cc:	4401      	add	r1, r0
 80077ce:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_DW.Memory21_PreviousInput[i] = rtb_is_drive;
 80077d2:	4a77      	ldr	r2, [pc, #476]	; (80079b0 <SIM0_step+0x1268>)
 80077d4:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 80077d8:	f103 030c 	add.w	r3, r3, #12
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80077e2:	00db      	lsls	r3, r3, #3
 80077e4:	18d1      	adds	r1, r2, r3
 80077e6:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 80077ea:	f103 0318 	add.w	r3, r3, #24
 80077ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077f2:	e9c1 2300 	strd	r2, r3, [r1]
  for (i = 0; i < 126; i++) {
 80077f6:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 80077fa:	f103 030c 	add.w	r3, r3, #12
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	3301      	adds	r3, #1
 8007802:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 8007806:	f102 020c 	add.w	r2, r2, #12
 800780a:	6013      	str	r3, [r2, #0]
 800780c:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8007810:	f103 030c 	add.w	r3, r3, #12
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	2b7d      	cmp	r3, #125	; 0x7d
 8007818:	f77f aeee 	ble.w	80075f8 <SIM0_step+0xeb0>
  }

  SIM0_DW.Memory1_PreviousInput = SIM0_U.AMS_error;
 800781c:	4b65      	ldr	r3, [pc, #404]	; (80079b4 <SIM0_step+0x126c>)
 800781e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007822:	4963      	ldr	r1, [pc, #396]	; (80079b0 <SIM0_step+0x1268>)
 8007824:	f501 51bf 	add.w	r1, r1, #6112	; 0x17e0
 8007828:	e9c1 2300 	strd	r2, r3, [r1]
  SIM0_DW.Memory2_PreviousInput = SIM0_U.AMS_error_reset;
 800782c:	4b61      	ldr	r3, [pc, #388]	; (80079b4 <SIM0_step+0x126c>)
 800782e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8007832:	4b5f      	ldr	r3, [pc, #380]	; (80079b0 <SIM0_step+0x1268>)
 8007834:	f503 53bf 	add.w	r3, r3, #6112	; 0x17e0
 8007838:	3308      	adds	r3, #8
 800783a:	e9c3 0100 	strd	r0, r1, [r3]
  SIM0_DW.Memory_PreviousInput_m = rtb_Logic_idx_0;
 800783e:	4b5c      	ldr	r3, [pc, #368]	; (80079b0 <SIM0_step+0x1268>)
 8007840:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 8007844:	3318      	adds	r3, #24
 8007846:	f507 529e 	add.w	r2, r7, #5056	; 0x13c0
 800784a:	f102 0217 	add.w	r2, r2, #23
 800784e:	7812      	ldrb	r2, [r2, #0]
 8007850:	701a      	strb	r2, [r3, #0]
  SIM0_DW.Memory3_PreviousInput = SIM0_U.IMD_error;
 8007852:	4b58      	ldr	r3, [pc, #352]	; (80079b4 <SIM0_step+0x126c>)
 8007854:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8007858:	4b55      	ldr	r3, [pc, #340]	; (80079b0 <SIM0_step+0x1268>)
 800785a:	f503 53bf 	add.w	r3, r3, #6112	; 0x17e0
 800785e:	3310      	adds	r3, #16
 8007860:	e9c3 0100 	strd	r0, r1, [r3]
  SIM0_DW.Memory4_PreviousInput = SIM0_U.IMD_error_reset;
 8007864:	4b53      	ldr	r3, [pc, #332]	; (80079b4 <SIM0_step+0x126c>)
 8007866:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800786a:	4b51      	ldr	r3, [pc, #324]	; (80079b0 <SIM0_step+0x1268>)
 800786c:	f503 53bf 	add.w	r3, r3, #6112	; 0x17e0
 8007870:	3318      	adds	r3, #24
 8007872:	e9c3 0100 	strd	r0, r1, [r3]
  SIM0_DW.Memory_PreviousInput_c = rtb_Logic_p_idx_0;
 8007876:	4b4e      	ldr	r3, [pc, #312]	; (80079b0 <SIM0_step+0x1268>)
 8007878:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 800787c:	3319      	adds	r3, #25
 800787e:	f507 529e 	add.w	r2, r7, #5056	; 0x13c0
 8007882:	f102 0215 	add.w	r2, r2, #21
 8007886:	7812      	ldrb	r2, [r2, #0]
 8007888:	701a      	strb	r2, [r3, #0]
  SIM0_DW.Memory5_PreviousInput = SIM0_U.SC;
 800788a:	4b4a      	ldr	r3, [pc, #296]	; (80079b4 <SIM0_step+0x126c>)
 800788c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007890:	4947      	ldr	r1, [pc, #284]	; (80079b0 <SIM0_step+0x1268>)
 8007892:	f501 51c0 	add.w	r1, r1, #6144	; 0x1800
 8007896:	e9c1 2300 	strd	r2, r3, [r1]
  SIM0_DW.Delay1_DSTATE = SIM0_DW.Memory14_PreviousInput;
 800789a:	4b45      	ldr	r3, [pc, #276]	; (80079b0 <SIM0_step+0x1268>)
 800789c:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 80078a0:	3308      	adds	r3, #8
 80078a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078a6:	4942      	ldr	r1, [pc, #264]	; (80079b0 <SIM0_step+0x1268>)
 80078a8:	e9c1 2300 	strd	r2, r3, [r1]
  SIM0_DW.Delay3_DSTATE[0] = SIM0_DW.Delay3_DSTATE[1];
 80078ac:	4b40      	ldr	r3, [pc, #256]	; (80079b0 <SIM0_step+0x1268>)
 80078ae:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80078b2:	493f      	ldr	r1, [pc, #252]	; (80079b0 <SIM0_step+0x1268>)
 80078b4:	e9c1 2302 	strd	r2, r3, [r1, #8]
  SIM0_DW.Delay3_DSTATE[1] = SIM0_DW.Memory8_PreviousInput;
 80078b8:	4b3d      	ldr	r3, [pc, #244]	; (80079b0 <SIM0_step+0x1268>)
 80078ba:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 80078be:	3310      	adds	r3, #16
 80078c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078c4:	493a      	ldr	r1, [pc, #232]	; (80079b0 <SIM0_step+0x1268>)
 80078c6:	e9c1 2304 	strd	r2, r3, [r1, #16]
  SIM0_DW.Delay2_DSTATE[0] = SIM0_DW.Delay2_DSTATE[1];
 80078ca:	4b39      	ldr	r3, [pc, #228]	; (80079b0 <SIM0_step+0x1268>)
 80078cc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80078d0:	4937      	ldr	r1, [pc, #220]	; (80079b0 <SIM0_step+0x1268>)
 80078d2:	e9c1 2306 	strd	r2, r3, [r1, #24]
  SIM0_DW.Delay2_DSTATE[1] = SIM0_DW.Memory13_PreviousInput;
 80078d6:	4b36      	ldr	r3, [pc, #216]	; (80079b0 <SIM0_step+0x1268>)
 80078d8:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 80078dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078e0:	4933      	ldr	r1, [pc, #204]	; (80079b0 <SIM0_step+0x1268>)
 80078e2:	e9c1 2308 	strd	r2, r3, [r1, #32]
  SIM0_DW.Memory6_PreviousInput = SIM0_U.charge;
 80078e6:	4b33      	ldr	r3, [pc, #204]	; (80079b4 <SIM0_step+0x126c>)
 80078e8:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 80078ec:	4b30      	ldr	r3, [pc, #192]	; (80079b0 <SIM0_step+0x1268>)
 80078ee:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 80078f2:	3308      	adds	r3, #8
 80078f4:	e9c3 0100 	strd	r0, r1, [r3]
  SIM0_DW.Memory7_PreviousInput = SIM0_U.drive;
 80078f8:	4b2e      	ldr	r3, [pc, #184]	; (80079b4 <SIM0_step+0x126c>)
 80078fa:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 80078fe:	4b2c      	ldr	r3, [pc, #176]	; (80079b0 <SIM0_step+0x1268>)
 8007900:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 8007904:	3310      	adds	r3, #16
 8007906:	e9c3 0100 	strd	r0, r1, [r3]
  SIM0_DW.Memory22_PreviousInput = SIM0_U.drive_current;
 800790a:	4b2a      	ldr	r3, [pc, #168]	; (80079b4 <SIM0_step+0x126c>)
 800790c:	f503 638b 	add.w	r3, r3, #1112	; 0x458
 8007910:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007914:	4b26      	ldr	r3, [pc, #152]	; (80079b0 <SIM0_step+0x1268>)
 8007916:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 800791a:	3318      	adds	r3, #24
 800791c:	e9c3 0100 	strd	r0, r1, [r3]
  SIM0_DW.Memory17_PreviousInput = SIM0_U.VoltageLimit;
 8007920:	4b24      	ldr	r3, [pc, #144]	; (80079b4 <SIM0_step+0x126c>)
 8007922:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8007926:	4922      	ldr	r1, [pc, #136]	; (80079b0 <SIM0_step+0x1268>)
 8007928:	f501 51c1 	add.w	r1, r1, #6176	; 0x1820
 800792c:	e9c1 2300 	strd	r2, r3, [r1]
  SIM0_DW.Memory16_PreviousInput = SIM0_U.EnableCharge;
 8007930:	4b20      	ldr	r3, [pc, #128]	; (80079b4 <SIM0_step+0x126c>)
 8007932:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8007936:	4b1e      	ldr	r3, [pc, #120]	; (80079b0 <SIM0_step+0x1268>)
 8007938:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 800793c:	3308      	adds	r3, #8
 800793e:	e9c3 0100 	strd	r0, r1, [r3]
  SIM0_DW.Memory18_PreviousInput = SIM0_U.CurrentLimit;
 8007942:	4b1c      	ldr	r3, [pc, #112]	; (80079b4 <SIM0_step+0x126c>)
 8007944:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8007948:	4b19      	ldr	r3, [pc, #100]	; (80079b0 <SIM0_step+0x1268>)
 800794a:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 800794e:	3310      	adds	r3, #16
 8007950:	e9c3 0100 	strd	r0, r1, [r3]
  SIM0_DW.Memory_PreviousInput_a = rtb_Exp;
 8007954:	4b16      	ldr	r3, [pc, #88]	; (80079b0 <SIM0_step+0x1268>)
 8007956:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 800795a:	3318      	adds	r3, #24
 800795c:	f507 52a0 	add.w	r2, r7, #5120	; 0x1400
 8007960:	f102 0208 	add.w	r2, r2, #8
 8007964:	e9d2 0100 	ldrd	r0, r1, [r2]
 8007968:	e9c3 0100 	strd	r0, r1, [r3]
  SIM0_DW.Memory13_PreviousInput = SIM0_U.EnableAirPlus;
 800796c:	4b11      	ldr	r3, [pc, #68]	; (80079b4 <SIM0_step+0x126c>)
 800796e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8007972:	490f      	ldr	r1, [pc, #60]	; (80079b0 <SIM0_step+0x1268>)
 8007974:	f501 51c2 	add.w	r1, r1, #6208	; 0x1840
 8007978:	e9c1 2300 	strd	r2, r3, [r1]
  SIM0_DW.Memory14_PreviousInput = SIM0_U.EnablePrecharge;
 800797c:	4b0d      	ldr	r3, [pc, #52]	; (80079b4 <SIM0_step+0x126c>)
 800797e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8007982:	4b0b      	ldr	r3, [pc, #44]	; (80079b0 <SIM0_step+0x1268>)
 8007984:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 8007988:	3308      	adds	r3, #8
 800798a:	e9c3 0100 	strd	r0, r1, [r3]
  SIM0_DW.Memory8_PreviousInput = SIM0_U.EnableAirMinus;
 800798e:	4b09      	ldr	r3, [pc, #36]	; (80079b4 <SIM0_step+0x126c>)
 8007990:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8007994:	4b06      	ldr	r3, [pc, #24]	; (80079b0 <SIM0_step+0x1268>)
 8007996:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 800799a:	3310      	adds	r3, #16
 800799c:	e9c3 0100 	strd	r0, r1, [r3]
}
 80079a0:	bf00      	nop
 80079a2:	f507 57a0 	add.w	r7, r7, #5120	; 0x1400
 80079a6:	371c      	adds	r7, #28
 80079a8:	46bd      	mov	sp, r7
 80079aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079ae:	bf00      	nop
 80079b0:	2001be50 	.word	0x2001be50
 80079b4:	2001e4a8 	.word	0x2001e4a8

080079b8 <SIM0_initialize>:

void SIM0_initialize(void)
{
 80079b8:	b480      	push	{r7}
 80079ba:	b083      	sub	sp, #12
 80079bc:	af00      	add	r7, sp, #0
  {
    int32_T i;
    SIM0_DW.Memory20_PreviousInput = SIM0_P.Memory20_InitialCondition;
 80079be:	4b10      	ldr	r3, [pc, #64]	; (8007a00 <SIM0_initialize+0x48>)
 80079c0:	f503 637f 	add.w	r3, r3, #4080	; 0xff0
 80079c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079c8:	490e      	ldr	r1, [pc, #56]	; (8007a04 <SIM0_initialize+0x4c>)
 80079ca:	f601 0108 	addw	r1, r1, #2056	; 0x808
 80079ce:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_DW.Memory11_PreviousInput = SIM0_P.Memory11_InitialCondition;
 80079d2:	4b0b      	ldr	r3, [pc, #44]	; (8007a00 <SIM0_initialize+0x48>)
 80079d4:	f603 73f8 	addw	r3, r3, #4088	; 0xff8
 80079d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079dc:	4909      	ldr	r1, [pc, #36]	; (8007a04 <SIM0_initialize+0x4c>)
 80079de:	f501 6101 	add.w	r1, r1, #2064	; 0x810
 80079e2:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_DW.Memory9_PreviousInput = SIM0_P.Memory9_InitialCondition;
 80079e6:	4b06      	ldr	r3, [pc, #24]	; (8007a00 <SIM0_initialize+0x48>)
 80079e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079f0:	4904      	ldr	r1, [pc, #16]	; (8007a04 <SIM0_initialize+0x4c>)
 80079f2:	f601 71f8 	addw	r1, r1, #4088	; 0xff8
 80079f6:	e9c1 2300 	strd	r2, r3, [r1]
    for (i = 0; i < 126; i++) {
 80079fa:	2300      	movs	r3, #0
 80079fc:	607b      	str	r3, [r7, #4]
 80079fe:	e05b      	b.n	8007ab8 <SIM0_initialize+0x100>
 8007a00:	200002e0 	.word	0x200002e0
 8007a04:	2001be50 	.word	0x2001be50
      SIM0_DW.Memory15_PreviousInput[i] = SIM0_P.Memory15_InitialCondition;
 8007a08:	4ba4      	ldr	r3, [pc, #656]	; (8007c9c <SIM0_initialize+0x2e4>)
 8007a0a:	f603 33f8 	addw	r3, r3, #3064	; 0xbf8
 8007a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a12:	48a3      	ldr	r0, [pc, #652]	; (8007ca0 <SIM0_initialize+0x2e8>)
 8007a14:	6879      	ldr	r1, [r7, #4]
 8007a16:	3105      	adds	r1, #5
 8007a18:	00c9      	lsls	r1, r1, #3
 8007a1a:	4401      	add	r1, r0
 8007a1c:	e9c1 2300 	strd	r2, r3, [r1]
      SIM0_DW.Memory12_PreviousInput[i] = SIM0_P.Memory12_InitialCondition[i];
 8007a20:	4a9e      	ldr	r2, [pc, #632]	; (8007c9c <SIM0_initialize+0x2e4>)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8007a28:	00db      	lsls	r3, r3, #3
 8007a2a:	4413      	add	r3, r2
 8007a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a30:	489b      	ldr	r0, [pc, #620]	; (8007ca0 <SIM0_initialize+0x2e8>)
 8007a32:	6879      	ldr	r1, [r7, #4]
 8007a34:	3183      	adds	r1, #131	; 0x83
 8007a36:	00c9      	lsls	r1, r1, #3
 8007a38:	4401      	add	r1, r0
 8007a3a:	e9c1 2300 	strd	r2, r3, [r1]
      SIM0_DW.Memory_PreviousInput[i] = SIM0_P.cQur[i];
 8007a3e:	4a97      	ldr	r2, [pc, #604]	; (8007c9c <SIM0_initialize+0x2e4>)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	339d      	adds	r3, #157	; 0x9d
 8007a44:	00db      	lsls	r3, r3, #3
 8007a46:	4413      	add	r3, r2
 8007a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a4c:	4894      	ldr	r0, [pc, #592]	; (8007ca0 <SIM0_initialize+0x2e8>)
 8007a4e:	6879      	ldr	r1, [r7, #4]
 8007a50:	f201 1103 	addw	r1, r1, #259	; 0x103
 8007a54:	00c9      	lsls	r1, r1, #3
 8007a56:	4401      	add	r1, r0
 8007a58:	e9c1 2300 	strd	r2, r3, [r1]
      SIM0_DW.Memory10_PreviousInput[i] = SIM0_P.cCap[i];
 8007a5c:	4a8f      	ldr	r2, [pc, #572]	; (8007c9c <SIM0_initialize+0x2e4>)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	331f      	adds	r3, #31
 8007a62:	00db      	lsls	r3, r3, #3
 8007a64:	4413      	add	r3, r2
 8007a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a6a:	488d      	ldr	r0, [pc, #564]	; (8007ca0 <SIM0_initialize+0x2e8>)
 8007a6c:	6879      	ldr	r1, [r7, #4]
 8007a6e:	f201 1181 	addw	r1, r1, #385	; 0x181
 8007a72:	00c9      	lsls	r1, r1, #3
 8007a74:	4401      	add	r1, r0
 8007a76:	e9c1 2300 	strd	r2, r3, [r1]
      SIM0_DW.Memory19_PreviousInput[i] = SIM0_P.Memory19_InitialCondition;
 8007a7a:	4b88      	ldr	r3, [pc, #544]	; (8007c9c <SIM0_initialize+0x2e4>)
 8007a7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a80:	3308      	adds	r3, #8
 8007a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a86:	4886      	ldr	r0, [pc, #536]	; (8007ca0 <SIM0_initialize+0x2e8>)
 8007a88:	6879      	ldr	r1, [r7, #4]
 8007a8a:	f501 7100 	add.w	r1, r1, #512	; 0x200
 8007a8e:	00c9      	lsls	r1, r1, #3
 8007a90:	4401      	add	r1, r0
 8007a92:	e9c1 2300 	strd	r2, r3, [r1]
      SIM0_DW.Memory21_PreviousInput[i] = SIM0_P.Memory21_InitialCondition;
 8007a96:	4b81      	ldr	r3, [pc, #516]	; (8007c9c <SIM0_initialize+0x2e4>)
 8007a98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a9c:	3310      	adds	r3, #16
 8007a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aa2:	487f      	ldr	r0, [pc, #508]	; (8007ca0 <SIM0_initialize+0x2e8>)
 8007aa4:	6879      	ldr	r1, [r7, #4]
 8007aa6:	f201 217e 	addw	r1, r1, #638	; 0x27e
 8007aaa:	00c9      	lsls	r1, r1, #3
 8007aac:	4401      	add	r1, r0
 8007aae:	e9c1 2300 	strd	r2, r3, [r1]
    for (i = 0; i < 126; i++) {
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	3301      	adds	r3, #1
 8007ab6:	607b      	str	r3, [r7, #4]
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2b7d      	cmp	r3, #125	; 0x7d
 8007abc:	dda4      	ble.n	8007a08 <SIM0_initialize+0x50>
    }

    SIM0_DW.Memory1_PreviousInput = SIM0_P.Memory1_InitialCondition;
 8007abe:	4b77      	ldr	r3, [pc, #476]	; (8007c9c <SIM0_initialize+0x2e4>)
 8007ac0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8007ac4:	3308      	adds	r3, #8
 8007ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aca:	4975      	ldr	r1, [pc, #468]	; (8007ca0 <SIM0_initialize+0x2e8>)
 8007acc:	f501 51bf 	add.w	r1, r1, #6112	; 0x17e0
 8007ad0:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_DW.Memory2_PreviousInput = SIM0_P.Memory2_InitialCondition;
 8007ad4:	4b71      	ldr	r3, [pc, #452]	; (8007c9c <SIM0_initialize+0x2e4>)
 8007ad6:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8007ada:	3310      	adds	r3, #16
 8007adc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007ae0:	4b6f      	ldr	r3, [pc, #444]	; (8007ca0 <SIM0_initialize+0x2e8>)
 8007ae2:	f503 53bf 	add.w	r3, r3, #6112	; 0x17e0
 8007ae6:	3308      	adds	r3, #8
 8007ae8:	e9c3 0100 	strd	r0, r1, [r3]
    SIM0_DW.Memory_PreviousInput_m = SIM0_P.SRFlipFlop2_initial_condition;
 8007aec:	4b6b      	ldr	r3, [pc, #428]	; (8007c9c <SIM0_initialize+0x2e4>)
 8007aee:	f893 2bf0 	ldrb.w	r2, [r3, #3056]	; 0xbf0
 8007af2:	4b6b      	ldr	r3, [pc, #428]	; (8007ca0 <SIM0_initialize+0x2e8>)
 8007af4:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 8007af8:	3318      	adds	r3, #24
 8007afa:	701a      	strb	r2, [r3, #0]
    SIM0_DW.Memory3_PreviousInput = SIM0_P.Memory3_InitialCondition;
 8007afc:	4b67      	ldr	r3, [pc, #412]	; (8007c9c <SIM0_initialize+0x2e4>)
 8007afe:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8007b02:	3318      	adds	r3, #24
 8007b04:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007b08:	4b65      	ldr	r3, [pc, #404]	; (8007ca0 <SIM0_initialize+0x2e8>)
 8007b0a:	f503 53bf 	add.w	r3, r3, #6112	; 0x17e0
 8007b0e:	3310      	adds	r3, #16
 8007b10:	e9c3 0100 	strd	r0, r1, [r3]
    SIM0_DW.Memory4_PreviousInput = SIM0_P.Memory4_InitialCondition;
 8007b14:	4b61      	ldr	r3, [pc, #388]	; (8007c9c <SIM0_initialize+0x2e4>)
 8007b16:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8007b1a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007b1e:	4b60      	ldr	r3, [pc, #384]	; (8007ca0 <SIM0_initialize+0x2e8>)
 8007b20:	f503 53bf 	add.w	r3, r3, #6112	; 0x17e0
 8007b24:	3318      	adds	r3, #24
 8007b26:	e9c3 0100 	strd	r0, r1, [r3]
    SIM0_DW.Memory_PreviousInput_c = SIM0_P.SRFlipFlop1_initial_condition;
 8007b2a:	4b5c      	ldr	r3, [pc, #368]	; (8007c9c <SIM0_initialize+0x2e4>)
 8007b2c:	f893 2bf1 	ldrb.w	r2, [r3, #3057]	; 0xbf1
 8007b30:	4b5b      	ldr	r3, [pc, #364]	; (8007ca0 <SIM0_initialize+0x2e8>)
 8007b32:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 8007b36:	3319      	adds	r3, #25
 8007b38:	701a      	strb	r2, [r3, #0]
    SIM0_DW.Memory5_PreviousInput = SIM0_P.Memory5_InitialCondition;
 8007b3a:	4b58      	ldr	r3, [pc, #352]	; (8007c9c <SIM0_initialize+0x2e4>)
 8007b3c:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8007b40:	3308      	adds	r3, #8
 8007b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b46:	4956      	ldr	r1, [pc, #344]	; (8007ca0 <SIM0_initialize+0x2e8>)
 8007b48:	f501 51c0 	add.w	r1, r1, #6144	; 0x1800
 8007b4c:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_DW.Delay1_DSTATE = SIM0_P.Delay1_InitialCondition;
 8007b50:	4b52      	ldr	r3, [pc, #328]	; (8007c9c <SIM0_initialize+0x2e4>)
 8007b52:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8007b56:	3310      	adds	r3, #16
 8007b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b5c:	4950      	ldr	r1, [pc, #320]	; (8007ca0 <SIM0_initialize+0x2e8>)
 8007b5e:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_DW.Delay3_DSTATE[0] = SIM0_P.Delay3_InitialCondition;
 8007b62:	4b4e      	ldr	r3, [pc, #312]	; (8007c9c <SIM0_initialize+0x2e4>)
 8007b64:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8007b68:	3318      	adds	r3, #24
 8007b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b6e:	494c      	ldr	r1, [pc, #304]	; (8007ca0 <SIM0_initialize+0x2e8>)
 8007b70:	e9c1 2302 	strd	r2, r3, [r1, #8]
    SIM0_DW.Delay2_DSTATE[0] = SIM0_P.Delay2_InitialCondition;
 8007b74:	4b49      	ldr	r3, [pc, #292]	; (8007c9c <SIM0_initialize+0x2e4>)
 8007b76:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8007b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b7e:	4948      	ldr	r1, [pc, #288]	; (8007ca0 <SIM0_initialize+0x2e8>)
 8007b80:	e9c1 2306 	strd	r2, r3, [r1, #24]
    SIM0_DW.Delay3_DSTATE[1] = SIM0_P.Delay3_InitialCondition;
 8007b84:	4b45      	ldr	r3, [pc, #276]	; (8007c9c <SIM0_initialize+0x2e4>)
 8007b86:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8007b8a:	3318      	adds	r3, #24
 8007b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b90:	4943      	ldr	r1, [pc, #268]	; (8007ca0 <SIM0_initialize+0x2e8>)
 8007b92:	e9c1 2304 	strd	r2, r3, [r1, #16]
    SIM0_DW.Delay2_DSTATE[1] = SIM0_P.Delay2_InitialCondition;
 8007b96:	4b41      	ldr	r3, [pc, #260]	; (8007c9c <SIM0_initialize+0x2e4>)
 8007b98:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8007b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ba0:	493f      	ldr	r1, [pc, #252]	; (8007ca0 <SIM0_initialize+0x2e8>)
 8007ba2:	e9c1 2308 	strd	r2, r3, [r1, #32]
    SIM0_DW.Memory6_PreviousInput = SIM0_P.Memory6_InitialCondition;
 8007ba6:	4b3d      	ldr	r3, [pc, #244]	; (8007c9c <SIM0_initialize+0x2e4>)
 8007ba8:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8007bac:	3308      	adds	r3, #8
 8007bae:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007bb2:	4b3b      	ldr	r3, [pc, #236]	; (8007ca0 <SIM0_initialize+0x2e8>)
 8007bb4:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 8007bb8:	3308      	adds	r3, #8
 8007bba:	e9c3 0100 	strd	r0, r1, [r3]
    SIM0_DW.Memory7_PreviousInput = SIM0_P.Memory7_InitialCondition;
 8007bbe:	4b37      	ldr	r3, [pc, #220]	; (8007c9c <SIM0_initialize+0x2e4>)
 8007bc0:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8007bc4:	3310      	adds	r3, #16
 8007bc6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007bca:	4b35      	ldr	r3, [pc, #212]	; (8007ca0 <SIM0_initialize+0x2e8>)
 8007bcc:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 8007bd0:	3310      	adds	r3, #16
 8007bd2:	e9c3 0100 	strd	r0, r1, [r3]
    SIM0_DW.Memory22_PreviousInput = SIM0_P.Memory22_InitialCondition;
 8007bd6:	4b31      	ldr	r3, [pc, #196]	; (8007c9c <SIM0_initialize+0x2e4>)
 8007bd8:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8007bdc:	3318      	adds	r3, #24
 8007bde:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007be2:	4b2f      	ldr	r3, [pc, #188]	; (8007ca0 <SIM0_initialize+0x2e8>)
 8007be4:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 8007be8:	3318      	adds	r3, #24
 8007bea:	e9c3 0100 	strd	r0, r1, [r3]
    SIM0_DW.Memory17_PreviousInput = SIM0_P.Memory17_InitialCondition;
 8007bee:	4b2b      	ldr	r3, [pc, #172]	; (8007c9c <SIM0_initialize+0x2e4>)
 8007bf0:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 8007bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bf8:	4929      	ldr	r1, [pc, #164]	; (8007ca0 <SIM0_initialize+0x2e8>)
 8007bfa:	f501 51c1 	add.w	r1, r1, #6176	; 0x1820
 8007bfe:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_DW.Memory16_PreviousInput = SIM0_P.Memory16_InitialCondition;
 8007c02:	4b26      	ldr	r3, [pc, #152]	; (8007c9c <SIM0_initialize+0x2e4>)
 8007c04:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 8007c08:	3308      	adds	r3, #8
 8007c0a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007c0e:	4b24      	ldr	r3, [pc, #144]	; (8007ca0 <SIM0_initialize+0x2e8>)
 8007c10:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 8007c14:	3308      	adds	r3, #8
 8007c16:	e9c3 0100 	strd	r0, r1, [r3]
    SIM0_DW.Memory18_PreviousInput = SIM0_P.Memory18_InitialCondition;
 8007c1a:	4b20      	ldr	r3, [pc, #128]	; (8007c9c <SIM0_initialize+0x2e4>)
 8007c1c:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 8007c20:	3310      	adds	r3, #16
 8007c22:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007c26:	4b1e      	ldr	r3, [pc, #120]	; (8007ca0 <SIM0_initialize+0x2e8>)
 8007c28:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 8007c2c:	3310      	adds	r3, #16
 8007c2e:	e9c3 0100 	strd	r0, r1, [r3]
    SIM0_DW.Memory_PreviousInput_a = SIM0_P.Memory_InitialCondition;
 8007c32:	4b1a      	ldr	r3, [pc, #104]	; (8007c9c <SIM0_initialize+0x2e4>)
 8007c34:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 8007c38:	3318      	adds	r3, #24
 8007c3a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007c3e:	4b18      	ldr	r3, [pc, #96]	; (8007ca0 <SIM0_initialize+0x2e8>)
 8007c40:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 8007c44:	3318      	adds	r3, #24
 8007c46:	e9c3 0100 	strd	r0, r1, [r3]
    SIM0_DW.Memory13_PreviousInput = SIM0_P.Memory13_InitialCondition;
 8007c4a:	4b14      	ldr	r3, [pc, #80]	; (8007c9c <SIM0_initialize+0x2e4>)
 8007c4c:	f503 5385 	add.w	r3, r3, #4256	; 0x10a0
 8007c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c54:	4912      	ldr	r1, [pc, #72]	; (8007ca0 <SIM0_initialize+0x2e8>)
 8007c56:	f501 51c2 	add.w	r1, r1, #6208	; 0x1840
 8007c5a:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_DW.Memory14_PreviousInput = SIM0_P.Memory14_InitialCondition;
 8007c5e:	4b0f      	ldr	r3, [pc, #60]	; (8007c9c <SIM0_initialize+0x2e4>)
 8007c60:	f503 5385 	add.w	r3, r3, #4256	; 0x10a0
 8007c64:	3308      	adds	r3, #8
 8007c66:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007c6a:	4b0d      	ldr	r3, [pc, #52]	; (8007ca0 <SIM0_initialize+0x2e8>)
 8007c6c:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 8007c70:	3308      	adds	r3, #8
 8007c72:	e9c3 0100 	strd	r0, r1, [r3]
    SIM0_DW.Memory8_PreviousInput = SIM0_P.Memory8_InitialCondition;
 8007c76:	4b09      	ldr	r3, [pc, #36]	; (8007c9c <SIM0_initialize+0x2e4>)
 8007c78:	f503 5385 	add.w	r3, r3, #4256	; 0x10a0
 8007c7c:	3310      	adds	r3, #16
 8007c7e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007c82:	4b07      	ldr	r3, [pc, #28]	; (8007ca0 <SIM0_initialize+0x2e8>)
 8007c84:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 8007c88:	3310      	adds	r3, #16
 8007c8a:	e9c3 0100 	strd	r0, r1, [r3]
  }
}
 8007c8e:	bf00      	nop
 8007c90:	370c      	adds	r7, #12
 8007c92:	46bd      	mov	sp, r7
 8007c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c98:	4770      	bx	lr
 8007c9a:	bf00      	nop
 8007c9c:	200002e0 	.word	0x200002e0
 8007ca0:	2001be50 	.word	0x2001be50

08007ca4 <UTMeanCovSqrt_C2vgLQ4W>:
#include "qr_5a2P8Gh6.h"

void UTMeanCovSqrt_C2vgLQ4W(const real_T meanWeights[2], const real_T
  covWeights[2], real_T OOM, real_T Y1[3], real_T Y2[18], const real_T X1[3],
  real_T X2[18], real_T Ymean[3], real_T Sy[9], real_T Pxy[9])
{
 8007ca4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007ca8:	f5ad 7d2f 	sub.w	sp, sp, #700	; 0x2bc
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	f107 0414 	add.w	r4, r7, #20
 8007cb2:	6020      	str	r0, [r4, #0]
 8007cb4:	f107 0010 	add.w	r0, r7, #16
 8007cb8:	6001      	str	r1, [r0, #0]
 8007cba:	f107 0108 	add.w	r1, r7, #8
 8007cbe:	ed81 0b00 	vstr	d0, [r1]
 8007cc2:	1d39      	adds	r1, r7, #4
 8007cc4:	600a      	str	r2, [r1, #0]
 8007cc6:	463a      	mov	r2, r7
 8007cc8:	6013      	str	r3, [r2, #0]
  int32_T i;
  int32_T iAcol;
  int32_T i_0;
  int32_T i_1;
  int32_T kk;
  Ymean[0] = Y1[0] * meanWeights[0];
 8007cca:	1d3b      	adds	r3, r7, #4
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007cd2:	f107 0314 	add.w	r3, r7, #20
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cdc:	f7f8 fc7e 	bl	80005dc <__aeabi_dmul>
 8007ce0:	4602      	mov	r2, r0
 8007ce2:	460b      	mov	r3, r1
 8007ce4:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8007ce8:	e9c1 2300 	strd	r2, r3, [r1]
  Ymean[1] = meanWeights[0] * Y1[1];
 8007cec:	f107 0314 	add.w	r3, r7, #20
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007cf6:	1d3b      	adds	r3, r7, #4
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	3308      	adds	r3, #8
 8007cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d00:	f8d7 42e0 	ldr.w	r4, [r7, #736]	; 0x2e0
 8007d04:	3408      	adds	r4, #8
 8007d06:	f7f8 fc69 	bl	80005dc <__aeabi_dmul>
 8007d0a:	4602      	mov	r2, r0
 8007d0c:	460b      	mov	r3, r1
 8007d0e:	e9c4 2300 	strd	r2, r3, [r4]
  Ymean[2] = meanWeights[0] * Y1[2];
 8007d12:	f107 0314 	add.w	r3, r7, #20
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007d1c:	1d3b      	adds	r3, r7, #4
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	3310      	adds	r3, #16
 8007d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d26:	f8d7 42e0 	ldr.w	r4, [r7, #736]	; 0x2e0
 8007d2a:	3410      	adds	r4, #16
 8007d2c:	f7f8 fc56 	bl	80005dc <__aeabi_dmul>
 8007d30:	4602      	mov	r2, r0
 8007d32:	460b      	mov	r3, r1
 8007d34:	e9c4 2300 	strd	r2, r3, [r4]
  iAcol = 0;
 8007d38:	2300      	movs	r3, #0
 8007d3a:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
  for (kk = 0; kk < 6; kk++) {
 8007d3e:	2300      	movs	r3, #0
 8007d40:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8007d44:	e079      	b.n	8007e3a <UTMeanCovSqrt_C2vgLQ4W+0x196>
    Ymean[0] += Y2[iAcol] * meanWeights[1];
 8007d46:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8007d4a:	e9d3 4500 	ldrd	r4, r5, [r3]
 8007d4e:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8007d52:	00db      	lsls	r3, r3, #3
 8007d54:	463a      	mov	r2, r7
 8007d56:	6812      	ldr	r2, [r2, #0]
 8007d58:	4413      	add	r3, r2
 8007d5a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007d5e:	f107 0314 	add.w	r3, r7, #20
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	3308      	adds	r3, #8
 8007d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d6a:	f7f8 fc37 	bl	80005dc <__aeabi_dmul>
 8007d6e:	4602      	mov	r2, r0
 8007d70:	460b      	mov	r3, r1
 8007d72:	4620      	mov	r0, r4
 8007d74:	4629      	mov	r1, r5
 8007d76:	f7f8 fa7b 	bl	8000270 <__adddf3>
 8007d7a:	4602      	mov	r2, r0
 8007d7c:	460b      	mov	r3, r1
 8007d7e:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8007d82:	e9c1 2300 	strd	r2, r3, [r1]
    Ymean[1] += Y2[iAcol + 1] * meanWeights[1];
 8007d86:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8007d8a:	3308      	adds	r3, #8
 8007d8c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8007d90:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8007d94:	3301      	adds	r3, #1
 8007d96:	00db      	lsls	r3, r3, #3
 8007d98:	463a      	mov	r2, r7
 8007d9a:	6812      	ldr	r2, [r2, #0]
 8007d9c:	4413      	add	r3, r2
 8007d9e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007da2:	f107 0314 	add.w	r3, r7, #20
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	3308      	adds	r3, #8
 8007daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dae:	f7f8 fc15 	bl	80005dc <__aeabi_dmul>
 8007db2:	4602      	mov	r2, r0
 8007db4:	460b      	mov	r3, r1
 8007db6:	4610      	mov	r0, r2
 8007db8:	4619      	mov	r1, r3
 8007dba:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8007dbe:	f103 0608 	add.w	r6, r3, #8
 8007dc2:	4602      	mov	r2, r0
 8007dc4:	460b      	mov	r3, r1
 8007dc6:	4620      	mov	r0, r4
 8007dc8:	4629      	mov	r1, r5
 8007dca:	f7f8 fa51 	bl	8000270 <__adddf3>
 8007dce:	4602      	mov	r2, r0
 8007dd0:	460b      	mov	r3, r1
 8007dd2:	e9c6 2300 	strd	r2, r3, [r6]
    Ymean[2] += Y2[iAcol + 2] * meanWeights[1];
 8007dd6:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8007dda:	3310      	adds	r3, #16
 8007ddc:	e9d3 4500 	ldrd	r4, r5, [r3]
 8007de0:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8007de4:	3302      	adds	r3, #2
 8007de6:	00db      	lsls	r3, r3, #3
 8007de8:	463a      	mov	r2, r7
 8007dea:	6812      	ldr	r2, [r2, #0]
 8007dec:	4413      	add	r3, r2
 8007dee:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007df2:	f107 0314 	add.w	r3, r7, #20
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	3308      	adds	r3, #8
 8007dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dfe:	f7f8 fbed 	bl	80005dc <__aeabi_dmul>
 8007e02:	4602      	mov	r2, r0
 8007e04:	460b      	mov	r3, r1
 8007e06:	4610      	mov	r0, r2
 8007e08:	4619      	mov	r1, r3
 8007e0a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8007e0e:	f103 0610 	add.w	r6, r3, #16
 8007e12:	4602      	mov	r2, r0
 8007e14:	460b      	mov	r3, r1
 8007e16:	4620      	mov	r0, r4
 8007e18:	4629      	mov	r1, r5
 8007e1a:	f7f8 fa29 	bl	8000270 <__adddf3>
 8007e1e:	4602      	mov	r2, r0
 8007e20:	460b      	mov	r3, r1
 8007e22:	e9c6 2300 	strd	r2, r3, [r6]
    iAcol += 3;
 8007e26:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8007e2a:	3303      	adds	r3, #3
 8007e2c:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
  for (kk = 0; kk < 6; kk++) {
 8007e30:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8007e34:	3301      	adds	r3, #1
 8007e36:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8007e3a:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8007e3e:	2b05      	cmp	r3, #5
 8007e40:	dd81      	ble.n	8007d46 <UTMeanCovSqrt_C2vgLQ4W+0xa2>
  }

  signOOM = Ymean[0] * OOM;
 8007e42:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8007e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e4a:	f107 0108 	add.w	r1, r7, #8
 8007e4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e52:	f7f8 fbc3 	bl	80005dc <__aeabi_dmul>
 8007e56:	4602      	mov	r2, r0
 8007e58:	460b      	mov	r3, r1
 8007e5a:	e9c7 23a8 	strd	r2, r3, [r7, #672]	; 0x2a0
  scale = Y1[0] - signOOM;
 8007e5e:	1d3b      	adds	r3, r7, #4
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007e66:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 8007e6a:	f7f8 f9ff 	bl	800026c <__aeabi_dsub>
 8007e6e:	4602      	mov	r2, r0
 8007e70:	460b      	mov	r3, r1
 8007e72:	e9c7 23aa 	strd	r2, r3, [r7, #680]	; 0x2a8
  Ymean[0] = signOOM;
 8007e76:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8007e7a:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 8007e7e:	e9c1 2300 	strd	r2, r3, [r1]
  Y1[0] = scale;
 8007e82:	1d3b      	adds	r3, r7, #4
 8007e84:	6819      	ldr	r1, [r3, #0]
 8007e86:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 8007e8a:	e9c1 2300 	strd	r2, r3, [r1]
  signOOM = Ymean[1] * OOM;
 8007e8e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8007e92:	3308      	adds	r3, #8
 8007e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e98:	f107 0108 	add.w	r1, r7, #8
 8007e9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ea0:	f7f8 fb9c 	bl	80005dc <__aeabi_dmul>
 8007ea4:	4602      	mov	r2, r0
 8007ea6:	460b      	mov	r3, r1
 8007ea8:	e9c7 23a8 	strd	r2, r3, [r7, #672]	; 0x2a0
  absxk = Y1[1] - signOOM;
 8007eac:	1d3b      	adds	r3, r7, #4
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	3308      	adds	r3, #8
 8007eb2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007eb6:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 8007eba:	f7f8 f9d7 	bl	800026c <__aeabi_dsub>
 8007ebe:	4602      	mov	r2, r0
 8007ec0:	460b      	mov	r3, r1
 8007ec2:	e9c7 239e 	strd	r2, r3, [r7, #632]	; 0x278
  Ymean[1] = signOOM;
 8007ec6:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8007eca:	f103 0108 	add.w	r1, r3, #8
 8007ece:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 8007ed2:	e9c1 2300 	strd	r2, r3, [r1]
  Y1[1] = absxk;
 8007ed6:	1d3b      	adds	r3, r7, #4
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f103 0108 	add.w	r1, r3, #8
 8007ede:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 8007ee2:	e9c1 2300 	strd	r2, r3, [r1]
  signOOM = Ymean[2] * OOM;
 8007ee6:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8007eea:	3310      	adds	r3, #16
 8007eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ef0:	f107 0108 	add.w	r1, r7, #8
 8007ef4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ef8:	f7f8 fb70 	bl	80005dc <__aeabi_dmul>
 8007efc:	4602      	mov	r2, r0
 8007efe:	460b      	mov	r3, r1
 8007f00:	e9c7 23a8 	strd	r2, r3, [r7, #672]	; 0x2a0
  b_t = Y1[2] - signOOM;
 8007f04:	1d3b      	adds	r3, r7, #4
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	3310      	adds	r3, #16
 8007f0a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007f0e:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 8007f12:	f7f8 f9ab 	bl	800026c <__aeabi_dsub>
 8007f16:	4602      	mov	r2, r0
 8007f18:	460b      	mov	r3, r1
 8007f1a:	e9c7 239c 	strd	r2, r3, [r7, #624]	; 0x270
  Ymean[2] = signOOM;
 8007f1e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8007f22:	f103 0110 	add.w	r1, r3, #16
 8007f26:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 8007f2a:	e9c1 2300 	strd	r2, r3, [r1]
  Y1[2] = b_t;
 8007f2e:	1d3b      	adds	r3, r7, #4
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f103 0110 	add.w	r1, r3, #16
 8007f36:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 8007f3a:	e9c1 2300 	strd	r2, r3, [r1]
  iAcol = 0;
 8007f3e:	2300      	movs	r3, #0
 8007f40:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
  for (kk = 0; kk < 6; kk++) {
 8007f44:	2300      	movs	r3, #0
 8007f46:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8007f4a:	e054      	b.n	8007ff6 <UTMeanCovSqrt_C2vgLQ4W+0x352>
    Y2[iAcol] -= Ymean[0];
 8007f4c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8007f50:	00db      	lsls	r3, r3, #3
 8007f52:	463a      	mov	r2, r7
 8007f54:	6812      	ldr	r2, [r2, #0]
 8007f56:	4413      	add	r3, r2
 8007f58:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007f5c:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8007f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f64:	f8d7 4298 	ldr.w	r4, [r7, #664]	; 0x298
 8007f68:	00e4      	lsls	r4, r4, #3
 8007f6a:	463d      	mov	r5, r7
 8007f6c:	682d      	ldr	r5, [r5, #0]
 8007f6e:	442c      	add	r4, r5
 8007f70:	f7f8 f97c 	bl	800026c <__aeabi_dsub>
 8007f74:	4602      	mov	r2, r0
 8007f76:	460b      	mov	r3, r1
 8007f78:	e9c4 2300 	strd	r2, r3, [r4]
    Y2[iAcol + 1] -= Ymean[1];
 8007f7c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8007f80:	3301      	adds	r3, #1
 8007f82:	00db      	lsls	r3, r3, #3
 8007f84:	463a      	mov	r2, r7
 8007f86:	6812      	ldr	r2, [r2, #0]
 8007f88:	4413      	add	r3, r2
 8007f8a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007f8e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8007f92:	3308      	adds	r3, #8
 8007f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f98:	f8d7 4298 	ldr.w	r4, [r7, #664]	; 0x298
 8007f9c:	3401      	adds	r4, #1
 8007f9e:	00e4      	lsls	r4, r4, #3
 8007fa0:	463d      	mov	r5, r7
 8007fa2:	682d      	ldr	r5, [r5, #0]
 8007fa4:	442c      	add	r4, r5
 8007fa6:	f7f8 f961 	bl	800026c <__aeabi_dsub>
 8007faa:	4602      	mov	r2, r0
 8007fac:	460b      	mov	r3, r1
 8007fae:	e9c4 2300 	strd	r2, r3, [r4]
    Y2[iAcol + 2] -= signOOM;
 8007fb2:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8007fb6:	3302      	adds	r3, #2
 8007fb8:	00db      	lsls	r3, r3, #3
 8007fba:	463a      	mov	r2, r7
 8007fbc:	6812      	ldr	r2, [r2, #0]
 8007fbe:	4413      	add	r3, r2
 8007fc0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007fc4:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8007fc8:	3302      	adds	r3, #2
 8007fca:	00db      	lsls	r3, r3, #3
 8007fcc:	463a      	mov	r2, r7
 8007fce:	6812      	ldr	r2, [r2, #0]
 8007fd0:	18d4      	adds	r4, r2, r3
 8007fd2:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 8007fd6:	f7f8 f949 	bl	800026c <__aeabi_dsub>
 8007fda:	4602      	mov	r2, r0
 8007fdc:	460b      	mov	r3, r1
 8007fde:	e9c4 2300 	strd	r2, r3, [r4]
    iAcol += 3;
 8007fe2:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8007fe6:	3303      	adds	r3, #3
 8007fe8:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
  for (kk = 0; kk < 6; kk++) {
 8007fec:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8007ff0:	3301      	adds	r3, #1
 8007ff2:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8007ff6:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8007ffa:	2b05      	cmp	r3, #5
 8007ffc:	dda6      	ble.n	8007f4c <UTMeanCovSqrt_C2vgLQ4W+0x2a8>
  }

  if (rtIsNaN(OOM)) {
 8007ffe:	f107 0308 	add.w	r3, r7, #8
 8008002:	ed93 0b00 	vldr	d0, [r3]
 8008006:	f004 fbed 	bl	800c7e4 <rtIsNaN>
 800800a:	4603      	mov	r3, r0
 800800c:	2b00      	cmp	r3, #0
 800800e:	d006      	beq.n	800801e <UTMeanCovSqrt_C2vgLQ4W+0x37a>
    signOOM = OOM;
 8008010:	f107 0308 	add.w	r3, r7, #8
 8008014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008018:	e9c7 23a8 	strd	r2, r3, [r7, #672]	; 0x2a0
 800801c:	e029      	b.n	8008072 <UTMeanCovSqrt_C2vgLQ4W+0x3ce>
  } else if (OOM < 0.0) {
 800801e:	f107 0108 	add.w	r1, r7, #8
 8008022:	f04f 0200 	mov.w	r2, #0
 8008026:	f04f 0300 	mov.w	r3, #0
 800802a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800802e:	f7f8 fd47 	bl	8000ac0 <__aeabi_dcmplt>
 8008032:	4603      	mov	r3, r0
 8008034:	2b00      	cmp	r3, #0
 8008036:	d005      	beq.n	8008044 <UTMeanCovSqrt_C2vgLQ4W+0x3a0>
    signOOM = -1.0;
 8008038:	f04f 0200 	mov.w	r2, #0
 800803c:	4bce      	ldr	r3, [pc, #824]	; (8008378 <UTMeanCovSqrt_C2vgLQ4W+0x6d4>)
 800803e:	e9c7 23a8 	strd	r2, r3, [r7, #672]	; 0x2a0
 8008042:	e016      	b.n	8008072 <UTMeanCovSqrt_C2vgLQ4W+0x3ce>
  } else {
    signOOM = (OOM > 0.0);
 8008044:	f107 0108 	add.w	r1, r7, #8
 8008048:	f04f 0200 	mov.w	r2, #0
 800804c:	f04f 0300 	mov.w	r3, #0
 8008050:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008054:	f7f8 fd52 	bl	8000afc <__aeabi_dcmpgt>
 8008058:	4603      	mov	r3, r0
 800805a:	2b00      	cmp	r3, #0
 800805c:	d003      	beq.n	8008066 <UTMeanCovSqrt_C2vgLQ4W+0x3c2>
 800805e:	f04f 0200 	mov.w	r2, #0
 8008062:	4bc6      	ldr	r3, [pc, #792]	; (800837c <UTMeanCovSqrt_C2vgLQ4W+0x6d8>)
 8008064:	e003      	b.n	800806e <UTMeanCovSqrt_C2vgLQ4W+0x3ca>
 8008066:	f04f 0200 	mov.w	r2, #0
 800806a:	f04f 0300 	mov.w	r3, #0
 800806e:	e9c7 23a8 	strd	r2, r3, [r7, #672]	; 0x2a0
  }

  covWeights_0 = signOOM * covWeights[0];
 8008072:	f107 0310 	add.w	r3, r7, #16
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800807c:	e9d7 01a8 	ldrd	r0, r1, [r7, #672]	; 0x2a0
 8008080:	f7f8 faac 	bl	80005dc <__aeabi_dmul>
 8008084:	4602      	mov	r2, r0
 8008086:	460b      	mov	r3, r1
 8008088:	e9c7 23ac 	strd	r2, r3, [r7, #688]	; 0x2b0
  covWeights_1 = signOOM * covWeights[1];
 800808c:	f107 0310 	add.w	r3, r7, #16
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	3308      	adds	r3, #8
 8008094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008098:	e9d7 01a8 	ldrd	r0, r1, [r7, #672]	; 0x2a0
 800809c:	f7f8 fa9e 	bl	80005dc <__aeabi_dmul>
 80080a0:	4602      	mov	r2, r0
 80080a2:	460b      	mov	r3, r1
 80080a4:	e9c7 239a 	strd	r2, r3, [r7, #616]	; 0x268
  OOM *= signOOM;
 80080a8:	f107 0408 	add.w	r4, r7, #8
 80080ac:	f107 0108 	add.w	r1, r7, #8
 80080b0:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 80080b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80080b8:	f7f8 fa90 	bl	80005dc <__aeabi_dmul>
 80080bc:	4602      	mov	r2, r0
 80080be:	460b      	mov	r3, r1
 80080c0:	e9c4 2300 	strd	r2, r3, [r4]
  signOOM = sqrt(OOM);
 80080c4:	f107 0308 	add.w	r3, r7, #8
 80080c8:	ed93 0b00 	vldr	d0, [r3]
 80080cc:	f012 f81c 	bl	801a108 <sqrt>
 80080d0:	ed87 0ba8 	vstr	d0, [r7, #672]	; 0x2a0
  temp = sqrt(covWeights_1);
 80080d4:	ed97 0b9a 	vldr	d0, [r7, #616]	; 0x268
 80080d8:	f012 f816 	bl	801a108 <sqrt>
 80080dc:	eeb0 7a40 	vmov.f32	s14, s0
 80080e0:	eef0 7a60 	vmov.f32	s15, s1
 80080e4:	f107 0318 	add.w	r3, r7, #24
 80080e8:	ed83 7b00 	vstr	d7, [r3]
  kk = 0;
 80080ec:	2300      	movs	r3, #0
 80080ee:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
  for (iAcol = 0; iAcol < 3; iAcol++) {
 80080f2:	2300      	movs	r3, #0
 80080f4:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 80080f8:	e03c      	b.n	8008174 <UTMeanCovSqrt_C2vgLQ4W+0x4d0>
    i_1 = 0;
 80080fa:	2300      	movs	r3, #0
 80080fc:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
    for (i = 0; i < 6; i++) {
 8008100:	2300      	movs	r3, #0
 8008102:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 8008106:	e027      	b.n	8008158 <UTMeanCovSqrt_C2vgLQ4W+0x4b4>
      temp_0[i + kk] = Y2[i_1 + iAcol] * temp;
 8008108:	f8d7 2290 	ldr.w	r2, [r7, #656]	; 0x290
 800810c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008110:	4413      	add	r3, r2
 8008112:	00db      	lsls	r3, r3, #3
 8008114:	463a      	mov	r2, r7
 8008116:	6812      	ldr	r2, [r2, #0]
 8008118:	4413      	add	r3, r2
 800811a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800811e:	f107 0318 	add.w	r3, r7, #24
 8008122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008126:	f8d7 529c 	ldr.w	r5, [r7, #668]	; 0x29c
 800812a:	f8d7 428c 	ldr.w	r4, [r7, #652]	; 0x28c
 800812e:	442c      	add	r4, r5
 8008130:	f7f8 fa54 	bl	80005dc <__aeabi_dmul>
 8008134:	4602      	mov	r2, r0
 8008136:	460b      	mov	r3, r1
 8008138:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 800813c:	00e1      	lsls	r1, r4, #3
 800813e:	4401      	add	r1, r0
 8008140:	e9c1 2300 	strd	r2, r3, [r1]
      i_1 += 3;
 8008144:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8008148:	3303      	adds	r3, #3
 800814a:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
    for (i = 0; i < 6; i++) {
 800814e:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8008152:	3301      	adds	r3, #1
 8008154:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 8008158:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 800815c:	2b05      	cmp	r3, #5
 800815e:	ddd3      	ble.n	8008108 <UTMeanCovSqrt_C2vgLQ4W+0x464>
    }

    kk += 6;
 8008160:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8008164:	3306      	adds	r3, #6
 8008166:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
  for (iAcol = 0; iAcol < 3; iAcol++) {
 800816a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800816e:	3301      	adds	r3, #1
 8008170:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8008174:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008178:	2b02      	cmp	r3, #2
 800817a:	ddbe      	ble.n	80080fa <UTMeanCovSqrt_C2vgLQ4W+0x456>
  }

  qr_DvOBrgQi(temp_0, a__1, Sy);
 800817c:	f507 71e8 	add.w	r1, r7, #464	; 0x1d0
 8008180:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008184:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8008188:	4618      	mov	r0, r3
 800818a:	f002 ff43 	bl	800b014 <qr_DvOBrgQi>
  if (!rtIsNaN(covWeights_0)) {
 800818e:	ed97 0bac 	vldr	d0, [r7, #688]	; 0x2b0
 8008192:	f004 fb27 	bl	800c7e4 <rtIsNaN>
 8008196:	4603      	mov	r3, r0
 8008198:	2b00      	cmp	r3, #0
 800819a:	d125      	bne.n	80081e8 <UTMeanCovSqrt_C2vgLQ4W+0x544>
    if (covWeights_0 < 0.0) {
 800819c:	f04f 0200 	mov.w	r2, #0
 80081a0:	f04f 0300 	mov.w	r3, #0
 80081a4:	e9d7 01ac 	ldrd	r0, r1, [r7, #688]	; 0x2b0
 80081a8:	f7f8 fc8a 	bl	8000ac0 <__aeabi_dcmplt>
 80081ac:	4603      	mov	r3, r0
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d005      	beq.n	80081be <UTMeanCovSqrt_C2vgLQ4W+0x51a>
      covWeights_0 = -1.0;
 80081b2:	f04f 0200 	mov.w	r2, #0
 80081b6:	4b70      	ldr	r3, [pc, #448]	; (8008378 <UTMeanCovSqrt_C2vgLQ4W+0x6d4>)
 80081b8:	e9c7 23ac 	strd	r2, r3, [r7, #688]	; 0x2b0
 80081bc:	e014      	b.n	80081e8 <UTMeanCovSqrt_C2vgLQ4W+0x544>
    } else {
      covWeights_0 = (covWeights_0 > 0.0);
 80081be:	f04f 0200 	mov.w	r2, #0
 80081c2:	f04f 0300 	mov.w	r3, #0
 80081c6:	e9d7 01ac 	ldrd	r0, r1, [r7, #688]	; 0x2b0
 80081ca:	f7f8 fc97 	bl	8000afc <__aeabi_dcmpgt>
 80081ce:	4603      	mov	r3, r0
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d003      	beq.n	80081dc <UTMeanCovSqrt_C2vgLQ4W+0x538>
 80081d4:	f04f 0200 	mov.w	r2, #0
 80081d8:	4b68      	ldr	r3, [pc, #416]	; (800837c <UTMeanCovSqrt_C2vgLQ4W+0x6d8>)
 80081da:	e003      	b.n	80081e4 <UTMeanCovSqrt_C2vgLQ4W+0x540>
 80081dc:	f04f 0200 	mov.w	r2, #0
 80081e0:	f04f 0300 	mov.w	r3, #0
 80081e4:	e9c7 23ac 	strd	r2, r3, [r7, #688]	; 0x2b0
    }
  }

  if (covWeights_0 == 1.0) {
 80081e8:	f04f 0200 	mov.w	r2, #0
 80081ec:	4b63      	ldr	r3, [pc, #396]	; (800837c <UTMeanCovSqrt_C2vgLQ4W+0x6d8>)
 80081ee:	e9d7 01ac 	ldrd	r0, r1, [r7, #688]	; 0x2b0
 80081f2:	f7f8 fc5b 	bl	8000aac <__aeabi_dcmpeq>
 80081f6:	4603      	mov	r3, r0
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	f000 81bd 	beq.w	8008578 <UTMeanCovSqrt_C2vgLQ4W+0x8d4>
    for (iAcol = 0; iAcol < 2; iAcol++) {
 80081fe:	2300      	movs	r3, #0
 8008200:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8008204:	e011      	b.n	800822a <UTMeanCovSqrt_C2vgLQ4W+0x586>
      Sy[iAcol + 1] = 0.0;
 8008206:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800820a:	3301      	adds	r3, #1
 800820c:	00db      	lsls	r3, r3, #3
 800820e:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8008212:	18d1      	adds	r1, r2, r3
 8008214:	f04f 0200 	mov.w	r2, #0
 8008218:	f04f 0300 	mov.w	r3, #0
 800821c:	e9c1 2300 	strd	r2, r3, [r1]
    for (iAcol = 0; iAcol < 2; iAcol++) {
 8008220:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008224:	3301      	adds	r3, #1
 8008226:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 800822a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800822e:	2b01      	cmp	r3, #1
 8008230:	dde9      	ble.n	8008206 <UTMeanCovSqrt_C2vgLQ4W+0x562>
    }

    Sy[5] = 0.0;
 8008232:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8008236:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800823a:	f04f 0200 	mov.w	r2, #0
 800823e:	f04f 0300 	mov.w	r3, #0
 8008242:	e9c1 2300 	strd	r2, r3, [r1]
    c[2] = 0.0;
 8008246:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800824a:	f04f 0200 	mov.w	r2, #0
 800824e:	f04f 0300 	mov.w	r3, #0
 8008252:	e9c1 2304 	strd	r2, r3, [r1, #16]
    s[2] = 0.0;
 8008256:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800825a:	f04f 0200 	mov.w	r2, #0
 800825e:	f04f 0300 	mov.w	r3, #0
 8008262:	e9c1 2304 	strd	r2, r3, [r1, #16]
    rotate_LZ7ctbe0(Sy[0], scale, &c[0], &s[0], &Sy[0]);
 8008266:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 800826a:	ed93 7b00 	vldr	d7, [r3]
 800826e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8008272:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008276:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 800827a:	4618      	mov	r0, r3
 800827c:	ed97 1baa 	vldr	d1, [r7, #680]	; 0x2a8
 8008280:	eeb0 0a47 	vmov.f32	s0, s14
 8008284:	eef0 0a67 	vmov.f32	s1, s15
 8008288:	f004 f814 	bl	800c2b4 <rotate_LZ7ctbe0>
    temp = c[0] * absxk - s[0] * Sy[3];
 800828c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008290:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008294:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 8008298:	f7f8 f9a0 	bl	80005dc <__aeabi_dmul>
 800829c:	4602      	mov	r2, r0
 800829e:	460b      	mov	r3, r1
 80082a0:	4614      	mov	r4, r2
 80082a2:	461d      	mov	r5, r3
 80082a4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80082a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80082ac:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80082b0:	3318      	adds	r3, #24
 80082b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082b6:	f7f8 f991 	bl	80005dc <__aeabi_dmul>
 80082ba:	4602      	mov	r2, r0
 80082bc:	460b      	mov	r3, r1
 80082be:	4620      	mov	r0, r4
 80082c0:	4629      	mov	r1, r5
 80082c2:	f7f7 ffd3 	bl	800026c <__aeabi_dsub>
 80082c6:	4602      	mov	r2, r0
 80082c8:	460b      	mov	r3, r1
 80082ca:	f107 0118 	add.w	r1, r7, #24
 80082ce:	e9c1 2300 	strd	r2, r3, [r1]
    Sy[3] = c[0] * Sy[3] + s[0] * absxk;
 80082d2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80082d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80082da:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80082de:	3318      	adds	r3, #24
 80082e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082e4:	f7f8 f97a 	bl	80005dc <__aeabi_dmul>
 80082e8:	4602      	mov	r2, r0
 80082ea:	460b      	mov	r3, r1
 80082ec:	4690      	mov	r8, r2
 80082ee:	4699      	mov	r9, r3
 80082f0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80082f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80082f8:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 80082fc:	f7f8 f96e 	bl	80005dc <__aeabi_dmul>
 8008300:	4602      	mov	r2, r0
 8008302:	460b      	mov	r3, r1
 8008304:	4610      	mov	r0, r2
 8008306:	4619      	mov	r1, r3
 8008308:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 800830c:	f103 0418 	add.w	r4, r3, #24
 8008310:	4602      	mov	r2, r0
 8008312:	460b      	mov	r3, r1
 8008314:	4640      	mov	r0, r8
 8008316:	4649      	mov	r1, r9
 8008318:	f7f7 ffaa 	bl	8000270 <__adddf3>
 800831c:	4602      	mov	r2, r0
 800831e:	460b      	mov	r3, r1
 8008320:	e9c4 2300 	strd	r2, r3, [r4]
    rotate_LZ7ctbe0(Sy[4], temp, &c[1], &s[1], &Sy[4]);
 8008324:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8008328:	3320      	adds	r3, #32
 800832a:	ed93 7b00 	vldr	d7, [r3]
 800832e:	f107 0318 	add.w	r3, r7, #24
 8008332:	ed93 6b00 	vldr	d6, [r3]
 8008336:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 800833a:	f103 0220 	add.w	r2, r3, #32
 800833e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008342:	f103 0108 	add.w	r1, r3, #8
 8008346:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800834a:	3308      	adds	r3, #8
 800834c:	4618      	mov	r0, r3
 800834e:	eeb0 1a46 	vmov.f32	s2, s12
 8008352:	eef0 1a66 	vmov.f32	s3, s13
 8008356:	eeb0 0a47 	vmov.f32	s0, s14
 800835a:	eef0 0a67 	vmov.f32	s1, s15
 800835e:	f003 ffa9 	bl	800c2b4 <rotate_LZ7ctbe0>
    temp = b_t;
 8008362:	f107 0118 	add.w	r1, r7, #24
 8008366:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 800836a:	e9c1 2300 	strd	r2, r3, [r1]
    for (iAcol = 0; iAcol < 2; iAcol++) {
 800836e:	2300      	movs	r3, #0
 8008370:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8008374:	e06f      	b.n	8008456 <UTMeanCovSqrt_C2vgLQ4W+0x7b2>
 8008376:	bf00      	nop
 8008378:	bff00000 	.word	0xbff00000
 800837c:	3ff00000 	.word	0x3ff00000
      scale = s[iAcol] * temp;
 8008380:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8008384:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008388:	00db      	lsls	r3, r3, #3
 800838a:	4413      	add	r3, r2
 800838c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008390:	f107 0318 	add.w	r3, r7, #24
 8008394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008398:	f7f8 f920 	bl	80005dc <__aeabi_dmul>
 800839c:	4602      	mov	r2, r0
 800839e:	460b      	mov	r3, r1
 80083a0:	e9c7 23aa 	strd	r2, r3, [r7, #680]	; 0x2a8
      absxk = Sy[iAcol + 6];
 80083a4:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80083a8:	3306      	adds	r3, #6
 80083aa:	00db      	lsls	r3, r3, #3
 80083ac:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 80083b0:	4413      	add	r3, r2
 80083b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083b6:	e9c7 239e 	strd	r2, r3, [r7, #632]	; 0x278
      temp = c[iAcol] * temp - absxk * s[iAcol];
 80083ba:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80083be:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80083c2:	00db      	lsls	r3, r3, #3
 80083c4:	4413      	add	r3, r2
 80083c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80083ca:	f107 0318 	add.w	r3, r7, #24
 80083ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083d2:	f7f8 f903 	bl	80005dc <__aeabi_dmul>
 80083d6:	4602      	mov	r2, r0
 80083d8:	460b      	mov	r3, r1
 80083da:	4614      	mov	r4, r2
 80083dc:	461d      	mov	r5, r3
 80083de:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80083e2:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80083e6:	00db      	lsls	r3, r3, #3
 80083e8:	4413      	add	r3, r2
 80083ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80083ee:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 80083f2:	f7f8 f8f3 	bl	80005dc <__aeabi_dmul>
 80083f6:	4602      	mov	r2, r0
 80083f8:	460b      	mov	r3, r1
 80083fa:	4620      	mov	r0, r4
 80083fc:	4629      	mov	r1, r5
 80083fe:	f7f7 ff35 	bl	800026c <__aeabi_dsub>
 8008402:	4602      	mov	r2, r0
 8008404:	460b      	mov	r3, r1
 8008406:	f107 0118 	add.w	r1, r7, #24
 800840a:	e9c1 2300 	strd	r2, r3, [r1]
      Sy[iAcol + 6] = absxk * c[iAcol] + scale;
 800840e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8008412:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008416:	00db      	lsls	r3, r3, #3
 8008418:	4413      	add	r3, r2
 800841a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800841e:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 8008422:	f7f8 f8db 	bl	80005dc <__aeabi_dmul>
 8008426:	4602      	mov	r2, r0
 8008428:	460b      	mov	r3, r1
 800842a:	4610      	mov	r0, r2
 800842c:	4619      	mov	r1, r3
 800842e:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008432:	3306      	adds	r3, #6
 8008434:	00db      	lsls	r3, r3, #3
 8008436:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 800843a:	18d4      	adds	r4, r2, r3
 800843c:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 8008440:	f7f7 ff16 	bl	8000270 <__adddf3>
 8008444:	4602      	mov	r2, r0
 8008446:	460b      	mov	r3, r1
 8008448:	e9c4 2300 	strd	r2, r3, [r4]
    for (iAcol = 0; iAcol < 2; iAcol++) {
 800844c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008450:	3301      	adds	r3, #1
 8008452:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8008456:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800845a:	2b01      	cmp	r3, #1
 800845c:	dd90      	ble.n	8008380 <UTMeanCovSqrt_C2vgLQ4W+0x6dc>
    }

    rotate_LZ7ctbe0(Sy[8], temp, &c[2], &s[2], &Sy[8]);
 800845e:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8008462:	3340      	adds	r3, #64	; 0x40
 8008464:	ed93 7b00 	vldr	d7, [r3]
 8008468:	f107 0318 	add.w	r3, r7, #24
 800846c:	ed93 6b00 	vldr	d6, [r3]
 8008470:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8008474:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8008478:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800847c:	f103 0110 	add.w	r1, r3, #16
 8008480:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008484:	3310      	adds	r3, #16
 8008486:	4618      	mov	r0, r3
 8008488:	eeb0 1a46 	vmov.f32	s2, s12
 800848c:	eef0 1a66 	vmov.f32	s3, s13
 8008490:	eeb0 0a47 	vmov.f32	s0, s14
 8008494:	eef0 0a67 	vmov.f32	s1, s15
 8008498:	f003 ff0c 	bl	800c2b4 <rotate_LZ7ctbe0>
    kk = 0;
 800849c:	2300      	movs	r3, #0
 800849e:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
    for (iAcol = 0; iAcol < 3; iAcol++) {
 80084a2:	2300      	movs	r3, #0
 80084a4:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 80084a8:	e03d      	b.n	8008526 <UTMeanCovSqrt_C2vgLQ4W+0x882>
      Sy_0[kk] = Sy[iAcol];
 80084aa:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80084ae:	00db      	lsls	r3, r3, #3
 80084b0:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 80084b4:	4413      	add	r3, r2
 80084b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ba:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 80084be:	f8d7 128c 	ldr.w	r1, [r7, #652]	; 0x28c
 80084c2:	00c9      	lsls	r1, r1, #3
 80084c4:	4401      	add	r1, r0
 80084c6:	e9c1 2300 	strd	r2, r3, [r1]
      Sy_0[kk + 1] = Sy[iAcol + 3];
 80084ca:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80084ce:	3303      	adds	r3, #3
 80084d0:	00db      	lsls	r3, r3, #3
 80084d2:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 80084d6:	4413      	add	r3, r2
 80084d8:	f8d7 228c 	ldr.w	r2, [r7, #652]	; 0x28c
 80084dc:	1c51      	adds	r1, r2, #1
 80084de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084e2:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 80084e6:	00c9      	lsls	r1, r1, #3
 80084e8:	4401      	add	r1, r0
 80084ea:	e9c1 2300 	strd	r2, r3, [r1]
      Sy_0[kk + 2] = Sy[iAcol + 6];
 80084ee:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80084f2:	3306      	adds	r3, #6
 80084f4:	00db      	lsls	r3, r3, #3
 80084f6:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 80084fa:	4413      	add	r3, r2
 80084fc:	f8d7 228c 	ldr.w	r2, [r7, #652]	; 0x28c
 8008500:	1c91      	adds	r1, r2, #2
 8008502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008506:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 800850a:	00c9      	lsls	r1, r1, #3
 800850c:	4401      	add	r1, r0
 800850e:	e9c1 2300 	strd	r2, r3, [r1]
      kk += 3;
 8008512:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8008516:	3303      	adds	r3, #3
 8008518:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
    for (iAcol = 0; iAcol < 3; iAcol++) {
 800851c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008520:	3301      	adds	r3, #1
 8008522:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8008526:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800852a:	2b02      	cmp	r3, #2
 800852c:	ddbd      	ble.n	80084aa <UTMeanCovSqrt_C2vgLQ4W+0x806>
    }

    for (kk = 0; kk < 9; kk++) {
 800852e:	2300      	movs	r3, #0
 8008530:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8008534:	e01a      	b.n	800856c <UTMeanCovSqrt_C2vgLQ4W+0x8c8>
      Sy[kk] = signOOM * Sy_0[kk];
 8008536:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800853a:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 800853e:	00db      	lsls	r3, r3, #3
 8008540:	4413      	add	r3, r2
 8008542:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008546:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 800854a:	00db      	lsls	r3, r3, #3
 800854c:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8008550:	18d4      	adds	r4, r2, r3
 8008552:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 8008556:	f7f8 f841 	bl	80005dc <__aeabi_dmul>
 800855a:	4602      	mov	r2, r0
 800855c:	460b      	mov	r3, r1
 800855e:	e9c4 2300 	strd	r2, r3, [r4]
    for (kk = 0; kk < 9; kk++) {
 8008562:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8008566:	3301      	adds	r3, #1
 8008568:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 800856c:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8008570:	2b08      	cmp	r3, #8
 8008572:	dde0      	ble.n	8008536 <UTMeanCovSqrt_C2vgLQ4W+0x892>
 8008574:	f000 bf6e 	b.w	8009454 <UTMeanCovSqrt_C2vgLQ4W+0x17b0>
    }
  } else {
    boolean_T errorCondition;
    boolean_T guard1 = false;
 8008578:	2300      	movs	r3, #0
 800857a:	f887 328a 	strb.w	r3, [r7, #650]	; 0x28a
    for (iAcol = 0; iAcol < 2; iAcol++) {
 800857e:	2300      	movs	r3, #0
 8008580:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8008584:	e011      	b.n	80085aa <UTMeanCovSqrt_C2vgLQ4W+0x906>
      Sy[iAcol + 1] = 0.0;
 8008586:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800858a:	3301      	adds	r3, #1
 800858c:	00db      	lsls	r3, r3, #3
 800858e:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8008592:	18d1      	adds	r1, r2, r3
 8008594:	f04f 0200 	mov.w	r2, #0
 8008598:	f04f 0300 	mov.w	r3, #0
 800859c:	e9c1 2300 	strd	r2, r3, [r1]
    for (iAcol = 0; iAcol < 2; iAcol++) {
 80085a0:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80085a4:	3301      	adds	r3, #1
 80085a6:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 80085aa:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80085ae:	2b01      	cmp	r3, #1
 80085b0:	dde9      	ble.n	8008586 <UTMeanCovSqrt_C2vgLQ4W+0x8e2>
    }

    Sy[5] = 0.0;
 80085b2:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80085b6:	f103 0128 	add.w	r1, r3, #40	; 0x28
 80085ba:	f04f 0200 	mov.w	r2, #0
 80085be:	f04f 0300 	mov.w	r3, #0
 80085c2:	e9c1 2300 	strd	r2, r3, [r1]
    errorCondition = (Sy[0] == 0.0);
 80085c6:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80085ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80085ce:	2301      	movs	r3, #1
 80085d0:	461c      	mov	r4, r3
 80085d2:	f04f 0200 	mov.w	r2, #0
 80085d6:	f04f 0300 	mov.w	r3, #0
 80085da:	f7f8 fa67 	bl	8000aac <__aeabi_dcmpeq>
 80085de:	4603      	mov	r3, r0
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d101      	bne.n	80085e8 <UTMeanCovSqrt_C2vgLQ4W+0x944>
 80085e4:	2300      	movs	r3, #0
 80085e6:	461c      	mov	r4, r3
 80085e8:	b2e3      	uxtb	r3, r4
 80085ea:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
    if (!errorCondition) {
 80085ee:	f897 328b 	ldrb.w	r3, [r7, #651]	; 0x28b
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d114      	bne.n	8008620 <UTMeanCovSqrt_C2vgLQ4W+0x97c>
      errorCondition = (Sy[4] == 0.0);
 80085f6:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80085fa:	3320      	adds	r3, #32
 80085fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008600:	2301      	movs	r3, #1
 8008602:	461c      	mov	r4, r3
 8008604:	f04f 0200 	mov.w	r2, #0
 8008608:	f04f 0300 	mov.w	r3, #0
 800860c:	f7f8 fa4e 	bl	8000aac <__aeabi_dcmpeq>
 8008610:	4603      	mov	r3, r0
 8008612:	2b00      	cmp	r3, #0
 8008614:	d101      	bne.n	800861a <UTMeanCovSqrt_C2vgLQ4W+0x976>
 8008616:	2300      	movs	r3, #0
 8008618:	461c      	mov	r4, r3
 800861a:	b2e3      	uxtb	r3, r4
 800861c:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
    }

    if (!errorCondition) {
 8008620:	f897 328b 	ldrb.w	r3, [r7, #651]	; 0x28b
 8008624:	2b00      	cmp	r3, #0
 8008626:	d114      	bne.n	8008652 <UTMeanCovSqrt_C2vgLQ4W+0x9ae>
      errorCondition = (Sy[8] == 0.0);
 8008628:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 800862c:	3340      	adds	r3, #64	; 0x40
 800862e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008632:	2301      	movs	r3, #1
 8008634:	461c      	mov	r4, r3
 8008636:	f04f 0200 	mov.w	r2, #0
 800863a:	f04f 0300 	mov.w	r3, #0
 800863e:	f7f8 fa35 	bl	8000aac <__aeabi_dcmpeq>
 8008642:	4603      	mov	r3, r0
 8008644:	2b00      	cmp	r3, #0
 8008646:	d101      	bne.n	800864c <UTMeanCovSqrt_C2vgLQ4W+0x9a8>
 8008648:	2300      	movs	r3, #0
 800864a:	461c      	mov	r4, r3
 800864c:	b2e3      	uxtb	r3, r4
 800864e:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
    }

    guard1 = false;
 8008652:	2300      	movs	r3, #0
 8008654:	f887 328a 	strb.w	r3, [r7, #650]	; 0x28a
    if (errorCondition) {
 8008658:	f897 328b 	ldrb.w	r3, [r7, #651]	; 0x28b
 800865c:	2b00      	cmp	r3, #0
 800865e:	d003      	beq.n	8008668 <UTMeanCovSqrt_C2vgLQ4W+0x9c4>
      guard1 = true;
 8008660:	2301      	movs	r3, #1
 8008662:	f887 328a 	strb.w	r3, [r7, #650]	; 0x28a
 8008666:	e394      	b.n	8008d92 <UTMeanCovSqrt_C2vgLQ4W+0x10ee>
    } else {
      x[2] = b_t;
 8008668:	f107 0120 	add.w	r1, r7, #32
 800866c:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 8008670:	e9c1 2304 	strd	r2, r3, [r1, #16]
      x[0] = scale / Sy[0];
 8008674:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8008678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800867c:	e9d7 01aa 	ldrd	r0, r1, [r7, #680]	; 0x2a8
 8008680:	f7f8 f8d6 	bl	8000830 <__aeabi_ddiv>
 8008684:	4602      	mov	r2, r0
 8008686:	460b      	mov	r3, r1
 8008688:	f107 0120 	add.w	r1, r7, #32
 800868c:	e9c1 2300 	strd	r2, r3, [r1]
      x[1] = (absxk - x[0] * Sy[3]) / Sy[4];
 8008690:	f107 0320 	add.w	r3, r7, #32
 8008694:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008698:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 800869c:	3318      	adds	r3, #24
 800869e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086a2:	f7f7 ff9b 	bl	80005dc <__aeabi_dmul>
 80086a6:	4602      	mov	r2, r0
 80086a8:	460b      	mov	r3, r1
 80086aa:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 80086ae:	f7f7 fddd 	bl	800026c <__aeabi_dsub>
 80086b2:	4602      	mov	r2, r0
 80086b4:	460b      	mov	r3, r1
 80086b6:	4610      	mov	r0, r2
 80086b8:	4619      	mov	r1, r3
 80086ba:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80086be:	3320      	adds	r3, #32
 80086c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086c4:	f7f8 f8b4 	bl	8000830 <__aeabi_ddiv>
 80086c8:	4602      	mov	r2, r0
 80086ca:	460b      	mov	r3, r1
 80086cc:	f107 0120 	add.w	r1, r7, #32
 80086d0:	e9c1 2302 	strd	r2, r3, [r1, #8]
      temp = b_t;
 80086d4:	f107 0118 	add.w	r1, r7, #24
 80086d8:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 80086dc:	e9c1 2300 	strd	r2, r3, [r1]
      for (kk = 0; kk < 2; kk++) {
 80086e0:	2300      	movs	r3, #0
 80086e2:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 80086e6:	e027      	b.n	8008738 <UTMeanCovSqrt_C2vgLQ4W+0xa94>
        temp -= Sy[kk + 6] * x[kk];
 80086e8:	f107 0318 	add.w	r3, r7, #24
 80086ec:	e9d3 4500 	ldrd	r4, r5, [r3]
 80086f0:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80086f4:	3306      	adds	r3, #6
 80086f6:	00db      	lsls	r3, r3, #3
 80086f8:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 80086fc:	4413      	add	r3, r2
 80086fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008702:	f107 0220 	add.w	r2, r7, #32
 8008706:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 800870a:	00db      	lsls	r3, r3, #3
 800870c:	4413      	add	r3, r2
 800870e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008712:	f7f7 ff63 	bl	80005dc <__aeabi_dmul>
 8008716:	4602      	mov	r2, r0
 8008718:	460b      	mov	r3, r1
 800871a:	4620      	mov	r0, r4
 800871c:	4629      	mov	r1, r5
 800871e:	f7f7 fda5 	bl	800026c <__aeabi_dsub>
 8008722:	4602      	mov	r2, r0
 8008724:	460b      	mov	r3, r1
 8008726:	f107 0118 	add.w	r1, r7, #24
 800872a:	e9c1 2300 	strd	r2, r3, [r1]
      for (kk = 0; kk < 2; kk++) {
 800872e:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8008732:	3301      	adds	r3, #1
 8008734:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8008738:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 800873c:	2b01      	cmp	r3, #1
 800873e:	ddd3      	ble.n	80086e8 <UTMeanCovSqrt_C2vgLQ4W+0xa44>
      }

      x[2] = temp / Sy[8];
 8008740:	f107 0318 	add.w	r3, r7, #24
 8008744:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008748:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 800874c:	3340      	adds	r3, #64	; 0x40
 800874e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008752:	f7f8 f86d 	bl	8000830 <__aeabi_ddiv>
 8008756:	4602      	mov	r2, r0
 8008758:	460b      	mov	r3, r1
 800875a:	f107 0120 	add.w	r1, r7, #32
 800875e:	e9c1 2304 	strd	r2, r3, [r1, #16]
      scale = 3.3121686421112381E-170;
 8008762:	f04f 0200 	mov.w	r2, #0
 8008766:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 800876a:	e9c7 23aa 	strd	r2, r3, [r7, #680]	; 0x2a8
      absxk = fabs(x[0]);
 800876e:	f107 0320 	add.w	r3, r7, #32
 8008772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008776:	4611      	mov	r1, r2
 8008778:	f8c7 1278 	str.w	r1, [r7, #632]	; 0x278
 800877c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008780:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
      if (absxk > 3.3121686421112381E-170) {
 8008784:	f04f 0200 	mov.w	r2, #0
 8008788:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 800878c:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 8008790:	f7f8 f9b4 	bl	8000afc <__aeabi_dcmpgt>
 8008794:	4603      	mov	r3, r0
 8008796:	2b00      	cmp	r3, #0
 8008798:	d00b      	beq.n	80087b2 <UTMeanCovSqrt_C2vgLQ4W+0xb0e>
        temp = 1.0;
 800879a:	f107 0118 	add.w	r1, r7, #24
 800879e:	f04f 0200 	mov.w	r2, #0
 80087a2:	4b85      	ldr	r3, [pc, #532]	; (80089b8 <UTMeanCovSqrt_C2vgLQ4W+0xd14>)
 80087a4:	e9c1 2300 	strd	r2, r3, [r1]
        scale = absxk;
 80087a8:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 80087ac:	e9c7 23aa 	strd	r2, r3, [r7, #680]	; 0x2a8
 80087b0:	e017      	b.n	80087e2 <UTMeanCovSqrt_C2vgLQ4W+0xb3e>
      } else {
        b_t = absxk / 3.3121686421112381E-170;
 80087b2:	f04f 0200 	mov.w	r2, #0
 80087b6:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 80087ba:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 80087be:	f7f8 f837 	bl	8000830 <__aeabi_ddiv>
 80087c2:	4602      	mov	r2, r0
 80087c4:	460b      	mov	r3, r1
 80087c6:	e9c7 239c 	strd	r2, r3, [r7, #624]	; 0x270
        temp = b_t * b_t;
 80087ca:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 80087ce:	e9d7 019c 	ldrd	r0, r1, [r7, #624]	; 0x270
 80087d2:	f7f7 ff03 	bl	80005dc <__aeabi_dmul>
 80087d6:	4602      	mov	r2, r0
 80087d8:	460b      	mov	r3, r1
 80087da:	f107 0118 	add.w	r1, r7, #24
 80087de:	e9c1 2300 	strd	r2, r3, [r1]
      }

      absxk = fabs(x[1]);
 80087e2:	f107 0320 	add.w	r3, r7, #32
 80087e6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80087ea:	4611      	mov	r1, r2
 80087ec:	f8c7 1278 	str.w	r1, [r7, #632]	; 0x278
 80087f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80087f4:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
      if (absxk > scale) {
 80087f8:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 80087fc:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 8008800:	f7f8 f97c 	bl	8000afc <__aeabi_dcmpgt>
 8008804:	4603      	mov	r3, r0
 8008806:	2b00      	cmp	r3, #0
 8008808:	d02d      	beq.n	8008866 <UTMeanCovSqrt_C2vgLQ4W+0xbc2>
        b_t = scale / absxk;
 800880a:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 800880e:	e9d7 01aa 	ldrd	r0, r1, [r7, #680]	; 0x2a8
 8008812:	f7f8 f80d 	bl	8000830 <__aeabi_ddiv>
 8008816:	4602      	mov	r2, r0
 8008818:	460b      	mov	r3, r1
 800881a:	e9c7 239c 	strd	r2, r3, [r7, #624]	; 0x270
        temp = temp * b_t * b_t + 1.0;
 800881e:	f107 0318 	add.w	r3, r7, #24
 8008822:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008826:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 800882a:	f7f7 fed7 	bl	80005dc <__aeabi_dmul>
 800882e:	4602      	mov	r2, r0
 8008830:	460b      	mov	r3, r1
 8008832:	4610      	mov	r0, r2
 8008834:	4619      	mov	r1, r3
 8008836:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 800883a:	f7f7 fecf 	bl	80005dc <__aeabi_dmul>
 800883e:	4602      	mov	r2, r0
 8008840:	460b      	mov	r3, r1
 8008842:	4610      	mov	r0, r2
 8008844:	4619      	mov	r1, r3
 8008846:	f04f 0200 	mov.w	r2, #0
 800884a:	4b5b      	ldr	r3, [pc, #364]	; (80089b8 <UTMeanCovSqrt_C2vgLQ4W+0xd14>)
 800884c:	f7f7 fd10 	bl	8000270 <__adddf3>
 8008850:	4602      	mov	r2, r0
 8008852:	460b      	mov	r3, r1
 8008854:	f107 0118 	add.w	r1, r7, #24
 8008858:	e9c1 2300 	strd	r2, r3, [r1]
        scale = absxk;
 800885c:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 8008860:	e9c7 23aa 	strd	r2, r3, [r7, #680]	; 0x2a8
 8008864:	e01f      	b.n	80088a6 <UTMeanCovSqrt_C2vgLQ4W+0xc02>
      } else {
        b_t = absxk / scale;
 8008866:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 800886a:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 800886e:	f7f7 ffdf 	bl	8000830 <__aeabi_ddiv>
 8008872:	4602      	mov	r2, r0
 8008874:	460b      	mov	r3, r1
 8008876:	e9c7 239c 	strd	r2, r3, [r7, #624]	; 0x270
        temp += b_t * b_t;
 800887a:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 800887e:	e9d7 019c 	ldrd	r0, r1, [r7, #624]	; 0x270
 8008882:	f7f7 feab 	bl	80005dc <__aeabi_dmul>
 8008886:	4602      	mov	r2, r0
 8008888:	460b      	mov	r3, r1
 800888a:	4610      	mov	r0, r2
 800888c:	4619      	mov	r1, r3
 800888e:	f107 0318 	add.w	r3, r7, #24
 8008892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008896:	f7f7 fceb 	bl	8000270 <__adddf3>
 800889a:	4602      	mov	r2, r0
 800889c:	460b      	mov	r3, r1
 800889e:	f107 0118 	add.w	r1, r7, #24
 80088a2:	e9c1 2300 	strd	r2, r3, [r1]
      }

      absxk = fabs(x[2]);
 80088a6:	f107 0320 	add.w	r3, r7, #32
 80088aa:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80088ae:	4611      	mov	r1, r2
 80088b0:	f8c7 1278 	str.w	r1, [r7, #632]	; 0x278
 80088b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80088b8:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
      if (absxk > scale) {
 80088bc:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 80088c0:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 80088c4:	f7f8 f91a 	bl	8000afc <__aeabi_dcmpgt>
 80088c8:	4603      	mov	r3, r0
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d02d      	beq.n	800892a <UTMeanCovSqrt_C2vgLQ4W+0xc86>
        b_t = scale / absxk;
 80088ce:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 80088d2:	e9d7 01aa 	ldrd	r0, r1, [r7, #680]	; 0x2a8
 80088d6:	f7f7 ffab 	bl	8000830 <__aeabi_ddiv>
 80088da:	4602      	mov	r2, r0
 80088dc:	460b      	mov	r3, r1
 80088de:	e9c7 239c 	strd	r2, r3, [r7, #624]	; 0x270
        temp = temp * b_t * b_t + 1.0;
 80088e2:	f107 0318 	add.w	r3, r7, #24
 80088e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80088ea:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 80088ee:	f7f7 fe75 	bl	80005dc <__aeabi_dmul>
 80088f2:	4602      	mov	r2, r0
 80088f4:	460b      	mov	r3, r1
 80088f6:	4610      	mov	r0, r2
 80088f8:	4619      	mov	r1, r3
 80088fa:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 80088fe:	f7f7 fe6d 	bl	80005dc <__aeabi_dmul>
 8008902:	4602      	mov	r2, r0
 8008904:	460b      	mov	r3, r1
 8008906:	4610      	mov	r0, r2
 8008908:	4619      	mov	r1, r3
 800890a:	f04f 0200 	mov.w	r2, #0
 800890e:	4b2a      	ldr	r3, [pc, #168]	; (80089b8 <UTMeanCovSqrt_C2vgLQ4W+0xd14>)
 8008910:	f7f7 fcae 	bl	8000270 <__adddf3>
 8008914:	4602      	mov	r2, r0
 8008916:	460b      	mov	r3, r1
 8008918:	f107 0118 	add.w	r1, r7, #24
 800891c:	e9c1 2300 	strd	r2, r3, [r1]
        scale = absxk;
 8008920:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 8008924:	e9c7 23aa 	strd	r2, r3, [r7, #680]	; 0x2a8
 8008928:	e01f      	b.n	800896a <UTMeanCovSqrt_C2vgLQ4W+0xcc6>
      } else {
        b_t = absxk / scale;
 800892a:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 800892e:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 8008932:	f7f7 ff7d 	bl	8000830 <__aeabi_ddiv>
 8008936:	4602      	mov	r2, r0
 8008938:	460b      	mov	r3, r1
 800893a:	e9c7 239c 	strd	r2, r3, [r7, #624]	; 0x270
        temp += b_t * b_t;
 800893e:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 8008942:	e9d7 019c 	ldrd	r0, r1, [r7, #624]	; 0x270
 8008946:	f7f7 fe49 	bl	80005dc <__aeabi_dmul>
 800894a:	4602      	mov	r2, r0
 800894c:	460b      	mov	r3, r1
 800894e:	4610      	mov	r0, r2
 8008950:	4619      	mov	r1, r3
 8008952:	f107 0318 	add.w	r3, r7, #24
 8008956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800895a:	f7f7 fc89 	bl	8000270 <__adddf3>
 800895e:	4602      	mov	r2, r0
 8008960:	460b      	mov	r3, r1
 8008962:	f107 0118 	add.w	r1, r7, #24
 8008966:	e9c1 2300 	strd	r2, r3, [r1]
      }

      temp = scale * sqrt(temp);
 800896a:	f107 0318 	add.w	r3, r7, #24
 800896e:	ed93 7b00 	vldr	d7, [r3]
 8008972:	eeb0 0a47 	vmov.f32	s0, s14
 8008976:	eef0 0a67 	vmov.f32	s1, s15
 800897a:	f011 fbc5 	bl	801a108 <sqrt>
 800897e:	ec51 0b10 	vmov	r0, r1, d0
 8008982:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 8008986:	f7f7 fe29 	bl	80005dc <__aeabi_dmul>
 800898a:	4602      	mov	r2, r0
 800898c:	460b      	mov	r3, r1
 800898e:	f107 0118 	add.w	r1, r7, #24
 8008992:	e9c1 2300 	strd	r2, r3, [r1]
      if (temp >= 1.0) {
 8008996:	f107 0318 	add.w	r3, r7, #24
 800899a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800899e:	f04f 0200 	mov.w	r2, #0
 80089a2:	4b05      	ldr	r3, [pc, #20]	; (80089b8 <UTMeanCovSqrt_C2vgLQ4W+0xd14>)
 80089a4:	f7f8 f8a0 	bl	8000ae8 <__aeabi_dcmpge>
 80089a8:	4603      	mov	r3, r0
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d006      	beq.n	80089bc <UTMeanCovSqrt_C2vgLQ4W+0xd18>
        guard1 = true;
 80089ae:	2301      	movs	r3, #1
 80089b0:	f887 328a 	strb.w	r3, [r7, #650]	; 0x28a
 80089b4:	e1ed      	b.n	8008d92 <UTMeanCovSqrt_C2vgLQ4W+0x10ee>
 80089b6:	bf00      	nop
 80089b8:	3ff00000 	.word	0x3ff00000
      } else {
        rotate_LZ7ctbe0(sqrt(1.0 - temp * temp), x[2], &c[2], &s[2], &temp);
 80089bc:	f107 0318 	add.w	r3, r7, #24
 80089c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80089c4:	f107 0318 	add.w	r3, r7, #24
 80089c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089cc:	f7f7 fe06 	bl	80005dc <__aeabi_dmul>
 80089d0:	4602      	mov	r2, r0
 80089d2:	460b      	mov	r3, r1
 80089d4:	f04f 0000 	mov.w	r0, #0
 80089d8:	49b4      	ldr	r1, [pc, #720]	; (8008cac <UTMeanCovSqrt_C2vgLQ4W+0x1008>)
 80089da:	f7f7 fc47 	bl	800026c <__aeabi_dsub>
 80089de:	4602      	mov	r2, r0
 80089e0:	460b      	mov	r3, r1
 80089e2:	ec43 2b17 	vmov	d7, r2, r3
 80089e6:	eeb0 0a47 	vmov.f32	s0, s14
 80089ea:	eef0 0a67 	vmov.f32	s1, s15
 80089ee:	f011 fb8b 	bl	801a108 <sqrt>
 80089f2:	eeb0 6a40 	vmov.f32	s12, s0
 80089f6:	eef0 6a60 	vmov.f32	s13, s1
 80089fa:	f107 0320 	add.w	r3, r7, #32
 80089fe:	ed93 7b04 	vldr	d7, [r3, #16]
 8008a02:	f107 0218 	add.w	r2, r7, #24
 8008a06:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008a0a:	f103 0110 	add.w	r1, r3, #16
 8008a0e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008a12:	3310      	adds	r3, #16
 8008a14:	4618      	mov	r0, r3
 8008a16:	eeb0 1a47 	vmov.f32	s2, s14
 8008a1a:	eef0 1a67 	vmov.f32	s3, s15
 8008a1e:	eeb0 0a46 	vmov.f32	s0, s12
 8008a22:	eef0 0a66 	vmov.f32	s1, s13
 8008a26:	f003 fc45 	bl	800c2b4 <rotate_LZ7ctbe0>
        x[2] = 0.0;
 8008a2a:	f107 0120 	add.w	r1, r7, #32
 8008a2e:	f04f 0200 	mov.w	r2, #0
 8008a32:	f04f 0300 	mov.w	r3, #0
 8008a36:	e9c1 2304 	strd	r2, r3, [r1, #16]
        rotate_LZ7ctbe0(temp, x[1], &c[1], &s[1], &temp);
 8008a3a:	f107 0318 	add.w	r3, r7, #24
 8008a3e:	ed93 7b00 	vldr	d7, [r3]
 8008a42:	f107 0320 	add.w	r3, r7, #32
 8008a46:	ed93 6b02 	vldr	d6, [r3, #8]
 8008a4a:	f107 0218 	add.w	r2, r7, #24
 8008a4e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008a52:	f103 0108 	add.w	r1, r3, #8
 8008a56:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008a5a:	3308      	adds	r3, #8
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	eeb0 1a46 	vmov.f32	s2, s12
 8008a62:	eef0 1a66 	vmov.f32	s3, s13
 8008a66:	eeb0 0a47 	vmov.f32	s0, s14
 8008a6a:	eef0 0a67 	vmov.f32	s1, s15
 8008a6e:	f003 fc21 	bl	800c2b4 <rotate_LZ7ctbe0>
        x[1] = 0.0;
 8008a72:	f107 0120 	add.w	r1, r7, #32
 8008a76:	f04f 0200 	mov.w	r2, #0
 8008a7a:	f04f 0300 	mov.w	r3, #0
 8008a7e:	e9c1 2302 	strd	r2, r3, [r1, #8]
        rotate_LZ7ctbe0(temp, x[0], &c[0], &s[0], &temp);
 8008a82:	f107 0318 	add.w	r3, r7, #24
 8008a86:	ed93 7b00 	vldr	d7, [r3]
 8008a8a:	f107 0320 	add.w	r3, r7, #32
 8008a8e:	ed93 6b00 	vldr	d6, [r3]
 8008a92:	f107 0218 	add.w	r2, r7, #24
 8008a96:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8008a9a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	eeb0 1a46 	vmov.f32	s2, s12
 8008aa4:	eef0 1a66 	vmov.f32	s3, s13
 8008aa8:	eeb0 0a47 	vmov.f32	s0, s14
 8008aac:	eef0 0a67 	vmov.f32	s1, s15
 8008ab0:	f003 fc00 	bl	800c2b4 <rotate_LZ7ctbe0>
        x[0] = 0.0;
 8008ab4:	f107 0120 	add.w	r1, r7, #32
 8008ab8:	f04f 0200 	mov.w	r2, #0
 8008abc:	f04f 0300 	mov.w	r3, #0
 8008ac0:	e9c1 2300 	strd	r2, r3, [r1]
        for (iAcol = 0; iAcol + 1 > 0; iAcol--) {
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8008aca:	e072      	b.n	8008bb2 <UTMeanCovSqrt_C2vgLQ4W+0xf0e>
          temp = s[iAcol] * Sy[iAcol];
 8008acc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8008ad0:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008ad4:	00db      	lsls	r3, r3, #3
 8008ad6:	4413      	add	r3, r2
 8008ad8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008adc:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008ae0:	00db      	lsls	r3, r3, #3
 8008ae2:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8008ae6:	4413      	add	r3, r2
 8008ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aec:	f7f7 fd76 	bl	80005dc <__aeabi_dmul>
 8008af0:	4602      	mov	r2, r0
 8008af2:	460b      	mov	r3, r1
 8008af4:	f107 0118 	add.w	r1, r7, #24
 8008af8:	e9c1 2300 	strd	r2, r3, [r1]
          Sy[iAcol] = c[iAcol] * Sy[iAcol] - s[iAcol] * x[0];
 8008afc:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8008b00:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008b04:	00db      	lsls	r3, r3, #3
 8008b06:	4413      	add	r3, r2
 8008b08:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008b0c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008b10:	00db      	lsls	r3, r3, #3
 8008b12:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8008b16:	4413      	add	r3, r2
 8008b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b1c:	f7f7 fd5e 	bl	80005dc <__aeabi_dmul>
 8008b20:	4602      	mov	r2, r0
 8008b22:	460b      	mov	r3, r1
 8008b24:	4690      	mov	r8, r2
 8008b26:	4699      	mov	r9, r3
 8008b28:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8008b2c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008b30:	00db      	lsls	r3, r3, #3
 8008b32:	4413      	add	r3, r2
 8008b34:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008b38:	f107 0320 	add.w	r3, r7, #32
 8008b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b40:	f7f7 fd4c 	bl	80005dc <__aeabi_dmul>
 8008b44:	4602      	mov	r2, r0
 8008b46:	460b      	mov	r3, r1
 8008b48:	4610      	mov	r0, r2
 8008b4a:	4619      	mov	r1, r3
 8008b4c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008b50:	00db      	lsls	r3, r3, #3
 8008b52:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8008b56:	18d4      	adds	r4, r2, r3
 8008b58:	4602      	mov	r2, r0
 8008b5a:	460b      	mov	r3, r1
 8008b5c:	4640      	mov	r0, r8
 8008b5e:	4649      	mov	r1, r9
 8008b60:	f7f7 fb84 	bl	800026c <__aeabi_dsub>
 8008b64:	4602      	mov	r2, r0
 8008b66:	460b      	mov	r3, r1
 8008b68:	e9c4 2300 	strd	r2, r3, [r4]
          x[0] = c[iAcol] * x[0] + temp;
 8008b6c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8008b70:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008b74:	00db      	lsls	r3, r3, #3
 8008b76:	4413      	add	r3, r2
 8008b78:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008b7c:	f107 0320 	add.w	r3, r7, #32
 8008b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b84:	f7f7 fd2a 	bl	80005dc <__aeabi_dmul>
 8008b88:	4602      	mov	r2, r0
 8008b8a:	460b      	mov	r3, r1
 8008b8c:	4610      	mov	r0, r2
 8008b8e:	4619      	mov	r1, r3
 8008b90:	f107 0318 	add.w	r3, r7, #24
 8008b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b98:	f7f7 fb6a 	bl	8000270 <__adddf3>
 8008b9c:	4602      	mov	r2, r0
 8008b9e:	460b      	mov	r3, r1
 8008ba0:	f107 0120 	add.w	r1, r7, #32
 8008ba4:	e9c1 2300 	strd	r2, r3, [r1]
        for (iAcol = 0; iAcol + 1 > 0; iAcol--) {
 8008ba8:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008bac:	3b01      	subs	r3, #1
 8008bae:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8008bb2:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	da88      	bge.n	8008acc <UTMeanCovSqrt_C2vgLQ4W+0xe28>
        }

        for (iAcol = 1; iAcol + 1 > 0; iAcol--) {
 8008bba:	2301      	movs	r3, #1
 8008bbc:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8008bc0:	e06c      	b.n	8008c9c <UTMeanCovSqrt_C2vgLQ4W+0xff8>
          absxk = Sy[iAcol + 3];
 8008bc2:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008bc6:	3303      	adds	r3, #3
 8008bc8:	00db      	lsls	r3, r3, #3
 8008bca:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8008bce:	4413      	add	r3, r2
 8008bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bd4:	e9c7 239e 	strd	r2, r3, [r7, #632]	; 0x278
          Sy[iAcol + 3] = absxk * c[iAcol] - s[iAcol] * x[1];
 8008bd8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8008bdc:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008be0:	00db      	lsls	r3, r3, #3
 8008be2:	4413      	add	r3, r2
 8008be4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008be8:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 8008bec:	f7f7 fcf6 	bl	80005dc <__aeabi_dmul>
 8008bf0:	4602      	mov	r2, r0
 8008bf2:	460b      	mov	r3, r1
 8008bf4:	4690      	mov	r8, r2
 8008bf6:	4699      	mov	r9, r3
 8008bf8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8008bfc:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008c00:	00db      	lsls	r3, r3, #3
 8008c02:	4413      	add	r3, r2
 8008c04:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008c08:	f107 0320 	add.w	r3, r7, #32
 8008c0c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8008c10:	f7f7 fce4 	bl	80005dc <__aeabi_dmul>
 8008c14:	4602      	mov	r2, r0
 8008c16:	460b      	mov	r3, r1
 8008c18:	4610      	mov	r0, r2
 8008c1a:	4619      	mov	r1, r3
 8008c1c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008c20:	3303      	adds	r3, #3
 8008c22:	00db      	lsls	r3, r3, #3
 8008c24:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8008c28:	18d4      	adds	r4, r2, r3
 8008c2a:	4602      	mov	r2, r0
 8008c2c:	460b      	mov	r3, r1
 8008c2e:	4640      	mov	r0, r8
 8008c30:	4649      	mov	r1, r9
 8008c32:	f7f7 fb1b 	bl	800026c <__aeabi_dsub>
 8008c36:	4602      	mov	r2, r0
 8008c38:	460b      	mov	r3, r1
 8008c3a:	e9c4 2300 	strd	r2, r3, [r4]
          x[1] = c[iAcol] * x[1] + absxk * s[iAcol];
 8008c3e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8008c42:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008c46:	00db      	lsls	r3, r3, #3
 8008c48:	4413      	add	r3, r2
 8008c4a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008c4e:	f107 0320 	add.w	r3, r7, #32
 8008c52:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8008c56:	f7f7 fcc1 	bl	80005dc <__aeabi_dmul>
 8008c5a:	4602      	mov	r2, r0
 8008c5c:	460b      	mov	r3, r1
 8008c5e:	4614      	mov	r4, r2
 8008c60:	461d      	mov	r5, r3
 8008c62:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8008c66:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008c6a:	00db      	lsls	r3, r3, #3
 8008c6c:	4413      	add	r3, r2
 8008c6e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008c72:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 8008c76:	f7f7 fcb1 	bl	80005dc <__aeabi_dmul>
 8008c7a:	4602      	mov	r2, r0
 8008c7c:	460b      	mov	r3, r1
 8008c7e:	4620      	mov	r0, r4
 8008c80:	4629      	mov	r1, r5
 8008c82:	f7f7 faf5 	bl	8000270 <__adddf3>
 8008c86:	4602      	mov	r2, r0
 8008c88:	460b      	mov	r3, r1
 8008c8a:	f107 0120 	add.w	r1, r7, #32
 8008c8e:	e9c1 2302 	strd	r2, r3, [r1, #8]
        for (iAcol = 1; iAcol + 1 > 0; iAcol--) {
 8008c92:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008c96:	3b01      	subs	r3, #1
 8008c98:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8008c9c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	da8e      	bge.n	8008bc2 <UTMeanCovSqrt_C2vgLQ4W+0xf1e>
        }

        for (iAcol = 2; iAcol + 1 > 0; iAcol--) {
 8008ca4:	2302      	movs	r3, #2
 8008ca6:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8008caa:	e06e      	b.n	8008d8a <UTMeanCovSqrt_C2vgLQ4W+0x10e6>
 8008cac:	3ff00000 	.word	0x3ff00000
          absxk = Sy[iAcol + 6];
 8008cb0:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008cb4:	3306      	adds	r3, #6
 8008cb6:	00db      	lsls	r3, r3, #3
 8008cb8:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8008cbc:	4413      	add	r3, r2
 8008cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cc2:	e9c7 239e 	strd	r2, r3, [r7, #632]	; 0x278
          Sy[iAcol + 6] = absxk * c[iAcol] - s[iAcol] * x[2];
 8008cc6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8008cca:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008cce:	00db      	lsls	r3, r3, #3
 8008cd0:	4413      	add	r3, r2
 8008cd2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008cd6:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 8008cda:	f7f7 fc7f 	bl	80005dc <__aeabi_dmul>
 8008cde:	4602      	mov	r2, r0
 8008ce0:	460b      	mov	r3, r1
 8008ce2:	4690      	mov	r8, r2
 8008ce4:	4699      	mov	r9, r3
 8008ce6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8008cea:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008cee:	00db      	lsls	r3, r3, #3
 8008cf0:	4413      	add	r3, r2
 8008cf2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008cf6:	f107 0320 	add.w	r3, r7, #32
 8008cfa:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8008cfe:	f7f7 fc6d 	bl	80005dc <__aeabi_dmul>
 8008d02:	4602      	mov	r2, r0
 8008d04:	460b      	mov	r3, r1
 8008d06:	4610      	mov	r0, r2
 8008d08:	4619      	mov	r1, r3
 8008d0a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008d0e:	3306      	adds	r3, #6
 8008d10:	00db      	lsls	r3, r3, #3
 8008d12:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8008d16:	18d4      	adds	r4, r2, r3
 8008d18:	4602      	mov	r2, r0
 8008d1a:	460b      	mov	r3, r1
 8008d1c:	4640      	mov	r0, r8
 8008d1e:	4649      	mov	r1, r9
 8008d20:	f7f7 faa4 	bl	800026c <__aeabi_dsub>
 8008d24:	4602      	mov	r2, r0
 8008d26:	460b      	mov	r3, r1
 8008d28:	e9c4 2300 	strd	r2, r3, [r4]
          x[2] = c[iAcol] * x[2] + absxk * s[iAcol];
 8008d2c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8008d30:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008d34:	00db      	lsls	r3, r3, #3
 8008d36:	4413      	add	r3, r2
 8008d38:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008d3c:	f107 0320 	add.w	r3, r7, #32
 8008d40:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8008d44:	f7f7 fc4a 	bl	80005dc <__aeabi_dmul>
 8008d48:	4602      	mov	r2, r0
 8008d4a:	460b      	mov	r3, r1
 8008d4c:	4614      	mov	r4, r2
 8008d4e:	461d      	mov	r5, r3
 8008d50:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8008d54:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008d58:	00db      	lsls	r3, r3, #3
 8008d5a:	4413      	add	r3, r2
 8008d5c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008d60:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 8008d64:	f7f7 fc3a 	bl	80005dc <__aeabi_dmul>
 8008d68:	4602      	mov	r2, r0
 8008d6a:	460b      	mov	r3, r1
 8008d6c:	4620      	mov	r0, r4
 8008d6e:	4629      	mov	r1, r5
 8008d70:	f7f7 fa7e 	bl	8000270 <__adddf3>
 8008d74:	4602      	mov	r2, r0
 8008d76:	460b      	mov	r3, r1
 8008d78:	f107 0120 	add.w	r1, r7, #32
 8008d7c:	e9c1 2304 	strd	r2, r3, [r1, #16]
        for (iAcol = 2; iAcol + 1 > 0; iAcol--) {
 8008d80:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008d84:	3b01      	subs	r3, #1
 8008d86:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8008d8a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	da8e      	bge.n	8008cb0 <UTMeanCovSqrt_C2vgLQ4W+0x100c>
        }
      }
    }

    if (guard1) {
 8008d92:	f897 328a 	ldrb.w	r3, [r7, #650]	; 0x28a
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	f000 82f0 	beq.w	800937c <UTMeanCovSqrt_C2vgLQ4W+0x16d8>
      boolean_T exitg2;
      kk = 0;
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
      for (iAcol = 0; iAcol < 3; iAcol++) {
 8008da2:	2300      	movs	r3, #0
 8008da4:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8008da8:	e0d3      	b.n	8008f52 <UTMeanCovSqrt_C2vgLQ4W+0x12ae>
        i_1 = 0;
 8008daa:	2300      	movs	r3, #0
 8008dac:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
        for (i = 0; i < 3; i++) {
 8008db0:	2300      	movs	r3, #0
 8008db2:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 8008db6:	e0bd      	b.n	8008f34 <UTMeanCovSqrt_C2vgLQ4W+0x1290>
          Sy_tmp = i_1 + iAcol;
 8008db8:	f8d7 2290 	ldr.w	r2, [r7, #656]	; 0x290
 8008dbc:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008dc0:	4413      	add	r3, r2
 8008dc2:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
          Sy_0[Sy_tmp] = 0.0;
 8008dc6:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8008dca:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8008dce:	00db      	lsls	r3, r3, #3
 8008dd0:	18d1      	adds	r1, r2, r3
 8008dd2:	f04f 0200 	mov.w	r2, #0
 8008dd6:	f04f 0300 	mov.w	r3, #0
 8008dda:	e9c1 2300 	strd	r2, r3, [r1]
          Sy_0[Sy_tmp] += Sy[kk] * Sy[i_1];
 8008dde:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8008de2:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8008de6:	00db      	lsls	r3, r3, #3
 8008de8:	4413      	add	r3, r2
 8008dea:	e9d3 4500 	ldrd	r4, r5, [r3]
 8008dee:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8008df2:	00db      	lsls	r3, r3, #3
 8008df4:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8008df8:	4413      	add	r3, r2
 8008dfa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008dfe:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8008e02:	00db      	lsls	r3, r3, #3
 8008e04:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8008e08:	4413      	add	r3, r2
 8008e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e0e:	f7f7 fbe5 	bl	80005dc <__aeabi_dmul>
 8008e12:	4602      	mov	r2, r0
 8008e14:	460b      	mov	r3, r1
 8008e16:	4620      	mov	r0, r4
 8008e18:	4629      	mov	r1, r5
 8008e1a:	f7f7 fa29 	bl	8000270 <__adddf3>
 8008e1e:	4602      	mov	r2, r0
 8008e20:	460b      	mov	r3, r1
 8008e22:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8008e26:	f8d7 1264 	ldr.w	r1, [r7, #612]	; 0x264
 8008e2a:	00c9      	lsls	r1, r1, #3
 8008e2c:	4401      	add	r1, r0
 8008e2e:	e9c1 2300 	strd	r2, r3, [r1]
          Sy_0[Sy_tmp] += Sy[kk + 1] * Sy[i_1 + 1];
 8008e32:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8008e36:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8008e3a:	00db      	lsls	r3, r3, #3
 8008e3c:	4413      	add	r3, r2
 8008e3e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8008e42:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8008e46:	3301      	adds	r3, #1
 8008e48:	00db      	lsls	r3, r3, #3
 8008e4a:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8008e4e:	4413      	add	r3, r2
 8008e50:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008e54:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8008e58:	3301      	adds	r3, #1
 8008e5a:	00db      	lsls	r3, r3, #3
 8008e5c:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8008e60:	4413      	add	r3, r2
 8008e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e66:	f7f7 fbb9 	bl	80005dc <__aeabi_dmul>
 8008e6a:	4602      	mov	r2, r0
 8008e6c:	460b      	mov	r3, r1
 8008e6e:	4620      	mov	r0, r4
 8008e70:	4629      	mov	r1, r5
 8008e72:	f7f7 f9fd 	bl	8000270 <__adddf3>
 8008e76:	4602      	mov	r2, r0
 8008e78:	460b      	mov	r3, r1
 8008e7a:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8008e7e:	f8d7 1264 	ldr.w	r1, [r7, #612]	; 0x264
 8008e82:	00c9      	lsls	r1, r1, #3
 8008e84:	4401      	add	r1, r0
 8008e86:	e9c1 2300 	strd	r2, r3, [r1]
          Sy_0[Sy_tmp] += Sy[kk + 2] * Sy[i_1 + 2];
 8008e8a:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8008e8e:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8008e92:	00db      	lsls	r3, r3, #3
 8008e94:	4413      	add	r3, r2
 8008e96:	e9d3 4500 	ldrd	r4, r5, [r3]
 8008e9a:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8008e9e:	3302      	adds	r3, #2
 8008ea0:	00db      	lsls	r3, r3, #3
 8008ea2:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8008ea6:	4413      	add	r3, r2
 8008ea8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008eac:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8008eb0:	3302      	adds	r3, #2
 8008eb2:	00db      	lsls	r3, r3, #3
 8008eb4:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8008eb8:	4413      	add	r3, r2
 8008eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ebe:	f7f7 fb8d 	bl	80005dc <__aeabi_dmul>
 8008ec2:	4602      	mov	r2, r0
 8008ec4:	460b      	mov	r3, r1
 8008ec6:	4620      	mov	r0, r4
 8008ec8:	4629      	mov	r1, r5
 8008eca:	f7f7 f9d1 	bl	8000270 <__adddf3>
 8008ece:	4602      	mov	r2, r0
 8008ed0:	460b      	mov	r3, r1
 8008ed2:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8008ed6:	f8d7 1264 	ldr.w	r1, [r7, #612]	; 0x264
 8008eda:	00c9      	lsls	r1, r1, #3
 8008edc:	4401      	add	r1, r0
 8008ede:	e9c1 2300 	strd	r2, r3, [r1]
          Y1_0[i + kk] = Y1[i] * Y1[iAcol];
 8008ee2:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8008ee6:	00db      	lsls	r3, r3, #3
 8008ee8:	1d3a      	adds	r2, r7, #4
 8008eea:	6812      	ldr	r2, [r2, #0]
 8008eec:	4413      	add	r3, r2
 8008eee:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008ef2:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008ef6:	00db      	lsls	r3, r3, #3
 8008ef8:	1d3a      	adds	r2, r7, #4
 8008efa:	6812      	ldr	r2, [r2, #0]
 8008efc:	4413      	add	r3, r2
 8008efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f02:	f8d7 529c 	ldr.w	r5, [r7, #668]	; 0x29c
 8008f06:	f8d7 428c 	ldr.w	r4, [r7, #652]	; 0x28c
 8008f0a:	442c      	add	r4, r5
 8008f0c:	f7f7 fb66 	bl	80005dc <__aeabi_dmul>
 8008f10:	4602      	mov	r2, r0
 8008f12:	460b      	mov	r3, r1
 8008f14:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8008f18:	00e1      	lsls	r1, r4, #3
 8008f1a:	4401      	add	r1, r0
 8008f1c:	e9c1 2300 	strd	r2, r3, [r1]
          i_1 += 3;
 8008f20:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8008f24:	3303      	adds	r3, #3
 8008f26:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
        for (i = 0; i < 3; i++) {
 8008f2a:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8008f2e:	3301      	adds	r3, #1
 8008f30:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 8008f34:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8008f38:	2b02      	cmp	r3, #2
 8008f3a:	f77f af3d 	ble.w	8008db8 <UTMeanCovSqrt_C2vgLQ4W+0x1114>
        }

        kk += 3;
 8008f3e:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8008f42:	3303      	adds	r3, #3
 8008f44:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
      for (iAcol = 0; iAcol < 3; iAcol++) {
 8008f48:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008f4c:	3301      	adds	r3, #1
 8008f4e:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8008f52:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008f56:	2b02      	cmp	r3, #2
 8008f58:	f77f af27 	ble.w	8008daa <UTMeanCovSqrt_C2vgLQ4W+0x1106>
      }

      errorCondition = true;
 8008f5c:	2301      	movs	r3, #1
 8008f5e:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
      for (iAcol = 0; iAcol < 9; iAcol++) {
 8008f62:	2300      	movs	r3, #0
 8008f64:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8008f68:	e049      	b.n	8008ffe <UTMeanCovSqrt_C2vgLQ4W+0x135a>
        temp = Sy_0[iAcol] - Y1_0[iAcol];
 8008f6a:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8008f6e:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008f72:	00db      	lsls	r3, r3, #3
 8008f74:	4413      	add	r3, r2
 8008f76:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008f7a:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8008f7e:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008f82:	00db      	lsls	r3, r3, #3
 8008f84:	4413      	add	r3, r2
 8008f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f8a:	f7f7 f96f 	bl	800026c <__aeabi_dsub>
 8008f8e:	4602      	mov	r2, r0
 8008f90:	460b      	mov	r3, r1
 8008f92:	f107 0118 	add.w	r1, r7, #24
 8008f96:	e9c1 2300 	strd	r2, r3, [r1]
        if (errorCondition && (rtIsInf(temp) || rtIsNaN(temp))) {
 8008f9a:	f897 328b 	ldrb.w	r3, [r7, #651]	; 0x28b
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d01c      	beq.n	8008fdc <UTMeanCovSqrt_C2vgLQ4W+0x1338>
 8008fa2:	f107 0318 	add.w	r3, r7, #24
 8008fa6:	ed93 7b00 	vldr	d7, [r3]
 8008faa:	eeb0 0a47 	vmov.f32	s0, s14
 8008fae:	eef0 0a67 	vmov.f32	s1, s15
 8008fb2:	f003 fbf3 	bl	800c79c <rtIsInf>
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d10c      	bne.n	8008fd6 <UTMeanCovSqrt_C2vgLQ4W+0x1332>
 8008fbc:	f107 0318 	add.w	r3, r7, #24
 8008fc0:	ed93 7b00 	vldr	d7, [r3]
 8008fc4:	eeb0 0a47 	vmov.f32	s0, s14
 8008fc8:	eef0 0a67 	vmov.f32	s1, s15
 8008fcc:	f003 fc0a 	bl	800c7e4 <rtIsNaN>
 8008fd0:	4603      	mov	r3, r0
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d002      	beq.n	8008fdc <UTMeanCovSqrt_C2vgLQ4W+0x1338>
          errorCondition = false;
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
        }

        Ss[iAcol] = temp;
 8008fdc:	f107 0318 	add.w	r3, r7, #24
 8008fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fe4:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 8008fe8:	f8d7 1298 	ldr.w	r1, [r7, #664]	; 0x298
 8008fec:	00c9      	lsls	r1, r1, #3
 8008fee:	4401      	add	r1, r0
 8008ff0:	e9c1 2300 	strd	r2, r3, [r1]
      for (iAcol = 0; iAcol < 9; iAcol++) {
 8008ff4:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008ff8:	3301      	adds	r3, #1
 8008ffa:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8008ffe:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8009002:	2b08      	cmp	r3, #8
 8009004:	ddb1      	ble.n	8008f6a <UTMeanCovSqrt_C2vgLQ4W+0x12c6>
      }

      if (errorCondition) {
 8009006:	f897 328b 	ldrb.w	r3, [r7, #651]	; 0x28b
 800900a:	2b00      	cmp	r3, #0
 800900c:	d00a      	beq.n	8009024 <UTMeanCovSqrt_C2vgLQ4W+0x1380>
        svd_u3DvUgOe(Ss, Y1_0, s, Sy_0);
 800900e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8009012:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8009016:	f107 0168 	add.w	r1, r7, #104	; 0x68
 800901a:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 800901e:	f003 fc33 	bl	800c888 <svd_u3DvUgOe>
 8009022:	e02c      	b.n	800907e <UTMeanCovSqrt_C2vgLQ4W+0x13da>
      } else {
        s[0] = (rtNaN);
 8009024:	4bbc      	ldr	r3, [pc, #752]	; (8009318 <UTMeanCovSqrt_C2vgLQ4W+0x1674>)
 8009026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800902a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800902e:	e9c1 2300 	strd	r2, r3, [r1]
        s[1] = (rtNaN);
 8009032:	4bb9      	ldr	r3, [pc, #740]	; (8009318 <UTMeanCovSqrt_C2vgLQ4W+0x1674>)
 8009034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009038:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800903c:	e9c1 2302 	strd	r2, r3, [r1, #8]
        s[2] = (rtNaN);
 8009040:	4bb5      	ldr	r3, [pc, #724]	; (8009318 <UTMeanCovSqrt_C2vgLQ4W+0x1674>)
 8009042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009046:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800904a:	e9c1 2304 	strd	r2, r3, [r1, #16]
        for (kk = 0; kk < 9; kk++) {
 800904e:	2300      	movs	r3, #0
 8009050:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8009054:	e00f      	b.n	8009076 <UTMeanCovSqrt_C2vgLQ4W+0x13d2>
          Sy_0[kk] = (rtNaN);
 8009056:	4bb0      	ldr	r3, [pc, #704]	; (8009318 <UTMeanCovSqrt_C2vgLQ4W+0x1674>)
 8009058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800905c:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8009060:	f8d7 128c 	ldr.w	r1, [r7, #652]	; 0x28c
 8009064:	00c9      	lsls	r1, r1, #3
 8009066:	4401      	add	r1, r0
 8009068:	e9c1 2300 	strd	r2, r3, [r1]
        for (kk = 0; kk < 9; kk++) {
 800906c:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8009070:	3301      	adds	r3, #1
 8009072:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8009076:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 800907a:	2b08      	cmp	r3, #8
 800907c:	ddeb      	ble.n	8009056 <UTMeanCovSqrt_C2vgLQ4W+0x13b2>
        }
      }

      memset(&Ss[0], 0, 9U * sizeof(real_T));
 800907e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8009082:	2248      	movs	r2, #72	; 0x48
 8009084:	2100      	movs	r1, #0
 8009086:	4618      	mov	r0, r3
 8009088:	f010 fe86 	bl	8019d98 <memset>
      Ss[0] = s[0];
 800908c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009094:	f107 01f8 	add.w	r1, r7, #248	; 0xf8
 8009098:	e9c1 2300 	strd	r2, r3, [r1]
      Ss[4] = s[1];
 800909c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80090a0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80090a4:	f107 01f8 	add.w	r1, r7, #248	; 0xf8
 80090a8:	e9c1 2308 	strd	r2, r3, [r1, #32]
      Ss[8] = s[2];
 80090ac:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80090b0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80090b4:	f107 01f8 	add.w	r1, r7, #248	; 0xf8
 80090b8:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
      for (kk = 0; kk < 9; kk++) {
 80090bc:	2300      	movs	r3, #0
 80090be:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 80090c2:	e01e      	b.n	8009102 <UTMeanCovSqrt_C2vgLQ4W+0x145e>
        Ss[kk] = sqrt(Ss[kk]);
 80090c4:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 80090c8:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80090cc:	00db      	lsls	r3, r3, #3
 80090ce:	4413      	add	r3, r2
 80090d0:	ed93 7b00 	vldr	d7, [r3]
 80090d4:	eeb0 0a47 	vmov.f32	s0, s14
 80090d8:	eef0 0a67 	vmov.f32	s1, s15
 80090dc:	f011 f814 	bl	801a108 <sqrt>
 80090e0:	eeb0 7a40 	vmov.f32	s14, s0
 80090e4:	eef0 7a60 	vmov.f32	s15, s1
 80090e8:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 80090ec:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80090f0:	00db      	lsls	r3, r3, #3
 80090f2:	4413      	add	r3, r2
 80090f4:	ed83 7b00 	vstr	d7, [r3]
      for (kk = 0; kk < 9; kk++) {
 80090f8:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80090fc:	3301      	adds	r3, #1
 80090fe:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8009102:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8009106:	2b08      	cmp	r3, #8
 8009108:	dddc      	ble.n	80090c4 <UTMeanCovSqrt_C2vgLQ4W+0x1420>
      }

      kk = 0;
 800910a:	2300      	movs	r3, #0
 800910c:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
      for (iAcol = 0; iAcol < 3; iAcol++) {
 8009110:	2300      	movs	r3, #0
 8009112:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8009116:	e0c0      	b.n	800929a <UTMeanCovSqrt_C2vgLQ4W+0x15f6>
        i_1 = 0;
 8009118:	2300      	movs	r3, #0
 800911a:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
        for (i = 0; i < 3; i++) {
 800911e:	2300      	movs	r3, #0
 8009120:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 8009124:	e0aa      	b.n	800927c <UTMeanCovSqrt_C2vgLQ4W+0x15d8>
          Sy_tmp = i_1 + iAcol;
 8009126:	f8d7 2290 	ldr.w	r2, [r7, #656]	; 0x290
 800912a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800912e:	4413      	add	r3, r2
 8009130:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
          Sy[Sy_tmp] = 0.0;
 8009134:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8009138:	00db      	lsls	r3, r3, #3
 800913a:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 800913e:	18d1      	adds	r1, r2, r3
 8009140:	f04f 0200 	mov.w	r2, #0
 8009144:	f04f 0300 	mov.w	r3, #0
 8009148:	e9c1 2300 	strd	r2, r3, [r1]
          Sy[Sy_tmp] += Ss[kk] * Sy_0[i];
 800914c:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8009150:	00db      	lsls	r3, r3, #3
 8009152:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8009156:	4413      	add	r3, r2
 8009158:	e9d3 4500 	ldrd	r4, r5, [r3]
 800915c:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8009160:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8009164:	00db      	lsls	r3, r3, #3
 8009166:	4413      	add	r3, r2
 8009168:	e9d3 0100 	ldrd	r0, r1, [r3]
 800916c:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8009170:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8009174:	00db      	lsls	r3, r3, #3
 8009176:	4413      	add	r3, r2
 8009178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800917c:	f7f7 fa2e 	bl	80005dc <__aeabi_dmul>
 8009180:	4602      	mov	r2, r0
 8009182:	460b      	mov	r3, r1
 8009184:	4610      	mov	r0, r2
 8009186:	4619      	mov	r1, r3
 8009188:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 800918c:	00db      	lsls	r3, r3, #3
 800918e:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8009192:	18d6      	adds	r6, r2, r3
 8009194:	4602      	mov	r2, r0
 8009196:	460b      	mov	r3, r1
 8009198:	4620      	mov	r0, r4
 800919a:	4629      	mov	r1, r5
 800919c:	f7f7 f868 	bl	8000270 <__adddf3>
 80091a0:	4602      	mov	r2, r0
 80091a2:	460b      	mov	r3, r1
 80091a4:	e9c6 2300 	strd	r2, r3, [r6]
          Sy[Sy_tmp] += Ss[kk + 1] * Sy_0[i + 3];
 80091a8:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 80091ac:	00db      	lsls	r3, r3, #3
 80091ae:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 80091b2:	4413      	add	r3, r2
 80091b4:	e9d3 4500 	ldrd	r4, r5, [r3]
 80091b8:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80091bc:	3301      	adds	r3, #1
 80091be:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 80091c2:	00db      	lsls	r3, r3, #3
 80091c4:	4413      	add	r3, r2
 80091c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80091ca:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80091ce:	3303      	adds	r3, #3
 80091d0:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80091d4:	00db      	lsls	r3, r3, #3
 80091d6:	4413      	add	r3, r2
 80091d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091dc:	f7f7 f9fe 	bl	80005dc <__aeabi_dmul>
 80091e0:	4602      	mov	r2, r0
 80091e2:	460b      	mov	r3, r1
 80091e4:	4610      	mov	r0, r2
 80091e6:	4619      	mov	r1, r3
 80091e8:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 80091ec:	00db      	lsls	r3, r3, #3
 80091ee:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 80091f2:	18d6      	adds	r6, r2, r3
 80091f4:	4602      	mov	r2, r0
 80091f6:	460b      	mov	r3, r1
 80091f8:	4620      	mov	r0, r4
 80091fa:	4629      	mov	r1, r5
 80091fc:	f7f7 f838 	bl	8000270 <__adddf3>
 8009200:	4602      	mov	r2, r0
 8009202:	460b      	mov	r3, r1
 8009204:	e9c6 2300 	strd	r2, r3, [r6]
          Sy[Sy_tmp] += Ss[kk + 2] * Sy_0[i + 6];
 8009208:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 800920c:	00db      	lsls	r3, r3, #3
 800920e:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8009212:	4413      	add	r3, r2
 8009214:	e9d3 4500 	ldrd	r4, r5, [r3]
 8009218:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 800921c:	3302      	adds	r3, #2
 800921e:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8009222:	00db      	lsls	r3, r3, #3
 8009224:	4413      	add	r3, r2
 8009226:	e9d3 0100 	ldrd	r0, r1, [r3]
 800922a:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 800922e:	3306      	adds	r3, #6
 8009230:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8009234:	00db      	lsls	r3, r3, #3
 8009236:	4413      	add	r3, r2
 8009238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800923c:	f7f7 f9ce 	bl	80005dc <__aeabi_dmul>
 8009240:	4602      	mov	r2, r0
 8009242:	460b      	mov	r3, r1
 8009244:	4610      	mov	r0, r2
 8009246:	4619      	mov	r1, r3
 8009248:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 800924c:	00db      	lsls	r3, r3, #3
 800924e:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8009252:	18d6      	adds	r6, r2, r3
 8009254:	4602      	mov	r2, r0
 8009256:	460b      	mov	r3, r1
 8009258:	4620      	mov	r0, r4
 800925a:	4629      	mov	r1, r5
 800925c:	f7f7 f808 	bl	8000270 <__adddf3>
 8009260:	4602      	mov	r2, r0
 8009262:	460b      	mov	r3, r1
 8009264:	e9c6 2300 	strd	r2, r3, [r6]
          i_1 += 3;
 8009268:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 800926c:	3303      	adds	r3, #3
 800926e:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
        for (i = 0; i < 3; i++) {
 8009272:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8009276:	3301      	adds	r3, #1
 8009278:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 800927c:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8009280:	2b02      	cmp	r3, #2
 8009282:	f77f af50 	ble.w	8009126 <UTMeanCovSqrt_C2vgLQ4W+0x1482>
        }

        kk += 3;
 8009286:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 800928a:	3303      	adds	r3, #3
 800928c:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
      for (iAcol = 0; iAcol < 3; iAcol++) {
 8009290:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8009294:	3301      	adds	r3, #1
 8009296:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 800929a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800929e:	2b02      	cmp	r3, #2
 80092a0:	f77f af3a 	ble.w	8009118 <UTMeanCovSqrt_C2vgLQ4W+0x1474>
      }

      errorCondition = true;
 80092a4:	2301      	movs	r3, #1
 80092a6:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
      kk = 0;
 80092aa:	2300      	movs	r3, #0
 80092ac:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
      exitg2 = false;
 80092b0:	2300      	movs	r3, #0
 80092b2:	f887 3289 	strb.w	r3, [r7, #649]	; 0x289
      while ((!exitg2) && (kk < 3)) {
 80092b6:	e044      	b.n	8009342 <UTMeanCovSqrt_C2vgLQ4W+0x169e>
        int32_T exitg1;
        iAcol = kk + 1;
 80092b8:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80092bc:	3301      	adds	r3, #1
 80092be:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
        do {
          exitg1 = 0;
 80092c2:	2300      	movs	r3, #0
 80092c4:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
          if (iAcol + 1 < 4) {
 80092c8:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80092cc:	2b02      	cmp	r3, #2
 80092ce:	dc25      	bgt.n	800931c <UTMeanCovSqrt_C2vgLQ4W+0x1678>
            if (!(Sy[3 * kk + iAcol] == 0.0)) {
 80092d0:	f8d7 228c 	ldr.w	r2, [r7, #652]	; 0x28c
 80092d4:	4613      	mov	r3, r2
 80092d6:	005b      	lsls	r3, r3, #1
 80092d8:	441a      	add	r2, r3
 80092da:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80092de:	4413      	add	r3, r2
 80092e0:	00db      	lsls	r3, r3, #3
 80092e2:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 80092e6:	4413      	add	r3, r2
 80092e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80092ec:	f04f 0200 	mov.w	r2, #0
 80092f0:	f04f 0300 	mov.w	r3, #0
 80092f4:	f7f7 fbda 	bl	8000aac <__aeabi_dcmpeq>
 80092f8:	4603      	mov	r3, r0
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d106      	bne.n	800930c <UTMeanCovSqrt_C2vgLQ4W+0x1668>
              errorCondition = false;
 80092fe:	2300      	movs	r3, #0
 8009300:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
              exitg1 = 1;
 8009304:	2301      	movs	r3, #1
 8009306:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 800930a:	e00f      	b.n	800932c <UTMeanCovSqrt_C2vgLQ4W+0x1688>
            } else {
              iAcol++;
 800930c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8009310:	3301      	adds	r3, #1
 8009312:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8009316:	e009      	b.n	800932c <UTMeanCovSqrt_C2vgLQ4W+0x1688>
 8009318:	2001e918 	.word	0x2001e918
            }
          } else {
            kk++;
 800931c:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8009320:	3301      	adds	r3, #1
 8009322:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
            exitg1 = 2;
 8009326:	2302      	movs	r3, #2
 8009328:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
          }
        } while (exitg1 == 0);
 800932c:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8009330:	2b00      	cmp	r3, #0
 8009332:	d0c6      	beq.n	80092c2 <UTMeanCovSqrt_C2vgLQ4W+0x161e>

        if (exitg1 == 1) {
 8009334:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8009338:	2b01      	cmp	r3, #1
 800933a:	d102      	bne.n	8009342 <UTMeanCovSqrt_C2vgLQ4W+0x169e>
          exitg2 = true;
 800933c:	2301      	movs	r3, #1
 800933e:	f887 3289 	strb.w	r3, [r7, #649]	; 0x289
      while ((!exitg2) && (kk < 3)) {
 8009342:	f897 3289 	ldrb.w	r3, [r7, #649]	; 0x289
 8009346:	2b00      	cmp	r3, #0
 8009348:	d103      	bne.n	8009352 <UTMeanCovSqrt_C2vgLQ4W+0x16ae>
 800934a:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 800934e:	2b02      	cmp	r3, #2
 8009350:	ddb2      	ble.n	80092b8 <UTMeanCovSqrt_C2vgLQ4W+0x1614>
        }
      }

      if (!errorCondition) {
 8009352:	f897 328b 	ldrb.w	r3, [r7, #651]	; 0x28b
 8009356:	2b00      	cmp	r3, #0
 8009358:	d110      	bne.n	800937c <UTMeanCovSqrt_C2vgLQ4W+0x16d8>
        memcpy(&Sy_0[0], &Sy[0], 9U * sizeof(real_T));
 800935a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800935e:	2248      	movs	r2, #72	; 0x48
 8009360:	f8d7 12e4 	ldr.w	r1, [r7, #740]	; 0x2e4
 8009364:	4618      	mov	r0, r3
 8009366:	f010 fd09 	bl	8019d7c <memcpy>
        qr_5a2P8Gh6(Sy_0, Y1_0, Sy);
 800936a:	f107 0168 	add.w	r1, r7, #104	; 0x68
 800936e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8009372:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8009376:	4618      	mov	r0, r3
 8009378:	f000 fec4 	bl	800a104 <qr_5a2P8Gh6>
      }
    }

    kk = 0;
 800937c:	2300      	movs	r3, #0
 800937e:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
    for (iAcol = 0; iAcol < 3; iAcol++) {
 8009382:	2300      	movs	r3, #0
 8009384:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8009388:	e03d      	b.n	8009406 <UTMeanCovSqrt_C2vgLQ4W+0x1762>
      Sy_0[kk] = Sy[iAcol];
 800938a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800938e:	00db      	lsls	r3, r3, #3
 8009390:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8009394:	4413      	add	r3, r2
 8009396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800939a:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 800939e:	f8d7 128c 	ldr.w	r1, [r7, #652]	; 0x28c
 80093a2:	00c9      	lsls	r1, r1, #3
 80093a4:	4401      	add	r1, r0
 80093a6:	e9c1 2300 	strd	r2, r3, [r1]
      Sy_0[kk + 1] = Sy[iAcol + 3];
 80093aa:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80093ae:	3303      	adds	r3, #3
 80093b0:	00db      	lsls	r3, r3, #3
 80093b2:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 80093b6:	4413      	add	r3, r2
 80093b8:	f8d7 228c 	ldr.w	r2, [r7, #652]	; 0x28c
 80093bc:	1c51      	adds	r1, r2, #1
 80093be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093c2:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 80093c6:	00c9      	lsls	r1, r1, #3
 80093c8:	4401      	add	r1, r0
 80093ca:	e9c1 2300 	strd	r2, r3, [r1]
      Sy_0[kk + 2] = Sy[iAcol + 6];
 80093ce:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80093d2:	3306      	adds	r3, #6
 80093d4:	00db      	lsls	r3, r3, #3
 80093d6:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 80093da:	4413      	add	r3, r2
 80093dc:	f8d7 228c 	ldr.w	r2, [r7, #652]	; 0x28c
 80093e0:	1c91      	adds	r1, r2, #2
 80093e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093e6:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 80093ea:	00c9      	lsls	r1, r1, #3
 80093ec:	4401      	add	r1, r0
 80093ee:	e9c1 2300 	strd	r2, r3, [r1]
      kk += 3;
 80093f2:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80093f6:	3303      	adds	r3, #3
 80093f8:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
    for (iAcol = 0; iAcol < 3; iAcol++) {
 80093fc:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8009400:	3301      	adds	r3, #1
 8009402:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8009406:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800940a:	2b02      	cmp	r3, #2
 800940c:	ddbd      	ble.n	800938a <UTMeanCovSqrt_C2vgLQ4W+0x16e6>
    }

    for (kk = 0; kk < 9; kk++) {
 800940e:	2300      	movs	r3, #0
 8009410:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8009414:	e01a      	b.n	800944c <UTMeanCovSqrt_C2vgLQ4W+0x17a8>
      Sy[kk] = signOOM * Sy_0[kk];
 8009416:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800941a:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 800941e:	00db      	lsls	r3, r3, #3
 8009420:	4413      	add	r3, r2
 8009422:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009426:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 800942a:	00db      	lsls	r3, r3, #3
 800942c:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8009430:	18d4      	adds	r4, r2, r3
 8009432:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 8009436:	f7f7 f8d1 	bl	80005dc <__aeabi_dmul>
 800943a:	4602      	mov	r2, r0
 800943c:	460b      	mov	r3, r1
 800943e:	e9c4 2300 	strd	r2, r3, [r4]
    for (kk = 0; kk < 9; kk++) {
 8009442:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8009446:	3301      	adds	r3, #1
 8009448:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 800944c:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8009450:	2b08      	cmp	r3, #8
 8009452:	dde0      	ble.n	8009416 <UTMeanCovSqrt_C2vgLQ4W+0x1772>
    }
  }

  iAcol = 0;
 8009454:	2300      	movs	r3, #0
 8009456:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
  for (kk = 0; kk < 6; kk++) {
 800945a:	2300      	movs	r3, #0
 800945c:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8009460:	e057      	b.n	8009512 <UTMeanCovSqrt_C2vgLQ4W+0x186e>
    X2[iAcol] -= X1[0];
 8009462:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8009466:	00db      	lsls	r3, r3, #3
 8009468:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 800946c:	4413      	add	r3, r2
 800946e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009472:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 8009476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800947a:	f8d7 4298 	ldr.w	r4, [r7, #664]	; 0x298
 800947e:	00e4      	lsls	r4, r4, #3
 8009480:	f8d7 52dc 	ldr.w	r5, [r7, #732]	; 0x2dc
 8009484:	442c      	add	r4, r5
 8009486:	f7f6 fef1 	bl	800026c <__aeabi_dsub>
 800948a:	4602      	mov	r2, r0
 800948c:	460b      	mov	r3, r1
 800948e:	e9c4 2300 	strd	r2, r3, [r4]
    X2[iAcol + 1] -= X1[1];
 8009492:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8009496:	3301      	adds	r3, #1
 8009498:	00db      	lsls	r3, r3, #3
 800949a:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 800949e:	4413      	add	r3, r2
 80094a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80094a4:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 80094a8:	3308      	adds	r3, #8
 80094aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ae:	f8d7 4298 	ldr.w	r4, [r7, #664]	; 0x298
 80094b2:	3401      	adds	r4, #1
 80094b4:	00e4      	lsls	r4, r4, #3
 80094b6:	f8d7 52dc 	ldr.w	r5, [r7, #732]	; 0x2dc
 80094ba:	442c      	add	r4, r5
 80094bc:	f7f6 fed6 	bl	800026c <__aeabi_dsub>
 80094c0:	4602      	mov	r2, r0
 80094c2:	460b      	mov	r3, r1
 80094c4:	e9c4 2300 	strd	r2, r3, [r4]
    X2[iAcol + 2] -= X1[2];
 80094c8:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80094cc:	3302      	adds	r3, #2
 80094ce:	00db      	lsls	r3, r3, #3
 80094d0:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 80094d4:	4413      	add	r3, r2
 80094d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80094da:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 80094de:	3310      	adds	r3, #16
 80094e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094e4:	f8d7 4298 	ldr.w	r4, [r7, #664]	; 0x298
 80094e8:	3402      	adds	r4, #2
 80094ea:	00e4      	lsls	r4, r4, #3
 80094ec:	f8d7 52dc 	ldr.w	r5, [r7, #732]	; 0x2dc
 80094f0:	442c      	add	r4, r5
 80094f2:	f7f6 febb 	bl	800026c <__aeabi_dsub>
 80094f6:	4602      	mov	r2, r0
 80094f8:	460b      	mov	r3, r1
 80094fa:	e9c4 2300 	strd	r2, r3, [r4]
    iAcol += 3;
 80094fe:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8009502:	3303      	adds	r3, #3
 8009504:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
  for (kk = 0; kk < 6; kk++) {
 8009508:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 800950c:	3301      	adds	r3, #1
 800950e:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8009512:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8009516:	2b05      	cmp	r3, #5
 8009518:	dda3      	ble.n	8009462 <UTMeanCovSqrt_C2vgLQ4W+0x17be>
  }

  signOOM = covWeights_1 * OOM;
 800951a:	f107 0308 	add.w	r3, r7, #8
 800951e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009522:	e9d7 019a 	ldrd	r0, r1, [r7, #616]	; 0x268
 8009526:	f7f7 f859 	bl	80005dc <__aeabi_dmul>
 800952a:	4602      	mov	r2, r0
 800952c:	460b      	mov	r3, r1
 800952e:	e9c7 23a8 	strd	r2, r3, [r7, #672]	; 0x2a0
  for (kk = 0; kk < 3; kk++) {
 8009532:	2300      	movs	r3, #0
 8009534:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8009538:	e071      	b.n	800961e <UTMeanCovSqrt_C2vgLQ4W+0x197a>
    iAcol = 0;
 800953a:	2300      	movs	r3, #0
 800953c:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
    for (i_1 = 0; i_1 < 3; i_1++) {
 8009540:	2300      	movs	r3, #0
 8009542:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
 8009546:	e061      	b.n	800960c <UTMeanCovSqrt_C2vgLQ4W+0x1968>
      Sy_tmp = iAcol + kk;
 8009548:	f8d7 2298 	ldr.w	r2, [r7, #664]	; 0x298
 800954c:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8009550:	4413      	add	r3, r2
 8009552:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
      Ss[Sy_tmp] = 0.0;
 8009556:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 800955a:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 800955e:	00db      	lsls	r3, r3, #3
 8009560:	18d1      	adds	r1, r2, r3
 8009562:	f04f 0200 	mov.w	r2, #0
 8009566:	f04f 0300 	mov.w	r3, #0
 800956a:	e9c1 2300 	strd	r2, r3, [r1]
      i = 0;
 800956e:	2300      	movs	r3, #0
 8009570:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
      for (i_0 = 0; i_0 < 6; i_0++) {
 8009574:	2300      	movs	r3, #0
 8009576:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 800957a:	e039      	b.n	80095f0 <UTMeanCovSqrt_C2vgLQ4W+0x194c>
        Ss[Sy_tmp] += X2[i + kk] * Y2[i + i_1];
 800957c:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8009580:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8009584:	00db      	lsls	r3, r3, #3
 8009586:	4413      	add	r3, r2
 8009588:	e9d3 4500 	ldrd	r4, r5, [r3]
 800958c:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8009590:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8009594:	4413      	add	r3, r2
 8009596:	00db      	lsls	r3, r3, #3
 8009598:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 800959c:	4413      	add	r3, r2
 800959e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80095a2:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 80095a6:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 80095aa:	4413      	add	r3, r2
 80095ac:	00db      	lsls	r3, r3, #3
 80095ae:	463a      	mov	r2, r7
 80095b0:	6812      	ldr	r2, [r2, #0]
 80095b2:	4413      	add	r3, r2
 80095b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095b8:	f7f7 f810 	bl	80005dc <__aeabi_dmul>
 80095bc:	4602      	mov	r2, r0
 80095be:	460b      	mov	r3, r1
 80095c0:	4620      	mov	r0, r4
 80095c2:	4629      	mov	r1, r5
 80095c4:	f7f6 fe54 	bl	8000270 <__adddf3>
 80095c8:	4602      	mov	r2, r0
 80095ca:	460b      	mov	r3, r1
 80095cc:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 80095d0:	f8d7 1264 	ldr.w	r1, [r7, #612]	; 0x264
 80095d4:	00c9      	lsls	r1, r1, #3
 80095d6:	4401      	add	r1, r0
 80095d8:	e9c1 2300 	strd	r2, r3, [r1]
        i += 3;
 80095dc:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80095e0:	3303      	adds	r3, #3
 80095e2:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
      for (i_0 = 0; i_0 < 6; i_0++) {
 80095e6:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 80095ea:	3301      	adds	r3, #1
 80095ec:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 80095f0:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 80095f4:	2b05      	cmp	r3, #5
 80095f6:	ddc1      	ble.n	800957c <UTMeanCovSqrt_C2vgLQ4W+0x18d8>
      }

      iAcol += 3;
 80095f8:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80095fc:	3303      	adds	r3, #3
 80095fe:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
    for (i_1 = 0; i_1 < 3; i_1++) {
 8009602:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8009606:	3301      	adds	r3, #1
 8009608:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
 800960c:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8009610:	2b02      	cmp	r3, #2
 8009612:	dd99      	ble.n	8009548 <UTMeanCovSqrt_C2vgLQ4W+0x18a4>
  for (kk = 0; kk < 3; kk++) {
 8009614:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8009618:	3301      	adds	r3, #1
 800961a:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 800961e:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8009622:	2b02      	cmp	r3, #2
 8009624:	dd89      	ble.n	800953a <UTMeanCovSqrt_C2vgLQ4W+0x1896>
    }
  }

  for (kk = 0; kk < 9; kk++) {
 8009626:	2300      	movs	r3, #0
 8009628:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 800962c:	e01a      	b.n	8009664 <UTMeanCovSqrt_C2vgLQ4W+0x19c0>
    Pxy[kk] = Ss[kk] * signOOM;
 800962e:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8009632:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8009636:	00db      	lsls	r3, r3, #3
 8009638:	4413      	add	r3, r2
 800963a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800963e:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8009642:	00db      	lsls	r3, r3, #3
 8009644:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 8009648:	18d4      	adds	r4, r2, r3
 800964a:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 800964e:	f7f6 ffc5 	bl	80005dc <__aeabi_dmul>
 8009652:	4602      	mov	r2, r0
 8009654:	460b      	mov	r3, r1
 8009656:	e9c4 2300 	strd	r2, r3, [r4]
  for (kk = 0; kk < 9; kk++) {
 800965a:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 800965e:	3301      	adds	r3, #1
 8009660:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8009664:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8009668:	2b08      	cmp	r3, #8
 800966a:	dde0      	ble.n	800962e <UTMeanCovSqrt_C2vgLQ4W+0x198a>
  }
}
 800966c:	bf00      	nop
 800966e:	bf00      	nop
 8009670:	f507 772f 	add.w	r7, r7, #700	; 0x2bc
 8009674:	46bd      	mov	sp, r7
 8009676:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800967a:	bf00      	nop

0800967c <UTMeanCovSqrt_C6QfB9Td>:
#include "rotate_LZ7ctbe0.h"

void UTMeanCovSqrt_C6QfB9Td(const real_T meanWeights[2], const real_T
  covWeights[2], real_T OOM, real_T Y1, real_T Y2[6], const real_T X1[3], real_T
  X2[18], real_T *Ymean, real_T *Sy, real_T Pxy[3])
{
 800967c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009680:	ed2d 8b02 	vpush	{d8}
 8009684:	b0ac      	sub	sp, #176	; 0xb0
 8009686:	af00      	add	r7, sp, #0
 8009688:	6378      	str	r0, [r7, #52]	; 0x34
 800968a:	6339      	str	r1, [r7, #48]	; 0x30
 800968c:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
 8009690:	ed87 1b08 	vstr	d1, [r7, #32]
 8009694:	61fa      	str	r2, [r7, #28]
 8009696:	61bb      	str	r3, [r7, #24]
  real_T signOOM;
  real_T xnorm;
  int32_T b_k;
  int32_T i;
  int32_T knt;
  *Ymean = Y1 * meanWeights[0];
 8009698:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800969a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800969e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80096a2:	f7f6 ff9b 	bl	80005dc <__aeabi_dmul>
 80096a6:	4602      	mov	r2, r0
 80096a8:	460b      	mov	r3, r1
 80096aa:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 80096ae:	e9c1 2300 	strd	r2, r3, [r1]
  for (knt = 0; knt < 6; knt++) {
 80096b2:	2300      	movs	r3, #0
 80096b4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80096b8:	e021      	b.n	80096fe <UTMeanCovSqrt_C6QfB9Td+0x82>
    *Ymean += Y2[knt] * meanWeights[1];
 80096ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80096be:	e9d3 4500 	ldrd	r4, r5, [r3]
 80096c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80096c6:	00db      	lsls	r3, r3, #3
 80096c8:	69fa      	ldr	r2, [r7, #28]
 80096ca:	4413      	add	r3, r2
 80096cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80096d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096d2:	3308      	adds	r3, #8
 80096d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096d8:	f7f6 ff80 	bl	80005dc <__aeabi_dmul>
 80096dc:	4602      	mov	r2, r0
 80096de:	460b      	mov	r3, r1
 80096e0:	4620      	mov	r0, r4
 80096e2:	4629      	mov	r1, r5
 80096e4:	f7f6 fdc4 	bl	8000270 <__adddf3>
 80096e8:	4602      	mov	r2, r0
 80096ea:	460b      	mov	r3, r1
 80096ec:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 80096f0:	e9c1 2300 	strd	r2, r3, [r1]
  for (knt = 0; knt < 6; knt++) {
 80096f4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80096f8:	3301      	adds	r3, #1
 80096fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80096fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009702:	2b05      	cmp	r3, #5
 8009704:	ddd9      	ble.n	80096ba <UTMeanCovSqrt_C6QfB9Td+0x3e>
  }

  *Ymean *= OOM;
 8009706:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800970a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800970e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009712:	f7f6 ff63 	bl	80005dc <__aeabi_dmul>
 8009716:	4602      	mov	r2, r0
 8009718:	460b      	mov	r3, r1
 800971a:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800971e:	e9c1 2300 	strd	r2, r3, [r1]
  Y1 -= *Ymean;
 8009722:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800972a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800972e:	f7f6 fd9d 	bl	800026c <__aeabi_dsub>
 8009732:	4602      	mov	r2, r0
 8009734:	460b      	mov	r3, r1
 8009736:	e9c7 2308 	strd	r2, r3, [r7, #32]
  for (knt = 0; knt < 6; knt++) {
 800973a:	2300      	movs	r3, #0
 800973c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009740:	e01c      	b.n	800977c <UTMeanCovSqrt_C6QfB9Td+0x100>
    Y2[knt] -= *Ymean;
 8009742:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009746:	00db      	lsls	r3, r3, #3
 8009748:	69fa      	ldr	r2, [r7, #28]
 800974a:	4413      	add	r3, r2
 800974c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009750:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009754:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009758:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800975c:	00db      	lsls	r3, r3, #3
 800975e:	69fa      	ldr	r2, [r7, #28]
 8009760:	18d4      	adds	r4, r2, r3
 8009762:	4642      	mov	r2, r8
 8009764:	464b      	mov	r3, r9
 8009766:	f7f6 fd81 	bl	800026c <__aeabi_dsub>
 800976a:	4602      	mov	r2, r0
 800976c:	460b      	mov	r3, r1
 800976e:	e9c4 2300 	strd	r2, r3, [r4]
  for (knt = 0; knt < 6; knt++) {
 8009772:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009776:	3301      	adds	r3, #1
 8009778:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800977c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009780:	2b05      	cmp	r3, #5
 8009782:	ddde      	ble.n	8009742 <UTMeanCovSqrt_C6QfB9Td+0xc6>
  }

  if (rtIsNaN(OOM)) {
 8009784:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 8009788:	f003 f82c 	bl	800c7e4 <rtIsNaN>
 800978c:	4603      	mov	r3, r0
 800978e:	2b00      	cmp	r3, #0
 8009790:	d004      	beq.n	800979c <UTMeanCovSqrt_C6QfB9Td+0x120>
    signOOM = OOM;
 8009792:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009796:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 800979a:	e025      	b.n	80097e8 <UTMeanCovSqrt_C6QfB9Td+0x16c>
  } else if (OOM < 0.0) {
 800979c:	f04f 0200 	mov.w	r2, #0
 80097a0:	f04f 0300 	mov.w	r3, #0
 80097a4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80097a8:	f7f7 f98a 	bl	8000ac0 <__aeabi_dcmplt>
 80097ac:	4603      	mov	r3, r0
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d005      	beq.n	80097be <UTMeanCovSqrt_C6QfB9Td+0x142>
    signOOM = -1.0;
 80097b2:	f04f 0200 	mov.w	r2, #0
 80097b6:	4bc3      	ldr	r3, [pc, #780]	; (8009ac4 <UTMeanCovSqrt_C6QfB9Td+0x448>)
 80097b8:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 80097bc:	e014      	b.n	80097e8 <UTMeanCovSqrt_C6QfB9Td+0x16c>
  } else {
    signOOM = (OOM > 0.0);
 80097be:	f04f 0200 	mov.w	r2, #0
 80097c2:	f04f 0300 	mov.w	r3, #0
 80097c6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80097ca:	f7f7 f997 	bl	8000afc <__aeabi_dcmpgt>
 80097ce:	4603      	mov	r3, r0
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d003      	beq.n	80097dc <UTMeanCovSqrt_C6QfB9Td+0x160>
 80097d4:	f04f 0200 	mov.w	r2, #0
 80097d8:	4bbb      	ldr	r3, [pc, #748]	; (8009ac8 <UTMeanCovSqrt_C6QfB9Td+0x44c>)
 80097da:	e003      	b.n	80097e4 <UTMeanCovSqrt_C6QfB9Td+0x168>
 80097dc:	f04f 0200 	mov.w	r2, #0
 80097e0:	f04f 0300 	mov.w	r3, #0
 80097e4:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  }

  covWeights_0 = signOOM * covWeights[0];
 80097e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80097ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80097f2:	f7f6 fef3 	bl	80005dc <__aeabi_dmul>
 80097f6:	4602      	mov	r2, r0
 80097f8:	460b      	mov	r3, r1
 80097fa:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
  covWeights_1 = signOOM * covWeights[1];
 80097fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009800:	3308      	adds	r3, #8
 8009802:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009806:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800980a:	f7f6 fee7 	bl	80005dc <__aeabi_dmul>
 800980e:	4602      	mov	r2, r0
 8009810:	460b      	mov	r3, r1
 8009812:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
  OOM *= signOOM;
 8009816:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800981a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800981e:	f7f6 fedd 	bl	80005dc <__aeabi_dmul>
 8009822:	4602      	mov	r2, r0
 8009824:	460b      	mov	r3, r1
 8009826:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  signOOM = sqrt(covWeights_1);
 800982a:	ed97 0b26 	vldr	d0, [r7, #152]	; 0x98
 800982e:	f010 fc6b 	bl	801a108 <sqrt>
 8009832:	eeb0 7a40 	vmov.f32	s14, s0
 8009836:	eef0 7a60 	vmov.f32	s15, s1
 800983a:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
  for (knt = 0; knt < 6; knt++) {
 800983e:	2300      	movs	r3, #0
 8009840:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009844:	e01a      	b.n	800987c <UTMeanCovSqrt_C6QfB9Td+0x200>
    A[knt] = signOOM * Y2[knt];
 8009846:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800984a:	00db      	lsls	r3, r3, #3
 800984c:	69fa      	ldr	r2, [r7, #28]
 800984e:	4413      	add	r3, r2
 8009850:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009854:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009858:	f7f6 fec0 	bl	80005dc <__aeabi_dmul>
 800985c:	4602      	mov	r2, r0
 800985e:	460b      	mov	r3, r1
 8009860:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009864:	00c9      	lsls	r1, r1, #3
 8009866:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 800986a:	4401      	add	r1, r0
 800986c:	3948      	subs	r1, #72	; 0x48
 800986e:	e9c1 2300 	strd	r2, r3, [r1]
  for (knt = 0; knt < 6; knt++) {
 8009872:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009876:	3301      	adds	r3, #1
 8009878:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800987c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009880:	2b05      	cmp	r3, #5
 8009882:	dde0      	ble.n	8009846 <UTMeanCovSqrt_C6QfB9Td+0x1ca>
  }

  signOOM = A[0];
 8009884:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8009888:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  xnorm = xnrm2_7bm34mDQ(5, A, 2);
 800988c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8009890:	2202      	movs	r2, #2
 8009892:	4619      	mov	r1, r3
 8009894:	2005      	movs	r0, #5
 8009896:	f005 f973 	bl	800eb80 <xnrm2_7bm34mDQ>
 800989a:	eeb0 7a40 	vmov.f32	s14, s0
 800989e:	eef0 7a60 	vmov.f32	s15, s1
 80098a2:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
  if (xnorm != 0.0) {
 80098a6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80098aa:	f04f 0200 	mov.w	r2, #0
 80098ae:	f04f 0300 	mov.w	r3, #0
 80098b2:	f7f7 f8fb 	bl	8000aac <__aeabi_dcmpeq>
 80098b6:	4603      	mov	r3, r0
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	f040 80e7 	bne.w	8009a8c <UTMeanCovSqrt_C6QfB9Td+0x410>
    xnorm = rt_hypotd_snf(A[0], xnorm);
 80098be:	ed97 7b1a 	vldr	d7, [r7, #104]	; 0x68
 80098c2:	ed97 6b0e 	vldr	d6, [r7, #56]	; 0x38
 80098c6:	eeb0 1a46 	vmov.f32	s2, s12
 80098ca:	eef0 1a66 	vmov.f32	s3, s13
 80098ce:	eeb0 0a47 	vmov.f32	s0, s14
 80098d2:	eef0 0a67 	vmov.f32	s1, s15
 80098d6:	f002 fe77 	bl	800c5c8 <rt_hypotd_snf>
 80098da:	eeb0 7a40 	vmov.f32	s14, s0
 80098de:	eef0 7a60 	vmov.f32	s15, s1
 80098e2:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
    if (A[0] >= 0.0) {
 80098e6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80098ea:	f04f 0200 	mov.w	r2, #0
 80098ee:	f04f 0300 	mov.w	r3, #0
 80098f2:	f7f7 f8f9 	bl	8000ae8 <__aeabi_dcmpge>
 80098f6:	4603      	mov	r3, r0
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d009      	beq.n	8009910 <UTMeanCovSqrt_C6QfB9Td+0x294>
      xnorm = -xnorm;
 80098fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009900:	613a      	str	r2, [r7, #16]
 8009902:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8009906:	617b      	str	r3, [r7, #20]
 8009908:	ed97 7b04 	vldr	d7, [r7, #16]
 800990c:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
    }

    if (fabs(xnorm) < 1.0020841800044864E-292) {
 8009910:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009914:	60ba      	str	r2, [r7, #8]
 8009916:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800991a:	60fb      	str	r3, [r7, #12]
 800991c:	f04f 0200 	mov.w	r2, #0
 8009920:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 8009924:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009928:	f7f7 f8ca 	bl	8000ac0 <__aeabi_dcmplt>
 800992c:	4603      	mov	r3, r0
 800992e:	2b00      	cmp	r3, #0
 8009930:	f000 80a8 	beq.w	8009a84 <UTMeanCovSqrt_C6QfB9Td+0x408>
      knt = 0;
 8009934:	2300      	movs	r3, #0
 8009936:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
      do {
        knt++;
 800993a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800993e:	3301      	adds	r3, #1
 8009940:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        for (b_k = 1; b_k < 6; b_k++) {
 8009944:	2301      	movs	r3, #1
 8009946:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800994a:	e01d      	b.n	8009988 <UTMeanCovSqrt_C6QfB9Td+0x30c>
          A[b_k] *= 9.9792015476736E+291;
 800994c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009950:	00db      	lsls	r3, r3, #3
 8009952:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8009956:	4413      	add	r3, r2
 8009958:	3b48      	subs	r3, #72	; 0x48
 800995a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800995e:	f04f 0200 	mov.w	r2, #0
 8009962:	4b5a      	ldr	r3, [pc, #360]	; (8009acc <UTMeanCovSqrt_C6QfB9Td+0x450>)
 8009964:	f7f6 fe3a 	bl	80005dc <__aeabi_dmul>
 8009968:	4602      	mov	r2, r0
 800996a:	460b      	mov	r3, r1
 800996c:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8009970:	00c9      	lsls	r1, r1, #3
 8009972:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8009976:	4401      	add	r1, r0
 8009978:	3948      	subs	r1, #72	; 0x48
 800997a:	e9c1 2300 	strd	r2, r3, [r1]
        for (b_k = 1; b_k < 6; b_k++) {
 800997e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009982:	3301      	adds	r3, #1
 8009984:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009988:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800998c:	2b05      	cmp	r3, #5
 800998e:	dddd      	ble.n	800994c <UTMeanCovSqrt_C6QfB9Td+0x2d0>
        }

        xnorm *= 9.9792015476736E+291;
 8009990:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009994:	f04f 0200 	mov.w	r2, #0
 8009998:	4b4c      	ldr	r3, [pc, #304]	; (8009acc <UTMeanCovSqrt_C6QfB9Td+0x450>)
 800999a:	f7f6 fe1f 	bl	80005dc <__aeabi_dmul>
 800999e:	4602      	mov	r2, r0
 80099a0:	460b      	mov	r3, r1
 80099a2:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
        signOOM *= 9.9792015476736E+291;
 80099a6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80099aa:	f04f 0200 	mov.w	r2, #0
 80099ae:	4b47      	ldr	r3, [pc, #284]	; (8009acc <UTMeanCovSqrt_C6QfB9Td+0x450>)
 80099b0:	f7f6 fe14 	bl	80005dc <__aeabi_dmul>
 80099b4:	4602      	mov	r2, r0
 80099b6:	460b      	mov	r3, r1
 80099b8:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      } while ((fabs(xnorm) < 1.0020841800044864E-292) && (knt < 20));
 80099bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80099c0:	603a      	str	r2, [r7, #0]
 80099c2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80099c6:	607b      	str	r3, [r7, #4]
 80099c8:	f04f 0200 	mov.w	r2, #0
 80099cc:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 80099d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80099d4:	f7f7 f874 	bl	8000ac0 <__aeabi_dcmplt>
 80099d8:	4603      	mov	r3, r0
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d003      	beq.n	80099e6 <UTMeanCovSqrt_C6QfB9Td+0x36a>
 80099de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80099e2:	2b13      	cmp	r3, #19
 80099e4:	dda9      	ble.n	800993a <UTMeanCovSqrt_C6QfB9Td+0x2be>

      xnorm = rt_hypotd_snf(signOOM, xnrm2_7bm34mDQ(5, A, 2));
 80099e6:	ed97 8b10 	vldr	d8, [r7, #64]	; 0x40
 80099ea:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80099ee:	2202      	movs	r2, #2
 80099f0:	4619      	mov	r1, r3
 80099f2:	2005      	movs	r0, #5
 80099f4:	f005 f8c4 	bl	800eb80 <xnrm2_7bm34mDQ>
 80099f8:	eeb0 7a40 	vmov.f32	s14, s0
 80099fc:	eef0 7a60 	vmov.f32	s15, s1
 8009a00:	eeb0 1a47 	vmov.f32	s2, s14
 8009a04:	eef0 1a67 	vmov.f32	s3, s15
 8009a08:	eeb0 0a48 	vmov.f32	s0, s16
 8009a0c:	eef0 0a68 	vmov.f32	s1, s17
 8009a10:	f002 fdda 	bl	800c5c8 <rt_hypotd_snf>
 8009a14:	eeb0 7a40 	vmov.f32	s14, s0
 8009a18:	eef0 7a60 	vmov.f32	s15, s1
 8009a1c:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
      if (signOOM >= 0.0) {
 8009a20:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009a24:	f04f 0200 	mov.w	r2, #0
 8009a28:	f04f 0300 	mov.w	r3, #0
 8009a2c:	f7f7 f85c 	bl	8000ae8 <__aeabi_dcmpge>
 8009a30:	4603      	mov	r3, r0
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d006      	beq.n	8009a44 <UTMeanCovSqrt_C6QfB9Td+0x3c8>
        xnorm = -xnorm;
 8009a36:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009a3a:	4692      	mov	sl, r2
 8009a3c:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 8009a40:	e9c7 ab0e 	strd	sl, fp, [r7, #56]	; 0x38
      }

      for (b_k = 0; b_k < knt; b_k++) {
 8009a44:	2300      	movs	r3, #0
 8009a46:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009a4a:	e010      	b.n	8009a6e <UTMeanCovSqrt_C6QfB9Td+0x3f2>
        xnorm *= 1.0020841800044864E-292;
 8009a4c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009a50:	f04f 0200 	mov.w	r2, #0
 8009a54:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 8009a58:	f7f6 fdc0 	bl	80005dc <__aeabi_dmul>
 8009a5c:	4602      	mov	r2, r0
 8009a5e:	460b      	mov	r3, r1
 8009a60:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
      for (b_k = 0; b_k < knt; b_k++) {
 8009a64:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009a68:	3301      	adds	r3, #1
 8009a6a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009a6e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009a72:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009a76:	429a      	cmp	r2, r3
 8009a78:	dbe8      	blt.n	8009a4c <UTMeanCovSqrt_C6QfB9Td+0x3d0>
      }

      signOOM = xnorm;
 8009a7a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009a7e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8009a82:	e003      	b.n	8009a8c <UTMeanCovSqrt_C6QfB9Td+0x410>
    } else {
      signOOM = xnorm;
 8009a84:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009a88:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    }
  }

  if (!rtIsNaN(covWeights_0)) {
 8009a8c:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8009a90:	eeb0 0a47 	vmov.f32	s0, s14
 8009a94:	eef0 0a67 	vmov.f32	s1, s15
 8009a98:	f002 fea4 	bl	800c7e4 <rtIsNaN>
 8009a9c:	4603      	mov	r3, r0
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d12b      	bne.n	8009afa <UTMeanCovSqrt_C6QfB9Td+0x47e>
    if (covWeights_0 < 0.0) {
 8009aa2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8009aa6:	f04f 0200 	mov.w	r2, #0
 8009aaa:	f04f 0300 	mov.w	r3, #0
 8009aae:	f7f7 f807 	bl	8000ac0 <__aeabi_dcmplt>
 8009ab2:	4603      	mov	r3, r0
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d00b      	beq.n	8009ad0 <UTMeanCovSqrt_C6QfB9Td+0x454>
      covWeights_0 = -1.0;
 8009ab8:	f04f 0200 	mov.w	r2, #0
 8009abc:	4b01      	ldr	r3, [pc, #4]	; (8009ac4 <UTMeanCovSqrt_C6QfB9Td+0x448>)
 8009abe:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 8009ac2:	e01a      	b.n	8009afa <UTMeanCovSqrt_C6QfB9Td+0x47e>
 8009ac4:	bff00000 	.word	0xbff00000
 8009ac8:	3ff00000 	.word	0x3ff00000
 8009acc:	7c900000 	.word	0x7c900000
    } else {
      covWeights_0 = (covWeights_0 > 0.0);
 8009ad0:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8009ad4:	f04f 0200 	mov.w	r2, #0
 8009ad8:	f04f 0300 	mov.w	r3, #0
 8009adc:	f7f7 f80e 	bl	8000afc <__aeabi_dcmpgt>
 8009ae0:	4603      	mov	r3, r0
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d003      	beq.n	8009aee <UTMeanCovSqrt_C6QfB9Td+0x472>
 8009ae6:	f04f 0200 	mov.w	r2, #0
 8009aea:	4b99      	ldr	r3, [pc, #612]	; (8009d50 <UTMeanCovSqrt_C6QfB9Td+0x6d4>)
 8009aec:	e003      	b.n	8009af6 <UTMeanCovSqrt_C6QfB9Td+0x47a>
 8009aee:	f04f 0200 	mov.w	r2, #0
 8009af2:	f04f 0300 	mov.w	r3, #0
 8009af6:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    }
  }

  if (covWeights_0 == 1.0) {
 8009afa:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8009afe:	f04f 0200 	mov.w	r2, #0
 8009b02:	4b93      	ldr	r3, [pc, #588]	; (8009d50 <UTMeanCovSqrt_C6QfB9Td+0x6d4>)
 8009b04:	f7f6 ffd2 	bl	8000aac <__aeabi_dcmpeq>
 8009b08:	4603      	mov	r3, r0
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d021      	beq.n	8009b52 <UTMeanCovSqrt_C6QfB9Td+0x4d6>
    rotate_LZ7ctbe0(signOOM, Y1, &signOOM, &xnorm, &covWeights_0);
 8009b0e:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8009b12:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009b16:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8009b1a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009b1e:	4618      	mov	r0, r3
 8009b20:	ed97 1b08 	vldr	d1, [r7, #32]
 8009b24:	eeb0 0a47 	vmov.f32	s0, s14
 8009b28:	eef0 0a67 	vmov.f32	s1, s15
 8009b2c:	f002 fbc2 	bl	800c2b4 <rotate_LZ7ctbe0>
    *Sy = sqrt(OOM) * covWeights_0;
 8009b30:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 8009b34:	f010 fae8 	bl	801a108 <sqrt>
 8009b38:	ec51 0b10 	vmov	r0, r1, d0
 8009b3c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009b40:	f7f6 fd4c 	bl	80005dc <__aeabi_dmul>
 8009b44:	4602      	mov	r2, r0
 8009b46:	460b      	mov	r3, r1
 8009b48:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 8009b4c:	e9c1 2300 	strd	r2, r3, [r1]
 8009b50:	e016      	b.n	8009b80 <UTMeanCovSqrt_C6QfB9Td+0x504>
  } else {
    cholUpdateFactor_HBMX5a5h(&signOOM, Y1);
 8009b52:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009b56:	ed97 0b08 	vldr	d0, [r7, #32]
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	f000 f8fa 	bl	8009d54 <cholUpdateFactor_HBMX5a5h>
    *Sy = sqrt(OOM) * signOOM;
 8009b60:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 8009b64:	f010 fad0 	bl	801a108 <sqrt>
 8009b68:	ec51 0b10 	vmov	r0, r1, d0
 8009b6c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009b70:	f7f6 fd34 	bl	80005dc <__aeabi_dmul>
 8009b74:	4602      	mov	r2, r0
 8009b76:	460b      	mov	r3, r1
 8009b78:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 8009b7c:	e9c1 2300 	strd	r2, r3, [r1]
  }

  b_k = 0;
 8009b80:	2300      	movs	r3, #0
 8009b82:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  for (knt = 0; knt < 6; knt++) {
 8009b86:	2300      	movs	r3, #0
 8009b88:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009b8c:	e054      	b.n	8009c38 <UTMeanCovSqrt_C6QfB9Td+0x5bc>
    X2[b_k] -= X1[0];
 8009b8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009b92:	00db      	lsls	r3, r3, #3
 8009b94:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8009b98:	4413      	add	r3, r2
 8009b9a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009b9e:	69bb      	ldr	r3, [r7, #24]
 8009ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ba4:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 8009ba8:	00e4      	lsls	r4, r4, #3
 8009baa:	f8d7 50d8 	ldr.w	r5, [r7, #216]	; 0xd8
 8009bae:	442c      	add	r4, r5
 8009bb0:	f7f6 fb5c 	bl	800026c <__aeabi_dsub>
 8009bb4:	4602      	mov	r2, r0
 8009bb6:	460b      	mov	r3, r1
 8009bb8:	e9c4 2300 	strd	r2, r3, [r4]
    X2[b_k + 1] -= X1[1];
 8009bbc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009bc0:	3301      	adds	r3, #1
 8009bc2:	00db      	lsls	r3, r3, #3
 8009bc4:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8009bc8:	4413      	add	r3, r2
 8009bca:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009bce:	69bb      	ldr	r3, [r7, #24]
 8009bd0:	3308      	adds	r3, #8
 8009bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bd6:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 8009bda:	3401      	adds	r4, #1
 8009bdc:	00e4      	lsls	r4, r4, #3
 8009bde:	f8d7 50d8 	ldr.w	r5, [r7, #216]	; 0xd8
 8009be2:	442c      	add	r4, r5
 8009be4:	f7f6 fb42 	bl	800026c <__aeabi_dsub>
 8009be8:	4602      	mov	r2, r0
 8009bea:	460b      	mov	r3, r1
 8009bec:	e9c4 2300 	strd	r2, r3, [r4]
    X2[b_k + 2] -= X1[2];
 8009bf0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009bf4:	3302      	adds	r3, #2
 8009bf6:	00db      	lsls	r3, r3, #3
 8009bf8:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8009bfc:	4413      	add	r3, r2
 8009bfe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009c02:	69bb      	ldr	r3, [r7, #24]
 8009c04:	3310      	adds	r3, #16
 8009c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c0a:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 8009c0e:	3402      	adds	r4, #2
 8009c10:	00e4      	lsls	r4, r4, #3
 8009c12:	f8d7 50d8 	ldr.w	r5, [r7, #216]	; 0xd8
 8009c16:	442c      	add	r4, r5
 8009c18:	f7f6 fb28 	bl	800026c <__aeabi_dsub>
 8009c1c:	4602      	mov	r2, r0
 8009c1e:	460b      	mov	r3, r1
 8009c20:	e9c4 2300 	strd	r2, r3, [r4]
    b_k += 3;
 8009c24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009c28:	3303      	adds	r3, #3
 8009c2a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  for (knt = 0; knt < 6; knt++) {
 8009c2e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009c32:	3301      	adds	r3, #1
 8009c34:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009c38:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009c3c:	2b05      	cmp	r3, #5
 8009c3e:	dda6      	ble.n	8009b8e <UTMeanCovSqrt_C6QfB9Td+0x512>
  }

  signOOM = covWeights_1 * OOM;
 8009c40:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009c44:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009c48:	f7f6 fcc8 	bl	80005dc <__aeabi_dmul>
 8009c4c:	4602      	mov	r2, r0
 8009c4e:	460b      	mov	r3, r1
 8009c50:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  for (knt = 0; knt < 3; knt++) {
 8009c54:	2300      	movs	r3, #0
 8009c56:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009c5a:	e06c      	b.n	8009d36 <UTMeanCovSqrt_C6QfB9Td+0x6ba>
    X2_0[knt] = 0.0;
 8009c5c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009c60:	00db      	lsls	r3, r3, #3
 8009c62:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8009c66:	4413      	add	r3, r2
 8009c68:	f1a3 0160 	sub.w	r1, r3, #96	; 0x60
 8009c6c:	f04f 0200 	mov.w	r2, #0
 8009c70:	f04f 0300 	mov.w	r3, #0
 8009c74:	e9c1 2300 	strd	r2, r3, [r1]
    b_k = 0;
 8009c78:	2300      	movs	r3, #0
 8009c7a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    for (i = 0; i < 6; i++) {
 8009c7e:	2300      	movs	r3, #0
 8009c80:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009c84:	e037      	b.n	8009cf6 <UTMeanCovSqrt_C6QfB9Td+0x67a>
      X2_0[knt] += X2[b_k + knt] * Y2[i];
 8009c86:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009c8a:	00db      	lsls	r3, r3, #3
 8009c8c:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8009c90:	4413      	add	r3, r2
 8009c92:	3b60      	subs	r3, #96	; 0x60
 8009c94:	e9d3 4500 	ldrd	r4, r5, [r3]
 8009c98:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009c9c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009ca0:	4413      	add	r3, r2
 8009ca2:	00db      	lsls	r3, r3, #3
 8009ca4:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8009ca8:	4413      	add	r3, r2
 8009caa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009cae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009cb2:	00db      	lsls	r3, r3, #3
 8009cb4:	69fa      	ldr	r2, [r7, #28]
 8009cb6:	4413      	add	r3, r2
 8009cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cbc:	f7f6 fc8e 	bl	80005dc <__aeabi_dmul>
 8009cc0:	4602      	mov	r2, r0
 8009cc2:	460b      	mov	r3, r1
 8009cc4:	4620      	mov	r0, r4
 8009cc6:	4629      	mov	r1, r5
 8009cc8:	f7f6 fad2 	bl	8000270 <__adddf3>
 8009ccc:	4602      	mov	r2, r0
 8009cce:	460b      	mov	r3, r1
 8009cd0:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009cd4:	00c9      	lsls	r1, r1, #3
 8009cd6:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8009cda:	4401      	add	r1, r0
 8009cdc:	3960      	subs	r1, #96	; 0x60
 8009cde:	e9c1 2300 	strd	r2, r3, [r1]
      b_k += 3;
 8009ce2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009ce6:	3303      	adds	r3, #3
 8009ce8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    for (i = 0; i < 6; i++) {
 8009cec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009cf0:	3301      	adds	r3, #1
 8009cf2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009cf6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009cfa:	2b05      	cmp	r3, #5
 8009cfc:	ddc3      	ble.n	8009c86 <UTMeanCovSqrt_C6QfB9Td+0x60a>
    }

    Pxy[knt] = X2_0[knt] * signOOM;
 8009cfe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009d02:	00db      	lsls	r3, r3, #3
 8009d04:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8009d08:	4413      	add	r3, r2
 8009d0a:	3b60      	subs	r3, #96	; 0x60
 8009d0c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009d10:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009d14:	f8d7 40a4 	ldr.w	r4, [r7, #164]	; 0xa4
 8009d18:	00e4      	lsls	r4, r4, #3
 8009d1a:	f8d7 50e4 	ldr.w	r5, [r7, #228]	; 0xe4
 8009d1e:	442c      	add	r4, r5
 8009d20:	f7f6 fc5c 	bl	80005dc <__aeabi_dmul>
 8009d24:	4602      	mov	r2, r0
 8009d26:	460b      	mov	r3, r1
 8009d28:	e9c4 2300 	strd	r2, r3, [r4]
  for (knt = 0; knt < 3; knt++) {
 8009d2c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009d30:	3301      	adds	r3, #1
 8009d32:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009d36:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009d3a:	2b02      	cmp	r3, #2
 8009d3c:	dd8e      	ble.n	8009c5c <UTMeanCovSqrt_C6QfB9Td+0x5e0>
  }
}
 8009d3e:	bf00      	nop
 8009d40:	bf00      	nop
 8009d42:	37b0      	adds	r7, #176	; 0xb0
 8009d44:	46bd      	mov	sp, r7
 8009d46:	ecbd 8b02 	vpop	{d8}
 8009d4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009d4e:	bf00      	nop
 8009d50:	3ff00000 	.word	0x3ff00000

08009d54 <cholUpdateFactor_HBMX5a5h>:
#include "rotate_LZ7ctbe0.h"
#include "rt_nonfinite.h"
#include "rtGetNaN.h"

void cholUpdateFactor_HBMX5a5h(real_T *S, real_T U)
{
 8009d54:	b5b0      	push	{r4, r5, r7, lr}
 8009d56:	b090      	sub	sp, #64	; 0x40
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	60f8      	str	r0, [r7, #12]
 8009d5c:	ed87 0b00 	vstr	d0, [r7]
  real_T alpha;
  real_T c;
  real_T nrmx;
  real_T s;
  int8_T p;
  R = *S;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d66:	e9c7 2308 	strd	r2, r3, [r7, #32]
  p = 0;
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (*S == 0.0) {
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009d76:	f04f 0200 	mov.w	r2, #0
 8009d7a:	f04f 0300 	mov.w	r3, #0
 8009d7e:	f7f6 fe95 	bl	8000aac <__aeabi_dcmpeq>
 8009d82:	4603      	mov	r3, r0
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d003      	beq.n	8009d90 <cholUpdateFactor_HBMX5a5h+0x3c>
    p = 2;
 8009d88:	2302      	movs	r3, #2
 8009d8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009d8e:	e065      	b.n	8009e5c <cholUpdateFactor_HBMX5a5h+0x108>
  } else {
    s = U / *S;
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d96:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009d9a:	f7f6 fd49 	bl	8000830 <__aeabi_ddiv>
 8009d9e:	4602      	mov	r2, r0
 8009da0:	460b      	mov	r3, r1
 8009da2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    nrmx = fabs(s);
 8009da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009da8:	63bb      	str	r3, [r7, #56]	; 0x38
 8009daa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009db0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (nrmx >= 1.0) {
 8009db2:	f04f 0200 	mov.w	r2, #0
 8009db6:	4b5c      	ldr	r3, [pc, #368]	; (8009f28 <cholUpdateFactor_HBMX5a5h+0x1d4>)
 8009db8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009dbc:	f7f6 fe94 	bl	8000ae8 <__aeabi_dcmpge>
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d003      	beq.n	8009dce <cholUpdateFactor_HBMX5a5h+0x7a>
      p = 1;
 8009dc6:	2301      	movs	r3, #1
 8009dc8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009dcc:	e046      	b.n	8009e5c <cholUpdateFactor_HBMX5a5h+0x108>
    } else {
      rotate_LZ7ctbe0(sqrt(1.0 - nrmx * nrmx), s, &R, &c, &alpha);
 8009dce:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009dd2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009dd6:	f7f6 fc01 	bl	80005dc <__aeabi_dmul>
 8009dda:	4602      	mov	r2, r0
 8009ddc:	460b      	mov	r3, r1
 8009dde:	f04f 0000 	mov.w	r0, #0
 8009de2:	4951      	ldr	r1, [pc, #324]	; (8009f28 <cholUpdateFactor_HBMX5a5h+0x1d4>)
 8009de4:	f7f6 fa42 	bl	800026c <__aeabi_dsub>
 8009de8:	4602      	mov	r2, r0
 8009dea:	460b      	mov	r3, r1
 8009dec:	ec43 2b17 	vmov	d7, r2, r3
 8009df0:	eeb0 0a47 	vmov.f32	s0, s14
 8009df4:	eef0 0a67 	vmov.f32	s1, s15
 8009df8:	f010 f986 	bl	801a108 <sqrt>
 8009dfc:	eeb0 7a40 	vmov.f32	s14, s0
 8009e00:	eef0 7a60 	vmov.f32	s15, s1
 8009e04:	f107 0218 	add.w	r2, r7, #24
 8009e08:	f107 0110 	add.w	r1, r7, #16
 8009e0c:	f107 0320 	add.w	r3, r7, #32
 8009e10:	4618      	mov	r0, r3
 8009e12:	ed97 1b0c 	vldr	d1, [r7, #48]	; 0x30
 8009e16:	eeb0 0a47 	vmov.f32	s0, s14
 8009e1a:	eef0 0a67 	vmov.f32	s1, s15
 8009e1e:	f002 fa49 	bl	800c2b4 <rotate_LZ7ctbe0>
      R = R * *S - c * 0.0;
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009e28:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009e2c:	f7f6 fbd6 	bl	80005dc <__aeabi_dmul>
 8009e30:	4602      	mov	r2, r0
 8009e32:	460b      	mov	r3, r1
 8009e34:	4614      	mov	r4, r2
 8009e36:	461d      	mov	r5, r3
 8009e38:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8009e3c:	f04f 0200 	mov.w	r2, #0
 8009e40:	f04f 0300 	mov.w	r3, #0
 8009e44:	f7f6 fbca 	bl	80005dc <__aeabi_dmul>
 8009e48:	4602      	mov	r2, r0
 8009e4a:	460b      	mov	r3, r1
 8009e4c:	4620      	mov	r0, r4
 8009e4e:	4629      	mov	r1, r5
 8009e50:	f7f6 fa0c 	bl	800026c <__aeabi_dsub>
 8009e54:	4602      	mov	r2, r0
 8009e56:	460b      	mov	r3, r1
 8009e58:	e9c7 2308 	strd	r2, r3, [r7, #32]
    }
  }

  *S = R;
 8009e5c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009e60:	68f9      	ldr	r1, [r7, #12]
 8009e62:	e9c1 2300 	strd	r2, r3, [r1]
  if (p != 0) {
 8009e66:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d057      	beq.n	8009f1e <cholUpdateFactor_HBMX5a5h+0x1ca>
    s = R * R - U * U;
 8009e6e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8009e72:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009e76:	f7f6 fbb1 	bl	80005dc <__aeabi_dmul>
 8009e7a:	4602      	mov	r2, r0
 8009e7c:	460b      	mov	r3, r1
 8009e7e:	4614      	mov	r4, r2
 8009e80:	461d      	mov	r5, r3
 8009e82:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e86:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009e8a:	f7f6 fba7 	bl	80005dc <__aeabi_dmul>
 8009e8e:	4602      	mov	r2, r0
 8009e90:	460b      	mov	r3, r1
 8009e92:	4620      	mov	r0, r4
 8009e94:	4629      	mov	r1, r5
 8009e96:	f7f6 f9e9 	bl	800026c <__aeabi_dsub>
 8009e9a:	4602      	mov	r2, r0
 8009e9c:	460b      	mov	r3, r1
 8009e9e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    if ((!rtIsInf(s)) && (!rtIsNaN(s))) {
 8009ea2:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 8009ea6:	f002 fc79 	bl	800c79c <rtIsInf>
 8009eaa:	4603      	mov	r3, r0
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d11d      	bne.n	8009eec <cholUpdateFactor_HBMX5a5h+0x198>
 8009eb0:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 8009eb4:	f002 fc96 	bl	800c7e4 <rtIsNaN>
 8009eb8:	4603      	mov	r3, r0
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d116      	bne.n	8009eec <cholUpdateFactor_HBMX5a5h+0x198>
      nrmx = 1.0;
 8009ebe:	f04f 0200 	mov.w	r2, #0
 8009ec2:	4b19      	ldr	r3, [pc, #100]	; (8009f28 <cholUpdateFactor_HBMX5a5h+0x1d4>)
 8009ec4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
      if (s != 0.0) {
 8009ec8:	f04f 0200 	mov.w	r2, #0
 8009ecc:	f04f 0300 	mov.w	r3, #0
 8009ed0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8009ed4:	f7f6 fdea 	bl	8000aac <__aeabi_dcmpeq>
 8009ed8:	4603      	mov	r3, r0
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d110      	bne.n	8009f00 <cholUpdateFactor_HBMX5a5h+0x1ac>
        s = fabs(s);
 8009ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ee0:	633b      	str	r3, [r7, #48]	; 0x30
 8009ee2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ee4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009ee8:	637b      	str	r3, [r7, #52]	; 0x34
      if (s != 0.0) {
 8009eea:	e009      	b.n	8009f00 <cholUpdateFactor_HBMX5a5h+0x1ac>
      }
    } else {
      s = (rtNaN);
 8009eec:	4b0f      	ldr	r3, [pc, #60]	; (8009f2c <cholUpdateFactor_HBMX5a5h+0x1d8>)
 8009eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ef2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      nrmx = (rtNaN);
 8009ef6:	4b0d      	ldr	r3, [pc, #52]	; (8009f2c <cholUpdateFactor_HBMX5a5h+0x1d8>)
 8009ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009efc:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }

    *S = nrmx * sqrt(s);
 8009f00:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 8009f04:	f010 f900 	bl	801a108 <sqrt>
 8009f08:	ec51 0b10 	vmov	r0, r1, d0
 8009f0c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009f10:	f7f6 fb64 	bl	80005dc <__aeabi_dmul>
 8009f14:	4602      	mov	r2, r0
 8009f16:	460b      	mov	r3, r1
 8009f18:	68f9      	ldr	r1, [r7, #12]
 8009f1a:	e9c1 2300 	strd	r2, r3, [r1]
  }
}
 8009f1e:	bf00      	nop
 8009f20:	3740      	adds	r7, #64	; 0x40
 8009f22:	46bd      	mov	sp, r7
 8009f24:	bdb0      	pop	{r4, r5, r7, pc}
 8009f26:	bf00      	nop
 8009f28:	3ff00000 	.word	0x3ff00000
 8009f2c:	2001e918 	.word	0x2001e918

08009f30 <look1_binlxpw>:
#include "look1_binlxpw.h"
#include "rtwtypes.h"

real_T look1_binlxpw(real_T u0, const real_T bp0[], const real_T table[],
                     uint32_T maxIndex)
{
 8009f30:	b5b0      	push	{r4, r5, r7, lr}
 8009f32:	b08e      	sub	sp, #56	; 0x38
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	ed87 0b04 	vstr	d0, [r7, #16]
 8009f3a:	60f8      	str	r0, [r7, #12]
 8009f3c:	60b9      	str	r1, [r7, #8]
 8009f3e:	607a      	str	r2, [r7, #4]
  real_T frac;
  real_T yL_0d0;
  uint32_T iLeft;
  if (u0 <= bp0[0U]) {
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f46:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8009f4a:	f7f6 fdc3 	bl	8000ad4 <__aeabi_dcmple>
 8009f4e:	4603      	mov	r3, r0
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d020      	beq.n	8009f96 <look1_binlxpw+0x66>
    iLeft = 0U;
 8009f54:	2300      	movs	r3, #0
 8009f56:	62fb      	str	r3, [r7, #44]	; 0x2c
    frac = (u0 - bp0[0U]) / (bp0[1U] - bp0[0U]);
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f5e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8009f62:	f7f6 f983 	bl	800026c <__aeabi_dsub>
 8009f66:	4602      	mov	r2, r0
 8009f68:	460b      	mov	r3, r1
 8009f6a:	4614      	mov	r4, r2
 8009f6c:	461d      	mov	r5, r3
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	3308      	adds	r3, #8
 8009f72:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f7c:	f7f6 f976 	bl	800026c <__aeabi_dsub>
 8009f80:	4602      	mov	r2, r0
 8009f82:	460b      	mov	r3, r1
 8009f84:	4620      	mov	r0, r4
 8009f86:	4629      	mov	r1, r5
 8009f88:	f7f6 fc52 	bl	8000830 <__aeabi_ddiv>
 8009f8c:	4602      	mov	r2, r0
 8009f8e:	460b      	mov	r3, r1
 8009f90:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8009f94:	e087      	b.n	800a0a6 <look1_binlxpw+0x176>
  } else if (u0 < bp0[maxIndex]) {
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	00db      	lsls	r3, r3, #3
 8009f9a:	68fa      	ldr	r2, [r7, #12]
 8009f9c:	4413      	add	r3, r2
 8009f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fa2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8009fa6:	f7f6 fd8b 	bl	8000ac0 <__aeabi_dcmplt>
 8009faa:	4603      	mov	r3, r0
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d04b      	beq.n	800a048 <look1_binlxpw+0x118>
    uint32_T bpIdx;
    uint32_T iRght;
    bpIdx = maxIndex >> 1U;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	085b      	lsrs	r3, r3, #1
 8009fb4:	62bb      	str	r3, [r7, #40]	; 0x28
    iLeft = 0U;
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    iRght = maxIndex;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	627b      	str	r3, [r7, #36]	; 0x24
    while (iRght - iLeft > 1U) {
 8009fbe:	e016      	b.n	8009fee <look1_binlxpw+0xbe>
      if (u0 < bp0[bpIdx]) {
 8009fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fc2:	00db      	lsls	r3, r3, #3
 8009fc4:	68fa      	ldr	r2, [r7, #12]
 8009fc6:	4413      	add	r3, r2
 8009fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fcc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8009fd0:	f7f6 fd76 	bl	8000ac0 <__aeabi_dcmplt>
 8009fd4:	4603      	mov	r3, r0
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d002      	beq.n	8009fe0 <look1_binlxpw+0xb0>
        iRght = bpIdx;
 8009fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fdc:	627b      	str	r3, [r7, #36]	; 0x24
 8009fde:	e001      	b.n	8009fe4 <look1_binlxpw+0xb4>
      } else {
        iLeft = bpIdx;
 8009fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      bpIdx = (iRght + iLeft) >> 1U;
 8009fe4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fe8:	4413      	add	r3, r2
 8009fea:	085b      	lsrs	r3, r3, #1
 8009fec:	62bb      	str	r3, [r7, #40]	; 0x28
    while (iRght - iLeft > 1U) {
 8009fee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ff2:	1ad3      	subs	r3, r2, r3
 8009ff4:	2b01      	cmp	r3, #1
 8009ff6:	d8e3      	bhi.n	8009fc0 <look1_binlxpw+0x90>
    }

    frac = (u0 - bp0[iLeft]) / (bp0[iLeft + 1U] - bp0[iLeft]);
 8009ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ffa:	00db      	lsls	r3, r3, #3
 8009ffc:	68fa      	ldr	r2, [r7, #12]
 8009ffe:	4413      	add	r3, r2
 800a000:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a004:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a008:	f7f6 f930 	bl	800026c <__aeabi_dsub>
 800a00c:	4602      	mov	r2, r0
 800a00e:	460b      	mov	r3, r1
 800a010:	4614      	mov	r4, r2
 800a012:	461d      	mov	r5, r3
 800a014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a016:	3301      	adds	r3, #1
 800a018:	00db      	lsls	r3, r3, #3
 800a01a:	68fa      	ldr	r2, [r7, #12]
 800a01c:	4413      	add	r3, r2
 800a01e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a024:	00db      	lsls	r3, r3, #3
 800a026:	68fa      	ldr	r2, [r7, #12]
 800a028:	4413      	add	r3, r2
 800a02a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a02e:	f7f6 f91d 	bl	800026c <__aeabi_dsub>
 800a032:	4602      	mov	r2, r0
 800a034:	460b      	mov	r3, r1
 800a036:	4620      	mov	r0, r4
 800a038:	4629      	mov	r1, r5
 800a03a:	f7f6 fbf9 	bl	8000830 <__aeabi_ddiv>
 800a03e:	4602      	mov	r2, r0
 800a040:	460b      	mov	r3, r1
 800a042:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 800a046:	e02e      	b.n	800a0a6 <look1_binlxpw+0x176>
  } else {
    iLeft = maxIndex - 1U;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	3b01      	subs	r3, #1
 800a04c:	62fb      	str	r3, [r7, #44]	; 0x2c
    frac = (u0 - bp0[maxIndex - 1U]) / (bp0[maxIndex] - bp0[maxIndex - 1U]);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800a054:	3b01      	subs	r3, #1
 800a056:	00db      	lsls	r3, r3, #3
 800a058:	68fa      	ldr	r2, [r7, #12]
 800a05a:	4413      	add	r3, r2
 800a05c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a060:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a064:	f7f6 f902 	bl	800026c <__aeabi_dsub>
 800a068:	4602      	mov	r2, r0
 800a06a:	460b      	mov	r3, r1
 800a06c:	4614      	mov	r4, r2
 800a06e:	461d      	mov	r5, r3
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	00db      	lsls	r3, r3, #3
 800a074:	68fa      	ldr	r2, [r7, #12]
 800a076:	4413      	add	r3, r2
 800a078:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800a082:	3b01      	subs	r3, #1
 800a084:	00db      	lsls	r3, r3, #3
 800a086:	68fa      	ldr	r2, [r7, #12]
 800a088:	4413      	add	r3, r2
 800a08a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a08e:	f7f6 f8ed 	bl	800026c <__aeabi_dsub>
 800a092:	4602      	mov	r2, r0
 800a094:	460b      	mov	r3, r1
 800a096:	4620      	mov	r0, r4
 800a098:	4629      	mov	r1, r5
 800a09a:	f7f6 fbc9 	bl	8000830 <__aeabi_ddiv>
 800a09e:	4602      	mov	r2, r0
 800a0a0:	460b      	mov	r3, r1
 800a0a2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  }

  yL_0d0 = table[iLeft];
 800a0a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0a8:	00db      	lsls	r3, r3, #3
 800a0aa:	68ba      	ldr	r2, [r7, #8]
 800a0ac:	4413      	add	r3, r2
 800a0ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0b2:	e9c7 2306 	strd	r2, r3, [r7, #24]
  return (table[iLeft + 1U] - yL_0d0) * frac + yL_0d0;
 800a0b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0b8:	3301      	adds	r3, #1
 800a0ba:	00db      	lsls	r3, r3, #3
 800a0bc:	68ba      	ldr	r2, [r7, #8]
 800a0be:	4413      	add	r3, r2
 800a0c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a0c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a0c8:	f7f6 f8d0 	bl	800026c <__aeabi_dsub>
 800a0cc:	4602      	mov	r2, r0
 800a0ce:	460b      	mov	r3, r1
 800a0d0:	4610      	mov	r0, r2
 800a0d2:	4619      	mov	r1, r3
 800a0d4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a0d8:	f7f6 fa80 	bl	80005dc <__aeabi_dmul>
 800a0dc:	4602      	mov	r2, r0
 800a0de:	460b      	mov	r3, r1
 800a0e0:	4610      	mov	r0, r2
 800a0e2:	4619      	mov	r1, r3
 800a0e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a0e8:	f7f6 f8c2 	bl	8000270 <__adddf3>
 800a0ec:	4602      	mov	r2, r0
 800a0ee:	460b      	mov	r3, r1
 800a0f0:	ec43 2b17 	vmov	d7, r2, r3
}
 800a0f4:	eeb0 0a47 	vmov.f32	s0, s14
 800a0f8:	eef0 0a67 	vmov.f32	s1, s15
 800a0fc:	3738      	adds	r7, #56	; 0x38
 800a0fe:	46bd      	mov	sp, r7
 800a100:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800a104 <qr_5a2P8Gh6>:
#include <math.h>
#include "xgemv_fRiR1I1O.h"
#include "xgerc_tNNiazQU.h"

void qr_5a2P8Gh6(const real_T A[9], real_T Q[9], real_T R[9])
{
 800a104:	b5b0      	push	{r4, r5, r7, lr}
 800a106:	b0c0      	sub	sp, #256	; 0x100
 800a108:	af04      	add	r7, sp, #16
 800a10a:	6578      	str	r0, [r7, #84]	; 0x54
 800a10c:	6539      	str	r1, [r7, #80]	; 0x50
 800a10e:	64fa      	str	r2, [r7, #76]	; 0x4c
  int32_T c_lastc;
  int32_T coltop;
  int32_T exitg1;
  int32_T knt;
  boolean_T exitg2;
  memcpy(&b_A[0], &A[0], 9U * sizeof(real_T));
 800a110:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800a114:	2248      	movs	r2, #72	; 0x48
 800a116:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a118:	4618      	mov	r0, r3
 800a11a:	f00f fe2f 	bl	8019d7c <memcpy>
  tau_idx_0 = 0.0;
 800a11e:	f04f 0200 	mov.w	r2, #0
 800a122:	f04f 0300 	mov.w	r3, #0
 800a126:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
  work[0] = 0.0;
 800a12a:	f04f 0200 	mov.w	r2, #0
 800a12e:	f04f 0300 	mov.w	r3, #0
 800a132:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
  tau_idx_1 = 0.0;
 800a136:	f04f 0200 	mov.w	r2, #0
 800a13a:	f04f 0300 	mov.w	r3, #0
 800a13e:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
  work[1] = 0.0;
 800a142:	f04f 0200 	mov.w	r2, #0
 800a146:	f04f 0300 	mov.w	r3, #0
 800a14a:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
  work[2] = 0.0;
 800a14e:	f04f 0200 	mov.w	r2, #0
 800a152:	f04f 0300 	mov.w	r3, #0
 800a156:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
  atmp = b_A[0];
 800a15a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800a15e:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
  beta1 = xnrm2_xDOlDEtw(2, b_A, 2);
 800a162:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800a166:	2202      	movs	r2, #2
 800a168:	4619      	mov	r1, r3
 800a16a:	2002      	movs	r0, #2
 800a16c:	f004 ffc0 	bl	800f0f0 <xnrm2_xDOlDEtw>
 800a170:	ed87 0b38 	vstr	d0, [r7, #224]	; 0xe0
  if (beta1 != 0.0) {
 800a174:	f04f 0200 	mov.w	r2, #0
 800a178:	f04f 0300 	mov.w	r3, #0
 800a17c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a180:	f7f6 fc94 	bl	8000aac <__aeabi_dcmpeq>
 800a184:	4603      	mov	r3, r0
 800a186:	2b00      	cmp	r3, #0
 800a188:	f040 8172 	bne.w	800a470 <qr_5a2P8Gh6+0x36c>
    beta1 = rt_hypotd_snf(b_A[0], beta1);
 800a18c:	ed97 7b1c 	vldr	d7, [r7, #112]	; 0x70
 800a190:	ed97 1b38 	vldr	d1, [r7, #224]	; 0xe0
 800a194:	eeb0 0a47 	vmov.f32	s0, s14
 800a198:	eef0 0a67 	vmov.f32	s1, s15
 800a19c:	f002 fa14 	bl	800c5c8 <rt_hypotd_snf>
 800a1a0:	ed87 0b38 	vstr	d0, [r7, #224]	; 0xe0
    if (b_A[0] >= 0.0) {
 800a1a4:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800a1a8:	f04f 0200 	mov.w	r2, #0
 800a1ac:	f04f 0300 	mov.w	r3, #0
 800a1b0:	f7f6 fc9a 	bl	8000ae8 <__aeabi_dcmpge>
 800a1b4:	4603      	mov	r3, r0
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d009      	beq.n	800a1ce <qr_5a2P8Gh6+0xca>
      beta1 = -beta1;
 800a1ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a1be:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a1c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a1c6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800a1ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    }

    if (fabs(beta1) < 1.0020841800044864E-292) {
 800a1ce:	f8d7 40e0 	ldr.w	r4, [r7, #224]	; 0xe0
 800a1d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a1d6:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800a1da:	f04f 0200 	mov.w	r2, #0
 800a1de:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800a1e2:	4620      	mov	r0, r4
 800a1e4:	4629      	mov	r1, r5
 800a1e6:	f7f6 fc6b 	bl	8000ac0 <__aeabi_dcmplt>
 800a1ea:	4603      	mov	r3, r0
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	f000 80f1 	beq.w	800a3d4 <qr_5a2P8Gh6+0x2d0>
      knt = 0;
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      do {
        knt++;
 800a1f8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a1fc:	3301      	adds	r3, #1
 800a1fe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
        for (b_coltop = 1; b_coltop < 3; b_coltop++) {
 800a202:	2301      	movs	r3, #1
 800a204:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a208:	e01f      	b.n	800a24a <qr_5a2P8Gh6+0x146>
          b_A[b_coltop] *= 9.9792015476736E+291;
 800a20a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a20e:	00db      	lsls	r3, r3, #3
 800a210:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800a214:	4413      	add	r3, r2
 800a216:	3b80      	subs	r3, #128	; 0x80
 800a218:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a21c:	f04f 0200 	mov.w	r2, #0
 800a220:	4bc9      	ldr	r3, [pc, #804]	; (800a548 <qr_5a2P8Gh6+0x444>)
 800a222:	f7f6 f9db 	bl	80005dc <__aeabi_dmul>
 800a226:	4602      	mov	r2, r0
 800a228:	460b      	mov	r3, r1
 800a22a:	4610      	mov	r0, r2
 800a22c:	4619      	mov	r1, r3
 800a22e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a232:	00db      	lsls	r3, r3, #3
 800a234:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800a238:	4413      	add	r3, r2
 800a23a:	3b80      	subs	r3, #128	; 0x80
 800a23c:	e9c3 0100 	strd	r0, r1, [r3]
        for (b_coltop = 1; b_coltop < 3; b_coltop++) {
 800a240:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a244:	3301      	adds	r3, #1
 800a246:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a24a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a24e:	2b02      	cmp	r3, #2
 800a250:	dddb      	ble.n	800a20a <qr_5a2P8Gh6+0x106>
        }

        beta1 *= 9.9792015476736E+291;
 800a252:	f04f 0200 	mov.w	r2, #0
 800a256:	4bbc      	ldr	r3, [pc, #752]	; (800a548 <qr_5a2P8Gh6+0x444>)
 800a258:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a25c:	f7f6 f9be 	bl	80005dc <__aeabi_dmul>
 800a260:	4602      	mov	r2, r0
 800a262:	460b      	mov	r3, r1
 800a264:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
        atmp *= 9.9792015476736E+291;
 800a268:	f04f 0200 	mov.w	r2, #0
 800a26c:	4bb6      	ldr	r3, [pc, #728]	; (800a548 <qr_5a2P8Gh6+0x444>)
 800a26e:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 800a272:	f7f6 f9b3 	bl	80005dc <__aeabi_dmul>
 800a276:	4602      	mov	r2, r0
 800a278:	460b      	mov	r3, r1
 800a27a:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
      } while ((fabs(beta1) < 1.0020841800044864E-292) && (knt < 20));
 800a27e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a282:	643b      	str	r3, [r7, #64]	; 0x40
 800a284:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a288:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a28c:	647b      	str	r3, [r7, #68]	; 0x44
 800a28e:	f04f 0200 	mov.w	r2, #0
 800a292:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800a296:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800a29a:	f7f6 fc11 	bl	8000ac0 <__aeabi_dcmplt>
 800a29e:	4603      	mov	r3, r0
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d003      	beq.n	800a2ac <qr_5a2P8Gh6+0x1a8>
 800a2a4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a2a8:	2b13      	cmp	r3, #19
 800a2aa:	dda5      	ble.n	800a1f8 <qr_5a2P8Gh6+0xf4>

      beta1 = rt_hypotd_snf(atmp, xnrm2_xDOlDEtw(2, b_A, 2));
 800a2ac:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800a2b0:	2202      	movs	r2, #2
 800a2b2:	4619      	mov	r1, r3
 800a2b4:	2002      	movs	r0, #2
 800a2b6:	f004 ff1b 	bl	800f0f0 <xnrm2_xDOlDEtw>
 800a2ba:	eeb0 7a40 	vmov.f32	s14, s0
 800a2be:	eef0 7a60 	vmov.f32	s15, s1
 800a2c2:	eeb0 1a47 	vmov.f32	s2, s14
 800a2c6:	eef0 1a67 	vmov.f32	s3, s15
 800a2ca:	ed97 0b3a 	vldr	d0, [r7, #232]	; 0xe8
 800a2ce:	f002 f97b 	bl	800c5c8 <rt_hypotd_snf>
 800a2d2:	ed87 0b38 	vstr	d0, [r7, #224]	; 0xe0
      if (atmp >= 0.0) {
 800a2d6:	f04f 0200 	mov.w	r2, #0
 800a2da:	f04f 0300 	mov.w	r3, #0
 800a2de:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 800a2e2:	f7f6 fc01 	bl	8000ae8 <__aeabi_dcmpge>
 800a2e6:	4603      	mov	r3, r0
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d009      	beq.n	800a300 <qr_5a2P8Gh6+0x1fc>
        beta1 = -beta1;
 800a2ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a2f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a2f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a2f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800a2fc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      }

      tau_idx_0 = (beta1 - atmp) / beta1;
 800a300:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 800a304:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a308:	f7f5 ffb0 	bl	800026c <__aeabi_dsub>
 800a30c:	4602      	mov	r2, r0
 800a30e:	460b      	mov	r3, r1
 800a310:	4610      	mov	r0, r2
 800a312:	4619      	mov	r1, r3
 800a314:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800a318:	f7f6 fa8a 	bl	8000830 <__aeabi_ddiv>
 800a31c:	4602      	mov	r2, r0
 800a31e:	460b      	mov	r3, r1
 800a320:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
      atmp = 1.0 / (atmp - beta1);
 800a324:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800a328:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 800a32c:	f7f5 ff9e 	bl	800026c <__aeabi_dsub>
 800a330:	4602      	mov	r2, r0
 800a332:	460b      	mov	r3, r1
 800a334:	f04f 0000 	mov.w	r0, #0
 800a338:	4984      	ldr	r1, [pc, #528]	; (800a54c <qr_5a2P8Gh6+0x448>)
 800a33a:	f7f6 fa79 	bl	8000830 <__aeabi_ddiv>
 800a33e:	4602      	mov	r2, r0
 800a340:	460b      	mov	r3, r1
 800a342:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
      for (b_coltop = 1; b_coltop < 3; b_coltop++) {
 800a346:	2301      	movs	r3, #1
 800a348:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a34c:	e01e      	b.n	800a38c <qr_5a2P8Gh6+0x288>
        b_A[b_coltop] *= atmp;
 800a34e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a352:	00db      	lsls	r3, r3, #3
 800a354:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800a358:	4413      	add	r3, r2
 800a35a:	3b80      	subs	r3, #128	; 0x80
 800a35c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a360:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 800a364:	f7f6 f93a 	bl	80005dc <__aeabi_dmul>
 800a368:	4602      	mov	r2, r0
 800a36a:	460b      	mov	r3, r1
 800a36c:	4610      	mov	r0, r2
 800a36e:	4619      	mov	r1, r3
 800a370:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a374:	00db      	lsls	r3, r3, #3
 800a376:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800a37a:	4413      	add	r3, r2
 800a37c:	3b80      	subs	r3, #128	; 0x80
 800a37e:	e9c3 0100 	strd	r0, r1, [r3]
      for (b_coltop = 1; b_coltop < 3; b_coltop++) {
 800a382:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a386:	3301      	adds	r3, #1
 800a388:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a38c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a390:	2b02      	cmp	r3, #2
 800a392:	dddc      	ble.n	800a34e <qr_5a2P8Gh6+0x24a>
      }

      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 800a394:	2300      	movs	r3, #0
 800a396:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a39a:	e010      	b.n	800a3be <qr_5a2P8Gh6+0x2ba>
        beta1 *= 1.0020841800044864E-292;
 800a39c:	f04f 0200 	mov.w	r2, #0
 800a3a0:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800a3a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a3a8:	f7f6 f918 	bl	80005dc <__aeabi_dmul>
 800a3ac:	4602      	mov	r2, r0
 800a3ae:	460b      	mov	r3, r1
 800a3b0:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 800a3b4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a3b8:	3301      	adds	r3, #1
 800a3ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a3be:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a3c2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a3c6:	429a      	cmp	r2, r3
 800a3c8:	dbe8      	blt.n	800a39c <qr_5a2P8Gh6+0x298>
      }

      atmp = beta1;
 800a3ca:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800a3ce:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
 800a3d2:	e04d      	b.n	800a470 <qr_5a2P8Gh6+0x36c>
    } else {
      tau_idx_0 = (beta1 - b_A[0]) / beta1;
 800a3d4:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800a3d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a3dc:	f7f5 ff46 	bl	800026c <__aeabi_dsub>
 800a3e0:	4602      	mov	r2, r0
 800a3e2:	460b      	mov	r3, r1
 800a3e4:	4610      	mov	r0, r2
 800a3e6:	4619      	mov	r1, r3
 800a3e8:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800a3ec:	f7f6 fa20 	bl	8000830 <__aeabi_ddiv>
 800a3f0:	4602      	mov	r2, r0
 800a3f2:	460b      	mov	r3, r1
 800a3f4:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
      atmp = 1.0 / (b_A[0] - beta1);
 800a3f8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800a3fc:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800a400:	f7f5 ff34 	bl	800026c <__aeabi_dsub>
 800a404:	4602      	mov	r2, r0
 800a406:	460b      	mov	r3, r1
 800a408:	f04f 0000 	mov.w	r0, #0
 800a40c:	494f      	ldr	r1, [pc, #316]	; (800a54c <qr_5a2P8Gh6+0x448>)
 800a40e:	f7f6 fa0f 	bl	8000830 <__aeabi_ddiv>
 800a412:	4602      	mov	r2, r0
 800a414:	460b      	mov	r3, r1
 800a416:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
      for (c_lastc = 1; c_lastc < 3; c_lastc++) {
 800a41a:	2301      	movs	r3, #1
 800a41c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a420:	e01e      	b.n	800a460 <qr_5a2P8Gh6+0x35c>
        b_A[c_lastc] *= atmp;
 800a422:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a426:	00db      	lsls	r3, r3, #3
 800a428:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800a42c:	4413      	add	r3, r2
 800a42e:	3b80      	subs	r3, #128	; 0x80
 800a430:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a434:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 800a438:	f7f6 f8d0 	bl	80005dc <__aeabi_dmul>
 800a43c:	4602      	mov	r2, r0
 800a43e:	460b      	mov	r3, r1
 800a440:	4610      	mov	r0, r2
 800a442:	4619      	mov	r1, r3
 800a444:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a448:	00db      	lsls	r3, r3, #3
 800a44a:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800a44e:	4413      	add	r3, r2
 800a450:	3b80      	subs	r3, #128	; 0x80
 800a452:	e9c3 0100 	strd	r0, r1, [r3]
      for (c_lastc = 1; c_lastc < 3; c_lastc++) {
 800a456:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a45a:	3301      	adds	r3, #1
 800a45c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a460:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a464:	2b02      	cmp	r3, #2
 800a466:	dddc      	ble.n	800a422 <qr_5a2P8Gh6+0x31e>
      }

      atmp = beta1;
 800a468:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800a46c:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
    }
  }

  b_A[0] = 1.0;
 800a470:	f04f 0200 	mov.w	r2, #0
 800a474:	4b35      	ldr	r3, [pc, #212]	; (800a54c <qr_5a2P8Gh6+0x448>)
 800a476:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  if (tau_idx_0 != 0.0) {
 800a47a:	f04f 0200 	mov.w	r2, #0
 800a47e:	f04f 0300 	mov.w	r3, #0
 800a482:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800a486:	f7f6 fb11 	bl	8000aac <__aeabi_dcmpeq>
 800a48a:	4603      	mov	r3, r0
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	f040 8081 	bne.w	800a594 <qr_5a2P8Gh6+0x490>
    knt = 3;
 800a492:	2303      	movs	r3, #3
 800a494:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    c_lastc = 2;
 800a498:	2302      	movs	r3, #2
 800a49a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    while ((knt > 0) && (b_A[c_lastc] == 0.0)) {
 800a49e:	e009      	b.n	800a4b4 <qr_5a2P8Gh6+0x3b0>
      knt--;
 800a4a0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a4a4:	3b01      	subs	r3, #1
 800a4a6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      c_lastc--;
 800a4aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a4ae:	3b01      	subs	r3, #1
 800a4b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    while ((knt > 0) && (b_A[c_lastc] == 0.0)) {
 800a4b4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	dd11      	ble.n	800a4e0 <qr_5a2P8Gh6+0x3dc>
 800a4bc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a4c0:	00db      	lsls	r3, r3, #3
 800a4c2:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800a4c6:	4413      	add	r3, r2
 800a4c8:	3b80      	subs	r3, #128	; 0x80
 800a4ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a4ce:	f04f 0200 	mov.w	r2, #0
 800a4d2:	f04f 0300 	mov.w	r3, #0
 800a4d6:	f7f6 fae9 	bl	8000aac <__aeabi_dcmpeq>
 800a4da:	4603      	mov	r3, r0
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d1df      	bne.n	800a4a0 <qr_5a2P8Gh6+0x39c>
    }

    c_lastc = 2;
 800a4e0:	2302      	movs	r3, #2
 800a4e2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    exitg2 = false;
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
    while ((!exitg2) && (c_lastc > 0)) {
 800a4ec:	e049      	b.n	800a582 <qr_5a2P8Gh6+0x47e>
      b_coltop = (c_lastc - 1) * 3 + 3;
 800a4ee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a4f2:	4613      	mov	r3, r2
 800a4f4:	005b      	lsls	r3, r3, #1
 800a4f6:	4413      	add	r3, r2
 800a4f8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
      coltop = b_coltop;
 800a4fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a500:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
      do {
        exitg1 = 0;
 800a504:	2300      	movs	r3, #0
 800a506:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
        if (coltop + 1 <= b_coltop + knt) {
 800a50a:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800a50e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a512:	441a      	add	r2, r3
 800a514:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a518:	4293      	cmp	r3, r2
 800a51a:	da1f      	bge.n	800a55c <qr_5a2P8Gh6+0x458>
          if (b_A[coltop] != 0.0) {
 800a51c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a520:	00db      	lsls	r3, r3, #3
 800a522:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800a526:	4413      	add	r3, r2
 800a528:	3b80      	subs	r3, #128	; 0x80
 800a52a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a52e:	f04f 0200 	mov.w	r2, #0
 800a532:	f04f 0300 	mov.w	r3, #0
 800a536:	f7f6 fab9 	bl	8000aac <__aeabi_dcmpeq>
 800a53a:	4603      	mov	r3, r0
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d107      	bne.n	800a550 <qr_5a2P8Gh6+0x44c>
            exitg1 = 1;
 800a540:	2301      	movs	r3, #1
 800a542:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a546:	e011      	b.n	800a56c <qr_5a2P8Gh6+0x468>
 800a548:	7c900000 	.word	0x7c900000
 800a54c:	3ff00000 	.word	0x3ff00000
          } else {
            coltop++;
 800a550:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a554:	3301      	adds	r3, #1
 800a556:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a55a:	e007      	b.n	800a56c <qr_5a2P8Gh6+0x468>
          }
        } else {
          c_lastc--;
 800a55c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a560:	3b01      	subs	r3, #1
 800a562:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
          exitg1 = 2;
 800a566:	2302      	movs	r3, #2
 800a568:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
        }
      } while (exitg1 == 0);
 800a56c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a570:	2b00      	cmp	r3, #0
 800a572:	d0c7      	beq.n	800a504 <qr_5a2P8Gh6+0x400>

      if (exitg1 == 1) {
 800a574:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a578:	2b01      	cmp	r3, #1
 800a57a:	d102      	bne.n	800a582 <qr_5a2P8Gh6+0x47e>
        exitg2 = true;
 800a57c:	2301      	movs	r3, #1
 800a57e:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
    while ((!exitg2) && (c_lastc > 0)) {
 800a582:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 800a586:	2b00      	cmp	r3, #0
 800a588:	d10a      	bne.n	800a5a0 <qr_5a2P8Gh6+0x49c>
 800a58a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a58e:	2b00      	cmp	r3, #0
 800a590:	dcad      	bgt.n	800a4ee <qr_5a2P8Gh6+0x3ea>
 800a592:	e005      	b.n	800a5a0 <qr_5a2P8Gh6+0x49c>
      }
    }
  } else {
    knt = 0;
 800a594:	2300      	movs	r3, #0
 800a596:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    c_lastc = 0;
 800a59a:	2300      	movs	r3, #0
 800a59c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  }

  if (knt > 0) {
 800a5a0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	dd29      	ble.n	800a5fc <qr_5a2P8Gh6+0x4f8>
    xgemv_fRiR1I1O(knt, c_lastc, b_A, 4, b_A, 1, work);
 800a5a8:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800a5ac:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800a5b0:	9302      	str	r3, [sp, #8]
 800a5b2:	2301      	movs	r3, #1
 800a5b4:	9301      	str	r3, [sp, #4]
 800a5b6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800a5ba:	9300      	str	r3, [sp, #0]
 800a5bc:	2304      	movs	r3, #4
 800a5be:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 800a5c2:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800a5c6:	f004 f94f 	bl	800e868 <xgemv_fRiR1I1O>
    xgerc_tNNiazQU(knt, c_lastc, -tau_idx_0, 1, work, b_A, 4);
 800a5ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a5ce:	63bb      	str	r3, [r7, #56]	; 0x38
 800a5d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a5d4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800a5d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a5da:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800a5de:	2304      	movs	r3, #4
 800a5e0:	9301      	str	r3, [sp, #4]
 800a5e2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800a5e6:	9300      	str	r3, [sp, #0]
 800a5e8:	4613      	mov	r3, r2
 800a5ea:	2201      	movs	r2, #1
 800a5ec:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 800a5f0:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 800a5f4:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800a5f8:	f004 fa3f 	bl	800ea7a <xgerc_tNNiazQU>
  }

  b_A[0] = atmp;
 800a5fc:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 800a600:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  atmp = b_A[4];
 800a604:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800a608:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
  beta1 = xnrm2_xDOlDEtw(1, b_A, 6);
 800a60c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800a610:	2206      	movs	r2, #6
 800a612:	4619      	mov	r1, r3
 800a614:	2001      	movs	r0, #1
 800a616:	f004 fd6b 	bl	800f0f0 <xnrm2_xDOlDEtw>
 800a61a:	ed87 0b38 	vstr	d0, [r7, #224]	; 0xe0
  if (beta1 != 0.0) {
 800a61e:	f04f 0200 	mov.w	r2, #0
 800a622:	f04f 0300 	mov.w	r3, #0
 800a626:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a62a:	f7f6 fa3f 	bl	8000aac <__aeabi_dcmpeq>
 800a62e:	4603      	mov	r3, r0
 800a630:	2b00      	cmp	r3, #0
 800a632:	f040 8170 	bne.w	800a916 <qr_5a2P8Gh6+0x812>
    beta1 = rt_hypotd_snf(b_A[4], beta1);
 800a636:	ed97 7b24 	vldr	d7, [r7, #144]	; 0x90
 800a63a:	ed97 1b38 	vldr	d1, [r7, #224]	; 0xe0
 800a63e:	eeb0 0a47 	vmov.f32	s0, s14
 800a642:	eef0 0a67 	vmov.f32	s1, s15
 800a646:	f001 ffbf 	bl	800c5c8 <rt_hypotd_snf>
 800a64a:	ed87 0b38 	vstr	d0, [r7, #224]	; 0xe0
    if (b_A[4] >= 0.0) {
 800a64e:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800a652:	f04f 0200 	mov.w	r2, #0
 800a656:	f04f 0300 	mov.w	r3, #0
 800a65a:	f7f6 fa45 	bl	8000ae8 <__aeabi_dcmpge>
 800a65e:	4603      	mov	r3, r0
 800a660:	2b00      	cmp	r3, #0
 800a662:	d009      	beq.n	800a678 <qr_5a2P8Gh6+0x574>
      beta1 = -beta1;
 800a664:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a668:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a66c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a670:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800a674:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    }

    if (fabs(beta1) < 1.0020841800044864E-292) {
 800a678:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a67c:	633b      	str	r3, [r7, #48]	; 0x30
 800a67e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a682:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a686:	637b      	str	r3, [r7, #52]	; 0x34
 800a688:	f04f 0200 	mov.w	r2, #0
 800a68c:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800a690:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800a694:	f7f6 fa14 	bl	8000ac0 <__aeabi_dcmplt>
 800a698:	4603      	mov	r3, r0
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	f000 80ef 	beq.w	800a87e <qr_5a2P8Gh6+0x77a>
      knt = 0;
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      do {
        knt++;
 800a6a6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a6aa:	3301      	adds	r3, #1
 800a6ac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
        for (b_coltop = 5; b_coltop < 6; b_coltop++) {
 800a6b0:	2305      	movs	r3, #5
 800a6b2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a6b6:	e01f      	b.n	800a6f8 <qr_5a2P8Gh6+0x5f4>
          b_A[b_coltop] *= 9.9792015476736E+291;
 800a6b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a6bc:	00db      	lsls	r3, r3, #3
 800a6be:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800a6c2:	4413      	add	r3, r2
 800a6c4:	3b80      	subs	r3, #128	; 0x80
 800a6c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a6ca:	f04f 0200 	mov.w	r2, #0
 800a6ce:	4bc9      	ldr	r3, [pc, #804]	; (800a9f4 <qr_5a2P8Gh6+0x8f0>)
 800a6d0:	f7f5 ff84 	bl	80005dc <__aeabi_dmul>
 800a6d4:	4602      	mov	r2, r0
 800a6d6:	460b      	mov	r3, r1
 800a6d8:	4610      	mov	r0, r2
 800a6da:	4619      	mov	r1, r3
 800a6dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a6e0:	00db      	lsls	r3, r3, #3
 800a6e2:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800a6e6:	4413      	add	r3, r2
 800a6e8:	3b80      	subs	r3, #128	; 0x80
 800a6ea:	e9c3 0100 	strd	r0, r1, [r3]
        for (b_coltop = 5; b_coltop < 6; b_coltop++) {
 800a6ee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a6f2:	3301      	adds	r3, #1
 800a6f4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a6f8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a6fc:	2b05      	cmp	r3, #5
 800a6fe:	dddb      	ble.n	800a6b8 <qr_5a2P8Gh6+0x5b4>
        }

        beta1 *= 9.9792015476736E+291;
 800a700:	f04f 0200 	mov.w	r2, #0
 800a704:	4bbb      	ldr	r3, [pc, #748]	; (800a9f4 <qr_5a2P8Gh6+0x8f0>)
 800a706:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a70a:	f7f5 ff67 	bl	80005dc <__aeabi_dmul>
 800a70e:	4602      	mov	r2, r0
 800a710:	460b      	mov	r3, r1
 800a712:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
        atmp *= 9.9792015476736E+291;
 800a716:	f04f 0200 	mov.w	r2, #0
 800a71a:	4bb6      	ldr	r3, [pc, #728]	; (800a9f4 <qr_5a2P8Gh6+0x8f0>)
 800a71c:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 800a720:	f7f5 ff5c 	bl	80005dc <__aeabi_dmul>
 800a724:	4602      	mov	r2, r0
 800a726:	460b      	mov	r3, r1
 800a728:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
      } while ((fabs(beta1) < 1.0020841800044864E-292) && (knt < 20));
 800a72c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a730:	62bb      	str	r3, [r7, #40]	; 0x28
 800a732:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a736:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a73a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a73c:	f04f 0200 	mov.w	r2, #0
 800a740:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800a744:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800a748:	f7f6 f9ba 	bl	8000ac0 <__aeabi_dcmplt>
 800a74c:	4603      	mov	r3, r0
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d003      	beq.n	800a75a <qr_5a2P8Gh6+0x656>
 800a752:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a756:	2b13      	cmp	r3, #19
 800a758:	dda5      	ble.n	800a6a6 <qr_5a2P8Gh6+0x5a2>

      beta1 = rt_hypotd_snf(atmp, xnrm2_xDOlDEtw(1, b_A, 6));
 800a75a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800a75e:	2206      	movs	r2, #6
 800a760:	4619      	mov	r1, r3
 800a762:	2001      	movs	r0, #1
 800a764:	f004 fcc4 	bl	800f0f0 <xnrm2_xDOlDEtw>
 800a768:	eeb0 7a40 	vmov.f32	s14, s0
 800a76c:	eef0 7a60 	vmov.f32	s15, s1
 800a770:	eeb0 1a47 	vmov.f32	s2, s14
 800a774:	eef0 1a67 	vmov.f32	s3, s15
 800a778:	ed97 0b3a 	vldr	d0, [r7, #232]	; 0xe8
 800a77c:	f001 ff24 	bl	800c5c8 <rt_hypotd_snf>
 800a780:	ed87 0b38 	vstr	d0, [r7, #224]	; 0xe0
      if (atmp >= 0.0) {
 800a784:	f04f 0200 	mov.w	r2, #0
 800a788:	f04f 0300 	mov.w	r3, #0
 800a78c:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 800a790:	f7f6 f9aa 	bl	8000ae8 <__aeabi_dcmpge>
 800a794:	4603      	mov	r3, r0
 800a796:	2b00      	cmp	r3, #0
 800a798:	d009      	beq.n	800a7ae <qr_5a2P8Gh6+0x6aa>
        beta1 = -beta1;
 800a79a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a79e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a7a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a7a6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800a7aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      }

      tau_idx_1 = (beta1 - atmp) / beta1;
 800a7ae:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 800a7b2:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a7b6:	f7f5 fd59 	bl	800026c <__aeabi_dsub>
 800a7ba:	4602      	mov	r2, r0
 800a7bc:	460b      	mov	r3, r1
 800a7be:	4610      	mov	r0, r2
 800a7c0:	4619      	mov	r1, r3
 800a7c2:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800a7c6:	f7f6 f833 	bl	8000830 <__aeabi_ddiv>
 800a7ca:	4602      	mov	r2, r0
 800a7cc:	460b      	mov	r3, r1
 800a7ce:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
      atmp = 1.0 / (atmp - beta1);
 800a7d2:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800a7d6:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 800a7da:	f7f5 fd47 	bl	800026c <__aeabi_dsub>
 800a7de:	4602      	mov	r2, r0
 800a7e0:	460b      	mov	r3, r1
 800a7e2:	f04f 0000 	mov.w	r0, #0
 800a7e6:	4984      	ldr	r1, [pc, #528]	; (800a9f8 <qr_5a2P8Gh6+0x8f4>)
 800a7e8:	f7f6 f822 	bl	8000830 <__aeabi_ddiv>
 800a7ec:	4602      	mov	r2, r0
 800a7ee:	460b      	mov	r3, r1
 800a7f0:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
      for (b_coltop = 5; b_coltop < 6; b_coltop++) {
 800a7f4:	2305      	movs	r3, #5
 800a7f6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a7fa:	e01c      	b.n	800a836 <qr_5a2P8Gh6+0x732>
        b_A[b_coltop] *= atmp;
 800a7fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a800:	00db      	lsls	r3, r3, #3
 800a802:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800a806:	4413      	add	r3, r2
 800a808:	3b80      	subs	r3, #128	; 0x80
 800a80a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a80e:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 800a812:	f7f5 fee3 	bl	80005dc <__aeabi_dmul>
 800a816:	4602      	mov	r2, r0
 800a818:	460b      	mov	r3, r1
 800a81a:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 800a81e:	00c9      	lsls	r1, r1, #3
 800a820:	f107 00f0 	add.w	r0, r7, #240	; 0xf0
 800a824:	4401      	add	r1, r0
 800a826:	3980      	subs	r1, #128	; 0x80
 800a828:	e9c1 2300 	strd	r2, r3, [r1]
      for (b_coltop = 5; b_coltop < 6; b_coltop++) {
 800a82c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a830:	3301      	adds	r3, #1
 800a832:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a836:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a83a:	2b05      	cmp	r3, #5
 800a83c:	ddde      	ble.n	800a7fc <qr_5a2P8Gh6+0x6f8>
      }

      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 800a83e:	2300      	movs	r3, #0
 800a840:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a844:	e010      	b.n	800a868 <qr_5a2P8Gh6+0x764>
        beta1 *= 1.0020841800044864E-292;
 800a846:	f04f 0200 	mov.w	r2, #0
 800a84a:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800a84e:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a852:	f7f5 fec3 	bl	80005dc <__aeabi_dmul>
 800a856:	4602      	mov	r2, r0
 800a858:	460b      	mov	r3, r1
 800a85a:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 800a85e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a862:	3301      	adds	r3, #1
 800a864:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a868:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a86c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a870:	429a      	cmp	r2, r3
 800a872:	dbe8      	blt.n	800a846 <qr_5a2P8Gh6+0x742>
      }

      atmp = beta1;
 800a874:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800a878:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
 800a87c:	e04b      	b.n	800a916 <qr_5a2P8Gh6+0x812>
    } else {
      tau_idx_1 = (beta1 - b_A[4]) / beta1;
 800a87e:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800a882:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a886:	f7f5 fcf1 	bl	800026c <__aeabi_dsub>
 800a88a:	4602      	mov	r2, r0
 800a88c:	460b      	mov	r3, r1
 800a88e:	4610      	mov	r0, r2
 800a890:	4619      	mov	r1, r3
 800a892:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800a896:	f7f5 ffcb 	bl	8000830 <__aeabi_ddiv>
 800a89a:	4602      	mov	r2, r0
 800a89c:	460b      	mov	r3, r1
 800a89e:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
      atmp = 1.0 / (b_A[4] - beta1);
 800a8a2:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800a8a6:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800a8aa:	f7f5 fcdf 	bl	800026c <__aeabi_dsub>
 800a8ae:	4602      	mov	r2, r0
 800a8b0:	460b      	mov	r3, r1
 800a8b2:	f04f 0000 	mov.w	r0, #0
 800a8b6:	4950      	ldr	r1, [pc, #320]	; (800a9f8 <qr_5a2P8Gh6+0x8f4>)
 800a8b8:	f7f5 ffba 	bl	8000830 <__aeabi_ddiv>
 800a8bc:	4602      	mov	r2, r0
 800a8be:	460b      	mov	r3, r1
 800a8c0:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
      for (c_lastc = 5; c_lastc < 6; c_lastc++) {
 800a8c4:	2305      	movs	r3, #5
 800a8c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a8ca:	e01c      	b.n	800a906 <qr_5a2P8Gh6+0x802>
        b_A[c_lastc] *= atmp;
 800a8cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a8d0:	00db      	lsls	r3, r3, #3
 800a8d2:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800a8d6:	4413      	add	r3, r2
 800a8d8:	3b80      	subs	r3, #128	; 0x80
 800a8da:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a8de:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 800a8e2:	f7f5 fe7b 	bl	80005dc <__aeabi_dmul>
 800a8e6:	4602      	mov	r2, r0
 800a8e8:	460b      	mov	r3, r1
 800a8ea:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 800a8ee:	00c9      	lsls	r1, r1, #3
 800a8f0:	f107 00f0 	add.w	r0, r7, #240	; 0xf0
 800a8f4:	4401      	add	r1, r0
 800a8f6:	3980      	subs	r1, #128	; 0x80
 800a8f8:	e9c1 2300 	strd	r2, r3, [r1]
      for (c_lastc = 5; c_lastc < 6; c_lastc++) {
 800a8fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a900:	3301      	adds	r3, #1
 800a902:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a906:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a90a:	2b05      	cmp	r3, #5
 800a90c:	ddde      	ble.n	800a8cc <qr_5a2P8Gh6+0x7c8>
      }

      atmp = beta1;
 800a90e:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800a912:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
    }
  }

  b_A[4] = 1.0;
 800a916:	f04f 0200 	mov.w	r2, #0
 800a91a:	4b37      	ldr	r3, [pc, #220]	; (800a9f8 <qr_5a2P8Gh6+0x8f4>)
 800a91c:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
  if (tau_idx_1 != 0.0) {
 800a920:	f04f 0200 	mov.w	r2, #0
 800a924:	f04f 0300 	mov.w	r3, #0
 800a928:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800a92c:	f7f6 f8be 	bl	8000aac <__aeabi_dcmpeq>
 800a930:	4603      	mov	r3, r0
 800a932:	2b00      	cmp	r3, #0
 800a934:	d162      	bne.n	800a9fc <qr_5a2P8Gh6+0x8f8>
    knt = 2;
 800a936:	2302      	movs	r3, #2
 800a938:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    c_lastc = 5;
 800a93c:	2305      	movs	r3, #5
 800a93e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    while ((knt > 0) && (b_A[c_lastc] == 0.0)) {
 800a942:	e009      	b.n	800a958 <qr_5a2P8Gh6+0x854>
      knt--;
 800a944:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a948:	3b01      	subs	r3, #1
 800a94a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      c_lastc--;
 800a94e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a952:	3b01      	subs	r3, #1
 800a954:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    while ((knt > 0) && (b_A[c_lastc] == 0.0)) {
 800a958:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	dd11      	ble.n	800a984 <qr_5a2P8Gh6+0x880>
 800a960:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a964:	00db      	lsls	r3, r3, #3
 800a966:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800a96a:	4413      	add	r3, r2
 800a96c:	3b80      	subs	r3, #128	; 0x80
 800a96e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a972:	f04f 0200 	mov.w	r2, #0
 800a976:	f04f 0300 	mov.w	r3, #0
 800a97a:	f7f6 f897 	bl	8000aac <__aeabi_dcmpeq>
 800a97e:	4603      	mov	r3, r0
 800a980:	2b00      	cmp	r3, #0
 800a982:	d1df      	bne.n	800a944 <qr_5a2P8Gh6+0x840>
    }

    c_lastc = 1;
 800a984:	2301      	movs	r3, #1
 800a986:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    coltop = 7;
 800a98a:	2307      	movs	r3, #7
 800a98c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    do {
      exitg1 = 0;
 800a990:	2300      	movs	r3, #0
 800a992:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
      if (coltop + 1 <= knt + 7) {
 800a996:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a99a:	3306      	adds	r3, #6
 800a99c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a9a0:	429a      	cmp	r2, r3
 800a9a2:	dc1b      	bgt.n	800a9dc <qr_5a2P8Gh6+0x8d8>
        if (b_A[coltop] != 0.0) {
 800a9a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a9a8:	00db      	lsls	r3, r3, #3
 800a9aa:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800a9ae:	4413      	add	r3, r2
 800a9b0:	3b80      	subs	r3, #128	; 0x80
 800a9b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a9b6:	f04f 0200 	mov.w	r2, #0
 800a9ba:	f04f 0300 	mov.w	r3, #0
 800a9be:	f7f6 f875 	bl	8000aac <__aeabi_dcmpeq>
 800a9c2:	4603      	mov	r3, r0
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d103      	bne.n	800a9d0 <qr_5a2P8Gh6+0x8cc>
          exitg1 = 1;
 800a9c8:	2301      	movs	r3, #1
 800a9ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a9ce:	e00b      	b.n	800a9e8 <qr_5a2P8Gh6+0x8e4>
        } else {
          coltop++;
 800a9d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a9d4:	3301      	adds	r3, #1
 800a9d6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a9da:	e005      	b.n	800a9e8 <qr_5a2P8Gh6+0x8e4>
        }
      } else {
        c_lastc = 0;
 800a9dc:	2300      	movs	r3, #0
 800a9de:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
        exitg1 = 1;
 800a9e2:	2301      	movs	r3, #1
 800a9e4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
      }
    } while (exitg1 == 0);
 800a9e8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d0cf      	beq.n	800a990 <qr_5a2P8Gh6+0x88c>
 800a9f0:	e00a      	b.n	800aa08 <qr_5a2P8Gh6+0x904>
 800a9f2:	bf00      	nop
 800a9f4:	7c900000 	.word	0x7c900000
 800a9f8:	3ff00000 	.word	0x3ff00000
  } else {
    knt = 0;
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    c_lastc = 0;
 800aa02:	2300      	movs	r3, #0
 800aa04:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  }

  if (knt > 0) {
 800aa08:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	dd29      	ble.n	800aa64 <qr_5a2P8Gh6+0x960>
    xgemv_fRiR1I1O(knt, c_lastc, b_A, 8, b_A, 5, work);
 800aa10:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800aa14:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800aa18:	9302      	str	r3, [sp, #8]
 800aa1a:	2305      	movs	r3, #5
 800aa1c:	9301      	str	r3, [sp, #4]
 800aa1e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800aa22:	9300      	str	r3, [sp, #0]
 800aa24:	2308      	movs	r3, #8
 800aa26:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 800aa2a:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800aa2e:	f003 ff1b 	bl	800e868 <xgemv_fRiR1I1O>
    xgerc_tNNiazQU(knt, c_lastc, -tau_idx_1, 5, work, b_A, 8);
 800aa32:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800aa36:	623b      	str	r3, [r7, #32]
 800aa38:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800aa3c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800aa40:	627b      	str	r3, [r7, #36]	; 0x24
 800aa42:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800aa46:	2308      	movs	r3, #8
 800aa48:	9301      	str	r3, [sp, #4]
 800aa4a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800aa4e:	9300      	str	r3, [sp, #0]
 800aa50:	4613      	mov	r3, r2
 800aa52:	2205      	movs	r2, #5
 800aa54:	ed97 0b08 	vldr	d0, [r7, #32]
 800aa58:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 800aa5c:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800aa60:	f004 f80b 	bl	800ea7a <xgerc_tNNiazQU>
  }

  b_A[4] = atmp;
 800aa64:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 800aa68:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
  R[0] = b_A[0];
 800aa6c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800aa70:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800aa72:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 1; c_lastc + 1 < 4; c_lastc++) {
 800aa76:	2301      	movs	r3, #1
 800aa78:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800aa7c:	e00f      	b.n	800aa9e <qr_5a2P8Gh6+0x99a>
    R[c_lastc] = 0.0;
 800aa7e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800aa82:	00db      	lsls	r3, r3, #3
 800aa84:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800aa86:	18d1      	adds	r1, r2, r3
 800aa88:	f04f 0200 	mov.w	r2, #0
 800aa8c:	f04f 0300 	mov.w	r3, #0
 800aa90:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 1; c_lastc + 1 < 4; c_lastc++) {
 800aa94:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800aa98:	3301      	adds	r3, #1
 800aa9a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800aa9e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800aaa2:	2b02      	cmp	r3, #2
 800aaa4:	ddeb      	ble.n	800aa7e <qr_5a2P8Gh6+0x97a>
  }

  work[0] = 0.0;
 800aaa6:	f04f 0200 	mov.w	r2, #0
 800aaaa:	f04f 0300 	mov.w	r3, #0
 800aaae:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
  for (c_lastc = 0; c_lastc < 2; c_lastc++) {
 800aab2:	2300      	movs	r3, #0
 800aab4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800aab8:	e016      	b.n	800aae8 <qr_5a2P8Gh6+0x9e4>
    R[c_lastc + 3] = b_A[c_lastc + 3];
 800aaba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800aabe:	3303      	adds	r3, #3
 800aac0:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800aac4:	3203      	adds	r2, #3
 800aac6:	00d2      	lsls	r2, r2, #3
 800aac8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800aaca:	4411      	add	r1, r2
 800aacc:	00db      	lsls	r3, r3, #3
 800aace:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800aad2:	4413      	add	r3, r2
 800aad4:	3b80      	subs	r3, #128	; 0x80
 800aad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aada:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 0; c_lastc < 2; c_lastc++) {
 800aade:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800aae2:	3301      	adds	r3, #1
 800aae4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800aae8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800aaec:	2b01      	cmp	r3, #1
 800aaee:	dde4      	ble.n	800aaba <qr_5a2P8Gh6+0x9b6>
  }

  while (c_lastc + 1 < 4) {
 800aaf0:	e010      	b.n	800ab14 <qr_5a2P8Gh6+0xa10>
    R[c_lastc + 3] = 0.0;
 800aaf2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800aaf6:	3303      	adds	r3, #3
 800aaf8:	00db      	lsls	r3, r3, #3
 800aafa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800aafc:	18d1      	adds	r1, r2, r3
 800aafe:	f04f 0200 	mov.w	r2, #0
 800ab02:	f04f 0300 	mov.w	r3, #0
 800ab06:	e9c1 2300 	strd	r2, r3, [r1]
    c_lastc++;
 800ab0a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ab0e:	3301      	adds	r3, #1
 800ab10:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  while (c_lastc + 1 < 4) {
 800ab14:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ab18:	2b02      	cmp	r3, #2
 800ab1a:	ddea      	ble.n	800aaf2 <qr_5a2P8Gh6+0x9ee>
  }

  work[1] = 0.0;
 800ab1c:	f04f 0200 	mov.w	r2, #0
 800ab20:	f04f 0300 	mov.w	r3, #0
 800ab24:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
  for (c_lastc = 0; c_lastc < 3; c_lastc++) {
 800ab28:	2300      	movs	r3, #0
 800ab2a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ab2e:	e016      	b.n	800ab5e <qr_5a2P8Gh6+0xa5a>
    R[c_lastc + 6] = b_A[c_lastc + 6];
 800ab30:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ab34:	3306      	adds	r3, #6
 800ab36:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800ab3a:	3206      	adds	r2, #6
 800ab3c:	00d2      	lsls	r2, r2, #3
 800ab3e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800ab40:	4411      	add	r1, r2
 800ab42:	00db      	lsls	r3, r3, #3
 800ab44:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800ab48:	4413      	add	r3, r2
 800ab4a:	3b80      	subs	r3, #128	; 0x80
 800ab4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab50:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 0; c_lastc < 3; c_lastc++) {
 800ab54:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ab58:	3301      	adds	r3, #1
 800ab5a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ab5e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ab62:	2b02      	cmp	r3, #2
 800ab64:	dde4      	ble.n	800ab30 <qr_5a2P8Gh6+0xa2c>
  }

  work[2] = 0.0;
 800ab66:	f04f 0200 	mov.w	r2, #0
 800ab6a:	f04f 0300 	mov.w	r3, #0
 800ab6e:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
  b_A[8] = 1.0;
 800ab72:	f04f 0200 	mov.w	r2, #0
 800ab76:	4bc8      	ldr	r3, [pc, #800]	; (800ae98 <qr_5a2P8Gh6+0xd94>)
 800ab78:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
  for (c_lastc = 0; c_lastc < 2; c_lastc++) {
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ab82:	e014      	b.n	800abae <qr_5a2P8Gh6+0xaaa>
    b_A[7 - c_lastc] = 0.0;
 800ab84:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ab88:	f1c3 0307 	rsb	r3, r3, #7
 800ab8c:	00db      	lsls	r3, r3, #3
 800ab8e:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800ab92:	4413      	add	r3, r2
 800ab94:	f1a3 0180 	sub.w	r1, r3, #128	; 0x80
 800ab98:	f04f 0200 	mov.w	r2, #0
 800ab9c:	f04f 0300 	mov.w	r3, #0
 800aba0:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 0; c_lastc < 2; c_lastc++) {
 800aba4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800aba8:	3301      	adds	r3, #1
 800abaa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800abae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800abb2:	2b01      	cmp	r3, #1
 800abb4:	dde6      	ble.n	800ab84 <qr_5a2P8Gh6+0xa80>
  }

  b_A[4] = 1.0;
 800abb6:	f04f 0200 	mov.w	r2, #0
 800abba:	4bb7      	ldr	r3, [pc, #732]	; (800ae98 <qr_5a2P8Gh6+0xd94>)
 800abbc:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
  if (tau_idx_1 != 0.0) {
 800abc0:	f04f 0200 	mov.w	r2, #0
 800abc4:	f04f 0300 	mov.w	r3, #0
 800abc8:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800abcc:	f7f5 ff6e 	bl	8000aac <__aeabi_dcmpeq>
 800abd0:	4603      	mov	r3, r0
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d15c      	bne.n	800ac90 <qr_5a2P8Gh6+0xb8c>
    b_coltop = 7;
 800abd6:	2307      	movs	r3, #7
 800abd8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    while ((c_lastc > 0) && (b_A[b_coltop - 2] == 0.0)) {
 800abdc:	e009      	b.n	800abf2 <qr_5a2P8Gh6+0xaee>
      c_lastc--;
 800abde:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800abe2:	3b01      	subs	r3, #1
 800abe4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
      b_coltop--;
 800abe8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800abec:	3b01      	subs	r3, #1
 800abee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    while ((c_lastc > 0) && (b_A[b_coltop - 2] == 0.0)) {
 800abf2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	dd12      	ble.n	800ac20 <qr_5a2P8Gh6+0xb1c>
 800abfa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800abfe:	3b02      	subs	r3, #2
 800ac00:	00db      	lsls	r3, r3, #3
 800ac02:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800ac06:	4413      	add	r3, r2
 800ac08:	3b80      	subs	r3, #128	; 0x80
 800ac0a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ac0e:	f04f 0200 	mov.w	r2, #0
 800ac12:	f04f 0300 	mov.w	r3, #0
 800ac16:	f7f5 ff49 	bl	8000aac <__aeabi_dcmpeq>
 800ac1a:	4603      	mov	r3, r0
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d1de      	bne.n	800abde <qr_5a2P8Gh6+0xada>
    }

    b_coltop = 1;
 800ac20:	2301      	movs	r3, #1
 800ac22:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    knt = 8;
 800ac26:	2308      	movs	r3, #8
 800ac28:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    do {
      exitg1 = 0;
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
      if (knt <= c_lastc + 7) {
 800ac32:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ac36:	3307      	adds	r3, #7
 800ac38:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800ac3c:	429a      	cmp	r2, r3
 800ac3e:	dc1c      	bgt.n	800ac7a <qr_5a2P8Gh6+0xb76>
        if (b_A[knt - 1] != 0.0) {
 800ac40:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ac44:	3b01      	subs	r3, #1
 800ac46:	00db      	lsls	r3, r3, #3
 800ac48:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800ac4c:	4413      	add	r3, r2
 800ac4e:	3b80      	subs	r3, #128	; 0x80
 800ac50:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ac54:	f04f 0200 	mov.w	r2, #0
 800ac58:	f04f 0300 	mov.w	r3, #0
 800ac5c:	f7f5 ff26 	bl	8000aac <__aeabi_dcmpeq>
 800ac60:	4603      	mov	r3, r0
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d103      	bne.n	800ac6e <qr_5a2P8Gh6+0xb6a>
          exitg1 = 1;
 800ac66:	2301      	movs	r3, #1
 800ac68:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ac6c:	e00b      	b.n	800ac86 <qr_5a2P8Gh6+0xb82>
        } else {
          knt++;
 800ac6e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ac72:	3301      	adds	r3, #1
 800ac74:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800ac78:	e005      	b.n	800ac86 <qr_5a2P8Gh6+0xb82>
        }
      } else {
        b_coltop = 0;
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
        exitg1 = 1;
 800ac80:	2301      	movs	r3, #1
 800ac82:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
      }
    } while (exitg1 == 0);
 800ac86:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d0ce      	beq.n	800ac2c <qr_5a2P8Gh6+0xb28>
 800ac8e:	e005      	b.n	800ac9c <qr_5a2P8Gh6+0xb98>
  } else {
    c_lastc = 0;
 800ac90:	2300      	movs	r3, #0
 800ac92:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    b_coltop = 0;
 800ac96:	2300      	movs	r3, #0
 800ac98:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  }

  if (c_lastc > 0) {
 800ac9c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	dd29      	ble.n	800acf8 <qr_5a2P8Gh6+0xbf4>
    xgemv_fRiR1I1O(c_lastc, b_coltop, b_A, 8, b_A, 5, work);
 800aca4:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800aca8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800acac:	9302      	str	r3, [sp, #8]
 800acae:	2305      	movs	r3, #5
 800acb0:	9301      	str	r3, [sp, #4]
 800acb2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800acb6:	9300      	str	r3, [sp, #0]
 800acb8:	2308      	movs	r3, #8
 800acba:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 800acbe:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 800acc2:	f003 fdd1 	bl	800e868 <xgemv_fRiR1I1O>
    xgerc_tNNiazQU(c_lastc, b_coltop, -tau_idx_1, 5, work, b_A, 8);
 800acc6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800acca:	61bb      	str	r3, [r7, #24]
 800accc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800acd0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800acd4:	61fb      	str	r3, [r7, #28]
 800acd6:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800acda:	2308      	movs	r3, #8
 800acdc:	9301      	str	r3, [sp, #4]
 800acde:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800ace2:	9300      	str	r3, [sp, #0]
 800ace4:	4613      	mov	r3, r2
 800ace6:	2205      	movs	r2, #5
 800ace8:	ed97 0b06 	vldr	d0, [r7, #24]
 800acec:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 800acf0:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 800acf4:	f003 fec1 	bl	800ea7a <xgerc_tNNiazQU>
  }

  for (b_coltop = 5; b_coltop < 6; b_coltop++) {
 800acf8:	2305      	movs	r3, #5
 800acfa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800acfe:	e024      	b.n	800ad4a <qr_5a2P8Gh6+0xc46>
    b_A[b_coltop] *= -tau_idx_1;
 800ad00:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800ad04:	00db      	lsls	r3, r3, #3
 800ad06:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800ad0a:	4413      	add	r3, r2
 800ad0c:	3b80      	subs	r3, #128	; 0x80
 800ad0e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ad12:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800ad16:	613b      	str	r3, [r7, #16]
 800ad18:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ad1c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800ad20:	617b      	str	r3, [r7, #20]
 800ad22:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ad26:	f7f5 fc59 	bl	80005dc <__aeabi_dmul>
 800ad2a:	4602      	mov	r2, r0
 800ad2c:	460b      	mov	r3, r1
 800ad2e:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 800ad32:	00c9      	lsls	r1, r1, #3
 800ad34:	f107 00f0 	add.w	r0, r7, #240	; 0xf0
 800ad38:	4401      	add	r1, r0
 800ad3a:	3980      	subs	r1, #128	; 0x80
 800ad3c:	e9c1 2300 	strd	r2, r3, [r1]
  for (b_coltop = 5; b_coltop < 6; b_coltop++) {
 800ad40:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800ad44:	3301      	adds	r3, #1
 800ad46:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800ad4a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800ad4e:	2b05      	cmp	r3, #5
 800ad50:	ddd6      	ble.n	800ad00 <qr_5a2P8Gh6+0xbfc>
  }

  b_A[4] = 1.0 - tau_idx_1;
 800ad52:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800ad56:	f04f 0000 	mov.w	r0, #0
 800ad5a:	494f      	ldr	r1, [pc, #316]	; (800ae98 <qr_5a2P8Gh6+0xd94>)
 800ad5c:	f7f5 fa86 	bl	800026c <__aeabi_dsub>
 800ad60:	4602      	mov	r2, r0
 800ad62:	460b      	mov	r3, r1
 800ad64:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
  b_A[3] = 0.0;
 800ad68:	f04f 0200 	mov.w	r2, #0
 800ad6c:	f04f 0300 	mov.w	r3, #0
 800ad70:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
  b_A[0] = 1.0;
 800ad74:	f04f 0200 	mov.w	r2, #0
 800ad78:	4b47      	ldr	r3, [pc, #284]	; (800ae98 <qr_5a2P8Gh6+0xd94>)
 800ad7a:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  if (tau_idx_0 != 0.0) {
 800ad7e:	f04f 0200 	mov.w	r2, #0
 800ad82:	f04f 0300 	mov.w	r3, #0
 800ad86:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800ad8a:	f7f5 fe8f 	bl	8000aac <__aeabi_dcmpeq>
 800ad8e:	4603      	mov	r3, r0
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	f040 8083 	bne.w	800ae9c <qr_5a2P8Gh6+0xd98>
    c_lastc = 3;
 800ad96:	2303      	movs	r3, #3
 800ad98:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    b_coltop = 4;
 800ad9c:	2304      	movs	r3, #4
 800ad9e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    while ((c_lastc > 0) && (b_A[b_coltop - 2] == 0.0)) {
 800ada2:	e009      	b.n	800adb8 <qr_5a2P8Gh6+0xcb4>
      c_lastc--;
 800ada4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ada8:	3b01      	subs	r3, #1
 800adaa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
      b_coltop--;
 800adae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800adb2:	3b01      	subs	r3, #1
 800adb4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    while ((c_lastc > 0) && (b_A[b_coltop - 2] == 0.0)) {
 800adb8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	dd12      	ble.n	800ade6 <qr_5a2P8Gh6+0xce2>
 800adc0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800adc4:	3b02      	subs	r3, #2
 800adc6:	00db      	lsls	r3, r3, #3
 800adc8:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800adcc:	4413      	add	r3, r2
 800adce:	3b80      	subs	r3, #128	; 0x80
 800add0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800add4:	f04f 0200 	mov.w	r2, #0
 800add8:	f04f 0300 	mov.w	r3, #0
 800addc:	f7f5 fe66 	bl	8000aac <__aeabi_dcmpeq>
 800ade0:	4603      	mov	r3, r0
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d1de      	bne.n	800ada4 <qr_5a2P8Gh6+0xca0>
    }

    b_coltop = 2;
 800ade6:	2302      	movs	r3, #2
 800ade8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    exitg2 = false;
 800adec:	2300      	movs	r3, #0
 800adee:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
    while ((!exitg2) && (b_coltop > 0)) {
 800adf2:	e048      	b.n	800ae86 <qr_5a2P8Gh6+0xd82>
      coltop = (b_coltop - 1) * 3 + 4;
 800adf4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800adf8:	1e5a      	subs	r2, r3, #1
 800adfa:	4613      	mov	r3, r2
 800adfc:	005b      	lsls	r3, r3, #1
 800adfe:	4413      	add	r3, r2
 800ae00:	3304      	adds	r3, #4
 800ae02:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
      knt = coltop;
 800ae06:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800ae0a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      do {
        exitg1 = 0;
 800ae0e:	2300      	movs	r3, #0
 800ae10:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
        if (knt <= (coltop + c_lastc) - 1) {
 800ae14:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ae18:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ae1c:	4413      	add	r3, r2
 800ae1e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800ae22:	429a      	cmp	r2, r3
 800ae24:	da1c      	bge.n	800ae60 <qr_5a2P8Gh6+0xd5c>
          if (b_A[knt - 1] != 0.0) {
 800ae26:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ae2a:	3b01      	subs	r3, #1
 800ae2c:	00db      	lsls	r3, r3, #3
 800ae2e:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800ae32:	4413      	add	r3, r2
 800ae34:	3b80      	subs	r3, #128	; 0x80
 800ae36:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ae3a:	f04f 0200 	mov.w	r2, #0
 800ae3e:	f04f 0300 	mov.w	r3, #0
 800ae42:	f7f5 fe33 	bl	8000aac <__aeabi_dcmpeq>
 800ae46:	4603      	mov	r3, r0
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d103      	bne.n	800ae54 <qr_5a2P8Gh6+0xd50>
            exitg1 = 1;
 800ae4c:	2301      	movs	r3, #1
 800ae4e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ae52:	e00d      	b.n	800ae70 <qr_5a2P8Gh6+0xd6c>
          } else {
            knt++;
 800ae54:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ae58:	3301      	adds	r3, #1
 800ae5a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800ae5e:	e007      	b.n	800ae70 <qr_5a2P8Gh6+0xd6c>
          }
        } else {
          b_coltop--;
 800ae60:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800ae64:	3b01      	subs	r3, #1
 800ae66:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
          exitg1 = 2;
 800ae6a:	2302      	movs	r3, #2
 800ae6c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
        }
      } while (exitg1 == 0);
 800ae70:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d0ca      	beq.n	800ae0e <qr_5a2P8Gh6+0xd0a>

      if (exitg1 == 1) {
 800ae78:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ae7c:	2b01      	cmp	r3, #1
 800ae7e:	d102      	bne.n	800ae86 <qr_5a2P8Gh6+0xd82>
        exitg2 = true;
 800ae80:	2301      	movs	r3, #1
 800ae82:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
    while ((!exitg2) && (b_coltop > 0)) {
 800ae86:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d10c      	bne.n	800aea8 <qr_5a2P8Gh6+0xda4>
 800ae8e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	dcae      	bgt.n	800adf4 <qr_5a2P8Gh6+0xcf0>
 800ae96:	e007      	b.n	800aea8 <qr_5a2P8Gh6+0xda4>
 800ae98:	3ff00000 	.word	0x3ff00000
      }
    }
  } else {
    c_lastc = 0;
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    b_coltop = 0;
 800aea2:	2300      	movs	r3, #0
 800aea4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  }

  if (c_lastc > 0) {
 800aea8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	dd29      	ble.n	800af04 <qr_5a2P8Gh6+0xe00>
    xgemv_fRiR1I1O(c_lastc, b_coltop, b_A, 4, b_A, 1, work);
 800aeb0:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800aeb4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800aeb8:	9302      	str	r3, [sp, #8]
 800aeba:	2301      	movs	r3, #1
 800aebc:	9301      	str	r3, [sp, #4]
 800aebe:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800aec2:	9300      	str	r3, [sp, #0]
 800aec4:	2304      	movs	r3, #4
 800aec6:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 800aeca:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 800aece:	f003 fccb 	bl	800e868 <xgemv_fRiR1I1O>
    xgerc_tNNiazQU(c_lastc, b_coltop, -tau_idx_0, 1, work, b_A, 4);
 800aed2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800aed6:	60bb      	str	r3, [r7, #8]
 800aed8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aedc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800aee0:	60fb      	str	r3, [r7, #12]
 800aee2:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800aee6:	2304      	movs	r3, #4
 800aee8:	9301      	str	r3, [sp, #4]
 800aeea:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800aeee:	9300      	str	r3, [sp, #0]
 800aef0:	4613      	mov	r3, r2
 800aef2:	2201      	movs	r2, #1
 800aef4:	ed97 0b02 	vldr	d0, [r7, #8]
 800aef8:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 800aefc:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 800af00:	f003 fdbb 	bl	800ea7a <xgerc_tNNiazQU>
  }

  for (b_coltop = 1; b_coltop < 3; b_coltop++) {
 800af04:	2301      	movs	r3, #1
 800af06:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800af0a:	e024      	b.n	800af56 <qr_5a2P8Gh6+0xe52>
    b_A[b_coltop] *= -tau_idx_0;
 800af0c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800af10:	00db      	lsls	r3, r3, #3
 800af12:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800af16:	4413      	add	r3, r2
 800af18:	3b80      	subs	r3, #128	; 0x80
 800af1a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800af1e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800af22:	603b      	str	r3, [r7, #0]
 800af24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800af28:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800af2c:	607b      	str	r3, [r7, #4]
 800af2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af32:	f7f5 fb53 	bl	80005dc <__aeabi_dmul>
 800af36:	4602      	mov	r2, r0
 800af38:	460b      	mov	r3, r1
 800af3a:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 800af3e:	00c9      	lsls	r1, r1, #3
 800af40:	f107 00f0 	add.w	r0, r7, #240	; 0xf0
 800af44:	4401      	add	r1, r0
 800af46:	3980      	subs	r1, #128	; 0x80
 800af48:	e9c1 2300 	strd	r2, r3, [r1]
  for (b_coltop = 1; b_coltop < 3; b_coltop++) {
 800af4c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800af50:	3301      	adds	r3, #1
 800af52:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800af56:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800af5a:	2b02      	cmp	r3, #2
 800af5c:	ddd6      	ble.n	800af0c <qr_5a2P8Gh6+0xe08>
  }

  b_A[0] = 1.0 - tau_idx_0;
 800af5e:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 800af62:	f04f 0000 	mov.w	r0, #0
 800af66:	492a      	ldr	r1, [pc, #168]	; (800b010 <qr_5a2P8Gh6+0xf0c>)
 800af68:	f7f5 f980 	bl	800026c <__aeabi_dsub>
 800af6c:	4602      	mov	r2, r0
 800af6e:	460b      	mov	r3, r1
 800af70:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  c_lastc = 0;
 800af74:	2300      	movs	r3, #0
 800af76:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  for (b_coltop = 0; b_coltop < 3; b_coltop++) {
 800af7a:	2300      	movs	r3, #0
 800af7c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800af80:	e03d      	b.n	800affe <qr_5a2P8Gh6+0xefa>
    Q[c_lastc] = b_A[c_lastc];
 800af82:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800af86:	00db      	lsls	r3, r3, #3
 800af88:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800af8a:	18d1      	adds	r1, r2, r3
 800af8c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800af90:	00db      	lsls	r3, r3, #3
 800af92:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800af96:	4413      	add	r3, r2
 800af98:	3b80      	subs	r3, #128	; 0x80
 800af9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af9e:	e9c1 2300 	strd	r2, r3, [r1]
    Q[c_lastc + 1] = b_A[c_lastc + 1];
 800afa2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800afa6:	3301      	adds	r3, #1
 800afa8:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800afac:	3201      	adds	r2, #1
 800afae:	00d2      	lsls	r2, r2, #3
 800afb0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800afb2:	4411      	add	r1, r2
 800afb4:	00db      	lsls	r3, r3, #3
 800afb6:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800afba:	4413      	add	r3, r2
 800afbc:	3b80      	subs	r3, #128	; 0x80
 800afbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afc2:	e9c1 2300 	strd	r2, r3, [r1]
    Q[c_lastc + 2] = b_A[c_lastc + 2];
 800afc6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800afca:	3302      	adds	r3, #2
 800afcc:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800afd0:	3202      	adds	r2, #2
 800afd2:	00d2      	lsls	r2, r2, #3
 800afd4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800afd6:	4411      	add	r1, r2
 800afd8:	00db      	lsls	r3, r3, #3
 800afda:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800afde:	4413      	add	r3, r2
 800afe0:	3b80      	subs	r3, #128	; 0x80
 800afe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afe6:	e9c1 2300 	strd	r2, r3, [r1]
    c_lastc += 3;
 800afea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800afee:	3303      	adds	r3, #3
 800aff0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  for (b_coltop = 0; b_coltop < 3; b_coltop++) {
 800aff4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800aff8:	3301      	adds	r3, #1
 800affa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800affe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b002:	2b02      	cmp	r3, #2
 800b004:	ddbd      	ble.n	800af82 <qr_5a2P8Gh6+0xe7e>
  }
}
 800b006:	bf00      	nop
 800b008:	bf00      	nop
 800b00a:	37f0      	adds	r7, #240	; 0xf0
 800b00c:	46bd      	mov	sp, r7
 800b00e:	bdb0      	pop	{r4, r5, r7, pc}
 800b010:	3ff00000 	.word	0x3ff00000

0800b014 <qr_DvOBrgQi>:
#include <math.h>
#include "xgemv_NQlWbt2i.h"
#include "xgerc_R09LiDgJ.h"

void qr_DvOBrgQi(const real_T A[18], real_T Q[18], real_T R[9])
{
 800b014:	b5b0      	push	{r4, r5, r7, lr}
 800b016:	b0da      	sub	sp, #360	; 0x168
 800b018:	af04      	add	r7, sp, #16
 800b01a:	66f8      	str	r0, [r7, #108]	; 0x6c
 800b01c:	66b9      	str	r1, [r7, #104]	; 0x68
 800b01e:	667a      	str	r2, [r7, #100]	; 0x64
  int32_T c_lastc;
  int32_T coltop;
  int32_T exitg1;
  int32_T knt;
  boolean_T exitg2;
  memcpy(&b_A[0], &A[0], 18U * sizeof(real_T));
 800b020:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800b024:	2290      	movs	r2, #144	; 0x90
 800b026:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800b028:	4618      	mov	r0, r3
 800b02a:	f00e fea7 	bl	8019d7c <memcpy>
  work[0] = 0.0;
 800b02e:	f04f 0200 	mov.w	r2, #0
 800b032:	f04f 0300 	mov.w	r3, #0
 800b036:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  work[1] = 0.0;
 800b03a:	f04f 0200 	mov.w	r2, #0
 800b03e:	f04f 0300 	mov.w	r3, #0
 800b042:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
  work[2] = 0.0;
 800b046:	f04f 0200 	mov.w	r2, #0
 800b04a:	f04f 0300 	mov.w	r3, #0
 800b04e:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
  atmp = b_A[0];
 800b052:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800b056:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
  tau_idx_0 = 0.0;
 800b05a:	f04f 0200 	mov.w	r2, #0
 800b05e:	f04f 0300 	mov.w	r3, #0
 800b062:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
  beta1 = xnrm2_nLdASVZH(5, b_A, 2);
 800b066:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800b06a:	2202      	movs	r2, #2
 800b06c:	4619      	mov	r1, r3
 800b06e:	2005      	movs	r0, #5
 800b070:	f003 ff90 	bl	800ef94 <xnrm2_nLdASVZH>
 800b074:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
  if (beta1 != 0.0) {
 800b078:	f04f 0200 	mov.w	r2, #0
 800b07c:	f04f 0300 	mov.w	r3, #0
 800b080:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800b084:	f7f5 fd12 	bl	8000aac <__aeabi_dcmpeq>
 800b088:	4603      	mov	r3, r0
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	f040 8172 	bne.w	800b374 <qr_DvOBrgQi+0x360>
    beta1 = rt_hypotd_snf(b_A[0], beta1);
 800b090:	ed97 7b22 	vldr	d7, [r7, #136]	; 0x88
 800b094:	ed97 1b52 	vldr	d1, [r7, #328]	; 0x148
 800b098:	eeb0 0a47 	vmov.f32	s0, s14
 800b09c:	eef0 0a67 	vmov.f32	s1, s15
 800b0a0:	f001 fa92 	bl	800c5c8 <rt_hypotd_snf>
 800b0a4:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
    if (b_A[0] >= 0.0) {
 800b0a8:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800b0ac:	f04f 0200 	mov.w	r2, #0
 800b0b0:	f04f 0300 	mov.w	r3, #0
 800b0b4:	f7f5 fd18 	bl	8000ae8 <__aeabi_dcmpge>
 800b0b8:	4603      	mov	r3, r0
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d009      	beq.n	800b0d2 <qr_DvOBrgQi+0xbe>
      beta1 = -beta1;
 800b0be:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800b0c2:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800b0c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800b0ca:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800b0ce:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    }

    if (fabs(beta1) < 1.0020841800044864E-292) {
 800b0d2:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 800b0d6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800b0da:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800b0de:	f04f 0200 	mov.w	r2, #0
 800b0e2:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800b0e6:	4620      	mov	r0, r4
 800b0e8:	4629      	mov	r1, r5
 800b0ea:	f7f5 fce9 	bl	8000ac0 <__aeabi_dcmplt>
 800b0ee:	4603      	mov	r3, r0
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	f000 80f1 	beq.w	800b2d8 <qr_DvOBrgQi+0x2c4>
      knt = 0;
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
      do {
        knt++;
 800b0fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800b100:	3301      	adds	r3, #1
 800b102:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        for (b_coltop = 1; b_coltop < 6; b_coltop++) {
 800b106:	2301      	movs	r3, #1
 800b108:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800b10c:	e01f      	b.n	800b14e <qr_DvOBrgQi+0x13a>
          b_A[b_coltop] *= 9.9792015476736E+291;
 800b10e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b112:	00db      	lsls	r3, r3, #3
 800b114:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800b118:	4413      	add	r3, r2
 800b11a:	3bd0      	subs	r3, #208	; 0xd0
 800b11c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b120:	f04f 0200 	mov.w	r2, #0
 800b124:	4bca      	ldr	r3, [pc, #808]	; (800b450 <qr_DvOBrgQi+0x43c>)
 800b126:	f7f5 fa59 	bl	80005dc <__aeabi_dmul>
 800b12a:	4602      	mov	r2, r0
 800b12c:	460b      	mov	r3, r1
 800b12e:	4610      	mov	r0, r2
 800b130:	4619      	mov	r1, r3
 800b132:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b136:	00db      	lsls	r3, r3, #3
 800b138:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800b13c:	4413      	add	r3, r2
 800b13e:	3bd0      	subs	r3, #208	; 0xd0
 800b140:	e9c3 0100 	strd	r0, r1, [r3]
        for (b_coltop = 1; b_coltop < 6; b_coltop++) {
 800b144:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b148:	3301      	adds	r3, #1
 800b14a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800b14e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b152:	2b05      	cmp	r3, #5
 800b154:	dddb      	ble.n	800b10e <qr_DvOBrgQi+0xfa>
        }

        beta1 *= 9.9792015476736E+291;
 800b156:	f04f 0200 	mov.w	r2, #0
 800b15a:	4bbd      	ldr	r3, [pc, #756]	; (800b450 <qr_DvOBrgQi+0x43c>)
 800b15c:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800b160:	f7f5 fa3c 	bl	80005dc <__aeabi_dmul>
 800b164:	4602      	mov	r2, r0
 800b166:	460b      	mov	r3, r1
 800b168:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
        atmp *= 9.9792015476736E+291;
 800b16c:	f04f 0200 	mov.w	r2, #0
 800b170:	4bb7      	ldr	r3, [pc, #732]	; (800b450 <qr_DvOBrgQi+0x43c>)
 800b172:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 800b176:	f7f5 fa31 	bl	80005dc <__aeabi_dmul>
 800b17a:	4602      	mov	r2, r0
 800b17c:	460b      	mov	r3, r1
 800b17e:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      } while ((fabs(beta1) < 1.0020841800044864E-292) && (knt < 20));
 800b182:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800b186:	65bb      	str	r3, [r7, #88]	; 0x58
 800b188:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800b18c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b190:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b192:	f04f 0200 	mov.w	r2, #0
 800b196:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800b19a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800b19e:	f7f5 fc8f 	bl	8000ac0 <__aeabi_dcmplt>
 800b1a2:	4603      	mov	r3, r0
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d003      	beq.n	800b1b0 <qr_DvOBrgQi+0x19c>
 800b1a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800b1ac:	2b13      	cmp	r3, #19
 800b1ae:	dda5      	ble.n	800b0fc <qr_DvOBrgQi+0xe8>

      beta1 = rt_hypotd_snf(atmp, xnrm2_nLdASVZH(5, b_A, 2));
 800b1b0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800b1b4:	2202      	movs	r2, #2
 800b1b6:	4619      	mov	r1, r3
 800b1b8:	2005      	movs	r0, #5
 800b1ba:	f003 feeb 	bl	800ef94 <xnrm2_nLdASVZH>
 800b1be:	eeb0 7a40 	vmov.f32	s14, s0
 800b1c2:	eef0 7a60 	vmov.f32	s15, s1
 800b1c6:	eeb0 1a47 	vmov.f32	s2, s14
 800b1ca:	eef0 1a67 	vmov.f32	s3, s15
 800b1ce:	ed97 0b54 	vldr	d0, [r7, #336]	; 0x150
 800b1d2:	f001 f9f9 	bl	800c5c8 <rt_hypotd_snf>
 800b1d6:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
      if (atmp >= 0.0) {
 800b1da:	f04f 0200 	mov.w	r2, #0
 800b1de:	f04f 0300 	mov.w	r3, #0
 800b1e2:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 800b1e6:	f7f5 fc7f 	bl	8000ae8 <__aeabi_dcmpge>
 800b1ea:	4603      	mov	r3, r0
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d009      	beq.n	800b204 <qr_DvOBrgQi+0x1f0>
        beta1 = -beta1;
 800b1f0:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800b1f4:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800b1f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800b1fc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800b200:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
      }

      tau_idx_0 = (beta1 - atmp) / beta1;
 800b204:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 800b208:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800b20c:	f7f5 f82e 	bl	800026c <__aeabi_dsub>
 800b210:	4602      	mov	r2, r0
 800b212:	460b      	mov	r3, r1
 800b214:	4610      	mov	r0, r2
 800b216:	4619      	mov	r1, r3
 800b218:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800b21c:	f7f5 fb08 	bl	8000830 <__aeabi_ddiv>
 800b220:	4602      	mov	r2, r0
 800b222:	460b      	mov	r3, r1
 800b224:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
      atmp = 1.0 / (atmp - beta1);
 800b228:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800b22c:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 800b230:	f7f5 f81c 	bl	800026c <__aeabi_dsub>
 800b234:	4602      	mov	r2, r0
 800b236:	460b      	mov	r3, r1
 800b238:	f04f 0000 	mov.w	r0, #0
 800b23c:	4985      	ldr	r1, [pc, #532]	; (800b454 <qr_DvOBrgQi+0x440>)
 800b23e:	f7f5 faf7 	bl	8000830 <__aeabi_ddiv>
 800b242:	4602      	mov	r2, r0
 800b244:	460b      	mov	r3, r1
 800b246:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      for (b_coltop = 1; b_coltop < 6; b_coltop++) {
 800b24a:	2301      	movs	r3, #1
 800b24c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800b250:	e01e      	b.n	800b290 <qr_DvOBrgQi+0x27c>
        b_A[b_coltop] *= atmp;
 800b252:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b256:	00db      	lsls	r3, r3, #3
 800b258:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800b25c:	4413      	add	r3, r2
 800b25e:	3bd0      	subs	r3, #208	; 0xd0
 800b260:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b264:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 800b268:	f7f5 f9b8 	bl	80005dc <__aeabi_dmul>
 800b26c:	4602      	mov	r2, r0
 800b26e:	460b      	mov	r3, r1
 800b270:	4610      	mov	r0, r2
 800b272:	4619      	mov	r1, r3
 800b274:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b278:	00db      	lsls	r3, r3, #3
 800b27a:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800b27e:	4413      	add	r3, r2
 800b280:	3bd0      	subs	r3, #208	; 0xd0
 800b282:	e9c3 0100 	strd	r0, r1, [r3]
      for (b_coltop = 1; b_coltop < 6; b_coltop++) {
 800b286:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b28a:	3301      	adds	r3, #1
 800b28c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800b290:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b294:	2b05      	cmp	r3, #5
 800b296:	dddc      	ble.n	800b252 <qr_DvOBrgQi+0x23e>
      }

      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 800b298:	2300      	movs	r3, #0
 800b29a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800b29e:	e010      	b.n	800b2c2 <qr_DvOBrgQi+0x2ae>
        beta1 *= 1.0020841800044864E-292;
 800b2a0:	f04f 0200 	mov.w	r2, #0
 800b2a4:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800b2a8:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800b2ac:	f7f5 f996 	bl	80005dc <__aeabi_dmul>
 800b2b0:	4602      	mov	r2, r0
 800b2b2:	460b      	mov	r3, r1
 800b2b4:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 800b2b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b2bc:	3301      	adds	r3, #1
 800b2be:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800b2c2:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800b2c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800b2ca:	429a      	cmp	r2, r3
 800b2cc:	dbe8      	blt.n	800b2a0 <qr_DvOBrgQi+0x28c>
      }

      atmp = beta1;
 800b2ce:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800b2d2:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
 800b2d6:	e04d      	b.n	800b374 <qr_DvOBrgQi+0x360>
    } else {
      tau_idx_0 = (beta1 - b_A[0]) / beta1;
 800b2d8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800b2dc:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800b2e0:	f7f4 ffc4 	bl	800026c <__aeabi_dsub>
 800b2e4:	4602      	mov	r2, r0
 800b2e6:	460b      	mov	r3, r1
 800b2e8:	4610      	mov	r0, r2
 800b2ea:	4619      	mov	r1, r3
 800b2ec:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800b2f0:	f7f5 fa9e 	bl	8000830 <__aeabi_ddiv>
 800b2f4:	4602      	mov	r2, r0
 800b2f6:	460b      	mov	r3, r1
 800b2f8:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
      atmp = 1.0 / (b_A[0] - beta1);
 800b2fc:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800b300:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800b304:	f7f4 ffb2 	bl	800026c <__aeabi_dsub>
 800b308:	4602      	mov	r2, r0
 800b30a:	460b      	mov	r3, r1
 800b30c:	f04f 0000 	mov.w	r0, #0
 800b310:	4950      	ldr	r1, [pc, #320]	; (800b454 <qr_DvOBrgQi+0x440>)
 800b312:	f7f5 fa8d 	bl	8000830 <__aeabi_ddiv>
 800b316:	4602      	mov	r2, r0
 800b318:	460b      	mov	r3, r1
 800b31a:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      for (c_lastc = 1; c_lastc < 6; c_lastc++) {
 800b31e:	2301      	movs	r3, #1
 800b320:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800b324:	e01e      	b.n	800b364 <qr_DvOBrgQi+0x350>
        b_A[c_lastc] *= atmp;
 800b326:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b32a:	00db      	lsls	r3, r3, #3
 800b32c:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800b330:	4413      	add	r3, r2
 800b332:	3bd0      	subs	r3, #208	; 0xd0
 800b334:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b338:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 800b33c:	f7f5 f94e 	bl	80005dc <__aeabi_dmul>
 800b340:	4602      	mov	r2, r0
 800b342:	460b      	mov	r3, r1
 800b344:	4610      	mov	r0, r2
 800b346:	4619      	mov	r1, r3
 800b348:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b34c:	00db      	lsls	r3, r3, #3
 800b34e:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800b352:	4413      	add	r3, r2
 800b354:	3bd0      	subs	r3, #208	; 0xd0
 800b356:	e9c3 0100 	strd	r0, r1, [r3]
      for (c_lastc = 1; c_lastc < 6; c_lastc++) {
 800b35a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b35e:	3301      	adds	r3, #1
 800b360:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800b364:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b368:	2b05      	cmp	r3, #5
 800b36a:	dddc      	ble.n	800b326 <qr_DvOBrgQi+0x312>
      }

      atmp = beta1;
 800b36c:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800b370:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
    }
  }

  b_A[0] = 1.0;
 800b374:	f04f 0200 	mov.w	r2, #0
 800b378:	4b36      	ldr	r3, [pc, #216]	; (800b454 <qr_DvOBrgQi+0x440>)
 800b37a:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
  if (tau_idx_0 != 0.0) {
 800b37e:	f04f 0200 	mov.w	r2, #0
 800b382:	f04f 0300 	mov.w	r3, #0
 800b386:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 800b38a:	f7f5 fb8f 	bl	8000aac <__aeabi_dcmpeq>
 800b38e:	4603      	mov	r3, r0
 800b390:	2b00      	cmp	r3, #0
 800b392:	f040 8083 	bne.w	800b49c <qr_DvOBrgQi+0x488>
    knt = 6;
 800b396:	2306      	movs	r3, #6
 800b398:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    c_lastc = 5;
 800b39c:	2305      	movs	r3, #5
 800b39e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    while ((knt > 0) && (b_A[c_lastc] == 0.0)) {
 800b3a2:	e009      	b.n	800b3b8 <qr_DvOBrgQi+0x3a4>
      knt--;
 800b3a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800b3a8:	3b01      	subs	r3, #1
 800b3aa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
      c_lastc--;
 800b3ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b3b2:	3b01      	subs	r3, #1
 800b3b4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    while ((knt > 0) && (b_A[c_lastc] == 0.0)) {
 800b3b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	dd11      	ble.n	800b3e4 <qr_DvOBrgQi+0x3d0>
 800b3c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b3c4:	00db      	lsls	r3, r3, #3
 800b3c6:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800b3ca:	4413      	add	r3, r2
 800b3cc:	3bd0      	subs	r3, #208	; 0xd0
 800b3ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b3d2:	f04f 0200 	mov.w	r2, #0
 800b3d6:	f04f 0300 	mov.w	r3, #0
 800b3da:	f7f5 fb67 	bl	8000aac <__aeabi_dcmpeq>
 800b3de:	4603      	mov	r3, r0
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d1df      	bne.n	800b3a4 <qr_DvOBrgQi+0x390>
    }

    c_lastc = 2;
 800b3e4:	2302      	movs	r3, #2
 800b3e6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    exitg2 = false;
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
    while ((!exitg2) && (c_lastc > 0)) {
 800b3f0:	e04b      	b.n	800b48a <qr_DvOBrgQi+0x476>
      b_coltop = (c_lastc - 1) * 6 + 6;
 800b3f2:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800b3f6:	4613      	mov	r3, r2
 800b3f8:	005b      	lsls	r3, r3, #1
 800b3fa:	4413      	add	r3, r2
 800b3fc:	005b      	lsls	r3, r3, #1
 800b3fe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
      coltop = b_coltop;
 800b402:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b406:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
      do {
        exitg1 = 0;
 800b40a:	2300      	movs	r3, #0
 800b40c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        if (coltop + 1 <= b_coltop + knt) {
 800b410:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800b414:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800b418:	441a      	add	r2, r3
 800b41a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800b41e:	4293      	cmp	r3, r2
 800b420:	da20      	bge.n	800b464 <qr_DvOBrgQi+0x450>
          if (b_A[coltop] != 0.0) {
 800b422:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800b426:	00db      	lsls	r3, r3, #3
 800b428:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800b42c:	4413      	add	r3, r2
 800b42e:	3bd0      	subs	r3, #208	; 0xd0
 800b430:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b434:	f04f 0200 	mov.w	r2, #0
 800b438:	f04f 0300 	mov.w	r3, #0
 800b43c:	f7f5 fb36 	bl	8000aac <__aeabi_dcmpeq>
 800b440:	4603      	mov	r3, r0
 800b442:	2b00      	cmp	r3, #0
 800b444:	d108      	bne.n	800b458 <qr_DvOBrgQi+0x444>
            exitg1 = 1;
 800b446:	2301      	movs	r3, #1
 800b448:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800b44c:	e012      	b.n	800b474 <qr_DvOBrgQi+0x460>
 800b44e:	bf00      	nop
 800b450:	7c900000 	.word	0x7c900000
 800b454:	3ff00000 	.word	0x3ff00000
          } else {
            coltop++;
 800b458:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800b45c:	3301      	adds	r3, #1
 800b45e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800b462:	e007      	b.n	800b474 <qr_DvOBrgQi+0x460>
          }
        } else {
          c_lastc--;
 800b464:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b468:	3b01      	subs	r3, #1
 800b46a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
          exitg1 = 2;
 800b46e:	2302      	movs	r3, #2
 800b470:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        }
      } while (exitg1 == 0);
 800b474:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d0c6      	beq.n	800b40a <qr_DvOBrgQi+0x3f6>

      if (exitg1 == 1) {
 800b47c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b480:	2b01      	cmp	r3, #1
 800b482:	d102      	bne.n	800b48a <qr_DvOBrgQi+0x476>
        exitg2 = true;
 800b484:	2301      	movs	r3, #1
 800b486:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
    while ((!exitg2) && (c_lastc > 0)) {
 800b48a:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d10a      	bne.n	800b4a8 <qr_DvOBrgQi+0x494>
 800b492:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b496:	2b00      	cmp	r3, #0
 800b498:	dcab      	bgt.n	800b3f2 <qr_DvOBrgQi+0x3de>
 800b49a:	e005      	b.n	800b4a8 <qr_DvOBrgQi+0x494>
      }
    }
  } else {
    knt = 0;
 800b49c:	2300      	movs	r3, #0
 800b49e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    c_lastc = 0;
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }

  if (knt > 0) {
 800b4a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	dd29      	ble.n	800b504 <qr_DvOBrgQi+0x4f0>
    xgemv_NQlWbt2i(knt, c_lastc, b_A, 7, b_A, 1, work);
 800b4b0:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800b4b4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800b4b8:	9302      	str	r3, [sp, #8]
 800b4ba:	2301      	movs	r3, #1
 800b4bc:	9301      	str	r3, [sp, #4]
 800b4be:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800b4c2:	9300      	str	r3, [sp, #0]
 800b4c4:	2307      	movs	r3, #7
 800b4c6:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 800b4ca:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800b4ce:	f003 f943 	bl	800e758 <xgemv_NQlWbt2i>
    xgerc_R09LiDgJ(knt, c_lastc, -tau_idx_0, 1, work, b_A, 7);
 800b4d2:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800b4d6:	653b      	str	r3, [r7, #80]	; 0x50
 800b4d8:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800b4dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800b4e0:	657b      	str	r3, [r7, #84]	; 0x54
 800b4e2:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800b4e6:	2307      	movs	r3, #7
 800b4e8:	9301      	str	r3, [sp, #4]
 800b4ea:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800b4ee:	9300      	str	r3, [sp, #0]
 800b4f0:	4613      	mov	r3, r2
 800b4f2:	2201      	movs	r2, #1
 800b4f4:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 800b4f8:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 800b4fc:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800b500:	f003 fa38 	bl	800e974 <xgerc_R09LiDgJ>
  }

  b_A[0] = atmp;
 800b504:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 800b508:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
  atmp = b_A[7];
 800b50c:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 800b510:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
  tau_idx_1 = 0.0;
 800b514:	f04f 0200 	mov.w	r2, #0
 800b518:	f04f 0300 	mov.w	r3, #0
 800b51c:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
  beta1 = xnrm2_nLdASVZH(4, b_A, 9);
 800b520:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800b524:	2209      	movs	r2, #9
 800b526:	4619      	mov	r1, r3
 800b528:	2004      	movs	r0, #4
 800b52a:	f003 fd33 	bl	800ef94 <xnrm2_nLdASVZH>
 800b52e:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
  if (beta1 != 0.0) {
 800b532:	f04f 0200 	mov.w	r2, #0
 800b536:	f04f 0300 	mov.w	r3, #0
 800b53a:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800b53e:	f7f5 fab5 	bl	8000aac <__aeabi_dcmpeq>
 800b542:	4603      	mov	r3, r0
 800b544:	2b00      	cmp	r3, #0
 800b546:	f040 8174 	bne.w	800b832 <qr_DvOBrgQi+0x81e>
    beta1 = rt_hypotd_snf(b_A[7], beta1);
 800b54a:	ed97 7b30 	vldr	d7, [r7, #192]	; 0xc0
 800b54e:	ed97 1b52 	vldr	d1, [r7, #328]	; 0x148
 800b552:	eeb0 0a47 	vmov.f32	s0, s14
 800b556:	eef0 0a67 	vmov.f32	s1, s15
 800b55a:	f001 f835 	bl	800c5c8 <rt_hypotd_snf>
 800b55e:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
    if (b_A[7] >= 0.0) {
 800b562:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800b566:	f04f 0200 	mov.w	r2, #0
 800b56a:	f04f 0300 	mov.w	r3, #0
 800b56e:	f7f5 fabb 	bl	8000ae8 <__aeabi_dcmpge>
 800b572:	4603      	mov	r3, r0
 800b574:	2b00      	cmp	r3, #0
 800b576:	d009      	beq.n	800b58c <qr_DvOBrgQi+0x578>
      beta1 = -beta1;
 800b578:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800b57c:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800b580:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800b584:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800b588:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    }

    if (fabs(beta1) < 1.0020841800044864E-292) {
 800b58c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800b590:	64bb      	str	r3, [r7, #72]	; 0x48
 800b592:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800b596:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b59a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b59c:	f04f 0200 	mov.w	r2, #0
 800b5a0:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800b5a4:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800b5a8:	f7f5 fa8a 	bl	8000ac0 <__aeabi_dcmplt>
 800b5ac:	4603      	mov	r3, r0
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	f000 80f1 	beq.w	800b796 <qr_DvOBrgQi+0x782>
      knt = 0;
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
      do {
        knt++;
 800b5ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800b5be:	3301      	adds	r3, #1
 800b5c0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        for (b_coltop = 8; b_coltop < 12; b_coltop++) {
 800b5c4:	2308      	movs	r3, #8
 800b5c6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800b5ca:	e01f      	b.n	800b60c <qr_DvOBrgQi+0x5f8>
          b_A[b_coltop] *= 9.9792015476736E+291;
 800b5cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b5d0:	00db      	lsls	r3, r3, #3
 800b5d2:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800b5d6:	4413      	add	r3, r2
 800b5d8:	3bd0      	subs	r3, #208	; 0xd0
 800b5da:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b5de:	f04f 0200 	mov.w	r2, #0
 800b5e2:	4bc6      	ldr	r3, [pc, #792]	; (800b8fc <qr_DvOBrgQi+0x8e8>)
 800b5e4:	f7f4 fffa 	bl	80005dc <__aeabi_dmul>
 800b5e8:	4602      	mov	r2, r0
 800b5ea:	460b      	mov	r3, r1
 800b5ec:	4610      	mov	r0, r2
 800b5ee:	4619      	mov	r1, r3
 800b5f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b5f4:	00db      	lsls	r3, r3, #3
 800b5f6:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800b5fa:	4413      	add	r3, r2
 800b5fc:	3bd0      	subs	r3, #208	; 0xd0
 800b5fe:	e9c3 0100 	strd	r0, r1, [r3]
        for (b_coltop = 8; b_coltop < 12; b_coltop++) {
 800b602:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b606:	3301      	adds	r3, #1
 800b608:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800b60c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b610:	2b0b      	cmp	r3, #11
 800b612:	dddb      	ble.n	800b5cc <qr_DvOBrgQi+0x5b8>
        }

        beta1 *= 9.9792015476736E+291;
 800b614:	f04f 0200 	mov.w	r2, #0
 800b618:	4bb8      	ldr	r3, [pc, #736]	; (800b8fc <qr_DvOBrgQi+0x8e8>)
 800b61a:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800b61e:	f7f4 ffdd 	bl	80005dc <__aeabi_dmul>
 800b622:	4602      	mov	r2, r0
 800b624:	460b      	mov	r3, r1
 800b626:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
        atmp *= 9.9792015476736E+291;
 800b62a:	f04f 0200 	mov.w	r2, #0
 800b62e:	4bb3      	ldr	r3, [pc, #716]	; (800b8fc <qr_DvOBrgQi+0x8e8>)
 800b630:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 800b634:	f7f4 ffd2 	bl	80005dc <__aeabi_dmul>
 800b638:	4602      	mov	r2, r0
 800b63a:	460b      	mov	r3, r1
 800b63c:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      } while ((fabs(beta1) < 1.0020841800044864E-292) && (knt < 20));
 800b640:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800b644:	643b      	str	r3, [r7, #64]	; 0x40
 800b646:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800b64a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b64e:	647b      	str	r3, [r7, #68]	; 0x44
 800b650:	f04f 0200 	mov.w	r2, #0
 800b654:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800b658:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800b65c:	f7f5 fa30 	bl	8000ac0 <__aeabi_dcmplt>
 800b660:	4603      	mov	r3, r0
 800b662:	2b00      	cmp	r3, #0
 800b664:	d003      	beq.n	800b66e <qr_DvOBrgQi+0x65a>
 800b666:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800b66a:	2b13      	cmp	r3, #19
 800b66c:	dda5      	ble.n	800b5ba <qr_DvOBrgQi+0x5a6>

      beta1 = rt_hypotd_snf(atmp, xnrm2_nLdASVZH(4, b_A, 9));
 800b66e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800b672:	2209      	movs	r2, #9
 800b674:	4619      	mov	r1, r3
 800b676:	2004      	movs	r0, #4
 800b678:	f003 fc8c 	bl	800ef94 <xnrm2_nLdASVZH>
 800b67c:	eeb0 7a40 	vmov.f32	s14, s0
 800b680:	eef0 7a60 	vmov.f32	s15, s1
 800b684:	eeb0 1a47 	vmov.f32	s2, s14
 800b688:	eef0 1a67 	vmov.f32	s3, s15
 800b68c:	ed97 0b54 	vldr	d0, [r7, #336]	; 0x150
 800b690:	f000 ff9a 	bl	800c5c8 <rt_hypotd_snf>
 800b694:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
      if (atmp >= 0.0) {
 800b698:	f04f 0200 	mov.w	r2, #0
 800b69c:	f04f 0300 	mov.w	r3, #0
 800b6a0:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 800b6a4:	f7f5 fa20 	bl	8000ae8 <__aeabi_dcmpge>
 800b6a8:	4603      	mov	r3, r0
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d009      	beq.n	800b6c2 <qr_DvOBrgQi+0x6ae>
        beta1 = -beta1;
 800b6ae:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800b6b2:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800b6b6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800b6ba:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800b6be:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
      }

      tau_idx_1 = (beta1 - atmp) / beta1;
 800b6c2:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 800b6c6:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800b6ca:	f7f4 fdcf 	bl	800026c <__aeabi_dsub>
 800b6ce:	4602      	mov	r2, r0
 800b6d0:	460b      	mov	r3, r1
 800b6d2:	4610      	mov	r0, r2
 800b6d4:	4619      	mov	r1, r3
 800b6d6:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800b6da:	f7f5 f8a9 	bl	8000830 <__aeabi_ddiv>
 800b6de:	4602      	mov	r2, r0
 800b6e0:	460b      	mov	r3, r1
 800b6e2:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
      atmp = 1.0 / (atmp - beta1);
 800b6e6:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800b6ea:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 800b6ee:	f7f4 fdbd 	bl	800026c <__aeabi_dsub>
 800b6f2:	4602      	mov	r2, r0
 800b6f4:	460b      	mov	r3, r1
 800b6f6:	f04f 0000 	mov.w	r0, #0
 800b6fa:	4981      	ldr	r1, [pc, #516]	; (800b900 <qr_DvOBrgQi+0x8ec>)
 800b6fc:	f7f5 f898 	bl	8000830 <__aeabi_ddiv>
 800b700:	4602      	mov	r2, r0
 800b702:	460b      	mov	r3, r1
 800b704:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      for (b_coltop = 8; b_coltop < 12; b_coltop++) {
 800b708:	2308      	movs	r3, #8
 800b70a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800b70e:	e01e      	b.n	800b74e <qr_DvOBrgQi+0x73a>
        b_A[b_coltop] *= atmp;
 800b710:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b714:	00db      	lsls	r3, r3, #3
 800b716:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800b71a:	4413      	add	r3, r2
 800b71c:	3bd0      	subs	r3, #208	; 0xd0
 800b71e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b722:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 800b726:	f7f4 ff59 	bl	80005dc <__aeabi_dmul>
 800b72a:	4602      	mov	r2, r0
 800b72c:	460b      	mov	r3, r1
 800b72e:	4610      	mov	r0, r2
 800b730:	4619      	mov	r1, r3
 800b732:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b736:	00db      	lsls	r3, r3, #3
 800b738:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800b73c:	4413      	add	r3, r2
 800b73e:	3bd0      	subs	r3, #208	; 0xd0
 800b740:	e9c3 0100 	strd	r0, r1, [r3]
      for (b_coltop = 8; b_coltop < 12; b_coltop++) {
 800b744:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b748:	3301      	adds	r3, #1
 800b74a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800b74e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b752:	2b0b      	cmp	r3, #11
 800b754:	dddc      	ble.n	800b710 <qr_DvOBrgQi+0x6fc>
      }

      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 800b756:	2300      	movs	r3, #0
 800b758:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800b75c:	e010      	b.n	800b780 <qr_DvOBrgQi+0x76c>
        beta1 *= 1.0020841800044864E-292;
 800b75e:	f04f 0200 	mov.w	r2, #0
 800b762:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800b766:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800b76a:	f7f4 ff37 	bl	80005dc <__aeabi_dmul>
 800b76e:	4602      	mov	r2, r0
 800b770:	460b      	mov	r3, r1
 800b772:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 800b776:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b77a:	3301      	adds	r3, #1
 800b77c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800b780:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800b784:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800b788:	429a      	cmp	r2, r3
 800b78a:	dbe8      	blt.n	800b75e <qr_DvOBrgQi+0x74a>
      }

      atmp = beta1;
 800b78c:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800b790:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
 800b794:	e04d      	b.n	800b832 <qr_DvOBrgQi+0x81e>
    } else {
      tau_idx_1 = (beta1 - b_A[7]) / beta1;
 800b796:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 800b79a:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800b79e:	f7f4 fd65 	bl	800026c <__aeabi_dsub>
 800b7a2:	4602      	mov	r2, r0
 800b7a4:	460b      	mov	r3, r1
 800b7a6:	4610      	mov	r0, r2
 800b7a8:	4619      	mov	r1, r3
 800b7aa:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800b7ae:	f7f5 f83f 	bl	8000830 <__aeabi_ddiv>
 800b7b2:	4602      	mov	r2, r0
 800b7b4:	460b      	mov	r3, r1
 800b7b6:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
      atmp = 1.0 / (b_A[7] - beta1);
 800b7ba:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800b7be:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800b7c2:	f7f4 fd53 	bl	800026c <__aeabi_dsub>
 800b7c6:	4602      	mov	r2, r0
 800b7c8:	460b      	mov	r3, r1
 800b7ca:	f04f 0000 	mov.w	r0, #0
 800b7ce:	494c      	ldr	r1, [pc, #304]	; (800b900 <qr_DvOBrgQi+0x8ec>)
 800b7d0:	f7f5 f82e 	bl	8000830 <__aeabi_ddiv>
 800b7d4:	4602      	mov	r2, r0
 800b7d6:	460b      	mov	r3, r1
 800b7d8:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      for (c_lastc = 8; c_lastc < 12; c_lastc++) {
 800b7dc:	2308      	movs	r3, #8
 800b7de:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800b7e2:	e01e      	b.n	800b822 <qr_DvOBrgQi+0x80e>
        b_A[c_lastc] *= atmp;
 800b7e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b7e8:	00db      	lsls	r3, r3, #3
 800b7ea:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800b7ee:	4413      	add	r3, r2
 800b7f0:	3bd0      	subs	r3, #208	; 0xd0
 800b7f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b7f6:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 800b7fa:	f7f4 feef 	bl	80005dc <__aeabi_dmul>
 800b7fe:	4602      	mov	r2, r0
 800b800:	460b      	mov	r3, r1
 800b802:	4610      	mov	r0, r2
 800b804:	4619      	mov	r1, r3
 800b806:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b80a:	00db      	lsls	r3, r3, #3
 800b80c:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800b810:	4413      	add	r3, r2
 800b812:	3bd0      	subs	r3, #208	; 0xd0
 800b814:	e9c3 0100 	strd	r0, r1, [r3]
      for (c_lastc = 8; c_lastc < 12; c_lastc++) {
 800b818:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b81c:	3301      	adds	r3, #1
 800b81e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800b822:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b826:	2b0b      	cmp	r3, #11
 800b828:	dddc      	ble.n	800b7e4 <qr_DvOBrgQi+0x7d0>
      }

      atmp = beta1;
 800b82a:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800b82e:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
    }
  }

  b_A[7] = 1.0;
 800b832:	f04f 0200 	mov.w	r2, #0
 800b836:	4b32      	ldr	r3, [pc, #200]	; (800b900 <qr_DvOBrgQi+0x8ec>)
 800b838:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
  if (tau_idx_1 != 0.0) {
 800b83c:	f04f 0200 	mov.w	r2, #0
 800b840:	f04f 0300 	mov.w	r3, #0
 800b844:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 800b848:	f7f5 f930 	bl	8000aac <__aeabi_dcmpeq>
 800b84c:	4603      	mov	r3, r0
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d163      	bne.n	800b91a <qr_DvOBrgQi+0x906>
    knt = 5;
 800b852:	2305      	movs	r3, #5
 800b854:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    c_lastc = 11;
 800b858:	230b      	movs	r3, #11
 800b85a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    while ((knt > 0) && (b_A[c_lastc] == 0.0)) {
 800b85e:	e009      	b.n	800b874 <qr_DvOBrgQi+0x860>
      knt--;
 800b860:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800b864:	3b01      	subs	r3, #1
 800b866:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
      c_lastc--;
 800b86a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b86e:	3b01      	subs	r3, #1
 800b870:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    while ((knt > 0) && (b_A[c_lastc] == 0.0)) {
 800b874:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800b878:	2b00      	cmp	r3, #0
 800b87a:	dd11      	ble.n	800b8a0 <qr_DvOBrgQi+0x88c>
 800b87c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b880:	00db      	lsls	r3, r3, #3
 800b882:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800b886:	4413      	add	r3, r2
 800b888:	3bd0      	subs	r3, #208	; 0xd0
 800b88a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b88e:	f04f 0200 	mov.w	r2, #0
 800b892:	f04f 0300 	mov.w	r3, #0
 800b896:	f7f5 f909 	bl	8000aac <__aeabi_dcmpeq>
 800b89a:	4603      	mov	r3, r0
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d1df      	bne.n	800b860 <qr_DvOBrgQi+0x84c>
    }

    c_lastc = 1;
 800b8a0:	2301      	movs	r3, #1
 800b8a2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    coltop = 13;
 800b8a6:	230d      	movs	r3, #13
 800b8a8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    do {
      exitg1 = 0;
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
      if (coltop + 1 <= knt + 13) {
 800b8b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800b8b6:	f103 020c 	add.w	r2, r3, #12
 800b8ba:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800b8be:	4293      	cmp	r3, r2
 800b8c0:	dc20      	bgt.n	800b904 <qr_DvOBrgQi+0x8f0>
        if (b_A[coltop] != 0.0) {
 800b8c2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800b8c6:	00db      	lsls	r3, r3, #3
 800b8c8:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800b8cc:	4413      	add	r3, r2
 800b8ce:	3bd0      	subs	r3, #208	; 0xd0
 800b8d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b8d4:	f04f 0200 	mov.w	r2, #0
 800b8d8:	f04f 0300 	mov.w	r3, #0
 800b8dc:	f7f5 f8e6 	bl	8000aac <__aeabi_dcmpeq>
 800b8e0:	4603      	mov	r3, r0
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d103      	bne.n	800b8ee <qr_DvOBrgQi+0x8da>
          exitg1 = 1;
 800b8e6:	2301      	movs	r3, #1
 800b8e8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800b8ec:	e010      	b.n	800b910 <qr_DvOBrgQi+0x8fc>
        } else {
          coltop++;
 800b8ee:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800b8f2:	3301      	adds	r3, #1
 800b8f4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800b8f8:	e00a      	b.n	800b910 <qr_DvOBrgQi+0x8fc>
 800b8fa:	bf00      	nop
 800b8fc:	7c900000 	.word	0x7c900000
 800b900:	3ff00000 	.word	0x3ff00000
        }
      } else {
        c_lastc = 0;
 800b904:	2300      	movs	r3, #0
 800b906:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
        exitg1 = 1;
 800b90a:	2301      	movs	r3, #1
 800b90c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
      }
    } while (exitg1 == 0);
 800b910:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b914:	2b00      	cmp	r3, #0
 800b916:	d0c9      	beq.n	800b8ac <qr_DvOBrgQi+0x898>
 800b918:	e005      	b.n	800b926 <qr_DvOBrgQi+0x912>
  } else {
    knt = 0;
 800b91a:	2300      	movs	r3, #0
 800b91c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    c_lastc = 0;
 800b920:	2300      	movs	r3, #0
 800b922:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }

  if (knt > 0) {
 800b926:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	dd29      	ble.n	800b982 <qr_DvOBrgQi+0x96e>
    xgemv_NQlWbt2i(knt, c_lastc, b_A, 14, b_A, 8, work);
 800b92e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800b932:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800b936:	9302      	str	r3, [sp, #8]
 800b938:	2308      	movs	r3, #8
 800b93a:	9301      	str	r3, [sp, #4]
 800b93c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800b940:	9300      	str	r3, [sp, #0]
 800b942:	230e      	movs	r3, #14
 800b944:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 800b948:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800b94c:	f002 ff04 	bl	800e758 <xgemv_NQlWbt2i>
    xgerc_R09LiDgJ(knt, c_lastc, -tau_idx_1, 8, work, b_A, 14);
 800b950:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800b954:	63bb      	str	r3, [r7, #56]	; 0x38
 800b956:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800b95a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800b95e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b960:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800b964:	230e      	movs	r3, #14
 800b966:	9301      	str	r3, [sp, #4]
 800b968:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800b96c:	9300      	str	r3, [sp, #0]
 800b96e:	4613      	mov	r3, r2
 800b970:	2208      	movs	r2, #8
 800b972:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 800b976:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 800b97a:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800b97e:	f002 fff9 	bl	800e974 <xgerc_R09LiDgJ>
  }

  b_A[7] = atmp;
 800b982:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 800b986:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
  atmp = b_A[14];
 800b98a:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 800b98e:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
  tau_idx_2 = 0.0;
 800b992:	f04f 0200 	mov.w	r2, #0
 800b996:	f04f 0300 	mov.w	r3, #0
 800b99a:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
  beta1 = xnrm2_nLdASVZH(3, b_A, 16);
 800b99e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800b9a2:	2210      	movs	r2, #16
 800b9a4:	4619      	mov	r1, r3
 800b9a6:	2003      	movs	r0, #3
 800b9a8:	f003 faf4 	bl	800ef94 <xnrm2_nLdASVZH>
 800b9ac:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
  if (beta1 != 0.0) {
 800b9b0:	f04f 0200 	mov.w	r2, #0
 800b9b4:	f04f 0300 	mov.w	r3, #0
 800b9b8:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800b9bc:	f7f5 f876 	bl	8000aac <__aeabi_dcmpeq>
 800b9c0:	4603      	mov	r3, r0
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	f040 8170 	bne.w	800bca8 <qr_DvOBrgQi+0xc94>
    beta1 = rt_hypotd_snf(b_A[14], beta1);
 800b9c8:	ed97 7b3e 	vldr	d7, [r7, #248]	; 0xf8
 800b9cc:	ed97 1b52 	vldr	d1, [r7, #328]	; 0x148
 800b9d0:	eeb0 0a47 	vmov.f32	s0, s14
 800b9d4:	eef0 0a67 	vmov.f32	s1, s15
 800b9d8:	f000 fdf6 	bl	800c5c8 <rt_hypotd_snf>
 800b9dc:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
    if (b_A[14] >= 0.0) {
 800b9e0:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 800b9e4:	f04f 0200 	mov.w	r2, #0
 800b9e8:	f04f 0300 	mov.w	r3, #0
 800b9ec:	f7f5 f87c 	bl	8000ae8 <__aeabi_dcmpge>
 800b9f0:	4603      	mov	r3, r0
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d009      	beq.n	800ba0a <qr_DvOBrgQi+0x9f6>
      beta1 = -beta1;
 800b9f6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800b9fa:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800b9fe:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800ba02:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800ba06:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    }

    if (fabs(beta1) < 1.0020841800044864E-292) {
 800ba0a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800ba0e:	633b      	str	r3, [r7, #48]	; 0x30
 800ba10:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800ba14:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ba18:	637b      	str	r3, [r7, #52]	; 0x34
 800ba1a:	f04f 0200 	mov.w	r2, #0
 800ba1e:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800ba22:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800ba26:	f7f5 f84b 	bl	8000ac0 <__aeabi_dcmplt>
 800ba2a:	4603      	mov	r3, r0
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	f000 80ef 	beq.w	800bc10 <qr_DvOBrgQi+0xbfc>
      knt = 0;
 800ba32:	2300      	movs	r3, #0
 800ba34:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
      do {
        knt++;
 800ba38:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800ba3c:	3301      	adds	r3, #1
 800ba3e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        for (b_coltop = 15; b_coltop < 18; b_coltop++) {
 800ba42:	230f      	movs	r3, #15
 800ba44:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800ba48:	e01f      	b.n	800ba8a <qr_DvOBrgQi+0xa76>
          b_A[b_coltop] *= 9.9792015476736E+291;
 800ba4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ba4e:	00db      	lsls	r3, r3, #3
 800ba50:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800ba54:	4413      	add	r3, r2
 800ba56:	3bd0      	subs	r3, #208	; 0xd0
 800ba58:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ba5c:	f04f 0200 	mov.w	r2, #0
 800ba60:	4bb5      	ldr	r3, [pc, #724]	; (800bd38 <qr_DvOBrgQi+0xd24>)
 800ba62:	f7f4 fdbb 	bl	80005dc <__aeabi_dmul>
 800ba66:	4602      	mov	r2, r0
 800ba68:	460b      	mov	r3, r1
 800ba6a:	4610      	mov	r0, r2
 800ba6c:	4619      	mov	r1, r3
 800ba6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ba72:	00db      	lsls	r3, r3, #3
 800ba74:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800ba78:	4413      	add	r3, r2
 800ba7a:	3bd0      	subs	r3, #208	; 0xd0
 800ba7c:	e9c3 0100 	strd	r0, r1, [r3]
        for (b_coltop = 15; b_coltop < 18; b_coltop++) {
 800ba80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ba84:	3301      	adds	r3, #1
 800ba86:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800ba8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ba8e:	2b11      	cmp	r3, #17
 800ba90:	dddb      	ble.n	800ba4a <qr_DvOBrgQi+0xa36>
        }

        beta1 *= 9.9792015476736E+291;
 800ba92:	f04f 0200 	mov.w	r2, #0
 800ba96:	4ba8      	ldr	r3, [pc, #672]	; (800bd38 <qr_DvOBrgQi+0xd24>)
 800ba98:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800ba9c:	f7f4 fd9e 	bl	80005dc <__aeabi_dmul>
 800baa0:	4602      	mov	r2, r0
 800baa2:	460b      	mov	r3, r1
 800baa4:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
        atmp *= 9.9792015476736E+291;
 800baa8:	f04f 0200 	mov.w	r2, #0
 800baac:	4ba2      	ldr	r3, [pc, #648]	; (800bd38 <qr_DvOBrgQi+0xd24>)
 800baae:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 800bab2:	f7f4 fd93 	bl	80005dc <__aeabi_dmul>
 800bab6:	4602      	mov	r2, r0
 800bab8:	460b      	mov	r3, r1
 800baba:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      } while ((fabs(beta1) < 1.0020841800044864E-292) && (knt < 20));
 800babe:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800bac2:	62bb      	str	r3, [r7, #40]	; 0x28
 800bac4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800bac8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bacc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bace:	f04f 0200 	mov.w	r2, #0
 800bad2:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800bad6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800bada:	f7f4 fff1 	bl	8000ac0 <__aeabi_dcmplt>
 800bade:	4603      	mov	r3, r0
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d003      	beq.n	800baec <qr_DvOBrgQi+0xad8>
 800bae4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800bae8:	2b13      	cmp	r3, #19
 800baea:	dda5      	ble.n	800ba38 <qr_DvOBrgQi+0xa24>

      beta1 = rt_hypotd_snf(atmp, xnrm2_nLdASVZH(3, b_A, 16));
 800baec:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800baf0:	2210      	movs	r2, #16
 800baf2:	4619      	mov	r1, r3
 800baf4:	2003      	movs	r0, #3
 800baf6:	f003 fa4d 	bl	800ef94 <xnrm2_nLdASVZH>
 800bafa:	eeb0 7a40 	vmov.f32	s14, s0
 800bafe:	eef0 7a60 	vmov.f32	s15, s1
 800bb02:	eeb0 1a47 	vmov.f32	s2, s14
 800bb06:	eef0 1a67 	vmov.f32	s3, s15
 800bb0a:	ed97 0b54 	vldr	d0, [r7, #336]	; 0x150
 800bb0e:	f000 fd5b 	bl	800c5c8 <rt_hypotd_snf>
 800bb12:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
      if (atmp >= 0.0) {
 800bb16:	f04f 0200 	mov.w	r2, #0
 800bb1a:	f04f 0300 	mov.w	r3, #0
 800bb1e:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 800bb22:	f7f4 ffe1 	bl	8000ae8 <__aeabi_dcmpge>
 800bb26:	4603      	mov	r3, r0
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d009      	beq.n	800bb40 <qr_DvOBrgQi+0xb2c>
        beta1 = -beta1;
 800bb2c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800bb30:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800bb34:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800bb38:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800bb3c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
      }

      tau_idx_2 = (beta1 - atmp) / beta1;
 800bb40:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 800bb44:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800bb48:	f7f4 fb90 	bl	800026c <__aeabi_dsub>
 800bb4c:	4602      	mov	r2, r0
 800bb4e:	460b      	mov	r3, r1
 800bb50:	4610      	mov	r0, r2
 800bb52:	4619      	mov	r1, r3
 800bb54:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800bb58:	f7f4 fe6a 	bl	8000830 <__aeabi_ddiv>
 800bb5c:	4602      	mov	r2, r0
 800bb5e:	460b      	mov	r3, r1
 800bb60:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
      atmp = 1.0 / (atmp - beta1);
 800bb64:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800bb68:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 800bb6c:	f7f4 fb7e 	bl	800026c <__aeabi_dsub>
 800bb70:	4602      	mov	r2, r0
 800bb72:	460b      	mov	r3, r1
 800bb74:	f04f 0000 	mov.w	r0, #0
 800bb78:	4970      	ldr	r1, [pc, #448]	; (800bd3c <qr_DvOBrgQi+0xd28>)
 800bb7a:	f7f4 fe59 	bl	8000830 <__aeabi_ddiv>
 800bb7e:	4602      	mov	r2, r0
 800bb80:	460b      	mov	r3, r1
 800bb82:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      for (b_coltop = 15; b_coltop < 18; b_coltop++) {
 800bb86:	230f      	movs	r3, #15
 800bb88:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800bb8c:	e01c      	b.n	800bbc8 <qr_DvOBrgQi+0xbb4>
        b_A[b_coltop] *= atmp;
 800bb8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bb92:	00db      	lsls	r3, r3, #3
 800bb94:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800bb98:	4413      	add	r3, r2
 800bb9a:	3bd0      	subs	r3, #208	; 0xd0
 800bb9c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bba0:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 800bba4:	f7f4 fd1a 	bl	80005dc <__aeabi_dmul>
 800bba8:	4602      	mov	r2, r0
 800bbaa:	460b      	mov	r3, r1
 800bbac:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 800bbb0:	00c9      	lsls	r1, r1, #3
 800bbb2:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 800bbb6:	4401      	add	r1, r0
 800bbb8:	39d0      	subs	r1, #208	; 0xd0
 800bbba:	e9c1 2300 	strd	r2, r3, [r1]
      for (b_coltop = 15; b_coltop < 18; b_coltop++) {
 800bbbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bbc2:	3301      	adds	r3, #1
 800bbc4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800bbc8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bbcc:	2b11      	cmp	r3, #17
 800bbce:	ddde      	ble.n	800bb8e <qr_DvOBrgQi+0xb7a>
      }

      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 800bbd0:	2300      	movs	r3, #0
 800bbd2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800bbd6:	e010      	b.n	800bbfa <qr_DvOBrgQi+0xbe6>
        beta1 *= 1.0020841800044864E-292;
 800bbd8:	f04f 0200 	mov.w	r2, #0
 800bbdc:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800bbe0:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800bbe4:	f7f4 fcfa 	bl	80005dc <__aeabi_dmul>
 800bbe8:	4602      	mov	r2, r0
 800bbea:	460b      	mov	r3, r1
 800bbec:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 800bbf0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bbf4:	3301      	adds	r3, #1
 800bbf6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800bbfa:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800bbfe:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800bc02:	429a      	cmp	r2, r3
 800bc04:	dbe8      	blt.n	800bbd8 <qr_DvOBrgQi+0xbc4>
      }

      atmp = beta1;
 800bc06:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800bc0a:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
 800bc0e:	e04b      	b.n	800bca8 <qr_DvOBrgQi+0xc94>
    } else {
      tau_idx_2 = (beta1 - b_A[14]) / beta1;
 800bc10:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 800bc14:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800bc18:	f7f4 fb28 	bl	800026c <__aeabi_dsub>
 800bc1c:	4602      	mov	r2, r0
 800bc1e:	460b      	mov	r3, r1
 800bc20:	4610      	mov	r0, r2
 800bc22:	4619      	mov	r1, r3
 800bc24:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800bc28:	f7f4 fe02 	bl	8000830 <__aeabi_ddiv>
 800bc2c:	4602      	mov	r2, r0
 800bc2e:	460b      	mov	r3, r1
 800bc30:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
      atmp = 1.0 / (b_A[14] - beta1);
 800bc34:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 800bc38:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800bc3c:	f7f4 fb16 	bl	800026c <__aeabi_dsub>
 800bc40:	4602      	mov	r2, r0
 800bc42:	460b      	mov	r3, r1
 800bc44:	f04f 0000 	mov.w	r0, #0
 800bc48:	493c      	ldr	r1, [pc, #240]	; (800bd3c <qr_DvOBrgQi+0xd28>)
 800bc4a:	f7f4 fdf1 	bl	8000830 <__aeabi_ddiv>
 800bc4e:	4602      	mov	r2, r0
 800bc50:	460b      	mov	r3, r1
 800bc52:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      for (c_lastc = 15; c_lastc < 18; c_lastc++) {
 800bc56:	230f      	movs	r3, #15
 800bc58:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800bc5c:	e01c      	b.n	800bc98 <qr_DvOBrgQi+0xc84>
        b_A[c_lastc] *= atmp;
 800bc5e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bc62:	00db      	lsls	r3, r3, #3
 800bc64:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800bc68:	4413      	add	r3, r2
 800bc6a:	3bd0      	subs	r3, #208	; 0xd0
 800bc6c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bc70:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 800bc74:	f7f4 fcb2 	bl	80005dc <__aeabi_dmul>
 800bc78:	4602      	mov	r2, r0
 800bc7a:	460b      	mov	r3, r1
 800bc7c:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 800bc80:	00c9      	lsls	r1, r1, #3
 800bc82:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 800bc86:	4401      	add	r1, r0
 800bc88:	39d0      	subs	r1, #208	; 0xd0
 800bc8a:	e9c1 2300 	strd	r2, r3, [r1]
      for (c_lastc = 15; c_lastc < 18; c_lastc++) {
 800bc8e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bc92:	3301      	adds	r3, #1
 800bc94:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800bc98:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bc9c:	2b11      	cmp	r3, #17
 800bc9e:	ddde      	ble.n	800bc5e <qr_DvOBrgQi+0xc4a>
      }

      atmp = beta1;
 800bca0:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800bca4:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
    }
  }

  b_A[14] = atmp;
 800bca8:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 800bcac:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
  R[0] = b_A[0];
 800bcb0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800bcb4:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800bcb6:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 1; c_lastc + 1 < 4; c_lastc++) {
 800bcba:	2301      	movs	r3, #1
 800bcbc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800bcc0:	e00f      	b.n	800bce2 <qr_DvOBrgQi+0xcce>
    R[c_lastc] = 0.0;
 800bcc2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bcc6:	00db      	lsls	r3, r3, #3
 800bcc8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bcca:	18d1      	adds	r1, r2, r3
 800bccc:	f04f 0200 	mov.w	r2, #0
 800bcd0:	f04f 0300 	mov.w	r3, #0
 800bcd4:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 1; c_lastc + 1 < 4; c_lastc++) {
 800bcd8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bcdc:	3301      	adds	r3, #1
 800bcde:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800bce2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bce6:	2b02      	cmp	r3, #2
 800bce8:	ddeb      	ble.n	800bcc2 <qr_DvOBrgQi+0xcae>
  }

  work[0] = 0.0;
 800bcea:	f04f 0200 	mov.w	r2, #0
 800bcee:	f04f 0300 	mov.w	r3, #0
 800bcf2:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  for (c_lastc = 0; c_lastc < 2; c_lastc++) {
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800bcfc:	e016      	b.n	800bd2c <qr_DvOBrgQi+0xd18>
    R[c_lastc + 3] = b_A[c_lastc + 6];
 800bcfe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bd02:	3306      	adds	r3, #6
 800bd04:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800bd08:	3203      	adds	r2, #3
 800bd0a:	00d2      	lsls	r2, r2, #3
 800bd0c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800bd0e:	4411      	add	r1, r2
 800bd10:	00db      	lsls	r3, r3, #3
 800bd12:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800bd16:	4413      	add	r3, r2
 800bd18:	3bd0      	subs	r3, #208	; 0xd0
 800bd1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd1e:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 0; c_lastc < 2; c_lastc++) {
 800bd22:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bd26:	3301      	adds	r3, #1
 800bd28:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800bd2c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bd30:	2b01      	cmp	r3, #1
 800bd32:	dde4      	ble.n	800bcfe <qr_DvOBrgQi+0xcea>
  }

  while (c_lastc + 1 < 4) {
 800bd34:	e015      	b.n	800bd62 <qr_DvOBrgQi+0xd4e>
 800bd36:	bf00      	nop
 800bd38:	7c900000 	.word	0x7c900000
 800bd3c:	3ff00000 	.word	0x3ff00000
    R[c_lastc + 3] = 0.0;
 800bd40:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bd44:	3303      	adds	r3, #3
 800bd46:	00db      	lsls	r3, r3, #3
 800bd48:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bd4a:	18d1      	adds	r1, r2, r3
 800bd4c:	f04f 0200 	mov.w	r2, #0
 800bd50:	f04f 0300 	mov.w	r3, #0
 800bd54:	e9c1 2300 	strd	r2, r3, [r1]
    c_lastc++;
 800bd58:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bd5c:	3301      	adds	r3, #1
 800bd5e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  while (c_lastc + 1 < 4) {
 800bd62:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bd66:	2b02      	cmp	r3, #2
 800bd68:	ddea      	ble.n	800bd40 <qr_DvOBrgQi+0xd2c>
  }

  work[1] = 0.0;
 800bd6a:	f04f 0200 	mov.w	r2, #0
 800bd6e:	f04f 0300 	mov.w	r3, #0
 800bd72:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
  for (c_lastc = 0; c_lastc < 3; c_lastc++) {
 800bd76:	2300      	movs	r3, #0
 800bd78:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800bd7c:	e016      	b.n	800bdac <qr_DvOBrgQi+0xd98>
    R[c_lastc + 6] = b_A[c_lastc + 12];
 800bd7e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bd82:	330c      	adds	r3, #12
 800bd84:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800bd88:	3206      	adds	r2, #6
 800bd8a:	00d2      	lsls	r2, r2, #3
 800bd8c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800bd8e:	4411      	add	r1, r2
 800bd90:	00db      	lsls	r3, r3, #3
 800bd92:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800bd96:	4413      	add	r3, r2
 800bd98:	3bd0      	subs	r3, #208	; 0xd0
 800bd9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd9e:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 0; c_lastc < 3; c_lastc++) {
 800bda2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bda6:	3301      	adds	r3, #1
 800bda8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800bdac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bdb0:	2b02      	cmp	r3, #2
 800bdb2:	dde4      	ble.n	800bd7e <qr_DvOBrgQi+0xd6a>
  }

  work[2] = 0.0;
 800bdb4:	f04f 0200 	mov.w	r2, #0
 800bdb8:	f04f 0300 	mov.w	r3, #0
 800bdbc:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
  for (b_coltop = 15; b_coltop < 18; b_coltop++) {
 800bdc0:	230f      	movs	r3, #15
 800bdc2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800bdc6:	e024      	b.n	800be12 <qr_DvOBrgQi+0xdfe>
    b_A[b_coltop] *= -tau_idx_2;
 800bdc8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bdcc:	00db      	lsls	r3, r3, #3
 800bdce:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800bdd2:	4413      	add	r3, r2
 800bdd4:	3bd0      	subs	r3, #208	; 0xd0
 800bdd6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bdda:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800bdde:	623b      	str	r3, [r7, #32]
 800bde0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800bde4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800bde8:	627b      	str	r3, [r7, #36]	; 0x24
 800bdea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800bdee:	f7f4 fbf5 	bl	80005dc <__aeabi_dmul>
 800bdf2:	4602      	mov	r2, r0
 800bdf4:	460b      	mov	r3, r1
 800bdf6:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 800bdfa:	00c9      	lsls	r1, r1, #3
 800bdfc:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 800be00:	4401      	add	r1, r0
 800be02:	39d0      	subs	r1, #208	; 0xd0
 800be04:	e9c1 2300 	strd	r2, r3, [r1]
  for (b_coltop = 15; b_coltop < 18; b_coltop++) {
 800be08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800be0c:	3301      	adds	r3, #1
 800be0e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800be12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800be16:	2b11      	cmp	r3, #17
 800be18:	ddd6      	ble.n	800bdc8 <qr_DvOBrgQi+0xdb4>
  }

  b_A[14] = 1.0 - tau_idx_2;
 800be1a:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 800be1e:	f04f 0000 	mov.w	r0, #0
 800be22:	49cc      	ldr	r1, [pc, #816]	; (800c154 <qr_DvOBrgQi+0x1140>)
 800be24:	f7f4 fa22 	bl	800026c <__aeabi_dsub>
 800be28:	4602      	mov	r2, r0
 800be2a:	460b      	mov	r3, r1
 800be2c:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
  for (c_lastc = 0; c_lastc < 2; c_lastc++) {
 800be30:	2300      	movs	r3, #0
 800be32:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800be36:	e014      	b.n	800be62 <qr_DvOBrgQi+0xe4e>
    b_A[13 - c_lastc] = 0.0;
 800be38:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800be3c:	f1c3 030d 	rsb	r3, r3, #13
 800be40:	00db      	lsls	r3, r3, #3
 800be42:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800be46:	4413      	add	r3, r2
 800be48:	f1a3 01d0 	sub.w	r1, r3, #208	; 0xd0
 800be4c:	f04f 0200 	mov.w	r2, #0
 800be50:	f04f 0300 	mov.w	r3, #0
 800be54:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 0; c_lastc < 2; c_lastc++) {
 800be58:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800be5c:	3301      	adds	r3, #1
 800be5e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800be62:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800be66:	2b01      	cmp	r3, #1
 800be68:	dde6      	ble.n	800be38 <qr_DvOBrgQi+0xe24>
  }

  b_A[7] = 1.0;
 800be6a:	f04f 0200 	mov.w	r2, #0
 800be6e:	4bb9      	ldr	r3, [pc, #740]	; (800c154 <qr_DvOBrgQi+0x1140>)
 800be70:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
  if (tau_idx_1 != 0.0) {
 800be74:	f04f 0200 	mov.w	r2, #0
 800be78:	f04f 0300 	mov.w	r3, #0
 800be7c:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 800be80:	f7f4 fe14 	bl	8000aac <__aeabi_dcmpeq>
 800be84:	4603      	mov	r3, r0
 800be86:	2b00      	cmp	r3, #0
 800be88:	d15f      	bne.n	800bf4a <qr_DvOBrgQi+0xf36>
    c_lastc = 5;
 800be8a:	2305      	movs	r3, #5
 800be8c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    b_coltop = 13;
 800be90:	230d      	movs	r3, #13
 800be92:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    while ((c_lastc > 0) && (b_A[b_coltop - 2] == 0.0)) {
 800be96:	e009      	b.n	800beac <qr_DvOBrgQi+0xe98>
      c_lastc--;
 800be98:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800be9c:	3b01      	subs	r3, #1
 800be9e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
      b_coltop--;
 800bea2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bea6:	3b01      	subs	r3, #1
 800bea8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    while ((c_lastc > 0) && (b_A[b_coltop - 2] == 0.0)) {
 800beac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	dd12      	ble.n	800beda <qr_DvOBrgQi+0xec6>
 800beb4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800beb8:	3b02      	subs	r3, #2
 800beba:	00db      	lsls	r3, r3, #3
 800bebc:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800bec0:	4413      	add	r3, r2
 800bec2:	3bd0      	subs	r3, #208	; 0xd0
 800bec4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bec8:	f04f 0200 	mov.w	r2, #0
 800becc:	f04f 0300 	mov.w	r3, #0
 800bed0:	f7f4 fdec 	bl	8000aac <__aeabi_dcmpeq>
 800bed4:	4603      	mov	r3, r0
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d1de      	bne.n	800be98 <qr_DvOBrgQi+0xe84>
    }

    b_coltop = 1;
 800beda:	2301      	movs	r3, #1
 800bedc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    knt = 14;
 800bee0:	230e      	movs	r3, #14
 800bee2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    do {
      exitg1 = 0;
 800bee6:	2300      	movs	r3, #0
 800bee8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
      if (knt <= c_lastc + 13) {
 800beec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bef0:	330d      	adds	r3, #13
 800bef2:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800bef6:	429a      	cmp	r2, r3
 800bef8:	dc1c      	bgt.n	800bf34 <qr_DvOBrgQi+0xf20>
        if (b_A[knt - 1] != 0.0) {
 800befa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800befe:	3b01      	subs	r3, #1
 800bf00:	00db      	lsls	r3, r3, #3
 800bf02:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800bf06:	4413      	add	r3, r2
 800bf08:	3bd0      	subs	r3, #208	; 0xd0
 800bf0a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bf0e:	f04f 0200 	mov.w	r2, #0
 800bf12:	f04f 0300 	mov.w	r3, #0
 800bf16:	f7f4 fdc9 	bl	8000aac <__aeabi_dcmpeq>
 800bf1a:	4603      	mov	r3, r0
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d103      	bne.n	800bf28 <qr_DvOBrgQi+0xf14>
          exitg1 = 1;
 800bf20:	2301      	movs	r3, #1
 800bf22:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800bf26:	e00b      	b.n	800bf40 <qr_DvOBrgQi+0xf2c>
        } else {
          knt++;
 800bf28:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800bf2c:	3301      	adds	r3, #1
 800bf2e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800bf32:	e005      	b.n	800bf40 <qr_DvOBrgQi+0xf2c>
        }
      } else {
        b_coltop = 0;
 800bf34:	2300      	movs	r3, #0
 800bf36:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        exitg1 = 1;
 800bf3a:	2301      	movs	r3, #1
 800bf3c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
      }
    } while (exitg1 == 0);
 800bf40:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d0ce      	beq.n	800bee6 <qr_DvOBrgQi+0xed2>
 800bf48:	e005      	b.n	800bf56 <qr_DvOBrgQi+0xf42>
  } else {
    c_lastc = 0;
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    b_coltop = 0;
 800bf50:	2300      	movs	r3, #0
 800bf52:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  }

  if (c_lastc > 0) {
 800bf56:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	dd29      	ble.n	800bfb2 <qr_DvOBrgQi+0xf9e>
    xgemv_NQlWbt2i(c_lastc, b_coltop, b_A, 14, b_A, 8, work);
 800bf5e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800bf62:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800bf66:	9302      	str	r3, [sp, #8]
 800bf68:	2308      	movs	r3, #8
 800bf6a:	9301      	str	r3, [sp, #4]
 800bf6c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800bf70:	9300      	str	r3, [sp, #0]
 800bf72:	230e      	movs	r3, #14
 800bf74:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 800bf78:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 800bf7c:	f002 fbec 	bl	800e758 <xgemv_NQlWbt2i>
    xgerc_R09LiDgJ(c_lastc, b_coltop, -tau_idx_1, 8, work, b_A, 14);
 800bf80:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800bf84:	61bb      	str	r3, [r7, #24]
 800bf86:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800bf8a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800bf8e:	61fb      	str	r3, [r7, #28]
 800bf90:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800bf94:	230e      	movs	r3, #14
 800bf96:	9301      	str	r3, [sp, #4]
 800bf98:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800bf9c:	9300      	str	r3, [sp, #0]
 800bf9e:	4613      	mov	r3, r2
 800bfa0:	2208      	movs	r2, #8
 800bfa2:	ed97 0b06 	vldr	d0, [r7, #24]
 800bfa6:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 800bfaa:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 800bfae:	f002 fce1 	bl	800e974 <xgerc_R09LiDgJ>
  }

  for (b_coltop = 8; b_coltop < 12; b_coltop++) {
 800bfb2:	2308      	movs	r3, #8
 800bfb4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800bfb8:	e024      	b.n	800c004 <qr_DvOBrgQi+0xff0>
    b_A[b_coltop] *= -tau_idx_1;
 800bfba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bfbe:	00db      	lsls	r3, r3, #3
 800bfc0:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800bfc4:	4413      	add	r3, r2
 800bfc6:	3bd0      	subs	r3, #208	; 0xd0
 800bfc8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bfcc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800bfd0:	613b      	str	r3, [r7, #16]
 800bfd2:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800bfd6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800bfda:	617b      	str	r3, [r7, #20]
 800bfdc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800bfe0:	f7f4 fafc 	bl	80005dc <__aeabi_dmul>
 800bfe4:	4602      	mov	r2, r0
 800bfe6:	460b      	mov	r3, r1
 800bfe8:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 800bfec:	00c9      	lsls	r1, r1, #3
 800bfee:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 800bff2:	4401      	add	r1, r0
 800bff4:	39d0      	subs	r1, #208	; 0xd0
 800bff6:	e9c1 2300 	strd	r2, r3, [r1]
  for (b_coltop = 8; b_coltop < 12; b_coltop++) {
 800bffa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bffe:	3301      	adds	r3, #1
 800c000:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800c004:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c008:	2b0b      	cmp	r3, #11
 800c00a:	ddd6      	ble.n	800bfba <qr_DvOBrgQi+0xfa6>
  }

  b_A[7] = 1.0 - tau_idx_1;
 800c00c:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800c010:	f04f 0000 	mov.w	r0, #0
 800c014:	494f      	ldr	r1, [pc, #316]	; (800c154 <qr_DvOBrgQi+0x1140>)
 800c016:	f7f4 f929 	bl	800026c <__aeabi_dsub>
 800c01a:	4602      	mov	r2, r0
 800c01c:	460b      	mov	r3, r1
 800c01e:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
  b_A[6] = 0.0;
 800c022:	f04f 0200 	mov.w	r2, #0
 800c026:	f04f 0300 	mov.w	r3, #0
 800c02a:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
  b_A[0] = 1.0;
 800c02e:	f04f 0200 	mov.w	r2, #0
 800c032:	4b48      	ldr	r3, [pc, #288]	; (800c154 <qr_DvOBrgQi+0x1140>)
 800c034:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
  if (tau_idx_0 != 0.0) {
 800c038:	f04f 0200 	mov.w	r2, #0
 800c03c:	f04f 0300 	mov.w	r3, #0
 800c040:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 800c044:	f7f4 fd32 	bl	8000aac <__aeabi_dcmpeq>
 800c048:	4603      	mov	r3, r0
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	f040 8084 	bne.w	800c158 <qr_DvOBrgQi+0x1144>
    c_lastc = 6;
 800c050:	2306      	movs	r3, #6
 800c052:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    b_coltop = 7;
 800c056:	2307      	movs	r3, #7
 800c058:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    while ((c_lastc > 0) && (b_A[b_coltop - 2] == 0.0)) {
 800c05c:	e009      	b.n	800c072 <qr_DvOBrgQi+0x105e>
      c_lastc--;
 800c05e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c062:	3b01      	subs	r3, #1
 800c064:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
      b_coltop--;
 800c068:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c06c:	3b01      	subs	r3, #1
 800c06e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    while ((c_lastc > 0) && (b_A[b_coltop - 2] == 0.0)) {
 800c072:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c076:	2b00      	cmp	r3, #0
 800c078:	dd12      	ble.n	800c0a0 <qr_DvOBrgQi+0x108c>
 800c07a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c07e:	3b02      	subs	r3, #2
 800c080:	00db      	lsls	r3, r3, #3
 800c082:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800c086:	4413      	add	r3, r2
 800c088:	3bd0      	subs	r3, #208	; 0xd0
 800c08a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c08e:	f04f 0200 	mov.w	r2, #0
 800c092:	f04f 0300 	mov.w	r3, #0
 800c096:	f7f4 fd09 	bl	8000aac <__aeabi_dcmpeq>
 800c09a:	4603      	mov	r3, r0
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d1de      	bne.n	800c05e <qr_DvOBrgQi+0x104a>
    }

    b_coltop = 2;
 800c0a0:	2302      	movs	r3, #2
 800c0a2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    exitg2 = false;
 800c0a6:	2300      	movs	r3, #0
 800c0a8:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
    while ((!exitg2) && (b_coltop > 0)) {
 800c0ac:	e049      	b.n	800c142 <qr_DvOBrgQi+0x112e>
      coltop = (b_coltop - 1) * 6 + 7;
 800c0ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c0b2:	1e5a      	subs	r2, r3, #1
 800c0b4:	4613      	mov	r3, r2
 800c0b6:	005b      	lsls	r3, r3, #1
 800c0b8:	4413      	add	r3, r2
 800c0ba:	005b      	lsls	r3, r3, #1
 800c0bc:	3307      	adds	r3, #7
 800c0be:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
      knt = coltop;
 800c0c2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800c0c6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
      do {
        exitg1 = 0;
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        if (knt <= (coltop + c_lastc) - 1) {
 800c0d0:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800c0d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c0d8:	4413      	add	r3, r2
 800c0da:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800c0de:	429a      	cmp	r2, r3
 800c0e0:	da1c      	bge.n	800c11c <qr_DvOBrgQi+0x1108>
          if (b_A[knt - 1] != 0.0) {
 800c0e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800c0e6:	3b01      	subs	r3, #1
 800c0e8:	00db      	lsls	r3, r3, #3
 800c0ea:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800c0ee:	4413      	add	r3, r2
 800c0f0:	3bd0      	subs	r3, #208	; 0xd0
 800c0f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c0f6:	f04f 0200 	mov.w	r2, #0
 800c0fa:	f04f 0300 	mov.w	r3, #0
 800c0fe:	f7f4 fcd5 	bl	8000aac <__aeabi_dcmpeq>
 800c102:	4603      	mov	r3, r0
 800c104:	2b00      	cmp	r3, #0
 800c106:	d103      	bne.n	800c110 <qr_DvOBrgQi+0x10fc>
            exitg1 = 1;
 800c108:	2301      	movs	r3, #1
 800c10a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800c10e:	e00d      	b.n	800c12c <qr_DvOBrgQi+0x1118>
          } else {
            knt++;
 800c110:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800c114:	3301      	adds	r3, #1
 800c116:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800c11a:	e007      	b.n	800c12c <qr_DvOBrgQi+0x1118>
          }
        } else {
          b_coltop--;
 800c11c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c120:	3b01      	subs	r3, #1
 800c122:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          exitg1 = 2;
 800c126:	2302      	movs	r3, #2
 800c128:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        }
      } while (exitg1 == 0);
 800c12c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800c130:	2b00      	cmp	r3, #0
 800c132:	d0ca      	beq.n	800c0ca <qr_DvOBrgQi+0x10b6>

      if (exitg1 == 1) {
 800c134:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800c138:	2b01      	cmp	r3, #1
 800c13a:	d102      	bne.n	800c142 <qr_DvOBrgQi+0x112e>
        exitg2 = true;
 800c13c:	2301      	movs	r3, #1
 800c13e:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
    while ((!exitg2) && (b_coltop > 0)) {
 800c142:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800c146:	2b00      	cmp	r3, #0
 800c148:	d10c      	bne.n	800c164 <qr_DvOBrgQi+0x1150>
 800c14a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c14e:	2b00      	cmp	r3, #0
 800c150:	dcad      	bgt.n	800c0ae <qr_DvOBrgQi+0x109a>
 800c152:	e007      	b.n	800c164 <qr_DvOBrgQi+0x1150>
 800c154:	3ff00000 	.word	0x3ff00000
      }
    }
  } else {
    c_lastc = 0;
 800c158:	2300      	movs	r3, #0
 800c15a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    b_coltop = 0;
 800c15e:	2300      	movs	r3, #0
 800c160:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  }

  if (c_lastc > 0) {
 800c164:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c168:	2b00      	cmp	r3, #0
 800c16a:	dd29      	ble.n	800c1c0 <qr_DvOBrgQi+0x11ac>
    xgemv_NQlWbt2i(c_lastc, b_coltop, b_A, 7, b_A, 1, work);
 800c16c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800c170:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800c174:	9302      	str	r3, [sp, #8]
 800c176:	2301      	movs	r3, #1
 800c178:	9301      	str	r3, [sp, #4]
 800c17a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800c17e:	9300      	str	r3, [sp, #0]
 800c180:	2307      	movs	r3, #7
 800c182:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 800c186:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 800c18a:	f002 fae5 	bl	800e758 <xgemv_NQlWbt2i>
    xgerc_R09LiDgJ(c_lastc, b_coltop, -tau_idx_0, 1, work, b_A, 7);
 800c18e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800c192:	60bb      	str	r3, [r7, #8]
 800c194:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800c198:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800c19c:	60fb      	str	r3, [r7, #12]
 800c19e:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800c1a2:	2307      	movs	r3, #7
 800c1a4:	9301      	str	r3, [sp, #4]
 800c1a6:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800c1aa:	9300      	str	r3, [sp, #0]
 800c1ac:	4613      	mov	r3, r2
 800c1ae:	2201      	movs	r2, #1
 800c1b0:	ed97 0b02 	vldr	d0, [r7, #8]
 800c1b4:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 800c1b8:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 800c1bc:	f002 fbda 	bl	800e974 <xgerc_R09LiDgJ>
  }

  for (b_coltop = 1; b_coltop < 6; b_coltop++) {
 800c1c0:	2301      	movs	r3, #1
 800c1c2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800c1c6:	e024      	b.n	800c212 <qr_DvOBrgQi+0x11fe>
    b_A[b_coltop] *= -tau_idx_0;
 800c1c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c1cc:	00db      	lsls	r3, r3, #3
 800c1ce:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800c1d2:	4413      	add	r3, r2
 800c1d4:	3bd0      	subs	r3, #208	; 0xd0
 800c1d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c1da:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800c1de:	603b      	str	r3, [r7, #0]
 800c1e0:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800c1e4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800c1e8:	607b      	str	r3, [r7, #4]
 800c1ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c1ee:	f7f4 f9f5 	bl	80005dc <__aeabi_dmul>
 800c1f2:	4602      	mov	r2, r0
 800c1f4:	460b      	mov	r3, r1
 800c1f6:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 800c1fa:	00c9      	lsls	r1, r1, #3
 800c1fc:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 800c200:	4401      	add	r1, r0
 800c202:	39d0      	subs	r1, #208	; 0xd0
 800c204:	e9c1 2300 	strd	r2, r3, [r1]
  for (b_coltop = 1; b_coltop < 6; b_coltop++) {
 800c208:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c20c:	3301      	adds	r3, #1
 800c20e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800c212:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c216:	2b05      	cmp	r3, #5
 800c218:	ddd6      	ble.n	800c1c8 <qr_DvOBrgQi+0x11b4>
  }

  b_A[0] = 1.0 - tau_idx_0;
 800c21a:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 800c21e:	f04f 0000 	mov.w	r0, #0
 800c222:	4923      	ldr	r1, [pc, #140]	; (800c2b0 <qr_DvOBrgQi+0x129c>)
 800c224:	f7f4 f822 	bl	800026c <__aeabi_dsub>
 800c228:	4602      	mov	r2, r0
 800c22a:	460b      	mov	r3, r1
 800c22c:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
  b_coltop = 0;
 800c230:	2300      	movs	r3, #0
 800c232:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  for (coltop = 0; coltop < 3; coltop++) {
 800c236:	2300      	movs	r3, #0
 800c238:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800c23c:	e02d      	b.n	800c29a <qr_DvOBrgQi+0x1286>
    for (c_lastc = 0; c_lastc < 6; c_lastc++) {
 800c23e:	2300      	movs	r3, #0
 800c240:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800c244:	e01b      	b.n	800c27e <qr_DvOBrgQi+0x126a>
      knt = c_lastc + b_coltop;
 800c246:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800c24a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c24e:	4413      	add	r3, r2
 800c250:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
      Q[knt] = b_A[knt];
 800c254:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800c258:	00db      	lsls	r3, r3, #3
 800c25a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c25c:	18d1      	adds	r1, r2, r3
 800c25e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800c262:	00db      	lsls	r3, r3, #3
 800c264:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800c268:	4413      	add	r3, r2
 800c26a:	3bd0      	subs	r3, #208	; 0xd0
 800c26c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c270:	e9c1 2300 	strd	r2, r3, [r1]
    for (c_lastc = 0; c_lastc < 6; c_lastc++) {
 800c274:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c278:	3301      	adds	r3, #1
 800c27a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800c27e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c282:	2b05      	cmp	r3, #5
 800c284:	dddf      	ble.n	800c246 <qr_DvOBrgQi+0x1232>
    }

    b_coltop += 6;
 800c286:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c28a:	3306      	adds	r3, #6
 800c28c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  for (coltop = 0; coltop < 3; coltop++) {
 800c290:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800c294:	3301      	adds	r3, #1
 800c296:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800c29a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800c29e:	2b02      	cmp	r3, #2
 800c2a0:	ddcd      	ble.n	800c23e <qr_DvOBrgQi+0x122a>
  }
}
 800c2a2:	bf00      	nop
 800c2a4:	bf00      	nop
 800c2a6:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 800c2aa:	46bd      	mov	sp, r7
 800c2ac:	bdb0      	pop	{r4, r5, r7, pc}
 800c2ae:	bf00      	nop
 800c2b0:	3ff00000 	.word	0x3ff00000

0800c2b4 <rotate_LZ7ctbe0>:
#include "rotate_LZ7ctbe0.h"
#include <math.h>
#include "rt_hypotd_snf.h"

void rotate_LZ7ctbe0(real_T x, real_T y, real_T *c, real_T *s, real_T *r)
{
 800c2b4:	b5b0      	push	{r4, r5, r7, lr}
 800c2b6:	b092      	sub	sp, #72	; 0x48
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	ed87 0b06 	vstr	d0, [r7, #24]
 800c2be:	ed87 1b04 	vstr	d1, [r7, #16]
 800c2c2:	60f8      	str	r0, [r7, #12]
 800c2c4:	60b9      	str	r1, [r7, #8]
 800c2c6:	607a      	str	r2, [r7, #4]
  real_T absx;
  real_T absy;
  absx = fabs(x);
 800c2c8:	69bb      	ldr	r3, [r7, #24]
 800c2ca:	643b      	str	r3, [r7, #64]	; 0x40
 800c2cc:	69fb      	ldr	r3, [r7, #28]
 800c2ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c2d2:	647b      	str	r3, [r7, #68]	; 0x44
  absy = fabs(y);
 800c2d4:	693b      	ldr	r3, [r7, #16]
 800c2d6:	63bb      	str	r3, [r7, #56]	; 0x38
 800c2d8:	697b      	ldr	r3, [r7, #20]
 800c2da:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c2de:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (absy == 0.0) {
 800c2e0:	f04f 0200 	mov.w	r2, #0
 800c2e4:	f04f 0300 	mov.w	r3, #0
 800c2e8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800c2ec:	f7f4 fbde 	bl	8000aac <__aeabi_dcmpeq>
 800c2f0:	4603      	mov	r3, r0
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d012      	beq.n	800c31c <rotate_LZ7ctbe0+0x68>
    *c = 1.0;
 800c2f6:	68f9      	ldr	r1, [r7, #12]
 800c2f8:	f04f 0200 	mov.w	r2, #0
 800c2fc:	4b4e      	ldr	r3, [pc, #312]	; (800c438 <rotate_LZ7ctbe0+0x184>)
 800c2fe:	e9c1 2300 	strd	r2, r3, [r1]
    *s = 0.0;
 800c302:	68b9      	ldr	r1, [r7, #8]
 800c304:	f04f 0200 	mov.w	r2, #0
 800c308:	f04f 0300 	mov.w	r3, #0
 800c30c:	e9c1 2300 	strd	r2, r3, [r1]
    *r = x;
 800c310:	6879      	ldr	r1, [r7, #4]
 800c312:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c316:	e9c1 2300 	strd	r2, r3, [r1]
    *c = absx / rho;
    xx /= absx;
    *s = xx * yy / rho;
    *r = rho * absy * xx;
  }
}
 800c31a:	e088      	b.n	800c42e <rotate_LZ7ctbe0+0x17a>
  } else if (absx == 0.0) {
 800c31c:	f04f 0200 	mov.w	r2, #0
 800c320:	f04f 0300 	mov.w	r3, #0
 800c324:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800c328:	f7f4 fbc0 	bl	8000aac <__aeabi_dcmpeq>
 800c32c:	4603      	mov	r3, r0
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d012      	beq.n	800c358 <rotate_LZ7ctbe0+0xa4>
    *c = 0.0;
 800c332:	68f9      	ldr	r1, [r7, #12]
 800c334:	f04f 0200 	mov.w	r2, #0
 800c338:	f04f 0300 	mov.w	r3, #0
 800c33c:	e9c1 2300 	strd	r2, r3, [r1]
    *s = 1.0;
 800c340:	68b9      	ldr	r1, [r7, #8]
 800c342:	f04f 0200 	mov.w	r2, #0
 800c346:	4b3c      	ldr	r3, [pc, #240]	; (800c438 <rotate_LZ7ctbe0+0x184>)
 800c348:	e9c1 2300 	strd	r2, r3, [r1]
    *r = y;
 800c34c:	6879      	ldr	r1, [r7, #4]
 800c34e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800c352:	e9c1 2300 	strd	r2, r3, [r1]
}
 800c356:	e06a      	b.n	800c42e <rotate_LZ7ctbe0+0x17a>
    absy += absx;
 800c358:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800c35c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800c360:	f7f3 ff86 	bl	8000270 <__adddf3>
 800c364:	4602      	mov	r2, r0
 800c366:	460b      	mov	r3, r1
 800c368:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xx = x / absy;
 800c36c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800c370:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800c374:	f7f4 fa5c 	bl	8000830 <__aeabi_ddiv>
 800c378:	4602      	mov	r2, r0
 800c37a:	460b      	mov	r3, r1
 800c37c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    yy = y / absy;
 800c380:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800c384:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800c388:	f7f4 fa52 	bl	8000830 <__aeabi_ddiv>
 800c38c:	4602      	mov	r2, r0
 800c38e:	460b      	mov	r3, r1
 800c390:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    absx = fabs(xx);
 800c394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c396:	643b      	str	r3, [r7, #64]	; 0x40
 800c398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c39a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c39e:	647b      	str	r3, [r7, #68]	; 0x44
    rho = rt_hypotd_snf(absx, fabs(yy));
 800c3a0:	6abc      	ldr	r4, [r7, #40]	; 0x28
 800c3a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3a4:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800c3a8:	ec45 4b11 	vmov	d1, r4, r5
 800c3ac:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 800c3b0:	f000 f90a 	bl	800c5c8 <rt_hypotd_snf>
 800c3b4:	ed87 0b08 	vstr	d0, [r7, #32]
    *c = absx / rho;
 800c3b8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c3bc:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800c3c0:	f7f4 fa36 	bl	8000830 <__aeabi_ddiv>
 800c3c4:	4602      	mov	r2, r0
 800c3c6:	460b      	mov	r3, r1
 800c3c8:	68f9      	ldr	r1, [r7, #12]
 800c3ca:	e9c1 2300 	strd	r2, r3, [r1]
    xx /= absx;
 800c3ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800c3d2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800c3d6:	f7f4 fa2b 	bl	8000830 <__aeabi_ddiv>
 800c3da:	4602      	mov	r2, r0
 800c3dc:	460b      	mov	r3, r1
 800c3de:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    *s = xx * yy / rho;
 800c3e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800c3e6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800c3ea:	f7f4 f8f7 	bl	80005dc <__aeabi_dmul>
 800c3ee:	4602      	mov	r2, r0
 800c3f0:	460b      	mov	r3, r1
 800c3f2:	4610      	mov	r0, r2
 800c3f4:	4619      	mov	r1, r3
 800c3f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c3fa:	f7f4 fa19 	bl	8000830 <__aeabi_ddiv>
 800c3fe:	4602      	mov	r2, r0
 800c400:	460b      	mov	r3, r1
 800c402:	68b9      	ldr	r1, [r7, #8]
 800c404:	e9c1 2300 	strd	r2, r3, [r1]
    *r = rho * absy * xx;
 800c408:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800c40c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800c410:	f7f4 f8e4 	bl	80005dc <__aeabi_dmul>
 800c414:	4602      	mov	r2, r0
 800c416:	460b      	mov	r3, r1
 800c418:	4610      	mov	r0, r2
 800c41a:	4619      	mov	r1, r3
 800c41c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800c420:	f7f4 f8dc 	bl	80005dc <__aeabi_dmul>
 800c424:	4602      	mov	r2, r0
 800c426:	460b      	mov	r3, r1
 800c428:	6879      	ldr	r1, [r7, #4]
 800c42a:	e9c1 2300 	strd	r2, r3, [r1]
}
 800c42e:	bf00      	nop
 800c430:	3748      	adds	r7, #72	; 0x48
 800c432:	46bd      	mov	sp, r7
 800c434:	bdb0      	pop	{r4, r5, r7, pc}
 800c436:	bf00      	nop
 800c438:	3ff00000 	.word	0x3ff00000

0800c43c <rtGetInf>:
#include <stddef.h>
#include "rt_nonfinite.h"
#define NumBitsPerChar                 8U

real_T rtGetInf(void)
{
 800c43c:	b580      	push	{r7, lr}
 800c43e:	b086      	sub	sp, #24
 800c440:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 800c442:	2340      	movs	r3, #64	; 0x40
 800c444:	60fb      	str	r3, [r7, #12]
  real_T inf = 0.0;
 800c446:	f04f 0200 	mov.w	r2, #0
 800c44a:	f04f 0300 	mov.w	r3, #0
 800c44e:	e9c7 2304 	strd	r2, r3, [r7, #16]
  if (bitsPerReal == 32U) {
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	2b20      	cmp	r3, #32
 800c456:	d10b      	bne.n	800c470 <rtGetInf+0x34>
    inf = rtGetInfF();
 800c458:	f000 f820 	bl	800c49c <rtGetInfF>
 800c45c:	ee10 3a10 	vmov	r3, s0
 800c460:	4618      	mov	r0, r3
 800c462:	f7f4 f863 	bl	800052c <__aeabi_f2d>
 800c466:	4602      	mov	r2, r0
 800c468:	460b      	mov	r3, r1
 800c46a:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800c46e:	e007      	b.n	800c480 <rtGetInf+0x44>
    union {
      LittleEndianIEEEDouble bitVal;
      real_T fltVal;
    } tmpVal;

    tmpVal.bitVal.words.wordH = 0x7FF00000U;
 800c470:	4b09      	ldr	r3, [pc, #36]	; (800c498 <rtGetInf+0x5c>)
 800c472:	607b      	str	r3, [r7, #4]
    tmpVal.bitVal.words.wordL = 0x00000000U;
 800c474:	2300      	movs	r3, #0
 800c476:	603b      	str	r3, [r7, #0]
    inf = tmpVal.fltVal;
 800c478:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c47c:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  return inf;
 800c480:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800c484:	ec43 2b17 	vmov	d7, r2, r3
}
 800c488:	eeb0 0a47 	vmov.f32	s0, s14
 800c48c:	eef0 0a67 	vmov.f32	s1, s15
 800c490:	3718      	adds	r7, #24
 800c492:	46bd      	mov	sp, r7
 800c494:	bd80      	pop	{r7, pc}
 800c496:	bf00      	nop
 800c498:	7ff00000 	.word	0x7ff00000

0800c49c <rtGetInfF>:

real32_T rtGetInfF(void)
{
 800c49c:	b480      	push	{r7}
 800c49e:	b083      	sub	sp, #12
 800c4a0:	af00      	add	r7, sp, #0
  IEEESingle infF;
  infF.wordL.wordLuint = 0x7F800000U;
 800c4a2:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 800c4a6:	607b      	str	r3, [r7, #4]
  return infF.wordL.wordLreal;
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	ee07 3a90 	vmov	s15, r3
}
 800c4ae:	eeb0 0a67 	vmov.f32	s0, s15
 800c4b2:	370c      	adds	r7, #12
 800c4b4:	46bd      	mov	sp, r7
 800c4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ba:	4770      	bx	lr

0800c4bc <rtGetMinusInf>:

real_T rtGetMinusInf(void)
{
 800c4bc:	b580      	push	{r7, lr}
 800c4be:	b086      	sub	sp, #24
 800c4c0:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 800c4c2:	2340      	movs	r3, #64	; 0x40
 800c4c4:	60fb      	str	r3, [r7, #12]
  real_T minf = 0.0;
 800c4c6:	f04f 0200 	mov.w	r2, #0
 800c4ca:	f04f 0300 	mov.w	r3, #0
 800c4ce:	e9c7 2304 	strd	r2, r3, [r7, #16]
  if (bitsPerReal == 32U) {
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	2b20      	cmp	r3, #32
 800c4d6:	d10b      	bne.n	800c4f0 <rtGetMinusInf+0x34>
    minf = rtGetMinusInfF();
 800c4d8:	f000 f820 	bl	800c51c <rtGetMinusInfF>
 800c4dc:	ee10 3a10 	vmov	r3, s0
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	f7f4 f823 	bl	800052c <__aeabi_f2d>
 800c4e6:	4602      	mov	r2, r0
 800c4e8:	460b      	mov	r3, r1
 800c4ea:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800c4ee:	e007      	b.n	800c500 <rtGetMinusInf+0x44>
    union {
      LittleEndianIEEEDouble bitVal;
      real_T fltVal;
    } tmpVal;

    tmpVal.bitVal.words.wordH = 0xFFF00000U;
 800c4f0:	4b09      	ldr	r3, [pc, #36]	; (800c518 <rtGetMinusInf+0x5c>)
 800c4f2:	607b      	str	r3, [r7, #4]
    tmpVal.bitVal.words.wordL = 0x00000000U;
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	603b      	str	r3, [r7, #0]
    minf = tmpVal.fltVal;
 800c4f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c4fc:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  return minf;
 800c500:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800c504:	ec43 2b17 	vmov	d7, r2, r3
}
 800c508:	eeb0 0a47 	vmov.f32	s0, s14
 800c50c:	eef0 0a67 	vmov.f32	s1, s15
 800c510:	3718      	adds	r7, #24
 800c512:	46bd      	mov	sp, r7
 800c514:	bd80      	pop	{r7, pc}
 800c516:	bf00      	nop
 800c518:	fff00000 	.word	0xfff00000

0800c51c <rtGetMinusInfF>:

real32_T rtGetMinusInfF(void)
{
 800c51c:	b480      	push	{r7}
 800c51e:	b083      	sub	sp, #12
 800c520:	af00      	add	r7, sp, #0
  IEEESingle minfF;
  minfF.wordL.wordLuint = 0xFF800000U;
 800c522:	4b06      	ldr	r3, [pc, #24]	; (800c53c <rtGetMinusInfF+0x20>)
 800c524:	607b      	str	r3, [r7, #4]
  return minfF.wordL.wordLreal;
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	ee07 3a90 	vmov	s15, r3
}
 800c52c:	eeb0 0a67 	vmov.f32	s0, s15
 800c530:	370c      	adds	r7, #12
 800c532:	46bd      	mov	sp, r7
 800c534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c538:	4770      	bx	lr
 800c53a:	bf00      	nop
 800c53c:	ff800000 	.word	0xff800000

0800c540 <rtGetNaN>:
#include <stddef.h>
#include "rt_nonfinite.h"
#define NumBitsPerChar                 8U

real_T rtGetNaN(void)
{
 800c540:	b580      	push	{r7, lr}
 800c542:	b086      	sub	sp, #24
 800c544:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 800c546:	2340      	movs	r3, #64	; 0x40
 800c548:	60fb      	str	r3, [r7, #12]
  real_T nan = 0.0;
 800c54a:	f04f 0200 	mov.w	r2, #0
 800c54e:	f04f 0300 	mov.w	r3, #0
 800c552:	e9c7 2304 	strd	r2, r3, [r7, #16]
  if (bitsPerReal == 32U) {
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	2b20      	cmp	r3, #32
 800c55a:	d10b      	bne.n	800c574 <rtGetNaN+0x34>
    nan = rtGetNaNF();
 800c55c:	f000 f820 	bl	800c5a0 <rtGetNaNF>
 800c560:	ee10 3a10 	vmov	r3, s0
 800c564:	4618      	mov	r0, r3
 800c566:	f7f3 ffe1 	bl	800052c <__aeabi_f2d>
 800c56a:	4602      	mov	r2, r0
 800c56c:	460b      	mov	r3, r1
 800c56e:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800c572:	e007      	b.n	800c584 <rtGetNaN+0x44>
    union {
      LittleEndianIEEEDouble bitVal;
      real_T fltVal;
    } tmpVal;

    tmpVal.bitVal.words.wordH = 0xFFF80000U;
 800c574:	4b09      	ldr	r3, [pc, #36]	; (800c59c <rtGetNaN+0x5c>)
 800c576:	607b      	str	r3, [r7, #4]
    tmpVal.bitVal.words.wordL = 0x00000000U;
 800c578:	2300      	movs	r3, #0
 800c57a:	603b      	str	r3, [r7, #0]
    nan = tmpVal.fltVal;
 800c57c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c580:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  return nan;
 800c584:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800c588:	ec43 2b17 	vmov	d7, r2, r3
}
 800c58c:	eeb0 0a47 	vmov.f32	s0, s14
 800c590:	eef0 0a67 	vmov.f32	s1, s15
 800c594:	3718      	adds	r7, #24
 800c596:	46bd      	mov	sp, r7
 800c598:	bd80      	pop	{r7, pc}
 800c59a:	bf00      	nop
 800c59c:	fff80000 	.word	0xfff80000

0800c5a0 <rtGetNaNF>:

real32_T rtGetNaNF(void)
{
 800c5a0:	b480      	push	{r7}
 800c5a2:	b083      	sub	sp, #12
 800c5a4:	af00      	add	r7, sp, #0
  IEEESingle nanF = { { 0.0F } };
 800c5a6:	f04f 0300 	mov.w	r3, #0
 800c5aa:	607b      	str	r3, [r7, #4]

  nanF.wordL.wordLuint = 0xFFC00000U;
 800c5ac:	4b05      	ldr	r3, [pc, #20]	; (800c5c4 <rtGetNaNF+0x24>)
 800c5ae:	607b      	str	r3, [r7, #4]
  return nanF.wordL.wordLreal;
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	ee07 3a90 	vmov	s15, r3
}
 800c5b6:	eeb0 0a67 	vmov.f32	s0, s15
 800c5ba:	370c      	adds	r7, #12
 800c5bc:	46bd      	mov	sp, r7
 800c5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c2:	4770      	bx	lr
 800c5c4:	ffc00000 	.word	0xffc00000

0800c5c8 <rt_hypotd_snf>:
#include "rt_hypotd_snf.h"
#include <math.h>
#include "rt_nonfinite.h"

real_T rt_hypotd_snf(real_T u0, real_T u1)
{
 800c5c8:	b580      	push	{r7, lr}
 800c5ca:	b088      	sub	sp, #32
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	ed87 0b02 	vstr	d0, [r7, #8]
 800c5d2:	ed87 1b00 	vstr	d1, [r7]
  real_T a;
  real_T y;
  a = fabs(u0);
 800c5d6:	68bb      	ldr	r3, [r7, #8]
 800c5d8:	613b      	str	r3, [r7, #16]
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c5e0:	617b      	str	r3, [r7, #20]
  y = fabs(u1);
 800c5e2:	683b      	ldr	r3, [r7, #0]
 800c5e4:	61bb      	str	r3, [r7, #24]
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c5ec:	61fb      	str	r3, [r7, #28]
  if (a < y) {
 800c5ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c5f2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800c5f6:	f7f4 fa63 	bl	8000ac0 <__aeabi_dcmplt>
 800c5fa:	4603      	mov	r3, r0
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d02d      	beq.n	800c65c <rt_hypotd_snf+0x94>
    a /= y;
 800c600:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c604:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800c608:	f7f4 f912 	bl	8000830 <__aeabi_ddiv>
 800c60c:	4602      	mov	r2, r0
 800c60e:	460b      	mov	r3, r1
 800c610:	e9c7 2304 	strd	r2, r3, [r7, #16]
    y *= sqrt(a * a + 1.0);
 800c614:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800c618:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800c61c:	f7f3 ffde 	bl	80005dc <__aeabi_dmul>
 800c620:	4602      	mov	r2, r0
 800c622:	460b      	mov	r3, r1
 800c624:	4610      	mov	r0, r2
 800c626:	4619      	mov	r1, r3
 800c628:	f04f 0200 	mov.w	r2, #0
 800c62c:	4b38      	ldr	r3, [pc, #224]	; (800c710 <rt_hypotd_snf+0x148>)
 800c62e:	f7f3 fe1f 	bl	8000270 <__adddf3>
 800c632:	4602      	mov	r2, r0
 800c634:	460b      	mov	r3, r1
 800c636:	ec43 2b17 	vmov	d7, r2, r3
 800c63a:	eeb0 0a47 	vmov.f32	s0, s14
 800c63e:	eef0 0a67 	vmov.f32	s1, s15
 800c642:	f00d fd61 	bl	801a108 <sqrt>
 800c646:	ec53 2b10 	vmov	r2, r3, d0
 800c64a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800c64e:	f7f3 ffc5 	bl	80005dc <__aeabi_dmul>
 800c652:	4602      	mov	r2, r0
 800c654:	460b      	mov	r3, r1
 800c656:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800c65a:	e048      	b.n	800c6ee <rt_hypotd_snf+0x126>
  } else if (a > y) {
 800c65c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c660:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800c664:	f7f4 fa4a 	bl	8000afc <__aeabi_dcmpgt>
 800c668:	4603      	mov	r3, r0
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d02d      	beq.n	800c6ca <rt_hypotd_snf+0x102>
    y /= a;
 800c66e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800c672:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800c676:	f7f4 f8db 	bl	8000830 <__aeabi_ddiv>
 800c67a:	4602      	mov	r2, r0
 800c67c:	460b      	mov	r3, r1
 800c67e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    y = sqrt(y * y + 1.0) * a;
 800c682:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c686:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800c68a:	f7f3 ffa7 	bl	80005dc <__aeabi_dmul>
 800c68e:	4602      	mov	r2, r0
 800c690:	460b      	mov	r3, r1
 800c692:	4610      	mov	r0, r2
 800c694:	4619      	mov	r1, r3
 800c696:	f04f 0200 	mov.w	r2, #0
 800c69a:	4b1d      	ldr	r3, [pc, #116]	; (800c710 <rt_hypotd_snf+0x148>)
 800c69c:	f7f3 fde8 	bl	8000270 <__adddf3>
 800c6a0:	4602      	mov	r2, r0
 800c6a2:	460b      	mov	r3, r1
 800c6a4:	ec43 2b17 	vmov	d7, r2, r3
 800c6a8:	eeb0 0a47 	vmov.f32	s0, s14
 800c6ac:	eef0 0a67 	vmov.f32	s1, s15
 800c6b0:	f00d fd2a 	bl	801a108 <sqrt>
 800c6b4:	ec53 2b10 	vmov	r2, r3, d0
 800c6b8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800c6bc:	f7f3 ff8e 	bl	80005dc <__aeabi_dmul>
 800c6c0:	4602      	mov	r2, r0
 800c6c2:	460b      	mov	r3, r1
 800c6c4:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800c6c8:	e011      	b.n	800c6ee <rt_hypotd_snf+0x126>
  } else if (!rtIsNaN(y)) {
 800c6ca:	ed97 0b06 	vldr	d0, [r7, #24]
 800c6ce:	f000 f889 	bl	800c7e4 <rtIsNaN>
 800c6d2:	4603      	mov	r3, r0
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d10a      	bne.n	800c6ee <rt_hypotd_snf+0x126>
    y = a * 1.4142135623730951;
 800c6d8:	a30b      	add	r3, pc, #44	; (adr r3, 800c708 <rt_hypotd_snf+0x140>)
 800c6da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6de:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800c6e2:	f7f3 ff7b 	bl	80005dc <__aeabi_dmul>
 800c6e6:	4602      	mov	r2, r0
 800c6e8:	460b      	mov	r3, r1
 800c6ea:	e9c7 2306 	strd	r2, r3, [r7, #24]
  }

  return y;
 800c6ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c6f2:	ec43 2b17 	vmov	d7, r2, r3
}
 800c6f6:	eeb0 0a47 	vmov.f32	s0, s14
 800c6fa:	eef0 0a67 	vmov.f32	s1, s15
 800c6fe:	3720      	adds	r7, #32
 800c700:	46bd      	mov	sp, r7
 800c702:	bd80      	pop	{r7, pc}
 800c704:	f3af 8000 	nop.w
 800c708:	667f3bcd 	.word	0x667f3bcd
 800c70c:	3ff6a09e 	.word	0x3ff6a09e
 800c710:	3ff00000 	.word	0x3ff00000

0800c714 <rt_InitInfAndNaN>:
real_T rtNaN;
real32_T rtInfF;
real32_T rtMinusInfF;
real32_T rtNaNF;
void rt_InitInfAndNaN(size_t realSize)
{
 800c714:	b580      	push	{r7, lr}
 800c716:	b082      	sub	sp, #8
 800c718:	af00      	add	r7, sp, #0
 800c71a:	6078      	str	r0, [r7, #4]
  (void) (realSize);
  rtNaN = rtGetNaN();
 800c71c:	f7ff ff10 	bl	800c540 <rtGetNaN>
 800c720:	eeb0 7a40 	vmov.f32	s14, s0
 800c724:	eef0 7a60 	vmov.f32	s15, s1
 800c728:	4b16      	ldr	r3, [pc, #88]	; (800c784 <rt_InitInfAndNaN+0x70>)
 800c72a:	ed83 7b00 	vstr	d7, [r3]
  rtNaNF = rtGetNaNF();
 800c72e:	f7ff ff37 	bl	800c5a0 <rtGetNaNF>
 800c732:	eef0 7a40 	vmov.f32	s15, s0
 800c736:	4b14      	ldr	r3, [pc, #80]	; (800c788 <rt_InitInfAndNaN+0x74>)
 800c738:	edc3 7a00 	vstr	s15, [r3]
  rtInf = rtGetInf();
 800c73c:	f7ff fe7e 	bl	800c43c <rtGetInf>
 800c740:	eeb0 7a40 	vmov.f32	s14, s0
 800c744:	eef0 7a60 	vmov.f32	s15, s1
 800c748:	4b10      	ldr	r3, [pc, #64]	; (800c78c <rt_InitInfAndNaN+0x78>)
 800c74a:	ed83 7b00 	vstr	d7, [r3]
  rtInfF = rtGetInfF();
 800c74e:	f7ff fea5 	bl	800c49c <rtGetInfF>
 800c752:	eef0 7a40 	vmov.f32	s15, s0
 800c756:	4b0e      	ldr	r3, [pc, #56]	; (800c790 <rt_InitInfAndNaN+0x7c>)
 800c758:	edc3 7a00 	vstr	s15, [r3]
  rtMinusInf = rtGetMinusInf();
 800c75c:	f7ff feae 	bl	800c4bc <rtGetMinusInf>
 800c760:	eeb0 7a40 	vmov.f32	s14, s0
 800c764:	eef0 7a60 	vmov.f32	s15, s1
 800c768:	4b0a      	ldr	r3, [pc, #40]	; (800c794 <rt_InitInfAndNaN+0x80>)
 800c76a:	ed83 7b00 	vstr	d7, [r3]
  rtMinusInfF = rtGetMinusInfF();
 800c76e:	f7ff fed5 	bl	800c51c <rtGetMinusInfF>
 800c772:	eef0 7a40 	vmov.f32	s15, s0
 800c776:	4b08      	ldr	r3, [pc, #32]	; (800c798 <rt_InitInfAndNaN+0x84>)
 800c778:	edc3 7a00 	vstr	s15, [r3]
}
 800c77c:	bf00      	nop
 800c77e:	3708      	adds	r7, #8
 800c780:	46bd      	mov	sp, r7
 800c782:	bd80      	pop	{r7, pc}
 800c784:	2001e918 	.word	0x2001e918
 800c788:	2001e908 	.word	0x2001e908
 800c78c:	2001e910 	.word	0x2001e910
 800c790:	2001e90c 	.word	0x2001e90c
 800c794:	2001e920 	.word	0x2001e920
 800c798:	2001e928 	.word	0x2001e928

0800c79c <rtIsInf>:

boolean_T rtIsInf(real_T value)
{
 800c79c:	b580      	push	{r7, lr}
 800c79e:	b082      	sub	sp, #8
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	ed87 0b00 	vstr	d0, [r7]
  return (boolean_T)((value==rtInf || value==rtMinusInf) ? 1U : 0U);
 800c7a6:	4b0d      	ldr	r3, [pc, #52]	; (800c7dc <rtIsInf+0x40>)
 800c7a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c7b0:	f7f4 f97c 	bl	8000aac <__aeabi_dcmpeq>
 800c7b4:	4603      	mov	r3, r0
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d109      	bne.n	800c7ce <rtIsInf+0x32>
 800c7ba:	4b09      	ldr	r3, [pc, #36]	; (800c7e0 <rtIsInf+0x44>)
 800c7bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c7c4:	f7f4 f972 	bl	8000aac <__aeabi_dcmpeq>
 800c7c8:	4603      	mov	r3, r0
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d001      	beq.n	800c7d2 <rtIsInf+0x36>
 800c7ce:	2301      	movs	r3, #1
 800c7d0:	e000      	b.n	800c7d4 <rtIsInf+0x38>
 800c7d2:	2300      	movs	r3, #0
}
 800c7d4:	4618      	mov	r0, r3
 800c7d6:	3708      	adds	r7, #8
 800c7d8:	46bd      	mov	sp, r7
 800c7da:	bd80      	pop	{r7, pc}
 800c7dc:	2001e910 	.word	0x2001e910
 800c7e0:	2001e920 	.word	0x2001e920

0800c7e4 <rtIsNaN>:
{
  return (boolean_T)(((value)==rtInfF || (value)==rtMinusInfF) ? 1U : 0U);
}

boolean_T rtIsNaN(real_T value)
{
 800c7e4:	b580      	push	{r7, lr}
 800c7e6:	b086      	sub	sp, #24
 800c7e8:	af00      	add	r7, sp, #0
 800c7ea:	ed87 0b00 	vstr	d0, [r7]
  boolean_T result = (boolean_T) 0;
 800c7ee:	2300      	movs	r3, #0
 800c7f0:	75fb      	strb	r3, [r7, #23]
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 800c7f2:	2340      	movs	r3, #64	; 0x40
 800c7f4:	613b      	str	r3, [r7, #16]
  if (bitsPerReal == 32U) {
 800c7f6:	693b      	ldr	r3, [r7, #16]
 800c7f8:	2b20      	cmp	r3, #32
 800c7fa:	d10b      	bne.n	800c814 <rtIsNaN+0x30>
    result = rtIsNaNF((real32_T)value);
 800c7fc:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c800:	f7f4 f9e4 	bl	8000bcc <__aeabi_d2f>
 800c804:	4603      	mov	r3, r0
 800c806:	ee00 3a10 	vmov	s0, r3
 800c80a:	f000 f821 	bl	800c850 <rtIsNaNF>
 800c80e:	4603      	mov	r3, r0
 800c810:	75fb      	strb	r3, [r7, #23]
 800c812:	e015      	b.n	800c840 <rtIsNaN+0x5c>
    union {
      LittleEndianIEEEDouble bitVal;
      real_T fltVal;
    } tmpVal;

    tmpVal.fltVal = value;
 800c814:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c818:	e9c7 2302 	strd	r2, r3, [r7, #8]
    result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) == 0x7FF00000 &&
 800c81c:	68fa      	ldr	r2, [r7, #12]
 800c81e:	4b0b      	ldr	r3, [pc, #44]	; (800c84c <rtIsNaN+0x68>)
 800c820:	4013      	ands	r3, r2
 800c822:	4a0a      	ldr	r2, [pc, #40]	; (800c84c <rtIsNaN+0x68>)
 800c824:	4293      	cmp	r3, r2
 800c826:	d109      	bne.n	800c83c <rtIsNaN+0x58>
                         ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	f3c3 0313 	ubfx	r3, r3, #0, #20
    result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) == 0x7FF00000 &&
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d102      	bne.n	800c838 <rtIsNaN+0x54>
                          (tmpVal.bitVal.words.wordL != 0) ));
 800c832:	68bb      	ldr	r3, [r7, #8]
                         ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||
 800c834:	2b00      	cmp	r3, #0
 800c836:	d001      	beq.n	800c83c <rtIsNaN+0x58>
    result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) == 0x7FF00000 &&
 800c838:	2301      	movs	r3, #1
 800c83a:	e000      	b.n	800c83e <rtIsNaN+0x5a>
 800c83c:	2300      	movs	r3, #0
 800c83e:	75fb      	strb	r3, [r7, #23]
  }

  return result;
 800c840:	7dfb      	ldrb	r3, [r7, #23]
}
 800c842:	4618      	mov	r0, r3
 800c844:	3718      	adds	r7, #24
 800c846:	46bd      	mov	sp, r7
 800c848:	bd80      	pop	{r7, pc}
 800c84a:	bf00      	nop
 800c84c:	7ff00000 	.word	0x7ff00000

0800c850 <rtIsNaNF>:

boolean_T rtIsNaNF(real32_T value)
{
 800c850:	b480      	push	{r7}
 800c852:	b085      	sub	sp, #20
 800c854:	af00      	add	r7, sp, #0
 800c856:	ed87 0a01 	vstr	s0, [r7, #4]
  IEEESingle tmp;
  tmp.wordL.wordLreal = value;
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	60fb      	str	r3, [r7, #12]
  return (boolean_T)( (tmp.wordL.wordLuint & 0x7F800000) == 0x7F800000 &&
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	f003 43ff 	and.w	r3, r3, #2139095040	; 0x7f800000
 800c864:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800c868:	d106      	bne.n	800c878 <rtIsNaNF+0x28>
                     (tmp.wordL.wordLuint & 0x007FFFFF) != 0 );
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	f3c3 0316 	ubfx	r3, r3, #0, #23
  return (boolean_T)( (tmp.wordL.wordLuint & 0x7F800000) == 0x7F800000 &&
 800c870:	2b00      	cmp	r3, #0
 800c872:	d001      	beq.n	800c878 <rtIsNaNF+0x28>
 800c874:	2301      	movs	r3, #1
 800c876:	e000      	b.n	800c87a <rtIsNaNF+0x2a>
 800c878:	2300      	movs	r3, #0
 800c87a:	b2db      	uxtb	r3, r3
}
 800c87c:	4618      	mov	r0, r3
 800c87e:	3714      	adds	r7, #20
 800c880:	46bd      	mov	sp, r7
 800c882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c886:	4770      	bx	lr

0800c888 <svd_u3DvUgOe>:
#include "xrotg_XzIjz1eG.h"
#include "xrot_i7f01JoJ.h"
#include "xswap_JoAqPjUv.h"

void svd_u3DvUgOe(const real_T A[9], real_T U[9], real_T s[3], real_T V[9])
{
 800c888:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c88c:	ed2d 8b02 	vpush	{d8}
 800c890:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800c894:	af02      	add	r7, sp, #8
 800c896:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 800c89a:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 800c89e:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 800c8a2:	f507 7280 	add.w	r2, r7, #256	; 0x100
 800c8a6:	6013      	str	r3, [r2, #0]
  int32_T kase;
  int32_T m;
  int32_T qjj;
  int32_T qq;
  boolean_T apply_transform;
  e[0] = 0.0;
 800c8a8:	f04f 0200 	mov.w	r2, #0
 800c8ac:	f04f 0300 	mov.w	r3, #0
 800c8b0:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
  work[0] = 0.0;
 800c8b4:	f04f 0200 	mov.w	r2, #0
 800c8b8:	f04f 0300 	mov.w	r3, #0
 800c8bc:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
  e[1] = 0.0;
 800c8c0:	f04f 0200 	mov.w	r2, #0
 800c8c4:	f04f 0300 	mov.w	r3, #0
 800c8c8:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
  work[1] = 0.0;
 800c8cc:	f04f 0200 	mov.w	r2, #0
 800c8d0:	f04f 0300 	mov.w	r3, #0
 800c8d4:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
  e[2] = 0.0;
 800c8d8:	f04f 0200 	mov.w	r2, #0
 800c8dc:	f04f 0300 	mov.w	r3, #0
 800c8e0:	e9c7 2356 	strd	r2, r3, [r7, #344]	; 0x158
  work[2] = 0.0;
 800c8e4:	f04f 0200 	mov.w	r2, #0
 800c8e8:	f04f 0300 	mov.w	r3, #0
 800c8ec:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
  for (qq = 0; qq < 9; qq++) {
 800c8f0:	2300      	movs	r3, #0
 800c8f2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800c8f6:	e02e      	b.n	800c956 <svd_u3DvUgOe+0xce>
    b_A[qq] = A[qq];
 800c8f8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800c8fc:	00da      	lsls	r2, r3, #3
 800c8fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c902:	4413      	add	r3, r2
 800c904:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c908:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800c90c:	00db      	lsls	r3, r3, #3
 800c90e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800c912:	4413      	add	r3, r2
 800c914:	3b88      	subs	r3, #136	; 0x88
 800c916:	e9c3 0100 	strd	r0, r1, [r3]
    U[qq] = 0.0;
 800c91a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800c91e:	00da      	lsls	r2, r3, #3
 800c920:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800c924:	1899      	adds	r1, r3, r2
 800c926:	f04f 0200 	mov.w	r2, #0
 800c92a:	f04f 0300 	mov.w	r3, #0
 800c92e:	e9c1 2300 	strd	r2, r3, [r1]
    V[qq] = 0.0;
 800c932:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800c936:	00da      	lsls	r2, r3, #3
 800c938:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	1899      	adds	r1, r3, r2
 800c940:	f04f 0200 	mov.w	r2, #0
 800c944:	f04f 0300 	mov.w	r3, #0
 800c948:	e9c1 2300 	strd	r2, r3, [r1]
  for (qq = 0; qq < 9; qq++) {
 800c94c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800c950:	3301      	adds	r3, #1
 800c952:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800c956:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800c95a:	2b08      	cmp	r3, #8
 800c95c:	ddcc      	ble.n	800c8f8 <svd_u3DvUgOe+0x70>
  }

  qq = 0;
 800c95e:	2300      	movs	r3, #0
 800c960:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  apply_transform = false;
 800c964:	2300      	movs	r3, #0
 800c966:	f887 31eb 	strb.w	r3, [r7, #491]	; 0x1eb
  nrm = xnrm2_xDOlDEtw(3, b_A, 1);
 800c96a:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800c96e:	2201      	movs	r2, #1
 800c970:	4619      	mov	r1, r3
 800c972:	2003      	movs	r0, #3
 800c974:	f002 fbbc 	bl	800f0f0 <xnrm2_xDOlDEtw>
 800c978:	ed87 0b72 	vstr	d0, [r7, #456]	; 0x1c8
  if (nrm > 0.0) {
 800c97c:	f04f 0200 	mov.w	r2, #0
 800c980:	f04f 0300 	mov.w	r3, #0
 800c984:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	; 0x1c8
 800c988:	f7f4 f8b8 	bl	8000afc <__aeabi_dcmpgt>
 800c98c:	4603      	mov	r3, r0
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d07b      	beq.n	800ca8a <svd_u3DvUgOe+0x202>
    apply_transform = true;
 800c992:	2301      	movs	r3, #1
 800c994:	f887 31eb 	strb.w	r3, [r7, #491]	; 0x1eb
    if (b_A[0] < 0.0) {
 800c998:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 800c99c:	f04f 0200 	mov.w	r2, #0
 800c9a0:	f04f 0300 	mov.w	r3, #0
 800c9a4:	f7f4 f88c 	bl	8000ac0 <__aeabi_dcmplt>
 800c9a8:	4603      	mov	r3, r0
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d008      	beq.n	800c9c0 <svd_u3DvUgOe+0x138>
      b_s[0] = -nrm;
 800c9ae:	f8d7 41c8 	ldr.w	r4, [r7, #456]	; 0x1c8
 800c9b2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800c9b6:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800c9ba:	e9c7 4558 	strd	r4, r5, [r7, #352]	; 0x160
 800c9be:	e003      	b.n	800c9c8 <svd_u3DvUgOe+0x140>
    } else {
      b_s[0] = nrm;
 800c9c0:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 800c9c4:	e9c7 2358 	strd	r2, r3, [r7, #352]	; 0x160
    }

    if (fabs(b_s[0]) >= 1.0020841800044864E-292) {
 800c9c8:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 800c9cc:	4690      	mov	r8, r2
 800c9ce:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 800c9d2:	f04f 0200 	mov.w	r2, #0
 800c9d6:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800c9da:	4640      	mov	r0, r8
 800c9dc:	4649      	mov	r1, r9
 800c9de:	f7f4 f883 	bl	8000ae8 <__aeabi_dcmpge>
 800c9e2:	4603      	mov	r3, r0
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d016      	beq.n	800ca16 <svd_u3DvUgOe+0x18e>
      xscal_59GtRAwv(3, 1.0 / b_s[0], b_A, 1);
 800c9e8:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 800c9ec:	f04f 0000 	mov.w	r0, #0
 800c9f0:	49c1      	ldr	r1, [pc, #772]	; (800ccf8 <svd_u3DvUgOe+0x470>)
 800c9f2:	f7f3 ff1d 	bl	8000830 <__aeabi_ddiv>
 800c9f6:	4602      	mov	r2, r0
 800c9f8:	460b      	mov	r3, r1
 800c9fa:	ec43 2b17 	vmov	d7, r2, r3
 800c9fe:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800ca02:	2201      	movs	r2, #1
 800ca04:	4619      	mov	r1, r3
 800ca06:	eeb0 0a47 	vmov.f32	s0, s14
 800ca0a:	eef0 0a67 	vmov.f32	s1, s15
 800ca0e:	2003      	movs	r0, #3
 800ca10:	f002 fe36 	bl	800f680 <xscal_59GtRAwv>
 800ca14:	e026      	b.n	800ca64 <svd_u3DvUgOe+0x1dc>
    } else {
      for (qjj = 0; qjj < 3; qjj++) {
 800ca16:	2300      	movs	r3, #0
 800ca18:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800ca1c:	e01e      	b.n	800ca5c <svd_u3DvUgOe+0x1d4>
        b_A[qjj] /= b_s[0];
 800ca1e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800ca22:	00db      	lsls	r3, r3, #3
 800ca24:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800ca28:	4413      	add	r3, r2
 800ca2a:	3b88      	subs	r3, #136	; 0x88
 800ca2c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ca30:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 800ca34:	f7f3 fefc 	bl	8000830 <__aeabi_ddiv>
 800ca38:	4602      	mov	r2, r0
 800ca3a:	460b      	mov	r3, r1
 800ca3c:	4610      	mov	r0, r2
 800ca3e:	4619      	mov	r1, r3
 800ca40:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800ca44:	00db      	lsls	r3, r3, #3
 800ca46:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800ca4a:	4413      	add	r3, r2
 800ca4c:	3b88      	subs	r3, #136	; 0x88
 800ca4e:	e9c3 0100 	strd	r0, r1, [r3]
      for (qjj = 0; qjj < 3; qjj++) {
 800ca52:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800ca56:	3301      	adds	r3, #1
 800ca58:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800ca5c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800ca60:	2b02      	cmp	r3, #2
 800ca62:	dddc      	ble.n	800ca1e <svd_u3DvUgOe+0x196>
      }
    }

    b_A[0]++;
 800ca64:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 800ca68:	f04f 0200 	mov.w	r2, #0
 800ca6c:	4ba2      	ldr	r3, [pc, #648]	; (800ccf8 <svd_u3DvUgOe+0x470>)
 800ca6e:	f7f3 fbff 	bl	8000270 <__adddf3>
 800ca72:	4602      	mov	r2, r0
 800ca74:	460b      	mov	r3, r1
 800ca76:	e9c7 235e 	strd	r2, r3, [r7, #376]	; 0x178
    b_s[0] = -b_s[0];
 800ca7a:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 800ca7e:	4692      	mov	sl, r2
 800ca80:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 800ca84:	e9c7 ab58 	strd	sl, fp, [r7, #352]	; 0x160
 800ca88:	e005      	b.n	800ca96 <svd_u3DvUgOe+0x20e>
  } else {
    b_s[0] = 0.0;
 800ca8a:	f04f 0200 	mov.w	r2, #0
 800ca8e:	f04f 0300 	mov.w	r3, #0
 800ca92:	e9c7 2358 	strd	r2, r3, [r7, #352]	; 0x160
  }

  for (d = 1; d + 1 < 4; d++) {
 800ca96:	2301      	movs	r3, #1
 800ca98:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 800ca9c:	e047      	b.n	800cb2e <svd_u3DvUgOe+0x2a6>
    qjj = 3 * d;
 800ca9e:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 800caa2:	4613      	mov	r3, r2
 800caa4:	005b      	lsls	r3, r3, #1
 800caa6:	4413      	add	r3, r2
 800caa8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    if (apply_transform) {
 800caac:	f897 31eb 	ldrb.w	r3, [r7, #491]	; 0x1eb
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d025      	beq.n	800cb00 <svd_u3DvUgOe+0x278>
      xaxpy_guu0hJif(3, -(xdotc_mznw4aLl(3, b_A, 1, b_A, qjj + 1) / b_A[0]), 1,
 800cab4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800cab8:	3301      	adds	r3, #1
 800caba:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 800cabe:	f507 71bc 	add.w	r1, r7, #376	; 0x178
 800cac2:	9300      	str	r3, [sp, #0]
 800cac4:	4613      	mov	r3, r2
 800cac6:	2201      	movs	r2, #1
 800cac8:	2003      	movs	r0, #3
 800caca:	f001 fdf8 	bl	800e6be <xdotc_mznw4aLl>
 800cace:	ec51 0b10 	vmov	r0, r1, d0
 800cad2:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 800cad6:	f7f3 feab 	bl	8000830 <__aeabi_ddiv>
 800cada:	4602      	mov	r2, r0
 800cadc:	460b      	mov	r3, r1
 800cade:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 800cae2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800cae6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800caea:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800caee:	3301      	adds	r3, #1
 800caf0:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 800caf4:	2101      	movs	r1, #1
 800caf6:	ed97 0b3e 	vldr	d0, [r7, #248]	; 0xf8
 800cafa:	2003      	movs	r0, #3
 800cafc:	f001 fd8b 	bl	800e616 <xaxpy_guu0hJif>
                     b_A, qjj + 1);
    }

    e[d] = b_A[qjj];
 800cb00:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800cb04:	00db      	lsls	r3, r3, #3
 800cb06:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800cb0a:	4413      	add	r3, r2
 800cb0c:	3b88      	subs	r3, #136	; 0x88
 800cb0e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cb12:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800cb16:	00db      	lsls	r3, r3, #3
 800cb18:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800cb1c:	4413      	add	r3, r2
 800cb1e:	3bb8      	subs	r3, #184	; 0xb8
 800cb20:	e9c3 0100 	strd	r0, r1, [r3]
  for (d = 1; d + 1 < 4; d++) {
 800cb24:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800cb28:	3301      	adds	r3, #1
 800cb2a:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 800cb2e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800cb32:	2b02      	cmp	r3, #2
 800cb34:	ddb3      	ble.n	800ca9e <svd_u3DvUgOe+0x216>
  }

  while (qq + 1 < 4) {
 800cb36:	e015      	b.n	800cb64 <svd_u3DvUgOe+0x2dc>
    U[qq] = b_A[qq];
 800cb38:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800cb3c:	00da      	lsls	r2, r3, #3
 800cb3e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800cb42:	1899      	adds	r1, r3, r2
 800cb44:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800cb48:	00db      	lsls	r3, r3, #3
 800cb4a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800cb4e:	4413      	add	r3, r2
 800cb50:	3b88      	subs	r3, #136	; 0x88
 800cb52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb56:	e9c1 2300 	strd	r2, r3, [r1]
    qq++;
 800cb5a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800cb5e:	3301      	adds	r3, #1
 800cb60:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  while (qq + 1 < 4) {
 800cb64:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800cb68:	2b02      	cmp	r3, #2
 800cb6a:	dde5      	ble.n	800cb38 <svd_u3DvUgOe+0x2b0>
  }

  nrm = xnrm2_Rlk0oxWw(2, e, 2);
 800cb6c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800cb70:	2202      	movs	r2, #2
 800cb72:	4619      	mov	r1, r3
 800cb74:	2002      	movs	r0, #2
 800cb76:	f002 f95f 	bl	800ee38 <xnrm2_Rlk0oxWw>
 800cb7a:	ed87 0b72 	vstr	d0, [r7, #456]	; 0x1c8
  if (nrm == 0.0) {
 800cb7e:	f04f 0200 	mov.w	r2, #0
 800cb82:	f04f 0300 	mov.w	r3, #0
 800cb86:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	; 0x1c8
 800cb8a:	f7f3 ff8f 	bl	8000aac <__aeabi_dcmpeq>
 800cb8e:	4603      	mov	r3, r0
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d006      	beq.n	800cba2 <svd_u3DvUgOe+0x31a>
    e[0] = 0.0;
 800cb94:	f04f 0200 	mov.w	r2, #0
 800cb98:	f04f 0300 	mov.w	r3, #0
 800cb9c:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
 800cba0:	e10d      	b.n	800cdbe <svd_u3DvUgOe+0x536>
  } else {
    if (e[1] < 0.0) {
 800cba2:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 800cba6:	f04f 0200 	mov.w	r2, #0
 800cbaa:	f04f 0300 	mov.w	r3, #0
 800cbae:	f7f3 ff87 	bl	8000ac0 <__aeabi_dcmplt>
 800cbb2:	4603      	mov	r3, r0
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d00e      	beq.n	800cbd6 <svd_u3DvUgOe+0x34e>
      e[0] = -nrm;
 800cbb8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800cbbc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800cbc0:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800cbc4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800cbc8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800cbcc:	ed97 7b3c 	vldr	d7, [r7, #240]	; 0xf0
 800cbd0:	ed87 7b52 	vstr	d7, [r7, #328]	; 0x148
 800cbd4:	e003      	b.n	800cbde <svd_u3DvUgOe+0x356>
    } else {
      e[0] = nrm;
 800cbd6:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 800cbda:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
    }

    nrm = e[0];
 800cbde:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800cbe2:	e9c7 2372 	strd	r2, r3, [r7, #456]	; 0x1c8
    if (fabs(e[0]) >= 1.0020841800044864E-292) {
 800cbe6:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800cbea:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 800cbee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cbf2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800cbf6:	f04f 0200 	mov.w	r2, #0
 800cbfa:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800cbfe:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 800cc02:	f7f3 ff71 	bl	8000ae8 <__aeabi_dcmpge>
 800cc06:	4603      	mov	r3, r0
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d016      	beq.n	800cc3a <svd_u3DvUgOe+0x3b2>
      xscal_PLmmUlD2(2, 1.0 / e[0], e, 2);
 800cc0c:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800cc10:	f04f 0000 	mov.w	r0, #0
 800cc14:	4938      	ldr	r1, [pc, #224]	; (800ccf8 <svd_u3DvUgOe+0x470>)
 800cc16:	f7f3 fe0b 	bl	8000830 <__aeabi_ddiv>
 800cc1a:	4602      	mov	r2, r0
 800cc1c:	460b      	mov	r3, r1
 800cc1e:	ec43 2b17 	vmov	d7, r2, r3
 800cc22:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800cc26:	2202      	movs	r2, #2
 800cc28:	4619      	mov	r1, r3
 800cc2a:	eeb0 0a47 	vmov.f32	s0, s14
 800cc2e:	eef0 0a67 	vmov.f32	s1, s15
 800cc32:	2002      	movs	r0, #2
 800cc34:	f002 fd58 	bl	800f6e8 <xscal_PLmmUlD2>
 800cc38:	e026      	b.n	800cc88 <svd_u3DvUgOe+0x400>
    } else {
      for (qq = 1; qq < 3; qq++) {
 800cc3a:	2301      	movs	r3, #1
 800cc3c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800cc40:	e01e      	b.n	800cc80 <svd_u3DvUgOe+0x3f8>
        e[qq] /= nrm;
 800cc42:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800cc46:	00db      	lsls	r3, r3, #3
 800cc48:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800cc4c:	4413      	add	r3, r2
 800cc4e:	3bb8      	subs	r3, #184	; 0xb8
 800cc50:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cc54:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 800cc58:	f7f3 fdea 	bl	8000830 <__aeabi_ddiv>
 800cc5c:	4602      	mov	r2, r0
 800cc5e:	460b      	mov	r3, r1
 800cc60:	4610      	mov	r0, r2
 800cc62:	4619      	mov	r1, r3
 800cc64:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800cc68:	00db      	lsls	r3, r3, #3
 800cc6a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800cc6e:	4413      	add	r3, r2
 800cc70:	3bb8      	subs	r3, #184	; 0xb8
 800cc72:	e9c3 0100 	strd	r0, r1, [r3]
      for (qq = 1; qq < 3; qq++) {
 800cc76:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800cc7a:	3301      	adds	r3, #1
 800cc7c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800cc80:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800cc84:	2b02      	cmp	r3, #2
 800cc86:	dddc      	ble.n	800cc42 <svd_u3DvUgOe+0x3ba>
      }
    }

    e[1]++;
 800cc88:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 800cc8c:	f04f 0200 	mov.w	r2, #0
 800cc90:	4b19      	ldr	r3, [pc, #100]	; (800ccf8 <svd_u3DvUgOe+0x470>)
 800cc92:	f7f3 faed 	bl	8000270 <__adddf3>
 800cc96:	4602      	mov	r2, r0
 800cc98:	460b      	mov	r3, r1
 800cc9a:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
    e[0] = -e[0];
 800cc9e:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800cca2:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 800cca6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800ccaa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ccae:	ed97 7b38 	vldr	d7, [r7, #224]	; 0xe0
 800ccb2:	ed87 7b52 	vstr	d7, [r7, #328]	; 0x148
    for (qq = 2; qq < 4; qq++) {
 800ccb6:	2302      	movs	r3, #2
 800ccb8:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800ccbc:	e013      	b.n	800cce6 <svd_u3DvUgOe+0x45e>
      work[qq - 1] = 0.0;
 800ccbe:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800ccc2:	3b01      	subs	r3, #1
 800ccc4:	00db      	lsls	r3, r3, #3
 800ccc6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800ccca:	4413      	add	r3, r2
 800cccc:	f1a3 01d0 	sub.w	r1, r3, #208	; 0xd0
 800ccd0:	f04f 0200 	mov.w	r2, #0
 800ccd4:	f04f 0300 	mov.w	r3, #0
 800ccd8:	e9c1 2300 	strd	r2, r3, [r1]
    for (qq = 2; qq < 4; qq++) {
 800ccdc:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800cce0:	3301      	adds	r3, #1
 800cce2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800cce6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800ccea:	2b03      	cmp	r3, #3
 800ccec:	dde7      	ble.n	800ccbe <svd_u3DvUgOe+0x436>
    }

    for (qq = 1; qq + 1 < 4; qq++) {
 800ccee:	2301      	movs	r3, #1
 800ccf0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800ccf4:	e025      	b.n	800cd42 <svd_u3DvUgOe+0x4ba>
 800ccf6:	bf00      	nop
 800ccf8:	3ff00000 	.word	0x3ff00000
      xaxpy_OQ28XA21(2, e[qq], b_A, 3 * qq + 2, work, 2);
 800ccfc:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800cd00:	00db      	lsls	r3, r3, #3
 800cd02:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800cd06:	4413      	add	r3, r2
 800cd08:	3bb8      	subs	r3, #184	; 0xb8
 800cd0a:	ed93 7b00 	vldr	d7, [r3]
 800cd0e:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 800cd12:	4613      	mov	r3, r2
 800cd14:	005b      	lsls	r3, r3, #1
 800cd16:	4413      	add	r3, r2
 800cd18:	1c98      	adds	r0, r3, #2
 800cd1a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800cd1e:	f507 71bc 	add.w	r1, r7, #376	; 0x178
 800cd22:	2302      	movs	r3, #2
 800cd24:	9300      	str	r3, [sp, #0]
 800cd26:	4613      	mov	r3, r2
 800cd28:	4602      	mov	r2, r0
 800cd2a:	eeb0 0a47 	vmov.f32	s0, s14
 800cd2e:	eef0 0a67 	vmov.f32	s1, s15
 800cd32:	2002      	movs	r0, #2
 800cd34:	f001 fbc7 	bl	800e4c6 <xaxpy_OQ28XA21>
    for (qq = 1; qq + 1 < 4; qq++) {
 800cd38:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800cd3c:	3301      	adds	r3, #1
 800cd3e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800cd42:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800cd46:	2b02      	cmp	r3, #2
 800cd48:	ddd8      	ble.n	800ccfc <svd_u3DvUgOe+0x474>
    }

    for (qq = 1; qq + 1 < 4; qq++) {
 800cd4a:	2301      	movs	r3, #1
 800cd4c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800cd50:	e031      	b.n	800cdb6 <svd_u3DvUgOe+0x52e>
      xaxpy_Wxch84Fl(2, -e[qq] / e[1], work, 2, b_A, 3 * qq + 2);
 800cd52:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800cd56:	00db      	lsls	r3, r3, #3
 800cd58:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800cd5c:	4413      	add	r3, r2
 800cd5e:	3bb8      	subs	r3, #184	; 0xb8
 800cd60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd64:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 800cd68:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800cd6c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800cd70:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 800cd74:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800cd78:	f7f3 fd5a 	bl	8000830 <__aeabi_ddiv>
 800cd7c:	4602      	mov	r2, r0
 800cd7e:	460b      	mov	r3, r1
 800cd80:	ec43 2b17 	vmov	d7, r2, r3
 800cd84:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 800cd88:	4613      	mov	r3, r2
 800cd8a:	005b      	lsls	r3, r3, #1
 800cd8c:	4413      	add	r3, r2
 800cd8e:	3302      	adds	r3, #2
 800cd90:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 800cd94:	f507 7198 	add.w	r1, r7, #304	; 0x130
 800cd98:	9300      	str	r3, [sp, #0]
 800cd9a:	4613      	mov	r3, r2
 800cd9c:	2202      	movs	r2, #2
 800cd9e:	eeb0 0a47 	vmov.f32	s0, s14
 800cda2:	eef0 0a67 	vmov.f32	s1, s15
 800cda6:	2002      	movs	r0, #2
 800cda8:	f001 fbe1 	bl	800e56e <xaxpy_Wxch84Fl>
    for (qq = 1; qq + 1 < 4; qq++) {
 800cdac:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800cdb0:	3301      	adds	r3, #1
 800cdb2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800cdb6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800cdba:	2b02      	cmp	r3, #2
 800cdbc:	ddc9      	ble.n	800cd52 <svd_u3DvUgOe+0x4ca>
    }
  }

  for (qq = 1; qq + 1 < 4; qq++) {
 800cdbe:	2301      	movs	r3, #1
 800cdc0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800cdc4:	e016      	b.n	800cdf4 <svd_u3DvUgOe+0x56c>
    V[qq] = e[qq];
 800cdc6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800cdca:	00da      	lsls	r2, r3, #3
 800cdcc:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	1899      	adds	r1, r3, r2
 800cdd4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800cdd8:	00db      	lsls	r3, r3, #3
 800cdda:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800cdde:	4413      	add	r3, r2
 800cde0:	3bb8      	subs	r3, #184	; 0xb8
 800cde2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cde6:	e9c1 2300 	strd	r2, r3, [r1]
  for (qq = 1; qq + 1 < 4; qq++) {
 800cdea:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800cdee:	3301      	adds	r3, #1
 800cdf0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800cdf4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800cdf8:	2b02      	cmp	r3, #2
 800cdfa:	dde4      	ble.n	800cdc6 <svd_u3DvUgOe+0x53e>
  }

  apply_transform = false;
 800cdfc:	2300      	movs	r3, #0
 800cdfe:	f887 31eb 	strb.w	r3, [r7, #491]	; 0x1eb
  nrm = xnrm2_xDOlDEtw(2, b_A, 5);
 800ce02:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800ce06:	2205      	movs	r2, #5
 800ce08:	4619      	mov	r1, r3
 800ce0a:	2002      	movs	r0, #2
 800ce0c:	f002 f970 	bl	800f0f0 <xnrm2_xDOlDEtw>
 800ce10:	ed87 0b72 	vstr	d0, [r7, #456]	; 0x1c8
  if (nrm > 0.0) {
 800ce14:	f04f 0200 	mov.w	r2, #0
 800ce18:	f04f 0300 	mov.w	r3, #0
 800ce1c:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	; 0x1c8
 800ce20:	f7f3 fe6c 	bl	8000afc <__aeabi_dcmpgt>
 800ce24:	4603      	mov	r3, r0
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	f000 808a 	beq.w	800cf40 <svd_u3DvUgOe+0x6b8>
    apply_transform = true;
 800ce2c:	2301      	movs	r3, #1
 800ce2e:	f887 31eb 	strb.w	r3, [r7, #491]	; 0x1eb
    if (b_A[4] < 0.0) {
 800ce32:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800ce36:	f04f 0200 	mov.w	r2, #0
 800ce3a:	f04f 0300 	mov.w	r3, #0
 800ce3e:	f7f3 fe3f 	bl	8000ac0 <__aeabi_dcmplt>
 800ce42:	4603      	mov	r3, r0
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d00e      	beq.n	800ce66 <svd_u3DvUgOe+0x5de>
      b_s[1] = -nrm;
 800ce48:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800ce4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ce50:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800ce54:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800ce58:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800ce5c:	ed97 7b34 	vldr	d7, [r7, #208]	; 0xd0
 800ce60:	ed87 7b5a 	vstr	d7, [r7, #360]	; 0x168
 800ce64:	e003      	b.n	800ce6e <svd_u3DvUgOe+0x5e6>
    } else {
      b_s[1] = nrm;
 800ce66:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 800ce6a:	e9c7 235a 	strd	r2, r3, [r7, #360]	; 0x168
    }

    if (fabs(b_s[1]) >= 1.0020841800044864E-292) {
 800ce6e:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 800ce72:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 800ce76:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ce7a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800ce7e:	f04f 0200 	mov.w	r2, #0
 800ce82:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800ce86:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800ce8a:	f7f3 fe2d 	bl	8000ae8 <__aeabi_dcmpge>
 800ce8e:	4603      	mov	r3, r0
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d016      	beq.n	800cec2 <svd_u3DvUgOe+0x63a>
      xscal_59GtRAwv(2, 1.0 / b_s[1], b_A, 5);
 800ce94:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 800ce98:	f04f 0000 	mov.w	r0, #0
 800ce9c:	49d6      	ldr	r1, [pc, #856]	; (800d1f8 <svd_u3DvUgOe+0x970>)
 800ce9e:	f7f3 fcc7 	bl	8000830 <__aeabi_ddiv>
 800cea2:	4602      	mov	r2, r0
 800cea4:	460b      	mov	r3, r1
 800cea6:	ec43 2b17 	vmov	d7, r2, r3
 800ceaa:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800ceae:	2205      	movs	r2, #5
 800ceb0:	4619      	mov	r1, r3
 800ceb2:	eeb0 0a47 	vmov.f32	s0, s14
 800ceb6:	eef0 0a67 	vmov.f32	s1, s15
 800ceba:	2002      	movs	r0, #2
 800cebc:	f002 fbe0 	bl	800f680 <xscal_59GtRAwv>
 800cec0:	e026      	b.n	800cf10 <svd_u3DvUgOe+0x688>
    } else {
      for (qjj = 4; qjj < 6; qjj++) {
 800cec2:	2304      	movs	r3, #4
 800cec4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800cec8:	e01e      	b.n	800cf08 <svd_u3DvUgOe+0x680>
        b_A[qjj] /= b_s[1];
 800ceca:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800cece:	00db      	lsls	r3, r3, #3
 800ced0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800ced4:	4413      	add	r3, r2
 800ced6:	3b88      	subs	r3, #136	; 0x88
 800ced8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cedc:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 800cee0:	f7f3 fca6 	bl	8000830 <__aeabi_ddiv>
 800cee4:	4602      	mov	r2, r0
 800cee6:	460b      	mov	r3, r1
 800cee8:	4610      	mov	r0, r2
 800ceea:	4619      	mov	r1, r3
 800ceec:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800cef0:	00db      	lsls	r3, r3, #3
 800cef2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800cef6:	4413      	add	r3, r2
 800cef8:	3b88      	subs	r3, #136	; 0x88
 800cefa:	e9c3 0100 	strd	r0, r1, [r3]
      for (qjj = 4; qjj < 6; qjj++) {
 800cefe:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800cf02:	3301      	adds	r3, #1
 800cf04:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800cf08:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800cf0c:	2b05      	cmp	r3, #5
 800cf0e:	dddc      	ble.n	800ceca <svd_u3DvUgOe+0x642>
      }
    }

    b_A[4]++;
 800cf10:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800cf14:	f04f 0200 	mov.w	r2, #0
 800cf18:	4bb7      	ldr	r3, [pc, #732]	; (800d1f8 <svd_u3DvUgOe+0x970>)
 800cf1a:	f7f3 f9a9 	bl	8000270 <__adddf3>
 800cf1e:	4602      	mov	r2, r0
 800cf20:	460b      	mov	r3, r1
 800cf22:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
    b_s[1] = -b_s[1];
 800cf26:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 800cf2a:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 800cf2e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800cf32:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800cf36:	ed97 7b30 	vldr	d7, [r7, #192]	; 0xc0
 800cf3a:	ed87 7b5a 	vstr	d7, [r7, #360]	; 0x168
 800cf3e:	e005      	b.n	800cf4c <svd_u3DvUgOe+0x6c4>
  } else {
    b_s[1] = 0.0;
 800cf40:	f04f 0200 	mov.w	r2, #0
 800cf44:	f04f 0300 	mov.w	r3, #0
 800cf48:	e9c7 235a 	strd	r2, r3, [r7, #360]	; 0x168
  }

  for (d = 2; d + 1 < 4; d++) {
 800cf4c:	2302      	movs	r3, #2
 800cf4e:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 800cf52:	e048      	b.n	800cfe6 <svd_u3DvUgOe+0x75e>
    qjj = 3 * d + 1;
 800cf54:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 800cf58:	4613      	mov	r3, r2
 800cf5a:	005b      	lsls	r3, r3, #1
 800cf5c:	4413      	add	r3, r2
 800cf5e:	3301      	adds	r3, #1
 800cf60:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    if (apply_transform) {
 800cf64:	f897 31eb 	ldrb.w	r3, [r7, #491]	; 0x1eb
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d025      	beq.n	800cfb8 <svd_u3DvUgOe+0x730>
      xaxpy_guu0hJif(2, -(xdotc_mznw4aLl(2, b_A, 5, b_A, qjj + 1) / b_A[4]), 5,
 800cf6c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800cf70:	3301      	adds	r3, #1
 800cf72:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 800cf76:	f507 71bc 	add.w	r1, r7, #376	; 0x178
 800cf7a:	9300      	str	r3, [sp, #0]
 800cf7c:	4613      	mov	r3, r2
 800cf7e:	2205      	movs	r2, #5
 800cf80:	2002      	movs	r0, #2
 800cf82:	f001 fb9c 	bl	800e6be <xdotc_mznw4aLl>
 800cf86:	ec51 0b10 	vmov	r0, r1, d0
 800cf8a:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 800cf8e:	f7f3 fc4f 	bl	8000830 <__aeabi_ddiv>
 800cf92:	4602      	mov	r2, r0
 800cf94:	460b      	mov	r3, r1
 800cf96:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 800cf9a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800cf9e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800cfa2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800cfa6:	3301      	adds	r3, #1
 800cfa8:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 800cfac:	2105      	movs	r1, #5
 800cfae:	ed97 0b2e 	vldr	d0, [r7, #184]	; 0xb8
 800cfb2:	2002      	movs	r0, #2
 800cfb4:	f001 fb2f 	bl	800e616 <xaxpy_guu0hJif>
                     b_A, qjj + 1);
    }

    e[d] = b_A[qjj];
 800cfb8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800cfbc:	00db      	lsls	r3, r3, #3
 800cfbe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800cfc2:	4413      	add	r3, r2
 800cfc4:	3b88      	subs	r3, #136	; 0x88
 800cfc6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cfca:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800cfce:	00db      	lsls	r3, r3, #3
 800cfd0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800cfd4:	4413      	add	r3, r2
 800cfd6:	3bb8      	subs	r3, #184	; 0xb8
 800cfd8:	e9c3 0100 	strd	r0, r1, [r3]
  for (d = 2; d + 1 < 4; d++) {
 800cfdc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800cfe0:	3301      	adds	r3, #1
 800cfe2:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 800cfe6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800cfea:	2b02      	cmp	r3, #2
 800cfec:	ddb2      	ble.n	800cf54 <svd_u3DvUgOe+0x6cc>
  }

  for (qq = 1; qq + 1 < 4; qq++) {
 800cfee:	2301      	movs	r3, #1
 800cff0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800cff4:	e017      	b.n	800d026 <svd_u3DvUgOe+0x79e>
    U[qq + 3] = b_A[qq + 3];
 800cff6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800cffa:	1cd8      	adds	r0, r3, #3
 800cffc:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d000:	3303      	adds	r3, #3
 800d002:	00da      	lsls	r2, r3, #3
 800d004:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d008:	1899      	adds	r1, r3, r2
 800d00a:	00c3      	lsls	r3, r0, #3
 800d00c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d010:	4413      	add	r3, r2
 800d012:	3b88      	subs	r3, #136	; 0x88
 800d014:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d018:	e9c1 2300 	strd	r2, r3, [r1]
  for (qq = 1; qq + 1 < 4; qq++) {
 800d01c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d020:	3301      	adds	r3, #1
 800d022:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800d026:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d02a:	2b02      	cmp	r3, #2
 800d02c:	dde3      	ble.n	800cff6 <svd_u3DvUgOe+0x76e>
  }

  m = 1;
 800d02e:	2301      	movs	r3, #1
 800d030:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  b_s[2] = b_A[8];
 800d034:	e9d7 236e 	ldrd	r2, r3, [r7, #440]	; 0x1b8
 800d038:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170
  U[6] = 0.0;
 800d03c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d040:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d044:	f04f 0200 	mov.w	r2, #0
 800d048:	f04f 0300 	mov.w	r3, #0
 800d04c:	e9c1 2300 	strd	r2, r3, [r1]
  U[7] = 0.0;
 800d050:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d054:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d058:	f04f 0200 	mov.w	r2, #0
 800d05c:	f04f 0300 	mov.w	r3, #0
 800d060:	e9c1 2300 	strd	r2, r3, [r1]
  U[8] = 1.0;
 800d064:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d068:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800d06c:	f04f 0200 	mov.w	r2, #0
 800d070:	4b61      	ldr	r3, [pc, #388]	; (800d1f8 <svd_u3DvUgOe+0x970>)
 800d072:	e9c1 2300 	strd	r2, r3, [r1]
  for (d = 1; d >= 0; d--) {
 800d076:	2301      	movs	r3, #1
 800d078:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 800d07c:	e100      	b.n	800d280 <svd_u3DvUgOe+0x9f8>
    qq = 3 * d + d;
 800d07e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800d082:	009b      	lsls	r3, r3, #2
 800d084:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    if (b_s[d] != 0.0) {
 800d088:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800d08c:	00db      	lsls	r3, r3, #3
 800d08e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d092:	4413      	add	r3, r2
 800d094:	3ba0      	subs	r3, #160	; 0xa0
 800d096:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d09a:	f04f 0200 	mov.w	r2, #0
 800d09e:	f04f 0300 	mov.w	r3, #0
 800d0a2:	f7f3 fd03 	bl	8000aac <__aeabi_dcmpeq>
 800d0a6:	4603      	mov	r3, r0
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	f040 80a7 	bne.w	800d1fc <svd_u3DvUgOe+0x974>
      for (kase = d + 1; kase + 1 < 4; kase++) {
 800d0ae:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800d0b2:	3301      	adds	r3, #1
 800d0b4:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 800d0b8:	e043      	b.n	800d142 <svd_u3DvUgOe+0x8ba>
        qjj = (3 * kase + d) + 1;
 800d0ba:	f8d7 21f8 	ldr.w	r2, [r7, #504]	; 0x1f8
 800d0be:	4613      	mov	r3, r2
 800d0c0:	005b      	lsls	r3, r3, #1
 800d0c2:	441a      	add	r2, r3
 800d0c4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800d0c8:	4413      	add	r3, r2
 800d0ca:	3301      	adds	r3, #1
 800d0cc:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
        xaxpy_guu0hJif(3 - d, -(xdotc_mznw4aLl(3 - d, U, qq + 1, U, qjj) / U[qq]),
 800d0d0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800d0d4:	f1c3 0403 	rsb	r4, r3, #3
 800d0d8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800d0dc:	f1c3 0003 	rsb	r0, r3, #3
 800d0e0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d0e4:	1c5a      	adds	r2, r3, #1
 800d0e6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800d0ea:	9300      	str	r3, [sp, #0]
 800d0ec:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d0f0:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 800d0f4:	f001 fae3 	bl	800e6be <xdotc_mznw4aLl>
 800d0f8:	ec51 0b10 	vmov	r0, r1, d0
 800d0fc:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d100:	00da      	lsls	r2, r3, #3
 800d102:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d106:	4413      	add	r3, r2
 800d108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d10c:	f7f3 fb90 	bl	8000830 <__aeabi_ddiv>
 800d110:	4602      	mov	r2, r0
 800d112:	460b      	mov	r3, r1
 800d114:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 800d118:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800d11c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d120:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d124:	1c59      	adds	r1, r3, #1
 800d126:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800d12a:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 800d12e:	ed97 0b2c 	vldr	d0, [r7, #176]	; 0xb0
 800d132:	4620      	mov	r0, r4
 800d134:	f001 fa6f 	bl	800e616 <xaxpy_guu0hJif>
      for (kase = d + 1; kase + 1 < 4; kase++) {
 800d138:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800d13c:	3301      	adds	r3, #1
 800d13e:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 800d142:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800d146:	2b02      	cmp	r3, #2
 800d148:	ddb7      	ble.n	800d0ba <svd_u3DvUgOe+0x832>
                       qq + 1, U, qjj);
      }

      for (qjj = d; qjj + 1 < 4; qjj++) {
 800d14a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800d14e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800d152:	e026      	b.n	800d1a2 <svd_u3DvUgOe+0x91a>
        kase = 3 * d + qjj;
 800d154:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 800d158:	4613      	mov	r3, r2
 800d15a:	005b      	lsls	r3, r3, #1
 800d15c:	441a      	add	r2, r3
 800d15e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800d162:	4413      	add	r3, r2
 800d164:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        U[kase] = -U[kase];
 800d168:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800d16c:	00da      	lsls	r2, r3, #3
 800d16e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d172:	4413      	add	r3, r2
 800d174:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d178:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800d17c:	00da      	lsls	r2, r3, #3
 800d17e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d182:	4413      	add	r3, r2
 800d184:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
 800d188:	f081 4200 	eor.w	r2, r1, #2147483648	; 0x80000000
 800d18c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800d190:	ed97 7b2a 	vldr	d7, [r7, #168]	; 0xa8
 800d194:	ed83 7b00 	vstr	d7, [r3]
      for (qjj = d; qjj + 1 < 4; qjj++) {
 800d198:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800d19c:	3301      	adds	r3, #1
 800d19e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800d1a2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800d1a6:	2b02      	cmp	r3, #2
 800d1a8:	ddd4      	ble.n	800d154 <svd_u3DvUgOe+0x8cc>
      }

      U[qq]++;
 800d1aa:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d1ae:	00da      	lsls	r2, r3, #3
 800d1b0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d1b4:	189c      	adds	r4, r3, r2
 800d1b6:	e9d4 0100 	ldrd	r0, r1, [r4]
 800d1ba:	f04f 0200 	mov.w	r2, #0
 800d1be:	4b0e      	ldr	r3, [pc, #56]	; (800d1f8 <svd_u3DvUgOe+0x970>)
 800d1c0:	f7f3 f856 	bl	8000270 <__adddf3>
 800d1c4:	4602      	mov	r2, r0
 800d1c6:	460b      	mov	r3, r1
 800d1c8:	e9c4 2300 	strd	r2, r3, [r4]
      if (d - 1 >= 0) {
 800d1cc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	dd50      	ble.n	800d276 <svd_u3DvUgOe+0x9ee>
        U[3 * d] = 0.0;
 800d1d4:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 800d1d8:	4613      	mov	r3, r2
 800d1da:	005b      	lsls	r3, r3, #1
 800d1dc:	4413      	add	r3, r2
 800d1de:	00db      	lsls	r3, r3, #3
 800d1e0:	461a      	mov	r2, r3
 800d1e2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d1e6:	1899      	adds	r1, r3, r2
 800d1e8:	f04f 0200 	mov.w	r2, #0
 800d1ec:	f04f 0300 	mov.w	r3, #0
 800d1f0:	e9c1 2300 	strd	r2, r3, [r1]
 800d1f4:	e03f      	b.n	800d276 <svd_u3DvUgOe+0x9ee>
 800d1f6:	bf00      	nop
 800d1f8:	3ff00000 	.word	0x3ff00000
      }
    } else {
      U[3 * d] = 0.0;
 800d1fc:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 800d200:	4613      	mov	r3, r2
 800d202:	005b      	lsls	r3, r3, #1
 800d204:	4413      	add	r3, r2
 800d206:	00db      	lsls	r3, r3, #3
 800d208:	461a      	mov	r2, r3
 800d20a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d20e:	1899      	adds	r1, r3, r2
 800d210:	f04f 0200 	mov.w	r2, #0
 800d214:	f04f 0300 	mov.w	r3, #0
 800d218:	e9c1 2300 	strd	r2, r3, [r1]
      U[3 * d + 1] = 0.0;
 800d21c:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 800d220:	4613      	mov	r3, r2
 800d222:	005b      	lsls	r3, r3, #1
 800d224:	4413      	add	r3, r2
 800d226:	00db      	lsls	r3, r3, #3
 800d228:	f103 0208 	add.w	r2, r3, #8
 800d22c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d230:	1899      	adds	r1, r3, r2
 800d232:	f04f 0200 	mov.w	r2, #0
 800d236:	f04f 0300 	mov.w	r3, #0
 800d23a:	e9c1 2300 	strd	r2, r3, [r1]
      U[3 * d + 2] = 0.0;
 800d23e:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 800d242:	4613      	mov	r3, r2
 800d244:	005b      	lsls	r3, r3, #1
 800d246:	4413      	add	r3, r2
 800d248:	00db      	lsls	r3, r3, #3
 800d24a:	f103 0210 	add.w	r2, r3, #16
 800d24e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d252:	1899      	adds	r1, r3, r2
 800d254:	f04f 0200 	mov.w	r2, #0
 800d258:	f04f 0300 	mov.w	r3, #0
 800d25c:	e9c1 2300 	strd	r2, r3, [r1]
      U[qq] = 1.0;
 800d260:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d264:	00da      	lsls	r2, r3, #3
 800d266:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d26a:	1899      	adds	r1, r3, r2
 800d26c:	f04f 0200 	mov.w	r2, #0
 800d270:	4b11      	ldr	r3, [pc, #68]	; (800d2b8 <svd_u3DvUgOe+0xa30>)
 800d272:	e9c1 2300 	strd	r2, r3, [r1]
  for (d = 1; d >= 0; d--) {
 800d276:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800d27a:	3b01      	subs	r3, #1
 800d27c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 800d280:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800d284:	2b00      	cmp	r3, #0
 800d286:	f6bf aefa 	bge.w	800d07e <svd_u3DvUgOe+0x7f6>
    }
  }

  for (qq = 2; qq >= 0; qq--) {
 800d28a:	2302      	movs	r3, #2
 800d28c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800d290:	e096      	b.n	800d3c0 <svd_u3DvUgOe+0xb38>
    if ((qq + 1 <= 1) && (e[0] != 0.0)) {
 800d292:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d296:	2b00      	cmp	r3, #0
 800d298:	dc4c      	bgt.n	800d334 <svd_u3DvUgOe+0xaac>
 800d29a:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800d29e:	f04f 0200 	mov.w	r2, #0
 800d2a2:	f04f 0300 	mov.w	r3, #0
 800d2a6:	f7f3 fc01 	bl	8000aac <__aeabi_dcmpeq>
 800d2aa:	4603      	mov	r3, r0
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d141      	bne.n	800d334 <svd_u3DvUgOe+0xaac>
      for (d = 2; d < 4; d++) {
 800d2b0:	2302      	movs	r3, #2
 800d2b2:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 800d2b6:	e039      	b.n	800d32c <svd_u3DvUgOe+0xaa4>
 800d2b8:	3ff00000 	.word	0x3ff00000
        qjj = (d - 1) * 3 + 2;
 800d2bc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800d2c0:	1e5a      	subs	r2, r3, #1
 800d2c2:	4613      	mov	r3, r2
 800d2c4:	005b      	lsls	r3, r3, #1
 800d2c6:	4413      	add	r3, r2
 800d2c8:	3302      	adds	r3, #2
 800d2ca:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
        xaxpy_guu0hJif(2, -(xdotc_mznw4aLl(2, V, 2, V, qjj) / V[1]), 2, V, qjj);
 800d2ce:	f507 7280 	add.w	r2, r7, #256	; 0x100
 800d2d2:	f507 7180 	add.w	r1, r7, #256	; 0x100
 800d2d6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800d2da:	9300      	str	r3, [sp, #0]
 800d2dc:	6813      	ldr	r3, [r2, #0]
 800d2de:	2202      	movs	r2, #2
 800d2e0:	6809      	ldr	r1, [r1, #0]
 800d2e2:	2002      	movs	r0, #2
 800d2e4:	f001 f9eb 	bl	800e6be <xdotc_mznw4aLl>
 800d2e8:	ec51 0b10 	vmov	r0, r1, d0
 800d2ec:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	3308      	adds	r3, #8
 800d2f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2f8:	f7f3 fa9a 	bl	8000830 <__aeabi_ddiv>
 800d2fc:	4602      	mov	r2, r0
 800d2fe:	460b      	mov	r3, r1
 800d300:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 800d304:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800d308:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800d30c:	f507 7280 	add.w	r2, r7, #256	; 0x100
 800d310:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800d314:	6812      	ldr	r2, [r2, #0]
 800d316:	2102      	movs	r1, #2
 800d318:	ed97 0b28 	vldr	d0, [r7, #160]	; 0xa0
 800d31c:	2002      	movs	r0, #2
 800d31e:	f001 f97a 	bl	800e616 <xaxpy_guu0hJif>
      for (d = 2; d < 4; d++) {
 800d322:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800d326:	3301      	adds	r3, #1
 800d328:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 800d32c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800d330:	2b03      	cmp	r3, #3
 800d332:	ddc3      	ble.n	800d2bc <svd_u3DvUgOe+0xa34>
      }
    }

    V[3 * qq] = 0.0;
 800d334:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 800d338:	4613      	mov	r3, r2
 800d33a:	005b      	lsls	r3, r3, #1
 800d33c:	4413      	add	r3, r2
 800d33e:	00db      	lsls	r3, r3, #3
 800d340:	461a      	mov	r2, r3
 800d342:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	1899      	adds	r1, r3, r2
 800d34a:	f04f 0200 	mov.w	r2, #0
 800d34e:	f04f 0300 	mov.w	r3, #0
 800d352:	e9c1 2300 	strd	r2, r3, [r1]
    V[3 * qq + 1] = 0.0;
 800d356:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 800d35a:	4613      	mov	r3, r2
 800d35c:	005b      	lsls	r3, r3, #1
 800d35e:	4413      	add	r3, r2
 800d360:	00db      	lsls	r3, r3, #3
 800d362:	f103 0208 	add.w	r2, r3, #8
 800d366:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	1899      	adds	r1, r3, r2
 800d36e:	f04f 0200 	mov.w	r2, #0
 800d372:	f04f 0300 	mov.w	r3, #0
 800d376:	e9c1 2300 	strd	r2, r3, [r1]
    V[3 * qq + 2] = 0.0;
 800d37a:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 800d37e:	4613      	mov	r3, r2
 800d380:	005b      	lsls	r3, r3, #1
 800d382:	4413      	add	r3, r2
 800d384:	00db      	lsls	r3, r3, #3
 800d386:	f103 0210 	add.w	r2, r3, #16
 800d38a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	1899      	adds	r1, r3, r2
 800d392:	f04f 0200 	mov.w	r2, #0
 800d396:	f04f 0300 	mov.w	r3, #0
 800d39a:	e9c1 2300 	strd	r2, r3, [r1]
    V[qq + 3 * qq] = 1.0;
 800d39e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d3a2:	015a      	lsls	r2, r3, #5
 800d3a4:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	1899      	adds	r1, r3, r2
 800d3ac:	f04f 0200 	mov.w	r2, #0
 800d3b0:	4bbd      	ldr	r3, [pc, #756]	; (800d6a8 <svd_u3DvUgOe+0xe20>)
 800d3b2:	e9c1 2300 	strd	r2, r3, [r1]
  for (qq = 2; qq >= 0; qq--) {
 800d3b6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d3ba:	3b01      	subs	r3, #1
 800d3bc:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800d3c0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	f6bf af64 	bge.w	800d292 <svd_u3DvUgOe+0xa0a>
  }

  ztest = e[0];
 800d3ca:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800d3ce:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
  if (b_s[0] != 0.0) {
 800d3d2:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	; 0x160
 800d3d6:	f04f 0200 	mov.w	r2, #0
 800d3da:	f04f 0300 	mov.w	r3, #0
 800d3de:	f7f3 fb65 	bl	8000aac <__aeabi_dcmpeq>
 800d3e2:	4603      	mov	r3, r0
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d12a      	bne.n	800d43e <svd_u3DvUgOe+0xbb6>
    rt = fabs(b_s[0]);
 800d3e8:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 800d3ec:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 800d3f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d3f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d3f8:	ed97 7b26 	vldr	d7, [r7, #152]	; 0x98
 800d3fc:	ed87 7b4a 	vstr	d7, [r7, #296]	; 0x128
    nrm = b_s[0] / rt;
 800d400:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	; 0x160
 800d404:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800d408:	f7f3 fa12 	bl	8000830 <__aeabi_ddiv>
 800d40c:	4602      	mov	r2, r0
 800d40e:	460b      	mov	r3, r1
 800d410:	e9c7 2372 	strd	r2, r3, [r7, #456]	; 0x1c8
    b_s[0] = rt;
 800d414:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800d418:	e9c7 2358 	strd	r2, r3, [r7, #352]	; 0x160
    ztest = e[0] / nrm;
 800d41c:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800d420:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 800d424:	f7f3 fa04 	bl	8000830 <__aeabi_ddiv>
 800d428:	4602      	mov	r2, r0
 800d42a:	460b      	mov	r3, r1
 800d42c:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
    xscal_eaAxXsvQ(nrm, U, 1);
 800d430:	2101      	movs	r1, #1
 800d432:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 800d436:	ed97 0b72 	vldr	d0, [r7, #456]	; 0x1c8
 800d43a:	f002 f989 	bl	800f750 <xscal_eaAxXsvQ>
  }

  if (ztest != 0.0) {
 800d43e:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 800d442:	f04f 0200 	mov.w	r2, #0
 800d446:	f04f 0300 	mov.w	r3, #0
 800d44a:	f7f3 fb2f 	bl	8000aac <__aeabi_dcmpeq>
 800d44e:	4603      	mov	r3, r0
 800d450:	2b00      	cmp	r3, #0
 800d452:	d12b      	bne.n	800d4ac <svd_u3DvUgOe+0xc24>
    rt = fabs(ztest);
 800d454:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800d458:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800d45c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d460:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d464:	ed97 7b24 	vldr	d7, [r7, #144]	; 0x90
 800d468:	ed87 7b4a 	vstr	d7, [r7, #296]	; 0x128
    nrm = rt / ztest;
 800d46c:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800d470:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800d474:	f7f3 f9dc 	bl	8000830 <__aeabi_ddiv>
 800d478:	4602      	mov	r2, r0
 800d47a:	460b      	mov	r3, r1
 800d47c:	e9c7 2372 	strd	r2, r3, [r7, #456]	; 0x1c8
    ztest = rt;
 800d480:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800d484:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
    b_s[1] *= nrm;
 800d488:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	; 0x168
 800d48c:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 800d490:	f7f3 f8a4 	bl	80005dc <__aeabi_dmul>
 800d494:	4602      	mov	r2, r0
 800d496:	460b      	mov	r3, r1
 800d498:	e9c7 235a 	strd	r2, r3, [r7, #360]	; 0x168
    xscal_eaAxXsvQ(nrm, V, 4);
 800d49c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800d4a0:	2104      	movs	r1, #4
 800d4a2:	6818      	ldr	r0, [r3, #0]
 800d4a4:	ed97 0b72 	vldr	d0, [r7, #456]	; 0x1c8
 800d4a8:	f002 f952 	bl	800f750 <xscal_eaAxXsvQ>
  }

  e[0] = ztest;
 800d4ac:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800d4b0:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
  ztest = b_A[7];
 800d4b4:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	; 0x1b0
 800d4b8:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
  if (b_s[1] != 0.0) {
 800d4bc:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	; 0x168
 800d4c0:	f04f 0200 	mov.w	r2, #0
 800d4c4:	f04f 0300 	mov.w	r3, #0
 800d4c8:	f7f3 faf0 	bl	8000aac <__aeabi_dcmpeq>
 800d4cc:	4603      	mov	r3, r0
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d12a      	bne.n	800d528 <svd_u3DvUgOe+0xca0>
    rt = fabs(b_s[1]);
 800d4d2:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 800d4d6:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800d4da:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d4de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800d4e2:	ed97 7b22 	vldr	d7, [r7, #136]	; 0x88
 800d4e6:	ed87 7b4a 	vstr	d7, [r7, #296]	; 0x128
    nrm = b_s[1] / rt;
 800d4ea:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	; 0x168
 800d4ee:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800d4f2:	f7f3 f99d 	bl	8000830 <__aeabi_ddiv>
 800d4f6:	4602      	mov	r2, r0
 800d4f8:	460b      	mov	r3, r1
 800d4fa:	e9c7 2372 	strd	r2, r3, [r7, #456]	; 0x1c8
    b_s[1] = rt;
 800d4fe:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800d502:	e9c7 235a 	strd	r2, r3, [r7, #360]	; 0x168
    ztest = b_A[7] / nrm;
 800d506:	e9d7 016c 	ldrd	r0, r1, [r7, #432]	; 0x1b0
 800d50a:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 800d50e:	f7f3 f98f 	bl	8000830 <__aeabi_ddiv>
 800d512:	4602      	mov	r2, r0
 800d514:	460b      	mov	r3, r1
 800d516:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
    xscal_eaAxXsvQ(nrm, U, 4);
 800d51a:	2104      	movs	r1, #4
 800d51c:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 800d520:	ed97 0b72 	vldr	d0, [r7, #456]	; 0x1c8
 800d524:	f002 f914 	bl	800f750 <xscal_eaAxXsvQ>
  }

  if (ztest != 0.0) {
 800d528:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 800d52c:	f04f 0200 	mov.w	r2, #0
 800d530:	f04f 0300 	mov.w	r3, #0
 800d534:	f7f3 faba 	bl	8000aac <__aeabi_dcmpeq>
 800d538:	4603      	mov	r3, r0
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d12b      	bne.n	800d596 <svd_u3DvUgOe+0xd0e>
    rt = fabs(ztest);
 800d53e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800d542:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d546:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d54a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d54e:	ed97 7b20 	vldr	d7, [r7, #128]	; 0x80
 800d552:	ed87 7b4a 	vstr	d7, [r7, #296]	; 0x128
    nrm = rt / ztest;
 800d556:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800d55a:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800d55e:	f7f3 f967 	bl	8000830 <__aeabi_ddiv>
 800d562:	4602      	mov	r2, r0
 800d564:	460b      	mov	r3, r1
 800d566:	e9c7 2372 	strd	r2, r3, [r7, #456]	; 0x1c8
    ztest = rt;
 800d56a:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800d56e:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
    b_s[2] = b_A[8] * nrm;
 800d572:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 800d576:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 800d57a:	f7f3 f82f 	bl	80005dc <__aeabi_dmul>
 800d57e:	4602      	mov	r2, r0
 800d580:	460b      	mov	r3, r1
 800d582:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170
    xscal_eaAxXsvQ(nrm, V, 7);
 800d586:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800d58a:	2107      	movs	r1, #7
 800d58c:	6818      	ldr	r0, [r3, #0]
 800d58e:	ed97 0b72 	vldr	d0, [r7, #456]	; 0x1c8
 800d592:	f002 f8dd 	bl	800f750 <xscal_eaAxXsvQ>
  }

  e[1] = ztest;
 800d596:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800d59a:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
  if (b_s[2] != 0.0) {
 800d59e:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 800d5a2:	f04f 0200 	mov.w	r2, #0
 800d5a6:	f04f 0300 	mov.w	r3, #0
 800d5aa:	f7f3 fa7f 	bl	8000aac <__aeabi_dcmpeq>
 800d5ae:	4603      	mov	r3, r0
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d11e      	bne.n	800d5f2 <svd_u3DvUgOe+0xd6a>
    rt = fabs(b_s[2]);
 800d5b4:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800d5b8:	67ba      	str	r2, [r7, #120]	; 0x78
 800d5ba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d5be:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d5c0:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 800d5c4:	ed87 7b4a 	vstr	d7, [r7, #296]	; 0x128
    nrm = b_s[2] / rt;
 800d5c8:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 800d5cc:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800d5d0:	f7f3 f92e 	bl	8000830 <__aeabi_ddiv>
 800d5d4:	4602      	mov	r2, r0
 800d5d6:	460b      	mov	r3, r1
 800d5d8:	e9c7 2372 	strd	r2, r3, [r7, #456]	; 0x1c8
    b_s[2] = rt;
 800d5dc:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800d5e0:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170
    xscal_eaAxXsvQ(nrm, U, 7);
 800d5e4:	2107      	movs	r1, #7
 800d5e6:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 800d5ea:	ed97 0b72 	vldr	d0, [r7, #456]	; 0x1c8
 800d5ee:	f002 f8af 	bl	800f750 <xscal_eaAxXsvQ>
  }

  e[2] = 0.0;
 800d5f2:	f04f 0200 	mov.w	r2, #0
 800d5f6:	f04f 0300 	mov.w	r3, #0
 800d5fa:	e9c7 2356 	strd	r2, r3, [r7, #344]	; 0x158
  qq = 0;
 800d5fe:	2300      	movs	r3, #0
 800d600:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  nrm = fmax(fmax(fmax(b_s[0], e[0]), fmax(b_s[1], ztest)), fmax(b_s[2], 0.0));
 800d604:	ed97 7b58 	vldr	d7, [r7, #352]	; 0x160
 800d608:	ed97 6b52 	vldr	d6, [r7, #328]	; 0x148
 800d60c:	eeb0 1a46 	vmov.f32	s2, s12
 800d610:	eef0 1a66 	vmov.f32	s3, s13
 800d614:	eeb0 0a47 	vmov.f32	s0, s14
 800d618:	eef0 0a67 	vmov.f32	s1, s15
 800d61c:	f00c fc8a 	bl	8019f34 <fmax>
 800d620:	eeb0 8a40 	vmov.f32	s16, s0
 800d624:	eef0 8a60 	vmov.f32	s17, s1
 800d628:	ed97 7b5a 	vldr	d7, [r7, #360]	; 0x168
 800d62c:	ed97 6b44 	vldr	d6, [r7, #272]	; 0x110
 800d630:	eeb0 1a46 	vmov.f32	s2, s12
 800d634:	eef0 1a66 	vmov.f32	s3, s13
 800d638:	eeb0 0a47 	vmov.f32	s0, s14
 800d63c:	eef0 0a67 	vmov.f32	s1, s15
 800d640:	f00c fc78 	bl	8019f34 <fmax>
 800d644:	eeb0 7a40 	vmov.f32	s14, s0
 800d648:	eef0 7a60 	vmov.f32	s15, s1
 800d64c:	eeb0 1a47 	vmov.f32	s2, s14
 800d650:	eef0 1a67 	vmov.f32	s3, s15
 800d654:	eeb0 0a48 	vmov.f32	s0, s16
 800d658:	eef0 0a68 	vmov.f32	s1, s17
 800d65c:	f00c fc6a 	bl	8019f34 <fmax>
 800d660:	eeb0 8a40 	vmov.f32	s16, s0
 800d664:	eef0 8a60 	vmov.f32	s17, s1
 800d668:	ed97 7b5c 	vldr	d7, [r7, #368]	; 0x170
 800d66c:	ed9f 1b0c 	vldr	d1, [pc, #48]	; 800d6a0 <svd_u3DvUgOe+0xe18>
 800d670:	eeb0 0a47 	vmov.f32	s0, s14
 800d674:	eef0 0a67 	vmov.f32	s1, s15
 800d678:	f00c fc5c 	bl	8019f34 <fmax>
 800d67c:	eeb0 7a40 	vmov.f32	s14, s0
 800d680:	eef0 7a60 	vmov.f32	s15, s1
 800d684:	eeb0 1a47 	vmov.f32	s2, s14
 800d688:	eef0 1a67 	vmov.f32	s3, s15
 800d68c:	eeb0 0a48 	vmov.f32	s0, s16
 800d690:	eef0 0a68 	vmov.f32	s1, s17
 800d694:	f00c fc4e 	bl	8019f34 <fmax>
 800d698:	ed87 0b72 	vstr	d0, [r7, #456]	; 0x1c8
  while ((m + 2 > 0) && (qq < 75)) {
 800d69c:	f000 be8a 	b.w	800e3b4 <svd_u3DvUgOe+0x1b2c>
	...
 800d6a8:	3ff00000 	.word	0x3ff00000
    kase = m + 1;
 800d6ac:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800d6b0:	3301      	adds	r3, #1
 800d6b2:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
    int32_T exitg1;
    do {
      exitg1 = 0;
 800d6b6:	2300      	movs	r3, #0
 800d6b8:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
      d = kase;
 800d6bc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800d6c0:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
      if (kase == 0) {
 800d6c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d103      	bne.n	800d6d4 <svd_u3DvUgOe+0xe4c>
        exitg1 = 1;
 800d6cc:	2301      	movs	r3, #1
 800d6ce:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800d6d2:	e092      	b.n	800d7fa <svd_u3DvUgOe+0xf72>
      } else {
        rt = fabs(e[kase - 1]);
 800d6d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800d6d8:	3b01      	subs	r3, #1
 800d6da:	00db      	lsls	r3, r3, #3
 800d6dc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d6e0:	4413      	add	r3, r2
 800d6e2:	3bb8      	subs	r3, #184	; 0xb8
 800d6e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6e8:	673a      	str	r2, [r7, #112]	; 0x70
 800d6ea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d6ee:	677b      	str	r3, [r7, #116]	; 0x74
 800d6f0:	ed97 7b1c 	vldr	d7, [r7, #112]	; 0x70
 800d6f4:	ed87 7b4a 	vstr	d7, [r7, #296]	; 0x128
        if (rt <= (fabs(b_s[kase - 1]) + fabs(b_s[kase])) *
 800d6f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800d6fc:	3b01      	subs	r3, #1
 800d6fe:	00db      	lsls	r3, r3, #3
 800d700:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d704:	4413      	add	r3, r2
 800d706:	3ba0      	subs	r3, #160	; 0xa0
 800d708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d70c:	66ba      	str	r2, [r7, #104]	; 0x68
 800d70e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d712:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d714:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800d718:	00db      	lsls	r3, r3, #3
 800d71a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d71e:	4413      	add	r3, r2
 800d720:	3ba0      	subs	r3, #160	; 0xa0
 800d722:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d726:	663a      	str	r2, [r7, #96]	; 0x60
 800d728:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d72c:	667b      	str	r3, [r7, #100]	; 0x64
 800d72e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800d732:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800d736:	f7f2 fd9b 	bl	8000270 <__adddf3>
 800d73a:	4602      	mov	r2, r0
 800d73c:	460b      	mov	r3, r1
 800d73e:	4610      	mov	r0, r2
 800d740:	4619      	mov	r1, r3
 800d742:	f04f 0200 	mov.w	r2, #0
 800d746:	4bb2      	ldr	r3, [pc, #712]	; (800da10 <svd_u3DvUgOe+0x1188>)
 800d748:	f7f2 ff48 	bl	80005dc <__aeabi_dmul>
 800d74c:	4602      	mov	r2, r0
 800d74e:	460b      	mov	r3, r1
 800d750:	4610      	mov	r0, r2
 800d752:	4619      	mov	r1, r3
 800d754:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800d758:	f7f3 f9c6 	bl	8000ae8 <__aeabi_dcmpge>
 800d75c:	4603      	mov	r3, r0
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d012      	beq.n	800d788 <svd_u3DvUgOe+0xf00>
            2.2204460492503131E-16) {
          e[kase - 1] = 0.0;
 800d762:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800d766:	3b01      	subs	r3, #1
 800d768:	00db      	lsls	r3, r3, #3
 800d76a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d76e:	4413      	add	r3, r2
 800d770:	f1a3 01b8 	sub.w	r1, r3, #184	; 0xb8
 800d774:	f04f 0200 	mov.w	r2, #0
 800d778:	f04f 0300 	mov.w	r3, #0
 800d77c:	e9c1 2300 	strd	r2, r3, [r1]
          exitg1 = 1;
 800d780:	2301      	movs	r3, #1
 800d782:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800d786:	e038      	b.n	800d7fa <svd_u3DvUgOe+0xf72>
        } else if ((rt <= 1.0020841800044864E-292) || ((qq > 20) && (rt <=
 800d788:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800d78c:	f04f 0200 	mov.w	r2, #0
 800d790:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800d794:	f7f3 f99e 	bl	8000ad4 <__aeabi_dcmple>
 800d798:	4603      	mov	r3, r0
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d115      	bne.n	800d7ca <svd_u3DvUgOe+0xf42>
 800d79e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d7a2:	2b14      	cmp	r3, #20
 800d7a4:	dd24      	ble.n	800d7f0 <svd_u3DvUgOe+0xf68>
                     2.2204460492503131E-16 * nrm))) {
 800d7a6:	f04f 0200 	mov.w	r2, #0
 800d7aa:	4b99      	ldr	r3, [pc, #612]	; (800da10 <svd_u3DvUgOe+0x1188>)
 800d7ac:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	; 0x1c8
 800d7b0:	f7f2 ff14 	bl	80005dc <__aeabi_dmul>
 800d7b4:	4602      	mov	r2, r0
 800d7b6:	460b      	mov	r3, r1
 800d7b8:	4610      	mov	r0, r2
 800d7ba:	4619      	mov	r1, r3
        } else if ((rt <= 1.0020841800044864E-292) || ((qq > 20) && (rt <=
 800d7bc:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800d7c0:	f7f3 f992 	bl	8000ae8 <__aeabi_dcmpge>
 800d7c4:	4603      	mov	r3, r0
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d012      	beq.n	800d7f0 <svd_u3DvUgOe+0xf68>
          e[kase - 1] = 0.0;
 800d7ca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800d7ce:	3b01      	subs	r3, #1
 800d7d0:	00db      	lsls	r3, r3, #3
 800d7d2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d7d6:	4413      	add	r3, r2
 800d7d8:	f1a3 01b8 	sub.w	r1, r3, #184	; 0xb8
 800d7dc:	f04f 0200 	mov.w	r2, #0
 800d7e0:	f04f 0300 	mov.w	r3, #0
 800d7e4:	e9c1 2300 	strd	r2, r3, [r1]
          exitg1 = 1;
 800d7e8:	2301      	movs	r3, #1
 800d7ea:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800d7ee:	e004      	b.n	800d7fa <svd_u3DvUgOe+0xf72>
        } else {
          kase--;
 800d7f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800d7f4:	3b01      	subs	r3, #1
 800d7f6:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        }
      }
    } while (exitg1 == 0);
 800d7fa:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	f43f af59 	beq.w	800d6b6 <svd_u3DvUgOe+0xe2e>

    if (m + 1 == kase) {
 800d804:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800d808:	1c5a      	adds	r2, r3, #1
 800d80a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800d80e:	4293      	cmp	r3, r2
 800d810:	d103      	bne.n	800d81a <svd_u3DvUgOe+0xf92>
      kase = 4;
 800d812:	2304      	movs	r3, #4
 800d814:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 800d818:	e0c7      	b.n	800d9aa <svd_u3DvUgOe+0x1122>
    } else {
      int32_T k_ii;
      boolean_T exitg2;
      qjj = m + 2;
 800d81a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800d81e:	3302      	adds	r3, #2
 800d820:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
      k_ii = m + 2;
 800d824:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800d828:	3302      	adds	r3, #2
 800d82a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
      exitg2 = false;
 800d82e:	2300      	movs	r3, #0
 800d830:	f887 31df 	strb.w	r3, [r7, #479]	; 0x1df
      while ((!exitg2) && (k_ii >= kase)) {
 800d834:	e092      	b.n	800d95c <svd_u3DvUgOe+0x10d4>
        qjj = k_ii;
 800d836:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800d83a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
        if (k_ii == kase) {
 800d83e:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 800d842:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800d846:	429a      	cmp	r2, r3
 800d848:	d103      	bne.n	800d852 <svd_u3DvUgOe+0xfca>
          exitg2 = true;
 800d84a:	2301      	movs	r3, #1
 800d84c:	f887 31df 	strb.w	r3, [r7, #479]	; 0x1df
 800d850:	e084      	b.n	800d95c <svd_u3DvUgOe+0x10d4>
        } else {
          rt = 0.0;
 800d852:	f04f 0200 	mov.w	r2, #0
 800d856:	f04f 0300 	mov.w	r3, #0
 800d85a:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
          if (k_ii < m + 2) {
 800d85e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800d862:	1c5a      	adds	r2, r3, #1
 800d864:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800d868:	4293      	cmp	r3, r2
 800d86a:	dc11      	bgt.n	800d890 <svd_u3DvUgOe+0x1008>
            rt = fabs(e[k_ii - 1]);
 800d86c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800d870:	3b01      	subs	r3, #1
 800d872:	00db      	lsls	r3, r3, #3
 800d874:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d878:	4413      	add	r3, r2
 800d87a:	3bb8      	subs	r3, #184	; 0xb8
 800d87c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d880:	65ba      	str	r2, [r7, #88]	; 0x58
 800d882:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d886:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d888:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 800d88c:	ed87 7b4a 	vstr	d7, [r7, #296]	; 0x128
          }

          if (k_ii > kase + 1) {
 800d890:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800d894:	1c5a      	adds	r2, r3, #1
 800d896:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800d89a:	4293      	cmp	r3, r2
 800d89c:	dd17      	ble.n	800d8ce <svd_u3DvUgOe+0x1046>
            rt += fabs(e[k_ii - 2]);
 800d89e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800d8a2:	3b02      	subs	r3, #2
 800d8a4:	00db      	lsls	r3, r3, #3
 800d8a6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d8aa:	4413      	add	r3, r2
 800d8ac:	3bb8      	subs	r3, #184	; 0xb8
 800d8ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8b2:	653a      	str	r2, [r7, #80]	; 0x50
 800d8b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d8b8:	657b      	str	r3, [r7, #84]	; 0x54
 800d8ba:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800d8be:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800d8c2:	f7f2 fcd5 	bl	8000270 <__adddf3>
 800d8c6:	4602      	mov	r2, r0
 800d8c8:	460b      	mov	r3, r1
 800d8ca:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
          }

          ztest = fabs(b_s[k_ii - 1]);
 800d8ce:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800d8d2:	3b01      	subs	r3, #1
 800d8d4:	00db      	lsls	r3, r3, #3
 800d8d6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d8da:	4413      	add	r3, r2
 800d8dc:	3ba0      	subs	r3, #160	; 0xa0
 800d8de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8e2:	64ba      	str	r2, [r7, #72]	; 0x48
 800d8e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d8e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d8ea:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 800d8ee:	ed87 7b44 	vstr	d7, [r7, #272]	; 0x110
          if ((ztest <= 2.2204460492503131E-16 * rt) || (ztest <=
 800d8f2:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800d8f6:	f04f 0200 	mov.w	r2, #0
 800d8fa:	4b45      	ldr	r3, [pc, #276]	; (800da10 <svd_u3DvUgOe+0x1188>)
 800d8fc:	f7f2 fe6e 	bl	80005dc <__aeabi_dmul>
 800d900:	4602      	mov	r2, r0
 800d902:	460b      	mov	r3, r1
 800d904:	4610      	mov	r0, r2
 800d906:	4619      	mov	r1, r3
 800d908:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800d90c:	f7f3 f8ec 	bl	8000ae8 <__aeabi_dcmpge>
 800d910:	4603      	mov	r3, r0
 800d912:	2b00      	cmp	r3, #0
 800d914:	d10a      	bne.n	800d92c <svd_u3DvUgOe+0x10a4>
 800d916:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 800d91a:	f04f 0200 	mov.w	r2, #0
 800d91e:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800d922:	f7f3 f8d7 	bl	8000ad4 <__aeabi_dcmple>
 800d926:	4603      	mov	r3, r0
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d012      	beq.n	800d952 <svd_u3DvUgOe+0x10ca>
               1.0020841800044864E-292)) {
            b_s[k_ii - 1] = 0.0;
 800d92c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800d930:	3b01      	subs	r3, #1
 800d932:	00db      	lsls	r3, r3, #3
 800d934:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d938:	4413      	add	r3, r2
 800d93a:	f1a3 01a0 	sub.w	r1, r3, #160	; 0xa0
 800d93e:	f04f 0200 	mov.w	r2, #0
 800d942:	f04f 0300 	mov.w	r3, #0
 800d946:	e9c1 2300 	strd	r2, r3, [r1]
            exitg2 = true;
 800d94a:	2301      	movs	r3, #1
 800d94c:	f887 31df 	strb.w	r3, [r7, #479]	; 0x1df
 800d950:	e004      	b.n	800d95c <svd_u3DvUgOe+0x10d4>
          } else {
            k_ii--;
 800d952:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800d956:	3b01      	subs	r3, #1
 800d958:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
      while ((!exitg2) && (k_ii >= kase)) {
 800d95c:	f897 31df 	ldrb.w	r3, [r7, #479]	; 0x1df
 800d960:	2b00      	cmp	r3, #0
 800d962:	d106      	bne.n	800d972 <svd_u3DvUgOe+0x10ea>
 800d964:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 800d968:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800d96c:	429a      	cmp	r2, r3
 800d96e:	f6bf af62 	bge.w	800d836 <svd_u3DvUgOe+0xfae>
          }
        }
      }

      if (qjj == kase) {
 800d972:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 800d976:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800d97a:	429a      	cmp	r2, r3
 800d97c:	d103      	bne.n	800d986 <svd_u3DvUgOe+0x10fe>
        kase = 3;
 800d97e:	2303      	movs	r3, #3
 800d980:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 800d984:	e011      	b.n	800d9aa <svd_u3DvUgOe+0x1122>
      } else if (m + 2 == qjj) {
 800d986:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800d98a:	1c9a      	adds	r2, r3, #2
 800d98c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800d990:	4293      	cmp	r3, r2
 800d992:	d103      	bne.n	800d99c <svd_u3DvUgOe+0x1114>
        kase = 1;
 800d994:	2301      	movs	r3, #1
 800d996:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 800d99a:	e006      	b.n	800d9aa <svd_u3DvUgOe+0x1122>
      } else {
        kase = 2;
 800d99c:	2302      	movs	r3, #2
 800d99e:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        d = qjj;
 800d9a2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800d9a6:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
      }
    }

    switch (kase) {
 800d9aa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800d9ae:	2b03      	cmp	r3, #3
 800d9b0:	f000 8113 	beq.w	800dbda <svd_u3DvUgOe+0x1352>
 800d9b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800d9b8:	2b03      	cmp	r3, #3
 800d9ba:	f300 8443 	bgt.w	800e244 <svd_u3DvUgOe+0x19bc>
 800d9be:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800d9c2:	2b01      	cmp	r3, #1
 800d9c4:	d005      	beq.n	800d9d2 <svd_u3DvUgOe+0x114a>
 800d9c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800d9ca:	2b02      	cmp	r3, #2
 800d9cc:	d07b      	beq.n	800dac6 <svd_u3DvUgOe+0x123e>
 800d9ce:	f000 bc39 	b.w	800e244 <svd_u3DvUgOe+0x19bc>
     case 1:
      rt = e[m];
 800d9d2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800d9d6:	00db      	lsls	r3, r3, #3
 800d9d8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d9dc:	4413      	add	r3, r2
 800d9de:	3bb8      	subs	r3, #184	; 0xb8
 800d9e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9e4:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
      e[m] = 0.0;
 800d9e8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800d9ec:	00db      	lsls	r3, r3, #3
 800d9ee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d9f2:	4413      	add	r3, r2
 800d9f4:	f1a3 01b8 	sub.w	r1, r3, #184	; 0xb8
 800d9f8:	f04f 0200 	mov.w	r2, #0
 800d9fc:	f04f 0300 	mov.w	r3, #0
 800da00:	e9c1 2300 	strd	r2, r3, [r1]
      for (qjj = m; qjj + 1 >= d + 1; qjj--) {
 800da04:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800da08:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800da0c:	e053      	b.n	800dab6 <svd_u3DvUgOe+0x122e>
 800da0e:	bf00      	nop
 800da10:	3cb00000 	.word	0x3cb00000
        xrotg_XzIjz1eG(&b_s[qjj], &rt, &ztest, &sqds);
 800da14:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 800da18:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800da1c:	00db      	lsls	r3, r3, #3
 800da1e:	18d0      	adds	r0, r2, r3
 800da20:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800da24:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800da28:	f507 7194 	add.w	r1, r7, #296	; 0x128
 800da2c:	f001 fd2a 	bl	800f484 <xrotg_XzIjz1eG>
        if (qjj + 1 > d + 1) {
 800da30:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 800da34:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800da38:	429a      	cmp	r2, r3
 800da3a:	dd19      	ble.n	800da70 <svd_u3DvUgOe+0x11e8>
          rt = -sqds * e[0];
 800da3c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800da40:	643a      	str	r2, [r7, #64]	; 0x40
 800da42:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800da46:	647b      	str	r3, [r7, #68]	; 0x44
 800da48:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800da4c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800da50:	f7f2 fdc4 	bl	80005dc <__aeabi_dmul>
 800da54:	4602      	mov	r2, r0
 800da56:	460b      	mov	r3, r1
 800da58:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
          e[0] *= ztest;
 800da5c:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800da60:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800da64:	f7f2 fdba 	bl	80005dc <__aeabi_dmul>
 800da68:	4602      	mov	r2, r0
 800da6a:	460b      	mov	r3, r1
 800da6c:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
        }

        xrot_i7f01JoJ(V, 3 * qjj + 1, 3 * (m + 1) + 1, ztest, sqds);
 800da70:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 800da74:	4613      	mov	r3, r2
 800da76:	005b      	lsls	r3, r3, #1
 800da78:	4413      	add	r3, r2
 800da7a:	1c59      	adds	r1, r3, #1
 800da7c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800da80:	1c5a      	adds	r2, r3, #1
 800da82:	4613      	mov	r3, r2
 800da84:	005b      	lsls	r3, r3, #1
 800da86:	4413      	add	r3, r2
 800da88:	1c5a      	adds	r2, r3, #1
 800da8a:	ed97 7b44 	vldr	d7, [r7, #272]	; 0x110
 800da8e:	ed97 6b46 	vldr	d6, [r7, #280]	; 0x118
 800da92:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800da96:	eeb0 1a46 	vmov.f32	s2, s12
 800da9a:	eef0 1a66 	vmov.f32	s3, s13
 800da9e:	eeb0 0a47 	vmov.f32	s0, s14
 800daa2:	eef0 0a67 	vmov.f32	s1, s15
 800daa6:	6818      	ldr	r0, [r3, #0]
 800daa8:	f001 fbd0 	bl	800f24c <xrot_i7f01JoJ>
      for (qjj = m; qjj + 1 >= d + 1; qjj--) {
 800daac:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800dab0:	3b01      	subs	r3, #1
 800dab2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800dab6:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 800daba:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800dabe:	429a      	cmp	r2, r3
 800dac0:	daa8      	bge.n	800da14 <svd_u3DvUgOe+0x118c>
      }
      break;
 800dac2:	f000 bc77 	b.w	800e3b4 <svd_u3DvUgOe+0x1b2c>

     case 2:
      rt = e[d - 1];
 800dac6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800daca:	3b01      	subs	r3, #1
 800dacc:	00db      	lsls	r3, r3, #3
 800dace:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800dad2:	4413      	add	r3, r2
 800dad4:	3bb8      	subs	r3, #184	; 0xb8
 800dad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dada:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
      e[d - 1] = 0.0;
 800dade:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800dae2:	3b01      	subs	r3, #1
 800dae4:	00db      	lsls	r3, r3, #3
 800dae6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800daea:	4413      	add	r3, r2
 800daec:	f1a3 01b8 	sub.w	r1, r3, #184	; 0xb8
 800daf0:	f04f 0200 	mov.w	r2, #0
 800daf4:	f04f 0300 	mov.w	r3, #0
 800daf8:	e9c1 2300 	strd	r2, r3, [r1]
      for (qjj = d; qjj < m + 2; qjj++) {
 800dafc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800db00:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800db04:	e061      	b.n	800dbca <svd_u3DvUgOe+0x1342>
        xrotg_XzIjz1eG(&b_s[qjj], &rt, &ztest, &sqds);
 800db06:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 800db0a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800db0e:	00db      	lsls	r3, r3, #3
 800db10:	18d0      	adds	r0, r2, r3
 800db12:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800db16:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800db1a:	f507 7194 	add.w	r1, r7, #296	; 0x128
 800db1e:	f001 fcb1 	bl	800f484 <xrotg_XzIjz1eG>
        rt = -sqds * e[qjj];
 800db22:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800db26:	63ba      	str	r2, [r7, #56]	; 0x38
 800db28:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800db2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800db2e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800db32:	00db      	lsls	r3, r3, #3
 800db34:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800db38:	4413      	add	r3, r2
 800db3a:	3bb8      	subs	r3, #184	; 0xb8
 800db3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db40:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800db44:	f7f2 fd4a 	bl	80005dc <__aeabi_dmul>
 800db48:	4602      	mov	r2, r0
 800db4a:	460b      	mov	r3, r1
 800db4c:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
        e[qjj] *= ztest;
 800db50:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800db54:	00db      	lsls	r3, r3, #3
 800db56:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800db5a:	4413      	add	r3, r2
 800db5c:	3bb8      	subs	r3, #184	; 0xb8
 800db5e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800db62:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800db66:	f7f2 fd39 	bl	80005dc <__aeabi_dmul>
 800db6a:	4602      	mov	r2, r0
 800db6c:	460b      	mov	r3, r1
 800db6e:	4610      	mov	r0, r2
 800db70:	4619      	mov	r1, r3
 800db72:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800db76:	00db      	lsls	r3, r3, #3
 800db78:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800db7c:	4413      	add	r3, r2
 800db7e:	3bb8      	subs	r3, #184	; 0xb8
 800db80:	e9c3 0100 	strd	r0, r1, [r3]
        xrot_i7f01JoJ(U, 3 * qjj + 1, 3 * (d - 1) + 1, ztest, sqds);
 800db84:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 800db88:	4613      	mov	r3, r2
 800db8a:	005b      	lsls	r3, r3, #1
 800db8c:	4413      	add	r3, r2
 800db8e:	1c59      	adds	r1, r3, #1
 800db90:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800db94:	1e5a      	subs	r2, r3, #1
 800db96:	4613      	mov	r3, r2
 800db98:	005b      	lsls	r3, r3, #1
 800db9a:	4413      	add	r3, r2
 800db9c:	3301      	adds	r3, #1
 800db9e:	ed97 7b44 	vldr	d7, [r7, #272]	; 0x110
 800dba2:	ed97 6b46 	vldr	d6, [r7, #280]	; 0x118
 800dba6:	eeb0 1a46 	vmov.f32	s2, s12
 800dbaa:	eef0 1a66 	vmov.f32	s3, s13
 800dbae:	eeb0 0a47 	vmov.f32	s0, s14
 800dbb2:	eef0 0a67 	vmov.f32	s1, s15
 800dbb6:	461a      	mov	r2, r3
 800dbb8:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 800dbbc:	f001 fb46 	bl	800f24c <xrot_i7f01JoJ>
      for (qjj = d; qjj < m + 2; qjj++) {
 800dbc0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800dbc4:	3301      	adds	r3, #1
 800dbc6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800dbca:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800dbce:	1c5a      	adds	r2, r3, #1
 800dbd0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800dbd4:	4293      	cmp	r3, r2
 800dbd6:	dd96      	ble.n	800db06 <svd_u3DvUgOe+0x127e>
      }
      break;
 800dbd8:	e3ec      	b.n	800e3b4 <svd_u3DvUgOe+0x1b2c>

     case 3:
      {
        real_T emm1;
        real_T shift;
        sqds = b_s[m + 1];
 800dbda:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800dbde:	3301      	adds	r3, #1
 800dbe0:	00db      	lsls	r3, r3, #3
 800dbe2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800dbe6:	4413      	add	r3, r2
 800dbe8:	3ba0      	subs	r3, #160	; 0xa0
 800dbea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbee:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
        ztest = fmax(fmax(fmax(fmax(fabs(sqds), fabs(b_s[m])), fabs(e[m])), fabs
 800dbf2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800dbf6:	633a      	str	r2, [r7, #48]	; 0x30
 800dbf8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dbfc:	637b      	str	r3, [r7, #52]	; 0x34
 800dbfe:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800dc02:	00db      	lsls	r3, r3, #3
 800dc04:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800dc08:	4413      	add	r3, r2
 800dc0a:	3ba0      	subs	r3, #160	; 0xa0
 800dc0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc10:	62ba      	str	r2, [r7, #40]	; 0x28
 800dc12:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dc16:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dc18:	ed97 1b0a 	vldr	d1, [r7, #40]	; 0x28
 800dc1c:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 800dc20:	f00c f988 	bl	8019f34 <fmax>
 800dc24:	eeb0 7a40 	vmov.f32	s14, s0
 800dc28:	eef0 7a60 	vmov.f32	s15, s1
 800dc2c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800dc30:	00db      	lsls	r3, r3, #3
 800dc32:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800dc36:	4413      	add	r3, r2
 800dc38:	3bb8      	subs	r3, #184	; 0xb8
 800dc3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc3e:	623a      	str	r2, [r7, #32]
 800dc40:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dc44:	627b      	str	r3, [r7, #36]	; 0x24
 800dc46:	ed97 1b08 	vldr	d1, [r7, #32]
 800dc4a:	eeb0 0a47 	vmov.f32	s0, s14
 800dc4e:	eef0 0a67 	vmov.f32	s1, s15
 800dc52:	f00c f96f 	bl	8019f34 <fmax>
 800dc56:	eeb0 7a40 	vmov.f32	s14, s0
 800dc5a:	eef0 7a60 	vmov.f32	s15, s1
                          (b_s[d])), fabs(e[d]));
 800dc5e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800dc62:	00db      	lsls	r3, r3, #3
 800dc64:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800dc68:	4413      	add	r3, r2
 800dc6a:	3ba0      	subs	r3, #160	; 0xa0
 800dc6c:	e9d3 2300 	ldrd	r2, r3, [r3]
        ztest = fmax(fmax(fmax(fmax(fabs(sqds), fabs(b_s[m])), fabs(e[m])), fabs
 800dc70:	61ba      	str	r2, [r7, #24]
 800dc72:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dc76:	61fb      	str	r3, [r7, #28]
 800dc78:	ed97 1b06 	vldr	d1, [r7, #24]
 800dc7c:	eeb0 0a47 	vmov.f32	s0, s14
 800dc80:	eef0 0a67 	vmov.f32	s1, s15
 800dc84:	f00c f956 	bl	8019f34 <fmax>
 800dc88:	eeb0 7a40 	vmov.f32	s14, s0
 800dc8c:	eef0 7a60 	vmov.f32	s15, s1
                          (b_s[d])), fabs(e[d]));
 800dc90:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800dc94:	00db      	lsls	r3, r3, #3
 800dc96:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800dc9a:	4413      	add	r3, r2
 800dc9c:	3bb8      	subs	r3, #184	; 0xb8
 800dc9e:	e9d3 2300 	ldrd	r2, r3, [r3]
        ztest = fmax(fmax(fmax(fmax(fabs(sqds), fabs(b_s[m])), fabs(e[m])), fabs
 800dca2:	613a      	str	r2, [r7, #16]
 800dca4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dca8:	617b      	str	r3, [r7, #20]
 800dcaa:	ed97 1b04 	vldr	d1, [r7, #16]
 800dcae:	eeb0 0a47 	vmov.f32	s0, s14
 800dcb2:	eef0 0a67 	vmov.f32	s1, s15
 800dcb6:	f00c f93d 	bl	8019f34 <fmax>
 800dcba:	eeb0 7a40 	vmov.f32	s14, s0
 800dcbe:	eef0 7a60 	vmov.f32	s15, s1
 800dcc2:	ed87 7b44 	vstr	d7, [r7, #272]	; 0x110
        rt = sqds / ztest;
 800dcc6:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800dcca:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800dcce:	f7f2 fdaf 	bl	8000830 <__aeabi_ddiv>
 800dcd2:	4602      	mov	r2, r0
 800dcd4:	460b      	mov	r3, r1
 800dcd6:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
        smm1 = b_s[m] / ztest;
 800dcda:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800dcde:	00db      	lsls	r3, r3, #3
 800dce0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800dce4:	4413      	add	r3, r2
 800dce6:	3ba0      	subs	r3, #160	; 0xa0
 800dce8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800dcec:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800dcf0:	f7f2 fd9e 	bl	8000830 <__aeabi_ddiv>
 800dcf4:	4602      	mov	r2, r0
 800dcf6:	460b      	mov	r3, r1
 800dcf8:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
        emm1 = e[m] / ztest;
 800dcfc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800dd00:	00db      	lsls	r3, r3, #3
 800dd02:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800dd06:	4413      	add	r3, r2
 800dd08:	3bb8      	subs	r3, #184	; 0xb8
 800dd0a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800dd0e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800dd12:	f7f2 fd8d 	bl	8000830 <__aeabi_ddiv>
 800dd16:	4602      	mov	r2, r0
 800dd18:	460b      	mov	r3, r1
 800dd1a:	e9c7 2370 	strd	r2, r3, [r7, #448]	; 0x1c0
        sqds = b_s[d] / ztest;
 800dd1e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800dd22:	00db      	lsls	r3, r3, #3
 800dd24:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800dd28:	4413      	add	r3, r2
 800dd2a:	3ba0      	subs	r3, #160	; 0xa0
 800dd2c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800dd30:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800dd34:	f7f2 fd7c 	bl	8000830 <__aeabi_ddiv>
 800dd38:	4602      	mov	r2, r0
 800dd3a:	460b      	mov	r3, r1
 800dd3c:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
        smm1 = ((smm1 + rt) * (smm1 - rt) + emm1 * emm1) / 2.0;
 800dd40:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 800dd44:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800dd48:	f7f2 fa92 	bl	8000270 <__adddf3>
 800dd4c:	4602      	mov	r2, r0
 800dd4e:	460b      	mov	r3, r1
 800dd50:	4614      	mov	r4, r2
 800dd52:	461d      	mov	r5, r3
 800dd54:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 800dd58:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800dd5c:	f7f2 fa86 	bl	800026c <__aeabi_dsub>
 800dd60:	4602      	mov	r2, r0
 800dd62:	460b      	mov	r3, r1
 800dd64:	4620      	mov	r0, r4
 800dd66:	4629      	mov	r1, r5
 800dd68:	f7f2 fc38 	bl	80005dc <__aeabi_dmul>
 800dd6c:	4602      	mov	r2, r0
 800dd6e:	460b      	mov	r3, r1
 800dd70:	4614      	mov	r4, r2
 800dd72:	461d      	mov	r5, r3
 800dd74:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	; 0x1c0
 800dd78:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	; 0x1c0
 800dd7c:	f7f2 fc2e 	bl	80005dc <__aeabi_dmul>
 800dd80:	4602      	mov	r2, r0
 800dd82:	460b      	mov	r3, r1
 800dd84:	4620      	mov	r0, r4
 800dd86:	4629      	mov	r1, r5
 800dd88:	f7f2 fa72 	bl	8000270 <__adddf3>
 800dd8c:	4602      	mov	r2, r0
 800dd8e:	460b      	mov	r3, r1
 800dd90:	4610      	mov	r0, r2
 800dd92:	4619      	mov	r1, r3
 800dd94:	f04f 0200 	mov.w	r2, #0
 800dd98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800dd9c:	f7f2 fd48 	bl	8000830 <__aeabi_ddiv>
 800dda0:	4602      	mov	r2, r0
 800dda2:	460b      	mov	r3, r1
 800dda4:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
        emm1 *= rt;
 800dda8:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800ddac:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	; 0x1c0
 800ddb0:	f7f2 fc14 	bl	80005dc <__aeabi_dmul>
 800ddb4:	4602      	mov	r2, r0
 800ddb6:	460b      	mov	r3, r1
 800ddb8:	e9c7 2370 	strd	r2, r3, [r7, #448]	; 0x1c0
        emm1 *= emm1;
 800ddbc:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	; 0x1c0
 800ddc0:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	; 0x1c0
 800ddc4:	f7f2 fc0a 	bl	80005dc <__aeabi_dmul>
 800ddc8:	4602      	mov	r2, r0
 800ddca:	460b      	mov	r3, r1
 800ddcc:	e9c7 2370 	strd	r2, r3, [r7, #448]	; 0x1c0
        if ((smm1 != 0.0) || (emm1 != 0.0)) {
 800ddd0:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 800ddd4:	f04f 0200 	mov.w	r2, #0
 800ddd8:	f04f 0300 	mov.w	r3, #0
 800dddc:	f7f2 fe66 	bl	8000aac <__aeabi_dcmpeq>
 800dde0:	4603      	mov	r3, r0
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d00a      	beq.n	800ddfc <svd_u3DvUgOe+0x1574>
 800dde6:	f04f 0200 	mov.w	r2, #0
 800ddea:	f04f 0300 	mov.w	r3, #0
 800ddee:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	; 0x1c0
 800ddf2:	f7f2 fe5b 	bl	8000aac <__aeabi_dcmpeq>
 800ddf6:	4603      	mov	r3, r0
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d13f      	bne.n	800de7c <svd_u3DvUgOe+0x15f4>
          shift = sqrt(smm1 * smm1 + emm1);
 800ddfc:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 800de00:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800de04:	f7f2 fbea 	bl	80005dc <__aeabi_dmul>
 800de08:	4602      	mov	r2, r0
 800de0a:	460b      	mov	r3, r1
 800de0c:	4610      	mov	r0, r2
 800de0e:	4619      	mov	r1, r3
 800de10:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	; 0x1c0
 800de14:	f7f2 fa2c 	bl	8000270 <__adddf3>
 800de18:	4602      	mov	r2, r0
 800de1a:	460b      	mov	r3, r1
 800de1c:	ec43 2b17 	vmov	d7, r2, r3
 800de20:	eeb0 0a47 	vmov.f32	s0, s14
 800de24:	eef0 0a67 	vmov.f32	s1, s15
 800de28:	f00c f96e 	bl	801a108 <sqrt>
 800de2c:	ed87 0b74 	vstr	d0, [r7, #464]	; 0x1d0
          if (smm1 < 0.0) {
 800de30:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 800de34:	f04f 0200 	mov.w	r2, #0
 800de38:	f04f 0300 	mov.w	r3, #0
 800de3c:	f7f2 fe40 	bl	8000ac0 <__aeabi_dcmplt>
 800de40:	4603      	mov	r3, r0
 800de42:	2b00      	cmp	r3, #0
 800de44:	d009      	beq.n	800de5a <svd_u3DvUgOe+0x15d2>
            shift = -shift;
 800de46:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800de4a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 800de4e:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800de52:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800de56:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
          }

          shift = emm1 / (smm1 + shift);
 800de5a:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 800de5e:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	; 0x1d0
 800de62:	f7f2 fa05 	bl	8000270 <__adddf3>
 800de66:	4602      	mov	r2, r0
 800de68:	460b      	mov	r3, r1
 800de6a:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	; 0x1c0
 800de6e:	f7f2 fcdf 	bl	8000830 <__aeabi_ddiv>
 800de72:	4602      	mov	r2, r0
 800de74:	460b      	mov	r3, r1
 800de76:	e9c7 2374 	strd	r2, r3, [r7, #464]	; 0x1d0
 800de7a:	e005      	b.n	800de88 <svd_u3DvUgOe+0x1600>
        } else {
          shift = 0.0;
 800de7c:	f04f 0200 	mov.w	r2, #0
 800de80:	f04f 0300 	mov.w	r3, #0
 800de84:	e9c7 2374 	strd	r2, r3, [r7, #464]	; 0x1d0
        }

        rt = (sqds + rt) * (sqds - rt) + shift;
 800de88:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800de8c:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800de90:	f7f2 f9ee 	bl	8000270 <__adddf3>
 800de94:	4602      	mov	r2, r0
 800de96:	460b      	mov	r3, r1
 800de98:	4614      	mov	r4, r2
 800de9a:	461d      	mov	r5, r3
 800de9c:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800dea0:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800dea4:	f7f2 f9e2 	bl	800026c <__aeabi_dsub>
 800dea8:	4602      	mov	r2, r0
 800deaa:	460b      	mov	r3, r1
 800deac:	4620      	mov	r0, r4
 800deae:	4629      	mov	r1, r5
 800deb0:	f7f2 fb94 	bl	80005dc <__aeabi_dmul>
 800deb4:	4602      	mov	r2, r0
 800deb6:	460b      	mov	r3, r1
 800deb8:	4610      	mov	r0, r2
 800deba:	4619      	mov	r1, r3
 800debc:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	; 0x1d0
 800dec0:	f7f2 f9d6 	bl	8000270 <__adddf3>
 800dec4:	4602      	mov	r2, r0
 800dec6:	460b      	mov	r3, r1
 800dec8:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
        ztest = e[d] / ztest * sqds;
 800decc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800ded0:	00db      	lsls	r3, r3, #3
 800ded2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800ded6:	4413      	add	r3, r2
 800ded8:	3bb8      	subs	r3, #184	; 0xb8
 800deda:	e9d3 0100 	ldrd	r0, r1, [r3]
 800dede:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800dee2:	f7f2 fca5 	bl	8000830 <__aeabi_ddiv>
 800dee6:	4602      	mov	r2, r0
 800dee8:	460b      	mov	r3, r1
 800deea:	4610      	mov	r0, r2
 800deec:	4619      	mov	r1, r3
 800deee:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800def2:	f7f2 fb73 	bl	80005dc <__aeabi_dmul>
 800def6:	4602      	mov	r2, r0
 800def8:	460b      	mov	r3, r1
 800defa:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
        for (qjj = d + 1; qjj <= m + 1; qjj++) {
 800defe:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800df02:	3301      	adds	r3, #1
 800df04:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800df08:	e183      	b.n	800e212 <svd_u3DvUgOe+0x198a>
          xrotg_XzIjz1eG(&rt, &ztest, &sqds, &smm1);
 800df0a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800df0e:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800df12:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800df16:	f507 7094 	add.w	r0, r7, #296	; 0x128
 800df1a:	f001 fab3 	bl	800f484 <xrotg_XzIjz1eG>
          if (qjj > d + 1) {
 800df1e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800df22:	1c5a      	adds	r2, r3, #1
 800df24:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800df28:	4293      	cmp	r3, r2
 800df2a:	dd03      	ble.n	800df34 <svd_u3DvUgOe+0x16ac>
            e[0] = rt;
 800df2c:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800df30:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
          }

          rt = e[qjj - 1];
 800df34:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800df38:	3b01      	subs	r3, #1
 800df3a:	00db      	lsls	r3, r3, #3
 800df3c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800df40:	4413      	add	r3, r2
 800df42:	3bb8      	subs	r3, #184	; 0xb8
 800df44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df48:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
          emm1 = b_s[qjj - 1];
 800df4c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800df50:	3b01      	subs	r3, #1
 800df52:	00db      	lsls	r3, r3, #3
 800df54:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800df58:	4413      	add	r3, r2
 800df5a:	3ba0      	subs	r3, #160	; 0xa0
 800df5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df60:	e9c7 2370 	strd	r2, r3, [r7, #448]	; 0x1c0
          e[qjj - 1] = rt * sqds - emm1 * smm1;
 800df64:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800df68:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800df6c:	f7f2 fb36 	bl	80005dc <__aeabi_dmul>
 800df70:	4602      	mov	r2, r0
 800df72:	460b      	mov	r3, r1
 800df74:	4690      	mov	r8, r2
 800df76:	4699      	mov	r9, r3
 800df78:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 800df7c:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	; 0x1c0
 800df80:	f7f2 fb2c 	bl	80005dc <__aeabi_dmul>
 800df84:	4602      	mov	r2, r0
 800df86:	460b      	mov	r3, r1
 800df88:	4610      	mov	r0, r2
 800df8a:	4619      	mov	r1, r3
 800df8c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800df90:	1e5c      	subs	r4, r3, #1
 800df92:	4602      	mov	r2, r0
 800df94:	460b      	mov	r3, r1
 800df96:	4640      	mov	r0, r8
 800df98:	4649      	mov	r1, r9
 800df9a:	f7f2 f967 	bl	800026c <__aeabi_dsub>
 800df9e:	4602      	mov	r2, r0
 800dfa0:	460b      	mov	r3, r1
 800dfa2:	4610      	mov	r0, r2
 800dfa4:	4619      	mov	r1, r3
 800dfa6:	00e3      	lsls	r3, r4, #3
 800dfa8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800dfac:	4413      	add	r3, r2
 800dfae:	3bb8      	subs	r3, #184	; 0xb8
 800dfb0:	e9c3 0100 	strd	r0, r1, [r3]
          ztest = smm1 * b_s[qjj];
 800dfb4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800dfb8:	00db      	lsls	r3, r3, #3
 800dfba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800dfbe:	4413      	add	r3, r2
 800dfc0:	3ba0      	subs	r3, #160	; 0xa0
 800dfc2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800dfc6:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800dfca:	f7f2 fb07 	bl	80005dc <__aeabi_dmul>
 800dfce:	4602      	mov	r2, r0
 800dfd0:	460b      	mov	r3, r1
 800dfd2:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
          b_s[qjj] *= sqds;
 800dfd6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800dfda:	00db      	lsls	r3, r3, #3
 800dfdc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800dfe0:	4413      	add	r3, r2
 800dfe2:	3ba0      	subs	r3, #160	; 0xa0
 800dfe4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800dfe8:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800dfec:	f7f2 faf6 	bl	80005dc <__aeabi_dmul>
 800dff0:	4602      	mov	r2, r0
 800dff2:	460b      	mov	r3, r1
 800dff4:	4610      	mov	r0, r2
 800dff6:	4619      	mov	r1, r3
 800dff8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800dffc:	00db      	lsls	r3, r3, #3
 800dffe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e002:	4413      	add	r3, r2
 800e004:	3ba0      	subs	r3, #160	; 0xa0
 800e006:	e9c3 0100 	strd	r0, r1, [r3]
          xrot_i7f01JoJ(V, 3 * (qjj - 1) + 1, 3 * qjj + 1, sqds, smm1);
 800e00a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800e00e:	1e5a      	subs	r2, r3, #1
 800e010:	4613      	mov	r3, r2
 800e012:	005b      	lsls	r3, r3, #1
 800e014:	4413      	add	r3, r2
 800e016:	1c59      	adds	r1, r3, #1
 800e018:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 800e01c:	4613      	mov	r3, r2
 800e01e:	005b      	lsls	r3, r3, #1
 800e020:	4413      	add	r3, r2
 800e022:	1c5a      	adds	r2, r3, #1
 800e024:	ed97 7b46 	vldr	d7, [r7, #280]	; 0x118
 800e028:	ed97 6b48 	vldr	d6, [r7, #288]	; 0x120
 800e02c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800e030:	eeb0 1a46 	vmov.f32	s2, s12
 800e034:	eef0 1a66 	vmov.f32	s3, s13
 800e038:	eeb0 0a47 	vmov.f32	s0, s14
 800e03c:	eef0 0a67 	vmov.f32	s1, s15
 800e040:	6818      	ldr	r0, [r3, #0]
 800e042:	f001 f903 	bl	800f24c <xrot_i7f01JoJ>
          b_s[qjj - 1] = emm1 * sqds + rt * smm1;
 800e046:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800e04a:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	; 0x1c0
 800e04e:	f7f2 fac5 	bl	80005dc <__aeabi_dmul>
 800e052:	4602      	mov	r2, r0
 800e054:	460b      	mov	r3, r1
 800e056:	4690      	mov	r8, r2
 800e058:	4699      	mov	r9, r3
 800e05a:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800e05e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800e062:	f7f2 fabb 	bl	80005dc <__aeabi_dmul>
 800e066:	4602      	mov	r2, r0
 800e068:	460b      	mov	r3, r1
 800e06a:	4610      	mov	r0, r2
 800e06c:	4619      	mov	r1, r3
 800e06e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800e072:	1e5c      	subs	r4, r3, #1
 800e074:	4602      	mov	r2, r0
 800e076:	460b      	mov	r3, r1
 800e078:	4640      	mov	r0, r8
 800e07a:	4649      	mov	r1, r9
 800e07c:	f7f2 f8f8 	bl	8000270 <__adddf3>
 800e080:	4602      	mov	r2, r0
 800e082:	460b      	mov	r3, r1
 800e084:	4610      	mov	r0, r2
 800e086:	4619      	mov	r1, r3
 800e088:	00e3      	lsls	r3, r4, #3
 800e08a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e08e:	4413      	add	r3, r2
 800e090:	3ba0      	subs	r3, #160	; 0xa0
 800e092:	e9c3 0100 	strd	r0, r1, [r3]
          xrotg_XzIjz1eG(&b_s[qjj - 1], &ztest, &sqds, &smm1);
 800e096:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800e09a:	3b01      	subs	r3, #1
 800e09c:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 800e0a0:	00db      	lsls	r3, r3, #3
 800e0a2:	18d0      	adds	r0, r2, r3
 800e0a4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800e0a8:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800e0ac:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800e0b0:	f001 f9e8 	bl	800f484 <xrotg_XzIjz1eG>
          rt = e[qjj - 1] * sqds + smm1 * b_s[qjj];
 800e0b4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800e0b8:	3b01      	subs	r3, #1
 800e0ba:	00db      	lsls	r3, r3, #3
 800e0bc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e0c0:	4413      	add	r3, r2
 800e0c2:	3bb8      	subs	r3, #184	; 0xb8
 800e0c4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e0c8:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800e0cc:	f7f2 fa86 	bl	80005dc <__aeabi_dmul>
 800e0d0:	4602      	mov	r2, r0
 800e0d2:	460b      	mov	r3, r1
 800e0d4:	4614      	mov	r4, r2
 800e0d6:	461d      	mov	r5, r3
 800e0d8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800e0dc:	00db      	lsls	r3, r3, #3
 800e0de:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e0e2:	4413      	add	r3, r2
 800e0e4:	3ba0      	subs	r3, #160	; 0xa0
 800e0e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e0ea:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800e0ee:	f7f2 fa75 	bl	80005dc <__aeabi_dmul>
 800e0f2:	4602      	mov	r2, r0
 800e0f4:	460b      	mov	r3, r1
 800e0f6:	4620      	mov	r0, r4
 800e0f8:	4629      	mov	r1, r5
 800e0fa:	f7f2 f8b9 	bl	8000270 <__adddf3>
 800e0fe:	4602      	mov	r2, r0
 800e100:	460b      	mov	r3, r1
 800e102:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
          b_s[qjj] = e[qjj - 1] * -smm1 + sqds * b_s[qjj];
 800e106:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800e10a:	3b01      	subs	r3, #1
 800e10c:	00db      	lsls	r3, r3, #3
 800e10e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e112:	4413      	add	r3, r2
 800e114:	3bb8      	subs	r3, #184	; 0xb8
 800e116:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e11a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800e11e:	60ba      	str	r2, [r7, #8]
 800e120:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800e124:	60fb      	str	r3, [r7, #12]
 800e126:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e12a:	f7f2 fa57 	bl	80005dc <__aeabi_dmul>
 800e12e:	4602      	mov	r2, r0
 800e130:	460b      	mov	r3, r1
 800e132:	4614      	mov	r4, r2
 800e134:	461d      	mov	r5, r3
 800e136:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800e13a:	00db      	lsls	r3, r3, #3
 800e13c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e140:	4413      	add	r3, r2
 800e142:	3ba0      	subs	r3, #160	; 0xa0
 800e144:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e148:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800e14c:	f7f2 fa46 	bl	80005dc <__aeabi_dmul>
 800e150:	4602      	mov	r2, r0
 800e152:	460b      	mov	r3, r1
 800e154:	4620      	mov	r0, r4
 800e156:	4629      	mov	r1, r5
 800e158:	f7f2 f88a 	bl	8000270 <__adddf3>
 800e15c:	4602      	mov	r2, r0
 800e15e:	460b      	mov	r3, r1
 800e160:	4610      	mov	r0, r2
 800e162:	4619      	mov	r1, r3
 800e164:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800e168:	00db      	lsls	r3, r3, #3
 800e16a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e16e:	4413      	add	r3, r2
 800e170:	3ba0      	subs	r3, #160	; 0xa0
 800e172:	e9c3 0100 	strd	r0, r1, [r3]
          ztest = smm1 * e[qjj];
 800e176:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800e17a:	00db      	lsls	r3, r3, #3
 800e17c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e180:	4413      	add	r3, r2
 800e182:	3bb8      	subs	r3, #184	; 0xb8
 800e184:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e188:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800e18c:	f7f2 fa26 	bl	80005dc <__aeabi_dmul>
 800e190:	4602      	mov	r2, r0
 800e192:	460b      	mov	r3, r1
 800e194:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
          e[qjj] *= sqds;
 800e198:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800e19c:	00db      	lsls	r3, r3, #3
 800e19e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e1a2:	4413      	add	r3, r2
 800e1a4:	3bb8      	subs	r3, #184	; 0xb8
 800e1a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e1aa:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800e1ae:	f7f2 fa15 	bl	80005dc <__aeabi_dmul>
 800e1b2:	4602      	mov	r2, r0
 800e1b4:	460b      	mov	r3, r1
 800e1b6:	4610      	mov	r0, r2
 800e1b8:	4619      	mov	r1, r3
 800e1ba:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800e1be:	00db      	lsls	r3, r3, #3
 800e1c0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e1c4:	4413      	add	r3, r2
 800e1c6:	3bb8      	subs	r3, #184	; 0xb8
 800e1c8:	e9c3 0100 	strd	r0, r1, [r3]
          xrot_i7f01JoJ(U, 3 * (qjj - 1) + 1, 3 * qjj + 1, sqds, smm1);
 800e1cc:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800e1d0:	1e5a      	subs	r2, r3, #1
 800e1d2:	4613      	mov	r3, r2
 800e1d4:	005b      	lsls	r3, r3, #1
 800e1d6:	4413      	add	r3, r2
 800e1d8:	1c59      	adds	r1, r3, #1
 800e1da:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 800e1de:	4613      	mov	r3, r2
 800e1e0:	005b      	lsls	r3, r3, #1
 800e1e2:	4413      	add	r3, r2
 800e1e4:	3301      	adds	r3, #1
 800e1e6:	ed97 7b46 	vldr	d7, [r7, #280]	; 0x118
 800e1ea:	ed97 6b48 	vldr	d6, [r7, #288]	; 0x120
 800e1ee:	eeb0 1a46 	vmov.f32	s2, s12
 800e1f2:	eef0 1a66 	vmov.f32	s3, s13
 800e1f6:	eeb0 0a47 	vmov.f32	s0, s14
 800e1fa:	eef0 0a67 	vmov.f32	s1, s15
 800e1fe:	461a      	mov	r2, r3
 800e200:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 800e204:	f001 f822 	bl	800f24c <xrot_i7f01JoJ>
        for (qjj = d + 1; qjj <= m + 1; qjj++) {
 800e208:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800e20c:	3301      	adds	r3, #1
 800e20e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800e212:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800e216:	1c5a      	adds	r2, r3, #1
 800e218:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800e21c:	4293      	cmp	r3, r2
 800e21e:	f77f ae74 	ble.w	800df0a <svd_u3DvUgOe+0x1682>
        }

        e[m] = rt;
 800e222:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800e226:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800e22a:	00db      	lsls	r3, r3, #3
 800e22c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e230:	4413      	add	r3, r2
 800e232:	3bb8      	subs	r3, #184	; 0xb8
 800e234:	e9c3 0100 	strd	r0, r1, [r3]
        qq++;
 800e238:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800e23c:	3301      	adds	r3, #1
 800e23e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
      }
      break;
 800e242:	e0b7      	b.n	800e3b4 <svd_u3DvUgOe+0x1b2c>

     default:
      if (b_s[d] < 0.0) {
 800e244:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800e248:	00db      	lsls	r3, r3, #3
 800e24a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e24e:	4413      	add	r3, r2
 800e250:	3ba0      	subs	r3, #160	; 0xa0
 800e252:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e256:	f04f 0200 	mov.w	r2, #0
 800e25a:	f04f 0300 	mov.w	r3, #0
 800e25e:	f7f2 fc2f 	bl	8000ac0 <__aeabi_dcmplt>
 800e262:	4603      	mov	r3, r0
 800e264:	2b00      	cmp	r3, #0
 800e266:	d025      	beq.n	800e2b4 <svd_u3DvUgOe+0x1a2c>
        b_s[d] = -b_s[d];
 800e268:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800e26c:	00db      	lsls	r3, r3, #3
 800e26e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e272:	4413      	add	r3, r2
 800e274:	3ba0      	subs	r3, #160	; 0xa0
 800e276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e27a:	603a      	str	r2, [r7, #0]
 800e27c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800e280:	607b      	str	r3, [r7, #4]
 800e282:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800e286:	00db      	lsls	r3, r3, #3
 800e288:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e28c:	4413      	add	r3, r2
 800e28e:	3ba0      	subs	r3, #160	; 0xa0
 800e290:	ed97 7b00 	vldr	d7, [r7]
 800e294:	ed83 7b00 	vstr	d7, [r3]
        xscal_eaAxXsvQ(-1.0, V, 3 * d + 1);
 800e298:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 800e29c:	4613      	mov	r3, r2
 800e29e:	005b      	lsls	r3, r3, #1
 800e2a0:	4413      	add	r3, r2
 800e2a2:	1c5a      	adds	r2, r3, #1
 800e2a4:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800e2a8:	4611      	mov	r1, r2
 800e2aa:	6818      	ldr	r0, [r3, #0]
 800e2ac:	ed9f 0b56 	vldr	d0, [pc, #344]	; 800e408 <svd_u3DvUgOe+0x1b80>
 800e2b0:	f001 fa4e 	bl	800f750 <xscal_eaAxXsvQ>
      }

      qq = d + 1;
 800e2b4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800e2b8:	3301      	adds	r3, #1
 800e2ba:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
      while ((d + 1 < 3) && (b_s[d] < b_s[qq])) {
 800e2be:	e055      	b.n	800e36c <svd_u3DvUgOe+0x1ae4>
        rt = b_s[d];
 800e2c0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800e2c4:	00db      	lsls	r3, r3, #3
 800e2c6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e2ca:	4413      	add	r3, r2
 800e2cc:	3ba0      	subs	r3, #160	; 0xa0
 800e2ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2d2:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
        b_s[d] = b_s[qq];
 800e2d6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800e2da:	00db      	lsls	r3, r3, #3
 800e2dc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e2e0:	4413      	add	r3, r2
 800e2e2:	3ba0      	subs	r3, #160	; 0xa0
 800e2e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e2e8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800e2ec:	00db      	lsls	r3, r3, #3
 800e2ee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e2f2:	4413      	add	r3, r2
 800e2f4:	3ba0      	subs	r3, #160	; 0xa0
 800e2f6:	e9c3 0100 	strd	r0, r1, [r3]
        b_s[qq] = rt;
 800e2fa:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800e2fe:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800e302:	00db      	lsls	r3, r3, #3
 800e304:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e308:	4413      	add	r3, r2
 800e30a:	3ba0      	subs	r3, #160	; 0xa0
 800e30c:	e9c3 0100 	strd	r0, r1, [r3]
        xswap_JoAqPjUv(V, 3 * d + 1, 3 * (d + 1) + 1);
 800e310:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 800e314:	4613      	mov	r3, r2
 800e316:	005b      	lsls	r3, r3, #1
 800e318:	4413      	add	r3, r2
 800e31a:	1c59      	adds	r1, r3, #1
 800e31c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800e320:	1c5a      	adds	r2, r3, #1
 800e322:	4613      	mov	r3, r2
 800e324:	005b      	lsls	r3, r3, #1
 800e326:	4413      	add	r3, r2
 800e328:	3301      	adds	r3, #1
 800e32a:	f507 7080 	add.w	r0, r7, #256	; 0x100
 800e32e:	461a      	mov	r2, r3
 800e330:	6800      	ldr	r0, [r0, #0]
 800e332:	f001 fa3c 	bl	800f7ae <xswap_JoAqPjUv>
        xswap_JoAqPjUv(U, 3 * d + 1, 3 * (d + 1) + 1);
 800e336:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 800e33a:	4613      	mov	r3, r2
 800e33c:	005b      	lsls	r3, r3, #1
 800e33e:	4413      	add	r3, r2
 800e340:	1c59      	adds	r1, r3, #1
 800e342:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800e346:	1c5a      	adds	r2, r3, #1
 800e348:	4613      	mov	r3, r2
 800e34a:	005b      	lsls	r3, r3, #1
 800e34c:	4413      	add	r3, r2
 800e34e:	3301      	adds	r3, #1
 800e350:	461a      	mov	r2, r3
 800e352:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 800e356:	f001 fa2a 	bl	800f7ae <xswap_JoAqPjUv>
        d = qq;
 800e35a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800e35e:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
        qq++;
 800e362:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800e366:	3301      	adds	r3, #1
 800e368:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
      while ((d + 1 < 3) && (b_s[d] < b_s[qq])) {
 800e36c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800e370:	2b01      	cmp	r3, #1
 800e372:	dc16      	bgt.n	800e3a2 <svd_u3DvUgOe+0x1b1a>
 800e374:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800e378:	00db      	lsls	r3, r3, #3
 800e37a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e37e:	4413      	add	r3, r2
 800e380:	3ba0      	subs	r3, #160	; 0xa0
 800e382:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e386:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800e38a:	00db      	lsls	r3, r3, #3
 800e38c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e390:	4413      	add	r3, r2
 800e392:	3ba0      	subs	r3, #160	; 0xa0
 800e394:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e398:	f7f2 fb92 	bl	8000ac0 <__aeabi_dcmplt>
 800e39c:	4603      	mov	r3, r0
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d18e      	bne.n	800e2c0 <svd_u3DvUgOe+0x1a38>
      }

      qq = 0;
 800e3a2:	2300      	movs	r3, #0
 800e3a4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
      m--;
 800e3a8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800e3ac:	3b01      	subs	r3, #1
 800e3ae:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
      break;
 800e3b2:	bf00      	nop
  while ((m + 2 > 0) && (qq < 75)) {
 800e3b4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800e3b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3bc:	db04      	blt.n	800e3c8 <svd_u3DvUgOe+0x1b40>
 800e3be:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800e3c2:	2b4a      	cmp	r3, #74	; 0x4a
 800e3c4:	f77f a972 	ble.w	800d6ac <svd_u3DvUgOe+0xe24>
    }
  }

  s[0] = b_s[0];
 800e3c8:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 800e3cc:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 800e3d0:	e9c1 2300 	strd	r2, r3, [r1]
  s[1] = b_s[1];
 800e3d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e3d8:	f103 0108 	add.w	r1, r3, #8
 800e3dc:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 800e3e0:	e9c1 2300 	strd	r2, r3, [r1]
  s[2] = b_s[2];
 800e3e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e3e8:	f103 0110 	add.w	r1, r3, #16
 800e3ec:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800e3f0:	e9c1 2300 	strd	r2, r3, [r1]
}
 800e3f4:	bf00      	nop
 800e3f6:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800e3fa:	46bd      	mov	sp, r7
 800e3fc:	ecbd 8b02 	vpop	{d8}
 800e400:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e404:	f3af 8000 	nop.w
 800e408:	00000000 	.word	0x00000000
 800e40c:	bff00000 	.word	0xbff00000

0800e410 <trisolve_BC1XmAGq>:
#include "rtwtypes.h"
#include "trisolve_BC1XmAGq.h"

void trisolve_BC1XmAGq(real_T A, real_T B[3])
{
 800e410:	b590      	push	{r4, r7, lr}
 800e412:	b085      	sub	sp, #20
 800e414:	af00      	add	r7, sp, #0
 800e416:	ed87 0b02 	vstr	d0, [r7, #8]
 800e41a:	6078      	str	r0, [r7, #4]
  if (B[0] != 0.0) {
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e422:	f04f 0200 	mov.w	r2, #0
 800e426:	f04f 0300 	mov.w	r3, #0
 800e42a:	f7f2 fb3f 	bl	8000aac <__aeabi_dcmpeq>
 800e42e:	4603      	mov	r3, r0
 800e430:	2b00      	cmp	r3, #0
 800e432:	d10b      	bne.n	800e44c <trisolve_BC1XmAGq+0x3c>
    B[0] /= A;
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e43a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e43e:	f7f2 f9f7 	bl	8000830 <__aeabi_ddiv>
 800e442:	4602      	mov	r2, r0
 800e444:	460b      	mov	r3, r1
 800e446:	6879      	ldr	r1, [r7, #4]
 800e448:	e9c1 2300 	strd	r2, r3, [r1]
  }

  if (B[1] != 0.0) {
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	3308      	adds	r3, #8
 800e450:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e454:	f04f 0200 	mov.w	r2, #0
 800e458:	f04f 0300 	mov.w	r3, #0
 800e45c:	f7f2 fb26 	bl	8000aac <__aeabi_dcmpeq>
 800e460:	4603      	mov	r3, r0
 800e462:	2b00      	cmp	r3, #0
 800e464:	d10e      	bne.n	800e484 <trisolve_BC1XmAGq+0x74>
    B[1] /= A;
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	3308      	adds	r3, #8
 800e46a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	f103 0408 	add.w	r4, r3, #8
 800e474:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e478:	f7f2 f9da 	bl	8000830 <__aeabi_ddiv>
 800e47c:	4602      	mov	r2, r0
 800e47e:	460b      	mov	r3, r1
 800e480:	e9c4 2300 	strd	r2, r3, [r4]
  }

  if (B[2] != 0.0) {
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	3310      	adds	r3, #16
 800e488:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e48c:	f04f 0200 	mov.w	r2, #0
 800e490:	f04f 0300 	mov.w	r3, #0
 800e494:	f7f2 fb0a 	bl	8000aac <__aeabi_dcmpeq>
 800e498:	4603      	mov	r3, r0
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d000      	beq.n	800e4a0 <trisolve_BC1XmAGq+0x90>
    B[2] /= A;
  }
}
 800e49e:	e00e      	b.n	800e4be <trisolve_BC1XmAGq+0xae>
    B[2] /= A;
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	3310      	adds	r3, #16
 800e4a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	f103 0410 	add.w	r4, r3, #16
 800e4ae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e4b2:	f7f2 f9bd 	bl	8000830 <__aeabi_ddiv>
 800e4b6:	4602      	mov	r2, r0
 800e4b8:	460b      	mov	r3, r1
 800e4ba:	e9c4 2300 	strd	r2, r3, [r4]
}
 800e4be:	bf00      	nop
 800e4c0:	3714      	adds	r7, #20
 800e4c2:	46bd      	mov	sp, r7
 800e4c4:	bd90      	pop	{r4, r7, pc}

0800e4c6 <xaxpy_OQ28XA21>:
#include "rtwtypes.h"
#include "xaxpy_OQ28XA21.h"

void xaxpy_OQ28XA21(int32_T n, real_T a, const real_T x[9], int32_T ix0, real_T
                    y[3], int32_T iy0)
{
 800e4c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e4c8:	b08b      	sub	sp, #44	; 0x2c
 800e4ca:	af00      	add	r7, sp, #0
 800e4cc:	6178      	str	r0, [r7, #20]
 800e4ce:	ed87 0b02 	vstr	d0, [r7, #8]
 800e4d2:	6139      	str	r1, [r7, #16]
 800e4d4:	607a      	str	r2, [r7, #4]
 800e4d6:	603b      	str	r3, [r7, #0]
  int32_T k;
  if ((n >= 1) && (!(a == 0.0))) {
 800e4d8:	697b      	ldr	r3, [r7, #20]
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	dd43      	ble.n	800e566 <xaxpy_OQ28XA21+0xa0>
 800e4de:	f04f 0200 	mov.w	r2, #0
 800e4e2:	f04f 0300 	mov.w	r3, #0
 800e4e6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e4ea:	f7f2 fadf 	bl	8000aac <__aeabi_dcmpeq>
 800e4ee:	4603      	mov	r3, r0
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d000      	beq.n	800e4f6 <xaxpy_OQ28XA21+0x30>
      y[iy] += a * x[ix];
      ix++;
      iy++;
    }
  }
}
 800e4f4:	e037      	b.n	800e566 <xaxpy_OQ28XA21+0xa0>
    ix = ix0 - 1;
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	3b01      	subs	r3, #1
 800e4fa:	623b      	str	r3, [r7, #32]
    iy = iy0 - 1;
 800e4fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e4fe:	3b01      	subs	r3, #1
 800e500:	61fb      	str	r3, [r7, #28]
    for (k = 0; k < n; k++) {
 800e502:	2300      	movs	r3, #0
 800e504:	627b      	str	r3, [r7, #36]	; 0x24
 800e506:	e02a      	b.n	800e55e <xaxpy_OQ28XA21+0x98>
      y[iy] += a * x[ix];
 800e508:	69fb      	ldr	r3, [r7, #28]
 800e50a:	00db      	lsls	r3, r3, #3
 800e50c:	683a      	ldr	r2, [r7, #0]
 800e50e:	4413      	add	r3, r2
 800e510:	e9d3 4500 	ldrd	r4, r5, [r3]
 800e514:	6a3b      	ldr	r3, [r7, #32]
 800e516:	00db      	lsls	r3, r3, #3
 800e518:	693a      	ldr	r2, [r7, #16]
 800e51a:	4413      	add	r3, r2
 800e51c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e520:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e524:	f7f2 f85a 	bl	80005dc <__aeabi_dmul>
 800e528:	4602      	mov	r2, r0
 800e52a:	460b      	mov	r3, r1
 800e52c:	4610      	mov	r0, r2
 800e52e:	4619      	mov	r1, r3
 800e530:	69fb      	ldr	r3, [r7, #28]
 800e532:	00db      	lsls	r3, r3, #3
 800e534:	683a      	ldr	r2, [r7, #0]
 800e536:	18d6      	adds	r6, r2, r3
 800e538:	4602      	mov	r2, r0
 800e53a:	460b      	mov	r3, r1
 800e53c:	4620      	mov	r0, r4
 800e53e:	4629      	mov	r1, r5
 800e540:	f7f1 fe96 	bl	8000270 <__adddf3>
 800e544:	4602      	mov	r2, r0
 800e546:	460b      	mov	r3, r1
 800e548:	e9c6 2300 	strd	r2, r3, [r6]
      ix++;
 800e54c:	6a3b      	ldr	r3, [r7, #32]
 800e54e:	3301      	adds	r3, #1
 800e550:	623b      	str	r3, [r7, #32]
      iy++;
 800e552:	69fb      	ldr	r3, [r7, #28]
 800e554:	3301      	adds	r3, #1
 800e556:	61fb      	str	r3, [r7, #28]
    for (k = 0; k < n; k++) {
 800e558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e55a:	3301      	adds	r3, #1
 800e55c:	627b      	str	r3, [r7, #36]	; 0x24
 800e55e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e560:	697b      	ldr	r3, [r7, #20]
 800e562:	429a      	cmp	r2, r3
 800e564:	dbd0      	blt.n	800e508 <xaxpy_OQ28XA21+0x42>
}
 800e566:	bf00      	nop
 800e568:	372c      	adds	r7, #44	; 0x2c
 800e56a:	46bd      	mov	sp, r7
 800e56c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e56e <xaxpy_Wxch84Fl>:
#include "rtwtypes.h"
#include "xaxpy_Wxch84Fl.h"

void xaxpy_Wxch84Fl(int32_T n, real_T a, const real_T x[3], int32_T ix0, real_T
                    y[9], int32_T iy0)
{
 800e56e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e570:	b08b      	sub	sp, #44	; 0x2c
 800e572:	af00      	add	r7, sp, #0
 800e574:	6178      	str	r0, [r7, #20]
 800e576:	ed87 0b02 	vstr	d0, [r7, #8]
 800e57a:	6139      	str	r1, [r7, #16]
 800e57c:	607a      	str	r2, [r7, #4]
 800e57e:	603b      	str	r3, [r7, #0]
  int32_T k;
  if ((n >= 1) && (!(a == 0.0))) {
 800e580:	697b      	ldr	r3, [r7, #20]
 800e582:	2b00      	cmp	r3, #0
 800e584:	dd43      	ble.n	800e60e <xaxpy_Wxch84Fl+0xa0>
 800e586:	f04f 0200 	mov.w	r2, #0
 800e58a:	f04f 0300 	mov.w	r3, #0
 800e58e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e592:	f7f2 fa8b 	bl	8000aac <__aeabi_dcmpeq>
 800e596:	4603      	mov	r3, r0
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d000      	beq.n	800e59e <xaxpy_Wxch84Fl+0x30>
      y[iy] += a * x[ix];
      ix++;
      iy++;
    }
  }
}
 800e59c:	e037      	b.n	800e60e <xaxpy_Wxch84Fl+0xa0>
    ix = ix0 - 1;
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	3b01      	subs	r3, #1
 800e5a2:	623b      	str	r3, [r7, #32]
    iy = iy0 - 1;
 800e5a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e5a6:	3b01      	subs	r3, #1
 800e5a8:	61fb      	str	r3, [r7, #28]
    for (k = 0; k < n; k++) {
 800e5aa:	2300      	movs	r3, #0
 800e5ac:	627b      	str	r3, [r7, #36]	; 0x24
 800e5ae:	e02a      	b.n	800e606 <xaxpy_Wxch84Fl+0x98>
      y[iy] += a * x[ix];
 800e5b0:	69fb      	ldr	r3, [r7, #28]
 800e5b2:	00db      	lsls	r3, r3, #3
 800e5b4:	683a      	ldr	r2, [r7, #0]
 800e5b6:	4413      	add	r3, r2
 800e5b8:	e9d3 4500 	ldrd	r4, r5, [r3]
 800e5bc:	6a3b      	ldr	r3, [r7, #32]
 800e5be:	00db      	lsls	r3, r3, #3
 800e5c0:	693a      	ldr	r2, [r7, #16]
 800e5c2:	4413      	add	r3, r2
 800e5c4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e5c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e5cc:	f7f2 f806 	bl	80005dc <__aeabi_dmul>
 800e5d0:	4602      	mov	r2, r0
 800e5d2:	460b      	mov	r3, r1
 800e5d4:	4610      	mov	r0, r2
 800e5d6:	4619      	mov	r1, r3
 800e5d8:	69fb      	ldr	r3, [r7, #28]
 800e5da:	00db      	lsls	r3, r3, #3
 800e5dc:	683a      	ldr	r2, [r7, #0]
 800e5de:	18d6      	adds	r6, r2, r3
 800e5e0:	4602      	mov	r2, r0
 800e5e2:	460b      	mov	r3, r1
 800e5e4:	4620      	mov	r0, r4
 800e5e6:	4629      	mov	r1, r5
 800e5e8:	f7f1 fe42 	bl	8000270 <__adddf3>
 800e5ec:	4602      	mov	r2, r0
 800e5ee:	460b      	mov	r3, r1
 800e5f0:	e9c6 2300 	strd	r2, r3, [r6]
      ix++;
 800e5f4:	6a3b      	ldr	r3, [r7, #32]
 800e5f6:	3301      	adds	r3, #1
 800e5f8:	623b      	str	r3, [r7, #32]
      iy++;
 800e5fa:	69fb      	ldr	r3, [r7, #28]
 800e5fc:	3301      	adds	r3, #1
 800e5fe:	61fb      	str	r3, [r7, #28]
    for (k = 0; k < n; k++) {
 800e600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e602:	3301      	adds	r3, #1
 800e604:	627b      	str	r3, [r7, #36]	; 0x24
 800e606:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e608:	697b      	ldr	r3, [r7, #20]
 800e60a:	429a      	cmp	r2, r3
 800e60c:	dbd0      	blt.n	800e5b0 <xaxpy_Wxch84Fl+0x42>
}
 800e60e:	bf00      	nop
 800e610:	372c      	adds	r7, #44	; 0x2c
 800e612:	46bd      	mov	sp, r7
 800e614:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e616 <xaxpy_guu0hJif>:
#include "rtwtypes.h"
#include "xaxpy_guu0hJif.h"

void xaxpy_guu0hJif(int32_T n, real_T a, int32_T ix0, real_T y[9], int32_T iy0)
{
 800e616:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e618:	b08b      	sub	sp, #44	; 0x2c
 800e61a:	af00      	add	r7, sp, #0
 800e61c:	6178      	str	r0, [r7, #20]
 800e61e:	ed87 0b02 	vstr	d0, [r7, #8]
 800e622:	6139      	str	r1, [r7, #16]
 800e624:	607a      	str	r2, [r7, #4]
 800e626:	603b      	str	r3, [r7, #0]
  int32_T k;
  if ((n >= 1) && (!(a == 0.0))) {
 800e628:	697b      	ldr	r3, [r7, #20]
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	dd43      	ble.n	800e6b6 <xaxpy_guu0hJif+0xa0>
 800e62e:	f04f 0200 	mov.w	r2, #0
 800e632:	f04f 0300 	mov.w	r3, #0
 800e636:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e63a:	f7f2 fa37 	bl	8000aac <__aeabi_dcmpeq>
 800e63e:	4603      	mov	r3, r0
 800e640:	2b00      	cmp	r3, #0
 800e642:	d000      	beq.n	800e646 <xaxpy_guu0hJif+0x30>
      y[iy] += a * y[ix];
      ix++;
      iy++;
    }
  }
}
 800e644:	e037      	b.n	800e6b6 <xaxpy_guu0hJif+0xa0>
    ix = ix0 - 1;
 800e646:	693b      	ldr	r3, [r7, #16]
 800e648:	3b01      	subs	r3, #1
 800e64a:	623b      	str	r3, [r7, #32]
    iy = iy0 - 1;
 800e64c:	683b      	ldr	r3, [r7, #0]
 800e64e:	3b01      	subs	r3, #1
 800e650:	61fb      	str	r3, [r7, #28]
    for (k = 0; k < n; k++) {
 800e652:	2300      	movs	r3, #0
 800e654:	627b      	str	r3, [r7, #36]	; 0x24
 800e656:	e02a      	b.n	800e6ae <xaxpy_guu0hJif+0x98>
      y[iy] += a * y[ix];
 800e658:	69fb      	ldr	r3, [r7, #28]
 800e65a:	00db      	lsls	r3, r3, #3
 800e65c:	687a      	ldr	r2, [r7, #4]
 800e65e:	4413      	add	r3, r2
 800e660:	e9d3 4500 	ldrd	r4, r5, [r3]
 800e664:	6a3b      	ldr	r3, [r7, #32]
 800e666:	00db      	lsls	r3, r3, #3
 800e668:	687a      	ldr	r2, [r7, #4]
 800e66a:	4413      	add	r3, r2
 800e66c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e670:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e674:	f7f1 ffb2 	bl	80005dc <__aeabi_dmul>
 800e678:	4602      	mov	r2, r0
 800e67a:	460b      	mov	r3, r1
 800e67c:	4610      	mov	r0, r2
 800e67e:	4619      	mov	r1, r3
 800e680:	69fb      	ldr	r3, [r7, #28]
 800e682:	00db      	lsls	r3, r3, #3
 800e684:	687a      	ldr	r2, [r7, #4]
 800e686:	18d6      	adds	r6, r2, r3
 800e688:	4602      	mov	r2, r0
 800e68a:	460b      	mov	r3, r1
 800e68c:	4620      	mov	r0, r4
 800e68e:	4629      	mov	r1, r5
 800e690:	f7f1 fdee 	bl	8000270 <__adddf3>
 800e694:	4602      	mov	r2, r0
 800e696:	460b      	mov	r3, r1
 800e698:	e9c6 2300 	strd	r2, r3, [r6]
      ix++;
 800e69c:	6a3b      	ldr	r3, [r7, #32]
 800e69e:	3301      	adds	r3, #1
 800e6a0:	623b      	str	r3, [r7, #32]
      iy++;
 800e6a2:	69fb      	ldr	r3, [r7, #28]
 800e6a4:	3301      	adds	r3, #1
 800e6a6:	61fb      	str	r3, [r7, #28]
    for (k = 0; k < n; k++) {
 800e6a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6aa:	3301      	adds	r3, #1
 800e6ac:	627b      	str	r3, [r7, #36]	; 0x24
 800e6ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e6b0:	697b      	ldr	r3, [r7, #20]
 800e6b2:	429a      	cmp	r2, r3
 800e6b4:	dbd0      	blt.n	800e658 <xaxpy_guu0hJif+0x42>
}
 800e6b6:	bf00      	nop
 800e6b8:	372c      	adds	r7, #44	; 0x2c
 800e6ba:	46bd      	mov	sp, r7
 800e6bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e6be <xdotc_mznw4aLl>:
#include "rtwtypes.h"
#include "xdotc_mznw4aLl.h"

real_T xdotc_mznw4aLl(int32_T n, const real_T x[9], int32_T ix0, const real_T y
                      [9], int32_T iy0)
{
 800e6be:	b580      	push	{r7, lr}
 800e6c0:	b08a      	sub	sp, #40	; 0x28
 800e6c2:	af00      	add	r7, sp, #0
 800e6c4:	60f8      	str	r0, [r7, #12]
 800e6c6:	60b9      	str	r1, [r7, #8]
 800e6c8:	607a      	str	r2, [r7, #4]
 800e6ca:	603b      	str	r3, [r7, #0]
  real_T d;
  int32_T k;
  d = 0.0;
 800e6cc:	f04f 0200 	mov.w	r2, #0
 800e6d0:	f04f 0300 	mov.w	r3, #0
 800e6d4:	e9c7 2308 	strd	r2, r3, [r7, #32]
  if (n >= 1) {
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	dd31      	ble.n	800e742 <xdotc_mznw4aLl+0x84>
    int32_T ix;
    int32_T iy;
    ix = ix0;
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	61bb      	str	r3, [r7, #24]
    iy = iy0;
 800e6e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6e4:	617b      	str	r3, [r7, #20]
    for (k = 0; k < n; k++) {
 800e6e6:	2300      	movs	r3, #0
 800e6e8:	61fb      	str	r3, [r7, #28]
 800e6ea:	e026      	b.n	800e73a <xdotc_mznw4aLl+0x7c>
      d += x[ix - 1] * y[iy - 1];
 800e6ec:	69bb      	ldr	r3, [r7, #24]
 800e6ee:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800e6f2:	3b01      	subs	r3, #1
 800e6f4:	00db      	lsls	r3, r3, #3
 800e6f6:	68ba      	ldr	r2, [r7, #8]
 800e6f8:	4413      	add	r3, r2
 800e6fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e6fe:	697b      	ldr	r3, [r7, #20]
 800e700:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800e704:	3b01      	subs	r3, #1
 800e706:	00db      	lsls	r3, r3, #3
 800e708:	683a      	ldr	r2, [r7, #0]
 800e70a:	4413      	add	r3, r2
 800e70c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e710:	f7f1 ff64 	bl	80005dc <__aeabi_dmul>
 800e714:	4602      	mov	r2, r0
 800e716:	460b      	mov	r3, r1
 800e718:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800e71c:	f7f1 fda8 	bl	8000270 <__adddf3>
 800e720:	4602      	mov	r2, r0
 800e722:	460b      	mov	r3, r1
 800e724:	e9c7 2308 	strd	r2, r3, [r7, #32]
      ix++;
 800e728:	69bb      	ldr	r3, [r7, #24]
 800e72a:	3301      	adds	r3, #1
 800e72c:	61bb      	str	r3, [r7, #24]
      iy++;
 800e72e:	697b      	ldr	r3, [r7, #20]
 800e730:	3301      	adds	r3, #1
 800e732:	617b      	str	r3, [r7, #20]
    for (k = 0; k < n; k++) {
 800e734:	69fb      	ldr	r3, [r7, #28]
 800e736:	3301      	adds	r3, #1
 800e738:	61fb      	str	r3, [r7, #28]
 800e73a:	69fa      	ldr	r2, [r7, #28]
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	429a      	cmp	r2, r3
 800e740:	dbd4      	blt.n	800e6ec <xdotc_mznw4aLl+0x2e>
    }
  }

  return d;
 800e742:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800e746:	ec43 2b17 	vmov	d7, r2, r3
}
 800e74a:	eeb0 0a47 	vmov.f32	s0, s14
 800e74e:	eef0 0a67 	vmov.f32	s1, s15
 800e752:	3728      	adds	r7, #40	; 0x28
 800e754:	46bd      	mov	sp, r7
 800e756:	bd80      	pop	{r7, pc}

0800e758 <xgemv_NQlWbt2i>:
#include "rtwtypes.h"
#include "xgemv_NQlWbt2i.h"

void xgemv_NQlWbt2i(int32_T m, int32_T n, const real_T A[18], int32_T ia0, const
                    real_T x[18], int32_T ix0, real_T y[3])
{
 800e758:	b590      	push	{r4, r7, lr}
 800e75a:	b08f      	sub	sp, #60	; 0x3c
 800e75c:	af00      	add	r7, sp, #0
 800e75e:	60f8      	str	r0, [r7, #12]
 800e760:	60b9      	str	r1, [r7, #8]
 800e762:	607a      	str	r2, [r7, #4]
 800e764:	603b      	str	r3, [r7, #0]
  int32_T b_iy;
  int32_T ia;
  int32_T iac;
  if ((m != 0) && (n != 0)) {
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d079      	beq.n	800e860 <xgemv_NQlWbt2i+0x108>
 800e76c:	68bb      	ldr	r3, [r7, #8]
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d076      	beq.n	800e860 <xgemv_NQlWbt2i+0x108>
    int32_T b;
    for (b_iy = 0; b_iy < n; b_iy++) {
 800e772:	2300      	movs	r3, #0
 800e774:	637b      	str	r3, [r7, #52]	; 0x34
 800e776:	e00c      	b.n	800e792 <xgemv_NQlWbt2i+0x3a>
      y[b_iy] = 0.0;
 800e778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e77a:	00db      	lsls	r3, r3, #3
 800e77c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e77e:	18d1      	adds	r1, r2, r3
 800e780:	f04f 0200 	mov.w	r2, #0
 800e784:	f04f 0300 	mov.w	r3, #0
 800e788:	e9c1 2300 	strd	r2, r3, [r1]
    for (b_iy = 0; b_iy < n; b_iy++) {
 800e78c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e78e:	3301      	adds	r3, #1
 800e790:	637b      	str	r3, [r7, #52]	; 0x34
 800e792:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e794:	68bb      	ldr	r3, [r7, #8]
 800e796:	429a      	cmp	r2, r3
 800e798:	dbee      	blt.n	800e778 <xgemv_NQlWbt2i+0x20>
    }

    b_iy = 0;
 800e79a:	2300      	movs	r3, #0
 800e79c:	637b      	str	r3, [r7, #52]	; 0x34
    b = (n - 1) * 6 + ia0;
 800e79e:	68bb      	ldr	r3, [r7, #8]
 800e7a0:	1e5a      	subs	r2, r3, #1
 800e7a2:	4613      	mov	r3, r2
 800e7a4:	005b      	lsls	r3, r3, #1
 800e7a6:	4413      	add	r3, r2
 800e7a8:	005b      	lsls	r3, r3, #1
 800e7aa:	461a      	mov	r2, r3
 800e7ac:	683b      	ldr	r3, [r7, #0]
 800e7ae:	4413      	add	r3, r2
 800e7b0:	61bb      	str	r3, [r7, #24]
    for (iac = ia0; iac <= b; iac += 6) {
 800e7b2:	683b      	ldr	r3, [r7, #0]
 800e7b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e7b6:	e04f      	b.n	800e858 <xgemv_NQlWbt2i+0x100>
      real_T c;
      int32_T d;
      int32_T ix;
      ix = ix0;
 800e7b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e7ba:	61fb      	str	r3, [r7, #28]
      c = 0.0;
 800e7bc:	f04f 0200 	mov.w	r2, #0
 800e7c0:	f04f 0300 	mov.w	r3, #0
 800e7c4:	e9c7 2308 	strd	r2, r3, [r7, #32]
      d = (iac + m) - 1;
 800e7c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	4413      	add	r3, r2
 800e7ce:	3b01      	subs	r3, #1
 800e7d0:	617b      	str	r3, [r7, #20]
      for (ia = iac; ia <= d; ia++) {
 800e7d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7d4:	633b      	str	r3, [r7, #48]	; 0x30
 800e7d6:	e023      	b.n	800e820 <xgemv_NQlWbt2i+0xc8>
        c += A[ia - 1] * x[ix - 1];
 800e7d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7da:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800e7de:	3b01      	subs	r3, #1
 800e7e0:	00db      	lsls	r3, r3, #3
 800e7e2:	687a      	ldr	r2, [r7, #4]
 800e7e4:	4413      	add	r3, r2
 800e7e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e7ea:	69fb      	ldr	r3, [r7, #28]
 800e7ec:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800e7f0:	3b01      	subs	r3, #1
 800e7f2:	00db      	lsls	r3, r3, #3
 800e7f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e7f6:	4413      	add	r3, r2
 800e7f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7fc:	f7f1 feee 	bl	80005dc <__aeabi_dmul>
 800e800:	4602      	mov	r2, r0
 800e802:	460b      	mov	r3, r1
 800e804:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800e808:	f7f1 fd32 	bl	8000270 <__adddf3>
 800e80c:	4602      	mov	r2, r0
 800e80e:	460b      	mov	r3, r1
 800e810:	e9c7 2308 	strd	r2, r3, [r7, #32]
        ix++;
 800e814:	69fb      	ldr	r3, [r7, #28]
 800e816:	3301      	adds	r3, #1
 800e818:	61fb      	str	r3, [r7, #28]
      for (ia = iac; ia <= d; ia++) {
 800e81a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e81c:	3301      	adds	r3, #1
 800e81e:	633b      	str	r3, [r7, #48]	; 0x30
 800e820:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e822:	697b      	ldr	r3, [r7, #20]
 800e824:	429a      	cmp	r2, r3
 800e826:	ddd7      	ble.n	800e7d8 <xgemv_NQlWbt2i+0x80>
      }

      y[b_iy] += c;
 800e828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e82a:	00db      	lsls	r3, r3, #3
 800e82c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e82e:	4413      	add	r3, r2
 800e830:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e836:	00db      	lsls	r3, r3, #3
 800e838:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e83a:	18d4      	adds	r4, r2, r3
 800e83c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800e840:	f7f1 fd16 	bl	8000270 <__adddf3>
 800e844:	4602      	mov	r2, r0
 800e846:	460b      	mov	r3, r1
 800e848:	e9c4 2300 	strd	r2, r3, [r4]
      b_iy++;
 800e84c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e84e:	3301      	adds	r3, #1
 800e850:	637b      	str	r3, [r7, #52]	; 0x34
    for (iac = ia0; iac <= b; iac += 6) {
 800e852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e854:	3306      	adds	r3, #6
 800e856:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e858:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e85a:	69bb      	ldr	r3, [r7, #24]
 800e85c:	429a      	cmp	r2, r3
 800e85e:	ddab      	ble.n	800e7b8 <xgemv_NQlWbt2i+0x60>
    }
  }
}
 800e860:	bf00      	nop
 800e862:	373c      	adds	r7, #60	; 0x3c
 800e864:	46bd      	mov	sp, r7
 800e866:	bd90      	pop	{r4, r7, pc}

0800e868 <xgemv_fRiR1I1O>:
#include "rtwtypes.h"
#include "xgemv_fRiR1I1O.h"

void xgemv_fRiR1I1O(int32_T m, int32_T n, const real_T A[9], int32_T ia0, const
                    real_T x[9], int32_T ix0, real_T y[3])
{
 800e868:	b590      	push	{r4, r7, lr}
 800e86a:	b08f      	sub	sp, #60	; 0x3c
 800e86c:	af00      	add	r7, sp, #0
 800e86e:	60f8      	str	r0, [r7, #12]
 800e870:	60b9      	str	r1, [r7, #8]
 800e872:	607a      	str	r2, [r7, #4]
 800e874:	603b      	str	r3, [r7, #0]
  int32_T b_iy;
  int32_T ia;
  int32_T iac;
  if ((m != 0) && (n != 0)) {
 800e876:	68fb      	ldr	r3, [r7, #12]
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d077      	beq.n	800e96c <xgemv_fRiR1I1O+0x104>
 800e87c:	68bb      	ldr	r3, [r7, #8]
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d074      	beq.n	800e96c <xgemv_fRiR1I1O+0x104>
    int32_T b;
    for (b_iy = 0; b_iy < n; b_iy++) {
 800e882:	2300      	movs	r3, #0
 800e884:	637b      	str	r3, [r7, #52]	; 0x34
 800e886:	e00c      	b.n	800e8a2 <xgemv_fRiR1I1O+0x3a>
      y[b_iy] = 0.0;
 800e888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e88a:	00db      	lsls	r3, r3, #3
 800e88c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e88e:	18d1      	adds	r1, r2, r3
 800e890:	f04f 0200 	mov.w	r2, #0
 800e894:	f04f 0300 	mov.w	r3, #0
 800e898:	e9c1 2300 	strd	r2, r3, [r1]
    for (b_iy = 0; b_iy < n; b_iy++) {
 800e89c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e89e:	3301      	adds	r3, #1
 800e8a0:	637b      	str	r3, [r7, #52]	; 0x34
 800e8a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e8a4:	68bb      	ldr	r3, [r7, #8]
 800e8a6:	429a      	cmp	r2, r3
 800e8a8:	dbee      	blt.n	800e888 <xgemv_fRiR1I1O+0x20>
    }

    b_iy = 0;
 800e8aa:	2300      	movs	r3, #0
 800e8ac:	637b      	str	r3, [r7, #52]	; 0x34
    b = (n - 1) * 3 + ia0;
 800e8ae:	68bb      	ldr	r3, [r7, #8]
 800e8b0:	1e5a      	subs	r2, r3, #1
 800e8b2:	4613      	mov	r3, r2
 800e8b4:	005b      	lsls	r3, r3, #1
 800e8b6:	4413      	add	r3, r2
 800e8b8:	683a      	ldr	r2, [r7, #0]
 800e8ba:	4413      	add	r3, r2
 800e8bc:	61bb      	str	r3, [r7, #24]
    for (iac = ia0; iac <= b; iac += 3) {
 800e8be:	683b      	ldr	r3, [r7, #0]
 800e8c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e8c2:	e04f      	b.n	800e964 <xgemv_fRiR1I1O+0xfc>
      real_T c;
      int32_T d;
      int32_T ix;
      ix = ix0;
 800e8c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e8c6:	61fb      	str	r3, [r7, #28]
      c = 0.0;
 800e8c8:	f04f 0200 	mov.w	r2, #0
 800e8cc:	f04f 0300 	mov.w	r3, #0
 800e8d0:	e9c7 2308 	strd	r2, r3, [r7, #32]
      d = (iac + m) - 1;
 800e8d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	4413      	add	r3, r2
 800e8da:	3b01      	subs	r3, #1
 800e8dc:	617b      	str	r3, [r7, #20]
      for (ia = iac; ia <= d; ia++) {
 800e8de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8e0:	633b      	str	r3, [r7, #48]	; 0x30
 800e8e2:	e023      	b.n	800e92c <xgemv_fRiR1I1O+0xc4>
        c += A[ia - 1] * x[ix - 1];
 800e8e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8e6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800e8ea:	3b01      	subs	r3, #1
 800e8ec:	00db      	lsls	r3, r3, #3
 800e8ee:	687a      	ldr	r2, [r7, #4]
 800e8f0:	4413      	add	r3, r2
 800e8f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e8f6:	69fb      	ldr	r3, [r7, #28]
 800e8f8:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800e8fc:	3b01      	subs	r3, #1
 800e8fe:	00db      	lsls	r3, r3, #3
 800e900:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e902:	4413      	add	r3, r2
 800e904:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e908:	f7f1 fe68 	bl	80005dc <__aeabi_dmul>
 800e90c:	4602      	mov	r2, r0
 800e90e:	460b      	mov	r3, r1
 800e910:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800e914:	f7f1 fcac 	bl	8000270 <__adddf3>
 800e918:	4602      	mov	r2, r0
 800e91a:	460b      	mov	r3, r1
 800e91c:	e9c7 2308 	strd	r2, r3, [r7, #32]
        ix++;
 800e920:	69fb      	ldr	r3, [r7, #28]
 800e922:	3301      	adds	r3, #1
 800e924:	61fb      	str	r3, [r7, #28]
      for (ia = iac; ia <= d; ia++) {
 800e926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e928:	3301      	adds	r3, #1
 800e92a:	633b      	str	r3, [r7, #48]	; 0x30
 800e92c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e92e:	697b      	ldr	r3, [r7, #20]
 800e930:	429a      	cmp	r2, r3
 800e932:	ddd7      	ble.n	800e8e4 <xgemv_fRiR1I1O+0x7c>
      }

      y[b_iy] += c;
 800e934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e936:	00db      	lsls	r3, r3, #3
 800e938:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e93a:	4413      	add	r3, r2
 800e93c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e940:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e942:	00db      	lsls	r3, r3, #3
 800e944:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e946:	18d4      	adds	r4, r2, r3
 800e948:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800e94c:	f7f1 fc90 	bl	8000270 <__adddf3>
 800e950:	4602      	mov	r2, r0
 800e952:	460b      	mov	r3, r1
 800e954:	e9c4 2300 	strd	r2, r3, [r4]
      b_iy++;
 800e958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e95a:	3301      	adds	r3, #1
 800e95c:	637b      	str	r3, [r7, #52]	; 0x34
    for (iac = ia0; iac <= b; iac += 3) {
 800e95e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e960:	3303      	adds	r3, #3
 800e962:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e964:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e966:	69bb      	ldr	r3, [r7, #24]
 800e968:	429a      	cmp	r2, r3
 800e96a:	ddab      	ble.n	800e8c4 <xgemv_fRiR1I1O+0x5c>
    }
  }
}
 800e96c:	bf00      	nop
 800e96e:	373c      	adds	r7, #60	; 0x3c
 800e970:	46bd      	mov	sp, r7
 800e972:	bd90      	pop	{r4, r7, pc}

0800e974 <xgerc_R09LiDgJ>:
#include "rtwtypes.h"
#include "xgerc_R09LiDgJ.h"

void xgerc_R09LiDgJ(int32_T m, int32_T n, real_T alpha1, int32_T ix0, const
                    real_T y[3], real_T A[18], int32_T ia0)
{
 800e974:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e976:	b091      	sub	sp, #68	; 0x44
 800e978:	af00      	add	r7, sp, #0
 800e97a:	6178      	str	r0, [r7, #20]
 800e97c:	6139      	str	r1, [r7, #16]
 800e97e:	ed87 0b02 	vstr	d0, [r7, #8]
 800e982:	607a      	str	r2, [r7, #4]
 800e984:	603b      	str	r3, [r7, #0]
  int32_T j;
  if (!(alpha1 == 0.0)) {
 800e986:	f04f 0200 	mov.w	r2, #0
 800e98a:	f04f 0300 	mov.w	r3, #0
 800e98e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e992:	f7f2 f88b 	bl	8000aac <__aeabi_dcmpeq>
 800e996:	4603      	mov	r3, r0
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d000      	beq.n	800e99e <xgerc_R09LiDgJ+0x2a>

      jy++;
      jA += 6;
    }
  }
}
 800e99c:	e069      	b.n	800ea72 <xgerc_R09LiDgJ+0xfe>
    jA = ia0 - 1;
 800e99e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e9a0:	3b01      	subs	r3, #1
 800e9a2:	63bb      	str	r3, [r7, #56]	; 0x38
    jy = 0;
 800e9a4:	2300      	movs	r3, #0
 800e9a6:	637b      	str	r3, [r7, #52]	; 0x34
    for (j = 0; j < n; j++) {
 800e9a8:	2300      	movs	r3, #0
 800e9aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e9ac:	e05d      	b.n	800ea6a <xgerc_R09LiDgJ+0xf6>
      if (y[jy] != 0.0) {
 800e9ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e9b0:	00db      	lsls	r3, r3, #3
 800e9b2:	683a      	ldr	r2, [r7, #0]
 800e9b4:	4413      	add	r3, r2
 800e9b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e9ba:	f04f 0200 	mov.w	r2, #0
 800e9be:	f04f 0300 	mov.w	r3, #0
 800e9c2:	f7f2 f873 	bl	8000aac <__aeabi_dcmpeq>
 800e9c6:	4603      	mov	r3, r0
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d145      	bne.n	800ea58 <xgerc_R09LiDgJ+0xe4>
        temp = y[jy] * alpha1;
 800e9cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e9ce:	00db      	lsls	r3, r3, #3
 800e9d0:	683a      	ldr	r2, [r7, #0]
 800e9d2:	4413      	add	r3, r2
 800e9d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9d8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e9dc:	f7f1 fdfe 	bl	80005dc <__aeabi_dmul>
 800e9e0:	4602      	mov	r2, r0
 800e9e2:	460b      	mov	r3, r1
 800e9e4:	e9c7 2308 	strd	r2, r3, [r7, #32]
        ix = ix0;
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        ijA = jA;
 800e9ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9ee:	633b      	str	r3, [r7, #48]	; 0x30
        b = m + jA;
 800e9f0:	697a      	ldr	r2, [r7, #20]
 800e9f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9f4:	4413      	add	r3, r2
 800e9f6:	61fb      	str	r3, [r7, #28]
        while (ijA + 1 <= b) {
 800e9f8:	e02a      	b.n	800ea50 <xgerc_R09LiDgJ+0xdc>
          A[ijA] += A[ix - 1] * temp;
 800e9fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9fc:	00db      	lsls	r3, r3, #3
 800e9fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ea00:	4413      	add	r3, r2
 800ea02:	e9d3 4500 	ldrd	r4, r5, [r3]
 800ea06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea08:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800ea0c:	3b01      	subs	r3, #1
 800ea0e:	00db      	lsls	r3, r3, #3
 800ea10:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ea12:	4413      	add	r3, r2
 800ea14:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ea18:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ea1c:	f7f1 fdde 	bl	80005dc <__aeabi_dmul>
 800ea20:	4602      	mov	r2, r0
 800ea22:	460b      	mov	r3, r1
 800ea24:	4610      	mov	r0, r2
 800ea26:	4619      	mov	r1, r3
 800ea28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea2a:	00db      	lsls	r3, r3, #3
 800ea2c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ea2e:	18d6      	adds	r6, r2, r3
 800ea30:	4602      	mov	r2, r0
 800ea32:	460b      	mov	r3, r1
 800ea34:	4620      	mov	r0, r4
 800ea36:	4629      	mov	r1, r5
 800ea38:	f7f1 fc1a 	bl	8000270 <__adddf3>
 800ea3c:	4602      	mov	r2, r0
 800ea3e:	460b      	mov	r3, r1
 800ea40:	e9c6 2300 	strd	r2, r3, [r6]
          ix++;
 800ea44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea46:	3301      	adds	r3, #1
 800ea48:	62fb      	str	r3, [r7, #44]	; 0x2c
          ijA++;
 800ea4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea4c:	3301      	adds	r3, #1
 800ea4e:	633b      	str	r3, [r7, #48]	; 0x30
        while (ijA + 1 <= b) {
 800ea50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ea52:	69fb      	ldr	r3, [r7, #28]
 800ea54:	429a      	cmp	r2, r3
 800ea56:	dbd0      	blt.n	800e9fa <xgerc_R09LiDgJ+0x86>
      jy++;
 800ea58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea5a:	3301      	adds	r3, #1
 800ea5c:	637b      	str	r3, [r7, #52]	; 0x34
      jA += 6;
 800ea5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea60:	3306      	adds	r3, #6
 800ea62:	63bb      	str	r3, [r7, #56]	; 0x38
    for (j = 0; j < n; j++) {
 800ea64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea66:	3301      	adds	r3, #1
 800ea68:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ea6a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ea6c:	693b      	ldr	r3, [r7, #16]
 800ea6e:	429a      	cmp	r2, r3
 800ea70:	db9d      	blt.n	800e9ae <xgerc_R09LiDgJ+0x3a>
}
 800ea72:	bf00      	nop
 800ea74:	3744      	adds	r7, #68	; 0x44
 800ea76:	46bd      	mov	sp, r7
 800ea78:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ea7a <xgerc_tNNiazQU>:
#include "rtwtypes.h"
#include "xgerc_tNNiazQU.h"

void xgerc_tNNiazQU(int32_T m, int32_T n, real_T alpha1, int32_T ix0, const
                    real_T y[3], real_T A[9], int32_T ia0)
{
 800ea7a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ea7c:	b091      	sub	sp, #68	; 0x44
 800ea7e:	af00      	add	r7, sp, #0
 800ea80:	6178      	str	r0, [r7, #20]
 800ea82:	6139      	str	r1, [r7, #16]
 800ea84:	ed87 0b02 	vstr	d0, [r7, #8]
 800ea88:	607a      	str	r2, [r7, #4]
 800ea8a:	603b      	str	r3, [r7, #0]
  int32_T j;
  if (!(alpha1 == 0.0)) {
 800ea8c:	f04f 0200 	mov.w	r2, #0
 800ea90:	f04f 0300 	mov.w	r3, #0
 800ea94:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ea98:	f7f2 f808 	bl	8000aac <__aeabi_dcmpeq>
 800ea9c:	4603      	mov	r3, r0
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d000      	beq.n	800eaa4 <xgerc_tNNiazQU+0x2a>

      jy++;
      jA += 3;
    }
  }
}
 800eaa2:	e069      	b.n	800eb78 <xgerc_tNNiazQU+0xfe>
    jA = ia0 - 1;
 800eaa4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eaa6:	3b01      	subs	r3, #1
 800eaa8:	63bb      	str	r3, [r7, #56]	; 0x38
    jy = 0;
 800eaaa:	2300      	movs	r3, #0
 800eaac:	637b      	str	r3, [r7, #52]	; 0x34
    for (j = 0; j < n; j++) {
 800eaae:	2300      	movs	r3, #0
 800eab0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800eab2:	e05d      	b.n	800eb70 <xgerc_tNNiazQU+0xf6>
      if (y[jy] != 0.0) {
 800eab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eab6:	00db      	lsls	r3, r3, #3
 800eab8:	683a      	ldr	r2, [r7, #0]
 800eaba:	4413      	add	r3, r2
 800eabc:	e9d3 0100 	ldrd	r0, r1, [r3]
 800eac0:	f04f 0200 	mov.w	r2, #0
 800eac4:	f04f 0300 	mov.w	r3, #0
 800eac8:	f7f1 fff0 	bl	8000aac <__aeabi_dcmpeq>
 800eacc:	4603      	mov	r3, r0
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d145      	bne.n	800eb5e <xgerc_tNNiazQU+0xe4>
        temp = y[jy] * alpha1;
 800ead2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ead4:	00db      	lsls	r3, r3, #3
 800ead6:	683a      	ldr	r2, [r7, #0]
 800ead8:	4413      	add	r3, r2
 800eada:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eade:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800eae2:	f7f1 fd7b 	bl	80005dc <__aeabi_dmul>
 800eae6:	4602      	mov	r2, r0
 800eae8:	460b      	mov	r3, r1
 800eaea:	e9c7 2308 	strd	r2, r3, [r7, #32]
        ix = ix0;
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ijA = jA;
 800eaf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eaf4:	633b      	str	r3, [r7, #48]	; 0x30
        b = m + jA;
 800eaf6:	697a      	ldr	r2, [r7, #20]
 800eaf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eafa:	4413      	add	r3, r2
 800eafc:	61fb      	str	r3, [r7, #28]
        while (ijA + 1 <= b) {
 800eafe:	e02a      	b.n	800eb56 <xgerc_tNNiazQU+0xdc>
          A[ijA] += A[ix - 1] * temp;
 800eb00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb02:	00db      	lsls	r3, r3, #3
 800eb04:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800eb06:	4413      	add	r3, r2
 800eb08:	e9d3 4500 	ldrd	r4, r5, [r3]
 800eb0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb0e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800eb12:	3b01      	subs	r3, #1
 800eb14:	00db      	lsls	r3, r3, #3
 800eb16:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800eb18:	4413      	add	r3, r2
 800eb1a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800eb1e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800eb22:	f7f1 fd5b 	bl	80005dc <__aeabi_dmul>
 800eb26:	4602      	mov	r2, r0
 800eb28:	460b      	mov	r3, r1
 800eb2a:	4610      	mov	r0, r2
 800eb2c:	4619      	mov	r1, r3
 800eb2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb30:	00db      	lsls	r3, r3, #3
 800eb32:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800eb34:	18d6      	adds	r6, r2, r3
 800eb36:	4602      	mov	r2, r0
 800eb38:	460b      	mov	r3, r1
 800eb3a:	4620      	mov	r0, r4
 800eb3c:	4629      	mov	r1, r5
 800eb3e:	f7f1 fb97 	bl	8000270 <__adddf3>
 800eb42:	4602      	mov	r2, r0
 800eb44:	460b      	mov	r3, r1
 800eb46:	e9c6 2300 	strd	r2, r3, [r6]
          ix++;
 800eb4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb4c:	3301      	adds	r3, #1
 800eb4e:	62fb      	str	r3, [r7, #44]	; 0x2c
          ijA++;
 800eb50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb52:	3301      	adds	r3, #1
 800eb54:	633b      	str	r3, [r7, #48]	; 0x30
        while (ijA + 1 <= b) {
 800eb56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eb58:	69fb      	ldr	r3, [r7, #28]
 800eb5a:	429a      	cmp	r2, r3
 800eb5c:	dbd0      	blt.n	800eb00 <xgerc_tNNiazQU+0x86>
      jy++;
 800eb5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb60:	3301      	adds	r3, #1
 800eb62:	637b      	str	r3, [r7, #52]	; 0x34
      jA += 3;
 800eb64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb66:	3303      	adds	r3, #3
 800eb68:	63bb      	str	r3, [r7, #56]	; 0x38
    for (j = 0; j < n; j++) {
 800eb6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb6c:	3301      	adds	r3, #1
 800eb6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800eb70:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800eb72:	693b      	ldr	r3, [r7, #16]
 800eb74:	429a      	cmp	r2, r3
 800eb76:	db9d      	blt.n	800eab4 <xgerc_tNNiazQU+0x3a>
}
 800eb78:	bf00      	nop
 800eb7a:	3744      	adds	r7, #68	; 0x44
 800eb7c:	46bd      	mov	sp, r7
 800eb7e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800eb80 <xnrm2_7bm34mDQ>:
#include "rtwtypes.h"
#include "xnrm2_7bm34mDQ.h"
#include <math.h>

real_T xnrm2_7bm34mDQ(int32_T n, const real_T x[6], int32_T ix0)
{
 800eb80:	b580      	push	{r7, lr}
 800eb82:	b092      	sub	sp, #72	; 0x48
 800eb84:	af00      	add	r7, sp, #0
 800eb86:	60f8      	str	r0, [r7, #12]
 800eb88:	60b9      	str	r1, [r7, #8]
 800eb8a:	607a      	str	r2, [r7, #4]
  real_T y;
  int32_T k;
  y = 0.0;
 800eb8c:	f04f 0200 	mov.w	r2, #0
 800eb90:	f04f 0300 	mov.w	r3, #0
 800eb94:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  if (n >= 1) {
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	f340 8090 	ble.w	800ecc0 <xnrm2_7bm34mDQ+0x140>
    if (n == 1) {
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	2b01      	cmp	r3, #1
 800eba4:	d10e      	bne.n	800ebc4 <xnrm2_7bm34mDQ+0x44>
      y = fabs(x[ix0 - 1]);
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800ebac:	3b01      	subs	r3, #1
 800ebae:	00db      	lsls	r3, r3, #3
 800ebb0:	68ba      	ldr	r2, [r7, #8]
 800ebb2:	4413      	add	r3, r2
 800ebb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebb8:	4611      	mov	r1, r2
 800ebba:	6439      	str	r1, [r7, #64]	; 0x40
 800ebbc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ebc0:	647b      	str	r3, [r7, #68]	; 0x44
 800ebc2:	e07d      	b.n	800ecc0 <xnrm2_7bm34mDQ+0x140>
    } else {
      real_T scale;
      int32_T kend;
      scale = 3.3121686421112381E-170;
 800ebc4:	f04f 0200 	mov.w	r2, #0
 800ebc8:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 800ebcc:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      kend = (ix0 + n) - 1;
 800ebd0:	687a      	ldr	r2, [r7, #4]
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	4413      	add	r3, r2
 800ebd6:	3b01      	subs	r3, #1
 800ebd8:	62fb      	str	r3, [r7, #44]	; 0x2c
      for (k = ix0; k <= kend; k++) {
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ebde:	e05d      	b.n	800ec9c <xnrm2_7bm34mDQ+0x11c>
        real_T absxk;
        absxk = fabs(x[k - 1]);
 800ebe0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ebe2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800ebe6:	3b01      	subs	r3, #1
 800ebe8:	00db      	lsls	r3, r3, #3
 800ebea:	68ba      	ldr	r2, [r7, #8]
 800ebec:	4413      	add	r3, r2
 800ebee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebf2:	4611      	mov	r1, r2
 800ebf4:	6239      	str	r1, [r7, #32]
 800ebf6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ebfa:	627b      	str	r3, [r7, #36]	; 0x24
        if (absxk > scale) {
 800ebfc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800ec00:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800ec04:	f7f1 ff7a 	bl	8000afc <__aeabi_dcmpgt>
 800ec08:	4603      	mov	r3, r0
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d029      	beq.n	800ec62 <xnrm2_7bm34mDQ+0xe2>
          real_T t;
          t = scale / absxk;
 800ec0e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ec12:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800ec16:	f7f1 fe0b 	bl	8000830 <__aeabi_ddiv>
 800ec1a:	4602      	mov	r2, r0
 800ec1c:	460b      	mov	r3, r1
 800ec1e:	e9c7 2304 	strd	r2, r3, [r7, #16]
          y = y * t * t + 1.0;
 800ec22:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ec26:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800ec2a:	f7f1 fcd7 	bl	80005dc <__aeabi_dmul>
 800ec2e:	4602      	mov	r2, r0
 800ec30:	460b      	mov	r3, r1
 800ec32:	4610      	mov	r0, r2
 800ec34:	4619      	mov	r1, r3
 800ec36:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ec3a:	f7f1 fccf 	bl	80005dc <__aeabi_dmul>
 800ec3e:	4602      	mov	r2, r0
 800ec40:	460b      	mov	r3, r1
 800ec42:	4610      	mov	r0, r2
 800ec44:	4619      	mov	r1, r3
 800ec46:	f04f 0200 	mov.w	r2, #0
 800ec4a:	4b23      	ldr	r3, [pc, #140]	; (800ecd8 <xnrm2_7bm34mDQ+0x158>)
 800ec4c:	f7f1 fb10 	bl	8000270 <__adddf3>
 800ec50:	4602      	mov	r2, r0
 800ec52:	460b      	mov	r3, r1
 800ec54:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
          scale = absxk;
 800ec58:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ec5c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 800ec60:	e019      	b.n	800ec96 <xnrm2_7bm34mDQ+0x116>
        } else {
          real_T t;
          t = absxk / scale;
 800ec62:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800ec66:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800ec6a:	f7f1 fde1 	bl	8000830 <__aeabi_ddiv>
 800ec6e:	4602      	mov	r2, r0
 800ec70:	460b      	mov	r3, r1
 800ec72:	e9c7 2306 	strd	r2, r3, [r7, #24]
          y += t * t;
 800ec76:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ec7a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800ec7e:	f7f1 fcad 	bl	80005dc <__aeabi_dmul>
 800ec82:	4602      	mov	r2, r0
 800ec84:	460b      	mov	r3, r1
 800ec86:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800ec8a:	f7f1 faf1 	bl	8000270 <__adddf3>
 800ec8e:	4602      	mov	r2, r0
 800ec90:	460b      	mov	r3, r1
 800ec92:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      for (k = ix0; k <= kend; k++) {
 800ec96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec98:	3301      	adds	r3, #1
 800ec9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ec9c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ec9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eca0:	429a      	cmp	r2, r3
 800eca2:	dd9d      	ble.n	800ebe0 <xnrm2_7bm34mDQ+0x60>
        }
      }

      y = scale * sqrt(y);
 800eca4:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 800eca8:	f00b fa2e 	bl	801a108 <sqrt>
 800ecac:	ec53 2b10 	vmov	r2, r3, d0
 800ecb0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800ecb4:	f7f1 fc92 	bl	80005dc <__aeabi_dmul>
 800ecb8:	4602      	mov	r2, r0
 800ecba:	460b      	mov	r3, r1
 800ecbc:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    }
  }

  return y;
 800ecc0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800ecc4:	ec43 2b17 	vmov	d7, r2, r3
}
 800ecc8:	eeb0 0a47 	vmov.f32	s0, s14
 800eccc:	eef0 0a67 	vmov.f32	s1, s15
 800ecd0:	3748      	adds	r7, #72	; 0x48
 800ecd2:	46bd      	mov	sp, r7
 800ecd4:	bd80      	pop	{r7, pc}
 800ecd6:	bf00      	nop
 800ecd8:	3ff00000 	.word	0x3ff00000

0800ecdc <xnrm2_Mnmxg9YT>:
#include "rtwtypes.h"
#include "xnrm2_Mnmxg9YT.h"
#include <math.h>

real_T xnrm2_Mnmxg9YT(int32_T n, const real_T x[2], int32_T ix0)
{
 800ecdc:	b580      	push	{r7, lr}
 800ecde:	b092      	sub	sp, #72	; 0x48
 800ece0:	af00      	add	r7, sp, #0
 800ece2:	60f8      	str	r0, [r7, #12]
 800ece4:	60b9      	str	r1, [r7, #8]
 800ece6:	607a      	str	r2, [r7, #4]
  real_T y;
  int32_T k;
  y = 0.0;
 800ece8:	f04f 0200 	mov.w	r2, #0
 800ecec:	f04f 0300 	mov.w	r3, #0
 800ecf0:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  if (n >= 1) {
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	f340 8090 	ble.w	800ee1c <xnrm2_Mnmxg9YT+0x140>
    if (n == 1) {
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	2b01      	cmp	r3, #1
 800ed00:	d10e      	bne.n	800ed20 <xnrm2_Mnmxg9YT+0x44>
      y = fabs(x[ix0 - 1]);
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800ed08:	3b01      	subs	r3, #1
 800ed0a:	00db      	lsls	r3, r3, #3
 800ed0c:	68ba      	ldr	r2, [r7, #8]
 800ed0e:	4413      	add	r3, r2
 800ed10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed14:	4611      	mov	r1, r2
 800ed16:	6439      	str	r1, [r7, #64]	; 0x40
 800ed18:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ed1c:	647b      	str	r3, [r7, #68]	; 0x44
 800ed1e:	e07d      	b.n	800ee1c <xnrm2_Mnmxg9YT+0x140>
    } else {
      real_T scale;
      int32_T kend;
      scale = 3.3121686421112381E-170;
 800ed20:	f04f 0200 	mov.w	r2, #0
 800ed24:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 800ed28:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      kend = (ix0 + n) - 1;
 800ed2c:	687a      	ldr	r2, [r7, #4]
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	4413      	add	r3, r2
 800ed32:	3b01      	subs	r3, #1
 800ed34:	62fb      	str	r3, [r7, #44]	; 0x2c
      for (k = ix0; k <= kend; k++) {
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ed3a:	e05d      	b.n	800edf8 <xnrm2_Mnmxg9YT+0x11c>
        real_T absxk;
        absxk = fabs(x[k - 1]);
 800ed3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed3e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800ed42:	3b01      	subs	r3, #1
 800ed44:	00db      	lsls	r3, r3, #3
 800ed46:	68ba      	ldr	r2, [r7, #8]
 800ed48:	4413      	add	r3, r2
 800ed4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed4e:	4611      	mov	r1, r2
 800ed50:	6239      	str	r1, [r7, #32]
 800ed52:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ed56:	627b      	str	r3, [r7, #36]	; 0x24
        if (absxk > scale) {
 800ed58:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800ed5c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800ed60:	f7f1 fecc 	bl	8000afc <__aeabi_dcmpgt>
 800ed64:	4603      	mov	r3, r0
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d029      	beq.n	800edbe <xnrm2_Mnmxg9YT+0xe2>
          real_T t;
          t = scale / absxk;
 800ed6a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ed6e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800ed72:	f7f1 fd5d 	bl	8000830 <__aeabi_ddiv>
 800ed76:	4602      	mov	r2, r0
 800ed78:	460b      	mov	r3, r1
 800ed7a:	e9c7 2304 	strd	r2, r3, [r7, #16]
          y = y * t * t + 1.0;
 800ed7e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ed82:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800ed86:	f7f1 fc29 	bl	80005dc <__aeabi_dmul>
 800ed8a:	4602      	mov	r2, r0
 800ed8c:	460b      	mov	r3, r1
 800ed8e:	4610      	mov	r0, r2
 800ed90:	4619      	mov	r1, r3
 800ed92:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ed96:	f7f1 fc21 	bl	80005dc <__aeabi_dmul>
 800ed9a:	4602      	mov	r2, r0
 800ed9c:	460b      	mov	r3, r1
 800ed9e:	4610      	mov	r0, r2
 800eda0:	4619      	mov	r1, r3
 800eda2:	f04f 0200 	mov.w	r2, #0
 800eda6:	4b23      	ldr	r3, [pc, #140]	; (800ee34 <xnrm2_Mnmxg9YT+0x158>)
 800eda8:	f7f1 fa62 	bl	8000270 <__adddf3>
 800edac:	4602      	mov	r2, r0
 800edae:	460b      	mov	r3, r1
 800edb0:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
          scale = absxk;
 800edb4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800edb8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 800edbc:	e019      	b.n	800edf2 <xnrm2_Mnmxg9YT+0x116>
        } else {
          real_T t;
          t = absxk / scale;
 800edbe:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800edc2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800edc6:	f7f1 fd33 	bl	8000830 <__aeabi_ddiv>
 800edca:	4602      	mov	r2, r0
 800edcc:	460b      	mov	r3, r1
 800edce:	e9c7 2306 	strd	r2, r3, [r7, #24]
          y += t * t;
 800edd2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800edd6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800edda:	f7f1 fbff 	bl	80005dc <__aeabi_dmul>
 800edde:	4602      	mov	r2, r0
 800ede0:	460b      	mov	r3, r1
 800ede2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800ede6:	f7f1 fa43 	bl	8000270 <__adddf3>
 800edea:	4602      	mov	r2, r0
 800edec:	460b      	mov	r3, r1
 800edee:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      for (k = ix0; k <= kend; k++) {
 800edf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800edf4:	3301      	adds	r3, #1
 800edf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800edf8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800edfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edfc:	429a      	cmp	r2, r3
 800edfe:	dd9d      	ble.n	800ed3c <xnrm2_Mnmxg9YT+0x60>
        }
      }

      y = scale * sqrt(y);
 800ee00:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 800ee04:	f00b f980 	bl	801a108 <sqrt>
 800ee08:	ec53 2b10 	vmov	r2, r3, d0
 800ee0c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800ee10:	f7f1 fbe4 	bl	80005dc <__aeabi_dmul>
 800ee14:	4602      	mov	r2, r0
 800ee16:	460b      	mov	r3, r1
 800ee18:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    }
  }

  return y;
 800ee1c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800ee20:	ec43 2b17 	vmov	d7, r2, r3
}
 800ee24:	eeb0 0a47 	vmov.f32	s0, s14
 800ee28:	eef0 0a67 	vmov.f32	s1, s15
 800ee2c:	3748      	adds	r7, #72	; 0x48
 800ee2e:	46bd      	mov	sp, r7
 800ee30:	bd80      	pop	{r7, pc}
 800ee32:	bf00      	nop
 800ee34:	3ff00000 	.word	0x3ff00000

0800ee38 <xnrm2_Rlk0oxWw>:
#include "rtwtypes.h"
#include "xnrm2_Rlk0oxWw.h"
#include <math.h>

real_T xnrm2_Rlk0oxWw(int32_T n, const real_T x[3], int32_T ix0)
{
 800ee38:	b580      	push	{r7, lr}
 800ee3a:	b092      	sub	sp, #72	; 0x48
 800ee3c:	af00      	add	r7, sp, #0
 800ee3e:	60f8      	str	r0, [r7, #12]
 800ee40:	60b9      	str	r1, [r7, #8]
 800ee42:	607a      	str	r2, [r7, #4]
  real_T y;
  int32_T k;
  y = 0.0;
 800ee44:	f04f 0200 	mov.w	r2, #0
 800ee48:	f04f 0300 	mov.w	r3, #0
 800ee4c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  if (n >= 1) {
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	f340 8090 	ble.w	800ef78 <xnrm2_Rlk0oxWw+0x140>
    if (n == 1) {
 800ee58:	68fb      	ldr	r3, [r7, #12]
 800ee5a:	2b01      	cmp	r3, #1
 800ee5c:	d10e      	bne.n	800ee7c <xnrm2_Rlk0oxWw+0x44>
      y = fabs(x[ix0 - 1]);
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800ee64:	3b01      	subs	r3, #1
 800ee66:	00db      	lsls	r3, r3, #3
 800ee68:	68ba      	ldr	r2, [r7, #8]
 800ee6a:	4413      	add	r3, r2
 800ee6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee70:	4611      	mov	r1, r2
 800ee72:	6439      	str	r1, [r7, #64]	; 0x40
 800ee74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ee78:	647b      	str	r3, [r7, #68]	; 0x44
 800ee7a:	e07d      	b.n	800ef78 <xnrm2_Rlk0oxWw+0x140>
    } else {
      real_T scale;
      int32_T kend;
      scale = 3.3121686421112381E-170;
 800ee7c:	f04f 0200 	mov.w	r2, #0
 800ee80:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 800ee84:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      kend = (ix0 + n) - 1;
 800ee88:	687a      	ldr	r2, [r7, #4]
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	4413      	add	r3, r2
 800ee8e:	3b01      	subs	r3, #1
 800ee90:	62fb      	str	r3, [r7, #44]	; 0x2c
      for (k = ix0; k <= kend; k++) {
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ee96:	e05d      	b.n	800ef54 <xnrm2_Rlk0oxWw+0x11c>
        real_T absxk;
        absxk = fabs(x[k - 1]);
 800ee98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee9a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800ee9e:	3b01      	subs	r3, #1
 800eea0:	00db      	lsls	r3, r3, #3
 800eea2:	68ba      	ldr	r2, [r7, #8]
 800eea4:	4413      	add	r3, r2
 800eea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eeaa:	4611      	mov	r1, r2
 800eeac:	6239      	str	r1, [r7, #32]
 800eeae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800eeb2:	627b      	str	r3, [r7, #36]	; 0x24
        if (absxk > scale) {
 800eeb4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800eeb8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800eebc:	f7f1 fe1e 	bl	8000afc <__aeabi_dcmpgt>
 800eec0:	4603      	mov	r3, r0
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d029      	beq.n	800ef1a <xnrm2_Rlk0oxWw+0xe2>
          real_T t;
          t = scale / absxk;
 800eec6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800eeca:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800eece:	f7f1 fcaf 	bl	8000830 <__aeabi_ddiv>
 800eed2:	4602      	mov	r2, r0
 800eed4:	460b      	mov	r3, r1
 800eed6:	e9c7 2304 	strd	r2, r3, [r7, #16]
          y = y * t * t + 1.0;
 800eeda:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800eede:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800eee2:	f7f1 fb7b 	bl	80005dc <__aeabi_dmul>
 800eee6:	4602      	mov	r2, r0
 800eee8:	460b      	mov	r3, r1
 800eeea:	4610      	mov	r0, r2
 800eeec:	4619      	mov	r1, r3
 800eeee:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800eef2:	f7f1 fb73 	bl	80005dc <__aeabi_dmul>
 800eef6:	4602      	mov	r2, r0
 800eef8:	460b      	mov	r3, r1
 800eefa:	4610      	mov	r0, r2
 800eefc:	4619      	mov	r1, r3
 800eefe:	f04f 0200 	mov.w	r2, #0
 800ef02:	4b23      	ldr	r3, [pc, #140]	; (800ef90 <xnrm2_Rlk0oxWw+0x158>)
 800ef04:	f7f1 f9b4 	bl	8000270 <__adddf3>
 800ef08:	4602      	mov	r2, r0
 800ef0a:	460b      	mov	r3, r1
 800ef0c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
          scale = absxk;
 800ef10:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ef14:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 800ef18:	e019      	b.n	800ef4e <xnrm2_Rlk0oxWw+0x116>
        } else {
          real_T t;
          t = absxk / scale;
 800ef1a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800ef1e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800ef22:	f7f1 fc85 	bl	8000830 <__aeabi_ddiv>
 800ef26:	4602      	mov	r2, r0
 800ef28:	460b      	mov	r3, r1
 800ef2a:	e9c7 2306 	strd	r2, r3, [r7, #24]
          y += t * t;
 800ef2e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ef32:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800ef36:	f7f1 fb51 	bl	80005dc <__aeabi_dmul>
 800ef3a:	4602      	mov	r2, r0
 800ef3c:	460b      	mov	r3, r1
 800ef3e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800ef42:	f7f1 f995 	bl	8000270 <__adddf3>
 800ef46:	4602      	mov	r2, r0
 800ef48:	460b      	mov	r3, r1
 800ef4a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      for (k = ix0; k <= kend; k++) {
 800ef4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef50:	3301      	adds	r3, #1
 800ef52:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ef54:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ef56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef58:	429a      	cmp	r2, r3
 800ef5a:	dd9d      	ble.n	800ee98 <xnrm2_Rlk0oxWw+0x60>
        }
      }

      y = scale * sqrt(y);
 800ef5c:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 800ef60:	f00b f8d2 	bl	801a108 <sqrt>
 800ef64:	ec53 2b10 	vmov	r2, r3, d0
 800ef68:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800ef6c:	f7f1 fb36 	bl	80005dc <__aeabi_dmul>
 800ef70:	4602      	mov	r2, r0
 800ef72:	460b      	mov	r3, r1
 800ef74:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    }
  }

  return y;
 800ef78:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800ef7c:	ec43 2b17 	vmov	d7, r2, r3
}
 800ef80:	eeb0 0a47 	vmov.f32	s0, s14
 800ef84:	eef0 0a67 	vmov.f32	s1, s15
 800ef88:	3748      	adds	r7, #72	; 0x48
 800ef8a:	46bd      	mov	sp, r7
 800ef8c:	bd80      	pop	{r7, pc}
 800ef8e:	bf00      	nop
 800ef90:	3ff00000 	.word	0x3ff00000

0800ef94 <xnrm2_nLdASVZH>:
#include "rtwtypes.h"
#include "xnrm2_nLdASVZH.h"
#include <math.h>

real_T xnrm2_nLdASVZH(int32_T n, const real_T x[18], int32_T ix0)
{
 800ef94:	b580      	push	{r7, lr}
 800ef96:	b092      	sub	sp, #72	; 0x48
 800ef98:	af00      	add	r7, sp, #0
 800ef9a:	60f8      	str	r0, [r7, #12]
 800ef9c:	60b9      	str	r1, [r7, #8]
 800ef9e:	607a      	str	r2, [r7, #4]
  real_T y;
  int32_T k;
  y = 0.0;
 800efa0:	f04f 0200 	mov.w	r2, #0
 800efa4:	f04f 0300 	mov.w	r3, #0
 800efa8:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  if (n >= 1) {
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	2b00      	cmp	r3, #0
 800efb0:	f340 8090 	ble.w	800f0d4 <xnrm2_nLdASVZH+0x140>
    if (n == 1) {
 800efb4:	68fb      	ldr	r3, [r7, #12]
 800efb6:	2b01      	cmp	r3, #1
 800efb8:	d10e      	bne.n	800efd8 <xnrm2_nLdASVZH+0x44>
      y = fabs(x[ix0 - 1]);
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800efc0:	3b01      	subs	r3, #1
 800efc2:	00db      	lsls	r3, r3, #3
 800efc4:	68ba      	ldr	r2, [r7, #8]
 800efc6:	4413      	add	r3, r2
 800efc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efcc:	4611      	mov	r1, r2
 800efce:	6439      	str	r1, [r7, #64]	; 0x40
 800efd0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800efd4:	647b      	str	r3, [r7, #68]	; 0x44
 800efd6:	e07d      	b.n	800f0d4 <xnrm2_nLdASVZH+0x140>
    } else {
      real_T scale;
      int32_T kend;
      scale = 3.3121686421112381E-170;
 800efd8:	f04f 0200 	mov.w	r2, #0
 800efdc:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 800efe0:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      kend = (ix0 + n) - 1;
 800efe4:	687a      	ldr	r2, [r7, #4]
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	4413      	add	r3, r2
 800efea:	3b01      	subs	r3, #1
 800efec:	62fb      	str	r3, [r7, #44]	; 0x2c
      for (k = ix0; k <= kend; k++) {
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800eff2:	e05d      	b.n	800f0b0 <xnrm2_nLdASVZH+0x11c>
        real_T absxk;
        absxk = fabs(x[k - 1]);
 800eff4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eff6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800effa:	3b01      	subs	r3, #1
 800effc:	00db      	lsls	r3, r3, #3
 800effe:	68ba      	ldr	r2, [r7, #8]
 800f000:	4413      	add	r3, r2
 800f002:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f006:	4611      	mov	r1, r2
 800f008:	6239      	str	r1, [r7, #32]
 800f00a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f00e:	627b      	str	r3, [r7, #36]	; 0x24
        if (absxk > scale) {
 800f010:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f014:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800f018:	f7f1 fd70 	bl	8000afc <__aeabi_dcmpgt>
 800f01c:	4603      	mov	r3, r0
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d029      	beq.n	800f076 <xnrm2_nLdASVZH+0xe2>
          real_T t;
          t = scale / absxk;
 800f022:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800f026:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800f02a:	f7f1 fc01 	bl	8000830 <__aeabi_ddiv>
 800f02e:	4602      	mov	r2, r0
 800f030:	460b      	mov	r3, r1
 800f032:	e9c7 2304 	strd	r2, r3, [r7, #16]
          y = y * t * t + 1.0;
 800f036:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800f03a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800f03e:	f7f1 facd 	bl	80005dc <__aeabi_dmul>
 800f042:	4602      	mov	r2, r0
 800f044:	460b      	mov	r3, r1
 800f046:	4610      	mov	r0, r2
 800f048:	4619      	mov	r1, r3
 800f04a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800f04e:	f7f1 fac5 	bl	80005dc <__aeabi_dmul>
 800f052:	4602      	mov	r2, r0
 800f054:	460b      	mov	r3, r1
 800f056:	4610      	mov	r0, r2
 800f058:	4619      	mov	r1, r3
 800f05a:	f04f 0200 	mov.w	r2, #0
 800f05e:	4b23      	ldr	r3, [pc, #140]	; (800f0ec <xnrm2_nLdASVZH+0x158>)
 800f060:	f7f1 f906 	bl	8000270 <__adddf3>
 800f064:	4602      	mov	r2, r0
 800f066:	460b      	mov	r3, r1
 800f068:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
          scale = absxk;
 800f06c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800f070:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 800f074:	e019      	b.n	800f0aa <xnrm2_nLdASVZH+0x116>
        } else {
          real_T t;
          t = absxk / scale;
 800f076:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f07a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800f07e:	f7f1 fbd7 	bl	8000830 <__aeabi_ddiv>
 800f082:	4602      	mov	r2, r0
 800f084:	460b      	mov	r3, r1
 800f086:	e9c7 2306 	strd	r2, r3, [r7, #24]
          y += t * t;
 800f08a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800f08e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800f092:	f7f1 faa3 	bl	80005dc <__aeabi_dmul>
 800f096:	4602      	mov	r2, r0
 800f098:	460b      	mov	r3, r1
 800f09a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800f09e:	f7f1 f8e7 	bl	8000270 <__adddf3>
 800f0a2:	4602      	mov	r2, r0
 800f0a4:	460b      	mov	r3, r1
 800f0a6:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      for (k = ix0; k <= kend; k++) {
 800f0aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f0ac:	3301      	adds	r3, #1
 800f0ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f0b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f0b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0b4:	429a      	cmp	r2, r3
 800f0b6:	dd9d      	ble.n	800eff4 <xnrm2_nLdASVZH+0x60>
        }
      }

      y = scale * sqrt(y);
 800f0b8:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 800f0bc:	f00b f824 	bl	801a108 <sqrt>
 800f0c0:	ec53 2b10 	vmov	r2, r3, d0
 800f0c4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800f0c8:	f7f1 fa88 	bl	80005dc <__aeabi_dmul>
 800f0cc:	4602      	mov	r2, r0
 800f0ce:	460b      	mov	r3, r1
 800f0d0:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    }
  }

  return y;
 800f0d4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800f0d8:	ec43 2b17 	vmov	d7, r2, r3
}
 800f0dc:	eeb0 0a47 	vmov.f32	s0, s14
 800f0e0:	eef0 0a67 	vmov.f32	s1, s15
 800f0e4:	3748      	adds	r7, #72	; 0x48
 800f0e6:	46bd      	mov	sp, r7
 800f0e8:	bd80      	pop	{r7, pc}
 800f0ea:	bf00      	nop
 800f0ec:	3ff00000 	.word	0x3ff00000

0800f0f0 <xnrm2_xDOlDEtw>:
#include "rtwtypes.h"
#include "xnrm2_xDOlDEtw.h"
#include <math.h>

real_T xnrm2_xDOlDEtw(int32_T n, const real_T x[9], int32_T ix0)
{
 800f0f0:	b580      	push	{r7, lr}
 800f0f2:	b092      	sub	sp, #72	; 0x48
 800f0f4:	af00      	add	r7, sp, #0
 800f0f6:	60f8      	str	r0, [r7, #12]
 800f0f8:	60b9      	str	r1, [r7, #8]
 800f0fa:	607a      	str	r2, [r7, #4]
  real_T y;
  int32_T k;
  y = 0.0;
 800f0fc:	f04f 0200 	mov.w	r2, #0
 800f100:	f04f 0300 	mov.w	r3, #0
 800f104:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  if (n >= 1) {
 800f108:	68fb      	ldr	r3, [r7, #12]
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	f340 8090 	ble.w	800f230 <xnrm2_xDOlDEtw+0x140>
    if (n == 1) {
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	2b01      	cmp	r3, #1
 800f114:	d10e      	bne.n	800f134 <xnrm2_xDOlDEtw+0x44>
      y = fabs(x[ix0 - 1]);
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800f11c:	3b01      	subs	r3, #1
 800f11e:	00db      	lsls	r3, r3, #3
 800f120:	68ba      	ldr	r2, [r7, #8]
 800f122:	4413      	add	r3, r2
 800f124:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f128:	4611      	mov	r1, r2
 800f12a:	6439      	str	r1, [r7, #64]	; 0x40
 800f12c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f130:	647b      	str	r3, [r7, #68]	; 0x44
 800f132:	e07d      	b.n	800f230 <xnrm2_xDOlDEtw+0x140>
    } else {
      real_T scale;
      int32_T kend;
      scale = 3.3121686421112381E-170;
 800f134:	f04f 0200 	mov.w	r2, #0
 800f138:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 800f13c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      kend = (ix0 + n) - 1;
 800f140:	687a      	ldr	r2, [r7, #4]
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	4413      	add	r3, r2
 800f146:	3b01      	subs	r3, #1
 800f148:	62fb      	str	r3, [r7, #44]	; 0x2c
      for (k = ix0; k <= kend; k++) {
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f14e:	e05d      	b.n	800f20c <xnrm2_xDOlDEtw+0x11c>
        real_T absxk;
        absxk = fabs(x[k - 1]);
 800f150:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f152:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800f156:	3b01      	subs	r3, #1
 800f158:	00db      	lsls	r3, r3, #3
 800f15a:	68ba      	ldr	r2, [r7, #8]
 800f15c:	4413      	add	r3, r2
 800f15e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f162:	4611      	mov	r1, r2
 800f164:	6239      	str	r1, [r7, #32]
 800f166:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f16a:	627b      	str	r3, [r7, #36]	; 0x24
        if (absxk > scale) {
 800f16c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f170:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800f174:	f7f1 fcc2 	bl	8000afc <__aeabi_dcmpgt>
 800f178:	4603      	mov	r3, r0
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	d029      	beq.n	800f1d2 <xnrm2_xDOlDEtw+0xe2>
          real_T t;
          t = scale / absxk;
 800f17e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800f182:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800f186:	f7f1 fb53 	bl	8000830 <__aeabi_ddiv>
 800f18a:	4602      	mov	r2, r0
 800f18c:	460b      	mov	r3, r1
 800f18e:	e9c7 2304 	strd	r2, r3, [r7, #16]
          y = y * t * t + 1.0;
 800f192:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800f196:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800f19a:	f7f1 fa1f 	bl	80005dc <__aeabi_dmul>
 800f19e:	4602      	mov	r2, r0
 800f1a0:	460b      	mov	r3, r1
 800f1a2:	4610      	mov	r0, r2
 800f1a4:	4619      	mov	r1, r3
 800f1a6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800f1aa:	f7f1 fa17 	bl	80005dc <__aeabi_dmul>
 800f1ae:	4602      	mov	r2, r0
 800f1b0:	460b      	mov	r3, r1
 800f1b2:	4610      	mov	r0, r2
 800f1b4:	4619      	mov	r1, r3
 800f1b6:	f04f 0200 	mov.w	r2, #0
 800f1ba:	4b23      	ldr	r3, [pc, #140]	; (800f248 <xnrm2_xDOlDEtw+0x158>)
 800f1bc:	f7f1 f858 	bl	8000270 <__adddf3>
 800f1c0:	4602      	mov	r2, r0
 800f1c2:	460b      	mov	r3, r1
 800f1c4:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
          scale = absxk;
 800f1c8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800f1cc:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 800f1d0:	e019      	b.n	800f206 <xnrm2_xDOlDEtw+0x116>
        } else {
          real_T t;
          t = absxk / scale;
 800f1d2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f1d6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800f1da:	f7f1 fb29 	bl	8000830 <__aeabi_ddiv>
 800f1de:	4602      	mov	r2, r0
 800f1e0:	460b      	mov	r3, r1
 800f1e2:	e9c7 2306 	strd	r2, r3, [r7, #24]
          y += t * t;
 800f1e6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800f1ea:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800f1ee:	f7f1 f9f5 	bl	80005dc <__aeabi_dmul>
 800f1f2:	4602      	mov	r2, r0
 800f1f4:	460b      	mov	r3, r1
 800f1f6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800f1fa:	f7f1 f839 	bl	8000270 <__adddf3>
 800f1fe:	4602      	mov	r2, r0
 800f200:	460b      	mov	r3, r1
 800f202:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      for (k = ix0; k <= kend; k++) {
 800f206:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f208:	3301      	adds	r3, #1
 800f20a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f20c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f20e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f210:	429a      	cmp	r2, r3
 800f212:	dd9d      	ble.n	800f150 <xnrm2_xDOlDEtw+0x60>
        }
      }

      y = scale * sqrt(y);
 800f214:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 800f218:	f00a ff76 	bl	801a108 <sqrt>
 800f21c:	ec53 2b10 	vmov	r2, r3, d0
 800f220:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800f224:	f7f1 f9da 	bl	80005dc <__aeabi_dmul>
 800f228:	4602      	mov	r2, r0
 800f22a:	460b      	mov	r3, r1
 800f22c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    }
  }

  return y;
 800f230:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800f234:	ec43 2b17 	vmov	d7, r2, r3
}
 800f238:	eeb0 0a47 	vmov.f32	s0, s14
 800f23c:	eef0 0a67 	vmov.f32	s1, s15
 800f240:	3748      	adds	r7, #72	; 0x48
 800f242:	46bd      	mov	sp, r7
 800f244:	bd80      	pop	{r7, pc}
 800f246:	bf00      	nop
 800f248:	3ff00000 	.word	0x3ff00000

0800f24c <xrot_i7f01JoJ>:
#include "rtwtypes.h"
#include "xrot_i7f01JoJ.h"

void xrot_i7f01JoJ(real_T x[9], int32_T ix0, int32_T iy0, real_T c, real_T s)
{
 800f24c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800f250:	b08c      	sub	sp, #48	; 0x30
 800f252:	af00      	add	r7, sp, #0
 800f254:	61f8      	str	r0, [r7, #28]
 800f256:	61b9      	str	r1, [r7, #24]
 800f258:	617a      	str	r2, [r7, #20]
 800f25a:	ed87 0b02 	vstr	d0, [r7, #8]
 800f25e:	ed87 1b00 	vstr	d1, [r7]
  real_T temp;
  real_T temp_tmp;
  temp = x[iy0 - 1];
 800f262:	697b      	ldr	r3, [r7, #20]
 800f264:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800f268:	3b01      	subs	r3, #1
 800f26a:	00db      	lsls	r3, r3, #3
 800f26c:	69fa      	ldr	r2, [r7, #28]
 800f26e:	4413      	add	r3, r2
 800f270:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f274:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  temp_tmp = x[ix0 - 1];
 800f278:	69bb      	ldr	r3, [r7, #24]
 800f27a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800f27e:	3b01      	subs	r3, #1
 800f280:	00db      	lsls	r3, r3, #3
 800f282:	69fa      	ldr	r2, [r7, #28]
 800f284:	4413      	add	r3, r2
 800f286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f28a:	e9c7 2308 	strd	r2, r3, [r7, #32]
  x[iy0 - 1] = temp * c - temp_tmp * s;
 800f28e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800f292:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800f296:	f7f1 f9a1 	bl	80005dc <__aeabi_dmul>
 800f29a:	4602      	mov	r2, r0
 800f29c:	460b      	mov	r3, r1
 800f29e:	4690      	mov	r8, r2
 800f2a0:	4699      	mov	r9, r3
 800f2a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f2a6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800f2aa:	f7f1 f997 	bl	80005dc <__aeabi_dmul>
 800f2ae:	4602      	mov	r2, r0
 800f2b0:	460b      	mov	r3, r1
 800f2b2:	4610      	mov	r0, r2
 800f2b4:	4619      	mov	r1, r3
 800f2b6:	697b      	ldr	r3, [r7, #20]
 800f2b8:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800f2bc:	3b01      	subs	r3, #1
 800f2be:	00db      	lsls	r3, r3, #3
 800f2c0:	69fa      	ldr	r2, [r7, #28]
 800f2c2:	18d4      	adds	r4, r2, r3
 800f2c4:	4602      	mov	r2, r0
 800f2c6:	460b      	mov	r3, r1
 800f2c8:	4640      	mov	r0, r8
 800f2ca:	4649      	mov	r1, r9
 800f2cc:	f7f0 ffce 	bl	800026c <__aeabi_dsub>
 800f2d0:	4602      	mov	r2, r0
 800f2d2:	460b      	mov	r3, r1
 800f2d4:	e9c4 2300 	strd	r2, r3, [r4]
  x[ix0 - 1] = temp_tmp * c + temp * s;
 800f2d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800f2dc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800f2e0:	f7f1 f97c 	bl	80005dc <__aeabi_dmul>
 800f2e4:	4602      	mov	r2, r0
 800f2e6:	460b      	mov	r3, r1
 800f2e8:	4690      	mov	r8, r2
 800f2ea:	4699      	mov	r9, r3
 800f2ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f2f0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800f2f4:	f7f1 f972 	bl	80005dc <__aeabi_dmul>
 800f2f8:	4602      	mov	r2, r0
 800f2fa:	460b      	mov	r3, r1
 800f2fc:	4610      	mov	r0, r2
 800f2fe:	4619      	mov	r1, r3
 800f300:	69bb      	ldr	r3, [r7, #24]
 800f302:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800f306:	3b01      	subs	r3, #1
 800f308:	00db      	lsls	r3, r3, #3
 800f30a:	69fa      	ldr	r2, [r7, #28]
 800f30c:	18d4      	adds	r4, r2, r3
 800f30e:	4602      	mov	r2, r0
 800f310:	460b      	mov	r3, r1
 800f312:	4640      	mov	r0, r8
 800f314:	4649      	mov	r1, r9
 800f316:	f7f0 ffab 	bl	8000270 <__adddf3>
 800f31a:	4602      	mov	r2, r0
 800f31c:	460b      	mov	r3, r1
 800f31e:	e9c4 2300 	strd	r2, r3, [r4]
  temp = x[ix0] * c + x[iy0] * s;
 800f322:	69bb      	ldr	r3, [r7, #24]
 800f324:	00db      	lsls	r3, r3, #3
 800f326:	69fa      	ldr	r2, [r7, #28]
 800f328:	4413      	add	r3, r2
 800f32a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f32e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800f332:	f7f1 f953 	bl	80005dc <__aeabi_dmul>
 800f336:	4602      	mov	r2, r0
 800f338:	460b      	mov	r3, r1
 800f33a:	4614      	mov	r4, r2
 800f33c:	461d      	mov	r5, r3
 800f33e:	697b      	ldr	r3, [r7, #20]
 800f340:	00db      	lsls	r3, r3, #3
 800f342:	69fa      	ldr	r2, [r7, #28]
 800f344:	4413      	add	r3, r2
 800f346:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f34a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f34e:	f7f1 f945 	bl	80005dc <__aeabi_dmul>
 800f352:	4602      	mov	r2, r0
 800f354:	460b      	mov	r3, r1
 800f356:	4620      	mov	r0, r4
 800f358:	4629      	mov	r1, r5
 800f35a:	f7f0 ff89 	bl	8000270 <__adddf3>
 800f35e:	4602      	mov	r2, r0
 800f360:	460b      	mov	r3, r1
 800f362:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  x[iy0] = x[iy0] * c - x[ix0] * s;
 800f366:	697b      	ldr	r3, [r7, #20]
 800f368:	00db      	lsls	r3, r3, #3
 800f36a:	69fa      	ldr	r2, [r7, #28]
 800f36c:	4413      	add	r3, r2
 800f36e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f372:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800f376:	f7f1 f931 	bl	80005dc <__aeabi_dmul>
 800f37a:	4602      	mov	r2, r0
 800f37c:	460b      	mov	r3, r1
 800f37e:	4690      	mov	r8, r2
 800f380:	4699      	mov	r9, r3
 800f382:	69bb      	ldr	r3, [r7, #24]
 800f384:	00db      	lsls	r3, r3, #3
 800f386:	69fa      	ldr	r2, [r7, #28]
 800f388:	4413      	add	r3, r2
 800f38a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f38e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f392:	f7f1 f923 	bl	80005dc <__aeabi_dmul>
 800f396:	4602      	mov	r2, r0
 800f398:	460b      	mov	r3, r1
 800f39a:	4610      	mov	r0, r2
 800f39c:	4619      	mov	r1, r3
 800f39e:	697b      	ldr	r3, [r7, #20]
 800f3a0:	00db      	lsls	r3, r3, #3
 800f3a2:	69fa      	ldr	r2, [r7, #28]
 800f3a4:	18d4      	adds	r4, r2, r3
 800f3a6:	4602      	mov	r2, r0
 800f3a8:	460b      	mov	r3, r1
 800f3aa:	4640      	mov	r0, r8
 800f3ac:	4649      	mov	r1, r9
 800f3ae:	f7f0 ff5d 	bl	800026c <__aeabi_dsub>
 800f3b2:	4602      	mov	r2, r0
 800f3b4:	460b      	mov	r3, r1
 800f3b6:	e9c4 2300 	strd	r2, r3, [r4]
  x[ix0] = temp;
 800f3ba:	69bb      	ldr	r3, [r7, #24]
 800f3bc:	00db      	lsls	r3, r3, #3
 800f3be:	69fa      	ldr	r2, [r7, #28]
 800f3c0:	18d1      	adds	r1, r2, r3
 800f3c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800f3c6:	e9c1 2300 	strd	r2, r3, [r1]
  temp = x[iy0 + 1];
 800f3ca:	697b      	ldr	r3, [r7, #20]
 800f3cc:	3301      	adds	r3, #1
 800f3ce:	00db      	lsls	r3, r3, #3
 800f3d0:	69fa      	ldr	r2, [r7, #28]
 800f3d2:	4413      	add	r3, r2
 800f3d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3d8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  temp_tmp = x[ix0 + 1];
 800f3dc:	69bb      	ldr	r3, [r7, #24]
 800f3de:	3301      	adds	r3, #1
 800f3e0:	00db      	lsls	r3, r3, #3
 800f3e2:	69fa      	ldr	r2, [r7, #28]
 800f3e4:	4413      	add	r3, r2
 800f3e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3ea:	e9c7 2308 	strd	r2, r3, [r7, #32]
  x[iy0 + 1] = temp * c - temp_tmp * s;
 800f3ee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800f3f2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800f3f6:	f7f1 f8f1 	bl	80005dc <__aeabi_dmul>
 800f3fa:	4602      	mov	r2, r0
 800f3fc:	460b      	mov	r3, r1
 800f3fe:	4690      	mov	r8, r2
 800f400:	4699      	mov	r9, r3
 800f402:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f406:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800f40a:	f7f1 f8e7 	bl	80005dc <__aeabi_dmul>
 800f40e:	4602      	mov	r2, r0
 800f410:	460b      	mov	r3, r1
 800f412:	4610      	mov	r0, r2
 800f414:	4619      	mov	r1, r3
 800f416:	697b      	ldr	r3, [r7, #20]
 800f418:	3301      	adds	r3, #1
 800f41a:	00db      	lsls	r3, r3, #3
 800f41c:	69fa      	ldr	r2, [r7, #28]
 800f41e:	18d4      	adds	r4, r2, r3
 800f420:	4602      	mov	r2, r0
 800f422:	460b      	mov	r3, r1
 800f424:	4640      	mov	r0, r8
 800f426:	4649      	mov	r1, r9
 800f428:	f7f0 ff20 	bl	800026c <__aeabi_dsub>
 800f42c:	4602      	mov	r2, r0
 800f42e:	460b      	mov	r3, r1
 800f430:	e9c4 2300 	strd	r2, r3, [r4]
  x[ix0 + 1] = temp_tmp * c + temp * s;
 800f434:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800f438:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800f43c:	f7f1 f8ce 	bl	80005dc <__aeabi_dmul>
 800f440:	4602      	mov	r2, r0
 800f442:	460b      	mov	r3, r1
 800f444:	4690      	mov	r8, r2
 800f446:	4699      	mov	r9, r3
 800f448:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f44c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800f450:	f7f1 f8c4 	bl	80005dc <__aeabi_dmul>
 800f454:	4602      	mov	r2, r0
 800f456:	460b      	mov	r3, r1
 800f458:	4610      	mov	r0, r2
 800f45a:	4619      	mov	r1, r3
 800f45c:	69bb      	ldr	r3, [r7, #24]
 800f45e:	3301      	adds	r3, #1
 800f460:	00db      	lsls	r3, r3, #3
 800f462:	69fa      	ldr	r2, [r7, #28]
 800f464:	18d4      	adds	r4, r2, r3
 800f466:	4602      	mov	r2, r0
 800f468:	460b      	mov	r3, r1
 800f46a:	4640      	mov	r0, r8
 800f46c:	4649      	mov	r1, r9
 800f46e:	f7f0 feff 	bl	8000270 <__adddf3>
 800f472:	4602      	mov	r2, r0
 800f474:	460b      	mov	r3, r1
 800f476:	e9c4 2300 	strd	r2, r3, [r4]
}
 800f47a:	bf00      	nop
 800f47c:	3730      	adds	r7, #48	; 0x30
 800f47e:	46bd      	mov	sp, r7
 800f480:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800f484 <xrotg_XzIjz1eG>:
#include "rtwtypes.h"
#include "xrotg_XzIjz1eG.h"
#include <math.h>

void xrotg_XzIjz1eG(real_T *a, real_T *b, real_T *c, real_T *s)
{
 800f484:	b5b0      	push	{r4, r5, r7, lr}
 800f486:	b090      	sub	sp, #64	; 0x40
 800f488:	af00      	add	r7, sp, #0
 800f48a:	60f8      	str	r0, [r7, #12]
 800f48c:	60b9      	str	r1, [r7, #8]
 800f48e:	607a      	str	r2, [r7, #4]
 800f490:	603b      	str	r3, [r7, #0]
  real_T absa;
  real_T absb;
  real_T roe;
  real_T scale;
  roe = *b;
 800f492:	68bb      	ldr	r3, [r7, #8]
 800f494:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f498:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  absa = fabs(*a);
 800f49c:	68fb      	ldr	r3, [r7, #12]
 800f49e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4a2:	4611      	mov	r1, r2
 800f4a4:	62b9      	str	r1, [r7, #40]	; 0x28
 800f4a6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f4aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  absb = fabs(*b);
 800f4ac:	68bb      	ldr	r3, [r7, #8]
 800f4ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4b2:	4611      	mov	r1, r2
 800f4b4:	6239      	str	r1, [r7, #32]
 800f4b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f4ba:	627b      	str	r3, [r7, #36]	; 0x24
  if (absa > absb) {
 800f4bc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800f4c0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800f4c4:	f7f1 fb1a 	bl	8000afc <__aeabi_dcmpgt>
 800f4c8:	4603      	mov	r3, r0
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d004      	beq.n	800f4d8 <xrotg_XzIjz1eG+0x54>
    roe = *a;
 800f4ce:	68fb      	ldr	r3, [r7, #12]
 800f4d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4d4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  }

  scale = absa + absb;
 800f4d8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800f4dc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800f4e0:	f7f0 fec6 	bl	8000270 <__adddf3>
 800f4e4:	4602      	mov	r2, r0
 800f4e6:	460b      	mov	r3, r1
 800f4e8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  if (scale == 0.0) {
 800f4ec:	f04f 0200 	mov.w	r2, #0
 800f4f0:	f04f 0300 	mov.w	r3, #0
 800f4f4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800f4f8:	f7f1 fad8 	bl	8000aac <__aeabi_dcmpeq>
 800f4fc:	4603      	mov	r3, r0
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d01b      	beq.n	800f53a <xrotg_XzIjz1eG+0xb6>
    *s = 0.0;
 800f502:	6839      	ldr	r1, [r7, #0]
 800f504:	f04f 0200 	mov.w	r2, #0
 800f508:	f04f 0300 	mov.w	r3, #0
 800f50c:	e9c1 2300 	strd	r2, r3, [r1]
    *c = 1.0;
 800f510:	6879      	ldr	r1, [r7, #4]
 800f512:	f04f 0200 	mov.w	r2, #0
 800f516:	4b59      	ldr	r3, [pc, #356]	; (800f67c <xrotg_XzIjz1eG+0x1f8>)
 800f518:	e9c1 2300 	strd	r2, r3, [r1]
    *a = 0.0;
 800f51c:	68f9      	ldr	r1, [r7, #12]
 800f51e:	f04f 0200 	mov.w	r2, #0
 800f522:	f04f 0300 	mov.w	r3, #0
 800f526:	e9c1 2300 	strd	r2, r3, [r1]
    *b = 0.0;
 800f52a:	68b9      	ldr	r1, [r7, #8]
 800f52c:	f04f 0200 	mov.w	r2, #0
 800f530:	f04f 0300 	mov.w	r3, #0
 800f534:	e9c1 2300 	strd	r2, r3, [r1]
      *b = 1.0;
    }

    *a = scale;
  }
}
 800f538:	e09b      	b.n	800f672 <xrotg_XzIjz1eG+0x1ee>
    ads = absa / scale;
 800f53a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f53e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800f542:	f7f1 f975 	bl	8000830 <__aeabi_ddiv>
 800f546:	4602      	mov	r2, r0
 800f548:	460b      	mov	r3, r1
 800f54a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    bds = absb / scale;
 800f54e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f552:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800f556:	f7f1 f96b 	bl	8000830 <__aeabi_ddiv>
 800f55a:	4602      	mov	r2, r0
 800f55c:	460b      	mov	r3, r1
 800f55e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    scale *= sqrt(ads * ads + bds * bds);
 800f562:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800f566:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800f56a:	f7f1 f837 	bl	80005dc <__aeabi_dmul>
 800f56e:	4602      	mov	r2, r0
 800f570:	460b      	mov	r3, r1
 800f572:	4614      	mov	r4, r2
 800f574:	461d      	mov	r5, r3
 800f576:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800f57a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800f57e:	f7f1 f82d 	bl	80005dc <__aeabi_dmul>
 800f582:	4602      	mov	r2, r0
 800f584:	460b      	mov	r3, r1
 800f586:	4620      	mov	r0, r4
 800f588:	4629      	mov	r1, r5
 800f58a:	f7f0 fe71 	bl	8000270 <__adddf3>
 800f58e:	4602      	mov	r2, r0
 800f590:	460b      	mov	r3, r1
 800f592:	ec43 2b17 	vmov	d7, r2, r3
 800f596:	eeb0 0a47 	vmov.f32	s0, s14
 800f59a:	eef0 0a67 	vmov.f32	s1, s15
 800f59e:	f00a fdb3 	bl	801a108 <sqrt>
 800f5a2:	ec53 2b10 	vmov	r2, r3, d0
 800f5a6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800f5aa:	f7f1 f817 	bl	80005dc <__aeabi_dmul>
 800f5ae:	4602      	mov	r2, r0
 800f5b0:	460b      	mov	r3, r1
 800f5b2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    if (roe < 0.0) {
 800f5b6:	f04f 0200 	mov.w	r2, #0
 800f5ba:	f04f 0300 	mov.w	r3, #0
 800f5be:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800f5c2:	f7f1 fa7d 	bl	8000ac0 <__aeabi_dcmplt>
 800f5c6:	4603      	mov	r3, r0
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d005      	beq.n	800f5d8 <xrotg_XzIjz1eG+0x154>
      scale = -scale;
 800f5cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5ce:	633b      	str	r3, [r7, #48]	; 0x30
 800f5d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f5d2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800f5d6:	637b      	str	r3, [r7, #52]	; 0x34
    *c = *a / scale;
 800f5d8:	68fb      	ldr	r3, [r7, #12]
 800f5da:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f5de:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f5e2:	f7f1 f925 	bl	8000830 <__aeabi_ddiv>
 800f5e6:	4602      	mov	r2, r0
 800f5e8:	460b      	mov	r3, r1
 800f5ea:	6879      	ldr	r1, [r7, #4]
 800f5ec:	e9c1 2300 	strd	r2, r3, [r1]
    *s = *b / scale;
 800f5f0:	68bb      	ldr	r3, [r7, #8]
 800f5f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f5f6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f5fa:	f7f1 f919 	bl	8000830 <__aeabi_ddiv>
 800f5fe:	4602      	mov	r2, r0
 800f600:	460b      	mov	r3, r1
 800f602:	6839      	ldr	r1, [r7, #0]
 800f604:	e9c1 2300 	strd	r2, r3, [r1]
    if (absa > absb) {
 800f608:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800f60c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800f610:	f7f1 fa74 	bl	8000afc <__aeabi_dcmpgt>
 800f614:	4603      	mov	r3, r0
 800f616:	2b00      	cmp	r3, #0
 800f618:	d006      	beq.n	800f628 <xrotg_XzIjz1eG+0x1a4>
      *b = *s;
 800f61a:	683b      	ldr	r3, [r7, #0]
 800f61c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f620:	68b9      	ldr	r1, [r7, #8]
 800f622:	e9c1 2300 	strd	r2, r3, [r1]
 800f626:	e01f      	b.n	800f668 <xrotg_XzIjz1eG+0x1e4>
    } else if (*c != 0.0) {
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f62e:	f04f 0200 	mov.w	r2, #0
 800f632:	f04f 0300 	mov.w	r3, #0
 800f636:	f7f1 fa39 	bl	8000aac <__aeabi_dcmpeq>
 800f63a:	4603      	mov	r3, r0
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d10d      	bne.n	800f65c <xrotg_XzIjz1eG+0x1d8>
      *b = 1.0 / *c;
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f646:	f04f 0000 	mov.w	r0, #0
 800f64a:	490c      	ldr	r1, [pc, #48]	; (800f67c <xrotg_XzIjz1eG+0x1f8>)
 800f64c:	f7f1 f8f0 	bl	8000830 <__aeabi_ddiv>
 800f650:	4602      	mov	r2, r0
 800f652:	460b      	mov	r3, r1
 800f654:	68b9      	ldr	r1, [r7, #8]
 800f656:	e9c1 2300 	strd	r2, r3, [r1]
 800f65a:	e005      	b.n	800f668 <xrotg_XzIjz1eG+0x1e4>
      *b = 1.0;
 800f65c:	68b9      	ldr	r1, [r7, #8]
 800f65e:	f04f 0200 	mov.w	r2, #0
 800f662:	4b06      	ldr	r3, [pc, #24]	; (800f67c <xrotg_XzIjz1eG+0x1f8>)
 800f664:	e9c1 2300 	strd	r2, r3, [r1]
    *a = scale;
 800f668:	68f9      	ldr	r1, [r7, #12]
 800f66a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f66e:	e9c1 2300 	strd	r2, r3, [r1]
}
 800f672:	bf00      	nop
 800f674:	3740      	adds	r7, #64	; 0x40
 800f676:	46bd      	mov	sp, r7
 800f678:	bdb0      	pop	{r4, r5, r7, pc}
 800f67a:	bf00      	nop
 800f67c:	3ff00000 	.word	0x3ff00000

0800f680 <xscal_59GtRAwv>:
#include "rtwtypes.h"
#include "xscal_59GtRAwv.h"

void xscal_59GtRAwv(int32_T n, real_T a, real_T x[9], int32_T ix0)
{
 800f680:	b590      	push	{r4, r7, lr}
 800f682:	b089      	sub	sp, #36	; 0x24
 800f684:	af00      	add	r7, sp, #0
 800f686:	6178      	str	r0, [r7, #20]
 800f688:	ed87 0b02 	vstr	d0, [r7, #8]
 800f68c:	6139      	str	r1, [r7, #16]
 800f68e:	607a      	str	r2, [r7, #4]
  int32_T b;
  int32_T k;
  b = (ix0 + n) - 1;
 800f690:	687a      	ldr	r2, [r7, #4]
 800f692:	697b      	ldr	r3, [r7, #20]
 800f694:	4413      	add	r3, r2
 800f696:	3b01      	subs	r3, #1
 800f698:	61bb      	str	r3, [r7, #24]
  for (k = ix0; k <= b; k++) {
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	61fb      	str	r3, [r7, #28]
 800f69e:	e01a      	b.n	800f6d6 <xscal_59GtRAwv+0x56>
    x[k - 1] *= a;
 800f6a0:	69fb      	ldr	r3, [r7, #28]
 800f6a2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800f6a6:	3b01      	subs	r3, #1
 800f6a8:	00db      	lsls	r3, r3, #3
 800f6aa:	693a      	ldr	r2, [r7, #16]
 800f6ac:	4413      	add	r3, r2
 800f6ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f6b2:	69fb      	ldr	r3, [r7, #28]
 800f6b4:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800f6b8:	3b01      	subs	r3, #1
 800f6ba:	00db      	lsls	r3, r3, #3
 800f6bc:	693a      	ldr	r2, [r7, #16]
 800f6be:	18d4      	adds	r4, r2, r3
 800f6c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800f6c4:	f7f0 ff8a 	bl	80005dc <__aeabi_dmul>
 800f6c8:	4602      	mov	r2, r0
 800f6ca:	460b      	mov	r3, r1
 800f6cc:	e9c4 2300 	strd	r2, r3, [r4]
  for (k = ix0; k <= b; k++) {
 800f6d0:	69fb      	ldr	r3, [r7, #28]
 800f6d2:	3301      	adds	r3, #1
 800f6d4:	61fb      	str	r3, [r7, #28]
 800f6d6:	69fa      	ldr	r2, [r7, #28]
 800f6d8:	69bb      	ldr	r3, [r7, #24]
 800f6da:	429a      	cmp	r2, r3
 800f6dc:	dde0      	ble.n	800f6a0 <xscal_59GtRAwv+0x20>
  }
}
 800f6de:	bf00      	nop
 800f6e0:	bf00      	nop
 800f6e2:	3724      	adds	r7, #36	; 0x24
 800f6e4:	46bd      	mov	sp, r7
 800f6e6:	bd90      	pop	{r4, r7, pc}

0800f6e8 <xscal_PLmmUlD2>:
#include "rtwtypes.h"
#include "xscal_PLmmUlD2.h"

void xscal_PLmmUlD2(int32_T n, real_T a, real_T x[3], int32_T ix0)
{
 800f6e8:	b590      	push	{r4, r7, lr}
 800f6ea:	b089      	sub	sp, #36	; 0x24
 800f6ec:	af00      	add	r7, sp, #0
 800f6ee:	6178      	str	r0, [r7, #20]
 800f6f0:	ed87 0b02 	vstr	d0, [r7, #8]
 800f6f4:	6139      	str	r1, [r7, #16]
 800f6f6:	607a      	str	r2, [r7, #4]
  int32_T b;
  int32_T k;
  b = (ix0 + n) - 1;
 800f6f8:	687a      	ldr	r2, [r7, #4]
 800f6fa:	697b      	ldr	r3, [r7, #20]
 800f6fc:	4413      	add	r3, r2
 800f6fe:	3b01      	subs	r3, #1
 800f700:	61bb      	str	r3, [r7, #24]
  for (k = ix0; k <= b; k++) {
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	61fb      	str	r3, [r7, #28]
 800f706:	e01a      	b.n	800f73e <xscal_PLmmUlD2+0x56>
    x[k - 1] *= a;
 800f708:	69fb      	ldr	r3, [r7, #28]
 800f70a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800f70e:	3b01      	subs	r3, #1
 800f710:	00db      	lsls	r3, r3, #3
 800f712:	693a      	ldr	r2, [r7, #16]
 800f714:	4413      	add	r3, r2
 800f716:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f71a:	69fb      	ldr	r3, [r7, #28]
 800f71c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800f720:	3b01      	subs	r3, #1
 800f722:	00db      	lsls	r3, r3, #3
 800f724:	693a      	ldr	r2, [r7, #16]
 800f726:	18d4      	adds	r4, r2, r3
 800f728:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800f72c:	f7f0 ff56 	bl	80005dc <__aeabi_dmul>
 800f730:	4602      	mov	r2, r0
 800f732:	460b      	mov	r3, r1
 800f734:	e9c4 2300 	strd	r2, r3, [r4]
  for (k = ix0; k <= b; k++) {
 800f738:	69fb      	ldr	r3, [r7, #28]
 800f73a:	3301      	adds	r3, #1
 800f73c:	61fb      	str	r3, [r7, #28]
 800f73e:	69fa      	ldr	r2, [r7, #28]
 800f740:	69bb      	ldr	r3, [r7, #24]
 800f742:	429a      	cmp	r2, r3
 800f744:	dde0      	ble.n	800f708 <xscal_PLmmUlD2+0x20>
  }
}
 800f746:	bf00      	nop
 800f748:	bf00      	nop
 800f74a:	3724      	adds	r7, #36	; 0x24
 800f74c:	46bd      	mov	sp, r7
 800f74e:	bd90      	pop	{r4, r7, pc}

0800f750 <xscal_eaAxXsvQ>:
#include "rtwtypes.h"
#include "xscal_eaAxXsvQ.h"

void xscal_eaAxXsvQ(real_T a, real_T x[9], int32_T ix0)
{
 800f750:	b590      	push	{r4, r7, lr}
 800f752:	b087      	sub	sp, #28
 800f754:	af00      	add	r7, sp, #0
 800f756:	ed87 0b02 	vstr	d0, [r7, #8]
 800f75a:	6078      	str	r0, [r7, #4]
 800f75c:	6039      	str	r1, [r7, #0]
  int32_T k;
  for (k = ix0; k <= ix0 + 2; k++) {
 800f75e:	683b      	ldr	r3, [r7, #0]
 800f760:	617b      	str	r3, [r7, #20]
 800f762:	e01a      	b.n	800f79a <xscal_eaAxXsvQ+0x4a>
    x[k - 1] *= a;
 800f764:	697b      	ldr	r3, [r7, #20]
 800f766:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800f76a:	3b01      	subs	r3, #1
 800f76c:	00db      	lsls	r3, r3, #3
 800f76e:	687a      	ldr	r2, [r7, #4]
 800f770:	4413      	add	r3, r2
 800f772:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f776:	697b      	ldr	r3, [r7, #20]
 800f778:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800f77c:	3b01      	subs	r3, #1
 800f77e:	00db      	lsls	r3, r3, #3
 800f780:	687a      	ldr	r2, [r7, #4]
 800f782:	18d4      	adds	r4, r2, r3
 800f784:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800f788:	f7f0 ff28 	bl	80005dc <__aeabi_dmul>
 800f78c:	4602      	mov	r2, r0
 800f78e:	460b      	mov	r3, r1
 800f790:	e9c4 2300 	strd	r2, r3, [r4]
  for (k = ix0; k <= ix0 + 2; k++) {
 800f794:	697b      	ldr	r3, [r7, #20]
 800f796:	3301      	adds	r3, #1
 800f798:	617b      	str	r3, [r7, #20]
 800f79a:	683b      	ldr	r3, [r7, #0]
 800f79c:	3302      	adds	r3, #2
 800f79e:	697a      	ldr	r2, [r7, #20]
 800f7a0:	429a      	cmp	r2, r3
 800f7a2:	dddf      	ble.n	800f764 <xscal_eaAxXsvQ+0x14>
  }
}
 800f7a4:	bf00      	nop
 800f7a6:	bf00      	nop
 800f7a8:	371c      	adds	r7, #28
 800f7aa:	46bd      	mov	sp, r7
 800f7ac:	bd90      	pop	{r4, r7, pc}

0800f7ae <xswap_JoAqPjUv>:
#include "rtwtypes.h"
#include "xswap_JoAqPjUv.h"

void xswap_JoAqPjUv(real_T x[9], int32_T ix0, int32_T iy0)
{
 800f7ae:	b480      	push	{r7}
 800f7b0:	b087      	sub	sp, #28
 800f7b2:	af00      	add	r7, sp, #0
 800f7b4:	60f8      	str	r0, [r7, #12]
 800f7b6:	60b9      	str	r1, [r7, #8]
 800f7b8:	607a      	str	r2, [r7, #4]
  real_T temp;
  temp = x[ix0 - 1];
 800f7ba:	68bb      	ldr	r3, [r7, #8]
 800f7bc:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800f7c0:	3b01      	subs	r3, #1
 800f7c2:	00db      	lsls	r3, r3, #3
 800f7c4:	68fa      	ldr	r2, [r7, #12]
 800f7c6:	4413      	add	r3, r2
 800f7c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7cc:	e9c7 2304 	strd	r2, r3, [r7, #16]
  x[ix0 - 1] = x[iy0 - 1];
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800f7d6:	3b01      	subs	r3, #1
 800f7d8:	00db      	lsls	r3, r3, #3
 800f7da:	68fa      	ldr	r2, [r7, #12]
 800f7dc:	441a      	add	r2, r3
 800f7de:	68bb      	ldr	r3, [r7, #8]
 800f7e0:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800f7e4:	3b01      	subs	r3, #1
 800f7e6:	00db      	lsls	r3, r3, #3
 800f7e8:	68f9      	ldr	r1, [r7, #12]
 800f7ea:	4419      	add	r1, r3
 800f7ec:	e9d2 2300 	ldrd	r2, r3, [r2]
 800f7f0:	e9c1 2300 	strd	r2, r3, [r1]
  x[iy0 - 1] = temp;
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800f7fa:	3b01      	subs	r3, #1
 800f7fc:	00db      	lsls	r3, r3, #3
 800f7fe:	68fa      	ldr	r2, [r7, #12]
 800f800:	18d1      	adds	r1, r2, r3
 800f802:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800f806:	e9c1 2300 	strd	r2, r3, [r1]
  temp = x[ix0];
 800f80a:	68bb      	ldr	r3, [r7, #8]
 800f80c:	00db      	lsls	r3, r3, #3
 800f80e:	68fa      	ldr	r2, [r7, #12]
 800f810:	4413      	add	r3, r2
 800f812:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f816:	e9c7 2304 	strd	r2, r3, [r7, #16]
  x[ix0] = x[iy0];
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	00db      	lsls	r3, r3, #3
 800f81e:	68fa      	ldr	r2, [r7, #12]
 800f820:	4413      	add	r3, r2
 800f822:	68ba      	ldr	r2, [r7, #8]
 800f824:	00d2      	lsls	r2, r2, #3
 800f826:	68f9      	ldr	r1, [r7, #12]
 800f828:	4411      	add	r1, r2
 800f82a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f82e:	e9c1 2300 	strd	r2, r3, [r1]
  x[iy0] = temp;
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	00db      	lsls	r3, r3, #3
 800f836:	68fa      	ldr	r2, [r7, #12]
 800f838:	18d1      	adds	r1, r2, r3
 800f83a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800f83e:	e9c1 2300 	strd	r2, r3, [r1]
  temp = x[ix0 + 1];
 800f842:	68bb      	ldr	r3, [r7, #8]
 800f844:	3301      	adds	r3, #1
 800f846:	00db      	lsls	r3, r3, #3
 800f848:	68fa      	ldr	r2, [r7, #12]
 800f84a:	4413      	add	r3, r2
 800f84c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f850:	e9c7 2304 	strd	r2, r3, [r7, #16]
  x[ix0 + 1] = x[iy0 + 1];
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	3301      	adds	r3, #1
 800f858:	00db      	lsls	r3, r3, #3
 800f85a:	68fa      	ldr	r2, [r7, #12]
 800f85c:	4413      	add	r3, r2
 800f85e:	68ba      	ldr	r2, [r7, #8]
 800f860:	3201      	adds	r2, #1
 800f862:	00d2      	lsls	r2, r2, #3
 800f864:	68f9      	ldr	r1, [r7, #12]
 800f866:	4411      	add	r1, r2
 800f868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f86c:	e9c1 2300 	strd	r2, r3, [r1]
  x[iy0 + 1] = temp;
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	3301      	adds	r3, #1
 800f874:	00db      	lsls	r3, r3, #3
 800f876:	68fa      	ldr	r2, [r7, #12]
 800f878:	18d1      	adds	r1, r2, r3
 800f87a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800f87e:	e9c1 2300 	strd	r2, r3, [r1]
}
 800f882:	bf00      	nop
 800f884:	371c      	adds	r7, #28
 800f886:	46bd      	mov	sp, r7
 800f888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f88c:	4770      	bx	lr
	...

0800f890 <after>:
#include "smile_callbacks.h"
#include "smile_data.h"
#include "smile.h"


uint8_t after(uint32_t* timer, float boundary) {
 800f890:	b480      	push	{r7}
 800f892:	b083      	sub	sp, #12
 800f894:	af00      	add	r7, sp, #0
 800f896:	6078      	str	r0, [r7, #4]
 800f898:	ed87 0a00 	vstr	s0, [r7]
   return !(timer[0]*ams_parameters.Ts_f32 < boundary);
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	681b      	ldr	r3, [r3, #0]
 800f8a0:	ee07 3a90 	vmov	s15, r3
 800f8a4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800f8a8:	4b0c      	ldr	r3, [pc, #48]	; (800f8dc <after+0x4c>)
 800f8aa:	edd3 7a01 	vldr	s15, [r3, #4]
 800f8ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f8b2:	ed97 7a00 	vldr	s14, [r7]
 800f8b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f8ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8be:	bfcc      	ite	gt
 800f8c0:	2301      	movgt	r3, #1
 800f8c2:	2300      	movle	r3, #0
 800f8c4:	b2db      	uxtb	r3, r3
 800f8c6:	f083 0301 	eor.w	r3, r3, #1
 800f8ca:	b2db      	uxtb	r3, r3
 800f8cc:	b2db      	uxtb	r3, r3
}
 800f8ce:	4618      	mov	r0, r3
 800f8d0:	370c      	adds	r7, #12
 800f8d2:	46bd      	mov	sp, r7
 800f8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8d8:	4770      	bx	lr
 800f8da:	bf00      	nop
 800f8dc:	2001b6ec 	.word	0x2001b6ec

0800f8e0 <before>:

uint8_t before(uint32_t* timer, float boundary) {
 800f8e0:	b480      	push	{r7}
 800f8e2:	b083      	sub	sp, #12
 800f8e4:	af00      	add	r7, sp, #0
 800f8e6:	6078      	str	r0, [r7, #4]
 800f8e8:	ed87 0a00 	vstr	s0, [r7]
   return (timer[0]*ams_parameters.Ts_f32 < boundary);
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	681b      	ldr	r3, [r3, #0]
 800f8f0:	ee07 3a90 	vmov	s15, r3
 800f8f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800f8f8:	4b0a      	ldr	r3, [pc, #40]	; (800f924 <before+0x44>)
 800f8fa:	edd3 7a01 	vldr	s15, [r3, #4]
 800f8fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f902:	ed97 7a00 	vldr	s14, [r7]
 800f906:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f90a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f90e:	bfcc      	ite	gt
 800f910:	2301      	movgt	r3, #1
 800f912:	2300      	movle	r3, #0
 800f914:	b2db      	uxtb	r3, r3
}
 800f916:	4618      	mov	r0, r3
 800f918:	370c      	adds	r7, #12
 800f91a:	46bd      	mov	sp, r7
 800f91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f920:	4770      	bx	lr
 800f922:	bf00      	nop
 800f924:	2001b6ec 	.word	0x2001b6ec

0800f928 <do_balance_v0>:

__weak void do_balance_v0() {
 800f928:	b480      	push	{r7}
 800f92a:	af00      	add	r7, sp, #0
   /* Type your actual code somewhere else */
}
 800f92c:	bf00      	nop
 800f92e:	46bd      	mov	sp, r7
 800f930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f934:	4770      	bx	lr

0800f936 <zero_out_balance_v0>:
__weak void zero_out_balance_v0() {
 800f936:	b480      	push	{r7}
 800f938:	af00      	add	r7, sp, #0
   /* Type your actual code somewhere else */
}
 800f93a:	bf00      	nop
 800f93c:	46bd      	mov	sp, r7
 800f93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f942:	4770      	bx	lr

0800f944 <ams_0>:
void ams_0(uint32_t* super_timer, uint8_t* super_state) {
 800f944:	b480      	push	{r7}
 800f946:	b083      	sub	sp, #12
 800f948:	af00      	add	r7, sp, #0
 800f94a:	6078      	str	r0, [r7, #4]
 800f94c:	6039      	str	r1, [r7, #0]
   if(1) {
       ams_outputs.balances_126u8;
       super_timer[0] = 0;
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	2200      	movs	r2, #0
 800f952:	601a      	str	r2, [r3, #0]
       super_state[0] = AMS_ENTRY_STATE;
 800f954:	683b      	ldr	r3, [r7, #0]
 800f956:	2201      	movs	r2, #1
 800f958:	701a      	strb	r2, [r3, #0]
   }

}
 800f95a:	bf00      	nop
 800f95c:	370c      	adds	r7, #12
 800f95e:	46bd      	mov	sp, r7
 800f960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f964:	4770      	bx	lr
	...

0800f968 <ams_entry>:
void ams_entry(uint32_t* super_timer, uint8_t* super_state) {
 800f968:	b580      	push	{r7, lr}
 800f96a:	b082      	sub	sp, #8
 800f96c:	af00      	add	r7, sp, #0
 800f96e:	6078      	str	r0, [r7, #4]
 800f970:	6039      	str	r1, [r7, #0]
   static uint32_t timer = 0;
   timer++;
 800f972:	4b19      	ldr	r3, [pc, #100]	; (800f9d8 <ams_entry+0x70>)
 800f974:	681b      	ldr	r3, [r3, #0]
 800f976:	3301      	adds	r3, #1
 800f978:	4a17      	ldr	r2, [pc, #92]	; (800f9d8 <ams_entry+0x70>)
 800f97a:	6013      	str	r3, [r2, #0]
   if (super_timer[0] == 0) {
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	681b      	ldr	r3, [r3, #0]
 800f980:	2b00      	cmp	r3, #0
 800f982:	d102      	bne.n	800f98a <ams_entry+0x22>
       timer = 0;
 800f984:	4b14      	ldr	r3, [pc, #80]	; (800f9d8 <ams_entry+0x70>)
 800f986:	2200      	movs	r2, #0
 800f988:	601a      	str	r2, [r3, #0]
   }

   if(1) {
       ams_parameters.precharge_drive_complete_u8=0;
 800f98a:	4b14      	ldr	r3, [pc, #80]	; (800f9dc <ams_entry+0x74>)
 800f98c:	2200      	movs	r2, #0
 800f98e:	701a      	strb	r2, [r3, #0]
       ams_parameters.precharge_charge_complete_u8=0;
 800f990:	4b12      	ldr	r3, [pc, #72]	; (800f9dc <ams_entry+0x74>)
 800f992:	2200      	movs	r2, #0
 800f994:	70da      	strb	r2, [r3, #3]
       zero_out_balance_v0();
 800f996:	f7ff ffce 	bl	800f936 <zero_out_balance_v0>
       ams_outputs.enable_charge_u8=0;
 800f99a:	4b11      	ldr	r3, [pc, #68]	; (800f9e0 <ams_entry+0x78>)
 800f99c:	2200      	movs	r2, #0
 800f99e:	701a      	strb	r2, [r3, #0]
       ams_outputs.enable_precharge_u8=0;
 800f9a0:	4b0f      	ldr	r3, [pc, #60]	; (800f9e0 <ams_entry+0x78>)
 800f9a2:	2200      	movs	r2, #0
 800f9a4:	709a      	strb	r2, [r3, #2]
       ams_outputs.enable_AIR_plus_u8=0;
 800f9a6:	4b0e      	ldr	r3, [pc, #56]	; (800f9e0 <ams_entry+0x78>)
 800f9a8:	2200      	movs	r2, #0
 800f9aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
       ams_outputs.enable_AIR_minus_u8=0;
 800f9ae:	4b0c      	ldr	r3, [pc, #48]	; (800f9e0 <ams_entry+0x78>)
 800f9b0:	2200      	movs	r2, #0
 800f9b2:	705a      	strb	r2, [r3, #1]
   }
   if(after(&timer,5)) {
 800f9b4:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 800f9b8:	4807      	ldr	r0, [pc, #28]	; (800f9d8 <ams_entry+0x70>)
 800f9ba:	f7ff ff69 	bl	800f890 <after>
 800f9be:	4603      	mov	r3, r0
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d005      	beq.n	800f9d0 <ams_entry+0x68>
       super_timer[0] = 0;
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	2200      	movs	r2, #0
 800f9c8:	601a      	str	r2, [r3, #0]
       super_state[0] = AMS_IDLE_STATE;
 800f9ca:	683b      	ldr	r3, [r7, #0]
 800f9cc:	2202      	movs	r2, #2
 800f9ce:	701a      	strb	r2, [r3, #0]
   }

}
 800f9d0:	bf00      	nop
 800f9d2:	3708      	adds	r7, #8
 800f9d4:	46bd      	mov	sp, r7
 800f9d6:	bd80      	pop	{r7, pc}
 800f9d8:	20001764 	.word	0x20001764
 800f9dc:	2001b6ec 	.word	0x2001b6ec
 800f9e0:	2001b6f4 	.word	0x2001b6f4

0800f9e4 <ams_idle>:
void ams_idle(uint32_t* super_timer, uint8_t* super_state) {
 800f9e4:	b480      	push	{r7}
 800f9e6:	b083      	sub	sp, #12
 800f9e8:	af00      	add	r7, sp, #0
 800f9ea:	6078      	str	r0, [r7, #4]
 800f9ec:	6039      	str	r1, [r7, #0]
   if(ams_inputs.SC_u8&&ams_inputs.balance_u8) {
 800f9ee:	4b18      	ldr	r3, [pc, #96]	; (800fa50 <ams_idle+0x6c>)
 800f9f0:	7e9b      	ldrb	r3, [r3, #26]
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d009      	beq.n	800fa0a <ams_idle+0x26>
 800f9f6:	4b16      	ldr	r3, [pc, #88]	; (800fa50 <ams_idle+0x6c>)
 800f9f8:	7a9b      	ldrb	r3, [r3, #10]
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d005      	beq.n	800fa0a <ams_idle+0x26>
       super_timer[0] = 0;
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	2200      	movs	r2, #0
 800fa02:	601a      	str	r2, [r3, #0]
       super_state[0] = AMS_BALANCE_STATE;
 800fa04:	683b      	ldr	r3, [r7, #0]
 800fa06:	2203      	movs	r2, #3
 800fa08:	701a      	strb	r2, [r3, #0]
   }
   if(ams_inputs.SC_u8&&ams_inputs.drive_u8) {
 800fa0a:	4b11      	ldr	r3, [pc, #68]	; (800fa50 <ams_idle+0x6c>)
 800fa0c:	7e9b      	ldrb	r3, [r3, #26]
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d009      	beq.n	800fa26 <ams_idle+0x42>
 800fa12:	4b0f      	ldr	r3, [pc, #60]	; (800fa50 <ams_idle+0x6c>)
 800fa14:	7a5b      	ldrb	r3, [r3, #9]
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d005      	beq.n	800fa26 <ams_idle+0x42>
       super_timer[0] = 0;
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	2200      	movs	r2, #0
 800fa1e:	601a      	str	r2, [r3, #0]
       super_state[0] = AMS_PRECHARGE_DRIVE_STATE;
 800fa20:	683b      	ldr	r3, [r7, #0]
 800fa22:	2204      	movs	r2, #4
 800fa24:	701a      	strb	r2, [r3, #0]
   }
   if(ams_inputs.SC_u8&&ams_inputs.charge_u8) {
 800fa26:	4b0a      	ldr	r3, [pc, #40]	; (800fa50 <ams_idle+0x6c>)
 800fa28:	7e9b      	ldrb	r3, [r3, #26]
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d009      	beq.n	800fa42 <ams_idle+0x5e>
 800fa2e:	4b08      	ldr	r3, [pc, #32]	; (800fa50 <ams_idle+0x6c>)
 800fa30:	7e1b      	ldrb	r3, [r3, #24]
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	d005      	beq.n	800fa42 <ams_idle+0x5e>
       super_timer[0] = 0;
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	2200      	movs	r2, #0
 800fa3a:	601a      	str	r2, [r3, #0]
       super_state[0] = AMS_PRECHARGE_CHARGE_STATE;
 800fa3c:	683b      	ldr	r3, [r7, #0]
 800fa3e:	2207      	movs	r2, #7
 800fa40:	701a      	strb	r2, [r3, #0]
   }

}
 800fa42:	bf00      	nop
 800fa44:	370c      	adds	r7, #12
 800fa46:	46bd      	mov	sp, r7
 800fa48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa4c:	4770      	bx	lr
 800fa4e:	bf00      	nop
 800fa50:	2001b6b0 	.word	0x2001b6b0
 800fa54:	00000000 	.word	0x00000000

0800fa58 <ams_balance>:
void ams_balance(uint32_t* super_timer, uint8_t* super_state) {
 800fa58:	b580      	push	{r7, lr}
 800fa5a:	b082      	sub	sp, #8
 800fa5c:	af00      	add	r7, sp, #0
 800fa5e:	6078      	str	r0, [r7, #4]
 800fa60:	6039      	str	r1, [r7, #0]
   static uint32_t timer = 0;
   timer++;
 800fa62:	4b19      	ldr	r3, [pc, #100]	; (800fac8 <ams_balance+0x70>)
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	3301      	adds	r3, #1
 800fa68:	4a17      	ldr	r2, [pc, #92]	; (800fac8 <ams_balance+0x70>)
 800fa6a:	6013      	str	r3, [r2, #0]
   if (super_timer[0] == 0) {
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d102      	bne.n	800fa7a <ams_balance+0x22>
       timer = 0;
 800fa74:	4b14      	ldr	r3, [pc, #80]	; (800fac8 <ams_balance+0x70>)
 800fa76:	2200      	movs	r2, #0
 800fa78:	601a      	str	r2, [r3, #0]
   }

   if(after(&timer,60)) {
 800fa7a:	ed9f 0a14 	vldr	s0, [pc, #80]	; 800facc <ams_balance+0x74>
 800fa7e:	4812      	ldr	r0, [pc, #72]	; (800fac8 <ams_balance+0x70>)
 800fa80:	f7ff ff06 	bl	800f890 <after>
 800fa84:	4603      	mov	r3, r0
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	d001      	beq.n	800fa8e <ams_balance+0x36>
       do_balance_v0();
 800fa8a:	f7ff ff4d 	bl	800f928 <do_balance_v0>
   }
   if(ams_inputs.U_variance_f64<0.00001) {
 800fa8e:	4b10      	ldr	r3, [pc, #64]	; (800fad0 <ams_balance+0x78>)
 800fa90:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800fa94:	a30a      	add	r3, pc, #40	; (adr r3, 800fac0 <ams_balance+0x68>)
 800fa96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa9a:	f7f1 f811 	bl	8000ac0 <__aeabi_dcmplt>
 800fa9e:	4603      	mov	r3, r0
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	d100      	bne.n	800faa6 <ams_balance+0x4e>
       zero_out_balance_v0();
       super_timer[0] = 0;
       super_state[0] = AMS_IDLE_STATE;
   }

}
 800faa4:	e007      	b.n	800fab6 <ams_balance+0x5e>
       zero_out_balance_v0();
 800faa6:	f7ff ff46 	bl	800f936 <zero_out_balance_v0>
       super_timer[0] = 0;
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	2200      	movs	r2, #0
 800faae:	601a      	str	r2, [r3, #0]
       super_state[0] = AMS_IDLE_STATE;
 800fab0:	683b      	ldr	r3, [r7, #0]
 800fab2:	2202      	movs	r2, #2
 800fab4:	701a      	strb	r2, [r3, #0]
}
 800fab6:	bf00      	nop
 800fab8:	3708      	adds	r7, #8
 800faba:	46bd      	mov	sp, r7
 800fabc:	bd80      	pop	{r7, pc}
 800fabe:	bf00      	nop
 800fac0:	88e368f1 	.word	0x88e368f1
 800fac4:	3ee4f8b5 	.word	0x3ee4f8b5
 800fac8:	20001768 	.word	0x20001768
 800facc:	42700000 	.word	0x42700000
 800fad0:	2001b6b0 	.word	0x2001b6b0

0800fad4 <ams_precharge_drive_0>:
void ams_precharge_drive_0(uint32_t* super_timer, uint8_t* super_state) {
 800fad4:	b480      	push	{r7}
 800fad6:	b083      	sub	sp, #12
 800fad8:	af00      	add	r7, sp, #0
 800fada:	6078      	str	r0, [r7, #4]
 800fadc:	6039      	str	r1, [r7, #0]
   if(1) {
       ams_outputs.enable_AIR_minus_u8=1;
 800fade:	4b07      	ldr	r3, [pc, #28]	; (800fafc <ams_precharge_drive_0+0x28>)
 800fae0:	2201      	movs	r2, #1
 800fae2:	705a      	strb	r2, [r3, #1]
       super_timer[0] = 0;
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	2200      	movs	r2, #0
 800fae8:	601a      	str	r2, [r3, #0]
       super_state[0] = AMS_PRECHARGE_DRIVE_CLOSE_AIR_MINUS_STATE;
 800faea:	683b      	ldr	r3, [r7, #0]
 800faec:	2201      	movs	r2, #1
 800faee:	701a      	strb	r2, [r3, #0]
   }

}
 800faf0:	bf00      	nop
 800faf2:	370c      	adds	r7, #12
 800faf4:	46bd      	mov	sp, r7
 800faf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fafa:	4770      	bx	lr
 800fafc:	2001b6f4 	.word	0x2001b6f4

0800fb00 <ams_precharge_drive_close_air_minus>:
void ams_precharge_drive_close_air_minus(uint32_t* super_timer, uint8_t* super_state) {
 800fb00:	b580      	push	{r7, lr}
 800fb02:	b082      	sub	sp, #8
 800fb04:	af00      	add	r7, sp, #0
 800fb06:	6078      	str	r0, [r7, #4]
 800fb08:	6039      	str	r1, [r7, #0]
   static uint32_t timer = 0;
   timer++;
 800fb0a:	4b19      	ldr	r3, [pc, #100]	; (800fb70 <ams_precharge_drive_close_air_minus+0x70>)
 800fb0c:	681b      	ldr	r3, [r3, #0]
 800fb0e:	3301      	adds	r3, #1
 800fb10:	4a17      	ldr	r2, [pc, #92]	; (800fb70 <ams_precharge_drive_close_air_minus+0x70>)
 800fb12:	6013      	str	r3, [r2, #0]
   if (super_timer[0] == 0) {
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	681b      	ldr	r3, [r3, #0]
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d102      	bne.n	800fb22 <ams_precharge_drive_close_air_minus+0x22>
       timer = 0;
 800fb1c:	4b14      	ldr	r3, [pc, #80]	; (800fb70 <ams_precharge_drive_close_air_minus+0x70>)
 800fb1e:	2200      	movs	r2, #0
 800fb20:	601a      	str	r2, [r3, #0]
   }

   if(before(&timer,2)&&(ams_inputs.AIR_minus_closed_u8==1)) {
 800fb22:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800fb26:	4812      	ldr	r0, [pc, #72]	; (800fb70 <ams_precharge_drive_close_air_minus+0x70>)
 800fb28:	f7ff feda 	bl	800f8e0 <before>
 800fb2c:	4603      	mov	r3, r0
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	d00c      	beq.n	800fb4c <ams_precharge_drive_close_air_minus+0x4c>
 800fb32:	4b10      	ldr	r3, [pc, #64]	; (800fb74 <ams_precharge_drive_close_air_minus+0x74>)
 800fb34:	7a1b      	ldrb	r3, [r3, #8]
 800fb36:	2b01      	cmp	r3, #1
 800fb38:	d108      	bne.n	800fb4c <ams_precharge_drive_close_air_minus+0x4c>
       ams_outputs.enable_precharge_u8=1;
 800fb3a:	4b0f      	ldr	r3, [pc, #60]	; (800fb78 <ams_precharge_drive_close_air_minus+0x78>)
 800fb3c:	2201      	movs	r2, #1
 800fb3e:	709a      	strb	r2, [r3, #2]
       super_timer[0] = 0;
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	2200      	movs	r2, #0
 800fb44:	601a      	str	r2, [r3, #0]
       super_state[0] = AMS_PRECHARGE_DRIVE_CLOSE_PRECHARGE_STATE;
 800fb46:	683b      	ldr	r3, [r7, #0]
 800fb48:	2202      	movs	r2, #2
 800fb4a:	701a      	strb	r2, [r3, #0]
   }
   if(after(&timer,2)) {
 800fb4c:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800fb50:	4807      	ldr	r0, [pc, #28]	; (800fb70 <ams_precharge_drive_close_air_minus+0x70>)
 800fb52:	f7ff fe9d 	bl	800f890 <after>
 800fb56:	4603      	mov	r3, r0
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d005      	beq.n	800fb68 <ams_precharge_drive_close_air_minus+0x68>
       super_timer[0] = 0;
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	2200      	movs	r2, #0
 800fb60:	601a      	str	r2, [r3, #0]
       super_state[0] = AMS_PRECHARGE_DRIVE_ERROR_STATE;
 800fb62:	683b      	ldr	r3, [r7, #0]
 800fb64:	2203      	movs	r2, #3
 800fb66:	701a      	strb	r2, [r3, #0]
   }

}
 800fb68:	bf00      	nop
 800fb6a:	3708      	adds	r7, #8
 800fb6c:	46bd      	mov	sp, r7
 800fb6e:	bd80      	pop	{r7, pc}
 800fb70:	2000176c 	.word	0x2000176c
 800fb74:	2001b6b0 	.word	0x2001b6b0
 800fb78:	2001b6f4 	.word	0x2001b6f4

0800fb7c <ams_precharge_drive_close_precharge>:
void ams_precharge_drive_close_precharge(uint32_t* super_timer, uint8_t* super_state) {
 800fb7c:	b580      	push	{r7, lr}
 800fb7e:	b082      	sub	sp, #8
 800fb80:	af00      	add	r7, sp, #0
 800fb82:	6078      	str	r0, [r7, #4]
 800fb84:	6039      	str	r1, [r7, #0]
   static uint32_t timer = 0;
   timer++;
 800fb86:	4b19      	ldr	r3, [pc, #100]	; (800fbec <ams_precharge_drive_close_precharge+0x70>)
 800fb88:	681b      	ldr	r3, [r3, #0]
 800fb8a:	3301      	adds	r3, #1
 800fb8c:	4a17      	ldr	r2, [pc, #92]	; (800fbec <ams_precharge_drive_close_precharge+0x70>)
 800fb8e:	6013      	str	r3, [r2, #0]
   if (super_timer[0] == 0) {
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	681b      	ldr	r3, [r3, #0]
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	d102      	bne.n	800fb9e <ams_precharge_drive_close_precharge+0x22>
       timer = 0;
 800fb98:	4b14      	ldr	r3, [pc, #80]	; (800fbec <ams_precharge_drive_close_precharge+0x70>)
 800fb9a:	2200      	movs	r2, #0
 800fb9c:	601a      	str	r2, [r3, #0]
   }

   if(before(&timer,2)&&(ams_inputs.precharge_closed_u8==1)) {
 800fb9e:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800fba2:	4812      	ldr	r0, [pc, #72]	; (800fbec <ams_precharge_drive_close_precharge+0x70>)
 800fba4:	f7ff fe9c 	bl	800f8e0 <before>
 800fba8:	4603      	mov	r3, r0
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d00c      	beq.n	800fbc8 <ams_precharge_drive_close_precharge+0x4c>
 800fbae:	4b10      	ldr	r3, [pc, #64]	; (800fbf0 <ams_precharge_drive_close_precharge+0x74>)
 800fbb0:	7e5b      	ldrb	r3, [r3, #25]
 800fbb2:	2b01      	cmp	r3, #1
 800fbb4:	d108      	bne.n	800fbc8 <ams_precharge_drive_close_precharge+0x4c>
       ams_outputs.enable_driver_u8=1;
 800fbb6:	4b0f      	ldr	r3, [pc, #60]	; (800fbf4 <ams_precharge_drive_close_precharge+0x78>)
 800fbb8:	2201      	movs	r2, #1
 800fbba:	70da      	strb	r2, [r3, #3]
       super_timer[0] = 0;
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	2200      	movs	r2, #0
 800fbc0:	601a      	str	r2, [r3, #0]
       super_state[0] = AMS_PRECHARGE_DRIVE_WAIT_STATE;
 800fbc2:	683b      	ldr	r3, [r7, #0]
 800fbc4:	2204      	movs	r2, #4
 800fbc6:	701a      	strb	r2, [r3, #0]
   }
   if(after(&timer,2)) {
 800fbc8:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800fbcc:	4807      	ldr	r0, [pc, #28]	; (800fbec <ams_precharge_drive_close_precharge+0x70>)
 800fbce:	f7ff fe5f 	bl	800f890 <after>
 800fbd2:	4603      	mov	r3, r0
 800fbd4:	2b00      	cmp	r3, #0
 800fbd6:	d005      	beq.n	800fbe4 <ams_precharge_drive_close_precharge+0x68>
       super_timer[0] = 0;
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	2200      	movs	r2, #0
 800fbdc:	601a      	str	r2, [r3, #0]
       super_state[0] = AMS_PRECHARGE_DRIVE_ERROR_STATE;
 800fbde:	683b      	ldr	r3, [r7, #0]
 800fbe0:	2203      	movs	r2, #3
 800fbe2:	701a      	strb	r2, [r3, #0]
   }

}
 800fbe4:	bf00      	nop
 800fbe6:	3708      	adds	r7, #8
 800fbe8:	46bd      	mov	sp, r7
 800fbea:	bd80      	pop	{r7, pc}
 800fbec:	20001770 	.word	0x20001770
 800fbf0:	2001b6b0 	.word	0x2001b6b0
 800fbf4:	2001b6f4 	.word	0x2001b6f4

0800fbf8 <ams_precharge_drive_error>:
void ams_precharge_drive_error(uint32_t* super_timer, uint8_t* super_state) {
 800fbf8:	b480      	push	{r7}
 800fbfa:	b083      	sub	sp, #12
 800fbfc:	af00      	add	r7, sp, #0
 800fbfe:	6078      	str	r0, [r7, #4]
 800fc00:	6039      	str	r1, [r7, #0]
   if(1) {
       ams_parameters.precharge_drive_error_u8=1;
 800fc02:	4b04      	ldr	r3, [pc, #16]	; (800fc14 <ams_precharge_drive_error+0x1c>)
 800fc04:	2201      	movs	r2, #1
 800fc06:	705a      	strb	r2, [r3, #1]
   }

}
 800fc08:	bf00      	nop
 800fc0a:	370c      	adds	r7, #12
 800fc0c:	46bd      	mov	sp, r7
 800fc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc12:	4770      	bx	lr
 800fc14:	2001b6ec 	.word	0x2001b6ec

0800fc18 <ams_precharge_drive_wait>:
void ams_precharge_drive_wait(uint32_t* super_timer, uint8_t* super_state) {
 800fc18:	b580      	push	{r7, lr}
 800fc1a:	b082      	sub	sp, #8
 800fc1c:	af00      	add	r7, sp, #0
 800fc1e:	6078      	str	r0, [r7, #4]
 800fc20:	6039      	str	r1, [r7, #0]
   static uint32_t timer = 0;
   timer++;
 800fc22:	4b29      	ldr	r3, [pc, #164]	; (800fcc8 <ams_precharge_drive_wait+0xb0>)
 800fc24:	681b      	ldr	r3, [r3, #0]
 800fc26:	3301      	adds	r3, #1
 800fc28:	4a27      	ldr	r2, [pc, #156]	; (800fcc8 <ams_precharge_drive_wait+0xb0>)
 800fc2a:	6013      	str	r3, [r2, #0]
   if (super_timer[0] == 0) {
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d102      	bne.n	800fc3a <ams_precharge_drive_wait+0x22>
       timer = 0;
 800fc34:	4b24      	ldr	r3, [pc, #144]	; (800fcc8 <ams_precharge_drive_wait+0xb0>)
 800fc36:	2200      	movs	r2, #0
 800fc38:	601a      	str	r2, [r3, #0]
   }

   if(after(&timer,2)&&before(&timer,25)&&(0.95*ams_inputs.accumulator_voltage_f64<ams_inputs.vehicle_voltage_f64)) {
 800fc3a:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800fc3e:	4822      	ldr	r0, [pc, #136]	; (800fcc8 <ams_precharge_drive_wait+0xb0>)
 800fc40:	f7ff fe26 	bl	800f890 <after>
 800fc44:	4603      	mov	r3, r0
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	d025      	beq.n	800fc96 <ams_precharge_drive_wait+0x7e>
 800fc4a:	eeb3 0a09 	vmov.f32	s0, #57	; 0x41c80000  25.0
 800fc4e:	481e      	ldr	r0, [pc, #120]	; (800fcc8 <ams_precharge_drive_wait+0xb0>)
 800fc50:	f7ff fe46 	bl	800f8e0 <before>
 800fc54:	4603      	mov	r3, r0
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d01d      	beq.n	800fc96 <ams_precharge_drive_wait+0x7e>
 800fc5a:	4b1c      	ldr	r3, [pc, #112]	; (800fccc <ams_precharge_drive_wait+0xb4>)
 800fc5c:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800fc60:	a317      	add	r3, pc, #92	; (adr r3, 800fcc0 <ams_precharge_drive_wait+0xa8>)
 800fc62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc66:	f7f0 fcb9 	bl	80005dc <__aeabi_dmul>
 800fc6a:	4602      	mov	r2, r0
 800fc6c:	460b      	mov	r3, r1
 800fc6e:	4610      	mov	r0, r2
 800fc70:	4619      	mov	r1, r3
 800fc72:	4b16      	ldr	r3, [pc, #88]	; (800fccc <ams_precharge_drive_wait+0xb4>)
 800fc74:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800fc78:	f7f0 ff22 	bl	8000ac0 <__aeabi_dcmplt>
 800fc7c:	4603      	mov	r3, r0
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d009      	beq.n	800fc96 <ams_precharge_drive_wait+0x7e>
       ams_outputs.enable_AIR_plus_u8=1;
 800fc82:	4b13      	ldr	r3, [pc, #76]	; (800fcd0 <ams_precharge_drive_wait+0xb8>)
 800fc84:	2201      	movs	r2, #1
 800fc86:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
       super_timer[0] = 0;
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	2200      	movs	r2, #0
 800fc8e:	601a      	str	r2, [r3, #0]
       super_state[0] = AMS_PRECHARGE_DRIVE_CLOSE_AIR_PLUS_STATE;
 800fc90:	683b      	ldr	r3, [r7, #0]
 800fc92:	2205      	movs	r2, #5
 800fc94:	701a      	strb	r2, [r3, #0]
   }
   if(after(&timer,25)) {
 800fc96:	eeb3 0a09 	vmov.f32	s0, #57	; 0x41c80000  25.0
 800fc9a:	480b      	ldr	r0, [pc, #44]	; (800fcc8 <ams_precharge_drive_wait+0xb0>)
 800fc9c:	f7ff fdf8 	bl	800f890 <after>
 800fca0:	4603      	mov	r3, r0
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d005      	beq.n	800fcb2 <ams_precharge_drive_wait+0x9a>
       super_timer[0] = 0;
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	2200      	movs	r2, #0
 800fcaa:	601a      	str	r2, [r3, #0]
       super_state[0] = AMS_PRECHARGE_DRIVE_ERROR_STATE;
 800fcac:	683b      	ldr	r3, [r7, #0]
 800fcae:	2203      	movs	r2, #3
 800fcb0:	701a      	strb	r2, [r3, #0]
   }

}
 800fcb2:	bf00      	nop
 800fcb4:	3708      	adds	r7, #8
 800fcb6:	46bd      	mov	sp, r7
 800fcb8:	bd80      	pop	{r7, pc}
 800fcba:	bf00      	nop
 800fcbc:	f3af 8000 	nop.w
 800fcc0:	66666666 	.word	0x66666666
 800fcc4:	3fee6666 	.word	0x3fee6666
 800fcc8:	20001774 	.word	0x20001774
 800fccc:	2001b6b0 	.word	0x2001b6b0
 800fcd0:	2001b6f4 	.word	0x2001b6f4

0800fcd4 <ams_precharge_drive_close_air_plus>:
void ams_precharge_drive_close_air_plus(uint32_t* super_timer, uint8_t* super_state) {
 800fcd4:	b580      	push	{r7, lr}
 800fcd6:	b082      	sub	sp, #8
 800fcd8:	af00      	add	r7, sp, #0
 800fcda:	6078      	str	r0, [r7, #4]
 800fcdc:	6039      	str	r1, [r7, #0]
   static uint32_t timer = 0;
   timer++;
 800fcde:	4b19      	ldr	r3, [pc, #100]	; (800fd44 <ams_precharge_drive_close_air_plus+0x70>)
 800fce0:	681b      	ldr	r3, [r3, #0]
 800fce2:	3301      	adds	r3, #1
 800fce4:	4a17      	ldr	r2, [pc, #92]	; (800fd44 <ams_precharge_drive_close_air_plus+0x70>)
 800fce6:	6013      	str	r3, [r2, #0]
   if (super_timer[0] == 0) {
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	681b      	ldr	r3, [r3, #0]
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	d102      	bne.n	800fcf6 <ams_precharge_drive_close_air_plus+0x22>
       timer = 0;
 800fcf0:	4b14      	ldr	r3, [pc, #80]	; (800fd44 <ams_precharge_drive_close_air_plus+0x70>)
 800fcf2:	2200      	movs	r2, #0
 800fcf4:	601a      	str	r2, [r3, #0]
   }

   if(before(&timer,2)&&(ams_inputs.AIR_plus_closed_u8==1)) {
 800fcf6:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800fcfa:	4812      	ldr	r0, [pc, #72]	; (800fd44 <ams_precharge_drive_close_air_plus+0x70>)
 800fcfc:	f7ff fdf0 	bl	800f8e0 <before>
 800fd00:	4603      	mov	r3, r0
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	d00c      	beq.n	800fd20 <ams_precharge_drive_close_air_plus+0x4c>
 800fd06:	4b10      	ldr	r3, [pc, #64]	; (800fd48 <ams_precharge_drive_close_air_plus+0x74>)
 800fd08:	7adb      	ldrb	r3, [r3, #11]
 800fd0a:	2b01      	cmp	r3, #1
 800fd0c:	d108      	bne.n	800fd20 <ams_precharge_drive_close_air_plus+0x4c>
       ams_outputs.enable_precharge_u8=0;
 800fd0e:	4b0f      	ldr	r3, [pc, #60]	; (800fd4c <ams_precharge_drive_close_air_plus+0x78>)
 800fd10:	2200      	movs	r2, #0
 800fd12:	709a      	strb	r2, [r3, #2]
       super_timer[0] = 0;
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	2200      	movs	r2, #0
 800fd18:	601a      	str	r2, [r3, #0]
       super_state[0] = AMS_PRECHARGE_DRIVE_OPEN_PRECHARGE_STATE;
 800fd1a:	683b      	ldr	r3, [r7, #0]
 800fd1c:	2206      	movs	r2, #6
 800fd1e:	701a      	strb	r2, [r3, #0]
   }
   if(after(&timer,2)) {
 800fd20:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800fd24:	4807      	ldr	r0, [pc, #28]	; (800fd44 <ams_precharge_drive_close_air_plus+0x70>)
 800fd26:	f7ff fdb3 	bl	800f890 <after>
 800fd2a:	4603      	mov	r3, r0
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d005      	beq.n	800fd3c <ams_precharge_drive_close_air_plus+0x68>
       super_timer[0] = 0;
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	2200      	movs	r2, #0
 800fd34:	601a      	str	r2, [r3, #0]
       super_state[0] = AMS_PRECHARGE_DRIVE_ERROR_STATE;
 800fd36:	683b      	ldr	r3, [r7, #0]
 800fd38:	2203      	movs	r2, #3
 800fd3a:	701a      	strb	r2, [r3, #0]
   }

}
 800fd3c:	bf00      	nop
 800fd3e:	3708      	adds	r7, #8
 800fd40:	46bd      	mov	sp, r7
 800fd42:	bd80      	pop	{r7, pc}
 800fd44:	20001778 	.word	0x20001778
 800fd48:	2001b6b0 	.word	0x2001b6b0
 800fd4c:	2001b6f4 	.word	0x2001b6f4

0800fd50 <ams_precharge_drive_open_precharge>:
void ams_precharge_drive_open_precharge(uint32_t* super_timer, uint8_t* super_state) {
 800fd50:	b580      	push	{r7, lr}
 800fd52:	b082      	sub	sp, #8
 800fd54:	af00      	add	r7, sp, #0
 800fd56:	6078      	str	r0, [r7, #4]
 800fd58:	6039      	str	r1, [r7, #0]
   static uint32_t timer = 0;
   timer++;
 800fd5a:	4b19      	ldr	r3, [pc, #100]	; (800fdc0 <ams_precharge_drive_open_precharge+0x70>)
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	3301      	adds	r3, #1
 800fd60:	4a17      	ldr	r2, [pc, #92]	; (800fdc0 <ams_precharge_drive_open_precharge+0x70>)
 800fd62:	6013      	str	r3, [r2, #0]
   if (super_timer[0] == 0) {
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	681b      	ldr	r3, [r3, #0]
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	d102      	bne.n	800fd72 <ams_precharge_drive_open_precharge+0x22>
       timer = 0;
 800fd6c:	4b14      	ldr	r3, [pc, #80]	; (800fdc0 <ams_precharge_drive_open_precharge+0x70>)
 800fd6e:	2200      	movs	r2, #0
 800fd70:	601a      	str	r2, [r3, #0]
   }

   if(before(&timer,2)&&(ams_inputs.precharge_closed_u8==1)) {
 800fd72:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800fd76:	4812      	ldr	r0, [pc, #72]	; (800fdc0 <ams_precharge_drive_open_precharge+0x70>)
 800fd78:	f7ff fdb2 	bl	800f8e0 <before>
 800fd7c:	4603      	mov	r3, r0
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	d00c      	beq.n	800fd9c <ams_precharge_drive_open_precharge+0x4c>
 800fd82:	4b10      	ldr	r3, [pc, #64]	; (800fdc4 <ams_precharge_drive_open_precharge+0x74>)
 800fd84:	7e5b      	ldrb	r3, [r3, #25]
 800fd86:	2b01      	cmp	r3, #1
 800fd88:	d108      	bne.n	800fd9c <ams_precharge_drive_open_precharge+0x4c>
       ams_parameters.precharge_drive_complete_u8=1;
 800fd8a:	4b0f      	ldr	r3, [pc, #60]	; (800fdc8 <ams_precharge_drive_open_precharge+0x78>)
 800fd8c:	2201      	movs	r2, #1
 800fd8e:	701a      	strb	r2, [r3, #0]
       super_timer[0] = 0;
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	2200      	movs	r2, #0
 800fd94:	601a      	str	r2, [r3, #0]
       super_state[0] = AMS_PRECHARGE_DRIVE_EXIT_STATE;
 800fd96:	683b      	ldr	r3, [r7, #0]
 800fd98:	2207      	movs	r2, #7
 800fd9a:	701a      	strb	r2, [r3, #0]
   }
   if(after(&timer,2)) {
 800fd9c:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800fda0:	4807      	ldr	r0, [pc, #28]	; (800fdc0 <ams_precharge_drive_open_precharge+0x70>)
 800fda2:	f7ff fd75 	bl	800f890 <after>
 800fda6:	4603      	mov	r3, r0
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d005      	beq.n	800fdb8 <ams_precharge_drive_open_precharge+0x68>
       super_timer[0] = 0;
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	2200      	movs	r2, #0
 800fdb0:	601a      	str	r2, [r3, #0]
       super_state[0] = AMS_PRECHARGE_DRIVE_ERROR_STATE;
 800fdb2:	683b      	ldr	r3, [r7, #0]
 800fdb4:	2203      	movs	r2, #3
 800fdb6:	701a      	strb	r2, [r3, #0]
   }

}
 800fdb8:	bf00      	nop
 800fdba:	3708      	adds	r7, #8
 800fdbc:	46bd      	mov	sp, r7
 800fdbe:	bd80      	pop	{r7, pc}
 800fdc0:	2000177c 	.word	0x2000177c
 800fdc4:	2001b6b0 	.word	0x2001b6b0
 800fdc8:	2001b6ec 	.word	0x2001b6ec

0800fdcc <ams_precharge_drive_exit>:
void ams_precharge_drive_exit(uint32_t* super_timer, uint8_t* super_state) {
 800fdcc:	b480      	push	{r7}
 800fdce:	b083      	sub	sp, #12
 800fdd0:	af00      	add	r7, sp, #0
 800fdd2:	6078      	str	r0, [r7, #4]
 800fdd4:	6039      	str	r1, [r7, #0]

}
 800fdd6:	bf00      	nop
 800fdd8:	370c      	adds	r7, #12
 800fdda:	46bd      	mov	sp, r7
 800fddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fde0:	4770      	bx	lr
	...

0800fde4 <ams_precharge_drive>:
void ams_precharge_drive(uint32_t* super_timer, uint8_t* super_state) {
 800fde4:	b580      	push	{r7, lr}
 800fde6:	b082      	sub	sp, #8
 800fde8:	af00      	add	r7, sp, #0
 800fdea:	6078      	str	r0, [r7, #4]
 800fdec:	6039      	str	r1, [r7, #0]
   static ams_precharge_drive_t state = AMS_PRECHARGE_DRIVE_0_STATE;
   static uint32_t timer = 0;
   timer++;
 800fdee:	4b37      	ldr	r3, [pc, #220]	; (800fecc <ams_precharge_drive+0xe8>)
 800fdf0:	681b      	ldr	r3, [r3, #0]
 800fdf2:	3301      	adds	r3, #1
 800fdf4:	4a35      	ldr	r2, [pc, #212]	; (800fecc <ams_precharge_drive+0xe8>)
 800fdf6:	6013      	str	r3, [r2, #0]
   if (super_timer[0] == 0) {
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	681b      	ldr	r3, [r3, #0]
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	d105      	bne.n	800fe0c <ams_precharge_drive+0x28>
       timer = 0;
 800fe00:	4b32      	ldr	r3, [pc, #200]	; (800fecc <ams_precharge_drive+0xe8>)
 800fe02:	2200      	movs	r2, #0
 800fe04:	601a      	str	r2, [r3, #0]
       state = AMS_PRECHARGE_DRIVE_0_STATE;
 800fe06:	4b32      	ldr	r3, [pc, #200]	; (800fed0 <ams_precharge_drive+0xec>)
 800fe08:	2200      	movs	r2, #0
 800fe0a:	701a      	strb	r2, [r3, #0]
   }

   switch(state) {
 800fe0c:	4b30      	ldr	r3, [pc, #192]	; (800fed0 <ams_precharge_drive+0xec>)
 800fe0e:	781b      	ldrb	r3, [r3, #0]
 800fe10:	2b07      	cmp	r3, #7
 800fe12:	d83b      	bhi.n	800fe8c <ams_precharge_drive+0xa8>
 800fe14:	a201      	add	r2, pc, #4	; (adr r2, 800fe1c <ams_precharge_drive+0x38>)
 800fe16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe1a:	bf00      	nop
 800fe1c:	0800fe3d 	.word	0x0800fe3d
 800fe20:	0800fe47 	.word	0x0800fe47
 800fe24:	0800fe51 	.word	0x0800fe51
 800fe28:	0800fe5b 	.word	0x0800fe5b
 800fe2c:	0800fe65 	.word	0x0800fe65
 800fe30:	0800fe6f 	.word	0x0800fe6f
 800fe34:	0800fe79 	.word	0x0800fe79
 800fe38:	0800fe83 	.word	0x0800fe83
       case AMS_PRECHARGE_DRIVE_0_STATE:
           ams_precharge_drive_0(&timer, &state);
 800fe3c:	4924      	ldr	r1, [pc, #144]	; (800fed0 <ams_precharge_drive+0xec>)
 800fe3e:	4823      	ldr	r0, [pc, #140]	; (800fecc <ams_precharge_drive+0xe8>)
 800fe40:	f7ff fe48 	bl	800fad4 <ams_precharge_drive_0>
           break;
 800fe44:	e022      	b.n	800fe8c <ams_precharge_drive+0xa8>
       case AMS_PRECHARGE_DRIVE_CLOSE_AIR_MINUS_STATE:
           ams_precharge_drive_close_air_minus(&timer, &state);
 800fe46:	4922      	ldr	r1, [pc, #136]	; (800fed0 <ams_precharge_drive+0xec>)
 800fe48:	4820      	ldr	r0, [pc, #128]	; (800fecc <ams_precharge_drive+0xe8>)
 800fe4a:	f7ff fe59 	bl	800fb00 <ams_precharge_drive_close_air_minus>
           break;
 800fe4e:	e01d      	b.n	800fe8c <ams_precharge_drive+0xa8>
       case AMS_PRECHARGE_DRIVE_CLOSE_PRECHARGE_STATE:
           ams_precharge_drive_close_precharge(&timer, &state);
 800fe50:	491f      	ldr	r1, [pc, #124]	; (800fed0 <ams_precharge_drive+0xec>)
 800fe52:	481e      	ldr	r0, [pc, #120]	; (800fecc <ams_precharge_drive+0xe8>)
 800fe54:	f7ff fe92 	bl	800fb7c <ams_precharge_drive_close_precharge>
           break;
 800fe58:	e018      	b.n	800fe8c <ams_precharge_drive+0xa8>
       case AMS_PRECHARGE_DRIVE_ERROR_STATE:
           ams_precharge_drive_error(&timer, &state);
 800fe5a:	491d      	ldr	r1, [pc, #116]	; (800fed0 <ams_precharge_drive+0xec>)
 800fe5c:	481b      	ldr	r0, [pc, #108]	; (800fecc <ams_precharge_drive+0xe8>)
 800fe5e:	f7ff fecb 	bl	800fbf8 <ams_precharge_drive_error>
           break;
 800fe62:	e013      	b.n	800fe8c <ams_precharge_drive+0xa8>
       case AMS_PRECHARGE_DRIVE_WAIT_STATE:
           ams_precharge_drive_wait(&timer, &state);
 800fe64:	491a      	ldr	r1, [pc, #104]	; (800fed0 <ams_precharge_drive+0xec>)
 800fe66:	4819      	ldr	r0, [pc, #100]	; (800fecc <ams_precharge_drive+0xe8>)
 800fe68:	f7ff fed6 	bl	800fc18 <ams_precharge_drive_wait>
           break;
 800fe6c:	e00e      	b.n	800fe8c <ams_precharge_drive+0xa8>
       case AMS_PRECHARGE_DRIVE_CLOSE_AIR_PLUS_STATE:
           ams_precharge_drive_close_air_plus(&timer, &state);
 800fe6e:	4918      	ldr	r1, [pc, #96]	; (800fed0 <ams_precharge_drive+0xec>)
 800fe70:	4816      	ldr	r0, [pc, #88]	; (800fecc <ams_precharge_drive+0xe8>)
 800fe72:	f7ff ff2f 	bl	800fcd4 <ams_precharge_drive_close_air_plus>
           break;
 800fe76:	e009      	b.n	800fe8c <ams_precharge_drive+0xa8>
       case AMS_PRECHARGE_DRIVE_OPEN_PRECHARGE_STATE:
           ams_precharge_drive_open_precharge(&timer, &state);
 800fe78:	4915      	ldr	r1, [pc, #84]	; (800fed0 <ams_precharge_drive+0xec>)
 800fe7a:	4814      	ldr	r0, [pc, #80]	; (800fecc <ams_precharge_drive+0xe8>)
 800fe7c:	f7ff ff68 	bl	800fd50 <ams_precharge_drive_open_precharge>
           break;
 800fe80:	e004      	b.n	800fe8c <ams_precharge_drive+0xa8>
       case AMS_PRECHARGE_DRIVE_EXIT_STATE:
           ams_precharge_drive_exit(&timer, &state);
 800fe82:	4913      	ldr	r1, [pc, #76]	; (800fed0 <ams_precharge_drive+0xec>)
 800fe84:	4811      	ldr	r0, [pc, #68]	; (800fecc <ams_precharge_drive+0xe8>)
 800fe86:	f7ff ffa1 	bl	800fdcc <ams_precharge_drive_exit>
           break;
 800fe8a:	bf00      	nop
   }

   if(ams_parameters.precharge_drive_complete_u8==1) {
 800fe8c:	4b11      	ldr	r3, [pc, #68]	; (800fed4 <ams_precharge_drive+0xf0>)
 800fe8e:	781b      	ldrb	r3, [r3, #0]
 800fe90:	2b01      	cmp	r3, #1
 800fe92:	d105      	bne.n	800fea0 <ams_precharge_drive+0xbc>
       super_timer[0] = 0;
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	2200      	movs	r2, #0
 800fe98:	601a      	str	r2, [r3, #0]
       super_state[0] = AMS_DRIVE_STATE;
 800fe9a:	683b      	ldr	r3, [r7, #0]
 800fe9c:	2205      	movs	r2, #5
 800fe9e:	701a      	strb	r2, [r3, #0]
   }
   if((ams_parameters.precharge_drive_error_u8==1)||ams_inputs.error_u8) {
 800fea0:	4b0c      	ldr	r3, [pc, #48]	; (800fed4 <ams_precharge_drive+0xf0>)
 800fea2:	785b      	ldrb	r3, [r3, #1]
 800fea4:	2b01      	cmp	r3, #1
 800fea6:	d003      	beq.n	800feb0 <ams_precharge_drive+0xcc>
 800fea8:	4b0b      	ldr	r3, [pc, #44]	; (800fed8 <ams_precharge_drive+0xf4>)
 800feaa:	7edb      	ldrb	r3, [r3, #27]
 800feac:	2b00      	cmp	r3, #0
 800feae:	d008      	beq.n	800fec2 <ams_precharge_drive+0xde>
       ams_outputs.AMS_error_u8=1;
 800feb0:	4b0a      	ldr	r3, [pc, #40]	; (800fedc <ams_precharge_drive+0xf8>)
 800feb2:	2201      	movs	r2, #1
 800feb4:	715a      	strb	r2, [r3, #5]
       super_timer[0] = 0;
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	2200      	movs	r2, #0
 800feba:	601a      	str	r2, [r3, #0]
       super_state[0] = AMS_ERROR_STATE;
 800febc:	683b      	ldr	r3, [r7, #0]
 800febe:	2206      	movs	r2, #6
 800fec0:	701a      	strb	r2, [r3, #0]
   }

}
 800fec2:	bf00      	nop
 800fec4:	3708      	adds	r7, #8
 800fec6:	46bd      	mov	sp, r7
 800fec8:	bd80      	pop	{r7, pc}
 800feca:	bf00      	nop
 800fecc:	20001780 	.word	0x20001780
 800fed0:	20001784 	.word	0x20001784
 800fed4:	2001b6ec 	.word	0x2001b6ec
 800fed8:	2001b6b0 	.word	0x2001b6b0
 800fedc:	2001b6f4 	.word	0x2001b6f4

0800fee0 <ams_drive>:
void ams_drive(uint32_t* super_timer, uint8_t* super_state) {
 800fee0:	b480      	push	{r7}
 800fee2:	b083      	sub	sp, #12
 800fee4:	af00      	add	r7, sp, #0
 800fee6:	6078      	str	r0, [r7, #4]
 800fee8:	6039      	str	r1, [r7, #0]
   if(ams_inputs.drive_u8==0) {
 800feea:	4b17      	ldr	r3, [pc, #92]	; (800ff48 <ams_drive+0x68>)
 800feec:	7a5b      	ldrb	r3, [r3, #9]
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d10f      	bne.n	800ff12 <ams_drive+0x32>
       ams_outputs.enable_precharge_u8=0;
 800fef2:	4b16      	ldr	r3, [pc, #88]	; (800ff4c <ams_drive+0x6c>)
 800fef4:	2200      	movs	r2, #0
 800fef6:	709a      	strb	r2, [r3, #2]
       ams_outputs.enable_AIR_plus_u8=0;
 800fef8:	4b14      	ldr	r3, [pc, #80]	; (800ff4c <ams_drive+0x6c>)
 800fefa:	2200      	movs	r2, #0
 800fefc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
       ams_outputs.enable_AIR_minus_u8=0;
 800ff00:	4b12      	ldr	r3, [pc, #72]	; (800ff4c <ams_drive+0x6c>)
 800ff02:	2200      	movs	r2, #0
 800ff04:	705a      	strb	r2, [r3, #1]
       super_timer[0] = 0;
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	2200      	movs	r2, #0
 800ff0a:	601a      	str	r2, [r3, #0]
       super_state[0] = AMS_IDLE_STATE;
 800ff0c:	683b      	ldr	r3, [r7, #0]
 800ff0e:	2202      	movs	r2, #2
 800ff10:	701a      	strb	r2, [r3, #0]
   }
   if(ams_inputs.error_u8) {
 800ff12:	4b0d      	ldr	r3, [pc, #52]	; (800ff48 <ams_drive+0x68>)
 800ff14:	7edb      	ldrb	r3, [r3, #27]
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d00f      	beq.n	800ff3a <ams_drive+0x5a>
       ams_outputs.enable_precharge_u8=0;
 800ff1a:	4b0c      	ldr	r3, [pc, #48]	; (800ff4c <ams_drive+0x6c>)
 800ff1c:	2200      	movs	r2, #0
 800ff1e:	709a      	strb	r2, [r3, #2]
       ams_outputs.enable_AIR_plus_u8=0;
 800ff20:	4b0a      	ldr	r3, [pc, #40]	; (800ff4c <ams_drive+0x6c>)
 800ff22:	2200      	movs	r2, #0
 800ff24:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
       ams_outputs.enable_AIR_minus_u8=0;
 800ff28:	4b08      	ldr	r3, [pc, #32]	; (800ff4c <ams_drive+0x6c>)
 800ff2a:	2200      	movs	r2, #0
 800ff2c:	705a      	strb	r2, [r3, #1]
       super_timer[0] = 0;
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	2200      	movs	r2, #0
 800ff32:	601a      	str	r2, [r3, #0]
       super_state[0] = AMS_ERROR_STATE;
 800ff34:	683b      	ldr	r3, [r7, #0]
 800ff36:	2206      	movs	r2, #6
 800ff38:	701a      	strb	r2, [r3, #0]
   }

}
 800ff3a:	bf00      	nop
 800ff3c:	370c      	adds	r7, #12
 800ff3e:	46bd      	mov	sp, r7
 800ff40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff44:	4770      	bx	lr
 800ff46:	bf00      	nop
 800ff48:	2001b6b0 	.word	0x2001b6b0
 800ff4c:	2001b6f4 	.word	0x2001b6f4

0800ff50 <ams_error>:
void ams_error(uint32_t* super_timer, uint8_t* super_state) {
 800ff50:	b480      	push	{r7}
 800ff52:	b083      	sub	sp, #12
 800ff54:	af00      	add	r7, sp, #0
 800ff56:	6078      	str	r0, [r7, #4]
 800ff58:	6039      	str	r1, [r7, #0]
   if(1) {
       ams_outputs.enable_precharge_u8=0;
 800ff5a:	4b0d      	ldr	r3, [pc, #52]	; (800ff90 <ams_error+0x40>)
 800ff5c:	2200      	movs	r2, #0
 800ff5e:	709a      	strb	r2, [r3, #2]
       ams_outputs.enable_AIR_plus_u8=0;
 800ff60:	4b0b      	ldr	r3, [pc, #44]	; (800ff90 <ams_error+0x40>)
 800ff62:	2200      	movs	r2, #0
 800ff64:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
       ams_outputs.enable_AIR_minus_u8=0;
 800ff68:	4b09      	ldr	r3, [pc, #36]	; (800ff90 <ams_error+0x40>)
 800ff6a:	2200      	movs	r2, #0
 800ff6c:	705a      	strb	r2, [r3, #1]
   }
   if(!ams_inputs.error_u8) {
 800ff6e:	4b09      	ldr	r3, [pc, #36]	; (800ff94 <ams_error+0x44>)
 800ff70:	7edb      	ldrb	r3, [r3, #27]
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	d105      	bne.n	800ff82 <ams_error+0x32>
       super_timer[0] = 0;
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	2200      	movs	r2, #0
 800ff7a:	601a      	str	r2, [r3, #0]
       super_state[0] = AMS_IDLE_STATE;
 800ff7c:	683b      	ldr	r3, [r7, #0]
 800ff7e:	2202      	movs	r2, #2
 800ff80:	701a      	strb	r2, [r3, #0]
   }

}
 800ff82:	bf00      	nop
 800ff84:	370c      	adds	r7, #12
 800ff86:	46bd      	mov	sp, r7
 800ff88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff8c:	4770      	bx	lr
 800ff8e:	bf00      	nop
 800ff90:	2001b6f4 	.word	0x2001b6f4
 800ff94:	2001b6b0 	.word	0x2001b6b0

0800ff98 <ams_precharge_charge_0>:
void ams_precharge_charge_0(uint32_t* super_timer, uint8_t* super_state) {
 800ff98:	b480      	push	{r7}
 800ff9a:	b083      	sub	sp, #12
 800ff9c:	af00      	add	r7, sp, #0
 800ff9e:	6078      	str	r0, [r7, #4]
 800ffa0:	6039      	str	r1, [r7, #0]

}
 800ffa2:	bf00      	nop
 800ffa4:	370c      	adds	r7, #12
 800ffa6:	46bd      	mov	sp, r7
 800ffa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffac:	4770      	bx	lr
	...

0800ffb0 <ams_precharge_charge_start_charger>:
void ams_precharge_charge_start_charger(uint32_t* super_timer, uint8_t* super_state) {
 800ffb0:	b580      	push	{r7, lr}
 800ffb2:	b082      	sub	sp, #8
 800ffb4:	af00      	add	r7, sp, #0
 800ffb6:	6078      	str	r0, [r7, #4]
 800ffb8:	6039      	str	r1, [r7, #0]
   static uint32_t timer = 0;
   timer++;
 800ffba:	4b19      	ldr	r3, [pc, #100]	; (8010020 <ams_precharge_charge_start_charger+0x70>)
 800ffbc:	681b      	ldr	r3, [r3, #0]
 800ffbe:	3301      	adds	r3, #1
 800ffc0:	4a17      	ldr	r2, [pc, #92]	; (8010020 <ams_precharge_charge_start_charger+0x70>)
 800ffc2:	6013      	str	r3, [r2, #0]
   if (super_timer[0] == 0) {
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	681b      	ldr	r3, [r3, #0]
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	d102      	bne.n	800ffd2 <ams_precharge_charge_start_charger+0x22>
       timer = 0;
 800ffcc:	4b14      	ldr	r3, [pc, #80]	; (8010020 <ams_precharge_charge_start_charger+0x70>)
 800ffce:	2200      	movs	r2, #0
 800ffd0:	601a      	str	r2, [r3, #0]
   }

   if(before(&timer,10)&&(ams_inputs.charger_is_live_u8)) {
 800ffd2:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800ffd6:	4812      	ldr	r0, [pc, #72]	; (8010020 <ams_precharge_charge_start_charger+0x70>)
 800ffd8:	f7ff fc82 	bl	800f8e0 <before>
 800ffdc:	4603      	mov	r3, r0
 800ffde:	2b00      	cmp	r3, #0
 800ffe0:	d00c      	beq.n	800fffc <ams_precharge_charge_start_charger+0x4c>
 800ffe2:	4b10      	ldr	r3, [pc, #64]	; (8010024 <ams_precharge_charge_start_charger+0x74>)
 800ffe4:	7f1b      	ldrb	r3, [r3, #28]
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	d008      	beq.n	800fffc <ams_precharge_charge_start_charger+0x4c>
       ams_outputs.enable_AIR_minus_u8=1;
 800ffea:	4b0f      	ldr	r3, [pc, #60]	; (8010028 <ams_precharge_charge_start_charger+0x78>)
 800ffec:	2201      	movs	r2, #1
 800ffee:	705a      	strb	r2, [r3, #1]
       super_timer[0] = 0;
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	2200      	movs	r2, #0
 800fff4:	601a      	str	r2, [r3, #0]
       super_state[0] = AMS_PRECHARGE_CHARGE_CLOSE_AIR_MINUS_STATE;
 800fff6:	683b      	ldr	r3, [r7, #0]
 800fff8:	2202      	movs	r2, #2
 800fffa:	701a      	strb	r2, [r3, #0]
   }
   if(after(&timer,10)) {
 800fffc:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8010000:	4807      	ldr	r0, [pc, #28]	; (8010020 <ams_precharge_charge_start_charger+0x70>)
 8010002:	f7ff fc45 	bl	800f890 <after>
 8010006:	4603      	mov	r3, r0
 8010008:	2b00      	cmp	r3, #0
 801000a:	d005      	beq.n	8010018 <ams_precharge_charge_start_charger+0x68>
       super_timer[0] = 0;
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	2200      	movs	r2, #0
 8010010:	601a      	str	r2, [r3, #0]
       super_state[0] = AMS_PRECHARGE_CHARGE_ERROR_STATE;
 8010012:	683b      	ldr	r3, [r7, #0]
 8010014:	2203      	movs	r2, #3
 8010016:	701a      	strb	r2, [r3, #0]
   }

}
 8010018:	bf00      	nop
 801001a:	3708      	adds	r7, #8
 801001c:	46bd      	mov	sp, r7
 801001e:	bd80      	pop	{r7, pc}
 8010020:	20001788 	.word	0x20001788
 8010024:	2001b6b0 	.word	0x2001b6b0
 8010028:	2001b6f4 	.word	0x2001b6f4

0801002c <ams_precharge_charge_close_air_minus>:
void ams_precharge_charge_close_air_minus(uint32_t* super_timer, uint8_t* super_state) {
 801002c:	b580      	push	{r7, lr}
 801002e:	b082      	sub	sp, #8
 8010030:	af00      	add	r7, sp, #0
 8010032:	6078      	str	r0, [r7, #4]
 8010034:	6039      	str	r1, [r7, #0]
   static uint32_t timer = 0;
   timer++;
 8010036:	4b19      	ldr	r3, [pc, #100]	; (801009c <ams_precharge_charge_close_air_minus+0x70>)
 8010038:	681b      	ldr	r3, [r3, #0]
 801003a:	3301      	adds	r3, #1
 801003c:	4a17      	ldr	r2, [pc, #92]	; (801009c <ams_precharge_charge_close_air_minus+0x70>)
 801003e:	6013      	str	r3, [r2, #0]
   if (super_timer[0] == 0) {
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	681b      	ldr	r3, [r3, #0]
 8010044:	2b00      	cmp	r3, #0
 8010046:	d102      	bne.n	801004e <ams_precharge_charge_close_air_minus+0x22>
       timer = 0;
 8010048:	4b14      	ldr	r3, [pc, #80]	; (801009c <ams_precharge_charge_close_air_minus+0x70>)
 801004a:	2200      	movs	r2, #0
 801004c:	601a      	str	r2, [r3, #0]
   }

   if(before(&timer,2)&&(ams_inputs.AIR_minus_closed_u8==1)) {
 801004e:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8010052:	4812      	ldr	r0, [pc, #72]	; (801009c <ams_precharge_charge_close_air_minus+0x70>)
 8010054:	f7ff fc44 	bl	800f8e0 <before>
 8010058:	4603      	mov	r3, r0
 801005a:	2b00      	cmp	r3, #0
 801005c:	d00c      	beq.n	8010078 <ams_precharge_charge_close_air_minus+0x4c>
 801005e:	4b10      	ldr	r3, [pc, #64]	; (80100a0 <ams_precharge_charge_close_air_minus+0x74>)
 8010060:	7a1b      	ldrb	r3, [r3, #8]
 8010062:	2b01      	cmp	r3, #1
 8010064:	d108      	bne.n	8010078 <ams_precharge_charge_close_air_minus+0x4c>
       ams_outputs.enable_precharge_u8=1;
 8010066:	4b0f      	ldr	r3, [pc, #60]	; (80100a4 <ams_precharge_charge_close_air_minus+0x78>)
 8010068:	2201      	movs	r2, #1
 801006a:	709a      	strb	r2, [r3, #2]
       super_timer[0] = 0;
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	2200      	movs	r2, #0
 8010070:	601a      	str	r2, [r3, #0]
       super_state[0] = AMS_PRECHARGE_CHARGE_CLOSE_PRECHARGE_STATE;
 8010072:	683b      	ldr	r3, [r7, #0]
 8010074:	2204      	movs	r2, #4
 8010076:	701a      	strb	r2, [r3, #0]
   }
   if(after(&timer,2)) {
 8010078:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 801007c:	4807      	ldr	r0, [pc, #28]	; (801009c <ams_precharge_charge_close_air_minus+0x70>)
 801007e:	f7ff fc07 	bl	800f890 <after>
 8010082:	4603      	mov	r3, r0
 8010084:	2b00      	cmp	r3, #0
 8010086:	d005      	beq.n	8010094 <ams_precharge_charge_close_air_minus+0x68>
       super_timer[0] = 0;
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	2200      	movs	r2, #0
 801008c:	601a      	str	r2, [r3, #0]
       super_state[0] = AMS_PRECHARGE_CHARGE_ERROR_STATE;
 801008e:	683b      	ldr	r3, [r7, #0]
 8010090:	2203      	movs	r2, #3
 8010092:	701a      	strb	r2, [r3, #0]
   }

}
 8010094:	bf00      	nop
 8010096:	3708      	adds	r7, #8
 8010098:	46bd      	mov	sp, r7
 801009a:	bd80      	pop	{r7, pc}
 801009c:	2000178c 	.word	0x2000178c
 80100a0:	2001b6b0 	.word	0x2001b6b0
 80100a4:	2001b6f4 	.word	0x2001b6f4

080100a8 <ams_precharge_charge_error>:
void ams_precharge_charge_error(uint32_t* super_timer, uint8_t* super_state) {
 80100a8:	b480      	push	{r7}
 80100aa:	b083      	sub	sp, #12
 80100ac:	af00      	add	r7, sp, #0
 80100ae:	6078      	str	r0, [r7, #4]
 80100b0:	6039      	str	r1, [r7, #0]
   if(1) {
       ams_parameters.precharge_charge_error_u8=1;
 80100b2:	4b04      	ldr	r3, [pc, #16]	; (80100c4 <ams_precharge_charge_error+0x1c>)
 80100b4:	2201      	movs	r2, #1
 80100b6:	709a      	strb	r2, [r3, #2]
   }

}
 80100b8:	bf00      	nop
 80100ba:	370c      	adds	r7, #12
 80100bc:	46bd      	mov	sp, r7
 80100be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100c2:	4770      	bx	lr
 80100c4:	2001b6ec 	.word	0x2001b6ec

080100c8 <ams_precharge_charge_close_precharge>:
void ams_precharge_charge_close_precharge(uint32_t* super_timer, uint8_t* super_state) {
 80100c8:	b580      	push	{r7, lr}
 80100ca:	b082      	sub	sp, #8
 80100cc:	af00      	add	r7, sp, #0
 80100ce:	6078      	str	r0, [r7, #4]
 80100d0:	6039      	str	r1, [r7, #0]
   static uint32_t timer = 0;
   timer++;
 80100d2:	4b18      	ldr	r3, [pc, #96]	; (8010134 <ams_precharge_charge_close_precharge+0x6c>)
 80100d4:	681b      	ldr	r3, [r3, #0]
 80100d6:	3301      	adds	r3, #1
 80100d8:	4a16      	ldr	r2, [pc, #88]	; (8010134 <ams_precharge_charge_close_precharge+0x6c>)
 80100da:	6013      	str	r3, [r2, #0]
   if (super_timer[0] == 0) {
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	681b      	ldr	r3, [r3, #0]
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	d102      	bne.n	80100ea <ams_precharge_charge_close_precharge+0x22>
       timer = 0;
 80100e4:	4b13      	ldr	r3, [pc, #76]	; (8010134 <ams_precharge_charge_close_precharge+0x6c>)
 80100e6:	2200      	movs	r2, #0
 80100e8:	601a      	str	r2, [r3, #0]
   }

   if(before(&timer,2)&&(ams_inputs.precharge_closed_u8==1)) {
 80100ea:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80100ee:	4811      	ldr	r0, [pc, #68]	; (8010134 <ams_precharge_charge_close_precharge+0x6c>)
 80100f0:	f7ff fbf6 	bl	800f8e0 <before>
 80100f4:	4603      	mov	r3, r0
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d009      	beq.n	801010e <ams_precharge_charge_close_precharge+0x46>
 80100fa:	4b0f      	ldr	r3, [pc, #60]	; (8010138 <ams_precharge_charge_close_precharge+0x70>)
 80100fc:	7e5b      	ldrb	r3, [r3, #25]
 80100fe:	2b01      	cmp	r3, #1
 8010100:	d105      	bne.n	801010e <ams_precharge_charge_close_precharge+0x46>
       super_timer[0] = 0;
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	2200      	movs	r2, #0
 8010106:	601a      	str	r2, [r3, #0]
       super_state[0] = AMS_PRECHARGE_CHARGE_WAIT_STATE;
 8010108:	683b      	ldr	r3, [r7, #0]
 801010a:	2205      	movs	r2, #5
 801010c:	701a      	strb	r2, [r3, #0]
   }
   if(after(&timer,2)) {
 801010e:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8010112:	4808      	ldr	r0, [pc, #32]	; (8010134 <ams_precharge_charge_close_precharge+0x6c>)
 8010114:	f7ff fbbc 	bl	800f890 <after>
 8010118:	4603      	mov	r3, r0
 801011a:	2b00      	cmp	r3, #0
 801011c:	d005      	beq.n	801012a <ams_precharge_charge_close_precharge+0x62>
       super_timer[0] = 0;
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	2200      	movs	r2, #0
 8010122:	601a      	str	r2, [r3, #0]
       super_state[0] = AMS_PRECHARGE_CHARGE_ERROR_STATE;
 8010124:	683b      	ldr	r3, [r7, #0]
 8010126:	2203      	movs	r2, #3
 8010128:	701a      	strb	r2, [r3, #0]
   }

}
 801012a:	bf00      	nop
 801012c:	3708      	adds	r7, #8
 801012e:	46bd      	mov	sp, r7
 8010130:	bd80      	pop	{r7, pc}
 8010132:	bf00      	nop
 8010134:	20001790 	.word	0x20001790
 8010138:	2001b6b0 	.word	0x2001b6b0
 801013c:	00000000 	.word	0x00000000

08010140 <ams_precharge_charge_wait>:
void ams_precharge_charge_wait(uint32_t* super_timer, uint8_t* super_state) {
 8010140:	b580      	push	{r7, lr}
 8010142:	b082      	sub	sp, #8
 8010144:	af00      	add	r7, sp, #0
 8010146:	6078      	str	r0, [r7, #4]
 8010148:	6039      	str	r1, [r7, #0]
   static uint32_t timer = 0;
   timer++;
 801014a:	4b29      	ldr	r3, [pc, #164]	; (80101f0 <ams_precharge_charge_wait+0xb0>)
 801014c:	681b      	ldr	r3, [r3, #0]
 801014e:	3301      	adds	r3, #1
 8010150:	4a27      	ldr	r2, [pc, #156]	; (80101f0 <ams_precharge_charge_wait+0xb0>)
 8010152:	6013      	str	r3, [r2, #0]
   if (super_timer[0] == 0) {
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	681b      	ldr	r3, [r3, #0]
 8010158:	2b00      	cmp	r3, #0
 801015a:	d102      	bne.n	8010162 <ams_precharge_charge_wait+0x22>
       timer = 0;
 801015c:	4b24      	ldr	r3, [pc, #144]	; (80101f0 <ams_precharge_charge_wait+0xb0>)
 801015e:	2200      	movs	r2, #0
 8010160:	601a      	str	r2, [r3, #0]
   }

   if(after(&timer,2)&&before(&timer,25)&&(0.95*ams_inputs.accumulator_voltage_f64<ams_inputs.vehicle_voltage_f64)) {
 8010162:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8010166:	4822      	ldr	r0, [pc, #136]	; (80101f0 <ams_precharge_charge_wait+0xb0>)
 8010168:	f7ff fb92 	bl	800f890 <after>
 801016c:	4603      	mov	r3, r0
 801016e:	2b00      	cmp	r3, #0
 8010170:	d025      	beq.n	80101be <ams_precharge_charge_wait+0x7e>
 8010172:	eeb3 0a09 	vmov.f32	s0, #57	; 0x41c80000  25.0
 8010176:	481e      	ldr	r0, [pc, #120]	; (80101f0 <ams_precharge_charge_wait+0xb0>)
 8010178:	f7ff fbb2 	bl	800f8e0 <before>
 801017c:	4603      	mov	r3, r0
 801017e:	2b00      	cmp	r3, #0
 8010180:	d01d      	beq.n	80101be <ams_precharge_charge_wait+0x7e>
 8010182:	4b1c      	ldr	r3, [pc, #112]	; (80101f4 <ams_precharge_charge_wait+0xb4>)
 8010184:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8010188:	a317      	add	r3, pc, #92	; (adr r3, 80101e8 <ams_precharge_charge_wait+0xa8>)
 801018a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801018e:	f7f0 fa25 	bl	80005dc <__aeabi_dmul>
 8010192:	4602      	mov	r2, r0
 8010194:	460b      	mov	r3, r1
 8010196:	4610      	mov	r0, r2
 8010198:	4619      	mov	r1, r3
 801019a:	4b16      	ldr	r3, [pc, #88]	; (80101f4 <ams_precharge_charge_wait+0xb4>)
 801019c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80101a0:	f7f0 fc8e 	bl	8000ac0 <__aeabi_dcmplt>
 80101a4:	4603      	mov	r3, r0
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d009      	beq.n	80101be <ams_precharge_charge_wait+0x7e>
       ams_outputs.enable_AIR_plus_u8=1;
 80101aa:	4b13      	ldr	r3, [pc, #76]	; (80101f8 <ams_precharge_charge_wait+0xb8>)
 80101ac:	2201      	movs	r2, #1
 80101ae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
       super_timer[0] = 0;
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	2200      	movs	r2, #0
 80101b6:	601a      	str	r2, [r3, #0]
       super_state[0] = AMS_PRECHARGE_CHARGE_CLOSE_AIR_PLUS_STATE;
 80101b8:	683b      	ldr	r3, [r7, #0]
 80101ba:	2206      	movs	r2, #6
 80101bc:	701a      	strb	r2, [r3, #0]
   }
   if(after(&timer,25)) {
 80101be:	eeb3 0a09 	vmov.f32	s0, #57	; 0x41c80000  25.0
 80101c2:	480b      	ldr	r0, [pc, #44]	; (80101f0 <ams_precharge_charge_wait+0xb0>)
 80101c4:	f7ff fb64 	bl	800f890 <after>
 80101c8:	4603      	mov	r3, r0
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	d005      	beq.n	80101da <ams_precharge_charge_wait+0x9a>
       super_timer[0] = 0;
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	2200      	movs	r2, #0
 80101d2:	601a      	str	r2, [r3, #0]
       super_state[0] = AMS_PRECHARGE_CHARGE_ERROR_STATE;
 80101d4:	683b      	ldr	r3, [r7, #0]
 80101d6:	2203      	movs	r2, #3
 80101d8:	701a      	strb	r2, [r3, #0]
   }

}
 80101da:	bf00      	nop
 80101dc:	3708      	adds	r7, #8
 80101de:	46bd      	mov	sp, r7
 80101e0:	bd80      	pop	{r7, pc}
 80101e2:	bf00      	nop
 80101e4:	f3af 8000 	nop.w
 80101e8:	66666666 	.word	0x66666666
 80101ec:	3fee6666 	.word	0x3fee6666
 80101f0:	20001794 	.word	0x20001794
 80101f4:	2001b6b0 	.word	0x2001b6b0
 80101f8:	2001b6f4 	.word	0x2001b6f4

080101fc <ams_precharge_charge_close_air_plus>:
void ams_precharge_charge_close_air_plus(uint32_t* super_timer, uint8_t* super_state) {
 80101fc:	b580      	push	{r7, lr}
 80101fe:	b082      	sub	sp, #8
 8010200:	af00      	add	r7, sp, #0
 8010202:	6078      	str	r0, [r7, #4]
 8010204:	6039      	str	r1, [r7, #0]
   static uint32_t timer = 0;
   timer++;
 8010206:	4b19      	ldr	r3, [pc, #100]	; (801026c <ams_precharge_charge_close_air_plus+0x70>)
 8010208:	681b      	ldr	r3, [r3, #0]
 801020a:	3301      	adds	r3, #1
 801020c:	4a17      	ldr	r2, [pc, #92]	; (801026c <ams_precharge_charge_close_air_plus+0x70>)
 801020e:	6013      	str	r3, [r2, #0]
   if (super_timer[0] == 0) {
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	681b      	ldr	r3, [r3, #0]
 8010214:	2b00      	cmp	r3, #0
 8010216:	d102      	bne.n	801021e <ams_precharge_charge_close_air_plus+0x22>
       timer = 0;
 8010218:	4b14      	ldr	r3, [pc, #80]	; (801026c <ams_precharge_charge_close_air_plus+0x70>)
 801021a:	2200      	movs	r2, #0
 801021c:	601a      	str	r2, [r3, #0]
   }

   if(before(&timer,2)&&(ams_inputs.AIR_plus_closed_u8==1)) {
 801021e:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8010222:	4812      	ldr	r0, [pc, #72]	; (801026c <ams_precharge_charge_close_air_plus+0x70>)
 8010224:	f7ff fb5c 	bl	800f8e0 <before>
 8010228:	4603      	mov	r3, r0
 801022a:	2b00      	cmp	r3, #0
 801022c:	d00c      	beq.n	8010248 <ams_precharge_charge_close_air_plus+0x4c>
 801022e:	4b10      	ldr	r3, [pc, #64]	; (8010270 <ams_precharge_charge_close_air_plus+0x74>)
 8010230:	7adb      	ldrb	r3, [r3, #11]
 8010232:	2b01      	cmp	r3, #1
 8010234:	d108      	bne.n	8010248 <ams_precharge_charge_close_air_plus+0x4c>
       ams_outputs.enable_precharge_u8=0;
 8010236:	4b0f      	ldr	r3, [pc, #60]	; (8010274 <ams_precharge_charge_close_air_plus+0x78>)
 8010238:	2200      	movs	r2, #0
 801023a:	709a      	strb	r2, [r3, #2]
       super_timer[0] = 0;
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	2200      	movs	r2, #0
 8010240:	601a      	str	r2, [r3, #0]
       super_state[0] = AMS_PRECHARGE_CHARGE_OPEN_PRECHARGE_STATE;
 8010242:	683b      	ldr	r3, [r7, #0]
 8010244:	2207      	movs	r2, #7
 8010246:	701a      	strb	r2, [r3, #0]
   }
   if(after(&timer,2)) {
 8010248:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 801024c:	4807      	ldr	r0, [pc, #28]	; (801026c <ams_precharge_charge_close_air_plus+0x70>)
 801024e:	f7ff fb1f 	bl	800f890 <after>
 8010252:	4603      	mov	r3, r0
 8010254:	2b00      	cmp	r3, #0
 8010256:	d005      	beq.n	8010264 <ams_precharge_charge_close_air_plus+0x68>
       super_timer[0] = 0;
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	2200      	movs	r2, #0
 801025c:	601a      	str	r2, [r3, #0]
       super_state[0] = AMS_PRECHARGE_CHARGE_ERROR_STATE;
 801025e:	683b      	ldr	r3, [r7, #0]
 8010260:	2203      	movs	r2, #3
 8010262:	701a      	strb	r2, [r3, #0]
   }

}
 8010264:	bf00      	nop
 8010266:	3708      	adds	r7, #8
 8010268:	46bd      	mov	sp, r7
 801026a:	bd80      	pop	{r7, pc}
 801026c:	20001798 	.word	0x20001798
 8010270:	2001b6b0 	.word	0x2001b6b0
 8010274:	2001b6f4 	.word	0x2001b6f4

08010278 <ams_precharge_charge_open_precharge>:
void ams_precharge_charge_open_precharge(uint32_t* super_timer, uint8_t* super_state) {
 8010278:	b580      	push	{r7, lr}
 801027a:	b082      	sub	sp, #8
 801027c:	af00      	add	r7, sp, #0
 801027e:	6078      	str	r0, [r7, #4]
 8010280:	6039      	str	r1, [r7, #0]
   static uint32_t timer = 0;
   timer++;
 8010282:	4b19      	ldr	r3, [pc, #100]	; (80102e8 <ams_precharge_charge_open_precharge+0x70>)
 8010284:	681b      	ldr	r3, [r3, #0]
 8010286:	3301      	adds	r3, #1
 8010288:	4a17      	ldr	r2, [pc, #92]	; (80102e8 <ams_precharge_charge_open_precharge+0x70>)
 801028a:	6013      	str	r3, [r2, #0]
   if (super_timer[0] == 0) {
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	681b      	ldr	r3, [r3, #0]
 8010290:	2b00      	cmp	r3, #0
 8010292:	d102      	bne.n	801029a <ams_precharge_charge_open_precharge+0x22>
       timer = 0;
 8010294:	4b14      	ldr	r3, [pc, #80]	; (80102e8 <ams_precharge_charge_open_precharge+0x70>)
 8010296:	2200      	movs	r2, #0
 8010298:	601a      	str	r2, [r3, #0]
   }

   if(before(&timer,2)&&(ams_inputs.precharge_closed_u8==1)) {
 801029a:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 801029e:	4812      	ldr	r0, [pc, #72]	; (80102e8 <ams_precharge_charge_open_precharge+0x70>)
 80102a0:	f7ff fb1e 	bl	800f8e0 <before>
 80102a4:	4603      	mov	r3, r0
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d00c      	beq.n	80102c4 <ams_precharge_charge_open_precharge+0x4c>
 80102aa:	4b10      	ldr	r3, [pc, #64]	; (80102ec <ams_precharge_charge_open_precharge+0x74>)
 80102ac:	7e5b      	ldrb	r3, [r3, #25]
 80102ae:	2b01      	cmp	r3, #1
 80102b0:	d108      	bne.n	80102c4 <ams_precharge_charge_open_precharge+0x4c>
       ams_parameters.precharge_charge_complete_u8=1;
 80102b2:	4b0f      	ldr	r3, [pc, #60]	; (80102f0 <ams_precharge_charge_open_precharge+0x78>)
 80102b4:	2201      	movs	r2, #1
 80102b6:	70da      	strb	r2, [r3, #3]
       super_timer[0] = 0;
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	2200      	movs	r2, #0
 80102bc:	601a      	str	r2, [r3, #0]
       super_state[0] = AMS_PRECHARGE_CHARGE_EXIT_STATE;
 80102be:	683b      	ldr	r3, [r7, #0]
 80102c0:	2208      	movs	r2, #8
 80102c2:	701a      	strb	r2, [r3, #0]
   }
   if(after(&timer,2)) {
 80102c4:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80102c8:	4807      	ldr	r0, [pc, #28]	; (80102e8 <ams_precharge_charge_open_precharge+0x70>)
 80102ca:	f7ff fae1 	bl	800f890 <after>
 80102ce:	4603      	mov	r3, r0
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	d005      	beq.n	80102e0 <ams_precharge_charge_open_precharge+0x68>
       super_timer[0] = 0;
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	2200      	movs	r2, #0
 80102d8:	601a      	str	r2, [r3, #0]
       super_state[0] = AMS_PRECHARGE_CHARGE_ERROR_STATE;
 80102da:	683b      	ldr	r3, [r7, #0]
 80102dc:	2203      	movs	r2, #3
 80102de:	701a      	strb	r2, [r3, #0]
   }

}
 80102e0:	bf00      	nop
 80102e2:	3708      	adds	r7, #8
 80102e4:	46bd      	mov	sp, r7
 80102e6:	bd80      	pop	{r7, pc}
 80102e8:	2000179c 	.word	0x2000179c
 80102ec:	2001b6b0 	.word	0x2001b6b0
 80102f0:	2001b6ec 	.word	0x2001b6ec

080102f4 <ams_precharge_charge_exit>:
void ams_precharge_charge_exit(uint32_t* super_timer, uint8_t* super_state) {
 80102f4:	b480      	push	{r7}
 80102f6:	b083      	sub	sp, #12
 80102f8:	af00      	add	r7, sp, #0
 80102fa:	6078      	str	r0, [r7, #4]
 80102fc:	6039      	str	r1, [r7, #0]

}
 80102fe:	bf00      	nop
 8010300:	370c      	adds	r7, #12
 8010302:	46bd      	mov	sp, r7
 8010304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010308:	4770      	bx	lr
	...

0801030c <ams_precharge_charge>:
void ams_precharge_charge(uint32_t* super_timer, uint8_t* super_state) {
 801030c:	b580      	push	{r7, lr}
 801030e:	b082      	sub	sp, #8
 8010310:	af00      	add	r7, sp, #0
 8010312:	6078      	str	r0, [r7, #4]
 8010314:	6039      	str	r1, [r7, #0]
   static ams_precharge_charge_t state = AMS_PRECHARGE_CHARGE_0_STATE;
   static uint32_t timer = 0;
   timer++;
 8010316:	4b32      	ldr	r3, [pc, #200]	; (80103e0 <ams_precharge_charge+0xd4>)
 8010318:	681b      	ldr	r3, [r3, #0]
 801031a:	3301      	adds	r3, #1
 801031c:	4a30      	ldr	r2, [pc, #192]	; (80103e0 <ams_precharge_charge+0xd4>)
 801031e:	6013      	str	r3, [r2, #0]
   if (super_timer[0] == 0) {
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	681b      	ldr	r3, [r3, #0]
 8010324:	2b00      	cmp	r3, #0
 8010326:	d105      	bne.n	8010334 <ams_precharge_charge+0x28>
       timer = 0;
 8010328:	4b2d      	ldr	r3, [pc, #180]	; (80103e0 <ams_precharge_charge+0xd4>)
 801032a:	2200      	movs	r2, #0
 801032c:	601a      	str	r2, [r3, #0]
       state = AMS_PRECHARGE_CHARGE_0_STATE;
 801032e:	4b2d      	ldr	r3, [pc, #180]	; (80103e4 <ams_precharge_charge+0xd8>)
 8010330:	2200      	movs	r2, #0
 8010332:	701a      	strb	r2, [r3, #0]
   }

   switch(state) {
 8010334:	4b2b      	ldr	r3, [pc, #172]	; (80103e4 <ams_precharge_charge+0xd8>)
 8010336:	781b      	ldrb	r3, [r3, #0]
 8010338:	2b08      	cmp	r3, #8
 801033a:	d842      	bhi.n	80103c2 <ams_precharge_charge+0xb6>
 801033c:	a201      	add	r2, pc, #4	; (adr r2, 8010344 <ams_precharge_charge+0x38>)
 801033e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010342:	bf00      	nop
 8010344:	08010369 	.word	0x08010369
 8010348:	08010373 	.word	0x08010373
 801034c:	0801037d 	.word	0x0801037d
 8010350:	08010387 	.word	0x08010387
 8010354:	08010391 	.word	0x08010391
 8010358:	0801039b 	.word	0x0801039b
 801035c:	080103a5 	.word	0x080103a5
 8010360:	080103af 	.word	0x080103af
 8010364:	080103b9 	.word	0x080103b9
       case AMS_PRECHARGE_CHARGE_0_STATE:
           ams_precharge_charge_0(&timer, &state);
 8010368:	491e      	ldr	r1, [pc, #120]	; (80103e4 <ams_precharge_charge+0xd8>)
 801036a:	481d      	ldr	r0, [pc, #116]	; (80103e0 <ams_precharge_charge+0xd4>)
 801036c:	f7ff fe14 	bl	800ff98 <ams_precharge_charge_0>
           break;
 8010370:	e027      	b.n	80103c2 <ams_precharge_charge+0xb6>
       case AMS_PRECHARGE_CHARGE_START_CHARGER_STATE:
           ams_precharge_charge_start_charger(&timer, &state);
 8010372:	491c      	ldr	r1, [pc, #112]	; (80103e4 <ams_precharge_charge+0xd8>)
 8010374:	481a      	ldr	r0, [pc, #104]	; (80103e0 <ams_precharge_charge+0xd4>)
 8010376:	f7ff fe1b 	bl	800ffb0 <ams_precharge_charge_start_charger>
           break;
 801037a:	e022      	b.n	80103c2 <ams_precharge_charge+0xb6>
       case AMS_PRECHARGE_CHARGE_CLOSE_AIR_MINUS_STATE:
           ams_precharge_charge_close_air_minus(&timer, &state);
 801037c:	4919      	ldr	r1, [pc, #100]	; (80103e4 <ams_precharge_charge+0xd8>)
 801037e:	4818      	ldr	r0, [pc, #96]	; (80103e0 <ams_precharge_charge+0xd4>)
 8010380:	f7ff fe54 	bl	801002c <ams_precharge_charge_close_air_minus>
           break;
 8010384:	e01d      	b.n	80103c2 <ams_precharge_charge+0xb6>
       case AMS_PRECHARGE_CHARGE_ERROR_STATE:
           ams_precharge_charge_error(&timer, &state);
 8010386:	4917      	ldr	r1, [pc, #92]	; (80103e4 <ams_precharge_charge+0xd8>)
 8010388:	4815      	ldr	r0, [pc, #84]	; (80103e0 <ams_precharge_charge+0xd4>)
 801038a:	f7ff fe8d 	bl	80100a8 <ams_precharge_charge_error>
           break;
 801038e:	e018      	b.n	80103c2 <ams_precharge_charge+0xb6>
       case AMS_PRECHARGE_CHARGE_CLOSE_PRECHARGE_STATE:
           ams_precharge_charge_close_precharge(&timer, &state);
 8010390:	4914      	ldr	r1, [pc, #80]	; (80103e4 <ams_precharge_charge+0xd8>)
 8010392:	4813      	ldr	r0, [pc, #76]	; (80103e0 <ams_precharge_charge+0xd4>)
 8010394:	f7ff fe98 	bl	80100c8 <ams_precharge_charge_close_precharge>
           break;
 8010398:	e013      	b.n	80103c2 <ams_precharge_charge+0xb6>
       case AMS_PRECHARGE_CHARGE_WAIT_STATE:
           ams_precharge_charge_wait(&timer, &state);
 801039a:	4912      	ldr	r1, [pc, #72]	; (80103e4 <ams_precharge_charge+0xd8>)
 801039c:	4810      	ldr	r0, [pc, #64]	; (80103e0 <ams_precharge_charge+0xd4>)
 801039e:	f7ff fecf 	bl	8010140 <ams_precharge_charge_wait>
           break;
 80103a2:	e00e      	b.n	80103c2 <ams_precharge_charge+0xb6>
       case AMS_PRECHARGE_CHARGE_CLOSE_AIR_PLUS_STATE:
           ams_precharge_charge_close_air_plus(&timer, &state);
 80103a4:	490f      	ldr	r1, [pc, #60]	; (80103e4 <ams_precharge_charge+0xd8>)
 80103a6:	480e      	ldr	r0, [pc, #56]	; (80103e0 <ams_precharge_charge+0xd4>)
 80103a8:	f7ff ff28 	bl	80101fc <ams_precharge_charge_close_air_plus>
           break;
 80103ac:	e009      	b.n	80103c2 <ams_precharge_charge+0xb6>
       case AMS_PRECHARGE_CHARGE_OPEN_PRECHARGE_STATE:
           ams_precharge_charge_open_precharge(&timer, &state);
 80103ae:	490d      	ldr	r1, [pc, #52]	; (80103e4 <ams_precharge_charge+0xd8>)
 80103b0:	480b      	ldr	r0, [pc, #44]	; (80103e0 <ams_precharge_charge+0xd4>)
 80103b2:	f7ff ff61 	bl	8010278 <ams_precharge_charge_open_precharge>
           break;
 80103b6:	e004      	b.n	80103c2 <ams_precharge_charge+0xb6>
       case AMS_PRECHARGE_CHARGE_EXIT_STATE:
           ams_precharge_charge_exit(&timer, &state);
 80103b8:	490a      	ldr	r1, [pc, #40]	; (80103e4 <ams_precharge_charge+0xd8>)
 80103ba:	4809      	ldr	r0, [pc, #36]	; (80103e0 <ams_precharge_charge+0xd4>)
 80103bc:	f7ff ff9a 	bl	80102f4 <ams_precharge_charge_exit>
           break;
 80103c0:	bf00      	nop
   }

   if(ams_parameters.precharge_charge_complete_u8) {
 80103c2:	4b09      	ldr	r3, [pc, #36]	; (80103e8 <ams_precharge_charge+0xdc>)
 80103c4:	78db      	ldrb	r3, [r3, #3]
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d005      	beq.n	80103d6 <ams_precharge_charge+0xca>
       super_timer[0] = 0;
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	2200      	movs	r2, #0
 80103ce:	601a      	str	r2, [r3, #0]
       super_state[0] = AMS_CHARGE_STATE;
 80103d0:	683b      	ldr	r3, [r7, #0]
 80103d2:	2208      	movs	r2, #8
 80103d4:	701a      	strb	r2, [r3, #0]
   }

}
 80103d6:	bf00      	nop
 80103d8:	3708      	adds	r7, #8
 80103da:	46bd      	mov	sp, r7
 80103dc:	bd80      	pop	{r7, pc}
 80103de:	bf00      	nop
 80103e0:	200017a0 	.word	0x200017a0
 80103e4:	200017a4 	.word	0x200017a4
 80103e8:	2001b6ec 	.word	0x2001b6ec
 80103ec:	00000000 	.word	0x00000000

080103f0 <ams_charge>:
void ams_charge(uint32_t* super_timer, uint8_t* super_state) {
 80103f0:	b580      	push	{r7, lr}
 80103f2:	b082      	sub	sp, #8
 80103f4:	af00      	add	r7, sp, #0
 80103f6:	6078      	str	r0, [r7, #4]
 80103f8:	6039      	str	r1, [r7, #0]
   if((ams_inputs.charge_u8==0)||(0.995*ams_inputs.sought_voltage_f64<ams_inputs.accumulator_voltage_f64)) {
 80103fa:	4b25      	ldr	r3, [pc, #148]	; (8010490 <ams_charge+0xa0>)
 80103fc:	7e1b      	ldrb	r3, [r3, #24]
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d013      	beq.n	801042a <ams_charge+0x3a>
 8010402:	4b23      	ldr	r3, [pc, #140]	; (8010490 <ams_charge+0xa0>)
 8010404:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010408:	a31f      	add	r3, pc, #124	; (adr r3, 8010488 <ams_charge+0x98>)
 801040a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801040e:	f7f0 f8e5 	bl	80005dc <__aeabi_dmul>
 8010412:	4602      	mov	r2, r0
 8010414:	460b      	mov	r3, r1
 8010416:	4610      	mov	r0, r2
 8010418:	4619      	mov	r1, r3
 801041a:	4b1d      	ldr	r3, [pc, #116]	; (8010490 <ams_charge+0xa0>)
 801041c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010420:	f7f0 fb4e 	bl	8000ac0 <__aeabi_dcmplt>
 8010424:	4603      	mov	r3, r0
 8010426:	2b00      	cmp	r3, #0
 8010428:	d012      	beq.n	8010450 <ams_charge+0x60>
       ams_outputs.enable_charger_u8=0;
 801042a:	4b1a      	ldr	r3, [pc, #104]	; (8010494 <ams_charge+0xa4>)
 801042c:	2200      	movs	r2, #0
 801042e:	711a      	strb	r2, [r3, #4]
       ams_outputs.enable_precharge_u8=0;
 8010430:	4b18      	ldr	r3, [pc, #96]	; (8010494 <ams_charge+0xa4>)
 8010432:	2200      	movs	r2, #0
 8010434:	709a      	strb	r2, [r3, #2]
       ams_outputs.enable_AIR_plus_u8=0;
 8010436:	4b17      	ldr	r3, [pc, #92]	; (8010494 <ams_charge+0xa4>)
 8010438:	2200      	movs	r2, #0
 801043a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
       ams_outputs.enable_AIR_minus_u8=0;
 801043e:	4b15      	ldr	r3, [pc, #84]	; (8010494 <ams_charge+0xa4>)
 8010440:	2200      	movs	r2, #0
 8010442:	705a      	strb	r2, [r3, #1]
       super_timer[0] = 0;
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	2200      	movs	r2, #0
 8010448:	601a      	str	r2, [r3, #0]
       super_state[0] = AMS_IDLE_STATE;
 801044a:	683b      	ldr	r3, [r7, #0]
 801044c:	2202      	movs	r2, #2
 801044e:	701a      	strb	r2, [r3, #0]
   }
   if(ams_inputs.error_u8||ams_parameters.precharge_charge_error_u8) {
 8010450:	4b0f      	ldr	r3, [pc, #60]	; (8010490 <ams_charge+0xa0>)
 8010452:	7edb      	ldrb	r3, [r3, #27]
 8010454:	2b00      	cmp	r3, #0
 8010456:	d103      	bne.n	8010460 <ams_charge+0x70>
 8010458:	4b0f      	ldr	r3, [pc, #60]	; (8010498 <ams_charge+0xa8>)
 801045a:	789b      	ldrb	r3, [r3, #2]
 801045c:	2b00      	cmp	r3, #0
 801045e:	d00f      	beq.n	8010480 <ams_charge+0x90>
       ams_outputs.enable_precharge_u8=0;
 8010460:	4b0c      	ldr	r3, [pc, #48]	; (8010494 <ams_charge+0xa4>)
 8010462:	2200      	movs	r2, #0
 8010464:	709a      	strb	r2, [r3, #2]
       ams_outputs.enable_AIR_plus_u8=0;
 8010466:	4b0b      	ldr	r3, [pc, #44]	; (8010494 <ams_charge+0xa4>)
 8010468:	2200      	movs	r2, #0
 801046a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
       ams_outputs.enable_AIR_minus_u8=0;
 801046e:	4b09      	ldr	r3, [pc, #36]	; (8010494 <ams_charge+0xa4>)
 8010470:	2200      	movs	r2, #0
 8010472:	705a      	strb	r2, [r3, #1]
       super_timer[0] = 0;
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	2200      	movs	r2, #0
 8010478:	601a      	str	r2, [r3, #0]
       super_state[0] = AMS_ERROR_STATE;
 801047a:	683b      	ldr	r3, [r7, #0]
 801047c:	2206      	movs	r2, #6
 801047e:	701a      	strb	r2, [r3, #0]
   }

}
 8010480:	bf00      	nop
 8010482:	3708      	adds	r7, #8
 8010484:	46bd      	mov	sp, r7
 8010486:	bd80      	pop	{r7, pc}
 8010488:	3d70a3d7 	.word	0x3d70a3d7
 801048c:	3fefd70a 	.word	0x3fefd70a
 8010490:	2001b6b0 	.word	0x2001b6b0
 8010494:	2001b6f4 	.word	0x2001b6f4
 8010498:	2001b6ec 	.word	0x2001b6ec

0801049c <ams>:
void ams() {
 801049c:	b580      	push	{r7, lr}
 801049e:	af00      	add	r7, sp, #0
   static ams_t state = AMS_0_STATE;
   static uint32_t timer = 0;
   timer++;
 80104a0:	4b26      	ldr	r3, [pc, #152]	; (801053c <ams+0xa0>)
 80104a2:	681b      	ldr	r3, [r3, #0]
 80104a4:	3301      	adds	r3, #1
 80104a6:	4a25      	ldr	r2, [pc, #148]	; (801053c <ams+0xa0>)
 80104a8:	6013      	str	r3, [r2, #0]
   switch(state) {
 80104aa:	4b25      	ldr	r3, [pc, #148]	; (8010540 <ams+0xa4>)
 80104ac:	781b      	ldrb	r3, [r3, #0]
 80104ae:	2b08      	cmp	r3, #8
 80104b0:	d841      	bhi.n	8010536 <ams+0x9a>
 80104b2:	a201      	add	r2, pc, #4	; (adr r2, 80104b8 <ams+0x1c>)
 80104b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80104b8:	080104dd 	.word	0x080104dd
 80104bc:	080104e7 	.word	0x080104e7
 80104c0:	080104f1 	.word	0x080104f1
 80104c4:	080104fb 	.word	0x080104fb
 80104c8:	08010505 	.word	0x08010505
 80104cc:	0801050f 	.word	0x0801050f
 80104d0:	08010519 	.word	0x08010519
 80104d4:	08010523 	.word	0x08010523
 80104d8:	0801052d 	.word	0x0801052d
       case AMS_0_STATE:
           ams_0(&timer, &state);
 80104dc:	4918      	ldr	r1, [pc, #96]	; (8010540 <ams+0xa4>)
 80104de:	4817      	ldr	r0, [pc, #92]	; (801053c <ams+0xa0>)
 80104e0:	f7ff fa30 	bl	800f944 <ams_0>
           break;
 80104e4:	e027      	b.n	8010536 <ams+0x9a>
       case AMS_ENTRY_STATE:
           ams_entry(&timer, &state);
 80104e6:	4916      	ldr	r1, [pc, #88]	; (8010540 <ams+0xa4>)
 80104e8:	4814      	ldr	r0, [pc, #80]	; (801053c <ams+0xa0>)
 80104ea:	f7ff fa3d 	bl	800f968 <ams_entry>
           break;
 80104ee:	e022      	b.n	8010536 <ams+0x9a>
       case AMS_IDLE_STATE:
           ams_idle(&timer, &state);
 80104f0:	4913      	ldr	r1, [pc, #76]	; (8010540 <ams+0xa4>)
 80104f2:	4812      	ldr	r0, [pc, #72]	; (801053c <ams+0xa0>)
 80104f4:	f7ff fa76 	bl	800f9e4 <ams_idle>
           break;
 80104f8:	e01d      	b.n	8010536 <ams+0x9a>
       case AMS_BALANCE_STATE:
           ams_balance(&timer, &state);
 80104fa:	4911      	ldr	r1, [pc, #68]	; (8010540 <ams+0xa4>)
 80104fc:	480f      	ldr	r0, [pc, #60]	; (801053c <ams+0xa0>)
 80104fe:	f7ff faab 	bl	800fa58 <ams_balance>
           break;
 8010502:	e018      	b.n	8010536 <ams+0x9a>
       case AMS_PRECHARGE_DRIVE_STATE:
           ams_precharge_drive(&timer, &state);
 8010504:	490e      	ldr	r1, [pc, #56]	; (8010540 <ams+0xa4>)
 8010506:	480d      	ldr	r0, [pc, #52]	; (801053c <ams+0xa0>)
 8010508:	f7ff fc6c 	bl	800fde4 <ams_precharge_drive>
           break;
 801050c:	e013      	b.n	8010536 <ams+0x9a>
       case AMS_DRIVE_STATE:
           ams_drive(&timer, &state);
 801050e:	490c      	ldr	r1, [pc, #48]	; (8010540 <ams+0xa4>)
 8010510:	480a      	ldr	r0, [pc, #40]	; (801053c <ams+0xa0>)
 8010512:	f7ff fce5 	bl	800fee0 <ams_drive>
           break;
 8010516:	e00e      	b.n	8010536 <ams+0x9a>
       case AMS_ERROR_STATE:
           ams_error(&timer, &state);
 8010518:	4909      	ldr	r1, [pc, #36]	; (8010540 <ams+0xa4>)
 801051a:	4808      	ldr	r0, [pc, #32]	; (801053c <ams+0xa0>)
 801051c:	f7ff fd18 	bl	800ff50 <ams_error>
           break;
 8010520:	e009      	b.n	8010536 <ams+0x9a>
       case AMS_PRECHARGE_CHARGE_STATE:
           ams_precharge_charge(&timer, &state);
 8010522:	4907      	ldr	r1, [pc, #28]	; (8010540 <ams+0xa4>)
 8010524:	4805      	ldr	r0, [pc, #20]	; (801053c <ams+0xa0>)
 8010526:	f7ff fef1 	bl	801030c <ams_precharge_charge>
           break;
 801052a:	e004      	b.n	8010536 <ams+0x9a>
       case AMS_CHARGE_STATE:
           ams_charge(&timer, &state);
 801052c:	4904      	ldr	r1, [pc, #16]	; (8010540 <ams+0xa4>)
 801052e:	4803      	ldr	r0, [pc, #12]	; (801053c <ams+0xa0>)
 8010530:	f7ff ff5e 	bl	80103f0 <ams_charge>
           break;
 8010534:	bf00      	nop
   }


}
 8010536:	bf00      	nop
 8010538:	bd80      	pop	{r7, pc}
 801053a:	bf00      	nop
 801053c:	200017a8 	.word	0x200017a8
 8010540:	200017ac 	.word	0x200017ac

08010544 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8010544:	f8df d034 	ldr.w	sp, [pc, #52]	; 801057c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8010548:	480d      	ldr	r0, [pc, #52]	; (8010580 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 801054a:	490e      	ldr	r1, [pc, #56]	; (8010584 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 801054c:	4a0e      	ldr	r2, [pc, #56]	; (8010588 <LoopFillZerobss+0x1e>)
  movs r3, #0
 801054e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8010550:	e002      	b.n	8010558 <LoopCopyDataInit>

08010552 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8010552:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8010554:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8010556:	3304      	adds	r3, #4

08010558 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8010558:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 801055a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 801055c:	d3f9      	bcc.n	8010552 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 801055e:	4a0b      	ldr	r2, [pc, #44]	; (801058c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8010560:	4c0b      	ldr	r4, [pc, #44]	; (8010590 <LoopFillZerobss+0x26>)
  movs r3, #0
 8010562:	2300      	movs	r3, #0
  b LoopFillZerobss
 8010564:	e001      	b.n	801056a <LoopFillZerobss>

08010566 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8010566:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8010568:	3204      	adds	r2, #4

0801056a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 801056a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 801056c:	d3fb      	bcc.n	8010566 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 801056e:	f7f3 fef3 	bl	8004358 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8010572:	f009 fbcf 	bl	8019d14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8010576:	f7f2 fae5 	bl	8002b44 <main>
  bx  lr    
 801057a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 801057c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8010580:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8010584:	2000142c 	.word	0x2000142c
  ldr r2, =_sidata
 8010588:	0801b1e8 	.word	0x0801b1e8
  ldr r2, =_sbss
 801058c:	20001430 	.word	0x20001430
  ldr r4, =_ebss
 8010590:	2001ea24 	.word	0x2001ea24

08010594 <CAN1_SCE_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8010594:	e7fe      	b.n	8010594 <CAN1_SCE_IRQHandler>
	...

08010598 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8010598:	b580      	push	{r7, lr}
 801059a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 801059c:	4b0e      	ldr	r3, [pc, #56]	; (80105d8 <HAL_Init+0x40>)
 801059e:	681b      	ldr	r3, [r3, #0]
 80105a0:	4a0d      	ldr	r2, [pc, #52]	; (80105d8 <HAL_Init+0x40>)
 80105a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80105a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80105a8:	4b0b      	ldr	r3, [pc, #44]	; (80105d8 <HAL_Init+0x40>)
 80105aa:	681b      	ldr	r3, [r3, #0]
 80105ac:	4a0a      	ldr	r2, [pc, #40]	; (80105d8 <HAL_Init+0x40>)
 80105ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80105b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80105b4:	4b08      	ldr	r3, [pc, #32]	; (80105d8 <HAL_Init+0x40>)
 80105b6:	681b      	ldr	r3, [r3, #0]
 80105b8:	4a07      	ldr	r2, [pc, #28]	; (80105d8 <HAL_Init+0x40>)
 80105ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80105be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80105c0:	2003      	movs	r0, #3
 80105c2:	f001 fa8a 	bl	8011ada <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80105c6:	200f      	movs	r0, #15
 80105c8:	f7f3 fe06 	bl	80041d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80105cc:	f7f3 fdd8 	bl	8004180 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80105d0:	2300      	movs	r3, #0
}
 80105d2:	4618      	mov	r0, r3
 80105d4:	bd80      	pop	{r7, pc}
 80105d6:	bf00      	nop
 80105d8:	40023c00 	.word	0x40023c00

080105dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80105dc:	b480      	push	{r7}
 80105de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80105e0:	4b06      	ldr	r3, [pc, #24]	; (80105fc <HAL_IncTick+0x20>)
 80105e2:	781b      	ldrb	r3, [r3, #0]
 80105e4:	461a      	mov	r2, r3
 80105e6:	4b06      	ldr	r3, [pc, #24]	; (8010600 <HAL_IncTick+0x24>)
 80105e8:	681b      	ldr	r3, [r3, #0]
 80105ea:	4413      	add	r3, r2
 80105ec:	4a04      	ldr	r2, [pc, #16]	; (8010600 <HAL_IncTick+0x24>)
 80105ee:	6013      	str	r3, [r2, #0]
}
 80105f0:	bf00      	nop
 80105f2:	46bd      	mov	sp, r7
 80105f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105f8:	4770      	bx	lr
 80105fa:	bf00      	nop
 80105fc:	200013bc 	.word	0x200013bc
 8010600:	2001e92c 	.word	0x2001e92c

08010604 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8010604:	b480      	push	{r7}
 8010606:	af00      	add	r7, sp, #0
  return uwTick;
 8010608:	4b03      	ldr	r3, [pc, #12]	; (8010618 <HAL_GetTick+0x14>)
 801060a:	681b      	ldr	r3, [r3, #0]
}
 801060c:	4618      	mov	r0, r3
 801060e:	46bd      	mov	sp, r7
 8010610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010614:	4770      	bx	lr
 8010616:	bf00      	nop
 8010618:	2001e92c 	.word	0x2001e92c

0801061c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 801061c:	b580      	push	{r7, lr}
 801061e:	b084      	sub	sp, #16
 8010620:	af00      	add	r7, sp, #0
 8010622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8010624:	f7ff ffee 	bl	8010604 <HAL_GetTick>
 8010628:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 801062e:	68fb      	ldr	r3, [r7, #12]
 8010630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010634:	d005      	beq.n	8010642 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8010636:	4b0a      	ldr	r3, [pc, #40]	; (8010660 <HAL_Delay+0x44>)
 8010638:	781b      	ldrb	r3, [r3, #0]
 801063a:	461a      	mov	r2, r3
 801063c:	68fb      	ldr	r3, [r7, #12]
 801063e:	4413      	add	r3, r2
 8010640:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8010642:	bf00      	nop
 8010644:	f7ff ffde 	bl	8010604 <HAL_GetTick>
 8010648:	4602      	mov	r2, r0
 801064a:	68bb      	ldr	r3, [r7, #8]
 801064c:	1ad3      	subs	r3, r2, r3
 801064e:	68fa      	ldr	r2, [r7, #12]
 8010650:	429a      	cmp	r2, r3
 8010652:	d8f7      	bhi.n	8010644 <HAL_Delay+0x28>
  {
  }
}
 8010654:	bf00      	nop
 8010656:	bf00      	nop
 8010658:	3710      	adds	r7, #16
 801065a:	46bd      	mov	sp, r7
 801065c:	bd80      	pop	{r7, pc}
 801065e:	bf00      	nop
 8010660:	200013bc 	.word	0x200013bc

08010664 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8010664:	b580      	push	{r7, lr}
 8010666:	b084      	sub	sp, #16
 8010668:	af00      	add	r7, sp, #0
 801066a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 801066c:	2300      	movs	r3, #0
 801066e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	2b00      	cmp	r3, #0
 8010674:	d101      	bne.n	801067a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8010676:	2301      	movs	r3, #1
 8010678:	e033      	b.n	80106e2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801067e:	2b00      	cmp	r3, #0
 8010680:	d109      	bne.n	8010696 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8010682:	6878      	ldr	r0, [r7, #4]
 8010684:	f7f1 fddc 	bl	8002240 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	2200      	movs	r2, #0
 801068c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	2200      	movs	r2, #0
 8010692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801069a:	f003 0310 	and.w	r3, r3, #16
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d118      	bne.n	80106d4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80106a6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80106aa:	f023 0302 	bic.w	r3, r3, #2
 80106ae:	f043 0202 	orr.w	r2, r3, #2
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80106b6:	6878      	ldr	r0, [r7, #4]
 80106b8:	f000 fba8 	bl	8010e0c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	2200      	movs	r2, #0
 80106c0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80106c6:	f023 0303 	bic.w	r3, r3, #3
 80106ca:	f043 0201 	orr.w	r2, r3, #1
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	641a      	str	r2, [r3, #64]	; 0x40
 80106d2:	e001      	b.n	80106d8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80106d4:	2301      	movs	r3, #1
 80106d6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	2200      	movs	r2, #0
 80106dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80106e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80106e2:	4618      	mov	r0, r3
 80106e4:	3710      	adds	r7, #16
 80106e6:	46bd      	mov	sp, r7
 80106e8:	bd80      	pop	{r7, pc}

080106ea <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80106ea:	b580      	push	{r7, lr}
 80106ec:	b084      	sub	sp, #16
 80106ee:	af00      	add	r7, sp, #0
 80106f0:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80106f2:	2300      	movs	r3, #0
 80106f4:	60fb      	str	r3, [r7, #12]
 80106f6:	2300      	movs	r3, #0
 80106f8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	681b      	ldr	r3, [r3, #0]
 80106fe:	681b      	ldr	r3, [r3, #0]
 8010700:	f003 0302 	and.w	r3, r3, #2
 8010704:	2b02      	cmp	r3, #2
 8010706:	bf0c      	ite	eq
 8010708:	2301      	moveq	r3, #1
 801070a:	2300      	movne	r3, #0
 801070c:	b2db      	uxtb	r3, r3
 801070e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	681b      	ldr	r3, [r3, #0]
 8010714:	685b      	ldr	r3, [r3, #4]
 8010716:	f003 0320 	and.w	r3, r3, #32
 801071a:	2b20      	cmp	r3, #32
 801071c:	bf0c      	ite	eq
 801071e:	2301      	moveq	r3, #1
 8010720:	2300      	movne	r3, #0
 8010722:	b2db      	uxtb	r3, r3
 8010724:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8010726:	68fb      	ldr	r3, [r7, #12]
 8010728:	2b00      	cmp	r3, #0
 801072a:	d049      	beq.n	80107c0 <HAL_ADC_IRQHandler+0xd6>
 801072c:	68bb      	ldr	r3, [r7, #8]
 801072e:	2b00      	cmp	r3, #0
 8010730:	d046      	beq.n	80107c0 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010736:	f003 0310 	and.w	r3, r3, #16
 801073a:	2b00      	cmp	r3, #0
 801073c:	d105      	bne.n	801074a <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010742:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	681b      	ldr	r3, [r3, #0]
 801074e:	689b      	ldr	r3, [r3, #8]
 8010750:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8010754:	2b00      	cmp	r3, #0
 8010756:	d12b      	bne.n	80107b0 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 801075c:	2b00      	cmp	r3, #0
 801075e:	d127      	bne.n	80107b0 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	681b      	ldr	r3, [r3, #0]
 8010764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010766:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 801076a:	2b00      	cmp	r3, #0
 801076c:	d006      	beq.n	801077c <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	681b      	ldr	r3, [r3, #0]
 8010772:	689b      	ldr	r3, [r3, #8]
 8010774:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8010778:	2b00      	cmp	r3, #0
 801077a:	d119      	bne.n	80107b0 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	681b      	ldr	r3, [r3, #0]
 8010780:	685a      	ldr	r2, [r3, #4]
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	681b      	ldr	r3, [r3, #0]
 8010786:	f022 0220 	bic.w	r2, r2, #32
 801078a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010790:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801079c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	d105      	bne.n	80107b0 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80107a8:	f043 0201 	orr.w	r2, r3, #1
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80107b0:	6878      	ldr	r0, [r7, #4]
 80107b2:	f7f1 ffbd 	bl	8002730 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	681b      	ldr	r3, [r3, #0]
 80107ba:	f06f 0212 	mvn.w	r2, #18
 80107be:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	681b      	ldr	r3, [r3, #0]
 80107c4:	681b      	ldr	r3, [r3, #0]
 80107c6:	f003 0304 	and.w	r3, r3, #4
 80107ca:	2b04      	cmp	r3, #4
 80107cc:	bf0c      	ite	eq
 80107ce:	2301      	moveq	r3, #1
 80107d0:	2300      	movne	r3, #0
 80107d2:	b2db      	uxtb	r3, r3
 80107d4:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	681b      	ldr	r3, [r3, #0]
 80107da:	685b      	ldr	r3, [r3, #4]
 80107dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80107e0:	2b80      	cmp	r3, #128	; 0x80
 80107e2:	bf0c      	ite	eq
 80107e4:	2301      	moveq	r3, #1
 80107e6:	2300      	movne	r3, #0
 80107e8:	b2db      	uxtb	r3, r3
 80107ea:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80107ec:	68fb      	ldr	r3, [r7, #12]
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	d057      	beq.n	80108a2 <HAL_ADC_IRQHandler+0x1b8>
 80107f2:	68bb      	ldr	r3, [r7, #8]
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	d054      	beq.n	80108a2 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80107fc:	f003 0310 	and.w	r3, r3, #16
 8010800:	2b00      	cmp	r3, #0
 8010802:	d105      	bne.n	8010810 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010808:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	681b      	ldr	r3, [r3, #0]
 8010814:	689b      	ldr	r3, [r3, #8]
 8010816:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 801081a:	2b00      	cmp	r3, #0
 801081c:	d139      	bne.n	8010892 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	681b      	ldr	r3, [r3, #0]
 8010822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010824:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8010828:	2b00      	cmp	r3, #0
 801082a:	d006      	beq.n	801083a <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	681b      	ldr	r3, [r3, #0]
 8010830:	689b      	ldr	r3, [r3, #8]
 8010832:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8010836:	2b00      	cmp	r3, #0
 8010838:	d12b      	bne.n	8010892 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	681b      	ldr	r3, [r3, #0]
 801083e:	685b      	ldr	r3, [r3, #4]
 8010840:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8010844:	2b00      	cmp	r3, #0
 8010846:	d124      	bne.n	8010892 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	681b      	ldr	r3, [r3, #0]
 801084c:	689b      	ldr	r3, [r3, #8]
 801084e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8010852:	2b00      	cmp	r3, #0
 8010854:	d11d      	bne.n	8010892 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 801085a:	2b00      	cmp	r3, #0
 801085c:	d119      	bne.n	8010892 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	681b      	ldr	r3, [r3, #0]
 8010862:	685a      	ldr	r2, [r3, #4]
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	681b      	ldr	r3, [r3, #0]
 8010868:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801086c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010872:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801087e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010882:	2b00      	cmp	r3, #0
 8010884:	d105      	bne.n	8010892 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801088a:	f043 0201 	orr.w	r2, r3, #1
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8010892:	6878      	ldr	r0, [r7, #4]
 8010894:	f000 fc38 	bl	8011108 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	681b      	ldr	r3, [r3, #0]
 801089c:	f06f 020c 	mvn.w	r2, #12
 80108a0:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	681b      	ldr	r3, [r3, #0]
 80108a8:	f003 0301 	and.w	r3, r3, #1
 80108ac:	2b01      	cmp	r3, #1
 80108ae:	bf0c      	ite	eq
 80108b0:	2301      	moveq	r3, #1
 80108b2:	2300      	movne	r3, #0
 80108b4:	b2db      	uxtb	r3, r3
 80108b6:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	681b      	ldr	r3, [r3, #0]
 80108bc:	685b      	ldr	r3, [r3, #4]
 80108be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80108c2:	2b40      	cmp	r3, #64	; 0x40
 80108c4:	bf0c      	ite	eq
 80108c6:	2301      	moveq	r3, #1
 80108c8:	2300      	movne	r3, #0
 80108ca:	b2db      	uxtb	r3, r3
 80108cc:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80108ce:	68fb      	ldr	r3, [r7, #12]
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	d017      	beq.n	8010904 <HAL_ADC_IRQHandler+0x21a>
 80108d4:	68bb      	ldr	r3, [r7, #8]
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	d014      	beq.n	8010904 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	681b      	ldr	r3, [r3, #0]
 80108de:	681b      	ldr	r3, [r3, #0]
 80108e0:	f003 0301 	and.w	r3, r3, #1
 80108e4:	2b01      	cmp	r3, #1
 80108e6:	d10d      	bne.n	8010904 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80108ec:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80108f4:	6878      	ldr	r0, [r7, #4]
 80108f6:	f000 f953 	bl	8010ba0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	681b      	ldr	r3, [r3, #0]
 80108fe:	f06f 0201 	mvn.w	r2, #1
 8010902:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	681b      	ldr	r3, [r3, #0]
 8010908:	681b      	ldr	r3, [r3, #0]
 801090a:	f003 0320 	and.w	r3, r3, #32
 801090e:	2b20      	cmp	r3, #32
 8010910:	bf0c      	ite	eq
 8010912:	2301      	moveq	r3, #1
 8010914:	2300      	movne	r3, #0
 8010916:	b2db      	uxtb	r3, r3
 8010918:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	681b      	ldr	r3, [r3, #0]
 801091e:	685b      	ldr	r3, [r3, #4]
 8010920:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010924:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8010928:	bf0c      	ite	eq
 801092a:	2301      	moveq	r3, #1
 801092c:	2300      	movne	r3, #0
 801092e:	b2db      	uxtb	r3, r3
 8010930:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8010932:	68fb      	ldr	r3, [r7, #12]
 8010934:	2b00      	cmp	r3, #0
 8010936:	d015      	beq.n	8010964 <HAL_ADC_IRQHandler+0x27a>
 8010938:	68bb      	ldr	r3, [r7, #8]
 801093a:	2b00      	cmp	r3, #0
 801093c:	d012      	beq.n	8010964 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010942:	f043 0202 	orr.w	r2, r3, #2
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	681b      	ldr	r3, [r3, #0]
 801094e:	f06f 0220 	mvn.w	r2, #32
 8010952:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8010954:	6878      	ldr	r0, [r7, #4]
 8010956:	f000 f92d 	bl	8010bb4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	681b      	ldr	r3, [r3, #0]
 801095e:	f06f 0220 	mvn.w	r2, #32
 8010962:	601a      	str	r2, [r3, #0]
  }
}
 8010964:	bf00      	nop
 8010966:	3710      	adds	r7, #16
 8010968:	46bd      	mov	sp, r7
 801096a:	bd80      	pop	{r7, pc}

0801096c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 801096c:	b580      	push	{r7, lr}
 801096e:	b086      	sub	sp, #24
 8010970:	af00      	add	r7, sp, #0
 8010972:	60f8      	str	r0, [r7, #12]
 8010974:	60b9      	str	r1, [r7, #8]
 8010976:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8010978:	2300      	movs	r3, #0
 801097a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 801097c:	68fb      	ldr	r3, [r7, #12]
 801097e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010982:	2b01      	cmp	r3, #1
 8010984:	d101      	bne.n	801098a <HAL_ADC_Start_DMA+0x1e>
 8010986:	2302      	movs	r3, #2
 8010988:	e0e9      	b.n	8010b5e <HAL_ADC_Start_DMA+0x1f2>
 801098a:	68fb      	ldr	r3, [r7, #12]
 801098c:	2201      	movs	r2, #1
 801098e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8010992:	68fb      	ldr	r3, [r7, #12]
 8010994:	681b      	ldr	r3, [r3, #0]
 8010996:	689b      	ldr	r3, [r3, #8]
 8010998:	f003 0301 	and.w	r3, r3, #1
 801099c:	2b01      	cmp	r3, #1
 801099e:	d018      	beq.n	80109d2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80109a0:	68fb      	ldr	r3, [r7, #12]
 80109a2:	681b      	ldr	r3, [r3, #0]
 80109a4:	689a      	ldr	r2, [r3, #8]
 80109a6:	68fb      	ldr	r3, [r7, #12]
 80109a8:	681b      	ldr	r3, [r3, #0]
 80109aa:	f042 0201 	orr.w	r2, r2, #1
 80109ae:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80109b0:	4b6d      	ldr	r3, [pc, #436]	; (8010b68 <HAL_ADC_Start_DMA+0x1fc>)
 80109b2:	681b      	ldr	r3, [r3, #0]
 80109b4:	4a6d      	ldr	r2, [pc, #436]	; (8010b6c <HAL_ADC_Start_DMA+0x200>)
 80109b6:	fba2 2303 	umull	r2, r3, r2, r3
 80109ba:	0c9a      	lsrs	r2, r3, #18
 80109bc:	4613      	mov	r3, r2
 80109be:	005b      	lsls	r3, r3, #1
 80109c0:	4413      	add	r3, r2
 80109c2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80109c4:	e002      	b.n	80109cc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80109c6:	693b      	ldr	r3, [r7, #16]
 80109c8:	3b01      	subs	r3, #1
 80109ca:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80109cc:	693b      	ldr	r3, [r7, #16]
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	d1f9      	bne.n	80109c6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80109d2:	68fb      	ldr	r3, [r7, #12]
 80109d4:	681b      	ldr	r3, [r3, #0]
 80109d6:	689b      	ldr	r3, [r3, #8]
 80109d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80109dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80109e0:	d107      	bne.n	80109f2 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80109e2:	68fb      	ldr	r3, [r7, #12]
 80109e4:	681b      	ldr	r3, [r3, #0]
 80109e6:	689a      	ldr	r2, [r3, #8]
 80109e8:	68fb      	ldr	r3, [r7, #12]
 80109ea:	681b      	ldr	r3, [r3, #0]
 80109ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80109f0:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80109f2:	68fb      	ldr	r3, [r7, #12]
 80109f4:	681b      	ldr	r3, [r3, #0]
 80109f6:	689b      	ldr	r3, [r3, #8]
 80109f8:	f003 0301 	and.w	r3, r3, #1
 80109fc:	2b01      	cmp	r3, #1
 80109fe:	f040 80a1 	bne.w	8010b44 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8010a02:	68fb      	ldr	r3, [r7, #12]
 8010a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a06:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8010a0a:	f023 0301 	bic.w	r3, r3, #1
 8010a0e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8010a12:	68fb      	ldr	r3, [r7, #12]
 8010a14:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8010a16:	68fb      	ldr	r3, [r7, #12]
 8010a18:	681b      	ldr	r3, [r3, #0]
 8010a1a:	685b      	ldr	r3, [r3, #4]
 8010a1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	d007      	beq.n	8010a34 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8010a24:	68fb      	ldr	r3, [r7, #12]
 8010a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a28:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8010a2c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8010a30:	68fb      	ldr	r3, [r7, #12]
 8010a32:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8010a34:	68fb      	ldr	r3, [r7, #12]
 8010a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8010a3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010a40:	d106      	bne.n	8010a50 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8010a42:	68fb      	ldr	r3, [r7, #12]
 8010a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010a46:	f023 0206 	bic.w	r2, r3, #6
 8010a4a:	68fb      	ldr	r3, [r7, #12]
 8010a4c:	645a      	str	r2, [r3, #68]	; 0x44
 8010a4e:	e002      	b.n	8010a56 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8010a50:	68fb      	ldr	r3, [r7, #12]
 8010a52:	2200      	movs	r2, #0
 8010a54:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8010a56:	68fb      	ldr	r3, [r7, #12]
 8010a58:	2200      	movs	r2, #0
 8010a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8010a5e:	4b44      	ldr	r3, [pc, #272]	; (8010b70 <HAL_ADC_Start_DMA+0x204>)
 8010a60:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8010a62:	68fb      	ldr	r3, [r7, #12]
 8010a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010a66:	4a43      	ldr	r2, [pc, #268]	; (8010b74 <HAL_ADC_Start_DMA+0x208>)
 8010a68:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8010a6a:	68fb      	ldr	r3, [r7, #12]
 8010a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010a6e:	4a42      	ldr	r2, [pc, #264]	; (8010b78 <HAL_ADC_Start_DMA+0x20c>)
 8010a70:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8010a72:	68fb      	ldr	r3, [r7, #12]
 8010a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010a76:	4a41      	ldr	r2, [pc, #260]	; (8010b7c <HAL_ADC_Start_DMA+0x210>)
 8010a78:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8010a7a:	68fb      	ldr	r3, [r7, #12]
 8010a7c:	681b      	ldr	r3, [r3, #0]
 8010a7e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8010a82:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8010a84:	68fb      	ldr	r3, [r7, #12]
 8010a86:	681b      	ldr	r3, [r3, #0]
 8010a88:	685a      	ldr	r2, [r3, #4]
 8010a8a:	68fb      	ldr	r3, [r7, #12]
 8010a8c:	681b      	ldr	r3, [r3, #0]
 8010a8e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8010a92:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8010a94:	68fb      	ldr	r3, [r7, #12]
 8010a96:	681b      	ldr	r3, [r3, #0]
 8010a98:	689a      	ldr	r2, [r3, #8]
 8010a9a:	68fb      	ldr	r3, [r7, #12]
 8010a9c:	681b      	ldr	r3, [r3, #0]
 8010a9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010aa2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8010aa4:	68fb      	ldr	r3, [r7, #12]
 8010aa6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8010aa8:	68fb      	ldr	r3, [r7, #12]
 8010aaa:	681b      	ldr	r3, [r3, #0]
 8010aac:	334c      	adds	r3, #76	; 0x4c
 8010aae:	4619      	mov	r1, r3
 8010ab0:	68ba      	ldr	r2, [r7, #8]
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	f001 f8f4 	bl	8011ca0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8010ab8:	697b      	ldr	r3, [r7, #20]
 8010aba:	685b      	ldr	r3, [r3, #4]
 8010abc:	f003 031f 	and.w	r3, r3, #31
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	d12a      	bne.n	8010b1a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8010ac4:	68fb      	ldr	r3, [r7, #12]
 8010ac6:	681b      	ldr	r3, [r3, #0]
 8010ac8:	4a2d      	ldr	r2, [pc, #180]	; (8010b80 <HAL_ADC_Start_DMA+0x214>)
 8010aca:	4293      	cmp	r3, r2
 8010acc:	d015      	beq.n	8010afa <HAL_ADC_Start_DMA+0x18e>
 8010ace:	68fb      	ldr	r3, [r7, #12]
 8010ad0:	681b      	ldr	r3, [r3, #0]
 8010ad2:	4a2c      	ldr	r2, [pc, #176]	; (8010b84 <HAL_ADC_Start_DMA+0x218>)
 8010ad4:	4293      	cmp	r3, r2
 8010ad6:	d105      	bne.n	8010ae4 <HAL_ADC_Start_DMA+0x178>
 8010ad8:	4b25      	ldr	r3, [pc, #148]	; (8010b70 <HAL_ADC_Start_DMA+0x204>)
 8010ada:	685b      	ldr	r3, [r3, #4]
 8010adc:	f003 031f 	and.w	r3, r3, #31
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	d00a      	beq.n	8010afa <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8010ae4:	68fb      	ldr	r3, [r7, #12]
 8010ae6:	681b      	ldr	r3, [r3, #0]
 8010ae8:	4a27      	ldr	r2, [pc, #156]	; (8010b88 <HAL_ADC_Start_DMA+0x21c>)
 8010aea:	4293      	cmp	r3, r2
 8010aec:	d136      	bne.n	8010b5c <HAL_ADC_Start_DMA+0x1f0>
 8010aee:	4b20      	ldr	r3, [pc, #128]	; (8010b70 <HAL_ADC_Start_DMA+0x204>)
 8010af0:	685b      	ldr	r3, [r3, #4]
 8010af2:	f003 0310 	and.w	r3, r3, #16
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	d130      	bne.n	8010b5c <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8010afa:	68fb      	ldr	r3, [r7, #12]
 8010afc:	681b      	ldr	r3, [r3, #0]
 8010afe:	689b      	ldr	r3, [r3, #8]
 8010b00:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d129      	bne.n	8010b5c <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8010b08:	68fb      	ldr	r3, [r7, #12]
 8010b0a:	681b      	ldr	r3, [r3, #0]
 8010b0c:	689a      	ldr	r2, [r3, #8]
 8010b0e:	68fb      	ldr	r3, [r7, #12]
 8010b10:	681b      	ldr	r3, [r3, #0]
 8010b12:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8010b16:	609a      	str	r2, [r3, #8]
 8010b18:	e020      	b.n	8010b5c <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8010b1a:	68fb      	ldr	r3, [r7, #12]
 8010b1c:	681b      	ldr	r3, [r3, #0]
 8010b1e:	4a18      	ldr	r2, [pc, #96]	; (8010b80 <HAL_ADC_Start_DMA+0x214>)
 8010b20:	4293      	cmp	r3, r2
 8010b22:	d11b      	bne.n	8010b5c <HAL_ADC_Start_DMA+0x1f0>
 8010b24:	68fb      	ldr	r3, [r7, #12]
 8010b26:	681b      	ldr	r3, [r3, #0]
 8010b28:	689b      	ldr	r3, [r3, #8]
 8010b2a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	d114      	bne.n	8010b5c <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8010b32:	68fb      	ldr	r3, [r7, #12]
 8010b34:	681b      	ldr	r3, [r3, #0]
 8010b36:	689a      	ldr	r2, [r3, #8]
 8010b38:	68fb      	ldr	r3, [r7, #12]
 8010b3a:	681b      	ldr	r3, [r3, #0]
 8010b3c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8010b40:	609a      	str	r2, [r3, #8]
 8010b42:	e00b      	b.n	8010b5c <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8010b44:	68fb      	ldr	r3, [r7, #12]
 8010b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b48:	f043 0210 	orr.w	r2, r3, #16
 8010b4c:	68fb      	ldr	r3, [r7, #12]
 8010b4e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8010b50:	68fb      	ldr	r3, [r7, #12]
 8010b52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010b54:	f043 0201 	orr.w	r2, r3, #1
 8010b58:	68fb      	ldr	r3, [r7, #12]
 8010b5a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8010b5c:	2300      	movs	r3, #0
}
 8010b5e:	4618      	mov	r0, r3
 8010b60:	3718      	adds	r7, #24
 8010b62:	46bd      	mov	sp, r7
 8010b64:	bd80      	pop	{r7, pc}
 8010b66:	bf00      	nop
 8010b68:	20000004 	.word	0x20000004
 8010b6c:	431bde83 	.word	0x431bde83
 8010b70:	40012300 	.word	0x40012300
 8010b74:	08011005 	.word	0x08011005
 8010b78:	080110bf 	.word	0x080110bf
 8010b7c:	080110db 	.word	0x080110db
 8010b80:	40012000 	.word	0x40012000
 8010b84:	40012100 	.word	0x40012100
 8010b88:	40012200 	.word	0x40012200

08010b8c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8010b8c:	b480      	push	{r7}
 8010b8e:	b083      	sub	sp, #12
 8010b90:	af00      	add	r7, sp, #0
 8010b92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8010b94:	bf00      	nop
 8010b96:	370c      	adds	r7, #12
 8010b98:	46bd      	mov	sp, r7
 8010b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b9e:	4770      	bx	lr

08010ba0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8010ba0:	b480      	push	{r7}
 8010ba2:	b083      	sub	sp, #12
 8010ba4:	af00      	add	r7, sp, #0
 8010ba6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8010ba8:	bf00      	nop
 8010baa:	370c      	adds	r7, #12
 8010bac:	46bd      	mov	sp, r7
 8010bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bb2:	4770      	bx	lr

08010bb4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8010bb4:	b480      	push	{r7}
 8010bb6:	b083      	sub	sp, #12
 8010bb8:	af00      	add	r7, sp, #0
 8010bba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8010bbc:	bf00      	nop
 8010bbe:	370c      	adds	r7, #12
 8010bc0:	46bd      	mov	sp, r7
 8010bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bc6:	4770      	bx	lr

08010bc8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8010bc8:	b480      	push	{r7}
 8010bca:	b085      	sub	sp, #20
 8010bcc:	af00      	add	r7, sp, #0
 8010bce:	6078      	str	r0, [r7, #4]
 8010bd0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8010bd2:	2300      	movs	r3, #0
 8010bd4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010bdc:	2b01      	cmp	r3, #1
 8010bde:	d101      	bne.n	8010be4 <HAL_ADC_ConfigChannel+0x1c>
 8010be0:	2302      	movs	r3, #2
 8010be2:	e105      	b.n	8010df0 <HAL_ADC_ConfigChannel+0x228>
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	2201      	movs	r2, #1
 8010be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8010bec:	683b      	ldr	r3, [r7, #0]
 8010bee:	681b      	ldr	r3, [r3, #0]
 8010bf0:	2b09      	cmp	r3, #9
 8010bf2:	d925      	bls.n	8010c40 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	681b      	ldr	r3, [r3, #0]
 8010bf8:	68d9      	ldr	r1, [r3, #12]
 8010bfa:	683b      	ldr	r3, [r7, #0]
 8010bfc:	681b      	ldr	r3, [r3, #0]
 8010bfe:	b29b      	uxth	r3, r3
 8010c00:	461a      	mov	r2, r3
 8010c02:	4613      	mov	r3, r2
 8010c04:	005b      	lsls	r3, r3, #1
 8010c06:	4413      	add	r3, r2
 8010c08:	3b1e      	subs	r3, #30
 8010c0a:	2207      	movs	r2, #7
 8010c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8010c10:	43da      	mvns	r2, r3
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	681b      	ldr	r3, [r3, #0]
 8010c16:	400a      	ands	r2, r1
 8010c18:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	681b      	ldr	r3, [r3, #0]
 8010c1e:	68d9      	ldr	r1, [r3, #12]
 8010c20:	683b      	ldr	r3, [r7, #0]
 8010c22:	689a      	ldr	r2, [r3, #8]
 8010c24:	683b      	ldr	r3, [r7, #0]
 8010c26:	681b      	ldr	r3, [r3, #0]
 8010c28:	b29b      	uxth	r3, r3
 8010c2a:	4618      	mov	r0, r3
 8010c2c:	4603      	mov	r3, r0
 8010c2e:	005b      	lsls	r3, r3, #1
 8010c30:	4403      	add	r3, r0
 8010c32:	3b1e      	subs	r3, #30
 8010c34:	409a      	lsls	r2, r3
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	681b      	ldr	r3, [r3, #0]
 8010c3a:	430a      	orrs	r2, r1
 8010c3c:	60da      	str	r2, [r3, #12]
 8010c3e:	e022      	b.n	8010c86 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	681b      	ldr	r3, [r3, #0]
 8010c44:	6919      	ldr	r1, [r3, #16]
 8010c46:	683b      	ldr	r3, [r7, #0]
 8010c48:	681b      	ldr	r3, [r3, #0]
 8010c4a:	b29b      	uxth	r3, r3
 8010c4c:	461a      	mov	r2, r3
 8010c4e:	4613      	mov	r3, r2
 8010c50:	005b      	lsls	r3, r3, #1
 8010c52:	4413      	add	r3, r2
 8010c54:	2207      	movs	r2, #7
 8010c56:	fa02 f303 	lsl.w	r3, r2, r3
 8010c5a:	43da      	mvns	r2, r3
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	681b      	ldr	r3, [r3, #0]
 8010c60:	400a      	ands	r2, r1
 8010c62:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	681b      	ldr	r3, [r3, #0]
 8010c68:	6919      	ldr	r1, [r3, #16]
 8010c6a:	683b      	ldr	r3, [r7, #0]
 8010c6c:	689a      	ldr	r2, [r3, #8]
 8010c6e:	683b      	ldr	r3, [r7, #0]
 8010c70:	681b      	ldr	r3, [r3, #0]
 8010c72:	b29b      	uxth	r3, r3
 8010c74:	4618      	mov	r0, r3
 8010c76:	4603      	mov	r3, r0
 8010c78:	005b      	lsls	r3, r3, #1
 8010c7a:	4403      	add	r3, r0
 8010c7c:	409a      	lsls	r2, r3
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	681b      	ldr	r3, [r3, #0]
 8010c82:	430a      	orrs	r2, r1
 8010c84:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8010c86:	683b      	ldr	r3, [r7, #0]
 8010c88:	685b      	ldr	r3, [r3, #4]
 8010c8a:	2b06      	cmp	r3, #6
 8010c8c:	d824      	bhi.n	8010cd8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	681b      	ldr	r3, [r3, #0]
 8010c92:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8010c94:	683b      	ldr	r3, [r7, #0]
 8010c96:	685a      	ldr	r2, [r3, #4]
 8010c98:	4613      	mov	r3, r2
 8010c9a:	009b      	lsls	r3, r3, #2
 8010c9c:	4413      	add	r3, r2
 8010c9e:	3b05      	subs	r3, #5
 8010ca0:	221f      	movs	r2, #31
 8010ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8010ca6:	43da      	mvns	r2, r3
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	681b      	ldr	r3, [r3, #0]
 8010cac:	400a      	ands	r2, r1
 8010cae:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	681b      	ldr	r3, [r3, #0]
 8010cb4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8010cb6:	683b      	ldr	r3, [r7, #0]
 8010cb8:	681b      	ldr	r3, [r3, #0]
 8010cba:	b29b      	uxth	r3, r3
 8010cbc:	4618      	mov	r0, r3
 8010cbe:	683b      	ldr	r3, [r7, #0]
 8010cc0:	685a      	ldr	r2, [r3, #4]
 8010cc2:	4613      	mov	r3, r2
 8010cc4:	009b      	lsls	r3, r3, #2
 8010cc6:	4413      	add	r3, r2
 8010cc8:	3b05      	subs	r3, #5
 8010cca:	fa00 f203 	lsl.w	r2, r0, r3
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	681b      	ldr	r3, [r3, #0]
 8010cd2:	430a      	orrs	r2, r1
 8010cd4:	635a      	str	r2, [r3, #52]	; 0x34
 8010cd6:	e04c      	b.n	8010d72 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8010cd8:	683b      	ldr	r3, [r7, #0]
 8010cda:	685b      	ldr	r3, [r3, #4]
 8010cdc:	2b0c      	cmp	r3, #12
 8010cde:	d824      	bhi.n	8010d2a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	681b      	ldr	r3, [r3, #0]
 8010ce4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8010ce6:	683b      	ldr	r3, [r7, #0]
 8010ce8:	685a      	ldr	r2, [r3, #4]
 8010cea:	4613      	mov	r3, r2
 8010cec:	009b      	lsls	r3, r3, #2
 8010cee:	4413      	add	r3, r2
 8010cf0:	3b23      	subs	r3, #35	; 0x23
 8010cf2:	221f      	movs	r2, #31
 8010cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8010cf8:	43da      	mvns	r2, r3
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	681b      	ldr	r3, [r3, #0]
 8010cfe:	400a      	ands	r2, r1
 8010d00:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	681b      	ldr	r3, [r3, #0]
 8010d06:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8010d08:	683b      	ldr	r3, [r7, #0]
 8010d0a:	681b      	ldr	r3, [r3, #0]
 8010d0c:	b29b      	uxth	r3, r3
 8010d0e:	4618      	mov	r0, r3
 8010d10:	683b      	ldr	r3, [r7, #0]
 8010d12:	685a      	ldr	r2, [r3, #4]
 8010d14:	4613      	mov	r3, r2
 8010d16:	009b      	lsls	r3, r3, #2
 8010d18:	4413      	add	r3, r2
 8010d1a:	3b23      	subs	r3, #35	; 0x23
 8010d1c:	fa00 f203 	lsl.w	r2, r0, r3
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	681b      	ldr	r3, [r3, #0]
 8010d24:	430a      	orrs	r2, r1
 8010d26:	631a      	str	r2, [r3, #48]	; 0x30
 8010d28:	e023      	b.n	8010d72 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	681b      	ldr	r3, [r3, #0]
 8010d2e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8010d30:	683b      	ldr	r3, [r7, #0]
 8010d32:	685a      	ldr	r2, [r3, #4]
 8010d34:	4613      	mov	r3, r2
 8010d36:	009b      	lsls	r3, r3, #2
 8010d38:	4413      	add	r3, r2
 8010d3a:	3b41      	subs	r3, #65	; 0x41
 8010d3c:	221f      	movs	r2, #31
 8010d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8010d42:	43da      	mvns	r2, r3
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	681b      	ldr	r3, [r3, #0]
 8010d48:	400a      	ands	r2, r1
 8010d4a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	681b      	ldr	r3, [r3, #0]
 8010d50:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8010d52:	683b      	ldr	r3, [r7, #0]
 8010d54:	681b      	ldr	r3, [r3, #0]
 8010d56:	b29b      	uxth	r3, r3
 8010d58:	4618      	mov	r0, r3
 8010d5a:	683b      	ldr	r3, [r7, #0]
 8010d5c:	685a      	ldr	r2, [r3, #4]
 8010d5e:	4613      	mov	r3, r2
 8010d60:	009b      	lsls	r3, r3, #2
 8010d62:	4413      	add	r3, r2
 8010d64:	3b41      	subs	r3, #65	; 0x41
 8010d66:	fa00 f203 	lsl.w	r2, r0, r3
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	681b      	ldr	r3, [r3, #0]
 8010d6e:	430a      	orrs	r2, r1
 8010d70:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8010d72:	4b22      	ldr	r3, [pc, #136]	; (8010dfc <HAL_ADC_ConfigChannel+0x234>)
 8010d74:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	681b      	ldr	r3, [r3, #0]
 8010d7a:	4a21      	ldr	r2, [pc, #132]	; (8010e00 <HAL_ADC_ConfigChannel+0x238>)
 8010d7c:	4293      	cmp	r3, r2
 8010d7e:	d109      	bne.n	8010d94 <HAL_ADC_ConfigChannel+0x1cc>
 8010d80:	683b      	ldr	r3, [r7, #0]
 8010d82:	681b      	ldr	r3, [r3, #0]
 8010d84:	2b12      	cmp	r3, #18
 8010d86:	d105      	bne.n	8010d94 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8010d88:	68fb      	ldr	r3, [r7, #12]
 8010d8a:	685b      	ldr	r3, [r3, #4]
 8010d8c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8010d90:	68fb      	ldr	r3, [r7, #12]
 8010d92:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	681b      	ldr	r3, [r3, #0]
 8010d98:	4a19      	ldr	r2, [pc, #100]	; (8010e00 <HAL_ADC_ConfigChannel+0x238>)
 8010d9a:	4293      	cmp	r3, r2
 8010d9c:	d123      	bne.n	8010de6 <HAL_ADC_ConfigChannel+0x21e>
 8010d9e:	683b      	ldr	r3, [r7, #0]
 8010da0:	681b      	ldr	r3, [r3, #0]
 8010da2:	2b10      	cmp	r3, #16
 8010da4:	d003      	beq.n	8010dae <HAL_ADC_ConfigChannel+0x1e6>
 8010da6:	683b      	ldr	r3, [r7, #0]
 8010da8:	681b      	ldr	r3, [r3, #0]
 8010daa:	2b11      	cmp	r3, #17
 8010dac:	d11b      	bne.n	8010de6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8010dae:	68fb      	ldr	r3, [r7, #12]
 8010db0:	685b      	ldr	r3, [r3, #4]
 8010db2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8010db6:	68fb      	ldr	r3, [r7, #12]
 8010db8:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8010dba:	683b      	ldr	r3, [r7, #0]
 8010dbc:	681b      	ldr	r3, [r3, #0]
 8010dbe:	2b10      	cmp	r3, #16
 8010dc0:	d111      	bne.n	8010de6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8010dc2:	4b10      	ldr	r3, [pc, #64]	; (8010e04 <HAL_ADC_ConfigChannel+0x23c>)
 8010dc4:	681b      	ldr	r3, [r3, #0]
 8010dc6:	4a10      	ldr	r2, [pc, #64]	; (8010e08 <HAL_ADC_ConfigChannel+0x240>)
 8010dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8010dcc:	0c9a      	lsrs	r2, r3, #18
 8010dce:	4613      	mov	r3, r2
 8010dd0:	009b      	lsls	r3, r3, #2
 8010dd2:	4413      	add	r3, r2
 8010dd4:	005b      	lsls	r3, r3, #1
 8010dd6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8010dd8:	e002      	b.n	8010de0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8010dda:	68bb      	ldr	r3, [r7, #8]
 8010ddc:	3b01      	subs	r3, #1
 8010dde:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8010de0:	68bb      	ldr	r3, [r7, #8]
 8010de2:	2b00      	cmp	r3, #0
 8010de4:	d1f9      	bne.n	8010dda <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	2200      	movs	r2, #0
 8010dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8010dee:	2300      	movs	r3, #0
}
 8010df0:	4618      	mov	r0, r3
 8010df2:	3714      	adds	r7, #20
 8010df4:	46bd      	mov	sp, r7
 8010df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dfa:	4770      	bx	lr
 8010dfc:	40012300 	.word	0x40012300
 8010e00:	40012000 	.word	0x40012000
 8010e04:	20000004 	.word	0x20000004
 8010e08:	431bde83 	.word	0x431bde83

08010e0c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8010e0c:	b480      	push	{r7}
 8010e0e:	b085      	sub	sp, #20
 8010e10:	af00      	add	r7, sp, #0
 8010e12:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8010e14:	4b79      	ldr	r3, [pc, #484]	; (8010ffc <ADC_Init+0x1f0>)
 8010e16:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8010e18:	68fb      	ldr	r3, [r7, #12]
 8010e1a:	685b      	ldr	r3, [r3, #4]
 8010e1c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8010e20:	68fb      	ldr	r3, [r7, #12]
 8010e22:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8010e24:	68fb      	ldr	r3, [r7, #12]
 8010e26:	685a      	ldr	r2, [r3, #4]
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	685b      	ldr	r3, [r3, #4]
 8010e2c:	431a      	orrs	r2, r3
 8010e2e:	68fb      	ldr	r3, [r7, #12]
 8010e30:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	681b      	ldr	r3, [r3, #0]
 8010e36:	685a      	ldr	r2, [r3, #4]
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	681b      	ldr	r3, [r3, #0]
 8010e3c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8010e40:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	681b      	ldr	r3, [r3, #0]
 8010e46:	6859      	ldr	r1, [r3, #4]
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	691b      	ldr	r3, [r3, #16]
 8010e4c:	021a      	lsls	r2, r3, #8
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	681b      	ldr	r3, [r3, #0]
 8010e52:	430a      	orrs	r2, r1
 8010e54:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	681b      	ldr	r3, [r3, #0]
 8010e5a:	685a      	ldr	r2, [r3, #4]
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	681b      	ldr	r3, [r3, #0]
 8010e60:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8010e64:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	681b      	ldr	r3, [r3, #0]
 8010e6a:	6859      	ldr	r1, [r3, #4]
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	689a      	ldr	r2, [r3, #8]
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	681b      	ldr	r3, [r3, #0]
 8010e74:	430a      	orrs	r2, r1
 8010e76:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	681b      	ldr	r3, [r3, #0]
 8010e7c:	689a      	ldr	r2, [r3, #8]
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	681b      	ldr	r3, [r3, #0]
 8010e82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8010e86:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	681b      	ldr	r3, [r3, #0]
 8010e8c:	6899      	ldr	r1, [r3, #8]
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	68da      	ldr	r2, [r3, #12]
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	681b      	ldr	r3, [r3, #0]
 8010e96:	430a      	orrs	r2, r1
 8010e98:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010e9e:	4a58      	ldr	r2, [pc, #352]	; (8011000 <ADC_Init+0x1f4>)
 8010ea0:	4293      	cmp	r3, r2
 8010ea2:	d022      	beq.n	8010eea <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	681b      	ldr	r3, [r3, #0]
 8010ea8:	689a      	ldr	r2, [r3, #8]
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	681b      	ldr	r3, [r3, #0]
 8010eae:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8010eb2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	681b      	ldr	r3, [r3, #0]
 8010eb8:	6899      	ldr	r1, [r3, #8]
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	681b      	ldr	r3, [r3, #0]
 8010ec2:	430a      	orrs	r2, r1
 8010ec4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	681b      	ldr	r3, [r3, #0]
 8010eca:	689a      	ldr	r2, [r3, #8]
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	681b      	ldr	r3, [r3, #0]
 8010ed0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8010ed4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	681b      	ldr	r3, [r3, #0]
 8010eda:	6899      	ldr	r1, [r3, #8]
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	681b      	ldr	r3, [r3, #0]
 8010ee4:	430a      	orrs	r2, r1
 8010ee6:	609a      	str	r2, [r3, #8]
 8010ee8:	e00f      	b.n	8010f0a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	681b      	ldr	r3, [r3, #0]
 8010eee:	689a      	ldr	r2, [r3, #8]
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	681b      	ldr	r3, [r3, #0]
 8010ef4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8010ef8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	681b      	ldr	r3, [r3, #0]
 8010efe:	689a      	ldr	r2, [r3, #8]
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	681b      	ldr	r3, [r3, #0]
 8010f04:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8010f08:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	681b      	ldr	r3, [r3, #0]
 8010f0e:	689a      	ldr	r2, [r3, #8]
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	681b      	ldr	r3, [r3, #0]
 8010f14:	f022 0202 	bic.w	r2, r2, #2
 8010f18:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	681b      	ldr	r3, [r3, #0]
 8010f1e:	6899      	ldr	r1, [r3, #8]
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	7e1b      	ldrb	r3, [r3, #24]
 8010f24:	005a      	lsls	r2, r3, #1
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	681b      	ldr	r3, [r3, #0]
 8010f2a:	430a      	orrs	r2, r1
 8010f2c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	d01b      	beq.n	8010f70 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	681b      	ldr	r3, [r3, #0]
 8010f3c:	685a      	ldr	r2, [r3, #4]
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	681b      	ldr	r3, [r3, #0]
 8010f42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010f46:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	681b      	ldr	r3, [r3, #0]
 8010f4c:	685a      	ldr	r2, [r3, #4]
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	681b      	ldr	r3, [r3, #0]
 8010f52:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8010f56:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	681b      	ldr	r3, [r3, #0]
 8010f5c:	6859      	ldr	r1, [r3, #4]
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f62:	3b01      	subs	r3, #1
 8010f64:	035a      	lsls	r2, r3, #13
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	681b      	ldr	r3, [r3, #0]
 8010f6a:	430a      	orrs	r2, r1
 8010f6c:	605a      	str	r2, [r3, #4]
 8010f6e:	e007      	b.n	8010f80 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	681b      	ldr	r3, [r3, #0]
 8010f74:	685a      	ldr	r2, [r3, #4]
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	681b      	ldr	r3, [r3, #0]
 8010f7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8010f7e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	681b      	ldr	r3, [r3, #0]
 8010f84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	681b      	ldr	r3, [r3, #0]
 8010f8a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8010f8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	681b      	ldr	r3, [r3, #0]
 8010f94:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	69db      	ldr	r3, [r3, #28]
 8010f9a:	3b01      	subs	r3, #1
 8010f9c:	051a      	lsls	r2, r3, #20
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	681b      	ldr	r3, [r3, #0]
 8010fa2:	430a      	orrs	r2, r1
 8010fa4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	681b      	ldr	r3, [r3, #0]
 8010faa:	689a      	ldr	r2, [r3, #8]
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	681b      	ldr	r3, [r3, #0]
 8010fb0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8010fb4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	681b      	ldr	r3, [r3, #0]
 8010fba:	6899      	ldr	r1, [r3, #8]
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010fc2:	025a      	lsls	r2, r3, #9
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	681b      	ldr	r3, [r3, #0]
 8010fc8:	430a      	orrs	r2, r1
 8010fca:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	681b      	ldr	r3, [r3, #0]
 8010fd0:	689a      	ldr	r2, [r3, #8]
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	681b      	ldr	r3, [r3, #0]
 8010fd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010fda:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	681b      	ldr	r3, [r3, #0]
 8010fe0:	6899      	ldr	r1, [r3, #8]
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	695b      	ldr	r3, [r3, #20]
 8010fe6:	029a      	lsls	r2, r3, #10
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	681b      	ldr	r3, [r3, #0]
 8010fec:	430a      	orrs	r2, r1
 8010fee:	609a      	str	r2, [r3, #8]
}
 8010ff0:	bf00      	nop
 8010ff2:	3714      	adds	r7, #20
 8010ff4:	46bd      	mov	sp, r7
 8010ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ffa:	4770      	bx	lr
 8010ffc:	40012300 	.word	0x40012300
 8011000:	0f000001 	.word	0x0f000001

08011004 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8011004:	b580      	push	{r7, lr}
 8011006:	b084      	sub	sp, #16
 8011008:	af00      	add	r7, sp, #0
 801100a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011010:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8011012:	68fb      	ldr	r3, [r7, #12]
 8011014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011016:	f003 0350 	and.w	r3, r3, #80	; 0x50
 801101a:	2b00      	cmp	r3, #0
 801101c:	d13c      	bne.n	8011098 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 801101e:	68fb      	ldr	r3, [r7, #12]
 8011020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011022:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8011026:	68fb      	ldr	r3, [r7, #12]
 8011028:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 801102a:	68fb      	ldr	r3, [r7, #12]
 801102c:	681b      	ldr	r3, [r3, #0]
 801102e:	689b      	ldr	r3, [r3, #8]
 8011030:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8011034:	2b00      	cmp	r3, #0
 8011036:	d12b      	bne.n	8011090 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8011038:	68fb      	ldr	r3, [r7, #12]
 801103a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 801103c:	2b00      	cmp	r3, #0
 801103e:	d127      	bne.n	8011090 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8011040:	68fb      	ldr	r3, [r7, #12]
 8011042:	681b      	ldr	r3, [r3, #0]
 8011044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011046:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 801104a:	2b00      	cmp	r3, #0
 801104c:	d006      	beq.n	801105c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 801104e:	68fb      	ldr	r3, [r7, #12]
 8011050:	681b      	ldr	r3, [r3, #0]
 8011052:	689b      	ldr	r3, [r3, #8]
 8011054:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8011058:	2b00      	cmp	r3, #0
 801105a:	d119      	bne.n	8011090 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 801105c:	68fb      	ldr	r3, [r7, #12]
 801105e:	681b      	ldr	r3, [r3, #0]
 8011060:	685a      	ldr	r2, [r3, #4]
 8011062:	68fb      	ldr	r3, [r7, #12]
 8011064:	681b      	ldr	r3, [r3, #0]
 8011066:	f022 0220 	bic.w	r2, r2, #32
 801106a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 801106c:	68fb      	ldr	r3, [r7, #12]
 801106e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011070:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8011074:	68fb      	ldr	r3, [r7, #12]
 8011076:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8011078:	68fb      	ldr	r3, [r7, #12]
 801107a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801107c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8011080:	2b00      	cmp	r3, #0
 8011082:	d105      	bne.n	8011090 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8011084:	68fb      	ldr	r3, [r7, #12]
 8011086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011088:	f043 0201 	orr.w	r2, r3, #1
 801108c:	68fb      	ldr	r3, [r7, #12]
 801108e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8011090:	68f8      	ldr	r0, [r7, #12]
 8011092:	f7f1 fb4d 	bl	8002730 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8011096:	e00e      	b.n	80110b6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8011098:	68fb      	ldr	r3, [r7, #12]
 801109a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801109c:	f003 0310 	and.w	r3, r3, #16
 80110a0:	2b00      	cmp	r3, #0
 80110a2:	d003      	beq.n	80110ac <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80110a4:	68f8      	ldr	r0, [r7, #12]
 80110a6:	f7ff fd85 	bl	8010bb4 <HAL_ADC_ErrorCallback>
}
 80110aa:	e004      	b.n	80110b6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80110ac:	68fb      	ldr	r3, [r7, #12]
 80110ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80110b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80110b2:	6878      	ldr	r0, [r7, #4]
 80110b4:	4798      	blx	r3
}
 80110b6:	bf00      	nop
 80110b8:	3710      	adds	r7, #16
 80110ba:	46bd      	mov	sp, r7
 80110bc:	bd80      	pop	{r7, pc}

080110be <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80110be:	b580      	push	{r7, lr}
 80110c0:	b084      	sub	sp, #16
 80110c2:	af00      	add	r7, sp, #0
 80110c4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80110ca:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80110cc:	68f8      	ldr	r0, [r7, #12]
 80110ce:	f7ff fd5d 	bl	8010b8c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80110d2:	bf00      	nop
 80110d4:	3710      	adds	r7, #16
 80110d6:	46bd      	mov	sp, r7
 80110d8:	bd80      	pop	{r7, pc}

080110da <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80110da:	b580      	push	{r7, lr}
 80110dc:	b084      	sub	sp, #16
 80110de:	af00      	add	r7, sp, #0
 80110e0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80110e6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80110e8:	68fb      	ldr	r3, [r7, #12]
 80110ea:	2240      	movs	r2, #64	; 0x40
 80110ec:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80110ee:	68fb      	ldr	r3, [r7, #12]
 80110f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80110f2:	f043 0204 	orr.w	r2, r3, #4
 80110f6:	68fb      	ldr	r3, [r7, #12]
 80110f8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80110fa:	68f8      	ldr	r0, [r7, #12]
 80110fc:	f7ff fd5a 	bl	8010bb4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8011100:	bf00      	nop
 8011102:	3710      	adds	r7, #16
 8011104:	46bd      	mov	sp, r7
 8011106:	bd80      	pop	{r7, pc}

08011108 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8011108:	b480      	push	{r7}
 801110a:	b083      	sub	sp, #12
 801110c:	af00      	add	r7, sp, #0
 801110e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8011110:	bf00      	nop
 8011112:	370c      	adds	r7, #12
 8011114:	46bd      	mov	sp, r7
 8011116:	f85d 7b04 	ldr.w	r7, [sp], #4
 801111a:	4770      	bx	lr

0801111c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 801111c:	b580      	push	{r7, lr}
 801111e:	b084      	sub	sp, #16
 8011120:	af00      	add	r7, sp, #0
 8011122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	2b00      	cmp	r3, #0
 8011128:	d101      	bne.n	801112e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 801112a:	2301      	movs	r3, #1
 801112c:	e0ed      	b.n	801130a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011134:	b2db      	uxtb	r3, r3
 8011136:	2b00      	cmp	r3, #0
 8011138:	d102      	bne.n	8011140 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 801113a:	6878      	ldr	r0, [r7, #4]
 801113c:	f7f1 fb76 	bl	800282c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	681b      	ldr	r3, [r3, #0]
 8011144:	681a      	ldr	r2, [r3, #0]
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	681b      	ldr	r3, [r3, #0]
 801114a:	f042 0201 	orr.w	r2, r2, #1
 801114e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8011150:	f7ff fa58 	bl	8010604 <HAL_GetTick>
 8011154:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8011156:	e012      	b.n	801117e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8011158:	f7ff fa54 	bl	8010604 <HAL_GetTick>
 801115c:	4602      	mov	r2, r0
 801115e:	68fb      	ldr	r3, [r7, #12]
 8011160:	1ad3      	subs	r3, r2, r3
 8011162:	2b0a      	cmp	r3, #10
 8011164:	d90b      	bls.n	801117e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801116a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	2205      	movs	r2, #5
 8011176:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 801117a:	2301      	movs	r3, #1
 801117c:	e0c5      	b.n	801130a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	681b      	ldr	r3, [r3, #0]
 8011182:	685b      	ldr	r3, [r3, #4]
 8011184:	f003 0301 	and.w	r3, r3, #1
 8011188:	2b00      	cmp	r3, #0
 801118a:	d0e5      	beq.n	8011158 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	681b      	ldr	r3, [r3, #0]
 8011190:	681a      	ldr	r2, [r3, #0]
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	681b      	ldr	r3, [r3, #0]
 8011196:	f022 0202 	bic.w	r2, r2, #2
 801119a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 801119c:	f7ff fa32 	bl	8010604 <HAL_GetTick>
 80111a0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80111a2:	e012      	b.n	80111ca <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80111a4:	f7ff fa2e 	bl	8010604 <HAL_GetTick>
 80111a8:	4602      	mov	r2, r0
 80111aa:	68fb      	ldr	r3, [r7, #12]
 80111ac:	1ad3      	subs	r3, r2, r3
 80111ae:	2b0a      	cmp	r3, #10
 80111b0:	d90b      	bls.n	80111ca <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80111b6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	2205      	movs	r2, #5
 80111c2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80111c6:	2301      	movs	r3, #1
 80111c8:	e09f      	b.n	801130a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	681b      	ldr	r3, [r3, #0]
 80111ce:	685b      	ldr	r3, [r3, #4]
 80111d0:	f003 0302 	and.w	r3, r3, #2
 80111d4:	2b00      	cmp	r3, #0
 80111d6:	d1e5      	bne.n	80111a4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	7e1b      	ldrb	r3, [r3, #24]
 80111dc:	2b01      	cmp	r3, #1
 80111de:	d108      	bne.n	80111f2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	681b      	ldr	r3, [r3, #0]
 80111e4:	681a      	ldr	r2, [r3, #0]
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	681b      	ldr	r3, [r3, #0]
 80111ea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80111ee:	601a      	str	r2, [r3, #0]
 80111f0:	e007      	b.n	8011202 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	681b      	ldr	r3, [r3, #0]
 80111f6:	681a      	ldr	r2, [r3, #0]
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	681b      	ldr	r3, [r3, #0]
 80111fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8011200:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	7e5b      	ldrb	r3, [r3, #25]
 8011206:	2b01      	cmp	r3, #1
 8011208:	d108      	bne.n	801121c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	681b      	ldr	r3, [r3, #0]
 801120e:	681a      	ldr	r2, [r3, #0]
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	681b      	ldr	r3, [r3, #0]
 8011214:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011218:	601a      	str	r2, [r3, #0]
 801121a:	e007      	b.n	801122c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	681b      	ldr	r3, [r3, #0]
 8011220:	681a      	ldr	r2, [r3, #0]
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	681b      	ldr	r3, [r3, #0]
 8011226:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801122a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	7e9b      	ldrb	r3, [r3, #26]
 8011230:	2b01      	cmp	r3, #1
 8011232:	d108      	bne.n	8011246 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	681b      	ldr	r3, [r3, #0]
 8011238:	681a      	ldr	r2, [r3, #0]
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	681b      	ldr	r3, [r3, #0]
 801123e:	f042 0220 	orr.w	r2, r2, #32
 8011242:	601a      	str	r2, [r3, #0]
 8011244:	e007      	b.n	8011256 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	681b      	ldr	r3, [r3, #0]
 801124a:	681a      	ldr	r2, [r3, #0]
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	681b      	ldr	r3, [r3, #0]
 8011250:	f022 0220 	bic.w	r2, r2, #32
 8011254:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	7edb      	ldrb	r3, [r3, #27]
 801125a:	2b01      	cmp	r3, #1
 801125c:	d108      	bne.n	8011270 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	681b      	ldr	r3, [r3, #0]
 8011262:	681a      	ldr	r2, [r3, #0]
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	681b      	ldr	r3, [r3, #0]
 8011268:	f022 0210 	bic.w	r2, r2, #16
 801126c:	601a      	str	r2, [r3, #0]
 801126e:	e007      	b.n	8011280 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	681b      	ldr	r3, [r3, #0]
 8011274:	681a      	ldr	r2, [r3, #0]
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	681b      	ldr	r3, [r3, #0]
 801127a:	f042 0210 	orr.w	r2, r2, #16
 801127e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	7f1b      	ldrb	r3, [r3, #28]
 8011284:	2b01      	cmp	r3, #1
 8011286:	d108      	bne.n	801129a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	681b      	ldr	r3, [r3, #0]
 801128c:	681a      	ldr	r2, [r3, #0]
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	681b      	ldr	r3, [r3, #0]
 8011292:	f042 0208 	orr.w	r2, r2, #8
 8011296:	601a      	str	r2, [r3, #0]
 8011298:	e007      	b.n	80112aa <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	681b      	ldr	r3, [r3, #0]
 801129e:	681a      	ldr	r2, [r3, #0]
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	681b      	ldr	r3, [r3, #0]
 80112a4:	f022 0208 	bic.w	r2, r2, #8
 80112a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	7f5b      	ldrb	r3, [r3, #29]
 80112ae:	2b01      	cmp	r3, #1
 80112b0:	d108      	bne.n	80112c4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	681b      	ldr	r3, [r3, #0]
 80112b6:	681a      	ldr	r2, [r3, #0]
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	681b      	ldr	r3, [r3, #0]
 80112bc:	f042 0204 	orr.w	r2, r2, #4
 80112c0:	601a      	str	r2, [r3, #0]
 80112c2:	e007      	b.n	80112d4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	681b      	ldr	r3, [r3, #0]
 80112c8:	681a      	ldr	r2, [r3, #0]
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	681b      	ldr	r3, [r3, #0]
 80112ce:	f022 0204 	bic.w	r2, r2, #4
 80112d2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	689a      	ldr	r2, [r3, #8]
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	68db      	ldr	r3, [r3, #12]
 80112dc:	431a      	orrs	r2, r3
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	691b      	ldr	r3, [r3, #16]
 80112e2:	431a      	orrs	r2, r3
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	695b      	ldr	r3, [r3, #20]
 80112e8:	ea42 0103 	orr.w	r1, r2, r3
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	685b      	ldr	r3, [r3, #4]
 80112f0:	1e5a      	subs	r2, r3, #1
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	681b      	ldr	r3, [r3, #0]
 80112f6:	430a      	orrs	r2, r1
 80112f8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	2200      	movs	r2, #0
 80112fe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	2201      	movs	r2, #1
 8011304:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8011308:	2300      	movs	r3, #0
}
 801130a:	4618      	mov	r0, r3
 801130c:	3710      	adds	r7, #16
 801130e:	46bd      	mov	sp, r7
 8011310:	bd80      	pop	{r7, pc}

08011312 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8011312:	b480      	push	{r7}
 8011314:	b087      	sub	sp, #28
 8011316:	af00      	add	r7, sp, #0
 8011318:	60f8      	str	r0, [r7, #12]
 801131a:	60b9      	str	r1, [r7, #8]
 801131c:	607a      	str	r2, [r7, #4]
 801131e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8011320:	68fb      	ldr	r3, [r7, #12]
 8011322:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011326:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8011328:	7dfb      	ldrb	r3, [r7, #23]
 801132a:	2b01      	cmp	r3, #1
 801132c:	d003      	beq.n	8011336 <HAL_CAN_GetRxMessage+0x24>
 801132e:	7dfb      	ldrb	r3, [r7, #23]
 8011330:	2b02      	cmp	r3, #2
 8011332:	f040 80f3 	bne.w	801151c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8011336:	68bb      	ldr	r3, [r7, #8]
 8011338:	2b00      	cmp	r3, #0
 801133a:	d10e      	bne.n	801135a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 801133c:	68fb      	ldr	r3, [r7, #12]
 801133e:	681b      	ldr	r3, [r3, #0]
 8011340:	68db      	ldr	r3, [r3, #12]
 8011342:	f003 0303 	and.w	r3, r3, #3
 8011346:	2b00      	cmp	r3, #0
 8011348:	d116      	bne.n	8011378 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 801134a:	68fb      	ldr	r3, [r7, #12]
 801134c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801134e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8011352:	68fb      	ldr	r3, [r7, #12]
 8011354:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8011356:	2301      	movs	r3, #1
 8011358:	e0e7      	b.n	801152a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 801135a:	68fb      	ldr	r3, [r7, #12]
 801135c:	681b      	ldr	r3, [r3, #0]
 801135e:	691b      	ldr	r3, [r3, #16]
 8011360:	f003 0303 	and.w	r3, r3, #3
 8011364:	2b00      	cmp	r3, #0
 8011366:	d107      	bne.n	8011378 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8011368:	68fb      	ldr	r3, [r7, #12]
 801136a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801136c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8011370:	68fb      	ldr	r3, [r7, #12]
 8011372:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8011374:	2301      	movs	r3, #1
 8011376:	e0d8      	b.n	801152a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8011378:	68fb      	ldr	r3, [r7, #12]
 801137a:	681a      	ldr	r2, [r3, #0]
 801137c:	68bb      	ldr	r3, [r7, #8]
 801137e:	331b      	adds	r3, #27
 8011380:	011b      	lsls	r3, r3, #4
 8011382:	4413      	add	r3, r2
 8011384:	681b      	ldr	r3, [r3, #0]
 8011386:	f003 0204 	and.w	r2, r3, #4
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	689b      	ldr	r3, [r3, #8]
 8011392:	2b00      	cmp	r3, #0
 8011394:	d10c      	bne.n	80113b0 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8011396:	68fb      	ldr	r3, [r7, #12]
 8011398:	681a      	ldr	r2, [r3, #0]
 801139a:	68bb      	ldr	r3, [r7, #8]
 801139c:	331b      	adds	r3, #27
 801139e:	011b      	lsls	r3, r3, #4
 80113a0:	4413      	add	r3, r2
 80113a2:	681b      	ldr	r3, [r3, #0]
 80113a4:	0d5b      	lsrs	r3, r3, #21
 80113a6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	601a      	str	r2, [r3, #0]
 80113ae:	e00b      	b.n	80113c8 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80113b0:	68fb      	ldr	r3, [r7, #12]
 80113b2:	681a      	ldr	r2, [r3, #0]
 80113b4:	68bb      	ldr	r3, [r7, #8]
 80113b6:	331b      	adds	r3, #27
 80113b8:	011b      	lsls	r3, r3, #4
 80113ba:	4413      	add	r3, r2
 80113bc:	681b      	ldr	r3, [r3, #0]
 80113be:	08db      	lsrs	r3, r3, #3
 80113c0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80113c8:	68fb      	ldr	r3, [r7, #12]
 80113ca:	681a      	ldr	r2, [r3, #0]
 80113cc:	68bb      	ldr	r3, [r7, #8]
 80113ce:	331b      	adds	r3, #27
 80113d0:	011b      	lsls	r3, r3, #4
 80113d2:	4413      	add	r3, r2
 80113d4:	681b      	ldr	r3, [r3, #0]
 80113d6:	f003 0202 	and.w	r2, r3, #2
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80113de:	68fb      	ldr	r3, [r7, #12]
 80113e0:	681a      	ldr	r2, [r3, #0]
 80113e2:	68bb      	ldr	r3, [r7, #8]
 80113e4:	331b      	adds	r3, #27
 80113e6:	011b      	lsls	r3, r3, #4
 80113e8:	4413      	add	r3, r2
 80113ea:	3304      	adds	r3, #4
 80113ec:	681b      	ldr	r3, [r3, #0]
 80113ee:	f003 020f 	and.w	r2, r3, #15
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80113f6:	68fb      	ldr	r3, [r7, #12]
 80113f8:	681a      	ldr	r2, [r3, #0]
 80113fa:	68bb      	ldr	r3, [r7, #8]
 80113fc:	331b      	adds	r3, #27
 80113fe:	011b      	lsls	r3, r3, #4
 8011400:	4413      	add	r3, r2
 8011402:	3304      	adds	r3, #4
 8011404:	681b      	ldr	r3, [r3, #0]
 8011406:	0a1b      	lsrs	r3, r3, #8
 8011408:	b2da      	uxtb	r2, r3
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 801140e:	68fb      	ldr	r3, [r7, #12]
 8011410:	681a      	ldr	r2, [r3, #0]
 8011412:	68bb      	ldr	r3, [r7, #8]
 8011414:	331b      	adds	r3, #27
 8011416:	011b      	lsls	r3, r3, #4
 8011418:	4413      	add	r3, r2
 801141a:	3304      	adds	r3, #4
 801141c:	681b      	ldr	r3, [r3, #0]
 801141e:	0c1b      	lsrs	r3, r3, #16
 8011420:	b29a      	uxth	r2, r3
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8011426:	68fb      	ldr	r3, [r7, #12]
 8011428:	681a      	ldr	r2, [r3, #0]
 801142a:	68bb      	ldr	r3, [r7, #8]
 801142c:	011b      	lsls	r3, r3, #4
 801142e:	4413      	add	r3, r2
 8011430:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8011434:	681b      	ldr	r3, [r3, #0]
 8011436:	b2da      	uxtb	r2, r3
 8011438:	683b      	ldr	r3, [r7, #0]
 801143a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 801143c:	68fb      	ldr	r3, [r7, #12]
 801143e:	681a      	ldr	r2, [r3, #0]
 8011440:	68bb      	ldr	r3, [r7, #8]
 8011442:	011b      	lsls	r3, r3, #4
 8011444:	4413      	add	r3, r2
 8011446:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 801144a:	681b      	ldr	r3, [r3, #0]
 801144c:	0a1a      	lsrs	r2, r3, #8
 801144e:	683b      	ldr	r3, [r7, #0]
 8011450:	3301      	adds	r3, #1
 8011452:	b2d2      	uxtb	r2, r2
 8011454:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8011456:	68fb      	ldr	r3, [r7, #12]
 8011458:	681a      	ldr	r2, [r3, #0]
 801145a:	68bb      	ldr	r3, [r7, #8]
 801145c:	011b      	lsls	r3, r3, #4
 801145e:	4413      	add	r3, r2
 8011460:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8011464:	681b      	ldr	r3, [r3, #0]
 8011466:	0c1a      	lsrs	r2, r3, #16
 8011468:	683b      	ldr	r3, [r7, #0]
 801146a:	3302      	adds	r3, #2
 801146c:	b2d2      	uxtb	r2, r2
 801146e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8011470:	68fb      	ldr	r3, [r7, #12]
 8011472:	681a      	ldr	r2, [r3, #0]
 8011474:	68bb      	ldr	r3, [r7, #8]
 8011476:	011b      	lsls	r3, r3, #4
 8011478:	4413      	add	r3, r2
 801147a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 801147e:	681b      	ldr	r3, [r3, #0]
 8011480:	0e1a      	lsrs	r2, r3, #24
 8011482:	683b      	ldr	r3, [r7, #0]
 8011484:	3303      	adds	r3, #3
 8011486:	b2d2      	uxtb	r2, r2
 8011488:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 801148a:	68fb      	ldr	r3, [r7, #12]
 801148c:	681a      	ldr	r2, [r3, #0]
 801148e:	68bb      	ldr	r3, [r7, #8]
 8011490:	011b      	lsls	r3, r3, #4
 8011492:	4413      	add	r3, r2
 8011494:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8011498:	681a      	ldr	r2, [r3, #0]
 801149a:	683b      	ldr	r3, [r7, #0]
 801149c:	3304      	adds	r3, #4
 801149e:	b2d2      	uxtb	r2, r2
 80114a0:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80114a2:	68fb      	ldr	r3, [r7, #12]
 80114a4:	681a      	ldr	r2, [r3, #0]
 80114a6:	68bb      	ldr	r3, [r7, #8]
 80114a8:	011b      	lsls	r3, r3, #4
 80114aa:	4413      	add	r3, r2
 80114ac:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80114b0:	681b      	ldr	r3, [r3, #0]
 80114b2:	0a1a      	lsrs	r2, r3, #8
 80114b4:	683b      	ldr	r3, [r7, #0]
 80114b6:	3305      	adds	r3, #5
 80114b8:	b2d2      	uxtb	r2, r2
 80114ba:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80114bc:	68fb      	ldr	r3, [r7, #12]
 80114be:	681a      	ldr	r2, [r3, #0]
 80114c0:	68bb      	ldr	r3, [r7, #8]
 80114c2:	011b      	lsls	r3, r3, #4
 80114c4:	4413      	add	r3, r2
 80114c6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80114ca:	681b      	ldr	r3, [r3, #0]
 80114cc:	0c1a      	lsrs	r2, r3, #16
 80114ce:	683b      	ldr	r3, [r7, #0]
 80114d0:	3306      	adds	r3, #6
 80114d2:	b2d2      	uxtb	r2, r2
 80114d4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80114d6:	68fb      	ldr	r3, [r7, #12]
 80114d8:	681a      	ldr	r2, [r3, #0]
 80114da:	68bb      	ldr	r3, [r7, #8]
 80114dc:	011b      	lsls	r3, r3, #4
 80114de:	4413      	add	r3, r2
 80114e0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80114e4:	681b      	ldr	r3, [r3, #0]
 80114e6:	0e1a      	lsrs	r2, r3, #24
 80114e8:	683b      	ldr	r3, [r7, #0]
 80114ea:	3307      	adds	r3, #7
 80114ec:	b2d2      	uxtb	r2, r2
 80114ee:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80114f0:	68bb      	ldr	r3, [r7, #8]
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	d108      	bne.n	8011508 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80114f6:	68fb      	ldr	r3, [r7, #12]
 80114f8:	681b      	ldr	r3, [r3, #0]
 80114fa:	68da      	ldr	r2, [r3, #12]
 80114fc:	68fb      	ldr	r3, [r7, #12]
 80114fe:	681b      	ldr	r3, [r3, #0]
 8011500:	f042 0220 	orr.w	r2, r2, #32
 8011504:	60da      	str	r2, [r3, #12]
 8011506:	e007      	b.n	8011518 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8011508:	68fb      	ldr	r3, [r7, #12]
 801150a:	681b      	ldr	r3, [r3, #0]
 801150c:	691a      	ldr	r2, [r3, #16]
 801150e:	68fb      	ldr	r3, [r7, #12]
 8011510:	681b      	ldr	r3, [r3, #0]
 8011512:	f042 0220 	orr.w	r2, r2, #32
 8011516:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8011518:	2300      	movs	r3, #0
 801151a:	e006      	b.n	801152a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 801151c:	68fb      	ldr	r3, [r7, #12]
 801151e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011520:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8011524:	68fb      	ldr	r3, [r7, #12]
 8011526:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8011528:	2301      	movs	r3, #1
  }
}
 801152a:	4618      	mov	r0, r3
 801152c:	371c      	adds	r7, #28
 801152e:	46bd      	mov	sp, r7
 8011530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011534:	4770      	bx	lr

08011536 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8011536:	b580      	push	{r7, lr}
 8011538:	b08a      	sub	sp, #40	; 0x28
 801153a:	af00      	add	r7, sp, #0
 801153c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 801153e:	2300      	movs	r3, #0
 8011540:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	681b      	ldr	r3, [r3, #0]
 8011546:	695b      	ldr	r3, [r3, #20]
 8011548:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	681b      	ldr	r3, [r3, #0]
 801154e:	685b      	ldr	r3, [r3, #4]
 8011550:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	681b      	ldr	r3, [r3, #0]
 8011556:	689b      	ldr	r3, [r3, #8]
 8011558:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	681b      	ldr	r3, [r3, #0]
 801155e:	68db      	ldr	r3, [r3, #12]
 8011560:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	681b      	ldr	r3, [r3, #0]
 8011566:	691b      	ldr	r3, [r3, #16]
 8011568:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	681b      	ldr	r3, [r3, #0]
 801156e:	699b      	ldr	r3, [r3, #24]
 8011570:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8011572:	6a3b      	ldr	r3, [r7, #32]
 8011574:	f003 0301 	and.w	r3, r3, #1
 8011578:	2b00      	cmp	r3, #0
 801157a:	d07c      	beq.n	8011676 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 801157c:	69bb      	ldr	r3, [r7, #24]
 801157e:	f003 0301 	and.w	r3, r3, #1
 8011582:	2b00      	cmp	r3, #0
 8011584:	d023      	beq.n	80115ce <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	681b      	ldr	r3, [r3, #0]
 801158a:	2201      	movs	r2, #1
 801158c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 801158e:	69bb      	ldr	r3, [r7, #24]
 8011590:	f003 0302 	and.w	r3, r3, #2
 8011594:	2b00      	cmp	r3, #0
 8011596:	d003      	beq.n	80115a0 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8011598:	6878      	ldr	r0, [r7, #4]
 801159a:	f000 f983 	bl	80118a4 <HAL_CAN_TxMailbox0CompleteCallback>
 801159e:	e016      	b.n	80115ce <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80115a0:	69bb      	ldr	r3, [r7, #24]
 80115a2:	f003 0304 	and.w	r3, r3, #4
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	d004      	beq.n	80115b4 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80115aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80115b0:	627b      	str	r3, [r7, #36]	; 0x24
 80115b2:	e00c      	b.n	80115ce <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80115b4:	69bb      	ldr	r3, [r7, #24]
 80115b6:	f003 0308 	and.w	r3, r3, #8
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	d004      	beq.n	80115c8 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80115be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80115c4:	627b      	str	r3, [r7, #36]	; 0x24
 80115c6:	e002      	b.n	80115ce <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80115c8:	6878      	ldr	r0, [r7, #4]
 80115ca:	f000 f989 	bl	80118e0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80115ce:	69bb      	ldr	r3, [r7, #24]
 80115d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	d024      	beq.n	8011622 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	681b      	ldr	r3, [r3, #0]
 80115dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80115e0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80115e2:	69bb      	ldr	r3, [r7, #24]
 80115e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d003      	beq.n	80115f4 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80115ec:	6878      	ldr	r0, [r7, #4]
 80115ee:	f000 f963 	bl	80118b8 <HAL_CAN_TxMailbox1CompleteCallback>
 80115f2:	e016      	b.n	8011622 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80115f4:	69bb      	ldr	r3, [r7, #24]
 80115f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80115fa:	2b00      	cmp	r3, #0
 80115fc:	d004      	beq.n	8011608 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80115fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011600:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8011604:	627b      	str	r3, [r7, #36]	; 0x24
 8011606:	e00c      	b.n	8011622 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8011608:	69bb      	ldr	r3, [r7, #24]
 801160a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801160e:	2b00      	cmp	r3, #0
 8011610:	d004      	beq.n	801161c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8011612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011614:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8011618:	627b      	str	r3, [r7, #36]	; 0x24
 801161a:	e002      	b.n	8011622 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 801161c:	6878      	ldr	r0, [r7, #4]
 801161e:	f000 f969 	bl	80118f4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8011622:	69bb      	ldr	r3, [r7, #24]
 8011624:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011628:	2b00      	cmp	r3, #0
 801162a:	d024      	beq.n	8011676 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	681b      	ldr	r3, [r3, #0]
 8011630:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8011634:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8011636:	69bb      	ldr	r3, [r7, #24]
 8011638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801163c:	2b00      	cmp	r3, #0
 801163e:	d003      	beq.n	8011648 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8011640:	6878      	ldr	r0, [r7, #4]
 8011642:	f000 f943 	bl	80118cc <HAL_CAN_TxMailbox2CompleteCallback>
 8011646:	e016      	b.n	8011676 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8011648:	69bb      	ldr	r3, [r7, #24]
 801164a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801164e:	2b00      	cmp	r3, #0
 8011650:	d004      	beq.n	801165c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8011652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011654:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011658:	627b      	str	r3, [r7, #36]	; 0x24
 801165a:	e00c      	b.n	8011676 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 801165c:	69bb      	ldr	r3, [r7, #24]
 801165e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8011662:	2b00      	cmp	r3, #0
 8011664:	d004      	beq.n	8011670 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8011666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011668:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801166c:	627b      	str	r3, [r7, #36]	; 0x24
 801166e:	e002      	b.n	8011676 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8011670:	6878      	ldr	r0, [r7, #4]
 8011672:	f000 f949 	bl	8011908 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8011676:	6a3b      	ldr	r3, [r7, #32]
 8011678:	f003 0308 	and.w	r3, r3, #8
 801167c:	2b00      	cmp	r3, #0
 801167e:	d00c      	beq.n	801169a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8011680:	697b      	ldr	r3, [r7, #20]
 8011682:	f003 0310 	and.w	r3, r3, #16
 8011686:	2b00      	cmp	r3, #0
 8011688:	d007      	beq.n	801169a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 801168a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801168c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8011690:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	681b      	ldr	r3, [r3, #0]
 8011696:	2210      	movs	r2, #16
 8011698:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 801169a:	6a3b      	ldr	r3, [r7, #32]
 801169c:	f003 0304 	and.w	r3, r3, #4
 80116a0:	2b00      	cmp	r3, #0
 80116a2:	d00b      	beq.n	80116bc <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80116a4:	697b      	ldr	r3, [r7, #20]
 80116a6:	f003 0308 	and.w	r3, r3, #8
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	d006      	beq.n	80116bc <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	681b      	ldr	r3, [r3, #0]
 80116b2:	2208      	movs	r2, #8
 80116b4:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80116b6:	6878      	ldr	r0, [r7, #4]
 80116b8:	f000 f930 	bl	801191c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80116bc:	6a3b      	ldr	r3, [r7, #32]
 80116be:	f003 0302 	and.w	r3, r3, #2
 80116c2:	2b00      	cmp	r3, #0
 80116c4:	d009      	beq.n	80116da <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	681b      	ldr	r3, [r3, #0]
 80116ca:	68db      	ldr	r3, [r3, #12]
 80116cc:	f003 0303 	and.w	r3, r3, #3
 80116d0:	2b00      	cmp	r3, #0
 80116d2:	d002      	beq.n	80116da <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80116d4:	6878      	ldr	r0, [r7, #4]
 80116d6:	f7f0 f84b 	bl	8001770 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80116da:	6a3b      	ldr	r3, [r7, #32]
 80116dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d00c      	beq.n	80116fe <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80116e4:	693b      	ldr	r3, [r7, #16]
 80116e6:	f003 0310 	and.w	r3, r3, #16
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	d007      	beq.n	80116fe <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80116ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116f0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80116f4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	681b      	ldr	r3, [r3, #0]
 80116fa:	2210      	movs	r2, #16
 80116fc:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80116fe:	6a3b      	ldr	r3, [r7, #32]
 8011700:	f003 0320 	and.w	r3, r3, #32
 8011704:	2b00      	cmp	r3, #0
 8011706:	d00b      	beq.n	8011720 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8011708:	693b      	ldr	r3, [r7, #16]
 801170a:	f003 0308 	and.w	r3, r3, #8
 801170e:	2b00      	cmp	r3, #0
 8011710:	d006      	beq.n	8011720 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	681b      	ldr	r3, [r3, #0]
 8011716:	2208      	movs	r2, #8
 8011718:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 801171a:	6878      	ldr	r0, [r7, #4]
 801171c:	f000 f908 	bl	8011930 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8011720:	6a3b      	ldr	r3, [r7, #32]
 8011722:	f003 0310 	and.w	r3, r3, #16
 8011726:	2b00      	cmp	r3, #0
 8011728:	d009      	beq.n	801173e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	681b      	ldr	r3, [r3, #0]
 801172e:	691b      	ldr	r3, [r3, #16]
 8011730:	f003 0303 	and.w	r3, r3, #3
 8011734:	2b00      	cmp	r3, #0
 8011736:	d002      	beq.n	801173e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8011738:	6878      	ldr	r0, [r7, #4]
 801173a:	f7f0 f865 	bl	8001808 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 801173e:	6a3b      	ldr	r3, [r7, #32]
 8011740:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011744:	2b00      	cmp	r3, #0
 8011746:	d00b      	beq.n	8011760 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8011748:	69fb      	ldr	r3, [r7, #28]
 801174a:	f003 0310 	and.w	r3, r3, #16
 801174e:	2b00      	cmp	r3, #0
 8011750:	d006      	beq.n	8011760 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	681b      	ldr	r3, [r3, #0]
 8011756:	2210      	movs	r2, #16
 8011758:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 801175a:	6878      	ldr	r0, [r7, #4]
 801175c:	f000 f8f2 	bl	8011944 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8011760:	6a3b      	ldr	r3, [r7, #32]
 8011762:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011766:	2b00      	cmp	r3, #0
 8011768:	d00b      	beq.n	8011782 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 801176a:	69fb      	ldr	r3, [r7, #28]
 801176c:	f003 0308 	and.w	r3, r3, #8
 8011770:	2b00      	cmp	r3, #0
 8011772:	d006      	beq.n	8011782 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	681b      	ldr	r3, [r3, #0]
 8011778:	2208      	movs	r2, #8
 801177a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 801177c:	6878      	ldr	r0, [r7, #4]
 801177e:	f000 f8eb 	bl	8011958 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8011782:	6a3b      	ldr	r3, [r7, #32]
 8011784:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011788:	2b00      	cmp	r3, #0
 801178a:	d07b      	beq.n	8011884 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 801178c:	69fb      	ldr	r3, [r7, #28]
 801178e:	f003 0304 	and.w	r3, r3, #4
 8011792:	2b00      	cmp	r3, #0
 8011794:	d072      	beq.n	801187c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8011796:	6a3b      	ldr	r3, [r7, #32]
 8011798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801179c:	2b00      	cmp	r3, #0
 801179e:	d008      	beq.n	80117b2 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80117a0:	68fb      	ldr	r3, [r7, #12]
 80117a2:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	d003      	beq.n	80117b2 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80117aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117ac:	f043 0301 	orr.w	r3, r3, #1
 80117b0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80117b2:	6a3b      	ldr	r3, [r7, #32]
 80117b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80117b8:	2b00      	cmp	r3, #0
 80117ba:	d008      	beq.n	80117ce <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80117bc:	68fb      	ldr	r3, [r7, #12]
 80117be:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80117c2:	2b00      	cmp	r3, #0
 80117c4:	d003      	beq.n	80117ce <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80117c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117c8:	f043 0302 	orr.w	r3, r3, #2
 80117cc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80117ce:	6a3b      	ldr	r3, [r7, #32]
 80117d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	d008      	beq.n	80117ea <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80117d8:	68fb      	ldr	r3, [r7, #12]
 80117da:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80117de:	2b00      	cmp	r3, #0
 80117e0:	d003      	beq.n	80117ea <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80117e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117e4:	f043 0304 	orr.w	r3, r3, #4
 80117e8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80117ea:	6a3b      	ldr	r3, [r7, #32]
 80117ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80117f0:	2b00      	cmp	r3, #0
 80117f2:	d043      	beq.n	801187c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80117f4:	68fb      	ldr	r3, [r7, #12]
 80117f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80117fa:	2b00      	cmp	r3, #0
 80117fc:	d03e      	beq.n	801187c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80117fe:	68fb      	ldr	r3, [r7, #12]
 8011800:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8011804:	2b60      	cmp	r3, #96	; 0x60
 8011806:	d02b      	beq.n	8011860 <HAL_CAN_IRQHandler+0x32a>
 8011808:	2b60      	cmp	r3, #96	; 0x60
 801180a:	d82e      	bhi.n	801186a <HAL_CAN_IRQHandler+0x334>
 801180c:	2b50      	cmp	r3, #80	; 0x50
 801180e:	d022      	beq.n	8011856 <HAL_CAN_IRQHandler+0x320>
 8011810:	2b50      	cmp	r3, #80	; 0x50
 8011812:	d82a      	bhi.n	801186a <HAL_CAN_IRQHandler+0x334>
 8011814:	2b40      	cmp	r3, #64	; 0x40
 8011816:	d019      	beq.n	801184c <HAL_CAN_IRQHandler+0x316>
 8011818:	2b40      	cmp	r3, #64	; 0x40
 801181a:	d826      	bhi.n	801186a <HAL_CAN_IRQHandler+0x334>
 801181c:	2b30      	cmp	r3, #48	; 0x30
 801181e:	d010      	beq.n	8011842 <HAL_CAN_IRQHandler+0x30c>
 8011820:	2b30      	cmp	r3, #48	; 0x30
 8011822:	d822      	bhi.n	801186a <HAL_CAN_IRQHandler+0x334>
 8011824:	2b10      	cmp	r3, #16
 8011826:	d002      	beq.n	801182e <HAL_CAN_IRQHandler+0x2f8>
 8011828:	2b20      	cmp	r3, #32
 801182a:	d005      	beq.n	8011838 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 801182c:	e01d      	b.n	801186a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 801182e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011830:	f043 0308 	orr.w	r3, r3, #8
 8011834:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8011836:	e019      	b.n	801186c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8011838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801183a:	f043 0310 	orr.w	r3, r3, #16
 801183e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8011840:	e014      	b.n	801186c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8011842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011844:	f043 0320 	orr.w	r3, r3, #32
 8011848:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 801184a:	e00f      	b.n	801186c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 801184c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801184e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011852:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8011854:	e00a      	b.n	801186c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8011856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011858:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801185c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 801185e:	e005      	b.n	801186c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8011860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011862:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011866:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8011868:	e000      	b.n	801186c <HAL_CAN_IRQHandler+0x336>
            break;
 801186a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	681b      	ldr	r3, [r3, #0]
 8011870:	699a      	ldr	r2, [r3, #24]
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	681b      	ldr	r3, [r3, #0]
 8011876:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 801187a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	681b      	ldr	r3, [r3, #0]
 8011880:	2204      	movs	r2, #4
 8011882:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8011884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011886:	2b00      	cmp	r3, #0
 8011888:	d008      	beq.n	801189c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801188e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011890:	431a      	orrs	r2, r3
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8011896:	6878      	ldr	r0, [r7, #4]
 8011898:	f000 f868 	bl	801196c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 801189c:	bf00      	nop
 801189e:	3728      	adds	r7, #40	; 0x28
 80118a0:	46bd      	mov	sp, r7
 80118a2:	bd80      	pop	{r7, pc}

080118a4 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80118a4:	b480      	push	{r7}
 80118a6:	b083      	sub	sp, #12
 80118a8:	af00      	add	r7, sp, #0
 80118aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80118ac:	bf00      	nop
 80118ae:	370c      	adds	r7, #12
 80118b0:	46bd      	mov	sp, r7
 80118b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118b6:	4770      	bx	lr

080118b8 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80118b8:	b480      	push	{r7}
 80118ba:	b083      	sub	sp, #12
 80118bc:	af00      	add	r7, sp, #0
 80118be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80118c0:	bf00      	nop
 80118c2:	370c      	adds	r7, #12
 80118c4:	46bd      	mov	sp, r7
 80118c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118ca:	4770      	bx	lr

080118cc <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80118cc:	b480      	push	{r7}
 80118ce:	b083      	sub	sp, #12
 80118d0:	af00      	add	r7, sp, #0
 80118d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80118d4:	bf00      	nop
 80118d6:	370c      	adds	r7, #12
 80118d8:	46bd      	mov	sp, r7
 80118da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118de:	4770      	bx	lr

080118e0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80118e0:	b480      	push	{r7}
 80118e2:	b083      	sub	sp, #12
 80118e4:	af00      	add	r7, sp, #0
 80118e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80118e8:	bf00      	nop
 80118ea:	370c      	adds	r7, #12
 80118ec:	46bd      	mov	sp, r7
 80118ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118f2:	4770      	bx	lr

080118f4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80118f4:	b480      	push	{r7}
 80118f6:	b083      	sub	sp, #12
 80118f8:	af00      	add	r7, sp, #0
 80118fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80118fc:	bf00      	nop
 80118fe:	370c      	adds	r7, #12
 8011900:	46bd      	mov	sp, r7
 8011902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011906:	4770      	bx	lr

08011908 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8011908:	b480      	push	{r7}
 801190a:	b083      	sub	sp, #12
 801190c:	af00      	add	r7, sp, #0
 801190e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8011910:	bf00      	nop
 8011912:	370c      	adds	r7, #12
 8011914:	46bd      	mov	sp, r7
 8011916:	f85d 7b04 	ldr.w	r7, [sp], #4
 801191a:	4770      	bx	lr

0801191c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 801191c:	b480      	push	{r7}
 801191e:	b083      	sub	sp, #12
 8011920:	af00      	add	r7, sp, #0
 8011922:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8011924:	bf00      	nop
 8011926:	370c      	adds	r7, #12
 8011928:	46bd      	mov	sp, r7
 801192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801192e:	4770      	bx	lr

08011930 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8011930:	b480      	push	{r7}
 8011932:	b083      	sub	sp, #12
 8011934:	af00      	add	r7, sp, #0
 8011936:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8011938:	bf00      	nop
 801193a:	370c      	adds	r7, #12
 801193c:	46bd      	mov	sp, r7
 801193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011942:	4770      	bx	lr

08011944 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8011944:	b480      	push	{r7}
 8011946:	b083      	sub	sp, #12
 8011948:	af00      	add	r7, sp, #0
 801194a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 801194c:	bf00      	nop
 801194e:	370c      	adds	r7, #12
 8011950:	46bd      	mov	sp, r7
 8011952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011956:	4770      	bx	lr

08011958 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8011958:	b480      	push	{r7}
 801195a:	b083      	sub	sp, #12
 801195c:	af00      	add	r7, sp, #0
 801195e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8011960:	bf00      	nop
 8011962:	370c      	adds	r7, #12
 8011964:	46bd      	mov	sp, r7
 8011966:	f85d 7b04 	ldr.w	r7, [sp], #4
 801196a:	4770      	bx	lr

0801196c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 801196c:	b480      	push	{r7}
 801196e:	b083      	sub	sp, #12
 8011970:	af00      	add	r7, sp, #0
 8011972:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8011974:	bf00      	nop
 8011976:	370c      	adds	r7, #12
 8011978:	46bd      	mov	sp, r7
 801197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801197e:	4770      	bx	lr

08011980 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8011980:	b480      	push	{r7}
 8011982:	b085      	sub	sp, #20
 8011984:	af00      	add	r7, sp, #0
 8011986:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	f003 0307 	and.w	r3, r3, #7
 801198e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8011990:	4b0c      	ldr	r3, [pc, #48]	; (80119c4 <__NVIC_SetPriorityGrouping+0x44>)
 8011992:	68db      	ldr	r3, [r3, #12]
 8011994:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8011996:	68ba      	ldr	r2, [r7, #8]
 8011998:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 801199c:	4013      	ands	r3, r2
 801199e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80119a0:	68fb      	ldr	r3, [r7, #12]
 80119a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80119a4:	68bb      	ldr	r3, [r7, #8]
 80119a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80119a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80119ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80119b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80119b2:	4a04      	ldr	r2, [pc, #16]	; (80119c4 <__NVIC_SetPriorityGrouping+0x44>)
 80119b4:	68bb      	ldr	r3, [r7, #8]
 80119b6:	60d3      	str	r3, [r2, #12]
}
 80119b8:	bf00      	nop
 80119ba:	3714      	adds	r7, #20
 80119bc:	46bd      	mov	sp, r7
 80119be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119c2:	4770      	bx	lr
 80119c4:	e000ed00 	.word	0xe000ed00

080119c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80119c8:	b480      	push	{r7}
 80119ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80119cc:	4b04      	ldr	r3, [pc, #16]	; (80119e0 <__NVIC_GetPriorityGrouping+0x18>)
 80119ce:	68db      	ldr	r3, [r3, #12]
 80119d0:	0a1b      	lsrs	r3, r3, #8
 80119d2:	f003 0307 	and.w	r3, r3, #7
}
 80119d6:	4618      	mov	r0, r3
 80119d8:	46bd      	mov	sp, r7
 80119da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119de:	4770      	bx	lr
 80119e0:	e000ed00 	.word	0xe000ed00

080119e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80119e4:	b480      	push	{r7}
 80119e6:	b083      	sub	sp, #12
 80119e8:	af00      	add	r7, sp, #0
 80119ea:	4603      	mov	r3, r0
 80119ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80119ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80119f2:	2b00      	cmp	r3, #0
 80119f4:	db0b      	blt.n	8011a0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80119f6:	79fb      	ldrb	r3, [r7, #7]
 80119f8:	f003 021f 	and.w	r2, r3, #31
 80119fc:	4907      	ldr	r1, [pc, #28]	; (8011a1c <__NVIC_EnableIRQ+0x38>)
 80119fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011a02:	095b      	lsrs	r3, r3, #5
 8011a04:	2001      	movs	r0, #1
 8011a06:	fa00 f202 	lsl.w	r2, r0, r2
 8011a0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8011a0e:	bf00      	nop
 8011a10:	370c      	adds	r7, #12
 8011a12:	46bd      	mov	sp, r7
 8011a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a18:	4770      	bx	lr
 8011a1a:	bf00      	nop
 8011a1c:	e000e100 	.word	0xe000e100

08011a20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8011a20:	b480      	push	{r7}
 8011a22:	b083      	sub	sp, #12
 8011a24:	af00      	add	r7, sp, #0
 8011a26:	4603      	mov	r3, r0
 8011a28:	6039      	str	r1, [r7, #0]
 8011a2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8011a2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011a30:	2b00      	cmp	r3, #0
 8011a32:	db0a      	blt.n	8011a4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011a34:	683b      	ldr	r3, [r7, #0]
 8011a36:	b2da      	uxtb	r2, r3
 8011a38:	490c      	ldr	r1, [pc, #48]	; (8011a6c <__NVIC_SetPriority+0x4c>)
 8011a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011a3e:	0112      	lsls	r2, r2, #4
 8011a40:	b2d2      	uxtb	r2, r2
 8011a42:	440b      	add	r3, r1
 8011a44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8011a48:	e00a      	b.n	8011a60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011a4a:	683b      	ldr	r3, [r7, #0]
 8011a4c:	b2da      	uxtb	r2, r3
 8011a4e:	4908      	ldr	r1, [pc, #32]	; (8011a70 <__NVIC_SetPriority+0x50>)
 8011a50:	79fb      	ldrb	r3, [r7, #7]
 8011a52:	f003 030f 	and.w	r3, r3, #15
 8011a56:	3b04      	subs	r3, #4
 8011a58:	0112      	lsls	r2, r2, #4
 8011a5a:	b2d2      	uxtb	r2, r2
 8011a5c:	440b      	add	r3, r1
 8011a5e:	761a      	strb	r2, [r3, #24]
}
 8011a60:	bf00      	nop
 8011a62:	370c      	adds	r7, #12
 8011a64:	46bd      	mov	sp, r7
 8011a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a6a:	4770      	bx	lr
 8011a6c:	e000e100 	.word	0xe000e100
 8011a70:	e000ed00 	.word	0xe000ed00

08011a74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8011a74:	b480      	push	{r7}
 8011a76:	b089      	sub	sp, #36	; 0x24
 8011a78:	af00      	add	r7, sp, #0
 8011a7a:	60f8      	str	r0, [r7, #12]
 8011a7c:	60b9      	str	r1, [r7, #8]
 8011a7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8011a80:	68fb      	ldr	r3, [r7, #12]
 8011a82:	f003 0307 	and.w	r3, r3, #7
 8011a86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8011a88:	69fb      	ldr	r3, [r7, #28]
 8011a8a:	f1c3 0307 	rsb	r3, r3, #7
 8011a8e:	2b04      	cmp	r3, #4
 8011a90:	bf28      	it	cs
 8011a92:	2304      	movcs	r3, #4
 8011a94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8011a96:	69fb      	ldr	r3, [r7, #28]
 8011a98:	3304      	adds	r3, #4
 8011a9a:	2b06      	cmp	r3, #6
 8011a9c:	d902      	bls.n	8011aa4 <NVIC_EncodePriority+0x30>
 8011a9e:	69fb      	ldr	r3, [r7, #28]
 8011aa0:	3b03      	subs	r3, #3
 8011aa2:	e000      	b.n	8011aa6 <NVIC_EncodePriority+0x32>
 8011aa4:	2300      	movs	r3, #0
 8011aa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8011aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8011aac:	69bb      	ldr	r3, [r7, #24]
 8011aae:	fa02 f303 	lsl.w	r3, r2, r3
 8011ab2:	43da      	mvns	r2, r3
 8011ab4:	68bb      	ldr	r3, [r7, #8]
 8011ab6:	401a      	ands	r2, r3
 8011ab8:	697b      	ldr	r3, [r7, #20]
 8011aba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8011abc:	f04f 31ff 	mov.w	r1, #4294967295
 8011ac0:	697b      	ldr	r3, [r7, #20]
 8011ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8011ac6:	43d9      	mvns	r1, r3
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8011acc:	4313      	orrs	r3, r2
         );
}
 8011ace:	4618      	mov	r0, r3
 8011ad0:	3724      	adds	r7, #36	; 0x24
 8011ad2:	46bd      	mov	sp, r7
 8011ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ad8:	4770      	bx	lr

08011ada <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8011ada:	b580      	push	{r7, lr}
 8011adc:	b082      	sub	sp, #8
 8011ade:	af00      	add	r7, sp, #0
 8011ae0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8011ae2:	6878      	ldr	r0, [r7, #4]
 8011ae4:	f7ff ff4c 	bl	8011980 <__NVIC_SetPriorityGrouping>
}
 8011ae8:	bf00      	nop
 8011aea:	3708      	adds	r7, #8
 8011aec:	46bd      	mov	sp, r7
 8011aee:	bd80      	pop	{r7, pc}

08011af0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8011af0:	b580      	push	{r7, lr}
 8011af2:	b086      	sub	sp, #24
 8011af4:	af00      	add	r7, sp, #0
 8011af6:	4603      	mov	r3, r0
 8011af8:	60b9      	str	r1, [r7, #8]
 8011afa:	607a      	str	r2, [r7, #4]
 8011afc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8011afe:	2300      	movs	r3, #0
 8011b00:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8011b02:	f7ff ff61 	bl	80119c8 <__NVIC_GetPriorityGrouping>
 8011b06:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8011b08:	687a      	ldr	r2, [r7, #4]
 8011b0a:	68b9      	ldr	r1, [r7, #8]
 8011b0c:	6978      	ldr	r0, [r7, #20]
 8011b0e:	f7ff ffb1 	bl	8011a74 <NVIC_EncodePriority>
 8011b12:	4602      	mov	r2, r0
 8011b14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011b18:	4611      	mov	r1, r2
 8011b1a:	4618      	mov	r0, r3
 8011b1c:	f7ff ff80 	bl	8011a20 <__NVIC_SetPriority>
}
 8011b20:	bf00      	nop
 8011b22:	3718      	adds	r7, #24
 8011b24:	46bd      	mov	sp, r7
 8011b26:	bd80      	pop	{r7, pc}

08011b28 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8011b28:	b580      	push	{r7, lr}
 8011b2a:	b082      	sub	sp, #8
 8011b2c:	af00      	add	r7, sp, #0
 8011b2e:	4603      	mov	r3, r0
 8011b30:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8011b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011b36:	4618      	mov	r0, r3
 8011b38:	f7ff ff54 	bl	80119e4 <__NVIC_EnableIRQ>
}
 8011b3c:	bf00      	nop
 8011b3e:	3708      	adds	r7, #8
 8011b40:	46bd      	mov	sp, r7
 8011b42:	bd80      	pop	{r7, pc}

08011b44 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8011b44:	b580      	push	{r7, lr}
 8011b46:	b086      	sub	sp, #24
 8011b48:	af00      	add	r7, sp, #0
 8011b4a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8011b4c:	2300      	movs	r3, #0
 8011b4e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8011b50:	f7fe fd58 	bl	8010604 <HAL_GetTick>
 8011b54:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	2b00      	cmp	r3, #0
 8011b5a:	d101      	bne.n	8011b60 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8011b5c:	2301      	movs	r3, #1
 8011b5e:	e099      	b.n	8011c94 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	2202      	movs	r2, #2
 8011b64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	2200      	movs	r2, #0
 8011b6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	681b      	ldr	r3, [r3, #0]
 8011b74:	681a      	ldr	r2, [r3, #0]
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	681b      	ldr	r3, [r3, #0]
 8011b7a:	f022 0201 	bic.w	r2, r2, #1
 8011b7e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8011b80:	e00f      	b.n	8011ba2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8011b82:	f7fe fd3f 	bl	8010604 <HAL_GetTick>
 8011b86:	4602      	mov	r2, r0
 8011b88:	693b      	ldr	r3, [r7, #16]
 8011b8a:	1ad3      	subs	r3, r2, r3
 8011b8c:	2b05      	cmp	r3, #5
 8011b8e:	d908      	bls.n	8011ba2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	2220      	movs	r2, #32
 8011b94:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	2203      	movs	r2, #3
 8011b9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8011b9e:	2303      	movs	r3, #3
 8011ba0:	e078      	b.n	8011c94 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	681b      	ldr	r3, [r3, #0]
 8011ba6:	681b      	ldr	r3, [r3, #0]
 8011ba8:	f003 0301 	and.w	r3, r3, #1
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	d1e8      	bne.n	8011b82 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	681b      	ldr	r3, [r3, #0]
 8011bb4:	681b      	ldr	r3, [r3, #0]
 8011bb6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8011bb8:	697a      	ldr	r2, [r7, #20]
 8011bba:	4b38      	ldr	r3, [pc, #224]	; (8011c9c <HAL_DMA_Init+0x158>)
 8011bbc:	4013      	ands	r3, r2
 8011bbe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	685a      	ldr	r2, [r3, #4]
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	689b      	ldr	r3, [r3, #8]
 8011bc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8011bce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	691b      	ldr	r3, [r3, #16]
 8011bd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8011bda:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	699b      	ldr	r3, [r3, #24]
 8011be0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8011be6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	6a1b      	ldr	r3, [r3, #32]
 8011bec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8011bee:	697a      	ldr	r2, [r7, #20]
 8011bf0:	4313      	orrs	r3, r2
 8011bf2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011bf8:	2b04      	cmp	r3, #4
 8011bfa:	d107      	bne.n	8011c0c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011c04:	4313      	orrs	r3, r2
 8011c06:	697a      	ldr	r2, [r7, #20]
 8011c08:	4313      	orrs	r3, r2
 8011c0a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	681b      	ldr	r3, [r3, #0]
 8011c10:	697a      	ldr	r2, [r7, #20]
 8011c12:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	681b      	ldr	r3, [r3, #0]
 8011c18:	695b      	ldr	r3, [r3, #20]
 8011c1a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8011c1c:	697b      	ldr	r3, [r7, #20]
 8011c1e:	f023 0307 	bic.w	r3, r3, #7
 8011c22:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c28:	697a      	ldr	r2, [r7, #20]
 8011c2a:	4313      	orrs	r3, r2
 8011c2c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c32:	2b04      	cmp	r3, #4
 8011c34:	d117      	bne.n	8011c66 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011c3a:	697a      	ldr	r2, [r7, #20]
 8011c3c:	4313      	orrs	r3, r2
 8011c3e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c44:	2b00      	cmp	r3, #0
 8011c46:	d00e      	beq.n	8011c66 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8011c48:	6878      	ldr	r0, [r7, #4]
 8011c4a:	f000 fa6f 	bl	801212c <DMA_CheckFifoParam>
 8011c4e:	4603      	mov	r3, r0
 8011c50:	2b00      	cmp	r3, #0
 8011c52:	d008      	beq.n	8011c66 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	2240      	movs	r2, #64	; 0x40
 8011c58:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	2201      	movs	r2, #1
 8011c5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8011c62:	2301      	movs	r3, #1
 8011c64:	e016      	b.n	8011c94 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	681b      	ldr	r3, [r3, #0]
 8011c6a:	697a      	ldr	r2, [r7, #20]
 8011c6c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8011c6e:	6878      	ldr	r0, [r7, #4]
 8011c70:	f000 fa26 	bl	80120c0 <DMA_CalcBaseAndBitshift>
 8011c74:	4603      	mov	r3, r0
 8011c76:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011c7c:	223f      	movs	r2, #63	; 0x3f
 8011c7e:	409a      	lsls	r2, r3
 8011c80:	68fb      	ldr	r3, [r7, #12]
 8011c82:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	2200      	movs	r2, #0
 8011c88:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	2201      	movs	r2, #1
 8011c8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8011c92:	2300      	movs	r3, #0
}
 8011c94:	4618      	mov	r0, r3
 8011c96:	3718      	adds	r7, #24
 8011c98:	46bd      	mov	sp, r7
 8011c9a:	bd80      	pop	{r7, pc}
 8011c9c:	f010803f 	.word	0xf010803f

08011ca0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8011ca0:	b580      	push	{r7, lr}
 8011ca2:	b086      	sub	sp, #24
 8011ca4:	af00      	add	r7, sp, #0
 8011ca6:	60f8      	str	r0, [r7, #12]
 8011ca8:	60b9      	str	r1, [r7, #8]
 8011caa:	607a      	str	r2, [r7, #4]
 8011cac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8011cae:	2300      	movs	r3, #0
 8011cb0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8011cb2:	68fb      	ldr	r3, [r7, #12]
 8011cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011cb6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8011cb8:	68fb      	ldr	r3, [r7, #12]
 8011cba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011cbe:	2b01      	cmp	r3, #1
 8011cc0:	d101      	bne.n	8011cc6 <HAL_DMA_Start_IT+0x26>
 8011cc2:	2302      	movs	r3, #2
 8011cc4:	e040      	b.n	8011d48 <HAL_DMA_Start_IT+0xa8>
 8011cc6:	68fb      	ldr	r3, [r7, #12]
 8011cc8:	2201      	movs	r2, #1
 8011cca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8011cce:	68fb      	ldr	r3, [r7, #12]
 8011cd0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8011cd4:	b2db      	uxtb	r3, r3
 8011cd6:	2b01      	cmp	r3, #1
 8011cd8:	d12f      	bne.n	8011d3a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8011cda:	68fb      	ldr	r3, [r7, #12]
 8011cdc:	2202      	movs	r2, #2
 8011cde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8011ce2:	68fb      	ldr	r3, [r7, #12]
 8011ce4:	2200      	movs	r2, #0
 8011ce6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8011ce8:	683b      	ldr	r3, [r7, #0]
 8011cea:	687a      	ldr	r2, [r7, #4]
 8011cec:	68b9      	ldr	r1, [r7, #8]
 8011cee:	68f8      	ldr	r0, [r7, #12]
 8011cf0:	f000 f9b8 	bl	8012064 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8011cf4:	68fb      	ldr	r3, [r7, #12]
 8011cf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011cf8:	223f      	movs	r2, #63	; 0x3f
 8011cfa:	409a      	lsls	r2, r3
 8011cfc:	693b      	ldr	r3, [r7, #16]
 8011cfe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8011d00:	68fb      	ldr	r3, [r7, #12]
 8011d02:	681b      	ldr	r3, [r3, #0]
 8011d04:	681a      	ldr	r2, [r3, #0]
 8011d06:	68fb      	ldr	r3, [r7, #12]
 8011d08:	681b      	ldr	r3, [r3, #0]
 8011d0a:	f042 0216 	orr.w	r2, r2, #22
 8011d0e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8011d10:	68fb      	ldr	r3, [r7, #12]
 8011d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	d007      	beq.n	8011d28 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8011d18:	68fb      	ldr	r3, [r7, #12]
 8011d1a:	681b      	ldr	r3, [r3, #0]
 8011d1c:	681a      	ldr	r2, [r3, #0]
 8011d1e:	68fb      	ldr	r3, [r7, #12]
 8011d20:	681b      	ldr	r3, [r3, #0]
 8011d22:	f042 0208 	orr.w	r2, r2, #8
 8011d26:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8011d28:	68fb      	ldr	r3, [r7, #12]
 8011d2a:	681b      	ldr	r3, [r3, #0]
 8011d2c:	681a      	ldr	r2, [r3, #0]
 8011d2e:	68fb      	ldr	r3, [r7, #12]
 8011d30:	681b      	ldr	r3, [r3, #0]
 8011d32:	f042 0201 	orr.w	r2, r2, #1
 8011d36:	601a      	str	r2, [r3, #0]
 8011d38:	e005      	b.n	8011d46 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8011d3a:	68fb      	ldr	r3, [r7, #12]
 8011d3c:	2200      	movs	r2, #0
 8011d3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8011d42:	2302      	movs	r3, #2
 8011d44:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8011d46:	7dfb      	ldrb	r3, [r7, #23]
}
 8011d48:	4618      	mov	r0, r3
 8011d4a:	3718      	adds	r7, #24
 8011d4c:	46bd      	mov	sp, r7
 8011d4e:	bd80      	pop	{r7, pc}

08011d50 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8011d50:	b580      	push	{r7, lr}
 8011d52:	b086      	sub	sp, #24
 8011d54:	af00      	add	r7, sp, #0
 8011d56:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8011d58:	2300      	movs	r3, #0
 8011d5a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8011d5c:	4b92      	ldr	r3, [pc, #584]	; (8011fa8 <HAL_DMA_IRQHandler+0x258>)
 8011d5e:	681b      	ldr	r3, [r3, #0]
 8011d60:	4a92      	ldr	r2, [pc, #584]	; (8011fac <HAL_DMA_IRQHandler+0x25c>)
 8011d62:	fba2 2303 	umull	r2, r3, r2, r3
 8011d66:	0a9b      	lsrs	r3, r3, #10
 8011d68:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011d6e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8011d70:	693b      	ldr	r3, [r7, #16]
 8011d72:	681b      	ldr	r3, [r3, #0]
 8011d74:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011d7a:	2208      	movs	r2, #8
 8011d7c:	409a      	lsls	r2, r3
 8011d7e:	68fb      	ldr	r3, [r7, #12]
 8011d80:	4013      	ands	r3, r2
 8011d82:	2b00      	cmp	r3, #0
 8011d84:	d01a      	beq.n	8011dbc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	681b      	ldr	r3, [r3, #0]
 8011d8a:	681b      	ldr	r3, [r3, #0]
 8011d8c:	f003 0304 	and.w	r3, r3, #4
 8011d90:	2b00      	cmp	r3, #0
 8011d92:	d013      	beq.n	8011dbc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	681b      	ldr	r3, [r3, #0]
 8011d98:	681a      	ldr	r2, [r3, #0]
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	681b      	ldr	r3, [r3, #0]
 8011d9e:	f022 0204 	bic.w	r2, r2, #4
 8011da2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011da8:	2208      	movs	r2, #8
 8011daa:	409a      	lsls	r2, r3
 8011dac:	693b      	ldr	r3, [r7, #16]
 8011dae:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8011db0:	687b      	ldr	r3, [r7, #4]
 8011db2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011db4:	f043 0201 	orr.w	r2, r3, #1
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011dc0:	2201      	movs	r2, #1
 8011dc2:	409a      	lsls	r2, r3
 8011dc4:	68fb      	ldr	r3, [r7, #12]
 8011dc6:	4013      	ands	r3, r2
 8011dc8:	2b00      	cmp	r3, #0
 8011dca:	d012      	beq.n	8011df2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	681b      	ldr	r3, [r3, #0]
 8011dd0:	695b      	ldr	r3, [r3, #20]
 8011dd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011dd6:	2b00      	cmp	r3, #0
 8011dd8:	d00b      	beq.n	8011df2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011dde:	2201      	movs	r2, #1
 8011de0:	409a      	lsls	r2, r3
 8011de2:	693b      	ldr	r3, [r7, #16]
 8011de4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011dea:	f043 0202 	orr.w	r2, r3, #2
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011df6:	2204      	movs	r2, #4
 8011df8:	409a      	lsls	r2, r3
 8011dfa:	68fb      	ldr	r3, [r7, #12]
 8011dfc:	4013      	ands	r3, r2
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	d012      	beq.n	8011e28 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	681b      	ldr	r3, [r3, #0]
 8011e06:	681b      	ldr	r3, [r3, #0]
 8011e08:	f003 0302 	and.w	r3, r3, #2
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	d00b      	beq.n	8011e28 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011e14:	2204      	movs	r2, #4
 8011e16:	409a      	lsls	r2, r3
 8011e18:	693b      	ldr	r3, [r7, #16]
 8011e1a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011e20:	f043 0204 	orr.w	r2, r3, #4
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011e2c:	2210      	movs	r2, #16
 8011e2e:	409a      	lsls	r2, r3
 8011e30:	68fb      	ldr	r3, [r7, #12]
 8011e32:	4013      	ands	r3, r2
 8011e34:	2b00      	cmp	r3, #0
 8011e36:	d043      	beq.n	8011ec0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	681b      	ldr	r3, [r3, #0]
 8011e3c:	681b      	ldr	r3, [r3, #0]
 8011e3e:	f003 0308 	and.w	r3, r3, #8
 8011e42:	2b00      	cmp	r3, #0
 8011e44:	d03c      	beq.n	8011ec0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011e4a:	2210      	movs	r2, #16
 8011e4c:	409a      	lsls	r2, r3
 8011e4e:	693b      	ldr	r3, [r7, #16]
 8011e50:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	681b      	ldr	r3, [r3, #0]
 8011e56:	681b      	ldr	r3, [r3, #0]
 8011e58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	d018      	beq.n	8011e92 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	681b      	ldr	r3, [r3, #0]
 8011e64:	681b      	ldr	r3, [r3, #0]
 8011e66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8011e6a:	2b00      	cmp	r3, #0
 8011e6c:	d108      	bne.n	8011e80 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011e72:	2b00      	cmp	r3, #0
 8011e74:	d024      	beq.n	8011ec0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011e7a:	6878      	ldr	r0, [r7, #4]
 8011e7c:	4798      	blx	r3
 8011e7e:	e01f      	b.n	8011ec0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011e84:	2b00      	cmp	r3, #0
 8011e86:	d01b      	beq.n	8011ec0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011e8c:	6878      	ldr	r0, [r7, #4]
 8011e8e:	4798      	blx	r3
 8011e90:	e016      	b.n	8011ec0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	681b      	ldr	r3, [r3, #0]
 8011e96:	681b      	ldr	r3, [r3, #0]
 8011e98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	d107      	bne.n	8011eb0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	681b      	ldr	r3, [r3, #0]
 8011ea4:	681a      	ldr	r2, [r3, #0]
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	681b      	ldr	r3, [r3, #0]
 8011eaa:	f022 0208 	bic.w	r2, r2, #8
 8011eae:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011eb4:	2b00      	cmp	r3, #0
 8011eb6:	d003      	beq.n	8011ec0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011ebc:	6878      	ldr	r0, [r7, #4]
 8011ebe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8011ec0:	687b      	ldr	r3, [r7, #4]
 8011ec2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011ec4:	2220      	movs	r2, #32
 8011ec6:	409a      	lsls	r2, r3
 8011ec8:	68fb      	ldr	r3, [r7, #12]
 8011eca:	4013      	ands	r3, r2
 8011ecc:	2b00      	cmp	r3, #0
 8011ece:	f000 808e 	beq.w	8011fee <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	681b      	ldr	r3, [r3, #0]
 8011ed6:	681b      	ldr	r3, [r3, #0]
 8011ed8:	f003 0310 	and.w	r3, r3, #16
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	f000 8086 	beq.w	8011fee <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011ee6:	2220      	movs	r2, #32
 8011ee8:	409a      	lsls	r2, r3
 8011eea:	693b      	ldr	r3, [r7, #16]
 8011eec:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8011ef4:	b2db      	uxtb	r3, r3
 8011ef6:	2b05      	cmp	r3, #5
 8011ef8:	d136      	bne.n	8011f68 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	681b      	ldr	r3, [r3, #0]
 8011efe:	681a      	ldr	r2, [r3, #0]
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	681b      	ldr	r3, [r3, #0]
 8011f04:	f022 0216 	bic.w	r2, r2, #22
 8011f08:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	681b      	ldr	r3, [r3, #0]
 8011f0e:	695a      	ldr	r2, [r3, #20]
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	681b      	ldr	r3, [r3, #0]
 8011f14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8011f18:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	d103      	bne.n	8011f2a <HAL_DMA_IRQHandler+0x1da>
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011f26:	2b00      	cmp	r3, #0
 8011f28:	d007      	beq.n	8011f3a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	681b      	ldr	r3, [r3, #0]
 8011f2e:	681a      	ldr	r2, [r3, #0]
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	681b      	ldr	r3, [r3, #0]
 8011f34:	f022 0208 	bic.w	r2, r2, #8
 8011f38:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8011f3a:	687b      	ldr	r3, [r7, #4]
 8011f3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011f3e:	223f      	movs	r2, #63	; 0x3f
 8011f40:	409a      	lsls	r2, r3
 8011f42:	693b      	ldr	r3, [r7, #16]
 8011f44:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	2201      	movs	r2, #1
 8011f4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	2200      	movs	r2, #0
 8011f52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011f5a:	2b00      	cmp	r3, #0
 8011f5c:	d07d      	beq.n	801205a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011f62:	6878      	ldr	r0, [r7, #4]
 8011f64:	4798      	blx	r3
        }
        return;
 8011f66:	e078      	b.n	801205a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	681b      	ldr	r3, [r3, #0]
 8011f6c:	681b      	ldr	r3, [r3, #0]
 8011f6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8011f72:	2b00      	cmp	r3, #0
 8011f74:	d01c      	beq.n	8011fb0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	681b      	ldr	r3, [r3, #0]
 8011f7a:	681b      	ldr	r3, [r3, #0]
 8011f7c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8011f80:	2b00      	cmp	r3, #0
 8011f82:	d108      	bne.n	8011f96 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	d030      	beq.n	8011fee <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011f90:	6878      	ldr	r0, [r7, #4]
 8011f92:	4798      	blx	r3
 8011f94:	e02b      	b.n	8011fee <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011f9a:	2b00      	cmp	r3, #0
 8011f9c:	d027      	beq.n	8011fee <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011fa2:	6878      	ldr	r0, [r7, #4]
 8011fa4:	4798      	blx	r3
 8011fa6:	e022      	b.n	8011fee <HAL_DMA_IRQHandler+0x29e>
 8011fa8:	20000004 	.word	0x20000004
 8011fac:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	681b      	ldr	r3, [r3, #0]
 8011fb4:	681b      	ldr	r3, [r3, #0]
 8011fb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011fba:	2b00      	cmp	r3, #0
 8011fbc:	d10f      	bne.n	8011fde <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	681b      	ldr	r3, [r3, #0]
 8011fc2:	681a      	ldr	r2, [r3, #0]
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	681b      	ldr	r3, [r3, #0]
 8011fc8:	f022 0210 	bic.w	r2, r2, #16
 8011fcc:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	2201      	movs	r2, #1
 8011fd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	2200      	movs	r2, #0
 8011fda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011fe2:	2b00      	cmp	r3, #0
 8011fe4:	d003      	beq.n	8011fee <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011fea:	6878      	ldr	r0, [r7, #4]
 8011fec:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011ff2:	2b00      	cmp	r3, #0
 8011ff4:	d032      	beq.n	801205c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011ffa:	f003 0301 	and.w	r3, r3, #1
 8011ffe:	2b00      	cmp	r3, #0
 8012000:	d022      	beq.n	8012048 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8012002:	687b      	ldr	r3, [r7, #4]
 8012004:	2205      	movs	r2, #5
 8012006:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	681b      	ldr	r3, [r3, #0]
 801200e:	681a      	ldr	r2, [r3, #0]
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	681b      	ldr	r3, [r3, #0]
 8012014:	f022 0201 	bic.w	r2, r2, #1
 8012018:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 801201a:	68bb      	ldr	r3, [r7, #8]
 801201c:	3301      	adds	r3, #1
 801201e:	60bb      	str	r3, [r7, #8]
 8012020:	697a      	ldr	r2, [r7, #20]
 8012022:	429a      	cmp	r2, r3
 8012024:	d307      	bcc.n	8012036 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	681b      	ldr	r3, [r3, #0]
 801202a:	681b      	ldr	r3, [r3, #0]
 801202c:	f003 0301 	and.w	r3, r3, #1
 8012030:	2b00      	cmp	r3, #0
 8012032:	d1f2      	bne.n	801201a <HAL_DMA_IRQHandler+0x2ca>
 8012034:	e000      	b.n	8012038 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8012036:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	2201      	movs	r2, #1
 801203c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	2200      	movs	r2, #0
 8012044:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8012048:	687b      	ldr	r3, [r7, #4]
 801204a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801204c:	2b00      	cmp	r3, #0
 801204e:	d005      	beq.n	801205c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012054:	6878      	ldr	r0, [r7, #4]
 8012056:	4798      	blx	r3
 8012058:	e000      	b.n	801205c <HAL_DMA_IRQHandler+0x30c>
        return;
 801205a:	bf00      	nop
    }
  }
}
 801205c:	3718      	adds	r7, #24
 801205e:	46bd      	mov	sp, r7
 8012060:	bd80      	pop	{r7, pc}
 8012062:	bf00      	nop

08012064 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8012064:	b480      	push	{r7}
 8012066:	b085      	sub	sp, #20
 8012068:	af00      	add	r7, sp, #0
 801206a:	60f8      	str	r0, [r7, #12]
 801206c:	60b9      	str	r1, [r7, #8]
 801206e:	607a      	str	r2, [r7, #4]
 8012070:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8012072:	68fb      	ldr	r3, [r7, #12]
 8012074:	681b      	ldr	r3, [r3, #0]
 8012076:	681a      	ldr	r2, [r3, #0]
 8012078:	68fb      	ldr	r3, [r7, #12]
 801207a:	681b      	ldr	r3, [r3, #0]
 801207c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8012080:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8012082:	68fb      	ldr	r3, [r7, #12]
 8012084:	681b      	ldr	r3, [r3, #0]
 8012086:	683a      	ldr	r2, [r7, #0]
 8012088:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 801208a:	68fb      	ldr	r3, [r7, #12]
 801208c:	689b      	ldr	r3, [r3, #8]
 801208e:	2b40      	cmp	r3, #64	; 0x40
 8012090:	d108      	bne.n	80120a4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8012092:	68fb      	ldr	r3, [r7, #12]
 8012094:	681b      	ldr	r3, [r3, #0]
 8012096:	687a      	ldr	r2, [r7, #4]
 8012098:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 801209a:	68fb      	ldr	r3, [r7, #12]
 801209c:	681b      	ldr	r3, [r3, #0]
 801209e:	68ba      	ldr	r2, [r7, #8]
 80120a0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80120a2:	e007      	b.n	80120b4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80120a4:	68fb      	ldr	r3, [r7, #12]
 80120a6:	681b      	ldr	r3, [r3, #0]
 80120a8:	68ba      	ldr	r2, [r7, #8]
 80120aa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80120ac:	68fb      	ldr	r3, [r7, #12]
 80120ae:	681b      	ldr	r3, [r3, #0]
 80120b0:	687a      	ldr	r2, [r7, #4]
 80120b2:	60da      	str	r2, [r3, #12]
}
 80120b4:	bf00      	nop
 80120b6:	3714      	adds	r7, #20
 80120b8:	46bd      	mov	sp, r7
 80120ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120be:	4770      	bx	lr

080120c0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80120c0:	b480      	push	{r7}
 80120c2:	b085      	sub	sp, #20
 80120c4:	af00      	add	r7, sp, #0
 80120c6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	681b      	ldr	r3, [r3, #0]
 80120cc:	b2db      	uxtb	r3, r3
 80120ce:	3b10      	subs	r3, #16
 80120d0:	4a14      	ldr	r2, [pc, #80]	; (8012124 <DMA_CalcBaseAndBitshift+0x64>)
 80120d2:	fba2 2303 	umull	r2, r3, r2, r3
 80120d6:	091b      	lsrs	r3, r3, #4
 80120d8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80120da:	4a13      	ldr	r2, [pc, #76]	; (8012128 <DMA_CalcBaseAndBitshift+0x68>)
 80120dc:	68fb      	ldr	r3, [r7, #12]
 80120de:	4413      	add	r3, r2
 80120e0:	781b      	ldrb	r3, [r3, #0]
 80120e2:	461a      	mov	r2, r3
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80120e8:	68fb      	ldr	r3, [r7, #12]
 80120ea:	2b03      	cmp	r3, #3
 80120ec:	d909      	bls.n	8012102 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	681b      	ldr	r3, [r3, #0]
 80120f2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80120f6:	f023 0303 	bic.w	r3, r3, #3
 80120fa:	1d1a      	adds	r2, r3, #4
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	659a      	str	r2, [r3, #88]	; 0x58
 8012100:	e007      	b.n	8012112 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	681b      	ldr	r3, [r3, #0]
 8012106:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 801210a:	f023 0303 	bic.w	r3, r3, #3
 801210e:	687a      	ldr	r2, [r7, #4]
 8012110:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8012116:	4618      	mov	r0, r3
 8012118:	3714      	adds	r7, #20
 801211a:	46bd      	mov	sp, r7
 801211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012120:	4770      	bx	lr
 8012122:	bf00      	nop
 8012124:	aaaaaaab 	.word	0xaaaaaaab
 8012128:	0801b130 	.word	0x0801b130

0801212c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 801212c:	b480      	push	{r7}
 801212e:	b085      	sub	sp, #20
 8012130:	af00      	add	r7, sp, #0
 8012132:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8012134:	2300      	movs	r3, #0
 8012136:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801213c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	699b      	ldr	r3, [r3, #24]
 8012142:	2b00      	cmp	r3, #0
 8012144:	d11f      	bne.n	8012186 <DMA_CheckFifoParam+0x5a>
 8012146:	68bb      	ldr	r3, [r7, #8]
 8012148:	2b03      	cmp	r3, #3
 801214a:	d856      	bhi.n	80121fa <DMA_CheckFifoParam+0xce>
 801214c:	a201      	add	r2, pc, #4	; (adr r2, 8012154 <DMA_CheckFifoParam+0x28>)
 801214e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012152:	bf00      	nop
 8012154:	08012165 	.word	0x08012165
 8012158:	08012177 	.word	0x08012177
 801215c:	08012165 	.word	0x08012165
 8012160:	080121fb 	.word	0x080121fb
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012168:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801216c:	2b00      	cmp	r3, #0
 801216e:	d046      	beq.n	80121fe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8012170:	2301      	movs	r3, #1
 8012172:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8012174:	e043      	b.n	80121fe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801217a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 801217e:	d140      	bne.n	8012202 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8012180:	2301      	movs	r3, #1
 8012182:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8012184:	e03d      	b.n	8012202 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	699b      	ldr	r3, [r3, #24]
 801218a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801218e:	d121      	bne.n	80121d4 <DMA_CheckFifoParam+0xa8>
 8012190:	68bb      	ldr	r3, [r7, #8]
 8012192:	2b03      	cmp	r3, #3
 8012194:	d837      	bhi.n	8012206 <DMA_CheckFifoParam+0xda>
 8012196:	a201      	add	r2, pc, #4	; (adr r2, 801219c <DMA_CheckFifoParam+0x70>)
 8012198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801219c:	080121ad 	.word	0x080121ad
 80121a0:	080121b3 	.word	0x080121b3
 80121a4:	080121ad 	.word	0x080121ad
 80121a8:	080121c5 	.word	0x080121c5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80121ac:	2301      	movs	r3, #1
 80121ae:	73fb      	strb	r3, [r7, #15]
      break;
 80121b0:	e030      	b.n	8012214 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80121b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80121ba:	2b00      	cmp	r3, #0
 80121bc:	d025      	beq.n	801220a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80121be:	2301      	movs	r3, #1
 80121c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80121c2:	e022      	b.n	801220a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80121c8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80121cc:	d11f      	bne.n	801220e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80121ce:	2301      	movs	r3, #1
 80121d0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80121d2:	e01c      	b.n	801220e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80121d4:	68bb      	ldr	r3, [r7, #8]
 80121d6:	2b02      	cmp	r3, #2
 80121d8:	d903      	bls.n	80121e2 <DMA_CheckFifoParam+0xb6>
 80121da:	68bb      	ldr	r3, [r7, #8]
 80121dc:	2b03      	cmp	r3, #3
 80121de:	d003      	beq.n	80121e8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80121e0:	e018      	b.n	8012214 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80121e2:	2301      	movs	r3, #1
 80121e4:	73fb      	strb	r3, [r7, #15]
      break;
 80121e6:	e015      	b.n	8012214 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80121ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80121f0:	2b00      	cmp	r3, #0
 80121f2:	d00e      	beq.n	8012212 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80121f4:	2301      	movs	r3, #1
 80121f6:	73fb      	strb	r3, [r7, #15]
      break;
 80121f8:	e00b      	b.n	8012212 <DMA_CheckFifoParam+0xe6>
      break;
 80121fa:	bf00      	nop
 80121fc:	e00a      	b.n	8012214 <DMA_CheckFifoParam+0xe8>
      break;
 80121fe:	bf00      	nop
 8012200:	e008      	b.n	8012214 <DMA_CheckFifoParam+0xe8>
      break;
 8012202:	bf00      	nop
 8012204:	e006      	b.n	8012214 <DMA_CheckFifoParam+0xe8>
      break;
 8012206:	bf00      	nop
 8012208:	e004      	b.n	8012214 <DMA_CheckFifoParam+0xe8>
      break;
 801220a:	bf00      	nop
 801220c:	e002      	b.n	8012214 <DMA_CheckFifoParam+0xe8>
      break;   
 801220e:	bf00      	nop
 8012210:	e000      	b.n	8012214 <DMA_CheckFifoParam+0xe8>
      break;
 8012212:	bf00      	nop
    }
  } 
  
  return status; 
 8012214:	7bfb      	ldrb	r3, [r7, #15]
}
 8012216:	4618      	mov	r0, r3
 8012218:	3714      	adds	r7, #20
 801221a:	46bd      	mov	sp, r7
 801221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012220:	4770      	bx	lr
 8012222:	bf00      	nop

08012224 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8012224:	b480      	push	{r7}
 8012226:	b089      	sub	sp, #36	; 0x24
 8012228:	af00      	add	r7, sp, #0
 801222a:	6078      	str	r0, [r7, #4]
 801222c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 801222e:	2300      	movs	r3, #0
 8012230:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8012232:	2300      	movs	r3, #0
 8012234:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8012236:	2300      	movs	r3, #0
 8012238:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 801223a:	2300      	movs	r3, #0
 801223c:	61fb      	str	r3, [r7, #28]
 801223e:	e16b      	b.n	8012518 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8012240:	2201      	movs	r2, #1
 8012242:	69fb      	ldr	r3, [r7, #28]
 8012244:	fa02 f303 	lsl.w	r3, r2, r3
 8012248:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 801224a:	683b      	ldr	r3, [r7, #0]
 801224c:	681b      	ldr	r3, [r3, #0]
 801224e:	697a      	ldr	r2, [r7, #20]
 8012250:	4013      	ands	r3, r2
 8012252:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8012254:	693a      	ldr	r2, [r7, #16]
 8012256:	697b      	ldr	r3, [r7, #20]
 8012258:	429a      	cmp	r2, r3
 801225a:	f040 815a 	bne.w	8012512 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 801225e:	683b      	ldr	r3, [r7, #0]
 8012260:	685b      	ldr	r3, [r3, #4]
 8012262:	f003 0303 	and.w	r3, r3, #3
 8012266:	2b01      	cmp	r3, #1
 8012268:	d005      	beq.n	8012276 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801226a:	683b      	ldr	r3, [r7, #0]
 801226c:	685b      	ldr	r3, [r3, #4]
 801226e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8012272:	2b02      	cmp	r3, #2
 8012274:	d130      	bne.n	80122d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	689b      	ldr	r3, [r3, #8]
 801227a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 801227c:	69fb      	ldr	r3, [r7, #28]
 801227e:	005b      	lsls	r3, r3, #1
 8012280:	2203      	movs	r2, #3
 8012282:	fa02 f303 	lsl.w	r3, r2, r3
 8012286:	43db      	mvns	r3, r3
 8012288:	69ba      	ldr	r2, [r7, #24]
 801228a:	4013      	ands	r3, r2
 801228c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801228e:	683b      	ldr	r3, [r7, #0]
 8012290:	68da      	ldr	r2, [r3, #12]
 8012292:	69fb      	ldr	r3, [r7, #28]
 8012294:	005b      	lsls	r3, r3, #1
 8012296:	fa02 f303 	lsl.w	r3, r2, r3
 801229a:	69ba      	ldr	r2, [r7, #24]
 801229c:	4313      	orrs	r3, r2
 801229e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	69ba      	ldr	r2, [r7, #24]
 80122a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	685b      	ldr	r3, [r3, #4]
 80122aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80122ac:	2201      	movs	r2, #1
 80122ae:	69fb      	ldr	r3, [r7, #28]
 80122b0:	fa02 f303 	lsl.w	r3, r2, r3
 80122b4:	43db      	mvns	r3, r3
 80122b6:	69ba      	ldr	r2, [r7, #24]
 80122b8:	4013      	ands	r3, r2
 80122ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80122bc:	683b      	ldr	r3, [r7, #0]
 80122be:	685b      	ldr	r3, [r3, #4]
 80122c0:	091b      	lsrs	r3, r3, #4
 80122c2:	f003 0201 	and.w	r2, r3, #1
 80122c6:	69fb      	ldr	r3, [r7, #28]
 80122c8:	fa02 f303 	lsl.w	r3, r2, r3
 80122cc:	69ba      	ldr	r2, [r7, #24]
 80122ce:	4313      	orrs	r3, r2
 80122d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	69ba      	ldr	r2, [r7, #24]
 80122d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80122d8:	683b      	ldr	r3, [r7, #0]
 80122da:	685b      	ldr	r3, [r3, #4]
 80122dc:	f003 0303 	and.w	r3, r3, #3
 80122e0:	2b03      	cmp	r3, #3
 80122e2:	d017      	beq.n	8012314 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80122e4:	687b      	ldr	r3, [r7, #4]
 80122e6:	68db      	ldr	r3, [r3, #12]
 80122e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80122ea:	69fb      	ldr	r3, [r7, #28]
 80122ec:	005b      	lsls	r3, r3, #1
 80122ee:	2203      	movs	r2, #3
 80122f0:	fa02 f303 	lsl.w	r3, r2, r3
 80122f4:	43db      	mvns	r3, r3
 80122f6:	69ba      	ldr	r2, [r7, #24]
 80122f8:	4013      	ands	r3, r2
 80122fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80122fc:	683b      	ldr	r3, [r7, #0]
 80122fe:	689a      	ldr	r2, [r3, #8]
 8012300:	69fb      	ldr	r3, [r7, #28]
 8012302:	005b      	lsls	r3, r3, #1
 8012304:	fa02 f303 	lsl.w	r3, r2, r3
 8012308:	69ba      	ldr	r2, [r7, #24]
 801230a:	4313      	orrs	r3, r2
 801230c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	69ba      	ldr	r2, [r7, #24]
 8012312:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8012314:	683b      	ldr	r3, [r7, #0]
 8012316:	685b      	ldr	r3, [r3, #4]
 8012318:	f003 0303 	and.w	r3, r3, #3
 801231c:	2b02      	cmp	r3, #2
 801231e:	d123      	bne.n	8012368 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8012320:	69fb      	ldr	r3, [r7, #28]
 8012322:	08da      	lsrs	r2, r3, #3
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	3208      	adds	r2, #8
 8012328:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801232c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 801232e:	69fb      	ldr	r3, [r7, #28]
 8012330:	f003 0307 	and.w	r3, r3, #7
 8012334:	009b      	lsls	r3, r3, #2
 8012336:	220f      	movs	r2, #15
 8012338:	fa02 f303 	lsl.w	r3, r2, r3
 801233c:	43db      	mvns	r3, r3
 801233e:	69ba      	ldr	r2, [r7, #24]
 8012340:	4013      	ands	r3, r2
 8012342:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8012344:	683b      	ldr	r3, [r7, #0]
 8012346:	691a      	ldr	r2, [r3, #16]
 8012348:	69fb      	ldr	r3, [r7, #28]
 801234a:	f003 0307 	and.w	r3, r3, #7
 801234e:	009b      	lsls	r3, r3, #2
 8012350:	fa02 f303 	lsl.w	r3, r2, r3
 8012354:	69ba      	ldr	r2, [r7, #24]
 8012356:	4313      	orrs	r3, r2
 8012358:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 801235a:	69fb      	ldr	r3, [r7, #28]
 801235c:	08da      	lsrs	r2, r3, #3
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	3208      	adds	r2, #8
 8012362:	69b9      	ldr	r1, [r7, #24]
 8012364:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	681b      	ldr	r3, [r3, #0]
 801236c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 801236e:	69fb      	ldr	r3, [r7, #28]
 8012370:	005b      	lsls	r3, r3, #1
 8012372:	2203      	movs	r2, #3
 8012374:	fa02 f303 	lsl.w	r3, r2, r3
 8012378:	43db      	mvns	r3, r3
 801237a:	69ba      	ldr	r2, [r7, #24]
 801237c:	4013      	ands	r3, r2
 801237e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8012380:	683b      	ldr	r3, [r7, #0]
 8012382:	685b      	ldr	r3, [r3, #4]
 8012384:	f003 0203 	and.w	r2, r3, #3
 8012388:	69fb      	ldr	r3, [r7, #28]
 801238a:	005b      	lsls	r3, r3, #1
 801238c:	fa02 f303 	lsl.w	r3, r2, r3
 8012390:	69ba      	ldr	r2, [r7, #24]
 8012392:	4313      	orrs	r3, r2
 8012394:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	69ba      	ldr	r2, [r7, #24]
 801239a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 801239c:	683b      	ldr	r3, [r7, #0]
 801239e:	685b      	ldr	r3, [r3, #4]
 80123a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80123a4:	2b00      	cmp	r3, #0
 80123a6:	f000 80b4 	beq.w	8012512 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80123aa:	2300      	movs	r3, #0
 80123ac:	60fb      	str	r3, [r7, #12]
 80123ae:	4b60      	ldr	r3, [pc, #384]	; (8012530 <HAL_GPIO_Init+0x30c>)
 80123b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80123b2:	4a5f      	ldr	r2, [pc, #380]	; (8012530 <HAL_GPIO_Init+0x30c>)
 80123b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80123b8:	6453      	str	r3, [r2, #68]	; 0x44
 80123ba:	4b5d      	ldr	r3, [pc, #372]	; (8012530 <HAL_GPIO_Init+0x30c>)
 80123bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80123be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80123c2:	60fb      	str	r3, [r7, #12]
 80123c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80123c6:	4a5b      	ldr	r2, [pc, #364]	; (8012534 <HAL_GPIO_Init+0x310>)
 80123c8:	69fb      	ldr	r3, [r7, #28]
 80123ca:	089b      	lsrs	r3, r3, #2
 80123cc:	3302      	adds	r3, #2
 80123ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80123d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80123d4:	69fb      	ldr	r3, [r7, #28]
 80123d6:	f003 0303 	and.w	r3, r3, #3
 80123da:	009b      	lsls	r3, r3, #2
 80123dc:	220f      	movs	r2, #15
 80123de:	fa02 f303 	lsl.w	r3, r2, r3
 80123e2:	43db      	mvns	r3, r3
 80123e4:	69ba      	ldr	r2, [r7, #24]
 80123e6:	4013      	ands	r3, r2
 80123e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	4a52      	ldr	r2, [pc, #328]	; (8012538 <HAL_GPIO_Init+0x314>)
 80123ee:	4293      	cmp	r3, r2
 80123f0:	d02b      	beq.n	801244a <HAL_GPIO_Init+0x226>
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	4a51      	ldr	r2, [pc, #324]	; (801253c <HAL_GPIO_Init+0x318>)
 80123f6:	4293      	cmp	r3, r2
 80123f8:	d025      	beq.n	8012446 <HAL_GPIO_Init+0x222>
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	4a50      	ldr	r2, [pc, #320]	; (8012540 <HAL_GPIO_Init+0x31c>)
 80123fe:	4293      	cmp	r3, r2
 8012400:	d01f      	beq.n	8012442 <HAL_GPIO_Init+0x21e>
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	4a4f      	ldr	r2, [pc, #316]	; (8012544 <HAL_GPIO_Init+0x320>)
 8012406:	4293      	cmp	r3, r2
 8012408:	d019      	beq.n	801243e <HAL_GPIO_Init+0x21a>
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	4a4e      	ldr	r2, [pc, #312]	; (8012548 <HAL_GPIO_Init+0x324>)
 801240e:	4293      	cmp	r3, r2
 8012410:	d013      	beq.n	801243a <HAL_GPIO_Init+0x216>
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	4a4d      	ldr	r2, [pc, #308]	; (801254c <HAL_GPIO_Init+0x328>)
 8012416:	4293      	cmp	r3, r2
 8012418:	d00d      	beq.n	8012436 <HAL_GPIO_Init+0x212>
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	4a4c      	ldr	r2, [pc, #304]	; (8012550 <HAL_GPIO_Init+0x32c>)
 801241e:	4293      	cmp	r3, r2
 8012420:	d007      	beq.n	8012432 <HAL_GPIO_Init+0x20e>
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	4a4b      	ldr	r2, [pc, #300]	; (8012554 <HAL_GPIO_Init+0x330>)
 8012426:	4293      	cmp	r3, r2
 8012428:	d101      	bne.n	801242e <HAL_GPIO_Init+0x20a>
 801242a:	2307      	movs	r3, #7
 801242c:	e00e      	b.n	801244c <HAL_GPIO_Init+0x228>
 801242e:	2308      	movs	r3, #8
 8012430:	e00c      	b.n	801244c <HAL_GPIO_Init+0x228>
 8012432:	2306      	movs	r3, #6
 8012434:	e00a      	b.n	801244c <HAL_GPIO_Init+0x228>
 8012436:	2305      	movs	r3, #5
 8012438:	e008      	b.n	801244c <HAL_GPIO_Init+0x228>
 801243a:	2304      	movs	r3, #4
 801243c:	e006      	b.n	801244c <HAL_GPIO_Init+0x228>
 801243e:	2303      	movs	r3, #3
 8012440:	e004      	b.n	801244c <HAL_GPIO_Init+0x228>
 8012442:	2302      	movs	r3, #2
 8012444:	e002      	b.n	801244c <HAL_GPIO_Init+0x228>
 8012446:	2301      	movs	r3, #1
 8012448:	e000      	b.n	801244c <HAL_GPIO_Init+0x228>
 801244a:	2300      	movs	r3, #0
 801244c:	69fa      	ldr	r2, [r7, #28]
 801244e:	f002 0203 	and.w	r2, r2, #3
 8012452:	0092      	lsls	r2, r2, #2
 8012454:	4093      	lsls	r3, r2
 8012456:	69ba      	ldr	r2, [r7, #24]
 8012458:	4313      	orrs	r3, r2
 801245a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 801245c:	4935      	ldr	r1, [pc, #212]	; (8012534 <HAL_GPIO_Init+0x310>)
 801245e:	69fb      	ldr	r3, [r7, #28]
 8012460:	089b      	lsrs	r3, r3, #2
 8012462:	3302      	adds	r3, #2
 8012464:	69ba      	ldr	r2, [r7, #24]
 8012466:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 801246a:	4b3b      	ldr	r3, [pc, #236]	; (8012558 <HAL_GPIO_Init+0x334>)
 801246c:	681b      	ldr	r3, [r3, #0]
 801246e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8012470:	693b      	ldr	r3, [r7, #16]
 8012472:	43db      	mvns	r3, r3
 8012474:	69ba      	ldr	r2, [r7, #24]
 8012476:	4013      	ands	r3, r2
 8012478:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 801247a:	683b      	ldr	r3, [r7, #0]
 801247c:	685b      	ldr	r3, [r3, #4]
 801247e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012482:	2b00      	cmp	r3, #0
 8012484:	d003      	beq.n	801248e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8012486:	69ba      	ldr	r2, [r7, #24]
 8012488:	693b      	ldr	r3, [r7, #16]
 801248a:	4313      	orrs	r3, r2
 801248c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 801248e:	4a32      	ldr	r2, [pc, #200]	; (8012558 <HAL_GPIO_Init+0x334>)
 8012490:	69bb      	ldr	r3, [r7, #24]
 8012492:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8012494:	4b30      	ldr	r3, [pc, #192]	; (8012558 <HAL_GPIO_Init+0x334>)
 8012496:	685b      	ldr	r3, [r3, #4]
 8012498:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801249a:	693b      	ldr	r3, [r7, #16]
 801249c:	43db      	mvns	r3, r3
 801249e:	69ba      	ldr	r2, [r7, #24]
 80124a0:	4013      	ands	r3, r2
 80124a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80124a4:	683b      	ldr	r3, [r7, #0]
 80124a6:	685b      	ldr	r3, [r3, #4]
 80124a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80124ac:	2b00      	cmp	r3, #0
 80124ae:	d003      	beq.n	80124b8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80124b0:	69ba      	ldr	r2, [r7, #24]
 80124b2:	693b      	ldr	r3, [r7, #16]
 80124b4:	4313      	orrs	r3, r2
 80124b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80124b8:	4a27      	ldr	r2, [pc, #156]	; (8012558 <HAL_GPIO_Init+0x334>)
 80124ba:	69bb      	ldr	r3, [r7, #24]
 80124bc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80124be:	4b26      	ldr	r3, [pc, #152]	; (8012558 <HAL_GPIO_Init+0x334>)
 80124c0:	689b      	ldr	r3, [r3, #8]
 80124c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80124c4:	693b      	ldr	r3, [r7, #16]
 80124c6:	43db      	mvns	r3, r3
 80124c8:	69ba      	ldr	r2, [r7, #24]
 80124ca:	4013      	ands	r3, r2
 80124cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80124ce:	683b      	ldr	r3, [r7, #0]
 80124d0:	685b      	ldr	r3, [r3, #4]
 80124d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80124d6:	2b00      	cmp	r3, #0
 80124d8:	d003      	beq.n	80124e2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80124da:	69ba      	ldr	r2, [r7, #24]
 80124dc:	693b      	ldr	r3, [r7, #16]
 80124de:	4313      	orrs	r3, r2
 80124e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80124e2:	4a1d      	ldr	r2, [pc, #116]	; (8012558 <HAL_GPIO_Init+0x334>)
 80124e4:	69bb      	ldr	r3, [r7, #24]
 80124e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80124e8:	4b1b      	ldr	r3, [pc, #108]	; (8012558 <HAL_GPIO_Init+0x334>)
 80124ea:	68db      	ldr	r3, [r3, #12]
 80124ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80124ee:	693b      	ldr	r3, [r7, #16]
 80124f0:	43db      	mvns	r3, r3
 80124f2:	69ba      	ldr	r2, [r7, #24]
 80124f4:	4013      	ands	r3, r2
 80124f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80124f8:	683b      	ldr	r3, [r7, #0]
 80124fa:	685b      	ldr	r3, [r3, #4]
 80124fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8012500:	2b00      	cmp	r3, #0
 8012502:	d003      	beq.n	801250c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8012504:	69ba      	ldr	r2, [r7, #24]
 8012506:	693b      	ldr	r3, [r7, #16]
 8012508:	4313      	orrs	r3, r2
 801250a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 801250c:	4a12      	ldr	r2, [pc, #72]	; (8012558 <HAL_GPIO_Init+0x334>)
 801250e:	69bb      	ldr	r3, [r7, #24]
 8012510:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8012512:	69fb      	ldr	r3, [r7, #28]
 8012514:	3301      	adds	r3, #1
 8012516:	61fb      	str	r3, [r7, #28]
 8012518:	69fb      	ldr	r3, [r7, #28]
 801251a:	2b0f      	cmp	r3, #15
 801251c:	f67f ae90 	bls.w	8012240 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8012520:	bf00      	nop
 8012522:	bf00      	nop
 8012524:	3724      	adds	r7, #36	; 0x24
 8012526:	46bd      	mov	sp, r7
 8012528:	f85d 7b04 	ldr.w	r7, [sp], #4
 801252c:	4770      	bx	lr
 801252e:	bf00      	nop
 8012530:	40023800 	.word	0x40023800
 8012534:	40013800 	.word	0x40013800
 8012538:	40020000 	.word	0x40020000
 801253c:	40020400 	.word	0x40020400
 8012540:	40020800 	.word	0x40020800
 8012544:	40020c00 	.word	0x40020c00
 8012548:	40021000 	.word	0x40021000
 801254c:	40021400 	.word	0x40021400
 8012550:	40021800 	.word	0x40021800
 8012554:	40021c00 	.word	0x40021c00
 8012558:	40013c00 	.word	0x40013c00

0801255c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801255c:	b480      	push	{r7}
 801255e:	b083      	sub	sp, #12
 8012560:	af00      	add	r7, sp, #0
 8012562:	6078      	str	r0, [r7, #4]
 8012564:	460b      	mov	r3, r1
 8012566:	807b      	strh	r3, [r7, #2]
 8012568:	4613      	mov	r3, r2
 801256a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 801256c:	787b      	ldrb	r3, [r7, #1]
 801256e:	2b00      	cmp	r3, #0
 8012570:	d003      	beq.n	801257a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8012572:	887a      	ldrh	r2, [r7, #2]
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8012578:	e003      	b.n	8012582 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 801257a:	887b      	ldrh	r3, [r7, #2]
 801257c:	041a      	lsls	r2, r3, #16
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	619a      	str	r2, [r3, #24]
}
 8012582:	bf00      	nop
 8012584:	370c      	adds	r7, #12
 8012586:	46bd      	mov	sp, r7
 8012588:	f85d 7b04 	ldr.w	r7, [sp], #4
 801258c:	4770      	bx	lr

0801258e <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 801258e:	b480      	push	{r7}
 8012590:	b083      	sub	sp, #12
 8012592:	af00      	add	r7, sp, #0
 8012594:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	681b      	ldr	r3, [r3, #0]
 801259a:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 801259e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80125a0:	2300      	movs	r3, #0
}
 80125a2:	4618      	mov	r0, r3
 80125a4:	370c      	adds	r7, #12
 80125a6:	46bd      	mov	sp, r7
 80125a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125ac:	4770      	bx	lr
	...

080125b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80125b0:	b580      	push	{r7, lr}
 80125b2:	b086      	sub	sp, #24
 80125b4:	af00      	add	r7, sp, #0
 80125b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	2b00      	cmp	r3, #0
 80125bc:	d101      	bne.n	80125c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80125be:	2301      	movs	r3, #1
 80125c0:	e264      	b.n	8012a8c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80125c2:	687b      	ldr	r3, [r7, #4]
 80125c4:	681b      	ldr	r3, [r3, #0]
 80125c6:	f003 0301 	and.w	r3, r3, #1
 80125ca:	2b00      	cmp	r3, #0
 80125cc:	d075      	beq.n	80126ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80125ce:	4ba3      	ldr	r3, [pc, #652]	; (801285c <HAL_RCC_OscConfig+0x2ac>)
 80125d0:	689b      	ldr	r3, [r3, #8]
 80125d2:	f003 030c 	and.w	r3, r3, #12
 80125d6:	2b04      	cmp	r3, #4
 80125d8:	d00c      	beq.n	80125f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80125da:	4ba0      	ldr	r3, [pc, #640]	; (801285c <HAL_RCC_OscConfig+0x2ac>)
 80125dc:	689b      	ldr	r3, [r3, #8]
 80125de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80125e2:	2b08      	cmp	r3, #8
 80125e4:	d112      	bne.n	801260c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80125e6:	4b9d      	ldr	r3, [pc, #628]	; (801285c <HAL_RCC_OscConfig+0x2ac>)
 80125e8:	685b      	ldr	r3, [r3, #4]
 80125ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80125ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80125f2:	d10b      	bne.n	801260c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80125f4:	4b99      	ldr	r3, [pc, #612]	; (801285c <HAL_RCC_OscConfig+0x2ac>)
 80125f6:	681b      	ldr	r3, [r3, #0]
 80125f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80125fc:	2b00      	cmp	r3, #0
 80125fe:	d05b      	beq.n	80126b8 <HAL_RCC_OscConfig+0x108>
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	685b      	ldr	r3, [r3, #4]
 8012604:	2b00      	cmp	r3, #0
 8012606:	d157      	bne.n	80126b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8012608:	2301      	movs	r3, #1
 801260a:	e23f      	b.n	8012a8c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	685b      	ldr	r3, [r3, #4]
 8012610:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012614:	d106      	bne.n	8012624 <HAL_RCC_OscConfig+0x74>
 8012616:	4b91      	ldr	r3, [pc, #580]	; (801285c <HAL_RCC_OscConfig+0x2ac>)
 8012618:	681b      	ldr	r3, [r3, #0]
 801261a:	4a90      	ldr	r2, [pc, #576]	; (801285c <HAL_RCC_OscConfig+0x2ac>)
 801261c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8012620:	6013      	str	r3, [r2, #0]
 8012622:	e01d      	b.n	8012660 <HAL_RCC_OscConfig+0xb0>
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	685b      	ldr	r3, [r3, #4]
 8012628:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801262c:	d10c      	bne.n	8012648 <HAL_RCC_OscConfig+0x98>
 801262e:	4b8b      	ldr	r3, [pc, #556]	; (801285c <HAL_RCC_OscConfig+0x2ac>)
 8012630:	681b      	ldr	r3, [r3, #0]
 8012632:	4a8a      	ldr	r2, [pc, #552]	; (801285c <HAL_RCC_OscConfig+0x2ac>)
 8012634:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8012638:	6013      	str	r3, [r2, #0]
 801263a:	4b88      	ldr	r3, [pc, #544]	; (801285c <HAL_RCC_OscConfig+0x2ac>)
 801263c:	681b      	ldr	r3, [r3, #0]
 801263e:	4a87      	ldr	r2, [pc, #540]	; (801285c <HAL_RCC_OscConfig+0x2ac>)
 8012640:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8012644:	6013      	str	r3, [r2, #0]
 8012646:	e00b      	b.n	8012660 <HAL_RCC_OscConfig+0xb0>
 8012648:	4b84      	ldr	r3, [pc, #528]	; (801285c <HAL_RCC_OscConfig+0x2ac>)
 801264a:	681b      	ldr	r3, [r3, #0]
 801264c:	4a83      	ldr	r2, [pc, #524]	; (801285c <HAL_RCC_OscConfig+0x2ac>)
 801264e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8012652:	6013      	str	r3, [r2, #0]
 8012654:	4b81      	ldr	r3, [pc, #516]	; (801285c <HAL_RCC_OscConfig+0x2ac>)
 8012656:	681b      	ldr	r3, [r3, #0]
 8012658:	4a80      	ldr	r2, [pc, #512]	; (801285c <HAL_RCC_OscConfig+0x2ac>)
 801265a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801265e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	685b      	ldr	r3, [r3, #4]
 8012664:	2b00      	cmp	r3, #0
 8012666:	d013      	beq.n	8012690 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012668:	f7fd ffcc 	bl	8010604 <HAL_GetTick>
 801266c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801266e:	e008      	b.n	8012682 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8012670:	f7fd ffc8 	bl	8010604 <HAL_GetTick>
 8012674:	4602      	mov	r2, r0
 8012676:	693b      	ldr	r3, [r7, #16]
 8012678:	1ad3      	subs	r3, r2, r3
 801267a:	2b64      	cmp	r3, #100	; 0x64
 801267c:	d901      	bls.n	8012682 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 801267e:	2303      	movs	r3, #3
 8012680:	e204      	b.n	8012a8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8012682:	4b76      	ldr	r3, [pc, #472]	; (801285c <HAL_RCC_OscConfig+0x2ac>)
 8012684:	681b      	ldr	r3, [r3, #0]
 8012686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801268a:	2b00      	cmp	r3, #0
 801268c:	d0f0      	beq.n	8012670 <HAL_RCC_OscConfig+0xc0>
 801268e:	e014      	b.n	80126ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012690:	f7fd ffb8 	bl	8010604 <HAL_GetTick>
 8012694:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8012696:	e008      	b.n	80126aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8012698:	f7fd ffb4 	bl	8010604 <HAL_GetTick>
 801269c:	4602      	mov	r2, r0
 801269e:	693b      	ldr	r3, [r7, #16]
 80126a0:	1ad3      	subs	r3, r2, r3
 80126a2:	2b64      	cmp	r3, #100	; 0x64
 80126a4:	d901      	bls.n	80126aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80126a6:	2303      	movs	r3, #3
 80126a8:	e1f0      	b.n	8012a8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80126aa:	4b6c      	ldr	r3, [pc, #432]	; (801285c <HAL_RCC_OscConfig+0x2ac>)
 80126ac:	681b      	ldr	r3, [r3, #0]
 80126ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80126b2:	2b00      	cmp	r3, #0
 80126b4:	d1f0      	bne.n	8012698 <HAL_RCC_OscConfig+0xe8>
 80126b6:	e000      	b.n	80126ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80126b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	681b      	ldr	r3, [r3, #0]
 80126be:	f003 0302 	and.w	r3, r3, #2
 80126c2:	2b00      	cmp	r3, #0
 80126c4:	d063      	beq.n	801278e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80126c6:	4b65      	ldr	r3, [pc, #404]	; (801285c <HAL_RCC_OscConfig+0x2ac>)
 80126c8:	689b      	ldr	r3, [r3, #8]
 80126ca:	f003 030c 	and.w	r3, r3, #12
 80126ce:	2b00      	cmp	r3, #0
 80126d0:	d00b      	beq.n	80126ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80126d2:	4b62      	ldr	r3, [pc, #392]	; (801285c <HAL_RCC_OscConfig+0x2ac>)
 80126d4:	689b      	ldr	r3, [r3, #8]
 80126d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80126da:	2b08      	cmp	r3, #8
 80126dc:	d11c      	bne.n	8012718 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80126de:	4b5f      	ldr	r3, [pc, #380]	; (801285c <HAL_RCC_OscConfig+0x2ac>)
 80126e0:	685b      	ldr	r3, [r3, #4]
 80126e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80126e6:	2b00      	cmp	r3, #0
 80126e8:	d116      	bne.n	8012718 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80126ea:	4b5c      	ldr	r3, [pc, #368]	; (801285c <HAL_RCC_OscConfig+0x2ac>)
 80126ec:	681b      	ldr	r3, [r3, #0]
 80126ee:	f003 0302 	and.w	r3, r3, #2
 80126f2:	2b00      	cmp	r3, #0
 80126f4:	d005      	beq.n	8012702 <HAL_RCC_OscConfig+0x152>
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	68db      	ldr	r3, [r3, #12]
 80126fa:	2b01      	cmp	r3, #1
 80126fc:	d001      	beq.n	8012702 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80126fe:	2301      	movs	r3, #1
 8012700:	e1c4      	b.n	8012a8c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8012702:	4b56      	ldr	r3, [pc, #344]	; (801285c <HAL_RCC_OscConfig+0x2ac>)
 8012704:	681b      	ldr	r3, [r3, #0]
 8012706:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	691b      	ldr	r3, [r3, #16]
 801270e:	00db      	lsls	r3, r3, #3
 8012710:	4952      	ldr	r1, [pc, #328]	; (801285c <HAL_RCC_OscConfig+0x2ac>)
 8012712:	4313      	orrs	r3, r2
 8012714:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8012716:	e03a      	b.n	801278e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	68db      	ldr	r3, [r3, #12]
 801271c:	2b00      	cmp	r3, #0
 801271e:	d020      	beq.n	8012762 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8012720:	4b4f      	ldr	r3, [pc, #316]	; (8012860 <HAL_RCC_OscConfig+0x2b0>)
 8012722:	2201      	movs	r2, #1
 8012724:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012726:	f7fd ff6d 	bl	8010604 <HAL_GetTick>
 801272a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801272c:	e008      	b.n	8012740 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801272e:	f7fd ff69 	bl	8010604 <HAL_GetTick>
 8012732:	4602      	mov	r2, r0
 8012734:	693b      	ldr	r3, [r7, #16]
 8012736:	1ad3      	subs	r3, r2, r3
 8012738:	2b02      	cmp	r3, #2
 801273a:	d901      	bls.n	8012740 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 801273c:	2303      	movs	r3, #3
 801273e:	e1a5      	b.n	8012a8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012740:	4b46      	ldr	r3, [pc, #280]	; (801285c <HAL_RCC_OscConfig+0x2ac>)
 8012742:	681b      	ldr	r3, [r3, #0]
 8012744:	f003 0302 	and.w	r3, r3, #2
 8012748:	2b00      	cmp	r3, #0
 801274a:	d0f0      	beq.n	801272e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801274c:	4b43      	ldr	r3, [pc, #268]	; (801285c <HAL_RCC_OscConfig+0x2ac>)
 801274e:	681b      	ldr	r3, [r3, #0]
 8012750:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	691b      	ldr	r3, [r3, #16]
 8012758:	00db      	lsls	r3, r3, #3
 801275a:	4940      	ldr	r1, [pc, #256]	; (801285c <HAL_RCC_OscConfig+0x2ac>)
 801275c:	4313      	orrs	r3, r2
 801275e:	600b      	str	r3, [r1, #0]
 8012760:	e015      	b.n	801278e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8012762:	4b3f      	ldr	r3, [pc, #252]	; (8012860 <HAL_RCC_OscConfig+0x2b0>)
 8012764:	2200      	movs	r2, #0
 8012766:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012768:	f7fd ff4c 	bl	8010604 <HAL_GetTick>
 801276c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801276e:	e008      	b.n	8012782 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8012770:	f7fd ff48 	bl	8010604 <HAL_GetTick>
 8012774:	4602      	mov	r2, r0
 8012776:	693b      	ldr	r3, [r7, #16]
 8012778:	1ad3      	subs	r3, r2, r3
 801277a:	2b02      	cmp	r3, #2
 801277c:	d901      	bls.n	8012782 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 801277e:	2303      	movs	r3, #3
 8012780:	e184      	b.n	8012a8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8012782:	4b36      	ldr	r3, [pc, #216]	; (801285c <HAL_RCC_OscConfig+0x2ac>)
 8012784:	681b      	ldr	r3, [r3, #0]
 8012786:	f003 0302 	and.w	r3, r3, #2
 801278a:	2b00      	cmp	r3, #0
 801278c:	d1f0      	bne.n	8012770 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	681b      	ldr	r3, [r3, #0]
 8012792:	f003 0308 	and.w	r3, r3, #8
 8012796:	2b00      	cmp	r3, #0
 8012798:	d030      	beq.n	80127fc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 801279a:	687b      	ldr	r3, [r7, #4]
 801279c:	695b      	ldr	r3, [r3, #20]
 801279e:	2b00      	cmp	r3, #0
 80127a0:	d016      	beq.n	80127d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80127a2:	4b30      	ldr	r3, [pc, #192]	; (8012864 <HAL_RCC_OscConfig+0x2b4>)
 80127a4:	2201      	movs	r2, #1
 80127a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80127a8:	f7fd ff2c 	bl	8010604 <HAL_GetTick>
 80127ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80127ae:	e008      	b.n	80127c2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80127b0:	f7fd ff28 	bl	8010604 <HAL_GetTick>
 80127b4:	4602      	mov	r2, r0
 80127b6:	693b      	ldr	r3, [r7, #16]
 80127b8:	1ad3      	subs	r3, r2, r3
 80127ba:	2b02      	cmp	r3, #2
 80127bc:	d901      	bls.n	80127c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80127be:	2303      	movs	r3, #3
 80127c0:	e164      	b.n	8012a8c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80127c2:	4b26      	ldr	r3, [pc, #152]	; (801285c <HAL_RCC_OscConfig+0x2ac>)
 80127c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80127c6:	f003 0302 	and.w	r3, r3, #2
 80127ca:	2b00      	cmp	r3, #0
 80127cc:	d0f0      	beq.n	80127b0 <HAL_RCC_OscConfig+0x200>
 80127ce:	e015      	b.n	80127fc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80127d0:	4b24      	ldr	r3, [pc, #144]	; (8012864 <HAL_RCC_OscConfig+0x2b4>)
 80127d2:	2200      	movs	r2, #0
 80127d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80127d6:	f7fd ff15 	bl	8010604 <HAL_GetTick>
 80127da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80127dc:	e008      	b.n	80127f0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80127de:	f7fd ff11 	bl	8010604 <HAL_GetTick>
 80127e2:	4602      	mov	r2, r0
 80127e4:	693b      	ldr	r3, [r7, #16]
 80127e6:	1ad3      	subs	r3, r2, r3
 80127e8:	2b02      	cmp	r3, #2
 80127ea:	d901      	bls.n	80127f0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80127ec:	2303      	movs	r3, #3
 80127ee:	e14d      	b.n	8012a8c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80127f0:	4b1a      	ldr	r3, [pc, #104]	; (801285c <HAL_RCC_OscConfig+0x2ac>)
 80127f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80127f4:	f003 0302 	and.w	r3, r3, #2
 80127f8:	2b00      	cmp	r3, #0
 80127fa:	d1f0      	bne.n	80127de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	681b      	ldr	r3, [r3, #0]
 8012800:	f003 0304 	and.w	r3, r3, #4
 8012804:	2b00      	cmp	r3, #0
 8012806:	f000 80a0 	beq.w	801294a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 801280a:	2300      	movs	r3, #0
 801280c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801280e:	4b13      	ldr	r3, [pc, #76]	; (801285c <HAL_RCC_OscConfig+0x2ac>)
 8012810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012816:	2b00      	cmp	r3, #0
 8012818:	d10f      	bne.n	801283a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801281a:	2300      	movs	r3, #0
 801281c:	60bb      	str	r3, [r7, #8]
 801281e:	4b0f      	ldr	r3, [pc, #60]	; (801285c <HAL_RCC_OscConfig+0x2ac>)
 8012820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012822:	4a0e      	ldr	r2, [pc, #56]	; (801285c <HAL_RCC_OscConfig+0x2ac>)
 8012824:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012828:	6413      	str	r3, [r2, #64]	; 0x40
 801282a:	4b0c      	ldr	r3, [pc, #48]	; (801285c <HAL_RCC_OscConfig+0x2ac>)
 801282c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801282e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012832:	60bb      	str	r3, [r7, #8]
 8012834:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8012836:	2301      	movs	r3, #1
 8012838:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801283a:	4b0b      	ldr	r3, [pc, #44]	; (8012868 <HAL_RCC_OscConfig+0x2b8>)
 801283c:	681b      	ldr	r3, [r3, #0]
 801283e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012842:	2b00      	cmp	r3, #0
 8012844:	d121      	bne.n	801288a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8012846:	4b08      	ldr	r3, [pc, #32]	; (8012868 <HAL_RCC_OscConfig+0x2b8>)
 8012848:	681b      	ldr	r3, [r3, #0]
 801284a:	4a07      	ldr	r2, [pc, #28]	; (8012868 <HAL_RCC_OscConfig+0x2b8>)
 801284c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012850:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8012852:	f7fd fed7 	bl	8010604 <HAL_GetTick>
 8012856:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8012858:	e011      	b.n	801287e <HAL_RCC_OscConfig+0x2ce>
 801285a:	bf00      	nop
 801285c:	40023800 	.word	0x40023800
 8012860:	42470000 	.word	0x42470000
 8012864:	42470e80 	.word	0x42470e80
 8012868:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801286c:	f7fd feca 	bl	8010604 <HAL_GetTick>
 8012870:	4602      	mov	r2, r0
 8012872:	693b      	ldr	r3, [r7, #16]
 8012874:	1ad3      	subs	r3, r2, r3
 8012876:	2b02      	cmp	r3, #2
 8012878:	d901      	bls.n	801287e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 801287a:	2303      	movs	r3, #3
 801287c:	e106      	b.n	8012a8c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801287e:	4b85      	ldr	r3, [pc, #532]	; (8012a94 <HAL_RCC_OscConfig+0x4e4>)
 8012880:	681b      	ldr	r3, [r3, #0]
 8012882:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012886:	2b00      	cmp	r3, #0
 8012888:	d0f0      	beq.n	801286c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	689b      	ldr	r3, [r3, #8]
 801288e:	2b01      	cmp	r3, #1
 8012890:	d106      	bne.n	80128a0 <HAL_RCC_OscConfig+0x2f0>
 8012892:	4b81      	ldr	r3, [pc, #516]	; (8012a98 <HAL_RCC_OscConfig+0x4e8>)
 8012894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012896:	4a80      	ldr	r2, [pc, #512]	; (8012a98 <HAL_RCC_OscConfig+0x4e8>)
 8012898:	f043 0301 	orr.w	r3, r3, #1
 801289c:	6713      	str	r3, [r2, #112]	; 0x70
 801289e:	e01c      	b.n	80128da <HAL_RCC_OscConfig+0x32a>
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	689b      	ldr	r3, [r3, #8]
 80128a4:	2b05      	cmp	r3, #5
 80128a6:	d10c      	bne.n	80128c2 <HAL_RCC_OscConfig+0x312>
 80128a8:	4b7b      	ldr	r3, [pc, #492]	; (8012a98 <HAL_RCC_OscConfig+0x4e8>)
 80128aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80128ac:	4a7a      	ldr	r2, [pc, #488]	; (8012a98 <HAL_RCC_OscConfig+0x4e8>)
 80128ae:	f043 0304 	orr.w	r3, r3, #4
 80128b2:	6713      	str	r3, [r2, #112]	; 0x70
 80128b4:	4b78      	ldr	r3, [pc, #480]	; (8012a98 <HAL_RCC_OscConfig+0x4e8>)
 80128b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80128b8:	4a77      	ldr	r2, [pc, #476]	; (8012a98 <HAL_RCC_OscConfig+0x4e8>)
 80128ba:	f043 0301 	orr.w	r3, r3, #1
 80128be:	6713      	str	r3, [r2, #112]	; 0x70
 80128c0:	e00b      	b.n	80128da <HAL_RCC_OscConfig+0x32a>
 80128c2:	4b75      	ldr	r3, [pc, #468]	; (8012a98 <HAL_RCC_OscConfig+0x4e8>)
 80128c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80128c6:	4a74      	ldr	r2, [pc, #464]	; (8012a98 <HAL_RCC_OscConfig+0x4e8>)
 80128c8:	f023 0301 	bic.w	r3, r3, #1
 80128cc:	6713      	str	r3, [r2, #112]	; 0x70
 80128ce:	4b72      	ldr	r3, [pc, #456]	; (8012a98 <HAL_RCC_OscConfig+0x4e8>)
 80128d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80128d2:	4a71      	ldr	r2, [pc, #452]	; (8012a98 <HAL_RCC_OscConfig+0x4e8>)
 80128d4:	f023 0304 	bic.w	r3, r3, #4
 80128d8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	689b      	ldr	r3, [r3, #8]
 80128de:	2b00      	cmp	r3, #0
 80128e0:	d015      	beq.n	801290e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80128e2:	f7fd fe8f 	bl	8010604 <HAL_GetTick>
 80128e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80128e8:	e00a      	b.n	8012900 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80128ea:	f7fd fe8b 	bl	8010604 <HAL_GetTick>
 80128ee:	4602      	mov	r2, r0
 80128f0:	693b      	ldr	r3, [r7, #16]
 80128f2:	1ad3      	subs	r3, r2, r3
 80128f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80128f8:	4293      	cmp	r3, r2
 80128fa:	d901      	bls.n	8012900 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80128fc:	2303      	movs	r3, #3
 80128fe:	e0c5      	b.n	8012a8c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8012900:	4b65      	ldr	r3, [pc, #404]	; (8012a98 <HAL_RCC_OscConfig+0x4e8>)
 8012902:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012904:	f003 0302 	and.w	r3, r3, #2
 8012908:	2b00      	cmp	r3, #0
 801290a:	d0ee      	beq.n	80128ea <HAL_RCC_OscConfig+0x33a>
 801290c:	e014      	b.n	8012938 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801290e:	f7fd fe79 	bl	8010604 <HAL_GetTick>
 8012912:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8012914:	e00a      	b.n	801292c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012916:	f7fd fe75 	bl	8010604 <HAL_GetTick>
 801291a:	4602      	mov	r2, r0
 801291c:	693b      	ldr	r3, [r7, #16]
 801291e:	1ad3      	subs	r3, r2, r3
 8012920:	f241 3288 	movw	r2, #5000	; 0x1388
 8012924:	4293      	cmp	r3, r2
 8012926:	d901      	bls.n	801292c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8012928:	2303      	movs	r3, #3
 801292a:	e0af      	b.n	8012a8c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801292c:	4b5a      	ldr	r3, [pc, #360]	; (8012a98 <HAL_RCC_OscConfig+0x4e8>)
 801292e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012930:	f003 0302 	and.w	r3, r3, #2
 8012934:	2b00      	cmp	r3, #0
 8012936:	d1ee      	bne.n	8012916 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8012938:	7dfb      	ldrb	r3, [r7, #23]
 801293a:	2b01      	cmp	r3, #1
 801293c:	d105      	bne.n	801294a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801293e:	4b56      	ldr	r3, [pc, #344]	; (8012a98 <HAL_RCC_OscConfig+0x4e8>)
 8012940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012942:	4a55      	ldr	r2, [pc, #340]	; (8012a98 <HAL_RCC_OscConfig+0x4e8>)
 8012944:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012948:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	699b      	ldr	r3, [r3, #24]
 801294e:	2b00      	cmp	r3, #0
 8012950:	f000 809b 	beq.w	8012a8a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8012954:	4b50      	ldr	r3, [pc, #320]	; (8012a98 <HAL_RCC_OscConfig+0x4e8>)
 8012956:	689b      	ldr	r3, [r3, #8]
 8012958:	f003 030c 	and.w	r3, r3, #12
 801295c:	2b08      	cmp	r3, #8
 801295e:	d05c      	beq.n	8012a1a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8012960:	687b      	ldr	r3, [r7, #4]
 8012962:	699b      	ldr	r3, [r3, #24]
 8012964:	2b02      	cmp	r3, #2
 8012966:	d141      	bne.n	80129ec <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8012968:	4b4c      	ldr	r3, [pc, #304]	; (8012a9c <HAL_RCC_OscConfig+0x4ec>)
 801296a:	2200      	movs	r2, #0
 801296c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801296e:	f7fd fe49 	bl	8010604 <HAL_GetTick>
 8012972:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8012974:	e008      	b.n	8012988 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8012976:	f7fd fe45 	bl	8010604 <HAL_GetTick>
 801297a:	4602      	mov	r2, r0
 801297c:	693b      	ldr	r3, [r7, #16]
 801297e:	1ad3      	subs	r3, r2, r3
 8012980:	2b02      	cmp	r3, #2
 8012982:	d901      	bls.n	8012988 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8012984:	2303      	movs	r3, #3
 8012986:	e081      	b.n	8012a8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8012988:	4b43      	ldr	r3, [pc, #268]	; (8012a98 <HAL_RCC_OscConfig+0x4e8>)
 801298a:	681b      	ldr	r3, [r3, #0]
 801298c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012990:	2b00      	cmp	r3, #0
 8012992:	d1f0      	bne.n	8012976 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	69da      	ldr	r2, [r3, #28]
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	6a1b      	ldr	r3, [r3, #32]
 801299c:	431a      	orrs	r2, r3
 801299e:	687b      	ldr	r3, [r7, #4]
 80129a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80129a2:	019b      	lsls	r3, r3, #6
 80129a4:	431a      	orrs	r2, r3
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80129aa:	085b      	lsrs	r3, r3, #1
 80129ac:	3b01      	subs	r3, #1
 80129ae:	041b      	lsls	r3, r3, #16
 80129b0:	431a      	orrs	r2, r3
 80129b2:	687b      	ldr	r3, [r7, #4]
 80129b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80129b6:	061b      	lsls	r3, r3, #24
 80129b8:	4937      	ldr	r1, [pc, #220]	; (8012a98 <HAL_RCC_OscConfig+0x4e8>)
 80129ba:	4313      	orrs	r3, r2
 80129bc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80129be:	4b37      	ldr	r3, [pc, #220]	; (8012a9c <HAL_RCC_OscConfig+0x4ec>)
 80129c0:	2201      	movs	r2, #1
 80129c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80129c4:	f7fd fe1e 	bl	8010604 <HAL_GetTick>
 80129c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80129ca:	e008      	b.n	80129de <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80129cc:	f7fd fe1a 	bl	8010604 <HAL_GetTick>
 80129d0:	4602      	mov	r2, r0
 80129d2:	693b      	ldr	r3, [r7, #16]
 80129d4:	1ad3      	subs	r3, r2, r3
 80129d6:	2b02      	cmp	r3, #2
 80129d8:	d901      	bls.n	80129de <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80129da:	2303      	movs	r3, #3
 80129dc:	e056      	b.n	8012a8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80129de:	4b2e      	ldr	r3, [pc, #184]	; (8012a98 <HAL_RCC_OscConfig+0x4e8>)
 80129e0:	681b      	ldr	r3, [r3, #0]
 80129e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80129e6:	2b00      	cmp	r3, #0
 80129e8:	d0f0      	beq.n	80129cc <HAL_RCC_OscConfig+0x41c>
 80129ea:	e04e      	b.n	8012a8a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80129ec:	4b2b      	ldr	r3, [pc, #172]	; (8012a9c <HAL_RCC_OscConfig+0x4ec>)
 80129ee:	2200      	movs	r2, #0
 80129f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80129f2:	f7fd fe07 	bl	8010604 <HAL_GetTick>
 80129f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80129f8:	e008      	b.n	8012a0c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80129fa:	f7fd fe03 	bl	8010604 <HAL_GetTick>
 80129fe:	4602      	mov	r2, r0
 8012a00:	693b      	ldr	r3, [r7, #16]
 8012a02:	1ad3      	subs	r3, r2, r3
 8012a04:	2b02      	cmp	r3, #2
 8012a06:	d901      	bls.n	8012a0c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8012a08:	2303      	movs	r3, #3
 8012a0a:	e03f      	b.n	8012a8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8012a0c:	4b22      	ldr	r3, [pc, #136]	; (8012a98 <HAL_RCC_OscConfig+0x4e8>)
 8012a0e:	681b      	ldr	r3, [r3, #0]
 8012a10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012a14:	2b00      	cmp	r3, #0
 8012a16:	d1f0      	bne.n	80129fa <HAL_RCC_OscConfig+0x44a>
 8012a18:	e037      	b.n	8012a8a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	699b      	ldr	r3, [r3, #24]
 8012a1e:	2b01      	cmp	r3, #1
 8012a20:	d101      	bne.n	8012a26 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8012a22:	2301      	movs	r3, #1
 8012a24:	e032      	b.n	8012a8c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8012a26:	4b1c      	ldr	r3, [pc, #112]	; (8012a98 <HAL_RCC_OscConfig+0x4e8>)
 8012a28:	685b      	ldr	r3, [r3, #4]
 8012a2a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	699b      	ldr	r3, [r3, #24]
 8012a30:	2b01      	cmp	r3, #1
 8012a32:	d028      	beq.n	8012a86 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8012a34:	68fb      	ldr	r3, [r7, #12]
 8012a36:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8012a3a:	687b      	ldr	r3, [r7, #4]
 8012a3c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8012a3e:	429a      	cmp	r2, r3
 8012a40:	d121      	bne.n	8012a86 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8012a42:	68fb      	ldr	r3, [r7, #12]
 8012a44:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8012a4c:	429a      	cmp	r2, r3
 8012a4e:	d11a      	bne.n	8012a86 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8012a50:	68fa      	ldr	r2, [r7, #12]
 8012a52:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8012a56:	4013      	ands	r3, r2
 8012a58:	687a      	ldr	r2, [r7, #4]
 8012a5a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8012a5c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8012a5e:	4293      	cmp	r3, r2
 8012a60:	d111      	bne.n	8012a86 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8012a62:	68fb      	ldr	r3, [r7, #12]
 8012a64:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012a6c:	085b      	lsrs	r3, r3, #1
 8012a6e:	3b01      	subs	r3, #1
 8012a70:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8012a72:	429a      	cmp	r2, r3
 8012a74:	d107      	bne.n	8012a86 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8012a76:	68fb      	ldr	r3, [r7, #12]
 8012a78:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8012a7c:	687b      	ldr	r3, [r7, #4]
 8012a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a80:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8012a82:	429a      	cmp	r2, r3
 8012a84:	d001      	beq.n	8012a8a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8012a86:	2301      	movs	r3, #1
 8012a88:	e000      	b.n	8012a8c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8012a8a:	2300      	movs	r3, #0
}
 8012a8c:	4618      	mov	r0, r3
 8012a8e:	3718      	adds	r7, #24
 8012a90:	46bd      	mov	sp, r7
 8012a92:	bd80      	pop	{r7, pc}
 8012a94:	40007000 	.word	0x40007000
 8012a98:	40023800 	.word	0x40023800
 8012a9c:	42470060 	.word	0x42470060

08012aa0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8012aa0:	b580      	push	{r7, lr}
 8012aa2:	b084      	sub	sp, #16
 8012aa4:	af00      	add	r7, sp, #0
 8012aa6:	6078      	str	r0, [r7, #4]
 8012aa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	2b00      	cmp	r3, #0
 8012aae:	d101      	bne.n	8012ab4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8012ab0:	2301      	movs	r3, #1
 8012ab2:	e0cc      	b.n	8012c4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8012ab4:	4b68      	ldr	r3, [pc, #416]	; (8012c58 <HAL_RCC_ClockConfig+0x1b8>)
 8012ab6:	681b      	ldr	r3, [r3, #0]
 8012ab8:	f003 0307 	and.w	r3, r3, #7
 8012abc:	683a      	ldr	r2, [r7, #0]
 8012abe:	429a      	cmp	r2, r3
 8012ac0:	d90c      	bls.n	8012adc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8012ac2:	4b65      	ldr	r3, [pc, #404]	; (8012c58 <HAL_RCC_ClockConfig+0x1b8>)
 8012ac4:	683a      	ldr	r2, [r7, #0]
 8012ac6:	b2d2      	uxtb	r2, r2
 8012ac8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8012aca:	4b63      	ldr	r3, [pc, #396]	; (8012c58 <HAL_RCC_ClockConfig+0x1b8>)
 8012acc:	681b      	ldr	r3, [r3, #0]
 8012ace:	f003 0307 	and.w	r3, r3, #7
 8012ad2:	683a      	ldr	r2, [r7, #0]
 8012ad4:	429a      	cmp	r2, r3
 8012ad6:	d001      	beq.n	8012adc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8012ad8:	2301      	movs	r3, #1
 8012ada:	e0b8      	b.n	8012c4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	681b      	ldr	r3, [r3, #0]
 8012ae0:	f003 0302 	and.w	r3, r3, #2
 8012ae4:	2b00      	cmp	r3, #0
 8012ae6:	d020      	beq.n	8012b2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	681b      	ldr	r3, [r3, #0]
 8012aec:	f003 0304 	and.w	r3, r3, #4
 8012af0:	2b00      	cmp	r3, #0
 8012af2:	d005      	beq.n	8012b00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8012af4:	4b59      	ldr	r3, [pc, #356]	; (8012c5c <HAL_RCC_ClockConfig+0x1bc>)
 8012af6:	689b      	ldr	r3, [r3, #8]
 8012af8:	4a58      	ldr	r2, [pc, #352]	; (8012c5c <HAL_RCC_ClockConfig+0x1bc>)
 8012afa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8012afe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	681b      	ldr	r3, [r3, #0]
 8012b04:	f003 0308 	and.w	r3, r3, #8
 8012b08:	2b00      	cmp	r3, #0
 8012b0a:	d005      	beq.n	8012b18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8012b0c:	4b53      	ldr	r3, [pc, #332]	; (8012c5c <HAL_RCC_ClockConfig+0x1bc>)
 8012b0e:	689b      	ldr	r3, [r3, #8]
 8012b10:	4a52      	ldr	r2, [pc, #328]	; (8012c5c <HAL_RCC_ClockConfig+0x1bc>)
 8012b12:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8012b16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8012b18:	4b50      	ldr	r3, [pc, #320]	; (8012c5c <HAL_RCC_ClockConfig+0x1bc>)
 8012b1a:	689b      	ldr	r3, [r3, #8]
 8012b1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	689b      	ldr	r3, [r3, #8]
 8012b24:	494d      	ldr	r1, [pc, #308]	; (8012c5c <HAL_RCC_ClockConfig+0x1bc>)
 8012b26:	4313      	orrs	r3, r2
 8012b28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	681b      	ldr	r3, [r3, #0]
 8012b2e:	f003 0301 	and.w	r3, r3, #1
 8012b32:	2b00      	cmp	r3, #0
 8012b34:	d044      	beq.n	8012bc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	685b      	ldr	r3, [r3, #4]
 8012b3a:	2b01      	cmp	r3, #1
 8012b3c:	d107      	bne.n	8012b4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8012b3e:	4b47      	ldr	r3, [pc, #284]	; (8012c5c <HAL_RCC_ClockConfig+0x1bc>)
 8012b40:	681b      	ldr	r3, [r3, #0]
 8012b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012b46:	2b00      	cmp	r3, #0
 8012b48:	d119      	bne.n	8012b7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8012b4a:	2301      	movs	r3, #1
 8012b4c:	e07f      	b.n	8012c4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	685b      	ldr	r3, [r3, #4]
 8012b52:	2b02      	cmp	r3, #2
 8012b54:	d003      	beq.n	8012b5e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8012b5a:	2b03      	cmp	r3, #3
 8012b5c:	d107      	bne.n	8012b6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8012b5e:	4b3f      	ldr	r3, [pc, #252]	; (8012c5c <HAL_RCC_ClockConfig+0x1bc>)
 8012b60:	681b      	ldr	r3, [r3, #0]
 8012b62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012b66:	2b00      	cmp	r3, #0
 8012b68:	d109      	bne.n	8012b7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8012b6a:	2301      	movs	r3, #1
 8012b6c:	e06f      	b.n	8012c4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012b6e:	4b3b      	ldr	r3, [pc, #236]	; (8012c5c <HAL_RCC_ClockConfig+0x1bc>)
 8012b70:	681b      	ldr	r3, [r3, #0]
 8012b72:	f003 0302 	and.w	r3, r3, #2
 8012b76:	2b00      	cmp	r3, #0
 8012b78:	d101      	bne.n	8012b7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8012b7a:	2301      	movs	r3, #1
 8012b7c:	e067      	b.n	8012c4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8012b7e:	4b37      	ldr	r3, [pc, #220]	; (8012c5c <HAL_RCC_ClockConfig+0x1bc>)
 8012b80:	689b      	ldr	r3, [r3, #8]
 8012b82:	f023 0203 	bic.w	r2, r3, #3
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	685b      	ldr	r3, [r3, #4]
 8012b8a:	4934      	ldr	r1, [pc, #208]	; (8012c5c <HAL_RCC_ClockConfig+0x1bc>)
 8012b8c:	4313      	orrs	r3, r2
 8012b8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8012b90:	f7fd fd38 	bl	8010604 <HAL_GetTick>
 8012b94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8012b96:	e00a      	b.n	8012bae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012b98:	f7fd fd34 	bl	8010604 <HAL_GetTick>
 8012b9c:	4602      	mov	r2, r0
 8012b9e:	68fb      	ldr	r3, [r7, #12]
 8012ba0:	1ad3      	subs	r3, r2, r3
 8012ba2:	f241 3288 	movw	r2, #5000	; 0x1388
 8012ba6:	4293      	cmp	r3, r2
 8012ba8:	d901      	bls.n	8012bae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8012baa:	2303      	movs	r3, #3
 8012bac:	e04f      	b.n	8012c4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8012bae:	4b2b      	ldr	r3, [pc, #172]	; (8012c5c <HAL_RCC_ClockConfig+0x1bc>)
 8012bb0:	689b      	ldr	r3, [r3, #8]
 8012bb2:	f003 020c 	and.w	r2, r3, #12
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	685b      	ldr	r3, [r3, #4]
 8012bba:	009b      	lsls	r3, r3, #2
 8012bbc:	429a      	cmp	r2, r3
 8012bbe:	d1eb      	bne.n	8012b98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8012bc0:	4b25      	ldr	r3, [pc, #148]	; (8012c58 <HAL_RCC_ClockConfig+0x1b8>)
 8012bc2:	681b      	ldr	r3, [r3, #0]
 8012bc4:	f003 0307 	and.w	r3, r3, #7
 8012bc8:	683a      	ldr	r2, [r7, #0]
 8012bca:	429a      	cmp	r2, r3
 8012bcc:	d20c      	bcs.n	8012be8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8012bce:	4b22      	ldr	r3, [pc, #136]	; (8012c58 <HAL_RCC_ClockConfig+0x1b8>)
 8012bd0:	683a      	ldr	r2, [r7, #0]
 8012bd2:	b2d2      	uxtb	r2, r2
 8012bd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8012bd6:	4b20      	ldr	r3, [pc, #128]	; (8012c58 <HAL_RCC_ClockConfig+0x1b8>)
 8012bd8:	681b      	ldr	r3, [r3, #0]
 8012bda:	f003 0307 	and.w	r3, r3, #7
 8012bde:	683a      	ldr	r2, [r7, #0]
 8012be0:	429a      	cmp	r2, r3
 8012be2:	d001      	beq.n	8012be8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8012be4:	2301      	movs	r3, #1
 8012be6:	e032      	b.n	8012c4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8012be8:	687b      	ldr	r3, [r7, #4]
 8012bea:	681b      	ldr	r3, [r3, #0]
 8012bec:	f003 0304 	and.w	r3, r3, #4
 8012bf0:	2b00      	cmp	r3, #0
 8012bf2:	d008      	beq.n	8012c06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8012bf4:	4b19      	ldr	r3, [pc, #100]	; (8012c5c <HAL_RCC_ClockConfig+0x1bc>)
 8012bf6:	689b      	ldr	r3, [r3, #8]
 8012bf8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	68db      	ldr	r3, [r3, #12]
 8012c00:	4916      	ldr	r1, [pc, #88]	; (8012c5c <HAL_RCC_ClockConfig+0x1bc>)
 8012c02:	4313      	orrs	r3, r2
 8012c04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8012c06:	687b      	ldr	r3, [r7, #4]
 8012c08:	681b      	ldr	r3, [r3, #0]
 8012c0a:	f003 0308 	and.w	r3, r3, #8
 8012c0e:	2b00      	cmp	r3, #0
 8012c10:	d009      	beq.n	8012c26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8012c12:	4b12      	ldr	r3, [pc, #72]	; (8012c5c <HAL_RCC_ClockConfig+0x1bc>)
 8012c14:	689b      	ldr	r3, [r3, #8]
 8012c16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	691b      	ldr	r3, [r3, #16]
 8012c1e:	00db      	lsls	r3, r3, #3
 8012c20:	490e      	ldr	r1, [pc, #56]	; (8012c5c <HAL_RCC_ClockConfig+0x1bc>)
 8012c22:	4313      	orrs	r3, r2
 8012c24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8012c26:	f000 f821 	bl	8012c6c <HAL_RCC_GetSysClockFreq>
 8012c2a:	4602      	mov	r2, r0
 8012c2c:	4b0b      	ldr	r3, [pc, #44]	; (8012c5c <HAL_RCC_ClockConfig+0x1bc>)
 8012c2e:	689b      	ldr	r3, [r3, #8]
 8012c30:	091b      	lsrs	r3, r3, #4
 8012c32:	f003 030f 	and.w	r3, r3, #15
 8012c36:	490a      	ldr	r1, [pc, #40]	; (8012c60 <HAL_RCC_ClockConfig+0x1c0>)
 8012c38:	5ccb      	ldrb	r3, [r1, r3]
 8012c3a:	fa22 f303 	lsr.w	r3, r2, r3
 8012c3e:	4a09      	ldr	r2, [pc, #36]	; (8012c64 <HAL_RCC_ClockConfig+0x1c4>)
 8012c40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8012c42:	4b09      	ldr	r3, [pc, #36]	; (8012c68 <HAL_RCC_ClockConfig+0x1c8>)
 8012c44:	681b      	ldr	r3, [r3, #0]
 8012c46:	4618      	mov	r0, r3
 8012c48:	f7f1 fac6 	bl	80041d8 <HAL_InitTick>

  return HAL_OK;
 8012c4c:	2300      	movs	r3, #0
}
 8012c4e:	4618      	mov	r0, r3
 8012c50:	3710      	adds	r7, #16
 8012c52:	46bd      	mov	sp, r7
 8012c54:	bd80      	pop	{r7, pc}
 8012c56:	bf00      	nop
 8012c58:	40023c00 	.word	0x40023c00
 8012c5c:	40023800 	.word	0x40023800
 8012c60:	0801b0f4 	.word	0x0801b0f4
 8012c64:	20000004 	.word	0x20000004
 8012c68:	200013b8 	.word	0x200013b8

08012c6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8012c6c:	b5b0      	push	{r4, r5, r7, lr}
 8012c6e:	b084      	sub	sp, #16
 8012c70:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8012c72:	2100      	movs	r1, #0
 8012c74:	6079      	str	r1, [r7, #4]
 8012c76:	2100      	movs	r1, #0
 8012c78:	60f9      	str	r1, [r7, #12]
 8012c7a:	2100      	movs	r1, #0
 8012c7c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8012c7e:	2100      	movs	r1, #0
 8012c80:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8012c82:	4952      	ldr	r1, [pc, #328]	; (8012dcc <HAL_RCC_GetSysClockFreq+0x160>)
 8012c84:	6889      	ldr	r1, [r1, #8]
 8012c86:	f001 010c 	and.w	r1, r1, #12
 8012c8a:	2908      	cmp	r1, #8
 8012c8c:	d00d      	beq.n	8012caa <HAL_RCC_GetSysClockFreq+0x3e>
 8012c8e:	2908      	cmp	r1, #8
 8012c90:	f200 8094 	bhi.w	8012dbc <HAL_RCC_GetSysClockFreq+0x150>
 8012c94:	2900      	cmp	r1, #0
 8012c96:	d002      	beq.n	8012c9e <HAL_RCC_GetSysClockFreq+0x32>
 8012c98:	2904      	cmp	r1, #4
 8012c9a:	d003      	beq.n	8012ca4 <HAL_RCC_GetSysClockFreq+0x38>
 8012c9c:	e08e      	b.n	8012dbc <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8012c9e:	4b4c      	ldr	r3, [pc, #304]	; (8012dd0 <HAL_RCC_GetSysClockFreq+0x164>)
 8012ca0:	60bb      	str	r3, [r7, #8]
       break;
 8012ca2:	e08e      	b.n	8012dc2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8012ca4:	4b4b      	ldr	r3, [pc, #300]	; (8012dd4 <HAL_RCC_GetSysClockFreq+0x168>)
 8012ca6:	60bb      	str	r3, [r7, #8]
      break;
 8012ca8:	e08b      	b.n	8012dc2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8012caa:	4948      	ldr	r1, [pc, #288]	; (8012dcc <HAL_RCC_GetSysClockFreq+0x160>)
 8012cac:	6849      	ldr	r1, [r1, #4]
 8012cae:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8012cb2:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8012cb4:	4945      	ldr	r1, [pc, #276]	; (8012dcc <HAL_RCC_GetSysClockFreq+0x160>)
 8012cb6:	6849      	ldr	r1, [r1, #4]
 8012cb8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8012cbc:	2900      	cmp	r1, #0
 8012cbe:	d024      	beq.n	8012d0a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8012cc0:	4942      	ldr	r1, [pc, #264]	; (8012dcc <HAL_RCC_GetSysClockFreq+0x160>)
 8012cc2:	6849      	ldr	r1, [r1, #4]
 8012cc4:	0989      	lsrs	r1, r1, #6
 8012cc6:	4608      	mov	r0, r1
 8012cc8:	f04f 0100 	mov.w	r1, #0
 8012ccc:	f240 14ff 	movw	r4, #511	; 0x1ff
 8012cd0:	f04f 0500 	mov.w	r5, #0
 8012cd4:	ea00 0204 	and.w	r2, r0, r4
 8012cd8:	ea01 0305 	and.w	r3, r1, r5
 8012cdc:	493d      	ldr	r1, [pc, #244]	; (8012dd4 <HAL_RCC_GetSysClockFreq+0x168>)
 8012cde:	fb01 f003 	mul.w	r0, r1, r3
 8012ce2:	2100      	movs	r1, #0
 8012ce4:	fb01 f102 	mul.w	r1, r1, r2
 8012ce8:	1844      	adds	r4, r0, r1
 8012cea:	493a      	ldr	r1, [pc, #232]	; (8012dd4 <HAL_RCC_GetSysClockFreq+0x168>)
 8012cec:	fba2 0101 	umull	r0, r1, r2, r1
 8012cf0:	1863      	adds	r3, r4, r1
 8012cf2:	4619      	mov	r1, r3
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	461a      	mov	r2, r3
 8012cf8:	f04f 0300 	mov.w	r3, #0
 8012cfc:	f7ed ffb6 	bl	8000c6c <__aeabi_uldivmod>
 8012d00:	4602      	mov	r2, r0
 8012d02:	460b      	mov	r3, r1
 8012d04:	4613      	mov	r3, r2
 8012d06:	60fb      	str	r3, [r7, #12]
 8012d08:	e04a      	b.n	8012da0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8012d0a:	4b30      	ldr	r3, [pc, #192]	; (8012dcc <HAL_RCC_GetSysClockFreq+0x160>)
 8012d0c:	685b      	ldr	r3, [r3, #4]
 8012d0e:	099b      	lsrs	r3, r3, #6
 8012d10:	461a      	mov	r2, r3
 8012d12:	f04f 0300 	mov.w	r3, #0
 8012d16:	f240 10ff 	movw	r0, #511	; 0x1ff
 8012d1a:	f04f 0100 	mov.w	r1, #0
 8012d1e:	ea02 0400 	and.w	r4, r2, r0
 8012d22:	ea03 0501 	and.w	r5, r3, r1
 8012d26:	4620      	mov	r0, r4
 8012d28:	4629      	mov	r1, r5
 8012d2a:	f04f 0200 	mov.w	r2, #0
 8012d2e:	f04f 0300 	mov.w	r3, #0
 8012d32:	014b      	lsls	r3, r1, #5
 8012d34:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8012d38:	0142      	lsls	r2, r0, #5
 8012d3a:	4610      	mov	r0, r2
 8012d3c:	4619      	mov	r1, r3
 8012d3e:	1b00      	subs	r0, r0, r4
 8012d40:	eb61 0105 	sbc.w	r1, r1, r5
 8012d44:	f04f 0200 	mov.w	r2, #0
 8012d48:	f04f 0300 	mov.w	r3, #0
 8012d4c:	018b      	lsls	r3, r1, #6
 8012d4e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8012d52:	0182      	lsls	r2, r0, #6
 8012d54:	1a12      	subs	r2, r2, r0
 8012d56:	eb63 0301 	sbc.w	r3, r3, r1
 8012d5a:	f04f 0000 	mov.w	r0, #0
 8012d5e:	f04f 0100 	mov.w	r1, #0
 8012d62:	00d9      	lsls	r1, r3, #3
 8012d64:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8012d68:	00d0      	lsls	r0, r2, #3
 8012d6a:	4602      	mov	r2, r0
 8012d6c:	460b      	mov	r3, r1
 8012d6e:	1912      	adds	r2, r2, r4
 8012d70:	eb45 0303 	adc.w	r3, r5, r3
 8012d74:	f04f 0000 	mov.w	r0, #0
 8012d78:	f04f 0100 	mov.w	r1, #0
 8012d7c:	0299      	lsls	r1, r3, #10
 8012d7e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8012d82:	0290      	lsls	r0, r2, #10
 8012d84:	4602      	mov	r2, r0
 8012d86:	460b      	mov	r3, r1
 8012d88:	4610      	mov	r0, r2
 8012d8a:	4619      	mov	r1, r3
 8012d8c:	687b      	ldr	r3, [r7, #4]
 8012d8e:	461a      	mov	r2, r3
 8012d90:	f04f 0300 	mov.w	r3, #0
 8012d94:	f7ed ff6a 	bl	8000c6c <__aeabi_uldivmod>
 8012d98:	4602      	mov	r2, r0
 8012d9a:	460b      	mov	r3, r1
 8012d9c:	4613      	mov	r3, r2
 8012d9e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8012da0:	4b0a      	ldr	r3, [pc, #40]	; (8012dcc <HAL_RCC_GetSysClockFreq+0x160>)
 8012da2:	685b      	ldr	r3, [r3, #4]
 8012da4:	0c1b      	lsrs	r3, r3, #16
 8012da6:	f003 0303 	and.w	r3, r3, #3
 8012daa:	3301      	adds	r3, #1
 8012dac:	005b      	lsls	r3, r3, #1
 8012dae:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8012db0:	68fa      	ldr	r2, [r7, #12]
 8012db2:	683b      	ldr	r3, [r7, #0]
 8012db4:	fbb2 f3f3 	udiv	r3, r2, r3
 8012db8:	60bb      	str	r3, [r7, #8]
      break;
 8012dba:	e002      	b.n	8012dc2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8012dbc:	4b04      	ldr	r3, [pc, #16]	; (8012dd0 <HAL_RCC_GetSysClockFreq+0x164>)
 8012dbe:	60bb      	str	r3, [r7, #8]
      break;
 8012dc0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8012dc2:	68bb      	ldr	r3, [r7, #8]
}
 8012dc4:	4618      	mov	r0, r3
 8012dc6:	3710      	adds	r7, #16
 8012dc8:	46bd      	mov	sp, r7
 8012dca:	bdb0      	pop	{r4, r5, r7, pc}
 8012dcc:	40023800 	.word	0x40023800
 8012dd0:	00f42400 	.word	0x00f42400
 8012dd4:	017d7840 	.word	0x017d7840

08012dd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8012dd8:	b480      	push	{r7}
 8012dda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8012ddc:	4b03      	ldr	r3, [pc, #12]	; (8012dec <HAL_RCC_GetHCLKFreq+0x14>)
 8012dde:	681b      	ldr	r3, [r3, #0]
}
 8012de0:	4618      	mov	r0, r3
 8012de2:	46bd      	mov	sp, r7
 8012de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012de8:	4770      	bx	lr
 8012dea:	bf00      	nop
 8012dec:	20000004 	.word	0x20000004

08012df0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8012df0:	b580      	push	{r7, lr}
 8012df2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8012df4:	f7ff fff0 	bl	8012dd8 <HAL_RCC_GetHCLKFreq>
 8012df8:	4602      	mov	r2, r0
 8012dfa:	4b05      	ldr	r3, [pc, #20]	; (8012e10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8012dfc:	689b      	ldr	r3, [r3, #8]
 8012dfe:	0a9b      	lsrs	r3, r3, #10
 8012e00:	f003 0307 	and.w	r3, r3, #7
 8012e04:	4903      	ldr	r1, [pc, #12]	; (8012e14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8012e06:	5ccb      	ldrb	r3, [r1, r3]
 8012e08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8012e0c:	4618      	mov	r0, r3
 8012e0e:	bd80      	pop	{r7, pc}
 8012e10:	40023800 	.word	0x40023800
 8012e14:	0801b104 	.word	0x0801b104

08012e18 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8012e18:	b480      	push	{r7}
 8012e1a:	b083      	sub	sp, #12
 8012e1c:	af00      	add	r7, sp, #0
 8012e1e:	6078      	str	r0, [r7, #4]
 8012e20:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8012e22:	687b      	ldr	r3, [r7, #4]
 8012e24:	220f      	movs	r2, #15
 8012e26:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8012e28:	4b12      	ldr	r3, [pc, #72]	; (8012e74 <HAL_RCC_GetClockConfig+0x5c>)
 8012e2a:	689b      	ldr	r3, [r3, #8]
 8012e2c:	f003 0203 	and.w	r2, r3, #3
 8012e30:	687b      	ldr	r3, [r7, #4]
 8012e32:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8012e34:	4b0f      	ldr	r3, [pc, #60]	; (8012e74 <HAL_RCC_GetClockConfig+0x5c>)
 8012e36:	689b      	ldr	r3, [r3, #8]
 8012e38:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8012e3c:	687b      	ldr	r3, [r7, #4]
 8012e3e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8012e40:	4b0c      	ldr	r3, [pc, #48]	; (8012e74 <HAL_RCC_GetClockConfig+0x5c>)
 8012e42:	689b      	ldr	r3, [r3, #8]
 8012e44:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8012e48:	687b      	ldr	r3, [r7, #4]
 8012e4a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8012e4c:	4b09      	ldr	r3, [pc, #36]	; (8012e74 <HAL_RCC_GetClockConfig+0x5c>)
 8012e4e:	689b      	ldr	r3, [r3, #8]
 8012e50:	08db      	lsrs	r3, r3, #3
 8012e52:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8012e56:	687b      	ldr	r3, [r7, #4]
 8012e58:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8012e5a:	4b07      	ldr	r3, [pc, #28]	; (8012e78 <HAL_RCC_GetClockConfig+0x60>)
 8012e5c:	681b      	ldr	r3, [r3, #0]
 8012e5e:	f003 0207 	and.w	r2, r3, #7
 8012e62:	683b      	ldr	r3, [r7, #0]
 8012e64:	601a      	str	r2, [r3, #0]
}
 8012e66:	bf00      	nop
 8012e68:	370c      	adds	r7, #12
 8012e6a:	46bd      	mov	sp, r7
 8012e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e70:	4770      	bx	lr
 8012e72:	bf00      	nop
 8012e74:	40023800 	.word	0x40023800
 8012e78:	40023c00 	.word	0x40023c00

08012e7c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8012e7c:	b580      	push	{r7, lr}
 8012e7e:	b082      	sub	sp, #8
 8012e80:	af00      	add	r7, sp, #0
 8012e82:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8012e84:	687b      	ldr	r3, [r7, #4]
 8012e86:	2b00      	cmp	r3, #0
 8012e88:	d101      	bne.n	8012e8e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8012e8a:	2301      	movs	r3, #1
 8012e8c:	e07b      	b.n	8012f86 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8012e8e:	687b      	ldr	r3, [r7, #4]
 8012e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	d108      	bne.n	8012ea8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8012e96:	687b      	ldr	r3, [r7, #4]
 8012e98:	685b      	ldr	r3, [r3, #4]
 8012e9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8012e9e:	d009      	beq.n	8012eb4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	2200      	movs	r2, #0
 8012ea4:	61da      	str	r2, [r3, #28]
 8012ea6:	e005      	b.n	8012eb4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8012ea8:	687b      	ldr	r3, [r7, #4]
 8012eaa:	2200      	movs	r2, #0
 8012eac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8012eae:	687b      	ldr	r3, [r7, #4]
 8012eb0:	2200      	movs	r2, #0
 8012eb2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8012eb4:	687b      	ldr	r3, [r7, #4]
 8012eb6:	2200      	movs	r2, #0
 8012eb8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8012ec0:	b2db      	uxtb	r3, r3
 8012ec2:	2b00      	cmp	r3, #0
 8012ec4:	d106      	bne.n	8012ed4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	2200      	movs	r2, #0
 8012eca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8012ece:	6878      	ldr	r0, [r7, #4]
 8012ed0:	f7f1 f8ee 	bl	80040b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8012ed4:	687b      	ldr	r3, [r7, #4]
 8012ed6:	2202      	movs	r2, #2
 8012ed8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8012edc:	687b      	ldr	r3, [r7, #4]
 8012ede:	681b      	ldr	r3, [r3, #0]
 8012ee0:	681a      	ldr	r2, [r3, #0]
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	681b      	ldr	r3, [r3, #0]
 8012ee6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8012eea:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8012eec:	687b      	ldr	r3, [r7, #4]
 8012eee:	685b      	ldr	r3, [r3, #4]
 8012ef0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8012ef4:	687b      	ldr	r3, [r7, #4]
 8012ef6:	689b      	ldr	r3, [r3, #8]
 8012ef8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8012efc:	431a      	orrs	r2, r3
 8012efe:	687b      	ldr	r3, [r7, #4]
 8012f00:	68db      	ldr	r3, [r3, #12]
 8012f02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012f06:	431a      	orrs	r2, r3
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	691b      	ldr	r3, [r3, #16]
 8012f0c:	f003 0302 	and.w	r3, r3, #2
 8012f10:	431a      	orrs	r2, r3
 8012f12:	687b      	ldr	r3, [r7, #4]
 8012f14:	695b      	ldr	r3, [r3, #20]
 8012f16:	f003 0301 	and.w	r3, r3, #1
 8012f1a:	431a      	orrs	r2, r3
 8012f1c:	687b      	ldr	r3, [r7, #4]
 8012f1e:	699b      	ldr	r3, [r3, #24]
 8012f20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8012f24:	431a      	orrs	r2, r3
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	69db      	ldr	r3, [r3, #28]
 8012f2a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8012f2e:	431a      	orrs	r2, r3
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	6a1b      	ldr	r3, [r3, #32]
 8012f34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012f38:	ea42 0103 	orr.w	r1, r2, r3
 8012f3c:	687b      	ldr	r3, [r7, #4]
 8012f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012f40:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8012f44:	687b      	ldr	r3, [r7, #4]
 8012f46:	681b      	ldr	r3, [r3, #0]
 8012f48:	430a      	orrs	r2, r1
 8012f4a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	699b      	ldr	r3, [r3, #24]
 8012f50:	0c1b      	lsrs	r3, r3, #16
 8012f52:	f003 0104 	and.w	r1, r3, #4
 8012f56:	687b      	ldr	r3, [r7, #4]
 8012f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f5a:	f003 0210 	and.w	r2, r3, #16
 8012f5e:	687b      	ldr	r3, [r7, #4]
 8012f60:	681b      	ldr	r3, [r3, #0]
 8012f62:	430a      	orrs	r2, r1
 8012f64:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8012f66:	687b      	ldr	r3, [r7, #4]
 8012f68:	681b      	ldr	r3, [r3, #0]
 8012f6a:	69da      	ldr	r2, [r3, #28]
 8012f6c:	687b      	ldr	r3, [r7, #4]
 8012f6e:	681b      	ldr	r3, [r3, #0]
 8012f70:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8012f74:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	2200      	movs	r2, #0
 8012f7a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8012f7c:	687b      	ldr	r3, [r7, #4]
 8012f7e:	2201      	movs	r2, #1
 8012f80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8012f84:	2300      	movs	r3, #0
}
 8012f86:	4618      	mov	r0, r3
 8012f88:	3708      	adds	r7, #8
 8012f8a:	46bd      	mov	sp, r7
 8012f8c:	bd80      	pop	{r7, pc}

08012f8e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8012f8e:	b580      	push	{r7, lr}
 8012f90:	b088      	sub	sp, #32
 8012f92:	af00      	add	r7, sp, #0
 8012f94:	60f8      	str	r0, [r7, #12]
 8012f96:	60b9      	str	r1, [r7, #8]
 8012f98:	603b      	str	r3, [r7, #0]
 8012f9a:	4613      	mov	r3, r2
 8012f9c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8012f9e:	2300      	movs	r3, #0
 8012fa0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8012fa2:	68fb      	ldr	r3, [r7, #12]
 8012fa4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8012fa8:	2b01      	cmp	r3, #1
 8012faa:	d101      	bne.n	8012fb0 <HAL_SPI_Transmit+0x22>
 8012fac:	2302      	movs	r3, #2
 8012fae:	e126      	b.n	80131fe <HAL_SPI_Transmit+0x270>
 8012fb0:	68fb      	ldr	r3, [r7, #12]
 8012fb2:	2201      	movs	r2, #1
 8012fb4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8012fb8:	f7fd fb24 	bl	8010604 <HAL_GetTick>
 8012fbc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8012fbe:	88fb      	ldrh	r3, [r7, #6]
 8012fc0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8012fc2:	68fb      	ldr	r3, [r7, #12]
 8012fc4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8012fc8:	b2db      	uxtb	r3, r3
 8012fca:	2b01      	cmp	r3, #1
 8012fcc:	d002      	beq.n	8012fd4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8012fce:	2302      	movs	r3, #2
 8012fd0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8012fd2:	e10b      	b.n	80131ec <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8012fd4:	68bb      	ldr	r3, [r7, #8]
 8012fd6:	2b00      	cmp	r3, #0
 8012fd8:	d002      	beq.n	8012fe0 <HAL_SPI_Transmit+0x52>
 8012fda:	88fb      	ldrh	r3, [r7, #6]
 8012fdc:	2b00      	cmp	r3, #0
 8012fde:	d102      	bne.n	8012fe6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8012fe0:	2301      	movs	r3, #1
 8012fe2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8012fe4:	e102      	b.n	80131ec <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8012fe6:	68fb      	ldr	r3, [r7, #12]
 8012fe8:	2203      	movs	r2, #3
 8012fea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8012fee:	68fb      	ldr	r3, [r7, #12]
 8012ff0:	2200      	movs	r2, #0
 8012ff2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8012ff4:	68fb      	ldr	r3, [r7, #12]
 8012ff6:	68ba      	ldr	r2, [r7, #8]
 8012ff8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8012ffa:	68fb      	ldr	r3, [r7, #12]
 8012ffc:	88fa      	ldrh	r2, [r7, #6]
 8012ffe:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8013000:	68fb      	ldr	r3, [r7, #12]
 8013002:	88fa      	ldrh	r2, [r7, #6]
 8013004:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8013006:	68fb      	ldr	r3, [r7, #12]
 8013008:	2200      	movs	r2, #0
 801300a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 801300c:	68fb      	ldr	r3, [r7, #12]
 801300e:	2200      	movs	r2, #0
 8013010:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8013012:	68fb      	ldr	r3, [r7, #12]
 8013014:	2200      	movs	r2, #0
 8013016:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8013018:	68fb      	ldr	r3, [r7, #12]
 801301a:	2200      	movs	r2, #0
 801301c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 801301e:	68fb      	ldr	r3, [r7, #12]
 8013020:	2200      	movs	r2, #0
 8013022:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8013024:	68fb      	ldr	r3, [r7, #12]
 8013026:	689b      	ldr	r3, [r3, #8]
 8013028:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801302c:	d10f      	bne.n	801304e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801302e:	68fb      	ldr	r3, [r7, #12]
 8013030:	681b      	ldr	r3, [r3, #0]
 8013032:	681a      	ldr	r2, [r3, #0]
 8013034:	68fb      	ldr	r3, [r7, #12]
 8013036:	681b      	ldr	r3, [r3, #0]
 8013038:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801303c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 801303e:	68fb      	ldr	r3, [r7, #12]
 8013040:	681b      	ldr	r3, [r3, #0]
 8013042:	681a      	ldr	r2, [r3, #0]
 8013044:	68fb      	ldr	r3, [r7, #12]
 8013046:	681b      	ldr	r3, [r3, #0]
 8013048:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801304c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801304e:	68fb      	ldr	r3, [r7, #12]
 8013050:	681b      	ldr	r3, [r3, #0]
 8013052:	681b      	ldr	r3, [r3, #0]
 8013054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013058:	2b40      	cmp	r3, #64	; 0x40
 801305a:	d007      	beq.n	801306c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801305c:	68fb      	ldr	r3, [r7, #12]
 801305e:	681b      	ldr	r3, [r3, #0]
 8013060:	681a      	ldr	r2, [r3, #0]
 8013062:	68fb      	ldr	r3, [r7, #12]
 8013064:	681b      	ldr	r3, [r3, #0]
 8013066:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801306a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 801306c:	68fb      	ldr	r3, [r7, #12]
 801306e:	68db      	ldr	r3, [r3, #12]
 8013070:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013074:	d14b      	bne.n	801310e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8013076:	68fb      	ldr	r3, [r7, #12]
 8013078:	685b      	ldr	r3, [r3, #4]
 801307a:	2b00      	cmp	r3, #0
 801307c:	d002      	beq.n	8013084 <HAL_SPI_Transmit+0xf6>
 801307e:	8afb      	ldrh	r3, [r7, #22]
 8013080:	2b01      	cmp	r3, #1
 8013082:	d13e      	bne.n	8013102 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8013084:	68fb      	ldr	r3, [r7, #12]
 8013086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013088:	881a      	ldrh	r2, [r3, #0]
 801308a:	68fb      	ldr	r3, [r7, #12]
 801308c:	681b      	ldr	r3, [r3, #0]
 801308e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8013090:	68fb      	ldr	r3, [r7, #12]
 8013092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013094:	1c9a      	adds	r2, r3, #2
 8013096:	68fb      	ldr	r3, [r7, #12]
 8013098:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 801309a:	68fb      	ldr	r3, [r7, #12]
 801309c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801309e:	b29b      	uxth	r3, r3
 80130a0:	3b01      	subs	r3, #1
 80130a2:	b29a      	uxth	r2, r3
 80130a4:	68fb      	ldr	r3, [r7, #12]
 80130a6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80130a8:	e02b      	b.n	8013102 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80130aa:	68fb      	ldr	r3, [r7, #12]
 80130ac:	681b      	ldr	r3, [r3, #0]
 80130ae:	689b      	ldr	r3, [r3, #8]
 80130b0:	f003 0302 	and.w	r3, r3, #2
 80130b4:	2b02      	cmp	r3, #2
 80130b6:	d112      	bne.n	80130de <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80130b8:	68fb      	ldr	r3, [r7, #12]
 80130ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80130bc:	881a      	ldrh	r2, [r3, #0]
 80130be:	68fb      	ldr	r3, [r7, #12]
 80130c0:	681b      	ldr	r3, [r3, #0]
 80130c2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80130c4:	68fb      	ldr	r3, [r7, #12]
 80130c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80130c8:	1c9a      	adds	r2, r3, #2
 80130ca:	68fb      	ldr	r3, [r7, #12]
 80130cc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80130ce:	68fb      	ldr	r3, [r7, #12]
 80130d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80130d2:	b29b      	uxth	r3, r3
 80130d4:	3b01      	subs	r3, #1
 80130d6:	b29a      	uxth	r2, r3
 80130d8:	68fb      	ldr	r3, [r7, #12]
 80130da:	86da      	strh	r2, [r3, #54]	; 0x36
 80130dc:	e011      	b.n	8013102 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80130de:	f7fd fa91 	bl	8010604 <HAL_GetTick>
 80130e2:	4602      	mov	r2, r0
 80130e4:	69bb      	ldr	r3, [r7, #24]
 80130e6:	1ad3      	subs	r3, r2, r3
 80130e8:	683a      	ldr	r2, [r7, #0]
 80130ea:	429a      	cmp	r2, r3
 80130ec:	d803      	bhi.n	80130f6 <HAL_SPI_Transmit+0x168>
 80130ee:	683b      	ldr	r3, [r7, #0]
 80130f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80130f4:	d102      	bne.n	80130fc <HAL_SPI_Transmit+0x16e>
 80130f6:	683b      	ldr	r3, [r7, #0]
 80130f8:	2b00      	cmp	r3, #0
 80130fa:	d102      	bne.n	8013102 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80130fc:	2303      	movs	r3, #3
 80130fe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8013100:	e074      	b.n	80131ec <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8013102:	68fb      	ldr	r3, [r7, #12]
 8013104:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013106:	b29b      	uxth	r3, r3
 8013108:	2b00      	cmp	r3, #0
 801310a:	d1ce      	bne.n	80130aa <HAL_SPI_Transmit+0x11c>
 801310c:	e04c      	b.n	80131a8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801310e:	68fb      	ldr	r3, [r7, #12]
 8013110:	685b      	ldr	r3, [r3, #4]
 8013112:	2b00      	cmp	r3, #0
 8013114:	d002      	beq.n	801311c <HAL_SPI_Transmit+0x18e>
 8013116:	8afb      	ldrh	r3, [r7, #22]
 8013118:	2b01      	cmp	r3, #1
 801311a:	d140      	bne.n	801319e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801311c:	68fb      	ldr	r3, [r7, #12]
 801311e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013120:	68fb      	ldr	r3, [r7, #12]
 8013122:	681b      	ldr	r3, [r3, #0]
 8013124:	330c      	adds	r3, #12
 8013126:	7812      	ldrb	r2, [r2, #0]
 8013128:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 801312a:	68fb      	ldr	r3, [r7, #12]
 801312c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801312e:	1c5a      	adds	r2, r3, #1
 8013130:	68fb      	ldr	r3, [r7, #12]
 8013132:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8013134:	68fb      	ldr	r3, [r7, #12]
 8013136:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013138:	b29b      	uxth	r3, r3
 801313a:	3b01      	subs	r3, #1
 801313c:	b29a      	uxth	r2, r3
 801313e:	68fb      	ldr	r3, [r7, #12]
 8013140:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8013142:	e02c      	b.n	801319e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8013144:	68fb      	ldr	r3, [r7, #12]
 8013146:	681b      	ldr	r3, [r3, #0]
 8013148:	689b      	ldr	r3, [r3, #8]
 801314a:	f003 0302 	and.w	r3, r3, #2
 801314e:	2b02      	cmp	r3, #2
 8013150:	d113      	bne.n	801317a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8013152:	68fb      	ldr	r3, [r7, #12]
 8013154:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013156:	68fb      	ldr	r3, [r7, #12]
 8013158:	681b      	ldr	r3, [r3, #0]
 801315a:	330c      	adds	r3, #12
 801315c:	7812      	ldrb	r2, [r2, #0]
 801315e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8013160:	68fb      	ldr	r3, [r7, #12]
 8013162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013164:	1c5a      	adds	r2, r3, #1
 8013166:	68fb      	ldr	r3, [r7, #12]
 8013168:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 801316a:	68fb      	ldr	r3, [r7, #12]
 801316c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801316e:	b29b      	uxth	r3, r3
 8013170:	3b01      	subs	r3, #1
 8013172:	b29a      	uxth	r2, r3
 8013174:	68fb      	ldr	r3, [r7, #12]
 8013176:	86da      	strh	r2, [r3, #54]	; 0x36
 8013178:	e011      	b.n	801319e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801317a:	f7fd fa43 	bl	8010604 <HAL_GetTick>
 801317e:	4602      	mov	r2, r0
 8013180:	69bb      	ldr	r3, [r7, #24]
 8013182:	1ad3      	subs	r3, r2, r3
 8013184:	683a      	ldr	r2, [r7, #0]
 8013186:	429a      	cmp	r2, r3
 8013188:	d803      	bhi.n	8013192 <HAL_SPI_Transmit+0x204>
 801318a:	683b      	ldr	r3, [r7, #0]
 801318c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013190:	d102      	bne.n	8013198 <HAL_SPI_Transmit+0x20a>
 8013192:	683b      	ldr	r3, [r7, #0]
 8013194:	2b00      	cmp	r3, #0
 8013196:	d102      	bne.n	801319e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8013198:	2303      	movs	r3, #3
 801319a:	77fb      	strb	r3, [r7, #31]
          goto error;
 801319c:	e026      	b.n	80131ec <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 801319e:	68fb      	ldr	r3, [r7, #12]
 80131a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80131a2:	b29b      	uxth	r3, r3
 80131a4:	2b00      	cmp	r3, #0
 80131a6:	d1cd      	bne.n	8013144 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80131a8:	69ba      	ldr	r2, [r7, #24]
 80131aa:	6839      	ldr	r1, [r7, #0]
 80131ac:	68f8      	ldr	r0, [r7, #12]
 80131ae:	f000 fbcb 	bl	8013948 <SPI_EndRxTxTransaction>
 80131b2:	4603      	mov	r3, r0
 80131b4:	2b00      	cmp	r3, #0
 80131b6:	d002      	beq.n	80131be <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80131b8:	68fb      	ldr	r3, [r7, #12]
 80131ba:	2220      	movs	r2, #32
 80131bc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80131be:	68fb      	ldr	r3, [r7, #12]
 80131c0:	689b      	ldr	r3, [r3, #8]
 80131c2:	2b00      	cmp	r3, #0
 80131c4:	d10a      	bne.n	80131dc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80131c6:	2300      	movs	r3, #0
 80131c8:	613b      	str	r3, [r7, #16]
 80131ca:	68fb      	ldr	r3, [r7, #12]
 80131cc:	681b      	ldr	r3, [r3, #0]
 80131ce:	68db      	ldr	r3, [r3, #12]
 80131d0:	613b      	str	r3, [r7, #16]
 80131d2:	68fb      	ldr	r3, [r7, #12]
 80131d4:	681b      	ldr	r3, [r3, #0]
 80131d6:	689b      	ldr	r3, [r3, #8]
 80131d8:	613b      	str	r3, [r7, #16]
 80131da:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80131dc:	68fb      	ldr	r3, [r7, #12]
 80131de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80131e0:	2b00      	cmp	r3, #0
 80131e2:	d002      	beq.n	80131ea <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80131e4:	2301      	movs	r3, #1
 80131e6:	77fb      	strb	r3, [r7, #31]
 80131e8:	e000      	b.n	80131ec <HAL_SPI_Transmit+0x25e>
  }

error:
 80131ea:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80131ec:	68fb      	ldr	r3, [r7, #12]
 80131ee:	2201      	movs	r2, #1
 80131f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80131f4:	68fb      	ldr	r3, [r7, #12]
 80131f6:	2200      	movs	r2, #0
 80131f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80131fc:	7ffb      	ldrb	r3, [r7, #31]
}
 80131fe:	4618      	mov	r0, r3
 8013200:	3720      	adds	r7, #32
 8013202:	46bd      	mov	sp, r7
 8013204:	bd80      	pop	{r7, pc}

08013206 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8013206:	b580      	push	{r7, lr}
 8013208:	b088      	sub	sp, #32
 801320a:	af02      	add	r7, sp, #8
 801320c:	60f8      	str	r0, [r7, #12]
 801320e:	60b9      	str	r1, [r7, #8]
 8013210:	603b      	str	r3, [r7, #0]
 8013212:	4613      	mov	r3, r2
 8013214:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8013216:	2300      	movs	r3, #0
 8013218:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 801321a:	68fb      	ldr	r3, [r7, #12]
 801321c:	685b      	ldr	r3, [r3, #4]
 801321e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013222:	d112      	bne.n	801324a <HAL_SPI_Receive+0x44>
 8013224:	68fb      	ldr	r3, [r7, #12]
 8013226:	689b      	ldr	r3, [r3, #8]
 8013228:	2b00      	cmp	r3, #0
 801322a:	d10e      	bne.n	801324a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 801322c:	68fb      	ldr	r3, [r7, #12]
 801322e:	2204      	movs	r2, #4
 8013230:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8013234:	88fa      	ldrh	r2, [r7, #6]
 8013236:	683b      	ldr	r3, [r7, #0]
 8013238:	9300      	str	r3, [sp, #0]
 801323a:	4613      	mov	r3, r2
 801323c:	68ba      	ldr	r2, [r7, #8]
 801323e:	68b9      	ldr	r1, [r7, #8]
 8013240:	68f8      	ldr	r0, [r7, #12]
 8013242:	f000 f8f1 	bl	8013428 <HAL_SPI_TransmitReceive>
 8013246:	4603      	mov	r3, r0
 8013248:	e0ea      	b.n	8013420 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 801324a:	68fb      	ldr	r3, [r7, #12]
 801324c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8013250:	2b01      	cmp	r3, #1
 8013252:	d101      	bne.n	8013258 <HAL_SPI_Receive+0x52>
 8013254:	2302      	movs	r3, #2
 8013256:	e0e3      	b.n	8013420 <HAL_SPI_Receive+0x21a>
 8013258:	68fb      	ldr	r3, [r7, #12]
 801325a:	2201      	movs	r2, #1
 801325c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8013260:	f7fd f9d0 	bl	8010604 <HAL_GetTick>
 8013264:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8013266:	68fb      	ldr	r3, [r7, #12]
 8013268:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801326c:	b2db      	uxtb	r3, r3
 801326e:	2b01      	cmp	r3, #1
 8013270:	d002      	beq.n	8013278 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8013272:	2302      	movs	r3, #2
 8013274:	75fb      	strb	r3, [r7, #23]
    goto error;
 8013276:	e0ca      	b.n	801340e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8013278:	68bb      	ldr	r3, [r7, #8]
 801327a:	2b00      	cmp	r3, #0
 801327c:	d002      	beq.n	8013284 <HAL_SPI_Receive+0x7e>
 801327e:	88fb      	ldrh	r3, [r7, #6]
 8013280:	2b00      	cmp	r3, #0
 8013282:	d102      	bne.n	801328a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8013284:	2301      	movs	r3, #1
 8013286:	75fb      	strb	r3, [r7, #23]
    goto error;
 8013288:	e0c1      	b.n	801340e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 801328a:	68fb      	ldr	r3, [r7, #12]
 801328c:	2204      	movs	r2, #4
 801328e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8013292:	68fb      	ldr	r3, [r7, #12]
 8013294:	2200      	movs	r2, #0
 8013296:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8013298:	68fb      	ldr	r3, [r7, #12]
 801329a:	68ba      	ldr	r2, [r7, #8]
 801329c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 801329e:	68fb      	ldr	r3, [r7, #12]
 80132a0:	88fa      	ldrh	r2, [r7, #6]
 80132a2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80132a4:	68fb      	ldr	r3, [r7, #12]
 80132a6:	88fa      	ldrh	r2, [r7, #6]
 80132a8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80132aa:	68fb      	ldr	r3, [r7, #12]
 80132ac:	2200      	movs	r2, #0
 80132ae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80132b0:	68fb      	ldr	r3, [r7, #12]
 80132b2:	2200      	movs	r2, #0
 80132b4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80132b6:	68fb      	ldr	r3, [r7, #12]
 80132b8:	2200      	movs	r2, #0
 80132ba:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80132bc:	68fb      	ldr	r3, [r7, #12]
 80132be:	2200      	movs	r2, #0
 80132c0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80132c2:	68fb      	ldr	r3, [r7, #12]
 80132c4:	2200      	movs	r2, #0
 80132c6:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80132c8:	68fb      	ldr	r3, [r7, #12]
 80132ca:	689b      	ldr	r3, [r3, #8]
 80132cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80132d0:	d10f      	bne.n	80132f2 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80132d2:	68fb      	ldr	r3, [r7, #12]
 80132d4:	681b      	ldr	r3, [r3, #0]
 80132d6:	681a      	ldr	r2, [r3, #0]
 80132d8:	68fb      	ldr	r3, [r7, #12]
 80132da:	681b      	ldr	r3, [r3, #0]
 80132dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80132e0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80132e2:	68fb      	ldr	r3, [r7, #12]
 80132e4:	681b      	ldr	r3, [r3, #0]
 80132e6:	681a      	ldr	r2, [r3, #0]
 80132e8:	68fb      	ldr	r3, [r7, #12]
 80132ea:	681b      	ldr	r3, [r3, #0]
 80132ec:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80132f0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80132f2:	68fb      	ldr	r3, [r7, #12]
 80132f4:	681b      	ldr	r3, [r3, #0]
 80132f6:	681b      	ldr	r3, [r3, #0]
 80132f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80132fc:	2b40      	cmp	r3, #64	; 0x40
 80132fe:	d007      	beq.n	8013310 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8013300:	68fb      	ldr	r3, [r7, #12]
 8013302:	681b      	ldr	r3, [r3, #0]
 8013304:	681a      	ldr	r2, [r3, #0]
 8013306:	68fb      	ldr	r3, [r7, #12]
 8013308:	681b      	ldr	r3, [r3, #0]
 801330a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801330e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8013310:	68fb      	ldr	r3, [r7, #12]
 8013312:	68db      	ldr	r3, [r3, #12]
 8013314:	2b00      	cmp	r3, #0
 8013316:	d162      	bne.n	80133de <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8013318:	e02e      	b.n	8013378 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801331a:	68fb      	ldr	r3, [r7, #12]
 801331c:	681b      	ldr	r3, [r3, #0]
 801331e:	689b      	ldr	r3, [r3, #8]
 8013320:	f003 0301 	and.w	r3, r3, #1
 8013324:	2b01      	cmp	r3, #1
 8013326:	d115      	bne.n	8013354 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8013328:	68fb      	ldr	r3, [r7, #12]
 801332a:	681b      	ldr	r3, [r3, #0]
 801332c:	f103 020c 	add.w	r2, r3, #12
 8013330:	68fb      	ldr	r3, [r7, #12]
 8013332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013334:	7812      	ldrb	r2, [r2, #0]
 8013336:	b2d2      	uxtb	r2, r2
 8013338:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 801333a:	68fb      	ldr	r3, [r7, #12]
 801333c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801333e:	1c5a      	adds	r2, r3, #1
 8013340:	68fb      	ldr	r3, [r7, #12]
 8013342:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8013344:	68fb      	ldr	r3, [r7, #12]
 8013346:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013348:	b29b      	uxth	r3, r3
 801334a:	3b01      	subs	r3, #1
 801334c:	b29a      	uxth	r2, r3
 801334e:	68fb      	ldr	r3, [r7, #12]
 8013350:	87da      	strh	r2, [r3, #62]	; 0x3e
 8013352:	e011      	b.n	8013378 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8013354:	f7fd f956 	bl	8010604 <HAL_GetTick>
 8013358:	4602      	mov	r2, r0
 801335a:	693b      	ldr	r3, [r7, #16]
 801335c:	1ad3      	subs	r3, r2, r3
 801335e:	683a      	ldr	r2, [r7, #0]
 8013360:	429a      	cmp	r2, r3
 8013362:	d803      	bhi.n	801336c <HAL_SPI_Receive+0x166>
 8013364:	683b      	ldr	r3, [r7, #0]
 8013366:	f1b3 3fff 	cmp.w	r3, #4294967295
 801336a:	d102      	bne.n	8013372 <HAL_SPI_Receive+0x16c>
 801336c:	683b      	ldr	r3, [r7, #0]
 801336e:	2b00      	cmp	r3, #0
 8013370:	d102      	bne.n	8013378 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8013372:	2303      	movs	r3, #3
 8013374:	75fb      	strb	r3, [r7, #23]
          goto error;
 8013376:	e04a      	b.n	801340e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8013378:	68fb      	ldr	r3, [r7, #12]
 801337a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801337c:	b29b      	uxth	r3, r3
 801337e:	2b00      	cmp	r3, #0
 8013380:	d1cb      	bne.n	801331a <HAL_SPI_Receive+0x114>
 8013382:	e031      	b.n	80133e8 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8013384:	68fb      	ldr	r3, [r7, #12]
 8013386:	681b      	ldr	r3, [r3, #0]
 8013388:	689b      	ldr	r3, [r3, #8]
 801338a:	f003 0301 	and.w	r3, r3, #1
 801338e:	2b01      	cmp	r3, #1
 8013390:	d113      	bne.n	80133ba <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8013392:	68fb      	ldr	r3, [r7, #12]
 8013394:	681b      	ldr	r3, [r3, #0]
 8013396:	68da      	ldr	r2, [r3, #12]
 8013398:	68fb      	ldr	r3, [r7, #12]
 801339a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801339c:	b292      	uxth	r2, r2
 801339e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80133a0:	68fb      	ldr	r3, [r7, #12]
 80133a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80133a4:	1c9a      	adds	r2, r3, #2
 80133a6:	68fb      	ldr	r3, [r7, #12]
 80133a8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80133aa:	68fb      	ldr	r3, [r7, #12]
 80133ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80133ae:	b29b      	uxth	r3, r3
 80133b0:	3b01      	subs	r3, #1
 80133b2:	b29a      	uxth	r2, r3
 80133b4:	68fb      	ldr	r3, [r7, #12]
 80133b6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80133b8:	e011      	b.n	80133de <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80133ba:	f7fd f923 	bl	8010604 <HAL_GetTick>
 80133be:	4602      	mov	r2, r0
 80133c0:	693b      	ldr	r3, [r7, #16]
 80133c2:	1ad3      	subs	r3, r2, r3
 80133c4:	683a      	ldr	r2, [r7, #0]
 80133c6:	429a      	cmp	r2, r3
 80133c8:	d803      	bhi.n	80133d2 <HAL_SPI_Receive+0x1cc>
 80133ca:	683b      	ldr	r3, [r7, #0]
 80133cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80133d0:	d102      	bne.n	80133d8 <HAL_SPI_Receive+0x1d2>
 80133d2:	683b      	ldr	r3, [r7, #0]
 80133d4:	2b00      	cmp	r3, #0
 80133d6:	d102      	bne.n	80133de <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80133d8:	2303      	movs	r3, #3
 80133da:	75fb      	strb	r3, [r7, #23]
          goto error;
 80133dc:	e017      	b.n	801340e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80133de:	68fb      	ldr	r3, [r7, #12]
 80133e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80133e2:	b29b      	uxth	r3, r3
 80133e4:	2b00      	cmp	r3, #0
 80133e6:	d1cd      	bne.n	8013384 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80133e8:	693a      	ldr	r2, [r7, #16]
 80133ea:	6839      	ldr	r1, [r7, #0]
 80133ec:	68f8      	ldr	r0, [r7, #12]
 80133ee:	f000 fa45 	bl	801387c <SPI_EndRxTransaction>
 80133f2:	4603      	mov	r3, r0
 80133f4:	2b00      	cmp	r3, #0
 80133f6:	d002      	beq.n	80133fe <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80133f8:	68fb      	ldr	r3, [r7, #12]
 80133fa:	2220      	movs	r2, #32
 80133fc:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80133fe:	68fb      	ldr	r3, [r7, #12]
 8013400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013402:	2b00      	cmp	r3, #0
 8013404:	d002      	beq.n	801340c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8013406:	2301      	movs	r3, #1
 8013408:	75fb      	strb	r3, [r7, #23]
 801340a:	e000      	b.n	801340e <HAL_SPI_Receive+0x208>
  }

error :
 801340c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801340e:	68fb      	ldr	r3, [r7, #12]
 8013410:	2201      	movs	r2, #1
 8013412:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8013416:	68fb      	ldr	r3, [r7, #12]
 8013418:	2200      	movs	r2, #0
 801341a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 801341e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013420:	4618      	mov	r0, r3
 8013422:	3718      	adds	r7, #24
 8013424:	46bd      	mov	sp, r7
 8013426:	bd80      	pop	{r7, pc}

08013428 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8013428:	b580      	push	{r7, lr}
 801342a:	b08c      	sub	sp, #48	; 0x30
 801342c:	af00      	add	r7, sp, #0
 801342e:	60f8      	str	r0, [r7, #12]
 8013430:	60b9      	str	r1, [r7, #8]
 8013432:	607a      	str	r2, [r7, #4]
 8013434:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8013436:	2301      	movs	r3, #1
 8013438:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 801343a:	2300      	movs	r3, #0
 801343c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8013440:	68fb      	ldr	r3, [r7, #12]
 8013442:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8013446:	2b01      	cmp	r3, #1
 8013448:	d101      	bne.n	801344e <HAL_SPI_TransmitReceive+0x26>
 801344a:	2302      	movs	r3, #2
 801344c:	e18a      	b.n	8013764 <HAL_SPI_TransmitReceive+0x33c>
 801344e:	68fb      	ldr	r3, [r7, #12]
 8013450:	2201      	movs	r2, #1
 8013452:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8013456:	f7fd f8d5 	bl	8010604 <HAL_GetTick>
 801345a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 801345c:	68fb      	ldr	r3, [r7, #12]
 801345e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013462:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8013466:	68fb      	ldr	r3, [r7, #12]
 8013468:	685b      	ldr	r3, [r3, #4]
 801346a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 801346c:	887b      	ldrh	r3, [r7, #2]
 801346e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8013470:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013474:	2b01      	cmp	r3, #1
 8013476:	d00f      	beq.n	8013498 <HAL_SPI_TransmitReceive+0x70>
 8013478:	69fb      	ldr	r3, [r7, #28]
 801347a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801347e:	d107      	bne.n	8013490 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8013480:	68fb      	ldr	r3, [r7, #12]
 8013482:	689b      	ldr	r3, [r3, #8]
 8013484:	2b00      	cmp	r3, #0
 8013486:	d103      	bne.n	8013490 <HAL_SPI_TransmitReceive+0x68>
 8013488:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801348c:	2b04      	cmp	r3, #4
 801348e:	d003      	beq.n	8013498 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8013490:	2302      	movs	r3, #2
 8013492:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8013496:	e15b      	b.n	8013750 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8013498:	68bb      	ldr	r3, [r7, #8]
 801349a:	2b00      	cmp	r3, #0
 801349c:	d005      	beq.n	80134aa <HAL_SPI_TransmitReceive+0x82>
 801349e:	687b      	ldr	r3, [r7, #4]
 80134a0:	2b00      	cmp	r3, #0
 80134a2:	d002      	beq.n	80134aa <HAL_SPI_TransmitReceive+0x82>
 80134a4:	887b      	ldrh	r3, [r7, #2]
 80134a6:	2b00      	cmp	r3, #0
 80134a8:	d103      	bne.n	80134b2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80134aa:	2301      	movs	r3, #1
 80134ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80134b0:	e14e      	b.n	8013750 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80134b2:	68fb      	ldr	r3, [r7, #12]
 80134b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80134b8:	b2db      	uxtb	r3, r3
 80134ba:	2b04      	cmp	r3, #4
 80134bc:	d003      	beq.n	80134c6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80134be:	68fb      	ldr	r3, [r7, #12]
 80134c0:	2205      	movs	r2, #5
 80134c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80134c6:	68fb      	ldr	r3, [r7, #12]
 80134c8:	2200      	movs	r2, #0
 80134ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80134cc:	68fb      	ldr	r3, [r7, #12]
 80134ce:	687a      	ldr	r2, [r7, #4]
 80134d0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80134d2:	68fb      	ldr	r3, [r7, #12]
 80134d4:	887a      	ldrh	r2, [r7, #2]
 80134d6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80134d8:	68fb      	ldr	r3, [r7, #12]
 80134da:	887a      	ldrh	r2, [r7, #2]
 80134dc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80134de:	68fb      	ldr	r3, [r7, #12]
 80134e0:	68ba      	ldr	r2, [r7, #8]
 80134e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80134e4:	68fb      	ldr	r3, [r7, #12]
 80134e6:	887a      	ldrh	r2, [r7, #2]
 80134e8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80134ea:	68fb      	ldr	r3, [r7, #12]
 80134ec:	887a      	ldrh	r2, [r7, #2]
 80134ee:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80134f0:	68fb      	ldr	r3, [r7, #12]
 80134f2:	2200      	movs	r2, #0
 80134f4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80134f6:	68fb      	ldr	r3, [r7, #12]
 80134f8:	2200      	movs	r2, #0
 80134fa:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80134fc:	68fb      	ldr	r3, [r7, #12]
 80134fe:	681b      	ldr	r3, [r3, #0]
 8013500:	681b      	ldr	r3, [r3, #0]
 8013502:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013506:	2b40      	cmp	r3, #64	; 0x40
 8013508:	d007      	beq.n	801351a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801350a:	68fb      	ldr	r3, [r7, #12]
 801350c:	681b      	ldr	r3, [r3, #0]
 801350e:	681a      	ldr	r2, [r3, #0]
 8013510:	68fb      	ldr	r3, [r7, #12]
 8013512:	681b      	ldr	r3, [r3, #0]
 8013514:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013518:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 801351a:	68fb      	ldr	r3, [r7, #12]
 801351c:	68db      	ldr	r3, [r3, #12]
 801351e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013522:	d178      	bne.n	8013616 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8013524:	68fb      	ldr	r3, [r7, #12]
 8013526:	685b      	ldr	r3, [r3, #4]
 8013528:	2b00      	cmp	r3, #0
 801352a:	d002      	beq.n	8013532 <HAL_SPI_TransmitReceive+0x10a>
 801352c:	8b7b      	ldrh	r3, [r7, #26]
 801352e:	2b01      	cmp	r3, #1
 8013530:	d166      	bne.n	8013600 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8013532:	68fb      	ldr	r3, [r7, #12]
 8013534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013536:	881a      	ldrh	r2, [r3, #0]
 8013538:	68fb      	ldr	r3, [r7, #12]
 801353a:	681b      	ldr	r3, [r3, #0]
 801353c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801353e:	68fb      	ldr	r3, [r7, #12]
 8013540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013542:	1c9a      	adds	r2, r3, #2
 8013544:	68fb      	ldr	r3, [r7, #12]
 8013546:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8013548:	68fb      	ldr	r3, [r7, #12]
 801354a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801354c:	b29b      	uxth	r3, r3
 801354e:	3b01      	subs	r3, #1
 8013550:	b29a      	uxth	r2, r3
 8013552:	68fb      	ldr	r3, [r7, #12]
 8013554:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8013556:	e053      	b.n	8013600 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8013558:	68fb      	ldr	r3, [r7, #12]
 801355a:	681b      	ldr	r3, [r3, #0]
 801355c:	689b      	ldr	r3, [r3, #8]
 801355e:	f003 0302 	and.w	r3, r3, #2
 8013562:	2b02      	cmp	r3, #2
 8013564:	d11b      	bne.n	801359e <HAL_SPI_TransmitReceive+0x176>
 8013566:	68fb      	ldr	r3, [r7, #12]
 8013568:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801356a:	b29b      	uxth	r3, r3
 801356c:	2b00      	cmp	r3, #0
 801356e:	d016      	beq.n	801359e <HAL_SPI_TransmitReceive+0x176>
 8013570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013572:	2b01      	cmp	r3, #1
 8013574:	d113      	bne.n	801359e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8013576:	68fb      	ldr	r3, [r7, #12]
 8013578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801357a:	881a      	ldrh	r2, [r3, #0]
 801357c:	68fb      	ldr	r3, [r7, #12]
 801357e:	681b      	ldr	r3, [r3, #0]
 8013580:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8013582:	68fb      	ldr	r3, [r7, #12]
 8013584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013586:	1c9a      	adds	r2, r3, #2
 8013588:	68fb      	ldr	r3, [r7, #12]
 801358a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 801358c:	68fb      	ldr	r3, [r7, #12]
 801358e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013590:	b29b      	uxth	r3, r3
 8013592:	3b01      	subs	r3, #1
 8013594:	b29a      	uxth	r2, r3
 8013596:	68fb      	ldr	r3, [r7, #12]
 8013598:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801359a:	2300      	movs	r3, #0
 801359c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801359e:	68fb      	ldr	r3, [r7, #12]
 80135a0:	681b      	ldr	r3, [r3, #0]
 80135a2:	689b      	ldr	r3, [r3, #8]
 80135a4:	f003 0301 	and.w	r3, r3, #1
 80135a8:	2b01      	cmp	r3, #1
 80135aa:	d119      	bne.n	80135e0 <HAL_SPI_TransmitReceive+0x1b8>
 80135ac:	68fb      	ldr	r3, [r7, #12]
 80135ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80135b0:	b29b      	uxth	r3, r3
 80135b2:	2b00      	cmp	r3, #0
 80135b4:	d014      	beq.n	80135e0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80135b6:	68fb      	ldr	r3, [r7, #12]
 80135b8:	681b      	ldr	r3, [r3, #0]
 80135ba:	68da      	ldr	r2, [r3, #12]
 80135bc:	68fb      	ldr	r3, [r7, #12]
 80135be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80135c0:	b292      	uxth	r2, r2
 80135c2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80135c4:	68fb      	ldr	r3, [r7, #12]
 80135c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80135c8:	1c9a      	adds	r2, r3, #2
 80135ca:	68fb      	ldr	r3, [r7, #12]
 80135cc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80135ce:	68fb      	ldr	r3, [r7, #12]
 80135d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80135d2:	b29b      	uxth	r3, r3
 80135d4:	3b01      	subs	r3, #1
 80135d6:	b29a      	uxth	r2, r3
 80135d8:	68fb      	ldr	r3, [r7, #12]
 80135da:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80135dc:	2301      	movs	r3, #1
 80135de:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80135e0:	f7fd f810 	bl	8010604 <HAL_GetTick>
 80135e4:	4602      	mov	r2, r0
 80135e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135e8:	1ad3      	subs	r3, r2, r3
 80135ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80135ec:	429a      	cmp	r2, r3
 80135ee:	d807      	bhi.n	8013600 <HAL_SPI_TransmitReceive+0x1d8>
 80135f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80135f6:	d003      	beq.n	8013600 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80135f8:	2303      	movs	r3, #3
 80135fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80135fe:	e0a7      	b.n	8013750 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8013600:	68fb      	ldr	r3, [r7, #12]
 8013602:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013604:	b29b      	uxth	r3, r3
 8013606:	2b00      	cmp	r3, #0
 8013608:	d1a6      	bne.n	8013558 <HAL_SPI_TransmitReceive+0x130>
 801360a:	68fb      	ldr	r3, [r7, #12]
 801360c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801360e:	b29b      	uxth	r3, r3
 8013610:	2b00      	cmp	r3, #0
 8013612:	d1a1      	bne.n	8013558 <HAL_SPI_TransmitReceive+0x130>
 8013614:	e07c      	b.n	8013710 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8013616:	68fb      	ldr	r3, [r7, #12]
 8013618:	685b      	ldr	r3, [r3, #4]
 801361a:	2b00      	cmp	r3, #0
 801361c:	d002      	beq.n	8013624 <HAL_SPI_TransmitReceive+0x1fc>
 801361e:	8b7b      	ldrh	r3, [r7, #26]
 8013620:	2b01      	cmp	r3, #1
 8013622:	d16b      	bne.n	80136fc <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8013624:	68fb      	ldr	r3, [r7, #12]
 8013626:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013628:	68fb      	ldr	r3, [r7, #12]
 801362a:	681b      	ldr	r3, [r3, #0]
 801362c:	330c      	adds	r3, #12
 801362e:	7812      	ldrb	r2, [r2, #0]
 8013630:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8013632:	68fb      	ldr	r3, [r7, #12]
 8013634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013636:	1c5a      	adds	r2, r3, #1
 8013638:	68fb      	ldr	r3, [r7, #12]
 801363a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 801363c:	68fb      	ldr	r3, [r7, #12]
 801363e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013640:	b29b      	uxth	r3, r3
 8013642:	3b01      	subs	r3, #1
 8013644:	b29a      	uxth	r2, r3
 8013646:	68fb      	ldr	r3, [r7, #12]
 8013648:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801364a:	e057      	b.n	80136fc <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801364c:	68fb      	ldr	r3, [r7, #12]
 801364e:	681b      	ldr	r3, [r3, #0]
 8013650:	689b      	ldr	r3, [r3, #8]
 8013652:	f003 0302 	and.w	r3, r3, #2
 8013656:	2b02      	cmp	r3, #2
 8013658:	d11c      	bne.n	8013694 <HAL_SPI_TransmitReceive+0x26c>
 801365a:	68fb      	ldr	r3, [r7, #12]
 801365c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801365e:	b29b      	uxth	r3, r3
 8013660:	2b00      	cmp	r3, #0
 8013662:	d017      	beq.n	8013694 <HAL_SPI_TransmitReceive+0x26c>
 8013664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013666:	2b01      	cmp	r3, #1
 8013668:	d114      	bne.n	8013694 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801366a:	68fb      	ldr	r3, [r7, #12]
 801366c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801366e:	68fb      	ldr	r3, [r7, #12]
 8013670:	681b      	ldr	r3, [r3, #0]
 8013672:	330c      	adds	r3, #12
 8013674:	7812      	ldrb	r2, [r2, #0]
 8013676:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8013678:	68fb      	ldr	r3, [r7, #12]
 801367a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801367c:	1c5a      	adds	r2, r3, #1
 801367e:	68fb      	ldr	r3, [r7, #12]
 8013680:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8013682:	68fb      	ldr	r3, [r7, #12]
 8013684:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013686:	b29b      	uxth	r3, r3
 8013688:	3b01      	subs	r3, #1
 801368a:	b29a      	uxth	r2, r3
 801368c:	68fb      	ldr	r3, [r7, #12]
 801368e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8013690:	2300      	movs	r3, #0
 8013692:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8013694:	68fb      	ldr	r3, [r7, #12]
 8013696:	681b      	ldr	r3, [r3, #0]
 8013698:	689b      	ldr	r3, [r3, #8]
 801369a:	f003 0301 	and.w	r3, r3, #1
 801369e:	2b01      	cmp	r3, #1
 80136a0:	d119      	bne.n	80136d6 <HAL_SPI_TransmitReceive+0x2ae>
 80136a2:	68fb      	ldr	r3, [r7, #12]
 80136a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80136a6:	b29b      	uxth	r3, r3
 80136a8:	2b00      	cmp	r3, #0
 80136aa:	d014      	beq.n	80136d6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80136ac:	68fb      	ldr	r3, [r7, #12]
 80136ae:	681b      	ldr	r3, [r3, #0]
 80136b0:	68da      	ldr	r2, [r3, #12]
 80136b2:	68fb      	ldr	r3, [r7, #12]
 80136b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80136b6:	b2d2      	uxtb	r2, r2
 80136b8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80136ba:	68fb      	ldr	r3, [r7, #12]
 80136bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80136be:	1c5a      	adds	r2, r3, #1
 80136c0:	68fb      	ldr	r3, [r7, #12]
 80136c2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80136c4:	68fb      	ldr	r3, [r7, #12]
 80136c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80136c8:	b29b      	uxth	r3, r3
 80136ca:	3b01      	subs	r3, #1
 80136cc:	b29a      	uxth	r2, r3
 80136ce:	68fb      	ldr	r3, [r7, #12]
 80136d0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80136d2:	2301      	movs	r3, #1
 80136d4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80136d6:	f7fc ff95 	bl	8010604 <HAL_GetTick>
 80136da:	4602      	mov	r2, r0
 80136dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136de:	1ad3      	subs	r3, r2, r3
 80136e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80136e2:	429a      	cmp	r2, r3
 80136e4:	d803      	bhi.n	80136ee <HAL_SPI_TransmitReceive+0x2c6>
 80136e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80136e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80136ec:	d102      	bne.n	80136f4 <HAL_SPI_TransmitReceive+0x2cc>
 80136ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80136f0:	2b00      	cmp	r3, #0
 80136f2:	d103      	bne.n	80136fc <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80136f4:	2303      	movs	r3, #3
 80136f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80136fa:	e029      	b.n	8013750 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80136fc:	68fb      	ldr	r3, [r7, #12]
 80136fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013700:	b29b      	uxth	r3, r3
 8013702:	2b00      	cmp	r3, #0
 8013704:	d1a2      	bne.n	801364c <HAL_SPI_TransmitReceive+0x224>
 8013706:	68fb      	ldr	r3, [r7, #12]
 8013708:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801370a:	b29b      	uxth	r3, r3
 801370c:	2b00      	cmp	r3, #0
 801370e:	d19d      	bne.n	801364c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8013710:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013712:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013714:	68f8      	ldr	r0, [r7, #12]
 8013716:	f000 f917 	bl	8013948 <SPI_EndRxTxTransaction>
 801371a:	4603      	mov	r3, r0
 801371c:	2b00      	cmp	r3, #0
 801371e:	d006      	beq.n	801372e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8013720:	2301      	movs	r3, #1
 8013722:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8013726:	68fb      	ldr	r3, [r7, #12]
 8013728:	2220      	movs	r2, #32
 801372a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 801372c:	e010      	b.n	8013750 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801372e:	68fb      	ldr	r3, [r7, #12]
 8013730:	689b      	ldr	r3, [r3, #8]
 8013732:	2b00      	cmp	r3, #0
 8013734:	d10b      	bne.n	801374e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8013736:	2300      	movs	r3, #0
 8013738:	617b      	str	r3, [r7, #20]
 801373a:	68fb      	ldr	r3, [r7, #12]
 801373c:	681b      	ldr	r3, [r3, #0]
 801373e:	68db      	ldr	r3, [r3, #12]
 8013740:	617b      	str	r3, [r7, #20]
 8013742:	68fb      	ldr	r3, [r7, #12]
 8013744:	681b      	ldr	r3, [r3, #0]
 8013746:	689b      	ldr	r3, [r3, #8]
 8013748:	617b      	str	r3, [r7, #20]
 801374a:	697b      	ldr	r3, [r7, #20]
 801374c:	e000      	b.n	8013750 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 801374e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8013750:	68fb      	ldr	r3, [r7, #12]
 8013752:	2201      	movs	r2, #1
 8013754:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8013758:	68fb      	ldr	r3, [r7, #12]
 801375a:	2200      	movs	r2, #0
 801375c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8013760:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8013764:	4618      	mov	r0, r3
 8013766:	3730      	adds	r7, #48	; 0x30
 8013768:	46bd      	mov	sp, r7
 801376a:	bd80      	pop	{r7, pc}

0801376c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801376c:	b580      	push	{r7, lr}
 801376e:	b088      	sub	sp, #32
 8013770:	af00      	add	r7, sp, #0
 8013772:	60f8      	str	r0, [r7, #12]
 8013774:	60b9      	str	r1, [r7, #8]
 8013776:	603b      	str	r3, [r7, #0]
 8013778:	4613      	mov	r3, r2
 801377a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 801377c:	f7fc ff42 	bl	8010604 <HAL_GetTick>
 8013780:	4602      	mov	r2, r0
 8013782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013784:	1a9b      	subs	r3, r3, r2
 8013786:	683a      	ldr	r2, [r7, #0]
 8013788:	4413      	add	r3, r2
 801378a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 801378c:	f7fc ff3a 	bl	8010604 <HAL_GetTick>
 8013790:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8013792:	4b39      	ldr	r3, [pc, #228]	; (8013878 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8013794:	681b      	ldr	r3, [r3, #0]
 8013796:	015b      	lsls	r3, r3, #5
 8013798:	0d1b      	lsrs	r3, r3, #20
 801379a:	69fa      	ldr	r2, [r7, #28]
 801379c:	fb02 f303 	mul.w	r3, r2, r3
 80137a0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80137a2:	e054      	b.n	801384e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80137a4:	683b      	ldr	r3, [r7, #0]
 80137a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80137aa:	d050      	beq.n	801384e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80137ac:	f7fc ff2a 	bl	8010604 <HAL_GetTick>
 80137b0:	4602      	mov	r2, r0
 80137b2:	69bb      	ldr	r3, [r7, #24]
 80137b4:	1ad3      	subs	r3, r2, r3
 80137b6:	69fa      	ldr	r2, [r7, #28]
 80137b8:	429a      	cmp	r2, r3
 80137ba:	d902      	bls.n	80137c2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80137bc:	69fb      	ldr	r3, [r7, #28]
 80137be:	2b00      	cmp	r3, #0
 80137c0:	d13d      	bne.n	801383e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80137c2:	68fb      	ldr	r3, [r7, #12]
 80137c4:	681b      	ldr	r3, [r3, #0]
 80137c6:	685a      	ldr	r2, [r3, #4]
 80137c8:	68fb      	ldr	r3, [r7, #12]
 80137ca:	681b      	ldr	r3, [r3, #0]
 80137cc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80137d0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80137d2:	68fb      	ldr	r3, [r7, #12]
 80137d4:	685b      	ldr	r3, [r3, #4]
 80137d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80137da:	d111      	bne.n	8013800 <SPI_WaitFlagStateUntilTimeout+0x94>
 80137dc:	68fb      	ldr	r3, [r7, #12]
 80137de:	689b      	ldr	r3, [r3, #8]
 80137e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80137e4:	d004      	beq.n	80137f0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80137e6:	68fb      	ldr	r3, [r7, #12]
 80137e8:	689b      	ldr	r3, [r3, #8]
 80137ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80137ee:	d107      	bne.n	8013800 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80137f0:	68fb      	ldr	r3, [r7, #12]
 80137f2:	681b      	ldr	r3, [r3, #0]
 80137f4:	681a      	ldr	r2, [r3, #0]
 80137f6:	68fb      	ldr	r3, [r7, #12]
 80137f8:	681b      	ldr	r3, [r3, #0]
 80137fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80137fe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8013800:	68fb      	ldr	r3, [r7, #12]
 8013802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013804:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8013808:	d10f      	bne.n	801382a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 801380a:	68fb      	ldr	r3, [r7, #12]
 801380c:	681b      	ldr	r3, [r3, #0]
 801380e:	681a      	ldr	r2, [r3, #0]
 8013810:	68fb      	ldr	r3, [r7, #12]
 8013812:	681b      	ldr	r3, [r3, #0]
 8013814:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8013818:	601a      	str	r2, [r3, #0]
 801381a:	68fb      	ldr	r3, [r7, #12]
 801381c:	681b      	ldr	r3, [r3, #0]
 801381e:	681a      	ldr	r2, [r3, #0]
 8013820:	68fb      	ldr	r3, [r7, #12]
 8013822:	681b      	ldr	r3, [r3, #0]
 8013824:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8013828:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801382a:	68fb      	ldr	r3, [r7, #12]
 801382c:	2201      	movs	r2, #1
 801382e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8013832:	68fb      	ldr	r3, [r7, #12]
 8013834:	2200      	movs	r2, #0
 8013836:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 801383a:	2303      	movs	r3, #3
 801383c:	e017      	b.n	801386e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 801383e:	697b      	ldr	r3, [r7, #20]
 8013840:	2b00      	cmp	r3, #0
 8013842:	d101      	bne.n	8013848 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8013844:	2300      	movs	r3, #0
 8013846:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8013848:	697b      	ldr	r3, [r7, #20]
 801384a:	3b01      	subs	r3, #1
 801384c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801384e:	68fb      	ldr	r3, [r7, #12]
 8013850:	681b      	ldr	r3, [r3, #0]
 8013852:	689a      	ldr	r2, [r3, #8]
 8013854:	68bb      	ldr	r3, [r7, #8]
 8013856:	4013      	ands	r3, r2
 8013858:	68ba      	ldr	r2, [r7, #8]
 801385a:	429a      	cmp	r2, r3
 801385c:	bf0c      	ite	eq
 801385e:	2301      	moveq	r3, #1
 8013860:	2300      	movne	r3, #0
 8013862:	b2db      	uxtb	r3, r3
 8013864:	461a      	mov	r2, r3
 8013866:	79fb      	ldrb	r3, [r7, #7]
 8013868:	429a      	cmp	r2, r3
 801386a:	d19b      	bne.n	80137a4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 801386c:	2300      	movs	r3, #0
}
 801386e:	4618      	mov	r0, r3
 8013870:	3720      	adds	r7, #32
 8013872:	46bd      	mov	sp, r7
 8013874:	bd80      	pop	{r7, pc}
 8013876:	bf00      	nop
 8013878:	20000004 	.word	0x20000004

0801387c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 801387c:	b580      	push	{r7, lr}
 801387e:	b086      	sub	sp, #24
 8013880:	af02      	add	r7, sp, #8
 8013882:	60f8      	str	r0, [r7, #12]
 8013884:	60b9      	str	r1, [r7, #8]
 8013886:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8013888:	68fb      	ldr	r3, [r7, #12]
 801388a:	685b      	ldr	r3, [r3, #4]
 801388c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013890:	d111      	bne.n	80138b6 <SPI_EndRxTransaction+0x3a>
 8013892:	68fb      	ldr	r3, [r7, #12]
 8013894:	689b      	ldr	r3, [r3, #8]
 8013896:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801389a:	d004      	beq.n	80138a6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801389c:	68fb      	ldr	r3, [r7, #12]
 801389e:	689b      	ldr	r3, [r3, #8]
 80138a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80138a4:	d107      	bne.n	80138b6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80138a6:	68fb      	ldr	r3, [r7, #12]
 80138a8:	681b      	ldr	r3, [r3, #0]
 80138aa:	681a      	ldr	r2, [r3, #0]
 80138ac:	68fb      	ldr	r3, [r7, #12]
 80138ae:	681b      	ldr	r3, [r3, #0]
 80138b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80138b4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80138b6:	68fb      	ldr	r3, [r7, #12]
 80138b8:	685b      	ldr	r3, [r3, #4]
 80138ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80138be:	d12a      	bne.n	8013916 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80138c0:	68fb      	ldr	r3, [r7, #12]
 80138c2:	689b      	ldr	r3, [r3, #8]
 80138c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80138c8:	d012      	beq.n	80138f0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80138ca:	687b      	ldr	r3, [r7, #4]
 80138cc:	9300      	str	r3, [sp, #0]
 80138ce:	68bb      	ldr	r3, [r7, #8]
 80138d0:	2200      	movs	r2, #0
 80138d2:	2180      	movs	r1, #128	; 0x80
 80138d4:	68f8      	ldr	r0, [r7, #12]
 80138d6:	f7ff ff49 	bl	801376c <SPI_WaitFlagStateUntilTimeout>
 80138da:	4603      	mov	r3, r0
 80138dc:	2b00      	cmp	r3, #0
 80138de:	d02d      	beq.n	801393c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80138e0:	68fb      	ldr	r3, [r7, #12]
 80138e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80138e4:	f043 0220 	orr.w	r2, r3, #32
 80138e8:	68fb      	ldr	r3, [r7, #12]
 80138ea:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80138ec:	2303      	movs	r3, #3
 80138ee:	e026      	b.n	801393e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80138f0:	687b      	ldr	r3, [r7, #4]
 80138f2:	9300      	str	r3, [sp, #0]
 80138f4:	68bb      	ldr	r3, [r7, #8]
 80138f6:	2200      	movs	r2, #0
 80138f8:	2101      	movs	r1, #1
 80138fa:	68f8      	ldr	r0, [r7, #12]
 80138fc:	f7ff ff36 	bl	801376c <SPI_WaitFlagStateUntilTimeout>
 8013900:	4603      	mov	r3, r0
 8013902:	2b00      	cmp	r3, #0
 8013904:	d01a      	beq.n	801393c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8013906:	68fb      	ldr	r3, [r7, #12]
 8013908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801390a:	f043 0220 	orr.w	r2, r3, #32
 801390e:	68fb      	ldr	r3, [r7, #12]
 8013910:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8013912:	2303      	movs	r3, #3
 8013914:	e013      	b.n	801393e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8013916:	687b      	ldr	r3, [r7, #4]
 8013918:	9300      	str	r3, [sp, #0]
 801391a:	68bb      	ldr	r3, [r7, #8]
 801391c:	2200      	movs	r2, #0
 801391e:	2101      	movs	r1, #1
 8013920:	68f8      	ldr	r0, [r7, #12]
 8013922:	f7ff ff23 	bl	801376c <SPI_WaitFlagStateUntilTimeout>
 8013926:	4603      	mov	r3, r0
 8013928:	2b00      	cmp	r3, #0
 801392a:	d007      	beq.n	801393c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801392c:	68fb      	ldr	r3, [r7, #12]
 801392e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013930:	f043 0220 	orr.w	r2, r3, #32
 8013934:	68fb      	ldr	r3, [r7, #12]
 8013936:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8013938:	2303      	movs	r3, #3
 801393a:	e000      	b.n	801393e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 801393c:	2300      	movs	r3, #0
}
 801393e:	4618      	mov	r0, r3
 8013940:	3710      	adds	r7, #16
 8013942:	46bd      	mov	sp, r7
 8013944:	bd80      	pop	{r7, pc}
	...

08013948 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8013948:	b580      	push	{r7, lr}
 801394a:	b088      	sub	sp, #32
 801394c:	af02      	add	r7, sp, #8
 801394e:	60f8      	str	r0, [r7, #12]
 8013950:	60b9      	str	r1, [r7, #8]
 8013952:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8013954:	4b1b      	ldr	r3, [pc, #108]	; (80139c4 <SPI_EndRxTxTransaction+0x7c>)
 8013956:	681b      	ldr	r3, [r3, #0]
 8013958:	4a1b      	ldr	r2, [pc, #108]	; (80139c8 <SPI_EndRxTxTransaction+0x80>)
 801395a:	fba2 2303 	umull	r2, r3, r2, r3
 801395e:	0d5b      	lsrs	r3, r3, #21
 8013960:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8013964:	fb02 f303 	mul.w	r3, r2, r3
 8013968:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801396a:	68fb      	ldr	r3, [r7, #12]
 801396c:	685b      	ldr	r3, [r3, #4]
 801396e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013972:	d112      	bne.n	801399a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8013974:	687b      	ldr	r3, [r7, #4]
 8013976:	9300      	str	r3, [sp, #0]
 8013978:	68bb      	ldr	r3, [r7, #8]
 801397a:	2200      	movs	r2, #0
 801397c:	2180      	movs	r1, #128	; 0x80
 801397e:	68f8      	ldr	r0, [r7, #12]
 8013980:	f7ff fef4 	bl	801376c <SPI_WaitFlagStateUntilTimeout>
 8013984:	4603      	mov	r3, r0
 8013986:	2b00      	cmp	r3, #0
 8013988:	d016      	beq.n	80139b8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801398a:	68fb      	ldr	r3, [r7, #12]
 801398c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801398e:	f043 0220 	orr.w	r2, r3, #32
 8013992:	68fb      	ldr	r3, [r7, #12]
 8013994:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8013996:	2303      	movs	r3, #3
 8013998:	e00f      	b.n	80139ba <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 801399a:	697b      	ldr	r3, [r7, #20]
 801399c:	2b00      	cmp	r3, #0
 801399e:	d00a      	beq.n	80139b6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80139a0:	697b      	ldr	r3, [r7, #20]
 80139a2:	3b01      	subs	r3, #1
 80139a4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80139a6:	68fb      	ldr	r3, [r7, #12]
 80139a8:	681b      	ldr	r3, [r3, #0]
 80139aa:	689b      	ldr	r3, [r3, #8]
 80139ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80139b0:	2b80      	cmp	r3, #128	; 0x80
 80139b2:	d0f2      	beq.n	801399a <SPI_EndRxTxTransaction+0x52>
 80139b4:	e000      	b.n	80139b8 <SPI_EndRxTxTransaction+0x70>
        break;
 80139b6:	bf00      	nop
  }

  return HAL_OK;
 80139b8:	2300      	movs	r3, #0
}
 80139ba:	4618      	mov	r0, r3
 80139bc:	3718      	adds	r7, #24
 80139be:	46bd      	mov	sp, r7
 80139c0:	bd80      	pop	{r7, pc}
 80139c2:	bf00      	nop
 80139c4:	20000004 	.word	0x20000004
 80139c8:	165e9f81 	.word	0x165e9f81

080139cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80139cc:	b580      	push	{r7, lr}
 80139ce:	b082      	sub	sp, #8
 80139d0:	af00      	add	r7, sp, #0
 80139d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80139d4:	687b      	ldr	r3, [r7, #4]
 80139d6:	2b00      	cmp	r3, #0
 80139d8:	d101      	bne.n	80139de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80139da:	2301      	movs	r3, #1
 80139dc:	e041      	b.n	8013a62 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80139de:	687b      	ldr	r3, [r7, #4]
 80139e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80139e4:	b2db      	uxtb	r3, r3
 80139e6:	2b00      	cmp	r3, #0
 80139e8:	d106      	bne.n	80139f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80139ea:	687b      	ldr	r3, [r7, #4]
 80139ec:	2200      	movs	r2, #0
 80139ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80139f2:	6878      	ldr	r0, [r7, #4]
 80139f4:	f7f0 fe4c 	bl	8004690 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80139f8:	687b      	ldr	r3, [r7, #4]
 80139fa:	2202      	movs	r2, #2
 80139fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8013a00:	687b      	ldr	r3, [r7, #4]
 8013a02:	681a      	ldr	r2, [r3, #0]
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	3304      	adds	r3, #4
 8013a08:	4619      	mov	r1, r3
 8013a0a:	4610      	mov	r0, r2
 8013a0c:	f001 f858 	bl	8014ac0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8013a10:	687b      	ldr	r3, [r7, #4]
 8013a12:	2201      	movs	r2, #1
 8013a14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8013a18:	687b      	ldr	r3, [r7, #4]
 8013a1a:	2201      	movs	r2, #1
 8013a1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8013a20:	687b      	ldr	r3, [r7, #4]
 8013a22:	2201      	movs	r2, #1
 8013a24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8013a28:	687b      	ldr	r3, [r7, #4]
 8013a2a:	2201      	movs	r2, #1
 8013a2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8013a30:	687b      	ldr	r3, [r7, #4]
 8013a32:	2201      	movs	r2, #1
 8013a34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8013a38:	687b      	ldr	r3, [r7, #4]
 8013a3a:	2201      	movs	r2, #1
 8013a3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8013a40:	687b      	ldr	r3, [r7, #4]
 8013a42:	2201      	movs	r2, #1
 8013a44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8013a48:	687b      	ldr	r3, [r7, #4]
 8013a4a:	2201      	movs	r2, #1
 8013a4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013a50:	687b      	ldr	r3, [r7, #4]
 8013a52:	2201      	movs	r2, #1
 8013a54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8013a58:	687b      	ldr	r3, [r7, #4]
 8013a5a:	2201      	movs	r2, #1
 8013a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8013a60:	2300      	movs	r3, #0
}
 8013a62:	4618      	mov	r0, r3
 8013a64:	3708      	adds	r7, #8
 8013a66:	46bd      	mov	sp, r7
 8013a68:	bd80      	pop	{r7, pc}
	...

08013a6c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8013a6c:	b480      	push	{r7}
 8013a6e:	b085      	sub	sp, #20
 8013a70:	af00      	add	r7, sp, #0
 8013a72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013a7a:	b2db      	uxtb	r3, r3
 8013a7c:	2b01      	cmp	r3, #1
 8013a7e:	d001      	beq.n	8013a84 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8013a80:	2301      	movs	r3, #1
 8013a82:	e046      	b.n	8013b12 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013a84:	687b      	ldr	r3, [r7, #4]
 8013a86:	2202      	movs	r2, #2
 8013a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8013a8c:	687b      	ldr	r3, [r7, #4]
 8013a8e:	681b      	ldr	r3, [r3, #0]
 8013a90:	4a23      	ldr	r2, [pc, #140]	; (8013b20 <HAL_TIM_Base_Start+0xb4>)
 8013a92:	4293      	cmp	r3, r2
 8013a94:	d022      	beq.n	8013adc <HAL_TIM_Base_Start+0x70>
 8013a96:	687b      	ldr	r3, [r7, #4]
 8013a98:	681b      	ldr	r3, [r3, #0]
 8013a9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013a9e:	d01d      	beq.n	8013adc <HAL_TIM_Base_Start+0x70>
 8013aa0:	687b      	ldr	r3, [r7, #4]
 8013aa2:	681b      	ldr	r3, [r3, #0]
 8013aa4:	4a1f      	ldr	r2, [pc, #124]	; (8013b24 <HAL_TIM_Base_Start+0xb8>)
 8013aa6:	4293      	cmp	r3, r2
 8013aa8:	d018      	beq.n	8013adc <HAL_TIM_Base_Start+0x70>
 8013aaa:	687b      	ldr	r3, [r7, #4]
 8013aac:	681b      	ldr	r3, [r3, #0]
 8013aae:	4a1e      	ldr	r2, [pc, #120]	; (8013b28 <HAL_TIM_Base_Start+0xbc>)
 8013ab0:	4293      	cmp	r3, r2
 8013ab2:	d013      	beq.n	8013adc <HAL_TIM_Base_Start+0x70>
 8013ab4:	687b      	ldr	r3, [r7, #4]
 8013ab6:	681b      	ldr	r3, [r3, #0]
 8013ab8:	4a1c      	ldr	r2, [pc, #112]	; (8013b2c <HAL_TIM_Base_Start+0xc0>)
 8013aba:	4293      	cmp	r3, r2
 8013abc:	d00e      	beq.n	8013adc <HAL_TIM_Base_Start+0x70>
 8013abe:	687b      	ldr	r3, [r7, #4]
 8013ac0:	681b      	ldr	r3, [r3, #0]
 8013ac2:	4a1b      	ldr	r2, [pc, #108]	; (8013b30 <HAL_TIM_Base_Start+0xc4>)
 8013ac4:	4293      	cmp	r3, r2
 8013ac6:	d009      	beq.n	8013adc <HAL_TIM_Base_Start+0x70>
 8013ac8:	687b      	ldr	r3, [r7, #4]
 8013aca:	681b      	ldr	r3, [r3, #0]
 8013acc:	4a19      	ldr	r2, [pc, #100]	; (8013b34 <HAL_TIM_Base_Start+0xc8>)
 8013ace:	4293      	cmp	r3, r2
 8013ad0:	d004      	beq.n	8013adc <HAL_TIM_Base_Start+0x70>
 8013ad2:	687b      	ldr	r3, [r7, #4]
 8013ad4:	681b      	ldr	r3, [r3, #0]
 8013ad6:	4a18      	ldr	r2, [pc, #96]	; (8013b38 <HAL_TIM_Base_Start+0xcc>)
 8013ad8:	4293      	cmp	r3, r2
 8013ada:	d111      	bne.n	8013b00 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8013adc:	687b      	ldr	r3, [r7, #4]
 8013ade:	681b      	ldr	r3, [r3, #0]
 8013ae0:	689b      	ldr	r3, [r3, #8]
 8013ae2:	f003 0307 	and.w	r3, r3, #7
 8013ae6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013ae8:	68fb      	ldr	r3, [r7, #12]
 8013aea:	2b06      	cmp	r3, #6
 8013aec:	d010      	beq.n	8013b10 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8013aee:	687b      	ldr	r3, [r7, #4]
 8013af0:	681b      	ldr	r3, [r3, #0]
 8013af2:	681a      	ldr	r2, [r3, #0]
 8013af4:	687b      	ldr	r3, [r7, #4]
 8013af6:	681b      	ldr	r3, [r3, #0]
 8013af8:	f042 0201 	orr.w	r2, r2, #1
 8013afc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013afe:	e007      	b.n	8013b10 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8013b00:	687b      	ldr	r3, [r7, #4]
 8013b02:	681b      	ldr	r3, [r3, #0]
 8013b04:	681a      	ldr	r2, [r3, #0]
 8013b06:	687b      	ldr	r3, [r7, #4]
 8013b08:	681b      	ldr	r3, [r3, #0]
 8013b0a:	f042 0201 	orr.w	r2, r2, #1
 8013b0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8013b10:	2300      	movs	r3, #0
}
 8013b12:	4618      	mov	r0, r3
 8013b14:	3714      	adds	r7, #20
 8013b16:	46bd      	mov	sp, r7
 8013b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b1c:	4770      	bx	lr
 8013b1e:	bf00      	nop
 8013b20:	40010000 	.word	0x40010000
 8013b24:	40000400 	.word	0x40000400
 8013b28:	40000800 	.word	0x40000800
 8013b2c:	40000c00 	.word	0x40000c00
 8013b30:	40010400 	.word	0x40010400
 8013b34:	40014000 	.word	0x40014000
 8013b38:	40001800 	.word	0x40001800

08013b3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8013b3c:	b480      	push	{r7}
 8013b3e:	b085      	sub	sp, #20
 8013b40:	af00      	add	r7, sp, #0
 8013b42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8013b44:	687b      	ldr	r3, [r7, #4]
 8013b46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013b4a:	b2db      	uxtb	r3, r3
 8013b4c:	2b01      	cmp	r3, #1
 8013b4e:	d001      	beq.n	8013b54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8013b50:	2301      	movs	r3, #1
 8013b52:	e04e      	b.n	8013bf2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013b54:	687b      	ldr	r3, [r7, #4]
 8013b56:	2202      	movs	r2, #2
 8013b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8013b5c:	687b      	ldr	r3, [r7, #4]
 8013b5e:	681b      	ldr	r3, [r3, #0]
 8013b60:	68da      	ldr	r2, [r3, #12]
 8013b62:	687b      	ldr	r3, [r7, #4]
 8013b64:	681b      	ldr	r3, [r3, #0]
 8013b66:	f042 0201 	orr.w	r2, r2, #1
 8013b6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8013b6c:	687b      	ldr	r3, [r7, #4]
 8013b6e:	681b      	ldr	r3, [r3, #0]
 8013b70:	4a23      	ldr	r2, [pc, #140]	; (8013c00 <HAL_TIM_Base_Start_IT+0xc4>)
 8013b72:	4293      	cmp	r3, r2
 8013b74:	d022      	beq.n	8013bbc <HAL_TIM_Base_Start_IT+0x80>
 8013b76:	687b      	ldr	r3, [r7, #4]
 8013b78:	681b      	ldr	r3, [r3, #0]
 8013b7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013b7e:	d01d      	beq.n	8013bbc <HAL_TIM_Base_Start_IT+0x80>
 8013b80:	687b      	ldr	r3, [r7, #4]
 8013b82:	681b      	ldr	r3, [r3, #0]
 8013b84:	4a1f      	ldr	r2, [pc, #124]	; (8013c04 <HAL_TIM_Base_Start_IT+0xc8>)
 8013b86:	4293      	cmp	r3, r2
 8013b88:	d018      	beq.n	8013bbc <HAL_TIM_Base_Start_IT+0x80>
 8013b8a:	687b      	ldr	r3, [r7, #4]
 8013b8c:	681b      	ldr	r3, [r3, #0]
 8013b8e:	4a1e      	ldr	r2, [pc, #120]	; (8013c08 <HAL_TIM_Base_Start_IT+0xcc>)
 8013b90:	4293      	cmp	r3, r2
 8013b92:	d013      	beq.n	8013bbc <HAL_TIM_Base_Start_IT+0x80>
 8013b94:	687b      	ldr	r3, [r7, #4]
 8013b96:	681b      	ldr	r3, [r3, #0]
 8013b98:	4a1c      	ldr	r2, [pc, #112]	; (8013c0c <HAL_TIM_Base_Start_IT+0xd0>)
 8013b9a:	4293      	cmp	r3, r2
 8013b9c:	d00e      	beq.n	8013bbc <HAL_TIM_Base_Start_IT+0x80>
 8013b9e:	687b      	ldr	r3, [r7, #4]
 8013ba0:	681b      	ldr	r3, [r3, #0]
 8013ba2:	4a1b      	ldr	r2, [pc, #108]	; (8013c10 <HAL_TIM_Base_Start_IT+0xd4>)
 8013ba4:	4293      	cmp	r3, r2
 8013ba6:	d009      	beq.n	8013bbc <HAL_TIM_Base_Start_IT+0x80>
 8013ba8:	687b      	ldr	r3, [r7, #4]
 8013baa:	681b      	ldr	r3, [r3, #0]
 8013bac:	4a19      	ldr	r2, [pc, #100]	; (8013c14 <HAL_TIM_Base_Start_IT+0xd8>)
 8013bae:	4293      	cmp	r3, r2
 8013bb0:	d004      	beq.n	8013bbc <HAL_TIM_Base_Start_IT+0x80>
 8013bb2:	687b      	ldr	r3, [r7, #4]
 8013bb4:	681b      	ldr	r3, [r3, #0]
 8013bb6:	4a18      	ldr	r2, [pc, #96]	; (8013c18 <HAL_TIM_Base_Start_IT+0xdc>)
 8013bb8:	4293      	cmp	r3, r2
 8013bba:	d111      	bne.n	8013be0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8013bbc:	687b      	ldr	r3, [r7, #4]
 8013bbe:	681b      	ldr	r3, [r3, #0]
 8013bc0:	689b      	ldr	r3, [r3, #8]
 8013bc2:	f003 0307 	and.w	r3, r3, #7
 8013bc6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013bc8:	68fb      	ldr	r3, [r7, #12]
 8013bca:	2b06      	cmp	r3, #6
 8013bcc:	d010      	beq.n	8013bf0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8013bce:	687b      	ldr	r3, [r7, #4]
 8013bd0:	681b      	ldr	r3, [r3, #0]
 8013bd2:	681a      	ldr	r2, [r3, #0]
 8013bd4:	687b      	ldr	r3, [r7, #4]
 8013bd6:	681b      	ldr	r3, [r3, #0]
 8013bd8:	f042 0201 	orr.w	r2, r2, #1
 8013bdc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013bde:	e007      	b.n	8013bf0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8013be0:	687b      	ldr	r3, [r7, #4]
 8013be2:	681b      	ldr	r3, [r3, #0]
 8013be4:	681a      	ldr	r2, [r3, #0]
 8013be6:	687b      	ldr	r3, [r7, #4]
 8013be8:	681b      	ldr	r3, [r3, #0]
 8013bea:	f042 0201 	orr.w	r2, r2, #1
 8013bee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8013bf0:	2300      	movs	r3, #0
}
 8013bf2:	4618      	mov	r0, r3
 8013bf4:	3714      	adds	r7, #20
 8013bf6:	46bd      	mov	sp, r7
 8013bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bfc:	4770      	bx	lr
 8013bfe:	bf00      	nop
 8013c00:	40010000 	.word	0x40010000
 8013c04:	40000400 	.word	0x40000400
 8013c08:	40000800 	.word	0x40000800
 8013c0c:	40000c00 	.word	0x40000c00
 8013c10:	40010400 	.word	0x40010400
 8013c14:	40014000 	.word	0x40014000
 8013c18:	40001800 	.word	0x40001800

08013c1c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8013c1c:	b580      	push	{r7, lr}
 8013c1e:	b082      	sub	sp, #8
 8013c20:	af00      	add	r7, sp, #0
 8013c22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	2b00      	cmp	r3, #0
 8013c28:	d101      	bne.n	8013c2e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8013c2a:	2301      	movs	r3, #1
 8013c2c:	e041      	b.n	8013cb2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8013c2e:	687b      	ldr	r3, [r7, #4]
 8013c30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013c34:	b2db      	uxtb	r3, r3
 8013c36:	2b00      	cmp	r3, #0
 8013c38:	d106      	bne.n	8013c48 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8013c3a:	687b      	ldr	r3, [r7, #4]
 8013c3c:	2200      	movs	r2, #0
 8013c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8013c42:	6878      	ldr	r0, [r7, #4]
 8013c44:	f000 f839 	bl	8013cba <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013c48:	687b      	ldr	r3, [r7, #4]
 8013c4a:	2202      	movs	r2, #2
 8013c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	681a      	ldr	r2, [r3, #0]
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	3304      	adds	r3, #4
 8013c58:	4619      	mov	r1, r3
 8013c5a:	4610      	mov	r0, r2
 8013c5c:	f000 ff30 	bl	8014ac0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	2201      	movs	r2, #1
 8013c64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8013c68:	687b      	ldr	r3, [r7, #4]
 8013c6a:	2201      	movs	r2, #1
 8013c6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8013c70:	687b      	ldr	r3, [r7, #4]
 8013c72:	2201      	movs	r2, #1
 8013c74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8013c78:	687b      	ldr	r3, [r7, #4]
 8013c7a:	2201      	movs	r2, #1
 8013c7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8013c80:	687b      	ldr	r3, [r7, #4]
 8013c82:	2201      	movs	r2, #1
 8013c84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8013c88:	687b      	ldr	r3, [r7, #4]
 8013c8a:	2201      	movs	r2, #1
 8013c8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8013c90:	687b      	ldr	r3, [r7, #4]
 8013c92:	2201      	movs	r2, #1
 8013c94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8013c98:	687b      	ldr	r3, [r7, #4]
 8013c9a:	2201      	movs	r2, #1
 8013c9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013ca0:	687b      	ldr	r3, [r7, #4]
 8013ca2:	2201      	movs	r2, #1
 8013ca4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8013ca8:	687b      	ldr	r3, [r7, #4]
 8013caa:	2201      	movs	r2, #1
 8013cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8013cb0:	2300      	movs	r3, #0
}
 8013cb2:	4618      	mov	r0, r3
 8013cb4:	3708      	adds	r7, #8
 8013cb6:	46bd      	mov	sp, r7
 8013cb8:	bd80      	pop	{r7, pc}

08013cba <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8013cba:	b480      	push	{r7}
 8013cbc:	b083      	sub	sp, #12
 8013cbe:	af00      	add	r7, sp, #0
 8013cc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8013cc2:	bf00      	nop
 8013cc4:	370c      	adds	r7, #12
 8013cc6:	46bd      	mov	sp, r7
 8013cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ccc:	4770      	bx	lr
	...

08013cd0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8013cd0:	b580      	push	{r7, lr}
 8013cd2:	b084      	sub	sp, #16
 8013cd4:	af00      	add	r7, sp, #0
 8013cd6:	6078      	str	r0, [r7, #4]
 8013cd8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8013cda:	683b      	ldr	r3, [r7, #0]
 8013cdc:	2b00      	cmp	r3, #0
 8013cde:	d109      	bne.n	8013cf4 <HAL_TIM_PWM_Start+0x24>
 8013ce0:	687b      	ldr	r3, [r7, #4]
 8013ce2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8013ce6:	b2db      	uxtb	r3, r3
 8013ce8:	2b01      	cmp	r3, #1
 8013cea:	bf14      	ite	ne
 8013cec:	2301      	movne	r3, #1
 8013cee:	2300      	moveq	r3, #0
 8013cf0:	b2db      	uxtb	r3, r3
 8013cf2:	e022      	b.n	8013d3a <HAL_TIM_PWM_Start+0x6a>
 8013cf4:	683b      	ldr	r3, [r7, #0]
 8013cf6:	2b04      	cmp	r3, #4
 8013cf8:	d109      	bne.n	8013d0e <HAL_TIM_PWM_Start+0x3e>
 8013cfa:	687b      	ldr	r3, [r7, #4]
 8013cfc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8013d00:	b2db      	uxtb	r3, r3
 8013d02:	2b01      	cmp	r3, #1
 8013d04:	bf14      	ite	ne
 8013d06:	2301      	movne	r3, #1
 8013d08:	2300      	moveq	r3, #0
 8013d0a:	b2db      	uxtb	r3, r3
 8013d0c:	e015      	b.n	8013d3a <HAL_TIM_PWM_Start+0x6a>
 8013d0e:	683b      	ldr	r3, [r7, #0]
 8013d10:	2b08      	cmp	r3, #8
 8013d12:	d109      	bne.n	8013d28 <HAL_TIM_PWM_Start+0x58>
 8013d14:	687b      	ldr	r3, [r7, #4]
 8013d16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013d1a:	b2db      	uxtb	r3, r3
 8013d1c:	2b01      	cmp	r3, #1
 8013d1e:	bf14      	ite	ne
 8013d20:	2301      	movne	r3, #1
 8013d22:	2300      	moveq	r3, #0
 8013d24:	b2db      	uxtb	r3, r3
 8013d26:	e008      	b.n	8013d3a <HAL_TIM_PWM_Start+0x6a>
 8013d28:	687b      	ldr	r3, [r7, #4]
 8013d2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8013d2e:	b2db      	uxtb	r3, r3
 8013d30:	2b01      	cmp	r3, #1
 8013d32:	bf14      	ite	ne
 8013d34:	2301      	movne	r3, #1
 8013d36:	2300      	moveq	r3, #0
 8013d38:	b2db      	uxtb	r3, r3
 8013d3a:	2b00      	cmp	r3, #0
 8013d3c:	d001      	beq.n	8013d42 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8013d3e:	2301      	movs	r3, #1
 8013d40:	e07c      	b.n	8013e3c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8013d42:	683b      	ldr	r3, [r7, #0]
 8013d44:	2b00      	cmp	r3, #0
 8013d46:	d104      	bne.n	8013d52 <HAL_TIM_PWM_Start+0x82>
 8013d48:	687b      	ldr	r3, [r7, #4]
 8013d4a:	2202      	movs	r2, #2
 8013d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8013d50:	e013      	b.n	8013d7a <HAL_TIM_PWM_Start+0xaa>
 8013d52:	683b      	ldr	r3, [r7, #0]
 8013d54:	2b04      	cmp	r3, #4
 8013d56:	d104      	bne.n	8013d62 <HAL_TIM_PWM_Start+0x92>
 8013d58:	687b      	ldr	r3, [r7, #4]
 8013d5a:	2202      	movs	r2, #2
 8013d5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8013d60:	e00b      	b.n	8013d7a <HAL_TIM_PWM_Start+0xaa>
 8013d62:	683b      	ldr	r3, [r7, #0]
 8013d64:	2b08      	cmp	r3, #8
 8013d66:	d104      	bne.n	8013d72 <HAL_TIM_PWM_Start+0xa2>
 8013d68:	687b      	ldr	r3, [r7, #4]
 8013d6a:	2202      	movs	r2, #2
 8013d6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8013d70:	e003      	b.n	8013d7a <HAL_TIM_PWM_Start+0xaa>
 8013d72:	687b      	ldr	r3, [r7, #4]
 8013d74:	2202      	movs	r2, #2
 8013d76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8013d7a:	687b      	ldr	r3, [r7, #4]
 8013d7c:	681b      	ldr	r3, [r3, #0]
 8013d7e:	2201      	movs	r2, #1
 8013d80:	6839      	ldr	r1, [r7, #0]
 8013d82:	4618      	mov	r0, r3
 8013d84:	f001 fb42 	bl	801540c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8013d88:	687b      	ldr	r3, [r7, #4]
 8013d8a:	681b      	ldr	r3, [r3, #0]
 8013d8c:	4a2d      	ldr	r2, [pc, #180]	; (8013e44 <HAL_TIM_PWM_Start+0x174>)
 8013d8e:	4293      	cmp	r3, r2
 8013d90:	d004      	beq.n	8013d9c <HAL_TIM_PWM_Start+0xcc>
 8013d92:	687b      	ldr	r3, [r7, #4]
 8013d94:	681b      	ldr	r3, [r3, #0]
 8013d96:	4a2c      	ldr	r2, [pc, #176]	; (8013e48 <HAL_TIM_PWM_Start+0x178>)
 8013d98:	4293      	cmp	r3, r2
 8013d9a:	d101      	bne.n	8013da0 <HAL_TIM_PWM_Start+0xd0>
 8013d9c:	2301      	movs	r3, #1
 8013d9e:	e000      	b.n	8013da2 <HAL_TIM_PWM_Start+0xd2>
 8013da0:	2300      	movs	r3, #0
 8013da2:	2b00      	cmp	r3, #0
 8013da4:	d007      	beq.n	8013db6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8013da6:	687b      	ldr	r3, [r7, #4]
 8013da8:	681b      	ldr	r3, [r3, #0]
 8013daa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013dac:	687b      	ldr	r3, [r7, #4]
 8013dae:	681b      	ldr	r3, [r3, #0]
 8013db0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8013db4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8013db6:	687b      	ldr	r3, [r7, #4]
 8013db8:	681b      	ldr	r3, [r3, #0]
 8013dba:	4a22      	ldr	r2, [pc, #136]	; (8013e44 <HAL_TIM_PWM_Start+0x174>)
 8013dbc:	4293      	cmp	r3, r2
 8013dbe:	d022      	beq.n	8013e06 <HAL_TIM_PWM_Start+0x136>
 8013dc0:	687b      	ldr	r3, [r7, #4]
 8013dc2:	681b      	ldr	r3, [r3, #0]
 8013dc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013dc8:	d01d      	beq.n	8013e06 <HAL_TIM_PWM_Start+0x136>
 8013dca:	687b      	ldr	r3, [r7, #4]
 8013dcc:	681b      	ldr	r3, [r3, #0]
 8013dce:	4a1f      	ldr	r2, [pc, #124]	; (8013e4c <HAL_TIM_PWM_Start+0x17c>)
 8013dd0:	4293      	cmp	r3, r2
 8013dd2:	d018      	beq.n	8013e06 <HAL_TIM_PWM_Start+0x136>
 8013dd4:	687b      	ldr	r3, [r7, #4]
 8013dd6:	681b      	ldr	r3, [r3, #0]
 8013dd8:	4a1d      	ldr	r2, [pc, #116]	; (8013e50 <HAL_TIM_PWM_Start+0x180>)
 8013dda:	4293      	cmp	r3, r2
 8013ddc:	d013      	beq.n	8013e06 <HAL_TIM_PWM_Start+0x136>
 8013dde:	687b      	ldr	r3, [r7, #4]
 8013de0:	681b      	ldr	r3, [r3, #0]
 8013de2:	4a1c      	ldr	r2, [pc, #112]	; (8013e54 <HAL_TIM_PWM_Start+0x184>)
 8013de4:	4293      	cmp	r3, r2
 8013de6:	d00e      	beq.n	8013e06 <HAL_TIM_PWM_Start+0x136>
 8013de8:	687b      	ldr	r3, [r7, #4]
 8013dea:	681b      	ldr	r3, [r3, #0]
 8013dec:	4a16      	ldr	r2, [pc, #88]	; (8013e48 <HAL_TIM_PWM_Start+0x178>)
 8013dee:	4293      	cmp	r3, r2
 8013df0:	d009      	beq.n	8013e06 <HAL_TIM_PWM_Start+0x136>
 8013df2:	687b      	ldr	r3, [r7, #4]
 8013df4:	681b      	ldr	r3, [r3, #0]
 8013df6:	4a18      	ldr	r2, [pc, #96]	; (8013e58 <HAL_TIM_PWM_Start+0x188>)
 8013df8:	4293      	cmp	r3, r2
 8013dfa:	d004      	beq.n	8013e06 <HAL_TIM_PWM_Start+0x136>
 8013dfc:	687b      	ldr	r3, [r7, #4]
 8013dfe:	681b      	ldr	r3, [r3, #0]
 8013e00:	4a16      	ldr	r2, [pc, #88]	; (8013e5c <HAL_TIM_PWM_Start+0x18c>)
 8013e02:	4293      	cmp	r3, r2
 8013e04:	d111      	bne.n	8013e2a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8013e06:	687b      	ldr	r3, [r7, #4]
 8013e08:	681b      	ldr	r3, [r3, #0]
 8013e0a:	689b      	ldr	r3, [r3, #8]
 8013e0c:	f003 0307 	and.w	r3, r3, #7
 8013e10:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013e12:	68fb      	ldr	r3, [r7, #12]
 8013e14:	2b06      	cmp	r3, #6
 8013e16:	d010      	beq.n	8013e3a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8013e18:	687b      	ldr	r3, [r7, #4]
 8013e1a:	681b      	ldr	r3, [r3, #0]
 8013e1c:	681a      	ldr	r2, [r3, #0]
 8013e1e:	687b      	ldr	r3, [r7, #4]
 8013e20:	681b      	ldr	r3, [r3, #0]
 8013e22:	f042 0201 	orr.w	r2, r2, #1
 8013e26:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013e28:	e007      	b.n	8013e3a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8013e2a:	687b      	ldr	r3, [r7, #4]
 8013e2c:	681b      	ldr	r3, [r3, #0]
 8013e2e:	681a      	ldr	r2, [r3, #0]
 8013e30:	687b      	ldr	r3, [r7, #4]
 8013e32:	681b      	ldr	r3, [r3, #0]
 8013e34:	f042 0201 	orr.w	r2, r2, #1
 8013e38:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8013e3a:	2300      	movs	r3, #0
}
 8013e3c:	4618      	mov	r0, r3
 8013e3e:	3710      	adds	r7, #16
 8013e40:	46bd      	mov	sp, r7
 8013e42:	bd80      	pop	{r7, pc}
 8013e44:	40010000 	.word	0x40010000
 8013e48:	40010400 	.word	0x40010400
 8013e4c:	40000400 	.word	0x40000400
 8013e50:	40000800 	.word	0x40000800
 8013e54:	40000c00 	.word	0x40000c00
 8013e58:	40014000 	.word	0x40014000
 8013e5c:	40001800 	.word	0x40001800

08013e60 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8013e60:	b580      	push	{r7, lr}
 8013e62:	b082      	sub	sp, #8
 8013e64:	af00      	add	r7, sp, #0
 8013e66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8013e68:	687b      	ldr	r3, [r7, #4]
 8013e6a:	2b00      	cmp	r3, #0
 8013e6c:	d101      	bne.n	8013e72 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8013e6e:	2301      	movs	r3, #1
 8013e70:	e041      	b.n	8013ef6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8013e72:	687b      	ldr	r3, [r7, #4]
 8013e74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013e78:	b2db      	uxtb	r3, r3
 8013e7a:	2b00      	cmp	r3, #0
 8013e7c:	d106      	bne.n	8013e8c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8013e7e:	687b      	ldr	r3, [r7, #4]
 8013e80:	2200      	movs	r2, #0
 8013e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8013e86:	6878      	ldr	r0, [r7, #4]
 8013e88:	f000 f839 	bl	8013efe <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013e8c:	687b      	ldr	r3, [r7, #4]
 8013e8e:	2202      	movs	r2, #2
 8013e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8013e94:	687b      	ldr	r3, [r7, #4]
 8013e96:	681a      	ldr	r2, [r3, #0]
 8013e98:	687b      	ldr	r3, [r7, #4]
 8013e9a:	3304      	adds	r3, #4
 8013e9c:	4619      	mov	r1, r3
 8013e9e:	4610      	mov	r0, r2
 8013ea0:	f000 fe0e 	bl	8014ac0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8013ea4:	687b      	ldr	r3, [r7, #4]
 8013ea6:	2201      	movs	r2, #1
 8013ea8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8013eac:	687b      	ldr	r3, [r7, #4]
 8013eae:	2201      	movs	r2, #1
 8013eb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	2201      	movs	r2, #1
 8013eb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8013ebc:	687b      	ldr	r3, [r7, #4]
 8013ebe:	2201      	movs	r2, #1
 8013ec0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8013ec4:	687b      	ldr	r3, [r7, #4]
 8013ec6:	2201      	movs	r2, #1
 8013ec8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8013ecc:	687b      	ldr	r3, [r7, #4]
 8013ece:	2201      	movs	r2, #1
 8013ed0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8013ed4:	687b      	ldr	r3, [r7, #4]
 8013ed6:	2201      	movs	r2, #1
 8013ed8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8013edc:	687b      	ldr	r3, [r7, #4]
 8013ede:	2201      	movs	r2, #1
 8013ee0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013ee4:	687b      	ldr	r3, [r7, #4]
 8013ee6:	2201      	movs	r2, #1
 8013ee8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8013eec:	687b      	ldr	r3, [r7, #4]
 8013eee:	2201      	movs	r2, #1
 8013ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8013ef4:	2300      	movs	r3, #0
}
 8013ef6:	4618      	mov	r0, r3
 8013ef8:	3708      	adds	r7, #8
 8013efa:	46bd      	mov	sp, r7
 8013efc:	bd80      	pop	{r7, pc}

08013efe <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8013efe:	b480      	push	{r7}
 8013f00:	b083      	sub	sp, #12
 8013f02:	af00      	add	r7, sp, #0
 8013f04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8013f06:	bf00      	nop
 8013f08:	370c      	adds	r7, #12
 8013f0a:	46bd      	mov	sp, r7
 8013f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f10:	4770      	bx	lr
	...

08013f14 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8013f14:	b580      	push	{r7, lr}
 8013f16:	b084      	sub	sp, #16
 8013f18:	af00      	add	r7, sp, #0
 8013f1a:	6078      	str	r0, [r7, #4]
 8013f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8013f1e:	683b      	ldr	r3, [r7, #0]
 8013f20:	2b00      	cmp	r3, #0
 8013f22:	d104      	bne.n	8013f2e <HAL_TIM_IC_Start+0x1a>
 8013f24:	687b      	ldr	r3, [r7, #4]
 8013f26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8013f2a:	b2db      	uxtb	r3, r3
 8013f2c:	e013      	b.n	8013f56 <HAL_TIM_IC_Start+0x42>
 8013f2e:	683b      	ldr	r3, [r7, #0]
 8013f30:	2b04      	cmp	r3, #4
 8013f32:	d104      	bne.n	8013f3e <HAL_TIM_IC_Start+0x2a>
 8013f34:	687b      	ldr	r3, [r7, #4]
 8013f36:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8013f3a:	b2db      	uxtb	r3, r3
 8013f3c:	e00b      	b.n	8013f56 <HAL_TIM_IC_Start+0x42>
 8013f3e:	683b      	ldr	r3, [r7, #0]
 8013f40:	2b08      	cmp	r3, #8
 8013f42:	d104      	bne.n	8013f4e <HAL_TIM_IC_Start+0x3a>
 8013f44:	687b      	ldr	r3, [r7, #4]
 8013f46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013f4a:	b2db      	uxtb	r3, r3
 8013f4c:	e003      	b.n	8013f56 <HAL_TIM_IC_Start+0x42>
 8013f4e:	687b      	ldr	r3, [r7, #4]
 8013f50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8013f54:	b2db      	uxtb	r3, r3
 8013f56:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8013f58:	683b      	ldr	r3, [r7, #0]
 8013f5a:	2b00      	cmp	r3, #0
 8013f5c:	d104      	bne.n	8013f68 <HAL_TIM_IC_Start+0x54>
 8013f5e:	687b      	ldr	r3, [r7, #4]
 8013f60:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013f64:	b2db      	uxtb	r3, r3
 8013f66:	e013      	b.n	8013f90 <HAL_TIM_IC_Start+0x7c>
 8013f68:	683b      	ldr	r3, [r7, #0]
 8013f6a:	2b04      	cmp	r3, #4
 8013f6c:	d104      	bne.n	8013f78 <HAL_TIM_IC_Start+0x64>
 8013f6e:	687b      	ldr	r3, [r7, #4]
 8013f70:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8013f74:	b2db      	uxtb	r3, r3
 8013f76:	e00b      	b.n	8013f90 <HAL_TIM_IC_Start+0x7c>
 8013f78:	683b      	ldr	r3, [r7, #0]
 8013f7a:	2b08      	cmp	r3, #8
 8013f7c:	d104      	bne.n	8013f88 <HAL_TIM_IC_Start+0x74>
 8013f7e:	687b      	ldr	r3, [r7, #4]
 8013f80:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013f84:	b2db      	uxtb	r3, r3
 8013f86:	e003      	b.n	8013f90 <HAL_TIM_IC_Start+0x7c>
 8013f88:	687b      	ldr	r3, [r7, #4]
 8013f8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013f8e:	b2db      	uxtb	r3, r3
 8013f90:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8013f92:	7bfb      	ldrb	r3, [r7, #15]
 8013f94:	2b01      	cmp	r3, #1
 8013f96:	d102      	bne.n	8013f9e <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8013f98:	7bbb      	ldrb	r3, [r7, #14]
 8013f9a:	2b01      	cmp	r3, #1
 8013f9c:	d001      	beq.n	8013fa2 <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 8013f9e:	2301      	movs	r3, #1
 8013fa0:	e081      	b.n	80140a6 <HAL_TIM_IC_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8013fa2:	683b      	ldr	r3, [r7, #0]
 8013fa4:	2b00      	cmp	r3, #0
 8013fa6:	d104      	bne.n	8013fb2 <HAL_TIM_IC_Start+0x9e>
 8013fa8:	687b      	ldr	r3, [r7, #4]
 8013faa:	2202      	movs	r2, #2
 8013fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8013fb0:	e013      	b.n	8013fda <HAL_TIM_IC_Start+0xc6>
 8013fb2:	683b      	ldr	r3, [r7, #0]
 8013fb4:	2b04      	cmp	r3, #4
 8013fb6:	d104      	bne.n	8013fc2 <HAL_TIM_IC_Start+0xae>
 8013fb8:	687b      	ldr	r3, [r7, #4]
 8013fba:	2202      	movs	r2, #2
 8013fbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8013fc0:	e00b      	b.n	8013fda <HAL_TIM_IC_Start+0xc6>
 8013fc2:	683b      	ldr	r3, [r7, #0]
 8013fc4:	2b08      	cmp	r3, #8
 8013fc6:	d104      	bne.n	8013fd2 <HAL_TIM_IC_Start+0xbe>
 8013fc8:	687b      	ldr	r3, [r7, #4]
 8013fca:	2202      	movs	r2, #2
 8013fcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8013fd0:	e003      	b.n	8013fda <HAL_TIM_IC_Start+0xc6>
 8013fd2:	687b      	ldr	r3, [r7, #4]
 8013fd4:	2202      	movs	r2, #2
 8013fd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8013fda:	683b      	ldr	r3, [r7, #0]
 8013fdc:	2b00      	cmp	r3, #0
 8013fde:	d104      	bne.n	8013fea <HAL_TIM_IC_Start+0xd6>
 8013fe0:	687b      	ldr	r3, [r7, #4]
 8013fe2:	2202      	movs	r2, #2
 8013fe4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8013fe8:	e013      	b.n	8014012 <HAL_TIM_IC_Start+0xfe>
 8013fea:	683b      	ldr	r3, [r7, #0]
 8013fec:	2b04      	cmp	r3, #4
 8013fee:	d104      	bne.n	8013ffa <HAL_TIM_IC_Start+0xe6>
 8013ff0:	687b      	ldr	r3, [r7, #4]
 8013ff2:	2202      	movs	r2, #2
 8013ff4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8013ff8:	e00b      	b.n	8014012 <HAL_TIM_IC_Start+0xfe>
 8013ffa:	683b      	ldr	r3, [r7, #0]
 8013ffc:	2b08      	cmp	r3, #8
 8013ffe:	d104      	bne.n	801400a <HAL_TIM_IC_Start+0xf6>
 8014000:	687b      	ldr	r3, [r7, #4]
 8014002:	2202      	movs	r2, #2
 8014004:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014008:	e003      	b.n	8014012 <HAL_TIM_IC_Start+0xfe>
 801400a:	687b      	ldr	r3, [r7, #4]
 801400c:	2202      	movs	r2, #2
 801400e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8014012:	687b      	ldr	r3, [r7, #4]
 8014014:	681b      	ldr	r3, [r3, #0]
 8014016:	2201      	movs	r2, #1
 8014018:	6839      	ldr	r1, [r7, #0]
 801401a:	4618      	mov	r0, r3
 801401c:	f001 f9f6 	bl	801540c <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8014020:	687b      	ldr	r3, [r7, #4]
 8014022:	681b      	ldr	r3, [r3, #0]
 8014024:	4a22      	ldr	r2, [pc, #136]	; (80140b0 <HAL_TIM_IC_Start+0x19c>)
 8014026:	4293      	cmp	r3, r2
 8014028:	d022      	beq.n	8014070 <HAL_TIM_IC_Start+0x15c>
 801402a:	687b      	ldr	r3, [r7, #4]
 801402c:	681b      	ldr	r3, [r3, #0]
 801402e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014032:	d01d      	beq.n	8014070 <HAL_TIM_IC_Start+0x15c>
 8014034:	687b      	ldr	r3, [r7, #4]
 8014036:	681b      	ldr	r3, [r3, #0]
 8014038:	4a1e      	ldr	r2, [pc, #120]	; (80140b4 <HAL_TIM_IC_Start+0x1a0>)
 801403a:	4293      	cmp	r3, r2
 801403c:	d018      	beq.n	8014070 <HAL_TIM_IC_Start+0x15c>
 801403e:	687b      	ldr	r3, [r7, #4]
 8014040:	681b      	ldr	r3, [r3, #0]
 8014042:	4a1d      	ldr	r2, [pc, #116]	; (80140b8 <HAL_TIM_IC_Start+0x1a4>)
 8014044:	4293      	cmp	r3, r2
 8014046:	d013      	beq.n	8014070 <HAL_TIM_IC_Start+0x15c>
 8014048:	687b      	ldr	r3, [r7, #4]
 801404a:	681b      	ldr	r3, [r3, #0]
 801404c:	4a1b      	ldr	r2, [pc, #108]	; (80140bc <HAL_TIM_IC_Start+0x1a8>)
 801404e:	4293      	cmp	r3, r2
 8014050:	d00e      	beq.n	8014070 <HAL_TIM_IC_Start+0x15c>
 8014052:	687b      	ldr	r3, [r7, #4]
 8014054:	681b      	ldr	r3, [r3, #0]
 8014056:	4a1a      	ldr	r2, [pc, #104]	; (80140c0 <HAL_TIM_IC_Start+0x1ac>)
 8014058:	4293      	cmp	r3, r2
 801405a:	d009      	beq.n	8014070 <HAL_TIM_IC_Start+0x15c>
 801405c:	687b      	ldr	r3, [r7, #4]
 801405e:	681b      	ldr	r3, [r3, #0]
 8014060:	4a18      	ldr	r2, [pc, #96]	; (80140c4 <HAL_TIM_IC_Start+0x1b0>)
 8014062:	4293      	cmp	r3, r2
 8014064:	d004      	beq.n	8014070 <HAL_TIM_IC_Start+0x15c>
 8014066:	687b      	ldr	r3, [r7, #4]
 8014068:	681b      	ldr	r3, [r3, #0]
 801406a:	4a17      	ldr	r2, [pc, #92]	; (80140c8 <HAL_TIM_IC_Start+0x1b4>)
 801406c:	4293      	cmp	r3, r2
 801406e:	d111      	bne.n	8014094 <HAL_TIM_IC_Start+0x180>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8014070:	687b      	ldr	r3, [r7, #4]
 8014072:	681b      	ldr	r3, [r3, #0]
 8014074:	689b      	ldr	r3, [r3, #8]
 8014076:	f003 0307 	and.w	r3, r3, #7
 801407a:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801407c:	68bb      	ldr	r3, [r7, #8]
 801407e:	2b06      	cmp	r3, #6
 8014080:	d010      	beq.n	80140a4 <HAL_TIM_IC_Start+0x190>
    {
      __HAL_TIM_ENABLE(htim);
 8014082:	687b      	ldr	r3, [r7, #4]
 8014084:	681b      	ldr	r3, [r3, #0]
 8014086:	681a      	ldr	r2, [r3, #0]
 8014088:	687b      	ldr	r3, [r7, #4]
 801408a:	681b      	ldr	r3, [r3, #0]
 801408c:	f042 0201 	orr.w	r2, r2, #1
 8014090:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8014092:	e007      	b.n	80140a4 <HAL_TIM_IC_Start+0x190>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8014094:	687b      	ldr	r3, [r7, #4]
 8014096:	681b      	ldr	r3, [r3, #0]
 8014098:	681a      	ldr	r2, [r3, #0]
 801409a:	687b      	ldr	r3, [r7, #4]
 801409c:	681b      	ldr	r3, [r3, #0]
 801409e:	f042 0201 	orr.w	r2, r2, #1
 80140a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80140a4:	2300      	movs	r3, #0
}
 80140a6:	4618      	mov	r0, r3
 80140a8:	3710      	adds	r7, #16
 80140aa:	46bd      	mov	sp, r7
 80140ac:	bd80      	pop	{r7, pc}
 80140ae:	bf00      	nop
 80140b0:	40010000 	.word	0x40010000
 80140b4:	40000400 	.word	0x40000400
 80140b8:	40000800 	.word	0x40000800
 80140bc:	40000c00 	.word	0x40000c00
 80140c0:	40010400 	.word	0x40010400
 80140c4:	40014000 	.word	0x40014000
 80140c8:	40001800 	.word	0x40001800

080140cc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80140cc:	b580      	push	{r7, lr}
 80140ce:	b084      	sub	sp, #16
 80140d0:	af00      	add	r7, sp, #0
 80140d2:	6078      	str	r0, [r7, #4]
 80140d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80140d6:	2300      	movs	r3, #0
 80140d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80140da:	683b      	ldr	r3, [r7, #0]
 80140dc:	2b00      	cmp	r3, #0
 80140de:	d104      	bne.n	80140ea <HAL_TIM_IC_Start_IT+0x1e>
 80140e0:	687b      	ldr	r3, [r7, #4]
 80140e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80140e6:	b2db      	uxtb	r3, r3
 80140e8:	e013      	b.n	8014112 <HAL_TIM_IC_Start_IT+0x46>
 80140ea:	683b      	ldr	r3, [r7, #0]
 80140ec:	2b04      	cmp	r3, #4
 80140ee:	d104      	bne.n	80140fa <HAL_TIM_IC_Start_IT+0x2e>
 80140f0:	687b      	ldr	r3, [r7, #4]
 80140f2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80140f6:	b2db      	uxtb	r3, r3
 80140f8:	e00b      	b.n	8014112 <HAL_TIM_IC_Start_IT+0x46>
 80140fa:	683b      	ldr	r3, [r7, #0]
 80140fc:	2b08      	cmp	r3, #8
 80140fe:	d104      	bne.n	801410a <HAL_TIM_IC_Start_IT+0x3e>
 8014100:	687b      	ldr	r3, [r7, #4]
 8014102:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014106:	b2db      	uxtb	r3, r3
 8014108:	e003      	b.n	8014112 <HAL_TIM_IC_Start_IT+0x46>
 801410a:	687b      	ldr	r3, [r7, #4]
 801410c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8014110:	b2db      	uxtb	r3, r3
 8014112:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8014114:	683b      	ldr	r3, [r7, #0]
 8014116:	2b00      	cmp	r3, #0
 8014118:	d104      	bne.n	8014124 <HAL_TIM_IC_Start_IT+0x58>
 801411a:	687b      	ldr	r3, [r7, #4]
 801411c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014120:	b2db      	uxtb	r3, r3
 8014122:	e013      	b.n	801414c <HAL_TIM_IC_Start_IT+0x80>
 8014124:	683b      	ldr	r3, [r7, #0]
 8014126:	2b04      	cmp	r3, #4
 8014128:	d104      	bne.n	8014134 <HAL_TIM_IC_Start_IT+0x68>
 801412a:	687b      	ldr	r3, [r7, #4]
 801412c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014130:	b2db      	uxtb	r3, r3
 8014132:	e00b      	b.n	801414c <HAL_TIM_IC_Start_IT+0x80>
 8014134:	683b      	ldr	r3, [r7, #0]
 8014136:	2b08      	cmp	r3, #8
 8014138:	d104      	bne.n	8014144 <HAL_TIM_IC_Start_IT+0x78>
 801413a:	687b      	ldr	r3, [r7, #4]
 801413c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014140:	b2db      	uxtb	r3, r3
 8014142:	e003      	b.n	801414c <HAL_TIM_IC_Start_IT+0x80>
 8014144:	687b      	ldr	r3, [r7, #4]
 8014146:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801414a:	b2db      	uxtb	r3, r3
 801414c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 801414e:	7bbb      	ldrb	r3, [r7, #14]
 8014150:	2b01      	cmp	r3, #1
 8014152:	d102      	bne.n	801415a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8014154:	7b7b      	ldrb	r3, [r7, #13]
 8014156:	2b01      	cmp	r3, #1
 8014158:	d001      	beq.n	801415e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 801415a:	2301      	movs	r3, #1
 801415c:	e0cc      	b.n	80142f8 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801415e:	683b      	ldr	r3, [r7, #0]
 8014160:	2b00      	cmp	r3, #0
 8014162:	d104      	bne.n	801416e <HAL_TIM_IC_Start_IT+0xa2>
 8014164:	687b      	ldr	r3, [r7, #4]
 8014166:	2202      	movs	r2, #2
 8014168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801416c:	e013      	b.n	8014196 <HAL_TIM_IC_Start_IT+0xca>
 801416e:	683b      	ldr	r3, [r7, #0]
 8014170:	2b04      	cmp	r3, #4
 8014172:	d104      	bne.n	801417e <HAL_TIM_IC_Start_IT+0xb2>
 8014174:	687b      	ldr	r3, [r7, #4]
 8014176:	2202      	movs	r2, #2
 8014178:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801417c:	e00b      	b.n	8014196 <HAL_TIM_IC_Start_IT+0xca>
 801417e:	683b      	ldr	r3, [r7, #0]
 8014180:	2b08      	cmp	r3, #8
 8014182:	d104      	bne.n	801418e <HAL_TIM_IC_Start_IT+0xc2>
 8014184:	687b      	ldr	r3, [r7, #4]
 8014186:	2202      	movs	r2, #2
 8014188:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801418c:	e003      	b.n	8014196 <HAL_TIM_IC_Start_IT+0xca>
 801418e:	687b      	ldr	r3, [r7, #4]
 8014190:	2202      	movs	r2, #2
 8014192:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8014196:	683b      	ldr	r3, [r7, #0]
 8014198:	2b00      	cmp	r3, #0
 801419a:	d104      	bne.n	80141a6 <HAL_TIM_IC_Start_IT+0xda>
 801419c:	687b      	ldr	r3, [r7, #4]
 801419e:	2202      	movs	r2, #2
 80141a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80141a4:	e013      	b.n	80141ce <HAL_TIM_IC_Start_IT+0x102>
 80141a6:	683b      	ldr	r3, [r7, #0]
 80141a8:	2b04      	cmp	r3, #4
 80141aa:	d104      	bne.n	80141b6 <HAL_TIM_IC_Start_IT+0xea>
 80141ac:	687b      	ldr	r3, [r7, #4]
 80141ae:	2202      	movs	r2, #2
 80141b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80141b4:	e00b      	b.n	80141ce <HAL_TIM_IC_Start_IT+0x102>
 80141b6:	683b      	ldr	r3, [r7, #0]
 80141b8:	2b08      	cmp	r3, #8
 80141ba:	d104      	bne.n	80141c6 <HAL_TIM_IC_Start_IT+0xfa>
 80141bc:	687b      	ldr	r3, [r7, #4]
 80141be:	2202      	movs	r2, #2
 80141c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80141c4:	e003      	b.n	80141ce <HAL_TIM_IC_Start_IT+0x102>
 80141c6:	687b      	ldr	r3, [r7, #4]
 80141c8:	2202      	movs	r2, #2
 80141ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80141ce:	683b      	ldr	r3, [r7, #0]
 80141d0:	2b0c      	cmp	r3, #12
 80141d2:	d841      	bhi.n	8014258 <HAL_TIM_IC_Start_IT+0x18c>
 80141d4:	a201      	add	r2, pc, #4	; (adr r2, 80141dc <HAL_TIM_IC_Start_IT+0x110>)
 80141d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80141da:	bf00      	nop
 80141dc:	08014211 	.word	0x08014211
 80141e0:	08014259 	.word	0x08014259
 80141e4:	08014259 	.word	0x08014259
 80141e8:	08014259 	.word	0x08014259
 80141ec:	08014223 	.word	0x08014223
 80141f0:	08014259 	.word	0x08014259
 80141f4:	08014259 	.word	0x08014259
 80141f8:	08014259 	.word	0x08014259
 80141fc:	08014235 	.word	0x08014235
 8014200:	08014259 	.word	0x08014259
 8014204:	08014259 	.word	0x08014259
 8014208:	08014259 	.word	0x08014259
 801420c:	08014247 	.word	0x08014247
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8014210:	687b      	ldr	r3, [r7, #4]
 8014212:	681b      	ldr	r3, [r3, #0]
 8014214:	68da      	ldr	r2, [r3, #12]
 8014216:	687b      	ldr	r3, [r7, #4]
 8014218:	681b      	ldr	r3, [r3, #0]
 801421a:	f042 0202 	orr.w	r2, r2, #2
 801421e:	60da      	str	r2, [r3, #12]
      break;
 8014220:	e01d      	b.n	801425e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8014222:	687b      	ldr	r3, [r7, #4]
 8014224:	681b      	ldr	r3, [r3, #0]
 8014226:	68da      	ldr	r2, [r3, #12]
 8014228:	687b      	ldr	r3, [r7, #4]
 801422a:	681b      	ldr	r3, [r3, #0]
 801422c:	f042 0204 	orr.w	r2, r2, #4
 8014230:	60da      	str	r2, [r3, #12]
      break;
 8014232:	e014      	b.n	801425e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8014234:	687b      	ldr	r3, [r7, #4]
 8014236:	681b      	ldr	r3, [r3, #0]
 8014238:	68da      	ldr	r2, [r3, #12]
 801423a:	687b      	ldr	r3, [r7, #4]
 801423c:	681b      	ldr	r3, [r3, #0]
 801423e:	f042 0208 	orr.w	r2, r2, #8
 8014242:	60da      	str	r2, [r3, #12]
      break;
 8014244:	e00b      	b.n	801425e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8014246:	687b      	ldr	r3, [r7, #4]
 8014248:	681b      	ldr	r3, [r3, #0]
 801424a:	68da      	ldr	r2, [r3, #12]
 801424c:	687b      	ldr	r3, [r7, #4]
 801424e:	681b      	ldr	r3, [r3, #0]
 8014250:	f042 0210 	orr.w	r2, r2, #16
 8014254:	60da      	str	r2, [r3, #12]
      break;
 8014256:	e002      	b.n	801425e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8014258:	2301      	movs	r3, #1
 801425a:	73fb      	strb	r3, [r7, #15]
      break;
 801425c:	bf00      	nop
  }

  if (status == HAL_OK)
 801425e:	7bfb      	ldrb	r3, [r7, #15]
 8014260:	2b00      	cmp	r3, #0
 8014262:	d148      	bne.n	80142f6 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8014264:	687b      	ldr	r3, [r7, #4]
 8014266:	681b      	ldr	r3, [r3, #0]
 8014268:	2201      	movs	r2, #1
 801426a:	6839      	ldr	r1, [r7, #0]
 801426c:	4618      	mov	r0, r3
 801426e:	f001 f8cd 	bl	801540c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8014272:	687b      	ldr	r3, [r7, #4]
 8014274:	681b      	ldr	r3, [r3, #0]
 8014276:	4a22      	ldr	r2, [pc, #136]	; (8014300 <HAL_TIM_IC_Start_IT+0x234>)
 8014278:	4293      	cmp	r3, r2
 801427a:	d022      	beq.n	80142c2 <HAL_TIM_IC_Start_IT+0x1f6>
 801427c:	687b      	ldr	r3, [r7, #4]
 801427e:	681b      	ldr	r3, [r3, #0]
 8014280:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014284:	d01d      	beq.n	80142c2 <HAL_TIM_IC_Start_IT+0x1f6>
 8014286:	687b      	ldr	r3, [r7, #4]
 8014288:	681b      	ldr	r3, [r3, #0]
 801428a:	4a1e      	ldr	r2, [pc, #120]	; (8014304 <HAL_TIM_IC_Start_IT+0x238>)
 801428c:	4293      	cmp	r3, r2
 801428e:	d018      	beq.n	80142c2 <HAL_TIM_IC_Start_IT+0x1f6>
 8014290:	687b      	ldr	r3, [r7, #4]
 8014292:	681b      	ldr	r3, [r3, #0]
 8014294:	4a1c      	ldr	r2, [pc, #112]	; (8014308 <HAL_TIM_IC_Start_IT+0x23c>)
 8014296:	4293      	cmp	r3, r2
 8014298:	d013      	beq.n	80142c2 <HAL_TIM_IC_Start_IT+0x1f6>
 801429a:	687b      	ldr	r3, [r7, #4]
 801429c:	681b      	ldr	r3, [r3, #0]
 801429e:	4a1b      	ldr	r2, [pc, #108]	; (801430c <HAL_TIM_IC_Start_IT+0x240>)
 80142a0:	4293      	cmp	r3, r2
 80142a2:	d00e      	beq.n	80142c2 <HAL_TIM_IC_Start_IT+0x1f6>
 80142a4:	687b      	ldr	r3, [r7, #4]
 80142a6:	681b      	ldr	r3, [r3, #0]
 80142a8:	4a19      	ldr	r2, [pc, #100]	; (8014310 <HAL_TIM_IC_Start_IT+0x244>)
 80142aa:	4293      	cmp	r3, r2
 80142ac:	d009      	beq.n	80142c2 <HAL_TIM_IC_Start_IT+0x1f6>
 80142ae:	687b      	ldr	r3, [r7, #4]
 80142b0:	681b      	ldr	r3, [r3, #0]
 80142b2:	4a18      	ldr	r2, [pc, #96]	; (8014314 <HAL_TIM_IC_Start_IT+0x248>)
 80142b4:	4293      	cmp	r3, r2
 80142b6:	d004      	beq.n	80142c2 <HAL_TIM_IC_Start_IT+0x1f6>
 80142b8:	687b      	ldr	r3, [r7, #4]
 80142ba:	681b      	ldr	r3, [r3, #0]
 80142bc:	4a16      	ldr	r2, [pc, #88]	; (8014318 <HAL_TIM_IC_Start_IT+0x24c>)
 80142be:	4293      	cmp	r3, r2
 80142c0:	d111      	bne.n	80142e6 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80142c2:	687b      	ldr	r3, [r7, #4]
 80142c4:	681b      	ldr	r3, [r3, #0]
 80142c6:	689b      	ldr	r3, [r3, #8]
 80142c8:	f003 0307 	and.w	r3, r3, #7
 80142cc:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80142ce:	68bb      	ldr	r3, [r7, #8]
 80142d0:	2b06      	cmp	r3, #6
 80142d2:	d010      	beq.n	80142f6 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 80142d4:	687b      	ldr	r3, [r7, #4]
 80142d6:	681b      	ldr	r3, [r3, #0]
 80142d8:	681a      	ldr	r2, [r3, #0]
 80142da:	687b      	ldr	r3, [r7, #4]
 80142dc:	681b      	ldr	r3, [r3, #0]
 80142de:	f042 0201 	orr.w	r2, r2, #1
 80142e2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80142e4:	e007      	b.n	80142f6 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80142e6:	687b      	ldr	r3, [r7, #4]
 80142e8:	681b      	ldr	r3, [r3, #0]
 80142ea:	681a      	ldr	r2, [r3, #0]
 80142ec:	687b      	ldr	r3, [r7, #4]
 80142ee:	681b      	ldr	r3, [r3, #0]
 80142f0:	f042 0201 	orr.w	r2, r2, #1
 80142f4:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80142f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80142f8:	4618      	mov	r0, r3
 80142fa:	3710      	adds	r7, #16
 80142fc:	46bd      	mov	sp, r7
 80142fe:	bd80      	pop	{r7, pc}
 8014300:	40010000 	.word	0x40010000
 8014304:	40000400 	.word	0x40000400
 8014308:	40000800 	.word	0x40000800
 801430c:	40000c00 	.word	0x40000c00
 8014310:	40010400 	.word	0x40010400
 8014314:	40014000 	.word	0x40014000
 8014318:	40001800 	.word	0x40001800

0801431c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801431c:	b580      	push	{r7, lr}
 801431e:	b082      	sub	sp, #8
 8014320:	af00      	add	r7, sp, #0
 8014322:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8014324:	687b      	ldr	r3, [r7, #4]
 8014326:	681b      	ldr	r3, [r3, #0]
 8014328:	691b      	ldr	r3, [r3, #16]
 801432a:	f003 0302 	and.w	r3, r3, #2
 801432e:	2b02      	cmp	r3, #2
 8014330:	d122      	bne.n	8014378 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8014332:	687b      	ldr	r3, [r7, #4]
 8014334:	681b      	ldr	r3, [r3, #0]
 8014336:	68db      	ldr	r3, [r3, #12]
 8014338:	f003 0302 	and.w	r3, r3, #2
 801433c:	2b02      	cmp	r3, #2
 801433e:	d11b      	bne.n	8014378 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	681b      	ldr	r3, [r3, #0]
 8014344:	f06f 0202 	mvn.w	r2, #2
 8014348:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801434a:	687b      	ldr	r3, [r7, #4]
 801434c:	2201      	movs	r2, #1
 801434e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8014350:	687b      	ldr	r3, [r7, #4]
 8014352:	681b      	ldr	r3, [r3, #0]
 8014354:	699b      	ldr	r3, [r3, #24]
 8014356:	f003 0303 	and.w	r3, r3, #3
 801435a:	2b00      	cmp	r3, #0
 801435c:	d003      	beq.n	8014366 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801435e:	6878      	ldr	r0, [r7, #4]
 8014360:	f7ed fc7c 	bl	8001c5c <HAL_TIM_IC_CaptureCallback>
 8014364:	e005      	b.n	8014372 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8014366:	6878      	ldr	r0, [r7, #4]
 8014368:	f000 fb8c 	bl	8014a84 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801436c:	6878      	ldr	r0, [r7, #4]
 801436e:	f000 fb93 	bl	8014a98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8014372:	687b      	ldr	r3, [r7, #4]
 8014374:	2200      	movs	r2, #0
 8014376:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8014378:	687b      	ldr	r3, [r7, #4]
 801437a:	681b      	ldr	r3, [r3, #0]
 801437c:	691b      	ldr	r3, [r3, #16]
 801437e:	f003 0304 	and.w	r3, r3, #4
 8014382:	2b04      	cmp	r3, #4
 8014384:	d122      	bne.n	80143cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8014386:	687b      	ldr	r3, [r7, #4]
 8014388:	681b      	ldr	r3, [r3, #0]
 801438a:	68db      	ldr	r3, [r3, #12]
 801438c:	f003 0304 	and.w	r3, r3, #4
 8014390:	2b04      	cmp	r3, #4
 8014392:	d11b      	bne.n	80143cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8014394:	687b      	ldr	r3, [r7, #4]
 8014396:	681b      	ldr	r3, [r3, #0]
 8014398:	f06f 0204 	mvn.w	r2, #4
 801439c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801439e:	687b      	ldr	r3, [r7, #4]
 80143a0:	2202      	movs	r2, #2
 80143a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80143a4:	687b      	ldr	r3, [r7, #4]
 80143a6:	681b      	ldr	r3, [r3, #0]
 80143a8:	699b      	ldr	r3, [r3, #24]
 80143aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80143ae:	2b00      	cmp	r3, #0
 80143b0:	d003      	beq.n	80143ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80143b2:	6878      	ldr	r0, [r7, #4]
 80143b4:	f7ed fc52 	bl	8001c5c <HAL_TIM_IC_CaptureCallback>
 80143b8:	e005      	b.n	80143c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80143ba:	6878      	ldr	r0, [r7, #4]
 80143bc:	f000 fb62 	bl	8014a84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80143c0:	6878      	ldr	r0, [r7, #4]
 80143c2:	f000 fb69 	bl	8014a98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80143c6:	687b      	ldr	r3, [r7, #4]
 80143c8:	2200      	movs	r2, #0
 80143ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80143cc:	687b      	ldr	r3, [r7, #4]
 80143ce:	681b      	ldr	r3, [r3, #0]
 80143d0:	691b      	ldr	r3, [r3, #16]
 80143d2:	f003 0308 	and.w	r3, r3, #8
 80143d6:	2b08      	cmp	r3, #8
 80143d8:	d122      	bne.n	8014420 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80143da:	687b      	ldr	r3, [r7, #4]
 80143dc:	681b      	ldr	r3, [r3, #0]
 80143de:	68db      	ldr	r3, [r3, #12]
 80143e0:	f003 0308 	and.w	r3, r3, #8
 80143e4:	2b08      	cmp	r3, #8
 80143e6:	d11b      	bne.n	8014420 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80143e8:	687b      	ldr	r3, [r7, #4]
 80143ea:	681b      	ldr	r3, [r3, #0]
 80143ec:	f06f 0208 	mvn.w	r2, #8
 80143f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80143f2:	687b      	ldr	r3, [r7, #4]
 80143f4:	2204      	movs	r2, #4
 80143f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80143f8:	687b      	ldr	r3, [r7, #4]
 80143fa:	681b      	ldr	r3, [r3, #0]
 80143fc:	69db      	ldr	r3, [r3, #28]
 80143fe:	f003 0303 	and.w	r3, r3, #3
 8014402:	2b00      	cmp	r3, #0
 8014404:	d003      	beq.n	801440e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8014406:	6878      	ldr	r0, [r7, #4]
 8014408:	f7ed fc28 	bl	8001c5c <HAL_TIM_IC_CaptureCallback>
 801440c:	e005      	b.n	801441a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801440e:	6878      	ldr	r0, [r7, #4]
 8014410:	f000 fb38 	bl	8014a84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8014414:	6878      	ldr	r0, [r7, #4]
 8014416:	f000 fb3f 	bl	8014a98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801441a:	687b      	ldr	r3, [r7, #4]
 801441c:	2200      	movs	r2, #0
 801441e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8014420:	687b      	ldr	r3, [r7, #4]
 8014422:	681b      	ldr	r3, [r3, #0]
 8014424:	691b      	ldr	r3, [r3, #16]
 8014426:	f003 0310 	and.w	r3, r3, #16
 801442a:	2b10      	cmp	r3, #16
 801442c:	d122      	bne.n	8014474 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801442e:	687b      	ldr	r3, [r7, #4]
 8014430:	681b      	ldr	r3, [r3, #0]
 8014432:	68db      	ldr	r3, [r3, #12]
 8014434:	f003 0310 	and.w	r3, r3, #16
 8014438:	2b10      	cmp	r3, #16
 801443a:	d11b      	bne.n	8014474 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801443c:	687b      	ldr	r3, [r7, #4]
 801443e:	681b      	ldr	r3, [r3, #0]
 8014440:	f06f 0210 	mvn.w	r2, #16
 8014444:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8014446:	687b      	ldr	r3, [r7, #4]
 8014448:	2208      	movs	r2, #8
 801444a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801444c:	687b      	ldr	r3, [r7, #4]
 801444e:	681b      	ldr	r3, [r3, #0]
 8014450:	69db      	ldr	r3, [r3, #28]
 8014452:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8014456:	2b00      	cmp	r3, #0
 8014458:	d003      	beq.n	8014462 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801445a:	6878      	ldr	r0, [r7, #4]
 801445c:	f7ed fbfe 	bl	8001c5c <HAL_TIM_IC_CaptureCallback>
 8014460:	e005      	b.n	801446e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8014462:	6878      	ldr	r0, [r7, #4]
 8014464:	f000 fb0e 	bl	8014a84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8014468:	6878      	ldr	r0, [r7, #4]
 801446a:	f000 fb15 	bl	8014a98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801446e:	687b      	ldr	r3, [r7, #4]
 8014470:	2200      	movs	r2, #0
 8014472:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8014474:	687b      	ldr	r3, [r7, #4]
 8014476:	681b      	ldr	r3, [r3, #0]
 8014478:	691b      	ldr	r3, [r3, #16]
 801447a:	f003 0301 	and.w	r3, r3, #1
 801447e:	2b01      	cmp	r3, #1
 8014480:	d10e      	bne.n	80144a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8014482:	687b      	ldr	r3, [r7, #4]
 8014484:	681b      	ldr	r3, [r3, #0]
 8014486:	68db      	ldr	r3, [r3, #12]
 8014488:	f003 0301 	and.w	r3, r3, #1
 801448c:	2b01      	cmp	r3, #1
 801448e:	d107      	bne.n	80144a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8014490:	687b      	ldr	r3, [r7, #4]
 8014492:	681b      	ldr	r3, [r3, #0]
 8014494:	f06f 0201 	mvn.w	r2, #1
 8014498:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801449a:	6878      	ldr	r0, [r7, #4]
 801449c:	f7ef fa16 	bl	80038cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80144a0:	687b      	ldr	r3, [r7, #4]
 80144a2:	681b      	ldr	r3, [r3, #0]
 80144a4:	691b      	ldr	r3, [r3, #16]
 80144a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80144aa:	2b80      	cmp	r3, #128	; 0x80
 80144ac:	d10e      	bne.n	80144cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80144ae:	687b      	ldr	r3, [r7, #4]
 80144b0:	681b      	ldr	r3, [r3, #0]
 80144b2:	68db      	ldr	r3, [r3, #12]
 80144b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80144b8:	2b80      	cmp	r3, #128	; 0x80
 80144ba:	d107      	bne.n	80144cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80144bc:	687b      	ldr	r3, [r7, #4]
 80144be:	681b      	ldr	r3, [r3, #0]
 80144c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80144c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80144c6:	6878      	ldr	r0, [r7, #4]
 80144c8:	f001 f89e 	bl	8015608 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80144cc:	687b      	ldr	r3, [r7, #4]
 80144ce:	681b      	ldr	r3, [r3, #0]
 80144d0:	691b      	ldr	r3, [r3, #16]
 80144d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80144d6:	2b40      	cmp	r3, #64	; 0x40
 80144d8:	d10e      	bne.n	80144f8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80144da:	687b      	ldr	r3, [r7, #4]
 80144dc:	681b      	ldr	r3, [r3, #0]
 80144de:	68db      	ldr	r3, [r3, #12]
 80144e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80144e4:	2b40      	cmp	r3, #64	; 0x40
 80144e6:	d107      	bne.n	80144f8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80144e8:	687b      	ldr	r3, [r7, #4]
 80144ea:	681b      	ldr	r3, [r3, #0]
 80144ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80144f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80144f2:	6878      	ldr	r0, [r7, #4]
 80144f4:	f000 fada 	bl	8014aac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80144f8:	687b      	ldr	r3, [r7, #4]
 80144fa:	681b      	ldr	r3, [r3, #0]
 80144fc:	691b      	ldr	r3, [r3, #16]
 80144fe:	f003 0320 	and.w	r3, r3, #32
 8014502:	2b20      	cmp	r3, #32
 8014504:	d10e      	bne.n	8014524 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8014506:	687b      	ldr	r3, [r7, #4]
 8014508:	681b      	ldr	r3, [r3, #0]
 801450a:	68db      	ldr	r3, [r3, #12]
 801450c:	f003 0320 	and.w	r3, r3, #32
 8014510:	2b20      	cmp	r3, #32
 8014512:	d107      	bne.n	8014524 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8014514:	687b      	ldr	r3, [r7, #4]
 8014516:	681b      	ldr	r3, [r3, #0]
 8014518:	f06f 0220 	mvn.w	r2, #32
 801451c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801451e:	6878      	ldr	r0, [r7, #4]
 8014520:	f001 f868 	bl	80155f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8014524:	bf00      	nop
 8014526:	3708      	adds	r7, #8
 8014528:	46bd      	mov	sp, r7
 801452a:	bd80      	pop	{r7, pc}

0801452c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 801452c:	b580      	push	{r7, lr}
 801452e:	b086      	sub	sp, #24
 8014530:	af00      	add	r7, sp, #0
 8014532:	60f8      	str	r0, [r7, #12]
 8014534:	60b9      	str	r1, [r7, #8]
 8014536:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8014538:	2300      	movs	r3, #0
 801453a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 801453c:	68fb      	ldr	r3, [r7, #12]
 801453e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8014542:	2b01      	cmp	r3, #1
 8014544:	d101      	bne.n	801454a <HAL_TIM_IC_ConfigChannel+0x1e>
 8014546:	2302      	movs	r3, #2
 8014548:	e088      	b.n	801465c <HAL_TIM_IC_ConfigChannel+0x130>
 801454a:	68fb      	ldr	r3, [r7, #12]
 801454c:	2201      	movs	r2, #1
 801454e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8014552:	687b      	ldr	r3, [r7, #4]
 8014554:	2b00      	cmp	r3, #0
 8014556:	d11b      	bne.n	8014590 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8014558:	68fb      	ldr	r3, [r7, #12]
 801455a:	6818      	ldr	r0, [r3, #0]
 801455c:	68bb      	ldr	r3, [r7, #8]
 801455e:	6819      	ldr	r1, [r3, #0]
 8014560:	68bb      	ldr	r3, [r7, #8]
 8014562:	685a      	ldr	r2, [r3, #4]
 8014564:	68bb      	ldr	r3, [r7, #8]
 8014566:	68db      	ldr	r3, [r3, #12]
 8014568:	f000 fd8c 	bl	8015084 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 801456c:	68fb      	ldr	r3, [r7, #12]
 801456e:	681b      	ldr	r3, [r3, #0]
 8014570:	699a      	ldr	r2, [r3, #24]
 8014572:	68fb      	ldr	r3, [r7, #12]
 8014574:	681b      	ldr	r3, [r3, #0]
 8014576:	f022 020c 	bic.w	r2, r2, #12
 801457a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 801457c:	68fb      	ldr	r3, [r7, #12]
 801457e:	681b      	ldr	r3, [r3, #0]
 8014580:	6999      	ldr	r1, [r3, #24]
 8014582:	68bb      	ldr	r3, [r7, #8]
 8014584:	689a      	ldr	r2, [r3, #8]
 8014586:	68fb      	ldr	r3, [r7, #12]
 8014588:	681b      	ldr	r3, [r3, #0]
 801458a:	430a      	orrs	r2, r1
 801458c:	619a      	str	r2, [r3, #24]
 801458e:	e060      	b.n	8014652 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8014590:	687b      	ldr	r3, [r7, #4]
 8014592:	2b04      	cmp	r3, #4
 8014594:	d11c      	bne.n	80145d0 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8014596:	68fb      	ldr	r3, [r7, #12]
 8014598:	6818      	ldr	r0, [r3, #0]
 801459a:	68bb      	ldr	r3, [r7, #8]
 801459c:	6819      	ldr	r1, [r3, #0]
 801459e:	68bb      	ldr	r3, [r7, #8]
 80145a0:	685a      	ldr	r2, [r3, #4]
 80145a2:	68bb      	ldr	r3, [r7, #8]
 80145a4:	68db      	ldr	r3, [r3, #12]
 80145a6:	f000 fe10 	bl	80151ca <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80145aa:	68fb      	ldr	r3, [r7, #12]
 80145ac:	681b      	ldr	r3, [r3, #0]
 80145ae:	699a      	ldr	r2, [r3, #24]
 80145b0:	68fb      	ldr	r3, [r7, #12]
 80145b2:	681b      	ldr	r3, [r3, #0]
 80145b4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80145b8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80145ba:	68fb      	ldr	r3, [r7, #12]
 80145bc:	681b      	ldr	r3, [r3, #0]
 80145be:	6999      	ldr	r1, [r3, #24]
 80145c0:	68bb      	ldr	r3, [r7, #8]
 80145c2:	689b      	ldr	r3, [r3, #8]
 80145c4:	021a      	lsls	r2, r3, #8
 80145c6:	68fb      	ldr	r3, [r7, #12]
 80145c8:	681b      	ldr	r3, [r3, #0]
 80145ca:	430a      	orrs	r2, r1
 80145cc:	619a      	str	r2, [r3, #24]
 80145ce:	e040      	b.n	8014652 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80145d0:	687b      	ldr	r3, [r7, #4]
 80145d2:	2b08      	cmp	r3, #8
 80145d4:	d11b      	bne.n	801460e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80145d6:	68fb      	ldr	r3, [r7, #12]
 80145d8:	6818      	ldr	r0, [r3, #0]
 80145da:	68bb      	ldr	r3, [r7, #8]
 80145dc:	6819      	ldr	r1, [r3, #0]
 80145de:	68bb      	ldr	r3, [r7, #8]
 80145e0:	685a      	ldr	r2, [r3, #4]
 80145e2:	68bb      	ldr	r3, [r7, #8]
 80145e4:	68db      	ldr	r3, [r3, #12]
 80145e6:	f000 fe5d 	bl	80152a4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80145ea:	68fb      	ldr	r3, [r7, #12]
 80145ec:	681b      	ldr	r3, [r3, #0]
 80145ee:	69da      	ldr	r2, [r3, #28]
 80145f0:	68fb      	ldr	r3, [r7, #12]
 80145f2:	681b      	ldr	r3, [r3, #0]
 80145f4:	f022 020c 	bic.w	r2, r2, #12
 80145f8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80145fa:	68fb      	ldr	r3, [r7, #12]
 80145fc:	681b      	ldr	r3, [r3, #0]
 80145fe:	69d9      	ldr	r1, [r3, #28]
 8014600:	68bb      	ldr	r3, [r7, #8]
 8014602:	689a      	ldr	r2, [r3, #8]
 8014604:	68fb      	ldr	r3, [r7, #12]
 8014606:	681b      	ldr	r3, [r3, #0]
 8014608:	430a      	orrs	r2, r1
 801460a:	61da      	str	r2, [r3, #28]
 801460c:	e021      	b.n	8014652 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 801460e:	687b      	ldr	r3, [r7, #4]
 8014610:	2b0c      	cmp	r3, #12
 8014612:	d11c      	bne.n	801464e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8014614:	68fb      	ldr	r3, [r7, #12]
 8014616:	6818      	ldr	r0, [r3, #0]
 8014618:	68bb      	ldr	r3, [r7, #8]
 801461a:	6819      	ldr	r1, [r3, #0]
 801461c:	68bb      	ldr	r3, [r7, #8]
 801461e:	685a      	ldr	r2, [r3, #4]
 8014620:	68bb      	ldr	r3, [r7, #8]
 8014622:	68db      	ldr	r3, [r3, #12]
 8014624:	f000 fe7a 	bl	801531c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8014628:	68fb      	ldr	r3, [r7, #12]
 801462a:	681b      	ldr	r3, [r3, #0]
 801462c:	69da      	ldr	r2, [r3, #28]
 801462e:	68fb      	ldr	r3, [r7, #12]
 8014630:	681b      	ldr	r3, [r3, #0]
 8014632:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8014636:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8014638:	68fb      	ldr	r3, [r7, #12]
 801463a:	681b      	ldr	r3, [r3, #0]
 801463c:	69d9      	ldr	r1, [r3, #28]
 801463e:	68bb      	ldr	r3, [r7, #8]
 8014640:	689b      	ldr	r3, [r3, #8]
 8014642:	021a      	lsls	r2, r3, #8
 8014644:	68fb      	ldr	r3, [r7, #12]
 8014646:	681b      	ldr	r3, [r3, #0]
 8014648:	430a      	orrs	r2, r1
 801464a:	61da      	str	r2, [r3, #28]
 801464c:	e001      	b.n	8014652 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 801464e:	2301      	movs	r3, #1
 8014650:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8014652:	68fb      	ldr	r3, [r7, #12]
 8014654:	2200      	movs	r2, #0
 8014656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801465a:	7dfb      	ldrb	r3, [r7, #23]
}
 801465c:	4618      	mov	r0, r3
 801465e:	3718      	adds	r7, #24
 8014660:	46bd      	mov	sp, r7
 8014662:	bd80      	pop	{r7, pc}

08014664 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8014664:	b580      	push	{r7, lr}
 8014666:	b086      	sub	sp, #24
 8014668:	af00      	add	r7, sp, #0
 801466a:	60f8      	str	r0, [r7, #12]
 801466c:	60b9      	str	r1, [r7, #8]
 801466e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8014670:	2300      	movs	r3, #0
 8014672:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8014674:	68fb      	ldr	r3, [r7, #12]
 8014676:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801467a:	2b01      	cmp	r3, #1
 801467c:	d101      	bne.n	8014682 <HAL_TIM_PWM_ConfigChannel+0x1e>
 801467e:	2302      	movs	r3, #2
 8014680:	e0ae      	b.n	80147e0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8014682:	68fb      	ldr	r3, [r7, #12]
 8014684:	2201      	movs	r2, #1
 8014686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 801468a:	687b      	ldr	r3, [r7, #4]
 801468c:	2b0c      	cmp	r3, #12
 801468e:	f200 809f 	bhi.w	80147d0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8014692:	a201      	add	r2, pc, #4	; (adr r2, 8014698 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8014694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014698:	080146cd 	.word	0x080146cd
 801469c:	080147d1 	.word	0x080147d1
 80146a0:	080147d1 	.word	0x080147d1
 80146a4:	080147d1 	.word	0x080147d1
 80146a8:	0801470d 	.word	0x0801470d
 80146ac:	080147d1 	.word	0x080147d1
 80146b0:	080147d1 	.word	0x080147d1
 80146b4:	080147d1 	.word	0x080147d1
 80146b8:	0801474f 	.word	0x0801474f
 80146bc:	080147d1 	.word	0x080147d1
 80146c0:	080147d1 	.word	0x080147d1
 80146c4:	080147d1 	.word	0x080147d1
 80146c8:	0801478f 	.word	0x0801478f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80146cc:	68fb      	ldr	r3, [r7, #12]
 80146ce:	681b      	ldr	r3, [r3, #0]
 80146d0:	68b9      	ldr	r1, [r7, #8]
 80146d2:	4618      	mov	r0, r3
 80146d4:	f000 fa94 	bl	8014c00 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80146d8:	68fb      	ldr	r3, [r7, #12]
 80146da:	681b      	ldr	r3, [r3, #0]
 80146dc:	699a      	ldr	r2, [r3, #24]
 80146de:	68fb      	ldr	r3, [r7, #12]
 80146e0:	681b      	ldr	r3, [r3, #0]
 80146e2:	f042 0208 	orr.w	r2, r2, #8
 80146e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80146e8:	68fb      	ldr	r3, [r7, #12]
 80146ea:	681b      	ldr	r3, [r3, #0]
 80146ec:	699a      	ldr	r2, [r3, #24]
 80146ee:	68fb      	ldr	r3, [r7, #12]
 80146f0:	681b      	ldr	r3, [r3, #0]
 80146f2:	f022 0204 	bic.w	r2, r2, #4
 80146f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80146f8:	68fb      	ldr	r3, [r7, #12]
 80146fa:	681b      	ldr	r3, [r3, #0]
 80146fc:	6999      	ldr	r1, [r3, #24]
 80146fe:	68bb      	ldr	r3, [r7, #8]
 8014700:	691a      	ldr	r2, [r3, #16]
 8014702:	68fb      	ldr	r3, [r7, #12]
 8014704:	681b      	ldr	r3, [r3, #0]
 8014706:	430a      	orrs	r2, r1
 8014708:	619a      	str	r2, [r3, #24]
      break;
 801470a:	e064      	b.n	80147d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801470c:	68fb      	ldr	r3, [r7, #12]
 801470e:	681b      	ldr	r3, [r3, #0]
 8014710:	68b9      	ldr	r1, [r7, #8]
 8014712:	4618      	mov	r0, r3
 8014714:	f000 fae4 	bl	8014ce0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8014718:	68fb      	ldr	r3, [r7, #12]
 801471a:	681b      	ldr	r3, [r3, #0]
 801471c:	699a      	ldr	r2, [r3, #24]
 801471e:	68fb      	ldr	r3, [r7, #12]
 8014720:	681b      	ldr	r3, [r3, #0]
 8014722:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8014726:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8014728:	68fb      	ldr	r3, [r7, #12]
 801472a:	681b      	ldr	r3, [r3, #0]
 801472c:	699a      	ldr	r2, [r3, #24]
 801472e:	68fb      	ldr	r3, [r7, #12]
 8014730:	681b      	ldr	r3, [r3, #0]
 8014732:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8014736:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8014738:	68fb      	ldr	r3, [r7, #12]
 801473a:	681b      	ldr	r3, [r3, #0]
 801473c:	6999      	ldr	r1, [r3, #24]
 801473e:	68bb      	ldr	r3, [r7, #8]
 8014740:	691b      	ldr	r3, [r3, #16]
 8014742:	021a      	lsls	r2, r3, #8
 8014744:	68fb      	ldr	r3, [r7, #12]
 8014746:	681b      	ldr	r3, [r3, #0]
 8014748:	430a      	orrs	r2, r1
 801474a:	619a      	str	r2, [r3, #24]
      break;
 801474c:	e043      	b.n	80147d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801474e:	68fb      	ldr	r3, [r7, #12]
 8014750:	681b      	ldr	r3, [r3, #0]
 8014752:	68b9      	ldr	r1, [r7, #8]
 8014754:	4618      	mov	r0, r3
 8014756:	f000 fb39 	bl	8014dcc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801475a:	68fb      	ldr	r3, [r7, #12]
 801475c:	681b      	ldr	r3, [r3, #0]
 801475e:	69da      	ldr	r2, [r3, #28]
 8014760:	68fb      	ldr	r3, [r7, #12]
 8014762:	681b      	ldr	r3, [r3, #0]
 8014764:	f042 0208 	orr.w	r2, r2, #8
 8014768:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801476a:	68fb      	ldr	r3, [r7, #12]
 801476c:	681b      	ldr	r3, [r3, #0]
 801476e:	69da      	ldr	r2, [r3, #28]
 8014770:	68fb      	ldr	r3, [r7, #12]
 8014772:	681b      	ldr	r3, [r3, #0]
 8014774:	f022 0204 	bic.w	r2, r2, #4
 8014778:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801477a:	68fb      	ldr	r3, [r7, #12]
 801477c:	681b      	ldr	r3, [r3, #0]
 801477e:	69d9      	ldr	r1, [r3, #28]
 8014780:	68bb      	ldr	r3, [r7, #8]
 8014782:	691a      	ldr	r2, [r3, #16]
 8014784:	68fb      	ldr	r3, [r7, #12]
 8014786:	681b      	ldr	r3, [r3, #0]
 8014788:	430a      	orrs	r2, r1
 801478a:	61da      	str	r2, [r3, #28]
      break;
 801478c:	e023      	b.n	80147d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801478e:	68fb      	ldr	r3, [r7, #12]
 8014790:	681b      	ldr	r3, [r3, #0]
 8014792:	68b9      	ldr	r1, [r7, #8]
 8014794:	4618      	mov	r0, r3
 8014796:	f000 fb8d 	bl	8014eb4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801479a:	68fb      	ldr	r3, [r7, #12]
 801479c:	681b      	ldr	r3, [r3, #0]
 801479e:	69da      	ldr	r2, [r3, #28]
 80147a0:	68fb      	ldr	r3, [r7, #12]
 80147a2:	681b      	ldr	r3, [r3, #0]
 80147a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80147a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80147aa:	68fb      	ldr	r3, [r7, #12]
 80147ac:	681b      	ldr	r3, [r3, #0]
 80147ae:	69da      	ldr	r2, [r3, #28]
 80147b0:	68fb      	ldr	r3, [r7, #12]
 80147b2:	681b      	ldr	r3, [r3, #0]
 80147b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80147b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80147ba:	68fb      	ldr	r3, [r7, #12]
 80147bc:	681b      	ldr	r3, [r3, #0]
 80147be:	69d9      	ldr	r1, [r3, #28]
 80147c0:	68bb      	ldr	r3, [r7, #8]
 80147c2:	691b      	ldr	r3, [r3, #16]
 80147c4:	021a      	lsls	r2, r3, #8
 80147c6:	68fb      	ldr	r3, [r7, #12]
 80147c8:	681b      	ldr	r3, [r3, #0]
 80147ca:	430a      	orrs	r2, r1
 80147cc:	61da      	str	r2, [r3, #28]
      break;
 80147ce:	e002      	b.n	80147d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80147d0:	2301      	movs	r3, #1
 80147d2:	75fb      	strb	r3, [r7, #23]
      break;
 80147d4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80147d6:	68fb      	ldr	r3, [r7, #12]
 80147d8:	2200      	movs	r2, #0
 80147da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80147de:	7dfb      	ldrb	r3, [r7, #23]
}
 80147e0:	4618      	mov	r0, r3
 80147e2:	3718      	adds	r7, #24
 80147e4:	46bd      	mov	sp, r7
 80147e6:	bd80      	pop	{r7, pc}

080147e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80147e8:	b580      	push	{r7, lr}
 80147ea:	b084      	sub	sp, #16
 80147ec:	af00      	add	r7, sp, #0
 80147ee:	6078      	str	r0, [r7, #4]
 80147f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80147f2:	2300      	movs	r3, #0
 80147f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80147f6:	687b      	ldr	r3, [r7, #4]
 80147f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80147fc:	2b01      	cmp	r3, #1
 80147fe:	d101      	bne.n	8014804 <HAL_TIM_ConfigClockSource+0x1c>
 8014800:	2302      	movs	r3, #2
 8014802:	e0b4      	b.n	801496e <HAL_TIM_ConfigClockSource+0x186>
 8014804:	687b      	ldr	r3, [r7, #4]
 8014806:	2201      	movs	r2, #1
 8014808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801480c:	687b      	ldr	r3, [r7, #4]
 801480e:	2202      	movs	r2, #2
 8014810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8014814:	687b      	ldr	r3, [r7, #4]
 8014816:	681b      	ldr	r3, [r3, #0]
 8014818:	689b      	ldr	r3, [r3, #8]
 801481a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 801481c:	68bb      	ldr	r3, [r7, #8]
 801481e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8014822:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8014824:	68bb      	ldr	r3, [r7, #8]
 8014826:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801482a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 801482c:	687b      	ldr	r3, [r7, #4]
 801482e:	681b      	ldr	r3, [r3, #0]
 8014830:	68ba      	ldr	r2, [r7, #8]
 8014832:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8014834:	683b      	ldr	r3, [r7, #0]
 8014836:	681b      	ldr	r3, [r3, #0]
 8014838:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801483c:	d03e      	beq.n	80148bc <HAL_TIM_ConfigClockSource+0xd4>
 801483e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8014842:	f200 8087 	bhi.w	8014954 <HAL_TIM_ConfigClockSource+0x16c>
 8014846:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801484a:	f000 8086 	beq.w	801495a <HAL_TIM_ConfigClockSource+0x172>
 801484e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014852:	d87f      	bhi.n	8014954 <HAL_TIM_ConfigClockSource+0x16c>
 8014854:	2b70      	cmp	r3, #112	; 0x70
 8014856:	d01a      	beq.n	801488e <HAL_TIM_ConfigClockSource+0xa6>
 8014858:	2b70      	cmp	r3, #112	; 0x70
 801485a:	d87b      	bhi.n	8014954 <HAL_TIM_ConfigClockSource+0x16c>
 801485c:	2b60      	cmp	r3, #96	; 0x60
 801485e:	d050      	beq.n	8014902 <HAL_TIM_ConfigClockSource+0x11a>
 8014860:	2b60      	cmp	r3, #96	; 0x60
 8014862:	d877      	bhi.n	8014954 <HAL_TIM_ConfigClockSource+0x16c>
 8014864:	2b50      	cmp	r3, #80	; 0x50
 8014866:	d03c      	beq.n	80148e2 <HAL_TIM_ConfigClockSource+0xfa>
 8014868:	2b50      	cmp	r3, #80	; 0x50
 801486a:	d873      	bhi.n	8014954 <HAL_TIM_ConfigClockSource+0x16c>
 801486c:	2b40      	cmp	r3, #64	; 0x40
 801486e:	d058      	beq.n	8014922 <HAL_TIM_ConfigClockSource+0x13a>
 8014870:	2b40      	cmp	r3, #64	; 0x40
 8014872:	d86f      	bhi.n	8014954 <HAL_TIM_ConfigClockSource+0x16c>
 8014874:	2b30      	cmp	r3, #48	; 0x30
 8014876:	d064      	beq.n	8014942 <HAL_TIM_ConfigClockSource+0x15a>
 8014878:	2b30      	cmp	r3, #48	; 0x30
 801487a:	d86b      	bhi.n	8014954 <HAL_TIM_ConfigClockSource+0x16c>
 801487c:	2b20      	cmp	r3, #32
 801487e:	d060      	beq.n	8014942 <HAL_TIM_ConfigClockSource+0x15a>
 8014880:	2b20      	cmp	r3, #32
 8014882:	d867      	bhi.n	8014954 <HAL_TIM_ConfigClockSource+0x16c>
 8014884:	2b00      	cmp	r3, #0
 8014886:	d05c      	beq.n	8014942 <HAL_TIM_ConfigClockSource+0x15a>
 8014888:	2b10      	cmp	r3, #16
 801488a:	d05a      	beq.n	8014942 <HAL_TIM_ConfigClockSource+0x15a>
 801488c:	e062      	b.n	8014954 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801488e:	687b      	ldr	r3, [r7, #4]
 8014890:	6818      	ldr	r0, [r3, #0]
 8014892:	683b      	ldr	r3, [r7, #0]
 8014894:	6899      	ldr	r1, [r3, #8]
 8014896:	683b      	ldr	r3, [r7, #0]
 8014898:	685a      	ldr	r2, [r3, #4]
 801489a:	683b      	ldr	r3, [r7, #0]
 801489c:	68db      	ldr	r3, [r3, #12]
 801489e:	f000 fd95 	bl	80153cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80148a2:	687b      	ldr	r3, [r7, #4]
 80148a4:	681b      	ldr	r3, [r3, #0]
 80148a6:	689b      	ldr	r3, [r3, #8]
 80148a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80148aa:	68bb      	ldr	r3, [r7, #8]
 80148ac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80148b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80148b2:	687b      	ldr	r3, [r7, #4]
 80148b4:	681b      	ldr	r3, [r3, #0]
 80148b6:	68ba      	ldr	r2, [r7, #8]
 80148b8:	609a      	str	r2, [r3, #8]
      break;
 80148ba:	e04f      	b.n	801495c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80148bc:	687b      	ldr	r3, [r7, #4]
 80148be:	6818      	ldr	r0, [r3, #0]
 80148c0:	683b      	ldr	r3, [r7, #0]
 80148c2:	6899      	ldr	r1, [r3, #8]
 80148c4:	683b      	ldr	r3, [r7, #0]
 80148c6:	685a      	ldr	r2, [r3, #4]
 80148c8:	683b      	ldr	r3, [r7, #0]
 80148ca:	68db      	ldr	r3, [r3, #12]
 80148cc:	f000 fd7e 	bl	80153cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80148d0:	687b      	ldr	r3, [r7, #4]
 80148d2:	681b      	ldr	r3, [r3, #0]
 80148d4:	689a      	ldr	r2, [r3, #8]
 80148d6:	687b      	ldr	r3, [r7, #4]
 80148d8:	681b      	ldr	r3, [r3, #0]
 80148da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80148de:	609a      	str	r2, [r3, #8]
      break;
 80148e0:	e03c      	b.n	801495c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80148e2:	687b      	ldr	r3, [r7, #4]
 80148e4:	6818      	ldr	r0, [r3, #0]
 80148e6:	683b      	ldr	r3, [r7, #0]
 80148e8:	6859      	ldr	r1, [r3, #4]
 80148ea:	683b      	ldr	r3, [r7, #0]
 80148ec:	68db      	ldr	r3, [r3, #12]
 80148ee:	461a      	mov	r2, r3
 80148f0:	f000 fc3c 	bl	801516c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80148f4:	687b      	ldr	r3, [r7, #4]
 80148f6:	681b      	ldr	r3, [r3, #0]
 80148f8:	2150      	movs	r1, #80	; 0x50
 80148fa:	4618      	mov	r0, r3
 80148fc:	f000 fd4b 	bl	8015396 <TIM_ITRx_SetConfig>
      break;
 8014900:	e02c      	b.n	801495c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8014902:	687b      	ldr	r3, [r7, #4]
 8014904:	6818      	ldr	r0, [r3, #0]
 8014906:	683b      	ldr	r3, [r7, #0]
 8014908:	6859      	ldr	r1, [r3, #4]
 801490a:	683b      	ldr	r3, [r7, #0]
 801490c:	68db      	ldr	r3, [r3, #12]
 801490e:	461a      	mov	r2, r3
 8014910:	f000 fc98 	bl	8015244 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8014914:	687b      	ldr	r3, [r7, #4]
 8014916:	681b      	ldr	r3, [r3, #0]
 8014918:	2160      	movs	r1, #96	; 0x60
 801491a:	4618      	mov	r0, r3
 801491c:	f000 fd3b 	bl	8015396 <TIM_ITRx_SetConfig>
      break;
 8014920:	e01c      	b.n	801495c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8014922:	687b      	ldr	r3, [r7, #4]
 8014924:	6818      	ldr	r0, [r3, #0]
 8014926:	683b      	ldr	r3, [r7, #0]
 8014928:	6859      	ldr	r1, [r3, #4]
 801492a:	683b      	ldr	r3, [r7, #0]
 801492c:	68db      	ldr	r3, [r3, #12]
 801492e:	461a      	mov	r2, r3
 8014930:	f000 fc1c 	bl	801516c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8014934:	687b      	ldr	r3, [r7, #4]
 8014936:	681b      	ldr	r3, [r3, #0]
 8014938:	2140      	movs	r1, #64	; 0x40
 801493a:	4618      	mov	r0, r3
 801493c:	f000 fd2b 	bl	8015396 <TIM_ITRx_SetConfig>
      break;
 8014940:	e00c      	b.n	801495c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8014942:	687b      	ldr	r3, [r7, #4]
 8014944:	681a      	ldr	r2, [r3, #0]
 8014946:	683b      	ldr	r3, [r7, #0]
 8014948:	681b      	ldr	r3, [r3, #0]
 801494a:	4619      	mov	r1, r3
 801494c:	4610      	mov	r0, r2
 801494e:	f000 fd22 	bl	8015396 <TIM_ITRx_SetConfig>
      break;
 8014952:	e003      	b.n	801495c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8014954:	2301      	movs	r3, #1
 8014956:	73fb      	strb	r3, [r7, #15]
      break;
 8014958:	e000      	b.n	801495c <HAL_TIM_ConfigClockSource+0x174>
      break;
 801495a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801495c:	687b      	ldr	r3, [r7, #4]
 801495e:	2201      	movs	r2, #1
 8014960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8014964:	687b      	ldr	r3, [r7, #4]
 8014966:	2200      	movs	r2, #0
 8014968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801496c:	7bfb      	ldrb	r3, [r7, #15]
}
 801496e:	4618      	mov	r0, r3
 8014970:	3710      	adds	r7, #16
 8014972:	46bd      	mov	sp, r7
 8014974:	bd80      	pop	{r7, pc}

08014976 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8014976:	b580      	push	{r7, lr}
 8014978:	b082      	sub	sp, #8
 801497a:	af00      	add	r7, sp, #0
 801497c:	6078      	str	r0, [r7, #4]
 801497e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8014980:	687b      	ldr	r3, [r7, #4]
 8014982:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8014986:	2b01      	cmp	r3, #1
 8014988:	d101      	bne.n	801498e <HAL_TIM_SlaveConfigSynchro+0x18>
 801498a:	2302      	movs	r3, #2
 801498c:	e031      	b.n	80149f2 <HAL_TIM_SlaveConfigSynchro+0x7c>
 801498e:	687b      	ldr	r3, [r7, #4]
 8014990:	2201      	movs	r2, #1
 8014992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8014996:	687b      	ldr	r3, [r7, #4]
 8014998:	2202      	movs	r2, #2
 801499a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 801499e:	6839      	ldr	r1, [r7, #0]
 80149a0:	6878      	ldr	r0, [r7, #4]
 80149a2:	f000 fadd 	bl	8014f60 <TIM_SlaveTimer_SetConfig>
 80149a6:	4603      	mov	r3, r0
 80149a8:	2b00      	cmp	r3, #0
 80149aa:	d009      	beq.n	80149c0 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80149ac:	687b      	ldr	r3, [r7, #4]
 80149ae:	2201      	movs	r2, #1
 80149b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80149b4:	687b      	ldr	r3, [r7, #4]
 80149b6:	2200      	movs	r2, #0
 80149b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80149bc:	2301      	movs	r3, #1
 80149be:	e018      	b.n	80149f2 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80149c0:	687b      	ldr	r3, [r7, #4]
 80149c2:	681b      	ldr	r3, [r3, #0]
 80149c4:	68da      	ldr	r2, [r3, #12]
 80149c6:	687b      	ldr	r3, [r7, #4]
 80149c8:	681b      	ldr	r3, [r3, #0]
 80149ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80149ce:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80149d0:	687b      	ldr	r3, [r7, #4]
 80149d2:	681b      	ldr	r3, [r3, #0]
 80149d4:	68da      	ldr	r2, [r3, #12]
 80149d6:	687b      	ldr	r3, [r7, #4]
 80149d8:	681b      	ldr	r3, [r3, #0]
 80149da:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80149de:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80149e0:	687b      	ldr	r3, [r7, #4]
 80149e2:	2201      	movs	r2, #1
 80149e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80149e8:	687b      	ldr	r3, [r7, #4]
 80149ea:	2200      	movs	r2, #0
 80149ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80149f0:	2300      	movs	r3, #0
}
 80149f2:	4618      	mov	r0, r3
 80149f4:	3708      	adds	r7, #8
 80149f6:	46bd      	mov	sp, r7
 80149f8:	bd80      	pop	{r7, pc}
	...

080149fc <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80149fc:	b480      	push	{r7}
 80149fe:	b085      	sub	sp, #20
 8014a00:	af00      	add	r7, sp, #0
 8014a02:	6078      	str	r0, [r7, #4]
 8014a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8014a06:	2300      	movs	r3, #0
 8014a08:	60fb      	str	r3, [r7, #12]
 8014a0a:	683b      	ldr	r3, [r7, #0]
 8014a0c:	2b0c      	cmp	r3, #12
 8014a0e:	d831      	bhi.n	8014a74 <HAL_TIM_ReadCapturedValue+0x78>
 8014a10:	a201      	add	r2, pc, #4	; (adr r2, 8014a18 <HAL_TIM_ReadCapturedValue+0x1c>)
 8014a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014a16:	bf00      	nop
 8014a18:	08014a4d 	.word	0x08014a4d
 8014a1c:	08014a75 	.word	0x08014a75
 8014a20:	08014a75 	.word	0x08014a75
 8014a24:	08014a75 	.word	0x08014a75
 8014a28:	08014a57 	.word	0x08014a57
 8014a2c:	08014a75 	.word	0x08014a75
 8014a30:	08014a75 	.word	0x08014a75
 8014a34:	08014a75 	.word	0x08014a75
 8014a38:	08014a61 	.word	0x08014a61
 8014a3c:	08014a75 	.word	0x08014a75
 8014a40:	08014a75 	.word	0x08014a75
 8014a44:	08014a75 	.word	0x08014a75
 8014a48:	08014a6b 	.word	0x08014a6b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8014a4c:	687b      	ldr	r3, [r7, #4]
 8014a4e:	681b      	ldr	r3, [r3, #0]
 8014a50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014a52:	60fb      	str	r3, [r7, #12]

      break;
 8014a54:	e00f      	b.n	8014a76 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8014a56:	687b      	ldr	r3, [r7, #4]
 8014a58:	681b      	ldr	r3, [r3, #0]
 8014a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014a5c:	60fb      	str	r3, [r7, #12]

      break;
 8014a5e:	e00a      	b.n	8014a76 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8014a60:	687b      	ldr	r3, [r7, #4]
 8014a62:	681b      	ldr	r3, [r3, #0]
 8014a64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014a66:	60fb      	str	r3, [r7, #12]

      break;
 8014a68:	e005      	b.n	8014a76 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8014a6a:	687b      	ldr	r3, [r7, #4]
 8014a6c:	681b      	ldr	r3, [r3, #0]
 8014a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014a70:	60fb      	str	r3, [r7, #12]

      break;
 8014a72:	e000      	b.n	8014a76 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8014a74:	bf00      	nop
  }

  return tmpreg;
 8014a76:	68fb      	ldr	r3, [r7, #12]
}
 8014a78:	4618      	mov	r0, r3
 8014a7a:	3714      	adds	r7, #20
 8014a7c:	46bd      	mov	sp, r7
 8014a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a82:	4770      	bx	lr

08014a84 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8014a84:	b480      	push	{r7}
 8014a86:	b083      	sub	sp, #12
 8014a88:	af00      	add	r7, sp, #0
 8014a8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8014a8c:	bf00      	nop
 8014a8e:	370c      	adds	r7, #12
 8014a90:	46bd      	mov	sp, r7
 8014a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a96:	4770      	bx	lr

08014a98 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8014a98:	b480      	push	{r7}
 8014a9a:	b083      	sub	sp, #12
 8014a9c:	af00      	add	r7, sp, #0
 8014a9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8014aa0:	bf00      	nop
 8014aa2:	370c      	adds	r7, #12
 8014aa4:	46bd      	mov	sp, r7
 8014aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014aaa:	4770      	bx	lr

08014aac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8014aac:	b480      	push	{r7}
 8014aae:	b083      	sub	sp, #12
 8014ab0:	af00      	add	r7, sp, #0
 8014ab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8014ab4:	bf00      	nop
 8014ab6:	370c      	adds	r7, #12
 8014ab8:	46bd      	mov	sp, r7
 8014aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014abe:	4770      	bx	lr

08014ac0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8014ac0:	b480      	push	{r7}
 8014ac2:	b085      	sub	sp, #20
 8014ac4:	af00      	add	r7, sp, #0
 8014ac6:	6078      	str	r0, [r7, #4]
 8014ac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8014aca:	687b      	ldr	r3, [r7, #4]
 8014acc:	681b      	ldr	r3, [r3, #0]
 8014ace:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8014ad0:	687b      	ldr	r3, [r7, #4]
 8014ad2:	4a40      	ldr	r2, [pc, #256]	; (8014bd4 <TIM_Base_SetConfig+0x114>)
 8014ad4:	4293      	cmp	r3, r2
 8014ad6:	d013      	beq.n	8014b00 <TIM_Base_SetConfig+0x40>
 8014ad8:	687b      	ldr	r3, [r7, #4]
 8014ada:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014ade:	d00f      	beq.n	8014b00 <TIM_Base_SetConfig+0x40>
 8014ae0:	687b      	ldr	r3, [r7, #4]
 8014ae2:	4a3d      	ldr	r2, [pc, #244]	; (8014bd8 <TIM_Base_SetConfig+0x118>)
 8014ae4:	4293      	cmp	r3, r2
 8014ae6:	d00b      	beq.n	8014b00 <TIM_Base_SetConfig+0x40>
 8014ae8:	687b      	ldr	r3, [r7, #4]
 8014aea:	4a3c      	ldr	r2, [pc, #240]	; (8014bdc <TIM_Base_SetConfig+0x11c>)
 8014aec:	4293      	cmp	r3, r2
 8014aee:	d007      	beq.n	8014b00 <TIM_Base_SetConfig+0x40>
 8014af0:	687b      	ldr	r3, [r7, #4]
 8014af2:	4a3b      	ldr	r2, [pc, #236]	; (8014be0 <TIM_Base_SetConfig+0x120>)
 8014af4:	4293      	cmp	r3, r2
 8014af6:	d003      	beq.n	8014b00 <TIM_Base_SetConfig+0x40>
 8014af8:	687b      	ldr	r3, [r7, #4]
 8014afa:	4a3a      	ldr	r2, [pc, #232]	; (8014be4 <TIM_Base_SetConfig+0x124>)
 8014afc:	4293      	cmp	r3, r2
 8014afe:	d108      	bne.n	8014b12 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8014b00:	68fb      	ldr	r3, [r7, #12]
 8014b02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014b06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8014b08:	683b      	ldr	r3, [r7, #0]
 8014b0a:	685b      	ldr	r3, [r3, #4]
 8014b0c:	68fa      	ldr	r2, [r7, #12]
 8014b0e:	4313      	orrs	r3, r2
 8014b10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8014b12:	687b      	ldr	r3, [r7, #4]
 8014b14:	4a2f      	ldr	r2, [pc, #188]	; (8014bd4 <TIM_Base_SetConfig+0x114>)
 8014b16:	4293      	cmp	r3, r2
 8014b18:	d02b      	beq.n	8014b72 <TIM_Base_SetConfig+0xb2>
 8014b1a:	687b      	ldr	r3, [r7, #4]
 8014b1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014b20:	d027      	beq.n	8014b72 <TIM_Base_SetConfig+0xb2>
 8014b22:	687b      	ldr	r3, [r7, #4]
 8014b24:	4a2c      	ldr	r2, [pc, #176]	; (8014bd8 <TIM_Base_SetConfig+0x118>)
 8014b26:	4293      	cmp	r3, r2
 8014b28:	d023      	beq.n	8014b72 <TIM_Base_SetConfig+0xb2>
 8014b2a:	687b      	ldr	r3, [r7, #4]
 8014b2c:	4a2b      	ldr	r2, [pc, #172]	; (8014bdc <TIM_Base_SetConfig+0x11c>)
 8014b2e:	4293      	cmp	r3, r2
 8014b30:	d01f      	beq.n	8014b72 <TIM_Base_SetConfig+0xb2>
 8014b32:	687b      	ldr	r3, [r7, #4]
 8014b34:	4a2a      	ldr	r2, [pc, #168]	; (8014be0 <TIM_Base_SetConfig+0x120>)
 8014b36:	4293      	cmp	r3, r2
 8014b38:	d01b      	beq.n	8014b72 <TIM_Base_SetConfig+0xb2>
 8014b3a:	687b      	ldr	r3, [r7, #4]
 8014b3c:	4a29      	ldr	r2, [pc, #164]	; (8014be4 <TIM_Base_SetConfig+0x124>)
 8014b3e:	4293      	cmp	r3, r2
 8014b40:	d017      	beq.n	8014b72 <TIM_Base_SetConfig+0xb2>
 8014b42:	687b      	ldr	r3, [r7, #4]
 8014b44:	4a28      	ldr	r2, [pc, #160]	; (8014be8 <TIM_Base_SetConfig+0x128>)
 8014b46:	4293      	cmp	r3, r2
 8014b48:	d013      	beq.n	8014b72 <TIM_Base_SetConfig+0xb2>
 8014b4a:	687b      	ldr	r3, [r7, #4]
 8014b4c:	4a27      	ldr	r2, [pc, #156]	; (8014bec <TIM_Base_SetConfig+0x12c>)
 8014b4e:	4293      	cmp	r3, r2
 8014b50:	d00f      	beq.n	8014b72 <TIM_Base_SetConfig+0xb2>
 8014b52:	687b      	ldr	r3, [r7, #4]
 8014b54:	4a26      	ldr	r2, [pc, #152]	; (8014bf0 <TIM_Base_SetConfig+0x130>)
 8014b56:	4293      	cmp	r3, r2
 8014b58:	d00b      	beq.n	8014b72 <TIM_Base_SetConfig+0xb2>
 8014b5a:	687b      	ldr	r3, [r7, #4]
 8014b5c:	4a25      	ldr	r2, [pc, #148]	; (8014bf4 <TIM_Base_SetConfig+0x134>)
 8014b5e:	4293      	cmp	r3, r2
 8014b60:	d007      	beq.n	8014b72 <TIM_Base_SetConfig+0xb2>
 8014b62:	687b      	ldr	r3, [r7, #4]
 8014b64:	4a24      	ldr	r2, [pc, #144]	; (8014bf8 <TIM_Base_SetConfig+0x138>)
 8014b66:	4293      	cmp	r3, r2
 8014b68:	d003      	beq.n	8014b72 <TIM_Base_SetConfig+0xb2>
 8014b6a:	687b      	ldr	r3, [r7, #4]
 8014b6c:	4a23      	ldr	r2, [pc, #140]	; (8014bfc <TIM_Base_SetConfig+0x13c>)
 8014b6e:	4293      	cmp	r3, r2
 8014b70:	d108      	bne.n	8014b84 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8014b72:	68fb      	ldr	r3, [r7, #12]
 8014b74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8014b78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8014b7a:	683b      	ldr	r3, [r7, #0]
 8014b7c:	68db      	ldr	r3, [r3, #12]
 8014b7e:	68fa      	ldr	r2, [r7, #12]
 8014b80:	4313      	orrs	r3, r2
 8014b82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8014b84:	68fb      	ldr	r3, [r7, #12]
 8014b86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8014b8a:	683b      	ldr	r3, [r7, #0]
 8014b8c:	695b      	ldr	r3, [r3, #20]
 8014b8e:	4313      	orrs	r3, r2
 8014b90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8014b92:	687b      	ldr	r3, [r7, #4]
 8014b94:	68fa      	ldr	r2, [r7, #12]
 8014b96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8014b98:	683b      	ldr	r3, [r7, #0]
 8014b9a:	689a      	ldr	r2, [r3, #8]
 8014b9c:	687b      	ldr	r3, [r7, #4]
 8014b9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8014ba0:	683b      	ldr	r3, [r7, #0]
 8014ba2:	681a      	ldr	r2, [r3, #0]
 8014ba4:	687b      	ldr	r3, [r7, #4]
 8014ba6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8014ba8:	687b      	ldr	r3, [r7, #4]
 8014baa:	4a0a      	ldr	r2, [pc, #40]	; (8014bd4 <TIM_Base_SetConfig+0x114>)
 8014bac:	4293      	cmp	r3, r2
 8014bae:	d003      	beq.n	8014bb8 <TIM_Base_SetConfig+0xf8>
 8014bb0:	687b      	ldr	r3, [r7, #4]
 8014bb2:	4a0c      	ldr	r2, [pc, #48]	; (8014be4 <TIM_Base_SetConfig+0x124>)
 8014bb4:	4293      	cmp	r3, r2
 8014bb6:	d103      	bne.n	8014bc0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8014bb8:	683b      	ldr	r3, [r7, #0]
 8014bba:	691a      	ldr	r2, [r3, #16]
 8014bbc:	687b      	ldr	r3, [r7, #4]
 8014bbe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8014bc0:	687b      	ldr	r3, [r7, #4]
 8014bc2:	2201      	movs	r2, #1
 8014bc4:	615a      	str	r2, [r3, #20]
}
 8014bc6:	bf00      	nop
 8014bc8:	3714      	adds	r7, #20
 8014bca:	46bd      	mov	sp, r7
 8014bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bd0:	4770      	bx	lr
 8014bd2:	bf00      	nop
 8014bd4:	40010000 	.word	0x40010000
 8014bd8:	40000400 	.word	0x40000400
 8014bdc:	40000800 	.word	0x40000800
 8014be0:	40000c00 	.word	0x40000c00
 8014be4:	40010400 	.word	0x40010400
 8014be8:	40014000 	.word	0x40014000
 8014bec:	40014400 	.word	0x40014400
 8014bf0:	40014800 	.word	0x40014800
 8014bf4:	40001800 	.word	0x40001800
 8014bf8:	40001c00 	.word	0x40001c00
 8014bfc:	40002000 	.word	0x40002000

08014c00 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8014c00:	b480      	push	{r7}
 8014c02:	b087      	sub	sp, #28
 8014c04:	af00      	add	r7, sp, #0
 8014c06:	6078      	str	r0, [r7, #4]
 8014c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8014c0a:	687b      	ldr	r3, [r7, #4]
 8014c0c:	6a1b      	ldr	r3, [r3, #32]
 8014c0e:	f023 0201 	bic.w	r2, r3, #1
 8014c12:	687b      	ldr	r3, [r7, #4]
 8014c14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014c16:	687b      	ldr	r3, [r7, #4]
 8014c18:	6a1b      	ldr	r3, [r3, #32]
 8014c1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014c1c:	687b      	ldr	r3, [r7, #4]
 8014c1e:	685b      	ldr	r3, [r3, #4]
 8014c20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8014c22:	687b      	ldr	r3, [r7, #4]
 8014c24:	699b      	ldr	r3, [r3, #24]
 8014c26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8014c28:	68fb      	ldr	r3, [r7, #12]
 8014c2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014c2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8014c30:	68fb      	ldr	r3, [r7, #12]
 8014c32:	f023 0303 	bic.w	r3, r3, #3
 8014c36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8014c38:	683b      	ldr	r3, [r7, #0]
 8014c3a:	681b      	ldr	r3, [r3, #0]
 8014c3c:	68fa      	ldr	r2, [r7, #12]
 8014c3e:	4313      	orrs	r3, r2
 8014c40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8014c42:	697b      	ldr	r3, [r7, #20]
 8014c44:	f023 0302 	bic.w	r3, r3, #2
 8014c48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8014c4a:	683b      	ldr	r3, [r7, #0]
 8014c4c:	689b      	ldr	r3, [r3, #8]
 8014c4e:	697a      	ldr	r2, [r7, #20]
 8014c50:	4313      	orrs	r3, r2
 8014c52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8014c54:	687b      	ldr	r3, [r7, #4]
 8014c56:	4a20      	ldr	r2, [pc, #128]	; (8014cd8 <TIM_OC1_SetConfig+0xd8>)
 8014c58:	4293      	cmp	r3, r2
 8014c5a:	d003      	beq.n	8014c64 <TIM_OC1_SetConfig+0x64>
 8014c5c:	687b      	ldr	r3, [r7, #4]
 8014c5e:	4a1f      	ldr	r2, [pc, #124]	; (8014cdc <TIM_OC1_SetConfig+0xdc>)
 8014c60:	4293      	cmp	r3, r2
 8014c62:	d10c      	bne.n	8014c7e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8014c64:	697b      	ldr	r3, [r7, #20]
 8014c66:	f023 0308 	bic.w	r3, r3, #8
 8014c6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8014c6c:	683b      	ldr	r3, [r7, #0]
 8014c6e:	68db      	ldr	r3, [r3, #12]
 8014c70:	697a      	ldr	r2, [r7, #20]
 8014c72:	4313      	orrs	r3, r2
 8014c74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8014c76:	697b      	ldr	r3, [r7, #20]
 8014c78:	f023 0304 	bic.w	r3, r3, #4
 8014c7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014c7e:	687b      	ldr	r3, [r7, #4]
 8014c80:	4a15      	ldr	r2, [pc, #84]	; (8014cd8 <TIM_OC1_SetConfig+0xd8>)
 8014c82:	4293      	cmp	r3, r2
 8014c84:	d003      	beq.n	8014c8e <TIM_OC1_SetConfig+0x8e>
 8014c86:	687b      	ldr	r3, [r7, #4]
 8014c88:	4a14      	ldr	r2, [pc, #80]	; (8014cdc <TIM_OC1_SetConfig+0xdc>)
 8014c8a:	4293      	cmp	r3, r2
 8014c8c:	d111      	bne.n	8014cb2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8014c8e:	693b      	ldr	r3, [r7, #16]
 8014c90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8014c94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8014c96:	693b      	ldr	r3, [r7, #16]
 8014c98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8014c9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8014c9e:	683b      	ldr	r3, [r7, #0]
 8014ca0:	695b      	ldr	r3, [r3, #20]
 8014ca2:	693a      	ldr	r2, [r7, #16]
 8014ca4:	4313      	orrs	r3, r2
 8014ca6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8014ca8:	683b      	ldr	r3, [r7, #0]
 8014caa:	699b      	ldr	r3, [r3, #24]
 8014cac:	693a      	ldr	r2, [r7, #16]
 8014cae:	4313      	orrs	r3, r2
 8014cb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014cb2:	687b      	ldr	r3, [r7, #4]
 8014cb4:	693a      	ldr	r2, [r7, #16]
 8014cb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8014cb8:	687b      	ldr	r3, [r7, #4]
 8014cba:	68fa      	ldr	r2, [r7, #12]
 8014cbc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8014cbe:	683b      	ldr	r3, [r7, #0]
 8014cc0:	685a      	ldr	r2, [r3, #4]
 8014cc2:	687b      	ldr	r3, [r7, #4]
 8014cc4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014cc6:	687b      	ldr	r3, [r7, #4]
 8014cc8:	697a      	ldr	r2, [r7, #20]
 8014cca:	621a      	str	r2, [r3, #32]
}
 8014ccc:	bf00      	nop
 8014cce:	371c      	adds	r7, #28
 8014cd0:	46bd      	mov	sp, r7
 8014cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cd6:	4770      	bx	lr
 8014cd8:	40010000 	.word	0x40010000
 8014cdc:	40010400 	.word	0x40010400

08014ce0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8014ce0:	b480      	push	{r7}
 8014ce2:	b087      	sub	sp, #28
 8014ce4:	af00      	add	r7, sp, #0
 8014ce6:	6078      	str	r0, [r7, #4]
 8014ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8014cea:	687b      	ldr	r3, [r7, #4]
 8014cec:	6a1b      	ldr	r3, [r3, #32]
 8014cee:	f023 0210 	bic.w	r2, r3, #16
 8014cf2:	687b      	ldr	r3, [r7, #4]
 8014cf4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014cf6:	687b      	ldr	r3, [r7, #4]
 8014cf8:	6a1b      	ldr	r3, [r3, #32]
 8014cfa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014cfc:	687b      	ldr	r3, [r7, #4]
 8014cfe:	685b      	ldr	r3, [r3, #4]
 8014d00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8014d02:	687b      	ldr	r3, [r7, #4]
 8014d04:	699b      	ldr	r3, [r3, #24]
 8014d06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8014d08:	68fb      	ldr	r3, [r7, #12]
 8014d0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8014d0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8014d10:	68fb      	ldr	r3, [r7, #12]
 8014d12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8014d16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8014d18:	683b      	ldr	r3, [r7, #0]
 8014d1a:	681b      	ldr	r3, [r3, #0]
 8014d1c:	021b      	lsls	r3, r3, #8
 8014d1e:	68fa      	ldr	r2, [r7, #12]
 8014d20:	4313      	orrs	r3, r2
 8014d22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8014d24:	697b      	ldr	r3, [r7, #20]
 8014d26:	f023 0320 	bic.w	r3, r3, #32
 8014d2a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8014d2c:	683b      	ldr	r3, [r7, #0]
 8014d2e:	689b      	ldr	r3, [r3, #8]
 8014d30:	011b      	lsls	r3, r3, #4
 8014d32:	697a      	ldr	r2, [r7, #20]
 8014d34:	4313      	orrs	r3, r2
 8014d36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8014d38:	687b      	ldr	r3, [r7, #4]
 8014d3a:	4a22      	ldr	r2, [pc, #136]	; (8014dc4 <TIM_OC2_SetConfig+0xe4>)
 8014d3c:	4293      	cmp	r3, r2
 8014d3e:	d003      	beq.n	8014d48 <TIM_OC2_SetConfig+0x68>
 8014d40:	687b      	ldr	r3, [r7, #4]
 8014d42:	4a21      	ldr	r2, [pc, #132]	; (8014dc8 <TIM_OC2_SetConfig+0xe8>)
 8014d44:	4293      	cmp	r3, r2
 8014d46:	d10d      	bne.n	8014d64 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8014d48:	697b      	ldr	r3, [r7, #20]
 8014d4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8014d4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8014d50:	683b      	ldr	r3, [r7, #0]
 8014d52:	68db      	ldr	r3, [r3, #12]
 8014d54:	011b      	lsls	r3, r3, #4
 8014d56:	697a      	ldr	r2, [r7, #20]
 8014d58:	4313      	orrs	r3, r2
 8014d5a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8014d5c:	697b      	ldr	r3, [r7, #20]
 8014d5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014d62:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014d64:	687b      	ldr	r3, [r7, #4]
 8014d66:	4a17      	ldr	r2, [pc, #92]	; (8014dc4 <TIM_OC2_SetConfig+0xe4>)
 8014d68:	4293      	cmp	r3, r2
 8014d6a:	d003      	beq.n	8014d74 <TIM_OC2_SetConfig+0x94>
 8014d6c:	687b      	ldr	r3, [r7, #4]
 8014d6e:	4a16      	ldr	r2, [pc, #88]	; (8014dc8 <TIM_OC2_SetConfig+0xe8>)
 8014d70:	4293      	cmp	r3, r2
 8014d72:	d113      	bne.n	8014d9c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8014d74:	693b      	ldr	r3, [r7, #16]
 8014d76:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8014d7a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8014d7c:	693b      	ldr	r3, [r7, #16]
 8014d7e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8014d82:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8014d84:	683b      	ldr	r3, [r7, #0]
 8014d86:	695b      	ldr	r3, [r3, #20]
 8014d88:	009b      	lsls	r3, r3, #2
 8014d8a:	693a      	ldr	r2, [r7, #16]
 8014d8c:	4313      	orrs	r3, r2
 8014d8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8014d90:	683b      	ldr	r3, [r7, #0]
 8014d92:	699b      	ldr	r3, [r3, #24]
 8014d94:	009b      	lsls	r3, r3, #2
 8014d96:	693a      	ldr	r2, [r7, #16]
 8014d98:	4313      	orrs	r3, r2
 8014d9a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014d9c:	687b      	ldr	r3, [r7, #4]
 8014d9e:	693a      	ldr	r2, [r7, #16]
 8014da0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8014da2:	687b      	ldr	r3, [r7, #4]
 8014da4:	68fa      	ldr	r2, [r7, #12]
 8014da6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8014da8:	683b      	ldr	r3, [r7, #0]
 8014daa:	685a      	ldr	r2, [r3, #4]
 8014dac:	687b      	ldr	r3, [r7, #4]
 8014dae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014db0:	687b      	ldr	r3, [r7, #4]
 8014db2:	697a      	ldr	r2, [r7, #20]
 8014db4:	621a      	str	r2, [r3, #32]
}
 8014db6:	bf00      	nop
 8014db8:	371c      	adds	r7, #28
 8014dba:	46bd      	mov	sp, r7
 8014dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dc0:	4770      	bx	lr
 8014dc2:	bf00      	nop
 8014dc4:	40010000 	.word	0x40010000
 8014dc8:	40010400 	.word	0x40010400

08014dcc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8014dcc:	b480      	push	{r7}
 8014dce:	b087      	sub	sp, #28
 8014dd0:	af00      	add	r7, sp, #0
 8014dd2:	6078      	str	r0, [r7, #4]
 8014dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8014dd6:	687b      	ldr	r3, [r7, #4]
 8014dd8:	6a1b      	ldr	r3, [r3, #32]
 8014dda:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8014dde:	687b      	ldr	r3, [r7, #4]
 8014de0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014de2:	687b      	ldr	r3, [r7, #4]
 8014de4:	6a1b      	ldr	r3, [r3, #32]
 8014de6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014de8:	687b      	ldr	r3, [r7, #4]
 8014dea:	685b      	ldr	r3, [r3, #4]
 8014dec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8014dee:	687b      	ldr	r3, [r7, #4]
 8014df0:	69db      	ldr	r3, [r3, #28]
 8014df2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8014df4:	68fb      	ldr	r3, [r7, #12]
 8014df6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014dfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8014dfc:	68fb      	ldr	r3, [r7, #12]
 8014dfe:	f023 0303 	bic.w	r3, r3, #3
 8014e02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8014e04:	683b      	ldr	r3, [r7, #0]
 8014e06:	681b      	ldr	r3, [r3, #0]
 8014e08:	68fa      	ldr	r2, [r7, #12]
 8014e0a:	4313      	orrs	r3, r2
 8014e0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8014e0e:	697b      	ldr	r3, [r7, #20]
 8014e10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8014e14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8014e16:	683b      	ldr	r3, [r7, #0]
 8014e18:	689b      	ldr	r3, [r3, #8]
 8014e1a:	021b      	lsls	r3, r3, #8
 8014e1c:	697a      	ldr	r2, [r7, #20]
 8014e1e:	4313      	orrs	r3, r2
 8014e20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8014e22:	687b      	ldr	r3, [r7, #4]
 8014e24:	4a21      	ldr	r2, [pc, #132]	; (8014eac <TIM_OC3_SetConfig+0xe0>)
 8014e26:	4293      	cmp	r3, r2
 8014e28:	d003      	beq.n	8014e32 <TIM_OC3_SetConfig+0x66>
 8014e2a:	687b      	ldr	r3, [r7, #4]
 8014e2c:	4a20      	ldr	r2, [pc, #128]	; (8014eb0 <TIM_OC3_SetConfig+0xe4>)
 8014e2e:	4293      	cmp	r3, r2
 8014e30:	d10d      	bne.n	8014e4e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8014e32:	697b      	ldr	r3, [r7, #20]
 8014e34:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8014e38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8014e3a:	683b      	ldr	r3, [r7, #0]
 8014e3c:	68db      	ldr	r3, [r3, #12]
 8014e3e:	021b      	lsls	r3, r3, #8
 8014e40:	697a      	ldr	r2, [r7, #20]
 8014e42:	4313      	orrs	r3, r2
 8014e44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8014e46:	697b      	ldr	r3, [r7, #20]
 8014e48:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8014e4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014e4e:	687b      	ldr	r3, [r7, #4]
 8014e50:	4a16      	ldr	r2, [pc, #88]	; (8014eac <TIM_OC3_SetConfig+0xe0>)
 8014e52:	4293      	cmp	r3, r2
 8014e54:	d003      	beq.n	8014e5e <TIM_OC3_SetConfig+0x92>
 8014e56:	687b      	ldr	r3, [r7, #4]
 8014e58:	4a15      	ldr	r2, [pc, #84]	; (8014eb0 <TIM_OC3_SetConfig+0xe4>)
 8014e5a:	4293      	cmp	r3, r2
 8014e5c:	d113      	bne.n	8014e86 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8014e5e:	693b      	ldr	r3, [r7, #16]
 8014e60:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014e64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8014e66:	693b      	ldr	r3, [r7, #16]
 8014e68:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8014e6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8014e6e:	683b      	ldr	r3, [r7, #0]
 8014e70:	695b      	ldr	r3, [r3, #20]
 8014e72:	011b      	lsls	r3, r3, #4
 8014e74:	693a      	ldr	r2, [r7, #16]
 8014e76:	4313      	orrs	r3, r2
 8014e78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8014e7a:	683b      	ldr	r3, [r7, #0]
 8014e7c:	699b      	ldr	r3, [r3, #24]
 8014e7e:	011b      	lsls	r3, r3, #4
 8014e80:	693a      	ldr	r2, [r7, #16]
 8014e82:	4313      	orrs	r3, r2
 8014e84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014e86:	687b      	ldr	r3, [r7, #4]
 8014e88:	693a      	ldr	r2, [r7, #16]
 8014e8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8014e8c:	687b      	ldr	r3, [r7, #4]
 8014e8e:	68fa      	ldr	r2, [r7, #12]
 8014e90:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8014e92:	683b      	ldr	r3, [r7, #0]
 8014e94:	685a      	ldr	r2, [r3, #4]
 8014e96:	687b      	ldr	r3, [r7, #4]
 8014e98:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014e9a:	687b      	ldr	r3, [r7, #4]
 8014e9c:	697a      	ldr	r2, [r7, #20]
 8014e9e:	621a      	str	r2, [r3, #32]
}
 8014ea0:	bf00      	nop
 8014ea2:	371c      	adds	r7, #28
 8014ea4:	46bd      	mov	sp, r7
 8014ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eaa:	4770      	bx	lr
 8014eac:	40010000 	.word	0x40010000
 8014eb0:	40010400 	.word	0x40010400

08014eb4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8014eb4:	b480      	push	{r7}
 8014eb6:	b087      	sub	sp, #28
 8014eb8:	af00      	add	r7, sp, #0
 8014eba:	6078      	str	r0, [r7, #4]
 8014ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8014ebe:	687b      	ldr	r3, [r7, #4]
 8014ec0:	6a1b      	ldr	r3, [r3, #32]
 8014ec2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8014ec6:	687b      	ldr	r3, [r7, #4]
 8014ec8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014eca:	687b      	ldr	r3, [r7, #4]
 8014ecc:	6a1b      	ldr	r3, [r3, #32]
 8014ece:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014ed0:	687b      	ldr	r3, [r7, #4]
 8014ed2:	685b      	ldr	r3, [r3, #4]
 8014ed4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8014ed6:	687b      	ldr	r3, [r7, #4]
 8014ed8:	69db      	ldr	r3, [r3, #28]
 8014eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8014edc:	68fb      	ldr	r3, [r7, #12]
 8014ede:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8014ee2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8014ee4:	68fb      	ldr	r3, [r7, #12]
 8014ee6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8014eea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8014eec:	683b      	ldr	r3, [r7, #0]
 8014eee:	681b      	ldr	r3, [r3, #0]
 8014ef0:	021b      	lsls	r3, r3, #8
 8014ef2:	68fa      	ldr	r2, [r7, #12]
 8014ef4:	4313      	orrs	r3, r2
 8014ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8014ef8:	693b      	ldr	r3, [r7, #16]
 8014efa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8014efe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8014f00:	683b      	ldr	r3, [r7, #0]
 8014f02:	689b      	ldr	r3, [r3, #8]
 8014f04:	031b      	lsls	r3, r3, #12
 8014f06:	693a      	ldr	r2, [r7, #16]
 8014f08:	4313      	orrs	r3, r2
 8014f0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014f0c:	687b      	ldr	r3, [r7, #4]
 8014f0e:	4a12      	ldr	r2, [pc, #72]	; (8014f58 <TIM_OC4_SetConfig+0xa4>)
 8014f10:	4293      	cmp	r3, r2
 8014f12:	d003      	beq.n	8014f1c <TIM_OC4_SetConfig+0x68>
 8014f14:	687b      	ldr	r3, [r7, #4]
 8014f16:	4a11      	ldr	r2, [pc, #68]	; (8014f5c <TIM_OC4_SetConfig+0xa8>)
 8014f18:	4293      	cmp	r3, r2
 8014f1a:	d109      	bne.n	8014f30 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8014f1c:	697b      	ldr	r3, [r7, #20]
 8014f1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8014f22:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8014f24:	683b      	ldr	r3, [r7, #0]
 8014f26:	695b      	ldr	r3, [r3, #20]
 8014f28:	019b      	lsls	r3, r3, #6
 8014f2a:	697a      	ldr	r2, [r7, #20]
 8014f2c:	4313      	orrs	r3, r2
 8014f2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014f30:	687b      	ldr	r3, [r7, #4]
 8014f32:	697a      	ldr	r2, [r7, #20]
 8014f34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8014f36:	687b      	ldr	r3, [r7, #4]
 8014f38:	68fa      	ldr	r2, [r7, #12]
 8014f3a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8014f3c:	683b      	ldr	r3, [r7, #0]
 8014f3e:	685a      	ldr	r2, [r3, #4]
 8014f40:	687b      	ldr	r3, [r7, #4]
 8014f42:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014f44:	687b      	ldr	r3, [r7, #4]
 8014f46:	693a      	ldr	r2, [r7, #16]
 8014f48:	621a      	str	r2, [r3, #32]
}
 8014f4a:	bf00      	nop
 8014f4c:	371c      	adds	r7, #28
 8014f4e:	46bd      	mov	sp, r7
 8014f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f54:	4770      	bx	lr
 8014f56:	bf00      	nop
 8014f58:	40010000 	.word	0x40010000
 8014f5c:	40010400 	.word	0x40010400

08014f60 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8014f60:	b580      	push	{r7, lr}
 8014f62:	b086      	sub	sp, #24
 8014f64:	af00      	add	r7, sp, #0
 8014f66:	6078      	str	r0, [r7, #4]
 8014f68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8014f6a:	2300      	movs	r3, #0
 8014f6c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8014f6e:	687b      	ldr	r3, [r7, #4]
 8014f70:	681b      	ldr	r3, [r3, #0]
 8014f72:	689b      	ldr	r3, [r3, #8]
 8014f74:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8014f76:	693b      	ldr	r3, [r7, #16]
 8014f78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014f7c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8014f7e:	683b      	ldr	r3, [r7, #0]
 8014f80:	685b      	ldr	r3, [r3, #4]
 8014f82:	693a      	ldr	r2, [r7, #16]
 8014f84:	4313      	orrs	r3, r2
 8014f86:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8014f88:	693b      	ldr	r3, [r7, #16]
 8014f8a:	f023 0307 	bic.w	r3, r3, #7
 8014f8e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8014f90:	683b      	ldr	r3, [r7, #0]
 8014f92:	681b      	ldr	r3, [r3, #0]
 8014f94:	693a      	ldr	r2, [r7, #16]
 8014f96:	4313      	orrs	r3, r2
 8014f98:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8014f9a:	687b      	ldr	r3, [r7, #4]
 8014f9c:	681b      	ldr	r3, [r3, #0]
 8014f9e:	693a      	ldr	r2, [r7, #16]
 8014fa0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8014fa2:	683b      	ldr	r3, [r7, #0]
 8014fa4:	685b      	ldr	r3, [r3, #4]
 8014fa6:	2b70      	cmp	r3, #112	; 0x70
 8014fa8:	d01a      	beq.n	8014fe0 <TIM_SlaveTimer_SetConfig+0x80>
 8014faa:	2b70      	cmp	r3, #112	; 0x70
 8014fac:	d860      	bhi.n	8015070 <TIM_SlaveTimer_SetConfig+0x110>
 8014fae:	2b60      	cmp	r3, #96	; 0x60
 8014fb0:	d054      	beq.n	801505c <TIM_SlaveTimer_SetConfig+0xfc>
 8014fb2:	2b60      	cmp	r3, #96	; 0x60
 8014fb4:	d85c      	bhi.n	8015070 <TIM_SlaveTimer_SetConfig+0x110>
 8014fb6:	2b50      	cmp	r3, #80	; 0x50
 8014fb8:	d046      	beq.n	8015048 <TIM_SlaveTimer_SetConfig+0xe8>
 8014fba:	2b50      	cmp	r3, #80	; 0x50
 8014fbc:	d858      	bhi.n	8015070 <TIM_SlaveTimer_SetConfig+0x110>
 8014fbe:	2b40      	cmp	r3, #64	; 0x40
 8014fc0:	d019      	beq.n	8014ff6 <TIM_SlaveTimer_SetConfig+0x96>
 8014fc2:	2b40      	cmp	r3, #64	; 0x40
 8014fc4:	d854      	bhi.n	8015070 <TIM_SlaveTimer_SetConfig+0x110>
 8014fc6:	2b30      	cmp	r3, #48	; 0x30
 8014fc8:	d055      	beq.n	8015076 <TIM_SlaveTimer_SetConfig+0x116>
 8014fca:	2b30      	cmp	r3, #48	; 0x30
 8014fcc:	d850      	bhi.n	8015070 <TIM_SlaveTimer_SetConfig+0x110>
 8014fce:	2b20      	cmp	r3, #32
 8014fd0:	d051      	beq.n	8015076 <TIM_SlaveTimer_SetConfig+0x116>
 8014fd2:	2b20      	cmp	r3, #32
 8014fd4:	d84c      	bhi.n	8015070 <TIM_SlaveTimer_SetConfig+0x110>
 8014fd6:	2b00      	cmp	r3, #0
 8014fd8:	d04d      	beq.n	8015076 <TIM_SlaveTimer_SetConfig+0x116>
 8014fda:	2b10      	cmp	r3, #16
 8014fdc:	d04b      	beq.n	8015076 <TIM_SlaveTimer_SetConfig+0x116>
 8014fde:	e047      	b.n	8015070 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8014fe0:	687b      	ldr	r3, [r7, #4]
 8014fe2:	6818      	ldr	r0, [r3, #0]
 8014fe4:	683b      	ldr	r3, [r7, #0]
 8014fe6:	68d9      	ldr	r1, [r3, #12]
 8014fe8:	683b      	ldr	r3, [r7, #0]
 8014fea:	689a      	ldr	r2, [r3, #8]
 8014fec:	683b      	ldr	r3, [r7, #0]
 8014fee:	691b      	ldr	r3, [r3, #16]
 8014ff0:	f000 f9ec 	bl	80153cc <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8014ff4:	e040      	b.n	8015078 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8014ff6:	683b      	ldr	r3, [r7, #0]
 8014ff8:	681b      	ldr	r3, [r3, #0]
 8014ffa:	2b05      	cmp	r3, #5
 8014ffc:	d101      	bne.n	8015002 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8014ffe:	2301      	movs	r3, #1
 8015000:	e03b      	b.n	801507a <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8015002:	687b      	ldr	r3, [r7, #4]
 8015004:	681b      	ldr	r3, [r3, #0]
 8015006:	6a1b      	ldr	r3, [r3, #32]
 8015008:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 801500a:	687b      	ldr	r3, [r7, #4]
 801500c:	681b      	ldr	r3, [r3, #0]
 801500e:	6a1a      	ldr	r2, [r3, #32]
 8015010:	687b      	ldr	r3, [r7, #4]
 8015012:	681b      	ldr	r3, [r3, #0]
 8015014:	f022 0201 	bic.w	r2, r2, #1
 8015018:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 801501a:	687b      	ldr	r3, [r7, #4]
 801501c:	681b      	ldr	r3, [r3, #0]
 801501e:	699b      	ldr	r3, [r3, #24]
 8015020:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8015022:	68bb      	ldr	r3, [r7, #8]
 8015024:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8015028:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 801502a:	683b      	ldr	r3, [r7, #0]
 801502c:	691b      	ldr	r3, [r3, #16]
 801502e:	011b      	lsls	r3, r3, #4
 8015030:	68ba      	ldr	r2, [r7, #8]
 8015032:	4313      	orrs	r3, r2
 8015034:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8015036:	687b      	ldr	r3, [r7, #4]
 8015038:	681b      	ldr	r3, [r3, #0]
 801503a:	68ba      	ldr	r2, [r7, #8]
 801503c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 801503e:	687b      	ldr	r3, [r7, #4]
 8015040:	681b      	ldr	r3, [r3, #0]
 8015042:	68fa      	ldr	r2, [r7, #12]
 8015044:	621a      	str	r2, [r3, #32]
      break;
 8015046:	e017      	b.n	8015078 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8015048:	687b      	ldr	r3, [r7, #4]
 801504a:	6818      	ldr	r0, [r3, #0]
 801504c:	683b      	ldr	r3, [r7, #0]
 801504e:	6899      	ldr	r1, [r3, #8]
 8015050:	683b      	ldr	r3, [r7, #0]
 8015052:	691b      	ldr	r3, [r3, #16]
 8015054:	461a      	mov	r2, r3
 8015056:	f000 f889 	bl	801516c <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 801505a:	e00d      	b.n	8015078 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 801505c:	687b      	ldr	r3, [r7, #4]
 801505e:	6818      	ldr	r0, [r3, #0]
 8015060:	683b      	ldr	r3, [r7, #0]
 8015062:	6899      	ldr	r1, [r3, #8]
 8015064:	683b      	ldr	r3, [r7, #0]
 8015066:	691b      	ldr	r3, [r3, #16]
 8015068:	461a      	mov	r2, r3
 801506a:	f000 f8eb 	bl	8015244 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 801506e:	e003      	b.n	8015078 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8015070:	2301      	movs	r3, #1
 8015072:	75fb      	strb	r3, [r7, #23]
      break;
 8015074:	e000      	b.n	8015078 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8015076:	bf00      	nop
  }

  return status;
 8015078:	7dfb      	ldrb	r3, [r7, #23]
}
 801507a:	4618      	mov	r0, r3
 801507c:	3718      	adds	r7, #24
 801507e:	46bd      	mov	sp, r7
 8015080:	bd80      	pop	{r7, pc}
	...

08015084 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8015084:	b480      	push	{r7}
 8015086:	b087      	sub	sp, #28
 8015088:	af00      	add	r7, sp, #0
 801508a:	60f8      	str	r0, [r7, #12]
 801508c:	60b9      	str	r1, [r7, #8]
 801508e:	607a      	str	r2, [r7, #4]
 8015090:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8015092:	68fb      	ldr	r3, [r7, #12]
 8015094:	6a1b      	ldr	r3, [r3, #32]
 8015096:	f023 0201 	bic.w	r2, r3, #1
 801509a:	68fb      	ldr	r3, [r7, #12]
 801509c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801509e:	68fb      	ldr	r3, [r7, #12]
 80150a0:	699b      	ldr	r3, [r3, #24]
 80150a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80150a4:	68fb      	ldr	r3, [r7, #12]
 80150a6:	6a1b      	ldr	r3, [r3, #32]
 80150a8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80150aa:	68fb      	ldr	r3, [r7, #12]
 80150ac:	4a28      	ldr	r2, [pc, #160]	; (8015150 <TIM_TI1_SetConfig+0xcc>)
 80150ae:	4293      	cmp	r3, r2
 80150b0:	d01b      	beq.n	80150ea <TIM_TI1_SetConfig+0x66>
 80150b2:	68fb      	ldr	r3, [r7, #12]
 80150b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80150b8:	d017      	beq.n	80150ea <TIM_TI1_SetConfig+0x66>
 80150ba:	68fb      	ldr	r3, [r7, #12]
 80150bc:	4a25      	ldr	r2, [pc, #148]	; (8015154 <TIM_TI1_SetConfig+0xd0>)
 80150be:	4293      	cmp	r3, r2
 80150c0:	d013      	beq.n	80150ea <TIM_TI1_SetConfig+0x66>
 80150c2:	68fb      	ldr	r3, [r7, #12]
 80150c4:	4a24      	ldr	r2, [pc, #144]	; (8015158 <TIM_TI1_SetConfig+0xd4>)
 80150c6:	4293      	cmp	r3, r2
 80150c8:	d00f      	beq.n	80150ea <TIM_TI1_SetConfig+0x66>
 80150ca:	68fb      	ldr	r3, [r7, #12]
 80150cc:	4a23      	ldr	r2, [pc, #140]	; (801515c <TIM_TI1_SetConfig+0xd8>)
 80150ce:	4293      	cmp	r3, r2
 80150d0:	d00b      	beq.n	80150ea <TIM_TI1_SetConfig+0x66>
 80150d2:	68fb      	ldr	r3, [r7, #12]
 80150d4:	4a22      	ldr	r2, [pc, #136]	; (8015160 <TIM_TI1_SetConfig+0xdc>)
 80150d6:	4293      	cmp	r3, r2
 80150d8:	d007      	beq.n	80150ea <TIM_TI1_SetConfig+0x66>
 80150da:	68fb      	ldr	r3, [r7, #12]
 80150dc:	4a21      	ldr	r2, [pc, #132]	; (8015164 <TIM_TI1_SetConfig+0xe0>)
 80150de:	4293      	cmp	r3, r2
 80150e0:	d003      	beq.n	80150ea <TIM_TI1_SetConfig+0x66>
 80150e2:	68fb      	ldr	r3, [r7, #12]
 80150e4:	4a20      	ldr	r2, [pc, #128]	; (8015168 <TIM_TI1_SetConfig+0xe4>)
 80150e6:	4293      	cmp	r3, r2
 80150e8:	d101      	bne.n	80150ee <TIM_TI1_SetConfig+0x6a>
 80150ea:	2301      	movs	r3, #1
 80150ec:	e000      	b.n	80150f0 <TIM_TI1_SetConfig+0x6c>
 80150ee:	2300      	movs	r3, #0
 80150f0:	2b00      	cmp	r3, #0
 80150f2:	d008      	beq.n	8015106 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80150f4:	697b      	ldr	r3, [r7, #20]
 80150f6:	f023 0303 	bic.w	r3, r3, #3
 80150fa:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80150fc:	697a      	ldr	r2, [r7, #20]
 80150fe:	687b      	ldr	r3, [r7, #4]
 8015100:	4313      	orrs	r3, r2
 8015102:	617b      	str	r3, [r7, #20]
 8015104:	e003      	b.n	801510e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8015106:	697b      	ldr	r3, [r7, #20]
 8015108:	f043 0301 	orr.w	r3, r3, #1
 801510c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801510e:	697b      	ldr	r3, [r7, #20]
 8015110:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8015114:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8015116:	683b      	ldr	r3, [r7, #0]
 8015118:	011b      	lsls	r3, r3, #4
 801511a:	b2db      	uxtb	r3, r3
 801511c:	697a      	ldr	r2, [r7, #20]
 801511e:	4313      	orrs	r3, r2
 8015120:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8015122:	693b      	ldr	r3, [r7, #16]
 8015124:	f023 030a 	bic.w	r3, r3, #10
 8015128:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 801512a:	68bb      	ldr	r3, [r7, #8]
 801512c:	f003 030a 	and.w	r3, r3, #10
 8015130:	693a      	ldr	r2, [r7, #16]
 8015132:	4313      	orrs	r3, r2
 8015134:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8015136:	68fb      	ldr	r3, [r7, #12]
 8015138:	697a      	ldr	r2, [r7, #20]
 801513a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801513c:	68fb      	ldr	r3, [r7, #12]
 801513e:	693a      	ldr	r2, [r7, #16]
 8015140:	621a      	str	r2, [r3, #32]
}
 8015142:	bf00      	nop
 8015144:	371c      	adds	r7, #28
 8015146:	46bd      	mov	sp, r7
 8015148:	f85d 7b04 	ldr.w	r7, [sp], #4
 801514c:	4770      	bx	lr
 801514e:	bf00      	nop
 8015150:	40010000 	.word	0x40010000
 8015154:	40000400 	.word	0x40000400
 8015158:	40000800 	.word	0x40000800
 801515c:	40000c00 	.word	0x40000c00
 8015160:	40010400 	.word	0x40010400
 8015164:	40014000 	.word	0x40014000
 8015168:	40001800 	.word	0x40001800

0801516c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801516c:	b480      	push	{r7}
 801516e:	b087      	sub	sp, #28
 8015170:	af00      	add	r7, sp, #0
 8015172:	60f8      	str	r0, [r7, #12]
 8015174:	60b9      	str	r1, [r7, #8]
 8015176:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8015178:	68fb      	ldr	r3, [r7, #12]
 801517a:	6a1b      	ldr	r3, [r3, #32]
 801517c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801517e:	68fb      	ldr	r3, [r7, #12]
 8015180:	6a1b      	ldr	r3, [r3, #32]
 8015182:	f023 0201 	bic.w	r2, r3, #1
 8015186:	68fb      	ldr	r3, [r7, #12]
 8015188:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801518a:	68fb      	ldr	r3, [r7, #12]
 801518c:	699b      	ldr	r3, [r3, #24]
 801518e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8015190:	693b      	ldr	r3, [r7, #16]
 8015192:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8015196:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8015198:	687b      	ldr	r3, [r7, #4]
 801519a:	011b      	lsls	r3, r3, #4
 801519c:	693a      	ldr	r2, [r7, #16]
 801519e:	4313      	orrs	r3, r2
 80151a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80151a2:	697b      	ldr	r3, [r7, #20]
 80151a4:	f023 030a 	bic.w	r3, r3, #10
 80151a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80151aa:	697a      	ldr	r2, [r7, #20]
 80151ac:	68bb      	ldr	r3, [r7, #8]
 80151ae:	4313      	orrs	r3, r2
 80151b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80151b2:	68fb      	ldr	r3, [r7, #12]
 80151b4:	693a      	ldr	r2, [r7, #16]
 80151b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80151b8:	68fb      	ldr	r3, [r7, #12]
 80151ba:	697a      	ldr	r2, [r7, #20]
 80151bc:	621a      	str	r2, [r3, #32]
}
 80151be:	bf00      	nop
 80151c0:	371c      	adds	r7, #28
 80151c2:	46bd      	mov	sp, r7
 80151c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151c8:	4770      	bx	lr

080151ca <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80151ca:	b480      	push	{r7}
 80151cc:	b087      	sub	sp, #28
 80151ce:	af00      	add	r7, sp, #0
 80151d0:	60f8      	str	r0, [r7, #12]
 80151d2:	60b9      	str	r1, [r7, #8]
 80151d4:	607a      	str	r2, [r7, #4]
 80151d6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80151d8:	68fb      	ldr	r3, [r7, #12]
 80151da:	6a1b      	ldr	r3, [r3, #32]
 80151dc:	f023 0210 	bic.w	r2, r3, #16
 80151e0:	68fb      	ldr	r3, [r7, #12]
 80151e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80151e4:	68fb      	ldr	r3, [r7, #12]
 80151e6:	699b      	ldr	r3, [r3, #24]
 80151e8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80151ea:	68fb      	ldr	r3, [r7, #12]
 80151ec:	6a1b      	ldr	r3, [r3, #32]
 80151ee:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80151f0:	697b      	ldr	r3, [r7, #20]
 80151f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80151f6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80151f8:	687b      	ldr	r3, [r7, #4]
 80151fa:	021b      	lsls	r3, r3, #8
 80151fc:	697a      	ldr	r2, [r7, #20]
 80151fe:	4313      	orrs	r3, r2
 8015200:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8015202:	697b      	ldr	r3, [r7, #20]
 8015204:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8015208:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 801520a:	683b      	ldr	r3, [r7, #0]
 801520c:	031b      	lsls	r3, r3, #12
 801520e:	b29b      	uxth	r3, r3
 8015210:	697a      	ldr	r2, [r7, #20]
 8015212:	4313      	orrs	r3, r2
 8015214:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8015216:	693b      	ldr	r3, [r7, #16]
 8015218:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801521c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 801521e:	68bb      	ldr	r3, [r7, #8]
 8015220:	011b      	lsls	r3, r3, #4
 8015222:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8015226:	693a      	ldr	r2, [r7, #16]
 8015228:	4313      	orrs	r3, r2
 801522a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801522c:	68fb      	ldr	r3, [r7, #12]
 801522e:	697a      	ldr	r2, [r7, #20]
 8015230:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8015232:	68fb      	ldr	r3, [r7, #12]
 8015234:	693a      	ldr	r2, [r7, #16]
 8015236:	621a      	str	r2, [r3, #32]
}
 8015238:	bf00      	nop
 801523a:	371c      	adds	r7, #28
 801523c:	46bd      	mov	sp, r7
 801523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015242:	4770      	bx	lr

08015244 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8015244:	b480      	push	{r7}
 8015246:	b087      	sub	sp, #28
 8015248:	af00      	add	r7, sp, #0
 801524a:	60f8      	str	r0, [r7, #12]
 801524c:	60b9      	str	r1, [r7, #8]
 801524e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8015250:	68fb      	ldr	r3, [r7, #12]
 8015252:	6a1b      	ldr	r3, [r3, #32]
 8015254:	f023 0210 	bic.w	r2, r3, #16
 8015258:	68fb      	ldr	r3, [r7, #12]
 801525a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801525c:	68fb      	ldr	r3, [r7, #12]
 801525e:	699b      	ldr	r3, [r3, #24]
 8015260:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8015262:	68fb      	ldr	r3, [r7, #12]
 8015264:	6a1b      	ldr	r3, [r3, #32]
 8015266:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8015268:	697b      	ldr	r3, [r7, #20]
 801526a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801526e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8015270:	687b      	ldr	r3, [r7, #4]
 8015272:	031b      	lsls	r3, r3, #12
 8015274:	697a      	ldr	r2, [r7, #20]
 8015276:	4313      	orrs	r3, r2
 8015278:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801527a:	693b      	ldr	r3, [r7, #16]
 801527c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8015280:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8015282:	68bb      	ldr	r3, [r7, #8]
 8015284:	011b      	lsls	r3, r3, #4
 8015286:	693a      	ldr	r2, [r7, #16]
 8015288:	4313      	orrs	r3, r2
 801528a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801528c:	68fb      	ldr	r3, [r7, #12]
 801528e:	697a      	ldr	r2, [r7, #20]
 8015290:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8015292:	68fb      	ldr	r3, [r7, #12]
 8015294:	693a      	ldr	r2, [r7, #16]
 8015296:	621a      	str	r2, [r3, #32]
}
 8015298:	bf00      	nop
 801529a:	371c      	adds	r7, #28
 801529c:	46bd      	mov	sp, r7
 801529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152a2:	4770      	bx	lr

080152a4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80152a4:	b480      	push	{r7}
 80152a6:	b087      	sub	sp, #28
 80152a8:	af00      	add	r7, sp, #0
 80152aa:	60f8      	str	r0, [r7, #12]
 80152ac:	60b9      	str	r1, [r7, #8]
 80152ae:	607a      	str	r2, [r7, #4]
 80152b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80152b2:	68fb      	ldr	r3, [r7, #12]
 80152b4:	6a1b      	ldr	r3, [r3, #32]
 80152b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80152ba:	68fb      	ldr	r3, [r7, #12]
 80152bc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80152be:	68fb      	ldr	r3, [r7, #12]
 80152c0:	69db      	ldr	r3, [r3, #28]
 80152c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80152c4:	68fb      	ldr	r3, [r7, #12]
 80152c6:	6a1b      	ldr	r3, [r3, #32]
 80152c8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80152ca:	697b      	ldr	r3, [r7, #20]
 80152cc:	f023 0303 	bic.w	r3, r3, #3
 80152d0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80152d2:	697a      	ldr	r2, [r7, #20]
 80152d4:	687b      	ldr	r3, [r7, #4]
 80152d6:	4313      	orrs	r3, r2
 80152d8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80152da:	697b      	ldr	r3, [r7, #20]
 80152dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80152e0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80152e2:	683b      	ldr	r3, [r7, #0]
 80152e4:	011b      	lsls	r3, r3, #4
 80152e6:	b2db      	uxtb	r3, r3
 80152e8:	697a      	ldr	r2, [r7, #20]
 80152ea:	4313      	orrs	r3, r2
 80152ec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80152ee:	693b      	ldr	r3, [r7, #16]
 80152f0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80152f4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80152f6:	68bb      	ldr	r3, [r7, #8]
 80152f8:	021b      	lsls	r3, r3, #8
 80152fa:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80152fe:	693a      	ldr	r2, [r7, #16]
 8015300:	4313      	orrs	r3, r2
 8015302:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8015304:	68fb      	ldr	r3, [r7, #12]
 8015306:	697a      	ldr	r2, [r7, #20]
 8015308:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 801530a:	68fb      	ldr	r3, [r7, #12]
 801530c:	693a      	ldr	r2, [r7, #16]
 801530e:	621a      	str	r2, [r3, #32]
}
 8015310:	bf00      	nop
 8015312:	371c      	adds	r7, #28
 8015314:	46bd      	mov	sp, r7
 8015316:	f85d 7b04 	ldr.w	r7, [sp], #4
 801531a:	4770      	bx	lr

0801531c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 801531c:	b480      	push	{r7}
 801531e:	b087      	sub	sp, #28
 8015320:	af00      	add	r7, sp, #0
 8015322:	60f8      	str	r0, [r7, #12]
 8015324:	60b9      	str	r1, [r7, #8]
 8015326:	607a      	str	r2, [r7, #4]
 8015328:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801532a:	68fb      	ldr	r3, [r7, #12]
 801532c:	6a1b      	ldr	r3, [r3, #32]
 801532e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8015332:	68fb      	ldr	r3, [r7, #12]
 8015334:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8015336:	68fb      	ldr	r3, [r7, #12]
 8015338:	69db      	ldr	r3, [r3, #28]
 801533a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801533c:	68fb      	ldr	r3, [r7, #12]
 801533e:	6a1b      	ldr	r3, [r3, #32]
 8015340:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8015342:	697b      	ldr	r3, [r7, #20]
 8015344:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8015348:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 801534a:	687b      	ldr	r3, [r7, #4]
 801534c:	021b      	lsls	r3, r3, #8
 801534e:	697a      	ldr	r2, [r7, #20]
 8015350:	4313      	orrs	r3, r2
 8015352:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8015354:	697b      	ldr	r3, [r7, #20]
 8015356:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801535a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 801535c:	683b      	ldr	r3, [r7, #0]
 801535e:	031b      	lsls	r3, r3, #12
 8015360:	b29b      	uxth	r3, r3
 8015362:	697a      	ldr	r2, [r7, #20]
 8015364:	4313      	orrs	r3, r2
 8015366:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8015368:	693b      	ldr	r3, [r7, #16]
 801536a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 801536e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8015370:	68bb      	ldr	r3, [r7, #8]
 8015372:	031b      	lsls	r3, r3, #12
 8015374:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8015378:	693a      	ldr	r2, [r7, #16]
 801537a:	4313      	orrs	r3, r2
 801537c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 801537e:	68fb      	ldr	r3, [r7, #12]
 8015380:	697a      	ldr	r2, [r7, #20]
 8015382:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8015384:	68fb      	ldr	r3, [r7, #12]
 8015386:	693a      	ldr	r2, [r7, #16]
 8015388:	621a      	str	r2, [r3, #32]
}
 801538a:	bf00      	nop
 801538c:	371c      	adds	r7, #28
 801538e:	46bd      	mov	sp, r7
 8015390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015394:	4770      	bx	lr

08015396 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8015396:	b480      	push	{r7}
 8015398:	b085      	sub	sp, #20
 801539a:	af00      	add	r7, sp, #0
 801539c:	6078      	str	r0, [r7, #4]
 801539e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80153a0:	687b      	ldr	r3, [r7, #4]
 80153a2:	689b      	ldr	r3, [r3, #8]
 80153a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80153a6:	68fb      	ldr	r3, [r7, #12]
 80153a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80153ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80153ae:	683a      	ldr	r2, [r7, #0]
 80153b0:	68fb      	ldr	r3, [r7, #12]
 80153b2:	4313      	orrs	r3, r2
 80153b4:	f043 0307 	orr.w	r3, r3, #7
 80153b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80153ba:	687b      	ldr	r3, [r7, #4]
 80153bc:	68fa      	ldr	r2, [r7, #12]
 80153be:	609a      	str	r2, [r3, #8]
}
 80153c0:	bf00      	nop
 80153c2:	3714      	adds	r7, #20
 80153c4:	46bd      	mov	sp, r7
 80153c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153ca:	4770      	bx	lr

080153cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80153cc:	b480      	push	{r7}
 80153ce:	b087      	sub	sp, #28
 80153d0:	af00      	add	r7, sp, #0
 80153d2:	60f8      	str	r0, [r7, #12]
 80153d4:	60b9      	str	r1, [r7, #8]
 80153d6:	607a      	str	r2, [r7, #4]
 80153d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80153da:	68fb      	ldr	r3, [r7, #12]
 80153dc:	689b      	ldr	r3, [r3, #8]
 80153de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80153e0:	697b      	ldr	r3, [r7, #20]
 80153e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80153e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80153e8:	683b      	ldr	r3, [r7, #0]
 80153ea:	021a      	lsls	r2, r3, #8
 80153ec:	687b      	ldr	r3, [r7, #4]
 80153ee:	431a      	orrs	r2, r3
 80153f0:	68bb      	ldr	r3, [r7, #8]
 80153f2:	4313      	orrs	r3, r2
 80153f4:	697a      	ldr	r2, [r7, #20]
 80153f6:	4313      	orrs	r3, r2
 80153f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80153fa:	68fb      	ldr	r3, [r7, #12]
 80153fc:	697a      	ldr	r2, [r7, #20]
 80153fe:	609a      	str	r2, [r3, #8]
}
 8015400:	bf00      	nop
 8015402:	371c      	adds	r7, #28
 8015404:	46bd      	mov	sp, r7
 8015406:	f85d 7b04 	ldr.w	r7, [sp], #4
 801540a:	4770      	bx	lr

0801540c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801540c:	b480      	push	{r7}
 801540e:	b087      	sub	sp, #28
 8015410:	af00      	add	r7, sp, #0
 8015412:	60f8      	str	r0, [r7, #12]
 8015414:	60b9      	str	r1, [r7, #8]
 8015416:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8015418:	68bb      	ldr	r3, [r7, #8]
 801541a:	f003 031f 	and.w	r3, r3, #31
 801541e:	2201      	movs	r2, #1
 8015420:	fa02 f303 	lsl.w	r3, r2, r3
 8015424:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8015426:	68fb      	ldr	r3, [r7, #12]
 8015428:	6a1a      	ldr	r2, [r3, #32]
 801542a:	697b      	ldr	r3, [r7, #20]
 801542c:	43db      	mvns	r3, r3
 801542e:	401a      	ands	r2, r3
 8015430:	68fb      	ldr	r3, [r7, #12]
 8015432:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8015434:	68fb      	ldr	r3, [r7, #12]
 8015436:	6a1a      	ldr	r2, [r3, #32]
 8015438:	68bb      	ldr	r3, [r7, #8]
 801543a:	f003 031f 	and.w	r3, r3, #31
 801543e:	6879      	ldr	r1, [r7, #4]
 8015440:	fa01 f303 	lsl.w	r3, r1, r3
 8015444:	431a      	orrs	r2, r3
 8015446:	68fb      	ldr	r3, [r7, #12]
 8015448:	621a      	str	r2, [r3, #32]
}
 801544a:	bf00      	nop
 801544c:	371c      	adds	r7, #28
 801544e:	46bd      	mov	sp, r7
 8015450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015454:	4770      	bx	lr
	...

08015458 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8015458:	b480      	push	{r7}
 801545a:	b085      	sub	sp, #20
 801545c:	af00      	add	r7, sp, #0
 801545e:	6078      	str	r0, [r7, #4]
 8015460:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8015462:	687b      	ldr	r3, [r7, #4]
 8015464:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015468:	2b01      	cmp	r3, #1
 801546a:	d101      	bne.n	8015470 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801546c:	2302      	movs	r3, #2
 801546e:	e05a      	b.n	8015526 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8015470:	687b      	ldr	r3, [r7, #4]
 8015472:	2201      	movs	r2, #1
 8015474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015478:	687b      	ldr	r3, [r7, #4]
 801547a:	2202      	movs	r2, #2
 801547c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8015480:	687b      	ldr	r3, [r7, #4]
 8015482:	681b      	ldr	r3, [r3, #0]
 8015484:	685b      	ldr	r3, [r3, #4]
 8015486:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8015488:	687b      	ldr	r3, [r7, #4]
 801548a:	681b      	ldr	r3, [r3, #0]
 801548c:	689b      	ldr	r3, [r3, #8]
 801548e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8015490:	68fb      	ldr	r3, [r7, #12]
 8015492:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8015496:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8015498:	683b      	ldr	r3, [r7, #0]
 801549a:	681b      	ldr	r3, [r3, #0]
 801549c:	68fa      	ldr	r2, [r7, #12]
 801549e:	4313      	orrs	r3, r2
 80154a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80154a2:	687b      	ldr	r3, [r7, #4]
 80154a4:	681b      	ldr	r3, [r3, #0]
 80154a6:	68fa      	ldr	r2, [r7, #12]
 80154a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80154aa:	687b      	ldr	r3, [r7, #4]
 80154ac:	681b      	ldr	r3, [r3, #0]
 80154ae:	4a21      	ldr	r2, [pc, #132]	; (8015534 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80154b0:	4293      	cmp	r3, r2
 80154b2:	d022      	beq.n	80154fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80154b4:	687b      	ldr	r3, [r7, #4]
 80154b6:	681b      	ldr	r3, [r3, #0]
 80154b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80154bc:	d01d      	beq.n	80154fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80154be:	687b      	ldr	r3, [r7, #4]
 80154c0:	681b      	ldr	r3, [r3, #0]
 80154c2:	4a1d      	ldr	r2, [pc, #116]	; (8015538 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80154c4:	4293      	cmp	r3, r2
 80154c6:	d018      	beq.n	80154fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80154c8:	687b      	ldr	r3, [r7, #4]
 80154ca:	681b      	ldr	r3, [r3, #0]
 80154cc:	4a1b      	ldr	r2, [pc, #108]	; (801553c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80154ce:	4293      	cmp	r3, r2
 80154d0:	d013      	beq.n	80154fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80154d2:	687b      	ldr	r3, [r7, #4]
 80154d4:	681b      	ldr	r3, [r3, #0]
 80154d6:	4a1a      	ldr	r2, [pc, #104]	; (8015540 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80154d8:	4293      	cmp	r3, r2
 80154da:	d00e      	beq.n	80154fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80154dc:	687b      	ldr	r3, [r7, #4]
 80154de:	681b      	ldr	r3, [r3, #0]
 80154e0:	4a18      	ldr	r2, [pc, #96]	; (8015544 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80154e2:	4293      	cmp	r3, r2
 80154e4:	d009      	beq.n	80154fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80154e6:	687b      	ldr	r3, [r7, #4]
 80154e8:	681b      	ldr	r3, [r3, #0]
 80154ea:	4a17      	ldr	r2, [pc, #92]	; (8015548 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80154ec:	4293      	cmp	r3, r2
 80154ee:	d004      	beq.n	80154fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80154f0:	687b      	ldr	r3, [r7, #4]
 80154f2:	681b      	ldr	r3, [r3, #0]
 80154f4:	4a15      	ldr	r2, [pc, #84]	; (801554c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80154f6:	4293      	cmp	r3, r2
 80154f8:	d10c      	bne.n	8015514 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80154fa:	68bb      	ldr	r3, [r7, #8]
 80154fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8015500:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8015502:	683b      	ldr	r3, [r7, #0]
 8015504:	685b      	ldr	r3, [r3, #4]
 8015506:	68ba      	ldr	r2, [r7, #8]
 8015508:	4313      	orrs	r3, r2
 801550a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801550c:	687b      	ldr	r3, [r7, #4]
 801550e:	681b      	ldr	r3, [r3, #0]
 8015510:	68ba      	ldr	r2, [r7, #8]
 8015512:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8015514:	687b      	ldr	r3, [r7, #4]
 8015516:	2201      	movs	r2, #1
 8015518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801551c:	687b      	ldr	r3, [r7, #4]
 801551e:	2200      	movs	r2, #0
 8015520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8015524:	2300      	movs	r3, #0
}
 8015526:	4618      	mov	r0, r3
 8015528:	3714      	adds	r7, #20
 801552a:	46bd      	mov	sp, r7
 801552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015530:	4770      	bx	lr
 8015532:	bf00      	nop
 8015534:	40010000 	.word	0x40010000
 8015538:	40000400 	.word	0x40000400
 801553c:	40000800 	.word	0x40000800
 8015540:	40000c00 	.word	0x40000c00
 8015544:	40010400 	.word	0x40010400
 8015548:	40014000 	.word	0x40014000
 801554c:	40001800 	.word	0x40001800

08015550 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8015550:	b480      	push	{r7}
 8015552:	b085      	sub	sp, #20
 8015554:	af00      	add	r7, sp, #0
 8015556:	6078      	str	r0, [r7, #4]
 8015558:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 801555a:	2300      	movs	r3, #0
 801555c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 801555e:	687b      	ldr	r3, [r7, #4]
 8015560:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015564:	2b01      	cmp	r3, #1
 8015566:	d101      	bne.n	801556c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8015568:	2302      	movs	r3, #2
 801556a:	e03d      	b.n	80155e8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 801556c:	687b      	ldr	r3, [r7, #4]
 801556e:	2201      	movs	r2, #1
 8015570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8015574:	68fb      	ldr	r3, [r7, #12]
 8015576:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 801557a:	683b      	ldr	r3, [r7, #0]
 801557c:	68db      	ldr	r3, [r3, #12]
 801557e:	4313      	orrs	r3, r2
 8015580:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8015582:	68fb      	ldr	r3, [r7, #12]
 8015584:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8015588:	683b      	ldr	r3, [r7, #0]
 801558a:	689b      	ldr	r3, [r3, #8]
 801558c:	4313      	orrs	r3, r2
 801558e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8015590:	68fb      	ldr	r3, [r7, #12]
 8015592:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8015596:	683b      	ldr	r3, [r7, #0]
 8015598:	685b      	ldr	r3, [r3, #4]
 801559a:	4313      	orrs	r3, r2
 801559c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 801559e:	68fb      	ldr	r3, [r7, #12]
 80155a0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80155a4:	683b      	ldr	r3, [r7, #0]
 80155a6:	681b      	ldr	r3, [r3, #0]
 80155a8:	4313      	orrs	r3, r2
 80155aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80155ac:	68fb      	ldr	r3, [r7, #12]
 80155ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80155b2:	683b      	ldr	r3, [r7, #0]
 80155b4:	691b      	ldr	r3, [r3, #16]
 80155b6:	4313      	orrs	r3, r2
 80155b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80155ba:	68fb      	ldr	r3, [r7, #12]
 80155bc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80155c0:	683b      	ldr	r3, [r7, #0]
 80155c2:	695b      	ldr	r3, [r3, #20]
 80155c4:	4313      	orrs	r3, r2
 80155c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80155c8:	68fb      	ldr	r3, [r7, #12]
 80155ca:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80155ce:	683b      	ldr	r3, [r7, #0]
 80155d0:	69db      	ldr	r3, [r3, #28]
 80155d2:	4313      	orrs	r3, r2
 80155d4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80155d6:	687b      	ldr	r3, [r7, #4]
 80155d8:	681b      	ldr	r3, [r3, #0]
 80155da:	68fa      	ldr	r2, [r7, #12]
 80155dc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80155de:	687b      	ldr	r3, [r7, #4]
 80155e0:	2200      	movs	r2, #0
 80155e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80155e6:	2300      	movs	r3, #0
}
 80155e8:	4618      	mov	r0, r3
 80155ea:	3714      	adds	r7, #20
 80155ec:	46bd      	mov	sp, r7
 80155ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155f2:	4770      	bx	lr

080155f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80155f4:	b480      	push	{r7}
 80155f6:	b083      	sub	sp, #12
 80155f8:	af00      	add	r7, sp, #0
 80155fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80155fc:	bf00      	nop
 80155fe:	370c      	adds	r7, #12
 8015600:	46bd      	mov	sp, r7
 8015602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015606:	4770      	bx	lr

08015608 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8015608:	b480      	push	{r7}
 801560a:	b083      	sub	sp, #12
 801560c:	af00      	add	r7, sp, #0
 801560e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8015610:	bf00      	nop
 8015612:	370c      	adds	r7, #12
 8015614:	46bd      	mov	sp, r7
 8015616:	f85d 7b04 	ldr.w	r7, [sp], #4
 801561a:	4770      	bx	lr

0801561c <__NVIC_SetPriority>:
{
 801561c:	b480      	push	{r7}
 801561e:	b083      	sub	sp, #12
 8015620:	af00      	add	r7, sp, #0
 8015622:	4603      	mov	r3, r0
 8015624:	6039      	str	r1, [r7, #0]
 8015626:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8015628:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801562c:	2b00      	cmp	r3, #0
 801562e:	db0a      	blt.n	8015646 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015630:	683b      	ldr	r3, [r7, #0]
 8015632:	b2da      	uxtb	r2, r3
 8015634:	490c      	ldr	r1, [pc, #48]	; (8015668 <__NVIC_SetPriority+0x4c>)
 8015636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801563a:	0112      	lsls	r2, r2, #4
 801563c:	b2d2      	uxtb	r2, r2
 801563e:	440b      	add	r3, r1
 8015640:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8015644:	e00a      	b.n	801565c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015646:	683b      	ldr	r3, [r7, #0]
 8015648:	b2da      	uxtb	r2, r3
 801564a:	4908      	ldr	r1, [pc, #32]	; (801566c <__NVIC_SetPriority+0x50>)
 801564c:	79fb      	ldrb	r3, [r7, #7]
 801564e:	f003 030f 	and.w	r3, r3, #15
 8015652:	3b04      	subs	r3, #4
 8015654:	0112      	lsls	r2, r2, #4
 8015656:	b2d2      	uxtb	r2, r2
 8015658:	440b      	add	r3, r1
 801565a:	761a      	strb	r2, [r3, #24]
}
 801565c:	bf00      	nop
 801565e:	370c      	adds	r7, #12
 8015660:	46bd      	mov	sp, r7
 8015662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015666:	4770      	bx	lr
 8015668:	e000e100 	.word	0xe000e100
 801566c:	e000ed00 	.word	0xe000ed00

08015670 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8015670:	b580      	push	{r7, lr}
 8015672:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8015674:	4b05      	ldr	r3, [pc, #20]	; (801568c <SysTick_Handler+0x1c>)
 8015676:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8015678:	f001 ffde 	bl	8017638 <xTaskGetSchedulerState>
 801567c:	4603      	mov	r3, r0
 801567e:	2b01      	cmp	r3, #1
 8015680:	d001      	beq.n	8015686 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8015682:	f002 fdd1 	bl	8018228 <xPortSysTickHandler>
  }
}
 8015686:	bf00      	nop
 8015688:	bd80      	pop	{r7, pc}
 801568a:	bf00      	nop
 801568c:	e000e010 	.word	0xe000e010

08015690 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8015690:	b580      	push	{r7, lr}
 8015692:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8015694:	2100      	movs	r1, #0
 8015696:	f06f 0004 	mvn.w	r0, #4
 801569a:	f7ff ffbf 	bl	801561c <__NVIC_SetPriority>
#endif
}
 801569e:	bf00      	nop
 80156a0:	bd80      	pop	{r7, pc}
	...

080156a4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80156a4:	b480      	push	{r7}
 80156a6:	b083      	sub	sp, #12
 80156a8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80156aa:	f3ef 8305 	mrs	r3, IPSR
 80156ae:	603b      	str	r3, [r7, #0]
  return(result);
 80156b0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80156b2:	2b00      	cmp	r3, #0
 80156b4:	d003      	beq.n	80156be <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80156b6:	f06f 0305 	mvn.w	r3, #5
 80156ba:	607b      	str	r3, [r7, #4]
 80156bc:	e00c      	b.n	80156d8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80156be:	4b0a      	ldr	r3, [pc, #40]	; (80156e8 <osKernelInitialize+0x44>)
 80156c0:	681b      	ldr	r3, [r3, #0]
 80156c2:	2b00      	cmp	r3, #0
 80156c4:	d105      	bne.n	80156d2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80156c6:	4b08      	ldr	r3, [pc, #32]	; (80156e8 <osKernelInitialize+0x44>)
 80156c8:	2201      	movs	r2, #1
 80156ca:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80156cc:	2300      	movs	r3, #0
 80156ce:	607b      	str	r3, [r7, #4]
 80156d0:	e002      	b.n	80156d8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80156d2:	f04f 33ff 	mov.w	r3, #4294967295
 80156d6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80156d8:	687b      	ldr	r3, [r7, #4]
}
 80156da:	4618      	mov	r0, r3
 80156dc:	370c      	adds	r7, #12
 80156de:	46bd      	mov	sp, r7
 80156e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156e4:	4770      	bx	lr
 80156e6:	bf00      	nop
 80156e8:	200017b0 	.word	0x200017b0

080156ec <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80156ec:	b580      	push	{r7, lr}
 80156ee:	b082      	sub	sp, #8
 80156f0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80156f2:	f3ef 8305 	mrs	r3, IPSR
 80156f6:	603b      	str	r3, [r7, #0]
  return(result);
 80156f8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80156fa:	2b00      	cmp	r3, #0
 80156fc:	d003      	beq.n	8015706 <osKernelStart+0x1a>
    stat = osErrorISR;
 80156fe:	f06f 0305 	mvn.w	r3, #5
 8015702:	607b      	str	r3, [r7, #4]
 8015704:	e010      	b.n	8015728 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8015706:	4b0b      	ldr	r3, [pc, #44]	; (8015734 <osKernelStart+0x48>)
 8015708:	681b      	ldr	r3, [r3, #0]
 801570a:	2b01      	cmp	r3, #1
 801570c:	d109      	bne.n	8015722 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 801570e:	f7ff ffbf 	bl	8015690 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8015712:	4b08      	ldr	r3, [pc, #32]	; (8015734 <osKernelStart+0x48>)
 8015714:	2202      	movs	r2, #2
 8015716:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8015718:	f001 fab4 	bl	8016c84 <vTaskStartScheduler>
      stat = osOK;
 801571c:	2300      	movs	r3, #0
 801571e:	607b      	str	r3, [r7, #4]
 8015720:	e002      	b.n	8015728 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8015722:	f04f 33ff 	mov.w	r3, #4294967295
 8015726:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8015728:	687b      	ldr	r3, [r7, #4]
}
 801572a:	4618      	mov	r0, r3
 801572c:	3708      	adds	r7, #8
 801572e:	46bd      	mov	sp, r7
 8015730:	bd80      	pop	{r7, pc}
 8015732:	bf00      	nop
 8015734:	200017b0 	.word	0x200017b0

08015738 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8015738:	b580      	push	{r7, lr}
 801573a:	b082      	sub	sp, #8
 801573c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801573e:	f3ef 8305 	mrs	r3, IPSR
 8015742:	603b      	str	r3, [r7, #0]
  return(result);
 8015744:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8015746:	2b00      	cmp	r3, #0
 8015748:	d003      	beq.n	8015752 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 801574a:	f001 fbdd 	bl	8016f08 <xTaskGetTickCountFromISR>
 801574e:	6078      	str	r0, [r7, #4]
 8015750:	e002      	b.n	8015758 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8015752:	f001 fbc9 	bl	8016ee8 <xTaskGetTickCount>
 8015756:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8015758:	687b      	ldr	r3, [r7, #4]
}
 801575a:	4618      	mov	r0, r3
 801575c:	3708      	adds	r7, #8
 801575e:	46bd      	mov	sp, r7
 8015760:	bd80      	pop	{r7, pc}

08015762 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8015762:	b580      	push	{r7, lr}
 8015764:	b08e      	sub	sp, #56	; 0x38
 8015766:	af04      	add	r7, sp, #16
 8015768:	60f8      	str	r0, [r7, #12]
 801576a:	60b9      	str	r1, [r7, #8]
 801576c:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 801576e:	2300      	movs	r3, #0
 8015770:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015772:	f3ef 8305 	mrs	r3, IPSR
 8015776:	617b      	str	r3, [r7, #20]
  return(result);
 8015778:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 801577a:	2b00      	cmp	r3, #0
 801577c:	d17e      	bne.n	801587c <osThreadNew+0x11a>
 801577e:	68fb      	ldr	r3, [r7, #12]
 8015780:	2b00      	cmp	r3, #0
 8015782:	d07b      	beq.n	801587c <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8015784:	2380      	movs	r3, #128	; 0x80
 8015786:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8015788:	2318      	movs	r3, #24
 801578a:	61fb      	str	r3, [r7, #28]

    name = NULL;
 801578c:	2300      	movs	r3, #0
 801578e:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8015790:	f04f 33ff 	mov.w	r3, #4294967295
 8015794:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8015796:	687b      	ldr	r3, [r7, #4]
 8015798:	2b00      	cmp	r3, #0
 801579a:	d045      	beq.n	8015828 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 801579c:	687b      	ldr	r3, [r7, #4]
 801579e:	681b      	ldr	r3, [r3, #0]
 80157a0:	2b00      	cmp	r3, #0
 80157a2:	d002      	beq.n	80157aa <osThreadNew+0x48>
        name = attr->name;
 80157a4:	687b      	ldr	r3, [r7, #4]
 80157a6:	681b      	ldr	r3, [r3, #0]
 80157a8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80157aa:	687b      	ldr	r3, [r7, #4]
 80157ac:	699b      	ldr	r3, [r3, #24]
 80157ae:	2b00      	cmp	r3, #0
 80157b0:	d002      	beq.n	80157b8 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80157b2:	687b      	ldr	r3, [r7, #4]
 80157b4:	699b      	ldr	r3, [r3, #24]
 80157b6:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80157b8:	69fb      	ldr	r3, [r7, #28]
 80157ba:	2b00      	cmp	r3, #0
 80157bc:	d008      	beq.n	80157d0 <osThreadNew+0x6e>
 80157be:	69fb      	ldr	r3, [r7, #28]
 80157c0:	2b38      	cmp	r3, #56	; 0x38
 80157c2:	d805      	bhi.n	80157d0 <osThreadNew+0x6e>
 80157c4:	687b      	ldr	r3, [r7, #4]
 80157c6:	685b      	ldr	r3, [r3, #4]
 80157c8:	f003 0301 	and.w	r3, r3, #1
 80157cc:	2b00      	cmp	r3, #0
 80157ce:	d001      	beq.n	80157d4 <osThreadNew+0x72>
        return (NULL);
 80157d0:	2300      	movs	r3, #0
 80157d2:	e054      	b.n	801587e <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80157d4:	687b      	ldr	r3, [r7, #4]
 80157d6:	695b      	ldr	r3, [r3, #20]
 80157d8:	2b00      	cmp	r3, #0
 80157da:	d003      	beq.n	80157e4 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80157dc:	687b      	ldr	r3, [r7, #4]
 80157de:	695b      	ldr	r3, [r3, #20]
 80157e0:	089b      	lsrs	r3, r3, #2
 80157e2:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80157e4:	687b      	ldr	r3, [r7, #4]
 80157e6:	689b      	ldr	r3, [r3, #8]
 80157e8:	2b00      	cmp	r3, #0
 80157ea:	d00e      	beq.n	801580a <osThreadNew+0xa8>
 80157ec:	687b      	ldr	r3, [r7, #4]
 80157ee:	68db      	ldr	r3, [r3, #12]
 80157f0:	2bcb      	cmp	r3, #203	; 0xcb
 80157f2:	d90a      	bls.n	801580a <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80157f4:	687b      	ldr	r3, [r7, #4]
 80157f6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80157f8:	2b00      	cmp	r3, #0
 80157fa:	d006      	beq.n	801580a <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80157fc:	687b      	ldr	r3, [r7, #4]
 80157fe:	695b      	ldr	r3, [r3, #20]
 8015800:	2b00      	cmp	r3, #0
 8015802:	d002      	beq.n	801580a <osThreadNew+0xa8>
        mem = 1;
 8015804:	2301      	movs	r3, #1
 8015806:	61bb      	str	r3, [r7, #24]
 8015808:	e010      	b.n	801582c <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 801580a:	687b      	ldr	r3, [r7, #4]
 801580c:	689b      	ldr	r3, [r3, #8]
 801580e:	2b00      	cmp	r3, #0
 8015810:	d10c      	bne.n	801582c <osThreadNew+0xca>
 8015812:	687b      	ldr	r3, [r7, #4]
 8015814:	68db      	ldr	r3, [r3, #12]
 8015816:	2b00      	cmp	r3, #0
 8015818:	d108      	bne.n	801582c <osThreadNew+0xca>
 801581a:	687b      	ldr	r3, [r7, #4]
 801581c:	691b      	ldr	r3, [r3, #16]
 801581e:	2b00      	cmp	r3, #0
 8015820:	d104      	bne.n	801582c <osThreadNew+0xca>
          mem = 0;
 8015822:	2300      	movs	r3, #0
 8015824:	61bb      	str	r3, [r7, #24]
 8015826:	e001      	b.n	801582c <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8015828:	2300      	movs	r3, #0
 801582a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 801582c:	69bb      	ldr	r3, [r7, #24]
 801582e:	2b01      	cmp	r3, #1
 8015830:	d110      	bne.n	8015854 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8015832:	687b      	ldr	r3, [r7, #4]
 8015834:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8015836:	687a      	ldr	r2, [r7, #4]
 8015838:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801583a:	9202      	str	r2, [sp, #8]
 801583c:	9301      	str	r3, [sp, #4]
 801583e:	69fb      	ldr	r3, [r7, #28]
 8015840:	9300      	str	r3, [sp, #0]
 8015842:	68bb      	ldr	r3, [r7, #8]
 8015844:	6a3a      	ldr	r2, [r7, #32]
 8015846:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015848:	68f8      	ldr	r0, [r7, #12]
 801584a:	f000 ffc5 	bl	80167d8 <xTaskCreateStatic>
 801584e:	4603      	mov	r3, r0
 8015850:	613b      	str	r3, [r7, #16]
 8015852:	e013      	b.n	801587c <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8015854:	69bb      	ldr	r3, [r7, #24]
 8015856:	2b00      	cmp	r3, #0
 8015858:	d110      	bne.n	801587c <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 801585a:	6a3b      	ldr	r3, [r7, #32]
 801585c:	b29a      	uxth	r2, r3
 801585e:	f107 0310 	add.w	r3, r7, #16
 8015862:	9301      	str	r3, [sp, #4]
 8015864:	69fb      	ldr	r3, [r7, #28]
 8015866:	9300      	str	r3, [sp, #0]
 8015868:	68bb      	ldr	r3, [r7, #8]
 801586a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801586c:	68f8      	ldr	r0, [r7, #12]
 801586e:	f001 f810 	bl	8016892 <xTaskCreate>
 8015872:	4603      	mov	r3, r0
 8015874:	2b01      	cmp	r3, #1
 8015876:	d001      	beq.n	801587c <osThreadNew+0x11a>
            hTask = NULL;
 8015878:	2300      	movs	r3, #0
 801587a:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 801587c:	693b      	ldr	r3, [r7, #16]
}
 801587e:	4618      	mov	r0, r3
 8015880:	3728      	adds	r7, #40	; 0x28
 8015882:	46bd      	mov	sp, r7
 8015884:	bd80      	pop	{r7, pc}

08015886 <osDelayUntil>:
  }

  return (stat);
}

osStatus_t osDelayUntil (uint32_t ticks) {
 8015886:	b580      	push	{r7, lr}
 8015888:	b086      	sub	sp, #24
 801588a:	af00      	add	r7, sp, #0
 801588c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801588e:	f3ef 8305 	mrs	r3, IPSR
 8015892:	60fb      	str	r3, [r7, #12]
  return(result);
 8015894:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 8015896:	2b00      	cmp	r3, #0
 8015898:	d003      	beq.n	80158a2 <osDelayUntil+0x1c>
    stat = osErrorISR;
 801589a:	f06f 0305 	mvn.w	r3, #5
 801589e:	617b      	str	r3, [r7, #20]
 80158a0:	e019      	b.n	80158d6 <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 80158a2:	2300      	movs	r3, #0
 80158a4:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 80158a6:	f001 fb1f 	bl	8016ee8 <xTaskGetTickCount>
 80158aa:	4603      	mov	r3, r0
 80158ac:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 80158ae:	68bb      	ldr	r3, [r7, #8]
 80158b0:	687a      	ldr	r2, [r7, #4]
 80158b2:	1ad3      	subs	r3, r2, r3
 80158b4:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 80158b6:	693b      	ldr	r3, [r7, #16]
 80158b8:	2b00      	cmp	r3, #0
 80158ba:	d009      	beq.n	80158d0 <osDelayUntil+0x4a>
 80158bc:	693b      	ldr	r3, [r7, #16]
 80158be:	2b00      	cmp	r3, #0
 80158c0:	db06      	blt.n	80158d0 <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 80158c2:	f107 0308 	add.w	r3, r7, #8
 80158c6:	6939      	ldr	r1, [r7, #16]
 80158c8:	4618      	mov	r0, r3
 80158ca:	f001 f95b 	bl	8016b84 <vTaskDelayUntil>
 80158ce:	e002      	b.n	80158d6 <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 80158d0:	f06f 0303 	mvn.w	r3, #3
 80158d4:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80158d6:	697b      	ldr	r3, [r7, #20]
}
 80158d8:	4618      	mov	r0, r3
 80158da:	3718      	adds	r7, #24
 80158dc:	46bd      	mov	sp, r7
 80158de:	bd80      	pop	{r7, pc}

080158e0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80158e0:	b480      	push	{r7}
 80158e2:	b085      	sub	sp, #20
 80158e4:	af00      	add	r7, sp, #0
 80158e6:	60f8      	str	r0, [r7, #12]
 80158e8:	60b9      	str	r1, [r7, #8]
 80158ea:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80158ec:	68fb      	ldr	r3, [r7, #12]
 80158ee:	4a07      	ldr	r2, [pc, #28]	; (801590c <vApplicationGetIdleTaskMemory+0x2c>)
 80158f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80158f2:	68bb      	ldr	r3, [r7, #8]
 80158f4:	4a06      	ldr	r2, [pc, #24]	; (8015910 <vApplicationGetIdleTaskMemory+0x30>)
 80158f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80158f8:	687b      	ldr	r3, [r7, #4]
 80158fa:	2280      	movs	r2, #128	; 0x80
 80158fc:	601a      	str	r2, [r3, #0]
}
 80158fe:	bf00      	nop
 8015900:	3714      	adds	r7, #20
 8015902:	46bd      	mov	sp, r7
 8015904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015908:	4770      	bx	lr
 801590a:	bf00      	nop
 801590c:	200017b4 	.word	0x200017b4
 8015910:	20001880 	.word	0x20001880

08015914 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8015914:	b480      	push	{r7}
 8015916:	b085      	sub	sp, #20
 8015918:	af00      	add	r7, sp, #0
 801591a:	60f8      	str	r0, [r7, #12]
 801591c:	60b9      	str	r1, [r7, #8]
 801591e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8015920:	68fb      	ldr	r3, [r7, #12]
 8015922:	4a07      	ldr	r2, [pc, #28]	; (8015940 <vApplicationGetTimerTaskMemory+0x2c>)
 8015924:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8015926:	68bb      	ldr	r3, [r7, #8]
 8015928:	4a06      	ldr	r2, [pc, #24]	; (8015944 <vApplicationGetTimerTaskMemory+0x30>)
 801592a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 801592c:	687b      	ldr	r3, [r7, #4]
 801592e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8015932:	601a      	str	r2, [r3, #0]
}
 8015934:	bf00      	nop
 8015936:	3714      	adds	r7, #20
 8015938:	46bd      	mov	sp, r7
 801593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801593e:	4770      	bx	lr
 8015940:	20001a80 	.word	0x20001a80
 8015944:	20001b4c 	.word	0x20001b4c

08015948 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8015948:	b480      	push	{r7}
 801594a:	b083      	sub	sp, #12
 801594c:	af00      	add	r7, sp, #0
 801594e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8015950:	687b      	ldr	r3, [r7, #4]
 8015952:	f103 0208 	add.w	r2, r3, #8
 8015956:	687b      	ldr	r3, [r7, #4]
 8015958:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801595a:	687b      	ldr	r3, [r7, #4]
 801595c:	f04f 32ff 	mov.w	r2, #4294967295
 8015960:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8015962:	687b      	ldr	r3, [r7, #4]
 8015964:	f103 0208 	add.w	r2, r3, #8
 8015968:	687b      	ldr	r3, [r7, #4]
 801596a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801596c:	687b      	ldr	r3, [r7, #4]
 801596e:	f103 0208 	add.w	r2, r3, #8
 8015972:	687b      	ldr	r3, [r7, #4]
 8015974:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8015976:	687b      	ldr	r3, [r7, #4]
 8015978:	2200      	movs	r2, #0
 801597a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801597c:	bf00      	nop
 801597e:	370c      	adds	r7, #12
 8015980:	46bd      	mov	sp, r7
 8015982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015986:	4770      	bx	lr

08015988 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8015988:	b480      	push	{r7}
 801598a:	b083      	sub	sp, #12
 801598c:	af00      	add	r7, sp, #0
 801598e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8015990:	687b      	ldr	r3, [r7, #4]
 8015992:	2200      	movs	r2, #0
 8015994:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8015996:	bf00      	nop
 8015998:	370c      	adds	r7, #12
 801599a:	46bd      	mov	sp, r7
 801599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159a0:	4770      	bx	lr

080159a2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80159a2:	b480      	push	{r7}
 80159a4:	b085      	sub	sp, #20
 80159a6:	af00      	add	r7, sp, #0
 80159a8:	6078      	str	r0, [r7, #4]
 80159aa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80159ac:	687b      	ldr	r3, [r7, #4]
 80159ae:	685b      	ldr	r3, [r3, #4]
 80159b0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80159b2:	683b      	ldr	r3, [r7, #0]
 80159b4:	68fa      	ldr	r2, [r7, #12]
 80159b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80159b8:	68fb      	ldr	r3, [r7, #12]
 80159ba:	689a      	ldr	r2, [r3, #8]
 80159bc:	683b      	ldr	r3, [r7, #0]
 80159be:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80159c0:	68fb      	ldr	r3, [r7, #12]
 80159c2:	689b      	ldr	r3, [r3, #8]
 80159c4:	683a      	ldr	r2, [r7, #0]
 80159c6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80159c8:	68fb      	ldr	r3, [r7, #12]
 80159ca:	683a      	ldr	r2, [r7, #0]
 80159cc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80159ce:	683b      	ldr	r3, [r7, #0]
 80159d0:	687a      	ldr	r2, [r7, #4]
 80159d2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80159d4:	687b      	ldr	r3, [r7, #4]
 80159d6:	681b      	ldr	r3, [r3, #0]
 80159d8:	1c5a      	adds	r2, r3, #1
 80159da:	687b      	ldr	r3, [r7, #4]
 80159dc:	601a      	str	r2, [r3, #0]
}
 80159de:	bf00      	nop
 80159e0:	3714      	adds	r7, #20
 80159e2:	46bd      	mov	sp, r7
 80159e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159e8:	4770      	bx	lr

080159ea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80159ea:	b480      	push	{r7}
 80159ec:	b085      	sub	sp, #20
 80159ee:	af00      	add	r7, sp, #0
 80159f0:	6078      	str	r0, [r7, #4]
 80159f2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80159f4:	683b      	ldr	r3, [r7, #0]
 80159f6:	681b      	ldr	r3, [r3, #0]
 80159f8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80159fa:	68bb      	ldr	r3, [r7, #8]
 80159fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015a00:	d103      	bne.n	8015a0a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8015a02:	687b      	ldr	r3, [r7, #4]
 8015a04:	691b      	ldr	r3, [r3, #16]
 8015a06:	60fb      	str	r3, [r7, #12]
 8015a08:	e00c      	b.n	8015a24 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8015a0a:	687b      	ldr	r3, [r7, #4]
 8015a0c:	3308      	adds	r3, #8
 8015a0e:	60fb      	str	r3, [r7, #12]
 8015a10:	e002      	b.n	8015a18 <vListInsert+0x2e>
 8015a12:	68fb      	ldr	r3, [r7, #12]
 8015a14:	685b      	ldr	r3, [r3, #4]
 8015a16:	60fb      	str	r3, [r7, #12]
 8015a18:	68fb      	ldr	r3, [r7, #12]
 8015a1a:	685b      	ldr	r3, [r3, #4]
 8015a1c:	681b      	ldr	r3, [r3, #0]
 8015a1e:	68ba      	ldr	r2, [r7, #8]
 8015a20:	429a      	cmp	r2, r3
 8015a22:	d2f6      	bcs.n	8015a12 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8015a24:	68fb      	ldr	r3, [r7, #12]
 8015a26:	685a      	ldr	r2, [r3, #4]
 8015a28:	683b      	ldr	r3, [r7, #0]
 8015a2a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8015a2c:	683b      	ldr	r3, [r7, #0]
 8015a2e:	685b      	ldr	r3, [r3, #4]
 8015a30:	683a      	ldr	r2, [r7, #0]
 8015a32:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8015a34:	683b      	ldr	r3, [r7, #0]
 8015a36:	68fa      	ldr	r2, [r7, #12]
 8015a38:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8015a3a:	68fb      	ldr	r3, [r7, #12]
 8015a3c:	683a      	ldr	r2, [r7, #0]
 8015a3e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8015a40:	683b      	ldr	r3, [r7, #0]
 8015a42:	687a      	ldr	r2, [r7, #4]
 8015a44:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8015a46:	687b      	ldr	r3, [r7, #4]
 8015a48:	681b      	ldr	r3, [r3, #0]
 8015a4a:	1c5a      	adds	r2, r3, #1
 8015a4c:	687b      	ldr	r3, [r7, #4]
 8015a4e:	601a      	str	r2, [r3, #0]
}
 8015a50:	bf00      	nop
 8015a52:	3714      	adds	r7, #20
 8015a54:	46bd      	mov	sp, r7
 8015a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a5a:	4770      	bx	lr

08015a5c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8015a5c:	b480      	push	{r7}
 8015a5e:	b085      	sub	sp, #20
 8015a60:	af00      	add	r7, sp, #0
 8015a62:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8015a64:	687b      	ldr	r3, [r7, #4]
 8015a66:	691b      	ldr	r3, [r3, #16]
 8015a68:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8015a6a:	687b      	ldr	r3, [r7, #4]
 8015a6c:	685b      	ldr	r3, [r3, #4]
 8015a6e:	687a      	ldr	r2, [r7, #4]
 8015a70:	6892      	ldr	r2, [r2, #8]
 8015a72:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8015a74:	687b      	ldr	r3, [r7, #4]
 8015a76:	689b      	ldr	r3, [r3, #8]
 8015a78:	687a      	ldr	r2, [r7, #4]
 8015a7a:	6852      	ldr	r2, [r2, #4]
 8015a7c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8015a7e:	68fb      	ldr	r3, [r7, #12]
 8015a80:	685b      	ldr	r3, [r3, #4]
 8015a82:	687a      	ldr	r2, [r7, #4]
 8015a84:	429a      	cmp	r2, r3
 8015a86:	d103      	bne.n	8015a90 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8015a88:	687b      	ldr	r3, [r7, #4]
 8015a8a:	689a      	ldr	r2, [r3, #8]
 8015a8c:	68fb      	ldr	r3, [r7, #12]
 8015a8e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8015a90:	687b      	ldr	r3, [r7, #4]
 8015a92:	2200      	movs	r2, #0
 8015a94:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8015a96:	68fb      	ldr	r3, [r7, #12]
 8015a98:	681b      	ldr	r3, [r3, #0]
 8015a9a:	1e5a      	subs	r2, r3, #1
 8015a9c:	68fb      	ldr	r3, [r7, #12]
 8015a9e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8015aa0:	68fb      	ldr	r3, [r7, #12]
 8015aa2:	681b      	ldr	r3, [r3, #0]
}
 8015aa4:	4618      	mov	r0, r3
 8015aa6:	3714      	adds	r7, #20
 8015aa8:	46bd      	mov	sp, r7
 8015aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015aae:	4770      	bx	lr

08015ab0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8015ab0:	b580      	push	{r7, lr}
 8015ab2:	b084      	sub	sp, #16
 8015ab4:	af00      	add	r7, sp, #0
 8015ab6:	6078      	str	r0, [r7, #4]
 8015ab8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8015aba:	687b      	ldr	r3, [r7, #4]
 8015abc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8015abe:	68fb      	ldr	r3, [r7, #12]
 8015ac0:	2b00      	cmp	r3, #0
 8015ac2:	d10a      	bne.n	8015ada <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8015ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ac8:	f383 8811 	msr	BASEPRI, r3
 8015acc:	f3bf 8f6f 	isb	sy
 8015ad0:	f3bf 8f4f 	dsb	sy
 8015ad4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8015ad6:	bf00      	nop
 8015ad8:	e7fe      	b.n	8015ad8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8015ada:	f002 fb13 	bl	8018104 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015ade:	68fb      	ldr	r3, [r7, #12]
 8015ae0:	681a      	ldr	r2, [r3, #0]
 8015ae2:	68fb      	ldr	r3, [r7, #12]
 8015ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015ae6:	68f9      	ldr	r1, [r7, #12]
 8015ae8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8015aea:	fb01 f303 	mul.w	r3, r1, r3
 8015aee:	441a      	add	r2, r3
 8015af0:	68fb      	ldr	r3, [r7, #12]
 8015af2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8015af4:	68fb      	ldr	r3, [r7, #12]
 8015af6:	2200      	movs	r2, #0
 8015af8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8015afa:	68fb      	ldr	r3, [r7, #12]
 8015afc:	681a      	ldr	r2, [r3, #0]
 8015afe:	68fb      	ldr	r3, [r7, #12]
 8015b00:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015b02:	68fb      	ldr	r3, [r7, #12]
 8015b04:	681a      	ldr	r2, [r3, #0]
 8015b06:	68fb      	ldr	r3, [r7, #12]
 8015b08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015b0a:	3b01      	subs	r3, #1
 8015b0c:	68f9      	ldr	r1, [r7, #12]
 8015b0e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8015b10:	fb01 f303 	mul.w	r3, r1, r3
 8015b14:	441a      	add	r2, r3
 8015b16:	68fb      	ldr	r3, [r7, #12]
 8015b18:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8015b1a:	68fb      	ldr	r3, [r7, #12]
 8015b1c:	22ff      	movs	r2, #255	; 0xff
 8015b1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8015b22:	68fb      	ldr	r3, [r7, #12]
 8015b24:	22ff      	movs	r2, #255	; 0xff
 8015b26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8015b2a:	683b      	ldr	r3, [r7, #0]
 8015b2c:	2b00      	cmp	r3, #0
 8015b2e:	d114      	bne.n	8015b5a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015b30:	68fb      	ldr	r3, [r7, #12]
 8015b32:	691b      	ldr	r3, [r3, #16]
 8015b34:	2b00      	cmp	r3, #0
 8015b36:	d01a      	beq.n	8015b6e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015b38:	68fb      	ldr	r3, [r7, #12]
 8015b3a:	3310      	adds	r3, #16
 8015b3c:	4618      	mov	r0, r3
 8015b3e:	f001 fb7d 	bl	801723c <xTaskRemoveFromEventList>
 8015b42:	4603      	mov	r3, r0
 8015b44:	2b00      	cmp	r3, #0
 8015b46:	d012      	beq.n	8015b6e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8015b48:	4b0c      	ldr	r3, [pc, #48]	; (8015b7c <xQueueGenericReset+0xcc>)
 8015b4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015b4e:	601a      	str	r2, [r3, #0]
 8015b50:	f3bf 8f4f 	dsb	sy
 8015b54:	f3bf 8f6f 	isb	sy
 8015b58:	e009      	b.n	8015b6e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8015b5a:	68fb      	ldr	r3, [r7, #12]
 8015b5c:	3310      	adds	r3, #16
 8015b5e:	4618      	mov	r0, r3
 8015b60:	f7ff fef2 	bl	8015948 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8015b64:	68fb      	ldr	r3, [r7, #12]
 8015b66:	3324      	adds	r3, #36	; 0x24
 8015b68:	4618      	mov	r0, r3
 8015b6a:	f7ff feed 	bl	8015948 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8015b6e:	f002 faf9 	bl	8018164 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8015b72:	2301      	movs	r3, #1
}
 8015b74:	4618      	mov	r0, r3
 8015b76:	3710      	adds	r7, #16
 8015b78:	46bd      	mov	sp, r7
 8015b7a:	bd80      	pop	{r7, pc}
 8015b7c:	e000ed04 	.word	0xe000ed04

08015b80 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8015b80:	b580      	push	{r7, lr}
 8015b82:	b08e      	sub	sp, #56	; 0x38
 8015b84:	af02      	add	r7, sp, #8
 8015b86:	60f8      	str	r0, [r7, #12]
 8015b88:	60b9      	str	r1, [r7, #8]
 8015b8a:	607a      	str	r2, [r7, #4]
 8015b8c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8015b8e:	68fb      	ldr	r3, [r7, #12]
 8015b90:	2b00      	cmp	r3, #0
 8015b92:	d10a      	bne.n	8015baa <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8015b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b98:	f383 8811 	msr	BASEPRI, r3
 8015b9c:	f3bf 8f6f 	isb	sy
 8015ba0:	f3bf 8f4f 	dsb	sy
 8015ba4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8015ba6:	bf00      	nop
 8015ba8:	e7fe      	b.n	8015ba8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8015baa:	683b      	ldr	r3, [r7, #0]
 8015bac:	2b00      	cmp	r3, #0
 8015bae:	d10a      	bne.n	8015bc6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8015bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015bb4:	f383 8811 	msr	BASEPRI, r3
 8015bb8:	f3bf 8f6f 	isb	sy
 8015bbc:	f3bf 8f4f 	dsb	sy
 8015bc0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8015bc2:	bf00      	nop
 8015bc4:	e7fe      	b.n	8015bc4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8015bc6:	687b      	ldr	r3, [r7, #4]
 8015bc8:	2b00      	cmp	r3, #0
 8015bca:	d002      	beq.n	8015bd2 <xQueueGenericCreateStatic+0x52>
 8015bcc:	68bb      	ldr	r3, [r7, #8]
 8015bce:	2b00      	cmp	r3, #0
 8015bd0:	d001      	beq.n	8015bd6 <xQueueGenericCreateStatic+0x56>
 8015bd2:	2301      	movs	r3, #1
 8015bd4:	e000      	b.n	8015bd8 <xQueueGenericCreateStatic+0x58>
 8015bd6:	2300      	movs	r3, #0
 8015bd8:	2b00      	cmp	r3, #0
 8015bda:	d10a      	bne.n	8015bf2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8015bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015be0:	f383 8811 	msr	BASEPRI, r3
 8015be4:	f3bf 8f6f 	isb	sy
 8015be8:	f3bf 8f4f 	dsb	sy
 8015bec:	623b      	str	r3, [r7, #32]
}
 8015bee:	bf00      	nop
 8015bf0:	e7fe      	b.n	8015bf0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8015bf2:	687b      	ldr	r3, [r7, #4]
 8015bf4:	2b00      	cmp	r3, #0
 8015bf6:	d102      	bne.n	8015bfe <xQueueGenericCreateStatic+0x7e>
 8015bf8:	68bb      	ldr	r3, [r7, #8]
 8015bfa:	2b00      	cmp	r3, #0
 8015bfc:	d101      	bne.n	8015c02 <xQueueGenericCreateStatic+0x82>
 8015bfe:	2301      	movs	r3, #1
 8015c00:	e000      	b.n	8015c04 <xQueueGenericCreateStatic+0x84>
 8015c02:	2300      	movs	r3, #0
 8015c04:	2b00      	cmp	r3, #0
 8015c06:	d10a      	bne.n	8015c1e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8015c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c0c:	f383 8811 	msr	BASEPRI, r3
 8015c10:	f3bf 8f6f 	isb	sy
 8015c14:	f3bf 8f4f 	dsb	sy
 8015c18:	61fb      	str	r3, [r7, #28]
}
 8015c1a:	bf00      	nop
 8015c1c:	e7fe      	b.n	8015c1c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8015c1e:	2350      	movs	r3, #80	; 0x50
 8015c20:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8015c22:	697b      	ldr	r3, [r7, #20]
 8015c24:	2b50      	cmp	r3, #80	; 0x50
 8015c26:	d00a      	beq.n	8015c3e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8015c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c2c:	f383 8811 	msr	BASEPRI, r3
 8015c30:	f3bf 8f6f 	isb	sy
 8015c34:	f3bf 8f4f 	dsb	sy
 8015c38:	61bb      	str	r3, [r7, #24]
}
 8015c3a:	bf00      	nop
 8015c3c:	e7fe      	b.n	8015c3c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8015c3e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8015c40:	683b      	ldr	r3, [r7, #0]
 8015c42:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8015c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c46:	2b00      	cmp	r3, #0
 8015c48:	d00d      	beq.n	8015c66 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8015c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c4c:	2201      	movs	r2, #1
 8015c4e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8015c52:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8015c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c58:	9300      	str	r3, [sp, #0]
 8015c5a:	4613      	mov	r3, r2
 8015c5c:	687a      	ldr	r2, [r7, #4]
 8015c5e:	68b9      	ldr	r1, [r7, #8]
 8015c60:	68f8      	ldr	r0, [r7, #12]
 8015c62:	f000 f83f 	bl	8015ce4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8015c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8015c68:	4618      	mov	r0, r3
 8015c6a:	3730      	adds	r7, #48	; 0x30
 8015c6c:	46bd      	mov	sp, r7
 8015c6e:	bd80      	pop	{r7, pc}

08015c70 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8015c70:	b580      	push	{r7, lr}
 8015c72:	b08a      	sub	sp, #40	; 0x28
 8015c74:	af02      	add	r7, sp, #8
 8015c76:	60f8      	str	r0, [r7, #12]
 8015c78:	60b9      	str	r1, [r7, #8]
 8015c7a:	4613      	mov	r3, r2
 8015c7c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8015c7e:	68fb      	ldr	r3, [r7, #12]
 8015c80:	2b00      	cmp	r3, #0
 8015c82:	d10a      	bne.n	8015c9a <xQueueGenericCreate+0x2a>
	__asm volatile
 8015c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c88:	f383 8811 	msr	BASEPRI, r3
 8015c8c:	f3bf 8f6f 	isb	sy
 8015c90:	f3bf 8f4f 	dsb	sy
 8015c94:	613b      	str	r3, [r7, #16]
}
 8015c96:	bf00      	nop
 8015c98:	e7fe      	b.n	8015c98 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015c9a:	68fb      	ldr	r3, [r7, #12]
 8015c9c:	68ba      	ldr	r2, [r7, #8]
 8015c9e:	fb02 f303 	mul.w	r3, r2, r3
 8015ca2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8015ca4:	69fb      	ldr	r3, [r7, #28]
 8015ca6:	3350      	adds	r3, #80	; 0x50
 8015ca8:	4618      	mov	r0, r3
 8015caa:	f002 fb4d 	bl	8018348 <pvPortMalloc>
 8015cae:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8015cb0:	69bb      	ldr	r3, [r7, #24]
 8015cb2:	2b00      	cmp	r3, #0
 8015cb4:	d011      	beq.n	8015cda <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8015cb6:	69bb      	ldr	r3, [r7, #24]
 8015cb8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015cba:	697b      	ldr	r3, [r7, #20]
 8015cbc:	3350      	adds	r3, #80	; 0x50
 8015cbe:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8015cc0:	69bb      	ldr	r3, [r7, #24]
 8015cc2:	2200      	movs	r2, #0
 8015cc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8015cc8:	79fa      	ldrb	r2, [r7, #7]
 8015cca:	69bb      	ldr	r3, [r7, #24]
 8015ccc:	9300      	str	r3, [sp, #0]
 8015cce:	4613      	mov	r3, r2
 8015cd0:	697a      	ldr	r2, [r7, #20]
 8015cd2:	68b9      	ldr	r1, [r7, #8]
 8015cd4:	68f8      	ldr	r0, [r7, #12]
 8015cd6:	f000 f805 	bl	8015ce4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8015cda:	69bb      	ldr	r3, [r7, #24]
	}
 8015cdc:	4618      	mov	r0, r3
 8015cde:	3720      	adds	r7, #32
 8015ce0:	46bd      	mov	sp, r7
 8015ce2:	bd80      	pop	{r7, pc}

08015ce4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8015ce4:	b580      	push	{r7, lr}
 8015ce6:	b084      	sub	sp, #16
 8015ce8:	af00      	add	r7, sp, #0
 8015cea:	60f8      	str	r0, [r7, #12]
 8015cec:	60b9      	str	r1, [r7, #8]
 8015cee:	607a      	str	r2, [r7, #4]
 8015cf0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8015cf2:	68bb      	ldr	r3, [r7, #8]
 8015cf4:	2b00      	cmp	r3, #0
 8015cf6:	d103      	bne.n	8015d00 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8015cf8:	69bb      	ldr	r3, [r7, #24]
 8015cfa:	69ba      	ldr	r2, [r7, #24]
 8015cfc:	601a      	str	r2, [r3, #0]
 8015cfe:	e002      	b.n	8015d06 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8015d00:	69bb      	ldr	r3, [r7, #24]
 8015d02:	687a      	ldr	r2, [r7, #4]
 8015d04:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8015d06:	69bb      	ldr	r3, [r7, #24]
 8015d08:	68fa      	ldr	r2, [r7, #12]
 8015d0a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8015d0c:	69bb      	ldr	r3, [r7, #24]
 8015d0e:	68ba      	ldr	r2, [r7, #8]
 8015d10:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8015d12:	2101      	movs	r1, #1
 8015d14:	69b8      	ldr	r0, [r7, #24]
 8015d16:	f7ff fecb 	bl	8015ab0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8015d1a:	69bb      	ldr	r3, [r7, #24]
 8015d1c:	78fa      	ldrb	r2, [r7, #3]
 8015d1e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 8015d22:	78fb      	ldrb	r3, [r7, #3]
 8015d24:	68ba      	ldr	r2, [r7, #8]
 8015d26:	68f9      	ldr	r1, [r7, #12]
 8015d28:	2073      	movs	r0, #115	; 0x73
 8015d2a:	f003 f9d5 	bl	80190d8 <SEGGER_SYSVIEW_RecordU32x3>
}
 8015d2e:	bf00      	nop
 8015d30:	3710      	adds	r7, #16
 8015d32:	46bd      	mov	sp, r7
 8015d34:	bd80      	pop	{r7, pc}
	...

08015d38 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8015d38:	b580      	push	{r7, lr}
 8015d3a:	b090      	sub	sp, #64	; 0x40
 8015d3c:	af02      	add	r7, sp, #8
 8015d3e:	60f8      	str	r0, [r7, #12]
 8015d40:	60b9      	str	r1, [r7, #8]
 8015d42:	607a      	str	r2, [r7, #4]
 8015d44:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8015d46:	2300      	movs	r3, #0
 8015d48:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8015d4a:	68fb      	ldr	r3, [r7, #12]
 8015d4c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8015d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d50:	2b00      	cmp	r3, #0
 8015d52:	d10a      	bne.n	8015d6a <xQueueGenericSend+0x32>
	__asm volatile
 8015d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d58:	f383 8811 	msr	BASEPRI, r3
 8015d5c:	f3bf 8f6f 	isb	sy
 8015d60:	f3bf 8f4f 	dsb	sy
 8015d64:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8015d66:	bf00      	nop
 8015d68:	e7fe      	b.n	8015d68 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015d6a:	68bb      	ldr	r3, [r7, #8]
 8015d6c:	2b00      	cmp	r3, #0
 8015d6e:	d103      	bne.n	8015d78 <xQueueGenericSend+0x40>
 8015d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015d74:	2b00      	cmp	r3, #0
 8015d76:	d101      	bne.n	8015d7c <xQueueGenericSend+0x44>
 8015d78:	2301      	movs	r3, #1
 8015d7a:	e000      	b.n	8015d7e <xQueueGenericSend+0x46>
 8015d7c:	2300      	movs	r3, #0
 8015d7e:	2b00      	cmp	r3, #0
 8015d80:	d10a      	bne.n	8015d98 <xQueueGenericSend+0x60>
	__asm volatile
 8015d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d86:	f383 8811 	msr	BASEPRI, r3
 8015d8a:	f3bf 8f6f 	isb	sy
 8015d8e:	f3bf 8f4f 	dsb	sy
 8015d92:	627b      	str	r3, [r7, #36]	; 0x24
}
 8015d94:	bf00      	nop
 8015d96:	e7fe      	b.n	8015d96 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8015d98:	683b      	ldr	r3, [r7, #0]
 8015d9a:	2b02      	cmp	r3, #2
 8015d9c:	d103      	bne.n	8015da6 <xQueueGenericSend+0x6e>
 8015d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015da0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015da2:	2b01      	cmp	r3, #1
 8015da4:	d101      	bne.n	8015daa <xQueueGenericSend+0x72>
 8015da6:	2301      	movs	r3, #1
 8015da8:	e000      	b.n	8015dac <xQueueGenericSend+0x74>
 8015daa:	2300      	movs	r3, #0
 8015dac:	2b00      	cmp	r3, #0
 8015dae:	d10a      	bne.n	8015dc6 <xQueueGenericSend+0x8e>
	__asm volatile
 8015db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015db4:	f383 8811 	msr	BASEPRI, r3
 8015db8:	f3bf 8f6f 	isb	sy
 8015dbc:	f3bf 8f4f 	dsb	sy
 8015dc0:	623b      	str	r3, [r7, #32]
}
 8015dc2:	bf00      	nop
 8015dc4:	e7fe      	b.n	8015dc4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015dc6:	f001 fc37 	bl	8017638 <xTaskGetSchedulerState>
 8015dca:	4603      	mov	r3, r0
 8015dcc:	2b00      	cmp	r3, #0
 8015dce:	d102      	bne.n	8015dd6 <xQueueGenericSend+0x9e>
 8015dd0:	687b      	ldr	r3, [r7, #4]
 8015dd2:	2b00      	cmp	r3, #0
 8015dd4:	d101      	bne.n	8015dda <xQueueGenericSend+0xa2>
 8015dd6:	2301      	movs	r3, #1
 8015dd8:	e000      	b.n	8015ddc <xQueueGenericSend+0xa4>
 8015dda:	2300      	movs	r3, #0
 8015ddc:	2b00      	cmp	r3, #0
 8015dde:	d10a      	bne.n	8015df6 <xQueueGenericSend+0xbe>
	__asm volatile
 8015de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015de4:	f383 8811 	msr	BASEPRI, r3
 8015de8:	f3bf 8f6f 	isb	sy
 8015dec:	f3bf 8f4f 	dsb	sy
 8015df0:	61fb      	str	r3, [r7, #28]
}
 8015df2:	bf00      	nop
 8015df4:	e7fe      	b.n	8015df4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8015df6:	f002 f985 	bl	8018104 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8015dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015dfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015e02:	429a      	cmp	r2, r3
 8015e04:	d302      	bcc.n	8015e0c <xQueueGenericSend+0xd4>
 8015e06:	683b      	ldr	r3, [r7, #0]
 8015e08:	2b02      	cmp	r3, #2
 8015e0a:	d136      	bne.n	8015e7a <xQueueGenericSend+0x142>
			{
				traceQUEUE_SEND( pxQueue );
 8015e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e0e:	4618      	mov	r0, r3
 8015e10:	f003 fe14 	bl	8019a3c <SEGGER_SYSVIEW_ShrinkId>
 8015e14:	68ba      	ldr	r2, [r7, #8]
 8015e16:	6879      	ldr	r1, [r7, #4]
 8015e18:	683b      	ldr	r3, [r7, #0]
 8015e1a:	9300      	str	r3, [sp, #0]
 8015e1c:	460b      	mov	r3, r1
 8015e1e:	4601      	mov	r1, r0
 8015e20:	205a      	movs	r0, #90	; 0x5a
 8015e22:	f003 f9cf 	bl	80191c4 <SEGGER_SYSVIEW_RecordU32x4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8015e26:	683a      	ldr	r2, [r7, #0]
 8015e28:	68b9      	ldr	r1, [r7, #8]
 8015e2a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015e2c:	f000 fb5e 	bl	80164ec <prvCopyDataToQueue>
 8015e30:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e36:	2b00      	cmp	r3, #0
 8015e38:	d010      	beq.n	8015e5c <xQueueGenericSend+0x124>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e3c:	3324      	adds	r3, #36	; 0x24
 8015e3e:	4618      	mov	r0, r3
 8015e40:	f001 f9fc 	bl	801723c <xTaskRemoveFromEventList>
 8015e44:	4603      	mov	r3, r0
 8015e46:	2b00      	cmp	r3, #0
 8015e48:	d013      	beq.n	8015e72 <xQueueGenericSend+0x13a>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8015e4a:	4b4d      	ldr	r3, [pc, #308]	; (8015f80 <xQueueGenericSend+0x248>)
 8015e4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015e50:	601a      	str	r2, [r3, #0]
 8015e52:	f3bf 8f4f 	dsb	sy
 8015e56:	f3bf 8f6f 	isb	sy
 8015e5a:	e00a      	b.n	8015e72 <xQueueGenericSend+0x13a>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8015e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e5e:	2b00      	cmp	r3, #0
 8015e60:	d007      	beq.n	8015e72 <xQueueGenericSend+0x13a>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8015e62:	4b47      	ldr	r3, [pc, #284]	; (8015f80 <xQueueGenericSend+0x248>)
 8015e64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015e68:	601a      	str	r2, [r3, #0]
 8015e6a:	f3bf 8f4f 	dsb	sy
 8015e6e:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8015e72:	f002 f977 	bl	8018164 <vPortExitCritical>
				return pdPASS;
 8015e76:	2301      	movs	r3, #1
 8015e78:	e07d      	b.n	8015f76 <xQueueGenericSend+0x23e>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8015e7a:	687b      	ldr	r3, [r7, #4]
 8015e7c:	2b00      	cmp	r3, #0
 8015e7e:	d110      	bne.n	8015ea2 <xQueueGenericSend+0x16a>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8015e80:	f002 f970 	bl	8018164 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 8015e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e86:	4618      	mov	r0, r3
 8015e88:	f003 fdd8 	bl	8019a3c <SEGGER_SYSVIEW_ShrinkId>
 8015e8c:	68ba      	ldr	r2, [r7, #8]
 8015e8e:	6879      	ldr	r1, [r7, #4]
 8015e90:	683b      	ldr	r3, [r7, #0]
 8015e92:	9300      	str	r3, [sp, #0]
 8015e94:	460b      	mov	r3, r1
 8015e96:	4601      	mov	r1, r0
 8015e98:	205a      	movs	r0, #90	; 0x5a
 8015e9a:	f003 f993 	bl	80191c4 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_FULL;
 8015e9e:	2300      	movs	r3, #0
 8015ea0:	e069      	b.n	8015f76 <xQueueGenericSend+0x23e>
				}
				else if( xEntryTimeSet == pdFALSE )
 8015ea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015ea4:	2b00      	cmp	r3, #0
 8015ea6:	d106      	bne.n	8015eb6 <xQueueGenericSend+0x17e>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8015ea8:	f107 0314 	add.w	r3, r7, #20
 8015eac:	4618      	mov	r0, r3
 8015eae:	f001 fa2d 	bl	801730c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015eb2:	2301      	movs	r3, #1
 8015eb4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8015eb6:	f002 f955 	bl	8018164 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8015eba:	f000 ff65 	bl	8016d88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8015ebe:	f002 f921 	bl	8018104 <vPortEnterCritical>
 8015ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ec4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015ec8:	b25b      	sxtb	r3, r3
 8015eca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015ece:	d103      	bne.n	8015ed8 <xQueueGenericSend+0x1a0>
 8015ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ed2:	2200      	movs	r2, #0
 8015ed4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015eda:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015ede:	b25b      	sxtb	r3, r3
 8015ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015ee4:	d103      	bne.n	8015eee <xQueueGenericSend+0x1b6>
 8015ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ee8:	2200      	movs	r2, #0
 8015eea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8015eee:	f002 f939 	bl	8018164 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015ef2:	1d3a      	adds	r2, r7, #4
 8015ef4:	f107 0314 	add.w	r3, r7, #20
 8015ef8:	4611      	mov	r1, r2
 8015efa:	4618      	mov	r0, r3
 8015efc:	f001 fa1c 	bl	8017338 <xTaskCheckForTimeOut>
 8015f00:	4603      	mov	r3, r0
 8015f02:	2b00      	cmp	r3, #0
 8015f04:	d124      	bne.n	8015f50 <xQueueGenericSend+0x218>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8015f06:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015f08:	f000 fbe8 	bl	80166dc <prvIsQueueFull>
 8015f0c:	4603      	mov	r3, r0
 8015f0e:	2b00      	cmp	r3, #0
 8015f10:	d018      	beq.n	8015f44 <xQueueGenericSend+0x20c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8015f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f14:	3310      	adds	r3, #16
 8015f16:	687a      	ldr	r2, [r7, #4]
 8015f18:	4611      	mov	r1, r2
 8015f1a:	4618      	mov	r0, r3
 8015f1c:	f001 f93c 	bl	8017198 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8015f20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015f22:	f000 fb73 	bl	801660c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8015f26:	f000 ff3d 	bl	8016da4 <xTaskResumeAll>
 8015f2a:	4603      	mov	r3, r0
 8015f2c:	2b00      	cmp	r3, #0
 8015f2e:	f47f af62 	bne.w	8015df6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8015f32:	4b13      	ldr	r3, [pc, #76]	; (8015f80 <xQueueGenericSend+0x248>)
 8015f34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015f38:	601a      	str	r2, [r3, #0]
 8015f3a:	f3bf 8f4f 	dsb	sy
 8015f3e:	f3bf 8f6f 	isb	sy
 8015f42:	e758      	b.n	8015df6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8015f44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015f46:	f000 fb61 	bl	801660c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015f4a:	f000 ff2b 	bl	8016da4 <xTaskResumeAll>
 8015f4e:	e752      	b.n	8015df6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8015f50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015f52:	f000 fb5b 	bl	801660c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015f56:	f000 ff25 	bl	8016da4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 8015f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f5c:	4618      	mov	r0, r3
 8015f5e:	f003 fd6d 	bl	8019a3c <SEGGER_SYSVIEW_ShrinkId>
 8015f62:	68ba      	ldr	r2, [r7, #8]
 8015f64:	6879      	ldr	r1, [r7, #4]
 8015f66:	683b      	ldr	r3, [r7, #0]
 8015f68:	9300      	str	r3, [sp, #0]
 8015f6a:	460b      	mov	r3, r1
 8015f6c:	4601      	mov	r1, r0
 8015f6e:	205a      	movs	r0, #90	; 0x5a
 8015f70:	f003 f928 	bl	80191c4 <SEGGER_SYSVIEW_RecordU32x4>
			return errQUEUE_FULL;
 8015f74:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8015f76:	4618      	mov	r0, r3
 8015f78:	3738      	adds	r7, #56	; 0x38
 8015f7a:	46bd      	mov	sp, r7
 8015f7c:	bd80      	pop	{r7, pc}
 8015f7e:	bf00      	nop
 8015f80:	e000ed04 	.word	0xe000ed04

08015f84 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8015f84:	b580      	push	{r7, lr}
 8015f86:	b090      	sub	sp, #64	; 0x40
 8015f88:	af00      	add	r7, sp, #0
 8015f8a:	60f8      	str	r0, [r7, #12]
 8015f8c:	60b9      	str	r1, [r7, #8]
 8015f8e:	607a      	str	r2, [r7, #4]
 8015f90:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8015f92:	68fb      	ldr	r3, [r7, #12]
 8015f94:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8015f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015f98:	2b00      	cmp	r3, #0
 8015f9a:	d10a      	bne.n	8015fb2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8015f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015fa0:	f383 8811 	msr	BASEPRI, r3
 8015fa4:	f3bf 8f6f 	isb	sy
 8015fa8:	f3bf 8f4f 	dsb	sy
 8015fac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8015fae:	bf00      	nop
 8015fb0:	e7fe      	b.n	8015fb0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015fb2:	68bb      	ldr	r3, [r7, #8]
 8015fb4:	2b00      	cmp	r3, #0
 8015fb6:	d103      	bne.n	8015fc0 <xQueueGenericSendFromISR+0x3c>
 8015fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015fbc:	2b00      	cmp	r3, #0
 8015fbe:	d101      	bne.n	8015fc4 <xQueueGenericSendFromISR+0x40>
 8015fc0:	2301      	movs	r3, #1
 8015fc2:	e000      	b.n	8015fc6 <xQueueGenericSendFromISR+0x42>
 8015fc4:	2300      	movs	r3, #0
 8015fc6:	2b00      	cmp	r3, #0
 8015fc8:	d10a      	bne.n	8015fe0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8015fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015fce:	f383 8811 	msr	BASEPRI, r3
 8015fd2:	f3bf 8f6f 	isb	sy
 8015fd6:	f3bf 8f4f 	dsb	sy
 8015fda:	627b      	str	r3, [r7, #36]	; 0x24
}
 8015fdc:	bf00      	nop
 8015fde:	e7fe      	b.n	8015fde <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8015fe0:	683b      	ldr	r3, [r7, #0]
 8015fe2:	2b02      	cmp	r3, #2
 8015fe4:	d103      	bne.n	8015fee <xQueueGenericSendFromISR+0x6a>
 8015fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015fe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015fea:	2b01      	cmp	r3, #1
 8015fec:	d101      	bne.n	8015ff2 <xQueueGenericSendFromISR+0x6e>
 8015fee:	2301      	movs	r3, #1
 8015ff0:	e000      	b.n	8015ff4 <xQueueGenericSendFromISR+0x70>
 8015ff2:	2300      	movs	r3, #0
 8015ff4:	2b00      	cmp	r3, #0
 8015ff6:	d10a      	bne.n	801600e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8015ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ffc:	f383 8811 	msr	BASEPRI, r3
 8016000:	f3bf 8f6f 	isb	sy
 8016004:	f3bf 8f4f 	dsb	sy
 8016008:	623b      	str	r3, [r7, #32]
}
 801600a:	bf00      	nop
 801600c:	e7fe      	b.n	801600c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801600e:	f002 f95b 	bl	80182c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8016012:	f3ef 8211 	mrs	r2, BASEPRI
 8016016:	f04f 0350 	mov.w	r3, #80	; 0x50
 801601a:	f383 8811 	msr	BASEPRI, r3
 801601e:	f3bf 8f6f 	isb	sy
 8016022:	f3bf 8f4f 	dsb	sy
 8016026:	61fa      	str	r2, [r7, #28]
 8016028:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801602a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801602c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801602e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016030:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8016032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016036:	429a      	cmp	r2, r3
 8016038:	d302      	bcc.n	8016040 <xQueueGenericSendFromISR+0xbc>
 801603a:	683b      	ldr	r3, [r7, #0]
 801603c:	2b02      	cmp	r3, #2
 801603e:	d139      	bne.n	80160b4 <xQueueGenericSendFromISR+0x130>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8016040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016042:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016046:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 801604a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801604c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801604e:	62fb      	str	r3, [r7, #44]	; 0x2c

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 8016050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016052:	4618      	mov	r0, r3
 8016054:	f003 fcf2 	bl	8019a3c <SEGGER_SYSVIEW_ShrinkId>
 8016058:	4601      	mov	r1, r0
 801605a:	687b      	ldr	r3, [r7, #4]
 801605c:	461a      	mov	r2, r3
 801605e:	2060      	movs	r0, #96	; 0x60
 8016060:	f002 ffe0 	bl	8019024 <SEGGER_SYSVIEW_RecordU32x2>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8016064:	683a      	ldr	r2, [r7, #0]
 8016066:	68b9      	ldr	r1, [r7, #8]
 8016068:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801606a:	f000 fa3f 	bl	80164ec <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801606e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8016072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016076:	d112      	bne.n	801609e <xQueueGenericSendFromISR+0x11a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801607a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801607c:	2b00      	cmp	r3, #0
 801607e:	d016      	beq.n	80160ae <xQueueGenericSendFromISR+0x12a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016082:	3324      	adds	r3, #36	; 0x24
 8016084:	4618      	mov	r0, r3
 8016086:	f001 f8d9 	bl	801723c <xTaskRemoveFromEventList>
 801608a:	4603      	mov	r3, r0
 801608c:	2b00      	cmp	r3, #0
 801608e:	d00e      	beq.n	80160ae <xQueueGenericSendFromISR+0x12a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8016090:	687b      	ldr	r3, [r7, #4]
 8016092:	2b00      	cmp	r3, #0
 8016094:	d00b      	beq.n	80160ae <xQueueGenericSendFromISR+0x12a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8016096:	687b      	ldr	r3, [r7, #4]
 8016098:	2201      	movs	r2, #1
 801609a:	601a      	str	r2, [r3, #0]
 801609c:	e007      	b.n	80160ae <xQueueGenericSendFromISR+0x12a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801609e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80160a2:	3301      	adds	r3, #1
 80160a4:	b2db      	uxtb	r3, r3
 80160a6:	b25a      	sxtb	r2, r3
 80160a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80160aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80160ae:	2301      	movs	r3, #1
 80160b0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80160b2:	e00b      	b.n	80160cc <xQueueGenericSendFromISR+0x148>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 80160b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80160b6:	4618      	mov	r0, r3
 80160b8:	f003 fcc0 	bl	8019a3c <SEGGER_SYSVIEW_ShrinkId>
 80160bc:	4601      	mov	r1, r0
 80160be:	687b      	ldr	r3, [r7, #4]
 80160c0:	461a      	mov	r2, r3
 80160c2:	2060      	movs	r0, #96	; 0x60
 80160c4:	f002 ffae 	bl	8019024 <SEGGER_SYSVIEW_RecordU32x2>
			xReturn = errQUEUE_FULL;
 80160c8:	2300      	movs	r3, #0
 80160ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80160cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80160ce:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80160d0:	697b      	ldr	r3, [r7, #20]
 80160d2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80160d6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80160d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80160da:	4618      	mov	r0, r3
 80160dc:	3740      	adds	r7, #64	; 0x40
 80160de:	46bd      	mov	sp, r7
 80160e0:	bd80      	pop	{r7, pc}
	...

080160e4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80160e4:	b590      	push	{r4, r7, lr}
 80160e6:	b08f      	sub	sp, #60	; 0x3c
 80160e8:	af02      	add	r7, sp, #8
 80160ea:	60f8      	str	r0, [r7, #12]
 80160ec:	60b9      	str	r1, [r7, #8]
 80160ee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80160f0:	2300      	movs	r3, #0
 80160f2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80160f4:	68fb      	ldr	r3, [r7, #12]
 80160f6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80160f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80160fa:	2b00      	cmp	r3, #0
 80160fc:	d10a      	bne.n	8016114 <xQueueReceive+0x30>
	__asm volatile
 80160fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016102:	f383 8811 	msr	BASEPRI, r3
 8016106:	f3bf 8f6f 	isb	sy
 801610a:	f3bf 8f4f 	dsb	sy
 801610e:	623b      	str	r3, [r7, #32]
}
 8016110:	bf00      	nop
 8016112:	e7fe      	b.n	8016112 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016114:	68bb      	ldr	r3, [r7, #8]
 8016116:	2b00      	cmp	r3, #0
 8016118:	d103      	bne.n	8016122 <xQueueReceive+0x3e>
 801611a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801611c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801611e:	2b00      	cmp	r3, #0
 8016120:	d101      	bne.n	8016126 <xQueueReceive+0x42>
 8016122:	2301      	movs	r3, #1
 8016124:	e000      	b.n	8016128 <xQueueReceive+0x44>
 8016126:	2300      	movs	r3, #0
 8016128:	2b00      	cmp	r3, #0
 801612a:	d10a      	bne.n	8016142 <xQueueReceive+0x5e>
	__asm volatile
 801612c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016130:	f383 8811 	msr	BASEPRI, r3
 8016134:	f3bf 8f6f 	isb	sy
 8016138:	f3bf 8f4f 	dsb	sy
 801613c:	61fb      	str	r3, [r7, #28]
}
 801613e:	bf00      	nop
 8016140:	e7fe      	b.n	8016140 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8016142:	f001 fa79 	bl	8017638 <xTaskGetSchedulerState>
 8016146:	4603      	mov	r3, r0
 8016148:	2b00      	cmp	r3, #0
 801614a:	d102      	bne.n	8016152 <xQueueReceive+0x6e>
 801614c:	687b      	ldr	r3, [r7, #4]
 801614e:	2b00      	cmp	r3, #0
 8016150:	d101      	bne.n	8016156 <xQueueReceive+0x72>
 8016152:	2301      	movs	r3, #1
 8016154:	e000      	b.n	8016158 <xQueueReceive+0x74>
 8016156:	2300      	movs	r3, #0
 8016158:	2b00      	cmp	r3, #0
 801615a:	d10a      	bne.n	8016172 <xQueueReceive+0x8e>
	__asm volatile
 801615c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016160:	f383 8811 	msr	BASEPRI, r3
 8016164:	f3bf 8f6f 	isb	sy
 8016168:	f3bf 8f4f 	dsb	sy
 801616c:	61bb      	str	r3, [r7, #24]
}
 801616e:	bf00      	nop
 8016170:	e7fe      	b.n	8016170 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8016172:	f001 ffc7 	bl	8018104 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801617a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801617c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801617e:	2b00      	cmp	r3, #0
 8016180:	d02f      	beq.n	80161e2 <xQueueReceive+0xfe>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8016182:	68b9      	ldr	r1, [r7, #8]
 8016184:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016186:	f000 fa1b 	bl	80165c0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
 801618a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801618c:	4618      	mov	r0, r3
 801618e:	f003 fc55 	bl	8019a3c <SEGGER_SYSVIEW_ShrinkId>
 8016192:	4604      	mov	r4, r0
 8016194:	2000      	movs	r0, #0
 8016196:	f003 fc51 	bl	8019a3c <SEGGER_SYSVIEW_ShrinkId>
 801619a:	4602      	mov	r2, r0
 801619c:	687b      	ldr	r3, [r7, #4]
 801619e:	2101      	movs	r1, #1
 80161a0:	9100      	str	r1, [sp, #0]
 80161a2:	4621      	mov	r1, r4
 80161a4:	205c      	movs	r0, #92	; 0x5c
 80161a6:	f003 f80d 	bl	80191c4 <SEGGER_SYSVIEW_RecordU32x4>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80161aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161ac:	1e5a      	subs	r2, r3, #1
 80161ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161b0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80161b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161b4:	691b      	ldr	r3, [r3, #16]
 80161b6:	2b00      	cmp	r3, #0
 80161b8:	d00f      	beq.n	80161da <xQueueReceive+0xf6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80161ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161bc:	3310      	adds	r3, #16
 80161be:	4618      	mov	r0, r3
 80161c0:	f001 f83c 	bl	801723c <xTaskRemoveFromEventList>
 80161c4:	4603      	mov	r3, r0
 80161c6:	2b00      	cmp	r3, #0
 80161c8:	d007      	beq.n	80161da <xQueueReceive+0xf6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80161ca:	4b4d      	ldr	r3, [pc, #308]	; (8016300 <xQueueReceive+0x21c>)
 80161cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80161d0:	601a      	str	r2, [r3, #0]
 80161d2:	f3bf 8f4f 	dsb	sy
 80161d6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80161da:	f001 ffc3 	bl	8018164 <vPortExitCritical>
				return pdPASS;
 80161de:	2301      	movs	r3, #1
 80161e0:	e08a      	b.n	80162f8 <xQueueReceive+0x214>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80161e2:	687b      	ldr	r3, [r7, #4]
 80161e4:	2b00      	cmp	r3, #0
 80161e6:	d113      	bne.n	8016210 <xQueueReceive+0x12c>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80161e8:	f001 ffbc 	bl	8018164 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 80161ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161ee:	4618      	mov	r0, r3
 80161f0:	f003 fc24 	bl	8019a3c <SEGGER_SYSVIEW_ShrinkId>
 80161f4:	4604      	mov	r4, r0
 80161f6:	2000      	movs	r0, #0
 80161f8:	f003 fc20 	bl	8019a3c <SEGGER_SYSVIEW_ShrinkId>
 80161fc:	4602      	mov	r2, r0
 80161fe:	687b      	ldr	r3, [r7, #4]
 8016200:	2101      	movs	r1, #1
 8016202:	9100      	str	r1, [sp, #0]
 8016204:	4621      	mov	r1, r4
 8016206:	205c      	movs	r0, #92	; 0x5c
 8016208:	f002 ffdc 	bl	80191c4 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 801620c:	2300      	movs	r3, #0
 801620e:	e073      	b.n	80162f8 <xQueueReceive+0x214>
				}
				else if( xEntryTimeSet == pdFALSE )
 8016210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016212:	2b00      	cmp	r3, #0
 8016214:	d106      	bne.n	8016224 <xQueueReceive+0x140>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8016216:	f107 0310 	add.w	r3, r7, #16
 801621a:	4618      	mov	r0, r3
 801621c:	f001 f876 	bl	801730c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8016220:	2301      	movs	r3, #1
 8016222:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8016224:	f001 ff9e 	bl	8018164 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8016228:	f000 fdae 	bl	8016d88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801622c:	f001 ff6a 	bl	8018104 <vPortEnterCritical>
 8016230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016232:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016236:	b25b      	sxtb	r3, r3
 8016238:	f1b3 3fff 	cmp.w	r3, #4294967295
 801623c:	d103      	bne.n	8016246 <xQueueReceive+0x162>
 801623e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016240:	2200      	movs	r2, #0
 8016242:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8016246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016248:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801624c:	b25b      	sxtb	r3, r3
 801624e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016252:	d103      	bne.n	801625c <xQueueReceive+0x178>
 8016254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016256:	2200      	movs	r2, #0
 8016258:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801625c:	f001 ff82 	bl	8018164 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8016260:	1d3a      	adds	r2, r7, #4
 8016262:	f107 0310 	add.w	r3, r7, #16
 8016266:	4611      	mov	r1, r2
 8016268:	4618      	mov	r0, r3
 801626a:	f001 f865 	bl	8017338 <xTaskCheckForTimeOut>
 801626e:	4603      	mov	r3, r0
 8016270:	2b00      	cmp	r3, #0
 8016272:	d124      	bne.n	80162be <xQueueReceive+0x1da>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8016274:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016276:	f000 fa1b 	bl	80166b0 <prvIsQueueEmpty>
 801627a:	4603      	mov	r3, r0
 801627c:	2b00      	cmp	r3, #0
 801627e:	d018      	beq.n	80162b2 <xQueueReceive+0x1ce>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8016280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016282:	3324      	adds	r3, #36	; 0x24
 8016284:	687a      	ldr	r2, [r7, #4]
 8016286:	4611      	mov	r1, r2
 8016288:	4618      	mov	r0, r3
 801628a:	f000 ff85 	bl	8017198 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801628e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016290:	f000 f9bc 	bl	801660c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8016294:	f000 fd86 	bl	8016da4 <xTaskResumeAll>
 8016298:	4603      	mov	r3, r0
 801629a:	2b00      	cmp	r3, #0
 801629c:	f47f af69 	bne.w	8016172 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80162a0:	4b17      	ldr	r3, [pc, #92]	; (8016300 <xQueueReceive+0x21c>)
 80162a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80162a6:	601a      	str	r2, [r3, #0]
 80162a8:	f3bf 8f4f 	dsb	sy
 80162ac:	f3bf 8f6f 	isb	sy
 80162b0:	e75f      	b.n	8016172 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80162b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80162b4:	f000 f9aa 	bl	801660c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80162b8:	f000 fd74 	bl	8016da4 <xTaskResumeAll>
 80162bc:	e759      	b.n	8016172 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80162be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80162c0:	f000 f9a4 	bl	801660c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80162c4:	f000 fd6e 	bl	8016da4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80162c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80162ca:	f000 f9f1 	bl	80166b0 <prvIsQueueEmpty>
 80162ce:	4603      	mov	r3, r0
 80162d0:	2b00      	cmp	r3, #0
 80162d2:	f43f af4e 	beq.w	8016172 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 80162d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80162d8:	4618      	mov	r0, r3
 80162da:	f003 fbaf 	bl	8019a3c <SEGGER_SYSVIEW_ShrinkId>
 80162de:	4604      	mov	r4, r0
 80162e0:	2000      	movs	r0, #0
 80162e2:	f003 fbab 	bl	8019a3c <SEGGER_SYSVIEW_ShrinkId>
 80162e6:	4602      	mov	r2, r0
 80162e8:	687b      	ldr	r3, [r7, #4]
 80162ea:	2101      	movs	r1, #1
 80162ec:	9100      	str	r1, [sp, #0]
 80162ee:	4621      	mov	r1, r4
 80162f0:	205c      	movs	r0, #92	; 0x5c
 80162f2:	f002 ff67 	bl	80191c4 <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 80162f6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80162f8:	4618      	mov	r0, r3
 80162fa:	3734      	adds	r7, #52	; 0x34
 80162fc:	46bd      	mov	sp, r7
 80162fe:	bd90      	pop	{r4, r7, pc}
 8016300:	e000ed04 	.word	0xe000ed04

08016304 <xQueuePeek>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8016304:	b590      	push	{r4, r7, lr}
 8016306:	b091      	sub	sp, #68	; 0x44
 8016308:	af02      	add	r7, sp, #8
 801630a:	60f8      	str	r0, [r7, #12]
 801630c:	60b9      	str	r1, [r7, #8]
 801630e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8016310:	2300      	movs	r3, #0
 8016312:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = xQueue;
 8016314:	68fb      	ldr	r3, [r7, #12]
 8016316:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8016318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801631a:	2b00      	cmp	r3, #0
 801631c:	d10a      	bne.n	8016334 <xQueuePeek+0x30>
	__asm volatile
 801631e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016322:	f383 8811 	msr	BASEPRI, r3
 8016326:	f3bf 8f6f 	isb	sy
 801632a:	f3bf 8f4f 	dsb	sy
 801632e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8016330:	bf00      	nop
 8016332:	e7fe      	b.n	8016332 <xQueuePeek+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016334:	68bb      	ldr	r3, [r7, #8]
 8016336:	2b00      	cmp	r3, #0
 8016338:	d103      	bne.n	8016342 <xQueuePeek+0x3e>
 801633a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801633c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801633e:	2b00      	cmp	r3, #0
 8016340:	d101      	bne.n	8016346 <xQueuePeek+0x42>
 8016342:	2301      	movs	r3, #1
 8016344:	e000      	b.n	8016348 <xQueuePeek+0x44>
 8016346:	2300      	movs	r3, #0
 8016348:	2b00      	cmp	r3, #0
 801634a:	d10a      	bne.n	8016362 <xQueuePeek+0x5e>
	__asm volatile
 801634c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016350:	f383 8811 	msr	BASEPRI, r3
 8016354:	f3bf 8f6f 	isb	sy
 8016358:	f3bf 8f4f 	dsb	sy
 801635c:	623b      	str	r3, [r7, #32]
}
 801635e:	bf00      	nop
 8016360:	e7fe      	b.n	8016360 <xQueuePeek+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8016362:	f001 f969 	bl	8017638 <xTaskGetSchedulerState>
 8016366:	4603      	mov	r3, r0
 8016368:	2b00      	cmp	r3, #0
 801636a:	d102      	bne.n	8016372 <xQueuePeek+0x6e>
 801636c:	687b      	ldr	r3, [r7, #4]
 801636e:	2b00      	cmp	r3, #0
 8016370:	d101      	bne.n	8016376 <xQueuePeek+0x72>
 8016372:	2301      	movs	r3, #1
 8016374:	e000      	b.n	8016378 <xQueuePeek+0x74>
 8016376:	2300      	movs	r3, #0
 8016378:	2b00      	cmp	r3, #0
 801637a:	d10a      	bne.n	8016392 <xQueuePeek+0x8e>
	__asm volatile
 801637c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016380:	f383 8811 	msr	BASEPRI, r3
 8016384:	f3bf 8f6f 	isb	sy
 8016388:	f3bf 8f4f 	dsb	sy
 801638c:	61fb      	str	r3, [r7, #28]
}
 801638e:	bf00      	nop
 8016390:	e7fe      	b.n	8016390 <xQueuePeek+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8016392:	f001 feb7 	bl	8018104 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801639a:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801639c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801639e:	2b00      	cmp	r3, #0
 80163a0:	d032      	beq.n	8016408 <xQueuePeek+0x104>
			{
				/* Remember the read position so it can be reset after the data
				is read from the queue as this function is only peeking the
				data, not removing it. */
				pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 80163a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163a4:	68db      	ldr	r3, [r3, #12]
 80163a6:	62bb      	str	r3, [r7, #40]	; 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80163a8:	68b9      	ldr	r1, [r7, #8]
 80163aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80163ac:	f000 f908 	bl	80165c0 <prvCopyDataFromQueue>
				traceQUEUE_PEEK( pxQueue );
 80163b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163b2:	4618      	mov	r0, r3
 80163b4:	f003 fb42 	bl	8019a3c <SEGGER_SYSVIEW_ShrinkId>
 80163b8:	4604      	mov	r4, r0
 80163ba:	68bb      	ldr	r3, [r7, #8]
 80163bc:	4618      	mov	r0, r3
 80163be:	f003 fb3d 	bl	8019a3c <SEGGER_SYSVIEW_ShrinkId>
 80163c2:	4602      	mov	r2, r0
 80163c4:	687b      	ldr	r3, [r7, #4]
 80163c6:	2101      	movs	r1, #1
 80163c8:	9100      	str	r1, [sp, #0]
 80163ca:	4621      	mov	r1, r4
 80163cc:	205c      	movs	r0, #92	; 0x5c
 80163ce:	f002 fef9 	bl	80191c4 <SEGGER_SYSVIEW_RecordU32x4>

				/* The data is not being removed, so reset the read pointer. */
				pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 80163d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80163d6:	60da      	str	r2, [r3, #12]

				/* The data is being left in the queue, so see if there are
				any other tasks waiting for the data. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80163d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80163dc:	2b00      	cmp	r3, #0
 80163de:	d00f      	beq.n	8016400 <xQueuePeek+0xfc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80163e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163e2:	3324      	adds	r3, #36	; 0x24
 80163e4:	4618      	mov	r0, r3
 80163e6:	f000 ff29 	bl	801723c <xTaskRemoveFromEventList>
 80163ea:	4603      	mov	r3, r0
 80163ec:	2b00      	cmp	r3, #0
 80163ee:	d007      	beq.n	8016400 <xQueuePeek+0xfc>
					{
						/* The task waiting has a higher priority than this task. */
						queueYIELD_IF_USING_PREEMPTION();
 80163f0:	4b3d      	ldr	r3, [pc, #244]	; (80164e8 <xQueuePeek+0x1e4>)
 80163f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80163f6:	601a      	str	r2, [r3, #0]
 80163f8:	f3bf 8f4f 	dsb	sy
 80163fc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8016400:	f001 feb0 	bl	8018164 <vPortExitCritical>
				return pdPASS;
 8016404:	2301      	movs	r3, #1
 8016406:	e06a      	b.n	80164de <xQueuePeek+0x1da>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8016408:	687b      	ldr	r3, [r7, #4]
 801640a:	2b00      	cmp	r3, #0
 801640c:	d103      	bne.n	8016416 <xQueuePeek+0x112>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801640e:	f001 fea9 	bl	8018164 <vPortExitCritical>
					traceQUEUE_PEEK_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8016412:	2300      	movs	r3, #0
 8016414:	e063      	b.n	80164de <xQueuePeek+0x1da>
				}
				else if( xEntryTimeSet == pdFALSE )
 8016416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016418:	2b00      	cmp	r3, #0
 801641a:	d106      	bne.n	801642a <xQueuePeek+0x126>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure ready to enter the blocked
					state. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801641c:	f107 0314 	add.w	r3, r7, #20
 8016420:	4618      	mov	r0, r3
 8016422:	f000 ff73 	bl	801730c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8016426:	2301      	movs	r3, #1
 8016428:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801642a:	f001 fe9b 	bl	8018164 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801642e:	f000 fcab 	bl	8016d88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8016432:	f001 fe67 	bl	8018104 <vPortEnterCritical>
 8016436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016438:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801643c:	b25b      	sxtb	r3, r3
 801643e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016442:	d103      	bne.n	801644c <xQueuePeek+0x148>
 8016444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016446:	2200      	movs	r2, #0
 8016448:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801644c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801644e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016452:	b25b      	sxtb	r3, r3
 8016454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016458:	d103      	bne.n	8016462 <xQueuePeek+0x15e>
 801645a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801645c:	2200      	movs	r2, #0
 801645e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8016462:	f001 fe7f 	bl	8018164 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8016466:	1d3a      	adds	r2, r7, #4
 8016468:	f107 0314 	add.w	r3, r7, #20
 801646c:	4611      	mov	r1, r2
 801646e:	4618      	mov	r0, r3
 8016470:	f000 ff62 	bl	8017338 <xTaskCheckForTimeOut>
 8016474:	4603      	mov	r3, r0
 8016476:	2b00      	cmp	r3, #0
 8016478:	d124      	bne.n	80164c4 <xQueuePeek+0x1c0>
		{
			/* Timeout has not expired yet, check to see if there is data in the
			queue now, and if not enter the Blocked state to wait for data. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801647a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801647c:	f000 f918 	bl	80166b0 <prvIsQueueEmpty>
 8016480:	4603      	mov	r3, r0
 8016482:	2b00      	cmp	r3, #0
 8016484:	d018      	beq.n	80164b8 <xQueuePeek+0x1b4>
			{
				traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8016486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016488:	3324      	adds	r3, #36	; 0x24
 801648a:	687a      	ldr	r2, [r7, #4]
 801648c:	4611      	mov	r1, r2
 801648e:	4618      	mov	r0, r3
 8016490:	f000 fe82 	bl	8017198 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8016494:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016496:	f000 f8b9 	bl	801660c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801649a:	f000 fc83 	bl	8016da4 <xTaskResumeAll>
 801649e:	4603      	mov	r3, r0
 80164a0:	2b00      	cmp	r3, #0
 80164a2:	f47f af76 	bne.w	8016392 <xQueuePeek+0x8e>
				{
					portYIELD_WITHIN_API();
 80164a6:	4b10      	ldr	r3, [pc, #64]	; (80164e8 <xQueuePeek+0x1e4>)
 80164a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80164ac:	601a      	str	r2, [r3, #0]
 80164ae:	f3bf 8f4f 	dsb	sy
 80164b2:	f3bf 8f6f 	isb	sy
 80164b6:	e76c      	b.n	8016392 <xQueuePeek+0x8e>
			}
			else
			{
				/* There is data in the queue now, so don't enter the blocked
				state, instead return to try and obtain the data. */
				prvUnlockQueue( pxQueue );
 80164b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80164ba:	f000 f8a7 	bl	801660c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80164be:	f000 fc71 	bl	8016da4 <xTaskResumeAll>
 80164c2:	e766      	b.n	8016392 <xQueuePeek+0x8e>
		}
		else
		{
			/* The timeout has expired.  If there is still no data in the queue
			exit, otherwise go back and try to read the data again. */
			prvUnlockQueue( pxQueue );
 80164c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80164c6:	f000 f8a1 	bl	801660c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80164ca:	f000 fc6b 	bl	8016da4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80164ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80164d0:	f000 f8ee 	bl	80166b0 <prvIsQueueEmpty>
 80164d4:	4603      	mov	r3, r0
 80164d6:	2b00      	cmp	r3, #0
 80164d8:	f43f af5b 	beq.w	8016392 <xQueuePeek+0x8e>
			{
				traceQUEUE_PEEK_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80164dc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80164de:	4618      	mov	r0, r3
 80164e0:	373c      	adds	r7, #60	; 0x3c
 80164e2:	46bd      	mov	sp, r7
 80164e4:	bd90      	pop	{r4, r7, pc}
 80164e6:	bf00      	nop
 80164e8:	e000ed04 	.word	0xe000ed04

080164ec <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80164ec:	b580      	push	{r7, lr}
 80164ee:	b086      	sub	sp, #24
 80164f0:	af00      	add	r7, sp, #0
 80164f2:	60f8      	str	r0, [r7, #12]
 80164f4:	60b9      	str	r1, [r7, #8]
 80164f6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80164f8:	2300      	movs	r3, #0
 80164fa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80164fc:	68fb      	ldr	r3, [r7, #12]
 80164fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016500:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8016502:	68fb      	ldr	r3, [r7, #12]
 8016504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016506:	2b00      	cmp	r3, #0
 8016508:	d10d      	bne.n	8016526 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801650a:	68fb      	ldr	r3, [r7, #12]
 801650c:	681b      	ldr	r3, [r3, #0]
 801650e:	2b00      	cmp	r3, #0
 8016510:	d14d      	bne.n	80165ae <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8016512:	68fb      	ldr	r3, [r7, #12]
 8016514:	689b      	ldr	r3, [r3, #8]
 8016516:	4618      	mov	r0, r3
 8016518:	f001 f8ac 	bl	8017674 <xTaskPriorityDisinherit>
 801651c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801651e:	68fb      	ldr	r3, [r7, #12]
 8016520:	2200      	movs	r2, #0
 8016522:	609a      	str	r2, [r3, #8]
 8016524:	e043      	b.n	80165ae <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8016526:	687b      	ldr	r3, [r7, #4]
 8016528:	2b00      	cmp	r3, #0
 801652a:	d119      	bne.n	8016560 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801652c:	68fb      	ldr	r3, [r7, #12]
 801652e:	6858      	ldr	r0, [r3, #4]
 8016530:	68fb      	ldr	r3, [r7, #12]
 8016532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016534:	461a      	mov	r2, r3
 8016536:	68b9      	ldr	r1, [r7, #8]
 8016538:	f003 fc20 	bl	8019d7c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801653c:	68fb      	ldr	r3, [r7, #12]
 801653e:	685a      	ldr	r2, [r3, #4]
 8016540:	68fb      	ldr	r3, [r7, #12]
 8016542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016544:	441a      	add	r2, r3
 8016546:	68fb      	ldr	r3, [r7, #12]
 8016548:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801654a:	68fb      	ldr	r3, [r7, #12]
 801654c:	685a      	ldr	r2, [r3, #4]
 801654e:	68fb      	ldr	r3, [r7, #12]
 8016550:	689b      	ldr	r3, [r3, #8]
 8016552:	429a      	cmp	r2, r3
 8016554:	d32b      	bcc.n	80165ae <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8016556:	68fb      	ldr	r3, [r7, #12]
 8016558:	681a      	ldr	r2, [r3, #0]
 801655a:	68fb      	ldr	r3, [r7, #12]
 801655c:	605a      	str	r2, [r3, #4]
 801655e:	e026      	b.n	80165ae <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8016560:	68fb      	ldr	r3, [r7, #12]
 8016562:	68d8      	ldr	r0, [r3, #12]
 8016564:	68fb      	ldr	r3, [r7, #12]
 8016566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016568:	461a      	mov	r2, r3
 801656a:	68b9      	ldr	r1, [r7, #8]
 801656c:	f003 fc06 	bl	8019d7c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8016570:	68fb      	ldr	r3, [r7, #12]
 8016572:	68da      	ldr	r2, [r3, #12]
 8016574:	68fb      	ldr	r3, [r7, #12]
 8016576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016578:	425b      	negs	r3, r3
 801657a:	441a      	add	r2, r3
 801657c:	68fb      	ldr	r3, [r7, #12]
 801657e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8016580:	68fb      	ldr	r3, [r7, #12]
 8016582:	68da      	ldr	r2, [r3, #12]
 8016584:	68fb      	ldr	r3, [r7, #12]
 8016586:	681b      	ldr	r3, [r3, #0]
 8016588:	429a      	cmp	r2, r3
 801658a:	d207      	bcs.n	801659c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801658c:	68fb      	ldr	r3, [r7, #12]
 801658e:	689a      	ldr	r2, [r3, #8]
 8016590:	68fb      	ldr	r3, [r7, #12]
 8016592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016594:	425b      	negs	r3, r3
 8016596:	441a      	add	r2, r3
 8016598:	68fb      	ldr	r3, [r7, #12]
 801659a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801659c:	687b      	ldr	r3, [r7, #4]
 801659e:	2b02      	cmp	r3, #2
 80165a0:	d105      	bne.n	80165ae <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80165a2:	693b      	ldr	r3, [r7, #16]
 80165a4:	2b00      	cmp	r3, #0
 80165a6:	d002      	beq.n	80165ae <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80165a8:	693b      	ldr	r3, [r7, #16]
 80165aa:	3b01      	subs	r3, #1
 80165ac:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80165ae:	693b      	ldr	r3, [r7, #16]
 80165b0:	1c5a      	adds	r2, r3, #1
 80165b2:	68fb      	ldr	r3, [r7, #12]
 80165b4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80165b6:	697b      	ldr	r3, [r7, #20]
}
 80165b8:	4618      	mov	r0, r3
 80165ba:	3718      	adds	r7, #24
 80165bc:	46bd      	mov	sp, r7
 80165be:	bd80      	pop	{r7, pc}

080165c0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80165c0:	b580      	push	{r7, lr}
 80165c2:	b082      	sub	sp, #8
 80165c4:	af00      	add	r7, sp, #0
 80165c6:	6078      	str	r0, [r7, #4]
 80165c8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80165ca:	687b      	ldr	r3, [r7, #4]
 80165cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80165ce:	2b00      	cmp	r3, #0
 80165d0:	d018      	beq.n	8016604 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80165d2:	687b      	ldr	r3, [r7, #4]
 80165d4:	68da      	ldr	r2, [r3, #12]
 80165d6:	687b      	ldr	r3, [r7, #4]
 80165d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80165da:	441a      	add	r2, r3
 80165dc:	687b      	ldr	r3, [r7, #4]
 80165de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80165e0:	687b      	ldr	r3, [r7, #4]
 80165e2:	68da      	ldr	r2, [r3, #12]
 80165e4:	687b      	ldr	r3, [r7, #4]
 80165e6:	689b      	ldr	r3, [r3, #8]
 80165e8:	429a      	cmp	r2, r3
 80165ea:	d303      	bcc.n	80165f4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80165ec:	687b      	ldr	r3, [r7, #4]
 80165ee:	681a      	ldr	r2, [r3, #0]
 80165f0:	687b      	ldr	r3, [r7, #4]
 80165f2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80165f4:	687b      	ldr	r3, [r7, #4]
 80165f6:	68d9      	ldr	r1, [r3, #12]
 80165f8:	687b      	ldr	r3, [r7, #4]
 80165fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80165fc:	461a      	mov	r2, r3
 80165fe:	6838      	ldr	r0, [r7, #0]
 8016600:	f003 fbbc 	bl	8019d7c <memcpy>
	}
}
 8016604:	bf00      	nop
 8016606:	3708      	adds	r7, #8
 8016608:	46bd      	mov	sp, r7
 801660a:	bd80      	pop	{r7, pc}

0801660c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801660c:	b580      	push	{r7, lr}
 801660e:	b084      	sub	sp, #16
 8016610:	af00      	add	r7, sp, #0
 8016612:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8016614:	f001 fd76 	bl	8018104 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8016618:	687b      	ldr	r3, [r7, #4]
 801661a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801661e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8016620:	e011      	b.n	8016646 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016622:	687b      	ldr	r3, [r7, #4]
 8016624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016626:	2b00      	cmp	r3, #0
 8016628:	d012      	beq.n	8016650 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801662a:	687b      	ldr	r3, [r7, #4]
 801662c:	3324      	adds	r3, #36	; 0x24
 801662e:	4618      	mov	r0, r3
 8016630:	f000 fe04 	bl	801723c <xTaskRemoveFromEventList>
 8016634:	4603      	mov	r3, r0
 8016636:	2b00      	cmp	r3, #0
 8016638:	d001      	beq.n	801663e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801663a:	f000 fedf 	bl	80173fc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801663e:	7bfb      	ldrb	r3, [r7, #15]
 8016640:	3b01      	subs	r3, #1
 8016642:	b2db      	uxtb	r3, r3
 8016644:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8016646:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801664a:	2b00      	cmp	r3, #0
 801664c:	dce9      	bgt.n	8016622 <prvUnlockQueue+0x16>
 801664e:	e000      	b.n	8016652 <prvUnlockQueue+0x46>
					break;
 8016650:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8016652:	687b      	ldr	r3, [r7, #4]
 8016654:	22ff      	movs	r2, #255	; 0xff
 8016656:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801665a:	f001 fd83 	bl	8018164 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801665e:	f001 fd51 	bl	8018104 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8016662:	687b      	ldr	r3, [r7, #4]
 8016664:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016668:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801666a:	e011      	b.n	8016690 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801666c:	687b      	ldr	r3, [r7, #4]
 801666e:	691b      	ldr	r3, [r3, #16]
 8016670:	2b00      	cmp	r3, #0
 8016672:	d012      	beq.n	801669a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016674:	687b      	ldr	r3, [r7, #4]
 8016676:	3310      	adds	r3, #16
 8016678:	4618      	mov	r0, r3
 801667a:	f000 fddf 	bl	801723c <xTaskRemoveFromEventList>
 801667e:	4603      	mov	r3, r0
 8016680:	2b00      	cmp	r3, #0
 8016682:	d001      	beq.n	8016688 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8016684:	f000 feba 	bl	80173fc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8016688:	7bbb      	ldrb	r3, [r7, #14]
 801668a:	3b01      	subs	r3, #1
 801668c:	b2db      	uxtb	r3, r3
 801668e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8016690:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016694:	2b00      	cmp	r3, #0
 8016696:	dce9      	bgt.n	801666c <prvUnlockQueue+0x60>
 8016698:	e000      	b.n	801669c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801669a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801669c:	687b      	ldr	r3, [r7, #4]
 801669e:	22ff      	movs	r2, #255	; 0xff
 80166a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80166a4:	f001 fd5e 	bl	8018164 <vPortExitCritical>
}
 80166a8:	bf00      	nop
 80166aa:	3710      	adds	r7, #16
 80166ac:	46bd      	mov	sp, r7
 80166ae:	bd80      	pop	{r7, pc}

080166b0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80166b0:	b580      	push	{r7, lr}
 80166b2:	b084      	sub	sp, #16
 80166b4:	af00      	add	r7, sp, #0
 80166b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80166b8:	f001 fd24 	bl	8018104 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80166bc:	687b      	ldr	r3, [r7, #4]
 80166be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80166c0:	2b00      	cmp	r3, #0
 80166c2:	d102      	bne.n	80166ca <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80166c4:	2301      	movs	r3, #1
 80166c6:	60fb      	str	r3, [r7, #12]
 80166c8:	e001      	b.n	80166ce <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80166ca:	2300      	movs	r3, #0
 80166cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80166ce:	f001 fd49 	bl	8018164 <vPortExitCritical>

	return xReturn;
 80166d2:	68fb      	ldr	r3, [r7, #12]
}
 80166d4:	4618      	mov	r0, r3
 80166d6:	3710      	adds	r7, #16
 80166d8:	46bd      	mov	sp, r7
 80166da:	bd80      	pop	{r7, pc}

080166dc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80166dc:	b580      	push	{r7, lr}
 80166de:	b084      	sub	sp, #16
 80166e0:	af00      	add	r7, sp, #0
 80166e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80166e4:	f001 fd0e 	bl	8018104 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80166e8:	687b      	ldr	r3, [r7, #4]
 80166ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80166ec:	687b      	ldr	r3, [r7, #4]
 80166ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80166f0:	429a      	cmp	r2, r3
 80166f2:	d102      	bne.n	80166fa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80166f4:	2301      	movs	r3, #1
 80166f6:	60fb      	str	r3, [r7, #12]
 80166f8:	e001      	b.n	80166fe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80166fa:	2300      	movs	r3, #0
 80166fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80166fe:	f001 fd31 	bl	8018164 <vPortExitCritical>

	return xReturn;
 8016702:	68fb      	ldr	r3, [r7, #12]
}
 8016704:	4618      	mov	r0, r3
 8016706:	3710      	adds	r7, #16
 8016708:	46bd      	mov	sp, r7
 801670a:	bd80      	pop	{r7, pc}

0801670c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 801670c:	b580      	push	{r7, lr}
 801670e:	b084      	sub	sp, #16
 8016710:	af00      	add	r7, sp, #0
 8016712:	6078      	str	r0, [r7, #4]
 8016714:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8016716:	2300      	movs	r3, #0
 8016718:	60fb      	str	r3, [r7, #12]
 801671a:	e01e      	b.n	801675a <vQueueAddToRegistry+0x4e>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801671c:	4a13      	ldr	r2, [pc, #76]	; (801676c <vQueueAddToRegistry+0x60>)
 801671e:	68fb      	ldr	r3, [r7, #12]
 8016720:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8016724:	2b00      	cmp	r3, #0
 8016726:	d115      	bne.n	8016754 <vQueueAddToRegistry+0x48>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8016728:	4910      	ldr	r1, [pc, #64]	; (801676c <vQueueAddToRegistry+0x60>)
 801672a:	68fb      	ldr	r3, [r7, #12]
 801672c:	683a      	ldr	r2, [r7, #0]
 801672e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8016732:	4a0e      	ldr	r2, [pc, #56]	; (801676c <vQueueAddToRegistry+0x60>)
 8016734:	68fb      	ldr	r3, [r7, #12]
 8016736:	00db      	lsls	r3, r3, #3
 8016738:	4413      	add	r3, r2
 801673a:	687a      	ldr	r2, [r7, #4]
 801673c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 801673e:	687b      	ldr	r3, [r7, #4]
 8016740:	4618      	mov	r0, r3
 8016742:	f003 f97b 	bl	8019a3c <SEGGER_SYSVIEW_ShrinkId>
 8016746:	4601      	mov	r1, r0
 8016748:	683b      	ldr	r3, [r7, #0]
 801674a:	461a      	mov	r2, r3
 801674c:	2071      	movs	r0, #113	; 0x71
 801674e:	f002 fc69 	bl	8019024 <SEGGER_SYSVIEW_RecordU32x2>
				break;
 8016752:	e006      	b.n	8016762 <vQueueAddToRegistry+0x56>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8016754:	68fb      	ldr	r3, [r7, #12]
 8016756:	3301      	adds	r3, #1
 8016758:	60fb      	str	r3, [r7, #12]
 801675a:	68fb      	ldr	r3, [r7, #12]
 801675c:	2b07      	cmp	r3, #7
 801675e:	d9dd      	bls.n	801671c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8016760:	bf00      	nop
 8016762:	bf00      	nop
 8016764:	3710      	adds	r7, #16
 8016766:	46bd      	mov	sp, r7
 8016768:	bd80      	pop	{r7, pc}
 801676a:	bf00      	nop
 801676c:	2001e930 	.word	0x2001e930

08016770 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8016770:	b580      	push	{r7, lr}
 8016772:	b086      	sub	sp, #24
 8016774:	af00      	add	r7, sp, #0
 8016776:	60f8      	str	r0, [r7, #12]
 8016778:	60b9      	str	r1, [r7, #8]
 801677a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 801677c:	68fb      	ldr	r3, [r7, #12]
 801677e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8016780:	f001 fcc0 	bl	8018104 <vPortEnterCritical>
 8016784:	697b      	ldr	r3, [r7, #20]
 8016786:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801678a:	b25b      	sxtb	r3, r3
 801678c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016790:	d103      	bne.n	801679a <vQueueWaitForMessageRestricted+0x2a>
 8016792:	697b      	ldr	r3, [r7, #20]
 8016794:	2200      	movs	r2, #0
 8016796:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801679a:	697b      	ldr	r3, [r7, #20]
 801679c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80167a0:	b25b      	sxtb	r3, r3
 80167a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80167a6:	d103      	bne.n	80167b0 <vQueueWaitForMessageRestricted+0x40>
 80167a8:	697b      	ldr	r3, [r7, #20]
 80167aa:	2200      	movs	r2, #0
 80167ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80167b0:	f001 fcd8 	bl	8018164 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80167b4:	697b      	ldr	r3, [r7, #20]
 80167b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80167b8:	2b00      	cmp	r3, #0
 80167ba:	d106      	bne.n	80167ca <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80167bc:	697b      	ldr	r3, [r7, #20]
 80167be:	3324      	adds	r3, #36	; 0x24
 80167c0:	687a      	ldr	r2, [r7, #4]
 80167c2:	68b9      	ldr	r1, [r7, #8]
 80167c4:	4618      	mov	r0, r3
 80167c6:	f000 fd0b 	bl	80171e0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80167ca:	6978      	ldr	r0, [r7, #20]
 80167cc:	f7ff ff1e 	bl	801660c <prvUnlockQueue>
	}
 80167d0:	bf00      	nop
 80167d2:	3718      	adds	r7, #24
 80167d4:	46bd      	mov	sp, r7
 80167d6:	bd80      	pop	{r7, pc}

080167d8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80167d8:	b580      	push	{r7, lr}
 80167da:	b08e      	sub	sp, #56	; 0x38
 80167dc:	af04      	add	r7, sp, #16
 80167de:	60f8      	str	r0, [r7, #12]
 80167e0:	60b9      	str	r1, [r7, #8]
 80167e2:	607a      	str	r2, [r7, #4]
 80167e4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80167e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80167e8:	2b00      	cmp	r3, #0
 80167ea:	d10a      	bne.n	8016802 <xTaskCreateStatic+0x2a>
	__asm volatile
 80167ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80167f0:	f383 8811 	msr	BASEPRI, r3
 80167f4:	f3bf 8f6f 	isb	sy
 80167f8:	f3bf 8f4f 	dsb	sy
 80167fc:	623b      	str	r3, [r7, #32]
}
 80167fe:	bf00      	nop
 8016800:	e7fe      	b.n	8016800 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8016802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016804:	2b00      	cmp	r3, #0
 8016806:	d10a      	bne.n	801681e <xTaskCreateStatic+0x46>
	__asm volatile
 8016808:	f04f 0350 	mov.w	r3, #80	; 0x50
 801680c:	f383 8811 	msr	BASEPRI, r3
 8016810:	f3bf 8f6f 	isb	sy
 8016814:	f3bf 8f4f 	dsb	sy
 8016818:	61fb      	str	r3, [r7, #28]
}
 801681a:	bf00      	nop
 801681c:	e7fe      	b.n	801681c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801681e:	23cc      	movs	r3, #204	; 0xcc
 8016820:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8016822:	693b      	ldr	r3, [r7, #16]
 8016824:	2bcc      	cmp	r3, #204	; 0xcc
 8016826:	d00a      	beq.n	801683e <xTaskCreateStatic+0x66>
	__asm volatile
 8016828:	f04f 0350 	mov.w	r3, #80	; 0x50
 801682c:	f383 8811 	msr	BASEPRI, r3
 8016830:	f3bf 8f6f 	isb	sy
 8016834:	f3bf 8f4f 	dsb	sy
 8016838:	61bb      	str	r3, [r7, #24]
}
 801683a:	bf00      	nop
 801683c:	e7fe      	b.n	801683c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801683e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8016840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016842:	2b00      	cmp	r3, #0
 8016844:	d01e      	beq.n	8016884 <xTaskCreateStatic+0xac>
 8016846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016848:	2b00      	cmp	r3, #0
 801684a:	d01b      	beq.n	8016884 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801684c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801684e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8016850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016852:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016854:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8016856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016858:	2202      	movs	r2, #2
 801685a:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801685e:	2300      	movs	r3, #0
 8016860:	9303      	str	r3, [sp, #12]
 8016862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016864:	9302      	str	r3, [sp, #8]
 8016866:	f107 0314 	add.w	r3, r7, #20
 801686a:	9301      	str	r3, [sp, #4]
 801686c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801686e:	9300      	str	r3, [sp, #0]
 8016870:	683b      	ldr	r3, [r7, #0]
 8016872:	687a      	ldr	r2, [r7, #4]
 8016874:	68b9      	ldr	r1, [r7, #8]
 8016876:	68f8      	ldr	r0, [r7, #12]
 8016878:	f000 f850 	bl	801691c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801687c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801687e:	f000 f8f3 	bl	8016a68 <prvAddNewTaskToReadyList>
 8016882:	e001      	b.n	8016888 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8016884:	2300      	movs	r3, #0
 8016886:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8016888:	697b      	ldr	r3, [r7, #20]
	}
 801688a:	4618      	mov	r0, r3
 801688c:	3728      	adds	r7, #40	; 0x28
 801688e:	46bd      	mov	sp, r7
 8016890:	bd80      	pop	{r7, pc}

08016892 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8016892:	b580      	push	{r7, lr}
 8016894:	b08c      	sub	sp, #48	; 0x30
 8016896:	af04      	add	r7, sp, #16
 8016898:	60f8      	str	r0, [r7, #12]
 801689a:	60b9      	str	r1, [r7, #8]
 801689c:	603b      	str	r3, [r7, #0]
 801689e:	4613      	mov	r3, r2
 80168a0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80168a2:	88fb      	ldrh	r3, [r7, #6]
 80168a4:	009b      	lsls	r3, r3, #2
 80168a6:	4618      	mov	r0, r3
 80168a8:	f001 fd4e 	bl	8018348 <pvPortMalloc>
 80168ac:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80168ae:	697b      	ldr	r3, [r7, #20]
 80168b0:	2b00      	cmp	r3, #0
 80168b2:	d00e      	beq.n	80168d2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80168b4:	20cc      	movs	r0, #204	; 0xcc
 80168b6:	f001 fd47 	bl	8018348 <pvPortMalloc>
 80168ba:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80168bc:	69fb      	ldr	r3, [r7, #28]
 80168be:	2b00      	cmp	r3, #0
 80168c0:	d003      	beq.n	80168ca <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80168c2:	69fb      	ldr	r3, [r7, #28]
 80168c4:	697a      	ldr	r2, [r7, #20]
 80168c6:	631a      	str	r2, [r3, #48]	; 0x30
 80168c8:	e005      	b.n	80168d6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80168ca:	6978      	ldr	r0, [r7, #20]
 80168cc:	f001 fe08 	bl	80184e0 <vPortFree>
 80168d0:	e001      	b.n	80168d6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80168d2:	2300      	movs	r3, #0
 80168d4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80168d6:	69fb      	ldr	r3, [r7, #28]
 80168d8:	2b00      	cmp	r3, #0
 80168da:	d017      	beq.n	801690c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80168dc:	69fb      	ldr	r3, [r7, #28]
 80168de:	2200      	movs	r2, #0
 80168e0:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80168e4:	88fa      	ldrh	r2, [r7, #6]
 80168e6:	2300      	movs	r3, #0
 80168e8:	9303      	str	r3, [sp, #12]
 80168ea:	69fb      	ldr	r3, [r7, #28]
 80168ec:	9302      	str	r3, [sp, #8]
 80168ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80168f0:	9301      	str	r3, [sp, #4]
 80168f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80168f4:	9300      	str	r3, [sp, #0]
 80168f6:	683b      	ldr	r3, [r7, #0]
 80168f8:	68b9      	ldr	r1, [r7, #8]
 80168fa:	68f8      	ldr	r0, [r7, #12]
 80168fc:	f000 f80e 	bl	801691c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8016900:	69f8      	ldr	r0, [r7, #28]
 8016902:	f000 f8b1 	bl	8016a68 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8016906:	2301      	movs	r3, #1
 8016908:	61bb      	str	r3, [r7, #24]
 801690a:	e002      	b.n	8016912 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801690c:	f04f 33ff 	mov.w	r3, #4294967295
 8016910:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8016912:	69bb      	ldr	r3, [r7, #24]
	}
 8016914:	4618      	mov	r0, r3
 8016916:	3720      	adds	r7, #32
 8016918:	46bd      	mov	sp, r7
 801691a:	bd80      	pop	{r7, pc}

0801691c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801691c:	b580      	push	{r7, lr}
 801691e:	b088      	sub	sp, #32
 8016920:	af00      	add	r7, sp, #0
 8016922:	60f8      	str	r0, [r7, #12]
 8016924:	60b9      	str	r1, [r7, #8]
 8016926:	607a      	str	r2, [r7, #4]
 8016928:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801692a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801692c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801692e:	687b      	ldr	r3, [r7, #4]
 8016930:	009b      	lsls	r3, r3, #2
 8016932:	461a      	mov	r2, r3
 8016934:	21a5      	movs	r1, #165	; 0xa5
 8016936:	f003 fa2f 	bl	8019d98 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801693a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801693c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801693e:	687b      	ldr	r3, [r7, #4]
 8016940:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8016944:	3b01      	subs	r3, #1
 8016946:	009b      	lsls	r3, r3, #2
 8016948:	4413      	add	r3, r2
 801694a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801694c:	69bb      	ldr	r3, [r7, #24]
 801694e:	f023 0307 	bic.w	r3, r3, #7
 8016952:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8016954:	69bb      	ldr	r3, [r7, #24]
 8016956:	f003 0307 	and.w	r3, r3, #7
 801695a:	2b00      	cmp	r3, #0
 801695c:	d00a      	beq.n	8016974 <prvInitialiseNewTask+0x58>
	__asm volatile
 801695e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016962:	f383 8811 	msr	BASEPRI, r3
 8016966:	f3bf 8f6f 	isb	sy
 801696a:	f3bf 8f4f 	dsb	sy
 801696e:	617b      	str	r3, [r7, #20]
}
 8016970:	bf00      	nop
 8016972:	e7fe      	b.n	8016972 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8016974:	68bb      	ldr	r3, [r7, #8]
 8016976:	2b00      	cmp	r3, #0
 8016978:	d01f      	beq.n	80169ba <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801697a:	2300      	movs	r3, #0
 801697c:	61fb      	str	r3, [r7, #28]
 801697e:	e012      	b.n	80169a6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8016980:	68ba      	ldr	r2, [r7, #8]
 8016982:	69fb      	ldr	r3, [r7, #28]
 8016984:	4413      	add	r3, r2
 8016986:	7819      	ldrb	r1, [r3, #0]
 8016988:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801698a:	69fb      	ldr	r3, [r7, #28]
 801698c:	4413      	add	r3, r2
 801698e:	3334      	adds	r3, #52	; 0x34
 8016990:	460a      	mov	r2, r1
 8016992:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8016994:	68ba      	ldr	r2, [r7, #8]
 8016996:	69fb      	ldr	r3, [r7, #28]
 8016998:	4413      	add	r3, r2
 801699a:	781b      	ldrb	r3, [r3, #0]
 801699c:	2b00      	cmp	r3, #0
 801699e:	d006      	beq.n	80169ae <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80169a0:	69fb      	ldr	r3, [r7, #28]
 80169a2:	3301      	adds	r3, #1
 80169a4:	61fb      	str	r3, [r7, #28]
 80169a6:	69fb      	ldr	r3, [r7, #28]
 80169a8:	2b1f      	cmp	r3, #31
 80169aa:	d9e9      	bls.n	8016980 <prvInitialiseNewTask+0x64>
 80169ac:	e000      	b.n	80169b0 <prvInitialiseNewTask+0x94>
			{
				break;
 80169ae:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80169b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80169b2:	2200      	movs	r2, #0
 80169b4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 80169b8:	e003      	b.n	80169c2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80169ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80169bc:	2200      	movs	r2, #0
 80169be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80169c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80169c4:	2b37      	cmp	r3, #55	; 0x37
 80169c6:	d901      	bls.n	80169cc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80169c8:	2337      	movs	r3, #55	; 0x37
 80169ca:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80169cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80169ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80169d0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80169d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80169d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80169d6:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->uxMutexesHeld = 0;
 80169d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80169da:	2200      	movs	r2, #0
 80169dc:	661a      	str	r2, [r3, #96]	; 0x60
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80169de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80169e0:	3304      	adds	r3, #4
 80169e2:	4618      	mov	r0, r3
 80169e4:	f7fe ffd0 	bl	8015988 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80169e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80169ea:	3318      	adds	r3, #24
 80169ec:	4618      	mov	r0, r3
 80169ee:	f7fe ffcb 	bl	8015988 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80169f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80169f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80169f6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80169f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80169fa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80169fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a00:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8016a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016a06:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8016a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a0a:	2200      	movs	r2, #0
 8016a0c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8016a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a12:	2200      	movs	r2, #0
 8016a14:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8016a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a1a:	3364      	adds	r3, #100	; 0x64
 8016a1c:	2260      	movs	r2, #96	; 0x60
 8016a1e:	2100      	movs	r1, #0
 8016a20:	4618      	mov	r0, r3
 8016a22:	f003 f9b9 	bl	8019d98 <memset>
 8016a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a28:	4a0c      	ldr	r2, [pc, #48]	; (8016a5c <prvInitialiseNewTask+0x140>)
 8016a2a:	669a      	str	r2, [r3, #104]	; 0x68
 8016a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a2e:	4a0c      	ldr	r2, [pc, #48]	; (8016a60 <prvInitialiseNewTask+0x144>)
 8016a30:	66da      	str	r2, [r3, #108]	; 0x6c
 8016a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a34:	4a0b      	ldr	r2, [pc, #44]	; (8016a64 <prvInitialiseNewTask+0x148>)
 8016a36:	671a      	str	r2, [r3, #112]	; 0x70
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8016a38:	683a      	ldr	r2, [r7, #0]
 8016a3a:	68f9      	ldr	r1, [r7, #12]
 8016a3c:	69b8      	ldr	r0, [r7, #24]
 8016a3e:	f001 fa31 	bl	8017ea4 <pxPortInitialiseStack>
 8016a42:	4602      	mov	r2, r0
 8016a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a46:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8016a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a4a:	2b00      	cmp	r3, #0
 8016a4c:	d002      	beq.n	8016a54 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8016a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016a52:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016a54:	bf00      	nop
 8016a56:	3720      	adds	r7, #32
 8016a58:	46bd      	mov	sp, r7
 8016a5a:	bd80      	pop	{r7, pc}
 8016a5c:	0801b164 	.word	0x0801b164
 8016a60:	0801b184 	.word	0x0801b184
 8016a64:	0801b144 	.word	0x0801b144

08016a68 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8016a68:	b5b0      	push	{r4, r5, r7, lr}
 8016a6a:	b084      	sub	sp, #16
 8016a6c:	af02      	add	r7, sp, #8
 8016a6e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8016a70:	f001 fb48 	bl	8018104 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8016a74:	4b3c      	ldr	r3, [pc, #240]	; (8016b68 <prvAddNewTaskToReadyList+0x100>)
 8016a76:	681b      	ldr	r3, [r3, #0]
 8016a78:	3301      	adds	r3, #1
 8016a7a:	4a3b      	ldr	r2, [pc, #236]	; (8016b68 <prvAddNewTaskToReadyList+0x100>)
 8016a7c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8016a7e:	4b3b      	ldr	r3, [pc, #236]	; (8016b6c <prvAddNewTaskToReadyList+0x104>)
 8016a80:	681b      	ldr	r3, [r3, #0]
 8016a82:	2b00      	cmp	r3, #0
 8016a84:	d109      	bne.n	8016a9a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8016a86:	4a39      	ldr	r2, [pc, #228]	; (8016b6c <prvAddNewTaskToReadyList+0x104>)
 8016a88:	687b      	ldr	r3, [r7, #4]
 8016a8a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8016a8c:	4b36      	ldr	r3, [pc, #216]	; (8016b68 <prvAddNewTaskToReadyList+0x100>)
 8016a8e:	681b      	ldr	r3, [r3, #0]
 8016a90:	2b01      	cmp	r3, #1
 8016a92:	d110      	bne.n	8016ab6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8016a94:	f000 fcd6 	bl	8017444 <prvInitialiseTaskLists>
 8016a98:	e00d      	b.n	8016ab6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8016a9a:	4b35      	ldr	r3, [pc, #212]	; (8016b70 <prvAddNewTaskToReadyList+0x108>)
 8016a9c:	681b      	ldr	r3, [r3, #0]
 8016a9e:	2b00      	cmp	r3, #0
 8016aa0:	d109      	bne.n	8016ab6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8016aa2:	4b32      	ldr	r3, [pc, #200]	; (8016b6c <prvAddNewTaskToReadyList+0x104>)
 8016aa4:	681b      	ldr	r3, [r3, #0]
 8016aa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016aa8:	687b      	ldr	r3, [r7, #4]
 8016aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016aac:	429a      	cmp	r2, r3
 8016aae:	d802      	bhi.n	8016ab6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8016ab0:	4a2e      	ldr	r2, [pc, #184]	; (8016b6c <prvAddNewTaskToReadyList+0x104>)
 8016ab2:	687b      	ldr	r3, [r7, #4]
 8016ab4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8016ab6:	4b2f      	ldr	r3, [pc, #188]	; (8016b74 <prvAddNewTaskToReadyList+0x10c>)
 8016ab8:	681b      	ldr	r3, [r3, #0]
 8016aba:	3301      	adds	r3, #1
 8016abc:	4a2d      	ldr	r2, [pc, #180]	; (8016b74 <prvAddNewTaskToReadyList+0x10c>)
 8016abe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8016ac0:	4b2c      	ldr	r3, [pc, #176]	; (8016b74 <prvAddNewTaskToReadyList+0x10c>)
 8016ac2:	681a      	ldr	r2, [r3, #0]
 8016ac4:	687b      	ldr	r3, [r7, #4]
 8016ac6:	655a      	str	r2, [r3, #84]	; 0x54
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 8016ac8:	687b      	ldr	r3, [r7, #4]
 8016aca:	2b00      	cmp	r3, #0
 8016acc:	d016      	beq.n	8016afc <prvAddNewTaskToReadyList+0x94>
 8016ace:	687b      	ldr	r3, [r7, #4]
 8016ad0:	4618      	mov	r0, r3
 8016ad2:	f002 feed 	bl	80198b0 <SEGGER_SYSVIEW_OnTaskCreate>
 8016ad6:	6878      	ldr	r0, [r7, #4]
 8016ad8:	687b      	ldr	r3, [r7, #4]
 8016ada:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8016ade:	687b      	ldr	r3, [r7, #4]
 8016ae0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016ae2:	687b      	ldr	r3, [r7, #4]
 8016ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016ae6:	461d      	mov	r5, r3
 8016ae8:	687b      	ldr	r3, [r7, #4]
 8016aea:	681b      	ldr	r3, [r3, #0]
 8016aec:	461c      	mov	r4, r3
 8016aee:	687b      	ldr	r3, [r7, #4]
 8016af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016af2:	1ae3      	subs	r3, r4, r3
 8016af4:	9300      	str	r3, [sp, #0]
 8016af6:	462b      	mov	r3, r5
 8016af8:	f7eb fa9c 	bl	8002034 <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 8016afc:	687b      	ldr	r3, [r7, #4]
 8016afe:	4618      	mov	r0, r3
 8016b00:	f002 ff5a 	bl	80199b8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8016b04:	687b      	ldr	r3, [r7, #4]
 8016b06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016b08:	4b1b      	ldr	r3, [pc, #108]	; (8016b78 <prvAddNewTaskToReadyList+0x110>)
 8016b0a:	681b      	ldr	r3, [r3, #0]
 8016b0c:	429a      	cmp	r2, r3
 8016b0e:	d903      	bls.n	8016b18 <prvAddNewTaskToReadyList+0xb0>
 8016b10:	687b      	ldr	r3, [r7, #4]
 8016b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016b14:	4a18      	ldr	r2, [pc, #96]	; (8016b78 <prvAddNewTaskToReadyList+0x110>)
 8016b16:	6013      	str	r3, [r2, #0]
 8016b18:	687b      	ldr	r3, [r7, #4]
 8016b1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016b1c:	4613      	mov	r3, r2
 8016b1e:	009b      	lsls	r3, r3, #2
 8016b20:	4413      	add	r3, r2
 8016b22:	009b      	lsls	r3, r3, #2
 8016b24:	4a15      	ldr	r2, [pc, #84]	; (8016b7c <prvAddNewTaskToReadyList+0x114>)
 8016b26:	441a      	add	r2, r3
 8016b28:	687b      	ldr	r3, [r7, #4]
 8016b2a:	3304      	adds	r3, #4
 8016b2c:	4619      	mov	r1, r3
 8016b2e:	4610      	mov	r0, r2
 8016b30:	f7fe ff37 	bl	80159a2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8016b34:	f001 fb16 	bl	8018164 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8016b38:	4b0d      	ldr	r3, [pc, #52]	; (8016b70 <prvAddNewTaskToReadyList+0x108>)
 8016b3a:	681b      	ldr	r3, [r3, #0]
 8016b3c:	2b00      	cmp	r3, #0
 8016b3e:	d00e      	beq.n	8016b5e <prvAddNewTaskToReadyList+0xf6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8016b40:	4b0a      	ldr	r3, [pc, #40]	; (8016b6c <prvAddNewTaskToReadyList+0x104>)
 8016b42:	681b      	ldr	r3, [r3, #0]
 8016b44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016b46:	687b      	ldr	r3, [r7, #4]
 8016b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016b4a:	429a      	cmp	r2, r3
 8016b4c:	d207      	bcs.n	8016b5e <prvAddNewTaskToReadyList+0xf6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8016b4e:	4b0c      	ldr	r3, [pc, #48]	; (8016b80 <prvAddNewTaskToReadyList+0x118>)
 8016b50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016b54:	601a      	str	r2, [r3, #0]
 8016b56:	f3bf 8f4f 	dsb	sy
 8016b5a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016b5e:	bf00      	nop
 8016b60:	3708      	adds	r7, #8
 8016b62:	46bd      	mov	sp, r7
 8016b64:	bdb0      	pop	{r4, r5, r7, pc}
 8016b66:	bf00      	nop
 8016b68:	20002420 	.word	0x20002420
 8016b6c:	20001f4c 	.word	0x20001f4c
 8016b70:	2000242c 	.word	0x2000242c
 8016b74:	2000243c 	.word	0x2000243c
 8016b78:	20002428 	.word	0x20002428
 8016b7c:	20001f50 	.word	0x20001f50
 8016b80:	e000ed04 	.word	0xe000ed04

08016b84 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8016b84:	b580      	push	{r7, lr}
 8016b86:	b08a      	sub	sp, #40	; 0x28
 8016b88:	af00      	add	r7, sp, #0
 8016b8a:	6078      	str	r0, [r7, #4]
 8016b8c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8016b8e:	2300      	movs	r3, #0
 8016b90:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8016b92:	687b      	ldr	r3, [r7, #4]
 8016b94:	2b00      	cmp	r3, #0
 8016b96:	d10a      	bne.n	8016bae <vTaskDelayUntil+0x2a>
	__asm volatile
 8016b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016b9c:	f383 8811 	msr	BASEPRI, r3
 8016ba0:	f3bf 8f6f 	isb	sy
 8016ba4:	f3bf 8f4f 	dsb	sy
 8016ba8:	617b      	str	r3, [r7, #20]
}
 8016baa:	bf00      	nop
 8016bac:	e7fe      	b.n	8016bac <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8016bae:	683b      	ldr	r3, [r7, #0]
 8016bb0:	2b00      	cmp	r3, #0
 8016bb2:	d10a      	bne.n	8016bca <vTaskDelayUntil+0x46>
	__asm volatile
 8016bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016bb8:	f383 8811 	msr	BASEPRI, r3
 8016bbc:	f3bf 8f6f 	isb	sy
 8016bc0:	f3bf 8f4f 	dsb	sy
 8016bc4:	613b      	str	r3, [r7, #16]
}
 8016bc6:	bf00      	nop
 8016bc8:	e7fe      	b.n	8016bc8 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8016bca:	4b2b      	ldr	r3, [pc, #172]	; (8016c78 <vTaskDelayUntil+0xf4>)
 8016bcc:	681b      	ldr	r3, [r3, #0]
 8016bce:	2b00      	cmp	r3, #0
 8016bd0:	d00a      	beq.n	8016be8 <vTaskDelayUntil+0x64>
	__asm volatile
 8016bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016bd6:	f383 8811 	msr	BASEPRI, r3
 8016bda:	f3bf 8f6f 	isb	sy
 8016bde:	f3bf 8f4f 	dsb	sy
 8016be2:	60fb      	str	r3, [r7, #12]
}
 8016be4:	bf00      	nop
 8016be6:	e7fe      	b.n	8016be6 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8016be8:	f000 f8ce 	bl	8016d88 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8016bec:	4b23      	ldr	r3, [pc, #140]	; (8016c7c <vTaskDelayUntil+0xf8>)
 8016bee:	681b      	ldr	r3, [r3, #0]
 8016bf0:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8016bf2:	687b      	ldr	r3, [r7, #4]
 8016bf4:	681b      	ldr	r3, [r3, #0]
 8016bf6:	683a      	ldr	r2, [r7, #0]
 8016bf8:	4413      	add	r3, r2
 8016bfa:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8016bfc:	687b      	ldr	r3, [r7, #4]
 8016bfe:	681b      	ldr	r3, [r3, #0]
 8016c00:	6a3a      	ldr	r2, [r7, #32]
 8016c02:	429a      	cmp	r2, r3
 8016c04:	d20b      	bcs.n	8016c1e <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8016c06:	687b      	ldr	r3, [r7, #4]
 8016c08:	681b      	ldr	r3, [r3, #0]
 8016c0a:	69fa      	ldr	r2, [r7, #28]
 8016c0c:	429a      	cmp	r2, r3
 8016c0e:	d211      	bcs.n	8016c34 <vTaskDelayUntil+0xb0>
 8016c10:	69fa      	ldr	r2, [r7, #28]
 8016c12:	6a3b      	ldr	r3, [r7, #32]
 8016c14:	429a      	cmp	r2, r3
 8016c16:	d90d      	bls.n	8016c34 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8016c18:	2301      	movs	r3, #1
 8016c1a:	627b      	str	r3, [r7, #36]	; 0x24
 8016c1c:	e00a      	b.n	8016c34 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8016c1e:	687b      	ldr	r3, [r7, #4]
 8016c20:	681b      	ldr	r3, [r3, #0]
 8016c22:	69fa      	ldr	r2, [r7, #28]
 8016c24:	429a      	cmp	r2, r3
 8016c26:	d303      	bcc.n	8016c30 <vTaskDelayUntil+0xac>
 8016c28:	69fa      	ldr	r2, [r7, #28]
 8016c2a:	6a3b      	ldr	r3, [r7, #32]
 8016c2c:	429a      	cmp	r2, r3
 8016c2e:	d901      	bls.n	8016c34 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8016c30:	2301      	movs	r3, #1
 8016c32:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8016c34:	687b      	ldr	r3, [r7, #4]
 8016c36:	69fa      	ldr	r2, [r7, #28]
 8016c38:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8016c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c3c:	2b00      	cmp	r3, #0
 8016c3e:	d009      	beq.n	8016c54 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );
 8016c40:	2024      	movs	r0, #36	; 0x24
 8016c42:	f002 f995 	bl	8018f70 <SEGGER_SYSVIEW_RecordVoid>

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8016c46:	69fa      	ldr	r2, [r7, #28]
 8016c48:	6a3b      	ldr	r3, [r7, #32]
 8016c4a:	1ad3      	subs	r3, r2, r3
 8016c4c:	2100      	movs	r1, #0
 8016c4e:	4618      	mov	r0, r3
 8016c50:	f000 fd86 	bl	8017760 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8016c54:	f000 f8a6 	bl	8016da4 <xTaskResumeAll>
 8016c58:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8016c5a:	69bb      	ldr	r3, [r7, #24]
 8016c5c:	2b00      	cmp	r3, #0
 8016c5e:	d107      	bne.n	8016c70 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 8016c60:	4b07      	ldr	r3, [pc, #28]	; (8016c80 <vTaskDelayUntil+0xfc>)
 8016c62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016c66:	601a      	str	r2, [r3, #0]
 8016c68:	f3bf 8f4f 	dsb	sy
 8016c6c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8016c70:	bf00      	nop
 8016c72:	3728      	adds	r7, #40	; 0x28
 8016c74:	46bd      	mov	sp, r7
 8016c76:	bd80      	pop	{r7, pc}
 8016c78:	20002448 	.word	0x20002448
 8016c7c:	20002424 	.word	0x20002424
 8016c80:	e000ed04 	.word	0xe000ed04

08016c84 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8016c84:	b580      	push	{r7, lr}
 8016c86:	b08a      	sub	sp, #40	; 0x28
 8016c88:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8016c8a:	2300      	movs	r3, #0
 8016c8c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8016c8e:	2300      	movs	r3, #0
 8016c90:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8016c92:	463a      	mov	r2, r7
 8016c94:	1d39      	adds	r1, r7, #4
 8016c96:	f107 0308 	add.w	r3, r7, #8
 8016c9a:	4618      	mov	r0, r3
 8016c9c:	f7fe fe20 	bl	80158e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8016ca0:	6839      	ldr	r1, [r7, #0]
 8016ca2:	687b      	ldr	r3, [r7, #4]
 8016ca4:	68ba      	ldr	r2, [r7, #8]
 8016ca6:	9202      	str	r2, [sp, #8]
 8016ca8:	9301      	str	r3, [sp, #4]
 8016caa:	2300      	movs	r3, #0
 8016cac:	9300      	str	r3, [sp, #0]
 8016cae:	2300      	movs	r3, #0
 8016cb0:	460a      	mov	r2, r1
 8016cb2:	492d      	ldr	r1, [pc, #180]	; (8016d68 <vTaskStartScheduler+0xe4>)
 8016cb4:	482d      	ldr	r0, [pc, #180]	; (8016d6c <vTaskStartScheduler+0xe8>)
 8016cb6:	f7ff fd8f 	bl	80167d8 <xTaskCreateStatic>
 8016cba:	4603      	mov	r3, r0
 8016cbc:	4a2c      	ldr	r2, [pc, #176]	; (8016d70 <vTaskStartScheduler+0xec>)
 8016cbe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8016cc0:	4b2b      	ldr	r3, [pc, #172]	; (8016d70 <vTaskStartScheduler+0xec>)
 8016cc2:	681b      	ldr	r3, [r3, #0]
 8016cc4:	2b00      	cmp	r3, #0
 8016cc6:	d002      	beq.n	8016cce <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8016cc8:	2301      	movs	r3, #1
 8016cca:	617b      	str	r3, [r7, #20]
 8016ccc:	e001      	b.n	8016cd2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8016cce:	2300      	movs	r3, #0
 8016cd0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8016cd2:	697b      	ldr	r3, [r7, #20]
 8016cd4:	2b01      	cmp	r3, #1
 8016cd6:	d102      	bne.n	8016cde <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8016cd8:	f000 fd96 	bl	8017808 <xTimerCreateTimerTask>
 8016cdc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8016cde:	697b      	ldr	r3, [r7, #20]
 8016ce0:	2b01      	cmp	r3, #1
 8016ce2:	d12e      	bne.n	8016d42 <vTaskStartScheduler+0xbe>
	__asm volatile
 8016ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ce8:	f383 8811 	msr	BASEPRI, r3
 8016cec:	f3bf 8f6f 	isb	sy
 8016cf0:	f3bf 8f4f 	dsb	sy
 8016cf4:	613b      	str	r3, [r7, #16]
}
 8016cf6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8016cf8:	4b1e      	ldr	r3, [pc, #120]	; (8016d74 <vTaskStartScheduler+0xf0>)
 8016cfa:	681b      	ldr	r3, [r3, #0]
 8016cfc:	3364      	adds	r3, #100	; 0x64
 8016cfe:	4a1e      	ldr	r2, [pc, #120]	; (8016d78 <vTaskStartScheduler+0xf4>)
 8016d00:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8016d02:	4b1e      	ldr	r3, [pc, #120]	; (8016d7c <vTaskStartScheduler+0xf8>)
 8016d04:	f04f 32ff 	mov.w	r2, #4294967295
 8016d08:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8016d0a:	4b1d      	ldr	r3, [pc, #116]	; (8016d80 <vTaskStartScheduler+0xfc>)
 8016d0c:	2201      	movs	r2, #1
 8016d0e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8016d10:	4b1c      	ldr	r3, [pc, #112]	; (8016d84 <vTaskStartScheduler+0x100>)
 8016d12:	2200      	movs	r2, #0
 8016d14:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 8016d16:	4b17      	ldr	r3, [pc, #92]	; (8016d74 <vTaskStartScheduler+0xf0>)
 8016d18:	681b      	ldr	r3, [r3, #0]
 8016d1a:	3334      	adds	r3, #52	; 0x34
 8016d1c:	2205      	movs	r2, #5
 8016d1e:	4912      	ldr	r1, [pc, #72]	; (8016d68 <vTaskStartScheduler+0xe4>)
 8016d20:	4618      	mov	r0, r3
 8016d22:	f003 f81d 	bl	8019d60 <memcmp>
 8016d26:	4603      	mov	r3, r0
 8016d28:	2b00      	cmp	r3, #0
 8016d2a:	d005      	beq.n	8016d38 <vTaskStartScheduler+0xb4>
 8016d2c:	4b11      	ldr	r3, [pc, #68]	; (8016d74 <vTaskStartScheduler+0xf0>)
 8016d2e:	681b      	ldr	r3, [r3, #0]
 8016d30:	4618      	mov	r0, r3
 8016d32:	f002 fdff 	bl	8019934 <SEGGER_SYSVIEW_OnTaskStartExec>
 8016d36:	e001      	b.n	8016d3c <vTaskStartScheduler+0xb8>
 8016d38:	f002 fd9e 	bl	8019878 <SEGGER_SYSVIEW_OnIdle>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8016d3c:	f001 f940 	bl	8017fc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8016d40:	e00e      	b.n	8016d60 <vTaskStartScheduler+0xdc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8016d42:	697b      	ldr	r3, [r7, #20]
 8016d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016d48:	d10a      	bne.n	8016d60 <vTaskStartScheduler+0xdc>
	__asm volatile
 8016d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d4e:	f383 8811 	msr	BASEPRI, r3
 8016d52:	f3bf 8f6f 	isb	sy
 8016d56:	f3bf 8f4f 	dsb	sy
 8016d5a:	60fb      	str	r3, [r7, #12]
}
 8016d5c:	bf00      	nop
 8016d5e:	e7fe      	b.n	8016d5e <vTaskStartScheduler+0xda>
}
 8016d60:	bf00      	nop
 8016d62:	3718      	adds	r7, #24
 8016d64:	46bd      	mov	sp, r7
 8016d66:	bd80      	pop	{r7, pc}
 8016d68:	0801aaa4 	.word	0x0801aaa4
 8016d6c:	08017415 	.word	0x08017415
 8016d70:	20002444 	.word	0x20002444
 8016d74:	20001f4c 	.word	0x20001f4c
 8016d78:	200013c4 	.word	0x200013c4
 8016d7c:	20002440 	.word	0x20002440
 8016d80:	2000242c 	.word	0x2000242c
 8016d84:	20002424 	.word	0x20002424

08016d88 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8016d88:	b480      	push	{r7}
 8016d8a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8016d8c:	4b04      	ldr	r3, [pc, #16]	; (8016da0 <vTaskSuspendAll+0x18>)
 8016d8e:	681b      	ldr	r3, [r3, #0]
 8016d90:	3301      	adds	r3, #1
 8016d92:	4a03      	ldr	r2, [pc, #12]	; (8016da0 <vTaskSuspendAll+0x18>)
 8016d94:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8016d96:	bf00      	nop
 8016d98:	46bd      	mov	sp, r7
 8016d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d9e:	4770      	bx	lr
 8016da0:	20002448 	.word	0x20002448

08016da4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8016da4:	b580      	push	{r7, lr}
 8016da6:	b084      	sub	sp, #16
 8016da8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8016daa:	2300      	movs	r3, #0
 8016dac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8016dae:	2300      	movs	r3, #0
 8016db0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8016db2:	4b44      	ldr	r3, [pc, #272]	; (8016ec4 <xTaskResumeAll+0x120>)
 8016db4:	681b      	ldr	r3, [r3, #0]
 8016db6:	2b00      	cmp	r3, #0
 8016db8:	d10a      	bne.n	8016dd0 <xTaskResumeAll+0x2c>
	__asm volatile
 8016dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016dbe:	f383 8811 	msr	BASEPRI, r3
 8016dc2:	f3bf 8f6f 	isb	sy
 8016dc6:	f3bf 8f4f 	dsb	sy
 8016dca:	603b      	str	r3, [r7, #0]
}
 8016dcc:	bf00      	nop
 8016dce:	e7fe      	b.n	8016dce <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8016dd0:	f001 f998 	bl	8018104 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8016dd4:	4b3b      	ldr	r3, [pc, #236]	; (8016ec4 <xTaskResumeAll+0x120>)
 8016dd6:	681b      	ldr	r3, [r3, #0]
 8016dd8:	3b01      	subs	r3, #1
 8016dda:	4a3a      	ldr	r2, [pc, #232]	; (8016ec4 <xTaskResumeAll+0x120>)
 8016ddc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016dde:	4b39      	ldr	r3, [pc, #228]	; (8016ec4 <xTaskResumeAll+0x120>)
 8016de0:	681b      	ldr	r3, [r3, #0]
 8016de2:	2b00      	cmp	r3, #0
 8016de4:	d166      	bne.n	8016eb4 <xTaskResumeAll+0x110>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8016de6:	4b38      	ldr	r3, [pc, #224]	; (8016ec8 <xTaskResumeAll+0x124>)
 8016de8:	681b      	ldr	r3, [r3, #0]
 8016dea:	2b00      	cmp	r3, #0
 8016dec:	d062      	beq.n	8016eb4 <xTaskResumeAll+0x110>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8016dee:	e033      	b.n	8016e58 <xTaskResumeAll+0xb4>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016df0:	4b36      	ldr	r3, [pc, #216]	; (8016ecc <xTaskResumeAll+0x128>)
 8016df2:	68db      	ldr	r3, [r3, #12]
 8016df4:	68db      	ldr	r3, [r3, #12]
 8016df6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8016df8:	68fb      	ldr	r3, [r7, #12]
 8016dfa:	3318      	adds	r3, #24
 8016dfc:	4618      	mov	r0, r3
 8016dfe:	f7fe fe2d 	bl	8015a5c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016e02:	68fb      	ldr	r3, [r7, #12]
 8016e04:	3304      	adds	r3, #4
 8016e06:	4618      	mov	r0, r3
 8016e08:	f7fe fe28 	bl	8015a5c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8016e0c:	68fb      	ldr	r3, [r7, #12]
 8016e0e:	4618      	mov	r0, r3
 8016e10:	f002 fdd2 	bl	80199b8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8016e14:	68fb      	ldr	r3, [r7, #12]
 8016e16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016e18:	4b2d      	ldr	r3, [pc, #180]	; (8016ed0 <xTaskResumeAll+0x12c>)
 8016e1a:	681b      	ldr	r3, [r3, #0]
 8016e1c:	429a      	cmp	r2, r3
 8016e1e:	d903      	bls.n	8016e28 <xTaskResumeAll+0x84>
 8016e20:	68fb      	ldr	r3, [r7, #12]
 8016e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016e24:	4a2a      	ldr	r2, [pc, #168]	; (8016ed0 <xTaskResumeAll+0x12c>)
 8016e26:	6013      	str	r3, [r2, #0]
 8016e28:	68fb      	ldr	r3, [r7, #12]
 8016e2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016e2c:	4613      	mov	r3, r2
 8016e2e:	009b      	lsls	r3, r3, #2
 8016e30:	4413      	add	r3, r2
 8016e32:	009b      	lsls	r3, r3, #2
 8016e34:	4a27      	ldr	r2, [pc, #156]	; (8016ed4 <xTaskResumeAll+0x130>)
 8016e36:	441a      	add	r2, r3
 8016e38:	68fb      	ldr	r3, [r7, #12]
 8016e3a:	3304      	adds	r3, #4
 8016e3c:	4619      	mov	r1, r3
 8016e3e:	4610      	mov	r0, r2
 8016e40:	f7fe fdaf 	bl	80159a2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8016e44:	68fb      	ldr	r3, [r7, #12]
 8016e46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016e48:	4b23      	ldr	r3, [pc, #140]	; (8016ed8 <xTaskResumeAll+0x134>)
 8016e4a:	681b      	ldr	r3, [r3, #0]
 8016e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016e4e:	429a      	cmp	r2, r3
 8016e50:	d302      	bcc.n	8016e58 <xTaskResumeAll+0xb4>
					{
						xYieldPending = pdTRUE;
 8016e52:	4b22      	ldr	r3, [pc, #136]	; (8016edc <xTaskResumeAll+0x138>)
 8016e54:	2201      	movs	r2, #1
 8016e56:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8016e58:	4b1c      	ldr	r3, [pc, #112]	; (8016ecc <xTaskResumeAll+0x128>)
 8016e5a:	681b      	ldr	r3, [r3, #0]
 8016e5c:	2b00      	cmp	r3, #0
 8016e5e:	d1c7      	bne.n	8016df0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8016e60:	68fb      	ldr	r3, [r7, #12]
 8016e62:	2b00      	cmp	r3, #0
 8016e64:	d001      	beq.n	8016e6a <xTaskResumeAll+0xc6>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8016e66:	f000 fbc7 	bl	80175f8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8016e6a:	4b1d      	ldr	r3, [pc, #116]	; (8016ee0 <xTaskResumeAll+0x13c>)
 8016e6c:	681b      	ldr	r3, [r3, #0]
 8016e6e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8016e70:	687b      	ldr	r3, [r7, #4]
 8016e72:	2b00      	cmp	r3, #0
 8016e74:	d010      	beq.n	8016e98 <xTaskResumeAll+0xf4>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8016e76:	f000 f859 	bl	8016f2c <xTaskIncrementTick>
 8016e7a:	4603      	mov	r3, r0
 8016e7c:	2b00      	cmp	r3, #0
 8016e7e:	d002      	beq.n	8016e86 <xTaskResumeAll+0xe2>
							{
								xYieldPending = pdTRUE;
 8016e80:	4b16      	ldr	r3, [pc, #88]	; (8016edc <xTaskResumeAll+0x138>)
 8016e82:	2201      	movs	r2, #1
 8016e84:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8016e86:	687b      	ldr	r3, [r7, #4]
 8016e88:	3b01      	subs	r3, #1
 8016e8a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8016e8c:	687b      	ldr	r3, [r7, #4]
 8016e8e:	2b00      	cmp	r3, #0
 8016e90:	d1f1      	bne.n	8016e76 <xTaskResumeAll+0xd2>

						xPendedTicks = 0;
 8016e92:	4b13      	ldr	r3, [pc, #76]	; (8016ee0 <xTaskResumeAll+0x13c>)
 8016e94:	2200      	movs	r2, #0
 8016e96:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8016e98:	4b10      	ldr	r3, [pc, #64]	; (8016edc <xTaskResumeAll+0x138>)
 8016e9a:	681b      	ldr	r3, [r3, #0]
 8016e9c:	2b00      	cmp	r3, #0
 8016e9e:	d009      	beq.n	8016eb4 <xTaskResumeAll+0x110>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8016ea0:	2301      	movs	r3, #1
 8016ea2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8016ea4:	4b0f      	ldr	r3, [pc, #60]	; (8016ee4 <xTaskResumeAll+0x140>)
 8016ea6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016eaa:	601a      	str	r2, [r3, #0]
 8016eac:	f3bf 8f4f 	dsb	sy
 8016eb0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8016eb4:	f001 f956 	bl	8018164 <vPortExitCritical>

	return xAlreadyYielded;
 8016eb8:	68bb      	ldr	r3, [r7, #8]
}
 8016eba:	4618      	mov	r0, r3
 8016ebc:	3710      	adds	r7, #16
 8016ebe:	46bd      	mov	sp, r7
 8016ec0:	bd80      	pop	{r7, pc}
 8016ec2:	bf00      	nop
 8016ec4:	20002448 	.word	0x20002448
 8016ec8:	20002420 	.word	0x20002420
 8016ecc:	200023e0 	.word	0x200023e0
 8016ed0:	20002428 	.word	0x20002428
 8016ed4:	20001f50 	.word	0x20001f50
 8016ed8:	20001f4c 	.word	0x20001f4c
 8016edc:	20002434 	.word	0x20002434
 8016ee0:	20002430 	.word	0x20002430
 8016ee4:	e000ed04 	.word	0xe000ed04

08016ee8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8016ee8:	b480      	push	{r7}
 8016eea:	b083      	sub	sp, #12
 8016eec:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8016eee:	4b05      	ldr	r3, [pc, #20]	; (8016f04 <xTaskGetTickCount+0x1c>)
 8016ef0:	681b      	ldr	r3, [r3, #0]
 8016ef2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8016ef4:	687b      	ldr	r3, [r7, #4]
}
 8016ef6:	4618      	mov	r0, r3
 8016ef8:	370c      	adds	r7, #12
 8016efa:	46bd      	mov	sp, r7
 8016efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f00:	4770      	bx	lr
 8016f02:	bf00      	nop
 8016f04:	20002424 	.word	0x20002424

08016f08 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8016f08:	b580      	push	{r7, lr}
 8016f0a:	b082      	sub	sp, #8
 8016f0c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8016f0e:	f001 f9db 	bl	80182c8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8016f12:	2300      	movs	r3, #0
 8016f14:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8016f16:	4b04      	ldr	r3, [pc, #16]	; (8016f28 <xTaskGetTickCountFromISR+0x20>)
 8016f18:	681b      	ldr	r3, [r3, #0]
 8016f1a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8016f1c:	683b      	ldr	r3, [r7, #0]
}
 8016f1e:	4618      	mov	r0, r3
 8016f20:	3708      	adds	r7, #8
 8016f22:	46bd      	mov	sp, r7
 8016f24:	bd80      	pop	{r7, pc}
 8016f26:	bf00      	nop
 8016f28:	20002424 	.word	0x20002424

08016f2c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8016f2c:	b580      	push	{r7, lr}
 8016f2e:	b086      	sub	sp, #24
 8016f30:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8016f32:	2300      	movs	r3, #0
 8016f34:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016f36:	4b51      	ldr	r3, [pc, #324]	; (801707c <xTaskIncrementTick+0x150>)
 8016f38:	681b      	ldr	r3, [r3, #0]
 8016f3a:	2b00      	cmp	r3, #0
 8016f3c:	f040 8093 	bne.w	8017066 <xTaskIncrementTick+0x13a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8016f40:	4b4f      	ldr	r3, [pc, #316]	; (8017080 <xTaskIncrementTick+0x154>)
 8016f42:	681b      	ldr	r3, [r3, #0]
 8016f44:	3301      	adds	r3, #1
 8016f46:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8016f48:	4a4d      	ldr	r2, [pc, #308]	; (8017080 <xTaskIncrementTick+0x154>)
 8016f4a:	693b      	ldr	r3, [r7, #16]
 8016f4c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8016f4e:	693b      	ldr	r3, [r7, #16]
 8016f50:	2b00      	cmp	r3, #0
 8016f52:	d120      	bne.n	8016f96 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8016f54:	4b4b      	ldr	r3, [pc, #300]	; (8017084 <xTaskIncrementTick+0x158>)
 8016f56:	681b      	ldr	r3, [r3, #0]
 8016f58:	681b      	ldr	r3, [r3, #0]
 8016f5a:	2b00      	cmp	r3, #0
 8016f5c:	d00a      	beq.n	8016f74 <xTaskIncrementTick+0x48>
	__asm volatile
 8016f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016f62:	f383 8811 	msr	BASEPRI, r3
 8016f66:	f3bf 8f6f 	isb	sy
 8016f6a:	f3bf 8f4f 	dsb	sy
 8016f6e:	603b      	str	r3, [r7, #0]
}
 8016f70:	bf00      	nop
 8016f72:	e7fe      	b.n	8016f72 <xTaskIncrementTick+0x46>
 8016f74:	4b43      	ldr	r3, [pc, #268]	; (8017084 <xTaskIncrementTick+0x158>)
 8016f76:	681b      	ldr	r3, [r3, #0]
 8016f78:	60fb      	str	r3, [r7, #12]
 8016f7a:	4b43      	ldr	r3, [pc, #268]	; (8017088 <xTaskIncrementTick+0x15c>)
 8016f7c:	681b      	ldr	r3, [r3, #0]
 8016f7e:	4a41      	ldr	r2, [pc, #260]	; (8017084 <xTaskIncrementTick+0x158>)
 8016f80:	6013      	str	r3, [r2, #0]
 8016f82:	4a41      	ldr	r2, [pc, #260]	; (8017088 <xTaskIncrementTick+0x15c>)
 8016f84:	68fb      	ldr	r3, [r7, #12]
 8016f86:	6013      	str	r3, [r2, #0]
 8016f88:	4b40      	ldr	r3, [pc, #256]	; (801708c <xTaskIncrementTick+0x160>)
 8016f8a:	681b      	ldr	r3, [r3, #0]
 8016f8c:	3301      	adds	r3, #1
 8016f8e:	4a3f      	ldr	r2, [pc, #252]	; (801708c <xTaskIncrementTick+0x160>)
 8016f90:	6013      	str	r3, [r2, #0]
 8016f92:	f000 fb31 	bl	80175f8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8016f96:	4b3e      	ldr	r3, [pc, #248]	; (8017090 <xTaskIncrementTick+0x164>)
 8016f98:	681b      	ldr	r3, [r3, #0]
 8016f9a:	693a      	ldr	r2, [r7, #16]
 8016f9c:	429a      	cmp	r2, r3
 8016f9e:	d34d      	bcc.n	801703c <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016fa0:	4b38      	ldr	r3, [pc, #224]	; (8017084 <xTaskIncrementTick+0x158>)
 8016fa2:	681b      	ldr	r3, [r3, #0]
 8016fa4:	681b      	ldr	r3, [r3, #0]
 8016fa6:	2b00      	cmp	r3, #0
 8016fa8:	d104      	bne.n	8016fb4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016faa:	4b39      	ldr	r3, [pc, #228]	; (8017090 <xTaskIncrementTick+0x164>)
 8016fac:	f04f 32ff 	mov.w	r2, #4294967295
 8016fb0:	601a      	str	r2, [r3, #0]
					break;
 8016fb2:	e043      	b.n	801703c <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016fb4:	4b33      	ldr	r3, [pc, #204]	; (8017084 <xTaskIncrementTick+0x158>)
 8016fb6:	681b      	ldr	r3, [r3, #0]
 8016fb8:	68db      	ldr	r3, [r3, #12]
 8016fba:	68db      	ldr	r3, [r3, #12]
 8016fbc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8016fbe:	68bb      	ldr	r3, [r7, #8]
 8016fc0:	685b      	ldr	r3, [r3, #4]
 8016fc2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8016fc4:	693a      	ldr	r2, [r7, #16]
 8016fc6:	687b      	ldr	r3, [r7, #4]
 8016fc8:	429a      	cmp	r2, r3
 8016fca:	d203      	bcs.n	8016fd4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8016fcc:	4a30      	ldr	r2, [pc, #192]	; (8017090 <xTaskIncrementTick+0x164>)
 8016fce:	687b      	ldr	r3, [r7, #4]
 8016fd0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8016fd2:	e033      	b.n	801703c <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016fd4:	68bb      	ldr	r3, [r7, #8]
 8016fd6:	3304      	adds	r3, #4
 8016fd8:	4618      	mov	r0, r3
 8016fda:	f7fe fd3f 	bl	8015a5c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8016fde:	68bb      	ldr	r3, [r7, #8]
 8016fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016fe2:	2b00      	cmp	r3, #0
 8016fe4:	d004      	beq.n	8016ff0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8016fe6:	68bb      	ldr	r3, [r7, #8]
 8016fe8:	3318      	adds	r3, #24
 8016fea:	4618      	mov	r0, r3
 8016fec:	f7fe fd36 	bl	8015a5c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8016ff0:	68bb      	ldr	r3, [r7, #8]
 8016ff2:	4618      	mov	r0, r3
 8016ff4:	f002 fce0 	bl	80199b8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8016ff8:	68bb      	ldr	r3, [r7, #8]
 8016ffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016ffc:	4b25      	ldr	r3, [pc, #148]	; (8017094 <xTaskIncrementTick+0x168>)
 8016ffe:	681b      	ldr	r3, [r3, #0]
 8017000:	429a      	cmp	r2, r3
 8017002:	d903      	bls.n	801700c <xTaskIncrementTick+0xe0>
 8017004:	68bb      	ldr	r3, [r7, #8]
 8017006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017008:	4a22      	ldr	r2, [pc, #136]	; (8017094 <xTaskIncrementTick+0x168>)
 801700a:	6013      	str	r3, [r2, #0]
 801700c:	68bb      	ldr	r3, [r7, #8]
 801700e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017010:	4613      	mov	r3, r2
 8017012:	009b      	lsls	r3, r3, #2
 8017014:	4413      	add	r3, r2
 8017016:	009b      	lsls	r3, r3, #2
 8017018:	4a1f      	ldr	r2, [pc, #124]	; (8017098 <xTaskIncrementTick+0x16c>)
 801701a:	441a      	add	r2, r3
 801701c:	68bb      	ldr	r3, [r7, #8]
 801701e:	3304      	adds	r3, #4
 8017020:	4619      	mov	r1, r3
 8017022:	4610      	mov	r0, r2
 8017024:	f7fe fcbd 	bl	80159a2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8017028:	68bb      	ldr	r3, [r7, #8]
 801702a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801702c:	4b1b      	ldr	r3, [pc, #108]	; (801709c <xTaskIncrementTick+0x170>)
 801702e:	681b      	ldr	r3, [r3, #0]
 8017030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017032:	429a      	cmp	r2, r3
 8017034:	d3b4      	bcc.n	8016fa0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8017036:	2301      	movs	r3, #1
 8017038:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801703a:	e7b1      	b.n	8016fa0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801703c:	4b17      	ldr	r3, [pc, #92]	; (801709c <xTaskIncrementTick+0x170>)
 801703e:	681b      	ldr	r3, [r3, #0]
 8017040:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017042:	4915      	ldr	r1, [pc, #84]	; (8017098 <xTaskIncrementTick+0x16c>)
 8017044:	4613      	mov	r3, r2
 8017046:	009b      	lsls	r3, r3, #2
 8017048:	4413      	add	r3, r2
 801704a:	009b      	lsls	r3, r3, #2
 801704c:	440b      	add	r3, r1
 801704e:	681b      	ldr	r3, [r3, #0]
 8017050:	2b01      	cmp	r3, #1
 8017052:	d901      	bls.n	8017058 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8017054:	2301      	movs	r3, #1
 8017056:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8017058:	4b11      	ldr	r3, [pc, #68]	; (80170a0 <xTaskIncrementTick+0x174>)
 801705a:	681b      	ldr	r3, [r3, #0]
 801705c:	2b00      	cmp	r3, #0
 801705e:	d007      	beq.n	8017070 <xTaskIncrementTick+0x144>
			{
				xSwitchRequired = pdTRUE;
 8017060:	2301      	movs	r3, #1
 8017062:	617b      	str	r3, [r7, #20]
 8017064:	e004      	b.n	8017070 <xTaskIncrementTick+0x144>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8017066:	4b0f      	ldr	r3, [pc, #60]	; (80170a4 <xTaskIncrementTick+0x178>)
 8017068:	681b      	ldr	r3, [r3, #0]
 801706a:	3301      	adds	r3, #1
 801706c:	4a0d      	ldr	r2, [pc, #52]	; (80170a4 <xTaskIncrementTick+0x178>)
 801706e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8017070:	697b      	ldr	r3, [r7, #20]
}
 8017072:	4618      	mov	r0, r3
 8017074:	3718      	adds	r7, #24
 8017076:	46bd      	mov	sp, r7
 8017078:	bd80      	pop	{r7, pc}
 801707a:	bf00      	nop
 801707c:	20002448 	.word	0x20002448
 8017080:	20002424 	.word	0x20002424
 8017084:	200023d8 	.word	0x200023d8
 8017088:	200023dc 	.word	0x200023dc
 801708c:	20002438 	.word	0x20002438
 8017090:	20002440 	.word	0x20002440
 8017094:	20002428 	.word	0x20002428
 8017098:	20001f50 	.word	0x20001f50
 801709c:	20001f4c 	.word	0x20001f4c
 80170a0:	20002434 	.word	0x20002434
 80170a4:	20002430 	.word	0x20002430

080170a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80170a8:	b580      	push	{r7, lr}
 80170aa:	b084      	sub	sp, #16
 80170ac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80170ae:	4b33      	ldr	r3, [pc, #204]	; (801717c <vTaskSwitchContext+0xd4>)
 80170b0:	681b      	ldr	r3, [r3, #0]
 80170b2:	2b00      	cmp	r3, #0
 80170b4:	d003      	beq.n	80170be <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80170b6:	4b32      	ldr	r3, [pc, #200]	; (8017180 <vTaskSwitchContext+0xd8>)
 80170b8:	2201      	movs	r2, #1
 80170ba:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80170bc:	e059      	b.n	8017172 <vTaskSwitchContext+0xca>
		xYieldPending = pdFALSE;
 80170be:	4b30      	ldr	r3, [pc, #192]	; (8017180 <vTaskSwitchContext+0xd8>)
 80170c0:	2200      	movs	r2, #0
 80170c2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80170c4:	4b2f      	ldr	r3, [pc, #188]	; (8017184 <vTaskSwitchContext+0xdc>)
 80170c6:	681b      	ldr	r3, [r3, #0]
 80170c8:	60fb      	str	r3, [r7, #12]
 80170ca:	e010      	b.n	80170ee <vTaskSwitchContext+0x46>
 80170cc:	68fb      	ldr	r3, [r7, #12]
 80170ce:	2b00      	cmp	r3, #0
 80170d0:	d10a      	bne.n	80170e8 <vTaskSwitchContext+0x40>
	__asm volatile
 80170d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80170d6:	f383 8811 	msr	BASEPRI, r3
 80170da:	f3bf 8f6f 	isb	sy
 80170de:	f3bf 8f4f 	dsb	sy
 80170e2:	607b      	str	r3, [r7, #4]
}
 80170e4:	bf00      	nop
 80170e6:	e7fe      	b.n	80170e6 <vTaskSwitchContext+0x3e>
 80170e8:	68fb      	ldr	r3, [r7, #12]
 80170ea:	3b01      	subs	r3, #1
 80170ec:	60fb      	str	r3, [r7, #12]
 80170ee:	4926      	ldr	r1, [pc, #152]	; (8017188 <vTaskSwitchContext+0xe0>)
 80170f0:	68fa      	ldr	r2, [r7, #12]
 80170f2:	4613      	mov	r3, r2
 80170f4:	009b      	lsls	r3, r3, #2
 80170f6:	4413      	add	r3, r2
 80170f8:	009b      	lsls	r3, r3, #2
 80170fa:	440b      	add	r3, r1
 80170fc:	681b      	ldr	r3, [r3, #0]
 80170fe:	2b00      	cmp	r3, #0
 8017100:	d0e4      	beq.n	80170cc <vTaskSwitchContext+0x24>
 8017102:	68fa      	ldr	r2, [r7, #12]
 8017104:	4613      	mov	r3, r2
 8017106:	009b      	lsls	r3, r3, #2
 8017108:	4413      	add	r3, r2
 801710a:	009b      	lsls	r3, r3, #2
 801710c:	4a1e      	ldr	r2, [pc, #120]	; (8017188 <vTaskSwitchContext+0xe0>)
 801710e:	4413      	add	r3, r2
 8017110:	60bb      	str	r3, [r7, #8]
 8017112:	68bb      	ldr	r3, [r7, #8]
 8017114:	685b      	ldr	r3, [r3, #4]
 8017116:	685a      	ldr	r2, [r3, #4]
 8017118:	68bb      	ldr	r3, [r7, #8]
 801711a:	605a      	str	r2, [r3, #4]
 801711c:	68bb      	ldr	r3, [r7, #8]
 801711e:	685a      	ldr	r2, [r3, #4]
 8017120:	68bb      	ldr	r3, [r7, #8]
 8017122:	3308      	adds	r3, #8
 8017124:	429a      	cmp	r2, r3
 8017126:	d104      	bne.n	8017132 <vTaskSwitchContext+0x8a>
 8017128:	68bb      	ldr	r3, [r7, #8]
 801712a:	685b      	ldr	r3, [r3, #4]
 801712c:	685a      	ldr	r2, [r3, #4]
 801712e:	68bb      	ldr	r3, [r7, #8]
 8017130:	605a      	str	r2, [r3, #4]
 8017132:	68bb      	ldr	r3, [r7, #8]
 8017134:	685b      	ldr	r3, [r3, #4]
 8017136:	68db      	ldr	r3, [r3, #12]
 8017138:	4a14      	ldr	r2, [pc, #80]	; (801718c <vTaskSwitchContext+0xe4>)
 801713a:	6013      	str	r3, [r2, #0]
 801713c:	4a11      	ldr	r2, [pc, #68]	; (8017184 <vTaskSwitchContext+0xdc>)
 801713e:	68fb      	ldr	r3, [r7, #12]
 8017140:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8017142:	4b12      	ldr	r3, [pc, #72]	; (801718c <vTaskSwitchContext+0xe4>)
 8017144:	681b      	ldr	r3, [r3, #0]
 8017146:	3334      	adds	r3, #52	; 0x34
 8017148:	2205      	movs	r2, #5
 801714a:	4911      	ldr	r1, [pc, #68]	; (8017190 <vTaskSwitchContext+0xe8>)
 801714c:	4618      	mov	r0, r3
 801714e:	f002 fe07 	bl	8019d60 <memcmp>
 8017152:	4603      	mov	r3, r0
 8017154:	2b00      	cmp	r3, #0
 8017156:	d005      	beq.n	8017164 <vTaskSwitchContext+0xbc>
 8017158:	4b0c      	ldr	r3, [pc, #48]	; (801718c <vTaskSwitchContext+0xe4>)
 801715a:	681b      	ldr	r3, [r3, #0]
 801715c:	4618      	mov	r0, r3
 801715e:	f002 fbe9 	bl	8019934 <SEGGER_SYSVIEW_OnTaskStartExec>
 8017162:	e001      	b.n	8017168 <vTaskSwitchContext+0xc0>
 8017164:	f002 fb88 	bl	8019878 <SEGGER_SYSVIEW_OnIdle>
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8017168:	4b08      	ldr	r3, [pc, #32]	; (801718c <vTaskSwitchContext+0xe4>)
 801716a:	681b      	ldr	r3, [r3, #0]
 801716c:	3364      	adds	r3, #100	; 0x64
 801716e:	4a09      	ldr	r2, [pc, #36]	; (8017194 <vTaskSwitchContext+0xec>)
 8017170:	6013      	str	r3, [r2, #0]
}
 8017172:	bf00      	nop
 8017174:	3710      	adds	r7, #16
 8017176:	46bd      	mov	sp, r7
 8017178:	bd80      	pop	{r7, pc}
 801717a:	bf00      	nop
 801717c:	20002448 	.word	0x20002448
 8017180:	20002434 	.word	0x20002434
 8017184:	20002428 	.word	0x20002428
 8017188:	20001f50 	.word	0x20001f50
 801718c:	20001f4c 	.word	0x20001f4c
 8017190:	0801aaa4 	.word	0x0801aaa4
 8017194:	200013c4 	.word	0x200013c4

08017198 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8017198:	b580      	push	{r7, lr}
 801719a:	b084      	sub	sp, #16
 801719c:	af00      	add	r7, sp, #0
 801719e:	6078      	str	r0, [r7, #4]
 80171a0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80171a2:	687b      	ldr	r3, [r7, #4]
 80171a4:	2b00      	cmp	r3, #0
 80171a6:	d10a      	bne.n	80171be <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80171a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80171ac:	f383 8811 	msr	BASEPRI, r3
 80171b0:	f3bf 8f6f 	isb	sy
 80171b4:	f3bf 8f4f 	dsb	sy
 80171b8:	60fb      	str	r3, [r7, #12]
}
 80171ba:	bf00      	nop
 80171bc:	e7fe      	b.n	80171bc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80171be:	4b07      	ldr	r3, [pc, #28]	; (80171dc <vTaskPlaceOnEventList+0x44>)
 80171c0:	681b      	ldr	r3, [r3, #0]
 80171c2:	3318      	adds	r3, #24
 80171c4:	4619      	mov	r1, r3
 80171c6:	6878      	ldr	r0, [r7, #4]
 80171c8:	f7fe fc0f 	bl	80159ea <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80171cc:	2101      	movs	r1, #1
 80171ce:	6838      	ldr	r0, [r7, #0]
 80171d0:	f000 fac6 	bl	8017760 <prvAddCurrentTaskToDelayedList>
}
 80171d4:	bf00      	nop
 80171d6:	3710      	adds	r7, #16
 80171d8:	46bd      	mov	sp, r7
 80171da:	bd80      	pop	{r7, pc}
 80171dc:	20001f4c 	.word	0x20001f4c

080171e0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80171e0:	b580      	push	{r7, lr}
 80171e2:	b086      	sub	sp, #24
 80171e4:	af00      	add	r7, sp, #0
 80171e6:	60f8      	str	r0, [r7, #12]
 80171e8:	60b9      	str	r1, [r7, #8]
 80171ea:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80171ec:	68fb      	ldr	r3, [r7, #12]
 80171ee:	2b00      	cmp	r3, #0
 80171f0:	d10a      	bne.n	8017208 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80171f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80171f6:	f383 8811 	msr	BASEPRI, r3
 80171fa:	f3bf 8f6f 	isb	sy
 80171fe:	f3bf 8f4f 	dsb	sy
 8017202:	617b      	str	r3, [r7, #20]
}
 8017204:	bf00      	nop
 8017206:	e7fe      	b.n	8017206 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8017208:	4b0b      	ldr	r3, [pc, #44]	; (8017238 <vTaskPlaceOnEventListRestricted+0x58>)
 801720a:	681b      	ldr	r3, [r3, #0]
 801720c:	3318      	adds	r3, #24
 801720e:	4619      	mov	r1, r3
 8017210:	68f8      	ldr	r0, [r7, #12]
 8017212:	f7fe fbc6 	bl	80159a2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8017216:	687b      	ldr	r3, [r7, #4]
 8017218:	2b00      	cmp	r3, #0
 801721a:	d002      	beq.n	8017222 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 801721c:	f04f 33ff 	mov.w	r3, #4294967295
 8017220:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8017222:	2024      	movs	r0, #36	; 0x24
 8017224:	f001 fea4 	bl	8018f70 <SEGGER_SYSVIEW_RecordVoid>
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8017228:	6879      	ldr	r1, [r7, #4]
 801722a:	68b8      	ldr	r0, [r7, #8]
 801722c:	f000 fa98 	bl	8017760 <prvAddCurrentTaskToDelayedList>
	}
 8017230:	bf00      	nop
 8017232:	3718      	adds	r7, #24
 8017234:	46bd      	mov	sp, r7
 8017236:	bd80      	pop	{r7, pc}
 8017238:	20001f4c 	.word	0x20001f4c

0801723c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801723c:	b580      	push	{r7, lr}
 801723e:	b086      	sub	sp, #24
 8017240:	af00      	add	r7, sp, #0
 8017242:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017244:	687b      	ldr	r3, [r7, #4]
 8017246:	68db      	ldr	r3, [r3, #12]
 8017248:	68db      	ldr	r3, [r3, #12]
 801724a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801724c:	693b      	ldr	r3, [r7, #16]
 801724e:	2b00      	cmp	r3, #0
 8017250:	d10a      	bne.n	8017268 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8017252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017256:	f383 8811 	msr	BASEPRI, r3
 801725a:	f3bf 8f6f 	isb	sy
 801725e:	f3bf 8f4f 	dsb	sy
 8017262:	60fb      	str	r3, [r7, #12]
}
 8017264:	bf00      	nop
 8017266:	e7fe      	b.n	8017266 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8017268:	693b      	ldr	r3, [r7, #16]
 801726a:	3318      	adds	r3, #24
 801726c:	4618      	mov	r0, r3
 801726e:	f7fe fbf5 	bl	8015a5c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017272:	4b20      	ldr	r3, [pc, #128]	; (80172f4 <xTaskRemoveFromEventList+0xb8>)
 8017274:	681b      	ldr	r3, [r3, #0]
 8017276:	2b00      	cmp	r3, #0
 8017278:	d121      	bne.n	80172be <xTaskRemoveFromEventList+0x82>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801727a:	693b      	ldr	r3, [r7, #16]
 801727c:	3304      	adds	r3, #4
 801727e:	4618      	mov	r0, r3
 8017280:	f7fe fbec 	bl	8015a5c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8017284:	693b      	ldr	r3, [r7, #16]
 8017286:	4618      	mov	r0, r3
 8017288:	f002 fb96 	bl	80199b8 <SEGGER_SYSVIEW_OnTaskStartReady>
 801728c:	693b      	ldr	r3, [r7, #16]
 801728e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017290:	4b19      	ldr	r3, [pc, #100]	; (80172f8 <xTaskRemoveFromEventList+0xbc>)
 8017292:	681b      	ldr	r3, [r3, #0]
 8017294:	429a      	cmp	r2, r3
 8017296:	d903      	bls.n	80172a0 <xTaskRemoveFromEventList+0x64>
 8017298:	693b      	ldr	r3, [r7, #16]
 801729a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801729c:	4a16      	ldr	r2, [pc, #88]	; (80172f8 <xTaskRemoveFromEventList+0xbc>)
 801729e:	6013      	str	r3, [r2, #0]
 80172a0:	693b      	ldr	r3, [r7, #16]
 80172a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80172a4:	4613      	mov	r3, r2
 80172a6:	009b      	lsls	r3, r3, #2
 80172a8:	4413      	add	r3, r2
 80172aa:	009b      	lsls	r3, r3, #2
 80172ac:	4a13      	ldr	r2, [pc, #76]	; (80172fc <xTaskRemoveFromEventList+0xc0>)
 80172ae:	441a      	add	r2, r3
 80172b0:	693b      	ldr	r3, [r7, #16]
 80172b2:	3304      	adds	r3, #4
 80172b4:	4619      	mov	r1, r3
 80172b6:	4610      	mov	r0, r2
 80172b8:	f7fe fb73 	bl	80159a2 <vListInsertEnd>
 80172bc:	e005      	b.n	80172ca <xTaskRemoveFromEventList+0x8e>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80172be:	693b      	ldr	r3, [r7, #16]
 80172c0:	3318      	adds	r3, #24
 80172c2:	4619      	mov	r1, r3
 80172c4:	480e      	ldr	r0, [pc, #56]	; (8017300 <xTaskRemoveFromEventList+0xc4>)
 80172c6:	f7fe fb6c 	bl	80159a2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80172ca:	693b      	ldr	r3, [r7, #16]
 80172cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80172ce:	4b0d      	ldr	r3, [pc, #52]	; (8017304 <xTaskRemoveFromEventList+0xc8>)
 80172d0:	681b      	ldr	r3, [r3, #0]
 80172d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80172d4:	429a      	cmp	r2, r3
 80172d6:	d905      	bls.n	80172e4 <xTaskRemoveFromEventList+0xa8>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80172d8:	2301      	movs	r3, #1
 80172da:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80172dc:	4b0a      	ldr	r3, [pc, #40]	; (8017308 <xTaskRemoveFromEventList+0xcc>)
 80172de:	2201      	movs	r2, #1
 80172e0:	601a      	str	r2, [r3, #0]
 80172e2:	e001      	b.n	80172e8 <xTaskRemoveFromEventList+0xac>
	}
	else
	{
		xReturn = pdFALSE;
 80172e4:	2300      	movs	r3, #0
 80172e6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80172e8:	697b      	ldr	r3, [r7, #20]
}
 80172ea:	4618      	mov	r0, r3
 80172ec:	3718      	adds	r7, #24
 80172ee:	46bd      	mov	sp, r7
 80172f0:	bd80      	pop	{r7, pc}
 80172f2:	bf00      	nop
 80172f4:	20002448 	.word	0x20002448
 80172f8:	20002428 	.word	0x20002428
 80172fc:	20001f50 	.word	0x20001f50
 8017300:	200023e0 	.word	0x200023e0
 8017304:	20001f4c 	.word	0x20001f4c
 8017308:	20002434 	.word	0x20002434

0801730c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801730c:	b480      	push	{r7}
 801730e:	b083      	sub	sp, #12
 8017310:	af00      	add	r7, sp, #0
 8017312:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8017314:	4b06      	ldr	r3, [pc, #24]	; (8017330 <vTaskInternalSetTimeOutState+0x24>)
 8017316:	681a      	ldr	r2, [r3, #0]
 8017318:	687b      	ldr	r3, [r7, #4]
 801731a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801731c:	4b05      	ldr	r3, [pc, #20]	; (8017334 <vTaskInternalSetTimeOutState+0x28>)
 801731e:	681a      	ldr	r2, [r3, #0]
 8017320:	687b      	ldr	r3, [r7, #4]
 8017322:	605a      	str	r2, [r3, #4]
}
 8017324:	bf00      	nop
 8017326:	370c      	adds	r7, #12
 8017328:	46bd      	mov	sp, r7
 801732a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801732e:	4770      	bx	lr
 8017330:	20002438 	.word	0x20002438
 8017334:	20002424 	.word	0x20002424

08017338 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8017338:	b580      	push	{r7, lr}
 801733a:	b088      	sub	sp, #32
 801733c:	af00      	add	r7, sp, #0
 801733e:	6078      	str	r0, [r7, #4]
 8017340:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8017342:	687b      	ldr	r3, [r7, #4]
 8017344:	2b00      	cmp	r3, #0
 8017346:	d10a      	bne.n	801735e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8017348:	f04f 0350 	mov.w	r3, #80	; 0x50
 801734c:	f383 8811 	msr	BASEPRI, r3
 8017350:	f3bf 8f6f 	isb	sy
 8017354:	f3bf 8f4f 	dsb	sy
 8017358:	613b      	str	r3, [r7, #16]
}
 801735a:	bf00      	nop
 801735c:	e7fe      	b.n	801735c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801735e:	683b      	ldr	r3, [r7, #0]
 8017360:	2b00      	cmp	r3, #0
 8017362:	d10a      	bne.n	801737a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8017364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017368:	f383 8811 	msr	BASEPRI, r3
 801736c:	f3bf 8f6f 	isb	sy
 8017370:	f3bf 8f4f 	dsb	sy
 8017374:	60fb      	str	r3, [r7, #12]
}
 8017376:	bf00      	nop
 8017378:	e7fe      	b.n	8017378 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801737a:	f000 fec3 	bl	8018104 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801737e:	4b1d      	ldr	r3, [pc, #116]	; (80173f4 <xTaskCheckForTimeOut+0xbc>)
 8017380:	681b      	ldr	r3, [r3, #0]
 8017382:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8017384:	687b      	ldr	r3, [r7, #4]
 8017386:	685b      	ldr	r3, [r3, #4]
 8017388:	69ba      	ldr	r2, [r7, #24]
 801738a:	1ad3      	subs	r3, r2, r3
 801738c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801738e:	683b      	ldr	r3, [r7, #0]
 8017390:	681b      	ldr	r3, [r3, #0]
 8017392:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017396:	d102      	bne.n	801739e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8017398:	2300      	movs	r3, #0
 801739a:	61fb      	str	r3, [r7, #28]
 801739c:	e023      	b.n	80173e6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801739e:	687b      	ldr	r3, [r7, #4]
 80173a0:	681a      	ldr	r2, [r3, #0]
 80173a2:	4b15      	ldr	r3, [pc, #84]	; (80173f8 <xTaskCheckForTimeOut+0xc0>)
 80173a4:	681b      	ldr	r3, [r3, #0]
 80173a6:	429a      	cmp	r2, r3
 80173a8:	d007      	beq.n	80173ba <xTaskCheckForTimeOut+0x82>
 80173aa:	687b      	ldr	r3, [r7, #4]
 80173ac:	685b      	ldr	r3, [r3, #4]
 80173ae:	69ba      	ldr	r2, [r7, #24]
 80173b0:	429a      	cmp	r2, r3
 80173b2:	d302      	bcc.n	80173ba <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80173b4:	2301      	movs	r3, #1
 80173b6:	61fb      	str	r3, [r7, #28]
 80173b8:	e015      	b.n	80173e6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80173ba:	683b      	ldr	r3, [r7, #0]
 80173bc:	681b      	ldr	r3, [r3, #0]
 80173be:	697a      	ldr	r2, [r7, #20]
 80173c0:	429a      	cmp	r2, r3
 80173c2:	d20b      	bcs.n	80173dc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80173c4:	683b      	ldr	r3, [r7, #0]
 80173c6:	681a      	ldr	r2, [r3, #0]
 80173c8:	697b      	ldr	r3, [r7, #20]
 80173ca:	1ad2      	subs	r2, r2, r3
 80173cc:	683b      	ldr	r3, [r7, #0]
 80173ce:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80173d0:	6878      	ldr	r0, [r7, #4]
 80173d2:	f7ff ff9b 	bl	801730c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80173d6:	2300      	movs	r3, #0
 80173d8:	61fb      	str	r3, [r7, #28]
 80173da:	e004      	b.n	80173e6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80173dc:	683b      	ldr	r3, [r7, #0]
 80173de:	2200      	movs	r2, #0
 80173e0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80173e2:	2301      	movs	r3, #1
 80173e4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80173e6:	f000 febd 	bl	8018164 <vPortExitCritical>

	return xReturn;
 80173ea:	69fb      	ldr	r3, [r7, #28]
}
 80173ec:	4618      	mov	r0, r3
 80173ee:	3720      	adds	r7, #32
 80173f0:	46bd      	mov	sp, r7
 80173f2:	bd80      	pop	{r7, pc}
 80173f4:	20002424 	.word	0x20002424
 80173f8:	20002438 	.word	0x20002438

080173fc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80173fc:	b480      	push	{r7}
 80173fe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8017400:	4b03      	ldr	r3, [pc, #12]	; (8017410 <vTaskMissedYield+0x14>)
 8017402:	2201      	movs	r2, #1
 8017404:	601a      	str	r2, [r3, #0]
}
 8017406:	bf00      	nop
 8017408:	46bd      	mov	sp, r7
 801740a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801740e:	4770      	bx	lr
 8017410:	20002434 	.word	0x20002434

08017414 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8017414:	b580      	push	{r7, lr}
 8017416:	b082      	sub	sp, #8
 8017418:	af00      	add	r7, sp, #0
 801741a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801741c:	f000 f852 	bl	80174c4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8017420:	4b06      	ldr	r3, [pc, #24]	; (801743c <prvIdleTask+0x28>)
 8017422:	681b      	ldr	r3, [r3, #0]
 8017424:	2b01      	cmp	r3, #1
 8017426:	d9f9      	bls.n	801741c <prvIdleTask+0x8>
			{
				taskYIELD();
 8017428:	4b05      	ldr	r3, [pc, #20]	; (8017440 <prvIdleTask+0x2c>)
 801742a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801742e:	601a      	str	r2, [r3, #0]
 8017430:	f3bf 8f4f 	dsb	sy
 8017434:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8017438:	e7f0      	b.n	801741c <prvIdleTask+0x8>
 801743a:	bf00      	nop
 801743c:	20001f50 	.word	0x20001f50
 8017440:	e000ed04 	.word	0xe000ed04

08017444 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8017444:	b580      	push	{r7, lr}
 8017446:	b082      	sub	sp, #8
 8017448:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801744a:	2300      	movs	r3, #0
 801744c:	607b      	str	r3, [r7, #4]
 801744e:	e00c      	b.n	801746a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8017450:	687a      	ldr	r2, [r7, #4]
 8017452:	4613      	mov	r3, r2
 8017454:	009b      	lsls	r3, r3, #2
 8017456:	4413      	add	r3, r2
 8017458:	009b      	lsls	r3, r3, #2
 801745a:	4a12      	ldr	r2, [pc, #72]	; (80174a4 <prvInitialiseTaskLists+0x60>)
 801745c:	4413      	add	r3, r2
 801745e:	4618      	mov	r0, r3
 8017460:	f7fe fa72 	bl	8015948 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8017464:	687b      	ldr	r3, [r7, #4]
 8017466:	3301      	adds	r3, #1
 8017468:	607b      	str	r3, [r7, #4]
 801746a:	687b      	ldr	r3, [r7, #4]
 801746c:	2b37      	cmp	r3, #55	; 0x37
 801746e:	d9ef      	bls.n	8017450 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8017470:	480d      	ldr	r0, [pc, #52]	; (80174a8 <prvInitialiseTaskLists+0x64>)
 8017472:	f7fe fa69 	bl	8015948 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8017476:	480d      	ldr	r0, [pc, #52]	; (80174ac <prvInitialiseTaskLists+0x68>)
 8017478:	f7fe fa66 	bl	8015948 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801747c:	480c      	ldr	r0, [pc, #48]	; (80174b0 <prvInitialiseTaskLists+0x6c>)
 801747e:	f7fe fa63 	bl	8015948 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8017482:	480c      	ldr	r0, [pc, #48]	; (80174b4 <prvInitialiseTaskLists+0x70>)
 8017484:	f7fe fa60 	bl	8015948 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8017488:	480b      	ldr	r0, [pc, #44]	; (80174b8 <prvInitialiseTaskLists+0x74>)
 801748a:	f7fe fa5d 	bl	8015948 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801748e:	4b0b      	ldr	r3, [pc, #44]	; (80174bc <prvInitialiseTaskLists+0x78>)
 8017490:	4a05      	ldr	r2, [pc, #20]	; (80174a8 <prvInitialiseTaskLists+0x64>)
 8017492:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8017494:	4b0a      	ldr	r3, [pc, #40]	; (80174c0 <prvInitialiseTaskLists+0x7c>)
 8017496:	4a05      	ldr	r2, [pc, #20]	; (80174ac <prvInitialiseTaskLists+0x68>)
 8017498:	601a      	str	r2, [r3, #0]
}
 801749a:	bf00      	nop
 801749c:	3708      	adds	r7, #8
 801749e:	46bd      	mov	sp, r7
 80174a0:	bd80      	pop	{r7, pc}
 80174a2:	bf00      	nop
 80174a4:	20001f50 	.word	0x20001f50
 80174a8:	200023b0 	.word	0x200023b0
 80174ac:	200023c4 	.word	0x200023c4
 80174b0:	200023e0 	.word	0x200023e0
 80174b4:	200023f4 	.word	0x200023f4
 80174b8:	2000240c 	.word	0x2000240c
 80174bc:	200023d8 	.word	0x200023d8
 80174c0:	200023dc 	.word	0x200023dc

080174c4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80174c4:	b580      	push	{r7, lr}
 80174c6:	b082      	sub	sp, #8
 80174c8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80174ca:	e019      	b.n	8017500 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80174cc:	f000 fe1a 	bl	8018104 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80174d0:	4b10      	ldr	r3, [pc, #64]	; (8017514 <prvCheckTasksWaitingTermination+0x50>)
 80174d2:	68db      	ldr	r3, [r3, #12]
 80174d4:	68db      	ldr	r3, [r3, #12]
 80174d6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80174d8:	687b      	ldr	r3, [r7, #4]
 80174da:	3304      	adds	r3, #4
 80174dc:	4618      	mov	r0, r3
 80174de:	f7fe fabd 	bl	8015a5c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80174e2:	4b0d      	ldr	r3, [pc, #52]	; (8017518 <prvCheckTasksWaitingTermination+0x54>)
 80174e4:	681b      	ldr	r3, [r3, #0]
 80174e6:	3b01      	subs	r3, #1
 80174e8:	4a0b      	ldr	r2, [pc, #44]	; (8017518 <prvCheckTasksWaitingTermination+0x54>)
 80174ea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80174ec:	4b0b      	ldr	r3, [pc, #44]	; (801751c <prvCheckTasksWaitingTermination+0x58>)
 80174ee:	681b      	ldr	r3, [r3, #0]
 80174f0:	3b01      	subs	r3, #1
 80174f2:	4a0a      	ldr	r2, [pc, #40]	; (801751c <prvCheckTasksWaitingTermination+0x58>)
 80174f4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80174f6:	f000 fe35 	bl	8018164 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80174fa:	6878      	ldr	r0, [r7, #4]
 80174fc:	f000 f848 	bl	8017590 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8017500:	4b06      	ldr	r3, [pc, #24]	; (801751c <prvCheckTasksWaitingTermination+0x58>)
 8017502:	681b      	ldr	r3, [r3, #0]
 8017504:	2b00      	cmp	r3, #0
 8017506:	d1e1      	bne.n	80174cc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8017508:	bf00      	nop
 801750a:	bf00      	nop
 801750c:	3708      	adds	r7, #8
 801750e:	46bd      	mov	sp, r7
 8017510:	bd80      	pop	{r7, pc}
 8017512:	bf00      	nop
 8017514:	200023f4 	.word	0x200023f4
 8017518:	20002420 	.word	0x20002420
 801751c:	20002408 	.word	0x20002408

08017520 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8017520:	b480      	push	{r7}
 8017522:	b085      	sub	sp, #20
 8017524:	af00      	add	r7, sp, #0
 8017526:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8017528:	2300      	movs	r3, #0
 801752a:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 801752c:	e005      	b.n	801753a <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 801752e:	687b      	ldr	r3, [r7, #4]
 8017530:	3301      	adds	r3, #1
 8017532:	607b      	str	r3, [r7, #4]
			ulCount++;
 8017534:	68fb      	ldr	r3, [r7, #12]
 8017536:	3301      	adds	r3, #1
 8017538:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 801753a:	687b      	ldr	r3, [r7, #4]
 801753c:	781b      	ldrb	r3, [r3, #0]
 801753e:	2ba5      	cmp	r3, #165	; 0xa5
 8017540:	d0f5      	beq.n	801752e <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8017542:	68fb      	ldr	r3, [r7, #12]
 8017544:	089b      	lsrs	r3, r3, #2
 8017546:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8017548:	68fb      	ldr	r3, [r7, #12]
 801754a:	b29b      	uxth	r3, r3
	}
 801754c:	4618      	mov	r0, r3
 801754e:	3714      	adds	r7, #20
 8017550:	46bd      	mov	sp, r7
 8017552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017556:	4770      	bx	lr

08017558 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 8017558:	b580      	push	{r7, lr}
 801755a:	b086      	sub	sp, #24
 801755c:	af00      	add	r7, sp, #0
 801755e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 8017560:	687b      	ldr	r3, [r7, #4]
 8017562:	2b00      	cmp	r3, #0
 8017564:	d102      	bne.n	801756c <uxTaskGetStackHighWaterMark+0x14>
 8017566:	4b09      	ldr	r3, [pc, #36]	; (801758c <uxTaskGetStackHighWaterMark+0x34>)
 8017568:	681b      	ldr	r3, [r3, #0]
 801756a:	e000      	b.n	801756e <uxTaskGetStackHighWaterMark+0x16>
 801756c:	687b      	ldr	r3, [r7, #4]
 801756e:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8017570:	697b      	ldr	r3, [r7, #20]
 8017572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017574:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 8017576:	6938      	ldr	r0, [r7, #16]
 8017578:	f7ff ffd2 	bl	8017520 <prvTaskCheckFreeStackSpace>
 801757c:	4603      	mov	r3, r0
 801757e:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 8017580:	68fb      	ldr	r3, [r7, #12]
	}
 8017582:	4618      	mov	r0, r3
 8017584:	3718      	adds	r7, #24
 8017586:	46bd      	mov	sp, r7
 8017588:	bd80      	pop	{r7, pc}
 801758a:	bf00      	nop
 801758c:	20001f4c 	.word	0x20001f4c

08017590 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8017590:	b580      	push	{r7, lr}
 8017592:	b084      	sub	sp, #16
 8017594:	af00      	add	r7, sp, #0
 8017596:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8017598:	687b      	ldr	r3, [r7, #4]
 801759a:	3364      	adds	r3, #100	; 0x64
 801759c:	4618      	mov	r0, r3
 801759e:	f002 fc11 	bl	8019dc4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80175a2:	687b      	ldr	r3, [r7, #4]
 80175a4:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 80175a8:	2b00      	cmp	r3, #0
 80175aa:	d108      	bne.n	80175be <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80175ac:	687b      	ldr	r3, [r7, #4]
 80175ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80175b0:	4618      	mov	r0, r3
 80175b2:	f000 ff95 	bl	80184e0 <vPortFree>
				vPortFree( pxTCB );
 80175b6:	6878      	ldr	r0, [r7, #4]
 80175b8:	f000 ff92 	bl	80184e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80175bc:	e018      	b.n	80175f0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80175be:	687b      	ldr	r3, [r7, #4]
 80175c0:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 80175c4:	2b01      	cmp	r3, #1
 80175c6:	d103      	bne.n	80175d0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80175c8:	6878      	ldr	r0, [r7, #4]
 80175ca:	f000 ff89 	bl	80184e0 <vPortFree>
	}
 80175ce:	e00f      	b.n	80175f0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80175d0:	687b      	ldr	r3, [r7, #4]
 80175d2:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 80175d6:	2b02      	cmp	r3, #2
 80175d8:	d00a      	beq.n	80175f0 <prvDeleteTCB+0x60>
	__asm volatile
 80175da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80175de:	f383 8811 	msr	BASEPRI, r3
 80175e2:	f3bf 8f6f 	isb	sy
 80175e6:	f3bf 8f4f 	dsb	sy
 80175ea:	60fb      	str	r3, [r7, #12]
}
 80175ec:	bf00      	nop
 80175ee:	e7fe      	b.n	80175ee <prvDeleteTCB+0x5e>
	}
 80175f0:	bf00      	nop
 80175f2:	3710      	adds	r7, #16
 80175f4:	46bd      	mov	sp, r7
 80175f6:	bd80      	pop	{r7, pc}

080175f8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80175f8:	b480      	push	{r7}
 80175fa:	b083      	sub	sp, #12
 80175fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80175fe:	4b0c      	ldr	r3, [pc, #48]	; (8017630 <prvResetNextTaskUnblockTime+0x38>)
 8017600:	681b      	ldr	r3, [r3, #0]
 8017602:	681b      	ldr	r3, [r3, #0]
 8017604:	2b00      	cmp	r3, #0
 8017606:	d104      	bne.n	8017612 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8017608:	4b0a      	ldr	r3, [pc, #40]	; (8017634 <prvResetNextTaskUnblockTime+0x3c>)
 801760a:	f04f 32ff 	mov.w	r2, #4294967295
 801760e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8017610:	e008      	b.n	8017624 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017612:	4b07      	ldr	r3, [pc, #28]	; (8017630 <prvResetNextTaskUnblockTime+0x38>)
 8017614:	681b      	ldr	r3, [r3, #0]
 8017616:	68db      	ldr	r3, [r3, #12]
 8017618:	68db      	ldr	r3, [r3, #12]
 801761a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801761c:	687b      	ldr	r3, [r7, #4]
 801761e:	685b      	ldr	r3, [r3, #4]
 8017620:	4a04      	ldr	r2, [pc, #16]	; (8017634 <prvResetNextTaskUnblockTime+0x3c>)
 8017622:	6013      	str	r3, [r2, #0]
}
 8017624:	bf00      	nop
 8017626:	370c      	adds	r7, #12
 8017628:	46bd      	mov	sp, r7
 801762a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801762e:	4770      	bx	lr
 8017630:	200023d8 	.word	0x200023d8
 8017634:	20002440 	.word	0x20002440

08017638 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8017638:	b480      	push	{r7}
 801763a:	b083      	sub	sp, #12
 801763c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801763e:	4b0b      	ldr	r3, [pc, #44]	; (801766c <xTaskGetSchedulerState+0x34>)
 8017640:	681b      	ldr	r3, [r3, #0]
 8017642:	2b00      	cmp	r3, #0
 8017644:	d102      	bne.n	801764c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8017646:	2301      	movs	r3, #1
 8017648:	607b      	str	r3, [r7, #4]
 801764a:	e008      	b.n	801765e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801764c:	4b08      	ldr	r3, [pc, #32]	; (8017670 <xTaskGetSchedulerState+0x38>)
 801764e:	681b      	ldr	r3, [r3, #0]
 8017650:	2b00      	cmp	r3, #0
 8017652:	d102      	bne.n	801765a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8017654:	2302      	movs	r3, #2
 8017656:	607b      	str	r3, [r7, #4]
 8017658:	e001      	b.n	801765e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801765a:	2300      	movs	r3, #0
 801765c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801765e:	687b      	ldr	r3, [r7, #4]
	}
 8017660:	4618      	mov	r0, r3
 8017662:	370c      	adds	r7, #12
 8017664:	46bd      	mov	sp, r7
 8017666:	f85d 7b04 	ldr.w	r7, [sp], #4
 801766a:	4770      	bx	lr
 801766c:	2000242c 	.word	0x2000242c
 8017670:	20002448 	.word	0x20002448

08017674 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8017674:	b580      	push	{r7, lr}
 8017676:	b086      	sub	sp, #24
 8017678:	af00      	add	r7, sp, #0
 801767a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801767c:	687b      	ldr	r3, [r7, #4]
 801767e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8017680:	2300      	movs	r3, #0
 8017682:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8017684:	687b      	ldr	r3, [r7, #4]
 8017686:	2b00      	cmp	r3, #0
 8017688:	d05f      	beq.n	801774a <xTaskPriorityDisinherit+0xd6>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801768a:	4b32      	ldr	r3, [pc, #200]	; (8017754 <xTaskPriorityDisinherit+0xe0>)
 801768c:	681b      	ldr	r3, [r3, #0]
 801768e:	693a      	ldr	r2, [r7, #16]
 8017690:	429a      	cmp	r2, r3
 8017692:	d00a      	beq.n	80176aa <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8017694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017698:	f383 8811 	msr	BASEPRI, r3
 801769c:	f3bf 8f6f 	isb	sy
 80176a0:	f3bf 8f4f 	dsb	sy
 80176a4:	60fb      	str	r3, [r7, #12]
}
 80176a6:	bf00      	nop
 80176a8:	e7fe      	b.n	80176a8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80176aa:	693b      	ldr	r3, [r7, #16]
 80176ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80176ae:	2b00      	cmp	r3, #0
 80176b0:	d10a      	bne.n	80176c8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80176b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80176b6:	f383 8811 	msr	BASEPRI, r3
 80176ba:	f3bf 8f6f 	isb	sy
 80176be:	f3bf 8f4f 	dsb	sy
 80176c2:	60bb      	str	r3, [r7, #8]
}
 80176c4:	bf00      	nop
 80176c6:	e7fe      	b.n	80176c6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80176c8:	693b      	ldr	r3, [r7, #16]
 80176ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80176cc:	1e5a      	subs	r2, r3, #1
 80176ce:	693b      	ldr	r3, [r7, #16]
 80176d0:	661a      	str	r2, [r3, #96]	; 0x60

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80176d2:	693b      	ldr	r3, [r7, #16]
 80176d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80176d6:	693b      	ldr	r3, [r7, #16]
 80176d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80176da:	429a      	cmp	r2, r3
 80176dc:	d035      	beq.n	801774a <xTaskPriorityDisinherit+0xd6>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80176de:	693b      	ldr	r3, [r7, #16]
 80176e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80176e2:	2b00      	cmp	r3, #0
 80176e4:	d131      	bne.n	801774a <xTaskPriorityDisinherit+0xd6>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80176e6:	693b      	ldr	r3, [r7, #16]
 80176e8:	3304      	adds	r3, #4
 80176ea:	4618      	mov	r0, r3
 80176ec:	f7fe f9b6 	bl	8015a5c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 80176f0:	687b      	ldr	r3, [r7, #4]
 80176f2:	4619      	mov	r1, r3
 80176f4:	204a      	movs	r0, #74	; 0x4a
 80176f6:	f001 fc59 	bl	8018fac <SEGGER_SYSVIEW_RecordU32>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80176fa:	693b      	ldr	r3, [r7, #16]
 80176fc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80176fe:	693b      	ldr	r3, [r7, #16]
 8017700:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017702:	693b      	ldr	r3, [r7, #16]
 8017704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017706:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801770a:	693b      	ldr	r3, [r7, #16]
 801770c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801770e:	693b      	ldr	r3, [r7, #16]
 8017710:	4618      	mov	r0, r3
 8017712:	f002 f951 	bl	80199b8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8017716:	693b      	ldr	r3, [r7, #16]
 8017718:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801771a:	4b0f      	ldr	r3, [pc, #60]	; (8017758 <xTaskPriorityDisinherit+0xe4>)
 801771c:	681b      	ldr	r3, [r3, #0]
 801771e:	429a      	cmp	r2, r3
 8017720:	d903      	bls.n	801772a <xTaskPriorityDisinherit+0xb6>
 8017722:	693b      	ldr	r3, [r7, #16]
 8017724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017726:	4a0c      	ldr	r2, [pc, #48]	; (8017758 <xTaskPriorityDisinherit+0xe4>)
 8017728:	6013      	str	r3, [r2, #0]
 801772a:	693b      	ldr	r3, [r7, #16]
 801772c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801772e:	4613      	mov	r3, r2
 8017730:	009b      	lsls	r3, r3, #2
 8017732:	4413      	add	r3, r2
 8017734:	009b      	lsls	r3, r3, #2
 8017736:	4a09      	ldr	r2, [pc, #36]	; (801775c <xTaskPriorityDisinherit+0xe8>)
 8017738:	441a      	add	r2, r3
 801773a:	693b      	ldr	r3, [r7, #16]
 801773c:	3304      	adds	r3, #4
 801773e:	4619      	mov	r1, r3
 8017740:	4610      	mov	r0, r2
 8017742:	f7fe f92e 	bl	80159a2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8017746:	2301      	movs	r3, #1
 8017748:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801774a:	697b      	ldr	r3, [r7, #20]
	}
 801774c:	4618      	mov	r0, r3
 801774e:	3718      	adds	r7, #24
 8017750:	46bd      	mov	sp, r7
 8017752:	bd80      	pop	{r7, pc}
 8017754:	20001f4c 	.word	0x20001f4c
 8017758:	20002428 	.word	0x20002428
 801775c:	20001f50 	.word	0x20001f50

08017760 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8017760:	b580      	push	{r7, lr}
 8017762:	b084      	sub	sp, #16
 8017764:	af00      	add	r7, sp, #0
 8017766:	6078      	str	r0, [r7, #4]
 8017768:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801776a:	4b21      	ldr	r3, [pc, #132]	; (80177f0 <prvAddCurrentTaskToDelayedList+0x90>)
 801776c:	681b      	ldr	r3, [r3, #0]
 801776e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017770:	4b20      	ldr	r3, [pc, #128]	; (80177f4 <prvAddCurrentTaskToDelayedList+0x94>)
 8017772:	681b      	ldr	r3, [r3, #0]
 8017774:	3304      	adds	r3, #4
 8017776:	4618      	mov	r0, r3
 8017778:	f7fe f970 	bl	8015a5c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801777c:	687b      	ldr	r3, [r7, #4]
 801777e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017782:	d10a      	bne.n	801779a <prvAddCurrentTaskToDelayedList+0x3a>
 8017784:	683b      	ldr	r3, [r7, #0]
 8017786:	2b00      	cmp	r3, #0
 8017788:	d007      	beq.n	801779a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801778a:	4b1a      	ldr	r3, [pc, #104]	; (80177f4 <prvAddCurrentTaskToDelayedList+0x94>)
 801778c:	681b      	ldr	r3, [r3, #0]
 801778e:	3304      	adds	r3, #4
 8017790:	4619      	mov	r1, r3
 8017792:	4819      	ldr	r0, [pc, #100]	; (80177f8 <prvAddCurrentTaskToDelayedList+0x98>)
 8017794:	f7fe f905 	bl	80159a2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8017798:	e026      	b.n	80177e8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801779a:	68fa      	ldr	r2, [r7, #12]
 801779c:	687b      	ldr	r3, [r7, #4]
 801779e:	4413      	add	r3, r2
 80177a0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80177a2:	4b14      	ldr	r3, [pc, #80]	; (80177f4 <prvAddCurrentTaskToDelayedList+0x94>)
 80177a4:	681b      	ldr	r3, [r3, #0]
 80177a6:	68ba      	ldr	r2, [r7, #8]
 80177a8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80177aa:	68ba      	ldr	r2, [r7, #8]
 80177ac:	68fb      	ldr	r3, [r7, #12]
 80177ae:	429a      	cmp	r2, r3
 80177b0:	d209      	bcs.n	80177c6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80177b2:	4b12      	ldr	r3, [pc, #72]	; (80177fc <prvAddCurrentTaskToDelayedList+0x9c>)
 80177b4:	681a      	ldr	r2, [r3, #0]
 80177b6:	4b0f      	ldr	r3, [pc, #60]	; (80177f4 <prvAddCurrentTaskToDelayedList+0x94>)
 80177b8:	681b      	ldr	r3, [r3, #0]
 80177ba:	3304      	adds	r3, #4
 80177bc:	4619      	mov	r1, r3
 80177be:	4610      	mov	r0, r2
 80177c0:	f7fe f913 	bl	80159ea <vListInsert>
}
 80177c4:	e010      	b.n	80177e8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80177c6:	4b0e      	ldr	r3, [pc, #56]	; (8017800 <prvAddCurrentTaskToDelayedList+0xa0>)
 80177c8:	681a      	ldr	r2, [r3, #0]
 80177ca:	4b0a      	ldr	r3, [pc, #40]	; (80177f4 <prvAddCurrentTaskToDelayedList+0x94>)
 80177cc:	681b      	ldr	r3, [r3, #0]
 80177ce:	3304      	adds	r3, #4
 80177d0:	4619      	mov	r1, r3
 80177d2:	4610      	mov	r0, r2
 80177d4:	f7fe f909 	bl	80159ea <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80177d8:	4b0a      	ldr	r3, [pc, #40]	; (8017804 <prvAddCurrentTaskToDelayedList+0xa4>)
 80177da:	681b      	ldr	r3, [r3, #0]
 80177dc:	68ba      	ldr	r2, [r7, #8]
 80177de:	429a      	cmp	r2, r3
 80177e0:	d202      	bcs.n	80177e8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80177e2:	4a08      	ldr	r2, [pc, #32]	; (8017804 <prvAddCurrentTaskToDelayedList+0xa4>)
 80177e4:	68bb      	ldr	r3, [r7, #8]
 80177e6:	6013      	str	r3, [r2, #0]
}
 80177e8:	bf00      	nop
 80177ea:	3710      	adds	r7, #16
 80177ec:	46bd      	mov	sp, r7
 80177ee:	bd80      	pop	{r7, pc}
 80177f0:	20002424 	.word	0x20002424
 80177f4:	20001f4c 	.word	0x20001f4c
 80177f8:	2000240c 	.word	0x2000240c
 80177fc:	200023dc 	.word	0x200023dc
 8017800:	200023d8 	.word	0x200023d8
 8017804:	20002440 	.word	0x20002440

08017808 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8017808:	b580      	push	{r7, lr}
 801780a:	b08a      	sub	sp, #40	; 0x28
 801780c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801780e:	2300      	movs	r3, #0
 8017810:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8017812:	f000 fb07 	bl	8017e24 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8017816:	4b1c      	ldr	r3, [pc, #112]	; (8017888 <xTimerCreateTimerTask+0x80>)
 8017818:	681b      	ldr	r3, [r3, #0]
 801781a:	2b00      	cmp	r3, #0
 801781c:	d021      	beq.n	8017862 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801781e:	2300      	movs	r3, #0
 8017820:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8017822:	2300      	movs	r3, #0
 8017824:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8017826:	1d3a      	adds	r2, r7, #4
 8017828:	f107 0108 	add.w	r1, r7, #8
 801782c:	f107 030c 	add.w	r3, r7, #12
 8017830:	4618      	mov	r0, r3
 8017832:	f7fe f86f 	bl	8015914 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8017836:	6879      	ldr	r1, [r7, #4]
 8017838:	68bb      	ldr	r3, [r7, #8]
 801783a:	68fa      	ldr	r2, [r7, #12]
 801783c:	9202      	str	r2, [sp, #8]
 801783e:	9301      	str	r3, [sp, #4]
 8017840:	2302      	movs	r3, #2
 8017842:	9300      	str	r3, [sp, #0]
 8017844:	2300      	movs	r3, #0
 8017846:	460a      	mov	r2, r1
 8017848:	4910      	ldr	r1, [pc, #64]	; (801788c <xTimerCreateTimerTask+0x84>)
 801784a:	4811      	ldr	r0, [pc, #68]	; (8017890 <xTimerCreateTimerTask+0x88>)
 801784c:	f7fe ffc4 	bl	80167d8 <xTaskCreateStatic>
 8017850:	4603      	mov	r3, r0
 8017852:	4a10      	ldr	r2, [pc, #64]	; (8017894 <xTimerCreateTimerTask+0x8c>)
 8017854:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8017856:	4b0f      	ldr	r3, [pc, #60]	; (8017894 <xTimerCreateTimerTask+0x8c>)
 8017858:	681b      	ldr	r3, [r3, #0]
 801785a:	2b00      	cmp	r3, #0
 801785c:	d001      	beq.n	8017862 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801785e:	2301      	movs	r3, #1
 8017860:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8017862:	697b      	ldr	r3, [r7, #20]
 8017864:	2b00      	cmp	r3, #0
 8017866:	d10a      	bne.n	801787e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8017868:	f04f 0350 	mov.w	r3, #80	; 0x50
 801786c:	f383 8811 	msr	BASEPRI, r3
 8017870:	f3bf 8f6f 	isb	sy
 8017874:	f3bf 8f4f 	dsb	sy
 8017878:	613b      	str	r3, [r7, #16]
}
 801787a:	bf00      	nop
 801787c:	e7fe      	b.n	801787c <xTimerCreateTimerTask+0x74>
	return xReturn;
 801787e:	697b      	ldr	r3, [r7, #20]
}
 8017880:	4618      	mov	r0, r3
 8017882:	3718      	adds	r7, #24
 8017884:	46bd      	mov	sp, r7
 8017886:	bd80      	pop	{r7, pc}
 8017888:	2000247c 	.word	0x2000247c
 801788c:	0801aaac 	.word	0x0801aaac
 8017890:	080179cd 	.word	0x080179cd
 8017894:	20002480 	.word	0x20002480

08017898 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8017898:	b580      	push	{r7, lr}
 801789a:	b08a      	sub	sp, #40	; 0x28
 801789c:	af00      	add	r7, sp, #0
 801789e:	60f8      	str	r0, [r7, #12]
 80178a0:	60b9      	str	r1, [r7, #8]
 80178a2:	607a      	str	r2, [r7, #4]
 80178a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80178a6:	2300      	movs	r3, #0
 80178a8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80178aa:	68fb      	ldr	r3, [r7, #12]
 80178ac:	2b00      	cmp	r3, #0
 80178ae:	d10a      	bne.n	80178c6 <xTimerGenericCommand+0x2e>
	__asm volatile
 80178b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80178b4:	f383 8811 	msr	BASEPRI, r3
 80178b8:	f3bf 8f6f 	isb	sy
 80178bc:	f3bf 8f4f 	dsb	sy
 80178c0:	623b      	str	r3, [r7, #32]
}
 80178c2:	bf00      	nop
 80178c4:	e7fe      	b.n	80178c4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80178c6:	4b1a      	ldr	r3, [pc, #104]	; (8017930 <xTimerGenericCommand+0x98>)
 80178c8:	681b      	ldr	r3, [r3, #0]
 80178ca:	2b00      	cmp	r3, #0
 80178cc:	d02a      	beq.n	8017924 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80178ce:	68bb      	ldr	r3, [r7, #8]
 80178d0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80178d2:	687b      	ldr	r3, [r7, #4]
 80178d4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80178d6:	68fb      	ldr	r3, [r7, #12]
 80178d8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80178da:	68bb      	ldr	r3, [r7, #8]
 80178dc:	2b05      	cmp	r3, #5
 80178de:	dc18      	bgt.n	8017912 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80178e0:	f7ff feaa 	bl	8017638 <xTaskGetSchedulerState>
 80178e4:	4603      	mov	r3, r0
 80178e6:	2b02      	cmp	r3, #2
 80178e8:	d109      	bne.n	80178fe <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80178ea:	4b11      	ldr	r3, [pc, #68]	; (8017930 <xTimerGenericCommand+0x98>)
 80178ec:	6818      	ldr	r0, [r3, #0]
 80178ee:	f107 0110 	add.w	r1, r7, #16
 80178f2:	2300      	movs	r3, #0
 80178f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80178f6:	f7fe fa1f 	bl	8015d38 <xQueueGenericSend>
 80178fa:	6278      	str	r0, [r7, #36]	; 0x24
 80178fc:	e012      	b.n	8017924 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80178fe:	4b0c      	ldr	r3, [pc, #48]	; (8017930 <xTimerGenericCommand+0x98>)
 8017900:	6818      	ldr	r0, [r3, #0]
 8017902:	f107 0110 	add.w	r1, r7, #16
 8017906:	2300      	movs	r3, #0
 8017908:	2200      	movs	r2, #0
 801790a:	f7fe fa15 	bl	8015d38 <xQueueGenericSend>
 801790e:	6278      	str	r0, [r7, #36]	; 0x24
 8017910:	e008      	b.n	8017924 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8017912:	4b07      	ldr	r3, [pc, #28]	; (8017930 <xTimerGenericCommand+0x98>)
 8017914:	6818      	ldr	r0, [r3, #0]
 8017916:	f107 0110 	add.w	r1, r7, #16
 801791a:	2300      	movs	r3, #0
 801791c:	683a      	ldr	r2, [r7, #0]
 801791e:	f7fe fb31 	bl	8015f84 <xQueueGenericSendFromISR>
 8017922:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8017924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8017926:	4618      	mov	r0, r3
 8017928:	3728      	adds	r7, #40	; 0x28
 801792a:	46bd      	mov	sp, r7
 801792c:	bd80      	pop	{r7, pc}
 801792e:	bf00      	nop
 8017930:	2000247c 	.word	0x2000247c

08017934 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8017934:	b580      	push	{r7, lr}
 8017936:	b088      	sub	sp, #32
 8017938:	af02      	add	r7, sp, #8
 801793a:	6078      	str	r0, [r7, #4]
 801793c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801793e:	4b22      	ldr	r3, [pc, #136]	; (80179c8 <prvProcessExpiredTimer+0x94>)
 8017940:	681b      	ldr	r3, [r3, #0]
 8017942:	68db      	ldr	r3, [r3, #12]
 8017944:	68db      	ldr	r3, [r3, #12]
 8017946:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8017948:	697b      	ldr	r3, [r7, #20]
 801794a:	3304      	adds	r3, #4
 801794c:	4618      	mov	r0, r3
 801794e:	f7fe f885 	bl	8015a5c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8017952:	697b      	ldr	r3, [r7, #20]
 8017954:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017958:	f003 0304 	and.w	r3, r3, #4
 801795c:	2b00      	cmp	r3, #0
 801795e:	d022      	beq.n	80179a6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8017960:	697b      	ldr	r3, [r7, #20]
 8017962:	699a      	ldr	r2, [r3, #24]
 8017964:	687b      	ldr	r3, [r7, #4]
 8017966:	18d1      	adds	r1, r2, r3
 8017968:	687b      	ldr	r3, [r7, #4]
 801796a:	683a      	ldr	r2, [r7, #0]
 801796c:	6978      	ldr	r0, [r7, #20]
 801796e:	f000 f8d1 	bl	8017b14 <prvInsertTimerInActiveList>
 8017972:	4603      	mov	r3, r0
 8017974:	2b00      	cmp	r3, #0
 8017976:	d01f      	beq.n	80179b8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8017978:	2300      	movs	r3, #0
 801797a:	9300      	str	r3, [sp, #0]
 801797c:	2300      	movs	r3, #0
 801797e:	687a      	ldr	r2, [r7, #4]
 8017980:	2100      	movs	r1, #0
 8017982:	6978      	ldr	r0, [r7, #20]
 8017984:	f7ff ff88 	bl	8017898 <xTimerGenericCommand>
 8017988:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801798a:	693b      	ldr	r3, [r7, #16]
 801798c:	2b00      	cmp	r3, #0
 801798e:	d113      	bne.n	80179b8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8017990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017994:	f383 8811 	msr	BASEPRI, r3
 8017998:	f3bf 8f6f 	isb	sy
 801799c:	f3bf 8f4f 	dsb	sy
 80179a0:	60fb      	str	r3, [r7, #12]
}
 80179a2:	bf00      	nop
 80179a4:	e7fe      	b.n	80179a4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80179a6:	697b      	ldr	r3, [r7, #20]
 80179a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80179ac:	f023 0301 	bic.w	r3, r3, #1
 80179b0:	b2da      	uxtb	r2, r3
 80179b2:	697b      	ldr	r3, [r7, #20]
 80179b4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80179b8:	697b      	ldr	r3, [r7, #20]
 80179ba:	6a1b      	ldr	r3, [r3, #32]
 80179bc:	6978      	ldr	r0, [r7, #20]
 80179be:	4798      	blx	r3
}
 80179c0:	bf00      	nop
 80179c2:	3718      	adds	r7, #24
 80179c4:	46bd      	mov	sp, r7
 80179c6:	bd80      	pop	{r7, pc}
 80179c8:	20002474 	.word	0x20002474

080179cc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80179cc:	b580      	push	{r7, lr}
 80179ce:	b084      	sub	sp, #16
 80179d0:	af00      	add	r7, sp, #0
 80179d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80179d4:	f107 0308 	add.w	r3, r7, #8
 80179d8:	4618      	mov	r0, r3
 80179da:	f000 f857 	bl	8017a8c <prvGetNextExpireTime>
 80179de:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80179e0:	68bb      	ldr	r3, [r7, #8]
 80179e2:	4619      	mov	r1, r3
 80179e4:	68f8      	ldr	r0, [r7, #12]
 80179e6:	f000 f803 	bl	80179f0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80179ea:	f000 f8d5 	bl	8017b98 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80179ee:	e7f1      	b.n	80179d4 <prvTimerTask+0x8>

080179f0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80179f0:	b580      	push	{r7, lr}
 80179f2:	b084      	sub	sp, #16
 80179f4:	af00      	add	r7, sp, #0
 80179f6:	6078      	str	r0, [r7, #4]
 80179f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80179fa:	f7ff f9c5 	bl	8016d88 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80179fe:	f107 0308 	add.w	r3, r7, #8
 8017a02:	4618      	mov	r0, r3
 8017a04:	f000 f866 	bl	8017ad4 <prvSampleTimeNow>
 8017a08:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8017a0a:	68bb      	ldr	r3, [r7, #8]
 8017a0c:	2b00      	cmp	r3, #0
 8017a0e:	d130      	bne.n	8017a72 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8017a10:	683b      	ldr	r3, [r7, #0]
 8017a12:	2b00      	cmp	r3, #0
 8017a14:	d10a      	bne.n	8017a2c <prvProcessTimerOrBlockTask+0x3c>
 8017a16:	687a      	ldr	r2, [r7, #4]
 8017a18:	68fb      	ldr	r3, [r7, #12]
 8017a1a:	429a      	cmp	r2, r3
 8017a1c:	d806      	bhi.n	8017a2c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8017a1e:	f7ff f9c1 	bl	8016da4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8017a22:	68f9      	ldr	r1, [r7, #12]
 8017a24:	6878      	ldr	r0, [r7, #4]
 8017a26:	f7ff ff85 	bl	8017934 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8017a2a:	e024      	b.n	8017a76 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8017a2c:	683b      	ldr	r3, [r7, #0]
 8017a2e:	2b00      	cmp	r3, #0
 8017a30:	d008      	beq.n	8017a44 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8017a32:	4b13      	ldr	r3, [pc, #76]	; (8017a80 <prvProcessTimerOrBlockTask+0x90>)
 8017a34:	681b      	ldr	r3, [r3, #0]
 8017a36:	681b      	ldr	r3, [r3, #0]
 8017a38:	2b00      	cmp	r3, #0
 8017a3a:	d101      	bne.n	8017a40 <prvProcessTimerOrBlockTask+0x50>
 8017a3c:	2301      	movs	r3, #1
 8017a3e:	e000      	b.n	8017a42 <prvProcessTimerOrBlockTask+0x52>
 8017a40:	2300      	movs	r3, #0
 8017a42:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8017a44:	4b0f      	ldr	r3, [pc, #60]	; (8017a84 <prvProcessTimerOrBlockTask+0x94>)
 8017a46:	6818      	ldr	r0, [r3, #0]
 8017a48:	687a      	ldr	r2, [r7, #4]
 8017a4a:	68fb      	ldr	r3, [r7, #12]
 8017a4c:	1ad3      	subs	r3, r2, r3
 8017a4e:	683a      	ldr	r2, [r7, #0]
 8017a50:	4619      	mov	r1, r3
 8017a52:	f7fe fe8d 	bl	8016770 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8017a56:	f7ff f9a5 	bl	8016da4 <xTaskResumeAll>
 8017a5a:	4603      	mov	r3, r0
 8017a5c:	2b00      	cmp	r3, #0
 8017a5e:	d10a      	bne.n	8017a76 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8017a60:	4b09      	ldr	r3, [pc, #36]	; (8017a88 <prvProcessTimerOrBlockTask+0x98>)
 8017a62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017a66:	601a      	str	r2, [r3, #0]
 8017a68:	f3bf 8f4f 	dsb	sy
 8017a6c:	f3bf 8f6f 	isb	sy
}
 8017a70:	e001      	b.n	8017a76 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8017a72:	f7ff f997 	bl	8016da4 <xTaskResumeAll>
}
 8017a76:	bf00      	nop
 8017a78:	3710      	adds	r7, #16
 8017a7a:	46bd      	mov	sp, r7
 8017a7c:	bd80      	pop	{r7, pc}
 8017a7e:	bf00      	nop
 8017a80:	20002478 	.word	0x20002478
 8017a84:	2000247c 	.word	0x2000247c
 8017a88:	e000ed04 	.word	0xe000ed04

08017a8c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8017a8c:	b480      	push	{r7}
 8017a8e:	b085      	sub	sp, #20
 8017a90:	af00      	add	r7, sp, #0
 8017a92:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8017a94:	4b0e      	ldr	r3, [pc, #56]	; (8017ad0 <prvGetNextExpireTime+0x44>)
 8017a96:	681b      	ldr	r3, [r3, #0]
 8017a98:	681b      	ldr	r3, [r3, #0]
 8017a9a:	2b00      	cmp	r3, #0
 8017a9c:	d101      	bne.n	8017aa2 <prvGetNextExpireTime+0x16>
 8017a9e:	2201      	movs	r2, #1
 8017aa0:	e000      	b.n	8017aa4 <prvGetNextExpireTime+0x18>
 8017aa2:	2200      	movs	r2, #0
 8017aa4:	687b      	ldr	r3, [r7, #4]
 8017aa6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8017aa8:	687b      	ldr	r3, [r7, #4]
 8017aaa:	681b      	ldr	r3, [r3, #0]
 8017aac:	2b00      	cmp	r3, #0
 8017aae:	d105      	bne.n	8017abc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8017ab0:	4b07      	ldr	r3, [pc, #28]	; (8017ad0 <prvGetNextExpireTime+0x44>)
 8017ab2:	681b      	ldr	r3, [r3, #0]
 8017ab4:	68db      	ldr	r3, [r3, #12]
 8017ab6:	681b      	ldr	r3, [r3, #0]
 8017ab8:	60fb      	str	r3, [r7, #12]
 8017aba:	e001      	b.n	8017ac0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8017abc:	2300      	movs	r3, #0
 8017abe:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8017ac0:	68fb      	ldr	r3, [r7, #12]
}
 8017ac2:	4618      	mov	r0, r3
 8017ac4:	3714      	adds	r7, #20
 8017ac6:	46bd      	mov	sp, r7
 8017ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017acc:	4770      	bx	lr
 8017ace:	bf00      	nop
 8017ad0:	20002474 	.word	0x20002474

08017ad4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8017ad4:	b580      	push	{r7, lr}
 8017ad6:	b084      	sub	sp, #16
 8017ad8:	af00      	add	r7, sp, #0
 8017ada:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8017adc:	f7ff fa04 	bl	8016ee8 <xTaskGetTickCount>
 8017ae0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8017ae2:	4b0b      	ldr	r3, [pc, #44]	; (8017b10 <prvSampleTimeNow+0x3c>)
 8017ae4:	681b      	ldr	r3, [r3, #0]
 8017ae6:	68fa      	ldr	r2, [r7, #12]
 8017ae8:	429a      	cmp	r2, r3
 8017aea:	d205      	bcs.n	8017af8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8017aec:	f000 f936 	bl	8017d5c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8017af0:	687b      	ldr	r3, [r7, #4]
 8017af2:	2201      	movs	r2, #1
 8017af4:	601a      	str	r2, [r3, #0]
 8017af6:	e002      	b.n	8017afe <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8017af8:	687b      	ldr	r3, [r7, #4]
 8017afa:	2200      	movs	r2, #0
 8017afc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8017afe:	4a04      	ldr	r2, [pc, #16]	; (8017b10 <prvSampleTimeNow+0x3c>)
 8017b00:	68fb      	ldr	r3, [r7, #12]
 8017b02:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8017b04:	68fb      	ldr	r3, [r7, #12]
}
 8017b06:	4618      	mov	r0, r3
 8017b08:	3710      	adds	r7, #16
 8017b0a:	46bd      	mov	sp, r7
 8017b0c:	bd80      	pop	{r7, pc}
 8017b0e:	bf00      	nop
 8017b10:	20002484 	.word	0x20002484

08017b14 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8017b14:	b580      	push	{r7, lr}
 8017b16:	b086      	sub	sp, #24
 8017b18:	af00      	add	r7, sp, #0
 8017b1a:	60f8      	str	r0, [r7, #12]
 8017b1c:	60b9      	str	r1, [r7, #8]
 8017b1e:	607a      	str	r2, [r7, #4]
 8017b20:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8017b22:	2300      	movs	r3, #0
 8017b24:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8017b26:	68fb      	ldr	r3, [r7, #12]
 8017b28:	68ba      	ldr	r2, [r7, #8]
 8017b2a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8017b2c:	68fb      	ldr	r3, [r7, #12]
 8017b2e:	68fa      	ldr	r2, [r7, #12]
 8017b30:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8017b32:	68ba      	ldr	r2, [r7, #8]
 8017b34:	687b      	ldr	r3, [r7, #4]
 8017b36:	429a      	cmp	r2, r3
 8017b38:	d812      	bhi.n	8017b60 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017b3a:	687a      	ldr	r2, [r7, #4]
 8017b3c:	683b      	ldr	r3, [r7, #0]
 8017b3e:	1ad2      	subs	r2, r2, r3
 8017b40:	68fb      	ldr	r3, [r7, #12]
 8017b42:	699b      	ldr	r3, [r3, #24]
 8017b44:	429a      	cmp	r2, r3
 8017b46:	d302      	bcc.n	8017b4e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8017b48:	2301      	movs	r3, #1
 8017b4a:	617b      	str	r3, [r7, #20]
 8017b4c:	e01b      	b.n	8017b86 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8017b4e:	4b10      	ldr	r3, [pc, #64]	; (8017b90 <prvInsertTimerInActiveList+0x7c>)
 8017b50:	681a      	ldr	r2, [r3, #0]
 8017b52:	68fb      	ldr	r3, [r7, #12]
 8017b54:	3304      	adds	r3, #4
 8017b56:	4619      	mov	r1, r3
 8017b58:	4610      	mov	r0, r2
 8017b5a:	f7fd ff46 	bl	80159ea <vListInsert>
 8017b5e:	e012      	b.n	8017b86 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8017b60:	687a      	ldr	r2, [r7, #4]
 8017b62:	683b      	ldr	r3, [r7, #0]
 8017b64:	429a      	cmp	r2, r3
 8017b66:	d206      	bcs.n	8017b76 <prvInsertTimerInActiveList+0x62>
 8017b68:	68ba      	ldr	r2, [r7, #8]
 8017b6a:	683b      	ldr	r3, [r7, #0]
 8017b6c:	429a      	cmp	r2, r3
 8017b6e:	d302      	bcc.n	8017b76 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8017b70:	2301      	movs	r3, #1
 8017b72:	617b      	str	r3, [r7, #20]
 8017b74:	e007      	b.n	8017b86 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8017b76:	4b07      	ldr	r3, [pc, #28]	; (8017b94 <prvInsertTimerInActiveList+0x80>)
 8017b78:	681a      	ldr	r2, [r3, #0]
 8017b7a:	68fb      	ldr	r3, [r7, #12]
 8017b7c:	3304      	adds	r3, #4
 8017b7e:	4619      	mov	r1, r3
 8017b80:	4610      	mov	r0, r2
 8017b82:	f7fd ff32 	bl	80159ea <vListInsert>
		}
	}

	return xProcessTimerNow;
 8017b86:	697b      	ldr	r3, [r7, #20]
}
 8017b88:	4618      	mov	r0, r3
 8017b8a:	3718      	adds	r7, #24
 8017b8c:	46bd      	mov	sp, r7
 8017b8e:	bd80      	pop	{r7, pc}
 8017b90:	20002478 	.word	0x20002478
 8017b94:	20002474 	.word	0x20002474

08017b98 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8017b98:	b580      	push	{r7, lr}
 8017b9a:	b08e      	sub	sp, #56	; 0x38
 8017b9c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8017b9e:	e0ca      	b.n	8017d36 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8017ba0:	687b      	ldr	r3, [r7, #4]
 8017ba2:	2b00      	cmp	r3, #0
 8017ba4:	da18      	bge.n	8017bd8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8017ba6:	1d3b      	adds	r3, r7, #4
 8017ba8:	3304      	adds	r3, #4
 8017baa:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8017bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017bae:	2b00      	cmp	r3, #0
 8017bb0:	d10a      	bne.n	8017bc8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8017bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017bb6:	f383 8811 	msr	BASEPRI, r3
 8017bba:	f3bf 8f6f 	isb	sy
 8017bbe:	f3bf 8f4f 	dsb	sy
 8017bc2:	61fb      	str	r3, [r7, #28]
}
 8017bc4:	bf00      	nop
 8017bc6:	e7fe      	b.n	8017bc6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8017bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017bca:	681b      	ldr	r3, [r3, #0]
 8017bcc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017bce:	6850      	ldr	r0, [r2, #4]
 8017bd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017bd2:	6892      	ldr	r2, [r2, #8]
 8017bd4:	4611      	mov	r1, r2
 8017bd6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8017bd8:	687b      	ldr	r3, [r7, #4]
 8017bda:	2b00      	cmp	r3, #0
 8017bdc:	f2c0 80aa 	blt.w	8017d34 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8017be0:	68fb      	ldr	r3, [r7, #12]
 8017be2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8017be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017be6:	695b      	ldr	r3, [r3, #20]
 8017be8:	2b00      	cmp	r3, #0
 8017bea:	d004      	beq.n	8017bf6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8017bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017bee:	3304      	adds	r3, #4
 8017bf0:	4618      	mov	r0, r3
 8017bf2:	f7fd ff33 	bl	8015a5c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8017bf6:	463b      	mov	r3, r7
 8017bf8:	4618      	mov	r0, r3
 8017bfa:	f7ff ff6b 	bl	8017ad4 <prvSampleTimeNow>
 8017bfe:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8017c00:	687b      	ldr	r3, [r7, #4]
 8017c02:	2b09      	cmp	r3, #9
 8017c04:	f200 8097 	bhi.w	8017d36 <prvProcessReceivedCommands+0x19e>
 8017c08:	a201      	add	r2, pc, #4	; (adr r2, 8017c10 <prvProcessReceivedCommands+0x78>)
 8017c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017c0e:	bf00      	nop
 8017c10:	08017c39 	.word	0x08017c39
 8017c14:	08017c39 	.word	0x08017c39
 8017c18:	08017c39 	.word	0x08017c39
 8017c1c:	08017cad 	.word	0x08017cad
 8017c20:	08017cc1 	.word	0x08017cc1
 8017c24:	08017d0b 	.word	0x08017d0b
 8017c28:	08017c39 	.word	0x08017c39
 8017c2c:	08017c39 	.word	0x08017c39
 8017c30:	08017cad 	.word	0x08017cad
 8017c34:	08017cc1 	.word	0x08017cc1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8017c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c3a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017c3e:	f043 0301 	orr.w	r3, r3, #1
 8017c42:	b2da      	uxtb	r2, r3
 8017c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8017c4a:	68ba      	ldr	r2, [r7, #8]
 8017c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c4e:	699b      	ldr	r3, [r3, #24]
 8017c50:	18d1      	adds	r1, r2, r3
 8017c52:	68bb      	ldr	r3, [r7, #8]
 8017c54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017c56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017c58:	f7ff ff5c 	bl	8017b14 <prvInsertTimerInActiveList>
 8017c5c:	4603      	mov	r3, r0
 8017c5e:	2b00      	cmp	r3, #0
 8017c60:	d069      	beq.n	8017d36 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8017c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c64:	6a1b      	ldr	r3, [r3, #32]
 8017c66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017c68:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8017c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017c70:	f003 0304 	and.w	r3, r3, #4
 8017c74:	2b00      	cmp	r3, #0
 8017c76:	d05e      	beq.n	8017d36 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8017c78:	68ba      	ldr	r2, [r7, #8]
 8017c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c7c:	699b      	ldr	r3, [r3, #24]
 8017c7e:	441a      	add	r2, r3
 8017c80:	2300      	movs	r3, #0
 8017c82:	9300      	str	r3, [sp, #0]
 8017c84:	2300      	movs	r3, #0
 8017c86:	2100      	movs	r1, #0
 8017c88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017c8a:	f7ff fe05 	bl	8017898 <xTimerGenericCommand>
 8017c8e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8017c90:	6a3b      	ldr	r3, [r7, #32]
 8017c92:	2b00      	cmp	r3, #0
 8017c94:	d14f      	bne.n	8017d36 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8017c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017c9a:	f383 8811 	msr	BASEPRI, r3
 8017c9e:	f3bf 8f6f 	isb	sy
 8017ca2:	f3bf 8f4f 	dsb	sy
 8017ca6:	61bb      	str	r3, [r7, #24]
}
 8017ca8:	bf00      	nop
 8017caa:	e7fe      	b.n	8017caa <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8017cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017cae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017cb2:	f023 0301 	bic.w	r3, r3, #1
 8017cb6:	b2da      	uxtb	r2, r3
 8017cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017cba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8017cbe:	e03a      	b.n	8017d36 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8017cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017cc2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017cc6:	f043 0301 	orr.w	r3, r3, #1
 8017cca:	b2da      	uxtb	r2, r3
 8017ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017cce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8017cd2:	68ba      	ldr	r2, [r7, #8]
 8017cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017cd6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8017cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017cda:	699b      	ldr	r3, [r3, #24]
 8017cdc:	2b00      	cmp	r3, #0
 8017cde:	d10a      	bne.n	8017cf6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8017ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017ce4:	f383 8811 	msr	BASEPRI, r3
 8017ce8:	f3bf 8f6f 	isb	sy
 8017cec:	f3bf 8f4f 	dsb	sy
 8017cf0:	617b      	str	r3, [r7, #20]
}
 8017cf2:	bf00      	nop
 8017cf4:	e7fe      	b.n	8017cf4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8017cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017cf8:	699a      	ldr	r2, [r3, #24]
 8017cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017cfc:	18d1      	adds	r1, r2, r3
 8017cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017d02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017d04:	f7ff ff06 	bl	8017b14 <prvInsertTimerInActiveList>
					break;
 8017d08:	e015      	b.n	8017d36 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8017d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017d10:	f003 0302 	and.w	r3, r3, #2
 8017d14:	2b00      	cmp	r3, #0
 8017d16:	d103      	bne.n	8017d20 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8017d18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017d1a:	f000 fbe1 	bl	80184e0 <vPortFree>
 8017d1e:	e00a      	b.n	8017d36 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8017d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017d26:	f023 0301 	bic.w	r3, r3, #1
 8017d2a:	b2da      	uxtb	r2, r3
 8017d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d2e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8017d32:	e000      	b.n	8017d36 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8017d34:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8017d36:	4b08      	ldr	r3, [pc, #32]	; (8017d58 <prvProcessReceivedCommands+0x1c0>)
 8017d38:	681b      	ldr	r3, [r3, #0]
 8017d3a:	1d39      	adds	r1, r7, #4
 8017d3c:	2200      	movs	r2, #0
 8017d3e:	4618      	mov	r0, r3
 8017d40:	f7fe f9d0 	bl	80160e4 <xQueueReceive>
 8017d44:	4603      	mov	r3, r0
 8017d46:	2b00      	cmp	r3, #0
 8017d48:	f47f af2a 	bne.w	8017ba0 <prvProcessReceivedCommands+0x8>
	}
}
 8017d4c:	bf00      	nop
 8017d4e:	bf00      	nop
 8017d50:	3730      	adds	r7, #48	; 0x30
 8017d52:	46bd      	mov	sp, r7
 8017d54:	bd80      	pop	{r7, pc}
 8017d56:	bf00      	nop
 8017d58:	2000247c 	.word	0x2000247c

08017d5c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8017d5c:	b580      	push	{r7, lr}
 8017d5e:	b088      	sub	sp, #32
 8017d60:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8017d62:	e048      	b.n	8017df6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8017d64:	4b2d      	ldr	r3, [pc, #180]	; (8017e1c <prvSwitchTimerLists+0xc0>)
 8017d66:	681b      	ldr	r3, [r3, #0]
 8017d68:	68db      	ldr	r3, [r3, #12]
 8017d6a:	681b      	ldr	r3, [r3, #0]
 8017d6c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017d6e:	4b2b      	ldr	r3, [pc, #172]	; (8017e1c <prvSwitchTimerLists+0xc0>)
 8017d70:	681b      	ldr	r3, [r3, #0]
 8017d72:	68db      	ldr	r3, [r3, #12]
 8017d74:	68db      	ldr	r3, [r3, #12]
 8017d76:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8017d78:	68fb      	ldr	r3, [r7, #12]
 8017d7a:	3304      	adds	r3, #4
 8017d7c:	4618      	mov	r0, r3
 8017d7e:	f7fd fe6d 	bl	8015a5c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8017d82:	68fb      	ldr	r3, [r7, #12]
 8017d84:	6a1b      	ldr	r3, [r3, #32]
 8017d86:	68f8      	ldr	r0, [r7, #12]
 8017d88:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8017d8a:	68fb      	ldr	r3, [r7, #12]
 8017d8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017d90:	f003 0304 	and.w	r3, r3, #4
 8017d94:	2b00      	cmp	r3, #0
 8017d96:	d02e      	beq.n	8017df6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8017d98:	68fb      	ldr	r3, [r7, #12]
 8017d9a:	699b      	ldr	r3, [r3, #24]
 8017d9c:	693a      	ldr	r2, [r7, #16]
 8017d9e:	4413      	add	r3, r2
 8017da0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8017da2:	68ba      	ldr	r2, [r7, #8]
 8017da4:	693b      	ldr	r3, [r7, #16]
 8017da6:	429a      	cmp	r2, r3
 8017da8:	d90e      	bls.n	8017dc8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8017daa:	68fb      	ldr	r3, [r7, #12]
 8017dac:	68ba      	ldr	r2, [r7, #8]
 8017dae:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8017db0:	68fb      	ldr	r3, [r7, #12]
 8017db2:	68fa      	ldr	r2, [r7, #12]
 8017db4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8017db6:	4b19      	ldr	r3, [pc, #100]	; (8017e1c <prvSwitchTimerLists+0xc0>)
 8017db8:	681a      	ldr	r2, [r3, #0]
 8017dba:	68fb      	ldr	r3, [r7, #12]
 8017dbc:	3304      	adds	r3, #4
 8017dbe:	4619      	mov	r1, r3
 8017dc0:	4610      	mov	r0, r2
 8017dc2:	f7fd fe12 	bl	80159ea <vListInsert>
 8017dc6:	e016      	b.n	8017df6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8017dc8:	2300      	movs	r3, #0
 8017dca:	9300      	str	r3, [sp, #0]
 8017dcc:	2300      	movs	r3, #0
 8017dce:	693a      	ldr	r2, [r7, #16]
 8017dd0:	2100      	movs	r1, #0
 8017dd2:	68f8      	ldr	r0, [r7, #12]
 8017dd4:	f7ff fd60 	bl	8017898 <xTimerGenericCommand>
 8017dd8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8017dda:	687b      	ldr	r3, [r7, #4]
 8017ddc:	2b00      	cmp	r3, #0
 8017dde:	d10a      	bne.n	8017df6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8017de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017de4:	f383 8811 	msr	BASEPRI, r3
 8017de8:	f3bf 8f6f 	isb	sy
 8017dec:	f3bf 8f4f 	dsb	sy
 8017df0:	603b      	str	r3, [r7, #0]
}
 8017df2:	bf00      	nop
 8017df4:	e7fe      	b.n	8017df4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8017df6:	4b09      	ldr	r3, [pc, #36]	; (8017e1c <prvSwitchTimerLists+0xc0>)
 8017df8:	681b      	ldr	r3, [r3, #0]
 8017dfa:	681b      	ldr	r3, [r3, #0]
 8017dfc:	2b00      	cmp	r3, #0
 8017dfe:	d1b1      	bne.n	8017d64 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8017e00:	4b06      	ldr	r3, [pc, #24]	; (8017e1c <prvSwitchTimerLists+0xc0>)
 8017e02:	681b      	ldr	r3, [r3, #0]
 8017e04:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8017e06:	4b06      	ldr	r3, [pc, #24]	; (8017e20 <prvSwitchTimerLists+0xc4>)
 8017e08:	681b      	ldr	r3, [r3, #0]
 8017e0a:	4a04      	ldr	r2, [pc, #16]	; (8017e1c <prvSwitchTimerLists+0xc0>)
 8017e0c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8017e0e:	4a04      	ldr	r2, [pc, #16]	; (8017e20 <prvSwitchTimerLists+0xc4>)
 8017e10:	697b      	ldr	r3, [r7, #20]
 8017e12:	6013      	str	r3, [r2, #0]
}
 8017e14:	bf00      	nop
 8017e16:	3718      	adds	r7, #24
 8017e18:	46bd      	mov	sp, r7
 8017e1a:	bd80      	pop	{r7, pc}
 8017e1c:	20002474 	.word	0x20002474
 8017e20:	20002478 	.word	0x20002478

08017e24 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8017e24:	b580      	push	{r7, lr}
 8017e26:	b082      	sub	sp, #8
 8017e28:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8017e2a:	f000 f96b 	bl	8018104 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8017e2e:	4b15      	ldr	r3, [pc, #84]	; (8017e84 <prvCheckForValidListAndQueue+0x60>)
 8017e30:	681b      	ldr	r3, [r3, #0]
 8017e32:	2b00      	cmp	r3, #0
 8017e34:	d120      	bne.n	8017e78 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8017e36:	4814      	ldr	r0, [pc, #80]	; (8017e88 <prvCheckForValidListAndQueue+0x64>)
 8017e38:	f7fd fd86 	bl	8015948 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8017e3c:	4813      	ldr	r0, [pc, #76]	; (8017e8c <prvCheckForValidListAndQueue+0x68>)
 8017e3e:	f7fd fd83 	bl	8015948 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8017e42:	4b13      	ldr	r3, [pc, #76]	; (8017e90 <prvCheckForValidListAndQueue+0x6c>)
 8017e44:	4a10      	ldr	r2, [pc, #64]	; (8017e88 <prvCheckForValidListAndQueue+0x64>)
 8017e46:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8017e48:	4b12      	ldr	r3, [pc, #72]	; (8017e94 <prvCheckForValidListAndQueue+0x70>)
 8017e4a:	4a10      	ldr	r2, [pc, #64]	; (8017e8c <prvCheckForValidListAndQueue+0x68>)
 8017e4c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8017e4e:	2300      	movs	r3, #0
 8017e50:	9300      	str	r3, [sp, #0]
 8017e52:	4b11      	ldr	r3, [pc, #68]	; (8017e98 <prvCheckForValidListAndQueue+0x74>)
 8017e54:	4a11      	ldr	r2, [pc, #68]	; (8017e9c <prvCheckForValidListAndQueue+0x78>)
 8017e56:	2110      	movs	r1, #16
 8017e58:	200a      	movs	r0, #10
 8017e5a:	f7fd fe91 	bl	8015b80 <xQueueGenericCreateStatic>
 8017e5e:	4603      	mov	r3, r0
 8017e60:	4a08      	ldr	r2, [pc, #32]	; (8017e84 <prvCheckForValidListAndQueue+0x60>)
 8017e62:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8017e64:	4b07      	ldr	r3, [pc, #28]	; (8017e84 <prvCheckForValidListAndQueue+0x60>)
 8017e66:	681b      	ldr	r3, [r3, #0]
 8017e68:	2b00      	cmp	r3, #0
 8017e6a:	d005      	beq.n	8017e78 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8017e6c:	4b05      	ldr	r3, [pc, #20]	; (8017e84 <prvCheckForValidListAndQueue+0x60>)
 8017e6e:	681b      	ldr	r3, [r3, #0]
 8017e70:	490b      	ldr	r1, [pc, #44]	; (8017ea0 <prvCheckForValidListAndQueue+0x7c>)
 8017e72:	4618      	mov	r0, r3
 8017e74:	f7fe fc4a 	bl	801670c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8017e78:	f000 f974 	bl	8018164 <vPortExitCritical>
}
 8017e7c:	bf00      	nop
 8017e7e:	46bd      	mov	sp, r7
 8017e80:	bd80      	pop	{r7, pc}
 8017e82:	bf00      	nop
 8017e84:	2000247c 	.word	0x2000247c
 8017e88:	2000244c 	.word	0x2000244c
 8017e8c:	20002460 	.word	0x20002460
 8017e90:	20002474 	.word	0x20002474
 8017e94:	20002478 	.word	0x20002478
 8017e98:	20002528 	.word	0x20002528
 8017e9c:	20002488 	.word	0x20002488
 8017ea0:	0801aab4 	.word	0x0801aab4

08017ea4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8017ea4:	b480      	push	{r7}
 8017ea6:	b085      	sub	sp, #20
 8017ea8:	af00      	add	r7, sp, #0
 8017eaa:	60f8      	str	r0, [r7, #12]
 8017eac:	60b9      	str	r1, [r7, #8]
 8017eae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8017eb0:	68fb      	ldr	r3, [r7, #12]
 8017eb2:	3b04      	subs	r3, #4
 8017eb4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8017eb6:	68fb      	ldr	r3, [r7, #12]
 8017eb8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8017ebc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8017ebe:	68fb      	ldr	r3, [r7, #12]
 8017ec0:	3b04      	subs	r3, #4
 8017ec2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8017ec4:	68bb      	ldr	r3, [r7, #8]
 8017ec6:	f023 0201 	bic.w	r2, r3, #1
 8017eca:	68fb      	ldr	r3, [r7, #12]
 8017ecc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8017ece:	68fb      	ldr	r3, [r7, #12]
 8017ed0:	3b04      	subs	r3, #4
 8017ed2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8017ed4:	4a0c      	ldr	r2, [pc, #48]	; (8017f08 <pxPortInitialiseStack+0x64>)
 8017ed6:	68fb      	ldr	r3, [r7, #12]
 8017ed8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8017eda:	68fb      	ldr	r3, [r7, #12]
 8017edc:	3b14      	subs	r3, #20
 8017ede:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8017ee0:	687a      	ldr	r2, [r7, #4]
 8017ee2:	68fb      	ldr	r3, [r7, #12]
 8017ee4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8017ee6:	68fb      	ldr	r3, [r7, #12]
 8017ee8:	3b04      	subs	r3, #4
 8017eea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8017eec:	68fb      	ldr	r3, [r7, #12]
 8017eee:	f06f 0202 	mvn.w	r2, #2
 8017ef2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8017ef4:	68fb      	ldr	r3, [r7, #12]
 8017ef6:	3b20      	subs	r3, #32
 8017ef8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8017efa:	68fb      	ldr	r3, [r7, #12]
}
 8017efc:	4618      	mov	r0, r3
 8017efe:	3714      	adds	r7, #20
 8017f00:	46bd      	mov	sp, r7
 8017f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f06:	4770      	bx	lr
 8017f08:	08017f0d 	.word	0x08017f0d

08017f0c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8017f0c:	b480      	push	{r7}
 8017f0e:	b085      	sub	sp, #20
 8017f10:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8017f12:	2300      	movs	r3, #0
 8017f14:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8017f16:	4b12      	ldr	r3, [pc, #72]	; (8017f60 <prvTaskExitError+0x54>)
 8017f18:	681b      	ldr	r3, [r3, #0]
 8017f1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017f1e:	d00a      	beq.n	8017f36 <prvTaskExitError+0x2a>
	__asm volatile
 8017f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017f24:	f383 8811 	msr	BASEPRI, r3
 8017f28:	f3bf 8f6f 	isb	sy
 8017f2c:	f3bf 8f4f 	dsb	sy
 8017f30:	60fb      	str	r3, [r7, #12]
}
 8017f32:	bf00      	nop
 8017f34:	e7fe      	b.n	8017f34 <prvTaskExitError+0x28>
	__asm volatile
 8017f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017f3a:	f383 8811 	msr	BASEPRI, r3
 8017f3e:	f3bf 8f6f 	isb	sy
 8017f42:	f3bf 8f4f 	dsb	sy
 8017f46:	60bb      	str	r3, [r7, #8]
}
 8017f48:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8017f4a:	bf00      	nop
 8017f4c:	687b      	ldr	r3, [r7, #4]
 8017f4e:	2b00      	cmp	r3, #0
 8017f50:	d0fc      	beq.n	8017f4c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8017f52:	bf00      	nop
 8017f54:	bf00      	nop
 8017f56:	3714      	adds	r7, #20
 8017f58:	46bd      	mov	sp, r7
 8017f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f5e:	4770      	bx	lr
 8017f60:	200013c0 	.word	0x200013c0
	...

08017f70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8017f70:	4b07      	ldr	r3, [pc, #28]	; (8017f90 <pxCurrentTCBConst2>)
 8017f72:	6819      	ldr	r1, [r3, #0]
 8017f74:	6808      	ldr	r0, [r1, #0]
 8017f76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f7a:	f380 8809 	msr	PSP, r0
 8017f7e:	f3bf 8f6f 	isb	sy
 8017f82:	f04f 0000 	mov.w	r0, #0
 8017f86:	f380 8811 	msr	BASEPRI, r0
 8017f8a:	4770      	bx	lr
 8017f8c:	f3af 8000 	nop.w

08017f90 <pxCurrentTCBConst2>:
 8017f90:	20001f4c 	.word	0x20001f4c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8017f94:	bf00      	nop
 8017f96:	bf00      	nop

08017f98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8017f98:	4808      	ldr	r0, [pc, #32]	; (8017fbc <prvPortStartFirstTask+0x24>)
 8017f9a:	6800      	ldr	r0, [r0, #0]
 8017f9c:	6800      	ldr	r0, [r0, #0]
 8017f9e:	f380 8808 	msr	MSP, r0
 8017fa2:	f04f 0000 	mov.w	r0, #0
 8017fa6:	f380 8814 	msr	CONTROL, r0
 8017faa:	b662      	cpsie	i
 8017fac:	b661      	cpsie	f
 8017fae:	f3bf 8f4f 	dsb	sy
 8017fb2:	f3bf 8f6f 	isb	sy
 8017fb6:	df00      	svc	0
 8017fb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8017fba:	bf00      	nop
 8017fbc:	e000ed08 	.word	0xe000ed08

08017fc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8017fc0:	b580      	push	{r7, lr}
 8017fc2:	b086      	sub	sp, #24
 8017fc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8017fc6:	4b46      	ldr	r3, [pc, #280]	; (80180e0 <xPortStartScheduler+0x120>)
 8017fc8:	681b      	ldr	r3, [r3, #0]
 8017fca:	4a46      	ldr	r2, [pc, #280]	; (80180e4 <xPortStartScheduler+0x124>)
 8017fcc:	4293      	cmp	r3, r2
 8017fce:	d10a      	bne.n	8017fe6 <xPortStartScheduler+0x26>
	__asm volatile
 8017fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017fd4:	f383 8811 	msr	BASEPRI, r3
 8017fd8:	f3bf 8f6f 	isb	sy
 8017fdc:	f3bf 8f4f 	dsb	sy
 8017fe0:	613b      	str	r3, [r7, #16]
}
 8017fe2:	bf00      	nop
 8017fe4:	e7fe      	b.n	8017fe4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8017fe6:	4b3e      	ldr	r3, [pc, #248]	; (80180e0 <xPortStartScheduler+0x120>)
 8017fe8:	681b      	ldr	r3, [r3, #0]
 8017fea:	4a3f      	ldr	r2, [pc, #252]	; (80180e8 <xPortStartScheduler+0x128>)
 8017fec:	4293      	cmp	r3, r2
 8017fee:	d10a      	bne.n	8018006 <xPortStartScheduler+0x46>
	__asm volatile
 8017ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017ff4:	f383 8811 	msr	BASEPRI, r3
 8017ff8:	f3bf 8f6f 	isb	sy
 8017ffc:	f3bf 8f4f 	dsb	sy
 8018000:	60fb      	str	r3, [r7, #12]
}
 8018002:	bf00      	nop
 8018004:	e7fe      	b.n	8018004 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8018006:	4b39      	ldr	r3, [pc, #228]	; (80180ec <xPortStartScheduler+0x12c>)
 8018008:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801800a:	697b      	ldr	r3, [r7, #20]
 801800c:	781b      	ldrb	r3, [r3, #0]
 801800e:	b2db      	uxtb	r3, r3
 8018010:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8018012:	697b      	ldr	r3, [r7, #20]
 8018014:	22ff      	movs	r2, #255	; 0xff
 8018016:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8018018:	697b      	ldr	r3, [r7, #20]
 801801a:	781b      	ldrb	r3, [r3, #0]
 801801c:	b2db      	uxtb	r3, r3
 801801e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8018020:	78fb      	ldrb	r3, [r7, #3]
 8018022:	b2db      	uxtb	r3, r3
 8018024:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8018028:	b2da      	uxtb	r2, r3
 801802a:	4b31      	ldr	r3, [pc, #196]	; (80180f0 <xPortStartScheduler+0x130>)
 801802c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801802e:	4b31      	ldr	r3, [pc, #196]	; (80180f4 <xPortStartScheduler+0x134>)
 8018030:	2207      	movs	r2, #7
 8018032:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8018034:	e009      	b.n	801804a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8018036:	4b2f      	ldr	r3, [pc, #188]	; (80180f4 <xPortStartScheduler+0x134>)
 8018038:	681b      	ldr	r3, [r3, #0]
 801803a:	3b01      	subs	r3, #1
 801803c:	4a2d      	ldr	r2, [pc, #180]	; (80180f4 <xPortStartScheduler+0x134>)
 801803e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8018040:	78fb      	ldrb	r3, [r7, #3]
 8018042:	b2db      	uxtb	r3, r3
 8018044:	005b      	lsls	r3, r3, #1
 8018046:	b2db      	uxtb	r3, r3
 8018048:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801804a:	78fb      	ldrb	r3, [r7, #3]
 801804c:	b2db      	uxtb	r3, r3
 801804e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018052:	2b80      	cmp	r3, #128	; 0x80
 8018054:	d0ef      	beq.n	8018036 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8018056:	4b27      	ldr	r3, [pc, #156]	; (80180f4 <xPortStartScheduler+0x134>)
 8018058:	681b      	ldr	r3, [r3, #0]
 801805a:	f1c3 0307 	rsb	r3, r3, #7
 801805e:	2b04      	cmp	r3, #4
 8018060:	d00a      	beq.n	8018078 <xPortStartScheduler+0xb8>
	__asm volatile
 8018062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018066:	f383 8811 	msr	BASEPRI, r3
 801806a:	f3bf 8f6f 	isb	sy
 801806e:	f3bf 8f4f 	dsb	sy
 8018072:	60bb      	str	r3, [r7, #8]
}
 8018074:	bf00      	nop
 8018076:	e7fe      	b.n	8018076 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8018078:	4b1e      	ldr	r3, [pc, #120]	; (80180f4 <xPortStartScheduler+0x134>)
 801807a:	681b      	ldr	r3, [r3, #0]
 801807c:	021b      	lsls	r3, r3, #8
 801807e:	4a1d      	ldr	r2, [pc, #116]	; (80180f4 <xPortStartScheduler+0x134>)
 8018080:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8018082:	4b1c      	ldr	r3, [pc, #112]	; (80180f4 <xPortStartScheduler+0x134>)
 8018084:	681b      	ldr	r3, [r3, #0]
 8018086:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801808a:	4a1a      	ldr	r2, [pc, #104]	; (80180f4 <xPortStartScheduler+0x134>)
 801808c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801808e:	687b      	ldr	r3, [r7, #4]
 8018090:	b2da      	uxtb	r2, r3
 8018092:	697b      	ldr	r3, [r7, #20]
 8018094:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8018096:	4b18      	ldr	r3, [pc, #96]	; (80180f8 <xPortStartScheduler+0x138>)
 8018098:	681b      	ldr	r3, [r3, #0]
 801809a:	4a17      	ldr	r2, [pc, #92]	; (80180f8 <xPortStartScheduler+0x138>)
 801809c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80180a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80180a2:	4b15      	ldr	r3, [pc, #84]	; (80180f8 <xPortStartScheduler+0x138>)
 80180a4:	681b      	ldr	r3, [r3, #0]
 80180a6:	4a14      	ldr	r2, [pc, #80]	; (80180f8 <xPortStartScheduler+0x138>)
 80180a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80180ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80180ae:	f000 f8dd 	bl	801826c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80180b2:	4b12      	ldr	r3, [pc, #72]	; (80180fc <xPortStartScheduler+0x13c>)
 80180b4:	2200      	movs	r2, #0
 80180b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80180b8:	f000 f8fc 	bl	80182b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80180bc:	4b10      	ldr	r3, [pc, #64]	; (8018100 <xPortStartScheduler+0x140>)
 80180be:	681b      	ldr	r3, [r3, #0]
 80180c0:	4a0f      	ldr	r2, [pc, #60]	; (8018100 <xPortStartScheduler+0x140>)
 80180c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80180c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80180c8:	f7ff ff66 	bl	8017f98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80180cc:	f7fe ffec 	bl	80170a8 <vTaskSwitchContext>
	prvTaskExitError();
 80180d0:	f7ff ff1c 	bl	8017f0c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80180d4:	2300      	movs	r3, #0
}
 80180d6:	4618      	mov	r0, r3
 80180d8:	3718      	adds	r7, #24
 80180da:	46bd      	mov	sp, r7
 80180dc:	bd80      	pop	{r7, pc}
 80180de:	bf00      	nop
 80180e0:	e000ed00 	.word	0xe000ed00
 80180e4:	410fc271 	.word	0x410fc271
 80180e8:	410fc270 	.word	0x410fc270
 80180ec:	e000e400 	.word	0xe000e400
 80180f0:	20002578 	.word	0x20002578
 80180f4:	2000257c 	.word	0x2000257c
 80180f8:	e000ed20 	.word	0xe000ed20
 80180fc:	200013c0 	.word	0x200013c0
 8018100:	e000ef34 	.word	0xe000ef34

08018104 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8018104:	b480      	push	{r7}
 8018106:	b083      	sub	sp, #12
 8018108:	af00      	add	r7, sp, #0
	__asm volatile
 801810a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801810e:	f383 8811 	msr	BASEPRI, r3
 8018112:	f3bf 8f6f 	isb	sy
 8018116:	f3bf 8f4f 	dsb	sy
 801811a:	607b      	str	r3, [r7, #4]
}
 801811c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801811e:	4b0f      	ldr	r3, [pc, #60]	; (801815c <vPortEnterCritical+0x58>)
 8018120:	681b      	ldr	r3, [r3, #0]
 8018122:	3301      	adds	r3, #1
 8018124:	4a0d      	ldr	r2, [pc, #52]	; (801815c <vPortEnterCritical+0x58>)
 8018126:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8018128:	4b0c      	ldr	r3, [pc, #48]	; (801815c <vPortEnterCritical+0x58>)
 801812a:	681b      	ldr	r3, [r3, #0]
 801812c:	2b01      	cmp	r3, #1
 801812e:	d10f      	bne.n	8018150 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8018130:	4b0b      	ldr	r3, [pc, #44]	; (8018160 <vPortEnterCritical+0x5c>)
 8018132:	681b      	ldr	r3, [r3, #0]
 8018134:	b2db      	uxtb	r3, r3
 8018136:	2b00      	cmp	r3, #0
 8018138:	d00a      	beq.n	8018150 <vPortEnterCritical+0x4c>
	__asm volatile
 801813a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801813e:	f383 8811 	msr	BASEPRI, r3
 8018142:	f3bf 8f6f 	isb	sy
 8018146:	f3bf 8f4f 	dsb	sy
 801814a:	603b      	str	r3, [r7, #0]
}
 801814c:	bf00      	nop
 801814e:	e7fe      	b.n	801814e <vPortEnterCritical+0x4a>
	}
}
 8018150:	bf00      	nop
 8018152:	370c      	adds	r7, #12
 8018154:	46bd      	mov	sp, r7
 8018156:	f85d 7b04 	ldr.w	r7, [sp], #4
 801815a:	4770      	bx	lr
 801815c:	200013c0 	.word	0x200013c0
 8018160:	e000ed04 	.word	0xe000ed04

08018164 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8018164:	b480      	push	{r7}
 8018166:	b083      	sub	sp, #12
 8018168:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801816a:	4b12      	ldr	r3, [pc, #72]	; (80181b4 <vPortExitCritical+0x50>)
 801816c:	681b      	ldr	r3, [r3, #0]
 801816e:	2b00      	cmp	r3, #0
 8018170:	d10a      	bne.n	8018188 <vPortExitCritical+0x24>
	__asm volatile
 8018172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018176:	f383 8811 	msr	BASEPRI, r3
 801817a:	f3bf 8f6f 	isb	sy
 801817e:	f3bf 8f4f 	dsb	sy
 8018182:	607b      	str	r3, [r7, #4]
}
 8018184:	bf00      	nop
 8018186:	e7fe      	b.n	8018186 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8018188:	4b0a      	ldr	r3, [pc, #40]	; (80181b4 <vPortExitCritical+0x50>)
 801818a:	681b      	ldr	r3, [r3, #0]
 801818c:	3b01      	subs	r3, #1
 801818e:	4a09      	ldr	r2, [pc, #36]	; (80181b4 <vPortExitCritical+0x50>)
 8018190:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8018192:	4b08      	ldr	r3, [pc, #32]	; (80181b4 <vPortExitCritical+0x50>)
 8018194:	681b      	ldr	r3, [r3, #0]
 8018196:	2b00      	cmp	r3, #0
 8018198:	d105      	bne.n	80181a6 <vPortExitCritical+0x42>
 801819a:	2300      	movs	r3, #0
 801819c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801819e:	683b      	ldr	r3, [r7, #0]
 80181a0:	f383 8811 	msr	BASEPRI, r3
}
 80181a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80181a6:	bf00      	nop
 80181a8:	370c      	adds	r7, #12
 80181aa:	46bd      	mov	sp, r7
 80181ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181b0:	4770      	bx	lr
 80181b2:	bf00      	nop
 80181b4:	200013c0 	.word	0x200013c0
	...

080181c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80181c0:	f3ef 8009 	mrs	r0, PSP
 80181c4:	f3bf 8f6f 	isb	sy
 80181c8:	4b15      	ldr	r3, [pc, #84]	; (8018220 <pxCurrentTCBConst>)
 80181ca:	681a      	ldr	r2, [r3, #0]
 80181cc:	f01e 0f10 	tst.w	lr, #16
 80181d0:	bf08      	it	eq
 80181d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80181d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80181da:	6010      	str	r0, [r2, #0]
 80181dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80181e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80181e4:	f380 8811 	msr	BASEPRI, r0
 80181e8:	f3bf 8f4f 	dsb	sy
 80181ec:	f3bf 8f6f 	isb	sy
 80181f0:	f7fe ff5a 	bl	80170a8 <vTaskSwitchContext>
 80181f4:	f04f 0000 	mov.w	r0, #0
 80181f8:	f380 8811 	msr	BASEPRI, r0
 80181fc:	bc09      	pop	{r0, r3}
 80181fe:	6819      	ldr	r1, [r3, #0]
 8018200:	6808      	ldr	r0, [r1, #0]
 8018202:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018206:	f01e 0f10 	tst.w	lr, #16
 801820a:	bf08      	it	eq
 801820c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8018210:	f380 8809 	msr	PSP, r0
 8018214:	f3bf 8f6f 	isb	sy
 8018218:	4770      	bx	lr
 801821a:	bf00      	nop
 801821c:	f3af 8000 	nop.w

08018220 <pxCurrentTCBConst>:
 8018220:	20001f4c 	.word	0x20001f4c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8018224:	bf00      	nop
 8018226:	bf00      	nop

08018228 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8018228:	b580      	push	{r7, lr}
 801822a:	b082      	sub	sp, #8
 801822c:	af00      	add	r7, sp, #0
	__asm volatile
 801822e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018232:	f383 8811 	msr	BASEPRI, r3
 8018236:	f3bf 8f6f 	isb	sy
 801823a:	f3bf 8f4f 	dsb	sy
 801823e:	607b      	str	r3, [r7, #4]
}
 8018240:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8018242:	f7fe fe73 	bl	8016f2c <xTaskIncrementTick>
 8018246:	4603      	mov	r3, r0
 8018248:	2b00      	cmp	r3, #0
 801824a:	d003      	beq.n	8018254 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801824c:	4b06      	ldr	r3, [pc, #24]	; (8018268 <xPortSysTickHandler+0x40>)
 801824e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018252:	601a      	str	r2, [r3, #0]
 8018254:	2300      	movs	r3, #0
 8018256:	603b      	str	r3, [r7, #0]
	__asm volatile
 8018258:	683b      	ldr	r3, [r7, #0]
 801825a:	f383 8811 	msr	BASEPRI, r3
}
 801825e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8018260:	bf00      	nop
 8018262:	3708      	adds	r7, #8
 8018264:	46bd      	mov	sp, r7
 8018266:	bd80      	pop	{r7, pc}
 8018268:	e000ed04 	.word	0xe000ed04

0801826c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801826c:	b480      	push	{r7}
 801826e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8018270:	4b0b      	ldr	r3, [pc, #44]	; (80182a0 <vPortSetupTimerInterrupt+0x34>)
 8018272:	2200      	movs	r2, #0
 8018274:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8018276:	4b0b      	ldr	r3, [pc, #44]	; (80182a4 <vPortSetupTimerInterrupt+0x38>)
 8018278:	2200      	movs	r2, #0
 801827a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801827c:	4b0a      	ldr	r3, [pc, #40]	; (80182a8 <vPortSetupTimerInterrupt+0x3c>)
 801827e:	681b      	ldr	r3, [r3, #0]
 8018280:	4a0a      	ldr	r2, [pc, #40]	; (80182ac <vPortSetupTimerInterrupt+0x40>)
 8018282:	fba2 2303 	umull	r2, r3, r2, r3
 8018286:	099b      	lsrs	r3, r3, #6
 8018288:	4a09      	ldr	r2, [pc, #36]	; (80182b0 <vPortSetupTimerInterrupt+0x44>)
 801828a:	3b01      	subs	r3, #1
 801828c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801828e:	4b04      	ldr	r3, [pc, #16]	; (80182a0 <vPortSetupTimerInterrupt+0x34>)
 8018290:	2207      	movs	r2, #7
 8018292:	601a      	str	r2, [r3, #0]
}
 8018294:	bf00      	nop
 8018296:	46bd      	mov	sp, r7
 8018298:	f85d 7b04 	ldr.w	r7, [sp], #4
 801829c:	4770      	bx	lr
 801829e:	bf00      	nop
 80182a0:	e000e010 	.word	0xe000e010
 80182a4:	e000e018 	.word	0xe000e018
 80182a8:	20000004 	.word	0x20000004
 80182ac:	10624dd3 	.word	0x10624dd3
 80182b0:	e000e014 	.word	0xe000e014

080182b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80182b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80182c4 <vPortEnableVFP+0x10>
 80182b8:	6801      	ldr	r1, [r0, #0]
 80182ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80182be:	6001      	str	r1, [r0, #0]
 80182c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80182c2:	bf00      	nop
 80182c4:	e000ed88 	.word	0xe000ed88

080182c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80182c8:	b480      	push	{r7}
 80182ca:	b085      	sub	sp, #20
 80182cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80182ce:	f3ef 8305 	mrs	r3, IPSR
 80182d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80182d4:	68fb      	ldr	r3, [r7, #12]
 80182d6:	2b0f      	cmp	r3, #15
 80182d8:	d914      	bls.n	8018304 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80182da:	4a17      	ldr	r2, [pc, #92]	; (8018338 <vPortValidateInterruptPriority+0x70>)
 80182dc:	68fb      	ldr	r3, [r7, #12]
 80182de:	4413      	add	r3, r2
 80182e0:	781b      	ldrb	r3, [r3, #0]
 80182e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80182e4:	4b15      	ldr	r3, [pc, #84]	; (801833c <vPortValidateInterruptPriority+0x74>)
 80182e6:	781b      	ldrb	r3, [r3, #0]
 80182e8:	7afa      	ldrb	r2, [r7, #11]
 80182ea:	429a      	cmp	r2, r3
 80182ec:	d20a      	bcs.n	8018304 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80182ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80182f2:	f383 8811 	msr	BASEPRI, r3
 80182f6:	f3bf 8f6f 	isb	sy
 80182fa:	f3bf 8f4f 	dsb	sy
 80182fe:	607b      	str	r3, [r7, #4]
}
 8018300:	bf00      	nop
 8018302:	e7fe      	b.n	8018302 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8018304:	4b0e      	ldr	r3, [pc, #56]	; (8018340 <vPortValidateInterruptPriority+0x78>)
 8018306:	681b      	ldr	r3, [r3, #0]
 8018308:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801830c:	4b0d      	ldr	r3, [pc, #52]	; (8018344 <vPortValidateInterruptPriority+0x7c>)
 801830e:	681b      	ldr	r3, [r3, #0]
 8018310:	429a      	cmp	r2, r3
 8018312:	d90a      	bls.n	801832a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8018314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018318:	f383 8811 	msr	BASEPRI, r3
 801831c:	f3bf 8f6f 	isb	sy
 8018320:	f3bf 8f4f 	dsb	sy
 8018324:	603b      	str	r3, [r7, #0]
}
 8018326:	bf00      	nop
 8018328:	e7fe      	b.n	8018328 <vPortValidateInterruptPriority+0x60>
	}
 801832a:	bf00      	nop
 801832c:	3714      	adds	r7, #20
 801832e:	46bd      	mov	sp, r7
 8018330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018334:	4770      	bx	lr
 8018336:	bf00      	nop
 8018338:	e000e3f0 	.word	0xe000e3f0
 801833c:	20002578 	.word	0x20002578
 8018340:	e000ed0c 	.word	0xe000ed0c
 8018344:	2000257c 	.word	0x2000257c

08018348 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8018348:	b580      	push	{r7, lr}
 801834a:	b08a      	sub	sp, #40	; 0x28
 801834c:	af00      	add	r7, sp, #0
 801834e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8018350:	2300      	movs	r3, #0
 8018352:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8018354:	f7fe fd18 	bl	8016d88 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8018358:	4b5b      	ldr	r3, [pc, #364]	; (80184c8 <pvPortMalloc+0x180>)
 801835a:	681b      	ldr	r3, [r3, #0]
 801835c:	2b00      	cmp	r3, #0
 801835e:	d101      	bne.n	8018364 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8018360:	f000 f920 	bl	80185a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8018364:	4b59      	ldr	r3, [pc, #356]	; (80184cc <pvPortMalloc+0x184>)
 8018366:	681a      	ldr	r2, [r3, #0]
 8018368:	687b      	ldr	r3, [r7, #4]
 801836a:	4013      	ands	r3, r2
 801836c:	2b00      	cmp	r3, #0
 801836e:	f040 8093 	bne.w	8018498 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8018372:	687b      	ldr	r3, [r7, #4]
 8018374:	2b00      	cmp	r3, #0
 8018376:	d01d      	beq.n	80183b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8018378:	2208      	movs	r2, #8
 801837a:	687b      	ldr	r3, [r7, #4]
 801837c:	4413      	add	r3, r2
 801837e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8018380:	687b      	ldr	r3, [r7, #4]
 8018382:	f003 0307 	and.w	r3, r3, #7
 8018386:	2b00      	cmp	r3, #0
 8018388:	d014      	beq.n	80183b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801838a:	687b      	ldr	r3, [r7, #4]
 801838c:	f023 0307 	bic.w	r3, r3, #7
 8018390:	3308      	adds	r3, #8
 8018392:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8018394:	687b      	ldr	r3, [r7, #4]
 8018396:	f003 0307 	and.w	r3, r3, #7
 801839a:	2b00      	cmp	r3, #0
 801839c:	d00a      	beq.n	80183b4 <pvPortMalloc+0x6c>
	__asm volatile
 801839e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80183a2:	f383 8811 	msr	BASEPRI, r3
 80183a6:	f3bf 8f6f 	isb	sy
 80183aa:	f3bf 8f4f 	dsb	sy
 80183ae:	617b      	str	r3, [r7, #20]
}
 80183b0:	bf00      	nop
 80183b2:	e7fe      	b.n	80183b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80183b4:	687b      	ldr	r3, [r7, #4]
 80183b6:	2b00      	cmp	r3, #0
 80183b8:	d06e      	beq.n	8018498 <pvPortMalloc+0x150>
 80183ba:	4b45      	ldr	r3, [pc, #276]	; (80184d0 <pvPortMalloc+0x188>)
 80183bc:	681b      	ldr	r3, [r3, #0]
 80183be:	687a      	ldr	r2, [r7, #4]
 80183c0:	429a      	cmp	r2, r3
 80183c2:	d869      	bhi.n	8018498 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80183c4:	4b43      	ldr	r3, [pc, #268]	; (80184d4 <pvPortMalloc+0x18c>)
 80183c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80183c8:	4b42      	ldr	r3, [pc, #264]	; (80184d4 <pvPortMalloc+0x18c>)
 80183ca:	681b      	ldr	r3, [r3, #0]
 80183cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80183ce:	e004      	b.n	80183da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80183d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80183d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80183d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80183d6:	681b      	ldr	r3, [r3, #0]
 80183d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80183da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80183dc:	685b      	ldr	r3, [r3, #4]
 80183de:	687a      	ldr	r2, [r7, #4]
 80183e0:	429a      	cmp	r2, r3
 80183e2:	d903      	bls.n	80183ec <pvPortMalloc+0xa4>
 80183e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80183e6:	681b      	ldr	r3, [r3, #0]
 80183e8:	2b00      	cmp	r3, #0
 80183ea:	d1f1      	bne.n	80183d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80183ec:	4b36      	ldr	r3, [pc, #216]	; (80184c8 <pvPortMalloc+0x180>)
 80183ee:	681b      	ldr	r3, [r3, #0]
 80183f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80183f2:	429a      	cmp	r2, r3
 80183f4:	d050      	beq.n	8018498 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80183f6:	6a3b      	ldr	r3, [r7, #32]
 80183f8:	681b      	ldr	r3, [r3, #0]
 80183fa:	2208      	movs	r2, #8
 80183fc:	4413      	add	r3, r2
 80183fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8018400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018402:	681a      	ldr	r2, [r3, #0]
 8018404:	6a3b      	ldr	r3, [r7, #32]
 8018406:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8018408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801840a:	685a      	ldr	r2, [r3, #4]
 801840c:	687b      	ldr	r3, [r7, #4]
 801840e:	1ad2      	subs	r2, r2, r3
 8018410:	2308      	movs	r3, #8
 8018412:	005b      	lsls	r3, r3, #1
 8018414:	429a      	cmp	r2, r3
 8018416:	d91f      	bls.n	8018458 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8018418:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801841a:	687b      	ldr	r3, [r7, #4]
 801841c:	4413      	add	r3, r2
 801841e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8018420:	69bb      	ldr	r3, [r7, #24]
 8018422:	f003 0307 	and.w	r3, r3, #7
 8018426:	2b00      	cmp	r3, #0
 8018428:	d00a      	beq.n	8018440 <pvPortMalloc+0xf8>
	__asm volatile
 801842a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801842e:	f383 8811 	msr	BASEPRI, r3
 8018432:	f3bf 8f6f 	isb	sy
 8018436:	f3bf 8f4f 	dsb	sy
 801843a:	613b      	str	r3, [r7, #16]
}
 801843c:	bf00      	nop
 801843e:	e7fe      	b.n	801843e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8018440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018442:	685a      	ldr	r2, [r3, #4]
 8018444:	687b      	ldr	r3, [r7, #4]
 8018446:	1ad2      	subs	r2, r2, r3
 8018448:	69bb      	ldr	r3, [r7, #24]
 801844a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801844c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801844e:	687a      	ldr	r2, [r7, #4]
 8018450:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8018452:	69b8      	ldr	r0, [r7, #24]
 8018454:	f000 f90a 	bl	801866c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8018458:	4b1d      	ldr	r3, [pc, #116]	; (80184d0 <pvPortMalloc+0x188>)
 801845a:	681a      	ldr	r2, [r3, #0]
 801845c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801845e:	685b      	ldr	r3, [r3, #4]
 8018460:	1ad3      	subs	r3, r2, r3
 8018462:	4a1b      	ldr	r2, [pc, #108]	; (80184d0 <pvPortMalloc+0x188>)
 8018464:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8018466:	4b1a      	ldr	r3, [pc, #104]	; (80184d0 <pvPortMalloc+0x188>)
 8018468:	681a      	ldr	r2, [r3, #0]
 801846a:	4b1b      	ldr	r3, [pc, #108]	; (80184d8 <pvPortMalloc+0x190>)
 801846c:	681b      	ldr	r3, [r3, #0]
 801846e:	429a      	cmp	r2, r3
 8018470:	d203      	bcs.n	801847a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8018472:	4b17      	ldr	r3, [pc, #92]	; (80184d0 <pvPortMalloc+0x188>)
 8018474:	681b      	ldr	r3, [r3, #0]
 8018476:	4a18      	ldr	r2, [pc, #96]	; (80184d8 <pvPortMalloc+0x190>)
 8018478:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801847a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801847c:	685a      	ldr	r2, [r3, #4]
 801847e:	4b13      	ldr	r3, [pc, #76]	; (80184cc <pvPortMalloc+0x184>)
 8018480:	681b      	ldr	r3, [r3, #0]
 8018482:	431a      	orrs	r2, r3
 8018484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018486:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8018488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801848a:	2200      	movs	r2, #0
 801848c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801848e:	4b13      	ldr	r3, [pc, #76]	; (80184dc <pvPortMalloc+0x194>)
 8018490:	681b      	ldr	r3, [r3, #0]
 8018492:	3301      	adds	r3, #1
 8018494:	4a11      	ldr	r2, [pc, #68]	; (80184dc <pvPortMalloc+0x194>)
 8018496:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8018498:	f7fe fc84 	bl	8016da4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801849c:	69fb      	ldr	r3, [r7, #28]
 801849e:	f003 0307 	and.w	r3, r3, #7
 80184a2:	2b00      	cmp	r3, #0
 80184a4:	d00a      	beq.n	80184bc <pvPortMalloc+0x174>
	__asm volatile
 80184a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80184aa:	f383 8811 	msr	BASEPRI, r3
 80184ae:	f3bf 8f6f 	isb	sy
 80184b2:	f3bf 8f4f 	dsb	sy
 80184b6:	60fb      	str	r3, [r7, #12]
}
 80184b8:	bf00      	nop
 80184ba:	e7fe      	b.n	80184ba <pvPortMalloc+0x172>
	return pvReturn;
 80184bc:	69fb      	ldr	r3, [r7, #28]
}
 80184be:	4618      	mov	r0, r3
 80184c0:	3728      	adds	r7, #40	; 0x28
 80184c2:	46bd      	mov	sp, r7
 80184c4:	bd80      	pop	{r7, pc}
 80184c6:	bf00      	nop
 80184c8:	2001ac28 	.word	0x2001ac28
 80184cc:	2001ac3c 	.word	0x2001ac3c
 80184d0:	2001ac2c 	.word	0x2001ac2c
 80184d4:	2001ac20 	.word	0x2001ac20
 80184d8:	2001ac30 	.word	0x2001ac30
 80184dc:	2001ac34 	.word	0x2001ac34

080184e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80184e0:	b580      	push	{r7, lr}
 80184e2:	b086      	sub	sp, #24
 80184e4:	af00      	add	r7, sp, #0
 80184e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80184e8:	687b      	ldr	r3, [r7, #4]
 80184ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80184ec:	687b      	ldr	r3, [r7, #4]
 80184ee:	2b00      	cmp	r3, #0
 80184f0:	d04d      	beq.n	801858e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80184f2:	2308      	movs	r3, #8
 80184f4:	425b      	negs	r3, r3
 80184f6:	697a      	ldr	r2, [r7, #20]
 80184f8:	4413      	add	r3, r2
 80184fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80184fc:	697b      	ldr	r3, [r7, #20]
 80184fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8018500:	693b      	ldr	r3, [r7, #16]
 8018502:	685a      	ldr	r2, [r3, #4]
 8018504:	4b24      	ldr	r3, [pc, #144]	; (8018598 <vPortFree+0xb8>)
 8018506:	681b      	ldr	r3, [r3, #0]
 8018508:	4013      	ands	r3, r2
 801850a:	2b00      	cmp	r3, #0
 801850c:	d10a      	bne.n	8018524 <vPortFree+0x44>
	__asm volatile
 801850e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018512:	f383 8811 	msr	BASEPRI, r3
 8018516:	f3bf 8f6f 	isb	sy
 801851a:	f3bf 8f4f 	dsb	sy
 801851e:	60fb      	str	r3, [r7, #12]
}
 8018520:	bf00      	nop
 8018522:	e7fe      	b.n	8018522 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8018524:	693b      	ldr	r3, [r7, #16]
 8018526:	681b      	ldr	r3, [r3, #0]
 8018528:	2b00      	cmp	r3, #0
 801852a:	d00a      	beq.n	8018542 <vPortFree+0x62>
	__asm volatile
 801852c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018530:	f383 8811 	msr	BASEPRI, r3
 8018534:	f3bf 8f6f 	isb	sy
 8018538:	f3bf 8f4f 	dsb	sy
 801853c:	60bb      	str	r3, [r7, #8]
}
 801853e:	bf00      	nop
 8018540:	e7fe      	b.n	8018540 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8018542:	693b      	ldr	r3, [r7, #16]
 8018544:	685a      	ldr	r2, [r3, #4]
 8018546:	4b14      	ldr	r3, [pc, #80]	; (8018598 <vPortFree+0xb8>)
 8018548:	681b      	ldr	r3, [r3, #0]
 801854a:	4013      	ands	r3, r2
 801854c:	2b00      	cmp	r3, #0
 801854e:	d01e      	beq.n	801858e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8018550:	693b      	ldr	r3, [r7, #16]
 8018552:	681b      	ldr	r3, [r3, #0]
 8018554:	2b00      	cmp	r3, #0
 8018556:	d11a      	bne.n	801858e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8018558:	693b      	ldr	r3, [r7, #16]
 801855a:	685a      	ldr	r2, [r3, #4]
 801855c:	4b0e      	ldr	r3, [pc, #56]	; (8018598 <vPortFree+0xb8>)
 801855e:	681b      	ldr	r3, [r3, #0]
 8018560:	43db      	mvns	r3, r3
 8018562:	401a      	ands	r2, r3
 8018564:	693b      	ldr	r3, [r7, #16]
 8018566:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8018568:	f7fe fc0e 	bl	8016d88 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801856c:	693b      	ldr	r3, [r7, #16]
 801856e:	685a      	ldr	r2, [r3, #4]
 8018570:	4b0a      	ldr	r3, [pc, #40]	; (801859c <vPortFree+0xbc>)
 8018572:	681b      	ldr	r3, [r3, #0]
 8018574:	4413      	add	r3, r2
 8018576:	4a09      	ldr	r2, [pc, #36]	; (801859c <vPortFree+0xbc>)
 8018578:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801857a:	6938      	ldr	r0, [r7, #16]
 801857c:	f000 f876 	bl	801866c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8018580:	4b07      	ldr	r3, [pc, #28]	; (80185a0 <vPortFree+0xc0>)
 8018582:	681b      	ldr	r3, [r3, #0]
 8018584:	3301      	adds	r3, #1
 8018586:	4a06      	ldr	r2, [pc, #24]	; (80185a0 <vPortFree+0xc0>)
 8018588:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801858a:	f7fe fc0b 	bl	8016da4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801858e:	bf00      	nop
 8018590:	3718      	adds	r7, #24
 8018592:	46bd      	mov	sp, r7
 8018594:	bd80      	pop	{r7, pc}
 8018596:	bf00      	nop
 8018598:	2001ac3c 	.word	0x2001ac3c
 801859c:	2001ac2c 	.word	0x2001ac2c
 80185a0:	2001ac38 	.word	0x2001ac38

080185a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80185a4:	b480      	push	{r7}
 80185a6:	b085      	sub	sp, #20
 80185a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80185aa:	4b29      	ldr	r3, [pc, #164]	; (8018650 <prvHeapInit+0xac>)
 80185ac:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80185ae:	4b29      	ldr	r3, [pc, #164]	; (8018654 <prvHeapInit+0xb0>)
 80185b0:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80185b2:	68fb      	ldr	r3, [r7, #12]
 80185b4:	f003 0307 	and.w	r3, r3, #7
 80185b8:	2b00      	cmp	r3, #0
 80185ba:	d00c      	beq.n	80185d6 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80185bc:	68fb      	ldr	r3, [r7, #12]
 80185be:	3307      	adds	r3, #7
 80185c0:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80185c2:	68fb      	ldr	r3, [r7, #12]
 80185c4:	f023 0307 	bic.w	r3, r3, #7
 80185c8:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80185ca:	68ba      	ldr	r2, [r7, #8]
 80185cc:	68fb      	ldr	r3, [r7, #12]
 80185ce:	1ad3      	subs	r3, r2, r3
 80185d0:	4a20      	ldr	r2, [pc, #128]	; (8018654 <prvHeapInit+0xb0>)
 80185d2:	4413      	add	r3, r2
 80185d4:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80185d6:	68fb      	ldr	r3, [r7, #12]
 80185d8:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80185da:	4a1f      	ldr	r2, [pc, #124]	; (8018658 <prvHeapInit+0xb4>)
 80185dc:	687b      	ldr	r3, [r7, #4]
 80185de:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80185e0:	4b1d      	ldr	r3, [pc, #116]	; (8018658 <prvHeapInit+0xb4>)
 80185e2:	2200      	movs	r2, #0
 80185e4:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80185e6:	687b      	ldr	r3, [r7, #4]
 80185e8:	68ba      	ldr	r2, [r7, #8]
 80185ea:	4413      	add	r3, r2
 80185ec:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80185ee:	2208      	movs	r2, #8
 80185f0:	68fb      	ldr	r3, [r7, #12]
 80185f2:	1a9b      	subs	r3, r3, r2
 80185f4:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80185f6:	68fb      	ldr	r3, [r7, #12]
 80185f8:	f023 0307 	bic.w	r3, r3, #7
 80185fc:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80185fe:	68fb      	ldr	r3, [r7, #12]
 8018600:	4a16      	ldr	r2, [pc, #88]	; (801865c <prvHeapInit+0xb8>)
 8018602:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8018604:	4b15      	ldr	r3, [pc, #84]	; (801865c <prvHeapInit+0xb8>)
 8018606:	681b      	ldr	r3, [r3, #0]
 8018608:	2200      	movs	r2, #0
 801860a:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801860c:	4b13      	ldr	r3, [pc, #76]	; (801865c <prvHeapInit+0xb8>)
 801860e:	681b      	ldr	r3, [r3, #0]
 8018610:	2200      	movs	r2, #0
 8018612:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8018614:	687b      	ldr	r3, [r7, #4]
 8018616:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8018618:	683b      	ldr	r3, [r7, #0]
 801861a:	68fa      	ldr	r2, [r7, #12]
 801861c:	1ad2      	subs	r2, r2, r3
 801861e:	683b      	ldr	r3, [r7, #0]
 8018620:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8018622:	4b0e      	ldr	r3, [pc, #56]	; (801865c <prvHeapInit+0xb8>)
 8018624:	681a      	ldr	r2, [r3, #0]
 8018626:	683b      	ldr	r3, [r7, #0]
 8018628:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801862a:	683b      	ldr	r3, [r7, #0]
 801862c:	685b      	ldr	r3, [r3, #4]
 801862e:	4a0c      	ldr	r2, [pc, #48]	; (8018660 <prvHeapInit+0xbc>)
 8018630:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8018632:	683b      	ldr	r3, [r7, #0]
 8018634:	685b      	ldr	r3, [r3, #4]
 8018636:	4a0b      	ldr	r2, [pc, #44]	; (8018664 <prvHeapInit+0xc0>)
 8018638:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801863a:	4b0b      	ldr	r3, [pc, #44]	; (8018668 <prvHeapInit+0xc4>)
 801863c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8018640:	601a      	str	r2, [r3, #0]
}
 8018642:	bf00      	nop
 8018644:	3714      	adds	r7, #20
 8018646:	46bd      	mov	sp, r7
 8018648:	f85d 7b04 	ldr.w	r7, [sp], #4
 801864c:	4770      	bx	lr
 801864e:	bf00      	nop
 8018650:	000186a0 	.word	0x000186a0
 8018654:	20002580 	.word	0x20002580
 8018658:	2001ac20 	.word	0x2001ac20
 801865c:	2001ac28 	.word	0x2001ac28
 8018660:	2001ac30 	.word	0x2001ac30
 8018664:	2001ac2c 	.word	0x2001ac2c
 8018668:	2001ac3c 	.word	0x2001ac3c

0801866c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801866c:	b480      	push	{r7}
 801866e:	b085      	sub	sp, #20
 8018670:	af00      	add	r7, sp, #0
 8018672:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8018674:	4b28      	ldr	r3, [pc, #160]	; (8018718 <prvInsertBlockIntoFreeList+0xac>)
 8018676:	60fb      	str	r3, [r7, #12]
 8018678:	e002      	b.n	8018680 <prvInsertBlockIntoFreeList+0x14>
 801867a:	68fb      	ldr	r3, [r7, #12]
 801867c:	681b      	ldr	r3, [r3, #0]
 801867e:	60fb      	str	r3, [r7, #12]
 8018680:	68fb      	ldr	r3, [r7, #12]
 8018682:	681b      	ldr	r3, [r3, #0]
 8018684:	687a      	ldr	r2, [r7, #4]
 8018686:	429a      	cmp	r2, r3
 8018688:	d8f7      	bhi.n	801867a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801868a:	68fb      	ldr	r3, [r7, #12]
 801868c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801868e:	68fb      	ldr	r3, [r7, #12]
 8018690:	685b      	ldr	r3, [r3, #4]
 8018692:	68ba      	ldr	r2, [r7, #8]
 8018694:	4413      	add	r3, r2
 8018696:	687a      	ldr	r2, [r7, #4]
 8018698:	429a      	cmp	r2, r3
 801869a:	d108      	bne.n	80186ae <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801869c:	68fb      	ldr	r3, [r7, #12]
 801869e:	685a      	ldr	r2, [r3, #4]
 80186a0:	687b      	ldr	r3, [r7, #4]
 80186a2:	685b      	ldr	r3, [r3, #4]
 80186a4:	441a      	add	r2, r3
 80186a6:	68fb      	ldr	r3, [r7, #12]
 80186a8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80186aa:	68fb      	ldr	r3, [r7, #12]
 80186ac:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80186ae:	687b      	ldr	r3, [r7, #4]
 80186b0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80186b2:	687b      	ldr	r3, [r7, #4]
 80186b4:	685b      	ldr	r3, [r3, #4]
 80186b6:	68ba      	ldr	r2, [r7, #8]
 80186b8:	441a      	add	r2, r3
 80186ba:	68fb      	ldr	r3, [r7, #12]
 80186bc:	681b      	ldr	r3, [r3, #0]
 80186be:	429a      	cmp	r2, r3
 80186c0:	d118      	bne.n	80186f4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80186c2:	68fb      	ldr	r3, [r7, #12]
 80186c4:	681a      	ldr	r2, [r3, #0]
 80186c6:	4b15      	ldr	r3, [pc, #84]	; (801871c <prvInsertBlockIntoFreeList+0xb0>)
 80186c8:	681b      	ldr	r3, [r3, #0]
 80186ca:	429a      	cmp	r2, r3
 80186cc:	d00d      	beq.n	80186ea <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80186ce:	687b      	ldr	r3, [r7, #4]
 80186d0:	685a      	ldr	r2, [r3, #4]
 80186d2:	68fb      	ldr	r3, [r7, #12]
 80186d4:	681b      	ldr	r3, [r3, #0]
 80186d6:	685b      	ldr	r3, [r3, #4]
 80186d8:	441a      	add	r2, r3
 80186da:	687b      	ldr	r3, [r7, #4]
 80186dc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80186de:	68fb      	ldr	r3, [r7, #12]
 80186e0:	681b      	ldr	r3, [r3, #0]
 80186e2:	681a      	ldr	r2, [r3, #0]
 80186e4:	687b      	ldr	r3, [r7, #4]
 80186e6:	601a      	str	r2, [r3, #0]
 80186e8:	e008      	b.n	80186fc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80186ea:	4b0c      	ldr	r3, [pc, #48]	; (801871c <prvInsertBlockIntoFreeList+0xb0>)
 80186ec:	681a      	ldr	r2, [r3, #0]
 80186ee:	687b      	ldr	r3, [r7, #4]
 80186f0:	601a      	str	r2, [r3, #0]
 80186f2:	e003      	b.n	80186fc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80186f4:	68fb      	ldr	r3, [r7, #12]
 80186f6:	681a      	ldr	r2, [r3, #0]
 80186f8:	687b      	ldr	r3, [r7, #4]
 80186fa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80186fc:	68fa      	ldr	r2, [r7, #12]
 80186fe:	687b      	ldr	r3, [r7, #4]
 8018700:	429a      	cmp	r2, r3
 8018702:	d002      	beq.n	801870a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8018704:	68fb      	ldr	r3, [r7, #12]
 8018706:	687a      	ldr	r2, [r7, #4]
 8018708:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801870a:	bf00      	nop
 801870c:	3714      	adds	r7, #20
 801870e:	46bd      	mov	sp, r7
 8018710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018714:	4770      	bx	lr
 8018716:	bf00      	nop
 8018718:	2001ac20 	.word	0x2001ac20
 801871c:	2001ac28 	.word	0x2001ac28

08018720 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8018720:	b480      	push	{r7}
 8018722:	b083      	sub	sp, #12
 8018724:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8018726:	4b24      	ldr	r3, [pc, #144]	; (80187b8 <_DoInit+0x98>)
 8018728:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 801872a:	687b      	ldr	r3, [r7, #4]
 801872c:	2203      	movs	r2, #3
 801872e:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8018730:	687b      	ldr	r3, [r7, #4]
 8018732:	2203      	movs	r2, #3
 8018734:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8018736:	687b      	ldr	r3, [r7, #4]
 8018738:	4a20      	ldr	r2, [pc, #128]	; (80187bc <_DoInit+0x9c>)
 801873a:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 801873c:	687b      	ldr	r3, [r7, #4]
 801873e:	4a20      	ldr	r2, [pc, #128]	; (80187c0 <_DoInit+0xa0>)
 8018740:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8018742:	687b      	ldr	r3, [r7, #4]
 8018744:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8018748:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 801874a:	687b      	ldr	r3, [r7, #4]
 801874c:	2200      	movs	r2, #0
 801874e:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8018750:	687b      	ldr	r3, [r7, #4]
 8018752:	2200      	movs	r2, #0
 8018754:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8018756:	687b      	ldr	r3, [r7, #4]
 8018758:	2200      	movs	r2, #0
 801875a:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 801875c:	687b      	ldr	r3, [r7, #4]
 801875e:	4a17      	ldr	r2, [pc, #92]	; (80187bc <_DoInit+0x9c>)
 8018760:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8018762:	687b      	ldr	r3, [r7, #4]
 8018764:	4a17      	ldr	r2, [pc, #92]	; (80187c4 <_DoInit+0xa4>)
 8018766:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8018768:	687b      	ldr	r3, [r7, #4]
 801876a:	2210      	movs	r2, #16
 801876c:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 801876e:	687b      	ldr	r3, [r7, #4]
 8018770:	2200      	movs	r2, #0
 8018772:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8018774:	687b      	ldr	r3, [r7, #4]
 8018776:	2200      	movs	r2, #0
 8018778:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 801877a:	687b      	ldr	r3, [r7, #4]
 801877c:	2200      	movs	r2, #0
 801877e:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8018780:	687b      	ldr	r3, [r7, #4]
 8018782:	3307      	adds	r3, #7
 8018784:	4a10      	ldr	r2, [pc, #64]	; (80187c8 <_DoInit+0xa8>)
 8018786:	6810      	ldr	r0, [r2, #0]
 8018788:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 801878a:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 801878e:	687b      	ldr	r3, [r7, #4]
 8018790:	4a0e      	ldr	r2, [pc, #56]	; (80187cc <_DoInit+0xac>)
 8018792:	6810      	ldr	r0, [r2, #0]
 8018794:	6018      	str	r0, [r3, #0]
 8018796:	8891      	ldrh	r1, [r2, #4]
 8018798:	7992      	ldrb	r2, [r2, #6]
 801879a:	8099      	strh	r1, [r3, #4]
 801879c:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 801879e:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 80187a2:	687b      	ldr	r3, [r7, #4]
 80187a4:	2220      	movs	r2, #32
 80187a6:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80187a8:	f3bf 8f5f 	dmb	sy
}
 80187ac:	bf00      	nop
 80187ae:	370c      	adds	r7, #12
 80187b0:	46bd      	mov	sp, r7
 80187b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187b6:	4770      	bx	lr
 80187b8:	2001e970 	.word	0x2001e970
 80187bc:	0801aabc 	.word	0x0801aabc
 80187c0:	2001ac40 	.word	0x2001ac40
 80187c4:	2001b040 	.word	0x2001b040
 80187c8:	0801aac8 	.word	0x0801aac8
 80187cc:	0801aacc 	.word	0x0801aacc

080187d0 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80187d0:	b580      	push	{r7, lr}
 80187d2:	b08c      	sub	sp, #48	; 0x30
 80187d4:	af00      	add	r7, sp, #0
 80187d6:	60f8      	str	r0, [r7, #12]
 80187d8:	60b9      	str	r1, [r7, #8]
 80187da:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80187dc:	4b3e      	ldr	r3, [pc, #248]	; (80188d8 <SEGGER_RTT_ReadNoLock+0x108>)
 80187de:	623b      	str	r3, [r7, #32]
 80187e0:	6a3b      	ldr	r3, [r7, #32]
 80187e2:	781b      	ldrb	r3, [r3, #0]
 80187e4:	b2db      	uxtb	r3, r3
 80187e6:	2b00      	cmp	r3, #0
 80187e8:	d101      	bne.n	80187ee <SEGGER_RTT_ReadNoLock+0x1e>
 80187ea:	f7ff ff99 	bl	8018720 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80187ee:	68fa      	ldr	r2, [r7, #12]
 80187f0:	4613      	mov	r3, r2
 80187f2:	005b      	lsls	r3, r3, #1
 80187f4:	4413      	add	r3, r2
 80187f6:	00db      	lsls	r3, r3, #3
 80187f8:	3360      	adds	r3, #96	; 0x60
 80187fa:	4a37      	ldr	r2, [pc, #220]	; (80188d8 <SEGGER_RTT_ReadNoLock+0x108>)
 80187fc:	4413      	add	r3, r2
 80187fe:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8018800:	68bb      	ldr	r3, [r7, #8]
 8018802:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8018804:	69fb      	ldr	r3, [r7, #28]
 8018806:	691b      	ldr	r3, [r3, #16]
 8018808:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 801880a:	69fb      	ldr	r3, [r7, #28]
 801880c:	68db      	ldr	r3, [r3, #12]
 801880e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8018810:	2300      	movs	r3, #0
 8018812:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8018814:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018816:	69bb      	ldr	r3, [r7, #24]
 8018818:	429a      	cmp	r2, r3
 801881a:	d92b      	bls.n	8018874 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 801881c:	69fb      	ldr	r3, [r7, #28]
 801881e:	689a      	ldr	r2, [r3, #8]
 8018820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018822:	1ad3      	subs	r3, r2, r3
 8018824:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8018826:	697a      	ldr	r2, [r7, #20]
 8018828:	687b      	ldr	r3, [r7, #4]
 801882a:	4293      	cmp	r3, r2
 801882c:	bf28      	it	cs
 801882e:	4613      	movcs	r3, r2
 8018830:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8018832:	69fb      	ldr	r3, [r7, #28]
 8018834:	685a      	ldr	r2, [r3, #4]
 8018836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018838:	4413      	add	r3, r2
 801883a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 801883c:	697a      	ldr	r2, [r7, #20]
 801883e:	6939      	ldr	r1, [r7, #16]
 8018840:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018842:	f001 fa9b 	bl	8019d7c <memcpy>
    NumBytesRead += NumBytesRem;
 8018846:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018848:	697b      	ldr	r3, [r7, #20]
 801884a:	4413      	add	r3, r2
 801884c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 801884e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018850:	697b      	ldr	r3, [r7, #20]
 8018852:	4413      	add	r3, r2
 8018854:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8018856:	687a      	ldr	r2, [r7, #4]
 8018858:	697b      	ldr	r3, [r7, #20]
 801885a:	1ad3      	subs	r3, r2, r3
 801885c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 801885e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018860:	697b      	ldr	r3, [r7, #20]
 8018862:	4413      	add	r3, r2
 8018864:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8018866:	69fb      	ldr	r3, [r7, #28]
 8018868:	689b      	ldr	r3, [r3, #8]
 801886a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801886c:	429a      	cmp	r2, r3
 801886e:	d101      	bne.n	8018874 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8018870:	2300      	movs	r3, #0
 8018872:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8018874:	69ba      	ldr	r2, [r7, #24]
 8018876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018878:	1ad3      	subs	r3, r2, r3
 801887a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 801887c:	697a      	ldr	r2, [r7, #20]
 801887e:	687b      	ldr	r3, [r7, #4]
 8018880:	4293      	cmp	r3, r2
 8018882:	bf28      	it	cs
 8018884:	4613      	movcs	r3, r2
 8018886:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8018888:	697b      	ldr	r3, [r7, #20]
 801888a:	2b00      	cmp	r3, #0
 801888c:	d019      	beq.n	80188c2 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 801888e:	69fb      	ldr	r3, [r7, #28]
 8018890:	685a      	ldr	r2, [r3, #4]
 8018892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018894:	4413      	add	r3, r2
 8018896:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8018898:	697a      	ldr	r2, [r7, #20]
 801889a:	6939      	ldr	r1, [r7, #16]
 801889c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801889e:	f001 fa6d 	bl	8019d7c <memcpy>
    NumBytesRead += NumBytesRem;
 80188a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80188a4:	697b      	ldr	r3, [r7, #20]
 80188a6:	4413      	add	r3, r2
 80188a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80188aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80188ac:	697b      	ldr	r3, [r7, #20]
 80188ae:	4413      	add	r3, r2
 80188b0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80188b2:	687a      	ldr	r2, [r7, #4]
 80188b4:	697b      	ldr	r3, [r7, #20]
 80188b6:	1ad3      	subs	r3, r2, r3
 80188b8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80188ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80188bc:	697b      	ldr	r3, [r7, #20]
 80188be:	4413      	add	r3, r2
 80188c0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 80188c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80188c4:	2b00      	cmp	r3, #0
 80188c6:	d002      	beq.n	80188ce <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80188c8:	69fb      	ldr	r3, [r7, #28]
 80188ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80188cc:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80188ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80188d0:	4618      	mov	r0, r3
 80188d2:	3730      	adds	r7, #48	; 0x30
 80188d4:	46bd      	mov	sp, r7
 80188d6:	bd80      	pop	{r7, pc}
 80188d8:	2001e970 	.word	0x2001e970

080188dc <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80188dc:	b580      	push	{r7, lr}
 80188de:	b088      	sub	sp, #32
 80188e0:	af00      	add	r7, sp, #0
 80188e2:	60f8      	str	r0, [r7, #12]
 80188e4:	60b9      	str	r1, [r7, #8]
 80188e6:	607a      	str	r2, [r7, #4]
 80188e8:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80188ea:	4b3d      	ldr	r3, [pc, #244]	; (80189e0 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80188ec:	61bb      	str	r3, [r7, #24]
 80188ee:	69bb      	ldr	r3, [r7, #24]
 80188f0:	781b      	ldrb	r3, [r3, #0]
 80188f2:	b2db      	uxtb	r3, r3
 80188f4:	2b00      	cmp	r3, #0
 80188f6:	d101      	bne.n	80188fc <SEGGER_RTT_AllocUpBuffer+0x20>
 80188f8:	f7ff ff12 	bl	8018720 <_DoInit>
  SEGGER_RTT_LOCK();
 80188fc:	f3ef 8311 	mrs	r3, BASEPRI
 8018900:	f04f 0120 	mov.w	r1, #32
 8018904:	f381 8811 	msr	BASEPRI, r1
 8018908:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 801890a:	4b35      	ldr	r3, [pc, #212]	; (80189e0 <SEGGER_RTT_AllocUpBuffer+0x104>)
 801890c:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 801890e:	2300      	movs	r3, #0
 8018910:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8018912:	6939      	ldr	r1, [r7, #16]
 8018914:	69fb      	ldr	r3, [r7, #28]
 8018916:	1c5a      	adds	r2, r3, #1
 8018918:	4613      	mov	r3, r2
 801891a:	005b      	lsls	r3, r3, #1
 801891c:	4413      	add	r3, r2
 801891e:	00db      	lsls	r3, r3, #3
 8018920:	440b      	add	r3, r1
 8018922:	3304      	adds	r3, #4
 8018924:	681b      	ldr	r3, [r3, #0]
 8018926:	2b00      	cmp	r3, #0
 8018928:	d008      	beq.n	801893c <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 801892a:	69fb      	ldr	r3, [r7, #28]
 801892c:	3301      	adds	r3, #1
 801892e:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8018930:	693b      	ldr	r3, [r7, #16]
 8018932:	691b      	ldr	r3, [r3, #16]
 8018934:	69fa      	ldr	r2, [r7, #28]
 8018936:	429a      	cmp	r2, r3
 8018938:	dbeb      	blt.n	8018912 <SEGGER_RTT_AllocUpBuffer+0x36>
 801893a:	e000      	b.n	801893e <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 801893c:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 801893e:	693b      	ldr	r3, [r7, #16]
 8018940:	691b      	ldr	r3, [r3, #16]
 8018942:	69fa      	ldr	r2, [r7, #28]
 8018944:	429a      	cmp	r2, r3
 8018946:	da3f      	bge.n	80189c8 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8018948:	6939      	ldr	r1, [r7, #16]
 801894a:	69fb      	ldr	r3, [r7, #28]
 801894c:	1c5a      	adds	r2, r3, #1
 801894e:	4613      	mov	r3, r2
 8018950:	005b      	lsls	r3, r3, #1
 8018952:	4413      	add	r3, r2
 8018954:	00db      	lsls	r3, r3, #3
 8018956:	440b      	add	r3, r1
 8018958:	68fa      	ldr	r2, [r7, #12]
 801895a:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 801895c:	6939      	ldr	r1, [r7, #16]
 801895e:	69fb      	ldr	r3, [r7, #28]
 8018960:	1c5a      	adds	r2, r3, #1
 8018962:	4613      	mov	r3, r2
 8018964:	005b      	lsls	r3, r3, #1
 8018966:	4413      	add	r3, r2
 8018968:	00db      	lsls	r3, r3, #3
 801896a:	440b      	add	r3, r1
 801896c:	3304      	adds	r3, #4
 801896e:	68ba      	ldr	r2, [r7, #8]
 8018970:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8018972:	6939      	ldr	r1, [r7, #16]
 8018974:	69fa      	ldr	r2, [r7, #28]
 8018976:	4613      	mov	r3, r2
 8018978:	005b      	lsls	r3, r3, #1
 801897a:	4413      	add	r3, r2
 801897c:	00db      	lsls	r3, r3, #3
 801897e:	440b      	add	r3, r1
 8018980:	3320      	adds	r3, #32
 8018982:	687a      	ldr	r2, [r7, #4]
 8018984:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8018986:	6939      	ldr	r1, [r7, #16]
 8018988:	69fa      	ldr	r2, [r7, #28]
 801898a:	4613      	mov	r3, r2
 801898c:	005b      	lsls	r3, r3, #1
 801898e:	4413      	add	r3, r2
 8018990:	00db      	lsls	r3, r3, #3
 8018992:	440b      	add	r3, r1
 8018994:	3328      	adds	r3, #40	; 0x28
 8018996:	2200      	movs	r2, #0
 8018998:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 801899a:	6939      	ldr	r1, [r7, #16]
 801899c:	69fa      	ldr	r2, [r7, #28]
 801899e:	4613      	mov	r3, r2
 80189a0:	005b      	lsls	r3, r3, #1
 80189a2:	4413      	add	r3, r2
 80189a4:	00db      	lsls	r3, r3, #3
 80189a6:	440b      	add	r3, r1
 80189a8:	3324      	adds	r3, #36	; 0x24
 80189aa:	2200      	movs	r2, #0
 80189ac:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80189ae:	6939      	ldr	r1, [r7, #16]
 80189b0:	69fa      	ldr	r2, [r7, #28]
 80189b2:	4613      	mov	r3, r2
 80189b4:	005b      	lsls	r3, r3, #1
 80189b6:	4413      	add	r3, r2
 80189b8:	00db      	lsls	r3, r3, #3
 80189ba:	440b      	add	r3, r1
 80189bc:	332c      	adds	r3, #44	; 0x2c
 80189be:	683a      	ldr	r2, [r7, #0]
 80189c0:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80189c2:	f3bf 8f5f 	dmb	sy
 80189c6:	e002      	b.n	80189ce <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80189c8:	f04f 33ff 	mov.w	r3, #4294967295
 80189cc:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80189ce:	697b      	ldr	r3, [r7, #20]
 80189d0:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80189d4:	69fb      	ldr	r3, [r7, #28]
}
 80189d6:	4618      	mov	r0, r3
 80189d8:	3720      	adds	r7, #32
 80189da:	46bd      	mov	sp, r7
 80189dc:	bd80      	pop	{r7, pc}
 80189de:	bf00      	nop
 80189e0:	2001e970 	.word	0x2001e970

080189e4 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80189e4:	b580      	push	{r7, lr}
 80189e6:	b08a      	sub	sp, #40	; 0x28
 80189e8:	af00      	add	r7, sp, #0
 80189ea:	60f8      	str	r0, [r7, #12]
 80189ec:	60b9      	str	r1, [r7, #8]
 80189ee:	607a      	str	r2, [r7, #4]
 80189f0:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 80189f2:	4b21      	ldr	r3, [pc, #132]	; (8018a78 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80189f4:	623b      	str	r3, [r7, #32]
 80189f6:	6a3b      	ldr	r3, [r7, #32]
 80189f8:	781b      	ldrb	r3, [r3, #0]
 80189fa:	b2db      	uxtb	r3, r3
 80189fc:	2b00      	cmp	r3, #0
 80189fe:	d101      	bne.n	8018a04 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8018a00:	f7ff fe8e 	bl	8018720 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8018a04:	4b1c      	ldr	r3, [pc, #112]	; (8018a78 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8018a06:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8018a08:	68fb      	ldr	r3, [r7, #12]
 8018a0a:	2b02      	cmp	r3, #2
 8018a0c:	d82c      	bhi.n	8018a68 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8018a0e:	f3ef 8311 	mrs	r3, BASEPRI
 8018a12:	f04f 0120 	mov.w	r1, #32
 8018a16:	f381 8811 	msr	BASEPRI, r1
 8018a1a:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8018a1c:	68fa      	ldr	r2, [r7, #12]
 8018a1e:	4613      	mov	r3, r2
 8018a20:	005b      	lsls	r3, r3, #1
 8018a22:	4413      	add	r3, r2
 8018a24:	00db      	lsls	r3, r3, #3
 8018a26:	3360      	adds	r3, #96	; 0x60
 8018a28:	69fa      	ldr	r2, [r7, #28]
 8018a2a:	4413      	add	r3, r2
 8018a2c:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8018a2e:	68fb      	ldr	r3, [r7, #12]
 8018a30:	2b00      	cmp	r3, #0
 8018a32:	d00e      	beq.n	8018a52 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8018a34:	697b      	ldr	r3, [r7, #20]
 8018a36:	68ba      	ldr	r2, [r7, #8]
 8018a38:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8018a3a:	697b      	ldr	r3, [r7, #20]
 8018a3c:	687a      	ldr	r2, [r7, #4]
 8018a3e:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8018a40:	697b      	ldr	r3, [r7, #20]
 8018a42:	683a      	ldr	r2, [r7, #0]
 8018a44:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8018a46:	697b      	ldr	r3, [r7, #20]
 8018a48:	2200      	movs	r2, #0
 8018a4a:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8018a4c:	697b      	ldr	r3, [r7, #20]
 8018a4e:	2200      	movs	r2, #0
 8018a50:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8018a52:	697b      	ldr	r3, [r7, #20]
 8018a54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018a56:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8018a58:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8018a5c:	69bb      	ldr	r3, [r7, #24]
 8018a5e:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8018a62:	2300      	movs	r3, #0
 8018a64:	627b      	str	r3, [r7, #36]	; 0x24
 8018a66:	e002      	b.n	8018a6e <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8018a68:	f04f 33ff 	mov.w	r3, #4294967295
 8018a6c:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8018a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8018a70:	4618      	mov	r0, r3
 8018a72:	3728      	adds	r7, #40	; 0x28
 8018a74:	46bd      	mov	sp, r7
 8018a76:	bd80      	pop	{r7, pc}
 8018a78:	2001e970 	.word	0x2001e970

08018a7c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8018a7c:	b480      	push	{r7}
 8018a7e:	b087      	sub	sp, #28
 8018a80:	af00      	add	r7, sp, #0
 8018a82:	60f8      	str	r0, [r7, #12]
 8018a84:	60b9      	str	r1, [r7, #8]
 8018a86:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8018a88:	2300      	movs	r3, #0
 8018a8a:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 8018a8c:	68bb      	ldr	r3, [r7, #8]
 8018a8e:	2b00      	cmp	r3, #0
 8018a90:	d00f      	beq.n	8018ab2 <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 8018a92:	e002      	b.n	8018a9a <_EncodeStr+0x1e>
      Len++;
 8018a94:	693b      	ldr	r3, [r7, #16]
 8018a96:	3301      	adds	r3, #1
 8018a98:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 8018a9a:	68ba      	ldr	r2, [r7, #8]
 8018a9c:	693b      	ldr	r3, [r7, #16]
 8018a9e:	4413      	add	r3, r2
 8018aa0:	781b      	ldrb	r3, [r3, #0]
 8018aa2:	2b00      	cmp	r3, #0
 8018aa4:	d1f6      	bne.n	8018a94 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 8018aa6:	693a      	ldr	r2, [r7, #16]
 8018aa8:	687b      	ldr	r3, [r7, #4]
 8018aaa:	429a      	cmp	r2, r3
 8018aac:	d901      	bls.n	8018ab2 <_EncodeStr+0x36>
      Len = Limit;
 8018aae:	687b      	ldr	r3, [r7, #4]
 8018ab0:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8018ab2:	693b      	ldr	r3, [r7, #16]
 8018ab4:	2bfe      	cmp	r3, #254	; 0xfe
 8018ab6:	d806      	bhi.n	8018ac6 <_EncodeStr+0x4a>
    *pPayload++ = Len; 
 8018ab8:	68fb      	ldr	r3, [r7, #12]
 8018aba:	1c5a      	adds	r2, r3, #1
 8018abc:	60fa      	str	r2, [r7, #12]
 8018abe:	693a      	ldr	r2, [r7, #16]
 8018ac0:	b2d2      	uxtb	r2, r2
 8018ac2:	701a      	strb	r2, [r3, #0]
 8018ac4:	e011      	b.n	8018aea <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 8018ac6:	68fb      	ldr	r3, [r7, #12]
 8018ac8:	1c5a      	adds	r2, r3, #1
 8018aca:	60fa      	str	r2, [r7, #12]
 8018acc:	22ff      	movs	r2, #255	; 0xff
 8018ace:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8018ad0:	68fb      	ldr	r3, [r7, #12]
 8018ad2:	1c5a      	adds	r2, r3, #1
 8018ad4:	60fa      	str	r2, [r7, #12]
 8018ad6:	693a      	ldr	r2, [r7, #16]
 8018ad8:	b2d2      	uxtb	r2, r2
 8018ada:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8018adc:	693b      	ldr	r3, [r7, #16]
 8018ade:	0a19      	lsrs	r1, r3, #8
 8018ae0:	68fb      	ldr	r3, [r7, #12]
 8018ae2:	1c5a      	adds	r2, r3, #1
 8018ae4:	60fa      	str	r2, [r7, #12]
 8018ae6:	b2ca      	uxtb	r2, r1
 8018ae8:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8018aea:	2300      	movs	r3, #0
 8018aec:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8018aee:	e00a      	b.n	8018b06 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 8018af0:	68ba      	ldr	r2, [r7, #8]
 8018af2:	1c53      	adds	r3, r2, #1
 8018af4:	60bb      	str	r3, [r7, #8]
 8018af6:	68fb      	ldr	r3, [r7, #12]
 8018af8:	1c59      	adds	r1, r3, #1
 8018afa:	60f9      	str	r1, [r7, #12]
 8018afc:	7812      	ldrb	r2, [r2, #0]
 8018afe:	701a      	strb	r2, [r3, #0]
    n++;
 8018b00:	697b      	ldr	r3, [r7, #20]
 8018b02:	3301      	adds	r3, #1
 8018b04:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8018b06:	697a      	ldr	r2, [r7, #20]
 8018b08:	693b      	ldr	r3, [r7, #16]
 8018b0a:	429a      	cmp	r2, r3
 8018b0c:	d3f0      	bcc.n	8018af0 <_EncodeStr+0x74>
  }
  return pPayload;
 8018b0e:	68fb      	ldr	r3, [r7, #12]
}
 8018b10:	4618      	mov	r0, r3
 8018b12:	371c      	adds	r7, #28
 8018b14:	46bd      	mov	sp, r7
 8018b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b1a:	4770      	bx	lr

08018b1c <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8018b1c:	b480      	push	{r7}
 8018b1e:	b083      	sub	sp, #12
 8018b20:	af00      	add	r7, sp, #0
 8018b22:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8018b24:	687b      	ldr	r3, [r7, #4]
 8018b26:	3304      	adds	r3, #4
}
 8018b28:	4618      	mov	r0, r3
 8018b2a:	370c      	adds	r7, #12
 8018b2c:	46bd      	mov	sp, r7
 8018b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b32:	4770      	bx	lr

08018b34 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8018b34:	b580      	push	{r7, lr}
 8018b36:	b082      	sub	sp, #8
 8018b38:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8018b3a:	4b36      	ldr	r3, [pc, #216]	; (8018c14 <_HandleIncomingPacket+0xe0>)
 8018b3c:	7e1b      	ldrb	r3, [r3, #24]
 8018b3e:	4618      	mov	r0, r3
 8018b40:	1cfb      	adds	r3, r7, #3
 8018b42:	2201      	movs	r2, #1
 8018b44:	4619      	mov	r1, r3
 8018b46:	f7ff fe43 	bl	80187d0 <SEGGER_RTT_ReadNoLock>
 8018b4a:	4603      	mov	r3, r0
 8018b4c:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8018b4e:	687b      	ldr	r3, [r7, #4]
 8018b50:	2b00      	cmp	r3, #0
 8018b52:	dd54      	ble.n	8018bfe <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8018b54:	78fb      	ldrb	r3, [r7, #3]
 8018b56:	2b80      	cmp	r3, #128	; 0x80
 8018b58:	d032      	beq.n	8018bc0 <_HandleIncomingPacket+0x8c>
 8018b5a:	2b80      	cmp	r3, #128	; 0x80
 8018b5c:	dc42      	bgt.n	8018be4 <_HandleIncomingPacket+0xb0>
 8018b5e:	2b07      	cmp	r3, #7
 8018b60:	dc16      	bgt.n	8018b90 <_HandleIncomingPacket+0x5c>
 8018b62:	2b00      	cmp	r3, #0
 8018b64:	dd3e      	ble.n	8018be4 <_HandleIncomingPacket+0xb0>
 8018b66:	3b01      	subs	r3, #1
 8018b68:	2b06      	cmp	r3, #6
 8018b6a:	d83b      	bhi.n	8018be4 <_HandleIncomingPacket+0xb0>
 8018b6c:	a201      	add	r2, pc, #4	; (adr r2, 8018b74 <_HandleIncomingPacket+0x40>)
 8018b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018b72:	bf00      	nop
 8018b74:	08018b97 	.word	0x08018b97
 8018b78:	08018b9d 	.word	0x08018b9d
 8018b7c:	08018ba3 	.word	0x08018ba3
 8018b80:	08018ba9 	.word	0x08018ba9
 8018b84:	08018baf 	.word	0x08018baf
 8018b88:	08018bb5 	.word	0x08018bb5
 8018b8c:	08018bbb 	.word	0x08018bbb
 8018b90:	2b7f      	cmp	r3, #127	; 0x7f
 8018b92:	d036      	beq.n	8018c02 <_HandleIncomingPacket+0xce>
 8018b94:	e026      	b.n	8018be4 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8018b96:	f000 fba7 	bl	80192e8 <SEGGER_SYSVIEW_Start>
      break;
 8018b9a:	e037      	b.n	8018c0c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8018b9c:	f000 fc5e 	bl	801945c <SEGGER_SYSVIEW_Stop>
      break;
 8018ba0:	e034      	b.n	8018c0c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8018ba2:	f000 fe37 	bl	8019814 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8018ba6:	e031      	b.n	8018c0c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8018ba8:	f000 fdfc 	bl	80197a4 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8018bac:	e02e      	b.n	8018c0c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8018bae:	f000 fc7b 	bl	80194a8 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8018bb2:	e02b      	b.n	8018c0c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8018bb4:	f000 fff0 	bl	8019b98 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8018bb8:	e028      	b.n	8018c0c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8018bba:	f000 ffcf 	bl	8019b5c <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8018bbe:	e025      	b.n	8018c0c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8018bc0:	4b14      	ldr	r3, [pc, #80]	; (8018c14 <_HandleIncomingPacket+0xe0>)
 8018bc2:	7e1b      	ldrb	r3, [r3, #24]
 8018bc4:	4618      	mov	r0, r3
 8018bc6:	1cfb      	adds	r3, r7, #3
 8018bc8:	2201      	movs	r2, #1
 8018bca:	4619      	mov	r1, r3
 8018bcc:	f7ff fe00 	bl	80187d0 <SEGGER_RTT_ReadNoLock>
 8018bd0:	4603      	mov	r3, r0
 8018bd2:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8018bd4:	687b      	ldr	r3, [r7, #4]
 8018bd6:	2b00      	cmp	r3, #0
 8018bd8:	dd15      	ble.n	8018c06 <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8018bda:	78fb      	ldrb	r3, [r7, #3]
 8018bdc:	4618      	mov	r0, r3
 8018bde:	f000 ff3d 	bl	8019a5c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8018be2:	e010      	b.n	8018c06 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8018be4:	78fb      	ldrb	r3, [r7, #3]
 8018be6:	b25b      	sxtb	r3, r3
 8018be8:	2b00      	cmp	r3, #0
 8018bea:	da0e      	bge.n	8018c0a <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8018bec:	4b09      	ldr	r3, [pc, #36]	; (8018c14 <_HandleIncomingPacket+0xe0>)
 8018bee:	7e1b      	ldrb	r3, [r3, #24]
 8018bf0:	4618      	mov	r0, r3
 8018bf2:	1cfb      	adds	r3, r7, #3
 8018bf4:	2201      	movs	r2, #1
 8018bf6:	4619      	mov	r1, r3
 8018bf8:	f7ff fdea 	bl	80187d0 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8018bfc:	e005      	b.n	8018c0a <_HandleIncomingPacket+0xd6>
    }
  }
 8018bfe:	bf00      	nop
 8018c00:	e004      	b.n	8018c0c <_HandleIncomingPacket+0xd8>
      break;
 8018c02:	bf00      	nop
 8018c04:	e002      	b.n	8018c0c <_HandleIncomingPacket+0xd8>
      break;
 8018c06:	bf00      	nop
 8018c08:	e000      	b.n	8018c0c <_HandleIncomingPacket+0xd8>
      break;
 8018c0a:	bf00      	nop
}
 8018c0c:	bf00      	nop
 8018c0e:	3708      	adds	r7, #8
 8018c10:	46bd      	mov	sp, r7
 8018c12:	bd80      	pop	{r7, pc}
 8018c14:	2001b458 	.word	0x2001b458

08018c18 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8018c18:	b580      	push	{r7, lr}
 8018c1a:	b08c      	sub	sp, #48	; 0x30
 8018c1c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8018c1e:	2301      	movs	r3, #1
 8018c20:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8018c22:	1d3b      	adds	r3, r7, #4
 8018c24:	3301      	adds	r3, #1
 8018c26:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8018c28:	69fb      	ldr	r3, [r7, #28]
 8018c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018c2c:	4b31      	ldr	r3, [pc, #196]	; (8018cf4 <_TrySendOverflowPacket+0xdc>)
 8018c2e:	695b      	ldr	r3, [r3, #20]
 8018c30:	62bb      	str	r3, [r7, #40]	; 0x28
 8018c32:	e00b      	b.n	8018c4c <_TrySendOverflowPacket+0x34>
 8018c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018c36:	b2da      	uxtb	r2, r3
 8018c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018c3a:	1c59      	adds	r1, r3, #1
 8018c3c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8018c3e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8018c42:	b2d2      	uxtb	r2, r2
 8018c44:	701a      	strb	r2, [r3, #0]
 8018c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018c48:	09db      	lsrs	r3, r3, #7
 8018c4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8018c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018c4e:	2b7f      	cmp	r3, #127	; 0x7f
 8018c50:	d8f0      	bhi.n	8018c34 <_TrySendOverflowPacket+0x1c>
 8018c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018c54:	1c5a      	adds	r2, r3, #1
 8018c56:	62fa      	str	r2, [r7, #44]	; 0x2c
 8018c58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018c5a:	b2d2      	uxtb	r2, r2
 8018c5c:	701a      	strb	r2, [r3, #0]
 8018c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018c60:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8018c62:	4b25      	ldr	r3, [pc, #148]	; (8018cf8 <_TrySendOverflowPacket+0xe0>)
 8018c64:	681b      	ldr	r3, [r3, #0]
 8018c66:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8018c68:	4b22      	ldr	r3, [pc, #136]	; (8018cf4 <_TrySendOverflowPacket+0xdc>)
 8018c6a:	68db      	ldr	r3, [r3, #12]
 8018c6c:	69ba      	ldr	r2, [r7, #24]
 8018c6e:	1ad3      	subs	r3, r2, r3
 8018c70:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8018c72:	69fb      	ldr	r3, [r7, #28]
 8018c74:	627b      	str	r3, [r7, #36]	; 0x24
 8018c76:	697b      	ldr	r3, [r7, #20]
 8018c78:	623b      	str	r3, [r7, #32]
 8018c7a:	e00b      	b.n	8018c94 <_TrySendOverflowPacket+0x7c>
 8018c7c:	6a3b      	ldr	r3, [r7, #32]
 8018c7e:	b2da      	uxtb	r2, r3
 8018c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018c82:	1c59      	adds	r1, r3, #1
 8018c84:	6279      	str	r1, [r7, #36]	; 0x24
 8018c86:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8018c8a:	b2d2      	uxtb	r2, r2
 8018c8c:	701a      	strb	r2, [r3, #0]
 8018c8e:	6a3b      	ldr	r3, [r7, #32]
 8018c90:	09db      	lsrs	r3, r3, #7
 8018c92:	623b      	str	r3, [r7, #32]
 8018c94:	6a3b      	ldr	r3, [r7, #32]
 8018c96:	2b7f      	cmp	r3, #127	; 0x7f
 8018c98:	d8f0      	bhi.n	8018c7c <_TrySendOverflowPacket+0x64>
 8018c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018c9c:	1c5a      	adds	r2, r3, #1
 8018c9e:	627a      	str	r2, [r7, #36]	; 0x24
 8018ca0:	6a3a      	ldr	r2, [r7, #32]
 8018ca2:	b2d2      	uxtb	r2, r2
 8018ca4:	701a      	strb	r2, [r3, #0]
 8018ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ca8:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8018caa:	4b12      	ldr	r3, [pc, #72]	; (8018cf4 <_TrySendOverflowPacket+0xdc>)
 8018cac:	785b      	ldrb	r3, [r3, #1]
 8018cae:	4618      	mov	r0, r3
 8018cb0:	1d3b      	adds	r3, r7, #4
 8018cb2:	69fa      	ldr	r2, [r7, #28]
 8018cb4:	1ad3      	subs	r3, r2, r3
 8018cb6:	461a      	mov	r2, r3
 8018cb8:	1d3b      	adds	r3, r7, #4
 8018cba:	4619      	mov	r1, r3
 8018cbc:	f7e7 fa88 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8018cc0:	4603      	mov	r3, r0
 8018cc2:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8018cc4:	693b      	ldr	r3, [r7, #16]
 8018cc6:	2b00      	cmp	r3, #0
 8018cc8:	d009      	beq.n	8018cde <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8018cca:	4a0a      	ldr	r2, [pc, #40]	; (8018cf4 <_TrySendOverflowPacket+0xdc>)
 8018ccc:	69bb      	ldr	r3, [r7, #24]
 8018cce:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8018cd0:	4b08      	ldr	r3, [pc, #32]	; (8018cf4 <_TrySendOverflowPacket+0xdc>)
 8018cd2:	781b      	ldrb	r3, [r3, #0]
 8018cd4:	3b01      	subs	r3, #1
 8018cd6:	b2da      	uxtb	r2, r3
 8018cd8:	4b06      	ldr	r3, [pc, #24]	; (8018cf4 <_TrySendOverflowPacket+0xdc>)
 8018cda:	701a      	strb	r2, [r3, #0]
 8018cdc:	e004      	b.n	8018ce8 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8018cde:	4b05      	ldr	r3, [pc, #20]	; (8018cf4 <_TrySendOverflowPacket+0xdc>)
 8018ce0:	695b      	ldr	r3, [r3, #20]
 8018ce2:	3301      	adds	r3, #1
 8018ce4:	4a03      	ldr	r2, [pc, #12]	; (8018cf4 <_TrySendOverflowPacket+0xdc>)
 8018ce6:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8018ce8:	693b      	ldr	r3, [r7, #16]
}
 8018cea:	4618      	mov	r0, r3
 8018cec:	3730      	adds	r7, #48	; 0x30
 8018cee:	46bd      	mov	sp, r7
 8018cf0:	bd80      	pop	{r7, pc}
 8018cf2:	bf00      	nop
 8018cf4:	2001b458 	.word	0x2001b458
 8018cf8:	e0001004 	.word	0xe0001004

08018cfc <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8018cfc:	b580      	push	{r7, lr}
 8018cfe:	b08a      	sub	sp, #40	; 0x28
 8018d00:	af00      	add	r7, sp, #0
 8018d02:	60f8      	str	r0, [r7, #12]
 8018d04:	60b9      	str	r1, [r7, #8]
 8018d06:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8018d08:	4b6c      	ldr	r3, [pc, #432]	; (8018ebc <_SendPacket+0x1c0>)
 8018d0a:	781b      	ldrb	r3, [r3, #0]
 8018d0c:	2b01      	cmp	r3, #1
 8018d0e:	d010      	beq.n	8018d32 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8018d10:	4b6a      	ldr	r3, [pc, #424]	; (8018ebc <_SendPacket+0x1c0>)
 8018d12:	781b      	ldrb	r3, [r3, #0]
 8018d14:	2b00      	cmp	r3, #0
 8018d16:	f000 80a3 	beq.w	8018e60 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8018d1a:	4b68      	ldr	r3, [pc, #416]	; (8018ebc <_SendPacket+0x1c0>)
 8018d1c:	781b      	ldrb	r3, [r3, #0]
 8018d1e:	2b02      	cmp	r3, #2
 8018d20:	d109      	bne.n	8018d36 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8018d22:	f7ff ff79 	bl	8018c18 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8018d26:	4b65      	ldr	r3, [pc, #404]	; (8018ebc <_SendPacket+0x1c0>)
 8018d28:	781b      	ldrb	r3, [r3, #0]
 8018d2a:	2b01      	cmp	r3, #1
 8018d2c:	f040 809a 	bne.w	8018e64 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 8018d30:	e001      	b.n	8018d36 <_SendPacket+0x3a>
    goto Send;
 8018d32:	bf00      	nop
 8018d34:	e000      	b.n	8018d38 <_SendPacket+0x3c>
Send:
 8018d36:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8018d38:	687b      	ldr	r3, [r7, #4]
 8018d3a:	2b1f      	cmp	r3, #31
 8018d3c:	d809      	bhi.n	8018d52 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8018d3e:	4b5f      	ldr	r3, [pc, #380]	; (8018ebc <_SendPacket+0x1c0>)
 8018d40:	69da      	ldr	r2, [r3, #28]
 8018d42:	687b      	ldr	r3, [r7, #4]
 8018d44:	fa22 f303 	lsr.w	r3, r2, r3
 8018d48:	f003 0301 	and.w	r3, r3, #1
 8018d4c:	2b00      	cmp	r3, #0
 8018d4e:	f040 808b 	bne.w	8018e68 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8018d52:	687b      	ldr	r3, [r7, #4]
 8018d54:	2b17      	cmp	r3, #23
 8018d56:	d807      	bhi.n	8018d68 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8018d58:	68fb      	ldr	r3, [r7, #12]
 8018d5a:	3b01      	subs	r3, #1
 8018d5c:	60fb      	str	r3, [r7, #12]
 8018d5e:	687b      	ldr	r3, [r7, #4]
 8018d60:	b2da      	uxtb	r2, r3
 8018d62:	68fb      	ldr	r3, [r7, #12]
 8018d64:	701a      	strb	r2, [r3, #0]
 8018d66:	e03d      	b.n	8018de4 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8018d68:	68ba      	ldr	r2, [r7, #8]
 8018d6a:	68fb      	ldr	r3, [r7, #12]
 8018d6c:	1ad3      	subs	r3, r2, r3
 8018d6e:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8018d70:	69fb      	ldr	r3, [r7, #28]
 8018d72:	2b7f      	cmp	r3, #127	; 0x7f
 8018d74:	d912      	bls.n	8018d9c <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8018d76:	69fb      	ldr	r3, [r7, #28]
 8018d78:	09da      	lsrs	r2, r3, #7
 8018d7a:	68fb      	ldr	r3, [r7, #12]
 8018d7c:	3b01      	subs	r3, #1
 8018d7e:	60fb      	str	r3, [r7, #12]
 8018d80:	b2d2      	uxtb	r2, r2
 8018d82:	68fb      	ldr	r3, [r7, #12]
 8018d84:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8018d86:	69fb      	ldr	r3, [r7, #28]
 8018d88:	b2db      	uxtb	r3, r3
 8018d8a:	68fa      	ldr	r2, [r7, #12]
 8018d8c:	3a01      	subs	r2, #1
 8018d8e:	60fa      	str	r2, [r7, #12]
 8018d90:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8018d94:	b2da      	uxtb	r2, r3
 8018d96:	68fb      	ldr	r3, [r7, #12]
 8018d98:	701a      	strb	r2, [r3, #0]
 8018d9a:	e006      	b.n	8018daa <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8018d9c:	68fb      	ldr	r3, [r7, #12]
 8018d9e:	3b01      	subs	r3, #1
 8018da0:	60fb      	str	r3, [r7, #12]
 8018da2:	69fb      	ldr	r3, [r7, #28]
 8018da4:	b2da      	uxtb	r2, r3
 8018da6:	68fb      	ldr	r3, [r7, #12]
 8018da8:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8018daa:	687b      	ldr	r3, [r7, #4]
 8018dac:	2b7f      	cmp	r3, #127	; 0x7f
 8018dae:	d912      	bls.n	8018dd6 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8018db0:	687b      	ldr	r3, [r7, #4]
 8018db2:	09da      	lsrs	r2, r3, #7
 8018db4:	68fb      	ldr	r3, [r7, #12]
 8018db6:	3b01      	subs	r3, #1
 8018db8:	60fb      	str	r3, [r7, #12]
 8018dba:	b2d2      	uxtb	r2, r2
 8018dbc:	68fb      	ldr	r3, [r7, #12]
 8018dbe:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8018dc0:	687b      	ldr	r3, [r7, #4]
 8018dc2:	b2db      	uxtb	r3, r3
 8018dc4:	68fa      	ldr	r2, [r7, #12]
 8018dc6:	3a01      	subs	r2, #1
 8018dc8:	60fa      	str	r2, [r7, #12]
 8018dca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8018dce:	b2da      	uxtb	r2, r3
 8018dd0:	68fb      	ldr	r3, [r7, #12]
 8018dd2:	701a      	strb	r2, [r3, #0]
 8018dd4:	e006      	b.n	8018de4 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8018dd6:	68fb      	ldr	r3, [r7, #12]
 8018dd8:	3b01      	subs	r3, #1
 8018dda:	60fb      	str	r3, [r7, #12]
 8018ddc:	687b      	ldr	r3, [r7, #4]
 8018dde:	b2da      	uxtb	r2, r3
 8018de0:	68fb      	ldr	r3, [r7, #12]
 8018de2:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8018de4:	4b36      	ldr	r3, [pc, #216]	; (8018ec0 <_SendPacket+0x1c4>)
 8018de6:	681b      	ldr	r3, [r3, #0]
 8018de8:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8018dea:	4b34      	ldr	r3, [pc, #208]	; (8018ebc <_SendPacket+0x1c0>)
 8018dec:	68db      	ldr	r3, [r3, #12]
 8018dee:	69ba      	ldr	r2, [r7, #24]
 8018df0:	1ad3      	subs	r3, r2, r3
 8018df2:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8018df4:	68bb      	ldr	r3, [r7, #8]
 8018df6:	627b      	str	r3, [r7, #36]	; 0x24
 8018df8:	697b      	ldr	r3, [r7, #20]
 8018dfa:	623b      	str	r3, [r7, #32]
 8018dfc:	e00b      	b.n	8018e16 <_SendPacket+0x11a>
 8018dfe:	6a3b      	ldr	r3, [r7, #32]
 8018e00:	b2da      	uxtb	r2, r3
 8018e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e04:	1c59      	adds	r1, r3, #1
 8018e06:	6279      	str	r1, [r7, #36]	; 0x24
 8018e08:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8018e0c:	b2d2      	uxtb	r2, r2
 8018e0e:	701a      	strb	r2, [r3, #0]
 8018e10:	6a3b      	ldr	r3, [r7, #32]
 8018e12:	09db      	lsrs	r3, r3, #7
 8018e14:	623b      	str	r3, [r7, #32]
 8018e16:	6a3b      	ldr	r3, [r7, #32]
 8018e18:	2b7f      	cmp	r3, #127	; 0x7f
 8018e1a:	d8f0      	bhi.n	8018dfe <_SendPacket+0x102>
 8018e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e1e:	1c5a      	adds	r2, r3, #1
 8018e20:	627a      	str	r2, [r7, #36]	; 0x24
 8018e22:	6a3a      	ldr	r2, [r7, #32]
 8018e24:	b2d2      	uxtb	r2, r2
 8018e26:	701a      	strb	r2, [r3, #0]
 8018e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e2a:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8018e2c:	4b23      	ldr	r3, [pc, #140]	; (8018ebc <_SendPacket+0x1c0>)
 8018e2e:	785b      	ldrb	r3, [r3, #1]
 8018e30:	4618      	mov	r0, r3
 8018e32:	68ba      	ldr	r2, [r7, #8]
 8018e34:	68fb      	ldr	r3, [r7, #12]
 8018e36:	1ad3      	subs	r3, r2, r3
 8018e38:	461a      	mov	r2, r3
 8018e3a:	68f9      	ldr	r1, [r7, #12]
 8018e3c:	f7e7 f9c8 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8018e40:	4603      	mov	r3, r0
 8018e42:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8018e44:	693b      	ldr	r3, [r7, #16]
 8018e46:	2b00      	cmp	r3, #0
 8018e48:	d003      	beq.n	8018e52 <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8018e4a:	4a1c      	ldr	r2, [pc, #112]	; (8018ebc <_SendPacket+0x1c0>)
 8018e4c:	69bb      	ldr	r3, [r7, #24]
 8018e4e:	60d3      	str	r3, [r2, #12]
 8018e50:	e00b      	b.n	8018e6a <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8018e52:	4b1a      	ldr	r3, [pc, #104]	; (8018ebc <_SendPacket+0x1c0>)
 8018e54:	781b      	ldrb	r3, [r3, #0]
 8018e56:	3301      	adds	r3, #1
 8018e58:	b2da      	uxtb	r2, r3
 8018e5a:	4b18      	ldr	r3, [pc, #96]	; (8018ebc <_SendPacket+0x1c0>)
 8018e5c:	701a      	strb	r2, [r3, #0]
 8018e5e:	e004      	b.n	8018e6a <_SendPacket+0x16e>
    goto SendDone;
 8018e60:	bf00      	nop
 8018e62:	e002      	b.n	8018e6a <_SendPacket+0x16e>
      goto SendDone;
 8018e64:	bf00      	nop
 8018e66:	e000      	b.n	8018e6a <_SendPacket+0x16e>
      goto SendDone;
 8018e68:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8018e6a:	4b14      	ldr	r3, [pc, #80]	; (8018ebc <_SendPacket+0x1c0>)
 8018e6c:	7e1b      	ldrb	r3, [r3, #24]
 8018e6e:	4619      	mov	r1, r3
 8018e70:	4a14      	ldr	r2, [pc, #80]	; (8018ec4 <_SendPacket+0x1c8>)
 8018e72:	460b      	mov	r3, r1
 8018e74:	005b      	lsls	r3, r3, #1
 8018e76:	440b      	add	r3, r1
 8018e78:	00db      	lsls	r3, r3, #3
 8018e7a:	4413      	add	r3, r2
 8018e7c:	336c      	adds	r3, #108	; 0x6c
 8018e7e:	681a      	ldr	r2, [r3, #0]
 8018e80:	4b0e      	ldr	r3, [pc, #56]	; (8018ebc <_SendPacket+0x1c0>)
 8018e82:	7e1b      	ldrb	r3, [r3, #24]
 8018e84:	4618      	mov	r0, r3
 8018e86:	490f      	ldr	r1, [pc, #60]	; (8018ec4 <_SendPacket+0x1c8>)
 8018e88:	4603      	mov	r3, r0
 8018e8a:	005b      	lsls	r3, r3, #1
 8018e8c:	4403      	add	r3, r0
 8018e8e:	00db      	lsls	r3, r3, #3
 8018e90:	440b      	add	r3, r1
 8018e92:	3370      	adds	r3, #112	; 0x70
 8018e94:	681b      	ldr	r3, [r3, #0]
 8018e96:	429a      	cmp	r2, r3
 8018e98:	d00b      	beq.n	8018eb2 <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8018e9a:	4b08      	ldr	r3, [pc, #32]	; (8018ebc <_SendPacket+0x1c0>)
 8018e9c:	789b      	ldrb	r3, [r3, #2]
 8018e9e:	2b00      	cmp	r3, #0
 8018ea0:	d107      	bne.n	8018eb2 <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8018ea2:	4b06      	ldr	r3, [pc, #24]	; (8018ebc <_SendPacket+0x1c0>)
 8018ea4:	2201      	movs	r2, #1
 8018ea6:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8018ea8:	f7ff fe44 	bl	8018b34 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8018eac:	4b03      	ldr	r3, [pc, #12]	; (8018ebc <_SendPacket+0x1c0>)
 8018eae:	2200      	movs	r2, #0
 8018eb0:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8018eb2:	bf00      	nop
 8018eb4:	3728      	adds	r7, #40	; 0x28
 8018eb6:	46bd      	mov	sp, r7
 8018eb8:	bd80      	pop	{r7, pc}
 8018eba:	bf00      	nop
 8018ebc:	2001b458 	.word	0x2001b458
 8018ec0:	e0001004 	.word	0xe0001004
 8018ec4:	2001e970 	.word	0x2001e970

08018ec8 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8018ec8:	b580      	push	{r7, lr}
 8018eca:	b086      	sub	sp, #24
 8018ecc:	af02      	add	r7, sp, #8
 8018ece:	60f8      	str	r0, [r7, #12]
 8018ed0:	60b9      	str	r1, [r7, #8]
 8018ed2:	607a      	str	r2, [r7, #4]
 8018ed4:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8018ed6:	2300      	movs	r3, #0
 8018ed8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8018edc:	4917      	ldr	r1, [pc, #92]	; (8018f3c <SEGGER_SYSVIEW_Init+0x74>)
 8018ede:	4818      	ldr	r0, [pc, #96]	; (8018f40 <SEGGER_SYSVIEW_Init+0x78>)
 8018ee0:	f7ff fcfc 	bl	80188dc <SEGGER_RTT_AllocUpBuffer>
 8018ee4:	4603      	mov	r3, r0
 8018ee6:	b2da      	uxtb	r2, r3
 8018ee8:	4b16      	ldr	r3, [pc, #88]	; (8018f44 <SEGGER_SYSVIEW_Init+0x7c>)
 8018eea:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8018eec:	4b15      	ldr	r3, [pc, #84]	; (8018f44 <SEGGER_SYSVIEW_Init+0x7c>)
 8018eee:	785a      	ldrb	r2, [r3, #1]
 8018ef0:	4b14      	ldr	r3, [pc, #80]	; (8018f44 <SEGGER_SYSVIEW_Init+0x7c>)
 8018ef2:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8018ef4:	4b13      	ldr	r3, [pc, #76]	; (8018f44 <SEGGER_SYSVIEW_Init+0x7c>)
 8018ef6:	7e1b      	ldrb	r3, [r3, #24]
 8018ef8:	4618      	mov	r0, r3
 8018efa:	2300      	movs	r3, #0
 8018efc:	9300      	str	r3, [sp, #0]
 8018efe:	2308      	movs	r3, #8
 8018f00:	4a11      	ldr	r2, [pc, #68]	; (8018f48 <SEGGER_SYSVIEW_Init+0x80>)
 8018f02:	490f      	ldr	r1, [pc, #60]	; (8018f40 <SEGGER_SYSVIEW_Init+0x78>)
 8018f04:	f7ff fd6e 	bl	80189e4 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8018f08:	4b0e      	ldr	r3, [pc, #56]	; (8018f44 <SEGGER_SYSVIEW_Init+0x7c>)
 8018f0a:	2200      	movs	r2, #0
 8018f0c:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8018f0e:	4b0f      	ldr	r3, [pc, #60]	; (8018f4c <SEGGER_SYSVIEW_Init+0x84>)
 8018f10:	681b      	ldr	r3, [r3, #0]
 8018f12:	4a0c      	ldr	r2, [pc, #48]	; (8018f44 <SEGGER_SYSVIEW_Init+0x7c>)
 8018f14:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8018f16:	4a0b      	ldr	r2, [pc, #44]	; (8018f44 <SEGGER_SYSVIEW_Init+0x7c>)
 8018f18:	687b      	ldr	r3, [r7, #4]
 8018f1a:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8018f1c:	4a09      	ldr	r2, [pc, #36]	; (8018f44 <SEGGER_SYSVIEW_Init+0x7c>)
 8018f1e:	68fb      	ldr	r3, [r7, #12]
 8018f20:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8018f22:	4a08      	ldr	r2, [pc, #32]	; (8018f44 <SEGGER_SYSVIEW_Init+0x7c>)
 8018f24:	68bb      	ldr	r3, [r7, #8]
 8018f26:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8018f28:	4a06      	ldr	r2, [pc, #24]	; (8018f44 <SEGGER_SYSVIEW_Init+0x7c>)
 8018f2a:	683b      	ldr	r3, [r7, #0]
 8018f2c:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8018f2e:	4b05      	ldr	r3, [pc, #20]	; (8018f44 <SEGGER_SYSVIEW_Init+0x7c>)
 8018f30:	2200      	movs	r2, #0
 8018f32:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8018f34:	bf00      	nop
 8018f36:	3710      	adds	r7, #16
 8018f38:	46bd      	mov	sp, r7
 8018f3a:	bd80      	pop	{r7, pc}
 8018f3c:	2001b050 	.word	0x2001b050
 8018f40:	0801aad4 	.word	0x0801aad4
 8018f44:	2001b458 	.word	0x2001b458
 8018f48:	2001b450 	.word	0x2001b450
 8018f4c:	e0001004 	.word	0xe0001004

08018f50 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8018f50:	b480      	push	{r7}
 8018f52:	b083      	sub	sp, #12
 8018f54:	af00      	add	r7, sp, #0
 8018f56:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8018f58:	4a04      	ldr	r2, [pc, #16]	; (8018f6c <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8018f5a:	687b      	ldr	r3, [r7, #4]
 8018f5c:	6113      	str	r3, [r2, #16]
}
 8018f5e:	bf00      	nop
 8018f60:	370c      	adds	r7, #12
 8018f62:	46bd      	mov	sp, r7
 8018f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f68:	4770      	bx	lr
 8018f6a:	bf00      	nop
 8018f6c:	2001b458 	.word	0x2001b458

08018f70 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8018f70:	b580      	push	{r7, lr}
 8018f72:	b084      	sub	sp, #16
 8018f74:	af00      	add	r7, sp, #0
 8018f76:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8018f78:	f3ef 8311 	mrs	r3, BASEPRI
 8018f7c:	f04f 0120 	mov.w	r1, #32
 8018f80:	f381 8811 	msr	BASEPRI, r1
 8018f84:	60fb      	str	r3, [r7, #12]
 8018f86:	4808      	ldr	r0, [pc, #32]	; (8018fa8 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8018f88:	f7ff fdc8 	bl	8018b1c <_PreparePacket>
 8018f8c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8018f8e:	687a      	ldr	r2, [r7, #4]
 8018f90:	68b9      	ldr	r1, [r7, #8]
 8018f92:	68b8      	ldr	r0, [r7, #8]
 8018f94:	f7ff feb2 	bl	8018cfc <_SendPacket>
  RECORD_END();
 8018f98:	68fb      	ldr	r3, [r7, #12]
 8018f9a:	f383 8811 	msr	BASEPRI, r3
}
 8018f9e:	bf00      	nop
 8018fa0:	3710      	adds	r7, #16
 8018fa2:	46bd      	mov	sp, r7
 8018fa4:	bd80      	pop	{r7, pc}
 8018fa6:	bf00      	nop
 8018fa8:	2001b488 	.word	0x2001b488

08018fac <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8018fac:	b580      	push	{r7, lr}
 8018fae:	b088      	sub	sp, #32
 8018fb0:	af00      	add	r7, sp, #0
 8018fb2:	6078      	str	r0, [r7, #4]
 8018fb4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8018fb6:	f3ef 8311 	mrs	r3, BASEPRI
 8018fba:	f04f 0120 	mov.w	r1, #32
 8018fbe:	f381 8811 	msr	BASEPRI, r1
 8018fc2:	617b      	str	r3, [r7, #20]
 8018fc4:	4816      	ldr	r0, [pc, #88]	; (8019020 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8018fc6:	f7ff fda9 	bl	8018b1c <_PreparePacket>
 8018fca:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8018fcc:	693b      	ldr	r3, [r7, #16]
 8018fce:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8018fd0:	68fb      	ldr	r3, [r7, #12]
 8018fd2:	61fb      	str	r3, [r7, #28]
 8018fd4:	683b      	ldr	r3, [r7, #0]
 8018fd6:	61bb      	str	r3, [r7, #24]
 8018fd8:	e00b      	b.n	8018ff2 <SEGGER_SYSVIEW_RecordU32+0x46>
 8018fda:	69bb      	ldr	r3, [r7, #24]
 8018fdc:	b2da      	uxtb	r2, r3
 8018fde:	69fb      	ldr	r3, [r7, #28]
 8018fe0:	1c59      	adds	r1, r3, #1
 8018fe2:	61f9      	str	r1, [r7, #28]
 8018fe4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8018fe8:	b2d2      	uxtb	r2, r2
 8018fea:	701a      	strb	r2, [r3, #0]
 8018fec:	69bb      	ldr	r3, [r7, #24]
 8018fee:	09db      	lsrs	r3, r3, #7
 8018ff0:	61bb      	str	r3, [r7, #24]
 8018ff2:	69bb      	ldr	r3, [r7, #24]
 8018ff4:	2b7f      	cmp	r3, #127	; 0x7f
 8018ff6:	d8f0      	bhi.n	8018fda <SEGGER_SYSVIEW_RecordU32+0x2e>
 8018ff8:	69fb      	ldr	r3, [r7, #28]
 8018ffa:	1c5a      	adds	r2, r3, #1
 8018ffc:	61fa      	str	r2, [r7, #28]
 8018ffe:	69ba      	ldr	r2, [r7, #24]
 8019000:	b2d2      	uxtb	r2, r2
 8019002:	701a      	strb	r2, [r3, #0]
 8019004:	69fb      	ldr	r3, [r7, #28]
 8019006:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8019008:	687a      	ldr	r2, [r7, #4]
 801900a:	68f9      	ldr	r1, [r7, #12]
 801900c:	6938      	ldr	r0, [r7, #16]
 801900e:	f7ff fe75 	bl	8018cfc <_SendPacket>
  RECORD_END();
 8019012:	697b      	ldr	r3, [r7, #20]
 8019014:	f383 8811 	msr	BASEPRI, r3
}
 8019018:	bf00      	nop
 801901a:	3720      	adds	r7, #32
 801901c:	46bd      	mov	sp, r7
 801901e:	bd80      	pop	{r7, pc}
 8019020:	2001b488 	.word	0x2001b488

08019024 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8019024:	b580      	push	{r7, lr}
 8019026:	b08c      	sub	sp, #48	; 0x30
 8019028:	af00      	add	r7, sp, #0
 801902a:	60f8      	str	r0, [r7, #12]
 801902c:	60b9      	str	r1, [r7, #8]
 801902e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8019030:	f3ef 8311 	mrs	r3, BASEPRI
 8019034:	f04f 0120 	mov.w	r1, #32
 8019038:	f381 8811 	msr	BASEPRI, r1
 801903c:	61fb      	str	r3, [r7, #28]
 801903e:	4825      	ldr	r0, [pc, #148]	; (80190d4 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8019040:	f7ff fd6c 	bl	8018b1c <_PreparePacket>
 8019044:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8019046:	69bb      	ldr	r3, [r7, #24]
 8019048:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 801904a:	697b      	ldr	r3, [r7, #20]
 801904c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801904e:	68bb      	ldr	r3, [r7, #8]
 8019050:	62bb      	str	r3, [r7, #40]	; 0x28
 8019052:	e00b      	b.n	801906c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8019054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019056:	b2da      	uxtb	r2, r3
 8019058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801905a:	1c59      	adds	r1, r3, #1
 801905c:	62f9      	str	r1, [r7, #44]	; 0x2c
 801905e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8019062:	b2d2      	uxtb	r2, r2
 8019064:	701a      	strb	r2, [r3, #0]
 8019066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019068:	09db      	lsrs	r3, r3, #7
 801906a:	62bb      	str	r3, [r7, #40]	; 0x28
 801906c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801906e:	2b7f      	cmp	r3, #127	; 0x7f
 8019070:	d8f0      	bhi.n	8019054 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8019072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019074:	1c5a      	adds	r2, r3, #1
 8019076:	62fa      	str	r2, [r7, #44]	; 0x2c
 8019078:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801907a:	b2d2      	uxtb	r2, r2
 801907c:	701a      	strb	r2, [r3, #0]
 801907e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019080:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8019082:	697b      	ldr	r3, [r7, #20]
 8019084:	627b      	str	r3, [r7, #36]	; 0x24
 8019086:	687b      	ldr	r3, [r7, #4]
 8019088:	623b      	str	r3, [r7, #32]
 801908a:	e00b      	b.n	80190a4 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 801908c:	6a3b      	ldr	r3, [r7, #32]
 801908e:	b2da      	uxtb	r2, r3
 8019090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019092:	1c59      	adds	r1, r3, #1
 8019094:	6279      	str	r1, [r7, #36]	; 0x24
 8019096:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801909a:	b2d2      	uxtb	r2, r2
 801909c:	701a      	strb	r2, [r3, #0]
 801909e:	6a3b      	ldr	r3, [r7, #32]
 80190a0:	09db      	lsrs	r3, r3, #7
 80190a2:	623b      	str	r3, [r7, #32]
 80190a4:	6a3b      	ldr	r3, [r7, #32]
 80190a6:	2b7f      	cmp	r3, #127	; 0x7f
 80190a8:	d8f0      	bhi.n	801908c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80190aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80190ac:	1c5a      	adds	r2, r3, #1
 80190ae:	627a      	str	r2, [r7, #36]	; 0x24
 80190b0:	6a3a      	ldr	r2, [r7, #32]
 80190b2:	b2d2      	uxtb	r2, r2
 80190b4:	701a      	strb	r2, [r3, #0]
 80190b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80190b8:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80190ba:	68fa      	ldr	r2, [r7, #12]
 80190bc:	6979      	ldr	r1, [r7, #20]
 80190be:	69b8      	ldr	r0, [r7, #24]
 80190c0:	f7ff fe1c 	bl	8018cfc <_SendPacket>
  RECORD_END();
 80190c4:	69fb      	ldr	r3, [r7, #28]
 80190c6:	f383 8811 	msr	BASEPRI, r3
}
 80190ca:	bf00      	nop
 80190cc:	3730      	adds	r7, #48	; 0x30
 80190ce:	46bd      	mov	sp, r7
 80190d0:	bd80      	pop	{r7, pc}
 80190d2:	bf00      	nop
 80190d4:	2001b488 	.word	0x2001b488

080190d8 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 80190d8:	b580      	push	{r7, lr}
 80190da:	b08e      	sub	sp, #56	; 0x38
 80190dc:	af00      	add	r7, sp, #0
 80190de:	60f8      	str	r0, [r7, #12]
 80190e0:	60b9      	str	r1, [r7, #8]
 80190e2:	607a      	str	r2, [r7, #4]
 80190e4:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 80190e6:	f3ef 8311 	mrs	r3, BASEPRI
 80190ea:	f04f 0120 	mov.w	r1, #32
 80190ee:	f381 8811 	msr	BASEPRI, r1
 80190f2:	61fb      	str	r3, [r7, #28]
 80190f4:	4832      	ldr	r0, [pc, #200]	; (80191c0 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 80190f6:	f7ff fd11 	bl	8018b1c <_PreparePacket>
 80190fa:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80190fc:	69bb      	ldr	r3, [r7, #24]
 80190fe:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8019100:	697b      	ldr	r3, [r7, #20]
 8019102:	637b      	str	r3, [r7, #52]	; 0x34
 8019104:	68bb      	ldr	r3, [r7, #8]
 8019106:	633b      	str	r3, [r7, #48]	; 0x30
 8019108:	e00b      	b.n	8019122 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 801910a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801910c:	b2da      	uxtb	r2, r3
 801910e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019110:	1c59      	adds	r1, r3, #1
 8019112:	6379      	str	r1, [r7, #52]	; 0x34
 8019114:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8019118:	b2d2      	uxtb	r2, r2
 801911a:	701a      	strb	r2, [r3, #0]
 801911c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801911e:	09db      	lsrs	r3, r3, #7
 8019120:	633b      	str	r3, [r7, #48]	; 0x30
 8019122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019124:	2b7f      	cmp	r3, #127	; 0x7f
 8019126:	d8f0      	bhi.n	801910a <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8019128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801912a:	1c5a      	adds	r2, r3, #1
 801912c:	637a      	str	r2, [r7, #52]	; 0x34
 801912e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019130:	b2d2      	uxtb	r2, r2
 8019132:	701a      	strb	r2, [r3, #0]
 8019134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019136:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8019138:	697b      	ldr	r3, [r7, #20]
 801913a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801913c:	687b      	ldr	r3, [r7, #4]
 801913e:	62bb      	str	r3, [r7, #40]	; 0x28
 8019140:	e00b      	b.n	801915a <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8019142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019144:	b2da      	uxtb	r2, r3
 8019146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019148:	1c59      	adds	r1, r3, #1
 801914a:	62f9      	str	r1, [r7, #44]	; 0x2c
 801914c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8019150:	b2d2      	uxtb	r2, r2
 8019152:	701a      	strb	r2, [r3, #0]
 8019154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019156:	09db      	lsrs	r3, r3, #7
 8019158:	62bb      	str	r3, [r7, #40]	; 0x28
 801915a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801915c:	2b7f      	cmp	r3, #127	; 0x7f
 801915e:	d8f0      	bhi.n	8019142 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8019160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019162:	1c5a      	adds	r2, r3, #1
 8019164:	62fa      	str	r2, [r7, #44]	; 0x2c
 8019166:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019168:	b2d2      	uxtb	r2, r2
 801916a:	701a      	strb	r2, [r3, #0]
 801916c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801916e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8019170:	697b      	ldr	r3, [r7, #20]
 8019172:	627b      	str	r3, [r7, #36]	; 0x24
 8019174:	683b      	ldr	r3, [r7, #0]
 8019176:	623b      	str	r3, [r7, #32]
 8019178:	e00b      	b.n	8019192 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 801917a:	6a3b      	ldr	r3, [r7, #32]
 801917c:	b2da      	uxtb	r2, r3
 801917e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019180:	1c59      	adds	r1, r3, #1
 8019182:	6279      	str	r1, [r7, #36]	; 0x24
 8019184:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8019188:	b2d2      	uxtb	r2, r2
 801918a:	701a      	strb	r2, [r3, #0]
 801918c:	6a3b      	ldr	r3, [r7, #32]
 801918e:	09db      	lsrs	r3, r3, #7
 8019190:	623b      	str	r3, [r7, #32]
 8019192:	6a3b      	ldr	r3, [r7, #32]
 8019194:	2b7f      	cmp	r3, #127	; 0x7f
 8019196:	d8f0      	bhi.n	801917a <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8019198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801919a:	1c5a      	adds	r2, r3, #1
 801919c:	627a      	str	r2, [r7, #36]	; 0x24
 801919e:	6a3a      	ldr	r2, [r7, #32]
 80191a0:	b2d2      	uxtb	r2, r2
 80191a2:	701a      	strb	r2, [r3, #0]
 80191a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80191a6:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80191a8:	68fa      	ldr	r2, [r7, #12]
 80191aa:	6979      	ldr	r1, [r7, #20]
 80191ac:	69b8      	ldr	r0, [r7, #24]
 80191ae:	f7ff fda5 	bl	8018cfc <_SendPacket>
  RECORD_END();
 80191b2:	69fb      	ldr	r3, [r7, #28]
 80191b4:	f383 8811 	msr	BASEPRI, r3
}
 80191b8:	bf00      	nop
 80191ba:	3738      	adds	r7, #56	; 0x38
 80191bc:	46bd      	mov	sp, r7
 80191be:	bd80      	pop	{r7, pc}
 80191c0:	2001b488 	.word	0x2001b488

080191c4 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 80191c4:	b580      	push	{r7, lr}
 80191c6:	b090      	sub	sp, #64	; 0x40
 80191c8:	af00      	add	r7, sp, #0
 80191ca:	60f8      	str	r0, [r7, #12]
 80191cc:	60b9      	str	r1, [r7, #8]
 80191ce:	607a      	str	r2, [r7, #4]
 80191d0:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80191d2:	f3ef 8311 	mrs	r3, BASEPRI
 80191d6:	f04f 0120 	mov.w	r1, #32
 80191da:	f381 8811 	msr	BASEPRI, r1
 80191de:	61fb      	str	r3, [r7, #28]
 80191e0:	4840      	ldr	r0, [pc, #256]	; (80192e4 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 80191e2:	f7ff fc9b 	bl	8018b1c <_PreparePacket>
 80191e6:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80191e8:	69bb      	ldr	r3, [r7, #24]
 80191ea:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80191ec:	697b      	ldr	r3, [r7, #20]
 80191ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80191f0:	68bb      	ldr	r3, [r7, #8]
 80191f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80191f4:	e00b      	b.n	801920e <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 80191f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80191f8:	b2da      	uxtb	r2, r3
 80191fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80191fc:	1c59      	adds	r1, r3, #1
 80191fe:	63f9      	str	r1, [r7, #60]	; 0x3c
 8019200:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8019204:	b2d2      	uxtb	r2, r2
 8019206:	701a      	strb	r2, [r3, #0]
 8019208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801920a:	09db      	lsrs	r3, r3, #7
 801920c:	63bb      	str	r3, [r7, #56]	; 0x38
 801920e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019210:	2b7f      	cmp	r3, #127	; 0x7f
 8019212:	d8f0      	bhi.n	80191f6 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8019214:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019216:	1c5a      	adds	r2, r3, #1
 8019218:	63fa      	str	r2, [r7, #60]	; 0x3c
 801921a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801921c:	b2d2      	uxtb	r2, r2
 801921e:	701a      	strb	r2, [r3, #0]
 8019220:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019222:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8019224:	697b      	ldr	r3, [r7, #20]
 8019226:	637b      	str	r3, [r7, #52]	; 0x34
 8019228:	687b      	ldr	r3, [r7, #4]
 801922a:	633b      	str	r3, [r7, #48]	; 0x30
 801922c:	e00b      	b.n	8019246 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 801922e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019230:	b2da      	uxtb	r2, r3
 8019232:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019234:	1c59      	adds	r1, r3, #1
 8019236:	6379      	str	r1, [r7, #52]	; 0x34
 8019238:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801923c:	b2d2      	uxtb	r2, r2
 801923e:	701a      	strb	r2, [r3, #0]
 8019240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019242:	09db      	lsrs	r3, r3, #7
 8019244:	633b      	str	r3, [r7, #48]	; 0x30
 8019246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019248:	2b7f      	cmp	r3, #127	; 0x7f
 801924a:	d8f0      	bhi.n	801922e <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 801924c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801924e:	1c5a      	adds	r2, r3, #1
 8019250:	637a      	str	r2, [r7, #52]	; 0x34
 8019252:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019254:	b2d2      	uxtb	r2, r2
 8019256:	701a      	strb	r2, [r3, #0]
 8019258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801925a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 801925c:	697b      	ldr	r3, [r7, #20]
 801925e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019260:	683b      	ldr	r3, [r7, #0]
 8019262:	62bb      	str	r3, [r7, #40]	; 0x28
 8019264:	e00b      	b.n	801927e <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8019266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019268:	b2da      	uxtb	r2, r3
 801926a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801926c:	1c59      	adds	r1, r3, #1
 801926e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8019270:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8019274:	b2d2      	uxtb	r2, r2
 8019276:	701a      	strb	r2, [r3, #0]
 8019278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801927a:	09db      	lsrs	r3, r3, #7
 801927c:	62bb      	str	r3, [r7, #40]	; 0x28
 801927e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019280:	2b7f      	cmp	r3, #127	; 0x7f
 8019282:	d8f0      	bhi.n	8019266 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8019284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019286:	1c5a      	adds	r2, r3, #1
 8019288:	62fa      	str	r2, [r7, #44]	; 0x2c
 801928a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801928c:	b2d2      	uxtb	r2, r2
 801928e:	701a      	strb	r2, [r3, #0]
 8019290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019292:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8019294:	697b      	ldr	r3, [r7, #20]
 8019296:	627b      	str	r3, [r7, #36]	; 0x24
 8019298:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801929a:	623b      	str	r3, [r7, #32]
 801929c:	e00b      	b.n	80192b6 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 801929e:	6a3b      	ldr	r3, [r7, #32]
 80192a0:	b2da      	uxtb	r2, r3
 80192a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80192a4:	1c59      	adds	r1, r3, #1
 80192a6:	6279      	str	r1, [r7, #36]	; 0x24
 80192a8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80192ac:	b2d2      	uxtb	r2, r2
 80192ae:	701a      	strb	r2, [r3, #0]
 80192b0:	6a3b      	ldr	r3, [r7, #32]
 80192b2:	09db      	lsrs	r3, r3, #7
 80192b4:	623b      	str	r3, [r7, #32]
 80192b6:	6a3b      	ldr	r3, [r7, #32]
 80192b8:	2b7f      	cmp	r3, #127	; 0x7f
 80192ba:	d8f0      	bhi.n	801929e <SEGGER_SYSVIEW_RecordU32x4+0xda>
 80192bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80192be:	1c5a      	adds	r2, r3, #1
 80192c0:	627a      	str	r2, [r7, #36]	; 0x24
 80192c2:	6a3a      	ldr	r2, [r7, #32]
 80192c4:	b2d2      	uxtb	r2, r2
 80192c6:	701a      	strb	r2, [r3, #0]
 80192c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80192ca:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80192cc:	68fa      	ldr	r2, [r7, #12]
 80192ce:	6979      	ldr	r1, [r7, #20]
 80192d0:	69b8      	ldr	r0, [r7, #24]
 80192d2:	f7ff fd13 	bl	8018cfc <_SendPacket>
  RECORD_END();
 80192d6:	69fb      	ldr	r3, [r7, #28]
 80192d8:	f383 8811 	msr	BASEPRI, r3
}
 80192dc:	bf00      	nop
 80192de:	3740      	adds	r7, #64	; 0x40
 80192e0:	46bd      	mov	sp, r7
 80192e2:	bd80      	pop	{r7, pc}
 80192e4:	2001b488 	.word	0x2001b488

080192e8 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80192e8:	b580      	push	{r7, lr}
 80192ea:	b08c      	sub	sp, #48	; 0x30
 80192ec:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80192ee:	4b58      	ldr	r3, [pc, #352]	; (8019450 <SEGGER_SYSVIEW_Start+0x168>)
 80192f0:	2201      	movs	r2, #1
 80192f2:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80192f4:	f3ef 8311 	mrs	r3, BASEPRI
 80192f8:	f04f 0120 	mov.w	r1, #32
 80192fc:	f381 8811 	msr	BASEPRI, r1
 8019300:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8019302:	4b53      	ldr	r3, [pc, #332]	; (8019450 <SEGGER_SYSVIEW_Start+0x168>)
 8019304:	785b      	ldrb	r3, [r3, #1]
 8019306:	220a      	movs	r2, #10
 8019308:	4952      	ldr	r1, [pc, #328]	; (8019454 <SEGGER_SYSVIEW_Start+0x16c>)
 801930a:	4618      	mov	r0, r3
 801930c:	f7e6 ff60 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8019310:	68fb      	ldr	r3, [r7, #12]
 8019312:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8019316:	200a      	movs	r0, #10
 8019318:	f7ff fe2a 	bl	8018f70 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 801931c:	f3ef 8311 	mrs	r3, BASEPRI
 8019320:	f04f 0120 	mov.w	r1, #32
 8019324:	f381 8811 	msr	BASEPRI, r1
 8019328:	60bb      	str	r3, [r7, #8]
 801932a:	484b      	ldr	r0, [pc, #300]	; (8019458 <SEGGER_SYSVIEW_Start+0x170>)
 801932c:	f7ff fbf6 	bl	8018b1c <_PreparePacket>
 8019330:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8019332:	687b      	ldr	r3, [r7, #4]
 8019334:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8019336:	683b      	ldr	r3, [r7, #0]
 8019338:	62fb      	str	r3, [r7, #44]	; 0x2c
 801933a:	4b45      	ldr	r3, [pc, #276]	; (8019450 <SEGGER_SYSVIEW_Start+0x168>)
 801933c:	685b      	ldr	r3, [r3, #4]
 801933e:	62bb      	str	r3, [r7, #40]	; 0x28
 8019340:	e00b      	b.n	801935a <SEGGER_SYSVIEW_Start+0x72>
 8019342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019344:	b2da      	uxtb	r2, r3
 8019346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019348:	1c59      	adds	r1, r3, #1
 801934a:	62f9      	str	r1, [r7, #44]	; 0x2c
 801934c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8019350:	b2d2      	uxtb	r2, r2
 8019352:	701a      	strb	r2, [r3, #0]
 8019354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019356:	09db      	lsrs	r3, r3, #7
 8019358:	62bb      	str	r3, [r7, #40]	; 0x28
 801935a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801935c:	2b7f      	cmp	r3, #127	; 0x7f
 801935e:	d8f0      	bhi.n	8019342 <SEGGER_SYSVIEW_Start+0x5a>
 8019360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019362:	1c5a      	adds	r2, r3, #1
 8019364:	62fa      	str	r2, [r7, #44]	; 0x2c
 8019366:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019368:	b2d2      	uxtb	r2, r2
 801936a:	701a      	strb	r2, [r3, #0]
 801936c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801936e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8019370:	683b      	ldr	r3, [r7, #0]
 8019372:	627b      	str	r3, [r7, #36]	; 0x24
 8019374:	4b36      	ldr	r3, [pc, #216]	; (8019450 <SEGGER_SYSVIEW_Start+0x168>)
 8019376:	689b      	ldr	r3, [r3, #8]
 8019378:	623b      	str	r3, [r7, #32]
 801937a:	e00b      	b.n	8019394 <SEGGER_SYSVIEW_Start+0xac>
 801937c:	6a3b      	ldr	r3, [r7, #32]
 801937e:	b2da      	uxtb	r2, r3
 8019380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019382:	1c59      	adds	r1, r3, #1
 8019384:	6279      	str	r1, [r7, #36]	; 0x24
 8019386:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801938a:	b2d2      	uxtb	r2, r2
 801938c:	701a      	strb	r2, [r3, #0]
 801938e:	6a3b      	ldr	r3, [r7, #32]
 8019390:	09db      	lsrs	r3, r3, #7
 8019392:	623b      	str	r3, [r7, #32]
 8019394:	6a3b      	ldr	r3, [r7, #32]
 8019396:	2b7f      	cmp	r3, #127	; 0x7f
 8019398:	d8f0      	bhi.n	801937c <SEGGER_SYSVIEW_Start+0x94>
 801939a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801939c:	1c5a      	adds	r2, r3, #1
 801939e:	627a      	str	r2, [r7, #36]	; 0x24
 80193a0:	6a3a      	ldr	r2, [r7, #32]
 80193a2:	b2d2      	uxtb	r2, r2
 80193a4:	701a      	strb	r2, [r3, #0]
 80193a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80193a8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80193aa:	683b      	ldr	r3, [r7, #0]
 80193ac:	61fb      	str	r3, [r7, #28]
 80193ae:	4b28      	ldr	r3, [pc, #160]	; (8019450 <SEGGER_SYSVIEW_Start+0x168>)
 80193b0:	691b      	ldr	r3, [r3, #16]
 80193b2:	61bb      	str	r3, [r7, #24]
 80193b4:	e00b      	b.n	80193ce <SEGGER_SYSVIEW_Start+0xe6>
 80193b6:	69bb      	ldr	r3, [r7, #24]
 80193b8:	b2da      	uxtb	r2, r3
 80193ba:	69fb      	ldr	r3, [r7, #28]
 80193bc:	1c59      	adds	r1, r3, #1
 80193be:	61f9      	str	r1, [r7, #28]
 80193c0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80193c4:	b2d2      	uxtb	r2, r2
 80193c6:	701a      	strb	r2, [r3, #0]
 80193c8:	69bb      	ldr	r3, [r7, #24]
 80193ca:	09db      	lsrs	r3, r3, #7
 80193cc:	61bb      	str	r3, [r7, #24]
 80193ce:	69bb      	ldr	r3, [r7, #24]
 80193d0:	2b7f      	cmp	r3, #127	; 0x7f
 80193d2:	d8f0      	bhi.n	80193b6 <SEGGER_SYSVIEW_Start+0xce>
 80193d4:	69fb      	ldr	r3, [r7, #28]
 80193d6:	1c5a      	adds	r2, r3, #1
 80193d8:	61fa      	str	r2, [r7, #28]
 80193da:	69ba      	ldr	r2, [r7, #24]
 80193dc:	b2d2      	uxtb	r2, r2
 80193de:	701a      	strb	r2, [r3, #0]
 80193e0:	69fb      	ldr	r3, [r7, #28]
 80193e2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80193e4:	683b      	ldr	r3, [r7, #0]
 80193e6:	617b      	str	r3, [r7, #20]
 80193e8:	2300      	movs	r3, #0
 80193ea:	613b      	str	r3, [r7, #16]
 80193ec:	e00b      	b.n	8019406 <SEGGER_SYSVIEW_Start+0x11e>
 80193ee:	693b      	ldr	r3, [r7, #16]
 80193f0:	b2da      	uxtb	r2, r3
 80193f2:	697b      	ldr	r3, [r7, #20]
 80193f4:	1c59      	adds	r1, r3, #1
 80193f6:	6179      	str	r1, [r7, #20]
 80193f8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80193fc:	b2d2      	uxtb	r2, r2
 80193fe:	701a      	strb	r2, [r3, #0]
 8019400:	693b      	ldr	r3, [r7, #16]
 8019402:	09db      	lsrs	r3, r3, #7
 8019404:	613b      	str	r3, [r7, #16]
 8019406:	693b      	ldr	r3, [r7, #16]
 8019408:	2b7f      	cmp	r3, #127	; 0x7f
 801940a:	d8f0      	bhi.n	80193ee <SEGGER_SYSVIEW_Start+0x106>
 801940c:	697b      	ldr	r3, [r7, #20]
 801940e:	1c5a      	adds	r2, r3, #1
 8019410:	617a      	str	r2, [r7, #20]
 8019412:	693a      	ldr	r2, [r7, #16]
 8019414:	b2d2      	uxtb	r2, r2
 8019416:	701a      	strb	r2, [r3, #0]
 8019418:	697b      	ldr	r3, [r7, #20]
 801941a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 801941c:	2218      	movs	r2, #24
 801941e:	6839      	ldr	r1, [r7, #0]
 8019420:	6878      	ldr	r0, [r7, #4]
 8019422:	f7ff fc6b 	bl	8018cfc <_SendPacket>
      RECORD_END();
 8019426:	68bb      	ldr	r3, [r7, #8]
 8019428:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 801942c:	4b08      	ldr	r3, [pc, #32]	; (8019450 <SEGGER_SYSVIEW_Start+0x168>)
 801942e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019430:	2b00      	cmp	r3, #0
 8019432:	d002      	beq.n	801943a <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8019434:	4b06      	ldr	r3, [pc, #24]	; (8019450 <SEGGER_SYSVIEW_Start+0x168>)
 8019436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019438:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 801943a:	f000 f9eb 	bl	8019814 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 801943e:	f000 f9b1 	bl	80197a4 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8019442:	f000 fba9 	bl	8019b98 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8019446:	bf00      	nop
 8019448:	3730      	adds	r7, #48	; 0x30
 801944a:	46bd      	mov	sp, r7
 801944c:	bd80      	pop	{r7, pc}
 801944e:	bf00      	nop
 8019450:	2001b458 	.word	0x2001b458
 8019454:	0801b138 	.word	0x0801b138
 8019458:	2001b488 	.word	0x2001b488

0801945c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 801945c:	b580      	push	{r7, lr}
 801945e:	b082      	sub	sp, #8
 8019460:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8019462:	f3ef 8311 	mrs	r3, BASEPRI
 8019466:	f04f 0120 	mov.w	r1, #32
 801946a:	f381 8811 	msr	BASEPRI, r1
 801946e:	607b      	str	r3, [r7, #4]
 8019470:	480b      	ldr	r0, [pc, #44]	; (80194a0 <SEGGER_SYSVIEW_Stop+0x44>)
 8019472:	f7ff fb53 	bl	8018b1c <_PreparePacket>
 8019476:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8019478:	4b0a      	ldr	r3, [pc, #40]	; (80194a4 <SEGGER_SYSVIEW_Stop+0x48>)
 801947a:	781b      	ldrb	r3, [r3, #0]
 801947c:	2b00      	cmp	r3, #0
 801947e:	d007      	beq.n	8019490 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8019480:	220b      	movs	r2, #11
 8019482:	6839      	ldr	r1, [r7, #0]
 8019484:	6838      	ldr	r0, [r7, #0]
 8019486:	f7ff fc39 	bl	8018cfc <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 801948a:	4b06      	ldr	r3, [pc, #24]	; (80194a4 <SEGGER_SYSVIEW_Stop+0x48>)
 801948c:	2200      	movs	r2, #0
 801948e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8019490:	687b      	ldr	r3, [r7, #4]
 8019492:	f383 8811 	msr	BASEPRI, r3
}
 8019496:	bf00      	nop
 8019498:	3708      	adds	r7, #8
 801949a:	46bd      	mov	sp, r7
 801949c:	bd80      	pop	{r7, pc}
 801949e:	bf00      	nop
 80194a0:	2001b488 	.word	0x2001b488
 80194a4:	2001b458 	.word	0x2001b458

080194a8 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80194a8:	b580      	push	{r7, lr}
 80194aa:	b08c      	sub	sp, #48	; 0x30
 80194ac:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80194ae:	f3ef 8311 	mrs	r3, BASEPRI
 80194b2:	f04f 0120 	mov.w	r1, #32
 80194b6:	f381 8811 	msr	BASEPRI, r1
 80194ba:	60fb      	str	r3, [r7, #12]
 80194bc:	4845      	ldr	r0, [pc, #276]	; (80195d4 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80194be:	f7ff fb2d 	bl	8018b1c <_PreparePacket>
 80194c2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80194c4:	68bb      	ldr	r3, [r7, #8]
 80194c6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80194c8:	687b      	ldr	r3, [r7, #4]
 80194ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80194cc:	4b42      	ldr	r3, [pc, #264]	; (80195d8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80194ce:	685b      	ldr	r3, [r3, #4]
 80194d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80194d2:	e00b      	b.n	80194ec <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80194d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80194d6:	b2da      	uxtb	r2, r3
 80194d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80194da:	1c59      	adds	r1, r3, #1
 80194dc:	62f9      	str	r1, [r7, #44]	; 0x2c
 80194de:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80194e2:	b2d2      	uxtb	r2, r2
 80194e4:	701a      	strb	r2, [r3, #0]
 80194e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80194e8:	09db      	lsrs	r3, r3, #7
 80194ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80194ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80194ee:	2b7f      	cmp	r3, #127	; 0x7f
 80194f0:	d8f0      	bhi.n	80194d4 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80194f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80194f4:	1c5a      	adds	r2, r3, #1
 80194f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80194f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80194fa:	b2d2      	uxtb	r2, r2
 80194fc:	701a      	strb	r2, [r3, #0]
 80194fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019500:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8019502:	687b      	ldr	r3, [r7, #4]
 8019504:	627b      	str	r3, [r7, #36]	; 0x24
 8019506:	4b34      	ldr	r3, [pc, #208]	; (80195d8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8019508:	689b      	ldr	r3, [r3, #8]
 801950a:	623b      	str	r3, [r7, #32]
 801950c:	e00b      	b.n	8019526 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 801950e:	6a3b      	ldr	r3, [r7, #32]
 8019510:	b2da      	uxtb	r2, r3
 8019512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019514:	1c59      	adds	r1, r3, #1
 8019516:	6279      	str	r1, [r7, #36]	; 0x24
 8019518:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801951c:	b2d2      	uxtb	r2, r2
 801951e:	701a      	strb	r2, [r3, #0]
 8019520:	6a3b      	ldr	r3, [r7, #32]
 8019522:	09db      	lsrs	r3, r3, #7
 8019524:	623b      	str	r3, [r7, #32]
 8019526:	6a3b      	ldr	r3, [r7, #32]
 8019528:	2b7f      	cmp	r3, #127	; 0x7f
 801952a:	d8f0      	bhi.n	801950e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 801952c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801952e:	1c5a      	adds	r2, r3, #1
 8019530:	627a      	str	r2, [r7, #36]	; 0x24
 8019532:	6a3a      	ldr	r2, [r7, #32]
 8019534:	b2d2      	uxtb	r2, r2
 8019536:	701a      	strb	r2, [r3, #0]
 8019538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801953a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 801953c:	687b      	ldr	r3, [r7, #4]
 801953e:	61fb      	str	r3, [r7, #28]
 8019540:	4b25      	ldr	r3, [pc, #148]	; (80195d8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8019542:	691b      	ldr	r3, [r3, #16]
 8019544:	61bb      	str	r3, [r7, #24]
 8019546:	e00b      	b.n	8019560 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8019548:	69bb      	ldr	r3, [r7, #24]
 801954a:	b2da      	uxtb	r2, r3
 801954c:	69fb      	ldr	r3, [r7, #28]
 801954e:	1c59      	adds	r1, r3, #1
 8019550:	61f9      	str	r1, [r7, #28]
 8019552:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8019556:	b2d2      	uxtb	r2, r2
 8019558:	701a      	strb	r2, [r3, #0]
 801955a:	69bb      	ldr	r3, [r7, #24]
 801955c:	09db      	lsrs	r3, r3, #7
 801955e:	61bb      	str	r3, [r7, #24]
 8019560:	69bb      	ldr	r3, [r7, #24]
 8019562:	2b7f      	cmp	r3, #127	; 0x7f
 8019564:	d8f0      	bhi.n	8019548 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8019566:	69fb      	ldr	r3, [r7, #28]
 8019568:	1c5a      	adds	r2, r3, #1
 801956a:	61fa      	str	r2, [r7, #28]
 801956c:	69ba      	ldr	r2, [r7, #24]
 801956e:	b2d2      	uxtb	r2, r2
 8019570:	701a      	strb	r2, [r3, #0]
 8019572:	69fb      	ldr	r3, [r7, #28]
 8019574:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8019576:	687b      	ldr	r3, [r7, #4]
 8019578:	617b      	str	r3, [r7, #20]
 801957a:	2300      	movs	r3, #0
 801957c:	613b      	str	r3, [r7, #16]
 801957e:	e00b      	b.n	8019598 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8019580:	693b      	ldr	r3, [r7, #16]
 8019582:	b2da      	uxtb	r2, r3
 8019584:	697b      	ldr	r3, [r7, #20]
 8019586:	1c59      	adds	r1, r3, #1
 8019588:	6179      	str	r1, [r7, #20]
 801958a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801958e:	b2d2      	uxtb	r2, r2
 8019590:	701a      	strb	r2, [r3, #0]
 8019592:	693b      	ldr	r3, [r7, #16]
 8019594:	09db      	lsrs	r3, r3, #7
 8019596:	613b      	str	r3, [r7, #16]
 8019598:	693b      	ldr	r3, [r7, #16]
 801959a:	2b7f      	cmp	r3, #127	; 0x7f
 801959c:	d8f0      	bhi.n	8019580 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 801959e:	697b      	ldr	r3, [r7, #20]
 80195a0:	1c5a      	adds	r2, r3, #1
 80195a2:	617a      	str	r2, [r7, #20]
 80195a4:	693a      	ldr	r2, [r7, #16]
 80195a6:	b2d2      	uxtb	r2, r2
 80195a8:	701a      	strb	r2, [r3, #0]
 80195aa:	697b      	ldr	r3, [r7, #20]
 80195ac:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80195ae:	2218      	movs	r2, #24
 80195b0:	6879      	ldr	r1, [r7, #4]
 80195b2:	68b8      	ldr	r0, [r7, #8]
 80195b4:	f7ff fba2 	bl	8018cfc <_SendPacket>
  RECORD_END();
 80195b8:	68fb      	ldr	r3, [r7, #12]
 80195ba:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80195be:	4b06      	ldr	r3, [pc, #24]	; (80195d8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80195c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80195c2:	2b00      	cmp	r3, #0
 80195c4:	d002      	beq.n	80195cc <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80195c6:	4b04      	ldr	r3, [pc, #16]	; (80195d8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80195c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80195ca:	4798      	blx	r3
  }
}
 80195cc:	bf00      	nop
 80195ce:	3730      	adds	r7, #48	; 0x30
 80195d0:	46bd      	mov	sp, r7
 80195d2:	bd80      	pop	{r7, pc}
 80195d4:	2001b488 	.word	0x2001b488
 80195d8:	2001b458 	.word	0x2001b458

080195dc <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80195dc:	b580      	push	{r7, lr}
 80195de:	b092      	sub	sp, #72	; 0x48
 80195e0:	af00      	add	r7, sp, #0
 80195e2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80195e4:	f3ef 8311 	mrs	r3, BASEPRI
 80195e8:	f04f 0120 	mov.w	r1, #32
 80195ec:	f381 8811 	msr	BASEPRI, r1
 80195f0:	617b      	str	r3, [r7, #20]
 80195f2:	486a      	ldr	r0, [pc, #424]	; (801979c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80195f4:	f7ff fa92 	bl	8018b1c <_PreparePacket>
 80195f8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80195fa:	693b      	ldr	r3, [r7, #16]
 80195fc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80195fe:	68fb      	ldr	r3, [r7, #12]
 8019600:	647b      	str	r3, [r7, #68]	; 0x44
 8019602:	687b      	ldr	r3, [r7, #4]
 8019604:	681a      	ldr	r2, [r3, #0]
 8019606:	4b66      	ldr	r3, [pc, #408]	; (80197a0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8019608:	691b      	ldr	r3, [r3, #16]
 801960a:	1ad3      	subs	r3, r2, r3
 801960c:	643b      	str	r3, [r7, #64]	; 0x40
 801960e:	e00b      	b.n	8019628 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8019610:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019612:	b2da      	uxtb	r2, r3
 8019614:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019616:	1c59      	adds	r1, r3, #1
 8019618:	6479      	str	r1, [r7, #68]	; 0x44
 801961a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801961e:	b2d2      	uxtb	r2, r2
 8019620:	701a      	strb	r2, [r3, #0]
 8019622:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019624:	09db      	lsrs	r3, r3, #7
 8019626:	643b      	str	r3, [r7, #64]	; 0x40
 8019628:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801962a:	2b7f      	cmp	r3, #127	; 0x7f
 801962c:	d8f0      	bhi.n	8019610 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 801962e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019630:	1c5a      	adds	r2, r3, #1
 8019632:	647a      	str	r2, [r7, #68]	; 0x44
 8019634:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8019636:	b2d2      	uxtb	r2, r2
 8019638:	701a      	strb	r2, [r3, #0]
 801963a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801963c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 801963e:	68fb      	ldr	r3, [r7, #12]
 8019640:	63fb      	str	r3, [r7, #60]	; 0x3c
 8019642:	687b      	ldr	r3, [r7, #4]
 8019644:	689b      	ldr	r3, [r3, #8]
 8019646:	63bb      	str	r3, [r7, #56]	; 0x38
 8019648:	e00b      	b.n	8019662 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 801964a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801964c:	b2da      	uxtb	r2, r3
 801964e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019650:	1c59      	adds	r1, r3, #1
 8019652:	63f9      	str	r1, [r7, #60]	; 0x3c
 8019654:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8019658:	b2d2      	uxtb	r2, r2
 801965a:	701a      	strb	r2, [r3, #0]
 801965c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801965e:	09db      	lsrs	r3, r3, #7
 8019660:	63bb      	str	r3, [r7, #56]	; 0x38
 8019662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019664:	2b7f      	cmp	r3, #127	; 0x7f
 8019666:	d8f0      	bhi.n	801964a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8019668:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801966a:	1c5a      	adds	r2, r3, #1
 801966c:	63fa      	str	r2, [r7, #60]	; 0x3c
 801966e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019670:	b2d2      	uxtb	r2, r2
 8019672:	701a      	strb	r2, [r3, #0]
 8019674:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019676:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8019678:	687b      	ldr	r3, [r7, #4]
 801967a:	685b      	ldr	r3, [r3, #4]
 801967c:	2220      	movs	r2, #32
 801967e:	4619      	mov	r1, r3
 8019680:	68f8      	ldr	r0, [r7, #12]
 8019682:	f7ff f9fb 	bl	8018a7c <_EncodeStr>
 8019686:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8019688:	2209      	movs	r2, #9
 801968a:	68f9      	ldr	r1, [r7, #12]
 801968c:	6938      	ldr	r0, [r7, #16]
 801968e:	f7ff fb35 	bl	8018cfc <_SendPacket>
  //
  pPayload = pPayloadStart;
 8019692:	693b      	ldr	r3, [r7, #16]
 8019694:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8019696:	68fb      	ldr	r3, [r7, #12]
 8019698:	637b      	str	r3, [r7, #52]	; 0x34
 801969a:	687b      	ldr	r3, [r7, #4]
 801969c:	681a      	ldr	r2, [r3, #0]
 801969e:	4b40      	ldr	r3, [pc, #256]	; (80197a0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80196a0:	691b      	ldr	r3, [r3, #16]
 80196a2:	1ad3      	subs	r3, r2, r3
 80196a4:	633b      	str	r3, [r7, #48]	; 0x30
 80196a6:	e00b      	b.n	80196c0 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80196a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80196aa:	b2da      	uxtb	r2, r3
 80196ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80196ae:	1c59      	adds	r1, r3, #1
 80196b0:	6379      	str	r1, [r7, #52]	; 0x34
 80196b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80196b6:	b2d2      	uxtb	r2, r2
 80196b8:	701a      	strb	r2, [r3, #0]
 80196ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80196bc:	09db      	lsrs	r3, r3, #7
 80196be:	633b      	str	r3, [r7, #48]	; 0x30
 80196c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80196c2:	2b7f      	cmp	r3, #127	; 0x7f
 80196c4:	d8f0      	bhi.n	80196a8 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80196c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80196c8:	1c5a      	adds	r2, r3, #1
 80196ca:	637a      	str	r2, [r7, #52]	; 0x34
 80196cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80196ce:	b2d2      	uxtb	r2, r2
 80196d0:	701a      	strb	r2, [r3, #0]
 80196d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80196d4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80196d6:	68fb      	ldr	r3, [r7, #12]
 80196d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80196da:	687b      	ldr	r3, [r7, #4]
 80196dc:	68db      	ldr	r3, [r3, #12]
 80196de:	62bb      	str	r3, [r7, #40]	; 0x28
 80196e0:	e00b      	b.n	80196fa <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80196e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80196e4:	b2da      	uxtb	r2, r3
 80196e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80196e8:	1c59      	adds	r1, r3, #1
 80196ea:	62f9      	str	r1, [r7, #44]	; 0x2c
 80196ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80196f0:	b2d2      	uxtb	r2, r2
 80196f2:	701a      	strb	r2, [r3, #0]
 80196f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80196f6:	09db      	lsrs	r3, r3, #7
 80196f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80196fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80196fc:	2b7f      	cmp	r3, #127	; 0x7f
 80196fe:	d8f0      	bhi.n	80196e2 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8019700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019702:	1c5a      	adds	r2, r3, #1
 8019704:	62fa      	str	r2, [r7, #44]	; 0x2c
 8019706:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019708:	b2d2      	uxtb	r2, r2
 801970a:	701a      	strb	r2, [r3, #0]
 801970c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801970e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8019710:	68fb      	ldr	r3, [r7, #12]
 8019712:	627b      	str	r3, [r7, #36]	; 0x24
 8019714:	687b      	ldr	r3, [r7, #4]
 8019716:	691b      	ldr	r3, [r3, #16]
 8019718:	623b      	str	r3, [r7, #32]
 801971a:	e00b      	b.n	8019734 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 801971c:	6a3b      	ldr	r3, [r7, #32]
 801971e:	b2da      	uxtb	r2, r3
 8019720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019722:	1c59      	adds	r1, r3, #1
 8019724:	6279      	str	r1, [r7, #36]	; 0x24
 8019726:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801972a:	b2d2      	uxtb	r2, r2
 801972c:	701a      	strb	r2, [r3, #0]
 801972e:	6a3b      	ldr	r3, [r7, #32]
 8019730:	09db      	lsrs	r3, r3, #7
 8019732:	623b      	str	r3, [r7, #32]
 8019734:	6a3b      	ldr	r3, [r7, #32]
 8019736:	2b7f      	cmp	r3, #127	; 0x7f
 8019738:	d8f0      	bhi.n	801971c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 801973a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801973c:	1c5a      	adds	r2, r3, #1
 801973e:	627a      	str	r2, [r7, #36]	; 0x24
 8019740:	6a3a      	ldr	r2, [r7, #32]
 8019742:	b2d2      	uxtb	r2, r2
 8019744:	701a      	strb	r2, [r3, #0]
 8019746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019748:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 801974a:	68fb      	ldr	r3, [r7, #12]
 801974c:	61fb      	str	r3, [r7, #28]
 801974e:	2300      	movs	r3, #0
 8019750:	61bb      	str	r3, [r7, #24]
 8019752:	e00b      	b.n	801976c <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8019754:	69bb      	ldr	r3, [r7, #24]
 8019756:	b2da      	uxtb	r2, r3
 8019758:	69fb      	ldr	r3, [r7, #28]
 801975a:	1c59      	adds	r1, r3, #1
 801975c:	61f9      	str	r1, [r7, #28]
 801975e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8019762:	b2d2      	uxtb	r2, r2
 8019764:	701a      	strb	r2, [r3, #0]
 8019766:	69bb      	ldr	r3, [r7, #24]
 8019768:	09db      	lsrs	r3, r3, #7
 801976a:	61bb      	str	r3, [r7, #24]
 801976c:	69bb      	ldr	r3, [r7, #24]
 801976e:	2b7f      	cmp	r3, #127	; 0x7f
 8019770:	d8f0      	bhi.n	8019754 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8019772:	69fb      	ldr	r3, [r7, #28]
 8019774:	1c5a      	adds	r2, r3, #1
 8019776:	61fa      	str	r2, [r7, #28]
 8019778:	69ba      	ldr	r2, [r7, #24]
 801977a:	b2d2      	uxtb	r2, r2
 801977c:	701a      	strb	r2, [r3, #0]
 801977e:	69fb      	ldr	r3, [r7, #28]
 8019780:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8019782:	2215      	movs	r2, #21
 8019784:	68f9      	ldr	r1, [r7, #12]
 8019786:	6938      	ldr	r0, [r7, #16]
 8019788:	f7ff fab8 	bl	8018cfc <_SendPacket>
  RECORD_END();
 801978c:	697b      	ldr	r3, [r7, #20]
 801978e:	f383 8811 	msr	BASEPRI, r3
}
 8019792:	bf00      	nop
 8019794:	3748      	adds	r7, #72	; 0x48
 8019796:	46bd      	mov	sp, r7
 8019798:	bd80      	pop	{r7, pc}
 801979a:	bf00      	nop
 801979c:	2001b488 	.word	0x2001b488
 80197a0:	2001b458 	.word	0x2001b458

080197a4 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80197a4:	b580      	push	{r7, lr}
 80197a6:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80197a8:	4b07      	ldr	r3, [pc, #28]	; (80197c8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80197aa:	6a1b      	ldr	r3, [r3, #32]
 80197ac:	2b00      	cmp	r3, #0
 80197ae:	d008      	beq.n	80197c2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80197b0:	4b05      	ldr	r3, [pc, #20]	; (80197c8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80197b2:	6a1b      	ldr	r3, [r3, #32]
 80197b4:	685b      	ldr	r3, [r3, #4]
 80197b6:	2b00      	cmp	r3, #0
 80197b8:	d003      	beq.n	80197c2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80197ba:	4b03      	ldr	r3, [pc, #12]	; (80197c8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80197bc:	6a1b      	ldr	r3, [r3, #32]
 80197be:	685b      	ldr	r3, [r3, #4]
 80197c0:	4798      	blx	r3
  }
}
 80197c2:	bf00      	nop
 80197c4:	bd80      	pop	{r7, pc}
 80197c6:	bf00      	nop
 80197c8:	2001b458 	.word	0x2001b458

080197cc <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80197cc:	b580      	push	{r7, lr}
 80197ce:	b086      	sub	sp, #24
 80197d0:	af00      	add	r7, sp, #0
 80197d2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80197d4:	f3ef 8311 	mrs	r3, BASEPRI
 80197d8:	f04f 0120 	mov.w	r1, #32
 80197dc:	f381 8811 	msr	BASEPRI, r1
 80197e0:	617b      	str	r3, [r7, #20]
 80197e2:	480b      	ldr	r0, [pc, #44]	; (8019810 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80197e4:	f7ff f99a 	bl	8018b1c <_PreparePacket>
 80197e8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80197ea:	2280      	movs	r2, #128	; 0x80
 80197ec:	6879      	ldr	r1, [r7, #4]
 80197ee:	6938      	ldr	r0, [r7, #16]
 80197f0:	f7ff f944 	bl	8018a7c <_EncodeStr>
 80197f4:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80197f6:	220e      	movs	r2, #14
 80197f8:	68f9      	ldr	r1, [r7, #12]
 80197fa:	6938      	ldr	r0, [r7, #16]
 80197fc:	f7ff fa7e 	bl	8018cfc <_SendPacket>
  RECORD_END();
 8019800:	697b      	ldr	r3, [r7, #20]
 8019802:	f383 8811 	msr	BASEPRI, r3
}
 8019806:	bf00      	nop
 8019808:	3718      	adds	r7, #24
 801980a:	46bd      	mov	sp, r7
 801980c:	bd80      	pop	{r7, pc}
 801980e:	bf00      	nop
 8019810:	2001b488 	.word	0x2001b488

08019814 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8019814:	b590      	push	{r4, r7, lr}
 8019816:	b083      	sub	sp, #12
 8019818:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 801981a:	4b15      	ldr	r3, [pc, #84]	; (8019870 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 801981c:	6a1b      	ldr	r3, [r3, #32]
 801981e:	2b00      	cmp	r3, #0
 8019820:	d01a      	beq.n	8019858 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8019822:	4b13      	ldr	r3, [pc, #76]	; (8019870 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8019824:	6a1b      	ldr	r3, [r3, #32]
 8019826:	681b      	ldr	r3, [r3, #0]
 8019828:	2b00      	cmp	r3, #0
 801982a:	d015      	beq.n	8019858 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 801982c:	4b10      	ldr	r3, [pc, #64]	; (8019870 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 801982e:	6a1b      	ldr	r3, [r3, #32]
 8019830:	681b      	ldr	r3, [r3, #0]
 8019832:	4798      	blx	r3
 8019834:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8019838:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 801983a:	e9d7 0100 	ldrd	r0, r1, [r7]
 801983e:	f04f 0200 	mov.w	r2, #0
 8019842:	f04f 0300 	mov.w	r3, #0
 8019846:	000a      	movs	r2, r1
 8019848:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 801984a:	4613      	mov	r3, r2
 801984c:	461a      	mov	r2, r3
 801984e:	4621      	mov	r1, r4
 8019850:	200d      	movs	r0, #13
 8019852:	f7ff fbe7 	bl	8019024 <SEGGER_SYSVIEW_RecordU32x2>
 8019856:	e006      	b.n	8019866 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8019858:	4b06      	ldr	r3, [pc, #24]	; (8019874 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 801985a:	681b      	ldr	r3, [r3, #0]
 801985c:	4619      	mov	r1, r3
 801985e:	200c      	movs	r0, #12
 8019860:	f7ff fba4 	bl	8018fac <SEGGER_SYSVIEW_RecordU32>
  }
}
 8019864:	bf00      	nop
 8019866:	bf00      	nop
 8019868:	370c      	adds	r7, #12
 801986a:	46bd      	mov	sp, r7
 801986c:	bd90      	pop	{r4, r7, pc}
 801986e:	bf00      	nop
 8019870:	2001b458 	.word	0x2001b458
 8019874:	e0001004 	.word	0xe0001004

08019878 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8019878:	b580      	push	{r7, lr}
 801987a:	b082      	sub	sp, #8
 801987c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 801987e:	f3ef 8311 	mrs	r3, BASEPRI
 8019882:	f04f 0120 	mov.w	r1, #32
 8019886:	f381 8811 	msr	BASEPRI, r1
 801988a:	607b      	str	r3, [r7, #4]
 801988c:	4807      	ldr	r0, [pc, #28]	; (80198ac <SEGGER_SYSVIEW_OnIdle+0x34>)
 801988e:	f7ff f945 	bl	8018b1c <_PreparePacket>
 8019892:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8019894:	2211      	movs	r2, #17
 8019896:	6839      	ldr	r1, [r7, #0]
 8019898:	6838      	ldr	r0, [r7, #0]
 801989a:	f7ff fa2f 	bl	8018cfc <_SendPacket>
  RECORD_END();
 801989e:	687b      	ldr	r3, [r7, #4]
 80198a0:	f383 8811 	msr	BASEPRI, r3
}
 80198a4:	bf00      	nop
 80198a6:	3708      	adds	r7, #8
 80198a8:	46bd      	mov	sp, r7
 80198aa:	bd80      	pop	{r7, pc}
 80198ac:	2001b488 	.word	0x2001b488

080198b0 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80198b0:	b580      	push	{r7, lr}
 80198b2:	b088      	sub	sp, #32
 80198b4:	af00      	add	r7, sp, #0
 80198b6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80198b8:	f3ef 8311 	mrs	r3, BASEPRI
 80198bc:	f04f 0120 	mov.w	r1, #32
 80198c0:	f381 8811 	msr	BASEPRI, r1
 80198c4:	617b      	str	r3, [r7, #20]
 80198c6:	4819      	ldr	r0, [pc, #100]	; (801992c <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80198c8:	f7ff f928 	bl	8018b1c <_PreparePacket>
 80198cc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80198ce:	693b      	ldr	r3, [r7, #16]
 80198d0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80198d2:	4b17      	ldr	r3, [pc, #92]	; (8019930 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80198d4:	691b      	ldr	r3, [r3, #16]
 80198d6:	687a      	ldr	r2, [r7, #4]
 80198d8:	1ad3      	subs	r3, r2, r3
 80198da:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80198dc:	68fb      	ldr	r3, [r7, #12]
 80198de:	61fb      	str	r3, [r7, #28]
 80198e0:	687b      	ldr	r3, [r7, #4]
 80198e2:	61bb      	str	r3, [r7, #24]
 80198e4:	e00b      	b.n	80198fe <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80198e6:	69bb      	ldr	r3, [r7, #24]
 80198e8:	b2da      	uxtb	r2, r3
 80198ea:	69fb      	ldr	r3, [r7, #28]
 80198ec:	1c59      	adds	r1, r3, #1
 80198ee:	61f9      	str	r1, [r7, #28]
 80198f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80198f4:	b2d2      	uxtb	r2, r2
 80198f6:	701a      	strb	r2, [r3, #0]
 80198f8:	69bb      	ldr	r3, [r7, #24]
 80198fa:	09db      	lsrs	r3, r3, #7
 80198fc:	61bb      	str	r3, [r7, #24]
 80198fe:	69bb      	ldr	r3, [r7, #24]
 8019900:	2b7f      	cmp	r3, #127	; 0x7f
 8019902:	d8f0      	bhi.n	80198e6 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8019904:	69fb      	ldr	r3, [r7, #28]
 8019906:	1c5a      	adds	r2, r3, #1
 8019908:	61fa      	str	r2, [r7, #28]
 801990a:	69ba      	ldr	r2, [r7, #24]
 801990c:	b2d2      	uxtb	r2, r2
 801990e:	701a      	strb	r2, [r3, #0]
 8019910:	69fb      	ldr	r3, [r7, #28]
 8019912:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8019914:	2208      	movs	r2, #8
 8019916:	68f9      	ldr	r1, [r7, #12]
 8019918:	6938      	ldr	r0, [r7, #16]
 801991a:	f7ff f9ef 	bl	8018cfc <_SendPacket>
  RECORD_END();
 801991e:	697b      	ldr	r3, [r7, #20]
 8019920:	f383 8811 	msr	BASEPRI, r3
}
 8019924:	bf00      	nop
 8019926:	3720      	adds	r7, #32
 8019928:	46bd      	mov	sp, r7
 801992a:	bd80      	pop	{r7, pc}
 801992c:	2001b488 	.word	0x2001b488
 8019930:	2001b458 	.word	0x2001b458

08019934 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8019934:	b580      	push	{r7, lr}
 8019936:	b088      	sub	sp, #32
 8019938:	af00      	add	r7, sp, #0
 801993a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 801993c:	f3ef 8311 	mrs	r3, BASEPRI
 8019940:	f04f 0120 	mov.w	r1, #32
 8019944:	f381 8811 	msr	BASEPRI, r1
 8019948:	617b      	str	r3, [r7, #20]
 801994a:	4819      	ldr	r0, [pc, #100]	; (80199b0 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 801994c:	f7ff f8e6 	bl	8018b1c <_PreparePacket>
 8019950:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8019952:	693b      	ldr	r3, [r7, #16]
 8019954:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8019956:	4b17      	ldr	r3, [pc, #92]	; (80199b4 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8019958:	691b      	ldr	r3, [r3, #16]
 801995a:	687a      	ldr	r2, [r7, #4]
 801995c:	1ad3      	subs	r3, r2, r3
 801995e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8019960:	68fb      	ldr	r3, [r7, #12]
 8019962:	61fb      	str	r3, [r7, #28]
 8019964:	687b      	ldr	r3, [r7, #4]
 8019966:	61bb      	str	r3, [r7, #24]
 8019968:	e00b      	b.n	8019982 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 801996a:	69bb      	ldr	r3, [r7, #24]
 801996c:	b2da      	uxtb	r2, r3
 801996e:	69fb      	ldr	r3, [r7, #28]
 8019970:	1c59      	adds	r1, r3, #1
 8019972:	61f9      	str	r1, [r7, #28]
 8019974:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8019978:	b2d2      	uxtb	r2, r2
 801997a:	701a      	strb	r2, [r3, #0]
 801997c:	69bb      	ldr	r3, [r7, #24]
 801997e:	09db      	lsrs	r3, r3, #7
 8019980:	61bb      	str	r3, [r7, #24]
 8019982:	69bb      	ldr	r3, [r7, #24]
 8019984:	2b7f      	cmp	r3, #127	; 0x7f
 8019986:	d8f0      	bhi.n	801996a <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8019988:	69fb      	ldr	r3, [r7, #28]
 801998a:	1c5a      	adds	r2, r3, #1
 801998c:	61fa      	str	r2, [r7, #28]
 801998e:	69ba      	ldr	r2, [r7, #24]
 8019990:	b2d2      	uxtb	r2, r2
 8019992:	701a      	strb	r2, [r3, #0]
 8019994:	69fb      	ldr	r3, [r7, #28]
 8019996:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8019998:	2204      	movs	r2, #4
 801999a:	68f9      	ldr	r1, [r7, #12]
 801999c:	6938      	ldr	r0, [r7, #16]
 801999e:	f7ff f9ad 	bl	8018cfc <_SendPacket>
  RECORD_END();
 80199a2:	697b      	ldr	r3, [r7, #20]
 80199a4:	f383 8811 	msr	BASEPRI, r3
}
 80199a8:	bf00      	nop
 80199aa:	3720      	adds	r7, #32
 80199ac:	46bd      	mov	sp, r7
 80199ae:	bd80      	pop	{r7, pc}
 80199b0:	2001b488 	.word	0x2001b488
 80199b4:	2001b458 	.word	0x2001b458

080199b8 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80199b8:	b580      	push	{r7, lr}
 80199ba:	b088      	sub	sp, #32
 80199bc:	af00      	add	r7, sp, #0
 80199be:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80199c0:	f3ef 8311 	mrs	r3, BASEPRI
 80199c4:	f04f 0120 	mov.w	r1, #32
 80199c8:	f381 8811 	msr	BASEPRI, r1
 80199cc:	617b      	str	r3, [r7, #20]
 80199ce:	4819      	ldr	r0, [pc, #100]	; (8019a34 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80199d0:	f7ff f8a4 	bl	8018b1c <_PreparePacket>
 80199d4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80199d6:	693b      	ldr	r3, [r7, #16]
 80199d8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80199da:	4b17      	ldr	r3, [pc, #92]	; (8019a38 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80199dc:	691b      	ldr	r3, [r3, #16]
 80199de:	687a      	ldr	r2, [r7, #4]
 80199e0:	1ad3      	subs	r3, r2, r3
 80199e2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80199e4:	68fb      	ldr	r3, [r7, #12]
 80199e6:	61fb      	str	r3, [r7, #28]
 80199e8:	687b      	ldr	r3, [r7, #4]
 80199ea:	61bb      	str	r3, [r7, #24]
 80199ec:	e00b      	b.n	8019a06 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80199ee:	69bb      	ldr	r3, [r7, #24]
 80199f0:	b2da      	uxtb	r2, r3
 80199f2:	69fb      	ldr	r3, [r7, #28]
 80199f4:	1c59      	adds	r1, r3, #1
 80199f6:	61f9      	str	r1, [r7, #28]
 80199f8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80199fc:	b2d2      	uxtb	r2, r2
 80199fe:	701a      	strb	r2, [r3, #0]
 8019a00:	69bb      	ldr	r3, [r7, #24]
 8019a02:	09db      	lsrs	r3, r3, #7
 8019a04:	61bb      	str	r3, [r7, #24]
 8019a06:	69bb      	ldr	r3, [r7, #24]
 8019a08:	2b7f      	cmp	r3, #127	; 0x7f
 8019a0a:	d8f0      	bhi.n	80199ee <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8019a0c:	69fb      	ldr	r3, [r7, #28]
 8019a0e:	1c5a      	adds	r2, r3, #1
 8019a10:	61fa      	str	r2, [r7, #28]
 8019a12:	69ba      	ldr	r2, [r7, #24]
 8019a14:	b2d2      	uxtb	r2, r2
 8019a16:	701a      	strb	r2, [r3, #0]
 8019a18:	69fb      	ldr	r3, [r7, #28]
 8019a1a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8019a1c:	2206      	movs	r2, #6
 8019a1e:	68f9      	ldr	r1, [r7, #12]
 8019a20:	6938      	ldr	r0, [r7, #16]
 8019a22:	f7ff f96b 	bl	8018cfc <_SendPacket>
  RECORD_END();
 8019a26:	697b      	ldr	r3, [r7, #20]
 8019a28:	f383 8811 	msr	BASEPRI, r3
}
 8019a2c:	bf00      	nop
 8019a2e:	3720      	adds	r7, #32
 8019a30:	46bd      	mov	sp, r7
 8019a32:	bd80      	pop	{r7, pc}
 8019a34:	2001b488 	.word	0x2001b488
 8019a38:	2001b458 	.word	0x2001b458

08019a3c <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8019a3c:	b480      	push	{r7}
 8019a3e:	b083      	sub	sp, #12
 8019a40:	af00      	add	r7, sp, #0
 8019a42:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8019a44:	4b04      	ldr	r3, [pc, #16]	; (8019a58 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8019a46:	691b      	ldr	r3, [r3, #16]
 8019a48:	687a      	ldr	r2, [r7, #4]
 8019a4a:	1ad3      	subs	r3, r2, r3
}
 8019a4c:	4618      	mov	r0, r3
 8019a4e:	370c      	adds	r7, #12
 8019a50:	46bd      	mov	sp, r7
 8019a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a56:	4770      	bx	lr
 8019a58:	2001b458 	.word	0x2001b458

08019a5c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8019a5c:	b580      	push	{r7, lr}
 8019a5e:	b08c      	sub	sp, #48	; 0x30
 8019a60:	af00      	add	r7, sp, #0
 8019a62:	4603      	mov	r3, r0
 8019a64:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8019a66:	4b3b      	ldr	r3, [pc, #236]	; (8019b54 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8019a68:	681b      	ldr	r3, [r3, #0]
 8019a6a:	2b00      	cmp	r3, #0
 8019a6c:	d06d      	beq.n	8019b4a <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8019a6e:	4b39      	ldr	r3, [pc, #228]	; (8019b54 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8019a70:	681b      	ldr	r3, [r3, #0]
 8019a72:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8019a74:	2300      	movs	r3, #0
 8019a76:	62bb      	str	r3, [r7, #40]	; 0x28
 8019a78:	e008      	b.n	8019a8c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8019a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019a7c:	691b      	ldr	r3, [r3, #16]
 8019a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8019a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019a82:	2b00      	cmp	r3, #0
 8019a84:	d007      	beq.n	8019a96 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8019a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019a88:	3301      	adds	r3, #1
 8019a8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8019a8c:	79fb      	ldrb	r3, [r7, #7]
 8019a8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019a90:	429a      	cmp	r2, r3
 8019a92:	d3f2      	bcc.n	8019a7a <SEGGER_SYSVIEW_SendModule+0x1e>
 8019a94:	e000      	b.n	8019a98 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8019a96:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8019a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019a9a:	2b00      	cmp	r3, #0
 8019a9c:	d055      	beq.n	8019b4a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8019a9e:	f3ef 8311 	mrs	r3, BASEPRI
 8019aa2:	f04f 0120 	mov.w	r1, #32
 8019aa6:	f381 8811 	msr	BASEPRI, r1
 8019aaa:	617b      	str	r3, [r7, #20]
 8019aac:	482a      	ldr	r0, [pc, #168]	; (8019b58 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8019aae:	f7ff f835 	bl	8018b1c <_PreparePacket>
 8019ab2:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8019ab4:	693b      	ldr	r3, [r7, #16]
 8019ab6:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8019ab8:	68fb      	ldr	r3, [r7, #12]
 8019aba:	627b      	str	r3, [r7, #36]	; 0x24
 8019abc:	79fb      	ldrb	r3, [r7, #7]
 8019abe:	623b      	str	r3, [r7, #32]
 8019ac0:	e00b      	b.n	8019ada <SEGGER_SYSVIEW_SendModule+0x7e>
 8019ac2:	6a3b      	ldr	r3, [r7, #32]
 8019ac4:	b2da      	uxtb	r2, r3
 8019ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ac8:	1c59      	adds	r1, r3, #1
 8019aca:	6279      	str	r1, [r7, #36]	; 0x24
 8019acc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8019ad0:	b2d2      	uxtb	r2, r2
 8019ad2:	701a      	strb	r2, [r3, #0]
 8019ad4:	6a3b      	ldr	r3, [r7, #32]
 8019ad6:	09db      	lsrs	r3, r3, #7
 8019ad8:	623b      	str	r3, [r7, #32]
 8019ada:	6a3b      	ldr	r3, [r7, #32]
 8019adc:	2b7f      	cmp	r3, #127	; 0x7f
 8019ade:	d8f0      	bhi.n	8019ac2 <SEGGER_SYSVIEW_SendModule+0x66>
 8019ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ae2:	1c5a      	adds	r2, r3, #1
 8019ae4:	627a      	str	r2, [r7, #36]	; 0x24
 8019ae6:	6a3a      	ldr	r2, [r7, #32]
 8019ae8:	b2d2      	uxtb	r2, r2
 8019aea:	701a      	strb	r2, [r3, #0]
 8019aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019aee:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8019af0:	68fb      	ldr	r3, [r7, #12]
 8019af2:	61fb      	str	r3, [r7, #28]
 8019af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019af6:	689b      	ldr	r3, [r3, #8]
 8019af8:	61bb      	str	r3, [r7, #24]
 8019afa:	e00b      	b.n	8019b14 <SEGGER_SYSVIEW_SendModule+0xb8>
 8019afc:	69bb      	ldr	r3, [r7, #24]
 8019afe:	b2da      	uxtb	r2, r3
 8019b00:	69fb      	ldr	r3, [r7, #28]
 8019b02:	1c59      	adds	r1, r3, #1
 8019b04:	61f9      	str	r1, [r7, #28]
 8019b06:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8019b0a:	b2d2      	uxtb	r2, r2
 8019b0c:	701a      	strb	r2, [r3, #0]
 8019b0e:	69bb      	ldr	r3, [r7, #24]
 8019b10:	09db      	lsrs	r3, r3, #7
 8019b12:	61bb      	str	r3, [r7, #24]
 8019b14:	69bb      	ldr	r3, [r7, #24]
 8019b16:	2b7f      	cmp	r3, #127	; 0x7f
 8019b18:	d8f0      	bhi.n	8019afc <SEGGER_SYSVIEW_SendModule+0xa0>
 8019b1a:	69fb      	ldr	r3, [r7, #28]
 8019b1c:	1c5a      	adds	r2, r3, #1
 8019b1e:	61fa      	str	r2, [r7, #28]
 8019b20:	69ba      	ldr	r2, [r7, #24]
 8019b22:	b2d2      	uxtb	r2, r2
 8019b24:	701a      	strb	r2, [r3, #0]
 8019b26:	69fb      	ldr	r3, [r7, #28]
 8019b28:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8019b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019b2c:	681b      	ldr	r3, [r3, #0]
 8019b2e:	2280      	movs	r2, #128	; 0x80
 8019b30:	4619      	mov	r1, r3
 8019b32:	68f8      	ldr	r0, [r7, #12]
 8019b34:	f7fe ffa2 	bl	8018a7c <_EncodeStr>
 8019b38:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8019b3a:	2216      	movs	r2, #22
 8019b3c:	68f9      	ldr	r1, [r7, #12]
 8019b3e:	6938      	ldr	r0, [r7, #16]
 8019b40:	f7ff f8dc 	bl	8018cfc <_SendPacket>
      RECORD_END();
 8019b44:	697b      	ldr	r3, [r7, #20]
 8019b46:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8019b4a:	bf00      	nop
 8019b4c:	3730      	adds	r7, #48	; 0x30
 8019b4e:	46bd      	mov	sp, r7
 8019b50:	bd80      	pop	{r7, pc}
 8019b52:	bf00      	nop
 8019b54:	2001b480 	.word	0x2001b480
 8019b58:	2001b488 	.word	0x2001b488

08019b5c <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8019b5c:	b580      	push	{r7, lr}
 8019b5e:	b082      	sub	sp, #8
 8019b60:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8019b62:	4b0c      	ldr	r3, [pc, #48]	; (8019b94 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8019b64:	681b      	ldr	r3, [r3, #0]
 8019b66:	2b00      	cmp	r3, #0
 8019b68:	d00f      	beq.n	8019b8a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8019b6a:	4b0a      	ldr	r3, [pc, #40]	; (8019b94 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8019b6c:	681b      	ldr	r3, [r3, #0]
 8019b6e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8019b70:	687b      	ldr	r3, [r7, #4]
 8019b72:	68db      	ldr	r3, [r3, #12]
 8019b74:	2b00      	cmp	r3, #0
 8019b76:	d002      	beq.n	8019b7e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8019b78:	687b      	ldr	r3, [r7, #4]
 8019b7a:	68db      	ldr	r3, [r3, #12]
 8019b7c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8019b7e:	687b      	ldr	r3, [r7, #4]
 8019b80:	691b      	ldr	r3, [r3, #16]
 8019b82:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8019b84:	687b      	ldr	r3, [r7, #4]
 8019b86:	2b00      	cmp	r3, #0
 8019b88:	d1f2      	bne.n	8019b70 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8019b8a:	bf00      	nop
 8019b8c:	3708      	adds	r7, #8
 8019b8e:	46bd      	mov	sp, r7
 8019b90:	bd80      	pop	{r7, pc}
 8019b92:	bf00      	nop
 8019b94:	2001b480 	.word	0x2001b480

08019b98 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8019b98:	b580      	push	{r7, lr}
 8019b9a:	b086      	sub	sp, #24
 8019b9c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8019b9e:	f3ef 8311 	mrs	r3, BASEPRI
 8019ba2:	f04f 0120 	mov.w	r1, #32
 8019ba6:	f381 8811 	msr	BASEPRI, r1
 8019baa:	60fb      	str	r3, [r7, #12]
 8019bac:	4817      	ldr	r0, [pc, #92]	; (8019c0c <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8019bae:	f7fe ffb5 	bl	8018b1c <_PreparePacket>
 8019bb2:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8019bb4:	68bb      	ldr	r3, [r7, #8]
 8019bb6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8019bb8:	687b      	ldr	r3, [r7, #4]
 8019bba:	617b      	str	r3, [r7, #20]
 8019bbc:	4b14      	ldr	r3, [pc, #80]	; (8019c10 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8019bbe:	781b      	ldrb	r3, [r3, #0]
 8019bc0:	613b      	str	r3, [r7, #16]
 8019bc2:	e00b      	b.n	8019bdc <SEGGER_SYSVIEW_SendNumModules+0x44>
 8019bc4:	693b      	ldr	r3, [r7, #16]
 8019bc6:	b2da      	uxtb	r2, r3
 8019bc8:	697b      	ldr	r3, [r7, #20]
 8019bca:	1c59      	adds	r1, r3, #1
 8019bcc:	6179      	str	r1, [r7, #20]
 8019bce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8019bd2:	b2d2      	uxtb	r2, r2
 8019bd4:	701a      	strb	r2, [r3, #0]
 8019bd6:	693b      	ldr	r3, [r7, #16]
 8019bd8:	09db      	lsrs	r3, r3, #7
 8019bda:	613b      	str	r3, [r7, #16]
 8019bdc:	693b      	ldr	r3, [r7, #16]
 8019bde:	2b7f      	cmp	r3, #127	; 0x7f
 8019be0:	d8f0      	bhi.n	8019bc4 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8019be2:	697b      	ldr	r3, [r7, #20]
 8019be4:	1c5a      	adds	r2, r3, #1
 8019be6:	617a      	str	r2, [r7, #20]
 8019be8:	693a      	ldr	r2, [r7, #16]
 8019bea:	b2d2      	uxtb	r2, r2
 8019bec:	701a      	strb	r2, [r3, #0]
 8019bee:	697b      	ldr	r3, [r7, #20]
 8019bf0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8019bf2:	221b      	movs	r2, #27
 8019bf4:	6879      	ldr	r1, [r7, #4]
 8019bf6:	68b8      	ldr	r0, [r7, #8]
 8019bf8:	f7ff f880 	bl	8018cfc <_SendPacket>
  RECORD_END();
 8019bfc:	68fb      	ldr	r3, [r7, #12]
 8019bfe:	f383 8811 	msr	BASEPRI, r3
}
 8019c02:	bf00      	nop
 8019c04:	3718      	adds	r7, #24
 8019c06:	46bd      	mov	sp, r7
 8019c08:	bd80      	pop	{r7, pc}
 8019c0a:	bf00      	nop
 8019c0c:	2001b488 	.word	0x2001b488
 8019c10:	2001b484 	.word	0x2001b484

08019c14 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8019c14:	b580      	push	{r7, lr}
 8019c16:	b08a      	sub	sp, #40	; 0x28
 8019c18:	af00      	add	r7, sp, #0
 8019c1a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8019c1c:	f3ef 8311 	mrs	r3, BASEPRI
 8019c20:	f04f 0120 	mov.w	r1, #32
 8019c24:	f381 8811 	msr	BASEPRI, r1
 8019c28:	617b      	str	r3, [r7, #20]
 8019c2a:	4827      	ldr	r0, [pc, #156]	; (8019cc8 <SEGGER_SYSVIEW_Warn+0xb4>)
 8019c2c:	f7fe ff76 	bl	8018b1c <_PreparePacket>
 8019c30:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8019c32:	2280      	movs	r2, #128	; 0x80
 8019c34:	6879      	ldr	r1, [r7, #4]
 8019c36:	6938      	ldr	r0, [r7, #16]
 8019c38:	f7fe ff20 	bl	8018a7c <_EncodeStr>
 8019c3c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8019c3e:	68fb      	ldr	r3, [r7, #12]
 8019c40:	627b      	str	r3, [r7, #36]	; 0x24
 8019c42:	2301      	movs	r3, #1
 8019c44:	623b      	str	r3, [r7, #32]
 8019c46:	e00b      	b.n	8019c60 <SEGGER_SYSVIEW_Warn+0x4c>
 8019c48:	6a3b      	ldr	r3, [r7, #32]
 8019c4a:	b2da      	uxtb	r2, r3
 8019c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c4e:	1c59      	adds	r1, r3, #1
 8019c50:	6279      	str	r1, [r7, #36]	; 0x24
 8019c52:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8019c56:	b2d2      	uxtb	r2, r2
 8019c58:	701a      	strb	r2, [r3, #0]
 8019c5a:	6a3b      	ldr	r3, [r7, #32]
 8019c5c:	09db      	lsrs	r3, r3, #7
 8019c5e:	623b      	str	r3, [r7, #32]
 8019c60:	6a3b      	ldr	r3, [r7, #32]
 8019c62:	2b7f      	cmp	r3, #127	; 0x7f
 8019c64:	d8f0      	bhi.n	8019c48 <SEGGER_SYSVIEW_Warn+0x34>
 8019c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c68:	1c5a      	adds	r2, r3, #1
 8019c6a:	627a      	str	r2, [r7, #36]	; 0x24
 8019c6c:	6a3a      	ldr	r2, [r7, #32]
 8019c6e:	b2d2      	uxtb	r2, r2
 8019c70:	701a      	strb	r2, [r3, #0]
 8019c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c74:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8019c76:	68fb      	ldr	r3, [r7, #12]
 8019c78:	61fb      	str	r3, [r7, #28]
 8019c7a:	2300      	movs	r3, #0
 8019c7c:	61bb      	str	r3, [r7, #24]
 8019c7e:	e00b      	b.n	8019c98 <SEGGER_SYSVIEW_Warn+0x84>
 8019c80:	69bb      	ldr	r3, [r7, #24]
 8019c82:	b2da      	uxtb	r2, r3
 8019c84:	69fb      	ldr	r3, [r7, #28]
 8019c86:	1c59      	adds	r1, r3, #1
 8019c88:	61f9      	str	r1, [r7, #28]
 8019c8a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8019c8e:	b2d2      	uxtb	r2, r2
 8019c90:	701a      	strb	r2, [r3, #0]
 8019c92:	69bb      	ldr	r3, [r7, #24]
 8019c94:	09db      	lsrs	r3, r3, #7
 8019c96:	61bb      	str	r3, [r7, #24]
 8019c98:	69bb      	ldr	r3, [r7, #24]
 8019c9a:	2b7f      	cmp	r3, #127	; 0x7f
 8019c9c:	d8f0      	bhi.n	8019c80 <SEGGER_SYSVIEW_Warn+0x6c>
 8019c9e:	69fb      	ldr	r3, [r7, #28]
 8019ca0:	1c5a      	adds	r2, r3, #1
 8019ca2:	61fa      	str	r2, [r7, #28]
 8019ca4:	69ba      	ldr	r2, [r7, #24]
 8019ca6:	b2d2      	uxtb	r2, r2
 8019ca8:	701a      	strb	r2, [r3, #0]
 8019caa:	69fb      	ldr	r3, [r7, #28]
 8019cac:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8019cae:	221a      	movs	r2, #26
 8019cb0:	68f9      	ldr	r1, [r7, #12]
 8019cb2:	6938      	ldr	r0, [r7, #16]
 8019cb4:	f7ff f822 	bl	8018cfc <_SendPacket>
  RECORD_END();
 8019cb8:	697b      	ldr	r3, [r7, #20]
 8019cba:	f383 8811 	msr	BASEPRI, r3
}
 8019cbe:	bf00      	nop
 8019cc0:	3728      	adds	r7, #40	; 0x28
 8019cc2:	46bd      	mov	sp, r7
 8019cc4:	bd80      	pop	{r7, pc}
 8019cc6:	bf00      	nop
 8019cc8:	2001b488 	.word	0x2001b488

08019ccc <arm_pid_init_f32>:
 8019ccc:	edd0 6a08 	vldr	s13, [r0, #32]
 8019cd0:	edd0 7a06 	vldr	s15, [r0, #24]
 8019cd4:	ed90 7a07 	vldr	s14, [r0, #28]
 8019cd8:	edc0 6a02 	vstr	s13, [r0, #8]
 8019cdc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8019ce0:	ee36 6aa6 	vadd.f32	s12, s13, s13
 8019ce4:	eef1 7a67 	vneg.f32	s15, s15
 8019ce8:	ee37 7a26 	vadd.f32	s14, s14, s13
 8019cec:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8019cf0:	ed80 7a00 	vstr	s14, [r0]
 8019cf4:	edc0 7a01 	vstr	s15, [r0, #4]
 8019cf8:	b901      	cbnz	r1, 8019cfc <arm_pid_init_f32+0x30>
 8019cfa:	4770      	bx	lr
 8019cfc:	2300      	movs	r3, #0
 8019cfe:	60c3      	str	r3, [r0, #12]
 8019d00:	6103      	str	r3, [r0, #16]
 8019d02:	6143      	str	r3, [r0, #20]
 8019d04:	4770      	bx	lr
 8019d06:	bf00      	nop

08019d08 <__errno>:
 8019d08:	4b01      	ldr	r3, [pc, #4]	; (8019d10 <__errno+0x8>)
 8019d0a:	6818      	ldr	r0, [r3, #0]
 8019d0c:	4770      	bx	lr
 8019d0e:	bf00      	nop
 8019d10:	200013c4 	.word	0x200013c4

08019d14 <__libc_init_array>:
 8019d14:	b570      	push	{r4, r5, r6, lr}
 8019d16:	4d0d      	ldr	r5, [pc, #52]	; (8019d4c <__libc_init_array+0x38>)
 8019d18:	4c0d      	ldr	r4, [pc, #52]	; (8019d50 <__libc_init_array+0x3c>)
 8019d1a:	1b64      	subs	r4, r4, r5
 8019d1c:	10a4      	asrs	r4, r4, #2
 8019d1e:	2600      	movs	r6, #0
 8019d20:	42a6      	cmp	r6, r4
 8019d22:	d109      	bne.n	8019d38 <__libc_init_array+0x24>
 8019d24:	4d0b      	ldr	r5, [pc, #44]	; (8019d54 <__libc_init_array+0x40>)
 8019d26:	4c0c      	ldr	r4, [pc, #48]	; (8019d58 <__libc_init_array+0x44>)
 8019d28:	f000 fe22 	bl	801a970 <_init>
 8019d2c:	1b64      	subs	r4, r4, r5
 8019d2e:	10a4      	asrs	r4, r4, #2
 8019d30:	2600      	movs	r6, #0
 8019d32:	42a6      	cmp	r6, r4
 8019d34:	d105      	bne.n	8019d42 <__libc_init_array+0x2e>
 8019d36:	bd70      	pop	{r4, r5, r6, pc}
 8019d38:	f855 3b04 	ldr.w	r3, [r5], #4
 8019d3c:	4798      	blx	r3
 8019d3e:	3601      	adds	r6, #1
 8019d40:	e7ee      	b.n	8019d20 <__libc_init_array+0xc>
 8019d42:	f855 3b04 	ldr.w	r3, [r5], #4
 8019d46:	4798      	blx	r3
 8019d48:	3601      	adds	r6, #1
 8019d4a:	e7f2      	b.n	8019d32 <__libc_init_array+0x1e>
 8019d4c:	0801b1e0 	.word	0x0801b1e0
 8019d50:	0801b1e0 	.word	0x0801b1e0
 8019d54:	0801b1e0 	.word	0x0801b1e0
 8019d58:	0801b1e4 	.word	0x0801b1e4

08019d5c <__retarget_lock_acquire_recursive>:
 8019d5c:	4770      	bx	lr

08019d5e <__retarget_lock_release_recursive>:
 8019d5e:	4770      	bx	lr

08019d60 <memcmp>:
 8019d60:	b530      	push	{r4, r5, lr}
 8019d62:	3901      	subs	r1, #1
 8019d64:	2400      	movs	r4, #0
 8019d66:	42a2      	cmp	r2, r4
 8019d68:	d101      	bne.n	8019d6e <memcmp+0xe>
 8019d6a:	2000      	movs	r0, #0
 8019d6c:	e005      	b.n	8019d7a <memcmp+0x1a>
 8019d6e:	5d03      	ldrb	r3, [r0, r4]
 8019d70:	3401      	adds	r4, #1
 8019d72:	5d0d      	ldrb	r5, [r1, r4]
 8019d74:	42ab      	cmp	r3, r5
 8019d76:	d0f6      	beq.n	8019d66 <memcmp+0x6>
 8019d78:	1b58      	subs	r0, r3, r5
 8019d7a:	bd30      	pop	{r4, r5, pc}

08019d7c <memcpy>:
 8019d7c:	440a      	add	r2, r1
 8019d7e:	4291      	cmp	r1, r2
 8019d80:	f100 33ff 	add.w	r3, r0, #4294967295
 8019d84:	d100      	bne.n	8019d88 <memcpy+0xc>
 8019d86:	4770      	bx	lr
 8019d88:	b510      	push	{r4, lr}
 8019d8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019d8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019d92:	4291      	cmp	r1, r2
 8019d94:	d1f9      	bne.n	8019d8a <memcpy+0xe>
 8019d96:	bd10      	pop	{r4, pc}

08019d98 <memset>:
 8019d98:	4402      	add	r2, r0
 8019d9a:	4603      	mov	r3, r0
 8019d9c:	4293      	cmp	r3, r2
 8019d9e:	d100      	bne.n	8019da2 <memset+0xa>
 8019da0:	4770      	bx	lr
 8019da2:	f803 1b01 	strb.w	r1, [r3], #1
 8019da6:	e7f9      	b.n	8019d9c <memset+0x4>

08019da8 <cleanup_glue>:
 8019da8:	b538      	push	{r3, r4, r5, lr}
 8019daa:	460c      	mov	r4, r1
 8019dac:	6809      	ldr	r1, [r1, #0]
 8019dae:	4605      	mov	r5, r0
 8019db0:	b109      	cbz	r1, 8019db6 <cleanup_glue+0xe>
 8019db2:	f7ff fff9 	bl	8019da8 <cleanup_glue>
 8019db6:	4621      	mov	r1, r4
 8019db8:	4628      	mov	r0, r5
 8019dba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019dbe:	f000 b869 	b.w	8019e94 <_free_r>
	...

08019dc4 <_reclaim_reent>:
 8019dc4:	4b2c      	ldr	r3, [pc, #176]	; (8019e78 <_reclaim_reent+0xb4>)
 8019dc6:	681b      	ldr	r3, [r3, #0]
 8019dc8:	4283      	cmp	r3, r0
 8019dca:	b570      	push	{r4, r5, r6, lr}
 8019dcc:	4604      	mov	r4, r0
 8019dce:	d051      	beq.n	8019e74 <_reclaim_reent+0xb0>
 8019dd0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8019dd2:	b143      	cbz	r3, 8019de6 <_reclaim_reent+0x22>
 8019dd4:	68db      	ldr	r3, [r3, #12]
 8019dd6:	2b00      	cmp	r3, #0
 8019dd8:	d14a      	bne.n	8019e70 <_reclaim_reent+0xac>
 8019dda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019ddc:	6819      	ldr	r1, [r3, #0]
 8019dde:	b111      	cbz	r1, 8019de6 <_reclaim_reent+0x22>
 8019de0:	4620      	mov	r0, r4
 8019de2:	f000 f857 	bl	8019e94 <_free_r>
 8019de6:	6961      	ldr	r1, [r4, #20]
 8019de8:	b111      	cbz	r1, 8019df0 <_reclaim_reent+0x2c>
 8019dea:	4620      	mov	r0, r4
 8019dec:	f000 f852 	bl	8019e94 <_free_r>
 8019df0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8019df2:	b111      	cbz	r1, 8019dfa <_reclaim_reent+0x36>
 8019df4:	4620      	mov	r0, r4
 8019df6:	f000 f84d 	bl	8019e94 <_free_r>
 8019dfa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8019dfc:	b111      	cbz	r1, 8019e04 <_reclaim_reent+0x40>
 8019dfe:	4620      	mov	r0, r4
 8019e00:	f000 f848 	bl	8019e94 <_free_r>
 8019e04:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8019e06:	b111      	cbz	r1, 8019e0e <_reclaim_reent+0x4a>
 8019e08:	4620      	mov	r0, r4
 8019e0a:	f000 f843 	bl	8019e94 <_free_r>
 8019e0e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8019e10:	b111      	cbz	r1, 8019e18 <_reclaim_reent+0x54>
 8019e12:	4620      	mov	r0, r4
 8019e14:	f000 f83e 	bl	8019e94 <_free_r>
 8019e18:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8019e1a:	b111      	cbz	r1, 8019e22 <_reclaim_reent+0x5e>
 8019e1c:	4620      	mov	r0, r4
 8019e1e:	f000 f839 	bl	8019e94 <_free_r>
 8019e22:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8019e24:	b111      	cbz	r1, 8019e2c <_reclaim_reent+0x68>
 8019e26:	4620      	mov	r0, r4
 8019e28:	f000 f834 	bl	8019e94 <_free_r>
 8019e2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019e2e:	b111      	cbz	r1, 8019e36 <_reclaim_reent+0x72>
 8019e30:	4620      	mov	r0, r4
 8019e32:	f000 f82f 	bl	8019e94 <_free_r>
 8019e36:	69a3      	ldr	r3, [r4, #24]
 8019e38:	b1e3      	cbz	r3, 8019e74 <_reclaim_reent+0xb0>
 8019e3a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8019e3c:	4620      	mov	r0, r4
 8019e3e:	4798      	blx	r3
 8019e40:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8019e42:	b1b9      	cbz	r1, 8019e74 <_reclaim_reent+0xb0>
 8019e44:	4620      	mov	r0, r4
 8019e46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019e4a:	f7ff bfad 	b.w	8019da8 <cleanup_glue>
 8019e4e:	5949      	ldr	r1, [r1, r5]
 8019e50:	b941      	cbnz	r1, 8019e64 <_reclaim_reent+0xa0>
 8019e52:	3504      	adds	r5, #4
 8019e54:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019e56:	2d80      	cmp	r5, #128	; 0x80
 8019e58:	68d9      	ldr	r1, [r3, #12]
 8019e5a:	d1f8      	bne.n	8019e4e <_reclaim_reent+0x8a>
 8019e5c:	4620      	mov	r0, r4
 8019e5e:	f000 f819 	bl	8019e94 <_free_r>
 8019e62:	e7ba      	b.n	8019dda <_reclaim_reent+0x16>
 8019e64:	680e      	ldr	r6, [r1, #0]
 8019e66:	4620      	mov	r0, r4
 8019e68:	f000 f814 	bl	8019e94 <_free_r>
 8019e6c:	4631      	mov	r1, r6
 8019e6e:	e7ef      	b.n	8019e50 <_reclaim_reent+0x8c>
 8019e70:	2500      	movs	r5, #0
 8019e72:	e7ef      	b.n	8019e54 <_reclaim_reent+0x90>
 8019e74:	bd70      	pop	{r4, r5, r6, pc}
 8019e76:	bf00      	nop
 8019e78:	200013c4 	.word	0x200013c4

08019e7c <__malloc_lock>:
 8019e7c:	4801      	ldr	r0, [pc, #4]	; (8019e84 <__malloc_lock+0x8>)
 8019e7e:	f7ff bf6d 	b.w	8019d5c <__retarget_lock_acquire_recursive>
 8019e82:	bf00      	nop
 8019e84:	2001ea1c 	.word	0x2001ea1c

08019e88 <__malloc_unlock>:
 8019e88:	4801      	ldr	r0, [pc, #4]	; (8019e90 <__malloc_unlock+0x8>)
 8019e8a:	f7ff bf68 	b.w	8019d5e <__retarget_lock_release_recursive>
 8019e8e:	bf00      	nop
 8019e90:	2001ea1c 	.word	0x2001ea1c

08019e94 <_free_r>:
 8019e94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019e96:	2900      	cmp	r1, #0
 8019e98:	d048      	beq.n	8019f2c <_free_r+0x98>
 8019e9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019e9e:	9001      	str	r0, [sp, #4]
 8019ea0:	2b00      	cmp	r3, #0
 8019ea2:	f1a1 0404 	sub.w	r4, r1, #4
 8019ea6:	bfb8      	it	lt
 8019ea8:	18e4      	addlt	r4, r4, r3
 8019eaa:	f7ff ffe7 	bl	8019e7c <__malloc_lock>
 8019eae:	4a20      	ldr	r2, [pc, #128]	; (8019f30 <_free_r+0x9c>)
 8019eb0:	9801      	ldr	r0, [sp, #4]
 8019eb2:	6813      	ldr	r3, [r2, #0]
 8019eb4:	4615      	mov	r5, r2
 8019eb6:	b933      	cbnz	r3, 8019ec6 <_free_r+0x32>
 8019eb8:	6063      	str	r3, [r4, #4]
 8019eba:	6014      	str	r4, [r2, #0]
 8019ebc:	b003      	add	sp, #12
 8019ebe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019ec2:	f7ff bfe1 	b.w	8019e88 <__malloc_unlock>
 8019ec6:	42a3      	cmp	r3, r4
 8019ec8:	d90b      	bls.n	8019ee2 <_free_r+0x4e>
 8019eca:	6821      	ldr	r1, [r4, #0]
 8019ecc:	1862      	adds	r2, r4, r1
 8019ece:	4293      	cmp	r3, r2
 8019ed0:	bf04      	itt	eq
 8019ed2:	681a      	ldreq	r2, [r3, #0]
 8019ed4:	685b      	ldreq	r3, [r3, #4]
 8019ed6:	6063      	str	r3, [r4, #4]
 8019ed8:	bf04      	itt	eq
 8019eda:	1852      	addeq	r2, r2, r1
 8019edc:	6022      	streq	r2, [r4, #0]
 8019ede:	602c      	str	r4, [r5, #0]
 8019ee0:	e7ec      	b.n	8019ebc <_free_r+0x28>
 8019ee2:	461a      	mov	r2, r3
 8019ee4:	685b      	ldr	r3, [r3, #4]
 8019ee6:	b10b      	cbz	r3, 8019eec <_free_r+0x58>
 8019ee8:	42a3      	cmp	r3, r4
 8019eea:	d9fa      	bls.n	8019ee2 <_free_r+0x4e>
 8019eec:	6811      	ldr	r1, [r2, #0]
 8019eee:	1855      	adds	r5, r2, r1
 8019ef0:	42a5      	cmp	r5, r4
 8019ef2:	d10b      	bne.n	8019f0c <_free_r+0x78>
 8019ef4:	6824      	ldr	r4, [r4, #0]
 8019ef6:	4421      	add	r1, r4
 8019ef8:	1854      	adds	r4, r2, r1
 8019efa:	42a3      	cmp	r3, r4
 8019efc:	6011      	str	r1, [r2, #0]
 8019efe:	d1dd      	bne.n	8019ebc <_free_r+0x28>
 8019f00:	681c      	ldr	r4, [r3, #0]
 8019f02:	685b      	ldr	r3, [r3, #4]
 8019f04:	6053      	str	r3, [r2, #4]
 8019f06:	4421      	add	r1, r4
 8019f08:	6011      	str	r1, [r2, #0]
 8019f0a:	e7d7      	b.n	8019ebc <_free_r+0x28>
 8019f0c:	d902      	bls.n	8019f14 <_free_r+0x80>
 8019f0e:	230c      	movs	r3, #12
 8019f10:	6003      	str	r3, [r0, #0]
 8019f12:	e7d3      	b.n	8019ebc <_free_r+0x28>
 8019f14:	6825      	ldr	r5, [r4, #0]
 8019f16:	1961      	adds	r1, r4, r5
 8019f18:	428b      	cmp	r3, r1
 8019f1a:	bf04      	itt	eq
 8019f1c:	6819      	ldreq	r1, [r3, #0]
 8019f1e:	685b      	ldreq	r3, [r3, #4]
 8019f20:	6063      	str	r3, [r4, #4]
 8019f22:	bf04      	itt	eq
 8019f24:	1949      	addeq	r1, r1, r5
 8019f26:	6021      	streq	r1, [r4, #0]
 8019f28:	6054      	str	r4, [r2, #4]
 8019f2a:	e7c7      	b.n	8019ebc <_free_r+0x28>
 8019f2c:	b003      	add	sp, #12
 8019f2e:	bd30      	pop	{r4, r5, pc}
 8019f30:	2001b56c 	.word	0x2001b56c

08019f34 <fmax>:
 8019f34:	b508      	push	{r3, lr}
 8019f36:	ed2d 8b04 	vpush	{d8-d9}
 8019f3a:	eeb0 8a40 	vmov.f32	s16, s0
 8019f3e:	eef0 8a60 	vmov.f32	s17, s1
 8019f42:	eeb0 9a41 	vmov.f32	s18, s2
 8019f46:	eef0 9a61 	vmov.f32	s19, s3
 8019f4a:	f000 f81b 	bl	8019f84 <__fpclassifyd>
 8019f4e:	b168      	cbz	r0, 8019f6c <fmax+0x38>
 8019f50:	eeb0 0a49 	vmov.f32	s0, s18
 8019f54:	eef0 0a69 	vmov.f32	s1, s19
 8019f58:	f000 f814 	bl	8019f84 <__fpclassifyd>
 8019f5c:	b150      	cbz	r0, 8019f74 <fmax+0x40>
 8019f5e:	ec53 2b19 	vmov	r2, r3, d9
 8019f62:	ec51 0b18 	vmov	r0, r1, d8
 8019f66:	f7e6 fdc9 	bl	8000afc <__aeabi_dcmpgt>
 8019f6a:	b918      	cbnz	r0, 8019f74 <fmax+0x40>
 8019f6c:	eeb0 8a49 	vmov.f32	s16, s18
 8019f70:	eef0 8a69 	vmov.f32	s17, s19
 8019f74:	eeb0 0a48 	vmov.f32	s0, s16
 8019f78:	eef0 0a68 	vmov.f32	s1, s17
 8019f7c:	ecbd 8b04 	vpop	{d8-d9}
 8019f80:	bd08      	pop	{r3, pc}
	...

08019f84 <__fpclassifyd>:
 8019f84:	ec51 0b10 	vmov	r0, r1, d0
 8019f88:	b510      	push	{r4, lr}
 8019f8a:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
 8019f8e:	460b      	mov	r3, r1
 8019f90:	d019      	beq.n	8019fc6 <__fpclassifyd+0x42>
 8019f92:	f5a1 1280 	sub.w	r2, r1, #1048576	; 0x100000
 8019f96:	490e      	ldr	r1, [pc, #56]	; (8019fd0 <__fpclassifyd+0x4c>)
 8019f98:	428a      	cmp	r2, r1
 8019f9a:	d90e      	bls.n	8019fba <__fpclassifyd+0x36>
 8019f9c:	f103 42ff 	add.w	r2, r3, #2139095040	; 0x7f800000
 8019fa0:	f502 02e0 	add.w	r2, r2, #7340032	; 0x700000
 8019fa4:	428a      	cmp	r2, r1
 8019fa6:	d908      	bls.n	8019fba <__fpclassifyd+0x36>
 8019fa8:	4a0a      	ldr	r2, [pc, #40]	; (8019fd4 <__fpclassifyd+0x50>)
 8019faa:	4213      	tst	r3, r2
 8019fac:	d007      	beq.n	8019fbe <__fpclassifyd+0x3a>
 8019fae:	4294      	cmp	r4, r2
 8019fb0:	d107      	bne.n	8019fc2 <__fpclassifyd+0x3e>
 8019fb2:	fab0 f080 	clz	r0, r0
 8019fb6:	0940      	lsrs	r0, r0, #5
 8019fb8:	bd10      	pop	{r4, pc}
 8019fba:	2004      	movs	r0, #4
 8019fbc:	e7fc      	b.n	8019fb8 <__fpclassifyd+0x34>
 8019fbe:	2003      	movs	r0, #3
 8019fc0:	e7fa      	b.n	8019fb8 <__fpclassifyd+0x34>
 8019fc2:	2000      	movs	r0, #0
 8019fc4:	e7f8      	b.n	8019fb8 <__fpclassifyd+0x34>
 8019fc6:	2800      	cmp	r0, #0
 8019fc8:	d1ee      	bne.n	8019fa8 <__fpclassifyd+0x24>
 8019fca:	2002      	movs	r0, #2
 8019fcc:	e7f4      	b.n	8019fb8 <__fpclassifyd+0x34>
 8019fce:	bf00      	nop
 8019fd0:	7fdfffff 	.word	0x7fdfffff
 8019fd4:	7ff00000 	.word	0x7ff00000

08019fd8 <exp>:
 8019fd8:	b538      	push	{r3, r4, r5, lr}
 8019fda:	ed2d 8b02 	vpush	{d8}
 8019fde:	ec55 4b10 	vmov	r4, r5, d0
 8019fe2:	f000 f8c5 	bl	801a170 <__ieee754_exp>
 8019fe6:	4b22      	ldr	r3, [pc, #136]	; (801a070 <exp+0x98>)
 8019fe8:	eeb0 8a40 	vmov.f32	s16, s0
 8019fec:	eef0 8a60 	vmov.f32	s17, s1
 8019ff0:	f993 3000 	ldrsb.w	r3, [r3]
 8019ff4:	3301      	adds	r3, #1
 8019ff6:	d012      	beq.n	801a01e <exp+0x46>
 8019ff8:	ec45 4b10 	vmov	d0, r4, r5
 8019ffc:	f000 fca2 	bl	801a944 <finite>
 801a000:	b168      	cbz	r0, 801a01e <exp+0x46>
 801a002:	a313      	add	r3, pc, #76	; (adr r3, 801a050 <exp+0x78>)
 801a004:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a008:	4620      	mov	r0, r4
 801a00a:	4629      	mov	r1, r5
 801a00c:	f7e6 fd76 	bl	8000afc <__aeabi_dcmpgt>
 801a010:	b160      	cbz	r0, 801a02c <exp+0x54>
 801a012:	f7ff fe79 	bl	8019d08 <__errno>
 801a016:	ed9f 8b10 	vldr	d8, [pc, #64]	; 801a058 <exp+0x80>
 801a01a:	2322      	movs	r3, #34	; 0x22
 801a01c:	6003      	str	r3, [r0, #0]
 801a01e:	eeb0 0a48 	vmov.f32	s0, s16
 801a022:	eef0 0a68 	vmov.f32	s1, s17
 801a026:	ecbd 8b02 	vpop	{d8}
 801a02a:	bd38      	pop	{r3, r4, r5, pc}
 801a02c:	a30c      	add	r3, pc, #48	; (adr r3, 801a060 <exp+0x88>)
 801a02e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a032:	4620      	mov	r0, r4
 801a034:	4629      	mov	r1, r5
 801a036:	f7e6 fd43 	bl	8000ac0 <__aeabi_dcmplt>
 801a03a:	2800      	cmp	r0, #0
 801a03c:	d0ef      	beq.n	801a01e <exp+0x46>
 801a03e:	f7ff fe63 	bl	8019d08 <__errno>
 801a042:	2322      	movs	r3, #34	; 0x22
 801a044:	ed9f 8b08 	vldr	d8, [pc, #32]	; 801a068 <exp+0x90>
 801a048:	6003      	str	r3, [r0, #0]
 801a04a:	e7e8      	b.n	801a01e <exp+0x46>
 801a04c:	f3af 8000 	nop.w
 801a050:	fefa39ef 	.word	0xfefa39ef
 801a054:	40862e42 	.word	0x40862e42
 801a058:	00000000 	.word	0x00000000
 801a05c:	7ff00000 	.word	0x7ff00000
 801a060:	d52d3051 	.word	0xd52d3051
 801a064:	c0874910 	.word	0xc0874910
	...
 801a070:	20001428 	.word	0x20001428
 801a074:	00000000 	.word	0x00000000

0801a078 <log>:
 801a078:	b538      	push	{r3, r4, r5, lr}
 801a07a:	ed2d 8b02 	vpush	{d8}
 801a07e:	ec55 4b10 	vmov	r4, r5, d0
 801a082:	f000 f9f1 	bl	801a468 <__ieee754_log>
 801a086:	4b1e      	ldr	r3, [pc, #120]	; (801a100 <log+0x88>)
 801a088:	eeb0 8a40 	vmov.f32	s16, s0
 801a08c:	eef0 8a60 	vmov.f32	s17, s1
 801a090:	f993 3000 	ldrsb.w	r3, [r3]
 801a094:	3301      	adds	r3, #1
 801a096:	d01a      	beq.n	801a0ce <log+0x56>
 801a098:	4622      	mov	r2, r4
 801a09a:	462b      	mov	r3, r5
 801a09c:	4620      	mov	r0, r4
 801a09e:	4629      	mov	r1, r5
 801a0a0:	f7e6 fd36 	bl	8000b10 <__aeabi_dcmpun>
 801a0a4:	b998      	cbnz	r0, 801a0ce <log+0x56>
 801a0a6:	2200      	movs	r2, #0
 801a0a8:	2300      	movs	r3, #0
 801a0aa:	4620      	mov	r0, r4
 801a0ac:	4629      	mov	r1, r5
 801a0ae:	f7e6 fd25 	bl	8000afc <__aeabi_dcmpgt>
 801a0b2:	b960      	cbnz	r0, 801a0ce <log+0x56>
 801a0b4:	2200      	movs	r2, #0
 801a0b6:	2300      	movs	r3, #0
 801a0b8:	4620      	mov	r0, r4
 801a0ba:	4629      	mov	r1, r5
 801a0bc:	f7e6 fcf6 	bl	8000aac <__aeabi_dcmpeq>
 801a0c0:	b160      	cbz	r0, 801a0dc <log+0x64>
 801a0c2:	f7ff fe21 	bl	8019d08 <__errno>
 801a0c6:	ed9f 8b0c 	vldr	d8, [pc, #48]	; 801a0f8 <log+0x80>
 801a0ca:	2322      	movs	r3, #34	; 0x22
 801a0cc:	6003      	str	r3, [r0, #0]
 801a0ce:	eeb0 0a48 	vmov.f32	s0, s16
 801a0d2:	eef0 0a68 	vmov.f32	s1, s17
 801a0d6:	ecbd 8b02 	vpop	{d8}
 801a0da:	bd38      	pop	{r3, r4, r5, pc}
 801a0dc:	f7ff fe14 	bl	8019d08 <__errno>
 801a0e0:	ecbd 8b02 	vpop	{d8}
 801a0e4:	2321      	movs	r3, #33	; 0x21
 801a0e6:	6003      	str	r3, [r0, #0]
 801a0e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a0ec:	4805      	ldr	r0, [pc, #20]	; (801a104 <log+0x8c>)
 801a0ee:	f000 bc37 	b.w	801a960 <nan>
 801a0f2:	bf00      	nop
 801a0f4:	f3af 8000 	nop.w
 801a0f8:	00000000 	.word	0x00000000
 801a0fc:	fff00000 	.word	0xfff00000
 801a100:	20001428 	.word	0x20001428
 801a104:	0801b1a4 	.word	0x0801b1a4

0801a108 <sqrt>:
 801a108:	b538      	push	{r3, r4, r5, lr}
 801a10a:	ed2d 8b02 	vpush	{d8}
 801a10e:	ec55 4b10 	vmov	r4, r5, d0
 801a112:	f000 fb63 	bl	801a7dc <__ieee754_sqrt>
 801a116:	4b15      	ldr	r3, [pc, #84]	; (801a16c <sqrt+0x64>)
 801a118:	eeb0 8a40 	vmov.f32	s16, s0
 801a11c:	eef0 8a60 	vmov.f32	s17, s1
 801a120:	f993 3000 	ldrsb.w	r3, [r3]
 801a124:	3301      	adds	r3, #1
 801a126:	d019      	beq.n	801a15c <sqrt+0x54>
 801a128:	4622      	mov	r2, r4
 801a12a:	462b      	mov	r3, r5
 801a12c:	4620      	mov	r0, r4
 801a12e:	4629      	mov	r1, r5
 801a130:	f7e6 fcee 	bl	8000b10 <__aeabi_dcmpun>
 801a134:	b990      	cbnz	r0, 801a15c <sqrt+0x54>
 801a136:	2200      	movs	r2, #0
 801a138:	2300      	movs	r3, #0
 801a13a:	4620      	mov	r0, r4
 801a13c:	4629      	mov	r1, r5
 801a13e:	f7e6 fcbf 	bl	8000ac0 <__aeabi_dcmplt>
 801a142:	b158      	cbz	r0, 801a15c <sqrt+0x54>
 801a144:	f7ff fde0 	bl	8019d08 <__errno>
 801a148:	2321      	movs	r3, #33	; 0x21
 801a14a:	6003      	str	r3, [r0, #0]
 801a14c:	2200      	movs	r2, #0
 801a14e:	2300      	movs	r3, #0
 801a150:	4610      	mov	r0, r2
 801a152:	4619      	mov	r1, r3
 801a154:	f7e6 fb6c 	bl	8000830 <__aeabi_ddiv>
 801a158:	ec41 0b18 	vmov	d8, r0, r1
 801a15c:	eeb0 0a48 	vmov.f32	s0, s16
 801a160:	eef0 0a68 	vmov.f32	s1, s17
 801a164:	ecbd 8b02 	vpop	{d8}
 801a168:	bd38      	pop	{r3, r4, r5, pc}
 801a16a:	bf00      	nop
 801a16c:	20001428 	.word	0x20001428

0801a170 <__ieee754_exp>:
 801a170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a174:	ec55 4b10 	vmov	r4, r5, d0
 801a178:	49b1      	ldr	r1, [pc, #708]	; (801a440 <__ieee754_exp+0x2d0>)
 801a17a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801a17e:	428b      	cmp	r3, r1
 801a180:	ed2d 8b04 	vpush	{d8-d9}
 801a184:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 801a188:	d937      	bls.n	801a1fa <__ieee754_exp+0x8a>
 801a18a:	49ae      	ldr	r1, [pc, #696]	; (801a444 <__ieee754_exp+0x2d4>)
 801a18c:	428b      	cmp	r3, r1
 801a18e:	d916      	bls.n	801a1be <__ieee754_exp+0x4e>
 801a190:	ee10 3a10 	vmov	r3, s0
 801a194:	f3c5 0213 	ubfx	r2, r5, #0, #20
 801a198:	4313      	orrs	r3, r2
 801a19a:	d009      	beq.n	801a1b0 <__ieee754_exp+0x40>
 801a19c:	ee10 2a10 	vmov	r2, s0
 801a1a0:	462b      	mov	r3, r5
 801a1a2:	4620      	mov	r0, r4
 801a1a4:	4629      	mov	r1, r5
 801a1a6:	f7e6 f863 	bl	8000270 <__adddf3>
 801a1aa:	4604      	mov	r4, r0
 801a1ac:	460d      	mov	r5, r1
 801a1ae:	e000      	b.n	801a1b2 <__ieee754_exp+0x42>
 801a1b0:	bb06      	cbnz	r6, 801a1f4 <__ieee754_exp+0x84>
 801a1b2:	ecbd 8b04 	vpop	{d8-d9}
 801a1b6:	ec45 4b10 	vmov	d0, r4, r5
 801a1ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a1be:	a38a      	add	r3, pc, #552	; (adr r3, 801a3e8 <__ieee754_exp+0x278>)
 801a1c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a1c4:	ee10 0a10 	vmov	r0, s0
 801a1c8:	4629      	mov	r1, r5
 801a1ca:	f7e6 fc97 	bl	8000afc <__aeabi_dcmpgt>
 801a1ce:	b138      	cbz	r0, 801a1e0 <__ieee754_exp+0x70>
 801a1d0:	a387      	add	r3, pc, #540	; (adr r3, 801a3f0 <__ieee754_exp+0x280>)
 801a1d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a1d6:	4610      	mov	r0, r2
 801a1d8:	4619      	mov	r1, r3
 801a1da:	f7e6 f9ff 	bl	80005dc <__aeabi_dmul>
 801a1de:	e7e4      	b.n	801a1aa <__ieee754_exp+0x3a>
 801a1e0:	a385      	add	r3, pc, #532	; (adr r3, 801a3f8 <__ieee754_exp+0x288>)
 801a1e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a1e6:	4620      	mov	r0, r4
 801a1e8:	4629      	mov	r1, r5
 801a1ea:	f7e6 fc69 	bl	8000ac0 <__aeabi_dcmplt>
 801a1ee:	2800      	cmp	r0, #0
 801a1f0:	f000 8087 	beq.w	801a302 <__ieee754_exp+0x192>
 801a1f4:	2400      	movs	r4, #0
 801a1f6:	2500      	movs	r5, #0
 801a1f8:	e7db      	b.n	801a1b2 <__ieee754_exp+0x42>
 801a1fa:	4a93      	ldr	r2, [pc, #588]	; (801a448 <__ieee754_exp+0x2d8>)
 801a1fc:	4293      	cmp	r3, r2
 801a1fe:	f240 80ac 	bls.w	801a35a <__ieee754_exp+0x1ea>
 801a202:	4a92      	ldr	r2, [pc, #584]	; (801a44c <__ieee754_exp+0x2dc>)
 801a204:	4293      	cmp	r3, r2
 801a206:	d87c      	bhi.n	801a302 <__ieee754_exp+0x192>
 801a208:	4b91      	ldr	r3, [pc, #580]	; (801a450 <__ieee754_exp+0x2e0>)
 801a20a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801a20e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a212:	ee10 0a10 	vmov	r0, s0
 801a216:	4629      	mov	r1, r5
 801a218:	f7e6 f828 	bl	800026c <__aeabi_dsub>
 801a21c:	4b8d      	ldr	r3, [pc, #564]	; (801a454 <__ieee754_exp+0x2e4>)
 801a21e:	00f7      	lsls	r7, r6, #3
 801a220:	443b      	add	r3, r7
 801a222:	ed93 7b00 	vldr	d7, [r3]
 801a226:	f1c6 0a01 	rsb	sl, r6, #1
 801a22a:	4680      	mov	r8, r0
 801a22c:	4689      	mov	r9, r1
 801a22e:	ebaa 0a06 	sub.w	sl, sl, r6
 801a232:	eeb0 8a47 	vmov.f32	s16, s14
 801a236:	eef0 8a67 	vmov.f32	s17, s15
 801a23a:	ec53 2b18 	vmov	r2, r3, d8
 801a23e:	4640      	mov	r0, r8
 801a240:	4649      	mov	r1, r9
 801a242:	f7e6 f813 	bl	800026c <__aeabi_dsub>
 801a246:	4604      	mov	r4, r0
 801a248:	460d      	mov	r5, r1
 801a24a:	4622      	mov	r2, r4
 801a24c:	462b      	mov	r3, r5
 801a24e:	4620      	mov	r0, r4
 801a250:	4629      	mov	r1, r5
 801a252:	f7e6 f9c3 	bl	80005dc <__aeabi_dmul>
 801a256:	a36a      	add	r3, pc, #424	; (adr r3, 801a400 <__ieee754_exp+0x290>)
 801a258:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a25c:	4606      	mov	r6, r0
 801a25e:	460f      	mov	r7, r1
 801a260:	f7e6 f9bc 	bl	80005dc <__aeabi_dmul>
 801a264:	a368      	add	r3, pc, #416	; (adr r3, 801a408 <__ieee754_exp+0x298>)
 801a266:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a26a:	f7e5 ffff 	bl	800026c <__aeabi_dsub>
 801a26e:	4632      	mov	r2, r6
 801a270:	463b      	mov	r3, r7
 801a272:	f7e6 f9b3 	bl	80005dc <__aeabi_dmul>
 801a276:	a366      	add	r3, pc, #408	; (adr r3, 801a410 <__ieee754_exp+0x2a0>)
 801a278:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a27c:	f7e5 fff8 	bl	8000270 <__adddf3>
 801a280:	4632      	mov	r2, r6
 801a282:	463b      	mov	r3, r7
 801a284:	f7e6 f9aa 	bl	80005dc <__aeabi_dmul>
 801a288:	a363      	add	r3, pc, #396	; (adr r3, 801a418 <__ieee754_exp+0x2a8>)
 801a28a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a28e:	f7e5 ffed 	bl	800026c <__aeabi_dsub>
 801a292:	4632      	mov	r2, r6
 801a294:	463b      	mov	r3, r7
 801a296:	f7e6 f9a1 	bl	80005dc <__aeabi_dmul>
 801a29a:	a361      	add	r3, pc, #388	; (adr r3, 801a420 <__ieee754_exp+0x2b0>)
 801a29c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a2a0:	f7e5 ffe6 	bl	8000270 <__adddf3>
 801a2a4:	4632      	mov	r2, r6
 801a2a6:	463b      	mov	r3, r7
 801a2a8:	f7e6 f998 	bl	80005dc <__aeabi_dmul>
 801a2ac:	4602      	mov	r2, r0
 801a2ae:	460b      	mov	r3, r1
 801a2b0:	4620      	mov	r0, r4
 801a2b2:	4629      	mov	r1, r5
 801a2b4:	f7e5 ffda 	bl	800026c <__aeabi_dsub>
 801a2b8:	4602      	mov	r2, r0
 801a2ba:	460b      	mov	r3, r1
 801a2bc:	4606      	mov	r6, r0
 801a2be:	460f      	mov	r7, r1
 801a2c0:	4620      	mov	r0, r4
 801a2c2:	4629      	mov	r1, r5
 801a2c4:	f7e6 f98a 	bl	80005dc <__aeabi_dmul>
 801a2c8:	ec41 0b19 	vmov	d9, r0, r1
 801a2cc:	f1ba 0f00 	cmp.w	sl, #0
 801a2d0:	d15d      	bne.n	801a38e <__ieee754_exp+0x21e>
 801a2d2:	2200      	movs	r2, #0
 801a2d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801a2d8:	4630      	mov	r0, r6
 801a2da:	4639      	mov	r1, r7
 801a2dc:	f7e5 ffc6 	bl	800026c <__aeabi_dsub>
 801a2e0:	4602      	mov	r2, r0
 801a2e2:	460b      	mov	r3, r1
 801a2e4:	ec51 0b19 	vmov	r0, r1, d9
 801a2e8:	f7e6 faa2 	bl	8000830 <__aeabi_ddiv>
 801a2ec:	4622      	mov	r2, r4
 801a2ee:	462b      	mov	r3, r5
 801a2f0:	f7e5 ffbc 	bl	800026c <__aeabi_dsub>
 801a2f4:	4602      	mov	r2, r0
 801a2f6:	460b      	mov	r3, r1
 801a2f8:	2000      	movs	r0, #0
 801a2fa:	4957      	ldr	r1, [pc, #348]	; (801a458 <__ieee754_exp+0x2e8>)
 801a2fc:	f7e5 ffb6 	bl	800026c <__aeabi_dsub>
 801a300:	e753      	b.n	801a1aa <__ieee754_exp+0x3a>
 801a302:	4856      	ldr	r0, [pc, #344]	; (801a45c <__ieee754_exp+0x2ec>)
 801a304:	a348      	add	r3, pc, #288	; (adr r3, 801a428 <__ieee754_exp+0x2b8>)
 801a306:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a30a:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 801a30e:	4629      	mov	r1, r5
 801a310:	4620      	mov	r0, r4
 801a312:	f7e6 f963 	bl	80005dc <__aeabi_dmul>
 801a316:	e9d6 2300 	ldrd	r2, r3, [r6]
 801a31a:	f7e5 ffa9 	bl	8000270 <__adddf3>
 801a31e:	f7e6 fc0d 	bl	8000b3c <__aeabi_d2iz>
 801a322:	4682      	mov	sl, r0
 801a324:	f7e6 f8f0 	bl	8000508 <__aeabi_i2d>
 801a328:	a341      	add	r3, pc, #260	; (adr r3, 801a430 <__ieee754_exp+0x2c0>)
 801a32a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a32e:	4606      	mov	r6, r0
 801a330:	460f      	mov	r7, r1
 801a332:	f7e6 f953 	bl	80005dc <__aeabi_dmul>
 801a336:	4602      	mov	r2, r0
 801a338:	460b      	mov	r3, r1
 801a33a:	4620      	mov	r0, r4
 801a33c:	4629      	mov	r1, r5
 801a33e:	f7e5 ff95 	bl	800026c <__aeabi_dsub>
 801a342:	a33d      	add	r3, pc, #244	; (adr r3, 801a438 <__ieee754_exp+0x2c8>)
 801a344:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a348:	4680      	mov	r8, r0
 801a34a:	4689      	mov	r9, r1
 801a34c:	4630      	mov	r0, r6
 801a34e:	4639      	mov	r1, r7
 801a350:	f7e6 f944 	bl	80005dc <__aeabi_dmul>
 801a354:	ec41 0b18 	vmov	d8, r0, r1
 801a358:	e76f      	b.n	801a23a <__ieee754_exp+0xca>
 801a35a:	4a41      	ldr	r2, [pc, #260]	; (801a460 <__ieee754_exp+0x2f0>)
 801a35c:	4293      	cmp	r3, r2
 801a35e:	d811      	bhi.n	801a384 <__ieee754_exp+0x214>
 801a360:	a323      	add	r3, pc, #140	; (adr r3, 801a3f0 <__ieee754_exp+0x280>)
 801a362:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a366:	ee10 0a10 	vmov	r0, s0
 801a36a:	4629      	mov	r1, r5
 801a36c:	f7e5 ff80 	bl	8000270 <__adddf3>
 801a370:	4b39      	ldr	r3, [pc, #228]	; (801a458 <__ieee754_exp+0x2e8>)
 801a372:	2200      	movs	r2, #0
 801a374:	f7e6 fbc2 	bl	8000afc <__aeabi_dcmpgt>
 801a378:	b138      	cbz	r0, 801a38a <__ieee754_exp+0x21a>
 801a37a:	4b37      	ldr	r3, [pc, #220]	; (801a458 <__ieee754_exp+0x2e8>)
 801a37c:	2200      	movs	r2, #0
 801a37e:	4620      	mov	r0, r4
 801a380:	4629      	mov	r1, r5
 801a382:	e710      	b.n	801a1a6 <__ieee754_exp+0x36>
 801a384:	f04f 0a00 	mov.w	sl, #0
 801a388:	e75f      	b.n	801a24a <__ieee754_exp+0xda>
 801a38a:	4682      	mov	sl, r0
 801a38c:	e75d      	b.n	801a24a <__ieee754_exp+0xda>
 801a38e:	4632      	mov	r2, r6
 801a390:	463b      	mov	r3, r7
 801a392:	2000      	movs	r0, #0
 801a394:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 801a398:	f7e5 ff68 	bl	800026c <__aeabi_dsub>
 801a39c:	4602      	mov	r2, r0
 801a39e:	460b      	mov	r3, r1
 801a3a0:	ec51 0b19 	vmov	r0, r1, d9
 801a3a4:	f7e6 fa44 	bl	8000830 <__aeabi_ddiv>
 801a3a8:	4602      	mov	r2, r0
 801a3aa:	460b      	mov	r3, r1
 801a3ac:	ec51 0b18 	vmov	r0, r1, d8
 801a3b0:	f7e5 ff5c 	bl	800026c <__aeabi_dsub>
 801a3b4:	4642      	mov	r2, r8
 801a3b6:	464b      	mov	r3, r9
 801a3b8:	f7e5 ff58 	bl	800026c <__aeabi_dsub>
 801a3bc:	4602      	mov	r2, r0
 801a3be:	460b      	mov	r3, r1
 801a3c0:	2000      	movs	r0, #0
 801a3c2:	4925      	ldr	r1, [pc, #148]	; (801a458 <__ieee754_exp+0x2e8>)
 801a3c4:	f7e5 ff52 	bl	800026c <__aeabi_dsub>
 801a3c8:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 801a3cc:	4592      	cmp	sl, r2
 801a3ce:	db02      	blt.n	801a3d6 <__ieee754_exp+0x266>
 801a3d0:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 801a3d4:	e6e9      	b.n	801a1aa <__ieee754_exp+0x3a>
 801a3d6:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 801a3da:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 801a3de:	2200      	movs	r2, #0
 801a3e0:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 801a3e4:	e6f9      	b.n	801a1da <__ieee754_exp+0x6a>
 801a3e6:	bf00      	nop
 801a3e8:	fefa39ef 	.word	0xfefa39ef
 801a3ec:	40862e42 	.word	0x40862e42
 801a3f0:	8800759c 	.word	0x8800759c
 801a3f4:	7e37e43c 	.word	0x7e37e43c
 801a3f8:	d52d3051 	.word	0xd52d3051
 801a3fc:	c0874910 	.word	0xc0874910
 801a400:	72bea4d0 	.word	0x72bea4d0
 801a404:	3e663769 	.word	0x3e663769
 801a408:	c5d26bf1 	.word	0xc5d26bf1
 801a40c:	3ebbbd41 	.word	0x3ebbbd41
 801a410:	af25de2c 	.word	0xaf25de2c
 801a414:	3f11566a 	.word	0x3f11566a
 801a418:	16bebd93 	.word	0x16bebd93
 801a41c:	3f66c16c 	.word	0x3f66c16c
 801a420:	5555553e 	.word	0x5555553e
 801a424:	3fc55555 	.word	0x3fc55555
 801a428:	652b82fe 	.word	0x652b82fe
 801a42c:	3ff71547 	.word	0x3ff71547
 801a430:	fee00000 	.word	0xfee00000
 801a434:	3fe62e42 	.word	0x3fe62e42
 801a438:	35793c76 	.word	0x35793c76
 801a43c:	3dea39ef 	.word	0x3dea39ef
 801a440:	40862e41 	.word	0x40862e41
 801a444:	7fefffff 	.word	0x7fefffff
 801a448:	3fd62e42 	.word	0x3fd62e42
 801a44c:	3ff0a2b1 	.word	0x3ff0a2b1
 801a450:	0801b1b8 	.word	0x0801b1b8
 801a454:	0801b1c8 	.word	0x0801b1c8
 801a458:	3ff00000 	.word	0x3ff00000
 801a45c:	0801b1a8 	.word	0x0801b1a8
 801a460:	3e2fffff 	.word	0x3e2fffff
 801a464:	00000000 	.word	0x00000000

0801a468 <__ieee754_log>:
 801a468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a46c:	ec51 0b10 	vmov	r0, r1, d0
 801a470:	ed2d 8b04 	vpush	{d8-d9}
 801a474:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 801a478:	b083      	sub	sp, #12
 801a47a:	460d      	mov	r5, r1
 801a47c:	da29      	bge.n	801a4d2 <__ieee754_log+0x6a>
 801a47e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801a482:	4303      	orrs	r3, r0
 801a484:	ee10 2a10 	vmov	r2, s0
 801a488:	d10c      	bne.n	801a4a4 <__ieee754_log+0x3c>
 801a48a:	49cf      	ldr	r1, [pc, #828]	; (801a7c8 <__ieee754_log+0x360>)
 801a48c:	2200      	movs	r2, #0
 801a48e:	2300      	movs	r3, #0
 801a490:	2000      	movs	r0, #0
 801a492:	f7e6 f9cd 	bl	8000830 <__aeabi_ddiv>
 801a496:	ec41 0b10 	vmov	d0, r0, r1
 801a49a:	b003      	add	sp, #12
 801a49c:	ecbd 8b04 	vpop	{d8-d9}
 801a4a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a4a4:	2900      	cmp	r1, #0
 801a4a6:	da05      	bge.n	801a4b4 <__ieee754_log+0x4c>
 801a4a8:	460b      	mov	r3, r1
 801a4aa:	f7e5 fedf 	bl	800026c <__aeabi_dsub>
 801a4ae:	2200      	movs	r2, #0
 801a4b0:	2300      	movs	r3, #0
 801a4b2:	e7ee      	b.n	801a492 <__ieee754_log+0x2a>
 801a4b4:	4bc5      	ldr	r3, [pc, #788]	; (801a7cc <__ieee754_log+0x364>)
 801a4b6:	2200      	movs	r2, #0
 801a4b8:	f7e6 f890 	bl	80005dc <__aeabi_dmul>
 801a4bc:	f06f 0335 	mvn.w	r3, #53	; 0x35
 801a4c0:	460d      	mov	r5, r1
 801a4c2:	4ac3      	ldr	r2, [pc, #780]	; (801a7d0 <__ieee754_log+0x368>)
 801a4c4:	4295      	cmp	r5, r2
 801a4c6:	dd06      	ble.n	801a4d6 <__ieee754_log+0x6e>
 801a4c8:	4602      	mov	r2, r0
 801a4ca:	460b      	mov	r3, r1
 801a4cc:	f7e5 fed0 	bl	8000270 <__adddf3>
 801a4d0:	e7e1      	b.n	801a496 <__ieee754_log+0x2e>
 801a4d2:	2300      	movs	r3, #0
 801a4d4:	e7f5      	b.n	801a4c2 <__ieee754_log+0x5a>
 801a4d6:	152c      	asrs	r4, r5, #20
 801a4d8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 801a4dc:	f3c5 0513 	ubfx	r5, r5, #0, #20
 801a4e0:	441c      	add	r4, r3
 801a4e2:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 801a4e6:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 801a4ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801a4ee:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 801a4f2:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 801a4f6:	ea42 0105 	orr.w	r1, r2, r5
 801a4fa:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 801a4fe:	2200      	movs	r2, #0
 801a500:	4bb4      	ldr	r3, [pc, #720]	; (801a7d4 <__ieee754_log+0x36c>)
 801a502:	f7e5 feb3 	bl	800026c <__aeabi_dsub>
 801a506:	1cab      	adds	r3, r5, #2
 801a508:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801a50c:	2b02      	cmp	r3, #2
 801a50e:	4682      	mov	sl, r0
 801a510:	468b      	mov	fp, r1
 801a512:	f04f 0200 	mov.w	r2, #0
 801a516:	dc53      	bgt.n	801a5c0 <__ieee754_log+0x158>
 801a518:	2300      	movs	r3, #0
 801a51a:	f7e6 fac7 	bl	8000aac <__aeabi_dcmpeq>
 801a51e:	b1d0      	cbz	r0, 801a556 <__ieee754_log+0xee>
 801a520:	2c00      	cmp	r4, #0
 801a522:	f000 8122 	beq.w	801a76a <__ieee754_log+0x302>
 801a526:	4620      	mov	r0, r4
 801a528:	f7e5 ffee 	bl	8000508 <__aeabi_i2d>
 801a52c:	a390      	add	r3, pc, #576	; (adr r3, 801a770 <__ieee754_log+0x308>)
 801a52e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a532:	4606      	mov	r6, r0
 801a534:	460f      	mov	r7, r1
 801a536:	f7e6 f851 	bl	80005dc <__aeabi_dmul>
 801a53a:	a38f      	add	r3, pc, #572	; (adr r3, 801a778 <__ieee754_log+0x310>)
 801a53c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a540:	4604      	mov	r4, r0
 801a542:	460d      	mov	r5, r1
 801a544:	4630      	mov	r0, r6
 801a546:	4639      	mov	r1, r7
 801a548:	f7e6 f848 	bl	80005dc <__aeabi_dmul>
 801a54c:	4602      	mov	r2, r0
 801a54e:	460b      	mov	r3, r1
 801a550:	4620      	mov	r0, r4
 801a552:	4629      	mov	r1, r5
 801a554:	e7ba      	b.n	801a4cc <__ieee754_log+0x64>
 801a556:	a38a      	add	r3, pc, #552	; (adr r3, 801a780 <__ieee754_log+0x318>)
 801a558:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a55c:	4650      	mov	r0, sl
 801a55e:	4659      	mov	r1, fp
 801a560:	f7e6 f83c 	bl	80005dc <__aeabi_dmul>
 801a564:	4602      	mov	r2, r0
 801a566:	460b      	mov	r3, r1
 801a568:	2000      	movs	r0, #0
 801a56a:	499b      	ldr	r1, [pc, #620]	; (801a7d8 <__ieee754_log+0x370>)
 801a56c:	f7e5 fe7e 	bl	800026c <__aeabi_dsub>
 801a570:	4652      	mov	r2, sl
 801a572:	4606      	mov	r6, r0
 801a574:	460f      	mov	r7, r1
 801a576:	465b      	mov	r3, fp
 801a578:	4650      	mov	r0, sl
 801a57a:	4659      	mov	r1, fp
 801a57c:	f7e6 f82e 	bl	80005dc <__aeabi_dmul>
 801a580:	4602      	mov	r2, r0
 801a582:	460b      	mov	r3, r1
 801a584:	4630      	mov	r0, r6
 801a586:	4639      	mov	r1, r7
 801a588:	f7e6 f828 	bl	80005dc <__aeabi_dmul>
 801a58c:	4606      	mov	r6, r0
 801a58e:	460f      	mov	r7, r1
 801a590:	b914      	cbnz	r4, 801a598 <__ieee754_log+0x130>
 801a592:	4632      	mov	r2, r6
 801a594:	463b      	mov	r3, r7
 801a596:	e0a2      	b.n	801a6de <__ieee754_log+0x276>
 801a598:	4620      	mov	r0, r4
 801a59a:	f7e5 ffb5 	bl	8000508 <__aeabi_i2d>
 801a59e:	a374      	add	r3, pc, #464	; (adr r3, 801a770 <__ieee754_log+0x308>)
 801a5a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a5a4:	4680      	mov	r8, r0
 801a5a6:	4689      	mov	r9, r1
 801a5a8:	f7e6 f818 	bl	80005dc <__aeabi_dmul>
 801a5ac:	a372      	add	r3, pc, #456	; (adr r3, 801a778 <__ieee754_log+0x310>)
 801a5ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a5b2:	4604      	mov	r4, r0
 801a5b4:	460d      	mov	r5, r1
 801a5b6:	4640      	mov	r0, r8
 801a5b8:	4649      	mov	r1, r9
 801a5ba:	f7e6 f80f 	bl	80005dc <__aeabi_dmul>
 801a5be:	e0a7      	b.n	801a710 <__ieee754_log+0x2a8>
 801a5c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801a5c4:	f7e5 fe54 	bl	8000270 <__adddf3>
 801a5c8:	4602      	mov	r2, r0
 801a5ca:	460b      	mov	r3, r1
 801a5cc:	4650      	mov	r0, sl
 801a5ce:	4659      	mov	r1, fp
 801a5d0:	f7e6 f92e 	bl	8000830 <__aeabi_ddiv>
 801a5d4:	ec41 0b18 	vmov	d8, r0, r1
 801a5d8:	4620      	mov	r0, r4
 801a5da:	f7e5 ff95 	bl	8000508 <__aeabi_i2d>
 801a5de:	ec53 2b18 	vmov	r2, r3, d8
 801a5e2:	ec41 0b19 	vmov	d9, r0, r1
 801a5e6:	ec51 0b18 	vmov	r0, r1, d8
 801a5ea:	f7e5 fff7 	bl	80005dc <__aeabi_dmul>
 801a5ee:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 801a5f2:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 801a5f6:	9301      	str	r3, [sp, #4]
 801a5f8:	4602      	mov	r2, r0
 801a5fa:	460b      	mov	r3, r1
 801a5fc:	4680      	mov	r8, r0
 801a5fe:	4689      	mov	r9, r1
 801a600:	f7e5 ffec 	bl	80005dc <__aeabi_dmul>
 801a604:	a360      	add	r3, pc, #384	; (adr r3, 801a788 <__ieee754_log+0x320>)
 801a606:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a60a:	4606      	mov	r6, r0
 801a60c:	460f      	mov	r7, r1
 801a60e:	f7e5 ffe5 	bl	80005dc <__aeabi_dmul>
 801a612:	a35f      	add	r3, pc, #380	; (adr r3, 801a790 <__ieee754_log+0x328>)
 801a614:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a618:	f7e5 fe2a 	bl	8000270 <__adddf3>
 801a61c:	4632      	mov	r2, r6
 801a61e:	463b      	mov	r3, r7
 801a620:	f7e5 ffdc 	bl	80005dc <__aeabi_dmul>
 801a624:	a35c      	add	r3, pc, #368	; (adr r3, 801a798 <__ieee754_log+0x330>)
 801a626:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a62a:	f7e5 fe21 	bl	8000270 <__adddf3>
 801a62e:	4632      	mov	r2, r6
 801a630:	463b      	mov	r3, r7
 801a632:	f7e5 ffd3 	bl	80005dc <__aeabi_dmul>
 801a636:	a35a      	add	r3, pc, #360	; (adr r3, 801a7a0 <__ieee754_log+0x338>)
 801a638:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a63c:	f7e5 fe18 	bl	8000270 <__adddf3>
 801a640:	4642      	mov	r2, r8
 801a642:	464b      	mov	r3, r9
 801a644:	f7e5 ffca 	bl	80005dc <__aeabi_dmul>
 801a648:	a357      	add	r3, pc, #348	; (adr r3, 801a7a8 <__ieee754_log+0x340>)
 801a64a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a64e:	4680      	mov	r8, r0
 801a650:	4689      	mov	r9, r1
 801a652:	4630      	mov	r0, r6
 801a654:	4639      	mov	r1, r7
 801a656:	f7e5 ffc1 	bl	80005dc <__aeabi_dmul>
 801a65a:	a355      	add	r3, pc, #340	; (adr r3, 801a7b0 <__ieee754_log+0x348>)
 801a65c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a660:	f7e5 fe06 	bl	8000270 <__adddf3>
 801a664:	4632      	mov	r2, r6
 801a666:	463b      	mov	r3, r7
 801a668:	f7e5 ffb8 	bl	80005dc <__aeabi_dmul>
 801a66c:	a352      	add	r3, pc, #328	; (adr r3, 801a7b8 <__ieee754_log+0x350>)
 801a66e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a672:	f7e5 fdfd 	bl	8000270 <__adddf3>
 801a676:	4632      	mov	r2, r6
 801a678:	463b      	mov	r3, r7
 801a67a:	f7e5 ffaf 	bl	80005dc <__aeabi_dmul>
 801a67e:	460b      	mov	r3, r1
 801a680:	4602      	mov	r2, r0
 801a682:	4649      	mov	r1, r9
 801a684:	4640      	mov	r0, r8
 801a686:	f7e5 fdf3 	bl	8000270 <__adddf3>
 801a68a:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 801a68e:	9b01      	ldr	r3, [sp, #4]
 801a690:	3551      	adds	r5, #81	; 0x51
 801a692:	431d      	orrs	r5, r3
 801a694:	2d00      	cmp	r5, #0
 801a696:	4680      	mov	r8, r0
 801a698:	4689      	mov	r9, r1
 801a69a:	dd48      	ble.n	801a72e <__ieee754_log+0x2c6>
 801a69c:	4b4e      	ldr	r3, [pc, #312]	; (801a7d8 <__ieee754_log+0x370>)
 801a69e:	2200      	movs	r2, #0
 801a6a0:	4650      	mov	r0, sl
 801a6a2:	4659      	mov	r1, fp
 801a6a4:	f7e5 ff9a 	bl	80005dc <__aeabi_dmul>
 801a6a8:	4652      	mov	r2, sl
 801a6aa:	465b      	mov	r3, fp
 801a6ac:	f7e5 ff96 	bl	80005dc <__aeabi_dmul>
 801a6b0:	4602      	mov	r2, r0
 801a6b2:	460b      	mov	r3, r1
 801a6b4:	4606      	mov	r6, r0
 801a6b6:	460f      	mov	r7, r1
 801a6b8:	4640      	mov	r0, r8
 801a6ba:	4649      	mov	r1, r9
 801a6bc:	f7e5 fdd8 	bl	8000270 <__adddf3>
 801a6c0:	ec53 2b18 	vmov	r2, r3, d8
 801a6c4:	f7e5 ff8a 	bl	80005dc <__aeabi_dmul>
 801a6c8:	4680      	mov	r8, r0
 801a6ca:	4689      	mov	r9, r1
 801a6cc:	b964      	cbnz	r4, 801a6e8 <__ieee754_log+0x280>
 801a6ce:	4602      	mov	r2, r0
 801a6d0:	460b      	mov	r3, r1
 801a6d2:	4630      	mov	r0, r6
 801a6d4:	4639      	mov	r1, r7
 801a6d6:	f7e5 fdc9 	bl	800026c <__aeabi_dsub>
 801a6da:	4602      	mov	r2, r0
 801a6dc:	460b      	mov	r3, r1
 801a6de:	4650      	mov	r0, sl
 801a6e0:	4659      	mov	r1, fp
 801a6e2:	f7e5 fdc3 	bl	800026c <__aeabi_dsub>
 801a6e6:	e6d6      	b.n	801a496 <__ieee754_log+0x2e>
 801a6e8:	a321      	add	r3, pc, #132	; (adr r3, 801a770 <__ieee754_log+0x308>)
 801a6ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a6ee:	ec51 0b19 	vmov	r0, r1, d9
 801a6f2:	f7e5 ff73 	bl	80005dc <__aeabi_dmul>
 801a6f6:	a320      	add	r3, pc, #128	; (adr r3, 801a778 <__ieee754_log+0x310>)
 801a6f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a6fc:	4604      	mov	r4, r0
 801a6fe:	460d      	mov	r5, r1
 801a700:	ec51 0b19 	vmov	r0, r1, d9
 801a704:	f7e5 ff6a 	bl	80005dc <__aeabi_dmul>
 801a708:	4642      	mov	r2, r8
 801a70a:	464b      	mov	r3, r9
 801a70c:	f7e5 fdb0 	bl	8000270 <__adddf3>
 801a710:	4602      	mov	r2, r0
 801a712:	460b      	mov	r3, r1
 801a714:	4630      	mov	r0, r6
 801a716:	4639      	mov	r1, r7
 801a718:	f7e5 fda8 	bl	800026c <__aeabi_dsub>
 801a71c:	4652      	mov	r2, sl
 801a71e:	465b      	mov	r3, fp
 801a720:	f7e5 fda4 	bl	800026c <__aeabi_dsub>
 801a724:	4602      	mov	r2, r0
 801a726:	460b      	mov	r3, r1
 801a728:	4620      	mov	r0, r4
 801a72a:	4629      	mov	r1, r5
 801a72c:	e7d9      	b.n	801a6e2 <__ieee754_log+0x27a>
 801a72e:	4602      	mov	r2, r0
 801a730:	460b      	mov	r3, r1
 801a732:	4650      	mov	r0, sl
 801a734:	4659      	mov	r1, fp
 801a736:	f7e5 fd99 	bl	800026c <__aeabi_dsub>
 801a73a:	ec53 2b18 	vmov	r2, r3, d8
 801a73e:	f7e5 ff4d 	bl	80005dc <__aeabi_dmul>
 801a742:	4606      	mov	r6, r0
 801a744:	460f      	mov	r7, r1
 801a746:	2c00      	cmp	r4, #0
 801a748:	f43f af23 	beq.w	801a592 <__ieee754_log+0x12a>
 801a74c:	a308      	add	r3, pc, #32	; (adr r3, 801a770 <__ieee754_log+0x308>)
 801a74e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a752:	ec51 0b19 	vmov	r0, r1, d9
 801a756:	f7e5 ff41 	bl	80005dc <__aeabi_dmul>
 801a75a:	a307      	add	r3, pc, #28	; (adr r3, 801a778 <__ieee754_log+0x310>)
 801a75c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a760:	4604      	mov	r4, r0
 801a762:	460d      	mov	r5, r1
 801a764:	ec51 0b19 	vmov	r0, r1, d9
 801a768:	e727      	b.n	801a5ba <__ieee754_log+0x152>
 801a76a:	ed9f 0b15 	vldr	d0, [pc, #84]	; 801a7c0 <__ieee754_log+0x358>
 801a76e:	e694      	b.n	801a49a <__ieee754_log+0x32>
 801a770:	fee00000 	.word	0xfee00000
 801a774:	3fe62e42 	.word	0x3fe62e42
 801a778:	35793c76 	.word	0x35793c76
 801a77c:	3dea39ef 	.word	0x3dea39ef
 801a780:	55555555 	.word	0x55555555
 801a784:	3fd55555 	.word	0x3fd55555
 801a788:	df3e5244 	.word	0xdf3e5244
 801a78c:	3fc2f112 	.word	0x3fc2f112
 801a790:	96cb03de 	.word	0x96cb03de
 801a794:	3fc74664 	.word	0x3fc74664
 801a798:	94229359 	.word	0x94229359
 801a79c:	3fd24924 	.word	0x3fd24924
 801a7a0:	55555593 	.word	0x55555593
 801a7a4:	3fe55555 	.word	0x3fe55555
 801a7a8:	d078c69f 	.word	0xd078c69f
 801a7ac:	3fc39a09 	.word	0x3fc39a09
 801a7b0:	1d8e78af 	.word	0x1d8e78af
 801a7b4:	3fcc71c5 	.word	0x3fcc71c5
 801a7b8:	9997fa04 	.word	0x9997fa04
 801a7bc:	3fd99999 	.word	0x3fd99999
	...
 801a7c8:	c3500000 	.word	0xc3500000
 801a7cc:	43500000 	.word	0x43500000
 801a7d0:	7fefffff 	.word	0x7fefffff
 801a7d4:	3ff00000 	.word	0x3ff00000
 801a7d8:	3fe00000 	.word	0x3fe00000

0801a7dc <__ieee754_sqrt>:
 801a7dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a7e0:	ec55 4b10 	vmov	r4, r5, d0
 801a7e4:	4e56      	ldr	r6, [pc, #344]	; (801a940 <__ieee754_sqrt+0x164>)
 801a7e6:	43ae      	bics	r6, r5
 801a7e8:	ee10 0a10 	vmov	r0, s0
 801a7ec:	ee10 3a10 	vmov	r3, s0
 801a7f0:	4629      	mov	r1, r5
 801a7f2:	462a      	mov	r2, r5
 801a7f4:	d110      	bne.n	801a818 <__ieee754_sqrt+0x3c>
 801a7f6:	ee10 2a10 	vmov	r2, s0
 801a7fa:	462b      	mov	r3, r5
 801a7fc:	f7e5 feee 	bl	80005dc <__aeabi_dmul>
 801a800:	4602      	mov	r2, r0
 801a802:	460b      	mov	r3, r1
 801a804:	4620      	mov	r0, r4
 801a806:	4629      	mov	r1, r5
 801a808:	f7e5 fd32 	bl	8000270 <__adddf3>
 801a80c:	4604      	mov	r4, r0
 801a80e:	460d      	mov	r5, r1
 801a810:	ec45 4b10 	vmov	d0, r4, r5
 801a814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a818:	2d00      	cmp	r5, #0
 801a81a:	dc10      	bgt.n	801a83e <__ieee754_sqrt+0x62>
 801a81c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801a820:	4330      	orrs	r0, r6
 801a822:	d0f5      	beq.n	801a810 <__ieee754_sqrt+0x34>
 801a824:	b15d      	cbz	r5, 801a83e <__ieee754_sqrt+0x62>
 801a826:	ee10 2a10 	vmov	r2, s0
 801a82a:	462b      	mov	r3, r5
 801a82c:	ee10 0a10 	vmov	r0, s0
 801a830:	f7e5 fd1c 	bl	800026c <__aeabi_dsub>
 801a834:	4602      	mov	r2, r0
 801a836:	460b      	mov	r3, r1
 801a838:	f7e5 fffa 	bl	8000830 <__aeabi_ddiv>
 801a83c:	e7e6      	b.n	801a80c <__ieee754_sqrt+0x30>
 801a83e:	1509      	asrs	r1, r1, #20
 801a840:	d076      	beq.n	801a930 <__ieee754_sqrt+0x154>
 801a842:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801a846:	07ce      	lsls	r6, r1, #31
 801a848:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 801a84c:	bf5e      	ittt	pl
 801a84e:	0fda      	lsrpl	r2, r3, #31
 801a850:	005b      	lslpl	r3, r3, #1
 801a852:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 801a856:	0fda      	lsrs	r2, r3, #31
 801a858:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 801a85c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 801a860:	2000      	movs	r0, #0
 801a862:	106d      	asrs	r5, r5, #1
 801a864:	005b      	lsls	r3, r3, #1
 801a866:	f04f 0e16 	mov.w	lr, #22
 801a86a:	4684      	mov	ip, r0
 801a86c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801a870:	eb0c 0401 	add.w	r4, ip, r1
 801a874:	4294      	cmp	r4, r2
 801a876:	bfde      	ittt	le
 801a878:	1b12      	suble	r2, r2, r4
 801a87a:	eb04 0c01 	addle.w	ip, r4, r1
 801a87e:	1840      	addle	r0, r0, r1
 801a880:	0052      	lsls	r2, r2, #1
 801a882:	f1be 0e01 	subs.w	lr, lr, #1
 801a886:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801a88a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801a88e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801a892:	d1ed      	bne.n	801a870 <__ieee754_sqrt+0x94>
 801a894:	4671      	mov	r1, lr
 801a896:	2720      	movs	r7, #32
 801a898:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801a89c:	4562      	cmp	r2, ip
 801a89e:	eb04 060e 	add.w	r6, r4, lr
 801a8a2:	dc02      	bgt.n	801a8aa <__ieee754_sqrt+0xce>
 801a8a4:	d113      	bne.n	801a8ce <__ieee754_sqrt+0xf2>
 801a8a6:	429e      	cmp	r6, r3
 801a8a8:	d811      	bhi.n	801a8ce <__ieee754_sqrt+0xf2>
 801a8aa:	2e00      	cmp	r6, #0
 801a8ac:	eb06 0e04 	add.w	lr, r6, r4
 801a8b0:	da43      	bge.n	801a93a <__ieee754_sqrt+0x15e>
 801a8b2:	f1be 0f00 	cmp.w	lr, #0
 801a8b6:	db40      	blt.n	801a93a <__ieee754_sqrt+0x15e>
 801a8b8:	f10c 0801 	add.w	r8, ip, #1
 801a8bc:	eba2 020c 	sub.w	r2, r2, ip
 801a8c0:	429e      	cmp	r6, r3
 801a8c2:	bf88      	it	hi
 801a8c4:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801a8c8:	1b9b      	subs	r3, r3, r6
 801a8ca:	4421      	add	r1, r4
 801a8cc:	46c4      	mov	ip, r8
 801a8ce:	0052      	lsls	r2, r2, #1
 801a8d0:	3f01      	subs	r7, #1
 801a8d2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801a8d6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801a8da:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801a8de:	d1dd      	bne.n	801a89c <__ieee754_sqrt+0xc0>
 801a8e0:	4313      	orrs	r3, r2
 801a8e2:	d006      	beq.n	801a8f2 <__ieee754_sqrt+0x116>
 801a8e4:	1c4c      	adds	r4, r1, #1
 801a8e6:	bf13      	iteet	ne
 801a8e8:	3101      	addne	r1, #1
 801a8ea:	3001      	addeq	r0, #1
 801a8ec:	4639      	moveq	r1, r7
 801a8ee:	f021 0101 	bicne.w	r1, r1, #1
 801a8f2:	1043      	asrs	r3, r0, #1
 801a8f4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801a8f8:	0849      	lsrs	r1, r1, #1
 801a8fa:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801a8fe:	07c2      	lsls	r2, r0, #31
 801a900:	bf48      	it	mi
 801a902:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 801a906:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 801a90a:	460c      	mov	r4, r1
 801a90c:	463d      	mov	r5, r7
 801a90e:	e77f      	b.n	801a810 <__ieee754_sqrt+0x34>
 801a910:	0ada      	lsrs	r2, r3, #11
 801a912:	3815      	subs	r0, #21
 801a914:	055b      	lsls	r3, r3, #21
 801a916:	2a00      	cmp	r2, #0
 801a918:	d0fa      	beq.n	801a910 <__ieee754_sqrt+0x134>
 801a91a:	02d7      	lsls	r7, r2, #11
 801a91c:	d50a      	bpl.n	801a934 <__ieee754_sqrt+0x158>
 801a91e:	f1c1 0420 	rsb	r4, r1, #32
 801a922:	fa23 f404 	lsr.w	r4, r3, r4
 801a926:	1e4d      	subs	r5, r1, #1
 801a928:	408b      	lsls	r3, r1
 801a92a:	4322      	orrs	r2, r4
 801a92c:	1b41      	subs	r1, r0, r5
 801a92e:	e788      	b.n	801a842 <__ieee754_sqrt+0x66>
 801a930:	4608      	mov	r0, r1
 801a932:	e7f0      	b.n	801a916 <__ieee754_sqrt+0x13a>
 801a934:	0052      	lsls	r2, r2, #1
 801a936:	3101      	adds	r1, #1
 801a938:	e7ef      	b.n	801a91a <__ieee754_sqrt+0x13e>
 801a93a:	46e0      	mov	r8, ip
 801a93c:	e7be      	b.n	801a8bc <__ieee754_sqrt+0xe0>
 801a93e:	bf00      	nop
 801a940:	7ff00000 	.word	0x7ff00000

0801a944 <finite>:
 801a944:	b082      	sub	sp, #8
 801a946:	ed8d 0b00 	vstr	d0, [sp]
 801a94a:	9801      	ldr	r0, [sp, #4]
 801a94c:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801a950:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801a954:	0fc0      	lsrs	r0, r0, #31
 801a956:	b002      	add	sp, #8
 801a958:	4770      	bx	lr
 801a95a:	0000      	movs	r0, r0
 801a95c:	0000      	movs	r0, r0
	...

0801a960 <nan>:
 801a960:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801a968 <nan+0x8>
 801a964:	4770      	bx	lr
 801a966:	bf00      	nop
 801a968:	00000000 	.word	0x00000000
 801a96c:	7ff80000 	.word	0x7ff80000

0801a970 <_init>:
 801a970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a972:	bf00      	nop
 801a974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a976:	bc08      	pop	{r3}
 801a978:	469e      	mov	lr, r3
 801a97a:	4770      	bx	lr

0801a97c <_fini>:
 801a97c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a97e:	bf00      	nop
 801a980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a982:	bc08      	pop	{r3}
 801a984:	469e      	mov	lr, r3
 801a986:	4770      	bx	lr
