
AMS-CC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000175d8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f8  08017768  08017768  00027768  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017b60  08017b60  00031354  2**0
                  CONTENTS
  4 .ARM          00000008  08017b60  08017b60  00027b60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017b68  08017b68  00031354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017b68  08017b68  00027b68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017b6c  08017b6c  00027b6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001354  20000000  08017b70  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00031354  2**0
                  CONTENTS
 10 .bss          0001c7fc  20001358  20001358  00031358  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2001db54  2001db54  00031358  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00031354  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003ee98  00000000  00000000  00031384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00009305  00000000  00000000  0007021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002478  00000000  00000000  00079528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001f28  00000000  00000000  0007b9a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000299ce  00000000  00000000  0007d8c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000311c7  00000000  00000000  000a7296  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ed92a  00000000  00000000  000d845d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000c8  00000000  00000000  001c5d87  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000924c  00000000  00000000  001c5e50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20001358 	.word	0x20001358
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08017750 	.word	0x08017750

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000135c 	.word	0x2000135c
 80001cc:	08017750 	.word	0x08017750

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	2001daa0 	.word	0x2001daa0

08000264 <__aeabi_drsub>:
 8000264:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000268:	e002      	b.n	8000270 <__adddf3>
 800026a:	bf00      	nop

0800026c <__aeabi_dsub>:
 800026c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000270 <__adddf3>:
 8000270:	b530      	push	{r4, r5, lr}
 8000272:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000276:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800027a:	ea94 0f05 	teq	r4, r5
 800027e:	bf08      	it	eq
 8000280:	ea90 0f02 	teqeq	r0, r2
 8000284:	bf1f      	itttt	ne
 8000286:	ea54 0c00 	orrsne.w	ip, r4, r0
 800028a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800028e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000292:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000296:	f000 80e2 	beq.w	800045e <__adddf3+0x1ee>
 800029a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800029e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002a2:	bfb8      	it	lt
 80002a4:	426d      	neglt	r5, r5
 80002a6:	dd0c      	ble.n	80002c2 <__adddf3+0x52>
 80002a8:	442c      	add	r4, r5
 80002aa:	ea80 0202 	eor.w	r2, r0, r2
 80002ae:	ea81 0303 	eor.w	r3, r1, r3
 80002b2:	ea82 0000 	eor.w	r0, r2, r0
 80002b6:	ea83 0101 	eor.w	r1, r3, r1
 80002ba:	ea80 0202 	eor.w	r2, r0, r2
 80002be:	ea81 0303 	eor.w	r3, r1, r3
 80002c2:	2d36      	cmp	r5, #54	; 0x36
 80002c4:	bf88      	it	hi
 80002c6:	bd30      	pophi	{r4, r5, pc}
 80002c8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002d0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002d4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002d8:	d002      	beq.n	80002e0 <__adddf3+0x70>
 80002da:	4240      	negs	r0, r0
 80002dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002e0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002e8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002ec:	d002      	beq.n	80002f4 <__adddf3+0x84>
 80002ee:	4252      	negs	r2, r2
 80002f0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002f4:	ea94 0f05 	teq	r4, r5
 80002f8:	f000 80a7 	beq.w	800044a <__adddf3+0x1da>
 80002fc:	f1a4 0401 	sub.w	r4, r4, #1
 8000300:	f1d5 0e20 	rsbs	lr, r5, #32
 8000304:	db0d      	blt.n	8000322 <__adddf3+0xb2>
 8000306:	fa02 fc0e 	lsl.w	ip, r2, lr
 800030a:	fa22 f205 	lsr.w	r2, r2, r5
 800030e:	1880      	adds	r0, r0, r2
 8000310:	f141 0100 	adc.w	r1, r1, #0
 8000314:	fa03 f20e 	lsl.w	r2, r3, lr
 8000318:	1880      	adds	r0, r0, r2
 800031a:	fa43 f305 	asr.w	r3, r3, r5
 800031e:	4159      	adcs	r1, r3
 8000320:	e00e      	b.n	8000340 <__adddf3+0xd0>
 8000322:	f1a5 0520 	sub.w	r5, r5, #32
 8000326:	f10e 0e20 	add.w	lr, lr, #32
 800032a:	2a01      	cmp	r2, #1
 800032c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000330:	bf28      	it	cs
 8000332:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	18c0      	adds	r0, r0, r3
 800033c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000340:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000344:	d507      	bpl.n	8000356 <__adddf3+0xe6>
 8000346:	f04f 0e00 	mov.w	lr, #0
 800034a:	f1dc 0c00 	rsbs	ip, ip, #0
 800034e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000352:	eb6e 0101 	sbc.w	r1, lr, r1
 8000356:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800035a:	d31b      	bcc.n	8000394 <__adddf3+0x124>
 800035c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000360:	d30c      	bcc.n	800037c <__adddf3+0x10c>
 8000362:	0849      	lsrs	r1, r1, #1
 8000364:	ea5f 0030 	movs.w	r0, r0, rrx
 8000368:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800036c:	f104 0401 	add.w	r4, r4, #1
 8000370:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000374:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000378:	f080 809a 	bcs.w	80004b0 <__adddf3+0x240>
 800037c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000380:	bf08      	it	eq
 8000382:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000386:	f150 0000 	adcs.w	r0, r0, #0
 800038a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800038e:	ea41 0105 	orr.w	r1, r1, r5
 8000392:	bd30      	pop	{r4, r5, pc}
 8000394:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000398:	4140      	adcs	r0, r0
 800039a:	eb41 0101 	adc.w	r1, r1, r1
 800039e:	3c01      	subs	r4, #1
 80003a0:	bf28      	it	cs
 80003a2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003a6:	d2e9      	bcs.n	800037c <__adddf3+0x10c>
 80003a8:	f091 0f00 	teq	r1, #0
 80003ac:	bf04      	itt	eq
 80003ae:	4601      	moveq	r1, r0
 80003b0:	2000      	moveq	r0, #0
 80003b2:	fab1 f381 	clz	r3, r1
 80003b6:	bf08      	it	eq
 80003b8:	3320      	addeq	r3, #32
 80003ba:	f1a3 030b 	sub.w	r3, r3, #11
 80003be:	f1b3 0220 	subs.w	r2, r3, #32
 80003c2:	da0c      	bge.n	80003de <__adddf3+0x16e>
 80003c4:	320c      	adds	r2, #12
 80003c6:	dd08      	ble.n	80003da <__adddf3+0x16a>
 80003c8:	f102 0c14 	add.w	ip, r2, #20
 80003cc:	f1c2 020c 	rsb	r2, r2, #12
 80003d0:	fa01 f00c 	lsl.w	r0, r1, ip
 80003d4:	fa21 f102 	lsr.w	r1, r1, r2
 80003d8:	e00c      	b.n	80003f4 <__adddf3+0x184>
 80003da:	f102 0214 	add.w	r2, r2, #20
 80003de:	bfd8      	it	le
 80003e0:	f1c2 0c20 	rsble	ip, r2, #32
 80003e4:	fa01 f102 	lsl.w	r1, r1, r2
 80003e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003ec:	bfdc      	itt	le
 80003ee:	ea41 010c 	orrle.w	r1, r1, ip
 80003f2:	4090      	lslle	r0, r2
 80003f4:	1ae4      	subs	r4, r4, r3
 80003f6:	bfa2      	ittt	ge
 80003f8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003fc:	4329      	orrge	r1, r5
 80003fe:	bd30      	popge	{r4, r5, pc}
 8000400:	ea6f 0404 	mvn.w	r4, r4
 8000404:	3c1f      	subs	r4, #31
 8000406:	da1c      	bge.n	8000442 <__adddf3+0x1d2>
 8000408:	340c      	adds	r4, #12
 800040a:	dc0e      	bgt.n	800042a <__adddf3+0x1ba>
 800040c:	f104 0414 	add.w	r4, r4, #20
 8000410:	f1c4 0220 	rsb	r2, r4, #32
 8000414:	fa20 f004 	lsr.w	r0, r0, r4
 8000418:	fa01 f302 	lsl.w	r3, r1, r2
 800041c:	ea40 0003 	orr.w	r0, r0, r3
 8000420:	fa21 f304 	lsr.w	r3, r1, r4
 8000424:	ea45 0103 	orr.w	r1, r5, r3
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	f1c4 040c 	rsb	r4, r4, #12
 800042e:	f1c4 0220 	rsb	r2, r4, #32
 8000432:	fa20 f002 	lsr.w	r0, r0, r2
 8000436:	fa01 f304 	lsl.w	r3, r1, r4
 800043a:	ea40 0003 	orr.w	r0, r0, r3
 800043e:	4629      	mov	r1, r5
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	fa21 f004 	lsr.w	r0, r1, r4
 8000446:	4629      	mov	r1, r5
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	f094 0f00 	teq	r4, #0
 800044e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000452:	bf06      	itte	eq
 8000454:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000458:	3401      	addeq	r4, #1
 800045a:	3d01      	subne	r5, #1
 800045c:	e74e      	b.n	80002fc <__adddf3+0x8c>
 800045e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000462:	bf18      	it	ne
 8000464:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000468:	d029      	beq.n	80004be <__adddf3+0x24e>
 800046a:	ea94 0f05 	teq	r4, r5
 800046e:	bf08      	it	eq
 8000470:	ea90 0f02 	teqeq	r0, r2
 8000474:	d005      	beq.n	8000482 <__adddf3+0x212>
 8000476:	ea54 0c00 	orrs.w	ip, r4, r0
 800047a:	bf04      	itt	eq
 800047c:	4619      	moveq	r1, r3
 800047e:	4610      	moveq	r0, r2
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea91 0f03 	teq	r1, r3
 8000486:	bf1e      	ittt	ne
 8000488:	2100      	movne	r1, #0
 800048a:	2000      	movne	r0, #0
 800048c:	bd30      	popne	{r4, r5, pc}
 800048e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000492:	d105      	bne.n	80004a0 <__adddf3+0x230>
 8000494:	0040      	lsls	r0, r0, #1
 8000496:	4149      	adcs	r1, r1
 8000498:	bf28      	it	cs
 800049a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800049e:	bd30      	pop	{r4, r5, pc}
 80004a0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004a4:	bf3c      	itt	cc
 80004a6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004aa:	bd30      	popcc	{r4, r5, pc}
 80004ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004b0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004b8:	f04f 0000 	mov.w	r0, #0
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c2:	bf1a      	itte	ne
 80004c4:	4619      	movne	r1, r3
 80004c6:	4610      	movne	r0, r2
 80004c8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004cc:	bf1c      	itt	ne
 80004ce:	460b      	movne	r3, r1
 80004d0:	4602      	movne	r2, r0
 80004d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004d6:	bf06      	itte	eq
 80004d8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004dc:	ea91 0f03 	teqeq	r1, r3
 80004e0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	bf00      	nop

080004e8 <__aeabi_ui2d>:
 80004e8:	f090 0f00 	teq	r0, #0
 80004ec:	bf04      	itt	eq
 80004ee:	2100      	moveq	r1, #0
 80004f0:	4770      	bxeq	lr
 80004f2:	b530      	push	{r4, r5, lr}
 80004f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fc:	f04f 0500 	mov.w	r5, #0
 8000500:	f04f 0100 	mov.w	r1, #0
 8000504:	e750      	b.n	80003a8 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_i2d>:
 8000508:	f090 0f00 	teq	r0, #0
 800050c:	bf04      	itt	eq
 800050e:	2100      	moveq	r1, #0
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000518:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000520:	bf48      	it	mi
 8000522:	4240      	negmi	r0, r0
 8000524:	f04f 0100 	mov.w	r1, #0
 8000528:	e73e      	b.n	80003a8 <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_f2d>:
 800052c:	0042      	lsls	r2, r0, #1
 800052e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000532:	ea4f 0131 	mov.w	r1, r1, rrx
 8000536:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800053a:	bf1f      	itttt	ne
 800053c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000540:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000544:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000548:	4770      	bxne	lr
 800054a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800054e:	bf08      	it	eq
 8000550:	4770      	bxeq	lr
 8000552:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000556:	bf04      	itt	eq
 8000558:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000564:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000568:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800056c:	e71c      	b.n	80003a8 <__adddf3+0x138>
 800056e:	bf00      	nop

08000570 <__aeabi_ul2d>:
 8000570:	ea50 0201 	orrs.w	r2, r0, r1
 8000574:	bf08      	it	eq
 8000576:	4770      	bxeq	lr
 8000578:	b530      	push	{r4, r5, lr}
 800057a:	f04f 0500 	mov.w	r5, #0
 800057e:	e00a      	b.n	8000596 <__aeabi_l2d+0x16>

08000580 <__aeabi_l2d>:
 8000580:	ea50 0201 	orrs.w	r2, r0, r1
 8000584:	bf08      	it	eq
 8000586:	4770      	bxeq	lr
 8000588:	b530      	push	{r4, r5, lr}
 800058a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800058e:	d502      	bpl.n	8000596 <__aeabi_l2d+0x16>
 8000590:	4240      	negs	r0, r0
 8000592:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000596:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800059a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800059e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005a2:	f43f aed8 	beq.w	8000356 <__adddf3+0xe6>
 80005a6:	f04f 0203 	mov.w	r2, #3
 80005aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ae:	bf18      	it	ne
 80005b0:	3203      	addne	r2, #3
 80005b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005b6:	bf18      	it	ne
 80005b8:	3203      	addne	r2, #3
 80005ba:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005be:	f1c2 0320 	rsb	r3, r2, #32
 80005c2:	fa00 fc03 	lsl.w	ip, r0, r3
 80005c6:	fa20 f002 	lsr.w	r0, r0, r2
 80005ca:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ce:	ea40 000e 	orr.w	r0, r0, lr
 80005d2:	fa21 f102 	lsr.w	r1, r1, r2
 80005d6:	4414      	add	r4, r2
 80005d8:	e6bd      	b.n	8000356 <__adddf3+0xe6>
 80005da:	bf00      	nop

080005dc <__aeabi_dmul>:
 80005dc:	b570      	push	{r4, r5, r6, lr}
 80005de:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ea:	bf1d      	ittte	ne
 80005ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005f0:	ea94 0f0c 	teqne	r4, ip
 80005f4:	ea95 0f0c 	teqne	r5, ip
 80005f8:	f000 f8de 	bleq	80007b8 <__aeabi_dmul+0x1dc>
 80005fc:	442c      	add	r4, r5
 80005fe:	ea81 0603 	eor.w	r6, r1, r3
 8000602:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000606:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800060a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800060e:	bf18      	it	ne
 8000610:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800061c:	d038      	beq.n	8000690 <__aeabi_dmul+0xb4>
 800061e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000622:	f04f 0500 	mov.w	r5, #0
 8000626:	fbe1 e502 	umlal	lr, r5, r1, r2
 800062a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800062e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000632:	f04f 0600 	mov.w	r6, #0
 8000636:	fbe1 5603 	umlal	r5, r6, r1, r3
 800063a:	f09c 0f00 	teq	ip, #0
 800063e:	bf18      	it	ne
 8000640:	f04e 0e01 	orrne.w	lr, lr, #1
 8000644:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000648:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800064c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000650:	d204      	bcs.n	800065c <__aeabi_dmul+0x80>
 8000652:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000656:	416d      	adcs	r5, r5
 8000658:	eb46 0606 	adc.w	r6, r6, r6
 800065c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000660:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000664:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000668:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800066c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000670:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000674:	bf88      	it	hi
 8000676:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800067a:	d81e      	bhi.n	80006ba <__aeabi_dmul+0xde>
 800067c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000680:	bf08      	it	eq
 8000682:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000686:	f150 0000 	adcs.w	r0, r0, #0
 800068a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800068e:	bd70      	pop	{r4, r5, r6, pc}
 8000690:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000694:	ea46 0101 	orr.w	r1, r6, r1
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	ea81 0103 	eor.w	r1, r1, r3
 80006a0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006a4:	bfc2      	ittt	gt
 80006a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ae:	bd70      	popgt	{r4, r5, r6, pc}
 80006b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006b4:	f04f 0e00 	mov.w	lr, #0
 80006b8:	3c01      	subs	r4, #1
 80006ba:	f300 80ab 	bgt.w	8000814 <__aeabi_dmul+0x238>
 80006be:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006c2:	bfde      	ittt	le
 80006c4:	2000      	movle	r0, #0
 80006c6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ca:	bd70      	pople	{r4, r5, r6, pc}
 80006cc:	f1c4 0400 	rsb	r4, r4, #0
 80006d0:	3c20      	subs	r4, #32
 80006d2:	da35      	bge.n	8000740 <__aeabi_dmul+0x164>
 80006d4:	340c      	adds	r4, #12
 80006d6:	dc1b      	bgt.n	8000710 <__aeabi_dmul+0x134>
 80006d8:	f104 0414 	add.w	r4, r4, #20
 80006dc:	f1c4 0520 	rsb	r5, r4, #32
 80006e0:	fa00 f305 	lsl.w	r3, r0, r5
 80006e4:	fa20 f004 	lsr.w	r0, r0, r4
 80006e8:	fa01 f205 	lsl.w	r2, r1, r5
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	fa21 f604 	lsr.w	r6, r1, r4
 8000700:	eb42 0106 	adc.w	r1, r2, r6
 8000704:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000708:	bf08      	it	eq
 800070a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070e:	bd70      	pop	{r4, r5, r6, pc}
 8000710:	f1c4 040c 	rsb	r4, r4, #12
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f304 	lsl.w	r3, r0, r4
 800071c:	fa20 f005 	lsr.w	r0, r0, r5
 8000720:	fa01 f204 	lsl.w	r2, r1, r4
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000730:	f141 0100 	adc.w	r1, r1, #0
 8000734:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000738:	bf08      	it	eq
 800073a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073e:	bd70      	pop	{r4, r5, r6, pc}
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f205 	lsl.w	r2, r0, r5
 8000748:	ea4e 0e02 	orr.w	lr, lr, r2
 800074c:	fa20 f304 	lsr.w	r3, r0, r4
 8000750:	fa01 f205 	lsl.w	r2, r1, r5
 8000754:	ea43 0302 	orr.w	r3, r3, r2
 8000758:	fa21 f004 	lsr.w	r0, r1, r4
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	fa21 f204 	lsr.w	r2, r1, r4
 8000764:	ea20 0002 	bic.w	r0, r0, r2
 8000768:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800076c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000770:	bf08      	it	eq
 8000772:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000776:	bd70      	pop	{r4, r5, r6, pc}
 8000778:	f094 0f00 	teq	r4, #0
 800077c:	d10f      	bne.n	800079e <__aeabi_dmul+0x1c2>
 800077e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000782:	0040      	lsls	r0, r0, #1
 8000784:	eb41 0101 	adc.w	r1, r1, r1
 8000788:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800078c:	bf08      	it	eq
 800078e:	3c01      	subeq	r4, #1
 8000790:	d0f7      	beq.n	8000782 <__aeabi_dmul+0x1a6>
 8000792:	ea41 0106 	orr.w	r1, r1, r6
 8000796:	f095 0f00 	teq	r5, #0
 800079a:	bf18      	it	ne
 800079c:	4770      	bxne	lr
 800079e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007a2:	0052      	lsls	r2, r2, #1
 80007a4:	eb43 0303 	adc.w	r3, r3, r3
 80007a8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007ac:	bf08      	it	eq
 80007ae:	3d01      	subeq	r5, #1
 80007b0:	d0f7      	beq.n	80007a2 <__aeabi_dmul+0x1c6>
 80007b2:	ea43 0306 	orr.w	r3, r3, r6
 80007b6:	4770      	bx	lr
 80007b8:	ea94 0f0c 	teq	r4, ip
 80007bc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007c0:	bf18      	it	ne
 80007c2:	ea95 0f0c 	teqne	r5, ip
 80007c6:	d00c      	beq.n	80007e2 <__aeabi_dmul+0x206>
 80007c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007cc:	bf18      	it	ne
 80007ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007d2:	d1d1      	bne.n	8000778 <__aeabi_dmul+0x19c>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e6:	bf06      	itte	eq
 80007e8:	4610      	moveq	r0, r2
 80007ea:	4619      	moveq	r1, r3
 80007ec:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f0:	d019      	beq.n	8000826 <__aeabi_dmul+0x24a>
 80007f2:	ea94 0f0c 	teq	r4, ip
 80007f6:	d102      	bne.n	80007fe <__aeabi_dmul+0x222>
 80007f8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007fc:	d113      	bne.n	8000826 <__aeabi_dmul+0x24a>
 80007fe:	ea95 0f0c 	teq	r5, ip
 8000802:	d105      	bne.n	8000810 <__aeabi_dmul+0x234>
 8000804:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000808:	bf1c      	itt	ne
 800080a:	4610      	movne	r0, r2
 800080c:	4619      	movne	r1, r3
 800080e:	d10a      	bne.n	8000826 <__aeabi_dmul+0x24a>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800081c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000820:	f04f 0000 	mov.w	r0, #0
 8000824:	bd70      	pop	{r4, r5, r6, pc}
 8000826:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800082a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800082e:	bd70      	pop	{r4, r5, r6, pc}

08000830 <__aeabi_ddiv>:
 8000830:	b570      	push	{r4, r5, r6, lr}
 8000832:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000836:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800083a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800083e:	bf1d      	ittte	ne
 8000840:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000844:	ea94 0f0c 	teqne	r4, ip
 8000848:	ea95 0f0c 	teqne	r5, ip
 800084c:	f000 f8a7 	bleq	800099e <__aeabi_ddiv+0x16e>
 8000850:	eba4 0405 	sub.w	r4, r4, r5
 8000854:	ea81 0e03 	eor.w	lr, r1, r3
 8000858:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800085c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000860:	f000 8088 	beq.w	8000974 <__aeabi_ddiv+0x144>
 8000864:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000868:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800086c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000870:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000874:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000878:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800087c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000880:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000884:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000888:	429d      	cmp	r5, r3
 800088a:	bf08      	it	eq
 800088c:	4296      	cmpeq	r6, r2
 800088e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000892:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000896:	d202      	bcs.n	800089e <__aeabi_ddiv+0x6e>
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	1ab6      	subs	r6, r6, r2
 80008a0:	eb65 0503 	sbc.w	r5, r5, r3
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ae:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ba:	bf22      	ittt	cs
 80008bc:	1ab6      	subcs	r6, r6, r2
 80008be:	4675      	movcs	r5, lr
 80008c0:	ea40 000c 	orrcs.w	r0, r0, ip
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d2:	bf22      	ittt	cs
 80008d4:	1ab6      	subcs	r6, r6, r2
 80008d6:	4675      	movcs	r5, lr
 80008d8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008dc:	085b      	lsrs	r3, r3, #1
 80008de:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ea:	bf22      	ittt	cs
 80008ec:	1ab6      	subcs	r6, r6, r2
 80008ee:	4675      	movcs	r5, lr
 80008f0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000902:	bf22      	ittt	cs
 8000904:	1ab6      	subcs	r6, r6, r2
 8000906:	4675      	movcs	r5, lr
 8000908:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800090c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000910:	d018      	beq.n	8000944 <__aeabi_ddiv+0x114>
 8000912:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000916:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800091a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800091e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000922:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000926:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800092a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800092e:	d1c0      	bne.n	80008b2 <__aeabi_ddiv+0x82>
 8000930:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000934:	d10b      	bne.n	800094e <__aeabi_ddiv+0x11e>
 8000936:	ea41 0100 	orr.w	r1, r1, r0
 800093a:	f04f 0000 	mov.w	r0, #0
 800093e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000942:	e7b6      	b.n	80008b2 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	bf04      	itt	eq
 800094a:	4301      	orreq	r1, r0
 800094c:	2000      	moveq	r0, #0
 800094e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000952:	bf88      	it	hi
 8000954:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000958:	f63f aeaf 	bhi.w	80006ba <__aeabi_dmul+0xde>
 800095c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000960:	bf04      	itt	eq
 8000962:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000966:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800096a:	f150 0000 	adcs.w	r0, r0, #0
 800096e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000972:	bd70      	pop	{r4, r5, r6, pc}
 8000974:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000978:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800097c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000980:	bfc2      	ittt	gt
 8000982:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000986:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800098a:	bd70      	popgt	{r4, r5, r6, pc}
 800098c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000990:	f04f 0e00 	mov.w	lr, #0
 8000994:	3c01      	subs	r4, #1
 8000996:	e690      	b.n	80006ba <__aeabi_dmul+0xde>
 8000998:	ea45 0e06 	orr.w	lr, r5, r6
 800099c:	e68d      	b.n	80006ba <__aeabi_dmul+0xde>
 800099e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009a2:	ea94 0f0c 	teq	r4, ip
 80009a6:	bf08      	it	eq
 80009a8:	ea95 0f0c 	teqeq	r5, ip
 80009ac:	f43f af3b 	beq.w	8000826 <__aeabi_dmul+0x24a>
 80009b0:	ea94 0f0c 	teq	r4, ip
 80009b4:	d10a      	bne.n	80009cc <__aeabi_ddiv+0x19c>
 80009b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ba:	f47f af34 	bne.w	8000826 <__aeabi_dmul+0x24a>
 80009be:	ea95 0f0c 	teq	r5, ip
 80009c2:	f47f af25 	bne.w	8000810 <__aeabi_dmul+0x234>
 80009c6:	4610      	mov	r0, r2
 80009c8:	4619      	mov	r1, r3
 80009ca:	e72c      	b.n	8000826 <__aeabi_dmul+0x24a>
 80009cc:	ea95 0f0c 	teq	r5, ip
 80009d0:	d106      	bne.n	80009e0 <__aeabi_ddiv+0x1b0>
 80009d2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009d6:	f43f aefd 	beq.w	80007d4 <__aeabi_dmul+0x1f8>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e722      	b.n	8000826 <__aeabi_dmul+0x24a>
 80009e0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009e4:	bf18      	it	ne
 80009e6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ea:	f47f aec5 	bne.w	8000778 <__aeabi_dmul+0x19c>
 80009ee:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009f2:	f47f af0d 	bne.w	8000810 <__aeabi_dmul+0x234>
 80009f6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009fa:	f47f aeeb 	bne.w	80007d4 <__aeabi_dmul+0x1f8>
 80009fe:	e712      	b.n	8000826 <__aeabi_dmul+0x24a>

08000a00 <__gedf2>:
 8000a00:	f04f 3cff 	mov.w	ip, #4294967295
 8000a04:	e006      	b.n	8000a14 <__cmpdf2+0x4>
 8000a06:	bf00      	nop

08000a08 <__ledf2>:
 8000a08:	f04f 0c01 	mov.w	ip, #1
 8000a0c:	e002      	b.n	8000a14 <__cmpdf2+0x4>
 8000a0e:	bf00      	nop

08000a10 <__cmpdf2>:
 8000a10:	f04f 0c01 	mov.w	ip, #1
 8000a14:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a24:	bf18      	it	ne
 8000a26:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a2a:	d01b      	beq.n	8000a64 <__cmpdf2+0x54>
 8000a2c:	b001      	add	sp, #4
 8000a2e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a32:	bf0c      	ite	eq
 8000a34:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a38:	ea91 0f03 	teqne	r1, r3
 8000a3c:	bf02      	ittt	eq
 8000a3e:	ea90 0f02 	teqeq	r0, r2
 8000a42:	2000      	moveq	r0, #0
 8000a44:	4770      	bxeq	lr
 8000a46:	f110 0f00 	cmn.w	r0, #0
 8000a4a:	ea91 0f03 	teq	r1, r3
 8000a4e:	bf58      	it	pl
 8000a50:	4299      	cmppl	r1, r3
 8000a52:	bf08      	it	eq
 8000a54:	4290      	cmpeq	r0, r2
 8000a56:	bf2c      	ite	cs
 8000a58:	17d8      	asrcs	r0, r3, #31
 8000a5a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a5e:	f040 0001 	orr.w	r0, r0, #1
 8000a62:	4770      	bx	lr
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	d102      	bne.n	8000a74 <__cmpdf2+0x64>
 8000a6e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a72:	d107      	bne.n	8000a84 <__cmpdf2+0x74>
 8000a74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d1d6      	bne.n	8000a2c <__cmpdf2+0x1c>
 8000a7e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a82:	d0d3      	beq.n	8000a2c <__cmpdf2+0x1c>
 8000a84:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop

08000a8c <__aeabi_cdrcmple>:
 8000a8c:	4684      	mov	ip, r0
 8000a8e:	4610      	mov	r0, r2
 8000a90:	4662      	mov	r2, ip
 8000a92:	468c      	mov	ip, r1
 8000a94:	4619      	mov	r1, r3
 8000a96:	4663      	mov	r3, ip
 8000a98:	e000      	b.n	8000a9c <__aeabi_cdcmpeq>
 8000a9a:	bf00      	nop

08000a9c <__aeabi_cdcmpeq>:
 8000a9c:	b501      	push	{r0, lr}
 8000a9e:	f7ff ffb7 	bl	8000a10 <__cmpdf2>
 8000aa2:	2800      	cmp	r0, #0
 8000aa4:	bf48      	it	mi
 8000aa6:	f110 0f00 	cmnmi.w	r0, #0
 8000aaa:	bd01      	pop	{r0, pc}

08000aac <__aeabi_dcmpeq>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff fff4 	bl	8000a9c <__aeabi_cdcmpeq>
 8000ab4:	bf0c      	ite	eq
 8000ab6:	2001      	moveq	r0, #1
 8000ab8:	2000      	movne	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmplt>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffea 	bl	8000a9c <__aeabi_cdcmpeq>
 8000ac8:	bf34      	ite	cc
 8000aca:	2001      	movcc	r0, #1
 8000acc:	2000      	movcs	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmple>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffe0 	bl	8000a9c <__aeabi_cdcmpeq>
 8000adc:	bf94      	ite	ls
 8000ade:	2001      	movls	r0, #1
 8000ae0:	2000      	movhi	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmpge>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffce 	bl	8000a8c <__aeabi_cdrcmple>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpgt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffc4 	bl	8000a8c <__aeabi_cdrcmple>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmpun>:
 8000b10:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b18:	d102      	bne.n	8000b20 <__aeabi_dcmpun+0x10>
 8000b1a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b1e:	d10a      	bne.n	8000b36 <__aeabi_dcmpun+0x26>
 8000b20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b28:	d102      	bne.n	8000b30 <__aeabi_dcmpun+0x20>
 8000b2a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b2e:	d102      	bne.n	8000b36 <__aeabi_dcmpun+0x26>
 8000b30:	f04f 0000 	mov.w	r0, #0
 8000b34:	4770      	bx	lr
 8000b36:	f04f 0001 	mov.w	r0, #1
 8000b3a:	4770      	bx	lr

08000b3c <__aeabi_d2iz>:
 8000b3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b44:	d215      	bcs.n	8000b72 <__aeabi_d2iz+0x36>
 8000b46:	d511      	bpl.n	8000b6c <__aeabi_d2iz+0x30>
 8000b48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b50:	d912      	bls.n	8000b78 <__aeabi_d2iz+0x3c>
 8000b52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b5e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b62:	fa23 f002 	lsr.w	r0, r3, r2
 8000b66:	bf18      	it	ne
 8000b68:	4240      	negne	r0, r0
 8000b6a:	4770      	bx	lr
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b76:	d105      	bne.n	8000b84 <__aeabi_d2iz+0x48>
 8000b78:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b7c:	bf08      	it	eq
 8000b7e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b82:	4770      	bx	lr
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <__aeabi_d2uiz>:
 8000b8c:	004a      	lsls	r2, r1, #1
 8000b8e:	d211      	bcs.n	8000bb4 <__aeabi_d2uiz+0x28>
 8000b90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b94:	d211      	bcs.n	8000bba <__aeabi_d2uiz+0x2e>
 8000b96:	d50d      	bpl.n	8000bb4 <__aeabi_d2uiz+0x28>
 8000b98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba0:	d40e      	bmi.n	8000bc0 <__aeabi_d2uiz+0x34>
 8000ba2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000baa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bbe:	d102      	bne.n	8000bc6 <__aeabi_d2uiz+0x3a>
 8000bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc4:	4770      	bx	lr
 8000bc6:	f04f 0000 	mov.w	r0, #0
 8000bca:	4770      	bx	lr

08000bcc <__aeabi_d2f>:
 8000bcc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bd0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd4:	bf24      	itt	cs
 8000bd6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bda:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bde:	d90d      	bls.n	8000bfc <__aeabi_d2f+0x30>
 8000be0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bf0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf4:	bf08      	it	eq
 8000bf6:	f020 0001 	biceq.w	r0, r0, #1
 8000bfa:	4770      	bx	lr
 8000bfc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c00:	d121      	bne.n	8000c46 <__aeabi_d2f+0x7a>
 8000c02:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c06:	bfbc      	itt	lt
 8000c08:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c0c:	4770      	bxlt	lr
 8000c0e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c12:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c16:	f1c2 0218 	rsb	r2, r2, #24
 8000c1a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c22:	fa20 f002 	lsr.w	r0, r0, r2
 8000c26:	bf18      	it	ne
 8000c28:	f040 0001 	orrne.w	r0, r0, #1
 8000c2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c34:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c38:	ea40 000c 	orr.w	r0, r0, ip
 8000c3c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c44:	e7cc      	b.n	8000be0 <__aeabi_d2f+0x14>
 8000c46:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c4a:	d107      	bne.n	8000c5c <__aeabi_d2f+0x90>
 8000c4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c50:	bf1e      	ittt	ne
 8000c52:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c56:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c5a:	4770      	bxne	lr
 8000c5c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c60:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop

08000c6c <__aeabi_uldivmod>:
 8000c6c:	b953      	cbnz	r3, 8000c84 <__aeabi_uldivmod+0x18>
 8000c6e:	b94a      	cbnz	r2, 8000c84 <__aeabi_uldivmod+0x18>
 8000c70:	2900      	cmp	r1, #0
 8000c72:	bf08      	it	eq
 8000c74:	2800      	cmpeq	r0, #0
 8000c76:	bf1c      	itt	ne
 8000c78:	f04f 31ff 	movne.w	r1, #4294967295
 8000c7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c80:	f000 b96e 	b.w	8000f60 <__aeabi_idiv0>
 8000c84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c8c:	f000 f806 	bl	8000c9c <__udivmoddi4>
 8000c90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c98:	b004      	add	sp, #16
 8000c9a:	4770      	bx	lr

08000c9c <__udivmoddi4>:
 8000c9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ca0:	9d08      	ldr	r5, [sp, #32]
 8000ca2:	4604      	mov	r4, r0
 8000ca4:	468c      	mov	ip, r1
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	f040 8083 	bne.w	8000db2 <__udivmoddi4+0x116>
 8000cac:	428a      	cmp	r2, r1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	d947      	bls.n	8000d42 <__udivmoddi4+0xa6>
 8000cb2:	fab2 f282 	clz	r2, r2
 8000cb6:	b142      	cbz	r2, 8000cca <__udivmoddi4+0x2e>
 8000cb8:	f1c2 0020 	rsb	r0, r2, #32
 8000cbc:	fa24 f000 	lsr.w	r0, r4, r0
 8000cc0:	4091      	lsls	r1, r2
 8000cc2:	4097      	lsls	r7, r2
 8000cc4:	ea40 0c01 	orr.w	ip, r0, r1
 8000cc8:	4094      	lsls	r4, r2
 8000cca:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cce:	0c23      	lsrs	r3, r4, #16
 8000cd0:	fbbc f6f8 	udiv	r6, ip, r8
 8000cd4:	fa1f fe87 	uxth.w	lr, r7
 8000cd8:	fb08 c116 	mls	r1, r8, r6, ip
 8000cdc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ce0:	fb06 f10e 	mul.w	r1, r6, lr
 8000ce4:	4299      	cmp	r1, r3
 8000ce6:	d909      	bls.n	8000cfc <__udivmoddi4+0x60>
 8000ce8:	18fb      	adds	r3, r7, r3
 8000cea:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cee:	f080 8119 	bcs.w	8000f24 <__udivmoddi4+0x288>
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	f240 8116 	bls.w	8000f24 <__udivmoddi4+0x288>
 8000cf8:	3e02      	subs	r6, #2
 8000cfa:	443b      	add	r3, r7
 8000cfc:	1a5b      	subs	r3, r3, r1
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d04:	fb08 3310 	mls	r3, r8, r0, r3
 8000d08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x8c>
 8000d14:	193c      	adds	r4, r7, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	f080 8105 	bcs.w	8000f28 <__udivmoddi4+0x28c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f240 8102 	bls.w	8000f28 <__udivmoddi4+0x28c>
 8000d24:	3802      	subs	r0, #2
 8000d26:	443c      	add	r4, r7
 8000d28:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d2c:	eba4 040e 	sub.w	r4, r4, lr
 8000d30:	2600      	movs	r6, #0
 8000d32:	b11d      	cbz	r5, 8000d3c <__udivmoddi4+0xa0>
 8000d34:	40d4      	lsrs	r4, r2
 8000d36:	2300      	movs	r3, #0
 8000d38:	e9c5 4300 	strd	r4, r3, [r5]
 8000d3c:	4631      	mov	r1, r6
 8000d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d42:	b902      	cbnz	r2, 8000d46 <__udivmoddi4+0xaa>
 8000d44:	deff      	udf	#255	; 0xff
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	2a00      	cmp	r2, #0
 8000d4c:	d150      	bne.n	8000df0 <__udivmoddi4+0x154>
 8000d4e:	1bcb      	subs	r3, r1, r7
 8000d50:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d54:	fa1f f887 	uxth.w	r8, r7
 8000d58:	2601      	movs	r6, #1
 8000d5a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d5e:	0c21      	lsrs	r1, r4, #16
 8000d60:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d68:	fb08 f30c 	mul.w	r3, r8, ip
 8000d6c:	428b      	cmp	r3, r1
 8000d6e:	d907      	bls.n	8000d80 <__udivmoddi4+0xe4>
 8000d70:	1879      	adds	r1, r7, r1
 8000d72:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d76:	d202      	bcs.n	8000d7e <__udivmoddi4+0xe2>
 8000d78:	428b      	cmp	r3, r1
 8000d7a:	f200 80e9 	bhi.w	8000f50 <__udivmoddi4+0x2b4>
 8000d7e:	4684      	mov	ip, r0
 8000d80:	1ac9      	subs	r1, r1, r3
 8000d82:	b2a3      	uxth	r3, r4
 8000d84:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d88:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d8c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d90:	fb08 f800 	mul.w	r8, r8, r0
 8000d94:	45a0      	cmp	r8, r4
 8000d96:	d907      	bls.n	8000da8 <__udivmoddi4+0x10c>
 8000d98:	193c      	adds	r4, r7, r4
 8000d9a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d9e:	d202      	bcs.n	8000da6 <__udivmoddi4+0x10a>
 8000da0:	45a0      	cmp	r8, r4
 8000da2:	f200 80d9 	bhi.w	8000f58 <__udivmoddi4+0x2bc>
 8000da6:	4618      	mov	r0, r3
 8000da8:	eba4 0408 	sub.w	r4, r4, r8
 8000dac:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000db0:	e7bf      	b.n	8000d32 <__udivmoddi4+0x96>
 8000db2:	428b      	cmp	r3, r1
 8000db4:	d909      	bls.n	8000dca <__udivmoddi4+0x12e>
 8000db6:	2d00      	cmp	r5, #0
 8000db8:	f000 80b1 	beq.w	8000f1e <__udivmoddi4+0x282>
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000dc2:	4630      	mov	r0, r6
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	fab3 f683 	clz	r6, r3
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	d14a      	bne.n	8000e68 <__udivmoddi4+0x1cc>
 8000dd2:	428b      	cmp	r3, r1
 8000dd4:	d302      	bcc.n	8000ddc <__udivmoddi4+0x140>
 8000dd6:	4282      	cmp	r2, r0
 8000dd8:	f200 80b8 	bhi.w	8000f4c <__udivmoddi4+0x2b0>
 8000ddc:	1a84      	subs	r4, r0, r2
 8000dde:	eb61 0103 	sbc.w	r1, r1, r3
 8000de2:	2001      	movs	r0, #1
 8000de4:	468c      	mov	ip, r1
 8000de6:	2d00      	cmp	r5, #0
 8000de8:	d0a8      	beq.n	8000d3c <__udivmoddi4+0xa0>
 8000dea:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dee:	e7a5      	b.n	8000d3c <__udivmoddi4+0xa0>
 8000df0:	f1c2 0320 	rsb	r3, r2, #32
 8000df4:	fa20 f603 	lsr.w	r6, r0, r3
 8000df8:	4097      	lsls	r7, r2
 8000dfa:	fa01 f002 	lsl.w	r0, r1, r2
 8000dfe:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e02:	40d9      	lsrs	r1, r3
 8000e04:	4330      	orrs	r0, r6
 8000e06:	0c03      	lsrs	r3, r0, #16
 8000e08:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e0c:	fa1f f887 	uxth.w	r8, r7
 8000e10:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e14:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e18:	fb06 f108 	mul.w	r1, r6, r8
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	fa04 f402 	lsl.w	r4, r4, r2
 8000e22:	d909      	bls.n	8000e38 <__udivmoddi4+0x19c>
 8000e24:	18fb      	adds	r3, r7, r3
 8000e26:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e2a:	f080 808d 	bcs.w	8000f48 <__udivmoddi4+0x2ac>
 8000e2e:	4299      	cmp	r1, r3
 8000e30:	f240 808a 	bls.w	8000f48 <__udivmoddi4+0x2ac>
 8000e34:	3e02      	subs	r6, #2
 8000e36:	443b      	add	r3, r7
 8000e38:	1a5b      	subs	r3, r3, r1
 8000e3a:	b281      	uxth	r1, r0
 8000e3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb00 f308 	mul.w	r3, r0, r8
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d907      	bls.n	8000e60 <__udivmoddi4+0x1c4>
 8000e50:	1879      	adds	r1, r7, r1
 8000e52:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e56:	d273      	bcs.n	8000f40 <__udivmoddi4+0x2a4>
 8000e58:	428b      	cmp	r3, r1
 8000e5a:	d971      	bls.n	8000f40 <__udivmoddi4+0x2a4>
 8000e5c:	3802      	subs	r0, #2
 8000e5e:	4439      	add	r1, r7
 8000e60:	1acb      	subs	r3, r1, r3
 8000e62:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e66:	e778      	b.n	8000d5a <__udivmoddi4+0xbe>
 8000e68:	f1c6 0c20 	rsb	ip, r6, #32
 8000e6c:	fa03 f406 	lsl.w	r4, r3, r6
 8000e70:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e74:	431c      	orrs	r4, r3
 8000e76:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e7e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e82:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e86:	431f      	orrs	r7, r3
 8000e88:	0c3b      	lsrs	r3, r7, #16
 8000e8a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e8e:	fa1f f884 	uxth.w	r8, r4
 8000e92:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e96:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e9a:	fb09 fa08 	mul.w	sl, r9, r8
 8000e9e:	458a      	cmp	sl, r1
 8000ea0:	fa02 f206 	lsl.w	r2, r2, r6
 8000ea4:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x220>
 8000eaa:	1861      	adds	r1, r4, r1
 8000eac:	f109 30ff 	add.w	r0, r9, #4294967295
 8000eb0:	d248      	bcs.n	8000f44 <__udivmoddi4+0x2a8>
 8000eb2:	458a      	cmp	sl, r1
 8000eb4:	d946      	bls.n	8000f44 <__udivmoddi4+0x2a8>
 8000eb6:	f1a9 0902 	sub.w	r9, r9, #2
 8000eba:	4421      	add	r1, r4
 8000ebc:	eba1 010a 	sub.w	r1, r1, sl
 8000ec0:	b2bf      	uxth	r7, r7
 8000ec2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ec6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000eca:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000ece:	fb00 f808 	mul.w	r8, r0, r8
 8000ed2:	45b8      	cmp	r8, r7
 8000ed4:	d907      	bls.n	8000ee6 <__udivmoddi4+0x24a>
 8000ed6:	19e7      	adds	r7, r4, r7
 8000ed8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000edc:	d22e      	bcs.n	8000f3c <__udivmoddi4+0x2a0>
 8000ede:	45b8      	cmp	r8, r7
 8000ee0:	d92c      	bls.n	8000f3c <__udivmoddi4+0x2a0>
 8000ee2:	3802      	subs	r0, #2
 8000ee4:	4427      	add	r7, r4
 8000ee6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eea:	eba7 0708 	sub.w	r7, r7, r8
 8000eee:	fba0 8902 	umull	r8, r9, r0, r2
 8000ef2:	454f      	cmp	r7, r9
 8000ef4:	46c6      	mov	lr, r8
 8000ef6:	4649      	mov	r1, r9
 8000ef8:	d31a      	bcc.n	8000f30 <__udivmoddi4+0x294>
 8000efa:	d017      	beq.n	8000f2c <__udivmoddi4+0x290>
 8000efc:	b15d      	cbz	r5, 8000f16 <__udivmoddi4+0x27a>
 8000efe:	ebb3 020e 	subs.w	r2, r3, lr
 8000f02:	eb67 0701 	sbc.w	r7, r7, r1
 8000f06:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f0a:	40f2      	lsrs	r2, r6
 8000f0c:	ea4c 0202 	orr.w	r2, ip, r2
 8000f10:	40f7      	lsrs	r7, r6
 8000f12:	e9c5 2700 	strd	r2, r7, [r5]
 8000f16:	2600      	movs	r6, #0
 8000f18:	4631      	mov	r1, r6
 8000f1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f1e:	462e      	mov	r6, r5
 8000f20:	4628      	mov	r0, r5
 8000f22:	e70b      	b.n	8000d3c <__udivmoddi4+0xa0>
 8000f24:	4606      	mov	r6, r0
 8000f26:	e6e9      	b.n	8000cfc <__udivmoddi4+0x60>
 8000f28:	4618      	mov	r0, r3
 8000f2a:	e6fd      	b.n	8000d28 <__udivmoddi4+0x8c>
 8000f2c:	4543      	cmp	r3, r8
 8000f2e:	d2e5      	bcs.n	8000efc <__udivmoddi4+0x260>
 8000f30:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f34:	eb69 0104 	sbc.w	r1, r9, r4
 8000f38:	3801      	subs	r0, #1
 8000f3a:	e7df      	b.n	8000efc <__udivmoddi4+0x260>
 8000f3c:	4608      	mov	r0, r1
 8000f3e:	e7d2      	b.n	8000ee6 <__udivmoddi4+0x24a>
 8000f40:	4660      	mov	r0, ip
 8000f42:	e78d      	b.n	8000e60 <__udivmoddi4+0x1c4>
 8000f44:	4681      	mov	r9, r0
 8000f46:	e7b9      	b.n	8000ebc <__udivmoddi4+0x220>
 8000f48:	4666      	mov	r6, ip
 8000f4a:	e775      	b.n	8000e38 <__udivmoddi4+0x19c>
 8000f4c:	4630      	mov	r0, r6
 8000f4e:	e74a      	b.n	8000de6 <__udivmoddi4+0x14a>
 8000f50:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f54:	4439      	add	r1, r7
 8000f56:	e713      	b.n	8000d80 <__udivmoddi4+0xe4>
 8000f58:	3802      	subs	r0, #2
 8000f5a:	443c      	add	r4, r7
 8000f5c:	e724      	b.n	8000da8 <__udivmoddi4+0x10c>
 8000f5e:	bf00      	nop

08000f60 <__aeabi_idiv0>:
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop

08000f64 <inc_res>:
 * @Brief	Increments if true, resets (to zero) otherwise
 * @Param	A conditional statement which evaluates to true or false
 * @Param	A pointer to an integer which may be incremented or reset
 * @Retval	Void
 */
static void inc_res(uint8_t cnd, uint8_t *ptr) {
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	6039      	str	r1, [r7, #0]
 8000f6e:	71fb      	strb	r3, [r7, #7]
	if (cnd) {
 8000f70:	79fb      	ldrb	r3, [r7, #7]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d006      	beq.n	8000f84 <inc_res+0x20>
		ptr[0]++;
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	b2da      	uxtb	r2, r3
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	701a      	strb	r2, [r3, #0]
	} else {
		ptr[0] = 0;
	}
}
 8000f82:	e002      	b.n	8000f8a <inc_res+0x26>
		ptr[0] = 0;
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	2200      	movs	r2, #0
 8000f88:	701a      	strb	r2, [r3, #0]
}
 8000f8a:	bf00      	nop
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
	...

08000f98 <COM_voltages_ok_d>:
 * @Param	A flag which says whether the values are valid or not (due to corruption, etc.)
 * @Param	The sample constraint. How many consecutive samples may be wrong before an error is triggered
 * @retval	1 if there is no error
 */
uint8_t COM_voltages_ok_d(double *voltages, uint8_t valid,
		uint16_t sample_constraint) {
 8000f98:	b5b0      	push	{r4, r5, r7, lr}
 8000f9a:	b086      	sub	sp, #24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	460b      	mov	r3, r1
 8000fa2:	70fb      	strb	r3, [r7, #3]
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	803b      	strh	r3, [r7, #0]
	const float upper_boundary = 4.19;
 8000fa8:	4b30      	ldr	r3, [pc, #192]	; (800106c <COM_voltages_ok_d+0xd4>)
 8000faa:	613b      	str	r3, [r7, #16]
	const float lower_boundary = 2.81;
 8000fac:	4b30      	ldr	r3, [pc, #192]	; (8001070 <COM_voltages_ok_d+0xd8>)
 8000fae:	60fb      	str	r3, [r7, #12]

	for (int p = 0; p < 126; p++) {
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	617b      	str	r3, [r7, #20]
 8000fb4:	e052      	b.n	800105c <COM_voltages_ok_d+0xc4>
		inc_res(valid && (voltages[p] > upper_boundary), &over_voltages[p]);
 8000fb6:	78fb      	ldrb	r3, [r7, #3]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d013      	beq.n	8000fe4 <COM_voltages_ok_d+0x4c>
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	00db      	lsls	r3, r3, #3
 8000fc0:	687a      	ldr	r2, [r7, #4]
 8000fc2:	4413      	add	r3, r2
 8000fc4:	e9d3 4500 	ldrd	r4, r5, [r3]
 8000fc8:	6938      	ldr	r0, [r7, #16]
 8000fca:	f7ff faaf 	bl	800052c <__aeabi_f2d>
 8000fce:	4602      	mov	r2, r0
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	4620      	mov	r0, r4
 8000fd4:	4629      	mov	r1, r5
 8000fd6:	f7ff fd91 	bl	8000afc <__aeabi_dcmpgt>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <COM_voltages_ok_d+0x4c>
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	e000      	b.n	8000fe6 <COM_voltages_ok_d+0x4e>
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	b2da      	uxtb	r2, r3
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	4922      	ldr	r1, [pc, #136]	; (8001074 <COM_voltages_ok_d+0xdc>)
 8000fec:	440b      	add	r3, r1
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4610      	mov	r0, r2
 8000ff2:	f7ff ffb7 	bl	8000f64 <inc_res>
		inc_res(valid && (lower_boundary > voltages[p]), &under_voltages[p]);
 8000ff6:	78fb      	ldrb	r3, [r7, #3]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d00f      	beq.n	800101c <COM_voltages_ok_d+0x84>
 8000ffc:	68f8      	ldr	r0, [r7, #12]
 8000ffe:	f7ff fa95 	bl	800052c <__aeabi_f2d>
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	00db      	lsls	r3, r3, #3
 8001006:	687a      	ldr	r2, [r7, #4]
 8001008:	4413      	add	r3, r2
 800100a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800100e:	f7ff fd75 	bl	8000afc <__aeabi_dcmpgt>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <COM_voltages_ok_d+0x84>
 8001018:	2301      	movs	r3, #1
 800101a:	e000      	b.n	800101e <COM_voltages_ok_d+0x86>
 800101c:	2300      	movs	r3, #0
 800101e:	b2da      	uxtb	r2, r3
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	4915      	ldr	r1, [pc, #84]	; (8001078 <COM_voltages_ok_d+0xe0>)
 8001024:	440b      	add	r3, r1
 8001026:	4619      	mov	r1, r3
 8001028:	4610      	mov	r0, r2
 800102a:	f7ff ff9b 	bl	8000f64 <inc_res>

		if (over_voltages[p] > sample_constraint) {
 800102e:	4a11      	ldr	r2, [pc, #68]	; (8001074 <COM_voltages_ok_d+0xdc>)
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	4413      	add	r3, r2
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	b29b      	uxth	r3, r3
 8001038:	883a      	ldrh	r2, [r7, #0]
 800103a:	429a      	cmp	r2, r3
 800103c:	d201      	bcs.n	8001042 <COM_voltages_ok_d+0xaa>
			return 0;
 800103e:	2300      	movs	r3, #0
 8001040:	e010      	b.n	8001064 <COM_voltages_ok_d+0xcc>
		}
		if (under_voltages[p] > sample_constraint) {
 8001042:	4a0d      	ldr	r2, [pc, #52]	; (8001078 <COM_voltages_ok_d+0xe0>)
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	4413      	add	r3, r2
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	b29b      	uxth	r3, r3
 800104c:	883a      	ldrh	r2, [r7, #0]
 800104e:	429a      	cmp	r2, r3
 8001050:	d201      	bcs.n	8001056 <COM_voltages_ok_d+0xbe>
			return 0;
 8001052:	2300      	movs	r3, #0
 8001054:	e006      	b.n	8001064 <COM_voltages_ok_d+0xcc>
	for (int p = 0; p < 126; p++) {
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	3301      	adds	r3, #1
 800105a:	617b      	str	r3, [r7, #20]
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	2b7d      	cmp	r3, #125	; 0x7d
 8001060:	dda9      	ble.n	8000fb6 <COM_voltages_ok_d+0x1e>
		}
	}

	return 1;
 8001062:	2301      	movs	r3, #1

}
 8001064:	4618      	mov	r0, r3
 8001066:	3718      	adds	r7, #24
 8001068:	46bd      	mov	sp, r7
 800106a:	bdb0      	pop	{r4, r5, r7, pc}
 800106c:	4086147b 	.word	0x4086147b
 8001070:	4033d70a 	.word	0x4033d70a
 8001074:	20001374 	.word	0x20001374
 8001078:	200013f4 	.word	0x200013f4

0800107c <COM_temperatures_ok_d>:
 * @Param	A flag which says whether the values are valid or not (due to corruption, etc.)
 * @Param	The sample constraint. How many consecutive samples may be wrong before an error is triggered
 * @retval	1 if there is no error
 */
uint8_t COM_temperatures_ok_d(double *temperatures, uint8_t valid,
		uint16_t sample_constraint) {
 800107c:	b5b0      	push	{r4, r5, r7, lr}
 800107e:	b086      	sub	sp, #24
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	460b      	mov	r3, r1
 8001086:	70fb      	strb	r3, [r7, #3]
 8001088:	4613      	mov	r3, r2
 800108a:	803b      	strh	r3, [r7, #0]
	const float upper_boundary = 60;
 800108c:	4b30      	ldr	r3, [pc, #192]	; (8001150 <COM_temperatures_ok_d+0xd4>)
 800108e:	613b      	str	r3, [r7, #16]
	const float lower_boundary = -20;
 8001090:	4b30      	ldr	r3, [pc, #192]	; (8001154 <COM_temperatures_ok_d+0xd8>)
 8001092:	60fb      	str	r3, [r7, #12]

	for (int p = 0; p < 60; p++) {
 8001094:	2300      	movs	r3, #0
 8001096:	617b      	str	r3, [r7, #20]
 8001098:	e052      	b.n	8001140 <COM_temperatures_ok_d+0xc4>
		inc_res(valid && (temperatures[p] > upper_boundary),
 800109a:	78fb      	ldrb	r3, [r7, #3]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d013      	beq.n	80010c8 <COM_temperatures_ok_d+0x4c>
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	00db      	lsls	r3, r3, #3
 80010a4:	687a      	ldr	r2, [r7, #4]
 80010a6:	4413      	add	r3, r2
 80010a8:	e9d3 4500 	ldrd	r4, r5, [r3]
 80010ac:	6938      	ldr	r0, [r7, #16]
 80010ae:	f7ff fa3d 	bl	800052c <__aeabi_f2d>
 80010b2:	4602      	mov	r2, r0
 80010b4:	460b      	mov	r3, r1
 80010b6:	4620      	mov	r0, r4
 80010b8:	4629      	mov	r1, r5
 80010ba:	f7ff fd1f 	bl	8000afc <__aeabi_dcmpgt>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <COM_temperatures_ok_d+0x4c>
 80010c4:	2301      	movs	r3, #1
 80010c6:	e000      	b.n	80010ca <COM_temperatures_ok_d+0x4e>
 80010c8:	2300      	movs	r3, #0
 80010ca:	b2da      	uxtb	r2, r3
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	4922      	ldr	r1, [pc, #136]	; (8001158 <COM_temperatures_ok_d+0xdc>)
 80010d0:	440b      	add	r3, r1
 80010d2:	4619      	mov	r1, r3
 80010d4:	4610      	mov	r0, r2
 80010d6:	f7ff ff45 	bl	8000f64 <inc_res>
				&over_temperatures[p]);
		inc_res(valid && (lower_boundary > temperatures[p]),
 80010da:	78fb      	ldrb	r3, [r7, #3]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d00f      	beq.n	8001100 <COM_temperatures_ok_d+0x84>
 80010e0:	68f8      	ldr	r0, [r7, #12]
 80010e2:	f7ff fa23 	bl	800052c <__aeabi_f2d>
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	00db      	lsls	r3, r3, #3
 80010ea:	687a      	ldr	r2, [r7, #4]
 80010ec:	4413      	add	r3, r2
 80010ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f2:	f7ff fd03 	bl	8000afc <__aeabi_dcmpgt>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <COM_temperatures_ok_d+0x84>
 80010fc:	2301      	movs	r3, #1
 80010fe:	e000      	b.n	8001102 <COM_temperatures_ok_d+0x86>
 8001100:	2300      	movs	r3, #0
 8001102:	b2da      	uxtb	r2, r3
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	4915      	ldr	r1, [pc, #84]	; (800115c <COM_temperatures_ok_d+0xe0>)
 8001108:	440b      	add	r3, r1
 800110a:	4619      	mov	r1, r3
 800110c:	4610      	mov	r0, r2
 800110e:	f7ff ff29 	bl	8000f64 <inc_res>
				&under_temperatures[p]);

		if (over_temperatures[p] > sample_constraint) {
 8001112:	4a11      	ldr	r2, [pc, #68]	; (8001158 <COM_temperatures_ok_d+0xdc>)
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	4413      	add	r3, r2
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	b29b      	uxth	r3, r3
 800111c:	883a      	ldrh	r2, [r7, #0]
 800111e:	429a      	cmp	r2, r3
 8001120:	d201      	bcs.n	8001126 <COM_temperatures_ok_d+0xaa>
			return 0;
 8001122:	2300      	movs	r3, #0
 8001124:	e010      	b.n	8001148 <COM_temperatures_ok_d+0xcc>
		}
		if (under_temperatures[p] > sample_constraint) {
 8001126:	4a0d      	ldr	r2, [pc, #52]	; (800115c <COM_temperatures_ok_d+0xe0>)
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	4413      	add	r3, r2
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	b29b      	uxth	r3, r3
 8001130:	883a      	ldrh	r2, [r7, #0]
 8001132:	429a      	cmp	r2, r3
 8001134:	d201      	bcs.n	800113a <COM_temperatures_ok_d+0xbe>
			return 0;
 8001136:	2300      	movs	r3, #0
 8001138:	e006      	b.n	8001148 <COM_temperatures_ok_d+0xcc>
	for (int p = 0; p < 60; p++) {
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	3301      	adds	r3, #1
 800113e:	617b      	str	r3, [r7, #20]
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	2b3b      	cmp	r3, #59	; 0x3b
 8001144:	dda9      	ble.n	800109a <COM_temperatures_ok_d+0x1e>
		}
	}

	return 1;
 8001146:	2301      	movs	r3, #1

}
 8001148:	4618      	mov	r0, r3
 800114a:	3718      	adds	r7, #24
 800114c:	46bd      	mov	sp, r7
 800114e:	bdb0      	pop	{r4, r5, r7, pc}
 8001150:	42700000 	.word	0x42700000
 8001154:	c1a00000 	.word	0xc1a00000
 8001158:	20001474 	.word	0x20001474
 800115c:	200014b0 	.word	0x200014b0

08001160 <COM_current_ok_d>:
 * @Param	A flag which says whether the value is valid or not (due to corruption, etc.)
 * @Param	The sample constraint. How many consecutive samples may be wrong before an error is triggered
 * @retval	1 if there is no error
 */
uint8_t COM_current_ok_d(double *current, uint8_t valid,
		uint16_t sample_constraint) {
 8001160:	b5b0      	push	{r4, r5, r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	460b      	mov	r3, r1
 800116a:	70fb      	strb	r3, [r7, #3]
 800116c:	4613      	mov	r3, r2
 800116e:	803b      	strh	r3, [r7, #0]
	const float upper_boundary = 40;
 8001170:	4b24      	ldr	r3, [pc, #144]	; (8001204 <COM_current_ok_d+0xa4>)
 8001172:	60fb      	str	r3, [r7, #12]
	const float lower_boundary = -100;
 8001174:	4b24      	ldr	r3, [pc, #144]	; (8001208 <COM_current_ok_d+0xa8>)
 8001176:	60bb      	str	r3, [r7, #8]

	inc_res(valid && (current[0] > upper_boundary), &over_current);
 8001178:	78fb      	ldrb	r3, [r7, #3]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d010      	beq.n	80011a0 <COM_current_ok_d+0x40>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001184:	68f8      	ldr	r0, [r7, #12]
 8001186:	f7ff f9d1 	bl	800052c <__aeabi_f2d>
 800118a:	4602      	mov	r2, r0
 800118c:	460b      	mov	r3, r1
 800118e:	4620      	mov	r0, r4
 8001190:	4629      	mov	r1, r5
 8001192:	f7ff fcb3 	bl	8000afc <__aeabi_dcmpgt>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <COM_current_ok_d+0x40>
 800119c:	2301      	movs	r3, #1
 800119e:	e000      	b.n	80011a2 <COM_current_ok_d+0x42>
 80011a0:	2300      	movs	r3, #0
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	4919      	ldr	r1, [pc, #100]	; (800120c <COM_current_ok_d+0xac>)
 80011a6:	4618      	mov	r0, r3
 80011a8:	f7ff fedc 	bl	8000f64 <inc_res>
	inc_res(valid && (lower_boundary > current[0]), &under_current);
 80011ac:	78fb      	ldrb	r3, [r7, #3]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d00c      	beq.n	80011cc <COM_current_ok_d+0x6c>
 80011b2:	68b8      	ldr	r0, [r7, #8]
 80011b4:	f7ff f9ba 	bl	800052c <__aeabi_f2d>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011be:	f7ff fc9d 	bl	8000afc <__aeabi_dcmpgt>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <COM_current_ok_d+0x6c>
 80011c8:	2301      	movs	r3, #1
 80011ca:	e000      	b.n	80011ce <COM_current_ok_d+0x6e>
 80011cc:	2300      	movs	r3, #0
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	490f      	ldr	r1, [pc, #60]	; (8001210 <COM_current_ok_d+0xb0>)
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff fec6 	bl	8000f64 <inc_res>

	if (over_current > sample_constraint) {
 80011d8:	4b0c      	ldr	r3, [pc, #48]	; (800120c <COM_current_ok_d+0xac>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	b29b      	uxth	r3, r3
 80011de:	883a      	ldrh	r2, [r7, #0]
 80011e0:	429a      	cmp	r2, r3
 80011e2:	d201      	bcs.n	80011e8 <COM_current_ok_d+0x88>
		return 0;
 80011e4:	2300      	movs	r3, #0
 80011e6:	e008      	b.n	80011fa <COM_current_ok_d+0x9a>
	}
	if (under_current > sample_constraint) {
 80011e8:	4b09      	ldr	r3, [pc, #36]	; (8001210 <COM_current_ok_d+0xb0>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	b29b      	uxth	r3, r3
 80011ee:	883a      	ldrh	r2, [r7, #0]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d201      	bcs.n	80011f8 <COM_current_ok_d+0x98>
		return 0;
 80011f4:	2300      	movs	r3, #0
 80011f6:	e000      	b.n	80011fa <COM_current_ok_d+0x9a>
	}

	return 1;
 80011f8:	2301      	movs	r3, #1

}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3710      	adds	r7, #16
 80011fe:	46bd      	mov	sp, r7
 8001200:	bdb0      	pop	{r4, r5, r7, pc}
 8001202:	bf00      	nop
 8001204:	42200000 	.word	0x42200000
 8001208:	c2c80000 	.word	0xc2c80000
 800120c:	200014ec 	.word	0x200014ec
 8001210:	200014ed 	.word	0x200014ed

08001214 <FAN_initialize>:
#include "main.h"
#include "programme_data.h"

#include "FAN.h"

void FAN_initialize(TIM_HandleTypeDef *htim) {
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
	const float frequency = 1000;
 800121c:	4b10      	ldr	r3, [pc, #64]	; (8001260 <FAN_initialize+0x4c>)
 800121e:	60fb      	str	r3, [r7, #12]

	htim->Instance->ARR = 65535 / frequency;
 8001220:	eddf 6a10 	vldr	s13, [pc, #64]	; 8001264 <FAN_initialize+0x50>
 8001224:	ed97 7a03 	vldr	s14, [r7, #12]
 8001228:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001234:	ee17 2a90 	vmov	r2, s15
 8001238:	62da      	str	r2, [r3, #44]	; 0x2c
	htim->Instance->CCR3 = htim->Instance->ARR / 2;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	0852      	lsrs	r2, r2, #1
 8001246:	63da      	str	r2, [r3, #60]	; 0x3c
	htim->Instance->CNT = 0;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2200      	movs	r2, #0
 800124e:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_PWM_Start(htim, TIM_CHANNEL_3);
 8001250:	2108      	movs	r1, #8
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f00f fd20 	bl	8010c98 <HAL_TIM_PWM_Start>

}
 8001258:	bf00      	nop
 800125a:	3710      	adds	r7, #16
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	447a0000 	.word	0x447a0000
 8001264:	477fff00 	.word	0x477fff00

08001268 <FAN_duty_cycle>:

void FAN_duty_cycle(TIM_HandleTypeDef *htim, float duty_cycle) {
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	ed87 0a00 	vstr	s0, [r7]
	if (duty_cycle < 0) {
 8001274:	edd7 7a00 	vldr	s15, [r7]
 8001278:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800127c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001280:	d502      	bpl.n	8001288 <FAN_duty_cycle+0x20>
		duty_cycle = 0;
 8001282:	f04f 0300 	mov.w	r3, #0
 8001286:	603b      	str	r3, [r7, #0]
	}
	if (100 < duty_cycle) {
 8001288:	edd7 7a00 	vldr	s15, [r7]
 800128c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80012e0 <FAN_duty_cycle+0x78>
 8001290:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001294:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001298:	dd01      	ble.n	800129e <FAN_duty_cycle+0x36>
		duty_cycle = 100;
 800129a:	4b12      	ldr	r3, [pc, #72]	; (80012e4 <FAN_duty_cycle+0x7c>)
 800129c:	603b      	str	r3, [r7, #0]
	}

	htim->Instance->CCR3 = (duty_cycle / 100) * htim->Instance->ARR;
 800129e:	edd7 7a00 	vldr	s15, [r7]
 80012a2:	eddf 6a0f 	vldr	s13, [pc, #60]	; 80012e0 <FAN_duty_cycle+0x78>
 80012a6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012b0:	ee07 3a90 	vmov	s15, r3
 80012b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012c4:	ee17 2a90 	vmov	r2, s15
 80012c8:	63da      	str	r2, [r3, #60]	; 0x3c
	htim->Instance->CNT = 0;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	2200      	movs	r2, #0
 80012d0:	625a      	str	r2, [r3, #36]	; 0x24
}
 80012d2:	bf00      	nop
 80012d4:	370c      	adds	r7, #12
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	42c80000 	.word	0x42c80000
 80012e4:	42c80000 	.word	0x42c80000

080012e8 <HAL_TIM_IC_CaptureCallback>:
#include "programme_data.h"
#include "programme_queues.h"

static IMD_t IMD;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b086      	sub	sp, #24
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
	float ante = 0;
 80012f0:	f04f 0300 	mov.w	r3, #0
 80012f4:	617b      	str	r3, [r7, #20]
	float conq = 0;
 80012f6:	f04f 0300 	mov.w	r3, #0
 80012fa:	613b      	str	r3, [r7, #16]

	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80012fc:	2300      	movs	r3, #0
 80012fe:	60fb      	str	r3, [r7, #12]

	if (htim->Instance == TIM2) {
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001308:	d13c      	bne.n	8001384 <HAL_TIM_IC_CaptureCallback+0x9c>
		ante = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 800130a:	2104      	movs	r1, #4
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f010 fb59 	bl	80119c4 <HAL_TIM_ReadCapturedValue>
 8001312:	ee07 0a90 	vmov	s15, r0
 8001316:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800131a:	edc7 7a05 	vstr	s15, [r7, #20]
		conq = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800131e:	2100      	movs	r1, #0
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f010 fb4f 	bl	80119c4 <HAL_TIM_ReadCapturedValue>
 8001326:	ee07 0a90 	vmov	s15, r0
 800132a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800132e:	edc7 7a04 	vstr	s15, [r7, #16]

		IMD.duty_cycle = ante / conq;
 8001332:	edd7 6a05 	vldr	s13, [r7, #20]
 8001336:	ed97 7a04 	vldr	s14, [r7, #16]
 800133a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800133e:	4b13      	ldr	r3, [pc, #76]	; (800138c <HAL_TIM_IC_CaptureCallback+0xa4>)
 8001340:	edc3 7a00 	vstr	s15, [r3]
		IMD.frequency = 100000000 / (conq + 1);
 8001344:	edd7 7a04 	vldr	s15, [r7, #16]
 8001348:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800134c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001350:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8001390 <HAL_TIM_IC_CaptureCallback+0xa8>
 8001354:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001358:	4b0c      	ldr	r3, [pc, #48]	; (800138c <HAL_TIM_IC_CaptureCallback+0xa4>)
 800135a:	edc3 7a01 	vstr	s15, [r3, #4]

		xQueueOverwriteFromISR(IMD_queue, &IMD, &xHigherPriorityTaskWoken);
 800135e:	4b0d      	ldr	r3, [pc, #52]	; (8001394 <HAL_TIM_IC_CaptureCallback+0xac>)
 8001360:	6818      	ldr	r0, [r3, #0]
 8001362:	f107 020c 	add.w	r2, r7, #12
 8001366:	2302      	movs	r3, #2
 8001368:	4908      	ldr	r1, [pc, #32]	; (800138c <HAL_TIM_IC_CaptureCallback+0xa4>)
 800136a:	f011 fdef 	bl	8012f4c <xQueueGenericSendFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d007      	beq.n	8001384 <HAL_TIM_IC_CaptureCallback+0x9c>
 8001374:	4b08      	ldr	r3, [pc, #32]	; (8001398 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8001376:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	f3bf 8f4f 	dsb	sy
 8001380:	f3bf 8f6f 	isb	sy
	}
}
 8001384:	bf00      	nop
 8001386:	3718      	adds	r7, #24
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	200014f0 	.word	0x200014f0
 8001390:	4cbebc20 	.word	0x4cbebc20
 8001394:	2001b430 	.word	0x2001b430
 8001398:	e000ed04 	.word	0xe000ed04

0800139c <initialize_IMD>:

void initialize_IMD(TIM_HandleTypeDef *htim) {
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
	htim->Instance->ARR = 42000000;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a0b      	ldr	r2, [pc, #44]	; (80013d8 <initialize_IMD+0x3c>)
 80013aa:	62da      	str	r2, [r3, #44]	; 0x2c

	if (HAL_TIM_IC_Start_IT(htim, TIM_CHANNEL_1) != HAL_OK) {
 80013ac:	2100      	movs	r1, #0
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f00f fe70 	bl	8011094 <HAL_TIM_IC_Start_IT>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <initialize_IMD+0x22>
		Error_Handler();
 80013ba:	f002 f8bb 	bl	8003534 <Error_Handler>
	}

	if (HAL_TIM_IC_Start(htim, TIM_CHANNEL_2) != HAL_OK) {
 80013be:	2104      	movs	r1, #4
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f00f fd8b 	bl	8010edc <HAL_TIM_IC_Start>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <initialize_IMD+0x34>
		Error_Handler();
 80013cc:	f002 f8b2 	bl	8003534 <Error_Handler>
	}
}
 80013d0:	bf00      	nop
 80013d2:	3708      	adds	r7, #8
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	0280de80 	.word	0x0280de80

080013dc <PID_progress>:
/*
 * @brief	Progress the PID
 * @param	Input at current timestep
 * @retval	1 if it went through, 0 else
 */
uint8_t PID_progress(PID_t *ctrl, float input) {
 80013dc:	b480      	push	{r7}
 80013de:	b087      	sub	sp, #28
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	ed87 0a00 	vstr	s0, [r7]
	ctrl->input = input;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	683a      	ldr	r2, [r7, #0]
 80013ec:	605a      	str	r2, [r3, #4]
	ctrl->error = ctrl->input - ctrl->reference;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	ed93 7a01 	vldr	s14, [r3, #4]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	edd3 7a03 	vldr	s15, [r3, #12]
 80013fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	edc3 7a00 	vstr	s15, [r3]

	ctrl->output = arm_pid_f32(&(ctrl->controller), ctrl->error);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f103 0218 	add.w	r2, r3, #24
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	617a      	str	r2, [r7, #20]
 8001410:	613b      	str	r3, [r7, #16]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	ed93 7a00 	vldr	s14, [r3]
 8001418:	edd7 7a04 	vldr	s15, [r7, #16]
 800141c:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	edd3 6a01 	vldr	s13, [r3, #4]
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	edd3 7a03 	vldr	s15, [r3, #12]
 800142c:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8001430:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	edd3 6a02 	vldr	s13, [r3, #8]
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001440:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001444:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 800144e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001452:	edc7 7a03 	vstr	s15, [r7, #12]

    /* Update state */
    S->state[1] = S->state[0];
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	68da      	ldr	r2, [r3, #12]
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	693a      	ldr	r2, [r7, #16]
 8001462:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	68fa      	ldr	r2, [r7, #12]
 8001468:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 800146a:	68fa      	ldr	r2, [r7, #12]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	609a      	str	r2, [r3, #8]

	if (ctrl->output < ctrl->output_lower_bound) {
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	ed93 7a02 	vldr	s14, [r3, #8]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	edd3 7a05 	vldr	s15, [r3, #20]
 800147c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001484:	d503      	bpl.n	800148e <PID_progress+0xb2>
		ctrl->output = ctrl->output_lower_bound;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	695a      	ldr	r2, [r3, #20]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	609a      	str	r2, [r3, #8]
	}

	if (ctrl->output_upper_bound < ctrl->output) {
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	ed93 7a04 	vldr	s14, [r3, #16]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	edd3 7a02 	vldr	s15, [r3, #8]
 800149a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800149e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014a2:	d503      	bpl.n	80014ac <PID_progress+0xd0>
		ctrl->output = ctrl->output_upper_bound;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	691a      	ldr	r2, [r3, #16]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	609a      	str	r2, [r3, #8]
	}

	return 1;
 80014ac:	2301      	movs	r3, #1
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	371c      	adds	r7, #28
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr

080014ba <PID_initialize>:
 * @param	output upper bound, ex 100 for PWM
 * @retval	1 if it went through, 0 else
 */
uint8_t PID_initialize(PID_t *ctrl, float reference,
		float proportional, float integral, float derivative,
		float output_lower_bound, float output_upper_bound) {
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b088      	sub	sp, #32
 80014be:	af00      	add	r7, sp, #0
 80014c0:	61f8      	str	r0, [r7, #28]
 80014c2:	ed87 0a06 	vstr	s0, [r7, #24]
 80014c6:	edc7 0a05 	vstr	s1, [r7, #20]
 80014ca:	ed87 1a04 	vstr	s2, [r7, #16]
 80014ce:	edc7 1a03 	vstr	s3, [r7, #12]
 80014d2:	ed87 2a02 	vstr	s4, [r7, #8]
 80014d6:	edc7 2a01 	vstr	s5, [r7, #4]
	if (output_upper_bound < output_lower_bound) {
 80014da:	ed97 7a01 	vldr	s14, [r7, #4]
 80014de:	edd7 7a02 	vldr	s15, [r7, #8]
 80014e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ea:	d501      	bpl.n	80014f0 <PID_initialize+0x36>
		return 0;
 80014ec:	2300      	movs	r3, #0
 80014ee:	e024      	b.n	800153a <PID_initialize+0x80>
	}

	ctrl->error = 0.;
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	f04f 0200 	mov.w	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
	ctrl->input = 0.;
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	f04f 0200 	mov.w	r2, #0
 80014fe:	605a      	str	r2, [r3, #4]
	ctrl->output = 0.;
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	f04f 0200 	mov.w	r2, #0
 8001506:	609a      	str	r2, [r3, #8]
	ctrl->reference = reference;
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	69ba      	ldr	r2, [r7, #24]
 800150c:	60da      	str	r2, [r3, #12]

	ctrl->output_upper_bound = output_upper_bound;
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	687a      	ldr	r2, [r7, #4]
 8001512:	611a      	str	r2, [r3, #16]
	ctrl->output_lower_bound = output_lower_bound;
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	68ba      	ldr	r2, [r7, #8]
 8001518:	615a      	str	r2, [r3, #20]

	ctrl->controller.Kp = proportional;
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	697a      	ldr	r2, [r7, #20]
 800151e:	631a      	str	r2, [r3, #48]	; 0x30
	ctrl->controller.Ki = integral;
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	693a      	ldr	r2, [r7, #16]
 8001524:	635a      	str	r2, [r3, #52]	; 0x34
	ctrl->controller.Kd = derivative;
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	68fa      	ldr	r2, [r7, #12]
 800152a:	639a      	str	r2, [r3, #56]	; 0x38

	arm_pid_init_f32(&(ctrl->controller), 1);
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	3318      	adds	r3, #24
 8001530:	2101      	movs	r1, #1
 8001532:	4618      	mov	r0, r3
 8001534:	f015 faba 	bl	8016aac <arm_pid_init_f32>

	return 1;
 8001538:	2301      	movs	r3, #1
}
 800153a:	4618      	mov	r0, r3
 800153c:	3720      	adds	r7, #32
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
	...

08001544 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8001548:	4803      	ldr	r0, [pc, #12]	; (8001558 <_cbSendSystemDesc+0x14>)
 800154a:	f015 f82f 	bl	80165ac <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800154e:	4803      	ldr	r0, [pc, #12]	; (800155c <_cbSendSystemDesc+0x18>)
 8001550:	f015 f82c 	bl	80165ac <SEGGER_SYSVIEW_SendSysDesc>
}
 8001554:	bf00      	nop
 8001556:	bd80      	pop	{r7, pc}
 8001558:	08017768 	.word	0x08017768
 800155c:	08017794 	.word	0x08017794

08001560 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8001564:	4b06      	ldr	r3, [pc, #24]	; (8001580 <SEGGER_SYSVIEW_Conf+0x20>)
 8001566:	6818      	ldr	r0, [r3, #0]
 8001568:	4b05      	ldr	r3, [pc, #20]	; (8001580 <SEGGER_SYSVIEW_Conf+0x20>)
 800156a:	6819      	ldr	r1, [r3, #0]
 800156c:	4b05      	ldr	r3, [pc, #20]	; (8001584 <SEGGER_SYSVIEW_Conf+0x24>)
 800156e:	4a06      	ldr	r2, [pc, #24]	; (8001588 <SEGGER_SYSVIEW_Conf+0x28>)
 8001570:	f014 fb9a 	bl	8015ca8 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8001574:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001578:	f014 fbda 	bl	8015d30 <SEGGER_SYSVIEW_SetRAMBase>
}
 800157c:	bf00      	nop
 800157e:	bd80      	pop	{r7, pc}
 8001580:	20000004 	.word	0x20000004
 8001584:	08001545 	.word	0x08001545
 8001588:	080178c8 	.word	0x080178c8

0800158c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 800158c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800158e:	b085      	sub	sp, #20
 8001590:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8001592:	2300      	movs	r3, #0
 8001594:	607b      	str	r3, [r7, #4]
 8001596:	e048      	b.n	800162a <_cbSendTaskList+0x9e>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
 8001598:	4929      	ldr	r1, [pc, #164]	; (8001640 <_cbSendTaskList+0xb4>)
 800159a:	687a      	ldr	r2, [r7, #4]
 800159c:	4613      	mov	r3, r2
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	4413      	add	r3, r2
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	440b      	add	r3, r1
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4618      	mov	r0, r3
 80015aa:	f012 fec5 	bl	8014338 <uxTaskGetStackHighWaterMark>
 80015ae:	4601      	mov	r1, r0
 80015b0:	4823      	ldr	r0, [pc, #140]	; (8001640 <_cbSendTaskList+0xb4>)
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	4613      	mov	r3, r2
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	4413      	add	r3, r2
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	4403      	add	r3, r0
 80015be:	3310      	adds	r3, #16
 80015c0:	6019      	str	r1, [r3, #0]
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80015c2:	491f      	ldr	r1, [pc, #124]	; (8001640 <_cbSendTaskList+0xb4>)
 80015c4:	687a      	ldr	r2, [r7, #4]
 80015c6:	4613      	mov	r3, r2
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	4413      	add	r3, r2
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	440b      	add	r3, r1
 80015d0:	6818      	ldr	r0, [r3, #0]
 80015d2:	491b      	ldr	r1, [pc, #108]	; (8001640 <_cbSendTaskList+0xb4>)
 80015d4:	687a      	ldr	r2, [r7, #4]
 80015d6:	4613      	mov	r3, r2
 80015d8:	009b      	lsls	r3, r3, #2
 80015da:	4413      	add	r3, r2
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	440b      	add	r3, r1
 80015e0:	3304      	adds	r3, #4
 80015e2:	6819      	ldr	r1, [r3, #0]
 80015e4:	4c16      	ldr	r4, [pc, #88]	; (8001640 <_cbSendTaskList+0xb4>)
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	4613      	mov	r3, r2
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	4413      	add	r3, r2
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	4423      	add	r3, r4
 80015f2:	3308      	adds	r3, #8
 80015f4:	681c      	ldr	r4, [r3, #0]
 80015f6:	4d12      	ldr	r5, [pc, #72]	; (8001640 <_cbSendTaskList+0xb4>)
 80015f8:	687a      	ldr	r2, [r7, #4]
 80015fa:	4613      	mov	r3, r2
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	4413      	add	r3, r2
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	442b      	add	r3, r5
 8001604:	330c      	adds	r3, #12
 8001606:	681d      	ldr	r5, [r3, #0]
 8001608:	4e0d      	ldr	r6, [pc, #52]	; (8001640 <_cbSendTaskList+0xb4>)
 800160a:	687a      	ldr	r2, [r7, #4]
 800160c:	4613      	mov	r3, r2
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	4413      	add	r3, r2
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	4433      	add	r3, r6
 8001616:	3310      	adds	r3, #16
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	9300      	str	r3, [sp, #0]
 800161c:	462b      	mov	r3, r5
 800161e:	4622      	mov	r2, r4
 8001620:	f000 f8b6 	bl	8001790 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	3301      	adds	r3, #1
 8001628:	607b      	str	r3, [r7, #4]
 800162a:	4b06      	ldr	r3, [pc, #24]	; (8001644 <_cbSendTaskList+0xb8>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	687a      	ldr	r2, [r7, #4]
 8001630:	429a      	cmp	r2, r3
 8001632:	d3b1      	bcc.n	8001598 <_cbSendTaskList+0xc>
  }
}
 8001634:	bf00      	nop
 8001636:	bf00      	nop
 8001638:	370c      	adds	r7, #12
 800163a:	46bd      	mov	sp, r7
 800163c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800163e:	bf00      	nop
 8001640:	200014f8 	.word	0x200014f8
 8001644:	20001638 	.word	0x20001638

08001648 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8001648:	b5b0      	push	{r4, r5, r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 800164e:	f012 fb4b 	bl	8013ce8 <xTaskGetTickCountFromISR>
 8001652:	4603      	mov	r3, r0
 8001654:	461a      	mov	r2, r3
 8001656:	f04f 0300 	mov.w	r3, #0
 800165a:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 800165e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001662:	4602      	mov	r2, r0
 8001664:	460b      	mov	r3, r1
 8001666:	f04f 0400 	mov.w	r4, #0
 800166a:	f04f 0500 	mov.w	r5, #0
 800166e:	015d      	lsls	r5, r3, #5
 8001670:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8001674:	0154      	lsls	r4, r2, #5
 8001676:	4622      	mov	r2, r4
 8001678:	462b      	mov	r3, r5
 800167a:	1a12      	subs	r2, r2, r0
 800167c:	eb63 0301 	sbc.w	r3, r3, r1
 8001680:	f04f 0400 	mov.w	r4, #0
 8001684:	f04f 0500 	mov.w	r5, #0
 8001688:	009d      	lsls	r5, r3, #2
 800168a:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 800168e:	0094      	lsls	r4, r2, #2
 8001690:	4622      	mov	r2, r4
 8001692:	462b      	mov	r3, r5
 8001694:	1812      	adds	r2, r2, r0
 8001696:	eb41 0303 	adc.w	r3, r1, r3
 800169a:	f04f 0000 	mov.w	r0, #0
 800169e:	f04f 0100 	mov.w	r1, #0
 80016a2:	00d9      	lsls	r1, r3, #3
 80016a4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80016a8:	00d0      	lsls	r0, r2, #3
 80016aa:	4602      	mov	r2, r0
 80016ac:	460b      	mov	r3, r1
 80016ae:	e9c7 2300 	strd	r2, r3, [r7]
  return Time;
 80016b2:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80016b6:	4610      	mov	r0, r2
 80016b8:	4619      	mov	r1, r3
 80016ba:	3708      	adds	r7, #8
 80016bc:	46bd      	mov	sp, r7
 80016be:	bdb0      	pop	{r4, r5, r7, pc}

080016c0 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b086      	sub	sp, #24
 80016c4:	af02      	add	r7, sp, #8
 80016c6:	60f8      	str	r0, [r7, #12]
 80016c8:	60b9      	str	r1, [r7, #8]
 80016ca:	607a      	str	r2, [r7, #4]
 80016cc:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80016ce:	2205      	movs	r2, #5
 80016d0:	492b      	ldr	r1, [pc, #172]	; (8001780 <SYSVIEW_AddTask+0xc0>)
 80016d2:	68b8      	ldr	r0, [r7, #8]
 80016d4:	f015 fa34 	bl	8016b40 <memcmp>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d04b      	beq.n	8001776 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80016de:	4b29      	ldr	r3, [pc, #164]	; (8001784 <SYSVIEW_AddTask+0xc4>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	2b0f      	cmp	r3, #15
 80016e4:	d903      	bls.n	80016ee <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80016e6:	4828      	ldr	r0, [pc, #160]	; (8001788 <SYSVIEW_AddTask+0xc8>)
 80016e8:	f015 f984 	bl	80169f4 <SEGGER_SYSVIEW_Warn>
    return;
 80016ec:	e044      	b.n	8001778 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80016ee:	4b25      	ldr	r3, [pc, #148]	; (8001784 <SYSVIEW_AddTask+0xc4>)
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	4926      	ldr	r1, [pc, #152]	; (800178c <SYSVIEW_AddTask+0xcc>)
 80016f4:	4613      	mov	r3, r2
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	4413      	add	r3, r2
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	440b      	add	r3, r1
 80016fe:	68fa      	ldr	r2, [r7, #12]
 8001700:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8001702:	4b20      	ldr	r3, [pc, #128]	; (8001784 <SYSVIEW_AddTask+0xc4>)
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	4921      	ldr	r1, [pc, #132]	; (800178c <SYSVIEW_AddTask+0xcc>)
 8001708:	4613      	mov	r3, r2
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	4413      	add	r3, r2
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	440b      	add	r3, r1
 8001712:	3304      	adds	r3, #4
 8001714:	68ba      	ldr	r2, [r7, #8]
 8001716:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8001718:	4b1a      	ldr	r3, [pc, #104]	; (8001784 <SYSVIEW_AddTask+0xc4>)
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	491b      	ldr	r1, [pc, #108]	; (800178c <SYSVIEW_AddTask+0xcc>)
 800171e:	4613      	mov	r3, r2
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	4413      	add	r3, r2
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	440b      	add	r3, r1
 8001728:	3308      	adds	r3, #8
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 800172e:	4b15      	ldr	r3, [pc, #84]	; (8001784 <SYSVIEW_AddTask+0xc4>)
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	4916      	ldr	r1, [pc, #88]	; (800178c <SYSVIEW_AddTask+0xcc>)
 8001734:	4613      	mov	r3, r2
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	4413      	add	r3, r2
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	440b      	add	r3, r1
 800173e:	330c      	adds	r3, #12
 8001740:	683a      	ldr	r2, [r7, #0]
 8001742:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8001744:	4b0f      	ldr	r3, [pc, #60]	; (8001784 <SYSVIEW_AddTask+0xc4>)
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	4910      	ldr	r1, [pc, #64]	; (800178c <SYSVIEW_AddTask+0xcc>)
 800174a:	4613      	mov	r3, r2
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	4413      	add	r3, r2
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	440b      	add	r3, r1
 8001754:	3310      	adds	r3, #16
 8001756:	69ba      	ldr	r2, [r7, #24]
 8001758:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800175a:	4b0a      	ldr	r3, [pc, #40]	; (8001784 <SYSVIEW_AddTask+0xc4>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	3301      	adds	r3, #1
 8001760:	4a08      	ldr	r2, [pc, #32]	; (8001784 <SYSVIEW_AddTask+0xc4>)
 8001762:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8001764:	69bb      	ldr	r3, [r7, #24]
 8001766:	9300      	str	r3, [sp, #0]
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	68b9      	ldr	r1, [r7, #8]
 800176e:	68f8      	ldr	r0, [r7, #12]
 8001770:	f000 f80e 	bl	8001790 <SYSVIEW_SendTaskInfo>
 8001774:	e000      	b.n	8001778 <SYSVIEW_AddTask+0xb8>
    return;
 8001776:	bf00      	nop

}
 8001778:	3710      	adds	r7, #16
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	080177a4 	.word	0x080177a4
 8001784:	20001638 	.word	0x20001638
 8001788:	080177ac 	.word	0x080177ac
 800178c:	200014f8 	.word	0x200014f8

08001790 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8001790:	b580      	push	{r7, lr}
 8001792:	b08a      	sub	sp, #40	; 0x28
 8001794:	af00      	add	r7, sp, #0
 8001796:	60f8      	str	r0, [r7, #12]
 8001798:	60b9      	str	r1, [r7, #8]
 800179a:	607a      	str	r2, [r7, #4]
 800179c:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800179e:	f107 0314 	add.w	r3, r7, #20
 80017a2:	2214      	movs	r2, #20
 80017a4:	2100      	movs	r1, #0
 80017a6:	4618      	mov	r0, r3
 80017a8:	f015 f9e6 	bl	8016b78 <memset>
  TaskInfo.TaskID     = TaskID;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 80017bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017be:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80017c0:	f107 0314 	add.w	r3, r7, #20
 80017c4:	4618      	mov	r0, r3
 80017c6:	f014 fdf9 	bl	80163bc <SEGGER_SYSVIEW_SendTaskInfo>
}
 80017ca:	bf00      	nop
 80017cc:	3728      	adds	r7, #40	; 0x28
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}

080017d2 <dec_tim>:

void toggle_SC() {
	SIM_state.SC_probe_timer = 1;
}

int dec_tim(uint8_t *ptr) {
 80017d2:	b480      	push	{r7}
 80017d4:	b083      	sub	sp, #12
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	6078      	str	r0, [r7, #4]
	if (ptr[0] > 0) {
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d00a      	beq.n	80017f8 <dec_tim+0x26>
		ptr--;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	3b01      	subs	r3, #1
 80017e6:	607b      	str	r3, [r7, #4]
		return !ptr[0];
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	bf0c      	ite	eq
 80017f0:	2301      	moveq	r3, #1
 80017f2:	2300      	movne	r3, #0
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	e000      	b.n	80017fa <dec_tim+0x28>
	}
	return 0;
 80017f8:	2300      	movs	r3, #0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr

08001806 <initialize_SIM>:

void initialize_SIM() {
 8001806:	b580      	push	{r7, lr}
 8001808:	af00      	add	r7, sp, #0
	Accumulator_initialize();
 800180a:	f002 fe8d 	bl	8004528 <Accumulator_initialize>
	Charger_initialize();
 800180e:	f004 fea9 	bl	8006564 <Charger_initialize>
}
 8001812:	bf00      	nop
 8001814:	bd80      	pop	{r7, pc}
	...

08001818 <SIM_step>:

void SIM_step() {
 8001818:	b5b0      	push	{r4, r5, r7, lr}
 800181a:	b08e      	sub	sp, #56	; 0x38
 800181c:	af00      	add	r7, sp, #0
	/* INJECT ERROR */
	if (dec_tim(&SIM_state.SC_probe_timer)) {
 800181e:	4872      	ldr	r0, [pc, #456]	; (80019e8 <SIM_step+0x1d0>)
 8001820:	f7ff ffd7 	bl	80017d2 <dec_tim>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d006      	beq.n	8001838 <SIM_step+0x20>
		SIM_state.SC_probe ^= 1;
 800182a:	4b70      	ldr	r3, [pc, #448]	; (80019ec <SIM_step+0x1d4>)
 800182c:	78db      	ldrb	r3, [r3, #3]
 800182e:	f083 0301 	eor.w	r3, r3, #1
 8001832:	b2da      	uxtb	r2, r3
 8001834:	4b6d      	ldr	r3, [pc, #436]	; (80019ec <SIM_step+0x1d4>)
 8001836:	70da      	strb	r2, [r3, #3]
	}

	/* INJECT ERROR */
	if (SIM_state.ams_error_latched || SIM_state.imd_error_latched) {
 8001838:	4b6c      	ldr	r3, [pc, #432]	; (80019ec <SIM_step+0x1d4>)
 800183a:	7bdb      	ldrb	r3, [r3, #15]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d103      	bne.n	8001848 <SIM_step+0x30>
 8001840:	4b6a      	ldr	r3, [pc, #424]	; (80019ec <SIM_step+0x1d4>)
 8001842:	7b9b      	ldrb	r3, [r3, #14]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d002      	beq.n	800184e <SIM_step+0x36>
		SIM_state.SC_probe = 0;
 8001848:	4b68      	ldr	r3, [pc, #416]	; (80019ec <SIM_step+0x1d4>)
 800184a:	2200      	movs	r2, #0
 800184c:	70da      	strb	r2, [r3, #3]
	}

	if (SIM_state.SC_probe == 0) {
 800184e:	4b67      	ldr	r3, [pc, #412]	; (80019ec <SIM_step+0x1d4>)
 8001850:	78db      	ldrb	r3, [r3, #3]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d109      	bne.n	800186a <SIM_step+0x52>
		SIM_state.air_minus_state = 0;
 8001856:	4b65      	ldr	r3, [pc, #404]	; (80019ec <SIM_step+0x1d4>)
 8001858:	2200      	movs	r2, #0
 800185a:	725a      	strb	r2, [r3, #9]
		SIM_state.air_plus_state = 0;
 800185c:	4b63      	ldr	r3, [pc, #396]	; (80019ec <SIM_step+0x1d4>)
 800185e:	2200      	movs	r2, #0
 8001860:	719a      	strb	r2, [r3, #6]
		SIM_state.precharge_state = 0;
 8001862:	4b62      	ldr	r3, [pc, #392]	; (80019ec <SIM_step+0x1d4>)
 8001864:	2200      	movs	r2, #0
 8001866:	731a      	strb	r2, [r3, #12]
 8001868:	e01d      	b.n	80018a6 <SIM_step+0x8e>

	} else {
		/* INJECT ERROR */
		if (dec_tim(&SIM_state.air_minus_state_timer)) {
 800186a:	4861      	ldr	r0, [pc, #388]	; (80019f0 <SIM_step+0x1d8>)
 800186c:	f7ff ffb1 	bl	80017d2 <dec_tim>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d003      	beq.n	800187e <SIM_step+0x66>
			SIM_state.air_minus_state = SIM_state.set_air_minus_state;
 8001876:	4b5d      	ldr	r3, [pc, #372]	; (80019ec <SIM_step+0x1d4>)
 8001878:	7a1a      	ldrb	r2, [r3, #8]
 800187a:	4b5c      	ldr	r3, [pc, #368]	; (80019ec <SIM_step+0x1d4>)
 800187c:	725a      	strb	r2, [r3, #9]
		}

		/* INJECT ERROR */
		if (dec_tim(&SIM_state.air_plus_state_timer)) {
 800187e:	485d      	ldr	r0, [pc, #372]	; (80019f4 <SIM_step+0x1dc>)
 8001880:	f7ff ffa7 	bl	80017d2 <dec_tim>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d003      	beq.n	8001892 <SIM_step+0x7a>
			SIM_state.air_plus_state = SIM_state.set_air_plus_state;
 800188a:	4b58      	ldr	r3, [pc, #352]	; (80019ec <SIM_step+0x1d4>)
 800188c:	795a      	ldrb	r2, [r3, #5]
 800188e:	4b57      	ldr	r3, [pc, #348]	; (80019ec <SIM_step+0x1d4>)
 8001890:	719a      	strb	r2, [r3, #6]
		}

		/* INJECT ERROR */
		if (dec_tim(&SIM_state.precharge_state_timer)) {
 8001892:	4859      	ldr	r0, [pc, #356]	; (80019f8 <SIM_step+0x1e0>)
 8001894:	f7ff ff9d 	bl	80017d2 <dec_tim>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d003      	beq.n	80018a6 <SIM_step+0x8e>
			SIM_state.precharge_state = SIM_state.set_precharge_state;
 800189e:	4b53      	ldr	r3, [pc, #332]	; (80019ec <SIM_step+0x1d4>)
 80018a0:	7ada      	ldrb	r2, [r3, #11]
 80018a2:	4b52      	ldr	r3, [pc, #328]	; (80019ec <SIM_step+0x1d4>)
 80018a4:	731a      	strb	r2, [r3, #12]
		}
	}

	SIM_state.U_accumulator = Accumulator_Y.VoltageSum;
 80018a6:	4b55      	ldr	r3, [pc, #340]	; (80019fc <SIM_step+0x1e4>)
 80018a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ac:	4610      	mov	r0, r2
 80018ae:	4619      	mov	r1, r3
 80018b0:	f7ff f98c 	bl	8000bcc <__aeabi_d2f>
 80018b4:	4603      	mov	r3, r0
 80018b6:	4a4d      	ldr	r2, [pc, #308]	; (80019ec <SIM_step+0x1d4>)
 80018b8:	6113      	str	r3, [r2, #16]

	uint8_t connected = 0;
 80018ba:	2300      	movs	r3, #0
 80018bc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t pconnected = 0;
 80018c0:	2300      	movs	r3, #0
 80018c2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	if (SIM_state.air_plus_state && SIM_state.air_minus_state) {
 80018c6:	4b49      	ldr	r3, [pc, #292]	; (80019ec <SIM_step+0x1d4>)
 80018c8:	799b      	ldrb	r3, [r3, #6]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d006      	beq.n	80018dc <SIM_step+0xc4>
 80018ce:	4b47      	ldr	r3, [pc, #284]	; (80019ec <SIM_step+0x1d4>)
 80018d0:	7a5b      	ldrb	r3, [r3, #9]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d002      	beq.n	80018dc <SIM_step+0xc4>
		connected = 1;
 80018d6:	2301      	movs	r3, #1
 80018d8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	}
	if (SIM_state.precharge_state && SIM_state.air_minus_state) {
 80018dc:	4b43      	ldr	r3, [pc, #268]	; (80019ec <SIM_step+0x1d4>)
 80018de:	7b1b      	ldrb	r3, [r3, #12]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d006      	beq.n	80018f2 <SIM_step+0xda>
 80018e4:	4b41      	ldr	r3, [pc, #260]	; (80019ec <SIM_step+0x1d4>)
 80018e6:	7a5b      	ldrb	r3, [r3, #9]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d002      	beq.n	80018f2 <SIM_step+0xda>
		pconnected = 1;
 80018ec:	2301      	movs	r3, #1
 80018ee:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	}

	uint8_t is_dbu = 1;
 80018f2:	2301      	movs	r3, #1
 80018f4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	uint8_t is_cu = 0;
 80018f8:	2300      	movs	r3, #0
 80018fa:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	if (is_dbu) {
 80018fe:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001902:	2b00      	cmp	r3, #0
 8001904:	f000 8093 	beq.w	8001a2e <SIM_step+0x216>
		if (dec_tim(&SIM_state.msg_timer)) {
 8001908:	483d      	ldr	r0, [pc, #244]	; (8001a00 <SIM_step+0x1e8>)
 800190a:	f7ff ff62 	bl	80017d2 <dec_tim>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d00c      	beq.n	800192e <SIM_step+0x116>
			SIM_state.dbu = 1;
 8001914:	4b35      	ldr	r3, [pc, #212]	; (80019ec <SIM_step+0x1d4>)
 8001916:	2201      	movs	r2, #1
 8001918:	701a      	strb	r2, [r3, #0]
			dbu_status_1_t dbu_status_1;
			dbu_status_1.activate_ts_button = 1;
 800191a:	2301      	movs	r3, #1
 800191c:	723b      	strb	r3, [r7, #8]
			xQueueOverwrite(dbu_status_1_queue, &dbu_status_1);
 800191e:	4b39      	ldr	r3, [pc, #228]	; (8001a04 <SIM_step+0x1ec>)
 8001920:	6818      	ldr	r0, [r3, #0]
 8001922:	f107 0108 	add.w	r1, r7, #8
 8001926:	2302      	movs	r3, #2
 8001928:	2200      	movs	r2, #0
 800192a:	f011 f9e9 	bl	8012d00 <xQueueGenericSend>
		}

		/* INJECT ERROR */
		if (pconnected) {
 800192e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001932:	2b00      	cmp	r3, #0
 8001934:	d027      	beq.n	8001986 <SIM_step+0x16e>
			SIM_state.U_vehicle += (SIM_state.U_accumulator
 8001936:	4b2d      	ldr	r3, [pc, #180]	; (80019ec <SIM_step+0x1d4>)
 8001938:	695b      	ldr	r3, [r3, #20]
 800193a:	4618      	mov	r0, r3
 800193c:	f7fe fdf6 	bl	800052c <__aeabi_f2d>
 8001940:	4604      	mov	r4, r0
 8001942:	460d      	mov	r5, r1
 8001944:	4b29      	ldr	r3, [pc, #164]	; (80019ec <SIM_step+0x1d4>)
 8001946:	ed93 7a04 	vldr	s14, [r3, #16]
					- SIM_state.U_vehicle) * 0.6;
 800194a:	4b28      	ldr	r3, [pc, #160]	; (80019ec <SIM_step+0x1d4>)
 800194c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001950:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001954:	ee17 0a90 	vmov	r0, s15
 8001958:	f7fe fde8 	bl	800052c <__aeabi_f2d>
 800195c:	a320      	add	r3, pc, #128	; (adr r3, 80019e0 <SIM_step+0x1c8>)
 800195e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001962:	f7fe fe3b 	bl	80005dc <__aeabi_dmul>
 8001966:	4602      	mov	r2, r0
 8001968:	460b      	mov	r3, r1
			SIM_state.U_vehicle += (SIM_state.U_accumulator
 800196a:	4620      	mov	r0, r4
 800196c:	4629      	mov	r1, r5
 800196e:	f7fe fc7f 	bl	8000270 <__adddf3>
 8001972:	4602      	mov	r2, r0
 8001974:	460b      	mov	r3, r1
 8001976:	4610      	mov	r0, r2
 8001978:	4619      	mov	r1, r3
 800197a:	f7ff f927 	bl	8000bcc <__aeabi_d2f>
 800197e:	4603      	mov	r3, r0
 8001980:	4a1a      	ldr	r2, [pc, #104]	; (80019ec <SIM_step+0x1d4>)
 8001982:	6153      	str	r3, [r2, #20]
 8001984:	e053      	b.n	8001a2e <SIM_step+0x216>
		} else {
			if (connected) {
 8001986:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800198a:	2b00      	cmp	r3, #0
 800198c:	d03c      	beq.n	8001a08 <SIM_step+0x1f0>
				SIM_state.U_vehicle += (SIM_state.U_accumulator
 800198e:	4b17      	ldr	r3, [pc, #92]	; (80019ec <SIM_step+0x1d4>)
 8001990:	695b      	ldr	r3, [r3, #20]
 8001992:	4618      	mov	r0, r3
 8001994:	f7fe fdca 	bl	800052c <__aeabi_f2d>
 8001998:	4604      	mov	r4, r0
 800199a:	460d      	mov	r5, r1
 800199c:	4b13      	ldr	r3, [pc, #76]	; (80019ec <SIM_step+0x1d4>)
 800199e:	ed93 7a04 	vldr	s14, [r3, #16]
						- SIM_state.U_vehicle) * 0.6;
 80019a2:	4b12      	ldr	r3, [pc, #72]	; (80019ec <SIM_step+0x1d4>)
 80019a4:	edd3 7a05 	vldr	s15, [r3, #20]
 80019a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019ac:	ee17 0a90 	vmov	r0, s15
 80019b0:	f7fe fdbc 	bl	800052c <__aeabi_f2d>
 80019b4:	a30a      	add	r3, pc, #40	; (adr r3, 80019e0 <SIM_step+0x1c8>)
 80019b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ba:	f7fe fe0f 	bl	80005dc <__aeabi_dmul>
 80019be:	4602      	mov	r2, r0
 80019c0:	460b      	mov	r3, r1
				SIM_state.U_vehicle += (SIM_state.U_accumulator
 80019c2:	4620      	mov	r0, r4
 80019c4:	4629      	mov	r1, r5
 80019c6:	f7fe fc53 	bl	8000270 <__adddf3>
 80019ca:	4602      	mov	r2, r0
 80019cc:	460b      	mov	r3, r1
 80019ce:	4610      	mov	r0, r2
 80019d0:	4619      	mov	r1, r3
 80019d2:	f7ff f8fb 	bl	8000bcc <__aeabi_d2f>
 80019d6:	4603      	mov	r3, r0
 80019d8:	4a04      	ldr	r2, [pc, #16]	; (80019ec <SIM_step+0x1d4>)
 80019da:	6153      	str	r3, [r2, #20]
 80019dc:	e027      	b.n	8001a2e <SIM_step+0x216>
 80019de:	bf00      	nop
 80019e0:	33333333 	.word	0x33333333
 80019e4:	3fe33333 	.word	0x3fe33333
 80019e8:	2001b480 	.word	0x2001b480
 80019ec:	2001b47c 	.word	0x2001b47c
 80019f0:	2001b486 	.word	0x2001b486
 80019f4:	2001b483 	.word	0x2001b483
 80019f8:	2001b489 	.word	0x2001b489
 80019fc:	2001bbf0 	.word	0x2001bbf0
 8001a00:	2001b47e 	.word	0x2001b47e
 8001a04:	2001b420 	.word	0x2001b420
			} else {
				SIM_state.U_vehicle *= 0.4;
 8001a08:	4b79      	ldr	r3, [pc, #484]	; (8001bf0 <SIM_step+0x3d8>)
 8001a0a:	695b      	ldr	r3, [r3, #20]
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7fe fd8d 	bl	800052c <__aeabi_f2d>
 8001a12:	a373      	add	r3, pc, #460	; (adr r3, 8001be0 <SIM_step+0x3c8>)
 8001a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a18:	f7fe fde0 	bl	80005dc <__aeabi_dmul>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	460b      	mov	r3, r1
 8001a20:	4610      	mov	r0, r2
 8001a22:	4619      	mov	r1, r3
 8001a24:	f7ff f8d2 	bl	8000bcc <__aeabi_d2f>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	4a71      	ldr	r2, [pc, #452]	; (8001bf0 <SIM_step+0x3d8>)
 8001a2c:	6153      	str	r3, [r2, #20]
			}
		}
	}
	if (is_cu) {
 8001a2e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d046      	beq.n	8001ac4 <SIM_step+0x2ac>
		if (dec_tim(&SIM_state.msg_timer)) {
 8001a36:	486f      	ldr	r0, [pc, #444]	; (8001bf4 <SIM_step+0x3dc>)
 8001a38:	f7ff fecb 	bl	80017d2 <dec_tim>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d00b      	beq.n	8001a5a <SIM_step+0x242>
			SIM_state.cu = 1;
 8001a42:	4b6b      	ldr	r3, [pc, #428]	; (8001bf0 <SIM_step+0x3d8>)
 8001a44:	2201      	movs	r2, #1
 8001a46:	705a      	strb	r2, [r3, #1]
			dbu_status_1_t dbu_status_1;
			dbu_status_1.ready_to_drive_button = 1;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	707b      	strb	r3, [r7, #1]
			xQueueOverwrite(dbu_status_1_queue, &dbu_status_1);
 8001a4c:	4b6a      	ldr	r3, [pc, #424]	; (8001bf8 <SIM_step+0x3e0>)
 8001a4e:	6818      	ldr	r0, [r3, #0]
 8001a50:	4639      	mov	r1, r7
 8001a52:	2302      	movs	r3, #2
 8001a54:	2200      	movs	r2, #0
 8001a56:	f011 f953 	bl	8012d00 <xQueueGenericSend>
		}

		/* INJECT ERROR */
		SIM_state.U_vehicle += (SIM_state.cv_level - SIM_state.U_vehicle) * 0.9;
 8001a5a:	4b65      	ldr	r3, [pc, #404]	; (8001bf0 <SIM_step+0x3d8>)
 8001a5c:	695b      	ldr	r3, [r3, #20]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7fe fd64 	bl	800052c <__aeabi_f2d>
 8001a64:	4604      	mov	r4, r0
 8001a66:	460d      	mov	r5, r1
 8001a68:	4b61      	ldr	r3, [pc, #388]	; (8001bf0 <SIM_step+0x3d8>)
 8001a6a:	ed93 7a08 	vldr	s14, [r3, #32]
 8001a6e:	4b60      	ldr	r3, [pc, #384]	; (8001bf0 <SIM_step+0x3d8>)
 8001a70:	edd3 7a05 	vldr	s15, [r3, #20]
 8001a74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a78:	ee17 0a90 	vmov	r0, s15
 8001a7c:	f7fe fd56 	bl	800052c <__aeabi_f2d>
 8001a80:	a359      	add	r3, pc, #356	; (adr r3, 8001be8 <SIM_step+0x3d0>)
 8001a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a86:	f7fe fda9 	bl	80005dc <__aeabi_dmul>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	4620      	mov	r0, r4
 8001a90:	4629      	mov	r1, r5
 8001a92:	f7fe fbed 	bl	8000270 <__adddf3>
 8001a96:	4602      	mov	r2, r0
 8001a98:	460b      	mov	r3, r1
 8001a9a:	4610      	mov	r0, r2
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	f7ff f895 	bl	8000bcc <__aeabi_d2f>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	4a52      	ldr	r2, [pc, #328]	; (8001bf0 <SIM_step+0x3d8>)
 8001aa6:	6153      	str	r3, [r2, #20]

		if (connected || pconnected) {
 8001aa8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d103      	bne.n	8001ab8 <SIM_step+0x2a0>
 8001ab0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d005      	beq.n	8001ac4 <SIM_step+0x2ac>
			Accumulator_U.Current = Charger_Y.Current;
 8001ab8:	4b50      	ldr	r3, [pc, #320]	; (8001bfc <SIM_step+0x3e4>)
 8001aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001abe:	4950      	ldr	r1, [pc, #320]	; (8001c00 <SIM_step+0x3e8>)
 8001ac0:	e9c1 2300 	strd	r2, r3, [r1]
		}
	}

	GPIO_t GPIO;
	GPIO.AIR_minus_closed = SIM_state.air_minus_state;
 8001ac4:	4b4a      	ldr	r3, [pc, #296]	; (8001bf0 <SIM_step+0x3d8>)
 8001ac6:	7a5b      	ldrb	r3, [r3, #9]
 8001ac8:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	GPIO.AIR_plus_closed = SIM_state.air_plus_state;
 8001acc:	4b48      	ldr	r3, [pc, #288]	; (8001bf0 <SIM_step+0x3d8>)
 8001ace:	799b      	ldrb	r3, [r3, #6]
 8001ad0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	GPIO.precharge_closed = SIM_state.precharge_state;
 8001ad4:	4b46      	ldr	r3, [pc, #280]	; (8001bf0 <SIM_step+0x3d8>)
 8001ad6:	7b1b      	ldrb	r3, [r3, #12]
 8001ad8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	GPIO.AMS_error_latched = SIM_state.ams_error_latched;
 8001adc:	4b44      	ldr	r3, [pc, #272]	; (8001bf0 <SIM_step+0x3d8>)
 8001ade:	7bdb      	ldrb	r3, [r3, #15]
 8001ae0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	GPIO.IMD_error_latched = SIM_state.imd_error_latched;
 8001ae4:	4b42      	ldr	r3, [pc, #264]	; (8001bf0 <SIM_step+0x3d8>)
 8001ae6:	7b9b      	ldrb	r3, [r3, #14]
 8001ae8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	GPIO.SC_probe = SIM_state.SC_probe;
 8001aec:	4b40      	ldr	r3, [pc, #256]	; (8001bf0 <SIM_step+0x3d8>)
 8001aee:	78db      	ldrb	r3, [r3, #3]
 8001af0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	/* INJECT ERROR */
	GPIO.IMD_ok = 1;
 8001af4:	2301      	movs	r3, #1
 8001af6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	xQueueOverwrite(GPIO_queue, &GPIO);
 8001afa:	4b42      	ldr	r3, [pc, #264]	; (8001c04 <SIM_step+0x3ec>)
 8001afc:	6818      	ldr	r0, [r3, #0]
 8001afe:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001b02:	2302      	movs	r3, #2
 8001b04:	2200      	movs	r2, #0
 8001b06:	f011 f8fb 	bl	8012d00 <xQueueGenericSend>

	SIM_state.I_ts = Accumulator_Y.DisplayCurrent;
 8001b0a:	4b3f      	ldr	r3, [pc, #252]	; (8001c08 <SIM_step+0x3f0>)
 8001b0c:	f603 33d8 	addw	r3, r3, #3032	; 0xbd8
 8001b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b14:	4610      	mov	r0, r2
 8001b16:	4619      	mov	r1, r3
 8001b18:	f7ff f858 	bl	8000bcc <__aeabi_d2f>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	4a34      	ldr	r2, [pc, #208]	; (8001bf0 <SIM_step+0x3d8>)
 8001b20:	6193      	str	r3, [r2, #24]

	ivt_msg_result_i_t I;
	ivt_msg_result_u1_t U1;
	ivt_msg_result_u3_t U3;

	I.i_ts = Accumulator_Y.DisplayCurrent;
 8001b22:	4b39      	ldr	r3, [pc, #228]	; (8001c08 <SIM_step+0x3f0>)
 8001b24:	f603 33d8 	addw	r3, r3, #3032	; 0xbd8
 8001b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b2c:	e9c7 2308 	strd	r2, r3, [r7, #32]
	U1.u_cells = SIM_state.U_accumulator;
 8001b30:	4b2f      	ldr	r3, [pc, #188]	; (8001bf0 <SIM_step+0x3d8>)
 8001b32:	691b      	ldr	r3, [r3, #16]
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7fe fcf9 	bl	800052c <__aeabi_f2d>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	e9c7 2306 	strd	r2, r3, [r7, #24]
	U3.u_vehicle = SIM_state.U_vehicle;
 8001b42:	4b2b      	ldr	r3, [pc, #172]	; (8001bf0 <SIM_step+0x3d8>)
 8001b44:	695b      	ldr	r3, [r3, #20]
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7fe fcf0 	bl	800052c <__aeabi_f2d>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	460b      	mov	r3, r1
 8001b50:	e9c7 2304 	strd	r2, r3, [r7, #16]

	xQueueOverwrite(ivt_msg_result_i_queue, &I);
 8001b54:	4b2d      	ldr	r3, [pc, #180]	; (8001c0c <SIM_step+0x3f4>)
 8001b56:	6818      	ldr	r0, [r3, #0]
 8001b58:	f107 0120 	add.w	r1, r7, #32
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	2200      	movs	r2, #0
 8001b60:	f011 f8ce 	bl	8012d00 <xQueueGenericSend>
	xQueueOverwrite(ivt_msg_result_u1_queue, &U1);
 8001b64:	4b2a      	ldr	r3, [pc, #168]	; (8001c10 <SIM_step+0x3f8>)
 8001b66:	6818      	ldr	r0, [r3, #0]
 8001b68:	f107 0118 	add.w	r1, r7, #24
 8001b6c:	2302      	movs	r3, #2
 8001b6e:	2200      	movs	r2, #0
 8001b70:	f011 f8c6 	bl	8012d00 <xQueueGenericSend>
	xQueueOverwrite(ivt_msg_result_u3_queue, &U3);
 8001b74:	4b27      	ldr	r3, [pc, #156]	; (8001c14 <SIM_step+0x3fc>)
 8001b76:	6818      	ldr	r0, [r3, #0]
 8001b78:	f107 0110 	add.w	r1, r7, #16
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	2200      	movs	r2, #0
 8001b80:	f011 f8be 	bl	8012d00 <xQueueGenericSend>

	Charger_U.CV_true = 1;
 8001b84:	4924      	ldr	r1, [pc, #144]	; (8001c18 <SIM_step+0x400>)
 8001b86:	f04f 0200 	mov.w	r2, #0
 8001b8a:	4b24      	ldr	r3, [pc, #144]	; (8001c1c <SIM_step+0x404>)
 8001b8c:	e9c1 2304 	strd	r2, r3, [r1, #16]
	Charger_U.CC_true = 1;
 8001b90:	4921      	ldr	r1, [pc, #132]	; (8001c18 <SIM_step+0x400>)
 8001b92:	f04f 0200 	mov.w	r2, #0
 8001b96:	4b21      	ldr	r3, [pc, #132]	; (8001c1c <SIM_step+0x404>)
 8001b98:	e9c1 2300 	strd	r2, r3, [r1]
	Charger_U.CV_level = SIM_state.cv_level;
 8001b9c:	4b14      	ldr	r3, [pc, #80]	; (8001bf0 <SIM_step+0x3d8>)
 8001b9e:	6a1b      	ldr	r3, [r3, #32]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7fe fcc3 	bl	800052c <__aeabi_f2d>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	460b      	mov	r3, r1
 8001baa:	491b      	ldr	r1, [pc, #108]	; (8001c18 <SIM_step+0x400>)
 8001bac:	e9c1 2306 	strd	r2, r3, [r1, #24]
	Charger_U.CC_level = SIM_state.cc_level;
 8001bb0:	4b0f      	ldr	r3, [pc, #60]	; (8001bf0 <SIM_step+0x3d8>)
 8001bb2:	69db      	ldr	r3, [r3, #28]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7fe fcb9 	bl	800052c <__aeabi_f2d>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	4916      	ldr	r1, [pc, #88]	; (8001c18 <SIM_step+0x400>)
 8001bc0:	e9c1 2302 	strd	r2, r3, [r1, #8]
	Charger_U.y = Accumulator_Y.VoltageSum;
 8001bc4:	4b10      	ldr	r3, [pc, #64]	; (8001c08 <SIM_step+0x3f0>)
 8001bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bca:	4913      	ldr	r1, [pc, #76]	; (8001c18 <SIM_step+0x400>)
 8001bcc:	e9c1 2308 	strd	r2, r3, [r1, #32]


	Accumulator_step();
 8001bd0:	f002 f8aa 	bl	8003d28 <Accumulator_step>
	Charger_step();
 8001bd4:	f004 fc7c 	bl	80064d0 <Charger_step>

}
 8001bd8:	bf00      	nop
 8001bda:	3738      	adds	r7, #56	; 0x38
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bdb0      	pop	{r4, r5, r7, pc}
 8001be0:	9999999a 	.word	0x9999999a
 8001be4:	3fd99999 	.word	0x3fd99999
 8001be8:	cccccccd 	.word	0xcccccccd
 8001bec:	3feccccc 	.word	0x3feccccc
 8001bf0:	2001b47c 	.word	0x2001b47c
 8001bf4:	2001b47e 	.word	0x2001b47e
 8001bf8:	2001b420 	.word	0x2001b420
 8001bfc:	2001da08 	.word	0x2001da08
 8001c00:	2001c9b0 	.word	0x2001c9b0
 8001c04:	2001b448 	.word	0x2001b448
 8001c08:	2001bbf0 	.word	0x2001bbf0
 8001c0c:	2001b438 	.word	0x2001b438
 8001c10:	2001b444 	.word	0x2001b444
 8001c14:	2001b42c 	.word	0x2001b42c
 8001c18:	2001da10 	.word	0x2001da10
 8001c1c:	3ff00000 	.word	0x3ff00000

08001c20 <state_machine_step>:
/*
 * @Brief	X
 * @Param	Y
 * @Retval	Z
 */
void state_machine_step(void) {
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
	static __called = 0;
	if (!__called++) {
 8001c24:	4b32      	ldr	r3, [pc, #200]	; (8001cf0 <state_machine_step+0xd0>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	1c5a      	adds	r2, r3, #1
 8001c2a:	4931      	ldr	r1, [pc, #196]	; (8001cf0 <state_machine_step+0xd0>)
 8001c2c:	600a      	str	r2, [r1, #0]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d102      	bne.n	8001c38 <state_machine_step+0x18>
		state = STATE_ENTRY;
 8001c32:	4b30      	ldr	r3, [pc, #192]	; (8001cf4 <state_machine_step+0xd4>)
 8001c34:	2201      	movs	r2, #1
 8001c36:	701a      	strb	r2, [r3, #0]
	}

	switch (state) {
 8001c38:	4b2e      	ldr	r3, [pc, #184]	; (8001cf4 <state_machine_step+0xd4>)
 8001c3a:	f993 3000 	ldrsb.w	r3, [r3]
 8001c3e:	3301      	adds	r3, #1
 8001c40:	2b07      	cmp	r3, #7
 8001c42:	d844      	bhi.n	8001cce <state_machine_step+0xae>
 8001c44:	a201      	add	r2, pc, #4	; (adr r2, 8001c4c <state_machine_step+0x2c>)
 8001c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c4a:	bf00      	nop
 8001c4c:	08001c6d 	.word	0x08001c6d
 8001c50:	08001ccf 	.word	0x08001ccf
 8001c54:	08001c7b 	.word	0x08001c7b
 8001c58:	08001c89 	.word	0x08001c89
 8001c5c:	08001c97 	.word	0x08001c97
 8001c60:	08001ca5 	.word	0x08001ca5
 8001c64:	08001cb3 	.word	0x08001cb3
 8001c68:	08001cc1 	.word	0x08001cc1
	case STATE_ERROR:
		state = state_error_step();
 8001c6c:	f000 f84a 	bl	8001d04 <state_error_step>
 8001c70:	4603      	mov	r3, r0
 8001c72:	461a      	mov	r2, r3
 8001c74:	4b1f      	ldr	r3, [pc, #124]	; (8001cf4 <state_machine_step+0xd4>)
 8001c76:	701a      	strb	r2, [r3, #0]
		break;
 8001c78:	e029      	b.n	8001cce <state_machine_step+0xae>
	case STATE_ENTRY:
		state = state_entry_step();
 8001c7a:	f000 f848 	bl	8001d0e <state_entry_step>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	461a      	mov	r2, r3
 8001c82:	4b1c      	ldr	r3, [pc, #112]	; (8001cf4 <state_machine_step+0xd4>)
 8001c84:	701a      	strb	r2, [r3, #0]
		break;
 8001c86:	e022      	b.n	8001cce <state_machine_step+0xae>
	case STATE_IDLE:
		state = state_idle_step();
 8001c88:	f000 f84a 	bl	8001d20 <state_idle_step>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	461a      	mov	r2, r3
 8001c90:	4b18      	ldr	r3, [pc, #96]	; (8001cf4 <state_machine_step+0xd4>)
 8001c92:	701a      	strb	r2, [r3, #0]
		break;
 8001c94:	e01b      	b.n	8001cce <state_machine_step+0xae>
	case STATE_PRECHARGE_DRIVE:
		state = state_precharge_drive_step();
 8001c96:	f000 f86f 	bl	8001d78 <state_precharge_drive_step>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	4b15      	ldr	r3, [pc, #84]	; (8001cf4 <state_machine_step+0xd4>)
 8001ca0:	701a      	strb	r2, [r3, #0]
		break;
 8001ca2:	e014      	b.n	8001cce <state_machine_step+0xae>
	case STATE_DRIVE:
		state = state_drive_step();
 8001ca4:	f000 f870 	bl	8001d88 <state_drive_step>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	461a      	mov	r2, r3
 8001cac:	4b11      	ldr	r3, [pc, #68]	; (8001cf4 <state_machine_step+0xd4>)
 8001cae:	701a      	strb	r2, [r3, #0]
		break;
 8001cb0:	e00d      	b.n	8001cce <state_machine_step+0xae>
	case STATE_PRECHARGE_CHARGE:
		state = state_precharge_charge_step();
 8001cb2:	f000 f883 	bl	8001dbc <state_precharge_charge_step>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	461a      	mov	r2, r3
 8001cba:	4b0e      	ldr	r3, [pc, #56]	; (8001cf4 <state_machine_step+0xd4>)
 8001cbc:	701a      	strb	r2, [r3, #0]
		break;
 8001cbe:	e006      	b.n	8001cce <state_machine_step+0xae>
	case STATE_CHARGE:
		state = state_charge_step();
 8001cc0:	f000 f884 	bl	8001dcc <state_charge_step>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	4b0a      	ldr	r3, [pc, #40]	; (8001cf4 <state_machine_step+0xd4>)
 8001cca:	701a      	strb	r2, [r3, #0]
		break;
 8001ccc:	bf00      	nop
	}

	xQueueOverwrite(state_queue, &state);
 8001cce:	4b0a      	ldr	r3, [pc, #40]	; (8001cf8 <state_machine_step+0xd8>)
 8001cd0:	6818      	ldr	r0, [r3, #0]
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	4907      	ldr	r1, [pc, #28]	; (8001cf4 <state_machine_step+0xd4>)
 8001cd8:	f011 f812 	bl	8012d00 <xQueueGenericSend>
	xQueueOverwrite(charge_state_queue, &charge_state);
 8001cdc:	4b07      	ldr	r3, [pc, #28]	; (8001cfc <state_machine_step+0xdc>)
 8001cde:	6818      	ldr	r0, [r3, #0]
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	4906      	ldr	r1, [pc, #24]	; (8001d00 <state_machine_step+0xe0>)
 8001ce6:	f011 f80b 	bl	8012d00 <xQueueGenericSend>

}
 8001cea:	bf00      	nop
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	20001650 	.word	0x20001650
 8001cf4:	2000164c 	.word	0x2000164c
 8001cf8:	2001b424 	.word	0x2001b424
 8001cfc:	2001b44c 	.word	0x2001b44c
 8001d00:	2000164d 	.word	0x2000164d

08001d04 <state_error_step>:
/*
 * @Brief	X
 * @Param	Y
 * @Retval	Z
 */
state_t state_error_step(void) {
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d08:	b672      	cpsid	i
}
 8001d0a:	bf00      	nop
	/* WAIT FOR WATCHDOG TO KILL PROGRAMME */
	__disable_irq();
	for (;;)
 8001d0c:	e7fe      	b.n	8001d0c <state_error_step+0x8>

08001d0e <state_entry_step>:
/*
 * @Brief	X
 * @Param	Y
 * @Retval	Z
 */
state_t state_entry_step(void) {
 8001d0e:	b480      	push	{r7}
 8001d10:	af00      	add	r7, sp, #0

	/* ALL PERIPHERALS SHOULD BE INITIALIZED AT THIS POINT. */
	/* .. IT WOULD BE A GOOD IDEA TO xQueueReceive() EVERY QUEUE/DATA PORT TO MAKE SURE THAT THEY ARE RUNNING*/

	return STATE_IDLE;
 8001d12:	2302      	movs	r3, #2
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
	...

08001d20 <state_idle_step>:
/*
 * @Brief	X
 * @Param	Y
 * @Retval	Z
 */
state_t state_idle_step(void) {
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
	if (xQueueReceive(dbu_status_1_queue, &dbu_status_1, 0)
 8001d24:	4b10      	ldr	r3, [pc, #64]	; (8001d68 <state_idle_step+0x48>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	4910      	ldr	r1, [pc, #64]	; (8001d6c <state_idle_step+0x4c>)
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f011 f9bd 	bl	80130ac <xQueueReceive>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d013      	beq.n	8001d60 <state_idle_step+0x40>
			&& xQueueReceive(GPIO_queue, &GPIO, 0)) {
 8001d38:	4b0d      	ldr	r3, [pc, #52]	; (8001d70 <state_idle_step+0x50>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	490d      	ldr	r1, [pc, #52]	; (8001d74 <state_idle_step+0x54>)
 8001d40:	4618      	mov	r0, r3
 8001d42:	f011 f9b3 	bl	80130ac <xQueueReceive>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d009      	beq.n	8001d60 <state_idle_step+0x40>
		if (GPIO.SC_probe && dbu_status_1.activate_ts_button) {
 8001d4c:	4b09      	ldr	r3, [pc, #36]	; (8001d74 <state_idle_step+0x54>)
 8001d4e:	789b      	ldrb	r3, [r3, #2]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d005      	beq.n	8001d60 <state_idle_step+0x40>
 8001d54:	4b05      	ldr	r3, [pc, #20]	; (8001d6c <state_idle_step+0x4c>)
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d001      	beq.n	8001d60 <state_idle_step+0x40>
			return STATE_PRECHARGE_DRIVE;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	e000      	b.n	8001d62 <state_idle_step+0x42>
		}
	}
	return STATE_IDLE;
 8001d60:	2302      	movs	r3, #2
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	2001b420 	.word	0x2001b420
 8001d6c:	20001644 	.word	0x20001644
 8001d70:	2001b448 	.word	0x2001b448
 8001d74:	2000163c 	.word	0x2000163c

08001d78 <state_precharge_drive_step>:
/*
 * @Brief	X
 * @Param	Y
 * @Retval	Z
 */
state_t state_precharge_drive_step(void) {
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0

	return STATE_DRIVE;
 8001d7c:	2304      	movs	r3, #4
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <state_drive_step>:
/*
 * @Brief	X
 * @Param	Y
 * @Retval	Z
 */
state_t state_drive_step(void) {
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
	if (xQueueReceive(GPIO_queue, &GPIO, 0)) {
 8001d8c:	4b09      	ldr	r3, [pc, #36]	; (8001db4 <state_drive_step+0x2c>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	2200      	movs	r2, #0
 8001d92:	4909      	ldr	r1, [pc, #36]	; (8001db8 <state_drive_step+0x30>)
 8001d94:	4618      	mov	r0, r3
 8001d96:	f011 f989 	bl	80130ac <xQueueReceive>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d005      	beq.n	8001dac <state_drive_step+0x24>
		if (GPIO.SC_probe) {
 8001da0:	4b05      	ldr	r3, [pc, #20]	; (8001db8 <state_drive_step+0x30>)
 8001da2:	789b      	ldrb	r3, [r3, #2]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d001      	beq.n	8001dac <state_drive_step+0x24>
			return STATE_IDLE;
 8001da8:	2302      	movs	r3, #2
 8001daa:	e000      	b.n	8001dae <state_drive_step+0x26>
		}
	}
	return STATE_DRIVE;
 8001dac:	2304      	movs	r3, #4
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	2001b448 	.word	0x2001b448
 8001db8:	2000163c 	.word	0x2000163c

08001dbc <state_precharge_charge_step>:
/*
 * @Brief	X
 * @Param	Y
 * @Retval	Z
 */
state_t state_precharge_charge_step(void) {
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
	return STATE_CHARGE;
 8001dc0:	2306      	movs	r3, #6
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr

08001dcc <state_charge_step>:
/*
 * @Brief	X
 * @Param	Y
 * @Retval	Z
 */
state_t state_charge_step(void) {
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
	static __called = 0;
	if (!__called++) {
 8001dd0:	4b17      	ldr	r3, [pc, #92]	; (8001e30 <state_charge_step+0x64>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	1c5a      	adds	r2, r3, #1
 8001dd6:	4916      	ldr	r1, [pc, #88]	; (8001e30 <state_charge_step+0x64>)
 8001dd8:	600a      	str	r2, [r1, #0]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d102      	bne.n	8001de4 <state_charge_step+0x18>
		state = STATE_ENTRY;
 8001dde:	4b15      	ldr	r3, [pc, #84]	; (8001e34 <state_charge_step+0x68>)
 8001de0:	2201      	movs	r2, #1
 8001de2:	701a      	strb	r2, [r3, #0]
	}

	switch (charge_state) {
 8001de4:	4b14      	ldr	r3, [pc, #80]	; (8001e38 <state_charge_step+0x6c>)
 8001de6:	f993 3000 	ldrsb.w	r3, [r3]
 8001dea:	3301      	adds	r3, #1
 8001dec:	2b06      	cmp	r3, #6
 8001dee:	d819      	bhi.n	8001e24 <state_charge_step+0x58>
 8001df0:	a201      	add	r2, pc, #4	; (adr r2, 8001df8 <state_charge_step+0x2c>)
 8001df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001df6:	bf00      	nop
 8001df8:	08001e15 	.word	0x08001e15
 8001dfc:	08001e1b 	.word	0x08001e1b
 8001e00:	08001e25 	.word	0x08001e25
 8001e04:	08001e25 	.word	0x08001e25
 8001e08:	08001e25 	.word	0x08001e25
 8001e0c:	08001e25 	.word	0x08001e25
 8001e10:	08001e25 	.word	0x08001e25
  __ASM volatile ("cpsid i" : : : "memory");
 8001e14:	b672      	cpsid	i
}
 8001e16:	bf00      	nop
	case CHARGE_STATE_ERROR: {
		__disable_irq();
		for (;;)
 8001e18:	e7fe      	b.n	8001e18 <state_charge_step+0x4c>
	case CHARGE_STATE_CB: {

	}
		break;
	case CHARGE_STATE_NONE:
		__called = 0;
 8001e1a:	4b05      	ldr	r3, [pc, #20]	; (8001e30 <state_charge_step+0x64>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	601a      	str	r2, [r3, #0]
		return STATE_IDLE;
 8001e20:	2302      	movs	r3, #2
 8001e22:	e000      	b.n	8001e26 <state_charge_step+0x5a>
	}

	return STATE_CHARGE;
 8001e24:	2306      	movs	r3, #6
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr
 8001e30:	20001654 	.word	0x20001654
 8001e34:	2000164c 	.word	0x2000164c
 8001e38:	2000164d 	.word	0x2000164d

08001e3c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001e42:	463b      	mov	r3, r7
 8001e44:	2200      	movs	r2, #0
 8001e46:	601a      	str	r2, [r3, #0]
 8001e48:	605a      	str	r2, [r3, #4]
 8001e4a:	609a      	str	r2, [r3, #8]
 8001e4c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001e4e:	4b37      	ldr	r3, [pc, #220]	; (8001f2c <MX_ADC1_Init+0xf0>)
 8001e50:	4a37      	ldr	r2, [pc, #220]	; (8001f30 <MX_ADC1_Init+0xf4>)
 8001e52:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001e54:	4b35      	ldr	r3, [pc, #212]	; (8001f2c <MX_ADC1_Init+0xf0>)
 8001e56:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001e5a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001e5c:	4b33      	ldr	r3, [pc, #204]	; (8001f2c <MX_ADC1_Init+0xf0>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001e62:	4b32      	ldr	r3, [pc, #200]	; (8001f2c <MX_ADC1_Init+0xf0>)
 8001e64:	2201      	movs	r2, #1
 8001e66:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001e68:	4b30      	ldr	r3, [pc, #192]	; (8001f2c <MX_ADC1_Init+0xf0>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001e6e:	4b2f      	ldr	r3, [pc, #188]	; (8001f2c <MX_ADC1_Init+0xf0>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001e76:	4b2d      	ldr	r3, [pc, #180]	; (8001f2c <MX_ADC1_Init+0xf0>)
 8001e78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e7c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8001e7e:	4b2b      	ldr	r3, [pc, #172]	; (8001f2c <MX_ADC1_Init+0xf0>)
 8001e80:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e84:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e86:	4b29      	ldr	r3, [pc, #164]	; (8001f2c <MX_ADC1_Init+0xf0>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8001e8c:	4b27      	ldr	r3, [pc, #156]	; (8001f2c <MX_ADC1_Init+0xf0>)
 8001e8e:	2204      	movs	r2, #4
 8001e90:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001e92:	4b26      	ldr	r3, [pc, #152]	; (8001f2c <MX_ADC1_Init+0xf0>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001e9a:	4b24      	ldr	r3, [pc, #144]	; (8001f2c <MX_ADC1_Init+0xf0>)
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001ea0:	4822      	ldr	r0, [pc, #136]	; (8001f2c <MX_ADC1_Init+0xf0>)
 8001ea2:	f00c f9c9 	bl	800e238 <HAL_ADC_Init>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d001      	beq.n	8001eb0 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8001eac:	f001 fb42 	bl	8003534 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8001eb8:	2302      	movs	r3, #2
 8001eba:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ebc:	463b      	mov	r3, r7
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	481a      	ldr	r0, [pc, #104]	; (8001f2c <MX_ADC1_Init+0xf0>)
 8001ec2:	f00c fc6b 	bl	800e79c <HAL_ADC_ConfigChannel>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d001      	beq.n	8001ed0 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001ecc:	f001 fb32 	bl	8003534 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ed8:	463b      	mov	r3, r7
 8001eda:	4619      	mov	r1, r3
 8001edc:	4813      	ldr	r0, [pc, #76]	; (8001f2c <MX_ADC1_Init+0xf0>)
 8001ede:	f00c fc5d 	bl	800e79c <HAL_ADC_ConfigChannel>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8001ee8:	f001 fb24 	bl	8003534 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001eec:	2303      	movs	r3, #3
 8001eee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ef4:	463b      	mov	r3, r7
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	480c      	ldr	r0, [pc, #48]	; (8001f2c <MX_ADC1_Init+0xf0>)
 8001efa:	f00c fc4f 	bl	800e79c <HAL_ADC_ConfigChannel>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8001f04:	f001 fb16 	bl	8003534 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001f08:	2304      	movs	r3, #4
 8001f0a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001f0c:	2304      	movs	r3, #4
 8001f0e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f10:	463b      	mov	r3, r7
 8001f12:	4619      	mov	r1, r3
 8001f14:	4805      	ldr	r0, [pc, #20]	; (8001f2c <MX_ADC1_Init+0xf0>)
 8001f16:	f00c fc41 	bl	800e79c <HAL_ADC_ConfigChannel>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d001      	beq.n	8001f24 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 8001f20:	f001 fb08 	bl	8003534 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001f24:	bf00      	nop
 8001f26:	3710      	adds	r7, #16
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	2001b4b4 	.word	0x2001b4b4
 8001f30:	40012000 	.word	0x40012000

08001f34 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b08a      	sub	sp, #40	; 0x28
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f3c:	f107 0314 	add.w	r3, r7, #20
 8001f40:	2200      	movs	r2, #0
 8001f42:	601a      	str	r2, [r3, #0]
 8001f44:	605a      	str	r2, [r3, #4]
 8001f46:	609a      	str	r2, [r3, #8]
 8001f48:	60da      	str	r2, [r3, #12]
 8001f4a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a33      	ldr	r2, [pc, #204]	; (8002020 <HAL_ADC_MspInit+0xec>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d15f      	bne.n	8002016 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001f56:	2300      	movs	r3, #0
 8001f58:	613b      	str	r3, [r7, #16]
 8001f5a:	4b32      	ldr	r3, [pc, #200]	; (8002024 <HAL_ADC_MspInit+0xf0>)
 8001f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f5e:	4a31      	ldr	r2, [pc, #196]	; (8002024 <HAL_ADC_MspInit+0xf0>)
 8001f60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f64:	6453      	str	r3, [r2, #68]	; 0x44
 8001f66:	4b2f      	ldr	r3, [pc, #188]	; (8002024 <HAL_ADC_MspInit+0xf0>)
 8001f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f6e:	613b      	str	r3, [r7, #16]
 8001f70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f72:	2300      	movs	r3, #0
 8001f74:	60fb      	str	r3, [r7, #12]
 8001f76:	4b2b      	ldr	r3, [pc, #172]	; (8002024 <HAL_ADC_MspInit+0xf0>)
 8001f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7a:	4a2a      	ldr	r2, [pc, #168]	; (8002024 <HAL_ADC_MspInit+0xf0>)
 8001f7c:	f043 0301 	orr.w	r3, r3, #1
 8001f80:	6313      	str	r3, [r2, #48]	; 0x30
 8001f82:	4b28      	ldr	r3, [pc, #160]	; (8002024 <HAL_ADC_MspInit+0xf0>)
 8001f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f86:	f003 0301 	and.w	r3, r3, #1
 8001f8a:	60fb      	str	r3, [r7, #12]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = precharge_resistor_temperature_Pin|fuse_resistor_temperature_Pin|aux_temp1_Pin|aux_temp2_Pin;
 8001f8e:	231e      	movs	r3, #30
 8001f90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f92:	2303      	movs	r3, #3
 8001f94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f96:	2300      	movs	r3, #0
 8001f98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f9a:	f107 0314 	add.w	r3, r7, #20
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	4821      	ldr	r0, [pc, #132]	; (8002028 <HAL_ADC_MspInit+0xf4>)
 8001fa2:	f00d fe2b 	bl	800fbfc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001fa6:	4b21      	ldr	r3, [pc, #132]	; (800202c <HAL_ADC_MspInit+0xf8>)
 8001fa8:	4a21      	ldr	r2, [pc, #132]	; (8002030 <HAL_ADC_MspInit+0xfc>)
 8001faa:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001fac:	4b1f      	ldr	r3, [pc, #124]	; (800202c <HAL_ADC_MspInit+0xf8>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fb2:	4b1e      	ldr	r3, [pc, #120]	; (800202c <HAL_ADC_MspInit+0xf8>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fb8:	4b1c      	ldr	r3, [pc, #112]	; (800202c <HAL_ADC_MspInit+0xf8>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001fbe:	4b1b      	ldr	r3, [pc, #108]	; (800202c <HAL_ADC_MspInit+0xf8>)
 8001fc0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fc4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001fc6:	4b19      	ldr	r3, [pc, #100]	; (800202c <HAL_ADC_MspInit+0xf8>)
 8001fc8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001fcc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001fce:	4b17      	ldr	r3, [pc, #92]	; (800202c <HAL_ADC_MspInit+0xf8>)
 8001fd0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fd4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001fd6:	4b15      	ldr	r3, [pc, #84]	; (800202c <HAL_ADC_MspInit+0xf8>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001fdc:	4b13      	ldr	r3, [pc, #76]	; (800202c <HAL_ADC_MspInit+0xf8>)
 8001fde:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001fe2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001fe4:	4b11      	ldr	r3, [pc, #68]	; (800202c <HAL_ADC_MspInit+0xf8>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001fea:	4810      	ldr	r0, [pc, #64]	; (800202c <HAL_ADC_MspInit+0xf8>)
 8001fec:	f00d fa96 	bl	800f51c <HAL_DMA_Init>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d001      	beq.n	8001ffa <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001ff6:	f001 fa9d 	bl	8003534 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a0b      	ldr	r2, [pc, #44]	; (800202c <HAL_ADC_MspInit+0xf8>)
 8001ffe:	639a      	str	r2, [r3, #56]	; 0x38
 8002000:	4a0a      	ldr	r2, [pc, #40]	; (800202c <HAL_ADC_MspInit+0xf8>)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8002006:	2200      	movs	r2, #0
 8002008:	2105      	movs	r1, #5
 800200a:	2012      	movs	r0, #18
 800200c:	f00d fa5c 	bl	800f4c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002010:	2012      	movs	r0, #18
 8002012:	f00d fa75 	bl	800f500 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002016:	bf00      	nop
 8002018:	3728      	adds	r7, #40	; 0x28
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	40012000 	.word	0x40012000
 8002024:	40023800 	.word	0x40023800
 8002028:	40020000 	.word	0x40020000
 800202c:	2001b4fc 	.word	0x2001b4fc
 8002030:	40026410 	.word	0x40026410
 8002034:	00000000 	.word	0x00000000

08002038 <interpret_ADC_buffer>:
/* USER CODE BEGIN 1 */

uint16_t ADC_FLAG = 1;

void interpret_ADC_buffer(ams_temperatures_t *ams_temperatures,
		uint16_t *adcBuffer, uint8_t L) {
 8002038:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800203c:	b08e      	sub	sp, #56	; 0x38
 800203e:	af00      	add	r7, sp, #0
 8002040:	60f8      	str	r0, [r7, #12]
 8002042:	60b9      	str	r1, [r7, #8]
 8002044:	4613      	mov	r3, r2
 8002046:	71fb      	strb	r3, [r7, #7]
	uint16_t i, j;
	float adcAverageBuffer[4];

	float beta = 3500;
 8002048:	4bdb      	ldr	r3, [pc, #876]	; (80023b8 <interpret_ADC_buffer+0x380>)
 800204a:	633b      	str	r3, [r7, #48]	; 0x30
	float temp = 25 + 273.15;
 800204c:	4bdb      	ldr	r3, [pc, #876]	; (80023bc <interpret_ADC_buffer+0x384>)
 800204e:	62fb      	str	r3, [r7, #44]	; 0x2c
	float R0 = 10000 * exp(-beta / temp);
 8002050:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002054:	eeb1 7a67 	vneg.f32	s14, s15
 8002058:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800205c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002060:	ee16 0a90 	vmov	r0, s13
 8002064:	f7fe fa62 	bl	800052c <__aeabi_f2d>
 8002068:	4602      	mov	r2, r0
 800206a:	460b      	mov	r3, r1
 800206c:	ec43 2b10 	vmov	d0, r2, r3
 8002070:	f014 fea2 	bl	8016db8 <exp>
 8002074:	ec51 0b10 	vmov	r0, r1, d0
 8002078:	a3cb      	add	r3, pc, #812	; (adr r3, 80023a8 <interpret_ADC_buffer+0x370>)
 800207a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800207e:	f7fe faad 	bl	80005dc <__aeabi_dmul>
 8002082:	4602      	mov	r2, r0
 8002084:	460b      	mov	r3, r1
 8002086:	4610      	mov	r0, r2
 8002088:	4619      	mov	r1, r3
 800208a:	f7fe fd9f 	bl	8000bcc <__aeabi_d2f>
 800208e:	4603      	mov	r3, r0
 8002090:	62bb      	str	r3, [r7, #40]	; 0x28
	float R = 10000;
 8002092:	4bcb      	ldr	r3, [pc, #812]	; (80023c0 <interpret_ADC_buffer+0x388>)
 8002094:	627b      	str	r3, [r7, #36]	; 0x24
	float resolution = pow(2, 12) - 1;
 8002096:	4bcb      	ldr	r3, [pc, #812]	; (80023c4 <interpret_ADC_buffer+0x38c>)
 8002098:	623b      	str	r3, [r7, #32]

	for (i = 0; i < 4; i++) {
 800209a:	2300      	movs	r3, #0
 800209c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800209e:	e063      	b.n	8002168 <interpret_ADC_buffer+0x130>
		adcAverageBuffer[i] = 0;
 80020a0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80020a8:	4413      	add	r3, r2
 80020aa:	3b28      	subs	r3, #40	; 0x28
 80020ac:	f04f 0200 	mov.w	r2, #0
 80020b0:	601a      	str	r2, [r3, #0]
		for (j = 0; j < L; j++) {
 80020b2:	2300      	movs	r3, #0
 80020b4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80020b6:	e020      	b.n	80020fa <interpret_ADC_buffer+0xc2>
			adcAverageBuffer[i] += adcBuffer[4 * j + i];
 80020b8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80020c0:	4413      	add	r3, r2
 80020c2:	3b28      	subs	r3, #40	; 0x28
 80020c4:	ed93 7a00 	vldr	s14, [r3]
 80020c8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80020ca:	009a      	lsls	r2, r3, #2
 80020cc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80020ce:	4413      	add	r3, r2
 80020d0:	005b      	lsls	r3, r3, #1
 80020d2:	68ba      	ldr	r2, [r7, #8]
 80020d4:	4413      	add	r3, r2
 80020d6:	881b      	ldrh	r3, [r3, #0]
 80020d8:	ee07 3a90 	vmov	s15, r3
 80020dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020e0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80020e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80020ec:	4413      	add	r3, r2
 80020ee:	3b28      	subs	r3, #40	; 0x28
 80020f0:	edc3 7a00 	vstr	s15, [r3]
		for (j = 0; j < L; j++) {
 80020f4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80020f6:	3301      	adds	r3, #1
 80020f8:	86bb      	strh	r3, [r7, #52]	; 0x34
 80020fa:	79fb      	ldrb	r3, [r7, #7]
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002100:	429a      	cmp	r2, r3
 8002102:	d3d9      	bcc.n	80020b8 <interpret_ADC_buffer+0x80>
		}
		adcAverageBuffer[i] /= L;
 8002104:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800210c:	4413      	add	r3, r2
 800210e:	3b28      	subs	r3, #40	; 0x28
 8002110:	edd3 6a00 	vldr	s13, [r3]
 8002114:	79fb      	ldrb	r3, [r7, #7]
 8002116:	ee07 3a90 	vmov	s15, r3
 800211a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800211e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002120:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800212a:	4413      	add	r3, r2
 800212c:	3b28      	subs	r3, #40	; 0x28
 800212e:	edc3 7a00 	vstr	s15, [r3]

		/* The adc value shouldn't be negative, nor should it be 0 */
		if (adcAverageBuffer[i] < 0.25) {
 8002132:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800213a:	4413      	add	r3, r2
 800213c:	3b28      	subs	r3, #40	; 0x28
 800213e:	edd3 7a00 	vldr	s15, [r3]
 8002142:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8002146:	eef4 7ac7 	vcmpe.f32	s15, s14
 800214a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800214e:	d508      	bpl.n	8002162 <interpret_ADC_buffer+0x12a>
			adcAverageBuffer[i] = 1;
 8002150:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002158:	4413      	add	r3, r2
 800215a:	3b28      	subs	r3, #40	; 0x28
 800215c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002160:	601a      	str	r2, [r3, #0]
	for (i = 0; i < 4; i++) {
 8002162:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002164:	3301      	adds	r3, #1
 8002166:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002168:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800216a:	2b03      	cmp	r3, #3
 800216c:	d998      	bls.n	80020a0 <interpret_ADC_buffer+0x68>
	}
	/* temperature = beta / (log(R0 * ( resolution / adcAverageBuffer[i] - 1) ) - log(R)); */
	/* v/vt = ((2^n - 1)*v/vref)/((2^n - 1)*vt/vref) = ((2^n - 1)*v/vref)/adcAverageBuffer[i] */
	/* Assume v = vref, n = 12 */
	ams_temperatures->pre_charge_resistor_temperature = beta
			/ (log(R0 * (resolution / adcAverageBuffer[0] - 1)) - log(R))
 800216e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002170:	f7fe f9dc 	bl	800052c <__aeabi_f2d>
 8002174:	4604      	mov	r4, r0
 8002176:	460d      	mov	r5, r1
 8002178:	ed97 7a04 	vldr	s14, [r7, #16]
 800217c:	edd7 6a08 	vldr	s13, [r7, #32]
 8002180:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002184:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002188:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800218c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002190:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002194:	ee17 0a90 	vmov	r0, s15
 8002198:	f7fe f9c8 	bl	800052c <__aeabi_f2d>
 800219c:	4602      	mov	r2, r0
 800219e:	460b      	mov	r3, r1
 80021a0:	ec43 2b10 	vmov	d0, r2, r3
 80021a4:	f014 fe58 	bl	8016e58 <log>
 80021a8:	ec59 8b10 	vmov	r8, r9, d0
 80021ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80021ae:	f7fe f9bd 	bl	800052c <__aeabi_f2d>
 80021b2:	4602      	mov	r2, r0
 80021b4:	460b      	mov	r3, r1
 80021b6:	ec43 2b10 	vmov	d0, r2, r3
 80021ba:	f014 fe4d 	bl	8016e58 <log>
 80021be:	ec53 2b10 	vmov	r2, r3, d0
 80021c2:	4640      	mov	r0, r8
 80021c4:	4649      	mov	r1, r9
 80021c6:	f7fe f851 	bl	800026c <__aeabi_dsub>
 80021ca:	4602      	mov	r2, r0
 80021cc:	460b      	mov	r3, r1
 80021ce:	4620      	mov	r0, r4
 80021d0:	4629      	mov	r1, r5
 80021d2:	f7fe fb2d 	bl	8000830 <__aeabi_ddiv>
 80021d6:	4602      	mov	r2, r0
 80021d8:	460b      	mov	r3, r1
 80021da:	4610      	mov	r0, r2
 80021dc:	4619      	mov	r1, r3
			- 273.15;
 80021de:	a374      	add	r3, pc, #464	; (adr r3, 80023b0 <interpret_ADC_buffer+0x378>)
 80021e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021e4:	f7fe f842 	bl	800026c <__aeabi_dsub>
 80021e8:	4602      	mov	r2, r0
 80021ea:	460b      	mov	r3, r1
 80021ec:	4610      	mov	r0, r2
 80021ee:	4619      	mov	r1, r3
 80021f0:	f7fe fcec 	bl	8000bcc <__aeabi_d2f>
 80021f4:	4602      	mov	r2, r0
	ams_temperatures->pre_charge_resistor_temperature = beta
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	601a      	str	r2, [r3, #0]
	ams_temperatures->fuse_resistor_temperature = beta
			/ (log(R0 * (resolution / adcAverageBuffer[1] - 1)) - log(R))
 80021fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80021fc:	f7fe f996 	bl	800052c <__aeabi_f2d>
 8002200:	4604      	mov	r4, r0
 8002202:	460d      	mov	r5, r1
 8002204:	ed97 7a05 	vldr	s14, [r7, #20]
 8002208:	edd7 6a08 	vldr	s13, [r7, #32]
 800220c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002210:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002214:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002218:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800221c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002220:	ee17 0a90 	vmov	r0, s15
 8002224:	f7fe f982 	bl	800052c <__aeabi_f2d>
 8002228:	4602      	mov	r2, r0
 800222a:	460b      	mov	r3, r1
 800222c:	ec43 2b10 	vmov	d0, r2, r3
 8002230:	f014 fe12 	bl	8016e58 <log>
 8002234:	ec59 8b10 	vmov	r8, r9, d0
 8002238:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800223a:	f7fe f977 	bl	800052c <__aeabi_f2d>
 800223e:	4602      	mov	r2, r0
 8002240:	460b      	mov	r3, r1
 8002242:	ec43 2b10 	vmov	d0, r2, r3
 8002246:	f014 fe07 	bl	8016e58 <log>
 800224a:	ec53 2b10 	vmov	r2, r3, d0
 800224e:	4640      	mov	r0, r8
 8002250:	4649      	mov	r1, r9
 8002252:	f7fe f80b 	bl	800026c <__aeabi_dsub>
 8002256:	4602      	mov	r2, r0
 8002258:	460b      	mov	r3, r1
 800225a:	4620      	mov	r0, r4
 800225c:	4629      	mov	r1, r5
 800225e:	f7fe fae7 	bl	8000830 <__aeabi_ddiv>
 8002262:	4602      	mov	r2, r0
 8002264:	460b      	mov	r3, r1
 8002266:	4610      	mov	r0, r2
 8002268:	4619      	mov	r1, r3
			- 273.15;
 800226a:	a351      	add	r3, pc, #324	; (adr r3, 80023b0 <interpret_ADC_buffer+0x378>)
 800226c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002270:	f7fd fffc 	bl	800026c <__aeabi_dsub>
 8002274:	4602      	mov	r2, r0
 8002276:	460b      	mov	r3, r1
 8002278:	4610      	mov	r0, r2
 800227a:	4619      	mov	r1, r3
 800227c:	f7fe fca6 	bl	8000bcc <__aeabi_d2f>
 8002280:	4602      	mov	r2, r0
	ams_temperatures->fuse_resistor_temperature = beta
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	605a      	str	r2, [r3, #4]
	ams_temperatures->aux_1_temperature = beta
			/ (log(R0 * (resolution / adcAverageBuffer[2] - 1)) - log(R))
 8002286:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002288:	f7fe f950 	bl	800052c <__aeabi_f2d>
 800228c:	4604      	mov	r4, r0
 800228e:	460d      	mov	r5, r1
 8002290:	ed97 7a06 	vldr	s14, [r7, #24]
 8002294:	edd7 6a08 	vldr	s13, [r7, #32]
 8002298:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800229c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80022a0:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80022a4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80022a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022ac:	ee17 0a90 	vmov	r0, s15
 80022b0:	f7fe f93c 	bl	800052c <__aeabi_f2d>
 80022b4:	4602      	mov	r2, r0
 80022b6:	460b      	mov	r3, r1
 80022b8:	ec43 2b10 	vmov	d0, r2, r3
 80022bc:	f014 fdcc 	bl	8016e58 <log>
 80022c0:	ec59 8b10 	vmov	r8, r9, d0
 80022c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80022c6:	f7fe f931 	bl	800052c <__aeabi_f2d>
 80022ca:	4602      	mov	r2, r0
 80022cc:	460b      	mov	r3, r1
 80022ce:	ec43 2b10 	vmov	d0, r2, r3
 80022d2:	f014 fdc1 	bl	8016e58 <log>
 80022d6:	ec53 2b10 	vmov	r2, r3, d0
 80022da:	4640      	mov	r0, r8
 80022dc:	4649      	mov	r1, r9
 80022de:	f7fd ffc5 	bl	800026c <__aeabi_dsub>
 80022e2:	4602      	mov	r2, r0
 80022e4:	460b      	mov	r3, r1
 80022e6:	4620      	mov	r0, r4
 80022e8:	4629      	mov	r1, r5
 80022ea:	f7fe faa1 	bl	8000830 <__aeabi_ddiv>
 80022ee:	4602      	mov	r2, r0
 80022f0:	460b      	mov	r3, r1
 80022f2:	4610      	mov	r0, r2
 80022f4:	4619      	mov	r1, r3
			- 273.15;
 80022f6:	a32e      	add	r3, pc, #184	; (adr r3, 80023b0 <interpret_ADC_buffer+0x378>)
 80022f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022fc:	f7fd ffb6 	bl	800026c <__aeabi_dsub>
 8002300:	4602      	mov	r2, r0
 8002302:	460b      	mov	r3, r1
 8002304:	4610      	mov	r0, r2
 8002306:	4619      	mov	r1, r3
 8002308:	f7fe fc60 	bl	8000bcc <__aeabi_d2f>
 800230c:	4602      	mov	r2, r0
	ams_temperatures->aux_1_temperature = beta
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	609a      	str	r2, [r3, #8]
	ams_temperatures->aux_2_temperature = beta
			/ (log(R0 * (resolution / adcAverageBuffer[3] - 1)) - log(R))
 8002312:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002314:	f7fe f90a 	bl	800052c <__aeabi_f2d>
 8002318:	4604      	mov	r4, r0
 800231a:	460d      	mov	r5, r1
 800231c:	ed97 7a07 	vldr	s14, [r7, #28]
 8002320:	edd7 6a08 	vldr	s13, [r7, #32]
 8002324:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002328:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800232c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002330:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002334:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002338:	ee17 0a90 	vmov	r0, s15
 800233c:	f7fe f8f6 	bl	800052c <__aeabi_f2d>
 8002340:	4602      	mov	r2, r0
 8002342:	460b      	mov	r3, r1
 8002344:	ec43 2b10 	vmov	d0, r2, r3
 8002348:	f014 fd86 	bl	8016e58 <log>
 800234c:	ec59 8b10 	vmov	r8, r9, d0
 8002350:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002352:	f7fe f8eb 	bl	800052c <__aeabi_f2d>
 8002356:	4602      	mov	r2, r0
 8002358:	460b      	mov	r3, r1
 800235a:	ec43 2b10 	vmov	d0, r2, r3
 800235e:	f014 fd7b 	bl	8016e58 <log>
 8002362:	ec53 2b10 	vmov	r2, r3, d0
 8002366:	4640      	mov	r0, r8
 8002368:	4649      	mov	r1, r9
 800236a:	f7fd ff7f 	bl	800026c <__aeabi_dsub>
 800236e:	4602      	mov	r2, r0
 8002370:	460b      	mov	r3, r1
 8002372:	4620      	mov	r0, r4
 8002374:	4629      	mov	r1, r5
 8002376:	f7fe fa5b 	bl	8000830 <__aeabi_ddiv>
 800237a:	4602      	mov	r2, r0
 800237c:	460b      	mov	r3, r1
 800237e:	4610      	mov	r0, r2
 8002380:	4619      	mov	r1, r3
			- 273.15;
 8002382:	a30b      	add	r3, pc, #44	; (adr r3, 80023b0 <interpret_ADC_buffer+0x378>)
 8002384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002388:	f7fd ff70 	bl	800026c <__aeabi_dsub>
 800238c:	4602      	mov	r2, r0
 800238e:	460b      	mov	r3, r1
 8002390:	4610      	mov	r0, r2
 8002392:	4619      	mov	r1, r3
 8002394:	f7fe fc1a 	bl	8000bcc <__aeabi_d2f>
 8002398:	4602      	mov	r2, r0
	ams_temperatures->aux_2_temperature = beta
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	60da      	str	r2, [r3, #12]

}
 800239e:	bf00      	nop
 80023a0:	3738      	adds	r7, #56	; 0x38
 80023a2:	46bd      	mov	sp, r7
 80023a4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80023a8:	00000000 	.word	0x00000000
 80023ac:	40c38800 	.word	0x40c38800
 80023b0:	66666666 	.word	0x66666666
 80023b4:	40711266 	.word	0x40711266
 80023b8:	455ac000 	.word	0x455ac000
 80023bc:	43951333 	.word	0x43951333
 80023c0:	461c4000 	.word	0x461c4000
 80023c4:	457ff000 	.word	0x457ff000

080023c8 <ADC_initialize>:

void ADC_initialize(TIM_HandleTypeDef* htim) {
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
	htim->Instance->ARR = 65535 / 1000; // 100 Hz sample rate
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2241      	movs	r2, #65	; 0x41
 80023d6:	62da      	str	r2, [r3, #44]	; 0x2c
	HAL_TIM_Base_Start(htim);
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f00e fb2b 	bl	8010a34 <HAL_TIM_Base_Start>
	ADC_FLAG = 1;
 80023de:	4b03      	ldr	r3, [pc, #12]	; (80023ec <ADC_initialize+0x24>)
 80023e0:	2201      	movs	r2, #1
 80023e2:	801a      	strh	r2, [r3, #0]
}
 80023e4:	bf00      	nop
 80023e6:	3708      	adds	r7, #8
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	20000000 	.word	0x20000000

080023f0 <ADC_step>:

void ADC_step(uint32_t *buf, uint16_t len) {
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	460b      	mov	r3, r1
 80023fa:	807b      	strh	r3, [r7, #2]
	if (ADC_FLAG == 1) {
 80023fc:	4b08      	ldr	r3, [pc, #32]	; (8002420 <ADC_step+0x30>)
 80023fe:	881b      	ldrh	r3, [r3, #0]
 8002400:	2b01      	cmp	r3, #1
 8002402:	d108      	bne.n	8002416 <ADC_step+0x26>
		ADC_FLAG = 0;
 8002404:	4b06      	ldr	r3, [pc, #24]	; (8002420 <ADC_step+0x30>)
 8002406:	2200      	movs	r2, #0
 8002408:	801a      	strh	r2, [r3, #0]
		HAL_ADC_Start_DMA(&hadc1, buf, len);
 800240a:	887b      	ldrh	r3, [r7, #2]
 800240c:	461a      	mov	r2, r3
 800240e:	6879      	ldr	r1, [r7, #4]
 8002410:	4804      	ldr	r0, [pc, #16]	; (8002424 <ADC_step+0x34>)
 8002412:	f00c f895 	bl	800e540 <HAL_ADC_Start_DMA>
	}
}
 8002416:	bf00      	nop
 8002418:	3708      	adds	r7, #8
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	20000000 	.word	0x20000000
 8002424:	2001b4b4 	.word	0x2001b4b4

08002428 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
	ADC_FLAG = 1;
 8002430:	4b04      	ldr	r3, [pc, #16]	; (8002444 <HAL_ADC_ConvCpltCallback+0x1c>)
 8002432:	2201      	movs	r2, #1
 8002434:	801a      	strh	r2, [r3, #0]

}
 8002436:	bf00      	nop
 8002438:	370c      	adds	r7, #12
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	20000000 	.word	0x20000000

08002448 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800244c:	4b17      	ldr	r3, [pc, #92]	; (80024ac <MX_CAN1_Init+0x64>)
 800244e:	4a18      	ldr	r2, [pc, #96]	; (80024b0 <MX_CAN1_Init+0x68>)
 8002450:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8002452:	4b16      	ldr	r3, [pc, #88]	; (80024ac <MX_CAN1_Init+0x64>)
 8002454:	2203      	movs	r2, #3
 8002456:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8002458:	4b14      	ldr	r3, [pc, #80]	; (80024ac <MX_CAN1_Init+0x64>)
 800245a:	2200      	movs	r2, #0
 800245c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800245e:	4b13      	ldr	r3, [pc, #76]	; (80024ac <MX_CAN1_Init+0x64>)
 8002460:	2200      	movs	r2, #0
 8002462:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 8002464:	4b11      	ldr	r3, [pc, #68]	; (80024ac <MX_CAN1_Init+0x64>)
 8002466:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 800246a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 800246c:	4b0f      	ldr	r3, [pc, #60]	; (80024ac <MX_CAN1_Init+0x64>)
 800246e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002472:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8002474:	4b0d      	ldr	r3, [pc, #52]	; (80024ac <MX_CAN1_Init+0x64>)
 8002476:	2200      	movs	r2, #0
 8002478:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800247a:	4b0c      	ldr	r3, [pc, #48]	; (80024ac <MX_CAN1_Init+0x64>)
 800247c:	2200      	movs	r2, #0
 800247e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8002480:	4b0a      	ldr	r3, [pc, #40]	; (80024ac <MX_CAN1_Init+0x64>)
 8002482:	2200      	movs	r2, #0
 8002484:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8002486:	4b09      	ldr	r3, [pc, #36]	; (80024ac <MX_CAN1_Init+0x64>)
 8002488:	2200      	movs	r2, #0
 800248a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800248c:	4b07      	ldr	r3, [pc, #28]	; (80024ac <MX_CAN1_Init+0x64>)
 800248e:	2200      	movs	r2, #0
 8002490:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8002492:	4b06      	ldr	r3, [pc, #24]	; (80024ac <MX_CAN1_Init+0x64>)
 8002494:	2200      	movs	r2, #0
 8002496:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8002498:	4804      	ldr	r0, [pc, #16]	; (80024ac <MX_CAN1_Init+0x64>)
 800249a:	f00c fc29 	bl	800ecf0 <HAL_CAN_Init>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d001      	beq.n	80024a8 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80024a4:	f001 f846 	bl	8003534 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80024a8:	bf00      	nop
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	2001b584 	.word	0x2001b584
 80024b0:	40006400 	.word	0x40006400

080024b4 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80024b8:	4b17      	ldr	r3, [pc, #92]	; (8002518 <MX_CAN2_Init+0x64>)
 80024ba:	4a18      	ldr	r2, [pc, #96]	; (800251c <MX_CAN2_Init+0x68>)
 80024bc:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 6;
 80024be:	4b16      	ldr	r3, [pc, #88]	; (8002518 <MX_CAN2_Init+0x64>)
 80024c0:	2206      	movs	r2, #6
 80024c2:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80024c4:	4b14      	ldr	r3, [pc, #80]	; (8002518 <MX_CAN2_Init+0x64>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80024ca:	4b13      	ldr	r3, [pc, #76]	; (8002518 <MX_CAN2_Init+0x64>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_11TQ;
 80024d0:	4b11      	ldr	r3, [pc, #68]	; (8002518 <MX_CAN2_Init+0x64>)
 80024d2:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 80024d6:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 80024d8:	4b0f      	ldr	r3, [pc, #60]	; (8002518 <MX_CAN2_Init+0x64>)
 80024da:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80024de:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80024e0:	4b0d      	ldr	r3, [pc, #52]	; (8002518 <MX_CAN2_Init+0x64>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80024e6:	4b0c      	ldr	r3, [pc, #48]	; (8002518 <MX_CAN2_Init+0x64>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80024ec:	4b0a      	ldr	r3, [pc, #40]	; (8002518 <MX_CAN2_Init+0x64>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80024f2:	4b09      	ldr	r3, [pc, #36]	; (8002518 <MX_CAN2_Init+0x64>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80024f8:	4b07      	ldr	r3, [pc, #28]	; (8002518 <MX_CAN2_Init+0x64>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80024fe:	4b06      	ldr	r3, [pc, #24]	; (8002518 <MX_CAN2_Init+0x64>)
 8002500:	2200      	movs	r2, #0
 8002502:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8002504:	4804      	ldr	r0, [pc, #16]	; (8002518 <MX_CAN2_Init+0x64>)
 8002506:	f00c fbf3 	bl	800ecf0 <HAL_CAN_Init>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d001      	beq.n	8002514 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8002510:	f001 f810 	bl	8003534 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8002514:	bf00      	nop
 8002516:	bd80      	pop	{r7, pc}
 8002518:	2001b55c 	.word	0x2001b55c
 800251c:	40006800 	.word	0x40006800

08002520 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b08c      	sub	sp, #48	; 0x30
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002528:	f107 031c 	add.w	r3, r7, #28
 800252c:	2200      	movs	r2, #0
 800252e:	601a      	str	r2, [r3, #0]
 8002530:	605a      	str	r2, [r3, #4]
 8002532:	609a      	str	r2, [r3, #8]
 8002534:	60da      	str	r2, [r3, #12]
 8002536:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a4f      	ldr	r2, [pc, #316]	; (800267c <HAL_CAN_MspInit+0x15c>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d14e      	bne.n	80025e0 <HAL_CAN_MspInit+0xc0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002542:	4b4f      	ldr	r3, [pc, #316]	; (8002680 <HAL_CAN_MspInit+0x160>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	3301      	adds	r3, #1
 8002548:	4a4d      	ldr	r2, [pc, #308]	; (8002680 <HAL_CAN_MspInit+0x160>)
 800254a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800254c:	4b4c      	ldr	r3, [pc, #304]	; (8002680 <HAL_CAN_MspInit+0x160>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	2b01      	cmp	r3, #1
 8002552:	d10d      	bne.n	8002570 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002554:	2300      	movs	r3, #0
 8002556:	61bb      	str	r3, [r7, #24]
 8002558:	4b4a      	ldr	r3, [pc, #296]	; (8002684 <HAL_CAN_MspInit+0x164>)
 800255a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255c:	4a49      	ldr	r2, [pc, #292]	; (8002684 <HAL_CAN_MspInit+0x164>)
 800255e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002562:	6413      	str	r3, [r2, #64]	; 0x40
 8002564:	4b47      	ldr	r3, [pc, #284]	; (8002684 <HAL_CAN_MspInit+0x164>)
 8002566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002568:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800256c:	61bb      	str	r3, [r7, #24]
 800256e:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002570:	2300      	movs	r3, #0
 8002572:	617b      	str	r3, [r7, #20]
 8002574:	4b43      	ldr	r3, [pc, #268]	; (8002684 <HAL_CAN_MspInit+0x164>)
 8002576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002578:	4a42      	ldr	r2, [pc, #264]	; (8002684 <HAL_CAN_MspInit+0x164>)
 800257a:	f043 0301 	orr.w	r3, r3, #1
 800257e:	6313      	str	r3, [r2, #48]	; 0x30
 8002580:	4b40      	ldr	r3, [pc, #256]	; (8002684 <HAL_CAN_MspInit+0x164>)
 8002582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002584:	f003 0301 	and.w	r3, r3, #1
 8002588:	617b      	str	r3, [r7, #20]
 800258a:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800258c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002590:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002592:	2302      	movs	r3, #2
 8002594:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002596:	2300      	movs	r3, #0
 8002598:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800259a:	2303      	movs	r3, #3
 800259c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800259e:	2309      	movs	r3, #9
 80025a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025a2:	f107 031c 	add.w	r3, r7, #28
 80025a6:	4619      	mov	r1, r3
 80025a8:	4837      	ldr	r0, [pc, #220]	; (8002688 <HAL_CAN_MspInit+0x168>)
 80025aa:	f00d fb27 	bl	800fbfc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 80025ae:	2200      	movs	r2, #0
 80025b0:	2105      	movs	r1, #5
 80025b2:	2013      	movs	r0, #19
 80025b4:	f00c ff88 	bl	800f4c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 80025b8:	2013      	movs	r0, #19
 80025ba:	f00c ffa1 	bl	800f500 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 80025be:	2200      	movs	r2, #0
 80025c0:	2105      	movs	r1, #5
 80025c2:	2014      	movs	r0, #20
 80025c4:	f00c ff80 	bl	800f4c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80025c8:	2014      	movs	r0, #20
 80025ca:	f00c ff99 	bl	800f500 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 80025ce:	2200      	movs	r2, #0
 80025d0:	2105      	movs	r1, #5
 80025d2:	2015      	movs	r0, #21
 80025d4:	f00c ff78 	bl	800f4c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80025d8:	2015      	movs	r0, #21
 80025da:	f00c ff91 	bl	800f500 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 80025de:	e048      	b.n	8002672 <HAL_CAN_MspInit+0x152>
  else if(canHandle->Instance==CAN2)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a29      	ldr	r2, [pc, #164]	; (800268c <HAL_CAN_MspInit+0x16c>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d143      	bne.n	8002672 <HAL_CAN_MspInit+0x152>
    __HAL_RCC_CAN2_CLK_ENABLE();
 80025ea:	2300      	movs	r3, #0
 80025ec:	613b      	str	r3, [r7, #16]
 80025ee:	4b25      	ldr	r3, [pc, #148]	; (8002684 <HAL_CAN_MspInit+0x164>)
 80025f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f2:	4a24      	ldr	r2, [pc, #144]	; (8002684 <HAL_CAN_MspInit+0x164>)
 80025f4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80025f8:	6413      	str	r3, [r2, #64]	; 0x40
 80025fa:	4b22      	ldr	r3, [pc, #136]	; (8002684 <HAL_CAN_MspInit+0x164>)
 80025fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002602:	613b      	str	r3, [r7, #16]
 8002604:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002606:	4b1e      	ldr	r3, [pc, #120]	; (8002680 <HAL_CAN_MspInit+0x160>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	3301      	adds	r3, #1
 800260c:	4a1c      	ldr	r2, [pc, #112]	; (8002680 <HAL_CAN_MspInit+0x160>)
 800260e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002610:	4b1b      	ldr	r3, [pc, #108]	; (8002680 <HAL_CAN_MspInit+0x160>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	2b01      	cmp	r3, #1
 8002616:	d10d      	bne.n	8002634 <HAL_CAN_MspInit+0x114>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002618:	2300      	movs	r3, #0
 800261a:	60fb      	str	r3, [r7, #12]
 800261c:	4b19      	ldr	r3, [pc, #100]	; (8002684 <HAL_CAN_MspInit+0x164>)
 800261e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002620:	4a18      	ldr	r2, [pc, #96]	; (8002684 <HAL_CAN_MspInit+0x164>)
 8002622:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002626:	6413      	str	r3, [r2, #64]	; 0x40
 8002628:	4b16      	ldr	r3, [pc, #88]	; (8002684 <HAL_CAN_MspInit+0x164>)
 800262a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002630:	60fb      	str	r3, [r7, #12]
 8002632:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002634:	2300      	movs	r3, #0
 8002636:	60bb      	str	r3, [r7, #8]
 8002638:	4b12      	ldr	r3, [pc, #72]	; (8002684 <HAL_CAN_MspInit+0x164>)
 800263a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263c:	4a11      	ldr	r2, [pc, #68]	; (8002684 <HAL_CAN_MspInit+0x164>)
 800263e:	f043 0302 	orr.w	r3, r3, #2
 8002642:	6313      	str	r3, [r2, #48]	; 0x30
 8002644:	4b0f      	ldr	r3, [pc, #60]	; (8002684 <HAL_CAN_MspInit+0x164>)
 8002646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002648:	f003 0302 	and.w	r3, r3, #2
 800264c:	60bb      	str	r3, [r7, #8]
 800264e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002650:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002654:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002656:	2302      	movs	r3, #2
 8002658:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800265a:	2300      	movs	r3, #0
 800265c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800265e:	2303      	movs	r3, #3
 8002660:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8002662:	2309      	movs	r3, #9
 8002664:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002666:	f107 031c 	add.w	r3, r7, #28
 800266a:	4619      	mov	r1, r3
 800266c:	4808      	ldr	r0, [pc, #32]	; (8002690 <HAL_CAN_MspInit+0x170>)
 800266e:	f00d fac5 	bl	800fbfc <HAL_GPIO_Init>
}
 8002672:	bf00      	nop
 8002674:	3730      	adds	r7, #48	; 0x30
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	40006400 	.word	0x40006400
 8002680:	20001658 	.word	0x20001658
 8002684:	40023800 	.word	0x40023800
 8002688:	40020000 	.word	0x40020000
 800268c:	40006800 	.word	0x40006800
 8002690:	40020400 	.word	0x40020400

08002694 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800269a:	2300      	movs	r3, #0
 800269c:	607b      	str	r3, [r7, #4]
 800269e:	4b0c      	ldr	r3, [pc, #48]	; (80026d0 <MX_DMA_Init+0x3c>)
 80026a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a2:	4a0b      	ldr	r2, [pc, #44]	; (80026d0 <MX_DMA_Init+0x3c>)
 80026a4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80026a8:	6313      	str	r3, [r2, #48]	; 0x30
 80026aa:	4b09      	ldr	r3, [pc, #36]	; (80026d0 <MX_DMA_Init+0x3c>)
 80026ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026b2:	607b      	str	r3, [r7, #4]
 80026b4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80026b6:	2200      	movs	r2, #0
 80026b8:	2105      	movs	r1, #5
 80026ba:	2038      	movs	r0, #56	; 0x38
 80026bc:	f00c ff04 	bl	800f4c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80026c0:	2038      	movs	r0, #56	; 0x38
 80026c2:	f00c ff1d 	bl	800f500 <HAL_NVIC_EnableIRQ>

}
 80026c6:	bf00      	nop
 80026c8:	3708      	adds	r7, #8
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	40023800 	.word	0x40023800

080026d4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b08a      	sub	sp, #40	; 0x28
 80026d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026da:	f107 0314 	add.w	r3, r7, #20
 80026de:	2200      	movs	r2, #0
 80026e0:	601a      	str	r2, [r3, #0]
 80026e2:	605a      	str	r2, [r3, #4]
 80026e4:	609a      	str	r2, [r3, #8]
 80026e6:	60da      	str	r2, [r3, #12]
 80026e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80026ea:	2300      	movs	r3, #0
 80026ec:	613b      	str	r3, [r7, #16]
 80026ee:	4b4d      	ldr	r3, [pc, #308]	; (8002824 <MX_GPIO_Init+0x150>)
 80026f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f2:	4a4c      	ldr	r2, [pc, #304]	; (8002824 <MX_GPIO_Init+0x150>)
 80026f4:	f043 0310 	orr.w	r3, r3, #16
 80026f8:	6313      	str	r3, [r2, #48]	; 0x30
 80026fa:	4b4a      	ldr	r3, [pc, #296]	; (8002824 <MX_GPIO_Init+0x150>)
 80026fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fe:	f003 0310 	and.w	r3, r3, #16
 8002702:	613b      	str	r3, [r7, #16]
 8002704:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002706:	2300      	movs	r3, #0
 8002708:	60fb      	str	r3, [r7, #12]
 800270a:	4b46      	ldr	r3, [pc, #280]	; (8002824 <MX_GPIO_Init+0x150>)
 800270c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270e:	4a45      	ldr	r2, [pc, #276]	; (8002824 <MX_GPIO_Init+0x150>)
 8002710:	f043 0304 	orr.w	r3, r3, #4
 8002714:	6313      	str	r3, [r2, #48]	; 0x30
 8002716:	4b43      	ldr	r3, [pc, #268]	; (8002824 <MX_GPIO_Init+0x150>)
 8002718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271a:	f003 0304 	and.w	r3, r3, #4
 800271e:	60fb      	str	r3, [r7, #12]
 8002720:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002722:	2300      	movs	r3, #0
 8002724:	60bb      	str	r3, [r7, #8]
 8002726:	4b3f      	ldr	r3, [pc, #252]	; (8002824 <MX_GPIO_Init+0x150>)
 8002728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272a:	4a3e      	ldr	r2, [pc, #248]	; (8002824 <MX_GPIO_Init+0x150>)
 800272c:	f043 0301 	orr.w	r3, r3, #1
 8002730:	6313      	str	r3, [r2, #48]	; 0x30
 8002732:	4b3c      	ldr	r3, [pc, #240]	; (8002824 <MX_GPIO_Init+0x150>)
 8002734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002736:	f003 0301 	and.w	r3, r3, #1
 800273a:	60bb      	str	r3, [r7, #8]
 800273c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800273e:	2300      	movs	r3, #0
 8002740:	607b      	str	r3, [r7, #4]
 8002742:	4b38      	ldr	r3, [pc, #224]	; (8002824 <MX_GPIO_Init+0x150>)
 8002744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002746:	4a37      	ldr	r2, [pc, #220]	; (8002824 <MX_GPIO_Init+0x150>)
 8002748:	f043 0302 	orr.w	r3, r3, #2
 800274c:	6313      	str	r3, [r2, #48]	; 0x30
 800274e:	4b35      	ldr	r3, [pc, #212]	; (8002824 <MX_GPIO_Init+0x150>)
 8002750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002752:	f003 0302 	and.w	r3, r3, #2
 8002756:	607b      	str	r3, [r7, #4]
 8002758:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, enable_AIR_plus_Pin|enable_AIR_minus_Pin|enable_precharge_Pin, GPIO_PIN_RESET);
 800275a:	2200      	movs	r2, #0
 800275c:	210e      	movs	r1, #14
 800275e:	4832      	ldr	r0, [pc, #200]	; (8002828 <MX_GPIO_Init+0x154>)
 8002760:	f00d fc00 	bl	800ff64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, WARNING_LED_Pin|HEARTBEAT_LED_Pin|OK_LED_Pin, GPIO_PIN_RESET);
 8002764:	2200      	movs	r2, #0
 8002766:	21e0      	movs	r1, #224	; 0xe0
 8002768:	4830      	ldr	r0, [pc, #192]	; (800282c <MX_GPIO_Init+0x158>)
 800276a:	f00d fbfb 	bl	800ff64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LTC_CS_Pin|error_LED_Pin|AMS_error_Pin|IMD_error_Pin, GPIO_PIN_RESET);
 800276e:	2200      	movs	r2, #0
 8002770:	f44f 712c 	mov.w	r1, #688	; 0x2b0
 8002774:	482e      	ldr	r0, [pc, #184]	; (8002830 <MX_GPIO_Init+0x15c>)
 8002776:	f00d fbf5 	bl	800ff64 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = enable_AIR_plus_Pin|enable_AIR_minus_Pin|enable_precharge_Pin;
 800277a:	230e      	movs	r3, #14
 800277c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800277e:	2301      	movs	r3, #1
 8002780:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002782:	2300      	movs	r3, #0
 8002784:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002786:	2300      	movs	r3, #0
 8002788:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800278a:	f107 0314 	add.w	r3, r7, #20
 800278e:	4619      	mov	r1, r3
 8002790:	4825      	ldr	r0, [pc, #148]	; (8002828 <MX_GPIO_Init+0x154>)
 8002792:	f00d fa33 	bl	800fbfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = AIR_plus_closed_Pin|AIR_minus_closed_Pin|precharge_closed_Pin;
 8002796:	2370      	movs	r3, #112	; 0x70
 8002798:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800279a:	2300      	movs	r3, #0
 800279c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800279e:	2302      	movs	r3, #2
 80027a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80027a2:	f107 0314 	add.w	r3, r7, #20
 80027a6:	4619      	mov	r1, r3
 80027a8:	481f      	ldr	r0, [pc, #124]	; (8002828 <MX_GPIO_Init+0x154>)
 80027aa:	f00d fa27 	bl	800fbfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = WARNING_LED_Pin|HEARTBEAT_LED_Pin|OK_LED_Pin;
 80027ae:	23e0      	movs	r3, #224	; 0xe0
 80027b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027b2:	2301      	movs	r3, #1
 80027b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b6:	2300      	movs	r3, #0
 80027b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ba:	2300      	movs	r3, #0
 80027bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027be:	f107 0314 	add.w	r3, r7, #20
 80027c2:	4619      	mov	r1, r3
 80027c4:	4819      	ldr	r0, [pc, #100]	; (800282c <MX_GPIO_Init+0x158>)
 80027c6:	f00d fa19 	bl	800fbfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LTC_CS_Pin|error_LED_Pin|AMS_error_Pin|IMD_error_Pin;
 80027ca:	f44f 732c 	mov.w	r3, #688	; 0x2b0
 80027ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027d0:	2301      	movs	r3, #1
 80027d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d4:	2300      	movs	r3, #0
 80027d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027d8:	2300      	movs	r3, #0
 80027da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027dc:	f107 0314 	add.w	r3, r7, #20
 80027e0:	4619      	mov	r1, r3
 80027e2:	4813      	ldr	r0, [pc, #76]	; (8002830 <MX_GPIO_Init+0x15c>)
 80027e4:	f00d fa0a 	bl	800fbfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SC_probe_Pin|IMD_ok_Pin;
 80027e8:	2306      	movs	r3, #6
 80027ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027ec:	2300      	movs	r3, #0
 80027ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f0:	2300      	movs	r3, #0
 80027f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027f4:	f107 0314 	add.w	r3, r7, #20
 80027f8:	4619      	mov	r1, r3
 80027fa:	480e      	ldr	r0, [pc, #56]	; (8002834 <MX_GPIO_Init+0x160>)
 80027fc:	f00d f9fe 	bl	800fbfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = AMS_error_latched_Pin|IMD_error_latched_Pin;
 8002800:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002804:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002806:	2300      	movs	r3, #0
 8002808:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280a:	2300      	movs	r3, #0
 800280c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800280e:	f107 0314 	add.w	r3, r7, #20
 8002812:	4619      	mov	r1, r3
 8002814:	4806      	ldr	r0, [pc, #24]	; (8002830 <MX_GPIO_Init+0x15c>)
 8002816:	f00d f9f1 	bl	800fbfc <HAL_GPIO_Init>

}
 800281a:	bf00      	nop
 800281c:	3728      	adds	r7, #40	; 0x28
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	40023800 	.word	0x40023800
 8002828:	40021000 	.word	0x40021000
 800282c:	40020000 	.word	0x40020000
 8002830:	40020800 	.word	0x40020800
 8002834:	40020400 	.word	0x40020400

08002838 <main>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int main() {
 8002838:	b580      	push	{r7, lr}
 800283a:	af00      	add	r7, sp, #0
	/* INSTRUMENTATE */
	SEGGER_SYSVIEW_Conf();
 800283c:	f7fe fe90 	bl	8001560 <SEGGER_SYSVIEW_Conf>

	/* RESET PERIPHERALS, ETC. */
	HAL_Init();
 8002840:	f00b fcb8 	bl	800e1b4 <HAL_Init>

	/* CONFIGURE SYSTEM CLOCK */
	SystemClock_Config();
 8002844:	f000 f970 	bl	8002b28 <SystemClock_Config>

	/* INITIALZE PERIPHERALS */
	MX_GPIO_Init();
 8002848:	f7ff ff44 	bl	80026d4 <MX_GPIO_Init>
	MX_SPI2_Init();
 800284c:	f000 fe88 	bl	8003560 <MX_SPI2_Init>
	MX_CAN1_Init();
 8002850:	f7ff fdfa 	bl	8002448 <MX_CAN1_Init>
	MX_CAN2_Init();
 8002854:	f7ff fe2e 	bl	80024b4 <MX_CAN2_Init>
	MX_TIM1_Init();
 8002858:	f001 f81e 	bl	8003898 <MX_TIM1_Init>
	MX_DMA_Init();
 800285c:	f7ff ff1a 	bl	8002694 <MX_DMA_Init>
	MX_TIM3_Init();
 8002860:	f001 f956 	bl	8003b10 <MX_TIM3_Init>
	MX_TIM2_Init();
 8002864:	f001 f8b8 	bl	80039d8 <MX_TIM2_Init>
	MX_ADC1_Init();
 8002868:	f7ff fae8 	bl	8001e3c <MX_ADC1_Init>

	//initialize_can(&hcan1, &hcan2);
	initialize_LTC(&hspi2);
 800286c:	487c      	ldr	r0, [pc, #496]	; (8002a60 <main+0x228>)
 800286e:	f000 fe67 	bl	8003540 <initialize_LTC>
	/* Initialize kernel */
	osKernelInitialize();
 8002872:	f00f fefb 	bl	801266c <osKernelInitialize>

	/* INITIALIZE QUEUES */

	state_queue = xQueueCreate(state_queue_info.element_count,
 8002876:	2301      	movs	r3, #1
 8002878:	2201      	movs	r2, #1
 800287a:	4611      	mov	r1, r2
 800287c:	2200      	movs	r2, #0
 800287e:	4618      	mov	r0, r3
 8002880:	f010 f9da 	bl	8012c38 <xQueueGenericCreate>
 8002884:	4603      	mov	r3, r0
 8002886:	4a77      	ldr	r2, [pc, #476]	; (8002a64 <main+0x22c>)
 8002888:	6013      	str	r3, [r2, #0]
			state_queue_info.element_size);

	charge_state_queue = xQueueCreate(charge_state_queue_info.element_count,
 800288a:	2301      	movs	r3, #1
 800288c:	2201      	movs	r2, #1
 800288e:	4611      	mov	r1, r2
 8002890:	2200      	movs	r2, #0
 8002892:	4618      	mov	r0, r3
 8002894:	f010 f9d0 	bl	8012c38 <xQueueGenericCreate>
 8002898:	4603      	mov	r3, r0
 800289a:	4a73      	ldr	r2, [pc, #460]	; (8002a68 <main+0x230>)
 800289c:	6013      	str	r3, [r2, #0]
			charge_state_queue_info.element_size);

	GPIO_queue = xQueueCreate(GPIO_queue_info.element_count,
 800289e:	2301      	movs	r3, #1
 80028a0:	2207      	movs	r2, #7
 80028a2:	4611      	mov	r1, r2
 80028a4:	2200      	movs	r2, #0
 80028a6:	4618      	mov	r0, r3
 80028a8:	f010 f9c6 	bl	8012c38 <xQueueGenericCreate>
 80028ac:	4603      	mov	r3, r0
 80028ae:	4a6f      	ldr	r2, [pc, #444]	; (8002a6c <main+0x234>)
 80028b0:	6013      	str	r3, [r2, #0]
			GPIO_queue_info.element_size);

	IMD_queue = xQueueCreate(IMD_queue_info.element_count,
 80028b2:	2301      	movs	r3, #1
 80028b4:	2208      	movs	r2, #8
 80028b6:	4611      	mov	r1, r2
 80028b8:	2200      	movs	r2, #0
 80028ba:	4618      	mov	r0, r3
 80028bc:	f010 f9bc 	bl	8012c38 <xQueueGenericCreate>
 80028c0:	4603      	mov	r3, r0
 80028c2:	4a6b      	ldr	r2, [pc, #428]	; (8002a70 <main+0x238>)
 80028c4:	6013      	str	r3, [r2, #0]
			IMD_queue_info.element_size);

	ams_temperatures_queue = xQueueCreate(
 80028c6:	2301      	movs	r3, #1
 80028c8:	2210      	movs	r2, #16
 80028ca:	4611      	mov	r1, r2
 80028cc:	2200      	movs	r2, #0
 80028ce:	4618      	mov	r0, r3
 80028d0:	f010 f9b2 	bl	8012c38 <xQueueGenericCreate>
 80028d4:	4603      	mov	r3, r0
 80028d6:	4a67      	ldr	r2, [pc, #412]	; (8002a74 <main+0x23c>)
 80028d8:	6013      	str	r3, [r2, #0]
			ams_temperatures_queue_info.element_count,
			ams_temperatures_queue_info.element_size);

	dbu_status_1_queue = xQueueCreate(dbu_status_1_queue_info.element_count,
 80028da:	2301      	movs	r3, #1
 80028dc:	2208      	movs	r2, #8
 80028de:	4611      	mov	r1, r2
 80028e0:	2200      	movs	r2, #0
 80028e2:	4618      	mov	r0, r3
 80028e4:	f010 f9a8 	bl	8012c38 <xQueueGenericCreate>
 80028e8:	4603      	mov	r3, r0
 80028ea:	4a63      	ldr	r2, [pc, #396]	; (8002a78 <main+0x240>)
 80028ec:	6013      	str	r3, [r2, #0]
			dbu_status_1_queue_info.element_size);

	ivt_msg_result_i_queue = xQueueCreate(
 80028ee:	2301      	movs	r3, #1
 80028f0:	2208      	movs	r2, #8
 80028f2:	4611      	mov	r1, r2
 80028f4:	2200      	movs	r2, #0
 80028f6:	4618      	mov	r0, r3
 80028f8:	f010 f99e 	bl	8012c38 <xQueueGenericCreate>
 80028fc:	4603      	mov	r3, r0
 80028fe:	4a5f      	ldr	r2, [pc, #380]	; (8002a7c <main+0x244>)
 8002900:	6013      	str	r3, [r2, #0]
			ivt_msg_result_i_queue_info.element_count,
			ivt_msg_result_i_queue_info.element_size);

	ivt_msg_result_u1_queue = xQueueCreate(
 8002902:	2301      	movs	r3, #1
 8002904:	2208      	movs	r2, #8
 8002906:	4611      	mov	r1, r2
 8002908:	2200      	movs	r2, #0
 800290a:	4618      	mov	r0, r3
 800290c:	f010 f994 	bl	8012c38 <xQueueGenericCreate>
 8002910:	4603      	mov	r3, r0
 8002912:	4a5b      	ldr	r2, [pc, #364]	; (8002a80 <main+0x248>)
 8002914:	6013      	str	r3, [r2, #0]
			ivt_msg_result_u1_queue_info.element_count,
			ivt_msg_result_u1_queue_info.element_size);

	ivt_msg_result_u3_queue = xQueueCreate(
 8002916:	2301      	movs	r3, #1
 8002918:	2208      	movs	r2, #8
 800291a:	4611      	mov	r1, r2
 800291c:	2200      	movs	r2, #0
 800291e:	4618      	mov	r0, r3
 8002920:	f010 f98a 	bl	8012c38 <xQueueGenericCreate>
 8002924:	4603      	mov	r3, r0
 8002926:	4a57      	ldr	r2, [pc, #348]	; (8002a84 <main+0x24c>)
 8002928:	6013      	str	r3, [r2, #0]
			ivt_msg_result_u3_queue_info.element_count,
			ivt_msg_result_u3_queue_info.element_size);

	can_rx_queue = xQueueCreate(can_rx_queue_info.element_count,
 800292a:	2308      	movs	r3, #8
 800292c:	223c      	movs	r2, #60	; 0x3c
 800292e:	4611      	mov	r1, r2
 8002930:	2200      	movs	r2, #0
 8002932:	4618      	mov	r0, r3
 8002934:	f010 f980 	bl	8012c38 <xQueueGenericCreate>
 8002938:	4603      	mov	r3, r0
 800293a:	4a53      	ldr	r2, [pc, #332]	; (8002a88 <main+0x250>)
 800293c:	6013      	str	r3, [r2, #0]
			can_rx_queue_info.element_size);

	can1_tx_queue = xQueueCreate(can1_tx_queue_info.element_count,
 800293e:	2348      	movs	r3, #72	; 0x48
 8002940:	223c      	movs	r2, #60	; 0x3c
 8002942:	4611      	mov	r1, r2
 8002944:	2200      	movs	r2, #0
 8002946:	4618      	mov	r0, r3
 8002948:	f010 f976 	bl	8012c38 <xQueueGenericCreate>
 800294c:	4603      	mov	r3, r0
 800294e:	4a4f      	ldr	r2, [pc, #316]	; (8002a8c <main+0x254>)
 8002950:	6013      	str	r3, [r2, #0]
			can1_tx_queue_info.element_size);

	can2_tx_queue = xQueueCreate(can2_tx_queue_info.element_count,
 8002952:	2348      	movs	r3, #72	; 0x48
 8002954:	223c      	movs	r2, #60	; 0x3c
 8002956:	4611      	mov	r1, r2
 8002958:	2200      	movs	r2, #0
 800295a:	4618      	mov	r0, r3
 800295c:	f010 f96c 	bl	8012c38 <xQueueGenericCreate>
 8002960:	4603      	mov	r3, r0
 8002962:	4a4b      	ldr	r2, [pc, #300]	; (8002a90 <main+0x258>)
 8002964:	6013      	str	r3, [r2, #0]
			can2_tx_queue_info.element_size);

	/* INITIALIZE TASKS */

	first_tick = 0.25 * TICK2HZ + osKernelGetTickCount(); // Wait for segger, etc
 8002966:	f00f fecb 	bl	8012700 <osKernelGetTickCount>
 800296a:	4603      	mov	r3, r0
 800296c:	4618      	mov	r0, r3
 800296e:	f7fd fdbb 	bl	80004e8 <__aeabi_ui2d>
 8002972:	a339      	add	r3, pc, #228	; (adr r3, 8002a58 <main+0x220>)
 8002974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002978:	f7fd fc7a 	bl	8000270 <__adddf3>
 800297c:	4602      	mov	r2, r0
 800297e:	460b      	mov	r3, r1
 8002980:	4610      	mov	r0, r2
 8002982:	4619      	mov	r1, r3
 8002984:	f7fe f902 	bl	8000b8c <__aeabi_d2uiz>
 8002988:	4603      	mov	r3, r0
 800298a:	4a42      	ldr	r2, [pc, #264]	; (8002a94 <main+0x25c>)
 800298c:	6013      	str	r3, [r2, #0]

	SM_task_handle = osThreadNew(start_SM_task, NULL, &SM_task_attributes);
 800298e:	4a42      	ldr	r2, [pc, #264]	; (8002a98 <main+0x260>)
 8002990:	2100      	movs	r1, #0
 8002992:	4842      	ldr	r0, [pc, #264]	; (8002a9c <main+0x264>)
 8002994:	f00f fec9 	bl	801272a <osThreadNew>
 8002998:	4603      	mov	r3, r0
 800299a:	4a41      	ldr	r2, [pc, #260]	; (8002aa0 <main+0x268>)
 800299c:	6013      	str	r3, [r2, #0]

	SIM_task_handle = osThreadNew(start_SIM_task, NULL, &SIM_task_attributes);
 800299e:	4a41      	ldr	r2, [pc, #260]	; (8002aa4 <main+0x26c>)
 80029a0:	2100      	movs	r1, #0
 80029a2:	4841      	ldr	r0, [pc, #260]	; (8002aa8 <main+0x270>)
 80029a4:	f00f fec1 	bl	801272a <osThreadNew>
 80029a8:	4603      	mov	r3, r0
 80029aa:	4a40      	ldr	r2, [pc, #256]	; (8002aac <main+0x274>)
 80029ac:	6013      	str	r3, [r2, #0]

	CSE_task_handle = osThreadNew(start_CSE_task, NULL, &CSE_task_attributes);
 80029ae:	4a40      	ldr	r2, [pc, #256]	; (8002ab0 <main+0x278>)
 80029b0:	2100      	movs	r1, #0
 80029b2:	4840      	ldr	r0, [pc, #256]	; (8002ab4 <main+0x27c>)
 80029b4:	f00f feb9 	bl	801272a <osThreadNew>
 80029b8:	4603      	mov	r3, r0
 80029ba:	4a3f      	ldr	r2, [pc, #252]	; (8002ab8 <main+0x280>)
 80029bc:	6013      	str	r3, [r2, #0]

	IMD_task_handle = osThreadNew(start_IMD_task, NULL, &IMD_task_attributes);
 80029be:	4a3f      	ldr	r2, [pc, #252]	; (8002abc <main+0x284>)
 80029c0:	2100      	movs	r1, #0
 80029c2:	483f      	ldr	r0, [pc, #252]	; (8002ac0 <main+0x288>)
 80029c4:	f00f feb1 	bl	801272a <osThreadNew>
 80029c8:	4603      	mov	r3, r0
 80029ca:	4a3e      	ldr	r2, [pc, #248]	; (8002ac4 <main+0x28c>)
 80029cc:	6013      	str	r3, [r2, #0]

	GPIO_task_handle = osThreadNew(start_GPIO_task, NULL,
 80029ce:	4a3e      	ldr	r2, [pc, #248]	; (8002ac8 <main+0x290>)
 80029d0:	2100      	movs	r1, #0
 80029d2:	483e      	ldr	r0, [pc, #248]	; (8002acc <main+0x294>)
 80029d4:	f00f fea9 	bl	801272a <osThreadNew>
 80029d8:	4603      	mov	r3, r0
 80029da:	4a3d      	ldr	r2, [pc, #244]	; (8002ad0 <main+0x298>)
 80029dc:	6013      	str	r3, [r2, #0]
			&GPIO_task_attributes);

	ADC_task_handle = osThreadNew(start_ADC_task, NULL, &ADC_task_attributes);
 80029de:	4a3d      	ldr	r2, [pc, #244]	; (8002ad4 <main+0x29c>)
 80029e0:	2100      	movs	r1, #0
 80029e2:	483d      	ldr	r0, [pc, #244]	; (8002ad8 <main+0x2a0>)
 80029e4:	f00f fea1 	bl	801272a <osThreadNew>
 80029e8:	4603      	mov	r3, r0
 80029ea:	4a3c      	ldr	r2, [pc, #240]	; (8002adc <main+0x2a4>)
 80029ec:	6013      	str	r3, [r2, #0]

	COOL_task_handle = osThreadNew(start_COOL_task, NULL,
 80029ee:	4a3c      	ldr	r2, [pc, #240]	; (8002ae0 <main+0x2a8>)
 80029f0:	2100      	movs	r1, #0
 80029f2:	483c      	ldr	r0, [pc, #240]	; (8002ae4 <main+0x2ac>)
 80029f4:	f00f fe99 	bl	801272a <osThreadNew>
 80029f8:	4603      	mov	r3, r0
 80029fa:	4a3b      	ldr	r2, [pc, #236]	; (8002ae8 <main+0x2b0>)
 80029fc:	6013      	str	r3, [r2, #0]
			&COOL_task_attributes);

	CAN_rx_task_handle = osThreadNew(start_CAN_rx_task, NULL,
 80029fe:	4a3b      	ldr	r2, [pc, #236]	; (8002aec <main+0x2b4>)
 8002a00:	2100      	movs	r1, #0
 8002a02:	483b      	ldr	r0, [pc, #236]	; (8002af0 <main+0x2b8>)
 8002a04:	f00f fe91 	bl	801272a <osThreadNew>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	4a3a      	ldr	r2, [pc, #232]	; (8002af4 <main+0x2bc>)
 8002a0c:	6013      	str	r3, [r2, #0]
			&CAN_rx_task_attributes);

	CAN_tx_task_handle = osThreadNew(start_CAN_tx_task, NULL,
 8002a0e:	4a3a      	ldr	r2, [pc, #232]	; (8002af8 <main+0x2c0>)
 8002a10:	2100      	movs	r1, #0
 8002a12:	483a      	ldr	r0, [pc, #232]	; (8002afc <main+0x2c4>)
 8002a14:	f00f fe89 	bl	801272a <osThreadNew>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	4a39      	ldr	r2, [pc, #228]	; (8002b00 <main+0x2c8>)
 8002a1c:	6013      	str	r3, [r2, #0]
			&CAN_tx_task_attributes);

	COM_task_handle = osThreadNew(start_COM_task, NULL, &COM_task_attributes);
 8002a1e:	4a39      	ldr	r2, [pc, #228]	; (8002b04 <main+0x2cc>)
 8002a20:	2100      	movs	r1, #0
 8002a22:	4839      	ldr	r0, [pc, #228]	; (8002b08 <main+0x2d0>)
 8002a24:	f00f fe81 	bl	801272a <osThreadNew>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	4a38      	ldr	r2, [pc, #224]	; (8002b0c <main+0x2d4>)
 8002a2c:	6013      	str	r3, [r2, #0]

	IWDG_task_handle = osThreadNew(start_IWDG_task, NULL,
 8002a2e:	4a38      	ldr	r2, [pc, #224]	; (8002b10 <main+0x2d8>)
 8002a30:	2100      	movs	r1, #0
 8002a32:	4838      	ldr	r0, [pc, #224]	; (8002b14 <main+0x2dc>)
 8002a34:	f00f fe79 	bl	801272a <osThreadNew>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	4a37      	ldr	r2, [pc, #220]	; (8002b18 <main+0x2e0>)
 8002a3c:	6013      	str	r3, [r2, #0]
			&IWDG_task_attributes);

	event_handler_task_handle = osThreadNew(start_event_handler_task, NULL,
 8002a3e:	4a37      	ldr	r2, [pc, #220]	; (8002b1c <main+0x2e4>)
 8002a40:	2100      	movs	r1, #0
 8002a42:	4837      	ldr	r0, [pc, #220]	; (8002b20 <main+0x2e8>)
 8002a44:	f00f fe71 	bl	801272a <osThreadNew>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	4a36      	ldr	r2, [pc, #216]	; (8002b24 <main+0x2ec>)
 8002a4c:	6013      	str	r3, [r2, #0]
			&event_handler_task_attributes);

	/* Launch RTOS ! */
	osKernelStart();
 8002a4e:	f00f fe31 	bl	80126b4 <osKernelStart>

	for (;;)
 8002a52:	e7fe      	b.n	8002a52 <main+0x21a>
 8002a54:	f3af 8000 	nop.w
 8002a58:	f3cf3cf4 	.word	0xf3cf3cf4
 8002a5c:	4047cf3c 	.word	0x4047cf3c
 8002a60:	2001ba74 	.word	0x2001ba74
 8002a64:	2001b424 	.word	0x2001b424
 8002a68:	2001b44c 	.word	0x2001b44c
 8002a6c:	2001b448 	.word	0x2001b448
 8002a70:	2001b430 	.word	0x2001b430
 8002a74:	2001b450 	.word	0x2001b450
 8002a78:	2001b420 	.word	0x2001b420
 8002a7c:	2001b438 	.word	0x2001b438
 8002a80:	2001b444 	.word	0x2001b444
 8002a84:	2001b42c 	.word	0x2001b42c
 8002a88:	2001b454 	.word	0x2001b454
 8002a8c:	2001b440 	.word	0x2001b440
 8002a90:	2001b458 	.word	0x2001b458
 8002a94:	2001b4a8 	.word	0x2001b4a8
 8002a98:	080178d0 	.word	0x080178d0
 8002a9c:	08002c01 	.word	0x08002c01
 8002aa0:	2001b468 	.word	0x2001b468
 8002aa4:	080178f4 	.word	0x080178f4
 8002aa8:	08003471 	.word	0x08003471
 8002aac:	2001b470 	.word	0x2001b470
 8002ab0:	0801793c 	.word	0x0801793c
 8002ab4:	080032f1 	.word	0x080032f1
 8002ab8:	2001b478 	.word	0x2001b478
 8002abc:	08017a14 	.word	0x08017a14
 8002ac0:	08002dd1 	.word	0x08002dd1
 8002ac4:	2001b4b0 	.word	0x2001b4b0
 8002ac8:	080179f0 	.word	0x080179f0
 8002acc:	08002ea1 	.word	0x08002ea1
 8002ad0:	2001b464 	.word	0x2001b464
 8002ad4:	080179cc 	.word	0x080179cc
 8002ad8:	08002fa9 	.word	0x08002fa9
 8002adc:	2001b4a4 	.word	0x2001b4a4
 8002ae0:	08017918 	.word	0x08017918
 8002ae4:	08003389 	.word	0x08003389
 8002ae8:	2001b474 	.word	0x2001b474
 8002aec:	08017984 	.word	0x08017984
 8002af0:	080031d1 	.word	0x080031d1
 8002af4:	2001b4a0 	.word	0x2001b4a0
 8002af8:	08017960 	.word	0x08017960
 8002afc:	08003261 	.word	0x08003261
 8002b00:	2001b46c 	.word	0x2001b46c
 8002b04:	080179a8 	.word	0x080179a8
 8002b08:	08003089 	.word	0x08003089
 8002b0c:	2001b460 	.word	0x2001b460
 8002b10:	08017a5c 	.word	0x08017a5c
 8002b14:	08002ca1 	.word	0x08002ca1
 8002b18:	2001b4ac 	.word	0x2001b4ac
 8002b1c:	08017a38 	.word	0x08017a38
 8002b20:	08002d41 	.word	0x08002d41
 8002b24:	2001b45c 	.word	0x2001b45c

08002b28 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b094      	sub	sp, #80	; 0x50
 8002b2c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002b2e:	f107 0320 	add.w	r3, r7, #32
 8002b32:	2230      	movs	r2, #48	; 0x30
 8002b34:	2100      	movs	r1, #0
 8002b36:	4618      	mov	r0, r3
 8002b38:	f014 f81e 	bl	8016b78 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002b3c:	f107 030c 	add.w	r3, r7, #12
 8002b40:	2200      	movs	r2, #0
 8002b42:	601a      	str	r2, [r3, #0]
 8002b44:	605a      	str	r2, [r3, #4]
 8002b46:	609a      	str	r2, [r3, #8]
 8002b48:	60da      	str	r2, [r3, #12]
 8002b4a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	60bb      	str	r3, [r7, #8]
 8002b50:	4b28      	ldr	r3, [pc, #160]	; (8002bf4 <SystemClock_Config+0xcc>)
 8002b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b54:	4a27      	ldr	r2, [pc, #156]	; (8002bf4 <SystemClock_Config+0xcc>)
 8002b56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b5a:	6413      	str	r3, [r2, #64]	; 0x40
 8002b5c:	4b25      	ldr	r3, [pc, #148]	; (8002bf4 <SystemClock_Config+0xcc>)
 8002b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b64:	60bb      	str	r3, [r7, #8]
 8002b66:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b68:	2300      	movs	r3, #0
 8002b6a:	607b      	str	r3, [r7, #4]
 8002b6c:	4b22      	ldr	r3, [pc, #136]	; (8002bf8 <SystemClock_Config+0xd0>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a21      	ldr	r2, [pc, #132]	; (8002bf8 <SystemClock_Config+0xd0>)
 8002b72:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b76:	6013      	str	r3, [r2, #0]
 8002b78:	4b1f      	ldr	r3, [pc, #124]	; (8002bf8 <SystemClock_Config+0xd0>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b80:	607b      	str	r3, [r7, #4]
 8002b82:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 8002b84:	230a      	movs	r3, #10
 8002b86:	623b      	str	r3, [r7, #32]
			| RCC_OSCILLATORTYPE_LSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002b8c:	2310      	movs	r3, #16
 8002b8e:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002b90:	2301      	movs	r3, #1
 8002b92:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b94:	2302      	movs	r3, #2
 8002b96:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8002b9c:	2308      	movs	r3, #8
 8002b9e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 84;
 8002ba0:	2354      	movs	r3, #84	; 0x54
 8002ba2:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002ba4:	2302      	movs	r3, #2
 8002ba6:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8002ba8:	2304      	movs	r3, #4
 8002baa:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002bac:	f107 0320 	add.w	r3, r7, #32
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f00d fa01 	bl	800ffb8 <HAL_RCC_OscConfig>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d001      	beq.n	8002bc0 <SystemClock_Config+0x98>
		Error_Handler();
 8002bbc:	f000 fcba 	bl	8003534 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002bc0:	230f      	movs	r3, #15
 8002bc2:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002bc4:	2302      	movs	r3, #2
 8002bc6:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002bcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bd0:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8002bd6:	f107 030c 	add.w	r3, r7, #12
 8002bda:	2102      	movs	r1, #2
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f00d fc63 	bl	80104a8 <HAL_RCC_ClockConfig>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d001      	beq.n	8002bec <SystemClock_Config+0xc4>
		Error_Handler();
 8002be8:	f000 fca4 	bl	8003534 <Error_Handler>
	}
}
 8002bec:	bf00      	nop
 8002bee:	3750      	adds	r7, #80	; 0x50
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	40023800 	.word	0x40023800
 8002bf8:	40007000 	.word	0x40007000
 8002bfc:	00000000 	.word	0x00000000

08002c00 <start_SM_task>:

/* USER CODE BEGIN 4 */

/* ENTER TASKS */
void start_SM_task(void *argument) {
 8002c00:	b5b0      	push	{r4, r5, r7, lr}
 8002c02:	b086      	sub	sp, #24
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
	SEGGER_SYSVIEW_Start();
 8002c08:	f013 fa5e 	bl	80160c8 <SEGGER_SYSVIEW_Start>

	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 8002c0c:	4b22      	ldr	r3, [pc, #136]	; (8002c98 <start_SM_task+0x98>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	617b      	str	r3, [r7, #20]
	uint32_t tick_increment = TICK2HZ * SM_task_info.periodicity;
 8002c12:	4b22      	ldr	r3, [pc, #136]	; (8002c9c <start_SM_task+0x9c>)
 8002c14:	4618      	mov	r0, r3
 8002c16:	f7fd fc89 	bl	800052c <__aeabi_f2d>
 8002c1a:	a31d      	add	r3, pc, #116	; (adr r3, 8002c90 <start_SM_task+0x90>)
 8002c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c20:	f7fd fcdc 	bl	80005dc <__aeabi_dmul>
 8002c24:	4602      	mov	r2, r0
 8002c26:	460b      	mov	r3, r1
 8002c28:	4610      	mov	r0, r2
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	f7fd ffae 	bl	8000b8c <__aeabi_d2uiz>
 8002c30:	4603      	mov	r3, r0
 8002c32:	613b      	str	r3, [r7, #16]

	/* Make task-specific structures */
	uint16_t k = 0;
 8002c34:	2300      	movs	r3, #0
 8002c36:	81fb      	strh	r3, [r7, #14]

	/* Wait until offset */
	next_tick += TICK2HZ * SM_task_info.offset;
 8002c38:	6978      	ldr	r0, [r7, #20]
 8002c3a:	f7fd fc55 	bl	80004e8 <__aeabi_ui2d>
 8002c3e:	4604      	mov	r4, r0
 8002c40:	460d      	mov	r5, r1
 8002c42:	f04f 0300 	mov.w	r3, #0
 8002c46:	4618      	mov	r0, r3
 8002c48:	f7fd fc70 	bl	800052c <__aeabi_f2d>
 8002c4c:	a310      	add	r3, pc, #64	; (adr r3, 8002c90 <start_SM_task+0x90>)
 8002c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c52:	f7fd fcc3 	bl	80005dc <__aeabi_dmul>
 8002c56:	4602      	mov	r2, r0
 8002c58:	460b      	mov	r3, r1
 8002c5a:	4620      	mov	r0, r4
 8002c5c:	4629      	mov	r1, r5
 8002c5e:	f7fd fb07 	bl	8000270 <__adddf3>
 8002c62:	4602      	mov	r2, r0
 8002c64:	460b      	mov	r3, r1
 8002c66:	4610      	mov	r0, r2
 8002c68:	4619      	mov	r1, r3
 8002c6a:	f7fd ff8f 	bl	8000b8c <__aeabi_d2uiz>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	617b      	str	r3, [r7, #20]
	osDelayUntil(next_tick);
 8002c72:	6978      	ldr	r0, [r7, #20]
 8002c74:	f00f fdeb 	bl	801284e <osDelayUntil>

	for (;;) {
		/* Enter periodic behaviour */
		state_machine_step();
 8002c78:	f7fe ffd2 	bl	8001c20 <state_machine_step>

		/* Wait until next period */
		next_tick += tick_increment;
 8002c7c:	697a      	ldr	r2, [r7, #20]
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	4413      	add	r3, r2
 8002c82:	617b      	str	r3, [r7, #20]
		osDelayUntil(next_tick);
 8002c84:	6978      	ldr	r0, [r7, #20]
 8002c86:	f00f fde2 	bl	801284e <osDelayUntil>
		state_machine_step();
 8002c8a:	e7f5      	b.n	8002c78 <start_SM_task+0x78>
 8002c8c:	f3af 8000 	nop.w
 8002c90:	f3cf3cf4 	.word	0xf3cf3cf4
 8002c94:	4067cf3c 	.word	0x4067cf3c
 8002c98:	2001b4a8 	.word	0x2001b4a8
 8002c9c:	3f4ccccd 	.word	0x3f4ccccd

08002ca0 <start_IWDG_task>:
	}
}

void start_IWDG_task(void *argument) {
 8002ca0:	b5b0      	push	{r4, r5, r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 8002ca8:	4b21      	ldr	r3, [pc, #132]	; (8002d30 <start_IWDG_task+0x90>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	60fb      	str	r3, [r7, #12]
	uint32_t tick_increment = TICK2HZ * IWDG_task_info.periodicity;
 8002cae:	4b21      	ldr	r3, [pc, #132]	; (8002d34 <start_IWDG_task+0x94>)
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f7fd fc3b 	bl	800052c <__aeabi_f2d>
 8002cb6:	a31c      	add	r3, pc, #112	; (adr r3, 8002d28 <start_IWDG_task+0x88>)
 8002cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cbc:	f7fd fc8e 	bl	80005dc <__aeabi_dmul>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	460b      	mov	r3, r1
 8002cc4:	4610      	mov	r0, r2
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	f7fd ff60 	bl	8000b8c <__aeabi_d2uiz>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	60bb      	str	r3, [r7, #8]

	/* Make task-specific structures */

	/* Wait until offset */
	next_tick += TICK2HZ * IWDG_task_info.offset;
 8002cd0:	68f8      	ldr	r0, [r7, #12]
 8002cd2:	f7fd fc09 	bl	80004e8 <__aeabi_ui2d>
 8002cd6:	4604      	mov	r4, r0
 8002cd8:	460d      	mov	r5, r1
 8002cda:	f04f 0300 	mov.w	r3, #0
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f7fd fc24 	bl	800052c <__aeabi_f2d>
 8002ce4:	a310      	add	r3, pc, #64	; (adr r3, 8002d28 <start_IWDG_task+0x88>)
 8002ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cea:	f7fd fc77 	bl	80005dc <__aeabi_dmul>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	4620      	mov	r0, r4
 8002cf4:	4629      	mov	r1, r5
 8002cf6:	f7fd fabb 	bl	8000270 <__adddf3>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	460b      	mov	r3, r1
 8002cfe:	4610      	mov	r0, r2
 8002d00:	4619      	mov	r1, r3
 8002d02:	f7fd ff43 	bl	8000b8c <__aeabi_d2uiz>
 8002d06:	4603      	mov	r3, r0
 8002d08:	60fb      	str	r3, [r7, #12]
	osDelayUntil(next_tick);
 8002d0a:	68f8      	ldr	r0, [r7, #12]
 8002d0c:	f00f fd9f 	bl	801284e <osDelayUntil>

	//initialize_IWDG(&hiwdg, IWDG_task_info.periodicity);

	for (;;) {
		/* Enter periodic behaviour */
		HAL_IWDG_Refresh(&hiwdg);
 8002d10:	4809      	ldr	r0, [pc, #36]	; (8002d38 <start_IWDG_task+0x98>)
 8002d12:	f00d f940 	bl	800ff96 <HAL_IWDG_Refresh>

		/* Wait until next period */
		next_tick += tick_increment;
 8002d16:	68fa      	ldr	r2, [r7, #12]
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	4413      	add	r3, r2
 8002d1c:	60fb      	str	r3, [r7, #12]
		osDelayUntil(next_tick);
 8002d1e:	68f8      	ldr	r0, [r7, #12]
 8002d20:	f00f fd95 	bl	801284e <osDelayUntil>
		HAL_IWDG_Refresh(&hiwdg);
 8002d24:	e7f4      	b.n	8002d10 <start_IWDG_task+0x70>
 8002d26:	bf00      	nop
 8002d28:	f3cf3cf4 	.word	0xf3cf3cf4
 8002d2c:	4067cf3c 	.word	0x4067cf3c
 8002d30:	2001b4a8 	.word	0x2001b4a8
 8002d34:	3f4ccccd 	.word	0x3f4ccccd
 8002d38:	2001b5ac 	.word	0x2001b5ac
 8002d3c:	00000000 	.word	0x00000000

08002d40 <start_event_handler_task>:
	}
}

void start_event_handler_task(void *argument) {
 8002d40:	b5b0      	push	{r4, r5, r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 8002d48:	4b1f      	ldr	r3, [pc, #124]	; (8002dc8 <start_event_handler_task+0x88>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	60fb      	str	r3, [r7, #12]
	uint32_t tick_increment = TICK2HZ * event_handler_task_info.periodicity;
 8002d4e:	4b1f      	ldr	r3, [pc, #124]	; (8002dcc <start_event_handler_task+0x8c>)
 8002d50:	4618      	mov	r0, r3
 8002d52:	f7fd fbeb 	bl	800052c <__aeabi_f2d>
 8002d56:	a31a      	add	r3, pc, #104	; (adr r3, 8002dc0 <start_event_handler_task+0x80>)
 8002d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d5c:	f7fd fc3e 	bl	80005dc <__aeabi_dmul>
 8002d60:	4602      	mov	r2, r0
 8002d62:	460b      	mov	r3, r1
 8002d64:	4610      	mov	r0, r2
 8002d66:	4619      	mov	r1, r3
 8002d68:	f7fd ff10 	bl	8000b8c <__aeabi_d2uiz>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	60bb      	str	r3, [r7, #8]

	/* Make task-specific structures */

	/* Wait until offset */
	next_tick += TICK2HZ * event_handler_task_info.offset;
 8002d70:	68f8      	ldr	r0, [r7, #12]
 8002d72:	f7fd fbb9 	bl	80004e8 <__aeabi_ui2d>
 8002d76:	4604      	mov	r4, r0
 8002d78:	460d      	mov	r5, r1
 8002d7a:	f04f 0300 	mov.w	r3, #0
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f7fd fbd4 	bl	800052c <__aeabi_f2d>
 8002d84:	a30e      	add	r3, pc, #56	; (adr r3, 8002dc0 <start_event_handler_task+0x80>)
 8002d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d8a:	f7fd fc27 	bl	80005dc <__aeabi_dmul>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	460b      	mov	r3, r1
 8002d92:	4620      	mov	r0, r4
 8002d94:	4629      	mov	r1, r5
 8002d96:	f7fd fa6b 	bl	8000270 <__adddf3>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	460b      	mov	r3, r1
 8002d9e:	4610      	mov	r0, r2
 8002da0:	4619      	mov	r1, r3
 8002da2:	f7fd fef3 	bl	8000b8c <__aeabi_d2uiz>
 8002da6:	4603      	mov	r3, r0
 8002da8:	60fb      	str	r3, [r7, #12]
	osDelayUntil(next_tick);
 8002daa:	68f8      	ldr	r0, [r7, #12]
 8002dac:	f00f fd4f 	bl	801284e <osDelayUntil>

	for (;;) {
		/* Enter periodic behaviour */

		/* Wait until next period */
		next_tick += tick_increment;
 8002db0:	68fa      	ldr	r2, [r7, #12]
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	4413      	add	r3, r2
 8002db6:	60fb      	str	r3, [r7, #12]
		osDelayUntil(next_tick);
 8002db8:	68f8      	ldr	r0, [r7, #12]
 8002dba:	f00f fd48 	bl	801284e <osDelayUntil>
		next_tick += tick_increment;
 8002dbe:	e7f7      	b.n	8002db0 <start_event_handler_task+0x70>
 8002dc0:	f3cf3cf4 	.word	0xf3cf3cf4
 8002dc4:	4067cf3c 	.word	0x4067cf3c
 8002dc8:	2001b4a8 	.word	0x2001b4a8
 8002dcc:	3f4ccccd 	.word	0x3f4ccccd

08002dd0 <start_IMD_task>:
	}
}

void start_IMD_task(void *argument) {
 8002dd0:	b5b0      	push	{r4, r5, r7, lr}
 8002dd2:	b088      	sub	sp, #32
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 8002dd8:	4b2d      	ldr	r3, [pc, #180]	; (8002e90 <start_IMD_task+0xc0>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	61fb      	str	r3, [r7, #28]
	uint32_t tick_increment = TICK2HZ * IMD_task_info.periodicity;
 8002dde:	4b2d      	ldr	r3, [pc, #180]	; (8002e94 <start_IMD_task+0xc4>)
 8002de0:	4618      	mov	r0, r3
 8002de2:	f7fd fba3 	bl	800052c <__aeabi_f2d>
 8002de6:	a328      	add	r3, pc, #160	; (adr r3, 8002e88 <start_IMD_task+0xb8>)
 8002de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dec:	f7fd fbf6 	bl	80005dc <__aeabi_dmul>
 8002df0:	4602      	mov	r2, r0
 8002df2:	460b      	mov	r3, r1
 8002df4:	4610      	mov	r0, r2
 8002df6:	4619      	mov	r1, r3
 8002df8:	f7fd fec8 	bl	8000b8c <__aeabi_d2uiz>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	61bb      	str	r3, [r7, #24]

	/* Make task-specific structures */
	IMD_t IMD;
	initialize_IMD(&htim2);
 8002e00:	4825      	ldr	r0, [pc, #148]	; (8002e98 <start_IMD_task+0xc8>)
 8002e02:	f7fe facb 	bl	800139c <initialize_IMD>

	/* Wait until offset */
	next_tick += TICK2HZ * IMD_task_info.offset;
 8002e06:	69f8      	ldr	r0, [r7, #28]
 8002e08:	f7fd fb6e 	bl	80004e8 <__aeabi_ui2d>
 8002e0c:	4604      	mov	r4, r0
 8002e0e:	460d      	mov	r5, r1
 8002e10:	f04f 0300 	mov.w	r3, #0
 8002e14:	4618      	mov	r0, r3
 8002e16:	f7fd fb89 	bl	800052c <__aeabi_f2d>
 8002e1a:	a31b      	add	r3, pc, #108	; (adr r3, 8002e88 <start_IMD_task+0xb8>)
 8002e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e20:	f7fd fbdc 	bl	80005dc <__aeabi_dmul>
 8002e24:	4602      	mov	r2, r0
 8002e26:	460b      	mov	r3, r1
 8002e28:	4620      	mov	r0, r4
 8002e2a:	4629      	mov	r1, r5
 8002e2c:	f7fd fa20 	bl	8000270 <__adddf3>
 8002e30:	4602      	mov	r2, r0
 8002e32:	460b      	mov	r3, r1
 8002e34:	4610      	mov	r0, r2
 8002e36:	4619      	mov	r1, r3
 8002e38:	f7fd fea8 	bl	8000b8c <__aeabi_d2uiz>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	61fb      	str	r3, [r7, #28]
	osDelayUntil(next_tick);
 8002e40:	69f8      	ldr	r0, [r7, #28]
 8002e42:	f00f fd04 	bl	801284e <osDelayUntil>

	for (;;) {
		/* Enter periodic behaviour */

		if (xQueueReceive(IMD_queue, &IMD, 0)) {
 8002e46:	4b15      	ldr	r3, [pc, #84]	; (8002e9c <start_IMD_task+0xcc>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f107 010c 	add.w	r1, r7, #12
 8002e4e:	2200      	movs	r2, #0
 8002e50:	4618      	mov	r0, r3
 8002e52:	f010 f92b 	bl	80130ac <xQueueReceive>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d00b      	beq.n	8002e74 <start_IMD_task+0xa4>
			uint8_t frequency_range = (uint8_t) (IMD.frequency / 10);
 8002e5c:	ed97 7a04 	vldr	s14, [r7, #16]
 8002e60:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002e64:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e6c:	edc7 7a00 	vstr	s15, [r7]
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	75fb      	strb	r3, [r7, #23]
		}

		/* Wait until next period */
		next_tick += tick_increment;
 8002e74:	69fa      	ldr	r2, [r7, #28]
 8002e76:	69bb      	ldr	r3, [r7, #24]
 8002e78:	4413      	add	r3, r2
 8002e7a:	61fb      	str	r3, [r7, #28]
		osDelayUntil(next_tick);
 8002e7c:	69f8      	ldr	r0, [r7, #28]
 8002e7e:	f00f fce6 	bl	801284e <osDelayUntil>
		if (xQueueReceive(IMD_queue, &IMD, 0)) {
 8002e82:	e7e0      	b.n	8002e46 <start_IMD_task+0x76>
 8002e84:	f3af 8000 	nop.w
 8002e88:	f3cf3cf4 	.word	0xf3cf3cf4
 8002e8c:	4067cf3c 	.word	0x4067cf3c
 8002e90:	2001b4a8 	.word	0x2001b4a8
 8002e94:	3f4ccccd 	.word	0x3f4ccccd
 8002e98:	2001bba4 	.word	0x2001bba4
 8002e9c:	2001b430 	.word	0x2001b430

08002ea0 <start_GPIO_task>:
	}
}

void start_GPIO_task(void *argument) {
 8002ea0:	b5b0      	push	{r4, r5, r7, lr}
 8002ea2:	b086      	sub	sp, #24
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 8002ea8:	4b39      	ldr	r3, [pc, #228]	; (8002f90 <start_GPIO_task+0xf0>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	617b      	str	r3, [r7, #20]
	uint32_t tick_increment = TICK2HZ * GPIO_task_info.periodicity;
 8002eae:	4b39      	ldr	r3, [pc, #228]	; (8002f94 <start_GPIO_task+0xf4>)
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f7fd fb3b 	bl	800052c <__aeabi_f2d>
 8002eb6:	a334      	add	r3, pc, #208	; (adr r3, 8002f88 <start_GPIO_task+0xe8>)
 8002eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ebc:	f7fd fb8e 	bl	80005dc <__aeabi_dmul>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	460b      	mov	r3, r1
 8002ec4:	4610      	mov	r0, r2
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	f7fd fe60 	bl	8000b8c <__aeabi_d2uiz>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	613b      	str	r3, [r7, #16]

	/* Make task-specific structures */
	GPIO_t GPIO;

	/* Wait until offset */
	next_tick += TICK2HZ * GPIO_task_info.offset;
 8002ed0:	6978      	ldr	r0, [r7, #20]
 8002ed2:	f7fd fb09 	bl	80004e8 <__aeabi_ui2d>
 8002ed6:	4604      	mov	r4, r0
 8002ed8:	460d      	mov	r5, r1
 8002eda:	f04f 0300 	mov.w	r3, #0
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f7fd fb24 	bl	800052c <__aeabi_f2d>
 8002ee4:	a328      	add	r3, pc, #160	; (adr r3, 8002f88 <start_GPIO_task+0xe8>)
 8002ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eea:	f7fd fb77 	bl	80005dc <__aeabi_dmul>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	460b      	mov	r3, r1
 8002ef2:	4620      	mov	r0, r4
 8002ef4:	4629      	mov	r1, r5
 8002ef6:	f7fd f9bb 	bl	8000270 <__adddf3>
 8002efa:	4602      	mov	r2, r0
 8002efc:	460b      	mov	r3, r1
 8002efe:	4610      	mov	r0, r2
 8002f00:	4619      	mov	r1, r3
 8002f02:	f7fd fe43 	bl	8000b8c <__aeabi_d2uiz>
 8002f06:	4603      	mov	r3, r0
 8002f08:	617b      	str	r3, [r7, #20]
	osDelayUntil(next_tick);
 8002f0a:	6978      	ldr	r0, [r7, #20]
 8002f0c:	f00f fc9f 	bl	801284e <osDelayUntil>

	for (;;) {
		/* Enter periodic behaviour */
		GPIO.AMS_error_latched = HAL_GPIO_ReadPin(AMS_error_latched_GPIO_Port,
 8002f10:	2140      	movs	r1, #64	; 0x40
 8002f12:	4821      	ldr	r0, [pc, #132]	; (8002f98 <start_GPIO_task+0xf8>)
 8002f14:	f00d f80e 	bl	800ff34 <HAL_GPIO_ReadPin>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	723b      	strb	r3, [r7, #8]
		AMS_error_latched_Pin);
		GPIO.IMD_error_latched = HAL_GPIO_ReadPin(IMD_error_latched_GPIO_Port,
 8002f1c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002f20:	481d      	ldr	r0, [pc, #116]	; (8002f98 <start_GPIO_task+0xf8>)
 8002f22:	f00d f807 	bl	800ff34 <HAL_GPIO_ReadPin>
 8002f26:	4603      	mov	r3, r0
 8002f28:	727b      	strb	r3, [r7, #9]
		IMD_error_latched_Pin);
		GPIO.SC_probe = HAL_GPIO_ReadPin(SC_probe_GPIO_Port, SC_probe_Pin);
 8002f2a:	2102      	movs	r1, #2
 8002f2c:	481b      	ldr	r0, [pc, #108]	; (8002f9c <start_GPIO_task+0xfc>)
 8002f2e:	f00d f801 	bl	800ff34 <HAL_GPIO_ReadPin>
 8002f32:	4603      	mov	r3, r0
 8002f34:	72bb      	strb	r3, [r7, #10]
		GPIO.IMD_ok = HAL_GPIO_ReadPin(IMD_ok_GPIO_Port, IMD_ok_Pin);
 8002f36:	2104      	movs	r1, #4
 8002f38:	4818      	ldr	r0, [pc, #96]	; (8002f9c <start_GPIO_task+0xfc>)
 8002f3a:	f00c fffb 	bl	800ff34 <HAL_GPIO_ReadPin>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	72fb      	strb	r3, [r7, #11]
		GPIO.AIR_plus_closed = HAL_GPIO_ReadPin(AIR_plus_closed_GPIO_Port,
 8002f42:	2110      	movs	r1, #16
 8002f44:	4816      	ldr	r0, [pc, #88]	; (8002fa0 <start_GPIO_task+0x100>)
 8002f46:	f00c fff5 	bl	800ff34 <HAL_GPIO_ReadPin>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	733b      	strb	r3, [r7, #12]
		AIR_plus_closed_Pin);
		GPIO.AIR_minus_closed = HAL_GPIO_ReadPin(AIR_minus_closed_GPIO_Port,
 8002f4e:	2120      	movs	r1, #32
 8002f50:	4813      	ldr	r0, [pc, #76]	; (8002fa0 <start_GPIO_task+0x100>)
 8002f52:	f00c ffef 	bl	800ff34 <HAL_GPIO_ReadPin>
 8002f56:	4603      	mov	r3, r0
 8002f58:	737b      	strb	r3, [r7, #13]
		AIR_minus_closed_Pin);
		GPIO.precharge_closed = HAL_GPIO_ReadPin(precharge_closed_GPIO_Port,
 8002f5a:	2140      	movs	r1, #64	; 0x40
 8002f5c:	4810      	ldr	r0, [pc, #64]	; (8002fa0 <start_GPIO_task+0x100>)
 8002f5e:	f00c ffe9 	bl	800ff34 <HAL_GPIO_ReadPin>
 8002f62:	4603      	mov	r3, r0
 8002f64:	73bb      	strb	r3, [r7, #14]
		precharge_closed_Pin);

		xQueueOverwrite(GPIO_queue, &GPIO);
 8002f66:	4b0f      	ldr	r3, [pc, #60]	; (8002fa4 <start_GPIO_task+0x104>)
 8002f68:	6818      	ldr	r0, [r3, #0]
 8002f6a:	f107 0108 	add.w	r1, r7, #8
 8002f6e:	2302      	movs	r3, #2
 8002f70:	2200      	movs	r2, #0
 8002f72:	f00f fec5 	bl	8012d00 <xQueueGenericSend>

		/* Wait until next period */
		next_tick += tick_increment;
 8002f76:	697a      	ldr	r2, [r7, #20]
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	4413      	add	r3, r2
 8002f7c:	617b      	str	r3, [r7, #20]
		osDelayUntil(next_tick);
 8002f7e:	6978      	ldr	r0, [r7, #20]
 8002f80:	f00f fc65 	bl	801284e <osDelayUntil>
		GPIO.AMS_error_latched = HAL_GPIO_ReadPin(AMS_error_latched_GPIO_Port,
 8002f84:	e7c4      	b.n	8002f10 <start_GPIO_task+0x70>
 8002f86:	bf00      	nop
 8002f88:	f3cf3cf4 	.word	0xf3cf3cf4
 8002f8c:	4067cf3c 	.word	0x4067cf3c
 8002f90:	2001b4a8 	.word	0x2001b4a8
 8002f94:	3f4ccccd 	.word	0x3f4ccccd
 8002f98:	40020800 	.word	0x40020800
 8002f9c:	40020400 	.word	0x40020400
 8002fa0:	40021000 	.word	0x40021000
 8002fa4:	2001b448 	.word	0x2001b448

08002fa8 <start_ADC_task>:
	}
}

void start_ADC_task(void *argument) {
 8002fa8:	b5b0      	push	{r4, r5, r7, lr}
 8002faa:	b0a8      	sub	sp, #160	; 0xa0
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 8002fb0:	4b31      	ldr	r3, [pc, #196]	; (8003078 <start_ADC_task+0xd0>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	uint32_t tick_increment = TICK2HZ * ADC_task_info.periodicity;
 8002fb8:	4b30      	ldr	r3, [pc, #192]	; (800307c <start_ADC_task+0xd4>)
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f7fd fab6 	bl	800052c <__aeabi_f2d>
 8002fc0:	a32b      	add	r3, pc, #172	; (adr r3, 8003070 <start_ADC_task+0xc8>)
 8002fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fc6:	f7fd fb09 	bl	80005dc <__aeabi_dmul>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	460b      	mov	r3, r1
 8002fce:	4610      	mov	r0, r2
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	f7fd fddb 	bl	8000b8c <__aeabi_d2uiz>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

	/* Make task-specific structures */
	ADC_initialize(&htim3);
 8002fdc:	4828      	ldr	r0, [pc, #160]	; (8003080 <start_ADC_task+0xd8>)
 8002fde:	f7ff f9f3 	bl	80023c8 <ADC_initialize>
	uint16_t adc_readings[4 * 16];
	ams_temperatures_t ams_temperatures;

	/* Wait until offset */
	next_tick += TICK2HZ * ADC_task_info.offset;
 8002fe2:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8002fe6:	f7fd fa7f 	bl	80004e8 <__aeabi_ui2d>
 8002fea:	4604      	mov	r4, r0
 8002fec:	460d      	mov	r5, r1
 8002fee:	f04f 0300 	mov.w	r3, #0
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f7fd fa9a 	bl	800052c <__aeabi_f2d>
 8002ff8:	a31d      	add	r3, pc, #116	; (adr r3, 8003070 <start_ADC_task+0xc8>)
 8002ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ffe:	f7fd faed 	bl	80005dc <__aeabi_dmul>
 8003002:	4602      	mov	r2, r0
 8003004:	460b      	mov	r3, r1
 8003006:	4620      	mov	r0, r4
 8003008:	4629      	mov	r1, r5
 800300a:	f7fd f931 	bl	8000270 <__adddf3>
 800300e:	4602      	mov	r2, r0
 8003010:	460b      	mov	r3, r1
 8003012:	4610      	mov	r0, r2
 8003014:	4619      	mov	r1, r3
 8003016:	f7fd fdb9 	bl	8000b8c <__aeabi_d2uiz>
 800301a:	4603      	mov	r3, r0
 800301c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	osDelayUntil(next_tick);
 8003020:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8003024:	f00f fc13 	bl	801284e <osDelayUntil>

	for (;;) {
		/* Enter periodic behaviour */
		ADC_step((uint32_t*) &adc_readings, sizeof((uint32_t*) adc_readings));
 8003028:	f107 0318 	add.w	r3, r7, #24
 800302c:	2104      	movs	r1, #4
 800302e:	4618      	mov	r0, r3
 8003030:	f7ff f9de 	bl	80023f0 <ADC_step>
		interpret_ADC_buffer(&ams_temperatures, adc_readings, 16);
 8003034:	f107 0118 	add.w	r1, r7, #24
 8003038:	f107 0308 	add.w	r3, r7, #8
 800303c:	2210      	movs	r2, #16
 800303e:	4618      	mov	r0, r3
 8003040:	f7fe fffa 	bl	8002038 <interpret_ADC_buffer>

		xQueueOverwrite(ams_temperatures_queue, &ams_temperatures);
 8003044:	4b0f      	ldr	r3, [pc, #60]	; (8003084 <start_ADC_task+0xdc>)
 8003046:	6818      	ldr	r0, [r3, #0]
 8003048:	f107 0108 	add.w	r1, r7, #8
 800304c:	2302      	movs	r3, #2
 800304e:	2200      	movs	r2, #0
 8003050:	f00f fe56 	bl	8012d00 <xQueueGenericSend>

		/* Wait until next period */
		next_tick += tick_increment;
 8003054:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8003058:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800305c:	4413      	add	r3, r2
 800305e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		osDelayUntil(next_tick);
 8003062:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8003066:	f00f fbf2 	bl	801284e <osDelayUntil>
		ADC_step((uint32_t*) &adc_readings, sizeof((uint32_t*) adc_readings));
 800306a:	e7dd      	b.n	8003028 <start_ADC_task+0x80>
 800306c:	f3af 8000 	nop.w
 8003070:	f3cf3cf4 	.word	0xf3cf3cf4
 8003074:	4067cf3c 	.word	0x4067cf3c
 8003078:	2001b4a8 	.word	0x2001b4a8
 800307c:	3f4ccccd 	.word	0x3f4ccccd
 8003080:	2001bb14 	.word	0x2001bb14
 8003084:	2001b450 	.word	0x2001b450

08003088 <start_COM_task>:
	}
}

void start_COM_task(void *argument) {
 8003088:	b5b0      	push	{r4, r5, r7, lr}
 800308a:	b08c      	sub	sp, #48	; 0x30
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 8003090:	4b49      	ldr	r3, [pc, #292]	; (80031b8 <start_COM_task+0x130>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t tick_increment = TICK2HZ * COM_task_info.periodicity;
 8003096:	4b49      	ldr	r3, [pc, #292]	; (80031bc <start_COM_task+0x134>)
 8003098:	4618      	mov	r0, r3
 800309a:	f7fd fa47 	bl	800052c <__aeabi_f2d>
 800309e:	a344      	add	r3, pc, #272	; (adr r3, 80031b0 <start_COM_task+0x128>)
 80030a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030a4:	f7fd fa9a 	bl	80005dc <__aeabi_dmul>
 80030a8:	4602      	mov	r2, r0
 80030aa:	460b      	mov	r3, r1
 80030ac:	4610      	mov	r0, r2
 80030ae:	4619      	mov	r1, r3
 80030b0:	f7fd fd6c 	bl	8000b8c <__aeabi_d2uiz>
 80030b4:	4603      	mov	r3, r0
 80030b6:	623b      	str	r3, [r7, #32]

	/* Make task-specific structures */
	const float voltage_time_constraint = 0.5;
 80030b8:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 80030bc:	61fb      	str	r3, [r7, #28]
	const float temperature_time_constraint = 1.0;
 80030be:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80030c2:	61bb      	str	r3, [r7, #24]
	const float current_time_constraint = 0.5;
 80030c4:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 80030c8:	617b      	str	r3, [r7, #20]

	uint16_t voltage_sample_constraint = (voltage_time_constraint
			/ COM_task_info.periodicity);
 80030ca:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80031c0 <start_COM_task+0x138>
 80030ce:	ed97 7a07 	vldr	s14, [r7, #28]
 80030d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
	uint16_t voltage_sample_constraint = (voltage_time_constraint
 80030d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80030da:	ee17 3a90 	vmov	r3, s15
 80030de:	857b      	strh	r3, [r7, #42]	; 0x2a
	if (voltage_sample_constraint < 1) {
 80030e0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d101      	bne.n	80030ea <start_COM_task+0x62>
		voltage_sample_constraint = 1;
 80030e6:	2301      	movs	r3, #1
 80030e8:	857b      	strh	r3, [r7, #42]	; 0x2a
	}

	uint16_t temperature_sample_constraint = (temperature_time_constraint
			/ COM_task_info.periodicity);
 80030ea:	eddf 6a35 	vldr	s13, [pc, #212]	; 80031c0 <start_COM_task+0x138>
 80030ee:	ed97 7a06 	vldr	s14, [r7, #24]
 80030f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
	uint16_t temperature_sample_constraint = (temperature_time_constraint
 80030f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80030fa:	ee17 3a90 	vmov	r3, s15
 80030fe:	853b      	strh	r3, [r7, #40]	; 0x28
	if (temperature_sample_constraint < 1) {
 8003100:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003102:	2b00      	cmp	r3, #0
 8003104:	d101      	bne.n	800310a <start_COM_task+0x82>
		temperature_sample_constraint = 1;
 8003106:	2301      	movs	r3, #1
 8003108:	853b      	strh	r3, [r7, #40]	; 0x28
	}

	uint16_t current_sample_constraint = (current_time_constraint
			/ COM_task_info.periodicity);
 800310a:	eddf 6a2d 	vldr	s13, [pc, #180]	; 80031c0 <start_COM_task+0x138>
 800310e:	ed97 7a05 	vldr	s14, [r7, #20]
 8003112:	eec7 7a26 	vdiv.f32	s15, s14, s13
	uint16_t current_sample_constraint = (current_time_constraint
 8003116:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800311a:	ee17 3a90 	vmov	r3, s15
 800311e:	84fb      	strh	r3, [r7, #38]	; 0x26
	if (current_sample_constraint < 1) {
 8003120:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003122:	2b00      	cmp	r3, #0
 8003124:	d101      	bne.n	800312a <start_COM_task+0xa2>
		current_sample_constraint = 1;
 8003126:	2301      	movs	r3, #1
 8003128:	84fb      	strh	r3, [r7, #38]	; 0x26
	double *voltage;
	double *temperature;
	double *current;

	/* Wait until offset */
	next_tick += TICK2HZ * COM_task_info.offset;
 800312a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800312c:	f7fd f9dc 	bl	80004e8 <__aeabi_ui2d>
 8003130:	4604      	mov	r4, r0
 8003132:	460d      	mov	r5, r1
 8003134:	f04f 0300 	mov.w	r3, #0
 8003138:	4618      	mov	r0, r3
 800313a:	f7fd f9f7 	bl	800052c <__aeabi_f2d>
 800313e:	a31c      	add	r3, pc, #112	; (adr r3, 80031b0 <start_COM_task+0x128>)
 8003140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003144:	f7fd fa4a 	bl	80005dc <__aeabi_dmul>
 8003148:	4602      	mov	r2, r0
 800314a:	460b      	mov	r3, r1
 800314c:	4620      	mov	r0, r4
 800314e:	4629      	mov	r1, r5
 8003150:	f7fd f88e 	bl	8000270 <__adddf3>
 8003154:	4602      	mov	r2, r0
 8003156:	460b      	mov	r3, r1
 8003158:	4610      	mov	r0, r2
 800315a:	4619      	mov	r1, r3
 800315c:	f7fd fd16 	bl	8000b8c <__aeabi_d2uiz>
 8003160:	4603      	mov	r3, r0
 8003162:	62fb      	str	r3, [r7, #44]	; 0x2c
	osDelayUntil(next_tick);
 8003164:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003166:	f00f fb72 	bl	801284e <osDelayUntil>

	for (;;) {
		/* Enter periodic behaviour */

		//LTC_acquire_data(1);
		voltage = Accumulator_Y.Voltages;
 800316a:	4b16      	ldr	r3, [pc, #88]	; (80031c4 <start_COM_task+0x13c>)
 800316c:	613b      	str	r3, [r7, #16]
		temperature = Accumulator_Y.Temperatures;
 800316e:	4b16      	ldr	r3, [pc, #88]	; (80031c8 <start_COM_task+0x140>)
 8003170:	60fb      	str	r3, [r7, #12]
		current = &Accumulator_Y.DisplayCurrent;
 8003172:	4b16      	ldr	r3, [pc, #88]	; (80031cc <start_COM_task+0x144>)
 8003174:	60bb      	str	r3, [r7, #8]

		if (!COM_voltages_ok_d(voltage, 1, voltage_sample_constraint)) {
 8003176:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003178:	461a      	mov	r2, r3
 800317a:	2101      	movs	r1, #1
 800317c:	6938      	ldr	r0, [r7, #16]
 800317e:	f7fd ff0b 	bl	8000f98 <COM_voltages_ok_d>
			//Error_Handler();
		}

		if (!COM_temperatures_ok_d(temperature, 1,
 8003182:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003184:	461a      	mov	r2, r3
 8003186:	2101      	movs	r1, #1
 8003188:	68f8      	ldr	r0, [r7, #12]
 800318a:	f7fd ff77 	bl	800107c <COM_temperatures_ok_d>
				temperature_sample_constraint)) {
			//Error_Handler();
		}

		if (!COM_current_ok_d(current, 1, current_sample_constraint)) {
 800318e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003190:	461a      	mov	r2, r3
 8003192:	2101      	movs	r1, #1
 8003194:	68b8      	ldr	r0, [r7, #8]
 8003196:	f7fd ffe3 	bl	8001160 <COM_current_ok_d>
			//Error_Handler();
		}

		/* Wait until next period */
		next_tick += tick_increment;
 800319a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800319c:	6a3b      	ldr	r3, [r7, #32]
 800319e:	4413      	add	r3, r2
 80031a0:	62fb      	str	r3, [r7, #44]	; 0x2c
		osDelayUntil(next_tick);
 80031a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80031a4:	f00f fb53 	bl	801284e <osDelayUntil>
		voltage = Accumulator_Y.Voltages;
 80031a8:	e7df      	b.n	800316a <start_COM_task+0xe2>
 80031aa:	bf00      	nop
 80031ac:	f3af 8000 	nop.w
 80031b0:	f3cf3cf4 	.word	0xf3cf3cf4
 80031b4:	4067cf3c 	.word	0x4067cf3c
 80031b8:	2001b4a8 	.word	0x2001b4a8
 80031bc:	3f4ccccd 	.word	0x3f4ccccd
 80031c0:	3f4ccccd 	.word	0x3f4ccccd
 80031c4:	2001bbf8 	.word	0x2001bbf8
 80031c8:	2001c7d0 	.word	0x2001c7d0
 80031cc:	2001c7c8 	.word	0x2001c7c8

080031d0 <start_CAN_rx_task>:
	}
}

void start_CAN_rx_task(void *argument) {
 80031d0:	b5b0      	push	{r4, r5, r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 80031d8:	4b1f      	ldr	r3, [pc, #124]	; (8003258 <start_CAN_rx_task+0x88>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	60fb      	str	r3, [r7, #12]
	uint32_t tick_increment = TICK2HZ * CAN_rx_task_info.periodicity;
 80031de:	4b1f      	ldr	r3, [pc, #124]	; (800325c <start_CAN_rx_task+0x8c>)
 80031e0:	4618      	mov	r0, r3
 80031e2:	f7fd f9a3 	bl	800052c <__aeabi_f2d>
 80031e6:	a31a      	add	r3, pc, #104	; (adr r3, 8003250 <start_CAN_rx_task+0x80>)
 80031e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ec:	f7fd f9f6 	bl	80005dc <__aeabi_dmul>
 80031f0:	4602      	mov	r2, r0
 80031f2:	460b      	mov	r3, r1
 80031f4:	4610      	mov	r0, r2
 80031f6:	4619      	mov	r1, r3
 80031f8:	f7fd fcc8 	bl	8000b8c <__aeabi_d2uiz>
 80031fc:	4603      	mov	r3, r0
 80031fe:	60bb      	str	r3, [r7, #8]

	/* Make task-specific structures */

	/* Wait until offset */
	next_tick += TICK2HZ * CAN_rx_task_info.offset;
 8003200:	68f8      	ldr	r0, [r7, #12]
 8003202:	f7fd f971 	bl	80004e8 <__aeabi_ui2d>
 8003206:	4604      	mov	r4, r0
 8003208:	460d      	mov	r5, r1
 800320a:	f04f 0300 	mov.w	r3, #0
 800320e:	4618      	mov	r0, r3
 8003210:	f7fd f98c 	bl	800052c <__aeabi_f2d>
 8003214:	a30e      	add	r3, pc, #56	; (adr r3, 8003250 <start_CAN_rx_task+0x80>)
 8003216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800321a:	f7fd f9df 	bl	80005dc <__aeabi_dmul>
 800321e:	4602      	mov	r2, r0
 8003220:	460b      	mov	r3, r1
 8003222:	4620      	mov	r0, r4
 8003224:	4629      	mov	r1, r5
 8003226:	f7fd f823 	bl	8000270 <__adddf3>
 800322a:	4602      	mov	r2, r0
 800322c:	460b      	mov	r3, r1
 800322e:	4610      	mov	r0, r2
 8003230:	4619      	mov	r1, r3
 8003232:	f7fd fcab 	bl	8000b8c <__aeabi_d2uiz>
 8003236:	4603      	mov	r3, r0
 8003238:	60fb      	str	r3, [r7, #12]
	osDelayUntil(next_tick);
 800323a:	68f8      	ldr	r0, [r7, #12]
 800323c:	f00f fb07 	bl	801284e <osDelayUntil>

	for (;;) {
		/* Enter periodic behaviour */

		/* Wait until next period */
		next_tick += tick_increment;
 8003240:	68fa      	ldr	r2, [r7, #12]
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	4413      	add	r3, r2
 8003246:	60fb      	str	r3, [r7, #12]
		osDelayUntil(next_tick);
 8003248:	68f8      	ldr	r0, [r7, #12]
 800324a:	f00f fb00 	bl	801284e <osDelayUntil>
		next_tick += tick_increment;
 800324e:	e7f7      	b.n	8003240 <start_CAN_rx_task+0x70>
 8003250:	f3cf3cf4 	.word	0xf3cf3cf4
 8003254:	4067cf3c 	.word	0x4067cf3c
 8003258:	2001b4a8 	.word	0x2001b4a8
 800325c:	3f4ccccd 	.word	0x3f4ccccd

08003260 <start_CAN_tx_task>:
	}
}

void start_CAN_tx_task(void *argument) {
 8003260:	b5b0      	push	{r4, r5, r7, lr}
 8003262:	b084      	sub	sp, #16
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 8003268:	4b1f      	ldr	r3, [pc, #124]	; (80032e8 <start_CAN_tx_task+0x88>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	60fb      	str	r3, [r7, #12]
	uint32_t tick_increment = TICK2HZ * CAN_tx_task_info.periodicity;
 800326e:	4b1f      	ldr	r3, [pc, #124]	; (80032ec <start_CAN_tx_task+0x8c>)
 8003270:	4618      	mov	r0, r3
 8003272:	f7fd f95b 	bl	800052c <__aeabi_f2d>
 8003276:	a31a      	add	r3, pc, #104	; (adr r3, 80032e0 <start_CAN_tx_task+0x80>)
 8003278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800327c:	f7fd f9ae 	bl	80005dc <__aeabi_dmul>
 8003280:	4602      	mov	r2, r0
 8003282:	460b      	mov	r3, r1
 8003284:	4610      	mov	r0, r2
 8003286:	4619      	mov	r1, r3
 8003288:	f7fd fc80 	bl	8000b8c <__aeabi_d2uiz>
 800328c:	4603      	mov	r3, r0
 800328e:	60bb      	str	r3, [r7, #8]

	/* Make task-specific structures */

	/* Wait until offset */
	next_tick += TICK2HZ * CAN_tx_task_info.offset;
 8003290:	68f8      	ldr	r0, [r7, #12]
 8003292:	f7fd f929 	bl	80004e8 <__aeabi_ui2d>
 8003296:	4604      	mov	r4, r0
 8003298:	460d      	mov	r5, r1
 800329a:	f04f 0300 	mov.w	r3, #0
 800329e:	4618      	mov	r0, r3
 80032a0:	f7fd f944 	bl	800052c <__aeabi_f2d>
 80032a4:	a30e      	add	r3, pc, #56	; (adr r3, 80032e0 <start_CAN_tx_task+0x80>)
 80032a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032aa:	f7fd f997 	bl	80005dc <__aeabi_dmul>
 80032ae:	4602      	mov	r2, r0
 80032b0:	460b      	mov	r3, r1
 80032b2:	4620      	mov	r0, r4
 80032b4:	4629      	mov	r1, r5
 80032b6:	f7fc ffdb 	bl	8000270 <__adddf3>
 80032ba:	4602      	mov	r2, r0
 80032bc:	460b      	mov	r3, r1
 80032be:	4610      	mov	r0, r2
 80032c0:	4619      	mov	r1, r3
 80032c2:	f7fd fc63 	bl	8000b8c <__aeabi_d2uiz>
 80032c6:	4603      	mov	r3, r0
 80032c8:	60fb      	str	r3, [r7, #12]
	osDelayUntil(next_tick);
 80032ca:	68f8      	ldr	r0, [r7, #12]
 80032cc:	f00f fabf 	bl	801284e <osDelayUntil>

	for (;;) {
		/* Enter periodic behaviour */

		/* Wait until next period */
		next_tick += tick_increment;
 80032d0:	68fa      	ldr	r2, [r7, #12]
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	4413      	add	r3, r2
 80032d6:	60fb      	str	r3, [r7, #12]
		osDelayUntil(next_tick);
 80032d8:	68f8      	ldr	r0, [r7, #12]
 80032da:	f00f fab8 	bl	801284e <osDelayUntil>
		next_tick += tick_increment;
 80032de:	e7f7      	b.n	80032d0 <start_CAN_tx_task+0x70>
 80032e0:	f3cf3cf4 	.word	0xf3cf3cf4
 80032e4:	4067cf3c 	.word	0x4067cf3c
 80032e8:	2001b4a8 	.word	0x2001b4a8
 80032ec:	3f4ccccd 	.word	0x3f4ccccd

080032f0 <start_CSE_task>:
	}
}

void start_CSE_task(void *argument) {
 80032f0:	b5b0      	push	{r4, r5, r7, lr}
 80032f2:	b084      	sub	sp, #16
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 80032f8:	4b21      	ldr	r3, [pc, #132]	; (8003380 <start_CSE_task+0x90>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	60fb      	str	r3, [r7, #12]
	uint32_t tick_increment = TICK2HZ * CSE_task_info.periodicity;
 80032fe:	4b21      	ldr	r3, [pc, #132]	; (8003384 <start_CSE_task+0x94>)
 8003300:	4618      	mov	r0, r3
 8003302:	f7fd f913 	bl	800052c <__aeabi_f2d>
 8003306:	a31c      	add	r3, pc, #112	; (adr r3, 8003378 <start_CSE_task+0x88>)
 8003308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800330c:	f7fd f966 	bl	80005dc <__aeabi_dmul>
 8003310:	4602      	mov	r2, r0
 8003312:	460b      	mov	r3, r1
 8003314:	4610      	mov	r0, r2
 8003316:	4619      	mov	r1, r3
 8003318:	f7fd fc38 	bl	8000b8c <__aeabi_d2uiz>
 800331c:	4603      	mov	r3, r0
 800331e:	60bb      	str	r3, [r7, #8]

	/* Make task-specific structures */
	CSE_initialize();
 8003320:	f003 f8b2 	bl	8006488 <CSE_initialize>

	/* Wait until offset */
	next_tick += TICK2HZ * CSE_task_info.offset;
 8003324:	68f8      	ldr	r0, [r7, #12]
 8003326:	f7fd f8df 	bl	80004e8 <__aeabi_ui2d>
 800332a:	4604      	mov	r4, r0
 800332c:	460d      	mov	r5, r1
 800332e:	f04f 0300 	mov.w	r3, #0
 8003332:	4618      	mov	r0, r3
 8003334:	f7fd f8fa 	bl	800052c <__aeabi_f2d>
 8003338:	a30f      	add	r3, pc, #60	; (adr r3, 8003378 <start_CSE_task+0x88>)
 800333a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800333e:	f7fd f94d 	bl	80005dc <__aeabi_dmul>
 8003342:	4602      	mov	r2, r0
 8003344:	460b      	mov	r3, r1
 8003346:	4620      	mov	r0, r4
 8003348:	4629      	mov	r1, r5
 800334a:	f7fc ff91 	bl	8000270 <__adddf3>
 800334e:	4602      	mov	r2, r0
 8003350:	460b      	mov	r3, r1
 8003352:	4610      	mov	r0, r2
 8003354:	4619      	mov	r1, r3
 8003356:	f7fd fc19 	bl	8000b8c <__aeabi_d2uiz>
 800335a:	4603      	mov	r3, r0
 800335c:	60fb      	str	r3, [r7, #12]
	osDelayUntil(next_tick);
 800335e:	68f8      	ldr	r0, [r7, #12]
 8003360:	f00f fa75 	bl	801284e <osDelayUntil>

	for (;;) {
		/* Enter periodic behaviour */
		CSE_step();
 8003364:	f001 fd8c 	bl	8004e80 <CSE_step>

		/* Wait until next period */
		next_tick += tick_increment;
 8003368:	68fa      	ldr	r2, [r7, #12]
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	4413      	add	r3, r2
 800336e:	60fb      	str	r3, [r7, #12]
		osDelayUntil(next_tick);
 8003370:	68f8      	ldr	r0, [r7, #12]
 8003372:	f00f fa6c 	bl	801284e <osDelayUntil>
		CSE_step();
 8003376:	e7f5      	b.n	8003364 <start_CSE_task+0x74>
 8003378:	f3cf3cf4 	.word	0xf3cf3cf4
 800337c:	4067cf3c 	.word	0x4067cf3c
 8003380:	2001b4a8 	.word	0x2001b4a8
 8003384:	3f4ccccd 	.word	0x3f4ccccd

08003388 <start_COOL_task>:
	}
}

void start_COOL_task(void *argument) {
 8003388:	b5b0      	push	{r4, r5, r7, lr}
 800338a:	b094      	sub	sp, #80	; 0x50
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 8003390:	4b31      	ldr	r3, [pc, #196]	; (8003458 <start_COOL_task+0xd0>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t tick_increment = TICK2HZ * COOL_task_info.periodicity;
 8003396:	4b31      	ldr	r3, [pc, #196]	; (800345c <start_COOL_task+0xd4>)
 8003398:	4618      	mov	r0, r3
 800339a:	f7fd f8c7 	bl	800052c <__aeabi_f2d>
 800339e:	a32c      	add	r3, pc, #176	; (adr r3, 8003450 <start_COOL_task+0xc8>)
 80033a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033a4:	f7fd f91a 	bl	80005dc <__aeabi_dmul>
 80033a8:	4602      	mov	r2, r0
 80033aa:	460b      	mov	r3, r1
 80033ac:	4610      	mov	r0, r2
 80033ae:	4619      	mov	r1, r3
 80033b0:	f7fd fbec 	bl	8000b8c <__aeabi_d2uiz>
 80033b4:	4603      	mov	r3, r0
 80033b6:	64bb      	str	r3, [r7, #72]	; 0x48

	/* Make task-specific structures */
	PID_t PID;
	float temperature = 20;
 80033b8:	4b29      	ldr	r3, [pc, #164]	; (8003460 <start_COOL_task+0xd8>)
 80033ba:	647b      	str	r3, [r7, #68]	; 0x44

	PID_initialize(&PID, // *ptr
 80033bc:	f107 0308 	add.w	r3, r7, #8
 80033c0:	eddf 2a28 	vldr	s5, [pc, #160]	; 8003464 <start_COOL_task+0xdc>
 80033c4:	eeb3 2a04 	vmov.f32	s4, #52	; 0x41a00000  20.0
 80033c8:	eddf 1a27 	vldr	s3, [pc, #156]	; 8003468 <start_COOL_task+0xe0>
 80033cc:	ed9f 1a26 	vldr	s2, [pc, #152]	; 8003468 <start_COOL_task+0xe0>
 80033d0:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80033d4:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 80033d8:	4618      	mov	r0, r3
 80033da:	f7fe f86e 	bl	80014ba <PID_initialize>
			0,	// Proportionate gain
			0,	// Proportionate gain
			20,	// Lower PID output bound
			100	// Upper PID output bound
			);
	FAN_initialize(&htim1);
 80033de:	4823      	ldr	r0, [pc, #140]	; (800346c <start_COOL_task+0xe4>)
 80033e0:	f7fd ff18 	bl	8001214 <FAN_initialize>

	/* Wait until offset */
	next_tick += TICK2HZ * COOL_task_info.offset;
 80033e4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80033e6:	f7fd f87f 	bl	80004e8 <__aeabi_ui2d>
 80033ea:	4604      	mov	r4, r0
 80033ec:	460d      	mov	r5, r1
 80033ee:	f04f 0300 	mov.w	r3, #0
 80033f2:	4618      	mov	r0, r3
 80033f4:	f7fd f89a 	bl	800052c <__aeabi_f2d>
 80033f8:	a315      	add	r3, pc, #84	; (adr r3, 8003450 <start_COOL_task+0xc8>)
 80033fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033fe:	f7fd f8ed 	bl	80005dc <__aeabi_dmul>
 8003402:	4602      	mov	r2, r0
 8003404:	460b      	mov	r3, r1
 8003406:	4620      	mov	r0, r4
 8003408:	4629      	mov	r1, r5
 800340a:	f7fc ff31 	bl	8000270 <__adddf3>
 800340e:	4602      	mov	r2, r0
 8003410:	460b      	mov	r3, r1
 8003412:	4610      	mov	r0, r2
 8003414:	4619      	mov	r1, r3
 8003416:	f7fd fbb9 	bl	8000b8c <__aeabi_d2uiz>
 800341a:	4603      	mov	r3, r0
 800341c:	64fb      	str	r3, [r7, #76]	; 0x4c
	osDelayUntil(next_tick);
 800341e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003420:	f00f fa15 	bl	801284e <osDelayUntil>

	for (;;) {
		/* Enter periodic behaviour */

		PID_progress(&PID, temperature);
 8003424:	f107 0308 	add.w	r3, r7, #8
 8003428:	ed97 0a11 	vldr	s0, [r7, #68]	; 0x44
 800342c:	4618      	mov	r0, r3
 800342e:	f7fd ffd5 	bl	80013dc <PID_progress>
		FAN_duty_cycle(&htim1, PID.output);
 8003432:	edd7 7a04 	vldr	s15, [r7, #16]
 8003436:	eeb0 0a67 	vmov.f32	s0, s15
 800343a:	480c      	ldr	r0, [pc, #48]	; (800346c <start_COOL_task+0xe4>)
 800343c:	f7fd ff14 	bl	8001268 <FAN_duty_cycle>

		/* Wait until next period */
		next_tick += tick_increment;
 8003440:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003442:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003444:	4413      	add	r3, r2
 8003446:	64fb      	str	r3, [r7, #76]	; 0x4c
		osDelayUntil(next_tick);
 8003448:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800344a:	f00f fa00 	bl	801284e <osDelayUntil>
		PID_progress(&PID, temperature);
 800344e:	e7e9      	b.n	8003424 <start_COOL_task+0x9c>
 8003450:	f3cf3cf4 	.word	0xf3cf3cf4
 8003454:	4067cf3c 	.word	0x4067cf3c
 8003458:	2001b4a8 	.word	0x2001b4a8
 800345c:	3f4ccccd 	.word	0x3f4ccccd
 8003460:	41a00000 	.word	0x41a00000
 8003464:	42c80000 	.word	0x42c80000
 8003468:	00000000 	.word	0x00000000
 800346c:	2001bb5c 	.word	0x2001bb5c

08003470 <start_SIM_task>:
	}
}

void start_SIM_task(void *argument) {
 8003470:	b5b0      	push	{r4, r5, r7, lr}
 8003472:	b086      	sub	sp, #24
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 8003478:	4b23      	ldr	r3, [pc, #140]	; (8003508 <start_SIM_task+0x98>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	617b      	str	r3, [r7, #20]
	uint32_t tick_increment = TICK2HZ * SIM_task_info.periodicity;
 800347e:	4b23      	ldr	r3, [pc, #140]	; (800350c <start_SIM_task+0x9c>)
 8003480:	4618      	mov	r0, r3
 8003482:	f7fd f853 	bl	800052c <__aeabi_f2d>
 8003486:	a31e      	add	r3, pc, #120	; (adr r3, 8003500 <start_SIM_task+0x90>)
 8003488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800348c:	f7fd f8a6 	bl	80005dc <__aeabi_dmul>
 8003490:	4602      	mov	r2, r0
 8003492:	460b      	mov	r3, r1
 8003494:	4610      	mov	r0, r2
 8003496:	4619      	mov	r1, r3
 8003498:	f7fd fb78 	bl	8000b8c <__aeabi_d2uiz>
 800349c:	4603      	mov	r3, r0
 800349e:	613b      	str	r3, [r7, #16]

	/* Make task-specific structures */
	initialize_SIM();
 80034a0:	f7fe f9b1 	bl	8001806 <initialize_SIM>
	uint16_t K = 0;
 80034a4:	2300      	movs	r3, #0
 80034a6:	81fb      	strh	r3, [r7, #14]

	/* Wait until offset */
	next_tick += TICK2HZ * SIM_task_info.offset;
 80034a8:	6978      	ldr	r0, [r7, #20]
 80034aa:	f7fd f81d 	bl	80004e8 <__aeabi_ui2d>
 80034ae:	4604      	mov	r4, r0
 80034b0:	460d      	mov	r5, r1
 80034b2:	f04f 0300 	mov.w	r3, #0
 80034b6:	4618      	mov	r0, r3
 80034b8:	f7fd f838 	bl	800052c <__aeabi_f2d>
 80034bc:	a310      	add	r3, pc, #64	; (adr r3, 8003500 <start_SIM_task+0x90>)
 80034be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034c2:	f7fd f88b 	bl	80005dc <__aeabi_dmul>
 80034c6:	4602      	mov	r2, r0
 80034c8:	460b      	mov	r3, r1
 80034ca:	4620      	mov	r0, r4
 80034cc:	4629      	mov	r1, r5
 80034ce:	f7fc fecf 	bl	8000270 <__adddf3>
 80034d2:	4602      	mov	r2, r0
 80034d4:	460b      	mov	r3, r1
 80034d6:	4610      	mov	r0, r2
 80034d8:	4619      	mov	r1, r3
 80034da:	f7fd fb57 	bl	8000b8c <__aeabi_d2uiz>
 80034de:	4603      	mov	r3, r0
 80034e0:	617b      	str	r3, [r7, #20]
	osDelayUntil(next_tick);
 80034e2:	6978      	ldr	r0, [r7, #20]
 80034e4:	f00f f9b3 	bl	801284e <osDelayUntil>

	for (;;) {
		/* Enter periodic behaviour */
		SIM_step();
 80034e8:	f7fe f996 	bl	8001818 <SIM_step>

		/* Wait until next period */
		next_tick += tick_increment;
 80034ec:	697a      	ldr	r2, [r7, #20]
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	4413      	add	r3, r2
 80034f2:	617b      	str	r3, [r7, #20]
		osDelayUntil(next_tick);
 80034f4:	6978      	ldr	r0, [r7, #20]
 80034f6:	f00f f9aa 	bl	801284e <osDelayUntil>
		SIM_step();
 80034fa:	e7f5      	b.n	80034e8 <start_SIM_task+0x78>
 80034fc:	f3af 8000 	nop.w
 8003500:	f3cf3cf4 	.word	0xf3cf3cf4
 8003504:	4067cf3c 	.word	0x4067cf3c
 8003508:	2001b4a8 	.word	0x2001b4a8
 800350c:	3f4ccccd 	.word	0x3f4ccccd

08003510 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003510:	b580      	push	{r7, lr}
 8003512:	b082      	sub	sp, #8
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM5) {
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a04      	ldr	r2, [pc, #16]	; (8003530 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d101      	bne.n	8003526 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8003522:	f00a fe69 	bl	800e1f8 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8003526:	bf00      	nop
 8003528:	3708      	adds	r7, #8
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	40000c00 	.word	0x40000c00

08003534 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8003534:	b480      	push	{r7}
 8003536:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003538:	b672      	cpsid	i
}
 800353a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800353c:	e7fe      	b.n	800353c <Error_Handler+0x8>
	...

08003540 <initialize_LTC>:
/*
 * @brief	Set the hspi which LTC uses
 * @param	The hspi to be used
 * @retval	None
 */
void initialize_LTC(SPI_HandleTypeDef *hspi) {
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
	hltc = hspi;
 8003548:	4a04      	ldr	r2, [pc, #16]	; (800355c <initialize_LTC+0x1c>)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6013      	str	r3, [r2, #0]
}
 800354e:	bf00      	nop
 8003550:	370c      	adds	r7, #12
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr
 800355a:	bf00      	nop
 800355c:	2001b5c8 	.word	0x2001b5c8

08003560 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8003564:	4b17      	ldr	r3, [pc, #92]	; (80035c4 <MX_SPI2_Init+0x64>)
 8003566:	4a18      	ldr	r2, [pc, #96]	; (80035c8 <MX_SPI2_Init+0x68>)
 8003568:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800356a:	4b16      	ldr	r3, [pc, #88]	; (80035c4 <MX_SPI2_Init+0x64>)
 800356c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003570:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003572:	4b14      	ldr	r3, [pc, #80]	; (80035c4 <MX_SPI2_Init+0x64>)
 8003574:	2200      	movs	r2, #0
 8003576:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003578:	4b12      	ldr	r3, [pc, #72]	; (80035c4 <MX_SPI2_Init+0x64>)
 800357a:	2200      	movs	r2, #0
 800357c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800357e:	4b11      	ldr	r3, [pc, #68]	; (80035c4 <MX_SPI2_Init+0x64>)
 8003580:	2200      	movs	r2, #0
 8003582:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003584:	4b0f      	ldr	r3, [pc, #60]	; (80035c4 <MX_SPI2_Init+0x64>)
 8003586:	2200      	movs	r2, #0
 8003588:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800358a:	4b0e      	ldr	r3, [pc, #56]	; (80035c4 <MX_SPI2_Init+0x64>)
 800358c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003590:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8003592:	4b0c      	ldr	r3, [pc, #48]	; (80035c4 <MX_SPI2_Init+0x64>)
 8003594:	2220      	movs	r2, #32
 8003596:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003598:	4b0a      	ldr	r3, [pc, #40]	; (80035c4 <MX_SPI2_Init+0x64>)
 800359a:	2200      	movs	r2, #0
 800359c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800359e:	4b09      	ldr	r3, [pc, #36]	; (80035c4 <MX_SPI2_Init+0x64>)
 80035a0:	2200      	movs	r2, #0
 80035a2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80035a4:	4b07      	ldr	r3, [pc, #28]	; (80035c4 <MX_SPI2_Init+0x64>)
 80035a6:	2200      	movs	r2, #0
 80035a8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80035aa:	4b06      	ldr	r3, [pc, #24]	; (80035c4 <MX_SPI2_Init+0x64>)
 80035ac:	220a      	movs	r2, #10
 80035ae:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80035b0:	4804      	ldr	r0, [pc, #16]	; (80035c4 <MX_SPI2_Init+0x64>)
 80035b2:	f00d f967 	bl	8010884 <HAL_SPI_Init>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d001      	beq.n	80035c0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80035bc:	f7ff ffba 	bl	8003534 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80035c0:	bf00      	nop
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	2001ba74 	.word	0x2001ba74
 80035c8:	40003800 	.word	0x40003800

080035cc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b08a      	sub	sp, #40	; 0x28
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035d4:	f107 0314 	add.w	r3, r7, #20
 80035d8:	2200      	movs	r2, #0
 80035da:	601a      	str	r2, [r3, #0]
 80035dc:	605a      	str	r2, [r3, #4]
 80035de:	609a      	str	r2, [r3, #8]
 80035e0:	60da      	str	r2, [r3, #12]
 80035e2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a28      	ldr	r2, [pc, #160]	; (800368c <HAL_SPI_MspInit+0xc0>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d14a      	bne.n	8003684 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80035ee:	2300      	movs	r3, #0
 80035f0:	613b      	str	r3, [r7, #16]
 80035f2:	4b27      	ldr	r3, [pc, #156]	; (8003690 <HAL_SPI_MspInit+0xc4>)
 80035f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f6:	4a26      	ldr	r2, [pc, #152]	; (8003690 <HAL_SPI_MspInit+0xc4>)
 80035f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035fc:	6413      	str	r3, [r2, #64]	; 0x40
 80035fe:	4b24      	ldr	r3, [pc, #144]	; (8003690 <HAL_SPI_MspInit+0xc4>)
 8003600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003602:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003606:	613b      	str	r3, [r7, #16]
 8003608:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800360a:	2300      	movs	r3, #0
 800360c:	60fb      	str	r3, [r7, #12]
 800360e:	4b20      	ldr	r3, [pc, #128]	; (8003690 <HAL_SPI_MspInit+0xc4>)
 8003610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003612:	4a1f      	ldr	r2, [pc, #124]	; (8003690 <HAL_SPI_MspInit+0xc4>)
 8003614:	f043 0304 	orr.w	r3, r3, #4
 8003618:	6313      	str	r3, [r2, #48]	; 0x30
 800361a:	4b1d      	ldr	r3, [pc, #116]	; (8003690 <HAL_SPI_MspInit+0xc4>)
 800361c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361e:	f003 0304 	and.w	r3, r3, #4
 8003622:	60fb      	str	r3, [r7, #12]
 8003624:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003626:	2300      	movs	r3, #0
 8003628:	60bb      	str	r3, [r7, #8]
 800362a:	4b19      	ldr	r3, [pc, #100]	; (8003690 <HAL_SPI_MspInit+0xc4>)
 800362c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362e:	4a18      	ldr	r2, [pc, #96]	; (8003690 <HAL_SPI_MspInit+0xc4>)
 8003630:	f043 0302 	orr.w	r3, r3, #2
 8003634:	6313      	str	r3, [r2, #48]	; 0x30
 8003636:	4b16      	ldr	r3, [pc, #88]	; (8003690 <HAL_SPI_MspInit+0xc4>)
 8003638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800363a:	f003 0302 	and.w	r3, r3, #2
 800363e:	60bb      	str	r3, [r7, #8]
 8003640:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003642:	230c      	movs	r3, #12
 8003644:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003646:	2302      	movs	r3, #2
 8003648:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800364a:	2300      	movs	r3, #0
 800364c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800364e:	2303      	movs	r3, #3
 8003650:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003652:	2305      	movs	r3, #5
 8003654:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003656:	f107 0314 	add.w	r3, r7, #20
 800365a:	4619      	mov	r1, r3
 800365c:	480d      	ldr	r0, [pc, #52]	; (8003694 <HAL_SPI_MspInit+0xc8>)
 800365e:	f00c facd 	bl	800fbfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003662:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003666:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003668:	2302      	movs	r3, #2
 800366a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800366c:	2300      	movs	r3, #0
 800366e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003670:	2303      	movs	r3, #3
 8003672:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003674:	2305      	movs	r3, #5
 8003676:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003678:	f107 0314 	add.w	r3, r7, #20
 800367c:	4619      	mov	r1, r3
 800367e:	4806      	ldr	r0, [pc, #24]	; (8003698 <HAL_SPI_MspInit+0xcc>)
 8003680:	f00c fabc 	bl	800fbfc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8003684:	bf00      	nop
 8003686:	3728      	adds	r7, #40	; 0x28
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}
 800368c:	40003800 	.word	0x40003800
 8003690:	40023800 	.word	0x40023800
 8003694:	40020800 	.word	0x40020800
 8003698:	40020400 	.word	0x40020400

0800369c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b082      	sub	sp, #8
 80036a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036a2:	2300      	movs	r3, #0
 80036a4:	607b      	str	r3, [r7, #4]
 80036a6:	4b12      	ldr	r3, [pc, #72]	; (80036f0 <HAL_MspInit+0x54>)
 80036a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036aa:	4a11      	ldr	r2, [pc, #68]	; (80036f0 <HAL_MspInit+0x54>)
 80036ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036b0:	6453      	str	r3, [r2, #68]	; 0x44
 80036b2:	4b0f      	ldr	r3, [pc, #60]	; (80036f0 <HAL_MspInit+0x54>)
 80036b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036ba:	607b      	str	r3, [r7, #4]
 80036bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80036be:	2300      	movs	r3, #0
 80036c0:	603b      	str	r3, [r7, #0]
 80036c2:	4b0b      	ldr	r3, [pc, #44]	; (80036f0 <HAL_MspInit+0x54>)
 80036c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c6:	4a0a      	ldr	r2, [pc, #40]	; (80036f0 <HAL_MspInit+0x54>)
 80036c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036cc:	6413      	str	r3, [r2, #64]	; 0x40
 80036ce:	4b08      	ldr	r3, [pc, #32]	; (80036f0 <HAL_MspInit+0x54>)
 80036d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036d6:	603b      	str	r3, [r7, #0]
 80036d8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80036da:	2200      	movs	r2, #0
 80036dc:	210f      	movs	r1, #15
 80036de:	f06f 0001 	mvn.w	r0, #1
 80036e2:	f00b fef1 	bl	800f4c8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80036e6:	bf00      	nop
 80036e8:	3708      	adds	r7, #8
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	40023800 	.word	0x40023800

080036f4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b08c      	sub	sp, #48	; 0x30
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80036fc:	2300      	movs	r3, #0
 80036fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003700:	2300      	movs	r3, #0
 8003702:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 8003704:	2200      	movs	r2, #0
 8003706:	6879      	ldr	r1, [r7, #4]
 8003708:	2032      	movs	r0, #50	; 0x32
 800370a:	f00b fedd 	bl	800f4c8 <HAL_NVIC_SetPriority>

  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800370e:	2032      	movs	r0, #50	; 0x32
 8003710:	f00b fef6 	bl	800f500 <HAL_NVIC_EnableIRQ>

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8003714:	2300      	movs	r3, #0
 8003716:	60fb      	str	r3, [r7, #12]
 8003718:	4b1f      	ldr	r3, [pc, #124]	; (8003798 <HAL_InitTick+0xa4>)
 800371a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371c:	4a1e      	ldr	r2, [pc, #120]	; (8003798 <HAL_InitTick+0xa4>)
 800371e:	f043 0308 	orr.w	r3, r3, #8
 8003722:	6413      	str	r3, [r2, #64]	; 0x40
 8003724:	4b1c      	ldr	r3, [pc, #112]	; (8003798 <HAL_InitTick+0xa4>)
 8003726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003728:	f003 0308 	and.w	r3, r3, #8
 800372c:	60fb      	str	r3, [r7, #12]
 800372e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003730:	f107 0210 	add.w	r2, r7, #16
 8003734:	f107 0314 	add.w	r3, r7, #20
 8003738:	4611      	mov	r1, r2
 800373a:	4618      	mov	r0, r3
 800373c:	f00d f870 	bl	8010820 <HAL_RCC_GetClockConfig>

  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003740:	f00d f85a 	bl	80107f8 <HAL_RCC_GetPCLK1Freq>
 8003744:	4603      	mov	r3, r0
 8003746:	005b      	lsls	r3, r3, #1
 8003748:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800374a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800374c:	4a13      	ldr	r2, [pc, #76]	; (800379c <HAL_InitTick+0xa8>)
 800374e:	fba2 2303 	umull	r2, r3, r2, r3
 8003752:	0c9b      	lsrs	r3, r3, #18
 8003754:	3b01      	subs	r3, #1
 8003756:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8003758:	4b11      	ldr	r3, [pc, #68]	; (80037a0 <HAL_InitTick+0xac>)
 800375a:	4a12      	ldr	r2, [pc, #72]	; (80037a4 <HAL_InitTick+0xb0>)
 800375c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 800375e:	4b10      	ldr	r3, [pc, #64]	; (80037a0 <HAL_InitTick+0xac>)
 8003760:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003764:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8003766:	4a0e      	ldr	r2, [pc, #56]	; (80037a0 <HAL_InitTick+0xac>)
 8003768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800376a:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 800376c:	4b0c      	ldr	r3, [pc, #48]	; (80037a0 <HAL_InitTick+0xac>)
 800376e:	2200      	movs	r2, #0
 8003770:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003772:	4b0b      	ldr	r3, [pc, #44]	; (80037a0 <HAL_InitTick+0xac>)
 8003774:	2200      	movs	r2, #0
 8003776:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8003778:	4809      	ldr	r0, [pc, #36]	; (80037a0 <HAL_InitTick+0xac>)
 800377a:	f00d f90c 	bl	8010996 <HAL_TIM_Base_Init>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d104      	bne.n	800378e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8003784:	4806      	ldr	r0, [pc, #24]	; (80037a0 <HAL_InitTick+0xac>)
 8003786:	f00d f9bd 	bl	8010b04 <HAL_TIM_Base_Start_IT>
 800378a:	4603      	mov	r3, r0
 800378c:	e000      	b.n	8003790 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
}
 8003790:	4618      	mov	r0, r3
 8003792:	3730      	adds	r7, #48	; 0x30
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}
 8003798:	40023800 	.word	0x40023800
 800379c:	431bde83 	.word	0x431bde83
 80037a0:	2001bacc 	.word	0x2001bacc
 80037a4:	40000c00 	.word	0x40000c00

080037a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80037a8:	b480      	push	{r7}
 80037aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80037ac:	e7fe      	b.n	80037ac <NMI_Handler+0x4>

080037ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80037ae:	b480      	push	{r7}
 80037b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80037b2:	e7fe      	b.n	80037b2 <HardFault_Handler+0x4>

080037b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80037b4:	b480      	push	{r7}
 80037b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80037b8:	e7fe      	b.n	80037b8 <MemManage_Handler+0x4>

080037ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80037ba:	b480      	push	{r7}
 80037bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80037be:	e7fe      	b.n	80037be <BusFault_Handler+0x4>

080037c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80037c0:	b480      	push	{r7}
 80037c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80037c4:	e7fe      	b.n	80037c4 <UsageFault_Handler+0x4>

080037c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80037c6:	b480      	push	{r7}
 80037c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80037ca:	bf00      	nop
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr

080037d4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80037d8:	4802      	ldr	r0, [pc, #8]	; (80037e4 <ADC_IRQHandler+0x10>)
 80037da:	f00a fd70 	bl	800e2be <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80037de:	bf00      	nop
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	2001b4b4 	.word	0x2001b4b4

080037e8 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80037ec:	4802      	ldr	r0, [pc, #8]	; (80037f8 <CAN1_TX_IRQHandler+0x10>)
 80037ee:	f00b fb7a 	bl	800eee6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 80037f2:	bf00      	nop
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	2001b584 	.word	0x2001b584

080037fc <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003800:	4802      	ldr	r0, [pc, #8]	; (800380c <CAN1_RX0_IRQHandler+0x10>)
 8003802:	f00b fb70 	bl	800eee6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8003806:	bf00      	nop
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	2001b584 	.word	0x2001b584

08003810 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003814:	4802      	ldr	r0, [pc, #8]	; (8003820 <CAN1_RX1_IRQHandler+0x10>)
 8003816:	f00b fb66 	bl	800eee6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800381a:	bf00      	nop
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	2001b584 	.word	0x2001b584

08003824 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003828:	4802      	ldr	r0, [pc, #8]	; (8003834 <TIM2_IRQHandler+0x10>)
 800382a:	f00d fd5b 	bl	80112e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800382e:	bf00      	nop
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	2001bba4 	.word	0x2001bba4

08003838 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800383c:	4802      	ldr	r0, [pc, #8]	; (8003848 <TIM3_IRQHandler+0x10>)
 800383e:	f00d fd51 	bl	80112e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003842:	bf00      	nop
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop
 8003848:	2001bb14 	.word	0x2001bb14

0800384c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003850:	4802      	ldr	r0, [pc, #8]	; (800385c <TIM5_IRQHandler+0x10>)
 8003852:	f00d fd47 	bl	80112e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003856:	bf00      	nop
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	2001bacc 	.word	0x2001bacc

08003860 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003864:	4802      	ldr	r0, [pc, #8]	; (8003870 <DMA2_Stream0_IRQHandler+0x10>)
 8003866:	f00b ff5f 	bl	800f728 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800386a:	bf00      	nop
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	2001b4fc 	.word	0x2001b4fc

08003874 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003874:	b480      	push	{r7}
 8003876:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003878:	4b06      	ldr	r3, [pc, #24]	; (8003894 <SystemInit+0x20>)
 800387a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800387e:	4a05      	ldr	r2, [pc, #20]	; (8003894 <SystemInit+0x20>)
 8003880:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003884:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003888:	bf00      	nop
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop
 8003894:	e000ed00 	.word	0xe000ed00

08003898 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b096      	sub	sp, #88	; 0x58
 800389c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800389e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80038a2:	2200      	movs	r2, #0
 80038a4:	601a      	str	r2, [r3, #0]
 80038a6:	605a      	str	r2, [r3, #4]
 80038a8:	609a      	str	r2, [r3, #8]
 80038aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038ac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80038b0:	2200      	movs	r2, #0
 80038b2:	601a      	str	r2, [r3, #0]
 80038b4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80038b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038ba:	2200      	movs	r2, #0
 80038bc:	601a      	str	r2, [r3, #0]
 80038be:	605a      	str	r2, [r3, #4]
 80038c0:	609a      	str	r2, [r3, #8]
 80038c2:	60da      	str	r2, [r3, #12]
 80038c4:	611a      	str	r2, [r3, #16]
 80038c6:	615a      	str	r2, [r3, #20]
 80038c8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80038ca:	1d3b      	adds	r3, r7, #4
 80038cc:	2220      	movs	r2, #32
 80038ce:	2100      	movs	r1, #0
 80038d0:	4618      	mov	r0, r3
 80038d2:	f013 f951 	bl	8016b78 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80038d6:	4b3e      	ldr	r3, [pc, #248]	; (80039d0 <MX_TIM1_Init+0x138>)
 80038d8:	4a3e      	ldr	r2, [pc, #248]	; (80039d4 <MX_TIM1_Init+0x13c>)
 80038da:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80038dc:	4b3c      	ldr	r3, [pc, #240]	; (80039d0 <MX_TIM1_Init+0x138>)
 80038de:	2200      	movs	r2, #0
 80038e0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038e2:	4b3b      	ldr	r3, [pc, #236]	; (80039d0 <MX_TIM1_Init+0x138>)
 80038e4:	2200      	movs	r2, #0
 80038e6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80038e8:	4b39      	ldr	r3, [pc, #228]	; (80039d0 <MX_TIM1_Init+0x138>)
 80038ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80038ee:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038f0:	4b37      	ldr	r3, [pc, #220]	; (80039d0 <MX_TIM1_Init+0x138>)
 80038f2:	2200      	movs	r2, #0
 80038f4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80038f6:	4b36      	ldr	r3, [pc, #216]	; (80039d0 <MX_TIM1_Init+0x138>)
 80038f8:	2200      	movs	r2, #0
 80038fa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80038fc:	4b34      	ldr	r3, [pc, #208]	; (80039d0 <MX_TIM1_Init+0x138>)
 80038fe:	2200      	movs	r2, #0
 8003900:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003902:	4833      	ldr	r0, [pc, #204]	; (80039d0 <MX_TIM1_Init+0x138>)
 8003904:	f00d f847 	bl	8010996 <HAL_TIM_Base_Init>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d001      	beq.n	8003912 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800390e:	f7ff fe11 	bl	8003534 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003912:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003916:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003918:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800391c:	4619      	mov	r1, r3
 800391e:	482c      	ldr	r0, [pc, #176]	; (80039d0 <MX_TIM1_Init+0x138>)
 8003920:	f00d ff46 	bl	80117b0 <HAL_TIM_ConfigClockSource>
 8003924:	4603      	mov	r3, r0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d001      	beq.n	800392e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800392a:	f7ff fe03 	bl	8003534 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800392e:	4828      	ldr	r0, [pc, #160]	; (80039d0 <MX_TIM1_Init+0x138>)
 8003930:	f00d f958 	bl	8010be4 <HAL_TIM_PWM_Init>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d001      	beq.n	800393e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800393a:	f7ff fdfb 	bl	8003534 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800393e:	2300      	movs	r3, #0
 8003940:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003942:	2300      	movs	r3, #0
 8003944:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003946:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800394a:	4619      	mov	r1, r3
 800394c:	4820      	ldr	r0, [pc, #128]	; (80039d0 <MX_TIM1_Init+0x138>)
 800394e:	f00e fd67 	bl	8012420 <HAL_TIMEx_MasterConfigSynchronization>
 8003952:	4603      	mov	r3, r0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d001      	beq.n	800395c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8003958:	f7ff fdec 	bl	8003534 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800395c:	2360      	movs	r3, #96	; 0x60
 800395e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003960:	2300      	movs	r3, #0
 8003962:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003964:	2300      	movs	r3, #0
 8003966:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003968:	2300      	movs	r3, #0
 800396a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800396c:	2300      	movs	r3, #0
 800396e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003970:	2300      	movs	r3, #0
 8003972:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003974:	2300      	movs	r3, #0
 8003976:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003978:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800397c:	2208      	movs	r2, #8
 800397e:	4619      	mov	r1, r3
 8003980:	4813      	ldr	r0, [pc, #76]	; (80039d0 <MX_TIM1_Init+0x138>)
 8003982:	f00d fe53 	bl	801162c <HAL_TIM_PWM_ConfigChannel>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d001      	beq.n	8003990 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 800398c:	f7ff fdd2 	bl	8003534 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003990:	2300      	movs	r3, #0
 8003992:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003994:	2300      	movs	r3, #0
 8003996:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003998:	2300      	movs	r3, #0
 800399a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800399c:	2300      	movs	r3, #0
 800399e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80039a0:	2300      	movs	r3, #0
 80039a2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80039a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80039a8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80039aa:	2300      	movs	r3, #0
 80039ac:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80039ae:	1d3b      	adds	r3, r7, #4
 80039b0:	4619      	mov	r1, r3
 80039b2:	4807      	ldr	r0, [pc, #28]	; (80039d0 <MX_TIM1_Init+0x138>)
 80039b4:	f00e fdb0 	bl	8012518 <HAL_TIMEx_ConfigBreakDeadTime>
 80039b8:	4603      	mov	r3, r0
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d001      	beq.n	80039c2 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80039be:	f7ff fdb9 	bl	8003534 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80039c2:	4803      	ldr	r0, [pc, #12]	; (80039d0 <MX_TIM1_Init+0x138>)
 80039c4:	f000 f974 	bl	8003cb0 <HAL_TIM_MspPostInit>

}
 80039c8:	bf00      	nop
 80039ca:	3758      	adds	r7, #88	; 0x58
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	2001bb5c 	.word	0x2001bb5c
 80039d4:	40010000 	.word	0x40010000

080039d8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b090      	sub	sp, #64	; 0x40
 80039dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80039de:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80039e2:	2200      	movs	r2, #0
 80039e4:	601a      	str	r2, [r3, #0]
 80039e6:	605a      	str	r2, [r3, #4]
 80039e8:	609a      	str	r2, [r3, #8]
 80039ea:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80039ec:	f107 031c 	add.w	r3, r7, #28
 80039f0:	2200      	movs	r2, #0
 80039f2:	601a      	str	r2, [r3, #0]
 80039f4:	605a      	str	r2, [r3, #4]
 80039f6:	609a      	str	r2, [r3, #8]
 80039f8:	60da      	str	r2, [r3, #12]
 80039fa:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80039fc:	f107 030c 	add.w	r3, r7, #12
 8003a00:	2200      	movs	r2, #0
 8003a02:	601a      	str	r2, [r3, #0]
 8003a04:	605a      	str	r2, [r3, #4]
 8003a06:	609a      	str	r2, [r3, #8]
 8003a08:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a0a:	1d3b      	adds	r3, r7, #4
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	601a      	str	r2, [r3, #0]
 8003a10:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003a12:	4b3e      	ldr	r3, [pc, #248]	; (8003b0c <MX_TIM2_Init+0x134>)
 8003a14:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003a18:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003a1a:	4b3c      	ldr	r3, [pc, #240]	; (8003b0c <MX_TIM2_Init+0x134>)
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a20:	4b3a      	ldr	r3, [pc, #232]	; (8003b0c <MX_TIM2_Init+0x134>)
 8003a22:	2200      	movs	r2, #0
 8003a24:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8003a26:	4b39      	ldr	r3, [pc, #228]	; (8003b0c <MX_TIM2_Init+0x134>)
 8003a28:	f04f 32ff 	mov.w	r2, #4294967295
 8003a2c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a2e:	4b37      	ldr	r3, [pc, #220]	; (8003b0c <MX_TIM2_Init+0x134>)
 8003a30:	2200      	movs	r2, #0
 8003a32:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a34:	4b35      	ldr	r3, [pc, #212]	; (8003b0c <MX_TIM2_Init+0x134>)
 8003a36:	2200      	movs	r2, #0
 8003a38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003a3a:	4834      	ldr	r0, [pc, #208]	; (8003b0c <MX_TIM2_Init+0x134>)
 8003a3c:	f00c ffab 	bl	8010996 <HAL_TIM_Base_Init>
 8003a40:	4603      	mov	r3, r0
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d001      	beq.n	8003a4a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8003a46:	f7ff fd75 	bl	8003534 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003a4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a4e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003a50:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003a54:	4619      	mov	r1, r3
 8003a56:	482d      	ldr	r0, [pc, #180]	; (8003b0c <MX_TIM2_Init+0x134>)
 8003a58:	f00d feaa 	bl	80117b0 <HAL_TIM_ConfigClockSource>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d001      	beq.n	8003a66 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8003a62:	f7ff fd67 	bl	8003534 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8003a66:	4829      	ldr	r0, [pc, #164]	; (8003b0c <MX_TIM2_Init+0x134>)
 8003a68:	f00d f9de 	bl	8010e28 <HAL_TIM_IC_Init>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d001      	beq.n	8003a76 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8003a72:	f7ff fd5f 	bl	8003534 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8003a76:	2304      	movs	r3, #4
 8003a78:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8003a7a:	2350      	movs	r3, #80	; 0x50
 8003a7c:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8003a82:	2300      	movs	r3, #0
 8003a84:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8003a86:	2300      	movs	r3, #0
 8003a88:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8003a8a:	f107 031c 	add.w	r3, r7, #28
 8003a8e:	4619      	mov	r1, r3
 8003a90:	481e      	ldr	r0, [pc, #120]	; (8003b0c <MX_TIM2_Init+0x134>)
 8003a92:	f00d ff54 	bl	801193e <HAL_TIM_SlaveConfigSynchro>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d001      	beq.n	8003aa0 <MX_TIM2_Init+0xc8>
  {
    Error_Handler();
 8003a9c:	f7ff fd4a 	bl	8003534 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8003aac:	2300      	movs	r3, #0
 8003aae:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003ab0:	f107 030c 	add.w	r3, r7, #12
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	4619      	mov	r1, r3
 8003ab8:	4814      	ldr	r0, [pc, #80]	; (8003b0c <MX_TIM2_Init+0x134>)
 8003aba:	f00d fd1b 	bl	80114f4 <HAL_TIM_IC_ConfigChannel>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d001      	beq.n	8003ac8 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8003ac4:	f7ff fd36 	bl	8003534 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8003ac8:	2302      	movs	r3, #2
 8003aca:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8003acc:	2302      	movs	r3, #2
 8003ace:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8003ad0:	f107 030c 	add.w	r3, r7, #12
 8003ad4:	2204      	movs	r2, #4
 8003ad6:	4619      	mov	r1, r3
 8003ad8:	480c      	ldr	r0, [pc, #48]	; (8003b0c <MX_TIM2_Init+0x134>)
 8003ada:	f00d fd0b 	bl	80114f4 <HAL_TIM_IC_ConfigChannel>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d001      	beq.n	8003ae8 <MX_TIM2_Init+0x110>
  {
    Error_Handler();
 8003ae4:	f7ff fd26 	bl	8003534 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003aec:	2300      	movs	r3, #0
 8003aee:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003af0:	1d3b      	adds	r3, r7, #4
 8003af2:	4619      	mov	r1, r3
 8003af4:	4805      	ldr	r0, [pc, #20]	; (8003b0c <MX_TIM2_Init+0x134>)
 8003af6:	f00e fc93 	bl	8012420 <HAL_TIMEx_MasterConfigSynchronization>
 8003afa:	4603      	mov	r3, r0
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d001      	beq.n	8003b04 <MX_TIM2_Init+0x12c>
  {
    Error_Handler();
 8003b00:	f7ff fd18 	bl	8003534 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003b04:	bf00      	nop
 8003b06:	3740      	adds	r7, #64	; 0x40
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	2001bba4 	.word	0x2001bba4

08003b10 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b086      	sub	sp, #24
 8003b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003b16:	f107 0308 	add.w	r3, r7, #8
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	601a      	str	r2, [r3, #0]
 8003b1e:	605a      	str	r2, [r3, #4]
 8003b20:	609a      	str	r2, [r3, #8]
 8003b22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b24:	463b      	mov	r3, r7
 8003b26:	2200      	movs	r2, #0
 8003b28:	601a      	str	r2, [r3, #0]
 8003b2a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003b2c:	4b1d      	ldr	r3, [pc, #116]	; (8003ba4 <MX_TIM3_Init+0x94>)
 8003b2e:	4a1e      	ldr	r2, [pc, #120]	; (8003ba8 <MX_TIM3_Init+0x98>)
 8003b30:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003b32:	4b1c      	ldr	r3, [pc, #112]	; (8003ba4 <MX_TIM3_Init+0x94>)
 8003b34:	2200      	movs	r2, #0
 8003b36:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b38:	4b1a      	ldr	r3, [pc, #104]	; (8003ba4 <MX_TIM3_Init+0x94>)
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003b3e:	4b19      	ldr	r3, [pc, #100]	; (8003ba4 <MX_TIM3_Init+0x94>)
 8003b40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b44:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b46:	4b17      	ldr	r3, [pc, #92]	; (8003ba4 <MX_TIM3_Init+0x94>)
 8003b48:	2200      	movs	r2, #0
 8003b4a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b4c:	4b15      	ldr	r3, [pc, #84]	; (8003ba4 <MX_TIM3_Init+0x94>)
 8003b4e:	2200      	movs	r2, #0
 8003b50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003b52:	4814      	ldr	r0, [pc, #80]	; (8003ba4 <MX_TIM3_Init+0x94>)
 8003b54:	f00c ff1f 	bl	8010996 <HAL_TIM_Base_Init>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d001      	beq.n	8003b62 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8003b5e:	f7ff fce9 	bl	8003534 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003b62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b66:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003b68:	f107 0308 	add.w	r3, r7, #8
 8003b6c:	4619      	mov	r1, r3
 8003b6e:	480d      	ldr	r0, [pc, #52]	; (8003ba4 <MX_TIM3_Init+0x94>)
 8003b70:	f00d fe1e 	bl	80117b0 <HAL_TIM_ConfigClockSource>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d001      	beq.n	8003b7e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8003b7a:	f7ff fcdb 	bl	8003534 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003b7e:	2320      	movs	r3, #32
 8003b80:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b82:	2300      	movs	r3, #0
 8003b84:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003b86:	463b      	mov	r3, r7
 8003b88:	4619      	mov	r1, r3
 8003b8a:	4806      	ldr	r0, [pc, #24]	; (8003ba4 <MX_TIM3_Init+0x94>)
 8003b8c:	f00e fc48 	bl	8012420 <HAL_TIMEx_MasterConfigSynchronization>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d001      	beq.n	8003b9a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8003b96:	f7ff fccd 	bl	8003534 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003b9a:	bf00      	nop
 8003b9c:	3718      	adds	r7, #24
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	2001bb14 	.word	0x2001bb14
 8003ba8:	40000400 	.word	0x40000400

08003bac <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b08c      	sub	sp, #48	; 0x30
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bb4:	f107 031c 	add.w	r3, r7, #28
 8003bb8:	2200      	movs	r2, #0
 8003bba:	601a      	str	r2, [r3, #0]
 8003bbc:	605a      	str	r2, [r3, #4]
 8003bbe:	609a      	str	r2, [r3, #8]
 8003bc0:	60da      	str	r2, [r3, #12]
 8003bc2:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a35      	ldr	r2, [pc, #212]	; (8003ca0 <HAL_TIM_Base_MspInit+0xf4>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d10e      	bne.n	8003bec <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003bce:	2300      	movs	r3, #0
 8003bd0:	61bb      	str	r3, [r7, #24]
 8003bd2:	4b34      	ldr	r3, [pc, #208]	; (8003ca4 <HAL_TIM_Base_MspInit+0xf8>)
 8003bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bd6:	4a33      	ldr	r2, [pc, #204]	; (8003ca4 <HAL_TIM_Base_MspInit+0xf8>)
 8003bd8:	f043 0301 	orr.w	r3, r3, #1
 8003bdc:	6453      	str	r3, [r2, #68]	; 0x44
 8003bde:	4b31      	ldr	r3, [pc, #196]	; (8003ca4 <HAL_TIM_Base_MspInit+0xf8>)
 8003be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003be2:	f003 0301 	and.w	r3, r3, #1
 8003be6:	61bb      	str	r3, [r7, #24]
 8003be8:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8003bea:	e055      	b.n	8003c98 <HAL_TIM_Base_MspInit+0xec>
  else if(tim_baseHandle->Instance==TIM2)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bf4:	d135      	bne.n	8003c62 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	617b      	str	r3, [r7, #20]
 8003bfa:	4b2a      	ldr	r3, [pc, #168]	; (8003ca4 <HAL_TIM_Base_MspInit+0xf8>)
 8003bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfe:	4a29      	ldr	r2, [pc, #164]	; (8003ca4 <HAL_TIM_Base_MspInit+0xf8>)
 8003c00:	f043 0301 	orr.w	r3, r3, #1
 8003c04:	6413      	str	r3, [r2, #64]	; 0x40
 8003c06:	4b27      	ldr	r3, [pc, #156]	; (8003ca4 <HAL_TIM_Base_MspInit+0xf8>)
 8003c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0a:	f003 0301 	and.w	r3, r3, #1
 8003c0e:	617b      	str	r3, [r7, #20]
 8003c10:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c12:	2300      	movs	r3, #0
 8003c14:	613b      	str	r3, [r7, #16]
 8003c16:	4b23      	ldr	r3, [pc, #140]	; (8003ca4 <HAL_TIM_Base_MspInit+0xf8>)
 8003c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c1a:	4a22      	ldr	r2, [pc, #136]	; (8003ca4 <HAL_TIM_Base_MspInit+0xf8>)
 8003c1c:	f043 0301 	orr.w	r3, r3, #1
 8003c20:	6313      	str	r3, [r2, #48]	; 0x30
 8003c22:	4b20      	ldr	r3, [pc, #128]	; (8003ca4 <HAL_TIM_Base_MspInit+0xf8>)
 8003c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c26:	f003 0301 	and.w	r3, r3, #1
 8003c2a:	613b      	str	r3, [r7, #16]
 8003c2c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = IMD_data_Pin;
 8003c2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c34:	2302      	movs	r3, #2
 8003c36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003c40:	2301      	movs	r3, #1
 8003c42:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(IMD_data_GPIO_Port, &GPIO_InitStruct);
 8003c44:	f107 031c 	add.w	r3, r7, #28
 8003c48:	4619      	mov	r1, r3
 8003c4a:	4817      	ldr	r0, [pc, #92]	; (8003ca8 <HAL_TIM_Base_MspInit+0xfc>)
 8003c4c:	f00b ffd6 	bl	800fbfc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8003c50:	2200      	movs	r2, #0
 8003c52:	2105      	movs	r1, #5
 8003c54:	201c      	movs	r0, #28
 8003c56:	f00b fc37 	bl	800f4c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003c5a:	201c      	movs	r0, #28
 8003c5c:	f00b fc50 	bl	800f500 <HAL_NVIC_EnableIRQ>
}
 8003c60:	e01a      	b.n	8003c98 <HAL_TIM_Base_MspInit+0xec>
  else if(tim_baseHandle->Instance==TIM3)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a11      	ldr	r2, [pc, #68]	; (8003cac <HAL_TIM_Base_MspInit+0x100>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d115      	bne.n	8003c98 <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	60fb      	str	r3, [r7, #12]
 8003c70:	4b0c      	ldr	r3, [pc, #48]	; (8003ca4 <HAL_TIM_Base_MspInit+0xf8>)
 8003c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c74:	4a0b      	ldr	r2, [pc, #44]	; (8003ca4 <HAL_TIM_Base_MspInit+0xf8>)
 8003c76:	f043 0302 	orr.w	r3, r3, #2
 8003c7a:	6413      	str	r3, [r2, #64]	; 0x40
 8003c7c:	4b09      	ldr	r3, [pc, #36]	; (8003ca4 <HAL_TIM_Base_MspInit+0xf8>)
 8003c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c80:	f003 0302 	and.w	r3, r3, #2
 8003c84:	60fb      	str	r3, [r7, #12]
 8003c86:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8003c88:	2200      	movs	r2, #0
 8003c8a:	2105      	movs	r1, #5
 8003c8c:	201d      	movs	r0, #29
 8003c8e:	f00b fc1b 	bl	800f4c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003c92:	201d      	movs	r0, #29
 8003c94:	f00b fc34 	bl	800f500 <HAL_NVIC_EnableIRQ>
}
 8003c98:	bf00      	nop
 8003c9a:	3730      	adds	r7, #48	; 0x30
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}
 8003ca0:	40010000 	.word	0x40010000
 8003ca4:	40023800 	.word	0x40023800
 8003ca8:	40020000 	.word	0x40020000
 8003cac:	40000400 	.word	0x40000400

08003cb0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b088      	sub	sp, #32
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cb8:	f107 030c 	add.w	r3, r7, #12
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	601a      	str	r2, [r3, #0]
 8003cc0:	605a      	str	r2, [r3, #4]
 8003cc2:	609a      	str	r2, [r3, #8]
 8003cc4:	60da      	str	r2, [r3, #12]
 8003cc6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a12      	ldr	r2, [pc, #72]	; (8003d18 <HAL_TIM_MspPostInit+0x68>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d11e      	bne.n	8003d10 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	60bb      	str	r3, [r7, #8]
 8003cd6:	4b11      	ldr	r3, [pc, #68]	; (8003d1c <HAL_TIM_MspPostInit+0x6c>)
 8003cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cda:	4a10      	ldr	r2, [pc, #64]	; (8003d1c <HAL_TIM_MspPostInit+0x6c>)
 8003cdc:	f043 0310 	orr.w	r3, r3, #16
 8003ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ce2:	4b0e      	ldr	r3, [pc, #56]	; (8003d1c <HAL_TIM_MspPostInit+0x6c>)
 8003ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce6:	f003 0310 	and.w	r3, r3, #16
 8003cea:	60bb      	str	r3, [r7, #8]
 8003cec:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = fan_PWM_Pin;
 8003cee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003cf2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cf4:	2302      	movs	r3, #2
 8003cf6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003d00:	2301      	movs	r3, #1
 8003d02:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(fan_PWM_GPIO_Port, &GPIO_InitStruct);
 8003d04:	f107 030c 	add.w	r3, r7, #12
 8003d08:	4619      	mov	r1, r3
 8003d0a:	4805      	ldr	r0, [pc, #20]	; (8003d20 <HAL_TIM_MspPostInit+0x70>)
 8003d0c:	f00b ff76 	bl	800fbfc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003d10:	bf00      	nop
 8003d12:	3720      	adds	r7, #32
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}
 8003d18:	40010000 	.word	0x40010000
 8003d1c:	40023800 	.word	0x40023800
 8003d20:	40021000 	.word	0x40021000
 8003d24:	00000000 	.word	0x00000000

08003d28 <Accumulator_step>:
ExtU_Accumulator_T Accumulator_U;
ExtY_Accumulator_T Accumulator_Y;
static RT_MODEL_Accumulator_T Accumulator_M_;
RT_MODEL_Accumulator_T *const Accumulator_M = &Accumulator_M_;
void Accumulator_step(void)
{
 8003d28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d2c:	f5ad 5d9f 	sub.w	sp, sp, #5088	; 0x13e0
 8003d30:	af00      	add	r7, sp, #0
  real_T rtb_Switch[126];
  real_T rtb_tauz[126];
  real_T rtb_Memory3;
  real_T rtb_tauz_m;
  int32_T i;
  rtb_Memory3 = Accumulator_DW.Memory3_PreviousInput;
 8003d32:	4b08      	ldr	r3, [pc, #32]	; (8003d54 <Accumulator_step+0x2c>)
 8003d34:	e9d3 23fc 	ldrd	r2, r3, [r3, #1008]	; 0x3f0
 8003d38:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 8003d3c:	f101 0118 	add.w	r1, r1, #24
 8003d40:	e9c1 2300 	strd	r2, r3, [r1]
  for (i = 0; i < 126; i++) {
 8003d44:	2300      	movs	r3, #0
 8003d46:	f507 529e 	add.w	r2, r7, #5056	; 0x13c0
 8003d4a:	f102 0214 	add.w	r2, r2, #20
 8003d4e:	6013      	str	r3, [r2, #0]
 8003d50:	e17b      	b.n	800404a <Accumulator_step+0x322>
 8003d52:	bf00      	nop
 8003d54:	2001cda8 	.word	0x2001cda8
    real_T a;
    real_T rtb_Divide_a;
    real_T rtb_Rsz_m;
    rtb_Divide_a = Accumulator_DW.Memory_PreviousInput[i] /
 8003d58:	4acb      	ldr	r2, [pc, #812]	; (8004088 <Accumulator_step+0x360>)
 8003d5a:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8003d5e:	f103 0314 	add.w	r3, r3, #20
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	337f      	adds	r3, #127	; 0x7f
 8003d66:	00db      	lsls	r3, r3, #3
 8003d68:	4413      	add	r3, r2
 8003d6a:	e9d3 0100 	ldrd	r0, r1, [r3]
      Accumulator_DW.Memory2_PreviousInput[i];
 8003d6e:	4ac6      	ldr	r2, [pc, #792]	; (8004088 <Accumulator_step+0x360>)
 8003d70:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8003d74:	f103 0314 	add.w	r3, r3, #20
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	33fd      	adds	r3, #253	; 0xfd
 8003d7c:	00db      	lsls	r3, r3, #3
 8003d7e:	4413      	add	r3, r2
 8003d80:	e9d3 2300 	ldrd	r2, r3, [r3]
    rtb_Divide_a = Accumulator_DW.Memory_PreviousInput[i] /
 8003d84:	f7fc fd54 	bl	8000830 <__aeabi_ddiv>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	460b      	mov	r3, r1
 8003d8c:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 8003d90:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_Rsz_m = look1_binlxpw(rtb_Divide_a, Accumulator_P.soc, Accumulator_P.Rs,
 8003d94:	220c      	movs	r2, #12
 8003d96:	49bd      	ldr	r1, [pc, #756]	; (800408c <Accumulator_step+0x364>)
 8003d98:	48bd      	ldr	r0, [pc, #756]	; (8004090 <Accumulator_step+0x368>)
 8003d9a:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8003d9e:	ed93 0b00 	vldr	d0, [r3]
 8003da2:	f004 fd2d 	bl	8008800 <look1_binlxpw>
 8003da6:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 8003daa:	f103 0318 	add.w	r3, r3, #24
 8003dae:	ed83 0b00 	vstr	d0, [r3]
      12U);
    rtb_tauz_m = look1_binlxpw(rtb_Divide_a, Accumulator_P.soc,
 8003db2:	220c      	movs	r2, #12
 8003db4:	49b7      	ldr	r1, [pc, #732]	; (8004094 <Accumulator_step+0x36c>)
 8003db6:	48b6      	ldr	r0, [pc, #728]	; (8004090 <Accumulator_step+0x368>)
 8003db8:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8003dbc:	ed93 0b00 	vldr	d0, [r3]
 8003dc0:	f004 fd1e 	bl	8008800 <look1_binlxpw>
 8003dc4:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8003dc8:	f103 0308 	add.w	r3, r3, #8
 8003dcc:	ed83 0b00 	vstr	d0, [r3]
      Accumulator_P.tau, 12U);
    a = rtb_Rsz_m * rtb_tauz_m;
 8003dd0:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8003dd4:	f103 0308 	add.w	r3, r3, #8
 8003dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ddc:	f507 519d 	add.w	r1, r7, #5024	; 0x13a0
 8003de0:	f101 0118 	add.w	r1, r1, #24
 8003de4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003de8:	f7fc fbf8 	bl	80005dc <__aeabi_dmul>
 8003dec:	4602      	mov	r2, r0
 8003dee:	460b      	mov	r3, r1
 8003df0:	f507 519d 	add.w	r1, r7, #5024	; 0x13a0
 8003df4:	f101 0110 	add.w	r1, r1, #16
 8003df8:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_Rsz_m = (rtb_Rsz_m + look1_binlxpw(rtb_Divide_a, Accumulator_P.soc,
 8003dfc:	220c      	movs	r2, #12
 8003dfe:	49a6      	ldr	r1, [pc, #664]	; (8004098 <Accumulator_step+0x370>)
 8003e00:	48a3      	ldr	r0, [pc, #652]	; (8004090 <Accumulator_step+0x368>)
 8003e02:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8003e06:	ed93 0b00 	vldr	d0, [r3]
 8003e0a:	f004 fcf9 	bl	8008800 <look1_binlxpw>
 8003e0e:	ec51 0b10 	vmov	r0, r1, d0
 8003e12:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 8003e16:	f103 0318 	add.w	r3, r3, #24
 8003e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e1e:	f7fc fa27 	bl	8000270 <__adddf3>
 8003e22:	4602      	mov	r2, r0
 8003e24:	460b      	mov	r3, r1
 8003e26:	4610      	mov	r0, r2
 8003e28:	4619      	mov	r1, r3
      Accumulator_P.Rp, 12U)) * Accumulator_P.Ts_sim;
 8003e2a:	4b9c      	ldr	r3, [pc, #624]	; (800409c <Accumulator_step+0x374>)
 8003e2c:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
    rtb_Rsz_m = (rtb_Rsz_m + look1_binlxpw(rtb_Divide_a, Accumulator_P.soc,
 8003e30:	f7fc fbd4 	bl	80005dc <__aeabi_dmul>
 8003e34:	4602      	mov	r2, r0
 8003e36:	460b      	mov	r3, r1
 8003e38:	f507 519d 	add.w	r1, r7, #5024	; 0x13a0
 8003e3c:	f101 0118 	add.w	r1, r1, #24
 8003e40:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_Rsz_m = (((2.0 * a + rtb_Rsz_m) * Accumulator_U.Current + (rtb_Rsz_m -
 8003e44:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 8003e48:	f103 0310 	add.w	r3, r3, #16
 8003e4c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003e50:	4602      	mov	r2, r0
 8003e52:	460b      	mov	r3, r1
 8003e54:	f7fc fa0c 	bl	8000270 <__adddf3>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	460b      	mov	r3, r1
 8003e5c:	4610      	mov	r0, r2
 8003e5e:	4619      	mov	r1, r3
 8003e60:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 8003e64:	f103 0318 	add.w	r3, r3, #24
 8003e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e6c:	f7fc fa00 	bl	8000270 <__adddf3>
 8003e70:	4602      	mov	r2, r0
 8003e72:	460b      	mov	r3, r1
 8003e74:	4610      	mov	r0, r2
 8003e76:	4619      	mov	r1, r3
 8003e78:	4b89      	ldr	r3, [pc, #548]	; (80040a0 <Accumulator_step+0x378>)
 8003e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e7e:	f7fc fbad 	bl	80005dc <__aeabi_dmul>
 8003e82:	4602      	mov	r2, r0
 8003e84:	460b      	mov	r3, r1
 8003e86:	4690      	mov	r8, r2
 8003e88:	4699      	mov	r9, r3
      2.0 * a) * rtb_Memory3) - (Accumulator_P.Ts_sim - 2.0 * rtb_tauz_m) *
 8003e8a:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 8003e8e:	f103 0310 	add.w	r3, r3, #16
 8003e92:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003e96:	4602      	mov	r2, r0
 8003e98:	460b      	mov	r3, r1
 8003e9a:	f7fc f9e9 	bl	8000270 <__adddf3>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	460b      	mov	r3, r1
    rtb_Rsz_m = (((2.0 * a + rtb_Rsz_m) * Accumulator_U.Current + (rtb_Rsz_m -
 8003ea2:	f507 519d 	add.w	r1, r7, #5024	; 0x13a0
 8003ea6:	f101 0118 	add.w	r1, r1, #24
 8003eaa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003eae:	f7fc f9dd 	bl	800026c <__aeabi_dsub>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	460b      	mov	r3, r1
 8003eb6:	4610      	mov	r0, r2
 8003eb8:	4619      	mov	r1, r3
      2.0 * a) * rtb_Memory3) - (Accumulator_P.Ts_sim - 2.0 * rtb_tauz_m) *
 8003eba:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8003ebe:	f103 0318 	add.w	r3, r3, #24
 8003ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ec6:	f7fc fb89 	bl	80005dc <__aeabi_dmul>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	460b      	mov	r3, r1
    rtb_Rsz_m = (((2.0 * a + rtb_Rsz_m) * Accumulator_U.Current + (rtb_Rsz_m -
 8003ece:	4640      	mov	r0, r8
 8003ed0:	4649      	mov	r1, r9
 8003ed2:	f7fc f9cd 	bl	8000270 <__adddf3>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	460b      	mov	r3, r1
 8003eda:	4692      	mov	sl, r2
 8003edc:	469b      	mov	fp, r3
      2.0 * a) * rtb_Memory3) - (Accumulator_P.Ts_sim - 2.0 * rtb_tauz_m) *
 8003ede:	4b6f      	ldr	r3, [pc, #444]	; (800409c <Accumulator_step+0x374>)
 8003ee0:	e9d3 893a 	ldrd	r8, r9, [r3, #232]	; 0xe8
 8003ee4:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8003ee8:	f103 0308 	add.w	r3, r3, #8
 8003eec:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	460b      	mov	r3, r1
 8003ef4:	f7fc f9bc 	bl	8000270 <__adddf3>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	460b      	mov	r3, r1
 8003efc:	4640      	mov	r0, r8
 8003efe:	4649      	mov	r1, r9
 8003f00:	f7fc f9b4 	bl	800026c <__aeabi_dsub>
 8003f04:	4602      	mov	r2, r0
 8003f06:	460b      	mov	r3, r1
 8003f08:	4610      	mov	r0, r2
 8003f0a:	4619      	mov	r1, r3
                 Accumulator_DW.Memory4_PreviousInput[i]) / (2.0 * rtb_tauz_m +
 8003f0c:	4a5e      	ldr	r2, [pc, #376]	; (8004088 <Accumulator_step+0x360>)
 8003f0e:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8003f12:	f103 0314 	add.w	r3, r3, #20
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	00db      	lsls	r3, r3, #3
 8003f1a:	4413      	add	r3, r2
 8003f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
      2.0 * a) * rtb_Memory3) - (Accumulator_P.Ts_sim - 2.0 * rtb_tauz_m) *
 8003f20:	f7fc fb5c 	bl	80005dc <__aeabi_dmul>
 8003f24:	4602      	mov	r2, r0
 8003f26:	460b      	mov	r3, r1
 8003f28:	4650      	mov	r0, sl
 8003f2a:	4659      	mov	r1, fp
 8003f2c:	f7fc f99e 	bl	800026c <__aeabi_dsub>
 8003f30:	4602      	mov	r2, r0
 8003f32:	460b      	mov	r3, r1
 8003f34:	4690      	mov	r8, r2
 8003f36:	4699      	mov	r9, r3
                 Accumulator_DW.Memory4_PreviousInput[i]) / (2.0 * rtb_tauz_m +
 8003f38:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8003f3c:	f103 0308 	add.w	r3, r3, #8
 8003f40:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003f44:	4602      	mov	r2, r0
 8003f46:	460b      	mov	r3, r1
 8003f48:	f7fc f992 	bl	8000270 <__adddf3>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	460b      	mov	r3, r1
 8003f50:	4610      	mov	r0, r2
 8003f52:	4619      	mov	r1, r3
      Accumulator_P.Ts_sim);
 8003f54:	4b51      	ldr	r3, [pc, #324]	; (800409c <Accumulator_step+0x374>)
 8003f56:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
                 Accumulator_DW.Memory4_PreviousInput[i]) / (2.0 * rtb_tauz_m +
 8003f5a:	f7fc f989 	bl	8000270 <__adddf3>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	460b      	mov	r3, r1
    rtb_Rsz_m = (((2.0 * a + rtb_Rsz_m) * Accumulator_U.Current + (rtb_Rsz_m -
 8003f62:	4640      	mov	r0, r8
 8003f64:	4649      	mov	r1, r9
 8003f66:	f7fc fc63 	bl	8000830 <__aeabi_ddiv>
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	460b      	mov	r3, r1
 8003f6e:	f507 519d 	add.w	r1, r7, #5024	; 0x13a0
 8003f72:	f101 0118 	add.w	r1, r1, #24
 8003f76:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_tauz_m = rtb_Rsz_m + look1_binlxpw(rtb_Divide_a, Accumulator_P.soc,
 8003f7a:	220c      	movs	r2, #12
 8003f7c:	4949      	ldr	r1, [pc, #292]	; (80040a4 <Accumulator_step+0x37c>)
 8003f7e:	4844      	ldr	r0, [pc, #272]	; (8004090 <Accumulator_step+0x368>)
 8003f80:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8003f84:	ed93 0b00 	vldr	d0, [r3]
 8003f88:	f004 fc3a 	bl	8008800 <look1_binlxpw>
 8003f8c:	ec53 2b10 	vmov	r2, r3, d0
 8003f90:	f507 519d 	add.w	r1, r7, #5024	; 0x13a0
 8003f94:	f101 0118 	add.w	r1, r1, #24
 8003f98:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003f9c:	f7fc f968 	bl	8000270 <__adddf3>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	460b      	mov	r3, r1
 8003fa4:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 8003fa8:	f101 0108 	add.w	r1, r1, #8
 8003fac:	e9c1 2300 	strd	r2, r3, [r1]
      Accumulator_P.ocv, 12U);
    Accumulator_Y.Voltages[i] = rtb_tauz_m;
 8003fb0:	4a3d      	ldr	r2, [pc, #244]	; (80040a8 <Accumulator_step+0x380>)
 8003fb2:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8003fb6:	f103 0314 	add.w	r3, r3, #20
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	3301      	adds	r3, #1
 8003fbe:	00db      	lsls	r3, r3, #3
 8003fc0:	18d1      	adds	r1, r2, r3
 8003fc2:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8003fc6:	f103 0308 	add.w	r3, r3, #8
 8003fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fce:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_Divide[i] = rtb_Divide_a;
 8003fd2:	f507 627c 	add.w	r2, r7, #4032	; 0xfc0
 8003fd6:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8003fda:	f103 0314 	add.w	r3, r3, #20
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	00db      	lsls	r3, r3, #3
 8003fe2:	18d1      	adds	r1, r2, r3
 8003fe4:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8003fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fec:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_Rsz[i] = rtb_Rsz_m;
 8003ff0:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 8003ff4:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8003ff8:	f103 0314 	add.w	r3, r3, #20
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	00db      	lsls	r3, r3, #3
 8004000:	18d1      	adds	r1, r2, r3
 8004002:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 8004006:	f103 0318 	add.w	r3, r3, #24
 800400a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800400e:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_Rpz[i] = rtb_tauz_m;
 8004012:	f507 623d 	add.w	r2, r7, #3024	; 0xbd0
 8004016:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 800401a:	f103 0314 	add.w	r3, r3, #20
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	00db      	lsls	r3, r3, #3
 8004022:	18d1      	adds	r1, r2, r3
 8004024:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8004028:	f103 0308 	add.w	r3, r3, #8
 800402c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004030:	e9c1 2300 	strd	r2, r3, [r1]
  for (i = 0; i < 126; i++) {
 8004034:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8004038:	f103 0314 	add.w	r3, r3, #20
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	3301      	adds	r3, #1
 8004040:	f507 529e 	add.w	r2, r7, #5056	; 0x13c0
 8004044:	f102 0214 	add.w	r2, r2, #20
 8004048:	6013      	str	r3, [r2, #0]
 800404a:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 800404e:	f103 0314 	add.w	r3, r3, #20
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	2b7d      	cmp	r3, #125	; 0x7d
 8004056:	f77f ae7f 	ble.w	8003d58 <Accumulator_step+0x30>
  }

  rtb_Memory3 = Accumulator_P.Ts_sim * Accumulator_U.Current;
 800405a:	4b10      	ldr	r3, [pc, #64]	; (800409c <Accumulator_step+0x374>)
 800405c:	e9d3 013a 	ldrd	r0, r1, [r3, #232]	; 0xe8
 8004060:	4b0f      	ldr	r3, [pc, #60]	; (80040a0 <Accumulator_step+0x378>)
 8004062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004066:	f7fc fab9 	bl	80005dc <__aeabi_dmul>
 800406a:	4602      	mov	r2, r0
 800406c:	460b      	mov	r3, r1
 800406e:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 8004072:	f101 0118 	add.w	r1, r1, #24
 8004076:	e9c1 2300 	strd	r2, r3, [r1]
  for (i = 0; i < 126; i++) {
 800407a:	2300      	movs	r3, #0
 800407c:	f507 529e 	add.w	r2, r7, #5056	; 0x13c0
 8004080:	f102 0214 	add.w	r2, r2, #20
 8004084:	6013      	str	r3, [r2, #0]
 8004086:	e072      	b.n	800416e <Accumulator_step+0x446>
 8004088:	2001cda8 	.word	0x2001cda8
 800408c:	20000088 	.word	0x20000088
 8004090:	20000b20 	.word	0x20000b20
 8004094:	20000b88 	.word	0x20000b88
 8004098:	20000020 	.word	0x20000020
 800409c:	20000008 	.word	0x20000008
 80040a0:	2001c9b0 	.word	0x2001c9b0
 80040a4:	20000ab8 	.word	0x20000ab8
 80040a8:	2001bbf0 	.word	0x2001bbf0
    rtb_Switch[i] = rtb_Rpz[i] / Accumulator_P.R_short
 80040ac:	f507 623d 	add.w	r2, r7, #3024	; 0xbd0
 80040b0:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 80040b4:	f103 0314 	add.w	r3, r3, #20
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	00db      	lsls	r3, r3, #3
 80040bc:	4413      	add	r3, r2
 80040be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80040c2:	4bab      	ldr	r3, [pc, #684]	; (8004370 <Accumulator_step+0x648>)
 80040c4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80040c8:	f7fc fbb2 	bl	8000830 <__aeabi_ddiv>
 80040cc:	4602      	mov	r2, r0
 80040ce:	460b      	mov	r3, r1
 80040d0:	4610      	mov	r0, r2
 80040d2:	4619      	mov	r1, r3
      * Accumulator_U.Balances[i] * Accumulator_P.Gain_Gain + (rtb_Memory3 +
 80040d4:	4aa7      	ldr	r2, [pc, #668]	; (8004374 <Accumulator_step+0x64c>)
 80040d6:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 80040da:	f103 0314 	add.w	r3, r3, #20
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	3301      	adds	r3, #1
 80040e2:	00db      	lsls	r3, r3, #3
 80040e4:	4413      	add	r3, r2
 80040e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ea:	f7fc fa77 	bl	80005dc <__aeabi_dmul>
 80040ee:	4602      	mov	r2, r0
 80040f0:	460b      	mov	r3, r1
 80040f2:	4610      	mov	r0, r2
 80040f4:	4619      	mov	r1, r3
 80040f6:	4b9e      	ldr	r3, [pc, #632]	; (8004370 <Accumulator_step+0x648>)
 80040f8:	f503 637e 	add.w	r3, r3, #4064	; 0xfe0
 80040fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004100:	f7fc fa6c 	bl	80005dc <__aeabi_dmul>
 8004104:	4602      	mov	r2, r0
 8004106:	460b      	mov	r3, r1
 8004108:	4690      	mov	r8, r2
 800410a:	4699      	mov	r9, r3
      Accumulator_DW.Memory_PreviousInput[i]);
 800410c:	4a9a      	ldr	r2, [pc, #616]	; (8004378 <Accumulator_step+0x650>)
 800410e:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8004112:	f103 0314 	add.w	r3, r3, #20
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	337f      	adds	r3, #127	; 0x7f
 800411a:	00db      	lsls	r3, r3, #3
 800411c:	4413      	add	r3, r2
 800411e:	e9d3 0100 	ldrd	r0, r1, [r3]
      * Accumulator_U.Balances[i] * Accumulator_P.Gain_Gain + (rtb_Memory3 +
 8004122:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8004126:	f103 0318 	add.w	r3, r3, #24
 800412a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800412e:	f7fc f89f 	bl	8000270 <__adddf3>
 8004132:	4602      	mov	r2, r0
 8004134:	460b      	mov	r3, r1
 8004136:	4640      	mov	r0, r8
 8004138:	4649      	mov	r1, r9
 800413a:	f7fc f899 	bl	8000270 <__adddf3>
 800413e:	4602      	mov	r2, r0
 8004140:	460b      	mov	r3, r1
    rtb_Switch[i] = rtb_Rpz[i] / Accumulator_P.R_short
 8004142:	f507 707c 	add.w	r0, r7, #1008	; 0x3f0
 8004146:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 800414a:	f101 0114 	add.w	r1, r1, #20
 800414e:	6809      	ldr	r1, [r1, #0]
 8004150:	00c9      	lsls	r1, r1, #3
 8004152:	4401      	add	r1, r0
 8004154:	e9c1 2300 	strd	r2, r3, [r1]
  for (i = 0; i < 126; i++) {
 8004158:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 800415c:	f103 0314 	add.w	r3, r3, #20
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	3301      	adds	r3, #1
 8004164:	f507 529e 	add.w	r2, r7, #5056	; 0x13c0
 8004168:	f102 0214 	add.w	r2, r2, #20
 800416c:	6013      	str	r3, [r2, #0]
 800416e:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8004172:	f103 0314 	add.w	r3, r3, #20
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	2b7d      	cmp	r3, #125	; 0x7d
 800417a:	dd97      	ble.n	80040ac <Accumulator_step+0x384>
  }

  rtb_Memory3 = exp(Accumulator_P.Cap_det / (Accumulator_P.C_r * 3600.0) *
 800417c:	4b7c      	ldr	r3, [pc, #496]	; (8004370 <Accumulator_step+0x648>)
 800417e:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 8004182:	4b7b      	ldr	r3, [pc, #492]	; (8004370 <Accumulator_step+0x648>)
 8004184:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004188:	a377      	add	r3, pc, #476	; (adr r3, 8004368 <Accumulator_step+0x640>)
 800418a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800418e:	f7fc fa25 	bl	80005dc <__aeabi_dmul>
 8004192:	4602      	mov	r2, r0
 8004194:	460b      	mov	r3, r1
 8004196:	4640      	mov	r0, r8
 8004198:	4649      	mov	r1, r9
 800419a:	f7fc fb49 	bl	8000830 <__aeabi_ddiv>
 800419e:	4602      	mov	r2, r0
 80041a0:	460b      	mov	r3, r1
 80041a2:	4610      	mov	r0, r2
 80041a4:	4619      	mov	r1, r3
                    Accumulator_DW.Memory1_PreviousInput);
 80041a6:	4b74      	ldr	r3, [pc, #464]	; (8004378 <Accumulator_step+0x650>)
 80041a8:	f603 33d8 	addw	r3, r3, #3032	; 0xbd8
 80041ac:	e9d3 2300 	ldrd	r2, r3, [r3]
  rtb_Memory3 = exp(Accumulator_P.Cap_det / (Accumulator_P.C_r * 3600.0) *
 80041b0:	f7fc fa14 	bl	80005dc <__aeabi_dmul>
 80041b4:	4602      	mov	r2, r0
 80041b6:	460b      	mov	r3, r1
 80041b8:	ec43 2b17 	vmov	d7, r2, r3
 80041bc:	eeb0 0a47 	vmov.f32	s0, s14
 80041c0:	eef0 0a67 	vmov.f32	s1, s15
 80041c4:	f012 fdf8 	bl	8016db8 <exp>
 80041c8:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 80041cc:	f103 0318 	add.w	r3, r3, #24
 80041d0:	ed83 0b00 	vstr	d0, [r3]
  for (i = 0; i < 126; i++) {
 80041d4:	2300      	movs	r3, #0
 80041d6:	f507 529e 	add.w	r2, r7, #5056	; 0x13c0
 80041da:	f102 0214 	add.w	r2, r2, #20
 80041de:	6013      	str	r3, [r2, #0]
 80041e0:	e055      	b.n	800428e <Accumulator_step+0x566>
    rtb_tauz[i] = Accumulator_DW.Memory2_PreviousInput[i] * rtb_Memory3;
 80041e2:	4a65      	ldr	r2, [pc, #404]	; (8004378 <Accumulator_step+0x650>)
 80041e4:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 80041e8:	f103 0314 	add.w	r3, r3, #20
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	33fd      	adds	r3, #253	; 0xfd
 80041f0:	00db      	lsls	r3, r3, #3
 80041f2:	4413      	add	r3, r2
 80041f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80041f8:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 80041fc:	f103 0318 	add.w	r3, r3, #24
 8004200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004204:	f7fc f9ea 	bl	80005dc <__aeabi_dmul>
 8004208:	4602      	mov	r2, r0
 800420a:	460b      	mov	r3, r1
 800420c:	4638      	mov	r0, r7
 800420e:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 8004212:	f101 0114 	add.w	r1, r1, #20
 8004216:	6809      	ldr	r1, [r1, #0]
 8004218:	00c9      	lsls	r1, r1, #3
 800421a:	4401      	add	r1, r0
 800421c:	e9c1 2300 	strd	r2, r3, [r1]
    Accumulator_Y.SOCs[i] = rtb_Divide[i];
 8004220:	f507 627c 	add.w	r2, r7, #4032	; 0xfc0
 8004224:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8004228:	f103 0314 	add.w	r3, r3, #20
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	00db      	lsls	r3, r3, #3
 8004230:	4413      	add	r3, r2
 8004232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004236:	4851      	ldr	r0, [pc, #324]	; (800437c <Accumulator_step+0x654>)
 8004238:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 800423c:	f101 0114 	add.w	r1, r1, #20
 8004240:	6809      	ldr	r1, [r1, #0]
 8004242:	317f      	adds	r1, #127	; 0x7f
 8004244:	00c9      	lsls	r1, r1, #3
 8004246:	4401      	add	r1, r0
 8004248:	e9c1 2300 	strd	r2, r3, [r1]
    Accumulator_Y.Capacities[i] = Accumulator_DW.Memory2_PreviousInput[i];
 800424c:	4a4a      	ldr	r2, [pc, #296]	; (8004378 <Accumulator_step+0x650>)
 800424e:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8004252:	f103 0314 	add.w	r3, r3, #20
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	33fd      	adds	r3, #253	; 0xfd
 800425a:	00db      	lsls	r3, r3, #3
 800425c:	4413      	add	r3, r2
 800425e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004262:	4846      	ldr	r0, [pc, #280]	; (800437c <Accumulator_step+0x654>)
 8004264:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 8004268:	f101 0114 	add.w	r1, r1, #20
 800426c:	6809      	ldr	r1, [r1, #0]
 800426e:	31fd      	adds	r1, #253	; 0xfd
 8004270:	00c9      	lsls	r1, r1, #3
 8004272:	4401      	add	r1, r0
 8004274:	e9c1 2300 	strd	r2, r3, [r1]
  for (i = 0; i < 126; i++) {
 8004278:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 800427c:	f103 0314 	add.w	r3, r3, #20
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	3301      	adds	r3, #1
 8004284:	f507 529e 	add.w	r2, r7, #5056	; 0x13c0
 8004288:	f102 0214 	add.w	r2, r2, #20
 800428c:	6013      	str	r3, [r2, #0]
 800428e:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8004292:	f103 0314 	add.w	r3, r3, #20
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	2b7d      	cmp	r3, #125	; 0x7d
 800429a:	dda2      	ble.n	80041e2 <Accumulator_step+0x4ba>
  }

  memcpy(&Accumulator_Y.Temperatures[0], &Accumulator_P.cTmp[0], 60U * sizeof
 800429c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80042a0:	4937      	ldr	r1, [pc, #220]	; (8004380 <Accumulator_step+0x658>)
 80042a2:	4838      	ldr	r0, [pc, #224]	; (8004384 <Accumulator_step+0x65c>)
 80042a4:	f012 fc5a 	bl	8016b5c <memcpy>
         (real_T));
  rtb_Memory3 = rtb_Rpz[0];
 80042a8:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 80042ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042b0:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 80042b4:	f101 0118 	add.w	r1, r1, #24
 80042b8:	e9c1 2300 	strd	r2, r3, [r1]
  for (i = 0; i < 125; i++) {
 80042bc:	2300      	movs	r3, #0
 80042be:	f507 529e 	add.w	r2, r7, #5056	; 0x13c0
 80042c2:	f102 0214 	add.w	r2, r2, #20
 80042c6:	6013      	str	r3, [r2, #0]
 80042c8:	e026      	b.n	8004318 <Accumulator_step+0x5f0>
    rtb_Memory3 += rtb_Rpz[i + 1];
 80042ca:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 80042ce:	f103 0314 	add.w	r3, r3, #20
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	3301      	adds	r3, #1
 80042d6:	f507 623d 	add.w	r2, r7, #3024	; 0xbd0
 80042da:	00db      	lsls	r3, r3, #3
 80042dc:	4413      	add	r3, r2
 80042de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042e2:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 80042e6:	f101 0118 	add.w	r1, r1, #24
 80042ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 80042ee:	f7fb ffbf 	bl	8000270 <__adddf3>
 80042f2:	4602      	mov	r2, r0
 80042f4:	460b      	mov	r3, r1
 80042f6:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 80042fa:	f101 0118 	add.w	r1, r1, #24
 80042fe:	e9c1 2300 	strd	r2, r3, [r1]
  for (i = 0; i < 125; i++) {
 8004302:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8004306:	f103 0314 	add.w	r3, r3, #20
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	3301      	adds	r3, #1
 800430e:	f507 529e 	add.w	r2, r7, #5056	; 0x13c0
 8004312:	f102 0214 	add.w	r2, r2, #20
 8004316:	6013      	str	r3, [r2, #0]
 8004318:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 800431c:	f103 0314 	add.w	r3, r3, #20
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	2b7c      	cmp	r3, #124	; 0x7c
 8004324:	ddd1      	ble.n	80042ca <Accumulator_step+0x5a2>
  }

  Accumulator_Y.VoltageSum = rtb_Memory3;
 8004326:	4915      	ldr	r1, [pc, #84]	; (800437c <Accumulator_step+0x654>)
 8004328:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 800432c:	f103 0318 	add.w	r3, r3, #24
 8004330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004334:	e9c1 2300 	strd	r2, r3, [r1]
  Accumulator_Y.DisplayCurrent = Accumulator_U.Current;
 8004338:	4b0e      	ldr	r3, [pc, #56]	; (8004374 <Accumulator_step+0x64c>)
 800433a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800433e:	490f      	ldr	r1, [pc, #60]	; (800437c <Accumulator_step+0x654>)
 8004340:	f601 31d8 	addw	r1, r1, #3032	; 0xbd8
 8004344:	e9c1 2300 	strd	r2, r3, [r1]
  Accumulator_DW.Memory3_PreviousInput = Accumulator_U.Current;
 8004348:	4b0a      	ldr	r3, [pc, #40]	; (8004374 <Accumulator_step+0x64c>)
 800434a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800434e:	490a      	ldr	r1, [pc, #40]	; (8004378 <Accumulator_step+0x650>)
 8004350:	e9c1 23fc 	strd	r2, r3, [r1, #1008]	; 0x3f0
  for (i = 0; i < 126; i++) {
 8004354:	2300      	movs	r3, #0
 8004356:	f507 529e 	add.w	r2, r7, #5056	; 0x13c0
 800435a:	f102 0214 	add.w	r2, r2, #20
 800435e:	6013      	str	r3, [r2, #0]
 8004360:	e0b9      	b.n	80044d6 <Accumulator_step+0x7ae>
 8004362:	bf00      	nop
 8004364:	f3af 8000 	nop.w
 8004368:	00000000 	.word	0x00000000
 800436c:	40ac2000 	.word	0x40ac2000
 8004370:	20000008 	.word	0x20000008
 8004374:	2001c9b0 	.word	0x2001c9b0
 8004378:	2001cda8 	.word	0x2001cda8
 800437c:	2001bbf0 	.word	0x2001bbf0
 8004380:	200008d8 	.word	0x200008d8
 8004384:	2001c7d0 	.word	0x2001c7d0
    rtb_tauz_m = rtb_tauz[i];
 8004388:	463a      	mov	r2, r7
 800438a:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 800438e:	f103 0314 	add.w	r3, r3, #20
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	00db      	lsls	r3, r3, #3
 8004396:	4413      	add	r3, r2
 8004398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800439c:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 80043a0:	f101 0108 	add.w	r1, r1, #8
 80043a4:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_Memory3 = rtb_Switch[i];
 80043a8:	f507 727c 	add.w	r2, r7, #1008	; 0x3f0
 80043ac:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 80043b0:	f103 0314 	add.w	r3, r3, #20
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	00db      	lsls	r3, r3, #3
 80043b8:	4413      	add	r3, r2
 80043ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043be:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 80043c2:	f101 0118 	add.w	r1, r1, #24
 80043c6:	e9c1 2300 	strd	r2, r3, [r1]
    Accumulator_DW.Memory4_PreviousInput[i] = rtb_Rsz[i];
 80043ca:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 80043ce:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 80043d2:	f103 0314 	add.w	r3, r3, #20
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	00db      	lsls	r3, r3, #3
 80043da:	4413      	add	r3, r2
 80043dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043e0:	484e      	ldr	r0, [pc, #312]	; (800451c <Accumulator_step+0x7f4>)
 80043e2:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 80043e6:	f101 0114 	add.w	r1, r1, #20
 80043ea:	6809      	ldr	r1, [r1, #0]
 80043ec:	00c9      	lsls	r1, r1, #3
 80043ee:	4401      	add	r1, r0
 80043f0:	e9c1 2300 	strd	r2, r3, [r1]
    if (rtb_Memory3 > rtb_tauz_m) {
 80043f4:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 80043f8:	f103 0308 	add.w	r3, r3, #8
 80043fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004400:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 8004404:	f101 0118 	add.w	r1, r1, #24
 8004408:	e9d1 0100 	ldrd	r0, r1, [r1]
 800440c:	f7fc fb76 	bl	8000afc <__aeabi_dcmpgt>
 8004410:	4603      	mov	r3, r0
 8004412:	2b00      	cmp	r3, #0
 8004414:	d011      	beq.n	800443a <Accumulator_step+0x712>
      Accumulator_DW.Memory_PreviousInput[i] = rtb_tauz_m;
 8004416:	4a41      	ldr	r2, [pc, #260]	; (800451c <Accumulator_step+0x7f4>)
 8004418:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 800441c:	f103 0314 	add.w	r3, r3, #20
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	337f      	adds	r3, #127	; 0x7f
 8004424:	00db      	lsls	r3, r3, #3
 8004426:	18d1      	adds	r1, r2, r3
 8004428:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 800442c:	f103 0308 	add.w	r3, r3, #8
 8004430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004434:	e9c1 2300 	strd	r2, r3, [r1]
 8004438:	e031      	b.n	800449e <Accumulator_step+0x776>
    } else if (rtb_Memory3 < Accumulator_P.Constant1_Value) {
 800443a:	4b39      	ldr	r3, [pc, #228]	; (8004520 <Accumulator_step+0x7f8>)
 800443c:	f503 637f 	add.w	r3, r3, #4080	; 0xff0
 8004440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004444:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 8004448:	f101 0118 	add.w	r1, r1, #24
 800444c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004450:	f7fc fb36 	bl	8000ac0 <__aeabi_dcmplt>
 8004454:	4603      	mov	r3, r0
 8004456:	2b00      	cmp	r3, #0
 8004458:	d010      	beq.n	800447c <Accumulator_step+0x754>
      Accumulator_DW.Memory_PreviousInput[i] = Accumulator_P.Constant1_Value;
 800445a:	4b31      	ldr	r3, [pc, #196]	; (8004520 <Accumulator_step+0x7f8>)
 800445c:	f503 637f 	add.w	r3, r3, #4080	; 0xff0
 8004460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004464:	482d      	ldr	r0, [pc, #180]	; (800451c <Accumulator_step+0x7f4>)
 8004466:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 800446a:	f101 0114 	add.w	r1, r1, #20
 800446e:	6809      	ldr	r1, [r1, #0]
 8004470:	317f      	adds	r1, #127	; 0x7f
 8004472:	00c9      	lsls	r1, r1, #3
 8004474:	4401      	add	r1, r0
 8004476:	e9c1 2300 	strd	r2, r3, [r1]
 800447a:	e010      	b.n	800449e <Accumulator_step+0x776>
    } else {
      Accumulator_DW.Memory_PreviousInput[i] = rtb_Memory3;
 800447c:	4a27      	ldr	r2, [pc, #156]	; (800451c <Accumulator_step+0x7f4>)
 800447e:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8004482:	f103 0314 	add.w	r3, r3, #20
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	337f      	adds	r3, #127	; 0x7f
 800448a:	00db      	lsls	r3, r3, #3
 800448c:	18d1      	adds	r1, r2, r3
 800448e:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8004492:	f103 0318 	add.w	r3, r3, #24
 8004496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800449a:	e9c1 2300 	strd	r2, r3, [r1]
    }

    Accumulator_DW.Memory2_PreviousInput[i] = rtb_tauz_m;
 800449e:	4a1f      	ldr	r2, [pc, #124]	; (800451c <Accumulator_step+0x7f4>)
 80044a0:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 80044a4:	f103 0314 	add.w	r3, r3, #20
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	33fd      	adds	r3, #253	; 0xfd
 80044ac:	00db      	lsls	r3, r3, #3
 80044ae:	18d1      	adds	r1, r2, r3
 80044b0:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 80044b4:	f103 0308 	add.w	r3, r3, #8
 80044b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044bc:	e9c1 2300 	strd	r2, r3, [r1]
  for (i = 0; i < 126; i++) {
 80044c0:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 80044c4:	f103 0314 	add.w	r3, r3, #20
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	3301      	adds	r3, #1
 80044cc:	f507 529e 	add.w	r2, r7, #5056	; 0x13c0
 80044d0:	f102 0214 	add.w	r2, r2, #20
 80044d4:	6013      	str	r3, [r2, #0]
 80044d6:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 80044da:	f103 0314 	add.w	r3, r3, #20
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	2b7d      	cmp	r3, #125	; 0x7d
 80044e2:	f77f af51 	ble.w	8004388 <Accumulator_step+0x660>
  }

  Accumulator_DW.Memory1_PreviousInput = fabs(Accumulator_U.Current +
 80044e6:	4b0f      	ldr	r3, [pc, #60]	; (8004524 <Accumulator_step+0x7fc>)
 80044e8:	e9d3 0100 	ldrd	r0, r1, [r3]
    Accumulator_DW.Memory1_PreviousInput);
 80044ec:	4b0b      	ldr	r3, [pc, #44]	; (800451c <Accumulator_step+0x7f4>)
 80044ee:	f603 33d8 	addw	r3, r3, #3032	; 0xbd8
 80044f2:	e9d3 2300 	ldrd	r2, r3, [r3]
  Accumulator_DW.Memory1_PreviousInput = fabs(Accumulator_U.Current +
 80044f6:	f7fb febb 	bl	8000270 <__adddf3>
 80044fa:	4602      	mov	r2, r0
 80044fc:	460b      	mov	r3, r1
 80044fe:	4614      	mov	r4, r2
 8004500:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8004504:	4b05      	ldr	r3, [pc, #20]	; (800451c <Accumulator_step+0x7f4>)
 8004506:	f603 33d8 	addw	r3, r3, #3032	; 0xbd8
 800450a:	e9c3 4500 	strd	r4, r5, [r3]
}
 800450e:	bf00      	nop
 8004510:	f507 579f 	add.w	r7, r7, #5088	; 0x13e0
 8004514:	46bd      	mov	sp, r7
 8004516:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800451a:	bf00      	nop
 800451c:	2001cda8 	.word	0x2001cda8
 8004520:	20000008 	.word	0x20000008
 8004524:	2001c9b0 	.word	0x2001c9b0

08004528 <Accumulator_initialize>:

void Accumulator_initialize(void)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	af00      	add	r7, sp, #0
  Accumulator_DW.Memory3_PreviousInput = Accumulator_P.Memory3_InitialCondition;
 800452c:	4b12      	ldr	r3, [pc, #72]	; (8004578 <Accumulator_initialize+0x50>)
 800452e:	f603 73d8 	addw	r3, r3, #4056	; 0xfd8
 8004532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004536:	4911      	ldr	r1, [pc, #68]	; (800457c <Accumulator_initialize+0x54>)
 8004538:	e9c1 23fc 	strd	r2, r3, [r1, #1008]	; 0x3f0
  memcpy(&Accumulator_DW.Memory4_PreviousInput[0],
 800453c:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 8004540:	490f      	ldr	r1, [pc, #60]	; (8004580 <Accumulator_initialize+0x58>)
 8004542:	480e      	ldr	r0, [pc, #56]	; (800457c <Accumulator_initialize+0x54>)
 8004544:	f012 fb0a 	bl	8016b5c <memcpy>
         &Accumulator_P.Memory4_InitialCondition[0], 126U * sizeof(real_T));
  memcpy(&Accumulator_DW.Memory_PreviousInput[0], &Accumulator_P.cQur[0], 126U *
 8004548:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 800454c:	490d      	ldr	r1, [pc, #52]	; (8004584 <Accumulator_initialize+0x5c>)
 800454e:	480e      	ldr	r0, [pc, #56]	; (8004588 <Accumulator_initialize+0x60>)
 8004550:	f012 fb04 	bl	8016b5c <memcpy>
         sizeof(real_T));
  memcpy(&Accumulator_DW.Memory2_PreviousInput[0], &Accumulator_P.cCap[0], 126U *
 8004554:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 8004558:	490c      	ldr	r1, [pc, #48]	; (800458c <Accumulator_initialize+0x64>)
 800455a:	480d      	ldr	r0, [pc, #52]	; (8004590 <Accumulator_initialize+0x68>)
 800455c:	f012 fafe 	bl	8016b5c <memcpy>
         sizeof(real_T));
  Accumulator_DW.Memory1_PreviousInput = Accumulator_P.Memory1_InitialCondition;
 8004560:	4b05      	ldr	r3, [pc, #20]	; (8004578 <Accumulator_initialize+0x50>)
 8004562:	f603 73e8 	addw	r3, r3, #4072	; 0xfe8
 8004566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800456a:	4904      	ldr	r1, [pc, #16]	; (800457c <Accumulator_initialize+0x54>)
 800456c:	f601 31d8 	addw	r1, r1, #3032	; 0xbd8
 8004570:	e9c1 2300 	strd	r2, r3, [r1]
}
 8004574:	bf00      	nop
 8004576:	bd80      	pop	{r7, pc}
 8004578:	20000008 	.word	0x20000008
 800457c:	2001cda8 	.word	0x2001cda8
 8004580:	20000bf0 	.word	0x20000bf0
 8004584:	200004e8 	.word	0x200004e8
 8004588:	2001d1a0 	.word	0x2001d1a0
 800458c:	200000f8 	.word	0x200000f8
 8004590:	2001d590 	.word	0x2001d590

08004594 <CSE_S_x>:
RT_MODEL_CSE_T *const CSE_M = &CSE_M_;
static void UKFCorrectorAdditive_getPredict(real_T Rs, const real_T X1[3], const
  real_T S[9], real_T alpha, real_T beta, real_T kappa, real_T *Ymean, real_T
  Pxy[3], real_T *Sy);
void CSE_S_x(const real_T rtu_x[3], real_T rty_x_next[3])
{
 8004594:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004598:	b086      	sub	sp, #24
 800459a:	af00      	add	r7, sp, #0
 800459c:	6078      	str	r0, [r7, #4]
 800459e:	6039      	str	r1, [r7, #0]
  real_T rtb_Divide;
  real_T tmp;
  rtb_Divide = rtu_x[1] / rtu_x[2];
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	3308      	adds	r3, #8
 80045a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	3310      	adds	r3, #16
 80045ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045b0:	f7fc f93e 	bl	8000830 <__aeabi_ddiv>
 80045b4:	4602      	mov	r2, r0
 80045b6:	460b      	mov	r3, r1
 80045b8:	e9c7 2304 	strd	r2, r3, [r7, #16]
  tmp = exp(-CSE_P.Ts / look1_binlxpw(rtb_Divide, CSE_P.soc, CSE_P.tau, 12U));
 80045bc:	4b3e      	ldr	r3, [pc, #248]	; (80046b8 <CSE_S_x+0x124>)
 80045be:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	; 0xd0
 80045c2:	4614      	mov	r4, r2
 80045c4:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80045c8:	220c      	movs	r2, #12
 80045ca:	493c      	ldr	r1, [pc, #240]	; (80046bc <CSE_S_x+0x128>)
 80045cc:	483c      	ldr	r0, [pc, #240]	; (80046c0 <CSE_S_x+0x12c>)
 80045ce:	ed97 0b04 	vldr	d0, [r7, #16]
 80045d2:	f004 f915 	bl	8008800 <look1_binlxpw>
 80045d6:	ec53 2b10 	vmov	r2, r3, d0
 80045da:	4620      	mov	r0, r4
 80045dc:	4629      	mov	r1, r5
 80045de:	f7fc f927 	bl	8000830 <__aeabi_ddiv>
 80045e2:	4602      	mov	r2, r0
 80045e4:	460b      	mov	r3, r1
 80045e6:	ec43 2b17 	vmov	d7, r2, r3
 80045ea:	eeb0 0a47 	vmov.f32	s0, s14
 80045ee:	eef0 0a67 	vmov.f32	s1, s15
 80045f2:	f012 fbe1 	bl	8016db8 <exp>
 80045f6:	ed87 0b02 	vstr	d0, [r7, #8]
  rty_x_next[0] = (1.0 - tmp) * CSE_U.u * look1_binlxpw(rtb_Divide, CSE_P.soc,
 80045fa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80045fe:	f04f 0000 	mov.w	r0, #0
 8004602:	4930      	ldr	r1, [pc, #192]	; (80046c4 <CSE_S_x+0x130>)
 8004604:	f7fb fe32 	bl	800026c <__aeabi_dsub>
 8004608:	4602      	mov	r2, r0
 800460a:	460b      	mov	r3, r1
 800460c:	4610      	mov	r0, r2
 800460e:	4619      	mov	r1, r3
 8004610:	4b2d      	ldr	r3, [pc, #180]	; (80046c8 <CSE_S_x+0x134>)
 8004612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004616:	f7fb ffe1 	bl	80005dc <__aeabi_dmul>
 800461a:	4602      	mov	r2, r0
 800461c:	460b      	mov	r3, r1
 800461e:	4614      	mov	r4, r2
 8004620:	461d      	mov	r5, r3
 8004622:	220c      	movs	r2, #12
 8004624:	4924      	ldr	r1, [pc, #144]	; (80046b8 <CSE_S_x+0x124>)
 8004626:	4826      	ldr	r0, [pc, #152]	; (80046c0 <CSE_S_x+0x12c>)
 8004628:	ed97 0b04 	vldr	d0, [r7, #16]
 800462c:	f004 f8e8 	bl	8008800 <look1_binlxpw>
 8004630:	ec53 2b10 	vmov	r2, r3, d0
 8004634:	4620      	mov	r0, r4
 8004636:	4629      	mov	r1, r5
 8004638:	f7fb ffd0 	bl	80005dc <__aeabi_dmul>
 800463c:	4602      	mov	r2, r0
 800463e:	460b      	mov	r3, r1
 8004640:	4614      	mov	r4, r2
 8004642:	461d      	mov	r5, r3
    CSE_P.Rp, 12U) + tmp * rtu_x[0];
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	e9d3 0100 	ldrd	r0, r1, [r3]
 800464a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800464e:	f7fb ffc5 	bl	80005dc <__aeabi_dmul>
 8004652:	4602      	mov	r2, r0
 8004654:	460b      	mov	r3, r1
 8004656:	4620      	mov	r0, r4
 8004658:	4629      	mov	r1, r5
 800465a:	f7fb fe09 	bl	8000270 <__adddf3>
 800465e:	4602      	mov	r2, r0
 8004660:	460b      	mov	r3, r1
  rty_x_next[0] = (1.0 - tmp) * CSE_U.u * look1_binlxpw(rtb_Divide, CSE_P.soc,
 8004662:	6839      	ldr	r1, [r7, #0]
 8004664:	e9c1 2300 	strd	r2, r3, [r1]
  rty_x_next[1] = CSE_U.u * CSE_P.Ts + rtu_x[1];
 8004668:	4b17      	ldr	r3, [pc, #92]	; (80046c8 <CSE_S_x+0x134>)
 800466a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800466e:	4b12      	ldr	r3, [pc, #72]	; (80046b8 <CSE_S_x+0x124>)
 8004670:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	; 0xd0
 8004674:	f7fb ffb2 	bl	80005dc <__aeabi_dmul>
 8004678:	4602      	mov	r2, r0
 800467a:	460b      	mov	r3, r1
 800467c:	4690      	mov	r8, r2
 800467e:	4699      	mov	r9, r3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	3308      	adds	r3, #8
 8004684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004688:	6839      	ldr	r1, [r7, #0]
 800468a:	f101 0408 	add.w	r4, r1, #8
 800468e:	4640      	mov	r0, r8
 8004690:	4649      	mov	r1, r9
 8004692:	f7fb fded 	bl	8000270 <__adddf3>
 8004696:	4602      	mov	r2, r0
 8004698:	460b      	mov	r3, r1
 800469a:	e9c4 2300 	strd	r2, r3, [r4]
  rty_x_next[2] = rtu_x[2];
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	f103 0110 	add.w	r1, r3, #16
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80046aa:	e9c1 2300 	strd	r2, r3, [r1]
}
 80046ae:	bf00      	nop
 80046b0:	3718      	adds	r7, #24
 80046b2:	46bd      	mov	sp, r7
 80046b4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80046b8:	20001000 	.word	0x20001000
 80046bc:	200011a8 	.word	0x200011a8
 80046c0:	20001140 	.word	0x20001140
 80046c4:	3ff00000 	.word	0x3ff00000
 80046c8:	2001d998 	.word	0x2001d998

080046cc <CSE_M_x>:

void CSE_M_x(const real_T rtu_x[3], real_T *rty_y)
{
 80046cc:	b5b0      	push	{r4, r5, r7, lr}
 80046ce:	b084      	sub	sp, #16
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
 80046d4:	6039      	str	r1, [r7, #0]
  real_T rtb_Divide;
  rtb_Divide = rtu_x[1] / rtu_x[2];
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	3308      	adds	r3, #8
 80046da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	3310      	adds	r3, #16
 80046e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046e6:	f7fc f8a3 	bl	8000830 <__aeabi_ddiv>
 80046ea:	4602      	mov	r2, r0
 80046ec:	460b      	mov	r3, r1
 80046ee:	e9c7 2302 	strd	r2, r3, [r7, #8]
  *rty_y = (CSE_U.u * look1_binlxpw(rtb_Divide, CSE_P.soc, CSE_P.Rs, 12U) +
 80046f2:	4b19      	ldr	r3, [pc, #100]	; (8004758 <CSE_M_x+0x8c>)
 80046f4:	e9d3 4500 	ldrd	r4, r5, [r3]
 80046f8:	220c      	movs	r2, #12
 80046fa:	4918      	ldr	r1, [pc, #96]	; (800475c <CSE_M_x+0x90>)
 80046fc:	4818      	ldr	r0, [pc, #96]	; (8004760 <CSE_M_x+0x94>)
 80046fe:	ed97 0b02 	vldr	d0, [r7, #8]
 8004702:	f004 f87d 	bl	8008800 <look1_binlxpw>
 8004706:	ec53 2b10 	vmov	r2, r3, d0
 800470a:	4620      	mov	r0, r4
 800470c:	4629      	mov	r1, r5
 800470e:	f7fb ff65 	bl	80005dc <__aeabi_dmul>
 8004712:	4602      	mov	r2, r0
 8004714:	460b      	mov	r3, r1
 8004716:	4614      	mov	r4, r2
 8004718:	461d      	mov	r5, r3
            look1_binlxpw(rtb_Divide, CSE_P.soc, CSE_P.ocv, 12U)) + rtu_x[0];
 800471a:	220c      	movs	r2, #12
 800471c:	4911      	ldr	r1, [pc, #68]	; (8004764 <CSE_M_x+0x98>)
 800471e:	4810      	ldr	r0, [pc, #64]	; (8004760 <CSE_M_x+0x94>)
 8004720:	ed97 0b02 	vldr	d0, [r7, #8]
 8004724:	f004 f86c 	bl	8008800 <look1_binlxpw>
 8004728:	ec53 2b10 	vmov	r2, r3, d0
  *rty_y = (CSE_U.u * look1_binlxpw(rtb_Divide, CSE_P.soc, CSE_P.Rs, 12U) +
 800472c:	4620      	mov	r0, r4
 800472e:	4629      	mov	r1, r5
 8004730:	f7fb fd9e 	bl	8000270 <__adddf3>
 8004734:	4602      	mov	r2, r0
 8004736:	460b      	mov	r3, r1
 8004738:	4610      	mov	r0, r2
 800473a:	4619      	mov	r1, r3
            look1_binlxpw(rtb_Divide, CSE_P.soc, CSE_P.ocv, 12U)) + rtu_x[0];
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004742:	f7fb fd95 	bl	8000270 <__adddf3>
 8004746:	4602      	mov	r2, r0
 8004748:	460b      	mov	r3, r1
  *rty_y = (CSE_U.u * look1_binlxpw(rtb_Divide, CSE_P.soc, CSE_P.Rs, 12U) +
 800474a:	6839      	ldr	r1, [r7, #0]
 800474c:	e9c1 2300 	strd	r2, r3, [r1]
}
 8004750:	bf00      	nop
 8004752:	3710      	adds	r7, #16
 8004754:	46bd      	mov	sp, r7
 8004756:	bdb0      	pop	{r4, r5, r7, pc}
 8004758:	2001d998 	.word	0x2001d998
 800475c:	20001068 	.word	0x20001068
 8004760:	20001140 	.word	0x20001140
 8004764:	200010d8 	.word	0x200010d8

08004768 <UKFCorrectorAdditive_getPredict>:

static void UKFCorrectorAdditive_getPredict(real_T Rs, const real_T X1[3], const
  real_T S[9], real_T alpha, real_T beta, real_T kappa, real_T *Ymean, real_T
  Pxy[3], real_T *Sy)
{
 8004768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800476c:	ed2d 8b02 	vpush	{d8}
 8004770:	b0e1      	sub	sp, #388	; 0x184
 8004772:	af04      	add	r7, sp, #16
 8004774:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8004778:	ed84 0b00 	vstr	d0, [r4]
 800477c:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8004780:	6020      	str	r0, [r4, #0]
 8004782:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8004786:	6001      	str	r1, [r0, #0]
 8004788:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800478c:	ed81 1b00 	vstr	d1, [r1]
 8004790:	f107 0120 	add.w	r1, r7, #32
 8004794:	ed81 2b00 	vstr	d2, [r1]
 8004798:	f107 0118 	add.w	r1, r7, #24
 800479c:	ed81 3b00 	vstr	d3, [r1]
 80047a0:	f107 0114 	add.w	r1, r7, #20
 80047a4:	600a      	str	r2, [r1, #0]
 80047a6:	f107 0210 	add.w	r2, r7, #16
 80047aa:	6013      	str	r3, [r2, #0]
  real_T Wmean[2];
  real_T tempY;
  real_T tempY_tmp;
  int32_T knt;
  int32_T knt_0;
  tempY_tmp = alpha * alpha;
 80047ac:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80047b0:	e9d1 2300 	ldrd	r2, r3, [r1]
 80047b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80047b8:	f7fb ff10 	bl	80005dc <__aeabi_dmul>
 80047bc:	4602      	mov	r2, r0
 80047be:	460b      	mov	r3, r1
 80047c0:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80047c4:	e9c1 2300 	strd	r2, r3, [r1]
  tempY = (kappa + 3.0) * tempY_tmp;
 80047c8:	f107 0118 	add.w	r1, r7, #24
 80047cc:	f04f 0200 	mov.w	r2, #0
 80047d0:	4b96      	ldr	r3, [pc, #600]	; (8004a2c <UKFCorrectorAdditive_getPredict+0x2c4>)
 80047d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80047d6:	f7fb fd4b 	bl	8000270 <__adddf3>
 80047da:	4602      	mov	r2, r0
 80047dc:	460b      	mov	r3, r1
 80047de:	4610      	mov	r0, r2
 80047e0:	4619      	mov	r1, r3
 80047e2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80047e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ea:	f7fb fef7 	bl	80005dc <__aeabi_dmul>
 80047ee:	4602      	mov	r2, r0
 80047f0:	460b      	mov	r3, r1
 80047f2:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80047f6:	e9c1 2300 	strd	r2, r3, [r1]
  Wmean[0] = 1.0 - 3.0 / tempY;
 80047fa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80047fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004802:	f04f 0000 	mov.w	r0, #0
 8004806:	4989      	ldr	r1, [pc, #548]	; (8004a2c <UKFCorrectorAdditive_getPredict+0x2c4>)
 8004808:	f7fc f812 	bl	8000830 <__aeabi_ddiv>
 800480c:	4602      	mov	r2, r0
 800480e:	460b      	mov	r3, r1
 8004810:	f04f 0000 	mov.w	r0, #0
 8004814:	4986      	ldr	r1, [pc, #536]	; (8004a30 <UKFCorrectorAdditive_getPredict+0x2c8>)
 8004816:	f7fb fd29 	bl	800026c <__aeabi_dsub>
 800481a:	4602      	mov	r2, r0
 800481c:	460b      	mov	r3, r1
 800481e:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8004822:	e9c1 2300 	strd	r2, r3, [r1]
  Wmean[1] = 1.0 / (2.0 * tempY);
 8004826:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800482a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800482e:	4602      	mov	r2, r0
 8004830:	460b      	mov	r3, r1
 8004832:	f7fb fd1d 	bl	8000270 <__adddf3>
 8004836:	4602      	mov	r2, r0
 8004838:	460b      	mov	r3, r1
 800483a:	f04f 0000 	mov.w	r0, #0
 800483e:	497c      	ldr	r1, [pc, #496]	; (8004a30 <UKFCorrectorAdditive_getPredict+0x2c8>)
 8004840:	f7fb fff6 	bl	8000830 <__aeabi_ddiv>
 8004844:	4602      	mov	r2, r0
 8004846:	460b      	mov	r3, r1
 8004848:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800484c:	e9c1 2302 	strd	r2, r3, [r1, #8]
  Wcov[0] = ((1.0 - tempY_tmp) + beta) + Wmean[0];
 8004850:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004858:	f04f 0000 	mov.w	r0, #0
 800485c:	4974      	ldr	r1, [pc, #464]	; (8004a30 <UKFCorrectorAdditive_getPredict+0x2c8>)
 800485e:	f7fb fd05 	bl	800026c <__aeabi_dsub>
 8004862:	4602      	mov	r2, r0
 8004864:	460b      	mov	r3, r1
 8004866:	4610      	mov	r0, r2
 8004868:	4619      	mov	r1, r3
 800486a:	f107 0320 	add.w	r3, r7, #32
 800486e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004872:	f7fb fcfd 	bl	8000270 <__adddf3>
 8004876:	4602      	mov	r2, r0
 8004878:	460b      	mov	r3, r1
 800487a:	4610      	mov	r0, r2
 800487c:	4619      	mov	r1, r3
 800487e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004886:	f7fb fcf3 	bl	8000270 <__adddf3>
 800488a:	4602      	mov	r2, r0
 800488c:	460b      	mov	r3, r1
 800488e:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8004892:	e9c1 2300 	strd	r2, r3, [r1]
  Wcov[1] = Wmean[1];
 8004896:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800489a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800489e:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80048a2:	e9c1 2302 	strd	r2, r3, [r1, #8]
  if (Wmean[0] != 0.0) {
 80048a6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80048aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80048ae:	f04f 0200 	mov.w	r2, #0
 80048b2:	f04f 0300 	mov.w	r3, #0
 80048b6:	f7fc f8f9 	bl	8000aac <__aeabi_dcmpeq>
 80048ba:	4603      	mov	r3, r0
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d154      	bne.n	800496a <UKFCorrectorAdditive_getPredict+0x202>
    real_T Wcov_0;
    *Sy = Wmean[0];
 80048c0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80048c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048c8:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 80048cc:	e9c1 2300 	strd	r2, r3, [r1]
    tempY_tmp = Wmean[0];
 80048d0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80048d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048d8:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80048dc:	e9c1 2300 	strd	r2, r3, [r1]
    Wmean[0] /= Wmean[0];
 80048e0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80048e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80048e8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80048ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048f0:	f7fb ff9e 	bl	8000830 <__aeabi_ddiv>
 80048f4:	4602      	mov	r2, r0
 80048f6:	460b      	mov	r3, r1
 80048f8:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80048fc:	e9c1 2300 	strd	r2, r3, [r1]
    Wcov[0] /= *Sy;
 8004900:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8004904:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004908:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800490c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004910:	f7fb ff8e 	bl	8000830 <__aeabi_ddiv>
 8004914:	4602      	mov	r2, r0
 8004916:	460b      	mov	r3, r1
 8004918:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800491c:	e9c1 2300 	strd	r2, r3, [r1]
    Wcov_0 = Wmean[1];
 8004920:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004924:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004928:	e9c7 2358 	strd	r2, r3, [r7, #352]	; 0x160
    Wmean[1] /= tempY_tmp;
 800492c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004930:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8004934:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800493c:	f7fb ff78 	bl	8000830 <__aeabi_ddiv>
 8004940:	4602      	mov	r2, r0
 8004942:	460b      	mov	r3, r1
 8004944:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8004948:	e9c1 2302 	strd	r2, r3, [r1, #8]
    Wcov[1] = Wcov_0 / *Sy;
 800494c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004954:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	; 0x160
 8004958:	f7fb ff6a 	bl	8000830 <__aeabi_ddiv>
 800495c:	4602      	mov	r2, r0
 800495e:	460b      	mov	r3, r1
 8004960:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8004964:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8004968:	e006      	b.n	8004978 <UKFCorrectorAdditive_getPredict+0x210>
  } else {
    *Sy = 1.0;
 800496a:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 800496e:	f04f 0200 	mov.w	r2, #0
 8004972:	4b2f      	ldr	r3, [pc, #188]	; (8004a30 <UKFCorrectorAdditive_getPredict+0x2c8>)
 8004974:	e9c1 2300 	strd	r2, r3, [r1]
  }

  tempY = sqrt(tempY);
 8004978:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800497c:	ed93 7b00 	vldr	d7, [r3]
 8004980:	eeb0 0a47 	vmov.f32	s0, s14
 8004984:	eef0 0a67 	vmov.f32	s1, s15
 8004988:	f012 faae 	bl	8016ee8 <sqrt>
 800498c:	eeb0 7a40 	vmov.f32	s14, s0
 8004990:	eef0 7a60 	vmov.f32	s15, s1
 8004994:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004998:	ed83 7b00 	vstr	d7, [r3]
  for (knt = 0; knt < 9; knt++) {
 800499c:	2300      	movs	r3, #0
 800499e:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 80049a2:	e037      	b.n	8004a14 <UKFCorrectorAdditive_getPredict+0x2ac>
    tempY_tmp = tempY * S[knt];
 80049a4:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80049a8:	00db      	lsls	r3, r3, #3
 80049aa:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80049ae:	6812      	ldr	r2, [r2, #0]
 80049b0:	4413      	add	r3, r2
 80049b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80049b6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80049ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049be:	f7fb fe0d 	bl	80005dc <__aeabi_dmul>
 80049c2:	4602      	mov	r2, r0
 80049c4:	460b      	mov	r3, r1
 80049c6:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80049ca:	e9c1 2300 	strd	r2, r3, [r1]
    X2[knt] = tempY_tmp;
 80049ce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80049d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049d6:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80049da:	00c9      	lsls	r1, r1, #3
 80049dc:	f507 70b8 	add.w	r0, r7, #368	; 0x170
 80049e0:	4401      	add	r1, r0
 80049e2:	39a0      	subs	r1, #160	; 0xa0
 80049e4:	e9c1 2300 	strd	r2, r3, [r1]
    X2[knt + 9] = -tempY_tmp;
 80049e8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80049ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049f0:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80049f4:	3109      	adds	r1, #9
 80049f6:	4690      	mov	r8, r2
 80049f8:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 80049fc:	00cb      	lsls	r3, r1, #3
 80049fe:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8004a02:	4413      	add	r3, r2
 8004a04:	3ba0      	subs	r3, #160	; 0xa0
 8004a06:	e9c3 8900 	strd	r8, r9, [r3]
  for (knt = 0; knt < 9; knt++) {
 8004a0a:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004a0e:	3301      	adds	r3, #1
 8004a10:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8004a14:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004a18:	2b08      	cmp	r3, #8
 8004a1a:	ddc3      	ble.n	80049a4 <UKFCorrectorAdditive_getPredict+0x23c>
  }

  knt_0 = 0;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  for (knt = 0; knt < 6; knt++) {
 8004a22:	2300      	movs	r3, #0
 8004a24:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8004a28:	e065      	b.n	8004af6 <UKFCorrectorAdditive_getPredict+0x38e>
 8004a2a:	bf00      	nop
 8004a2c:	40080000 	.word	0x40080000
 8004a30:	3ff00000 	.word	0x3ff00000
    X2[knt_0] += X1[0];
 8004a34:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004a38:	00db      	lsls	r3, r3, #3
 8004a3a:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8004a3e:	4413      	add	r3, r2
 8004a40:	3ba0      	subs	r3, #160	; 0xa0
 8004a42:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004a46:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a50:	f7fb fc0e 	bl	8000270 <__adddf3>
 8004a54:	4602      	mov	r2, r0
 8004a56:	460b      	mov	r3, r1
 8004a58:	f8d7 1168 	ldr.w	r1, [r7, #360]	; 0x168
 8004a5c:	00c9      	lsls	r1, r1, #3
 8004a5e:	f507 70b8 	add.w	r0, r7, #368	; 0x170
 8004a62:	4401      	add	r1, r0
 8004a64:	39a0      	subs	r1, #160	; 0xa0
 8004a66:	e9c1 2300 	strd	r2, r3, [r1]
    X2[knt_0 + 1] += X1[1];
 8004a6a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004a6e:	3301      	adds	r3, #1
 8004a70:	00db      	lsls	r3, r3, #3
 8004a72:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8004a76:	4413      	add	r3, r2
 8004a78:	3ba0      	subs	r3, #160	; 0xa0
 8004a7a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004a7e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	3308      	adds	r3, #8
 8004a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a8a:	f8d7 4168 	ldr.w	r4, [r7, #360]	; 0x168
 8004a8e:	3401      	adds	r4, #1
 8004a90:	f7fb fbee 	bl	8000270 <__adddf3>
 8004a94:	4602      	mov	r2, r0
 8004a96:	460b      	mov	r3, r1
 8004a98:	00e1      	lsls	r1, r4, #3
 8004a9a:	f507 70b8 	add.w	r0, r7, #368	; 0x170
 8004a9e:	4401      	add	r1, r0
 8004aa0:	39a0      	subs	r1, #160	; 0xa0
 8004aa2:	e9c1 2300 	strd	r2, r3, [r1]
    X2[knt_0 + 2] += X1[2];
 8004aa6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004aaa:	3302      	adds	r3, #2
 8004aac:	00db      	lsls	r3, r3, #3
 8004aae:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8004ab2:	4413      	add	r3, r2
 8004ab4:	3ba0      	subs	r3, #160	; 0xa0
 8004ab6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004aba:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	3310      	adds	r3, #16
 8004ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ac6:	f8d7 4168 	ldr.w	r4, [r7, #360]	; 0x168
 8004aca:	3402      	adds	r4, #2
 8004acc:	f7fb fbd0 	bl	8000270 <__adddf3>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	460b      	mov	r3, r1
 8004ad4:	00e1      	lsls	r1, r4, #3
 8004ad6:	f507 70b8 	add.w	r0, r7, #368	; 0x170
 8004ada:	4401      	add	r1, r0
 8004adc:	39a0      	subs	r1, #160	; 0xa0
 8004ade:	e9c1 2300 	strd	r2, r3, [r1]
    knt_0 += 3;
 8004ae2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004ae6:	3303      	adds	r3, #3
 8004ae8:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  for (knt = 0; knt < 6; knt++) {
 8004aec:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004af0:	3301      	adds	r3, #1
 8004af2:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8004af6:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004afa:	2b05      	cmp	r3, #5
 8004afc:	dd9a      	ble.n	8004a34 <UKFCorrectorAdditive_getPredict+0x2cc>
  }

  knt_0 = 0;
 8004afe:	2300      	movs	r3, #0
 8004b00:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  for (knt = 0; knt < 6; knt++) {
 8004b04:	2300      	movs	r3, #0
 8004b06:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8004b0a:	e018      	b.n	8004b3e <UKFCorrectorAdditive_getPredict+0x3d6>
    CSE_M_x(&X2[knt_0], &Y2[knt]);
 8004b0c:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8004b10:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004b14:	00db      	lsls	r3, r3, #3
 8004b16:	18d0      	adds	r0, r2, r3
 8004b18:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8004b1c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004b20:	00db      	lsls	r3, r3, #3
 8004b22:	4413      	add	r3, r2
 8004b24:	4619      	mov	r1, r3
 8004b26:	f7ff fdd1 	bl	80046cc <CSE_M_x>
    knt_0 += 3;
 8004b2a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004b2e:	3303      	adds	r3, #3
 8004b30:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  for (knt = 0; knt < 6; knt++) {
 8004b34:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004b38:	3301      	adds	r3, #1
 8004b3a:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8004b3e:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004b42:	2b05      	cmp	r3, #5
 8004b44:	dde2      	ble.n	8004b0c <UKFCorrectorAdditive_getPredict+0x3a4>
  }

  CSE_M_x(X1, &tempY);
 8004b46:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004b4a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004b4e:	4611      	mov	r1, r2
 8004b50:	6818      	ldr	r0, [r3, #0]
 8004b52:	f7ff fdbb 	bl	80046cc <CSE_M_x>
  for (knt = 0; knt < 6; knt++) {
 8004b56:	2300      	movs	r3, #0
 8004b58:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8004b5c:	e027      	b.n	8004bae <UKFCorrectorAdditive_getPredict+0x446>
    Y2_0[knt] = (Y2[knt] - tempY) + tempY;
 8004b5e:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004b62:	00db      	lsls	r3, r3, #3
 8004b64:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8004b68:	4413      	add	r3, r2
 8004b6a:	3bd0      	subs	r3, #208	; 0xd0
 8004b6c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004b70:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b78:	f7fb fb78 	bl	800026c <__aeabi_dsub>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	460b      	mov	r3, r1
 8004b80:	4610      	mov	r0, r2
 8004b82:	4619      	mov	r1, r3
 8004b84:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b8c:	f7fb fb70 	bl	8000270 <__adddf3>
 8004b90:	4602      	mov	r2, r0
 8004b92:	460b      	mov	r3, r1
 8004b94:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8004b98:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8004b9c:	00c9      	lsls	r1, r1, #3
 8004b9e:	4401      	add	r1, r0
 8004ba0:	e9c1 2300 	strd	r2, r3, [r1]
  for (knt = 0; knt < 6; knt++) {
 8004ba4:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004ba8:	3301      	adds	r3, #1
 8004baa:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8004bae:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004bb2:	2b05      	cmp	r3, #5
 8004bb4:	ddd3      	ble.n	8004b5e <UKFCorrectorAdditive_getPredict+0x3f6>
  }

  UTMeanCovSqrt_C6QfB9Td(Wmean, Wcov, *Sy, tempY, Y2_0, X1, X2, Ymean,
 8004bb6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004bba:	ed93 7b00 	vldr	d7, [r3]
 8004bbe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004bc2:	ed93 6b00 	vldr	d6, [r3]
 8004bc6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004bca:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8004bce:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8004bd2:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8004bd6:	f107 0210 	add.w	r2, r7, #16
 8004bda:	6812      	ldr	r2, [r2, #0]
 8004bdc:	9203      	str	r2, [sp, #12]
 8004bde:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8004be2:	9202      	str	r2, [sp, #8]
 8004be4:	f107 0214 	add.w	r2, r7, #20
 8004be8:	6812      	ldr	r2, [r2, #0]
 8004bea:	9201      	str	r2, [sp, #4]
 8004bec:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8004bf0:	9200      	str	r2, [sp, #0]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4622      	mov	r2, r4
 8004bf6:	eeb0 1a46 	vmov.f32	s2, s12
 8004bfa:	eef0 1a66 	vmov.f32	s3, s13
 8004bfe:	eeb0 0a47 	vmov.f32	s0, s14
 8004c02:	eef0 0a67 	vmov.f32	s1, s15
 8004c06:	f003 f9a1 	bl	8007f4c <UTMeanCovSqrt_C6QfB9Td>
    &tempY_tmp, Pxy);
  Wmean[0] = tempY_tmp;
 8004c0a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c12:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8004c16:	e9c1 2300 	strd	r2, r3, [r1]
  Wmean[1] = Rs;
 8004c1a:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8004c1e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c26:	e9c1 2302 	strd	r2, r3, [r1, #8]
  *Sy = tempY_tmp;
 8004c2a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c32:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 8004c36:	e9c1 2300 	strd	r2, r3, [r1]
  tempY = xnrm2_Mnmxg9YT(1, Wmean, 2);
 8004c3a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004c3e:	2202      	movs	r2, #2
 8004c40:	4619      	mov	r1, r3
 8004c42:	2001      	movs	r0, #1
 8004c44:	f008 fcb2 	bl	800d5ac <xnrm2_Mnmxg9YT>
 8004c48:	eeb0 7a40 	vmov.f32	s14, s0
 8004c4c:	eef0 7a60 	vmov.f32	s15, s1
 8004c50:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004c54:	ed83 7b00 	vstr	d7, [r3]
  if (tempY != 0.0) {
 8004c58:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004c5c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004c60:	f04f 0200 	mov.w	r2, #0
 8004c64:	f04f 0300 	mov.w	r3, #0
 8004c68:	f7fb ff20 	bl	8000aac <__aeabi_dcmpeq>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d000      	beq.n	8004c74 <UKFCorrectorAdditive_getPredict+0x50c>
      *Sy = tempY;
    } else {
      *Sy = tempY;
    }
  }
}
 8004c72:	e0fa      	b.n	8004e6a <UKFCorrectorAdditive_getPredict+0x702>
    tempY = rt_hypotd_snf(tempY_tmp, tempY);
 8004c74:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004c78:	ed93 7b00 	vldr	d7, [r3]
 8004c7c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004c80:	ed93 6b00 	vldr	d6, [r3]
 8004c84:	eeb0 1a46 	vmov.f32	s2, s12
 8004c88:	eef0 1a66 	vmov.f32	s3, s13
 8004c8c:	eeb0 0a47 	vmov.f32	s0, s14
 8004c90:	eef0 0a67 	vmov.f32	s1, s15
 8004c94:	f006 f900 	bl	800ae98 <rt_hypotd_snf>
 8004c98:	eeb0 7a40 	vmov.f32	s14, s0
 8004c9c:	eef0 7a60 	vmov.f32	s15, s1
 8004ca0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004ca4:	ed83 7b00 	vstr	d7, [r3]
    if (tempY_tmp >= 0.0) {
 8004ca8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004cac:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004cb0:	f04f 0200 	mov.w	r2, #0
 8004cb4:	f04f 0300 	mov.w	r3, #0
 8004cb8:	f7fb ff16 	bl	8000ae8 <__aeabi_dcmpge>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d00a      	beq.n	8004cd8 <UKFCorrectorAdditive_getPredict+0x570>
      tempY = -tempY;
 8004cc2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cca:	4615      	mov	r5, r2
 8004ccc:	f083 4600 	eor.w	r6, r3, #2147483648	; 0x80000000
 8004cd0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004cd4:	e9c3 5600 	strd	r5, r6, [r3]
    if (fabs(tempY) < 1.0020841800044864E-292) {
 8004cd8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ce0:	60ba      	str	r2, [r7, #8]
 8004ce2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004ce6:	60fb      	str	r3, [r7, #12]
 8004ce8:	f04f 0200 	mov.w	r2, #0
 8004cec:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 8004cf0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004cf4:	f7fb fee4 	bl	8000ac0 <__aeabi_dcmplt>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	f000 80ad 	beq.w	8004e5a <UKFCorrectorAdditive_getPredict+0x6f2>
      knt = 0;
 8004d00:	2300      	movs	r3, #0
 8004d02:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
        knt++;
 8004d06:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004d0a:	3301      	adds	r3, #1
 8004d0c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
        Wmean[1] *= 9.9792015476736E+291;
 8004d10:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004d14:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8004d18:	f04f 0200 	mov.w	r2, #0
 8004d1c:	4b57      	ldr	r3, [pc, #348]	; (8004e7c <UKFCorrectorAdditive_getPredict+0x714>)
 8004d1e:	f7fb fc5d 	bl	80005dc <__aeabi_dmul>
 8004d22:	4602      	mov	r2, r0
 8004d24:	460b      	mov	r3, r1
 8004d26:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8004d2a:	e9c1 2302 	strd	r2, r3, [r1, #8]
        tempY *= 9.9792015476736E+291;
 8004d2e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004d32:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004d36:	f04f 0200 	mov.w	r2, #0
 8004d3a:	4b50      	ldr	r3, [pc, #320]	; (8004e7c <UKFCorrectorAdditive_getPredict+0x714>)
 8004d3c:	f7fb fc4e 	bl	80005dc <__aeabi_dmul>
 8004d40:	4602      	mov	r2, r0
 8004d42:	460b      	mov	r3, r1
 8004d44:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8004d48:	e9c1 2300 	strd	r2, r3, [r1]
        *Sy *= 9.9792015476736E+291;
 8004d4c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004d50:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004d54:	f04f 0200 	mov.w	r2, #0
 8004d58:	4b48      	ldr	r3, [pc, #288]	; (8004e7c <UKFCorrectorAdditive_getPredict+0x714>)
 8004d5a:	f7fb fc3f 	bl	80005dc <__aeabi_dmul>
 8004d5e:	4602      	mov	r2, r0
 8004d60:	460b      	mov	r3, r1
 8004d62:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 8004d66:	e9c1 2300 	strd	r2, r3, [r1]
      } while ((fabs(tempY) < 1.0020841800044864E-292) && (knt < 20));
 8004d6a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d72:	603a      	str	r2, [r7, #0]
 8004d74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004d78:	607b      	str	r3, [r7, #4]
 8004d7a:	f04f 0200 	mov.w	r2, #0
 8004d7e:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 8004d82:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004d86:	f7fb fe9b 	bl	8000ac0 <__aeabi_dcmplt>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d003      	beq.n	8004d98 <UKFCorrectorAdditive_getPredict+0x630>
 8004d90:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004d94:	2b13      	cmp	r3, #19
 8004d96:	ddb6      	ble.n	8004d06 <UKFCorrectorAdditive_getPredict+0x59e>
      tempY = rt_hypotd_snf(*Sy, xnrm2_Mnmxg9YT(1, Wmean, 2));
 8004d98:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004d9c:	ed93 8b00 	vldr	d8, [r3]
 8004da0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004da4:	2202      	movs	r2, #2
 8004da6:	4619      	mov	r1, r3
 8004da8:	2001      	movs	r0, #1
 8004daa:	f008 fbff 	bl	800d5ac <xnrm2_Mnmxg9YT>
 8004dae:	eeb0 7a40 	vmov.f32	s14, s0
 8004db2:	eef0 7a60 	vmov.f32	s15, s1
 8004db6:	eeb0 1a47 	vmov.f32	s2, s14
 8004dba:	eef0 1a67 	vmov.f32	s3, s15
 8004dbe:	eeb0 0a48 	vmov.f32	s0, s16
 8004dc2:	eef0 0a68 	vmov.f32	s1, s17
 8004dc6:	f006 f867 	bl	800ae98 <rt_hypotd_snf>
 8004dca:	eeb0 7a40 	vmov.f32	s14, s0
 8004dce:	eef0 7a60 	vmov.f32	s15, s1
 8004dd2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004dd6:	ed83 7b00 	vstr	d7, [r3]
      if (*Sy >= 0.0) {
 8004dda:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004dde:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004de2:	f04f 0200 	mov.w	r2, #0
 8004de6:	f04f 0300 	mov.w	r3, #0
 8004dea:	f7fb fe7d 	bl	8000ae8 <__aeabi_dcmpge>
 8004dee:	4603      	mov	r3, r0
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d00a      	beq.n	8004e0a <UKFCorrectorAdditive_getPredict+0x6a2>
        tempY = -tempY;
 8004df4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dfc:	4692      	mov	sl, r2
 8004dfe:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 8004e02:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004e06:	e9c3 ab00 	strd	sl, fp, [r3]
      for (knt_0 = 0; knt_0 < knt; knt_0++) {
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8004e10:	e014      	b.n	8004e3c <UKFCorrectorAdditive_getPredict+0x6d4>
        tempY *= 1.0020841800044864E-292;
 8004e12:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004e16:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004e1a:	f04f 0200 	mov.w	r2, #0
 8004e1e:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 8004e22:	f7fb fbdb 	bl	80005dc <__aeabi_dmul>
 8004e26:	4602      	mov	r2, r0
 8004e28:	460b      	mov	r3, r1
 8004e2a:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8004e2e:	e9c1 2300 	strd	r2, r3, [r1]
      for (knt_0 = 0; knt_0 < knt; knt_0++) {
 8004e32:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004e36:	3301      	adds	r3, #1
 8004e38:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8004e3c:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 8004e40:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004e44:	429a      	cmp	r2, r3
 8004e46:	dbe4      	blt.n	8004e12 <UKFCorrectorAdditive_getPredict+0x6aa>
      *Sy = tempY;
 8004e48:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e50:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 8004e54:	e9c1 2300 	strd	r2, r3, [r1]
}
 8004e58:	e007      	b.n	8004e6a <UKFCorrectorAdditive_getPredict+0x702>
      *Sy = tempY;
 8004e5a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e62:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 8004e66:	e9c1 2300 	strd	r2, r3, [r1]
}
 8004e6a:	bf00      	nop
 8004e6c:	f507 77ba 	add.w	r7, r7, #372	; 0x174
 8004e70:	46bd      	mov	sp, r7
 8004e72:	ecbd 8b02 	vpop	{d8}
 8004e76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e7a:	bf00      	nop
 8004e7c:	7c900000 	.word	0x7c900000

08004e80 <CSE_step>:

void CSE_step(void)
{
 8004e80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004e84:	f5ad 7d43 	sub.w	sp, sp, #780	; 0x30c
 8004e88:	af06      	add	r7, sp, #24
  int32_T iAcol_0;
  static const real_T Wmean[2] = { 1.0, -0.1666668333335 };

  static const real_T Wcov[2] = { 0.999996999998, -0.1666668333335 };

  if (CSE_P.Enable1_Value) {
 8004e8a:	4bb3      	ldr	r3, [pc, #716]	; (8005158 <CSE_step+0x2d8>)
 8004e8c:	f893 32d2 	ldrb.w	r3, [r3, #722]	; 0x2d2
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	f001 803e 	beq.w	8005f12 <CSE_step+0x1092>
    boolean_T errorCondition;
    boolean_T guard1 = false;
 8004e96:	2300      	movs	r3, #0
 8004e98:	f887 32de 	strb.w	r3, [r7, #734]	; 0x2de
    CSE_M_x(CSE_DW.x, &s_0);
 8004e9c:	f107 0308 	add.w	r3, r7, #8
 8004ea0:	4619      	mov	r1, r3
 8004ea2:	48ae      	ldr	r0, [pc, #696]	; (800515c <CSE_step+0x2dc>)
 8004ea4:	f7ff fc12 	bl	80046cc <CSE_M_x>
    UKFCorrectorAdditive_getPredict(CSE_P.R1_Value, CSE_DW.x, CSE_DW.P, 0.001,
 8004ea8:	4bab      	ldr	r3, [pc, #684]	; (8005158 <CSE_step+0x2d8>)
 8004eaa:	ed93 7b84 	vldr	d7, [r3, #528]	; 0x210
 8004eae:	f107 0110 	add.w	r1, r7, #16
 8004eb2:	f107 0208 	add.w	r2, r7, #8
 8004eb6:	463b      	mov	r3, r7
 8004eb8:	9300      	str	r3, [sp, #0]
 8004eba:	460b      	mov	r3, r1
 8004ebc:	ed9f 3ba0 	vldr	d3, [pc, #640]	; 8005140 <CSE_step+0x2c0>
 8004ec0:	ed9f 2ba1 	vldr	d2, [pc, #644]	; 8005148 <CSE_step+0x2c8>
 8004ec4:	ed9f 1ba2 	vldr	d1, [pc, #648]	; 8005150 <CSE_step+0x2d0>
 8004ec8:	49a5      	ldr	r1, [pc, #660]	; (8005160 <CSE_step+0x2e0>)
 8004eca:	48a4      	ldr	r0, [pc, #656]	; (800515c <CSE_step+0x2dc>)
 8004ecc:	eeb0 0a47 	vmov.f32	s0, s14
 8004ed0:	eef0 0a67 	vmov.f32	s1, s15
 8004ed4:	f7ff fc48 	bl	8004768 <UKFCorrectorAdditive_getPredict>
      2.0, 0.0, &s_0, tempY, &temp);
    s_0 = CSE_U.y - s_0;
 8004ed8:	4ba2      	ldr	r3, [pc, #648]	; (8005164 <CSE_step+0x2e4>)
 8004eda:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8004ede:	f107 0308 	add.w	r3, r7, #8
 8004ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ee6:	f7fb f9c1 	bl	800026c <__aeabi_dsub>
 8004eea:	4602      	mov	r2, r0
 8004eec:	460b      	mov	r3, r1
 8004eee:	f107 0108 	add.w	r1, r7, #8
 8004ef2:	e9c1 2300 	strd	r2, r3, [r1]
    iAcol_0 = 0;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
    for (iAcol = 0; iAcol < 3; iAcol++) {
 8004efc:	2300      	movs	r3, #0
 8004efe:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8004f02:	e04a      	b.n	8004f9a <CSE_step+0x11a>
      R[iAcol_0] = CSE_DW.P[iAcol];
 8004f04:	4a96      	ldr	r2, [pc, #600]	; (8005160 <CSE_step+0x2e0>)
 8004f06:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8004f0a:	00db      	lsls	r3, r3, #3
 8004f0c:	4413      	add	r3, r2
 8004f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f12:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8004f16:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8004f1a:	00c9      	lsls	r1, r1, #3
 8004f1c:	4401      	add	r1, r0
 8004f1e:	e9c1 2300 	strd	r2, r3, [r1]
      R[iAcol_0 + 1] = CSE_DW.P[iAcol + 3];
 8004f22:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8004f26:	3303      	adds	r3, #3
 8004f28:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8004f2c:	1c51      	adds	r1, r2, #1
 8004f2e:	4a8c      	ldr	r2, [pc, #560]	; (8005160 <CSE_step+0x2e0>)
 8004f30:	00db      	lsls	r3, r3, #3
 8004f32:	4413      	add	r3, r2
 8004f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f38:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8004f3c:	00c9      	lsls	r1, r1, #3
 8004f3e:	4401      	add	r1, r0
 8004f40:	e9c1 2300 	strd	r2, r3, [r1]
      R[iAcol_0 + 2] = CSE_DW.P[iAcol + 6];
 8004f44:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8004f48:	3306      	adds	r3, #6
 8004f4a:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8004f4e:	1c91      	adds	r1, r2, #2
 8004f50:	4a83      	ldr	r2, [pc, #524]	; (8005160 <CSE_step+0x2e0>)
 8004f52:	00db      	lsls	r3, r3, #3
 8004f54:	4413      	add	r3, r2
 8004f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f5a:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8004f5e:	00c9      	lsls	r1, r1, #3
 8004f60:	4401      	add	r1, r0
 8004f62:	e9c1 2300 	strd	r2, r3, [r1]
      C[iAcol] = tempY[iAcol];
 8004f66:	f107 0210 	add.w	r2, r7, #16
 8004f6a:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8004f6e:	00db      	lsls	r3, r3, #3
 8004f70:	4413      	add	r3, r2
 8004f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f76:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8004f7a:	f8d7 12e4 	ldr.w	r1, [r7, #740]	; 0x2e4
 8004f7e:	00c9      	lsls	r1, r1, #3
 8004f80:	4401      	add	r1, r0
 8004f82:	e9c1 2300 	strd	r2, r3, [r1]
      iAcol_0 += 3;
 8004f86:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8004f8a:	3303      	adds	r3, #3
 8004f8c:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
    for (iAcol = 0; iAcol < 3; iAcol++) {
 8004f90:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8004f94:	3301      	adds	r3, #1
 8004f96:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8004f9a:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8004f9e:	2b02      	cmp	r3, #2
 8004fa0:	ddb0      	ble.n	8004f04 <CSE_step+0x84>
    }

    trisolve_BC1XmAGq(temp, C);
 8004fa2:	463b      	mov	r3, r7
 8004fa4:	ed93 7b00 	vldr	d7, [r3]
 8004fa8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004fac:	4618      	mov	r0, r3
 8004fae:	eeb0 0a47 	vmov.f32	s0, s14
 8004fb2:	eef0 0a67 	vmov.f32	s1, s15
 8004fb6:	f007 fe93 	bl	800cce0 <trisolve_BC1XmAGq>
    K[0] = C[0];
 8004fba:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fc2:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8004fc6:	e9c1 2300 	strd	r2, r3, [r1]
    K[1] = C[1];
 8004fca:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004fce:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004fd2:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8004fd6:	e9c1 2302 	strd	r2, r3, [r1, #8]
    K[2] = C[2];
 8004fda:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004fde:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004fe2:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8004fe6:	e9c1 2304 	strd	r2, r3, [r1, #16]
    trisolve_BC1XmAGq(temp, K);
 8004fea:	463b      	mov	r3, r7
 8004fec:	ed93 7b00 	vldr	d7, [r3]
 8004ff0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	eeb0 0a47 	vmov.f32	s0, s14
 8004ffa:	eef0 0a67 	vmov.f32	s1, s15
 8004ffe:	f007 fe6f 	bl	800cce0 <trisolve_BC1XmAGq>
    tempY[0] = K[0] * temp;
 8005002:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005006:	e9d3 0100 	ldrd	r0, r1, [r3]
 800500a:	463b      	mov	r3, r7
 800500c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005010:	f7fb fae4 	bl	80005dc <__aeabi_dmul>
 8005014:	4602      	mov	r2, r0
 8005016:	460b      	mov	r3, r1
 8005018:	f107 0110 	add.w	r1, r7, #16
 800501c:	e9c1 2300 	strd	r2, r3, [r1]
    for (iAcol = 0; iAcol < 2; iAcol++) {
 8005020:	2300      	movs	r3, #0
 8005022:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8005026:	e011      	b.n	800504c <CSE_step+0x1cc>
      R[iAcol + 1] = 0.0;
 8005028:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 800502c:	3301      	adds	r3, #1
 800502e:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8005032:	00db      	lsls	r3, r3, #3
 8005034:	18d1      	adds	r1, r2, r3
 8005036:	f04f 0200 	mov.w	r2, #0
 800503a:	f04f 0300 	mov.w	r3, #0
 800503e:	e9c1 2300 	strd	r2, r3, [r1]
    for (iAcol = 0; iAcol < 2; iAcol++) {
 8005042:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005046:	3301      	adds	r3, #1
 8005048:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 800504c:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005050:	2b01      	cmp	r3, #1
 8005052:	dde9      	ble.n	8005028 <CSE_step+0x1a8>
    }

    tempY[1] = K[1] * temp;
 8005054:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005058:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800505c:	463b      	mov	r3, r7
 800505e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005062:	f7fb fabb 	bl	80005dc <__aeabi_dmul>
 8005066:	4602      	mov	r2, r0
 8005068:	460b      	mov	r3, r1
 800506a:	f107 0110 	add.w	r1, r7, #16
 800506e:	e9c1 2302 	strd	r2, r3, [r1, #8]
    R[5] = 0.0;
 8005072:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 8005076:	f04f 0200 	mov.w	r2, #0
 800507a:	f04f 0300 	mov.w	r3, #0
 800507e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    tempY[2] = K[2] * temp;
 8005082:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005086:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800508a:	463b      	mov	r3, r7
 800508c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005090:	f7fb faa4 	bl	80005dc <__aeabi_dmul>
 8005094:	4602      	mov	r2, r0
 8005096:	460b      	mov	r3, r1
 8005098:	f107 0110 	add.w	r1, r7, #16
 800509c:	e9c1 2304 	strd	r2, r3, [r1, #16]
    errorCondition = (R[0] == 0.0);
 80050a0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80050a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80050a8:	2301      	movs	r3, #1
 80050aa:	461e      	mov	r6, r3
 80050ac:	f04f 0200 	mov.w	r2, #0
 80050b0:	f04f 0300 	mov.w	r3, #0
 80050b4:	f7fb fcfa 	bl	8000aac <__aeabi_dcmpeq>
 80050b8:	4603      	mov	r3, r0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d101      	bne.n	80050c2 <CSE_step+0x242>
 80050be:	2300      	movs	r3, #0
 80050c0:	461e      	mov	r6, r3
 80050c2:	b2f3      	uxtb	r3, r6
 80050c4:	f887 32df 	strb.w	r3, [r7, #735]	; 0x2df
    if (!errorCondition) {
 80050c8:	f897 32df 	ldrb.w	r3, [r7, #735]	; 0x2df
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d113      	bne.n	80050f8 <CSE_step+0x278>
      errorCondition = (R[4] == 0.0);
 80050d0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80050d4:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80050d8:	2301      	movs	r3, #1
 80050da:	461e      	mov	r6, r3
 80050dc:	f04f 0200 	mov.w	r2, #0
 80050e0:	f04f 0300 	mov.w	r3, #0
 80050e4:	f7fb fce2 	bl	8000aac <__aeabi_dcmpeq>
 80050e8:	4603      	mov	r3, r0
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d101      	bne.n	80050f2 <CSE_step+0x272>
 80050ee:	2300      	movs	r3, #0
 80050f0:	461e      	mov	r6, r3
 80050f2:	b2f3      	uxtb	r3, r6
 80050f4:	f887 32df 	strb.w	r3, [r7, #735]	; 0x2df
    }

    if (!errorCondition) {
 80050f8:	f897 32df 	ldrb.w	r3, [r7, #735]	; 0x2df
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d113      	bne.n	8005128 <CSE_step+0x2a8>
      errorCondition = (R[8] == 0.0);
 8005100:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005104:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8005108:	2301      	movs	r3, #1
 800510a:	461e      	mov	r6, r3
 800510c:	f04f 0200 	mov.w	r2, #0
 8005110:	f04f 0300 	mov.w	r3, #0
 8005114:	f7fb fcca 	bl	8000aac <__aeabi_dcmpeq>
 8005118:	4603      	mov	r3, r0
 800511a:	2b00      	cmp	r3, #0
 800511c:	d101      	bne.n	8005122 <CSE_step+0x2a2>
 800511e:	2300      	movs	r3, #0
 8005120:	461e      	mov	r6, r3
 8005122:	b2f3      	uxtb	r3, r6
 8005124:	f887 32df 	strb.w	r3, [r7, #735]	; 0x2df
    }

    guard1 = false;
 8005128:	2300      	movs	r3, #0
 800512a:	f887 32de 	strb.w	r3, [r7, #734]	; 0x2de
    if (errorCondition) {
 800512e:	f897 32df 	ldrb.w	r3, [r7, #735]	; 0x2df
 8005132:	2b00      	cmp	r3, #0
 8005134:	d018      	beq.n	8005168 <CSE_step+0x2e8>
      guard1 = true;
 8005136:	2301      	movs	r3, #1
 8005138:	f887 32de 	strb.w	r3, [r7, #734]	; 0x2de
 800513c:	e395      	b.n	800586a <CSE_step+0x9ea>
 800513e:	bf00      	nop
	...
 800514c:	40000000 	.word	0x40000000
 8005150:	d2f1a9fc 	.word	0xd2f1a9fc
 8005154:	3f50624d 	.word	0x3f50624d
 8005158:	20001000 	.word	0x20001000
 800515c:	2001d9f0 	.word	0x2001d9f0
 8005160:	2001d9a8 	.word	0x2001d9a8
 8005164:	2001d998 	.word	0x2001d998
    } else {
      real_T absxk;
      real_T scale;
      real_T t;
      C[2] = tempY[2];
 8005168:	f107 0310 	add.w	r3, r7, #16
 800516c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8005170:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8005174:	e9c1 2304 	strd	r2, r3, [r1, #16]
      C[0] = tempY[0] / R[0];
 8005178:	f107 0310 	add.w	r3, r7, #16
 800517c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005180:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005188:	f7fb fb52 	bl	8000830 <__aeabi_ddiv>
 800518c:	4602      	mov	r2, r0
 800518e:	460b      	mov	r3, r1
 8005190:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8005194:	e9c1 2300 	strd	r2, r3, [r1]
      C[1] = (tempY[1] - C[0] * R[3]) / R[4];
 8005198:	f107 0310 	add.w	r3, r7, #16
 800519c:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 80051a0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80051a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80051a8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80051ac:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80051b0:	f7fb fa14 	bl	80005dc <__aeabi_dmul>
 80051b4:	4602      	mov	r2, r0
 80051b6:	460b      	mov	r3, r1
 80051b8:	4640      	mov	r0, r8
 80051ba:	4649      	mov	r1, r9
 80051bc:	f7fb f856 	bl	800026c <__aeabi_dsub>
 80051c0:	4602      	mov	r2, r0
 80051c2:	460b      	mov	r3, r1
 80051c4:	4610      	mov	r0, r2
 80051c6:	4619      	mov	r1, r3
 80051c8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80051cc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80051d0:	f7fb fb2e 	bl	8000830 <__aeabi_ddiv>
 80051d4:	4602      	mov	r2, r0
 80051d6:	460b      	mov	r3, r1
 80051d8:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80051dc:	e9c1 2302 	strd	r2, r3, [r1, #8]
      temp = tempY[2];
 80051e0:	f107 0310 	add.w	r3, r7, #16
 80051e4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80051e8:	4639      	mov	r1, r7
 80051ea:	e9c1 2300 	strd	r2, r3, [r1]
      for (iAcol_0 = 0; iAcol_0 < 2; iAcol_0++) {
 80051ee:	2300      	movs	r3, #0
 80051f0:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 80051f4:	e025      	b.n	8005242 <CSE_step+0x3c2>
        temp -= R[iAcol_0 + 6] * C[iAcol_0];
 80051f6:	463b      	mov	r3, r7
 80051f8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80051fc:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005200:	3306      	adds	r3, #6
 8005202:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8005206:	00db      	lsls	r3, r3, #3
 8005208:	4413      	add	r3, r2
 800520a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800520e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8005212:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005216:	00db      	lsls	r3, r3, #3
 8005218:	4413      	add	r3, r2
 800521a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800521e:	f7fb f9dd 	bl	80005dc <__aeabi_dmul>
 8005222:	4602      	mov	r2, r0
 8005224:	460b      	mov	r3, r1
 8005226:	4640      	mov	r0, r8
 8005228:	4649      	mov	r1, r9
 800522a:	f7fb f81f 	bl	800026c <__aeabi_dsub>
 800522e:	4602      	mov	r2, r0
 8005230:	460b      	mov	r3, r1
 8005232:	4639      	mov	r1, r7
 8005234:	e9c1 2300 	strd	r2, r3, [r1]
      for (iAcol_0 = 0; iAcol_0 < 2; iAcol_0++) {
 8005238:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800523c:	3301      	adds	r3, #1
 800523e:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8005242:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005246:	2b01      	cmp	r3, #1
 8005248:	ddd5      	ble.n	80051f6 <CSE_step+0x376>
      }

      C[2] = temp / R[8];
 800524a:	463b      	mov	r3, r7
 800524c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005250:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005254:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8005258:	f7fb faea 	bl	8000830 <__aeabi_ddiv>
 800525c:	4602      	mov	r2, r0
 800525e:	460b      	mov	r3, r1
 8005260:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8005264:	e9c1 2304 	strd	r2, r3, [r1, #16]
      scale = 3.3121686421112381E-170;
 8005268:	f04f 0200 	mov.w	r2, #0
 800526c:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 8005270:	e9c7 23b4 	strd	r2, r3, [r7, #720]	; 0x2d0
      absxk = fabs(C[0]);
 8005274:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800527c:	4611      	mov	r1, r2
 800527e:	f8c7 12c0 	str.w	r1, [r7, #704]	; 0x2c0
 8005282:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005286:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
      if (absxk > 3.3121686421112381E-170) {
 800528a:	f04f 0200 	mov.w	r2, #0
 800528e:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 8005292:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	; 0x2c0
 8005296:	f7fb fc31 	bl	8000afc <__aeabi_dcmpgt>
 800529a:	4603      	mov	r3, r0
 800529c:	2b00      	cmp	r3, #0
 800529e:	d00a      	beq.n	80052b6 <CSE_step+0x436>
        temp = 1.0;
 80052a0:	4639      	mov	r1, r7
 80052a2:	f04f 0200 	mov.w	r2, #0
 80052a6:	4bbf      	ldr	r3, [pc, #764]	; (80055a4 <CSE_step+0x724>)
 80052a8:	e9c1 2300 	strd	r2, r3, [r1]
        scale = absxk;
 80052ac:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	; 0x2c0
 80052b0:	e9c7 23b4 	strd	r2, r3, [r7, #720]	; 0x2d0
 80052b4:	e016      	b.n	80052e4 <CSE_step+0x464>
      } else {
        t = absxk / 3.3121686421112381E-170;
 80052b6:	f04f 0200 	mov.w	r2, #0
 80052ba:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 80052be:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	; 0x2c0
 80052c2:	f7fb fab5 	bl	8000830 <__aeabi_ddiv>
 80052c6:	4602      	mov	r2, r0
 80052c8:	460b      	mov	r3, r1
 80052ca:	e9c7 23ae 	strd	r2, r3, [r7, #696]	; 0x2b8
        temp = t * t;
 80052ce:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 80052d2:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	; 0x2b8
 80052d6:	f7fb f981 	bl	80005dc <__aeabi_dmul>
 80052da:	4602      	mov	r2, r0
 80052dc:	460b      	mov	r3, r1
 80052de:	4639      	mov	r1, r7
 80052e0:	e9c1 2300 	strd	r2, r3, [r1]
      }

      absxk = fabs(C[1]);
 80052e4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80052e8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80052ec:	4611      	mov	r1, r2
 80052ee:	f8c7 12c0 	str.w	r1, [r7, #704]	; 0x2c0
 80052f2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80052f6:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
      if (absxk > scale) {
 80052fa:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	; 0x2d0
 80052fe:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	; 0x2c0
 8005302:	f7fb fbfb 	bl	8000afc <__aeabi_dcmpgt>
 8005306:	4603      	mov	r3, r0
 8005308:	2b00      	cmp	r3, #0
 800530a:	d02b      	beq.n	8005364 <CSE_step+0x4e4>
        t = scale / absxk;
 800530c:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	; 0x2c0
 8005310:	e9d7 01b4 	ldrd	r0, r1, [r7, #720]	; 0x2d0
 8005314:	f7fb fa8c 	bl	8000830 <__aeabi_ddiv>
 8005318:	4602      	mov	r2, r0
 800531a:	460b      	mov	r3, r1
 800531c:	e9c7 23ae 	strd	r2, r3, [r7, #696]	; 0x2b8
        temp = temp * t * t + 1.0;
 8005320:	463b      	mov	r3, r7
 8005322:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005326:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 800532a:	f7fb f957 	bl	80005dc <__aeabi_dmul>
 800532e:	4602      	mov	r2, r0
 8005330:	460b      	mov	r3, r1
 8005332:	4610      	mov	r0, r2
 8005334:	4619      	mov	r1, r3
 8005336:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 800533a:	f7fb f94f 	bl	80005dc <__aeabi_dmul>
 800533e:	4602      	mov	r2, r0
 8005340:	460b      	mov	r3, r1
 8005342:	4610      	mov	r0, r2
 8005344:	4619      	mov	r1, r3
 8005346:	f04f 0200 	mov.w	r2, #0
 800534a:	4b96      	ldr	r3, [pc, #600]	; (80055a4 <CSE_step+0x724>)
 800534c:	f7fa ff90 	bl	8000270 <__adddf3>
 8005350:	4602      	mov	r2, r0
 8005352:	460b      	mov	r3, r1
 8005354:	4639      	mov	r1, r7
 8005356:	e9c1 2300 	strd	r2, r3, [r1]
        scale = absxk;
 800535a:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	; 0x2c0
 800535e:	e9c7 23b4 	strd	r2, r3, [r7, #720]	; 0x2d0
 8005362:	e01d      	b.n	80053a0 <CSE_step+0x520>
      } else {
        t = absxk / scale;
 8005364:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	; 0x2d0
 8005368:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	; 0x2c0
 800536c:	f7fb fa60 	bl	8000830 <__aeabi_ddiv>
 8005370:	4602      	mov	r2, r0
 8005372:	460b      	mov	r3, r1
 8005374:	e9c7 23ae 	strd	r2, r3, [r7, #696]	; 0x2b8
        temp += t * t;
 8005378:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 800537c:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	; 0x2b8
 8005380:	f7fb f92c 	bl	80005dc <__aeabi_dmul>
 8005384:	4602      	mov	r2, r0
 8005386:	460b      	mov	r3, r1
 8005388:	4610      	mov	r0, r2
 800538a:	4619      	mov	r1, r3
 800538c:	463b      	mov	r3, r7
 800538e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005392:	f7fa ff6d 	bl	8000270 <__adddf3>
 8005396:	4602      	mov	r2, r0
 8005398:	460b      	mov	r3, r1
 800539a:	4639      	mov	r1, r7
 800539c:	e9c1 2300 	strd	r2, r3, [r1]
      }

      absxk = fabs(C[2]);
 80053a0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80053a4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80053a8:	4611      	mov	r1, r2
 80053aa:	f8c7 12c0 	str.w	r1, [r7, #704]	; 0x2c0
 80053ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80053b2:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
      if (absxk > scale) {
 80053b6:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	; 0x2d0
 80053ba:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	; 0x2c0
 80053be:	f7fb fb9d 	bl	8000afc <__aeabi_dcmpgt>
 80053c2:	4603      	mov	r3, r0
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d02b      	beq.n	8005420 <CSE_step+0x5a0>
        t = scale / absxk;
 80053c8:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	; 0x2c0
 80053cc:	e9d7 01b4 	ldrd	r0, r1, [r7, #720]	; 0x2d0
 80053d0:	f7fb fa2e 	bl	8000830 <__aeabi_ddiv>
 80053d4:	4602      	mov	r2, r0
 80053d6:	460b      	mov	r3, r1
 80053d8:	e9c7 23ae 	strd	r2, r3, [r7, #696]	; 0x2b8
        temp = temp * t * t + 1.0;
 80053dc:	463b      	mov	r3, r7
 80053de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80053e2:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 80053e6:	f7fb f8f9 	bl	80005dc <__aeabi_dmul>
 80053ea:	4602      	mov	r2, r0
 80053ec:	460b      	mov	r3, r1
 80053ee:	4610      	mov	r0, r2
 80053f0:	4619      	mov	r1, r3
 80053f2:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 80053f6:	f7fb f8f1 	bl	80005dc <__aeabi_dmul>
 80053fa:	4602      	mov	r2, r0
 80053fc:	460b      	mov	r3, r1
 80053fe:	4610      	mov	r0, r2
 8005400:	4619      	mov	r1, r3
 8005402:	f04f 0200 	mov.w	r2, #0
 8005406:	4b67      	ldr	r3, [pc, #412]	; (80055a4 <CSE_step+0x724>)
 8005408:	f7fa ff32 	bl	8000270 <__adddf3>
 800540c:	4602      	mov	r2, r0
 800540e:	460b      	mov	r3, r1
 8005410:	4639      	mov	r1, r7
 8005412:	e9c1 2300 	strd	r2, r3, [r1]
        scale = absxk;
 8005416:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	; 0x2c0
 800541a:	e9c7 23b4 	strd	r2, r3, [r7, #720]	; 0x2d0
 800541e:	e01d      	b.n	800545c <CSE_step+0x5dc>
      } else {
        t = absxk / scale;
 8005420:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	; 0x2d0
 8005424:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	; 0x2c0
 8005428:	f7fb fa02 	bl	8000830 <__aeabi_ddiv>
 800542c:	4602      	mov	r2, r0
 800542e:	460b      	mov	r3, r1
 8005430:	e9c7 23ae 	strd	r2, r3, [r7, #696]	; 0x2b8
        temp += t * t;
 8005434:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 8005438:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	; 0x2b8
 800543c:	f7fb f8ce 	bl	80005dc <__aeabi_dmul>
 8005440:	4602      	mov	r2, r0
 8005442:	460b      	mov	r3, r1
 8005444:	4610      	mov	r0, r2
 8005446:	4619      	mov	r1, r3
 8005448:	463b      	mov	r3, r7
 800544a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800544e:	f7fa ff0f 	bl	8000270 <__adddf3>
 8005452:	4602      	mov	r2, r0
 8005454:	460b      	mov	r3, r1
 8005456:	4639      	mov	r1, r7
 8005458:	e9c1 2300 	strd	r2, r3, [r1]
      }

      temp = scale * sqrt(temp);
 800545c:	463b      	mov	r3, r7
 800545e:	ed93 7b00 	vldr	d7, [r3]
 8005462:	eeb0 0a47 	vmov.f32	s0, s14
 8005466:	eef0 0a67 	vmov.f32	s1, s15
 800546a:	f011 fd3d 	bl	8016ee8 <sqrt>
 800546e:	ec51 0b10 	vmov	r0, r1, d0
 8005472:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	; 0x2d0
 8005476:	f7fb f8b1 	bl	80005dc <__aeabi_dmul>
 800547a:	4602      	mov	r2, r0
 800547c:	460b      	mov	r3, r1
 800547e:	4639      	mov	r1, r7
 8005480:	e9c1 2300 	strd	r2, r3, [r1]
      if (temp >= 1.0) {
 8005484:	463b      	mov	r3, r7
 8005486:	e9d3 0100 	ldrd	r0, r1, [r3]
 800548a:	f04f 0200 	mov.w	r2, #0
 800548e:	4b45      	ldr	r3, [pc, #276]	; (80055a4 <CSE_step+0x724>)
 8005490:	f7fb fb2a 	bl	8000ae8 <__aeabi_dcmpge>
 8005494:	4603      	mov	r3, r0
 8005496:	2b00      	cmp	r3, #0
 8005498:	d003      	beq.n	80054a2 <CSE_step+0x622>
        guard1 = true;
 800549a:	2301      	movs	r3, #1
 800549c:	f887 32de 	strb.w	r3, [r7, #734]	; 0x2de
 80054a0:	e1e3      	b.n	800586a <CSE_step+0x9ea>
      } else {
        rotate_LZ7ctbe0(sqrt(1.0 - temp * temp), C[2], &tempY[2], &s[2], &temp);
 80054a2:	463b      	mov	r3, r7
 80054a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80054a8:	463b      	mov	r3, r7
 80054aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ae:	f7fb f895 	bl	80005dc <__aeabi_dmul>
 80054b2:	4602      	mov	r2, r0
 80054b4:	460b      	mov	r3, r1
 80054b6:	f04f 0000 	mov.w	r0, #0
 80054ba:	493a      	ldr	r1, [pc, #232]	; (80055a4 <CSE_step+0x724>)
 80054bc:	f7fa fed6 	bl	800026c <__aeabi_dsub>
 80054c0:	4602      	mov	r2, r0
 80054c2:	460b      	mov	r3, r1
 80054c4:	ec43 2b17 	vmov	d7, r2, r3
 80054c8:	eeb0 0a47 	vmov.f32	s0, s14
 80054cc:	eef0 0a67 	vmov.f32	s1, s15
 80054d0:	f011 fd0a 	bl	8016ee8 <sqrt>
 80054d4:	eeb0 6a40 	vmov.f32	s12, s0
 80054d8:	eef0 6a60 	vmov.f32	s13, s1
 80054dc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80054e0:	ed93 7b04 	vldr	d7, [r3, #16]
 80054e4:	463a      	mov	r2, r7
 80054e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80054ea:	f103 0110 	add.w	r1, r3, #16
 80054ee:	f107 0310 	add.w	r3, r7, #16
 80054f2:	3310      	adds	r3, #16
 80054f4:	4618      	mov	r0, r3
 80054f6:	eeb0 1a47 	vmov.f32	s2, s14
 80054fa:	eef0 1a67 	vmov.f32	s3, s15
 80054fe:	eeb0 0a46 	vmov.f32	s0, s12
 8005502:	eef0 0a66 	vmov.f32	s1, s13
 8005506:	f005 fb3d 	bl	800ab84 <rotate_LZ7ctbe0>
        C[2] = 0.0;
 800550a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800550e:	f04f 0200 	mov.w	r2, #0
 8005512:	f04f 0300 	mov.w	r3, #0
 8005516:	e9c1 2304 	strd	r2, r3, [r1, #16]
        rotate_LZ7ctbe0(temp, C[1], &tempY[1], &s[1], &temp);
 800551a:	463b      	mov	r3, r7
 800551c:	ed93 7b00 	vldr	d7, [r3]
 8005520:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005524:	ed93 6b02 	vldr	d6, [r3, #8]
 8005528:	463a      	mov	r2, r7
 800552a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800552e:	f103 0108 	add.w	r1, r3, #8
 8005532:	f107 0310 	add.w	r3, r7, #16
 8005536:	3308      	adds	r3, #8
 8005538:	4618      	mov	r0, r3
 800553a:	eeb0 1a46 	vmov.f32	s2, s12
 800553e:	eef0 1a66 	vmov.f32	s3, s13
 8005542:	eeb0 0a47 	vmov.f32	s0, s14
 8005546:	eef0 0a67 	vmov.f32	s1, s15
 800554a:	f005 fb1b 	bl	800ab84 <rotate_LZ7ctbe0>
        C[1] = 0.0;
 800554e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8005552:	f04f 0200 	mov.w	r2, #0
 8005556:	f04f 0300 	mov.w	r3, #0
 800555a:	e9c1 2302 	strd	r2, r3, [r1, #8]
        rotate_LZ7ctbe0(temp, C[0], &tempY[0], &s[0], &temp);
 800555e:	463b      	mov	r3, r7
 8005560:	ed93 7b00 	vldr	d7, [r3]
 8005564:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005568:	ed93 6b00 	vldr	d6, [r3]
 800556c:	463a      	mov	r2, r7
 800556e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8005572:	f107 0310 	add.w	r3, r7, #16
 8005576:	4618      	mov	r0, r3
 8005578:	eeb0 1a46 	vmov.f32	s2, s12
 800557c:	eef0 1a66 	vmov.f32	s3, s13
 8005580:	eeb0 0a47 	vmov.f32	s0, s14
 8005584:	eef0 0a67 	vmov.f32	s1, s15
 8005588:	f005 fafc 	bl	800ab84 <rotate_LZ7ctbe0>
        C[0] = 0.0;
 800558c:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8005590:	f04f 0200 	mov.w	r2, #0
 8005594:	f04f 0300 	mov.w	r3, #0
 8005598:	e9c1 2300 	strd	r2, r3, [r1]
        for (iAcol_0 = 0; iAcol_0 + 1 > 0; iAcol_0--) {
 800559c:	2300      	movs	r3, #0
 800559e:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 80055a2:	e06e      	b.n	8005682 <CSE_step+0x802>
 80055a4:	3ff00000 	.word	0x3ff00000
          temp = s[iAcol_0] * R[iAcol_0];
 80055a8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80055ac:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80055b0:	00db      	lsls	r3, r3, #3
 80055b2:	4413      	add	r3, r2
 80055b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80055b8:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80055bc:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80055c0:	00db      	lsls	r3, r3, #3
 80055c2:	4413      	add	r3, r2
 80055c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c8:	f7fb f808 	bl	80005dc <__aeabi_dmul>
 80055cc:	4602      	mov	r2, r0
 80055ce:	460b      	mov	r3, r1
 80055d0:	4639      	mov	r1, r7
 80055d2:	e9c1 2300 	strd	r2, r3, [r1]
          R[iAcol_0] = tempY[iAcol_0] * R[iAcol_0] - s[iAcol_0] * C[0];
 80055d6:	f107 0210 	add.w	r2, r7, #16
 80055da:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80055de:	00db      	lsls	r3, r3, #3
 80055e0:	4413      	add	r3, r2
 80055e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80055e6:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80055ea:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80055ee:	00db      	lsls	r3, r3, #3
 80055f0:	4413      	add	r3, r2
 80055f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f6:	f7fa fff1 	bl	80005dc <__aeabi_dmul>
 80055fa:	4602      	mov	r2, r0
 80055fc:	460b      	mov	r3, r1
 80055fe:	4690      	mov	r8, r2
 8005600:	4699      	mov	r9, r3
 8005602:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005606:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800560a:	00db      	lsls	r3, r3, #3
 800560c:	4413      	add	r3, r2
 800560e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005612:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800561a:	f7fa ffdf 	bl	80005dc <__aeabi_dmul>
 800561e:	4602      	mov	r2, r0
 8005620:	460b      	mov	r3, r1
 8005622:	4640      	mov	r0, r8
 8005624:	4649      	mov	r1, r9
 8005626:	f7fa fe21 	bl	800026c <__aeabi_dsub>
 800562a:	4602      	mov	r2, r0
 800562c:	460b      	mov	r3, r1
 800562e:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8005632:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8005636:	00c9      	lsls	r1, r1, #3
 8005638:	4401      	add	r1, r0
 800563a:	e9c1 2300 	strd	r2, r3, [r1]
          C[0] = tempY[iAcol_0] * C[0] + temp;
 800563e:	f107 0210 	add.w	r2, r7, #16
 8005642:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005646:	00db      	lsls	r3, r3, #3
 8005648:	4413      	add	r3, r2
 800564a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800564e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005656:	f7fa ffc1 	bl	80005dc <__aeabi_dmul>
 800565a:	4602      	mov	r2, r0
 800565c:	460b      	mov	r3, r1
 800565e:	4610      	mov	r0, r2
 8005660:	4619      	mov	r1, r3
 8005662:	463b      	mov	r3, r7
 8005664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005668:	f7fa fe02 	bl	8000270 <__adddf3>
 800566c:	4602      	mov	r2, r0
 800566e:	460b      	mov	r3, r1
 8005670:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8005674:	e9c1 2300 	strd	r2, r3, [r1]
        for (iAcol_0 = 0; iAcol_0 + 1 > 0; iAcol_0--) {
 8005678:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800567c:	3b01      	subs	r3, #1
 800567e:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8005682:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005686:	2b00      	cmp	r3, #0
 8005688:	da8e      	bge.n	80055a8 <CSE_step+0x728>
        }

        for (iAcol_0 = 1; iAcol_0 + 1 > 0; iAcol_0--) {
 800568a:	2301      	movs	r3, #1
 800568c:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8005690:	e06f      	b.n	8005772 <CSE_step+0x8f2>
          temp = R[iAcol_0 + 3];
 8005692:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005696:	3303      	adds	r3, #3
 8005698:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800569c:	00db      	lsls	r3, r3, #3
 800569e:	4413      	add	r3, r2
 80056a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056a4:	4639      	mov	r1, r7
 80056a6:	e9c1 2300 	strd	r2, r3, [r1]
          R[iAcol_0 + 3] = temp * tempY[iAcol_0] - s[iAcol_0] * C[1];
 80056aa:	f107 0210 	add.w	r2, r7, #16
 80056ae:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80056b2:	00db      	lsls	r3, r3, #3
 80056b4:	4413      	add	r3, r2
 80056b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80056ba:	463b      	mov	r3, r7
 80056bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056c0:	f7fa ff8c 	bl	80005dc <__aeabi_dmul>
 80056c4:	4602      	mov	r2, r0
 80056c6:	460b      	mov	r3, r1
 80056c8:	4690      	mov	r8, r2
 80056ca:	4699      	mov	r9, r3
 80056cc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80056d0:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80056d4:	00db      	lsls	r3, r3, #3
 80056d6:	4413      	add	r3, r2
 80056d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80056dc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80056e0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80056e4:	f7fa ff7a 	bl	80005dc <__aeabi_dmul>
 80056e8:	4602      	mov	r2, r0
 80056ea:	460b      	mov	r3, r1
 80056ec:	4610      	mov	r0, r2
 80056ee:	4619      	mov	r1, r3
 80056f0:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80056f4:	1cde      	adds	r6, r3, #3
 80056f6:	4602      	mov	r2, r0
 80056f8:	460b      	mov	r3, r1
 80056fa:	4640      	mov	r0, r8
 80056fc:	4649      	mov	r1, r9
 80056fe:	f7fa fdb5 	bl	800026c <__aeabi_dsub>
 8005702:	4602      	mov	r2, r0
 8005704:	460b      	mov	r3, r1
 8005706:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 800570a:	00f1      	lsls	r1, r6, #3
 800570c:	4401      	add	r1, r0
 800570e:	e9c1 2300 	strd	r2, r3, [r1]
          C[1] = tempY[iAcol_0] * C[1] + temp * s[iAcol_0];
 8005712:	f107 0210 	add.w	r2, r7, #16
 8005716:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800571a:	00db      	lsls	r3, r3, #3
 800571c:	4413      	add	r3, r2
 800571e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005722:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005726:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800572a:	f7fa ff57 	bl	80005dc <__aeabi_dmul>
 800572e:	4602      	mov	r2, r0
 8005730:	460b      	mov	r3, r1
 8005732:	4690      	mov	r8, r2
 8005734:	4699      	mov	r9, r3
 8005736:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800573a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800573e:	00db      	lsls	r3, r3, #3
 8005740:	4413      	add	r3, r2
 8005742:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005746:	463b      	mov	r3, r7
 8005748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800574c:	f7fa ff46 	bl	80005dc <__aeabi_dmul>
 8005750:	4602      	mov	r2, r0
 8005752:	460b      	mov	r3, r1
 8005754:	4640      	mov	r0, r8
 8005756:	4649      	mov	r1, r9
 8005758:	f7fa fd8a 	bl	8000270 <__adddf3>
 800575c:	4602      	mov	r2, r0
 800575e:	460b      	mov	r3, r1
 8005760:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8005764:	e9c1 2302 	strd	r2, r3, [r1, #8]
        for (iAcol_0 = 1; iAcol_0 + 1 > 0; iAcol_0--) {
 8005768:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800576c:	3b01      	subs	r3, #1
 800576e:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8005772:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005776:	2b00      	cmp	r3, #0
 8005778:	da8b      	bge.n	8005692 <CSE_step+0x812>
        }

        for (iAcol_0 = 2; iAcol_0 + 1 > 0; iAcol_0--) {
 800577a:	2302      	movs	r3, #2
 800577c:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8005780:	e06f      	b.n	8005862 <CSE_step+0x9e2>
          temp = R[iAcol_0 + 6];
 8005782:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005786:	3306      	adds	r3, #6
 8005788:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800578c:	00db      	lsls	r3, r3, #3
 800578e:	4413      	add	r3, r2
 8005790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005794:	4639      	mov	r1, r7
 8005796:	e9c1 2300 	strd	r2, r3, [r1]
          R[iAcol_0 + 6] = temp * tempY[iAcol_0] - s[iAcol_0] * C[2];
 800579a:	f107 0210 	add.w	r2, r7, #16
 800579e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80057a2:	00db      	lsls	r3, r3, #3
 80057a4:	4413      	add	r3, r2
 80057a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80057aa:	463b      	mov	r3, r7
 80057ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057b0:	f7fa ff14 	bl	80005dc <__aeabi_dmul>
 80057b4:	4602      	mov	r2, r0
 80057b6:	460b      	mov	r3, r1
 80057b8:	4690      	mov	r8, r2
 80057ba:	4699      	mov	r9, r3
 80057bc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80057c0:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80057c4:	00db      	lsls	r3, r3, #3
 80057c6:	4413      	add	r3, r2
 80057c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80057cc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80057d0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80057d4:	f7fa ff02 	bl	80005dc <__aeabi_dmul>
 80057d8:	4602      	mov	r2, r0
 80057da:	460b      	mov	r3, r1
 80057dc:	4610      	mov	r0, r2
 80057de:	4619      	mov	r1, r3
 80057e0:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80057e4:	1d9e      	adds	r6, r3, #6
 80057e6:	4602      	mov	r2, r0
 80057e8:	460b      	mov	r3, r1
 80057ea:	4640      	mov	r0, r8
 80057ec:	4649      	mov	r1, r9
 80057ee:	f7fa fd3d 	bl	800026c <__aeabi_dsub>
 80057f2:	4602      	mov	r2, r0
 80057f4:	460b      	mov	r3, r1
 80057f6:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 80057fa:	00f1      	lsls	r1, r6, #3
 80057fc:	4401      	add	r1, r0
 80057fe:	e9c1 2300 	strd	r2, r3, [r1]
          C[2] = tempY[iAcol_0] * C[2] + temp * s[iAcol_0];
 8005802:	f107 0210 	add.w	r2, r7, #16
 8005806:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800580a:	00db      	lsls	r3, r3, #3
 800580c:	4413      	add	r3, r2
 800580e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005812:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005816:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800581a:	f7fa fedf 	bl	80005dc <__aeabi_dmul>
 800581e:	4602      	mov	r2, r0
 8005820:	460b      	mov	r3, r1
 8005822:	4690      	mov	r8, r2
 8005824:	4699      	mov	r9, r3
 8005826:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800582a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800582e:	00db      	lsls	r3, r3, #3
 8005830:	4413      	add	r3, r2
 8005832:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005836:	463b      	mov	r3, r7
 8005838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800583c:	f7fa fece 	bl	80005dc <__aeabi_dmul>
 8005840:	4602      	mov	r2, r0
 8005842:	460b      	mov	r3, r1
 8005844:	4640      	mov	r0, r8
 8005846:	4649      	mov	r1, r9
 8005848:	f7fa fd12 	bl	8000270 <__adddf3>
 800584c:	4602      	mov	r2, r0
 800584e:	460b      	mov	r3, r1
 8005850:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8005854:	e9c1 2304 	strd	r2, r3, [r1, #16]
        for (iAcol_0 = 2; iAcol_0 + 1 > 0; iAcol_0--) {
 8005858:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800585c:	3b01      	subs	r3, #1
 800585e:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8005862:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005866:	2b00      	cmp	r3, #0
 8005868:	da8b      	bge.n	8005782 <CSE_step+0x902>
        }
      }
    }

    if (guard1) {
 800586a:	f897 32de 	ldrb.w	r3, [r7, #734]	; 0x2de
 800586e:	2b00      	cmp	r3, #0
 8005870:	f000 82e1 	beq.w	8005e36 <CSE_step+0xfb6>
      int32_T R_tmp;
      boolean_T exitg2;
      iAcol_0 = 0;
 8005874:	2300      	movs	r3, #0
 8005876:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
      for (iAcol = 0; iAcol < 3; iAcol++) {
 800587a:	2300      	movs	r3, #0
 800587c:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8005880:	e0d6      	b.n	8005a30 <CSE_step+0xbb0>
        coffset = 0;
 8005882:	2300      	movs	r3, #0
 8005884:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
        for (aoffset = 0; aoffset < 3; aoffset++) {
 8005888:	2300      	movs	r3, #0
 800588a:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 800588e:	e0c0      	b.n	8005a12 <CSE_step+0xb92>
          R_tmp = coffset + iAcol;
 8005890:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 8005894:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005898:	4413      	add	r3, r2
 800589a:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
          R_0[R_tmp] = 0.0;
 800589e:	f507 7280 	add.w	r2, r7, #256	; 0x100
 80058a2:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 80058a6:	00db      	lsls	r3, r3, #3
 80058a8:	18d1      	adds	r1, r2, r3
 80058aa:	f04f 0200 	mov.w	r2, #0
 80058ae:	f04f 0300 	mov.w	r3, #0
 80058b2:	e9c1 2300 	strd	r2, r3, [r1]
          R_0[R_tmp] += R[iAcol_0] * R[coffset];
 80058b6:	f507 7280 	add.w	r2, r7, #256	; 0x100
 80058ba:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 80058be:	00db      	lsls	r3, r3, #3
 80058c0:	4413      	add	r3, r2
 80058c2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80058c6:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80058ca:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80058ce:	00db      	lsls	r3, r3, #3
 80058d0:	4413      	add	r3, r2
 80058d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80058d6:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80058da:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 80058de:	00db      	lsls	r3, r3, #3
 80058e0:	4413      	add	r3, r2
 80058e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058e6:	f7fa fe79 	bl	80005dc <__aeabi_dmul>
 80058ea:	4602      	mov	r2, r0
 80058ec:	460b      	mov	r3, r1
 80058ee:	4640      	mov	r0, r8
 80058f0:	4649      	mov	r1, r9
 80058f2:	f7fa fcbd 	bl	8000270 <__adddf3>
 80058f6:	4602      	mov	r2, r0
 80058f8:	460b      	mov	r3, r1
 80058fa:	f507 7080 	add.w	r0, r7, #256	; 0x100
 80058fe:	f8d7 12b4 	ldr.w	r1, [r7, #692]	; 0x2b4
 8005902:	00c9      	lsls	r1, r1, #3
 8005904:	4401      	add	r1, r0
 8005906:	e9c1 2300 	strd	r2, r3, [r1]
          R_0[R_tmp] += R[iAcol_0 + 1] * R[coffset + 1];
 800590a:	f507 7280 	add.w	r2, r7, #256	; 0x100
 800590e:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8005912:	00db      	lsls	r3, r3, #3
 8005914:	4413      	add	r3, r2
 8005916:	e9d3 8900 	ldrd	r8, r9, [r3]
 800591a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800591e:	3301      	adds	r3, #1
 8005920:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8005924:	00db      	lsls	r3, r3, #3
 8005926:	4413      	add	r3, r2
 8005928:	e9d3 0100 	ldrd	r0, r1, [r3]
 800592c:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8005930:	3301      	adds	r3, #1
 8005932:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8005936:	00db      	lsls	r3, r3, #3
 8005938:	4413      	add	r3, r2
 800593a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800593e:	f7fa fe4d 	bl	80005dc <__aeabi_dmul>
 8005942:	4602      	mov	r2, r0
 8005944:	460b      	mov	r3, r1
 8005946:	4640      	mov	r0, r8
 8005948:	4649      	mov	r1, r9
 800594a:	f7fa fc91 	bl	8000270 <__adddf3>
 800594e:	4602      	mov	r2, r0
 8005950:	460b      	mov	r3, r1
 8005952:	f507 7080 	add.w	r0, r7, #256	; 0x100
 8005956:	f8d7 12b4 	ldr.w	r1, [r7, #692]	; 0x2b4
 800595a:	00c9      	lsls	r1, r1, #3
 800595c:	4401      	add	r1, r0
 800595e:	e9c1 2300 	strd	r2, r3, [r1]
          R_0[R_tmp] += R[iAcol_0 + 2] * R[coffset + 2];
 8005962:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8005966:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 800596a:	00db      	lsls	r3, r3, #3
 800596c:	4413      	add	r3, r2
 800596e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005972:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005976:	3302      	adds	r3, #2
 8005978:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800597c:	00db      	lsls	r3, r3, #3
 800597e:	4413      	add	r3, r2
 8005980:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005984:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8005988:	3302      	adds	r3, #2
 800598a:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800598e:	00db      	lsls	r3, r3, #3
 8005990:	4413      	add	r3, r2
 8005992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005996:	f7fa fe21 	bl	80005dc <__aeabi_dmul>
 800599a:	4602      	mov	r2, r0
 800599c:	460b      	mov	r3, r1
 800599e:	4640      	mov	r0, r8
 80059a0:	4649      	mov	r1, r9
 80059a2:	f7fa fc65 	bl	8000270 <__adddf3>
 80059a6:	4602      	mov	r2, r0
 80059a8:	460b      	mov	r3, r1
 80059aa:	f507 7080 	add.w	r0, r7, #256	; 0x100
 80059ae:	f8d7 12b4 	ldr.w	r1, [r7, #692]	; 0x2b4
 80059b2:	00c9      	lsls	r1, r1, #3
 80059b4:	4401      	add	r1, r0
 80059b6:	e9c1 2300 	strd	r2, r3, [r1]
          tempY_0[aoffset + iAcol_0] = tempY[aoffset] * tempY[iAcol];
 80059ba:	f107 0210 	add.w	r2, r7, #16
 80059be:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 80059c2:	00db      	lsls	r3, r3, #3
 80059c4:	4413      	add	r3, r2
 80059c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80059ca:	f107 0210 	add.w	r2, r7, #16
 80059ce:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80059d2:	00db      	lsls	r3, r3, #3
 80059d4:	4413      	add	r3, r2
 80059d6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80059da:	f8d7 62ec 	ldr.w	r6, [r7, #748]	; 0x2ec
 80059de:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80059e2:	4433      	add	r3, r6
 80059e4:	461e      	mov	r6, r3
 80059e6:	4642      	mov	r2, r8
 80059e8:	464b      	mov	r3, r9
 80059ea:	f7fa fdf7 	bl	80005dc <__aeabi_dmul>
 80059ee:	4602      	mov	r2, r0
 80059f0:	460b      	mov	r3, r1
 80059f2:	f107 0070 	add.w	r0, r7, #112	; 0x70
 80059f6:	00f1      	lsls	r1, r6, #3
 80059f8:	4401      	add	r1, r0
 80059fa:	e9c1 2300 	strd	r2, r3, [r1]
          coffset += 3;
 80059fe:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8005a02:	3303      	adds	r3, #3
 8005a04:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
        for (aoffset = 0; aoffset < 3; aoffset++) {
 8005a08:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8005a0c:	3301      	adds	r3, #1
 8005a0e:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 8005a12:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8005a16:	2b02      	cmp	r3, #2
 8005a18:	f77f af3a 	ble.w	8005890 <CSE_step+0xa10>
        }

        iAcol_0 += 3;
 8005a1c:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005a20:	3303      	adds	r3, #3
 8005a22:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
      for (iAcol = 0; iAcol < 3; iAcol++) {
 8005a26:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005a2a:	3301      	adds	r3, #1
 8005a2c:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8005a30:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005a34:	2b02      	cmp	r3, #2
 8005a36:	f77f af24 	ble.w	8005882 <CSE_step+0xa02>
      }

      errorCondition = true;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	f887 32df 	strb.w	r3, [r7, #735]	; 0x2df
      for (iAcol = 0; iAcol < 9; iAcol++) {
 8005a40:	2300      	movs	r3, #0
 8005a42:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8005a46:	e045      	b.n	8005ad4 <CSE_step+0xc54>
        temp = R_0[iAcol] - tempY_0[iAcol];
 8005a48:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8005a4c:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005a50:	00db      	lsls	r3, r3, #3
 8005a52:	4413      	add	r3, r2
 8005a54:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005a58:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8005a5c:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005a60:	00db      	lsls	r3, r3, #3
 8005a62:	4413      	add	r3, r2
 8005a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a68:	f7fa fc00 	bl	800026c <__aeabi_dsub>
 8005a6c:	4602      	mov	r2, r0
 8005a6e:	460b      	mov	r3, r1
 8005a70:	4639      	mov	r1, r7
 8005a72:	e9c1 2300 	strd	r2, r3, [r1]
        if (errorCondition && (rtIsInf(temp) || rtIsNaN(temp))) {
 8005a76:	f897 32df 	ldrb.w	r3, [r7, #735]	; 0x2df
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d01a      	beq.n	8005ab4 <CSE_step+0xc34>
 8005a7e:	463b      	mov	r3, r7
 8005a80:	ed93 7b00 	vldr	d7, [r3]
 8005a84:	eeb0 0a47 	vmov.f32	s0, s14
 8005a88:	eef0 0a67 	vmov.f32	s1, s15
 8005a8c:	f005 faee 	bl	800b06c <rtIsInf>
 8005a90:	4603      	mov	r3, r0
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d10b      	bne.n	8005aae <CSE_step+0xc2e>
 8005a96:	463b      	mov	r3, r7
 8005a98:	ed93 7b00 	vldr	d7, [r3]
 8005a9c:	eeb0 0a47 	vmov.f32	s0, s14
 8005aa0:	eef0 0a67 	vmov.f32	s1, s15
 8005aa4:	f005 fb06 	bl	800b0b4 <rtIsNaN>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d002      	beq.n	8005ab4 <CSE_step+0xc34>
          errorCondition = false;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	f887 32df 	strb.w	r3, [r7, #735]	; 0x2df
        }

        Ss[iAcol] = temp;
 8005ab4:	463b      	mov	r3, r7
 8005ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aba:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 8005abe:	f8d7 12e4 	ldr.w	r1, [r7, #740]	; 0x2e4
 8005ac2:	00c9      	lsls	r1, r1, #3
 8005ac4:	4401      	add	r1, r0
 8005ac6:	e9c1 2300 	strd	r2, r3, [r1]
      for (iAcol = 0; iAcol < 9; iAcol++) {
 8005aca:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005ace:	3301      	adds	r3, #1
 8005ad0:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8005ad4:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005ad8:	2b08      	cmp	r3, #8
 8005ada:	ddb5      	ble.n	8005a48 <CSE_step+0xbc8>
      }

      if (errorCondition) {
 8005adc:	f897 32df 	ldrb.w	r3, [r7, #735]	; 0x2df
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d00a      	beq.n	8005afa <CSE_step+0xc7a>
        svd_u3DvUgOe(Ss, tempY_0, s, R_0);
 8005ae4:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8005ae8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005aec:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8005af0:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 8005af4:	f005 fb30 	bl	800b158 <svd_u3DvUgOe>
 8005af8:	e02c      	b.n	8005b54 <CSE_step+0xcd4>
      } else {
        s[0] = (rtNaN);
 8005afa:	4bd2      	ldr	r3, [pc, #840]	; (8005e44 <CSE_step+0xfc4>)
 8005afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b00:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8005b04:	e9c1 2300 	strd	r2, r3, [r1]
        s[1] = (rtNaN);
 8005b08:	4bce      	ldr	r3, [pc, #824]	; (8005e44 <CSE_step+0xfc4>)
 8005b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b0e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8005b12:	e9c1 2302 	strd	r2, r3, [r1, #8]
        s[2] = (rtNaN);
 8005b16:	4bcb      	ldr	r3, [pc, #812]	; (8005e44 <CSE_step+0xfc4>)
 8005b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b1c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8005b20:	e9c1 2304 	strd	r2, r3, [r1, #16]
        for (iAcol_0 = 0; iAcol_0 < 9; iAcol_0++) {
 8005b24:	2300      	movs	r3, #0
 8005b26:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8005b2a:	e00f      	b.n	8005b4c <CSE_step+0xccc>
          R_0[iAcol_0] = (rtNaN);
 8005b2c:	4bc5      	ldr	r3, [pc, #788]	; (8005e44 <CSE_step+0xfc4>)
 8005b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b32:	f507 7080 	add.w	r0, r7, #256	; 0x100
 8005b36:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8005b3a:	00c9      	lsls	r1, r1, #3
 8005b3c:	4401      	add	r1, r0
 8005b3e:	e9c1 2300 	strd	r2, r3, [r1]
        for (iAcol_0 = 0; iAcol_0 < 9; iAcol_0++) {
 8005b42:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005b46:	3301      	adds	r3, #1
 8005b48:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8005b4c:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005b50:	2b08      	cmp	r3, #8
 8005b52:	ddeb      	ble.n	8005b2c <CSE_step+0xcac>
        }
      }

      memset(&Ss[0], 0, 9U * sizeof(real_T));
 8005b54:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8005b58:	2248      	movs	r2, #72	; 0x48
 8005b5a:	2100      	movs	r1, #0
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	f011 f80b 	bl	8016b78 <memset>
      Ss[0] = s[0];
 8005b62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b6a:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 8005b6e:	e9c1 2300 	strd	r2, r3, [r1]
      Ss[4] = s[1];
 8005b72:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005b76:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8005b7a:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 8005b7e:	e9c1 2308 	strd	r2, r3, [r1, #32]
      Ss[8] = s[2];
 8005b82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005b86:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8005b8a:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 8005b8e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
      for (iAcol_0 = 0; iAcol_0 < 9; iAcol_0++) {
 8005b92:	2300      	movs	r3, #0
 8005b94:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8005b98:	e01e      	b.n	8005bd8 <CSE_step+0xd58>
        Ss[iAcol_0] = sqrt(Ss[iAcol_0]);
 8005b9a:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8005b9e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005ba2:	00db      	lsls	r3, r3, #3
 8005ba4:	4413      	add	r3, r2
 8005ba6:	ed93 7b00 	vldr	d7, [r3]
 8005baa:	eeb0 0a47 	vmov.f32	s0, s14
 8005bae:	eef0 0a67 	vmov.f32	s1, s15
 8005bb2:	f011 f999 	bl	8016ee8 <sqrt>
 8005bb6:	eeb0 7a40 	vmov.f32	s14, s0
 8005bba:	eef0 7a60 	vmov.f32	s15, s1
 8005bbe:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8005bc2:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005bc6:	00db      	lsls	r3, r3, #3
 8005bc8:	4413      	add	r3, r2
 8005bca:	ed83 7b00 	vstr	d7, [r3]
      for (iAcol_0 = 0; iAcol_0 < 9; iAcol_0++) {
 8005bce:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005bd2:	3301      	adds	r3, #1
 8005bd4:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8005bd8:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005bdc:	2b08      	cmp	r3, #8
 8005bde:	dddc      	ble.n	8005b9a <CSE_step+0xd1a>
      }

      iAcol_0 = 0;
 8005be0:	2300      	movs	r3, #0
 8005be2:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
      for (iAcol = 0; iAcol < 3; iAcol++) {
 8005be6:	2300      	movs	r3, #0
 8005be8:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8005bec:	e0b4      	b.n	8005d58 <CSE_step+0xed8>
        coffset = 0;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
        for (aoffset = 0; aoffset < 3; aoffset++) {
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 8005bfa:	e09e      	b.n	8005d3a <CSE_step+0xeba>
          R_tmp = coffset + iAcol;
 8005bfc:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 8005c00:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005c04:	4413      	add	r3, r2
 8005c06:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
          R[R_tmp] = 0.0;
 8005c0a:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8005c0e:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8005c12:	00db      	lsls	r3, r3, #3
 8005c14:	18d1      	adds	r1, r2, r3
 8005c16:	f04f 0200 	mov.w	r2, #0
 8005c1a:	f04f 0300 	mov.w	r3, #0
 8005c1e:	e9c1 2300 	strd	r2, r3, [r1]
          R[R_tmp] += Ss[iAcol_0] * R_0[aoffset];
 8005c22:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8005c26:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8005c2a:	00db      	lsls	r3, r3, #3
 8005c2c:	4413      	add	r3, r2
 8005c2e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005c32:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8005c36:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005c3a:	00db      	lsls	r3, r3, #3
 8005c3c:	4413      	add	r3, r2
 8005c3e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005c42:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8005c46:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8005c4a:	00db      	lsls	r3, r3, #3
 8005c4c:	4413      	add	r3, r2
 8005c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c52:	f7fa fcc3 	bl	80005dc <__aeabi_dmul>
 8005c56:	4602      	mov	r2, r0
 8005c58:	460b      	mov	r3, r1
 8005c5a:	4640      	mov	r0, r8
 8005c5c:	4649      	mov	r1, r9
 8005c5e:	f7fa fb07 	bl	8000270 <__adddf3>
 8005c62:	4602      	mov	r2, r0
 8005c64:	460b      	mov	r3, r1
 8005c66:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8005c6a:	f8d7 12b4 	ldr.w	r1, [r7, #692]	; 0x2b4
 8005c6e:	00c9      	lsls	r1, r1, #3
 8005c70:	4401      	add	r1, r0
 8005c72:	e9c1 2300 	strd	r2, r3, [r1]
          R[R_tmp] += Ss[iAcol_0 + 1] * R_0[aoffset + 3];
 8005c76:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8005c7a:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8005c7e:	00db      	lsls	r3, r3, #3
 8005c80:	4413      	add	r3, r2
 8005c82:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005c86:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005c8a:	3301      	adds	r3, #1
 8005c8c:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8005c90:	00db      	lsls	r3, r3, #3
 8005c92:	4413      	add	r3, r2
 8005c94:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005c98:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8005c9c:	3303      	adds	r3, #3
 8005c9e:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8005ca2:	00db      	lsls	r3, r3, #3
 8005ca4:	4413      	add	r3, r2
 8005ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005caa:	f7fa fc97 	bl	80005dc <__aeabi_dmul>
 8005cae:	4602      	mov	r2, r0
 8005cb0:	460b      	mov	r3, r1
 8005cb2:	4640      	mov	r0, r8
 8005cb4:	4649      	mov	r1, r9
 8005cb6:	f7fa fadb 	bl	8000270 <__adddf3>
 8005cba:	4602      	mov	r2, r0
 8005cbc:	460b      	mov	r3, r1
 8005cbe:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8005cc2:	f8d7 12b4 	ldr.w	r1, [r7, #692]	; 0x2b4
 8005cc6:	00c9      	lsls	r1, r1, #3
 8005cc8:	4401      	add	r1, r0
 8005cca:	e9c1 2300 	strd	r2, r3, [r1]
          R[R_tmp] += Ss[iAcol_0 + 2] * R_0[aoffset + 6];
 8005cce:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8005cd2:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8005cd6:	00db      	lsls	r3, r3, #3
 8005cd8:	4413      	add	r3, r2
 8005cda:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005cde:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005ce2:	3302      	adds	r3, #2
 8005ce4:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8005ce8:	00db      	lsls	r3, r3, #3
 8005cea:	4413      	add	r3, r2
 8005cec:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005cf0:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8005cf4:	3306      	adds	r3, #6
 8005cf6:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8005cfa:	00db      	lsls	r3, r3, #3
 8005cfc:	4413      	add	r3, r2
 8005cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d02:	f7fa fc6b 	bl	80005dc <__aeabi_dmul>
 8005d06:	4602      	mov	r2, r0
 8005d08:	460b      	mov	r3, r1
 8005d0a:	4640      	mov	r0, r8
 8005d0c:	4649      	mov	r1, r9
 8005d0e:	f7fa faaf 	bl	8000270 <__adddf3>
 8005d12:	4602      	mov	r2, r0
 8005d14:	460b      	mov	r3, r1
 8005d16:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8005d1a:	f8d7 12b4 	ldr.w	r1, [r7, #692]	; 0x2b4
 8005d1e:	00c9      	lsls	r1, r1, #3
 8005d20:	4401      	add	r1, r0
 8005d22:	e9c1 2300 	strd	r2, r3, [r1]
          coffset += 3;
 8005d26:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8005d2a:	3303      	adds	r3, #3
 8005d2c:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
        for (aoffset = 0; aoffset < 3; aoffset++) {
 8005d30:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8005d34:	3301      	adds	r3, #1
 8005d36:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 8005d3a:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8005d3e:	2b02      	cmp	r3, #2
 8005d40:	f77f af5c 	ble.w	8005bfc <CSE_step+0xd7c>
        }

        iAcol_0 += 3;
 8005d44:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005d48:	3303      	adds	r3, #3
 8005d4a:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
      for (iAcol = 0; iAcol < 3; iAcol++) {
 8005d4e:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005d52:	3301      	adds	r3, #1
 8005d54:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8005d58:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005d5c:	2b02      	cmp	r3, #2
 8005d5e:	f77f af46 	ble.w	8005bee <CSE_step+0xd6e>
      }

      errorCondition = true;
 8005d62:	2301      	movs	r3, #1
 8005d64:	f887 32df 	strb.w	r3, [r7, #735]	; 0x2df
      iAcol = 0;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
      exitg2 = false;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	f887 32cf 	strb.w	r3, [r7, #719]	; 0x2cf
      while ((!exitg2) && (iAcol < 3)) {
 8005d74:	e042      	b.n	8005dfc <CSE_step+0xf7c>
        int32_T exitg1;
        iAcol_0 = iAcol + 1;
 8005d76:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005d7a:	3301      	adds	r3, #1
 8005d7c:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
        do {
          exitg1 = 0;
 8005d80:	2300      	movs	r3, #0
 8005d82:	f8c7 32c8 	str.w	r3, [r7, #712]	; 0x2c8
          if (iAcol_0 + 1 < 4) {
 8005d86:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005d8a:	2b02      	cmp	r3, #2
 8005d8c:	dc23      	bgt.n	8005dd6 <CSE_step+0xf56>
            if (!(R[3 * iAcol + iAcol_0] == 0.0)) {
 8005d8e:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8005d92:	4613      	mov	r3, r2
 8005d94:	005b      	lsls	r3, r3, #1
 8005d96:	441a      	add	r2, r3
 8005d98:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005d9c:	4413      	add	r3, r2
 8005d9e:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8005da2:	00db      	lsls	r3, r3, #3
 8005da4:	4413      	add	r3, r2
 8005da6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005daa:	f04f 0200 	mov.w	r2, #0
 8005dae:	f04f 0300 	mov.w	r3, #0
 8005db2:	f7fa fe7b 	bl	8000aac <__aeabi_dcmpeq>
 8005db6:	4603      	mov	r3, r0
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d106      	bne.n	8005dca <CSE_step+0xf4a>
              errorCondition = false;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	f887 32df 	strb.w	r3, [r7, #735]	; 0x2df
              exitg1 = 1;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	f8c7 32c8 	str.w	r3, [r7, #712]	; 0x2c8
 8005dc8:	e00d      	b.n	8005de6 <CSE_step+0xf66>
            } else {
              iAcol_0++;
 8005dca:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005dce:	3301      	adds	r3, #1
 8005dd0:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8005dd4:	e007      	b.n	8005de6 <CSE_step+0xf66>
            }
          } else {
            iAcol++;
 8005dd6:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005dda:	3301      	adds	r3, #1
 8005ddc:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
            exitg1 = 2;
 8005de0:	2302      	movs	r3, #2
 8005de2:	f8c7 32c8 	str.w	r3, [r7, #712]	; 0x2c8
          }
        } while (exitg1 == 0);
 8005de6:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d0c8      	beq.n	8005d80 <CSE_step+0xf00>

        if (exitg1 == 1) {
 8005dee:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	d102      	bne.n	8005dfc <CSE_step+0xf7c>
          exitg2 = true;
 8005df6:	2301      	movs	r3, #1
 8005df8:	f887 32cf 	strb.w	r3, [r7, #719]	; 0x2cf
      while ((!exitg2) && (iAcol < 3)) {
 8005dfc:	f897 32cf 	ldrb.w	r3, [r7, #719]	; 0x2cf
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d103      	bne.n	8005e0c <CSE_step+0xf8c>
 8005e04:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005e08:	2b02      	cmp	r3, #2
 8005e0a:	ddb4      	ble.n	8005d76 <CSE_step+0xef6>
        }
      }

      if (!errorCondition) {
 8005e0c:	f897 32df 	ldrb.w	r3, [r7, #735]	; 0x2df
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d110      	bne.n	8005e36 <CSE_step+0xfb6>
        memcpy(&R_0[0], &R[0], 9U * sizeof(real_T));
 8005e14:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 8005e18:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8005e1c:	2248      	movs	r2, #72	; 0x48
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f010 fe9c 	bl	8016b5c <memcpy>
        qr_5a2P8Gh6(R_0, tempY_0, R);
 8005e24:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8005e28:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8005e2c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8005e30:	4618      	mov	r0, r3
 8005e32:	f002 fdcf 	bl	80089d4 <qr_5a2P8Gh6>
      }
    }

    iAcol_0 = 0;
 8005e36:	2300      	movs	r3, #0
 8005e38:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
    for (iAcol = 0; iAcol < 3; iAcol++) {
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8005e42:	e062      	b.n	8005f0a <CSE_step+0x108a>
 8005e44:	2001da48 	.word	0x2001da48
      CSE_DW.P[iAcol_0] = R[iAcol];
 8005e48:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8005e4c:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005e50:	00db      	lsls	r3, r3, #3
 8005e52:	4413      	add	r3, r2
 8005e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e58:	48a5      	ldr	r0, [pc, #660]	; (80060f0 <CSE_step+0x1270>)
 8005e5a:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8005e5e:	00c9      	lsls	r1, r1, #3
 8005e60:	4401      	add	r1, r0
 8005e62:	e9c1 2300 	strd	r2, r3, [r1]
      CSE_DW.P[iAcol_0 + 1] = R[iAcol + 3];
 8005e66:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005e6a:	3303      	adds	r3, #3
 8005e6c:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8005e70:	1c51      	adds	r1, r2, #1
 8005e72:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8005e76:	00db      	lsls	r3, r3, #3
 8005e78:	4413      	add	r3, r2
 8005e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e7e:	489c      	ldr	r0, [pc, #624]	; (80060f0 <CSE_step+0x1270>)
 8005e80:	00c9      	lsls	r1, r1, #3
 8005e82:	4401      	add	r1, r0
 8005e84:	e9c1 2300 	strd	r2, r3, [r1]
      CSE_DW.P[iAcol_0 + 2] = R[iAcol + 6];
 8005e88:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005e8c:	3306      	adds	r3, #6
 8005e8e:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8005e92:	1c91      	adds	r1, r2, #2
 8005e94:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8005e98:	00db      	lsls	r3, r3, #3
 8005e9a:	4413      	add	r3, r2
 8005e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ea0:	4893      	ldr	r0, [pc, #588]	; (80060f0 <CSE_step+0x1270>)
 8005ea2:	00c9      	lsls	r1, r1, #3
 8005ea4:	4401      	add	r1, r0
 8005ea6:	e9c1 2300 	strd	r2, r3, [r1]
      CSE_DW.x[iAcol] += K[iAcol] * s_0;
 8005eaa:	4a91      	ldr	r2, [pc, #580]	; (80060f0 <CSE_step+0x1270>)
 8005eac:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005eb0:	3309      	adds	r3, #9
 8005eb2:	00db      	lsls	r3, r3, #3
 8005eb4:	4413      	add	r3, r2
 8005eb6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005eba:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8005ebe:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005ec2:	00db      	lsls	r3, r3, #3
 8005ec4:	4413      	add	r3, r2
 8005ec6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005eca:	f107 0308 	add.w	r3, r7, #8
 8005ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ed2:	f7fa fb83 	bl	80005dc <__aeabi_dmul>
 8005ed6:	4602      	mov	r2, r0
 8005ed8:	460b      	mov	r3, r1
 8005eda:	4640      	mov	r0, r8
 8005edc:	4649      	mov	r1, r9
 8005ede:	f7fa f9c7 	bl	8000270 <__adddf3>
 8005ee2:	4602      	mov	r2, r0
 8005ee4:	460b      	mov	r3, r1
 8005ee6:	4882      	ldr	r0, [pc, #520]	; (80060f0 <CSE_step+0x1270>)
 8005ee8:	f8d7 12e4 	ldr.w	r1, [r7, #740]	; 0x2e4
 8005eec:	3109      	adds	r1, #9
 8005eee:	00c9      	lsls	r1, r1, #3
 8005ef0:	4401      	add	r1, r0
 8005ef2:	e9c1 2300 	strd	r2, r3, [r1]
      iAcol_0 += 3;
 8005ef6:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005efa:	3303      	adds	r3, #3
 8005efc:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
    for (iAcol = 0; iAcol < 3; iAcol++) {
 8005f00:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005f04:	3301      	adds	r3, #1
 8005f06:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8005f0a:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005f0e:	2b02      	cmp	r3, #2
 8005f10:	dd9a      	ble.n	8005e48 <CSE_step+0xfc8>
    }
  }

  CSE_Y.soc = CSE_DW.x[1] / CSE_DW.x[2];
 8005f12:	4b77      	ldr	r3, [pc, #476]	; (80060f0 <CSE_step+0x1270>)
 8005f14:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8005f18:	4b75      	ldr	r3, [pc, #468]	; (80060f0 <CSE_step+0x1270>)
 8005f1a:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8005f1e:	f7fa fc87 	bl	8000830 <__aeabi_ddiv>
 8005f22:	4602      	mov	r2, r0
 8005f24:	460b      	mov	r3, r1
 8005f26:	4973      	ldr	r1, [pc, #460]	; (80060f4 <CSE_step+0x1274>)
 8005f28:	e9c1 2300 	strd	r2, r3, [r1]
  CSE_Y.C = CSE_DW.x[2];
 8005f2c:	4b70      	ldr	r3, [pc, #448]	; (80060f0 <CSE_step+0x1270>)
 8005f2e:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8005f32:	4970      	ldr	r1, [pc, #448]	; (80060f4 <CSE_step+0x1274>)
 8005f34:	e9c1 2302 	strd	r2, r3, [r1, #8]
  CSE_S_x(CSE_DW.x, tempY);
 8005f38:	f107 0310 	add.w	r3, r7, #16
 8005f3c:	4619      	mov	r1, r3
 8005f3e:	486e      	ldr	r0, [pc, #440]	; (80060f8 <CSE_step+0x1278>)
 8005f40:	f7fe fb28 	bl	8004594 <CSE_S_x>
  for (iAcol_0 = 0; iAcol_0 < 9; iAcol_0++) {
 8005f44:	2300      	movs	r3, #0
 8005f46:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8005f4a:	e034      	b.n	8005fb6 <CSE_step+0x1136>
    s_0 = 0.0017320508075688774 * CSE_DW.P[iAcol_0];
 8005f4c:	4a68      	ldr	r2, [pc, #416]	; (80060f0 <CSE_step+0x1270>)
 8005f4e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005f52:	00db      	lsls	r3, r3, #3
 8005f54:	4413      	add	r3, r2
 8005f56:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005f5a:	a363      	add	r3, pc, #396	; (adr r3, 80060e8 <CSE_step+0x1268>)
 8005f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f60:	f7fa fb3c 	bl	80005dc <__aeabi_dmul>
 8005f64:	4602      	mov	r2, r0
 8005f66:	460b      	mov	r3, r1
 8005f68:	f107 0108 	add.w	r1, r7, #8
 8005f6c:	e9c1 2300 	strd	r2, r3, [r1]
    X2state[iAcol_0] = s_0;
 8005f70:	f107 0308 	add.w	r3, r7, #8
 8005f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f78:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8005f7c:	00c9      	lsls	r1, r1, #3
 8005f7e:	f507 703c 	add.w	r0, r7, #752	; 0x2f0
 8005f82:	4401      	add	r1, r0
 8005f84:	39d0      	subs	r1, #208	; 0xd0
 8005f86:	e9c1 2300 	strd	r2, r3, [r1]
    X2state[iAcol_0 + 9] = -s_0;
 8005f8a:	f107 0308 	add.w	r3, r7, #8
 8005f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f92:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8005f96:	3109      	adds	r1, #9
 8005f98:	4614      	mov	r4, r2
 8005f9a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8005f9e:	00cb      	lsls	r3, r1, #3
 8005fa0:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
 8005fa4:	4413      	add	r3, r2
 8005fa6:	3bd0      	subs	r3, #208	; 0xd0
 8005fa8:	e9c3 4500 	strd	r4, r5, [r3]
  for (iAcol_0 = 0; iAcol_0 < 9; iAcol_0++) {
 8005fac:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005fb0:	3301      	adds	r3, #1
 8005fb2:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8005fb6:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005fba:	2b08      	cmp	r3, #8
 8005fbc:	ddc6      	ble.n	8005f4c <CSE_step+0x10cc>
  }

  iAcol_0 = 0;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
  for (iAcol = 0; iAcol < 6; iAcol++) {
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8005fca:	e058      	b.n	800607e <CSE_step+0x11fe>
    X2state[iAcol_0] += CSE_DW.x[0];
 8005fcc:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005fd0:	00db      	lsls	r3, r3, #3
 8005fd2:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
 8005fd6:	4413      	add	r3, r2
 8005fd8:	3bd0      	subs	r3, #208	; 0xd0
 8005fda:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005fde:	4b44      	ldr	r3, [pc, #272]	; (80060f0 <CSE_step+0x1270>)
 8005fe0:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8005fe4:	f7fa f944 	bl	8000270 <__adddf3>
 8005fe8:	4602      	mov	r2, r0
 8005fea:	460b      	mov	r3, r1
 8005fec:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8005ff0:	00c9      	lsls	r1, r1, #3
 8005ff2:	f507 703c 	add.w	r0, r7, #752	; 0x2f0
 8005ff6:	4401      	add	r1, r0
 8005ff8:	39d0      	subs	r1, #208	; 0xd0
 8005ffa:	e9c1 2300 	strd	r2, r3, [r1]
    X2state[iAcol_0 + 1] += CSE_DW.x[1];
 8005ffe:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006002:	3301      	adds	r3, #1
 8006004:	00db      	lsls	r3, r3, #3
 8006006:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
 800600a:	4413      	add	r3, r2
 800600c:	3bd0      	subs	r3, #208	; 0xd0
 800600e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006012:	4b37      	ldr	r3, [pc, #220]	; (80060f0 <CSE_step+0x1270>)
 8006014:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8006018:	f8d7 42e0 	ldr.w	r4, [r7, #736]	; 0x2e0
 800601c:	3401      	adds	r4, #1
 800601e:	f7fa f927 	bl	8000270 <__adddf3>
 8006022:	4602      	mov	r2, r0
 8006024:	460b      	mov	r3, r1
 8006026:	00e1      	lsls	r1, r4, #3
 8006028:	f507 703c 	add.w	r0, r7, #752	; 0x2f0
 800602c:	4401      	add	r1, r0
 800602e:	39d0      	subs	r1, #208	; 0xd0
 8006030:	e9c1 2300 	strd	r2, r3, [r1]
    X2state[iAcol_0 + 2] += CSE_DW.x[2];
 8006034:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006038:	3302      	adds	r3, #2
 800603a:	00db      	lsls	r3, r3, #3
 800603c:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
 8006040:	4413      	add	r3, r2
 8006042:	3bd0      	subs	r3, #208	; 0xd0
 8006044:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006048:	4b29      	ldr	r3, [pc, #164]	; (80060f0 <CSE_step+0x1270>)
 800604a:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 800604e:	f8d7 42e0 	ldr.w	r4, [r7, #736]	; 0x2e0
 8006052:	3402      	adds	r4, #2
 8006054:	f7fa f90c 	bl	8000270 <__adddf3>
 8006058:	4602      	mov	r2, r0
 800605a:	460b      	mov	r3, r1
 800605c:	00e1      	lsls	r1, r4, #3
 800605e:	f507 703c 	add.w	r0, r7, #752	; 0x2f0
 8006062:	4401      	add	r1, r0
 8006064:	39d0      	subs	r1, #208	; 0xd0
 8006066:	e9c1 2300 	strd	r2, r3, [r1]
    iAcol_0 += 3;
 800606a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800606e:	3303      	adds	r3, #3
 8006070:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
  for (iAcol = 0; iAcol < 6; iAcol++) {
 8006074:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006078:	3301      	adds	r3, #1
 800607a:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 800607e:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006082:	2b05      	cmp	r3, #5
 8006084:	dda2      	ble.n	8005fcc <CSE_step+0x114c>
  }

  iAcol_0 = 0;
 8006086:	2300      	movs	r3, #0
 8006088:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
  for (iAcol = 0; iAcol < 6; iAcol++) {
 800608c:	2300      	movs	r3, #0
 800608e:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8006092:	e018      	b.n	80060c6 <CSE_step+0x1246>
    CSE_S_x(&X2state[iAcol_0], &Y2[iAcol_0]);
 8006094:	f507 7208 	add.w	r2, r7, #544	; 0x220
 8006098:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800609c:	00db      	lsls	r3, r3, #3
 800609e:	18d0      	adds	r0, r2, r3
 80060a0:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 80060a4:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80060a8:	00db      	lsls	r3, r3, #3
 80060aa:	4413      	add	r3, r2
 80060ac:	4619      	mov	r1, r3
 80060ae:	f7fe fa71 	bl	8004594 <CSE_S_x>
    iAcol_0 += 3;
 80060b2:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80060b6:	3303      	adds	r3, #3
 80060b8:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
  for (iAcol = 0; iAcol < 6; iAcol++) {
 80060bc:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80060c0:	3301      	adds	r3, #1
 80060c2:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 80060c6:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80060ca:	2b05      	cmp	r3, #5
 80060cc:	dde2      	ble.n	8006094 <CSE_step+0x1214>
  }

  CSE_S_x(CSE_DW.x, tempY);
 80060ce:	f107 0310 	add.w	r3, r7, #16
 80060d2:	4619      	mov	r1, r3
 80060d4:	4808      	ldr	r0, [pc, #32]	; (80060f8 <CSE_step+0x1278>)
 80060d6:	f7fe fa5d 	bl	8004594 <CSE_S_x>
  for (iAcol_0 = 0; iAcol_0 < 3; iAcol_0++) {
 80060da:	2300      	movs	r3, #0
 80060dc:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 80060e0:	e021      	b.n	8006126 <CSE_step+0x12a6>
 80060e2:	bf00      	nop
 80060e4:	f3af 8000 	nop.w
 80060e8:	64b487da 	.word	0x64b487da
 80060ec:	3f5c60bf 	.word	0x3f5c60bf
 80060f0:	2001d9a8 	.word	0x2001d9a8
 80060f4:	2001d988 	.word	0x2001d988
 80060f8:	2001d9f0 	.word	0x2001d9f0
    C[iAcol_0] = CSE_DW.x[iAcol_0];
 80060fc:	4ab8      	ldr	r2, [pc, #736]	; (80063e0 <CSE_step+0x1560>)
 80060fe:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006102:	3309      	adds	r3, #9
 8006104:	00db      	lsls	r3, r3, #3
 8006106:	4413      	add	r3, r2
 8006108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800610c:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8006110:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8006114:	00c9      	lsls	r1, r1, #3
 8006116:	4401      	add	r1, r0
 8006118:	e9c1 2300 	strd	r2, r3, [r1]
  for (iAcol_0 = 0; iAcol_0 < 3; iAcol_0++) {
 800611c:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006120:	3301      	adds	r3, #1
 8006122:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8006126:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800612a:	2b02      	cmp	r3, #2
 800612c:	dde6      	ble.n	80060fc <CSE_step+0x127c>
  }

  UTMeanCovSqrt_C2vgLQ4W(Wmean, Wcov, -999999.0, tempY, Y2, C, X2state, CSE_DW.x,
 800612e:	f507 71c8 	add.w	r1, r7, #400	; 0x190
 8006132:	f107 0210 	add.w	r2, r7, #16
 8006136:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800613a:	9304      	str	r3, [sp, #16]
 800613c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8006140:	9303      	str	r3, [sp, #12]
 8006142:	4ba8      	ldr	r3, [pc, #672]	; (80063e4 <CSE_step+0x1564>)
 8006144:	9302      	str	r3, [sp, #8]
 8006146:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800614a:	9301      	str	r3, [sp, #4]
 800614c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006150:	9300      	str	r3, [sp, #0]
 8006152:	460b      	mov	r3, r1
 8006154:	ed9f 0ba0 	vldr	d0, [pc, #640]	; 80063d8 <CSE_step+0x1558>
 8006158:	49a3      	ldr	r1, [pc, #652]	; (80063e8 <CSE_step+0x1568>)
 800615a:	48a4      	ldr	r0, [pc, #656]	; (80063ec <CSE_step+0x156c>)
 800615c:	f000 fa0a 	bl	8006574 <UTMeanCovSqrt_C2vgLQ4W>
    Ss, R);
  memset(&R[0], 0, 9U * sizeof(real_T));
 8006160:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006164:	2248      	movs	r2, #72	; 0x48
 8006166:	2100      	movs	r1, #0
 8006168:	4618      	mov	r0, r3
 800616a:	f010 fd05 	bl	8016b78 <memset>
  R[0] = 1.0;
 800616e:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 8006172:	f04f 0200 	mov.w	r2, #0
 8006176:	4b9e      	ldr	r3, [pc, #632]	; (80063f0 <CSE_step+0x1570>)
 8006178:	e9c1 2300 	strd	r2, r3, [r1]
  R[4] = 1.0;
 800617c:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 8006180:	f04f 0200 	mov.w	r2, #0
 8006184:	4b9a      	ldr	r3, [pc, #616]	; (80063f0 <CSE_step+0x1570>)
 8006186:	e9c1 2308 	strd	r2, r3, [r1, #32]
  R[8] = 1.0;
 800618a:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 800618e:	f04f 0200 	mov.w	r2, #0
 8006192:	4b97      	ldr	r3, [pc, #604]	; (80063f0 <CSE_step+0x1570>)
 8006194:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
  for (iAcol_0 = 0; iAcol_0 < 3; iAcol_0++) {
 8006198:	2300      	movs	r3, #0
 800619a:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 800619e:	e07e      	b.n	800629e <CSE_step+0x141e>
    coffset = iAcol_0 * 3;
 80061a0:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 80061a4:	4613      	mov	r3, r2
 80061a6:	005b      	lsls	r3, r3, #1
 80061a8:	4413      	add	r3, r2
 80061aa:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
    for (iAcol = 0; iAcol < 3; iAcol++) {
 80061ae:	2300      	movs	r3, #0
 80061b0:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 80061b4:	e06a      	b.n	800628c <CSE_step+0x140c>
      aoffset = iAcol * 3;
 80061b6:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 80061ba:	4613      	mov	r3, r2
 80061bc:	005b      	lsls	r3, r3, #1
 80061be:	4413      	add	r3, r2
 80061c0:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
      R_0[coffset + iAcol] = (Ss[aoffset + 1] * R[iAcol_0 + 3] + Ss[aoffset] *
 80061c4:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 80061c8:	3301      	adds	r3, #1
 80061ca:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 80061ce:	00db      	lsls	r3, r3, #3
 80061d0:	4413      	add	r3, r2
 80061d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80061d6:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80061da:	3303      	adds	r3, #3
 80061dc:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80061e0:	00db      	lsls	r3, r3, #3
 80061e2:	4413      	add	r3, r2
 80061e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061e8:	f7fa f9f8 	bl	80005dc <__aeabi_dmul>
 80061ec:	4602      	mov	r2, r0
 80061ee:	460b      	mov	r3, r1
 80061f0:	4614      	mov	r4, r2
 80061f2:	461d      	mov	r5, r3
 80061f4:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 80061f8:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 80061fc:	00db      	lsls	r3, r3, #3
 80061fe:	4413      	add	r3, r2
 8006200:	e9d3 0100 	ldrd	r0, r1, [r3]
        R[iAcol_0]) + Ss[aoffset + 2] * R[iAcol_0 + 6];
 8006204:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8006208:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800620c:	00db      	lsls	r3, r3, #3
 800620e:	4413      	add	r3, r2
 8006210:	e9d3 2300 	ldrd	r2, r3, [r3]
      R_0[coffset + iAcol] = (Ss[aoffset + 1] * R[iAcol_0 + 3] + Ss[aoffset] *
 8006214:	f7fa f9e2 	bl	80005dc <__aeabi_dmul>
 8006218:	4602      	mov	r2, r0
 800621a:	460b      	mov	r3, r1
 800621c:	4620      	mov	r0, r4
 800621e:	4629      	mov	r1, r5
 8006220:	f7fa f826 	bl	8000270 <__adddf3>
 8006224:	4602      	mov	r2, r0
 8006226:	460b      	mov	r3, r1
 8006228:	4690      	mov	r8, r2
 800622a:	4699      	mov	r9, r3
        R[iAcol_0]) + Ss[aoffset + 2] * R[iAcol_0 + 6];
 800622c:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8006230:	3302      	adds	r3, #2
 8006232:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8006236:	00db      	lsls	r3, r3, #3
 8006238:	4413      	add	r3, r2
 800623a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800623e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006242:	3306      	adds	r3, #6
 8006244:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8006248:	00db      	lsls	r3, r3, #3
 800624a:	4413      	add	r3, r2
 800624c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006250:	f7fa f9c4 	bl	80005dc <__aeabi_dmul>
 8006254:	4602      	mov	r2, r0
 8006256:	460b      	mov	r3, r1
 8006258:	4610      	mov	r0, r2
 800625a:	4619      	mov	r1, r3
      R_0[coffset + iAcol] = (Ss[aoffset + 1] * R[iAcol_0 + 3] + Ss[aoffset] *
 800625c:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 8006260:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006264:	18d4      	adds	r4, r2, r3
        R[iAcol_0]) + Ss[aoffset + 2] * R[iAcol_0 + 6];
 8006266:	4602      	mov	r2, r0
 8006268:	460b      	mov	r3, r1
 800626a:	4640      	mov	r0, r8
 800626c:	4649      	mov	r1, r9
 800626e:	f7f9 ffff 	bl	8000270 <__adddf3>
 8006272:	4602      	mov	r2, r0
 8006274:	460b      	mov	r3, r1
      R_0[coffset + iAcol] = (Ss[aoffset + 1] * R[iAcol_0 + 3] + Ss[aoffset] *
 8006276:	f507 7080 	add.w	r0, r7, #256	; 0x100
 800627a:	00e1      	lsls	r1, r4, #3
 800627c:	4401      	add	r1, r0
 800627e:	e9c1 2300 	strd	r2, r3, [r1]
    for (iAcol = 0; iAcol < 3; iAcol++) {
 8006282:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006286:	3301      	adds	r3, #1
 8006288:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 800628c:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006290:	2b02      	cmp	r3, #2
 8006292:	dd90      	ble.n	80061b6 <CSE_step+0x1336>
  for (iAcol_0 = 0; iAcol_0 < 3; iAcol_0++) {
 8006294:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006298:	3301      	adds	r3, #1
 800629a:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 800629e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80062a2:	2b02      	cmp	r3, #2
 80062a4:	f77f af7c 	ble.w	80061a0 <CSE_step+0x1320>
    }
  }

  iAcol_0 = 0;
 80062a8:	2300      	movs	r3, #0
 80062aa:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
  iAcol = 0;
 80062ae:	2300      	movs	r3, #0
 80062b0:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
  for (coffset = 0; coffset < 3; coffset++) {
 80062b4:	2300      	movs	r3, #0
 80062b6:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
 80062ba:	e077      	b.n	80063ac <CSE_step+0x152c>
    Y2[iAcol_0] = R_0[iAcol];
 80062bc:	f507 7280 	add.w	r2, r7, #256	; 0x100
 80062c0:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80062c4:	00db      	lsls	r3, r3, #3
 80062c6:	4413      	add	r3, r2
 80062c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062cc:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 80062d0:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 80062d4:	00c9      	lsls	r1, r1, #3
 80062d6:	4401      	add	r1, r0
 80062d8:	e9c1 2300 	strd	r2, r3, [r1]
    Y2[iAcol_0 + 3] = CSE_P.Q_Value[coffset];
 80062dc:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80062e0:	1cd9      	adds	r1, r3, #3
 80062e2:	4a44      	ldr	r2, [pc, #272]	; (80063f4 <CSE_step+0x1574>)
 80062e4:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 80062e8:	3344      	adds	r3, #68	; 0x44
 80062ea:	00db      	lsls	r3, r3, #3
 80062ec:	4413      	add	r3, r2
 80062ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062f2:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 80062f6:	00c9      	lsls	r1, r1, #3
 80062f8:	4401      	add	r1, r0
 80062fa:	e9c1 2300 	strd	r2, r3, [r1]
    Y2[iAcol_0 + 1] = R_0[iAcol + 1];
 80062fe:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006302:	3301      	adds	r3, #1
 8006304:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8006308:	1c51      	adds	r1, r2, #1
 800630a:	f507 7280 	add.w	r2, r7, #256	; 0x100
 800630e:	00db      	lsls	r3, r3, #3
 8006310:	4413      	add	r3, r2
 8006312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006316:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 800631a:	00c9      	lsls	r1, r1, #3
 800631c:	4401      	add	r1, r0
 800631e:	e9c1 2300 	strd	r2, r3, [r1]
    Y2[iAcol_0 + 4] = CSE_P.Q_Value[coffset + 3];
 8006322:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8006326:	3303      	adds	r3, #3
 8006328:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 800632c:	1d11      	adds	r1, r2, #4
 800632e:	4a31      	ldr	r2, [pc, #196]	; (80063f4 <CSE_step+0x1574>)
 8006330:	3344      	adds	r3, #68	; 0x44
 8006332:	00db      	lsls	r3, r3, #3
 8006334:	4413      	add	r3, r2
 8006336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800633a:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 800633e:	00c9      	lsls	r1, r1, #3
 8006340:	4401      	add	r1, r0
 8006342:	e9c1 2300 	strd	r2, r3, [r1]
    Y2[iAcol_0 + 2] = R_0[iAcol + 2];
 8006346:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 800634a:	3302      	adds	r3, #2
 800634c:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8006350:	1c91      	adds	r1, r2, #2
 8006352:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8006356:	00db      	lsls	r3, r3, #3
 8006358:	4413      	add	r3, r2
 800635a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800635e:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 8006362:	00c9      	lsls	r1, r1, #3
 8006364:	4401      	add	r1, r0
 8006366:	e9c1 2300 	strd	r2, r3, [r1]
    Y2[iAcol_0 + 5] = CSE_P.Q_Value[coffset + 6];
 800636a:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 800636e:	3306      	adds	r3, #6
 8006370:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8006374:	1d51      	adds	r1, r2, #5
 8006376:	4a1f      	ldr	r2, [pc, #124]	; (80063f4 <CSE_step+0x1574>)
 8006378:	3344      	adds	r3, #68	; 0x44
 800637a:	00db      	lsls	r3, r3, #3
 800637c:	4413      	add	r3, r2
 800637e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006382:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 8006386:	00c9      	lsls	r1, r1, #3
 8006388:	4401      	add	r1, r0
 800638a:	e9c1 2300 	strd	r2, r3, [r1]
    iAcol_0 += 6;
 800638e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006392:	3306      	adds	r3, #6
 8006394:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
    iAcol += 3;
 8006398:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 800639c:	3303      	adds	r3, #3
 800639e:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
  for (coffset = 0; coffset < 3; coffset++) {
 80063a2:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 80063a6:	3301      	adds	r3, #1
 80063a8:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
 80063ac:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 80063b0:	2b02      	cmp	r3, #2
 80063b2:	dd83      	ble.n	80062bc <CSE_step+0x143c>
  }

  qr_DvOBrgQi(Y2, X2state, R);
 80063b4:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80063b8:	f507 7108 	add.w	r1, r7, #544	; 0x220
 80063bc:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80063c0:	4618      	mov	r0, r3
 80063c2:	f003 fa8f 	bl	80098e4 <qr_DvOBrgQi>
  iAcol_0 = 0;
 80063c6:	2300      	movs	r3, #0
 80063c8:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
  for (iAcol = 0; iAcol < 3; iAcol++) {
 80063cc:	2300      	movs	r3, #0
 80063ce:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 80063d2:	e04c      	b.n	800646e <CSE_step+0x15ee>
 80063d4:	f3af 8000 	nop.w
 80063d8:	00000000 	.word	0x00000000
 80063dc:	c12e847e 	.word	0xc12e847e
 80063e0:	2001d9a8 	.word	0x2001d9a8
 80063e4:	2001d9f0 	.word	0x2001d9f0
 80063e8:	08017aa8 	.word	0x08017aa8
 80063ec:	08017a98 	.word	0x08017a98
 80063f0:	3ff00000 	.word	0x3ff00000
 80063f4:	20001000 	.word	0x20001000
    CSE_DW.P[iAcol_0] = R[iAcol];
 80063f8:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80063fc:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006400:	00db      	lsls	r3, r3, #3
 8006402:	4413      	add	r3, r2
 8006404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006408:	481e      	ldr	r0, [pc, #120]	; (8006484 <CSE_step+0x1604>)
 800640a:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 800640e:	00c9      	lsls	r1, r1, #3
 8006410:	4401      	add	r1, r0
 8006412:	e9c1 2300 	strd	r2, r3, [r1]
    CSE_DW.P[iAcol_0 + 1] = R[iAcol + 3];
 8006416:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 800641a:	3303      	adds	r3, #3
 800641c:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8006420:	1c51      	adds	r1, r2, #1
 8006422:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8006426:	00db      	lsls	r3, r3, #3
 8006428:	4413      	add	r3, r2
 800642a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800642e:	4815      	ldr	r0, [pc, #84]	; (8006484 <CSE_step+0x1604>)
 8006430:	00c9      	lsls	r1, r1, #3
 8006432:	4401      	add	r1, r0
 8006434:	e9c1 2300 	strd	r2, r3, [r1]
    CSE_DW.P[iAcol_0 + 2] = R[iAcol + 6];
 8006438:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 800643c:	3306      	adds	r3, #6
 800643e:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8006442:	1c91      	adds	r1, r2, #2
 8006444:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8006448:	00db      	lsls	r3, r3, #3
 800644a:	4413      	add	r3, r2
 800644c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006450:	480c      	ldr	r0, [pc, #48]	; (8006484 <CSE_step+0x1604>)
 8006452:	00c9      	lsls	r1, r1, #3
 8006454:	4401      	add	r1, r0
 8006456:	e9c1 2300 	strd	r2, r3, [r1]
    iAcol_0 += 3;
 800645a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800645e:	3303      	adds	r3, #3
 8006460:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
  for (iAcol = 0; iAcol < 3; iAcol++) {
 8006464:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006468:	3301      	adds	r3, #1
 800646a:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 800646e:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006472:	2b02      	cmp	r3, #2
 8006474:	ddc0      	ble.n	80063f8 <CSE_step+0x1578>
  }
}
 8006476:	bf00      	nop
 8006478:	bf00      	nop
 800647a:	f507 773d 	add.w	r7, r7, #756	; 0x2f4
 800647e:	46bd      	mov	sp, r7
 8006480:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006484:	2001d9a8 	.word	0x2001d9a8

08006488 <CSE_initialize>:

void CSE_initialize(void)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	af00      	add	r7, sp, #0
  rt_InitInfAndNaN(sizeof(real_T));
 800648c:	2008      	movs	r0, #8
 800648e:	f004 fda9 	bl	800afe4 <rt_InitInfAndNaN>
  memcpy(&CSE_DW.P[0], &CSE_P.DataStoreMemoryP_InitialValue[0], 9U * sizeof
 8006492:	2248      	movs	r2, #72	; 0x48
 8006494:	490b      	ldr	r1, [pc, #44]	; (80064c4 <CSE_initialize+0x3c>)
 8006496:	480c      	ldr	r0, [pc, #48]	; (80064c8 <CSE_initialize+0x40>)
 8006498:	f010 fb60 	bl	8016b5c <memcpy>
         (real_T));
  CSE_DW.x[0] = CSE_P.DataStoreMemoryx_InitialValue[0];
 800649c:	4b0b      	ldr	r3, [pc, #44]	; (80064cc <CSE_initialize+0x44>)
 800649e:	e9d3 23ae 	ldrd	r2, r3, [r3, #696]	; 0x2b8
 80064a2:	4909      	ldr	r1, [pc, #36]	; (80064c8 <CSE_initialize+0x40>)
 80064a4:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
  CSE_DW.x[1] = CSE_P.DataStoreMemoryx_InitialValue[1];
 80064a8:	4b08      	ldr	r3, [pc, #32]	; (80064cc <CSE_initialize+0x44>)
 80064aa:	e9d3 23b0 	ldrd	r2, r3, [r3, #704]	; 0x2c0
 80064ae:	4906      	ldr	r1, [pc, #24]	; (80064c8 <CSE_initialize+0x40>)
 80064b0:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
  CSE_DW.x[2] = CSE_P.DataStoreMemoryx_InitialValue[2];
 80064b4:	4b05      	ldr	r3, [pc, #20]	; (80064cc <CSE_initialize+0x44>)
 80064b6:	e9d3 23b2 	ldrd	r2, r3, [r3, #712]	; 0x2c8
 80064ba:	4903      	ldr	r1, [pc, #12]	; (80064c8 <CSE_initialize+0x40>)
 80064bc:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
}
 80064c0:	bf00      	nop
 80064c2:	bd80      	pop	{r7, pc}
 80064c4:	20001270 	.word	0x20001270
 80064c8:	2001d9a8 	.word	0x2001d9a8
 80064cc:	20001000 	.word	0x20001000

080064d0 <Charger_step>:
ExtU_Charger_T Charger_U;
ExtY_Charger_T Charger_Y;
static RT_MODEL_Charger_T Charger_M_;
RT_MODEL_Charger_T *const Charger_M = &Charger_M_;
void Charger_step(void)
{
 80064d0:	b5b0      	push	{r4, r5, r7, lr}
 80064d2:	af00      	add	r7, sp, #0
  Charger_Y.Current = Charger_P.cell_count * 0.0034726631697176778 *
 80064d4:	4b20      	ldr	r3, [pc, #128]	; (8006558 <Charger_step+0x88>)
 80064d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80064da:	a31d      	add	r3, pc, #116	; (adr r3, 8006550 <Charger_step+0x80>)
 80064dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064e0:	f7fa f87c 	bl	80005dc <__aeabi_dmul>
 80064e4:	4602      	mov	r2, r0
 80064e6:	460b      	mov	r3, r1
 80064e8:	4610      	mov	r0, r2
 80064ea:	4619      	mov	r1, r3
    Charger_U.CV_true * (Charger_U.CV_level - Charger_U.y) + Charger_U.CC_true *
 80064ec:	4b1b      	ldr	r3, [pc, #108]	; (800655c <Charger_step+0x8c>)
 80064ee:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
  Charger_Y.Current = Charger_P.cell_count * 0.0034726631697176778 *
 80064f2:	f7fa f873 	bl	80005dc <__aeabi_dmul>
 80064f6:	4602      	mov	r2, r0
 80064f8:	460b      	mov	r3, r1
 80064fa:	4614      	mov	r4, r2
 80064fc:	461d      	mov	r5, r3
    Charger_U.CV_true * (Charger_U.CV_level - Charger_U.y) + Charger_U.CC_true *
 80064fe:	4b17      	ldr	r3, [pc, #92]	; (800655c <Charger_step+0x8c>)
 8006500:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8006504:	4b15      	ldr	r3, [pc, #84]	; (800655c <Charger_step+0x8c>)
 8006506:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800650a:	f7f9 feaf 	bl	800026c <__aeabi_dsub>
 800650e:	4602      	mov	r2, r0
 8006510:	460b      	mov	r3, r1
 8006512:	4620      	mov	r0, r4
 8006514:	4629      	mov	r1, r5
 8006516:	f7fa f861 	bl	80005dc <__aeabi_dmul>
 800651a:	4602      	mov	r2, r0
 800651c:	460b      	mov	r3, r1
 800651e:	4614      	mov	r4, r2
 8006520:	461d      	mov	r5, r3
 8006522:	4b0e      	ldr	r3, [pc, #56]	; (800655c <Charger_step+0x8c>)
 8006524:	e9d3 0100 	ldrd	r0, r1, [r3]
    Charger_U.CC_level;
 8006528:	4b0c      	ldr	r3, [pc, #48]	; (800655c <Charger_step+0x8c>)
 800652a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    Charger_U.CV_true * (Charger_U.CV_level - Charger_U.y) + Charger_U.CC_true *
 800652e:	f7fa f855 	bl	80005dc <__aeabi_dmul>
 8006532:	4602      	mov	r2, r0
 8006534:	460b      	mov	r3, r1
 8006536:	4620      	mov	r0, r4
 8006538:	4629      	mov	r1, r5
 800653a:	f7f9 fe99 	bl	8000270 <__adddf3>
 800653e:	4602      	mov	r2, r0
 8006540:	460b      	mov	r3, r1
  Charger_Y.Current = Charger_P.cell_count * 0.0034726631697176778 *
 8006542:	4907      	ldr	r1, [pc, #28]	; (8006560 <Charger_step+0x90>)
 8006544:	e9c1 2300 	strd	r2, r3, [r1]
}
 8006548:	bf00      	nop
 800654a:	bdb0      	pop	{r4, r5, r7, pc}
 800654c:	f3af 8000 	nop.w
 8006550:	d7ce878f 	.word	0xd7ce878f
 8006554:	3f6c72b3 	.word	0x3f6c72b3
 8006558:	200012d8 	.word	0x200012d8
 800655c:	2001da10 	.word	0x2001da10
 8006560:	2001da08 	.word	0x2001da08

08006564 <Charger_initialize>:

void Charger_initialize(void)
{
 8006564:	b480      	push	{r7}
 8006566:	af00      	add	r7, sp, #0
}
 8006568:	bf00      	nop
 800656a:	46bd      	mov	sp, r7
 800656c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006570:	4770      	bx	lr
	...

08006574 <UTMeanCovSqrt_C2vgLQ4W>:
#include "qr_5a2P8Gh6.h"

void UTMeanCovSqrt_C2vgLQ4W(const real_T meanWeights[2], const real_T
  covWeights[2], real_T OOM, real_T Y1[3], real_T Y2[18], const real_T X1[3],
  real_T X2[18], real_T Ymean[3], real_T Sy[9], real_T Pxy[9])
{
 8006574:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006578:	f5ad 7d2f 	sub.w	sp, sp, #700	; 0x2bc
 800657c:	af00      	add	r7, sp, #0
 800657e:	f107 0414 	add.w	r4, r7, #20
 8006582:	6020      	str	r0, [r4, #0]
 8006584:	f107 0010 	add.w	r0, r7, #16
 8006588:	6001      	str	r1, [r0, #0]
 800658a:	f107 0108 	add.w	r1, r7, #8
 800658e:	ed81 0b00 	vstr	d0, [r1]
 8006592:	1d39      	adds	r1, r7, #4
 8006594:	600a      	str	r2, [r1, #0]
 8006596:	463a      	mov	r2, r7
 8006598:	6013      	str	r3, [r2, #0]
  int32_T i;
  int32_T iAcol;
  int32_T i_0;
  int32_T i_1;
  int32_T kk;
  Ymean[0] = Y1[0] * meanWeights[0];
 800659a:	1d3b      	adds	r3, r7, #4
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80065a2:	f107 0314 	add.w	r3, r7, #20
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ac:	f7fa f816 	bl	80005dc <__aeabi_dmul>
 80065b0:	4602      	mov	r2, r0
 80065b2:	460b      	mov	r3, r1
 80065b4:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 80065b8:	e9c1 2300 	strd	r2, r3, [r1]
  Ymean[1] = meanWeights[0] * Y1[1];
 80065bc:	f107 0314 	add.w	r3, r7, #20
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80065c6:	1d3b      	adds	r3, r7, #4
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	3308      	adds	r3, #8
 80065cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065d0:	f8d7 42e0 	ldr.w	r4, [r7, #736]	; 0x2e0
 80065d4:	3408      	adds	r4, #8
 80065d6:	f7fa f801 	bl	80005dc <__aeabi_dmul>
 80065da:	4602      	mov	r2, r0
 80065dc:	460b      	mov	r3, r1
 80065de:	e9c4 2300 	strd	r2, r3, [r4]
  Ymean[2] = meanWeights[0] * Y1[2];
 80065e2:	f107 0314 	add.w	r3, r7, #20
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80065ec:	1d3b      	adds	r3, r7, #4
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	3310      	adds	r3, #16
 80065f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065f6:	f8d7 42e0 	ldr.w	r4, [r7, #736]	; 0x2e0
 80065fa:	3410      	adds	r4, #16
 80065fc:	f7f9 ffee 	bl	80005dc <__aeabi_dmul>
 8006600:	4602      	mov	r2, r0
 8006602:	460b      	mov	r3, r1
 8006604:	e9c4 2300 	strd	r2, r3, [r4]
  iAcol = 0;
 8006608:	2300      	movs	r3, #0
 800660a:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
  for (kk = 0; kk < 6; kk++) {
 800660e:	2300      	movs	r3, #0
 8006610:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8006614:	e079      	b.n	800670a <UTMeanCovSqrt_C2vgLQ4W+0x196>
    Ymean[0] += Y2[iAcol] * meanWeights[1];
 8006616:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800661a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800661e:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8006622:	00db      	lsls	r3, r3, #3
 8006624:	463a      	mov	r2, r7
 8006626:	6812      	ldr	r2, [r2, #0]
 8006628:	4413      	add	r3, r2
 800662a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800662e:	f107 0314 	add.w	r3, r7, #20
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	3308      	adds	r3, #8
 8006636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800663a:	f7f9 ffcf 	bl	80005dc <__aeabi_dmul>
 800663e:	4602      	mov	r2, r0
 8006640:	460b      	mov	r3, r1
 8006642:	4620      	mov	r0, r4
 8006644:	4629      	mov	r1, r5
 8006646:	f7f9 fe13 	bl	8000270 <__adddf3>
 800664a:	4602      	mov	r2, r0
 800664c:	460b      	mov	r3, r1
 800664e:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8006652:	e9c1 2300 	strd	r2, r3, [r1]
    Ymean[1] += Y2[iAcol + 1] * meanWeights[1];
 8006656:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800665a:	3308      	adds	r3, #8
 800665c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8006660:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8006664:	3301      	adds	r3, #1
 8006666:	00db      	lsls	r3, r3, #3
 8006668:	463a      	mov	r2, r7
 800666a:	6812      	ldr	r2, [r2, #0]
 800666c:	4413      	add	r3, r2
 800666e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006672:	f107 0314 	add.w	r3, r7, #20
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	3308      	adds	r3, #8
 800667a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800667e:	f7f9 ffad 	bl	80005dc <__aeabi_dmul>
 8006682:	4602      	mov	r2, r0
 8006684:	460b      	mov	r3, r1
 8006686:	4610      	mov	r0, r2
 8006688:	4619      	mov	r1, r3
 800668a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800668e:	f103 0608 	add.w	r6, r3, #8
 8006692:	4602      	mov	r2, r0
 8006694:	460b      	mov	r3, r1
 8006696:	4620      	mov	r0, r4
 8006698:	4629      	mov	r1, r5
 800669a:	f7f9 fde9 	bl	8000270 <__adddf3>
 800669e:	4602      	mov	r2, r0
 80066a0:	460b      	mov	r3, r1
 80066a2:	e9c6 2300 	strd	r2, r3, [r6]
    Ymean[2] += Y2[iAcol + 2] * meanWeights[1];
 80066a6:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80066aa:	3310      	adds	r3, #16
 80066ac:	e9d3 4500 	ldrd	r4, r5, [r3]
 80066b0:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80066b4:	3302      	adds	r3, #2
 80066b6:	00db      	lsls	r3, r3, #3
 80066b8:	463a      	mov	r2, r7
 80066ba:	6812      	ldr	r2, [r2, #0]
 80066bc:	4413      	add	r3, r2
 80066be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80066c2:	f107 0314 	add.w	r3, r7, #20
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	3308      	adds	r3, #8
 80066ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ce:	f7f9 ff85 	bl	80005dc <__aeabi_dmul>
 80066d2:	4602      	mov	r2, r0
 80066d4:	460b      	mov	r3, r1
 80066d6:	4610      	mov	r0, r2
 80066d8:	4619      	mov	r1, r3
 80066da:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80066de:	f103 0610 	add.w	r6, r3, #16
 80066e2:	4602      	mov	r2, r0
 80066e4:	460b      	mov	r3, r1
 80066e6:	4620      	mov	r0, r4
 80066e8:	4629      	mov	r1, r5
 80066ea:	f7f9 fdc1 	bl	8000270 <__adddf3>
 80066ee:	4602      	mov	r2, r0
 80066f0:	460b      	mov	r3, r1
 80066f2:	e9c6 2300 	strd	r2, r3, [r6]
    iAcol += 3;
 80066f6:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80066fa:	3303      	adds	r3, #3
 80066fc:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
  for (kk = 0; kk < 6; kk++) {
 8006700:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8006704:	3301      	adds	r3, #1
 8006706:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 800670a:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 800670e:	2b05      	cmp	r3, #5
 8006710:	dd81      	ble.n	8006616 <UTMeanCovSqrt_C2vgLQ4W+0xa2>
  }

  signOOM = Ymean[0] * OOM;
 8006712:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800671a:	f107 0108 	add.w	r1, r7, #8
 800671e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006722:	f7f9 ff5b 	bl	80005dc <__aeabi_dmul>
 8006726:	4602      	mov	r2, r0
 8006728:	460b      	mov	r3, r1
 800672a:	e9c7 23a8 	strd	r2, r3, [r7, #672]	; 0x2a0
  scale = Y1[0] - signOOM;
 800672e:	1d3b      	adds	r3, r7, #4
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006736:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 800673a:	f7f9 fd97 	bl	800026c <__aeabi_dsub>
 800673e:	4602      	mov	r2, r0
 8006740:	460b      	mov	r3, r1
 8006742:	e9c7 23aa 	strd	r2, r3, [r7, #680]	; 0x2a8
  Ymean[0] = signOOM;
 8006746:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 800674a:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 800674e:	e9c1 2300 	strd	r2, r3, [r1]
  Y1[0] = scale;
 8006752:	1d3b      	adds	r3, r7, #4
 8006754:	6819      	ldr	r1, [r3, #0]
 8006756:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 800675a:	e9c1 2300 	strd	r2, r3, [r1]
  signOOM = Ymean[1] * OOM;
 800675e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006762:	3308      	adds	r3, #8
 8006764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006768:	f107 0108 	add.w	r1, r7, #8
 800676c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006770:	f7f9 ff34 	bl	80005dc <__aeabi_dmul>
 8006774:	4602      	mov	r2, r0
 8006776:	460b      	mov	r3, r1
 8006778:	e9c7 23a8 	strd	r2, r3, [r7, #672]	; 0x2a0
  absxk = Y1[1] - signOOM;
 800677c:	1d3b      	adds	r3, r7, #4
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	3308      	adds	r3, #8
 8006782:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006786:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 800678a:	f7f9 fd6f 	bl	800026c <__aeabi_dsub>
 800678e:	4602      	mov	r2, r0
 8006790:	460b      	mov	r3, r1
 8006792:	e9c7 239e 	strd	r2, r3, [r7, #632]	; 0x278
  Ymean[1] = signOOM;
 8006796:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800679a:	f103 0108 	add.w	r1, r3, #8
 800679e:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 80067a2:	e9c1 2300 	strd	r2, r3, [r1]
  Y1[1] = absxk;
 80067a6:	1d3b      	adds	r3, r7, #4
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f103 0108 	add.w	r1, r3, #8
 80067ae:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 80067b2:	e9c1 2300 	strd	r2, r3, [r1]
  signOOM = Ymean[2] * OOM;
 80067b6:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80067ba:	3310      	adds	r3, #16
 80067bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067c0:	f107 0108 	add.w	r1, r7, #8
 80067c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80067c8:	f7f9 ff08 	bl	80005dc <__aeabi_dmul>
 80067cc:	4602      	mov	r2, r0
 80067ce:	460b      	mov	r3, r1
 80067d0:	e9c7 23a8 	strd	r2, r3, [r7, #672]	; 0x2a0
  b_t = Y1[2] - signOOM;
 80067d4:	1d3b      	adds	r3, r7, #4
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	3310      	adds	r3, #16
 80067da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80067de:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 80067e2:	f7f9 fd43 	bl	800026c <__aeabi_dsub>
 80067e6:	4602      	mov	r2, r0
 80067e8:	460b      	mov	r3, r1
 80067ea:	e9c7 239c 	strd	r2, r3, [r7, #624]	; 0x270
  Ymean[2] = signOOM;
 80067ee:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80067f2:	f103 0110 	add.w	r1, r3, #16
 80067f6:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 80067fa:	e9c1 2300 	strd	r2, r3, [r1]
  Y1[2] = b_t;
 80067fe:	1d3b      	adds	r3, r7, #4
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f103 0110 	add.w	r1, r3, #16
 8006806:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 800680a:	e9c1 2300 	strd	r2, r3, [r1]
  iAcol = 0;
 800680e:	2300      	movs	r3, #0
 8006810:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
  for (kk = 0; kk < 6; kk++) {
 8006814:	2300      	movs	r3, #0
 8006816:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 800681a:	e054      	b.n	80068c6 <UTMeanCovSqrt_C2vgLQ4W+0x352>
    Y2[iAcol] -= Ymean[0];
 800681c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8006820:	00db      	lsls	r3, r3, #3
 8006822:	463a      	mov	r2, r7
 8006824:	6812      	ldr	r2, [r2, #0]
 8006826:	4413      	add	r3, r2
 8006828:	e9d3 0100 	ldrd	r0, r1, [r3]
 800682c:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006834:	f8d7 4298 	ldr.w	r4, [r7, #664]	; 0x298
 8006838:	00e4      	lsls	r4, r4, #3
 800683a:	463d      	mov	r5, r7
 800683c:	682d      	ldr	r5, [r5, #0]
 800683e:	442c      	add	r4, r5
 8006840:	f7f9 fd14 	bl	800026c <__aeabi_dsub>
 8006844:	4602      	mov	r2, r0
 8006846:	460b      	mov	r3, r1
 8006848:	e9c4 2300 	strd	r2, r3, [r4]
    Y2[iAcol + 1] -= Ymean[1];
 800684c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8006850:	3301      	adds	r3, #1
 8006852:	00db      	lsls	r3, r3, #3
 8006854:	463a      	mov	r2, r7
 8006856:	6812      	ldr	r2, [r2, #0]
 8006858:	4413      	add	r3, r2
 800685a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800685e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006862:	3308      	adds	r3, #8
 8006864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006868:	f8d7 4298 	ldr.w	r4, [r7, #664]	; 0x298
 800686c:	3401      	adds	r4, #1
 800686e:	00e4      	lsls	r4, r4, #3
 8006870:	463d      	mov	r5, r7
 8006872:	682d      	ldr	r5, [r5, #0]
 8006874:	442c      	add	r4, r5
 8006876:	f7f9 fcf9 	bl	800026c <__aeabi_dsub>
 800687a:	4602      	mov	r2, r0
 800687c:	460b      	mov	r3, r1
 800687e:	e9c4 2300 	strd	r2, r3, [r4]
    Y2[iAcol + 2] -= signOOM;
 8006882:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8006886:	3302      	adds	r3, #2
 8006888:	00db      	lsls	r3, r3, #3
 800688a:	463a      	mov	r2, r7
 800688c:	6812      	ldr	r2, [r2, #0]
 800688e:	4413      	add	r3, r2
 8006890:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006894:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8006898:	3302      	adds	r3, #2
 800689a:	00db      	lsls	r3, r3, #3
 800689c:	463a      	mov	r2, r7
 800689e:	6812      	ldr	r2, [r2, #0]
 80068a0:	18d4      	adds	r4, r2, r3
 80068a2:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 80068a6:	f7f9 fce1 	bl	800026c <__aeabi_dsub>
 80068aa:	4602      	mov	r2, r0
 80068ac:	460b      	mov	r3, r1
 80068ae:	e9c4 2300 	strd	r2, r3, [r4]
    iAcol += 3;
 80068b2:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80068b6:	3303      	adds	r3, #3
 80068b8:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
  for (kk = 0; kk < 6; kk++) {
 80068bc:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80068c0:	3301      	adds	r3, #1
 80068c2:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 80068c6:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80068ca:	2b05      	cmp	r3, #5
 80068cc:	dda6      	ble.n	800681c <UTMeanCovSqrt_C2vgLQ4W+0x2a8>
  }

  if (rtIsNaN(OOM)) {
 80068ce:	f107 0308 	add.w	r3, r7, #8
 80068d2:	ed93 0b00 	vldr	d0, [r3]
 80068d6:	f004 fbed 	bl	800b0b4 <rtIsNaN>
 80068da:	4603      	mov	r3, r0
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d006      	beq.n	80068ee <UTMeanCovSqrt_C2vgLQ4W+0x37a>
    signOOM = OOM;
 80068e0:	f107 0308 	add.w	r3, r7, #8
 80068e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068e8:	e9c7 23a8 	strd	r2, r3, [r7, #672]	; 0x2a0
 80068ec:	e029      	b.n	8006942 <UTMeanCovSqrt_C2vgLQ4W+0x3ce>
  } else if (OOM < 0.0) {
 80068ee:	f107 0108 	add.w	r1, r7, #8
 80068f2:	f04f 0200 	mov.w	r2, #0
 80068f6:	f04f 0300 	mov.w	r3, #0
 80068fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80068fe:	f7fa f8df 	bl	8000ac0 <__aeabi_dcmplt>
 8006902:	4603      	mov	r3, r0
 8006904:	2b00      	cmp	r3, #0
 8006906:	d005      	beq.n	8006914 <UTMeanCovSqrt_C2vgLQ4W+0x3a0>
    signOOM = -1.0;
 8006908:	f04f 0200 	mov.w	r2, #0
 800690c:	4bce      	ldr	r3, [pc, #824]	; (8006c48 <UTMeanCovSqrt_C2vgLQ4W+0x6d4>)
 800690e:	e9c7 23a8 	strd	r2, r3, [r7, #672]	; 0x2a0
 8006912:	e016      	b.n	8006942 <UTMeanCovSqrt_C2vgLQ4W+0x3ce>
  } else {
    signOOM = (OOM > 0.0);
 8006914:	f107 0108 	add.w	r1, r7, #8
 8006918:	f04f 0200 	mov.w	r2, #0
 800691c:	f04f 0300 	mov.w	r3, #0
 8006920:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006924:	f7fa f8ea 	bl	8000afc <__aeabi_dcmpgt>
 8006928:	4603      	mov	r3, r0
 800692a:	2b00      	cmp	r3, #0
 800692c:	d003      	beq.n	8006936 <UTMeanCovSqrt_C2vgLQ4W+0x3c2>
 800692e:	f04f 0200 	mov.w	r2, #0
 8006932:	4bc6      	ldr	r3, [pc, #792]	; (8006c4c <UTMeanCovSqrt_C2vgLQ4W+0x6d8>)
 8006934:	e003      	b.n	800693e <UTMeanCovSqrt_C2vgLQ4W+0x3ca>
 8006936:	f04f 0200 	mov.w	r2, #0
 800693a:	f04f 0300 	mov.w	r3, #0
 800693e:	e9c7 23a8 	strd	r2, r3, [r7, #672]	; 0x2a0
  }

  covWeights_0 = signOOM * covWeights[0];
 8006942:	f107 0310 	add.w	r3, r7, #16
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800694c:	e9d7 01a8 	ldrd	r0, r1, [r7, #672]	; 0x2a0
 8006950:	f7f9 fe44 	bl	80005dc <__aeabi_dmul>
 8006954:	4602      	mov	r2, r0
 8006956:	460b      	mov	r3, r1
 8006958:	e9c7 23ac 	strd	r2, r3, [r7, #688]	; 0x2b0
  covWeights_1 = signOOM * covWeights[1];
 800695c:	f107 0310 	add.w	r3, r7, #16
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	3308      	adds	r3, #8
 8006964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006968:	e9d7 01a8 	ldrd	r0, r1, [r7, #672]	; 0x2a0
 800696c:	f7f9 fe36 	bl	80005dc <__aeabi_dmul>
 8006970:	4602      	mov	r2, r0
 8006972:	460b      	mov	r3, r1
 8006974:	e9c7 239a 	strd	r2, r3, [r7, #616]	; 0x268
  OOM *= signOOM;
 8006978:	f107 0408 	add.w	r4, r7, #8
 800697c:	f107 0108 	add.w	r1, r7, #8
 8006980:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 8006984:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006988:	f7f9 fe28 	bl	80005dc <__aeabi_dmul>
 800698c:	4602      	mov	r2, r0
 800698e:	460b      	mov	r3, r1
 8006990:	e9c4 2300 	strd	r2, r3, [r4]
  signOOM = sqrt(OOM);
 8006994:	f107 0308 	add.w	r3, r7, #8
 8006998:	ed93 0b00 	vldr	d0, [r3]
 800699c:	f010 faa4 	bl	8016ee8 <sqrt>
 80069a0:	ed87 0ba8 	vstr	d0, [r7, #672]	; 0x2a0
  temp = sqrt(covWeights_1);
 80069a4:	ed97 0b9a 	vldr	d0, [r7, #616]	; 0x268
 80069a8:	f010 fa9e 	bl	8016ee8 <sqrt>
 80069ac:	eeb0 7a40 	vmov.f32	s14, s0
 80069b0:	eef0 7a60 	vmov.f32	s15, s1
 80069b4:	f107 0318 	add.w	r3, r7, #24
 80069b8:	ed83 7b00 	vstr	d7, [r3]
  kk = 0;
 80069bc:	2300      	movs	r3, #0
 80069be:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
  for (iAcol = 0; iAcol < 3; iAcol++) {
 80069c2:	2300      	movs	r3, #0
 80069c4:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 80069c8:	e03c      	b.n	8006a44 <UTMeanCovSqrt_C2vgLQ4W+0x4d0>
    i_1 = 0;
 80069ca:	2300      	movs	r3, #0
 80069cc:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
    for (i = 0; i < 6; i++) {
 80069d0:	2300      	movs	r3, #0
 80069d2:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 80069d6:	e027      	b.n	8006a28 <UTMeanCovSqrt_C2vgLQ4W+0x4b4>
      temp_0[i + kk] = Y2[i_1 + iAcol] * temp;
 80069d8:	f8d7 2290 	ldr.w	r2, [r7, #656]	; 0x290
 80069dc:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80069e0:	4413      	add	r3, r2
 80069e2:	00db      	lsls	r3, r3, #3
 80069e4:	463a      	mov	r2, r7
 80069e6:	6812      	ldr	r2, [r2, #0]
 80069e8:	4413      	add	r3, r2
 80069ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80069ee:	f107 0318 	add.w	r3, r7, #24
 80069f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069f6:	f8d7 529c 	ldr.w	r5, [r7, #668]	; 0x29c
 80069fa:	f8d7 428c 	ldr.w	r4, [r7, #652]	; 0x28c
 80069fe:	442c      	add	r4, r5
 8006a00:	f7f9 fdec 	bl	80005dc <__aeabi_dmul>
 8006a04:	4602      	mov	r2, r0
 8006a06:	460b      	mov	r3, r1
 8006a08:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 8006a0c:	00e1      	lsls	r1, r4, #3
 8006a0e:	4401      	add	r1, r0
 8006a10:	e9c1 2300 	strd	r2, r3, [r1]
      i_1 += 3;
 8006a14:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8006a18:	3303      	adds	r3, #3
 8006a1a:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
    for (i = 0; i < 6; i++) {
 8006a1e:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8006a22:	3301      	adds	r3, #1
 8006a24:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 8006a28:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8006a2c:	2b05      	cmp	r3, #5
 8006a2e:	ddd3      	ble.n	80069d8 <UTMeanCovSqrt_C2vgLQ4W+0x464>
    }

    kk += 6;
 8006a30:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8006a34:	3306      	adds	r3, #6
 8006a36:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
  for (iAcol = 0; iAcol < 3; iAcol++) {
 8006a3a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8006a3e:	3301      	adds	r3, #1
 8006a40:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8006a44:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8006a48:	2b02      	cmp	r3, #2
 8006a4a:	ddbe      	ble.n	80069ca <UTMeanCovSqrt_C2vgLQ4W+0x456>
  }

  qr_DvOBrgQi(temp_0, a__1, Sy);
 8006a4c:	f507 71e8 	add.w	r1, r7, #464	; 0x1d0
 8006a50:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8006a54:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f002 ff43 	bl	80098e4 <qr_DvOBrgQi>
  if (!rtIsNaN(covWeights_0)) {
 8006a5e:	ed97 0bac 	vldr	d0, [r7, #688]	; 0x2b0
 8006a62:	f004 fb27 	bl	800b0b4 <rtIsNaN>
 8006a66:	4603      	mov	r3, r0
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d125      	bne.n	8006ab8 <UTMeanCovSqrt_C2vgLQ4W+0x544>
    if (covWeights_0 < 0.0) {
 8006a6c:	f04f 0200 	mov.w	r2, #0
 8006a70:	f04f 0300 	mov.w	r3, #0
 8006a74:	e9d7 01ac 	ldrd	r0, r1, [r7, #688]	; 0x2b0
 8006a78:	f7fa f822 	bl	8000ac0 <__aeabi_dcmplt>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d005      	beq.n	8006a8e <UTMeanCovSqrt_C2vgLQ4W+0x51a>
      covWeights_0 = -1.0;
 8006a82:	f04f 0200 	mov.w	r2, #0
 8006a86:	4b70      	ldr	r3, [pc, #448]	; (8006c48 <UTMeanCovSqrt_C2vgLQ4W+0x6d4>)
 8006a88:	e9c7 23ac 	strd	r2, r3, [r7, #688]	; 0x2b0
 8006a8c:	e014      	b.n	8006ab8 <UTMeanCovSqrt_C2vgLQ4W+0x544>
    } else {
      covWeights_0 = (covWeights_0 > 0.0);
 8006a8e:	f04f 0200 	mov.w	r2, #0
 8006a92:	f04f 0300 	mov.w	r3, #0
 8006a96:	e9d7 01ac 	ldrd	r0, r1, [r7, #688]	; 0x2b0
 8006a9a:	f7fa f82f 	bl	8000afc <__aeabi_dcmpgt>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d003      	beq.n	8006aac <UTMeanCovSqrt_C2vgLQ4W+0x538>
 8006aa4:	f04f 0200 	mov.w	r2, #0
 8006aa8:	4b68      	ldr	r3, [pc, #416]	; (8006c4c <UTMeanCovSqrt_C2vgLQ4W+0x6d8>)
 8006aaa:	e003      	b.n	8006ab4 <UTMeanCovSqrt_C2vgLQ4W+0x540>
 8006aac:	f04f 0200 	mov.w	r2, #0
 8006ab0:	f04f 0300 	mov.w	r3, #0
 8006ab4:	e9c7 23ac 	strd	r2, r3, [r7, #688]	; 0x2b0
    }
  }

  if (covWeights_0 == 1.0) {
 8006ab8:	f04f 0200 	mov.w	r2, #0
 8006abc:	4b63      	ldr	r3, [pc, #396]	; (8006c4c <UTMeanCovSqrt_C2vgLQ4W+0x6d8>)
 8006abe:	e9d7 01ac 	ldrd	r0, r1, [r7, #688]	; 0x2b0
 8006ac2:	f7f9 fff3 	bl	8000aac <__aeabi_dcmpeq>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	f000 81bd 	beq.w	8006e48 <UTMeanCovSqrt_C2vgLQ4W+0x8d4>
    for (iAcol = 0; iAcol < 2; iAcol++) {
 8006ace:	2300      	movs	r3, #0
 8006ad0:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8006ad4:	e011      	b.n	8006afa <UTMeanCovSqrt_C2vgLQ4W+0x586>
      Sy[iAcol + 1] = 0.0;
 8006ad6:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8006ada:	3301      	adds	r3, #1
 8006adc:	00db      	lsls	r3, r3, #3
 8006ade:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8006ae2:	18d1      	adds	r1, r2, r3
 8006ae4:	f04f 0200 	mov.w	r2, #0
 8006ae8:	f04f 0300 	mov.w	r3, #0
 8006aec:	e9c1 2300 	strd	r2, r3, [r1]
    for (iAcol = 0; iAcol < 2; iAcol++) {
 8006af0:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8006af4:	3301      	adds	r3, #1
 8006af6:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8006afa:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8006afe:	2b01      	cmp	r3, #1
 8006b00:	dde9      	ble.n	8006ad6 <UTMeanCovSqrt_C2vgLQ4W+0x562>
    }

    Sy[5] = 0.0;
 8006b02:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006b06:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8006b0a:	f04f 0200 	mov.w	r2, #0
 8006b0e:	f04f 0300 	mov.w	r3, #0
 8006b12:	e9c1 2300 	strd	r2, r3, [r1]
    c[2] = 0.0;
 8006b16:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8006b1a:	f04f 0200 	mov.w	r2, #0
 8006b1e:	f04f 0300 	mov.w	r3, #0
 8006b22:	e9c1 2304 	strd	r2, r3, [r1, #16]
    s[2] = 0.0;
 8006b26:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8006b2a:	f04f 0200 	mov.w	r2, #0
 8006b2e:	f04f 0300 	mov.w	r3, #0
 8006b32:	e9c1 2304 	strd	r2, r3, [r1, #16]
    rotate_LZ7ctbe0(Sy[0], scale, &c[0], &s[0], &Sy[0]);
 8006b36:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006b3a:	ed93 7b00 	vldr	d7, [r3]
 8006b3e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8006b42:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006b46:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	ed97 1baa 	vldr	d1, [r7, #680]	; 0x2a8
 8006b50:	eeb0 0a47 	vmov.f32	s0, s14
 8006b54:	eef0 0a67 	vmov.f32	s1, s15
 8006b58:	f004 f814 	bl	800ab84 <rotate_LZ7ctbe0>
    temp = c[0] * absxk - s[0] * Sy[3];
 8006b5c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006b60:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006b64:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 8006b68:	f7f9 fd38 	bl	80005dc <__aeabi_dmul>
 8006b6c:	4602      	mov	r2, r0
 8006b6e:	460b      	mov	r3, r1
 8006b70:	4614      	mov	r4, r2
 8006b72:	461d      	mov	r5, r3
 8006b74:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006b78:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006b7c:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006b80:	3318      	adds	r3, #24
 8006b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b86:	f7f9 fd29 	bl	80005dc <__aeabi_dmul>
 8006b8a:	4602      	mov	r2, r0
 8006b8c:	460b      	mov	r3, r1
 8006b8e:	4620      	mov	r0, r4
 8006b90:	4629      	mov	r1, r5
 8006b92:	f7f9 fb6b 	bl	800026c <__aeabi_dsub>
 8006b96:	4602      	mov	r2, r0
 8006b98:	460b      	mov	r3, r1
 8006b9a:	f107 0118 	add.w	r1, r7, #24
 8006b9e:	e9c1 2300 	strd	r2, r3, [r1]
    Sy[3] = c[0] * Sy[3] + s[0] * absxk;
 8006ba2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006ba6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006baa:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006bae:	3318      	adds	r3, #24
 8006bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bb4:	f7f9 fd12 	bl	80005dc <__aeabi_dmul>
 8006bb8:	4602      	mov	r2, r0
 8006bba:	460b      	mov	r3, r1
 8006bbc:	4690      	mov	r8, r2
 8006bbe:	4699      	mov	r9, r3
 8006bc0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006bc4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006bc8:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 8006bcc:	f7f9 fd06 	bl	80005dc <__aeabi_dmul>
 8006bd0:	4602      	mov	r2, r0
 8006bd2:	460b      	mov	r3, r1
 8006bd4:	4610      	mov	r0, r2
 8006bd6:	4619      	mov	r1, r3
 8006bd8:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006bdc:	f103 0418 	add.w	r4, r3, #24
 8006be0:	4602      	mov	r2, r0
 8006be2:	460b      	mov	r3, r1
 8006be4:	4640      	mov	r0, r8
 8006be6:	4649      	mov	r1, r9
 8006be8:	f7f9 fb42 	bl	8000270 <__adddf3>
 8006bec:	4602      	mov	r2, r0
 8006bee:	460b      	mov	r3, r1
 8006bf0:	e9c4 2300 	strd	r2, r3, [r4]
    rotate_LZ7ctbe0(Sy[4], temp, &c[1], &s[1], &Sy[4]);
 8006bf4:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006bf8:	3320      	adds	r3, #32
 8006bfa:	ed93 7b00 	vldr	d7, [r3]
 8006bfe:	f107 0318 	add.w	r3, r7, #24
 8006c02:	ed93 6b00 	vldr	d6, [r3]
 8006c06:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006c0a:	f103 0220 	add.w	r2, r3, #32
 8006c0e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006c12:	f103 0108 	add.w	r1, r3, #8
 8006c16:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006c1a:	3308      	adds	r3, #8
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	eeb0 1a46 	vmov.f32	s2, s12
 8006c22:	eef0 1a66 	vmov.f32	s3, s13
 8006c26:	eeb0 0a47 	vmov.f32	s0, s14
 8006c2a:	eef0 0a67 	vmov.f32	s1, s15
 8006c2e:	f003 ffa9 	bl	800ab84 <rotate_LZ7ctbe0>
    temp = b_t;
 8006c32:	f107 0118 	add.w	r1, r7, #24
 8006c36:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 8006c3a:	e9c1 2300 	strd	r2, r3, [r1]
    for (iAcol = 0; iAcol < 2; iAcol++) {
 8006c3e:	2300      	movs	r3, #0
 8006c40:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8006c44:	e06f      	b.n	8006d26 <UTMeanCovSqrt_C2vgLQ4W+0x7b2>
 8006c46:	bf00      	nop
 8006c48:	bff00000 	.word	0xbff00000
 8006c4c:	3ff00000 	.word	0x3ff00000
      scale = s[iAcol] * temp;
 8006c50:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006c54:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8006c58:	00db      	lsls	r3, r3, #3
 8006c5a:	4413      	add	r3, r2
 8006c5c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006c60:	f107 0318 	add.w	r3, r7, #24
 8006c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c68:	f7f9 fcb8 	bl	80005dc <__aeabi_dmul>
 8006c6c:	4602      	mov	r2, r0
 8006c6e:	460b      	mov	r3, r1
 8006c70:	e9c7 23aa 	strd	r2, r3, [r7, #680]	; 0x2a8
      absxk = Sy[iAcol + 6];
 8006c74:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8006c78:	3306      	adds	r3, #6
 8006c7a:	00db      	lsls	r3, r3, #3
 8006c7c:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8006c80:	4413      	add	r3, r2
 8006c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c86:	e9c7 239e 	strd	r2, r3, [r7, #632]	; 0x278
      temp = c[iAcol] * temp - absxk * s[iAcol];
 8006c8a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006c8e:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8006c92:	00db      	lsls	r3, r3, #3
 8006c94:	4413      	add	r3, r2
 8006c96:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006c9a:	f107 0318 	add.w	r3, r7, #24
 8006c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ca2:	f7f9 fc9b 	bl	80005dc <__aeabi_dmul>
 8006ca6:	4602      	mov	r2, r0
 8006ca8:	460b      	mov	r3, r1
 8006caa:	4614      	mov	r4, r2
 8006cac:	461d      	mov	r5, r3
 8006cae:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006cb2:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8006cb6:	00db      	lsls	r3, r3, #3
 8006cb8:	4413      	add	r3, r2
 8006cba:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006cbe:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 8006cc2:	f7f9 fc8b 	bl	80005dc <__aeabi_dmul>
 8006cc6:	4602      	mov	r2, r0
 8006cc8:	460b      	mov	r3, r1
 8006cca:	4620      	mov	r0, r4
 8006ccc:	4629      	mov	r1, r5
 8006cce:	f7f9 facd 	bl	800026c <__aeabi_dsub>
 8006cd2:	4602      	mov	r2, r0
 8006cd4:	460b      	mov	r3, r1
 8006cd6:	f107 0118 	add.w	r1, r7, #24
 8006cda:	e9c1 2300 	strd	r2, r3, [r1]
      Sy[iAcol + 6] = absxk * c[iAcol] + scale;
 8006cde:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006ce2:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8006ce6:	00db      	lsls	r3, r3, #3
 8006ce8:	4413      	add	r3, r2
 8006cea:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006cee:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 8006cf2:	f7f9 fc73 	bl	80005dc <__aeabi_dmul>
 8006cf6:	4602      	mov	r2, r0
 8006cf8:	460b      	mov	r3, r1
 8006cfa:	4610      	mov	r0, r2
 8006cfc:	4619      	mov	r1, r3
 8006cfe:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8006d02:	3306      	adds	r3, #6
 8006d04:	00db      	lsls	r3, r3, #3
 8006d06:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8006d0a:	18d4      	adds	r4, r2, r3
 8006d0c:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 8006d10:	f7f9 faae 	bl	8000270 <__adddf3>
 8006d14:	4602      	mov	r2, r0
 8006d16:	460b      	mov	r3, r1
 8006d18:	e9c4 2300 	strd	r2, r3, [r4]
    for (iAcol = 0; iAcol < 2; iAcol++) {
 8006d1c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8006d20:	3301      	adds	r3, #1
 8006d22:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8006d26:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8006d2a:	2b01      	cmp	r3, #1
 8006d2c:	dd90      	ble.n	8006c50 <UTMeanCovSqrt_C2vgLQ4W+0x6dc>
    }

    rotate_LZ7ctbe0(Sy[8], temp, &c[2], &s[2], &Sy[8]);
 8006d2e:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006d32:	3340      	adds	r3, #64	; 0x40
 8006d34:	ed93 7b00 	vldr	d7, [r3]
 8006d38:	f107 0318 	add.w	r3, r7, #24
 8006d3c:	ed93 6b00 	vldr	d6, [r3]
 8006d40:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006d44:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8006d48:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006d4c:	f103 0110 	add.w	r1, r3, #16
 8006d50:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006d54:	3310      	adds	r3, #16
 8006d56:	4618      	mov	r0, r3
 8006d58:	eeb0 1a46 	vmov.f32	s2, s12
 8006d5c:	eef0 1a66 	vmov.f32	s3, s13
 8006d60:	eeb0 0a47 	vmov.f32	s0, s14
 8006d64:	eef0 0a67 	vmov.f32	s1, s15
 8006d68:	f003 ff0c 	bl	800ab84 <rotate_LZ7ctbe0>
    kk = 0;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
    for (iAcol = 0; iAcol < 3; iAcol++) {
 8006d72:	2300      	movs	r3, #0
 8006d74:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8006d78:	e03d      	b.n	8006df6 <UTMeanCovSqrt_C2vgLQ4W+0x882>
      Sy_0[kk] = Sy[iAcol];
 8006d7a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8006d7e:	00db      	lsls	r3, r3, #3
 8006d80:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8006d84:	4413      	add	r3, r2
 8006d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d8a:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8006d8e:	f8d7 128c 	ldr.w	r1, [r7, #652]	; 0x28c
 8006d92:	00c9      	lsls	r1, r1, #3
 8006d94:	4401      	add	r1, r0
 8006d96:	e9c1 2300 	strd	r2, r3, [r1]
      Sy_0[kk + 1] = Sy[iAcol + 3];
 8006d9a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8006d9e:	3303      	adds	r3, #3
 8006da0:	00db      	lsls	r3, r3, #3
 8006da2:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8006da6:	4413      	add	r3, r2
 8006da8:	f8d7 228c 	ldr.w	r2, [r7, #652]	; 0x28c
 8006dac:	1c51      	adds	r1, r2, #1
 8006dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006db2:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8006db6:	00c9      	lsls	r1, r1, #3
 8006db8:	4401      	add	r1, r0
 8006dba:	e9c1 2300 	strd	r2, r3, [r1]
      Sy_0[kk + 2] = Sy[iAcol + 6];
 8006dbe:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8006dc2:	3306      	adds	r3, #6
 8006dc4:	00db      	lsls	r3, r3, #3
 8006dc6:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8006dca:	4413      	add	r3, r2
 8006dcc:	f8d7 228c 	ldr.w	r2, [r7, #652]	; 0x28c
 8006dd0:	1c91      	adds	r1, r2, #2
 8006dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dd6:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8006dda:	00c9      	lsls	r1, r1, #3
 8006ddc:	4401      	add	r1, r0
 8006dde:	e9c1 2300 	strd	r2, r3, [r1]
      kk += 3;
 8006de2:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8006de6:	3303      	adds	r3, #3
 8006de8:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
    for (iAcol = 0; iAcol < 3; iAcol++) {
 8006dec:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8006df0:	3301      	adds	r3, #1
 8006df2:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8006df6:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8006dfa:	2b02      	cmp	r3, #2
 8006dfc:	ddbd      	ble.n	8006d7a <UTMeanCovSqrt_C2vgLQ4W+0x806>
    }

    for (kk = 0; kk < 9; kk++) {
 8006dfe:	2300      	movs	r3, #0
 8006e00:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8006e04:	e01a      	b.n	8006e3c <UTMeanCovSqrt_C2vgLQ4W+0x8c8>
      Sy[kk] = signOOM * Sy_0[kk];
 8006e06:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8006e0a:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8006e0e:	00db      	lsls	r3, r3, #3
 8006e10:	4413      	add	r3, r2
 8006e12:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006e16:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8006e1a:	00db      	lsls	r3, r3, #3
 8006e1c:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8006e20:	18d4      	adds	r4, r2, r3
 8006e22:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 8006e26:	f7f9 fbd9 	bl	80005dc <__aeabi_dmul>
 8006e2a:	4602      	mov	r2, r0
 8006e2c:	460b      	mov	r3, r1
 8006e2e:	e9c4 2300 	strd	r2, r3, [r4]
    for (kk = 0; kk < 9; kk++) {
 8006e32:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8006e36:	3301      	adds	r3, #1
 8006e38:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8006e3c:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8006e40:	2b08      	cmp	r3, #8
 8006e42:	dde0      	ble.n	8006e06 <UTMeanCovSqrt_C2vgLQ4W+0x892>
 8006e44:	f000 bf6e 	b.w	8007d24 <UTMeanCovSqrt_C2vgLQ4W+0x17b0>
    }
  } else {
    boolean_T errorCondition;
    boolean_T guard1 = false;
 8006e48:	2300      	movs	r3, #0
 8006e4a:	f887 328a 	strb.w	r3, [r7, #650]	; 0x28a
    for (iAcol = 0; iAcol < 2; iAcol++) {
 8006e4e:	2300      	movs	r3, #0
 8006e50:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8006e54:	e011      	b.n	8006e7a <UTMeanCovSqrt_C2vgLQ4W+0x906>
      Sy[iAcol + 1] = 0.0;
 8006e56:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8006e5a:	3301      	adds	r3, #1
 8006e5c:	00db      	lsls	r3, r3, #3
 8006e5e:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8006e62:	18d1      	adds	r1, r2, r3
 8006e64:	f04f 0200 	mov.w	r2, #0
 8006e68:	f04f 0300 	mov.w	r3, #0
 8006e6c:	e9c1 2300 	strd	r2, r3, [r1]
    for (iAcol = 0; iAcol < 2; iAcol++) {
 8006e70:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8006e74:	3301      	adds	r3, #1
 8006e76:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8006e7a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8006e7e:	2b01      	cmp	r3, #1
 8006e80:	dde9      	ble.n	8006e56 <UTMeanCovSqrt_C2vgLQ4W+0x8e2>
    }

    Sy[5] = 0.0;
 8006e82:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006e86:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8006e8a:	f04f 0200 	mov.w	r2, #0
 8006e8e:	f04f 0300 	mov.w	r3, #0
 8006e92:	e9c1 2300 	strd	r2, r3, [r1]
    errorCondition = (Sy[0] == 0.0);
 8006e96:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006e9a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	461c      	mov	r4, r3
 8006ea2:	f04f 0200 	mov.w	r2, #0
 8006ea6:	f04f 0300 	mov.w	r3, #0
 8006eaa:	f7f9 fdff 	bl	8000aac <__aeabi_dcmpeq>
 8006eae:	4603      	mov	r3, r0
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d101      	bne.n	8006eb8 <UTMeanCovSqrt_C2vgLQ4W+0x944>
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	461c      	mov	r4, r3
 8006eb8:	b2e3      	uxtb	r3, r4
 8006eba:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
    if (!errorCondition) {
 8006ebe:	f897 328b 	ldrb.w	r3, [r7, #651]	; 0x28b
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d114      	bne.n	8006ef0 <UTMeanCovSqrt_C2vgLQ4W+0x97c>
      errorCondition = (Sy[4] == 0.0);
 8006ec6:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006eca:	3320      	adds	r3, #32
 8006ecc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	461c      	mov	r4, r3
 8006ed4:	f04f 0200 	mov.w	r2, #0
 8006ed8:	f04f 0300 	mov.w	r3, #0
 8006edc:	f7f9 fde6 	bl	8000aac <__aeabi_dcmpeq>
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d101      	bne.n	8006eea <UTMeanCovSqrt_C2vgLQ4W+0x976>
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	461c      	mov	r4, r3
 8006eea:	b2e3      	uxtb	r3, r4
 8006eec:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
    }

    if (!errorCondition) {
 8006ef0:	f897 328b 	ldrb.w	r3, [r7, #651]	; 0x28b
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d114      	bne.n	8006f22 <UTMeanCovSqrt_C2vgLQ4W+0x9ae>
      errorCondition = (Sy[8] == 0.0);
 8006ef8:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006efc:	3340      	adds	r3, #64	; 0x40
 8006efe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006f02:	2301      	movs	r3, #1
 8006f04:	461c      	mov	r4, r3
 8006f06:	f04f 0200 	mov.w	r2, #0
 8006f0a:	f04f 0300 	mov.w	r3, #0
 8006f0e:	f7f9 fdcd 	bl	8000aac <__aeabi_dcmpeq>
 8006f12:	4603      	mov	r3, r0
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d101      	bne.n	8006f1c <UTMeanCovSqrt_C2vgLQ4W+0x9a8>
 8006f18:	2300      	movs	r3, #0
 8006f1a:	461c      	mov	r4, r3
 8006f1c:	b2e3      	uxtb	r3, r4
 8006f1e:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
    }

    guard1 = false;
 8006f22:	2300      	movs	r3, #0
 8006f24:	f887 328a 	strb.w	r3, [r7, #650]	; 0x28a
    if (errorCondition) {
 8006f28:	f897 328b 	ldrb.w	r3, [r7, #651]	; 0x28b
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d003      	beq.n	8006f38 <UTMeanCovSqrt_C2vgLQ4W+0x9c4>
      guard1 = true;
 8006f30:	2301      	movs	r3, #1
 8006f32:	f887 328a 	strb.w	r3, [r7, #650]	; 0x28a
 8006f36:	e394      	b.n	8007662 <UTMeanCovSqrt_C2vgLQ4W+0x10ee>
    } else {
      x[2] = b_t;
 8006f38:	f107 0120 	add.w	r1, r7, #32
 8006f3c:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 8006f40:	e9c1 2304 	strd	r2, r3, [r1, #16]
      x[0] = scale / Sy[0];
 8006f44:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f4c:	e9d7 01aa 	ldrd	r0, r1, [r7, #680]	; 0x2a8
 8006f50:	f7f9 fc6e 	bl	8000830 <__aeabi_ddiv>
 8006f54:	4602      	mov	r2, r0
 8006f56:	460b      	mov	r3, r1
 8006f58:	f107 0120 	add.w	r1, r7, #32
 8006f5c:	e9c1 2300 	strd	r2, r3, [r1]
      x[1] = (absxk - x[0] * Sy[3]) / Sy[4];
 8006f60:	f107 0320 	add.w	r3, r7, #32
 8006f64:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006f68:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006f6c:	3318      	adds	r3, #24
 8006f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f72:	f7f9 fb33 	bl	80005dc <__aeabi_dmul>
 8006f76:	4602      	mov	r2, r0
 8006f78:	460b      	mov	r3, r1
 8006f7a:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 8006f7e:	f7f9 f975 	bl	800026c <__aeabi_dsub>
 8006f82:	4602      	mov	r2, r0
 8006f84:	460b      	mov	r3, r1
 8006f86:	4610      	mov	r0, r2
 8006f88:	4619      	mov	r1, r3
 8006f8a:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006f8e:	3320      	adds	r3, #32
 8006f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f94:	f7f9 fc4c 	bl	8000830 <__aeabi_ddiv>
 8006f98:	4602      	mov	r2, r0
 8006f9a:	460b      	mov	r3, r1
 8006f9c:	f107 0120 	add.w	r1, r7, #32
 8006fa0:	e9c1 2302 	strd	r2, r3, [r1, #8]
      temp = b_t;
 8006fa4:	f107 0118 	add.w	r1, r7, #24
 8006fa8:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 8006fac:	e9c1 2300 	strd	r2, r3, [r1]
      for (kk = 0; kk < 2; kk++) {
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8006fb6:	e027      	b.n	8007008 <UTMeanCovSqrt_C2vgLQ4W+0xa94>
        temp -= Sy[kk + 6] * x[kk];
 8006fb8:	f107 0318 	add.w	r3, r7, #24
 8006fbc:	e9d3 4500 	ldrd	r4, r5, [r3]
 8006fc0:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8006fc4:	3306      	adds	r3, #6
 8006fc6:	00db      	lsls	r3, r3, #3
 8006fc8:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8006fcc:	4413      	add	r3, r2
 8006fce:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006fd2:	f107 0220 	add.w	r2, r7, #32
 8006fd6:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8006fda:	00db      	lsls	r3, r3, #3
 8006fdc:	4413      	add	r3, r2
 8006fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fe2:	f7f9 fafb 	bl	80005dc <__aeabi_dmul>
 8006fe6:	4602      	mov	r2, r0
 8006fe8:	460b      	mov	r3, r1
 8006fea:	4620      	mov	r0, r4
 8006fec:	4629      	mov	r1, r5
 8006fee:	f7f9 f93d 	bl	800026c <__aeabi_dsub>
 8006ff2:	4602      	mov	r2, r0
 8006ff4:	460b      	mov	r3, r1
 8006ff6:	f107 0118 	add.w	r1, r7, #24
 8006ffa:	e9c1 2300 	strd	r2, r3, [r1]
      for (kk = 0; kk < 2; kk++) {
 8006ffe:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8007002:	3301      	adds	r3, #1
 8007004:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8007008:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 800700c:	2b01      	cmp	r3, #1
 800700e:	ddd3      	ble.n	8006fb8 <UTMeanCovSqrt_C2vgLQ4W+0xa44>
      }

      x[2] = temp / Sy[8];
 8007010:	f107 0318 	add.w	r3, r7, #24
 8007014:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007018:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 800701c:	3340      	adds	r3, #64	; 0x40
 800701e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007022:	f7f9 fc05 	bl	8000830 <__aeabi_ddiv>
 8007026:	4602      	mov	r2, r0
 8007028:	460b      	mov	r3, r1
 800702a:	f107 0120 	add.w	r1, r7, #32
 800702e:	e9c1 2304 	strd	r2, r3, [r1, #16]
      scale = 3.3121686421112381E-170;
 8007032:	f04f 0200 	mov.w	r2, #0
 8007036:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 800703a:	e9c7 23aa 	strd	r2, r3, [r7, #680]	; 0x2a8
      absxk = fabs(x[0]);
 800703e:	f107 0320 	add.w	r3, r7, #32
 8007042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007046:	4611      	mov	r1, r2
 8007048:	f8c7 1278 	str.w	r1, [r7, #632]	; 0x278
 800704c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007050:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
      if (absxk > 3.3121686421112381E-170) {
 8007054:	f04f 0200 	mov.w	r2, #0
 8007058:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 800705c:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 8007060:	f7f9 fd4c 	bl	8000afc <__aeabi_dcmpgt>
 8007064:	4603      	mov	r3, r0
 8007066:	2b00      	cmp	r3, #0
 8007068:	d00b      	beq.n	8007082 <UTMeanCovSqrt_C2vgLQ4W+0xb0e>
        temp = 1.0;
 800706a:	f107 0118 	add.w	r1, r7, #24
 800706e:	f04f 0200 	mov.w	r2, #0
 8007072:	4b85      	ldr	r3, [pc, #532]	; (8007288 <UTMeanCovSqrt_C2vgLQ4W+0xd14>)
 8007074:	e9c1 2300 	strd	r2, r3, [r1]
        scale = absxk;
 8007078:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 800707c:	e9c7 23aa 	strd	r2, r3, [r7, #680]	; 0x2a8
 8007080:	e017      	b.n	80070b2 <UTMeanCovSqrt_C2vgLQ4W+0xb3e>
      } else {
        b_t = absxk / 3.3121686421112381E-170;
 8007082:	f04f 0200 	mov.w	r2, #0
 8007086:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 800708a:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 800708e:	f7f9 fbcf 	bl	8000830 <__aeabi_ddiv>
 8007092:	4602      	mov	r2, r0
 8007094:	460b      	mov	r3, r1
 8007096:	e9c7 239c 	strd	r2, r3, [r7, #624]	; 0x270
        temp = b_t * b_t;
 800709a:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 800709e:	e9d7 019c 	ldrd	r0, r1, [r7, #624]	; 0x270
 80070a2:	f7f9 fa9b 	bl	80005dc <__aeabi_dmul>
 80070a6:	4602      	mov	r2, r0
 80070a8:	460b      	mov	r3, r1
 80070aa:	f107 0118 	add.w	r1, r7, #24
 80070ae:	e9c1 2300 	strd	r2, r3, [r1]
      }

      absxk = fabs(x[1]);
 80070b2:	f107 0320 	add.w	r3, r7, #32
 80070b6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80070ba:	4611      	mov	r1, r2
 80070bc:	f8c7 1278 	str.w	r1, [r7, #632]	; 0x278
 80070c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80070c4:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
      if (absxk > scale) {
 80070c8:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 80070cc:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 80070d0:	f7f9 fd14 	bl	8000afc <__aeabi_dcmpgt>
 80070d4:	4603      	mov	r3, r0
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d02d      	beq.n	8007136 <UTMeanCovSqrt_C2vgLQ4W+0xbc2>
        b_t = scale / absxk;
 80070da:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 80070de:	e9d7 01aa 	ldrd	r0, r1, [r7, #680]	; 0x2a8
 80070e2:	f7f9 fba5 	bl	8000830 <__aeabi_ddiv>
 80070e6:	4602      	mov	r2, r0
 80070e8:	460b      	mov	r3, r1
 80070ea:	e9c7 239c 	strd	r2, r3, [r7, #624]	; 0x270
        temp = temp * b_t * b_t + 1.0;
 80070ee:	f107 0318 	add.w	r3, r7, #24
 80070f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80070f6:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 80070fa:	f7f9 fa6f 	bl	80005dc <__aeabi_dmul>
 80070fe:	4602      	mov	r2, r0
 8007100:	460b      	mov	r3, r1
 8007102:	4610      	mov	r0, r2
 8007104:	4619      	mov	r1, r3
 8007106:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 800710a:	f7f9 fa67 	bl	80005dc <__aeabi_dmul>
 800710e:	4602      	mov	r2, r0
 8007110:	460b      	mov	r3, r1
 8007112:	4610      	mov	r0, r2
 8007114:	4619      	mov	r1, r3
 8007116:	f04f 0200 	mov.w	r2, #0
 800711a:	4b5b      	ldr	r3, [pc, #364]	; (8007288 <UTMeanCovSqrt_C2vgLQ4W+0xd14>)
 800711c:	f7f9 f8a8 	bl	8000270 <__adddf3>
 8007120:	4602      	mov	r2, r0
 8007122:	460b      	mov	r3, r1
 8007124:	f107 0118 	add.w	r1, r7, #24
 8007128:	e9c1 2300 	strd	r2, r3, [r1]
        scale = absxk;
 800712c:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 8007130:	e9c7 23aa 	strd	r2, r3, [r7, #680]	; 0x2a8
 8007134:	e01f      	b.n	8007176 <UTMeanCovSqrt_C2vgLQ4W+0xc02>
      } else {
        b_t = absxk / scale;
 8007136:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 800713a:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 800713e:	f7f9 fb77 	bl	8000830 <__aeabi_ddiv>
 8007142:	4602      	mov	r2, r0
 8007144:	460b      	mov	r3, r1
 8007146:	e9c7 239c 	strd	r2, r3, [r7, #624]	; 0x270
        temp += b_t * b_t;
 800714a:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 800714e:	e9d7 019c 	ldrd	r0, r1, [r7, #624]	; 0x270
 8007152:	f7f9 fa43 	bl	80005dc <__aeabi_dmul>
 8007156:	4602      	mov	r2, r0
 8007158:	460b      	mov	r3, r1
 800715a:	4610      	mov	r0, r2
 800715c:	4619      	mov	r1, r3
 800715e:	f107 0318 	add.w	r3, r7, #24
 8007162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007166:	f7f9 f883 	bl	8000270 <__adddf3>
 800716a:	4602      	mov	r2, r0
 800716c:	460b      	mov	r3, r1
 800716e:	f107 0118 	add.w	r1, r7, #24
 8007172:	e9c1 2300 	strd	r2, r3, [r1]
      }

      absxk = fabs(x[2]);
 8007176:	f107 0320 	add.w	r3, r7, #32
 800717a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800717e:	4611      	mov	r1, r2
 8007180:	f8c7 1278 	str.w	r1, [r7, #632]	; 0x278
 8007184:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007188:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
      if (absxk > scale) {
 800718c:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 8007190:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 8007194:	f7f9 fcb2 	bl	8000afc <__aeabi_dcmpgt>
 8007198:	4603      	mov	r3, r0
 800719a:	2b00      	cmp	r3, #0
 800719c:	d02d      	beq.n	80071fa <UTMeanCovSqrt_C2vgLQ4W+0xc86>
        b_t = scale / absxk;
 800719e:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 80071a2:	e9d7 01aa 	ldrd	r0, r1, [r7, #680]	; 0x2a8
 80071a6:	f7f9 fb43 	bl	8000830 <__aeabi_ddiv>
 80071aa:	4602      	mov	r2, r0
 80071ac:	460b      	mov	r3, r1
 80071ae:	e9c7 239c 	strd	r2, r3, [r7, #624]	; 0x270
        temp = temp * b_t * b_t + 1.0;
 80071b2:	f107 0318 	add.w	r3, r7, #24
 80071b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80071ba:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 80071be:	f7f9 fa0d 	bl	80005dc <__aeabi_dmul>
 80071c2:	4602      	mov	r2, r0
 80071c4:	460b      	mov	r3, r1
 80071c6:	4610      	mov	r0, r2
 80071c8:	4619      	mov	r1, r3
 80071ca:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 80071ce:	f7f9 fa05 	bl	80005dc <__aeabi_dmul>
 80071d2:	4602      	mov	r2, r0
 80071d4:	460b      	mov	r3, r1
 80071d6:	4610      	mov	r0, r2
 80071d8:	4619      	mov	r1, r3
 80071da:	f04f 0200 	mov.w	r2, #0
 80071de:	4b2a      	ldr	r3, [pc, #168]	; (8007288 <UTMeanCovSqrt_C2vgLQ4W+0xd14>)
 80071e0:	f7f9 f846 	bl	8000270 <__adddf3>
 80071e4:	4602      	mov	r2, r0
 80071e6:	460b      	mov	r3, r1
 80071e8:	f107 0118 	add.w	r1, r7, #24
 80071ec:	e9c1 2300 	strd	r2, r3, [r1]
        scale = absxk;
 80071f0:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 80071f4:	e9c7 23aa 	strd	r2, r3, [r7, #680]	; 0x2a8
 80071f8:	e01f      	b.n	800723a <UTMeanCovSqrt_C2vgLQ4W+0xcc6>
      } else {
        b_t = absxk / scale;
 80071fa:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 80071fe:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 8007202:	f7f9 fb15 	bl	8000830 <__aeabi_ddiv>
 8007206:	4602      	mov	r2, r0
 8007208:	460b      	mov	r3, r1
 800720a:	e9c7 239c 	strd	r2, r3, [r7, #624]	; 0x270
        temp += b_t * b_t;
 800720e:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 8007212:	e9d7 019c 	ldrd	r0, r1, [r7, #624]	; 0x270
 8007216:	f7f9 f9e1 	bl	80005dc <__aeabi_dmul>
 800721a:	4602      	mov	r2, r0
 800721c:	460b      	mov	r3, r1
 800721e:	4610      	mov	r0, r2
 8007220:	4619      	mov	r1, r3
 8007222:	f107 0318 	add.w	r3, r7, #24
 8007226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800722a:	f7f9 f821 	bl	8000270 <__adddf3>
 800722e:	4602      	mov	r2, r0
 8007230:	460b      	mov	r3, r1
 8007232:	f107 0118 	add.w	r1, r7, #24
 8007236:	e9c1 2300 	strd	r2, r3, [r1]
      }

      temp = scale * sqrt(temp);
 800723a:	f107 0318 	add.w	r3, r7, #24
 800723e:	ed93 7b00 	vldr	d7, [r3]
 8007242:	eeb0 0a47 	vmov.f32	s0, s14
 8007246:	eef0 0a67 	vmov.f32	s1, s15
 800724a:	f00f fe4d 	bl	8016ee8 <sqrt>
 800724e:	ec51 0b10 	vmov	r0, r1, d0
 8007252:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 8007256:	f7f9 f9c1 	bl	80005dc <__aeabi_dmul>
 800725a:	4602      	mov	r2, r0
 800725c:	460b      	mov	r3, r1
 800725e:	f107 0118 	add.w	r1, r7, #24
 8007262:	e9c1 2300 	strd	r2, r3, [r1]
      if (temp >= 1.0) {
 8007266:	f107 0318 	add.w	r3, r7, #24
 800726a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800726e:	f04f 0200 	mov.w	r2, #0
 8007272:	4b05      	ldr	r3, [pc, #20]	; (8007288 <UTMeanCovSqrt_C2vgLQ4W+0xd14>)
 8007274:	f7f9 fc38 	bl	8000ae8 <__aeabi_dcmpge>
 8007278:	4603      	mov	r3, r0
 800727a:	2b00      	cmp	r3, #0
 800727c:	d006      	beq.n	800728c <UTMeanCovSqrt_C2vgLQ4W+0xd18>
        guard1 = true;
 800727e:	2301      	movs	r3, #1
 8007280:	f887 328a 	strb.w	r3, [r7, #650]	; 0x28a
 8007284:	e1ed      	b.n	8007662 <UTMeanCovSqrt_C2vgLQ4W+0x10ee>
 8007286:	bf00      	nop
 8007288:	3ff00000 	.word	0x3ff00000
      } else {
        rotate_LZ7ctbe0(sqrt(1.0 - temp * temp), x[2], &c[2], &s[2], &temp);
 800728c:	f107 0318 	add.w	r3, r7, #24
 8007290:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007294:	f107 0318 	add.w	r3, r7, #24
 8007298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800729c:	f7f9 f99e 	bl	80005dc <__aeabi_dmul>
 80072a0:	4602      	mov	r2, r0
 80072a2:	460b      	mov	r3, r1
 80072a4:	f04f 0000 	mov.w	r0, #0
 80072a8:	49b4      	ldr	r1, [pc, #720]	; (800757c <UTMeanCovSqrt_C2vgLQ4W+0x1008>)
 80072aa:	f7f8 ffdf 	bl	800026c <__aeabi_dsub>
 80072ae:	4602      	mov	r2, r0
 80072b0:	460b      	mov	r3, r1
 80072b2:	ec43 2b17 	vmov	d7, r2, r3
 80072b6:	eeb0 0a47 	vmov.f32	s0, s14
 80072ba:	eef0 0a67 	vmov.f32	s1, s15
 80072be:	f00f fe13 	bl	8016ee8 <sqrt>
 80072c2:	eeb0 6a40 	vmov.f32	s12, s0
 80072c6:	eef0 6a60 	vmov.f32	s13, s1
 80072ca:	f107 0320 	add.w	r3, r7, #32
 80072ce:	ed93 7b04 	vldr	d7, [r3, #16]
 80072d2:	f107 0218 	add.w	r2, r7, #24
 80072d6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80072da:	f103 0110 	add.w	r1, r3, #16
 80072de:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80072e2:	3310      	adds	r3, #16
 80072e4:	4618      	mov	r0, r3
 80072e6:	eeb0 1a47 	vmov.f32	s2, s14
 80072ea:	eef0 1a67 	vmov.f32	s3, s15
 80072ee:	eeb0 0a46 	vmov.f32	s0, s12
 80072f2:	eef0 0a66 	vmov.f32	s1, s13
 80072f6:	f003 fc45 	bl	800ab84 <rotate_LZ7ctbe0>
        x[2] = 0.0;
 80072fa:	f107 0120 	add.w	r1, r7, #32
 80072fe:	f04f 0200 	mov.w	r2, #0
 8007302:	f04f 0300 	mov.w	r3, #0
 8007306:	e9c1 2304 	strd	r2, r3, [r1, #16]
        rotate_LZ7ctbe0(temp, x[1], &c[1], &s[1], &temp);
 800730a:	f107 0318 	add.w	r3, r7, #24
 800730e:	ed93 7b00 	vldr	d7, [r3]
 8007312:	f107 0320 	add.w	r3, r7, #32
 8007316:	ed93 6b02 	vldr	d6, [r3, #8]
 800731a:	f107 0218 	add.w	r2, r7, #24
 800731e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007322:	f103 0108 	add.w	r1, r3, #8
 8007326:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800732a:	3308      	adds	r3, #8
 800732c:	4618      	mov	r0, r3
 800732e:	eeb0 1a46 	vmov.f32	s2, s12
 8007332:	eef0 1a66 	vmov.f32	s3, s13
 8007336:	eeb0 0a47 	vmov.f32	s0, s14
 800733a:	eef0 0a67 	vmov.f32	s1, s15
 800733e:	f003 fc21 	bl	800ab84 <rotate_LZ7ctbe0>
        x[1] = 0.0;
 8007342:	f107 0120 	add.w	r1, r7, #32
 8007346:	f04f 0200 	mov.w	r2, #0
 800734a:	f04f 0300 	mov.w	r3, #0
 800734e:	e9c1 2302 	strd	r2, r3, [r1, #8]
        rotate_LZ7ctbe0(temp, x[0], &c[0], &s[0], &temp);
 8007352:	f107 0318 	add.w	r3, r7, #24
 8007356:	ed93 7b00 	vldr	d7, [r3]
 800735a:	f107 0320 	add.w	r3, r7, #32
 800735e:	ed93 6b00 	vldr	d6, [r3]
 8007362:	f107 0218 	add.w	r2, r7, #24
 8007366:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800736a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800736e:	4618      	mov	r0, r3
 8007370:	eeb0 1a46 	vmov.f32	s2, s12
 8007374:	eef0 1a66 	vmov.f32	s3, s13
 8007378:	eeb0 0a47 	vmov.f32	s0, s14
 800737c:	eef0 0a67 	vmov.f32	s1, s15
 8007380:	f003 fc00 	bl	800ab84 <rotate_LZ7ctbe0>
        x[0] = 0.0;
 8007384:	f107 0120 	add.w	r1, r7, #32
 8007388:	f04f 0200 	mov.w	r2, #0
 800738c:	f04f 0300 	mov.w	r3, #0
 8007390:	e9c1 2300 	strd	r2, r3, [r1]
        for (iAcol = 0; iAcol + 1 > 0; iAcol--) {
 8007394:	2300      	movs	r3, #0
 8007396:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 800739a:	e072      	b.n	8007482 <UTMeanCovSqrt_C2vgLQ4W+0xf0e>
          temp = s[iAcol] * Sy[iAcol];
 800739c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80073a0:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80073a4:	00db      	lsls	r3, r3, #3
 80073a6:	4413      	add	r3, r2
 80073a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80073ac:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80073b0:	00db      	lsls	r3, r3, #3
 80073b2:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 80073b6:	4413      	add	r3, r2
 80073b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073bc:	f7f9 f90e 	bl	80005dc <__aeabi_dmul>
 80073c0:	4602      	mov	r2, r0
 80073c2:	460b      	mov	r3, r1
 80073c4:	f107 0118 	add.w	r1, r7, #24
 80073c8:	e9c1 2300 	strd	r2, r3, [r1]
          Sy[iAcol] = c[iAcol] * Sy[iAcol] - s[iAcol] * x[0];
 80073cc:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80073d0:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80073d4:	00db      	lsls	r3, r3, #3
 80073d6:	4413      	add	r3, r2
 80073d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80073dc:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80073e0:	00db      	lsls	r3, r3, #3
 80073e2:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 80073e6:	4413      	add	r3, r2
 80073e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ec:	f7f9 f8f6 	bl	80005dc <__aeabi_dmul>
 80073f0:	4602      	mov	r2, r0
 80073f2:	460b      	mov	r3, r1
 80073f4:	4690      	mov	r8, r2
 80073f6:	4699      	mov	r9, r3
 80073f8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80073fc:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8007400:	00db      	lsls	r3, r3, #3
 8007402:	4413      	add	r3, r2
 8007404:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007408:	f107 0320 	add.w	r3, r7, #32
 800740c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007410:	f7f9 f8e4 	bl	80005dc <__aeabi_dmul>
 8007414:	4602      	mov	r2, r0
 8007416:	460b      	mov	r3, r1
 8007418:	4610      	mov	r0, r2
 800741a:	4619      	mov	r1, r3
 800741c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8007420:	00db      	lsls	r3, r3, #3
 8007422:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8007426:	18d4      	adds	r4, r2, r3
 8007428:	4602      	mov	r2, r0
 800742a:	460b      	mov	r3, r1
 800742c:	4640      	mov	r0, r8
 800742e:	4649      	mov	r1, r9
 8007430:	f7f8 ff1c 	bl	800026c <__aeabi_dsub>
 8007434:	4602      	mov	r2, r0
 8007436:	460b      	mov	r3, r1
 8007438:	e9c4 2300 	strd	r2, r3, [r4]
          x[0] = c[iAcol] * x[0] + temp;
 800743c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007440:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8007444:	00db      	lsls	r3, r3, #3
 8007446:	4413      	add	r3, r2
 8007448:	e9d3 0100 	ldrd	r0, r1, [r3]
 800744c:	f107 0320 	add.w	r3, r7, #32
 8007450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007454:	f7f9 f8c2 	bl	80005dc <__aeabi_dmul>
 8007458:	4602      	mov	r2, r0
 800745a:	460b      	mov	r3, r1
 800745c:	4610      	mov	r0, r2
 800745e:	4619      	mov	r1, r3
 8007460:	f107 0318 	add.w	r3, r7, #24
 8007464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007468:	f7f8 ff02 	bl	8000270 <__adddf3>
 800746c:	4602      	mov	r2, r0
 800746e:	460b      	mov	r3, r1
 8007470:	f107 0120 	add.w	r1, r7, #32
 8007474:	e9c1 2300 	strd	r2, r3, [r1]
        for (iAcol = 0; iAcol + 1 > 0; iAcol--) {
 8007478:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800747c:	3b01      	subs	r3, #1
 800747e:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8007482:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8007486:	2b00      	cmp	r3, #0
 8007488:	da88      	bge.n	800739c <UTMeanCovSqrt_C2vgLQ4W+0xe28>
        }

        for (iAcol = 1; iAcol + 1 > 0; iAcol--) {
 800748a:	2301      	movs	r3, #1
 800748c:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8007490:	e06c      	b.n	800756c <UTMeanCovSqrt_C2vgLQ4W+0xff8>
          absxk = Sy[iAcol + 3];
 8007492:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8007496:	3303      	adds	r3, #3
 8007498:	00db      	lsls	r3, r3, #3
 800749a:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 800749e:	4413      	add	r3, r2
 80074a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074a4:	e9c7 239e 	strd	r2, r3, [r7, #632]	; 0x278
          Sy[iAcol + 3] = absxk * c[iAcol] - s[iAcol] * x[1];
 80074a8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80074ac:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80074b0:	00db      	lsls	r3, r3, #3
 80074b2:	4413      	add	r3, r2
 80074b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80074b8:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 80074bc:	f7f9 f88e 	bl	80005dc <__aeabi_dmul>
 80074c0:	4602      	mov	r2, r0
 80074c2:	460b      	mov	r3, r1
 80074c4:	4690      	mov	r8, r2
 80074c6:	4699      	mov	r9, r3
 80074c8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80074cc:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80074d0:	00db      	lsls	r3, r3, #3
 80074d2:	4413      	add	r3, r2
 80074d4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80074d8:	f107 0320 	add.w	r3, r7, #32
 80074dc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80074e0:	f7f9 f87c 	bl	80005dc <__aeabi_dmul>
 80074e4:	4602      	mov	r2, r0
 80074e6:	460b      	mov	r3, r1
 80074e8:	4610      	mov	r0, r2
 80074ea:	4619      	mov	r1, r3
 80074ec:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80074f0:	3303      	adds	r3, #3
 80074f2:	00db      	lsls	r3, r3, #3
 80074f4:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 80074f8:	18d4      	adds	r4, r2, r3
 80074fa:	4602      	mov	r2, r0
 80074fc:	460b      	mov	r3, r1
 80074fe:	4640      	mov	r0, r8
 8007500:	4649      	mov	r1, r9
 8007502:	f7f8 feb3 	bl	800026c <__aeabi_dsub>
 8007506:	4602      	mov	r2, r0
 8007508:	460b      	mov	r3, r1
 800750a:	e9c4 2300 	strd	r2, r3, [r4]
          x[1] = c[iAcol] * x[1] + absxk * s[iAcol];
 800750e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007512:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8007516:	00db      	lsls	r3, r3, #3
 8007518:	4413      	add	r3, r2
 800751a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800751e:	f107 0320 	add.w	r3, r7, #32
 8007522:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8007526:	f7f9 f859 	bl	80005dc <__aeabi_dmul>
 800752a:	4602      	mov	r2, r0
 800752c:	460b      	mov	r3, r1
 800752e:	4614      	mov	r4, r2
 8007530:	461d      	mov	r5, r3
 8007532:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8007536:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800753a:	00db      	lsls	r3, r3, #3
 800753c:	4413      	add	r3, r2
 800753e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007542:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 8007546:	f7f9 f849 	bl	80005dc <__aeabi_dmul>
 800754a:	4602      	mov	r2, r0
 800754c:	460b      	mov	r3, r1
 800754e:	4620      	mov	r0, r4
 8007550:	4629      	mov	r1, r5
 8007552:	f7f8 fe8d 	bl	8000270 <__adddf3>
 8007556:	4602      	mov	r2, r0
 8007558:	460b      	mov	r3, r1
 800755a:	f107 0120 	add.w	r1, r7, #32
 800755e:	e9c1 2302 	strd	r2, r3, [r1, #8]
        for (iAcol = 1; iAcol + 1 > 0; iAcol--) {
 8007562:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8007566:	3b01      	subs	r3, #1
 8007568:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 800756c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8007570:	2b00      	cmp	r3, #0
 8007572:	da8e      	bge.n	8007492 <UTMeanCovSqrt_C2vgLQ4W+0xf1e>
        }

        for (iAcol = 2; iAcol + 1 > 0; iAcol--) {
 8007574:	2302      	movs	r3, #2
 8007576:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 800757a:	e06e      	b.n	800765a <UTMeanCovSqrt_C2vgLQ4W+0x10e6>
 800757c:	3ff00000 	.word	0x3ff00000
          absxk = Sy[iAcol + 6];
 8007580:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8007584:	3306      	adds	r3, #6
 8007586:	00db      	lsls	r3, r3, #3
 8007588:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 800758c:	4413      	add	r3, r2
 800758e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007592:	e9c7 239e 	strd	r2, r3, [r7, #632]	; 0x278
          Sy[iAcol + 6] = absxk * c[iAcol] - s[iAcol] * x[2];
 8007596:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800759a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800759e:	00db      	lsls	r3, r3, #3
 80075a0:	4413      	add	r3, r2
 80075a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80075a6:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 80075aa:	f7f9 f817 	bl	80005dc <__aeabi_dmul>
 80075ae:	4602      	mov	r2, r0
 80075b0:	460b      	mov	r3, r1
 80075b2:	4690      	mov	r8, r2
 80075b4:	4699      	mov	r9, r3
 80075b6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80075ba:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80075be:	00db      	lsls	r3, r3, #3
 80075c0:	4413      	add	r3, r2
 80075c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80075c6:	f107 0320 	add.w	r3, r7, #32
 80075ca:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80075ce:	f7f9 f805 	bl	80005dc <__aeabi_dmul>
 80075d2:	4602      	mov	r2, r0
 80075d4:	460b      	mov	r3, r1
 80075d6:	4610      	mov	r0, r2
 80075d8:	4619      	mov	r1, r3
 80075da:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80075de:	3306      	adds	r3, #6
 80075e0:	00db      	lsls	r3, r3, #3
 80075e2:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 80075e6:	18d4      	adds	r4, r2, r3
 80075e8:	4602      	mov	r2, r0
 80075ea:	460b      	mov	r3, r1
 80075ec:	4640      	mov	r0, r8
 80075ee:	4649      	mov	r1, r9
 80075f0:	f7f8 fe3c 	bl	800026c <__aeabi_dsub>
 80075f4:	4602      	mov	r2, r0
 80075f6:	460b      	mov	r3, r1
 80075f8:	e9c4 2300 	strd	r2, r3, [r4]
          x[2] = c[iAcol] * x[2] + absxk * s[iAcol];
 80075fc:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007600:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8007604:	00db      	lsls	r3, r3, #3
 8007606:	4413      	add	r3, r2
 8007608:	e9d3 0100 	ldrd	r0, r1, [r3]
 800760c:	f107 0320 	add.w	r3, r7, #32
 8007610:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8007614:	f7f8 ffe2 	bl	80005dc <__aeabi_dmul>
 8007618:	4602      	mov	r2, r0
 800761a:	460b      	mov	r3, r1
 800761c:	4614      	mov	r4, r2
 800761e:	461d      	mov	r5, r3
 8007620:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8007624:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8007628:	00db      	lsls	r3, r3, #3
 800762a:	4413      	add	r3, r2
 800762c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007630:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 8007634:	f7f8 ffd2 	bl	80005dc <__aeabi_dmul>
 8007638:	4602      	mov	r2, r0
 800763a:	460b      	mov	r3, r1
 800763c:	4620      	mov	r0, r4
 800763e:	4629      	mov	r1, r5
 8007640:	f7f8 fe16 	bl	8000270 <__adddf3>
 8007644:	4602      	mov	r2, r0
 8007646:	460b      	mov	r3, r1
 8007648:	f107 0120 	add.w	r1, r7, #32
 800764c:	e9c1 2304 	strd	r2, r3, [r1, #16]
        for (iAcol = 2; iAcol + 1 > 0; iAcol--) {
 8007650:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8007654:	3b01      	subs	r3, #1
 8007656:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 800765a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800765e:	2b00      	cmp	r3, #0
 8007660:	da8e      	bge.n	8007580 <UTMeanCovSqrt_C2vgLQ4W+0x100c>
        }
      }
    }

    if (guard1) {
 8007662:	f897 328a 	ldrb.w	r3, [r7, #650]	; 0x28a
 8007666:	2b00      	cmp	r3, #0
 8007668:	f000 82f0 	beq.w	8007c4c <UTMeanCovSqrt_C2vgLQ4W+0x16d8>
      boolean_T exitg2;
      kk = 0;
 800766c:	2300      	movs	r3, #0
 800766e:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
      for (iAcol = 0; iAcol < 3; iAcol++) {
 8007672:	2300      	movs	r3, #0
 8007674:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8007678:	e0d3      	b.n	8007822 <UTMeanCovSqrt_C2vgLQ4W+0x12ae>
        i_1 = 0;
 800767a:	2300      	movs	r3, #0
 800767c:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
        for (i = 0; i < 3; i++) {
 8007680:	2300      	movs	r3, #0
 8007682:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 8007686:	e0bd      	b.n	8007804 <UTMeanCovSqrt_C2vgLQ4W+0x1290>
          Sy_tmp = i_1 + iAcol;
 8007688:	f8d7 2290 	ldr.w	r2, [r7, #656]	; 0x290
 800768c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8007690:	4413      	add	r3, r2
 8007692:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
          Sy_0[Sy_tmp] = 0.0;
 8007696:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800769a:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 800769e:	00db      	lsls	r3, r3, #3
 80076a0:	18d1      	adds	r1, r2, r3
 80076a2:	f04f 0200 	mov.w	r2, #0
 80076a6:	f04f 0300 	mov.w	r3, #0
 80076aa:	e9c1 2300 	strd	r2, r3, [r1]
          Sy_0[Sy_tmp] += Sy[kk] * Sy[i_1];
 80076ae:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80076b2:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 80076b6:	00db      	lsls	r3, r3, #3
 80076b8:	4413      	add	r3, r2
 80076ba:	e9d3 4500 	ldrd	r4, r5, [r3]
 80076be:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80076c2:	00db      	lsls	r3, r3, #3
 80076c4:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 80076c8:	4413      	add	r3, r2
 80076ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80076ce:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 80076d2:	00db      	lsls	r3, r3, #3
 80076d4:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 80076d8:	4413      	add	r3, r2
 80076da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076de:	f7f8 ff7d 	bl	80005dc <__aeabi_dmul>
 80076e2:	4602      	mov	r2, r0
 80076e4:	460b      	mov	r3, r1
 80076e6:	4620      	mov	r0, r4
 80076e8:	4629      	mov	r1, r5
 80076ea:	f7f8 fdc1 	bl	8000270 <__adddf3>
 80076ee:	4602      	mov	r2, r0
 80076f0:	460b      	mov	r3, r1
 80076f2:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 80076f6:	f8d7 1264 	ldr.w	r1, [r7, #612]	; 0x264
 80076fa:	00c9      	lsls	r1, r1, #3
 80076fc:	4401      	add	r1, r0
 80076fe:	e9c1 2300 	strd	r2, r3, [r1]
          Sy_0[Sy_tmp] += Sy[kk + 1] * Sy[i_1 + 1];
 8007702:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8007706:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 800770a:	00db      	lsls	r3, r3, #3
 800770c:	4413      	add	r3, r2
 800770e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8007712:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8007716:	3301      	adds	r3, #1
 8007718:	00db      	lsls	r3, r3, #3
 800771a:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 800771e:	4413      	add	r3, r2
 8007720:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007724:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8007728:	3301      	adds	r3, #1
 800772a:	00db      	lsls	r3, r3, #3
 800772c:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8007730:	4413      	add	r3, r2
 8007732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007736:	f7f8 ff51 	bl	80005dc <__aeabi_dmul>
 800773a:	4602      	mov	r2, r0
 800773c:	460b      	mov	r3, r1
 800773e:	4620      	mov	r0, r4
 8007740:	4629      	mov	r1, r5
 8007742:	f7f8 fd95 	bl	8000270 <__adddf3>
 8007746:	4602      	mov	r2, r0
 8007748:	460b      	mov	r3, r1
 800774a:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 800774e:	f8d7 1264 	ldr.w	r1, [r7, #612]	; 0x264
 8007752:	00c9      	lsls	r1, r1, #3
 8007754:	4401      	add	r1, r0
 8007756:	e9c1 2300 	strd	r2, r3, [r1]
          Sy_0[Sy_tmp] += Sy[kk + 2] * Sy[i_1 + 2];
 800775a:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800775e:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8007762:	00db      	lsls	r3, r3, #3
 8007764:	4413      	add	r3, r2
 8007766:	e9d3 4500 	ldrd	r4, r5, [r3]
 800776a:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 800776e:	3302      	adds	r3, #2
 8007770:	00db      	lsls	r3, r3, #3
 8007772:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8007776:	4413      	add	r3, r2
 8007778:	e9d3 0100 	ldrd	r0, r1, [r3]
 800777c:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8007780:	3302      	adds	r3, #2
 8007782:	00db      	lsls	r3, r3, #3
 8007784:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8007788:	4413      	add	r3, r2
 800778a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800778e:	f7f8 ff25 	bl	80005dc <__aeabi_dmul>
 8007792:	4602      	mov	r2, r0
 8007794:	460b      	mov	r3, r1
 8007796:	4620      	mov	r0, r4
 8007798:	4629      	mov	r1, r5
 800779a:	f7f8 fd69 	bl	8000270 <__adddf3>
 800779e:	4602      	mov	r2, r0
 80077a0:	460b      	mov	r3, r1
 80077a2:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 80077a6:	f8d7 1264 	ldr.w	r1, [r7, #612]	; 0x264
 80077aa:	00c9      	lsls	r1, r1, #3
 80077ac:	4401      	add	r1, r0
 80077ae:	e9c1 2300 	strd	r2, r3, [r1]
          Y1_0[i + kk] = Y1[i] * Y1[iAcol];
 80077b2:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80077b6:	00db      	lsls	r3, r3, #3
 80077b8:	1d3a      	adds	r2, r7, #4
 80077ba:	6812      	ldr	r2, [r2, #0]
 80077bc:	4413      	add	r3, r2
 80077be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80077c2:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80077c6:	00db      	lsls	r3, r3, #3
 80077c8:	1d3a      	adds	r2, r7, #4
 80077ca:	6812      	ldr	r2, [r2, #0]
 80077cc:	4413      	add	r3, r2
 80077ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077d2:	f8d7 529c 	ldr.w	r5, [r7, #668]	; 0x29c
 80077d6:	f8d7 428c 	ldr.w	r4, [r7, #652]	; 0x28c
 80077da:	442c      	add	r4, r5
 80077dc:	f7f8 fefe 	bl	80005dc <__aeabi_dmul>
 80077e0:	4602      	mov	r2, r0
 80077e2:	460b      	mov	r3, r1
 80077e4:	f107 0068 	add.w	r0, r7, #104	; 0x68
 80077e8:	00e1      	lsls	r1, r4, #3
 80077ea:	4401      	add	r1, r0
 80077ec:	e9c1 2300 	strd	r2, r3, [r1]
          i_1 += 3;
 80077f0:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 80077f4:	3303      	adds	r3, #3
 80077f6:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
        for (i = 0; i < 3; i++) {
 80077fa:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80077fe:	3301      	adds	r3, #1
 8007800:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 8007804:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8007808:	2b02      	cmp	r3, #2
 800780a:	f77f af3d 	ble.w	8007688 <UTMeanCovSqrt_C2vgLQ4W+0x1114>
        }

        kk += 3;
 800780e:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8007812:	3303      	adds	r3, #3
 8007814:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
      for (iAcol = 0; iAcol < 3; iAcol++) {
 8007818:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800781c:	3301      	adds	r3, #1
 800781e:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8007822:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8007826:	2b02      	cmp	r3, #2
 8007828:	f77f af27 	ble.w	800767a <UTMeanCovSqrt_C2vgLQ4W+0x1106>
      }

      errorCondition = true;
 800782c:	2301      	movs	r3, #1
 800782e:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
      for (iAcol = 0; iAcol < 9; iAcol++) {
 8007832:	2300      	movs	r3, #0
 8007834:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8007838:	e049      	b.n	80078ce <UTMeanCovSqrt_C2vgLQ4W+0x135a>
        temp = Sy_0[iAcol] - Y1_0[iAcol];
 800783a:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800783e:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8007842:	00db      	lsls	r3, r3, #3
 8007844:	4413      	add	r3, r2
 8007846:	e9d3 0100 	ldrd	r0, r1, [r3]
 800784a:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800784e:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8007852:	00db      	lsls	r3, r3, #3
 8007854:	4413      	add	r3, r2
 8007856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800785a:	f7f8 fd07 	bl	800026c <__aeabi_dsub>
 800785e:	4602      	mov	r2, r0
 8007860:	460b      	mov	r3, r1
 8007862:	f107 0118 	add.w	r1, r7, #24
 8007866:	e9c1 2300 	strd	r2, r3, [r1]
        if (errorCondition && (rtIsInf(temp) || rtIsNaN(temp))) {
 800786a:	f897 328b 	ldrb.w	r3, [r7, #651]	; 0x28b
 800786e:	2b00      	cmp	r3, #0
 8007870:	d01c      	beq.n	80078ac <UTMeanCovSqrt_C2vgLQ4W+0x1338>
 8007872:	f107 0318 	add.w	r3, r7, #24
 8007876:	ed93 7b00 	vldr	d7, [r3]
 800787a:	eeb0 0a47 	vmov.f32	s0, s14
 800787e:	eef0 0a67 	vmov.f32	s1, s15
 8007882:	f003 fbf3 	bl	800b06c <rtIsInf>
 8007886:	4603      	mov	r3, r0
 8007888:	2b00      	cmp	r3, #0
 800788a:	d10c      	bne.n	80078a6 <UTMeanCovSqrt_C2vgLQ4W+0x1332>
 800788c:	f107 0318 	add.w	r3, r7, #24
 8007890:	ed93 7b00 	vldr	d7, [r3]
 8007894:	eeb0 0a47 	vmov.f32	s0, s14
 8007898:	eef0 0a67 	vmov.f32	s1, s15
 800789c:	f003 fc0a 	bl	800b0b4 <rtIsNaN>
 80078a0:	4603      	mov	r3, r0
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d002      	beq.n	80078ac <UTMeanCovSqrt_C2vgLQ4W+0x1338>
          errorCondition = false;
 80078a6:	2300      	movs	r3, #0
 80078a8:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
        }

        Ss[iAcol] = temp;
 80078ac:	f107 0318 	add.w	r3, r7, #24
 80078b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078b4:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 80078b8:	f8d7 1298 	ldr.w	r1, [r7, #664]	; 0x298
 80078bc:	00c9      	lsls	r1, r1, #3
 80078be:	4401      	add	r1, r0
 80078c0:	e9c1 2300 	strd	r2, r3, [r1]
      for (iAcol = 0; iAcol < 9; iAcol++) {
 80078c4:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80078c8:	3301      	adds	r3, #1
 80078ca:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 80078ce:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80078d2:	2b08      	cmp	r3, #8
 80078d4:	ddb1      	ble.n	800783a <UTMeanCovSqrt_C2vgLQ4W+0x12c6>
      }

      if (errorCondition) {
 80078d6:	f897 328b 	ldrb.w	r3, [r7, #651]	; 0x28b
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d00a      	beq.n	80078f4 <UTMeanCovSqrt_C2vgLQ4W+0x1380>
        svd_u3DvUgOe(Ss, Y1_0, s, Sy_0);
 80078de:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80078e2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80078e6:	f107 0168 	add.w	r1, r7, #104	; 0x68
 80078ea:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 80078ee:	f003 fc33 	bl	800b158 <svd_u3DvUgOe>
 80078f2:	e02c      	b.n	800794e <UTMeanCovSqrt_C2vgLQ4W+0x13da>
      } else {
        s[0] = (rtNaN);
 80078f4:	4bbc      	ldr	r3, [pc, #752]	; (8007be8 <UTMeanCovSqrt_C2vgLQ4W+0x1674>)
 80078f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078fa:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80078fe:	e9c1 2300 	strd	r2, r3, [r1]
        s[1] = (rtNaN);
 8007902:	4bb9      	ldr	r3, [pc, #740]	; (8007be8 <UTMeanCovSqrt_C2vgLQ4W+0x1674>)
 8007904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007908:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800790c:	e9c1 2302 	strd	r2, r3, [r1, #8]
        s[2] = (rtNaN);
 8007910:	4bb5      	ldr	r3, [pc, #724]	; (8007be8 <UTMeanCovSqrt_C2vgLQ4W+0x1674>)
 8007912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007916:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800791a:	e9c1 2304 	strd	r2, r3, [r1, #16]
        for (kk = 0; kk < 9; kk++) {
 800791e:	2300      	movs	r3, #0
 8007920:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8007924:	e00f      	b.n	8007946 <UTMeanCovSqrt_C2vgLQ4W+0x13d2>
          Sy_0[kk] = (rtNaN);
 8007926:	4bb0      	ldr	r3, [pc, #704]	; (8007be8 <UTMeanCovSqrt_C2vgLQ4W+0x1674>)
 8007928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800792c:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8007930:	f8d7 128c 	ldr.w	r1, [r7, #652]	; 0x28c
 8007934:	00c9      	lsls	r1, r1, #3
 8007936:	4401      	add	r1, r0
 8007938:	e9c1 2300 	strd	r2, r3, [r1]
        for (kk = 0; kk < 9; kk++) {
 800793c:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8007940:	3301      	adds	r3, #1
 8007942:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8007946:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 800794a:	2b08      	cmp	r3, #8
 800794c:	ddeb      	ble.n	8007926 <UTMeanCovSqrt_C2vgLQ4W+0x13b2>
        }
      }

      memset(&Ss[0], 0, 9U * sizeof(real_T));
 800794e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8007952:	2248      	movs	r2, #72	; 0x48
 8007954:	2100      	movs	r1, #0
 8007956:	4618      	mov	r0, r3
 8007958:	f00f f90e 	bl	8016b78 <memset>
      Ss[0] = s[0];
 800795c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007964:	f107 01f8 	add.w	r1, r7, #248	; 0xf8
 8007968:	e9c1 2300 	strd	r2, r3, [r1]
      Ss[4] = s[1];
 800796c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007970:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8007974:	f107 01f8 	add.w	r1, r7, #248	; 0xf8
 8007978:	e9c1 2308 	strd	r2, r3, [r1, #32]
      Ss[8] = s[2];
 800797c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007980:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8007984:	f107 01f8 	add.w	r1, r7, #248	; 0xf8
 8007988:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
      for (kk = 0; kk < 9; kk++) {
 800798c:	2300      	movs	r3, #0
 800798e:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8007992:	e01e      	b.n	80079d2 <UTMeanCovSqrt_C2vgLQ4W+0x145e>
        Ss[kk] = sqrt(Ss[kk]);
 8007994:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8007998:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 800799c:	00db      	lsls	r3, r3, #3
 800799e:	4413      	add	r3, r2
 80079a0:	ed93 7b00 	vldr	d7, [r3]
 80079a4:	eeb0 0a47 	vmov.f32	s0, s14
 80079a8:	eef0 0a67 	vmov.f32	s1, s15
 80079ac:	f00f fa9c 	bl	8016ee8 <sqrt>
 80079b0:	eeb0 7a40 	vmov.f32	s14, s0
 80079b4:	eef0 7a60 	vmov.f32	s15, s1
 80079b8:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 80079bc:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80079c0:	00db      	lsls	r3, r3, #3
 80079c2:	4413      	add	r3, r2
 80079c4:	ed83 7b00 	vstr	d7, [r3]
      for (kk = 0; kk < 9; kk++) {
 80079c8:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80079cc:	3301      	adds	r3, #1
 80079ce:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 80079d2:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80079d6:	2b08      	cmp	r3, #8
 80079d8:	dddc      	ble.n	8007994 <UTMeanCovSqrt_C2vgLQ4W+0x1420>
      }

      kk = 0;
 80079da:	2300      	movs	r3, #0
 80079dc:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
      for (iAcol = 0; iAcol < 3; iAcol++) {
 80079e0:	2300      	movs	r3, #0
 80079e2:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 80079e6:	e0c0      	b.n	8007b6a <UTMeanCovSqrt_C2vgLQ4W+0x15f6>
        i_1 = 0;
 80079e8:	2300      	movs	r3, #0
 80079ea:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
        for (i = 0; i < 3; i++) {
 80079ee:	2300      	movs	r3, #0
 80079f0:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 80079f4:	e0aa      	b.n	8007b4c <UTMeanCovSqrt_C2vgLQ4W+0x15d8>
          Sy_tmp = i_1 + iAcol;
 80079f6:	f8d7 2290 	ldr.w	r2, [r7, #656]	; 0x290
 80079fa:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80079fe:	4413      	add	r3, r2
 8007a00:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
          Sy[Sy_tmp] = 0.0;
 8007a04:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8007a08:	00db      	lsls	r3, r3, #3
 8007a0a:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8007a0e:	18d1      	adds	r1, r2, r3
 8007a10:	f04f 0200 	mov.w	r2, #0
 8007a14:	f04f 0300 	mov.w	r3, #0
 8007a18:	e9c1 2300 	strd	r2, r3, [r1]
          Sy[Sy_tmp] += Ss[kk] * Sy_0[i];
 8007a1c:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8007a20:	00db      	lsls	r3, r3, #3
 8007a22:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8007a26:	4413      	add	r3, r2
 8007a28:	e9d3 4500 	ldrd	r4, r5, [r3]
 8007a2c:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8007a30:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8007a34:	00db      	lsls	r3, r3, #3
 8007a36:	4413      	add	r3, r2
 8007a38:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007a3c:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8007a40:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8007a44:	00db      	lsls	r3, r3, #3
 8007a46:	4413      	add	r3, r2
 8007a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a4c:	f7f8 fdc6 	bl	80005dc <__aeabi_dmul>
 8007a50:	4602      	mov	r2, r0
 8007a52:	460b      	mov	r3, r1
 8007a54:	4610      	mov	r0, r2
 8007a56:	4619      	mov	r1, r3
 8007a58:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8007a5c:	00db      	lsls	r3, r3, #3
 8007a5e:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8007a62:	18d6      	adds	r6, r2, r3
 8007a64:	4602      	mov	r2, r0
 8007a66:	460b      	mov	r3, r1
 8007a68:	4620      	mov	r0, r4
 8007a6a:	4629      	mov	r1, r5
 8007a6c:	f7f8 fc00 	bl	8000270 <__adddf3>
 8007a70:	4602      	mov	r2, r0
 8007a72:	460b      	mov	r3, r1
 8007a74:	e9c6 2300 	strd	r2, r3, [r6]
          Sy[Sy_tmp] += Ss[kk + 1] * Sy_0[i + 3];
 8007a78:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8007a7c:	00db      	lsls	r3, r3, #3
 8007a7e:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8007a82:	4413      	add	r3, r2
 8007a84:	e9d3 4500 	ldrd	r4, r5, [r3]
 8007a88:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8007a8c:	3301      	adds	r3, #1
 8007a8e:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8007a92:	00db      	lsls	r3, r3, #3
 8007a94:	4413      	add	r3, r2
 8007a96:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007a9a:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8007a9e:	3303      	adds	r3, #3
 8007aa0:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8007aa4:	00db      	lsls	r3, r3, #3
 8007aa6:	4413      	add	r3, r2
 8007aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aac:	f7f8 fd96 	bl	80005dc <__aeabi_dmul>
 8007ab0:	4602      	mov	r2, r0
 8007ab2:	460b      	mov	r3, r1
 8007ab4:	4610      	mov	r0, r2
 8007ab6:	4619      	mov	r1, r3
 8007ab8:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8007abc:	00db      	lsls	r3, r3, #3
 8007abe:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8007ac2:	18d6      	adds	r6, r2, r3
 8007ac4:	4602      	mov	r2, r0
 8007ac6:	460b      	mov	r3, r1
 8007ac8:	4620      	mov	r0, r4
 8007aca:	4629      	mov	r1, r5
 8007acc:	f7f8 fbd0 	bl	8000270 <__adddf3>
 8007ad0:	4602      	mov	r2, r0
 8007ad2:	460b      	mov	r3, r1
 8007ad4:	e9c6 2300 	strd	r2, r3, [r6]
          Sy[Sy_tmp] += Ss[kk + 2] * Sy_0[i + 6];
 8007ad8:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8007adc:	00db      	lsls	r3, r3, #3
 8007ade:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8007ae2:	4413      	add	r3, r2
 8007ae4:	e9d3 4500 	ldrd	r4, r5, [r3]
 8007ae8:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8007aec:	3302      	adds	r3, #2
 8007aee:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8007af2:	00db      	lsls	r3, r3, #3
 8007af4:	4413      	add	r3, r2
 8007af6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007afa:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8007afe:	3306      	adds	r3, #6
 8007b00:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8007b04:	00db      	lsls	r3, r3, #3
 8007b06:	4413      	add	r3, r2
 8007b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b0c:	f7f8 fd66 	bl	80005dc <__aeabi_dmul>
 8007b10:	4602      	mov	r2, r0
 8007b12:	460b      	mov	r3, r1
 8007b14:	4610      	mov	r0, r2
 8007b16:	4619      	mov	r1, r3
 8007b18:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8007b1c:	00db      	lsls	r3, r3, #3
 8007b1e:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8007b22:	18d6      	adds	r6, r2, r3
 8007b24:	4602      	mov	r2, r0
 8007b26:	460b      	mov	r3, r1
 8007b28:	4620      	mov	r0, r4
 8007b2a:	4629      	mov	r1, r5
 8007b2c:	f7f8 fba0 	bl	8000270 <__adddf3>
 8007b30:	4602      	mov	r2, r0
 8007b32:	460b      	mov	r3, r1
 8007b34:	e9c6 2300 	strd	r2, r3, [r6]
          i_1 += 3;
 8007b38:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8007b3c:	3303      	adds	r3, #3
 8007b3e:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
        for (i = 0; i < 3; i++) {
 8007b42:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8007b46:	3301      	adds	r3, #1
 8007b48:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 8007b4c:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8007b50:	2b02      	cmp	r3, #2
 8007b52:	f77f af50 	ble.w	80079f6 <UTMeanCovSqrt_C2vgLQ4W+0x1482>
        }

        kk += 3;
 8007b56:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8007b5a:	3303      	adds	r3, #3
 8007b5c:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
      for (iAcol = 0; iAcol < 3; iAcol++) {
 8007b60:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8007b64:	3301      	adds	r3, #1
 8007b66:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8007b6a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8007b6e:	2b02      	cmp	r3, #2
 8007b70:	f77f af3a 	ble.w	80079e8 <UTMeanCovSqrt_C2vgLQ4W+0x1474>
      }

      errorCondition = true;
 8007b74:	2301      	movs	r3, #1
 8007b76:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
      kk = 0;
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
      exitg2 = false;
 8007b80:	2300      	movs	r3, #0
 8007b82:	f887 3289 	strb.w	r3, [r7, #649]	; 0x289
      while ((!exitg2) && (kk < 3)) {
 8007b86:	e044      	b.n	8007c12 <UTMeanCovSqrt_C2vgLQ4W+0x169e>
        int32_T exitg1;
        iAcol = kk + 1;
 8007b88:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8007b8c:	3301      	adds	r3, #1
 8007b8e:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
        do {
          exitg1 = 0;
 8007b92:	2300      	movs	r3, #0
 8007b94:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
          if (iAcol + 1 < 4) {
 8007b98:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8007b9c:	2b02      	cmp	r3, #2
 8007b9e:	dc25      	bgt.n	8007bec <UTMeanCovSqrt_C2vgLQ4W+0x1678>
            if (!(Sy[3 * kk + iAcol] == 0.0)) {
 8007ba0:	f8d7 228c 	ldr.w	r2, [r7, #652]	; 0x28c
 8007ba4:	4613      	mov	r3, r2
 8007ba6:	005b      	lsls	r3, r3, #1
 8007ba8:	441a      	add	r2, r3
 8007baa:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8007bae:	4413      	add	r3, r2
 8007bb0:	00db      	lsls	r3, r3, #3
 8007bb2:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8007bb6:	4413      	add	r3, r2
 8007bb8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007bbc:	f04f 0200 	mov.w	r2, #0
 8007bc0:	f04f 0300 	mov.w	r3, #0
 8007bc4:	f7f8 ff72 	bl	8000aac <__aeabi_dcmpeq>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d106      	bne.n	8007bdc <UTMeanCovSqrt_C2vgLQ4W+0x1668>
              errorCondition = false;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
              exitg1 = 1;
 8007bd4:	2301      	movs	r3, #1
 8007bd6:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 8007bda:	e00f      	b.n	8007bfc <UTMeanCovSqrt_C2vgLQ4W+0x1688>
            } else {
              iAcol++;
 8007bdc:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8007be0:	3301      	adds	r3, #1
 8007be2:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8007be6:	e009      	b.n	8007bfc <UTMeanCovSqrt_C2vgLQ4W+0x1688>
 8007be8:	2001da48 	.word	0x2001da48
            }
          } else {
            kk++;
 8007bec:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8007bf0:	3301      	adds	r3, #1
 8007bf2:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
            exitg1 = 2;
 8007bf6:	2302      	movs	r3, #2
 8007bf8:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
          }
        } while (exitg1 == 0);
 8007bfc:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d0c6      	beq.n	8007b92 <UTMeanCovSqrt_C2vgLQ4W+0x161e>

        if (exitg1 == 1) {
 8007c04:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8007c08:	2b01      	cmp	r3, #1
 8007c0a:	d102      	bne.n	8007c12 <UTMeanCovSqrt_C2vgLQ4W+0x169e>
          exitg2 = true;
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	f887 3289 	strb.w	r3, [r7, #649]	; 0x289
      while ((!exitg2) && (kk < 3)) {
 8007c12:	f897 3289 	ldrb.w	r3, [r7, #649]	; 0x289
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d103      	bne.n	8007c22 <UTMeanCovSqrt_C2vgLQ4W+0x16ae>
 8007c1a:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8007c1e:	2b02      	cmp	r3, #2
 8007c20:	ddb2      	ble.n	8007b88 <UTMeanCovSqrt_C2vgLQ4W+0x1614>
        }
      }

      if (!errorCondition) {
 8007c22:	f897 328b 	ldrb.w	r3, [r7, #651]	; 0x28b
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d110      	bne.n	8007c4c <UTMeanCovSqrt_C2vgLQ4W+0x16d8>
        memcpy(&Sy_0[0], &Sy[0], 9U * sizeof(real_T));
 8007c2a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8007c2e:	2248      	movs	r2, #72	; 0x48
 8007c30:	f8d7 12e4 	ldr.w	r1, [r7, #740]	; 0x2e4
 8007c34:	4618      	mov	r0, r3
 8007c36:	f00e ff91 	bl	8016b5c <memcpy>
        qr_5a2P8Gh6(Sy_0, Y1_0, Sy);
 8007c3a:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8007c3e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8007c42:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8007c46:	4618      	mov	r0, r3
 8007c48:	f000 fec4 	bl	80089d4 <qr_5a2P8Gh6>
      }
    }

    kk = 0;
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
    for (iAcol = 0; iAcol < 3; iAcol++) {
 8007c52:	2300      	movs	r3, #0
 8007c54:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8007c58:	e03d      	b.n	8007cd6 <UTMeanCovSqrt_C2vgLQ4W+0x1762>
      Sy_0[kk] = Sy[iAcol];
 8007c5a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8007c5e:	00db      	lsls	r3, r3, #3
 8007c60:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8007c64:	4413      	add	r3, r2
 8007c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c6a:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8007c6e:	f8d7 128c 	ldr.w	r1, [r7, #652]	; 0x28c
 8007c72:	00c9      	lsls	r1, r1, #3
 8007c74:	4401      	add	r1, r0
 8007c76:	e9c1 2300 	strd	r2, r3, [r1]
      Sy_0[kk + 1] = Sy[iAcol + 3];
 8007c7a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8007c7e:	3303      	adds	r3, #3
 8007c80:	00db      	lsls	r3, r3, #3
 8007c82:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8007c86:	4413      	add	r3, r2
 8007c88:	f8d7 228c 	ldr.w	r2, [r7, #652]	; 0x28c
 8007c8c:	1c51      	adds	r1, r2, #1
 8007c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c92:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8007c96:	00c9      	lsls	r1, r1, #3
 8007c98:	4401      	add	r1, r0
 8007c9a:	e9c1 2300 	strd	r2, r3, [r1]
      Sy_0[kk + 2] = Sy[iAcol + 6];
 8007c9e:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8007ca2:	3306      	adds	r3, #6
 8007ca4:	00db      	lsls	r3, r3, #3
 8007ca6:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8007caa:	4413      	add	r3, r2
 8007cac:	f8d7 228c 	ldr.w	r2, [r7, #652]	; 0x28c
 8007cb0:	1c91      	adds	r1, r2, #2
 8007cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cb6:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8007cba:	00c9      	lsls	r1, r1, #3
 8007cbc:	4401      	add	r1, r0
 8007cbe:	e9c1 2300 	strd	r2, r3, [r1]
      kk += 3;
 8007cc2:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8007cc6:	3303      	adds	r3, #3
 8007cc8:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
    for (iAcol = 0; iAcol < 3; iAcol++) {
 8007ccc:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8007cd0:	3301      	adds	r3, #1
 8007cd2:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8007cd6:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8007cda:	2b02      	cmp	r3, #2
 8007cdc:	ddbd      	ble.n	8007c5a <UTMeanCovSqrt_C2vgLQ4W+0x16e6>
    }

    for (kk = 0; kk < 9; kk++) {
 8007cde:	2300      	movs	r3, #0
 8007ce0:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8007ce4:	e01a      	b.n	8007d1c <UTMeanCovSqrt_C2vgLQ4W+0x17a8>
      Sy[kk] = signOOM * Sy_0[kk];
 8007ce6:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8007cea:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8007cee:	00db      	lsls	r3, r3, #3
 8007cf0:	4413      	add	r3, r2
 8007cf2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007cf6:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8007cfa:	00db      	lsls	r3, r3, #3
 8007cfc:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8007d00:	18d4      	adds	r4, r2, r3
 8007d02:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 8007d06:	f7f8 fc69 	bl	80005dc <__aeabi_dmul>
 8007d0a:	4602      	mov	r2, r0
 8007d0c:	460b      	mov	r3, r1
 8007d0e:	e9c4 2300 	strd	r2, r3, [r4]
    for (kk = 0; kk < 9; kk++) {
 8007d12:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8007d16:	3301      	adds	r3, #1
 8007d18:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8007d1c:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8007d20:	2b08      	cmp	r3, #8
 8007d22:	dde0      	ble.n	8007ce6 <UTMeanCovSqrt_C2vgLQ4W+0x1772>
    }
  }

  iAcol = 0;
 8007d24:	2300      	movs	r3, #0
 8007d26:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
  for (kk = 0; kk < 6; kk++) {
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8007d30:	e057      	b.n	8007de2 <UTMeanCovSqrt_C2vgLQ4W+0x186e>
    X2[iAcol] -= X1[0];
 8007d32:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8007d36:	00db      	lsls	r3, r3, #3
 8007d38:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 8007d3c:	4413      	add	r3, r2
 8007d3e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007d42:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 8007d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d4a:	f8d7 4298 	ldr.w	r4, [r7, #664]	; 0x298
 8007d4e:	00e4      	lsls	r4, r4, #3
 8007d50:	f8d7 52dc 	ldr.w	r5, [r7, #732]	; 0x2dc
 8007d54:	442c      	add	r4, r5
 8007d56:	f7f8 fa89 	bl	800026c <__aeabi_dsub>
 8007d5a:	4602      	mov	r2, r0
 8007d5c:	460b      	mov	r3, r1
 8007d5e:	e9c4 2300 	strd	r2, r3, [r4]
    X2[iAcol + 1] -= X1[1];
 8007d62:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8007d66:	3301      	adds	r3, #1
 8007d68:	00db      	lsls	r3, r3, #3
 8007d6a:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 8007d6e:	4413      	add	r3, r2
 8007d70:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007d74:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 8007d78:	3308      	adds	r3, #8
 8007d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d7e:	f8d7 4298 	ldr.w	r4, [r7, #664]	; 0x298
 8007d82:	3401      	adds	r4, #1
 8007d84:	00e4      	lsls	r4, r4, #3
 8007d86:	f8d7 52dc 	ldr.w	r5, [r7, #732]	; 0x2dc
 8007d8a:	442c      	add	r4, r5
 8007d8c:	f7f8 fa6e 	bl	800026c <__aeabi_dsub>
 8007d90:	4602      	mov	r2, r0
 8007d92:	460b      	mov	r3, r1
 8007d94:	e9c4 2300 	strd	r2, r3, [r4]
    X2[iAcol + 2] -= X1[2];
 8007d98:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8007d9c:	3302      	adds	r3, #2
 8007d9e:	00db      	lsls	r3, r3, #3
 8007da0:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 8007da4:	4413      	add	r3, r2
 8007da6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007daa:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 8007dae:	3310      	adds	r3, #16
 8007db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007db4:	f8d7 4298 	ldr.w	r4, [r7, #664]	; 0x298
 8007db8:	3402      	adds	r4, #2
 8007dba:	00e4      	lsls	r4, r4, #3
 8007dbc:	f8d7 52dc 	ldr.w	r5, [r7, #732]	; 0x2dc
 8007dc0:	442c      	add	r4, r5
 8007dc2:	f7f8 fa53 	bl	800026c <__aeabi_dsub>
 8007dc6:	4602      	mov	r2, r0
 8007dc8:	460b      	mov	r3, r1
 8007dca:	e9c4 2300 	strd	r2, r3, [r4]
    iAcol += 3;
 8007dce:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8007dd2:	3303      	adds	r3, #3
 8007dd4:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
  for (kk = 0; kk < 6; kk++) {
 8007dd8:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8007ddc:	3301      	adds	r3, #1
 8007dde:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8007de2:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8007de6:	2b05      	cmp	r3, #5
 8007de8:	dda3      	ble.n	8007d32 <UTMeanCovSqrt_C2vgLQ4W+0x17be>
  }

  signOOM = covWeights_1 * OOM;
 8007dea:	f107 0308 	add.w	r3, r7, #8
 8007dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007df2:	e9d7 019a 	ldrd	r0, r1, [r7, #616]	; 0x268
 8007df6:	f7f8 fbf1 	bl	80005dc <__aeabi_dmul>
 8007dfa:	4602      	mov	r2, r0
 8007dfc:	460b      	mov	r3, r1
 8007dfe:	e9c7 23a8 	strd	r2, r3, [r7, #672]	; 0x2a0
  for (kk = 0; kk < 3; kk++) {
 8007e02:	2300      	movs	r3, #0
 8007e04:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8007e08:	e071      	b.n	8007eee <UTMeanCovSqrt_C2vgLQ4W+0x197a>
    iAcol = 0;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
    for (i_1 = 0; i_1 < 3; i_1++) {
 8007e10:	2300      	movs	r3, #0
 8007e12:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
 8007e16:	e061      	b.n	8007edc <UTMeanCovSqrt_C2vgLQ4W+0x1968>
      Sy_tmp = iAcol + kk;
 8007e18:	f8d7 2298 	ldr.w	r2, [r7, #664]	; 0x298
 8007e1c:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8007e20:	4413      	add	r3, r2
 8007e22:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
      Ss[Sy_tmp] = 0.0;
 8007e26:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8007e2a:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8007e2e:	00db      	lsls	r3, r3, #3
 8007e30:	18d1      	adds	r1, r2, r3
 8007e32:	f04f 0200 	mov.w	r2, #0
 8007e36:	f04f 0300 	mov.w	r3, #0
 8007e3a:	e9c1 2300 	strd	r2, r3, [r1]
      i = 0;
 8007e3e:	2300      	movs	r3, #0
 8007e40:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
      for (i_0 = 0; i_0 < 6; i_0++) {
 8007e44:	2300      	movs	r3, #0
 8007e46:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 8007e4a:	e039      	b.n	8007ec0 <UTMeanCovSqrt_C2vgLQ4W+0x194c>
        Ss[Sy_tmp] += X2[i + kk] * Y2[i + i_1];
 8007e4c:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8007e50:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8007e54:	00db      	lsls	r3, r3, #3
 8007e56:	4413      	add	r3, r2
 8007e58:	e9d3 4500 	ldrd	r4, r5, [r3]
 8007e5c:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8007e60:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8007e64:	4413      	add	r3, r2
 8007e66:	00db      	lsls	r3, r3, #3
 8007e68:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 8007e6c:	4413      	add	r3, r2
 8007e6e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007e72:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8007e76:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8007e7a:	4413      	add	r3, r2
 8007e7c:	00db      	lsls	r3, r3, #3
 8007e7e:	463a      	mov	r2, r7
 8007e80:	6812      	ldr	r2, [r2, #0]
 8007e82:	4413      	add	r3, r2
 8007e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e88:	f7f8 fba8 	bl	80005dc <__aeabi_dmul>
 8007e8c:	4602      	mov	r2, r0
 8007e8e:	460b      	mov	r3, r1
 8007e90:	4620      	mov	r0, r4
 8007e92:	4629      	mov	r1, r5
 8007e94:	f7f8 f9ec 	bl	8000270 <__adddf3>
 8007e98:	4602      	mov	r2, r0
 8007e9a:	460b      	mov	r3, r1
 8007e9c:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 8007ea0:	f8d7 1264 	ldr.w	r1, [r7, #612]	; 0x264
 8007ea4:	00c9      	lsls	r1, r1, #3
 8007ea6:	4401      	add	r1, r0
 8007ea8:	e9c1 2300 	strd	r2, r3, [r1]
        i += 3;
 8007eac:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8007eb0:	3303      	adds	r3, #3
 8007eb2:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
      for (i_0 = 0; i_0 < 6; i_0++) {
 8007eb6:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8007eba:	3301      	adds	r3, #1
 8007ebc:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 8007ec0:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8007ec4:	2b05      	cmp	r3, #5
 8007ec6:	ddc1      	ble.n	8007e4c <UTMeanCovSqrt_C2vgLQ4W+0x18d8>
      }

      iAcol += 3;
 8007ec8:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8007ecc:	3303      	adds	r3, #3
 8007ece:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
    for (i_1 = 0; i_1 < 3; i_1++) {
 8007ed2:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8007ed6:	3301      	adds	r3, #1
 8007ed8:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
 8007edc:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8007ee0:	2b02      	cmp	r3, #2
 8007ee2:	dd99      	ble.n	8007e18 <UTMeanCovSqrt_C2vgLQ4W+0x18a4>
  for (kk = 0; kk < 3; kk++) {
 8007ee4:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8007ee8:	3301      	adds	r3, #1
 8007eea:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8007eee:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8007ef2:	2b02      	cmp	r3, #2
 8007ef4:	dd89      	ble.n	8007e0a <UTMeanCovSqrt_C2vgLQ4W+0x1896>
    }
  }

  for (kk = 0; kk < 9; kk++) {
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8007efc:	e01a      	b.n	8007f34 <UTMeanCovSqrt_C2vgLQ4W+0x19c0>
    Pxy[kk] = Ss[kk] * signOOM;
 8007efe:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8007f02:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8007f06:	00db      	lsls	r3, r3, #3
 8007f08:	4413      	add	r3, r2
 8007f0a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007f0e:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8007f12:	00db      	lsls	r3, r3, #3
 8007f14:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 8007f18:	18d4      	adds	r4, r2, r3
 8007f1a:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 8007f1e:	f7f8 fb5d 	bl	80005dc <__aeabi_dmul>
 8007f22:	4602      	mov	r2, r0
 8007f24:	460b      	mov	r3, r1
 8007f26:	e9c4 2300 	strd	r2, r3, [r4]
  for (kk = 0; kk < 9; kk++) {
 8007f2a:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8007f2e:	3301      	adds	r3, #1
 8007f30:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8007f34:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8007f38:	2b08      	cmp	r3, #8
 8007f3a:	dde0      	ble.n	8007efe <UTMeanCovSqrt_C2vgLQ4W+0x198a>
  }
}
 8007f3c:	bf00      	nop
 8007f3e:	bf00      	nop
 8007f40:	f507 772f 	add.w	r7, r7, #700	; 0x2bc
 8007f44:	46bd      	mov	sp, r7
 8007f46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007f4a:	bf00      	nop

08007f4c <UTMeanCovSqrt_C6QfB9Td>:
#include "rotate_LZ7ctbe0.h"

void UTMeanCovSqrt_C6QfB9Td(const real_T meanWeights[2], const real_T
  covWeights[2], real_T OOM, real_T Y1, real_T Y2[6], const real_T X1[3], real_T
  X2[18], real_T *Ymean, real_T *Sy, real_T Pxy[3])
{
 8007f4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007f50:	ed2d 8b02 	vpush	{d8}
 8007f54:	b0ac      	sub	sp, #176	; 0xb0
 8007f56:	af00      	add	r7, sp, #0
 8007f58:	6378      	str	r0, [r7, #52]	; 0x34
 8007f5a:	6339      	str	r1, [r7, #48]	; 0x30
 8007f5c:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
 8007f60:	ed87 1b08 	vstr	d1, [r7, #32]
 8007f64:	61fa      	str	r2, [r7, #28]
 8007f66:	61bb      	str	r3, [r7, #24]
  real_T signOOM;
  real_T xnorm;
  int32_T b_k;
  int32_T i;
  int32_T knt;
  *Ymean = Y1 * meanWeights[0];
 8007f68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f6a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007f6e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007f72:	f7f8 fb33 	bl	80005dc <__aeabi_dmul>
 8007f76:	4602      	mov	r2, r0
 8007f78:	460b      	mov	r3, r1
 8007f7a:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8007f7e:	e9c1 2300 	strd	r2, r3, [r1]
  for (knt = 0; knt < 6; knt++) {
 8007f82:	2300      	movs	r3, #0
 8007f84:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007f88:	e021      	b.n	8007fce <UTMeanCovSqrt_C6QfB9Td+0x82>
    *Ymean += Y2[knt] * meanWeights[1];
 8007f8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f8e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8007f92:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007f96:	00db      	lsls	r3, r3, #3
 8007f98:	69fa      	ldr	r2, [r7, #28]
 8007f9a:	4413      	add	r3, r2
 8007f9c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007fa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fa2:	3308      	adds	r3, #8
 8007fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fa8:	f7f8 fb18 	bl	80005dc <__aeabi_dmul>
 8007fac:	4602      	mov	r2, r0
 8007fae:	460b      	mov	r3, r1
 8007fb0:	4620      	mov	r0, r4
 8007fb2:	4629      	mov	r1, r5
 8007fb4:	f7f8 f95c 	bl	8000270 <__adddf3>
 8007fb8:	4602      	mov	r2, r0
 8007fba:	460b      	mov	r3, r1
 8007fbc:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8007fc0:	e9c1 2300 	strd	r2, r3, [r1]
  for (knt = 0; knt < 6; knt++) {
 8007fc4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007fc8:	3301      	adds	r3, #1
 8007fca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007fce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007fd2:	2b05      	cmp	r3, #5
 8007fd4:	ddd9      	ble.n	8007f8a <UTMeanCovSqrt_C6QfB9Td+0x3e>
  }

  *Ymean *= OOM;
 8007fd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007fda:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007fde:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007fe2:	f7f8 fafb 	bl	80005dc <__aeabi_dmul>
 8007fe6:	4602      	mov	r2, r0
 8007fe8:	460b      	mov	r3, r1
 8007fea:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8007fee:	e9c1 2300 	strd	r2, r3, [r1]
  Y1 -= *Ymean;
 8007ff2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ffa:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007ffe:	f7f8 f935 	bl	800026c <__aeabi_dsub>
 8008002:	4602      	mov	r2, r0
 8008004:	460b      	mov	r3, r1
 8008006:	e9c7 2308 	strd	r2, r3, [r7, #32]
  for (knt = 0; knt < 6; knt++) {
 800800a:	2300      	movs	r3, #0
 800800c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008010:	e01c      	b.n	800804c <UTMeanCovSqrt_C6QfB9Td+0x100>
    Y2[knt] -= *Ymean;
 8008012:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008016:	00db      	lsls	r3, r3, #3
 8008018:	69fa      	ldr	r2, [r7, #28]
 800801a:	4413      	add	r3, r2
 800801c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008020:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008024:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008028:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800802c:	00db      	lsls	r3, r3, #3
 800802e:	69fa      	ldr	r2, [r7, #28]
 8008030:	18d4      	adds	r4, r2, r3
 8008032:	4642      	mov	r2, r8
 8008034:	464b      	mov	r3, r9
 8008036:	f7f8 f919 	bl	800026c <__aeabi_dsub>
 800803a:	4602      	mov	r2, r0
 800803c:	460b      	mov	r3, r1
 800803e:	e9c4 2300 	strd	r2, r3, [r4]
  for (knt = 0; knt < 6; knt++) {
 8008042:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008046:	3301      	adds	r3, #1
 8008048:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800804c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008050:	2b05      	cmp	r3, #5
 8008052:	ddde      	ble.n	8008012 <UTMeanCovSqrt_C6QfB9Td+0xc6>
  }

  if (rtIsNaN(OOM)) {
 8008054:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 8008058:	f003 f82c 	bl	800b0b4 <rtIsNaN>
 800805c:	4603      	mov	r3, r0
 800805e:	2b00      	cmp	r3, #0
 8008060:	d004      	beq.n	800806c <UTMeanCovSqrt_C6QfB9Td+0x120>
    signOOM = OOM;
 8008062:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008066:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 800806a:	e025      	b.n	80080b8 <UTMeanCovSqrt_C6QfB9Td+0x16c>
  } else if (OOM < 0.0) {
 800806c:	f04f 0200 	mov.w	r2, #0
 8008070:	f04f 0300 	mov.w	r3, #0
 8008074:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8008078:	f7f8 fd22 	bl	8000ac0 <__aeabi_dcmplt>
 800807c:	4603      	mov	r3, r0
 800807e:	2b00      	cmp	r3, #0
 8008080:	d005      	beq.n	800808e <UTMeanCovSqrt_C6QfB9Td+0x142>
    signOOM = -1.0;
 8008082:	f04f 0200 	mov.w	r2, #0
 8008086:	4bc3      	ldr	r3, [pc, #780]	; (8008394 <UTMeanCovSqrt_C6QfB9Td+0x448>)
 8008088:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 800808c:	e014      	b.n	80080b8 <UTMeanCovSqrt_C6QfB9Td+0x16c>
  } else {
    signOOM = (OOM > 0.0);
 800808e:	f04f 0200 	mov.w	r2, #0
 8008092:	f04f 0300 	mov.w	r3, #0
 8008096:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800809a:	f7f8 fd2f 	bl	8000afc <__aeabi_dcmpgt>
 800809e:	4603      	mov	r3, r0
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d003      	beq.n	80080ac <UTMeanCovSqrt_C6QfB9Td+0x160>
 80080a4:	f04f 0200 	mov.w	r2, #0
 80080a8:	4bbb      	ldr	r3, [pc, #748]	; (8008398 <UTMeanCovSqrt_C6QfB9Td+0x44c>)
 80080aa:	e003      	b.n	80080b4 <UTMeanCovSqrt_C6QfB9Td+0x168>
 80080ac:	f04f 0200 	mov.w	r2, #0
 80080b0:	f04f 0300 	mov.w	r3, #0
 80080b4:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  }

  covWeights_0 = signOOM * covWeights[0];
 80080b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 80080be:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80080c2:	f7f8 fa8b 	bl	80005dc <__aeabi_dmul>
 80080c6:	4602      	mov	r2, r0
 80080c8:	460b      	mov	r3, r1
 80080ca:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
  covWeights_1 = signOOM * covWeights[1];
 80080ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080d0:	3308      	adds	r3, #8
 80080d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80080d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80080da:	f7f8 fa7f 	bl	80005dc <__aeabi_dmul>
 80080de:	4602      	mov	r2, r0
 80080e0:	460b      	mov	r3, r1
 80080e2:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
  OOM *= signOOM;
 80080e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80080ea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80080ee:	f7f8 fa75 	bl	80005dc <__aeabi_dmul>
 80080f2:	4602      	mov	r2, r0
 80080f4:	460b      	mov	r3, r1
 80080f6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  signOOM = sqrt(covWeights_1);
 80080fa:	ed97 0b26 	vldr	d0, [r7, #152]	; 0x98
 80080fe:	f00e fef3 	bl	8016ee8 <sqrt>
 8008102:	eeb0 7a40 	vmov.f32	s14, s0
 8008106:	eef0 7a60 	vmov.f32	s15, s1
 800810a:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
  for (knt = 0; knt < 6; knt++) {
 800810e:	2300      	movs	r3, #0
 8008110:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008114:	e01a      	b.n	800814c <UTMeanCovSqrt_C6QfB9Td+0x200>
    A[knt] = signOOM * Y2[knt];
 8008116:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800811a:	00db      	lsls	r3, r3, #3
 800811c:	69fa      	ldr	r2, [r7, #28]
 800811e:	4413      	add	r3, r2
 8008120:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008124:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008128:	f7f8 fa58 	bl	80005dc <__aeabi_dmul>
 800812c:	4602      	mov	r2, r0
 800812e:	460b      	mov	r3, r1
 8008130:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008134:	00c9      	lsls	r1, r1, #3
 8008136:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 800813a:	4401      	add	r1, r0
 800813c:	3948      	subs	r1, #72	; 0x48
 800813e:	e9c1 2300 	strd	r2, r3, [r1]
  for (knt = 0; knt < 6; knt++) {
 8008142:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008146:	3301      	adds	r3, #1
 8008148:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800814c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008150:	2b05      	cmp	r3, #5
 8008152:	dde0      	ble.n	8008116 <UTMeanCovSqrt_C6QfB9Td+0x1ca>
  }

  signOOM = A[0];
 8008154:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8008158:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  xnorm = xnrm2_7bm34mDQ(5, A, 2);
 800815c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8008160:	2202      	movs	r2, #2
 8008162:	4619      	mov	r1, r3
 8008164:	2005      	movs	r0, #5
 8008166:	f005 f973 	bl	800d450 <xnrm2_7bm34mDQ>
 800816a:	eeb0 7a40 	vmov.f32	s14, s0
 800816e:	eef0 7a60 	vmov.f32	s15, s1
 8008172:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
  if (xnorm != 0.0) {
 8008176:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800817a:	f04f 0200 	mov.w	r2, #0
 800817e:	f04f 0300 	mov.w	r3, #0
 8008182:	f7f8 fc93 	bl	8000aac <__aeabi_dcmpeq>
 8008186:	4603      	mov	r3, r0
 8008188:	2b00      	cmp	r3, #0
 800818a:	f040 80e7 	bne.w	800835c <UTMeanCovSqrt_C6QfB9Td+0x410>
    xnorm = rt_hypotd_snf(A[0], xnorm);
 800818e:	ed97 7b1a 	vldr	d7, [r7, #104]	; 0x68
 8008192:	ed97 6b0e 	vldr	d6, [r7, #56]	; 0x38
 8008196:	eeb0 1a46 	vmov.f32	s2, s12
 800819a:	eef0 1a66 	vmov.f32	s3, s13
 800819e:	eeb0 0a47 	vmov.f32	s0, s14
 80081a2:	eef0 0a67 	vmov.f32	s1, s15
 80081a6:	f002 fe77 	bl	800ae98 <rt_hypotd_snf>
 80081aa:	eeb0 7a40 	vmov.f32	s14, s0
 80081ae:	eef0 7a60 	vmov.f32	s15, s1
 80081b2:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
    if (A[0] >= 0.0) {
 80081b6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80081ba:	f04f 0200 	mov.w	r2, #0
 80081be:	f04f 0300 	mov.w	r3, #0
 80081c2:	f7f8 fc91 	bl	8000ae8 <__aeabi_dcmpge>
 80081c6:	4603      	mov	r3, r0
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d009      	beq.n	80081e0 <UTMeanCovSqrt_C6QfB9Td+0x294>
      xnorm = -xnorm;
 80081cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80081d0:	613a      	str	r2, [r7, #16]
 80081d2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80081d6:	617b      	str	r3, [r7, #20]
 80081d8:	ed97 7b04 	vldr	d7, [r7, #16]
 80081dc:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
    }

    if (fabs(xnorm) < 1.0020841800044864E-292) {
 80081e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80081e4:	60ba      	str	r2, [r7, #8]
 80081e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80081ea:	60fb      	str	r3, [r7, #12]
 80081ec:	f04f 0200 	mov.w	r2, #0
 80081f0:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 80081f4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80081f8:	f7f8 fc62 	bl	8000ac0 <__aeabi_dcmplt>
 80081fc:	4603      	mov	r3, r0
 80081fe:	2b00      	cmp	r3, #0
 8008200:	f000 80a8 	beq.w	8008354 <UTMeanCovSqrt_C6QfB9Td+0x408>
      knt = 0;
 8008204:	2300      	movs	r3, #0
 8008206:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
      do {
        knt++;
 800820a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800820e:	3301      	adds	r3, #1
 8008210:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        for (b_k = 1; b_k < 6; b_k++) {
 8008214:	2301      	movs	r3, #1
 8008216:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800821a:	e01d      	b.n	8008258 <UTMeanCovSqrt_C6QfB9Td+0x30c>
          A[b_k] *= 9.9792015476736E+291;
 800821c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008220:	00db      	lsls	r3, r3, #3
 8008222:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8008226:	4413      	add	r3, r2
 8008228:	3b48      	subs	r3, #72	; 0x48
 800822a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800822e:	f04f 0200 	mov.w	r2, #0
 8008232:	4b5a      	ldr	r3, [pc, #360]	; (800839c <UTMeanCovSqrt_C6QfB9Td+0x450>)
 8008234:	f7f8 f9d2 	bl	80005dc <__aeabi_dmul>
 8008238:	4602      	mov	r2, r0
 800823a:	460b      	mov	r3, r1
 800823c:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8008240:	00c9      	lsls	r1, r1, #3
 8008242:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8008246:	4401      	add	r1, r0
 8008248:	3948      	subs	r1, #72	; 0x48
 800824a:	e9c1 2300 	strd	r2, r3, [r1]
        for (b_k = 1; b_k < 6; b_k++) {
 800824e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008252:	3301      	adds	r3, #1
 8008254:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008258:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800825c:	2b05      	cmp	r3, #5
 800825e:	dddd      	ble.n	800821c <UTMeanCovSqrt_C6QfB9Td+0x2d0>
        }

        xnorm *= 9.9792015476736E+291;
 8008260:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8008264:	f04f 0200 	mov.w	r2, #0
 8008268:	4b4c      	ldr	r3, [pc, #304]	; (800839c <UTMeanCovSqrt_C6QfB9Td+0x450>)
 800826a:	f7f8 f9b7 	bl	80005dc <__aeabi_dmul>
 800826e:	4602      	mov	r2, r0
 8008270:	460b      	mov	r3, r1
 8008272:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
        signOOM *= 9.9792015476736E+291;
 8008276:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800827a:	f04f 0200 	mov.w	r2, #0
 800827e:	4b47      	ldr	r3, [pc, #284]	; (800839c <UTMeanCovSqrt_C6QfB9Td+0x450>)
 8008280:	f7f8 f9ac 	bl	80005dc <__aeabi_dmul>
 8008284:	4602      	mov	r2, r0
 8008286:	460b      	mov	r3, r1
 8008288:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      } while ((fabs(xnorm) < 1.0020841800044864E-292) && (knt < 20));
 800828c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008290:	603a      	str	r2, [r7, #0]
 8008292:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008296:	607b      	str	r3, [r7, #4]
 8008298:	f04f 0200 	mov.w	r2, #0
 800829c:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 80082a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80082a4:	f7f8 fc0c 	bl	8000ac0 <__aeabi_dcmplt>
 80082a8:	4603      	mov	r3, r0
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d003      	beq.n	80082b6 <UTMeanCovSqrt_C6QfB9Td+0x36a>
 80082ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80082b2:	2b13      	cmp	r3, #19
 80082b4:	dda9      	ble.n	800820a <UTMeanCovSqrt_C6QfB9Td+0x2be>

      xnorm = rt_hypotd_snf(signOOM, xnrm2_7bm34mDQ(5, A, 2));
 80082b6:	ed97 8b10 	vldr	d8, [r7, #64]	; 0x40
 80082ba:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80082be:	2202      	movs	r2, #2
 80082c0:	4619      	mov	r1, r3
 80082c2:	2005      	movs	r0, #5
 80082c4:	f005 f8c4 	bl	800d450 <xnrm2_7bm34mDQ>
 80082c8:	eeb0 7a40 	vmov.f32	s14, s0
 80082cc:	eef0 7a60 	vmov.f32	s15, s1
 80082d0:	eeb0 1a47 	vmov.f32	s2, s14
 80082d4:	eef0 1a67 	vmov.f32	s3, s15
 80082d8:	eeb0 0a48 	vmov.f32	s0, s16
 80082dc:	eef0 0a68 	vmov.f32	s1, s17
 80082e0:	f002 fdda 	bl	800ae98 <rt_hypotd_snf>
 80082e4:	eeb0 7a40 	vmov.f32	s14, s0
 80082e8:	eef0 7a60 	vmov.f32	s15, s1
 80082ec:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
      if (signOOM >= 0.0) {
 80082f0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80082f4:	f04f 0200 	mov.w	r2, #0
 80082f8:	f04f 0300 	mov.w	r3, #0
 80082fc:	f7f8 fbf4 	bl	8000ae8 <__aeabi_dcmpge>
 8008300:	4603      	mov	r3, r0
 8008302:	2b00      	cmp	r3, #0
 8008304:	d006      	beq.n	8008314 <UTMeanCovSqrt_C6QfB9Td+0x3c8>
        xnorm = -xnorm;
 8008306:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800830a:	4692      	mov	sl, r2
 800830c:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 8008310:	e9c7 ab0e 	strd	sl, fp, [r7, #56]	; 0x38
      }

      for (b_k = 0; b_k < knt; b_k++) {
 8008314:	2300      	movs	r3, #0
 8008316:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800831a:	e010      	b.n	800833e <UTMeanCovSqrt_C6QfB9Td+0x3f2>
        xnorm *= 1.0020841800044864E-292;
 800831c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8008320:	f04f 0200 	mov.w	r2, #0
 8008324:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 8008328:	f7f8 f958 	bl	80005dc <__aeabi_dmul>
 800832c:	4602      	mov	r2, r0
 800832e:	460b      	mov	r3, r1
 8008330:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
      for (b_k = 0; b_k < knt; b_k++) {
 8008334:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008338:	3301      	adds	r3, #1
 800833a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800833e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008342:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008346:	429a      	cmp	r2, r3
 8008348:	dbe8      	blt.n	800831c <UTMeanCovSqrt_C6QfB9Td+0x3d0>
      }

      signOOM = xnorm;
 800834a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800834e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8008352:	e003      	b.n	800835c <UTMeanCovSqrt_C6QfB9Td+0x410>
    } else {
      signOOM = xnorm;
 8008354:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008358:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    }
  }

  if (!rtIsNaN(covWeights_0)) {
 800835c:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8008360:	eeb0 0a47 	vmov.f32	s0, s14
 8008364:	eef0 0a67 	vmov.f32	s1, s15
 8008368:	f002 fea4 	bl	800b0b4 <rtIsNaN>
 800836c:	4603      	mov	r3, r0
 800836e:	2b00      	cmp	r3, #0
 8008370:	d12b      	bne.n	80083ca <UTMeanCovSqrt_C6QfB9Td+0x47e>
    if (covWeights_0 < 0.0) {
 8008372:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008376:	f04f 0200 	mov.w	r2, #0
 800837a:	f04f 0300 	mov.w	r3, #0
 800837e:	f7f8 fb9f 	bl	8000ac0 <__aeabi_dcmplt>
 8008382:	4603      	mov	r3, r0
 8008384:	2b00      	cmp	r3, #0
 8008386:	d00b      	beq.n	80083a0 <UTMeanCovSqrt_C6QfB9Td+0x454>
      covWeights_0 = -1.0;
 8008388:	f04f 0200 	mov.w	r2, #0
 800838c:	4b01      	ldr	r3, [pc, #4]	; (8008394 <UTMeanCovSqrt_C6QfB9Td+0x448>)
 800838e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 8008392:	e01a      	b.n	80083ca <UTMeanCovSqrt_C6QfB9Td+0x47e>
 8008394:	bff00000 	.word	0xbff00000
 8008398:	3ff00000 	.word	0x3ff00000
 800839c:	7c900000 	.word	0x7c900000
    } else {
      covWeights_0 = (covWeights_0 > 0.0);
 80083a0:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80083a4:	f04f 0200 	mov.w	r2, #0
 80083a8:	f04f 0300 	mov.w	r3, #0
 80083ac:	f7f8 fba6 	bl	8000afc <__aeabi_dcmpgt>
 80083b0:	4603      	mov	r3, r0
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d003      	beq.n	80083be <UTMeanCovSqrt_C6QfB9Td+0x472>
 80083b6:	f04f 0200 	mov.w	r2, #0
 80083ba:	4b99      	ldr	r3, [pc, #612]	; (8008620 <UTMeanCovSqrt_C6QfB9Td+0x6d4>)
 80083bc:	e003      	b.n	80083c6 <UTMeanCovSqrt_C6QfB9Td+0x47a>
 80083be:	f04f 0200 	mov.w	r2, #0
 80083c2:	f04f 0300 	mov.w	r3, #0
 80083c6:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    }
  }

  if (covWeights_0 == 1.0) {
 80083ca:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80083ce:	f04f 0200 	mov.w	r2, #0
 80083d2:	4b93      	ldr	r3, [pc, #588]	; (8008620 <UTMeanCovSqrt_C6QfB9Td+0x6d4>)
 80083d4:	f7f8 fb6a 	bl	8000aac <__aeabi_dcmpeq>
 80083d8:	4603      	mov	r3, r0
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d021      	beq.n	8008422 <UTMeanCovSqrt_C6QfB9Td+0x4d6>
    rotate_LZ7ctbe0(signOOM, Y1, &signOOM, &xnorm, &covWeights_0);
 80083de:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 80083e2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80083e6:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80083ea:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80083ee:	4618      	mov	r0, r3
 80083f0:	ed97 1b08 	vldr	d1, [r7, #32]
 80083f4:	eeb0 0a47 	vmov.f32	s0, s14
 80083f8:	eef0 0a67 	vmov.f32	s1, s15
 80083fc:	f002 fbc2 	bl	800ab84 <rotate_LZ7ctbe0>
    *Sy = sqrt(OOM) * covWeights_0;
 8008400:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 8008404:	f00e fd70 	bl	8016ee8 <sqrt>
 8008408:	ec51 0b10 	vmov	r0, r1, d0
 800840c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008410:	f7f8 f8e4 	bl	80005dc <__aeabi_dmul>
 8008414:	4602      	mov	r2, r0
 8008416:	460b      	mov	r3, r1
 8008418:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 800841c:	e9c1 2300 	strd	r2, r3, [r1]
 8008420:	e016      	b.n	8008450 <UTMeanCovSqrt_C6QfB9Td+0x504>
  } else {
    cholUpdateFactor_HBMX5a5h(&signOOM, Y1);
 8008422:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008426:	ed97 0b08 	vldr	d0, [r7, #32]
 800842a:	4618      	mov	r0, r3
 800842c:	f000 f8fa 	bl	8008624 <cholUpdateFactor_HBMX5a5h>
    *Sy = sqrt(OOM) * signOOM;
 8008430:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 8008434:	f00e fd58 	bl	8016ee8 <sqrt>
 8008438:	ec51 0b10 	vmov	r0, r1, d0
 800843c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008440:	f7f8 f8cc 	bl	80005dc <__aeabi_dmul>
 8008444:	4602      	mov	r2, r0
 8008446:	460b      	mov	r3, r1
 8008448:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 800844c:	e9c1 2300 	strd	r2, r3, [r1]
  }

  b_k = 0;
 8008450:	2300      	movs	r3, #0
 8008452:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  for (knt = 0; knt < 6; knt++) {
 8008456:	2300      	movs	r3, #0
 8008458:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800845c:	e054      	b.n	8008508 <UTMeanCovSqrt_C6QfB9Td+0x5bc>
    X2[b_k] -= X1[0];
 800845e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008462:	00db      	lsls	r3, r3, #3
 8008464:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8008468:	4413      	add	r3, r2
 800846a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800846e:	69bb      	ldr	r3, [r7, #24]
 8008470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008474:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 8008478:	00e4      	lsls	r4, r4, #3
 800847a:	f8d7 50d8 	ldr.w	r5, [r7, #216]	; 0xd8
 800847e:	442c      	add	r4, r5
 8008480:	f7f7 fef4 	bl	800026c <__aeabi_dsub>
 8008484:	4602      	mov	r2, r0
 8008486:	460b      	mov	r3, r1
 8008488:	e9c4 2300 	strd	r2, r3, [r4]
    X2[b_k + 1] -= X1[1];
 800848c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008490:	3301      	adds	r3, #1
 8008492:	00db      	lsls	r3, r3, #3
 8008494:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8008498:	4413      	add	r3, r2
 800849a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800849e:	69bb      	ldr	r3, [r7, #24]
 80084a0:	3308      	adds	r3, #8
 80084a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084a6:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 80084aa:	3401      	adds	r4, #1
 80084ac:	00e4      	lsls	r4, r4, #3
 80084ae:	f8d7 50d8 	ldr.w	r5, [r7, #216]	; 0xd8
 80084b2:	442c      	add	r4, r5
 80084b4:	f7f7 feda 	bl	800026c <__aeabi_dsub>
 80084b8:	4602      	mov	r2, r0
 80084ba:	460b      	mov	r3, r1
 80084bc:	e9c4 2300 	strd	r2, r3, [r4]
    X2[b_k + 2] -= X1[2];
 80084c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80084c4:	3302      	adds	r3, #2
 80084c6:	00db      	lsls	r3, r3, #3
 80084c8:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80084cc:	4413      	add	r3, r2
 80084ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80084d2:	69bb      	ldr	r3, [r7, #24]
 80084d4:	3310      	adds	r3, #16
 80084d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084da:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 80084de:	3402      	adds	r4, #2
 80084e0:	00e4      	lsls	r4, r4, #3
 80084e2:	f8d7 50d8 	ldr.w	r5, [r7, #216]	; 0xd8
 80084e6:	442c      	add	r4, r5
 80084e8:	f7f7 fec0 	bl	800026c <__aeabi_dsub>
 80084ec:	4602      	mov	r2, r0
 80084ee:	460b      	mov	r3, r1
 80084f0:	e9c4 2300 	strd	r2, r3, [r4]
    b_k += 3;
 80084f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80084f8:	3303      	adds	r3, #3
 80084fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  for (knt = 0; knt < 6; knt++) {
 80084fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008502:	3301      	adds	r3, #1
 8008504:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008508:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800850c:	2b05      	cmp	r3, #5
 800850e:	dda6      	ble.n	800845e <UTMeanCovSqrt_C6QfB9Td+0x512>
  }

  signOOM = covWeights_1 * OOM;
 8008510:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008514:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008518:	f7f8 f860 	bl	80005dc <__aeabi_dmul>
 800851c:	4602      	mov	r2, r0
 800851e:	460b      	mov	r3, r1
 8008520:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  for (knt = 0; knt < 3; knt++) {
 8008524:	2300      	movs	r3, #0
 8008526:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800852a:	e06c      	b.n	8008606 <UTMeanCovSqrt_C6QfB9Td+0x6ba>
    X2_0[knt] = 0.0;
 800852c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008530:	00db      	lsls	r3, r3, #3
 8008532:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8008536:	4413      	add	r3, r2
 8008538:	f1a3 0160 	sub.w	r1, r3, #96	; 0x60
 800853c:	f04f 0200 	mov.w	r2, #0
 8008540:	f04f 0300 	mov.w	r3, #0
 8008544:	e9c1 2300 	strd	r2, r3, [r1]
    b_k = 0;
 8008548:	2300      	movs	r3, #0
 800854a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    for (i = 0; i < 6; i++) {
 800854e:	2300      	movs	r3, #0
 8008550:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008554:	e037      	b.n	80085c6 <UTMeanCovSqrt_C6QfB9Td+0x67a>
      X2_0[knt] += X2[b_k + knt] * Y2[i];
 8008556:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800855a:	00db      	lsls	r3, r3, #3
 800855c:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8008560:	4413      	add	r3, r2
 8008562:	3b60      	subs	r3, #96	; 0x60
 8008564:	e9d3 4500 	ldrd	r4, r5, [r3]
 8008568:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800856c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008570:	4413      	add	r3, r2
 8008572:	00db      	lsls	r3, r3, #3
 8008574:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8008578:	4413      	add	r3, r2
 800857a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800857e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008582:	00db      	lsls	r3, r3, #3
 8008584:	69fa      	ldr	r2, [r7, #28]
 8008586:	4413      	add	r3, r2
 8008588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800858c:	f7f8 f826 	bl	80005dc <__aeabi_dmul>
 8008590:	4602      	mov	r2, r0
 8008592:	460b      	mov	r3, r1
 8008594:	4620      	mov	r0, r4
 8008596:	4629      	mov	r1, r5
 8008598:	f7f7 fe6a 	bl	8000270 <__adddf3>
 800859c:	4602      	mov	r2, r0
 800859e:	460b      	mov	r3, r1
 80085a0:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80085a4:	00c9      	lsls	r1, r1, #3
 80085a6:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 80085aa:	4401      	add	r1, r0
 80085ac:	3960      	subs	r1, #96	; 0x60
 80085ae:	e9c1 2300 	strd	r2, r3, [r1]
      b_k += 3;
 80085b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80085b6:	3303      	adds	r3, #3
 80085b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    for (i = 0; i < 6; i++) {
 80085bc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80085c0:	3301      	adds	r3, #1
 80085c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80085c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80085ca:	2b05      	cmp	r3, #5
 80085cc:	ddc3      	ble.n	8008556 <UTMeanCovSqrt_C6QfB9Td+0x60a>
    }

    Pxy[knt] = X2_0[knt] * signOOM;
 80085ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80085d2:	00db      	lsls	r3, r3, #3
 80085d4:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80085d8:	4413      	add	r3, r2
 80085da:	3b60      	subs	r3, #96	; 0x60
 80085dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80085e0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80085e4:	f8d7 40a4 	ldr.w	r4, [r7, #164]	; 0xa4
 80085e8:	00e4      	lsls	r4, r4, #3
 80085ea:	f8d7 50e4 	ldr.w	r5, [r7, #228]	; 0xe4
 80085ee:	442c      	add	r4, r5
 80085f0:	f7f7 fff4 	bl	80005dc <__aeabi_dmul>
 80085f4:	4602      	mov	r2, r0
 80085f6:	460b      	mov	r3, r1
 80085f8:	e9c4 2300 	strd	r2, r3, [r4]
  for (knt = 0; knt < 3; knt++) {
 80085fc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008600:	3301      	adds	r3, #1
 8008602:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008606:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800860a:	2b02      	cmp	r3, #2
 800860c:	dd8e      	ble.n	800852c <UTMeanCovSqrt_C6QfB9Td+0x5e0>
  }
}
 800860e:	bf00      	nop
 8008610:	bf00      	nop
 8008612:	37b0      	adds	r7, #176	; 0xb0
 8008614:	46bd      	mov	sp, r7
 8008616:	ecbd 8b02 	vpop	{d8}
 800861a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800861e:	bf00      	nop
 8008620:	3ff00000 	.word	0x3ff00000

08008624 <cholUpdateFactor_HBMX5a5h>:
#include "rotate_LZ7ctbe0.h"
#include "rt_nonfinite.h"
#include "rtGetNaN.h"

void cholUpdateFactor_HBMX5a5h(real_T *S, real_T U)
{
 8008624:	b5b0      	push	{r4, r5, r7, lr}
 8008626:	b090      	sub	sp, #64	; 0x40
 8008628:	af00      	add	r7, sp, #0
 800862a:	60f8      	str	r0, [r7, #12]
 800862c:	ed87 0b00 	vstr	d0, [r7]
  real_T alpha;
  real_T c;
  real_T nrmx;
  real_T s;
  int8_T p;
  R = *S;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008636:	e9c7 2308 	strd	r2, r3, [r7, #32]
  p = 0;
 800863a:	2300      	movs	r3, #0
 800863c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (*S == 0.0) {
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008646:	f04f 0200 	mov.w	r2, #0
 800864a:	f04f 0300 	mov.w	r3, #0
 800864e:	f7f8 fa2d 	bl	8000aac <__aeabi_dcmpeq>
 8008652:	4603      	mov	r3, r0
 8008654:	2b00      	cmp	r3, #0
 8008656:	d003      	beq.n	8008660 <cholUpdateFactor_HBMX5a5h+0x3c>
    p = 2;
 8008658:	2302      	movs	r3, #2
 800865a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800865e:	e065      	b.n	800872c <cholUpdateFactor_HBMX5a5h+0x108>
  } else {
    s = U / *S;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008666:	e9d7 0100 	ldrd	r0, r1, [r7]
 800866a:	f7f8 f8e1 	bl	8000830 <__aeabi_ddiv>
 800866e:	4602      	mov	r2, r0
 8008670:	460b      	mov	r3, r1
 8008672:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    nrmx = fabs(s);
 8008676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008678:	63bb      	str	r3, [r7, #56]	; 0x38
 800867a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800867c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008680:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (nrmx >= 1.0) {
 8008682:	f04f 0200 	mov.w	r2, #0
 8008686:	4b5c      	ldr	r3, [pc, #368]	; (80087f8 <cholUpdateFactor_HBMX5a5h+0x1d4>)
 8008688:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800868c:	f7f8 fa2c 	bl	8000ae8 <__aeabi_dcmpge>
 8008690:	4603      	mov	r3, r0
 8008692:	2b00      	cmp	r3, #0
 8008694:	d003      	beq.n	800869e <cholUpdateFactor_HBMX5a5h+0x7a>
      p = 1;
 8008696:	2301      	movs	r3, #1
 8008698:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800869c:	e046      	b.n	800872c <cholUpdateFactor_HBMX5a5h+0x108>
    } else {
      rotate_LZ7ctbe0(sqrt(1.0 - nrmx * nrmx), s, &R, &c, &alpha);
 800869e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80086a2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80086a6:	f7f7 ff99 	bl	80005dc <__aeabi_dmul>
 80086aa:	4602      	mov	r2, r0
 80086ac:	460b      	mov	r3, r1
 80086ae:	f04f 0000 	mov.w	r0, #0
 80086b2:	4951      	ldr	r1, [pc, #324]	; (80087f8 <cholUpdateFactor_HBMX5a5h+0x1d4>)
 80086b4:	f7f7 fdda 	bl	800026c <__aeabi_dsub>
 80086b8:	4602      	mov	r2, r0
 80086ba:	460b      	mov	r3, r1
 80086bc:	ec43 2b17 	vmov	d7, r2, r3
 80086c0:	eeb0 0a47 	vmov.f32	s0, s14
 80086c4:	eef0 0a67 	vmov.f32	s1, s15
 80086c8:	f00e fc0e 	bl	8016ee8 <sqrt>
 80086cc:	eeb0 7a40 	vmov.f32	s14, s0
 80086d0:	eef0 7a60 	vmov.f32	s15, s1
 80086d4:	f107 0218 	add.w	r2, r7, #24
 80086d8:	f107 0110 	add.w	r1, r7, #16
 80086dc:	f107 0320 	add.w	r3, r7, #32
 80086e0:	4618      	mov	r0, r3
 80086e2:	ed97 1b0c 	vldr	d1, [r7, #48]	; 0x30
 80086e6:	eeb0 0a47 	vmov.f32	s0, s14
 80086ea:	eef0 0a67 	vmov.f32	s1, s15
 80086ee:	f002 fa49 	bl	800ab84 <rotate_LZ7ctbe0>
      R = R * *S - c * 0.0;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80086f8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80086fc:	f7f7 ff6e 	bl	80005dc <__aeabi_dmul>
 8008700:	4602      	mov	r2, r0
 8008702:	460b      	mov	r3, r1
 8008704:	4614      	mov	r4, r2
 8008706:	461d      	mov	r5, r3
 8008708:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800870c:	f04f 0200 	mov.w	r2, #0
 8008710:	f04f 0300 	mov.w	r3, #0
 8008714:	f7f7 ff62 	bl	80005dc <__aeabi_dmul>
 8008718:	4602      	mov	r2, r0
 800871a:	460b      	mov	r3, r1
 800871c:	4620      	mov	r0, r4
 800871e:	4629      	mov	r1, r5
 8008720:	f7f7 fda4 	bl	800026c <__aeabi_dsub>
 8008724:	4602      	mov	r2, r0
 8008726:	460b      	mov	r3, r1
 8008728:	e9c7 2308 	strd	r2, r3, [r7, #32]
    }
  }

  *S = R;
 800872c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008730:	68f9      	ldr	r1, [r7, #12]
 8008732:	e9c1 2300 	strd	r2, r3, [r1]
  if (p != 0) {
 8008736:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800873a:	2b00      	cmp	r3, #0
 800873c:	d057      	beq.n	80087ee <cholUpdateFactor_HBMX5a5h+0x1ca>
    s = R * R - U * U;
 800873e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008742:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008746:	f7f7 ff49 	bl	80005dc <__aeabi_dmul>
 800874a:	4602      	mov	r2, r0
 800874c:	460b      	mov	r3, r1
 800874e:	4614      	mov	r4, r2
 8008750:	461d      	mov	r5, r3
 8008752:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008756:	e9d7 0100 	ldrd	r0, r1, [r7]
 800875a:	f7f7 ff3f 	bl	80005dc <__aeabi_dmul>
 800875e:	4602      	mov	r2, r0
 8008760:	460b      	mov	r3, r1
 8008762:	4620      	mov	r0, r4
 8008764:	4629      	mov	r1, r5
 8008766:	f7f7 fd81 	bl	800026c <__aeabi_dsub>
 800876a:	4602      	mov	r2, r0
 800876c:	460b      	mov	r3, r1
 800876e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    if ((!rtIsInf(s)) && (!rtIsNaN(s))) {
 8008772:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 8008776:	f002 fc79 	bl	800b06c <rtIsInf>
 800877a:	4603      	mov	r3, r0
 800877c:	2b00      	cmp	r3, #0
 800877e:	d11d      	bne.n	80087bc <cholUpdateFactor_HBMX5a5h+0x198>
 8008780:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 8008784:	f002 fc96 	bl	800b0b4 <rtIsNaN>
 8008788:	4603      	mov	r3, r0
 800878a:	2b00      	cmp	r3, #0
 800878c:	d116      	bne.n	80087bc <cholUpdateFactor_HBMX5a5h+0x198>
      nrmx = 1.0;
 800878e:	f04f 0200 	mov.w	r2, #0
 8008792:	4b19      	ldr	r3, [pc, #100]	; (80087f8 <cholUpdateFactor_HBMX5a5h+0x1d4>)
 8008794:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
      if (s != 0.0) {
 8008798:	f04f 0200 	mov.w	r2, #0
 800879c:	f04f 0300 	mov.w	r3, #0
 80087a0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80087a4:	f7f8 f982 	bl	8000aac <__aeabi_dcmpeq>
 80087a8:	4603      	mov	r3, r0
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d110      	bne.n	80087d0 <cholUpdateFactor_HBMX5a5h+0x1ac>
        s = fabs(s);
 80087ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087b0:	633b      	str	r3, [r7, #48]	; 0x30
 80087b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80087b8:	637b      	str	r3, [r7, #52]	; 0x34
      if (s != 0.0) {
 80087ba:	e009      	b.n	80087d0 <cholUpdateFactor_HBMX5a5h+0x1ac>
      }
    } else {
      s = (rtNaN);
 80087bc:	4b0f      	ldr	r3, [pc, #60]	; (80087fc <cholUpdateFactor_HBMX5a5h+0x1d8>)
 80087be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087c2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      nrmx = (rtNaN);
 80087c6:	4b0d      	ldr	r3, [pc, #52]	; (80087fc <cholUpdateFactor_HBMX5a5h+0x1d8>)
 80087c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087cc:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }

    *S = nrmx * sqrt(s);
 80087d0:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 80087d4:	f00e fb88 	bl	8016ee8 <sqrt>
 80087d8:	ec51 0b10 	vmov	r0, r1, d0
 80087dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80087e0:	f7f7 fefc 	bl	80005dc <__aeabi_dmul>
 80087e4:	4602      	mov	r2, r0
 80087e6:	460b      	mov	r3, r1
 80087e8:	68f9      	ldr	r1, [r7, #12]
 80087ea:	e9c1 2300 	strd	r2, r3, [r1]
  }
}
 80087ee:	bf00      	nop
 80087f0:	3740      	adds	r7, #64	; 0x40
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bdb0      	pop	{r4, r5, r7, pc}
 80087f6:	bf00      	nop
 80087f8:	3ff00000 	.word	0x3ff00000
 80087fc:	2001da48 	.word	0x2001da48

08008800 <look1_binlxpw>:
#include "look1_binlxpw.h"
#include "rtwtypes.h"

real_T look1_binlxpw(real_T u0, const real_T bp0[], const real_T table[],
                     uint32_T maxIndex)
{
 8008800:	b5b0      	push	{r4, r5, r7, lr}
 8008802:	b08e      	sub	sp, #56	; 0x38
 8008804:	af00      	add	r7, sp, #0
 8008806:	ed87 0b04 	vstr	d0, [r7, #16]
 800880a:	60f8      	str	r0, [r7, #12]
 800880c:	60b9      	str	r1, [r7, #8]
 800880e:	607a      	str	r2, [r7, #4]
  real_T frac;
  real_T yL_0d0;
  uint32_T iLeft;
  if (u0 <= bp0[0U]) {
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008816:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800881a:	f7f8 f95b 	bl	8000ad4 <__aeabi_dcmple>
 800881e:	4603      	mov	r3, r0
 8008820:	2b00      	cmp	r3, #0
 8008822:	d020      	beq.n	8008866 <look1_binlxpw+0x66>
    iLeft = 0U;
 8008824:	2300      	movs	r3, #0
 8008826:	62fb      	str	r3, [r7, #44]	; 0x2c
    frac = (u0 - bp0[0U]) / (bp0[1U] - bp0[0U]);
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800882e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008832:	f7f7 fd1b 	bl	800026c <__aeabi_dsub>
 8008836:	4602      	mov	r2, r0
 8008838:	460b      	mov	r3, r1
 800883a:	4614      	mov	r4, r2
 800883c:	461d      	mov	r5, r3
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	3308      	adds	r3, #8
 8008842:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800884c:	f7f7 fd0e 	bl	800026c <__aeabi_dsub>
 8008850:	4602      	mov	r2, r0
 8008852:	460b      	mov	r3, r1
 8008854:	4620      	mov	r0, r4
 8008856:	4629      	mov	r1, r5
 8008858:	f7f7 ffea 	bl	8000830 <__aeabi_ddiv>
 800885c:	4602      	mov	r2, r0
 800885e:	460b      	mov	r3, r1
 8008860:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8008864:	e087      	b.n	8008976 <look1_binlxpw+0x176>
  } else if (u0 < bp0[maxIndex]) {
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	00db      	lsls	r3, r3, #3
 800886a:	68fa      	ldr	r2, [r7, #12]
 800886c:	4413      	add	r3, r2
 800886e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008872:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008876:	f7f8 f923 	bl	8000ac0 <__aeabi_dcmplt>
 800887a:	4603      	mov	r3, r0
 800887c:	2b00      	cmp	r3, #0
 800887e:	d04b      	beq.n	8008918 <look1_binlxpw+0x118>
    uint32_T bpIdx;
    uint32_T iRght;
    bpIdx = maxIndex >> 1U;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	085b      	lsrs	r3, r3, #1
 8008884:	62bb      	str	r3, [r7, #40]	; 0x28
    iLeft = 0U;
 8008886:	2300      	movs	r3, #0
 8008888:	62fb      	str	r3, [r7, #44]	; 0x2c
    iRght = maxIndex;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	627b      	str	r3, [r7, #36]	; 0x24
    while (iRght - iLeft > 1U) {
 800888e:	e016      	b.n	80088be <look1_binlxpw+0xbe>
      if (u0 < bp0[bpIdx]) {
 8008890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008892:	00db      	lsls	r3, r3, #3
 8008894:	68fa      	ldr	r2, [r7, #12]
 8008896:	4413      	add	r3, r2
 8008898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800889c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80088a0:	f7f8 f90e 	bl	8000ac0 <__aeabi_dcmplt>
 80088a4:	4603      	mov	r3, r0
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d002      	beq.n	80088b0 <look1_binlxpw+0xb0>
        iRght = bpIdx;
 80088aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088ac:	627b      	str	r3, [r7, #36]	; 0x24
 80088ae:	e001      	b.n	80088b4 <look1_binlxpw+0xb4>
      } else {
        iLeft = bpIdx;
 80088b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      bpIdx = (iRght + iLeft) >> 1U;
 80088b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088b8:	4413      	add	r3, r2
 80088ba:	085b      	lsrs	r3, r3, #1
 80088bc:	62bb      	str	r3, [r7, #40]	; 0x28
    while (iRght - iLeft > 1U) {
 80088be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088c2:	1ad3      	subs	r3, r2, r3
 80088c4:	2b01      	cmp	r3, #1
 80088c6:	d8e3      	bhi.n	8008890 <look1_binlxpw+0x90>
    }

    frac = (u0 - bp0[iLeft]) / (bp0[iLeft + 1U] - bp0[iLeft]);
 80088c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088ca:	00db      	lsls	r3, r3, #3
 80088cc:	68fa      	ldr	r2, [r7, #12]
 80088ce:	4413      	add	r3, r2
 80088d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088d4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80088d8:	f7f7 fcc8 	bl	800026c <__aeabi_dsub>
 80088dc:	4602      	mov	r2, r0
 80088de:	460b      	mov	r3, r1
 80088e0:	4614      	mov	r4, r2
 80088e2:	461d      	mov	r5, r3
 80088e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088e6:	3301      	adds	r3, #1
 80088e8:	00db      	lsls	r3, r3, #3
 80088ea:	68fa      	ldr	r2, [r7, #12]
 80088ec:	4413      	add	r3, r2
 80088ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80088f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088f4:	00db      	lsls	r3, r3, #3
 80088f6:	68fa      	ldr	r2, [r7, #12]
 80088f8:	4413      	add	r3, r2
 80088fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088fe:	f7f7 fcb5 	bl	800026c <__aeabi_dsub>
 8008902:	4602      	mov	r2, r0
 8008904:	460b      	mov	r3, r1
 8008906:	4620      	mov	r0, r4
 8008908:	4629      	mov	r1, r5
 800890a:	f7f7 ff91 	bl	8000830 <__aeabi_ddiv>
 800890e:	4602      	mov	r2, r0
 8008910:	460b      	mov	r3, r1
 8008912:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8008916:	e02e      	b.n	8008976 <look1_binlxpw+0x176>
  } else {
    iLeft = maxIndex - 1U;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	3b01      	subs	r3, #1
 800891c:	62fb      	str	r3, [r7, #44]	; 0x2c
    frac = (u0 - bp0[maxIndex - 1U]) / (bp0[maxIndex] - bp0[maxIndex - 1U]);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8008924:	3b01      	subs	r3, #1
 8008926:	00db      	lsls	r3, r3, #3
 8008928:	68fa      	ldr	r2, [r7, #12]
 800892a:	4413      	add	r3, r2
 800892c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008930:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008934:	f7f7 fc9a 	bl	800026c <__aeabi_dsub>
 8008938:	4602      	mov	r2, r0
 800893a:	460b      	mov	r3, r1
 800893c:	4614      	mov	r4, r2
 800893e:	461d      	mov	r5, r3
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	00db      	lsls	r3, r3, #3
 8008944:	68fa      	ldr	r2, [r7, #12]
 8008946:	4413      	add	r3, r2
 8008948:	e9d3 0100 	ldrd	r0, r1, [r3]
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8008952:	3b01      	subs	r3, #1
 8008954:	00db      	lsls	r3, r3, #3
 8008956:	68fa      	ldr	r2, [r7, #12]
 8008958:	4413      	add	r3, r2
 800895a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800895e:	f7f7 fc85 	bl	800026c <__aeabi_dsub>
 8008962:	4602      	mov	r2, r0
 8008964:	460b      	mov	r3, r1
 8008966:	4620      	mov	r0, r4
 8008968:	4629      	mov	r1, r5
 800896a:	f7f7 ff61 	bl	8000830 <__aeabi_ddiv>
 800896e:	4602      	mov	r2, r0
 8008970:	460b      	mov	r3, r1
 8008972:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  }

  yL_0d0 = table[iLeft];
 8008976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008978:	00db      	lsls	r3, r3, #3
 800897a:	68ba      	ldr	r2, [r7, #8]
 800897c:	4413      	add	r3, r2
 800897e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008982:	e9c7 2306 	strd	r2, r3, [r7, #24]
  return (table[iLeft + 1U] - yL_0d0) * frac + yL_0d0;
 8008986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008988:	3301      	adds	r3, #1
 800898a:	00db      	lsls	r3, r3, #3
 800898c:	68ba      	ldr	r2, [r7, #8]
 800898e:	4413      	add	r3, r2
 8008990:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008994:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008998:	f7f7 fc68 	bl	800026c <__aeabi_dsub>
 800899c:	4602      	mov	r2, r0
 800899e:	460b      	mov	r3, r1
 80089a0:	4610      	mov	r0, r2
 80089a2:	4619      	mov	r1, r3
 80089a4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80089a8:	f7f7 fe18 	bl	80005dc <__aeabi_dmul>
 80089ac:	4602      	mov	r2, r0
 80089ae:	460b      	mov	r3, r1
 80089b0:	4610      	mov	r0, r2
 80089b2:	4619      	mov	r1, r3
 80089b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80089b8:	f7f7 fc5a 	bl	8000270 <__adddf3>
 80089bc:	4602      	mov	r2, r0
 80089be:	460b      	mov	r3, r1
 80089c0:	ec43 2b17 	vmov	d7, r2, r3
}
 80089c4:	eeb0 0a47 	vmov.f32	s0, s14
 80089c8:	eef0 0a67 	vmov.f32	s1, s15
 80089cc:	3738      	adds	r7, #56	; 0x38
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080089d4 <qr_5a2P8Gh6>:
#include <math.h>
#include "xgemv_fRiR1I1O.h"
#include "xgerc_tNNiazQU.h"

void qr_5a2P8Gh6(const real_T A[9], real_T Q[9], real_T R[9])
{
 80089d4:	b5b0      	push	{r4, r5, r7, lr}
 80089d6:	b0c0      	sub	sp, #256	; 0x100
 80089d8:	af04      	add	r7, sp, #16
 80089da:	6578      	str	r0, [r7, #84]	; 0x54
 80089dc:	6539      	str	r1, [r7, #80]	; 0x50
 80089de:	64fa      	str	r2, [r7, #76]	; 0x4c
  int32_T c_lastc;
  int32_T coltop;
  int32_T exitg1;
  int32_T knt;
  boolean_T exitg2;
  memcpy(&b_A[0], &A[0], 9U * sizeof(real_T));
 80089e0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80089e4:	2248      	movs	r2, #72	; 0x48
 80089e6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80089e8:	4618      	mov	r0, r3
 80089ea:	f00e f8b7 	bl	8016b5c <memcpy>
  tau_idx_0 = 0.0;
 80089ee:	f04f 0200 	mov.w	r2, #0
 80089f2:	f04f 0300 	mov.w	r3, #0
 80089f6:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
  work[0] = 0.0;
 80089fa:	f04f 0200 	mov.w	r2, #0
 80089fe:	f04f 0300 	mov.w	r3, #0
 8008a02:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
  tau_idx_1 = 0.0;
 8008a06:	f04f 0200 	mov.w	r2, #0
 8008a0a:	f04f 0300 	mov.w	r3, #0
 8008a0e:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
  work[1] = 0.0;
 8008a12:	f04f 0200 	mov.w	r2, #0
 8008a16:	f04f 0300 	mov.w	r3, #0
 8008a1a:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
  work[2] = 0.0;
 8008a1e:	f04f 0200 	mov.w	r2, #0
 8008a22:	f04f 0300 	mov.w	r3, #0
 8008a26:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
  atmp = b_A[0];
 8008a2a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8008a2e:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
  beta1 = xnrm2_xDOlDEtw(2, b_A, 2);
 8008a32:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8008a36:	2202      	movs	r2, #2
 8008a38:	4619      	mov	r1, r3
 8008a3a:	2002      	movs	r0, #2
 8008a3c:	f004 ffc0 	bl	800d9c0 <xnrm2_xDOlDEtw>
 8008a40:	ed87 0b38 	vstr	d0, [r7, #224]	; 0xe0
  if (beta1 != 0.0) {
 8008a44:	f04f 0200 	mov.w	r2, #0
 8008a48:	f04f 0300 	mov.w	r3, #0
 8008a4c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008a50:	f7f8 f82c 	bl	8000aac <__aeabi_dcmpeq>
 8008a54:	4603      	mov	r3, r0
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	f040 8172 	bne.w	8008d40 <qr_5a2P8Gh6+0x36c>
    beta1 = rt_hypotd_snf(b_A[0], beta1);
 8008a5c:	ed97 7b1c 	vldr	d7, [r7, #112]	; 0x70
 8008a60:	ed97 1b38 	vldr	d1, [r7, #224]	; 0xe0
 8008a64:	eeb0 0a47 	vmov.f32	s0, s14
 8008a68:	eef0 0a67 	vmov.f32	s1, s15
 8008a6c:	f002 fa14 	bl	800ae98 <rt_hypotd_snf>
 8008a70:	ed87 0b38 	vstr	d0, [r7, #224]	; 0xe0
    if (b_A[0] >= 0.0) {
 8008a74:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8008a78:	f04f 0200 	mov.w	r2, #0
 8008a7c:	f04f 0300 	mov.w	r3, #0
 8008a80:	f7f8 f832 	bl	8000ae8 <__aeabi_dcmpge>
 8008a84:	4603      	mov	r3, r0
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d009      	beq.n	8008a9e <qr_5a2P8Gh6+0xca>
      beta1 = -beta1;
 8008a8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a8e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008a92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a96:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8008a9a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    }

    if (fabs(beta1) < 1.0020841800044864E-292) {
 8008a9e:	f8d7 40e0 	ldr.w	r4, [r7, #224]	; 0xe0
 8008aa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008aa6:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8008aaa:	f04f 0200 	mov.w	r2, #0
 8008aae:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 8008ab2:	4620      	mov	r0, r4
 8008ab4:	4629      	mov	r1, r5
 8008ab6:	f7f8 f803 	bl	8000ac0 <__aeabi_dcmplt>
 8008aba:	4603      	mov	r3, r0
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	f000 80f1 	beq.w	8008ca4 <qr_5a2P8Gh6+0x2d0>
      knt = 0;
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      do {
        knt++;
 8008ac8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008acc:	3301      	adds	r3, #1
 8008ace:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
        for (b_coltop = 1; b_coltop < 3; b_coltop++) {
 8008ad2:	2301      	movs	r3, #1
 8008ad4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008ad8:	e01f      	b.n	8008b1a <qr_5a2P8Gh6+0x146>
          b_A[b_coltop] *= 9.9792015476736E+291;
 8008ada:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008ade:	00db      	lsls	r3, r3, #3
 8008ae0:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8008ae4:	4413      	add	r3, r2
 8008ae6:	3b80      	subs	r3, #128	; 0x80
 8008ae8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008aec:	f04f 0200 	mov.w	r2, #0
 8008af0:	4bc9      	ldr	r3, [pc, #804]	; (8008e18 <qr_5a2P8Gh6+0x444>)
 8008af2:	f7f7 fd73 	bl	80005dc <__aeabi_dmul>
 8008af6:	4602      	mov	r2, r0
 8008af8:	460b      	mov	r3, r1
 8008afa:	4610      	mov	r0, r2
 8008afc:	4619      	mov	r1, r3
 8008afe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008b02:	00db      	lsls	r3, r3, #3
 8008b04:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8008b08:	4413      	add	r3, r2
 8008b0a:	3b80      	subs	r3, #128	; 0x80
 8008b0c:	e9c3 0100 	strd	r0, r1, [r3]
        for (b_coltop = 1; b_coltop < 3; b_coltop++) {
 8008b10:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008b14:	3301      	adds	r3, #1
 8008b16:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008b1a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008b1e:	2b02      	cmp	r3, #2
 8008b20:	dddb      	ble.n	8008ada <qr_5a2P8Gh6+0x106>
        }

        beta1 *= 9.9792015476736E+291;
 8008b22:	f04f 0200 	mov.w	r2, #0
 8008b26:	4bbc      	ldr	r3, [pc, #752]	; (8008e18 <qr_5a2P8Gh6+0x444>)
 8008b28:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008b2c:	f7f7 fd56 	bl	80005dc <__aeabi_dmul>
 8008b30:	4602      	mov	r2, r0
 8008b32:	460b      	mov	r3, r1
 8008b34:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
        atmp *= 9.9792015476736E+291;
 8008b38:	f04f 0200 	mov.w	r2, #0
 8008b3c:	4bb6      	ldr	r3, [pc, #728]	; (8008e18 <qr_5a2P8Gh6+0x444>)
 8008b3e:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 8008b42:	f7f7 fd4b 	bl	80005dc <__aeabi_dmul>
 8008b46:	4602      	mov	r2, r0
 8008b48:	460b      	mov	r3, r1
 8008b4a:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
      } while ((fabs(beta1) < 1.0020841800044864E-292) && (knt < 20));
 8008b4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b52:	643b      	str	r3, [r7, #64]	; 0x40
 8008b54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b58:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008b5c:	647b      	str	r3, [r7, #68]	; 0x44
 8008b5e:	f04f 0200 	mov.w	r2, #0
 8008b62:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 8008b66:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8008b6a:	f7f7 ffa9 	bl	8000ac0 <__aeabi_dcmplt>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d003      	beq.n	8008b7c <qr_5a2P8Gh6+0x1a8>
 8008b74:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008b78:	2b13      	cmp	r3, #19
 8008b7a:	dda5      	ble.n	8008ac8 <qr_5a2P8Gh6+0xf4>

      beta1 = rt_hypotd_snf(atmp, xnrm2_xDOlDEtw(2, b_A, 2));
 8008b7c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8008b80:	2202      	movs	r2, #2
 8008b82:	4619      	mov	r1, r3
 8008b84:	2002      	movs	r0, #2
 8008b86:	f004 ff1b 	bl	800d9c0 <xnrm2_xDOlDEtw>
 8008b8a:	eeb0 7a40 	vmov.f32	s14, s0
 8008b8e:	eef0 7a60 	vmov.f32	s15, s1
 8008b92:	eeb0 1a47 	vmov.f32	s2, s14
 8008b96:	eef0 1a67 	vmov.f32	s3, s15
 8008b9a:	ed97 0b3a 	vldr	d0, [r7, #232]	; 0xe8
 8008b9e:	f002 f97b 	bl	800ae98 <rt_hypotd_snf>
 8008ba2:	ed87 0b38 	vstr	d0, [r7, #224]	; 0xe0
      if (atmp >= 0.0) {
 8008ba6:	f04f 0200 	mov.w	r2, #0
 8008baa:	f04f 0300 	mov.w	r3, #0
 8008bae:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 8008bb2:	f7f7 ff99 	bl	8000ae8 <__aeabi_dcmpge>
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d009      	beq.n	8008bd0 <qr_5a2P8Gh6+0x1fc>
        beta1 = -beta1;
 8008bbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008bc0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008bc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008bc8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8008bcc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      }

      tau_idx_0 = (beta1 - atmp) / beta1;
 8008bd0:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 8008bd4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008bd8:	f7f7 fb48 	bl	800026c <__aeabi_dsub>
 8008bdc:	4602      	mov	r2, r0
 8008bde:	460b      	mov	r3, r1
 8008be0:	4610      	mov	r0, r2
 8008be2:	4619      	mov	r1, r3
 8008be4:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8008be8:	f7f7 fe22 	bl	8000830 <__aeabi_ddiv>
 8008bec:	4602      	mov	r2, r0
 8008bee:	460b      	mov	r3, r1
 8008bf0:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
      atmp = 1.0 / (atmp - beta1);
 8008bf4:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8008bf8:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 8008bfc:	f7f7 fb36 	bl	800026c <__aeabi_dsub>
 8008c00:	4602      	mov	r2, r0
 8008c02:	460b      	mov	r3, r1
 8008c04:	f04f 0000 	mov.w	r0, #0
 8008c08:	4984      	ldr	r1, [pc, #528]	; (8008e1c <qr_5a2P8Gh6+0x448>)
 8008c0a:	f7f7 fe11 	bl	8000830 <__aeabi_ddiv>
 8008c0e:	4602      	mov	r2, r0
 8008c10:	460b      	mov	r3, r1
 8008c12:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
      for (b_coltop = 1; b_coltop < 3; b_coltop++) {
 8008c16:	2301      	movs	r3, #1
 8008c18:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008c1c:	e01e      	b.n	8008c5c <qr_5a2P8Gh6+0x288>
        b_A[b_coltop] *= atmp;
 8008c1e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008c22:	00db      	lsls	r3, r3, #3
 8008c24:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8008c28:	4413      	add	r3, r2
 8008c2a:	3b80      	subs	r3, #128	; 0x80
 8008c2c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008c30:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 8008c34:	f7f7 fcd2 	bl	80005dc <__aeabi_dmul>
 8008c38:	4602      	mov	r2, r0
 8008c3a:	460b      	mov	r3, r1
 8008c3c:	4610      	mov	r0, r2
 8008c3e:	4619      	mov	r1, r3
 8008c40:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008c44:	00db      	lsls	r3, r3, #3
 8008c46:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8008c4a:	4413      	add	r3, r2
 8008c4c:	3b80      	subs	r3, #128	; 0x80
 8008c4e:	e9c3 0100 	strd	r0, r1, [r3]
      for (b_coltop = 1; b_coltop < 3; b_coltop++) {
 8008c52:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008c56:	3301      	adds	r3, #1
 8008c58:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008c5c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008c60:	2b02      	cmp	r3, #2
 8008c62:	dddc      	ble.n	8008c1e <qr_5a2P8Gh6+0x24a>
      }

      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 8008c64:	2300      	movs	r3, #0
 8008c66:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008c6a:	e010      	b.n	8008c8e <qr_5a2P8Gh6+0x2ba>
        beta1 *= 1.0020841800044864E-292;
 8008c6c:	f04f 0200 	mov.w	r2, #0
 8008c70:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 8008c74:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008c78:	f7f7 fcb0 	bl	80005dc <__aeabi_dmul>
 8008c7c:	4602      	mov	r2, r0
 8008c7e:	460b      	mov	r3, r1
 8008c80:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 8008c84:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008c88:	3301      	adds	r3, #1
 8008c8a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008c8e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008c92:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008c96:	429a      	cmp	r2, r3
 8008c98:	dbe8      	blt.n	8008c6c <qr_5a2P8Gh6+0x298>
      }

      atmp = beta1;
 8008c9a:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8008c9e:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
 8008ca2:	e04d      	b.n	8008d40 <qr_5a2P8Gh6+0x36c>
    } else {
      tau_idx_0 = (beta1 - b_A[0]) / beta1;
 8008ca4:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8008ca8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008cac:	f7f7 fade 	bl	800026c <__aeabi_dsub>
 8008cb0:	4602      	mov	r2, r0
 8008cb2:	460b      	mov	r3, r1
 8008cb4:	4610      	mov	r0, r2
 8008cb6:	4619      	mov	r1, r3
 8008cb8:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8008cbc:	f7f7 fdb8 	bl	8000830 <__aeabi_ddiv>
 8008cc0:	4602      	mov	r2, r0
 8008cc2:	460b      	mov	r3, r1
 8008cc4:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
      atmp = 1.0 / (b_A[0] - beta1);
 8008cc8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8008ccc:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8008cd0:	f7f7 facc 	bl	800026c <__aeabi_dsub>
 8008cd4:	4602      	mov	r2, r0
 8008cd6:	460b      	mov	r3, r1
 8008cd8:	f04f 0000 	mov.w	r0, #0
 8008cdc:	494f      	ldr	r1, [pc, #316]	; (8008e1c <qr_5a2P8Gh6+0x448>)
 8008cde:	f7f7 fda7 	bl	8000830 <__aeabi_ddiv>
 8008ce2:	4602      	mov	r2, r0
 8008ce4:	460b      	mov	r3, r1
 8008ce6:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
      for (c_lastc = 1; c_lastc < 3; c_lastc++) {
 8008cea:	2301      	movs	r3, #1
 8008cec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008cf0:	e01e      	b.n	8008d30 <qr_5a2P8Gh6+0x35c>
        b_A[c_lastc] *= atmp;
 8008cf2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008cf6:	00db      	lsls	r3, r3, #3
 8008cf8:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8008cfc:	4413      	add	r3, r2
 8008cfe:	3b80      	subs	r3, #128	; 0x80
 8008d00:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008d04:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 8008d08:	f7f7 fc68 	bl	80005dc <__aeabi_dmul>
 8008d0c:	4602      	mov	r2, r0
 8008d0e:	460b      	mov	r3, r1
 8008d10:	4610      	mov	r0, r2
 8008d12:	4619      	mov	r1, r3
 8008d14:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008d18:	00db      	lsls	r3, r3, #3
 8008d1a:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8008d1e:	4413      	add	r3, r2
 8008d20:	3b80      	subs	r3, #128	; 0x80
 8008d22:	e9c3 0100 	strd	r0, r1, [r3]
      for (c_lastc = 1; c_lastc < 3; c_lastc++) {
 8008d26:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008d2a:	3301      	adds	r3, #1
 8008d2c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008d30:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008d34:	2b02      	cmp	r3, #2
 8008d36:	dddc      	ble.n	8008cf2 <qr_5a2P8Gh6+0x31e>
      }

      atmp = beta1;
 8008d38:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8008d3c:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
    }
  }

  b_A[0] = 1.0;
 8008d40:	f04f 0200 	mov.w	r2, #0
 8008d44:	4b35      	ldr	r3, [pc, #212]	; (8008e1c <qr_5a2P8Gh6+0x448>)
 8008d46:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  if (tau_idx_0 != 0.0) {
 8008d4a:	f04f 0200 	mov.w	r2, #0
 8008d4e:	f04f 0300 	mov.w	r3, #0
 8008d52:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8008d56:	f7f7 fea9 	bl	8000aac <__aeabi_dcmpeq>
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	f040 8081 	bne.w	8008e64 <qr_5a2P8Gh6+0x490>
    knt = 3;
 8008d62:	2303      	movs	r3, #3
 8008d64:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    c_lastc = 2;
 8008d68:	2302      	movs	r3, #2
 8008d6a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    while ((knt > 0) && (b_A[c_lastc] == 0.0)) {
 8008d6e:	e009      	b.n	8008d84 <qr_5a2P8Gh6+0x3b0>
      knt--;
 8008d70:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008d74:	3b01      	subs	r3, #1
 8008d76:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      c_lastc--;
 8008d7a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008d7e:	3b01      	subs	r3, #1
 8008d80:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    while ((knt > 0) && (b_A[c_lastc] == 0.0)) {
 8008d84:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	dd11      	ble.n	8008db0 <qr_5a2P8Gh6+0x3dc>
 8008d8c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008d90:	00db      	lsls	r3, r3, #3
 8008d92:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8008d96:	4413      	add	r3, r2
 8008d98:	3b80      	subs	r3, #128	; 0x80
 8008d9a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008d9e:	f04f 0200 	mov.w	r2, #0
 8008da2:	f04f 0300 	mov.w	r3, #0
 8008da6:	f7f7 fe81 	bl	8000aac <__aeabi_dcmpeq>
 8008daa:	4603      	mov	r3, r0
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d1df      	bne.n	8008d70 <qr_5a2P8Gh6+0x39c>
    }

    c_lastc = 2;
 8008db0:	2302      	movs	r3, #2
 8008db2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    exitg2 = false;
 8008db6:	2300      	movs	r3, #0
 8008db8:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
    while ((!exitg2) && (c_lastc > 0)) {
 8008dbc:	e049      	b.n	8008e52 <qr_5a2P8Gh6+0x47e>
      b_coltop = (c_lastc - 1) * 3 + 3;
 8008dbe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008dc2:	4613      	mov	r3, r2
 8008dc4:	005b      	lsls	r3, r3, #1
 8008dc6:	4413      	add	r3, r2
 8008dc8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
      coltop = b_coltop;
 8008dcc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008dd0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
      do {
        exitg1 = 0;
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
        if (coltop + 1 <= b_coltop + knt) {
 8008dda:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8008dde:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008de2:	441a      	add	r2, r3
 8008de4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008de8:	4293      	cmp	r3, r2
 8008dea:	da1f      	bge.n	8008e2c <qr_5a2P8Gh6+0x458>
          if (b_A[coltop] != 0.0) {
 8008dec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008df0:	00db      	lsls	r3, r3, #3
 8008df2:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8008df6:	4413      	add	r3, r2
 8008df8:	3b80      	subs	r3, #128	; 0x80
 8008dfa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008dfe:	f04f 0200 	mov.w	r2, #0
 8008e02:	f04f 0300 	mov.w	r3, #0
 8008e06:	f7f7 fe51 	bl	8000aac <__aeabi_dcmpeq>
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d107      	bne.n	8008e20 <qr_5a2P8Gh6+0x44c>
            exitg1 = 1;
 8008e10:	2301      	movs	r3, #1
 8008e12:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008e16:	e011      	b.n	8008e3c <qr_5a2P8Gh6+0x468>
 8008e18:	7c900000 	.word	0x7c900000
 8008e1c:	3ff00000 	.word	0x3ff00000
          } else {
            coltop++;
 8008e20:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008e24:	3301      	adds	r3, #1
 8008e26:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008e2a:	e007      	b.n	8008e3c <qr_5a2P8Gh6+0x468>
          }
        } else {
          c_lastc--;
 8008e2c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008e30:	3b01      	subs	r3, #1
 8008e32:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
          exitg1 = 2;
 8008e36:	2302      	movs	r3, #2
 8008e38:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
        }
      } while (exitg1 == 0);
 8008e3c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d0c7      	beq.n	8008dd4 <qr_5a2P8Gh6+0x400>

      if (exitg1 == 1) {
 8008e44:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008e48:	2b01      	cmp	r3, #1
 8008e4a:	d102      	bne.n	8008e52 <qr_5a2P8Gh6+0x47e>
        exitg2 = true;
 8008e4c:	2301      	movs	r3, #1
 8008e4e:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
    while ((!exitg2) && (c_lastc > 0)) {
 8008e52:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d10a      	bne.n	8008e70 <qr_5a2P8Gh6+0x49c>
 8008e5a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	dcad      	bgt.n	8008dbe <qr_5a2P8Gh6+0x3ea>
 8008e62:	e005      	b.n	8008e70 <qr_5a2P8Gh6+0x49c>
      }
    }
  } else {
    knt = 0;
 8008e64:	2300      	movs	r3, #0
 8008e66:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    c_lastc = 0;
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  }

  if (knt > 0) {
 8008e70:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	dd29      	ble.n	8008ecc <qr_5a2P8Gh6+0x4f8>
    xgemv_fRiR1I1O(knt, c_lastc, b_A, 4, b_A, 1, work);
 8008e78:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8008e7c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008e80:	9302      	str	r3, [sp, #8]
 8008e82:	2301      	movs	r3, #1
 8008e84:	9301      	str	r3, [sp, #4]
 8008e86:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8008e8a:	9300      	str	r3, [sp, #0]
 8008e8c:	2304      	movs	r3, #4
 8008e8e:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8008e92:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8008e96:	f004 f94f 	bl	800d138 <xgemv_fRiR1I1O>
    xgerc_tNNiazQU(knt, c_lastc, -tau_idx_0, 1, work, b_A, 4);
 8008e9a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008e9e:	63bb      	str	r3, [r7, #56]	; 0x38
 8008ea0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008ea4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8008ea8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008eaa:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8008eae:	2304      	movs	r3, #4
 8008eb0:	9301      	str	r3, [sp, #4]
 8008eb2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8008eb6:	9300      	str	r3, [sp, #0]
 8008eb8:	4613      	mov	r3, r2
 8008eba:	2201      	movs	r2, #1
 8008ebc:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8008ec0:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8008ec4:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8008ec8:	f004 fa3f 	bl	800d34a <xgerc_tNNiazQU>
  }

  b_A[0] = atmp;
 8008ecc:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 8008ed0:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  atmp = b_A[4];
 8008ed4:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8008ed8:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
  beta1 = xnrm2_xDOlDEtw(1, b_A, 6);
 8008edc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8008ee0:	2206      	movs	r2, #6
 8008ee2:	4619      	mov	r1, r3
 8008ee4:	2001      	movs	r0, #1
 8008ee6:	f004 fd6b 	bl	800d9c0 <xnrm2_xDOlDEtw>
 8008eea:	ed87 0b38 	vstr	d0, [r7, #224]	; 0xe0
  if (beta1 != 0.0) {
 8008eee:	f04f 0200 	mov.w	r2, #0
 8008ef2:	f04f 0300 	mov.w	r3, #0
 8008ef6:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008efa:	f7f7 fdd7 	bl	8000aac <__aeabi_dcmpeq>
 8008efe:	4603      	mov	r3, r0
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	f040 8170 	bne.w	80091e6 <qr_5a2P8Gh6+0x812>
    beta1 = rt_hypotd_snf(b_A[4], beta1);
 8008f06:	ed97 7b24 	vldr	d7, [r7, #144]	; 0x90
 8008f0a:	ed97 1b38 	vldr	d1, [r7, #224]	; 0xe0
 8008f0e:	eeb0 0a47 	vmov.f32	s0, s14
 8008f12:	eef0 0a67 	vmov.f32	s1, s15
 8008f16:	f001 ffbf 	bl	800ae98 <rt_hypotd_snf>
 8008f1a:	ed87 0b38 	vstr	d0, [r7, #224]	; 0xe0
    if (b_A[4] >= 0.0) {
 8008f1e:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8008f22:	f04f 0200 	mov.w	r2, #0
 8008f26:	f04f 0300 	mov.w	r3, #0
 8008f2a:	f7f7 fddd 	bl	8000ae8 <__aeabi_dcmpge>
 8008f2e:	4603      	mov	r3, r0
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d009      	beq.n	8008f48 <qr_5a2P8Gh6+0x574>
      beta1 = -beta1;
 8008f34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f38:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008f3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f40:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8008f44:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    }

    if (fabs(beta1) < 1.0020841800044864E-292) {
 8008f48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f4c:	633b      	str	r3, [r7, #48]	; 0x30
 8008f4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f52:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008f56:	637b      	str	r3, [r7, #52]	; 0x34
 8008f58:	f04f 0200 	mov.w	r2, #0
 8008f5c:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 8008f60:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8008f64:	f7f7 fdac 	bl	8000ac0 <__aeabi_dcmplt>
 8008f68:	4603      	mov	r3, r0
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	f000 80ef 	beq.w	800914e <qr_5a2P8Gh6+0x77a>
      knt = 0;
 8008f70:	2300      	movs	r3, #0
 8008f72:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      do {
        knt++;
 8008f76:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008f7a:	3301      	adds	r3, #1
 8008f7c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
        for (b_coltop = 5; b_coltop < 6; b_coltop++) {
 8008f80:	2305      	movs	r3, #5
 8008f82:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008f86:	e01f      	b.n	8008fc8 <qr_5a2P8Gh6+0x5f4>
          b_A[b_coltop] *= 9.9792015476736E+291;
 8008f88:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008f8c:	00db      	lsls	r3, r3, #3
 8008f8e:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8008f92:	4413      	add	r3, r2
 8008f94:	3b80      	subs	r3, #128	; 0x80
 8008f96:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008f9a:	f04f 0200 	mov.w	r2, #0
 8008f9e:	4bc9      	ldr	r3, [pc, #804]	; (80092c4 <qr_5a2P8Gh6+0x8f0>)
 8008fa0:	f7f7 fb1c 	bl	80005dc <__aeabi_dmul>
 8008fa4:	4602      	mov	r2, r0
 8008fa6:	460b      	mov	r3, r1
 8008fa8:	4610      	mov	r0, r2
 8008faa:	4619      	mov	r1, r3
 8008fac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008fb0:	00db      	lsls	r3, r3, #3
 8008fb2:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8008fb6:	4413      	add	r3, r2
 8008fb8:	3b80      	subs	r3, #128	; 0x80
 8008fba:	e9c3 0100 	strd	r0, r1, [r3]
        for (b_coltop = 5; b_coltop < 6; b_coltop++) {
 8008fbe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008fc2:	3301      	adds	r3, #1
 8008fc4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008fc8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008fcc:	2b05      	cmp	r3, #5
 8008fce:	dddb      	ble.n	8008f88 <qr_5a2P8Gh6+0x5b4>
        }

        beta1 *= 9.9792015476736E+291;
 8008fd0:	f04f 0200 	mov.w	r2, #0
 8008fd4:	4bbb      	ldr	r3, [pc, #748]	; (80092c4 <qr_5a2P8Gh6+0x8f0>)
 8008fd6:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008fda:	f7f7 faff 	bl	80005dc <__aeabi_dmul>
 8008fde:	4602      	mov	r2, r0
 8008fe0:	460b      	mov	r3, r1
 8008fe2:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
        atmp *= 9.9792015476736E+291;
 8008fe6:	f04f 0200 	mov.w	r2, #0
 8008fea:	4bb6      	ldr	r3, [pc, #728]	; (80092c4 <qr_5a2P8Gh6+0x8f0>)
 8008fec:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 8008ff0:	f7f7 faf4 	bl	80005dc <__aeabi_dmul>
 8008ff4:	4602      	mov	r2, r0
 8008ff6:	460b      	mov	r3, r1
 8008ff8:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
      } while ((fabs(beta1) < 1.0020841800044864E-292) && (knt < 20));
 8008ffc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009000:	62bb      	str	r3, [r7, #40]	; 0x28
 8009002:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009006:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800900a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800900c:	f04f 0200 	mov.w	r2, #0
 8009010:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 8009014:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8009018:	f7f7 fd52 	bl	8000ac0 <__aeabi_dcmplt>
 800901c:	4603      	mov	r3, r0
 800901e:	2b00      	cmp	r3, #0
 8009020:	d003      	beq.n	800902a <qr_5a2P8Gh6+0x656>
 8009022:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009026:	2b13      	cmp	r3, #19
 8009028:	dda5      	ble.n	8008f76 <qr_5a2P8Gh6+0x5a2>

      beta1 = rt_hypotd_snf(atmp, xnrm2_xDOlDEtw(1, b_A, 6));
 800902a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800902e:	2206      	movs	r2, #6
 8009030:	4619      	mov	r1, r3
 8009032:	2001      	movs	r0, #1
 8009034:	f004 fcc4 	bl	800d9c0 <xnrm2_xDOlDEtw>
 8009038:	eeb0 7a40 	vmov.f32	s14, s0
 800903c:	eef0 7a60 	vmov.f32	s15, s1
 8009040:	eeb0 1a47 	vmov.f32	s2, s14
 8009044:	eef0 1a67 	vmov.f32	s3, s15
 8009048:	ed97 0b3a 	vldr	d0, [r7, #232]	; 0xe8
 800904c:	f001 ff24 	bl	800ae98 <rt_hypotd_snf>
 8009050:	ed87 0b38 	vstr	d0, [r7, #224]	; 0xe0
      if (atmp >= 0.0) {
 8009054:	f04f 0200 	mov.w	r2, #0
 8009058:	f04f 0300 	mov.w	r3, #0
 800905c:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 8009060:	f7f7 fd42 	bl	8000ae8 <__aeabi_dcmpge>
 8009064:	4603      	mov	r3, r0
 8009066:	2b00      	cmp	r3, #0
 8009068:	d009      	beq.n	800907e <qr_5a2P8Gh6+0x6aa>
        beta1 = -beta1;
 800906a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800906e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009072:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009076:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800907a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      }

      tau_idx_1 = (beta1 - atmp) / beta1;
 800907e:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 8009082:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009086:	f7f7 f8f1 	bl	800026c <__aeabi_dsub>
 800908a:	4602      	mov	r2, r0
 800908c:	460b      	mov	r3, r1
 800908e:	4610      	mov	r0, r2
 8009090:	4619      	mov	r1, r3
 8009092:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8009096:	f7f7 fbcb 	bl	8000830 <__aeabi_ddiv>
 800909a:	4602      	mov	r2, r0
 800909c:	460b      	mov	r3, r1
 800909e:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
      atmp = 1.0 / (atmp - beta1);
 80090a2:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 80090a6:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 80090aa:	f7f7 f8df 	bl	800026c <__aeabi_dsub>
 80090ae:	4602      	mov	r2, r0
 80090b0:	460b      	mov	r3, r1
 80090b2:	f04f 0000 	mov.w	r0, #0
 80090b6:	4984      	ldr	r1, [pc, #528]	; (80092c8 <qr_5a2P8Gh6+0x8f4>)
 80090b8:	f7f7 fbba 	bl	8000830 <__aeabi_ddiv>
 80090bc:	4602      	mov	r2, r0
 80090be:	460b      	mov	r3, r1
 80090c0:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
      for (b_coltop = 5; b_coltop < 6; b_coltop++) {
 80090c4:	2305      	movs	r3, #5
 80090c6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80090ca:	e01c      	b.n	8009106 <qr_5a2P8Gh6+0x732>
        b_A[b_coltop] *= atmp;
 80090cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80090d0:	00db      	lsls	r3, r3, #3
 80090d2:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80090d6:	4413      	add	r3, r2
 80090d8:	3b80      	subs	r3, #128	; 0x80
 80090da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80090de:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 80090e2:	f7f7 fa7b 	bl	80005dc <__aeabi_dmul>
 80090e6:	4602      	mov	r2, r0
 80090e8:	460b      	mov	r3, r1
 80090ea:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 80090ee:	00c9      	lsls	r1, r1, #3
 80090f0:	f107 00f0 	add.w	r0, r7, #240	; 0xf0
 80090f4:	4401      	add	r1, r0
 80090f6:	3980      	subs	r1, #128	; 0x80
 80090f8:	e9c1 2300 	strd	r2, r3, [r1]
      for (b_coltop = 5; b_coltop < 6; b_coltop++) {
 80090fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009100:	3301      	adds	r3, #1
 8009102:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009106:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800910a:	2b05      	cmp	r3, #5
 800910c:	ddde      	ble.n	80090cc <qr_5a2P8Gh6+0x6f8>
      }

      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 800910e:	2300      	movs	r3, #0
 8009110:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009114:	e010      	b.n	8009138 <qr_5a2P8Gh6+0x764>
        beta1 *= 1.0020841800044864E-292;
 8009116:	f04f 0200 	mov.w	r2, #0
 800911a:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800911e:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009122:	f7f7 fa5b 	bl	80005dc <__aeabi_dmul>
 8009126:	4602      	mov	r2, r0
 8009128:	460b      	mov	r3, r1
 800912a:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 800912e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009132:	3301      	adds	r3, #1
 8009134:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009138:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800913c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009140:	429a      	cmp	r2, r3
 8009142:	dbe8      	blt.n	8009116 <qr_5a2P8Gh6+0x742>
      }

      atmp = beta1;
 8009144:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8009148:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
 800914c:	e04b      	b.n	80091e6 <qr_5a2P8Gh6+0x812>
    } else {
      tau_idx_1 = (beta1 - b_A[4]) / beta1;
 800914e:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8009152:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009156:	f7f7 f889 	bl	800026c <__aeabi_dsub>
 800915a:	4602      	mov	r2, r0
 800915c:	460b      	mov	r3, r1
 800915e:	4610      	mov	r0, r2
 8009160:	4619      	mov	r1, r3
 8009162:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8009166:	f7f7 fb63 	bl	8000830 <__aeabi_ddiv>
 800916a:	4602      	mov	r2, r0
 800916c:	460b      	mov	r3, r1
 800916e:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
      atmp = 1.0 / (b_A[4] - beta1);
 8009172:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8009176:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800917a:	f7f7 f877 	bl	800026c <__aeabi_dsub>
 800917e:	4602      	mov	r2, r0
 8009180:	460b      	mov	r3, r1
 8009182:	f04f 0000 	mov.w	r0, #0
 8009186:	4950      	ldr	r1, [pc, #320]	; (80092c8 <qr_5a2P8Gh6+0x8f4>)
 8009188:	f7f7 fb52 	bl	8000830 <__aeabi_ddiv>
 800918c:	4602      	mov	r2, r0
 800918e:	460b      	mov	r3, r1
 8009190:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
      for (c_lastc = 5; c_lastc < 6; c_lastc++) {
 8009194:	2305      	movs	r3, #5
 8009196:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800919a:	e01c      	b.n	80091d6 <qr_5a2P8Gh6+0x802>
        b_A[c_lastc] *= atmp;
 800919c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80091a0:	00db      	lsls	r3, r3, #3
 80091a2:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80091a6:	4413      	add	r3, r2
 80091a8:	3b80      	subs	r3, #128	; 0x80
 80091aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80091ae:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 80091b2:	f7f7 fa13 	bl	80005dc <__aeabi_dmul>
 80091b6:	4602      	mov	r2, r0
 80091b8:	460b      	mov	r3, r1
 80091ba:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 80091be:	00c9      	lsls	r1, r1, #3
 80091c0:	f107 00f0 	add.w	r0, r7, #240	; 0xf0
 80091c4:	4401      	add	r1, r0
 80091c6:	3980      	subs	r1, #128	; 0x80
 80091c8:	e9c1 2300 	strd	r2, r3, [r1]
      for (c_lastc = 5; c_lastc < 6; c_lastc++) {
 80091cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80091d0:	3301      	adds	r3, #1
 80091d2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80091d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80091da:	2b05      	cmp	r3, #5
 80091dc:	ddde      	ble.n	800919c <qr_5a2P8Gh6+0x7c8>
      }

      atmp = beta1;
 80091de:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 80091e2:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
    }
  }

  b_A[4] = 1.0;
 80091e6:	f04f 0200 	mov.w	r2, #0
 80091ea:	4b37      	ldr	r3, [pc, #220]	; (80092c8 <qr_5a2P8Gh6+0x8f4>)
 80091ec:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
  if (tau_idx_1 != 0.0) {
 80091f0:	f04f 0200 	mov.w	r2, #0
 80091f4:	f04f 0300 	mov.w	r3, #0
 80091f8:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80091fc:	f7f7 fc56 	bl	8000aac <__aeabi_dcmpeq>
 8009200:	4603      	mov	r3, r0
 8009202:	2b00      	cmp	r3, #0
 8009204:	d162      	bne.n	80092cc <qr_5a2P8Gh6+0x8f8>
    knt = 2;
 8009206:	2302      	movs	r3, #2
 8009208:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    c_lastc = 5;
 800920c:	2305      	movs	r3, #5
 800920e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    while ((knt > 0) && (b_A[c_lastc] == 0.0)) {
 8009212:	e009      	b.n	8009228 <qr_5a2P8Gh6+0x854>
      knt--;
 8009214:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009218:	3b01      	subs	r3, #1
 800921a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      c_lastc--;
 800921e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009222:	3b01      	subs	r3, #1
 8009224:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    while ((knt > 0) && (b_A[c_lastc] == 0.0)) {
 8009228:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800922c:	2b00      	cmp	r3, #0
 800922e:	dd11      	ble.n	8009254 <qr_5a2P8Gh6+0x880>
 8009230:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009234:	00db      	lsls	r3, r3, #3
 8009236:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800923a:	4413      	add	r3, r2
 800923c:	3b80      	subs	r3, #128	; 0x80
 800923e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009242:	f04f 0200 	mov.w	r2, #0
 8009246:	f04f 0300 	mov.w	r3, #0
 800924a:	f7f7 fc2f 	bl	8000aac <__aeabi_dcmpeq>
 800924e:	4603      	mov	r3, r0
 8009250:	2b00      	cmp	r3, #0
 8009252:	d1df      	bne.n	8009214 <qr_5a2P8Gh6+0x840>
    }

    c_lastc = 1;
 8009254:	2301      	movs	r3, #1
 8009256:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    coltop = 7;
 800925a:	2307      	movs	r3, #7
 800925c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    do {
      exitg1 = 0;
 8009260:	2300      	movs	r3, #0
 8009262:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
      if (coltop + 1 <= knt + 7) {
 8009266:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800926a:	3306      	adds	r3, #6
 800926c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009270:	429a      	cmp	r2, r3
 8009272:	dc1b      	bgt.n	80092ac <qr_5a2P8Gh6+0x8d8>
        if (b_A[coltop] != 0.0) {
 8009274:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009278:	00db      	lsls	r3, r3, #3
 800927a:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800927e:	4413      	add	r3, r2
 8009280:	3b80      	subs	r3, #128	; 0x80
 8009282:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009286:	f04f 0200 	mov.w	r2, #0
 800928a:	f04f 0300 	mov.w	r3, #0
 800928e:	f7f7 fc0d 	bl	8000aac <__aeabi_dcmpeq>
 8009292:	4603      	mov	r3, r0
 8009294:	2b00      	cmp	r3, #0
 8009296:	d103      	bne.n	80092a0 <qr_5a2P8Gh6+0x8cc>
          exitg1 = 1;
 8009298:	2301      	movs	r3, #1
 800929a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800929e:	e00b      	b.n	80092b8 <qr_5a2P8Gh6+0x8e4>
        } else {
          coltop++;
 80092a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80092a4:	3301      	adds	r3, #1
 80092a6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80092aa:	e005      	b.n	80092b8 <qr_5a2P8Gh6+0x8e4>
        }
      } else {
        c_lastc = 0;
 80092ac:	2300      	movs	r3, #0
 80092ae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
        exitg1 = 1;
 80092b2:	2301      	movs	r3, #1
 80092b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
      }
    } while (exitg1 == 0);
 80092b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d0cf      	beq.n	8009260 <qr_5a2P8Gh6+0x88c>
 80092c0:	e00a      	b.n	80092d8 <qr_5a2P8Gh6+0x904>
 80092c2:	bf00      	nop
 80092c4:	7c900000 	.word	0x7c900000
 80092c8:	3ff00000 	.word	0x3ff00000
  } else {
    knt = 0;
 80092cc:	2300      	movs	r3, #0
 80092ce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    c_lastc = 0;
 80092d2:	2300      	movs	r3, #0
 80092d4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  }

  if (knt > 0) {
 80092d8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80092dc:	2b00      	cmp	r3, #0
 80092de:	dd29      	ble.n	8009334 <qr_5a2P8Gh6+0x960>
    xgemv_fRiR1I1O(knt, c_lastc, b_A, 8, b_A, 5, work);
 80092e0:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80092e4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80092e8:	9302      	str	r3, [sp, #8]
 80092ea:	2305      	movs	r3, #5
 80092ec:	9301      	str	r3, [sp, #4]
 80092ee:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80092f2:	9300      	str	r3, [sp, #0]
 80092f4:	2308      	movs	r3, #8
 80092f6:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 80092fa:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 80092fe:	f003 ff1b 	bl	800d138 <xgemv_fRiR1I1O>
    xgerc_tNNiazQU(knt, c_lastc, -tau_idx_1, 5, work, b_A, 8);
 8009302:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009306:	623b      	str	r3, [r7, #32]
 8009308:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800930c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8009310:	627b      	str	r3, [r7, #36]	; 0x24
 8009312:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8009316:	2308      	movs	r3, #8
 8009318:	9301      	str	r3, [sp, #4]
 800931a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800931e:	9300      	str	r3, [sp, #0]
 8009320:	4613      	mov	r3, r2
 8009322:	2205      	movs	r2, #5
 8009324:	ed97 0b08 	vldr	d0, [r7, #32]
 8009328:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 800932c:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8009330:	f004 f80b 	bl	800d34a <xgerc_tNNiazQU>
  }

  b_A[4] = atmp;
 8009334:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 8009338:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
  R[0] = b_A[0];
 800933c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8009340:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8009342:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 1; c_lastc + 1 < 4; c_lastc++) {
 8009346:	2301      	movs	r3, #1
 8009348:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800934c:	e00f      	b.n	800936e <qr_5a2P8Gh6+0x99a>
    R[c_lastc] = 0.0;
 800934e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009352:	00db      	lsls	r3, r3, #3
 8009354:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009356:	18d1      	adds	r1, r2, r3
 8009358:	f04f 0200 	mov.w	r2, #0
 800935c:	f04f 0300 	mov.w	r3, #0
 8009360:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 1; c_lastc + 1 < 4; c_lastc++) {
 8009364:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009368:	3301      	adds	r3, #1
 800936a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800936e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009372:	2b02      	cmp	r3, #2
 8009374:	ddeb      	ble.n	800934e <qr_5a2P8Gh6+0x97a>
  }

  work[0] = 0.0;
 8009376:	f04f 0200 	mov.w	r2, #0
 800937a:	f04f 0300 	mov.w	r3, #0
 800937e:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
  for (c_lastc = 0; c_lastc < 2; c_lastc++) {
 8009382:	2300      	movs	r3, #0
 8009384:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009388:	e016      	b.n	80093b8 <qr_5a2P8Gh6+0x9e4>
    R[c_lastc + 3] = b_A[c_lastc + 3];
 800938a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800938e:	3303      	adds	r3, #3
 8009390:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009394:	3203      	adds	r2, #3
 8009396:	00d2      	lsls	r2, r2, #3
 8009398:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800939a:	4411      	add	r1, r2
 800939c:	00db      	lsls	r3, r3, #3
 800939e:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80093a2:	4413      	add	r3, r2
 80093a4:	3b80      	subs	r3, #128	; 0x80
 80093a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093aa:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 0; c_lastc < 2; c_lastc++) {
 80093ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80093b2:	3301      	adds	r3, #1
 80093b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80093b8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80093bc:	2b01      	cmp	r3, #1
 80093be:	dde4      	ble.n	800938a <qr_5a2P8Gh6+0x9b6>
  }

  while (c_lastc + 1 < 4) {
 80093c0:	e010      	b.n	80093e4 <qr_5a2P8Gh6+0xa10>
    R[c_lastc + 3] = 0.0;
 80093c2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80093c6:	3303      	adds	r3, #3
 80093c8:	00db      	lsls	r3, r3, #3
 80093ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80093cc:	18d1      	adds	r1, r2, r3
 80093ce:	f04f 0200 	mov.w	r2, #0
 80093d2:	f04f 0300 	mov.w	r3, #0
 80093d6:	e9c1 2300 	strd	r2, r3, [r1]
    c_lastc++;
 80093da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80093de:	3301      	adds	r3, #1
 80093e0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  while (c_lastc + 1 < 4) {
 80093e4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80093e8:	2b02      	cmp	r3, #2
 80093ea:	ddea      	ble.n	80093c2 <qr_5a2P8Gh6+0x9ee>
  }

  work[1] = 0.0;
 80093ec:	f04f 0200 	mov.w	r2, #0
 80093f0:	f04f 0300 	mov.w	r3, #0
 80093f4:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
  for (c_lastc = 0; c_lastc < 3; c_lastc++) {
 80093f8:	2300      	movs	r3, #0
 80093fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80093fe:	e016      	b.n	800942e <qr_5a2P8Gh6+0xa5a>
    R[c_lastc + 6] = b_A[c_lastc + 6];
 8009400:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009404:	3306      	adds	r3, #6
 8009406:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800940a:	3206      	adds	r2, #6
 800940c:	00d2      	lsls	r2, r2, #3
 800940e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8009410:	4411      	add	r1, r2
 8009412:	00db      	lsls	r3, r3, #3
 8009414:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8009418:	4413      	add	r3, r2
 800941a:	3b80      	subs	r3, #128	; 0x80
 800941c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009420:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 0; c_lastc < 3; c_lastc++) {
 8009424:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009428:	3301      	adds	r3, #1
 800942a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800942e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009432:	2b02      	cmp	r3, #2
 8009434:	dde4      	ble.n	8009400 <qr_5a2P8Gh6+0xa2c>
  }

  work[2] = 0.0;
 8009436:	f04f 0200 	mov.w	r2, #0
 800943a:	f04f 0300 	mov.w	r3, #0
 800943e:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
  b_A[8] = 1.0;
 8009442:	f04f 0200 	mov.w	r2, #0
 8009446:	4bc8      	ldr	r3, [pc, #800]	; (8009768 <qr_5a2P8Gh6+0xd94>)
 8009448:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
  for (c_lastc = 0; c_lastc < 2; c_lastc++) {
 800944c:	2300      	movs	r3, #0
 800944e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009452:	e014      	b.n	800947e <qr_5a2P8Gh6+0xaaa>
    b_A[7 - c_lastc] = 0.0;
 8009454:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009458:	f1c3 0307 	rsb	r3, r3, #7
 800945c:	00db      	lsls	r3, r3, #3
 800945e:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8009462:	4413      	add	r3, r2
 8009464:	f1a3 0180 	sub.w	r1, r3, #128	; 0x80
 8009468:	f04f 0200 	mov.w	r2, #0
 800946c:	f04f 0300 	mov.w	r3, #0
 8009470:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 0; c_lastc < 2; c_lastc++) {
 8009474:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009478:	3301      	adds	r3, #1
 800947a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800947e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009482:	2b01      	cmp	r3, #1
 8009484:	dde6      	ble.n	8009454 <qr_5a2P8Gh6+0xa80>
  }

  b_A[4] = 1.0;
 8009486:	f04f 0200 	mov.w	r2, #0
 800948a:	4bb7      	ldr	r3, [pc, #732]	; (8009768 <qr_5a2P8Gh6+0xd94>)
 800948c:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
  if (tau_idx_1 != 0.0) {
 8009490:	f04f 0200 	mov.w	r2, #0
 8009494:	f04f 0300 	mov.w	r3, #0
 8009498:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800949c:	f7f7 fb06 	bl	8000aac <__aeabi_dcmpeq>
 80094a0:	4603      	mov	r3, r0
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d15c      	bne.n	8009560 <qr_5a2P8Gh6+0xb8c>
    b_coltop = 7;
 80094a6:	2307      	movs	r3, #7
 80094a8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    while ((c_lastc > 0) && (b_A[b_coltop - 2] == 0.0)) {
 80094ac:	e009      	b.n	80094c2 <qr_5a2P8Gh6+0xaee>
      c_lastc--;
 80094ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80094b2:	3b01      	subs	r3, #1
 80094b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
      b_coltop--;
 80094b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80094bc:	3b01      	subs	r3, #1
 80094be:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    while ((c_lastc > 0) && (b_A[b_coltop - 2] == 0.0)) {
 80094c2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	dd12      	ble.n	80094f0 <qr_5a2P8Gh6+0xb1c>
 80094ca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80094ce:	3b02      	subs	r3, #2
 80094d0:	00db      	lsls	r3, r3, #3
 80094d2:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80094d6:	4413      	add	r3, r2
 80094d8:	3b80      	subs	r3, #128	; 0x80
 80094da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80094de:	f04f 0200 	mov.w	r2, #0
 80094e2:	f04f 0300 	mov.w	r3, #0
 80094e6:	f7f7 fae1 	bl	8000aac <__aeabi_dcmpeq>
 80094ea:	4603      	mov	r3, r0
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d1de      	bne.n	80094ae <qr_5a2P8Gh6+0xada>
    }

    b_coltop = 1;
 80094f0:	2301      	movs	r3, #1
 80094f2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    knt = 8;
 80094f6:	2308      	movs	r3, #8
 80094f8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    do {
      exitg1 = 0;
 80094fc:	2300      	movs	r3, #0
 80094fe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
      if (knt <= c_lastc + 7) {
 8009502:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009506:	3307      	adds	r3, #7
 8009508:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800950c:	429a      	cmp	r2, r3
 800950e:	dc1c      	bgt.n	800954a <qr_5a2P8Gh6+0xb76>
        if (b_A[knt - 1] != 0.0) {
 8009510:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009514:	3b01      	subs	r3, #1
 8009516:	00db      	lsls	r3, r3, #3
 8009518:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800951c:	4413      	add	r3, r2
 800951e:	3b80      	subs	r3, #128	; 0x80
 8009520:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009524:	f04f 0200 	mov.w	r2, #0
 8009528:	f04f 0300 	mov.w	r3, #0
 800952c:	f7f7 fabe 	bl	8000aac <__aeabi_dcmpeq>
 8009530:	4603      	mov	r3, r0
 8009532:	2b00      	cmp	r3, #0
 8009534:	d103      	bne.n	800953e <qr_5a2P8Gh6+0xb6a>
          exitg1 = 1;
 8009536:	2301      	movs	r3, #1
 8009538:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800953c:	e00b      	b.n	8009556 <qr_5a2P8Gh6+0xb82>
        } else {
          knt++;
 800953e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009542:	3301      	adds	r3, #1
 8009544:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009548:	e005      	b.n	8009556 <qr_5a2P8Gh6+0xb82>
        }
      } else {
        b_coltop = 0;
 800954a:	2300      	movs	r3, #0
 800954c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
        exitg1 = 1;
 8009550:	2301      	movs	r3, #1
 8009552:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
      }
    } while (exitg1 == 0);
 8009556:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800955a:	2b00      	cmp	r3, #0
 800955c:	d0ce      	beq.n	80094fc <qr_5a2P8Gh6+0xb28>
 800955e:	e005      	b.n	800956c <qr_5a2P8Gh6+0xb98>
  } else {
    c_lastc = 0;
 8009560:	2300      	movs	r3, #0
 8009562:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    b_coltop = 0;
 8009566:	2300      	movs	r3, #0
 8009568:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  }

  if (c_lastc > 0) {
 800956c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009570:	2b00      	cmp	r3, #0
 8009572:	dd29      	ble.n	80095c8 <qr_5a2P8Gh6+0xbf4>
    xgemv_fRiR1I1O(c_lastc, b_coltop, b_A, 8, b_A, 5, work);
 8009574:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8009578:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800957c:	9302      	str	r3, [sp, #8]
 800957e:	2305      	movs	r3, #5
 8009580:	9301      	str	r3, [sp, #4]
 8009582:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8009586:	9300      	str	r3, [sp, #0]
 8009588:	2308      	movs	r3, #8
 800958a:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 800958e:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8009592:	f003 fdd1 	bl	800d138 <xgemv_fRiR1I1O>
    xgerc_tNNiazQU(c_lastc, b_coltop, -tau_idx_1, 5, work, b_A, 8);
 8009596:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800959a:	61bb      	str	r3, [r7, #24]
 800959c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80095a0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80095a4:	61fb      	str	r3, [r7, #28]
 80095a6:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80095aa:	2308      	movs	r3, #8
 80095ac:	9301      	str	r3, [sp, #4]
 80095ae:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80095b2:	9300      	str	r3, [sp, #0]
 80095b4:	4613      	mov	r3, r2
 80095b6:	2205      	movs	r2, #5
 80095b8:	ed97 0b06 	vldr	d0, [r7, #24]
 80095bc:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 80095c0:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 80095c4:	f003 fec1 	bl	800d34a <xgerc_tNNiazQU>
  }

  for (b_coltop = 5; b_coltop < 6; b_coltop++) {
 80095c8:	2305      	movs	r3, #5
 80095ca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80095ce:	e024      	b.n	800961a <qr_5a2P8Gh6+0xc46>
    b_A[b_coltop] *= -tau_idx_1;
 80095d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80095d4:	00db      	lsls	r3, r3, #3
 80095d6:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80095da:	4413      	add	r3, r2
 80095dc:	3b80      	subs	r3, #128	; 0x80
 80095de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80095e2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80095e6:	613b      	str	r3, [r7, #16]
 80095e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80095ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80095f0:	617b      	str	r3, [r7, #20]
 80095f2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80095f6:	f7f6 fff1 	bl	80005dc <__aeabi_dmul>
 80095fa:	4602      	mov	r2, r0
 80095fc:	460b      	mov	r3, r1
 80095fe:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8009602:	00c9      	lsls	r1, r1, #3
 8009604:	f107 00f0 	add.w	r0, r7, #240	; 0xf0
 8009608:	4401      	add	r1, r0
 800960a:	3980      	subs	r1, #128	; 0x80
 800960c:	e9c1 2300 	strd	r2, r3, [r1]
  for (b_coltop = 5; b_coltop < 6; b_coltop++) {
 8009610:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009614:	3301      	adds	r3, #1
 8009616:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800961a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800961e:	2b05      	cmp	r3, #5
 8009620:	ddd6      	ble.n	80095d0 <qr_5a2P8Gh6+0xbfc>
  }

  b_A[4] = 1.0 - tau_idx_1;
 8009622:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8009626:	f04f 0000 	mov.w	r0, #0
 800962a:	494f      	ldr	r1, [pc, #316]	; (8009768 <qr_5a2P8Gh6+0xd94>)
 800962c:	f7f6 fe1e 	bl	800026c <__aeabi_dsub>
 8009630:	4602      	mov	r2, r0
 8009632:	460b      	mov	r3, r1
 8009634:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
  b_A[3] = 0.0;
 8009638:	f04f 0200 	mov.w	r2, #0
 800963c:	f04f 0300 	mov.w	r3, #0
 8009640:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
  b_A[0] = 1.0;
 8009644:	f04f 0200 	mov.w	r2, #0
 8009648:	4b47      	ldr	r3, [pc, #284]	; (8009768 <qr_5a2P8Gh6+0xd94>)
 800964a:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  if (tau_idx_0 != 0.0) {
 800964e:	f04f 0200 	mov.w	r2, #0
 8009652:	f04f 0300 	mov.w	r3, #0
 8009656:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800965a:	f7f7 fa27 	bl	8000aac <__aeabi_dcmpeq>
 800965e:	4603      	mov	r3, r0
 8009660:	2b00      	cmp	r3, #0
 8009662:	f040 8083 	bne.w	800976c <qr_5a2P8Gh6+0xd98>
    c_lastc = 3;
 8009666:	2303      	movs	r3, #3
 8009668:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    b_coltop = 4;
 800966c:	2304      	movs	r3, #4
 800966e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    while ((c_lastc > 0) && (b_A[b_coltop - 2] == 0.0)) {
 8009672:	e009      	b.n	8009688 <qr_5a2P8Gh6+0xcb4>
      c_lastc--;
 8009674:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009678:	3b01      	subs	r3, #1
 800967a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
      b_coltop--;
 800967e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009682:	3b01      	subs	r3, #1
 8009684:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    while ((c_lastc > 0) && (b_A[b_coltop - 2] == 0.0)) {
 8009688:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800968c:	2b00      	cmp	r3, #0
 800968e:	dd12      	ble.n	80096b6 <qr_5a2P8Gh6+0xce2>
 8009690:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009694:	3b02      	subs	r3, #2
 8009696:	00db      	lsls	r3, r3, #3
 8009698:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800969c:	4413      	add	r3, r2
 800969e:	3b80      	subs	r3, #128	; 0x80
 80096a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80096a4:	f04f 0200 	mov.w	r2, #0
 80096a8:	f04f 0300 	mov.w	r3, #0
 80096ac:	f7f7 f9fe 	bl	8000aac <__aeabi_dcmpeq>
 80096b0:	4603      	mov	r3, r0
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d1de      	bne.n	8009674 <qr_5a2P8Gh6+0xca0>
    }

    b_coltop = 2;
 80096b6:	2302      	movs	r3, #2
 80096b8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    exitg2 = false;
 80096bc:	2300      	movs	r3, #0
 80096be:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
    while ((!exitg2) && (b_coltop > 0)) {
 80096c2:	e048      	b.n	8009756 <qr_5a2P8Gh6+0xd82>
      coltop = (b_coltop - 1) * 3 + 4;
 80096c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80096c8:	1e5a      	subs	r2, r3, #1
 80096ca:	4613      	mov	r3, r2
 80096cc:	005b      	lsls	r3, r3, #1
 80096ce:	4413      	add	r3, r2
 80096d0:	3304      	adds	r3, #4
 80096d2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
      knt = coltop;
 80096d6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80096da:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      do {
        exitg1 = 0;
 80096de:	2300      	movs	r3, #0
 80096e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
        if (knt <= (coltop + c_lastc) - 1) {
 80096e4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80096e8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80096ec:	4413      	add	r3, r2
 80096ee:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80096f2:	429a      	cmp	r2, r3
 80096f4:	da1c      	bge.n	8009730 <qr_5a2P8Gh6+0xd5c>
          if (b_A[knt - 1] != 0.0) {
 80096f6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80096fa:	3b01      	subs	r3, #1
 80096fc:	00db      	lsls	r3, r3, #3
 80096fe:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8009702:	4413      	add	r3, r2
 8009704:	3b80      	subs	r3, #128	; 0x80
 8009706:	e9d3 0100 	ldrd	r0, r1, [r3]
 800970a:	f04f 0200 	mov.w	r2, #0
 800970e:	f04f 0300 	mov.w	r3, #0
 8009712:	f7f7 f9cb 	bl	8000aac <__aeabi_dcmpeq>
 8009716:	4603      	mov	r3, r0
 8009718:	2b00      	cmp	r3, #0
 800971a:	d103      	bne.n	8009724 <qr_5a2P8Gh6+0xd50>
            exitg1 = 1;
 800971c:	2301      	movs	r3, #1
 800971e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009722:	e00d      	b.n	8009740 <qr_5a2P8Gh6+0xd6c>
          } else {
            knt++;
 8009724:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009728:	3301      	adds	r3, #1
 800972a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800972e:	e007      	b.n	8009740 <qr_5a2P8Gh6+0xd6c>
          }
        } else {
          b_coltop--;
 8009730:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009734:	3b01      	subs	r3, #1
 8009736:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
          exitg1 = 2;
 800973a:	2302      	movs	r3, #2
 800973c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
        }
      } while (exitg1 == 0);
 8009740:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009744:	2b00      	cmp	r3, #0
 8009746:	d0ca      	beq.n	80096de <qr_5a2P8Gh6+0xd0a>

      if (exitg1 == 1) {
 8009748:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800974c:	2b01      	cmp	r3, #1
 800974e:	d102      	bne.n	8009756 <qr_5a2P8Gh6+0xd82>
        exitg2 = true;
 8009750:	2301      	movs	r3, #1
 8009752:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
    while ((!exitg2) && (b_coltop > 0)) {
 8009756:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 800975a:	2b00      	cmp	r3, #0
 800975c:	d10c      	bne.n	8009778 <qr_5a2P8Gh6+0xda4>
 800975e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009762:	2b00      	cmp	r3, #0
 8009764:	dcae      	bgt.n	80096c4 <qr_5a2P8Gh6+0xcf0>
 8009766:	e007      	b.n	8009778 <qr_5a2P8Gh6+0xda4>
 8009768:	3ff00000 	.word	0x3ff00000
      }
    }
  } else {
    c_lastc = 0;
 800976c:	2300      	movs	r3, #0
 800976e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    b_coltop = 0;
 8009772:	2300      	movs	r3, #0
 8009774:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  }

  if (c_lastc > 0) {
 8009778:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800977c:	2b00      	cmp	r3, #0
 800977e:	dd29      	ble.n	80097d4 <qr_5a2P8Gh6+0xe00>
    xgemv_fRiR1I1O(c_lastc, b_coltop, b_A, 4, b_A, 1, work);
 8009780:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8009784:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009788:	9302      	str	r3, [sp, #8]
 800978a:	2301      	movs	r3, #1
 800978c:	9301      	str	r3, [sp, #4]
 800978e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8009792:	9300      	str	r3, [sp, #0]
 8009794:	2304      	movs	r3, #4
 8009796:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 800979a:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 800979e:	f003 fccb 	bl	800d138 <xgemv_fRiR1I1O>
    xgerc_tNNiazQU(c_lastc, b_coltop, -tau_idx_0, 1, work, b_A, 4);
 80097a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80097a6:	60bb      	str	r3, [r7, #8]
 80097a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80097ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80097b0:	60fb      	str	r3, [r7, #12]
 80097b2:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80097b6:	2304      	movs	r3, #4
 80097b8:	9301      	str	r3, [sp, #4]
 80097ba:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80097be:	9300      	str	r3, [sp, #0]
 80097c0:	4613      	mov	r3, r2
 80097c2:	2201      	movs	r2, #1
 80097c4:	ed97 0b02 	vldr	d0, [r7, #8]
 80097c8:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 80097cc:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 80097d0:	f003 fdbb 	bl	800d34a <xgerc_tNNiazQU>
  }

  for (b_coltop = 1; b_coltop < 3; b_coltop++) {
 80097d4:	2301      	movs	r3, #1
 80097d6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80097da:	e024      	b.n	8009826 <qr_5a2P8Gh6+0xe52>
    b_A[b_coltop] *= -tau_idx_0;
 80097dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80097e0:	00db      	lsls	r3, r3, #3
 80097e2:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80097e6:	4413      	add	r3, r2
 80097e8:	3b80      	subs	r3, #128	; 0x80
 80097ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80097ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80097f2:	603b      	str	r3, [r7, #0]
 80097f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80097f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80097fc:	607b      	str	r3, [r7, #4]
 80097fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009802:	f7f6 feeb 	bl	80005dc <__aeabi_dmul>
 8009806:	4602      	mov	r2, r0
 8009808:	460b      	mov	r3, r1
 800980a:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 800980e:	00c9      	lsls	r1, r1, #3
 8009810:	f107 00f0 	add.w	r0, r7, #240	; 0xf0
 8009814:	4401      	add	r1, r0
 8009816:	3980      	subs	r1, #128	; 0x80
 8009818:	e9c1 2300 	strd	r2, r3, [r1]
  for (b_coltop = 1; b_coltop < 3; b_coltop++) {
 800981c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009820:	3301      	adds	r3, #1
 8009822:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009826:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800982a:	2b02      	cmp	r3, #2
 800982c:	ddd6      	ble.n	80097dc <qr_5a2P8Gh6+0xe08>
  }

  b_A[0] = 1.0 - tau_idx_0;
 800982e:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8009832:	f04f 0000 	mov.w	r0, #0
 8009836:	492a      	ldr	r1, [pc, #168]	; (80098e0 <qr_5a2P8Gh6+0xf0c>)
 8009838:	f7f6 fd18 	bl	800026c <__aeabi_dsub>
 800983c:	4602      	mov	r2, r0
 800983e:	460b      	mov	r3, r1
 8009840:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  c_lastc = 0;
 8009844:	2300      	movs	r3, #0
 8009846:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  for (b_coltop = 0; b_coltop < 3; b_coltop++) {
 800984a:	2300      	movs	r3, #0
 800984c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009850:	e03d      	b.n	80098ce <qr_5a2P8Gh6+0xefa>
    Q[c_lastc] = b_A[c_lastc];
 8009852:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009856:	00db      	lsls	r3, r3, #3
 8009858:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800985a:	18d1      	adds	r1, r2, r3
 800985c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009860:	00db      	lsls	r3, r3, #3
 8009862:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8009866:	4413      	add	r3, r2
 8009868:	3b80      	subs	r3, #128	; 0x80
 800986a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800986e:	e9c1 2300 	strd	r2, r3, [r1]
    Q[c_lastc + 1] = b_A[c_lastc + 1];
 8009872:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009876:	3301      	adds	r3, #1
 8009878:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800987c:	3201      	adds	r2, #1
 800987e:	00d2      	lsls	r2, r2, #3
 8009880:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009882:	4411      	add	r1, r2
 8009884:	00db      	lsls	r3, r3, #3
 8009886:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800988a:	4413      	add	r3, r2
 800988c:	3b80      	subs	r3, #128	; 0x80
 800988e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009892:	e9c1 2300 	strd	r2, r3, [r1]
    Q[c_lastc + 2] = b_A[c_lastc + 2];
 8009896:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800989a:	3302      	adds	r3, #2
 800989c:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80098a0:	3202      	adds	r2, #2
 80098a2:	00d2      	lsls	r2, r2, #3
 80098a4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80098a6:	4411      	add	r1, r2
 80098a8:	00db      	lsls	r3, r3, #3
 80098aa:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80098ae:	4413      	add	r3, r2
 80098b0:	3b80      	subs	r3, #128	; 0x80
 80098b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098b6:	e9c1 2300 	strd	r2, r3, [r1]
    c_lastc += 3;
 80098ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80098be:	3303      	adds	r3, #3
 80098c0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  for (b_coltop = 0; b_coltop < 3; b_coltop++) {
 80098c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80098c8:	3301      	adds	r3, #1
 80098ca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80098ce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80098d2:	2b02      	cmp	r3, #2
 80098d4:	ddbd      	ble.n	8009852 <qr_5a2P8Gh6+0xe7e>
  }
}
 80098d6:	bf00      	nop
 80098d8:	bf00      	nop
 80098da:	37f0      	adds	r7, #240	; 0xf0
 80098dc:	46bd      	mov	sp, r7
 80098de:	bdb0      	pop	{r4, r5, r7, pc}
 80098e0:	3ff00000 	.word	0x3ff00000

080098e4 <qr_DvOBrgQi>:
#include <math.h>
#include "xgemv_NQlWbt2i.h"
#include "xgerc_R09LiDgJ.h"

void qr_DvOBrgQi(const real_T A[18], real_T Q[18], real_T R[9])
{
 80098e4:	b5b0      	push	{r4, r5, r7, lr}
 80098e6:	b0da      	sub	sp, #360	; 0x168
 80098e8:	af04      	add	r7, sp, #16
 80098ea:	66f8      	str	r0, [r7, #108]	; 0x6c
 80098ec:	66b9      	str	r1, [r7, #104]	; 0x68
 80098ee:	667a      	str	r2, [r7, #100]	; 0x64
  int32_T c_lastc;
  int32_T coltop;
  int32_T exitg1;
  int32_T knt;
  boolean_T exitg2;
  memcpy(&b_A[0], &A[0], 18U * sizeof(real_T));
 80098f0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80098f4:	2290      	movs	r2, #144	; 0x90
 80098f6:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80098f8:	4618      	mov	r0, r3
 80098fa:	f00d f92f 	bl	8016b5c <memcpy>
  work[0] = 0.0;
 80098fe:	f04f 0200 	mov.w	r2, #0
 8009902:	f04f 0300 	mov.w	r3, #0
 8009906:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  work[1] = 0.0;
 800990a:	f04f 0200 	mov.w	r2, #0
 800990e:	f04f 0300 	mov.w	r3, #0
 8009912:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
  work[2] = 0.0;
 8009916:	f04f 0200 	mov.w	r2, #0
 800991a:	f04f 0300 	mov.w	r3, #0
 800991e:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
  atmp = b_A[0];
 8009922:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8009926:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
  tau_idx_0 = 0.0;
 800992a:	f04f 0200 	mov.w	r2, #0
 800992e:	f04f 0300 	mov.w	r3, #0
 8009932:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
  beta1 = xnrm2_nLdASVZH(5, b_A, 2);
 8009936:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800993a:	2202      	movs	r2, #2
 800993c:	4619      	mov	r1, r3
 800993e:	2005      	movs	r0, #5
 8009940:	f003 ff90 	bl	800d864 <xnrm2_nLdASVZH>
 8009944:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
  if (beta1 != 0.0) {
 8009948:	f04f 0200 	mov.w	r2, #0
 800994c:	f04f 0300 	mov.w	r3, #0
 8009950:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8009954:	f7f7 f8aa 	bl	8000aac <__aeabi_dcmpeq>
 8009958:	4603      	mov	r3, r0
 800995a:	2b00      	cmp	r3, #0
 800995c:	f040 8172 	bne.w	8009c44 <qr_DvOBrgQi+0x360>
    beta1 = rt_hypotd_snf(b_A[0], beta1);
 8009960:	ed97 7b22 	vldr	d7, [r7, #136]	; 0x88
 8009964:	ed97 1b52 	vldr	d1, [r7, #328]	; 0x148
 8009968:	eeb0 0a47 	vmov.f32	s0, s14
 800996c:	eef0 0a67 	vmov.f32	s1, s15
 8009970:	f001 fa92 	bl	800ae98 <rt_hypotd_snf>
 8009974:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
    if (b_A[0] >= 0.0) {
 8009978:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800997c:	f04f 0200 	mov.w	r2, #0
 8009980:	f04f 0300 	mov.w	r3, #0
 8009984:	f7f7 f8b0 	bl	8000ae8 <__aeabi_dcmpge>
 8009988:	4603      	mov	r3, r0
 800998a:	2b00      	cmp	r3, #0
 800998c:	d009      	beq.n	80099a2 <qr_DvOBrgQi+0xbe>
      beta1 = -beta1;
 800998e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8009992:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8009996:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800999a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800999e:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    }

    if (fabs(beta1) < 1.0020841800044864E-292) {
 80099a2:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 80099a6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80099aa:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80099ae:	f04f 0200 	mov.w	r2, #0
 80099b2:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 80099b6:	4620      	mov	r0, r4
 80099b8:	4629      	mov	r1, r5
 80099ba:	f7f7 f881 	bl	8000ac0 <__aeabi_dcmplt>
 80099be:	4603      	mov	r3, r0
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	f000 80f1 	beq.w	8009ba8 <qr_DvOBrgQi+0x2c4>
      knt = 0;
 80099c6:	2300      	movs	r3, #0
 80099c8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
      do {
        knt++;
 80099cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80099d0:	3301      	adds	r3, #1
 80099d2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        for (b_coltop = 1; b_coltop < 6; b_coltop++) {
 80099d6:	2301      	movs	r3, #1
 80099d8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80099dc:	e01f      	b.n	8009a1e <qr_DvOBrgQi+0x13a>
          b_A[b_coltop] *= 9.9792015476736E+291;
 80099de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80099e2:	00db      	lsls	r3, r3, #3
 80099e4:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 80099e8:	4413      	add	r3, r2
 80099ea:	3bd0      	subs	r3, #208	; 0xd0
 80099ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 80099f0:	f04f 0200 	mov.w	r2, #0
 80099f4:	4bca      	ldr	r3, [pc, #808]	; (8009d20 <qr_DvOBrgQi+0x43c>)
 80099f6:	f7f6 fdf1 	bl	80005dc <__aeabi_dmul>
 80099fa:	4602      	mov	r2, r0
 80099fc:	460b      	mov	r3, r1
 80099fe:	4610      	mov	r0, r2
 8009a00:	4619      	mov	r1, r3
 8009a02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a06:	00db      	lsls	r3, r3, #3
 8009a08:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8009a0c:	4413      	add	r3, r2
 8009a0e:	3bd0      	subs	r3, #208	; 0xd0
 8009a10:	e9c3 0100 	strd	r0, r1, [r3]
        for (b_coltop = 1; b_coltop < 6; b_coltop++) {
 8009a14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a18:	3301      	adds	r3, #1
 8009a1a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8009a1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a22:	2b05      	cmp	r3, #5
 8009a24:	dddb      	ble.n	80099de <qr_DvOBrgQi+0xfa>
        }

        beta1 *= 9.9792015476736E+291;
 8009a26:	f04f 0200 	mov.w	r2, #0
 8009a2a:	4bbd      	ldr	r3, [pc, #756]	; (8009d20 <qr_DvOBrgQi+0x43c>)
 8009a2c:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8009a30:	f7f6 fdd4 	bl	80005dc <__aeabi_dmul>
 8009a34:	4602      	mov	r2, r0
 8009a36:	460b      	mov	r3, r1
 8009a38:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
        atmp *= 9.9792015476736E+291;
 8009a3c:	f04f 0200 	mov.w	r2, #0
 8009a40:	4bb7      	ldr	r3, [pc, #732]	; (8009d20 <qr_DvOBrgQi+0x43c>)
 8009a42:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 8009a46:	f7f6 fdc9 	bl	80005dc <__aeabi_dmul>
 8009a4a:	4602      	mov	r2, r0
 8009a4c:	460b      	mov	r3, r1
 8009a4e:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      } while ((fabs(beta1) < 1.0020841800044864E-292) && (knt < 20));
 8009a52:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8009a56:	65bb      	str	r3, [r7, #88]	; 0x58
 8009a58:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009a5c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009a60:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009a62:	f04f 0200 	mov.w	r2, #0
 8009a66:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 8009a6a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8009a6e:	f7f7 f827 	bl	8000ac0 <__aeabi_dcmplt>
 8009a72:	4603      	mov	r3, r0
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d003      	beq.n	8009a80 <qr_DvOBrgQi+0x19c>
 8009a78:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009a7c:	2b13      	cmp	r3, #19
 8009a7e:	dda5      	ble.n	80099cc <qr_DvOBrgQi+0xe8>

      beta1 = rt_hypotd_snf(atmp, xnrm2_nLdASVZH(5, b_A, 2));
 8009a80:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8009a84:	2202      	movs	r2, #2
 8009a86:	4619      	mov	r1, r3
 8009a88:	2005      	movs	r0, #5
 8009a8a:	f003 feeb 	bl	800d864 <xnrm2_nLdASVZH>
 8009a8e:	eeb0 7a40 	vmov.f32	s14, s0
 8009a92:	eef0 7a60 	vmov.f32	s15, s1
 8009a96:	eeb0 1a47 	vmov.f32	s2, s14
 8009a9a:	eef0 1a67 	vmov.f32	s3, s15
 8009a9e:	ed97 0b54 	vldr	d0, [r7, #336]	; 0x150
 8009aa2:	f001 f9f9 	bl	800ae98 <rt_hypotd_snf>
 8009aa6:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
      if (atmp >= 0.0) {
 8009aaa:	f04f 0200 	mov.w	r2, #0
 8009aae:	f04f 0300 	mov.w	r3, #0
 8009ab2:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 8009ab6:	f7f7 f817 	bl	8000ae8 <__aeabi_dcmpge>
 8009aba:	4603      	mov	r3, r0
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d009      	beq.n	8009ad4 <qr_DvOBrgQi+0x1f0>
        beta1 = -beta1;
 8009ac0:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8009ac4:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8009ac8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009acc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8009ad0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
      }

      tau_idx_0 = (beta1 - atmp) / beta1;
 8009ad4:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8009ad8:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8009adc:	f7f6 fbc6 	bl	800026c <__aeabi_dsub>
 8009ae0:	4602      	mov	r2, r0
 8009ae2:	460b      	mov	r3, r1
 8009ae4:	4610      	mov	r0, r2
 8009ae6:	4619      	mov	r1, r3
 8009ae8:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8009aec:	f7f6 fea0 	bl	8000830 <__aeabi_ddiv>
 8009af0:	4602      	mov	r2, r0
 8009af2:	460b      	mov	r3, r1
 8009af4:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
      atmp = 1.0 / (atmp - beta1);
 8009af8:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8009afc:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 8009b00:	f7f6 fbb4 	bl	800026c <__aeabi_dsub>
 8009b04:	4602      	mov	r2, r0
 8009b06:	460b      	mov	r3, r1
 8009b08:	f04f 0000 	mov.w	r0, #0
 8009b0c:	4985      	ldr	r1, [pc, #532]	; (8009d24 <qr_DvOBrgQi+0x440>)
 8009b0e:	f7f6 fe8f 	bl	8000830 <__aeabi_ddiv>
 8009b12:	4602      	mov	r2, r0
 8009b14:	460b      	mov	r3, r1
 8009b16:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      for (b_coltop = 1; b_coltop < 6; b_coltop++) {
 8009b1a:	2301      	movs	r3, #1
 8009b1c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8009b20:	e01e      	b.n	8009b60 <qr_DvOBrgQi+0x27c>
        b_A[b_coltop] *= atmp;
 8009b22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b26:	00db      	lsls	r3, r3, #3
 8009b28:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8009b2c:	4413      	add	r3, r2
 8009b2e:	3bd0      	subs	r3, #208	; 0xd0
 8009b30:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009b34:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8009b38:	f7f6 fd50 	bl	80005dc <__aeabi_dmul>
 8009b3c:	4602      	mov	r2, r0
 8009b3e:	460b      	mov	r3, r1
 8009b40:	4610      	mov	r0, r2
 8009b42:	4619      	mov	r1, r3
 8009b44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b48:	00db      	lsls	r3, r3, #3
 8009b4a:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8009b4e:	4413      	add	r3, r2
 8009b50:	3bd0      	subs	r3, #208	; 0xd0
 8009b52:	e9c3 0100 	strd	r0, r1, [r3]
      for (b_coltop = 1; b_coltop < 6; b_coltop++) {
 8009b56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b5a:	3301      	adds	r3, #1
 8009b5c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8009b60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b64:	2b05      	cmp	r3, #5
 8009b66:	dddc      	ble.n	8009b22 <qr_DvOBrgQi+0x23e>
      }

      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 8009b68:	2300      	movs	r3, #0
 8009b6a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8009b6e:	e010      	b.n	8009b92 <qr_DvOBrgQi+0x2ae>
        beta1 *= 1.0020841800044864E-292;
 8009b70:	f04f 0200 	mov.w	r2, #0
 8009b74:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 8009b78:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8009b7c:	f7f6 fd2e 	bl	80005dc <__aeabi_dmul>
 8009b80:	4602      	mov	r2, r0
 8009b82:	460b      	mov	r3, r1
 8009b84:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 8009b88:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009b8c:	3301      	adds	r3, #1
 8009b8e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8009b92:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8009b96:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009b9a:	429a      	cmp	r2, r3
 8009b9c:	dbe8      	blt.n	8009b70 <qr_DvOBrgQi+0x28c>
      }

      atmp = beta1;
 8009b9e:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8009ba2:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
 8009ba6:	e04d      	b.n	8009c44 <qr_DvOBrgQi+0x360>
    } else {
      tau_idx_0 = (beta1 - b_A[0]) / beta1;
 8009ba8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8009bac:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8009bb0:	f7f6 fb5c 	bl	800026c <__aeabi_dsub>
 8009bb4:	4602      	mov	r2, r0
 8009bb6:	460b      	mov	r3, r1
 8009bb8:	4610      	mov	r0, r2
 8009bba:	4619      	mov	r1, r3
 8009bbc:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8009bc0:	f7f6 fe36 	bl	8000830 <__aeabi_ddiv>
 8009bc4:	4602      	mov	r2, r0
 8009bc6:	460b      	mov	r3, r1
 8009bc8:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
      atmp = 1.0 / (b_A[0] - beta1);
 8009bcc:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8009bd0:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8009bd4:	f7f6 fb4a 	bl	800026c <__aeabi_dsub>
 8009bd8:	4602      	mov	r2, r0
 8009bda:	460b      	mov	r3, r1
 8009bdc:	f04f 0000 	mov.w	r0, #0
 8009be0:	4950      	ldr	r1, [pc, #320]	; (8009d24 <qr_DvOBrgQi+0x440>)
 8009be2:	f7f6 fe25 	bl	8000830 <__aeabi_ddiv>
 8009be6:	4602      	mov	r2, r0
 8009be8:	460b      	mov	r3, r1
 8009bea:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      for (c_lastc = 1; c_lastc < 6; c_lastc++) {
 8009bee:	2301      	movs	r3, #1
 8009bf0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8009bf4:	e01e      	b.n	8009c34 <qr_DvOBrgQi+0x350>
        b_A[c_lastc] *= atmp;
 8009bf6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009bfa:	00db      	lsls	r3, r3, #3
 8009bfc:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8009c00:	4413      	add	r3, r2
 8009c02:	3bd0      	subs	r3, #208	; 0xd0
 8009c04:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009c08:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8009c0c:	f7f6 fce6 	bl	80005dc <__aeabi_dmul>
 8009c10:	4602      	mov	r2, r0
 8009c12:	460b      	mov	r3, r1
 8009c14:	4610      	mov	r0, r2
 8009c16:	4619      	mov	r1, r3
 8009c18:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009c1c:	00db      	lsls	r3, r3, #3
 8009c1e:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8009c22:	4413      	add	r3, r2
 8009c24:	3bd0      	subs	r3, #208	; 0xd0
 8009c26:	e9c3 0100 	strd	r0, r1, [r3]
      for (c_lastc = 1; c_lastc < 6; c_lastc++) {
 8009c2a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009c2e:	3301      	adds	r3, #1
 8009c30:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8009c34:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009c38:	2b05      	cmp	r3, #5
 8009c3a:	dddc      	ble.n	8009bf6 <qr_DvOBrgQi+0x312>
      }

      atmp = beta1;
 8009c3c:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8009c40:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
    }
  }

  b_A[0] = 1.0;
 8009c44:	f04f 0200 	mov.w	r2, #0
 8009c48:	4b36      	ldr	r3, [pc, #216]	; (8009d24 <qr_DvOBrgQi+0x440>)
 8009c4a:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
  if (tau_idx_0 != 0.0) {
 8009c4e:	f04f 0200 	mov.w	r2, #0
 8009c52:	f04f 0300 	mov.w	r3, #0
 8009c56:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8009c5a:	f7f6 ff27 	bl	8000aac <__aeabi_dcmpeq>
 8009c5e:	4603      	mov	r3, r0
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	f040 8083 	bne.w	8009d6c <qr_DvOBrgQi+0x488>
    knt = 6;
 8009c66:	2306      	movs	r3, #6
 8009c68:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    c_lastc = 5;
 8009c6c:	2305      	movs	r3, #5
 8009c6e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    while ((knt > 0) && (b_A[c_lastc] == 0.0)) {
 8009c72:	e009      	b.n	8009c88 <qr_DvOBrgQi+0x3a4>
      knt--;
 8009c74:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009c78:	3b01      	subs	r3, #1
 8009c7a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
      c_lastc--;
 8009c7e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009c82:	3b01      	subs	r3, #1
 8009c84:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    while ((knt > 0) && (b_A[c_lastc] == 0.0)) {
 8009c88:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	dd11      	ble.n	8009cb4 <qr_DvOBrgQi+0x3d0>
 8009c90:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009c94:	00db      	lsls	r3, r3, #3
 8009c96:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8009c9a:	4413      	add	r3, r2
 8009c9c:	3bd0      	subs	r3, #208	; 0xd0
 8009c9e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009ca2:	f04f 0200 	mov.w	r2, #0
 8009ca6:	f04f 0300 	mov.w	r3, #0
 8009caa:	f7f6 feff 	bl	8000aac <__aeabi_dcmpeq>
 8009cae:	4603      	mov	r3, r0
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d1df      	bne.n	8009c74 <qr_DvOBrgQi+0x390>
    }

    c_lastc = 2;
 8009cb4:	2302      	movs	r3, #2
 8009cb6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    exitg2 = false;
 8009cba:	2300      	movs	r3, #0
 8009cbc:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
    while ((!exitg2) && (c_lastc > 0)) {
 8009cc0:	e04b      	b.n	8009d5a <qr_DvOBrgQi+0x476>
      b_coltop = (c_lastc - 1) * 6 + 6;
 8009cc2:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8009cc6:	4613      	mov	r3, r2
 8009cc8:	005b      	lsls	r3, r3, #1
 8009cca:	4413      	add	r3, r2
 8009ccc:	005b      	lsls	r3, r3, #1
 8009cce:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
      coltop = b_coltop;
 8009cd2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009cd6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
      do {
        exitg1 = 0;
 8009cda:	2300      	movs	r3, #0
 8009cdc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        if (coltop + 1 <= b_coltop + knt) {
 8009ce0:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8009ce4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009ce8:	441a      	add	r2, r3
 8009cea:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8009cee:	4293      	cmp	r3, r2
 8009cf0:	da20      	bge.n	8009d34 <qr_DvOBrgQi+0x450>
          if (b_A[coltop] != 0.0) {
 8009cf2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8009cf6:	00db      	lsls	r3, r3, #3
 8009cf8:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8009cfc:	4413      	add	r3, r2
 8009cfe:	3bd0      	subs	r3, #208	; 0xd0
 8009d00:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009d04:	f04f 0200 	mov.w	r2, #0
 8009d08:	f04f 0300 	mov.w	r3, #0
 8009d0c:	f7f6 fece 	bl	8000aac <__aeabi_dcmpeq>
 8009d10:	4603      	mov	r3, r0
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d108      	bne.n	8009d28 <qr_DvOBrgQi+0x444>
            exitg1 = 1;
 8009d16:	2301      	movs	r3, #1
 8009d18:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8009d1c:	e012      	b.n	8009d44 <qr_DvOBrgQi+0x460>
 8009d1e:	bf00      	nop
 8009d20:	7c900000 	.word	0x7c900000
 8009d24:	3ff00000 	.word	0x3ff00000
          } else {
            coltop++;
 8009d28:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8009d2c:	3301      	adds	r3, #1
 8009d2e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8009d32:	e007      	b.n	8009d44 <qr_DvOBrgQi+0x460>
          }
        } else {
          c_lastc--;
 8009d34:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009d38:	3b01      	subs	r3, #1
 8009d3a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
          exitg1 = 2;
 8009d3e:	2302      	movs	r3, #2
 8009d40:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        }
      } while (exitg1 == 0);
 8009d44:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d0c6      	beq.n	8009cda <qr_DvOBrgQi+0x3f6>

      if (exitg1 == 1) {
 8009d4c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009d50:	2b01      	cmp	r3, #1
 8009d52:	d102      	bne.n	8009d5a <qr_DvOBrgQi+0x476>
        exitg2 = true;
 8009d54:	2301      	movs	r3, #1
 8009d56:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
    while ((!exitg2) && (c_lastc > 0)) {
 8009d5a:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d10a      	bne.n	8009d78 <qr_DvOBrgQi+0x494>
 8009d62:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	dcab      	bgt.n	8009cc2 <qr_DvOBrgQi+0x3de>
 8009d6a:	e005      	b.n	8009d78 <qr_DvOBrgQi+0x494>
      }
    }
  } else {
    knt = 0;
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    c_lastc = 0;
 8009d72:	2300      	movs	r3, #0
 8009d74:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }

  if (knt > 0) {
 8009d78:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	dd29      	ble.n	8009dd4 <qr_DvOBrgQi+0x4f0>
    xgemv_NQlWbt2i(knt, c_lastc, b_A, 7, b_A, 1, work);
 8009d80:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8009d84:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8009d88:	9302      	str	r3, [sp, #8]
 8009d8a:	2301      	movs	r3, #1
 8009d8c:	9301      	str	r3, [sp, #4]
 8009d8e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8009d92:	9300      	str	r3, [sp, #0]
 8009d94:	2307      	movs	r3, #7
 8009d96:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 8009d9a:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8009d9e:	f003 f943 	bl	800d028 <xgemv_NQlWbt2i>
    xgerc_R09LiDgJ(knt, c_lastc, -tau_idx_0, 1, work, b_A, 7);
 8009da2:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8009da6:	653b      	str	r3, [r7, #80]	; 0x50
 8009da8:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8009dac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8009db0:	657b      	str	r3, [r7, #84]	; 0x54
 8009db2:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8009db6:	2307      	movs	r3, #7
 8009db8:	9301      	str	r3, [sp, #4]
 8009dba:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8009dbe:	9300      	str	r3, [sp, #0]
 8009dc0:	4613      	mov	r3, r2
 8009dc2:	2201      	movs	r2, #1
 8009dc4:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 8009dc8:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 8009dcc:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8009dd0:	f003 fa38 	bl	800d244 <xgerc_R09LiDgJ>
  }

  b_A[0] = atmp;
 8009dd4:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8009dd8:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
  atmp = b_A[7];
 8009ddc:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8009de0:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
  tau_idx_1 = 0.0;
 8009de4:	f04f 0200 	mov.w	r2, #0
 8009de8:	f04f 0300 	mov.w	r3, #0
 8009dec:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
  beta1 = xnrm2_nLdASVZH(4, b_A, 9);
 8009df0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8009df4:	2209      	movs	r2, #9
 8009df6:	4619      	mov	r1, r3
 8009df8:	2004      	movs	r0, #4
 8009dfa:	f003 fd33 	bl	800d864 <xnrm2_nLdASVZH>
 8009dfe:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
  if (beta1 != 0.0) {
 8009e02:	f04f 0200 	mov.w	r2, #0
 8009e06:	f04f 0300 	mov.w	r3, #0
 8009e0a:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8009e0e:	f7f6 fe4d 	bl	8000aac <__aeabi_dcmpeq>
 8009e12:	4603      	mov	r3, r0
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	f040 8174 	bne.w	800a102 <qr_DvOBrgQi+0x81e>
    beta1 = rt_hypotd_snf(b_A[7], beta1);
 8009e1a:	ed97 7b30 	vldr	d7, [r7, #192]	; 0xc0
 8009e1e:	ed97 1b52 	vldr	d1, [r7, #328]	; 0x148
 8009e22:	eeb0 0a47 	vmov.f32	s0, s14
 8009e26:	eef0 0a67 	vmov.f32	s1, s15
 8009e2a:	f001 f835 	bl	800ae98 <rt_hypotd_snf>
 8009e2e:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
    if (b_A[7] >= 0.0) {
 8009e32:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8009e36:	f04f 0200 	mov.w	r2, #0
 8009e3a:	f04f 0300 	mov.w	r3, #0
 8009e3e:	f7f6 fe53 	bl	8000ae8 <__aeabi_dcmpge>
 8009e42:	4603      	mov	r3, r0
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d009      	beq.n	8009e5c <qr_DvOBrgQi+0x578>
      beta1 = -beta1;
 8009e48:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8009e4c:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8009e50:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009e54:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8009e58:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    }

    if (fabs(beta1) < 1.0020841800044864E-292) {
 8009e5c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8009e60:	64bb      	str	r3, [r7, #72]	; 0x48
 8009e62:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009e66:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009e6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009e6c:	f04f 0200 	mov.w	r2, #0
 8009e70:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 8009e74:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8009e78:	f7f6 fe22 	bl	8000ac0 <__aeabi_dcmplt>
 8009e7c:	4603      	mov	r3, r0
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	f000 80f1 	beq.w	800a066 <qr_DvOBrgQi+0x782>
      knt = 0;
 8009e84:	2300      	movs	r3, #0
 8009e86:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
      do {
        knt++;
 8009e8a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009e8e:	3301      	adds	r3, #1
 8009e90:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        for (b_coltop = 8; b_coltop < 12; b_coltop++) {
 8009e94:	2308      	movs	r3, #8
 8009e96:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8009e9a:	e01f      	b.n	8009edc <qr_DvOBrgQi+0x5f8>
          b_A[b_coltop] *= 9.9792015476736E+291;
 8009e9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009ea0:	00db      	lsls	r3, r3, #3
 8009ea2:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8009ea6:	4413      	add	r3, r2
 8009ea8:	3bd0      	subs	r3, #208	; 0xd0
 8009eaa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009eae:	f04f 0200 	mov.w	r2, #0
 8009eb2:	4bc6      	ldr	r3, [pc, #792]	; (800a1cc <qr_DvOBrgQi+0x8e8>)
 8009eb4:	f7f6 fb92 	bl	80005dc <__aeabi_dmul>
 8009eb8:	4602      	mov	r2, r0
 8009eba:	460b      	mov	r3, r1
 8009ebc:	4610      	mov	r0, r2
 8009ebe:	4619      	mov	r1, r3
 8009ec0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009ec4:	00db      	lsls	r3, r3, #3
 8009ec6:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8009eca:	4413      	add	r3, r2
 8009ecc:	3bd0      	subs	r3, #208	; 0xd0
 8009ece:	e9c3 0100 	strd	r0, r1, [r3]
        for (b_coltop = 8; b_coltop < 12; b_coltop++) {
 8009ed2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009ed6:	3301      	adds	r3, #1
 8009ed8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8009edc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009ee0:	2b0b      	cmp	r3, #11
 8009ee2:	dddb      	ble.n	8009e9c <qr_DvOBrgQi+0x5b8>
        }

        beta1 *= 9.9792015476736E+291;
 8009ee4:	f04f 0200 	mov.w	r2, #0
 8009ee8:	4bb8      	ldr	r3, [pc, #736]	; (800a1cc <qr_DvOBrgQi+0x8e8>)
 8009eea:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8009eee:	f7f6 fb75 	bl	80005dc <__aeabi_dmul>
 8009ef2:	4602      	mov	r2, r0
 8009ef4:	460b      	mov	r3, r1
 8009ef6:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
        atmp *= 9.9792015476736E+291;
 8009efa:	f04f 0200 	mov.w	r2, #0
 8009efe:	4bb3      	ldr	r3, [pc, #716]	; (800a1cc <qr_DvOBrgQi+0x8e8>)
 8009f00:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 8009f04:	f7f6 fb6a 	bl	80005dc <__aeabi_dmul>
 8009f08:	4602      	mov	r2, r0
 8009f0a:	460b      	mov	r3, r1
 8009f0c:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      } while ((fabs(beta1) < 1.0020841800044864E-292) && (knt < 20));
 8009f10:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8009f14:	643b      	str	r3, [r7, #64]	; 0x40
 8009f16:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009f1a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009f1e:	647b      	str	r3, [r7, #68]	; 0x44
 8009f20:	f04f 0200 	mov.w	r2, #0
 8009f24:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 8009f28:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009f2c:	f7f6 fdc8 	bl	8000ac0 <__aeabi_dcmplt>
 8009f30:	4603      	mov	r3, r0
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d003      	beq.n	8009f3e <qr_DvOBrgQi+0x65a>
 8009f36:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009f3a:	2b13      	cmp	r3, #19
 8009f3c:	dda5      	ble.n	8009e8a <qr_DvOBrgQi+0x5a6>

      beta1 = rt_hypotd_snf(atmp, xnrm2_nLdASVZH(4, b_A, 9));
 8009f3e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8009f42:	2209      	movs	r2, #9
 8009f44:	4619      	mov	r1, r3
 8009f46:	2004      	movs	r0, #4
 8009f48:	f003 fc8c 	bl	800d864 <xnrm2_nLdASVZH>
 8009f4c:	eeb0 7a40 	vmov.f32	s14, s0
 8009f50:	eef0 7a60 	vmov.f32	s15, s1
 8009f54:	eeb0 1a47 	vmov.f32	s2, s14
 8009f58:	eef0 1a67 	vmov.f32	s3, s15
 8009f5c:	ed97 0b54 	vldr	d0, [r7, #336]	; 0x150
 8009f60:	f000 ff9a 	bl	800ae98 <rt_hypotd_snf>
 8009f64:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
      if (atmp >= 0.0) {
 8009f68:	f04f 0200 	mov.w	r2, #0
 8009f6c:	f04f 0300 	mov.w	r3, #0
 8009f70:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 8009f74:	f7f6 fdb8 	bl	8000ae8 <__aeabi_dcmpge>
 8009f78:	4603      	mov	r3, r0
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d009      	beq.n	8009f92 <qr_DvOBrgQi+0x6ae>
        beta1 = -beta1;
 8009f7e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8009f82:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8009f86:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009f8a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8009f8e:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
      }

      tau_idx_1 = (beta1 - atmp) / beta1;
 8009f92:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8009f96:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8009f9a:	f7f6 f967 	bl	800026c <__aeabi_dsub>
 8009f9e:	4602      	mov	r2, r0
 8009fa0:	460b      	mov	r3, r1
 8009fa2:	4610      	mov	r0, r2
 8009fa4:	4619      	mov	r1, r3
 8009fa6:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8009faa:	f7f6 fc41 	bl	8000830 <__aeabi_ddiv>
 8009fae:	4602      	mov	r2, r0
 8009fb0:	460b      	mov	r3, r1
 8009fb2:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
      atmp = 1.0 / (atmp - beta1);
 8009fb6:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8009fba:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 8009fbe:	f7f6 f955 	bl	800026c <__aeabi_dsub>
 8009fc2:	4602      	mov	r2, r0
 8009fc4:	460b      	mov	r3, r1
 8009fc6:	f04f 0000 	mov.w	r0, #0
 8009fca:	4981      	ldr	r1, [pc, #516]	; (800a1d0 <qr_DvOBrgQi+0x8ec>)
 8009fcc:	f7f6 fc30 	bl	8000830 <__aeabi_ddiv>
 8009fd0:	4602      	mov	r2, r0
 8009fd2:	460b      	mov	r3, r1
 8009fd4:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      for (b_coltop = 8; b_coltop < 12; b_coltop++) {
 8009fd8:	2308      	movs	r3, #8
 8009fda:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8009fde:	e01e      	b.n	800a01e <qr_DvOBrgQi+0x73a>
        b_A[b_coltop] *= atmp;
 8009fe0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009fe4:	00db      	lsls	r3, r3, #3
 8009fe6:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8009fea:	4413      	add	r3, r2
 8009fec:	3bd0      	subs	r3, #208	; 0xd0
 8009fee:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009ff2:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8009ff6:	f7f6 faf1 	bl	80005dc <__aeabi_dmul>
 8009ffa:	4602      	mov	r2, r0
 8009ffc:	460b      	mov	r3, r1
 8009ffe:	4610      	mov	r0, r2
 800a000:	4619      	mov	r1, r3
 800a002:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a006:	00db      	lsls	r3, r3, #3
 800a008:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800a00c:	4413      	add	r3, r2
 800a00e:	3bd0      	subs	r3, #208	; 0xd0
 800a010:	e9c3 0100 	strd	r0, r1, [r3]
      for (b_coltop = 8; b_coltop < 12; b_coltop++) {
 800a014:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a018:	3301      	adds	r3, #1
 800a01a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800a01e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a022:	2b0b      	cmp	r3, #11
 800a024:	dddc      	ble.n	8009fe0 <qr_DvOBrgQi+0x6fc>
      }

      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 800a026:	2300      	movs	r3, #0
 800a028:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800a02c:	e010      	b.n	800a050 <qr_DvOBrgQi+0x76c>
        beta1 *= 1.0020841800044864E-292;
 800a02e:	f04f 0200 	mov.w	r2, #0
 800a032:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800a036:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800a03a:	f7f6 facf 	bl	80005dc <__aeabi_dmul>
 800a03e:	4602      	mov	r2, r0
 800a040:	460b      	mov	r3, r1
 800a042:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 800a046:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a04a:	3301      	adds	r3, #1
 800a04c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800a050:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800a054:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a058:	429a      	cmp	r2, r3
 800a05a:	dbe8      	blt.n	800a02e <qr_DvOBrgQi+0x74a>
      }

      atmp = beta1;
 800a05c:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800a060:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
 800a064:	e04d      	b.n	800a102 <qr_DvOBrgQi+0x81e>
    } else {
      tau_idx_1 = (beta1 - b_A[7]) / beta1;
 800a066:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 800a06a:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800a06e:	f7f6 f8fd 	bl	800026c <__aeabi_dsub>
 800a072:	4602      	mov	r2, r0
 800a074:	460b      	mov	r3, r1
 800a076:	4610      	mov	r0, r2
 800a078:	4619      	mov	r1, r3
 800a07a:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800a07e:	f7f6 fbd7 	bl	8000830 <__aeabi_ddiv>
 800a082:	4602      	mov	r2, r0
 800a084:	460b      	mov	r3, r1
 800a086:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
      atmp = 1.0 / (b_A[7] - beta1);
 800a08a:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800a08e:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800a092:	f7f6 f8eb 	bl	800026c <__aeabi_dsub>
 800a096:	4602      	mov	r2, r0
 800a098:	460b      	mov	r3, r1
 800a09a:	f04f 0000 	mov.w	r0, #0
 800a09e:	494c      	ldr	r1, [pc, #304]	; (800a1d0 <qr_DvOBrgQi+0x8ec>)
 800a0a0:	f7f6 fbc6 	bl	8000830 <__aeabi_ddiv>
 800a0a4:	4602      	mov	r2, r0
 800a0a6:	460b      	mov	r3, r1
 800a0a8:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      for (c_lastc = 8; c_lastc < 12; c_lastc++) {
 800a0ac:	2308      	movs	r3, #8
 800a0ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800a0b2:	e01e      	b.n	800a0f2 <qr_DvOBrgQi+0x80e>
        b_A[c_lastc] *= atmp;
 800a0b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a0b8:	00db      	lsls	r3, r3, #3
 800a0ba:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800a0be:	4413      	add	r3, r2
 800a0c0:	3bd0      	subs	r3, #208	; 0xd0
 800a0c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a0c6:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 800a0ca:	f7f6 fa87 	bl	80005dc <__aeabi_dmul>
 800a0ce:	4602      	mov	r2, r0
 800a0d0:	460b      	mov	r3, r1
 800a0d2:	4610      	mov	r0, r2
 800a0d4:	4619      	mov	r1, r3
 800a0d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a0da:	00db      	lsls	r3, r3, #3
 800a0dc:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800a0e0:	4413      	add	r3, r2
 800a0e2:	3bd0      	subs	r3, #208	; 0xd0
 800a0e4:	e9c3 0100 	strd	r0, r1, [r3]
      for (c_lastc = 8; c_lastc < 12; c_lastc++) {
 800a0e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a0ec:	3301      	adds	r3, #1
 800a0ee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800a0f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a0f6:	2b0b      	cmp	r3, #11
 800a0f8:	dddc      	ble.n	800a0b4 <qr_DvOBrgQi+0x7d0>
      }

      atmp = beta1;
 800a0fa:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800a0fe:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
    }
  }

  b_A[7] = 1.0;
 800a102:	f04f 0200 	mov.w	r2, #0
 800a106:	4b32      	ldr	r3, [pc, #200]	; (800a1d0 <qr_DvOBrgQi+0x8ec>)
 800a108:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
  if (tau_idx_1 != 0.0) {
 800a10c:	f04f 0200 	mov.w	r2, #0
 800a110:	f04f 0300 	mov.w	r3, #0
 800a114:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 800a118:	f7f6 fcc8 	bl	8000aac <__aeabi_dcmpeq>
 800a11c:	4603      	mov	r3, r0
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d163      	bne.n	800a1ea <qr_DvOBrgQi+0x906>
    knt = 5;
 800a122:	2305      	movs	r3, #5
 800a124:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    c_lastc = 11;
 800a128:	230b      	movs	r3, #11
 800a12a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    while ((knt > 0) && (b_A[c_lastc] == 0.0)) {
 800a12e:	e009      	b.n	800a144 <qr_DvOBrgQi+0x860>
      knt--;
 800a130:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a134:	3b01      	subs	r3, #1
 800a136:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
      c_lastc--;
 800a13a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a13e:	3b01      	subs	r3, #1
 800a140:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    while ((knt > 0) && (b_A[c_lastc] == 0.0)) {
 800a144:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a148:	2b00      	cmp	r3, #0
 800a14a:	dd11      	ble.n	800a170 <qr_DvOBrgQi+0x88c>
 800a14c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a150:	00db      	lsls	r3, r3, #3
 800a152:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800a156:	4413      	add	r3, r2
 800a158:	3bd0      	subs	r3, #208	; 0xd0
 800a15a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a15e:	f04f 0200 	mov.w	r2, #0
 800a162:	f04f 0300 	mov.w	r3, #0
 800a166:	f7f6 fca1 	bl	8000aac <__aeabi_dcmpeq>
 800a16a:	4603      	mov	r3, r0
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d1df      	bne.n	800a130 <qr_DvOBrgQi+0x84c>
    }

    c_lastc = 1;
 800a170:	2301      	movs	r3, #1
 800a172:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    coltop = 13;
 800a176:	230d      	movs	r3, #13
 800a178:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    do {
      exitg1 = 0;
 800a17c:	2300      	movs	r3, #0
 800a17e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
      if (coltop + 1 <= knt + 13) {
 800a182:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a186:	f103 020c 	add.w	r2, r3, #12
 800a18a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800a18e:	4293      	cmp	r3, r2
 800a190:	dc20      	bgt.n	800a1d4 <qr_DvOBrgQi+0x8f0>
        if (b_A[coltop] != 0.0) {
 800a192:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800a196:	00db      	lsls	r3, r3, #3
 800a198:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800a19c:	4413      	add	r3, r2
 800a19e:	3bd0      	subs	r3, #208	; 0xd0
 800a1a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a1a4:	f04f 0200 	mov.w	r2, #0
 800a1a8:	f04f 0300 	mov.w	r3, #0
 800a1ac:	f7f6 fc7e 	bl	8000aac <__aeabi_dcmpeq>
 800a1b0:	4603      	mov	r3, r0
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d103      	bne.n	800a1be <qr_DvOBrgQi+0x8da>
          exitg1 = 1;
 800a1b6:	2301      	movs	r3, #1
 800a1b8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800a1bc:	e010      	b.n	800a1e0 <qr_DvOBrgQi+0x8fc>
        } else {
          coltop++;
 800a1be:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800a1c2:	3301      	adds	r3, #1
 800a1c4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800a1c8:	e00a      	b.n	800a1e0 <qr_DvOBrgQi+0x8fc>
 800a1ca:	bf00      	nop
 800a1cc:	7c900000 	.word	0x7c900000
 800a1d0:	3ff00000 	.word	0x3ff00000
        }
      } else {
        c_lastc = 0;
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
        exitg1 = 1;
 800a1da:	2301      	movs	r3, #1
 800a1dc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
      }
    } while (exitg1 == 0);
 800a1e0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d0c9      	beq.n	800a17c <qr_DvOBrgQi+0x898>
 800a1e8:	e005      	b.n	800a1f6 <qr_DvOBrgQi+0x912>
  } else {
    knt = 0;
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    c_lastc = 0;
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }

  if (knt > 0) {
 800a1f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	dd29      	ble.n	800a252 <qr_DvOBrgQi+0x96e>
    xgemv_NQlWbt2i(knt, c_lastc, b_A, 14, b_A, 8, work);
 800a1fe:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800a202:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800a206:	9302      	str	r3, [sp, #8]
 800a208:	2308      	movs	r3, #8
 800a20a:	9301      	str	r3, [sp, #4]
 800a20c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800a210:	9300      	str	r3, [sp, #0]
 800a212:	230e      	movs	r3, #14
 800a214:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 800a218:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800a21c:	f002 ff04 	bl	800d028 <xgemv_NQlWbt2i>
    xgerc_R09LiDgJ(knt, c_lastc, -tau_idx_1, 8, work, b_A, 14);
 800a220:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800a224:	63bb      	str	r3, [r7, #56]	; 0x38
 800a226:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800a22a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800a22e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a230:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800a234:	230e      	movs	r3, #14
 800a236:	9301      	str	r3, [sp, #4]
 800a238:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800a23c:	9300      	str	r3, [sp, #0]
 800a23e:	4613      	mov	r3, r2
 800a240:	2208      	movs	r2, #8
 800a242:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 800a246:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 800a24a:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800a24e:	f002 fff9 	bl	800d244 <xgerc_R09LiDgJ>
  }

  b_A[7] = atmp;
 800a252:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 800a256:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
  atmp = b_A[14];
 800a25a:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 800a25e:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
  tau_idx_2 = 0.0;
 800a262:	f04f 0200 	mov.w	r2, #0
 800a266:	f04f 0300 	mov.w	r3, #0
 800a26a:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
  beta1 = xnrm2_nLdASVZH(3, b_A, 16);
 800a26e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800a272:	2210      	movs	r2, #16
 800a274:	4619      	mov	r1, r3
 800a276:	2003      	movs	r0, #3
 800a278:	f003 faf4 	bl	800d864 <xnrm2_nLdASVZH>
 800a27c:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
  if (beta1 != 0.0) {
 800a280:	f04f 0200 	mov.w	r2, #0
 800a284:	f04f 0300 	mov.w	r3, #0
 800a288:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800a28c:	f7f6 fc0e 	bl	8000aac <__aeabi_dcmpeq>
 800a290:	4603      	mov	r3, r0
 800a292:	2b00      	cmp	r3, #0
 800a294:	f040 8170 	bne.w	800a578 <qr_DvOBrgQi+0xc94>
    beta1 = rt_hypotd_snf(b_A[14], beta1);
 800a298:	ed97 7b3e 	vldr	d7, [r7, #248]	; 0xf8
 800a29c:	ed97 1b52 	vldr	d1, [r7, #328]	; 0x148
 800a2a0:	eeb0 0a47 	vmov.f32	s0, s14
 800a2a4:	eef0 0a67 	vmov.f32	s1, s15
 800a2a8:	f000 fdf6 	bl	800ae98 <rt_hypotd_snf>
 800a2ac:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
    if (b_A[14] >= 0.0) {
 800a2b0:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 800a2b4:	f04f 0200 	mov.w	r2, #0
 800a2b8:	f04f 0300 	mov.w	r3, #0
 800a2bc:	f7f6 fc14 	bl	8000ae8 <__aeabi_dcmpge>
 800a2c0:	4603      	mov	r3, r0
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d009      	beq.n	800a2da <qr_DvOBrgQi+0x9f6>
      beta1 = -beta1;
 800a2c6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800a2ca:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800a2ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a2d2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800a2d6:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    }

    if (fabs(beta1) < 1.0020841800044864E-292) {
 800a2da:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800a2de:	633b      	str	r3, [r7, #48]	; 0x30
 800a2e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a2e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a2e8:	637b      	str	r3, [r7, #52]	; 0x34
 800a2ea:	f04f 0200 	mov.w	r2, #0
 800a2ee:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800a2f2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800a2f6:	f7f6 fbe3 	bl	8000ac0 <__aeabi_dcmplt>
 800a2fa:	4603      	mov	r3, r0
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	f000 80ef 	beq.w	800a4e0 <qr_DvOBrgQi+0xbfc>
      knt = 0;
 800a302:	2300      	movs	r3, #0
 800a304:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
      do {
        knt++;
 800a308:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a30c:	3301      	adds	r3, #1
 800a30e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        for (b_coltop = 15; b_coltop < 18; b_coltop++) {
 800a312:	230f      	movs	r3, #15
 800a314:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800a318:	e01f      	b.n	800a35a <qr_DvOBrgQi+0xa76>
          b_A[b_coltop] *= 9.9792015476736E+291;
 800a31a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a31e:	00db      	lsls	r3, r3, #3
 800a320:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800a324:	4413      	add	r3, r2
 800a326:	3bd0      	subs	r3, #208	; 0xd0
 800a328:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a32c:	f04f 0200 	mov.w	r2, #0
 800a330:	4bb5      	ldr	r3, [pc, #724]	; (800a608 <qr_DvOBrgQi+0xd24>)
 800a332:	f7f6 f953 	bl	80005dc <__aeabi_dmul>
 800a336:	4602      	mov	r2, r0
 800a338:	460b      	mov	r3, r1
 800a33a:	4610      	mov	r0, r2
 800a33c:	4619      	mov	r1, r3
 800a33e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a342:	00db      	lsls	r3, r3, #3
 800a344:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800a348:	4413      	add	r3, r2
 800a34a:	3bd0      	subs	r3, #208	; 0xd0
 800a34c:	e9c3 0100 	strd	r0, r1, [r3]
        for (b_coltop = 15; b_coltop < 18; b_coltop++) {
 800a350:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a354:	3301      	adds	r3, #1
 800a356:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800a35a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a35e:	2b11      	cmp	r3, #17
 800a360:	dddb      	ble.n	800a31a <qr_DvOBrgQi+0xa36>
        }

        beta1 *= 9.9792015476736E+291;
 800a362:	f04f 0200 	mov.w	r2, #0
 800a366:	4ba8      	ldr	r3, [pc, #672]	; (800a608 <qr_DvOBrgQi+0xd24>)
 800a368:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800a36c:	f7f6 f936 	bl	80005dc <__aeabi_dmul>
 800a370:	4602      	mov	r2, r0
 800a372:	460b      	mov	r3, r1
 800a374:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
        atmp *= 9.9792015476736E+291;
 800a378:	f04f 0200 	mov.w	r2, #0
 800a37c:	4ba2      	ldr	r3, [pc, #648]	; (800a608 <qr_DvOBrgQi+0xd24>)
 800a37e:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 800a382:	f7f6 f92b 	bl	80005dc <__aeabi_dmul>
 800a386:	4602      	mov	r2, r0
 800a388:	460b      	mov	r3, r1
 800a38a:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      } while ((fabs(beta1) < 1.0020841800044864E-292) && (knt < 20));
 800a38e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800a392:	62bb      	str	r3, [r7, #40]	; 0x28
 800a394:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a398:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a39c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a39e:	f04f 0200 	mov.w	r2, #0
 800a3a2:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800a3a6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800a3aa:	f7f6 fb89 	bl	8000ac0 <__aeabi_dcmplt>
 800a3ae:	4603      	mov	r3, r0
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d003      	beq.n	800a3bc <qr_DvOBrgQi+0xad8>
 800a3b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a3b8:	2b13      	cmp	r3, #19
 800a3ba:	dda5      	ble.n	800a308 <qr_DvOBrgQi+0xa24>

      beta1 = rt_hypotd_snf(atmp, xnrm2_nLdASVZH(3, b_A, 16));
 800a3bc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800a3c0:	2210      	movs	r2, #16
 800a3c2:	4619      	mov	r1, r3
 800a3c4:	2003      	movs	r0, #3
 800a3c6:	f003 fa4d 	bl	800d864 <xnrm2_nLdASVZH>
 800a3ca:	eeb0 7a40 	vmov.f32	s14, s0
 800a3ce:	eef0 7a60 	vmov.f32	s15, s1
 800a3d2:	eeb0 1a47 	vmov.f32	s2, s14
 800a3d6:	eef0 1a67 	vmov.f32	s3, s15
 800a3da:	ed97 0b54 	vldr	d0, [r7, #336]	; 0x150
 800a3de:	f000 fd5b 	bl	800ae98 <rt_hypotd_snf>
 800a3e2:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
      if (atmp >= 0.0) {
 800a3e6:	f04f 0200 	mov.w	r2, #0
 800a3ea:	f04f 0300 	mov.w	r3, #0
 800a3ee:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 800a3f2:	f7f6 fb79 	bl	8000ae8 <__aeabi_dcmpge>
 800a3f6:	4603      	mov	r3, r0
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d009      	beq.n	800a410 <qr_DvOBrgQi+0xb2c>
        beta1 = -beta1;
 800a3fc:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800a400:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800a404:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a408:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800a40c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
      }

      tau_idx_2 = (beta1 - atmp) / beta1;
 800a410:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 800a414:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800a418:	f7f5 ff28 	bl	800026c <__aeabi_dsub>
 800a41c:	4602      	mov	r2, r0
 800a41e:	460b      	mov	r3, r1
 800a420:	4610      	mov	r0, r2
 800a422:	4619      	mov	r1, r3
 800a424:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800a428:	f7f6 fa02 	bl	8000830 <__aeabi_ddiv>
 800a42c:	4602      	mov	r2, r0
 800a42e:	460b      	mov	r3, r1
 800a430:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
      atmp = 1.0 / (atmp - beta1);
 800a434:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800a438:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 800a43c:	f7f5 ff16 	bl	800026c <__aeabi_dsub>
 800a440:	4602      	mov	r2, r0
 800a442:	460b      	mov	r3, r1
 800a444:	f04f 0000 	mov.w	r0, #0
 800a448:	4970      	ldr	r1, [pc, #448]	; (800a60c <qr_DvOBrgQi+0xd28>)
 800a44a:	f7f6 f9f1 	bl	8000830 <__aeabi_ddiv>
 800a44e:	4602      	mov	r2, r0
 800a450:	460b      	mov	r3, r1
 800a452:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      for (b_coltop = 15; b_coltop < 18; b_coltop++) {
 800a456:	230f      	movs	r3, #15
 800a458:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800a45c:	e01c      	b.n	800a498 <qr_DvOBrgQi+0xbb4>
        b_A[b_coltop] *= atmp;
 800a45e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a462:	00db      	lsls	r3, r3, #3
 800a464:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800a468:	4413      	add	r3, r2
 800a46a:	3bd0      	subs	r3, #208	; 0xd0
 800a46c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a470:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 800a474:	f7f6 f8b2 	bl	80005dc <__aeabi_dmul>
 800a478:	4602      	mov	r2, r0
 800a47a:	460b      	mov	r3, r1
 800a47c:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 800a480:	00c9      	lsls	r1, r1, #3
 800a482:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 800a486:	4401      	add	r1, r0
 800a488:	39d0      	subs	r1, #208	; 0xd0
 800a48a:	e9c1 2300 	strd	r2, r3, [r1]
      for (b_coltop = 15; b_coltop < 18; b_coltop++) {
 800a48e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a492:	3301      	adds	r3, #1
 800a494:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800a498:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a49c:	2b11      	cmp	r3, #17
 800a49e:	ddde      	ble.n	800a45e <qr_DvOBrgQi+0xb7a>
      }

      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800a4a6:	e010      	b.n	800a4ca <qr_DvOBrgQi+0xbe6>
        beta1 *= 1.0020841800044864E-292;
 800a4a8:	f04f 0200 	mov.w	r2, #0
 800a4ac:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800a4b0:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800a4b4:	f7f6 f892 	bl	80005dc <__aeabi_dmul>
 800a4b8:	4602      	mov	r2, r0
 800a4ba:	460b      	mov	r3, r1
 800a4bc:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 800a4c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a4c4:	3301      	adds	r3, #1
 800a4c6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800a4ca:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800a4ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a4d2:	429a      	cmp	r2, r3
 800a4d4:	dbe8      	blt.n	800a4a8 <qr_DvOBrgQi+0xbc4>
      }

      atmp = beta1;
 800a4d6:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800a4da:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
 800a4de:	e04b      	b.n	800a578 <qr_DvOBrgQi+0xc94>
    } else {
      tau_idx_2 = (beta1 - b_A[14]) / beta1;
 800a4e0:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 800a4e4:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800a4e8:	f7f5 fec0 	bl	800026c <__aeabi_dsub>
 800a4ec:	4602      	mov	r2, r0
 800a4ee:	460b      	mov	r3, r1
 800a4f0:	4610      	mov	r0, r2
 800a4f2:	4619      	mov	r1, r3
 800a4f4:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800a4f8:	f7f6 f99a 	bl	8000830 <__aeabi_ddiv>
 800a4fc:	4602      	mov	r2, r0
 800a4fe:	460b      	mov	r3, r1
 800a500:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
      atmp = 1.0 / (b_A[14] - beta1);
 800a504:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 800a508:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800a50c:	f7f5 feae 	bl	800026c <__aeabi_dsub>
 800a510:	4602      	mov	r2, r0
 800a512:	460b      	mov	r3, r1
 800a514:	f04f 0000 	mov.w	r0, #0
 800a518:	493c      	ldr	r1, [pc, #240]	; (800a60c <qr_DvOBrgQi+0xd28>)
 800a51a:	f7f6 f989 	bl	8000830 <__aeabi_ddiv>
 800a51e:	4602      	mov	r2, r0
 800a520:	460b      	mov	r3, r1
 800a522:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      for (c_lastc = 15; c_lastc < 18; c_lastc++) {
 800a526:	230f      	movs	r3, #15
 800a528:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800a52c:	e01c      	b.n	800a568 <qr_DvOBrgQi+0xc84>
        b_A[c_lastc] *= atmp;
 800a52e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a532:	00db      	lsls	r3, r3, #3
 800a534:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800a538:	4413      	add	r3, r2
 800a53a:	3bd0      	subs	r3, #208	; 0xd0
 800a53c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a540:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 800a544:	f7f6 f84a 	bl	80005dc <__aeabi_dmul>
 800a548:	4602      	mov	r2, r0
 800a54a:	460b      	mov	r3, r1
 800a54c:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 800a550:	00c9      	lsls	r1, r1, #3
 800a552:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 800a556:	4401      	add	r1, r0
 800a558:	39d0      	subs	r1, #208	; 0xd0
 800a55a:	e9c1 2300 	strd	r2, r3, [r1]
      for (c_lastc = 15; c_lastc < 18; c_lastc++) {
 800a55e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a562:	3301      	adds	r3, #1
 800a564:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800a568:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a56c:	2b11      	cmp	r3, #17
 800a56e:	ddde      	ble.n	800a52e <qr_DvOBrgQi+0xc4a>
      }

      atmp = beta1;
 800a570:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800a574:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
    }
  }

  b_A[14] = atmp;
 800a578:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 800a57c:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
  R[0] = b_A[0];
 800a580:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800a584:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800a586:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 1; c_lastc + 1 < 4; c_lastc++) {
 800a58a:	2301      	movs	r3, #1
 800a58c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800a590:	e00f      	b.n	800a5b2 <qr_DvOBrgQi+0xcce>
    R[c_lastc] = 0.0;
 800a592:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a596:	00db      	lsls	r3, r3, #3
 800a598:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a59a:	18d1      	adds	r1, r2, r3
 800a59c:	f04f 0200 	mov.w	r2, #0
 800a5a0:	f04f 0300 	mov.w	r3, #0
 800a5a4:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 1; c_lastc + 1 < 4; c_lastc++) {
 800a5a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a5ac:	3301      	adds	r3, #1
 800a5ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800a5b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a5b6:	2b02      	cmp	r3, #2
 800a5b8:	ddeb      	ble.n	800a592 <qr_DvOBrgQi+0xcae>
  }

  work[0] = 0.0;
 800a5ba:	f04f 0200 	mov.w	r2, #0
 800a5be:	f04f 0300 	mov.w	r3, #0
 800a5c2:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  for (c_lastc = 0; c_lastc < 2; c_lastc++) {
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800a5cc:	e016      	b.n	800a5fc <qr_DvOBrgQi+0xd18>
    R[c_lastc + 3] = b_A[c_lastc + 6];
 800a5ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a5d2:	3306      	adds	r3, #6
 800a5d4:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800a5d8:	3203      	adds	r2, #3
 800a5da:	00d2      	lsls	r2, r2, #3
 800a5dc:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800a5de:	4411      	add	r1, r2
 800a5e0:	00db      	lsls	r3, r3, #3
 800a5e2:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800a5e6:	4413      	add	r3, r2
 800a5e8:	3bd0      	subs	r3, #208	; 0xd0
 800a5ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5ee:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 0; c_lastc < 2; c_lastc++) {
 800a5f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a5f6:	3301      	adds	r3, #1
 800a5f8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800a5fc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a600:	2b01      	cmp	r3, #1
 800a602:	dde4      	ble.n	800a5ce <qr_DvOBrgQi+0xcea>
  }

  while (c_lastc + 1 < 4) {
 800a604:	e015      	b.n	800a632 <qr_DvOBrgQi+0xd4e>
 800a606:	bf00      	nop
 800a608:	7c900000 	.word	0x7c900000
 800a60c:	3ff00000 	.word	0x3ff00000
    R[c_lastc + 3] = 0.0;
 800a610:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a614:	3303      	adds	r3, #3
 800a616:	00db      	lsls	r3, r3, #3
 800a618:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a61a:	18d1      	adds	r1, r2, r3
 800a61c:	f04f 0200 	mov.w	r2, #0
 800a620:	f04f 0300 	mov.w	r3, #0
 800a624:	e9c1 2300 	strd	r2, r3, [r1]
    c_lastc++;
 800a628:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a62c:	3301      	adds	r3, #1
 800a62e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  while (c_lastc + 1 < 4) {
 800a632:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a636:	2b02      	cmp	r3, #2
 800a638:	ddea      	ble.n	800a610 <qr_DvOBrgQi+0xd2c>
  }

  work[1] = 0.0;
 800a63a:	f04f 0200 	mov.w	r2, #0
 800a63e:	f04f 0300 	mov.w	r3, #0
 800a642:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
  for (c_lastc = 0; c_lastc < 3; c_lastc++) {
 800a646:	2300      	movs	r3, #0
 800a648:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800a64c:	e016      	b.n	800a67c <qr_DvOBrgQi+0xd98>
    R[c_lastc + 6] = b_A[c_lastc + 12];
 800a64e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a652:	330c      	adds	r3, #12
 800a654:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800a658:	3206      	adds	r2, #6
 800a65a:	00d2      	lsls	r2, r2, #3
 800a65c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800a65e:	4411      	add	r1, r2
 800a660:	00db      	lsls	r3, r3, #3
 800a662:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800a666:	4413      	add	r3, r2
 800a668:	3bd0      	subs	r3, #208	; 0xd0
 800a66a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a66e:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 0; c_lastc < 3; c_lastc++) {
 800a672:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a676:	3301      	adds	r3, #1
 800a678:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800a67c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a680:	2b02      	cmp	r3, #2
 800a682:	dde4      	ble.n	800a64e <qr_DvOBrgQi+0xd6a>
  }

  work[2] = 0.0;
 800a684:	f04f 0200 	mov.w	r2, #0
 800a688:	f04f 0300 	mov.w	r3, #0
 800a68c:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
  for (b_coltop = 15; b_coltop < 18; b_coltop++) {
 800a690:	230f      	movs	r3, #15
 800a692:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800a696:	e024      	b.n	800a6e2 <qr_DvOBrgQi+0xdfe>
    b_A[b_coltop] *= -tau_idx_2;
 800a698:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a69c:	00db      	lsls	r3, r3, #3
 800a69e:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800a6a2:	4413      	add	r3, r2
 800a6a4:	3bd0      	subs	r3, #208	; 0xd0
 800a6a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a6aa:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a6ae:	623b      	str	r3, [r7, #32]
 800a6b0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a6b4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800a6b8:	627b      	str	r3, [r7, #36]	; 0x24
 800a6ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a6be:	f7f5 ff8d 	bl	80005dc <__aeabi_dmul>
 800a6c2:	4602      	mov	r2, r0
 800a6c4:	460b      	mov	r3, r1
 800a6c6:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 800a6ca:	00c9      	lsls	r1, r1, #3
 800a6cc:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 800a6d0:	4401      	add	r1, r0
 800a6d2:	39d0      	subs	r1, #208	; 0xd0
 800a6d4:	e9c1 2300 	strd	r2, r3, [r1]
  for (b_coltop = 15; b_coltop < 18; b_coltop++) {
 800a6d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a6dc:	3301      	adds	r3, #1
 800a6de:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800a6e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a6e6:	2b11      	cmp	r3, #17
 800a6e8:	ddd6      	ble.n	800a698 <qr_DvOBrgQi+0xdb4>
  }

  b_A[14] = 1.0 - tau_idx_2;
 800a6ea:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 800a6ee:	f04f 0000 	mov.w	r0, #0
 800a6f2:	49cc      	ldr	r1, [pc, #816]	; (800aa24 <qr_DvOBrgQi+0x1140>)
 800a6f4:	f7f5 fdba 	bl	800026c <__aeabi_dsub>
 800a6f8:	4602      	mov	r2, r0
 800a6fa:	460b      	mov	r3, r1
 800a6fc:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
  for (c_lastc = 0; c_lastc < 2; c_lastc++) {
 800a700:	2300      	movs	r3, #0
 800a702:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800a706:	e014      	b.n	800a732 <qr_DvOBrgQi+0xe4e>
    b_A[13 - c_lastc] = 0.0;
 800a708:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a70c:	f1c3 030d 	rsb	r3, r3, #13
 800a710:	00db      	lsls	r3, r3, #3
 800a712:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800a716:	4413      	add	r3, r2
 800a718:	f1a3 01d0 	sub.w	r1, r3, #208	; 0xd0
 800a71c:	f04f 0200 	mov.w	r2, #0
 800a720:	f04f 0300 	mov.w	r3, #0
 800a724:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 0; c_lastc < 2; c_lastc++) {
 800a728:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a72c:	3301      	adds	r3, #1
 800a72e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800a732:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a736:	2b01      	cmp	r3, #1
 800a738:	dde6      	ble.n	800a708 <qr_DvOBrgQi+0xe24>
  }

  b_A[7] = 1.0;
 800a73a:	f04f 0200 	mov.w	r2, #0
 800a73e:	4bb9      	ldr	r3, [pc, #740]	; (800aa24 <qr_DvOBrgQi+0x1140>)
 800a740:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
  if (tau_idx_1 != 0.0) {
 800a744:	f04f 0200 	mov.w	r2, #0
 800a748:	f04f 0300 	mov.w	r3, #0
 800a74c:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 800a750:	f7f6 f9ac 	bl	8000aac <__aeabi_dcmpeq>
 800a754:	4603      	mov	r3, r0
 800a756:	2b00      	cmp	r3, #0
 800a758:	d15f      	bne.n	800a81a <qr_DvOBrgQi+0xf36>
    c_lastc = 5;
 800a75a:	2305      	movs	r3, #5
 800a75c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    b_coltop = 13;
 800a760:	230d      	movs	r3, #13
 800a762:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    while ((c_lastc > 0) && (b_A[b_coltop - 2] == 0.0)) {
 800a766:	e009      	b.n	800a77c <qr_DvOBrgQi+0xe98>
      c_lastc--;
 800a768:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a76c:	3b01      	subs	r3, #1
 800a76e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
      b_coltop--;
 800a772:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a776:	3b01      	subs	r3, #1
 800a778:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    while ((c_lastc > 0) && (b_A[b_coltop - 2] == 0.0)) {
 800a77c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a780:	2b00      	cmp	r3, #0
 800a782:	dd12      	ble.n	800a7aa <qr_DvOBrgQi+0xec6>
 800a784:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a788:	3b02      	subs	r3, #2
 800a78a:	00db      	lsls	r3, r3, #3
 800a78c:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800a790:	4413      	add	r3, r2
 800a792:	3bd0      	subs	r3, #208	; 0xd0
 800a794:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a798:	f04f 0200 	mov.w	r2, #0
 800a79c:	f04f 0300 	mov.w	r3, #0
 800a7a0:	f7f6 f984 	bl	8000aac <__aeabi_dcmpeq>
 800a7a4:	4603      	mov	r3, r0
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d1de      	bne.n	800a768 <qr_DvOBrgQi+0xe84>
    }

    b_coltop = 1;
 800a7aa:	2301      	movs	r3, #1
 800a7ac:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    knt = 14;
 800a7b0:	230e      	movs	r3, #14
 800a7b2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    do {
      exitg1 = 0;
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
      if (knt <= c_lastc + 13) {
 800a7bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a7c0:	330d      	adds	r3, #13
 800a7c2:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800a7c6:	429a      	cmp	r2, r3
 800a7c8:	dc1c      	bgt.n	800a804 <qr_DvOBrgQi+0xf20>
        if (b_A[knt - 1] != 0.0) {
 800a7ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a7ce:	3b01      	subs	r3, #1
 800a7d0:	00db      	lsls	r3, r3, #3
 800a7d2:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800a7d6:	4413      	add	r3, r2
 800a7d8:	3bd0      	subs	r3, #208	; 0xd0
 800a7da:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a7de:	f04f 0200 	mov.w	r2, #0
 800a7e2:	f04f 0300 	mov.w	r3, #0
 800a7e6:	f7f6 f961 	bl	8000aac <__aeabi_dcmpeq>
 800a7ea:	4603      	mov	r3, r0
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d103      	bne.n	800a7f8 <qr_DvOBrgQi+0xf14>
          exitg1 = 1;
 800a7f0:	2301      	movs	r3, #1
 800a7f2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800a7f6:	e00b      	b.n	800a810 <qr_DvOBrgQi+0xf2c>
        } else {
          knt++;
 800a7f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a7fc:	3301      	adds	r3, #1
 800a7fe:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800a802:	e005      	b.n	800a810 <qr_DvOBrgQi+0xf2c>
        }
      } else {
        b_coltop = 0;
 800a804:	2300      	movs	r3, #0
 800a806:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        exitg1 = 1;
 800a80a:	2301      	movs	r3, #1
 800a80c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
      }
    } while (exitg1 == 0);
 800a810:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800a814:	2b00      	cmp	r3, #0
 800a816:	d0ce      	beq.n	800a7b6 <qr_DvOBrgQi+0xed2>
 800a818:	e005      	b.n	800a826 <qr_DvOBrgQi+0xf42>
  } else {
    c_lastc = 0;
 800a81a:	2300      	movs	r3, #0
 800a81c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    b_coltop = 0;
 800a820:	2300      	movs	r3, #0
 800a822:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  }

  if (c_lastc > 0) {
 800a826:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	dd29      	ble.n	800a882 <qr_DvOBrgQi+0xf9e>
    xgemv_NQlWbt2i(c_lastc, b_coltop, b_A, 14, b_A, 8, work);
 800a82e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800a832:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800a836:	9302      	str	r3, [sp, #8]
 800a838:	2308      	movs	r3, #8
 800a83a:	9301      	str	r3, [sp, #4]
 800a83c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800a840:	9300      	str	r3, [sp, #0]
 800a842:	230e      	movs	r3, #14
 800a844:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 800a848:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 800a84c:	f002 fbec 	bl	800d028 <xgemv_NQlWbt2i>
    xgerc_R09LiDgJ(c_lastc, b_coltop, -tau_idx_1, 8, work, b_A, 14);
 800a850:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800a854:	61bb      	str	r3, [r7, #24]
 800a856:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800a85a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800a85e:	61fb      	str	r3, [r7, #28]
 800a860:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800a864:	230e      	movs	r3, #14
 800a866:	9301      	str	r3, [sp, #4]
 800a868:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800a86c:	9300      	str	r3, [sp, #0]
 800a86e:	4613      	mov	r3, r2
 800a870:	2208      	movs	r2, #8
 800a872:	ed97 0b06 	vldr	d0, [r7, #24]
 800a876:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 800a87a:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 800a87e:	f002 fce1 	bl	800d244 <xgerc_R09LiDgJ>
  }

  for (b_coltop = 8; b_coltop < 12; b_coltop++) {
 800a882:	2308      	movs	r3, #8
 800a884:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800a888:	e024      	b.n	800a8d4 <qr_DvOBrgQi+0xff0>
    b_A[b_coltop] *= -tau_idx_1;
 800a88a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a88e:	00db      	lsls	r3, r3, #3
 800a890:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800a894:	4413      	add	r3, r2
 800a896:	3bd0      	subs	r3, #208	; 0xd0
 800a898:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a89c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800a8a0:	613b      	str	r3, [r7, #16]
 800a8a2:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800a8a6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800a8aa:	617b      	str	r3, [r7, #20]
 800a8ac:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a8b0:	f7f5 fe94 	bl	80005dc <__aeabi_dmul>
 800a8b4:	4602      	mov	r2, r0
 800a8b6:	460b      	mov	r3, r1
 800a8b8:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 800a8bc:	00c9      	lsls	r1, r1, #3
 800a8be:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 800a8c2:	4401      	add	r1, r0
 800a8c4:	39d0      	subs	r1, #208	; 0xd0
 800a8c6:	e9c1 2300 	strd	r2, r3, [r1]
  for (b_coltop = 8; b_coltop < 12; b_coltop++) {
 800a8ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a8ce:	3301      	adds	r3, #1
 800a8d0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800a8d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a8d8:	2b0b      	cmp	r3, #11
 800a8da:	ddd6      	ble.n	800a88a <qr_DvOBrgQi+0xfa6>
  }

  b_A[7] = 1.0 - tau_idx_1;
 800a8dc:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800a8e0:	f04f 0000 	mov.w	r0, #0
 800a8e4:	494f      	ldr	r1, [pc, #316]	; (800aa24 <qr_DvOBrgQi+0x1140>)
 800a8e6:	f7f5 fcc1 	bl	800026c <__aeabi_dsub>
 800a8ea:	4602      	mov	r2, r0
 800a8ec:	460b      	mov	r3, r1
 800a8ee:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
  b_A[6] = 0.0;
 800a8f2:	f04f 0200 	mov.w	r2, #0
 800a8f6:	f04f 0300 	mov.w	r3, #0
 800a8fa:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
  b_A[0] = 1.0;
 800a8fe:	f04f 0200 	mov.w	r2, #0
 800a902:	4b48      	ldr	r3, [pc, #288]	; (800aa24 <qr_DvOBrgQi+0x1140>)
 800a904:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
  if (tau_idx_0 != 0.0) {
 800a908:	f04f 0200 	mov.w	r2, #0
 800a90c:	f04f 0300 	mov.w	r3, #0
 800a910:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 800a914:	f7f6 f8ca 	bl	8000aac <__aeabi_dcmpeq>
 800a918:	4603      	mov	r3, r0
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	f040 8084 	bne.w	800aa28 <qr_DvOBrgQi+0x1144>
    c_lastc = 6;
 800a920:	2306      	movs	r3, #6
 800a922:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    b_coltop = 7;
 800a926:	2307      	movs	r3, #7
 800a928:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    while ((c_lastc > 0) && (b_A[b_coltop - 2] == 0.0)) {
 800a92c:	e009      	b.n	800a942 <qr_DvOBrgQi+0x105e>
      c_lastc--;
 800a92e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a932:	3b01      	subs	r3, #1
 800a934:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
      b_coltop--;
 800a938:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a93c:	3b01      	subs	r3, #1
 800a93e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    while ((c_lastc > 0) && (b_A[b_coltop - 2] == 0.0)) {
 800a942:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a946:	2b00      	cmp	r3, #0
 800a948:	dd12      	ble.n	800a970 <qr_DvOBrgQi+0x108c>
 800a94a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a94e:	3b02      	subs	r3, #2
 800a950:	00db      	lsls	r3, r3, #3
 800a952:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800a956:	4413      	add	r3, r2
 800a958:	3bd0      	subs	r3, #208	; 0xd0
 800a95a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a95e:	f04f 0200 	mov.w	r2, #0
 800a962:	f04f 0300 	mov.w	r3, #0
 800a966:	f7f6 f8a1 	bl	8000aac <__aeabi_dcmpeq>
 800a96a:	4603      	mov	r3, r0
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d1de      	bne.n	800a92e <qr_DvOBrgQi+0x104a>
    }

    b_coltop = 2;
 800a970:	2302      	movs	r3, #2
 800a972:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    exitg2 = false;
 800a976:	2300      	movs	r3, #0
 800a978:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
    while ((!exitg2) && (b_coltop > 0)) {
 800a97c:	e049      	b.n	800aa12 <qr_DvOBrgQi+0x112e>
      coltop = (b_coltop - 1) * 6 + 7;
 800a97e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a982:	1e5a      	subs	r2, r3, #1
 800a984:	4613      	mov	r3, r2
 800a986:	005b      	lsls	r3, r3, #1
 800a988:	4413      	add	r3, r2
 800a98a:	005b      	lsls	r3, r3, #1
 800a98c:	3307      	adds	r3, #7
 800a98e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
      knt = coltop;
 800a992:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800a996:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
      do {
        exitg1 = 0;
 800a99a:	2300      	movs	r3, #0
 800a99c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        if (knt <= (coltop + c_lastc) - 1) {
 800a9a0:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800a9a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a9a8:	4413      	add	r3, r2
 800a9aa:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800a9ae:	429a      	cmp	r2, r3
 800a9b0:	da1c      	bge.n	800a9ec <qr_DvOBrgQi+0x1108>
          if (b_A[knt - 1] != 0.0) {
 800a9b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a9b6:	3b01      	subs	r3, #1
 800a9b8:	00db      	lsls	r3, r3, #3
 800a9ba:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800a9be:	4413      	add	r3, r2
 800a9c0:	3bd0      	subs	r3, #208	; 0xd0
 800a9c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a9c6:	f04f 0200 	mov.w	r2, #0
 800a9ca:	f04f 0300 	mov.w	r3, #0
 800a9ce:	f7f6 f86d 	bl	8000aac <__aeabi_dcmpeq>
 800a9d2:	4603      	mov	r3, r0
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d103      	bne.n	800a9e0 <qr_DvOBrgQi+0x10fc>
            exitg1 = 1;
 800a9d8:	2301      	movs	r3, #1
 800a9da:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800a9de:	e00d      	b.n	800a9fc <qr_DvOBrgQi+0x1118>
          } else {
            knt++;
 800a9e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a9e4:	3301      	adds	r3, #1
 800a9e6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800a9ea:	e007      	b.n	800a9fc <qr_DvOBrgQi+0x1118>
          }
        } else {
          b_coltop--;
 800a9ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a9f0:	3b01      	subs	r3, #1
 800a9f2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          exitg1 = 2;
 800a9f6:	2302      	movs	r3, #2
 800a9f8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        }
      } while (exitg1 == 0);
 800a9fc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d0ca      	beq.n	800a99a <qr_DvOBrgQi+0x10b6>

      if (exitg1 == 1) {
 800aa04:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800aa08:	2b01      	cmp	r3, #1
 800aa0a:	d102      	bne.n	800aa12 <qr_DvOBrgQi+0x112e>
        exitg2 = true;
 800aa0c:	2301      	movs	r3, #1
 800aa0e:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
    while ((!exitg2) && (b_coltop > 0)) {
 800aa12:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d10c      	bne.n	800aa34 <qr_DvOBrgQi+0x1150>
 800aa1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	dcad      	bgt.n	800a97e <qr_DvOBrgQi+0x109a>
 800aa22:	e007      	b.n	800aa34 <qr_DvOBrgQi+0x1150>
 800aa24:	3ff00000 	.word	0x3ff00000
      }
    }
  } else {
    c_lastc = 0;
 800aa28:	2300      	movs	r3, #0
 800aa2a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    b_coltop = 0;
 800aa2e:	2300      	movs	r3, #0
 800aa30:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  }

  if (c_lastc > 0) {
 800aa34:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	dd29      	ble.n	800aa90 <qr_DvOBrgQi+0x11ac>
    xgemv_NQlWbt2i(c_lastc, b_coltop, b_A, 7, b_A, 1, work);
 800aa3c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800aa40:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800aa44:	9302      	str	r3, [sp, #8]
 800aa46:	2301      	movs	r3, #1
 800aa48:	9301      	str	r3, [sp, #4]
 800aa4a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800aa4e:	9300      	str	r3, [sp, #0]
 800aa50:	2307      	movs	r3, #7
 800aa52:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 800aa56:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 800aa5a:	f002 fae5 	bl	800d028 <xgemv_NQlWbt2i>
    xgerc_R09LiDgJ(c_lastc, b_coltop, -tau_idx_0, 1, work, b_A, 7);
 800aa5e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800aa62:	60bb      	str	r3, [r7, #8]
 800aa64:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800aa68:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800aa6c:	60fb      	str	r3, [r7, #12]
 800aa6e:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800aa72:	2307      	movs	r3, #7
 800aa74:	9301      	str	r3, [sp, #4]
 800aa76:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800aa7a:	9300      	str	r3, [sp, #0]
 800aa7c:	4613      	mov	r3, r2
 800aa7e:	2201      	movs	r2, #1
 800aa80:	ed97 0b02 	vldr	d0, [r7, #8]
 800aa84:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 800aa88:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 800aa8c:	f002 fbda 	bl	800d244 <xgerc_R09LiDgJ>
  }

  for (b_coltop = 1; b_coltop < 6; b_coltop++) {
 800aa90:	2301      	movs	r3, #1
 800aa92:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800aa96:	e024      	b.n	800aae2 <qr_DvOBrgQi+0x11fe>
    b_A[b_coltop] *= -tau_idx_0;
 800aa98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aa9c:	00db      	lsls	r3, r3, #3
 800aa9e:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800aaa2:	4413      	add	r3, r2
 800aaa4:	3bd0      	subs	r3, #208	; 0xd0
 800aaa6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800aaaa:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800aaae:	603b      	str	r3, [r7, #0]
 800aab0:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800aab4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800aab8:	607b      	str	r3, [r7, #4]
 800aaba:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aabe:	f7f5 fd8d 	bl	80005dc <__aeabi_dmul>
 800aac2:	4602      	mov	r2, r0
 800aac4:	460b      	mov	r3, r1
 800aac6:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 800aaca:	00c9      	lsls	r1, r1, #3
 800aacc:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 800aad0:	4401      	add	r1, r0
 800aad2:	39d0      	subs	r1, #208	; 0xd0
 800aad4:	e9c1 2300 	strd	r2, r3, [r1]
  for (b_coltop = 1; b_coltop < 6; b_coltop++) {
 800aad8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aadc:	3301      	adds	r3, #1
 800aade:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800aae2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aae6:	2b05      	cmp	r3, #5
 800aae8:	ddd6      	ble.n	800aa98 <qr_DvOBrgQi+0x11b4>
  }

  b_A[0] = 1.0 - tau_idx_0;
 800aaea:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 800aaee:	f04f 0000 	mov.w	r0, #0
 800aaf2:	4923      	ldr	r1, [pc, #140]	; (800ab80 <qr_DvOBrgQi+0x129c>)
 800aaf4:	f7f5 fbba 	bl	800026c <__aeabi_dsub>
 800aaf8:	4602      	mov	r2, r0
 800aafa:	460b      	mov	r3, r1
 800aafc:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
  b_coltop = 0;
 800ab00:	2300      	movs	r3, #0
 800ab02:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  for (coltop = 0; coltop < 3; coltop++) {
 800ab06:	2300      	movs	r3, #0
 800ab08:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800ab0c:	e02d      	b.n	800ab6a <qr_DvOBrgQi+0x1286>
    for (c_lastc = 0; c_lastc < 6; c_lastc++) {
 800ab0e:	2300      	movs	r3, #0
 800ab10:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800ab14:	e01b      	b.n	800ab4e <qr_DvOBrgQi+0x126a>
      knt = c_lastc + b_coltop;
 800ab16:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800ab1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ab1e:	4413      	add	r3, r2
 800ab20:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
      Q[knt] = b_A[knt];
 800ab24:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800ab28:	00db      	lsls	r3, r3, #3
 800ab2a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ab2c:	18d1      	adds	r1, r2, r3
 800ab2e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800ab32:	00db      	lsls	r3, r3, #3
 800ab34:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800ab38:	4413      	add	r3, r2
 800ab3a:	3bd0      	subs	r3, #208	; 0xd0
 800ab3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab40:	e9c1 2300 	strd	r2, r3, [r1]
    for (c_lastc = 0; c_lastc < 6; c_lastc++) {
 800ab44:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ab48:	3301      	adds	r3, #1
 800ab4a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800ab4e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ab52:	2b05      	cmp	r3, #5
 800ab54:	dddf      	ble.n	800ab16 <qr_DvOBrgQi+0x1232>
    }

    b_coltop += 6;
 800ab56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ab5a:	3306      	adds	r3, #6
 800ab5c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  for (coltop = 0; coltop < 3; coltop++) {
 800ab60:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800ab64:	3301      	adds	r3, #1
 800ab66:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800ab6a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800ab6e:	2b02      	cmp	r3, #2
 800ab70:	ddcd      	ble.n	800ab0e <qr_DvOBrgQi+0x122a>
  }
}
 800ab72:	bf00      	nop
 800ab74:	bf00      	nop
 800ab76:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	bdb0      	pop	{r4, r5, r7, pc}
 800ab7e:	bf00      	nop
 800ab80:	3ff00000 	.word	0x3ff00000

0800ab84 <rotate_LZ7ctbe0>:
#include "rotate_LZ7ctbe0.h"
#include <math.h>
#include "rt_hypotd_snf.h"

void rotate_LZ7ctbe0(real_T x, real_T y, real_T *c, real_T *s, real_T *r)
{
 800ab84:	b5b0      	push	{r4, r5, r7, lr}
 800ab86:	b092      	sub	sp, #72	; 0x48
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	ed87 0b06 	vstr	d0, [r7, #24]
 800ab8e:	ed87 1b04 	vstr	d1, [r7, #16]
 800ab92:	60f8      	str	r0, [r7, #12]
 800ab94:	60b9      	str	r1, [r7, #8]
 800ab96:	607a      	str	r2, [r7, #4]
  real_T absx;
  real_T absy;
  absx = fabs(x);
 800ab98:	69bb      	ldr	r3, [r7, #24]
 800ab9a:	643b      	str	r3, [r7, #64]	; 0x40
 800ab9c:	69fb      	ldr	r3, [r7, #28]
 800ab9e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800aba2:	647b      	str	r3, [r7, #68]	; 0x44
  absy = fabs(y);
 800aba4:	693b      	ldr	r3, [r7, #16]
 800aba6:	63bb      	str	r3, [r7, #56]	; 0x38
 800aba8:	697b      	ldr	r3, [r7, #20]
 800abaa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800abae:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (absy == 0.0) {
 800abb0:	f04f 0200 	mov.w	r2, #0
 800abb4:	f04f 0300 	mov.w	r3, #0
 800abb8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800abbc:	f7f5 ff76 	bl	8000aac <__aeabi_dcmpeq>
 800abc0:	4603      	mov	r3, r0
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d012      	beq.n	800abec <rotate_LZ7ctbe0+0x68>
    *c = 1.0;
 800abc6:	68f9      	ldr	r1, [r7, #12]
 800abc8:	f04f 0200 	mov.w	r2, #0
 800abcc:	4b4e      	ldr	r3, [pc, #312]	; (800ad08 <rotate_LZ7ctbe0+0x184>)
 800abce:	e9c1 2300 	strd	r2, r3, [r1]
    *s = 0.0;
 800abd2:	68b9      	ldr	r1, [r7, #8]
 800abd4:	f04f 0200 	mov.w	r2, #0
 800abd8:	f04f 0300 	mov.w	r3, #0
 800abdc:	e9c1 2300 	strd	r2, r3, [r1]
    *r = x;
 800abe0:	6879      	ldr	r1, [r7, #4]
 800abe2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800abe6:	e9c1 2300 	strd	r2, r3, [r1]
    *c = absx / rho;
    xx /= absx;
    *s = xx * yy / rho;
    *r = rho * absy * xx;
  }
}
 800abea:	e088      	b.n	800acfe <rotate_LZ7ctbe0+0x17a>
  } else if (absx == 0.0) {
 800abec:	f04f 0200 	mov.w	r2, #0
 800abf0:	f04f 0300 	mov.w	r3, #0
 800abf4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800abf8:	f7f5 ff58 	bl	8000aac <__aeabi_dcmpeq>
 800abfc:	4603      	mov	r3, r0
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d012      	beq.n	800ac28 <rotate_LZ7ctbe0+0xa4>
    *c = 0.0;
 800ac02:	68f9      	ldr	r1, [r7, #12]
 800ac04:	f04f 0200 	mov.w	r2, #0
 800ac08:	f04f 0300 	mov.w	r3, #0
 800ac0c:	e9c1 2300 	strd	r2, r3, [r1]
    *s = 1.0;
 800ac10:	68b9      	ldr	r1, [r7, #8]
 800ac12:	f04f 0200 	mov.w	r2, #0
 800ac16:	4b3c      	ldr	r3, [pc, #240]	; (800ad08 <rotate_LZ7ctbe0+0x184>)
 800ac18:	e9c1 2300 	strd	r2, r3, [r1]
    *r = y;
 800ac1c:	6879      	ldr	r1, [r7, #4]
 800ac1e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ac22:	e9c1 2300 	strd	r2, r3, [r1]
}
 800ac26:	e06a      	b.n	800acfe <rotate_LZ7ctbe0+0x17a>
    absy += absx;
 800ac28:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800ac2c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800ac30:	f7f5 fb1e 	bl	8000270 <__adddf3>
 800ac34:	4602      	mov	r2, r0
 800ac36:	460b      	mov	r3, r1
 800ac38:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xx = x / absy;
 800ac3c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800ac40:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800ac44:	f7f5 fdf4 	bl	8000830 <__aeabi_ddiv>
 800ac48:	4602      	mov	r2, r0
 800ac4a:	460b      	mov	r3, r1
 800ac4c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    yy = y / absy;
 800ac50:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800ac54:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800ac58:	f7f5 fdea 	bl	8000830 <__aeabi_ddiv>
 800ac5c:	4602      	mov	r2, r0
 800ac5e:	460b      	mov	r3, r1
 800ac60:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    absx = fabs(xx);
 800ac64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac66:	643b      	str	r3, [r7, #64]	; 0x40
 800ac68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac6a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ac6e:	647b      	str	r3, [r7, #68]	; 0x44
    rho = rt_hypotd_snf(absx, fabs(yy));
 800ac70:	6abc      	ldr	r4, [r7, #40]	; 0x28
 800ac72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac74:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800ac78:	ec45 4b11 	vmov	d1, r4, r5
 800ac7c:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 800ac80:	f000 f90a 	bl	800ae98 <rt_hypotd_snf>
 800ac84:	ed87 0b08 	vstr	d0, [r7, #32]
    *c = absx / rho;
 800ac88:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ac8c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800ac90:	f7f5 fdce 	bl	8000830 <__aeabi_ddiv>
 800ac94:	4602      	mov	r2, r0
 800ac96:	460b      	mov	r3, r1
 800ac98:	68f9      	ldr	r1, [r7, #12]
 800ac9a:	e9c1 2300 	strd	r2, r3, [r1]
    xx /= absx;
 800ac9e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800aca2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800aca6:	f7f5 fdc3 	bl	8000830 <__aeabi_ddiv>
 800acaa:	4602      	mov	r2, r0
 800acac:	460b      	mov	r3, r1
 800acae:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    *s = xx * yy / rho;
 800acb2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800acb6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800acba:	f7f5 fc8f 	bl	80005dc <__aeabi_dmul>
 800acbe:	4602      	mov	r2, r0
 800acc0:	460b      	mov	r3, r1
 800acc2:	4610      	mov	r0, r2
 800acc4:	4619      	mov	r1, r3
 800acc6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800acca:	f7f5 fdb1 	bl	8000830 <__aeabi_ddiv>
 800acce:	4602      	mov	r2, r0
 800acd0:	460b      	mov	r3, r1
 800acd2:	68b9      	ldr	r1, [r7, #8]
 800acd4:	e9c1 2300 	strd	r2, r3, [r1]
    *r = rho * absy * xx;
 800acd8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800acdc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800ace0:	f7f5 fc7c 	bl	80005dc <__aeabi_dmul>
 800ace4:	4602      	mov	r2, r0
 800ace6:	460b      	mov	r3, r1
 800ace8:	4610      	mov	r0, r2
 800acea:	4619      	mov	r1, r3
 800acec:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800acf0:	f7f5 fc74 	bl	80005dc <__aeabi_dmul>
 800acf4:	4602      	mov	r2, r0
 800acf6:	460b      	mov	r3, r1
 800acf8:	6879      	ldr	r1, [r7, #4]
 800acfa:	e9c1 2300 	strd	r2, r3, [r1]
}
 800acfe:	bf00      	nop
 800ad00:	3748      	adds	r7, #72	; 0x48
 800ad02:	46bd      	mov	sp, r7
 800ad04:	bdb0      	pop	{r4, r5, r7, pc}
 800ad06:	bf00      	nop
 800ad08:	3ff00000 	.word	0x3ff00000

0800ad0c <rtGetInf>:
#include <stddef.h>
#include "rt_nonfinite.h"
#define NumBitsPerChar                 8U

real_T rtGetInf(void)
{
 800ad0c:	b580      	push	{r7, lr}
 800ad0e:	b086      	sub	sp, #24
 800ad10:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 800ad12:	2340      	movs	r3, #64	; 0x40
 800ad14:	60fb      	str	r3, [r7, #12]
  real_T inf = 0.0;
 800ad16:	f04f 0200 	mov.w	r2, #0
 800ad1a:	f04f 0300 	mov.w	r3, #0
 800ad1e:	e9c7 2304 	strd	r2, r3, [r7, #16]
  if (bitsPerReal == 32U) {
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	2b20      	cmp	r3, #32
 800ad26:	d10b      	bne.n	800ad40 <rtGetInf+0x34>
    inf = rtGetInfF();
 800ad28:	f000 f820 	bl	800ad6c <rtGetInfF>
 800ad2c:	ee10 3a10 	vmov	r3, s0
 800ad30:	4618      	mov	r0, r3
 800ad32:	f7f5 fbfb 	bl	800052c <__aeabi_f2d>
 800ad36:	4602      	mov	r2, r0
 800ad38:	460b      	mov	r3, r1
 800ad3a:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800ad3e:	e007      	b.n	800ad50 <rtGetInf+0x44>
    union {
      LittleEndianIEEEDouble bitVal;
      real_T fltVal;
    } tmpVal;

    tmpVal.bitVal.words.wordH = 0x7FF00000U;
 800ad40:	4b09      	ldr	r3, [pc, #36]	; (800ad68 <rtGetInf+0x5c>)
 800ad42:	607b      	str	r3, [r7, #4]
    tmpVal.bitVal.words.wordL = 0x00000000U;
 800ad44:	2300      	movs	r3, #0
 800ad46:	603b      	str	r3, [r7, #0]
    inf = tmpVal.fltVal;
 800ad48:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad4c:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  return inf;
 800ad50:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ad54:	ec43 2b17 	vmov	d7, r2, r3
}
 800ad58:	eeb0 0a47 	vmov.f32	s0, s14
 800ad5c:	eef0 0a67 	vmov.f32	s1, s15
 800ad60:	3718      	adds	r7, #24
 800ad62:	46bd      	mov	sp, r7
 800ad64:	bd80      	pop	{r7, pc}
 800ad66:	bf00      	nop
 800ad68:	7ff00000 	.word	0x7ff00000

0800ad6c <rtGetInfF>:

real32_T rtGetInfF(void)
{
 800ad6c:	b480      	push	{r7}
 800ad6e:	b083      	sub	sp, #12
 800ad70:	af00      	add	r7, sp, #0
  IEEESingle infF;
  infF.wordL.wordLuint = 0x7F800000U;
 800ad72:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 800ad76:	607b      	str	r3, [r7, #4]
  return infF.wordL.wordLreal;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	ee07 3a90 	vmov	s15, r3
}
 800ad7e:	eeb0 0a67 	vmov.f32	s0, s15
 800ad82:	370c      	adds	r7, #12
 800ad84:	46bd      	mov	sp, r7
 800ad86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8a:	4770      	bx	lr

0800ad8c <rtGetMinusInf>:

real_T rtGetMinusInf(void)
{
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b086      	sub	sp, #24
 800ad90:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 800ad92:	2340      	movs	r3, #64	; 0x40
 800ad94:	60fb      	str	r3, [r7, #12]
  real_T minf = 0.0;
 800ad96:	f04f 0200 	mov.w	r2, #0
 800ad9a:	f04f 0300 	mov.w	r3, #0
 800ad9e:	e9c7 2304 	strd	r2, r3, [r7, #16]
  if (bitsPerReal == 32U) {
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	2b20      	cmp	r3, #32
 800ada6:	d10b      	bne.n	800adc0 <rtGetMinusInf+0x34>
    minf = rtGetMinusInfF();
 800ada8:	f000 f820 	bl	800adec <rtGetMinusInfF>
 800adac:	ee10 3a10 	vmov	r3, s0
 800adb0:	4618      	mov	r0, r3
 800adb2:	f7f5 fbbb 	bl	800052c <__aeabi_f2d>
 800adb6:	4602      	mov	r2, r0
 800adb8:	460b      	mov	r3, r1
 800adba:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800adbe:	e007      	b.n	800add0 <rtGetMinusInf+0x44>
    union {
      LittleEndianIEEEDouble bitVal;
      real_T fltVal;
    } tmpVal;

    tmpVal.bitVal.words.wordH = 0xFFF00000U;
 800adc0:	4b09      	ldr	r3, [pc, #36]	; (800ade8 <rtGetMinusInf+0x5c>)
 800adc2:	607b      	str	r3, [r7, #4]
    tmpVal.bitVal.words.wordL = 0x00000000U;
 800adc4:	2300      	movs	r3, #0
 800adc6:	603b      	str	r3, [r7, #0]
    minf = tmpVal.fltVal;
 800adc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800adcc:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  return minf;
 800add0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800add4:	ec43 2b17 	vmov	d7, r2, r3
}
 800add8:	eeb0 0a47 	vmov.f32	s0, s14
 800addc:	eef0 0a67 	vmov.f32	s1, s15
 800ade0:	3718      	adds	r7, #24
 800ade2:	46bd      	mov	sp, r7
 800ade4:	bd80      	pop	{r7, pc}
 800ade6:	bf00      	nop
 800ade8:	fff00000 	.word	0xfff00000

0800adec <rtGetMinusInfF>:

real32_T rtGetMinusInfF(void)
{
 800adec:	b480      	push	{r7}
 800adee:	b083      	sub	sp, #12
 800adf0:	af00      	add	r7, sp, #0
  IEEESingle minfF;
  minfF.wordL.wordLuint = 0xFF800000U;
 800adf2:	4b06      	ldr	r3, [pc, #24]	; (800ae0c <rtGetMinusInfF+0x20>)
 800adf4:	607b      	str	r3, [r7, #4]
  return minfF.wordL.wordLreal;
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	ee07 3a90 	vmov	s15, r3
}
 800adfc:	eeb0 0a67 	vmov.f32	s0, s15
 800ae00:	370c      	adds	r7, #12
 800ae02:	46bd      	mov	sp, r7
 800ae04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae08:	4770      	bx	lr
 800ae0a:	bf00      	nop
 800ae0c:	ff800000 	.word	0xff800000

0800ae10 <rtGetNaN>:
#include <stddef.h>
#include "rt_nonfinite.h"
#define NumBitsPerChar                 8U

real_T rtGetNaN(void)
{
 800ae10:	b580      	push	{r7, lr}
 800ae12:	b086      	sub	sp, #24
 800ae14:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 800ae16:	2340      	movs	r3, #64	; 0x40
 800ae18:	60fb      	str	r3, [r7, #12]
  real_T nan = 0.0;
 800ae1a:	f04f 0200 	mov.w	r2, #0
 800ae1e:	f04f 0300 	mov.w	r3, #0
 800ae22:	e9c7 2304 	strd	r2, r3, [r7, #16]
  if (bitsPerReal == 32U) {
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	2b20      	cmp	r3, #32
 800ae2a:	d10b      	bne.n	800ae44 <rtGetNaN+0x34>
    nan = rtGetNaNF();
 800ae2c:	f000 f820 	bl	800ae70 <rtGetNaNF>
 800ae30:	ee10 3a10 	vmov	r3, s0
 800ae34:	4618      	mov	r0, r3
 800ae36:	f7f5 fb79 	bl	800052c <__aeabi_f2d>
 800ae3a:	4602      	mov	r2, r0
 800ae3c:	460b      	mov	r3, r1
 800ae3e:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800ae42:	e007      	b.n	800ae54 <rtGetNaN+0x44>
    union {
      LittleEndianIEEEDouble bitVal;
      real_T fltVal;
    } tmpVal;

    tmpVal.bitVal.words.wordH = 0xFFF80000U;
 800ae44:	4b09      	ldr	r3, [pc, #36]	; (800ae6c <rtGetNaN+0x5c>)
 800ae46:	607b      	str	r3, [r7, #4]
    tmpVal.bitVal.words.wordL = 0x00000000U;
 800ae48:	2300      	movs	r3, #0
 800ae4a:	603b      	str	r3, [r7, #0]
    nan = tmpVal.fltVal;
 800ae4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae50:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  return nan;
 800ae54:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ae58:	ec43 2b17 	vmov	d7, r2, r3
}
 800ae5c:	eeb0 0a47 	vmov.f32	s0, s14
 800ae60:	eef0 0a67 	vmov.f32	s1, s15
 800ae64:	3718      	adds	r7, #24
 800ae66:	46bd      	mov	sp, r7
 800ae68:	bd80      	pop	{r7, pc}
 800ae6a:	bf00      	nop
 800ae6c:	fff80000 	.word	0xfff80000

0800ae70 <rtGetNaNF>:

real32_T rtGetNaNF(void)
{
 800ae70:	b480      	push	{r7}
 800ae72:	b083      	sub	sp, #12
 800ae74:	af00      	add	r7, sp, #0
  IEEESingle nanF = { { 0.0F } };
 800ae76:	f04f 0300 	mov.w	r3, #0
 800ae7a:	607b      	str	r3, [r7, #4]

  nanF.wordL.wordLuint = 0xFFC00000U;
 800ae7c:	4b05      	ldr	r3, [pc, #20]	; (800ae94 <rtGetNaNF+0x24>)
 800ae7e:	607b      	str	r3, [r7, #4]
  return nanF.wordL.wordLreal;
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	ee07 3a90 	vmov	s15, r3
}
 800ae86:	eeb0 0a67 	vmov.f32	s0, s15
 800ae8a:	370c      	adds	r7, #12
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae92:	4770      	bx	lr
 800ae94:	ffc00000 	.word	0xffc00000

0800ae98 <rt_hypotd_snf>:
#include "rt_hypotd_snf.h"
#include <math.h>
#include "rt_nonfinite.h"

real_T rt_hypotd_snf(real_T u0, real_T u1)
{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b088      	sub	sp, #32
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	ed87 0b02 	vstr	d0, [r7, #8]
 800aea2:	ed87 1b00 	vstr	d1, [r7]
  real_T a;
  real_T y;
  a = fabs(u0);
 800aea6:	68bb      	ldr	r3, [r7, #8]
 800aea8:	613b      	str	r3, [r7, #16]
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800aeb0:	617b      	str	r3, [r7, #20]
  y = fabs(u1);
 800aeb2:	683b      	ldr	r3, [r7, #0]
 800aeb4:	61bb      	str	r3, [r7, #24]
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800aebc:	61fb      	str	r3, [r7, #28]
  if (a < y) {
 800aebe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800aec2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800aec6:	f7f5 fdfb 	bl	8000ac0 <__aeabi_dcmplt>
 800aeca:	4603      	mov	r3, r0
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d02d      	beq.n	800af2c <rt_hypotd_snf+0x94>
    a /= y;
 800aed0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800aed4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800aed8:	f7f5 fcaa 	bl	8000830 <__aeabi_ddiv>
 800aedc:	4602      	mov	r2, r0
 800aede:	460b      	mov	r3, r1
 800aee0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    y *= sqrt(a * a + 1.0);
 800aee4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800aee8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800aeec:	f7f5 fb76 	bl	80005dc <__aeabi_dmul>
 800aef0:	4602      	mov	r2, r0
 800aef2:	460b      	mov	r3, r1
 800aef4:	4610      	mov	r0, r2
 800aef6:	4619      	mov	r1, r3
 800aef8:	f04f 0200 	mov.w	r2, #0
 800aefc:	4b38      	ldr	r3, [pc, #224]	; (800afe0 <rt_hypotd_snf+0x148>)
 800aefe:	f7f5 f9b7 	bl	8000270 <__adddf3>
 800af02:	4602      	mov	r2, r0
 800af04:	460b      	mov	r3, r1
 800af06:	ec43 2b17 	vmov	d7, r2, r3
 800af0a:	eeb0 0a47 	vmov.f32	s0, s14
 800af0e:	eef0 0a67 	vmov.f32	s1, s15
 800af12:	f00b ffe9 	bl	8016ee8 <sqrt>
 800af16:	ec53 2b10 	vmov	r2, r3, d0
 800af1a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800af1e:	f7f5 fb5d 	bl	80005dc <__aeabi_dmul>
 800af22:	4602      	mov	r2, r0
 800af24:	460b      	mov	r3, r1
 800af26:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800af2a:	e048      	b.n	800afbe <rt_hypotd_snf+0x126>
  } else if (a > y) {
 800af2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800af30:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800af34:	f7f5 fde2 	bl	8000afc <__aeabi_dcmpgt>
 800af38:	4603      	mov	r3, r0
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d02d      	beq.n	800af9a <rt_hypotd_snf+0x102>
    y /= a;
 800af3e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800af42:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800af46:	f7f5 fc73 	bl	8000830 <__aeabi_ddiv>
 800af4a:	4602      	mov	r2, r0
 800af4c:	460b      	mov	r3, r1
 800af4e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    y = sqrt(y * y + 1.0) * a;
 800af52:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800af56:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800af5a:	f7f5 fb3f 	bl	80005dc <__aeabi_dmul>
 800af5e:	4602      	mov	r2, r0
 800af60:	460b      	mov	r3, r1
 800af62:	4610      	mov	r0, r2
 800af64:	4619      	mov	r1, r3
 800af66:	f04f 0200 	mov.w	r2, #0
 800af6a:	4b1d      	ldr	r3, [pc, #116]	; (800afe0 <rt_hypotd_snf+0x148>)
 800af6c:	f7f5 f980 	bl	8000270 <__adddf3>
 800af70:	4602      	mov	r2, r0
 800af72:	460b      	mov	r3, r1
 800af74:	ec43 2b17 	vmov	d7, r2, r3
 800af78:	eeb0 0a47 	vmov.f32	s0, s14
 800af7c:	eef0 0a67 	vmov.f32	s1, s15
 800af80:	f00b ffb2 	bl	8016ee8 <sqrt>
 800af84:	ec53 2b10 	vmov	r2, r3, d0
 800af88:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800af8c:	f7f5 fb26 	bl	80005dc <__aeabi_dmul>
 800af90:	4602      	mov	r2, r0
 800af92:	460b      	mov	r3, r1
 800af94:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800af98:	e011      	b.n	800afbe <rt_hypotd_snf+0x126>
  } else if (!rtIsNaN(y)) {
 800af9a:	ed97 0b06 	vldr	d0, [r7, #24]
 800af9e:	f000 f889 	bl	800b0b4 <rtIsNaN>
 800afa2:	4603      	mov	r3, r0
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d10a      	bne.n	800afbe <rt_hypotd_snf+0x126>
    y = a * 1.4142135623730951;
 800afa8:	a30b      	add	r3, pc, #44	; (adr r3, 800afd8 <rt_hypotd_snf+0x140>)
 800afaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afae:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800afb2:	f7f5 fb13 	bl	80005dc <__aeabi_dmul>
 800afb6:	4602      	mov	r2, r0
 800afb8:	460b      	mov	r3, r1
 800afba:	e9c7 2306 	strd	r2, r3, [r7, #24]
  }

  return y;
 800afbe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800afc2:	ec43 2b17 	vmov	d7, r2, r3
}
 800afc6:	eeb0 0a47 	vmov.f32	s0, s14
 800afca:	eef0 0a67 	vmov.f32	s1, s15
 800afce:	3720      	adds	r7, #32
 800afd0:	46bd      	mov	sp, r7
 800afd2:	bd80      	pop	{r7, pc}
 800afd4:	f3af 8000 	nop.w
 800afd8:	667f3bcd 	.word	0x667f3bcd
 800afdc:	3ff6a09e 	.word	0x3ff6a09e
 800afe0:	3ff00000 	.word	0x3ff00000

0800afe4 <rt_InitInfAndNaN>:
real_T rtNaN;
real32_T rtInfF;
real32_T rtMinusInfF;
real32_T rtNaNF;
void rt_InitInfAndNaN(size_t realSize)
{
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b082      	sub	sp, #8
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
  (void) (realSize);
  rtNaN = rtGetNaN();
 800afec:	f7ff ff10 	bl	800ae10 <rtGetNaN>
 800aff0:	eeb0 7a40 	vmov.f32	s14, s0
 800aff4:	eef0 7a60 	vmov.f32	s15, s1
 800aff8:	4b16      	ldr	r3, [pc, #88]	; (800b054 <rt_InitInfAndNaN+0x70>)
 800affa:	ed83 7b00 	vstr	d7, [r3]
  rtNaNF = rtGetNaNF();
 800affe:	f7ff ff37 	bl	800ae70 <rtGetNaNF>
 800b002:	eef0 7a40 	vmov.f32	s15, s0
 800b006:	4b14      	ldr	r3, [pc, #80]	; (800b058 <rt_InitInfAndNaN+0x74>)
 800b008:	edc3 7a00 	vstr	s15, [r3]
  rtInf = rtGetInf();
 800b00c:	f7ff fe7e 	bl	800ad0c <rtGetInf>
 800b010:	eeb0 7a40 	vmov.f32	s14, s0
 800b014:	eef0 7a60 	vmov.f32	s15, s1
 800b018:	4b10      	ldr	r3, [pc, #64]	; (800b05c <rt_InitInfAndNaN+0x78>)
 800b01a:	ed83 7b00 	vstr	d7, [r3]
  rtInfF = rtGetInfF();
 800b01e:	f7ff fea5 	bl	800ad6c <rtGetInfF>
 800b022:	eef0 7a40 	vmov.f32	s15, s0
 800b026:	4b0e      	ldr	r3, [pc, #56]	; (800b060 <rt_InitInfAndNaN+0x7c>)
 800b028:	edc3 7a00 	vstr	s15, [r3]
  rtMinusInf = rtGetMinusInf();
 800b02c:	f7ff feae 	bl	800ad8c <rtGetMinusInf>
 800b030:	eeb0 7a40 	vmov.f32	s14, s0
 800b034:	eef0 7a60 	vmov.f32	s15, s1
 800b038:	4b0a      	ldr	r3, [pc, #40]	; (800b064 <rt_InitInfAndNaN+0x80>)
 800b03a:	ed83 7b00 	vstr	d7, [r3]
  rtMinusInfF = rtGetMinusInfF();
 800b03e:	f7ff fed5 	bl	800adec <rtGetMinusInfF>
 800b042:	eef0 7a40 	vmov.f32	s15, s0
 800b046:	4b08      	ldr	r3, [pc, #32]	; (800b068 <rt_InitInfAndNaN+0x84>)
 800b048:	edc3 7a00 	vstr	s15, [r3]
}
 800b04c:	bf00      	nop
 800b04e:	3708      	adds	r7, #8
 800b050:	46bd      	mov	sp, r7
 800b052:	bd80      	pop	{r7, pc}
 800b054:	2001da48 	.word	0x2001da48
 800b058:	2001da38 	.word	0x2001da38
 800b05c:	2001da40 	.word	0x2001da40
 800b060:	2001da3c 	.word	0x2001da3c
 800b064:	2001da50 	.word	0x2001da50
 800b068:	2001da58 	.word	0x2001da58

0800b06c <rtIsInf>:

boolean_T rtIsInf(real_T value)
{
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b082      	sub	sp, #8
 800b070:	af00      	add	r7, sp, #0
 800b072:	ed87 0b00 	vstr	d0, [r7]
  return (boolean_T)((value==rtInf || value==rtMinusInf) ? 1U : 0U);
 800b076:	4b0d      	ldr	r3, [pc, #52]	; (800b0ac <rtIsInf+0x40>)
 800b078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b07c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b080:	f7f5 fd14 	bl	8000aac <__aeabi_dcmpeq>
 800b084:	4603      	mov	r3, r0
 800b086:	2b00      	cmp	r3, #0
 800b088:	d109      	bne.n	800b09e <rtIsInf+0x32>
 800b08a:	4b09      	ldr	r3, [pc, #36]	; (800b0b0 <rtIsInf+0x44>)
 800b08c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b090:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b094:	f7f5 fd0a 	bl	8000aac <__aeabi_dcmpeq>
 800b098:	4603      	mov	r3, r0
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d001      	beq.n	800b0a2 <rtIsInf+0x36>
 800b09e:	2301      	movs	r3, #1
 800b0a0:	e000      	b.n	800b0a4 <rtIsInf+0x38>
 800b0a2:	2300      	movs	r3, #0
}
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	3708      	adds	r7, #8
 800b0a8:	46bd      	mov	sp, r7
 800b0aa:	bd80      	pop	{r7, pc}
 800b0ac:	2001da40 	.word	0x2001da40
 800b0b0:	2001da50 	.word	0x2001da50

0800b0b4 <rtIsNaN>:
{
  return (boolean_T)(((value)==rtInfF || (value)==rtMinusInfF) ? 1U : 0U);
}

boolean_T rtIsNaN(real_T value)
{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b086      	sub	sp, #24
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	ed87 0b00 	vstr	d0, [r7]
  boolean_T result = (boolean_T) 0;
 800b0be:	2300      	movs	r3, #0
 800b0c0:	75fb      	strb	r3, [r7, #23]
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 800b0c2:	2340      	movs	r3, #64	; 0x40
 800b0c4:	613b      	str	r3, [r7, #16]
  if (bitsPerReal == 32U) {
 800b0c6:	693b      	ldr	r3, [r7, #16]
 800b0c8:	2b20      	cmp	r3, #32
 800b0ca:	d10b      	bne.n	800b0e4 <rtIsNaN+0x30>
    result = rtIsNaNF((real32_T)value);
 800b0cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b0d0:	f7f5 fd7c 	bl	8000bcc <__aeabi_d2f>
 800b0d4:	4603      	mov	r3, r0
 800b0d6:	ee00 3a10 	vmov	s0, r3
 800b0da:	f000 f821 	bl	800b120 <rtIsNaNF>
 800b0de:	4603      	mov	r3, r0
 800b0e0:	75fb      	strb	r3, [r7, #23]
 800b0e2:	e015      	b.n	800b110 <rtIsNaN+0x5c>
    union {
      LittleEndianIEEEDouble bitVal;
      real_T fltVal;
    } tmpVal;

    tmpVal.fltVal = value;
 800b0e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b0e8:	e9c7 2302 	strd	r2, r3, [r7, #8]
    result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) == 0x7FF00000 &&
 800b0ec:	68fa      	ldr	r2, [r7, #12]
 800b0ee:	4b0b      	ldr	r3, [pc, #44]	; (800b11c <rtIsNaN+0x68>)
 800b0f0:	4013      	ands	r3, r2
 800b0f2:	4a0a      	ldr	r2, [pc, #40]	; (800b11c <rtIsNaN+0x68>)
 800b0f4:	4293      	cmp	r3, r2
 800b0f6:	d109      	bne.n	800b10c <rtIsNaN+0x58>
                         ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
    result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) == 0x7FF00000 &&
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d102      	bne.n	800b108 <rtIsNaN+0x54>
                          (tmpVal.bitVal.words.wordL != 0) ));
 800b102:	68bb      	ldr	r3, [r7, #8]
                         ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||
 800b104:	2b00      	cmp	r3, #0
 800b106:	d001      	beq.n	800b10c <rtIsNaN+0x58>
    result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) == 0x7FF00000 &&
 800b108:	2301      	movs	r3, #1
 800b10a:	e000      	b.n	800b10e <rtIsNaN+0x5a>
 800b10c:	2300      	movs	r3, #0
 800b10e:	75fb      	strb	r3, [r7, #23]
  }

  return result;
 800b110:	7dfb      	ldrb	r3, [r7, #23]
}
 800b112:	4618      	mov	r0, r3
 800b114:	3718      	adds	r7, #24
 800b116:	46bd      	mov	sp, r7
 800b118:	bd80      	pop	{r7, pc}
 800b11a:	bf00      	nop
 800b11c:	7ff00000 	.word	0x7ff00000

0800b120 <rtIsNaNF>:

boolean_T rtIsNaNF(real32_T value)
{
 800b120:	b480      	push	{r7}
 800b122:	b085      	sub	sp, #20
 800b124:	af00      	add	r7, sp, #0
 800b126:	ed87 0a01 	vstr	s0, [r7, #4]
  IEEESingle tmp;
  tmp.wordL.wordLreal = value;
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	60fb      	str	r3, [r7, #12]
  return (boolean_T)( (tmp.wordL.wordLuint & 0x7F800000) == 0x7F800000 &&
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	f003 43ff 	and.w	r3, r3, #2139095040	; 0x7f800000
 800b134:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b138:	d106      	bne.n	800b148 <rtIsNaNF+0x28>
                     (tmp.wordL.wordLuint & 0x007FFFFF) != 0 );
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	f3c3 0316 	ubfx	r3, r3, #0, #23
  return (boolean_T)( (tmp.wordL.wordLuint & 0x7F800000) == 0x7F800000 &&
 800b140:	2b00      	cmp	r3, #0
 800b142:	d001      	beq.n	800b148 <rtIsNaNF+0x28>
 800b144:	2301      	movs	r3, #1
 800b146:	e000      	b.n	800b14a <rtIsNaNF+0x2a>
 800b148:	2300      	movs	r3, #0
 800b14a:	b2db      	uxtb	r3, r3
}
 800b14c:	4618      	mov	r0, r3
 800b14e:	3714      	adds	r7, #20
 800b150:	46bd      	mov	sp, r7
 800b152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b156:	4770      	bx	lr

0800b158 <svd_u3DvUgOe>:
#include "xrotg_XzIjz1eG.h"
#include "xrot_i7f01JoJ.h"
#include "xswap_JoAqPjUv.h"

void svd_u3DvUgOe(const real_T A[9], real_T U[9], real_T s[3], real_T V[9])
{
 800b158:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b15c:	ed2d 8b02 	vpush	{d8}
 800b160:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800b164:	af02      	add	r7, sp, #8
 800b166:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 800b16a:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 800b16e:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 800b172:	f507 7280 	add.w	r2, r7, #256	; 0x100
 800b176:	6013      	str	r3, [r2, #0]
  int32_T kase;
  int32_T m;
  int32_T qjj;
  int32_T qq;
  boolean_T apply_transform;
  e[0] = 0.0;
 800b178:	f04f 0200 	mov.w	r2, #0
 800b17c:	f04f 0300 	mov.w	r3, #0
 800b180:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
  work[0] = 0.0;
 800b184:	f04f 0200 	mov.w	r2, #0
 800b188:	f04f 0300 	mov.w	r3, #0
 800b18c:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
  e[1] = 0.0;
 800b190:	f04f 0200 	mov.w	r2, #0
 800b194:	f04f 0300 	mov.w	r3, #0
 800b198:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
  work[1] = 0.0;
 800b19c:	f04f 0200 	mov.w	r2, #0
 800b1a0:	f04f 0300 	mov.w	r3, #0
 800b1a4:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
  e[2] = 0.0;
 800b1a8:	f04f 0200 	mov.w	r2, #0
 800b1ac:	f04f 0300 	mov.w	r3, #0
 800b1b0:	e9c7 2356 	strd	r2, r3, [r7, #344]	; 0x158
  work[2] = 0.0;
 800b1b4:	f04f 0200 	mov.w	r2, #0
 800b1b8:	f04f 0300 	mov.w	r3, #0
 800b1bc:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
  for (qq = 0; qq < 9; qq++) {
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800b1c6:	e02e      	b.n	800b226 <svd_u3DvUgOe+0xce>
    b_A[qq] = A[qq];
 800b1c8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800b1cc:	00da      	lsls	r2, r3, #3
 800b1ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b1d2:	4413      	add	r3, r2
 800b1d4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b1d8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800b1dc:	00db      	lsls	r3, r3, #3
 800b1de:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800b1e2:	4413      	add	r3, r2
 800b1e4:	3b88      	subs	r3, #136	; 0x88
 800b1e6:	e9c3 0100 	strd	r0, r1, [r3]
    U[qq] = 0.0;
 800b1ea:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800b1ee:	00da      	lsls	r2, r3, #3
 800b1f0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b1f4:	1899      	adds	r1, r3, r2
 800b1f6:	f04f 0200 	mov.w	r2, #0
 800b1fa:	f04f 0300 	mov.w	r3, #0
 800b1fe:	e9c1 2300 	strd	r2, r3, [r1]
    V[qq] = 0.0;
 800b202:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800b206:	00da      	lsls	r2, r3, #3
 800b208:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	1899      	adds	r1, r3, r2
 800b210:	f04f 0200 	mov.w	r2, #0
 800b214:	f04f 0300 	mov.w	r3, #0
 800b218:	e9c1 2300 	strd	r2, r3, [r1]
  for (qq = 0; qq < 9; qq++) {
 800b21c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800b220:	3301      	adds	r3, #1
 800b222:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800b226:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800b22a:	2b08      	cmp	r3, #8
 800b22c:	ddcc      	ble.n	800b1c8 <svd_u3DvUgOe+0x70>
  }

  qq = 0;
 800b22e:	2300      	movs	r3, #0
 800b230:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  apply_transform = false;
 800b234:	2300      	movs	r3, #0
 800b236:	f887 31eb 	strb.w	r3, [r7, #491]	; 0x1eb
  nrm = xnrm2_xDOlDEtw(3, b_A, 1);
 800b23a:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800b23e:	2201      	movs	r2, #1
 800b240:	4619      	mov	r1, r3
 800b242:	2003      	movs	r0, #3
 800b244:	f002 fbbc 	bl	800d9c0 <xnrm2_xDOlDEtw>
 800b248:	ed87 0b72 	vstr	d0, [r7, #456]	; 0x1c8
  if (nrm > 0.0) {
 800b24c:	f04f 0200 	mov.w	r2, #0
 800b250:	f04f 0300 	mov.w	r3, #0
 800b254:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	; 0x1c8
 800b258:	f7f5 fc50 	bl	8000afc <__aeabi_dcmpgt>
 800b25c:	4603      	mov	r3, r0
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d07b      	beq.n	800b35a <svd_u3DvUgOe+0x202>
    apply_transform = true;
 800b262:	2301      	movs	r3, #1
 800b264:	f887 31eb 	strb.w	r3, [r7, #491]	; 0x1eb
    if (b_A[0] < 0.0) {
 800b268:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 800b26c:	f04f 0200 	mov.w	r2, #0
 800b270:	f04f 0300 	mov.w	r3, #0
 800b274:	f7f5 fc24 	bl	8000ac0 <__aeabi_dcmplt>
 800b278:	4603      	mov	r3, r0
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d008      	beq.n	800b290 <svd_u3DvUgOe+0x138>
      b_s[0] = -nrm;
 800b27e:	f8d7 41c8 	ldr.w	r4, [r7, #456]	; 0x1c8
 800b282:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800b286:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800b28a:	e9c7 4558 	strd	r4, r5, [r7, #352]	; 0x160
 800b28e:	e003      	b.n	800b298 <svd_u3DvUgOe+0x140>
    } else {
      b_s[0] = nrm;
 800b290:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 800b294:	e9c7 2358 	strd	r2, r3, [r7, #352]	; 0x160
    }

    if (fabs(b_s[0]) >= 1.0020841800044864E-292) {
 800b298:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 800b29c:	4690      	mov	r8, r2
 800b29e:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 800b2a2:	f04f 0200 	mov.w	r2, #0
 800b2a6:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800b2aa:	4640      	mov	r0, r8
 800b2ac:	4649      	mov	r1, r9
 800b2ae:	f7f5 fc1b 	bl	8000ae8 <__aeabi_dcmpge>
 800b2b2:	4603      	mov	r3, r0
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d016      	beq.n	800b2e6 <svd_u3DvUgOe+0x18e>
      xscal_59GtRAwv(3, 1.0 / b_s[0], b_A, 1);
 800b2b8:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 800b2bc:	f04f 0000 	mov.w	r0, #0
 800b2c0:	49c1      	ldr	r1, [pc, #772]	; (800b5c8 <svd_u3DvUgOe+0x470>)
 800b2c2:	f7f5 fab5 	bl	8000830 <__aeabi_ddiv>
 800b2c6:	4602      	mov	r2, r0
 800b2c8:	460b      	mov	r3, r1
 800b2ca:	ec43 2b17 	vmov	d7, r2, r3
 800b2ce:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800b2d2:	2201      	movs	r2, #1
 800b2d4:	4619      	mov	r1, r3
 800b2d6:	eeb0 0a47 	vmov.f32	s0, s14
 800b2da:	eef0 0a67 	vmov.f32	s1, s15
 800b2de:	2003      	movs	r0, #3
 800b2e0:	f002 fe36 	bl	800df50 <xscal_59GtRAwv>
 800b2e4:	e026      	b.n	800b334 <svd_u3DvUgOe+0x1dc>
    } else {
      for (qjj = 0; qjj < 3; qjj++) {
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800b2ec:	e01e      	b.n	800b32c <svd_u3DvUgOe+0x1d4>
        b_A[qjj] /= b_s[0];
 800b2ee:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800b2f2:	00db      	lsls	r3, r3, #3
 800b2f4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800b2f8:	4413      	add	r3, r2
 800b2fa:	3b88      	subs	r3, #136	; 0x88
 800b2fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b300:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 800b304:	f7f5 fa94 	bl	8000830 <__aeabi_ddiv>
 800b308:	4602      	mov	r2, r0
 800b30a:	460b      	mov	r3, r1
 800b30c:	4610      	mov	r0, r2
 800b30e:	4619      	mov	r1, r3
 800b310:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800b314:	00db      	lsls	r3, r3, #3
 800b316:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800b31a:	4413      	add	r3, r2
 800b31c:	3b88      	subs	r3, #136	; 0x88
 800b31e:	e9c3 0100 	strd	r0, r1, [r3]
      for (qjj = 0; qjj < 3; qjj++) {
 800b322:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800b326:	3301      	adds	r3, #1
 800b328:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800b32c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800b330:	2b02      	cmp	r3, #2
 800b332:	dddc      	ble.n	800b2ee <svd_u3DvUgOe+0x196>
      }
    }

    b_A[0]++;
 800b334:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 800b338:	f04f 0200 	mov.w	r2, #0
 800b33c:	4ba2      	ldr	r3, [pc, #648]	; (800b5c8 <svd_u3DvUgOe+0x470>)
 800b33e:	f7f4 ff97 	bl	8000270 <__adddf3>
 800b342:	4602      	mov	r2, r0
 800b344:	460b      	mov	r3, r1
 800b346:	e9c7 235e 	strd	r2, r3, [r7, #376]	; 0x178
    b_s[0] = -b_s[0];
 800b34a:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 800b34e:	4692      	mov	sl, r2
 800b350:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 800b354:	e9c7 ab58 	strd	sl, fp, [r7, #352]	; 0x160
 800b358:	e005      	b.n	800b366 <svd_u3DvUgOe+0x20e>
  } else {
    b_s[0] = 0.0;
 800b35a:	f04f 0200 	mov.w	r2, #0
 800b35e:	f04f 0300 	mov.w	r3, #0
 800b362:	e9c7 2358 	strd	r2, r3, [r7, #352]	; 0x160
  }

  for (d = 1; d + 1 < 4; d++) {
 800b366:	2301      	movs	r3, #1
 800b368:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 800b36c:	e047      	b.n	800b3fe <svd_u3DvUgOe+0x2a6>
    qjj = 3 * d;
 800b36e:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 800b372:	4613      	mov	r3, r2
 800b374:	005b      	lsls	r3, r3, #1
 800b376:	4413      	add	r3, r2
 800b378:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    if (apply_transform) {
 800b37c:	f897 31eb 	ldrb.w	r3, [r7, #491]	; 0x1eb
 800b380:	2b00      	cmp	r3, #0
 800b382:	d025      	beq.n	800b3d0 <svd_u3DvUgOe+0x278>
      xaxpy_guu0hJif(3, -(xdotc_mznw4aLl(3, b_A, 1, b_A, qjj + 1) / b_A[0]), 1,
 800b384:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800b388:	3301      	adds	r3, #1
 800b38a:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 800b38e:	f507 71bc 	add.w	r1, r7, #376	; 0x178
 800b392:	9300      	str	r3, [sp, #0]
 800b394:	4613      	mov	r3, r2
 800b396:	2201      	movs	r2, #1
 800b398:	2003      	movs	r0, #3
 800b39a:	f001 fdf8 	bl	800cf8e <xdotc_mznw4aLl>
 800b39e:	ec51 0b10 	vmov	r0, r1, d0
 800b3a2:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 800b3a6:	f7f5 fa43 	bl	8000830 <__aeabi_ddiv>
 800b3aa:	4602      	mov	r2, r0
 800b3ac:	460b      	mov	r3, r1
 800b3ae:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 800b3b2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800b3b6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b3ba:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800b3be:	3301      	adds	r3, #1
 800b3c0:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 800b3c4:	2101      	movs	r1, #1
 800b3c6:	ed97 0b3e 	vldr	d0, [r7, #248]	; 0xf8
 800b3ca:	2003      	movs	r0, #3
 800b3cc:	f001 fd8b 	bl	800cee6 <xaxpy_guu0hJif>
                     b_A, qjj + 1);
    }

    e[d] = b_A[qjj];
 800b3d0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800b3d4:	00db      	lsls	r3, r3, #3
 800b3d6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800b3da:	4413      	add	r3, r2
 800b3dc:	3b88      	subs	r3, #136	; 0x88
 800b3de:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b3e2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800b3e6:	00db      	lsls	r3, r3, #3
 800b3e8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800b3ec:	4413      	add	r3, r2
 800b3ee:	3bb8      	subs	r3, #184	; 0xb8
 800b3f0:	e9c3 0100 	strd	r0, r1, [r3]
  for (d = 1; d + 1 < 4; d++) {
 800b3f4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800b3f8:	3301      	adds	r3, #1
 800b3fa:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 800b3fe:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800b402:	2b02      	cmp	r3, #2
 800b404:	ddb3      	ble.n	800b36e <svd_u3DvUgOe+0x216>
  }

  while (qq + 1 < 4) {
 800b406:	e015      	b.n	800b434 <svd_u3DvUgOe+0x2dc>
    U[qq] = b_A[qq];
 800b408:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800b40c:	00da      	lsls	r2, r3, #3
 800b40e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b412:	1899      	adds	r1, r3, r2
 800b414:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800b418:	00db      	lsls	r3, r3, #3
 800b41a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800b41e:	4413      	add	r3, r2
 800b420:	3b88      	subs	r3, #136	; 0x88
 800b422:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b426:	e9c1 2300 	strd	r2, r3, [r1]
    qq++;
 800b42a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800b42e:	3301      	adds	r3, #1
 800b430:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  while (qq + 1 < 4) {
 800b434:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800b438:	2b02      	cmp	r3, #2
 800b43a:	dde5      	ble.n	800b408 <svd_u3DvUgOe+0x2b0>
  }

  nrm = xnrm2_Rlk0oxWw(2, e, 2);
 800b43c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b440:	2202      	movs	r2, #2
 800b442:	4619      	mov	r1, r3
 800b444:	2002      	movs	r0, #2
 800b446:	f002 f95f 	bl	800d708 <xnrm2_Rlk0oxWw>
 800b44a:	ed87 0b72 	vstr	d0, [r7, #456]	; 0x1c8
  if (nrm == 0.0) {
 800b44e:	f04f 0200 	mov.w	r2, #0
 800b452:	f04f 0300 	mov.w	r3, #0
 800b456:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	; 0x1c8
 800b45a:	f7f5 fb27 	bl	8000aac <__aeabi_dcmpeq>
 800b45e:	4603      	mov	r3, r0
 800b460:	2b00      	cmp	r3, #0
 800b462:	d006      	beq.n	800b472 <svd_u3DvUgOe+0x31a>
    e[0] = 0.0;
 800b464:	f04f 0200 	mov.w	r2, #0
 800b468:	f04f 0300 	mov.w	r3, #0
 800b46c:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
 800b470:	e10d      	b.n	800b68e <svd_u3DvUgOe+0x536>
  } else {
    if (e[1] < 0.0) {
 800b472:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 800b476:	f04f 0200 	mov.w	r2, #0
 800b47a:	f04f 0300 	mov.w	r3, #0
 800b47e:	f7f5 fb1f 	bl	8000ac0 <__aeabi_dcmplt>
 800b482:	4603      	mov	r3, r0
 800b484:	2b00      	cmp	r3, #0
 800b486:	d00e      	beq.n	800b4a6 <svd_u3DvUgOe+0x34e>
      e[0] = -nrm;
 800b488:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800b48c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b490:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800b494:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800b498:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b49c:	ed97 7b3c 	vldr	d7, [r7, #240]	; 0xf0
 800b4a0:	ed87 7b52 	vstr	d7, [r7, #328]	; 0x148
 800b4a4:	e003      	b.n	800b4ae <svd_u3DvUgOe+0x356>
    } else {
      e[0] = nrm;
 800b4a6:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 800b4aa:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
    }

    nrm = e[0];
 800b4ae:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800b4b2:	e9c7 2372 	strd	r2, r3, [r7, #456]	; 0x1c8
    if (fabs(e[0]) >= 1.0020841800044864E-292) {
 800b4b6:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800b4ba:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 800b4be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b4c2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b4c6:	f04f 0200 	mov.w	r2, #0
 800b4ca:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800b4ce:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 800b4d2:	f7f5 fb09 	bl	8000ae8 <__aeabi_dcmpge>
 800b4d6:	4603      	mov	r3, r0
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d016      	beq.n	800b50a <svd_u3DvUgOe+0x3b2>
      xscal_PLmmUlD2(2, 1.0 / e[0], e, 2);
 800b4dc:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800b4e0:	f04f 0000 	mov.w	r0, #0
 800b4e4:	4938      	ldr	r1, [pc, #224]	; (800b5c8 <svd_u3DvUgOe+0x470>)
 800b4e6:	f7f5 f9a3 	bl	8000830 <__aeabi_ddiv>
 800b4ea:	4602      	mov	r2, r0
 800b4ec:	460b      	mov	r3, r1
 800b4ee:	ec43 2b17 	vmov	d7, r2, r3
 800b4f2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b4f6:	2202      	movs	r2, #2
 800b4f8:	4619      	mov	r1, r3
 800b4fa:	eeb0 0a47 	vmov.f32	s0, s14
 800b4fe:	eef0 0a67 	vmov.f32	s1, s15
 800b502:	2002      	movs	r0, #2
 800b504:	f002 fd58 	bl	800dfb8 <xscal_PLmmUlD2>
 800b508:	e026      	b.n	800b558 <svd_u3DvUgOe+0x400>
    } else {
      for (qq = 1; qq < 3; qq++) {
 800b50a:	2301      	movs	r3, #1
 800b50c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800b510:	e01e      	b.n	800b550 <svd_u3DvUgOe+0x3f8>
        e[qq] /= nrm;
 800b512:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800b516:	00db      	lsls	r3, r3, #3
 800b518:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800b51c:	4413      	add	r3, r2
 800b51e:	3bb8      	subs	r3, #184	; 0xb8
 800b520:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b524:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 800b528:	f7f5 f982 	bl	8000830 <__aeabi_ddiv>
 800b52c:	4602      	mov	r2, r0
 800b52e:	460b      	mov	r3, r1
 800b530:	4610      	mov	r0, r2
 800b532:	4619      	mov	r1, r3
 800b534:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800b538:	00db      	lsls	r3, r3, #3
 800b53a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800b53e:	4413      	add	r3, r2
 800b540:	3bb8      	subs	r3, #184	; 0xb8
 800b542:	e9c3 0100 	strd	r0, r1, [r3]
      for (qq = 1; qq < 3; qq++) {
 800b546:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800b54a:	3301      	adds	r3, #1
 800b54c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800b550:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800b554:	2b02      	cmp	r3, #2
 800b556:	dddc      	ble.n	800b512 <svd_u3DvUgOe+0x3ba>
      }
    }

    e[1]++;
 800b558:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 800b55c:	f04f 0200 	mov.w	r2, #0
 800b560:	4b19      	ldr	r3, [pc, #100]	; (800b5c8 <svd_u3DvUgOe+0x470>)
 800b562:	f7f4 fe85 	bl	8000270 <__adddf3>
 800b566:	4602      	mov	r2, r0
 800b568:	460b      	mov	r3, r1
 800b56a:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
    e[0] = -e[0];
 800b56e:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800b572:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 800b576:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800b57a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b57e:	ed97 7b38 	vldr	d7, [r7, #224]	; 0xe0
 800b582:	ed87 7b52 	vstr	d7, [r7, #328]	; 0x148
    for (qq = 2; qq < 4; qq++) {
 800b586:	2302      	movs	r3, #2
 800b588:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800b58c:	e013      	b.n	800b5b6 <svd_u3DvUgOe+0x45e>
      work[qq - 1] = 0.0;
 800b58e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800b592:	3b01      	subs	r3, #1
 800b594:	00db      	lsls	r3, r3, #3
 800b596:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800b59a:	4413      	add	r3, r2
 800b59c:	f1a3 01d0 	sub.w	r1, r3, #208	; 0xd0
 800b5a0:	f04f 0200 	mov.w	r2, #0
 800b5a4:	f04f 0300 	mov.w	r3, #0
 800b5a8:	e9c1 2300 	strd	r2, r3, [r1]
    for (qq = 2; qq < 4; qq++) {
 800b5ac:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800b5b0:	3301      	adds	r3, #1
 800b5b2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800b5b6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800b5ba:	2b03      	cmp	r3, #3
 800b5bc:	dde7      	ble.n	800b58e <svd_u3DvUgOe+0x436>
    }

    for (qq = 1; qq + 1 < 4; qq++) {
 800b5be:	2301      	movs	r3, #1
 800b5c0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800b5c4:	e025      	b.n	800b612 <svd_u3DvUgOe+0x4ba>
 800b5c6:	bf00      	nop
 800b5c8:	3ff00000 	.word	0x3ff00000
      xaxpy_OQ28XA21(2, e[qq], b_A, 3 * qq + 2, work, 2);
 800b5cc:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800b5d0:	00db      	lsls	r3, r3, #3
 800b5d2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800b5d6:	4413      	add	r3, r2
 800b5d8:	3bb8      	subs	r3, #184	; 0xb8
 800b5da:	ed93 7b00 	vldr	d7, [r3]
 800b5de:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 800b5e2:	4613      	mov	r3, r2
 800b5e4:	005b      	lsls	r3, r3, #1
 800b5e6:	4413      	add	r3, r2
 800b5e8:	1c98      	adds	r0, r3, #2
 800b5ea:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b5ee:	f507 71bc 	add.w	r1, r7, #376	; 0x178
 800b5f2:	2302      	movs	r3, #2
 800b5f4:	9300      	str	r3, [sp, #0]
 800b5f6:	4613      	mov	r3, r2
 800b5f8:	4602      	mov	r2, r0
 800b5fa:	eeb0 0a47 	vmov.f32	s0, s14
 800b5fe:	eef0 0a67 	vmov.f32	s1, s15
 800b602:	2002      	movs	r0, #2
 800b604:	f001 fbc7 	bl	800cd96 <xaxpy_OQ28XA21>
    for (qq = 1; qq + 1 < 4; qq++) {
 800b608:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800b60c:	3301      	adds	r3, #1
 800b60e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800b612:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800b616:	2b02      	cmp	r3, #2
 800b618:	ddd8      	ble.n	800b5cc <svd_u3DvUgOe+0x474>
    }

    for (qq = 1; qq + 1 < 4; qq++) {
 800b61a:	2301      	movs	r3, #1
 800b61c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800b620:	e031      	b.n	800b686 <svd_u3DvUgOe+0x52e>
      xaxpy_Wxch84Fl(2, -e[qq] / e[1], work, 2, b_A, 3 * qq + 2);
 800b622:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800b626:	00db      	lsls	r3, r3, #3
 800b628:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800b62c:	4413      	add	r3, r2
 800b62e:	3bb8      	subs	r3, #184	; 0xb8
 800b630:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b634:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 800b638:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800b63c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b640:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 800b644:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800b648:	f7f5 f8f2 	bl	8000830 <__aeabi_ddiv>
 800b64c:	4602      	mov	r2, r0
 800b64e:	460b      	mov	r3, r1
 800b650:	ec43 2b17 	vmov	d7, r2, r3
 800b654:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 800b658:	4613      	mov	r3, r2
 800b65a:	005b      	lsls	r3, r3, #1
 800b65c:	4413      	add	r3, r2
 800b65e:	3302      	adds	r3, #2
 800b660:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 800b664:	f507 7198 	add.w	r1, r7, #304	; 0x130
 800b668:	9300      	str	r3, [sp, #0]
 800b66a:	4613      	mov	r3, r2
 800b66c:	2202      	movs	r2, #2
 800b66e:	eeb0 0a47 	vmov.f32	s0, s14
 800b672:	eef0 0a67 	vmov.f32	s1, s15
 800b676:	2002      	movs	r0, #2
 800b678:	f001 fbe1 	bl	800ce3e <xaxpy_Wxch84Fl>
    for (qq = 1; qq + 1 < 4; qq++) {
 800b67c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800b680:	3301      	adds	r3, #1
 800b682:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800b686:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800b68a:	2b02      	cmp	r3, #2
 800b68c:	ddc9      	ble.n	800b622 <svd_u3DvUgOe+0x4ca>
    }
  }

  for (qq = 1; qq + 1 < 4; qq++) {
 800b68e:	2301      	movs	r3, #1
 800b690:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800b694:	e016      	b.n	800b6c4 <svd_u3DvUgOe+0x56c>
    V[qq] = e[qq];
 800b696:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800b69a:	00da      	lsls	r2, r3, #3
 800b69c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	1899      	adds	r1, r3, r2
 800b6a4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800b6a8:	00db      	lsls	r3, r3, #3
 800b6aa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800b6ae:	4413      	add	r3, r2
 800b6b0:	3bb8      	subs	r3, #184	; 0xb8
 800b6b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6b6:	e9c1 2300 	strd	r2, r3, [r1]
  for (qq = 1; qq + 1 < 4; qq++) {
 800b6ba:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800b6be:	3301      	adds	r3, #1
 800b6c0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800b6c4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800b6c8:	2b02      	cmp	r3, #2
 800b6ca:	dde4      	ble.n	800b696 <svd_u3DvUgOe+0x53e>
  }

  apply_transform = false;
 800b6cc:	2300      	movs	r3, #0
 800b6ce:	f887 31eb 	strb.w	r3, [r7, #491]	; 0x1eb
  nrm = xnrm2_xDOlDEtw(2, b_A, 5);
 800b6d2:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800b6d6:	2205      	movs	r2, #5
 800b6d8:	4619      	mov	r1, r3
 800b6da:	2002      	movs	r0, #2
 800b6dc:	f002 f970 	bl	800d9c0 <xnrm2_xDOlDEtw>
 800b6e0:	ed87 0b72 	vstr	d0, [r7, #456]	; 0x1c8
  if (nrm > 0.0) {
 800b6e4:	f04f 0200 	mov.w	r2, #0
 800b6e8:	f04f 0300 	mov.w	r3, #0
 800b6ec:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	; 0x1c8
 800b6f0:	f7f5 fa04 	bl	8000afc <__aeabi_dcmpgt>
 800b6f4:	4603      	mov	r3, r0
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	f000 808a 	beq.w	800b810 <svd_u3DvUgOe+0x6b8>
    apply_transform = true;
 800b6fc:	2301      	movs	r3, #1
 800b6fe:	f887 31eb 	strb.w	r3, [r7, #491]	; 0x1eb
    if (b_A[4] < 0.0) {
 800b702:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800b706:	f04f 0200 	mov.w	r2, #0
 800b70a:	f04f 0300 	mov.w	r3, #0
 800b70e:	f7f5 f9d7 	bl	8000ac0 <__aeabi_dcmplt>
 800b712:	4603      	mov	r3, r0
 800b714:	2b00      	cmp	r3, #0
 800b716:	d00e      	beq.n	800b736 <svd_u3DvUgOe+0x5de>
      b_s[1] = -nrm;
 800b718:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800b71c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b720:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800b724:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800b728:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b72c:	ed97 7b34 	vldr	d7, [r7, #208]	; 0xd0
 800b730:	ed87 7b5a 	vstr	d7, [r7, #360]	; 0x168
 800b734:	e003      	b.n	800b73e <svd_u3DvUgOe+0x5e6>
    } else {
      b_s[1] = nrm;
 800b736:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 800b73a:	e9c7 235a 	strd	r2, r3, [r7, #360]	; 0x168
    }

    if (fabs(b_s[1]) >= 1.0020841800044864E-292) {
 800b73e:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 800b742:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 800b746:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b74a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b74e:	f04f 0200 	mov.w	r2, #0
 800b752:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800b756:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b75a:	f7f5 f9c5 	bl	8000ae8 <__aeabi_dcmpge>
 800b75e:	4603      	mov	r3, r0
 800b760:	2b00      	cmp	r3, #0
 800b762:	d016      	beq.n	800b792 <svd_u3DvUgOe+0x63a>
      xscal_59GtRAwv(2, 1.0 / b_s[1], b_A, 5);
 800b764:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 800b768:	f04f 0000 	mov.w	r0, #0
 800b76c:	49d6      	ldr	r1, [pc, #856]	; (800bac8 <svd_u3DvUgOe+0x970>)
 800b76e:	f7f5 f85f 	bl	8000830 <__aeabi_ddiv>
 800b772:	4602      	mov	r2, r0
 800b774:	460b      	mov	r3, r1
 800b776:	ec43 2b17 	vmov	d7, r2, r3
 800b77a:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800b77e:	2205      	movs	r2, #5
 800b780:	4619      	mov	r1, r3
 800b782:	eeb0 0a47 	vmov.f32	s0, s14
 800b786:	eef0 0a67 	vmov.f32	s1, s15
 800b78a:	2002      	movs	r0, #2
 800b78c:	f002 fbe0 	bl	800df50 <xscal_59GtRAwv>
 800b790:	e026      	b.n	800b7e0 <svd_u3DvUgOe+0x688>
    } else {
      for (qjj = 4; qjj < 6; qjj++) {
 800b792:	2304      	movs	r3, #4
 800b794:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800b798:	e01e      	b.n	800b7d8 <svd_u3DvUgOe+0x680>
        b_A[qjj] /= b_s[1];
 800b79a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800b79e:	00db      	lsls	r3, r3, #3
 800b7a0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800b7a4:	4413      	add	r3, r2
 800b7a6:	3b88      	subs	r3, #136	; 0x88
 800b7a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b7ac:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 800b7b0:	f7f5 f83e 	bl	8000830 <__aeabi_ddiv>
 800b7b4:	4602      	mov	r2, r0
 800b7b6:	460b      	mov	r3, r1
 800b7b8:	4610      	mov	r0, r2
 800b7ba:	4619      	mov	r1, r3
 800b7bc:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800b7c0:	00db      	lsls	r3, r3, #3
 800b7c2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800b7c6:	4413      	add	r3, r2
 800b7c8:	3b88      	subs	r3, #136	; 0x88
 800b7ca:	e9c3 0100 	strd	r0, r1, [r3]
      for (qjj = 4; qjj < 6; qjj++) {
 800b7ce:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800b7d2:	3301      	adds	r3, #1
 800b7d4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800b7d8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800b7dc:	2b05      	cmp	r3, #5
 800b7de:	dddc      	ble.n	800b79a <svd_u3DvUgOe+0x642>
      }
    }

    b_A[4]++;
 800b7e0:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800b7e4:	f04f 0200 	mov.w	r2, #0
 800b7e8:	4bb7      	ldr	r3, [pc, #732]	; (800bac8 <svd_u3DvUgOe+0x970>)
 800b7ea:	f7f4 fd41 	bl	8000270 <__adddf3>
 800b7ee:	4602      	mov	r2, r0
 800b7f0:	460b      	mov	r3, r1
 800b7f2:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
    b_s[1] = -b_s[1];
 800b7f6:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 800b7fa:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 800b7fe:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800b802:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b806:	ed97 7b30 	vldr	d7, [r7, #192]	; 0xc0
 800b80a:	ed87 7b5a 	vstr	d7, [r7, #360]	; 0x168
 800b80e:	e005      	b.n	800b81c <svd_u3DvUgOe+0x6c4>
  } else {
    b_s[1] = 0.0;
 800b810:	f04f 0200 	mov.w	r2, #0
 800b814:	f04f 0300 	mov.w	r3, #0
 800b818:	e9c7 235a 	strd	r2, r3, [r7, #360]	; 0x168
  }

  for (d = 2; d + 1 < 4; d++) {
 800b81c:	2302      	movs	r3, #2
 800b81e:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 800b822:	e048      	b.n	800b8b6 <svd_u3DvUgOe+0x75e>
    qjj = 3 * d + 1;
 800b824:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 800b828:	4613      	mov	r3, r2
 800b82a:	005b      	lsls	r3, r3, #1
 800b82c:	4413      	add	r3, r2
 800b82e:	3301      	adds	r3, #1
 800b830:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    if (apply_transform) {
 800b834:	f897 31eb 	ldrb.w	r3, [r7, #491]	; 0x1eb
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d025      	beq.n	800b888 <svd_u3DvUgOe+0x730>
      xaxpy_guu0hJif(2, -(xdotc_mznw4aLl(2, b_A, 5, b_A, qjj + 1) / b_A[4]), 5,
 800b83c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800b840:	3301      	adds	r3, #1
 800b842:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 800b846:	f507 71bc 	add.w	r1, r7, #376	; 0x178
 800b84a:	9300      	str	r3, [sp, #0]
 800b84c:	4613      	mov	r3, r2
 800b84e:	2205      	movs	r2, #5
 800b850:	2002      	movs	r0, #2
 800b852:	f001 fb9c 	bl	800cf8e <xdotc_mznw4aLl>
 800b856:	ec51 0b10 	vmov	r0, r1, d0
 800b85a:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 800b85e:	f7f4 ffe7 	bl	8000830 <__aeabi_ddiv>
 800b862:	4602      	mov	r2, r0
 800b864:	460b      	mov	r3, r1
 800b866:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 800b86a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800b86e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b872:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800b876:	3301      	adds	r3, #1
 800b878:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 800b87c:	2105      	movs	r1, #5
 800b87e:	ed97 0b2e 	vldr	d0, [r7, #184]	; 0xb8
 800b882:	2002      	movs	r0, #2
 800b884:	f001 fb2f 	bl	800cee6 <xaxpy_guu0hJif>
                     b_A, qjj + 1);
    }

    e[d] = b_A[qjj];
 800b888:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800b88c:	00db      	lsls	r3, r3, #3
 800b88e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800b892:	4413      	add	r3, r2
 800b894:	3b88      	subs	r3, #136	; 0x88
 800b896:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b89a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800b89e:	00db      	lsls	r3, r3, #3
 800b8a0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800b8a4:	4413      	add	r3, r2
 800b8a6:	3bb8      	subs	r3, #184	; 0xb8
 800b8a8:	e9c3 0100 	strd	r0, r1, [r3]
  for (d = 2; d + 1 < 4; d++) {
 800b8ac:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800b8b0:	3301      	adds	r3, #1
 800b8b2:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 800b8b6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800b8ba:	2b02      	cmp	r3, #2
 800b8bc:	ddb2      	ble.n	800b824 <svd_u3DvUgOe+0x6cc>
  }

  for (qq = 1; qq + 1 < 4; qq++) {
 800b8be:	2301      	movs	r3, #1
 800b8c0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800b8c4:	e017      	b.n	800b8f6 <svd_u3DvUgOe+0x79e>
    U[qq + 3] = b_A[qq + 3];
 800b8c6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800b8ca:	1cd8      	adds	r0, r3, #3
 800b8cc:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800b8d0:	3303      	adds	r3, #3
 800b8d2:	00da      	lsls	r2, r3, #3
 800b8d4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b8d8:	1899      	adds	r1, r3, r2
 800b8da:	00c3      	lsls	r3, r0, #3
 800b8dc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800b8e0:	4413      	add	r3, r2
 800b8e2:	3b88      	subs	r3, #136	; 0x88
 800b8e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8e8:	e9c1 2300 	strd	r2, r3, [r1]
  for (qq = 1; qq + 1 < 4; qq++) {
 800b8ec:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800b8f0:	3301      	adds	r3, #1
 800b8f2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800b8f6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800b8fa:	2b02      	cmp	r3, #2
 800b8fc:	dde3      	ble.n	800b8c6 <svd_u3DvUgOe+0x76e>
  }

  m = 1;
 800b8fe:	2301      	movs	r3, #1
 800b900:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  b_s[2] = b_A[8];
 800b904:	e9d7 236e 	ldrd	r2, r3, [r7, #440]	; 0x1b8
 800b908:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170
  U[6] = 0.0;
 800b90c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b910:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b914:	f04f 0200 	mov.w	r2, #0
 800b918:	f04f 0300 	mov.w	r3, #0
 800b91c:	e9c1 2300 	strd	r2, r3, [r1]
  U[7] = 0.0;
 800b920:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b924:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b928:	f04f 0200 	mov.w	r2, #0
 800b92c:	f04f 0300 	mov.w	r3, #0
 800b930:	e9c1 2300 	strd	r2, r3, [r1]
  U[8] = 1.0;
 800b934:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b938:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800b93c:	f04f 0200 	mov.w	r2, #0
 800b940:	4b61      	ldr	r3, [pc, #388]	; (800bac8 <svd_u3DvUgOe+0x970>)
 800b942:	e9c1 2300 	strd	r2, r3, [r1]
  for (d = 1; d >= 0; d--) {
 800b946:	2301      	movs	r3, #1
 800b948:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 800b94c:	e100      	b.n	800bb50 <svd_u3DvUgOe+0x9f8>
    qq = 3 * d + d;
 800b94e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800b952:	009b      	lsls	r3, r3, #2
 800b954:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    if (b_s[d] != 0.0) {
 800b958:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800b95c:	00db      	lsls	r3, r3, #3
 800b95e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800b962:	4413      	add	r3, r2
 800b964:	3ba0      	subs	r3, #160	; 0xa0
 800b966:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b96a:	f04f 0200 	mov.w	r2, #0
 800b96e:	f04f 0300 	mov.w	r3, #0
 800b972:	f7f5 f89b 	bl	8000aac <__aeabi_dcmpeq>
 800b976:	4603      	mov	r3, r0
 800b978:	2b00      	cmp	r3, #0
 800b97a:	f040 80a7 	bne.w	800bacc <svd_u3DvUgOe+0x974>
      for (kase = d + 1; kase + 1 < 4; kase++) {
 800b97e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800b982:	3301      	adds	r3, #1
 800b984:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 800b988:	e043      	b.n	800ba12 <svd_u3DvUgOe+0x8ba>
        qjj = (3 * kase + d) + 1;
 800b98a:	f8d7 21f8 	ldr.w	r2, [r7, #504]	; 0x1f8
 800b98e:	4613      	mov	r3, r2
 800b990:	005b      	lsls	r3, r3, #1
 800b992:	441a      	add	r2, r3
 800b994:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800b998:	4413      	add	r3, r2
 800b99a:	3301      	adds	r3, #1
 800b99c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
        xaxpy_guu0hJif(3 - d, -(xdotc_mznw4aLl(3 - d, U, qq + 1, U, qjj) / U[qq]),
 800b9a0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800b9a4:	f1c3 0403 	rsb	r4, r3, #3
 800b9a8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800b9ac:	f1c3 0003 	rsb	r0, r3, #3
 800b9b0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800b9b4:	1c5a      	adds	r2, r3, #1
 800b9b6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800b9ba:	9300      	str	r3, [sp, #0]
 800b9bc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b9c0:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 800b9c4:	f001 fae3 	bl	800cf8e <xdotc_mznw4aLl>
 800b9c8:	ec51 0b10 	vmov	r0, r1, d0
 800b9cc:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800b9d0:	00da      	lsls	r2, r3, #3
 800b9d2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b9d6:	4413      	add	r3, r2
 800b9d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9dc:	f7f4 ff28 	bl	8000830 <__aeabi_ddiv>
 800b9e0:	4602      	mov	r2, r0
 800b9e2:	460b      	mov	r3, r1
 800b9e4:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 800b9e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800b9ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b9f0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800b9f4:	1c59      	adds	r1, r3, #1
 800b9f6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800b9fa:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 800b9fe:	ed97 0b2c 	vldr	d0, [r7, #176]	; 0xb0
 800ba02:	4620      	mov	r0, r4
 800ba04:	f001 fa6f 	bl	800cee6 <xaxpy_guu0hJif>
      for (kase = d + 1; kase + 1 < 4; kase++) {
 800ba08:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800ba0c:	3301      	adds	r3, #1
 800ba0e:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 800ba12:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800ba16:	2b02      	cmp	r3, #2
 800ba18:	ddb7      	ble.n	800b98a <svd_u3DvUgOe+0x832>
                       qq + 1, U, qjj);
      }

      for (qjj = d; qjj + 1 < 4; qjj++) {
 800ba1a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800ba1e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800ba22:	e026      	b.n	800ba72 <svd_u3DvUgOe+0x91a>
        kase = 3 * d + qjj;
 800ba24:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 800ba28:	4613      	mov	r3, r2
 800ba2a:	005b      	lsls	r3, r3, #1
 800ba2c:	441a      	add	r2, r3
 800ba2e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800ba32:	4413      	add	r3, r2
 800ba34:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        U[kase] = -U[kase];
 800ba38:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800ba3c:	00da      	lsls	r2, r3, #3
 800ba3e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800ba42:	4413      	add	r3, r2
 800ba44:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ba48:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800ba4c:	00da      	lsls	r2, r3, #3
 800ba4e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800ba52:	4413      	add	r3, r2
 800ba54:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
 800ba58:	f081 4200 	eor.w	r2, r1, #2147483648	; 0x80000000
 800ba5c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800ba60:	ed97 7b2a 	vldr	d7, [r7, #168]	; 0xa8
 800ba64:	ed83 7b00 	vstr	d7, [r3]
      for (qjj = d; qjj + 1 < 4; qjj++) {
 800ba68:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800ba6c:	3301      	adds	r3, #1
 800ba6e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800ba72:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800ba76:	2b02      	cmp	r3, #2
 800ba78:	ddd4      	ble.n	800ba24 <svd_u3DvUgOe+0x8cc>
      }

      U[qq]++;
 800ba7a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800ba7e:	00da      	lsls	r2, r3, #3
 800ba80:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800ba84:	189c      	adds	r4, r3, r2
 800ba86:	e9d4 0100 	ldrd	r0, r1, [r4]
 800ba8a:	f04f 0200 	mov.w	r2, #0
 800ba8e:	4b0e      	ldr	r3, [pc, #56]	; (800bac8 <svd_u3DvUgOe+0x970>)
 800ba90:	f7f4 fbee 	bl	8000270 <__adddf3>
 800ba94:	4602      	mov	r2, r0
 800ba96:	460b      	mov	r3, r1
 800ba98:	e9c4 2300 	strd	r2, r3, [r4]
      if (d - 1 >= 0) {
 800ba9c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	dd50      	ble.n	800bb46 <svd_u3DvUgOe+0x9ee>
        U[3 * d] = 0.0;
 800baa4:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 800baa8:	4613      	mov	r3, r2
 800baaa:	005b      	lsls	r3, r3, #1
 800baac:	4413      	add	r3, r2
 800baae:	00db      	lsls	r3, r3, #3
 800bab0:	461a      	mov	r2, r3
 800bab2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800bab6:	1899      	adds	r1, r3, r2
 800bab8:	f04f 0200 	mov.w	r2, #0
 800babc:	f04f 0300 	mov.w	r3, #0
 800bac0:	e9c1 2300 	strd	r2, r3, [r1]
 800bac4:	e03f      	b.n	800bb46 <svd_u3DvUgOe+0x9ee>
 800bac6:	bf00      	nop
 800bac8:	3ff00000 	.word	0x3ff00000
      }
    } else {
      U[3 * d] = 0.0;
 800bacc:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 800bad0:	4613      	mov	r3, r2
 800bad2:	005b      	lsls	r3, r3, #1
 800bad4:	4413      	add	r3, r2
 800bad6:	00db      	lsls	r3, r3, #3
 800bad8:	461a      	mov	r2, r3
 800bada:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800bade:	1899      	adds	r1, r3, r2
 800bae0:	f04f 0200 	mov.w	r2, #0
 800bae4:	f04f 0300 	mov.w	r3, #0
 800bae8:	e9c1 2300 	strd	r2, r3, [r1]
      U[3 * d + 1] = 0.0;
 800baec:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 800baf0:	4613      	mov	r3, r2
 800baf2:	005b      	lsls	r3, r3, #1
 800baf4:	4413      	add	r3, r2
 800baf6:	00db      	lsls	r3, r3, #3
 800baf8:	f103 0208 	add.w	r2, r3, #8
 800bafc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800bb00:	1899      	adds	r1, r3, r2
 800bb02:	f04f 0200 	mov.w	r2, #0
 800bb06:	f04f 0300 	mov.w	r3, #0
 800bb0a:	e9c1 2300 	strd	r2, r3, [r1]
      U[3 * d + 2] = 0.0;
 800bb0e:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 800bb12:	4613      	mov	r3, r2
 800bb14:	005b      	lsls	r3, r3, #1
 800bb16:	4413      	add	r3, r2
 800bb18:	00db      	lsls	r3, r3, #3
 800bb1a:	f103 0210 	add.w	r2, r3, #16
 800bb1e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800bb22:	1899      	adds	r1, r3, r2
 800bb24:	f04f 0200 	mov.w	r2, #0
 800bb28:	f04f 0300 	mov.w	r3, #0
 800bb2c:	e9c1 2300 	strd	r2, r3, [r1]
      U[qq] = 1.0;
 800bb30:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800bb34:	00da      	lsls	r2, r3, #3
 800bb36:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800bb3a:	1899      	adds	r1, r3, r2
 800bb3c:	f04f 0200 	mov.w	r2, #0
 800bb40:	4b11      	ldr	r3, [pc, #68]	; (800bb88 <svd_u3DvUgOe+0xa30>)
 800bb42:	e9c1 2300 	strd	r2, r3, [r1]
  for (d = 1; d >= 0; d--) {
 800bb46:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800bb4a:	3b01      	subs	r3, #1
 800bb4c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 800bb50:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	f6bf aefa 	bge.w	800b94e <svd_u3DvUgOe+0x7f6>
    }
  }

  for (qq = 2; qq >= 0; qq--) {
 800bb5a:	2302      	movs	r3, #2
 800bb5c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800bb60:	e096      	b.n	800bc90 <svd_u3DvUgOe+0xb38>
    if ((qq + 1 <= 1) && (e[0] != 0.0)) {
 800bb62:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	dc4c      	bgt.n	800bc04 <svd_u3DvUgOe+0xaac>
 800bb6a:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800bb6e:	f04f 0200 	mov.w	r2, #0
 800bb72:	f04f 0300 	mov.w	r3, #0
 800bb76:	f7f4 ff99 	bl	8000aac <__aeabi_dcmpeq>
 800bb7a:	4603      	mov	r3, r0
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d141      	bne.n	800bc04 <svd_u3DvUgOe+0xaac>
      for (d = 2; d < 4; d++) {
 800bb80:	2302      	movs	r3, #2
 800bb82:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 800bb86:	e039      	b.n	800bbfc <svd_u3DvUgOe+0xaa4>
 800bb88:	3ff00000 	.word	0x3ff00000
        qjj = (d - 1) * 3 + 2;
 800bb8c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800bb90:	1e5a      	subs	r2, r3, #1
 800bb92:	4613      	mov	r3, r2
 800bb94:	005b      	lsls	r3, r3, #1
 800bb96:	4413      	add	r3, r2
 800bb98:	3302      	adds	r3, #2
 800bb9a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
        xaxpy_guu0hJif(2, -(xdotc_mznw4aLl(2, V, 2, V, qjj) / V[1]), 2, V, qjj);
 800bb9e:	f507 7280 	add.w	r2, r7, #256	; 0x100
 800bba2:	f507 7180 	add.w	r1, r7, #256	; 0x100
 800bba6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800bbaa:	9300      	str	r3, [sp, #0]
 800bbac:	6813      	ldr	r3, [r2, #0]
 800bbae:	2202      	movs	r2, #2
 800bbb0:	6809      	ldr	r1, [r1, #0]
 800bbb2:	2002      	movs	r0, #2
 800bbb4:	f001 f9eb 	bl	800cf8e <xdotc_mznw4aLl>
 800bbb8:	ec51 0b10 	vmov	r0, r1, d0
 800bbbc:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	3308      	adds	r3, #8
 800bbc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbc8:	f7f4 fe32 	bl	8000830 <__aeabi_ddiv>
 800bbcc:	4602      	mov	r2, r0
 800bbce:	460b      	mov	r3, r1
 800bbd0:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 800bbd4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800bbd8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800bbdc:	f507 7280 	add.w	r2, r7, #256	; 0x100
 800bbe0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800bbe4:	6812      	ldr	r2, [r2, #0]
 800bbe6:	2102      	movs	r1, #2
 800bbe8:	ed97 0b28 	vldr	d0, [r7, #160]	; 0xa0
 800bbec:	2002      	movs	r0, #2
 800bbee:	f001 f97a 	bl	800cee6 <xaxpy_guu0hJif>
      for (d = 2; d < 4; d++) {
 800bbf2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800bbf6:	3301      	adds	r3, #1
 800bbf8:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 800bbfc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800bc00:	2b03      	cmp	r3, #3
 800bc02:	ddc3      	ble.n	800bb8c <svd_u3DvUgOe+0xa34>
      }
    }

    V[3 * qq] = 0.0;
 800bc04:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 800bc08:	4613      	mov	r3, r2
 800bc0a:	005b      	lsls	r3, r3, #1
 800bc0c:	4413      	add	r3, r2
 800bc0e:	00db      	lsls	r3, r3, #3
 800bc10:	461a      	mov	r2, r3
 800bc12:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	1899      	adds	r1, r3, r2
 800bc1a:	f04f 0200 	mov.w	r2, #0
 800bc1e:	f04f 0300 	mov.w	r3, #0
 800bc22:	e9c1 2300 	strd	r2, r3, [r1]
    V[3 * qq + 1] = 0.0;
 800bc26:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 800bc2a:	4613      	mov	r3, r2
 800bc2c:	005b      	lsls	r3, r3, #1
 800bc2e:	4413      	add	r3, r2
 800bc30:	00db      	lsls	r3, r3, #3
 800bc32:	f103 0208 	add.w	r2, r3, #8
 800bc36:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	1899      	adds	r1, r3, r2
 800bc3e:	f04f 0200 	mov.w	r2, #0
 800bc42:	f04f 0300 	mov.w	r3, #0
 800bc46:	e9c1 2300 	strd	r2, r3, [r1]
    V[3 * qq + 2] = 0.0;
 800bc4a:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 800bc4e:	4613      	mov	r3, r2
 800bc50:	005b      	lsls	r3, r3, #1
 800bc52:	4413      	add	r3, r2
 800bc54:	00db      	lsls	r3, r3, #3
 800bc56:	f103 0210 	add.w	r2, r3, #16
 800bc5a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	1899      	adds	r1, r3, r2
 800bc62:	f04f 0200 	mov.w	r2, #0
 800bc66:	f04f 0300 	mov.w	r3, #0
 800bc6a:	e9c1 2300 	strd	r2, r3, [r1]
    V[qq + 3 * qq] = 1.0;
 800bc6e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800bc72:	015a      	lsls	r2, r3, #5
 800bc74:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	1899      	adds	r1, r3, r2
 800bc7c:	f04f 0200 	mov.w	r2, #0
 800bc80:	4bbd      	ldr	r3, [pc, #756]	; (800bf78 <svd_u3DvUgOe+0xe20>)
 800bc82:	e9c1 2300 	strd	r2, r3, [r1]
  for (qq = 2; qq >= 0; qq--) {
 800bc86:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800bc8a:	3b01      	subs	r3, #1
 800bc8c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800bc90:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	f6bf af64 	bge.w	800bb62 <svd_u3DvUgOe+0xa0a>
  }

  ztest = e[0];
 800bc9a:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800bc9e:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
  if (b_s[0] != 0.0) {
 800bca2:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	; 0x160
 800bca6:	f04f 0200 	mov.w	r2, #0
 800bcaa:	f04f 0300 	mov.w	r3, #0
 800bcae:	f7f4 fefd 	bl	8000aac <__aeabi_dcmpeq>
 800bcb2:	4603      	mov	r3, r0
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d12a      	bne.n	800bd0e <svd_u3DvUgOe+0xbb6>
    rt = fabs(b_s[0]);
 800bcb8:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 800bcbc:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 800bcc0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bcc4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800bcc8:	ed97 7b26 	vldr	d7, [r7, #152]	; 0x98
 800bccc:	ed87 7b4a 	vstr	d7, [r7, #296]	; 0x128
    nrm = b_s[0] / rt;
 800bcd0:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	; 0x160
 800bcd4:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800bcd8:	f7f4 fdaa 	bl	8000830 <__aeabi_ddiv>
 800bcdc:	4602      	mov	r2, r0
 800bcde:	460b      	mov	r3, r1
 800bce0:	e9c7 2372 	strd	r2, r3, [r7, #456]	; 0x1c8
    b_s[0] = rt;
 800bce4:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800bce8:	e9c7 2358 	strd	r2, r3, [r7, #352]	; 0x160
    ztest = e[0] / nrm;
 800bcec:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800bcf0:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 800bcf4:	f7f4 fd9c 	bl	8000830 <__aeabi_ddiv>
 800bcf8:	4602      	mov	r2, r0
 800bcfa:	460b      	mov	r3, r1
 800bcfc:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
    xscal_eaAxXsvQ(nrm, U, 1);
 800bd00:	2101      	movs	r1, #1
 800bd02:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 800bd06:	ed97 0b72 	vldr	d0, [r7, #456]	; 0x1c8
 800bd0a:	f002 f989 	bl	800e020 <xscal_eaAxXsvQ>
  }

  if (ztest != 0.0) {
 800bd0e:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 800bd12:	f04f 0200 	mov.w	r2, #0
 800bd16:	f04f 0300 	mov.w	r3, #0
 800bd1a:	f7f4 fec7 	bl	8000aac <__aeabi_dcmpeq>
 800bd1e:	4603      	mov	r3, r0
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d12b      	bne.n	800bd7c <svd_u3DvUgOe+0xc24>
    rt = fabs(ztest);
 800bd24:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800bd28:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800bd2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bd30:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800bd34:	ed97 7b24 	vldr	d7, [r7, #144]	; 0x90
 800bd38:	ed87 7b4a 	vstr	d7, [r7, #296]	; 0x128
    nrm = rt / ztest;
 800bd3c:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800bd40:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800bd44:	f7f4 fd74 	bl	8000830 <__aeabi_ddiv>
 800bd48:	4602      	mov	r2, r0
 800bd4a:	460b      	mov	r3, r1
 800bd4c:	e9c7 2372 	strd	r2, r3, [r7, #456]	; 0x1c8
    ztest = rt;
 800bd50:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800bd54:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
    b_s[1] *= nrm;
 800bd58:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	; 0x168
 800bd5c:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 800bd60:	f7f4 fc3c 	bl	80005dc <__aeabi_dmul>
 800bd64:	4602      	mov	r2, r0
 800bd66:	460b      	mov	r3, r1
 800bd68:	e9c7 235a 	strd	r2, r3, [r7, #360]	; 0x168
    xscal_eaAxXsvQ(nrm, V, 4);
 800bd6c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800bd70:	2104      	movs	r1, #4
 800bd72:	6818      	ldr	r0, [r3, #0]
 800bd74:	ed97 0b72 	vldr	d0, [r7, #456]	; 0x1c8
 800bd78:	f002 f952 	bl	800e020 <xscal_eaAxXsvQ>
  }

  e[0] = ztest;
 800bd7c:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800bd80:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
  ztest = b_A[7];
 800bd84:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	; 0x1b0
 800bd88:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
  if (b_s[1] != 0.0) {
 800bd8c:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	; 0x168
 800bd90:	f04f 0200 	mov.w	r2, #0
 800bd94:	f04f 0300 	mov.w	r3, #0
 800bd98:	f7f4 fe88 	bl	8000aac <__aeabi_dcmpeq>
 800bd9c:	4603      	mov	r3, r0
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d12a      	bne.n	800bdf8 <svd_u3DvUgOe+0xca0>
    rt = fabs(b_s[1]);
 800bda2:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 800bda6:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800bdaa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bdae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800bdb2:	ed97 7b22 	vldr	d7, [r7, #136]	; 0x88
 800bdb6:	ed87 7b4a 	vstr	d7, [r7, #296]	; 0x128
    nrm = b_s[1] / rt;
 800bdba:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	; 0x168
 800bdbe:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800bdc2:	f7f4 fd35 	bl	8000830 <__aeabi_ddiv>
 800bdc6:	4602      	mov	r2, r0
 800bdc8:	460b      	mov	r3, r1
 800bdca:	e9c7 2372 	strd	r2, r3, [r7, #456]	; 0x1c8
    b_s[1] = rt;
 800bdce:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800bdd2:	e9c7 235a 	strd	r2, r3, [r7, #360]	; 0x168
    ztest = b_A[7] / nrm;
 800bdd6:	e9d7 016c 	ldrd	r0, r1, [r7, #432]	; 0x1b0
 800bdda:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 800bdde:	f7f4 fd27 	bl	8000830 <__aeabi_ddiv>
 800bde2:	4602      	mov	r2, r0
 800bde4:	460b      	mov	r3, r1
 800bde6:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
    xscal_eaAxXsvQ(nrm, U, 4);
 800bdea:	2104      	movs	r1, #4
 800bdec:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 800bdf0:	ed97 0b72 	vldr	d0, [r7, #456]	; 0x1c8
 800bdf4:	f002 f914 	bl	800e020 <xscal_eaAxXsvQ>
  }

  if (ztest != 0.0) {
 800bdf8:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 800bdfc:	f04f 0200 	mov.w	r2, #0
 800be00:	f04f 0300 	mov.w	r3, #0
 800be04:	f7f4 fe52 	bl	8000aac <__aeabi_dcmpeq>
 800be08:	4603      	mov	r3, r0
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d12b      	bne.n	800be66 <svd_u3DvUgOe+0xd0e>
    rt = fabs(ztest);
 800be0e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800be12:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800be16:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800be1a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800be1e:	ed97 7b20 	vldr	d7, [r7, #128]	; 0x80
 800be22:	ed87 7b4a 	vstr	d7, [r7, #296]	; 0x128
    nrm = rt / ztest;
 800be26:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800be2a:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800be2e:	f7f4 fcff 	bl	8000830 <__aeabi_ddiv>
 800be32:	4602      	mov	r2, r0
 800be34:	460b      	mov	r3, r1
 800be36:	e9c7 2372 	strd	r2, r3, [r7, #456]	; 0x1c8
    ztest = rt;
 800be3a:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800be3e:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
    b_s[2] = b_A[8] * nrm;
 800be42:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 800be46:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 800be4a:	f7f4 fbc7 	bl	80005dc <__aeabi_dmul>
 800be4e:	4602      	mov	r2, r0
 800be50:	460b      	mov	r3, r1
 800be52:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170
    xscal_eaAxXsvQ(nrm, V, 7);
 800be56:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800be5a:	2107      	movs	r1, #7
 800be5c:	6818      	ldr	r0, [r3, #0]
 800be5e:	ed97 0b72 	vldr	d0, [r7, #456]	; 0x1c8
 800be62:	f002 f8dd 	bl	800e020 <xscal_eaAxXsvQ>
  }

  e[1] = ztest;
 800be66:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800be6a:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
  if (b_s[2] != 0.0) {
 800be6e:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 800be72:	f04f 0200 	mov.w	r2, #0
 800be76:	f04f 0300 	mov.w	r3, #0
 800be7a:	f7f4 fe17 	bl	8000aac <__aeabi_dcmpeq>
 800be7e:	4603      	mov	r3, r0
 800be80:	2b00      	cmp	r3, #0
 800be82:	d11e      	bne.n	800bec2 <svd_u3DvUgOe+0xd6a>
    rt = fabs(b_s[2]);
 800be84:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800be88:	67ba      	str	r2, [r7, #120]	; 0x78
 800be8a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800be8e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800be90:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 800be94:	ed87 7b4a 	vstr	d7, [r7, #296]	; 0x128
    nrm = b_s[2] / rt;
 800be98:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 800be9c:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800bea0:	f7f4 fcc6 	bl	8000830 <__aeabi_ddiv>
 800bea4:	4602      	mov	r2, r0
 800bea6:	460b      	mov	r3, r1
 800bea8:	e9c7 2372 	strd	r2, r3, [r7, #456]	; 0x1c8
    b_s[2] = rt;
 800beac:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800beb0:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170
    xscal_eaAxXsvQ(nrm, U, 7);
 800beb4:	2107      	movs	r1, #7
 800beb6:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 800beba:	ed97 0b72 	vldr	d0, [r7, #456]	; 0x1c8
 800bebe:	f002 f8af 	bl	800e020 <xscal_eaAxXsvQ>
  }

  e[2] = 0.0;
 800bec2:	f04f 0200 	mov.w	r2, #0
 800bec6:	f04f 0300 	mov.w	r3, #0
 800beca:	e9c7 2356 	strd	r2, r3, [r7, #344]	; 0x158
  qq = 0;
 800bece:	2300      	movs	r3, #0
 800bed0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  nrm = fmax(fmax(fmax(b_s[0], e[0]), fmax(b_s[1], ztest)), fmax(b_s[2], 0.0));
 800bed4:	ed97 7b58 	vldr	d7, [r7, #352]	; 0x160
 800bed8:	ed97 6b52 	vldr	d6, [r7, #328]	; 0x148
 800bedc:	eeb0 1a46 	vmov.f32	s2, s12
 800bee0:	eef0 1a66 	vmov.f32	s3, s13
 800bee4:	eeb0 0a47 	vmov.f32	s0, s14
 800bee8:	eef0 0a67 	vmov.f32	s1, s15
 800beec:	f00a ff12 	bl	8016d14 <fmax>
 800bef0:	eeb0 8a40 	vmov.f32	s16, s0
 800bef4:	eef0 8a60 	vmov.f32	s17, s1
 800bef8:	ed97 7b5a 	vldr	d7, [r7, #360]	; 0x168
 800befc:	ed97 6b44 	vldr	d6, [r7, #272]	; 0x110
 800bf00:	eeb0 1a46 	vmov.f32	s2, s12
 800bf04:	eef0 1a66 	vmov.f32	s3, s13
 800bf08:	eeb0 0a47 	vmov.f32	s0, s14
 800bf0c:	eef0 0a67 	vmov.f32	s1, s15
 800bf10:	f00a ff00 	bl	8016d14 <fmax>
 800bf14:	eeb0 7a40 	vmov.f32	s14, s0
 800bf18:	eef0 7a60 	vmov.f32	s15, s1
 800bf1c:	eeb0 1a47 	vmov.f32	s2, s14
 800bf20:	eef0 1a67 	vmov.f32	s3, s15
 800bf24:	eeb0 0a48 	vmov.f32	s0, s16
 800bf28:	eef0 0a68 	vmov.f32	s1, s17
 800bf2c:	f00a fef2 	bl	8016d14 <fmax>
 800bf30:	eeb0 8a40 	vmov.f32	s16, s0
 800bf34:	eef0 8a60 	vmov.f32	s17, s1
 800bf38:	ed97 7b5c 	vldr	d7, [r7, #368]	; 0x170
 800bf3c:	ed9f 1b0c 	vldr	d1, [pc, #48]	; 800bf70 <svd_u3DvUgOe+0xe18>
 800bf40:	eeb0 0a47 	vmov.f32	s0, s14
 800bf44:	eef0 0a67 	vmov.f32	s1, s15
 800bf48:	f00a fee4 	bl	8016d14 <fmax>
 800bf4c:	eeb0 7a40 	vmov.f32	s14, s0
 800bf50:	eef0 7a60 	vmov.f32	s15, s1
 800bf54:	eeb0 1a47 	vmov.f32	s2, s14
 800bf58:	eef0 1a67 	vmov.f32	s3, s15
 800bf5c:	eeb0 0a48 	vmov.f32	s0, s16
 800bf60:	eef0 0a68 	vmov.f32	s1, s17
 800bf64:	f00a fed6 	bl	8016d14 <fmax>
 800bf68:	ed87 0b72 	vstr	d0, [r7, #456]	; 0x1c8
  while ((m + 2 > 0) && (qq < 75)) {
 800bf6c:	f000 be8a 	b.w	800cc84 <svd_u3DvUgOe+0x1b2c>
	...
 800bf78:	3ff00000 	.word	0x3ff00000
    kase = m + 1;
 800bf7c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800bf80:	3301      	adds	r3, #1
 800bf82:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
    int32_T exitg1;
    do {
      exitg1 = 0;
 800bf86:	2300      	movs	r3, #0
 800bf88:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
      d = kase;
 800bf8c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800bf90:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
      if (kase == 0) {
 800bf94:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d103      	bne.n	800bfa4 <svd_u3DvUgOe+0xe4c>
        exitg1 = 1;
 800bf9c:	2301      	movs	r3, #1
 800bf9e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800bfa2:	e092      	b.n	800c0ca <svd_u3DvUgOe+0xf72>
      } else {
        rt = fabs(e[kase - 1]);
 800bfa4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800bfa8:	3b01      	subs	r3, #1
 800bfaa:	00db      	lsls	r3, r3, #3
 800bfac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800bfb0:	4413      	add	r3, r2
 800bfb2:	3bb8      	subs	r3, #184	; 0xb8
 800bfb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfb8:	673a      	str	r2, [r7, #112]	; 0x70
 800bfba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bfbe:	677b      	str	r3, [r7, #116]	; 0x74
 800bfc0:	ed97 7b1c 	vldr	d7, [r7, #112]	; 0x70
 800bfc4:	ed87 7b4a 	vstr	d7, [r7, #296]	; 0x128
        if (rt <= (fabs(b_s[kase - 1]) + fabs(b_s[kase])) *
 800bfc8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800bfcc:	3b01      	subs	r3, #1
 800bfce:	00db      	lsls	r3, r3, #3
 800bfd0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800bfd4:	4413      	add	r3, r2
 800bfd6:	3ba0      	subs	r3, #160	; 0xa0
 800bfd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfdc:	66ba      	str	r2, [r7, #104]	; 0x68
 800bfde:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bfe2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bfe4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800bfe8:	00db      	lsls	r3, r3, #3
 800bfea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800bfee:	4413      	add	r3, r2
 800bff0:	3ba0      	subs	r3, #160	; 0xa0
 800bff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bff6:	663a      	str	r2, [r7, #96]	; 0x60
 800bff8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bffc:	667b      	str	r3, [r7, #100]	; 0x64
 800bffe:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800c002:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800c006:	f7f4 f933 	bl	8000270 <__adddf3>
 800c00a:	4602      	mov	r2, r0
 800c00c:	460b      	mov	r3, r1
 800c00e:	4610      	mov	r0, r2
 800c010:	4619      	mov	r1, r3
 800c012:	f04f 0200 	mov.w	r2, #0
 800c016:	4bb2      	ldr	r3, [pc, #712]	; (800c2e0 <svd_u3DvUgOe+0x1188>)
 800c018:	f7f4 fae0 	bl	80005dc <__aeabi_dmul>
 800c01c:	4602      	mov	r2, r0
 800c01e:	460b      	mov	r3, r1
 800c020:	4610      	mov	r0, r2
 800c022:	4619      	mov	r1, r3
 800c024:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800c028:	f7f4 fd5e 	bl	8000ae8 <__aeabi_dcmpge>
 800c02c:	4603      	mov	r3, r0
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d012      	beq.n	800c058 <svd_u3DvUgOe+0xf00>
            2.2204460492503131E-16) {
          e[kase - 1] = 0.0;
 800c032:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800c036:	3b01      	subs	r3, #1
 800c038:	00db      	lsls	r3, r3, #3
 800c03a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800c03e:	4413      	add	r3, r2
 800c040:	f1a3 01b8 	sub.w	r1, r3, #184	; 0xb8
 800c044:	f04f 0200 	mov.w	r2, #0
 800c048:	f04f 0300 	mov.w	r3, #0
 800c04c:	e9c1 2300 	strd	r2, r3, [r1]
          exitg1 = 1;
 800c050:	2301      	movs	r3, #1
 800c052:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800c056:	e038      	b.n	800c0ca <svd_u3DvUgOe+0xf72>
        } else if ((rt <= 1.0020841800044864E-292) || ((qq > 20) && (rt <=
 800c058:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800c05c:	f04f 0200 	mov.w	r2, #0
 800c060:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800c064:	f7f4 fd36 	bl	8000ad4 <__aeabi_dcmple>
 800c068:	4603      	mov	r3, r0
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d115      	bne.n	800c09a <svd_u3DvUgOe+0xf42>
 800c06e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800c072:	2b14      	cmp	r3, #20
 800c074:	dd24      	ble.n	800c0c0 <svd_u3DvUgOe+0xf68>
                     2.2204460492503131E-16 * nrm))) {
 800c076:	f04f 0200 	mov.w	r2, #0
 800c07a:	4b99      	ldr	r3, [pc, #612]	; (800c2e0 <svd_u3DvUgOe+0x1188>)
 800c07c:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	; 0x1c8
 800c080:	f7f4 faac 	bl	80005dc <__aeabi_dmul>
 800c084:	4602      	mov	r2, r0
 800c086:	460b      	mov	r3, r1
 800c088:	4610      	mov	r0, r2
 800c08a:	4619      	mov	r1, r3
        } else if ((rt <= 1.0020841800044864E-292) || ((qq > 20) && (rt <=
 800c08c:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800c090:	f7f4 fd2a 	bl	8000ae8 <__aeabi_dcmpge>
 800c094:	4603      	mov	r3, r0
 800c096:	2b00      	cmp	r3, #0
 800c098:	d012      	beq.n	800c0c0 <svd_u3DvUgOe+0xf68>
          e[kase - 1] = 0.0;
 800c09a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800c09e:	3b01      	subs	r3, #1
 800c0a0:	00db      	lsls	r3, r3, #3
 800c0a2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800c0a6:	4413      	add	r3, r2
 800c0a8:	f1a3 01b8 	sub.w	r1, r3, #184	; 0xb8
 800c0ac:	f04f 0200 	mov.w	r2, #0
 800c0b0:	f04f 0300 	mov.w	r3, #0
 800c0b4:	e9c1 2300 	strd	r2, r3, [r1]
          exitg1 = 1;
 800c0b8:	2301      	movs	r3, #1
 800c0ba:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800c0be:	e004      	b.n	800c0ca <svd_u3DvUgOe+0xf72>
        } else {
          kase--;
 800c0c0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800c0c4:	3b01      	subs	r3, #1
 800c0c6:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        }
      }
    } while (exitg1 == 0);
 800c0ca:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	f43f af59 	beq.w	800bf86 <svd_u3DvUgOe+0xe2e>

    if (m + 1 == kase) {
 800c0d4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800c0d8:	1c5a      	adds	r2, r3, #1
 800c0da:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800c0de:	4293      	cmp	r3, r2
 800c0e0:	d103      	bne.n	800c0ea <svd_u3DvUgOe+0xf92>
      kase = 4;
 800c0e2:	2304      	movs	r3, #4
 800c0e4:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 800c0e8:	e0c7      	b.n	800c27a <svd_u3DvUgOe+0x1122>
    } else {
      int32_T k_ii;
      boolean_T exitg2;
      qjj = m + 2;
 800c0ea:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800c0ee:	3302      	adds	r3, #2
 800c0f0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
      k_ii = m + 2;
 800c0f4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800c0f8:	3302      	adds	r3, #2
 800c0fa:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
      exitg2 = false;
 800c0fe:	2300      	movs	r3, #0
 800c100:	f887 31df 	strb.w	r3, [r7, #479]	; 0x1df
      while ((!exitg2) && (k_ii >= kase)) {
 800c104:	e092      	b.n	800c22c <svd_u3DvUgOe+0x10d4>
        qjj = k_ii;
 800c106:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800c10a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
        if (k_ii == kase) {
 800c10e:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 800c112:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800c116:	429a      	cmp	r2, r3
 800c118:	d103      	bne.n	800c122 <svd_u3DvUgOe+0xfca>
          exitg2 = true;
 800c11a:	2301      	movs	r3, #1
 800c11c:	f887 31df 	strb.w	r3, [r7, #479]	; 0x1df
 800c120:	e084      	b.n	800c22c <svd_u3DvUgOe+0x10d4>
        } else {
          rt = 0.0;
 800c122:	f04f 0200 	mov.w	r2, #0
 800c126:	f04f 0300 	mov.w	r3, #0
 800c12a:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
          if (k_ii < m + 2) {
 800c12e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800c132:	1c5a      	adds	r2, r3, #1
 800c134:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800c138:	4293      	cmp	r3, r2
 800c13a:	dc11      	bgt.n	800c160 <svd_u3DvUgOe+0x1008>
            rt = fabs(e[k_ii - 1]);
 800c13c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800c140:	3b01      	subs	r3, #1
 800c142:	00db      	lsls	r3, r3, #3
 800c144:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800c148:	4413      	add	r3, r2
 800c14a:	3bb8      	subs	r3, #184	; 0xb8
 800c14c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c150:	65ba      	str	r2, [r7, #88]	; 0x58
 800c152:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c156:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c158:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 800c15c:	ed87 7b4a 	vstr	d7, [r7, #296]	; 0x128
          }

          if (k_ii > kase + 1) {
 800c160:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800c164:	1c5a      	adds	r2, r3, #1
 800c166:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800c16a:	4293      	cmp	r3, r2
 800c16c:	dd17      	ble.n	800c19e <svd_u3DvUgOe+0x1046>
            rt += fabs(e[k_ii - 2]);
 800c16e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800c172:	3b02      	subs	r3, #2
 800c174:	00db      	lsls	r3, r3, #3
 800c176:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800c17a:	4413      	add	r3, r2
 800c17c:	3bb8      	subs	r3, #184	; 0xb8
 800c17e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c182:	653a      	str	r2, [r7, #80]	; 0x50
 800c184:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c188:	657b      	str	r3, [r7, #84]	; 0x54
 800c18a:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800c18e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800c192:	f7f4 f86d 	bl	8000270 <__adddf3>
 800c196:	4602      	mov	r2, r0
 800c198:	460b      	mov	r3, r1
 800c19a:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
          }

          ztest = fabs(b_s[k_ii - 1]);
 800c19e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800c1a2:	3b01      	subs	r3, #1
 800c1a4:	00db      	lsls	r3, r3, #3
 800c1a6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800c1aa:	4413      	add	r3, r2
 800c1ac:	3ba0      	subs	r3, #160	; 0xa0
 800c1ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1b2:	64ba      	str	r2, [r7, #72]	; 0x48
 800c1b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c1b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c1ba:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 800c1be:	ed87 7b44 	vstr	d7, [r7, #272]	; 0x110
          if ((ztest <= 2.2204460492503131E-16 * rt) || (ztest <=
 800c1c2:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800c1c6:	f04f 0200 	mov.w	r2, #0
 800c1ca:	4b45      	ldr	r3, [pc, #276]	; (800c2e0 <svd_u3DvUgOe+0x1188>)
 800c1cc:	f7f4 fa06 	bl	80005dc <__aeabi_dmul>
 800c1d0:	4602      	mov	r2, r0
 800c1d2:	460b      	mov	r3, r1
 800c1d4:	4610      	mov	r0, r2
 800c1d6:	4619      	mov	r1, r3
 800c1d8:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800c1dc:	f7f4 fc84 	bl	8000ae8 <__aeabi_dcmpge>
 800c1e0:	4603      	mov	r3, r0
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d10a      	bne.n	800c1fc <svd_u3DvUgOe+0x10a4>
 800c1e6:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 800c1ea:	f04f 0200 	mov.w	r2, #0
 800c1ee:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800c1f2:	f7f4 fc6f 	bl	8000ad4 <__aeabi_dcmple>
 800c1f6:	4603      	mov	r3, r0
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d012      	beq.n	800c222 <svd_u3DvUgOe+0x10ca>
               1.0020841800044864E-292)) {
            b_s[k_ii - 1] = 0.0;
 800c1fc:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800c200:	3b01      	subs	r3, #1
 800c202:	00db      	lsls	r3, r3, #3
 800c204:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800c208:	4413      	add	r3, r2
 800c20a:	f1a3 01a0 	sub.w	r1, r3, #160	; 0xa0
 800c20e:	f04f 0200 	mov.w	r2, #0
 800c212:	f04f 0300 	mov.w	r3, #0
 800c216:	e9c1 2300 	strd	r2, r3, [r1]
            exitg2 = true;
 800c21a:	2301      	movs	r3, #1
 800c21c:	f887 31df 	strb.w	r3, [r7, #479]	; 0x1df
 800c220:	e004      	b.n	800c22c <svd_u3DvUgOe+0x10d4>
          } else {
            k_ii--;
 800c222:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800c226:	3b01      	subs	r3, #1
 800c228:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
      while ((!exitg2) && (k_ii >= kase)) {
 800c22c:	f897 31df 	ldrb.w	r3, [r7, #479]	; 0x1df
 800c230:	2b00      	cmp	r3, #0
 800c232:	d106      	bne.n	800c242 <svd_u3DvUgOe+0x10ea>
 800c234:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 800c238:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800c23c:	429a      	cmp	r2, r3
 800c23e:	f6bf af62 	bge.w	800c106 <svd_u3DvUgOe+0xfae>
          }
        }
      }

      if (qjj == kase) {
 800c242:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 800c246:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800c24a:	429a      	cmp	r2, r3
 800c24c:	d103      	bne.n	800c256 <svd_u3DvUgOe+0x10fe>
        kase = 3;
 800c24e:	2303      	movs	r3, #3
 800c250:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 800c254:	e011      	b.n	800c27a <svd_u3DvUgOe+0x1122>
      } else if (m + 2 == qjj) {
 800c256:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800c25a:	1c9a      	adds	r2, r3, #2
 800c25c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800c260:	4293      	cmp	r3, r2
 800c262:	d103      	bne.n	800c26c <svd_u3DvUgOe+0x1114>
        kase = 1;
 800c264:	2301      	movs	r3, #1
 800c266:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 800c26a:	e006      	b.n	800c27a <svd_u3DvUgOe+0x1122>
      } else {
        kase = 2;
 800c26c:	2302      	movs	r3, #2
 800c26e:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        d = qjj;
 800c272:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800c276:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
      }
    }

    switch (kase) {
 800c27a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800c27e:	2b03      	cmp	r3, #3
 800c280:	f000 8113 	beq.w	800c4aa <svd_u3DvUgOe+0x1352>
 800c284:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800c288:	2b03      	cmp	r3, #3
 800c28a:	f300 8443 	bgt.w	800cb14 <svd_u3DvUgOe+0x19bc>
 800c28e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800c292:	2b01      	cmp	r3, #1
 800c294:	d005      	beq.n	800c2a2 <svd_u3DvUgOe+0x114a>
 800c296:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800c29a:	2b02      	cmp	r3, #2
 800c29c:	d07b      	beq.n	800c396 <svd_u3DvUgOe+0x123e>
 800c29e:	f000 bc39 	b.w	800cb14 <svd_u3DvUgOe+0x19bc>
     case 1:
      rt = e[m];
 800c2a2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800c2a6:	00db      	lsls	r3, r3, #3
 800c2a8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800c2ac:	4413      	add	r3, r2
 800c2ae:	3bb8      	subs	r3, #184	; 0xb8
 800c2b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2b4:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
      e[m] = 0.0;
 800c2b8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800c2bc:	00db      	lsls	r3, r3, #3
 800c2be:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800c2c2:	4413      	add	r3, r2
 800c2c4:	f1a3 01b8 	sub.w	r1, r3, #184	; 0xb8
 800c2c8:	f04f 0200 	mov.w	r2, #0
 800c2cc:	f04f 0300 	mov.w	r3, #0
 800c2d0:	e9c1 2300 	strd	r2, r3, [r1]
      for (qjj = m; qjj + 1 >= d + 1; qjj--) {
 800c2d4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800c2d8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800c2dc:	e053      	b.n	800c386 <svd_u3DvUgOe+0x122e>
 800c2de:	bf00      	nop
 800c2e0:	3cb00000 	.word	0x3cb00000
        xrotg_XzIjz1eG(&b_s[qjj], &rt, &ztest, &sqds);
 800c2e4:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 800c2e8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800c2ec:	00db      	lsls	r3, r3, #3
 800c2ee:	18d0      	adds	r0, r2, r3
 800c2f0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800c2f4:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800c2f8:	f507 7194 	add.w	r1, r7, #296	; 0x128
 800c2fc:	f001 fd2a 	bl	800dd54 <xrotg_XzIjz1eG>
        if (qjj + 1 > d + 1) {
 800c300:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 800c304:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800c308:	429a      	cmp	r2, r3
 800c30a:	dd19      	ble.n	800c340 <svd_u3DvUgOe+0x11e8>
          rt = -sqds * e[0];
 800c30c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800c310:	643a      	str	r2, [r7, #64]	; 0x40
 800c312:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800c316:	647b      	str	r3, [r7, #68]	; 0x44
 800c318:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800c31c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800c320:	f7f4 f95c 	bl	80005dc <__aeabi_dmul>
 800c324:	4602      	mov	r2, r0
 800c326:	460b      	mov	r3, r1
 800c328:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
          e[0] *= ztest;
 800c32c:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800c330:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800c334:	f7f4 f952 	bl	80005dc <__aeabi_dmul>
 800c338:	4602      	mov	r2, r0
 800c33a:	460b      	mov	r3, r1
 800c33c:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
        }

        xrot_i7f01JoJ(V, 3 * qjj + 1, 3 * (m + 1) + 1, ztest, sqds);
 800c340:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 800c344:	4613      	mov	r3, r2
 800c346:	005b      	lsls	r3, r3, #1
 800c348:	4413      	add	r3, r2
 800c34a:	1c59      	adds	r1, r3, #1
 800c34c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800c350:	1c5a      	adds	r2, r3, #1
 800c352:	4613      	mov	r3, r2
 800c354:	005b      	lsls	r3, r3, #1
 800c356:	4413      	add	r3, r2
 800c358:	1c5a      	adds	r2, r3, #1
 800c35a:	ed97 7b44 	vldr	d7, [r7, #272]	; 0x110
 800c35e:	ed97 6b46 	vldr	d6, [r7, #280]	; 0x118
 800c362:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800c366:	eeb0 1a46 	vmov.f32	s2, s12
 800c36a:	eef0 1a66 	vmov.f32	s3, s13
 800c36e:	eeb0 0a47 	vmov.f32	s0, s14
 800c372:	eef0 0a67 	vmov.f32	s1, s15
 800c376:	6818      	ldr	r0, [r3, #0]
 800c378:	f001 fbd0 	bl	800db1c <xrot_i7f01JoJ>
      for (qjj = m; qjj + 1 >= d + 1; qjj--) {
 800c37c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800c380:	3b01      	subs	r3, #1
 800c382:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800c386:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 800c38a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800c38e:	429a      	cmp	r2, r3
 800c390:	daa8      	bge.n	800c2e4 <svd_u3DvUgOe+0x118c>
      }
      break;
 800c392:	f000 bc77 	b.w	800cc84 <svd_u3DvUgOe+0x1b2c>

     case 2:
      rt = e[d - 1];
 800c396:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800c39a:	3b01      	subs	r3, #1
 800c39c:	00db      	lsls	r3, r3, #3
 800c39e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800c3a2:	4413      	add	r3, r2
 800c3a4:	3bb8      	subs	r3, #184	; 0xb8
 800c3a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3aa:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
      e[d - 1] = 0.0;
 800c3ae:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800c3b2:	3b01      	subs	r3, #1
 800c3b4:	00db      	lsls	r3, r3, #3
 800c3b6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800c3ba:	4413      	add	r3, r2
 800c3bc:	f1a3 01b8 	sub.w	r1, r3, #184	; 0xb8
 800c3c0:	f04f 0200 	mov.w	r2, #0
 800c3c4:	f04f 0300 	mov.w	r3, #0
 800c3c8:	e9c1 2300 	strd	r2, r3, [r1]
      for (qjj = d; qjj < m + 2; qjj++) {
 800c3cc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800c3d0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800c3d4:	e061      	b.n	800c49a <svd_u3DvUgOe+0x1342>
        xrotg_XzIjz1eG(&b_s[qjj], &rt, &ztest, &sqds);
 800c3d6:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 800c3da:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800c3de:	00db      	lsls	r3, r3, #3
 800c3e0:	18d0      	adds	r0, r2, r3
 800c3e2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800c3e6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800c3ea:	f507 7194 	add.w	r1, r7, #296	; 0x128
 800c3ee:	f001 fcb1 	bl	800dd54 <xrotg_XzIjz1eG>
        rt = -sqds * e[qjj];
 800c3f2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800c3f6:	63ba      	str	r2, [r7, #56]	; 0x38
 800c3f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800c3fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c3fe:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800c402:	00db      	lsls	r3, r3, #3
 800c404:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800c408:	4413      	add	r3, r2
 800c40a:	3bb8      	subs	r3, #184	; 0xb8
 800c40c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c410:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800c414:	f7f4 f8e2 	bl	80005dc <__aeabi_dmul>
 800c418:	4602      	mov	r2, r0
 800c41a:	460b      	mov	r3, r1
 800c41c:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
        e[qjj] *= ztest;
 800c420:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800c424:	00db      	lsls	r3, r3, #3
 800c426:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800c42a:	4413      	add	r3, r2
 800c42c:	3bb8      	subs	r3, #184	; 0xb8
 800c42e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c432:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800c436:	f7f4 f8d1 	bl	80005dc <__aeabi_dmul>
 800c43a:	4602      	mov	r2, r0
 800c43c:	460b      	mov	r3, r1
 800c43e:	4610      	mov	r0, r2
 800c440:	4619      	mov	r1, r3
 800c442:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800c446:	00db      	lsls	r3, r3, #3
 800c448:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800c44c:	4413      	add	r3, r2
 800c44e:	3bb8      	subs	r3, #184	; 0xb8
 800c450:	e9c3 0100 	strd	r0, r1, [r3]
        xrot_i7f01JoJ(U, 3 * qjj + 1, 3 * (d - 1) + 1, ztest, sqds);
 800c454:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 800c458:	4613      	mov	r3, r2
 800c45a:	005b      	lsls	r3, r3, #1
 800c45c:	4413      	add	r3, r2
 800c45e:	1c59      	adds	r1, r3, #1
 800c460:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800c464:	1e5a      	subs	r2, r3, #1
 800c466:	4613      	mov	r3, r2
 800c468:	005b      	lsls	r3, r3, #1
 800c46a:	4413      	add	r3, r2
 800c46c:	3301      	adds	r3, #1
 800c46e:	ed97 7b44 	vldr	d7, [r7, #272]	; 0x110
 800c472:	ed97 6b46 	vldr	d6, [r7, #280]	; 0x118
 800c476:	eeb0 1a46 	vmov.f32	s2, s12
 800c47a:	eef0 1a66 	vmov.f32	s3, s13
 800c47e:	eeb0 0a47 	vmov.f32	s0, s14
 800c482:	eef0 0a67 	vmov.f32	s1, s15
 800c486:	461a      	mov	r2, r3
 800c488:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 800c48c:	f001 fb46 	bl	800db1c <xrot_i7f01JoJ>
      for (qjj = d; qjj < m + 2; qjj++) {
 800c490:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800c494:	3301      	adds	r3, #1
 800c496:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800c49a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800c49e:	1c5a      	adds	r2, r3, #1
 800c4a0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800c4a4:	4293      	cmp	r3, r2
 800c4a6:	dd96      	ble.n	800c3d6 <svd_u3DvUgOe+0x127e>
      }
      break;
 800c4a8:	e3ec      	b.n	800cc84 <svd_u3DvUgOe+0x1b2c>

     case 3:
      {
        real_T emm1;
        real_T shift;
        sqds = b_s[m + 1];
 800c4aa:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800c4ae:	3301      	adds	r3, #1
 800c4b0:	00db      	lsls	r3, r3, #3
 800c4b2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800c4b6:	4413      	add	r3, r2
 800c4b8:	3ba0      	subs	r3, #160	; 0xa0
 800c4ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4be:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
        ztest = fmax(fmax(fmax(fmax(fabs(sqds), fabs(b_s[m])), fabs(e[m])), fabs
 800c4c2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800c4c6:	633a      	str	r2, [r7, #48]	; 0x30
 800c4c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c4cc:	637b      	str	r3, [r7, #52]	; 0x34
 800c4ce:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800c4d2:	00db      	lsls	r3, r3, #3
 800c4d4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800c4d8:	4413      	add	r3, r2
 800c4da:	3ba0      	subs	r3, #160	; 0xa0
 800c4dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4e0:	62ba      	str	r2, [r7, #40]	; 0x28
 800c4e2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c4e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c4e8:	ed97 1b0a 	vldr	d1, [r7, #40]	; 0x28
 800c4ec:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 800c4f0:	f00a fc10 	bl	8016d14 <fmax>
 800c4f4:	eeb0 7a40 	vmov.f32	s14, s0
 800c4f8:	eef0 7a60 	vmov.f32	s15, s1
 800c4fc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800c500:	00db      	lsls	r3, r3, #3
 800c502:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800c506:	4413      	add	r3, r2
 800c508:	3bb8      	subs	r3, #184	; 0xb8
 800c50a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c50e:	623a      	str	r2, [r7, #32]
 800c510:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c514:	627b      	str	r3, [r7, #36]	; 0x24
 800c516:	ed97 1b08 	vldr	d1, [r7, #32]
 800c51a:	eeb0 0a47 	vmov.f32	s0, s14
 800c51e:	eef0 0a67 	vmov.f32	s1, s15
 800c522:	f00a fbf7 	bl	8016d14 <fmax>
 800c526:	eeb0 7a40 	vmov.f32	s14, s0
 800c52a:	eef0 7a60 	vmov.f32	s15, s1
                          (b_s[d])), fabs(e[d]));
 800c52e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800c532:	00db      	lsls	r3, r3, #3
 800c534:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800c538:	4413      	add	r3, r2
 800c53a:	3ba0      	subs	r3, #160	; 0xa0
 800c53c:	e9d3 2300 	ldrd	r2, r3, [r3]
        ztest = fmax(fmax(fmax(fmax(fabs(sqds), fabs(b_s[m])), fabs(e[m])), fabs
 800c540:	61ba      	str	r2, [r7, #24]
 800c542:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c546:	61fb      	str	r3, [r7, #28]
 800c548:	ed97 1b06 	vldr	d1, [r7, #24]
 800c54c:	eeb0 0a47 	vmov.f32	s0, s14
 800c550:	eef0 0a67 	vmov.f32	s1, s15
 800c554:	f00a fbde 	bl	8016d14 <fmax>
 800c558:	eeb0 7a40 	vmov.f32	s14, s0
 800c55c:	eef0 7a60 	vmov.f32	s15, s1
                          (b_s[d])), fabs(e[d]));
 800c560:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800c564:	00db      	lsls	r3, r3, #3
 800c566:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800c56a:	4413      	add	r3, r2
 800c56c:	3bb8      	subs	r3, #184	; 0xb8
 800c56e:	e9d3 2300 	ldrd	r2, r3, [r3]
        ztest = fmax(fmax(fmax(fmax(fabs(sqds), fabs(b_s[m])), fabs(e[m])), fabs
 800c572:	613a      	str	r2, [r7, #16]
 800c574:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c578:	617b      	str	r3, [r7, #20]
 800c57a:	ed97 1b04 	vldr	d1, [r7, #16]
 800c57e:	eeb0 0a47 	vmov.f32	s0, s14
 800c582:	eef0 0a67 	vmov.f32	s1, s15
 800c586:	f00a fbc5 	bl	8016d14 <fmax>
 800c58a:	eeb0 7a40 	vmov.f32	s14, s0
 800c58e:	eef0 7a60 	vmov.f32	s15, s1
 800c592:	ed87 7b44 	vstr	d7, [r7, #272]	; 0x110
        rt = sqds / ztest;
 800c596:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800c59a:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800c59e:	f7f4 f947 	bl	8000830 <__aeabi_ddiv>
 800c5a2:	4602      	mov	r2, r0
 800c5a4:	460b      	mov	r3, r1
 800c5a6:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
        smm1 = b_s[m] / ztest;
 800c5aa:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800c5ae:	00db      	lsls	r3, r3, #3
 800c5b0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800c5b4:	4413      	add	r3, r2
 800c5b6:	3ba0      	subs	r3, #160	; 0xa0
 800c5b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c5bc:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800c5c0:	f7f4 f936 	bl	8000830 <__aeabi_ddiv>
 800c5c4:	4602      	mov	r2, r0
 800c5c6:	460b      	mov	r3, r1
 800c5c8:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
        emm1 = e[m] / ztest;
 800c5cc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800c5d0:	00db      	lsls	r3, r3, #3
 800c5d2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800c5d6:	4413      	add	r3, r2
 800c5d8:	3bb8      	subs	r3, #184	; 0xb8
 800c5da:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c5de:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800c5e2:	f7f4 f925 	bl	8000830 <__aeabi_ddiv>
 800c5e6:	4602      	mov	r2, r0
 800c5e8:	460b      	mov	r3, r1
 800c5ea:	e9c7 2370 	strd	r2, r3, [r7, #448]	; 0x1c0
        sqds = b_s[d] / ztest;
 800c5ee:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800c5f2:	00db      	lsls	r3, r3, #3
 800c5f4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800c5f8:	4413      	add	r3, r2
 800c5fa:	3ba0      	subs	r3, #160	; 0xa0
 800c5fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c600:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800c604:	f7f4 f914 	bl	8000830 <__aeabi_ddiv>
 800c608:	4602      	mov	r2, r0
 800c60a:	460b      	mov	r3, r1
 800c60c:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
        smm1 = ((smm1 + rt) * (smm1 - rt) + emm1 * emm1) / 2.0;
 800c610:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 800c614:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800c618:	f7f3 fe2a 	bl	8000270 <__adddf3>
 800c61c:	4602      	mov	r2, r0
 800c61e:	460b      	mov	r3, r1
 800c620:	4614      	mov	r4, r2
 800c622:	461d      	mov	r5, r3
 800c624:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 800c628:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800c62c:	f7f3 fe1e 	bl	800026c <__aeabi_dsub>
 800c630:	4602      	mov	r2, r0
 800c632:	460b      	mov	r3, r1
 800c634:	4620      	mov	r0, r4
 800c636:	4629      	mov	r1, r5
 800c638:	f7f3 ffd0 	bl	80005dc <__aeabi_dmul>
 800c63c:	4602      	mov	r2, r0
 800c63e:	460b      	mov	r3, r1
 800c640:	4614      	mov	r4, r2
 800c642:	461d      	mov	r5, r3
 800c644:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	; 0x1c0
 800c648:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	; 0x1c0
 800c64c:	f7f3 ffc6 	bl	80005dc <__aeabi_dmul>
 800c650:	4602      	mov	r2, r0
 800c652:	460b      	mov	r3, r1
 800c654:	4620      	mov	r0, r4
 800c656:	4629      	mov	r1, r5
 800c658:	f7f3 fe0a 	bl	8000270 <__adddf3>
 800c65c:	4602      	mov	r2, r0
 800c65e:	460b      	mov	r3, r1
 800c660:	4610      	mov	r0, r2
 800c662:	4619      	mov	r1, r3
 800c664:	f04f 0200 	mov.w	r2, #0
 800c668:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c66c:	f7f4 f8e0 	bl	8000830 <__aeabi_ddiv>
 800c670:	4602      	mov	r2, r0
 800c672:	460b      	mov	r3, r1
 800c674:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
        emm1 *= rt;
 800c678:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800c67c:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	; 0x1c0
 800c680:	f7f3 ffac 	bl	80005dc <__aeabi_dmul>
 800c684:	4602      	mov	r2, r0
 800c686:	460b      	mov	r3, r1
 800c688:	e9c7 2370 	strd	r2, r3, [r7, #448]	; 0x1c0
        emm1 *= emm1;
 800c68c:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	; 0x1c0
 800c690:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	; 0x1c0
 800c694:	f7f3 ffa2 	bl	80005dc <__aeabi_dmul>
 800c698:	4602      	mov	r2, r0
 800c69a:	460b      	mov	r3, r1
 800c69c:	e9c7 2370 	strd	r2, r3, [r7, #448]	; 0x1c0
        if ((smm1 != 0.0) || (emm1 != 0.0)) {
 800c6a0:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 800c6a4:	f04f 0200 	mov.w	r2, #0
 800c6a8:	f04f 0300 	mov.w	r3, #0
 800c6ac:	f7f4 f9fe 	bl	8000aac <__aeabi_dcmpeq>
 800c6b0:	4603      	mov	r3, r0
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d00a      	beq.n	800c6cc <svd_u3DvUgOe+0x1574>
 800c6b6:	f04f 0200 	mov.w	r2, #0
 800c6ba:	f04f 0300 	mov.w	r3, #0
 800c6be:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	; 0x1c0
 800c6c2:	f7f4 f9f3 	bl	8000aac <__aeabi_dcmpeq>
 800c6c6:	4603      	mov	r3, r0
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d13f      	bne.n	800c74c <svd_u3DvUgOe+0x15f4>
          shift = sqrt(smm1 * smm1 + emm1);
 800c6cc:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 800c6d0:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800c6d4:	f7f3 ff82 	bl	80005dc <__aeabi_dmul>
 800c6d8:	4602      	mov	r2, r0
 800c6da:	460b      	mov	r3, r1
 800c6dc:	4610      	mov	r0, r2
 800c6de:	4619      	mov	r1, r3
 800c6e0:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	; 0x1c0
 800c6e4:	f7f3 fdc4 	bl	8000270 <__adddf3>
 800c6e8:	4602      	mov	r2, r0
 800c6ea:	460b      	mov	r3, r1
 800c6ec:	ec43 2b17 	vmov	d7, r2, r3
 800c6f0:	eeb0 0a47 	vmov.f32	s0, s14
 800c6f4:	eef0 0a67 	vmov.f32	s1, s15
 800c6f8:	f00a fbf6 	bl	8016ee8 <sqrt>
 800c6fc:	ed87 0b74 	vstr	d0, [r7, #464]	; 0x1d0
          if (smm1 < 0.0) {
 800c700:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 800c704:	f04f 0200 	mov.w	r2, #0
 800c708:	f04f 0300 	mov.w	r3, #0
 800c70c:	f7f4 f9d8 	bl	8000ac0 <__aeabi_dcmplt>
 800c710:	4603      	mov	r3, r0
 800c712:	2b00      	cmp	r3, #0
 800c714:	d009      	beq.n	800c72a <svd_u3DvUgOe+0x15d2>
            shift = -shift;
 800c716:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800c71a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 800c71e:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800c722:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800c726:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
          }

          shift = emm1 / (smm1 + shift);
 800c72a:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 800c72e:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	; 0x1d0
 800c732:	f7f3 fd9d 	bl	8000270 <__adddf3>
 800c736:	4602      	mov	r2, r0
 800c738:	460b      	mov	r3, r1
 800c73a:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	; 0x1c0
 800c73e:	f7f4 f877 	bl	8000830 <__aeabi_ddiv>
 800c742:	4602      	mov	r2, r0
 800c744:	460b      	mov	r3, r1
 800c746:	e9c7 2374 	strd	r2, r3, [r7, #464]	; 0x1d0
 800c74a:	e005      	b.n	800c758 <svd_u3DvUgOe+0x1600>
        } else {
          shift = 0.0;
 800c74c:	f04f 0200 	mov.w	r2, #0
 800c750:	f04f 0300 	mov.w	r3, #0
 800c754:	e9c7 2374 	strd	r2, r3, [r7, #464]	; 0x1d0
        }

        rt = (sqds + rt) * (sqds - rt) + shift;
 800c758:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800c75c:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800c760:	f7f3 fd86 	bl	8000270 <__adddf3>
 800c764:	4602      	mov	r2, r0
 800c766:	460b      	mov	r3, r1
 800c768:	4614      	mov	r4, r2
 800c76a:	461d      	mov	r5, r3
 800c76c:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800c770:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800c774:	f7f3 fd7a 	bl	800026c <__aeabi_dsub>
 800c778:	4602      	mov	r2, r0
 800c77a:	460b      	mov	r3, r1
 800c77c:	4620      	mov	r0, r4
 800c77e:	4629      	mov	r1, r5
 800c780:	f7f3 ff2c 	bl	80005dc <__aeabi_dmul>
 800c784:	4602      	mov	r2, r0
 800c786:	460b      	mov	r3, r1
 800c788:	4610      	mov	r0, r2
 800c78a:	4619      	mov	r1, r3
 800c78c:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	; 0x1d0
 800c790:	f7f3 fd6e 	bl	8000270 <__adddf3>
 800c794:	4602      	mov	r2, r0
 800c796:	460b      	mov	r3, r1
 800c798:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
        ztest = e[d] / ztest * sqds;
 800c79c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800c7a0:	00db      	lsls	r3, r3, #3
 800c7a2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800c7a6:	4413      	add	r3, r2
 800c7a8:	3bb8      	subs	r3, #184	; 0xb8
 800c7aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c7ae:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800c7b2:	f7f4 f83d 	bl	8000830 <__aeabi_ddiv>
 800c7b6:	4602      	mov	r2, r0
 800c7b8:	460b      	mov	r3, r1
 800c7ba:	4610      	mov	r0, r2
 800c7bc:	4619      	mov	r1, r3
 800c7be:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800c7c2:	f7f3 ff0b 	bl	80005dc <__aeabi_dmul>
 800c7c6:	4602      	mov	r2, r0
 800c7c8:	460b      	mov	r3, r1
 800c7ca:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
        for (qjj = d + 1; qjj <= m + 1; qjj++) {
 800c7ce:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800c7d2:	3301      	adds	r3, #1
 800c7d4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800c7d8:	e183      	b.n	800cae2 <svd_u3DvUgOe+0x198a>
          xrotg_XzIjz1eG(&rt, &ztest, &sqds, &smm1);
 800c7da:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800c7de:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800c7e2:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800c7e6:	f507 7094 	add.w	r0, r7, #296	; 0x128
 800c7ea:	f001 fab3 	bl	800dd54 <xrotg_XzIjz1eG>
          if (qjj > d + 1) {
 800c7ee:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800c7f2:	1c5a      	adds	r2, r3, #1
 800c7f4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800c7f8:	4293      	cmp	r3, r2
 800c7fa:	dd03      	ble.n	800c804 <svd_u3DvUgOe+0x16ac>
            e[0] = rt;
 800c7fc:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800c800:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
          }

          rt = e[qjj - 1];
 800c804:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800c808:	3b01      	subs	r3, #1
 800c80a:	00db      	lsls	r3, r3, #3
 800c80c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800c810:	4413      	add	r3, r2
 800c812:	3bb8      	subs	r3, #184	; 0xb8
 800c814:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c818:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
          emm1 = b_s[qjj - 1];
 800c81c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800c820:	3b01      	subs	r3, #1
 800c822:	00db      	lsls	r3, r3, #3
 800c824:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800c828:	4413      	add	r3, r2
 800c82a:	3ba0      	subs	r3, #160	; 0xa0
 800c82c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c830:	e9c7 2370 	strd	r2, r3, [r7, #448]	; 0x1c0
          e[qjj - 1] = rt * sqds - emm1 * smm1;
 800c834:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800c838:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800c83c:	f7f3 fece 	bl	80005dc <__aeabi_dmul>
 800c840:	4602      	mov	r2, r0
 800c842:	460b      	mov	r3, r1
 800c844:	4690      	mov	r8, r2
 800c846:	4699      	mov	r9, r3
 800c848:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 800c84c:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	; 0x1c0
 800c850:	f7f3 fec4 	bl	80005dc <__aeabi_dmul>
 800c854:	4602      	mov	r2, r0
 800c856:	460b      	mov	r3, r1
 800c858:	4610      	mov	r0, r2
 800c85a:	4619      	mov	r1, r3
 800c85c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800c860:	1e5c      	subs	r4, r3, #1
 800c862:	4602      	mov	r2, r0
 800c864:	460b      	mov	r3, r1
 800c866:	4640      	mov	r0, r8
 800c868:	4649      	mov	r1, r9
 800c86a:	f7f3 fcff 	bl	800026c <__aeabi_dsub>
 800c86e:	4602      	mov	r2, r0
 800c870:	460b      	mov	r3, r1
 800c872:	4610      	mov	r0, r2
 800c874:	4619      	mov	r1, r3
 800c876:	00e3      	lsls	r3, r4, #3
 800c878:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800c87c:	4413      	add	r3, r2
 800c87e:	3bb8      	subs	r3, #184	; 0xb8
 800c880:	e9c3 0100 	strd	r0, r1, [r3]
          ztest = smm1 * b_s[qjj];
 800c884:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800c888:	00db      	lsls	r3, r3, #3
 800c88a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800c88e:	4413      	add	r3, r2
 800c890:	3ba0      	subs	r3, #160	; 0xa0
 800c892:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c896:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800c89a:	f7f3 fe9f 	bl	80005dc <__aeabi_dmul>
 800c89e:	4602      	mov	r2, r0
 800c8a0:	460b      	mov	r3, r1
 800c8a2:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
          b_s[qjj] *= sqds;
 800c8a6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800c8aa:	00db      	lsls	r3, r3, #3
 800c8ac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800c8b0:	4413      	add	r3, r2
 800c8b2:	3ba0      	subs	r3, #160	; 0xa0
 800c8b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c8b8:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800c8bc:	f7f3 fe8e 	bl	80005dc <__aeabi_dmul>
 800c8c0:	4602      	mov	r2, r0
 800c8c2:	460b      	mov	r3, r1
 800c8c4:	4610      	mov	r0, r2
 800c8c6:	4619      	mov	r1, r3
 800c8c8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800c8cc:	00db      	lsls	r3, r3, #3
 800c8ce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800c8d2:	4413      	add	r3, r2
 800c8d4:	3ba0      	subs	r3, #160	; 0xa0
 800c8d6:	e9c3 0100 	strd	r0, r1, [r3]
          xrot_i7f01JoJ(V, 3 * (qjj - 1) + 1, 3 * qjj + 1, sqds, smm1);
 800c8da:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800c8de:	1e5a      	subs	r2, r3, #1
 800c8e0:	4613      	mov	r3, r2
 800c8e2:	005b      	lsls	r3, r3, #1
 800c8e4:	4413      	add	r3, r2
 800c8e6:	1c59      	adds	r1, r3, #1
 800c8e8:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 800c8ec:	4613      	mov	r3, r2
 800c8ee:	005b      	lsls	r3, r3, #1
 800c8f0:	4413      	add	r3, r2
 800c8f2:	1c5a      	adds	r2, r3, #1
 800c8f4:	ed97 7b46 	vldr	d7, [r7, #280]	; 0x118
 800c8f8:	ed97 6b48 	vldr	d6, [r7, #288]	; 0x120
 800c8fc:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800c900:	eeb0 1a46 	vmov.f32	s2, s12
 800c904:	eef0 1a66 	vmov.f32	s3, s13
 800c908:	eeb0 0a47 	vmov.f32	s0, s14
 800c90c:	eef0 0a67 	vmov.f32	s1, s15
 800c910:	6818      	ldr	r0, [r3, #0]
 800c912:	f001 f903 	bl	800db1c <xrot_i7f01JoJ>
          b_s[qjj - 1] = emm1 * sqds + rt * smm1;
 800c916:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800c91a:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	; 0x1c0
 800c91e:	f7f3 fe5d 	bl	80005dc <__aeabi_dmul>
 800c922:	4602      	mov	r2, r0
 800c924:	460b      	mov	r3, r1
 800c926:	4690      	mov	r8, r2
 800c928:	4699      	mov	r9, r3
 800c92a:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800c92e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800c932:	f7f3 fe53 	bl	80005dc <__aeabi_dmul>
 800c936:	4602      	mov	r2, r0
 800c938:	460b      	mov	r3, r1
 800c93a:	4610      	mov	r0, r2
 800c93c:	4619      	mov	r1, r3
 800c93e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800c942:	1e5c      	subs	r4, r3, #1
 800c944:	4602      	mov	r2, r0
 800c946:	460b      	mov	r3, r1
 800c948:	4640      	mov	r0, r8
 800c94a:	4649      	mov	r1, r9
 800c94c:	f7f3 fc90 	bl	8000270 <__adddf3>
 800c950:	4602      	mov	r2, r0
 800c952:	460b      	mov	r3, r1
 800c954:	4610      	mov	r0, r2
 800c956:	4619      	mov	r1, r3
 800c958:	00e3      	lsls	r3, r4, #3
 800c95a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800c95e:	4413      	add	r3, r2
 800c960:	3ba0      	subs	r3, #160	; 0xa0
 800c962:	e9c3 0100 	strd	r0, r1, [r3]
          xrotg_XzIjz1eG(&b_s[qjj - 1], &ztest, &sqds, &smm1);
 800c966:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800c96a:	3b01      	subs	r3, #1
 800c96c:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 800c970:	00db      	lsls	r3, r3, #3
 800c972:	18d0      	adds	r0, r2, r3
 800c974:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800c978:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800c97c:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800c980:	f001 f9e8 	bl	800dd54 <xrotg_XzIjz1eG>
          rt = e[qjj - 1] * sqds + smm1 * b_s[qjj];
 800c984:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800c988:	3b01      	subs	r3, #1
 800c98a:	00db      	lsls	r3, r3, #3
 800c98c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800c990:	4413      	add	r3, r2
 800c992:	3bb8      	subs	r3, #184	; 0xb8
 800c994:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c998:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800c99c:	f7f3 fe1e 	bl	80005dc <__aeabi_dmul>
 800c9a0:	4602      	mov	r2, r0
 800c9a2:	460b      	mov	r3, r1
 800c9a4:	4614      	mov	r4, r2
 800c9a6:	461d      	mov	r5, r3
 800c9a8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800c9ac:	00db      	lsls	r3, r3, #3
 800c9ae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800c9b2:	4413      	add	r3, r2
 800c9b4:	3ba0      	subs	r3, #160	; 0xa0
 800c9b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c9ba:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800c9be:	f7f3 fe0d 	bl	80005dc <__aeabi_dmul>
 800c9c2:	4602      	mov	r2, r0
 800c9c4:	460b      	mov	r3, r1
 800c9c6:	4620      	mov	r0, r4
 800c9c8:	4629      	mov	r1, r5
 800c9ca:	f7f3 fc51 	bl	8000270 <__adddf3>
 800c9ce:	4602      	mov	r2, r0
 800c9d0:	460b      	mov	r3, r1
 800c9d2:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
          b_s[qjj] = e[qjj - 1] * -smm1 + sqds * b_s[qjj];
 800c9d6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800c9da:	3b01      	subs	r3, #1
 800c9dc:	00db      	lsls	r3, r3, #3
 800c9de:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800c9e2:	4413      	add	r3, r2
 800c9e4:	3bb8      	subs	r3, #184	; 0xb8
 800c9e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c9ea:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800c9ee:	60ba      	str	r2, [r7, #8]
 800c9f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800c9f4:	60fb      	str	r3, [r7, #12]
 800c9f6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c9fa:	f7f3 fdef 	bl	80005dc <__aeabi_dmul>
 800c9fe:	4602      	mov	r2, r0
 800ca00:	460b      	mov	r3, r1
 800ca02:	4614      	mov	r4, r2
 800ca04:	461d      	mov	r5, r3
 800ca06:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800ca0a:	00db      	lsls	r3, r3, #3
 800ca0c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800ca10:	4413      	add	r3, r2
 800ca12:	3ba0      	subs	r3, #160	; 0xa0
 800ca14:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ca18:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800ca1c:	f7f3 fdde 	bl	80005dc <__aeabi_dmul>
 800ca20:	4602      	mov	r2, r0
 800ca22:	460b      	mov	r3, r1
 800ca24:	4620      	mov	r0, r4
 800ca26:	4629      	mov	r1, r5
 800ca28:	f7f3 fc22 	bl	8000270 <__adddf3>
 800ca2c:	4602      	mov	r2, r0
 800ca2e:	460b      	mov	r3, r1
 800ca30:	4610      	mov	r0, r2
 800ca32:	4619      	mov	r1, r3
 800ca34:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800ca38:	00db      	lsls	r3, r3, #3
 800ca3a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800ca3e:	4413      	add	r3, r2
 800ca40:	3ba0      	subs	r3, #160	; 0xa0
 800ca42:	e9c3 0100 	strd	r0, r1, [r3]
          ztest = smm1 * e[qjj];
 800ca46:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800ca4a:	00db      	lsls	r3, r3, #3
 800ca4c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800ca50:	4413      	add	r3, r2
 800ca52:	3bb8      	subs	r3, #184	; 0xb8
 800ca54:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ca58:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800ca5c:	f7f3 fdbe 	bl	80005dc <__aeabi_dmul>
 800ca60:	4602      	mov	r2, r0
 800ca62:	460b      	mov	r3, r1
 800ca64:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
          e[qjj] *= sqds;
 800ca68:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800ca6c:	00db      	lsls	r3, r3, #3
 800ca6e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800ca72:	4413      	add	r3, r2
 800ca74:	3bb8      	subs	r3, #184	; 0xb8
 800ca76:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ca7a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800ca7e:	f7f3 fdad 	bl	80005dc <__aeabi_dmul>
 800ca82:	4602      	mov	r2, r0
 800ca84:	460b      	mov	r3, r1
 800ca86:	4610      	mov	r0, r2
 800ca88:	4619      	mov	r1, r3
 800ca8a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800ca8e:	00db      	lsls	r3, r3, #3
 800ca90:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800ca94:	4413      	add	r3, r2
 800ca96:	3bb8      	subs	r3, #184	; 0xb8
 800ca98:	e9c3 0100 	strd	r0, r1, [r3]
          xrot_i7f01JoJ(U, 3 * (qjj - 1) + 1, 3 * qjj + 1, sqds, smm1);
 800ca9c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800caa0:	1e5a      	subs	r2, r3, #1
 800caa2:	4613      	mov	r3, r2
 800caa4:	005b      	lsls	r3, r3, #1
 800caa6:	4413      	add	r3, r2
 800caa8:	1c59      	adds	r1, r3, #1
 800caaa:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 800caae:	4613      	mov	r3, r2
 800cab0:	005b      	lsls	r3, r3, #1
 800cab2:	4413      	add	r3, r2
 800cab4:	3301      	adds	r3, #1
 800cab6:	ed97 7b46 	vldr	d7, [r7, #280]	; 0x118
 800caba:	ed97 6b48 	vldr	d6, [r7, #288]	; 0x120
 800cabe:	eeb0 1a46 	vmov.f32	s2, s12
 800cac2:	eef0 1a66 	vmov.f32	s3, s13
 800cac6:	eeb0 0a47 	vmov.f32	s0, s14
 800caca:	eef0 0a67 	vmov.f32	s1, s15
 800cace:	461a      	mov	r2, r3
 800cad0:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 800cad4:	f001 f822 	bl	800db1c <xrot_i7f01JoJ>
        for (qjj = d + 1; qjj <= m + 1; qjj++) {
 800cad8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800cadc:	3301      	adds	r3, #1
 800cade:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800cae2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800cae6:	1c5a      	adds	r2, r3, #1
 800cae8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800caec:	4293      	cmp	r3, r2
 800caee:	f77f ae74 	ble.w	800c7da <svd_u3DvUgOe+0x1682>
        }

        e[m] = rt;
 800caf2:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800caf6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800cafa:	00db      	lsls	r3, r3, #3
 800cafc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800cb00:	4413      	add	r3, r2
 800cb02:	3bb8      	subs	r3, #184	; 0xb8
 800cb04:	e9c3 0100 	strd	r0, r1, [r3]
        qq++;
 800cb08:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800cb0c:	3301      	adds	r3, #1
 800cb0e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
      }
      break;
 800cb12:	e0b7      	b.n	800cc84 <svd_u3DvUgOe+0x1b2c>

     default:
      if (b_s[d] < 0.0) {
 800cb14:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800cb18:	00db      	lsls	r3, r3, #3
 800cb1a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800cb1e:	4413      	add	r3, r2
 800cb20:	3ba0      	subs	r3, #160	; 0xa0
 800cb22:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cb26:	f04f 0200 	mov.w	r2, #0
 800cb2a:	f04f 0300 	mov.w	r3, #0
 800cb2e:	f7f3 ffc7 	bl	8000ac0 <__aeabi_dcmplt>
 800cb32:	4603      	mov	r3, r0
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d025      	beq.n	800cb84 <svd_u3DvUgOe+0x1a2c>
        b_s[d] = -b_s[d];
 800cb38:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800cb3c:	00db      	lsls	r3, r3, #3
 800cb3e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800cb42:	4413      	add	r3, r2
 800cb44:	3ba0      	subs	r3, #160	; 0xa0
 800cb46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb4a:	603a      	str	r2, [r7, #0]
 800cb4c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800cb50:	607b      	str	r3, [r7, #4]
 800cb52:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800cb56:	00db      	lsls	r3, r3, #3
 800cb58:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800cb5c:	4413      	add	r3, r2
 800cb5e:	3ba0      	subs	r3, #160	; 0xa0
 800cb60:	ed97 7b00 	vldr	d7, [r7]
 800cb64:	ed83 7b00 	vstr	d7, [r3]
        xscal_eaAxXsvQ(-1.0, V, 3 * d + 1);
 800cb68:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 800cb6c:	4613      	mov	r3, r2
 800cb6e:	005b      	lsls	r3, r3, #1
 800cb70:	4413      	add	r3, r2
 800cb72:	1c5a      	adds	r2, r3, #1
 800cb74:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800cb78:	4611      	mov	r1, r2
 800cb7a:	6818      	ldr	r0, [r3, #0]
 800cb7c:	ed9f 0b56 	vldr	d0, [pc, #344]	; 800ccd8 <svd_u3DvUgOe+0x1b80>
 800cb80:	f001 fa4e 	bl	800e020 <xscal_eaAxXsvQ>
      }

      qq = d + 1;
 800cb84:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800cb88:	3301      	adds	r3, #1
 800cb8a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
      while ((d + 1 < 3) && (b_s[d] < b_s[qq])) {
 800cb8e:	e055      	b.n	800cc3c <svd_u3DvUgOe+0x1ae4>
        rt = b_s[d];
 800cb90:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800cb94:	00db      	lsls	r3, r3, #3
 800cb96:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800cb9a:	4413      	add	r3, r2
 800cb9c:	3ba0      	subs	r3, #160	; 0xa0
 800cb9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cba2:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
        b_s[d] = b_s[qq];
 800cba6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800cbaa:	00db      	lsls	r3, r3, #3
 800cbac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800cbb0:	4413      	add	r3, r2
 800cbb2:	3ba0      	subs	r3, #160	; 0xa0
 800cbb4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cbb8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800cbbc:	00db      	lsls	r3, r3, #3
 800cbbe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800cbc2:	4413      	add	r3, r2
 800cbc4:	3ba0      	subs	r3, #160	; 0xa0
 800cbc6:	e9c3 0100 	strd	r0, r1, [r3]
        b_s[qq] = rt;
 800cbca:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800cbce:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800cbd2:	00db      	lsls	r3, r3, #3
 800cbd4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800cbd8:	4413      	add	r3, r2
 800cbda:	3ba0      	subs	r3, #160	; 0xa0
 800cbdc:	e9c3 0100 	strd	r0, r1, [r3]
        xswap_JoAqPjUv(V, 3 * d + 1, 3 * (d + 1) + 1);
 800cbe0:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 800cbe4:	4613      	mov	r3, r2
 800cbe6:	005b      	lsls	r3, r3, #1
 800cbe8:	4413      	add	r3, r2
 800cbea:	1c59      	adds	r1, r3, #1
 800cbec:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800cbf0:	1c5a      	adds	r2, r3, #1
 800cbf2:	4613      	mov	r3, r2
 800cbf4:	005b      	lsls	r3, r3, #1
 800cbf6:	4413      	add	r3, r2
 800cbf8:	3301      	adds	r3, #1
 800cbfa:	f507 7080 	add.w	r0, r7, #256	; 0x100
 800cbfe:	461a      	mov	r2, r3
 800cc00:	6800      	ldr	r0, [r0, #0]
 800cc02:	f001 fa3c 	bl	800e07e <xswap_JoAqPjUv>
        xswap_JoAqPjUv(U, 3 * d + 1, 3 * (d + 1) + 1);
 800cc06:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 800cc0a:	4613      	mov	r3, r2
 800cc0c:	005b      	lsls	r3, r3, #1
 800cc0e:	4413      	add	r3, r2
 800cc10:	1c59      	adds	r1, r3, #1
 800cc12:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800cc16:	1c5a      	adds	r2, r3, #1
 800cc18:	4613      	mov	r3, r2
 800cc1a:	005b      	lsls	r3, r3, #1
 800cc1c:	4413      	add	r3, r2
 800cc1e:	3301      	adds	r3, #1
 800cc20:	461a      	mov	r2, r3
 800cc22:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 800cc26:	f001 fa2a 	bl	800e07e <xswap_JoAqPjUv>
        d = qq;
 800cc2a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800cc2e:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
        qq++;
 800cc32:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800cc36:	3301      	adds	r3, #1
 800cc38:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
      while ((d + 1 < 3) && (b_s[d] < b_s[qq])) {
 800cc3c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800cc40:	2b01      	cmp	r3, #1
 800cc42:	dc16      	bgt.n	800cc72 <svd_u3DvUgOe+0x1b1a>
 800cc44:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800cc48:	00db      	lsls	r3, r3, #3
 800cc4a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800cc4e:	4413      	add	r3, r2
 800cc50:	3ba0      	subs	r3, #160	; 0xa0
 800cc52:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cc56:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800cc5a:	00db      	lsls	r3, r3, #3
 800cc5c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800cc60:	4413      	add	r3, r2
 800cc62:	3ba0      	subs	r3, #160	; 0xa0
 800cc64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc68:	f7f3 ff2a 	bl	8000ac0 <__aeabi_dcmplt>
 800cc6c:	4603      	mov	r3, r0
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d18e      	bne.n	800cb90 <svd_u3DvUgOe+0x1a38>
      }

      qq = 0;
 800cc72:	2300      	movs	r3, #0
 800cc74:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
      m--;
 800cc78:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800cc7c:	3b01      	subs	r3, #1
 800cc7e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
      break;
 800cc82:	bf00      	nop
  while ((m + 2 > 0) && (qq < 75)) {
 800cc84:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800cc88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc8c:	db04      	blt.n	800cc98 <svd_u3DvUgOe+0x1b40>
 800cc8e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800cc92:	2b4a      	cmp	r3, #74	; 0x4a
 800cc94:	f77f a972 	ble.w	800bf7c <svd_u3DvUgOe+0xe24>
    }
  }

  s[0] = b_s[0];
 800cc98:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 800cc9c:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 800cca0:	e9c1 2300 	strd	r2, r3, [r1]
  s[1] = b_s[1];
 800cca4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cca8:	f103 0108 	add.w	r1, r3, #8
 800ccac:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 800ccb0:	e9c1 2300 	strd	r2, r3, [r1]
  s[2] = b_s[2];
 800ccb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ccb8:	f103 0110 	add.w	r1, r3, #16
 800ccbc:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800ccc0:	e9c1 2300 	strd	r2, r3, [r1]
}
 800ccc4:	bf00      	nop
 800ccc6:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800ccca:	46bd      	mov	sp, r7
 800cccc:	ecbd 8b02 	vpop	{d8}
 800ccd0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ccd4:	f3af 8000 	nop.w
 800ccd8:	00000000 	.word	0x00000000
 800ccdc:	bff00000 	.word	0xbff00000

0800cce0 <trisolve_BC1XmAGq>:
#include "rtwtypes.h"
#include "trisolve_BC1XmAGq.h"

void trisolve_BC1XmAGq(real_T A, real_T B[3])
{
 800cce0:	b590      	push	{r4, r7, lr}
 800cce2:	b085      	sub	sp, #20
 800cce4:	af00      	add	r7, sp, #0
 800cce6:	ed87 0b02 	vstr	d0, [r7, #8]
 800ccea:	6078      	str	r0, [r7, #4]
  if (B[0] != 0.0) {
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ccf2:	f04f 0200 	mov.w	r2, #0
 800ccf6:	f04f 0300 	mov.w	r3, #0
 800ccfa:	f7f3 fed7 	bl	8000aac <__aeabi_dcmpeq>
 800ccfe:	4603      	mov	r3, r0
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d10b      	bne.n	800cd1c <trisolve_BC1XmAGq+0x3c>
    B[0] /= A;
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cd0a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800cd0e:	f7f3 fd8f 	bl	8000830 <__aeabi_ddiv>
 800cd12:	4602      	mov	r2, r0
 800cd14:	460b      	mov	r3, r1
 800cd16:	6879      	ldr	r1, [r7, #4]
 800cd18:	e9c1 2300 	strd	r2, r3, [r1]
  }

  if (B[1] != 0.0) {
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	3308      	adds	r3, #8
 800cd20:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cd24:	f04f 0200 	mov.w	r2, #0
 800cd28:	f04f 0300 	mov.w	r3, #0
 800cd2c:	f7f3 febe 	bl	8000aac <__aeabi_dcmpeq>
 800cd30:	4603      	mov	r3, r0
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d10e      	bne.n	800cd54 <trisolve_BC1XmAGq+0x74>
    B[1] /= A;
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	3308      	adds	r3, #8
 800cd3a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	f103 0408 	add.w	r4, r3, #8
 800cd44:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800cd48:	f7f3 fd72 	bl	8000830 <__aeabi_ddiv>
 800cd4c:	4602      	mov	r2, r0
 800cd4e:	460b      	mov	r3, r1
 800cd50:	e9c4 2300 	strd	r2, r3, [r4]
  }

  if (B[2] != 0.0) {
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	3310      	adds	r3, #16
 800cd58:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cd5c:	f04f 0200 	mov.w	r2, #0
 800cd60:	f04f 0300 	mov.w	r3, #0
 800cd64:	f7f3 fea2 	bl	8000aac <__aeabi_dcmpeq>
 800cd68:	4603      	mov	r3, r0
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d000      	beq.n	800cd70 <trisolve_BC1XmAGq+0x90>
    B[2] /= A;
  }
}
 800cd6e:	e00e      	b.n	800cd8e <trisolve_BC1XmAGq+0xae>
    B[2] /= A;
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	3310      	adds	r3, #16
 800cd74:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	f103 0410 	add.w	r4, r3, #16
 800cd7e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800cd82:	f7f3 fd55 	bl	8000830 <__aeabi_ddiv>
 800cd86:	4602      	mov	r2, r0
 800cd88:	460b      	mov	r3, r1
 800cd8a:	e9c4 2300 	strd	r2, r3, [r4]
}
 800cd8e:	bf00      	nop
 800cd90:	3714      	adds	r7, #20
 800cd92:	46bd      	mov	sp, r7
 800cd94:	bd90      	pop	{r4, r7, pc}

0800cd96 <xaxpy_OQ28XA21>:
#include "rtwtypes.h"
#include "xaxpy_OQ28XA21.h"

void xaxpy_OQ28XA21(int32_T n, real_T a, const real_T x[9], int32_T ix0, real_T
                    y[3], int32_T iy0)
{
 800cd96:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd98:	b08b      	sub	sp, #44	; 0x2c
 800cd9a:	af00      	add	r7, sp, #0
 800cd9c:	6178      	str	r0, [r7, #20]
 800cd9e:	ed87 0b02 	vstr	d0, [r7, #8]
 800cda2:	6139      	str	r1, [r7, #16]
 800cda4:	607a      	str	r2, [r7, #4]
 800cda6:	603b      	str	r3, [r7, #0]
  int32_T k;
  if ((n >= 1) && (!(a == 0.0))) {
 800cda8:	697b      	ldr	r3, [r7, #20]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	dd43      	ble.n	800ce36 <xaxpy_OQ28XA21+0xa0>
 800cdae:	f04f 0200 	mov.w	r2, #0
 800cdb2:	f04f 0300 	mov.w	r3, #0
 800cdb6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800cdba:	f7f3 fe77 	bl	8000aac <__aeabi_dcmpeq>
 800cdbe:	4603      	mov	r3, r0
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d000      	beq.n	800cdc6 <xaxpy_OQ28XA21+0x30>
      y[iy] += a * x[ix];
      ix++;
      iy++;
    }
  }
}
 800cdc4:	e037      	b.n	800ce36 <xaxpy_OQ28XA21+0xa0>
    ix = ix0 - 1;
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	3b01      	subs	r3, #1
 800cdca:	623b      	str	r3, [r7, #32]
    iy = iy0 - 1;
 800cdcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cdce:	3b01      	subs	r3, #1
 800cdd0:	61fb      	str	r3, [r7, #28]
    for (k = 0; k < n; k++) {
 800cdd2:	2300      	movs	r3, #0
 800cdd4:	627b      	str	r3, [r7, #36]	; 0x24
 800cdd6:	e02a      	b.n	800ce2e <xaxpy_OQ28XA21+0x98>
      y[iy] += a * x[ix];
 800cdd8:	69fb      	ldr	r3, [r7, #28]
 800cdda:	00db      	lsls	r3, r3, #3
 800cddc:	683a      	ldr	r2, [r7, #0]
 800cdde:	4413      	add	r3, r2
 800cde0:	e9d3 4500 	ldrd	r4, r5, [r3]
 800cde4:	6a3b      	ldr	r3, [r7, #32]
 800cde6:	00db      	lsls	r3, r3, #3
 800cde8:	693a      	ldr	r2, [r7, #16]
 800cdea:	4413      	add	r3, r2
 800cdec:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cdf0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800cdf4:	f7f3 fbf2 	bl	80005dc <__aeabi_dmul>
 800cdf8:	4602      	mov	r2, r0
 800cdfa:	460b      	mov	r3, r1
 800cdfc:	4610      	mov	r0, r2
 800cdfe:	4619      	mov	r1, r3
 800ce00:	69fb      	ldr	r3, [r7, #28]
 800ce02:	00db      	lsls	r3, r3, #3
 800ce04:	683a      	ldr	r2, [r7, #0]
 800ce06:	18d6      	adds	r6, r2, r3
 800ce08:	4602      	mov	r2, r0
 800ce0a:	460b      	mov	r3, r1
 800ce0c:	4620      	mov	r0, r4
 800ce0e:	4629      	mov	r1, r5
 800ce10:	f7f3 fa2e 	bl	8000270 <__adddf3>
 800ce14:	4602      	mov	r2, r0
 800ce16:	460b      	mov	r3, r1
 800ce18:	e9c6 2300 	strd	r2, r3, [r6]
      ix++;
 800ce1c:	6a3b      	ldr	r3, [r7, #32]
 800ce1e:	3301      	adds	r3, #1
 800ce20:	623b      	str	r3, [r7, #32]
      iy++;
 800ce22:	69fb      	ldr	r3, [r7, #28]
 800ce24:	3301      	adds	r3, #1
 800ce26:	61fb      	str	r3, [r7, #28]
    for (k = 0; k < n; k++) {
 800ce28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce2a:	3301      	adds	r3, #1
 800ce2c:	627b      	str	r3, [r7, #36]	; 0x24
 800ce2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ce30:	697b      	ldr	r3, [r7, #20]
 800ce32:	429a      	cmp	r2, r3
 800ce34:	dbd0      	blt.n	800cdd8 <xaxpy_OQ28XA21+0x42>
}
 800ce36:	bf00      	nop
 800ce38:	372c      	adds	r7, #44	; 0x2c
 800ce3a:	46bd      	mov	sp, r7
 800ce3c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ce3e <xaxpy_Wxch84Fl>:
#include "rtwtypes.h"
#include "xaxpy_Wxch84Fl.h"

void xaxpy_Wxch84Fl(int32_T n, real_T a, const real_T x[3], int32_T ix0, real_T
                    y[9], int32_T iy0)
{
 800ce3e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce40:	b08b      	sub	sp, #44	; 0x2c
 800ce42:	af00      	add	r7, sp, #0
 800ce44:	6178      	str	r0, [r7, #20]
 800ce46:	ed87 0b02 	vstr	d0, [r7, #8]
 800ce4a:	6139      	str	r1, [r7, #16]
 800ce4c:	607a      	str	r2, [r7, #4]
 800ce4e:	603b      	str	r3, [r7, #0]
  int32_T k;
  if ((n >= 1) && (!(a == 0.0))) {
 800ce50:	697b      	ldr	r3, [r7, #20]
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	dd43      	ble.n	800cede <xaxpy_Wxch84Fl+0xa0>
 800ce56:	f04f 0200 	mov.w	r2, #0
 800ce5a:	f04f 0300 	mov.w	r3, #0
 800ce5e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ce62:	f7f3 fe23 	bl	8000aac <__aeabi_dcmpeq>
 800ce66:	4603      	mov	r3, r0
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d000      	beq.n	800ce6e <xaxpy_Wxch84Fl+0x30>
      y[iy] += a * x[ix];
      ix++;
      iy++;
    }
  }
}
 800ce6c:	e037      	b.n	800cede <xaxpy_Wxch84Fl+0xa0>
    ix = ix0 - 1;
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	3b01      	subs	r3, #1
 800ce72:	623b      	str	r3, [r7, #32]
    iy = iy0 - 1;
 800ce74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ce76:	3b01      	subs	r3, #1
 800ce78:	61fb      	str	r3, [r7, #28]
    for (k = 0; k < n; k++) {
 800ce7a:	2300      	movs	r3, #0
 800ce7c:	627b      	str	r3, [r7, #36]	; 0x24
 800ce7e:	e02a      	b.n	800ced6 <xaxpy_Wxch84Fl+0x98>
      y[iy] += a * x[ix];
 800ce80:	69fb      	ldr	r3, [r7, #28]
 800ce82:	00db      	lsls	r3, r3, #3
 800ce84:	683a      	ldr	r2, [r7, #0]
 800ce86:	4413      	add	r3, r2
 800ce88:	e9d3 4500 	ldrd	r4, r5, [r3]
 800ce8c:	6a3b      	ldr	r3, [r7, #32]
 800ce8e:	00db      	lsls	r3, r3, #3
 800ce90:	693a      	ldr	r2, [r7, #16]
 800ce92:	4413      	add	r3, r2
 800ce94:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ce98:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ce9c:	f7f3 fb9e 	bl	80005dc <__aeabi_dmul>
 800cea0:	4602      	mov	r2, r0
 800cea2:	460b      	mov	r3, r1
 800cea4:	4610      	mov	r0, r2
 800cea6:	4619      	mov	r1, r3
 800cea8:	69fb      	ldr	r3, [r7, #28]
 800ceaa:	00db      	lsls	r3, r3, #3
 800ceac:	683a      	ldr	r2, [r7, #0]
 800ceae:	18d6      	adds	r6, r2, r3
 800ceb0:	4602      	mov	r2, r0
 800ceb2:	460b      	mov	r3, r1
 800ceb4:	4620      	mov	r0, r4
 800ceb6:	4629      	mov	r1, r5
 800ceb8:	f7f3 f9da 	bl	8000270 <__adddf3>
 800cebc:	4602      	mov	r2, r0
 800cebe:	460b      	mov	r3, r1
 800cec0:	e9c6 2300 	strd	r2, r3, [r6]
      ix++;
 800cec4:	6a3b      	ldr	r3, [r7, #32]
 800cec6:	3301      	adds	r3, #1
 800cec8:	623b      	str	r3, [r7, #32]
      iy++;
 800ceca:	69fb      	ldr	r3, [r7, #28]
 800cecc:	3301      	adds	r3, #1
 800cece:	61fb      	str	r3, [r7, #28]
    for (k = 0; k < n; k++) {
 800ced0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ced2:	3301      	adds	r3, #1
 800ced4:	627b      	str	r3, [r7, #36]	; 0x24
 800ced6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ced8:	697b      	ldr	r3, [r7, #20]
 800ceda:	429a      	cmp	r2, r3
 800cedc:	dbd0      	blt.n	800ce80 <xaxpy_Wxch84Fl+0x42>
}
 800cede:	bf00      	nop
 800cee0:	372c      	adds	r7, #44	; 0x2c
 800cee2:	46bd      	mov	sp, r7
 800cee4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cee6 <xaxpy_guu0hJif>:
#include "rtwtypes.h"
#include "xaxpy_guu0hJif.h"

void xaxpy_guu0hJif(int32_T n, real_T a, int32_T ix0, real_T y[9], int32_T iy0)
{
 800cee6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cee8:	b08b      	sub	sp, #44	; 0x2c
 800ceea:	af00      	add	r7, sp, #0
 800ceec:	6178      	str	r0, [r7, #20]
 800ceee:	ed87 0b02 	vstr	d0, [r7, #8]
 800cef2:	6139      	str	r1, [r7, #16]
 800cef4:	607a      	str	r2, [r7, #4]
 800cef6:	603b      	str	r3, [r7, #0]
  int32_T k;
  if ((n >= 1) && (!(a == 0.0))) {
 800cef8:	697b      	ldr	r3, [r7, #20]
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	dd43      	ble.n	800cf86 <xaxpy_guu0hJif+0xa0>
 800cefe:	f04f 0200 	mov.w	r2, #0
 800cf02:	f04f 0300 	mov.w	r3, #0
 800cf06:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800cf0a:	f7f3 fdcf 	bl	8000aac <__aeabi_dcmpeq>
 800cf0e:	4603      	mov	r3, r0
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d000      	beq.n	800cf16 <xaxpy_guu0hJif+0x30>
      y[iy] += a * y[ix];
      ix++;
      iy++;
    }
  }
}
 800cf14:	e037      	b.n	800cf86 <xaxpy_guu0hJif+0xa0>
    ix = ix0 - 1;
 800cf16:	693b      	ldr	r3, [r7, #16]
 800cf18:	3b01      	subs	r3, #1
 800cf1a:	623b      	str	r3, [r7, #32]
    iy = iy0 - 1;
 800cf1c:	683b      	ldr	r3, [r7, #0]
 800cf1e:	3b01      	subs	r3, #1
 800cf20:	61fb      	str	r3, [r7, #28]
    for (k = 0; k < n; k++) {
 800cf22:	2300      	movs	r3, #0
 800cf24:	627b      	str	r3, [r7, #36]	; 0x24
 800cf26:	e02a      	b.n	800cf7e <xaxpy_guu0hJif+0x98>
      y[iy] += a * y[ix];
 800cf28:	69fb      	ldr	r3, [r7, #28]
 800cf2a:	00db      	lsls	r3, r3, #3
 800cf2c:	687a      	ldr	r2, [r7, #4]
 800cf2e:	4413      	add	r3, r2
 800cf30:	e9d3 4500 	ldrd	r4, r5, [r3]
 800cf34:	6a3b      	ldr	r3, [r7, #32]
 800cf36:	00db      	lsls	r3, r3, #3
 800cf38:	687a      	ldr	r2, [r7, #4]
 800cf3a:	4413      	add	r3, r2
 800cf3c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cf40:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800cf44:	f7f3 fb4a 	bl	80005dc <__aeabi_dmul>
 800cf48:	4602      	mov	r2, r0
 800cf4a:	460b      	mov	r3, r1
 800cf4c:	4610      	mov	r0, r2
 800cf4e:	4619      	mov	r1, r3
 800cf50:	69fb      	ldr	r3, [r7, #28]
 800cf52:	00db      	lsls	r3, r3, #3
 800cf54:	687a      	ldr	r2, [r7, #4]
 800cf56:	18d6      	adds	r6, r2, r3
 800cf58:	4602      	mov	r2, r0
 800cf5a:	460b      	mov	r3, r1
 800cf5c:	4620      	mov	r0, r4
 800cf5e:	4629      	mov	r1, r5
 800cf60:	f7f3 f986 	bl	8000270 <__adddf3>
 800cf64:	4602      	mov	r2, r0
 800cf66:	460b      	mov	r3, r1
 800cf68:	e9c6 2300 	strd	r2, r3, [r6]
      ix++;
 800cf6c:	6a3b      	ldr	r3, [r7, #32]
 800cf6e:	3301      	adds	r3, #1
 800cf70:	623b      	str	r3, [r7, #32]
      iy++;
 800cf72:	69fb      	ldr	r3, [r7, #28]
 800cf74:	3301      	adds	r3, #1
 800cf76:	61fb      	str	r3, [r7, #28]
    for (k = 0; k < n; k++) {
 800cf78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf7a:	3301      	adds	r3, #1
 800cf7c:	627b      	str	r3, [r7, #36]	; 0x24
 800cf7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cf80:	697b      	ldr	r3, [r7, #20]
 800cf82:	429a      	cmp	r2, r3
 800cf84:	dbd0      	blt.n	800cf28 <xaxpy_guu0hJif+0x42>
}
 800cf86:	bf00      	nop
 800cf88:	372c      	adds	r7, #44	; 0x2c
 800cf8a:	46bd      	mov	sp, r7
 800cf8c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cf8e <xdotc_mznw4aLl>:
#include "rtwtypes.h"
#include "xdotc_mznw4aLl.h"

real_T xdotc_mznw4aLl(int32_T n, const real_T x[9], int32_T ix0, const real_T y
                      [9], int32_T iy0)
{
 800cf8e:	b580      	push	{r7, lr}
 800cf90:	b08a      	sub	sp, #40	; 0x28
 800cf92:	af00      	add	r7, sp, #0
 800cf94:	60f8      	str	r0, [r7, #12]
 800cf96:	60b9      	str	r1, [r7, #8]
 800cf98:	607a      	str	r2, [r7, #4]
 800cf9a:	603b      	str	r3, [r7, #0]
  real_T d;
  int32_T k;
  d = 0.0;
 800cf9c:	f04f 0200 	mov.w	r2, #0
 800cfa0:	f04f 0300 	mov.w	r3, #0
 800cfa4:	e9c7 2308 	strd	r2, r3, [r7, #32]
  if (n >= 1) {
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	dd31      	ble.n	800d012 <xdotc_mznw4aLl+0x84>
    int32_T ix;
    int32_T iy;
    ix = ix0;
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	61bb      	str	r3, [r7, #24]
    iy = iy0;
 800cfb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfb4:	617b      	str	r3, [r7, #20]
    for (k = 0; k < n; k++) {
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	61fb      	str	r3, [r7, #28]
 800cfba:	e026      	b.n	800d00a <xdotc_mznw4aLl+0x7c>
      d += x[ix - 1] * y[iy - 1];
 800cfbc:	69bb      	ldr	r3, [r7, #24]
 800cfbe:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800cfc2:	3b01      	subs	r3, #1
 800cfc4:	00db      	lsls	r3, r3, #3
 800cfc6:	68ba      	ldr	r2, [r7, #8]
 800cfc8:	4413      	add	r3, r2
 800cfca:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cfce:	697b      	ldr	r3, [r7, #20]
 800cfd0:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800cfd4:	3b01      	subs	r3, #1
 800cfd6:	00db      	lsls	r3, r3, #3
 800cfd8:	683a      	ldr	r2, [r7, #0]
 800cfda:	4413      	add	r3, r2
 800cfdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfe0:	f7f3 fafc 	bl	80005dc <__aeabi_dmul>
 800cfe4:	4602      	mov	r2, r0
 800cfe6:	460b      	mov	r3, r1
 800cfe8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800cfec:	f7f3 f940 	bl	8000270 <__adddf3>
 800cff0:	4602      	mov	r2, r0
 800cff2:	460b      	mov	r3, r1
 800cff4:	e9c7 2308 	strd	r2, r3, [r7, #32]
      ix++;
 800cff8:	69bb      	ldr	r3, [r7, #24]
 800cffa:	3301      	adds	r3, #1
 800cffc:	61bb      	str	r3, [r7, #24]
      iy++;
 800cffe:	697b      	ldr	r3, [r7, #20]
 800d000:	3301      	adds	r3, #1
 800d002:	617b      	str	r3, [r7, #20]
    for (k = 0; k < n; k++) {
 800d004:	69fb      	ldr	r3, [r7, #28]
 800d006:	3301      	adds	r3, #1
 800d008:	61fb      	str	r3, [r7, #28]
 800d00a:	69fa      	ldr	r2, [r7, #28]
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	429a      	cmp	r2, r3
 800d010:	dbd4      	blt.n	800cfbc <xdotc_mznw4aLl+0x2e>
    }
  }

  return d;
 800d012:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d016:	ec43 2b17 	vmov	d7, r2, r3
}
 800d01a:	eeb0 0a47 	vmov.f32	s0, s14
 800d01e:	eef0 0a67 	vmov.f32	s1, s15
 800d022:	3728      	adds	r7, #40	; 0x28
 800d024:	46bd      	mov	sp, r7
 800d026:	bd80      	pop	{r7, pc}

0800d028 <xgemv_NQlWbt2i>:
#include "rtwtypes.h"
#include "xgemv_NQlWbt2i.h"

void xgemv_NQlWbt2i(int32_T m, int32_T n, const real_T A[18], int32_T ia0, const
                    real_T x[18], int32_T ix0, real_T y[3])
{
 800d028:	b590      	push	{r4, r7, lr}
 800d02a:	b08f      	sub	sp, #60	; 0x3c
 800d02c:	af00      	add	r7, sp, #0
 800d02e:	60f8      	str	r0, [r7, #12]
 800d030:	60b9      	str	r1, [r7, #8]
 800d032:	607a      	str	r2, [r7, #4]
 800d034:	603b      	str	r3, [r7, #0]
  int32_T b_iy;
  int32_T ia;
  int32_T iac;
  if ((m != 0) && (n != 0)) {
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d079      	beq.n	800d130 <xgemv_NQlWbt2i+0x108>
 800d03c:	68bb      	ldr	r3, [r7, #8]
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d076      	beq.n	800d130 <xgemv_NQlWbt2i+0x108>
    int32_T b;
    for (b_iy = 0; b_iy < n; b_iy++) {
 800d042:	2300      	movs	r3, #0
 800d044:	637b      	str	r3, [r7, #52]	; 0x34
 800d046:	e00c      	b.n	800d062 <xgemv_NQlWbt2i+0x3a>
      y[b_iy] = 0.0;
 800d048:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d04a:	00db      	lsls	r3, r3, #3
 800d04c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d04e:	18d1      	adds	r1, r2, r3
 800d050:	f04f 0200 	mov.w	r2, #0
 800d054:	f04f 0300 	mov.w	r3, #0
 800d058:	e9c1 2300 	strd	r2, r3, [r1]
    for (b_iy = 0; b_iy < n; b_iy++) {
 800d05c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d05e:	3301      	adds	r3, #1
 800d060:	637b      	str	r3, [r7, #52]	; 0x34
 800d062:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d064:	68bb      	ldr	r3, [r7, #8]
 800d066:	429a      	cmp	r2, r3
 800d068:	dbee      	blt.n	800d048 <xgemv_NQlWbt2i+0x20>
    }

    b_iy = 0;
 800d06a:	2300      	movs	r3, #0
 800d06c:	637b      	str	r3, [r7, #52]	; 0x34
    b = (n - 1) * 6 + ia0;
 800d06e:	68bb      	ldr	r3, [r7, #8]
 800d070:	1e5a      	subs	r2, r3, #1
 800d072:	4613      	mov	r3, r2
 800d074:	005b      	lsls	r3, r3, #1
 800d076:	4413      	add	r3, r2
 800d078:	005b      	lsls	r3, r3, #1
 800d07a:	461a      	mov	r2, r3
 800d07c:	683b      	ldr	r3, [r7, #0]
 800d07e:	4413      	add	r3, r2
 800d080:	61bb      	str	r3, [r7, #24]
    for (iac = ia0; iac <= b; iac += 6) {
 800d082:	683b      	ldr	r3, [r7, #0]
 800d084:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d086:	e04f      	b.n	800d128 <xgemv_NQlWbt2i+0x100>
      real_T c;
      int32_T d;
      int32_T ix;
      ix = ix0;
 800d088:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d08a:	61fb      	str	r3, [r7, #28]
      c = 0.0;
 800d08c:	f04f 0200 	mov.w	r2, #0
 800d090:	f04f 0300 	mov.w	r3, #0
 800d094:	e9c7 2308 	strd	r2, r3, [r7, #32]
      d = (iac + m) - 1;
 800d098:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	4413      	add	r3, r2
 800d09e:	3b01      	subs	r3, #1
 800d0a0:	617b      	str	r3, [r7, #20]
      for (ia = iac; ia <= d; ia++) {
 800d0a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0a4:	633b      	str	r3, [r7, #48]	; 0x30
 800d0a6:	e023      	b.n	800d0f0 <xgemv_NQlWbt2i+0xc8>
        c += A[ia - 1] * x[ix - 1];
 800d0a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0aa:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800d0ae:	3b01      	subs	r3, #1
 800d0b0:	00db      	lsls	r3, r3, #3
 800d0b2:	687a      	ldr	r2, [r7, #4]
 800d0b4:	4413      	add	r3, r2
 800d0b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d0ba:	69fb      	ldr	r3, [r7, #28]
 800d0bc:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800d0c0:	3b01      	subs	r3, #1
 800d0c2:	00db      	lsls	r3, r3, #3
 800d0c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d0c6:	4413      	add	r3, r2
 800d0c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0cc:	f7f3 fa86 	bl	80005dc <__aeabi_dmul>
 800d0d0:	4602      	mov	r2, r0
 800d0d2:	460b      	mov	r3, r1
 800d0d4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800d0d8:	f7f3 f8ca 	bl	8000270 <__adddf3>
 800d0dc:	4602      	mov	r2, r0
 800d0de:	460b      	mov	r3, r1
 800d0e0:	e9c7 2308 	strd	r2, r3, [r7, #32]
        ix++;
 800d0e4:	69fb      	ldr	r3, [r7, #28]
 800d0e6:	3301      	adds	r3, #1
 800d0e8:	61fb      	str	r3, [r7, #28]
      for (ia = iac; ia <= d; ia++) {
 800d0ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0ec:	3301      	adds	r3, #1
 800d0ee:	633b      	str	r3, [r7, #48]	; 0x30
 800d0f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d0f2:	697b      	ldr	r3, [r7, #20]
 800d0f4:	429a      	cmp	r2, r3
 800d0f6:	ddd7      	ble.n	800d0a8 <xgemv_NQlWbt2i+0x80>
      }

      y[b_iy] += c;
 800d0f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0fa:	00db      	lsls	r3, r3, #3
 800d0fc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d0fe:	4413      	add	r3, r2
 800d100:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d104:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d106:	00db      	lsls	r3, r3, #3
 800d108:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d10a:	18d4      	adds	r4, r2, r3
 800d10c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d110:	f7f3 f8ae 	bl	8000270 <__adddf3>
 800d114:	4602      	mov	r2, r0
 800d116:	460b      	mov	r3, r1
 800d118:	e9c4 2300 	strd	r2, r3, [r4]
      b_iy++;
 800d11c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d11e:	3301      	adds	r3, #1
 800d120:	637b      	str	r3, [r7, #52]	; 0x34
    for (iac = ia0; iac <= b; iac += 6) {
 800d122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d124:	3306      	adds	r3, #6
 800d126:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d128:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d12a:	69bb      	ldr	r3, [r7, #24]
 800d12c:	429a      	cmp	r2, r3
 800d12e:	ddab      	ble.n	800d088 <xgemv_NQlWbt2i+0x60>
    }
  }
}
 800d130:	bf00      	nop
 800d132:	373c      	adds	r7, #60	; 0x3c
 800d134:	46bd      	mov	sp, r7
 800d136:	bd90      	pop	{r4, r7, pc}

0800d138 <xgemv_fRiR1I1O>:
#include "rtwtypes.h"
#include "xgemv_fRiR1I1O.h"

void xgemv_fRiR1I1O(int32_T m, int32_T n, const real_T A[9], int32_T ia0, const
                    real_T x[9], int32_T ix0, real_T y[3])
{
 800d138:	b590      	push	{r4, r7, lr}
 800d13a:	b08f      	sub	sp, #60	; 0x3c
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	60f8      	str	r0, [r7, #12]
 800d140:	60b9      	str	r1, [r7, #8]
 800d142:	607a      	str	r2, [r7, #4]
 800d144:	603b      	str	r3, [r7, #0]
  int32_T b_iy;
  int32_T ia;
  int32_T iac;
  if ((m != 0) && (n != 0)) {
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d077      	beq.n	800d23c <xgemv_fRiR1I1O+0x104>
 800d14c:	68bb      	ldr	r3, [r7, #8]
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d074      	beq.n	800d23c <xgemv_fRiR1I1O+0x104>
    int32_T b;
    for (b_iy = 0; b_iy < n; b_iy++) {
 800d152:	2300      	movs	r3, #0
 800d154:	637b      	str	r3, [r7, #52]	; 0x34
 800d156:	e00c      	b.n	800d172 <xgemv_fRiR1I1O+0x3a>
      y[b_iy] = 0.0;
 800d158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d15a:	00db      	lsls	r3, r3, #3
 800d15c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d15e:	18d1      	adds	r1, r2, r3
 800d160:	f04f 0200 	mov.w	r2, #0
 800d164:	f04f 0300 	mov.w	r3, #0
 800d168:	e9c1 2300 	strd	r2, r3, [r1]
    for (b_iy = 0; b_iy < n; b_iy++) {
 800d16c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d16e:	3301      	adds	r3, #1
 800d170:	637b      	str	r3, [r7, #52]	; 0x34
 800d172:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d174:	68bb      	ldr	r3, [r7, #8]
 800d176:	429a      	cmp	r2, r3
 800d178:	dbee      	blt.n	800d158 <xgemv_fRiR1I1O+0x20>
    }

    b_iy = 0;
 800d17a:	2300      	movs	r3, #0
 800d17c:	637b      	str	r3, [r7, #52]	; 0x34
    b = (n - 1) * 3 + ia0;
 800d17e:	68bb      	ldr	r3, [r7, #8]
 800d180:	1e5a      	subs	r2, r3, #1
 800d182:	4613      	mov	r3, r2
 800d184:	005b      	lsls	r3, r3, #1
 800d186:	4413      	add	r3, r2
 800d188:	683a      	ldr	r2, [r7, #0]
 800d18a:	4413      	add	r3, r2
 800d18c:	61bb      	str	r3, [r7, #24]
    for (iac = ia0; iac <= b; iac += 3) {
 800d18e:	683b      	ldr	r3, [r7, #0]
 800d190:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d192:	e04f      	b.n	800d234 <xgemv_fRiR1I1O+0xfc>
      real_T c;
      int32_T d;
      int32_T ix;
      ix = ix0;
 800d194:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d196:	61fb      	str	r3, [r7, #28]
      c = 0.0;
 800d198:	f04f 0200 	mov.w	r2, #0
 800d19c:	f04f 0300 	mov.w	r3, #0
 800d1a0:	e9c7 2308 	strd	r2, r3, [r7, #32]
      d = (iac + m) - 1;
 800d1a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	4413      	add	r3, r2
 800d1aa:	3b01      	subs	r3, #1
 800d1ac:	617b      	str	r3, [r7, #20]
      for (ia = iac; ia <= d; ia++) {
 800d1ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1b0:	633b      	str	r3, [r7, #48]	; 0x30
 800d1b2:	e023      	b.n	800d1fc <xgemv_fRiR1I1O+0xc4>
        c += A[ia - 1] * x[ix - 1];
 800d1b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1b6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800d1ba:	3b01      	subs	r3, #1
 800d1bc:	00db      	lsls	r3, r3, #3
 800d1be:	687a      	ldr	r2, [r7, #4]
 800d1c0:	4413      	add	r3, r2
 800d1c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d1c6:	69fb      	ldr	r3, [r7, #28]
 800d1c8:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800d1cc:	3b01      	subs	r3, #1
 800d1ce:	00db      	lsls	r3, r3, #3
 800d1d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d1d2:	4413      	add	r3, r2
 800d1d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1d8:	f7f3 fa00 	bl	80005dc <__aeabi_dmul>
 800d1dc:	4602      	mov	r2, r0
 800d1de:	460b      	mov	r3, r1
 800d1e0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800d1e4:	f7f3 f844 	bl	8000270 <__adddf3>
 800d1e8:	4602      	mov	r2, r0
 800d1ea:	460b      	mov	r3, r1
 800d1ec:	e9c7 2308 	strd	r2, r3, [r7, #32]
        ix++;
 800d1f0:	69fb      	ldr	r3, [r7, #28]
 800d1f2:	3301      	adds	r3, #1
 800d1f4:	61fb      	str	r3, [r7, #28]
      for (ia = iac; ia <= d; ia++) {
 800d1f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1f8:	3301      	adds	r3, #1
 800d1fa:	633b      	str	r3, [r7, #48]	; 0x30
 800d1fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d1fe:	697b      	ldr	r3, [r7, #20]
 800d200:	429a      	cmp	r2, r3
 800d202:	ddd7      	ble.n	800d1b4 <xgemv_fRiR1I1O+0x7c>
      }

      y[b_iy] += c;
 800d204:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d206:	00db      	lsls	r3, r3, #3
 800d208:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d20a:	4413      	add	r3, r2
 800d20c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d210:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d212:	00db      	lsls	r3, r3, #3
 800d214:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d216:	18d4      	adds	r4, r2, r3
 800d218:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d21c:	f7f3 f828 	bl	8000270 <__adddf3>
 800d220:	4602      	mov	r2, r0
 800d222:	460b      	mov	r3, r1
 800d224:	e9c4 2300 	strd	r2, r3, [r4]
      b_iy++;
 800d228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d22a:	3301      	adds	r3, #1
 800d22c:	637b      	str	r3, [r7, #52]	; 0x34
    for (iac = ia0; iac <= b; iac += 3) {
 800d22e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d230:	3303      	adds	r3, #3
 800d232:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d234:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d236:	69bb      	ldr	r3, [r7, #24]
 800d238:	429a      	cmp	r2, r3
 800d23a:	ddab      	ble.n	800d194 <xgemv_fRiR1I1O+0x5c>
    }
  }
}
 800d23c:	bf00      	nop
 800d23e:	373c      	adds	r7, #60	; 0x3c
 800d240:	46bd      	mov	sp, r7
 800d242:	bd90      	pop	{r4, r7, pc}

0800d244 <xgerc_R09LiDgJ>:
#include "rtwtypes.h"
#include "xgerc_R09LiDgJ.h"

void xgerc_R09LiDgJ(int32_T m, int32_T n, real_T alpha1, int32_T ix0, const
                    real_T y[3], real_T A[18], int32_T ia0)
{
 800d244:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d246:	b091      	sub	sp, #68	; 0x44
 800d248:	af00      	add	r7, sp, #0
 800d24a:	6178      	str	r0, [r7, #20]
 800d24c:	6139      	str	r1, [r7, #16]
 800d24e:	ed87 0b02 	vstr	d0, [r7, #8]
 800d252:	607a      	str	r2, [r7, #4]
 800d254:	603b      	str	r3, [r7, #0]
  int32_T j;
  if (!(alpha1 == 0.0)) {
 800d256:	f04f 0200 	mov.w	r2, #0
 800d25a:	f04f 0300 	mov.w	r3, #0
 800d25e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d262:	f7f3 fc23 	bl	8000aac <__aeabi_dcmpeq>
 800d266:	4603      	mov	r3, r0
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d000      	beq.n	800d26e <xgerc_R09LiDgJ+0x2a>

      jy++;
      jA += 6;
    }
  }
}
 800d26c:	e069      	b.n	800d342 <xgerc_R09LiDgJ+0xfe>
    jA = ia0 - 1;
 800d26e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d270:	3b01      	subs	r3, #1
 800d272:	63bb      	str	r3, [r7, #56]	; 0x38
    jy = 0;
 800d274:	2300      	movs	r3, #0
 800d276:	637b      	str	r3, [r7, #52]	; 0x34
    for (j = 0; j < n; j++) {
 800d278:	2300      	movs	r3, #0
 800d27a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d27c:	e05d      	b.n	800d33a <xgerc_R09LiDgJ+0xf6>
      if (y[jy] != 0.0) {
 800d27e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d280:	00db      	lsls	r3, r3, #3
 800d282:	683a      	ldr	r2, [r7, #0]
 800d284:	4413      	add	r3, r2
 800d286:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d28a:	f04f 0200 	mov.w	r2, #0
 800d28e:	f04f 0300 	mov.w	r3, #0
 800d292:	f7f3 fc0b 	bl	8000aac <__aeabi_dcmpeq>
 800d296:	4603      	mov	r3, r0
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d145      	bne.n	800d328 <xgerc_R09LiDgJ+0xe4>
        temp = y[jy] * alpha1;
 800d29c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d29e:	00db      	lsls	r3, r3, #3
 800d2a0:	683a      	ldr	r2, [r7, #0]
 800d2a2:	4413      	add	r3, r2
 800d2a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2a8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d2ac:	f7f3 f996 	bl	80005dc <__aeabi_dmul>
 800d2b0:	4602      	mov	r2, r0
 800d2b2:	460b      	mov	r3, r1
 800d2b4:	e9c7 2308 	strd	r2, r3, [r7, #32]
        ix = ix0;
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        ijA = jA;
 800d2bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2be:	633b      	str	r3, [r7, #48]	; 0x30
        b = m + jA;
 800d2c0:	697a      	ldr	r2, [r7, #20]
 800d2c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2c4:	4413      	add	r3, r2
 800d2c6:	61fb      	str	r3, [r7, #28]
        while (ijA + 1 <= b) {
 800d2c8:	e02a      	b.n	800d320 <xgerc_R09LiDgJ+0xdc>
          A[ijA] += A[ix - 1] * temp;
 800d2ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2cc:	00db      	lsls	r3, r3, #3
 800d2ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d2d0:	4413      	add	r3, r2
 800d2d2:	e9d3 4500 	ldrd	r4, r5, [r3]
 800d2d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2d8:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800d2dc:	3b01      	subs	r3, #1
 800d2de:	00db      	lsls	r3, r3, #3
 800d2e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d2e2:	4413      	add	r3, r2
 800d2e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d2e8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d2ec:	f7f3 f976 	bl	80005dc <__aeabi_dmul>
 800d2f0:	4602      	mov	r2, r0
 800d2f2:	460b      	mov	r3, r1
 800d2f4:	4610      	mov	r0, r2
 800d2f6:	4619      	mov	r1, r3
 800d2f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2fa:	00db      	lsls	r3, r3, #3
 800d2fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d2fe:	18d6      	adds	r6, r2, r3
 800d300:	4602      	mov	r2, r0
 800d302:	460b      	mov	r3, r1
 800d304:	4620      	mov	r0, r4
 800d306:	4629      	mov	r1, r5
 800d308:	f7f2 ffb2 	bl	8000270 <__adddf3>
 800d30c:	4602      	mov	r2, r0
 800d30e:	460b      	mov	r3, r1
 800d310:	e9c6 2300 	strd	r2, r3, [r6]
          ix++;
 800d314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d316:	3301      	adds	r3, #1
 800d318:	62fb      	str	r3, [r7, #44]	; 0x2c
          ijA++;
 800d31a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d31c:	3301      	adds	r3, #1
 800d31e:	633b      	str	r3, [r7, #48]	; 0x30
        while (ijA + 1 <= b) {
 800d320:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d322:	69fb      	ldr	r3, [r7, #28]
 800d324:	429a      	cmp	r2, r3
 800d326:	dbd0      	blt.n	800d2ca <xgerc_R09LiDgJ+0x86>
      jy++;
 800d328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d32a:	3301      	adds	r3, #1
 800d32c:	637b      	str	r3, [r7, #52]	; 0x34
      jA += 6;
 800d32e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d330:	3306      	adds	r3, #6
 800d332:	63bb      	str	r3, [r7, #56]	; 0x38
    for (j = 0; j < n; j++) {
 800d334:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d336:	3301      	adds	r3, #1
 800d338:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d33a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d33c:	693b      	ldr	r3, [r7, #16]
 800d33e:	429a      	cmp	r2, r3
 800d340:	db9d      	blt.n	800d27e <xgerc_R09LiDgJ+0x3a>
}
 800d342:	bf00      	nop
 800d344:	3744      	adds	r7, #68	; 0x44
 800d346:	46bd      	mov	sp, r7
 800d348:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d34a <xgerc_tNNiazQU>:
#include "rtwtypes.h"
#include "xgerc_tNNiazQU.h"

void xgerc_tNNiazQU(int32_T m, int32_T n, real_T alpha1, int32_T ix0, const
                    real_T y[3], real_T A[9], int32_T ia0)
{
 800d34a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d34c:	b091      	sub	sp, #68	; 0x44
 800d34e:	af00      	add	r7, sp, #0
 800d350:	6178      	str	r0, [r7, #20]
 800d352:	6139      	str	r1, [r7, #16]
 800d354:	ed87 0b02 	vstr	d0, [r7, #8]
 800d358:	607a      	str	r2, [r7, #4]
 800d35a:	603b      	str	r3, [r7, #0]
  int32_T j;
  if (!(alpha1 == 0.0)) {
 800d35c:	f04f 0200 	mov.w	r2, #0
 800d360:	f04f 0300 	mov.w	r3, #0
 800d364:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d368:	f7f3 fba0 	bl	8000aac <__aeabi_dcmpeq>
 800d36c:	4603      	mov	r3, r0
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d000      	beq.n	800d374 <xgerc_tNNiazQU+0x2a>

      jy++;
      jA += 3;
    }
  }
}
 800d372:	e069      	b.n	800d448 <xgerc_tNNiazQU+0xfe>
    jA = ia0 - 1;
 800d374:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d376:	3b01      	subs	r3, #1
 800d378:	63bb      	str	r3, [r7, #56]	; 0x38
    jy = 0;
 800d37a:	2300      	movs	r3, #0
 800d37c:	637b      	str	r3, [r7, #52]	; 0x34
    for (j = 0; j < n; j++) {
 800d37e:	2300      	movs	r3, #0
 800d380:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d382:	e05d      	b.n	800d440 <xgerc_tNNiazQU+0xf6>
      if (y[jy] != 0.0) {
 800d384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d386:	00db      	lsls	r3, r3, #3
 800d388:	683a      	ldr	r2, [r7, #0]
 800d38a:	4413      	add	r3, r2
 800d38c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d390:	f04f 0200 	mov.w	r2, #0
 800d394:	f04f 0300 	mov.w	r3, #0
 800d398:	f7f3 fb88 	bl	8000aac <__aeabi_dcmpeq>
 800d39c:	4603      	mov	r3, r0
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d145      	bne.n	800d42e <xgerc_tNNiazQU+0xe4>
        temp = y[jy] * alpha1;
 800d3a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3a4:	00db      	lsls	r3, r3, #3
 800d3a6:	683a      	ldr	r2, [r7, #0]
 800d3a8:	4413      	add	r3, r2
 800d3aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d3b2:	f7f3 f913 	bl	80005dc <__aeabi_dmul>
 800d3b6:	4602      	mov	r2, r0
 800d3b8:	460b      	mov	r3, r1
 800d3ba:	e9c7 2308 	strd	r2, r3, [r7, #32]
        ix = ix0;
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ijA = jA;
 800d3c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3c4:	633b      	str	r3, [r7, #48]	; 0x30
        b = m + jA;
 800d3c6:	697a      	ldr	r2, [r7, #20]
 800d3c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3ca:	4413      	add	r3, r2
 800d3cc:	61fb      	str	r3, [r7, #28]
        while (ijA + 1 <= b) {
 800d3ce:	e02a      	b.n	800d426 <xgerc_tNNiazQU+0xdc>
          A[ijA] += A[ix - 1] * temp;
 800d3d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3d2:	00db      	lsls	r3, r3, #3
 800d3d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d3d6:	4413      	add	r3, r2
 800d3d8:	e9d3 4500 	ldrd	r4, r5, [r3]
 800d3dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3de:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800d3e2:	3b01      	subs	r3, #1
 800d3e4:	00db      	lsls	r3, r3, #3
 800d3e6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d3e8:	4413      	add	r3, r2
 800d3ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d3ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d3f2:	f7f3 f8f3 	bl	80005dc <__aeabi_dmul>
 800d3f6:	4602      	mov	r2, r0
 800d3f8:	460b      	mov	r3, r1
 800d3fa:	4610      	mov	r0, r2
 800d3fc:	4619      	mov	r1, r3
 800d3fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d400:	00db      	lsls	r3, r3, #3
 800d402:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d404:	18d6      	adds	r6, r2, r3
 800d406:	4602      	mov	r2, r0
 800d408:	460b      	mov	r3, r1
 800d40a:	4620      	mov	r0, r4
 800d40c:	4629      	mov	r1, r5
 800d40e:	f7f2 ff2f 	bl	8000270 <__adddf3>
 800d412:	4602      	mov	r2, r0
 800d414:	460b      	mov	r3, r1
 800d416:	e9c6 2300 	strd	r2, r3, [r6]
          ix++;
 800d41a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d41c:	3301      	adds	r3, #1
 800d41e:	62fb      	str	r3, [r7, #44]	; 0x2c
          ijA++;
 800d420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d422:	3301      	adds	r3, #1
 800d424:	633b      	str	r3, [r7, #48]	; 0x30
        while (ijA + 1 <= b) {
 800d426:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d428:	69fb      	ldr	r3, [r7, #28]
 800d42a:	429a      	cmp	r2, r3
 800d42c:	dbd0      	blt.n	800d3d0 <xgerc_tNNiazQU+0x86>
      jy++;
 800d42e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d430:	3301      	adds	r3, #1
 800d432:	637b      	str	r3, [r7, #52]	; 0x34
      jA += 3;
 800d434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d436:	3303      	adds	r3, #3
 800d438:	63bb      	str	r3, [r7, #56]	; 0x38
    for (j = 0; j < n; j++) {
 800d43a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d43c:	3301      	adds	r3, #1
 800d43e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d440:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d442:	693b      	ldr	r3, [r7, #16]
 800d444:	429a      	cmp	r2, r3
 800d446:	db9d      	blt.n	800d384 <xgerc_tNNiazQU+0x3a>
}
 800d448:	bf00      	nop
 800d44a:	3744      	adds	r7, #68	; 0x44
 800d44c:	46bd      	mov	sp, r7
 800d44e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d450 <xnrm2_7bm34mDQ>:
#include "rtwtypes.h"
#include "xnrm2_7bm34mDQ.h"
#include <math.h>

real_T xnrm2_7bm34mDQ(int32_T n, const real_T x[6], int32_T ix0)
{
 800d450:	b580      	push	{r7, lr}
 800d452:	b092      	sub	sp, #72	; 0x48
 800d454:	af00      	add	r7, sp, #0
 800d456:	60f8      	str	r0, [r7, #12]
 800d458:	60b9      	str	r1, [r7, #8]
 800d45a:	607a      	str	r2, [r7, #4]
  real_T y;
  int32_T k;
  y = 0.0;
 800d45c:	f04f 0200 	mov.w	r2, #0
 800d460:	f04f 0300 	mov.w	r3, #0
 800d464:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  if (n >= 1) {
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	f340 8090 	ble.w	800d590 <xnrm2_7bm34mDQ+0x140>
    if (n == 1) {
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	2b01      	cmp	r3, #1
 800d474:	d10e      	bne.n	800d494 <xnrm2_7bm34mDQ+0x44>
      y = fabs(x[ix0 - 1]);
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800d47c:	3b01      	subs	r3, #1
 800d47e:	00db      	lsls	r3, r3, #3
 800d480:	68ba      	ldr	r2, [r7, #8]
 800d482:	4413      	add	r3, r2
 800d484:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d488:	4611      	mov	r1, r2
 800d48a:	6439      	str	r1, [r7, #64]	; 0x40
 800d48c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d490:	647b      	str	r3, [r7, #68]	; 0x44
 800d492:	e07d      	b.n	800d590 <xnrm2_7bm34mDQ+0x140>
    } else {
      real_T scale;
      int32_T kend;
      scale = 3.3121686421112381E-170;
 800d494:	f04f 0200 	mov.w	r2, #0
 800d498:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 800d49c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      kend = (ix0 + n) - 1;
 800d4a0:	687a      	ldr	r2, [r7, #4]
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	4413      	add	r3, r2
 800d4a6:	3b01      	subs	r3, #1
 800d4a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      for (k = ix0; k <= kend; k++) {
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d4ae:	e05d      	b.n	800d56c <xnrm2_7bm34mDQ+0x11c>
        real_T absxk;
        absxk = fabs(x[k - 1]);
 800d4b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d4b2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800d4b6:	3b01      	subs	r3, #1
 800d4b8:	00db      	lsls	r3, r3, #3
 800d4ba:	68ba      	ldr	r2, [r7, #8]
 800d4bc:	4413      	add	r3, r2
 800d4be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4c2:	4611      	mov	r1, r2
 800d4c4:	6239      	str	r1, [r7, #32]
 800d4c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d4ca:	627b      	str	r3, [r7, #36]	; 0x24
        if (absxk > scale) {
 800d4cc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800d4d0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800d4d4:	f7f3 fb12 	bl	8000afc <__aeabi_dcmpgt>
 800d4d8:	4603      	mov	r3, r0
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d029      	beq.n	800d532 <xnrm2_7bm34mDQ+0xe2>
          real_T t;
          t = scale / absxk;
 800d4de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d4e2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800d4e6:	f7f3 f9a3 	bl	8000830 <__aeabi_ddiv>
 800d4ea:	4602      	mov	r2, r0
 800d4ec:	460b      	mov	r3, r1
 800d4ee:	e9c7 2304 	strd	r2, r3, [r7, #16]
          y = y * t * t + 1.0;
 800d4f2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d4f6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800d4fa:	f7f3 f86f 	bl	80005dc <__aeabi_dmul>
 800d4fe:	4602      	mov	r2, r0
 800d500:	460b      	mov	r3, r1
 800d502:	4610      	mov	r0, r2
 800d504:	4619      	mov	r1, r3
 800d506:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d50a:	f7f3 f867 	bl	80005dc <__aeabi_dmul>
 800d50e:	4602      	mov	r2, r0
 800d510:	460b      	mov	r3, r1
 800d512:	4610      	mov	r0, r2
 800d514:	4619      	mov	r1, r3
 800d516:	f04f 0200 	mov.w	r2, #0
 800d51a:	4b23      	ldr	r3, [pc, #140]	; (800d5a8 <xnrm2_7bm34mDQ+0x158>)
 800d51c:	f7f2 fea8 	bl	8000270 <__adddf3>
 800d520:	4602      	mov	r2, r0
 800d522:	460b      	mov	r3, r1
 800d524:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
          scale = absxk;
 800d528:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d52c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 800d530:	e019      	b.n	800d566 <xnrm2_7bm34mDQ+0x116>
        } else {
          real_T t;
          t = absxk / scale;
 800d532:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800d536:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800d53a:	f7f3 f979 	bl	8000830 <__aeabi_ddiv>
 800d53e:	4602      	mov	r2, r0
 800d540:	460b      	mov	r3, r1
 800d542:	e9c7 2306 	strd	r2, r3, [r7, #24]
          y += t * t;
 800d546:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d54a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800d54e:	f7f3 f845 	bl	80005dc <__aeabi_dmul>
 800d552:	4602      	mov	r2, r0
 800d554:	460b      	mov	r3, r1
 800d556:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800d55a:	f7f2 fe89 	bl	8000270 <__adddf3>
 800d55e:	4602      	mov	r2, r0
 800d560:	460b      	mov	r3, r1
 800d562:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      for (k = ix0; k <= kend; k++) {
 800d566:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d568:	3301      	adds	r3, #1
 800d56a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d56c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d56e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d570:	429a      	cmp	r2, r3
 800d572:	dd9d      	ble.n	800d4b0 <xnrm2_7bm34mDQ+0x60>
        }
      }

      y = scale * sqrt(y);
 800d574:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 800d578:	f009 fcb6 	bl	8016ee8 <sqrt>
 800d57c:	ec53 2b10 	vmov	r2, r3, d0
 800d580:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800d584:	f7f3 f82a 	bl	80005dc <__aeabi_dmul>
 800d588:	4602      	mov	r2, r0
 800d58a:	460b      	mov	r3, r1
 800d58c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    }
  }

  return y;
 800d590:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800d594:	ec43 2b17 	vmov	d7, r2, r3
}
 800d598:	eeb0 0a47 	vmov.f32	s0, s14
 800d59c:	eef0 0a67 	vmov.f32	s1, s15
 800d5a0:	3748      	adds	r7, #72	; 0x48
 800d5a2:	46bd      	mov	sp, r7
 800d5a4:	bd80      	pop	{r7, pc}
 800d5a6:	bf00      	nop
 800d5a8:	3ff00000 	.word	0x3ff00000

0800d5ac <xnrm2_Mnmxg9YT>:
#include "rtwtypes.h"
#include "xnrm2_Mnmxg9YT.h"
#include <math.h>

real_T xnrm2_Mnmxg9YT(int32_T n, const real_T x[2], int32_T ix0)
{
 800d5ac:	b580      	push	{r7, lr}
 800d5ae:	b092      	sub	sp, #72	; 0x48
 800d5b0:	af00      	add	r7, sp, #0
 800d5b2:	60f8      	str	r0, [r7, #12]
 800d5b4:	60b9      	str	r1, [r7, #8]
 800d5b6:	607a      	str	r2, [r7, #4]
  real_T y;
  int32_T k;
  y = 0.0;
 800d5b8:	f04f 0200 	mov.w	r2, #0
 800d5bc:	f04f 0300 	mov.w	r3, #0
 800d5c0:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  if (n >= 1) {
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	f340 8090 	ble.w	800d6ec <xnrm2_Mnmxg9YT+0x140>
    if (n == 1) {
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	2b01      	cmp	r3, #1
 800d5d0:	d10e      	bne.n	800d5f0 <xnrm2_Mnmxg9YT+0x44>
      y = fabs(x[ix0 - 1]);
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800d5d8:	3b01      	subs	r3, #1
 800d5da:	00db      	lsls	r3, r3, #3
 800d5dc:	68ba      	ldr	r2, [r7, #8]
 800d5de:	4413      	add	r3, r2
 800d5e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5e4:	4611      	mov	r1, r2
 800d5e6:	6439      	str	r1, [r7, #64]	; 0x40
 800d5e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d5ec:	647b      	str	r3, [r7, #68]	; 0x44
 800d5ee:	e07d      	b.n	800d6ec <xnrm2_Mnmxg9YT+0x140>
    } else {
      real_T scale;
      int32_T kend;
      scale = 3.3121686421112381E-170;
 800d5f0:	f04f 0200 	mov.w	r2, #0
 800d5f4:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 800d5f8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      kend = (ix0 + n) - 1;
 800d5fc:	687a      	ldr	r2, [r7, #4]
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	4413      	add	r3, r2
 800d602:	3b01      	subs	r3, #1
 800d604:	62fb      	str	r3, [r7, #44]	; 0x2c
      for (k = ix0; k <= kend; k++) {
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d60a:	e05d      	b.n	800d6c8 <xnrm2_Mnmxg9YT+0x11c>
        real_T absxk;
        absxk = fabs(x[k - 1]);
 800d60c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d60e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800d612:	3b01      	subs	r3, #1
 800d614:	00db      	lsls	r3, r3, #3
 800d616:	68ba      	ldr	r2, [r7, #8]
 800d618:	4413      	add	r3, r2
 800d61a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d61e:	4611      	mov	r1, r2
 800d620:	6239      	str	r1, [r7, #32]
 800d622:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d626:	627b      	str	r3, [r7, #36]	; 0x24
        if (absxk > scale) {
 800d628:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800d62c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800d630:	f7f3 fa64 	bl	8000afc <__aeabi_dcmpgt>
 800d634:	4603      	mov	r3, r0
 800d636:	2b00      	cmp	r3, #0
 800d638:	d029      	beq.n	800d68e <xnrm2_Mnmxg9YT+0xe2>
          real_T t;
          t = scale / absxk;
 800d63a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d63e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800d642:	f7f3 f8f5 	bl	8000830 <__aeabi_ddiv>
 800d646:	4602      	mov	r2, r0
 800d648:	460b      	mov	r3, r1
 800d64a:	e9c7 2304 	strd	r2, r3, [r7, #16]
          y = y * t * t + 1.0;
 800d64e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d652:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800d656:	f7f2 ffc1 	bl	80005dc <__aeabi_dmul>
 800d65a:	4602      	mov	r2, r0
 800d65c:	460b      	mov	r3, r1
 800d65e:	4610      	mov	r0, r2
 800d660:	4619      	mov	r1, r3
 800d662:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d666:	f7f2 ffb9 	bl	80005dc <__aeabi_dmul>
 800d66a:	4602      	mov	r2, r0
 800d66c:	460b      	mov	r3, r1
 800d66e:	4610      	mov	r0, r2
 800d670:	4619      	mov	r1, r3
 800d672:	f04f 0200 	mov.w	r2, #0
 800d676:	4b23      	ldr	r3, [pc, #140]	; (800d704 <xnrm2_Mnmxg9YT+0x158>)
 800d678:	f7f2 fdfa 	bl	8000270 <__adddf3>
 800d67c:	4602      	mov	r2, r0
 800d67e:	460b      	mov	r3, r1
 800d680:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
          scale = absxk;
 800d684:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d688:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 800d68c:	e019      	b.n	800d6c2 <xnrm2_Mnmxg9YT+0x116>
        } else {
          real_T t;
          t = absxk / scale;
 800d68e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800d692:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800d696:	f7f3 f8cb 	bl	8000830 <__aeabi_ddiv>
 800d69a:	4602      	mov	r2, r0
 800d69c:	460b      	mov	r3, r1
 800d69e:	e9c7 2306 	strd	r2, r3, [r7, #24]
          y += t * t;
 800d6a2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d6a6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800d6aa:	f7f2 ff97 	bl	80005dc <__aeabi_dmul>
 800d6ae:	4602      	mov	r2, r0
 800d6b0:	460b      	mov	r3, r1
 800d6b2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800d6b6:	f7f2 fddb 	bl	8000270 <__adddf3>
 800d6ba:	4602      	mov	r2, r0
 800d6bc:	460b      	mov	r3, r1
 800d6be:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      for (k = ix0; k <= kend; k++) {
 800d6c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6c4:	3301      	adds	r3, #1
 800d6c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d6c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d6ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6cc:	429a      	cmp	r2, r3
 800d6ce:	dd9d      	ble.n	800d60c <xnrm2_Mnmxg9YT+0x60>
        }
      }

      y = scale * sqrt(y);
 800d6d0:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 800d6d4:	f009 fc08 	bl	8016ee8 <sqrt>
 800d6d8:	ec53 2b10 	vmov	r2, r3, d0
 800d6dc:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800d6e0:	f7f2 ff7c 	bl	80005dc <__aeabi_dmul>
 800d6e4:	4602      	mov	r2, r0
 800d6e6:	460b      	mov	r3, r1
 800d6e8:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    }
  }

  return y;
 800d6ec:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800d6f0:	ec43 2b17 	vmov	d7, r2, r3
}
 800d6f4:	eeb0 0a47 	vmov.f32	s0, s14
 800d6f8:	eef0 0a67 	vmov.f32	s1, s15
 800d6fc:	3748      	adds	r7, #72	; 0x48
 800d6fe:	46bd      	mov	sp, r7
 800d700:	bd80      	pop	{r7, pc}
 800d702:	bf00      	nop
 800d704:	3ff00000 	.word	0x3ff00000

0800d708 <xnrm2_Rlk0oxWw>:
#include "rtwtypes.h"
#include "xnrm2_Rlk0oxWw.h"
#include <math.h>

real_T xnrm2_Rlk0oxWw(int32_T n, const real_T x[3], int32_T ix0)
{
 800d708:	b580      	push	{r7, lr}
 800d70a:	b092      	sub	sp, #72	; 0x48
 800d70c:	af00      	add	r7, sp, #0
 800d70e:	60f8      	str	r0, [r7, #12]
 800d710:	60b9      	str	r1, [r7, #8]
 800d712:	607a      	str	r2, [r7, #4]
  real_T y;
  int32_T k;
  y = 0.0;
 800d714:	f04f 0200 	mov.w	r2, #0
 800d718:	f04f 0300 	mov.w	r3, #0
 800d71c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  if (n >= 1) {
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	2b00      	cmp	r3, #0
 800d724:	f340 8090 	ble.w	800d848 <xnrm2_Rlk0oxWw+0x140>
    if (n == 1) {
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	2b01      	cmp	r3, #1
 800d72c:	d10e      	bne.n	800d74c <xnrm2_Rlk0oxWw+0x44>
      y = fabs(x[ix0 - 1]);
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800d734:	3b01      	subs	r3, #1
 800d736:	00db      	lsls	r3, r3, #3
 800d738:	68ba      	ldr	r2, [r7, #8]
 800d73a:	4413      	add	r3, r2
 800d73c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d740:	4611      	mov	r1, r2
 800d742:	6439      	str	r1, [r7, #64]	; 0x40
 800d744:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d748:	647b      	str	r3, [r7, #68]	; 0x44
 800d74a:	e07d      	b.n	800d848 <xnrm2_Rlk0oxWw+0x140>
    } else {
      real_T scale;
      int32_T kend;
      scale = 3.3121686421112381E-170;
 800d74c:	f04f 0200 	mov.w	r2, #0
 800d750:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 800d754:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      kend = (ix0 + n) - 1;
 800d758:	687a      	ldr	r2, [r7, #4]
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	4413      	add	r3, r2
 800d75e:	3b01      	subs	r3, #1
 800d760:	62fb      	str	r3, [r7, #44]	; 0x2c
      for (k = ix0; k <= kend; k++) {
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d766:	e05d      	b.n	800d824 <xnrm2_Rlk0oxWw+0x11c>
        real_T absxk;
        absxk = fabs(x[k - 1]);
 800d768:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d76a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800d76e:	3b01      	subs	r3, #1
 800d770:	00db      	lsls	r3, r3, #3
 800d772:	68ba      	ldr	r2, [r7, #8]
 800d774:	4413      	add	r3, r2
 800d776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d77a:	4611      	mov	r1, r2
 800d77c:	6239      	str	r1, [r7, #32]
 800d77e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d782:	627b      	str	r3, [r7, #36]	; 0x24
        if (absxk > scale) {
 800d784:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800d788:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800d78c:	f7f3 f9b6 	bl	8000afc <__aeabi_dcmpgt>
 800d790:	4603      	mov	r3, r0
 800d792:	2b00      	cmp	r3, #0
 800d794:	d029      	beq.n	800d7ea <xnrm2_Rlk0oxWw+0xe2>
          real_T t;
          t = scale / absxk;
 800d796:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d79a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800d79e:	f7f3 f847 	bl	8000830 <__aeabi_ddiv>
 800d7a2:	4602      	mov	r2, r0
 800d7a4:	460b      	mov	r3, r1
 800d7a6:	e9c7 2304 	strd	r2, r3, [r7, #16]
          y = y * t * t + 1.0;
 800d7aa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d7ae:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800d7b2:	f7f2 ff13 	bl	80005dc <__aeabi_dmul>
 800d7b6:	4602      	mov	r2, r0
 800d7b8:	460b      	mov	r3, r1
 800d7ba:	4610      	mov	r0, r2
 800d7bc:	4619      	mov	r1, r3
 800d7be:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d7c2:	f7f2 ff0b 	bl	80005dc <__aeabi_dmul>
 800d7c6:	4602      	mov	r2, r0
 800d7c8:	460b      	mov	r3, r1
 800d7ca:	4610      	mov	r0, r2
 800d7cc:	4619      	mov	r1, r3
 800d7ce:	f04f 0200 	mov.w	r2, #0
 800d7d2:	4b23      	ldr	r3, [pc, #140]	; (800d860 <xnrm2_Rlk0oxWw+0x158>)
 800d7d4:	f7f2 fd4c 	bl	8000270 <__adddf3>
 800d7d8:	4602      	mov	r2, r0
 800d7da:	460b      	mov	r3, r1
 800d7dc:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
          scale = absxk;
 800d7e0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d7e4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 800d7e8:	e019      	b.n	800d81e <xnrm2_Rlk0oxWw+0x116>
        } else {
          real_T t;
          t = absxk / scale;
 800d7ea:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800d7ee:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800d7f2:	f7f3 f81d 	bl	8000830 <__aeabi_ddiv>
 800d7f6:	4602      	mov	r2, r0
 800d7f8:	460b      	mov	r3, r1
 800d7fa:	e9c7 2306 	strd	r2, r3, [r7, #24]
          y += t * t;
 800d7fe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d802:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800d806:	f7f2 fee9 	bl	80005dc <__aeabi_dmul>
 800d80a:	4602      	mov	r2, r0
 800d80c:	460b      	mov	r3, r1
 800d80e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800d812:	f7f2 fd2d 	bl	8000270 <__adddf3>
 800d816:	4602      	mov	r2, r0
 800d818:	460b      	mov	r3, r1
 800d81a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      for (k = ix0; k <= kend; k++) {
 800d81e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d820:	3301      	adds	r3, #1
 800d822:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d824:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d828:	429a      	cmp	r2, r3
 800d82a:	dd9d      	ble.n	800d768 <xnrm2_Rlk0oxWw+0x60>
        }
      }

      y = scale * sqrt(y);
 800d82c:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 800d830:	f009 fb5a 	bl	8016ee8 <sqrt>
 800d834:	ec53 2b10 	vmov	r2, r3, d0
 800d838:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800d83c:	f7f2 fece 	bl	80005dc <__aeabi_dmul>
 800d840:	4602      	mov	r2, r0
 800d842:	460b      	mov	r3, r1
 800d844:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    }
  }

  return y;
 800d848:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800d84c:	ec43 2b17 	vmov	d7, r2, r3
}
 800d850:	eeb0 0a47 	vmov.f32	s0, s14
 800d854:	eef0 0a67 	vmov.f32	s1, s15
 800d858:	3748      	adds	r7, #72	; 0x48
 800d85a:	46bd      	mov	sp, r7
 800d85c:	bd80      	pop	{r7, pc}
 800d85e:	bf00      	nop
 800d860:	3ff00000 	.word	0x3ff00000

0800d864 <xnrm2_nLdASVZH>:
#include "rtwtypes.h"
#include "xnrm2_nLdASVZH.h"
#include <math.h>

real_T xnrm2_nLdASVZH(int32_T n, const real_T x[18], int32_T ix0)
{
 800d864:	b580      	push	{r7, lr}
 800d866:	b092      	sub	sp, #72	; 0x48
 800d868:	af00      	add	r7, sp, #0
 800d86a:	60f8      	str	r0, [r7, #12]
 800d86c:	60b9      	str	r1, [r7, #8]
 800d86e:	607a      	str	r2, [r7, #4]
  real_T y;
  int32_T k;
  y = 0.0;
 800d870:	f04f 0200 	mov.w	r2, #0
 800d874:	f04f 0300 	mov.w	r3, #0
 800d878:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  if (n >= 1) {
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	2b00      	cmp	r3, #0
 800d880:	f340 8090 	ble.w	800d9a4 <xnrm2_nLdASVZH+0x140>
    if (n == 1) {
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	2b01      	cmp	r3, #1
 800d888:	d10e      	bne.n	800d8a8 <xnrm2_nLdASVZH+0x44>
      y = fabs(x[ix0 - 1]);
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800d890:	3b01      	subs	r3, #1
 800d892:	00db      	lsls	r3, r3, #3
 800d894:	68ba      	ldr	r2, [r7, #8]
 800d896:	4413      	add	r3, r2
 800d898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d89c:	4611      	mov	r1, r2
 800d89e:	6439      	str	r1, [r7, #64]	; 0x40
 800d8a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d8a4:	647b      	str	r3, [r7, #68]	; 0x44
 800d8a6:	e07d      	b.n	800d9a4 <xnrm2_nLdASVZH+0x140>
    } else {
      real_T scale;
      int32_T kend;
      scale = 3.3121686421112381E-170;
 800d8a8:	f04f 0200 	mov.w	r2, #0
 800d8ac:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 800d8b0:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      kend = (ix0 + n) - 1;
 800d8b4:	687a      	ldr	r2, [r7, #4]
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	4413      	add	r3, r2
 800d8ba:	3b01      	subs	r3, #1
 800d8bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      for (k = ix0; k <= kend; k++) {
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d8c2:	e05d      	b.n	800d980 <xnrm2_nLdASVZH+0x11c>
        real_T absxk;
        absxk = fabs(x[k - 1]);
 800d8c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8c6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800d8ca:	3b01      	subs	r3, #1
 800d8cc:	00db      	lsls	r3, r3, #3
 800d8ce:	68ba      	ldr	r2, [r7, #8]
 800d8d0:	4413      	add	r3, r2
 800d8d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8d6:	4611      	mov	r1, r2
 800d8d8:	6239      	str	r1, [r7, #32]
 800d8da:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d8de:	627b      	str	r3, [r7, #36]	; 0x24
        if (absxk > scale) {
 800d8e0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800d8e4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800d8e8:	f7f3 f908 	bl	8000afc <__aeabi_dcmpgt>
 800d8ec:	4603      	mov	r3, r0
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d029      	beq.n	800d946 <xnrm2_nLdASVZH+0xe2>
          real_T t;
          t = scale / absxk;
 800d8f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d8f6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800d8fa:	f7f2 ff99 	bl	8000830 <__aeabi_ddiv>
 800d8fe:	4602      	mov	r2, r0
 800d900:	460b      	mov	r3, r1
 800d902:	e9c7 2304 	strd	r2, r3, [r7, #16]
          y = y * t * t + 1.0;
 800d906:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d90a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800d90e:	f7f2 fe65 	bl	80005dc <__aeabi_dmul>
 800d912:	4602      	mov	r2, r0
 800d914:	460b      	mov	r3, r1
 800d916:	4610      	mov	r0, r2
 800d918:	4619      	mov	r1, r3
 800d91a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d91e:	f7f2 fe5d 	bl	80005dc <__aeabi_dmul>
 800d922:	4602      	mov	r2, r0
 800d924:	460b      	mov	r3, r1
 800d926:	4610      	mov	r0, r2
 800d928:	4619      	mov	r1, r3
 800d92a:	f04f 0200 	mov.w	r2, #0
 800d92e:	4b23      	ldr	r3, [pc, #140]	; (800d9bc <xnrm2_nLdASVZH+0x158>)
 800d930:	f7f2 fc9e 	bl	8000270 <__adddf3>
 800d934:	4602      	mov	r2, r0
 800d936:	460b      	mov	r3, r1
 800d938:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
          scale = absxk;
 800d93c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d940:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 800d944:	e019      	b.n	800d97a <xnrm2_nLdASVZH+0x116>
        } else {
          real_T t;
          t = absxk / scale;
 800d946:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800d94a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800d94e:	f7f2 ff6f 	bl	8000830 <__aeabi_ddiv>
 800d952:	4602      	mov	r2, r0
 800d954:	460b      	mov	r3, r1
 800d956:	e9c7 2306 	strd	r2, r3, [r7, #24]
          y += t * t;
 800d95a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d95e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800d962:	f7f2 fe3b 	bl	80005dc <__aeabi_dmul>
 800d966:	4602      	mov	r2, r0
 800d968:	460b      	mov	r3, r1
 800d96a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800d96e:	f7f2 fc7f 	bl	8000270 <__adddf3>
 800d972:	4602      	mov	r2, r0
 800d974:	460b      	mov	r3, r1
 800d976:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      for (k = ix0; k <= kend; k++) {
 800d97a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d97c:	3301      	adds	r3, #1
 800d97e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d980:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d984:	429a      	cmp	r2, r3
 800d986:	dd9d      	ble.n	800d8c4 <xnrm2_nLdASVZH+0x60>
        }
      }

      y = scale * sqrt(y);
 800d988:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 800d98c:	f009 faac 	bl	8016ee8 <sqrt>
 800d990:	ec53 2b10 	vmov	r2, r3, d0
 800d994:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800d998:	f7f2 fe20 	bl	80005dc <__aeabi_dmul>
 800d99c:	4602      	mov	r2, r0
 800d99e:	460b      	mov	r3, r1
 800d9a0:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    }
  }

  return y;
 800d9a4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800d9a8:	ec43 2b17 	vmov	d7, r2, r3
}
 800d9ac:	eeb0 0a47 	vmov.f32	s0, s14
 800d9b0:	eef0 0a67 	vmov.f32	s1, s15
 800d9b4:	3748      	adds	r7, #72	; 0x48
 800d9b6:	46bd      	mov	sp, r7
 800d9b8:	bd80      	pop	{r7, pc}
 800d9ba:	bf00      	nop
 800d9bc:	3ff00000 	.word	0x3ff00000

0800d9c0 <xnrm2_xDOlDEtw>:
#include "rtwtypes.h"
#include "xnrm2_xDOlDEtw.h"
#include <math.h>

real_T xnrm2_xDOlDEtw(int32_T n, const real_T x[9], int32_T ix0)
{
 800d9c0:	b580      	push	{r7, lr}
 800d9c2:	b092      	sub	sp, #72	; 0x48
 800d9c4:	af00      	add	r7, sp, #0
 800d9c6:	60f8      	str	r0, [r7, #12]
 800d9c8:	60b9      	str	r1, [r7, #8]
 800d9ca:	607a      	str	r2, [r7, #4]
  real_T y;
  int32_T k;
  y = 0.0;
 800d9cc:	f04f 0200 	mov.w	r2, #0
 800d9d0:	f04f 0300 	mov.w	r3, #0
 800d9d4:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  if (n >= 1) {
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	f340 8090 	ble.w	800db00 <xnrm2_xDOlDEtw+0x140>
    if (n == 1) {
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	2b01      	cmp	r3, #1
 800d9e4:	d10e      	bne.n	800da04 <xnrm2_xDOlDEtw+0x44>
      y = fabs(x[ix0 - 1]);
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800d9ec:	3b01      	subs	r3, #1
 800d9ee:	00db      	lsls	r3, r3, #3
 800d9f0:	68ba      	ldr	r2, [r7, #8]
 800d9f2:	4413      	add	r3, r2
 800d9f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9f8:	4611      	mov	r1, r2
 800d9fa:	6439      	str	r1, [r7, #64]	; 0x40
 800d9fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800da00:	647b      	str	r3, [r7, #68]	; 0x44
 800da02:	e07d      	b.n	800db00 <xnrm2_xDOlDEtw+0x140>
    } else {
      real_T scale;
      int32_T kend;
      scale = 3.3121686421112381E-170;
 800da04:	f04f 0200 	mov.w	r2, #0
 800da08:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 800da0c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      kend = (ix0 + n) - 1;
 800da10:	687a      	ldr	r2, [r7, #4]
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	4413      	add	r3, r2
 800da16:	3b01      	subs	r3, #1
 800da18:	62fb      	str	r3, [r7, #44]	; 0x2c
      for (k = ix0; k <= kend; k++) {
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800da1e:	e05d      	b.n	800dadc <xnrm2_xDOlDEtw+0x11c>
        real_T absxk;
        absxk = fabs(x[k - 1]);
 800da20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da22:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800da26:	3b01      	subs	r3, #1
 800da28:	00db      	lsls	r3, r3, #3
 800da2a:	68ba      	ldr	r2, [r7, #8]
 800da2c:	4413      	add	r3, r2
 800da2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da32:	4611      	mov	r1, r2
 800da34:	6239      	str	r1, [r7, #32]
 800da36:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800da3a:	627b      	str	r3, [r7, #36]	; 0x24
        if (absxk > scale) {
 800da3c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800da40:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800da44:	f7f3 f85a 	bl	8000afc <__aeabi_dcmpgt>
 800da48:	4603      	mov	r3, r0
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d029      	beq.n	800daa2 <xnrm2_xDOlDEtw+0xe2>
          real_T t;
          t = scale / absxk;
 800da4e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800da52:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800da56:	f7f2 feeb 	bl	8000830 <__aeabi_ddiv>
 800da5a:	4602      	mov	r2, r0
 800da5c:	460b      	mov	r3, r1
 800da5e:	e9c7 2304 	strd	r2, r3, [r7, #16]
          y = y * t * t + 1.0;
 800da62:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800da66:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800da6a:	f7f2 fdb7 	bl	80005dc <__aeabi_dmul>
 800da6e:	4602      	mov	r2, r0
 800da70:	460b      	mov	r3, r1
 800da72:	4610      	mov	r0, r2
 800da74:	4619      	mov	r1, r3
 800da76:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800da7a:	f7f2 fdaf 	bl	80005dc <__aeabi_dmul>
 800da7e:	4602      	mov	r2, r0
 800da80:	460b      	mov	r3, r1
 800da82:	4610      	mov	r0, r2
 800da84:	4619      	mov	r1, r3
 800da86:	f04f 0200 	mov.w	r2, #0
 800da8a:	4b23      	ldr	r3, [pc, #140]	; (800db18 <xnrm2_xDOlDEtw+0x158>)
 800da8c:	f7f2 fbf0 	bl	8000270 <__adddf3>
 800da90:	4602      	mov	r2, r0
 800da92:	460b      	mov	r3, r1
 800da94:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
          scale = absxk;
 800da98:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800da9c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 800daa0:	e019      	b.n	800dad6 <xnrm2_xDOlDEtw+0x116>
        } else {
          real_T t;
          t = absxk / scale;
 800daa2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800daa6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800daaa:	f7f2 fec1 	bl	8000830 <__aeabi_ddiv>
 800daae:	4602      	mov	r2, r0
 800dab0:	460b      	mov	r3, r1
 800dab2:	e9c7 2306 	strd	r2, r3, [r7, #24]
          y += t * t;
 800dab6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800daba:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800dabe:	f7f2 fd8d 	bl	80005dc <__aeabi_dmul>
 800dac2:	4602      	mov	r2, r0
 800dac4:	460b      	mov	r3, r1
 800dac6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800daca:	f7f2 fbd1 	bl	8000270 <__adddf3>
 800dace:	4602      	mov	r2, r0
 800dad0:	460b      	mov	r3, r1
 800dad2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      for (k = ix0; k <= kend; k++) {
 800dad6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dad8:	3301      	adds	r3, #1
 800dada:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dadc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800dade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dae0:	429a      	cmp	r2, r3
 800dae2:	dd9d      	ble.n	800da20 <xnrm2_xDOlDEtw+0x60>
        }
      }

      y = scale * sqrt(y);
 800dae4:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 800dae8:	f009 f9fe 	bl	8016ee8 <sqrt>
 800daec:	ec53 2b10 	vmov	r2, r3, d0
 800daf0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800daf4:	f7f2 fd72 	bl	80005dc <__aeabi_dmul>
 800daf8:	4602      	mov	r2, r0
 800dafa:	460b      	mov	r3, r1
 800dafc:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    }
  }

  return y;
 800db00:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800db04:	ec43 2b17 	vmov	d7, r2, r3
}
 800db08:	eeb0 0a47 	vmov.f32	s0, s14
 800db0c:	eef0 0a67 	vmov.f32	s1, s15
 800db10:	3748      	adds	r7, #72	; 0x48
 800db12:	46bd      	mov	sp, r7
 800db14:	bd80      	pop	{r7, pc}
 800db16:	bf00      	nop
 800db18:	3ff00000 	.word	0x3ff00000

0800db1c <xrot_i7f01JoJ>:
#include "rtwtypes.h"
#include "xrot_i7f01JoJ.h"

void xrot_i7f01JoJ(real_T x[9], int32_T ix0, int32_T iy0, real_T c, real_T s)
{
 800db1c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800db20:	b08c      	sub	sp, #48	; 0x30
 800db22:	af00      	add	r7, sp, #0
 800db24:	61f8      	str	r0, [r7, #28]
 800db26:	61b9      	str	r1, [r7, #24]
 800db28:	617a      	str	r2, [r7, #20]
 800db2a:	ed87 0b02 	vstr	d0, [r7, #8]
 800db2e:	ed87 1b00 	vstr	d1, [r7]
  real_T temp;
  real_T temp_tmp;
  temp = x[iy0 - 1];
 800db32:	697b      	ldr	r3, [r7, #20]
 800db34:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800db38:	3b01      	subs	r3, #1
 800db3a:	00db      	lsls	r3, r3, #3
 800db3c:	69fa      	ldr	r2, [r7, #28]
 800db3e:	4413      	add	r3, r2
 800db40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db44:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  temp_tmp = x[ix0 - 1];
 800db48:	69bb      	ldr	r3, [r7, #24]
 800db4a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800db4e:	3b01      	subs	r3, #1
 800db50:	00db      	lsls	r3, r3, #3
 800db52:	69fa      	ldr	r2, [r7, #28]
 800db54:	4413      	add	r3, r2
 800db56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db5a:	e9c7 2308 	strd	r2, r3, [r7, #32]
  x[iy0 - 1] = temp * c - temp_tmp * s;
 800db5e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800db62:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800db66:	f7f2 fd39 	bl	80005dc <__aeabi_dmul>
 800db6a:	4602      	mov	r2, r0
 800db6c:	460b      	mov	r3, r1
 800db6e:	4690      	mov	r8, r2
 800db70:	4699      	mov	r9, r3
 800db72:	e9d7 2300 	ldrd	r2, r3, [r7]
 800db76:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800db7a:	f7f2 fd2f 	bl	80005dc <__aeabi_dmul>
 800db7e:	4602      	mov	r2, r0
 800db80:	460b      	mov	r3, r1
 800db82:	4610      	mov	r0, r2
 800db84:	4619      	mov	r1, r3
 800db86:	697b      	ldr	r3, [r7, #20]
 800db88:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800db8c:	3b01      	subs	r3, #1
 800db8e:	00db      	lsls	r3, r3, #3
 800db90:	69fa      	ldr	r2, [r7, #28]
 800db92:	18d4      	adds	r4, r2, r3
 800db94:	4602      	mov	r2, r0
 800db96:	460b      	mov	r3, r1
 800db98:	4640      	mov	r0, r8
 800db9a:	4649      	mov	r1, r9
 800db9c:	f7f2 fb66 	bl	800026c <__aeabi_dsub>
 800dba0:	4602      	mov	r2, r0
 800dba2:	460b      	mov	r3, r1
 800dba4:	e9c4 2300 	strd	r2, r3, [r4]
  x[ix0 - 1] = temp_tmp * c + temp * s;
 800dba8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800dbac:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800dbb0:	f7f2 fd14 	bl	80005dc <__aeabi_dmul>
 800dbb4:	4602      	mov	r2, r0
 800dbb6:	460b      	mov	r3, r1
 800dbb8:	4690      	mov	r8, r2
 800dbba:	4699      	mov	r9, r3
 800dbbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dbc0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800dbc4:	f7f2 fd0a 	bl	80005dc <__aeabi_dmul>
 800dbc8:	4602      	mov	r2, r0
 800dbca:	460b      	mov	r3, r1
 800dbcc:	4610      	mov	r0, r2
 800dbce:	4619      	mov	r1, r3
 800dbd0:	69bb      	ldr	r3, [r7, #24]
 800dbd2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800dbd6:	3b01      	subs	r3, #1
 800dbd8:	00db      	lsls	r3, r3, #3
 800dbda:	69fa      	ldr	r2, [r7, #28]
 800dbdc:	18d4      	adds	r4, r2, r3
 800dbde:	4602      	mov	r2, r0
 800dbe0:	460b      	mov	r3, r1
 800dbe2:	4640      	mov	r0, r8
 800dbe4:	4649      	mov	r1, r9
 800dbe6:	f7f2 fb43 	bl	8000270 <__adddf3>
 800dbea:	4602      	mov	r2, r0
 800dbec:	460b      	mov	r3, r1
 800dbee:	e9c4 2300 	strd	r2, r3, [r4]
  temp = x[ix0] * c + x[iy0] * s;
 800dbf2:	69bb      	ldr	r3, [r7, #24]
 800dbf4:	00db      	lsls	r3, r3, #3
 800dbf6:	69fa      	ldr	r2, [r7, #28]
 800dbf8:	4413      	add	r3, r2
 800dbfa:	e9d3 0100 	ldrd	r0, r1, [r3]
 800dbfe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800dc02:	f7f2 fceb 	bl	80005dc <__aeabi_dmul>
 800dc06:	4602      	mov	r2, r0
 800dc08:	460b      	mov	r3, r1
 800dc0a:	4614      	mov	r4, r2
 800dc0c:	461d      	mov	r5, r3
 800dc0e:	697b      	ldr	r3, [r7, #20]
 800dc10:	00db      	lsls	r3, r3, #3
 800dc12:	69fa      	ldr	r2, [r7, #28]
 800dc14:	4413      	add	r3, r2
 800dc16:	e9d3 0100 	ldrd	r0, r1, [r3]
 800dc1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dc1e:	f7f2 fcdd 	bl	80005dc <__aeabi_dmul>
 800dc22:	4602      	mov	r2, r0
 800dc24:	460b      	mov	r3, r1
 800dc26:	4620      	mov	r0, r4
 800dc28:	4629      	mov	r1, r5
 800dc2a:	f7f2 fb21 	bl	8000270 <__adddf3>
 800dc2e:	4602      	mov	r2, r0
 800dc30:	460b      	mov	r3, r1
 800dc32:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  x[iy0] = x[iy0] * c - x[ix0] * s;
 800dc36:	697b      	ldr	r3, [r7, #20]
 800dc38:	00db      	lsls	r3, r3, #3
 800dc3a:	69fa      	ldr	r2, [r7, #28]
 800dc3c:	4413      	add	r3, r2
 800dc3e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800dc42:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800dc46:	f7f2 fcc9 	bl	80005dc <__aeabi_dmul>
 800dc4a:	4602      	mov	r2, r0
 800dc4c:	460b      	mov	r3, r1
 800dc4e:	4690      	mov	r8, r2
 800dc50:	4699      	mov	r9, r3
 800dc52:	69bb      	ldr	r3, [r7, #24]
 800dc54:	00db      	lsls	r3, r3, #3
 800dc56:	69fa      	ldr	r2, [r7, #28]
 800dc58:	4413      	add	r3, r2
 800dc5a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800dc5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dc62:	f7f2 fcbb 	bl	80005dc <__aeabi_dmul>
 800dc66:	4602      	mov	r2, r0
 800dc68:	460b      	mov	r3, r1
 800dc6a:	4610      	mov	r0, r2
 800dc6c:	4619      	mov	r1, r3
 800dc6e:	697b      	ldr	r3, [r7, #20]
 800dc70:	00db      	lsls	r3, r3, #3
 800dc72:	69fa      	ldr	r2, [r7, #28]
 800dc74:	18d4      	adds	r4, r2, r3
 800dc76:	4602      	mov	r2, r0
 800dc78:	460b      	mov	r3, r1
 800dc7a:	4640      	mov	r0, r8
 800dc7c:	4649      	mov	r1, r9
 800dc7e:	f7f2 faf5 	bl	800026c <__aeabi_dsub>
 800dc82:	4602      	mov	r2, r0
 800dc84:	460b      	mov	r3, r1
 800dc86:	e9c4 2300 	strd	r2, r3, [r4]
  x[ix0] = temp;
 800dc8a:	69bb      	ldr	r3, [r7, #24]
 800dc8c:	00db      	lsls	r3, r3, #3
 800dc8e:	69fa      	ldr	r2, [r7, #28]
 800dc90:	18d1      	adds	r1, r2, r3
 800dc92:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800dc96:	e9c1 2300 	strd	r2, r3, [r1]
  temp = x[iy0 + 1];
 800dc9a:	697b      	ldr	r3, [r7, #20]
 800dc9c:	3301      	adds	r3, #1
 800dc9e:	00db      	lsls	r3, r3, #3
 800dca0:	69fa      	ldr	r2, [r7, #28]
 800dca2:	4413      	add	r3, r2
 800dca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dca8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  temp_tmp = x[ix0 + 1];
 800dcac:	69bb      	ldr	r3, [r7, #24]
 800dcae:	3301      	adds	r3, #1
 800dcb0:	00db      	lsls	r3, r3, #3
 800dcb2:	69fa      	ldr	r2, [r7, #28]
 800dcb4:	4413      	add	r3, r2
 800dcb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcba:	e9c7 2308 	strd	r2, r3, [r7, #32]
  x[iy0 + 1] = temp * c - temp_tmp * s;
 800dcbe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800dcc2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800dcc6:	f7f2 fc89 	bl	80005dc <__aeabi_dmul>
 800dcca:	4602      	mov	r2, r0
 800dccc:	460b      	mov	r3, r1
 800dcce:	4690      	mov	r8, r2
 800dcd0:	4699      	mov	r9, r3
 800dcd2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dcd6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800dcda:	f7f2 fc7f 	bl	80005dc <__aeabi_dmul>
 800dcde:	4602      	mov	r2, r0
 800dce0:	460b      	mov	r3, r1
 800dce2:	4610      	mov	r0, r2
 800dce4:	4619      	mov	r1, r3
 800dce6:	697b      	ldr	r3, [r7, #20]
 800dce8:	3301      	adds	r3, #1
 800dcea:	00db      	lsls	r3, r3, #3
 800dcec:	69fa      	ldr	r2, [r7, #28]
 800dcee:	18d4      	adds	r4, r2, r3
 800dcf0:	4602      	mov	r2, r0
 800dcf2:	460b      	mov	r3, r1
 800dcf4:	4640      	mov	r0, r8
 800dcf6:	4649      	mov	r1, r9
 800dcf8:	f7f2 fab8 	bl	800026c <__aeabi_dsub>
 800dcfc:	4602      	mov	r2, r0
 800dcfe:	460b      	mov	r3, r1
 800dd00:	e9c4 2300 	strd	r2, r3, [r4]
  x[ix0 + 1] = temp_tmp * c + temp * s;
 800dd04:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800dd08:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800dd0c:	f7f2 fc66 	bl	80005dc <__aeabi_dmul>
 800dd10:	4602      	mov	r2, r0
 800dd12:	460b      	mov	r3, r1
 800dd14:	4690      	mov	r8, r2
 800dd16:	4699      	mov	r9, r3
 800dd18:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dd1c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800dd20:	f7f2 fc5c 	bl	80005dc <__aeabi_dmul>
 800dd24:	4602      	mov	r2, r0
 800dd26:	460b      	mov	r3, r1
 800dd28:	4610      	mov	r0, r2
 800dd2a:	4619      	mov	r1, r3
 800dd2c:	69bb      	ldr	r3, [r7, #24]
 800dd2e:	3301      	adds	r3, #1
 800dd30:	00db      	lsls	r3, r3, #3
 800dd32:	69fa      	ldr	r2, [r7, #28]
 800dd34:	18d4      	adds	r4, r2, r3
 800dd36:	4602      	mov	r2, r0
 800dd38:	460b      	mov	r3, r1
 800dd3a:	4640      	mov	r0, r8
 800dd3c:	4649      	mov	r1, r9
 800dd3e:	f7f2 fa97 	bl	8000270 <__adddf3>
 800dd42:	4602      	mov	r2, r0
 800dd44:	460b      	mov	r3, r1
 800dd46:	e9c4 2300 	strd	r2, r3, [r4]
}
 800dd4a:	bf00      	nop
 800dd4c:	3730      	adds	r7, #48	; 0x30
 800dd4e:	46bd      	mov	sp, r7
 800dd50:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800dd54 <xrotg_XzIjz1eG>:
#include "rtwtypes.h"
#include "xrotg_XzIjz1eG.h"
#include <math.h>

void xrotg_XzIjz1eG(real_T *a, real_T *b, real_T *c, real_T *s)
{
 800dd54:	b5b0      	push	{r4, r5, r7, lr}
 800dd56:	b090      	sub	sp, #64	; 0x40
 800dd58:	af00      	add	r7, sp, #0
 800dd5a:	60f8      	str	r0, [r7, #12]
 800dd5c:	60b9      	str	r1, [r7, #8]
 800dd5e:	607a      	str	r2, [r7, #4]
 800dd60:	603b      	str	r3, [r7, #0]
  real_T absa;
  real_T absb;
  real_T roe;
  real_T scale;
  roe = *b;
 800dd62:	68bb      	ldr	r3, [r7, #8]
 800dd64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd68:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  absa = fabs(*a);
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd72:	4611      	mov	r1, r2
 800dd74:	62b9      	str	r1, [r7, #40]	; 0x28
 800dd76:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dd7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  absb = fabs(*b);
 800dd7c:	68bb      	ldr	r3, [r7, #8]
 800dd7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd82:	4611      	mov	r1, r2
 800dd84:	6239      	str	r1, [r7, #32]
 800dd86:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dd8a:	627b      	str	r3, [r7, #36]	; 0x24
  if (absa > absb) {
 800dd8c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800dd90:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800dd94:	f7f2 feb2 	bl	8000afc <__aeabi_dcmpgt>
 800dd98:	4603      	mov	r3, r0
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d004      	beq.n	800dda8 <xrotg_XzIjz1eG+0x54>
    roe = *a;
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dda4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  }

  scale = absa + absb;
 800dda8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ddac:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800ddb0:	f7f2 fa5e 	bl	8000270 <__adddf3>
 800ddb4:	4602      	mov	r2, r0
 800ddb6:	460b      	mov	r3, r1
 800ddb8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  if (scale == 0.0) {
 800ddbc:	f04f 0200 	mov.w	r2, #0
 800ddc0:	f04f 0300 	mov.w	r3, #0
 800ddc4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800ddc8:	f7f2 fe70 	bl	8000aac <__aeabi_dcmpeq>
 800ddcc:	4603      	mov	r3, r0
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d01b      	beq.n	800de0a <xrotg_XzIjz1eG+0xb6>
    *s = 0.0;
 800ddd2:	6839      	ldr	r1, [r7, #0]
 800ddd4:	f04f 0200 	mov.w	r2, #0
 800ddd8:	f04f 0300 	mov.w	r3, #0
 800dddc:	e9c1 2300 	strd	r2, r3, [r1]
    *c = 1.0;
 800dde0:	6879      	ldr	r1, [r7, #4]
 800dde2:	f04f 0200 	mov.w	r2, #0
 800dde6:	4b59      	ldr	r3, [pc, #356]	; (800df4c <xrotg_XzIjz1eG+0x1f8>)
 800dde8:	e9c1 2300 	strd	r2, r3, [r1]
    *a = 0.0;
 800ddec:	68f9      	ldr	r1, [r7, #12]
 800ddee:	f04f 0200 	mov.w	r2, #0
 800ddf2:	f04f 0300 	mov.w	r3, #0
 800ddf6:	e9c1 2300 	strd	r2, r3, [r1]
    *b = 0.0;
 800ddfa:	68b9      	ldr	r1, [r7, #8]
 800ddfc:	f04f 0200 	mov.w	r2, #0
 800de00:	f04f 0300 	mov.w	r3, #0
 800de04:	e9c1 2300 	strd	r2, r3, [r1]
      *b = 1.0;
    }

    *a = scale;
  }
}
 800de08:	e09b      	b.n	800df42 <xrotg_XzIjz1eG+0x1ee>
    ads = absa / scale;
 800de0a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800de0e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800de12:	f7f2 fd0d 	bl	8000830 <__aeabi_ddiv>
 800de16:	4602      	mov	r2, r0
 800de18:	460b      	mov	r3, r1
 800de1a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    bds = absb / scale;
 800de1e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800de22:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800de26:	f7f2 fd03 	bl	8000830 <__aeabi_ddiv>
 800de2a:	4602      	mov	r2, r0
 800de2c:	460b      	mov	r3, r1
 800de2e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    scale *= sqrt(ads * ads + bds * bds);
 800de32:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800de36:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800de3a:	f7f2 fbcf 	bl	80005dc <__aeabi_dmul>
 800de3e:	4602      	mov	r2, r0
 800de40:	460b      	mov	r3, r1
 800de42:	4614      	mov	r4, r2
 800de44:	461d      	mov	r5, r3
 800de46:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800de4a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800de4e:	f7f2 fbc5 	bl	80005dc <__aeabi_dmul>
 800de52:	4602      	mov	r2, r0
 800de54:	460b      	mov	r3, r1
 800de56:	4620      	mov	r0, r4
 800de58:	4629      	mov	r1, r5
 800de5a:	f7f2 fa09 	bl	8000270 <__adddf3>
 800de5e:	4602      	mov	r2, r0
 800de60:	460b      	mov	r3, r1
 800de62:	ec43 2b17 	vmov	d7, r2, r3
 800de66:	eeb0 0a47 	vmov.f32	s0, s14
 800de6a:	eef0 0a67 	vmov.f32	s1, s15
 800de6e:	f009 f83b 	bl	8016ee8 <sqrt>
 800de72:	ec53 2b10 	vmov	r2, r3, d0
 800de76:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800de7a:	f7f2 fbaf 	bl	80005dc <__aeabi_dmul>
 800de7e:	4602      	mov	r2, r0
 800de80:	460b      	mov	r3, r1
 800de82:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    if (roe < 0.0) {
 800de86:	f04f 0200 	mov.w	r2, #0
 800de8a:	f04f 0300 	mov.w	r3, #0
 800de8e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800de92:	f7f2 fe15 	bl	8000ac0 <__aeabi_dcmplt>
 800de96:	4603      	mov	r3, r0
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d005      	beq.n	800dea8 <xrotg_XzIjz1eG+0x154>
      scale = -scale;
 800de9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de9e:	633b      	str	r3, [r7, #48]	; 0x30
 800dea0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dea2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800dea6:	637b      	str	r3, [r7, #52]	; 0x34
    *c = *a / scale;
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	e9d3 0100 	ldrd	r0, r1, [r3]
 800deae:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800deb2:	f7f2 fcbd 	bl	8000830 <__aeabi_ddiv>
 800deb6:	4602      	mov	r2, r0
 800deb8:	460b      	mov	r3, r1
 800deba:	6879      	ldr	r1, [r7, #4]
 800debc:	e9c1 2300 	strd	r2, r3, [r1]
    *s = *b / scale;
 800dec0:	68bb      	ldr	r3, [r7, #8]
 800dec2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800dec6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800deca:	f7f2 fcb1 	bl	8000830 <__aeabi_ddiv>
 800dece:	4602      	mov	r2, r0
 800ded0:	460b      	mov	r3, r1
 800ded2:	6839      	ldr	r1, [r7, #0]
 800ded4:	e9c1 2300 	strd	r2, r3, [r1]
    if (absa > absb) {
 800ded8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800dedc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800dee0:	f7f2 fe0c 	bl	8000afc <__aeabi_dcmpgt>
 800dee4:	4603      	mov	r3, r0
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d006      	beq.n	800def8 <xrotg_XzIjz1eG+0x1a4>
      *b = *s;
 800deea:	683b      	ldr	r3, [r7, #0]
 800deec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800def0:	68b9      	ldr	r1, [r7, #8]
 800def2:	e9c1 2300 	strd	r2, r3, [r1]
 800def6:	e01f      	b.n	800df38 <xrotg_XzIjz1eG+0x1e4>
    } else if (*c != 0.0) {
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	e9d3 0100 	ldrd	r0, r1, [r3]
 800defe:	f04f 0200 	mov.w	r2, #0
 800df02:	f04f 0300 	mov.w	r3, #0
 800df06:	f7f2 fdd1 	bl	8000aac <__aeabi_dcmpeq>
 800df0a:	4603      	mov	r3, r0
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d10d      	bne.n	800df2c <xrotg_XzIjz1eG+0x1d8>
      *b = 1.0 / *c;
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df16:	f04f 0000 	mov.w	r0, #0
 800df1a:	490c      	ldr	r1, [pc, #48]	; (800df4c <xrotg_XzIjz1eG+0x1f8>)
 800df1c:	f7f2 fc88 	bl	8000830 <__aeabi_ddiv>
 800df20:	4602      	mov	r2, r0
 800df22:	460b      	mov	r3, r1
 800df24:	68b9      	ldr	r1, [r7, #8]
 800df26:	e9c1 2300 	strd	r2, r3, [r1]
 800df2a:	e005      	b.n	800df38 <xrotg_XzIjz1eG+0x1e4>
      *b = 1.0;
 800df2c:	68b9      	ldr	r1, [r7, #8]
 800df2e:	f04f 0200 	mov.w	r2, #0
 800df32:	4b06      	ldr	r3, [pc, #24]	; (800df4c <xrotg_XzIjz1eG+0x1f8>)
 800df34:	e9c1 2300 	strd	r2, r3, [r1]
    *a = scale;
 800df38:	68f9      	ldr	r1, [r7, #12]
 800df3a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800df3e:	e9c1 2300 	strd	r2, r3, [r1]
}
 800df42:	bf00      	nop
 800df44:	3740      	adds	r7, #64	; 0x40
 800df46:	46bd      	mov	sp, r7
 800df48:	bdb0      	pop	{r4, r5, r7, pc}
 800df4a:	bf00      	nop
 800df4c:	3ff00000 	.word	0x3ff00000

0800df50 <xscal_59GtRAwv>:
#include "rtwtypes.h"
#include "xscal_59GtRAwv.h"

void xscal_59GtRAwv(int32_T n, real_T a, real_T x[9], int32_T ix0)
{
 800df50:	b590      	push	{r4, r7, lr}
 800df52:	b089      	sub	sp, #36	; 0x24
 800df54:	af00      	add	r7, sp, #0
 800df56:	6178      	str	r0, [r7, #20]
 800df58:	ed87 0b02 	vstr	d0, [r7, #8]
 800df5c:	6139      	str	r1, [r7, #16]
 800df5e:	607a      	str	r2, [r7, #4]
  int32_T b;
  int32_T k;
  b = (ix0 + n) - 1;
 800df60:	687a      	ldr	r2, [r7, #4]
 800df62:	697b      	ldr	r3, [r7, #20]
 800df64:	4413      	add	r3, r2
 800df66:	3b01      	subs	r3, #1
 800df68:	61bb      	str	r3, [r7, #24]
  for (k = ix0; k <= b; k++) {
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	61fb      	str	r3, [r7, #28]
 800df6e:	e01a      	b.n	800dfa6 <xscal_59GtRAwv+0x56>
    x[k - 1] *= a;
 800df70:	69fb      	ldr	r3, [r7, #28]
 800df72:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800df76:	3b01      	subs	r3, #1
 800df78:	00db      	lsls	r3, r3, #3
 800df7a:	693a      	ldr	r2, [r7, #16]
 800df7c:	4413      	add	r3, r2
 800df7e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800df82:	69fb      	ldr	r3, [r7, #28]
 800df84:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800df88:	3b01      	subs	r3, #1
 800df8a:	00db      	lsls	r3, r3, #3
 800df8c:	693a      	ldr	r2, [r7, #16]
 800df8e:	18d4      	adds	r4, r2, r3
 800df90:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800df94:	f7f2 fb22 	bl	80005dc <__aeabi_dmul>
 800df98:	4602      	mov	r2, r0
 800df9a:	460b      	mov	r3, r1
 800df9c:	e9c4 2300 	strd	r2, r3, [r4]
  for (k = ix0; k <= b; k++) {
 800dfa0:	69fb      	ldr	r3, [r7, #28]
 800dfa2:	3301      	adds	r3, #1
 800dfa4:	61fb      	str	r3, [r7, #28]
 800dfa6:	69fa      	ldr	r2, [r7, #28]
 800dfa8:	69bb      	ldr	r3, [r7, #24]
 800dfaa:	429a      	cmp	r2, r3
 800dfac:	dde0      	ble.n	800df70 <xscal_59GtRAwv+0x20>
  }
}
 800dfae:	bf00      	nop
 800dfb0:	bf00      	nop
 800dfb2:	3724      	adds	r7, #36	; 0x24
 800dfb4:	46bd      	mov	sp, r7
 800dfb6:	bd90      	pop	{r4, r7, pc}

0800dfb8 <xscal_PLmmUlD2>:
#include "rtwtypes.h"
#include "xscal_PLmmUlD2.h"

void xscal_PLmmUlD2(int32_T n, real_T a, real_T x[3], int32_T ix0)
{
 800dfb8:	b590      	push	{r4, r7, lr}
 800dfba:	b089      	sub	sp, #36	; 0x24
 800dfbc:	af00      	add	r7, sp, #0
 800dfbe:	6178      	str	r0, [r7, #20]
 800dfc0:	ed87 0b02 	vstr	d0, [r7, #8]
 800dfc4:	6139      	str	r1, [r7, #16]
 800dfc6:	607a      	str	r2, [r7, #4]
  int32_T b;
  int32_T k;
  b = (ix0 + n) - 1;
 800dfc8:	687a      	ldr	r2, [r7, #4]
 800dfca:	697b      	ldr	r3, [r7, #20]
 800dfcc:	4413      	add	r3, r2
 800dfce:	3b01      	subs	r3, #1
 800dfd0:	61bb      	str	r3, [r7, #24]
  for (k = ix0; k <= b; k++) {
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	61fb      	str	r3, [r7, #28]
 800dfd6:	e01a      	b.n	800e00e <xscal_PLmmUlD2+0x56>
    x[k - 1] *= a;
 800dfd8:	69fb      	ldr	r3, [r7, #28]
 800dfda:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800dfde:	3b01      	subs	r3, #1
 800dfe0:	00db      	lsls	r3, r3, #3
 800dfe2:	693a      	ldr	r2, [r7, #16]
 800dfe4:	4413      	add	r3, r2
 800dfe6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800dfea:	69fb      	ldr	r3, [r7, #28]
 800dfec:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800dff0:	3b01      	subs	r3, #1
 800dff2:	00db      	lsls	r3, r3, #3
 800dff4:	693a      	ldr	r2, [r7, #16]
 800dff6:	18d4      	adds	r4, r2, r3
 800dff8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800dffc:	f7f2 faee 	bl	80005dc <__aeabi_dmul>
 800e000:	4602      	mov	r2, r0
 800e002:	460b      	mov	r3, r1
 800e004:	e9c4 2300 	strd	r2, r3, [r4]
  for (k = ix0; k <= b; k++) {
 800e008:	69fb      	ldr	r3, [r7, #28]
 800e00a:	3301      	adds	r3, #1
 800e00c:	61fb      	str	r3, [r7, #28]
 800e00e:	69fa      	ldr	r2, [r7, #28]
 800e010:	69bb      	ldr	r3, [r7, #24]
 800e012:	429a      	cmp	r2, r3
 800e014:	dde0      	ble.n	800dfd8 <xscal_PLmmUlD2+0x20>
  }
}
 800e016:	bf00      	nop
 800e018:	bf00      	nop
 800e01a:	3724      	adds	r7, #36	; 0x24
 800e01c:	46bd      	mov	sp, r7
 800e01e:	bd90      	pop	{r4, r7, pc}

0800e020 <xscal_eaAxXsvQ>:
#include "rtwtypes.h"
#include "xscal_eaAxXsvQ.h"

void xscal_eaAxXsvQ(real_T a, real_T x[9], int32_T ix0)
{
 800e020:	b590      	push	{r4, r7, lr}
 800e022:	b087      	sub	sp, #28
 800e024:	af00      	add	r7, sp, #0
 800e026:	ed87 0b02 	vstr	d0, [r7, #8]
 800e02a:	6078      	str	r0, [r7, #4]
 800e02c:	6039      	str	r1, [r7, #0]
  int32_T k;
  for (k = ix0; k <= ix0 + 2; k++) {
 800e02e:	683b      	ldr	r3, [r7, #0]
 800e030:	617b      	str	r3, [r7, #20]
 800e032:	e01a      	b.n	800e06a <xscal_eaAxXsvQ+0x4a>
    x[k - 1] *= a;
 800e034:	697b      	ldr	r3, [r7, #20]
 800e036:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800e03a:	3b01      	subs	r3, #1
 800e03c:	00db      	lsls	r3, r3, #3
 800e03e:	687a      	ldr	r2, [r7, #4]
 800e040:	4413      	add	r3, r2
 800e042:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e046:	697b      	ldr	r3, [r7, #20]
 800e048:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800e04c:	3b01      	subs	r3, #1
 800e04e:	00db      	lsls	r3, r3, #3
 800e050:	687a      	ldr	r2, [r7, #4]
 800e052:	18d4      	adds	r4, r2, r3
 800e054:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e058:	f7f2 fac0 	bl	80005dc <__aeabi_dmul>
 800e05c:	4602      	mov	r2, r0
 800e05e:	460b      	mov	r3, r1
 800e060:	e9c4 2300 	strd	r2, r3, [r4]
  for (k = ix0; k <= ix0 + 2; k++) {
 800e064:	697b      	ldr	r3, [r7, #20]
 800e066:	3301      	adds	r3, #1
 800e068:	617b      	str	r3, [r7, #20]
 800e06a:	683b      	ldr	r3, [r7, #0]
 800e06c:	3302      	adds	r3, #2
 800e06e:	697a      	ldr	r2, [r7, #20]
 800e070:	429a      	cmp	r2, r3
 800e072:	dddf      	ble.n	800e034 <xscal_eaAxXsvQ+0x14>
  }
}
 800e074:	bf00      	nop
 800e076:	bf00      	nop
 800e078:	371c      	adds	r7, #28
 800e07a:	46bd      	mov	sp, r7
 800e07c:	bd90      	pop	{r4, r7, pc}

0800e07e <xswap_JoAqPjUv>:
#include "rtwtypes.h"
#include "xswap_JoAqPjUv.h"

void xswap_JoAqPjUv(real_T x[9], int32_T ix0, int32_T iy0)
{
 800e07e:	b480      	push	{r7}
 800e080:	b087      	sub	sp, #28
 800e082:	af00      	add	r7, sp, #0
 800e084:	60f8      	str	r0, [r7, #12]
 800e086:	60b9      	str	r1, [r7, #8]
 800e088:	607a      	str	r2, [r7, #4]
  real_T temp;
  temp = x[ix0 - 1];
 800e08a:	68bb      	ldr	r3, [r7, #8]
 800e08c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800e090:	3b01      	subs	r3, #1
 800e092:	00db      	lsls	r3, r3, #3
 800e094:	68fa      	ldr	r2, [r7, #12]
 800e096:	4413      	add	r3, r2
 800e098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e09c:	e9c7 2304 	strd	r2, r3, [r7, #16]
  x[ix0 - 1] = x[iy0 - 1];
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800e0a6:	3b01      	subs	r3, #1
 800e0a8:	00db      	lsls	r3, r3, #3
 800e0aa:	68fa      	ldr	r2, [r7, #12]
 800e0ac:	441a      	add	r2, r3
 800e0ae:	68bb      	ldr	r3, [r7, #8]
 800e0b0:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800e0b4:	3b01      	subs	r3, #1
 800e0b6:	00db      	lsls	r3, r3, #3
 800e0b8:	68f9      	ldr	r1, [r7, #12]
 800e0ba:	4419      	add	r1, r3
 800e0bc:	e9d2 2300 	ldrd	r2, r3, [r2]
 800e0c0:	e9c1 2300 	strd	r2, r3, [r1]
  x[iy0 - 1] = temp;
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800e0ca:	3b01      	subs	r3, #1
 800e0cc:	00db      	lsls	r3, r3, #3
 800e0ce:	68fa      	ldr	r2, [r7, #12]
 800e0d0:	18d1      	adds	r1, r2, r3
 800e0d2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800e0d6:	e9c1 2300 	strd	r2, r3, [r1]
  temp = x[ix0];
 800e0da:	68bb      	ldr	r3, [r7, #8]
 800e0dc:	00db      	lsls	r3, r3, #3
 800e0de:	68fa      	ldr	r2, [r7, #12]
 800e0e0:	4413      	add	r3, r2
 800e0e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0e6:	e9c7 2304 	strd	r2, r3, [r7, #16]
  x[ix0] = x[iy0];
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	00db      	lsls	r3, r3, #3
 800e0ee:	68fa      	ldr	r2, [r7, #12]
 800e0f0:	4413      	add	r3, r2
 800e0f2:	68ba      	ldr	r2, [r7, #8]
 800e0f4:	00d2      	lsls	r2, r2, #3
 800e0f6:	68f9      	ldr	r1, [r7, #12]
 800e0f8:	4411      	add	r1, r2
 800e0fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0fe:	e9c1 2300 	strd	r2, r3, [r1]
  x[iy0] = temp;
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	00db      	lsls	r3, r3, #3
 800e106:	68fa      	ldr	r2, [r7, #12]
 800e108:	18d1      	adds	r1, r2, r3
 800e10a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800e10e:	e9c1 2300 	strd	r2, r3, [r1]
  temp = x[ix0 + 1];
 800e112:	68bb      	ldr	r3, [r7, #8]
 800e114:	3301      	adds	r3, #1
 800e116:	00db      	lsls	r3, r3, #3
 800e118:	68fa      	ldr	r2, [r7, #12]
 800e11a:	4413      	add	r3, r2
 800e11c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e120:	e9c7 2304 	strd	r2, r3, [r7, #16]
  x[ix0 + 1] = x[iy0 + 1];
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	3301      	adds	r3, #1
 800e128:	00db      	lsls	r3, r3, #3
 800e12a:	68fa      	ldr	r2, [r7, #12]
 800e12c:	4413      	add	r3, r2
 800e12e:	68ba      	ldr	r2, [r7, #8]
 800e130:	3201      	adds	r2, #1
 800e132:	00d2      	lsls	r2, r2, #3
 800e134:	68f9      	ldr	r1, [r7, #12]
 800e136:	4411      	add	r1, r2
 800e138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e13c:	e9c1 2300 	strd	r2, r3, [r1]
  x[iy0 + 1] = temp;
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	3301      	adds	r3, #1
 800e144:	00db      	lsls	r3, r3, #3
 800e146:	68fa      	ldr	r2, [r7, #12]
 800e148:	18d1      	adds	r1, r2, r3
 800e14a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800e14e:	e9c1 2300 	strd	r2, r3, [r1]
}
 800e152:	bf00      	nop
 800e154:	371c      	adds	r7, #28
 800e156:	46bd      	mov	sp, r7
 800e158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e15c:	4770      	bx	lr
	...

0800e160 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800e160:	f8df d034 	ldr.w	sp, [pc, #52]	; 800e198 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800e164:	480d      	ldr	r0, [pc, #52]	; (800e19c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800e166:	490e      	ldr	r1, [pc, #56]	; (800e1a0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800e168:	4a0e      	ldr	r2, [pc, #56]	; (800e1a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800e16a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800e16c:	e002      	b.n	800e174 <LoopCopyDataInit>

0800e16e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800e16e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800e170:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800e172:	3304      	adds	r3, #4

0800e174 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800e174:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800e176:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800e178:	d3f9      	bcc.n	800e16e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800e17a:	4a0b      	ldr	r2, [pc, #44]	; (800e1a8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800e17c:	4c0b      	ldr	r4, [pc, #44]	; (800e1ac <LoopFillZerobss+0x26>)
  movs r3, #0
 800e17e:	2300      	movs	r3, #0
  b LoopFillZerobss
 800e180:	e001      	b.n	800e186 <LoopFillZerobss>

0800e182 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800e182:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800e184:	3204      	adds	r2, #4

0800e186 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800e186:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800e188:	d3fb      	bcc.n	800e182 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800e18a:	f7f5 fb73 	bl	8003874 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800e18e:	f008 fcb1 	bl	8016af4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800e192:	f7f4 fb51 	bl	8002838 <main>
  bx  lr    
 800e196:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800e198:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800e19c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800e1a0:	20001354 	.word	0x20001354
  ldr r2, =_sidata
 800e1a4:	08017b70 	.word	0x08017b70
  ldr r2, =_sbss
 800e1a8:	20001358 	.word	0x20001358
  ldr r4, =_ebss
 800e1ac:	2001db54 	.word	0x2001db54

0800e1b0 <CAN1_SCE_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800e1b0:	e7fe      	b.n	800e1b0 <CAN1_SCE_IRQHandler>
	...

0800e1b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800e1b4:	b580      	push	{r7, lr}
 800e1b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800e1b8:	4b0e      	ldr	r3, [pc, #56]	; (800e1f4 <HAL_Init+0x40>)
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	4a0d      	ldr	r2, [pc, #52]	; (800e1f4 <HAL_Init+0x40>)
 800e1be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e1c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800e1c4:	4b0b      	ldr	r3, [pc, #44]	; (800e1f4 <HAL_Init+0x40>)
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	4a0a      	ldr	r2, [pc, #40]	; (800e1f4 <HAL_Init+0x40>)
 800e1ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800e1ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800e1d0:	4b08      	ldr	r3, [pc, #32]	; (800e1f4 <HAL_Init+0x40>)
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	4a07      	ldr	r2, [pc, #28]	; (800e1f4 <HAL_Init+0x40>)
 800e1d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e1da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800e1dc:	2003      	movs	r0, #3
 800e1de:	f001 f968 	bl	800f4b2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800e1e2:	200f      	movs	r0, #15
 800e1e4:	f7f5 fa86 	bl	80036f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800e1e8:	f7f5 fa58 	bl	800369c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800e1ec:	2300      	movs	r3, #0
}
 800e1ee:	4618      	mov	r0, r3
 800e1f0:	bd80      	pop	{r7, pc}
 800e1f2:	bf00      	nop
 800e1f4:	40023c00 	.word	0x40023c00

0800e1f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800e1f8:	b480      	push	{r7}
 800e1fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800e1fc:	4b06      	ldr	r3, [pc, #24]	; (800e218 <HAL_IncTick+0x20>)
 800e1fe:	781b      	ldrb	r3, [r3, #0]
 800e200:	461a      	mov	r2, r3
 800e202:	4b06      	ldr	r3, [pc, #24]	; (800e21c <HAL_IncTick+0x24>)
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	4413      	add	r3, r2
 800e208:	4a04      	ldr	r2, [pc, #16]	; (800e21c <HAL_IncTick+0x24>)
 800e20a:	6013      	str	r3, [r2, #0]
}
 800e20c:	bf00      	nop
 800e20e:	46bd      	mov	sp, r7
 800e210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e214:	4770      	bx	lr
 800e216:	bf00      	nop
 800e218:	200012e4 	.word	0x200012e4
 800e21c:	2001da5c 	.word	0x2001da5c

0800e220 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800e220:	b480      	push	{r7}
 800e222:	af00      	add	r7, sp, #0
  return uwTick;
 800e224:	4b03      	ldr	r3, [pc, #12]	; (800e234 <HAL_GetTick+0x14>)
 800e226:	681b      	ldr	r3, [r3, #0]
}
 800e228:	4618      	mov	r0, r3
 800e22a:	46bd      	mov	sp, r7
 800e22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e230:	4770      	bx	lr
 800e232:	bf00      	nop
 800e234:	2001da5c 	.word	0x2001da5c

0800e238 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800e238:	b580      	push	{r7, lr}
 800e23a:	b084      	sub	sp, #16
 800e23c:	af00      	add	r7, sp, #0
 800e23e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800e240:	2300      	movs	r3, #0
 800e242:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	2b00      	cmp	r3, #0
 800e248:	d101      	bne.n	800e24e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800e24a:	2301      	movs	r3, #1
 800e24c:	e033      	b.n	800e2b6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e252:	2b00      	cmp	r3, #0
 800e254:	d109      	bne.n	800e26a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800e256:	6878      	ldr	r0, [r7, #4]
 800e258:	f7f3 fe6c 	bl	8001f34 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	2200      	movs	r2, #0
 800e260:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	2200      	movs	r2, #0
 800e266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e26e:	f003 0310 	and.w	r3, r3, #16
 800e272:	2b00      	cmp	r3, #0
 800e274:	d118      	bne.n	800e2a8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e27a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800e27e:	f023 0302 	bic.w	r3, r3, #2
 800e282:	f043 0202 	orr.w	r2, r3, #2
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800e28a:	6878      	ldr	r0, [r7, #4]
 800e28c:	f000 fba8 	bl	800e9e0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	2200      	movs	r2, #0
 800e294:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e29a:	f023 0303 	bic.w	r3, r3, #3
 800e29e:	f043 0201 	orr.w	r2, r3, #1
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	641a      	str	r2, [r3, #64]	; 0x40
 800e2a6:	e001      	b.n	800e2ac <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800e2a8:	2301      	movs	r3, #1
 800e2aa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	2200      	movs	r2, #0
 800e2b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800e2b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e2b6:	4618      	mov	r0, r3
 800e2b8:	3710      	adds	r7, #16
 800e2ba:	46bd      	mov	sp, r7
 800e2bc:	bd80      	pop	{r7, pc}

0800e2be <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800e2be:	b580      	push	{r7, lr}
 800e2c0:	b084      	sub	sp, #16
 800e2c2:	af00      	add	r7, sp, #0
 800e2c4:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800e2c6:	2300      	movs	r3, #0
 800e2c8:	60fb      	str	r3, [r7, #12]
 800e2ca:	2300      	movs	r3, #0
 800e2cc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	f003 0302 	and.w	r3, r3, #2
 800e2d8:	2b02      	cmp	r3, #2
 800e2da:	bf0c      	ite	eq
 800e2dc:	2301      	moveq	r3, #1
 800e2de:	2300      	movne	r3, #0
 800e2e0:	b2db      	uxtb	r3, r3
 800e2e2:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	685b      	ldr	r3, [r3, #4]
 800e2ea:	f003 0320 	and.w	r3, r3, #32
 800e2ee:	2b20      	cmp	r3, #32
 800e2f0:	bf0c      	ite	eq
 800e2f2:	2301      	moveq	r3, #1
 800e2f4:	2300      	movne	r3, #0
 800e2f6:	b2db      	uxtb	r3, r3
 800e2f8:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d049      	beq.n	800e394 <HAL_ADC_IRQHandler+0xd6>
 800e300:	68bb      	ldr	r3, [r7, #8]
 800e302:	2b00      	cmp	r3, #0
 800e304:	d046      	beq.n	800e394 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e30a:	f003 0310 	and.w	r3, r3, #16
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d105      	bne.n	800e31e <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e316:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	689b      	ldr	r3, [r3, #8]
 800e324:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d12b      	bne.n	800e384 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800e330:	2b00      	cmp	r3, #0
 800e332:	d127      	bne.n	800e384 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e33a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d006      	beq.n	800e350 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	689b      	ldr	r3, [r3, #8]
 800e348:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d119      	bne.n	800e384 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	685a      	ldr	r2, [r3, #4]
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	f022 0220 	bic.w	r2, r2, #32
 800e35e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e364:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e370:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e374:	2b00      	cmp	r3, #0
 800e376:	d105      	bne.n	800e384 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e37c:	f043 0201 	orr.w	r2, r3, #1
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800e384:	6878      	ldr	r0, [r7, #4]
 800e386:	f7f4 f84f 	bl	8002428 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	f06f 0212 	mvn.w	r2, #18
 800e392:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	f003 0304 	and.w	r3, r3, #4
 800e39e:	2b04      	cmp	r3, #4
 800e3a0:	bf0c      	ite	eq
 800e3a2:	2301      	moveq	r3, #1
 800e3a4:	2300      	movne	r3, #0
 800e3a6:	b2db      	uxtb	r3, r3
 800e3a8:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	685b      	ldr	r3, [r3, #4]
 800e3b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e3b4:	2b80      	cmp	r3, #128	; 0x80
 800e3b6:	bf0c      	ite	eq
 800e3b8:	2301      	moveq	r3, #1
 800e3ba:	2300      	movne	r3, #0
 800e3bc:	b2db      	uxtb	r3, r3
 800e3be:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d057      	beq.n	800e476 <HAL_ADC_IRQHandler+0x1b8>
 800e3c6:	68bb      	ldr	r3, [r7, #8]
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d054      	beq.n	800e476 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e3d0:	f003 0310 	and.w	r3, r3, #16
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d105      	bne.n	800e3e4 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e3dc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	689b      	ldr	r3, [r3, #8]
 800e3ea:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d139      	bne.n	800e466 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3f8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d006      	beq.n	800e40e <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	689b      	ldr	r3, [r3, #8]
 800e406:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d12b      	bne.n	800e466 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	685b      	ldr	r3, [r3, #4]
 800e414:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d124      	bne.n	800e466 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	689b      	ldr	r3, [r3, #8]
 800e422:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800e426:	2b00      	cmp	r3, #0
 800e428:	d11d      	bne.n	800e466 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d119      	bne.n	800e466 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	685a      	ldr	r2, [r3, #4]
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e440:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e446:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e456:	2b00      	cmp	r3, #0
 800e458:	d105      	bne.n	800e466 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e45e:	f043 0201 	orr.w	r2, r3, #1
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800e466:	6878      	ldr	r0, [r7, #4]
 800e468:	f000 fc38 	bl	800ecdc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	f06f 020c 	mvn.w	r2, #12
 800e474:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	f003 0301 	and.w	r3, r3, #1
 800e480:	2b01      	cmp	r3, #1
 800e482:	bf0c      	ite	eq
 800e484:	2301      	moveq	r3, #1
 800e486:	2300      	movne	r3, #0
 800e488:	b2db      	uxtb	r3, r3
 800e48a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	685b      	ldr	r3, [r3, #4]
 800e492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e496:	2b40      	cmp	r3, #64	; 0x40
 800e498:	bf0c      	ite	eq
 800e49a:	2301      	moveq	r3, #1
 800e49c:	2300      	movne	r3, #0
 800e49e:	b2db      	uxtb	r3, r3
 800e4a0:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d017      	beq.n	800e4d8 <HAL_ADC_IRQHandler+0x21a>
 800e4a8:	68bb      	ldr	r3, [r7, #8]
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d014      	beq.n	800e4d8 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	f003 0301 	and.w	r3, r3, #1
 800e4b8:	2b01      	cmp	r3, #1
 800e4ba:	d10d      	bne.n	800e4d8 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e4c0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800e4c8:	6878      	ldr	r0, [r7, #4]
 800e4ca:	f000 f953 	bl	800e774 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	f06f 0201 	mvn.w	r2, #1
 800e4d6:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	f003 0320 	and.w	r3, r3, #32
 800e4e2:	2b20      	cmp	r3, #32
 800e4e4:	bf0c      	ite	eq
 800e4e6:	2301      	moveq	r3, #1
 800e4e8:	2300      	movne	r3, #0
 800e4ea:	b2db      	uxtb	r3, r3
 800e4ec:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	685b      	ldr	r3, [r3, #4]
 800e4f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e4f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e4fc:	bf0c      	ite	eq
 800e4fe:	2301      	moveq	r3, #1
 800e500:	2300      	movne	r3, #0
 800e502:	b2db      	uxtb	r3, r3
 800e504:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d015      	beq.n	800e538 <HAL_ADC_IRQHandler+0x27a>
 800e50c:	68bb      	ldr	r3, [r7, #8]
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d012      	beq.n	800e538 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e516:	f043 0202 	orr.w	r2, r3, #2
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	f06f 0220 	mvn.w	r2, #32
 800e526:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800e528:	6878      	ldr	r0, [r7, #4]
 800e52a:	f000 f92d 	bl	800e788 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	f06f 0220 	mvn.w	r2, #32
 800e536:	601a      	str	r2, [r3, #0]
  }
}
 800e538:	bf00      	nop
 800e53a:	3710      	adds	r7, #16
 800e53c:	46bd      	mov	sp, r7
 800e53e:	bd80      	pop	{r7, pc}

0800e540 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800e540:	b580      	push	{r7, lr}
 800e542:	b086      	sub	sp, #24
 800e544:	af00      	add	r7, sp, #0
 800e546:	60f8      	str	r0, [r7, #12]
 800e548:	60b9      	str	r1, [r7, #8]
 800e54a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800e54c:	2300      	movs	r3, #0
 800e54e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e556:	2b01      	cmp	r3, #1
 800e558:	d101      	bne.n	800e55e <HAL_ADC_Start_DMA+0x1e>
 800e55a:	2302      	movs	r3, #2
 800e55c:	e0e9      	b.n	800e732 <HAL_ADC_Start_DMA+0x1f2>
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	2201      	movs	r2, #1
 800e562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	689b      	ldr	r3, [r3, #8]
 800e56c:	f003 0301 	and.w	r3, r3, #1
 800e570:	2b01      	cmp	r3, #1
 800e572:	d018      	beq.n	800e5a6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	689a      	ldr	r2, [r3, #8]
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	f042 0201 	orr.w	r2, r2, #1
 800e582:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800e584:	4b6d      	ldr	r3, [pc, #436]	; (800e73c <HAL_ADC_Start_DMA+0x1fc>)
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	4a6d      	ldr	r2, [pc, #436]	; (800e740 <HAL_ADC_Start_DMA+0x200>)
 800e58a:	fba2 2303 	umull	r2, r3, r2, r3
 800e58e:	0c9a      	lsrs	r2, r3, #18
 800e590:	4613      	mov	r3, r2
 800e592:	005b      	lsls	r3, r3, #1
 800e594:	4413      	add	r3, r2
 800e596:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800e598:	e002      	b.n	800e5a0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800e59a:	693b      	ldr	r3, [r7, #16]
 800e59c:	3b01      	subs	r3, #1
 800e59e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800e5a0:	693b      	ldr	r3, [r7, #16]
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d1f9      	bne.n	800e59a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	689b      	ldr	r3, [r3, #8]
 800e5ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e5b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e5b4:	d107      	bne.n	800e5c6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	689a      	ldr	r2, [r3, #8]
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e5c4:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	689b      	ldr	r3, [r3, #8]
 800e5cc:	f003 0301 	and.w	r3, r3, #1
 800e5d0:	2b01      	cmp	r3, #1
 800e5d2:	f040 80a1 	bne.w	800e718 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e5da:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800e5de:	f023 0301 	bic.w	r3, r3, #1
 800e5e2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	685b      	ldr	r3, [r3, #4]
 800e5f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d007      	beq.n	800e608 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e5fc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800e600:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e60c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e610:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e614:	d106      	bne.n	800e624 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e61a:	f023 0206 	bic.w	r2, r3, #6
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	645a      	str	r2, [r3, #68]	; 0x44
 800e622:	e002      	b.n	800e62a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	2200      	movs	r2, #0
 800e628:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	2200      	movs	r2, #0
 800e62e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800e632:	4b44      	ldr	r3, [pc, #272]	; (800e744 <HAL_ADC_Start_DMA+0x204>)
 800e634:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e63a:	4a43      	ldr	r2, [pc, #268]	; (800e748 <HAL_ADC_Start_DMA+0x208>)
 800e63c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e642:	4a42      	ldr	r2, [pc, #264]	; (800e74c <HAL_ADC_Start_DMA+0x20c>)
 800e644:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e64a:	4a41      	ldr	r2, [pc, #260]	; (800e750 <HAL_ADC_Start_DMA+0x210>)
 800e64c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800e656:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	685a      	ldr	r2, [r3, #4]
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800e666:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	689a      	ldr	r2, [r3, #8]
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e676:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	334c      	adds	r3, #76	; 0x4c
 800e682:	4619      	mov	r1, r3
 800e684:	68ba      	ldr	r2, [r7, #8]
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	f000 fff6 	bl	800f678 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800e68c:	697b      	ldr	r3, [r7, #20]
 800e68e:	685b      	ldr	r3, [r3, #4]
 800e690:	f003 031f 	and.w	r3, r3, #31
 800e694:	2b00      	cmp	r3, #0
 800e696:	d12a      	bne.n	800e6ee <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	4a2d      	ldr	r2, [pc, #180]	; (800e754 <HAL_ADC_Start_DMA+0x214>)
 800e69e:	4293      	cmp	r3, r2
 800e6a0:	d015      	beq.n	800e6ce <HAL_ADC_Start_DMA+0x18e>
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	4a2c      	ldr	r2, [pc, #176]	; (800e758 <HAL_ADC_Start_DMA+0x218>)
 800e6a8:	4293      	cmp	r3, r2
 800e6aa:	d105      	bne.n	800e6b8 <HAL_ADC_Start_DMA+0x178>
 800e6ac:	4b25      	ldr	r3, [pc, #148]	; (800e744 <HAL_ADC_Start_DMA+0x204>)
 800e6ae:	685b      	ldr	r3, [r3, #4]
 800e6b0:	f003 031f 	and.w	r3, r3, #31
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d00a      	beq.n	800e6ce <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	4a27      	ldr	r2, [pc, #156]	; (800e75c <HAL_ADC_Start_DMA+0x21c>)
 800e6be:	4293      	cmp	r3, r2
 800e6c0:	d136      	bne.n	800e730 <HAL_ADC_Start_DMA+0x1f0>
 800e6c2:	4b20      	ldr	r3, [pc, #128]	; (800e744 <HAL_ADC_Start_DMA+0x204>)
 800e6c4:	685b      	ldr	r3, [r3, #4]
 800e6c6:	f003 0310 	and.w	r3, r3, #16
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d130      	bne.n	800e730 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	689b      	ldr	r3, [r3, #8]
 800e6d4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d129      	bne.n	800e730 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	689a      	ldr	r2, [r3, #8]
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	681b      	ldr	r3, [r3, #0]
 800e6e6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800e6ea:	609a      	str	r2, [r3, #8]
 800e6ec:	e020      	b.n	800e730 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	4a18      	ldr	r2, [pc, #96]	; (800e754 <HAL_ADC_Start_DMA+0x214>)
 800e6f4:	4293      	cmp	r3, r2
 800e6f6:	d11b      	bne.n	800e730 <HAL_ADC_Start_DMA+0x1f0>
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	689b      	ldr	r3, [r3, #8]
 800e6fe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800e702:	2b00      	cmp	r3, #0
 800e704:	d114      	bne.n	800e730 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	689a      	ldr	r2, [r3, #8]
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800e714:	609a      	str	r2, [r3, #8]
 800e716:	e00b      	b.n	800e730 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e71c:	f043 0210 	orr.w	r2, r3, #16
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e728:	f043 0201 	orr.w	r2, r3, #1
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800e730:	2300      	movs	r3, #0
}
 800e732:	4618      	mov	r0, r3
 800e734:	3718      	adds	r7, #24
 800e736:	46bd      	mov	sp, r7
 800e738:	bd80      	pop	{r7, pc}
 800e73a:	bf00      	nop
 800e73c:	20000004 	.word	0x20000004
 800e740:	431bde83 	.word	0x431bde83
 800e744:	40012300 	.word	0x40012300
 800e748:	0800ebd9 	.word	0x0800ebd9
 800e74c:	0800ec93 	.word	0x0800ec93
 800e750:	0800ecaf 	.word	0x0800ecaf
 800e754:	40012000 	.word	0x40012000
 800e758:	40012100 	.word	0x40012100
 800e75c:	40012200 	.word	0x40012200

0800e760 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800e760:	b480      	push	{r7}
 800e762:	b083      	sub	sp, #12
 800e764:	af00      	add	r7, sp, #0
 800e766:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800e768:	bf00      	nop
 800e76a:	370c      	adds	r7, #12
 800e76c:	46bd      	mov	sp, r7
 800e76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e772:	4770      	bx	lr

0800e774 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800e774:	b480      	push	{r7}
 800e776:	b083      	sub	sp, #12
 800e778:	af00      	add	r7, sp, #0
 800e77a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800e77c:	bf00      	nop
 800e77e:	370c      	adds	r7, #12
 800e780:	46bd      	mov	sp, r7
 800e782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e786:	4770      	bx	lr

0800e788 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800e788:	b480      	push	{r7}
 800e78a:	b083      	sub	sp, #12
 800e78c:	af00      	add	r7, sp, #0
 800e78e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800e790:	bf00      	nop
 800e792:	370c      	adds	r7, #12
 800e794:	46bd      	mov	sp, r7
 800e796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e79a:	4770      	bx	lr

0800e79c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800e79c:	b480      	push	{r7}
 800e79e:	b085      	sub	sp, #20
 800e7a0:	af00      	add	r7, sp, #0
 800e7a2:	6078      	str	r0, [r7, #4]
 800e7a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800e7a6:	2300      	movs	r3, #0
 800e7a8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e7b0:	2b01      	cmp	r3, #1
 800e7b2:	d101      	bne.n	800e7b8 <HAL_ADC_ConfigChannel+0x1c>
 800e7b4:	2302      	movs	r3, #2
 800e7b6:	e105      	b.n	800e9c4 <HAL_ADC_ConfigChannel+0x228>
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	2201      	movs	r2, #1
 800e7bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800e7c0:	683b      	ldr	r3, [r7, #0]
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	2b09      	cmp	r3, #9
 800e7c6:	d925      	bls.n	800e814 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	68d9      	ldr	r1, [r3, #12]
 800e7ce:	683b      	ldr	r3, [r7, #0]
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	b29b      	uxth	r3, r3
 800e7d4:	461a      	mov	r2, r3
 800e7d6:	4613      	mov	r3, r2
 800e7d8:	005b      	lsls	r3, r3, #1
 800e7da:	4413      	add	r3, r2
 800e7dc:	3b1e      	subs	r3, #30
 800e7de:	2207      	movs	r2, #7
 800e7e0:	fa02 f303 	lsl.w	r3, r2, r3
 800e7e4:	43da      	mvns	r2, r3
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	400a      	ands	r2, r1
 800e7ec:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	68d9      	ldr	r1, [r3, #12]
 800e7f4:	683b      	ldr	r3, [r7, #0]
 800e7f6:	689a      	ldr	r2, [r3, #8]
 800e7f8:	683b      	ldr	r3, [r7, #0]
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	b29b      	uxth	r3, r3
 800e7fe:	4618      	mov	r0, r3
 800e800:	4603      	mov	r3, r0
 800e802:	005b      	lsls	r3, r3, #1
 800e804:	4403      	add	r3, r0
 800e806:	3b1e      	subs	r3, #30
 800e808:	409a      	lsls	r2, r3
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	430a      	orrs	r2, r1
 800e810:	60da      	str	r2, [r3, #12]
 800e812:	e022      	b.n	800e85a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	6919      	ldr	r1, [r3, #16]
 800e81a:	683b      	ldr	r3, [r7, #0]
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	b29b      	uxth	r3, r3
 800e820:	461a      	mov	r2, r3
 800e822:	4613      	mov	r3, r2
 800e824:	005b      	lsls	r3, r3, #1
 800e826:	4413      	add	r3, r2
 800e828:	2207      	movs	r2, #7
 800e82a:	fa02 f303 	lsl.w	r3, r2, r3
 800e82e:	43da      	mvns	r2, r3
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	400a      	ands	r2, r1
 800e836:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	6919      	ldr	r1, [r3, #16]
 800e83e:	683b      	ldr	r3, [r7, #0]
 800e840:	689a      	ldr	r2, [r3, #8]
 800e842:	683b      	ldr	r3, [r7, #0]
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	b29b      	uxth	r3, r3
 800e848:	4618      	mov	r0, r3
 800e84a:	4603      	mov	r3, r0
 800e84c:	005b      	lsls	r3, r3, #1
 800e84e:	4403      	add	r3, r0
 800e850:	409a      	lsls	r2, r3
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	430a      	orrs	r2, r1
 800e858:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800e85a:	683b      	ldr	r3, [r7, #0]
 800e85c:	685b      	ldr	r3, [r3, #4]
 800e85e:	2b06      	cmp	r3, #6
 800e860:	d824      	bhi.n	800e8ac <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800e868:	683b      	ldr	r3, [r7, #0]
 800e86a:	685a      	ldr	r2, [r3, #4]
 800e86c:	4613      	mov	r3, r2
 800e86e:	009b      	lsls	r3, r3, #2
 800e870:	4413      	add	r3, r2
 800e872:	3b05      	subs	r3, #5
 800e874:	221f      	movs	r2, #31
 800e876:	fa02 f303 	lsl.w	r3, r2, r3
 800e87a:	43da      	mvns	r2, r3
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	400a      	ands	r2, r1
 800e882:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800e88a:	683b      	ldr	r3, [r7, #0]
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	b29b      	uxth	r3, r3
 800e890:	4618      	mov	r0, r3
 800e892:	683b      	ldr	r3, [r7, #0]
 800e894:	685a      	ldr	r2, [r3, #4]
 800e896:	4613      	mov	r3, r2
 800e898:	009b      	lsls	r3, r3, #2
 800e89a:	4413      	add	r3, r2
 800e89c:	3b05      	subs	r3, #5
 800e89e:	fa00 f203 	lsl.w	r2, r0, r3
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	430a      	orrs	r2, r1
 800e8a8:	635a      	str	r2, [r3, #52]	; 0x34
 800e8aa:	e04c      	b.n	800e946 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800e8ac:	683b      	ldr	r3, [r7, #0]
 800e8ae:	685b      	ldr	r3, [r3, #4]
 800e8b0:	2b0c      	cmp	r3, #12
 800e8b2:	d824      	bhi.n	800e8fe <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800e8ba:	683b      	ldr	r3, [r7, #0]
 800e8bc:	685a      	ldr	r2, [r3, #4]
 800e8be:	4613      	mov	r3, r2
 800e8c0:	009b      	lsls	r3, r3, #2
 800e8c2:	4413      	add	r3, r2
 800e8c4:	3b23      	subs	r3, #35	; 0x23
 800e8c6:	221f      	movs	r2, #31
 800e8c8:	fa02 f303 	lsl.w	r3, r2, r3
 800e8cc:	43da      	mvns	r2, r3
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	400a      	ands	r2, r1
 800e8d4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800e8dc:	683b      	ldr	r3, [r7, #0]
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	b29b      	uxth	r3, r3
 800e8e2:	4618      	mov	r0, r3
 800e8e4:	683b      	ldr	r3, [r7, #0]
 800e8e6:	685a      	ldr	r2, [r3, #4]
 800e8e8:	4613      	mov	r3, r2
 800e8ea:	009b      	lsls	r3, r3, #2
 800e8ec:	4413      	add	r3, r2
 800e8ee:	3b23      	subs	r3, #35	; 0x23
 800e8f0:	fa00 f203 	lsl.w	r2, r0, r3
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	430a      	orrs	r2, r1
 800e8fa:	631a      	str	r2, [r3, #48]	; 0x30
 800e8fc:	e023      	b.n	800e946 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800e904:	683b      	ldr	r3, [r7, #0]
 800e906:	685a      	ldr	r2, [r3, #4]
 800e908:	4613      	mov	r3, r2
 800e90a:	009b      	lsls	r3, r3, #2
 800e90c:	4413      	add	r3, r2
 800e90e:	3b41      	subs	r3, #65	; 0x41
 800e910:	221f      	movs	r2, #31
 800e912:	fa02 f303 	lsl.w	r3, r2, r3
 800e916:	43da      	mvns	r2, r3
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	400a      	ands	r2, r1
 800e91e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800e926:	683b      	ldr	r3, [r7, #0]
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	b29b      	uxth	r3, r3
 800e92c:	4618      	mov	r0, r3
 800e92e:	683b      	ldr	r3, [r7, #0]
 800e930:	685a      	ldr	r2, [r3, #4]
 800e932:	4613      	mov	r3, r2
 800e934:	009b      	lsls	r3, r3, #2
 800e936:	4413      	add	r3, r2
 800e938:	3b41      	subs	r3, #65	; 0x41
 800e93a:	fa00 f203 	lsl.w	r2, r0, r3
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	430a      	orrs	r2, r1
 800e944:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800e946:	4b22      	ldr	r3, [pc, #136]	; (800e9d0 <HAL_ADC_ConfigChannel+0x234>)
 800e948:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	4a21      	ldr	r2, [pc, #132]	; (800e9d4 <HAL_ADC_ConfigChannel+0x238>)
 800e950:	4293      	cmp	r3, r2
 800e952:	d109      	bne.n	800e968 <HAL_ADC_ConfigChannel+0x1cc>
 800e954:	683b      	ldr	r3, [r7, #0]
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	2b12      	cmp	r3, #18
 800e95a:	d105      	bne.n	800e968 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	685b      	ldr	r3, [r3, #4]
 800e960:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	4a19      	ldr	r2, [pc, #100]	; (800e9d4 <HAL_ADC_ConfigChannel+0x238>)
 800e96e:	4293      	cmp	r3, r2
 800e970:	d123      	bne.n	800e9ba <HAL_ADC_ConfigChannel+0x21e>
 800e972:	683b      	ldr	r3, [r7, #0]
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	2b10      	cmp	r3, #16
 800e978:	d003      	beq.n	800e982 <HAL_ADC_ConfigChannel+0x1e6>
 800e97a:	683b      	ldr	r3, [r7, #0]
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	2b11      	cmp	r3, #17
 800e980:	d11b      	bne.n	800e9ba <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	685b      	ldr	r3, [r3, #4]
 800e986:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800e98e:	683b      	ldr	r3, [r7, #0]
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	2b10      	cmp	r3, #16
 800e994:	d111      	bne.n	800e9ba <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800e996:	4b10      	ldr	r3, [pc, #64]	; (800e9d8 <HAL_ADC_ConfigChannel+0x23c>)
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	4a10      	ldr	r2, [pc, #64]	; (800e9dc <HAL_ADC_ConfigChannel+0x240>)
 800e99c:	fba2 2303 	umull	r2, r3, r2, r3
 800e9a0:	0c9a      	lsrs	r2, r3, #18
 800e9a2:	4613      	mov	r3, r2
 800e9a4:	009b      	lsls	r3, r3, #2
 800e9a6:	4413      	add	r3, r2
 800e9a8:	005b      	lsls	r3, r3, #1
 800e9aa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800e9ac:	e002      	b.n	800e9b4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800e9ae:	68bb      	ldr	r3, [r7, #8]
 800e9b0:	3b01      	subs	r3, #1
 800e9b2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800e9b4:	68bb      	ldr	r3, [r7, #8]
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d1f9      	bne.n	800e9ae <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	2200      	movs	r2, #0
 800e9be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800e9c2:	2300      	movs	r3, #0
}
 800e9c4:	4618      	mov	r0, r3
 800e9c6:	3714      	adds	r7, #20
 800e9c8:	46bd      	mov	sp, r7
 800e9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ce:	4770      	bx	lr
 800e9d0:	40012300 	.word	0x40012300
 800e9d4:	40012000 	.word	0x40012000
 800e9d8:	20000004 	.word	0x20000004
 800e9dc:	431bde83 	.word	0x431bde83

0800e9e0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800e9e0:	b480      	push	{r7}
 800e9e2:	b085      	sub	sp, #20
 800e9e4:	af00      	add	r7, sp, #0
 800e9e6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800e9e8:	4b79      	ldr	r3, [pc, #484]	; (800ebd0 <ADC_Init+0x1f0>)
 800e9ea:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	685b      	ldr	r3, [r3, #4]
 800e9f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	685a      	ldr	r2, [r3, #4]
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	685b      	ldr	r3, [r3, #4]
 800ea00:	431a      	orrs	r2, r3
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	685a      	ldr	r2, [r3, #4]
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ea14:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	6859      	ldr	r1, [r3, #4]
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	691b      	ldr	r3, [r3, #16]
 800ea20:	021a      	lsls	r2, r3, #8
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	430a      	orrs	r2, r1
 800ea28:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	685a      	ldr	r2, [r3, #4]
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800ea38:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	6859      	ldr	r1, [r3, #4]
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	689a      	ldr	r2, [r3, #8]
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	430a      	orrs	r2, r1
 800ea4a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	689a      	ldr	r2, [r3, #8]
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ea5a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	6899      	ldr	r1, [r3, #8]
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	68da      	ldr	r2, [r3, #12]
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	430a      	orrs	r2, r1
 800ea6c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea72:	4a58      	ldr	r2, [pc, #352]	; (800ebd4 <ADC_Init+0x1f4>)
 800ea74:	4293      	cmp	r3, r2
 800ea76:	d022      	beq.n	800eabe <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	689a      	ldr	r2, [r3, #8]
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800ea86:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	6899      	ldr	r1, [r3, #8]
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	430a      	orrs	r2, r1
 800ea98:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	689a      	ldr	r2, [r3, #8]
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800eaa8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	6899      	ldr	r1, [r3, #8]
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	430a      	orrs	r2, r1
 800eaba:	609a      	str	r2, [r3, #8]
 800eabc:	e00f      	b.n	800eade <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	689a      	ldr	r2, [r3, #8]
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800eacc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	689a      	ldr	r2, [r3, #8]
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800eadc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	689a      	ldr	r2, [r3, #8]
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	f022 0202 	bic.w	r2, r2, #2
 800eaec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	6899      	ldr	r1, [r3, #8]
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	7e1b      	ldrb	r3, [r3, #24]
 800eaf8:	005a      	lsls	r2, r3, #1
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	430a      	orrs	r2, r1
 800eb00:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	f893 3020 	ldrb.w	r3, [r3, #32]
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d01b      	beq.n	800eb44 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	685a      	ldr	r2, [r3, #4]
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	681b      	ldr	r3, [r3, #0]
 800eb16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800eb1a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	685a      	ldr	r2, [r3, #4]
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800eb2a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	681b      	ldr	r3, [r3, #0]
 800eb30:	6859      	ldr	r1, [r3, #4]
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb36:	3b01      	subs	r3, #1
 800eb38:	035a      	lsls	r2, r3, #13
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	430a      	orrs	r2, r1
 800eb40:	605a      	str	r2, [r3, #4]
 800eb42:	e007      	b.n	800eb54 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	685a      	ldr	r2, [r3, #4]
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800eb52:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800eb62:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	69db      	ldr	r3, [r3, #28]
 800eb6e:	3b01      	subs	r3, #1
 800eb70:	051a      	lsls	r2, r3, #20
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	430a      	orrs	r2, r1
 800eb78:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	689a      	ldr	r2, [r3, #8]
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800eb88:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	6899      	ldr	r1, [r3, #8]
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800eb96:	025a      	lsls	r2, r3, #9
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	430a      	orrs	r2, r1
 800eb9e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	689a      	ldr	r2, [r3, #8]
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ebae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	6899      	ldr	r1, [r3, #8]
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	695b      	ldr	r3, [r3, #20]
 800ebba:	029a      	lsls	r2, r3, #10
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	430a      	orrs	r2, r1
 800ebc2:	609a      	str	r2, [r3, #8]
}
 800ebc4:	bf00      	nop
 800ebc6:	3714      	adds	r7, #20
 800ebc8:	46bd      	mov	sp, r7
 800ebca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebce:	4770      	bx	lr
 800ebd0:	40012300 	.word	0x40012300
 800ebd4:	0f000001 	.word	0x0f000001

0800ebd8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800ebd8:	b580      	push	{r7, lr}
 800ebda:	b084      	sub	sp, #16
 800ebdc:	af00      	add	r7, sp, #0
 800ebde:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebe4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ebea:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d13c      	bne.n	800ec6c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800ebf2:	68fb      	ldr	r3, [r7, #12]
 800ebf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ebf6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	689b      	ldr	r3, [r3, #8]
 800ec04:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d12b      	bne.n	800ec64 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d127      	bne.n	800ec64 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec1a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d006      	beq.n	800ec30 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	689b      	ldr	r3, [r3, #8]
 800ec28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d119      	bne.n	800ec64 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	681b      	ldr	r3, [r3, #0]
 800ec34:	685a      	ldr	r2, [r3, #4]
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	f022 0220 	bic.w	r2, r2, #32
 800ec3e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec44:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d105      	bne.n	800ec64 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec5c:	f043 0201 	orr.w	r2, r3, #1
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800ec64:	68f8      	ldr	r0, [r7, #12]
 800ec66:	f7f3 fbdf 	bl	8002428 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800ec6a:	e00e      	b.n	800ec8a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec70:	f003 0310 	and.w	r3, r3, #16
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d003      	beq.n	800ec80 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800ec78:	68f8      	ldr	r0, [r7, #12]
 800ec7a:	f7ff fd85 	bl	800e788 <HAL_ADC_ErrorCallback>
}
 800ec7e:	e004      	b.n	800ec8a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ec86:	6878      	ldr	r0, [r7, #4]
 800ec88:	4798      	blx	r3
}
 800ec8a:	bf00      	nop
 800ec8c:	3710      	adds	r7, #16
 800ec8e:	46bd      	mov	sp, r7
 800ec90:	bd80      	pop	{r7, pc}

0800ec92 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800ec92:	b580      	push	{r7, lr}
 800ec94:	b084      	sub	sp, #16
 800ec96:	af00      	add	r7, sp, #0
 800ec98:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec9e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800eca0:	68f8      	ldr	r0, [r7, #12]
 800eca2:	f7ff fd5d 	bl	800e760 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800eca6:	bf00      	nop
 800eca8:	3710      	adds	r7, #16
 800ecaa:	46bd      	mov	sp, r7
 800ecac:	bd80      	pop	{r7, pc}

0800ecae <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800ecae:	b580      	push	{r7, lr}
 800ecb0:	b084      	sub	sp, #16
 800ecb2:	af00      	add	r7, sp, #0
 800ecb4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ecba:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	2240      	movs	r2, #64	; 0x40
 800ecc0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ecc6:	f043 0204 	orr.w	r2, r3, #4
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800ecce:	68f8      	ldr	r0, [r7, #12]
 800ecd0:	f7ff fd5a 	bl	800e788 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800ecd4:	bf00      	nop
 800ecd6:	3710      	adds	r7, #16
 800ecd8:	46bd      	mov	sp, r7
 800ecda:	bd80      	pop	{r7, pc}

0800ecdc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800ecdc:	b480      	push	{r7}
 800ecde:	b083      	sub	sp, #12
 800ece0:	af00      	add	r7, sp, #0
 800ece2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800ece4:	bf00      	nop
 800ece6:	370c      	adds	r7, #12
 800ece8:	46bd      	mov	sp, r7
 800ecea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecee:	4770      	bx	lr

0800ecf0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800ecf0:	b580      	push	{r7, lr}
 800ecf2:	b084      	sub	sp, #16
 800ecf4:	af00      	add	r7, sp, #0
 800ecf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d101      	bne.n	800ed02 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800ecfe:	2301      	movs	r3, #1
 800ed00:	e0ed      	b.n	800eede <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ed08:	b2db      	uxtb	r3, r3
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d102      	bne.n	800ed14 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800ed0e:	6878      	ldr	r0, [r7, #4]
 800ed10:	f7f3 fc06 	bl	8002520 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	681a      	ldr	r2, [r3, #0]
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	f042 0201 	orr.w	r2, r2, #1
 800ed22:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800ed24:	f7ff fa7c 	bl	800e220 <HAL_GetTick>
 800ed28:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800ed2a:	e012      	b.n	800ed52 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800ed2c:	f7ff fa78 	bl	800e220 <HAL_GetTick>
 800ed30:	4602      	mov	r2, r0
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	1ad3      	subs	r3, r2, r3
 800ed36:	2b0a      	cmp	r3, #10
 800ed38:	d90b      	bls.n	800ed52 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed3e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	2205      	movs	r2, #5
 800ed4a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800ed4e:	2301      	movs	r3, #1
 800ed50:	e0c5      	b.n	800eede <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	681b      	ldr	r3, [r3, #0]
 800ed56:	685b      	ldr	r3, [r3, #4]
 800ed58:	f003 0301 	and.w	r3, r3, #1
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d0e5      	beq.n	800ed2c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	681a      	ldr	r2, [r3, #0]
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	f022 0202 	bic.w	r2, r2, #2
 800ed6e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800ed70:	f7ff fa56 	bl	800e220 <HAL_GetTick>
 800ed74:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800ed76:	e012      	b.n	800ed9e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800ed78:	f7ff fa52 	bl	800e220 <HAL_GetTick>
 800ed7c:	4602      	mov	r2, r0
 800ed7e:	68fb      	ldr	r3, [r7, #12]
 800ed80:	1ad3      	subs	r3, r2, r3
 800ed82:	2b0a      	cmp	r3, #10
 800ed84:	d90b      	bls.n	800ed9e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed8a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	2205      	movs	r2, #5
 800ed96:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800ed9a:	2301      	movs	r3, #1
 800ed9c:	e09f      	b.n	800eede <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	685b      	ldr	r3, [r3, #4]
 800eda4:	f003 0302 	and.w	r3, r3, #2
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d1e5      	bne.n	800ed78 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	7e1b      	ldrb	r3, [r3, #24]
 800edb0:	2b01      	cmp	r3, #1
 800edb2:	d108      	bne.n	800edc6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	681a      	ldr	r2, [r3, #0]
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800edc2:	601a      	str	r2, [r3, #0]
 800edc4:	e007      	b.n	800edd6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	681b      	ldr	r3, [r3, #0]
 800edca:	681a      	ldr	r2, [r3, #0]
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800edd4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	7e5b      	ldrb	r3, [r3, #25]
 800edda:	2b01      	cmp	r3, #1
 800eddc:	d108      	bne.n	800edf0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	681a      	ldr	r2, [r3, #0]
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800edec:	601a      	str	r2, [r3, #0]
 800edee:	e007      	b.n	800ee00 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	681a      	ldr	r2, [r3, #0]
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800edfe:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	7e9b      	ldrb	r3, [r3, #26]
 800ee04:	2b01      	cmp	r3, #1
 800ee06:	d108      	bne.n	800ee1a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	681a      	ldr	r2, [r3, #0]
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	f042 0220 	orr.w	r2, r2, #32
 800ee16:	601a      	str	r2, [r3, #0]
 800ee18:	e007      	b.n	800ee2a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	681b      	ldr	r3, [r3, #0]
 800ee1e:	681a      	ldr	r2, [r3, #0]
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	681b      	ldr	r3, [r3, #0]
 800ee24:	f022 0220 	bic.w	r2, r2, #32
 800ee28:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	7edb      	ldrb	r3, [r3, #27]
 800ee2e:	2b01      	cmp	r3, #1
 800ee30:	d108      	bne.n	800ee44 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	681a      	ldr	r2, [r3, #0]
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	f022 0210 	bic.w	r2, r2, #16
 800ee40:	601a      	str	r2, [r3, #0]
 800ee42:	e007      	b.n	800ee54 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	681a      	ldr	r2, [r3, #0]
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	f042 0210 	orr.w	r2, r2, #16
 800ee52:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	7f1b      	ldrb	r3, [r3, #28]
 800ee58:	2b01      	cmp	r3, #1
 800ee5a:	d108      	bne.n	800ee6e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	681a      	ldr	r2, [r3, #0]
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	681b      	ldr	r3, [r3, #0]
 800ee66:	f042 0208 	orr.w	r2, r2, #8
 800ee6a:	601a      	str	r2, [r3, #0]
 800ee6c:	e007      	b.n	800ee7e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	681a      	ldr	r2, [r3, #0]
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	f022 0208 	bic.w	r2, r2, #8
 800ee7c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	7f5b      	ldrb	r3, [r3, #29]
 800ee82:	2b01      	cmp	r3, #1
 800ee84:	d108      	bne.n	800ee98 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	681a      	ldr	r2, [r3, #0]
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	f042 0204 	orr.w	r2, r2, #4
 800ee94:	601a      	str	r2, [r3, #0]
 800ee96:	e007      	b.n	800eea8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	681a      	ldr	r2, [r3, #0]
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	f022 0204 	bic.w	r2, r2, #4
 800eea6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	689a      	ldr	r2, [r3, #8]
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	68db      	ldr	r3, [r3, #12]
 800eeb0:	431a      	orrs	r2, r3
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	691b      	ldr	r3, [r3, #16]
 800eeb6:	431a      	orrs	r2, r3
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	695b      	ldr	r3, [r3, #20]
 800eebc:	ea42 0103 	orr.w	r1, r2, r3
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	685b      	ldr	r3, [r3, #4]
 800eec4:	1e5a      	subs	r2, r3, #1
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	681b      	ldr	r3, [r3, #0]
 800eeca:	430a      	orrs	r2, r1
 800eecc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	2200      	movs	r2, #0
 800eed2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	2201      	movs	r2, #1
 800eed8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800eedc:	2300      	movs	r3, #0
}
 800eede:	4618      	mov	r0, r3
 800eee0:	3710      	adds	r7, #16
 800eee2:	46bd      	mov	sp, r7
 800eee4:	bd80      	pop	{r7, pc}

0800eee6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800eee6:	b580      	push	{r7, lr}
 800eee8:	b08a      	sub	sp, #40	; 0x28
 800eeea:	af00      	add	r7, sp, #0
 800eeec:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800eeee:	2300      	movs	r3, #0
 800eef0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	695b      	ldr	r3, [r3, #20]
 800eef8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	681b      	ldr	r3, [r3, #0]
 800eefe:	685b      	ldr	r3, [r3, #4]
 800ef00:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	689b      	ldr	r3, [r3, #8]
 800ef08:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	68db      	ldr	r3, [r3, #12]
 800ef10:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	691b      	ldr	r3, [r3, #16]
 800ef18:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	681b      	ldr	r3, [r3, #0]
 800ef1e:	699b      	ldr	r3, [r3, #24]
 800ef20:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800ef22:	6a3b      	ldr	r3, [r7, #32]
 800ef24:	f003 0301 	and.w	r3, r3, #1
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d07c      	beq.n	800f026 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800ef2c:	69bb      	ldr	r3, [r7, #24]
 800ef2e:	f003 0301 	and.w	r3, r3, #1
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d023      	beq.n	800ef7e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	2201      	movs	r2, #1
 800ef3c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800ef3e:	69bb      	ldr	r3, [r7, #24]
 800ef40:	f003 0302 	and.w	r3, r3, #2
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d003      	beq.n	800ef50 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800ef48:	6878      	ldr	r0, [r7, #4]
 800ef4a:	f000 f983 	bl	800f254 <HAL_CAN_TxMailbox0CompleteCallback>
 800ef4e:	e016      	b.n	800ef7e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800ef50:	69bb      	ldr	r3, [r7, #24]
 800ef52:	f003 0304 	and.w	r3, r3, #4
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d004      	beq.n	800ef64 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800ef5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef5c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800ef60:	627b      	str	r3, [r7, #36]	; 0x24
 800ef62:	e00c      	b.n	800ef7e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800ef64:	69bb      	ldr	r3, [r7, #24]
 800ef66:	f003 0308 	and.w	r3, r3, #8
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d004      	beq.n	800ef78 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800ef6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef70:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ef74:	627b      	str	r3, [r7, #36]	; 0x24
 800ef76:	e002      	b.n	800ef7e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800ef78:	6878      	ldr	r0, [r7, #4]
 800ef7a:	f000 f989 	bl	800f290 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800ef7e:	69bb      	ldr	r3, [r7, #24]
 800ef80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d024      	beq.n	800efd2 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ef90:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800ef92:	69bb      	ldr	r3, [r7, #24]
 800ef94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d003      	beq.n	800efa4 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800ef9c:	6878      	ldr	r0, [r7, #4]
 800ef9e:	f000 f963 	bl	800f268 <HAL_CAN_TxMailbox1CompleteCallback>
 800efa2:	e016      	b.n	800efd2 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800efa4:	69bb      	ldr	r3, [r7, #24]
 800efa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d004      	beq.n	800efb8 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800efae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efb0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800efb4:	627b      	str	r3, [r7, #36]	; 0x24
 800efb6:	e00c      	b.n	800efd2 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800efb8:	69bb      	ldr	r3, [r7, #24]
 800efba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	d004      	beq.n	800efcc <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800efc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800efc8:	627b      	str	r3, [r7, #36]	; 0x24
 800efca:	e002      	b.n	800efd2 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800efcc:	6878      	ldr	r0, [r7, #4]
 800efce:	f000 f969 	bl	800f2a4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800efd2:	69bb      	ldr	r3, [r7, #24]
 800efd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d024      	beq.n	800f026 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800efe4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800efe6:	69bb      	ldr	r3, [r7, #24]
 800efe8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800efec:	2b00      	cmp	r3, #0
 800efee:	d003      	beq.n	800eff8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800eff0:	6878      	ldr	r0, [r7, #4]
 800eff2:	f000 f943 	bl	800f27c <HAL_CAN_TxMailbox2CompleteCallback>
 800eff6:	e016      	b.n	800f026 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800eff8:	69bb      	ldr	r3, [r7, #24]
 800effa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800effe:	2b00      	cmp	r3, #0
 800f000:	d004      	beq.n	800f00c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800f002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f004:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f008:	627b      	str	r3, [r7, #36]	; 0x24
 800f00a:	e00c      	b.n	800f026 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800f00c:	69bb      	ldr	r3, [r7, #24]
 800f00e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800f012:	2b00      	cmp	r3, #0
 800f014:	d004      	beq.n	800f020 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800f016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f018:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f01c:	627b      	str	r3, [r7, #36]	; 0x24
 800f01e:	e002      	b.n	800f026 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800f020:	6878      	ldr	r0, [r7, #4]
 800f022:	f000 f949 	bl	800f2b8 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800f026:	6a3b      	ldr	r3, [r7, #32]
 800f028:	f003 0308 	and.w	r3, r3, #8
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d00c      	beq.n	800f04a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800f030:	697b      	ldr	r3, [r7, #20]
 800f032:	f003 0310 	and.w	r3, r3, #16
 800f036:	2b00      	cmp	r3, #0
 800f038:	d007      	beq.n	800f04a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800f03a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f03c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800f040:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	2210      	movs	r2, #16
 800f048:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800f04a:	6a3b      	ldr	r3, [r7, #32]
 800f04c:	f003 0304 	and.w	r3, r3, #4
 800f050:	2b00      	cmp	r3, #0
 800f052:	d00b      	beq.n	800f06c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800f054:	697b      	ldr	r3, [r7, #20]
 800f056:	f003 0308 	and.w	r3, r3, #8
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d006      	beq.n	800f06c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	2208      	movs	r2, #8
 800f064:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800f066:	6878      	ldr	r0, [r7, #4]
 800f068:	f000 f93a 	bl	800f2e0 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800f06c:	6a3b      	ldr	r3, [r7, #32]
 800f06e:	f003 0302 	and.w	r3, r3, #2
 800f072:	2b00      	cmp	r3, #0
 800f074:	d009      	beq.n	800f08a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	68db      	ldr	r3, [r3, #12]
 800f07c:	f003 0303 	and.w	r3, r3, #3
 800f080:	2b00      	cmp	r3, #0
 800f082:	d002      	beq.n	800f08a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800f084:	6878      	ldr	r0, [r7, #4]
 800f086:	f000 f921 	bl	800f2cc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800f08a:	6a3b      	ldr	r3, [r7, #32]
 800f08c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f090:	2b00      	cmp	r3, #0
 800f092:	d00c      	beq.n	800f0ae <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800f094:	693b      	ldr	r3, [r7, #16]
 800f096:	f003 0310 	and.w	r3, r3, #16
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d007      	beq.n	800f0ae <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800f09e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0a0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800f0a4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	2210      	movs	r2, #16
 800f0ac:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800f0ae:	6a3b      	ldr	r3, [r7, #32]
 800f0b0:	f003 0320 	and.w	r3, r3, #32
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d00b      	beq.n	800f0d0 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800f0b8:	693b      	ldr	r3, [r7, #16]
 800f0ba:	f003 0308 	and.w	r3, r3, #8
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d006      	beq.n	800f0d0 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	681b      	ldr	r3, [r3, #0]
 800f0c6:	2208      	movs	r2, #8
 800f0c8:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800f0ca:	6878      	ldr	r0, [r7, #4]
 800f0cc:	f000 f91c 	bl	800f308 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800f0d0:	6a3b      	ldr	r3, [r7, #32]
 800f0d2:	f003 0310 	and.w	r3, r3, #16
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d009      	beq.n	800f0ee <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	681b      	ldr	r3, [r3, #0]
 800f0de:	691b      	ldr	r3, [r3, #16]
 800f0e0:	f003 0303 	and.w	r3, r3, #3
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d002      	beq.n	800f0ee <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800f0e8:	6878      	ldr	r0, [r7, #4]
 800f0ea:	f000 f903 	bl	800f2f4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800f0ee:	6a3b      	ldr	r3, [r7, #32]
 800f0f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d00b      	beq.n	800f110 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800f0f8:	69fb      	ldr	r3, [r7, #28]
 800f0fa:	f003 0310 	and.w	r3, r3, #16
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d006      	beq.n	800f110 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	2210      	movs	r2, #16
 800f108:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800f10a:	6878      	ldr	r0, [r7, #4]
 800f10c:	f000 f906 	bl	800f31c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800f110:	6a3b      	ldr	r3, [r7, #32]
 800f112:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f116:	2b00      	cmp	r3, #0
 800f118:	d00b      	beq.n	800f132 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800f11a:	69fb      	ldr	r3, [r7, #28]
 800f11c:	f003 0308 	and.w	r3, r3, #8
 800f120:	2b00      	cmp	r3, #0
 800f122:	d006      	beq.n	800f132 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	2208      	movs	r2, #8
 800f12a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800f12c:	6878      	ldr	r0, [r7, #4]
 800f12e:	f000 f8ff 	bl	800f330 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800f132:	6a3b      	ldr	r3, [r7, #32]
 800f134:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d07b      	beq.n	800f234 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800f13c:	69fb      	ldr	r3, [r7, #28]
 800f13e:	f003 0304 	and.w	r3, r3, #4
 800f142:	2b00      	cmp	r3, #0
 800f144:	d072      	beq.n	800f22c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800f146:	6a3b      	ldr	r3, [r7, #32]
 800f148:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d008      	beq.n	800f162 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800f156:	2b00      	cmp	r3, #0
 800f158:	d003      	beq.n	800f162 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800f15a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f15c:	f043 0301 	orr.w	r3, r3, #1
 800f160:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800f162:	6a3b      	ldr	r3, [r7, #32]
 800f164:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d008      	beq.n	800f17e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800f16c:	68fb      	ldr	r3, [r7, #12]
 800f16e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800f172:	2b00      	cmp	r3, #0
 800f174:	d003      	beq.n	800f17e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800f176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f178:	f043 0302 	orr.w	r3, r3, #2
 800f17c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800f17e:	6a3b      	ldr	r3, [r7, #32]
 800f180:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f184:	2b00      	cmp	r3, #0
 800f186:	d008      	beq.n	800f19a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800f188:	68fb      	ldr	r3, [r7, #12]
 800f18a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d003      	beq.n	800f19a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800f192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f194:	f043 0304 	orr.w	r3, r3, #4
 800f198:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800f19a:	6a3b      	ldr	r3, [r7, #32]
 800f19c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d043      	beq.n	800f22c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d03e      	beq.n	800f22c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800f1b4:	2b60      	cmp	r3, #96	; 0x60
 800f1b6:	d02b      	beq.n	800f210 <HAL_CAN_IRQHandler+0x32a>
 800f1b8:	2b60      	cmp	r3, #96	; 0x60
 800f1ba:	d82e      	bhi.n	800f21a <HAL_CAN_IRQHandler+0x334>
 800f1bc:	2b50      	cmp	r3, #80	; 0x50
 800f1be:	d022      	beq.n	800f206 <HAL_CAN_IRQHandler+0x320>
 800f1c0:	2b50      	cmp	r3, #80	; 0x50
 800f1c2:	d82a      	bhi.n	800f21a <HAL_CAN_IRQHandler+0x334>
 800f1c4:	2b40      	cmp	r3, #64	; 0x40
 800f1c6:	d019      	beq.n	800f1fc <HAL_CAN_IRQHandler+0x316>
 800f1c8:	2b40      	cmp	r3, #64	; 0x40
 800f1ca:	d826      	bhi.n	800f21a <HAL_CAN_IRQHandler+0x334>
 800f1cc:	2b30      	cmp	r3, #48	; 0x30
 800f1ce:	d010      	beq.n	800f1f2 <HAL_CAN_IRQHandler+0x30c>
 800f1d0:	2b30      	cmp	r3, #48	; 0x30
 800f1d2:	d822      	bhi.n	800f21a <HAL_CAN_IRQHandler+0x334>
 800f1d4:	2b10      	cmp	r3, #16
 800f1d6:	d002      	beq.n	800f1de <HAL_CAN_IRQHandler+0x2f8>
 800f1d8:	2b20      	cmp	r3, #32
 800f1da:	d005      	beq.n	800f1e8 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800f1dc:	e01d      	b.n	800f21a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800f1de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1e0:	f043 0308 	orr.w	r3, r3, #8
 800f1e4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800f1e6:	e019      	b.n	800f21c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800f1e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1ea:	f043 0310 	orr.w	r3, r3, #16
 800f1ee:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800f1f0:	e014      	b.n	800f21c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800f1f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1f4:	f043 0320 	orr.w	r3, r3, #32
 800f1f8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800f1fa:	e00f      	b.n	800f21c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800f1fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f202:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800f204:	e00a      	b.n	800f21c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800f206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f208:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f20c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800f20e:	e005      	b.n	800f21c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800f210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f212:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f216:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800f218:	e000      	b.n	800f21c <HAL_CAN_IRQHandler+0x336>
            break;
 800f21a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	699a      	ldr	r2, [r3, #24]
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800f22a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	2204      	movs	r2, #4
 800f232:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800f234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f236:	2b00      	cmp	r3, #0
 800f238:	d008      	beq.n	800f24c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f23e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f240:	431a      	orrs	r2, r3
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800f246:	6878      	ldr	r0, [r7, #4]
 800f248:	f000 f87c 	bl	800f344 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800f24c:	bf00      	nop
 800f24e:	3728      	adds	r7, #40	; 0x28
 800f250:	46bd      	mov	sp, r7
 800f252:	bd80      	pop	{r7, pc}

0800f254 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800f254:	b480      	push	{r7}
 800f256:	b083      	sub	sp, #12
 800f258:	af00      	add	r7, sp, #0
 800f25a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800f25c:	bf00      	nop
 800f25e:	370c      	adds	r7, #12
 800f260:	46bd      	mov	sp, r7
 800f262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f266:	4770      	bx	lr

0800f268 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800f268:	b480      	push	{r7}
 800f26a:	b083      	sub	sp, #12
 800f26c:	af00      	add	r7, sp, #0
 800f26e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800f270:	bf00      	nop
 800f272:	370c      	adds	r7, #12
 800f274:	46bd      	mov	sp, r7
 800f276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f27a:	4770      	bx	lr

0800f27c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800f27c:	b480      	push	{r7}
 800f27e:	b083      	sub	sp, #12
 800f280:	af00      	add	r7, sp, #0
 800f282:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800f284:	bf00      	nop
 800f286:	370c      	adds	r7, #12
 800f288:	46bd      	mov	sp, r7
 800f28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f28e:	4770      	bx	lr

0800f290 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800f290:	b480      	push	{r7}
 800f292:	b083      	sub	sp, #12
 800f294:	af00      	add	r7, sp, #0
 800f296:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800f298:	bf00      	nop
 800f29a:	370c      	adds	r7, #12
 800f29c:	46bd      	mov	sp, r7
 800f29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2a2:	4770      	bx	lr

0800f2a4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800f2a4:	b480      	push	{r7}
 800f2a6:	b083      	sub	sp, #12
 800f2a8:	af00      	add	r7, sp, #0
 800f2aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800f2ac:	bf00      	nop
 800f2ae:	370c      	adds	r7, #12
 800f2b0:	46bd      	mov	sp, r7
 800f2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2b6:	4770      	bx	lr

0800f2b8 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800f2b8:	b480      	push	{r7}
 800f2ba:	b083      	sub	sp, #12
 800f2bc:	af00      	add	r7, sp, #0
 800f2be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800f2c0:	bf00      	nop
 800f2c2:	370c      	adds	r7, #12
 800f2c4:	46bd      	mov	sp, r7
 800f2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ca:	4770      	bx	lr

0800f2cc <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800f2cc:	b480      	push	{r7}
 800f2ce:	b083      	sub	sp, #12
 800f2d0:	af00      	add	r7, sp, #0
 800f2d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 800f2d4:	bf00      	nop
 800f2d6:	370c      	adds	r7, #12
 800f2d8:	46bd      	mov	sp, r7
 800f2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2de:	4770      	bx	lr

0800f2e0 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800f2e0:	b480      	push	{r7}
 800f2e2:	b083      	sub	sp, #12
 800f2e4:	af00      	add	r7, sp, #0
 800f2e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800f2e8:	bf00      	nop
 800f2ea:	370c      	adds	r7, #12
 800f2ec:	46bd      	mov	sp, r7
 800f2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2f2:	4770      	bx	lr

0800f2f4 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800f2f4:	b480      	push	{r7}
 800f2f6:	b083      	sub	sp, #12
 800f2f8:	af00      	add	r7, sp, #0
 800f2fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800f2fc:	bf00      	nop
 800f2fe:	370c      	adds	r7, #12
 800f300:	46bd      	mov	sp, r7
 800f302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f306:	4770      	bx	lr

0800f308 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800f308:	b480      	push	{r7}
 800f30a:	b083      	sub	sp, #12
 800f30c:	af00      	add	r7, sp, #0
 800f30e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800f310:	bf00      	nop
 800f312:	370c      	adds	r7, #12
 800f314:	46bd      	mov	sp, r7
 800f316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f31a:	4770      	bx	lr

0800f31c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800f31c:	b480      	push	{r7}
 800f31e:	b083      	sub	sp, #12
 800f320:	af00      	add	r7, sp, #0
 800f322:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800f324:	bf00      	nop
 800f326:	370c      	adds	r7, #12
 800f328:	46bd      	mov	sp, r7
 800f32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f32e:	4770      	bx	lr

0800f330 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800f330:	b480      	push	{r7}
 800f332:	b083      	sub	sp, #12
 800f334:	af00      	add	r7, sp, #0
 800f336:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800f338:	bf00      	nop
 800f33a:	370c      	adds	r7, #12
 800f33c:	46bd      	mov	sp, r7
 800f33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f342:	4770      	bx	lr

0800f344 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800f344:	b480      	push	{r7}
 800f346:	b083      	sub	sp, #12
 800f348:	af00      	add	r7, sp, #0
 800f34a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800f34c:	bf00      	nop
 800f34e:	370c      	adds	r7, #12
 800f350:	46bd      	mov	sp, r7
 800f352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f356:	4770      	bx	lr

0800f358 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800f358:	b480      	push	{r7}
 800f35a:	b085      	sub	sp, #20
 800f35c:	af00      	add	r7, sp, #0
 800f35e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	f003 0307 	and.w	r3, r3, #7
 800f366:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800f368:	4b0c      	ldr	r3, [pc, #48]	; (800f39c <__NVIC_SetPriorityGrouping+0x44>)
 800f36a:	68db      	ldr	r3, [r3, #12]
 800f36c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800f36e:	68ba      	ldr	r2, [r7, #8]
 800f370:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800f374:	4013      	ands	r3, r2
 800f376:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800f37c:	68bb      	ldr	r3, [r7, #8]
 800f37e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800f380:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800f384:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f388:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800f38a:	4a04      	ldr	r2, [pc, #16]	; (800f39c <__NVIC_SetPriorityGrouping+0x44>)
 800f38c:	68bb      	ldr	r3, [r7, #8]
 800f38e:	60d3      	str	r3, [r2, #12]
}
 800f390:	bf00      	nop
 800f392:	3714      	adds	r7, #20
 800f394:	46bd      	mov	sp, r7
 800f396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f39a:	4770      	bx	lr
 800f39c:	e000ed00 	.word	0xe000ed00

0800f3a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800f3a0:	b480      	push	{r7}
 800f3a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800f3a4:	4b04      	ldr	r3, [pc, #16]	; (800f3b8 <__NVIC_GetPriorityGrouping+0x18>)
 800f3a6:	68db      	ldr	r3, [r3, #12]
 800f3a8:	0a1b      	lsrs	r3, r3, #8
 800f3aa:	f003 0307 	and.w	r3, r3, #7
}
 800f3ae:	4618      	mov	r0, r3
 800f3b0:	46bd      	mov	sp, r7
 800f3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3b6:	4770      	bx	lr
 800f3b8:	e000ed00 	.word	0xe000ed00

0800f3bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800f3bc:	b480      	push	{r7}
 800f3be:	b083      	sub	sp, #12
 800f3c0:	af00      	add	r7, sp, #0
 800f3c2:	4603      	mov	r3, r0
 800f3c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800f3c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	db0b      	blt.n	800f3e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800f3ce:	79fb      	ldrb	r3, [r7, #7]
 800f3d0:	f003 021f 	and.w	r2, r3, #31
 800f3d4:	4907      	ldr	r1, [pc, #28]	; (800f3f4 <__NVIC_EnableIRQ+0x38>)
 800f3d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f3da:	095b      	lsrs	r3, r3, #5
 800f3dc:	2001      	movs	r0, #1
 800f3de:	fa00 f202 	lsl.w	r2, r0, r2
 800f3e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800f3e6:	bf00      	nop
 800f3e8:	370c      	adds	r7, #12
 800f3ea:	46bd      	mov	sp, r7
 800f3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3f0:	4770      	bx	lr
 800f3f2:	bf00      	nop
 800f3f4:	e000e100 	.word	0xe000e100

0800f3f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800f3f8:	b480      	push	{r7}
 800f3fa:	b083      	sub	sp, #12
 800f3fc:	af00      	add	r7, sp, #0
 800f3fe:	4603      	mov	r3, r0
 800f400:	6039      	str	r1, [r7, #0]
 800f402:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800f404:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f408:	2b00      	cmp	r3, #0
 800f40a:	db0a      	blt.n	800f422 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f40c:	683b      	ldr	r3, [r7, #0]
 800f40e:	b2da      	uxtb	r2, r3
 800f410:	490c      	ldr	r1, [pc, #48]	; (800f444 <__NVIC_SetPriority+0x4c>)
 800f412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f416:	0112      	lsls	r2, r2, #4
 800f418:	b2d2      	uxtb	r2, r2
 800f41a:	440b      	add	r3, r1
 800f41c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800f420:	e00a      	b.n	800f438 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f422:	683b      	ldr	r3, [r7, #0]
 800f424:	b2da      	uxtb	r2, r3
 800f426:	4908      	ldr	r1, [pc, #32]	; (800f448 <__NVIC_SetPriority+0x50>)
 800f428:	79fb      	ldrb	r3, [r7, #7]
 800f42a:	f003 030f 	and.w	r3, r3, #15
 800f42e:	3b04      	subs	r3, #4
 800f430:	0112      	lsls	r2, r2, #4
 800f432:	b2d2      	uxtb	r2, r2
 800f434:	440b      	add	r3, r1
 800f436:	761a      	strb	r2, [r3, #24]
}
 800f438:	bf00      	nop
 800f43a:	370c      	adds	r7, #12
 800f43c:	46bd      	mov	sp, r7
 800f43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f442:	4770      	bx	lr
 800f444:	e000e100 	.word	0xe000e100
 800f448:	e000ed00 	.word	0xe000ed00

0800f44c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800f44c:	b480      	push	{r7}
 800f44e:	b089      	sub	sp, #36	; 0x24
 800f450:	af00      	add	r7, sp, #0
 800f452:	60f8      	str	r0, [r7, #12]
 800f454:	60b9      	str	r1, [r7, #8]
 800f456:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800f458:	68fb      	ldr	r3, [r7, #12]
 800f45a:	f003 0307 	and.w	r3, r3, #7
 800f45e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800f460:	69fb      	ldr	r3, [r7, #28]
 800f462:	f1c3 0307 	rsb	r3, r3, #7
 800f466:	2b04      	cmp	r3, #4
 800f468:	bf28      	it	cs
 800f46a:	2304      	movcs	r3, #4
 800f46c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800f46e:	69fb      	ldr	r3, [r7, #28]
 800f470:	3304      	adds	r3, #4
 800f472:	2b06      	cmp	r3, #6
 800f474:	d902      	bls.n	800f47c <NVIC_EncodePriority+0x30>
 800f476:	69fb      	ldr	r3, [r7, #28]
 800f478:	3b03      	subs	r3, #3
 800f47a:	e000      	b.n	800f47e <NVIC_EncodePriority+0x32>
 800f47c:	2300      	movs	r3, #0
 800f47e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800f480:	f04f 32ff 	mov.w	r2, #4294967295
 800f484:	69bb      	ldr	r3, [r7, #24]
 800f486:	fa02 f303 	lsl.w	r3, r2, r3
 800f48a:	43da      	mvns	r2, r3
 800f48c:	68bb      	ldr	r3, [r7, #8]
 800f48e:	401a      	ands	r2, r3
 800f490:	697b      	ldr	r3, [r7, #20]
 800f492:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800f494:	f04f 31ff 	mov.w	r1, #4294967295
 800f498:	697b      	ldr	r3, [r7, #20]
 800f49a:	fa01 f303 	lsl.w	r3, r1, r3
 800f49e:	43d9      	mvns	r1, r3
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800f4a4:	4313      	orrs	r3, r2
         );
}
 800f4a6:	4618      	mov	r0, r3
 800f4a8:	3724      	adds	r7, #36	; 0x24
 800f4aa:	46bd      	mov	sp, r7
 800f4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4b0:	4770      	bx	lr

0800f4b2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800f4b2:	b580      	push	{r7, lr}
 800f4b4:	b082      	sub	sp, #8
 800f4b6:	af00      	add	r7, sp, #0
 800f4b8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800f4ba:	6878      	ldr	r0, [r7, #4]
 800f4bc:	f7ff ff4c 	bl	800f358 <__NVIC_SetPriorityGrouping>
}
 800f4c0:	bf00      	nop
 800f4c2:	3708      	adds	r7, #8
 800f4c4:	46bd      	mov	sp, r7
 800f4c6:	bd80      	pop	{r7, pc}

0800f4c8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800f4c8:	b580      	push	{r7, lr}
 800f4ca:	b086      	sub	sp, #24
 800f4cc:	af00      	add	r7, sp, #0
 800f4ce:	4603      	mov	r3, r0
 800f4d0:	60b9      	str	r1, [r7, #8]
 800f4d2:	607a      	str	r2, [r7, #4]
 800f4d4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800f4d6:	2300      	movs	r3, #0
 800f4d8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800f4da:	f7ff ff61 	bl	800f3a0 <__NVIC_GetPriorityGrouping>
 800f4de:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800f4e0:	687a      	ldr	r2, [r7, #4]
 800f4e2:	68b9      	ldr	r1, [r7, #8]
 800f4e4:	6978      	ldr	r0, [r7, #20]
 800f4e6:	f7ff ffb1 	bl	800f44c <NVIC_EncodePriority>
 800f4ea:	4602      	mov	r2, r0
 800f4ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f4f0:	4611      	mov	r1, r2
 800f4f2:	4618      	mov	r0, r3
 800f4f4:	f7ff ff80 	bl	800f3f8 <__NVIC_SetPriority>
}
 800f4f8:	bf00      	nop
 800f4fa:	3718      	adds	r7, #24
 800f4fc:	46bd      	mov	sp, r7
 800f4fe:	bd80      	pop	{r7, pc}

0800f500 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800f500:	b580      	push	{r7, lr}
 800f502:	b082      	sub	sp, #8
 800f504:	af00      	add	r7, sp, #0
 800f506:	4603      	mov	r3, r0
 800f508:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800f50a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f50e:	4618      	mov	r0, r3
 800f510:	f7ff ff54 	bl	800f3bc <__NVIC_EnableIRQ>
}
 800f514:	bf00      	nop
 800f516:	3708      	adds	r7, #8
 800f518:	46bd      	mov	sp, r7
 800f51a:	bd80      	pop	{r7, pc}

0800f51c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800f51c:	b580      	push	{r7, lr}
 800f51e:	b086      	sub	sp, #24
 800f520:	af00      	add	r7, sp, #0
 800f522:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800f524:	2300      	movs	r3, #0
 800f526:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800f528:	f7fe fe7a 	bl	800e220 <HAL_GetTick>
 800f52c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	2b00      	cmp	r3, #0
 800f532:	d101      	bne.n	800f538 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800f534:	2301      	movs	r3, #1
 800f536:	e099      	b.n	800f66c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	2202      	movs	r2, #2
 800f53c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	2200      	movs	r2, #0
 800f544:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	681b      	ldr	r3, [r3, #0]
 800f54c:	681a      	ldr	r2, [r3, #0]
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	681b      	ldr	r3, [r3, #0]
 800f552:	f022 0201 	bic.w	r2, r2, #1
 800f556:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800f558:	e00f      	b.n	800f57a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800f55a:	f7fe fe61 	bl	800e220 <HAL_GetTick>
 800f55e:	4602      	mov	r2, r0
 800f560:	693b      	ldr	r3, [r7, #16]
 800f562:	1ad3      	subs	r3, r2, r3
 800f564:	2b05      	cmp	r3, #5
 800f566:	d908      	bls.n	800f57a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	2220      	movs	r2, #32
 800f56c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	2203      	movs	r2, #3
 800f572:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800f576:	2303      	movs	r3, #3
 800f578:	e078      	b.n	800f66c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	f003 0301 	and.w	r3, r3, #1
 800f584:	2b00      	cmp	r3, #0
 800f586:	d1e8      	bne.n	800f55a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	681b      	ldr	r3, [r3, #0]
 800f58e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800f590:	697a      	ldr	r2, [r7, #20]
 800f592:	4b38      	ldr	r3, [pc, #224]	; (800f674 <HAL_DMA_Init+0x158>)
 800f594:	4013      	ands	r3, r2
 800f596:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	685a      	ldr	r2, [r3, #4]
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	689b      	ldr	r3, [r3, #8]
 800f5a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800f5a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	691b      	ldr	r3, [r3, #16]
 800f5ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f5b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	699b      	ldr	r3, [r3, #24]
 800f5b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f5be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	6a1b      	ldr	r3, [r3, #32]
 800f5c4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800f5c6:	697a      	ldr	r2, [r7, #20]
 800f5c8:	4313      	orrs	r3, r2
 800f5ca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5d0:	2b04      	cmp	r3, #4
 800f5d2:	d107      	bne.n	800f5e4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f5dc:	4313      	orrs	r3, r2
 800f5de:	697a      	ldr	r2, [r7, #20]
 800f5e0:	4313      	orrs	r3, r2
 800f5e2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	697a      	ldr	r2, [r7, #20]
 800f5ea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	681b      	ldr	r3, [r3, #0]
 800f5f0:	695b      	ldr	r3, [r3, #20]
 800f5f2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800f5f4:	697b      	ldr	r3, [r7, #20]
 800f5f6:	f023 0307 	bic.w	r3, r3, #7
 800f5fa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f600:	697a      	ldr	r2, [r7, #20]
 800f602:	4313      	orrs	r3, r2
 800f604:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f60a:	2b04      	cmp	r3, #4
 800f60c:	d117      	bne.n	800f63e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f612:	697a      	ldr	r2, [r7, #20]
 800f614:	4313      	orrs	r3, r2
 800f616:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d00e      	beq.n	800f63e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800f620:	6878      	ldr	r0, [r7, #4]
 800f622:	f000 fa6f 	bl	800fb04 <DMA_CheckFifoParam>
 800f626:	4603      	mov	r3, r0
 800f628:	2b00      	cmp	r3, #0
 800f62a:	d008      	beq.n	800f63e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	2240      	movs	r2, #64	; 0x40
 800f630:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	2201      	movs	r2, #1
 800f636:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800f63a:	2301      	movs	r3, #1
 800f63c:	e016      	b.n	800f66c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	697a      	ldr	r2, [r7, #20]
 800f644:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800f646:	6878      	ldr	r0, [r7, #4]
 800f648:	f000 fa26 	bl	800fa98 <DMA_CalcBaseAndBitshift>
 800f64c:	4603      	mov	r3, r0
 800f64e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f654:	223f      	movs	r2, #63	; 0x3f
 800f656:	409a      	lsls	r2, r3
 800f658:	68fb      	ldr	r3, [r7, #12]
 800f65a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	2200      	movs	r2, #0
 800f660:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	2201      	movs	r2, #1
 800f666:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800f66a:	2300      	movs	r3, #0
}
 800f66c:	4618      	mov	r0, r3
 800f66e:	3718      	adds	r7, #24
 800f670:	46bd      	mov	sp, r7
 800f672:	bd80      	pop	{r7, pc}
 800f674:	f010803f 	.word	0xf010803f

0800f678 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800f678:	b580      	push	{r7, lr}
 800f67a:	b086      	sub	sp, #24
 800f67c:	af00      	add	r7, sp, #0
 800f67e:	60f8      	str	r0, [r7, #12]
 800f680:	60b9      	str	r1, [r7, #8]
 800f682:	607a      	str	r2, [r7, #4]
 800f684:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f686:	2300      	movs	r3, #0
 800f688:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f68e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800f690:	68fb      	ldr	r3, [r7, #12]
 800f692:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f696:	2b01      	cmp	r3, #1
 800f698:	d101      	bne.n	800f69e <HAL_DMA_Start_IT+0x26>
 800f69a:	2302      	movs	r3, #2
 800f69c:	e040      	b.n	800f720 <HAL_DMA_Start_IT+0xa8>
 800f69e:	68fb      	ldr	r3, [r7, #12]
 800f6a0:	2201      	movs	r2, #1
 800f6a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800f6a6:	68fb      	ldr	r3, [r7, #12]
 800f6a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800f6ac:	b2db      	uxtb	r3, r3
 800f6ae:	2b01      	cmp	r3, #1
 800f6b0:	d12f      	bne.n	800f712 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800f6b2:	68fb      	ldr	r3, [r7, #12]
 800f6b4:	2202      	movs	r2, #2
 800f6b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800f6ba:	68fb      	ldr	r3, [r7, #12]
 800f6bc:	2200      	movs	r2, #0
 800f6be:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800f6c0:	683b      	ldr	r3, [r7, #0]
 800f6c2:	687a      	ldr	r2, [r7, #4]
 800f6c4:	68b9      	ldr	r1, [r7, #8]
 800f6c6:	68f8      	ldr	r0, [r7, #12]
 800f6c8:	f000 f9b8 	bl	800fa3c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f6cc:	68fb      	ldr	r3, [r7, #12]
 800f6ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f6d0:	223f      	movs	r2, #63	; 0x3f
 800f6d2:	409a      	lsls	r2, r3
 800f6d4:	693b      	ldr	r3, [r7, #16]
 800f6d6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	681a      	ldr	r2, [r3, #0]
 800f6de:	68fb      	ldr	r3, [r7, #12]
 800f6e0:	681b      	ldr	r3, [r3, #0]
 800f6e2:	f042 0216 	orr.w	r2, r2, #22
 800f6e6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800f6e8:	68fb      	ldr	r3, [r7, #12]
 800f6ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d007      	beq.n	800f700 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800f6f0:	68fb      	ldr	r3, [r7, #12]
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	681a      	ldr	r2, [r3, #0]
 800f6f6:	68fb      	ldr	r3, [r7, #12]
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	f042 0208 	orr.w	r2, r2, #8
 800f6fe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800f700:	68fb      	ldr	r3, [r7, #12]
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	681a      	ldr	r2, [r3, #0]
 800f706:	68fb      	ldr	r3, [r7, #12]
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	f042 0201 	orr.w	r2, r2, #1
 800f70e:	601a      	str	r2, [r3, #0]
 800f710:	e005      	b.n	800f71e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800f712:	68fb      	ldr	r3, [r7, #12]
 800f714:	2200      	movs	r2, #0
 800f716:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800f71a:	2302      	movs	r3, #2
 800f71c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800f71e:	7dfb      	ldrb	r3, [r7, #23]
}
 800f720:	4618      	mov	r0, r3
 800f722:	3718      	adds	r7, #24
 800f724:	46bd      	mov	sp, r7
 800f726:	bd80      	pop	{r7, pc}

0800f728 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800f728:	b580      	push	{r7, lr}
 800f72a:	b086      	sub	sp, #24
 800f72c:	af00      	add	r7, sp, #0
 800f72e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800f730:	2300      	movs	r3, #0
 800f732:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800f734:	4b92      	ldr	r3, [pc, #584]	; (800f980 <HAL_DMA_IRQHandler+0x258>)
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	4a92      	ldr	r2, [pc, #584]	; (800f984 <HAL_DMA_IRQHandler+0x25c>)
 800f73a:	fba2 2303 	umull	r2, r3, r2, r3
 800f73e:	0a9b      	lsrs	r3, r3, #10
 800f740:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f746:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800f748:	693b      	ldr	r3, [r7, #16]
 800f74a:	681b      	ldr	r3, [r3, #0]
 800f74c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f752:	2208      	movs	r2, #8
 800f754:	409a      	lsls	r2, r3
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	4013      	ands	r3, r2
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	d01a      	beq.n	800f794 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	681b      	ldr	r3, [r3, #0]
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	f003 0304 	and.w	r3, r3, #4
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d013      	beq.n	800f794 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	681a      	ldr	r2, [r3, #0]
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	681b      	ldr	r3, [r3, #0]
 800f776:	f022 0204 	bic.w	r2, r2, #4
 800f77a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f780:	2208      	movs	r2, #8
 800f782:	409a      	lsls	r2, r3
 800f784:	693b      	ldr	r3, [r7, #16]
 800f786:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f78c:	f043 0201 	orr.w	r2, r3, #1
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f798:	2201      	movs	r2, #1
 800f79a:	409a      	lsls	r2, r3
 800f79c:	68fb      	ldr	r3, [r7, #12]
 800f79e:	4013      	ands	r3, r2
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d012      	beq.n	800f7ca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	695b      	ldr	r3, [r3, #20]
 800f7aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d00b      	beq.n	800f7ca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f7b6:	2201      	movs	r2, #1
 800f7b8:	409a      	lsls	r2, r3
 800f7ba:	693b      	ldr	r3, [r7, #16]
 800f7bc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f7c2:	f043 0202 	orr.w	r2, r3, #2
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f7ce:	2204      	movs	r2, #4
 800f7d0:	409a      	lsls	r2, r3
 800f7d2:	68fb      	ldr	r3, [r7, #12]
 800f7d4:	4013      	ands	r3, r2
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d012      	beq.n	800f800 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	f003 0302 	and.w	r3, r3, #2
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	d00b      	beq.n	800f800 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f7ec:	2204      	movs	r2, #4
 800f7ee:	409a      	lsls	r2, r3
 800f7f0:	693b      	ldr	r3, [r7, #16]
 800f7f2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f7f8:	f043 0204 	orr.w	r2, r3, #4
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f804:	2210      	movs	r2, #16
 800f806:	409a      	lsls	r2, r3
 800f808:	68fb      	ldr	r3, [r7, #12]
 800f80a:	4013      	ands	r3, r2
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d043      	beq.n	800f898 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	f003 0308 	and.w	r3, r3, #8
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d03c      	beq.n	800f898 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f822:	2210      	movs	r2, #16
 800f824:	409a      	lsls	r2, r3
 800f826:	693b      	ldr	r3, [r7, #16]
 800f828:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	681b      	ldr	r3, [r3, #0]
 800f82e:	681b      	ldr	r3, [r3, #0]
 800f830:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f834:	2b00      	cmp	r3, #0
 800f836:	d018      	beq.n	800f86a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	681b      	ldr	r3, [r3, #0]
 800f83c:	681b      	ldr	r3, [r3, #0]
 800f83e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800f842:	2b00      	cmp	r3, #0
 800f844:	d108      	bne.n	800f858 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f84a:	2b00      	cmp	r3, #0
 800f84c:	d024      	beq.n	800f898 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f852:	6878      	ldr	r0, [r7, #4]
 800f854:	4798      	blx	r3
 800f856:	e01f      	b.n	800f898 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d01b      	beq.n	800f898 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f864:	6878      	ldr	r0, [r7, #4]
 800f866:	4798      	blx	r3
 800f868:	e016      	b.n	800f898 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f874:	2b00      	cmp	r3, #0
 800f876:	d107      	bne.n	800f888 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	681b      	ldr	r3, [r3, #0]
 800f87c:	681a      	ldr	r2, [r3, #0]
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	f022 0208 	bic.w	r2, r2, #8
 800f886:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d003      	beq.n	800f898 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f894:	6878      	ldr	r0, [r7, #4]
 800f896:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f89c:	2220      	movs	r2, #32
 800f89e:	409a      	lsls	r2, r3
 800f8a0:	68fb      	ldr	r3, [r7, #12]
 800f8a2:	4013      	ands	r3, r2
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	f000 808e 	beq.w	800f9c6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	681b      	ldr	r3, [r3, #0]
 800f8ae:	681b      	ldr	r3, [r3, #0]
 800f8b0:	f003 0310 	and.w	r3, r3, #16
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	f000 8086 	beq.w	800f9c6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f8be:	2220      	movs	r2, #32
 800f8c0:	409a      	lsls	r2, r3
 800f8c2:	693b      	ldr	r3, [r7, #16]
 800f8c4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800f8cc:	b2db      	uxtb	r3, r3
 800f8ce:	2b05      	cmp	r3, #5
 800f8d0:	d136      	bne.n	800f940 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	681a      	ldr	r2, [r3, #0]
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	f022 0216 	bic.w	r2, r2, #22
 800f8e0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	681b      	ldr	r3, [r3, #0]
 800f8e6:	695a      	ldr	r2, [r3, #20]
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	681b      	ldr	r3, [r3, #0]
 800f8ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f8f0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d103      	bne.n	800f902 <HAL_DMA_IRQHandler+0x1da>
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d007      	beq.n	800f912 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	681b      	ldr	r3, [r3, #0]
 800f906:	681a      	ldr	r2, [r3, #0]
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	681b      	ldr	r3, [r3, #0]
 800f90c:	f022 0208 	bic.w	r2, r2, #8
 800f910:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f916:	223f      	movs	r2, #63	; 0x3f
 800f918:	409a      	lsls	r2, r3
 800f91a:	693b      	ldr	r3, [r7, #16]
 800f91c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	2201      	movs	r2, #1
 800f922:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	2200      	movs	r2, #0
 800f92a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f932:	2b00      	cmp	r3, #0
 800f934:	d07d      	beq.n	800fa32 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f93a:	6878      	ldr	r0, [r7, #4]
 800f93c:	4798      	blx	r3
        }
        return;
 800f93e:	e078      	b.n	800fa32 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	681b      	ldr	r3, [r3, #0]
 800f944:	681b      	ldr	r3, [r3, #0]
 800f946:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d01c      	beq.n	800f988 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	681b      	ldr	r3, [r3, #0]
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800f958:	2b00      	cmp	r3, #0
 800f95a:	d108      	bne.n	800f96e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f960:	2b00      	cmp	r3, #0
 800f962:	d030      	beq.n	800f9c6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f968:	6878      	ldr	r0, [r7, #4]
 800f96a:	4798      	blx	r3
 800f96c:	e02b      	b.n	800f9c6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f972:	2b00      	cmp	r3, #0
 800f974:	d027      	beq.n	800f9c6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f97a:	6878      	ldr	r0, [r7, #4]
 800f97c:	4798      	blx	r3
 800f97e:	e022      	b.n	800f9c6 <HAL_DMA_IRQHandler+0x29e>
 800f980:	20000004 	.word	0x20000004
 800f984:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	681b      	ldr	r3, [r3, #0]
 800f98c:	681b      	ldr	r3, [r3, #0]
 800f98e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f992:	2b00      	cmp	r3, #0
 800f994:	d10f      	bne.n	800f9b6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	681a      	ldr	r2, [r3, #0]
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	681b      	ldr	r3, [r3, #0]
 800f9a0:	f022 0210 	bic.w	r2, r2, #16
 800f9a4:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	2201      	movs	r2, #1
 800f9aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	2200      	movs	r2, #0
 800f9b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	d003      	beq.n	800f9c6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f9c2:	6878      	ldr	r0, [r7, #4]
 800f9c4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d032      	beq.n	800fa34 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f9d2:	f003 0301 	and.w	r3, r3, #1
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d022      	beq.n	800fa20 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	2205      	movs	r2, #5
 800f9de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	681b      	ldr	r3, [r3, #0]
 800f9e6:	681a      	ldr	r2, [r3, #0]
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	681b      	ldr	r3, [r3, #0]
 800f9ec:	f022 0201 	bic.w	r2, r2, #1
 800f9f0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800f9f2:	68bb      	ldr	r3, [r7, #8]
 800f9f4:	3301      	adds	r3, #1
 800f9f6:	60bb      	str	r3, [r7, #8]
 800f9f8:	697a      	ldr	r2, [r7, #20]
 800f9fa:	429a      	cmp	r2, r3
 800f9fc:	d307      	bcc.n	800fa0e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	681b      	ldr	r3, [r3, #0]
 800fa04:	f003 0301 	and.w	r3, r3, #1
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	d1f2      	bne.n	800f9f2 <HAL_DMA_IRQHandler+0x2ca>
 800fa0c:	e000      	b.n	800fa10 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800fa0e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	2201      	movs	r2, #1
 800fa14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	2200      	movs	r2, #0
 800fa1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	d005      	beq.n	800fa34 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fa2c:	6878      	ldr	r0, [r7, #4]
 800fa2e:	4798      	blx	r3
 800fa30:	e000      	b.n	800fa34 <HAL_DMA_IRQHandler+0x30c>
        return;
 800fa32:	bf00      	nop
    }
  }
}
 800fa34:	3718      	adds	r7, #24
 800fa36:	46bd      	mov	sp, r7
 800fa38:	bd80      	pop	{r7, pc}
 800fa3a:	bf00      	nop

0800fa3c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800fa3c:	b480      	push	{r7}
 800fa3e:	b085      	sub	sp, #20
 800fa40:	af00      	add	r7, sp, #0
 800fa42:	60f8      	str	r0, [r7, #12]
 800fa44:	60b9      	str	r1, [r7, #8]
 800fa46:	607a      	str	r2, [r7, #4]
 800fa48:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800fa4a:	68fb      	ldr	r3, [r7, #12]
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	681a      	ldr	r2, [r3, #0]
 800fa50:	68fb      	ldr	r3, [r7, #12]
 800fa52:	681b      	ldr	r3, [r3, #0]
 800fa54:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800fa58:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800fa5a:	68fb      	ldr	r3, [r7, #12]
 800fa5c:	681b      	ldr	r3, [r3, #0]
 800fa5e:	683a      	ldr	r2, [r7, #0]
 800fa60:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800fa62:	68fb      	ldr	r3, [r7, #12]
 800fa64:	689b      	ldr	r3, [r3, #8]
 800fa66:	2b40      	cmp	r3, #64	; 0x40
 800fa68:	d108      	bne.n	800fa7c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800fa6a:	68fb      	ldr	r3, [r7, #12]
 800fa6c:	681b      	ldr	r3, [r3, #0]
 800fa6e:	687a      	ldr	r2, [r7, #4]
 800fa70:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800fa72:	68fb      	ldr	r3, [r7, #12]
 800fa74:	681b      	ldr	r3, [r3, #0]
 800fa76:	68ba      	ldr	r2, [r7, #8]
 800fa78:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800fa7a:	e007      	b.n	800fa8c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	68ba      	ldr	r2, [r7, #8]
 800fa82:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800fa84:	68fb      	ldr	r3, [r7, #12]
 800fa86:	681b      	ldr	r3, [r3, #0]
 800fa88:	687a      	ldr	r2, [r7, #4]
 800fa8a:	60da      	str	r2, [r3, #12]
}
 800fa8c:	bf00      	nop
 800fa8e:	3714      	adds	r7, #20
 800fa90:	46bd      	mov	sp, r7
 800fa92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa96:	4770      	bx	lr

0800fa98 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800fa98:	b480      	push	{r7}
 800fa9a:	b085      	sub	sp, #20
 800fa9c:	af00      	add	r7, sp, #0
 800fa9e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	681b      	ldr	r3, [r3, #0]
 800faa4:	b2db      	uxtb	r3, r3
 800faa6:	3b10      	subs	r3, #16
 800faa8:	4a14      	ldr	r2, [pc, #80]	; (800fafc <DMA_CalcBaseAndBitshift+0x64>)
 800faaa:	fba2 2303 	umull	r2, r3, r2, r3
 800faae:	091b      	lsrs	r3, r3, #4
 800fab0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800fab2:	4a13      	ldr	r2, [pc, #76]	; (800fb00 <DMA_CalcBaseAndBitshift+0x68>)
 800fab4:	68fb      	ldr	r3, [r7, #12]
 800fab6:	4413      	add	r3, r2
 800fab8:	781b      	ldrb	r3, [r3, #0]
 800faba:	461a      	mov	r2, r3
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800fac0:	68fb      	ldr	r3, [r7, #12]
 800fac2:	2b03      	cmp	r3, #3
 800fac4:	d909      	bls.n	800fada <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	681b      	ldr	r3, [r3, #0]
 800faca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800face:	f023 0303 	bic.w	r3, r3, #3
 800fad2:	1d1a      	adds	r2, r3, #4
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	659a      	str	r2, [r3, #88]	; 0x58
 800fad8:	e007      	b.n	800faea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800fae2:	f023 0303 	bic.w	r3, r3, #3
 800fae6:	687a      	ldr	r2, [r7, #4]
 800fae8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800faee:	4618      	mov	r0, r3
 800faf0:	3714      	adds	r7, #20
 800faf2:	46bd      	mov	sp, r7
 800faf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faf8:	4770      	bx	lr
 800fafa:	bf00      	nop
 800fafc:	aaaaaaab 	.word	0xaaaaaaab
 800fb00:	08017ab8 	.word	0x08017ab8

0800fb04 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800fb04:	b480      	push	{r7}
 800fb06:	b085      	sub	sp, #20
 800fb08:	af00      	add	r7, sp, #0
 800fb0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800fb0c:	2300      	movs	r3, #0
 800fb0e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb14:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	699b      	ldr	r3, [r3, #24]
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d11f      	bne.n	800fb5e <DMA_CheckFifoParam+0x5a>
 800fb1e:	68bb      	ldr	r3, [r7, #8]
 800fb20:	2b03      	cmp	r3, #3
 800fb22:	d856      	bhi.n	800fbd2 <DMA_CheckFifoParam+0xce>
 800fb24:	a201      	add	r2, pc, #4	; (adr r2, 800fb2c <DMA_CheckFifoParam+0x28>)
 800fb26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb2a:	bf00      	nop
 800fb2c:	0800fb3d 	.word	0x0800fb3d
 800fb30:	0800fb4f 	.word	0x0800fb4f
 800fb34:	0800fb3d 	.word	0x0800fb3d
 800fb38:	0800fbd3 	.word	0x0800fbd3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d046      	beq.n	800fbd6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800fb48:	2301      	movs	r3, #1
 800fb4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800fb4c:	e043      	b.n	800fbd6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb52:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800fb56:	d140      	bne.n	800fbda <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800fb58:	2301      	movs	r3, #1
 800fb5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800fb5c:	e03d      	b.n	800fbda <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	699b      	ldr	r3, [r3, #24]
 800fb62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fb66:	d121      	bne.n	800fbac <DMA_CheckFifoParam+0xa8>
 800fb68:	68bb      	ldr	r3, [r7, #8]
 800fb6a:	2b03      	cmp	r3, #3
 800fb6c:	d837      	bhi.n	800fbde <DMA_CheckFifoParam+0xda>
 800fb6e:	a201      	add	r2, pc, #4	; (adr r2, 800fb74 <DMA_CheckFifoParam+0x70>)
 800fb70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb74:	0800fb85 	.word	0x0800fb85
 800fb78:	0800fb8b 	.word	0x0800fb8b
 800fb7c:	0800fb85 	.word	0x0800fb85
 800fb80:	0800fb9d 	.word	0x0800fb9d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800fb84:	2301      	movs	r3, #1
 800fb86:	73fb      	strb	r3, [r7, #15]
      break;
 800fb88:	e030      	b.n	800fbec <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	d025      	beq.n	800fbe2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800fb96:	2301      	movs	r3, #1
 800fb98:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800fb9a:	e022      	b.n	800fbe2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fba0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800fba4:	d11f      	bne.n	800fbe6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800fba6:	2301      	movs	r3, #1
 800fba8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800fbaa:	e01c      	b.n	800fbe6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800fbac:	68bb      	ldr	r3, [r7, #8]
 800fbae:	2b02      	cmp	r3, #2
 800fbb0:	d903      	bls.n	800fbba <DMA_CheckFifoParam+0xb6>
 800fbb2:	68bb      	ldr	r3, [r7, #8]
 800fbb4:	2b03      	cmp	r3, #3
 800fbb6:	d003      	beq.n	800fbc0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800fbb8:	e018      	b.n	800fbec <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800fbba:	2301      	movs	r3, #1
 800fbbc:	73fb      	strb	r3, [r7, #15]
      break;
 800fbbe:	e015      	b.n	800fbec <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbc4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d00e      	beq.n	800fbea <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800fbcc:	2301      	movs	r3, #1
 800fbce:	73fb      	strb	r3, [r7, #15]
      break;
 800fbd0:	e00b      	b.n	800fbea <DMA_CheckFifoParam+0xe6>
      break;
 800fbd2:	bf00      	nop
 800fbd4:	e00a      	b.n	800fbec <DMA_CheckFifoParam+0xe8>
      break;
 800fbd6:	bf00      	nop
 800fbd8:	e008      	b.n	800fbec <DMA_CheckFifoParam+0xe8>
      break;
 800fbda:	bf00      	nop
 800fbdc:	e006      	b.n	800fbec <DMA_CheckFifoParam+0xe8>
      break;
 800fbde:	bf00      	nop
 800fbe0:	e004      	b.n	800fbec <DMA_CheckFifoParam+0xe8>
      break;
 800fbe2:	bf00      	nop
 800fbe4:	e002      	b.n	800fbec <DMA_CheckFifoParam+0xe8>
      break;   
 800fbe6:	bf00      	nop
 800fbe8:	e000      	b.n	800fbec <DMA_CheckFifoParam+0xe8>
      break;
 800fbea:	bf00      	nop
    }
  } 
  
  return status; 
 800fbec:	7bfb      	ldrb	r3, [r7, #15]
}
 800fbee:	4618      	mov	r0, r3
 800fbf0:	3714      	adds	r7, #20
 800fbf2:	46bd      	mov	sp, r7
 800fbf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbf8:	4770      	bx	lr
 800fbfa:	bf00      	nop

0800fbfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800fbfc:	b480      	push	{r7}
 800fbfe:	b089      	sub	sp, #36	; 0x24
 800fc00:	af00      	add	r7, sp, #0
 800fc02:	6078      	str	r0, [r7, #4]
 800fc04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800fc06:	2300      	movs	r3, #0
 800fc08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800fc0a:	2300      	movs	r3, #0
 800fc0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800fc0e:	2300      	movs	r3, #0
 800fc10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800fc12:	2300      	movs	r3, #0
 800fc14:	61fb      	str	r3, [r7, #28]
 800fc16:	e16b      	b.n	800fef0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800fc18:	2201      	movs	r2, #1
 800fc1a:	69fb      	ldr	r3, [r7, #28]
 800fc1c:	fa02 f303 	lsl.w	r3, r2, r3
 800fc20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800fc22:	683b      	ldr	r3, [r7, #0]
 800fc24:	681b      	ldr	r3, [r3, #0]
 800fc26:	697a      	ldr	r2, [r7, #20]
 800fc28:	4013      	ands	r3, r2
 800fc2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800fc2c:	693a      	ldr	r2, [r7, #16]
 800fc2e:	697b      	ldr	r3, [r7, #20]
 800fc30:	429a      	cmp	r2, r3
 800fc32:	f040 815a 	bne.w	800feea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800fc36:	683b      	ldr	r3, [r7, #0]
 800fc38:	685b      	ldr	r3, [r3, #4]
 800fc3a:	f003 0303 	and.w	r3, r3, #3
 800fc3e:	2b01      	cmp	r3, #1
 800fc40:	d005      	beq.n	800fc4e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800fc42:	683b      	ldr	r3, [r7, #0]
 800fc44:	685b      	ldr	r3, [r3, #4]
 800fc46:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800fc4a:	2b02      	cmp	r3, #2
 800fc4c:	d130      	bne.n	800fcb0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	689b      	ldr	r3, [r3, #8]
 800fc52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800fc54:	69fb      	ldr	r3, [r7, #28]
 800fc56:	005b      	lsls	r3, r3, #1
 800fc58:	2203      	movs	r2, #3
 800fc5a:	fa02 f303 	lsl.w	r3, r2, r3
 800fc5e:	43db      	mvns	r3, r3
 800fc60:	69ba      	ldr	r2, [r7, #24]
 800fc62:	4013      	ands	r3, r2
 800fc64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800fc66:	683b      	ldr	r3, [r7, #0]
 800fc68:	68da      	ldr	r2, [r3, #12]
 800fc6a:	69fb      	ldr	r3, [r7, #28]
 800fc6c:	005b      	lsls	r3, r3, #1
 800fc6e:	fa02 f303 	lsl.w	r3, r2, r3
 800fc72:	69ba      	ldr	r2, [r7, #24]
 800fc74:	4313      	orrs	r3, r2
 800fc76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	69ba      	ldr	r2, [r7, #24]
 800fc7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	685b      	ldr	r3, [r3, #4]
 800fc82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800fc84:	2201      	movs	r2, #1
 800fc86:	69fb      	ldr	r3, [r7, #28]
 800fc88:	fa02 f303 	lsl.w	r3, r2, r3
 800fc8c:	43db      	mvns	r3, r3
 800fc8e:	69ba      	ldr	r2, [r7, #24]
 800fc90:	4013      	ands	r3, r2
 800fc92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800fc94:	683b      	ldr	r3, [r7, #0]
 800fc96:	685b      	ldr	r3, [r3, #4]
 800fc98:	091b      	lsrs	r3, r3, #4
 800fc9a:	f003 0201 	and.w	r2, r3, #1
 800fc9e:	69fb      	ldr	r3, [r7, #28]
 800fca0:	fa02 f303 	lsl.w	r3, r2, r3
 800fca4:	69ba      	ldr	r2, [r7, #24]
 800fca6:	4313      	orrs	r3, r2
 800fca8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	69ba      	ldr	r2, [r7, #24]
 800fcae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800fcb0:	683b      	ldr	r3, [r7, #0]
 800fcb2:	685b      	ldr	r3, [r3, #4]
 800fcb4:	f003 0303 	and.w	r3, r3, #3
 800fcb8:	2b03      	cmp	r3, #3
 800fcba:	d017      	beq.n	800fcec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	68db      	ldr	r3, [r3, #12]
 800fcc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800fcc2:	69fb      	ldr	r3, [r7, #28]
 800fcc4:	005b      	lsls	r3, r3, #1
 800fcc6:	2203      	movs	r2, #3
 800fcc8:	fa02 f303 	lsl.w	r3, r2, r3
 800fccc:	43db      	mvns	r3, r3
 800fcce:	69ba      	ldr	r2, [r7, #24]
 800fcd0:	4013      	ands	r3, r2
 800fcd2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800fcd4:	683b      	ldr	r3, [r7, #0]
 800fcd6:	689a      	ldr	r2, [r3, #8]
 800fcd8:	69fb      	ldr	r3, [r7, #28]
 800fcda:	005b      	lsls	r3, r3, #1
 800fcdc:	fa02 f303 	lsl.w	r3, r2, r3
 800fce0:	69ba      	ldr	r2, [r7, #24]
 800fce2:	4313      	orrs	r3, r2
 800fce4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	69ba      	ldr	r2, [r7, #24]
 800fcea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800fcec:	683b      	ldr	r3, [r7, #0]
 800fcee:	685b      	ldr	r3, [r3, #4]
 800fcf0:	f003 0303 	and.w	r3, r3, #3
 800fcf4:	2b02      	cmp	r3, #2
 800fcf6:	d123      	bne.n	800fd40 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800fcf8:	69fb      	ldr	r3, [r7, #28]
 800fcfa:	08da      	lsrs	r2, r3, #3
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	3208      	adds	r2, #8
 800fd00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fd04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800fd06:	69fb      	ldr	r3, [r7, #28]
 800fd08:	f003 0307 	and.w	r3, r3, #7
 800fd0c:	009b      	lsls	r3, r3, #2
 800fd0e:	220f      	movs	r2, #15
 800fd10:	fa02 f303 	lsl.w	r3, r2, r3
 800fd14:	43db      	mvns	r3, r3
 800fd16:	69ba      	ldr	r2, [r7, #24]
 800fd18:	4013      	ands	r3, r2
 800fd1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800fd1c:	683b      	ldr	r3, [r7, #0]
 800fd1e:	691a      	ldr	r2, [r3, #16]
 800fd20:	69fb      	ldr	r3, [r7, #28]
 800fd22:	f003 0307 	and.w	r3, r3, #7
 800fd26:	009b      	lsls	r3, r3, #2
 800fd28:	fa02 f303 	lsl.w	r3, r2, r3
 800fd2c:	69ba      	ldr	r2, [r7, #24]
 800fd2e:	4313      	orrs	r3, r2
 800fd30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800fd32:	69fb      	ldr	r3, [r7, #28]
 800fd34:	08da      	lsrs	r2, r3, #3
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	3208      	adds	r2, #8
 800fd3a:	69b9      	ldr	r1, [r7, #24]
 800fd3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	681b      	ldr	r3, [r3, #0]
 800fd44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800fd46:	69fb      	ldr	r3, [r7, #28]
 800fd48:	005b      	lsls	r3, r3, #1
 800fd4a:	2203      	movs	r2, #3
 800fd4c:	fa02 f303 	lsl.w	r3, r2, r3
 800fd50:	43db      	mvns	r3, r3
 800fd52:	69ba      	ldr	r2, [r7, #24]
 800fd54:	4013      	ands	r3, r2
 800fd56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800fd58:	683b      	ldr	r3, [r7, #0]
 800fd5a:	685b      	ldr	r3, [r3, #4]
 800fd5c:	f003 0203 	and.w	r2, r3, #3
 800fd60:	69fb      	ldr	r3, [r7, #28]
 800fd62:	005b      	lsls	r3, r3, #1
 800fd64:	fa02 f303 	lsl.w	r3, r2, r3
 800fd68:	69ba      	ldr	r2, [r7, #24]
 800fd6a:	4313      	orrs	r3, r2
 800fd6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	69ba      	ldr	r2, [r7, #24]
 800fd72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800fd74:	683b      	ldr	r3, [r7, #0]
 800fd76:	685b      	ldr	r3, [r3, #4]
 800fd78:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	f000 80b4 	beq.w	800feea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800fd82:	2300      	movs	r3, #0
 800fd84:	60fb      	str	r3, [r7, #12]
 800fd86:	4b60      	ldr	r3, [pc, #384]	; (800ff08 <HAL_GPIO_Init+0x30c>)
 800fd88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fd8a:	4a5f      	ldr	r2, [pc, #380]	; (800ff08 <HAL_GPIO_Init+0x30c>)
 800fd8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800fd90:	6453      	str	r3, [r2, #68]	; 0x44
 800fd92:	4b5d      	ldr	r3, [pc, #372]	; (800ff08 <HAL_GPIO_Init+0x30c>)
 800fd94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fd96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800fd9a:	60fb      	str	r3, [r7, #12]
 800fd9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800fd9e:	4a5b      	ldr	r2, [pc, #364]	; (800ff0c <HAL_GPIO_Init+0x310>)
 800fda0:	69fb      	ldr	r3, [r7, #28]
 800fda2:	089b      	lsrs	r3, r3, #2
 800fda4:	3302      	adds	r3, #2
 800fda6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fdaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800fdac:	69fb      	ldr	r3, [r7, #28]
 800fdae:	f003 0303 	and.w	r3, r3, #3
 800fdb2:	009b      	lsls	r3, r3, #2
 800fdb4:	220f      	movs	r2, #15
 800fdb6:	fa02 f303 	lsl.w	r3, r2, r3
 800fdba:	43db      	mvns	r3, r3
 800fdbc:	69ba      	ldr	r2, [r7, #24]
 800fdbe:	4013      	ands	r3, r2
 800fdc0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	4a52      	ldr	r2, [pc, #328]	; (800ff10 <HAL_GPIO_Init+0x314>)
 800fdc6:	4293      	cmp	r3, r2
 800fdc8:	d02b      	beq.n	800fe22 <HAL_GPIO_Init+0x226>
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	4a51      	ldr	r2, [pc, #324]	; (800ff14 <HAL_GPIO_Init+0x318>)
 800fdce:	4293      	cmp	r3, r2
 800fdd0:	d025      	beq.n	800fe1e <HAL_GPIO_Init+0x222>
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	4a50      	ldr	r2, [pc, #320]	; (800ff18 <HAL_GPIO_Init+0x31c>)
 800fdd6:	4293      	cmp	r3, r2
 800fdd8:	d01f      	beq.n	800fe1a <HAL_GPIO_Init+0x21e>
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	4a4f      	ldr	r2, [pc, #316]	; (800ff1c <HAL_GPIO_Init+0x320>)
 800fdde:	4293      	cmp	r3, r2
 800fde0:	d019      	beq.n	800fe16 <HAL_GPIO_Init+0x21a>
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	4a4e      	ldr	r2, [pc, #312]	; (800ff20 <HAL_GPIO_Init+0x324>)
 800fde6:	4293      	cmp	r3, r2
 800fde8:	d013      	beq.n	800fe12 <HAL_GPIO_Init+0x216>
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	4a4d      	ldr	r2, [pc, #308]	; (800ff24 <HAL_GPIO_Init+0x328>)
 800fdee:	4293      	cmp	r3, r2
 800fdf0:	d00d      	beq.n	800fe0e <HAL_GPIO_Init+0x212>
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	4a4c      	ldr	r2, [pc, #304]	; (800ff28 <HAL_GPIO_Init+0x32c>)
 800fdf6:	4293      	cmp	r3, r2
 800fdf8:	d007      	beq.n	800fe0a <HAL_GPIO_Init+0x20e>
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	4a4b      	ldr	r2, [pc, #300]	; (800ff2c <HAL_GPIO_Init+0x330>)
 800fdfe:	4293      	cmp	r3, r2
 800fe00:	d101      	bne.n	800fe06 <HAL_GPIO_Init+0x20a>
 800fe02:	2307      	movs	r3, #7
 800fe04:	e00e      	b.n	800fe24 <HAL_GPIO_Init+0x228>
 800fe06:	2308      	movs	r3, #8
 800fe08:	e00c      	b.n	800fe24 <HAL_GPIO_Init+0x228>
 800fe0a:	2306      	movs	r3, #6
 800fe0c:	e00a      	b.n	800fe24 <HAL_GPIO_Init+0x228>
 800fe0e:	2305      	movs	r3, #5
 800fe10:	e008      	b.n	800fe24 <HAL_GPIO_Init+0x228>
 800fe12:	2304      	movs	r3, #4
 800fe14:	e006      	b.n	800fe24 <HAL_GPIO_Init+0x228>
 800fe16:	2303      	movs	r3, #3
 800fe18:	e004      	b.n	800fe24 <HAL_GPIO_Init+0x228>
 800fe1a:	2302      	movs	r3, #2
 800fe1c:	e002      	b.n	800fe24 <HAL_GPIO_Init+0x228>
 800fe1e:	2301      	movs	r3, #1
 800fe20:	e000      	b.n	800fe24 <HAL_GPIO_Init+0x228>
 800fe22:	2300      	movs	r3, #0
 800fe24:	69fa      	ldr	r2, [r7, #28]
 800fe26:	f002 0203 	and.w	r2, r2, #3
 800fe2a:	0092      	lsls	r2, r2, #2
 800fe2c:	4093      	lsls	r3, r2
 800fe2e:	69ba      	ldr	r2, [r7, #24]
 800fe30:	4313      	orrs	r3, r2
 800fe32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800fe34:	4935      	ldr	r1, [pc, #212]	; (800ff0c <HAL_GPIO_Init+0x310>)
 800fe36:	69fb      	ldr	r3, [r7, #28]
 800fe38:	089b      	lsrs	r3, r3, #2
 800fe3a:	3302      	adds	r3, #2
 800fe3c:	69ba      	ldr	r2, [r7, #24]
 800fe3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800fe42:	4b3b      	ldr	r3, [pc, #236]	; (800ff30 <HAL_GPIO_Init+0x334>)
 800fe44:	681b      	ldr	r3, [r3, #0]
 800fe46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800fe48:	693b      	ldr	r3, [r7, #16]
 800fe4a:	43db      	mvns	r3, r3
 800fe4c:	69ba      	ldr	r2, [r7, #24]
 800fe4e:	4013      	ands	r3, r2
 800fe50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800fe52:	683b      	ldr	r3, [r7, #0]
 800fe54:	685b      	ldr	r3, [r3, #4]
 800fe56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d003      	beq.n	800fe66 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800fe5e:	69ba      	ldr	r2, [r7, #24]
 800fe60:	693b      	ldr	r3, [r7, #16]
 800fe62:	4313      	orrs	r3, r2
 800fe64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800fe66:	4a32      	ldr	r2, [pc, #200]	; (800ff30 <HAL_GPIO_Init+0x334>)
 800fe68:	69bb      	ldr	r3, [r7, #24]
 800fe6a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800fe6c:	4b30      	ldr	r3, [pc, #192]	; (800ff30 <HAL_GPIO_Init+0x334>)
 800fe6e:	685b      	ldr	r3, [r3, #4]
 800fe70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800fe72:	693b      	ldr	r3, [r7, #16]
 800fe74:	43db      	mvns	r3, r3
 800fe76:	69ba      	ldr	r2, [r7, #24]
 800fe78:	4013      	ands	r3, r2
 800fe7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800fe7c:	683b      	ldr	r3, [r7, #0]
 800fe7e:	685b      	ldr	r3, [r3, #4]
 800fe80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	d003      	beq.n	800fe90 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800fe88:	69ba      	ldr	r2, [r7, #24]
 800fe8a:	693b      	ldr	r3, [r7, #16]
 800fe8c:	4313      	orrs	r3, r2
 800fe8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800fe90:	4a27      	ldr	r2, [pc, #156]	; (800ff30 <HAL_GPIO_Init+0x334>)
 800fe92:	69bb      	ldr	r3, [r7, #24]
 800fe94:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800fe96:	4b26      	ldr	r3, [pc, #152]	; (800ff30 <HAL_GPIO_Init+0x334>)
 800fe98:	689b      	ldr	r3, [r3, #8]
 800fe9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800fe9c:	693b      	ldr	r3, [r7, #16]
 800fe9e:	43db      	mvns	r3, r3
 800fea0:	69ba      	ldr	r2, [r7, #24]
 800fea2:	4013      	ands	r3, r2
 800fea4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800fea6:	683b      	ldr	r3, [r7, #0]
 800fea8:	685b      	ldr	r3, [r3, #4]
 800feaa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d003      	beq.n	800feba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800feb2:	69ba      	ldr	r2, [r7, #24]
 800feb4:	693b      	ldr	r3, [r7, #16]
 800feb6:	4313      	orrs	r3, r2
 800feb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800feba:	4a1d      	ldr	r2, [pc, #116]	; (800ff30 <HAL_GPIO_Init+0x334>)
 800febc:	69bb      	ldr	r3, [r7, #24]
 800febe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800fec0:	4b1b      	ldr	r3, [pc, #108]	; (800ff30 <HAL_GPIO_Init+0x334>)
 800fec2:	68db      	ldr	r3, [r3, #12]
 800fec4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800fec6:	693b      	ldr	r3, [r7, #16]
 800fec8:	43db      	mvns	r3, r3
 800feca:	69ba      	ldr	r2, [r7, #24]
 800fecc:	4013      	ands	r3, r2
 800fece:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800fed0:	683b      	ldr	r3, [r7, #0]
 800fed2:	685b      	ldr	r3, [r3, #4]
 800fed4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800fed8:	2b00      	cmp	r3, #0
 800feda:	d003      	beq.n	800fee4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800fedc:	69ba      	ldr	r2, [r7, #24]
 800fede:	693b      	ldr	r3, [r7, #16]
 800fee0:	4313      	orrs	r3, r2
 800fee2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800fee4:	4a12      	ldr	r2, [pc, #72]	; (800ff30 <HAL_GPIO_Init+0x334>)
 800fee6:	69bb      	ldr	r3, [r7, #24]
 800fee8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800feea:	69fb      	ldr	r3, [r7, #28]
 800feec:	3301      	adds	r3, #1
 800feee:	61fb      	str	r3, [r7, #28]
 800fef0:	69fb      	ldr	r3, [r7, #28]
 800fef2:	2b0f      	cmp	r3, #15
 800fef4:	f67f ae90 	bls.w	800fc18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800fef8:	bf00      	nop
 800fefa:	bf00      	nop
 800fefc:	3724      	adds	r7, #36	; 0x24
 800fefe:	46bd      	mov	sp, r7
 800ff00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff04:	4770      	bx	lr
 800ff06:	bf00      	nop
 800ff08:	40023800 	.word	0x40023800
 800ff0c:	40013800 	.word	0x40013800
 800ff10:	40020000 	.word	0x40020000
 800ff14:	40020400 	.word	0x40020400
 800ff18:	40020800 	.word	0x40020800
 800ff1c:	40020c00 	.word	0x40020c00
 800ff20:	40021000 	.word	0x40021000
 800ff24:	40021400 	.word	0x40021400
 800ff28:	40021800 	.word	0x40021800
 800ff2c:	40021c00 	.word	0x40021c00
 800ff30:	40013c00 	.word	0x40013c00

0800ff34 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800ff34:	b480      	push	{r7}
 800ff36:	b085      	sub	sp, #20
 800ff38:	af00      	add	r7, sp, #0
 800ff3a:	6078      	str	r0, [r7, #4]
 800ff3c:	460b      	mov	r3, r1
 800ff3e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	691a      	ldr	r2, [r3, #16]
 800ff44:	887b      	ldrh	r3, [r7, #2]
 800ff46:	4013      	ands	r3, r2
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	d002      	beq.n	800ff52 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800ff4c:	2301      	movs	r3, #1
 800ff4e:	73fb      	strb	r3, [r7, #15]
 800ff50:	e001      	b.n	800ff56 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800ff52:	2300      	movs	r3, #0
 800ff54:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800ff56:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff58:	4618      	mov	r0, r3
 800ff5a:	3714      	adds	r7, #20
 800ff5c:	46bd      	mov	sp, r7
 800ff5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff62:	4770      	bx	lr

0800ff64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800ff64:	b480      	push	{r7}
 800ff66:	b083      	sub	sp, #12
 800ff68:	af00      	add	r7, sp, #0
 800ff6a:	6078      	str	r0, [r7, #4]
 800ff6c:	460b      	mov	r3, r1
 800ff6e:	807b      	strh	r3, [r7, #2]
 800ff70:	4613      	mov	r3, r2
 800ff72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800ff74:	787b      	ldrb	r3, [r7, #1]
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d003      	beq.n	800ff82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800ff7a:	887a      	ldrh	r2, [r7, #2]
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800ff80:	e003      	b.n	800ff8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800ff82:	887b      	ldrh	r3, [r7, #2]
 800ff84:	041a      	lsls	r2, r3, #16
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	619a      	str	r2, [r3, #24]
}
 800ff8a:	bf00      	nop
 800ff8c:	370c      	adds	r7, #12
 800ff8e:	46bd      	mov	sp, r7
 800ff90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff94:	4770      	bx	lr

0800ff96 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800ff96:	b480      	push	{r7}
 800ff98:	b083      	sub	sp, #12
 800ff9a:	af00      	add	r7, sp, #0
 800ff9c:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	681b      	ldr	r3, [r3, #0]
 800ffa2:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800ffa6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800ffa8:	2300      	movs	r3, #0
}
 800ffaa:	4618      	mov	r0, r3
 800ffac:	370c      	adds	r7, #12
 800ffae:	46bd      	mov	sp, r7
 800ffb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffb4:	4770      	bx	lr
	...

0800ffb8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ffb8:	b580      	push	{r7, lr}
 800ffba:	b086      	sub	sp, #24
 800ffbc:	af00      	add	r7, sp, #0
 800ffbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	2b00      	cmp	r3, #0
 800ffc4:	d101      	bne.n	800ffca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ffc6:	2301      	movs	r3, #1
 800ffc8:	e264      	b.n	8010494 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	681b      	ldr	r3, [r3, #0]
 800ffce:	f003 0301 	and.w	r3, r3, #1
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	d075      	beq.n	80100c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800ffd6:	4ba3      	ldr	r3, [pc, #652]	; (8010264 <HAL_RCC_OscConfig+0x2ac>)
 800ffd8:	689b      	ldr	r3, [r3, #8]
 800ffda:	f003 030c 	and.w	r3, r3, #12
 800ffde:	2b04      	cmp	r3, #4
 800ffe0:	d00c      	beq.n	800fffc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ffe2:	4ba0      	ldr	r3, [pc, #640]	; (8010264 <HAL_RCC_OscConfig+0x2ac>)
 800ffe4:	689b      	ldr	r3, [r3, #8]
 800ffe6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800ffea:	2b08      	cmp	r3, #8
 800ffec:	d112      	bne.n	8010014 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ffee:	4b9d      	ldr	r3, [pc, #628]	; (8010264 <HAL_RCC_OscConfig+0x2ac>)
 800fff0:	685b      	ldr	r3, [r3, #4]
 800fff2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800fff6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800fffa:	d10b      	bne.n	8010014 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800fffc:	4b99      	ldr	r3, [pc, #612]	; (8010264 <HAL_RCC_OscConfig+0x2ac>)
 800fffe:	681b      	ldr	r3, [r3, #0]
 8010000:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010004:	2b00      	cmp	r3, #0
 8010006:	d05b      	beq.n	80100c0 <HAL_RCC_OscConfig+0x108>
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	685b      	ldr	r3, [r3, #4]
 801000c:	2b00      	cmp	r3, #0
 801000e:	d157      	bne.n	80100c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8010010:	2301      	movs	r3, #1
 8010012:	e23f      	b.n	8010494 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	685b      	ldr	r3, [r3, #4]
 8010018:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801001c:	d106      	bne.n	801002c <HAL_RCC_OscConfig+0x74>
 801001e:	4b91      	ldr	r3, [pc, #580]	; (8010264 <HAL_RCC_OscConfig+0x2ac>)
 8010020:	681b      	ldr	r3, [r3, #0]
 8010022:	4a90      	ldr	r2, [pc, #576]	; (8010264 <HAL_RCC_OscConfig+0x2ac>)
 8010024:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010028:	6013      	str	r3, [r2, #0]
 801002a:	e01d      	b.n	8010068 <HAL_RCC_OscConfig+0xb0>
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	685b      	ldr	r3, [r3, #4]
 8010030:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8010034:	d10c      	bne.n	8010050 <HAL_RCC_OscConfig+0x98>
 8010036:	4b8b      	ldr	r3, [pc, #556]	; (8010264 <HAL_RCC_OscConfig+0x2ac>)
 8010038:	681b      	ldr	r3, [r3, #0]
 801003a:	4a8a      	ldr	r2, [pc, #552]	; (8010264 <HAL_RCC_OscConfig+0x2ac>)
 801003c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8010040:	6013      	str	r3, [r2, #0]
 8010042:	4b88      	ldr	r3, [pc, #544]	; (8010264 <HAL_RCC_OscConfig+0x2ac>)
 8010044:	681b      	ldr	r3, [r3, #0]
 8010046:	4a87      	ldr	r2, [pc, #540]	; (8010264 <HAL_RCC_OscConfig+0x2ac>)
 8010048:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801004c:	6013      	str	r3, [r2, #0]
 801004e:	e00b      	b.n	8010068 <HAL_RCC_OscConfig+0xb0>
 8010050:	4b84      	ldr	r3, [pc, #528]	; (8010264 <HAL_RCC_OscConfig+0x2ac>)
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	4a83      	ldr	r2, [pc, #524]	; (8010264 <HAL_RCC_OscConfig+0x2ac>)
 8010056:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801005a:	6013      	str	r3, [r2, #0]
 801005c:	4b81      	ldr	r3, [pc, #516]	; (8010264 <HAL_RCC_OscConfig+0x2ac>)
 801005e:	681b      	ldr	r3, [r3, #0]
 8010060:	4a80      	ldr	r2, [pc, #512]	; (8010264 <HAL_RCC_OscConfig+0x2ac>)
 8010062:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8010066:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	685b      	ldr	r3, [r3, #4]
 801006c:	2b00      	cmp	r3, #0
 801006e:	d013      	beq.n	8010098 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010070:	f7fe f8d6 	bl	800e220 <HAL_GetTick>
 8010074:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010076:	e008      	b.n	801008a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8010078:	f7fe f8d2 	bl	800e220 <HAL_GetTick>
 801007c:	4602      	mov	r2, r0
 801007e:	693b      	ldr	r3, [r7, #16]
 8010080:	1ad3      	subs	r3, r2, r3
 8010082:	2b64      	cmp	r3, #100	; 0x64
 8010084:	d901      	bls.n	801008a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8010086:	2303      	movs	r3, #3
 8010088:	e204      	b.n	8010494 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801008a:	4b76      	ldr	r3, [pc, #472]	; (8010264 <HAL_RCC_OscConfig+0x2ac>)
 801008c:	681b      	ldr	r3, [r3, #0]
 801008e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010092:	2b00      	cmp	r3, #0
 8010094:	d0f0      	beq.n	8010078 <HAL_RCC_OscConfig+0xc0>
 8010096:	e014      	b.n	80100c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010098:	f7fe f8c2 	bl	800e220 <HAL_GetTick>
 801009c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801009e:	e008      	b.n	80100b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80100a0:	f7fe f8be 	bl	800e220 <HAL_GetTick>
 80100a4:	4602      	mov	r2, r0
 80100a6:	693b      	ldr	r3, [r7, #16]
 80100a8:	1ad3      	subs	r3, r2, r3
 80100aa:	2b64      	cmp	r3, #100	; 0x64
 80100ac:	d901      	bls.n	80100b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80100ae:	2303      	movs	r3, #3
 80100b0:	e1f0      	b.n	8010494 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80100b2:	4b6c      	ldr	r3, [pc, #432]	; (8010264 <HAL_RCC_OscConfig+0x2ac>)
 80100b4:	681b      	ldr	r3, [r3, #0]
 80100b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d1f0      	bne.n	80100a0 <HAL_RCC_OscConfig+0xe8>
 80100be:	e000      	b.n	80100c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80100c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	681b      	ldr	r3, [r3, #0]
 80100c6:	f003 0302 	and.w	r3, r3, #2
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	d063      	beq.n	8010196 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80100ce:	4b65      	ldr	r3, [pc, #404]	; (8010264 <HAL_RCC_OscConfig+0x2ac>)
 80100d0:	689b      	ldr	r3, [r3, #8]
 80100d2:	f003 030c 	and.w	r3, r3, #12
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	d00b      	beq.n	80100f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80100da:	4b62      	ldr	r3, [pc, #392]	; (8010264 <HAL_RCC_OscConfig+0x2ac>)
 80100dc:	689b      	ldr	r3, [r3, #8]
 80100de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80100e2:	2b08      	cmp	r3, #8
 80100e4:	d11c      	bne.n	8010120 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80100e6:	4b5f      	ldr	r3, [pc, #380]	; (8010264 <HAL_RCC_OscConfig+0x2ac>)
 80100e8:	685b      	ldr	r3, [r3, #4]
 80100ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	d116      	bne.n	8010120 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80100f2:	4b5c      	ldr	r3, [pc, #368]	; (8010264 <HAL_RCC_OscConfig+0x2ac>)
 80100f4:	681b      	ldr	r3, [r3, #0]
 80100f6:	f003 0302 	and.w	r3, r3, #2
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	d005      	beq.n	801010a <HAL_RCC_OscConfig+0x152>
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	68db      	ldr	r3, [r3, #12]
 8010102:	2b01      	cmp	r3, #1
 8010104:	d001      	beq.n	801010a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8010106:	2301      	movs	r3, #1
 8010108:	e1c4      	b.n	8010494 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801010a:	4b56      	ldr	r3, [pc, #344]	; (8010264 <HAL_RCC_OscConfig+0x2ac>)
 801010c:	681b      	ldr	r3, [r3, #0]
 801010e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	691b      	ldr	r3, [r3, #16]
 8010116:	00db      	lsls	r3, r3, #3
 8010118:	4952      	ldr	r1, [pc, #328]	; (8010264 <HAL_RCC_OscConfig+0x2ac>)
 801011a:	4313      	orrs	r3, r2
 801011c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801011e:	e03a      	b.n	8010196 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	68db      	ldr	r3, [r3, #12]
 8010124:	2b00      	cmp	r3, #0
 8010126:	d020      	beq.n	801016a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8010128:	4b4f      	ldr	r3, [pc, #316]	; (8010268 <HAL_RCC_OscConfig+0x2b0>)
 801012a:	2201      	movs	r2, #1
 801012c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801012e:	f7fe f877 	bl	800e220 <HAL_GetTick>
 8010132:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010134:	e008      	b.n	8010148 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8010136:	f7fe f873 	bl	800e220 <HAL_GetTick>
 801013a:	4602      	mov	r2, r0
 801013c:	693b      	ldr	r3, [r7, #16]
 801013e:	1ad3      	subs	r3, r2, r3
 8010140:	2b02      	cmp	r3, #2
 8010142:	d901      	bls.n	8010148 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8010144:	2303      	movs	r3, #3
 8010146:	e1a5      	b.n	8010494 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010148:	4b46      	ldr	r3, [pc, #280]	; (8010264 <HAL_RCC_OscConfig+0x2ac>)
 801014a:	681b      	ldr	r3, [r3, #0]
 801014c:	f003 0302 	and.w	r3, r3, #2
 8010150:	2b00      	cmp	r3, #0
 8010152:	d0f0      	beq.n	8010136 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010154:	4b43      	ldr	r3, [pc, #268]	; (8010264 <HAL_RCC_OscConfig+0x2ac>)
 8010156:	681b      	ldr	r3, [r3, #0]
 8010158:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	691b      	ldr	r3, [r3, #16]
 8010160:	00db      	lsls	r3, r3, #3
 8010162:	4940      	ldr	r1, [pc, #256]	; (8010264 <HAL_RCC_OscConfig+0x2ac>)
 8010164:	4313      	orrs	r3, r2
 8010166:	600b      	str	r3, [r1, #0]
 8010168:	e015      	b.n	8010196 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801016a:	4b3f      	ldr	r3, [pc, #252]	; (8010268 <HAL_RCC_OscConfig+0x2b0>)
 801016c:	2200      	movs	r2, #0
 801016e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010170:	f7fe f856 	bl	800e220 <HAL_GetTick>
 8010174:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8010176:	e008      	b.n	801018a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8010178:	f7fe f852 	bl	800e220 <HAL_GetTick>
 801017c:	4602      	mov	r2, r0
 801017e:	693b      	ldr	r3, [r7, #16]
 8010180:	1ad3      	subs	r3, r2, r3
 8010182:	2b02      	cmp	r3, #2
 8010184:	d901      	bls.n	801018a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8010186:	2303      	movs	r3, #3
 8010188:	e184      	b.n	8010494 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801018a:	4b36      	ldr	r3, [pc, #216]	; (8010264 <HAL_RCC_OscConfig+0x2ac>)
 801018c:	681b      	ldr	r3, [r3, #0]
 801018e:	f003 0302 	and.w	r3, r3, #2
 8010192:	2b00      	cmp	r3, #0
 8010194:	d1f0      	bne.n	8010178 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	681b      	ldr	r3, [r3, #0]
 801019a:	f003 0308 	and.w	r3, r3, #8
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d030      	beq.n	8010204 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	695b      	ldr	r3, [r3, #20]
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d016      	beq.n	80101d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80101aa:	4b30      	ldr	r3, [pc, #192]	; (801026c <HAL_RCC_OscConfig+0x2b4>)
 80101ac:	2201      	movs	r2, #1
 80101ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80101b0:	f7fe f836 	bl	800e220 <HAL_GetTick>
 80101b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80101b6:	e008      	b.n	80101ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80101b8:	f7fe f832 	bl	800e220 <HAL_GetTick>
 80101bc:	4602      	mov	r2, r0
 80101be:	693b      	ldr	r3, [r7, #16]
 80101c0:	1ad3      	subs	r3, r2, r3
 80101c2:	2b02      	cmp	r3, #2
 80101c4:	d901      	bls.n	80101ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80101c6:	2303      	movs	r3, #3
 80101c8:	e164      	b.n	8010494 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80101ca:	4b26      	ldr	r3, [pc, #152]	; (8010264 <HAL_RCC_OscConfig+0x2ac>)
 80101cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80101ce:	f003 0302 	and.w	r3, r3, #2
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	d0f0      	beq.n	80101b8 <HAL_RCC_OscConfig+0x200>
 80101d6:	e015      	b.n	8010204 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80101d8:	4b24      	ldr	r3, [pc, #144]	; (801026c <HAL_RCC_OscConfig+0x2b4>)
 80101da:	2200      	movs	r2, #0
 80101dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80101de:	f7fe f81f 	bl	800e220 <HAL_GetTick>
 80101e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80101e4:	e008      	b.n	80101f8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80101e6:	f7fe f81b 	bl	800e220 <HAL_GetTick>
 80101ea:	4602      	mov	r2, r0
 80101ec:	693b      	ldr	r3, [r7, #16]
 80101ee:	1ad3      	subs	r3, r2, r3
 80101f0:	2b02      	cmp	r3, #2
 80101f2:	d901      	bls.n	80101f8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80101f4:	2303      	movs	r3, #3
 80101f6:	e14d      	b.n	8010494 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80101f8:	4b1a      	ldr	r3, [pc, #104]	; (8010264 <HAL_RCC_OscConfig+0x2ac>)
 80101fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80101fc:	f003 0302 	and.w	r3, r3, #2
 8010200:	2b00      	cmp	r3, #0
 8010202:	d1f0      	bne.n	80101e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	681b      	ldr	r3, [r3, #0]
 8010208:	f003 0304 	and.w	r3, r3, #4
 801020c:	2b00      	cmp	r3, #0
 801020e:	f000 80a0 	beq.w	8010352 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8010212:	2300      	movs	r3, #0
 8010214:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8010216:	4b13      	ldr	r3, [pc, #76]	; (8010264 <HAL_RCC_OscConfig+0x2ac>)
 8010218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801021a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801021e:	2b00      	cmp	r3, #0
 8010220:	d10f      	bne.n	8010242 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8010222:	2300      	movs	r3, #0
 8010224:	60bb      	str	r3, [r7, #8]
 8010226:	4b0f      	ldr	r3, [pc, #60]	; (8010264 <HAL_RCC_OscConfig+0x2ac>)
 8010228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801022a:	4a0e      	ldr	r2, [pc, #56]	; (8010264 <HAL_RCC_OscConfig+0x2ac>)
 801022c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010230:	6413      	str	r3, [r2, #64]	; 0x40
 8010232:	4b0c      	ldr	r3, [pc, #48]	; (8010264 <HAL_RCC_OscConfig+0x2ac>)
 8010234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801023a:	60bb      	str	r3, [r7, #8]
 801023c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801023e:	2301      	movs	r3, #1
 8010240:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8010242:	4b0b      	ldr	r3, [pc, #44]	; (8010270 <HAL_RCC_OscConfig+0x2b8>)
 8010244:	681b      	ldr	r3, [r3, #0]
 8010246:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801024a:	2b00      	cmp	r3, #0
 801024c:	d121      	bne.n	8010292 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801024e:	4b08      	ldr	r3, [pc, #32]	; (8010270 <HAL_RCC_OscConfig+0x2b8>)
 8010250:	681b      	ldr	r3, [r3, #0]
 8010252:	4a07      	ldr	r2, [pc, #28]	; (8010270 <HAL_RCC_OscConfig+0x2b8>)
 8010254:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010258:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801025a:	f7fd ffe1 	bl	800e220 <HAL_GetTick>
 801025e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8010260:	e011      	b.n	8010286 <HAL_RCC_OscConfig+0x2ce>
 8010262:	bf00      	nop
 8010264:	40023800 	.word	0x40023800
 8010268:	42470000 	.word	0x42470000
 801026c:	42470e80 	.word	0x42470e80
 8010270:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8010274:	f7fd ffd4 	bl	800e220 <HAL_GetTick>
 8010278:	4602      	mov	r2, r0
 801027a:	693b      	ldr	r3, [r7, #16]
 801027c:	1ad3      	subs	r3, r2, r3
 801027e:	2b02      	cmp	r3, #2
 8010280:	d901      	bls.n	8010286 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8010282:	2303      	movs	r3, #3
 8010284:	e106      	b.n	8010494 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8010286:	4b85      	ldr	r3, [pc, #532]	; (801049c <HAL_RCC_OscConfig+0x4e4>)
 8010288:	681b      	ldr	r3, [r3, #0]
 801028a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801028e:	2b00      	cmp	r3, #0
 8010290:	d0f0      	beq.n	8010274 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	689b      	ldr	r3, [r3, #8]
 8010296:	2b01      	cmp	r3, #1
 8010298:	d106      	bne.n	80102a8 <HAL_RCC_OscConfig+0x2f0>
 801029a:	4b81      	ldr	r3, [pc, #516]	; (80104a0 <HAL_RCC_OscConfig+0x4e8>)
 801029c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801029e:	4a80      	ldr	r2, [pc, #512]	; (80104a0 <HAL_RCC_OscConfig+0x4e8>)
 80102a0:	f043 0301 	orr.w	r3, r3, #1
 80102a4:	6713      	str	r3, [r2, #112]	; 0x70
 80102a6:	e01c      	b.n	80102e2 <HAL_RCC_OscConfig+0x32a>
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	689b      	ldr	r3, [r3, #8]
 80102ac:	2b05      	cmp	r3, #5
 80102ae:	d10c      	bne.n	80102ca <HAL_RCC_OscConfig+0x312>
 80102b0:	4b7b      	ldr	r3, [pc, #492]	; (80104a0 <HAL_RCC_OscConfig+0x4e8>)
 80102b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80102b4:	4a7a      	ldr	r2, [pc, #488]	; (80104a0 <HAL_RCC_OscConfig+0x4e8>)
 80102b6:	f043 0304 	orr.w	r3, r3, #4
 80102ba:	6713      	str	r3, [r2, #112]	; 0x70
 80102bc:	4b78      	ldr	r3, [pc, #480]	; (80104a0 <HAL_RCC_OscConfig+0x4e8>)
 80102be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80102c0:	4a77      	ldr	r2, [pc, #476]	; (80104a0 <HAL_RCC_OscConfig+0x4e8>)
 80102c2:	f043 0301 	orr.w	r3, r3, #1
 80102c6:	6713      	str	r3, [r2, #112]	; 0x70
 80102c8:	e00b      	b.n	80102e2 <HAL_RCC_OscConfig+0x32a>
 80102ca:	4b75      	ldr	r3, [pc, #468]	; (80104a0 <HAL_RCC_OscConfig+0x4e8>)
 80102cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80102ce:	4a74      	ldr	r2, [pc, #464]	; (80104a0 <HAL_RCC_OscConfig+0x4e8>)
 80102d0:	f023 0301 	bic.w	r3, r3, #1
 80102d4:	6713      	str	r3, [r2, #112]	; 0x70
 80102d6:	4b72      	ldr	r3, [pc, #456]	; (80104a0 <HAL_RCC_OscConfig+0x4e8>)
 80102d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80102da:	4a71      	ldr	r2, [pc, #452]	; (80104a0 <HAL_RCC_OscConfig+0x4e8>)
 80102dc:	f023 0304 	bic.w	r3, r3, #4
 80102e0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	689b      	ldr	r3, [r3, #8]
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d015      	beq.n	8010316 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80102ea:	f7fd ff99 	bl	800e220 <HAL_GetTick>
 80102ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80102f0:	e00a      	b.n	8010308 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80102f2:	f7fd ff95 	bl	800e220 <HAL_GetTick>
 80102f6:	4602      	mov	r2, r0
 80102f8:	693b      	ldr	r3, [r7, #16]
 80102fa:	1ad3      	subs	r3, r2, r3
 80102fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8010300:	4293      	cmp	r3, r2
 8010302:	d901      	bls.n	8010308 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8010304:	2303      	movs	r3, #3
 8010306:	e0c5      	b.n	8010494 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8010308:	4b65      	ldr	r3, [pc, #404]	; (80104a0 <HAL_RCC_OscConfig+0x4e8>)
 801030a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801030c:	f003 0302 	and.w	r3, r3, #2
 8010310:	2b00      	cmp	r3, #0
 8010312:	d0ee      	beq.n	80102f2 <HAL_RCC_OscConfig+0x33a>
 8010314:	e014      	b.n	8010340 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8010316:	f7fd ff83 	bl	800e220 <HAL_GetTick>
 801031a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801031c:	e00a      	b.n	8010334 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801031e:	f7fd ff7f 	bl	800e220 <HAL_GetTick>
 8010322:	4602      	mov	r2, r0
 8010324:	693b      	ldr	r3, [r7, #16]
 8010326:	1ad3      	subs	r3, r2, r3
 8010328:	f241 3288 	movw	r2, #5000	; 0x1388
 801032c:	4293      	cmp	r3, r2
 801032e:	d901      	bls.n	8010334 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8010330:	2303      	movs	r3, #3
 8010332:	e0af      	b.n	8010494 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8010334:	4b5a      	ldr	r3, [pc, #360]	; (80104a0 <HAL_RCC_OscConfig+0x4e8>)
 8010336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010338:	f003 0302 	and.w	r3, r3, #2
 801033c:	2b00      	cmp	r3, #0
 801033e:	d1ee      	bne.n	801031e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8010340:	7dfb      	ldrb	r3, [r7, #23]
 8010342:	2b01      	cmp	r3, #1
 8010344:	d105      	bne.n	8010352 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8010346:	4b56      	ldr	r3, [pc, #344]	; (80104a0 <HAL_RCC_OscConfig+0x4e8>)
 8010348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801034a:	4a55      	ldr	r2, [pc, #340]	; (80104a0 <HAL_RCC_OscConfig+0x4e8>)
 801034c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010350:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	699b      	ldr	r3, [r3, #24]
 8010356:	2b00      	cmp	r3, #0
 8010358:	f000 809b 	beq.w	8010492 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 801035c:	4b50      	ldr	r3, [pc, #320]	; (80104a0 <HAL_RCC_OscConfig+0x4e8>)
 801035e:	689b      	ldr	r3, [r3, #8]
 8010360:	f003 030c 	and.w	r3, r3, #12
 8010364:	2b08      	cmp	r3, #8
 8010366:	d05c      	beq.n	8010422 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	699b      	ldr	r3, [r3, #24]
 801036c:	2b02      	cmp	r3, #2
 801036e:	d141      	bne.n	80103f4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8010370:	4b4c      	ldr	r3, [pc, #304]	; (80104a4 <HAL_RCC_OscConfig+0x4ec>)
 8010372:	2200      	movs	r2, #0
 8010374:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010376:	f7fd ff53 	bl	800e220 <HAL_GetTick>
 801037a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801037c:	e008      	b.n	8010390 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801037e:	f7fd ff4f 	bl	800e220 <HAL_GetTick>
 8010382:	4602      	mov	r2, r0
 8010384:	693b      	ldr	r3, [r7, #16]
 8010386:	1ad3      	subs	r3, r2, r3
 8010388:	2b02      	cmp	r3, #2
 801038a:	d901      	bls.n	8010390 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 801038c:	2303      	movs	r3, #3
 801038e:	e081      	b.n	8010494 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8010390:	4b43      	ldr	r3, [pc, #268]	; (80104a0 <HAL_RCC_OscConfig+0x4e8>)
 8010392:	681b      	ldr	r3, [r3, #0]
 8010394:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010398:	2b00      	cmp	r3, #0
 801039a:	d1f0      	bne.n	801037e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	69da      	ldr	r2, [r3, #28]
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	6a1b      	ldr	r3, [r3, #32]
 80103a4:	431a      	orrs	r2, r3
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103aa:	019b      	lsls	r3, r3, #6
 80103ac:	431a      	orrs	r2, r3
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80103b2:	085b      	lsrs	r3, r3, #1
 80103b4:	3b01      	subs	r3, #1
 80103b6:	041b      	lsls	r3, r3, #16
 80103b8:	431a      	orrs	r2, r3
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103be:	061b      	lsls	r3, r3, #24
 80103c0:	4937      	ldr	r1, [pc, #220]	; (80104a0 <HAL_RCC_OscConfig+0x4e8>)
 80103c2:	4313      	orrs	r3, r2
 80103c4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80103c6:	4b37      	ldr	r3, [pc, #220]	; (80104a4 <HAL_RCC_OscConfig+0x4ec>)
 80103c8:	2201      	movs	r2, #1
 80103ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80103cc:	f7fd ff28 	bl	800e220 <HAL_GetTick>
 80103d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80103d2:	e008      	b.n	80103e6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80103d4:	f7fd ff24 	bl	800e220 <HAL_GetTick>
 80103d8:	4602      	mov	r2, r0
 80103da:	693b      	ldr	r3, [r7, #16]
 80103dc:	1ad3      	subs	r3, r2, r3
 80103de:	2b02      	cmp	r3, #2
 80103e0:	d901      	bls.n	80103e6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80103e2:	2303      	movs	r3, #3
 80103e4:	e056      	b.n	8010494 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80103e6:	4b2e      	ldr	r3, [pc, #184]	; (80104a0 <HAL_RCC_OscConfig+0x4e8>)
 80103e8:	681b      	ldr	r3, [r3, #0]
 80103ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	d0f0      	beq.n	80103d4 <HAL_RCC_OscConfig+0x41c>
 80103f2:	e04e      	b.n	8010492 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80103f4:	4b2b      	ldr	r3, [pc, #172]	; (80104a4 <HAL_RCC_OscConfig+0x4ec>)
 80103f6:	2200      	movs	r2, #0
 80103f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80103fa:	f7fd ff11 	bl	800e220 <HAL_GetTick>
 80103fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8010400:	e008      	b.n	8010414 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8010402:	f7fd ff0d 	bl	800e220 <HAL_GetTick>
 8010406:	4602      	mov	r2, r0
 8010408:	693b      	ldr	r3, [r7, #16]
 801040a:	1ad3      	subs	r3, r2, r3
 801040c:	2b02      	cmp	r3, #2
 801040e:	d901      	bls.n	8010414 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8010410:	2303      	movs	r3, #3
 8010412:	e03f      	b.n	8010494 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8010414:	4b22      	ldr	r3, [pc, #136]	; (80104a0 <HAL_RCC_OscConfig+0x4e8>)
 8010416:	681b      	ldr	r3, [r3, #0]
 8010418:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801041c:	2b00      	cmp	r3, #0
 801041e:	d1f0      	bne.n	8010402 <HAL_RCC_OscConfig+0x44a>
 8010420:	e037      	b.n	8010492 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	699b      	ldr	r3, [r3, #24]
 8010426:	2b01      	cmp	r3, #1
 8010428:	d101      	bne.n	801042e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 801042a:	2301      	movs	r3, #1
 801042c:	e032      	b.n	8010494 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 801042e:	4b1c      	ldr	r3, [pc, #112]	; (80104a0 <HAL_RCC_OscConfig+0x4e8>)
 8010430:	685b      	ldr	r3, [r3, #4]
 8010432:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	699b      	ldr	r3, [r3, #24]
 8010438:	2b01      	cmp	r3, #1
 801043a:	d028      	beq.n	801048e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801043c:	68fb      	ldr	r3, [r7, #12]
 801043e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8010446:	429a      	cmp	r2, r3
 8010448:	d121      	bne.n	801048e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 801044a:	68fb      	ldr	r3, [r7, #12]
 801044c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8010454:	429a      	cmp	r2, r3
 8010456:	d11a      	bne.n	801048e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8010458:	68fa      	ldr	r2, [r7, #12]
 801045a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 801045e:	4013      	ands	r3, r2
 8010460:	687a      	ldr	r2, [r7, #4]
 8010462:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8010464:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8010466:	4293      	cmp	r3, r2
 8010468:	d111      	bne.n	801048e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 801046a:	68fb      	ldr	r3, [r7, #12]
 801046c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010474:	085b      	lsrs	r3, r3, #1
 8010476:	3b01      	subs	r3, #1
 8010478:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 801047a:	429a      	cmp	r2, r3
 801047c:	d107      	bne.n	801048e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 801047e:	68fb      	ldr	r3, [r7, #12]
 8010480:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010488:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 801048a:	429a      	cmp	r2, r3
 801048c:	d001      	beq.n	8010492 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 801048e:	2301      	movs	r3, #1
 8010490:	e000      	b.n	8010494 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8010492:	2300      	movs	r3, #0
}
 8010494:	4618      	mov	r0, r3
 8010496:	3718      	adds	r7, #24
 8010498:	46bd      	mov	sp, r7
 801049a:	bd80      	pop	{r7, pc}
 801049c:	40007000 	.word	0x40007000
 80104a0:	40023800 	.word	0x40023800
 80104a4:	42470060 	.word	0x42470060

080104a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80104a8:	b580      	push	{r7, lr}
 80104aa:	b084      	sub	sp, #16
 80104ac:	af00      	add	r7, sp, #0
 80104ae:	6078      	str	r0, [r7, #4]
 80104b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d101      	bne.n	80104bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80104b8:	2301      	movs	r3, #1
 80104ba:	e0cc      	b.n	8010656 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80104bc:	4b68      	ldr	r3, [pc, #416]	; (8010660 <HAL_RCC_ClockConfig+0x1b8>)
 80104be:	681b      	ldr	r3, [r3, #0]
 80104c0:	f003 0307 	and.w	r3, r3, #7
 80104c4:	683a      	ldr	r2, [r7, #0]
 80104c6:	429a      	cmp	r2, r3
 80104c8:	d90c      	bls.n	80104e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80104ca:	4b65      	ldr	r3, [pc, #404]	; (8010660 <HAL_RCC_ClockConfig+0x1b8>)
 80104cc:	683a      	ldr	r2, [r7, #0]
 80104ce:	b2d2      	uxtb	r2, r2
 80104d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80104d2:	4b63      	ldr	r3, [pc, #396]	; (8010660 <HAL_RCC_ClockConfig+0x1b8>)
 80104d4:	681b      	ldr	r3, [r3, #0]
 80104d6:	f003 0307 	and.w	r3, r3, #7
 80104da:	683a      	ldr	r2, [r7, #0]
 80104dc:	429a      	cmp	r2, r3
 80104de:	d001      	beq.n	80104e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80104e0:	2301      	movs	r3, #1
 80104e2:	e0b8      	b.n	8010656 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	681b      	ldr	r3, [r3, #0]
 80104e8:	f003 0302 	and.w	r3, r3, #2
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	d020      	beq.n	8010532 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	681b      	ldr	r3, [r3, #0]
 80104f4:	f003 0304 	and.w	r3, r3, #4
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	d005      	beq.n	8010508 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80104fc:	4b59      	ldr	r3, [pc, #356]	; (8010664 <HAL_RCC_ClockConfig+0x1bc>)
 80104fe:	689b      	ldr	r3, [r3, #8]
 8010500:	4a58      	ldr	r2, [pc, #352]	; (8010664 <HAL_RCC_ClockConfig+0x1bc>)
 8010502:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8010506:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	681b      	ldr	r3, [r3, #0]
 801050c:	f003 0308 	and.w	r3, r3, #8
 8010510:	2b00      	cmp	r3, #0
 8010512:	d005      	beq.n	8010520 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8010514:	4b53      	ldr	r3, [pc, #332]	; (8010664 <HAL_RCC_ClockConfig+0x1bc>)
 8010516:	689b      	ldr	r3, [r3, #8]
 8010518:	4a52      	ldr	r2, [pc, #328]	; (8010664 <HAL_RCC_ClockConfig+0x1bc>)
 801051a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 801051e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8010520:	4b50      	ldr	r3, [pc, #320]	; (8010664 <HAL_RCC_ClockConfig+0x1bc>)
 8010522:	689b      	ldr	r3, [r3, #8]
 8010524:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	689b      	ldr	r3, [r3, #8]
 801052c:	494d      	ldr	r1, [pc, #308]	; (8010664 <HAL_RCC_ClockConfig+0x1bc>)
 801052e:	4313      	orrs	r3, r2
 8010530:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	681b      	ldr	r3, [r3, #0]
 8010536:	f003 0301 	and.w	r3, r3, #1
 801053a:	2b00      	cmp	r3, #0
 801053c:	d044      	beq.n	80105c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	685b      	ldr	r3, [r3, #4]
 8010542:	2b01      	cmp	r3, #1
 8010544:	d107      	bne.n	8010556 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010546:	4b47      	ldr	r3, [pc, #284]	; (8010664 <HAL_RCC_ClockConfig+0x1bc>)
 8010548:	681b      	ldr	r3, [r3, #0]
 801054a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801054e:	2b00      	cmp	r3, #0
 8010550:	d119      	bne.n	8010586 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8010552:	2301      	movs	r3, #1
 8010554:	e07f      	b.n	8010656 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	685b      	ldr	r3, [r3, #4]
 801055a:	2b02      	cmp	r3, #2
 801055c:	d003      	beq.n	8010566 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8010562:	2b03      	cmp	r3, #3
 8010564:	d107      	bne.n	8010576 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8010566:	4b3f      	ldr	r3, [pc, #252]	; (8010664 <HAL_RCC_ClockConfig+0x1bc>)
 8010568:	681b      	ldr	r3, [r3, #0]
 801056a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801056e:	2b00      	cmp	r3, #0
 8010570:	d109      	bne.n	8010586 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8010572:	2301      	movs	r3, #1
 8010574:	e06f      	b.n	8010656 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010576:	4b3b      	ldr	r3, [pc, #236]	; (8010664 <HAL_RCC_ClockConfig+0x1bc>)
 8010578:	681b      	ldr	r3, [r3, #0]
 801057a:	f003 0302 	and.w	r3, r3, #2
 801057e:	2b00      	cmp	r3, #0
 8010580:	d101      	bne.n	8010586 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8010582:	2301      	movs	r3, #1
 8010584:	e067      	b.n	8010656 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8010586:	4b37      	ldr	r3, [pc, #220]	; (8010664 <HAL_RCC_ClockConfig+0x1bc>)
 8010588:	689b      	ldr	r3, [r3, #8]
 801058a:	f023 0203 	bic.w	r2, r3, #3
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	685b      	ldr	r3, [r3, #4]
 8010592:	4934      	ldr	r1, [pc, #208]	; (8010664 <HAL_RCC_ClockConfig+0x1bc>)
 8010594:	4313      	orrs	r3, r2
 8010596:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8010598:	f7fd fe42 	bl	800e220 <HAL_GetTick>
 801059c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801059e:	e00a      	b.n	80105b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80105a0:	f7fd fe3e 	bl	800e220 <HAL_GetTick>
 80105a4:	4602      	mov	r2, r0
 80105a6:	68fb      	ldr	r3, [r7, #12]
 80105a8:	1ad3      	subs	r3, r2, r3
 80105aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80105ae:	4293      	cmp	r3, r2
 80105b0:	d901      	bls.n	80105b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80105b2:	2303      	movs	r3, #3
 80105b4:	e04f      	b.n	8010656 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80105b6:	4b2b      	ldr	r3, [pc, #172]	; (8010664 <HAL_RCC_ClockConfig+0x1bc>)
 80105b8:	689b      	ldr	r3, [r3, #8]
 80105ba:	f003 020c 	and.w	r2, r3, #12
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	685b      	ldr	r3, [r3, #4]
 80105c2:	009b      	lsls	r3, r3, #2
 80105c4:	429a      	cmp	r2, r3
 80105c6:	d1eb      	bne.n	80105a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80105c8:	4b25      	ldr	r3, [pc, #148]	; (8010660 <HAL_RCC_ClockConfig+0x1b8>)
 80105ca:	681b      	ldr	r3, [r3, #0]
 80105cc:	f003 0307 	and.w	r3, r3, #7
 80105d0:	683a      	ldr	r2, [r7, #0]
 80105d2:	429a      	cmp	r2, r3
 80105d4:	d20c      	bcs.n	80105f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80105d6:	4b22      	ldr	r3, [pc, #136]	; (8010660 <HAL_RCC_ClockConfig+0x1b8>)
 80105d8:	683a      	ldr	r2, [r7, #0]
 80105da:	b2d2      	uxtb	r2, r2
 80105dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80105de:	4b20      	ldr	r3, [pc, #128]	; (8010660 <HAL_RCC_ClockConfig+0x1b8>)
 80105e0:	681b      	ldr	r3, [r3, #0]
 80105e2:	f003 0307 	and.w	r3, r3, #7
 80105e6:	683a      	ldr	r2, [r7, #0]
 80105e8:	429a      	cmp	r2, r3
 80105ea:	d001      	beq.n	80105f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80105ec:	2301      	movs	r3, #1
 80105ee:	e032      	b.n	8010656 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	681b      	ldr	r3, [r3, #0]
 80105f4:	f003 0304 	and.w	r3, r3, #4
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	d008      	beq.n	801060e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80105fc:	4b19      	ldr	r3, [pc, #100]	; (8010664 <HAL_RCC_ClockConfig+0x1bc>)
 80105fe:	689b      	ldr	r3, [r3, #8]
 8010600:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	68db      	ldr	r3, [r3, #12]
 8010608:	4916      	ldr	r1, [pc, #88]	; (8010664 <HAL_RCC_ClockConfig+0x1bc>)
 801060a:	4313      	orrs	r3, r2
 801060c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	681b      	ldr	r3, [r3, #0]
 8010612:	f003 0308 	and.w	r3, r3, #8
 8010616:	2b00      	cmp	r3, #0
 8010618:	d009      	beq.n	801062e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 801061a:	4b12      	ldr	r3, [pc, #72]	; (8010664 <HAL_RCC_ClockConfig+0x1bc>)
 801061c:	689b      	ldr	r3, [r3, #8]
 801061e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	691b      	ldr	r3, [r3, #16]
 8010626:	00db      	lsls	r3, r3, #3
 8010628:	490e      	ldr	r1, [pc, #56]	; (8010664 <HAL_RCC_ClockConfig+0x1bc>)
 801062a:	4313      	orrs	r3, r2
 801062c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 801062e:	f000 f821 	bl	8010674 <HAL_RCC_GetSysClockFreq>
 8010632:	4602      	mov	r2, r0
 8010634:	4b0b      	ldr	r3, [pc, #44]	; (8010664 <HAL_RCC_ClockConfig+0x1bc>)
 8010636:	689b      	ldr	r3, [r3, #8]
 8010638:	091b      	lsrs	r3, r3, #4
 801063a:	f003 030f 	and.w	r3, r3, #15
 801063e:	490a      	ldr	r1, [pc, #40]	; (8010668 <HAL_RCC_ClockConfig+0x1c0>)
 8010640:	5ccb      	ldrb	r3, [r1, r3]
 8010642:	fa22 f303 	lsr.w	r3, r2, r3
 8010646:	4a09      	ldr	r2, [pc, #36]	; (801066c <HAL_RCC_ClockConfig+0x1c4>)
 8010648:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 801064a:	4b09      	ldr	r3, [pc, #36]	; (8010670 <HAL_RCC_ClockConfig+0x1c8>)
 801064c:	681b      	ldr	r3, [r3, #0]
 801064e:	4618      	mov	r0, r3
 8010650:	f7f3 f850 	bl	80036f4 <HAL_InitTick>

  return HAL_OK;
 8010654:	2300      	movs	r3, #0
}
 8010656:	4618      	mov	r0, r3
 8010658:	3710      	adds	r7, #16
 801065a:	46bd      	mov	sp, r7
 801065c:	bd80      	pop	{r7, pc}
 801065e:	bf00      	nop
 8010660:	40023c00 	.word	0x40023c00
 8010664:	40023800 	.word	0x40023800
 8010668:	08017a80 	.word	0x08017a80
 801066c:	20000004 	.word	0x20000004
 8010670:	200012e0 	.word	0x200012e0

08010674 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8010674:	b5b0      	push	{r4, r5, r7, lr}
 8010676:	b084      	sub	sp, #16
 8010678:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 801067a:	2100      	movs	r1, #0
 801067c:	6079      	str	r1, [r7, #4]
 801067e:	2100      	movs	r1, #0
 8010680:	60f9      	str	r1, [r7, #12]
 8010682:	2100      	movs	r1, #0
 8010684:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8010686:	2100      	movs	r1, #0
 8010688:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 801068a:	4952      	ldr	r1, [pc, #328]	; (80107d4 <HAL_RCC_GetSysClockFreq+0x160>)
 801068c:	6889      	ldr	r1, [r1, #8]
 801068e:	f001 010c 	and.w	r1, r1, #12
 8010692:	2908      	cmp	r1, #8
 8010694:	d00d      	beq.n	80106b2 <HAL_RCC_GetSysClockFreq+0x3e>
 8010696:	2908      	cmp	r1, #8
 8010698:	f200 8094 	bhi.w	80107c4 <HAL_RCC_GetSysClockFreq+0x150>
 801069c:	2900      	cmp	r1, #0
 801069e:	d002      	beq.n	80106a6 <HAL_RCC_GetSysClockFreq+0x32>
 80106a0:	2904      	cmp	r1, #4
 80106a2:	d003      	beq.n	80106ac <HAL_RCC_GetSysClockFreq+0x38>
 80106a4:	e08e      	b.n	80107c4 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80106a6:	4b4c      	ldr	r3, [pc, #304]	; (80107d8 <HAL_RCC_GetSysClockFreq+0x164>)
 80106a8:	60bb      	str	r3, [r7, #8]
       break;
 80106aa:	e08e      	b.n	80107ca <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80106ac:	4b4b      	ldr	r3, [pc, #300]	; (80107dc <HAL_RCC_GetSysClockFreq+0x168>)
 80106ae:	60bb      	str	r3, [r7, #8]
      break;
 80106b0:	e08b      	b.n	80107ca <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80106b2:	4948      	ldr	r1, [pc, #288]	; (80107d4 <HAL_RCC_GetSysClockFreq+0x160>)
 80106b4:	6849      	ldr	r1, [r1, #4]
 80106b6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80106ba:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80106bc:	4945      	ldr	r1, [pc, #276]	; (80107d4 <HAL_RCC_GetSysClockFreq+0x160>)
 80106be:	6849      	ldr	r1, [r1, #4]
 80106c0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80106c4:	2900      	cmp	r1, #0
 80106c6:	d024      	beq.n	8010712 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80106c8:	4942      	ldr	r1, [pc, #264]	; (80107d4 <HAL_RCC_GetSysClockFreq+0x160>)
 80106ca:	6849      	ldr	r1, [r1, #4]
 80106cc:	0989      	lsrs	r1, r1, #6
 80106ce:	4608      	mov	r0, r1
 80106d0:	f04f 0100 	mov.w	r1, #0
 80106d4:	f240 14ff 	movw	r4, #511	; 0x1ff
 80106d8:	f04f 0500 	mov.w	r5, #0
 80106dc:	ea00 0204 	and.w	r2, r0, r4
 80106e0:	ea01 0305 	and.w	r3, r1, r5
 80106e4:	493d      	ldr	r1, [pc, #244]	; (80107dc <HAL_RCC_GetSysClockFreq+0x168>)
 80106e6:	fb01 f003 	mul.w	r0, r1, r3
 80106ea:	2100      	movs	r1, #0
 80106ec:	fb01 f102 	mul.w	r1, r1, r2
 80106f0:	1844      	adds	r4, r0, r1
 80106f2:	493a      	ldr	r1, [pc, #232]	; (80107dc <HAL_RCC_GetSysClockFreq+0x168>)
 80106f4:	fba2 0101 	umull	r0, r1, r2, r1
 80106f8:	1863      	adds	r3, r4, r1
 80106fa:	4619      	mov	r1, r3
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	461a      	mov	r2, r3
 8010700:	f04f 0300 	mov.w	r3, #0
 8010704:	f7f0 fab2 	bl	8000c6c <__aeabi_uldivmod>
 8010708:	4602      	mov	r2, r0
 801070a:	460b      	mov	r3, r1
 801070c:	4613      	mov	r3, r2
 801070e:	60fb      	str	r3, [r7, #12]
 8010710:	e04a      	b.n	80107a8 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8010712:	4b30      	ldr	r3, [pc, #192]	; (80107d4 <HAL_RCC_GetSysClockFreq+0x160>)
 8010714:	685b      	ldr	r3, [r3, #4]
 8010716:	099b      	lsrs	r3, r3, #6
 8010718:	461a      	mov	r2, r3
 801071a:	f04f 0300 	mov.w	r3, #0
 801071e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8010722:	f04f 0100 	mov.w	r1, #0
 8010726:	ea02 0400 	and.w	r4, r2, r0
 801072a:	ea03 0501 	and.w	r5, r3, r1
 801072e:	4620      	mov	r0, r4
 8010730:	4629      	mov	r1, r5
 8010732:	f04f 0200 	mov.w	r2, #0
 8010736:	f04f 0300 	mov.w	r3, #0
 801073a:	014b      	lsls	r3, r1, #5
 801073c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8010740:	0142      	lsls	r2, r0, #5
 8010742:	4610      	mov	r0, r2
 8010744:	4619      	mov	r1, r3
 8010746:	1b00      	subs	r0, r0, r4
 8010748:	eb61 0105 	sbc.w	r1, r1, r5
 801074c:	f04f 0200 	mov.w	r2, #0
 8010750:	f04f 0300 	mov.w	r3, #0
 8010754:	018b      	lsls	r3, r1, #6
 8010756:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 801075a:	0182      	lsls	r2, r0, #6
 801075c:	1a12      	subs	r2, r2, r0
 801075e:	eb63 0301 	sbc.w	r3, r3, r1
 8010762:	f04f 0000 	mov.w	r0, #0
 8010766:	f04f 0100 	mov.w	r1, #0
 801076a:	00d9      	lsls	r1, r3, #3
 801076c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8010770:	00d0      	lsls	r0, r2, #3
 8010772:	4602      	mov	r2, r0
 8010774:	460b      	mov	r3, r1
 8010776:	1912      	adds	r2, r2, r4
 8010778:	eb45 0303 	adc.w	r3, r5, r3
 801077c:	f04f 0000 	mov.w	r0, #0
 8010780:	f04f 0100 	mov.w	r1, #0
 8010784:	0299      	lsls	r1, r3, #10
 8010786:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 801078a:	0290      	lsls	r0, r2, #10
 801078c:	4602      	mov	r2, r0
 801078e:	460b      	mov	r3, r1
 8010790:	4610      	mov	r0, r2
 8010792:	4619      	mov	r1, r3
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	461a      	mov	r2, r3
 8010798:	f04f 0300 	mov.w	r3, #0
 801079c:	f7f0 fa66 	bl	8000c6c <__aeabi_uldivmod>
 80107a0:	4602      	mov	r2, r0
 80107a2:	460b      	mov	r3, r1
 80107a4:	4613      	mov	r3, r2
 80107a6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80107a8:	4b0a      	ldr	r3, [pc, #40]	; (80107d4 <HAL_RCC_GetSysClockFreq+0x160>)
 80107aa:	685b      	ldr	r3, [r3, #4]
 80107ac:	0c1b      	lsrs	r3, r3, #16
 80107ae:	f003 0303 	and.w	r3, r3, #3
 80107b2:	3301      	adds	r3, #1
 80107b4:	005b      	lsls	r3, r3, #1
 80107b6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80107b8:	68fa      	ldr	r2, [r7, #12]
 80107ba:	683b      	ldr	r3, [r7, #0]
 80107bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80107c0:	60bb      	str	r3, [r7, #8]
      break;
 80107c2:	e002      	b.n	80107ca <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80107c4:	4b04      	ldr	r3, [pc, #16]	; (80107d8 <HAL_RCC_GetSysClockFreq+0x164>)
 80107c6:	60bb      	str	r3, [r7, #8]
      break;
 80107c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80107ca:	68bb      	ldr	r3, [r7, #8]
}
 80107cc:	4618      	mov	r0, r3
 80107ce:	3710      	adds	r7, #16
 80107d0:	46bd      	mov	sp, r7
 80107d2:	bdb0      	pop	{r4, r5, r7, pc}
 80107d4:	40023800 	.word	0x40023800
 80107d8:	00f42400 	.word	0x00f42400
 80107dc:	017d7840 	.word	0x017d7840

080107e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80107e0:	b480      	push	{r7}
 80107e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80107e4:	4b03      	ldr	r3, [pc, #12]	; (80107f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80107e6:	681b      	ldr	r3, [r3, #0]
}
 80107e8:	4618      	mov	r0, r3
 80107ea:	46bd      	mov	sp, r7
 80107ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107f0:	4770      	bx	lr
 80107f2:	bf00      	nop
 80107f4:	20000004 	.word	0x20000004

080107f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80107f8:	b580      	push	{r7, lr}
 80107fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80107fc:	f7ff fff0 	bl	80107e0 <HAL_RCC_GetHCLKFreq>
 8010800:	4602      	mov	r2, r0
 8010802:	4b05      	ldr	r3, [pc, #20]	; (8010818 <HAL_RCC_GetPCLK1Freq+0x20>)
 8010804:	689b      	ldr	r3, [r3, #8]
 8010806:	0a9b      	lsrs	r3, r3, #10
 8010808:	f003 0307 	and.w	r3, r3, #7
 801080c:	4903      	ldr	r1, [pc, #12]	; (801081c <HAL_RCC_GetPCLK1Freq+0x24>)
 801080e:	5ccb      	ldrb	r3, [r1, r3]
 8010810:	fa22 f303 	lsr.w	r3, r2, r3
}
 8010814:	4618      	mov	r0, r3
 8010816:	bd80      	pop	{r7, pc}
 8010818:	40023800 	.word	0x40023800
 801081c:	08017a90 	.word	0x08017a90

08010820 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8010820:	b480      	push	{r7}
 8010822:	b083      	sub	sp, #12
 8010824:	af00      	add	r7, sp, #0
 8010826:	6078      	str	r0, [r7, #4]
 8010828:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	220f      	movs	r2, #15
 801082e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8010830:	4b12      	ldr	r3, [pc, #72]	; (801087c <HAL_RCC_GetClockConfig+0x5c>)
 8010832:	689b      	ldr	r3, [r3, #8]
 8010834:	f003 0203 	and.w	r2, r3, #3
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 801083c:	4b0f      	ldr	r3, [pc, #60]	; (801087c <HAL_RCC_GetClockConfig+0x5c>)
 801083e:	689b      	ldr	r3, [r3, #8]
 8010840:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8010848:	4b0c      	ldr	r3, [pc, #48]	; (801087c <HAL_RCC_GetClockConfig+0x5c>)
 801084a:	689b      	ldr	r3, [r3, #8]
 801084c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8010854:	4b09      	ldr	r3, [pc, #36]	; (801087c <HAL_RCC_GetClockConfig+0x5c>)
 8010856:	689b      	ldr	r3, [r3, #8]
 8010858:	08db      	lsrs	r3, r3, #3
 801085a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8010862:	4b07      	ldr	r3, [pc, #28]	; (8010880 <HAL_RCC_GetClockConfig+0x60>)
 8010864:	681b      	ldr	r3, [r3, #0]
 8010866:	f003 0207 	and.w	r2, r3, #7
 801086a:	683b      	ldr	r3, [r7, #0]
 801086c:	601a      	str	r2, [r3, #0]
}
 801086e:	bf00      	nop
 8010870:	370c      	adds	r7, #12
 8010872:	46bd      	mov	sp, r7
 8010874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010878:	4770      	bx	lr
 801087a:	bf00      	nop
 801087c:	40023800 	.word	0x40023800
 8010880:	40023c00 	.word	0x40023c00

08010884 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8010884:	b580      	push	{r7, lr}
 8010886:	b082      	sub	sp, #8
 8010888:	af00      	add	r7, sp, #0
 801088a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	2b00      	cmp	r3, #0
 8010890:	d101      	bne.n	8010896 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8010892:	2301      	movs	r3, #1
 8010894:	e07b      	b.n	801098e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801089a:	2b00      	cmp	r3, #0
 801089c:	d108      	bne.n	80108b0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	685b      	ldr	r3, [r3, #4]
 80108a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80108a6:	d009      	beq.n	80108bc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	2200      	movs	r2, #0
 80108ac:	61da      	str	r2, [r3, #28]
 80108ae:	e005      	b.n	80108bc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	2200      	movs	r2, #0
 80108b4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	2200      	movs	r2, #0
 80108ba:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	2200      	movs	r2, #0
 80108c0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80108c8:	b2db      	uxtb	r3, r3
 80108ca:	2b00      	cmp	r3, #0
 80108cc:	d106      	bne.n	80108dc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	2200      	movs	r2, #0
 80108d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80108d6:	6878      	ldr	r0, [r7, #4]
 80108d8:	f7f2 fe78 	bl	80035cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	2202      	movs	r2, #2
 80108e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	681b      	ldr	r3, [r3, #0]
 80108e8:	681a      	ldr	r2, [r3, #0]
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	681b      	ldr	r3, [r3, #0]
 80108ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80108f2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	685b      	ldr	r3, [r3, #4]
 80108f8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	689b      	ldr	r3, [r3, #8]
 8010900:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8010904:	431a      	orrs	r2, r3
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	68db      	ldr	r3, [r3, #12]
 801090a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801090e:	431a      	orrs	r2, r3
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	691b      	ldr	r3, [r3, #16]
 8010914:	f003 0302 	and.w	r3, r3, #2
 8010918:	431a      	orrs	r2, r3
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	695b      	ldr	r3, [r3, #20]
 801091e:	f003 0301 	and.w	r3, r3, #1
 8010922:	431a      	orrs	r2, r3
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	699b      	ldr	r3, [r3, #24]
 8010928:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801092c:	431a      	orrs	r2, r3
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	69db      	ldr	r3, [r3, #28]
 8010932:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010936:	431a      	orrs	r2, r3
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	6a1b      	ldr	r3, [r3, #32]
 801093c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010940:	ea42 0103 	orr.w	r1, r2, r3
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010948:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	681b      	ldr	r3, [r3, #0]
 8010950:	430a      	orrs	r2, r1
 8010952:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	699b      	ldr	r3, [r3, #24]
 8010958:	0c1b      	lsrs	r3, r3, #16
 801095a:	f003 0104 	and.w	r1, r3, #4
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010962:	f003 0210 	and.w	r2, r3, #16
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	681b      	ldr	r3, [r3, #0]
 801096a:	430a      	orrs	r2, r1
 801096c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	681b      	ldr	r3, [r3, #0]
 8010972:	69da      	ldr	r2, [r3, #28]
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	681b      	ldr	r3, [r3, #0]
 8010978:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801097c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	2200      	movs	r2, #0
 8010982:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	2201      	movs	r2, #1
 8010988:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 801098c:	2300      	movs	r3, #0
}
 801098e:	4618      	mov	r0, r3
 8010990:	3708      	adds	r7, #8
 8010992:	46bd      	mov	sp, r7
 8010994:	bd80      	pop	{r7, pc}

08010996 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8010996:	b580      	push	{r7, lr}
 8010998:	b082      	sub	sp, #8
 801099a:	af00      	add	r7, sp, #0
 801099c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	d101      	bne.n	80109a8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80109a4:	2301      	movs	r3, #1
 80109a6:	e041      	b.n	8010a2c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80109ae:	b2db      	uxtb	r3, r3
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	d106      	bne.n	80109c2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	2200      	movs	r2, #0
 80109b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80109bc:	6878      	ldr	r0, [r7, #4]
 80109be:	f7f3 f8f5 	bl	8003bac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	2202      	movs	r2, #2
 80109c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	681a      	ldr	r2, [r3, #0]
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	3304      	adds	r3, #4
 80109d2:	4619      	mov	r1, r3
 80109d4:	4610      	mov	r0, r2
 80109d6:	f001 f857 	bl	8011a88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	2201      	movs	r2, #1
 80109de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	2201      	movs	r2, #1
 80109e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	2201      	movs	r2, #1
 80109ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	2201      	movs	r2, #1
 80109f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	2201      	movs	r2, #1
 80109fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	2201      	movs	r2, #1
 8010a06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	2201      	movs	r2, #1
 8010a0e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	2201      	movs	r2, #1
 8010a16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	2201      	movs	r2, #1
 8010a1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	2201      	movs	r2, #1
 8010a26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8010a2a:	2300      	movs	r3, #0
}
 8010a2c:	4618      	mov	r0, r3
 8010a2e:	3708      	adds	r7, #8
 8010a30:	46bd      	mov	sp, r7
 8010a32:	bd80      	pop	{r7, pc}

08010a34 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8010a34:	b480      	push	{r7}
 8010a36:	b085      	sub	sp, #20
 8010a38:	af00      	add	r7, sp, #0
 8010a3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010a42:	b2db      	uxtb	r3, r3
 8010a44:	2b01      	cmp	r3, #1
 8010a46:	d001      	beq.n	8010a4c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8010a48:	2301      	movs	r3, #1
 8010a4a:	e046      	b.n	8010ada <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	2202      	movs	r2, #2
 8010a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	681b      	ldr	r3, [r3, #0]
 8010a58:	4a23      	ldr	r2, [pc, #140]	; (8010ae8 <HAL_TIM_Base_Start+0xb4>)
 8010a5a:	4293      	cmp	r3, r2
 8010a5c:	d022      	beq.n	8010aa4 <HAL_TIM_Base_Start+0x70>
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	681b      	ldr	r3, [r3, #0]
 8010a62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010a66:	d01d      	beq.n	8010aa4 <HAL_TIM_Base_Start+0x70>
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	681b      	ldr	r3, [r3, #0]
 8010a6c:	4a1f      	ldr	r2, [pc, #124]	; (8010aec <HAL_TIM_Base_Start+0xb8>)
 8010a6e:	4293      	cmp	r3, r2
 8010a70:	d018      	beq.n	8010aa4 <HAL_TIM_Base_Start+0x70>
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	681b      	ldr	r3, [r3, #0]
 8010a76:	4a1e      	ldr	r2, [pc, #120]	; (8010af0 <HAL_TIM_Base_Start+0xbc>)
 8010a78:	4293      	cmp	r3, r2
 8010a7a:	d013      	beq.n	8010aa4 <HAL_TIM_Base_Start+0x70>
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	681b      	ldr	r3, [r3, #0]
 8010a80:	4a1c      	ldr	r2, [pc, #112]	; (8010af4 <HAL_TIM_Base_Start+0xc0>)
 8010a82:	4293      	cmp	r3, r2
 8010a84:	d00e      	beq.n	8010aa4 <HAL_TIM_Base_Start+0x70>
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	681b      	ldr	r3, [r3, #0]
 8010a8a:	4a1b      	ldr	r2, [pc, #108]	; (8010af8 <HAL_TIM_Base_Start+0xc4>)
 8010a8c:	4293      	cmp	r3, r2
 8010a8e:	d009      	beq.n	8010aa4 <HAL_TIM_Base_Start+0x70>
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	681b      	ldr	r3, [r3, #0]
 8010a94:	4a19      	ldr	r2, [pc, #100]	; (8010afc <HAL_TIM_Base_Start+0xc8>)
 8010a96:	4293      	cmp	r3, r2
 8010a98:	d004      	beq.n	8010aa4 <HAL_TIM_Base_Start+0x70>
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	681b      	ldr	r3, [r3, #0]
 8010a9e:	4a18      	ldr	r2, [pc, #96]	; (8010b00 <HAL_TIM_Base_Start+0xcc>)
 8010aa0:	4293      	cmp	r3, r2
 8010aa2:	d111      	bne.n	8010ac8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	681b      	ldr	r3, [r3, #0]
 8010aa8:	689b      	ldr	r3, [r3, #8]
 8010aaa:	f003 0307 	and.w	r3, r3, #7
 8010aae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010ab0:	68fb      	ldr	r3, [r7, #12]
 8010ab2:	2b06      	cmp	r3, #6
 8010ab4:	d010      	beq.n	8010ad8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	681a      	ldr	r2, [r3, #0]
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	681b      	ldr	r3, [r3, #0]
 8010ac0:	f042 0201 	orr.w	r2, r2, #1
 8010ac4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010ac6:	e007      	b.n	8010ad8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	681b      	ldr	r3, [r3, #0]
 8010acc:	681a      	ldr	r2, [r3, #0]
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	681b      	ldr	r3, [r3, #0]
 8010ad2:	f042 0201 	orr.w	r2, r2, #1
 8010ad6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8010ad8:	2300      	movs	r3, #0
}
 8010ada:	4618      	mov	r0, r3
 8010adc:	3714      	adds	r7, #20
 8010ade:	46bd      	mov	sp, r7
 8010ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ae4:	4770      	bx	lr
 8010ae6:	bf00      	nop
 8010ae8:	40010000 	.word	0x40010000
 8010aec:	40000400 	.word	0x40000400
 8010af0:	40000800 	.word	0x40000800
 8010af4:	40000c00 	.word	0x40000c00
 8010af8:	40010400 	.word	0x40010400
 8010afc:	40014000 	.word	0x40014000
 8010b00:	40001800 	.word	0x40001800

08010b04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8010b04:	b480      	push	{r7}
 8010b06:	b085      	sub	sp, #20
 8010b08:	af00      	add	r7, sp, #0
 8010b0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010b12:	b2db      	uxtb	r3, r3
 8010b14:	2b01      	cmp	r3, #1
 8010b16:	d001      	beq.n	8010b1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8010b18:	2301      	movs	r3, #1
 8010b1a:	e04e      	b.n	8010bba <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	2202      	movs	r2, #2
 8010b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	681b      	ldr	r3, [r3, #0]
 8010b28:	68da      	ldr	r2, [r3, #12]
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	681b      	ldr	r3, [r3, #0]
 8010b2e:	f042 0201 	orr.w	r2, r2, #1
 8010b32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	681b      	ldr	r3, [r3, #0]
 8010b38:	4a23      	ldr	r2, [pc, #140]	; (8010bc8 <HAL_TIM_Base_Start_IT+0xc4>)
 8010b3a:	4293      	cmp	r3, r2
 8010b3c:	d022      	beq.n	8010b84 <HAL_TIM_Base_Start_IT+0x80>
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	681b      	ldr	r3, [r3, #0]
 8010b42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010b46:	d01d      	beq.n	8010b84 <HAL_TIM_Base_Start_IT+0x80>
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	681b      	ldr	r3, [r3, #0]
 8010b4c:	4a1f      	ldr	r2, [pc, #124]	; (8010bcc <HAL_TIM_Base_Start_IT+0xc8>)
 8010b4e:	4293      	cmp	r3, r2
 8010b50:	d018      	beq.n	8010b84 <HAL_TIM_Base_Start_IT+0x80>
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	681b      	ldr	r3, [r3, #0]
 8010b56:	4a1e      	ldr	r2, [pc, #120]	; (8010bd0 <HAL_TIM_Base_Start_IT+0xcc>)
 8010b58:	4293      	cmp	r3, r2
 8010b5a:	d013      	beq.n	8010b84 <HAL_TIM_Base_Start_IT+0x80>
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	681b      	ldr	r3, [r3, #0]
 8010b60:	4a1c      	ldr	r2, [pc, #112]	; (8010bd4 <HAL_TIM_Base_Start_IT+0xd0>)
 8010b62:	4293      	cmp	r3, r2
 8010b64:	d00e      	beq.n	8010b84 <HAL_TIM_Base_Start_IT+0x80>
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	681b      	ldr	r3, [r3, #0]
 8010b6a:	4a1b      	ldr	r2, [pc, #108]	; (8010bd8 <HAL_TIM_Base_Start_IT+0xd4>)
 8010b6c:	4293      	cmp	r3, r2
 8010b6e:	d009      	beq.n	8010b84 <HAL_TIM_Base_Start_IT+0x80>
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	681b      	ldr	r3, [r3, #0]
 8010b74:	4a19      	ldr	r2, [pc, #100]	; (8010bdc <HAL_TIM_Base_Start_IT+0xd8>)
 8010b76:	4293      	cmp	r3, r2
 8010b78:	d004      	beq.n	8010b84 <HAL_TIM_Base_Start_IT+0x80>
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	681b      	ldr	r3, [r3, #0]
 8010b7e:	4a18      	ldr	r2, [pc, #96]	; (8010be0 <HAL_TIM_Base_Start_IT+0xdc>)
 8010b80:	4293      	cmp	r3, r2
 8010b82:	d111      	bne.n	8010ba8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	681b      	ldr	r3, [r3, #0]
 8010b88:	689b      	ldr	r3, [r3, #8]
 8010b8a:	f003 0307 	and.w	r3, r3, #7
 8010b8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010b90:	68fb      	ldr	r3, [r7, #12]
 8010b92:	2b06      	cmp	r3, #6
 8010b94:	d010      	beq.n	8010bb8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	681b      	ldr	r3, [r3, #0]
 8010b9a:	681a      	ldr	r2, [r3, #0]
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	681b      	ldr	r3, [r3, #0]
 8010ba0:	f042 0201 	orr.w	r2, r2, #1
 8010ba4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010ba6:	e007      	b.n	8010bb8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	681b      	ldr	r3, [r3, #0]
 8010bac:	681a      	ldr	r2, [r3, #0]
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	681b      	ldr	r3, [r3, #0]
 8010bb2:	f042 0201 	orr.w	r2, r2, #1
 8010bb6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8010bb8:	2300      	movs	r3, #0
}
 8010bba:	4618      	mov	r0, r3
 8010bbc:	3714      	adds	r7, #20
 8010bbe:	46bd      	mov	sp, r7
 8010bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bc4:	4770      	bx	lr
 8010bc6:	bf00      	nop
 8010bc8:	40010000 	.word	0x40010000
 8010bcc:	40000400 	.word	0x40000400
 8010bd0:	40000800 	.word	0x40000800
 8010bd4:	40000c00 	.word	0x40000c00
 8010bd8:	40010400 	.word	0x40010400
 8010bdc:	40014000 	.word	0x40014000
 8010be0:	40001800 	.word	0x40001800

08010be4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8010be4:	b580      	push	{r7, lr}
 8010be6:	b082      	sub	sp, #8
 8010be8:	af00      	add	r7, sp, #0
 8010bea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	2b00      	cmp	r3, #0
 8010bf0:	d101      	bne.n	8010bf6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8010bf2:	2301      	movs	r3, #1
 8010bf4:	e041      	b.n	8010c7a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010bfc:	b2db      	uxtb	r3, r3
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	d106      	bne.n	8010c10 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	2200      	movs	r2, #0
 8010c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8010c0a:	6878      	ldr	r0, [r7, #4]
 8010c0c:	f000 f839 	bl	8010c82 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	2202      	movs	r2, #2
 8010c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	681a      	ldr	r2, [r3, #0]
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	3304      	adds	r3, #4
 8010c20:	4619      	mov	r1, r3
 8010c22:	4610      	mov	r0, r2
 8010c24:	f000 ff30 	bl	8011a88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	2201      	movs	r2, #1
 8010c2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	2201      	movs	r2, #1
 8010c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	2201      	movs	r2, #1
 8010c3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	2201      	movs	r2, #1
 8010c44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	2201      	movs	r2, #1
 8010c4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	2201      	movs	r2, #1
 8010c54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	2201      	movs	r2, #1
 8010c5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	2201      	movs	r2, #1
 8010c64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	2201      	movs	r2, #1
 8010c6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	2201      	movs	r2, #1
 8010c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8010c78:	2300      	movs	r3, #0
}
 8010c7a:	4618      	mov	r0, r3
 8010c7c:	3708      	adds	r7, #8
 8010c7e:	46bd      	mov	sp, r7
 8010c80:	bd80      	pop	{r7, pc}

08010c82 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8010c82:	b480      	push	{r7}
 8010c84:	b083      	sub	sp, #12
 8010c86:	af00      	add	r7, sp, #0
 8010c88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8010c8a:	bf00      	nop
 8010c8c:	370c      	adds	r7, #12
 8010c8e:	46bd      	mov	sp, r7
 8010c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c94:	4770      	bx	lr
	...

08010c98 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8010c98:	b580      	push	{r7, lr}
 8010c9a:	b084      	sub	sp, #16
 8010c9c:	af00      	add	r7, sp, #0
 8010c9e:	6078      	str	r0, [r7, #4]
 8010ca0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8010ca2:	683b      	ldr	r3, [r7, #0]
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	d109      	bne.n	8010cbc <HAL_TIM_PWM_Start+0x24>
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010cae:	b2db      	uxtb	r3, r3
 8010cb0:	2b01      	cmp	r3, #1
 8010cb2:	bf14      	ite	ne
 8010cb4:	2301      	movne	r3, #1
 8010cb6:	2300      	moveq	r3, #0
 8010cb8:	b2db      	uxtb	r3, r3
 8010cba:	e022      	b.n	8010d02 <HAL_TIM_PWM_Start+0x6a>
 8010cbc:	683b      	ldr	r3, [r7, #0]
 8010cbe:	2b04      	cmp	r3, #4
 8010cc0:	d109      	bne.n	8010cd6 <HAL_TIM_PWM_Start+0x3e>
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8010cc8:	b2db      	uxtb	r3, r3
 8010cca:	2b01      	cmp	r3, #1
 8010ccc:	bf14      	ite	ne
 8010cce:	2301      	movne	r3, #1
 8010cd0:	2300      	moveq	r3, #0
 8010cd2:	b2db      	uxtb	r3, r3
 8010cd4:	e015      	b.n	8010d02 <HAL_TIM_PWM_Start+0x6a>
 8010cd6:	683b      	ldr	r3, [r7, #0]
 8010cd8:	2b08      	cmp	r3, #8
 8010cda:	d109      	bne.n	8010cf0 <HAL_TIM_PWM_Start+0x58>
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010ce2:	b2db      	uxtb	r3, r3
 8010ce4:	2b01      	cmp	r3, #1
 8010ce6:	bf14      	ite	ne
 8010ce8:	2301      	movne	r3, #1
 8010cea:	2300      	moveq	r3, #0
 8010cec:	b2db      	uxtb	r3, r3
 8010cee:	e008      	b.n	8010d02 <HAL_TIM_PWM_Start+0x6a>
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010cf6:	b2db      	uxtb	r3, r3
 8010cf8:	2b01      	cmp	r3, #1
 8010cfa:	bf14      	ite	ne
 8010cfc:	2301      	movne	r3, #1
 8010cfe:	2300      	moveq	r3, #0
 8010d00:	b2db      	uxtb	r3, r3
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	d001      	beq.n	8010d0a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8010d06:	2301      	movs	r3, #1
 8010d08:	e07c      	b.n	8010e04 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8010d0a:	683b      	ldr	r3, [r7, #0]
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	d104      	bne.n	8010d1a <HAL_TIM_PWM_Start+0x82>
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	2202      	movs	r2, #2
 8010d14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010d18:	e013      	b.n	8010d42 <HAL_TIM_PWM_Start+0xaa>
 8010d1a:	683b      	ldr	r3, [r7, #0]
 8010d1c:	2b04      	cmp	r3, #4
 8010d1e:	d104      	bne.n	8010d2a <HAL_TIM_PWM_Start+0x92>
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	2202      	movs	r2, #2
 8010d24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010d28:	e00b      	b.n	8010d42 <HAL_TIM_PWM_Start+0xaa>
 8010d2a:	683b      	ldr	r3, [r7, #0]
 8010d2c:	2b08      	cmp	r3, #8
 8010d2e:	d104      	bne.n	8010d3a <HAL_TIM_PWM_Start+0xa2>
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	2202      	movs	r2, #2
 8010d34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010d38:	e003      	b.n	8010d42 <HAL_TIM_PWM_Start+0xaa>
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	2202      	movs	r2, #2
 8010d3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	681b      	ldr	r3, [r3, #0]
 8010d46:	2201      	movs	r2, #1
 8010d48:	6839      	ldr	r1, [r7, #0]
 8010d4a:	4618      	mov	r0, r3
 8010d4c:	f001 fb42 	bl	80123d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	681b      	ldr	r3, [r3, #0]
 8010d54:	4a2d      	ldr	r2, [pc, #180]	; (8010e0c <HAL_TIM_PWM_Start+0x174>)
 8010d56:	4293      	cmp	r3, r2
 8010d58:	d004      	beq.n	8010d64 <HAL_TIM_PWM_Start+0xcc>
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	681b      	ldr	r3, [r3, #0]
 8010d5e:	4a2c      	ldr	r2, [pc, #176]	; (8010e10 <HAL_TIM_PWM_Start+0x178>)
 8010d60:	4293      	cmp	r3, r2
 8010d62:	d101      	bne.n	8010d68 <HAL_TIM_PWM_Start+0xd0>
 8010d64:	2301      	movs	r3, #1
 8010d66:	e000      	b.n	8010d6a <HAL_TIM_PWM_Start+0xd2>
 8010d68:	2300      	movs	r3, #0
 8010d6a:	2b00      	cmp	r3, #0
 8010d6c:	d007      	beq.n	8010d7e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	681b      	ldr	r3, [r3, #0]
 8010d72:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	681b      	ldr	r3, [r3, #0]
 8010d78:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8010d7c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	681b      	ldr	r3, [r3, #0]
 8010d82:	4a22      	ldr	r2, [pc, #136]	; (8010e0c <HAL_TIM_PWM_Start+0x174>)
 8010d84:	4293      	cmp	r3, r2
 8010d86:	d022      	beq.n	8010dce <HAL_TIM_PWM_Start+0x136>
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	681b      	ldr	r3, [r3, #0]
 8010d8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010d90:	d01d      	beq.n	8010dce <HAL_TIM_PWM_Start+0x136>
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	681b      	ldr	r3, [r3, #0]
 8010d96:	4a1f      	ldr	r2, [pc, #124]	; (8010e14 <HAL_TIM_PWM_Start+0x17c>)
 8010d98:	4293      	cmp	r3, r2
 8010d9a:	d018      	beq.n	8010dce <HAL_TIM_PWM_Start+0x136>
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	681b      	ldr	r3, [r3, #0]
 8010da0:	4a1d      	ldr	r2, [pc, #116]	; (8010e18 <HAL_TIM_PWM_Start+0x180>)
 8010da2:	4293      	cmp	r3, r2
 8010da4:	d013      	beq.n	8010dce <HAL_TIM_PWM_Start+0x136>
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	681b      	ldr	r3, [r3, #0]
 8010daa:	4a1c      	ldr	r2, [pc, #112]	; (8010e1c <HAL_TIM_PWM_Start+0x184>)
 8010dac:	4293      	cmp	r3, r2
 8010dae:	d00e      	beq.n	8010dce <HAL_TIM_PWM_Start+0x136>
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	681b      	ldr	r3, [r3, #0]
 8010db4:	4a16      	ldr	r2, [pc, #88]	; (8010e10 <HAL_TIM_PWM_Start+0x178>)
 8010db6:	4293      	cmp	r3, r2
 8010db8:	d009      	beq.n	8010dce <HAL_TIM_PWM_Start+0x136>
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	681b      	ldr	r3, [r3, #0]
 8010dbe:	4a18      	ldr	r2, [pc, #96]	; (8010e20 <HAL_TIM_PWM_Start+0x188>)
 8010dc0:	4293      	cmp	r3, r2
 8010dc2:	d004      	beq.n	8010dce <HAL_TIM_PWM_Start+0x136>
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	681b      	ldr	r3, [r3, #0]
 8010dc8:	4a16      	ldr	r2, [pc, #88]	; (8010e24 <HAL_TIM_PWM_Start+0x18c>)
 8010dca:	4293      	cmp	r3, r2
 8010dcc:	d111      	bne.n	8010df2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	681b      	ldr	r3, [r3, #0]
 8010dd2:	689b      	ldr	r3, [r3, #8]
 8010dd4:	f003 0307 	and.w	r3, r3, #7
 8010dd8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010dda:	68fb      	ldr	r3, [r7, #12]
 8010ddc:	2b06      	cmp	r3, #6
 8010dde:	d010      	beq.n	8010e02 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	681b      	ldr	r3, [r3, #0]
 8010de4:	681a      	ldr	r2, [r3, #0]
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	681b      	ldr	r3, [r3, #0]
 8010dea:	f042 0201 	orr.w	r2, r2, #1
 8010dee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010df0:	e007      	b.n	8010e02 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	681b      	ldr	r3, [r3, #0]
 8010df6:	681a      	ldr	r2, [r3, #0]
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	681b      	ldr	r3, [r3, #0]
 8010dfc:	f042 0201 	orr.w	r2, r2, #1
 8010e00:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8010e02:	2300      	movs	r3, #0
}
 8010e04:	4618      	mov	r0, r3
 8010e06:	3710      	adds	r7, #16
 8010e08:	46bd      	mov	sp, r7
 8010e0a:	bd80      	pop	{r7, pc}
 8010e0c:	40010000 	.word	0x40010000
 8010e10:	40010400 	.word	0x40010400
 8010e14:	40000400 	.word	0x40000400
 8010e18:	40000800 	.word	0x40000800
 8010e1c:	40000c00 	.word	0x40000c00
 8010e20:	40014000 	.word	0x40014000
 8010e24:	40001800 	.word	0x40001800

08010e28 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8010e28:	b580      	push	{r7, lr}
 8010e2a:	b082      	sub	sp, #8
 8010e2c:	af00      	add	r7, sp, #0
 8010e2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	d101      	bne.n	8010e3a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8010e36:	2301      	movs	r3, #1
 8010e38:	e041      	b.n	8010ebe <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010e40:	b2db      	uxtb	r3, r3
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	d106      	bne.n	8010e54 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	2200      	movs	r2, #0
 8010e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8010e4e:	6878      	ldr	r0, [r7, #4]
 8010e50:	f000 f839 	bl	8010ec6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	2202      	movs	r2, #2
 8010e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	681a      	ldr	r2, [r3, #0]
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	3304      	adds	r3, #4
 8010e64:	4619      	mov	r1, r3
 8010e66:	4610      	mov	r0, r2
 8010e68:	f000 fe0e 	bl	8011a88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	2201      	movs	r2, #1
 8010e70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	2201      	movs	r2, #1
 8010e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	2201      	movs	r2, #1
 8010e80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	2201      	movs	r2, #1
 8010e88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	2201      	movs	r2, #1
 8010e90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	2201      	movs	r2, #1
 8010e98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	2201      	movs	r2, #1
 8010ea0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	2201      	movs	r2, #1
 8010ea8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	2201      	movs	r2, #1
 8010eb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	2201      	movs	r2, #1
 8010eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8010ebc:	2300      	movs	r3, #0
}
 8010ebe:	4618      	mov	r0, r3
 8010ec0:	3708      	adds	r7, #8
 8010ec2:	46bd      	mov	sp, r7
 8010ec4:	bd80      	pop	{r7, pc}

08010ec6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8010ec6:	b480      	push	{r7}
 8010ec8:	b083      	sub	sp, #12
 8010eca:	af00      	add	r7, sp, #0
 8010ecc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8010ece:	bf00      	nop
 8010ed0:	370c      	adds	r7, #12
 8010ed2:	46bd      	mov	sp, r7
 8010ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ed8:	4770      	bx	lr
	...

08010edc <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8010edc:	b580      	push	{r7, lr}
 8010ede:	b084      	sub	sp, #16
 8010ee0:	af00      	add	r7, sp, #0
 8010ee2:	6078      	str	r0, [r7, #4]
 8010ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8010ee6:	683b      	ldr	r3, [r7, #0]
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	d104      	bne.n	8010ef6 <HAL_TIM_IC_Start+0x1a>
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010ef2:	b2db      	uxtb	r3, r3
 8010ef4:	e013      	b.n	8010f1e <HAL_TIM_IC_Start+0x42>
 8010ef6:	683b      	ldr	r3, [r7, #0]
 8010ef8:	2b04      	cmp	r3, #4
 8010efa:	d104      	bne.n	8010f06 <HAL_TIM_IC_Start+0x2a>
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8010f02:	b2db      	uxtb	r3, r3
 8010f04:	e00b      	b.n	8010f1e <HAL_TIM_IC_Start+0x42>
 8010f06:	683b      	ldr	r3, [r7, #0]
 8010f08:	2b08      	cmp	r3, #8
 8010f0a:	d104      	bne.n	8010f16 <HAL_TIM_IC_Start+0x3a>
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010f12:	b2db      	uxtb	r3, r3
 8010f14:	e003      	b.n	8010f1e <HAL_TIM_IC_Start+0x42>
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010f1c:	b2db      	uxtb	r3, r3
 8010f1e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8010f20:	683b      	ldr	r3, [r7, #0]
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	d104      	bne.n	8010f30 <HAL_TIM_IC_Start+0x54>
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010f2c:	b2db      	uxtb	r3, r3
 8010f2e:	e013      	b.n	8010f58 <HAL_TIM_IC_Start+0x7c>
 8010f30:	683b      	ldr	r3, [r7, #0]
 8010f32:	2b04      	cmp	r3, #4
 8010f34:	d104      	bne.n	8010f40 <HAL_TIM_IC_Start+0x64>
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010f3c:	b2db      	uxtb	r3, r3
 8010f3e:	e00b      	b.n	8010f58 <HAL_TIM_IC_Start+0x7c>
 8010f40:	683b      	ldr	r3, [r7, #0]
 8010f42:	2b08      	cmp	r3, #8
 8010f44:	d104      	bne.n	8010f50 <HAL_TIM_IC_Start+0x74>
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010f4c:	b2db      	uxtb	r3, r3
 8010f4e:	e003      	b.n	8010f58 <HAL_TIM_IC_Start+0x7c>
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010f56:	b2db      	uxtb	r3, r3
 8010f58:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8010f5a:	7bfb      	ldrb	r3, [r7, #15]
 8010f5c:	2b01      	cmp	r3, #1
 8010f5e:	d102      	bne.n	8010f66 <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8010f60:	7bbb      	ldrb	r3, [r7, #14]
 8010f62:	2b01      	cmp	r3, #1
 8010f64:	d001      	beq.n	8010f6a <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 8010f66:	2301      	movs	r3, #1
 8010f68:	e081      	b.n	801106e <HAL_TIM_IC_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8010f6a:	683b      	ldr	r3, [r7, #0]
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	d104      	bne.n	8010f7a <HAL_TIM_IC_Start+0x9e>
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	2202      	movs	r2, #2
 8010f74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010f78:	e013      	b.n	8010fa2 <HAL_TIM_IC_Start+0xc6>
 8010f7a:	683b      	ldr	r3, [r7, #0]
 8010f7c:	2b04      	cmp	r3, #4
 8010f7e:	d104      	bne.n	8010f8a <HAL_TIM_IC_Start+0xae>
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	2202      	movs	r2, #2
 8010f84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010f88:	e00b      	b.n	8010fa2 <HAL_TIM_IC_Start+0xc6>
 8010f8a:	683b      	ldr	r3, [r7, #0]
 8010f8c:	2b08      	cmp	r3, #8
 8010f8e:	d104      	bne.n	8010f9a <HAL_TIM_IC_Start+0xbe>
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	2202      	movs	r2, #2
 8010f94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010f98:	e003      	b.n	8010fa2 <HAL_TIM_IC_Start+0xc6>
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	2202      	movs	r2, #2
 8010f9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8010fa2:	683b      	ldr	r3, [r7, #0]
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	d104      	bne.n	8010fb2 <HAL_TIM_IC_Start+0xd6>
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	2202      	movs	r2, #2
 8010fac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010fb0:	e013      	b.n	8010fda <HAL_TIM_IC_Start+0xfe>
 8010fb2:	683b      	ldr	r3, [r7, #0]
 8010fb4:	2b04      	cmp	r3, #4
 8010fb6:	d104      	bne.n	8010fc2 <HAL_TIM_IC_Start+0xe6>
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	2202      	movs	r2, #2
 8010fbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010fc0:	e00b      	b.n	8010fda <HAL_TIM_IC_Start+0xfe>
 8010fc2:	683b      	ldr	r3, [r7, #0]
 8010fc4:	2b08      	cmp	r3, #8
 8010fc6:	d104      	bne.n	8010fd2 <HAL_TIM_IC_Start+0xf6>
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	2202      	movs	r2, #2
 8010fcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010fd0:	e003      	b.n	8010fda <HAL_TIM_IC_Start+0xfe>
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	2202      	movs	r2, #2
 8010fd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	681b      	ldr	r3, [r3, #0]
 8010fde:	2201      	movs	r2, #1
 8010fe0:	6839      	ldr	r1, [r7, #0]
 8010fe2:	4618      	mov	r0, r3
 8010fe4:	f001 f9f6 	bl	80123d4 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	681b      	ldr	r3, [r3, #0]
 8010fec:	4a22      	ldr	r2, [pc, #136]	; (8011078 <HAL_TIM_IC_Start+0x19c>)
 8010fee:	4293      	cmp	r3, r2
 8010ff0:	d022      	beq.n	8011038 <HAL_TIM_IC_Start+0x15c>
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	681b      	ldr	r3, [r3, #0]
 8010ff6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010ffa:	d01d      	beq.n	8011038 <HAL_TIM_IC_Start+0x15c>
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	681b      	ldr	r3, [r3, #0]
 8011000:	4a1e      	ldr	r2, [pc, #120]	; (801107c <HAL_TIM_IC_Start+0x1a0>)
 8011002:	4293      	cmp	r3, r2
 8011004:	d018      	beq.n	8011038 <HAL_TIM_IC_Start+0x15c>
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	681b      	ldr	r3, [r3, #0]
 801100a:	4a1d      	ldr	r2, [pc, #116]	; (8011080 <HAL_TIM_IC_Start+0x1a4>)
 801100c:	4293      	cmp	r3, r2
 801100e:	d013      	beq.n	8011038 <HAL_TIM_IC_Start+0x15c>
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	681b      	ldr	r3, [r3, #0]
 8011014:	4a1b      	ldr	r2, [pc, #108]	; (8011084 <HAL_TIM_IC_Start+0x1a8>)
 8011016:	4293      	cmp	r3, r2
 8011018:	d00e      	beq.n	8011038 <HAL_TIM_IC_Start+0x15c>
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	681b      	ldr	r3, [r3, #0]
 801101e:	4a1a      	ldr	r2, [pc, #104]	; (8011088 <HAL_TIM_IC_Start+0x1ac>)
 8011020:	4293      	cmp	r3, r2
 8011022:	d009      	beq.n	8011038 <HAL_TIM_IC_Start+0x15c>
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	681b      	ldr	r3, [r3, #0]
 8011028:	4a18      	ldr	r2, [pc, #96]	; (801108c <HAL_TIM_IC_Start+0x1b0>)
 801102a:	4293      	cmp	r3, r2
 801102c:	d004      	beq.n	8011038 <HAL_TIM_IC_Start+0x15c>
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	681b      	ldr	r3, [r3, #0]
 8011032:	4a17      	ldr	r2, [pc, #92]	; (8011090 <HAL_TIM_IC_Start+0x1b4>)
 8011034:	4293      	cmp	r3, r2
 8011036:	d111      	bne.n	801105c <HAL_TIM_IC_Start+0x180>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	681b      	ldr	r3, [r3, #0]
 801103c:	689b      	ldr	r3, [r3, #8]
 801103e:	f003 0307 	and.w	r3, r3, #7
 8011042:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011044:	68bb      	ldr	r3, [r7, #8]
 8011046:	2b06      	cmp	r3, #6
 8011048:	d010      	beq.n	801106c <HAL_TIM_IC_Start+0x190>
    {
      __HAL_TIM_ENABLE(htim);
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	681b      	ldr	r3, [r3, #0]
 801104e:	681a      	ldr	r2, [r3, #0]
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	681b      	ldr	r3, [r3, #0]
 8011054:	f042 0201 	orr.w	r2, r2, #1
 8011058:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801105a:	e007      	b.n	801106c <HAL_TIM_IC_Start+0x190>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	681b      	ldr	r3, [r3, #0]
 8011060:	681a      	ldr	r2, [r3, #0]
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	681b      	ldr	r3, [r3, #0]
 8011066:	f042 0201 	orr.w	r2, r2, #1
 801106a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801106c:	2300      	movs	r3, #0
}
 801106e:	4618      	mov	r0, r3
 8011070:	3710      	adds	r7, #16
 8011072:	46bd      	mov	sp, r7
 8011074:	bd80      	pop	{r7, pc}
 8011076:	bf00      	nop
 8011078:	40010000 	.word	0x40010000
 801107c:	40000400 	.word	0x40000400
 8011080:	40000800 	.word	0x40000800
 8011084:	40000c00 	.word	0x40000c00
 8011088:	40010400 	.word	0x40010400
 801108c:	40014000 	.word	0x40014000
 8011090:	40001800 	.word	0x40001800

08011094 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8011094:	b580      	push	{r7, lr}
 8011096:	b084      	sub	sp, #16
 8011098:	af00      	add	r7, sp, #0
 801109a:	6078      	str	r0, [r7, #4]
 801109c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801109e:	2300      	movs	r3, #0
 80110a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80110a2:	683b      	ldr	r3, [r7, #0]
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	d104      	bne.n	80110b2 <HAL_TIM_IC_Start_IT+0x1e>
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80110ae:	b2db      	uxtb	r3, r3
 80110b0:	e013      	b.n	80110da <HAL_TIM_IC_Start_IT+0x46>
 80110b2:	683b      	ldr	r3, [r7, #0]
 80110b4:	2b04      	cmp	r3, #4
 80110b6:	d104      	bne.n	80110c2 <HAL_TIM_IC_Start_IT+0x2e>
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80110be:	b2db      	uxtb	r3, r3
 80110c0:	e00b      	b.n	80110da <HAL_TIM_IC_Start_IT+0x46>
 80110c2:	683b      	ldr	r3, [r7, #0]
 80110c4:	2b08      	cmp	r3, #8
 80110c6:	d104      	bne.n	80110d2 <HAL_TIM_IC_Start_IT+0x3e>
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80110ce:	b2db      	uxtb	r3, r3
 80110d0:	e003      	b.n	80110da <HAL_TIM_IC_Start_IT+0x46>
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80110d8:	b2db      	uxtb	r3, r3
 80110da:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80110dc:	683b      	ldr	r3, [r7, #0]
 80110de:	2b00      	cmp	r3, #0
 80110e0:	d104      	bne.n	80110ec <HAL_TIM_IC_Start_IT+0x58>
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80110e8:	b2db      	uxtb	r3, r3
 80110ea:	e013      	b.n	8011114 <HAL_TIM_IC_Start_IT+0x80>
 80110ec:	683b      	ldr	r3, [r7, #0]
 80110ee:	2b04      	cmp	r3, #4
 80110f0:	d104      	bne.n	80110fc <HAL_TIM_IC_Start_IT+0x68>
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80110f8:	b2db      	uxtb	r3, r3
 80110fa:	e00b      	b.n	8011114 <HAL_TIM_IC_Start_IT+0x80>
 80110fc:	683b      	ldr	r3, [r7, #0]
 80110fe:	2b08      	cmp	r3, #8
 8011100:	d104      	bne.n	801110c <HAL_TIM_IC_Start_IT+0x78>
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011108:	b2db      	uxtb	r3, r3
 801110a:	e003      	b.n	8011114 <HAL_TIM_IC_Start_IT+0x80>
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011112:	b2db      	uxtb	r3, r3
 8011114:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8011116:	7bbb      	ldrb	r3, [r7, #14]
 8011118:	2b01      	cmp	r3, #1
 801111a:	d102      	bne.n	8011122 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 801111c:	7b7b      	ldrb	r3, [r7, #13]
 801111e:	2b01      	cmp	r3, #1
 8011120:	d001      	beq.n	8011126 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8011122:	2301      	movs	r3, #1
 8011124:	e0cc      	b.n	80112c0 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8011126:	683b      	ldr	r3, [r7, #0]
 8011128:	2b00      	cmp	r3, #0
 801112a:	d104      	bne.n	8011136 <HAL_TIM_IC_Start_IT+0xa2>
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	2202      	movs	r2, #2
 8011130:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8011134:	e013      	b.n	801115e <HAL_TIM_IC_Start_IT+0xca>
 8011136:	683b      	ldr	r3, [r7, #0]
 8011138:	2b04      	cmp	r3, #4
 801113a:	d104      	bne.n	8011146 <HAL_TIM_IC_Start_IT+0xb2>
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	2202      	movs	r2, #2
 8011140:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8011144:	e00b      	b.n	801115e <HAL_TIM_IC_Start_IT+0xca>
 8011146:	683b      	ldr	r3, [r7, #0]
 8011148:	2b08      	cmp	r3, #8
 801114a:	d104      	bne.n	8011156 <HAL_TIM_IC_Start_IT+0xc2>
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	2202      	movs	r2, #2
 8011150:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8011154:	e003      	b.n	801115e <HAL_TIM_IC_Start_IT+0xca>
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	2202      	movs	r2, #2
 801115a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801115e:	683b      	ldr	r3, [r7, #0]
 8011160:	2b00      	cmp	r3, #0
 8011162:	d104      	bne.n	801116e <HAL_TIM_IC_Start_IT+0xda>
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	2202      	movs	r2, #2
 8011168:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801116c:	e013      	b.n	8011196 <HAL_TIM_IC_Start_IT+0x102>
 801116e:	683b      	ldr	r3, [r7, #0]
 8011170:	2b04      	cmp	r3, #4
 8011172:	d104      	bne.n	801117e <HAL_TIM_IC_Start_IT+0xea>
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	2202      	movs	r2, #2
 8011178:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801117c:	e00b      	b.n	8011196 <HAL_TIM_IC_Start_IT+0x102>
 801117e:	683b      	ldr	r3, [r7, #0]
 8011180:	2b08      	cmp	r3, #8
 8011182:	d104      	bne.n	801118e <HAL_TIM_IC_Start_IT+0xfa>
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	2202      	movs	r2, #2
 8011188:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801118c:	e003      	b.n	8011196 <HAL_TIM_IC_Start_IT+0x102>
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	2202      	movs	r2, #2
 8011192:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011196:	683b      	ldr	r3, [r7, #0]
 8011198:	2b0c      	cmp	r3, #12
 801119a:	d841      	bhi.n	8011220 <HAL_TIM_IC_Start_IT+0x18c>
 801119c:	a201      	add	r2, pc, #4	; (adr r2, 80111a4 <HAL_TIM_IC_Start_IT+0x110>)
 801119e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80111a2:	bf00      	nop
 80111a4:	080111d9 	.word	0x080111d9
 80111a8:	08011221 	.word	0x08011221
 80111ac:	08011221 	.word	0x08011221
 80111b0:	08011221 	.word	0x08011221
 80111b4:	080111eb 	.word	0x080111eb
 80111b8:	08011221 	.word	0x08011221
 80111bc:	08011221 	.word	0x08011221
 80111c0:	08011221 	.word	0x08011221
 80111c4:	080111fd 	.word	0x080111fd
 80111c8:	08011221 	.word	0x08011221
 80111cc:	08011221 	.word	0x08011221
 80111d0:	08011221 	.word	0x08011221
 80111d4:	0801120f 	.word	0x0801120f
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	681b      	ldr	r3, [r3, #0]
 80111dc:	68da      	ldr	r2, [r3, #12]
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	681b      	ldr	r3, [r3, #0]
 80111e2:	f042 0202 	orr.w	r2, r2, #2
 80111e6:	60da      	str	r2, [r3, #12]
      break;
 80111e8:	e01d      	b.n	8011226 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	681b      	ldr	r3, [r3, #0]
 80111ee:	68da      	ldr	r2, [r3, #12]
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	681b      	ldr	r3, [r3, #0]
 80111f4:	f042 0204 	orr.w	r2, r2, #4
 80111f8:	60da      	str	r2, [r3, #12]
      break;
 80111fa:	e014      	b.n	8011226 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	681b      	ldr	r3, [r3, #0]
 8011200:	68da      	ldr	r2, [r3, #12]
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	681b      	ldr	r3, [r3, #0]
 8011206:	f042 0208 	orr.w	r2, r2, #8
 801120a:	60da      	str	r2, [r3, #12]
      break;
 801120c:	e00b      	b.n	8011226 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	681b      	ldr	r3, [r3, #0]
 8011212:	68da      	ldr	r2, [r3, #12]
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	681b      	ldr	r3, [r3, #0]
 8011218:	f042 0210 	orr.w	r2, r2, #16
 801121c:	60da      	str	r2, [r3, #12]
      break;
 801121e:	e002      	b.n	8011226 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8011220:	2301      	movs	r3, #1
 8011222:	73fb      	strb	r3, [r7, #15]
      break;
 8011224:	bf00      	nop
  }

  if (status == HAL_OK)
 8011226:	7bfb      	ldrb	r3, [r7, #15]
 8011228:	2b00      	cmp	r3, #0
 801122a:	d148      	bne.n	80112be <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	681b      	ldr	r3, [r3, #0]
 8011230:	2201      	movs	r2, #1
 8011232:	6839      	ldr	r1, [r7, #0]
 8011234:	4618      	mov	r0, r3
 8011236:	f001 f8cd 	bl	80123d4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	681b      	ldr	r3, [r3, #0]
 801123e:	4a22      	ldr	r2, [pc, #136]	; (80112c8 <HAL_TIM_IC_Start_IT+0x234>)
 8011240:	4293      	cmp	r3, r2
 8011242:	d022      	beq.n	801128a <HAL_TIM_IC_Start_IT+0x1f6>
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	681b      	ldr	r3, [r3, #0]
 8011248:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801124c:	d01d      	beq.n	801128a <HAL_TIM_IC_Start_IT+0x1f6>
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	681b      	ldr	r3, [r3, #0]
 8011252:	4a1e      	ldr	r2, [pc, #120]	; (80112cc <HAL_TIM_IC_Start_IT+0x238>)
 8011254:	4293      	cmp	r3, r2
 8011256:	d018      	beq.n	801128a <HAL_TIM_IC_Start_IT+0x1f6>
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	681b      	ldr	r3, [r3, #0]
 801125c:	4a1c      	ldr	r2, [pc, #112]	; (80112d0 <HAL_TIM_IC_Start_IT+0x23c>)
 801125e:	4293      	cmp	r3, r2
 8011260:	d013      	beq.n	801128a <HAL_TIM_IC_Start_IT+0x1f6>
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	681b      	ldr	r3, [r3, #0]
 8011266:	4a1b      	ldr	r2, [pc, #108]	; (80112d4 <HAL_TIM_IC_Start_IT+0x240>)
 8011268:	4293      	cmp	r3, r2
 801126a:	d00e      	beq.n	801128a <HAL_TIM_IC_Start_IT+0x1f6>
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	681b      	ldr	r3, [r3, #0]
 8011270:	4a19      	ldr	r2, [pc, #100]	; (80112d8 <HAL_TIM_IC_Start_IT+0x244>)
 8011272:	4293      	cmp	r3, r2
 8011274:	d009      	beq.n	801128a <HAL_TIM_IC_Start_IT+0x1f6>
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	681b      	ldr	r3, [r3, #0]
 801127a:	4a18      	ldr	r2, [pc, #96]	; (80112dc <HAL_TIM_IC_Start_IT+0x248>)
 801127c:	4293      	cmp	r3, r2
 801127e:	d004      	beq.n	801128a <HAL_TIM_IC_Start_IT+0x1f6>
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	681b      	ldr	r3, [r3, #0]
 8011284:	4a16      	ldr	r2, [pc, #88]	; (80112e0 <HAL_TIM_IC_Start_IT+0x24c>)
 8011286:	4293      	cmp	r3, r2
 8011288:	d111      	bne.n	80112ae <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	681b      	ldr	r3, [r3, #0]
 801128e:	689b      	ldr	r3, [r3, #8]
 8011290:	f003 0307 	and.w	r3, r3, #7
 8011294:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011296:	68bb      	ldr	r3, [r7, #8]
 8011298:	2b06      	cmp	r3, #6
 801129a:	d010      	beq.n	80112be <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	681b      	ldr	r3, [r3, #0]
 80112a0:	681a      	ldr	r2, [r3, #0]
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	681b      	ldr	r3, [r3, #0]
 80112a6:	f042 0201 	orr.w	r2, r2, #1
 80112aa:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80112ac:	e007      	b.n	80112be <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	681b      	ldr	r3, [r3, #0]
 80112b2:	681a      	ldr	r2, [r3, #0]
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	681b      	ldr	r3, [r3, #0]
 80112b8:	f042 0201 	orr.w	r2, r2, #1
 80112bc:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80112be:	7bfb      	ldrb	r3, [r7, #15]
}
 80112c0:	4618      	mov	r0, r3
 80112c2:	3710      	adds	r7, #16
 80112c4:	46bd      	mov	sp, r7
 80112c6:	bd80      	pop	{r7, pc}
 80112c8:	40010000 	.word	0x40010000
 80112cc:	40000400 	.word	0x40000400
 80112d0:	40000800 	.word	0x40000800
 80112d4:	40000c00 	.word	0x40000c00
 80112d8:	40010400 	.word	0x40010400
 80112dc:	40014000 	.word	0x40014000
 80112e0:	40001800 	.word	0x40001800

080112e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80112e4:	b580      	push	{r7, lr}
 80112e6:	b082      	sub	sp, #8
 80112e8:	af00      	add	r7, sp, #0
 80112ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	681b      	ldr	r3, [r3, #0]
 80112f0:	691b      	ldr	r3, [r3, #16]
 80112f2:	f003 0302 	and.w	r3, r3, #2
 80112f6:	2b02      	cmp	r3, #2
 80112f8:	d122      	bne.n	8011340 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	681b      	ldr	r3, [r3, #0]
 80112fe:	68db      	ldr	r3, [r3, #12]
 8011300:	f003 0302 	and.w	r3, r3, #2
 8011304:	2b02      	cmp	r3, #2
 8011306:	d11b      	bne.n	8011340 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	681b      	ldr	r3, [r3, #0]
 801130c:	f06f 0202 	mvn.w	r2, #2
 8011310:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	2201      	movs	r2, #1
 8011316:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	681b      	ldr	r3, [r3, #0]
 801131c:	699b      	ldr	r3, [r3, #24]
 801131e:	f003 0303 	and.w	r3, r3, #3
 8011322:	2b00      	cmp	r3, #0
 8011324:	d003      	beq.n	801132e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8011326:	6878      	ldr	r0, [r7, #4]
 8011328:	f7ef ffde 	bl	80012e8 <HAL_TIM_IC_CaptureCallback>
 801132c:	e005      	b.n	801133a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801132e:	6878      	ldr	r0, [r7, #4]
 8011330:	f000 fb8c 	bl	8011a4c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011334:	6878      	ldr	r0, [r7, #4]
 8011336:	f000 fb93 	bl	8011a60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	2200      	movs	r2, #0
 801133e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	681b      	ldr	r3, [r3, #0]
 8011344:	691b      	ldr	r3, [r3, #16]
 8011346:	f003 0304 	and.w	r3, r3, #4
 801134a:	2b04      	cmp	r3, #4
 801134c:	d122      	bne.n	8011394 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	681b      	ldr	r3, [r3, #0]
 8011352:	68db      	ldr	r3, [r3, #12]
 8011354:	f003 0304 	and.w	r3, r3, #4
 8011358:	2b04      	cmp	r3, #4
 801135a:	d11b      	bne.n	8011394 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	681b      	ldr	r3, [r3, #0]
 8011360:	f06f 0204 	mvn.w	r2, #4
 8011364:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	2202      	movs	r2, #2
 801136a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	681b      	ldr	r3, [r3, #0]
 8011370:	699b      	ldr	r3, [r3, #24]
 8011372:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8011376:	2b00      	cmp	r3, #0
 8011378:	d003      	beq.n	8011382 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801137a:	6878      	ldr	r0, [r7, #4]
 801137c:	f7ef ffb4 	bl	80012e8 <HAL_TIM_IC_CaptureCallback>
 8011380:	e005      	b.n	801138e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011382:	6878      	ldr	r0, [r7, #4]
 8011384:	f000 fb62 	bl	8011a4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011388:	6878      	ldr	r0, [r7, #4]
 801138a:	f000 fb69 	bl	8011a60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	2200      	movs	r2, #0
 8011392:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	681b      	ldr	r3, [r3, #0]
 8011398:	691b      	ldr	r3, [r3, #16]
 801139a:	f003 0308 	and.w	r3, r3, #8
 801139e:	2b08      	cmp	r3, #8
 80113a0:	d122      	bne.n	80113e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	681b      	ldr	r3, [r3, #0]
 80113a6:	68db      	ldr	r3, [r3, #12]
 80113a8:	f003 0308 	and.w	r3, r3, #8
 80113ac:	2b08      	cmp	r3, #8
 80113ae:	d11b      	bne.n	80113e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	681b      	ldr	r3, [r3, #0]
 80113b4:	f06f 0208 	mvn.w	r2, #8
 80113b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	2204      	movs	r2, #4
 80113be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	681b      	ldr	r3, [r3, #0]
 80113c4:	69db      	ldr	r3, [r3, #28]
 80113c6:	f003 0303 	and.w	r3, r3, #3
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	d003      	beq.n	80113d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80113ce:	6878      	ldr	r0, [r7, #4]
 80113d0:	f7ef ff8a 	bl	80012e8 <HAL_TIM_IC_CaptureCallback>
 80113d4:	e005      	b.n	80113e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80113d6:	6878      	ldr	r0, [r7, #4]
 80113d8:	f000 fb38 	bl	8011a4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80113dc:	6878      	ldr	r0, [r7, #4]
 80113de:	f000 fb3f 	bl	8011a60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	2200      	movs	r2, #0
 80113e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	681b      	ldr	r3, [r3, #0]
 80113ec:	691b      	ldr	r3, [r3, #16]
 80113ee:	f003 0310 	and.w	r3, r3, #16
 80113f2:	2b10      	cmp	r3, #16
 80113f4:	d122      	bne.n	801143c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	681b      	ldr	r3, [r3, #0]
 80113fa:	68db      	ldr	r3, [r3, #12]
 80113fc:	f003 0310 	and.w	r3, r3, #16
 8011400:	2b10      	cmp	r3, #16
 8011402:	d11b      	bne.n	801143c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	681b      	ldr	r3, [r3, #0]
 8011408:	f06f 0210 	mvn.w	r2, #16
 801140c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	2208      	movs	r2, #8
 8011412:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	681b      	ldr	r3, [r3, #0]
 8011418:	69db      	ldr	r3, [r3, #28]
 801141a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801141e:	2b00      	cmp	r3, #0
 8011420:	d003      	beq.n	801142a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8011422:	6878      	ldr	r0, [r7, #4]
 8011424:	f7ef ff60 	bl	80012e8 <HAL_TIM_IC_CaptureCallback>
 8011428:	e005      	b.n	8011436 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801142a:	6878      	ldr	r0, [r7, #4]
 801142c:	f000 fb0e 	bl	8011a4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011430:	6878      	ldr	r0, [r7, #4]
 8011432:	f000 fb15 	bl	8011a60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	2200      	movs	r2, #0
 801143a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	681b      	ldr	r3, [r3, #0]
 8011440:	691b      	ldr	r3, [r3, #16]
 8011442:	f003 0301 	and.w	r3, r3, #1
 8011446:	2b01      	cmp	r3, #1
 8011448:	d10e      	bne.n	8011468 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	681b      	ldr	r3, [r3, #0]
 801144e:	68db      	ldr	r3, [r3, #12]
 8011450:	f003 0301 	and.w	r3, r3, #1
 8011454:	2b01      	cmp	r3, #1
 8011456:	d107      	bne.n	8011468 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	681b      	ldr	r3, [r3, #0]
 801145c:	f06f 0201 	mvn.w	r2, #1
 8011460:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8011462:	6878      	ldr	r0, [r7, #4]
 8011464:	f7f2 f854 	bl	8003510 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	681b      	ldr	r3, [r3, #0]
 801146c:	691b      	ldr	r3, [r3, #16]
 801146e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011472:	2b80      	cmp	r3, #128	; 0x80
 8011474:	d10e      	bne.n	8011494 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	681b      	ldr	r3, [r3, #0]
 801147a:	68db      	ldr	r3, [r3, #12]
 801147c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011480:	2b80      	cmp	r3, #128	; 0x80
 8011482:	d107      	bne.n	8011494 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	681b      	ldr	r3, [r3, #0]
 8011488:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801148c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801148e:	6878      	ldr	r0, [r7, #4]
 8011490:	f001 f89e 	bl	80125d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	681b      	ldr	r3, [r3, #0]
 8011498:	691b      	ldr	r3, [r3, #16]
 801149a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801149e:	2b40      	cmp	r3, #64	; 0x40
 80114a0:	d10e      	bne.n	80114c0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	681b      	ldr	r3, [r3, #0]
 80114a6:	68db      	ldr	r3, [r3, #12]
 80114a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80114ac:	2b40      	cmp	r3, #64	; 0x40
 80114ae:	d107      	bne.n	80114c0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	681b      	ldr	r3, [r3, #0]
 80114b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80114b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80114ba:	6878      	ldr	r0, [r7, #4]
 80114bc:	f000 fada 	bl	8011a74 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	681b      	ldr	r3, [r3, #0]
 80114c4:	691b      	ldr	r3, [r3, #16]
 80114c6:	f003 0320 	and.w	r3, r3, #32
 80114ca:	2b20      	cmp	r3, #32
 80114cc:	d10e      	bne.n	80114ec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	681b      	ldr	r3, [r3, #0]
 80114d2:	68db      	ldr	r3, [r3, #12]
 80114d4:	f003 0320 	and.w	r3, r3, #32
 80114d8:	2b20      	cmp	r3, #32
 80114da:	d107      	bne.n	80114ec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	681b      	ldr	r3, [r3, #0]
 80114e0:	f06f 0220 	mvn.w	r2, #32
 80114e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80114e6:	6878      	ldr	r0, [r7, #4]
 80114e8:	f001 f868 	bl	80125bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80114ec:	bf00      	nop
 80114ee:	3708      	adds	r7, #8
 80114f0:	46bd      	mov	sp, r7
 80114f2:	bd80      	pop	{r7, pc}

080114f4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80114f4:	b580      	push	{r7, lr}
 80114f6:	b086      	sub	sp, #24
 80114f8:	af00      	add	r7, sp, #0
 80114fa:	60f8      	str	r0, [r7, #12]
 80114fc:	60b9      	str	r1, [r7, #8]
 80114fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011500:	2300      	movs	r3, #0
 8011502:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8011504:	68fb      	ldr	r3, [r7, #12]
 8011506:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801150a:	2b01      	cmp	r3, #1
 801150c:	d101      	bne.n	8011512 <HAL_TIM_IC_ConfigChannel+0x1e>
 801150e:	2302      	movs	r3, #2
 8011510:	e088      	b.n	8011624 <HAL_TIM_IC_ConfigChannel+0x130>
 8011512:	68fb      	ldr	r3, [r7, #12]
 8011514:	2201      	movs	r2, #1
 8011516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	2b00      	cmp	r3, #0
 801151e:	d11b      	bne.n	8011558 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8011520:	68fb      	ldr	r3, [r7, #12]
 8011522:	6818      	ldr	r0, [r3, #0]
 8011524:	68bb      	ldr	r3, [r7, #8]
 8011526:	6819      	ldr	r1, [r3, #0]
 8011528:	68bb      	ldr	r3, [r7, #8]
 801152a:	685a      	ldr	r2, [r3, #4]
 801152c:	68bb      	ldr	r3, [r7, #8]
 801152e:	68db      	ldr	r3, [r3, #12]
 8011530:	f000 fd8c 	bl	801204c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8011534:	68fb      	ldr	r3, [r7, #12]
 8011536:	681b      	ldr	r3, [r3, #0]
 8011538:	699a      	ldr	r2, [r3, #24]
 801153a:	68fb      	ldr	r3, [r7, #12]
 801153c:	681b      	ldr	r3, [r3, #0]
 801153e:	f022 020c 	bic.w	r2, r2, #12
 8011542:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8011544:	68fb      	ldr	r3, [r7, #12]
 8011546:	681b      	ldr	r3, [r3, #0]
 8011548:	6999      	ldr	r1, [r3, #24]
 801154a:	68bb      	ldr	r3, [r7, #8]
 801154c:	689a      	ldr	r2, [r3, #8]
 801154e:	68fb      	ldr	r3, [r7, #12]
 8011550:	681b      	ldr	r3, [r3, #0]
 8011552:	430a      	orrs	r2, r1
 8011554:	619a      	str	r2, [r3, #24]
 8011556:	e060      	b.n	801161a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	2b04      	cmp	r3, #4
 801155c:	d11c      	bne.n	8011598 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 801155e:	68fb      	ldr	r3, [r7, #12]
 8011560:	6818      	ldr	r0, [r3, #0]
 8011562:	68bb      	ldr	r3, [r7, #8]
 8011564:	6819      	ldr	r1, [r3, #0]
 8011566:	68bb      	ldr	r3, [r7, #8]
 8011568:	685a      	ldr	r2, [r3, #4]
 801156a:	68bb      	ldr	r3, [r7, #8]
 801156c:	68db      	ldr	r3, [r3, #12]
 801156e:	f000 fe10 	bl	8012192 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8011572:	68fb      	ldr	r3, [r7, #12]
 8011574:	681b      	ldr	r3, [r3, #0]
 8011576:	699a      	ldr	r2, [r3, #24]
 8011578:	68fb      	ldr	r3, [r7, #12]
 801157a:	681b      	ldr	r3, [r3, #0]
 801157c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8011580:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8011582:	68fb      	ldr	r3, [r7, #12]
 8011584:	681b      	ldr	r3, [r3, #0]
 8011586:	6999      	ldr	r1, [r3, #24]
 8011588:	68bb      	ldr	r3, [r7, #8]
 801158a:	689b      	ldr	r3, [r3, #8]
 801158c:	021a      	lsls	r2, r3, #8
 801158e:	68fb      	ldr	r3, [r7, #12]
 8011590:	681b      	ldr	r3, [r3, #0]
 8011592:	430a      	orrs	r2, r1
 8011594:	619a      	str	r2, [r3, #24]
 8011596:	e040      	b.n	801161a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	2b08      	cmp	r3, #8
 801159c:	d11b      	bne.n	80115d6 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 801159e:	68fb      	ldr	r3, [r7, #12]
 80115a0:	6818      	ldr	r0, [r3, #0]
 80115a2:	68bb      	ldr	r3, [r7, #8]
 80115a4:	6819      	ldr	r1, [r3, #0]
 80115a6:	68bb      	ldr	r3, [r7, #8]
 80115a8:	685a      	ldr	r2, [r3, #4]
 80115aa:	68bb      	ldr	r3, [r7, #8]
 80115ac:	68db      	ldr	r3, [r3, #12]
 80115ae:	f000 fe5d 	bl	801226c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80115b2:	68fb      	ldr	r3, [r7, #12]
 80115b4:	681b      	ldr	r3, [r3, #0]
 80115b6:	69da      	ldr	r2, [r3, #28]
 80115b8:	68fb      	ldr	r3, [r7, #12]
 80115ba:	681b      	ldr	r3, [r3, #0]
 80115bc:	f022 020c 	bic.w	r2, r2, #12
 80115c0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80115c2:	68fb      	ldr	r3, [r7, #12]
 80115c4:	681b      	ldr	r3, [r3, #0]
 80115c6:	69d9      	ldr	r1, [r3, #28]
 80115c8:	68bb      	ldr	r3, [r7, #8]
 80115ca:	689a      	ldr	r2, [r3, #8]
 80115cc:	68fb      	ldr	r3, [r7, #12]
 80115ce:	681b      	ldr	r3, [r3, #0]
 80115d0:	430a      	orrs	r2, r1
 80115d2:	61da      	str	r2, [r3, #28]
 80115d4:	e021      	b.n	801161a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	2b0c      	cmp	r3, #12
 80115da:	d11c      	bne.n	8011616 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80115dc:	68fb      	ldr	r3, [r7, #12]
 80115de:	6818      	ldr	r0, [r3, #0]
 80115e0:	68bb      	ldr	r3, [r7, #8]
 80115e2:	6819      	ldr	r1, [r3, #0]
 80115e4:	68bb      	ldr	r3, [r7, #8]
 80115e6:	685a      	ldr	r2, [r3, #4]
 80115e8:	68bb      	ldr	r3, [r7, #8]
 80115ea:	68db      	ldr	r3, [r3, #12]
 80115ec:	f000 fe7a 	bl	80122e4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80115f0:	68fb      	ldr	r3, [r7, #12]
 80115f2:	681b      	ldr	r3, [r3, #0]
 80115f4:	69da      	ldr	r2, [r3, #28]
 80115f6:	68fb      	ldr	r3, [r7, #12]
 80115f8:	681b      	ldr	r3, [r3, #0]
 80115fa:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80115fe:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8011600:	68fb      	ldr	r3, [r7, #12]
 8011602:	681b      	ldr	r3, [r3, #0]
 8011604:	69d9      	ldr	r1, [r3, #28]
 8011606:	68bb      	ldr	r3, [r7, #8]
 8011608:	689b      	ldr	r3, [r3, #8]
 801160a:	021a      	lsls	r2, r3, #8
 801160c:	68fb      	ldr	r3, [r7, #12]
 801160e:	681b      	ldr	r3, [r3, #0]
 8011610:	430a      	orrs	r2, r1
 8011612:	61da      	str	r2, [r3, #28]
 8011614:	e001      	b.n	801161a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8011616:	2301      	movs	r3, #1
 8011618:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 801161a:	68fb      	ldr	r3, [r7, #12]
 801161c:	2200      	movs	r2, #0
 801161e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8011622:	7dfb      	ldrb	r3, [r7, #23]
}
 8011624:	4618      	mov	r0, r3
 8011626:	3718      	adds	r7, #24
 8011628:	46bd      	mov	sp, r7
 801162a:	bd80      	pop	{r7, pc}

0801162c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801162c:	b580      	push	{r7, lr}
 801162e:	b086      	sub	sp, #24
 8011630:	af00      	add	r7, sp, #0
 8011632:	60f8      	str	r0, [r7, #12]
 8011634:	60b9      	str	r1, [r7, #8]
 8011636:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011638:	2300      	movs	r3, #0
 801163a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801163c:	68fb      	ldr	r3, [r7, #12]
 801163e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011642:	2b01      	cmp	r3, #1
 8011644:	d101      	bne.n	801164a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8011646:	2302      	movs	r3, #2
 8011648:	e0ae      	b.n	80117a8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 801164a:	68fb      	ldr	r3, [r7, #12]
 801164c:	2201      	movs	r2, #1
 801164e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	2b0c      	cmp	r3, #12
 8011656:	f200 809f 	bhi.w	8011798 <HAL_TIM_PWM_ConfigChannel+0x16c>
 801165a:	a201      	add	r2, pc, #4	; (adr r2, 8011660 <HAL_TIM_PWM_ConfigChannel+0x34>)
 801165c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011660:	08011695 	.word	0x08011695
 8011664:	08011799 	.word	0x08011799
 8011668:	08011799 	.word	0x08011799
 801166c:	08011799 	.word	0x08011799
 8011670:	080116d5 	.word	0x080116d5
 8011674:	08011799 	.word	0x08011799
 8011678:	08011799 	.word	0x08011799
 801167c:	08011799 	.word	0x08011799
 8011680:	08011717 	.word	0x08011717
 8011684:	08011799 	.word	0x08011799
 8011688:	08011799 	.word	0x08011799
 801168c:	08011799 	.word	0x08011799
 8011690:	08011757 	.word	0x08011757
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8011694:	68fb      	ldr	r3, [r7, #12]
 8011696:	681b      	ldr	r3, [r3, #0]
 8011698:	68b9      	ldr	r1, [r7, #8]
 801169a:	4618      	mov	r0, r3
 801169c:	f000 fa94 	bl	8011bc8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80116a0:	68fb      	ldr	r3, [r7, #12]
 80116a2:	681b      	ldr	r3, [r3, #0]
 80116a4:	699a      	ldr	r2, [r3, #24]
 80116a6:	68fb      	ldr	r3, [r7, #12]
 80116a8:	681b      	ldr	r3, [r3, #0]
 80116aa:	f042 0208 	orr.w	r2, r2, #8
 80116ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80116b0:	68fb      	ldr	r3, [r7, #12]
 80116b2:	681b      	ldr	r3, [r3, #0]
 80116b4:	699a      	ldr	r2, [r3, #24]
 80116b6:	68fb      	ldr	r3, [r7, #12]
 80116b8:	681b      	ldr	r3, [r3, #0]
 80116ba:	f022 0204 	bic.w	r2, r2, #4
 80116be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80116c0:	68fb      	ldr	r3, [r7, #12]
 80116c2:	681b      	ldr	r3, [r3, #0]
 80116c4:	6999      	ldr	r1, [r3, #24]
 80116c6:	68bb      	ldr	r3, [r7, #8]
 80116c8:	691a      	ldr	r2, [r3, #16]
 80116ca:	68fb      	ldr	r3, [r7, #12]
 80116cc:	681b      	ldr	r3, [r3, #0]
 80116ce:	430a      	orrs	r2, r1
 80116d0:	619a      	str	r2, [r3, #24]
      break;
 80116d2:	e064      	b.n	801179e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80116d4:	68fb      	ldr	r3, [r7, #12]
 80116d6:	681b      	ldr	r3, [r3, #0]
 80116d8:	68b9      	ldr	r1, [r7, #8]
 80116da:	4618      	mov	r0, r3
 80116dc:	f000 fae4 	bl	8011ca8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80116e0:	68fb      	ldr	r3, [r7, #12]
 80116e2:	681b      	ldr	r3, [r3, #0]
 80116e4:	699a      	ldr	r2, [r3, #24]
 80116e6:	68fb      	ldr	r3, [r7, #12]
 80116e8:	681b      	ldr	r3, [r3, #0]
 80116ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80116ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80116f0:	68fb      	ldr	r3, [r7, #12]
 80116f2:	681b      	ldr	r3, [r3, #0]
 80116f4:	699a      	ldr	r2, [r3, #24]
 80116f6:	68fb      	ldr	r3, [r7, #12]
 80116f8:	681b      	ldr	r3, [r3, #0]
 80116fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80116fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8011700:	68fb      	ldr	r3, [r7, #12]
 8011702:	681b      	ldr	r3, [r3, #0]
 8011704:	6999      	ldr	r1, [r3, #24]
 8011706:	68bb      	ldr	r3, [r7, #8]
 8011708:	691b      	ldr	r3, [r3, #16]
 801170a:	021a      	lsls	r2, r3, #8
 801170c:	68fb      	ldr	r3, [r7, #12]
 801170e:	681b      	ldr	r3, [r3, #0]
 8011710:	430a      	orrs	r2, r1
 8011712:	619a      	str	r2, [r3, #24]
      break;
 8011714:	e043      	b.n	801179e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8011716:	68fb      	ldr	r3, [r7, #12]
 8011718:	681b      	ldr	r3, [r3, #0]
 801171a:	68b9      	ldr	r1, [r7, #8]
 801171c:	4618      	mov	r0, r3
 801171e:	f000 fb39 	bl	8011d94 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8011722:	68fb      	ldr	r3, [r7, #12]
 8011724:	681b      	ldr	r3, [r3, #0]
 8011726:	69da      	ldr	r2, [r3, #28]
 8011728:	68fb      	ldr	r3, [r7, #12]
 801172a:	681b      	ldr	r3, [r3, #0]
 801172c:	f042 0208 	orr.w	r2, r2, #8
 8011730:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8011732:	68fb      	ldr	r3, [r7, #12]
 8011734:	681b      	ldr	r3, [r3, #0]
 8011736:	69da      	ldr	r2, [r3, #28]
 8011738:	68fb      	ldr	r3, [r7, #12]
 801173a:	681b      	ldr	r3, [r3, #0]
 801173c:	f022 0204 	bic.w	r2, r2, #4
 8011740:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8011742:	68fb      	ldr	r3, [r7, #12]
 8011744:	681b      	ldr	r3, [r3, #0]
 8011746:	69d9      	ldr	r1, [r3, #28]
 8011748:	68bb      	ldr	r3, [r7, #8]
 801174a:	691a      	ldr	r2, [r3, #16]
 801174c:	68fb      	ldr	r3, [r7, #12]
 801174e:	681b      	ldr	r3, [r3, #0]
 8011750:	430a      	orrs	r2, r1
 8011752:	61da      	str	r2, [r3, #28]
      break;
 8011754:	e023      	b.n	801179e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8011756:	68fb      	ldr	r3, [r7, #12]
 8011758:	681b      	ldr	r3, [r3, #0]
 801175a:	68b9      	ldr	r1, [r7, #8]
 801175c:	4618      	mov	r0, r3
 801175e:	f000 fb8d 	bl	8011e7c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8011762:	68fb      	ldr	r3, [r7, #12]
 8011764:	681b      	ldr	r3, [r3, #0]
 8011766:	69da      	ldr	r2, [r3, #28]
 8011768:	68fb      	ldr	r3, [r7, #12]
 801176a:	681b      	ldr	r3, [r3, #0]
 801176c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011770:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8011772:	68fb      	ldr	r3, [r7, #12]
 8011774:	681b      	ldr	r3, [r3, #0]
 8011776:	69da      	ldr	r2, [r3, #28]
 8011778:	68fb      	ldr	r3, [r7, #12]
 801177a:	681b      	ldr	r3, [r3, #0]
 801177c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011780:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8011782:	68fb      	ldr	r3, [r7, #12]
 8011784:	681b      	ldr	r3, [r3, #0]
 8011786:	69d9      	ldr	r1, [r3, #28]
 8011788:	68bb      	ldr	r3, [r7, #8]
 801178a:	691b      	ldr	r3, [r3, #16]
 801178c:	021a      	lsls	r2, r3, #8
 801178e:	68fb      	ldr	r3, [r7, #12]
 8011790:	681b      	ldr	r3, [r3, #0]
 8011792:	430a      	orrs	r2, r1
 8011794:	61da      	str	r2, [r3, #28]
      break;
 8011796:	e002      	b.n	801179e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8011798:	2301      	movs	r3, #1
 801179a:	75fb      	strb	r3, [r7, #23]
      break;
 801179c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801179e:	68fb      	ldr	r3, [r7, #12]
 80117a0:	2200      	movs	r2, #0
 80117a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80117a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80117a8:	4618      	mov	r0, r3
 80117aa:	3718      	adds	r7, #24
 80117ac:	46bd      	mov	sp, r7
 80117ae:	bd80      	pop	{r7, pc}

080117b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80117b0:	b580      	push	{r7, lr}
 80117b2:	b084      	sub	sp, #16
 80117b4:	af00      	add	r7, sp, #0
 80117b6:	6078      	str	r0, [r7, #4]
 80117b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80117ba:	2300      	movs	r3, #0
 80117bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80117c4:	2b01      	cmp	r3, #1
 80117c6:	d101      	bne.n	80117cc <HAL_TIM_ConfigClockSource+0x1c>
 80117c8:	2302      	movs	r3, #2
 80117ca:	e0b4      	b.n	8011936 <HAL_TIM_ConfigClockSource+0x186>
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	2201      	movs	r2, #1
 80117d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	2202      	movs	r2, #2
 80117d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	681b      	ldr	r3, [r3, #0]
 80117e0:	689b      	ldr	r3, [r3, #8]
 80117e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80117e4:	68bb      	ldr	r3, [r7, #8]
 80117e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80117ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80117ec:	68bb      	ldr	r3, [r7, #8]
 80117ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80117f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	681b      	ldr	r3, [r3, #0]
 80117f8:	68ba      	ldr	r2, [r7, #8]
 80117fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80117fc:	683b      	ldr	r3, [r7, #0]
 80117fe:	681b      	ldr	r3, [r3, #0]
 8011800:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011804:	d03e      	beq.n	8011884 <HAL_TIM_ConfigClockSource+0xd4>
 8011806:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801180a:	f200 8087 	bhi.w	801191c <HAL_TIM_ConfigClockSource+0x16c>
 801180e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011812:	f000 8086 	beq.w	8011922 <HAL_TIM_ConfigClockSource+0x172>
 8011816:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801181a:	d87f      	bhi.n	801191c <HAL_TIM_ConfigClockSource+0x16c>
 801181c:	2b70      	cmp	r3, #112	; 0x70
 801181e:	d01a      	beq.n	8011856 <HAL_TIM_ConfigClockSource+0xa6>
 8011820:	2b70      	cmp	r3, #112	; 0x70
 8011822:	d87b      	bhi.n	801191c <HAL_TIM_ConfigClockSource+0x16c>
 8011824:	2b60      	cmp	r3, #96	; 0x60
 8011826:	d050      	beq.n	80118ca <HAL_TIM_ConfigClockSource+0x11a>
 8011828:	2b60      	cmp	r3, #96	; 0x60
 801182a:	d877      	bhi.n	801191c <HAL_TIM_ConfigClockSource+0x16c>
 801182c:	2b50      	cmp	r3, #80	; 0x50
 801182e:	d03c      	beq.n	80118aa <HAL_TIM_ConfigClockSource+0xfa>
 8011830:	2b50      	cmp	r3, #80	; 0x50
 8011832:	d873      	bhi.n	801191c <HAL_TIM_ConfigClockSource+0x16c>
 8011834:	2b40      	cmp	r3, #64	; 0x40
 8011836:	d058      	beq.n	80118ea <HAL_TIM_ConfigClockSource+0x13a>
 8011838:	2b40      	cmp	r3, #64	; 0x40
 801183a:	d86f      	bhi.n	801191c <HAL_TIM_ConfigClockSource+0x16c>
 801183c:	2b30      	cmp	r3, #48	; 0x30
 801183e:	d064      	beq.n	801190a <HAL_TIM_ConfigClockSource+0x15a>
 8011840:	2b30      	cmp	r3, #48	; 0x30
 8011842:	d86b      	bhi.n	801191c <HAL_TIM_ConfigClockSource+0x16c>
 8011844:	2b20      	cmp	r3, #32
 8011846:	d060      	beq.n	801190a <HAL_TIM_ConfigClockSource+0x15a>
 8011848:	2b20      	cmp	r3, #32
 801184a:	d867      	bhi.n	801191c <HAL_TIM_ConfigClockSource+0x16c>
 801184c:	2b00      	cmp	r3, #0
 801184e:	d05c      	beq.n	801190a <HAL_TIM_ConfigClockSource+0x15a>
 8011850:	2b10      	cmp	r3, #16
 8011852:	d05a      	beq.n	801190a <HAL_TIM_ConfigClockSource+0x15a>
 8011854:	e062      	b.n	801191c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	6818      	ldr	r0, [r3, #0]
 801185a:	683b      	ldr	r3, [r7, #0]
 801185c:	6899      	ldr	r1, [r3, #8]
 801185e:	683b      	ldr	r3, [r7, #0]
 8011860:	685a      	ldr	r2, [r3, #4]
 8011862:	683b      	ldr	r3, [r7, #0]
 8011864:	68db      	ldr	r3, [r3, #12]
 8011866:	f000 fd95 	bl	8012394 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	681b      	ldr	r3, [r3, #0]
 801186e:	689b      	ldr	r3, [r3, #8]
 8011870:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8011872:	68bb      	ldr	r3, [r7, #8]
 8011874:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8011878:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	681b      	ldr	r3, [r3, #0]
 801187e:	68ba      	ldr	r2, [r7, #8]
 8011880:	609a      	str	r2, [r3, #8]
      break;
 8011882:	e04f      	b.n	8011924 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	6818      	ldr	r0, [r3, #0]
 8011888:	683b      	ldr	r3, [r7, #0]
 801188a:	6899      	ldr	r1, [r3, #8]
 801188c:	683b      	ldr	r3, [r7, #0]
 801188e:	685a      	ldr	r2, [r3, #4]
 8011890:	683b      	ldr	r3, [r7, #0]
 8011892:	68db      	ldr	r3, [r3, #12]
 8011894:	f000 fd7e 	bl	8012394 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	681b      	ldr	r3, [r3, #0]
 801189c:	689a      	ldr	r2, [r3, #8]
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	681b      	ldr	r3, [r3, #0]
 80118a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80118a6:	609a      	str	r2, [r3, #8]
      break;
 80118a8:	e03c      	b.n	8011924 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	6818      	ldr	r0, [r3, #0]
 80118ae:	683b      	ldr	r3, [r7, #0]
 80118b0:	6859      	ldr	r1, [r3, #4]
 80118b2:	683b      	ldr	r3, [r7, #0]
 80118b4:	68db      	ldr	r3, [r3, #12]
 80118b6:	461a      	mov	r2, r3
 80118b8:	f000 fc3c 	bl	8012134 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	681b      	ldr	r3, [r3, #0]
 80118c0:	2150      	movs	r1, #80	; 0x50
 80118c2:	4618      	mov	r0, r3
 80118c4:	f000 fd4b 	bl	801235e <TIM_ITRx_SetConfig>
      break;
 80118c8:	e02c      	b.n	8011924 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	6818      	ldr	r0, [r3, #0]
 80118ce:	683b      	ldr	r3, [r7, #0]
 80118d0:	6859      	ldr	r1, [r3, #4]
 80118d2:	683b      	ldr	r3, [r7, #0]
 80118d4:	68db      	ldr	r3, [r3, #12]
 80118d6:	461a      	mov	r2, r3
 80118d8:	f000 fc98 	bl	801220c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	681b      	ldr	r3, [r3, #0]
 80118e0:	2160      	movs	r1, #96	; 0x60
 80118e2:	4618      	mov	r0, r3
 80118e4:	f000 fd3b 	bl	801235e <TIM_ITRx_SetConfig>
      break;
 80118e8:	e01c      	b.n	8011924 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	6818      	ldr	r0, [r3, #0]
 80118ee:	683b      	ldr	r3, [r7, #0]
 80118f0:	6859      	ldr	r1, [r3, #4]
 80118f2:	683b      	ldr	r3, [r7, #0]
 80118f4:	68db      	ldr	r3, [r3, #12]
 80118f6:	461a      	mov	r2, r3
 80118f8:	f000 fc1c 	bl	8012134 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	681b      	ldr	r3, [r3, #0]
 8011900:	2140      	movs	r1, #64	; 0x40
 8011902:	4618      	mov	r0, r3
 8011904:	f000 fd2b 	bl	801235e <TIM_ITRx_SetConfig>
      break;
 8011908:	e00c      	b.n	8011924 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	681a      	ldr	r2, [r3, #0]
 801190e:	683b      	ldr	r3, [r7, #0]
 8011910:	681b      	ldr	r3, [r3, #0]
 8011912:	4619      	mov	r1, r3
 8011914:	4610      	mov	r0, r2
 8011916:	f000 fd22 	bl	801235e <TIM_ITRx_SetConfig>
      break;
 801191a:	e003      	b.n	8011924 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 801191c:	2301      	movs	r3, #1
 801191e:	73fb      	strb	r3, [r7, #15]
      break;
 8011920:	e000      	b.n	8011924 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8011922:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	2201      	movs	r2, #1
 8011928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	2200      	movs	r2, #0
 8011930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8011934:	7bfb      	ldrb	r3, [r7, #15]
}
 8011936:	4618      	mov	r0, r3
 8011938:	3710      	adds	r7, #16
 801193a:	46bd      	mov	sp, r7
 801193c:	bd80      	pop	{r7, pc}

0801193e <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 801193e:	b580      	push	{r7, lr}
 8011940:	b082      	sub	sp, #8
 8011942:	af00      	add	r7, sp, #0
 8011944:	6078      	str	r0, [r7, #4]
 8011946:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801194e:	2b01      	cmp	r3, #1
 8011950:	d101      	bne.n	8011956 <HAL_TIM_SlaveConfigSynchro+0x18>
 8011952:	2302      	movs	r3, #2
 8011954:	e031      	b.n	80119ba <HAL_TIM_SlaveConfigSynchro+0x7c>
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	2201      	movs	r2, #1
 801195a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	2202      	movs	r2, #2
 8011962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8011966:	6839      	ldr	r1, [r7, #0]
 8011968:	6878      	ldr	r0, [r7, #4]
 801196a:	f000 fadd 	bl	8011f28 <TIM_SlaveTimer_SetConfig>
 801196e:	4603      	mov	r3, r0
 8011970:	2b00      	cmp	r3, #0
 8011972:	d009      	beq.n	8011988 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	2201      	movs	r2, #1
 8011978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	2200      	movs	r2, #0
 8011980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8011984:	2301      	movs	r3, #1
 8011986:	e018      	b.n	80119ba <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	681b      	ldr	r3, [r3, #0]
 801198c:	68da      	ldr	r2, [r3, #12]
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	681b      	ldr	r3, [r3, #0]
 8011992:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011996:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	681b      	ldr	r3, [r3, #0]
 801199c:	68da      	ldr	r2, [r3, #12]
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	681b      	ldr	r3, [r3, #0]
 80119a2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80119a6:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	2201      	movs	r2, #1
 80119ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	2200      	movs	r2, #0
 80119b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80119b8:	2300      	movs	r3, #0
}
 80119ba:	4618      	mov	r0, r3
 80119bc:	3708      	adds	r7, #8
 80119be:	46bd      	mov	sp, r7
 80119c0:	bd80      	pop	{r7, pc}
	...

080119c4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80119c4:	b480      	push	{r7}
 80119c6:	b085      	sub	sp, #20
 80119c8:	af00      	add	r7, sp, #0
 80119ca:	6078      	str	r0, [r7, #4]
 80119cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80119ce:	2300      	movs	r3, #0
 80119d0:	60fb      	str	r3, [r7, #12]
 80119d2:	683b      	ldr	r3, [r7, #0]
 80119d4:	2b0c      	cmp	r3, #12
 80119d6:	d831      	bhi.n	8011a3c <HAL_TIM_ReadCapturedValue+0x78>
 80119d8:	a201      	add	r2, pc, #4	; (adr r2, 80119e0 <HAL_TIM_ReadCapturedValue+0x1c>)
 80119da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80119de:	bf00      	nop
 80119e0:	08011a15 	.word	0x08011a15
 80119e4:	08011a3d 	.word	0x08011a3d
 80119e8:	08011a3d 	.word	0x08011a3d
 80119ec:	08011a3d 	.word	0x08011a3d
 80119f0:	08011a1f 	.word	0x08011a1f
 80119f4:	08011a3d 	.word	0x08011a3d
 80119f8:	08011a3d 	.word	0x08011a3d
 80119fc:	08011a3d 	.word	0x08011a3d
 8011a00:	08011a29 	.word	0x08011a29
 8011a04:	08011a3d 	.word	0x08011a3d
 8011a08:	08011a3d 	.word	0x08011a3d
 8011a0c:	08011a3d 	.word	0x08011a3d
 8011a10:	08011a33 	.word	0x08011a33
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	681b      	ldr	r3, [r3, #0]
 8011a18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011a1a:	60fb      	str	r3, [r7, #12]

      break;
 8011a1c:	e00f      	b.n	8011a3e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	681b      	ldr	r3, [r3, #0]
 8011a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011a24:	60fb      	str	r3, [r7, #12]

      break;
 8011a26:	e00a      	b.n	8011a3e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	681b      	ldr	r3, [r3, #0]
 8011a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011a2e:	60fb      	str	r3, [r7, #12]

      break;
 8011a30:	e005      	b.n	8011a3e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	681b      	ldr	r3, [r3, #0]
 8011a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011a38:	60fb      	str	r3, [r7, #12]

      break;
 8011a3a:	e000      	b.n	8011a3e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8011a3c:	bf00      	nop
  }

  return tmpreg;
 8011a3e:	68fb      	ldr	r3, [r7, #12]
}
 8011a40:	4618      	mov	r0, r3
 8011a42:	3714      	adds	r7, #20
 8011a44:	46bd      	mov	sp, r7
 8011a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a4a:	4770      	bx	lr

08011a4c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8011a4c:	b480      	push	{r7}
 8011a4e:	b083      	sub	sp, #12
 8011a50:	af00      	add	r7, sp, #0
 8011a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8011a54:	bf00      	nop
 8011a56:	370c      	adds	r7, #12
 8011a58:	46bd      	mov	sp, r7
 8011a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a5e:	4770      	bx	lr

08011a60 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8011a60:	b480      	push	{r7}
 8011a62:	b083      	sub	sp, #12
 8011a64:	af00      	add	r7, sp, #0
 8011a66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8011a68:	bf00      	nop
 8011a6a:	370c      	adds	r7, #12
 8011a6c:	46bd      	mov	sp, r7
 8011a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a72:	4770      	bx	lr

08011a74 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8011a74:	b480      	push	{r7}
 8011a76:	b083      	sub	sp, #12
 8011a78:	af00      	add	r7, sp, #0
 8011a7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8011a7c:	bf00      	nop
 8011a7e:	370c      	adds	r7, #12
 8011a80:	46bd      	mov	sp, r7
 8011a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a86:	4770      	bx	lr

08011a88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8011a88:	b480      	push	{r7}
 8011a8a:	b085      	sub	sp, #20
 8011a8c:	af00      	add	r7, sp, #0
 8011a8e:	6078      	str	r0, [r7, #4]
 8011a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	681b      	ldr	r3, [r3, #0]
 8011a96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	4a40      	ldr	r2, [pc, #256]	; (8011b9c <TIM_Base_SetConfig+0x114>)
 8011a9c:	4293      	cmp	r3, r2
 8011a9e:	d013      	beq.n	8011ac8 <TIM_Base_SetConfig+0x40>
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011aa6:	d00f      	beq.n	8011ac8 <TIM_Base_SetConfig+0x40>
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	4a3d      	ldr	r2, [pc, #244]	; (8011ba0 <TIM_Base_SetConfig+0x118>)
 8011aac:	4293      	cmp	r3, r2
 8011aae:	d00b      	beq.n	8011ac8 <TIM_Base_SetConfig+0x40>
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	4a3c      	ldr	r2, [pc, #240]	; (8011ba4 <TIM_Base_SetConfig+0x11c>)
 8011ab4:	4293      	cmp	r3, r2
 8011ab6:	d007      	beq.n	8011ac8 <TIM_Base_SetConfig+0x40>
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	4a3b      	ldr	r2, [pc, #236]	; (8011ba8 <TIM_Base_SetConfig+0x120>)
 8011abc:	4293      	cmp	r3, r2
 8011abe:	d003      	beq.n	8011ac8 <TIM_Base_SetConfig+0x40>
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	4a3a      	ldr	r2, [pc, #232]	; (8011bac <TIM_Base_SetConfig+0x124>)
 8011ac4:	4293      	cmp	r3, r2
 8011ac6:	d108      	bne.n	8011ada <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8011ac8:	68fb      	ldr	r3, [r7, #12]
 8011aca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011ace:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8011ad0:	683b      	ldr	r3, [r7, #0]
 8011ad2:	685b      	ldr	r3, [r3, #4]
 8011ad4:	68fa      	ldr	r2, [r7, #12]
 8011ad6:	4313      	orrs	r3, r2
 8011ad8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	4a2f      	ldr	r2, [pc, #188]	; (8011b9c <TIM_Base_SetConfig+0x114>)
 8011ade:	4293      	cmp	r3, r2
 8011ae0:	d02b      	beq.n	8011b3a <TIM_Base_SetConfig+0xb2>
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011ae8:	d027      	beq.n	8011b3a <TIM_Base_SetConfig+0xb2>
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	4a2c      	ldr	r2, [pc, #176]	; (8011ba0 <TIM_Base_SetConfig+0x118>)
 8011aee:	4293      	cmp	r3, r2
 8011af0:	d023      	beq.n	8011b3a <TIM_Base_SetConfig+0xb2>
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	4a2b      	ldr	r2, [pc, #172]	; (8011ba4 <TIM_Base_SetConfig+0x11c>)
 8011af6:	4293      	cmp	r3, r2
 8011af8:	d01f      	beq.n	8011b3a <TIM_Base_SetConfig+0xb2>
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	4a2a      	ldr	r2, [pc, #168]	; (8011ba8 <TIM_Base_SetConfig+0x120>)
 8011afe:	4293      	cmp	r3, r2
 8011b00:	d01b      	beq.n	8011b3a <TIM_Base_SetConfig+0xb2>
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	4a29      	ldr	r2, [pc, #164]	; (8011bac <TIM_Base_SetConfig+0x124>)
 8011b06:	4293      	cmp	r3, r2
 8011b08:	d017      	beq.n	8011b3a <TIM_Base_SetConfig+0xb2>
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	4a28      	ldr	r2, [pc, #160]	; (8011bb0 <TIM_Base_SetConfig+0x128>)
 8011b0e:	4293      	cmp	r3, r2
 8011b10:	d013      	beq.n	8011b3a <TIM_Base_SetConfig+0xb2>
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	4a27      	ldr	r2, [pc, #156]	; (8011bb4 <TIM_Base_SetConfig+0x12c>)
 8011b16:	4293      	cmp	r3, r2
 8011b18:	d00f      	beq.n	8011b3a <TIM_Base_SetConfig+0xb2>
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	4a26      	ldr	r2, [pc, #152]	; (8011bb8 <TIM_Base_SetConfig+0x130>)
 8011b1e:	4293      	cmp	r3, r2
 8011b20:	d00b      	beq.n	8011b3a <TIM_Base_SetConfig+0xb2>
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	4a25      	ldr	r2, [pc, #148]	; (8011bbc <TIM_Base_SetConfig+0x134>)
 8011b26:	4293      	cmp	r3, r2
 8011b28:	d007      	beq.n	8011b3a <TIM_Base_SetConfig+0xb2>
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	4a24      	ldr	r2, [pc, #144]	; (8011bc0 <TIM_Base_SetConfig+0x138>)
 8011b2e:	4293      	cmp	r3, r2
 8011b30:	d003      	beq.n	8011b3a <TIM_Base_SetConfig+0xb2>
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	4a23      	ldr	r2, [pc, #140]	; (8011bc4 <TIM_Base_SetConfig+0x13c>)
 8011b36:	4293      	cmp	r3, r2
 8011b38:	d108      	bne.n	8011b4c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8011b3a:	68fb      	ldr	r3, [r7, #12]
 8011b3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011b40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8011b42:	683b      	ldr	r3, [r7, #0]
 8011b44:	68db      	ldr	r3, [r3, #12]
 8011b46:	68fa      	ldr	r2, [r7, #12]
 8011b48:	4313      	orrs	r3, r2
 8011b4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8011b4c:	68fb      	ldr	r3, [r7, #12]
 8011b4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8011b52:	683b      	ldr	r3, [r7, #0]
 8011b54:	695b      	ldr	r3, [r3, #20]
 8011b56:	4313      	orrs	r3, r2
 8011b58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	68fa      	ldr	r2, [r7, #12]
 8011b5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011b60:	683b      	ldr	r3, [r7, #0]
 8011b62:	689a      	ldr	r2, [r3, #8]
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8011b68:	683b      	ldr	r3, [r7, #0]
 8011b6a:	681a      	ldr	r2, [r3, #0]
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	4a0a      	ldr	r2, [pc, #40]	; (8011b9c <TIM_Base_SetConfig+0x114>)
 8011b74:	4293      	cmp	r3, r2
 8011b76:	d003      	beq.n	8011b80 <TIM_Base_SetConfig+0xf8>
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	4a0c      	ldr	r2, [pc, #48]	; (8011bac <TIM_Base_SetConfig+0x124>)
 8011b7c:	4293      	cmp	r3, r2
 8011b7e:	d103      	bne.n	8011b88 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8011b80:	683b      	ldr	r3, [r7, #0]
 8011b82:	691a      	ldr	r2, [r3, #16]
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	2201      	movs	r2, #1
 8011b8c:	615a      	str	r2, [r3, #20]
}
 8011b8e:	bf00      	nop
 8011b90:	3714      	adds	r7, #20
 8011b92:	46bd      	mov	sp, r7
 8011b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b98:	4770      	bx	lr
 8011b9a:	bf00      	nop
 8011b9c:	40010000 	.word	0x40010000
 8011ba0:	40000400 	.word	0x40000400
 8011ba4:	40000800 	.word	0x40000800
 8011ba8:	40000c00 	.word	0x40000c00
 8011bac:	40010400 	.word	0x40010400
 8011bb0:	40014000 	.word	0x40014000
 8011bb4:	40014400 	.word	0x40014400
 8011bb8:	40014800 	.word	0x40014800
 8011bbc:	40001800 	.word	0x40001800
 8011bc0:	40001c00 	.word	0x40001c00
 8011bc4:	40002000 	.word	0x40002000

08011bc8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8011bc8:	b480      	push	{r7}
 8011bca:	b087      	sub	sp, #28
 8011bcc:	af00      	add	r7, sp, #0
 8011bce:	6078      	str	r0, [r7, #4]
 8011bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	6a1b      	ldr	r3, [r3, #32]
 8011bd6:	f023 0201 	bic.w	r2, r3, #1
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	6a1b      	ldr	r3, [r3, #32]
 8011be2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	685b      	ldr	r3, [r3, #4]
 8011be8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	699b      	ldr	r3, [r3, #24]
 8011bee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8011bf0:	68fb      	ldr	r3, [r7, #12]
 8011bf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011bf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8011bf8:	68fb      	ldr	r3, [r7, #12]
 8011bfa:	f023 0303 	bic.w	r3, r3, #3
 8011bfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011c00:	683b      	ldr	r3, [r7, #0]
 8011c02:	681b      	ldr	r3, [r3, #0]
 8011c04:	68fa      	ldr	r2, [r7, #12]
 8011c06:	4313      	orrs	r3, r2
 8011c08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8011c0a:	697b      	ldr	r3, [r7, #20]
 8011c0c:	f023 0302 	bic.w	r3, r3, #2
 8011c10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8011c12:	683b      	ldr	r3, [r7, #0]
 8011c14:	689b      	ldr	r3, [r3, #8]
 8011c16:	697a      	ldr	r2, [r7, #20]
 8011c18:	4313      	orrs	r3, r2
 8011c1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	4a20      	ldr	r2, [pc, #128]	; (8011ca0 <TIM_OC1_SetConfig+0xd8>)
 8011c20:	4293      	cmp	r3, r2
 8011c22:	d003      	beq.n	8011c2c <TIM_OC1_SetConfig+0x64>
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	4a1f      	ldr	r2, [pc, #124]	; (8011ca4 <TIM_OC1_SetConfig+0xdc>)
 8011c28:	4293      	cmp	r3, r2
 8011c2a:	d10c      	bne.n	8011c46 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8011c2c:	697b      	ldr	r3, [r7, #20]
 8011c2e:	f023 0308 	bic.w	r3, r3, #8
 8011c32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8011c34:	683b      	ldr	r3, [r7, #0]
 8011c36:	68db      	ldr	r3, [r3, #12]
 8011c38:	697a      	ldr	r2, [r7, #20]
 8011c3a:	4313      	orrs	r3, r2
 8011c3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8011c3e:	697b      	ldr	r3, [r7, #20]
 8011c40:	f023 0304 	bic.w	r3, r3, #4
 8011c44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	4a15      	ldr	r2, [pc, #84]	; (8011ca0 <TIM_OC1_SetConfig+0xd8>)
 8011c4a:	4293      	cmp	r3, r2
 8011c4c:	d003      	beq.n	8011c56 <TIM_OC1_SetConfig+0x8e>
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	4a14      	ldr	r2, [pc, #80]	; (8011ca4 <TIM_OC1_SetConfig+0xdc>)
 8011c52:	4293      	cmp	r3, r2
 8011c54:	d111      	bne.n	8011c7a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8011c56:	693b      	ldr	r3, [r7, #16]
 8011c58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011c5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8011c5e:	693b      	ldr	r3, [r7, #16]
 8011c60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8011c64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8011c66:	683b      	ldr	r3, [r7, #0]
 8011c68:	695b      	ldr	r3, [r3, #20]
 8011c6a:	693a      	ldr	r2, [r7, #16]
 8011c6c:	4313      	orrs	r3, r2
 8011c6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8011c70:	683b      	ldr	r3, [r7, #0]
 8011c72:	699b      	ldr	r3, [r3, #24]
 8011c74:	693a      	ldr	r2, [r7, #16]
 8011c76:	4313      	orrs	r3, r2
 8011c78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	693a      	ldr	r2, [r7, #16]
 8011c7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	68fa      	ldr	r2, [r7, #12]
 8011c84:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8011c86:	683b      	ldr	r3, [r7, #0]
 8011c88:	685a      	ldr	r2, [r3, #4]
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	697a      	ldr	r2, [r7, #20]
 8011c92:	621a      	str	r2, [r3, #32]
}
 8011c94:	bf00      	nop
 8011c96:	371c      	adds	r7, #28
 8011c98:	46bd      	mov	sp, r7
 8011c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c9e:	4770      	bx	lr
 8011ca0:	40010000 	.word	0x40010000
 8011ca4:	40010400 	.word	0x40010400

08011ca8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8011ca8:	b480      	push	{r7}
 8011caa:	b087      	sub	sp, #28
 8011cac:	af00      	add	r7, sp, #0
 8011cae:	6078      	str	r0, [r7, #4]
 8011cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	6a1b      	ldr	r3, [r3, #32]
 8011cb6:	f023 0210 	bic.w	r2, r3, #16
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	6a1b      	ldr	r3, [r3, #32]
 8011cc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	685b      	ldr	r3, [r3, #4]
 8011cc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	699b      	ldr	r3, [r3, #24]
 8011cce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8011cd0:	68fb      	ldr	r3, [r7, #12]
 8011cd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011cd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8011cd8:	68fb      	ldr	r3, [r7, #12]
 8011cda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011cde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011ce0:	683b      	ldr	r3, [r7, #0]
 8011ce2:	681b      	ldr	r3, [r3, #0]
 8011ce4:	021b      	lsls	r3, r3, #8
 8011ce6:	68fa      	ldr	r2, [r7, #12]
 8011ce8:	4313      	orrs	r3, r2
 8011cea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8011cec:	697b      	ldr	r3, [r7, #20]
 8011cee:	f023 0320 	bic.w	r3, r3, #32
 8011cf2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8011cf4:	683b      	ldr	r3, [r7, #0]
 8011cf6:	689b      	ldr	r3, [r3, #8]
 8011cf8:	011b      	lsls	r3, r3, #4
 8011cfa:	697a      	ldr	r2, [r7, #20]
 8011cfc:	4313      	orrs	r3, r2
 8011cfe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	4a22      	ldr	r2, [pc, #136]	; (8011d8c <TIM_OC2_SetConfig+0xe4>)
 8011d04:	4293      	cmp	r3, r2
 8011d06:	d003      	beq.n	8011d10 <TIM_OC2_SetConfig+0x68>
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	4a21      	ldr	r2, [pc, #132]	; (8011d90 <TIM_OC2_SetConfig+0xe8>)
 8011d0c:	4293      	cmp	r3, r2
 8011d0e:	d10d      	bne.n	8011d2c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8011d10:	697b      	ldr	r3, [r7, #20]
 8011d12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011d16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8011d18:	683b      	ldr	r3, [r7, #0]
 8011d1a:	68db      	ldr	r3, [r3, #12]
 8011d1c:	011b      	lsls	r3, r3, #4
 8011d1e:	697a      	ldr	r2, [r7, #20]
 8011d20:	4313      	orrs	r3, r2
 8011d22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8011d24:	697b      	ldr	r3, [r7, #20]
 8011d26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011d2a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	4a17      	ldr	r2, [pc, #92]	; (8011d8c <TIM_OC2_SetConfig+0xe4>)
 8011d30:	4293      	cmp	r3, r2
 8011d32:	d003      	beq.n	8011d3c <TIM_OC2_SetConfig+0x94>
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	4a16      	ldr	r2, [pc, #88]	; (8011d90 <TIM_OC2_SetConfig+0xe8>)
 8011d38:	4293      	cmp	r3, r2
 8011d3a:	d113      	bne.n	8011d64 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8011d3c:	693b      	ldr	r3, [r7, #16]
 8011d3e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8011d42:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8011d44:	693b      	ldr	r3, [r7, #16]
 8011d46:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011d4a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8011d4c:	683b      	ldr	r3, [r7, #0]
 8011d4e:	695b      	ldr	r3, [r3, #20]
 8011d50:	009b      	lsls	r3, r3, #2
 8011d52:	693a      	ldr	r2, [r7, #16]
 8011d54:	4313      	orrs	r3, r2
 8011d56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8011d58:	683b      	ldr	r3, [r7, #0]
 8011d5a:	699b      	ldr	r3, [r3, #24]
 8011d5c:	009b      	lsls	r3, r3, #2
 8011d5e:	693a      	ldr	r2, [r7, #16]
 8011d60:	4313      	orrs	r3, r2
 8011d62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	693a      	ldr	r2, [r7, #16]
 8011d68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	68fa      	ldr	r2, [r7, #12]
 8011d6e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8011d70:	683b      	ldr	r3, [r7, #0]
 8011d72:	685a      	ldr	r2, [r3, #4]
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	697a      	ldr	r2, [r7, #20]
 8011d7c:	621a      	str	r2, [r3, #32]
}
 8011d7e:	bf00      	nop
 8011d80:	371c      	adds	r7, #28
 8011d82:	46bd      	mov	sp, r7
 8011d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d88:	4770      	bx	lr
 8011d8a:	bf00      	nop
 8011d8c:	40010000 	.word	0x40010000
 8011d90:	40010400 	.word	0x40010400

08011d94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8011d94:	b480      	push	{r7}
 8011d96:	b087      	sub	sp, #28
 8011d98:	af00      	add	r7, sp, #0
 8011d9a:	6078      	str	r0, [r7, #4]
 8011d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	6a1b      	ldr	r3, [r3, #32]
 8011da2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	6a1b      	ldr	r3, [r3, #32]
 8011dae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011db0:	687b      	ldr	r3, [r7, #4]
 8011db2:	685b      	ldr	r3, [r3, #4]
 8011db4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	69db      	ldr	r3, [r3, #28]
 8011dba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8011dbc:	68fb      	ldr	r3, [r7, #12]
 8011dbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011dc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8011dc4:	68fb      	ldr	r3, [r7, #12]
 8011dc6:	f023 0303 	bic.w	r3, r3, #3
 8011dca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011dcc:	683b      	ldr	r3, [r7, #0]
 8011dce:	681b      	ldr	r3, [r3, #0]
 8011dd0:	68fa      	ldr	r2, [r7, #12]
 8011dd2:	4313      	orrs	r3, r2
 8011dd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8011dd6:	697b      	ldr	r3, [r7, #20]
 8011dd8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8011ddc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8011dde:	683b      	ldr	r3, [r7, #0]
 8011de0:	689b      	ldr	r3, [r3, #8]
 8011de2:	021b      	lsls	r3, r3, #8
 8011de4:	697a      	ldr	r2, [r7, #20]
 8011de6:	4313      	orrs	r3, r2
 8011de8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	4a21      	ldr	r2, [pc, #132]	; (8011e74 <TIM_OC3_SetConfig+0xe0>)
 8011dee:	4293      	cmp	r3, r2
 8011df0:	d003      	beq.n	8011dfa <TIM_OC3_SetConfig+0x66>
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	4a20      	ldr	r2, [pc, #128]	; (8011e78 <TIM_OC3_SetConfig+0xe4>)
 8011df6:	4293      	cmp	r3, r2
 8011df8:	d10d      	bne.n	8011e16 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8011dfa:	697b      	ldr	r3, [r7, #20]
 8011dfc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011e00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8011e02:	683b      	ldr	r3, [r7, #0]
 8011e04:	68db      	ldr	r3, [r3, #12]
 8011e06:	021b      	lsls	r3, r3, #8
 8011e08:	697a      	ldr	r2, [r7, #20]
 8011e0a:	4313      	orrs	r3, r2
 8011e0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8011e0e:	697b      	ldr	r3, [r7, #20]
 8011e10:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8011e14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	4a16      	ldr	r2, [pc, #88]	; (8011e74 <TIM_OC3_SetConfig+0xe0>)
 8011e1a:	4293      	cmp	r3, r2
 8011e1c:	d003      	beq.n	8011e26 <TIM_OC3_SetConfig+0x92>
 8011e1e:	687b      	ldr	r3, [r7, #4]
 8011e20:	4a15      	ldr	r2, [pc, #84]	; (8011e78 <TIM_OC3_SetConfig+0xe4>)
 8011e22:	4293      	cmp	r3, r2
 8011e24:	d113      	bne.n	8011e4e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8011e26:	693b      	ldr	r3, [r7, #16]
 8011e28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011e2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8011e2e:	693b      	ldr	r3, [r7, #16]
 8011e30:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8011e34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8011e36:	683b      	ldr	r3, [r7, #0]
 8011e38:	695b      	ldr	r3, [r3, #20]
 8011e3a:	011b      	lsls	r3, r3, #4
 8011e3c:	693a      	ldr	r2, [r7, #16]
 8011e3e:	4313      	orrs	r3, r2
 8011e40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8011e42:	683b      	ldr	r3, [r7, #0]
 8011e44:	699b      	ldr	r3, [r3, #24]
 8011e46:	011b      	lsls	r3, r3, #4
 8011e48:	693a      	ldr	r2, [r7, #16]
 8011e4a:	4313      	orrs	r3, r2
 8011e4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	693a      	ldr	r2, [r7, #16]
 8011e52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	68fa      	ldr	r2, [r7, #12]
 8011e58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8011e5a:	683b      	ldr	r3, [r7, #0]
 8011e5c:	685a      	ldr	r2, [r3, #4]
 8011e5e:	687b      	ldr	r3, [r7, #4]
 8011e60:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	697a      	ldr	r2, [r7, #20]
 8011e66:	621a      	str	r2, [r3, #32]
}
 8011e68:	bf00      	nop
 8011e6a:	371c      	adds	r7, #28
 8011e6c:	46bd      	mov	sp, r7
 8011e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e72:	4770      	bx	lr
 8011e74:	40010000 	.word	0x40010000
 8011e78:	40010400 	.word	0x40010400

08011e7c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8011e7c:	b480      	push	{r7}
 8011e7e:	b087      	sub	sp, #28
 8011e80:	af00      	add	r7, sp, #0
 8011e82:	6078      	str	r0, [r7, #4]
 8011e84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	6a1b      	ldr	r3, [r3, #32]
 8011e8a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	6a1b      	ldr	r3, [r3, #32]
 8011e96:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011e98:	687b      	ldr	r3, [r7, #4]
 8011e9a:	685b      	ldr	r3, [r3, #4]
 8011e9c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	69db      	ldr	r3, [r3, #28]
 8011ea2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8011ea4:	68fb      	ldr	r3, [r7, #12]
 8011ea6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011eaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8011eac:	68fb      	ldr	r3, [r7, #12]
 8011eae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011eb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011eb4:	683b      	ldr	r3, [r7, #0]
 8011eb6:	681b      	ldr	r3, [r3, #0]
 8011eb8:	021b      	lsls	r3, r3, #8
 8011eba:	68fa      	ldr	r2, [r7, #12]
 8011ebc:	4313      	orrs	r3, r2
 8011ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8011ec0:	693b      	ldr	r3, [r7, #16]
 8011ec2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8011ec6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8011ec8:	683b      	ldr	r3, [r7, #0]
 8011eca:	689b      	ldr	r3, [r3, #8]
 8011ecc:	031b      	lsls	r3, r3, #12
 8011ece:	693a      	ldr	r2, [r7, #16]
 8011ed0:	4313      	orrs	r3, r2
 8011ed2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	4a12      	ldr	r2, [pc, #72]	; (8011f20 <TIM_OC4_SetConfig+0xa4>)
 8011ed8:	4293      	cmp	r3, r2
 8011eda:	d003      	beq.n	8011ee4 <TIM_OC4_SetConfig+0x68>
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	4a11      	ldr	r2, [pc, #68]	; (8011f24 <TIM_OC4_SetConfig+0xa8>)
 8011ee0:	4293      	cmp	r3, r2
 8011ee2:	d109      	bne.n	8011ef8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8011ee4:	697b      	ldr	r3, [r7, #20]
 8011ee6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011eea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8011eec:	683b      	ldr	r3, [r7, #0]
 8011eee:	695b      	ldr	r3, [r3, #20]
 8011ef0:	019b      	lsls	r3, r3, #6
 8011ef2:	697a      	ldr	r2, [r7, #20]
 8011ef4:	4313      	orrs	r3, r2
 8011ef6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	697a      	ldr	r2, [r7, #20]
 8011efc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	68fa      	ldr	r2, [r7, #12]
 8011f02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8011f04:	683b      	ldr	r3, [r7, #0]
 8011f06:	685a      	ldr	r2, [r3, #4]
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	693a      	ldr	r2, [r7, #16]
 8011f10:	621a      	str	r2, [r3, #32]
}
 8011f12:	bf00      	nop
 8011f14:	371c      	adds	r7, #28
 8011f16:	46bd      	mov	sp, r7
 8011f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f1c:	4770      	bx	lr
 8011f1e:	bf00      	nop
 8011f20:	40010000 	.word	0x40010000
 8011f24:	40010400 	.word	0x40010400

08011f28 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8011f28:	b580      	push	{r7, lr}
 8011f2a:	b086      	sub	sp, #24
 8011f2c:	af00      	add	r7, sp, #0
 8011f2e:	6078      	str	r0, [r7, #4]
 8011f30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8011f32:	2300      	movs	r3, #0
 8011f34:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	681b      	ldr	r3, [r3, #0]
 8011f3a:	689b      	ldr	r3, [r3, #8]
 8011f3c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8011f3e:	693b      	ldr	r3, [r7, #16]
 8011f40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011f44:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8011f46:	683b      	ldr	r3, [r7, #0]
 8011f48:	685b      	ldr	r3, [r3, #4]
 8011f4a:	693a      	ldr	r2, [r7, #16]
 8011f4c:	4313      	orrs	r3, r2
 8011f4e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8011f50:	693b      	ldr	r3, [r7, #16]
 8011f52:	f023 0307 	bic.w	r3, r3, #7
 8011f56:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8011f58:	683b      	ldr	r3, [r7, #0]
 8011f5a:	681b      	ldr	r3, [r3, #0]
 8011f5c:	693a      	ldr	r2, [r7, #16]
 8011f5e:	4313      	orrs	r3, r2
 8011f60:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	681b      	ldr	r3, [r3, #0]
 8011f66:	693a      	ldr	r2, [r7, #16]
 8011f68:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8011f6a:	683b      	ldr	r3, [r7, #0]
 8011f6c:	685b      	ldr	r3, [r3, #4]
 8011f6e:	2b70      	cmp	r3, #112	; 0x70
 8011f70:	d01a      	beq.n	8011fa8 <TIM_SlaveTimer_SetConfig+0x80>
 8011f72:	2b70      	cmp	r3, #112	; 0x70
 8011f74:	d860      	bhi.n	8012038 <TIM_SlaveTimer_SetConfig+0x110>
 8011f76:	2b60      	cmp	r3, #96	; 0x60
 8011f78:	d054      	beq.n	8012024 <TIM_SlaveTimer_SetConfig+0xfc>
 8011f7a:	2b60      	cmp	r3, #96	; 0x60
 8011f7c:	d85c      	bhi.n	8012038 <TIM_SlaveTimer_SetConfig+0x110>
 8011f7e:	2b50      	cmp	r3, #80	; 0x50
 8011f80:	d046      	beq.n	8012010 <TIM_SlaveTimer_SetConfig+0xe8>
 8011f82:	2b50      	cmp	r3, #80	; 0x50
 8011f84:	d858      	bhi.n	8012038 <TIM_SlaveTimer_SetConfig+0x110>
 8011f86:	2b40      	cmp	r3, #64	; 0x40
 8011f88:	d019      	beq.n	8011fbe <TIM_SlaveTimer_SetConfig+0x96>
 8011f8a:	2b40      	cmp	r3, #64	; 0x40
 8011f8c:	d854      	bhi.n	8012038 <TIM_SlaveTimer_SetConfig+0x110>
 8011f8e:	2b30      	cmp	r3, #48	; 0x30
 8011f90:	d055      	beq.n	801203e <TIM_SlaveTimer_SetConfig+0x116>
 8011f92:	2b30      	cmp	r3, #48	; 0x30
 8011f94:	d850      	bhi.n	8012038 <TIM_SlaveTimer_SetConfig+0x110>
 8011f96:	2b20      	cmp	r3, #32
 8011f98:	d051      	beq.n	801203e <TIM_SlaveTimer_SetConfig+0x116>
 8011f9a:	2b20      	cmp	r3, #32
 8011f9c:	d84c      	bhi.n	8012038 <TIM_SlaveTimer_SetConfig+0x110>
 8011f9e:	2b00      	cmp	r3, #0
 8011fa0:	d04d      	beq.n	801203e <TIM_SlaveTimer_SetConfig+0x116>
 8011fa2:	2b10      	cmp	r3, #16
 8011fa4:	d04b      	beq.n	801203e <TIM_SlaveTimer_SetConfig+0x116>
 8011fa6:	e047      	b.n	8012038 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	6818      	ldr	r0, [r3, #0]
 8011fac:	683b      	ldr	r3, [r7, #0]
 8011fae:	68d9      	ldr	r1, [r3, #12]
 8011fb0:	683b      	ldr	r3, [r7, #0]
 8011fb2:	689a      	ldr	r2, [r3, #8]
 8011fb4:	683b      	ldr	r3, [r7, #0]
 8011fb6:	691b      	ldr	r3, [r3, #16]
 8011fb8:	f000 f9ec 	bl	8012394 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8011fbc:	e040      	b.n	8012040 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8011fbe:	683b      	ldr	r3, [r7, #0]
 8011fc0:	681b      	ldr	r3, [r3, #0]
 8011fc2:	2b05      	cmp	r3, #5
 8011fc4:	d101      	bne.n	8011fca <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8011fc6:	2301      	movs	r3, #1
 8011fc8:	e03b      	b.n	8012042 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	681b      	ldr	r3, [r3, #0]
 8011fce:	6a1b      	ldr	r3, [r3, #32]
 8011fd0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	681b      	ldr	r3, [r3, #0]
 8011fd6:	6a1a      	ldr	r2, [r3, #32]
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	681b      	ldr	r3, [r3, #0]
 8011fdc:	f022 0201 	bic.w	r2, r2, #1
 8011fe0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	681b      	ldr	r3, [r3, #0]
 8011fe6:	699b      	ldr	r3, [r3, #24]
 8011fe8:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8011fea:	68bb      	ldr	r3, [r7, #8]
 8011fec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8011ff0:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8011ff2:	683b      	ldr	r3, [r7, #0]
 8011ff4:	691b      	ldr	r3, [r3, #16]
 8011ff6:	011b      	lsls	r3, r3, #4
 8011ff8:	68ba      	ldr	r2, [r7, #8]
 8011ffa:	4313      	orrs	r3, r2
 8011ffc:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	681b      	ldr	r3, [r3, #0]
 8012002:	68ba      	ldr	r2, [r7, #8]
 8012004:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	681b      	ldr	r3, [r3, #0]
 801200a:	68fa      	ldr	r2, [r7, #12]
 801200c:	621a      	str	r2, [r3, #32]
      break;
 801200e:	e017      	b.n	8012040 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	6818      	ldr	r0, [r3, #0]
 8012014:	683b      	ldr	r3, [r7, #0]
 8012016:	6899      	ldr	r1, [r3, #8]
 8012018:	683b      	ldr	r3, [r7, #0]
 801201a:	691b      	ldr	r3, [r3, #16]
 801201c:	461a      	mov	r2, r3
 801201e:	f000 f889 	bl	8012134 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8012022:	e00d      	b.n	8012040 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8012024:	687b      	ldr	r3, [r7, #4]
 8012026:	6818      	ldr	r0, [r3, #0]
 8012028:	683b      	ldr	r3, [r7, #0]
 801202a:	6899      	ldr	r1, [r3, #8]
 801202c:	683b      	ldr	r3, [r7, #0]
 801202e:	691b      	ldr	r3, [r3, #16]
 8012030:	461a      	mov	r2, r3
 8012032:	f000 f8eb 	bl	801220c <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8012036:	e003      	b.n	8012040 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8012038:	2301      	movs	r3, #1
 801203a:	75fb      	strb	r3, [r7, #23]
      break;
 801203c:	e000      	b.n	8012040 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 801203e:	bf00      	nop
  }

  return status;
 8012040:	7dfb      	ldrb	r3, [r7, #23]
}
 8012042:	4618      	mov	r0, r3
 8012044:	3718      	adds	r7, #24
 8012046:	46bd      	mov	sp, r7
 8012048:	bd80      	pop	{r7, pc}
	...

0801204c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 801204c:	b480      	push	{r7}
 801204e:	b087      	sub	sp, #28
 8012050:	af00      	add	r7, sp, #0
 8012052:	60f8      	str	r0, [r7, #12]
 8012054:	60b9      	str	r1, [r7, #8]
 8012056:	607a      	str	r2, [r7, #4]
 8012058:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801205a:	68fb      	ldr	r3, [r7, #12]
 801205c:	6a1b      	ldr	r3, [r3, #32]
 801205e:	f023 0201 	bic.w	r2, r3, #1
 8012062:	68fb      	ldr	r3, [r7, #12]
 8012064:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8012066:	68fb      	ldr	r3, [r7, #12]
 8012068:	699b      	ldr	r3, [r3, #24]
 801206a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801206c:	68fb      	ldr	r3, [r7, #12]
 801206e:	6a1b      	ldr	r3, [r3, #32]
 8012070:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8012072:	68fb      	ldr	r3, [r7, #12]
 8012074:	4a28      	ldr	r2, [pc, #160]	; (8012118 <TIM_TI1_SetConfig+0xcc>)
 8012076:	4293      	cmp	r3, r2
 8012078:	d01b      	beq.n	80120b2 <TIM_TI1_SetConfig+0x66>
 801207a:	68fb      	ldr	r3, [r7, #12]
 801207c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012080:	d017      	beq.n	80120b2 <TIM_TI1_SetConfig+0x66>
 8012082:	68fb      	ldr	r3, [r7, #12]
 8012084:	4a25      	ldr	r2, [pc, #148]	; (801211c <TIM_TI1_SetConfig+0xd0>)
 8012086:	4293      	cmp	r3, r2
 8012088:	d013      	beq.n	80120b2 <TIM_TI1_SetConfig+0x66>
 801208a:	68fb      	ldr	r3, [r7, #12]
 801208c:	4a24      	ldr	r2, [pc, #144]	; (8012120 <TIM_TI1_SetConfig+0xd4>)
 801208e:	4293      	cmp	r3, r2
 8012090:	d00f      	beq.n	80120b2 <TIM_TI1_SetConfig+0x66>
 8012092:	68fb      	ldr	r3, [r7, #12]
 8012094:	4a23      	ldr	r2, [pc, #140]	; (8012124 <TIM_TI1_SetConfig+0xd8>)
 8012096:	4293      	cmp	r3, r2
 8012098:	d00b      	beq.n	80120b2 <TIM_TI1_SetConfig+0x66>
 801209a:	68fb      	ldr	r3, [r7, #12]
 801209c:	4a22      	ldr	r2, [pc, #136]	; (8012128 <TIM_TI1_SetConfig+0xdc>)
 801209e:	4293      	cmp	r3, r2
 80120a0:	d007      	beq.n	80120b2 <TIM_TI1_SetConfig+0x66>
 80120a2:	68fb      	ldr	r3, [r7, #12]
 80120a4:	4a21      	ldr	r2, [pc, #132]	; (801212c <TIM_TI1_SetConfig+0xe0>)
 80120a6:	4293      	cmp	r3, r2
 80120a8:	d003      	beq.n	80120b2 <TIM_TI1_SetConfig+0x66>
 80120aa:	68fb      	ldr	r3, [r7, #12]
 80120ac:	4a20      	ldr	r2, [pc, #128]	; (8012130 <TIM_TI1_SetConfig+0xe4>)
 80120ae:	4293      	cmp	r3, r2
 80120b0:	d101      	bne.n	80120b6 <TIM_TI1_SetConfig+0x6a>
 80120b2:	2301      	movs	r3, #1
 80120b4:	e000      	b.n	80120b8 <TIM_TI1_SetConfig+0x6c>
 80120b6:	2300      	movs	r3, #0
 80120b8:	2b00      	cmp	r3, #0
 80120ba:	d008      	beq.n	80120ce <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80120bc:	697b      	ldr	r3, [r7, #20]
 80120be:	f023 0303 	bic.w	r3, r3, #3
 80120c2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80120c4:	697a      	ldr	r2, [r7, #20]
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	4313      	orrs	r3, r2
 80120ca:	617b      	str	r3, [r7, #20]
 80120cc:	e003      	b.n	80120d6 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80120ce:	697b      	ldr	r3, [r7, #20]
 80120d0:	f043 0301 	orr.w	r3, r3, #1
 80120d4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80120d6:	697b      	ldr	r3, [r7, #20]
 80120d8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80120dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80120de:	683b      	ldr	r3, [r7, #0]
 80120e0:	011b      	lsls	r3, r3, #4
 80120e2:	b2db      	uxtb	r3, r3
 80120e4:	697a      	ldr	r2, [r7, #20]
 80120e6:	4313      	orrs	r3, r2
 80120e8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80120ea:	693b      	ldr	r3, [r7, #16]
 80120ec:	f023 030a 	bic.w	r3, r3, #10
 80120f0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80120f2:	68bb      	ldr	r3, [r7, #8]
 80120f4:	f003 030a 	and.w	r3, r3, #10
 80120f8:	693a      	ldr	r2, [r7, #16]
 80120fa:	4313      	orrs	r3, r2
 80120fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80120fe:	68fb      	ldr	r3, [r7, #12]
 8012100:	697a      	ldr	r2, [r7, #20]
 8012102:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8012104:	68fb      	ldr	r3, [r7, #12]
 8012106:	693a      	ldr	r2, [r7, #16]
 8012108:	621a      	str	r2, [r3, #32]
}
 801210a:	bf00      	nop
 801210c:	371c      	adds	r7, #28
 801210e:	46bd      	mov	sp, r7
 8012110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012114:	4770      	bx	lr
 8012116:	bf00      	nop
 8012118:	40010000 	.word	0x40010000
 801211c:	40000400 	.word	0x40000400
 8012120:	40000800 	.word	0x40000800
 8012124:	40000c00 	.word	0x40000c00
 8012128:	40010400 	.word	0x40010400
 801212c:	40014000 	.word	0x40014000
 8012130:	40001800 	.word	0x40001800

08012134 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8012134:	b480      	push	{r7}
 8012136:	b087      	sub	sp, #28
 8012138:	af00      	add	r7, sp, #0
 801213a:	60f8      	str	r0, [r7, #12]
 801213c:	60b9      	str	r1, [r7, #8]
 801213e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8012140:	68fb      	ldr	r3, [r7, #12]
 8012142:	6a1b      	ldr	r3, [r3, #32]
 8012144:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8012146:	68fb      	ldr	r3, [r7, #12]
 8012148:	6a1b      	ldr	r3, [r3, #32]
 801214a:	f023 0201 	bic.w	r2, r3, #1
 801214e:	68fb      	ldr	r3, [r7, #12]
 8012150:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8012152:	68fb      	ldr	r3, [r7, #12]
 8012154:	699b      	ldr	r3, [r3, #24]
 8012156:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8012158:	693b      	ldr	r3, [r7, #16]
 801215a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801215e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	011b      	lsls	r3, r3, #4
 8012164:	693a      	ldr	r2, [r7, #16]
 8012166:	4313      	orrs	r3, r2
 8012168:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801216a:	697b      	ldr	r3, [r7, #20]
 801216c:	f023 030a 	bic.w	r3, r3, #10
 8012170:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8012172:	697a      	ldr	r2, [r7, #20]
 8012174:	68bb      	ldr	r3, [r7, #8]
 8012176:	4313      	orrs	r3, r2
 8012178:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801217a:	68fb      	ldr	r3, [r7, #12]
 801217c:	693a      	ldr	r2, [r7, #16]
 801217e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8012180:	68fb      	ldr	r3, [r7, #12]
 8012182:	697a      	ldr	r2, [r7, #20]
 8012184:	621a      	str	r2, [r3, #32]
}
 8012186:	bf00      	nop
 8012188:	371c      	adds	r7, #28
 801218a:	46bd      	mov	sp, r7
 801218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012190:	4770      	bx	lr

08012192 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8012192:	b480      	push	{r7}
 8012194:	b087      	sub	sp, #28
 8012196:	af00      	add	r7, sp, #0
 8012198:	60f8      	str	r0, [r7, #12]
 801219a:	60b9      	str	r1, [r7, #8]
 801219c:	607a      	str	r2, [r7, #4]
 801219e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80121a0:	68fb      	ldr	r3, [r7, #12]
 80121a2:	6a1b      	ldr	r3, [r3, #32]
 80121a4:	f023 0210 	bic.w	r2, r3, #16
 80121a8:	68fb      	ldr	r3, [r7, #12]
 80121aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80121ac:	68fb      	ldr	r3, [r7, #12]
 80121ae:	699b      	ldr	r3, [r3, #24]
 80121b0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80121b2:	68fb      	ldr	r3, [r7, #12]
 80121b4:	6a1b      	ldr	r3, [r3, #32]
 80121b6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80121b8:	697b      	ldr	r3, [r7, #20]
 80121ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80121be:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	021b      	lsls	r3, r3, #8
 80121c4:	697a      	ldr	r2, [r7, #20]
 80121c6:	4313      	orrs	r3, r2
 80121c8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80121ca:	697b      	ldr	r3, [r7, #20]
 80121cc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80121d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80121d2:	683b      	ldr	r3, [r7, #0]
 80121d4:	031b      	lsls	r3, r3, #12
 80121d6:	b29b      	uxth	r3, r3
 80121d8:	697a      	ldr	r2, [r7, #20]
 80121da:	4313      	orrs	r3, r2
 80121dc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80121de:	693b      	ldr	r3, [r7, #16]
 80121e0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80121e4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80121e6:	68bb      	ldr	r3, [r7, #8]
 80121e8:	011b      	lsls	r3, r3, #4
 80121ea:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80121ee:	693a      	ldr	r2, [r7, #16]
 80121f0:	4313      	orrs	r3, r2
 80121f2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80121f4:	68fb      	ldr	r3, [r7, #12]
 80121f6:	697a      	ldr	r2, [r7, #20]
 80121f8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80121fa:	68fb      	ldr	r3, [r7, #12]
 80121fc:	693a      	ldr	r2, [r7, #16]
 80121fe:	621a      	str	r2, [r3, #32]
}
 8012200:	bf00      	nop
 8012202:	371c      	adds	r7, #28
 8012204:	46bd      	mov	sp, r7
 8012206:	f85d 7b04 	ldr.w	r7, [sp], #4
 801220a:	4770      	bx	lr

0801220c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801220c:	b480      	push	{r7}
 801220e:	b087      	sub	sp, #28
 8012210:	af00      	add	r7, sp, #0
 8012212:	60f8      	str	r0, [r7, #12]
 8012214:	60b9      	str	r1, [r7, #8]
 8012216:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8012218:	68fb      	ldr	r3, [r7, #12]
 801221a:	6a1b      	ldr	r3, [r3, #32]
 801221c:	f023 0210 	bic.w	r2, r3, #16
 8012220:	68fb      	ldr	r3, [r7, #12]
 8012222:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8012224:	68fb      	ldr	r3, [r7, #12]
 8012226:	699b      	ldr	r3, [r3, #24]
 8012228:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801222a:	68fb      	ldr	r3, [r7, #12]
 801222c:	6a1b      	ldr	r3, [r3, #32]
 801222e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8012230:	697b      	ldr	r3, [r7, #20]
 8012232:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8012236:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	031b      	lsls	r3, r3, #12
 801223c:	697a      	ldr	r2, [r7, #20]
 801223e:	4313      	orrs	r3, r2
 8012240:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8012242:	693b      	ldr	r3, [r7, #16]
 8012244:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8012248:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 801224a:	68bb      	ldr	r3, [r7, #8]
 801224c:	011b      	lsls	r3, r3, #4
 801224e:	693a      	ldr	r2, [r7, #16]
 8012250:	4313      	orrs	r3, r2
 8012252:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8012254:	68fb      	ldr	r3, [r7, #12]
 8012256:	697a      	ldr	r2, [r7, #20]
 8012258:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801225a:	68fb      	ldr	r3, [r7, #12]
 801225c:	693a      	ldr	r2, [r7, #16]
 801225e:	621a      	str	r2, [r3, #32]
}
 8012260:	bf00      	nop
 8012262:	371c      	adds	r7, #28
 8012264:	46bd      	mov	sp, r7
 8012266:	f85d 7b04 	ldr.w	r7, [sp], #4
 801226a:	4770      	bx	lr

0801226c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 801226c:	b480      	push	{r7}
 801226e:	b087      	sub	sp, #28
 8012270:	af00      	add	r7, sp, #0
 8012272:	60f8      	str	r0, [r7, #12]
 8012274:	60b9      	str	r1, [r7, #8]
 8012276:	607a      	str	r2, [r7, #4]
 8012278:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801227a:	68fb      	ldr	r3, [r7, #12]
 801227c:	6a1b      	ldr	r3, [r3, #32]
 801227e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8012282:	68fb      	ldr	r3, [r7, #12]
 8012284:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8012286:	68fb      	ldr	r3, [r7, #12]
 8012288:	69db      	ldr	r3, [r3, #28]
 801228a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801228c:	68fb      	ldr	r3, [r7, #12]
 801228e:	6a1b      	ldr	r3, [r3, #32]
 8012290:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8012292:	697b      	ldr	r3, [r7, #20]
 8012294:	f023 0303 	bic.w	r3, r3, #3
 8012298:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 801229a:	697a      	ldr	r2, [r7, #20]
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	4313      	orrs	r3, r2
 80122a0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80122a2:	697b      	ldr	r3, [r7, #20]
 80122a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80122a8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80122aa:	683b      	ldr	r3, [r7, #0]
 80122ac:	011b      	lsls	r3, r3, #4
 80122ae:	b2db      	uxtb	r3, r3
 80122b0:	697a      	ldr	r2, [r7, #20]
 80122b2:	4313      	orrs	r3, r2
 80122b4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80122b6:	693b      	ldr	r3, [r7, #16]
 80122b8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80122bc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80122be:	68bb      	ldr	r3, [r7, #8]
 80122c0:	021b      	lsls	r3, r3, #8
 80122c2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80122c6:	693a      	ldr	r2, [r7, #16]
 80122c8:	4313      	orrs	r3, r2
 80122ca:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80122cc:	68fb      	ldr	r3, [r7, #12]
 80122ce:	697a      	ldr	r2, [r7, #20]
 80122d0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80122d2:	68fb      	ldr	r3, [r7, #12]
 80122d4:	693a      	ldr	r2, [r7, #16]
 80122d6:	621a      	str	r2, [r3, #32]
}
 80122d8:	bf00      	nop
 80122da:	371c      	adds	r7, #28
 80122dc:	46bd      	mov	sp, r7
 80122de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122e2:	4770      	bx	lr

080122e4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80122e4:	b480      	push	{r7}
 80122e6:	b087      	sub	sp, #28
 80122e8:	af00      	add	r7, sp, #0
 80122ea:	60f8      	str	r0, [r7, #12]
 80122ec:	60b9      	str	r1, [r7, #8]
 80122ee:	607a      	str	r2, [r7, #4]
 80122f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80122f2:	68fb      	ldr	r3, [r7, #12]
 80122f4:	6a1b      	ldr	r3, [r3, #32]
 80122f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80122fa:	68fb      	ldr	r3, [r7, #12]
 80122fc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80122fe:	68fb      	ldr	r3, [r7, #12]
 8012300:	69db      	ldr	r3, [r3, #28]
 8012302:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8012304:	68fb      	ldr	r3, [r7, #12]
 8012306:	6a1b      	ldr	r3, [r3, #32]
 8012308:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 801230a:	697b      	ldr	r3, [r7, #20]
 801230c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012310:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	021b      	lsls	r3, r3, #8
 8012316:	697a      	ldr	r2, [r7, #20]
 8012318:	4313      	orrs	r3, r2
 801231a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 801231c:	697b      	ldr	r3, [r7, #20]
 801231e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8012322:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8012324:	683b      	ldr	r3, [r7, #0]
 8012326:	031b      	lsls	r3, r3, #12
 8012328:	b29b      	uxth	r3, r3
 801232a:	697a      	ldr	r2, [r7, #20]
 801232c:	4313      	orrs	r3, r2
 801232e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8012330:	693b      	ldr	r3, [r7, #16]
 8012332:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8012336:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8012338:	68bb      	ldr	r3, [r7, #8]
 801233a:	031b      	lsls	r3, r3, #12
 801233c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8012340:	693a      	ldr	r2, [r7, #16]
 8012342:	4313      	orrs	r3, r2
 8012344:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8012346:	68fb      	ldr	r3, [r7, #12]
 8012348:	697a      	ldr	r2, [r7, #20]
 801234a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 801234c:	68fb      	ldr	r3, [r7, #12]
 801234e:	693a      	ldr	r2, [r7, #16]
 8012350:	621a      	str	r2, [r3, #32]
}
 8012352:	bf00      	nop
 8012354:	371c      	adds	r7, #28
 8012356:	46bd      	mov	sp, r7
 8012358:	f85d 7b04 	ldr.w	r7, [sp], #4
 801235c:	4770      	bx	lr

0801235e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801235e:	b480      	push	{r7}
 8012360:	b085      	sub	sp, #20
 8012362:	af00      	add	r7, sp, #0
 8012364:	6078      	str	r0, [r7, #4]
 8012366:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	689b      	ldr	r3, [r3, #8]
 801236c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801236e:	68fb      	ldr	r3, [r7, #12]
 8012370:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012374:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8012376:	683a      	ldr	r2, [r7, #0]
 8012378:	68fb      	ldr	r3, [r7, #12]
 801237a:	4313      	orrs	r3, r2
 801237c:	f043 0307 	orr.w	r3, r3, #7
 8012380:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	68fa      	ldr	r2, [r7, #12]
 8012386:	609a      	str	r2, [r3, #8]
}
 8012388:	bf00      	nop
 801238a:	3714      	adds	r7, #20
 801238c:	46bd      	mov	sp, r7
 801238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012392:	4770      	bx	lr

08012394 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8012394:	b480      	push	{r7}
 8012396:	b087      	sub	sp, #28
 8012398:	af00      	add	r7, sp, #0
 801239a:	60f8      	str	r0, [r7, #12]
 801239c:	60b9      	str	r1, [r7, #8]
 801239e:	607a      	str	r2, [r7, #4]
 80123a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80123a2:	68fb      	ldr	r3, [r7, #12]
 80123a4:	689b      	ldr	r3, [r3, #8]
 80123a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80123a8:	697b      	ldr	r3, [r7, #20]
 80123aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80123ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80123b0:	683b      	ldr	r3, [r7, #0]
 80123b2:	021a      	lsls	r2, r3, #8
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	431a      	orrs	r2, r3
 80123b8:	68bb      	ldr	r3, [r7, #8]
 80123ba:	4313      	orrs	r3, r2
 80123bc:	697a      	ldr	r2, [r7, #20]
 80123be:	4313      	orrs	r3, r2
 80123c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80123c2:	68fb      	ldr	r3, [r7, #12]
 80123c4:	697a      	ldr	r2, [r7, #20]
 80123c6:	609a      	str	r2, [r3, #8]
}
 80123c8:	bf00      	nop
 80123ca:	371c      	adds	r7, #28
 80123cc:	46bd      	mov	sp, r7
 80123ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123d2:	4770      	bx	lr

080123d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80123d4:	b480      	push	{r7}
 80123d6:	b087      	sub	sp, #28
 80123d8:	af00      	add	r7, sp, #0
 80123da:	60f8      	str	r0, [r7, #12]
 80123dc:	60b9      	str	r1, [r7, #8]
 80123de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80123e0:	68bb      	ldr	r3, [r7, #8]
 80123e2:	f003 031f 	and.w	r3, r3, #31
 80123e6:	2201      	movs	r2, #1
 80123e8:	fa02 f303 	lsl.w	r3, r2, r3
 80123ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80123ee:	68fb      	ldr	r3, [r7, #12]
 80123f0:	6a1a      	ldr	r2, [r3, #32]
 80123f2:	697b      	ldr	r3, [r7, #20]
 80123f4:	43db      	mvns	r3, r3
 80123f6:	401a      	ands	r2, r3
 80123f8:	68fb      	ldr	r3, [r7, #12]
 80123fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80123fc:	68fb      	ldr	r3, [r7, #12]
 80123fe:	6a1a      	ldr	r2, [r3, #32]
 8012400:	68bb      	ldr	r3, [r7, #8]
 8012402:	f003 031f 	and.w	r3, r3, #31
 8012406:	6879      	ldr	r1, [r7, #4]
 8012408:	fa01 f303 	lsl.w	r3, r1, r3
 801240c:	431a      	orrs	r2, r3
 801240e:	68fb      	ldr	r3, [r7, #12]
 8012410:	621a      	str	r2, [r3, #32]
}
 8012412:	bf00      	nop
 8012414:	371c      	adds	r7, #28
 8012416:	46bd      	mov	sp, r7
 8012418:	f85d 7b04 	ldr.w	r7, [sp], #4
 801241c:	4770      	bx	lr
	...

08012420 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8012420:	b480      	push	{r7}
 8012422:	b085      	sub	sp, #20
 8012424:	af00      	add	r7, sp, #0
 8012426:	6078      	str	r0, [r7, #4]
 8012428:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012430:	2b01      	cmp	r3, #1
 8012432:	d101      	bne.n	8012438 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8012434:	2302      	movs	r3, #2
 8012436:	e05a      	b.n	80124ee <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	2201      	movs	r2, #1
 801243c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	2202      	movs	r2, #2
 8012444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	681b      	ldr	r3, [r3, #0]
 801244c:	685b      	ldr	r3, [r3, #4]
 801244e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	681b      	ldr	r3, [r3, #0]
 8012454:	689b      	ldr	r3, [r3, #8]
 8012456:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8012458:	68fb      	ldr	r3, [r7, #12]
 801245a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801245e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8012460:	683b      	ldr	r3, [r7, #0]
 8012462:	681b      	ldr	r3, [r3, #0]
 8012464:	68fa      	ldr	r2, [r7, #12]
 8012466:	4313      	orrs	r3, r2
 8012468:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801246a:	687b      	ldr	r3, [r7, #4]
 801246c:	681b      	ldr	r3, [r3, #0]
 801246e:	68fa      	ldr	r2, [r7, #12]
 8012470:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012472:	687b      	ldr	r3, [r7, #4]
 8012474:	681b      	ldr	r3, [r3, #0]
 8012476:	4a21      	ldr	r2, [pc, #132]	; (80124fc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8012478:	4293      	cmp	r3, r2
 801247a:	d022      	beq.n	80124c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	681b      	ldr	r3, [r3, #0]
 8012480:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012484:	d01d      	beq.n	80124c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	681b      	ldr	r3, [r3, #0]
 801248a:	4a1d      	ldr	r2, [pc, #116]	; (8012500 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 801248c:	4293      	cmp	r3, r2
 801248e:	d018      	beq.n	80124c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	681b      	ldr	r3, [r3, #0]
 8012494:	4a1b      	ldr	r2, [pc, #108]	; (8012504 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8012496:	4293      	cmp	r3, r2
 8012498:	d013      	beq.n	80124c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	681b      	ldr	r3, [r3, #0]
 801249e:	4a1a      	ldr	r2, [pc, #104]	; (8012508 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80124a0:	4293      	cmp	r3, r2
 80124a2:	d00e      	beq.n	80124c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	681b      	ldr	r3, [r3, #0]
 80124a8:	4a18      	ldr	r2, [pc, #96]	; (801250c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80124aa:	4293      	cmp	r3, r2
 80124ac:	d009      	beq.n	80124c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	681b      	ldr	r3, [r3, #0]
 80124b2:	4a17      	ldr	r2, [pc, #92]	; (8012510 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80124b4:	4293      	cmp	r3, r2
 80124b6:	d004      	beq.n	80124c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	681b      	ldr	r3, [r3, #0]
 80124bc:	4a15      	ldr	r2, [pc, #84]	; (8012514 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80124be:	4293      	cmp	r3, r2
 80124c0:	d10c      	bne.n	80124dc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80124c2:	68bb      	ldr	r3, [r7, #8]
 80124c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80124c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80124ca:	683b      	ldr	r3, [r7, #0]
 80124cc:	685b      	ldr	r3, [r3, #4]
 80124ce:	68ba      	ldr	r2, [r7, #8]
 80124d0:	4313      	orrs	r3, r2
 80124d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	681b      	ldr	r3, [r3, #0]
 80124d8:	68ba      	ldr	r2, [r7, #8]
 80124da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	2201      	movs	r2, #1
 80124e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	2200      	movs	r2, #0
 80124e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80124ec:	2300      	movs	r3, #0
}
 80124ee:	4618      	mov	r0, r3
 80124f0:	3714      	adds	r7, #20
 80124f2:	46bd      	mov	sp, r7
 80124f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124f8:	4770      	bx	lr
 80124fa:	bf00      	nop
 80124fc:	40010000 	.word	0x40010000
 8012500:	40000400 	.word	0x40000400
 8012504:	40000800 	.word	0x40000800
 8012508:	40000c00 	.word	0x40000c00
 801250c:	40010400 	.word	0x40010400
 8012510:	40014000 	.word	0x40014000
 8012514:	40001800 	.word	0x40001800

08012518 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8012518:	b480      	push	{r7}
 801251a:	b085      	sub	sp, #20
 801251c:	af00      	add	r7, sp, #0
 801251e:	6078      	str	r0, [r7, #4]
 8012520:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8012522:	2300      	movs	r3, #0
 8012524:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801252c:	2b01      	cmp	r3, #1
 801252e:	d101      	bne.n	8012534 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8012530:	2302      	movs	r3, #2
 8012532:	e03d      	b.n	80125b0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	2201      	movs	r2, #1
 8012538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 801253c:	68fb      	ldr	r3, [r7, #12]
 801253e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8012542:	683b      	ldr	r3, [r7, #0]
 8012544:	68db      	ldr	r3, [r3, #12]
 8012546:	4313      	orrs	r3, r2
 8012548:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 801254a:	68fb      	ldr	r3, [r7, #12]
 801254c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8012550:	683b      	ldr	r3, [r7, #0]
 8012552:	689b      	ldr	r3, [r3, #8]
 8012554:	4313      	orrs	r3, r2
 8012556:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8012558:	68fb      	ldr	r3, [r7, #12]
 801255a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 801255e:	683b      	ldr	r3, [r7, #0]
 8012560:	685b      	ldr	r3, [r3, #4]
 8012562:	4313      	orrs	r3, r2
 8012564:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8012566:	68fb      	ldr	r3, [r7, #12]
 8012568:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 801256c:	683b      	ldr	r3, [r7, #0]
 801256e:	681b      	ldr	r3, [r3, #0]
 8012570:	4313      	orrs	r3, r2
 8012572:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8012574:	68fb      	ldr	r3, [r7, #12]
 8012576:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801257a:	683b      	ldr	r3, [r7, #0]
 801257c:	691b      	ldr	r3, [r3, #16]
 801257e:	4313      	orrs	r3, r2
 8012580:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8012582:	68fb      	ldr	r3, [r7, #12]
 8012584:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8012588:	683b      	ldr	r3, [r7, #0]
 801258a:	695b      	ldr	r3, [r3, #20]
 801258c:	4313      	orrs	r3, r2
 801258e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8012590:	68fb      	ldr	r3, [r7, #12]
 8012592:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8012596:	683b      	ldr	r3, [r7, #0]
 8012598:	69db      	ldr	r3, [r3, #28]
 801259a:	4313      	orrs	r3, r2
 801259c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	681b      	ldr	r3, [r3, #0]
 80125a2:	68fa      	ldr	r2, [r7, #12]
 80125a4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	2200      	movs	r2, #0
 80125aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80125ae:	2300      	movs	r3, #0
}
 80125b0:	4618      	mov	r0, r3
 80125b2:	3714      	adds	r7, #20
 80125b4:	46bd      	mov	sp, r7
 80125b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125ba:	4770      	bx	lr

080125bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80125bc:	b480      	push	{r7}
 80125be:	b083      	sub	sp, #12
 80125c0:	af00      	add	r7, sp, #0
 80125c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80125c4:	bf00      	nop
 80125c6:	370c      	adds	r7, #12
 80125c8:	46bd      	mov	sp, r7
 80125ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125ce:	4770      	bx	lr

080125d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80125d0:	b480      	push	{r7}
 80125d2:	b083      	sub	sp, #12
 80125d4:	af00      	add	r7, sp, #0
 80125d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80125d8:	bf00      	nop
 80125da:	370c      	adds	r7, #12
 80125dc:	46bd      	mov	sp, r7
 80125de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125e2:	4770      	bx	lr

080125e4 <__NVIC_SetPriority>:
{
 80125e4:	b480      	push	{r7}
 80125e6:	b083      	sub	sp, #12
 80125e8:	af00      	add	r7, sp, #0
 80125ea:	4603      	mov	r3, r0
 80125ec:	6039      	str	r1, [r7, #0]
 80125ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80125f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80125f4:	2b00      	cmp	r3, #0
 80125f6:	db0a      	blt.n	801260e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80125f8:	683b      	ldr	r3, [r7, #0]
 80125fa:	b2da      	uxtb	r2, r3
 80125fc:	490c      	ldr	r1, [pc, #48]	; (8012630 <__NVIC_SetPriority+0x4c>)
 80125fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012602:	0112      	lsls	r2, r2, #4
 8012604:	b2d2      	uxtb	r2, r2
 8012606:	440b      	add	r3, r1
 8012608:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 801260c:	e00a      	b.n	8012624 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801260e:	683b      	ldr	r3, [r7, #0]
 8012610:	b2da      	uxtb	r2, r3
 8012612:	4908      	ldr	r1, [pc, #32]	; (8012634 <__NVIC_SetPriority+0x50>)
 8012614:	79fb      	ldrb	r3, [r7, #7]
 8012616:	f003 030f 	and.w	r3, r3, #15
 801261a:	3b04      	subs	r3, #4
 801261c:	0112      	lsls	r2, r2, #4
 801261e:	b2d2      	uxtb	r2, r2
 8012620:	440b      	add	r3, r1
 8012622:	761a      	strb	r2, [r3, #24]
}
 8012624:	bf00      	nop
 8012626:	370c      	adds	r7, #12
 8012628:	46bd      	mov	sp, r7
 801262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801262e:	4770      	bx	lr
 8012630:	e000e100 	.word	0xe000e100
 8012634:	e000ed00 	.word	0xe000ed00

08012638 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8012638:	b580      	push	{r7, lr}
 801263a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 801263c:	4b05      	ldr	r3, [pc, #20]	; (8012654 <SysTick_Handler+0x1c>)
 801263e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8012640:	f001 feea 	bl	8014418 <xTaskGetSchedulerState>
 8012644:	4603      	mov	r3, r0
 8012646:	2b01      	cmp	r3, #1
 8012648:	d001      	beq.n	801264e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 801264a:	f002 fcdd 	bl	8015008 <xPortSysTickHandler>
  }
}
 801264e:	bf00      	nop
 8012650:	bd80      	pop	{r7, pc}
 8012652:	bf00      	nop
 8012654:	e000e010 	.word	0xe000e010

08012658 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8012658:	b580      	push	{r7, lr}
 801265a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 801265c:	2100      	movs	r1, #0
 801265e:	f06f 0004 	mvn.w	r0, #4
 8012662:	f7ff ffbf 	bl	80125e4 <__NVIC_SetPriority>
#endif
}
 8012666:	bf00      	nop
 8012668:	bd80      	pop	{r7, pc}
	...

0801266c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 801266c:	b480      	push	{r7}
 801266e:	b083      	sub	sp, #12
 8012670:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012672:	f3ef 8305 	mrs	r3, IPSR
 8012676:	603b      	str	r3, [r7, #0]
  return(result);
 8012678:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801267a:	2b00      	cmp	r3, #0
 801267c:	d003      	beq.n	8012686 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 801267e:	f06f 0305 	mvn.w	r3, #5
 8012682:	607b      	str	r3, [r7, #4]
 8012684:	e00c      	b.n	80126a0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8012686:	4b0a      	ldr	r3, [pc, #40]	; (80126b0 <osKernelInitialize+0x44>)
 8012688:	681b      	ldr	r3, [r3, #0]
 801268a:	2b00      	cmp	r3, #0
 801268c:	d105      	bne.n	801269a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 801268e:	4b08      	ldr	r3, [pc, #32]	; (80126b0 <osKernelInitialize+0x44>)
 8012690:	2201      	movs	r2, #1
 8012692:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8012694:	2300      	movs	r3, #0
 8012696:	607b      	str	r3, [r7, #4]
 8012698:	e002      	b.n	80126a0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 801269a:	f04f 33ff 	mov.w	r3, #4294967295
 801269e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80126a0:	687b      	ldr	r3, [r7, #4]
}
 80126a2:	4618      	mov	r0, r3
 80126a4:	370c      	adds	r7, #12
 80126a6:	46bd      	mov	sp, r7
 80126a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126ac:	4770      	bx	lr
 80126ae:	bf00      	nop
 80126b0:	2000165c 	.word	0x2000165c

080126b4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80126b4:	b580      	push	{r7, lr}
 80126b6:	b082      	sub	sp, #8
 80126b8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80126ba:	f3ef 8305 	mrs	r3, IPSR
 80126be:	603b      	str	r3, [r7, #0]
  return(result);
 80126c0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80126c2:	2b00      	cmp	r3, #0
 80126c4:	d003      	beq.n	80126ce <osKernelStart+0x1a>
    stat = osErrorISR;
 80126c6:	f06f 0305 	mvn.w	r3, #5
 80126ca:	607b      	str	r3, [r7, #4]
 80126cc:	e010      	b.n	80126f0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80126ce:	4b0b      	ldr	r3, [pc, #44]	; (80126fc <osKernelStart+0x48>)
 80126d0:	681b      	ldr	r3, [r3, #0]
 80126d2:	2b01      	cmp	r3, #1
 80126d4:	d109      	bne.n	80126ea <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80126d6:	f7ff ffbf 	bl	8012658 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80126da:	4b08      	ldr	r3, [pc, #32]	; (80126fc <osKernelStart+0x48>)
 80126dc:	2202      	movs	r2, #2
 80126de:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80126e0:	f001 f9c0 	bl	8013a64 <vTaskStartScheduler>
      stat = osOK;
 80126e4:	2300      	movs	r3, #0
 80126e6:	607b      	str	r3, [r7, #4]
 80126e8:	e002      	b.n	80126f0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80126ea:	f04f 33ff 	mov.w	r3, #4294967295
 80126ee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80126f0:	687b      	ldr	r3, [r7, #4]
}
 80126f2:	4618      	mov	r0, r3
 80126f4:	3708      	adds	r7, #8
 80126f6:	46bd      	mov	sp, r7
 80126f8:	bd80      	pop	{r7, pc}
 80126fa:	bf00      	nop
 80126fc:	2000165c 	.word	0x2000165c

08012700 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8012700:	b580      	push	{r7, lr}
 8012702:	b082      	sub	sp, #8
 8012704:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012706:	f3ef 8305 	mrs	r3, IPSR
 801270a:	603b      	str	r3, [r7, #0]
  return(result);
 801270c:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 801270e:	2b00      	cmp	r3, #0
 8012710:	d003      	beq.n	801271a <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8012712:	f001 fae9 	bl	8013ce8 <xTaskGetTickCountFromISR>
 8012716:	6078      	str	r0, [r7, #4]
 8012718:	e002      	b.n	8012720 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 801271a:	f001 fad5 	bl	8013cc8 <xTaskGetTickCount>
 801271e:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8012720:	687b      	ldr	r3, [r7, #4]
}
 8012722:	4618      	mov	r0, r3
 8012724:	3708      	adds	r7, #8
 8012726:	46bd      	mov	sp, r7
 8012728:	bd80      	pop	{r7, pc}

0801272a <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 801272a:	b580      	push	{r7, lr}
 801272c:	b08e      	sub	sp, #56	; 0x38
 801272e:	af04      	add	r7, sp, #16
 8012730:	60f8      	str	r0, [r7, #12]
 8012732:	60b9      	str	r1, [r7, #8]
 8012734:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8012736:	2300      	movs	r3, #0
 8012738:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801273a:	f3ef 8305 	mrs	r3, IPSR
 801273e:	617b      	str	r3, [r7, #20]
  return(result);
 8012740:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8012742:	2b00      	cmp	r3, #0
 8012744:	d17e      	bne.n	8012844 <osThreadNew+0x11a>
 8012746:	68fb      	ldr	r3, [r7, #12]
 8012748:	2b00      	cmp	r3, #0
 801274a:	d07b      	beq.n	8012844 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 801274c:	2380      	movs	r3, #128	; 0x80
 801274e:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8012750:	2318      	movs	r3, #24
 8012752:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8012754:	2300      	movs	r3, #0
 8012756:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8012758:	f04f 33ff 	mov.w	r3, #4294967295
 801275c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	2b00      	cmp	r3, #0
 8012762:	d045      	beq.n	80127f0 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	681b      	ldr	r3, [r3, #0]
 8012768:	2b00      	cmp	r3, #0
 801276a:	d002      	beq.n	8012772 <osThreadNew+0x48>
        name = attr->name;
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	681b      	ldr	r3, [r3, #0]
 8012770:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	699b      	ldr	r3, [r3, #24]
 8012776:	2b00      	cmp	r3, #0
 8012778:	d002      	beq.n	8012780 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	699b      	ldr	r3, [r3, #24]
 801277e:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8012780:	69fb      	ldr	r3, [r7, #28]
 8012782:	2b00      	cmp	r3, #0
 8012784:	d008      	beq.n	8012798 <osThreadNew+0x6e>
 8012786:	69fb      	ldr	r3, [r7, #28]
 8012788:	2b38      	cmp	r3, #56	; 0x38
 801278a:	d805      	bhi.n	8012798 <osThreadNew+0x6e>
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	685b      	ldr	r3, [r3, #4]
 8012790:	f003 0301 	and.w	r3, r3, #1
 8012794:	2b00      	cmp	r3, #0
 8012796:	d001      	beq.n	801279c <osThreadNew+0x72>
        return (NULL);
 8012798:	2300      	movs	r3, #0
 801279a:	e054      	b.n	8012846 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	695b      	ldr	r3, [r3, #20]
 80127a0:	2b00      	cmp	r3, #0
 80127a2:	d003      	beq.n	80127ac <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	695b      	ldr	r3, [r3, #20]
 80127a8:	089b      	lsrs	r3, r3, #2
 80127aa:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	689b      	ldr	r3, [r3, #8]
 80127b0:	2b00      	cmp	r3, #0
 80127b2:	d00e      	beq.n	80127d2 <osThreadNew+0xa8>
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	68db      	ldr	r3, [r3, #12]
 80127b8:	2bcb      	cmp	r3, #203	; 0xcb
 80127ba:	d90a      	bls.n	80127d2 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80127c0:	2b00      	cmp	r3, #0
 80127c2:	d006      	beq.n	80127d2 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80127c4:	687b      	ldr	r3, [r7, #4]
 80127c6:	695b      	ldr	r3, [r3, #20]
 80127c8:	2b00      	cmp	r3, #0
 80127ca:	d002      	beq.n	80127d2 <osThreadNew+0xa8>
        mem = 1;
 80127cc:	2301      	movs	r3, #1
 80127ce:	61bb      	str	r3, [r7, #24]
 80127d0:	e010      	b.n	80127f4 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80127d2:	687b      	ldr	r3, [r7, #4]
 80127d4:	689b      	ldr	r3, [r3, #8]
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	d10c      	bne.n	80127f4 <osThreadNew+0xca>
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	68db      	ldr	r3, [r3, #12]
 80127de:	2b00      	cmp	r3, #0
 80127e0:	d108      	bne.n	80127f4 <osThreadNew+0xca>
 80127e2:	687b      	ldr	r3, [r7, #4]
 80127e4:	691b      	ldr	r3, [r3, #16]
 80127e6:	2b00      	cmp	r3, #0
 80127e8:	d104      	bne.n	80127f4 <osThreadNew+0xca>
          mem = 0;
 80127ea:	2300      	movs	r3, #0
 80127ec:	61bb      	str	r3, [r7, #24]
 80127ee:	e001      	b.n	80127f4 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80127f0:	2300      	movs	r3, #0
 80127f2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80127f4:	69bb      	ldr	r3, [r7, #24]
 80127f6:	2b01      	cmp	r3, #1
 80127f8:	d110      	bne.n	801281c <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80127fe:	687a      	ldr	r2, [r7, #4]
 8012800:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8012802:	9202      	str	r2, [sp, #8]
 8012804:	9301      	str	r3, [sp, #4]
 8012806:	69fb      	ldr	r3, [r7, #28]
 8012808:	9300      	str	r3, [sp, #0]
 801280a:	68bb      	ldr	r3, [r7, #8]
 801280c:	6a3a      	ldr	r2, [r7, #32]
 801280e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012810:	68f8      	ldr	r0, [r7, #12]
 8012812:	f000 fed1 	bl	80135b8 <xTaskCreateStatic>
 8012816:	4603      	mov	r3, r0
 8012818:	613b      	str	r3, [r7, #16]
 801281a:	e013      	b.n	8012844 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 801281c:	69bb      	ldr	r3, [r7, #24]
 801281e:	2b00      	cmp	r3, #0
 8012820:	d110      	bne.n	8012844 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8012822:	6a3b      	ldr	r3, [r7, #32]
 8012824:	b29a      	uxth	r2, r3
 8012826:	f107 0310 	add.w	r3, r7, #16
 801282a:	9301      	str	r3, [sp, #4]
 801282c:	69fb      	ldr	r3, [r7, #28]
 801282e:	9300      	str	r3, [sp, #0]
 8012830:	68bb      	ldr	r3, [r7, #8]
 8012832:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012834:	68f8      	ldr	r0, [r7, #12]
 8012836:	f000 ff1c 	bl	8013672 <xTaskCreate>
 801283a:	4603      	mov	r3, r0
 801283c:	2b01      	cmp	r3, #1
 801283e:	d001      	beq.n	8012844 <osThreadNew+0x11a>
            hTask = NULL;
 8012840:	2300      	movs	r3, #0
 8012842:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8012844:	693b      	ldr	r3, [r7, #16]
}
 8012846:	4618      	mov	r0, r3
 8012848:	3728      	adds	r7, #40	; 0x28
 801284a:	46bd      	mov	sp, r7
 801284c:	bd80      	pop	{r7, pc}

0801284e <osDelayUntil>:
  }

  return (stat);
}

osStatus_t osDelayUntil (uint32_t ticks) {
 801284e:	b580      	push	{r7, lr}
 8012850:	b086      	sub	sp, #24
 8012852:	af00      	add	r7, sp, #0
 8012854:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012856:	f3ef 8305 	mrs	r3, IPSR
 801285a:	60fb      	str	r3, [r7, #12]
  return(result);
 801285c:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 801285e:	2b00      	cmp	r3, #0
 8012860:	d003      	beq.n	801286a <osDelayUntil+0x1c>
    stat = osErrorISR;
 8012862:	f06f 0305 	mvn.w	r3, #5
 8012866:	617b      	str	r3, [r7, #20]
 8012868:	e019      	b.n	801289e <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 801286a:	2300      	movs	r3, #0
 801286c:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 801286e:	f001 fa2b 	bl	8013cc8 <xTaskGetTickCount>
 8012872:	4603      	mov	r3, r0
 8012874:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 8012876:	68bb      	ldr	r3, [r7, #8]
 8012878:	687a      	ldr	r2, [r7, #4]
 801287a:	1ad3      	subs	r3, r2, r3
 801287c:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 801287e:	693b      	ldr	r3, [r7, #16]
 8012880:	2b00      	cmp	r3, #0
 8012882:	d009      	beq.n	8012898 <osDelayUntil+0x4a>
 8012884:	693b      	ldr	r3, [r7, #16]
 8012886:	2b00      	cmp	r3, #0
 8012888:	db06      	blt.n	8012898 <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 801288a:	f107 0308 	add.w	r3, r7, #8
 801288e:	6939      	ldr	r1, [r7, #16]
 8012890:	4618      	mov	r0, r3
 8012892:	f001 f867 	bl	8013964 <vTaskDelayUntil>
 8012896:	e002      	b.n	801289e <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 8012898:	f06f 0303 	mvn.w	r3, #3
 801289c:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 801289e:	697b      	ldr	r3, [r7, #20]
}
 80128a0:	4618      	mov	r0, r3
 80128a2:	3718      	adds	r7, #24
 80128a4:	46bd      	mov	sp, r7
 80128a6:	bd80      	pop	{r7, pc}

080128a8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80128a8:	b480      	push	{r7}
 80128aa:	b085      	sub	sp, #20
 80128ac:	af00      	add	r7, sp, #0
 80128ae:	60f8      	str	r0, [r7, #12]
 80128b0:	60b9      	str	r1, [r7, #8]
 80128b2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80128b4:	68fb      	ldr	r3, [r7, #12]
 80128b6:	4a07      	ldr	r2, [pc, #28]	; (80128d4 <vApplicationGetIdleTaskMemory+0x2c>)
 80128b8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80128ba:	68bb      	ldr	r3, [r7, #8]
 80128bc:	4a06      	ldr	r2, [pc, #24]	; (80128d8 <vApplicationGetIdleTaskMemory+0x30>)
 80128be:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	2280      	movs	r2, #128	; 0x80
 80128c4:	601a      	str	r2, [r3, #0]
}
 80128c6:	bf00      	nop
 80128c8:	3714      	adds	r7, #20
 80128ca:	46bd      	mov	sp, r7
 80128cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128d0:	4770      	bx	lr
 80128d2:	bf00      	nop
 80128d4:	20001660 	.word	0x20001660
 80128d8:	2000172c 	.word	0x2000172c

080128dc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80128dc:	b480      	push	{r7}
 80128de:	b085      	sub	sp, #20
 80128e0:	af00      	add	r7, sp, #0
 80128e2:	60f8      	str	r0, [r7, #12]
 80128e4:	60b9      	str	r1, [r7, #8]
 80128e6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80128e8:	68fb      	ldr	r3, [r7, #12]
 80128ea:	4a07      	ldr	r2, [pc, #28]	; (8012908 <vApplicationGetTimerTaskMemory+0x2c>)
 80128ec:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80128ee:	68bb      	ldr	r3, [r7, #8]
 80128f0:	4a06      	ldr	r2, [pc, #24]	; (801290c <vApplicationGetTimerTaskMemory+0x30>)
 80128f2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80128fa:	601a      	str	r2, [r3, #0]
}
 80128fc:	bf00      	nop
 80128fe:	3714      	adds	r7, #20
 8012900:	46bd      	mov	sp, r7
 8012902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012906:	4770      	bx	lr
 8012908:	2000192c 	.word	0x2000192c
 801290c:	200019f8 	.word	0x200019f8

08012910 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8012910:	b480      	push	{r7}
 8012912:	b083      	sub	sp, #12
 8012914:	af00      	add	r7, sp, #0
 8012916:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	f103 0208 	add.w	r2, r3, #8
 801291e:	687b      	ldr	r3, [r7, #4]
 8012920:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	f04f 32ff 	mov.w	r2, #4294967295
 8012928:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	f103 0208 	add.w	r2, r3, #8
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	f103 0208 	add.w	r2, r3, #8
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801293e:	687b      	ldr	r3, [r7, #4]
 8012940:	2200      	movs	r2, #0
 8012942:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8012944:	bf00      	nop
 8012946:	370c      	adds	r7, #12
 8012948:	46bd      	mov	sp, r7
 801294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801294e:	4770      	bx	lr

08012950 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8012950:	b480      	push	{r7}
 8012952:	b083      	sub	sp, #12
 8012954:	af00      	add	r7, sp, #0
 8012956:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	2200      	movs	r2, #0
 801295c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801295e:	bf00      	nop
 8012960:	370c      	adds	r7, #12
 8012962:	46bd      	mov	sp, r7
 8012964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012968:	4770      	bx	lr

0801296a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801296a:	b480      	push	{r7}
 801296c:	b085      	sub	sp, #20
 801296e:	af00      	add	r7, sp, #0
 8012970:	6078      	str	r0, [r7, #4]
 8012972:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	685b      	ldr	r3, [r3, #4]
 8012978:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801297a:	683b      	ldr	r3, [r7, #0]
 801297c:	68fa      	ldr	r2, [r7, #12]
 801297e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8012980:	68fb      	ldr	r3, [r7, #12]
 8012982:	689a      	ldr	r2, [r3, #8]
 8012984:	683b      	ldr	r3, [r7, #0]
 8012986:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8012988:	68fb      	ldr	r3, [r7, #12]
 801298a:	689b      	ldr	r3, [r3, #8]
 801298c:	683a      	ldr	r2, [r7, #0]
 801298e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8012990:	68fb      	ldr	r3, [r7, #12]
 8012992:	683a      	ldr	r2, [r7, #0]
 8012994:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8012996:	683b      	ldr	r3, [r7, #0]
 8012998:	687a      	ldr	r2, [r7, #4]
 801299a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	681b      	ldr	r3, [r3, #0]
 80129a0:	1c5a      	adds	r2, r3, #1
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	601a      	str	r2, [r3, #0]
}
 80129a6:	bf00      	nop
 80129a8:	3714      	adds	r7, #20
 80129aa:	46bd      	mov	sp, r7
 80129ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129b0:	4770      	bx	lr

080129b2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80129b2:	b480      	push	{r7}
 80129b4:	b085      	sub	sp, #20
 80129b6:	af00      	add	r7, sp, #0
 80129b8:	6078      	str	r0, [r7, #4]
 80129ba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80129bc:	683b      	ldr	r3, [r7, #0]
 80129be:	681b      	ldr	r3, [r3, #0]
 80129c0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80129c2:	68bb      	ldr	r3, [r7, #8]
 80129c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80129c8:	d103      	bne.n	80129d2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	691b      	ldr	r3, [r3, #16]
 80129ce:	60fb      	str	r3, [r7, #12]
 80129d0:	e00c      	b.n	80129ec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	3308      	adds	r3, #8
 80129d6:	60fb      	str	r3, [r7, #12]
 80129d8:	e002      	b.n	80129e0 <vListInsert+0x2e>
 80129da:	68fb      	ldr	r3, [r7, #12]
 80129dc:	685b      	ldr	r3, [r3, #4]
 80129de:	60fb      	str	r3, [r7, #12]
 80129e0:	68fb      	ldr	r3, [r7, #12]
 80129e2:	685b      	ldr	r3, [r3, #4]
 80129e4:	681b      	ldr	r3, [r3, #0]
 80129e6:	68ba      	ldr	r2, [r7, #8]
 80129e8:	429a      	cmp	r2, r3
 80129ea:	d2f6      	bcs.n	80129da <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80129ec:	68fb      	ldr	r3, [r7, #12]
 80129ee:	685a      	ldr	r2, [r3, #4]
 80129f0:	683b      	ldr	r3, [r7, #0]
 80129f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80129f4:	683b      	ldr	r3, [r7, #0]
 80129f6:	685b      	ldr	r3, [r3, #4]
 80129f8:	683a      	ldr	r2, [r7, #0]
 80129fa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80129fc:	683b      	ldr	r3, [r7, #0]
 80129fe:	68fa      	ldr	r2, [r7, #12]
 8012a00:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8012a02:	68fb      	ldr	r3, [r7, #12]
 8012a04:	683a      	ldr	r2, [r7, #0]
 8012a06:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8012a08:	683b      	ldr	r3, [r7, #0]
 8012a0a:	687a      	ldr	r2, [r7, #4]
 8012a0c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	681b      	ldr	r3, [r3, #0]
 8012a12:	1c5a      	adds	r2, r3, #1
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	601a      	str	r2, [r3, #0]
}
 8012a18:	bf00      	nop
 8012a1a:	3714      	adds	r7, #20
 8012a1c:	46bd      	mov	sp, r7
 8012a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a22:	4770      	bx	lr

08012a24 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8012a24:	b480      	push	{r7}
 8012a26:	b085      	sub	sp, #20
 8012a28:	af00      	add	r7, sp, #0
 8012a2a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	691b      	ldr	r3, [r3, #16]
 8012a30:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	685b      	ldr	r3, [r3, #4]
 8012a36:	687a      	ldr	r2, [r7, #4]
 8012a38:	6892      	ldr	r2, [r2, #8]
 8012a3a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	689b      	ldr	r3, [r3, #8]
 8012a40:	687a      	ldr	r2, [r7, #4]
 8012a42:	6852      	ldr	r2, [r2, #4]
 8012a44:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8012a46:	68fb      	ldr	r3, [r7, #12]
 8012a48:	685b      	ldr	r3, [r3, #4]
 8012a4a:	687a      	ldr	r2, [r7, #4]
 8012a4c:	429a      	cmp	r2, r3
 8012a4e:	d103      	bne.n	8012a58 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	689a      	ldr	r2, [r3, #8]
 8012a54:	68fb      	ldr	r3, [r7, #12]
 8012a56:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	2200      	movs	r2, #0
 8012a5c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8012a5e:	68fb      	ldr	r3, [r7, #12]
 8012a60:	681b      	ldr	r3, [r3, #0]
 8012a62:	1e5a      	subs	r2, r3, #1
 8012a64:	68fb      	ldr	r3, [r7, #12]
 8012a66:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8012a68:	68fb      	ldr	r3, [r7, #12]
 8012a6a:	681b      	ldr	r3, [r3, #0]
}
 8012a6c:	4618      	mov	r0, r3
 8012a6e:	3714      	adds	r7, #20
 8012a70:	46bd      	mov	sp, r7
 8012a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a76:	4770      	bx	lr

08012a78 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8012a78:	b580      	push	{r7, lr}
 8012a7a:	b084      	sub	sp, #16
 8012a7c:	af00      	add	r7, sp, #0
 8012a7e:	6078      	str	r0, [r7, #4]
 8012a80:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8012a86:	68fb      	ldr	r3, [r7, #12]
 8012a88:	2b00      	cmp	r3, #0
 8012a8a:	d10a      	bne.n	8012aa2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8012a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a90:	f383 8811 	msr	BASEPRI, r3
 8012a94:	f3bf 8f6f 	isb	sy
 8012a98:	f3bf 8f4f 	dsb	sy
 8012a9c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8012a9e:	bf00      	nop
 8012aa0:	e7fe      	b.n	8012aa0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8012aa2:	f002 fa1f 	bl	8014ee4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012aa6:	68fb      	ldr	r3, [r7, #12]
 8012aa8:	681a      	ldr	r2, [r3, #0]
 8012aaa:	68fb      	ldr	r3, [r7, #12]
 8012aac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012aae:	68f9      	ldr	r1, [r7, #12]
 8012ab0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8012ab2:	fb01 f303 	mul.w	r3, r1, r3
 8012ab6:	441a      	add	r2, r3
 8012ab8:	68fb      	ldr	r3, [r7, #12]
 8012aba:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8012abc:	68fb      	ldr	r3, [r7, #12]
 8012abe:	2200      	movs	r2, #0
 8012ac0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8012ac2:	68fb      	ldr	r3, [r7, #12]
 8012ac4:	681a      	ldr	r2, [r3, #0]
 8012ac6:	68fb      	ldr	r3, [r7, #12]
 8012ac8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012aca:	68fb      	ldr	r3, [r7, #12]
 8012acc:	681a      	ldr	r2, [r3, #0]
 8012ace:	68fb      	ldr	r3, [r7, #12]
 8012ad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012ad2:	3b01      	subs	r3, #1
 8012ad4:	68f9      	ldr	r1, [r7, #12]
 8012ad6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8012ad8:	fb01 f303 	mul.w	r3, r1, r3
 8012adc:	441a      	add	r2, r3
 8012ade:	68fb      	ldr	r3, [r7, #12]
 8012ae0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8012ae2:	68fb      	ldr	r3, [r7, #12]
 8012ae4:	22ff      	movs	r2, #255	; 0xff
 8012ae6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8012aea:	68fb      	ldr	r3, [r7, #12]
 8012aec:	22ff      	movs	r2, #255	; 0xff
 8012aee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8012af2:	683b      	ldr	r3, [r7, #0]
 8012af4:	2b00      	cmp	r3, #0
 8012af6:	d114      	bne.n	8012b22 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012af8:	68fb      	ldr	r3, [r7, #12]
 8012afa:	691b      	ldr	r3, [r3, #16]
 8012afc:	2b00      	cmp	r3, #0
 8012afe:	d01a      	beq.n	8012b36 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012b00:	68fb      	ldr	r3, [r7, #12]
 8012b02:	3310      	adds	r3, #16
 8012b04:	4618      	mov	r0, r3
 8012b06:	f001 fa89 	bl	801401c <xTaskRemoveFromEventList>
 8012b0a:	4603      	mov	r3, r0
 8012b0c:	2b00      	cmp	r3, #0
 8012b0e:	d012      	beq.n	8012b36 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8012b10:	4b0c      	ldr	r3, [pc, #48]	; (8012b44 <xQueueGenericReset+0xcc>)
 8012b12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012b16:	601a      	str	r2, [r3, #0]
 8012b18:	f3bf 8f4f 	dsb	sy
 8012b1c:	f3bf 8f6f 	isb	sy
 8012b20:	e009      	b.n	8012b36 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8012b22:	68fb      	ldr	r3, [r7, #12]
 8012b24:	3310      	adds	r3, #16
 8012b26:	4618      	mov	r0, r3
 8012b28:	f7ff fef2 	bl	8012910 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8012b2c:	68fb      	ldr	r3, [r7, #12]
 8012b2e:	3324      	adds	r3, #36	; 0x24
 8012b30:	4618      	mov	r0, r3
 8012b32:	f7ff feed 	bl	8012910 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8012b36:	f002 fa05 	bl	8014f44 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8012b3a:	2301      	movs	r3, #1
}
 8012b3c:	4618      	mov	r0, r3
 8012b3e:	3710      	adds	r7, #16
 8012b40:	46bd      	mov	sp, r7
 8012b42:	bd80      	pop	{r7, pc}
 8012b44:	e000ed04 	.word	0xe000ed04

08012b48 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8012b48:	b580      	push	{r7, lr}
 8012b4a:	b08e      	sub	sp, #56	; 0x38
 8012b4c:	af02      	add	r7, sp, #8
 8012b4e:	60f8      	str	r0, [r7, #12]
 8012b50:	60b9      	str	r1, [r7, #8]
 8012b52:	607a      	str	r2, [r7, #4]
 8012b54:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8012b56:	68fb      	ldr	r3, [r7, #12]
 8012b58:	2b00      	cmp	r3, #0
 8012b5a:	d10a      	bne.n	8012b72 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8012b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b60:	f383 8811 	msr	BASEPRI, r3
 8012b64:	f3bf 8f6f 	isb	sy
 8012b68:	f3bf 8f4f 	dsb	sy
 8012b6c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8012b6e:	bf00      	nop
 8012b70:	e7fe      	b.n	8012b70 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8012b72:	683b      	ldr	r3, [r7, #0]
 8012b74:	2b00      	cmp	r3, #0
 8012b76:	d10a      	bne.n	8012b8e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8012b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b7c:	f383 8811 	msr	BASEPRI, r3
 8012b80:	f3bf 8f6f 	isb	sy
 8012b84:	f3bf 8f4f 	dsb	sy
 8012b88:	627b      	str	r3, [r7, #36]	; 0x24
}
 8012b8a:	bf00      	nop
 8012b8c:	e7fe      	b.n	8012b8c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8012b8e:	687b      	ldr	r3, [r7, #4]
 8012b90:	2b00      	cmp	r3, #0
 8012b92:	d002      	beq.n	8012b9a <xQueueGenericCreateStatic+0x52>
 8012b94:	68bb      	ldr	r3, [r7, #8]
 8012b96:	2b00      	cmp	r3, #0
 8012b98:	d001      	beq.n	8012b9e <xQueueGenericCreateStatic+0x56>
 8012b9a:	2301      	movs	r3, #1
 8012b9c:	e000      	b.n	8012ba0 <xQueueGenericCreateStatic+0x58>
 8012b9e:	2300      	movs	r3, #0
 8012ba0:	2b00      	cmp	r3, #0
 8012ba2:	d10a      	bne.n	8012bba <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8012ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ba8:	f383 8811 	msr	BASEPRI, r3
 8012bac:	f3bf 8f6f 	isb	sy
 8012bb0:	f3bf 8f4f 	dsb	sy
 8012bb4:	623b      	str	r3, [r7, #32]
}
 8012bb6:	bf00      	nop
 8012bb8:	e7fe      	b.n	8012bb8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	2b00      	cmp	r3, #0
 8012bbe:	d102      	bne.n	8012bc6 <xQueueGenericCreateStatic+0x7e>
 8012bc0:	68bb      	ldr	r3, [r7, #8]
 8012bc2:	2b00      	cmp	r3, #0
 8012bc4:	d101      	bne.n	8012bca <xQueueGenericCreateStatic+0x82>
 8012bc6:	2301      	movs	r3, #1
 8012bc8:	e000      	b.n	8012bcc <xQueueGenericCreateStatic+0x84>
 8012bca:	2300      	movs	r3, #0
 8012bcc:	2b00      	cmp	r3, #0
 8012bce:	d10a      	bne.n	8012be6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8012bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012bd4:	f383 8811 	msr	BASEPRI, r3
 8012bd8:	f3bf 8f6f 	isb	sy
 8012bdc:	f3bf 8f4f 	dsb	sy
 8012be0:	61fb      	str	r3, [r7, #28]
}
 8012be2:	bf00      	nop
 8012be4:	e7fe      	b.n	8012be4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8012be6:	2350      	movs	r3, #80	; 0x50
 8012be8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8012bea:	697b      	ldr	r3, [r7, #20]
 8012bec:	2b50      	cmp	r3, #80	; 0x50
 8012bee:	d00a      	beq.n	8012c06 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8012bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012bf4:	f383 8811 	msr	BASEPRI, r3
 8012bf8:	f3bf 8f6f 	isb	sy
 8012bfc:	f3bf 8f4f 	dsb	sy
 8012c00:	61bb      	str	r3, [r7, #24]
}
 8012c02:	bf00      	nop
 8012c04:	e7fe      	b.n	8012c04 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8012c06:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012c08:	683b      	ldr	r3, [r7, #0]
 8012c0a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8012c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c0e:	2b00      	cmp	r3, #0
 8012c10:	d00d      	beq.n	8012c2e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8012c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c14:	2201      	movs	r2, #1
 8012c16:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012c1a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8012c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c20:	9300      	str	r3, [sp, #0]
 8012c22:	4613      	mov	r3, r2
 8012c24:	687a      	ldr	r2, [r7, #4]
 8012c26:	68b9      	ldr	r1, [r7, #8]
 8012c28:	68f8      	ldr	r0, [r7, #12]
 8012c2a:	f000 f83f 	bl	8012cac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8012c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8012c30:	4618      	mov	r0, r3
 8012c32:	3730      	adds	r7, #48	; 0x30
 8012c34:	46bd      	mov	sp, r7
 8012c36:	bd80      	pop	{r7, pc}

08012c38 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8012c38:	b580      	push	{r7, lr}
 8012c3a:	b08a      	sub	sp, #40	; 0x28
 8012c3c:	af02      	add	r7, sp, #8
 8012c3e:	60f8      	str	r0, [r7, #12]
 8012c40:	60b9      	str	r1, [r7, #8]
 8012c42:	4613      	mov	r3, r2
 8012c44:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8012c46:	68fb      	ldr	r3, [r7, #12]
 8012c48:	2b00      	cmp	r3, #0
 8012c4a:	d10a      	bne.n	8012c62 <xQueueGenericCreate+0x2a>
	__asm volatile
 8012c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c50:	f383 8811 	msr	BASEPRI, r3
 8012c54:	f3bf 8f6f 	isb	sy
 8012c58:	f3bf 8f4f 	dsb	sy
 8012c5c:	613b      	str	r3, [r7, #16]
}
 8012c5e:	bf00      	nop
 8012c60:	e7fe      	b.n	8012c60 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012c62:	68fb      	ldr	r3, [r7, #12]
 8012c64:	68ba      	ldr	r2, [r7, #8]
 8012c66:	fb02 f303 	mul.w	r3, r2, r3
 8012c6a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8012c6c:	69fb      	ldr	r3, [r7, #28]
 8012c6e:	3350      	adds	r3, #80	; 0x50
 8012c70:	4618      	mov	r0, r3
 8012c72:	f002 fa59 	bl	8015128 <pvPortMalloc>
 8012c76:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8012c78:	69bb      	ldr	r3, [r7, #24]
 8012c7a:	2b00      	cmp	r3, #0
 8012c7c:	d011      	beq.n	8012ca2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8012c7e:	69bb      	ldr	r3, [r7, #24]
 8012c80:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012c82:	697b      	ldr	r3, [r7, #20]
 8012c84:	3350      	adds	r3, #80	; 0x50
 8012c86:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8012c88:	69bb      	ldr	r3, [r7, #24]
 8012c8a:	2200      	movs	r2, #0
 8012c8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012c90:	79fa      	ldrb	r2, [r7, #7]
 8012c92:	69bb      	ldr	r3, [r7, #24]
 8012c94:	9300      	str	r3, [sp, #0]
 8012c96:	4613      	mov	r3, r2
 8012c98:	697a      	ldr	r2, [r7, #20]
 8012c9a:	68b9      	ldr	r1, [r7, #8]
 8012c9c:	68f8      	ldr	r0, [r7, #12]
 8012c9e:	f000 f805 	bl	8012cac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8012ca2:	69bb      	ldr	r3, [r7, #24]
	}
 8012ca4:	4618      	mov	r0, r3
 8012ca6:	3720      	adds	r7, #32
 8012ca8:	46bd      	mov	sp, r7
 8012caa:	bd80      	pop	{r7, pc}

08012cac <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8012cac:	b580      	push	{r7, lr}
 8012cae:	b084      	sub	sp, #16
 8012cb0:	af00      	add	r7, sp, #0
 8012cb2:	60f8      	str	r0, [r7, #12]
 8012cb4:	60b9      	str	r1, [r7, #8]
 8012cb6:	607a      	str	r2, [r7, #4]
 8012cb8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8012cba:	68bb      	ldr	r3, [r7, #8]
 8012cbc:	2b00      	cmp	r3, #0
 8012cbe:	d103      	bne.n	8012cc8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8012cc0:	69bb      	ldr	r3, [r7, #24]
 8012cc2:	69ba      	ldr	r2, [r7, #24]
 8012cc4:	601a      	str	r2, [r3, #0]
 8012cc6:	e002      	b.n	8012cce <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8012cc8:	69bb      	ldr	r3, [r7, #24]
 8012cca:	687a      	ldr	r2, [r7, #4]
 8012ccc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8012cce:	69bb      	ldr	r3, [r7, #24]
 8012cd0:	68fa      	ldr	r2, [r7, #12]
 8012cd2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8012cd4:	69bb      	ldr	r3, [r7, #24]
 8012cd6:	68ba      	ldr	r2, [r7, #8]
 8012cd8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8012cda:	2101      	movs	r1, #1
 8012cdc:	69b8      	ldr	r0, [r7, #24]
 8012cde:	f7ff fecb 	bl	8012a78 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8012ce2:	69bb      	ldr	r3, [r7, #24]
 8012ce4:	78fa      	ldrb	r2, [r7, #3]
 8012ce6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 8012cea:	78fb      	ldrb	r3, [r7, #3]
 8012cec:	68ba      	ldr	r2, [r7, #8]
 8012cee:	68f9      	ldr	r1, [r7, #12]
 8012cf0:	2073      	movs	r0, #115	; 0x73
 8012cf2:	f003 f8e1 	bl	8015eb8 <SEGGER_SYSVIEW_RecordU32x3>
}
 8012cf6:	bf00      	nop
 8012cf8:	3710      	adds	r7, #16
 8012cfa:	46bd      	mov	sp, r7
 8012cfc:	bd80      	pop	{r7, pc}
	...

08012d00 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8012d00:	b580      	push	{r7, lr}
 8012d02:	b090      	sub	sp, #64	; 0x40
 8012d04:	af02      	add	r7, sp, #8
 8012d06:	60f8      	str	r0, [r7, #12]
 8012d08:	60b9      	str	r1, [r7, #8]
 8012d0a:	607a      	str	r2, [r7, #4]
 8012d0c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8012d0e:	2300      	movs	r3, #0
 8012d10:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012d12:	68fb      	ldr	r3, [r7, #12]
 8012d14:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8012d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d18:	2b00      	cmp	r3, #0
 8012d1a:	d10a      	bne.n	8012d32 <xQueueGenericSend+0x32>
	__asm volatile
 8012d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d20:	f383 8811 	msr	BASEPRI, r3
 8012d24:	f3bf 8f6f 	isb	sy
 8012d28:	f3bf 8f4f 	dsb	sy
 8012d2c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8012d2e:	bf00      	nop
 8012d30:	e7fe      	b.n	8012d30 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012d32:	68bb      	ldr	r3, [r7, #8]
 8012d34:	2b00      	cmp	r3, #0
 8012d36:	d103      	bne.n	8012d40 <xQueueGenericSend+0x40>
 8012d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012d3c:	2b00      	cmp	r3, #0
 8012d3e:	d101      	bne.n	8012d44 <xQueueGenericSend+0x44>
 8012d40:	2301      	movs	r3, #1
 8012d42:	e000      	b.n	8012d46 <xQueueGenericSend+0x46>
 8012d44:	2300      	movs	r3, #0
 8012d46:	2b00      	cmp	r3, #0
 8012d48:	d10a      	bne.n	8012d60 <xQueueGenericSend+0x60>
	__asm volatile
 8012d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d4e:	f383 8811 	msr	BASEPRI, r3
 8012d52:	f3bf 8f6f 	isb	sy
 8012d56:	f3bf 8f4f 	dsb	sy
 8012d5a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8012d5c:	bf00      	nop
 8012d5e:	e7fe      	b.n	8012d5e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012d60:	683b      	ldr	r3, [r7, #0]
 8012d62:	2b02      	cmp	r3, #2
 8012d64:	d103      	bne.n	8012d6e <xQueueGenericSend+0x6e>
 8012d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012d6a:	2b01      	cmp	r3, #1
 8012d6c:	d101      	bne.n	8012d72 <xQueueGenericSend+0x72>
 8012d6e:	2301      	movs	r3, #1
 8012d70:	e000      	b.n	8012d74 <xQueueGenericSend+0x74>
 8012d72:	2300      	movs	r3, #0
 8012d74:	2b00      	cmp	r3, #0
 8012d76:	d10a      	bne.n	8012d8e <xQueueGenericSend+0x8e>
	__asm volatile
 8012d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d7c:	f383 8811 	msr	BASEPRI, r3
 8012d80:	f3bf 8f6f 	isb	sy
 8012d84:	f3bf 8f4f 	dsb	sy
 8012d88:	623b      	str	r3, [r7, #32]
}
 8012d8a:	bf00      	nop
 8012d8c:	e7fe      	b.n	8012d8c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012d8e:	f001 fb43 	bl	8014418 <xTaskGetSchedulerState>
 8012d92:	4603      	mov	r3, r0
 8012d94:	2b00      	cmp	r3, #0
 8012d96:	d102      	bne.n	8012d9e <xQueueGenericSend+0x9e>
 8012d98:	687b      	ldr	r3, [r7, #4]
 8012d9a:	2b00      	cmp	r3, #0
 8012d9c:	d101      	bne.n	8012da2 <xQueueGenericSend+0xa2>
 8012d9e:	2301      	movs	r3, #1
 8012da0:	e000      	b.n	8012da4 <xQueueGenericSend+0xa4>
 8012da2:	2300      	movs	r3, #0
 8012da4:	2b00      	cmp	r3, #0
 8012da6:	d10a      	bne.n	8012dbe <xQueueGenericSend+0xbe>
	__asm volatile
 8012da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012dac:	f383 8811 	msr	BASEPRI, r3
 8012db0:	f3bf 8f6f 	isb	sy
 8012db4:	f3bf 8f4f 	dsb	sy
 8012db8:	61fb      	str	r3, [r7, #28]
}
 8012dba:	bf00      	nop
 8012dbc:	e7fe      	b.n	8012dbc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012dbe:	f002 f891 	bl	8014ee4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8012dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012dca:	429a      	cmp	r2, r3
 8012dcc:	d302      	bcc.n	8012dd4 <xQueueGenericSend+0xd4>
 8012dce:	683b      	ldr	r3, [r7, #0]
 8012dd0:	2b02      	cmp	r3, #2
 8012dd2:	d136      	bne.n	8012e42 <xQueueGenericSend+0x142>
			{
				traceQUEUE_SEND( pxQueue );
 8012dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dd6:	4618      	mov	r0, r3
 8012dd8:	f003 fd20 	bl	801681c <SEGGER_SYSVIEW_ShrinkId>
 8012ddc:	68ba      	ldr	r2, [r7, #8]
 8012dde:	6879      	ldr	r1, [r7, #4]
 8012de0:	683b      	ldr	r3, [r7, #0]
 8012de2:	9300      	str	r3, [sp, #0]
 8012de4:	460b      	mov	r3, r1
 8012de6:	4601      	mov	r1, r0
 8012de8:	205a      	movs	r0, #90	; 0x5a
 8012dea:	f003 f8db 	bl	8015fa4 <SEGGER_SYSVIEW_RecordU32x4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012dee:	683a      	ldr	r2, [r7, #0]
 8012df0:	68b9      	ldr	r1, [r7, #8]
 8012df2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012df4:	f000 fa6a 	bl	80132cc <prvCopyDataToQueue>
 8012df8:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012dfe:	2b00      	cmp	r3, #0
 8012e00:	d010      	beq.n	8012e24 <xQueueGenericSend+0x124>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e04:	3324      	adds	r3, #36	; 0x24
 8012e06:	4618      	mov	r0, r3
 8012e08:	f001 f908 	bl	801401c <xTaskRemoveFromEventList>
 8012e0c:	4603      	mov	r3, r0
 8012e0e:	2b00      	cmp	r3, #0
 8012e10:	d013      	beq.n	8012e3a <xQueueGenericSend+0x13a>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8012e12:	4b4d      	ldr	r3, [pc, #308]	; (8012f48 <xQueueGenericSend+0x248>)
 8012e14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012e18:	601a      	str	r2, [r3, #0]
 8012e1a:	f3bf 8f4f 	dsb	sy
 8012e1e:	f3bf 8f6f 	isb	sy
 8012e22:	e00a      	b.n	8012e3a <xQueueGenericSend+0x13a>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8012e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e26:	2b00      	cmp	r3, #0
 8012e28:	d007      	beq.n	8012e3a <xQueueGenericSend+0x13a>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8012e2a:	4b47      	ldr	r3, [pc, #284]	; (8012f48 <xQueueGenericSend+0x248>)
 8012e2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012e30:	601a      	str	r2, [r3, #0]
 8012e32:	f3bf 8f4f 	dsb	sy
 8012e36:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8012e3a:	f002 f883 	bl	8014f44 <vPortExitCritical>
				return pdPASS;
 8012e3e:	2301      	movs	r3, #1
 8012e40:	e07d      	b.n	8012f3e <xQueueGenericSend+0x23e>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	2b00      	cmp	r3, #0
 8012e46:	d110      	bne.n	8012e6a <xQueueGenericSend+0x16a>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8012e48:	f002 f87c 	bl	8014f44 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 8012e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e4e:	4618      	mov	r0, r3
 8012e50:	f003 fce4 	bl	801681c <SEGGER_SYSVIEW_ShrinkId>
 8012e54:	68ba      	ldr	r2, [r7, #8]
 8012e56:	6879      	ldr	r1, [r7, #4]
 8012e58:	683b      	ldr	r3, [r7, #0]
 8012e5a:	9300      	str	r3, [sp, #0]
 8012e5c:	460b      	mov	r3, r1
 8012e5e:	4601      	mov	r1, r0
 8012e60:	205a      	movs	r0, #90	; 0x5a
 8012e62:	f003 f89f 	bl	8015fa4 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_FULL;
 8012e66:	2300      	movs	r3, #0
 8012e68:	e069      	b.n	8012f3e <xQueueGenericSend+0x23e>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012e6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012e6c:	2b00      	cmp	r3, #0
 8012e6e:	d106      	bne.n	8012e7e <xQueueGenericSend+0x17e>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012e70:	f107 0314 	add.w	r3, r7, #20
 8012e74:	4618      	mov	r0, r3
 8012e76:	f001 f939 	bl	80140ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012e7a:	2301      	movs	r3, #1
 8012e7c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012e7e:	f002 f861 	bl	8014f44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012e82:	f000 fe71 	bl	8013b68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012e86:	f002 f82d 	bl	8014ee4 <vPortEnterCritical>
 8012e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012e90:	b25b      	sxtb	r3, r3
 8012e92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012e96:	d103      	bne.n	8012ea0 <xQueueGenericSend+0x1a0>
 8012e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e9a:	2200      	movs	r2, #0
 8012e9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ea2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012ea6:	b25b      	sxtb	r3, r3
 8012ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012eac:	d103      	bne.n	8012eb6 <xQueueGenericSend+0x1b6>
 8012eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012eb0:	2200      	movs	r2, #0
 8012eb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012eb6:	f002 f845 	bl	8014f44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012eba:	1d3a      	adds	r2, r7, #4
 8012ebc:	f107 0314 	add.w	r3, r7, #20
 8012ec0:	4611      	mov	r1, r2
 8012ec2:	4618      	mov	r0, r3
 8012ec4:	f001 f928 	bl	8014118 <xTaskCheckForTimeOut>
 8012ec8:	4603      	mov	r3, r0
 8012eca:	2b00      	cmp	r3, #0
 8012ecc:	d124      	bne.n	8012f18 <xQueueGenericSend+0x218>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8012ece:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012ed0:	f000 faf4 	bl	80134bc <prvIsQueueFull>
 8012ed4:	4603      	mov	r3, r0
 8012ed6:	2b00      	cmp	r3, #0
 8012ed8:	d018      	beq.n	8012f0c <xQueueGenericSend+0x20c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8012eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012edc:	3310      	adds	r3, #16
 8012ede:	687a      	ldr	r2, [r7, #4]
 8012ee0:	4611      	mov	r1, r2
 8012ee2:	4618      	mov	r0, r3
 8012ee4:	f001 f848 	bl	8013f78 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8012ee8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012eea:	f000 fa7f 	bl	80133ec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8012eee:	f000 fe49 	bl	8013b84 <xTaskResumeAll>
 8012ef2:	4603      	mov	r3, r0
 8012ef4:	2b00      	cmp	r3, #0
 8012ef6:	f47f af62 	bne.w	8012dbe <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8012efa:	4b13      	ldr	r3, [pc, #76]	; (8012f48 <xQueueGenericSend+0x248>)
 8012efc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012f00:	601a      	str	r2, [r3, #0]
 8012f02:	f3bf 8f4f 	dsb	sy
 8012f06:	f3bf 8f6f 	isb	sy
 8012f0a:	e758      	b.n	8012dbe <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8012f0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012f0e:	f000 fa6d 	bl	80133ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012f12:	f000 fe37 	bl	8013b84 <xTaskResumeAll>
 8012f16:	e752      	b.n	8012dbe <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8012f18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012f1a:	f000 fa67 	bl	80133ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012f1e:	f000 fe31 	bl	8013b84 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 8012f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f24:	4618      	mov	r0, r3
 8012f26:	f003 fc79 	bl	801681c <SEGGER_SYSVIEW_ShrinkId>
 8012f2a:	68ba      	ldr	r2, [r7, #8]
 8012f2c:	6879      	ldr	r1, [r7, #4]
 8012f2e:	683b      	ldr	r3, [r7, #0]
 8012f30:	9300      	str	r3, [sp, #0]
 8012f32:	460b      	mov	r3, r1
 8012f34:	4601      	mov	r1, r0
 8012f36:	205a      	movs	r0, #90	; 0x5a
 8012f38:	f003 f834 	bl	8015fa4 <SEGGER_SYSVIEW_RecordU32x4>
			return errQUEUE_FULL;
 8012f3c:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8012f3e:	4618      	mov	r0, r3
 8012f40:	3738      	adds	r7, #56	; 0x38
 8012f42:	46bd      	mov	sp, r7
 8012f44:	bd80      	pop	{r7, pc}
 8012f46:	bf00      	nop
 8012f48:	e000ed04 	.word	0xe000ed04

08012f4c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8012f4c:	b580      	push	{r7, lr}
 8012f4e:	b090      	sub	sp, #64	; 0x40
 8012f50:	af00      	add	r7, sp, #0
 8012f52:	60f8      	str	r0, [r7, #12]
 8012f54:	60b9      	str	r1, [r7, #8]
 8012f56:	607a      	str	r2, [r7, #4]
 8012f58:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012f5a:	68fb      	ldr	r3, [r7, #12]
 8012f5c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8012f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f60:	2b00      	cmp	r3, #0
 8012f62:	d10a      	bne.n	8012f7a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8012f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f68:	f383 8811 	msr	BASEPRI, r3
 8012f6c:	f3bf 8f6f 	isb	sy
 8012f70:	f3bf 8f4f 	dsb	sy
 8012f74:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8012f76:	bf00      	nop
 8012f78:	e7fe      	b.n	8012f78 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012f7a:	68bb      	ldr	r3, [r7, #8]
 8012f7c:	2b00      	cmp	r3, #0
 8012f7e:	d103      	bne.n	8012f88 <xQueueGenericSendFromISR+0x3c>
 8012f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012f84:	2b00      	cmp	r3, #0
 8012f86:	d101      	bne.n	8012f8c <xQueueGenericSendFromISR+0x40>
 8012f88:	2301      	movs	r3, #1
 8012f8a:	e000      	b.n	8012f8e <xQueueGenericSendFromISR+0x42>
 8012f8c:	2300      	movs	r3, #0
 8012f8e:	2b00      	cmp	r3, #0
 8012f90:	d10a      	bne.n	8012fa8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8012f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f96:	f383 8811 	msr	BASEPRI, r3
 8012f9a:	f3bf 8f6f 	isb	sy
 8012f9e:	f3bf 8f4f 	dsb	sy
 8012fa2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8012fa4:	bf00      	nop
 8012fa6:	e7fe      	b.n	8012fa6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012fa8:	683b      	ldr	r3, [r7, #0]
 8012faa:	2b02      	cmp	r3, #2
 8012fac:	d103      	bne.n	8012fb6 <xQueueGenericSendFromISR+0x6a>
 8012fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012fb2:	2b01      	cmp	r3, #1
 8012fb4:	d101      	bne.n	8012fba <xQueueGenericSendFromISR+0x6e>
 8012fb6:	2301      	movs	r3, #1
 8012fb8:	e000      	b.n	8012fbc <xQueueGenericSendFromISR+0x70>
 8012fba:	2300      	movs	r3, #0
 8012fbc:	2b00      	cmp	r3, #0
 8012fbe:	d10a      	bne.n	8012fd6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8012fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012fc4:	f383 8811 	msr	BASEPRI, r3
 8012fc8:	f3bf 8f6f 	isb	sy
 8012fcc:	f3bf 8f4f 	dsb	sy
 8012fd0:	623b      	str	r3, [r7, #32]
}
 8012fd2:	bf00      	nop
 8012fd4:	e7fe      	b.n	8012fd4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012fd6:	f002 f867 	bl	80150a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8012fda:	f3ef 8211 	mrs	r2, BASEPRI
 8012fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012fe2:	f383 8811 	msr	BASEPRI, r3
 8012fe6:	f3bf 8f6f 	isb	sy
 8012fea:	f3bf 8f4f 	dsb	sy
 8012fee:	61fa      	str	r2, [r7, #28]
 8012ff0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8012ff2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012ff4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8012ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ff8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012ffe:	429a      	cmp	r2, r3
 8013000:	d302      	bcc.n	8013008 <xQueueGenericSendFromISR+0xbc>
 8013002:	683b      	ldr	r3, [r7, #0]
 8013004:	2b02      	cmp	r3, #2
 8013006:	d139      	bne.n	801307c <xQueueGenericSendFromISR+0x130>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8013008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801300a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801300e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013016:	62fb      	str	r3, [r7, #44]	; 0x2c

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 8013018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801301a:	4618      	mov	r0, r3
 801301c:	f003 fbfe 	bl	801681c <SEGGER_SYSVIEW_ShrinkId>
 8013020:	4601      	mov	r1, r0
 8013022:	687b      	ldr	r3, [r7, #4]
 8013024:	461a      	mov	r2, r3
 8013026:	2060      	movs	r0, #96	; 0x60
 8013028:	f002 feec 	bl	8015e04 <SEGGER_SYSVIEW_RecordU32x2>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801302c:	683a      	ldr	r2, [r7, #0]
 801302e:	68b9      	ldr	r1, [r7, #8]
 8013030:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013032:	f000 f94b 	bl	80132cc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8013036:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 801303a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801303e:	d112      	bne.n	8013066 <xQueueGenericSendFromISR+0x11a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013044:	2b00      	cmp	r3, #0
 8013046:	d016      	beq.n	8013076 <xQueueGenericSendFromISR+0x12a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801304a:	3324      	adds	r3, #36	; 0x24
 801304c:	4618      	mov	r0, r3
 801304e:	f000 ffe5 	bl	801401c <xTaskRemoveFromEventList>
 8013052:	4603      	mov	r3, r0
 8013054:	2b00      	cmp	r3, #0
 8013056:	d00e      	beq.n	8013076 <xQueueGenericSendFromISR+0x12a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	2b00      	cmp	r3, #0
 801305c:	d00b      	beq.n	8013076 <xQueueGenericSendFromISR+0x12a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801305e:	687b      	ldr	r3, [r7, #4]
 8013060:	2201      	movs	r2, #1
 8013062:	601a      	str	r2, [r3, #0]
 8013064:	e007      	b.n	8013076 <xQueueGenericSendFromISR+0x12a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8013066:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801306a:	3301      	adds	r3, #1
 801306c:	b2db      	uxtb	r3, r3
 801306e:	b25a      	sxtb	r2, r3
 8013070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013072:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8013076:	2301      	movs	r3, #1
 8013078:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 801307a:	e00b      	b.n	8013094 <xQueueGenericSendFromISR+0x148>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 801307c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801307e:	4618      	mov	r0, r3
 8013080:	f003 fbcc 	bl	801681c <SEGGER_SYSVIEW_ShrinkId>
 8013084:	4601      	mov	r1, r0
 8013086:	687b      	ldr	r3, [r7, #4]
 8013088:	461a      	mov	r2, r3
 801308a:	2060      	movs	r0, #96	; 0x60
 801308c:	f002 feba 	bl	8015e04 <SEGGER_SYSVIEW_RecordU32x2>
			xReturn = errQUEUE_FULL;
 8013090:	2300      	movs	r3, #0
 8013092:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013094:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013096:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8013098:	697b      	ldr	r3, [r7, #20]
 801309a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801309e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80130a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80130a2:	4618      	mov	r0, r3
 80130a4:	3740      	adds	r7, #64	; 0x40
 80130a6:	46bd      	mov	sp, r7
 80130a8:	bd80      	pop	{r7, pc}
	...

080130ac <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80130ac:	b590      	push	{r4, r7, lr}
 80130ae:	b08f      	sub	sp, #60	; 0x3c
 80130b0:	af02      	add	r7, sp, #8
 80130b2:	60f8      	str	r0, [r7, #12]
 80130b4:	60b9      	str	r1, [r7, #8]
 80130b6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80130b8:	2300      	movs	r3, #0
 80130ba:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80130bc:	68fb      	ldr	r3, [r7, #12]
 80130be:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80130c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130c2:	2b00      	cmp	r3, #0
 80130c4:	d10a      	bne.n	80130dc <xQueueReceive+0x30>
	__asm volatile
 80130c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130ca:	f383 8811 	msr	BASEPRI, r3
 80130ce:	f3bf 8f6f 	isb	sy
 80130d2:	f3bf 8f4f 	dsb	sy
 80130d6:	623b      	str	r3, [r7, #32]
}
 80130d8:	bf00      	nop
 80130da:	e7fe      	b.n	80130da <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80130dc:	68bb      	ldr	r3, [r7, #8]
 80130de:	2b00      	cmp	r3, #0
 80130e0:	d103      	bne.n	80130ea <xQueueReceive+0x3e>
 80130e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80130e6:	2b00      	cmp	r3, #0
 80130e8:	d101      	bne.n	80130ee <xQueueReceive+0x42>
 80130ea:	2301      	movs	r3, #1
 80130ec:	e000      	b.n	80130f0 <xQueueReceive+0x44>
 80130ee:	2300      	movs	r3, #0
 80130f0:	2b00      	cmp	r3, #0
 80130f2:	d10a      	bne.n	801310a <xQueueReceive+0x5e>
	__asm volatile
 80130f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130f8:	f383 8811 	msr	BASEPRI, r3
 80130fc:	f3bf 8f6f 	isb	sy
 8013100:	f3bf 8f4f 	dsb	sy
 8013104:	61fb      	str	r3, [r7, #28]
}
 8013106:	bf00      	nop
 8013108:	e7fe      	b.n	8013108 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801310a:	f001 f985 	bl	8014418 <xTaskGetSchedulerState>
 801310e:	4603      	mov	r3, r0
 8013110:	2b00      	cmp	r3, #0
 8013112:	d102      	bne.n	801311a <xQueueReceive+0x6e>
 8013114:	687b      	ldr	r3, [r7, #4]
 8013116:	2b00      	cmp	r3, #0
 8013118:	d101      	bne.n	801311e <xQueueReceive+0x72>
 801311a:	2301      	movs	r3, #1
 801311c:	e000      	b.n	8013120 <xQueueReceive+0x74>
 801311e:	2300      	movs	r3, #0
 8013120:	2b00      	cmp	r3, #0
 8013122:	d10a      	bne.n	801313a <xQueueReceive+0x8e>
	__asm volatile
 8013124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013128:	f383 8811 	msr	BASEPRI, r3
 801312c:	f3bf 8f6f 	isb	sy
 8013130:	f3bf 8f4f 	dsb	sy
 8013134:	61bb      	str	r3, [r7, #24]
}
 8013136:	bf00      	nop
 8013138:	e7fe      	b.n	8013138 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801313a:	f001 fed3 	bl	8014ee4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801313e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013142:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013146:	2b00      	cmp	r3, #0
 8013148:	d02f      	beq.n	80131aa <xQueueReceive+0xfe>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801314a:	68b9      	ldr	r1, [r7, #8]
 801314c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801314e:	f000 f927 	bl	80133a0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
 8013152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013154:	4618      	mov	r0, r3
 8013156:	f003 fb61 	bl	801681c <SEGGER_SYSVIEW_ShrinkId>
 801315a:	4604      	mov	r4, r0
 801315c:	2000      	movs	r0, #0
 801315e:	f003 fb5d 	bl	801681c <SEGGER_SYSVIEW_ShrinkId>
 8013162:	4602      	mov	r2, r0
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	2101      	movs	r1, #1
 8013168:	9100      	str	r1, [sp, #0]
 801316a:	4621      	mov	r1, r4
 801316c:	205c      	movs	r0, #92	; 0x5c
 801316e:	f002 ff19 	bl	8015fa4 <SEGGER_SYSVIEW_RecordU32x4>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013174:	1e5a      	subs	r2, r3, #1
 8013176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013178:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801317a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801317c:	691b      	ldr	r3, [r3, #16]
 801317e:	2b00      	cmp	r3, #0
 8013180:	d00f      	beq.n	80131a2 <xQueueReceive+0xf6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013184:	3310      	adds	r3, #16
 8013186:	4618      	mov	r0, r3
 8013188:	f000 ff48 	bl	801401c <xTaskRemoveFromEventList>
 801318c:	4603      	mov	r3, r0
 801318e:	2b00      	cmp	r3, #0
 8013190:	d007      	beq.n	80131a2 <xQueueReceive+0xf6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8013192:	4b4d      	ldr	r3, [pc, #308]	; (80132c8 <xQueueReceive+0x21c>)
 8013194:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013198:	601a      	str	r2, [r3, #0]
 801319a:	f3bf 8f4f 	dsb	sy
 801319e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80131a2:	f001 fecf 	bl	8014f44 <vPortExitCritical>
				return pdPASS;
 80131a6:	2301      	movs	r3, #1
 80131a8:	e08a      	b.n	80132c0 <xQueueReceive+0x214>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80131aa:	687b      	ldr	r3, [r7, #4]
 80131ac:	2b00      	cmp	r3, #0
 80131ae:	d113      	bne.n	80131d8 <xQueueReceive+0x12c>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80131b0:	f001 fec8 	bl	8014f44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 80131b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131b6:	4618      	mov	r0, r3
 80131b8:	f003 fb30 	bl	801681c <SEGGER_SYSVIEW_ShrinkId>
 80131bc:	4604      	mov	r4, r0
 80131be:	2000      	movs	r0, #0
 80131c0:	f003 fb2c 	bl	801681c <SEGGER_SYSVIEW_ShrinkId>
 80131c4:	4602      	mov	r2, r0
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	2101      	movs	r1, #1
 80131ca:	9100      	str	r1, [sp, #0]
 80131cc:	4621      	mov	r1, r4
 80131ce:	205c      	movs	r0, #92	; 0x5c
 80131d0:	f002 fee8 	bl	8015fa4 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 80131d4:	2300      	movs	r3, #0
 80131d6:	e073      	b.n	80132c0 <xQueueReceive+0x214>
				}
				else if( xEntryTimeSet == pdFALSE )
 80131d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131da:	2b00      	cmp	r3, #0
 80131dc:	d106      	bne.n	80131ec <xQueueReceive+0x140>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80131de:	f107 0310 	add.w	r3, r7, #16
 80131e2:	4618      	mov	r0, r3
 80131e4:	f000 ff82 	bl	80140ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80131e8:	2301      	movs	r3, #1
 80131ea:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80131ec:	f001 feaa 	bl	8014f44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80131f0:	f000 fcba 	bl	8013b68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80131f4:	f001 fe76 	bl	8014ee4 <vPortEnterCritical>
 80131f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80131fe:	b25b      	sxtb	r3, r3
 8013200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013204:	d103      	bne.n	801320e <xQueueReceive+0x162>
 8013206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013208:	2200      	movs	r2, #0
 801320a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801320e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013210:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013214:	b25b      	sxtb	r3, r3
 8013216:	f1b3 3fff 	cmp.w	r3, #4294967295
 801321a:	d103      	bne.n	8013224 <xQueueReceive+0x178>
 801321c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801321e:	2200      	movs	r2, #0
 8013220:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013224:	f001 fe8e 	bl	8014f44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013228:	1d3a      	adds	r2, r7, #4
 801322a:	f107 0310 	add.w	r3, r7, #16
 801322e:	4611      	mov	r1, r2
 8013230:	4618      	mov	r0, r3
 8013232:	f000 ff71 	bl	8014118 <xTaskCheckForTimeOut>
 8013236:	4603      	mov	r3, r0
 8013238:	2b00      	cmp	r3, #0
 801323a:	d124      	bne.n	8013286 <xQueueReceive+0x1da>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801323c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801323e:	f000 f927 	bl	8013490 <prvIsQueueEmpty>
 8013242:	4603      	mov	r3, r0
 8013244:	2b00      	cmp	r3, #0
 8013246:	d018      	beq.n	801327a <xQueueReceive+0x1ce>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801324a:	3324      	adds	r3, #36	; 0x24
 801324c:	687a      	ldr	r2, [r7, #4]
 801324e:	4611      	mov	r1, r2
 8013250:	4618      	mov	r0, r3
 8013252:	f000 fe91 	bl	8013f78 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8013256:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013258:	f000 f8c8 	bl	80133ec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801325c:	f000 fc92 	bl	8013b84 <xTaskResumeAll>
 8013260:	4603      	mov	r3, r0
 8013262:	2b00      	cmp	r3, #0
 8013264:	f47f af69 	bne.w	801313a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8013268:	4b17      	ldr	r3, [pc, #92]	; (80132c8 <xQueueReceive+0x21c>)
 801326a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801326e:	601a      	str	r2, [r3, #0]
 8013270:	f3bf 8f4f 	dsb	sy
 8013274:	f3bf 8f6f 	isb	sy
 8013278:	e75f      	b.n	801313a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801327a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801327c:	f000 f8b6 	bl	80133ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013280:	f000 fc80 	bl	8013b84 <xTaskResumeAll>
 8013284:	e759      	b.n	801313a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8013286:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013288:	f000 f8b0 	bl	80133ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801328c:	f000 fc7a 	bl	8013b84 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013290:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013292:	f000 f8fd 	bl	8013490 <prvIsQueueEmpty>
 8013296:	4603      	mov	r3, r0
 8013298:	2b00      	cmp	r3, #0
 801329a:	f43f af4e 	beq.w	801313a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 801329e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132a0:	4618      	mov	r0, r3
 80132a2:	f003 fabb 	bl	801681c <SEGGER_SYSVIEW_ShrinkId>
 80132a6:	4604      	mov	r4, r0
 80132a8:	2000      	movs	r0, #0
 80132aa:	f003 fab7 	bl	801681c <SEGGER_SYSVIEW_ShrinkId>
 80132ae:	4602      	mov	r2, r0
 80132b0:	687b      	ldr	r3, [r7, #4]
 80132b2:	2101      	movs	r1, #1
 80132b4:	9100      	str	r1, [sp, #0]
 80132b6:	4621      	mov	r1, r4
 80132b8:	205c      	movs	r0, #92	; 0x5c
 80132ba:	f002 fe73 	bl	8015fa4 <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 80132be:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80132c0:	4618      	mov	r0, r3
 80132c2:	3734      	adds	r7, #52	; 0x34
 80132c4:	46bd      	mov	sp, r7
 80132c6:	bd90      	pop	{r4, r7, pc}
 80132c8:	e000ed04 	.word	0xe000ed04

080132cc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80132cc:	b580      	push	{r7, lr}
 80132ce:	b086      	sub	sp, #24
 80132d0:	af00      	add	r7, sp, #0
 80132d2:	60f8      	str	r0, [r7, #12]
 80132d4:	60b9      	str	r1, [r7, #8]
 80132d6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80132d8:	2300      	movs	r3, #0
 80132da:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80132dc:	68fb      	ldr	r3, [r7, #12]
 80132de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80132e0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80132e2:	68fb      	ldr	r3, [r7, #12]
 80132e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80132e6:	2b00      	cmp	r3, #0
 80132e8:	d10d      	bne.n	8013306 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80132ea:	68fb      	ldr	r3, [r7, #12]
 80132ec:	681b      	ldr	r3, [r3, #0]
 80132ee:	2b00      	cmp	r3, #0
 80132f0:	d14d      	bne.n	801338e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80132f2:	68fb      	ldr	r3, [r7, #12]
 80132f4:	689b      	ldr	r3, [r3, #8]
 80132f6:	4618      	mov	r0, r3
 80132f8:	f001 f8ac 	bl	8014454 <xTaskPriorityDisinherit>
 80132fc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80132fe:	68fb      	ldr	r3, [r7, #12]
 8013300:	2200      	movs	r2, #0
 8013302:	609a      	str	r2, [r3, #8]
 8013304:	e043      	b.n	801338e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8013306:	687b      	ldr	r3, [r7, #4]
 8013308:	2b00      	cmp	r3, #0
 801330a:	d119      	bne.n	8013340 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801330c:	68fb      	ldr	r3, [r7, #12]
 801330e:	6858      	ldr	r0, [r3, #4]
 8013310:	68fb      	ldr	r3, [r7, #12]
 8013312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013314:	461a      	mov	r2, r3
 8013316:	68b9      	ldr	r1, [r7, #8]
 8013318:	f003 fc20 	bl	8016b5c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801331c:	68fb      	ldr	r3, [r7, #12]
 801331e:	685a      	ldr	r2, [r3, #4]
 8013320:	68fb      	ldr	r3, [r7, #12]
 8013322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013324:	441a      	add	r2, r3
 8013326:	68fb      	ldr	r3, [r7, #12]
 8013328:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801332a:	68fb      	ldr	r3, [r7, #12]
 801332c:	685a      	ldr	r2, [r3, #4]
 801332e:	68fb      	ldr	r3, [r7, #12]
 8013330:	689b      	ldr	r3, [r3, #8]
 8013332:	429a      	cmp	r2, r3
 8013334:	d32b      	bcc.n	801338e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8013336:	68fb      	ldr	r3, [r7, #12]
 8013338:	681a      	ldr	r2, [r3, #0]
 801333a:	68fb      	ldr	r3, [r7, #12]
 801333c:	605a      	str	r2, [r3, #4]
 801333e:	e026      	b.n	801338e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8013340:	68fb      	ldr	r3, [r7, #12]
 8013342:	68d8      	ldr	r0, [r3, #12]
 8013344:	68fb      	ldr	r3, [r7, #12]
 8013346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013348:	461a      	mov	r2, r3
 801334a:	68b9      	ldr	r1, [r7, #8]
 801334c:	f003 fc06 	bl	8016b5c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8013350:	68fb      	ldr	r3, [r7, #12]
 8013352:	68da      	ldr	r2, [r3, #12]
 8013354:	68fb      	ldr	r3, [r7, #12]
 8013356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013358:	425b      	negs	r3, r3
 801335a:	441a      	add	r2, r3
 801335c:	68fb      	ldr	r3, [r7, #12]
 801335e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013360:	68fb      	ldr	r3, [r7, #12]
 8013362:	68da      	ldr	r2, [r3, #12]
 8013364:	68fb      	ldr	r3, [r7, #12]
 8013366:	681b      	ldr	r3, [r3, #0]
 8013368:	429a      	cmp	r2, r3
 801336a:	d207      	bcs.n	801337c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801336c:	68fb      	ldr	r3, [r7, #12]
 801336e:	689a      	ldr	r2, [r3, #8]
 8013370:	68fb      	ldr	r3, [r7, #12]
 8013372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013374:	425b      	negs	r3, r3
 8013376:	441a      	add	r2, r3
 8013378:	68fb      	ldr	r3, [r7, #12]
 801337a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	2b02      	cmp	r3, #2
 8013380:	d105      	bne.n	801338e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013382:	693b      	ldr	r3, [r7, #16]
 8013384:	2b00      	cmp	r3, #0
 8013386:	d002      	beq.n	801338e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8013388:	693b      	ldr	r3, [r7, #16]
 801338a:	3b01      	subs	r3, #1
 801338c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801338e:	693b      	ldr	r3, [r7, #16]
 8013390:	1c5a      	adds	r2, r3, #1
 8013392:	68fb      	ldr	r3, [r7, #12]
 8013394:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8013396:	697b      	ldr	r3, [r7, #20]
}
 8013398:	4618      	mov	r0, r3
 801339a:	3718      	adds	r7, #24
 801339c:	46bd      	mov	sp, r7
 801339e:	bd80      	pop	{r7, pc}

080133a0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80133a0:	b580      	push	{r7, lr}
 80133a2:	b082      	sub	sp, #8
 80133a4:	af00      	add	r7, sp, #0
 80133a6:	6078      	str	r0, [r7, #4]
 80133a8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80133aa:	687b      	ldr	r3, [r7, #4]
 80133ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80133ae:	2b00      	cmp	r3, #0
 80133b0:	d018      	beq.n	80133e4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80133b2:	687b      	ldr	r3, [r7, #4]
 80133b4:	68da      	ldr	r2, [r3, #12]
 80133b6:	687b      	ldr	r3, [r7, #4]
 80133b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80133ba:	441a      	add	r2, r3
 80133bc:	687b      	ldr	r3, [r7, #4]
 80133be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80133c0:	687b      	ldr	r3, [r7, #4]
 80133c2:	68da      	ldr	r2, [r3, #12]
 80133c4:	687b      	ldr	r3, [r7, #4]
 80133c6:	689b      	ldr	r3, [r3, #8]
 80133c8:	429a      	cmp	r2, r3
 80133ca:	d303      	bcc.n	80133d4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	681a      	ldr	r2, [r3, #0]
 80133d0:	687b      	ldr	r3, [r7, #4]
 80133d2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80133d4:	687b      	ldr	r3, [r7, #4]
 80133d6:	68d9      	ldr	r1, [r3, #12]
 80133d8:	687b      	ldr	r3, [r7, #4]
 80133da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80133dc:	461a      	mov	r2, r3
 80133de:	6838      	ldr	r0, [r7, #0]
 80133e0:	f003 fbbc 	bl	8016b5c <memcpy>
	}
}
 80133e4:	bf00      	nop
 80133e6:	3708      	adds	r7, #8
 80133e8:	46bd      	mov	sp, r7
 80133ea:	bd80      	pop	{r7, pc}

080133ec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80133ec:	b580      	push	{r7, lr}
 80133ee:	b084      	sub	sp, #16
 80133f0:	af00      	add	r7, sp, #0
 80133f2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80133f4:	f001 fd76 	bl	8014ee4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80133fe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013400:	e011      	b.n	8013426 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013402:	687b      	ldr	r3, [r7, #4]
 8013404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013406:	2b00      	cmp	r3, #0
 8013408:	d012      	beq.n	8013430 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801340a:	687b      	ldr	r3, [r7, #4]
 801340c:	3324      	adds	r3, #36	; 0x24
 801340e:	4618      	mov	r0, r3
 8013410:	f000 fe04 	bl	801401c <xTaskRemoveFromEventList>
 8013414:	4603      	mov	r3, r0
 8013416:	2b00      	cmp	r3, #0
 8013418:	d001      	beq.n	801341e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801341a:	f000 fedf 	bl	80141dc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801341e:	7bfb      	ldrb	r3, [r7, #15]
 8013420:	3b01      	subs	r3, #1
 8013422:	b2db      	uxtb	r3, r3
 8013424:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013426:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801342a:	2b00      	cmp	r3, #0
 801342c:	dce9      	bgt.n	8013402 <prvUnlockQueue+0x16>
 801342e:	e000      	b.n	8013432 <prvUnlockQueue+0x46>
					break;
 8013430:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8013432:	687b      	ldr	r3, [r7, #4]
 8013434:	22ff      	movs	r2, #255	; 0xff
 8013436:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801343a:	f001 fd83 	bl	8014f44 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801343e:	f001 fd51 	bl	8014ee4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013448:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801344a:	e011      	b.n	8013470 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801344c:	687b      	ldr	r3, [r7, #4]
 801344e:	691b      	ldr	r3, [r3, #16]
 8013450:	2b00      	cmp	r3, #0
 8013452:	d012      	beq.n	801347a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013454:	687b      	ldr	r3, [r7, #4]
 8013456:	3310      	adds	r3, #16
 8013458:	4618      	mov	r0, r3
 801345a:	f000 fddf 	bl	801401c <xTaskRemoveFromEventList>
 801345e:	4603      	mov	r3, r0
 8013460:	2b00      	cmp	r3, #0
 8013462:	d001      	beq.n	8013468 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8013464:	f000 feba 	bl	80141dc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8013468:	7bbb      	ldrb	r3, [r7, #14]
 801346a:	3b01      	subs	r3, #1
 801346c:	b2db      	uxtb	r3, r3
 801346e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013470:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013474:	2b00      	cmp	r3, #0
 8013476:	dce9      	bgt.n	801344c <prvUnlockQueue+0x60>
 8013478:	e000      	b.n	801347c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801347a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801347c:	687b      	ldr	r3, [r7, #4]
 801347e:	22ff      	movs	r2, #255	; 0xff
 8013480:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8013484:	f001 fd5e 	bl	8014f44 <vPortExitCritical>
}
 8013488:	bf00      	nop
 801348a:	3710      	adds	r7, #16
 801348c:	46bd      	mov	sp, r7
 801348e:	bd80      	pop	{r7, pc}

08013490 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8013490:	b580      	push	{r7, lr}
 8013492:	b084      	sub	sp, #16
 8013494:	af00      	add	r7, sp, #0
 8013496:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013498:	f001 fd24 	bl	8014ee4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801349c:	687b      	ldr	r3, [r7, #4]
 801349e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80134a0:	2b00      	cmp	r3, #0
 80134a2:	d102      	bne.n	80134aa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80134a4:	2301      	movs	r3, #1
 80134a6:	60fb      	str	r3, [r7, #12]
 80134a8:	e001      	b.n	80134ae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80134aa:	2300      	movs	r3, #0
 80134ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80134ae:	f001 fd49 	bl	8014f44 <vPortExitCritical>

	return xReturn;
 80134b2:	68fb      	ldr	r3, [r7, #12]
}
 80134b4:	4618      	mov	r0, r3
 80134b6:	3710      	adds	r7, #16
 80134b8:	46bd      	mov	sp, r7
 80134ba:	bd80      	pop	{r7, pc}

080134bc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80134bc:	b580      	push	{r7, lr}
 80134be:	b084      	sub	sp, #16
 80134c0:	af00      	add	r7, sp, #0
 80134c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80134c4:	f001 fd0e 	bl	8014ee4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80134c8:	687b      	ldr	r3, [r7, #4]
 80134ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80134cc:	687b      	ldr	r3, [r7, #4]
 80134ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80134d0:	429a      	cmp	r2, r3
 80134d2:	d102      	bne.n	80134da <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80134d4:	2301      	movs	r3, #1
 80134d6:	60fb      	str	r3, [r7, #12]
 80134d8:	e001      	b.n	80134de <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80134da:	2300      	movs	r3, #0
 80134dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80134de:	f001 fd31 	bl	8014f44 <vPortExitCritical>

	return xReturn;
 80134e2:	68fb      	ldr	r3, [r7, #12]
}
 80134e4:	4618      	mov	r0, r3
 80134e6:	3710      	adds	r7, #16
 80134e8:	46bd      	mov	sp, r7
 80134ea:	bd80      	pop	{r7, pc}

080134ec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80134ec:	b580      	push	{r7, lr}
 80134ee:	b084      	sub	sp, #16
 80134f0:	af00      	add	r7, sp, #0
 80134f2:	6078      	str	r0, [r7, #4]
 80134f4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80134f6:	2300      	movs	r3, #0
 80134f8:	60fb      	str	r3, [r7, #12]
 80134fa:	e01e      	b.n	801353a <vQueueAddToRegistry+0x4e>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80134fc:	4a13      	ldr	r2, [pc, #76]	; (801354c <vQueueAddToRegistry+0x60>)
 80134fe:	68fb      	ldr	r3, [r7, #12]
 8013500:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8013504:	2b00      	cmp	r3, #0
 8013506:	d115      	bne.n	8013534 <vQueueAddToRegistry+0x48>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8013508:	4910      	ldr	r1, [pc, #64]	; (801354c <vQueueAddToRegistry+0x60>)
 801350a:	68fb      	ldr	r3, [r7, #12]
 801350c:	683a      	ldr	r2, [r7, #0]
 801350e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8013512:	4a0e      	ldr	r2, [pc, #56]	; (801354c <vQueueAddToRegistry+0x60>)
 8013514:	68fb      	ldr	r3, [r7, #12]
 8013516:	00db      	lsls	r3, r3, #3
 8013518:	4413      	add	r3, r2
 801351a:	687a      	ldr	r2, [r7, #4]
 801351c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 801351e:	687b      	ldr	r3, [r7, #4]
 8013520:	4618      	mov	r0, r3
 8013522:	f003 f97b 	bl	801681c <SEGGER_SYSVIEW_ShrinkId>
 8013526:	4601      	mov	r1, r0
 8013528:	683b      	ldr	r3, [r7, #0]
 801352a:	461a      	mov	r2, r3
 801352c:	2071      	movs	r0, #113	; 0x71
 801352e:	f002 fc69 	bl	8015e04 <SEGGER_SYSVIEW_RecordU32x2>
				break;
 8013532:	e006      	b.n	8013542 <vQueueAddToRegistry+0x56>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013534:	68fb      	ldr	r3, [r7, #12]
 8013536:	3301      	adds	r3, #1
 8013538:	60fb      	str	r3, [r7, #12]
 801353a:	68fb      	ldr	r3, [r7, #12]
 801353c:	2b07      	cmp	r3, #7
 801353e:	d9dd      	bls.n	80134fc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8013540:	bf00      	nop
 8013542:	bf00      	nop
 8013544:	3710      	adds	r7, #16
 8013546:	46bd      	mov	sp, r7
 8013548:	bd80      	pop	{r7, pc}
 801354a:	bf00      	nop
 801354c:	2001da60 	.word	0x2001da60

08013550 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8013550:	b580      	push	{r7, lr}
 8013552:	b086      	sub	sp, #24
 8013554:	af00      	add	r7, sp, #0
 8013556:	60f8      	str	r0, [r7, #12]
 8013558:	60b9      	str	r1, [r7, #8]
 801355a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 801355c:	68fb      	ldr	r3, [r7, #12]
 801355e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8013560:	f001 fcc0 	bl	8014ee4 <vPortEnterCritical>
 8013564:	697b      	ldr	r3, [r7, #20]
 8013566:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801356a:	b25b      	sxtb	r3, r3
 801356c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013570:	d103      	bne.n	801357a <vQueueWaitForMessageRestricted+0x2a>
 8013572:	697b      	ldr	r3, [r7, #20]
 8013574:	2200      	movs	r2, #0
 8013576:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801357a:	697b      	ldr	r3, [r7, #20]
 801357c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013580:	b25b      	sxtb	r3, r3
 8013582:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013586:	d103      	bne.n	8013590 <vQueueWaitForMessageRestricted+0x40>
 8013588:	697b      	ldr	r3, [r7, #20]
 801358a:	2200      	movs	r2, #0
 801358c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013590:	f001 fcd8 	bl	8014f44 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8013594:	697b      	ldr	r3, [r7, #20]
 8013596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013598:	2b00      	cmp	r3, #0
 801359a:	d106      	bne.n	80135aa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 801359c:	697b      	ldr	r3, [r7, #20]
 801359e:	3324      	adds	r3, #36	; 0x24
 80135a0:	687a      	ldr	r2, [r7, #4]
 80135a2:	68b9      	ldr	r1, [r7, #8]
 80135a4:	4618      	mov	r0, r3
 80135a6:	f000 fd0b 	bl	8013fc0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80135aa:	6978      	ldr	r0, [r7, #20]
 80135ac:	f7ff ff1e 	bl	80133ec <prvUnlockQueue>
	}
 80135b0:	bf00      	nop
 80135b2:	3718      	adds	r7, #24
 80135b4:	46bd      	mov	sp, r7
 80135b6:	bd80      	pop	{r7, pc}

080135b8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80135b8:	b580      	push	{r7, lr}
 80135ba:	b08e      	sub	sp, #56	; 0x38
 80135bc:	af04      	add	r7, sp, #16
 80135be:	60f8      	str	r0, [r7, #12]
 80135c0:	60b9      	str	r1, [r7, #8]
 80135c2:	607a      	str	r2, [r7, #4]
 80135c4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80135c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80135c8:	2b00      	cmp	r3, #0
 80135ca:	d10a      	bne.n	80135e2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80135cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135d0:	f383 8811 	msr	BASEPRI, r3
 80135d4:	f3bf 8f6f 	isb	sy
 80135d8:	f3bf 8f4f 	dsb	sy
 80135dc:	623b      	str	r3, [r7, #32]
}
 80135de:	bf00      	nop
 80135e0:	e7fe      	b.n	80135e0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80135e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135e4:	2b00      	cmp	r3, #0
 80135e6:	d10a      	bne.n	80135fe <xTaskCreateStatic+0x46>
	__asm volatile
 80135e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135ec:	f383 8811 	msr	BASEPRI, r3
 80135f0:	f3bf 8f6f 	isb	sy
 80135f4:	f3bf 8f4f 	dsb	sy
 80135f8:	61fb      	str	r3, [r7, #28]
}
 80135fa:	bf00      	nop
 80135fc:	e7fe      	b.n	80135fc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80135fe:	23cc      	movs	r3, #204	; 0xcc
 8013600:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8013602:	693b      	ldr	r3, [r7, #16]
 8013604:	2bcc      	cmp	r3, #204	; 0xcc
 8013606:	d00a      	beq.n	801361e <xTaskCreateStatic+0x66>
	__asm volatile
 8013608:	f04f 0350 	mov.w	r3, #80	; 0x50
 801360c:	f383 8811 	msr	BASEPRI, r3
 8013610:	f3bf 8f6f 	isb	sy
 8013614:	f3bf 8f4f 	dsb	sy
 8013618:	61bb      	str	r3, [r7, #24]
}
 801361a:	bf00      	nop
 801361c:	e7fe      	b.n	801361c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801361e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8013620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013622:	2b00      	cmp	r3, #0
 8013624:	d01e      	beq.n	8013664 <xTaskCreateStatic+0xac>
 8013626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013628:	2b00      	cmp	r3, #0
 801362a:	d01b      	beq.n	8013664 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801362c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801362e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8013630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013632:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013634:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8013636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013638:	2202      	movs	r2, #2
 801363a:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801363e:	2300      	movs	r3, #0
 8013640:	9303      	str	r3, [sp, #12]
 8013642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013644:	9302      	str	r3, [sp, #8]
 8013646:	f107 0314 	add.w	r3, r7, #20
 801364a:	9301      	str	r3, [sp, #4]
 801364c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801364e:	9300      	str	r3, [sp, #0]
 8013650:	683b      	ldr	r3, [r7, #0]
 8013652:	687a      	ldr	r2, [r7, #4]
 8013654:	68b9      	ldr	r1, [r7, #8]
 8013656:	68f8      	ldr	r0, [r7, #12]
 8013658:	f000 f850 	bl	80136fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801365c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801365e:	f000 f8f3 	bl	8013848 <prvAddNewTaskToReadyList>
 8013662:	e001      	b.n	8013668 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8013664:	2300      	movs	r3, #0
 8013666:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8013668:	697b      	ldr	r3, [r7, #20]
	}
 801366a:	4618      	mov	r0, r3
 801366c:	3728      	adds	r7, #40	; 0x28
 801366e:	46bd      	mov	sp, r7
 8013670:	bd80      	pop	{r7, pc}

08013672 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8013672:	b580      	push	{r7, lr}
 8013674:	b08c      	sub	sp, #48	; 0x30
 8013676:	af04      	add	r7, sp, #16
 8013678:	60f8      	str	r0, [r7, #12]
 801367a:	60b9      	str	r1, [r7, #8]
 801367c:	603b      	str	r3, [r7, #0]
 801367e:	4613      	mov	r3, r2
 8013680:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8013682:	88fb      	ldrh	r3, [r7, #6]
 8013684:	009b      	lsls	r3, r3, #2
 8013686:	4618      	mov	r0, r3
 8013688:	f001 fd4e 	bl	8015128 <pvPortMalloc>
 801368c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801368e:	697b      	ldr	r3, [r7, #20]
 8013690:	2b00      	cmp	r3, #0
 8013692:	d00e      	beq.n	80136b2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8013694:	20cc      	movs	r0, #204	; 0xcc
 8013696:	f001 fd47 	bl	8015128 <pvPortMalloc>
 801369a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801369c:	69fb      	ldr	r3, [r7, #28]
 801369e:	2b00      	cmp	r3, #0
 80136a0:	d003      	beq.n	80136aa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80136a2:	69fb      	ldr	r3, [r7, #28]
 80136a4:	697a      	ldr	r2, [r7, #20]
 80136a6:	631a      	str	r2, [r3, #48]	; 0x30
 80136a8:	e005      	b.n	80136b6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80136aa:	6978      	ldr	r0, [r7, #20]
 80136ac:	f001 fe08 	bl	80152c0 <vPortFree>
 80136b0:	e001      	b.n	80136b6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80136b2:	2300      	movs	r3, #0
 80136b4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80136b6:	69fb      	ldr	r3, [r7, #28]
 80136b8:	2b00      	cmp	r3, #0
 80136ba:	d017      	beq.n	80136ec <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80136bc:	69fb      	ldr	r3, [r7, #28]
 80136be:	2200      	movs	r2, #0
 80136c0:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80136c4:	88fa      	ldrh	r2, [r7, #6]
 80136c6:	2300      	movs	r3, #0
 80136c8:	9303      	str	r3, [sp, #12]
 80136ca:	69fb      	ldr	r3, [r7, #28]
 80136cc:	9302      	str	r3, [sp, #8]
 80136ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136d0:	9301      	str	r3, [sp, #4]
 80136d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136d4:	9300      	str	r3, [sp, #0]
 80136d6:	683b      	ldr	r3, [r7, #0]
 80136d8:	68b9      	ldr	r1, [r7, #8]
 80136da:	68f8      	ldr	r0, [r7, #12]
 80136dc:	f000 f80e 	bl	80136fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80136e0:	69f8      	ldr	r0, [r7, #28]
 80136e2:	f000 f8b1 	bl	8013848 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80136e6:	2301      	movs	r3, #1
 80136e8:	61bb      	str	r3, [r7, #24]
 80136ea:	e002      	b.n	80136f2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80136ec:	f04f 33ff 	mov.w	r3, #4294967295
 80136f0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80136f2:	69bb      	ldr	r3, [r7, #24]
	}
 80136f4:	4618      	mov	r0, r3
 80136f6:	3720      	adds	r7, #32
 80136f8:	46bd      	mov	sp, r7
 80136fa:	bd80      	pop	{r7, pc}

080136fc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80136fc:	b580      	push	{r7, lr}
 80136fe:	b088      	sub	sp, #32
 8013700:	af00      	add	r7, sp, #0
 8013702:	60f8      	str	r0, [r7, #12]
 8013704:	60b9      	str	r1, [r7, #8]
 8013706:	607a      	str	r2, [r7, #4]
 8013708:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801370a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801370c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801370e:	687b      	ldr	r3, [r7, #4]
 8013710:	009b      	lsls	r3, r3, #2
 8013712:	461a      	mov	r2, r3
 8013714:	21a5      	movs	r1, #165	; 0xa5
 8013716:	f003 fa2f 	bl	8016b78 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801371a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801371c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801371e:	687b      	ldr	r3, [r7, #4]
 8013720:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8013724:	3b01      	subs	r3, #1
 8013726:	009b      	lsls	r3, r3, #2
 8013728:	4413      	add	r3, r2
 801372a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801372c:	69bb      	ldr	r3, [r7, #24]
 801372e:	f023 0307 	bic.w	r3, r3, #7
 8013732:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8013734:	69bb      	ldr	r3, [r7, #24]
 8013736:	f003 0307 	and.w	r3, r3, #7
 801373a:	2b00      	cmp	r3, #0
 801373c:	d00a      	beq.n	8013754 <prvInitialiseNewTask+0x58>
	__asm volatile
 801373e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013742:	f383 8811 	msr	BASEPRI, r3
 8013746:	f3bf 8f6f 	isb	sy
 801374a:	f3bf 8f4f 	dsb	sy
 801374e:	617b      	str	r3, [r7, #20]
}
 8013750:	bf00      	nop
 8013752:	e7fe      	b.n	8013752 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8013754:	68bb      	ldr	r3, [r7, #8]
 8013756:	2b00      	cmp	r3, #0
 8013758:	d01f      	beq.n	801379a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801375a:	2300      	movs	r3, #0
 801375c:	61fb      	str	r3, [r7, #28]
 801375e:	e012      	b.n	8013786 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8013760:	68ba      	ldr	r2, [r7, #8]
 8013762:	69fb      	ldr	r3, [r7, #28]
 8013764:	4413      	add	r3, r2
 8013766:	7819      	ldrb	r1, [r3, #0]
 8013768:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801376a:	69fb      	ldr	r3, [r7, #28]
 801376c:	4413      	add	r3, r2
 801376e:	3334      	adds	r3, #52	; 0x34
 8013770:	460a      	mov	r2, r1
 8013772:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8013774:	68ba      	ldr	r2, [r7, #8]
 8013776:	69fb      	ldr	r3, [r7, #28]
 8013778:	4413      	add	r3, r2
 801377a:	781b      	ldrb	r3, [r3, #0]
 801377c:	2b00      	cmp	r3, #0
 801377e:	d006      	beq.n	801378e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013780:	69fb      	ldr	r3, [r7, #28]
 8013782:	3301      	adds	r3, #1
 8013784:	61fb      	str	r3, [r7, #28]
 8013786:	69fb      	ldr	r3, [r7, #28]
 8013788:	2b1f      	cmp	r3, #31
 801378a:	d9e9      	bls.n	8013760 <prvInitialiseNewTask+0x64>
 801378c:	e000      	b.n	8013790 <prvInitialiseNewTask+0x94>
			{
				break;
 801378e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8013790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013792:	2200      	movs	r2, #0
 8013794:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8013798:	e003      	b.n	80137a2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801379a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801379c:	2200      	movs	r2, #0
 801379e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80137a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137a4:	2b37      	cmp	r3, #55	; 0x37
 80137a6:	d901      	bls.n	80137ac <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80137a8:	2337      	movs	r3, #55	; 0x37
 80137aa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80137ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80137b0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80137b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80137b6:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->uxMutexesHeld = 0;
 80137b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137ba:	2200      	movs	r2, #0
 80137bc:	661a      	str	r2, [r3, #96]	; 0x60
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80137be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137c0:	3304      	adds	r3, #4
 80137c2:	4618      	mov	r0, r3
 80137c4:	f7ff f8c4 	bl	8012950 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80137c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137ca:	3318      	adds	r3, #24
 80137cc:	4618      	mov	r0, r3
 80137ce:	f7ff f8bf 	bl	8012950 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80137d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80137d6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80137d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137da:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80137de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137e0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80137e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80137e6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80137e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137ea:	2200      	movs	r2, #0
 80137ec:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80137f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137f2:	2200      	movs	r2, #0
 80137f4:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80137f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137fa:	3364      	adds	r3, #100	; 0x64
 80137fc:	2260      	movs	r2, #96	; 0x60
 80137fe:	2100      	movs	r1, #0
 8013800:	4618      	mov	r0, r3
 8013802:	f003 f9b9 	bl	8016b78 <memset>
 8013806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013808:	4a0c      	ldr	r2, [pc, #48]	; (801383c <prvInitialiseNewTask+0x140>)
 801380a:	669a      	str	r2, [r3, #104]	; 0x68
 801380c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801380e:	4a0c      	ldr	r2, [pc, #48]	; (8013840 <prvInitialiseNewTask+0x144>)
 8013810:	66da      	str	r2, [r3, #108]	; 0x6c
 8013812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013814:	4a0b      	ldr	r2, [pc, #44]	; (8013844 <prvInitialiseNewTask+0x148>)
 8013816:	671a      	str	r2, [r3, #112]	; 0x70
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8013818:	683a      	ldr	r2, [r7, #0]
 801381a:	68f9      	ldr	r1, [r7, #12]
 801381c:	69b8      	ldr	r0, [r7, #24]
 801381e:	f001 fa31 	bl	8014c84 <pxPortInitialiseStack>
 8013822:	4602      	mov	r2, r0
 8013824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013826:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8013828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801382a:	2b00      	cmp	r3, #0
 801382c:	d002      	beq.n	8013834 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801382e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013830:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013832:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013834:	bf00      	nop
 8013836:	3720      	adds	r7, #32
 8013838:	46bd      	mov	sp, r7
 801383a:	bd80      	pop	{r7, pc}
 801383c:	08017aec 	.word	0x08017aec
 8013840:	08017b0c 	.word	0x08017b0c
 8013844:	08017acc 	.word	0x08017acc

08013848 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8013848:	b5b0      	push	{r4, r5, r7, lr}
 801384a:	b084      	sub	sp, #16
 801384c:	af02      	add	r7, sp, #8
 801384e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8013850:	f001 fb48 	bl	8014ee4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8013854:	4b3c      	ldr	r3, [pc, #240]	; (8013948 <prvAddNewTaskToReadyList+0x100>)
 8013856:	681b      	ldr	r3, [r3, #0]
 8013858:	3301      	adds	r3, #1
 801385a:	4a3b      	ldr	r2, [pc, #236]	; (8013948 <prvAddNewTaskToReadyList+0x100>)
 801385c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801385e:	4b3b      	ldr	r3, [pc, #236]	; (801394c <prvAddNewTaskToReadyList+0x104>)
 8013860:	681b      	ldr	r3, [r3, #0]
 8013862:	2b00      	cmp	r3, #0
 8013864:	d109      	bne.n	801387a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8013866:	4a39      	ldr	r2, [pc, #228]	; (801394c <prvAddNewTaskToReadyList+0x104>)
 8013868:	687b      	ldr	r3, [r7, #4]
 801386a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801386c:	4b36      	ldr	r3, [pc, #216]	; (8013948 <prvAddNewTaskToReadyList+0x100>)
 801386e:	681b      	ldr	r3, [r3, #0]
 8013870:	2b01      	cmp	r3, #1
 8013872:	d110      	bne.n	8013896 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8013874:	f000 fcd6 	bl	8014224 <prvInitialiseTaskLists>
 8013878:	e00d      	b.n	8013896 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801387a:	4b35      	ldr	r3, [pc, #212]	; (8013950 <prvAddNewTaskToReadyList+0x108>)
 801387c:	681b      	ldr	r3, [r3, #0]
 801387e:	2b00      	cmp	r3, #0
 8013880:	d109      	bne.n	8013896 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8013882:	4b32      	ldr	r3, [pc, #200]	; (801394c <prvAddNewTaskToReadyList+0x104>)
 8013884:	681b      	ldr	r3, [r3, #0]
 8013886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013888:	687b      	ldr	r3, [r7, #4]
 801388a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801388c:	429a      	cmp	r2, r3
 801388e:	d802      	bhi.n	8013896 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8013890:	4a2e      	ldr	r2, [pc, #184]	; (801394c <prvAddNewTaskToReadyList+0x104>)
 8013892:	687b      	ldr	r3, [r7, #4]
 8013894:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8013896:	4b2f      	ldr	r3, [pc, #188]	; (8013954 <prvAddNewTaskToReadyList+0x10c>)
 8013898:	681b      	ldr	r3, [r3, #0]
 801389a:	3301      	adds	r3, #1
 801389c:	4a2d      	ldr	r2, [pc, #180]	; (8013954 <prvAddNewTaskToReadyList+0x10c>)
 801389e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80138a0:	4b2c      	ldr	r3, [pc, #176]	; (8013954 <prvAddNewTaskToReadyList+0x10c>)
 80138a2:	681a      	ldr	r2, [r3, #0]
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	655a      	str	r2, [r3, #84]	; 0x54
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	2b00      	cmp	r3, #0
 80138ac:	d016      	beq.n	80138dc <prvAddNewTaskToReadyList+0x94>
 80138ae:	687b      	ldr	r3, [r7, #4]
 80138b0:	4618      	mov	r0, r3
 80138b2:	f002 feed 	bl	8016690 <SEGGER_SYSVIEW_OnTaskCreate>
 80138b6:	6878      	ldr	r0, [r7, #4]
 80138b8:	687b      	ldr	r3, [r7, #4]
 80138ba:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80138be:	687b      	ldr	r3, [r7, #4]
 80138c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80138c2:	687b      	ldr	r3, [r7, #4]
 80138c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80138c6:	461d      	mov	r5, r3
 80138c8:	687b      	ldr	r3, [r7, #4]
 80138ca:	681b      	ldr	r3, [r3, #0]
 80138cc:	461c      	mov	r4, r3
 80138ce:	687b      	ldr	r3, [r7, #4]
 80138d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80138d2:	1ae3      	subs	r3, r4, r3
 80138d4:	9300      	str	r3, [sp, #0]
 80138d6:	462b      	mov	r3, r5
 80138d8:	f7ed fef2 	bl	80016c0 <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 80138dc:	687b      	ldr	r3, [r7, #4]
 80138de:	4618      	mov	r0, r3
 80138e0:	f002 ff5a 	bl	8016798 <SEGGER_SYSVIEW_OnTaskStartReady>
 80138e4:	687b      	ldr	r3, [r7, #4]
 80138e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80138e8:	4b1b      	ldr	r3, [pc, #108]	; (8013958 <prvAddNewTaskToReadyList+0x110>)
 80138ea:	681b      	ldr	r3, [r3, #0]
 80138ec:	429a      	cmp	r2, r3
 80138ee:	d903      	bls.n	80138f8 <prvAddNewTaskToReadyList+0xb0>
 80138f0:	687b      	ldr	r3, [r7, #4]
 80138f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80138f4:	4a18      	ldr	r2, [pc, #96]	; (8013958 <prvAddNewTaskToReadyList+0x110>)
 80138f6:	6013      	str	r3, [r2, #0]
 80138f8:	687b      	ldr	r3, [r7, #4]
 80138fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80138fc:	4613      	mov	r3, r2
 80138fe:	009b      	lsls	r3, r3, #2
 8013900:	4413      	add	r3, r2
 8013902:	009b      	lsls	r3, r3, #2
 8013904:	4a15      	ldr	r2, [pc, #84]	; (801395c <prvAddNewTaskToReadyList+0x114>)
 8013906:	441a      	add	r2, r3
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	3304      	adds	r3, #4
 801390c:	4619      	mov	r1, r3
 801390e:	4610      	mov	r0, r2
 8013910:	f7ff f82b 	bl	801296a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8013914:	f001 fb16 	bl	8014f44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8013918:	4b0d      	ldr	r3, [pc, #52]	; (8013950 <prvAddNewTaskToReadyList+0x108>)
 801391a:	681b      	ldr	r3, [r3, #0]
 801391c:	2b00      	cmp	r3, #0
 801391e:	d00e      	beq.n	801393e <prvAddNewTaskToReadyList+0xf6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8013920:	4b0a      	ldr	r3, [pc, #40]	; (801394c <prvAddNewTaskToReadyList+0x104>)
 8013922:	681b      	ldr	r3, [r3, #0]
 8013924:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801392a:	429a      	cmp	r2, r3
 801392c:	d207      	bcs.n	801393e <prvAddNewTaskToReadyList+0xf6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801392e:	4b0c      	ldr	r3, [pc, #48]	; (8013960 <prvAddNewTaskToReadyList+0x118>)
 8013930:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013934:	601a      	str	r2, [r3, #0]
 8013936:	f3bf 8f4f 	dsb	sy
 801393a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801393e:	bf00      	nop
 8013940:	3708      	adds	r7, #8
 8013942:	46bd      	mov	sp, r7
 8013944:	bdb0      	pop	{r4, r5, r7, pc}
 8013946:	bf00      	nop
 8013948:	200022cc 	.word	0x200022cc
 801394c:	20001df8 	.word	0x20001df8
 8013950:	200022d8 	.word	0x200022d8
 8013954:	200022e8 	.word	0x200022e8
 8013958:	200022d4 	.word	0x200022d4
 801395c:	20001dfc 	.word	0x20001dfc
 8013960:	e000ed04 	.word	0xe000ed04

08013964 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8013964:	b580      	push	{r7, lr}
 8013966:	b08a      	sub	sp, #40	; 0x28
 8013968:	af00      	add	r7, sp, #0
 801396a:	6078      	str	r0, [r7, #4]
 801396c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 801396e:	2300      	movs	r3, #0
 8013970:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8013972:	687b      	ldr	r3, [r7, #4]
 8013974:	2b00      	cmp	r3, #0
 8013976:	d10a      	bne.n	801398e <vTaskDelayUntil+0x2a>
	__asm volatile
 8013978:	f04f 0350 	mov.w	r3, #80	; 0x50
 801397c:	f383 8811 	msr	BASEPRI, r3
 8013980:	f3bf 8f6f 	isb	sy
 8013984:	f3bf 8f4f 	dsb	sy
 8013988:	617b      	str	r3, [r7, #20]
}
 801398a:	bf00      	nop
 801398c:	e7fe      	b.n	801398c <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 801398e:	683b      	ldr	r3, [r7, #0]
 8013990:	2b00      	cmp	r3, #0
 8013992:	d10a      	bne.n	80139aa <vTaskDelayUntil+0x46>
	__asm volatile
 8013994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013998:	f383 8811 	msr	BASEPRI, r3
 801399c:	f3bf 8f6f 	isb	sy
 80139a0:	f3bf 8f4f 	dsb	sy
 80139a4:	613b      	str	r3, [r7, #16]
}
 80139a6:	bf00      	nop
 80139a8:	e7fe      	b.n	80139a8 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 80139aa:	4b2b      	ldr	r3, [pc, #172]	; (8013a58 <vTaskDelayUntil+0xf4>)
 80139ac:	681b      	ldr	r3, [r3, #0]
 80139ae:	2b00      	cmp	r3, #0
 80139b0:	d00a      	beq.n	80139c8 <vTaskDelayUntil+0x64>
	__asm volatile
 80139b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139b6:	f383 8811 	msr	BASEPRI, r3
 80139ba:	f3bf 8f6f 	isb	sy
 80139be:	f3bf 8f4f 	dsb	sy
 80139c2:	60fb      	str	r3, [r7, #12]
}
 80139c4:	bf00      	nop
 80139c6:	e7fe      	b.n	80139c6 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 80139c8:	f000 f8ce 	bl	8013b68 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80139cc:	4b23      	ldr	r3, [pc, #140]	; (8013a5c <vTaskDelayUntil+0xf8>)
 80139ce:	681b      	ldr	r3, [r3, #0]
 80139d0:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80139d2:	687b      	ldr	r3, [r7, #4]
 80139d4:	681b      	ldr	r3, [r3, #0]
 80139d6:	683a      	ldr	r2, [r7, #0]
 80139d8:	4413      	add	r3, r2
 80139da:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80139dc:	687b      	ldr	r3, [r7, #4]
 80139de:	681b      	ldr	r3, [r3, #0]
 80139e0:	6a3a      	ldr	r2, [r7, #32]
 80139e2:	429a      	cmp	r2, r3
 80139e4:	d20b      	bcs.n	80139fe <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80139e6:	687b      	ldr	r3, [r7, #4]
 80139e8:	681b      	ldr	r3, [r3, #0]
 80139ea:	69fa      	ldr	r2, [r7, #28]
 80139ec:	429a      	cmp	r2, r3
 80139ee:	d211      	bcs.n	8013a14 <vTaskDelayUntil+0xb0>
 80139f0:	69fa      	ldr	r2, [r7, #28]
 80139f2:	6a3b      	ldr	r3, [r7, #32]
 80139f4:	429a      	cmp	r2, r3
 80139f6:	d90d      	bls.n	8013a14 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 80139f8:	2301      	movs	r3, #1
 80139fa:	627b      	str	r3, [r7, #36]	; 0x24
 80139fc:	e00a      	b.n	8013a14 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80139fe:	687b      	ldr	r3, [r7, #4]
 8013a00:	681b      	ldr	r3, [r3, #0]
 8013a02:	69fa      	ldr	r2, [r7, #28]
 8013a04:	429a      	cmp	r2, r3
 8013a06:	d303      	bcc.n	8013a10 <vTaskDelayUntil+0xac>
 8013a08:	69fa      	ldr	r2, [r7, #28]
 8013a0a:	6a3b      	ldr	r3, [r7, #32]
 8013a0c:	429a      	cmp	r2, r3
 8013a0e:	d901      	bls.n	8013a14 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8013a10:	2301      	movs	r3, #1
 8013a12:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8013a14:	687b      	ldr	r3, [r7, #4]
 8013a16:	69fa      	ldr	r2, [r7, #28]
 8013a18:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8013a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a1c:	2b00      	cmp	r3, #0
 8013a1e:	d009      	beq.n	8013a34 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );
 8013a20:	2024      	movs	r0, #36	; 0x24
 8013a22:	f002 f995 	bl	8015d50 <SEGGER_SYSVIEW_RecordVoid>

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8013a26:	69fa      	ldr	r2, [r7, #28]
 8013a28:	6a3b      	ldr	r3, [r7, #32]
 8013a2a:	1ad3      	subs	r3, r2, r3
 8013a2c:	2100      	movs	r1, #0
 8013a2e:	4618      	mov	r0, r3
 8013a30:	f000 fd86 	bl	8014540 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8013a34:	f000 f8a6 	bl	8013b84 <xTaskResumeAll>
 8013a38:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8013a3a:	69bb      	ldr	r3, [r7, #24]
 8013a3c:	2b00      	cmp	r3, #0
 8013a3e:	d107      	bne.n	8013a50 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 8013a40:	4b07      	ldr	r3, [pc, #28]	; (8013a60 <vTaskDelayUntil+0xfc>)
 8013a42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013a46:	601a      	str	r2, [r3, #0]
 8013a48:	f3bf 8f4f 	dsb	sy
 8013a4c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013a50:	bf00      	nop
 8013a52:	3728      	adds	r7, #40	; 0x28
 8013a54:	46bd      	mov	sp, r7
 8013a56:	bd80      	pop	{r7, pc}
 8013a58:	200022f4 	.word	0x200022f4
 8013a5c:	200022d0 	.word	0x200022d0
 8013a60:	e000ed04 	.word	0xe000ed04

08013a64 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8013a64:	b580      	push	{r7, lr}
 8013a66:	b08a      	sub	sp, #40	; 0x28
 8013a68:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8013a6a:	2300      	movs	r3, #0
 8013a6c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8013a6e:	2300      	movs	r3, #0
 8013a70:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8013a72:	463a      	mov	r2, r7
 8013a74:	1d39      	adds	r1, r7, #4
 8013a76:	f107 0308 	add.w	r3, r7, #8
 8013a7a:	4618      	mov	r0, r3
 8013a7c:	f7fe ff14 	bl	80128a8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8013a80:	6839      	ldr	r1, [r7, #0]
 8013a82:	687b      	ldr	r3, [r7, #4]
 8013a84:	68ba      	ldr	r2, [r7, #8]
 8013a86:	9202      	str	r2, [sp, #8]
 8013a88:	9301      	str	r3, [sp, #4]
 8013a8a:	2300      	movs	r3, #0
 8013a8c:	9300      	str	r3, [sp, #0]
 8013a8e:	2300      	movs	r3, #0
 8013a90:	460a      	mov	r2, r1
 8013a92:	492d      	ldr	r1, [pc, #180]	; (8013b48 <vTaskStartScheduler+0xe4>)
 8013a94:	482d      	ldr	r0, [pc, #180]	; (8013b4c <vTaskStartScheduler+0xe8>)
 8013a96:	f7ff fd8f 	bl	80135b8 <xTaskCreateStatic>
 8013a9a:	4603      	mov	r3, r0
 8013a9c:	4a2c      	ldr	r2, [pc, #176]	; (8013b50 <vTaskStartScheduler+0xec>)
 8013a9e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8013aa0:	4b2b      	ldr	r3, [pc, #172]	; (8013b50 <vTaskStartScheduler+0xec>)
 8013aa2:	681b      	ldr	r3, [r3, #0]
 8013aa4:	2b00      	cmp	r3, #0
 8013aa6:	d002      	beq.n	8013aae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8013aa8:	2301      	movs	r3, #1
 8013aaa:	617b      	str	r3, [r7, #20]
 8013aac:	e001      	b.n	8013ab2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8013aae:	2300      	movs	r3, #0
 8013ab0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8013ab2:	697b      	ldr	r3, [r7, #20]
 8013ab4:	2b01      	cmp	r3, #1
 8013ab6:	d102      	bne.n	8013abe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8013ab8:	f000 fd96 	bl	80145e8 <xTimerCreateTimerTask>
 8013abc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8013abe:	697b      	ldr	r3, [r7, #20]
 8013ac0:	2b01      	cmp	r3, #1
 8013ac2:	d12e      	bne.n	8013b22 <vTaskStartScheduler+0xbe>
	__asm volatile
 8013ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ac8:	f383 8811 	msr	BASEPRI, r3
 8013acc:	f3bf 8f6f 	isb	sy
 8013ad0:	f3bf 8f4f 	dsb	sy
 8013ad4:	613b      	str	r3, [r7, #16]
}
 8013ad6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8013ad8:	4b1e      	ldr	r3, [pc, #120]	; (8013b54 <vTaskStartScheduler+0xf0>)
 8013ada:	681b      	ldr	r3, [r3, #0]
 8013adc:	3364      	adds	r3, #100	; 0x64
 8013ade:	4a1e      	ldr	r2, [pc, #120]	; (8013b58 <vTaskStartScheduler+0xf4>)
 8013ae0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8013ae2:	4b1e      	ldr	r3, [pc, #120]	; (8013b5c <vTaskStartScheduler+0xf8>)
 8013ae4:	f04f 32ff 	mov.w	r2, #4294967295
 8013ae8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8013aea:	4b1d      	ldr	r3, [pc, #116]	; (8013b60 <vTaskStartScheduler+0xfc>)
 8013aec:	2201      	movs	r2, #1
 8013aee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8013af0:	4b1c      	ldr	r3, [pc, #112]	; (8013b64 <vTaskStartScheduler+0x100>)
 8013af2:	2200      	movs	r2, #0
 8013af4:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 8013af6:	4b17      	ldr	r3, [pc, #92]	; (8013b54 <vTaskStartScheduler+0xf0>)
 8013af8:	681b      	ldr	r3, [r3, #0]
 8013afa:	3334      	adds	r3, #52	; 0x34
 8013afc:	2205      	movs	r2, #5
 8013afe:	4912      	ldr	r1, [pc, #72]	; (8013b48 <vTaskStartScheduler+0xe4>)
 8013b00:	4618      	mov	r0, r3
 8013b02:	f003 f81d 	bl	8016b40 <memcmp>
 8013b06:	4603      	mov	r3, r0
 8013b08:	2b00      	cmp	r3, #0
 8013b0a:	d005      	beq.n	8013b18 <vTaskStartScheduler+0xb4>
 8013b0c:	4b11      	ldr	r3, [pc, #68]	; (8013b54 <vTaskStartScheduler+0xf0>)
 8013b0e:	681b      	ldr	r3, [r3, #0]
 8013b10:	4618      	mov	r0, r3
 8013b12:	f002 fdff 	bl	8016714 <SEGGER_SYSVIEW_OnTaskStartExec>
 8013b16:	e001      	b.n	8013b1c <vTaskStartScheduler+0xb8>
 8013b18:	f002 fd9e 	bl	8016658 <SEGGER_SYSVIEW_OnIdle>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8013b1c:	f001 f940 	bl	8014da0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8013b20:	e00e      	b.n	8013b40 <vTaskStartScheduler+0xdc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8013b22:	697b      	ldr	r3, [r7, #20]
 8013b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013b28:	d10a      	bne.n	8013b40 <vTaskStartScheduler+0xdc>
	__asm volatile
 8013b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b2e:	f383 8811 	msr	BASEPRI, r3
 8013b32:	f3bf 8f6f 	isb	sy
 8013b36:	f3bf 8f4f 	dsb	sy
 8013b3a:	60fb      	str	r3, [r7, #12]
}
 8013b3c:	bf00      	nop
 8013b3e:	e7fe      	b.n	8013b3e <vTaskStartScheduler+0xda>
}
 8013b40:	bf00      	nop
 8013b42:	3718      	adds	r7, #24
 8013b44:	46bd      	mov	sp, r7
 8013b46:	bd80      	pop	{r7, pc}
 8013b48:	08017890 	.word	0x08017890
 8013b4c:	080141f5 	.word	0x080141f5
 8013b50:	200022f0 	.word	0x200022f0
 8013b54:	20001df8 	.word	0x20001df8
 8013b58:	200012ec 	.word	0x200012ec
 8013b5c:	200022ec 	.word	0x200022ec
 8013b60:	200022d8 	.word	0x200022d8
 8013b64:	200022d0 	.word	0x200022d0

08013b68 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8013b68:	b480      	push	{r7}
 8013b6a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8013b6c:	4b04      	ldr	r3, [pc, #16]	; (8013b80 <vTaskSuspendAll+0x18>)
 8013b6e:	681b      	ldr	r3, [r3, #0]
 8013b70:	3301      	adds	r3, #1
 8013b72:	4a03      	ldr	r2, [pc, #12]	; (8013b80 <vTaskSuspendAll+0x18>)
 8013b74:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8013b76:	bf00      	nop
 8013b78:	46bd      	mov	sp, r7
 8013b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b7e:	4770      	bx	lr
 8013b80:	200022f4 	.word	0x200022f4

08013b84 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8013b84:	b580      	push	{r7, lr}
 8013b86:	b084      	sub	sp, #16
 8013b88:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8013b8a:	2300      	movs	r3, #0
 8013b8c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8013b8e:	2300      	movs	r3, #0
 8013b90:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8013b92:	4b44      	ldr	r3, [pc, #272]	; (8013ca4 <xTaskResumeAll+0x120>)
 8013b94:	681b      	ldr	r3, [r3, #0]
 8013b96:	2b00      	cmp	r3, #0
 8013b98:	d10a      	bne.n	8013bb0 <xTaskResumeAll+0x2c>
	__asm volatile
 8013b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b9e:	f383 8811 	msr	BASEPRI, r3
 8013ba2:	f3bf 8f6f 	isb	sy
 8013ba6:	f3bf 8f4f 	dsb	sy
 8013baa:	603b      	str	r3, [r7, #0]
}
 8013bac:	bf00      	nop
 8013bae:	e7fe      	b.n	8013bae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8013bb0:	f001 f998 	bl	8014ee4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8013bb4:	4b3b      	ldr	r3, [pc, #236]	; (8013ca4 <xTaskResumeAll+0x120>)
 8013bb6:	681b      	ldr	r3, [r3, #0]
 8013bb8:	3b01      	subs	r3, #1
 8013bba:	4a3a      	ldr	r2, [pc, #232]	; (8013ca4 <xTaskResumeAll+0x120>)
 8013bbc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013bbe:	4b39      	ldr	r3, [pc, #228]	; (8013ca4 <xTaskResumeAll+0x120>)
 8013bc0:	681b      	ldr	r3, [r3, #0]
 8013bc2:	2b00      	cmp	r3, #0
 8013bc4:	d166      	bne.n	8013c94 <xTaskResumeAll+0x110>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8013bc6:	4b38      	ldr	r3, [pc, #224]	; (8013ca8 <xTaskResumeAll+0x124>)
 8013bc8:	681b      	ldr	r3, [r3, #0]
 8013bca:	2b00      	cmp	r3, #0
 8013bcc:	d062      	beq.n	8013c94 <xTaskResumeAll+0x110>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013bce:	e033      	b.n	8013c38 <xTaskResumeAll+0xb4>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013bd0:	4b36      	ldr	r3, [pc, #216]	; (8013cac <xTaskResumeAll+0x128>)
 8013bd2:	68db      	ldr	r3, [r3, #12]
 8013bd4:	68db      	ldr	r3, [r3, #12]
 8013bd6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013bd8:	68fb      	ldr	r3, [r7, #12]
 8013bda:	3318      	adds	r3, #24
 8013bdc:	4618      	mov	r0, r3
 8013bde:	f7fe ff21 	bl	8012a24 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013be2:	68fb      	ldr	r3, [r7, #12]
 8013be4:	3304      	adds	r3, #4
 8013be6:	4618      	mov	r0, r3
 8013be8:	f7fe ff1c 	bl	8012a24 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013bec:	68fb      	ldr	r3, [r7, #12]
 8013bee:	4618      	mov	r0, r3
 8013bf0:	f002 fdd2 	bl	8016798 <SEGGER_SYSVIEW_OnTaskStartReady>
 8013bf4:	68fb      	ldr	r3, [r7, #12]
 8013bf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013bf8:	4b2d      	ldr	r3, [pc, #180]	; (8013cb0 <xTaskResumeAll+0x12c>)
 8013bfa:	681b      	ldr	r3, [r3, #0]
 8013bfc:	429a      	cmp	r2, r3
 8013bfe:	d903      	bls.n	8013c08 <xTaskResumeAll+0x84>
 8013c00:	68fb      	ldr	r3, [r7, #12]
 8013c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013c04:	4a2a      	ldr	r2, [pc, #168]	; (8013cb0 <xTaskResumeAll+0x12c>)
 8013c06:	6013      	str	r3, [r2, #0]
 8013c08:	68fb      	ldr	r3, [r7, #12]
 8013c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013c0c:	4613      	mov	r3, r2
 8013c0e:	009b      	lsls	r3, r3, #2
 8013c10:	4413      	add	r3, r2
 8013c12:	009b      	lsls	r3, r3, #2
 8013c14:	4a27      	ldr	r2, [pc, #156]	; (8013cb4 <xTaskResumeAll+0x130>)
 8013c16:	441a      	add	r2, r3
 8013c18:	68fb      	ldr	r3, [r7, #12]
 8013c1a:	3304      	adds	r3, #4
 8013c1c:	4619      	mov	r1, r3
 8013c1e:	4610      	mov	r0, r2
 8013c20:	f7fe fea3 	bl	801296a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013c24:	68fb      	ldr	r3, [r7, #12]
 8013c26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013c28:	4b23      	ldr	r3, [pc, #140]	; (8013cb8 <xTaskResumeAll+0x134>)
 8013c2a:	681b      	ldr	r3, [r3, #0]
 8013c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013c2e:	429a      	cmp	r2, r3
 8013c30:	d302      	bcc.n	8013c38 <xTaskResumeAll+0xb4>
					{
						xYieldPending = pdTRUE;
 8013c32:	4b22      	ldr	r3, [pc, #136]	; (8013cbc <xTaskResumeAll+0x138>)
 8013c34:	2201      	movs	r2, #1
 8013c36:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013c38:	4b1c      	ldr	r3, [pc, #112]	; (8013cac <xTaskResumeAll+0x128>)
 8013c3a:	681b      	ldr	r3, [r3, #0]
 8013c3c:	2b00      	cmp	r3, #0
 8013c3e:	d1c7      	bne.n	8013bd0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8013c40:	68fb      	ldr	r3, [r7, #12]
 8013c42:	2b00      	cmp	r3, #0
 8013c44:	d001      	beq.n	8013c4a <xTaskResumeAll+0xc6>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8013c46:	f000 fbc7 	bl	80143d8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8013c4a:	4b1d      	ldr	r3, [pc, #116]	; (8013cc0 <xTaskResumeAll+0x13c>)
 8013c4c:	681b      	ldr	r3, [r3, #0]
 8013c4e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	2b00      	cmp	r3, #0
 8013c54:	d010      	beq.n	8013c78 <xTaskResumeAll+0xf4>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8013c56:	f000 f859 	bl	8013d0c <xTaskIncrementTick>
 8013c5a:	4603      	mov	r3, r0
 8013c5c:	2b00      	cmp	r3, #0
 8013c5e:	d002      	beq.n	8013c66 <xTaskResumeAll+0xe2>
							{
								xYieldPending = pdTRUE;
 8013c60:	4b16      	ldr	r3, [pc, #88]	; (8013cbc <xTaskResumeAll+0x138>)
 8013c62:	2201      	movs	r2, #1
 8013c64:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8013c66:	687b      	ldr	r3, [r7, #4]
 8013c68:	3b01      	subs	r3, #1
 8013c6a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	2b00      	cmp	r3, #0
 8013c70:	d1f1      	bne.n	8013c56 <xTaskResumeAll+0xd2>

						xPendedTicks = 0;
 8013c72:	4b13      	ldr	r3, [pc, #76]	; (8013cc0 <xTaskResumeAll+0x13c>)
 8013c74:	2200      	movs	r2, #0
 8013c76:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8013c78:	4b10      	ldr	r3, [pc, #64]	; (8013cbc <xTaskResumeAll+0x138>)
 8013c7a:	681b      	ldr	r3, [r3, #0]
 8013c7c:	2b00      	cmp	r3, #0
 8013c7e:	d009      	beq.n	8013c94 <xTaskResumeAll+0x110>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8013c80:	2301      	movs	r3, #1
 8013c82:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8013c84:	4b0f      	ldr	r3, [pc, #60]	; (8013cc4 <xTaskResumeAll+0x140>)
 8013c86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013c8a:	601a      	str	r2, [r3, #0]
 8013c8c:	f3bf 8f4f 	dsb	sy
 8013c90:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013c94:	f001 f956 	bl	8014f44 <vPortExitCritical>

	return xAlreadyYielded;
 8013c98:	68bb      	ldr	r3, [r7, #8]
}
 8013c9a:	4618      	mov	r0, r3
 8013c9c:	3710      	adds	r7, #16
 8013c9e:	46bd      	mov	sp, r7
 8013ca0:	bd80      	pop	{r7, pc}
 8013ca2:	bf00      	nop
 8013ca4:	200022f4 	.word	0x200022f4
 8013ca8:	200022cc 	.word	0x200022cc
 8013cac:	2000228c 	.word	0x2000228c
 8013cb0:	200022d4 	.word	0x200022d4
 8013cb4:	20001dfc 	.word	0x20001dfc
 8013cb8:	20001df8 	.word	0x20001df8
 8013cbc:	200022e0 	.word	0x200022e0
 8013cc0:	200022dc 	.word	0x200022dc
 8013cc4:	e000ed04 	.word	0xe000ed04

08013cc8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8013cc8:	b480      	push	{r7}
 8013cca:	b083      	sub	sp, #12
 8013ccc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8013cce:	4b05      	ldr	r3, [pc, #20]	; (8013ce4 <xTaskGetTickCount+0x1c>)
 8013cd0:	681b      	ldr	r3, [r3, #0]
 8013cd2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8013cd4:	687b      	ldr	r3, [r7, #4]
}
 8013cd6:	4618      	mov	r0, r3
 8013cd8:	370c      	adds	r7, #12
 8013cda:	46bd      	mov	sp, r7
 8013cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ce0:	4770      	bx	lr
 8013ce2:	bf00      	nop
 8013ce4:	200022d0 	.word	0x200022d0

08013ce8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8013ce8:	b580      	push	{r7, lr}
 8013cea:	b082      	sub	sp, #8
 8013cec:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013cee:	f001 f9db 	bl	80150a8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8013cf2:	2300      	movs	r3, #0
 8013cf4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8013cf6:	4b04      	ldr	r3, [pc, #16]	; (8013d08 <xTaskGetTickCountFromISR+0x20>)
 8013cf8:	681b      	ldr	r3, [r3, #0]
 8013cfa:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013cfc:	683b      	ldr	r3, [r7, #0]
}
 8013cfe:	4618      	mov	r0, r3
 8013d00:	3708      	adds	r7, #8
 8013d02:	46bd      	mov	sp, r7
 8013d04:	bd80      	pop	{r7, pc}
 8013d06:	bf00      	nop
 8013d08:	200022d0 	.word	0x200022d0

08013d0c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8013d0c:	b580      	push	{r7, lr}
 8013d0e:	b086      	sub	sp, #24
 8013d10:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8013d12:	2300      	movs	r3, #0
 8013d14:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013d16:	4b51      	ldr	r3, [pc, #324]	; (8013e5c <xTaskIncrementTick+0x150>)
 8013d18:	681b      	ldr	r3, [r3, #0]
 8013d1a:	2b00      	cmp	r3, #0
 8013d1c:	f040 8093 	bne.w	8013e46 <xTaskIncrementTick+0x13a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8013d20:	4b4f      	ldr	r3, [pc, #316]	; (8013e60 <xTaskIncrementTick+0x154>)
 8013d22:	681b      	ldr	r3, [r3, #0]
 8013d24:	3301      	adds	r3, #1
 8013d26:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8013d28:	4a4d      	ldr	r2, [pc, #308]	; (8013e60 <xTaskIncrementTick+0x154>)
 8013d2a:	693b      	ldr	r3, [r7, #16]
 8013d2c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8013d2e:	693b      	ldr	r3, [r7, #16]
 8013d30:	2b00      	cmp	r3, #0
 8013d32:	d120      	bne.n	8013d76 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8013d34:	4b4b      	ldr	r3, [pc, #300]	; (8013e64 <xTaskIncrementTick+0x158>)
 8013d36:	681b      	ldr	r3, [r3, #0]
 8013d38:	681b      	ldr	r3, [r3, #0]
 8013d3a:	2b00      	cmp	r3, #0
 8013d3c:	d00a      	beq.n	8013d54 <xTaskIncrementTick+0x48>
	__asm volatile
 8013d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d42:	f383 8811 	msr	BASEPRI, r3
 8013d46:	f3bf 8f6f 	isb	sy
 8013d4a:	f3bf 8f4f 	dsb	sy
 8013d4e:	603b      	str	r3, [r7, #0]
}
 8013d50:	bf00      	nop
 8013d52:	e7fe      	b.n	8013d52 <xTaskIncrementTick+0x46>
 8013d54:	4b43      	ldr	r3, [pc, #268]	; (8013e64 <xTaskIncrementTick+0x158>)
 8013d56:	681b      	ldr	r3, [r3, #0]
 8013d58:	60fb      	str	r3, [r7, #12]
 8013d5a:	4b43      	ldr	r3, [pc, #268]	; (8013e68 <xTaskIncrementTick+0x15c>)
 8013d5c:	681b      	ldr	r3, [r3, #0]
 8013d5e:	4a41      	ldr	r2, [pc, #260]	; (8013e64 <xTaskIncrementTick+0x158>)
 8013d60:	6013      	str	r3, [r2, #0]
 8013d62:	4a41      	ldr	r2, [pc, #260]	; (8013e68 <xTaskIncrementTick+0x15c>)
 8013d64:	68fb      	ldr	r3, [r7, #12]
 8013d66:	6013      	str	r3, [r2, #0]
 8013d68:	4b40      	ldr	r3, [pc, #256]	; (8013e6c <xTaskIncrementTick+0x160>)
 8013d6a:	681b      	ldr	r3, [r3, #0]
 8013d6c:	3301      	adds	r3, #1
 8013d6e:	4a3f      	ldr	r2, [pc, #252]	; (8013e6c <xTaskIncrementTick+0x160>)
 8013d70:	6013      	str	r3, [r2, #0]
 8013d72:	f000 fb31 	bl	80143d8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8013d76:	4b3e      	ldr	r3, [pc, #248]	; (8013e70 <xTaskIncrementTick+0x164>)
 8013d78:	681b      	ldr	r3, [r3, #0]
 8013d7a:	693a      	ldr	r2, [r7, #16]
 8013d7c:	429a      	cmp	r2, r3
 8013d7e:	d34d      	bcc.n	8013e1c <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013d80:	4b38      	ldr	r3, [pc, #224]	; (8013e64 <xTaskIncrementTick+0x158>)
 8013d82:	681b      	ldr	r3, [r3, #0]
 8013d84:	681b      	ldr	r3, [r3, #0]
 8013d86:	2b00      	cmp	r3, #0
 8013d88:	d104      	bne.n	8013d94 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013d8a:	4b39      	ldr	r3, [pc, #228]	; (8013e70 <xTaskIncrementTick+0x164>)
 8013d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8013d90:	601a      	str	r2, [r3, #0]
					break;
 8013d92:	e043      	b.n	8013e1c <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013d94:	4b33      	ldr	r3, [pc, #204]	; (8013e64 <xTaskIncrementTick+0x158>)
 8013d96:	681b      	ldr	r3, [r3, #0]
 8013d98:	68db      	ldr	r3, [r3, #12]
 8013d9a:	68db      	ldr	r3, [r3, #12]
 8013d9c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8013d9e:	68bb      	ldr	r3, [r7, #8]
 8013da0:	685b      	ldr	r3, [r3, #4]
 8013da2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8013da4:	693a      	ldr	r2, [r7, #16]
 8013da6:	687b      	ldr	r3, [r7, #4]
 8013da8:	429a      	cmp	r2, r3
 8013daa:	d203      	bcs.n	8013db4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8013dac:	4a30      	ldr	r2, [pc, #192]	; (8013e70 <xTaskIncrementTick+0x164>)
 8013dae:	687b      	ldr	r3, [r7, #4]
 8013db0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8013db2:	e033      	b.n	8013e1c <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013db4:	68bb      	ldr	r3, [r7, #8]
 8013db6:	3304      	adds	r3, #4
 8013db8:	4618      	mov	r0, r3
 8013dba:	f7fe fe33 	bl	8012a24 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8013dbe:	68bb      	ldr	r3, [r7, #8]
 8013dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013dc2:	2b00      	cmp	r3, #0
 8013dc4:	d004      	beq.n	8013dd0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013dc6:	68bb      	ldr	r3, [r7, #8]
 8013dc8:	3318      	adds	r3, #24
 8013dca:	4618      	mov	r0, r3
 8013dcc:	f7fe fe2a 	bl	8012a24 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8013dd0:	68bb      	ldr	r3, [r7, #8]
 8013dd2:	4618      	mov	r0, r3
 8013dd4:	f002 fce0 	bl	8016798 <SEGGER_SYSVIEW_OnTaskStartReady>
 8013dd8:	68bb      	ldr	r3, [r7, #8]
 8013dda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013ddc:	4b25      	ldr	r3, [pc, #148]	; (8013e74 <xTaskIncrementTick+0x168>)
 8013dde:	681b      	ldr	r3, [r3, #0]
 8013de0:	429a      	cmp	r2, r3
 8013de2:	d903      	bls.n	8013dec <xTaskIncrementTick+0xe0>
 8013de4:	68bb      	ldr	r3, [r7, #8]
 8013de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013de8:	4a22      	ldr	r2, [pc, #136]	; (8013e74 <xTaskIncrementTick+0x168>)
 8013dea:	6013      	str	r3, [r2, #0]
 8013dec:	68bb      	ldr	r3, [r7, #8]
 8013dee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013df0:	4613      	mov	r3, r2
 8013df2:	009b      	lsls	r3, r3, #2
 8013df4:	4413      	add	r3, r2
 8013df6:	009b      	lsls	r3, r3, #2
 8013df8:	4a1f      	ldr	r2, [pc, #124]	; (8013e78 <xTaskIncrementTick+0x16c>)
 8013dfa:	441a      	add	r2, r3
 8013dfc:	68bb      	ldr	r3, [r7, #8]
 8013dfe:	3304      	adds	r3, #4
 8013e00:	4619      	mov	r1, r3
 8013e02:	4610      	mov	r0, r2
 8013e04:	f7fe fdb1 	bl	801296a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013e08:	68bb      	ldr	r3, [r7, #8]
 8013e0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013e0c:	4b1b      	ldr	r3, [pc, #108]	; (8013e7c <xTaskIncrementTick+0x170>)
 8013e0e:	681b      	ldr	r3, [r3, #0]
 8013e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e12:	429a      	cmp	r2, r3
 8013e14:	d3b4      	bcc.n	8013d80 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8013e16:	2301      	movs	r3, #1
 8013e18:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013e1a:	e7b1      	b.n	8013d80 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8013e1c:	4b17      	ldr	r3, [pc, #92]	; (8013e7c <xTaskIncrementTick+0x170>)
 8013e1e:	681b      	ldr	r3, [r3, #0]
 8013e20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013e22:	4915      	ldr	r1, [pc, #84]	; (8013e78 <xTaskIncrementTick+0x16c>)
 8013e24:	4613      	mov	r3, r2
 8013e26:	009b      	lsls	r3, r3, #2
 8013e28:	4413      	add	r3, r2
 8013e2a:	009b      	lsls	r3, r3, #2
 8013e2c:	440b      	add	r3, r1
 8013e2e:	681b      	ldr	r3, [r3, #0]
 8013e30:	2b01      	cmp	r3, #1
 8013e32:	d901      	bls.n	8013e38 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8013e34:	2301      	movs	r3, #1
 8013e36:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8013e38:	4b11      	ldr	r3, [pc, #68]	; (8013e80 <xTaskIncrementTick+0x174>)
 8013e3a:	681b      	ldr	r3, [r3, #0]
 8013e3c:	2b00      	cmp	r3, #0
 8013e3e:	d007      	beq.n	8013e50 <xTaskIncrementTick+0x144>
			{
				xSwitchRequired = pdTRUE;
 8013e40:	2301      	movs	r3, #1
 8013e42:	617b      	str	r3, [r7, #20]
 8013e44:	e004      	b.n	8013e50 <xTaskIncrementTick+0x144>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8013e46:	4b0f      	ldr	r3, [pc, #60]	; (8013e84 <xTaskIncrementTick+0x178>)
 8013e48:	681b      	ldr	r3, [r3, #0]
 8013e4a:	3301      	adds	r3, #1
 8013e4c:	4a0d      	ldr	r2, [pc, #52]	; (8013e84 <xTaskIncrementTick+0x178>)
 8013e4e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8013e50:	697b      	ldr	r3, [r7, #20]
}
 8013e52:	4618      	mov	r0, r3
 8013e54:	3718      	adds	r7, #24
 8013e56:	46bd      	mov	sp, r7
 8013e58:	bd80      	pop	{r7, pc}
 8013e5a:	bf00      	nop
 8013e5c:	200022f4 	.word	0x200022f4
 8013e60:	200022d0 	.word	0x200022d0
 8013e64:	20002284 	.word	0x20002284
 8013e68:	20002288 	.word	0x20002288
 8013e6c:	200022e4 	.word	0x200022e4
 8013e70:	200022ec 	.word	0x200022ec
 8013e74:	200022d4 	.word	0x200022d4
 8013e78:	20001dfc 	.word	0x20001dfc
 8013e7c:	20001df8 	.word	0x20001df8
 8013e80:	200022e0 	.word	0x200022e0
 8013e84:	200022dc 	.word	0x200022dc

08013e88 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8013e88:	b580      	push	{r7, lr}
 8013e8a:	b084      	sub	sp, #16
 8013e8c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8013e8e:	4b33      	ldr	r3, [pc, #204]	; (8013f5c <vTaskSwitchContext+0xd4>)
 8013e90:	681b      	ldr	r3, [r3, #0]
 8013e92:	2b00      	cmp	r3, #0
 8013e94:	d003      	beq.n	8013e9e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8013e96:	4b32      	ldr	r3, [pc, #200]	; (8013f60 <vTaskSwitchContext+0xd8>)
 8013e98:	2201      	movs	r2, #1
 8013e9a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8013e9c:	e059      	b.n	8013f52 <vTaskSwitchContext+0xca>
		xYieldPending = pdFALSE;
 8013e9e:	4b30      	ldr	r3, [pc, #192]	; (8013f60 <vTaskSwitchContext+0xd8>)
 8013ea0:	2200      	movs	r2, #0
 8013ea2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013ea4:	4b2f      	ldr	r3, [pc, #188]	; (8013f64 <vTaskSwitchContext+0xdc>)
 8013ea6:	681b      	ldr	r3, [r3, #0]
 8013ea8:	60fb      	str	r3, [r7, #12]
 8013eaa:	e010      	b.n	8013ece <vTaskSwitchContext+0x46>
 8013eac:	68fb      	ldr	r3, [r7, #12]
 8013eae:	2b00      	cmp	r3, #0
 8013eb0:	d10a      	bne.n	8013ec8 <vTaskSwitchContext+0x40>
	__asm volatile
 8013eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013eb6:	f383 8811 	msr	BASEPRI, r3
 8013eba:	f3bf 8f6f 	isb	sy
 8013ebe:	f3bf 8f4f 	dsb	sy
 8013ec2:	607b      	str	r3, [r7, #4]
}
 8013ec4:	bf00      	nop
 8013ec6:	e7fe      	b.n	8013ec6 <vTaskSwitchContext+0x3e>
 8013ec8:	68fb      	ldr	r3, [r7, #12]
 8013eca:	3b01      	subs	r3, #1
 8013ecc:	60fb      	str	r3, [r7, #12]
 8013ece:	4926      	ldr	r1, [pc, #152]	; (8013f68 <vTaskSwitchContext+0xe0>)
 8013ed0:	68fa      	ldr	r2, [r7, #12]
 8013ed2:	4613      	mov	r3, r2
 8013ed4:	009b      	lsls	r3, r3, #2
 8013ed6:	4413      	add	r3, r2
 8013ed8:	009b      	lsls	r3, r3, #2
 8013eda:	440b      	add	r3, r1
 8013edc:	681b      	ldr	r3, [r3, #0]
 8013ede:	2b00      	cmp	r3, #0
 8013ee0:	d0e4      	beq.n	8013eac <vTaskSwitchContext+0x24>
 8013ee2:	68fa      	ldr	r2, [r7, #12]
 8013ee4:	4613      	mov	r3, r2
 8013ee6:	009b      	lsls	r3, r3, #2
 8013ee8:	4413      	add	r3, r2
 8013eea:	009b      	lsls	r3, r3, #2
 8013eec:	4a1e      	ldr	r2, [pc, #120]	; (8013f68 <vTaskSwitchContext+0xe0>)
 8013eee:	4413      	add	r3, r2
 8013ef0:	60bb      	str	r3, [r7, #8]
 8013ef2:	68bb      	ldr	r3, [r7, #8]
 8013ef4:	685b      	ldr	r3, [r3, #4]
 8013ef6:	685a      	ldr	r2, [r3, #4]
 8013ef8:	68bb      	ldr	r3, [r7, #8]
 8013efa:	605a      	str	r2, [r3, #4]
 8013efc:	68bb      	ldr	r3, [r7, #8]
 8013efe:	685a      	ldr	r2, [r3, #4]
 8013f00:	68bb      	ldr	r3, [r7, #8]
 8013f02:	3308      	adds	r3, #8
 8013f04:	429a      	cmp	r2, r3
 8013f06:	d104      	bne.n	8013f12 <vTaskSwitchContext+0x8a>
 8013f08:	68bb      	ldr	r3, [r7, #8]
 8013f0a:	685b      	ldr	r3, [r3, #4]
 8013f0c:	685a      	ldr	r2, [r3, #4]
 8013f0e:	68bb      	ldr	r3, [r7, #8]
 8013f10:	605a      	str	r2, [r3, #4]
 8013f12:	68bb      	ldr	r3, [r7, #8]
 8013f14:	685b      	ldr	r3, [r3, #4]
 8013f16:	68db      	ldr	r3, [r3, #12]
 8013f18:	4a14      	ldr	r2, [pc, #80]	; (8013f6c <vTaskSwitchContext+0xe4>)
 8013f1a:	6013      	str	r3, [r2, #0]
 8013f1c:	4a11      	ldr	r2, [pc, #68]	; (8013f64 <vTaskSwitchContext+0xdc>)
 8013f1e:	68fb      	ldr	r3, [r7, #12]
 8013f20:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8013f22:	4b12      	ldr	r3, [pc, #72]	; (8013f6c <vTaskSwitchContext+0xe4>)
 8013f24:	681b      	ldr	r3, [r3, #0]
 8013f26:	3334      	adds	r3, #52	; 0x34
 8013f28:	2205      	movs	r2, #5
 8013f2a:	4911      	ldr	r1, [pc, #68]	; (8013f70 <vTaskSwitchContext+0xe8>)
 8013f2c:	4618      	mov	r0, r3
 8013f2e:	f002 fe07 	bl	8016b40 <memcmp>
 8013f32:	4603      	mov	r3, r0
 8013f34:	2b00      	cmp	r3, #0
 8013f36:	d005      	beq.n	8013f44 <vTaskSwitchContext+0xbc>
 8013f38:	4b0c      	ldr	r3, [pc, #48]	; (8013f6c <vTaskSwitchContext+0xe4>)
 8013f3a:	681b      	ldr	r3, [r3, #0]
 8013f3c:	4618      	mov	r0, r3
 8013f3e:	f002 fbe9 	bl	8016714 <SEGGER_SYSVIEW_OnTaskStartExec>
 8013f42:	e001      	b.n	8013f48 <vTaskSwitchContext+0xc0>
 8013f44:	f002 fb88 	bl	8016658 <SEGGER_SYSVIEW_OnIdle>
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8013f48:	4b08      	ldr	r3, [pc, #32]	; (8013f6c <vTaskSwitchContext+0xe4>)
 8013f4a:	681b      	ldr	r3, [r3, #0]
 8013f4c:	3364      	adds	r3, #100	; 0x64
 8013f4e:	4a09      	ldr	r2, [pc, #36]	; (8013f74 <vTaskSwitchContext+0xec>)
 8013f50:	6013      	str	r3, [r2, #0]
}
 8013f52:	bf00      	nop
 8013f54:	3710      	adds	r7, #16
 8013f56:	46bd      	mov	sp, r7
 8013f58:	bd80      	pop	{r7, pc}
 8013f5a:	bf00      	nop
 8013f5c:	200022f4 	.word	0x200022f4
 8013f60:	200022e0 	.word	0x200022e0
 8013f64:	200022d4 	.word	0x200022d4
 8013f68:	20001dfc 	.word	0x20001dfc
 8013f6c:	20001df8 	.word	0x20001df8
 8013f70:	08017890 	.word	0x08017890
 8013f74:	200012ec 	.word	0x200012ec

08013f78 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8013f78:	b580      	push	{r7, lr}
 8013f7a:	b084      	sub	sp, #16
 8013f7c:	af00      	add	r7, sp, #0
 8013f7e:	6078      	str	r0, [r7, #4]
 8013f80:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8013f82:	687b      	ldr	r3, [r7, #4]
 8013f84:	2b00      	cmp	r3, #0
 8013f86:	d10a      	bne.n	8013f9e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8013f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f8c:	f383 8811 	msr	BASEPRI, r3
 8013f90:	f3bf 8f6f 	isb	sy
 8013f94:	f3bf 8f4f 	dsb	sy
 8013f98:	60fb      	str	r3, [r7, #12]
}
 8013f9a:	bf00      	nop
 8013f9c:	e7fe      	b.n	8013f9c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013f9e:	4b07      	ldr	r3, [pc, #28]	; (8013fbc <vTaskPlaceOnEventList+0x44>)
 8013fa0:	681b      	ldr	r3, [r3, #0]
 8013fa2:	3318      	adds	r3, #24
 8013fa4:	4619      	mov	r1, r3
 8013fa6:	6878      	ldr	r0, [r7, #4]
 8013fa8:	f7fe fd03 	bl	80129b2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8013fac:	2101      	movs	r1, #1
 8013fae:	6838      	ldr	r0, [r7, #0]
 8013fb0:	f000 fac6 	bl	8014540 <prvAddCurrentTaskToDelayedList>
}
 8013fb4:	bf00      	nop
 8013fb6:	3710      	adds	r7, #16
 8013fb8:	46bd      	mov	sp, r7
 8013fba:	bd80      	pop	{r7, pc}
 8013fbc:	20001df8 	.word	0x20001df8

08013fc0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8013fc0:	b580      	push	{r7, lr}
 8013fc2:	b086      	sub	sp, #24
 8013fc4:	af00      	add	r7, sp, #0
 8013fc6:	60f8      	str	r0, [r7, #12]
 8013fc8:	60b9      	str	r1, [r7, #8]
 8013fca:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8013fcc:	68fb      	ldr	r3, [r7, #12]
 8013fce:	2b00      	cmp	r3, #0
 8013fd0:	d10a      	bne.n	8013fe8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8013fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013fd6:	f383 8811 	msr	BASEPRI, r3
 8013fda:	f3bf 8f6f 	isb	sy
 8013fde:	f3bf 8f4f 	dsb	sy
 8013fe2:	617b      	str	r3, [r7, #20]
}
 8013fe4:	bf00      	nop
 8013fe6:	e7fe      	b.n	8013fe6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013fe8:	4b0b      	ldr	r3, [pc, #44]	; (8014018 <vTaskPlaceOnEventListRestricted+0x58>)
 8013fea:	681b      	ldr	r3, [r3, #0]
 8013fec:	3318      	adds	r3, #24
 8013fee:	4619      	mov	r1, r3
 8013ff0:	68f8      	ldr	r0, [r7, #12]
 8013ff2:	f7fe fcba 	bl	801296a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8013ff6:	687b      	ldr	r3, [r7, #4]
 8013ff8:	2b00      	cmp	r3, #0
 8013ffa:	d002      	beq.n	8014002 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8013ffc:	f04f 33ff 	mov.w	r3, #4294967295
 8014000:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8014002:	2024      	movs	r0, #36	; 0x24
 8014004:	f001 fea4 	bl	8015d50 <SEGGER_SYSVIEW_RecordVoid>
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8014008:	6879      	ldr	r1, [r7, #4]
 801400a:	68b8      	ldr	r0, [r7, #8]
 801400c:	f000 fa98 	bl	8014540 <prvAddCurrentTaskToDelayedList>
	}
 8014010:	bf00      	nop
 8014012:	3718      	adds	r7, #24
 8014014:	46bd      	mov	sp, r7
 8014016:	bd80      	pop	{r7, pc}
 8014018:	20001df8 	.word	0x20001df8

0801401c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801401c:	b580      	push	{r7, lr}
 801401e:	b086      	sub	sp, #24
 8014020:	af00      	add	r7, sp, #0
 8014022:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014024:	687b      	ldr	r3, [r7, #4]
 8014026:	68db      	ldr	r3, [r3, #12]
 8014028:	68db      	ldr	r3, [r3, #12]
 801402a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801402c:	693b      	ldr	r3, [r7, #16]
 801402e:	2b00      	cmp	r3, #0
 8014030:	d10a      	bne.n	8014048 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8014032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014036:	f383 8811 	msr	BASEPRI, r3
 801403a:	f3bf 8f6f 	isb	sy
 801403e:	f3bf 8f4f 	dsb	sy
 8014042:	60fb      	str	r3, [r7, #12]
}
 8014044:	bf00      	nop
 8014046:	e7fe      	b.n	8014046 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8014048:	693b      	ldr	r3, [r7, #16]
 801404a:	3318      	adds	r3, #24
 801404c:	4618      	mov	r0, r3
 801404e:	f7fe fce9 	bl	8012a24 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014052:	4b20      	ldr	r3, [pc, #128]	; (80140d4 <xTaskRemoveFromEventList+0xb8>)
 8014054:	681b      	ldr	r3, [r3, #0]
 8014056:	2b00      	cmp	r3, #0
 8014058:	d121      	bne.n	801409e <xTaskRemoveFromEventList+0x82>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801405a:	693b      	ldr	r3, [r7, #16]
 801405c:	3304      	adds	r3, #4
 801405e:	4618      	mov	r0, r3
 8014060:	f7fe fce0 	bl	8012a24 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8014064:	693b      	ldr	r3, [r7, #16]
 8014066:	4618      	mov	r0, r3
 8014068:	f002 fb96 	bl	8016798 <SEGGER_SYSVIEW_OnTaskStartReady>
 801406c:	693b      	ldr	r3, [r7, #16]
 801406e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014070:	4b19      	ldr	r3, [pc, #100]	; (80140d8 <xTaskRemoveFromEventList+0xbc>)
 8014072:	681b      	ldr	r3, [r3, #0]
 8014074:	429a      	cmp	r2, r3
 8014076:	d903      	bls.n	8014080 <xTaskRemoveFromEventList+0x64>
 8014078:	693b      	ldr	r3, [r7, #16]
 801407a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801407c:	4a16      	ldr	r2, [pc, #88]	; (80140d8 <xTaskRemoveFromEventList+0xbc>)
 801407e:	6013      	str	r3, [r2, #0]
 8014080:	693b      	ldr	r3, [r7, #16]
 8014082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014084:	4613      	mov	r3, r2
 8014086:	009b      	lsls	r3, r3, #2
 8014088:	4413      	add	r3, r2
 801408a:	009b      	lsls	r3, r3, #2
 801408c:	4a13      	ldr	r2, [pc, #76]	; (80140dc <xTaskRemoveFromEventList+0xc0>)
 801408e:	441a      	add	r2, r3
 8014090:	693b      	ldr	r3, [r7, #16]
 8014092:	3304      	adds	r3, #4
 8014094:	4619      	mov	r1, r3
 8014096:	4610      	mov	r0, r2
 8014098:	f7fe fc67 	bl	801296a <vListInsertEnd>
 801409c:	e005      	b.n	80140aa <xTaskRemoveFromEventList+0x8e>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801409e:	693b      	ldr	r3, [r7, #16]
 80140a0:	3318      	adds	r3, #24
 80140a2:	4619      	mov	r1, r3
 80140a4:	480e      	ldr	r0, [pc, #56]	; (80140e0 <xTaskRemoveFromEventList+0xc4>)
 80140a6:	f7fe fc60 	bl	801296a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80140aa:	693b      	ldr	r3, [r7, #16]
 80140ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80140ae:	4b0d      	ldr	r3, [pc, #52]	; (80140e4 <xTaskRemoveFromEventList+0xc8>)
 80140b0:	681b      	ldr	r3, [r3, #0]
 80140b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80140b4:	429a      	cmp	r2, r3
 80140b6:	d905      	bls.n	80140c4 <xTaskRemoveFromEventList+0xa8>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80140b8:	2301      	movs	r3, #1
 80140ba:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80140bc:	4b0a      	ldr	r3, [pc, #40]	; (80140e8 <xTaskRemoveFromEventList+0xcc>)
 80140be:	2201      	movs	r2, #1
 80140c0:	601a      	str	r2, [r3, #0]
 80140c2:	e001      	b.n	80140c8 <xTaskRemoveFromEventList+0xac>
	}
	else
	{
		xReturn = pdFALSE;
 80140c4:	2300      	movs	r3, #0
 80140c6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80140c8:	697b      	ldr	r3, [r7, #20]
}
 80140ca:	4618      	mov	r0, r3
 80140cc:	3718      	adds	r7, #24
 80140ce:	46bd      	mov	sp, r7
 80140d0:	bd80      	pop	{r7, pc}
 80140d2:	bf00      	nop
 80140d4:	200022f4 	.word	0x200022f4
 80140d8:	200022d4 	.word	0x200022d4
 80140dc:	20001dfc 	.word	0x20001dfc
 80140e0:	2000228c 	.word	0x2000228c
 80140e4:	20001df8 	.word	0x20001df8
 80140e8:	200022e0 	.word	0x200022e0

080140ec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80140ec:	b480      	push	{r7}
 80140ee:	b083      	sub	sp, #12
 80140f0:	af00      	add	r7, sp, #0
 80140f2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80140f4:	4b06      	ldr	r3, [pc, #24]	; (8014110 <vTaskInternalSetTimeOutState+0x24>)
 80140f6:	681a      	ldr	r2, [r3, #0]
 80140f8:	687b      	ldr	r3, [r7, #4]
 80140fa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80140fc:	4b05      	ldr	r3, [pc, #20]	; (8014114 <vTaskInternalSetTimeOutState+0x28>)
 80140fe:	681a      	ldr	r2, [r3, #0]
 8014100:	687b      	ldr	r3, [r7, #4]
 8014102:	605a      	str	r2, [r3, #4]
}
 8014104:	bf00      	nop
 8014106:	370c      	adds	r7, #12
 8014108:	46bd      	mov	sp, r7
 801410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801410e:	4770      	bx	lr
 8014110:	200022e4 	.word	0x200022e4
 8014114:	200022d0 	.word	0x200022d0

08014118 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8014118:	b580      	push	{r7, lr}
 801411a:	b088      	sub	sp, #32
 801411c:	af00      	add	r7, sp, #0
 801411e:	6078      	str	r0, [r7, #4]
 8014120:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8014122:	687b      	ldr	r3, [r7, #4]
 8014124:	2b00      	cmp	r3, #0
 8014126:	d10a      	bne.n	801413e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8014128:	f04f 0350 	mov.w	r3, #80	; 0x50
 801412c:	f383 8811 	msr	BASEPRI, r3
 8014130:	f3bf 8f6f 	isb	sy
 8014134:	f3bf 8f4f 	dsb	sy
 8014138:	613b      	str	r3, [r7, #16]
}
 801413a:	bf00      	nop
 801413c:	e7fe      	b.n	801413c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801413e:	683b      	ldr	r3, [r7, #0]
 8014140:	2b00      	cmp	r3, #0
 8014142:	d10a      	bne.n	801415a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8014144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014148:	f383 8811 	msr	BASEPRI, r3
 801414c:	f3bf 8f6f 	isb	sy
 8014150:	f3bf 8f4f 	dsb	sy
 8014154:	60fb      	str	r3, [r7, #12]
}
 8014156:	bf00      	nop
 8014158:	e7fe      	b.n	8014158 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801415a:	f000 fec3 	bl	8014ee4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801415e:	4b1d      	ldr	r3, [pc, #116]	; (80141d4 <xTaskCheckForTimeOut+0xbc>)
 8014160:	681b      	ldr	r3, [r3, #0]
 8014162:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8014164:	687b      	ldr	r3, [r7, #4]
 8014166:	685b      	ldr	r3, [r3, #4]
 8014168:	69ba      	ldr	r2, [r7, #24]
 801416a:	1ad3      	subs	r3, r2, r3
 801416c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801416e:	683b      	ldr	r3, [r7, #0]
 8014170:	681b      	ldr	r3, [r3, #0]
 8014172:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014176:	d102      	bne.n	801417e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8014178:	2300      	movs	r3, #0
 801417a:	61fb      	str	r3, [r7, #28]
 801417c:	e023      	b.n	80141c6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801417e:	687b      	ldr	r3, [r7, #4]
 8014180:	681a      	ldr	r2, [r3, #0]
 8014182:	4b15      	ldr	r3, [pc, #84]	; (80141d8 <xTaskCheckForTimeOut+0xc0>)
 8014184:	681b      	ldr	r3, [r3, #0]
 8014186:	429a      	cmp	r2, r3
 8014188:	d007      	beq.n	801419a <xTaskCheckForTimeOut+0x82>
 801418a:	687b      	ldr	r3, [r7, #4]
 801418c:	685b      	ldr	r3, [r3, #4]
 801418e:	69ba      	ldr	r2, [r7, #24]
 8014190:	429a      	cmp	r2, r3
 8014192:	d302      	bcc.n	801419a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8014194:	2301      	movs	r3, #1
 8014196:	61fb      	str	r3, [r7, #28]
 8014198:	e015      	b.n	80141c6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801419a:	683b      	ldr	r3, [r7, #0]
 801419c:	681b      	ldr	r3, [r3, #0]
 801419e:	697a      	ldr	r2, [r7, #20]
 80141a0:	429a      	cmp	r2, r3
 80141a2:	d20b      	bcs.n	80141bc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80141a4:	683b      	ldr	r3, [r7, #0]
 80141a6:	681a      	ldr	r2, [r3, #0]
 80141a8:	697b      	ldr	r3, [r7, #20]
 80141aa:	1ad2      	subs	r2, r2, r3
 80141ac:	683b      	ldr	r3, [r7, #0]
 80141ae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80141b0:	6878      	ldr	r0, [r7, #4]
 80141b2:	f7ff ff9b 	bl	80140ec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80141b6:	2300      	movs	r3, #0
 80141b8:	61fb      	str	r3, [r7, #28]
 80141ba:	e004      	b.n	80141c6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80141bc:	683b      	ldr	r3, [r7, #0]
 80141be:	2200      	movs	r2, #0
 80141c0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80141c2:	2301      	movs	r3, #1
 80141c4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80141c6:	f000 febd 	bl	8014f44 <vPortExitCritical>

	return xReturn;
 80141ca:	69fb      	ldr	r3, [r7, #28]
}
 80141cc:	4618      	mov	r0, r3
 80141ce:	3720      	adds	r7, #32
 80141d0:	46bd      	mov	sp, r7
 80141d2:	bd80      	pop	{r7, pc}
 80141d4:	200022d0 	.word	0x200022d0
 80141d8:	200022e4 	.word	0x200022e4

080141dc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80141dc:	b480      	push	{r7}
 80141de:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80141e0:	4b03      	ldr	r3, [pc, #12]	; (80141f0 <vTaskMissedYield+0x14>)
 80141e2:	2201      	movs	r2, #1
 80141e4:	601a      	str	r2, [r3, #0]
}
 80141e6:	bf00      	nop
 80141e8:	46bd      	mov	sp, r7
 80141ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141ee:	4770      	bx	lr
 80141f0:	200022e0 	.word	0x200022e0

080141f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80141f4:	b580      	push	{r7, lr}
 80141f6:	b082      	sub	sp, #8
 80141f8:	af00      	add	r7, sp, #0
 80141fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80141fc:	f000 f852 	bl	80142a4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8014200:	4b06      	ldr	r3, [pc, #24]	; (801421c <prvIdleTask+0x28>)
 8014202:	681b      	ldr	r3, [r3, #0]
 8014204:	2b01      	cmp	r3, #1
 8014206:	d9f9      	bls.n	80141fc <prvIdleTask+0x8>
			{
				taskYIELD();
 8014208:	4b05      	ldr	r3, [pc, #20]	; (8014220 <prvIdleTask+0x2c>)
 801420a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801420e:	601a      	str	r2, [r3, #0]
 8014210:	f3bf 8f4f 	dsb	sy
 8014214:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8014218:	e7f0      	b.n	80141fc <prvIdleTask+0x8>
 801421a:	bf00      	nop
 801421c:	20001dfc 	.word	0x20001dfc
 8014220:	e000ed04 	.word	0xe000ed04

08014224 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8014224:	b580      	push	{r7, lr}
 8014226:	b082      	sub	sp, #8
 8014228:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801422a:	2300      	movs	r3, #0
 801422c:	607b      	str	r3, [r7, #4]
 801422e:	e00c      	b.n	801424a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8014230:	687a      	ldr	r2, [r7, #4]
 8014232:	4613      	mov	r3, r2
 8014234:	009b      	lsls	r3, r3, #2
 8014236:	4413      	add	r3, r2
 8014238:	009b      	lsls	r3, r3, #2
 801423a:	4a12      	ldr	r2, [pc, #72]	; (8014284 <prvInitialiseTaskLists+0x60>)
 801423c:	4413      	add	r3, r2
 801423e:	4618      	mov	r0, r3
 8014240:	f7fe fb66 	bl	8012910 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014244:	687b      	ldr	r3, [r7, #4]
 8014246:	3301      	adds	r3, #1
 8014248:	607b      	str	r3, [r7, #4]
 801424a:	687b      	ldr	r3, [r7, #4]
 801424c:	2b37      	cmp	r3, #55	; 0x37
 801424e:	d9ef      	bls.n	8014230 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8014250:	480d      	ldr	r0, [pc, #52]	; (8014288 <prvInitialiseTaskLists+0x64>)
 8014252:	f7fe fb5d 	bl	8012910 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8014256:	480d      	ldr	r0, [pc, #52]	; (801428c <prvInitialiseTaskLists+0x68>)
 8014258:	f7fe fb5a 	bl	8012910 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801425c:	480c      	ldr	r0, [pc, #48]	; (8014290 <prvInitialiseTaskLists+0x6c>)
 801425e:	f7fe fb57 	bl	8012910 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8014262:	480c      	ldr	r0, [pc, #48]	; (8014294 <prvInitialiseTaskLists+0x70>)
 8014264:	f7fe fb54 	bl	8012910 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8014268:	480b      	ldr	r0, [pc, #44]	; (8014298 <prvInitialiseTaskLists+0x74>)
 801426a:	f7fe fb51 	bl	8012910 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801426e:	4b0b      	ldr	r3, [pc, #44]	; (801429c <prvInitialiseTaskLists+0x78>)
 8014270:	4a05      	ldr	r2, [pc, #20]	; (8014288 <prvInitialiseTaskLists+0x64>)
 8014272:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8014274:	4b0a      	ldr	r3, [pc, #40]	; (80142a0 <prvInitialiseTaskLists+0x7c>)
 8014276:	4a05      	ldr	r2, [pc, #20]	; (801428c <prvInitialiseTaskLists+0x68>)
 8014278:	601a      	str	r2, [r3, #0]
}
 801427a:	bf00      	nop
 801427c:	3708      	adds	r7, #8
 801427e:	46bd      	mov	sp, r7
 8014280:	bd80      	pop	{r7, pc}
 8014282:	bf00      	nop
 8014284:	20001dfc 	.word	0x20001dfc
 8014288:	2000225c 	.word	0x2000225c
 801428c:	20002270 	.word	0x20002270
 8014290:	2000228c 	.word	0x2000228c
 8014294:	200022a0 	.word	0x200022a0
 8014298:	200022b8 	.word	0x200022b8
 801429c:	20002284 	.word	0x20002284
 80142a0:	20002288 	.word	0x20002288

080142a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80142a4:	b580      	push	{r7, lr}
 80142a6:	b082      	sub	sp, #8
 80142a8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80142aa:	e019      	b.n	80142e0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80142ac:	f000 fe1a 	bl	8014ee4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80142b0:	4b10      	ldr	r3, [pc, #64]	; (80142f4 <prvCheckTasksWaitingTermination+0x50>)
 80142b2:	68db      	ldr	r3, [r3, #12]
 80142b4:	68db      	ldr	r3, [r3, #12]
 80142b6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80142b8:	687b      	ldr	r3, [r7, #4]
 80142ba:	3304      	adds	r3, #4
 80142bc:	4618      	mov	r0, r3
 80142be:	f7fe fbb1 	bl	8012a24 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80142c2:	4b0d      	ldr	r3, [pc, #52]	; (80142f8 <prvCheckTasksWaitingTermination+0x54>)
 80142c4:	681b      	ldr	r3, [r3, #0]
 80142c6:	3b01      	subs	r3, #1
 80142c8:	4a0b      	ldr	r2, [pc, #44]	; (80142f8 <prvCheckTasksWaitingTermination+0x54>)
 80142ca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80142cc:	4b0b      	ldr	r3, [pc, #44]	; (80142fc <prvCheckTasksWaitingTermination+0x58>)
 80142ce:	681b      	ldr	r3, [r3, #0]
 80142d0:	3b01      	subs	r3, #1
 80142d2:	4a0a      	ldr	r2, [pc, #40]	; (80142fc <prvCheckTasksWaitingTermination+0x58>)
 80142d4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80142d6:	f000 fe35 	bl	8014f44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80142da:	6878      	ldr	r0, [r7, #4]
 80142dc:	f000 f848 	bl	8014370 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80142e0:	4b06      	ldr	r3, [pc, #24]	; (80142fc <prvCheckTasksWaitingTermination+0x58>)
 80142e2:	681b      	ldr	r3, [r3, #0]
 80142e4:	2b00      	cmp	r3, #0
 80142e6:	d1e1      	bne.n	80142ac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80142e8:	bf00      	nop
 80142ea:	bf00      	nop
 80142ec:	3708      	adds	r7, #8
 80142ee:	46bd      	mov	sp, r7
 80142f0:	bd80      	pop	{r7, pc}
 80142f2:	bf00      	nop
 80142f4:	200022a0 	.word	0x200022a0
 80142f8:	200022cc 	.word	0x200022cc
 80142fc:	200022b4 	.word	0x200022b4

08014300 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8014300:	b480      	push	{r7}
 8014302:	b085      	sub	sp, #20
 8014304:	af00      	add	r7, sp, #0
 8014306:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8014308:	2300      	movs	r3, #0
 801430a:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 801430c:	e005      	b.n	801431a <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 801430e:	687b      	ldr	r3, [r7, #4]
 8014310:	3301      	adds	r3, #1
 8014312:	607b      	str	r3, [r7, #4]
			ulCount++;
 8014314:	68fb      	ldr	r3, [r7, #12]
 8014316:	3301      	adds	r3, #1
 8014318:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 801431a:	687b      	ldr	r3, [r7, #4]
 801431c:	781b      	ldrb	r3, [r3, #0]
 801431e:	2ba5      	cmp	r3, #165	; 0xa5
 8014320:	d0f5      	beq.n	801430e <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8014322:	68fb      	ldr	r3, [r7, #12]
 8014324:	089b      	lsrs	r3, r3, #2
 8014326:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8014328:	68fb      	ldr	r3, [r7, #12]
 801432a:	b29b      	uxth	r3, r3
	}
 801432c:	4618      	mov	r0, r3
 801432e:	3714      	adds	r7, #20
 8014330:	46bd      	mov	sp, r7
 8014332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014336:	4770      	bx	lr

08014338 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 8014338:	b580      	push	{r7, lr}
 801433a:	b086      	sub	sp, #24
 801433c:	af00      	add	r7, sp, #0
 801433e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	2b00      	cmp	r3, #0
 8014344:	d102      	bne.n	801434c <uxTaskGetStackHighWaterMark+0x14>
 8014346:	4b09      	ldr	r3, [pc, #36]	; (801436c <uxTaskGetStackHighWaterMark+0x34>)
 8014348:	681b      	ldr	r3, [r3, #0]
 801434a:	e000      	b.n	801434e <uxTaskGetStackHighWaterMark+0x16>
 801434c:	687b      	ldr	r3, [r7, #4]
 801434e:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8014350:	697b      	ldr	r3, [r7, #20]
 8014352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014354:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 8014356:	6938      	ldr	r0, [r7, #16]
 8014358:	f7ff ffd2 	bl	8014300 <prvTaskCheckFreeStackSpace>
 801435c:	4603      	mov	r3, r0
 801435e:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 8014360:	68fb      	ldr	r3, [r7, #12]
	}
 8014362:	4618      	mov	r0, r3
 8014364:	3718      	adds	r7, #24
 8014366:	46bd      	mov	sp, r7
 8014368:	bd80      	pop	{r7, pc}
 801436a:	bf00      	nop
 801436c:	20001df8 	.word	0x20001df8

08014370 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8014370:	b580      	push	{r7, lr}
 8014372:	b084      	sub	sp, #16
 8014374:	af00      	add	r7, sp, #0
 8014376:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8014378:	687b      	ldr	r3, [r7, #4]
 801437a:	3364      	adds	r3, #100	; 0x64
 801437c:	4618      	mov	r0, r3
 801437e:	f002 fc11 	bl	8016ba4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8014382:	687b      	ldr	r3, [r7, #4]
 8014384:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 8014388:	2b00      	cmp	r3, #0
 801438a:	d108      	bne.n	801439e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801438c:	687b      	ldr	r3, [r7, #4]
 801438e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014390:	4618      	mov	r0, r3
 8014392:	f000 ff95 	bl	80152c0 <vPortFree>
				vPortFree( pxTCB );
 8014396:	6878      	ldr	r0, [r7, #4]
 8014398:	f000 ff92 	bl	80152c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801439c:	e018      	b.n	80143d0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801439e:	687b      	ldr	r3, [r7, #4]
 80143a0:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 80143a4:	2b01      	cmp	r3, #1
 80143a6:	d103      	bne.n	80143b0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80143a8:	6878      	ldr	r0, [r7, #4]
 80143aa:	f000 ff89 	bl	80152c0 <vPortFree>
	}
 80143ae:	e00f      	b.n	80143d0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80143b0:	687b      	ldr	r3, [r7, #4]
 80143b2:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 80143b6:	2b02      	cmp	r3, #2
 80143b8:	d00a      	beq.n	80143d0 <prvDeleteTCB+0x60>
	__asm volatile
 80143ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143be:	f383 8811 	msr	BASEPRI, r3
 80143c2:	f3bf 8f6f 	isb	sy
 80143c6:	f3bf 8f4f 	dsb	sy
 80143ca:	60fb      	str	r3, [r7, #12]
}
 80143cc:	bf00      	nop
 80143ce:	e7fe      	b.n	80143ce <prvDeleteTCB+0x5e>
	}
 80143d0:	bf00      	nop
 80143d2:	3710      	adds	r7, #16
 80143d4:	46bd      	mov	sp, r7
 80143d6:	bd80      	pop	{r7, pc}

080143d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80143d8:	b480      	push	{r7}
 80143da:	b083      	sub	sp, #12
 80143dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80143de:	4b0c      	ldr	r3, [pc, #48]	; (8014410 <prvResetNextTaskUnblockTime+0x38>)
 80143e0:	681b      	ldr	r3, [r3, #0]
 80143e2:	681b      	ldr	r3, [r3, #0]
 80143e4:	2b00      	cmp	r3, #0
 80143e6:	d104      	bne.n	80143f2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80143e8:	4b0a      	ldr	r3, [pc, #40]	; (8014414 <prvResetNextTaskUnblockTime+0x3c>)
 80143ea:	f04f 32ff 	mov.w	r2, #4294967295
 80143ee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80143f0:	e008      	b.n	8014404 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80143f2:	4b07      	ldr	r3, [pc, #28]	; (8014410 <prvResetNextTaskUnblockTime+0x38>)
 80143f4:	681b      	ldr	r3, [r3, #0]
 80143f6:	68db      	ldr	r3, [r3, #12]
 80143f8:	68db      	ldr	r3, [r3, #12]
 80143fa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80143fc:	687b      	ldr	r3, [r7, #4]
 80143fe:	685b      	ldr	r3, [r3, #4]
 8014400:	4a04      	ldr	r2, [pc, #16]	; (8014414 <prvResetNextTaskUnblockTime+0x3c>)
 8014402:	6013      	str	r3, [r2, #0]
}
 8014404:	bf00      	nop
 8014406:	370c      	adds	r7, #12
 8014408:	46bd      	mov	sp, r7
 801440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801440e:	4770      	bx	lr
 8014410:	20002284 	.word	0x20002284
 8014414:	200022ec 	.word	0x200022ec

08014418 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8014418:	b480      	push	{r7}
 801441a:	b083      	sub	sp, #12
 801441c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801441e:	4b0b      	ldr	r3, [pc, #44]	; (801444c <xTaskGetSchedulerState+0x34>)
 8014420:	681b      	ldr	r3, [r3, #0]
 8014422:	2b00      	cmp	r3, #0
 8014424:	d102      	bne.n	801442c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8014426:	2301      	movs	r3, #1
 8014428:	607b      	str	r3, [r7, #4]
 801442a:	e008      	b.n	801443e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801442c:	4b08      	ldr	r3, [pc, #32]	; (8014450 <xTaskGetSchedulerState+0x38>)
 801442e:	681b      	ldr	r3, [r3, #0]
 8014430:	2b00      	cmp	r3, #0
 8014432:	d102      	bne.n	801443a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8014434:	2302      	movs	r3, #2
 8014436:	607b      	str	r3, [r7, #4]
 8014438:	e001      	b.n	801443e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801443a:	2300      	movs	r3, #0
 801443c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801443e:	687b      	ldr	r3, [r7, #4]
	}
 8014440:	4618      	mov	r0, r3
 8014442:	370c      	adds	r7, #12
 8014444:	46bd      	mov	sp, r7
 8014446:	f85d 7b04 	ldr.w	r7, [sp], #4
 801444a:	4770      	bx	lr
 801444c:	200022d8 	.word	0x200022d8
 8014450:	200022f4 	.word	0x200022f4

08014454 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8014454:	b580      	push	{r7, lr}
 8014456:	b086      	sub	sp, #24
 8014458:	af00      	add	r7, sp, #0
 801445a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801445c:	687b      	ldr	r3, [r7, #4]
 801445e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8014460:	2300      	movs	r3, #0
 8014462:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8014464:	687b      	ldr	r3, [r7, #4]
 8014466:	2b00      	cmp	r3, #0
 8014468:	d05f      	beq.n	801452a <xTaskPriorityDisinherit+0xd6>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801446a:	4b32      	ldr	r3, [pc, #200]	; (8014534 <xTaskPriorityDisinherit+0xe0>)
 801446c:	681b      	ldr	r3, [r3, #0]
 801446e:	693a      	ldr	r2, [r7, #16]
 8014470:	429a      	cmp	r2, r3
 8014472:	d00a      	beq.n	801448a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8014474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014478:	f383 8811 	msr	BASEPRI, r3
 801447c:	f3bf 8f6f 	isb	sy
 8014480:	f3bf 8f4f 	dsb	sy
 8014484:	60fb      	str	r3, [r7, #12]
}
 8014486:	bf00      	nop
 8014488:	e7fe      	b.n	8014488 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801448a:	693b      	ldr	r3, [r7, #16]
 801448c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801448e:	2b00      	cmp	r3, #0
 8014490:	d10a      	bne.n	80144a8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8014492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014496:	f383 8811 	msr	BASEPRI, r3
 801449a:	f3bf 8f6f 	isb	sy
 801449e:	f3bf 8f4f 	dsb	sy
 80144a2:	60bb      	str	r3, [r7, #8]
}
 80144a4:	bf00      	nop
 80144a6:	e7fe      	b.n	80144a6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80144a8:	693b      	ldr	r3, [r7, #16]
 80144aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80144ac:	1e5a      	subs	r2, r3, #1
 80144ae:	693b      	ldr	r3, [r7, #16]
 80144b0:	661a      	str	r2, [r3, #96]	; 0x60

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80144b2:	693b      	ldr	r3, [r7, #16]
 80144b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80144b6:	693b      	ldr	r3, [r7, #16]
 80144b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80144ba:	429a      	cmp	r2, r3
 80144bc:	d035      	beq.n	801452a <xTaskPriorityDisinherit+0xd6>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80144be:	693b      	ldr	r3, [r7, #16]
 80144c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80144c2:	2b00      	cmp	r3, #0
 80144c4:	d131      	bne.n	801452a <xTaskPriorityDisinherit+0xd6>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80144c6:	693b      	ldr	r3, [r7, #16]
 80144c8:	3304      	adds	r3, #4
 80144ca:	4618      	mov	r0, r3
 80144cc:	f7fe faaa 	bl	8012a24 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 80144d0:	687b      	ldr	r3, [r7, #4]
 80144d2:	4619      	mov	r1, r3
 80144d4:	204a      	movs	r0, #74	; 0x4a
 80144d6:	f001 fc59 	bl	8015d8c <SEGGER_SYSVIEW_RecordU32>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80144da:	693b      	ldr	r3, [r7, #16]
 80144dc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80144de:	693b      	ldr	r3, [r7, #16]
 80144e0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80144e2:	693b      	ldr	r3, [r7, #16]
 80144e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80144e6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80144ea:	693b      	ldr	r3, [r7, #16]
 80144ec:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80144ee:	693b      	ldr	r3, [r7, #16]
 80144f0:	4618      	mov	r0, r3
 80144f2:	f002 f951 	bl	8016798 <SEGGER_SYSVIEW_OnTaskStartReady>
 80144f6:	693b      	ldr	r3, [r7, #16]
 80144f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80144fa:	4b0f      	ldr	r3, [pc, #60]	; (8014538 <xTaskPriorityDisinherit+0xe4>)
 80144fc:	681b      	ldr	r3, [r3, #0]
 80144fe:	429a      	cmp	r2, r3
 8014500:	d903      	bls.n	801450a <xTaskPriorityDisinherit+0xb6>
 8014502:	693b      	ldr	r3, [r7, #16]
 8014504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014506:	4a0c      	ldr	r2, [pc, #48]	; (8014538 <xTaskPriorityDisinherit+0xe4>)
 8014508:	6013      	str	r3, [r2, #0]
 801450a:	693b      	ldr	r3, [r7, #16]
 801450c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801450e:	4613      	mov	r3, r2
 8014510:	009b      	lsls	r3, r3, #2
 8014512:	4413      	add	r3, r2
 8014514:	009b      	lsls	r3, r3, #2
 8014516:	4a09      	ldr	r2, [pc, #36]	; (801453c <xTaskPriorityDisinherit+0xe8>)
 8014518:	441a      	add	r2, r3
 801451a:	693b      	ldr	r3, [r7, #16]
 801451c:	3304      	adds	r3, #4
 801451e:	4619      	mov	r1, r3
 8014520:	4610      	mov	r0, r2
 8014522:	f7fe fa22 	bl	801296a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8014526:	2301      	movs	r3, #1
 8014528:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801452a:	697b      	ldr	r3, [r7, #20]
	}
 801452c:	4618      	mov	r0, r3
 801452e:	3718      	adds	r7, #24
 8014530:	46bd      	mov	sp, r7
 8014532:	bd80      	pop	{r7, pc}
 8014534:	20001df8 	.word	0x20001df8
 8014538:	200022d4 	.word	0x200022d4
 801453c:	20001dfc 	.word	0x20001dfc

08014540 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8014540:	b580      	push	{r7, lr}
 8014542:	b084      	sub	sp, #16
 8014544:	af00      	add	r7, sp, #0
 8014546:	6078      	str	r0, [r7, #4]
 8014548:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801454a:	4b21      	ldr	r3, [pc, #132]	; (80145d0 <prvAddCurrentTaskToDelayedList+0x90>)
 801454c:	681b      	ldr	r3, [r3, #0]
 801454e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014550:	4b20      	ldr	r3, [pc, #128]	; (80145d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8014552:	681b      	ldr	r3, [r3, #0]
 8014554:	3304      	adds	r3, #4
 8014556:	4618      	mov	r0, r3
 8014558:	f7fe fa64 	bl	8012a24 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801455c:	687b      	ldr	r3, [r7, #4]
 801455e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014562:	d10a      	bne.n	801457a <prvAddCurrentTaskToDelayedList+0x3a>
 8014564:	683b      	ldr	r3, [r7, #0]
 8014566:	2b00      	cmp	r3, #0
 8014568:	d007      	beq.n	801457a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801456a:	4b1a      	ldr	r3, [pc, #104]	; (80145d4 <prvAddCurrentTaskToDelayedList+0x94>)
 801456c:	681b      	ldr	r3, [r3, #0]
 801456e:	3304      	adds	r3, #4
 8014570:	4619      	mov	r1, r3
 8014572:	4819      	ldr	r0, [pc, #100]	; (80145d8 <prvAddCurrentTaskToDelayedList+0x98>)
 8014574:	f7fe f9f9 	bl	801296a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8014578:	e026      	b.n	80145c8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801457a:	68fa      	ldr	r2, [r7, #12]
 801457c:	687b      	ldr	r3, [r7, #4]
 801457e:	4413      	add	r3, r2
 8014580:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8014582:	4b14      	ldr	r3, [pc, #80]	; (80145d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8014584:	681b      	ldr	r3, [r3, #0]
 8014586:	68ba      	ldr	r2, [r7, #8]
 8014588:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801458a:	68ba      	ldr	r2, [r7, #8]
 801458c:	68fb      	ldr	r3, [r7, #12]
 801458e:	429a      	cmp	r2, r3
 8014590:	d209      	bcs.n	80145a6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014592:	4b12      	ldr	r3, [pc, #72]	; (80145dc <prvAddCurrentTaskToDelayedList+0x9c>)
 8014594:	681a      	ldr	r2, [r3, #0]
 8014596:	4b0f      	ldr	r3, [pc, #60]	; (80145d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8014598:	681b      	ldr	r3, [r3, #0]
 801459a:	3304      	adds	r3, #4
 801459c:	4619      	mov	r1, r3
 801459e:	4610      	mov	r0, r2
 80145a0:	f7fe fa07 	bl	80129b2 <vListInsert>
}
 80145a4:	e010      	b.n	80145c8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80145a6:	4b0e      	ldr	r3, [pc, #56]	; (80145e0 <prvAddCurrentTaskToDelayedList+0xa0>)
 80145a8:	681a      	ldr	r2, [r3, #0]
 80145aa:	4b0a      	ldr	r3, [pc, #40]	; (80145d4 <prvAddCurrentTaskToDelayedList+0x94>)
 80145ac:	681b      	ldr	r3, [r3, #0]
 80145ae:	3304      	adds	r3, #4
 80145b0:	4619      	mov	r1, r3
 80145b2:	4610      	mov	r0, r2
 80145b4:	f7fe f9fd 	bl	80129b2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80145b8:	4b0a      	ldr	r3, [pc, #40]	; (80145e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80145ba:	681b      	ldr	r3, [r3, #0]
 80145bc:	68ba      	ldr	r2, [r7, #8]
 80145be:	429a      	cmp	r2, r3
 80145c0:	d202      	bcs.n	80145c8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80145c2:	4a08      	ldr	r2, [pc, #32]	; (80145e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80145c4:	68bb      	ldr	r3, [r7, #8]
 80145c6:	6013      	str	r3, [r2, #0]
}
 80145c8:	bf00      	nop
 80145ca:	3710      	adds	r7, #16
 80145cc:	46bd      	mov	sp, r7
 80145ce:	bd80      	pop	{r7, pc}
 80145d0:	200022d0 	.word	0x200022d0
 80145d4:	20001df8 	.word	0x20001df8
 80145d8:	200022b8 	.word	0x200022b8
 80145dc:	20002288 	.word	0x20002288
 80145e0:	20002284 	.word	0x20002284
 80145e4:	200022ec 	.word	0x200022ec

080145e8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80145e8:	b580      	push	{r7, lr}
 80145ea:	b08a      	sub	sp, #40	; 0x28
 80145ec:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80145ee:	2300      	movs	r3, #0
 80145f0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80145f2:	f000 fb07 	bl	8014c04 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80145f6:	4b1c      	ldr	r3, [pc, #112]	; (8014668 <xTimerCreateTimerTask+0x80>)
 80145f8:	681b      	ldr	r3, [r3, #0]
 80145fa:	2b00      	cmp	r3, #0
 80145fc:	d021      	beq.n	8014642 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80145fe:	2300      	movs	r3, #0
 8014600:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8014602:	2300      	movs	r3, #0
 8014604:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8014606:	1d3a      	adds	r2, r7, #4
 8014608:	f107 0108 	add.w	r1, r7, #8
 801460c:	f107 030c 	add.w	r3, r7, #12
 8014610:	4618      	mov	r0, r3
 8014612:	f7fe f963 	bl	80128dc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8014616:	6879      	ldr	r1, [r7, #4]
 8014618:	68bb      	ldr	r3, [r7, #8]
 801461a:	68fa      	ldr	r2, [r7, #12]
 801461c:	9202      	str	r2, [sp, #8]
 801461e:	9301      	str	r3, [sp, #4]
 8014620:	2302      	movs	r3, #2
 8014622:	9300      	str	r3, [sp, #0]
 8014624:	2300      	movs	r3, #0
 8014626:	460a      	mov	r2, r1
 8014628:	4910      	ldr	r1, [pc, #64]	; (801466c <xTimerCreateTimerTask+0x84>)
 801462a:	4811      	ldr	r0, [pc, #68]	; (8014670 <xTimerCreateTimerTask+0x88>)
 801462c:	f7fe ffc4 	bl	80135b8 <xTaskCreateStatic>
 8014630:	4603      	mov	r3, r0
 8014632:	4a10      	ldr	r2, [pc, #64]	; (8014674 <xTimerCreateTimerTask+0x8c>)
 8014634:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8014636:	4b0f      	ldr	r3, [pc, #60]	; (8014674 <xTimerCreateTimerTask+0x8c>)
 8014638:	681b      	ldr	r3, [r3, #0]
 801463a:	2b00      	cmp	r3, #0
 801463c:	d001      	beq.n	8014642 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801463e:	2301      	movs	r3, #1
 8014640:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8014642:	697b      	ldr	r3, [r7, #20]
 8014644:	2b00      	cmp	r3, #0
 8014646:	d10a      	bne.n	801465e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8014648:	f04f 0350 	mov.w	r3, #80	; 0x50
 801464c:	f383 8811 	msr	BASEPRI, r3
 8014650:	f3bf 8f6f 	isb	sy
 8014654:	f3bf 8f4f 	dsb	sy
 8014658:	613b      	str	r3, [r7, #16]
}
 801465a:	bf00      	nop
 801465c:	e7fe      	b.n	801465c <xTimerCreateTimerTask+0x74>
	return xReturn;
 801465e:	697b      	ldr	r3, [r7, #20]
}
 8014660:	4618      	mov	r0, r3
 8014662:	3718      	adds	r7, #24
 8014664:	46bd      	mov	sp, r7
 8014666:	bd80      	pop	{r7, pc}
 8014668:	20002328 	.word	0x20002328
 801466c:	08017898 	.word	0x08017898
 8014670:	080147ad 	.word	0x080147ad
 8014674:	2000232c 	.word	0x2000232c

08014678 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8014678:	b580      	push	{r7, lr}
 801467a:	b08a      	sub	sp, #40	; 0x28
 801467c:	af00      	add	r7, sp, #0
 801467e:	60f8      	str	r0, [r7, #12]
 8014680:	60b9      	str	r1, [r7, #8]
 8014682:	607a      	str	r2, [r7, #4]
 8014684:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8014686:	2300      	movs	r3, #0
 8014688:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801468a:	68fb      	ldr	r3, [r7, #12]
 801468c:	2b00      	cmp	r3, #0
 801468e:	d10a      	bne.n	80146a6 <xTimerGenericCommand+0x2e>
	__asm volatile
 8014690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014694:	f383 8811 	msr	BASEPRI, r3
 8014698:	f3bf 8f6f 	isb	sy
 801469c:	f3bf 8f4f 	dsb	sy
 80146a0:	623b      	str	r3, [r7, #32]
}
 80146a2:	bf00      	nop
 80146a4:	e7fe      	b.n	80146a4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80146a6:	4b1a      	ldr	r3, [pc, #104]	; (8014710 <xTimerGenericCommand+0x98>)
 80146a8:	681b      	ldr	r3, [r3, #0]
 80146aa:	2b00      	cmp	r3, #0
 80146ac:	d02a      	beq.n	8014704 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80146ae:	68bb      	ldr	r3, [r7, #8]
 80146b0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80146b2:	687b      	ldr	r3, [r7, #4]
 80146b4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80146b6:	68fb      	ldr	r3, [r7, #12]
 80146b8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80146ba:	68bb      	ldr	r3, [r7, #8]
 80146bc:	2b05      	cmp	r3, #5
 80146be:	dc18      	bgt.n	80146f2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80146c0:	f7ff feaa 	bl	8014418 <xTaskGetSchedulerState>
 80146c4:	4603      	mov	r3, r0
 80146c6:	2b02      	cmp	r3, #2
 80146c8:	d109      	bne.n	80146de <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80146ca:	4b11      	ldr	r3, [pc, #68]	; (8014710 <xTimerGenericCommand+0x98>)
 80146cc:	6818      	ldr	r0, [r3, #0]
 80146ce:	f107 0110 	add.w	r1, r7, #16
 80146d2:	2300      	movs	r3, #0
 80146d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80146d6:	f7fe fb13 	bl	8012d00 <xQueueGenericSend>
 80146da:	6278      	str	r0, [r7, #36]	; 0x24
 80146dc:	e012      	b.n	8014704 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80146de:	4b0c      	ldr	r3, [pc, #48]	; (8014710 <xTimerGenericCommand+0x98>)
 80146e0:	6818      	ldr	r0, [r3, #0]
 80146e2:	f107 0110 	add.w	r1, r7, #16
 80146e6:	2300      	movs	r3, #0
 80146e8:	2200      	movs	r2, #0
 80146ea:	f7fe fb09 	bl	8012d00 <xQueueGenericSend>
 80146ee:	6278      	str	r0, [r7, #36]	; 0x24
 80146f0:	e008      	b.n	8014704 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80146f2:	4b07      	ldr	r3, [pc, #28]	; (8014710 <xTimerGenericCommand+0x98>)
 80146f4:	6818      	ldr	r0, [r3, #0]
 80146f6:	f107 0110 	add.w	r1, r7, #16
 80146fa:	2300      	movs	r3, #0
 80146fc:	683a      	ldr	r2, [r7, #0]
 80146fe:	f7fe fc25 	bl	8012f4c <xQueueGenericSendFromISR>
 8014702:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8014704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8014706:	4618      	mov	r0, r3
 8014708:	3728      	adds	r7, #40	; 0x28
 801470a:	46bd      	mov	sp, r7
 801470c:	bd80      	pop	{r7, pc}
 801470e:	bf00      	nop
 8014710:	20002328 	.word	0x20002328

08014714 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8014714:	b580      	push	{r7, lr}
 8014716:	b088      	sub	sp, #32
 8014718:	af02      	add	r7, sp, #8
 801471a:	6078      	str	r0, [r7, #4]
 801471c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801471e:	4b22      	ldr	r3, [pc, #136]	; (80147a8 <prvProcessExpiredTimer+0x94>)
 8014720:	681b      	ldr	r3, [r3, #0]
 8014722:	68db      	ldr	r3, [r3, #12]
 8014724:	68db      	ldr	r3, [r3, #12]
 8014726:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014728:	697b      	ldr	r3, [r7, #20]
 801472a:	3304      	adds	r3, #4
 801472c:	4618      	mov	r0, r3
 801472e:	f7fe f979 	bl	8012a24 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8014732:	697b      	ldr	r3, [r7, #20]
 8014734:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014738:	f003 0304 	and.w	r3, r3, #4
 801473c:	2b00      	cmp	r3, #0
 801473e:	d022      	beq.n	8014786 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8014740:	697b      	ldr	r3, [r7, #20]
 8014742:	699a      	ldr	r2, [r3, #24]
 8014744:	687b      	ldr	r3, [r7, #4]
 8014746:	18d1      	adds	r1, r2, r3
 8014748:	687b      	ldr	r3, [r7, #4]
 801474a:	683a      	ldr	r2, [r7, #0]
 801474c:	6978      	ldr	r0, [r7, #20]
 801474e:	f000 f8d1 	bl	80148f4 <prvInsertTimerInActiveList>
 8014752:	4603      	mov	r3, r0
 8014754:	2b00      	cmp	r3, #0
 8014756:	d01f      	beq.n	8014798 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8014758:	2300      	movs	r3, #0
 801475a:	9300      	str	r3, [sp, #0]
 801475c:	2300      	movs	r3, #0
 801475e:	687a      	ldr	r2, [r7, #4]
 8014760:	2100      	movs	r1, #0
 8014762:	6978      	ldr	r0, [r7, #20]
 8014764:	f7ff ff88 	bl	8014678 <xTimerGenericCommand>
 8014768:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801476a:	693b      	ldr	r3, [r7, #16]
 801476c:	2b00      	cmp	r3, #0
 801476e:	d113      	bne.n	8014798 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8014770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014774:	f383 8811 	msr	BASEPRI, r3
 8014778:	f3bf 8f6f 	isb	sy
 801477c:	f3bf 8f4f 	dsb	sy
 8014780:	60fb      	str	r3, [r7, #12]
}
 8014782:	bf00      	nop
 8014784:	e7fe      	b.n	8014784 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8014786:	697b      	ldr	r3, [r7, #20]
 8014788:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801478c:	f023 0301 	bic.w	r3, r3, #1
 8014790:	b2da      	uxtb	r2, r3
 8014792:	697b      	ldr	r3, [r7, #20]
 8014794:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8014798:	697b      	ldr	r3, [r7, #20]
 801479a:	6a1b      	ldr	r3, [r3, #32]
 801479c:	6978      	ldr	r0, [r7, #20]
 801479e:	4798      	blx	r3
}
 80147a0:	bf00      	nop
 80147a2:	3718      	adds	r7, #24
 80147a4:	46bd      	mov	sp, r7
 80147a6:	bd80      	pop	{r7, pc}
 80147a8:	20002320 	.word	0x20002320

080147ac <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80147ac:	b580      	push	{r7, lr}
 80147ae:	b084      	sub	sp, #16
 80147b0:	af00      	add	r7, sp, #0
 80147b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80147b4:	f107 0308 	add.w	r3, r7, #8
 80147b8:	4618      	mov	r0, r3
 80147ba:	f000 f857 	bl	801486c <prvGetNextExpireTime>
 80147be:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80147c0:	68bb      	ldr	r3, [r7, #8]
 80147c2:	4619      	mov	r1, r3
 80147c4:	68f8      	ldr	r0, [r7, #12]
 80147c6:	f000 f803 	bl	80147d0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80147ca:	f000 f8d5 	bl	8014978 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80147ce:	e7f1      	b.n	80147b4 <prvTimerTask+0x8>

080147d0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80147d0:	b580      	push	{r7, lr}
 80147d2:	b084      	sub	sp, #16
 80147d4:	af00      	add	r7, sp, #0
 80147d6:	6078      	str	r0, [r7, #4]
 80147d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80147da:	f7ff f9c5 	bl	8013b68 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80147de:	f107 0308 	add.w	r3, r7, #8
 80147e2:	4618      	mov	r0, r3
 80147e4:	f000 f866 	bl	80148b4 <prvSampleTimeNow>
 80147e8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80147ea:	68bb      	ldr	r3, [r7, #8]
 80147ec:	2b00      	cmp	r3, #0
 80147ee:	d130      	bne.n	8014852 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80147f0:	683b      	ldr	r3, [r7, #0]
 80147f2:	2b00      	cmp	r3, #0
 80147f4:	d10a      	bne.n	801480c <prvProcessTimerOrBlockTask+0x3c>
 80147f6:	687a      	ldr	r2, [r7, #4]
 80147f8:	68fb      	ldr	r3, [r7, #12]
 80147fa:	429a      	cmp	r2, r3
 80147fc:	d806      	bhi.n	801480c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80147fe:	f7ff f9c1 	bl	8013b84 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8014802:	68f9      	ldr	r1, [r7, #12]
 8014804:	6878      	ldr	r0, [r7, #4]
 8014806:	f7ff ff85 	bl	8014714 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801480a:	e024      	b.n	8014856 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 801480c:	683b      	ldr	r3, [r7, #0]
 801480e:	2b00      	cmp	r3, #0
 8014810:	d008      	beq.n	8014824 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8014812:	4b13      	ldr	r3, [pc, #76]	; (8014860 <prvProcessTimerOrBlockTask+0x90>)
 8014814:	681b      	ldr	r3, [r3, #0]
 8014816:	681b      	ldr	r3, [r3, #0]
 8014818:	2b00      	cmp	r3, #0
 801481a:	d101      	bne.n	8014820 <prvProcessTimerOrBlockTask+0x50>
 801481c:	2301      	movs	r3, #1
 801481e:	e000      	b.n	8014822 <prvProcessTimerOrBlockTask+0x52>
 8014820:	2300      	movs	r3, #0
 8014822:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8014824:	4b0f      	ldr	r3, [pc, #60]	; (8014864 <prvProcessTimerOrBlockTask+0x94>)
 8014826:	6818      	ldr	r0, [r3, #0]
 8014828:	687a      	ldr	r2, [r7, #4]
 801482a:	68fb      	ldr	r3, [r7, #12]
 801482c:	1ad3      	subs	r3, r2, r3
 801482e:	683a      	ldr	r2, [r7, #0]
 8014830:	4619      	mov	r1, r3
 8014832:	f7fe fe8d 	bl	8013550 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8014836:	f7ff f9a5 	bl	8013b84 <xTaskResumeAll>
 801483a:	4603      	mov	r3, r0
 801483c:	2b00      	cmp	r3, #0
 801483e:	d10a      	bne.n	8014856 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8014840:	4b09      	ldr	r3, [pc, #36]	; (8014868 <prvProcessTimerOrBlockTask+0x98>)
 8014842:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014846:	601a      	str	r2, [r3, #0]
 8014848:	f3bf 8f4f 	dsb	sy
 801484c:	f3bf 8f6f 	isb	sy
}
 8014850:	e001      	b.n	8014856 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8014852:	f7ff f997 	bl	8013b84 <xTaskResumeAll>
}
 8014856:	bf00      	nop
 8014858:	3710      	adds	r7, #16
 801485a:	46bd      	mov	sp, r7
 801485c:	bd80      	pop	{r7, pc}
 801485e:	bf00      	nop
 8014860:	20002324 	.word	0x20002324
 8014864:	20002328 	.word	0x20002328
 8014868:	e000ed04 	.word	0xe000ed04

0801486c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801486c:	b480      	push	{r7}
 801486e:	b085      	sub	sp, #20
 8014870:	af00      	add	r7, sp, #0
 8014872:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8014874:	4b0e      	ldr	r3, [pc, #56]	; (80148b0 <prvGetNextExpireTime+0x44>)
 8014876:	681b      	ldr	r3, [r3, #0]
 8014878:	681b      	ldr	r3, [r3, #0]
 801487a:	2b00      	cmp	r3, #0
 801487c:	d101      	bne.n	8014882 <prvGetNextExpireTime+0x16>
 801487e:	2201      	movs	r2, #1
 8014880:	e000      	b.n	8014884 <prvGetNextExpireTime+0x18>
 8014882:	2200      	movs	r2, #0
 8014884:	687b      	ldr	r3, [r7, #4]
 8014886:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8014888:	687b      	ldr	r3, [r7, #4]
 801488a:	681b      	ldr	r3, [r3, #0]
 801488c:	2b00      	cmp	r3, #0
 801488e:	d105      	bne.n	801489c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8014890:	4b07      	ldr	r3, [pc, #28]	; (80148b0 <prvGetNextExpireTime+0x44>)
 8014892:	681b      	ldr	r3, [r3, #0]
 8014894:	68db      	ldr	r3, [r3, #12]
 8014896:	681b      	ldr	r3, [r3, #0]
 8014898:	60fb      	str	r3, [r7, #12]
 801489a:	e001      	b.n	80148a0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801489c:	2300      	movs	r3, #0
 801489e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80148a0:	68fb      	ldr	r3, [r7, #12]
}
 80148a2:	4618      	mov	r0, r3
 80148a4:	3714      	adds	r7, #20
 80148a6:	46bd      	mov	sp, r7
 80148a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148ac:	4770      	bx	lr
 80148ae:	bf00      	nop
 80148b0:	20002320 	.word	0x20002320

080148b4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80148b4:	b580      	push	{r7, lr}
 80148b6:	b084      	sub	sp, #16
 80148b8:	af00      	add	r7, sp, #0
 80148ba:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80148bc:	f7ff fa04 	bl	8013cc8 <xTaskGetTickCount>
 80148c0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80148c2:	4b0b      	ldr	r3, [pc, #44]	; (80148f0 <prvSampleTimeNow+0x3c>)
 80148c4:	681b      	ldr	r3, [r3, #0]
 80148c6:	68fa      	ldr	r2, [r7, #12]
 80148c8:	429a      	cmp	r2, r3
 80148ca:	d205      	bcs.n	80148d8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80148cc:	f000 f936 	bl	8014b3c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80148d0:	687b      	ldr	r3, [r7, #4]
 80148d2:	2201      	movs	r2, #1
 80148d4:	601a      	str	r2, [r3, #0]
 80148d6:	e002      	b.n	80148de <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80148d8:	687b      	ldr	r3, [r7, #4]
 80148da:	2200      	movs	r2, #0
 80148dc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80148de:	4a04      	ldr	r2, [pc, #16]	; (80148f0 <prvSampleTimeNow+0x3c>)
 80148e0:	68fb      	ldr	r3, [r7, #12]
 80148e2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80148e4:	68fb      	ldr	r3, [r7, #12]
}
 80148e6:	4618      	mov	r0, r3
 80148e8:	3710      	adds	r7, #16
 80148ea:	46bd      	mov	sp, r7
 80148ec:	bd80      	pop	{r7, pc}
 80148ee:	bf00      	nop
 80148f0:	20002330 	.word	0x20002330

080148f4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80148f4:	b580      	push	{r7, lr}
 80148f6:	b086      	sub	sp, #24
 80148f8:	af00      	add	r7, sp, #0
 80148fa:	60f8      	str	r0, [r7, #12]
 80148fc:	60b9      	str	r1, [r7, #8]
 80148fe:	607a      	str	r2, [r7, #4]
 8014900:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8014902:	2300      	movs	r3, #0
 8014904:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8014906:	68fb      	ldr	r3, [r7, #12]
 8014908:	68ba      	ldr	r2, [r7, #8]
 801490a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801490c:	68fb      	ldr	r3, [r7, #12]
 801490e:	68fa      	ldr	r2, [r7, #12]
 8014910:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8014912:	68ba      	ldr	r2, [r7, #8]
 8014914:	687b      	ldr	r3, [r7, #4]
 8014916:	429a      	cmp	r2, r3
 8014918:	d812      	bhi.n	8014940 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801491a:	687a      	ldr	r2, [r7, #4]
 801491c:	683b      	ldr	r3, [r7, #0]
 801491e:	1ad2      	subs	r2, r2, r3
 8014920:	68fb      	ldr	r3, [r7, #12]
 8014922:	699b      	ldr	r3, [r3, #24]
 8014924:	429a      	cmp	r2, r3
 8014926:	d302      	bcc.n	801492e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8014928:	2301      	movs	r3, #1
 801492a:	617b      	str	r3, [r7, #20]
 801492c:	e01b      	b.n	8014966 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801492e:	4b10      	ldr	r3, [pc, #64]	; (8014970 <prvInsertTimerInActiveList+0x7c>)
 8014930:	681a      	ldr	r2, [r3, #0]
 8014932:	68fb      	ldr	r3, [r7, #12]
 8014934:	3304      	adds	r3, #4
 8014936:	4619      	mov	r1, r3
 8014938:	4610      	mov	r0, r2
 801493a:	f7fe f83a 	bl	80129b2 <vListInsert>
 801493e:	e012      	b.n	8014966 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8014940:	687a      	ldr	r2, [r7, #4]
 8014942:	683b      	ldr	r3, [r7, #0]
 8014944:	429a      	cmp	r2, r3
 8014946:	d206      	bcs.n	8014956 <prvInsertTimerInActiveList+0x62>
 8014948:	68ba      	ldr	r2, [r7, #8]
 801494a:	683b      	ldr	r3, [r7, #0]
 801494c:	429a      	cmp	r2, r3
 801494e:	d302      	bcc.n	8014956 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8014950:	2301      	movs	r3, #1
 8014952:	617b      	str	r3, [r7, #20]
 8014954:	e007      	b.n	8014966 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8014956:	4b07      	ldr	r3, [pc, #28]	; (8014974 <prvInsertTimerInActiveList+0x80>)
 8014958:	681a      	ldr	r2, [r3, #0]
 801495a:	68fb      	ldr	r3, [r7, #12]
 801495c:	3304      	adds	r3, #4
 801495e:	4619      	mov	r1, r3
 8014960:	4610      	mov	r0, r2
 8014962:	f7fe f826 	bl	80129b2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8014966:	697b      	ldr	r3, [r7, #20]
}
 8014968:	4618      	mov	r0, r3
 801496a:	3718      	adds	r7, #24
 801496c:	46bd      	mov	sp, r7
 801496e:	bd80      	pop	{r7, pc}
 8014970:	20002324 	.word	0x20002324
 8014974:	20002320 	.word	0x20002320

08014978 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8014978:	b580      	push	{r7, lr}
 801497a:	b08e      	sub	sp, #56	; 0x38
 801497c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801497e:	e0ca      	b.n	8014b16 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8014980:	687b      	ldr	r3, [r7, #4]
 8014982:	2b00      	cmp	r3, #0
 8014984:	da18      	bge.n	80149b8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8014986:	1d3b      	adds	r3, r7, #4
 8014988:	3304      	adds	r3, #4
 801498a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 801498c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801498e:	2b00      	cmp	r3, #0
 8014990:	d10a      	bne.n	80149a8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8014992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014996:	f383 8811 	msr	BASEPRI, r3
 801499a:	f3bf 8f6f 	isb	sy
 801499e:	f3bf 8f4f 	dsb	sy
 80149a2:	61fb      	str	r3, [r7, #28]
}
 80149a4:	bf00      	nop
 80149a6:	e7fe      	b.n	80149a6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80149a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149aa:	681b      	ldr	r3, [r3, #0]
 80149ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80149ae:	6850      	ldr	r0, [r2, #4]
 80149b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80149b2:	6892      	ldr	r2, [r2, #8]
 80149b4:	4611      	mov	r1, r2
 80149b6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80149b8:	687b      	ldr	r3, [r7, #4]
 80149ba:	2b00      	cmp	r3, #0
 80149bc:	f2c0 80aa 	blt.w	8014b14 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80149c0:	68fb      	ldr	r3, [r7, #12]
 80149c2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80149c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149c6:	695b      	ldr	r3, [r3, #20]
 80149c8:	2b00      	cmp	r3, #0
 80149ca:	d004      	beq.n	80149d6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80149cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149ce:	3304      	adds	r3, #4
 80149d0:	4618      	mov	r0, r3
 80149d2:	f7fe f827 	bl	8012a24 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80149d6:	463b      	mov	r3, r7
 80149d8:	4618      	mov	r0, r3
 80149da:	f7ff ff6b 	bl	80148b4 <prvSampleTimeNow>
 80149de:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80149e0:	687b      	ldr	r3, [r7, #4]
 80149e2:	2b09      	cmp	r3, #9
 80149e4:	f200 8097 	bhi.w	8014b16 <prvProcessReceivedCommands+0x19e>
 80149e8:	a201      	add	r2, pc, #4	; (adr r2, 80149f0 <prvProcessReceivedCommands+0x78>)
 80149ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80149ee:	bf00      	nop
 80149f0:	08014a19 	.word	0x08014a19
 80149f4:	08014a19 	.word	0x08014a19
 80149f8:	08014a19 	.word	0x08014a19
 80149fc:	08014a8d 	.word	0x08014a8d
 8014a00:	08014aa1 	.word	0x08014aa1
 8014a04:	08014aeb 	.word	0x08014aeb
 8014a08:	08014a19 	.word	0x08014a19
 8014a0c:	08014a19 	.word	0x08014a19
 8014a10:	08014a8d 	.word	0x08014a8d
 8014a14:	08014aa1 	.word	0x08014aa1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8014a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a1a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014a1e:	f043 0301 	orr.w	r3, r3, #1
 8014a22:	b2da      	uxtb	r2, r3
 8014a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8014a2a:	68ba      	ldr	r2, [r7, #8]
 8014a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a2e:	699b      	ldr	r3, [r3, #24]
 8014a30:	18d1      	adds	r1, r2, r3
 8014a32:	68bb      	ldr	r3, [r7, #8]
 8014a34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014a36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014a38:	f7ff ff5c 	bl	80148f4 <prvInsertTimerInActiveList>
 8014a3c:	4603      	mov	r3, r0
 8014a3e:	2b00      	cmp	r3, #0
 8014a40:	d069      	beq.n	8014b16 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8014a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a44:	6a1b      	ldr	r3, [r3, #32]
 8014a46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014a48:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8014a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014a50:	f003 0304 	and.w	r3, r3, #4
 8014a54:	2b00      	cmp	r3, #0
 8014a56:	d05e      	beq.n	8014b16 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8014a58:	68ba      	ldr	r2, [r7, #8]
 8014a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a5c:	699b      	ldr	r3, [r3, #24]
 8014a5e:	441a      	add	r2, r3
 8014a60:	2300      	movs	r3, #0
 8014a62:	9300      	str	r3, [sp, #0]
 8014a64:	2300      	movs	r3, #0
 8014a66:	2100      	movs	r1, #0
 8014a68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014a6a:	f7ff fe05 	bl	8014678 <xTimerGenericCommand>
 8014a6e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8014a70:	6a3b      	ldr	r3, [r7, #32]
 8014a72:	2b00      	cmp	r3, #0
 8014a74:	d14f      	bne.n	8014b16 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8014a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a7a:	f383 8811 	msr	BASEPRI, r3
 8014a7e:	f3bf 8f6f 	isb	sy
 8014a82:	f3bf 8f4f 	dsb	sy
 8014a86:	61bb      	str	r3, [r7, #24]
}
 8014a88:	bf00      	nop
 8014a8a:	e7fe      	b.n	8014a8a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8014a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a8e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014a92:	f023 0301 	bic.w	r3, r3, #1
 8014a96:	b2da      	uxtb	r2, r3
 8014a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a9a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8014a9e:	e03a      	b.n	8014b16 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8014aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014aa2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014aa6:	f043 0301 	orr.w	r3, r3, #1
 8014aaa:	b2da      	uxtb	r2, r3
 8014aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014aae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8014ab2:	68ba      	ldr	r2, [r7, #8]
 8014ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ab6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8014ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014aba:	699b      	ldr	r3, [r3, #24]
 8014abc:	2b00      	cmp	r3, #0
 8014abe:	d10a      	bne.n	8014ad6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8014ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ac4:	f383 8811 	msr	BASEPRI, r3
 8014ac8:	f3bf 8f6f 	isb	sy
 8014acc:	f3bf 8f4f 	dsb	sy
 8014ad0:	617b      	str	r3, [r7, #20]
}
 8014ad2:	bf00      	nop
 8014ad4:	e7fe      	b.n	8014ad4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8014ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ad8:	699a      	ldr	r2, [r3, #24]
 8014ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014adc:	18d1      	adds	r1, r2, r3
 8014ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ae0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014ae2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014ae4:	f7ff ff06 	bl	80148f4 <prvInsertTimerInActiveList>
					break;
 8014ae8:	e015      	b.n	8014b16 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8014aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014aec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014af0:	f003 0302 	and.w	r3, r3, #2
 8014af4:	2b00      	cmp	r3, #0
 8014af6:	d103      	bne.n	8014b00 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8014af8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014afa:	f000 fbe1 	bl	80152c0 <vPortFree>
 8014afe:	e00a      	b.n	8014b16 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8014b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014b06:	f023 0301 	bic.w	r3, r3, #1
 8014b0a:	b2da      	uxtb	r2, r3
 8014b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8014b12:	e000      	b.n	8014b16 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8014b14:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8014b16:	4b08      	ldr	r3, [pc, #32]	; (8014b38 <prvProcessReceivedCommands+0x1c0>)
 8014b18:	681b      	ldr	r3, [r3, #0]
 8014b1a:	1d39      	adds	r1, r7, #4
 8014b1c:	2200      	movs	r2, #0
 8014b1e:	4618      	mov	r0, r3
 8014b20:	f7fe fac4 	bl	80130ac <xQueueReceive>
 8014b24:	4603      	mov	r3, r0
 8014b26:	2b00      	cmp	r3, #0
 8014b28:	f47f af2a 	bne.w	8014980 <prvProcessReceivedCommands+0x8>
	}
}
 8014b2c:	bf00      	nop
 8014b2e:	bf00      	nop
 8014b30:	3730      	adds	r7, #48	; 0x30
 8014b32:	46bd      	mov	sp, r7
 8014b34:	bd80      	pop	{r7, pc}
 8014b36:	bf00      	nop
 8014b38:	20002328 	.word	0x20002328

08014b3c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8014b3c:	b580      	push	{r7, lr}
 8014b3e:	b088      	sub	sp, #32
 8014b40:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8014b42:	e048      	b.n	8014bd6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8014b44:	4b2d      	ldr	r3, [pc, #180]	; (8014bfc <prvSwitchTimerLists+0xc0>)
 8014b46:	681b      	ldr	r3, [r3, #0]
 8014b48:	68db      	ldr	r3, [r3, #12]
 8014b4a:	681b      	ldr	r3, [r3, #0]
 8014b4c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014b4e:	4b2b      	ldr	r3, [pc, #172]	; (8014bfc <prvSwitchTimerLists+0xc0>)
 8014b50:	681b      	ldr	r3, [r3, #0]
 8014b52:	68db      	ldr	r3, [r3, #12]
 8014b54:	68db      	ldr	r3, [r3, #12]
 8014b56:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014b58:	68fb      	ldr	r3, [r7, #12]
 8014b5a:	3304      	adds	r3, #4
 8014b5c:	4618      	mov	r0, r3
 8014b5e:	f7fd ff61 	bl	8012a24 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8014b62:	68fb      	ldr	r3, [r7, #12]
 8014b64:	6a1b      	ldr	r3, [r3, #32]
 8014b66:	68f8      	ldr	r0, [r7, #12]
 8014b68:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8014b6a:	68fb      	ldr	r3, [r7, #12]
 8014b6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014b70:	f003 0304 	and.w	r3, r3, #4
 8014b74:	2b00      	cmp	r3, #0
 8014b76:	d02e      	beq.n	8014bd6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8014b78:	68fb      	ldr	r3, [r7, #12]
 8014b7a:	699b      	ldr	r3, [r3, #24]
 8014b7c:	693a      	ldr	r2, [r7, #16]
 8014b7e:	4413      	add	r3, r2
 8014b80:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8014b82:	68ba      	ldr	r2, [r7, #8]
 8014b84:	693b      	ldr	r3, [r7, #16]
 8014b86:	429a      	cmp	r2, r3
 8014b88:	d90e      	bls.n	8014ba8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8014b8a:	68fb      	ldr	r3, [r7, #12]
 8014b8c:	68ba      	ldr	r2, [r7, #8]
 8014b8e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8014b90:	68fb      	ldr	r3, [r7, #12]
 8014b92:	68fa      	ldr	r2, [r7, #12]
 8014b94:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8014b96:	4b19      	ldr	r3, [pc, #100]	; (8014bfc <prvSwitchTimerLists+0xc0>)
 8014b98:	681a      	ldr	r2, [r3, #0]
 8014b9a:	68fb      	ldr	r3, [r7, #12]
 8014b9c:	3304      	adds	r3, #4
 8014b9e:	4619      	mov	r1, r3
 8014ba0:	4610      	mov	r0, r2
 8014ba2:	f7fd ff06 	bl	80129b2 <vListInsert>
 8014ba6:	e016      	b.n	8014bd6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8014ba8:	2300      	movs	r3, #0
 8014baa:	9300      	str	r3, [sp, #0]
 8014bac:	2300      	movs	r3, #0
 8014bae:	693a      	ldr	r2, [r7, #16]
 8014bb0:	2100      	movs	r1, #0
 8014bb2:	68f8      	ldr	r0, [r7, #12]
 8014bb4:	f7ff fd60 	bl	8014678 <xTimerGenericCommand>
 8014bb8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8014bba:	687b      	ldr	r3, [r7, #4]
 8014bbc:	2b00      	cmp	r3, #0
 8014bbe:	d10a      	bne.n	8014bd6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8014bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014bc4:	f383 8811 	msr	BASEPRI, r3
 8014bc8:	f3bf 8f6f 	isb	sy
 8014bcc:	f3bf 8f4f 	dsb	sy
 8014bd0:	603b      	str	r3, [r7, #0]
}
 8014bd2:	bf00      	nop
 8014bd4:	e7fe      	b.n	8014bd4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8014bd6:	4b09      	ldr	r3, [pc, #36]	; (8014bfc <prvSwitchTimerLists+0xc0>)
 8014bd8:	681b      	ldr	r3, [r3, #0]
 8014bda:	681b      	ldr	r3, [r3, #0]
 8014bdc:	2b00      	cmp	r3, #0
 8014bde:	d1b1      	bne.n	8014b44 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8014be0:	4b06      	ldr	r3, [pc, #24]	; (8014bfc <prvSwitchTimerLists+0xc0>)
 8014be2:	681b      	ldr	r3, [r3, #0]
 8014be4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8014be6:	4b06      	ldr	r3, [pc, #24]	; (8014c00 <prvSwitchTimerLists+0xc4>)
 8014be8:	681b      	ldr	r3, [r3, #0]
 8014bea:	4a04      	ldr	r2, [pc, #16]	; (8014bfc <prvSwitchTimerLists+0xc0>)
 8014bec:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8014bee:	4a04      	ldr	r2, [pc, #16]	; (8014c00 <prvSwitchTimerLists+0xc4>)
 8014bf0:	697b      	ldr	r3, [r7, #20]
 8014bf2:	6013      	str	r3, [r2, #0]
}
 8014bf4:	bf00      	nop
 8014bf6:	3718      	adds	r7, #24
 8014bf8:	46bd      	mov	sp, r7
 8014bfa:	bd80      	pop	{r7, pc}
 8014bfc:	20002320 	.word	0x20002320
 8014c00:	20002324 	.word	0x20002324

08014c04 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8014c04:	b580      	push	{r7, lr}
 8014c06:	b082      	sub	sp, #8
 8014c08:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8014c0a:	f000 f96b 	bl	8014ee4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8014c0e:	4b15      	ldr	r3, [pc, #84]	; (8014c64 <prvCheckForValidListAndQueue+0x60>)
 8014c10:	681b      	ldr	r3, [r3, #0]
 8014c12:	2b00      	cmp	r3, #0
 8014c14:	d120      	bne.n	8014c58 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8014c16:	4814      	ldr	r0, [pc, #80]	; (8014c68 <prvCheckForValidListAndQueue+0x64>)
 8014c18:	f7fd fe7a 	bl	8012910 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8014c1c:	4813      	ldr	r0, [pc, #76]	; (8014c6c <prvCheckForValidListAndQueue+0x68>)
 8014c1e:	f7fd fe77 	bl	8012910 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8014c22:	4b13      	ldr	r3, [pc, #76]	; (8014c70 <prvCheckForValidListAndQueue+0x6c>)
 8014c24:	4a10      	ldr	r2, [pc, #64]	; (8014c68 <prvCheckForValidListAndQueue+0x64>)
 8014c26:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8014c28:	4b12      	ldr	r3, [pc, #72]	; (8014c74 <prvCheckForValidListAndQueue+0x70>)
 8014c2a:	4a10      	ldr	r2, [pc, #64]	; (8014c6c <prvCheckForValidListAndQueue+0x68>)
 8014c2c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8014c2e:	2300      	movs	r3, #0
 8014c30:	9300      	str	r3, [sp, #0]
 8014c32:	4b11      	ldr	r3, [pc, #68]	; (8014c78 <prvCheckForValidListAndQueue+0x74>)
 8014c34:	4a11      	ldr	r2, [pc, #68]	; (8014c7c <prvCheckForValidListAndQueue+0x78>)
 8014c36:	2110      	movs	r1, #16
 8014c38:	200a      	movs	r0, #10
 8014c3a:	f7fd ff85 	bl	8012b48 <xQueueGenericCreateStatic>
 8014c3e:	4603      	mov	r3, r0
 8014c40:	4a08      	ldr	r2, [pc, #32]	; (8014c64 <prvCheckForValidListAndQueue+0x60>)
 8014c42:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8014c44:	4b07      	ldr	r3, [pc, #28]	; (8014c64 <prvCheckForValidListAndQueue+0x60>)
 8014c46:	681b      	ldr	r3, [r3, #0]
 8014c48:	2b00      	cmp	r3, #0
 8014c4a:	d005      	beq.n	8014c58 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8014c4c:	4b05      	ldr	r3, [pc, #20]	; (8014c64 <prvCheckForValidListAndQueue+0x60>)
 8014c4e:	681b      	ldr	r3, [r3, #0]
 8014c50:	490b      	ldr	r1, [pc, #44]	; (8014c80 <prvCheckForValidListAndQueue+0x7c>)
 8014c52:	4618      	mov	r0, r3
 8014c54:	f7fe fc4a 	bl	80134ec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8014c58:	f000 f974 	bl	8014f44 <vPortExitCritical>
}
 8014c5c:	bf00      	nop
 8014c5e:	46bd      	mov	sp, r7
 8014c60:	bd80      	pop	{r7, pc}
 8014c62:	bf00      	nop
 8014c64:	20002328 	.word	0x20002328
 8014c68:	200022f8 	.word	0x200022f8
 8014c6c:	2000230c 	.word	0x2000230c
 8014c70:	20002320 	.word	0x20002320
 8014c74:	20002324 	.word	0x20002324
 8014c78:	200023d4 	.word	0x200023d4
 8014c7c:	20002334 	.word	0x20002334
 8014c80:	080178a0 	.word	0x080178a0

08014c84 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8014c84:	b480      	push	{r7}
 8014c86:	b085      	sub	sp, #20
 8014c88:	af00      	add	r7, sp, #0
 8014c8a:	60f8      	str	r0, [r7, #12]
 8014c8c:	60b9      	str	r1, [r7, #8]
 8014c8e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8014c90:	68fb      	ldr	r3, [r7, #12]
 8014c92:	3b04      	subs	r3, #4
 8014c94:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8014c96:	68fb      	ldr	r3, [r7, #12]
 8014c98:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8014c9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014c9e:	68fb      	ldr	r3, [r7, #12]
 8014ca0:	3b04      	subs	r3, #4
 8014ca2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8014ca4:	68bb      	ldr	r3, [r7, #8]
 8014ca6:	f023 0201 	bic.w	r2, r3, #1
 8014caa:	68fb      	ldr	r3, [r7, #12]
 8014cac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014cae:	68fb      	ldr	r3, [r7, #12]
 8014cb0:	3b04      	subs	r3, #4
 8014cb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8014cb4:	4a0c      	ldr	r2, [pc, #48]	; (8014ce8 <pxPortInitialiseStack+0x64>)
 8014cb6:	68fb      	ldr	r3, [r7, #12]
 8014cb8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8014cba:	68fb      	ldr	r3, [r7, #12]
 8014cbc:	3b14      	subs	r3, #20
 8014cbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8014cc0:	687a      	ldr	r2, [r7, #4]
 8014cc2:	68fb      	ldr	r3, [r7, #12]
 8014cc4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8014cc6:	68fb      	ldr	r3, [r7, #12]
 8014cc8:	3b04      	subs	r3, #4
 8014cca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8014ccc:	68fb      	ldr	r3, [r7, #12]
 8014cce:	f06f 0202 	mvn.w	r2, #2
 8014cd2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8014cd4:	68fb      	ldr	r3, [r7, #12]
 8014cd6:	3b20      	subs	r3, #32
 8014cd8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8014cda:	68fb      	ldr	r3, [r7, #12]
}
 8014cdc:	4618      	mov	r0, r3
 8014cde:	3714      	adds	r7, #20
 8014ce0:	46bd      	mov	sp, r7
 8014ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ce6:	4770      	bx	lr
 8014ce8:	08014ced 	.word	0x08014ced

08014cec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8014cec:	b480      	push	{r7}
 8014cee:	b085      	sub	sp, #20
 8014cf0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8014cf2:	2300      	movs	r3, #0
 8014cf4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8014cf6:	4b12      	ldr	r3, [pc, #72]	; (8014d40 <prvTaskExitError+0x54>)
 8014cf8:	681b      	ldr	r3, [r3, #0]
 8014cfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014cfe:	d00a      	beq.n	8014d16 <prvTaskExitError+0x2a>
	__asm volatile
 8014d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d04:	f383 8811 	msr	BASEPRI, r3
 8014d08:	f3bf 8f6f 	isb	sy
 8014d0c:	f3bf 8f4f 	dsb	sy
 8014d10:	60fb      	str	r3, [r7, #12]
}
 8014d12:	bf00      	nop
 8014d14:	e7fe      	b.n	8014d14 <prvTaskExitError+0x28>
	__asm volatile
 8014d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d1a:	f383 8811 	msr	BASEPRI, r3
 8014d1e:	f3bf 8f6f 	isb	sy
 8014d22:	f3bf 8f4f 	dsb	sy
 8014d26:	60bb      	str	r3, [r7, #8]
}
 8014d28:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8014d2a:	bf00      	nop
 8014d2c:	687b      	ldr	r3, [r7, #4]
 8014d2e:	2b00      	cmp	r3, #0
 8014d30:	d0fc      	beq.n	8014d2c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8014d32:	bf00      	nop
 8014d34:	bf00      	nop
 8014d36:	3714      	adds	r7, #20
 8014d38:	46bd      	mov	sp, r7
 8014d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d3e:	4770      	bx	lr
 8014d40:	200012e8 	.word	0x200012e8
	...

08014d50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8014d50:	4b07      	ldr	r3, [pc, #28]	; (8014d70 <pxCurrentTCBConst2>)
 8014d52:	6819      	ldr	r1, [r3, #0]
 8014d54:	6808      	ldr	r0, [r1, #0]
 8014d56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d5a:	f380 8809 	msr	PSP, r0
 8014d5e:	f3bf 8f6f 	isb	sy
 8014d62:	f04f 0000 	mov.w	r0, #0
 8014d66:	f380 8811 	msr	BASEPRI, r0
 8014d6a:	4770      	bx	lr
 8014d6c:	f3af 8000 	nop.w

08014d70 <pxCurrentTCBConst2>:
 8014d70:	20001df8 	.word	0x20001df8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8014d74:	bf00      	nop
 8014d76:	bf00      	nop

08014d78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8014d78:	4808      	ldr	r0, [pc, #32]	; (8014d9c <prvPortStartFirstTask+0x24>)
 8014d7a:	6800      	ldr	r0, [r0, #0]
 8014d7c:	6800      	ldr	r0, [r0, #0]
 8014d7e:	f380 8808 	msr	MSP, r0
 8014d82:	f04f 0000 	mov.w	r0, #0
 8014d86:	f380 8814 	msr	CONTROL, r0
 8014d8a:	b662      	cpsie	i
 8014d8c:	b661      	cpsie	f
 8014d8e:	f3bf 8f4f 	dsb	sy
 8014d92:	f3bf 8f6f 	isb	sy
 8014d96:	df00      	svc	0
 8014d98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8014d9a:	bf00      	nop
 8014d9c:	e000ed08 	.word	0xe000ed08

08014da0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8014da0:	b580      	push	{r7, lr}
 8014da2:	b086      	sub	sp, #24
 8014da4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8014da6:	4b46      	ldr	r3, [pc, #280]	; (8014ec0 <xPortStartScheduler+0x120>)
 8014da8:	681b      	ldr	r3, [r3, #0]
 8014daa:	4a46      	ldr	r2, [pc, #280]	; (8014ec4 <xPortStartScheduler+0x124>)
 8014dac:	4293      	cmp	r3, r2
 8014dae:	d10a      	bne.n	8014dc6 <xPortStartScheduler+0x26>
	__asm volatile
 8014db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014db4:	f383 8811 	msr	BASEPRI, r3
 8014db8:	f3bf 8f6f 	isb	sy
 8014dbc:	f3bf 8f4f 	dsb	sy
 8014dc0:	613b      	str	r3, [r7, #16]
}
 8014dc2:	bf00      	nop
 8014dc4:	e7fe      	b.n	8014dc4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8014dc6:	4b3e      	ldr	r3, [pc, #248]	; (8014ec0 <xPortStartScheduler+0x120>)
 8014dc8:	681b      	ldr	r3, [r3, #0]
 8014dca:	4a3f      	ldr	r2, [pc, #252]	; (8014ec8 <xPortStartScheduler+0x128>)
 8014dcc:	4293      	cmp	r3, r2
 8014dce:	d10a      	bne.n	8014de6 <xPortStartScheduler+0x46>
	__asm volatile
 8014dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014dd4:	f383 8811 	msr	BASEPRI, r3
 8014dd8:	f3bf 8f6f 	isb	sy
 8014ddc:	f3bf 8f4f 	dsb	sy
 8014de0:	60fb      	str	r3, [r7, #12]
}
 8014de2:	bf00      	nop
 8014de4:	e7fe      	b.n	8014de4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8014de6:	4b39      	ldr	r3, [pc, #228]	; (8014ecc <xPortStartScheduler+0x12c>)
 8014de8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8014dea:	697b      	ldr	r3, [r7, #20]
 8014dec:	781b      	ldrb	r3, [r3, #0]
 8014dee:	b2db      	uxtb	r3, r3
 8014df0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8014df2:	697b      	ldr	r3, [r7, #20]
 8014df4:	22ff      	movs	r2, #255	; 0xff
 8014df6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8014df8:	697b      	ldr	r3, [r7, #20]
 8014dfa:	781b      	ldrb	r3, [r3, #0]
 8014dfc:	b2db      	uxtb	r3, r3
 8014dfe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8014e00:	78fb      	ldrb	r3, [r7, #3]
 8014e02:	b2db      	uxtb	r3, r3
 8014e04:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8014e08:	b2da      	uxtb	r2, r3
 8014e0a:	4b31      	ldr	r3, [pc, #196]	; (8014ed0 <xPortStartScheduler+0x130>)
 8014e0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8014e0e:	4b31      	ldr	r3, [pc, #196]	; (8014ed4 <xPortStartScheduler+0x134>)
 8014e10:	2207      	movs	r2, #7
 8014e12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014e14:	e009      	b.n	8014e2a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8014e16:	4b2f      	ldr	r3, [pc, #188]	; (8014ed4 <xPortStartScheduler+0x134>)
 8014e18:	681b      	ldr	r3, [r3, #0]
 8014e1a:	3b01      	subs	r3, #1
 8014e1c:	4a2d      	ldr	r2, [pc, #180]	; (8014ed4 <xPortStartScheduler+0x134>)
 8014e1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8014e20:	78fb      	ldrb	r3, [r7, #3]
 8014e22:	b2db      	uxtb	r3, r3
 8014e24:	005b      	lsls	r3, r3, #1
 8014e26:	b2db      	uxtb	r3, r3
 8014e28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014e2a:	78fb      	ldrb	r3, [r7, #3]
 8014e2c:	b2db      	uxtb	r3, r3
 8014e2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014e32:	2b80      	cmp	r3, #128	; 0x80
 8014e34:	d0ef      	beq.n	8014e16 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8014e36:	4b27      	ldr	r3, [pc, #156]	; (8014ed4 <xPortStartScheduler+0x134>)
 8014e38:	681b      	ldr	r3, [r3, #0]
 8014e3a:	f1c3 0307 	rsb	r3, r3, #7
 8014e3e:	2b04      	cmp	r3, #4
 8014e40:	d00a      	beq.n	8014e58 <xPortStartScheduler+0xb8>
	__asm volatile
 8014e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e46:	f383 8811 	msr	BASEPRI, r3
 8014e4a:	f3bf 8f6f 	isb	sy
 8014e4e:	f3bf 8f4f 	dsb	sy
 8014e52:	60bb      	str	r3, [r7, #8]
}
 8014e54:	bf00      	nop
 8014e56:	e7fe      	b.n	8014e56 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8014e58:	4b1e      	ldr	r3, [pc, #120]	; (8014ed4 <xPortStartScheduler+0x134>)
 8014e5a:	681b      	ldr	r3, [r3, #0]
 8014e5c:	021b      	lsls	r3, r3, #8
 8014e5e:	4a1d      	ldr	r2, [pc, #116]	; (8014ed4 <xPortStartScheduler+0x134>)
 8014e60:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8014e62:	4b1c      	ldr	r3, [pc, #112]	; (8014ed4 <xPortStartScheduler+0x134>)
 8014e64:	681b      	ldr	r3, [r3, #0]
 8014e66:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8014e6a:	4a1a      	ldr	r2, [pc, #104]	; (8014ed4 <xPortStartScheduler+0x134>)
 8014e6c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8014e6e:	687b      	ldr	r3, [r7, #4]
 8014e70:	b2da      	uxtb	r2, r3
 8014e72:	697b      	ldr	r3, [r7, #20]
 8014e74:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8014e76:	4b18      	ldr	r3, [pc, #96]	; (8014ed8 <xPortStartScheduler+0x138>)
 8014e78:	681b      	ldr	r3, [r3, #0]
 8014e7a:	4a17      	ldr	r2, [pc, #92]	; (8014ed8 <xPortStartScheduler+0x138>)
 8014e7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8014e80:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8014e82:	4b15      	ldr	r3, [pc, #84]	; (8014ed8 <xPortStartScheduler+0x138>)
 8014e84:	681b      	ldr	r3, [r3, #0]
 8014e86:	4a14      	ldr	r2, [pc, #80]	; (8014ed8 <xPortStartScheduler+0x138>)
 8014e88:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8014e8c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8014e8e:	f000 f8dd 	bl	801504c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8014e92:	4b12      	ldr	r3, [pc, #72]	; (8014edc <xPortStartScheduler+0x13c>)
 8014e94:	2200      	movs	r2, #0
 8014e96:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8014e98:	f000 f8fc 	bl	8015094 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8014e9c:	4b10      	ldr	r3, [pc, #64]	; (8014ee0 <xPortStartScheduler+0x140>)
 8014e9e:	681b      	ldr	r3, [r3, #0]
 8014ea0:	4a0f      	ldr	r2, [pc, #60]	; (8014ee0 <xPortStartScheduler+0x140>)
 8014ea2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8014ea6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8014ea8:	f7ff ff66 	bl	8014d78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8014eac:	f7fe ffec 	bl	8013e88 <vTaskSwitchContext>
	prvTaskExitError();
 8014eb0:	f7ff ff1c 	bl	8014cec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8014eb4:	2300      	movs	r3, #0
}
 8014eb6:	4618      	mov	r0, r3
 8014eb8:	3718      	adds	r7, #24
 8014eba:	46bd      	mov	sp, r7
 8014ebc:	bd80      	pop	{r7, pc}
 8014ebe:	bf00      	nop
 8014ec0:	e000ed00 	.word	0xe000ed00
 8014ec4:	410fc271 	.word	0x410fc271
 8014ec8:	410fc270 	.word	0x410fc270
 8014ecc:	e000e400 	.word	0xe000e400
 8014ed0:	20002424 	.word	0x20002424
 8014ed4:	20002428 	.word	0x20002428
 8014ed8:	e000ed20 	.word	0xe000ed20
 8014edc:	200012e8 	.word	0x200012e8
 8014ee0:	e000ef34 	.word	0xe000ef34

08014ee4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8014ee4:	b480      	push	{r7}
 8014ee6:	b083      	sub	sp, #12
 8014ee8:	af00      	add	r7, sp, #0
	__asm volatile
 8014eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014eee:	f383 8811 	msr	BASEPRI, r3
 8014ef2:	f3bf 8f6f 	isb	sy
 8014ef6:	f3bf 8f4f 	dsb	sy
 8014efa:	607b      	str	r3, [r7, #4]
}
 8014efc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8014efe:	4b0f      	ldr	r3, [pc, #60]	; (8014f3c <vPortEnterCritical+0x58>)
 8014f00:	681b      	ldr	r3, [r3, #0]
 8014f02:	3301      	adds	r3, #1
 8014f04:	4a0d      	ldr	r2, [pc, #52]	; (8014f3c <vPortEnterCritical+0x58>)
 8014f06:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8014f08:	4b0c      	ldr	r3, [pc, #48]	; (8014f3c <vPortEnterCritical+0x58>)
 8014f0a:	681b      	ldr	r3, [r3, #0]
 8014f0c:	2b01      	cmp	r3, #1
 8014f0e:	d10f      	bne.n	8014f30 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8014f10:	4b0b      	ldr	r3, [pc, #44]	; (8014f40 <vPortEnterCritical+0x5c>)
 8014f12:	681b      	ldr	r3, [r3, #0]
 8014f14:	b2db      	uxtb	r3, r3
 8014f16:	2b00      	cmp	r3, #0
 8014f18:	d00a      	beq.n	8014f30 <vPortEnterCritical+0x4c>
	__asm volatile
 8014f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f1e:	f383 8811 	msr	BASEPRI, r3
 8014f22:	f3bf 8f6f 	isb	sy
 8014f26:	f3bf 8f4f 	dsb	sy
 8014f2a:	603b      	str	r3, [r7, #0]
}
 8014f2c:	bf00      	nop
 8014f2e:	e7fe      	b.n	8014f2e <vPortEnterCritical+0x4a>
	}
}
 8014f30:	bf00      	nop
 8014f32:	370c      	adds	r7, #12
 8014f34:	46bd      	mov	sp, r7
 8014f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f3a:	4770      	bx	lr
 8014f3c:	200012e8 	.word	0x200012e8
 8014f40:	e000ed04 	.word	0xe000ed04

08014f44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8014f44:	b480      	push	{r7}
 8014f46:	b083      	sub	sp, #12
 8014f48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8014f4a:	4b12      	ldr	r3, [pc, #72]	; (8014f94 <vPortExitCritical+0x50>)
 8014f4c:	681b      	ldr	r3, [r3, #0]
 8014f4e:	2b00      	cmp	r3, #0
 8014f50:	d10a      	bne.n	8014f68 <vPortExitCritical+0x24>
	__asm volatile
 8014f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f56:	f383 8811 	msr	BASEPRI, r3
 8014f5a:	f3bf 8f6f 	isb	sy
 8014f5e:	f3bf 8f4f 	dsb	sy
 8014f62:	607b      	str	r3, [r7, #4]
}
 8014f64:	bf00      	nop
 8014f66:	e7fe      	b.n	8014f66 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8014f68:	4b0a      	ldr	r3, [pc, #40]	; (8014f94 <vPortExitCritical+0x50>)
 8014f6a:	681b      	ldr	r3, [r3, #0]
 8014f6c:	3b01      	subs	r3, #1
 8014f6e:	4a09      	ldr	r2, [pc, #36]	; (8014f94 <vPortExitCritical+0x50>)
 8014f70:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8014f72:	4b08      	ldr	r3, [pc, #32]	; (8014f94 <vPortExitCritical+0x50>)
 8014f74:	681b      	ldr	r3, [r3, #0]
 8014f76:	2b00      	cmp	r3, #0
 8014f78:	d105      	bne.n	8014f86 <vPortExitCritical+0x42>
 8014f7a:	2300      	movs	r3, #0
 8014f7c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014f7e:	683b      	ldr	r3, [r7, #0]
 8014f80:	f383 8811 	msr	BASEPRI, r3
}
 8014f84:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8014f86:	bf00      	nop
 8014f88:	370c      	adds	r7, #12
 8014f8a:	46bd      	mov	sp, r7
 8014f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f90:	4770      	bx	lr
 8014f92:	bf00      	nop
 8014f94:	200012e8 	.word	0x200012e8
	...

08014fa0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8014fa0:	f3ef 8009 	mrs	r0, PSP
 8014fa4:	f3bf 8f6f 	isb	sy
 8014fa8:	4b15      	ldr	r3, [pc, #84]	; (8015000 <pxCurrentTCBConst>)
 8014faa:	681a      	ldr	r2, [r3, #0]
 8014fac:	f01e 0f10 	tst.w	lr, #16
 8014fb0:	bf08      	it	eq
 8014fb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8014fb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014fba:	6010      	str	r0, [r2, #0]
 8014fbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8014fc0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8014fc4:	f380 8811 	msr	BASEPRI, r0
 8014fc8:	f3bf 8f4f 	dsb	sy
 8014fcc:	f3bf 8f6f 	isb	sy
 8014fd0:	f7fe ff5a 	bl	8013e88 <vTaskSwitchContext>
 8014fd4:	f04f 0000 	mov.w	r0, #0
 8014fd8:	f380 8811 	msr	BASEPRI, r0
 8014fdc:	bc09      	pop	{r0, r3}
 8014fde:	6819      	ldr	r1, [r3, #0]
 8014fe0:	6808      	ldr	r0, [r1, #0]
 8014fe2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014fe6:	f01e 0f10 	tst.w	lr, #16
 8014fea:	bf08      	it	eq
 8014fec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8014ff0:	f380 8809 	msr	PSP, r0
 8014ff4:	f3bf 8f6f 	isb	sy
 8014ff8:	4770      	bx	lr
 8014ffa:	bf00      	nop
 8014ffc:	f3af 8000 	nop.w

08015000 <pxCurrentTCBConst>:
 8015000:	20001df8 	.word	0x20001df8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8015004:	bf00      	nop
 8015006:	bf00      	nop

08015008 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8015008:	b580      	push	{r7, lr}
 801500a:	b082      	sub	sp, #8
 801500c:	af00      	add	r7, sp, #0
	__asm volatile
 801500e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015012:	f383 8811 	msr	BASEPRI, r3
 8015016:	f3bf 8f6f 	isb	sy
 801501a:	f3bf 8f4f 	dsb	sy
 801501e:	607b      	str	r3, [r7, #4]
}
 8015020:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8015022:	f7fe fe73 	bl	8013d0c <xTaskIncrementTick>
 8015026:	4603      	mov	r3, r0
 8015028:	2b00      	cmp	r3, #0
 801502a:	d003      	beq.n	8015034 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801502c:	4b06      	ldr	r3, [pc, #24]	; (8015048 <xPortSysTickHandler+0x40>)
 801502e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015032:	601a      	str	r2, [r3, #0]
 8015034:	2300      	movs	r3, #0
 8015036:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015038:	683b      	ldr	r3, [r7, #0]
 801503a:	f383 8811 	msr	BASEPRI, r3
}
 801503e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8015040:	bf00      	nop
 8015042:	3708      	adds	r7, #8
 8015044:	46bd      	mov	sp, r7
 8015046:	bd80      	pop	{r7, pc}
 8015048:	e000ed04 	.word	0xe000ed04

0801504c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801504c:	b480      	push	{r7}
 801504e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8015050:	4b0b      	ldr	r3, [pc, #44]	; (8015080 <vPortSetupTimerInterrupt+0x34>)
 8015052:	2200      	movs	r2, #0
 8015054:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8015056:	4b0b      	ldr	r3, [pc, #44]	; (8015084 <vPortSetupTimerInterrupt+0x38>)
 8015058:	2200      	movs	r2, #0
 801505a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801505c:	4b0a      	ldr	r3, [pc, #40]	; (8015088 <vPortSetupTimerInterrupt+0x3c>)
 801505e:	681b      	ldr	r3, [r3, #0]
 8015060:	4a0a      	ldr	r2, [pc, #40]	; (801508c <vPortSetupTimerInterrupt+0x40>)
 8015062:	fba2 2303 	umull	r2, r3, r2, r3
 8015066:	099b      	lsrs	r3, r3, #6
 8015068:	4a09      	ldr	r2, [pc, #36]	; (8015090 <vPortSetupTimerInterrupt+0x44>)
 801506a:	3b01      	subs	r3, #1
 801506c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801506e:	4b04      	ldr	r3, [pc, #16]	; (8015080 <vPortSetupTimerInterrupt+0x34>)
 8015070:	2207      	movs	r2, #7
 8015072:	601a      	str	r2, [r3, #0]
}
 8015074:	bf00      	nop
 8015076:	46bd      	mov	sp, r7
 8015078:	f85d 7b04 	ldr.w	r7, [sp], #4
 801507c:	4770      	bx	lr
 801507e:	bf00      	nop
 8015080:	e000e010 	.word	0xe000e010
 8015084:	e000e018 	.word	0xe000e018
 8015088:	20000004 	.word	0x20000004
 801508c:	10624dd3 	.word	0x10624dd3
 8015090:	e000e014 	.word	0xe000e014

08015094 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8015094:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80150a4 <vPortEnableVFP+0x10>
 8015098:	6801      	ldr	r1, [r0, #0]
 801509a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801509e:	6001      	str	r1, [r0, #0]
 80150a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80150a2:	bf00      	nop
 80150a4:	e000ed88 	.word	0xe000ed88

080150a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80150a8:	b480      	push	{r7}
 80150aa:	b085      	sub	sp, #20
 80150ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80150ae:	f3ef 8305 	mrs	r3, IPSR
 80150b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80150b4:	68fb      	ldr	r3, [r7, #12]
 80150b6:	2b0f      	cmp	r3, #15
 80150b8:	d914      	bls.n	80150e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80150ba:	4a17      	ldr	r2, [pc, #92]	; (8015118 <vPortValidateInterruptPriority+0x70>)
 80150bc:	68fb      	ldr	r3, [r7, #12]
 80150be:	4413      	add	r3, r2
 80150c0:	781b      	ldrb	r3, [r3, #0]
 80150c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80150c4:	4b15      	ldr	r3, [pc, #84]	; (801511c <vPortValidateInterruptPriority+0x74>)
 80150c6:	781b      	ldrb	r3, [r3, #0]
 80150c8:	7afa      	ldrb	r2, [r7, #11]
 80150ca:	429a      	cmp	r2, r3
 80150cc:	d20a      	bcs.n	80150e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80150ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80150d2:	f383 8811 	msr	BASEPRI, r3
 80150d6:	f3bf 8f6f 	isb	sy
 80150da:	f3bf 8f4f 	dsb	sy
 80150de:	607b      	str	r3, [r7, #4]
}
 80150e0:	bf00      	nop
 80150e2:	e7fe      	b.n	80150e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80150e4:	4b0e      	ldr	r3, [pc, #56]	; (8015120 <vPortValidateInterruptPriority+0x78>)
 80150e6:	681b      	ldr	r3, [r3, #0]
 80150e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80150ec:	4b0d      	ldr	r3, [pc, #52]	; (8015124 <vPortValidateInterruptPriority+0x7c>)
 80150ee:	681b      	ldr	r3, [r3, #0]
 80150f0:	429a      	cmp	r2, r3
 80150f2:	d90a      	bls.n	801510a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80150f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80150f8:	f383 8811 	msr	BASEPRI, r3
 80150fc:	f3bf 8f6f 	isb	sy
 8015100:	f3bf 8f4f 	dsb	sy
 8015104:	603b      	str	r3, [r7, #0]
}
 8015106:	bf00      	nop
 8015108:	e7fe      	b.n	8015108 <vPortValidateInterruptPriority+0x60>
	}
 801510a:	bf00      	nop
 801510c:	3714      	adds	r7, #20
 801510e:	46bd      	mov	sp, r7
 8015110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015114:	4770      	bx	lr
 8015116:	bf00      	nop
 8015118:	e000e3f0 	.word	0xe000e3f0
 801511c:	20002424 	.word	0x20002424
 8015120:	e000ed0c 	.word	0xe000ed0c
 8015124:	20002428 	.word	0x20002428

08015128 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8015128:	b580      	push	{r7, lr}
 801512a:	b08a      	sub	sp, #40	; 0x28
 801512c:	af00      	add	r7, sp, #0
 801512e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8015130:	2300      	movs	r3, #0
 8015132:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8015134:	f7fe fd18 	bl	8013b68 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8015138:	4b5b      	ldr	r3, [pc, #364]	; (80152a8 <pvPortMalloc+0x180>)
 801513a:	681b      	ldr	r3, [r3, #0]
 801513c:	2b00      	cmp	r3, #0
 801513e:	d101      	bne.n	8015144 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8015140:	f000 f920 	bl	8015384 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8015144:	4b59      	ldr	r3, [pc, #356]	; (80152ac <pvPortMalloc+0x184>)
 8015146:	681a      	ldr	r2, [r3, #0]
 8015148:	687b      	ldr	r3, [r7, #4]
 801514a:	4013      	ands	r3, r2
 801514c:	2b00      	cmp	r3, #0
 801514e:	f040 8093 	bne.w	8015278 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8015152:	687b      	ldr	r3, [r7, #4]
 8015154:	2b00      	cmp	r3, #0
 8015156:	d01d      	beq.n	8015194 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8015158:	2208      	movs	r2, #8
 801515a:	687b      	ldr	r3, [r7, #4]
 801515c:	4413      	add	r3, r2
 801515e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8015160:	687b      	ldr	r3, [r7, #4]
 8015162:	f003 0307 	and.w	r3, r3, #7
 8015166:	2b00      	cmp	r3, #0
 8015168:	d014      	beq.n	8015194 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801516a:	687b      	ldr	r3, [r7, #4]
 801516c:	f023 0307 	bic.w	r3, r3, #7
 8015170:	3308      	adds	r3, #8
 8015172:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015174:	687b      	ldr	r3, [r7, #4]
 8015176:	f003 0307 	and.w	r3, r3, #7
 801517a:	2b00      	cmp	r3, #0
 801517c:	d00a      	beq.n	8015194 <pvPortMalloc+0x6c>
	__asm volatile
 801517e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015182:	f383 8811 	msr	BASEPRI, r3
 8015186:	f3bf 8f6f 	isb	sy
 801518a:	f3bf 8f4f 	dsb	sy
 801518e:	617b      	str	r3, [r7, #20]
}
 8015190:	bf00      	nop
 8015192:	e7fe      	b.n	8015192 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8015194:	687b      	ldr	r3, [r7, #4]
 8015196:	2b00      	cmp	r3, #0
 8015198:	d06e      	beq.n	8015278 <pvPortMalloc+0x150>
 801519a:	4b45      	ldr	r3, [pc, #276]	; (80152b0 <pvPortMalloc+0x188>)
 801519c:	681b      	ldr	r3, [r3, #0]
 801519e:	687a      	ldr	r2, [r7, #4]
 80151a0:	429a      	cmp	r2, r3
 80151a2:	d869      	bhi.n	8015278 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80151a4:	4b43      	ldr	r3, [pc, #268]	; (80152b4 <pvPortMalloc+0x18c>)
 80151a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80151a8:	4b42      	ldr	r3, [pc, #264]	; (80152b4 <pvPortMalloc+0x18c>)
 80151aa:	681b      	ldr	r3, [r3, #0]
 80151ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80151ae:	e004      	b.n	80151ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80151b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80151b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151b6:	681b      	ldr	r3, [r3, #0]
 80151b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80151ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151bc:	685b      	ldr	r3, [r3, #4]
 80151be:	687a      	ldr	r2, [r7, #4]
 80151c0:	429a      	cmp	r2, r3
 80151c2:	d903      	bls.n	80151cc <pvPortMalloc+0xa4>
 80151c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151c6:	681b      	ldr	r3, [r3, #0]
 80151c8:	2b00      	cmp	r3, #0
 80151ca:	d1f1      	bne.n	80151b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80151cc:	4b36      	ldr	r3, [pc, #216]	; (80152a8 <pvPortMalloc+0x180>)
 80151ce:	681b      	ldr	r3, [r3, #0]
 80151d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80151d2:	429a      	cmp	r2, r3
 80151d4:	d050      	beq.n	8015278 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80151d6:	6a3b      	ldr	r3, [r7, #32]
 80151d8:	681b      	ldr	r3, [r3, #0]
 80151da:	2208      	movs	r2, #8
 80151dc:	4413      	add	r3, r2
 80151de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80151e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151e2:	681a      	ldr	r2, [r3, #0]
 80151e4:	6a3b      	ldr	r3, [r7, #32]
 80151e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80151e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151ea:	685a      	ldr	r2, [r3, #4]
 80151ec:	687b      	ldr	r3, [r7, #4]
 80151ee:	1ad2      	subs	r2, r2, r3
 80151f0:	2308      	movs	r3, #8
 80151f2:	005b      	lsls	r3, r3, #1
 80151f4:	429a      	cmp	r2, r3
 80151f6:	d91f      	bls.n	8015238 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80151f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80151fa:	687b      	ldr	r3, [r7, #4]
 80151fc:	4413      	add	r3, r2
 80151fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015200:	69bb      	ldr	r3, [r7, #24]
 8015202:	f003 0307 	and.w	r3, r3, #7
 8015206:	2b00      	cmp	r3, #0
 8015208:	d00a      	beq.n	8015220 <pvPortMalloc+0xf8>
	__asm volatile
 801520a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801520e:	f383 8811 	msr	BASEPRI, r3
 8015212:	f3bf 8f6f 	isb	sy
 8015216:	f3bf 8f4f 	dsb	sy
 801521a:	613b      	str	r3, [r7, #16]
}
 801521c:	bf00      	nop
 801521e:	e7fe      	b.n	801521e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8015220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015222:	685a      	ldr	r2, [r3, #4]
 8015224:	687b      	ldr	r3, [r7, #4]
 8015226:	1ad2      	subs	r2, r2, r3
 8015228:	69bb      	ldr	r3, [r7, #24]
 801522a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801522c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801522e:	687a      	ldr	r2, [r7, #4]
 8015230:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8015232:	69b8      	ldr	r0, [r7, #24]
 8015234:	f000 f90a 	bl	801544c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8015238:	4b1d      	ldr	r3, [pc, #116]	; (80152b0 <pvPortMalloc+0x188>)
 801523a:	681a      	ldr	r2, [r3, #0]
 801523c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801523e:	685b      	ldr	r3, [r3, #4]
 8015240:	1ad3      	subs	r3, r2, r3
 8015242:	4a1b      	ldr	r2, [pc, #108]	; (80152b0 <pvPortMalloc+0x188>)
 8015244:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8015246:	4b1a      	ldr	r3, [pc, #104]	; (80152b0 <pvPortMalloc+0x188>)
 8015248:	681a      	ldr	r2, [r3, #0]
 801524a:	4b1b      	ldr	r3, [pc, #108]	; (80152b8 <pvPortMalloc+0x190>)
 801524c:	681b      	ldr	r3, [r3, #0]
 801524e:	429a      	cmp	r2, r3
 8015250:	d203      	bcs.n	801525a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8015252:	4b17      	ldr	r3, [pc, #92]	; (80152b0 <pvPortMalloc+0x188>)
 8015254:	681b      	ldr	r3, [r3, #0]
 8015256:	4a18      	ldr	r2, [pc, #96]	; (80152b8 <pvPortMalloc+0x190>)
 8015258:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801525a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801525c:	685a      	ldr	r2, [r3, #4]
 801525e:	4b13      	ldr	r3, [pc, #76]	; (80152ac <pvPortMalloc+0x184>)
 8015260:	681b      	ldr	r3, [r3, #0]
 8015262:	431a      	orrs	r2, r3
 8015264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015266:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8015268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801526a:	2200      	movs	r2, #0
 801526c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801526e:	4b13      	ldr	r3, [pc, #76]	; (80152bc <pvPortMalloc+0x194>)
 8015270:	681b      	ldr	r3, [r3, #0]
 8015272:	3301      	adds	r3, #1
 8015274:	4a11      	ldr	r2, [pc, #68]	; (80152bc <pvPortMalloc+0x194>)
 8015276:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8015278:	f7fe fc84 	bl	8013b84 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801527c:	69fb      	ldr	r3, [r7, #28]
 801527e:	f003 0307 	and.w	r3, r3, #7
 8015282:	2b00      	cmp	r3, #0
 8015284:	d00a      	beq.n	801529c <pvPortMalloc+0x174>
	__asm volatile
 8015286:	f04f 0350 	mov.w	r3, #80	; 0x50
 801528a:	f383 8811 	msr	BASEPRI, r3
 801528e:	f3bf 8f6f 	isb	sy
 8015292:	f3bf 8f4f 	dsb	sy
 8015296:	60fb      	str	r3, [r7, #12]
}
 8015298:	bf00      	nop
 801529a:	e7fe      	b.n	801529a <pvPortMalloc+0x172>
	return pvReturn;
 801529c:	69fb      	ldr	r3, [r7, #28]
}
 801529e:	4618      	mov	r0, r3
 80152a0:	3728      	adds	r7, #40	; 0x28
 80152a2:	46bd      	mov	sp, r7
 80152a4:	bd80      	pop	{r7, pc}
 80152a6:	bf00      	nop
 80152a8:	2001aad4 	.word	0x2001aad4
 80152ac:	2001aae8 	.word	0x2001aae8
 80152b0:	2001aad8 	.word	0x2001aad8
 80152b4:	2001aacc 	.word	0x2001aacc
 80152b8:	2001aadc 	.word	0x2001aadc
 80152bc:	2001aae0 	.word	0x2001aae0

080152c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80152c0:	b580      	push	{r7, lr}
 80152c2:	b086      	sub	sp, #24
 80152c4:	af00      	add	r7, sp, #0
 80152c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80152c8:	687b      	ldr	r3, [r7, #4]
 80152ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80152cc:	687b      	ldr	r3, [r7, #4]
 80152ce:	2b00      	cmp	r3, #0
 80152d0:	d04d      	beq.n	801536e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80152d2:	2308      	movs	r3, #8
 80152d4:	425b      	negs	r3, r3
 80152d6:	697a      	ldr	r2, [r7, #20]
 80152d8:	4413      	add	r3, r2
 80152da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80152dc:	697b      	ldr	r3, [r7, #20]
 80152de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80152e0:	693b      	ldr	r3, [r7, #16]
 80152e2:	685a      	ldr	r2, [r3, #4]
 80152e4:	4b24      	ldr	r3, [pc, #144]	; (8015378 <vPortFree+0xb8>)
 80152e6:	681b      	ldr	r3, [r3, #0]
 80152e8:	4013      	ands	r3, r2
 80152ea:	2b00      	cmp	r3, #0
 80152ec:	d10a      	bne.n	8015304 <vPortFree+0x44>
	__asm volatile
 80152ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80152f2:	f383 8811 	msr	BASEPRI, r3
 80152f6:	f3bf 8f6f 	isb	sy
 80152fa:	f3bf 8f4f 	dsb	sy
 80152fe:	60fb      	str	r3, [r7, #12]
}
 8015300:	bf00      	nop
 8015302:	e7fe      	b.n	8015302 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8015304:	693b      	ldr	r3, [r7, #16]
 8015306:	681b      	ldr	r3, [r3, #0]
 8015308:	2b00      	cmp	r3, #0
 801530a:	d00a      	beq.n	8015322 <vPortFree+0x62>
	__asm volatile
 801530c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015310:	f383 8811 	msr	BASEPRI, r3
 8015314:	f3bf 8f6f 	isb	sy
 8015318:	f3bf 8f4f 	dsb	sy
 801531c:	60bb      	str	r3, [r7, #8]
}
 801531e:	bf00      	nop
 8015320:	e7fe      	b.n	8015320 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8015322:	693b      	ldr	r3, [r7, #16]
 8015324:	685a      	ldr	r2, [r3, #4]
 8015326:	4b14      	ldr	r3, [pc, #80]	; (8015378 <vPortFree+0xb8>)
 8015328:	681b      	ldr	r3, [r3, #0]
 801532a:	4013      	ands	r3, r2
 801532c:	2b00      	cmp	r3, #0
 801532e:	d01e      	beq.n	801536e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8015330:	693b      	ldr	r3, [r7, #16]
 8015332:	681b      	ldr	r3, [r3, #0]
 8015334:	2b00      	cmp	r3, #0
 8015336:	d11a      	bne.n	801536e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8015338:	693b      	ldr	r3, [r7, #16]
 801533a:	685a      	ldr	r2, [r3, #4]
 801533c:	4b0e      	ldr	r3, [pc, #56]	; (8015378 <vPortFree+0xb8>)
 801533e:	681b      	ldr	r3, [r3, #0]
 8015340:	43db      	mvns	r3, r3
 8015342:	401a      	ands	r2, r3
 8015344:	693b      	ldr	r3, [r7, #16]
 8015346:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8015348:	f7fe fc0e 	bl	8013b68 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801534c:	693b      	ldr	r3, [r7, #16]
 801534e:	685a      	ldr	r2, [r3, #4]
 8015350:	4b0a      	ldr	r3, [pc, #40]	; (801537c <vPortFree+0xbc>)
 8015352:	681b      	ldr	r3, [r3, #0]
 8015354:	4413      	add	r3, r2
 8015356:	4a09      	ldr	r2, [pc, #36]	; (801537c <vPortFree+0xbc>)
 8015358:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801535a:	6938      	ldr	r0, [r7, #16]
 801535c:	f000 f876 	bl	801544c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8015360:	4b07      	ldr	r3, [pc, #28]	; (8015380 <vPortFree+0xc0>)
 8015362:	681b      	ldr	r3, [r3, #0]
 8015364:	3301      	adds	r3, #1
 8015366:	4a06      	ldr	r2, [pc, #24]	; (8015380 <vPortFree+0xc0>)
 8015368:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801536a:	f7fe fc0b 	bl	8013b84 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801536e:	bf00      	nop
 8015370:	3718      	adds	r7, #24
 8015372:	46bd      	mov	sp, r7
 8015374:	bd80      	pop	{r7, pc}
 8015376:	bf00      	nop
 8015378:	2001aae8 	.word	0x2001aae8
 801537c:	2001aad8 	.word	0x2001aad8
 8015380:	2001aae4 	.word	0x2001aae4

08015384 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8015384:	b480      	push	{r7}
 8015386:	b085      	sub	sp, #20
 8015388:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801538a:	4b29      	ldr	r3, [pc, #164]	; (8015430 <prvHeapInit+0xac>)
 801538c:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801538e:	4b29      	ldr	r3, [pc, #164]	; (8015434 <prvHeapInit+0xb0>)
 8015390:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8015392:	68fb      	ldr	r3, [r7, #12]
 8015394:	f003 0307 	and.w	r3, r3, #7
 8015398:	2b00      	cmp	r3, #0
 801539a:	d00c      	beq.n	80153b6 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801539c:	68fb      	ldr	r3, [r7, #12]
 801539e:	3307      	adds	r3, #7
 80153a0:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80153a2:	68fb      	ldr	r3, [r7, #12]
 80153a4:	f023 0307 	bic.w	r3, r3, #7
 80153a8:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80153aa:	68ba      	ldr	r2, [r7, #8]
 80153ac:	68fb      	ldr	r3, [r7, #12]
 80153ae:	1ad3      	subs	r3, r2, r3
 80153b0:	4a20      	ldr	r2, [pc, #128]	; (8015434 <prvHeapInit+0xb0>)
 80153b2:	4413      	add	r3, r2
 80153b4:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80153b6:	68fb      	ldr	r3, [r7, #12]
 80153b8:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80153ba:	4a1f      	ldr	r2, [pc, #124]	; (8015438 <prvHeapInit+0xb4>)
 80153bc:	687b      	ldr	r3, [r7, #4]
 80153be:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80153c0:	4b1d      	ldr	r3, [pc, #116]	; (8015438 <prvHeapInit+0xb4>)
 80153c2:	2200      	movs	r2, #0
 80153c4:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80153c6:	687b      	ldr	r3, [r7, #4]
 80153c8:	68ba      	ldr	r2, [r7, #8]
 80153ca:	4413      	add	r3, r2
 80153cc:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80153ce:	2208      	movs	r2, #8
 80153d0:	68fb      	ldr	r3, [r7, #12]
 80153d2:	1a9b      	subs	r3, r3, r2
 80153d4:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80153d6:	68fb      	ldr	r3, [r7, #12]
 80153d8:	f023 0307 	bic.w	r3, r3, #7
 80153dc:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80153de:	68fb      	ldr	r3, [r7, #12]
 80153e0:	4a16      	ldr	r2, [pc, #88]	; (801543c <prvHeapInit+0xb8>)
 80153e2:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80153e4:	4b15      	ldr	r3, [pc, #84]	; (801543c <prvHeapInit+0xb8>)
 80153e6:	681b      	ldr	r3, [r3, #0]
 80153e8:	2200      	movs	r2, #0
 80153ea:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80153ec:	4b13      	ldr	r3, [pc, #76]	; (801543c <prvHeapInit+0xb8>)
 80153ee:	681b      	ldr	r3, [r3, #0]
 80153f0:	2200      	movs	r2, #0
 80153f2:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80153f4:	687b      	ldr	r3, [r7, #4]
 80153f6:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80153f8:	683b      	ldr	r3, [r7, #0]
 80153fa:	68fa      	ldr	r2, [r7, #12]
 80153fc:	1ad2      	subs	r2, r2, r3
 80153fe:	683b      	ldr	r3, [r7, #0]
 8015400:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8015402:	4b0e      	ldr	r3, [pc, #56]	; (801543c <prvHeapInit+0xb8>)
 8015404:	681a      	ldr	r2, [r3, #0]
 8015406:	683b      	ldr	r3, [r7, #0]
 8015408:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801540a:	683b      	ldr	r3, [r7, #0]
 801540c:	685b      	ldr	r3, [r3, #4]
 801540e:	4a0c      	ldr	r2, [pc, #48]	; (8015440 <prvHeapInit+0xbc>)
 8015410:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015412:	683b      	ldr	r3, [r7, #0]
 8015414:	685b      	ldr	r3, [r3, #4]
 8015416:	4a0b      	ldr	r2, [pc, #44]	; (8015444 <prvHeapInit+0xc0>)
 8015418:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801541a:	4b0b      	ldr	r3, [pc, #44]	; (8015448 <prvHeapInit+0xc4>)
 801541c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8015420:	601a      	str	r2, [r3, #0]
}
 8015422:	bf00      	nop
 8015424:	3714      	adds	r7, #20
 8015426:	46bd      	mov	sp, r7
 8015428:	f85d 7b04 	ldr.w	r7, [sp], #4
 801542c:	4770      	bx	lr
 801542e:	bf00      	nop
 8015430:	000186a0 	.word	0x000186a0
 8015434:	2000242c 	.word	0x2000242c
 8015438:	2001aacc 	.word	0x2001aacc
 801543c:	2001aad4 	.word	0x2001aad4
 8015440:	2001aadc 	.word	0x2001aadc
 8015444:	2001aad8 	.word	0x2001aad8
 8015448:	2001aae8 	.word	0x2001aae8

0801544c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801544c:	b480      	push	{r7}
 801544e:	b085      	sub	sp, #20
 8015450:	af00      	add	r7, sp, #0
 8015452:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8015454:	4b28      	ldr	r3, [pc, #160]	; (80154f8 <prvInsertBlockIntoFreeList+0xac>)
 8015456:	60fb      	str	r3, [r7, #12]
 8015458:	e002      	b.n	8015460 <prvInsertBlockIntoFreeList+0x14>
 801545a:	68fb      	ldr	r3, [r7, #12]
 801545c:	681b      	ldr	r3, [r3, #0]
 801545e:	60fb      	str	r3, [r7, #12]
 8015460:	68fb      	ldr	r3, [r7, #12]
 8015462:	681b      	ldr	r3, [r3, #0]
 8015464:	687a      	ldr	r2, [r7, #4]
 8015466:	429a      	cmp	r2, r3
 8015468:	d8f7      	bhi.n	801545a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801546a:	68fb      	ldr	r3, [r7, #12]
 801546c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801546e:	68fb      	ldr	r3, [r7, #12]
 8015470:	685b      	ldr	r3, [r3, #4]
 8015472:	68ba      	ldr	r2, [r7, #8]
 8015474:	4413      	add	r3, r2
 8015476:	687a      	ldr	r2, [r7, #4]
 8015478:	429a      	cmp	r2, r3
 801547a:	d108      	bne.n	801548e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801547c:	68fb      	ldr	r3, [r7, #12]
 801547e:	685a      	ldr	r2, [r3, #4]
 8015480:	687b      	ldr	r3, [r7, #4]
 8015482:	685b      	ldr	r3, [r3, #4]
 8015484:	441a      	add	r2, r3
 8015486:	68fb      	ldr	r3, [r7, #12]
 8015488:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801548a:	68fb      	ldr	r3, [r7, #12]
 801548c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801548e:	687b      	ldr	r3, [r7, #4]
 8015490:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8015492:	687b      	ldr	r3, [r7, #4]
 8015494:	685b      	ldr	r3, [r3, #4]
 8015496:	68ba      	ldr	r2, [r7, #8]
 8015498:	441a      	add	r2, r3
 801549a:	68fb      	ldr	r3, [r7, #12]
 801549c:	681b      	ldr	r3, [r3, #0]
 801549e:	429a      	cmp	r2, r3
 80154a0:	d118      	bne.n	80154d4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80154a2:	68fb      	ldr	r3, [r7, #12]
 80154a4:	681a      	ldr	r2, [r3, #0]
 80154a6:	4b15      	ldr	r3, [pc, #84]	; (80154fc <prvInsertBlockIntoFreeList+0xb0>)
 80154a8:	681b      	ldr	r3, [r3, #0]
 80154aa:	429a      	cmp	r2, r3
 80154ac:	d00d      	beq.n	80154ca <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80154ae:	687b      	ldr	r3, [r7, #4]
 80154b0:	685a      	ldr	r2, [r3, #4]
 80154b2:	68fb      	ldr	r3, [r7, #12]
 80154b4:	681b      	ldr	r3, [r3, #0]
 80154b6:	685b      	ldr	r3, [r3, #4]
 80154b8:	441a      	add	r2, r3
 80154ba:	687b      	ldr	r3, [r7, #4]
 80154bc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80154be:	68fb      	ldr	r3, [r7, #12]
 80154c0:	681b      	ldr	r3, [r3, #0]
 80154c2:	681a      	ldr	r2, [r3, #0]
 80154c4:	687b      	ldr	r3, [r7, #4]
 80154c6:	601a      	str	r2, [r3, #0]
 80154c8:	e008      	b.n	80154dc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80154ca:	4b0c      	ldr	r3, [pc, #48]	; (80154fc <prvInsertBlockIntoFreeList+0xb0>)
 80154cc:	681a      	ldr	r2, [r3, #0]
 80154ce:	687b      	ldr	r3, [r7, #4]
 80154d0:	601a      	str	r2, [r3, #0]
 80154d2:	e003      	b.n	80154dc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80154d4:	68fb      	ldr	r3, [r7, #12]
 80154d6:	681a      	ldr	r2, [r3, #0]
 80154d8:	687b      	ldr	r3, [r7, #4]
 80154da:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80154dc:	68fa      	ldr	r2, [r7, #12]
 80154de:	687b      	ldr	r3, [r7, #4]
 80154e0:	429a      	cmp	r2, r3
 80154e2:	d002      	beq.n	80154ea <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80154e4:	68fb      	ldr	r3, [r7, #12]
 80154e6:	687a      	ldr	r2, [r7, #4]
 80154e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80154ea:	bf00      	nop
 80154ec:	3714      	adds	r7, #20
 80154ee:	46bd      	mov	sp, r7
 80154f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154f4:	4770      	bx	lr
 80154f6:	bf00      	nop
 80154f8:	2001aacc 	.word	0x2001aacc
 80154fc:	2001aad4 	.word	0x2001aad4

08015500 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8015500:	b480      	push	{r7}
 8015502:	b083      	sub	sp, #12
 8015504:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8015506:	4b24      	ldr	r3, [pc, #144]	; (8015598 <_DoInit+0x98>)
 8015508:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 801550a:	687b      	ldr	r3, [r7, #4]
 801550c:	2203      	movs	r2, #3
 801550e:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8015510:	687b      	ldr	r3, [r7, #4]
 8015512:	2203      	movs	r2, #3
 8015514:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8015516:	687b      	ldr	r3, [r7, #4]
 8015518:	4a20      	ldr	r2, [pc, #128]	; (801559c <_DoInit+0x9c>)
 801551a:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 801551c:	687b      	ldr	r3, [r7, #4]
 801551e:	4a20      	ldr	r2, [pc, #128]	; (80155a0 <_DoInit+0xa0>)
 8015520:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8015522:	687b      	ldr	r3, [r7, #4]
 8015524:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8015528:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 801552a:	687b      	ldr	r3, [r7, #4]
 801552c:	2200      	movs	r2, #0
 801552e:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8015530:	687b      	ldr	r3, [r7, #4]
 8015532:	2200      	movs	r2, #0
 8015534:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8015536:	687b      	ldr	r3, [r7, #4]
 8015538:	2200      	movs	r2, #0
 801553a:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 801553c:	687b      	ldr	r3, [r7, #4]
 801553e:	4a17      	ldr	r2, [pc, #92]	; (801559c <_DoInit+0x9c>)
 8015540:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8015542:	687b      	ldr	r3, [r7, #4]
 8015544:	4a17      	ldr	r2, [pc, #92]	; (80155a4 <_DoInit+0xa4>)
 8015546:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8015548:	687b      	ldr	r3, [r7, #4]
 801554a:	2210      	movs	r2, #16
 801554c:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 801554e:	687b      	ldr	r3, [r7, #4]
 8015550:	2200      	movs	r2, #0
 8015552:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8015554:	687b      	ldr	r3, [r7, #4]
 8015556:	2200      	movs	r2, #0
 8015558:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 801555a:	687b      	ldr	r3, [r7, #4]
 801555c:	2200      	movs	r2, #0
 801555e:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8015560:	687b      	ldr	r3, [r7, #4]
 8015562:	3307      	adds	r3, #7
 8015564:	4a10      	ldr	r2, [pc, #64]	; (80155a8 <_DoInit+0xa8>)
 8015566:	6810      	ldr	r0, [r2, #0]
 8015568:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 801556a:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 801556e:	687b      	ldr	r3, [r7, #4]
 8015570:	4a0e      	ldr	r2, [pc, #56]	; (80155ac <_DoInit+0xac>)
 8015572:	6810      	ldr	r0, [r2, #0]
 8015574:	6018      	str	r0, [r3, #0]
 8015576:	8891      	ldrh	r1, [r2, #4]
 8015578:	7992      	ldrb	r2, [r2, #6]
 801557a:	8099      	strh	r1, [r3, #4]
 801557c:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 801557e:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8015582:	687b      	ldr	r3, [r7, #4]
 8015584:	2220      	movs	r2, #32
 8015586:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8015588:	f3bf 8f5f 	dmb	sy
}
 801558c:	bf00      	nop
 801558e:	370c      	adds	r7, #12
 8015590:	46bd      	mov	sp, r7
 8015592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015596:	4770      	bx	lr
 8015598:	2001daa0 	.word	0x2001daa0
 801559c:	080178a8 	.word	0x080178a8
 80155a0:	2001aaec 	.word	0x2001aaec
 80155a4:	2001aeec 	.word	0x2001aeec
 80155a8:	080178b4 	.word	0x080178b4
 80155ac:	080178b8 	.word	0x080178b8

080155b0 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80155b0:	b580      	push	{r7, lr}
 80155b2:	b08c      	sub	sp, #48	; 0x30
 80155b4:	af00      	add	r7, sp, #0
 80155b6:	60f8      	str	r0, [r7, #12]
 80155b8:	60b9      	str	r1, [r7, #8]
 80155ba:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80155bc:	4b3e      	ldr	r3, [pc, #248]	; (80156b8 <SEGGER_RTT_ReadNoLock+0x108>)
 80155be:	623b      	str	r3, [r7, #32]
 80155c0:	6a3b      	ldr	r3, [r7, #32]
 80155c2:	781b      	ldrb	r3, [r3, #0]
 80155c4:	b2db      	uxtb	r3, r3
 80155c6:	2b00      	cmp	r3, #0
 80155c8:	d101      	bne.n	80155ce <SEGGER_RTT_ReadNoLock+0x1e>
 80155ca:	f7ff ff99 	bl	8015500 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80155ce:	68fa      	ldr	r2, [r7, #12]
 80155d0:	4613      	mov	r3, r2
 80155d2:	005b      	lsls	r3, r3, #1
 80155d4:	4413      	add	r3, r2
 80155d6:	00db      	lsls	r3, r3, #3
 80155d8:	3360      	adds	r3, #96	; 0x60
 80155da:	4a37      	ldr	r2, [pc, #220]	; (80156b8 <SEGGER_RTT_ReadNoLock+0x108>)
 80155dc:	4413      	add	r3, r2
 80155de:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80155e0:	68bb      	ldr	r3, [r7, #8]
 80155e2:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80155e4:	69fb      	ldr	r3, [r7, #28]
 80155e6:	691b      	ldr	r3, [r3, #16]
 80155e8:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80155ea:	69fb      	ldr	r3, [r7, #28]
 80155ec:	68db      	ldr	r3, [r3, #12]
 80155ee:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80155f0:	2300      	movs	r3, #0
 80155f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80155f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80155f6:	69bb      	ldr	r3, [r7, #24]
 80155f8:	429a      	cmp	r2, r3
 80155fa:	d92b      	bls.n	8015654 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80155fc:	69fb      	ldr	r3, [r7, #28]
 80155fe:	689a      	ldr	r2, [r3, #8]
 8015600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015602:	1ad3      	subs	r3, r2, r3
 8015604:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8015606:	697a      	ldr	r2, [r7, #20]
 8015608:	687b      	ldr	r3, [r7, #4]
 801560a:	4293      	cmp	r3, r2
 801560c:	bf28      	it	cs
 801560e:	4613      	movcs	r3, r2
 8015610:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8015612:	69fb      	ldr	r3, [r7, #28]
 8015614:	685a      	ldr	r2, [r3, #4]
 8015616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015618:	4413      	add	r3, r2
 801561a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 801561c:	697a      	ldr	r2, [r7, #20]
 801561e:	6939      	ldr	r1, [r7, #16]
 8015620:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015622:	f001 fa9b 	bl	8016b5c <memcpy>
    NumBytesRead += NumBytesRem;
 8015626:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015628:	697b      	ldr	r3, [r7, #20]
 801562a:	4413      	add	r3, r2
 801562c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 801562e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015630:	697b      	ldr	r3, [r7, #20]
 8015632:	4413      	add	r3, r2
 8015634:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8015636:	687a      	ldr	r2, [r7, #4]
 8015638:	697b      	ldr	r3, [r7, #20]
 801563a:	1ad3      	subs	r3, r2, r3
 801563c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 801563e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015640:	697b      	ldr	r3, [r7, #20]
 8015642:	4413      	add	r3, r2
 8015644:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8015646:	69fb      	ldr	r3, [r7, #28]
 8015648:	689b      	ldr	r3, [r3, #8]
 801564a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801564c:	429a      	cmp	r2, r3
 801564e:	d101      	bne.n	8015654 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8015650:	2300      	movs	r3, #0
 8015652:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8015654:	69ba      	ldr	r2, [r7, #24]
 8015656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015658:	1ad3      	subs	r3, r2, r3
 801565a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 801565c:	697a      	ldr	r2, [r7, #20]
 801565e:	687b      	ldr	r3, [r7, #4]
 8015660:	4293      	cmp	r3, r2
 8015662:	bf28      	it	cs
 8015664:	4613      	movcs	r3, r2
 8015666:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8015668:	697b      	ldr	r3, [r7, #20]
 801566a:	2b00      	cmp	r3, #0
 801566c:	d019      	beq.n	80156a2 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 801566e:	69fb      	ldr	r3, [r7, #28]
 8015670:	685a      	ldr	r2, [r3, #4]
 8015672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015674:	4413      	add	r3, r2
 8015676:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8015678:	697a      	ldr	r2, [r7, #20]
 801567a:	6939      	ldr	r1, [r7, #16]
 801567c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801567e:	f001 fa6d 	bl	8016b5c <memcpy>
    NumBytesRead += NumBytesRem;
 8015682:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015684:	697b      	ldr	r3, [r7, #20]
 8015686:	4413      	add	r3, r2
 8015688:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 801568a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801568c:	697b      	ldr	r3, [r7, #20]
 801568e:	4413      	add	r3, r2
 8015690:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8015692:	687a      	ldr	r2, [r7, #4]
 8015694:	697b      	ldr	r3, [r7, #20]
 8015696:	1ad3      	subs	r3, r2, r3
 8015698:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 801569a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801569c:	697b      	ldr	r3, [r7, #20]
 801569e:	4413      	add	r3, r2
 80156a0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 80156a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156a4:	2b00      	cmp	r3, #0
 80156a6:	d002      	beq.n	80156ae <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80156a8:	69fb      	ldr	r3, [r7, #28]
 80156aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80156ac:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80156ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80156b0:	4618      	mov	r0, r3
 80156b2:	3730      	adds	r7, #48	; 0x30
 80156b4:	46bd      	mov	sp, r7
 80156b6:	bd80      	pop	{r7, pc}
 80156b8:	2001daa0 	.word	0x2001daa0

080156bc <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80156bc:	b580      	push	{r7, lr}
 80156be:	b088      	sub	sp, #32
 80156c0:	af00      	add	r7, sp, #0
 80156c2:	60f8      	str	r0, [r7, #12]
 80156c4:	60b9      	str	r1, [r7, #8]
 80156c6:	607a      	str	r2, [r7, #4]
 80156c8:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80156ca:	4b3d      	ldr	r3, [pc, #244]	; (80157c0 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80156cc:	61bb      	str	r3, [r7, #24]
 80156ce:	69bb      	ldr	r3, [r7, #24]
 80156d0:	781b      	ldrb	r3, [r3, #0]
 80156d2:	b2db      	uxtb	r3, r3
 80156d4:	2b00      	cmp	r3, #0
 80156d6:	d101      	bne.n	80156dc <SEGGER_RTT_AllocUpBuffer+0x20>
 80156d8:	f7ff ff12 	bl	8015500 <_DoInit>
  SEGGER_RTT_LOCK();
 80156dc:	f3ef 8311 	mrs	r3, BASEPRI
 80156e0:	f04f 0120 	mov.w	r1, #32
 80156e4:	f381 8811 	msr	BASEPRI, r1
 80156e8:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80156ea:	4b35      	ldr	r3, [pc, #212]	; (80157c0 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80156ec:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80156ee:	2300      	movs	r3, #0
 80156f0:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80156f2:	6939      	ldr	r1, [r7, #16]
 80156f4:	69fb      	ldr	r3, [r7, #28]
 80156f6:	1c5a      	adds	r2, r3, #1
 80156f8:	4613      	mov	r3, r2
 80156fa:	005b      	lsls	r3, r3, #1
 80156fc:	4413      	add	r3, r2
 80156fe:	00db      	lsls	r3, r3, #3
 8015700:	440b      	add	r3, r1
 8015702:	3304      	adds	r3, #4
 8015704:	681b      	ldr	r3, [r3, #0]
 8015706:	2b00      	cmp	r3, #0
 8015708:	d008      	beq.n	801571c <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 801570a:	69fb      	ldr	r3, [r7, #28]
 801570c:	3301      	adds	r3, #1
 801570e:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8015710:	693b      	ldr	r3, [r7, #16]
 8015712:	691b      	ldr	r3, [r3, #16]
 8015714:	69fa      	ldr	r2, [r7, #28]
 8015716:	429a      	cmp	r2, r3
 8015718:	dbeb      	blt.n	80156f2 <SEGGER_RTT_AllocUpBuffer+0x36>
 801571a:	e000      	b.n	801571e <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 801571c:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 801571e:	693b      	ldr	r3, [r7, #16]
 8015720:	691b      	ldr	r3, [r3, #16]
 8015722:	69fa      	ldr	r2, [r7, #28]
 8015724:	429a      	cmp	r2, r3
 8015726:	da3f      	bge.n	80157a8 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8015728:	6939      	ldr	r1, [r7, #16]
 801572a:	69fb      	ldr	r3, [r7, #28]
 801572c:	1c5a      	adds	r2, r3, #1
 801572e:	4613      	mov	r3, r2
 8015730:	005b      	lsls	r3, r3, #1
 8015732:	4413      	add	r3, r2
 8015734:	00db      	lsls	r3, r3, #3
 8015736:	440b      	add	r3, r1
 8015738:	68fa      	ldr	r2, [r7, #12]
 801573a:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 801573c:	6939      	ldr	r1, [r7, #16]
 801573e:	69fb      	ldr	r3, [r7, #28]
 8015740:	1c5a      	adds	r2, r3, #1
 8015742:	4613      	mov	r3, r2
 8015744:	005b      	lsls	r3, r3, #1
 8015746:	4413      	add	r3, r2
 8015748:	00db      	lsls	r3, r3, #3
 801574a:	440b      	add	r3, r1
 801574c:	3304      	adds	r3, #4
 801574e:	68ba      	ldr	r2, [r7, #8]
 8015750:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8015752:	6939      	ldr	r1, [r7, #16]
 8015754:	69fa      	ldr	r2, [r7, #28]
 8015756:	4613      	mov	r3, r2
 8015758:	005b      	lsls	r3, r3, #1
 801575a:	4413      	add	r3, r2
 801575c:	00db      	lsls	r3, r3, #3
 801575e:	440b      	add	r3, r1
 8015760:	3320      	adds	r3, #32
 8015762:	687a      	ldr	r2, [r7, #4]
 8015764:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8015766:	6939      	ldr	r1, [r7, #16]
 8015768:	69fa      	ldr	r2, [r7, #28]
 801576a:	4613      	mov	r3, r2
 801576c:	005b      	lsls	r3, r3, #1
 801576e:	4413      	add	r3, r2
 8015770:	00db      	lsls	r3, r3, #3
 8015772:	440b      	add	r3, r1
 8015774:	3328      	adds	r3, #40	; 0x28
 8015776:	2200      	movs	r2, #0
 8015778:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 801577a:	6939      	ldr	r1, [r7, #16]
 801577c:	69fa      	ldr	r2, [r7, #28]
 801577e:	4613      	mov	r3, r2
 8015780:	005b      	lsls	r3, r3, #1
 8015782:	4413      	add	r3, r2
 8015784:	00db      	lsls	r3, r3, #3
 8015786:	440b      	add	r3, r1
 8015788:	3324      	adds	r3, #36	; 0x24
 801578a:	2200      	movs	r2, #0
 801578c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 801578e:	6939      	ldr	r1, [r7, #16]
 8015790:	69fa      	ldr	r2, [r7, #28]
 8015792:	4613      	mov	r3, r2
 8015794:	005b      	lsls	r3, r3, #1
 8015796:	4413      	add	r3, r2
 8015798:	00db      	lsls	r3, r3, #3
 801579a:	440b      	add	r3, r1
 801579c:	332c      	adds	r3, #44	; 0x2c
 801579e:	683a      	ldr	r2, [r7, #0]
 80157a0:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80157a2:	f3bf 8f5f 	dmb	sy
 80157a6:	e002      	b.n	80157ae <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80157a8:	f04f 33ff 	mov.w	r3, #4294967295
 80157ac:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80157ae:	697b      	ldr	r3, [r7, #20]
 80157b0:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80157b4:	69fb      	ldr	r3, [r7, #28]
}
 80157b6:	4618      	mov	r0, r3
 80157b8:	3720      	adds	r7, #32
 80157ba:	46bd      	mov	sp, r7
 80157bc:	bd80      	pop	{r7, pc}
 80157be:	bf00      	nop
 80157c0:	2001daa0 	.word	0x2001daa0

080157c4 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80157c4:	b580      	push	{r7, lr}
 80157c6:	b08a      	sub	sp, #40	; 0x28
 80157c8:	af00      	add	r7, sp, #0
 80157ca:	60f8      	str	r0, [r7, #12]
 80157cc:	60b9      	str	r1, [r7, #8]
 80157ce:	607a      	str	r2, [r7, #4]
 80157d0:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 80157d2:	4b21      	ldr	r3, [pc, #132]	; (8015858 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80157d4:	623b      	str	r3, [r7, #32]
 80157d6:	6a3b      	ldr	r3, [r7, #32]
 80157d8:	781b      	ldrb	r3, [r3, #0]
 80157da:	b2db      	uxtb	r3, r3
 80157dc:	2b00      	cmp	r3, #0
 80157de:	d101      	bne.n	80157e4 <SEGGER_RTT_ConfigDownBuffer+0x20>
 80157e0:	f7ff fe8e 	bl	8015500 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80157e4:	4b1c      	ldr	r3, [pc, #112]	; (8015858 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80157e6:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 80157e8:	68fb      	ldr	r3, [r7, #12]
 80157ea:	2b02      	cmp	r3, #2
 80157ec:	d82c      	bhi.n	8015848 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 80157ee:	f3ef 8311 	mrs	r3, BASEPRI
 80157f2:	f04f 0120 	mov.w	r1, #32
 80157f6:	f381 8811 	msr	BASEPRI, r1
 80157fa:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 80157fc:	68fa      	ldr	r2, [r7, #12]
 80157fe:	4613      	mov	r3, r2
 8015800:	005b      	lsls	r3, r3, #1
 8015802:	4413      	add	r3, r2
 8015804:	00db      	lsls	r3, r3, #3
 8015806:	3360      	adds	r3, #96	; 0x60
 8015808:	69fa      	ldr	r2, [r7, #28]
 801580a:	4413      	add	r3, r2
 801580c:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 801580e:	68fb      	ldr	r3, [r7, #12]
 8015810:	2b00      	cmp	r3, #0
 8015812:	d00e      	beq.n	8015832 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8015814:	697b      	ldr	r3, [r7, #20]
 8015816:	68ba      	ldr	r2, [r7, #8]
 8015818:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 801581a:	697b      	ldr	r3, [r7, #20]
 801581c:	687a      	ldr	r2, [r7, #4]
 801581e:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8015820:	697b      	ldr	r3, [r7, #20]
 8015822:	683a      	ldr	r2, [r7, #0]
 8015824:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8015826:	697b      	ldr	r3, [r7, #20]
 8015828:	2200      	movs	r2, #0
 801582a:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 801582c:	697b      	ldr	r3, [r7, #20]
 801582e:	2200      	movs	r2, #0
 8015830:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8015832:	697b      	ldr	r3, [r7, #20]
 8015834:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015836:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8015838:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 801583c:	69bb      	ldr	r3, [r7, #24]
 801583e:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8015842:	2300      	movs	r3, #0
 8015844:	627b      	str	r3, [r7, #36]	; 0x24
 8015846:	e002      	b.n	801584e <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8015848:	f04f 33ff 	mov.w	r3, #4294967295
 801584c:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 801584e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8015850:	4618      	mov	r0, r3
 8015852:	3728      	adds	r7, #40	; 0x28
 8015854:	46bd      	mov	sp, r7
 8015856:	bd80      	pop	{r7, pc}
 8015858:	2001daa0 	.word	0x2001daa0

0801585c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 801585c:	b480      	push	{r7}
 801585e:	b087      	sub	sp, #28
 8015860:	af00      	add	r7, sp, #0
 8015862:	60f8      	str	r0, [r7, #12]
 8015864:	60b9      	str	r1, [r7, #8]
 8015866:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8015868:	2300      	movs	r3, #0
 801586a:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 801586c:	68bb      	ldr	r3, [r7, #8]
 801586e:	2b00      	cmp	r3, #0
 8015870:	d00f      	beq.n	8015892 <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 8015872:	e002      	b.n	801587a <_EncodeStr+0x1e>
      Len++;
 8015874:	693b      	ldr	r3, [r7, #16]
 8015876:	3301      	adds	r3, #1
 8015878:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 801587a:	68ba      	ldr	r2, [r7, #8]
 801587c:	693b      	ldr	r3, [r7, #16]
 801587e:	4413      	add	r3, r2
 8015880:	781b      	ldrb	r3, [r3, #0]
 8015882:	2b00      	cmp	r3, #0
 8015884:	d1f6      	bne.n	8015874 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 8015886:	693a      	ldr	r2, [r7, #16]
 8015888:	687b      	ldr	r3, [r7, #4]
 801588a:	429a      	cmp	r2, r3
 801588c:	d901      	bls.n	8015892 <_EncodeStr+0x36>
      Len = Limit;
 801588e:	687b      	ldr	r3, [r7, #4]
 8015890:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8015892:	693b      	ldr	r3, [r7, #16]
 8015894:	2bfe      	cmp	r3, #254	; 0xfe
 8015896:	d806      	bhi.n	80158a6 <_EncodeStr+0x4a>
    *pPayload++ = Len; 
 8015898:	68fb      	ldr	r3, [r7, #12]
 801589a:	1c5a      	adds	r2, r3, #1
 801589c:	60fa      	str	r2, [r7, #12]
 801589e:	693a      	ldr	r2, [r7, #16]
 80158a0:	b2d2      	uxtb	r2, r2
 80158a2:	701a      	strb	r2, [r3, #0]
 80158a4:	e011      	b.n	80158ca <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 80158a6:	68fb      	ldr	r3, [r7, #12]
 80158a8:	1c5a      	adds	r2, r3, #1
 80158aa:	60fa      	str	r2, [r7, #12]
 80158ac:	22ff      	movs	r2, #255	; 0xff
 80158ae:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80158b0:	68fb      	ldr	r3, [r7, #12]
 80158b2:	1c5a      	adds	r2, r3, #1
 80158b4:	60fa      	str	r2, [r7, #12]
 80158b6:	693a      	ldr	r2, [r7, #16]
 80158b8:	b2d2      	uxtb	r2, r2
 80158ba:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 80158bc:	693b      	ldr	r3, [r7, #16]
 80158be:	0a19      	lsrs	r1, r3, #8
 80158c0:	68fb      	ldr	r3, [r7, #12]
 80158c2:	1c5a      	adds	r2, r3, #1
 80158c4:	60fa      	str	r2, [r7, #12]
 80158c6:	b2ca      	uxtb	r2, r1
 80158c8:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 80158ca:	2300      	movs	r3, #0
 80158cc:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80158ce:	e00a      	b.n	80158e6 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 80158d0:	68ba      	ldr	r2, [r7, #8]
 80158d2:	1c53      	adds	r3, r2, #1
 80158d4:	60bb      	str	r3, [r7, #8]
 80158d6:	68fb      	ldr	r3, [r7, #12]
 80158d8:	1c59      	adds	r1, r3, #1
 80158da:	60f9      	str	r1, [r7, #12]
 80158dc:	7812      	ldrb	r2, [r2, #0]
 80158de:	701a      	strb	r2, [r3, #0]
    n++;
 80158e0:	697b      	ldr	r3, [r7, #20]
 80158e2:	3301      	adds	r3, #1
 80158e4:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80158e6:	697a      	ldr	r2, [r7, #20]
 80158e8:	693b      	ldr	r3, [r7, #16]
 80158ea:	429a      	cmp	r2, r3
 80158ec:	d3f0      	bcc.n	80158d0 <_EncodeStr+0x74>
  }
  return pPayload;
 80158ee:	68fb      	ldr	r3, [r7, #12]
}
 80158f0:	4618      	mov	r0, r3
 80158f2:	371c      	adds	r7, #28
 80158f4:	46bd      	mov	sp, r7
 80158f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158fa:	4770      	bx	lr

080158fc <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80158fc:	b480      	push	{r7}
 80158fe:	b083      	sub	sp, #12
 8015900:	af00      	add	r7, sp, #0
 8015902:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8015904:	687b      	ldr	r3, [r7, #4]
 8015906:	3304      	adds	r3, #4
}
 8015908:	4618      	mov	r0, r3
 801590a:	370c      	adds	r7, #12
 801590c:	46bd      	mov	sp, r7
 801590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015912:	4770      	bx	lr

08015914 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8015914:	b580      	push	{r7, lr}
 8015916:	b082      	sub	sp, #8
 8015918:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 801591a:	4b36      	ldr	r3, [pc, #216]	; (80159f4 <_HandleIncomingPacket+0xe0>)
 801591c:	7e1b      	ldrb	r3, [r3, #24]
 801591e:	4618      	mov	r0, r3
 8015920:	1cfb      	adds	r3, r7, #3
 8015922:	2201      	movs	r2, #1
 8015924:	4619      	mov	r1, r3
 8015926:	f7ff fe43 	bl	80155b0 <SEGGER_RTT_ReadNoLock>
 801592a:	4603      	mov	r3, r0
 801592c:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 801592e:	687b      	ldr	r3, [r7, #4]
 8015930:	2b00      	cmp	r3, #0
 8015932:	dd54      	ble.n	80159de <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8015934:	78fb      	ldrb	r3, [r7, #3]
 8015936:	2b80      	cmp	r3, #128	; 0x80
 8015938:	d032      	beq.n	80159a0 <_HandleIncomingPacket+0x8c>
 801593a:	2b80      	cmp	r3, #128	; 0x80
 801593c:	dc42      	bgt.n	80159c4 <_HandleIncomingPacket+0xb0>
 801593e:	2b07      	cmp	r3, #7
 8015940:	dc16      	bgt.n	8015970 <_HandleIncomingPacket+0x5c>
 8015942:	2b00      	cmp	r3, #0
 8015944:	dd3e      	ble.n	80159c4 <_HandleIncomingPacket+0xb0>
 8015946:	3b01      	subs	r3, #1
 8015948:	2b06      	cmp	r3, #6
 801594a:	d83b      	bhi.n	80159c4 <_HandleIncomingPacket+0xb0>
 801594c:	a201      	add	r2, pc, #4	; (adr r2, 8015954 <_HandleIncomingPacket+0x40>)
 801594e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015952:	bf00      	nop
 8015954:	08015977 	.word	0x08015977
 8015958:	0801597d 	.word	0x0801597d
 801595c:	08015983 	.word	0x08015983
 8015960:	08015989 	.word	0x08015989
 8015964:	0801598f 	.word	0x0801598f
 8015968:	08015995 	.word	0x08015995
 801596c:	0801599b 	.word	0x0801599b
 8015970:	2b7f      	cmp	r3, #127	; 0x7f
 8015972:	d036      	beq.n	80159e2 <_HandleIncomingPacket+0xce>
 8015974:	e026      	b.n	80159c4 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8015976:	f000 fba7 	bl	80160c8 <SEGGER_SYSVIEW_Start>
      break;
 801597a:	e037      	b.n	80159ec <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 801597c:	f000 fc5e 	bl	801623c <SEGGER_SYSVIEW_Stop>
      break;
 8015980:	e034      	b.n	80159ec <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8015982:	f000 fe37 	bl	80165f4 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8015986:	e031      	b.n	80159ec <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8015988:	f000 fdfc 	bl	8016584 <SEGGER_SYSVIEW_SendTaskList>
      break;
 801598c:	e02e      	b.n	80159ec <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 801598e:	f000 fc7b 	bl	8016288 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8015992:	e02b      	b.n	80159ec <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8015994:	f000 fff0 	bl	8016978 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8015998:	e028      	b.n	80159ec <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 801599a:	f000 ffcf 	bl	801693c <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 801599e:	e025      	b.n	80159ec <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80159a0:	4b14      	ldr	r3, [pc, #80]	; (80159f4 <_HandleIncomingPacket+0xe0>)
 80159a2:	7e1b      	ldrb	r3, [r3, #24]
 80159a4:	4618      	mov	r0, r3
 80159a6:	1cfb      	adds	r3, r7, #3
 80159a8:	2201      	movs	r2, #1
 80159aa:	4619      	mov	r1, r3
 80159ac:	f7ff fe00 	bl	80155b0 <SEGGER_RTT_ReadNoLock>
 80159b0:	4603      	mov	r3, r0
 80159b2:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 80159b4:	687b      	ldr	r3, [r7, #4]
 80159b6:	2b00      	cmp	r3, #0
 80159b8:	dd15      	ble.n	80159e6 <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80159ba:	78fb      	ldrb	r3, [r7, #3]
 80159bc:	4618      	mov	r0, r3
 80159be:	f000 ff3d 	bl	801683c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80159c2:	e010      	b.n	80159e6 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80159c4:	78fb      	ldrb	r3, [r7, #3]
 80159c6:	b25b      	sxtb	r3, r3
 80159c8:	2b00      	cmp	r3, #0
 80159ca:	da0e      	bge.n	80159ea <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80159cc:	4b09      	ldr	r3, [pc, #36]	; (80159f4 <_HandleIncomingPacket+0xe0>)
 80159ce:	7e1b      	ldrb	r3, [r3, #24]
 80159d0:	4618      	mov	r0, r3
 80159d2:	1cfb      	adds	r3, r7, #3
 80159d4:	2201      	movs	r2, #1
 80159d6:	4619      	mov	r1, r3
 80159d8:	f7ff fdea 	bl	80155b0 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80159dc:	e005      	b.n	80159ea <_HandleIncomingPacket+0xd6>
    }
  }
 80159de:	bf00      	nop
 80159e0:	e004      	b.n	80159ec <_HandleIncomingPacket+0xd8>
      break;
 80159e2:	bf00      	nop
 80159e4:	e002      	b.n	80159ec <_HandleIncomingPacket+0xd8>
      break;
 80159e6:	bf00      	nop
 80159e8:	e000      	b.n	80159ec <_HandleIncomingPacket+0xd8>
      break;
 80159ea:	bf00      	nop
}
 80159ec:	bf00      	nop
 80159ee:	3708      	adds	r7, #8
 80159f0:	46bd      	mov	sp, r7
 80159f2:	bd80      	pop	{r7, pc}
 80159f4:	2001b304 	.word	0x2001b304

080159f8 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80159f8:	b580      	push	{r7, lr}
 80159fa:	b08c      	sub	sp, #48	; 0x30
 80159fc:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80159fe:	2301      	movs	r3, #1
 8015a00:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8015a02:	1d3b      	adds	r3, r7, #4
 8015a04:	3301      	adds	r3, #1
 8015a06:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8015a08:	69fb      	ldr	r3, [r7, #28]
 8015a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015a0c:	4b31      	ldr	r3, [pc, #196]	; (8015ad4 <_TrySendOverflowPacket+0xdc>)
 8015a0e:	695b      	ldr	r3, [r3, #20]
 8015a10:	62bb      	str	r3, [r7, #40]	; 0x28
 8015a12:	e00b      	b.n	8015a2c <_TrySendOverflowPacket+0x34>
 8015a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a16:	b2da      	uxtb	r2, r3
 8015a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a1a:	1c59      	adds	r1, r3, #1
 8015a1c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8015a1e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8015a22:	b2d2      	uxtb	r2, r2
 8015a24:	701a      	strb	r2, [r3, #0]
 8015a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a28:	09db      	lsrs	r3, r3, #7
 8015a2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8015a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a2e:	2b7f      	cmp	r3, #127	; 0x7f
 8015a30:	d8f0      	bhi.n	8015a14 <_TrySendOverflowPacket+0x1c>
 8015a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a34:	1c5a      	adds	r2, r3, #1
 8015a36:	62fa      	str	r2, [r7, #44]	; 0x2c
 8015a38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015a3a:	b2d2      	uxtb	r2, r2
 8015a3c:	701a      	strb	r2, [r3, #0]
 8015a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a40:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8015a42:	4b25      	ldr	r3, [pc, #148]	; (8015ad8 <_TrySendOverflowPacket+0xe0>)
 8015a44:	681b      	ldr	r3, [r3, #0]
 8015a46:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8015a48:	4b22      	ldr	r3, [pc, #136]	; (8015ad4 <_TrySendOverflowPacket+0xdc>)
 8015a4a:	68db      	ldr	r3, [r3, #12]
 8015a4c:	69ba      	ldr	r2, [r7, #24]
 8015a4e:	1ad3      	subs	r3, r2, r3
 8015a50:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8015a52:	69fb      	ldr	r3, [r7, #28]
 8015a54:	627b      	str	r3, [r7, #36]	; 0x24
 8015a56:	697b      	ldr	r3, [r7, #20]
 8015a58:	623b      	str	r3, [r7, #32]
 8015a5a:	e00b      	b.n	8015a74 <_TrySendOverflowPacket+0x7c>
 8015a5c:	6a3b      	ldr	r3, [r7, #32]
 8015a5e:	b2da      	uxtb	r2, r3
 8015a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a62:	1c59      	adds	r1, r3, #1
 8015a64:	6279      	str	r1, [r7, #36]	; 0x24
 8015a66:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8015a6a:	b2d2      	uxtb	r2, r2
 8015a6c:	701a      	strb	r2, [r3, #0]
 8015a6e:	6a3b      	ldr	r3, [r7, #32]
 8015a70:	09db      	lsrs	r3, r3, #7
 8015a72:	623b      	str	r3, [r7, #32]
 8015a74:	6a3b      	ldr	r3, [r7, #32]
 8015a76:	2b7f      	cmp	r3, #127	; 0x7f
 8015a78:	d8f0      	bhi.n	8015a5c <_TrySendOverflowPacket+0x64>
 8015a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a7c:	1c5a      	adds	r2, r3, #1
 8015a7e:	627a      	str	r2, [r7, #36]	; 0x24
 8015a80:	6a3a      	ldr	r2, [r7, #32]
 8015a82:	b2d2      	uxtb	r2, r2
 8015a84:	701a      	strb	r2, [r3, #0]
 8015a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a88:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8015a8a:	4b12      	ldr	r3, [pc, #72]	; (8015ad4 <_TrySendOverflowPacket+0xdc>)
 8015a8c:	785b      	ldrb	r3, [r3, #1]
 8015a8e:	4618      	mov	r0, r3
 8015a90:	1d3b      	adds	r3, r7, #4
 8015a92:	69fa      	ldr	r2, [r7, #28]
 8015a94:	1ad3      	subs	r3, r2, r3
 8015a96:	461a      	mov	r2, r3
 8015a98:	1d3b      	adds	r3, r7, #4
 8015a9a:	4619      	mov	r1, r3
 8015a9c:	f7ea fb98 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8015aa0:	4603      	mov	r3, r0
 8015aa2:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8015aa4:	693b      	ldr	r3, [r7, #16]
 8015aa6:	2b00      	cmp	r3, #0
 8015aa8:	d009      	beq.n	8015abe <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8015aaa:	4a0a      	ldr	r2, [pc, #40]	; (8015ad4 <_TrySendOverflowPacket+0xdc>)
 8015aac:	69bb      	ldr	r3, [r7, #24]
 8015aae:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8015ab0:	4b08      	ldr	r3, [pc, #32]	; (8015ad4 <_TrySendOverflowPacket+0xdc>)
 8015ab2:	781b      	ldrb	r3, [r3, #0]
 8015ab4:	3b01      	subs	r3, #1
 8015ab6:	b2da      	uxtb	r2, r3
 8015ab8:	4b06      	ldr	r3, [pc, #24]	; (8015ad4 <_TrySendOverflowPacket+0xdc>)
 8015aba:	701a      	strb	r2, [r3, #0]
 8015abc:	e004      	b.n	8015ac8 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8015abe:	4b05      	ldr	r3, [pc, #20]	; (8015ad4 <_TrySendOverflowPacket+0xdc>)
 8015ac0:	695b      	ldr	r3, [r3, #20]
 8015ac2:	3301      	adds	r3, #1
 8015ac4:	4a03      	ldr	r2, [pc, #12]	; (8015ad4 <_TrySendOverflowPacket+0xdc>)
 8015ac6:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8015ac8:	693b      	ldr	r3, [r7, #16]
}
 8015aca:	4618      	mov	r0, r3
 8015acc:	3730      	adds	r7, #48	; 0x30
 8015ace:	46bd      	mov	sp, r7
 8015ad0:	bd80      	pop	{r7, pc}
 8015ad2:	bf00      	nop
 8015ad4:	2001b304 	.word	0x2001b304
 8015ad8:	e0001004 	.word	0xe0001004

08015adc <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8015adc:	b580      	push	{r7, lr}
 8015ade:	b08a      	sub	sp, #40	; 0x28
 8015ae0:	af00      	add	r7, sp, #0
 8015ae2:	60f8      	str	r0, [r7, #12]
 8015ae4:	60b9      	str	r1, [r7, #8]
 8015ae6:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8015ae8:	4b6c      	ldr	r3, [pc, #432]	; (8015c9c <_SendPacket+0x1c0>)
 8015aea:	781b      	ldrb	r3, [r3, #0]
 8015aec:	2b01      	cmp	r3, #1
 8015aee:	d010      	beq.n	8015b12 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8015af0:	4b6a      	ldr	r3, [pc, #424]	; (8015c9c <_SendPacket+0x1c0>)
 8015af2:	781b      	ldrb	r3, [r3, #0]
 8015af4:	2b00      	cmp	r3, #0
 8015af6:	f000 80a3 	beq.w	8015c40 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8015afa:	4b68      	ldr	r3, [pc, #416]	; (8015c9c <_SendPacket+0x1c0>)
 8015afc:	781b      	ldrb	r3, [r3, #0]
 8015afe:	2b02      	cmp	r3, #2
 8015b00:	d109      	bne.n	8015b16 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8015b02:	f7ff ff79 	bl	80159f8 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8015b06:	4b65      	ldr	r3, [pc, #404]	; (8015c9c <_SendPacket+0x1c0>)
 8015b08:	781b      	ldrb	r3, [r3, #0]
 8015b0a:	2b01      	cmp	r3, #1
 8015b0c:	f040 809a 	bne.w	8015c44 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 8015b10:	e001      	b.n	8015b16 <_SendPacket+0x3a>
    goto Send;
 8015b12:	bf00      	nop
 8015b14:	e000      	b.n	8015b18 <_SendPacket+0x3c>
Send:
 8015b16:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8015b18:	687b      	ldr	r3, [r7, #4]
 8015b1a:	2b1f      	cmp	r3, #31
 8015b1c:	d809      	bhi.n	8015b32 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8015b1e:	4b5f      	ldr	r3, [pc, #380]	; (8015c9c <_SendPacket+0x1c0>)
 8015b20:	69da      	ldr	r2, [r3, #28]
 8015b22:	687b      	ldr	r3, [r7, #4]
 8015b24:	fa22 f303 	lsr.w	r3, r2, r3
 8015b28:	f003 0301 	and.w	r3, r3, #1
 8015b2c:	2b00      	cmp	r3, #0
 8015b2e:	f040 808b 	bne.w	8015c48 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8015b32:	687b      	ldr	r3, [r7, #4]
 8015b34:	2b17      	cmp	r3, #23
 8015b36:	d807      	bhi.n	8015b48 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8015b38:	68fb      	ldr	r3, [r7, #12]
 8015b3a:	3b01      	subs	r3, #1
 8015b3c:	60fb      	str	r3, [r7, #12]
 8015b3e:	687b      	ldr	r3, [r7, #4]
 8015b40:	b2da      	uxtb	r2, r3
 8015b42:	68fb      	ldr	r3, [r7, #12]
 8015b44:	701a      	strb	r2, [r3, #0]
 8015b46:	e03d      	b.n	8015bc4 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8015b48:	68ba      	ldr	r2, [r7, #8]
 8015b4a:	68fb      	ldr	r3, [r7, #12]
 8015b4c:	1ad3      	subs	r3, r2, r3
 8015b4e:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8015b50:	69fb      	ldr	r3, [r7, #28]
 8015b52:	2b7f      	cmp	r3, #127	; 0x7f
 8015b54:	d912      	bls.n	8015b7c <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8015b56:	69fb      	ldr	r3, [r7, #28]
 8015b58:	09da      	lsrs	r2, r3, #7
 8015b5a:	68fb      	ldr	r3, [r7, #12]
 8015b5c:	3b01      	subs	r3, #1
 8015b5e:	60fb      	str	r3, [r7, #12]
 8015b60:	b2d2      	uxtb	r2, r2
 8015b62:	68fb      	ldr	r3, [r7, #12]
 8015b64:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8015b66:	69fb      	ldr	r3, [r7, #28]
 8015b68:	b2db      	uxtb	r3, r3
 8015b6a:	68fa      	ldr	r2, [r7, #12]
 8015b6c:	3a01      	subs	r2, #1
 8015b6e:	60fa      	str	r2, [r7, #12]
 8015b70:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8015b74:	b2da      	uxtb	r2, r3
 8015b76:	68fb      	ldr	r3, [r7, #12]
 8015b78:	701a      	strb	r2, [r3, #0]
 8015b7a:	e006      	b.n	8015b8a <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8015b7c:	68fb      	ldr	r3, [r7, #12]
 8015b7e:	3b01      	subs	r3, #1
 8015b80:	60fb      	str	r3, [r7, #12]
 8015b82:	69fb      	ldr	r3, [r7, #28]
 8015b84:	b2da      	uxtb	r2, r3
 8015b86:	68fb      	ldr	r3, [r7, #12]
 8015b88:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8015b8a:	687b      	ldr	r3, [r7, #4]
 8015b8c:	2b7f      	cmp	r3, #127	; 0x7f
 8015b8e:	d912      	bls.n	8015bb6 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8015b90:	687b      	ldr	r3, [r7, #4]
 8015b92:	09da      	lsrs	r2, r3, #7
 8015b94:	68fb      	ldr	r3, [r7, #12]
 8015b96:	3b01      	subs	r3, #1
 8015b98:	60fb      	str	r3, [r7, #12]
 8015b9a:	b2d2      	uxtb	r2, r2
 8015b9c:	68fb      	ldr	r3, [r7, #12]
 8015b9e:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8015ba0:	687b      	ldr	r3, [r7, #4]
 8015ba2:	b2db      	uxtb	r3, r3
 8015ba4:	68fa      	ldr	r2, [r7, #12]
 8015ba6:	3a01      	subs	r2, #1
 8015ba8:	60fa      	str	r2, [r7, #12]
 8015baa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8015bae:	b2da      	uxtb	r2, r3
 8015bb0:	68fb      	ldr	r3, [r7, #12]
 8015bb2:	701a      	strb	r2, [r3, #0]
 8015bb4:	e006      	b.n	8015bc4 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8015bb6:	68fb      	ldr	r3, [r7, #12]
 8015bb8:	3b01      	subs	r3, #1
 8015bba:	60fb      	str	r3, [r7, #12]
 8015bbc:	687b      	ldr	r3, [r7, #4]
 8015bbe:	b2da      	uxtb	r2, r3
 8015bc0:	68fb      	ldr	r3, [r7, #12]
 8015bc2:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8015bc4:	4b36      	ldr	r3, [pc, #216]	; (8015ca0 <_SendPacket+0x1c4>)
 8015bc6:	681b      	ldr	r3, [r3, #0]
 8015bc8:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8015bca:	4b34      	ldr	r3, [pc, #208]	; (8015c9c <_SendPacket+0x1c0>)
 8015bcc:	68db      	ldr	r3, [r3, #12]
 8015bce:	69ba      	ldr	r2, [r7, #24]
 8015bd0:	1ad3      	subs	r3, r2, r3
 8015bd2:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8015bd4:	68bb      	ldr	r3, [r7, #8]
 8015bd6:	627b      	str	r3, [r7, #36]	; 0x24
 8015bd8:	697b      	ldr	r3, [r7, #20]
 8015bda:	623b      	str	r3, [r7, #32]
 8015bdc:	e00b      	b.n	8015bf6 <_SendPacket+0x11a>
 8015bde:	6a3b      	ldr	r3, [r7, #32]
 8015be0:	b2da      	uxtb	r2, r3
 8015be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015be4:	1c59      	adds	r1, r3, #1
 8015be6:	6279      	str	r1, [r7, #36]	; 0x24
 8015be8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8015bec:	b2d2      	uxtb	r2, r2
 8015bee:	701a      	strb	r2, [r3, #0]
 8015bf0:	6a3b      	ldr	r3, [r7, #32]
 8015bf2:	09db      	lsrs	r3, r3, #7
 8015bf4:	623b      	str	r3, [r7, #32]
 8015bf6:	6a3b      	ldr	r3, [r7, #32]
 8015bf8:	2b7f      	cmp	r3, #127	; 0x7f
 8015bfa:	d8f0      	bhi.n	8015bde <_SendPacket+0x102>
 8015bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015bfe:	1c5a      	adds	r2, r3, #1
 8015c00:	627a      	str	r2, [r7, #36]	; 0x24
 8015c02:	6a3a      	ldr	r2, [r7, #32]
 8015c04:	b2d2      	uxtb	r2, r2
 8015c06:	701a      	strb	r2, [r3, #0]
 8015c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c0a:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8015c0c:	4b23      	ldr	r3, [pc, #140]	; (8015c9c <_SendPacket+0x1c0>)
 8015c0e:	785b      	ldrb	r3, [r3, #1]
 8015c10:	4618      	mov	r0, r3
 8015c12:	68ba      	ldr	r2, [r7, #8]
 8015c14:	68fb      	ldr	r3, [r7, #12]
 8015c16:	1ad3      	subs	r3, r2, r3
 8015c18:	461a      	mov	r2, r3
 8015c1a:	68f9      	ldr	r1, [r7, #12]
 8015c1c:	f7ea fad8 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8015c20:	4603      	mov	r3, r0
 8015c22:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8015c24:	693b      	ldr	r3, [r7, #16]
 8015c26:	2b00      	cmp	r3, #0
 8015c28:	d003      	beq.n	8015c32 <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8015c2a:	4a1c      	ldr	r2, [pc, #112]	; (8015c9c <_SendPacket+0x1c0>)
 8015c2c:	69bb      	ldr	r3, [r7, #24]
 8015c2e:	60d3      	str	r3, [r2, #12]
 8015c30:	e00b      	b.n	8015c4a <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8015c32:	4b1a      	ldr	r3, [pc, #104]	; (8015c9c <_SendPacket+0x1c0>)
 8015c34:	781b      	ldrb	r3, [r3, #0]
 8015c36:	3301      	adds	r3, #1
 8015c38:	b2da      	uxtb	r2, r3
 8015c3a:	4b18      	ldr	r3, [pc, #96]	; (8015c9c <_SendPacket+0x1c0>)
 8015c3c:	701a      	strb	r2, [r3, #0]
 8015c3e:	e004      	b.n	8015c4a <_SendPacket+0x16e>
    goto SendDone;
 8015c40:	bf00      	nop
 8015c42:	e002      	b.n	8015c4a <_SendPacket+0x16e>
      goto SendDone;
 8015c44:	bf00      	nop
 8015c46:	e000      	b.n	8015c4a <_SendPacket+0x16e>
      goto SendDone;
 8015c48:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8015c4a:	4b14      	ldr	r3, [pc, #80]	; (8015c9c <_SendPacket+0x1c0>)
 8015c4c:	7e1b      	ldrb	r3, [r3, #24]
 8015c4e:	4619      	mov	r1, r3
 8015c50:	4a14      	ldr	r2, [pc, #80]	; (8015ca4 <_SendPacket+0x1c8>)
 8015c52:	460b      	mov	r3, r1
 8015c54:	005b      	lsls	r3, r3, #1
 8015c56:	440b      	add	r3, r1
 8015c58:	00db      	lsls	r3, r3, #3
 8015c5a:	4413      	add	r3, r2
 8015c5c:	336c      	adds	r3, #108	; 0x6c
 8015c5e:	681a      	ldr	r2, [r3, #0]
 8015c60:	4b0e      	ldr	r3, [pc, #56]	; (8015c9c <_SendPacket+0x1c0>)
 8015c62:	7e1b      	ldrb	r3, [r3, #24]
 8015c64:	4618      	mov	r0, r3
 8015c66:	490f      	ldr	r1, [pc, #60]	; (8015ca4 <_SendPacket+0x1c8>)
 8015c68:	4603      	mov	r3, r0
 8015c6a:	005b      	lsls	r3, r3, #1
 8015c6c:	4403      	add	r3, r0
 8015c6e:	00db      	lsls	r3, r3, #3
 8015c70:	440b      	add	r3, r1
 8015c72:	3370      	adds	r3, #112	; 0x70
 8015c74:	681b      	ldr	r3, [r3, #0]
 8015c76:	429a      	cmp	r2, r3
 8015c78:	d00b      	beq.n	8015c92 <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8015c7a:	4b08      	ldr	r3, [pc, #32]	; (8015c9c <_SendPacket+0x1c0>)
 8015c7c:	789b      	ldrb	r3, [r3, #2]
 8015c7e:	2b00      	cmp	r3, #0
 8015c80:	d107      	bne.n	8015c92 <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8015c82:	4b06      	ldr	r3, [pc, #24]	; (8015c9c <_SendPacket+0x1c0>)
 8015c84:	2201      	movs	r2, #1
 8015c86:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8015c88:	f7ff fe44 	bl	8015914 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8015c8c:	4b03      	ldr	r3, [pc, #12]	; (8015c9c <_SendPacket+0x1c0>)
 8015c8e:	2200      	movs	r2, #0
 8015c90:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8015c92:	bf00      	nop
 8015c94:	3728      	adds	r7, #40	; 0x28
 8015c96:	46bd      	mov	sp, r7
 8015c98:	bd80      	pop	{r7, pc}
 8015c9a:	bf00      	nop
 8015c9c:	2001b304 	.word	0x2001b304
 8015ca0:	e0001004 	.word	0xe0001004
 8015ca4:	2001daa0 	.word	0x2001daa0

08015ca8 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8015ca8:	b580      	push	{r7, lr}
 8015caa:	b086      	sub	sp, #24
 8015cac:	af02      	add	r7, sp, #8
 8015cae:	60f8      	str	r0, [r7, #12]
 8015cb0:	60b9      	str	r1, [r7, #8]
 8015cb2:	607a      	str	r2, [r7, #4]
 8015cb4:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8015cb6:	2300      	movs	r3, #0
 8015cb8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8015cbc:	4917      	ldr	r1, [pc, #92]	; (8015d1c <SEGGER_SYSVIEW_Init+0x74>)
 8015cbe:	4818      	ldr	r0, [pc, #96]	; (8015d20 <SEGGER_SYSVIEW_Init+0x78>)
 8015cc0:	f7ff fcfc 	bl	80156bc <SEGGER_RTT_AllocUpBuffer>
 8015cc4:	4603      	mov	r3, r0
 8015cc6:	b2da      	uxtb	r2, r3
 8015cc8:	4b16      	ldr	r3, [pc, #88]	; (8015d24 <SEGGER_SYSVIEW_Init+0x7c>)
 8015cca:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8015ccc:	4b15      	ldr	r3, [pc, #84]	; (8015d24 <SEGGER_SYSVIEW_Init+0x7c>)
 8015cce:	785a      	ldrb	r2, [r3, #1]
 8015cd0:	4b14      	ldr	r3, [pc, #80]	; (8015d24 <SEGGER_SYSVIEW_Init+0x7c>)
 8015cd2:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8015cd4:	4b13      	ldr	r3, [pc, #76]	; (8015d24 <SEGGER_SYSVIEW_Init+0x7c>)
 8015cd6:	7e1b      	ldrb	r3, [r3, #24]
 8015cd8:	4618      	mov	r0, r3
 8015cda:	2300      	movs	r3, #0
 8015cdc:	9300      	str	r3, [sp, #0]
 8015cde:	2308      	movs	r3, #8
 8015ce0:	4a11      	ldr	r2, [pc, #68]	; (8015d28 <SEGGER_SYSVIEW_Init+0x80>)
 8015ce2:	490f      	ldr	r1, [pc, #60]	; (8015d20 <SEGGER_SYSVIEW_Init+0x78>)
 8015ce4:	f7ff fd6e 	bl	80157c4 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8015ce8:	4b0e      	ldr	r3, [pc, #56]	; (8015d24 <SEGGER_SYSVIEW_Init+0x7c>)
 8015cea:	2200      	movs	r2, #0
 8015cec:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8015cee:	4b0f      	ldr	r3, [pc, #60]	; (8015d2c <SEGGER_SYSVIEW_Init+0x84>)
 8015cf0:	681b      	ldr	r3, [r3, #0]
 8015cf2:	4a0c      	ldr	r2, [pc, #48]	; (8015d24 <SEGGER_SYSVIEW_Init+0x7c>)
 8015cf4:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8015cf6:	4a0b      	ldr	r2, [pc, #44]	; (8015d24 <SEGGER_SYSVIEW_Init+0x7c>)
 8015cf8:	687b      	ldr	r3, [r7, #4]
 8015cfa:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8015cfc:	4a09      	ldr	r2, [pc, #36]	; (8015d24 <SEGGER_SYSVIEW_Init+0x7c>)
 8015cfe:	68fb      	ldr	r3, [r7, #12]
 8015d00:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8015d02:	4a08      	ldr	r2, [pc, #32]	; (8015d24 <SEGGER_SYSVIEW_Init+0x7c>)
 8015d04:	68bb      	ldr	r3, [r7, #8]
 8015d06:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8015d08:	4a06      	ldr	r2, [pc, #24]	; (8015d24 <SEGGER_SYSVIEW_Init+0x7c>)
 8015d0a:	683b      	ldr	r3, [r7, #0]
 8015d0c:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8015d0e:	4b05      	ldr	r3, [pc, #20]	; (8015d24 <SEGGER_SYSVIEW_Init+0x7c>)
 8015d10:	2200      	movs	r2, #0
 8015d12:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8015d14:	bf00      	nop
 8015d16:	3710      	adds	r7, #16
 8015d18:	46bd      	mov	sp, r7
 8015d1a:	bd80      	pop	{r7, pc}
 8015d1c:	2001aefc 	.word	0x2001aefc
 8015d20:	080178c0 	.word	0x080178c0
 8015d24:	2001b304 	.word	0x2001b304
 8015d28:	2001b2fc 	.word	0x2001b2fc
 8015d2c:	e0001004 	.word	0xe0001004

08015d30 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8015d30:	b480      	push	{r7}
 8015d32:	b083      	sub	sp, #12
 8015d34:	af00      	add	r7, sp, #0
 8015d36:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8015d38:	4a04      	ldr	r2, [pc, #16]	; (8015d4c <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8015d3a:	687b      	ldr	r3, [r7, #4]
 8015d3c:	6113      	str	r3, [r2, #16]
}
 8015d3e:	bf00      	nop
 8015d40:	370c      	adds	r7, #12
 8015d42:	46bd      	mov	sp, r7
 8015d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d48:	4770      	bx	lr
 8015d4a:	bf00      	nop
 8015d4c:	2001b304 	.word	0x2001b304

08015d50 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8015d50:	b580      	push	{r7, lr}
 8015d52:	b084      	sub	sp, #16
 8015d54:	af00      	add	r7, sp, #0
 8015d56:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8015d58:	f3ef 8311 	mrs	r3, BASEPRI
 8015d5c:	f04f 0120 	mov.w	r1, #32
 8015d60:	f381 8811 	msr	BASEPRI, r1
 8015d64:	60fb      	str	r3, [r7, #12]
 8015d66:	4808      	ldr	r0, [pc, #32]	; (8015d88 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8015d68:	f7ff fdc8 	bl	80158fc <_PreparePacket>
 8015d6c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8015d6e:	687a      	ldr	r2, [r7, #4]
 8015d70:	68b9      	ldr	r1, [r7, #8]
 8015d72:	68b8      	ldr	r0, [r7, #8]
 8015d74:	f7ff feb2 	bl	8015adc <_SendPacket>
  RECORD_END();
 8015d78:	68fb      	ldr	r3, [r7, #12]
 8015d7a:	f383 8811 	msr	BASEPRI, r3
}
 8015d7e:	bf00      	nop
 8015d80:	3710      	adds	r7, #16
 8015d82:	46bd      	mov	sp, r7
 8015d84:	bd80      	pop	{r7, pc}
 8015d86:	bf00      	nop
 8015d88:	2001b334 	.word	0x2001b334

08015d8c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8015d8c:	b580      	push	{r7, lr}
 8015d8e:	b088      	sub	sp, #32
 8015d90:	af00      	add	r7, sp, #0
 8015d92:	6078      	str	r0, [r7, #4]
 8015d94:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8015d96:	f3ef 8311 	mrs	r3, BASEPRI
 8015d9a:	f04f 0120 	mov.w	r1, #32
 8015d9e:	f381 8811 	msr	BASEPRI, r1
 8015da2:	617b      	str	r3, [r7, #20]
 8015da4:	4816      	ldr	r0, [pc, #88]	; (8015e00 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8015da6:	f7ff fda9 	bl	80158fc <_PreparePacket>
 8015daa:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8015dac:	693b      	ldr	r3, [r7, #16]
 8015dae:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8015db0:	68fb      	ldr	r3, [r7, #12]
 8015db2:	61fb      	str	r3, [r7, #28]
 8015db4:	683b      	ldr	r3, [r7, #0]
 8015db6:	61bb      	str	r3, [r7, #24]
 8015db8:	e00b      	b.n	8015dd2 <SEGGER_SYSVIEW_RecordU32+0x46>
 8015dba:	69bb      	ldr	r3, [r7, #24]
 8015dbc:	b2da      	uxtb	r2, r3
 8015dbe:	69fb      	ldr	r3, [r7, #28]
 8015dc0:	1c59      	adds	r1, r3, #1
 8015dc2:	61f9      	str	r1, [r7, #28]
 8015dc4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8015dc8:	b2d2      	uxtb	r2, r2
 8015dca:	701a      	strb	r2, [r3, #0]
 8015dcc:	69bb      	ldr	r3, [r7, #24]
 8015dce:	09db      	lsrs	r3, r3, #7
 8015dd0:	61bb      	str	r3, [r7, #24]
 8015dd2:	69bb      	ldr	r3, [r7, #24]
 8015dd4:	2b7f      	cmp	r3, #127	; 0x7f
 8015dd6:	d8f0      	bhi.n	8015dba <SEGGER_SYSVIEW_RecordU32+0x2e>
 8015dd8:	69fb      	ldr	r3, [r7, #28]
 8015dda:	1c5a      	adds	r2, r3, #1
 8015ddc:	61fa      	str	r2, [r7, #28]
 8015dde:	69ba      	ldr	r2, [r7, #24]
 8015de0:	b2d2      	uxtb	r2, r2
 8015de2:	701a      	strb	r2, [r3, #0]
 8015de4:	69fb      	ldr	r3, [r7, #28]
 8015de6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8015de8:	687a      	ldr	r2, [r7, #4]
 8015dea:	68f9      	ldr	r1, [r7, #12]
 8015dec:	6938      	ldr	r0, [r7, #16]
 8015dee:	f7ff fe75 	bl	8015adc <_SendPacket>
  RECORD_END();
 8015df2:	697b      	ldr	r3, [r7, #20]
 8015df4:	f383 8811 	msr	BASEPRI, r3
}
 8015df8:	bf00      	nop
 8015dfa:	3720      	adds	r7, #32
 8015dfc:	46bd      	mov	sp, r7
 8015dfe:	bd80      	pop	{r7, pc}
 8015e00:	2001b334 	.word	0x2001b334

08015e04 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8015e04:	b580      	push	{r7, lr}
 8015e06:	b08c      	sub	sp, #48	; 0x30
 8015e08:	af00      	add	r7, sp, #0
 8015e0a:	60f8      	str	r0, [r7, #12]
 8015e0c:	60b9      	str	r1, [r7, #8]
 8015e0e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8015e10:	f3ef 8311 	mrs	r3, BASEPRI
 8015e14:	f04f 0120 	mov.w	r1, #32
 8015e18:	f381 8811 	msr	BASEPRI, r1
 8015e1c:	61fb      	str	r3, [r7, #28]
 8015e1e:	4825      	ldr	r0, [pc, #148]	; (8015eb4 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8015e20:	f7ff fd6c 	bl	80158fc <_PreparePacket>
 8015e24:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8015e26:	69bb      	ldr	r3, [r7, #24]
 8015e28:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8015e2a:	697b      	ldr	r3, [r7, #20]
 8015e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015e2e:	68bb      	ldr	r3, [r7, #8]
 8015e30:	62bb      	str	r3, [r7, #40]	; 0x28
 8015e32:	e00b      	b.n	8015e4c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8015e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e36:	b2da      	uxtb	r2, r3
 8015e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e3a:	1c59      	adds	r1, r3, #1
 8015e3c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8015e3e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8015e42:	b2d2      	uxtb	r2, r2
 8015e44:	701a      	strb	r2, [r3, #0]
 8015e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e48:	09db      	lsrs	r3, r3, #7
 8015e4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8015e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e4e:	2b7f      	cmp	r3, #127	; 0x7f
 8015e50:	d8f0      	bhi.n	8015e34 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8015e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e54:	1c5a      	adds	r2, r3, #1
 8015e56:	62fa      	str	r2, [r7, #44]	; 0x2c
 8015e58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015e5a:	b2d2      	uxtb	r2, r2
 8015e5c:	701a      	strb	r2, [r3, #0]
 8015e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e60:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8015e62:	697b      	ldr	r3, [r7, #20]
 8015e64:	627b      	str	r3, [r7, #36]	; 0x24
 8015e66:	687b      	ldr	r3, [r7, #4]
 8015e68:	623b      	str	r3, [r7, #32]
 8015e6a:	e00b      	b.n	8015e84 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8015e6c:	6a3b      	ldr	r3, [r7, #32]
 8015e6e:	b2da      	uxtb	r2, r3
 8015e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e72:	1c59      	adds	r1, r3, #1
 8015e74:	6279      	str	r1, [r7, #36]	; 0x24
 8015e76:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8015e7a:	b2d2      	uxtb	r2, r2
 8015e7c:	701a      	strb	r2, [r3, #0]
 8015e7e:	6a3b      	ldr	r3, [r7, #32]
 8015e80:	09db      	lsrs	r3, r3, #7
 8015e82:	623b      	str	r3, [r7, #32]
 8015e84:	6a3b      	ldr	r3, [r7, #32]
 8015e86:	2b7f      	cmp	r3, #127	; 0x7f
 8015e88:	d8f0      	bhi.n	8015e6c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8015e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e8c:	1c5a      	adds	r2, r3, #1
 8015e8e:	627a      	str	r2, [r7, #36]	; 0x24
 8015e90:	6a3a      	ldr	r2, [r7, #32]
 8015e92:	b2d2      	uxtb	r2, r2
 8015e94:	701a      	strb	r2, [r3, #0]
 8015e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e98:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8015e9a:	68fa      	ldr	r2, [r7, #12]
 8015e9c:	6979      	ldr	r1, [r7, #20]
 8015e9e:	69b8      	ldr	r0, [r7, #24]
 8015ea0:	f7ff fe1c 	bl	8015adc <_SendPacket>
  RECORD_END();
 8015ea4:	69fb      	ldr	r3, [r7, #28]
 8015ea6:	f383 8811 	msr	BASEPRI, r3
}
 8015eaa:	bf00      	nop
 8015eac:	3730      	adds	r7, #48	; 0x30
 8015eae:	46bd      	mov	sp, r7
 8015eb0:	bd80      	pop	{r7, pc}
 8015eb2:	bf00      	nop
 8015eb4:	2001b334 	.word	0x2001b334

08015eb8 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8015eb8:	b580      	push	{r7, lr}
 8015eba:	b08e      	sub	sp, #56	; 0x38
 8015ebc:	af00      	add	r7, sp, #0
 8015ebe:	60f8      	str	r0, [r7, #12]
 8015ec0:	60b9      	str	r1, [r7, #8]
 8015ec2:	607a      	str	r2, [r7, #4]
 8015ec4:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8015ec6:	f3ef 8311 	mrs	r3, BASEPRI
 8015eca:	f04f 0120 	mov.w	r1, #32
 8015ece:	f381 8811 	msr	BASEPRI, r1
 8015ed2:	61fb      	str	r3, [r7, #28]
 8015ed4:	4832      	ldr	r0, [pc, #200]	; (8015fa0 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8015ed6:	f7ff fd11 	bl	80158fc <_PreparePacket>
 8015eda:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8015edc:	69bb      	ldr	r3, [r7, #24]
 8015ede:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8015ee0:	697b      	ldr	r3, [r7, #20]
 8015ee2:	637b      	str	r3, [r7, #52]	; 0x34
 8015ee4:	68bb      	ldr	r3, [r7, #8]
 8015ee6:	633b      	str	r3, [r7, #48]	; 0x30
 8015ee8:	e00b      	b.n	8015f02 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8015eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015eec:	b2da      	uxtb	r2, r3
 8015eee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015ef0:	1c59      	adds	r1, r3, #1
 8015ef2:	6379      	str	r1, [r7, #52]	; 0x34
 8015ef4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8015ef8:	b2d2      	uxtb	r2, r2
 8015efa:	701a      	strb	r2, [r3, #0]
 8015efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015efe:	09db      	lsrs	r3, r3, #7
 8015f00:	633b      	str	r3, [r7, #48]	; 0x30
 8015f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f04:	2b7f      	cmp	r3, #127	; 0x7f
 8015f06:	d8f0      	bhi.n	8015eea <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8015f08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015f0a:	1c5a      	adds	r2, r3, #1
 8015f0c:	637a      	str	r2, [r7, #52]	; 0x34
 8015f0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015f10:	b2d2      	uxtb	r2, r2
 8015f12:	701a      	strb	r2, [r3, #0]
 8015f14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015f16:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8015f18:	697b      	ldr	r3, [r7, #20]
 8015f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015f1c:	687b      	ldr	r3, [r7, #4]
 8015f1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8015f20:	e00b      	b.n	8015f3a <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8015f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f24:	b2da      	uxtb	r2, r3
 8015f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f28:	1c59      	adds	r1, r3, #1
 8015f2a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8015f2c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8015f30:	b2d2      	uxtb	r2, r2
 8015f32:	701a      	strb	r2, [r3, #0]
 8015f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f36:	09db      	lsrs	r3, r3, #7
 8015f38:	62bb      	str	r3, [r7, #40]	; 0x28
 8015f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f3c:	2b7f      	cmp	r3, #127	; 0x7f
 8015f3e:	d8f0      	bhi.n	8015f22 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8015f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f42:	1c5a      	adds	r2, r3, #1
 8015f44:	62fa      	str	r2, [r7, #44]	; 0x2c
 8015f46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015f48:	b2d2      	uxtb	r2, r2
 8015f4a:	701a      	strb	r2, [r3, #0]
 8015f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f4e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8015f50:	697b      	ldr	r3, [r7, #20]
 8015f52:	627b      	str	r3, [r7, #36]	; 0x24
 8015f54:	683b      	ldr	r3, [r7, #0]
 8015f56:	623b      	str	r3, [r7, #32]
 8015f58:	e00b      	b.n	8015f72 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8015f5a:	6a3b      	ldr	r3, [r7, #32]
 8015f5c:	b2da      	uxtb	r2, r3
 8015f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f60:	1c59      	adds	r1, r3, #1
 8015f62:	6279      	str	r1, [r7, #36]	; 0x24
 8015f64:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8015f68:	b2d2      	uxtb	r2, r2
 8015f6a:	701a      	strb	r2, [r3, #0]
 8015f6c:	6a3b      	ldr	r3, [r7, #32]
 8015f6e:	09db      	lsrs	r3, r3, #7
 8015f70:	623b      	str	r3, [r7, #32]
 8015f72:	6a3b      	ldr	r3, [r7, #32]
 8015f74:	2b7f      	cmp	r3, #127	; 0x7f
 8015f76:	d8f0      	bhi.n	8015f5a <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8015f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f7a:	1c5a      	adds	r2, r3, #1
 8015f7c:	627a      	str	r2, [r7, #36]	; 0x24
 8015f7e:	6a3a      	ldr	r2, [r7, #32]
 8015f80:	b2d2      	uxtb	r2, r2
 8015f82:	701a      	strb	r2, [r3, #0]
 8015f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f86:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8015f88:	68fa      	ldr	r2, [r7, #12]
 8015f8a:	6979      	ldr	r1, [r7, #20]
 8015f8c:	69b8      	ldr	r0, [r7, #24]
 8015f8e:	f7ff fda5 	bl	8015adc <_SendPacket>
  RECORD_END();
 8015f92:	69fb      	ldr	r3, [r7, #28]
 8015f94:	f383 8811 	msr	BASEPRI, r3
}
 8015f98:	bf00      	nop
 8015f9a:	3738      	adds	r7, #56	; 0x38
 8015f9c:	46bd      	mov	sp, r7
 8015f9e:	bd80      	pop	{r7, pc}
 8015fa0:	2001b334 	.word	0x2001b334

08015fa4 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8015fa4:	b580      	push	{r7, lr}
 8015fa6:	b090      	sub	sp, #64	; 0x40
 8015fa8:	af00      	add	r7, sp, #0
 8015faa:	60f8      	str	r0, [r7, #12]
 8015fac:	60b9      	str	r1, [r7, #8]
 8015fae:	607a      	str	r2, [r7, #4]
 8015fb0:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8015fb2:	f3ef 8311 	mrs	r3, BASEPRI
 8015fb6:	f04f 0120 	mov.w	r1, #32
 8015fba:	f381 8811 	msr	BASEPRI, r1
 8015fbe:	61fb      	str	r3, [r7, #28]
 8015fc0:	4840      	ldr	r0, [pc, #256]	; (80160c4 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8015fc2:	f7ff fc9b 	bl	80158fc <_PreparePacket>
 8015fc6:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8015fc8:	69bb      	ldr	r3, [r7, #24]
 8015fca:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8015fcc:	697b      	ldr	r3, [r7, #20]
 8015fce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8015fd0:	68bb      	ldr	r3, [r7, #8]
 8015fd2:	63bb      	str	r3, [r7, #56]	; 0x38
 8015fd4:	e00b      	b.n	8015fee <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8015fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015fd8:	b2da      	uxtb	r2, r3
 8015fda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015fdc:	1c59      	adds	r1, r3, #1
 8015fde:	63f9      	str	r1, [r7, #60]	; 0x3c
 8015fe0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8015fe4:	b2d2      	uxtb	r2, r2
 8015fe6:	701a      	strb	r2, [r3, #0]
 8015fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015fea:	09db      	lsrs	r3, r3, #7
 8015fec:	63bb      	str	r3, [r7, #56]	; 0x38
 8015fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015ff0:	2b7f      	cmp	r3, #127	; 0x7f
 8015ff2:	d8f0      	bhi.n	8015fd6 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8015ff4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015ff6:	1c5a      	adds	r2, r3, #1
 8015ff8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8015ffa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015ffc:	b2d2      	uxtb	r2, r2
 8015ffe:	701a      	strb	r2, [r3, #0]
 8016000:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016002:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8016004:	697b      	ldr	r3, [r7, #20]
 8016006:	637b      	str	r3, [r7, #52]	; 0x34
 8016008:	687b      	ldr	r3, [r7, #4]
 801600a:	633b      	str	r3, [r7, #48]	; 0x30
 801600c:	e00b      	b.n	8016026 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 801600e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016010:	b2da      	uxtb	r2, r3
 8016012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016014:	1c59      	adds	r1, r3, #1
 8016016:	6379      	str	r1, [r7, #52]	; 0x34
 8016018:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801601c:	b2d2      	uxtb	r2, r2
 801601e:	701a      	strb	r2, [r3, #0]
 8016020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016022:	09db      	lsrs	r3, r3, #7
 8016024:	633b      	str	r3, [r7, #48]	; 0x30
 8016026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016028:	2b7f      	cmp	r3, #127	; 0x7f
 801602a:	d8f0      	bhi.n	801600e <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 801602c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801602e:	1c5a      	adds	r2, r3, #1
 8016030:	637a      	str	r2, [r7, #52]	; 0x34
 8016032:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016034:	b2d2      	uxtb	r2, r2
 8016036:	701a      	strb	r2, [r3, #0]
 8016038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801603a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 801603c:	697b      	ldr	r3, [r7, #20]
 801603e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016040:	683b      	ldr	r3, [r7, #0]
 8016042:	62bb      	str	r3, [r7, #40]	; 0x28
 8016044:	e00b      	b.n	801605e <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8016046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016048:	b2da      	uxtb	r2, r3
 801604a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801604c:	1c59      	adds	r1, r3, #1
 801604e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8016050:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8016054:	b2d2      	uxtb	r2, r2
 8016056:	701a      	strb	r2, [r3, #0]
 8016058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801605a:	09db      	lsrs	r3, r3, #7
 801605c:	62bb      	str	r3, [r7, #40]	; 0x28
 801605e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016060:	2b7f      	cmp	r3, #127	; 0x7f
 8016062:	d8f0      	bhi.n	8016046 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8016064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016066:	1c5a      	adds	r2, r3, #1
 8016068:	62fa      	str	r2, [r7, #44]	; 0x2c
 801606a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801606c:	b2d2      	uxtb	r2, r2
 801606e:	701a      	strb	r2, [r3, #0]
 8016070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016072:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8016074:	697b      	ldr	r3, [r7, #20]
 8016076:	627b      	str	r3, [r7, #36]	; 0x24
 8016078:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801607a:	623b      	str	r3, [r7, #32]
 801607c:	e00b      	b.n	8016096 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 801607e:	6a3b      	ldr	r3, [r7, #32]
 8016080:	b2da      	uxtb	r2, r3
 8016082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016084:	1c59      	adds	r1, r3, #1
 8016086:	6279      	str	r1, [r7, #36]	; 0x24
 8016088:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801608c:	b2d2      	uxtb	r2, r2
 801608e:	701a      	strb	r2, [r3, #0]
 8016090:	6a3b      	ldr	r3, [r7, #32]
 8016092:	09db      	lsrs	r3, r3, #7
 8016094:	623b      	str	r3, [r7, #32]
 8016096:	6a3b      	ldr	r3, [r7, #32]
 8016098:	2b7f      	cmp	r3, #127	; 0x7f
 801609a:	d8f0      	bhi.n	801607e <SEGGER_SYSVIEW_RecordU32x4+0xda>
 801609c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801609e:	1c5a      	adds	r2, r3, #1
 80160a0:	627a      	str	r2, [r7, #36]	; 0x24
 80160a2:	6a3a      	ldr	r2, [r7, #32]
 80160a4:	b2d2      	uxtb	r2, r2
 80160a6:	701a      	strb	r2, [r3, #0]
 80160a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160aa:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80160ac:	68fa      	ldr	r2, [r7, #12]
 80160ae:	6979      	ldr	r1, [r7, #20]
 80160b0:	69b8      	ldr	r0, [r7, #24]
 80160b2:	f7ff fd13 	bl	8015adc <_SendPacket>
  RECORD_END();
 80160b6:	69fb      	ldr	r3, [r7, #28]
 80160b8:	f383 8811 	msr	BASEPRI, r3
}
 80160bc:	bf00      	nop
 80160be:	3740      	adds	r7, #64	; 0x40
 80160c0:	46bd      	mov	sp, r7
 80160c2:	bd80      	pop	{r7, pc}
 80160c4:	2001b334 	.word	0x2001b334

080160c8 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80160c8:	b580      	push	{r7, lr}
 80160ca:	b08c      	sub	sp, #48	; 0x30
 80160cc:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80160ce:	4b58      	ldr	r3, [pc, #352]	; (8016230 <SEGGER_SYSVIEW_Start+0x168>)
 80160d0:	2201      	movs	r2, #1
 80160d2:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80160d4:	f3ef 8311 	mrs	r3, BASEPRI
 80160d8:	f04f 0120 	mov.w	r1, #32
 80160dc:	f381 8811 	msr	BASEPRI, r1
 80160e0:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80160e2:	4b53      	ldr	r3, [pc, #332]	; (8016230 <SEGGER_SYSVIEW_Start+0x168>)
 80160e4:	785b      	ldrb	r3, [r3, #1]
 80160e6:	220a      	movs	r2, #10
 80160e8:	4952      	ldr	r1, [pc, #328]	; (8016234 <SEGGER_SYSVIEW_Start+0x16c>)
 80160ea:	4618      	mov	r0, r3
 80160ec:	f7ea f870 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80160f0:	68fb      	ldr	r3, [r7, #12]
 80160f2:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80160f6:	200a      	movs	r0, #10
 80160f8:	f7ff fe2a 	bl	8015d50 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80160fc:	f3ef 8311 	mrs	r3, BASEPRI
 8016100:	f04f 0120 	mov.w	r1, #32
 8016104:	f381 8811 	msr	BASEPRI, r1
 8016108:	60bb      	str	r3, [r7, #8]
 801610a:	484b      	ldr	r0, [pc, #300]	; (8016238 <SEGGER_SYSVIEW_Start+0x170>)
 801610c:	f7ff fbf6 	bl	80158fc <_PreparePacket>
 8016110:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8016112:	687b      	ldr	r3, [r7, #4]
 8016114:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8016116:	683b      	ldr	r3, [r7, #0]
 8016118:	62fb      	str	r3, [r7, #44]	; 0x2c
 801611a:	4b45      	ldr	r3, [pc, #276]	; (8016230 <SEGGER_SYSVIEW_Start+0x168>)
 801611c:	685b      	ldr	r3, [r3, #4]
 801611e:	62bb      	str	r3, [r7, #40]	; 0x28
 8016120:	e00b      	b.n	801613a <SEGGER_SYSVIEW_Start+0x72>
 8016122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016124:	b2da      	uxtb	r2, r3
 8016126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016128:	1c59      	adds	r1, r3, #1
 801612a:	62f9      	str	r1, [r7, #44]	; 0x2c
 801612c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8016130:	b2d2      	uxtb	r2, r2
 8016132:	701a      	strb	r2, [r3, #0]
 8016134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016136:	09db      	lsrs	r3, r3, #7
 8016138:	62bb      	str	r3, [r7, #40]	; 0x28
 801613a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801613c:	2b7f      	cmp	r3, #127	; 0x7f
 801613e:	d8f0      	bhi.n	8016122 <SEGGER_SYSVIEW_Start+0x5a>
 8016140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016142:	1c5a      	adds	r2, r3, #1
 8016144:	62fa      	str	r2, [r7, #44]	; 0x2c
 8016146:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016148:	b2d2      	uxtb	r2, r2
 801614a:	701a      	strb	r2, [r3, #0]
 801614c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801614e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8016150:	683b      	ldr	r3, [r7, #0]
 8016152:	627b      	str	r3, [r7, #36]	; 0x24
 8016154:	4b36      	ldr	r3, [pc, #216]	; (8016230 <SEGGER_SYSVIEW_Start+0x168>)
 8016156:	689b      	ldr	r3, [r3, #8]
 8016158:	623b      	str	r3, [r7, #32]
 801615a:	e00b      	b.n	8016174 <SEGGER_SYSVIEW_Start+0xac>
 801615c:	6a3b      	ldr	r3, [r7, #32]
 801615e:	b2da      	uxtb	r2, r3
 8016160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016162:	1c59      	adds	r1, r3, #1
 8016164:	6279      	str	r1, [r7, #36]	; 0x24
 8016166:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801616a:	b2d2      	uxtb	r2, r2
 801616c:	701a      	strb	r2, [r3, #0]
 801616e:	6a3b      	ldr	r3, [r7, #32]
 8016170:	09db      	lsrs	r3, r3, #7
 8016172:	623b      	str	r3, [r7, #32]
 8016174:	6a3b      	ldr	r3, [r7, #32]
 8016176:	2b7f      	cmp	r3, #127	; 0x7f
 8016178:	d8f0      	bhi.n	801615c <SEGGER_SYSVIEW_Start+0x94>
 801617a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801617c:	1c5a      	adds	r2, r3, #1
 801617e:	627a      	str	r2, [r7, #36]	; 0x24
 8016180:	6a3a      	ldr	r2, [r7, #32]
 8016182:	b2d2      	uxtb	r2, r2
 8016184:	701a      	strb	r2, [r3, #0]
 8016186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016188:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 801618a:	683b      	ldr	r3, [r7, #0]
 801618c:	61fb      	str	r3, [r7, #28]
 801618e:	4b28      	ldr	r3, [pc, #160]	; (8016230 <SEGGER_SYSVIEW_Start+0x168>)
 8016190:	691b      	ldr	r3, [r3, #16]
 8016192:	61bb      	str	r3, [r7, #24]
 8016194:	e00b      	b.n	80161ae <SEGGER_SYSVIEW_Start+0xe6>
 8016196:	69bb      	ldr	r3, [r7, #24]
 8016198:	b2da      	uxtb	r2, r3
 801619a:	69fb      	ldr	r3, [r7, #28]
 801619c:	1c59      	adds	r1, r3, #1
 801619e:	61f9      	str	r1, [r7, #28]
 80161a0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80161a4:	b2d2      	uxtb	r2, r2
 80161a6:	701a      	strb	r2, [r3, #0]
 80161a8:	69bb      	ldr	r3, [r7, #24]
 80161aa:	09db      	lsrs	r3, r3, #7
 80161ac:	61bb      	str	r3, [r7, #24]
 80161ae:	69bb      	ldr	r3, [r7, #24]
 80161b0:	2b7f      	cmp	r3, #127	; 0x7f
 80161b2:	d8f0      	bhi.n	8016196 <SEGGER_SYSVIEW_Start+0xce>
 80161b4:	69fb      	ldr	r3, [r7, #28]
 80161b6:	1c5a      	adds	r2, r3, #1
 80161b8:	61fa      	str	r2, [r7, #28]
 80161ba:	69ba      	ldr	r2, [r7, #24]
 80161bc:	b2d2      	uxtb	r2, r2
 80161be:	701a      	strb	r2, [r3, #0]
 80161c0:	69fb      	ldr	r3, [r7, #28]
 80161c2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80161c4:	683b      	ldr	r3, [r7, #0]
 80161c6:	617b      	str	r3, [r7, #20]
 80161c8:	2300      	movs	r3, #0
 80161ca:	613b      	str	r3, [r7, #16]
 80161cc:	e00b      	b.n	80161e6 <SEGGER_SYSVIEW_Start+0x11e>
 80161ce:	693b      	ldr	r3, [r7, #16]
 80161d0:	b2da      	uxtb	r2, r3
 80161d2:	697b      	ldr	r3, [r7, #20]
 80161d4:	1c59      	adds	r1, r3, #1
 80161d6:	6179      	str	r1, [r7, #20]
 80161d8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80161dc:	b2d2      	uxtb	r2, r2
 80161de:	701a      	strb	r2, [r3, #0]
 80161e0:	693b      	ldr	r3, [r7, #16]
 80161e2:	09db      	lsrs	r3, r3, #7
 80161e4:	613b      	str	r3, [r7, #16]
 80161e6:	693b      	ldr	r3, [r7, #16]
 80161e8:	2b7f      	cmp	r3, #127	; 0x7f
 80161ea:	d8f0      	bhi.n	80161ce <SEGGER_SYSVIEW_Start+0x106>
 80161ec:	697b      	ldr	r3, [r7, #20]
 80161ee:	1c5a      	adds	r2, r3, #1
 80161f0:	617a      	str	r2, [r7, #20]
 80161f2:	693a      	ldr	r2, [r7, #16]
 80161f4:	b2d2      	uxtb	r2, r2
 80161f6:	701a      	strb	r2, [r3, #0]
 80161f8:	697b      	ldr	r3, [r7, #20]
 80161fa:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80161fc:	2218      	movs	r2, #24
 80161fe:	6839      	ldr	r1, [r7, #0]
 8016200:	6878      	ldr	r0, [r7, #4]
 8016202:	f7ff fc6b 	bl	8015adc <_SendPacket>
      RECORD_END();
 8016206:	68bb      	ldr	r3, [r7, #8]
 8016208:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 801620c:	4b08      	ldr	r3, [pc, #32]	; (8016230 <SEGGER_SYSVIEW_Start+0x168>)
 801620e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016210:	2b00      	cmp	r3, #0
 8016212:	d002      	beq.n	801621a <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8016214:	4b06      	ldr	r3, [pc, #24]	; (8016230 <SEGGER_SYSVIEW_Start+0x168>)
 8016216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016218:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 801621a:	f000 f9eb 	bl	80165f4 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 801621e:	f000 f9b1 	bl	8016584 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8016222:	f000 fba9 	bl	8016978 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8016226:	bf00      	nop
 8016228:	3730      	adds	r7, #48	; 0x30
 801622a:	46bd      	mov	sp, r7
 801622c:	bd80      	pop	{r7, pc}
 801622e:	bf00      	nop
 8016230:	2001b304 	.word	0x2001b304
 8016234:	08017ac0 	.word	0x08017ac0
 8016238:	2001b334 	.word	0x2001b334

0801623c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 801623c:	b580      	push	{r7, lr}
 801623e:	b082      	sub	sp, #8
 8016240:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8016242:	f3ef 8311 	mrs	r3, BASEPRI
 8016246:	f04f 0120 	mov.w	r1, #32
 801624a:	f381 8811 	msr	BASEPRI, r1
 801624e:	607b      	str	r3, [r7, #4]
 8016250:	480b      	ldr	r0, [pc, #44]	; (8016280 <SEGGER_SYSVIEW_Stop+0x44>)
 8016252:	f7ff fb53 	bl	80158fc <_PreparePacket>
 8016256:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8016258:	4b0a      	ldr	r3, [pc, #40]	; (8016284 <SEGGER_SYSVIEW_Stop+0x48>)
 801625a:	781b      	ldrb	r3, [r3, #0]
 801625c:	2b00      	cmp	r3, #0
 801625e:	d007      	beq.n	8016270 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8016260:	220b      	movs	r2, #11
 8016262:	6839      	ldr	r1, [r7, #0]
 8016264:	6838      	ldr	r0, [r7, #0]
 8016266:	f7ff fc39 	bl	8015adc <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 801626a:	4b06      	ldr	r3, [pc, #24]	; (8016284 <SEGGER_SYSVIEW_Stop+0x48>)
 801626c:	2200      	movs	r2, #0
 801626e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8016270:	687b      	ldr	r3, [r7, #4]
 8016272:	f383 8811 	msr	BASEPRI, r3
}
 8016276:	bf00      	nop
 8016278:	3708      	adds	r7, #8
 801627a:	46bd      	mov	sp, r7
 801627c:	bd80      	pop	{r7, pc}
 801627e:	bf00      	nop
 8016280:	2001b334 	.word	0x2001b334
 8016284:	2001b304 	.word	0x2001b304

08016288 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8016288:	b580      	push	{r7, lr}
 801628a:	b08c      	sub	sp, #48	; 0x30
 801628c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 801628e:	f3ef 8311 	mrs	r3, BASEPRI
 8016292:	f04f 0120 	mov.w	r1, #32
 8016296:	f381 8811 	msr	BASEPRI, r1
 801629a:	60fb      	str	r3, [r7, #12]
 801629c:	4845      	ldr	r0, [pc, #276]	; (80163b4 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 801629e:	f7ff fb2d 	bl	80158fc <_PreparePacket>
 80162a2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80162a4:	68bb      	ldr	r3, [r7, #8]
 80162a6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80162a8:	687b      	ldr	r3, [r7, #4]
 80162aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80162ac:	4b42      	ldr	r3, [pc, #264]	; (80163b8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80162ae:	685b      	ldr	r3, [r3, #4]
 80162b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80162b2:	e00b      	b.n	80162cc <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80162b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80162b6:	b2da      	uxtb	r2, r3
 80162b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162ba:	1c59      	adds	r1, r3, #1
 80162bc:	62f9      	str	r1, [r7, #44]	; 0x2c
 80162be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80162c2:	b2d2      	uxtb	r2, r2
 80162c4:	701a      	strb	r2, [r3, #0]
 80162c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80162c8:	09db      	lsrs	r3, r3, #7
 80162ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80162cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80162ce:	2b7f      	cmp	r3, #127	; 0x7f
 80162d0:	d8f0      	bhi.n	80162b4 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80162d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162d4:	1c5a      	adds	r2, r3, #1
 80162d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80162d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80162da:	b2d2      	uxtb	r2, r2
 80162dc:	701a      	strb	r2, [r3, #0]
 80162de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162e0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80162e2:	687b      	ldr	r3, [r7, #4]
 80162e4:	627b      	str	r3, [r7, #36]	; 0x24
 80162e6:	4b34      	ldr	r3, [pc, #208]	; (80163b8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80162e8:	689b      	ldr	r3, [r3, #8]
 80162ea:	623b      	str	r3, [r7, #32]
 80162ec:	e00b      	b.n	8016306 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80162ee:	6a3b      	ldr	r3, [r7, #32]
 80162f0:	b2da      	uxtb	r2, r3
 80162f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162f4:	1c59      	adds	r1, r3, #1
 80162f6:	6279      	str	r1, [r7, #36]	; 0x24
 80162f8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80162fc:	b2d2      	uxtb	r2, r2
 80162fe:	701a      	strb	r2, [r3, #0]
 8016300:	6a3b      	ldr	r3, [r7, #32]
 8016302:	09db      	lsrs	r3, r3, #7
 8016304:	623b      	str	r3, [r7, #32]
 8016306:	6a3b      	ldr	r3, [r7, #32]
 8016308:	2b7f      	cmp	r3, #127	; 0x7f
 801630a:	d8f0      	bhi.n	80162ee <SEGGER_SYSVIEW_GetSysDesc+0x66>
 801630c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801630e:	1c5a      	adds	r2, r3, #1
 8016310:	627a      	str	r2, [r7, #36]	; 0x24
 8016312:	6a3a      	ldr	r2, [r7, #32]
 8016314:	b2d2      	uxtb	r2, r2
 8016316:	701a      	strb	r2, [r3, #0]
 8016318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801631a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 801631c:	687b      	ldr	r3, [r7, #4]
 801631e:	61fb      	str	r3, [r7, #28]
 8016320:	4b25      	ldr	r3, [pc, #148]	; (80163b8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8016322:	691b      	ldr	r3, [r3, #16]
 8016324:	61bb      	str	r3, [r7, #24]
 8016326:	e00b      	b.n	8016340 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8016328:	69bb      	ldr	r3, [r7, #24]
 801632a:	b2da      	uxtb	r2, r3
 801632c:	69fb      	ldr	r3, [r7, #28]
 801632e:	1c59      	adds	r1, r3, #1
 8016330:	61f9      	str	r1, [r7, #28]
 8016332:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8016336:	b2d2      	uxtb	r2, r2
 8016338:	701a      	strb	r2, [r3, #0]
 801633a:	69bb      	ldr	r3, [r7, #24]
 801633c:	09db      	lsrs	r3, r3, #7
 801633e:	61bb      	str	r3, [r7, #24]
 8016340:	69bb      	ldr	r3, [r7, #24]
 8016342:	2b7f      	cmp	r3, #127	; 0x7f
 8016344:	d8f0      	bhi.n	8016328 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8016346:	69fb      	ldr	r3, [r7, #28]
 8016348:	1c5a      	adds	r2, r3, #1
 801634a:	61fa      	str	r2, [r7, #28]
 801634c:	69ba      	ldr	r2, [r7, #24]
 801634e:	b2d2      	uxtb	r2, r2
 8016350:	701a      	strb	r2, [r3, #0]
 8016352:	69fb      	ldr	r3, [r7, #28]
 8016354:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8016356:	687b      	ldr	r3, [r7, #4]
 8016358:	617b      	str	r3, [r7, #20]
 801635a:	2300      	movs	r3, #0
 801635c:	613b      	str	r3, [r7, #16]
 801635e:	e00b      	b.n	8016378 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8016360:	693b      	ldr	r3, [r7, #16]
 8016362:	b2da      	uxtb	r2, r3
 8016364:	697b      	ldr	r3, [r7, #20]
 8016366:	1c59      	adds	r1, r3, #1
 8016368:	6179      	str	r1, [r7, #20]
 801636a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801636e:	b2d2      	uxtb	r2, r2
 8016370:	701a      	strb	r2, [r3, #0]
 8016372:	693b      	ldr	r3, [r7, #16]
 8016374:	09db      	lsrs	r3, r3, #7
 8016376:	613b      	str	r3, [r7, #16]
 8016378:	693b      	ldr	r3, [r7, #16]
 801637a:	2b7f      	cmp	r3, #127	; 0x7f
 801637c:	d8f0      	bhi.n	8016360 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 801637e:	697b      	ldr	r3, [r7, #20]
 8016380:	1c5a      	adds	r2, r3, #1
 8016382:	617a      	str	r2, [r7, #20]
 8016384:	693a      	ldr	r2, [r7, #16]
 8016386:	b2d2      	uxtb	r2, r2
 8016388:	701a      	strb	r2, [r3, #0]
 801638a:	697b      	ldr	r3, [r7, #20]
 801638c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 801638e:	2218      	movs	r2, #24
 8016390:	6879      	ldr	r1, [r7, #4]
 8016392:	68b8      	ldr	r0, [r7, #8]
 8016394:	f7ff fba2 	bl	8015adc <_SendPacket>
  RECORD_END();
 8016398:	68fb      	ldr	r3, [r7, #12]
 801639a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 801639e:	4b06      	ldr	r3, [pc, #24]	; (80163b8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80163a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80163a2:	2b00      	cmp	r3, #0
 80163a4:	d002      	beq.n	80163ac <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80163a6:	4b04      	ldr	r3, [pc, #16]	; (80163b8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80163a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80163aa:	4798      	blx	r3
  }
}
 80163ac:	bf00      	nop
 80163ae:	3730      	adds	r7, #48	; 0x30
 80163b0:	46bd      	mov	sp, r7
 80163b2:	bd80      	pop	{r7, pc}
 80163b4:	2001b334 	.word	0x2001b334
 80163b8:	2001b304 	.word	0x2001b304

080163bc <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80163bc:	b580      	push	{r7, lr}
 80163be:	b092      	sub	sp, #72	; 0x48
 80163c0:	af00      	add	r7, sp, #0
 80163c2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80163c4:	f3ef 8311 	mrs	r3, BASEPRI
 80163c8:	f04f 0120 	mov.w	r1, #32
 80163cc:	f381 8811 	msr	BASEPRI, r1
 80163d0:	617b      	str	r3, [r7, #20]
 80163d2:	486a      	ldr	r0, [pc, #424]	; (801657c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80163d4:	f7ff fa92 	bl	80158fc <_PreparePacket>
 80163d8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80163da:	693b      	ldr	r3, [r7, #16]
 80163dc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80163de:	68fb      	ldr	r3, [r7, #12]
 80163e0:	647b      	str	r3, [r7, #68]	; 0x44
 80163e2:	687b      	ldr	r3, [r7, #4]
 80163e4:	681a      	ldr	r2, [r3, #0]
 80163e6:	4b66      	ldr	r3, [pc, #408]	; (8016580 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80163e8:	691b      	ldr	r3, [r3, #16]
 80163ea:	1ad3      	subs	r3, r2, r3
 80163ec:	643b      	str	r3, [r7, #64]	; 0x40
 80163ee:	e00b      	b.n	8016408 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80163f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80163f2:	b2da      	uxtb	r2, r3
 80163f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80163f6:	1c59      	adds	r1, r3, #1
 80163f8:	6479      	str	r1, [r7, #68]	; 0x44
 80163fa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80163fe:	b2d2      	uxtb	r2, r2
 8016400:	701a      	strb	r2, [r3, #0]
 8016402:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016404:	09db      	lsrs	r3, r3, #7
 8016406:	643b      	str	r3, [r7, #64]	; 0x40
 8016408:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801640a:	2b7f      	cmp	r3, #127	; 0x7f
 801640c:	d8f0      	bhi.n	80163f0 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 801640e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016410:	1c5a      	adds	r2, r3, #1
 8016412:	647a      	str	r2, [r7, #68]	; 0x44
 8016414:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8016416:	b2d2      	uxtb	r2, r2
 8016418:	701a      	strb	r2, [r3, #0]
 801641a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801641c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 801641e:	68fb      	ldr	r3, [r7, #12]
 8016420:	63fb      	str	r3, [r7, #60]	; 0x3c
 8016422:	687b      	ldr	r3, [r7, #4]
 8016424:	689b      	ldr	r3, [r3, #8]
 8016426:	63bb      	str	r3, [r7, #56]	; 0x38
 8016428:	e00b      	b.n	8016442 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 801642a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801642c:	b2da      	uxtb	r2, r3
 801642e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016430:	1c59      	adds	r1, r3, #1
 8016432:	63f9      	str	r1, [r7, #60]	; 0x3c
 8016434:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8016438:	b2d2      	uxtb	r2, r2
 801643a:	701a      	strb	r2, [r3, #0]
 801643c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801643e:	09db      	lsrs	r3, r3, #7
 8016440:	63bb      	str	r3, [r7, #56]	; 0x38
 8016442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016444:	2b7f      	cmp	r3, #127	; 0x7f
 8016446:	d8f0      	bhi.n	801642a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8016448:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801644a:	1c5a      	adds	r2, r3, #1
 801644c:	63fa      	str	r2, [r7, #60]	; 0x3c
 801644e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016450:	b2d2      	uxtb	r2, r2
 8016452:	701a      	strb	r2, [r3, #0]
 8016454:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016456:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8016458:	687b      	ldr	r3, [r7, #4]
 801645a:	685b      	ldr	r3, [r3, #4]
 801645c:	2220      	movs	r2, #32
 801645e:	4619      	mov	r1, r3
 8016460:	68f8      	ldr	r0, [r7, #12]
 8016462:	f7ff f9fb 	bl	801585c <_EncodeStr>
 8016466:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8016468:	2209      	movs	r2, #9
 801646a:	68f9      	ldr	r1, [r7, #12]
 801646c:	6938      	ldr	r0, [r7, #16]
 801646e:	f7ff fb35 	bl	8015adc <_SendPacket>
  //
  pPayload = pPayloadStart;
 8016472:	693b      	ldr	r3, [r7, #16]
 8016474:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8016476:	68fb      	ldr	r3, [r7, #12]
 8016478:	637b      	str	r3, [r7, #52]	; 0x34
 801647a:	687b      	ldr	r3, [r7, #4]
 801647c:	681a      	ldr	r2, [r3, #0]
 801647e:	4b40      	ldr	r3, [pc, #256]	; (8016580 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8016480:	691b      	ldr	r3, [r3, #16]
 8016482:	1ad3      	subs	r3, r2, r3
 8016484:	633b      	str	r3, [r7, #48]	; 0x30
 8016486:	e00b      	b.n	80164a0 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8016488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801648a:	b2da      	uxtb	r2, r3
 801648c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801648e:	1c59      	adds	r1, r3, #1
 8016490:	6379      	str	r1, [r7, #52]	; 0x34
 8016492:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8016496:	b2d2      	uxtb	r2, r2
 8016498:	701a      	strb	r2, [r3, #0]
 801649a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801649c:	09db      	lsrs	r3, r3, #7
 801649e:	633b      	str	r3, [r7, #48]	; 0x30
 80164a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164a2:	2b7f      	cmp	r3, #127	; 0x7f
 80164a4:	d8f0      	bhi.n	8016488 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80164a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80164a8:	1c5a      	adds	r2, r3, #1
 80164aa:	637a      	str	r2, [r7, #52]	; 0x34
 80164ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80164ae:	b2d2      	uxtb	r2, r2
 80164b0:	701a      	strb	r2, [r3, #0]
 80164b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80164b4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80164b6:	68fb      	ldr	r3, [r7, #12]
 80164b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80164ba:	687b      	ldr	r3, [r7, #4]
 80164bc:	68db      	ldr	r3, [r3, #12]
 80164be:	62bb      	str	r3, [r7, #40]	; 0x28
 80164c0:	e00b      	b.n	80164da <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80164c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80164c4:	b2da      	uxtb	r2, r3
 80164c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164c8:	1c59      	adds	r1, r3, #1
 80164ca:	62f9      	str	r1, [r7, #44]	; 0x2c
 80164cc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80164d0:	b2d2      	uxtb	r2, r2
 80164d2:	701a      	strb	r2, [r3, #0]
 80164d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80164d6:	09db      	lsrs	r3, r3, #7
 80164d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80164da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80164dc:	2b7f      	cmp	r3, #127	; 0x7f
 80164de:	d8f0      	bhi.n	80164c2 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80164e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164e2:	1c5a      	adds	r2, r3, #1
 80164e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80164e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80164e8:	b2d2      	uxtb	r2, r2
 80164ea:	701a      	strb	r2, [r3, #0]
 80164ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164ee:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80164f0:	68fb      	ldr	r3, [r7, #12]
 80164f2:	627b      	str	r3, [r7, #36]	; 0x24
 80164f4:	687b      	ldr	r3, [r7, #4]
 80164f6:	691b      	ldr	r3, [r3, #16]
 80164f8:	623b      	str	r3, [r7, #32]
 80164fa:	e00b      	b.n	8016514 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80164fc:	6a3b      	ldr	r3, [r7, #32]
 80164fe:	b2da      	uxtb	r2, r3
 8016500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016502:	1c59      	adds	r1, r3, #1
 8016504:	6279      	str	r1, [r7, #36]	; 0x24
 8016506:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801650a:	b2d2      	uxtb	r2, r2
 801650c:	701a      	strb	r2, [r3, #0]
 801650e:	6a3b      	ldr	r3, [r7, #32]
 8016510:	09db      	lsrs	r3, r3, #7
 8016512:	623b      	str	r3, [r7, #32]
 8016514:	6a3b      	ldr	r3, [r7, #32]
 8016516:	2b7f      	cmp	r3, #127	; 0x7f
 8016518:	d8f0      	bhi.n	80164fc <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 801651a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801651c:	1c5a      	adds	r2, r3, #1
 801651e:	627a      	str	r2, [r7, #36]	; 0x24
 8016520:	6a3a      	ldr	r2, [r7, #32]
 8016522:	b2d2      	uxtb	r2, r2
 8016524:	701a      	strb	r2, [r3, #0]
 8016526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016528:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 801652a:	68fb      	ldr	r3, [r7, #12]
 801652c:	61fb      	str	r3, [r7, #28]
 801652e:	2300      	movs	r3, #0
 8016530:	61bb      	str	r3, [r7, #24]
 8016532:	e00b      	b.n	801654c <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8016534:	69bb      	ldr	r3, [r7, #24]
 8016536:	b2da      	uxtb	r2, r3
 8016538:	69fb      	ldr	r3, [r7, #28]
 801653a:	1c59      	adds	r1, r3, #1
 801653c:	61f9      	str	r1, [r7, #28]
 801653e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8016542:	b2d2      	uxtb	r2, r2
 8016544:	701a      	strb	r2, [r3, #0]
 8016546:	69bb      	ldr	r3, [r7, #24]
 8016548:	09db      	lsrs	r3, r3, #7
 801654a:	61bb      	str	r3, [r7, #24]
 801654c:	69bb      	ldr	r3, [r7, #24]
 801654e:	2b7f      	cmp	r3, #127	; 0x7f
 8016550:	d8f0      	bhi.n	8016534 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8016552:	69fb      	ldr	r3, [r7, #28]
 8016554:	1c5a      	adds	r2, r3, #1
 8016556:	61fa      	str	r2, [r7, #28]
 8016558:	69ba      	ldr	r2, [r7, #24]
 801655a:	b2d2      	uxtb	r2, r2
 801655c:	701a      	strb	r2, [r3, #0]
 801655e:	69fb      	ldr	r3, [r7, #28]
 8016560:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8016562:	2215      	movs	r2, #21
 8016564:	68f9      	ldr	r1, [r7, #12]
 8016566:	6938      	ldr	r0, [r7, #16]
 8016568:	f7ff fab8 	bl	8015adc <_SendPacket>
  RECORD_END();
 801656c:	697b      	ldr	r3, [r7, #20]
 801656e:	f383 8811 	msr	BASEPRI, r3
}
 8016572:	bf00      	nop
 8016574:	3748      	adds	r7, #72	; 0x48
 8016576:	46bd      	mov	sp, r7
 8016578:	bd80      	pop	{r7, pc}
 801657a:	bf00      	nop
 801657c:	2001b334 	.word	0x2001b334
 8016580:	2001b304 	.word	0x2001b304

08016584 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8016584:	b580      	push	{r7, lr}
 8016586:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8016588:	4b07      	ldr	r3, [pc, #28]	; (80165a8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 801658a:	6a1b      	ldr	r3, [r3, #32]
 801658c:	2b00      	cmp	r3, #0
 801658e:	d008      	beq.n	80165a2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8016590:	4b05      	ldr	r3, [pc, #20]	; (80165a8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8016592:	6a1b      	ldr	r3, [r3, #32]
 8016594:	685b      	ldr	r3, [r3, #4]
 8016596:	2b00      	cmp	r3, #0
 8016598:	d003      	beq.n	80165a2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 801659a:	4b03      	ldr	r3, [pc, #12]	; (80165a8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 801659c:	6a1b      	ldr	r3, [r3, #32]
 801659e:	685b      	ldr	r3, [r3, #4]
 80165a0:	4798      	blx	r3
  }
}
 80165a2:	bf00      	nop
 80165a4:	bd80      	pop	{r7, pc}
 80165a6:	bf00      	nop
 80165a8:	2001b304 	.word	0x2001b304

080165ac <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80165ac:	b580      	push	{r7, lr}
 80165ae:	b086      	sub	sp, #24
 80165b0:	af00      	add	r7, sp, #0
 80165b2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80165b4:	f3ef 8311 	mrs	r3, BASEPRI
 80165b8:	f04f 0120 	mov.w	r1, #32
 80165bc:	f381 8811 	msr	BASEPRI, r1
 80165c0:	617b      	str	r3, [r7, #20]
 80165c2:	480b      	ldr	r0, [pc, #44]	; (80165f0 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80165c4:	f7ff f99a 	bl	80158fc <_PreparePacket>
 80165c8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80165ca:	2280      	movs	r2, #128	; 0x80
 80165cc:	6879      	ldr	r1, [r7, #4]
 80165ce:	6938      	ldr	r0, [r7, #16]
 80165d0:	f7ff f944 	bl	801585c <_EncodeStr>
 80165d4:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80165d6:	220e      	movs	r2, #14
 80165d8:	68f9      	ldr	r1, [r7, #12]
 80165da:	6938      	ldr	r0, [r7, #16]
 80165dc:	f7ff fa7e 	bl	8015adc <_SendPacket>
  RECORD_END();
 80165e0:	697b      	ldr	r3, [r7, #20]
 80165e2:	f383 8811 	msr	BASEPRI, r3
}
 80165e6:	bf00      	nop
 80165e8:	3718      	adds	r7, #24
 80165ea:	46bd      	mov	sp, r7
 80165ec:	bd80      	pop	{r7, pc}
 80165ee:	bf00      	nop
 80165f0:	2001b334 	.word	0x2001b334

080165f4 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80165f4:	b590      	push	{r4, r7, lr}
 80165f6:	b083      	sub	sp, #12
 80165f8:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80165fa:	4b15      	ldr	r3, [pc, #84]	; (8016650 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80165fc:	6a1b      	ldr	r3, [r3, #32]
 80165fe:	2b00      	cmp	r3, #0
 8016600:	d01a      	beq.n	8016638 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8016602:	4b13      	ldr	r3, [pc, #76]	; (8016650 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8016604:	6a1b      	ldr	r3, [r3, #32]
 8016606:	681b      	ldr	r3, [r3, #0]
 8016608:	2b00      	cmp	r3, #0
 801660a:	d015      	beq.n	8016638 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 801660c:	4b10      	ldr	r3, [pc, #64]	; (8016650 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 801660e:	6a1b      	ldr	r3, [r3, #32]
 8016610:	681b      	ldr	r3, [r3, #0]
 8016612:	4798      	blx	r3
 8016614:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8016618:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 801661a:	e9d7 0100 	ldrd	r0, r1, [r7]
 801661e:	f04f 0200 	mov.w	r2, #0
 8016622:	f04f 0300 	mov.w	r3, #0
 8016626:	000a      	movs	r2, r1
 8016628:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 801662a:	4613      	mov	r3, r2
 801662c:	461a      	mov	r2, r3
 801662e:	4621      	mov	r1, r4
 8016630:	200d      	movs	r0, #13
 8016632:	f7ff fbe7 	bl	8015e04 <SEGGER_SYSVIEW_RecordU32x2>
 8016636:	e006      	b.n	8016646 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8016638:	4b06      	ldr	r3, [pc, #24]	; (8016654 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 801663a:	681b      	ldr	r3, [r3, #0]
 801663c:	4619      	mov	r1, r3
 801663e:	200c      	movs	r0, #12
 8016640:	f7ff fba4 	bl	8015d8c <SEGGER_SYSVIEW_RecordU32>
  }
}
 8016644:	bf00      	nop
 8016646:	bf00      	nop
 8016648:	370c      	adds	r7, #12
 801664a:	46bd      	mov	sp, r7
 801664c:	bd90      	pop	{r4, r7, pc}
 801664e:	bf00      	nop
 8016650:	2001b304 	.word	0x2001b304
 8016654:	e0001004 	.word	0xe0001004

08016658 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8016658:	b580      	push	{r7, lr}
 801665a:	b082      	sub	sp, #8
 801665c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 801665e:	f3ef 8311 	mrs	r3, BASEPRI
 8016662:	f04f 0120 	mov.w	r1, #32
 8016666:	f381 8811 	msr	BASEPRI, r1
 801666a:	607b      	str	r3, [r7, #4]
 801666c:	4807      	ldr	r0, [pc, #28]	; (801668c <SEGGER_SYSVIEW_OnIdle+0x34>)
 801666e:	f7ff f945 	bl	80158fc <_PreparePacket>
 8016672:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8016674:	2211      	movs	r2, #17
 8016676:	6839      	ldr	r1, [r7, #0]
 8016678:	6838      	ldr	r0, [r7, #0]
 801667a:	f7ff fa2f 	bl	8015adc <_SendPacket>
  RECORD_END();
 801667e:	687b      	ldr	r3, [r7, #4]
 8016680:	f383 8811 	msr	BASEPRI, r3
}
 8016684:	bf00      	nop
 8016686:	3708      	adds	r7, #8
 8016688:	46bd      	mov	sp, r7
 801668a:	bd80      	pop	{r7, pc}
 801668c:	2001b334 	.word	0x2001b334

08016690 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8016690:	b580      	push	{r7, lr}
 8016692:	b088      	sub	sp, #32
 8016694:	af00      	add	r7, sp, #0
 8016696:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8016698:	f3ef 8311 	mrs	r3, BASEPRI
 801669c:	f04f 0120 	mov.w	r1, #32
 80166a0:	f381 8811 	msr	BASEPRI, r1
 80166a4:	617b      	str	r3, [r7, #20]
 80166a6:	4819      	ldr	r0, [pc, #100]	; (801670c <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80166a8:	f7ff f928 	bl	80158fc <_PreparePacket>
 80166ac:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80166ae:	693b      	ldr	r3, [r7, #16]
 80166b0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80166b2:	4b17      	ldr	r3, [pc, #92]	; (8016710 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80166b4:	691b      	ldr	r3, [r3, #16]
 80166b6:	687a      	ldr	r2, [r7, #4]
 80166b8:	1ad3      	subs	r3, r2, r3
 80166ba:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80166bc:	68fb      	ldr	r3, [r7, #12]
 80166be:	61fb      	str	r3, [r7, #28]
 80166c0:	687b      	ldr	r3, [r7, #4]
 80166c2:	61bb      	str	r3, [r7, #24]
 80166c4:	e00b      	b.n	80166de <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80166c6:	69bb      	ldr	r3, [r7, #24]
 80166c8:	b2da      	uxtb	r2, r3
 80166ca:	69fb      	ldr	r3, [r7, #28]
 80166cc:	1c59      	adds	r1, r3, #1
 80166ce:	61f9      	str	r1, [r7, #28]
 80166d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80166d4:	b2d2      	uxtb	r2, r2
 80166d6:	701a      	strb	r2, [r3, #0]
 80166d8:	69bb      	ldr	r3, [r7, #24]
 80166da:	09db      	lsrs	r3, r3, #7
 80166dc:	61bb      	str	r3, [r7, #24]
 80166de:	69bb      	ldr	r3, [r7, #24]
 80166e0:	2b7f      	cmp	r3, #127	; 0x7f
 80166e2:	d8f0      	bhi.n	80166c6 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80166e4:	69fb      	ldr	r3, [r7, #28]
 80166e6:	1c5a      	adds	r2, r3, #1
 80166e8:	61fa      	str	r2, [r7, #28]
 80166ea:	69ba      	ldr	r2, [r7, #24]
 80166ec:	b2d2      	uxtb	r2, r2
 80166ee:	701a      	strb	r2, [r3, #0]
 80166f0:	69fb      	ldr	r3, [r7, #28]
 80166f2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80166f4:	2208      	movs	r2, #8
 80166f6:	68f9      	ldr	r1, [r7, #12]
 80166f8:	6938      	ldr	r0, [r7, #16]
 80166fa:	f7ff f9ef 	bl	8015adc <_SendPacket>
  RECORD_END();
 80166fe:	697b      	ldr	r3, [r7, #20]
 8016700:	f383 8811 	msr	BASEPRI, r3
}
 8016704:	bf00      	nop
 8016706:	3720      	adds	r7, #32
 8016708:	46bd      	mov	sp, r7
 801670a:	bd80      	pop	{r7, pc}
 801670c:	2001b334 	.word	0x2001b334
 8016710:	2001b304 	.word	0x2001b304

08016714 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8016714:	b580      	push	{r7, lr}
 8016716:	b088      	sub	sp, #32
 8016718:	af00      	add	r7, sp, #0
 801671a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 801671c:	f3ef 8311 	mrs	r3, BASEPRI
 8016720:	f04f 0120 	mov.w	r1, #32
 8016724:	f381 8811 	msr	BASEPRI, r1
 8016728:	617b      	str	r3, [r7, #20]
 801672a:	4819      	ldr	r0, [pc, #100]	; (8016790 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 801672c:	f7ff f8e6 	bl	80158fc <_PreparePacket>
 8016730:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8016732:	693b      	ldr	r3, [r7, #16]
 8016734:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8016736:	4b17      	ldr	r3, [pc, #92]	; (8016794 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8016738:	691b      	ldr	r3, [r3, #16]
 801673a:	687a      	ldr	r2, [r7, #4]
 801673c:	1ad3      	subs	r3, r2, r3
 801673e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8016740:	68fb      	ldr	r3, [r7, #12]
 8016742:	61fb      	str	r3, [r7, #28]
 8016744:	687b      	ldr	r3, [r7, #4]
 8016746:	61bb      	str	r3, [r7, #24]
 8016748:	e00b      	b.n	8016762 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 801674a:	69bb      	ldr	r3, [r7, #24]
 801674c:	b2da      	uxtb	r2, r3
 801674e:	69fb      	ldr	r3, [r7, #28]
 8016750:	1c59      	adds	r1, r3, #1
 8016752:	61f9      	str	r1, [r7, #28]
 8016754:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8016758:	b2d2      	uxtb	r2, r2
 801675a:	701a      	strb	r2, [r3, #0]
 801675c:	69bb      	ldr	r3, [r7, #24]
 801675e:	09db      	lsrs	r3, r3, #7
 8016760:	61bb      	str	r3, [r7, #24]
 8016762:	69bb      	ldr	r3, [r7, #24]
 8016764:	2b7f      	cmp	r3, #127	; 0x7f
 8016766:	d8f0      	bhi.n	801674a <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8016768:	69fb      	ldr	r3, [r7, #28]
 801676a:	1c5a      	adds	r2, r3, #1
 801676c:	61fa      	str	r2, [r7, #28]
 801676e:	69ba      	ldr	r2, [r7, #24]
 8016770:	b2d2      	uxtb	r2, r2
 8016772:	701a      	strb	r2, [r3, #0]
 8016774:	69fb      	ldr	r3, [r7, #28]
 8016776:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8016778:	2204      	movs	r2, #4
 801677a:	68f9      	ldr	r1, [r7, #12]
 801677c:	6938      	ldr	r0, [r7, #16]
 801677e:	f7ff f9ad 	bl	8015adc <_SendPacket>
  RECORD_END();
 8016782:	697b      	ldr	r3, [r7, #20]
 8016784:	f383 8811 	msr	BASEPRI, r3
}
 8016788:	bf00      	nop
 801678a:	3720      	adds	r7, #32
 801678c:	46bd      	mov	sp, r7
 801678e:	bd80      	pop	{r7, pc}
 8016790:	2001b334 	.word	0x2001b334
 8016794:	2001b304 	.word	0x2001b304

08016798 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8016798:	b580      	push	{r7, lr}
 801679a:	b088      	sub	sp, #32
 801679c:	af00      	add	r7, sp, #0
 801679e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80167a0:	f3ef 8311 	mrs	r3, BASEPRI
 80167a4:	f04f 0120 	mov.w	r1, #32
 80167a8:	f381 8811 	msr	BASEPRI, r1
 80167ac:	617b      	str	r3, [r7, #20]
 80167ae:	4819      	ldr	r0, [pc, #100]	; (8016814 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80167b0:	f7ff f8a4 	bl	80158fc <_PreparePacket>
 80167b4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80167b6:	693b      	ldr	r3, [r7, #16]
 80167b8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80167ba:	4b17      	ldr	r3, [pc, #92]	; (8016818 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80167bc:	691b      	ldr	r3, [r3, #16]
 80167be:	687a      	ldr	r2, [r7, #4]
 80167c0:	1ad3      	subs	r3, r2, r3
 80167c2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80167c4:	68fb      	ldr	r3, [r7, #12]
 80167c6:	61fb      	str	r3, [r7, #28]
 80167c8:	687b      	ldr	r3, [r7, #4]
 80167ca:	61bb      	str	r3, [r7, #24]
 80167cc:	e00b      	b.n	80167e6 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80167ce:	69bb      	ldr	r3, [r7, #24]
 80167d0:	b2da      	uxtb	r2, r3
 80167d2:	69fb      	ldr	r3, [r7, #28]
 80167d4:	1c59      	adds	r1, r3, #1
 80167d6:	61f9      	str	r1, [r7, #28]
 80167d8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80167dc:	b2d2      	uxtb	r2, r2
 80167de:	701a      	strb	r2, [r3, #0]
 80167e0:	69bb      	ldr	r3, [r7, #24]
 80167e2:	09db      	lsrs	r3, r3, #7
 80167e4:	61bb      	str	r3, [r7, #24]
 80167e6:	69bb      	ldr	r3, [r7, #24]
 80167e8:	2b7f      	cmp	r3, #127	; 0x7f
 80167ea:	d8f0      	bhi.n	80167ce <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80167ec:	69fb      	ldr	r3, [r7, #28]
 80167ee:	1c5a      	adds	r2, r3, #1
 80167f0:	61fa      	str	r2, [r7, #28]
 80167f2:	69ba      	ldr	r2, [r7, #24]
 80167f4:	b2d2      	uxtb	r2, r2
 80167f6:	701a      	strb	r2, [r3, #0]
 80167f8:	69fb      	ldr	r3, [r7, #28]
 80167fa:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80167fc:	2206      	movs	r2, #6
 80167fe:	68f9      	ldr	r1, [r7, #12]
 8016800:	6938      	ldr	r0, [r7, #16]
 8016802:	f7ff f96b 	bl	8015adc <_SendPacket>
  RECORD_END();
 8016806:	697b      	ldr	r3, [r7, #20]
 8016808:	f383 8811 	msr	BASEPRI, r3
}
 801680c:	bf00      	nop
 801680e:	3720      	adds	r7, #32
 8016810:	46bd      	mov	sp, r7
 8016812:	bd80      	pop	{r7, pc}
 8016814:	2001b334 	.word	0x2001b334
 8016818:	2001b304 	.word	0x2001b304

0801681c <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 801681c:	b480      	push	{r7}
 801681e:	b083      	sub	sp, #12
 8016820:	af00      	add	r7, sp, #0
 8016822:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8016824:	4b04      	ldr	r3, [pc, #16]	; (8016838 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8016826:	691b      	ldr	r3, [r3, #16]
 8016828:	687a      	ldr	r2, [r7, #4]
 801682a:	1ad3      	subs	r3, r2, r3
}
 801682c:	4618      	mov	r0, r3
 801682e:	370c      	adds	r7, #12
 8016830:	46bd      	mov	sp, r7
 8016832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016836:	4770      	bx	lr
 8016838:	2001b304 	.word	0x2001b304

0801683c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 801683c:	b580      	push	{r7, lr}
 801683e:	b08c      	sub	sp, #48	; 0x30
 8016840:	af00      	add	r7, sp, #0
 8016842:	4603      	mov	r3, r0
 8016844:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8016846:	4b3b      	ldr	r3, [pc, #236]	; (8016934 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8016848:	681b      	ldr	r3, [r3, #0]
 801684a:	2b00      	cmp	r3, #0
 801684c:	d06d      	beq.n	801692a <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 801684e:	4b39      	ldr	r3, [pc, #228]	; (8016934 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8016850:	681b      	ldr	r3, [r3, #0]
 8016852:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8016854:	2300      	movs	r3, #0
 8016856:	62bb      	str	r3, [r7, #40]	; 0x28
 8016858:	e008      	b.n	801686c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 801685a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801685c:	691b      	ldr	r3, [r3, #16]
 801685e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8016860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016862:	2b00      	cmp	r3, #0
 8016864:	d007      	beq.n	8016876 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8016866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016868:	3301      	adds	r3, #1
 801686a:	62bb      	str	r3, [r7, #40]	; 0x28
 801686c:	79fb      	ldrb	r3, [r7, #7]
 801686e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016870:	429a      	cmp	r2, r3
 8016872:	d3f2      	bcc.n	801685a <SEGGER_SYSVIEW_SendModule+0x1e>
 8016874:	e000      	b.n	8016878 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8016876:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8016878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801687a:	2b00      	cmp	r3, #0
 801687c:	d055      	beq.n	801692a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 801687e:	f3ef 8311 	mrs	r3, BASEPRI
 8016882:	f04f 0120 	mov.w	r1, #32
 8016886:	f381 8811 	msr	BASEPRI, r1
 801688a:	617b      	str	r3, [r7, #20]
 801688c:	482a      	ldr	r0, [pc, #168]	; (8016938 <SEGGER_SYSVIEW_SendModule+0xfc>)
 801688e:	f7ff f835 	bl	80158fc <_PreparePacket>
 8016892:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8016894:	693b      	ldr	r3, [r7, #16]
 8016896:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8016898:	68fb      	ldr	r3, [r7, #12]
 801689a:	627b      	str	r3, [r7, #36]	; 0x24
 801689c:	79fb      	ldrb	r3, [r7, #7]
 801689e:	623b      	str	r3, [r7, #32]
 80168a0:	e00b      	b.n	80168ba <SEGGER_SYSVIEW_SendModule+0x7e>
 80168a2:	6a3b      	ldr	r3, [r7, #32]
 80168a4:	b2da      	uxtb	r2, r3
 80168a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80168a8:	1c59      	adds	r1, r3, #1
 80168aa:	6279      	str	r1, [r7, #36]	; 0x24
 80168ac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80168b0:	b2d2      	uxtb	r2, r2
 80168b2:	701a      	strb	r2, [r3, #0]
 80168b4:	6a3b      	ldr	r3, [r7, #32]
 80168b6:	09db      	lsrs	r3, r3, #7
 80168b8:	623b      	str	r3, [r7, #32]
 80168ba:	6a3b      	ldr	r3, [r7, #32]
 80168bc:	2b7f      	cmp	r3, #127	; 0x7f
 80168be:	d8f0      	bhi.n	80168a2 <SEGGER_SYSVIEW_SendModule+0x66>
 80168c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80168c2:	1c5a      	adds	r2, r3, #1
 80168c4:	627a      	str	r2, [r7, #36]	; 0x24
 80168c6:	6a3a      	ldr	r2, [r7, #32]
 80168c8:	b2d2      	uxtb	r2, r2
 80168ca:	701a      	strb	r2, [r3, #0]
 80168cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80168ce:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80168d0:	68fb      	ldr	r3, [r7, #12]
 80168d2:	61fb      	str	r3, [r7, #28]
 80168d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80168d6:	689b      	ldr	r3, [r3, #8]
 80168d8:	61bb      	str	r3, [r7, #24]
 80168da:	e00b      	b.n	80168f4 <SEGGER_SYSVIEW_SendModule+0xb8>
 80168dc:	69bb      	ldr	r3, [r7, #24]
 80168de:	b2da      	uxtb	r2, r3
 80168e0:	69fb      	ldr	r3, [r7, #28]
 80168e2:	1c59      	adds	r1, r3, #1
 80168e4:	61f9      	str	r1, [r7, #28]
 80168e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80168ea:	b2d2      	uxtb	r2, r2
 80168ec:	701a      	strb	r2, [r3, #0]
 80168ee:	69bb      	ldr	r3, [r7, #24]
 80168f0:	09db      	lsrs	r3, r3, #7
 80168f2:	61bb      	str	r3, [r7, #24]
 80168f4:	69bb      	ldr	r3, [r7, #24]
 80168f6:	2b7f      	cmp	r3, #127	; 0x7f
 80168f8:	d8f0      	bhi.n	80168dc <SEGGER_SYSVIEW_SendModule+0xa0>
 80168fa:	69fb      	ldr	r3, [r7, #28]
 80168fc:	1c5a      	adds	r2, r3, #1
 80168fe:	61fa      	str	r2, [r7, #28]
 8016900:	69ba      	ldr	r2, [r7, #24]
 8016902:	b2d2      	uxtb	r2, r2
 8016904:	701a      	strb	r2, [r3, #0]
 8016906:	69fb      	ldr	r3, [r7, #28]
 8016908:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 801690a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801690c:	681b      	ldr	r3, [r3, #0]
 801690e:	2280      	movs	r2, #128	; 0x80
 8016910:	4619      	mov	r1, r3
 8016912:	68f8      	ldr	r0, [r7, #12]
 8016914:	f7fe ffa2 	bl	801585c <_EncodeStr>
 8016918:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 801691a:	2216      	movs	r2, #22
 801691c:	68f9      	ldr	r1, [r7, #12]
 801691e:	6938      	ldr	r0, [r7, #16]
 8016920:	f7ff f8dc 	bl	8015adc <_SendPacket>
      RECORD_END();
 8016924:	697b      	ldr	r3, [r7, #20]
 8016926:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 801692a:	bf00      	nop
 801692c:	3730      	adds	r7, #48	; 0x30
 801692e:	46bd      	mov	sp, r7
 8016930:	bd80      	pop	{r7, pc}
 8016932:	bf00      	nop
 8016934:	2001b32c 	.word	0x2001b32c
 8016938:	2001b334 	.word	0x2001b334

0801693c <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 801693c:	b580      	push	{r7, lr}
 801693e:	b082      	sub	sp, #8
 8016940:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8016942:	4b0c      	ldr	r3, [pc, #48]	; (8016974 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8016944:	681b      	ldr	r3, [r3, #0]
 8016946:	2b00      	cmp	r3, #0
 8016948:	d00f      	beq.n	801696a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 801694a:	4b0a      	ldr	r3, [pc, #40]	; (8016974 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 801694c:	681b      	ldr	r3, [r3, #0]
 801694e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8016950:	687b      	ldr	r3, [r7, #4]
 8016952:	68db      	ldr	r3, [r3, #12]
 8016954:	2b00      	cmp	r3, #0
 8016956:	d002      	beq.n	801695e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8016958:	687b      	ldr	r3, [r7, #4]
 801695a:	68db      	ldr	r3, [r3, #12]
 801695c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 801695e:	687b      	ldr	r3, [r7, #4]
 8016960:	691b      	ldr	r3, [r3, #16]
 8016962:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8016964:	687b      	ldr	r3, [r7, #4]
 8016966:	2b00      	cmp	r3, #0
 8016968:	d1f2      	bne.n	8016950 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 801696a:	bf00      	nop
 801696c:	3708      	adds	r7, #8
 801696e:	46bd      	mov	sp, r7
 8016970:	bd80      	pop	{r7, pc}
 8016972:	bf00      	nop
 8016974:	2001b32c 	.word	0x2001b32c

08016978 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8016978:	b580      	push	{r7, lr}
 801697a:	b086      	sub	sp, #24
 801697c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 801697e:	f3ef 8311 	mrs	r3, BASEPRI
 8016982:	f04f 0120 	mov.w	r1, #32
 8016986:	f381 8811 	msr	BASEPRI, r1
 801698a:	60fb      	str	r3, [r7, #12]
 801698c:	4817      	ldr	r0, [pc, #92]	; (80169ec <SEGGER_SYSVIEW_SendNumModules+0x74>)
 801698e:	f7fe ffb5 	bl	80158fc <_PreparePacket>
 8016992:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8016994:	68bb      	ldr	r3, [r7, #8]
 8016996:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8016998:	687b      	ldr	r3, [r7, #4]
 801699a:	617b      	str	r3, [r7, #20]
 801699c:	4b14      	ldr	r3, [pc, #80]	; (80169f0 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 801699e:	781b      	ldrb	r3, [r3, #0]
 80169a0:	613b      	str	r3, [r7, #16]
 80169a2:	e00b      	b.n	80169bc <SEGGER_SYSVIEW_SendNumModules+0x44>
 80169a4:	693b      	ldr	r3, [r7, #16]
 80169a6:	b2da      	uxtb	r2, r3
 80169a8:	697b      	ldr	r3, [r7, #20]
 80169aa:	1c59      	adds	r1, r3, #1
 80169ac:	6179      	str	r1, [r7, #20]
 80169ae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80169b2:	b2d2      	uxtb	r2, r2
 80169b4:	701a      	strb	r2, [r3, #0]
 80169b6:	693b      	ldr	r3, [r7, #16]
 80169b8:	09db      	lsrs	r3, r3, #7
 80169ba:	613b      	str	r3, [r7, #16]
 80169bc:	693b      	ldr	r3, [r7, #16]
 80169be:	2b7f      	cmp	r3, #127	; 0x7f
 80169c0:	d8f0      	bhi.n	80169a4 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80169c2:	697b      	ldr	r3, [r7, #20]
 80169c4:	1c5a      	adds	r2, r3, #1
 80169c6:	617a      	str	r2, [r7, #20]
 80169c8:	693a      	ldr	r2, [r7, #16]
 80169ca:	b2d2      	uxtb	r2, r2
 80169cc:	701a      	strb	r2, [r3, #0]
 80169ce:	697b      	ldr	r3, [r7, #20]
 80169d0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80169d2:	221b      	movs	r2, #27
 80169d4:	6879      	ldr	r1, [r7, #4]
 80169d6:	68b8      	ldr	r0, [r7, #8]
 80169d8:	f7ff f880 	bl	8015adc <_SendPacket>
  RECORD_END();
 80169dc:	68fb      	ldr	r3, [r7, #12]
 80169de:	f383 8811 	msr	BASEPRI, r3
}
 80169e2:	bf00      	nop
 80169e4:	3718      	adds	r7, #24
 80169e6:	46bd      	mov	sp, r7
 80169e8:	bd80      	pop	{r7, pc}
 80169ea:	bf00      	nop
 80169ec:	2001b334 	.word	0x2001b334
 80169f0:	2001b330 	.word	0x2001b330

080169f4 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80169f4:	b580      	push	{r7, lr}
 80169f6:	b08a      	sub	sp, #40	; 0x28
 80169f8:	af00      	add	r7, sp, #0
 80169fa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80169fc:	f3ef 8311 	mrs	r3, BASEPRI
 8016a00:	f04f 0120 	mov.w	r1, #32
 8016a04:	f381 8811 	msr	BASEPRI, r1
 8016a08:	617b      	str	r3, [r7, #20]
 8016a0a:	4827      	ldr	r0, [pc, #156]	; (8016aa8 <SEGGER_SYSVIEW_Warn+0xb4>)
 8016a0c:	f7fe ff76 	bl	80158fc <_PreparePacket>
 8016a10:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8016a12:	2280      	movs	r2, #128	; 0x80
 8016a14:	6879      	ldr	r1, [r7, #4]
 8016a16:	6938      	ldr	r0, [r7, #16]
 8016a18:	f7fe ff20 	bl	801585c <_EncodeStr>
 8016a1c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8016a1e:	68fb      	ldr	r3, [r7, #12]
 8016a20:	627b      	str	r3, [r7, #36]	; 0x24
 8016a22:	2301      	movs	r3, #1
 8016a24:	623b      	str	r3, [r7, #32]
 8016a26:	e00b      	b.n	8016a40 <SEGGER_SYSVIEW_Warn+0x4c>
 8016a28:	6a3b      	ldr	r3, [r7, #32]
 8016a2a:	b2da      	uxtb	r2, r3
 8016a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a2e:	1c59      	adds	r1, r3, #1
 8016a30:	6279      	str	r1, [r7, #36]	; 0x24
 8016a32:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8016a36:	b2d2      	uxtb	r2, r2
 8016a38:	701a      	strb	r2, [r3, #0]
 8016a3a:	6a3b      	ldr	r3, [r7, #32]
 8016a3c:	09db      	lsrs	r3, r3, #7
 8016a3e:	623b      	str	r3, [r7, #32]
 8016a40:	6a3b      	ldr	r3, [r7, #32]
 8016a42:	2b7f      	cmp	r3, #127	; 0x7f
 8016a44:	d8f0      	bhi.n	8016a28 <SEGGER_SYSVIEW_Warn+0x34>
 8016a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a48:	1c5a      	adds	r2, r3, #1
 8016a4a:	627a      	str	r2, [r7, #36]	; 0x24
 8016a4c:	6a3a      	ldr	r2, [r7, #32]
 8016a4e:	b2d2      	uxtb	r2, r2
 8016a50:	701a      	strb	r2, [r3, #0]
 8016a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a54:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8016a56:	68fb      	ldr	r3, [r7, #12]
 8016a58:	61fb      	str	r3, [r7, #28]
 8016a5a:	2300      	movs	r3, #0
 8016a5c:	61bb      	str	r3, [r7, #24]
 8016a5e:	e00b      	b.n	8016a78 <SEGGER_SYSVIEW_Warn+0x84>
 8016a60:	69bb      	ldr	r3, [r7, #24]
 8016a62:	b2da      	uxtb	r2, r3
 8016a64:	69fb      	ldr	r3, [r7, #28]
 8016a66:	1c59      	adds	r1, r3, #1
 8016a68:	61f9      	str	r1, [r7, #28]
 8016a6a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8016a6e:	b2d2      	uxtb	r2, r2
 8016a70:	701a      	strb	r2, [r3, #0]
 8016a72:	69bb      	ldr	r3, [r7, #24]
 8016a74:	09db      	lsrs	r3, r3, #7
 8016a76:	61bb      	str	r3, [r7, #24]
 8016a78:	69bb      	ldr	r3, [r7, #24]
 8016a7a:	2b7f      	cmp	r3, #127	; 0x7f
 8016a7c:	d8f0      	bhi.n	8016a60 <SEGGER_SYSVIEW_Warn+0x6c>
 8016a7e:	69fb      	ldr	r3, [r7, #28]
 8016a80:	1c5a      	adds	r2, r3, #1
 8016a82:	61fa      	str	r2, [r7, #28]
 8016a84:	69ba      	ldr	r2, [r7, #24]
 8016a86:	b2d2      	uxtb	r2, r2
 8016a88:	701a      	strb	r2, [r3, #0]
 8016a8a:	69fb      	ldr	r3, [r7, #28]
 8016a8c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8016a8e:	221a      	movs	r2, #26
 8016a90:	68f9      	ldr	r1, [r7, #12]
 8016a92:	6938      	ldr	r0, [r7, #16]
 8016a94:	f7ff f822 	bl	8015adc <_SendPacket>
  RECORD_END();
 8016a98:	697b      	ldr	r3, [r7, #20]
 8016a9a:	f383 8811 	msr	BASEPRI, r3
}
 8016a9e:	bf00      	nop
 8016aa0:	3728      	adds	r7, #40	; 0x28
 8016aa2:	46bd      	mov	sp, r7
 8016aa4:	bd80      	pop	{r7, pc}
 8016aa6:	bf00      	nop
 8016aa8:	2001b334 	.word	0x2001b334

08016aac <arm_pid_init_f32>:
 8016aac:	edd0 6a08 	vldr	s13, [r0, #32]
 8016ab0:	edd0 7a06 	vldr	s15, [r0, #24]
 8016ab4:	ed90 7a07 	vldr	s14, [r0, #28]
 8016ab8:	edc0 6a02 	vstr	s13, [r0, #8]
 8016abc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8016ac0:	ee36 6aa6 	vadd.f32	s12, s13, s13
 8016ac4:	eef1 7a67 	vneg.f32	s15, s15
 8016ac8:	ee37 7a26 	vadd.f32	s14, s14, s13
 8016acc:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8016ad0:	ed80 7a00 	vstr	s14, [r0]
 8016ad4:	edc0 7a01 	vstr	s15, [r0, #4]
 8016ad8:	b901      	cbnz	r1, 8016adc <arm_pid_init_f32+0x30>
 8016ada:	4770      	bx	lr
 8016adc:	2300      	movs	r3, #0
 8016ade:	60c3      	str	r3, [r0, #12]
 8016ae0:	6103      	str	r3, [r0, #16]
 8016ae2:	6143      	str	r3, [r0, #20]
 8016ae4:	4770      	bx	lr
 8016ae6:	bf00      	nop

08016ae8 <__errno>:
 8016ae8:	4b01      	ldr	r3, [pc, #4]	; (8016af0 <__errno+0x8>)
 8016aea:	6818      	ldr	r0, [r3, #0]
 8016aec:	4770      	bx	lr
 8016aee:	bf00      	nop
 8016af0:	200012ec 	.word	0x200012ec

08016af4 <__libc_init_array>:
 8016af4:	b570      	push	{r4, r5, r6, lr}
 8016af6:	4d0d      	ldr	r5, [pc, #52]	; (8016b2c <__libc_init_array+0x38>)
 8016af8:	4c0d      	ldr	r4, [pc, #52]	; (8016b30 <__libc_init_array+0x3c>)
 8016afa:	1b64      	subs	r4, r4, r5
 8016afc:	10a4      	asrs	r4, r4, #2
 8016afe:	2600      	movs	r6, #0
 8016b00:	42a6      	cmp	r6, r4
 8016b02:	d109      	bne.n	8016b18 <__libc_init_array+0x24>
 8016b04:	4d0b      	ldr	r5, [pc, #44]	; (8016b34 <__libc_init_array+0x40>)
 8016b06:	4c0c      	ldr	r4, [pc, #48]	; (8016b38 <__libc_init_array+0x44>)
 8016b08:	f000 fe22 	bl	8017750 <_init>
 8016b0c:	1b64      	subs	r4, r4, r5
 8016b0e:	10a4      	asrs	r4, r4, #2
 8016b10:	2600      	movs	r6, #0
 8016b12:	42a6      	cmp	r6, r4
 8016b14:	d105      	bne.n	8016b22 <__libc_init_array+0x2e>
 8016b16:	bd70      	pop	{r4, r5, r6, pc}
 8016b18:	f855 3b04 	ldr.w	r3, [r5], #4
 8016b1c:	4798      	blx	r3
 8016b1e:	3601      	adds	r6, #1
 8016b20:	e7ee      	b.n	8016b00 <__libc_init_array+0xc>
 8016b22:	f855 3b04 	ldr.w	r3, [r5], #4
 8016b26:	4798      	blx	r3
 8016b28:	3601      	adds	r6, #1
 8016b2a:	e7f2      	b.n	8016b12 <__libc_init_array+0x1e>
 8016b2c:	08017b68 	.word	0x08017b68
 8016b30:	08017b68 	.word	0x08017b68
 8016b34:	08017b68 	.word	0x08017b68
 8016b38:	08017b6c 	.word	0x08017b6c

08016b3c <__retarget_lock_acquire_recursive>:
 8016b3c:	4770      	bx	lr

08016b3e <__retarget_lock_release_recursive>:
 8016b3e:	4770      	bx	lr

08016b40 <memcmp>:
 8016b40:	b530      	push	{r4, r5, lr}
 8016b42:	3901      	subs	r1, #1
 8016b44:	2400      	movs	r4, #0
 8016b46:	42a2      	cmp	r2, r4
 8016b48:	d101      	bne.n	8016b4e <memcmp+0xe>
 8016b4a:	2000      	movs	r0, #0
 8016b4c:	e005      	b.n	8016b5a <memcmp+0x1a>
 8016b4e:	5d03      	ldrb	r3, [r0, r4]
 8016b50:	3401      	adds	r4, #1
 8016b52:	5d0d      	ldrb	r5, [r1, r4]
 8016b54:	42ab      	cmp	r3, r5
 8016b56:	d0f6      	beq.n	8016b46 <memcmp+0x6>
 8016b58:	1b58      	subs	r0, r3, r5
 8016b5a:	bd30      	pop	{r4, r5, pc}

08016b5c <memcpy>:
 8016b5c:	440a      	add	r2, r1
 8016b5e:	4291      	cmp	r1, r2
 8016b60:	f100 33ff 	add.w	r3, r0, #4294967295
 8016b64:	d100      	bne.n	8016b68 <memcpy+0xc>
 8016b66:	4770      	bx	lr
 8016b68:	b510      	push	{r4, lr}
 8016b6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016b6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016b72:	4291      	cmp	r1, r2
 8016b74:	d1f9      	bne.n	8016b6a <memcpy+0xe>
 8016b76:	bd10      	pop	{r4, pc}

08016b78 <memset>:
 8016b78:	4402      	add	r2, r0
 8016b7a:	4603      	mov	r3, r0
 8016b7c:	4293      	cmp	r3, r2
 8016b7e:	d100      	bne.n	8016b82 <memset+0xa>
 8016b80:	4770      	bx	lr
 8016b82:	f803 1b01 	strb.w	r1, [r3], #1
 8016b86:	e7f9      	b.n	8016b7c <memset+0x4>

08016b88 <cleanup_glue>:
 8016b88:	b538      	push	{r3, r4, r5, lr}
 8016b8a:	460c      	mov	r4, r1
 8016b8c:	6809      	ldr	r1, [r1, #0]
 8016b8e:	4605      	mov	r5, r0
 8016b90:	b109      	cbz	r1, 8016b96 <cleanup_glue+0xe>
 8016b92:	f7ff fff9 	bl	8016b88 <cleanup_glue>
 8016b96:	4621      	mov	r1, r4
 8016b98:	4628      	mov	r0, r5
 8016b9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016b9e:	f000 b869 	b.w	8016c74 <_free_r>
	...

08016ba4 <_reclaim_reent>:
 8016ba4:	4b2c      	ldr	r3, [pc, #176]	; (8016c58 <_reclaim_reent+0xb4>)
 8016ba6:	681b      	ldr	r3, [r3, #0]
 8016ba8:	4283      	cmp	r3, r0
 8016baa:	b570      	push	{r4, r5, r6, lr}
 8016bac:	4604      	mov	r4, r0
 8016bae:	d051      	beq.n	8016c54 <_reclaim_reent+0xb0>
 8016bb0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8016bb2:	b143      	cbz	r3, 8016bc6 <_reclaim_reent+0x22>
 8016bb4:	68db      	ldr	r3, [r3, #12]
 8016bb6:	2b00      	cmp	r3, #0
 8016bb8:	d14a      	bne.n	8016c50 <_reclaim_reent+0xac>
 8016bba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016bbc:	6819      	ldr	r1, [r3, #0]
 8016bbe:	b111      	cbz	r1, 8016bc6 <_reclaim_reent+0x22>
 8016bc0:	4620      	mov	r0, r4
 8016bc2:	f000 f857 	bl	8016c74 <_free_r>
 8016bc6:	6961      	ldr	r1, [r4, #20]
 8016bc8:	b111      	cbz	r1, 8016bd0 <_reclaim_reent+0x2c>
 8016bca:	4620      	mov	r0, r4
 8016bcc:	f000 f852 	bl	8016c74 <_free_r>
 8016bd0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8016bd2:	b111      	cbz	r1, 8016bda <_reclaim_reent+0x36>
 8016bd4:	4620      	mov	r0, r4
 8016bd6:	f000 f84d 	bl	8016c74 <_free_r>
 8016bda:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8016bdc:	b111      	cbz	r1, 8016be4 <_reclaim_reent+0x40>
 8016bde:	4620      	mov	r0, r4
 8016be0:	f000 f848 	bl	8016c74 <_free_r>
 8016be4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8016be6:	b111      	cbz	r1, 8016bee <_reclaim_reent+0x4a>
 8016be8:	4620      	mov	r0, r4
 8016bea:	f000 f843 	bl	8016c74 <_free_r>
 8016bee:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8016bf0:	b111      	cbz	r1, 8016bf8 <_reclaim_reent+0x54>
 8016bf2:	4620      	mov	r0, r4
 8016bf4:	f000 f83e 	bl	8016c74 <_free_r>
 8016bf8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8016bfa:	b111      	cbz	r1, 8016c02 <_reclaim_reent+0x5e>
 8016bfc:	4620      	mov	r0, r4
 8016bfe:	f000 f839 	bl	8016c74 <_free_r>
 8016c02:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8016c04:	b111      	cbz	r1, 8016c0c <_reclaim_reent+0x68>
 8016c06:	4620      	mov	r0, r4
 8016c08:	f000 f834 	bl	8016c74 <_free_r>
 8016c0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016c0e:	b111      	cbz	r1, 8016c16 <_reclaim_reent+0x72>
 8016c10:	4620      	mov	r0, r4
 8016c12:	f000 f82f 	bl	8016c74 <_free_r>
 8016c16:	69a3      	ldr	r3, [r4, #24]
 8016c18:	b1e3      	cbz	r3, 8016c54 <_reclaim_reent+0xb0>
 8016c1a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8016c1c:	4620      	mov	r0, r4
 8016c1e:	4798      	blx	r3
 8016c20:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8016c22:	b1b9      	cbz	r1, 8016c54 <_reclaim_reent+0xb0>
 8016c24:	4620      	mov	r0, r4
 8016c26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016c2a:	f7ff bfad 	b.w	8016b88 <cleanup_glue>
 8016c2e:	5949      	ldr	r1, [r1, r5]
 8016c30:	b941      	cbnz	r1, 8016c44 <_reclaim_reent+0xa0>
 8016c32:	3504      	adds	r5, #4
 8016c34:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016c36:	2d80      	cmp	r5, #128	; 0x80
 8016c38:	68d9      	ldr	r1, [r3, #12]
 8016c3a:	d1f8      	bne.n	8016c2e <_reclaim_reent+0x8a>
 8016c3c:	4620      	mov	r0, r4
 8016c3e:	f000 f819 	bl	8016c74 <_free_r>
 8016c42:	e7ba      	b.n	8016bba <_reclaim_reent+0x16>
 8016c44:	680e      	ldr	r6, [r1, #0]
 8016c46:	4620      	mov	r0, r4
 8016c48:	f000 f814 	bl	8016c74 <_free_r>
 8016c4c:	4631      	mov	r1, r6
 8016c4e:	e7ef      	b.n	8016c30 <_reclaim_reent+0x8c>
 8016c50:	2500      	movs	r5, #0
 8016c52:	e7ef      	b.n	8016c34 <_reclaim_reent+0x90>
 8016c54:	bd70      	pop	{r4, r5, r6, pc}
 8016c56:	bf00      	nop
 8016c58:	200012ec 	.word	0x200012ec

08016c5c <__malloc_lock>:
 8016c5c:	4801      	ldr	r0, [pc, #4]	; (8016c64 <__malloc_lock+0x8>)
 8016c5e:	f7ff bf6d 	b.w	8016b3c <__retarget_lock_acquire_recursive>
 8016c62:	bf00      	nop
 8016c64:	2001db4c 	.word	0x2001db4c

08016c68 <__malloc_unlock>:
 8016c68:	4801      	ldr	r0, [pc, #4]	; (8016c70 <__malloc_unlock+0x8>)
 8016c6a:	f7ff bf68 	b.w	8016b3e <__retarget_lock_release_recursive>
 8016c6e:	bf00      	nop
 8016c70:	2001db4c 	.word	0x2001db4c

08016c74 <_free_r>:
 8016c74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016c76:	2900      	cmp	r1, #0
 8016c78:	d048      	beq.n	8016d0c <_free_r+0x98>
 8016c7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016c7e:	9001      	str	r0, [sp, #4]
 8016c80:	2b00      	cmp	r3, #0
 8016c82:	f1a1 0404 	sub.w	r4, r1, #4
 8016c86:	bfb8      	it	lt
 8016c88:	18e4      	addlt	r4, r4, r3
 8016c8a:	f7ff ffe7 	bl	8016c5c <__malloc_lock>
 8016c8e:	4a20      	ldr	r2, [pc, #128]	; (8016d10 <_free_r+0x9c>)
 8016c90:	9801      	ldr	r0, [sp, #4]
 8016c92:	6813      	ldr	r3, [r2, #0]
 8016c94:	4615      	mov	r5, r2
 8016c96:	b933      	cbnz	r3, 8016ca6 <_free_r+0x32>
 8016c98:	6063      	str	r3, [r4, #4]
 8016c9a:	6014      	str	r4, [r2, #0]
 8016c9c:	b003      	add	sp, #12
 8016c9e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016ca2:	f7ff bfe1 	b.w	8016c68 <__malloc_unlock>
 8016ca6:	42a3      	cmp	r3, r4
 8016ca8:	d90b      	bls.n	8016cc2 <_free_r+0x4e>
 8016caa:	6821      	ldr	r1, [r4, #0]
 8016cac:	1862      	adds	r2, r4, r1
 8016cae:	4293      	cmp	r3, r2
 8016cb0:	bf04      	itt	eq
 8016cb2:	681a      	ldreq	r2, [r3, #0]
 8016cb4:	685b      	ldreq	r3, [r3, #4]
 8016cb6:	6063      	str	r3, [r4, #4]
 8016cb8:	bf04      	itt	eq
 8016cba:	1852      	addeq	r2, r2, r1
 8016cbc:	6022      	streq	r2, [r4, #0]
 8016cbe:	602c      	str	r4, [r5, #0]
 8016cc0:	e7ec      	b.n	8016c9c <_free_r+0x28>
 8016cc2:	461a      	mov	r2, r3
 8016cc4:	685b      	ldr	r3, [r3, #4]
 8016cc6:	b10b      	cbz	r3, 8016ccc <_free_r+0x58>
 8016cc8:	42a3      	cmp	r3, r4
 8016cca:	d9fa      	bls.n	8016cc2 <_free_r+0x4e>
 8016ccc:	6811      	ldr	r1, [r2, #0]
 8016cce:	1855      	adds	r5, r2, r1
 8016cd0:	42a5      	cmp	r5, r4
 8016cd2:	d10b      	bne.n	8016cec <_free_r+0x78>
 8016cd4:	6824      	ldr	r4, [r4, #0]
 8016cd6:	4421      	add	r1, r4
 8016cd8:	1854      	adds	r4, r2, r1
 8016cda:	42a3      	cmp	r3, r4
 8016cdc:	6011      	str	r1, [r2, #0]
 8016cde:	d1dd      	bne.n	8016c9c <_free_r+0x28>
 8016ce0:	681c      	ldr	r4, [r3, #0]
 8016ce2:	685b      	ldr	r3, [r3, #4]
 8016ce4:	6053      	str	r3, [r2, #4]
 8016ce6:	4421      	add	r1, r4
 8016ce8:	6011      	str	r1, [r2, #0]
 8016cea:	e7d7      	b.n	8016c9c <_free_r+0x28>
 8016cec:	d902      	bls.n	8016cf4 <_free_r+0x80>
 8016cee:	230c      	movs	r3, #12
 8016cf0:	6003      	str	r3, [r0, #0]
 8016cf2:	e7d3      	b.n	8016c9c <_free_r+0x28>
 8016cf4:	6825      	ldr	r5, [r4, #0]
 8016cf6:	1961      	adds	r1, r4, r5
 8016cf8:	428b      	cmp	r3, r1
 8016cfa:	bf04      	itt	eq
 8016cfc:	6819      	ldreq	r1, [r3, #0]
 8016cfe:	685b      	ldreq	r3, [r3, #4]
 8016d00:	6063      	str	r3, [r4, #4]
 8016d02:	bf04      	itt	eq
 8016d04:	1949      	addeq	r1, r1, r5
 8016d06:	6021      	streq	r1, [r4, #0]
 8016d08:	6054      	str	r4, [r2, #4]
 8016d0a:	e7c7      	b.n	8016c9c <_free_r+0x28>
 8016d0c:	b003      	add	sp, #12
 8016d0e:	bd30      	pop	{r4, r5, pc}
 8016d10:	2001b418 	.word	0x2001b418

08016d14 <fmax>:
 8016d14:	b508      	push	{r3, lr}
 8016d16:	ed2d 8b04 	vpush	{d8-d9}
 8016d1a:	eeb0 8a40 	vmov.f32	s16, s0
 8016d1e:	eef0 8a60 	vmov.f32	s17, s1
 8016d22:	eeb0 9a41 	vmov.f32	s18, s2
 8016d26:	eef0 9a61 	vmov.f32	s19, s3
 8016d2a:	f000 f81b 	bl	8016d64 <__fpclassifyd>
 8016d2e:	b168      	cbz	r0, 8016d4c <fmax+0x38>
 8016d30:	eeb0 0a49 	vmov.f32	s0, s18
 8016d34:	eef0 0a69 	vmov.f32	s1, s19
 8016d38:	f000 f814 	bl	8016d64 <__fpclassifyd>
 8016d3c:	b150      	cbz	r0, 8016d54 <fmax+0x40>
 8016d3e:	ec53 2b19 	vmov	r2, r3, d9
 8016d42:	ec51 0b18 	vmov	r0, r1, d8
 8016d46:	f7e9 fed9 	bl	8000afc <__aeabi_dcmpgt>
 8016d4a:	b918      	cbnz	r0, 8016d54 <fmax+0x40>
 8016d4c:	eeb0 8a49 	vmov.f32	s16, s18
 8016d50:	eef0 8a69 	vmov.f32	s17, s19
 8016d54:	eeb0 0a48 	vmov.f32	s0, s16
 8016d58:	eef0 0a68 	vmov.f32	s1, s17
 8016d5c:	ecbd 8b04 	vpop	{d8-d9}
 8016d60:	bd08      	pop	{r3, pc}
	...

08016d64 <__fpclassifyd>:
 8016d64:	ec51 0b10 	vmov	r0, r1, d0
 8016d68:	b510      	push	{r4, lr}
 8016d6a:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
 8016d6e:	460b      	mov	r3, r1
 8016d70:	d019      	beq.n	8016da6 <__fpclassifyd+0x42>
 8016d72:	f5a1 1280 	sub.w	r2, r1, #1048576	; 0x100000
 8016d76:	490e      	ldr	r1, [pc, #56]	; (8016db0 <__fpclassifyd+0x4c>)
 8016d78:	428a      	cmp	r2, r1
 8016d7a:	d90e      	bls.n	8016d9a <__fpclassifyd+0x36>
 8016d7c:	f103 42ff 	add.w	r2, r3, #2139095040	; 0x7f800000
 8016d80:	f502 02e0 	add.w	r2, r2, #7340032	; 0x700000
 8016d84:	428a      	cmp	r2, r1
 8016d86:	d908      	bls.n	8016d9a <__fpclassifyd+0x36>
 8016d88:	4a0a      	ldr	r2, [pc, #40]	; (8016db4 <__fpclassifyd+0x50>)
 8016d8a:	4213      	tst	r3, r2
 8016d8c:	d007      	beq.n	8016d9e <__fpclassifyd+0x3a>
 8016d8e:	4294      	cmp	r4, r2
 8016d90:	d107      	bne.n	8016da2 <__fpclassifyd+0x3e>
 8016d92:	fab0 f080 	clz	r0, r0
 8016d96:	0940      	lsrs	r0, r0, #5
 8016d98:	bd10      	pop	{r4, pc}
 8016d9a:	2004      	movs	r0, #4
 8016d9c:	e7fc      	b.n	8016d98 <__fpclassifyd+0x34>
 8016d9e:	2003      	movs	r0, #3
 8016da0:	e7fa      	b.n	8016d98 <__fpclassifyd+0x34>
 8016da2:	2000      	movs	r0, #0
 8016da4:	e7f8      	b.n	8016d98 <__fpclassifyd+0x34>
 8016da6:	2800      	cmp	r0, #0
 8016da8:	d1ee      	bne.n	8016d88 <__fpclassifyd+0x24>
 8016daa:	2002      	movs	r0, #2
 8016dac:	e7f4      	b.n	8016d98 <__fpclassifyd+0x34>
 8016dae:	bf00      	nop
 8016db0:	7fdfffff 	.word	0x7fdfffff
 8016db4:	7ff00000 	.word	0x7ff00000

08016db8 <exp>:
 8016db8:	b538      	push	{r3, r4, r5, lr}
 8016dba:	ed2d 8b02 	vpush	{d8}
 8016dbe:	ec55 4b10 	vmov	r4, r5, d0
 8016dc2:	f000 f8c5 	bl	8016f50 <__ieee754_exp>
 8016dc6:	4b22      	ldr	r3, [pc, #136]	; (8016e50 <exp+0x98>)
 8016dc8:	eeb0 8a40 	vmov.f32	s16, s0
 8016dcc:	eef0 8a60 	vmov.f32	s17, s1
 8016dd0:	f993 3000 	ldrsb.w	r3, [r3]
 8016dd4:	3301      	adds	r3, #1
 8016dd6:	d012      	beq.n	8016dfe <exp+0x46>
 8016dd8:	ec45 4b10 	vmov	d0, r4, r5
 8016ddc:	f000 fca2 	bl	8017724 <finite>
 8016de0:	b168      	cbz	r0, 8016dfe <exp+0x46>
 8016de2:	a313      	add	r3, pc, #76	; (adr r3, 8016e30 <exp+0x78>)
 8016de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016de8:	4620      	mov	r0, r4
 8016dea:	4629      	mov	r1, r5
 8016dec:	f7e9 fe86 	bl	8000afc <__aeabi_dcmpgt>
 8016df0:	b160      	cbz	r0, 8016e0c <exp+0x54>
 8016df2:	f7ff fe79 	bl	8016ae8 <__errno>
 8016df6:	ed9f 8b10 	vldr	d8, [pc, #64]	; 8016e38 <exp+0x80>
 8016dfa:	2322      	movs	r3, #34	; 0x22
 8016dfc:	6003      	str	r3, [r0, #0]
 8016dfe:	eeb0 0a48 	vmov.f32	s0, s16
 8016e02:	eef0 0a68 	vmov.f32	s1, s17
 8016e06:	ecbd 8b02 	vpop	{d8}
 8016e0a:	bd38      	pop	{r3, r4, r5, pc}
 8016e0c:	a30c      	add	r3, pc, #48	; (adr r3, 8016e40 <exp+0x88>)
 8016e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e12:	4620      	mov	r0, r4
 8016e14:	4629      	mov	r1, r5
 8016e16:	f7e9 fe53 	bl	8000ac0 <__aeabi_dcmplt>
 8016e1a:	2800      	cmp	r0, #0
 8016e1c:	d0ef      	beq.n	8016dfe <exp+0x46>
 8016e1e:	f7ff fe63 	bl	8016ae8 <__errno>
 8016e22:	2322      	movs	r3, #34	; 0x22
 8016e24:	ed9f 8b08 	vldr	d8, [pc, #32]	; 8016e48 <exp+0x90>
 8016e28:	6003      	str	r3, [r0, #0]
 8016e2a:	e7e8      	b.n	8016dfe <exp+0x46>
 8016e2c:	f3af 8000 	nop.w
 8016e30:	fefa39ef 	.word	0xfefa39ef
 8016e34:	40862e42 	.word	0x40862e42
 8016e38:	00000000 	.word	0x00000000
 8016e3c:	7ff00000 	.word	0x7ff00000
 8016e40:	d52d3051 	.word	0xd52d3051
 8016e44:	c0874910 	.word	0xc0874910
	...
 8016e50:	20001350 	.word	0x20001350
 8016e54:	00000000 	.word	0x00000000

08016e58 <log>:
 8016e58:	b538      	push	{r3, r4, r5, lr}
 8016e5a:	ed2d 8b02 	vpush	{d8}
 8016e5e:	ec55 4b10 	vmov	r4, r5, d0
 8016e62:	f000 f9f1 	bl	8017248 <__ieee754_log>
 8016e66:	4b1e      	ldr	r3, [pc, #120]	; (8016ee0 <log+0x88>)
 8016e68:	eeb0 8a40 	vmov.f32	s16, s0
 8016e6c:	eef0 8a60 	vmov.f32	s17, s1
 8016e70:	f993 3000 	ldrsb.w	r3, [r3]
 8016e74:	3301      	adds	r3, #1
 8016e76:	d01a      	beq.n	8016eae <log+0x56>
 8016e78:	4622      	mov	r2, r4
 8016e7a:	462b      	mov	r3, r5
 8016e7c:	4620      	mov	r0, r4
 8016e7e:	4629      	mov	r1, r5
 8016e80:	f7e9 fe46 	bl	8000b10 <__aeabi_dcmpun>
 8016e84:	b998      	cbnz	r0, 8016eae <log+0x56>
 8016e86:	2200      	movs	r2, #0
 8016e88:	2300      	movs	r3, #0
 8016e8a:	4620      	mov	r0, r4
 8016e8c:	4629      	mov	r1, r5
 8016e8e:	f7e9 fe35 	bl	8000afc <__aeabi_dcmpgt>
 8016e92:	b960      	cbnz	r0, 8016eae <log+0x56>
 8016e94:	2200      	movs	r2, #0
 8016e96:	2300      	movs	r3, #0
 8016e98:	4620      	mov	r0, r4
 8016e9a:	4629      	mov	r1, r5
 8016e9c:	f7e9 fe06 	bl	8000aac <__aeabi_dcmpeq>
 8016ea0:	b160      	cbz	r0, 8016ebc <log+0x64>
 8016ea2:	f7ff fe21 	bl	8016ae8 <__errno>
 8016ea6:	ed9f 8b0c 	vldr	d8, [pc, #48]	; 8016ed8 <log+0x80>
 8016eaa:	2322      	movs	r3, #34	; 0x22
 8016eac:	6003      	str	r3, [r0, #0]
 8016eae:	eeb0 0a48 	vmov.f32	s0, s16
 8016eb2:	eef0 0a68 	vmov.f32	s1, s17
 8016eb6:	ecbd 8b02 	vpop	{d8}
 8016eba:	bd38      	pop	{r3, r4, r5, pc}
 8016ebc:	f7ff fe14 	bl	8016ae8 <__errno>
 8016ec0:	ecbd 8b02 	vpop	{d8}
 8016ec4:	2321      	movs	r3, #33	; 0x21
 8016ec6:	6003      	str	r3, [r0, #0]
 8016ec8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016ecc:	4805      	ldr	r0, [pc, #20]	; (8016ee4 <log+0x8c>)
 8016ece:	f000 bc37 	b.w	8017740 <nan>
 8016ed2:	bf00      	nop
 8016ed4:	f3af 8000 	nop.w
 8016ed8:	00000000 	.word	0x00000000
 8016edc:	fff00000 	.word	0xfff00000
 8016ee0:	20001350 	.word	0x20001350
 8016ee4:	08017b2c 	.word	0x08017b2c

08016ee8 <sqrt>:
 8016ee8:	b538      	push	{r3, r4, r5, lr}
 8016eea:	ed2d 8b02 	vpush	{d8}
 8016eee:	ec55 4b10 	vmov	r4, r5, d0
 8016ef2:	f000 fb63 	bl	80175bc <__ieee754_sqrt>
 8016ef6:	4b15      	ldr	r3, [pc, #84]	; (8016f4c <sqrt+0x64>)
 8016ef8:	eeb0 8a40 	vmov.f32	s16, s0
 8016efc:	eef0 8a60 	vmov.f32	s17, s1
 8016f00:	f993 3000 	ldrsb.w	r3, [r3]
 8016f04:	3301      	adds	r3, #1
 8016f06:	d019      	beq.n	8016f3c <sqrt+0x54>
 8016f08:	4622      	mov	r2, r4
 8016f0a:	462b      	mov	r3, r5
 8016f0c:	4620      	mov	r0, r4
 8016f0e:	4629      	mov	r1, r5
 8016f10:	f7e9 fdfe 	bl	8000b10 <__aeabi_dcmpun>
 8016f14:	b990      	cbnz	r0, 8016f3c <sqrt+0x54>
 8016f16:	2200      	movs	r2, #0
 8016f18:	2300      	movs	r3, #0
 8016f1a:	4620      	mov	r0, r4
 8016f1c:	4629      	mov	r1, r5
 8016f1e:	f7e9 fdcf 	bl	8000ac0 <__aeabi_dcmplt>
 8016f22:	b158      	cbz	r0, 8016f3c <sqrt+0x54>
 8016f24:	f7ff fde0 	bl	8016ae8 <__errno>
 8016f28:	2321      	movs	r3, #33	; 0x21
 8016f2a:	6003      	str	r3, [r0, #0]
 8016f2c:	2200      	movs	r2, #0
 8016f2e:	2300      	movs	r3, #0
 8016f30:	4610      	mov	r0, r2
 8016f32:	4619      	mov	r1, r3
 8016f34:	f7e9 fc7c 	bl	8000830 <__aeabi_ddiv>
 8016f38:	ec41 0b18 	vmov	d8, r0, r1
 8016f3c:	eeb0 0a48 	vmov.f32	s0, s16
 8016f40:	eef0 0a68 	vmov.f32	s1, s17
 8016f44:	ecbd 8b02 	vpop	{d8}
 8016f48:	bd38      	pop	{r3, r4, r5, pc}
 8016f4a:	bf00      	nop
 8016f4c:	20001350 	.word	0x20001350

08016f50 <__ieee754_exp>:
 8016f50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016f54:	ec55 4b10 	vmov	r4, r5, d0
 8016f58:	49b1      	ldr	r1, [pc, #708]	; (8017220 <__ieee754_exp+0x2d0>)
 8016f5a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8016f5e:	428b      	cmp	r3, r1
 8016f60:	ed2d 8b04 	vpush	{d8-d9}
 8016f64:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8016f68:	d937      	bls.n	8016fda <__ieee754_exp+0x8a>
 8016f6a:	49ae      	ldr	r1, [pc, #696]	; (8017224 <__ieee754_exp+0x2d4>)
 8016f6c:	428b      	cmp	r3, r1
 8016f6e:	d916      	bls.n	8016f9e <__ieee754_exp+0x4e>
 8016f70:	ee10 3a10 	vmov	r3, s0
 8016f74:	f3c5 0213 	ubfx	r2, r5, #0, #20
 8016f78:	4313      	orrs	r3, r2
 8016f7a:	d009      	beq.n	8016f90 <__ieee754_exp+0x40>
 8016f7c:	ee10 2a10 	vmov	r2, s0
 8016f80:	462b      	mov	r3, r5
 8016f82:	4620      	mov	r0, r4
 8016f84:	4629      	mov	r1, r5
 8016f86:	f7e9 f973 	bl	8000270 <__adddf3>
 8016f8a:	4604      	mov	r4, r0
 8016f8c:	460d      	mov	r5, r1
 8016f8e:	e000      	b.n	8016f92 <__ieee754_exp+0x42>
 8016f90:	bb06      	cbnz	r6, 8016fd4 <__ieee754_exp+0x84>
 8016f92:	ecbd 8b04 	vpop	{d8-d9}
 8016f96:	ec45 4b10 	vmov	d0, r4, r5
 8016f9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016f9e:	a38a      	add	r3, pc, #552	; (adr r3, 80171c8 <__ieee754_exp+0x278>)
 8016fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016fa4:	ee10 0a10 	vmov	r0, s0
 8016fa8:	4629      	mov	r1, r5
 8016faa:	f7e9 fda7 	bl	8000afc <__aeabi_dcmpgt>
 8016fae:	b138      	cbz	r0, 8016fc0 <__ieee754_exp+0x70>
 8016fb0:	a387      	add	r3, pc, #540	; (adr r3, 80171d0 <__ieee754_exp+0x280>)
 8016fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016fb6:	4610      	mov	r0, r2
 8016fb8:	4619      	mov	r1, r3
 8016fba:	f7e9 fb0f 	bl	80005dc <__aeabi_dmul>
 8016fbe:	e7e4      	b.n	8016f8a <__ieee754_exp+0x3a>
 8016fc0:	a385      	add	r3, pc, #532	; (adr r3, 80171d8 <__ieee754_exp+0x288>)
 8016fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016fc6:	4620      	mov	r0, r4
 8016fc8:	4629      	mov	r1, r5
 8016fca:	f7e9 fd79 	bl	8000ac0 <__aeabi_dcmplt>
 8016fce:	2800      	cmp	r0, #0
 8016fd0:	f000 8087 	beq.w	80170e2 <__ieee754_exp+0x192>
 8016fd4:	2400      	movs	r4, #0
 8016fd6:	2500      	movs	r5, #0
 8016fd8:	e7db      	b.n	8016f92 <__ieee754_exp+0x42>
 8016fda:	4a93      	ldr	r2, [pc, #588]	; (8017228 <__ieee754_exp+0x2d8>)
 8016fdc:	4293      	cmp	r3, r2
 8016fde:	f240 80ac 	bls.w	801713a <__ieee754_exp+0x1ea>
 8016fe2:	4a92      	ldr	r2, [pc, #584]	; (801722c <__ieee754_exp+0x2dc>)
 8016fe4:	4293      	cmp	r3, r2
 8016fe6:	d87c      	bhi.n	80170e2 <__ieee754_exp+0x192>
 8016fe8:	4b91      	ldr	r3, [pc, #580]	; (8017230 <__ieee754_exp+0x2e0>)
 8016fea:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8016fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ff2:	ee10 0a10 	vmov	r0, s0
 8016ff6:	4629      	mov	r1, r5
 8016ff8:	f7e9 f938 	bl	800026c <__aeabi_dsub>
 8016ffc:	4b8d      	ldr	r3, [pc, #564]	; (8017234 <__ieee754_exp+0x2e4>)
 8016ffe:	00f7      	lsls	r7, r6, #3
 8017000:	443b      	add	r3, r7
 8017002:	ed93 7b00 	vldr	d7, [r3]
 8017006:	f1c6 0a01 	rsb	sl, r6, #1
 801700a:	4680      	mov	r8, r0
 801700c:	4689      	mov	r9, r1
 801700e:	ebaa 0a06 	sub.w	sl, sl, r6
 8017012:	eeb0 8a47 	vmov.f32	s16, s14
 8017016:	eef0 8a67 	vmov.f32	s17, s15
 801701a:	ec53 2b18 	vmov	r2, r3, d8
 801701e:	4640      	mov	r0, r8
 8017020:	4649      	mov	r1, r9
 8017022:	f7e9 f923 	bl	800026c <__aeabi_dsub>
 8017026:	4604      	mov	r4, r0
 8017028:	460d      	mov	r5, r1
 801702a:	4622      	mov	r2, r4
 801702c:	462b      	mov	r3, r5
 801702e:	4620      	mov	r0, r4
 8017030:	4629      	mov	r1, r5
 8017032:	f7e9 fad3 	bl	80005dc <__aeabi_dmul>
 8017036:	a36a      	add	r3, pc, #424	; (adr r3, 80171e0 <__ieee754_exp+0x290>)
 8017038:	e9d3 2300 	ldrd	r2, r3, [r3]
 801703c:	4606      	mov	r6, r0
 801703e:	460f      	mov	r7, r1
 8017040:	f7e9 facc 	bl	80005dc <__aeabi_dmul>
 8017044:	a368      	add	r3, pc, #416	; (adr r3, 80171e8 <__ieee754_exp+0x298>)
 8017046:	e9d3 2300 	ldrd	r2, r3, [r3]
 801704a:	f7e9 f90f 	bl	800026c <__aeabi_dsub>
 801704e:	4632      	mov	r2, r6
 8017050:	463b      	mov	r3, r7
 8017052:	f7e9 fac3 	bl	80005dc <__aeabi_dmul>
 8017056:	a366      	add	r3, pc, #408	; (adr r3, 80171f0 <__ieee754_exp+0x2a0>)
 8017058:	e9d3 2300 	ldrd	r2, r3, [r3]
 801705c:	f7e9 f908 	bl	8000270 <__adddf3>
 8017060:	4632      	mov	r2, r6
 8017062:	463b      	mov	r3, r7
 8017064:	f7e9 faba 	bl	80005dc <__aeabi_dmul>
 8017068:	a363      	add	r3, pc, #396	; (adr r3, 80171f8 <__ieee754_exp+0x2a8>)
 801706a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801706e:	f7e9 f8fd 	bl	800026c <__aeabi_dsub>
 8017072:	4632      	mov	r2, r6
 8017074:	463b      	mov	r3, r7
 8017076:	f7e9 fab1 	bl	80005dc <__aeabi_dmul>
 801707a:	a361      	add	r3, pc, #388	; (adr r3, 8017200 <__ieee754_exp+0x2b0>)
 801707c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017080:	f7e9 f8f6 	bl	8000270 <__adddf3>
 8017084:	4632      	mov	r2, r6
 8017086:	463b      	mov	r3, r7
 8017088:	f7e9 faa8 	bl	80005dc <__aeabi_dmul>
 801708c:	4602      	mov	r2, r0
 801708e:	460b      	mov	r3, r1
 8017090:	4620      	mov	r0, r4
 8017092:	4629      	mov	r1, r5
 8017094:	f7e9 f8ea 	bl	800026c <__aeabi_dsub>
 8017098:	4602      	mov	r2, r0
 801709a:	460b      	mov	r3, r1
 801709c:	4606      	mov	r6, r0
 801709e:	460f      	mov	r7, r1
 80170a0:	4620      	mov	r0, r4
 80170a2:	4629      	mov	r1, r5
 80170a4:	f7e9 fa9a 	bl	80005dc <__aeabi_dmul>
 80170a8:	ec41 0b19 	vmov	d9, r0, r1
 80170ac:	f1ba 0f00 	cmp.w	sl, #0
 80170b0:	d15d      	bne.n	801716e <__ieee754_exp+0x21e>
 80170b2:	2200      	movs	r2, #0
 80170b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80170b8:	4630      	mov	r0, r6
 80170ba:	4639      	mov	r1, r7
 80170bc:	f7e9 f8d6 	bl	800026c <__aeabi_dsub>
 80170c0:	4602      	mov	r2, r0
 80170c2:	460b      	mov	r3, r1
 80170c4:	ec51 0b19 	vmov	r0, r1, d9
 80170c8:	f7e9 fbb2 	bl	8000830 <__aeabi_ddiv>
 80170cc:	4622      	mov	r2, r4
 80170ce:	462b      	mov	r3, r5
 80170d0:	f7e9 f8cc 	bl	800026c <__aeabi_dsub>
 80170d4:	4602      	mov	r2, r0
 80170d6:	460b      	mov	r3, r1
 80170d8:	2000      	movs	r0, #0
 80170da:	4957      	ldr	r1, [pc, #348]	; (8017238 <__ieee754_exp+0x2e8>)
 80170dc:	f7e9 f8c6 	bl	800026c <__aeabi_dsub>
 80170e0:	e753      	b.n	8016f8a <__ieee754_exp+0x3a>
 80170e2:	4856      	ldr	r0, [pc, #344]	; (801723c <__ieee754_exp+0x2ec>)
 80170e4:	a348      	add	r3, pc, #288	; (adr r3, 8017208 <__ieee754_exp+0x2b8>)
 80170e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80170ea:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 80170ee:	4629      	mov	r1, r5
 80170f0:	4620      	mov	r0, r4
 80170f2:	f7e9 fa73 	bl	80005dc <__aeabi_dmul>
 80170f6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80170fa:	f7e9 f8b9 	bl	8000270 <__adddf3>
 80170fe:	f7e9 fd1d 	bl	8000b3c <__aeabi_d2iz>
 8017102:	4682      	mov	sl, r0
 8017104:	f7e9 fa00 	bl	8000508 <__aeabi_i2d>
 8017108:	a341      	add	r3, pc, #260	; (adr r3, 8017210 <__ieee754_exp+0x2c0>)
 801710a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801710e:	4606      	mov	r6, r0
 8017110:	460f      	mov	r7, r1
 8017112:	f7e9 fa63 	bl	80005dc <__aeabi_dmul>
 8017116:	4602      	mov	r2, r0
 8017118:	460b      	mov	r3, r1
 801711a:	4620      	mov	r0, r4
 801711c:	4629      	mov	r1, r5
 801711e:	f7e9 f8a5 	bl	800026c <__aeabi_dsub>
 8017122:	a33d      	add	r3, pc, #244	; (adr r3, 8017218 <__ieee754_exp+0x2c8>)
 8017124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017128:	4680      	mov	r8, r0
 801712a:	4689      	mov	r9, r1
 801712c:	4630      	mov	r0, r6
 801712e:	4639      	mov	r1, r7
 8017130:	f7e9 fa54 	bl	80005dc <__aeabi_dmul>
 8017134:	ec41 0b18 	vmov	d8, r0, r1
 8017138:	e76f      	b.n	801701a <__ieee754_exp+0xca>
 801713a:	4a41      	ldr	r2, [pc, #260]	; (8017240 <__ieee754_exp+0x2f0>)
 801713c:	4293      	cmp	r3, r2
 801713e:	d811      	bhi.n	8017164 <__ieee754_exp+0x214>
 8017140:	a323      	add	r3, pc, #140	; (adr r3, 80171d0 <__ieee754_exp+0x280>)
 8017142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017146:	ee10 0a10 	vmov	r0, s0
 801714a:	4629      	mov	r1, r5
 801714c:	f7e9 f890 	bl	8000270 <__adddf3>
 8017150:	4b39      	ldr	r3, [pc, #228]	; (8017238 <__ieee754_exp+0x2e8>)
 8017152:	2200      	movs	r2, #0
 8017154:	f7e9 fcd2 	bl	8000afc <__aeabi_dcmpgt>
 8017158:	b138      	cbz	r0, 801716a <__ieee754_exp+0x21a>
 801715a:	4b37      	ldr	r3, [pc, #220]	; (8017238 <__ieee754_exp+0x2e8>)
 801715c:	2200      	movs	r2, #0
 801715e:	4620      	mov	r0, r4
 8017160:	4629      	mov	r1, r5
 8017162:	e710      	b.n	8016f86 <__ieee754_exp+0x36>
 8017164:	f04f 0a00 	mov.w	sl, #0
 8017168:	e75f      	b.n	801702a <__ieee754_exp+0xda>
 801716a:	4682      	mov	sl, r0
 801716c:	e75d      	b.n	801702a <__ieee754_exp+0xda>
 801716e:	4632      	mov	r2, r6
 8017170:	463b      	mov	r3, r7
 8017172:	2000      	movs	r0, #0
 8017174:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8017178:	f7e9 f878 	bl	800026c <__aeabi_dsub>
 801717c:	4602      	mov	r2, r0
 801717e:	460b      	mov	r3, r1
 8017180:	ec51 0b19 	vmov	r0, r1, d9
 8017184:	f7e9 fb54 	bl	8000830 <__aeabi_ddiv>
 8017188:	4602      	mov	r2, r0
 801718a:	460b      	mov	r3, r1
 801718c:	ec51 0b18 	vmov	r0, r1, d8
 8017190:	f7e9 f86c 	bl	800026c <__aeabi_dsub>
 8017194:	4642      	mov	r2, r8
 8017196:	464b      	mov	r3, r9
 8017198:	f7e9 f868 	bl	800026c <__aeabi_dsub>
 801719c:	4602      	mov	r2, r0
 801719e:	460b      	mov	r3, r1
 80171a0:	2000      	movs	r0, #0
 80171a2:	4925      	ldr	r1, [pc, #148]	; (8017238 <__ieee754_exp+0x2e8>)
 80171a4:	f7e9 f862 	bl	800026c <__aeabi_dsub>
 80171a8:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 80171ac:	4592      	cmp	sl, r2
 80171ae:	db02      	blt.n	80171b6 <__ieee754_exp+0x266>
 80171b0:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 80171b4:	e6e9      	b.n	8016f8a <__ieee754_exp+0x3a>
 80171b6:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 80171ba:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 80171be:	2200      	movs	r2, #0
 80171c0:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 80171c4:	e6f9      	b.n	8016fba <__ieee754_exp+0x6a>
 80171c6:	bf00      	nop
 80171c8:	fefa39ef 	.word	0xfefa39ef
 80171cc:	40862e42 	.word	0x40862e42
 80171d0:	8800759c 	.word	0x8800759c
 80171d4:	7e37e43c 	.word	0x7e37e43c
 80171d8:	d52d3051 	.word	0xd52d3051
 80171dc:	c0874910 	.word	0xc0874910
 80171e0:	72bea4d0 	.word	0x72bea4d0
 80171e4:	3e663769 	.word	0x3e663769
 80171e8:	c5d26bf1 	.word	0xc5d26bf1
 80171ec:	3ebbbd41 	.word	0x3ebbbd41
 80171f0:	af25de2c 	.word	0xaf25de2c
 80171f4:	3f11566a 	.word	0x3f11566a
 80171f8:	16bebd93 	.word	0x16bebd93
 80171fc:	3f66c16c 	.word	0x3f66c16c
 8017200:	5555553e 	.word	0x5555553e
 8017204:	3fc55555 	.word	0x3fc55555
 8017208:	652b82fe 	.word	0x652b82fe
 801720c:	3ff71547 	.word	0x3ff71547
 8017210:	fee00000 	.word	0xfee00000
 8017214:	3fe62e42 	.word	0x3fe62e42
 8017218:	35793c76 	.word	0x35793c76
 801721c:	3dea39ef 	.word	0x3dea39ef
 8017220:	40862e41 	.word	0x40862e41
 8017224:	7fefffff 	.word	0x7fefffff
 8017228:	3fd62e42 	.word	0x3fd62e42
 801722c:	3ff0a2b1 	.word	0x3ff0a2b1
 8017230:	08017b40 	.word	0x08017b40
 8017234:	08017b50 	.word	0x08017b50
 8017238:	3ff00000 	.word	0x3ff00000
 801723c:	08017b30 	.word	0x08017b30
 8017240:	3e2fffff 	.word	0x3e2fffff
 8017244:	00000000 	.word	0x00000000

08017248 <__ieee754_log>:
 8017248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801724c:	ec51 0b10 	vmov	r0, r1, d0
 8017250:	ed2d 8b04 	vpush	{d8-d9}
 8017254:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8017258:	b083      	sub	sp, #12
 801725a:	460d      	mov	r5, r1
 801725c:	da29      	bge.n	80172b2 <__ieee754_log+0x6a>
 801725e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8017262:	4303      	orrs	r3, r0
 8017264:	ee10 2a10 	vmov	r2, s0
 8017268:	d10c      	bne.n	8017284 <__ieee754_log+0x3c>
 801726a:	49cf      	ldr	r1, [pc, #828]	; (80175a8 <__ieee754_log+0x360>)
 801726c:	2200      	movs	r2, #0
 801726e:	2300      	movs	r3, #0
 8017270:	2000      	movs	r0, #0
 8017272:	f7e9 fadd 	bl	8000830 <__aeabi_ddiv>
 8017276:	ec41 0b10 	vmov	d0, r0, r1
 801727a:	b003      	add	sp, #12
 801727c:	ecbd 8b04 	vpop	{d8-d9}
 8017280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017284:	2900      	cmp	r1, #0
 8017286:	da05      	bge.n	8017294 <__ieee754_log+0x4c>
 8017288:	460b      	mov	r3, r1
 801728a:	f7e8 ffef 	bl	800026c <__aeabi_dsub>
 801728e:	2200      	movs	r2, #0
 8017290:	2300      	movs	r3, #0
 8017292:	e7ee      	b.n	8017272 <__ieee754_log+0x2a>
 8017294:	4bc5      	ldr	r3, [pc, #788]	; (80175ac <__ieee754_log+0x364>)
 8017296:	2200      	movs	r2, #0
 8017298:	f7e9 f9a0 	bl	80005dc <__aeabi_dmul>
 801729c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 80172a0:	460d      	mov	r5, r1
 80172a2:	4ac3      	ldr	r2, [pc, #780]	; (80175b0 <__ieee754_log+0x368>)
 80172a4:	4295      	cmp	r5, r2
 80172a6:	dd06      	ble.n	80172b6 <__ieee754_log+0x6e>
 80172a8:	4602      	mov	r2, r0
 80172aa:	460b      	mov	r3, r1
 80172ac:	f7e8 ffe0 	bl	8000270 <__adddf3>
 80172b0:	e7e1      	b.n	8017276 <__ieee754_log+0x2e>
 80172b2:	2300      	movs	r3, #0
 80172b4:	e7f5      	b.n	80172a2 <__ieee754_log+0x5a>
 80172b6:	152c      	asrs	r4, r5, #20
 80172b8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80172bc:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80172c0:	441c      	add	r4, r3
 80172c2:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 80172c6:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 80172ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80172ce:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 80172d2:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 80172d6:	ea42 0105 	orr.w	r1, r2, r5
 80172da:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 80172de:	2200      	movs	r2, #0
 80172e0:	4bb4      	ldr	r3, [pc, #720]	; (80175b4 <__ieee754_log+0x36c>)
 80172e2:	f7e8 ffc3 	bl	800026c <__aeabi_dsub>
 80172e6:	1cab      	adds	r3, r5, #2
 80172e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80172ec:	2b02      	cmp	r3, #2
 80172ee:	4682      	mov	sl, r0
 80172f0:	468b      	mov	fp, r1
 80172f2:	f04f 0200 	mov.w	r2, #0
 80172f6:	dc53      	bgt.n	80173a0 <__ieee754_log+0x158>
 80172f8:	2300      	movs	r3, #0
 80172fa:	f7e9 fbd7 	bl	8000aac <__aeabi_dcmpeq>
 80172fe:	b1d0      	cbz	r0, 8017336 <__ieee754_log+0xee>
 8017300:	2c00      	cmp	r4, #0
 8017302:	f000 8122 	beq.w	801754a <__ieee754_log+0x302>
 8017306:	4620      	mov	r0, r4
 8017308:	f7e9 f8fe 	bl	8000508 <__aeabi_i2d>
 801730c:	a390      	add	r3, pc, #576	; (adr r3, 8017550 <__ieee754_log+0x308>)
 801730e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017312:	4606      	mov	r6, r0
 8017314:	460f      	mov	r7, r1
 8017316:	f7e9 f961 	bl	80005dc <__aeabi_dmul>
 801731a:	a38f      	add	r3, pc, #572	; (adr r3, 8017558 <__ieee754_log+0x310>)
 801731c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017320:	4604      	mov	r4, r0
 8017322:	460d      	mov	r5, r1
 8017324:	4630      	mov	r0, r6
 8017326:	4639      	mov	r1, r7
 8017328:	f7e9 f958 	bl	80005dc <__aeabi_dmul>
 801732c:	4602      	mov	r2, r0
 801732e:	460b      	mov	r3, r1
 8017330:	4620      	mov	r0, r4
 8017332:	4629      	mov	r1, r5
 8017334:	e7ba      	b.n	80172ac <__ieee754_log+0x64>
 8017336:	a38a      	add	r3, pc, #552	; (adr r3, 8017560 <__ieee754_log+0x318>)
 8017338:	e9d3 2300 	ldrd	r2, r3, [r3]
 801733c:	4650      	mov	r0, sl
 801733e:	4659      	mov	r1, fp
 8017340:	f7e9 f94c 	bl	80005dc <__aeabi_dmul>
 8017344:	4602      	mov	r2, r0
 8017346:	460b      	mov	r3, r1
 8017348:	2000      	movs	r0, #0
 801734a:	499b      	ldr	r1, [pc, #620]	; (80175b8 <__ieee754_log+0x370>)
 801734c:	f7e8 ff8e 	bl	800026c <__aeabi_dsub>
 8017350:	4652      	mov	r2, sl
 8017352:	4606      	mov	r6, r0
 8017354:	460f      	mov	r7, r1
 8017356:	465b      	mov	r3, fp
 8017358:	4650      	mov	r0, sl
 801735a:	4659      	mov	r1, fp
 801735c:	f7e9 f93e 	bl	80005dc <__aeabi_dmul>
 8017360:	4602      	mov	r2, r0
 8017362:	460b      	mov	r3, r1
 8017364:	4630      	mov	r0, r6
 8017366:	4639      	mov	r1, r7
 8017368:	f7e9 f938 	bl	80005dc <__aeabi_dmul>
 801736c:	4606      	mov	r6, r0
 801736e:	460f      	mov	r7, r1
 8017370:	b914      	cbnz	r4, 8017378 <__ieee754_log+0x130>
 8017372:	4632      	mov	r2, r6
 8017374:	463b      	mov	r3, r7
 8017376:	e0a2      	b.n	80174be <__ieee754_log+0x276>
 8017378:	4620      	mov	r0, r4
 801737a:	f7e9 f8c5 	bl	8000508 <__aeabi_i2d>
 801737e:	a374      	add	r3, pc, #464	; (adr r3, 8017550 <__ieee754_log+0x308>)
 8017380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017384:	4680      	mov	r8, r0
 8017386:	4689      	mov	r9, r1
 8017388:	f7e9 f928 	bl	80005dc <__aeabi_dmul>
 801738c:	a372      	add	r3, pc, #456	; (adr r3, 8017558 <__ieee754_log+0x310>)
 801738e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017392:	4604      	mov	r4, r0
 8017394:	460d      	mov	r5, r1
 8017396:	4640      	mov	r0, r8
 8017398:	4649      	mov	r1, r9
 801739a:	f7e9 f91f 	bl	80005dc <__aeabi_dmul>
 801739e:	e0a7      	b.n	80174f0 <__ieee754_log+0x2a8>
 80173a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80173a4:	f7e8 ff64 	bl	8000270 <__adddf3>
 80173a8:	4602      	mov	r2, r0
 80173aa:	460b      	mov	r3, r1
 80173ac:	4650      	mov	r0, sl
 80173ae:	4659      	mov	r1, fp
 80173b0:	f7e9 fa3e 	bl	8000830 <__aeabi_ddiv>
 80173b4:	ec41 0b18 	vmov	d8, r0, r1
 80173b8:	4620      	mov	r0, r4
 80173ba:	f7e9 f8a5 	bl	8000508 <__aeabi_i2d>
 80173be:	ec53 2b18 	vmov	r2, r3, d8
 80173c2:	ec41 0b19 	vmov	d9, r0, r1
 80173c6:	ec51 0b18 	vmov	r0, r1, d8
 80173ca:	f7e9 f907 	bl	80005dc <__aeabi_dmul>
 80173ce:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 80173d2:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 80173d6:	9301      	str	r3, [sp, #4]
 80173d8:	4602      	mov	r2, r0
 80173da:	460b      	mov	r3, r1
 80173dc:	4680      	mov	r8, r0
 80173de:	4689      	mov	r9, r1
 80173e0:	f7e9 f8fc 	bl	80005dc <__aeabi_dmul>
 80173e4:	a360      	add	r3, pc, #384	; (adr r3, 8017568 <__ieee754_log+0x320>)
 80173e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80173ea:	4606      	mov	r6, r0
 80173ec:	460f      	mov	r7, r1
 80173ee:	f7e9 f8f5 	bl	80005dc <__aeabi_dmul>
 80173f2:	a35f      	add	r3, pc, #380	; (adr r3, 8017570 <__ieee754_log+0x328>)
 80173f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80173f8:	f7e8 ff3a 	bl	8000270 <__adddf3>
 80173fc:	4632      	mov	r2, r6
 80173fe:	463b      	mov	r3, r7
 8017400:	f7e9 f8ec 	bl	80005dc <__aeabi_dmul>
 8017404:	a35c      	add	r3, pc, #368	; (adr r3, 8017578 <__ieee754_log+0x330>)
 8017406:	e9d3 2300 	ldrd	r2, r3, [r3]
 801740a:	f7e8 ff31 	bl	8000270 <__adddf3>
 801740e:	4632      	mov	r2, r6
 8017410:	463b      	mov	r3, r7
 8017412:	f7e9 f8e3 	bl	80005dc <__aeabi_dmul>
 8017416:	a35a      	add	r3, pc, #360	; (adr r3, 8017580 <__ieee754_log+0x338>)
 8017418:	e9d3 2300 	ldrd	r2, r3, [r3]
 801741c:	f7e8 ff28 	bl	8000270 <__adddf3>
 8017420:	4642      	mov	r2, r8
 8017422:	464b      	mov	r3, r9
 8017424:	f7e9 f8da 	bl	80005dc <__aeabi_dmul>
 8017428:	a357      	add	r3, pc, #348	; (adr r3, 8017588 <__ieee754_log+0x340>)
 801742a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801742e:	4680      	mov	r8, r0
 8017430:	4689      	mov	r9, r1
 8017432:	4630      	mov	r0, r6
 8017434:	4639      	mov	r1, r7
 8017436:	f7e9 f8d1 	bl	80005dc <__aeabi_dmul>
 801743a:	a355      	add	r3, pc, #340	; (adr r3, 8017590 <__ieee754_log+0x348>)
 801743c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017440:	f7e8 ff16 	bl	8000270 <__adddf3>
 8017444:	4632      	mov	r2, r6
 8017446:	463b      	mov	r3, r7
 8017448:	f7e9 f8c8 	bl	80005dc <__aeabi_dmul>
 801744c:	a352      	add	r3, pc, #328	; (adr r3, 8017598 <__ieee754_log+0x350>)
 801744e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017452:	f7e8 ff0d 	bl	8000270 <__adddf3>
 8017456:	4632      	mov	r2, r6
 8017458:	463b      	mov	r3, r7
 801745a:	f7e9 f8bf 	bl	80005dc <__aeabi_dmul>
 801745e:	460b      	mov	r3, r1
 8017460:	4602      	mov	r2, r0
 8017462:	4649      	mov	r1, r9
 8017464:	4640      	mov	r0, r8
 8017466:	f7e8 ff03 	bl	8000270 <__adddf3>
 801746a:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 801746e:	9b01      	ldr	r3, [sp, #4]
 8017470:	3551      	adds	r5, #81	; 0x51
 8017472:	431d      	orrs	r5, r3
 8017474:	2d00      	cmp	r5, #0
 8017476:	4680      	mov	r8, r0
 8017478:	4689      	mov	r9, r1
 801747a:	dd48      	ble.n	801750e <__ieee754_log+0x2c6>
 801747c:	4b4e      	ldr	r3, [pc, #312]	; (80175b8 <__ieee754_log+0x370>)
 801747e:	2200      	movs	r2, #0
 8017480:	4650      	mov	r0, sl
 8017482:	4659      	mov	r1, fp
 8017484:	f7e9 f8aa 	bl	80005dc <__aeabi_dmul>
 8017488:	4652      	mov	r2, sl
 801748a:	465b      	mov	r3, fp
 801748c:	f7e9 f8a6 	bl	80005dc <__aeabi_dmul>
 8017490:	4602      	mov	r2, r0
 8017492:	460b      	mov	r3, r1
 8017494:	4606      	mov	r6, r0
 8017496:	460f      	mov	r7, r1
 8017498:	4640      	mov	r0, r8
 801749a:	4649      	mov	r1, r9
 801749c:	f7e8 fee8 	bl	8000270 <__adddf3>
 80174a0:	ec53 2b18 	vmov	r2, r3, d8
 80174a4:	f7e9 f89a 	bl	80005dc <__aeabi_dmul>
 80174a8:	4680      	mov	r8, r0
 80174aa:	4689      	mov	r9, r1
 80174ac:	b964      	cbnz	r4, 80174c8 <__ieee754_log+0x280>
 80174ae:	4602      	mov	r2, r0
 80174b0:	460b      	mov	r3, r1
 80174b2:	4630      	mov	r0, r6
 80174b4:	4639      	mov	r1, r7
 80174b6:	f7e8 fed9 	bl	800026c <__aeabi_dsub>
 80174ba:	4602      	mov	r2, r0
 80174bc:	460b      	mov	r3, r1
 80174be:	4650      	mov	r0, sl
 80174c0:	4659      	mov	r1, fp
 80174c2:	f7e8 fed3 	bl	800026c <__aeabi_dsub>
 80174c6:	e6d6      	b.n	8017276 <__ieee754_log+0x2e>
 80174c8:	a321      	add	r3, pc, #132	; (adr r3, 8017550 <__ieee754_log+0x308>)
 80174ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80174ce:	ec51 0b19 	vmov	r0, r1, d9
 80174d2:	f7e9 f883 	bl	80005dc <__aeabi_dmul>
 80174d6:	a320      	add	r3, pc, #128	; (adr r3, 8017558 <__ieee754_log+0x310>)
 80174d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80174dc:	4604      	mov	r4, r0
 80174de:	460d      	mov	r5, r1
 80174e0:	ec51 0b19 	vmov	r0, r1, d9
 80174e4:	f7e9 f87a 	bl	80005dc <__aeabi_dmul>
 80174e8:	4642      	mov	r2, r8
 80174ea:	464b      	mov	r3, r9
 80174ec:	f7e8 fec0 	bl	8000270 <__adddf3>
 80174f0:	4602      	mov	r2, r0
 80174f2:	460b      	mov	r3, r1
 80174f4:	4630      	mov	r0, r6
 80174f6:	4639      	mov	r1, r7
 80174f8:	f7e8 feb8 	bl	800026c <__aeabi_dsub>
 80174fc:	4652      	mov	r2, sl
 80174fe:	465b      	mov	r3, fp
 8017500:	f7e8 feb4 	bl	800026c <__aeabi_dsub>
 8017504:	4602      	mov	r2, r0
 8017506:	460b      	mov	r3, r1
 8017508:	4620      	mov	r0, r4
 801750a:	4629      	mov	r1, r5
 801750c:	e7d9      	b.n	80174c2 <__ieee754_log+0x27a>
 801750e:	4602      	mov	r2, r0
 8017510:	460b      	mov	r3, r1
 8017512:	4650      	mov	r0, sl
 8017514:	4659      	mov	r1, fp
 8017516:	f7e8 fea9 	bl	800026c <__aeabi_dsub>
 801751a:	ec53 2b18 	vmov	r2, r3, d8
 801751e:	f7e9 f85d 	bl	80005dc <__aeabi_dmul>
 8017522:	4606      	mov	r6, r0
 8017524:	460f      	mov	r7, r1
 8017526:	2c00      	cmp	r4, #0
 8017528:	f43f af23 	beq.w	8017372 <__ieee754_log+0x12a>
 801752c:	a308      	add	r3, pc, #32	; (adr r3, 8017550 <__ieee754_log+0x308>)
 801752e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017532:	ec51 0b19 	vmov	r0, r1, d9
 8017536:	f7e9 f851 	bl	80005dc <__aeabi_dmul>
 801753a:	a307      	add	r3, pc, #28	; (adr r3, 8017558 <__ieee754_log+0x310>)
 801753c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017540:	4604      	mov	r4, r0
 8017542:	460d      	mov	r5, r1
 8017544:	ec51 0b19 	vmov	r0, r1, d9
 8017548:	e727      	b.n	801739a <__ieee754_log+0x152>
 801754a:	ed9f 0b15 	vldr	d0, [pc, #84]	; 80175a0 <__ieee754_log+0x358>
 801754e:	e694      	b.n	801727a <__ieee754_log+0x32>
 8017550:	fee00000 	.word	0xfee00000
 8017554:	3fe62e42 	.word	0x3fe62e42
 8017558:	35793c76 	.word	0x35793c76
 801755c:	3dea39ef 	.word	0x3dea39ef
 8017560:	55555555 	.word	0x55555555
 8017564:	3fd55555 	.word	0x3fd55555
 8017568:	df3e5244 	.word	0xdf3e5244
 801756c:	3fc2f112 	.word	0x3fc2f112
 8017570:	96cb03de 	.word	0x96cb03de
 8017574:	3fc74664 	.word	0x3fc74664
 8017578:	94229359 	.word	0x94229359
 801757c:	3fd24924 	.word	0x3fd24924
 8017580:	55555593 	.word	0x55555593
 8017584:	3fe55555 	.word	0x3fe55555
 8017588:	d078c69f 	.word	0xd078c69f
 801758c:	3fc39a09 	.word	0x3fc39a09
 8017590:	1d8e78af 	.word	0x1d8e78af
 8017594:	3fcc71c5 	.word	0x3fcc71c5
 8017598:	9997fa04 	.word	0x9997fa04
 801759c:	3fd99999 	.word	0x3fd99999
	...
 80175a8:	c3500000 	.word	0xc3500000
 80175ac:	43500000 	.word	0x43500000
 80175b0:	7fefffff 	.word	0x7fefffff
 80175b4:	3ff00000 	.word	0x3ff00000
 80175b8:	3fe00000 	.word	0x3fe00000

080175bc <__ieee754_sqrt>:
 80175bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80175c0:	ec55 4b10 	vmov	r4, r5, d0
 80175c4:	4e56      	ldr	r6, [pc, #344]	; (8017720 <__ieee754_sqrt+0x164>)
 80175c6:	43ae      	bics	r6, r5
 80175c8:	ee10 0a10 	vmov	r0, s0
 80175cc:	ee10 3a10 	vmov	r3, s0
 80175d0:	4629      	mov	r1, r5
 80175d2:	462a      	mov	r2, r5
 80175d4:	d110      	bne.n	80175f8 <__ieee754_sqrt+0x3c>
 80175d6:	ee10 2a10 	vmov	r2, s0
 80175da:	462b      	mov	r3, r5
 80175dc:	f7e8 fffe 	bl	80005dc <__aeabi_dmul>
 80175e0:	4602      	mov	r2, r0
 80175e2:	460b      	mov	r3, r1
 80175e4:	4620      	mov	r0, r4
 80175e6:	4629      	mov	r1, r5
 80175e8:	f7e8 fe42 	bl	8000270 <__adddf3>
 80175ec:	4604      	mov	r4, r0
 80175ee:	460d      	mov	r5, r1
 80175f0:	ec45 4b10 	vmov	d0, r4, r5
 80175f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80175f8:	2d00      	cmp	r5, #0
 80175fa:	dc10      	bgt.n	801761e <__ieee754_sqrt+0x62>
 80175fc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8017600:	4330      	orrs	r0, r6
 8017602:	d0f5      	beq.n	80175f0 <__ieee754_sqrt+0x34>
 8017604:	b15d      	cbz	r5, 801761e <__ieee754_sqrt+0x62>
 8017606:	ee10 2a10 	vmov	r2, s0
 801760a:	462b      	mov	r3, r5
 801760c:	ee10 0a10 	vmov	r0, s0
 8017610:	f7e8 fe2c 	bl	800026c <__aeabi_dsub>
 8017614:	4602      	mov	r2, r0
 8017616:	460b      	mov	r3, r1
 8017618:	f7e9 f90a 	bl	8000830 <__aeabi_ddiv>
 801761c:	e7e6      	b.n	80175ec <__ieee754_sqrt+0x30>
 801761e:	1509      	asrs	r1, r1, #20
 8017620:	d076      	beq.n	8017710 <__ieee754_sqrt+0x154>
 8017622:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8017626:	07ce      	lsls	r6, r1, #31
 8017628:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 801762c:	bf5e      	ittt	pl
 801762e:	0fda      	lsrpl	r2, r3, #31
 8017630:	005b      	lslpl	r3, r3, #1
 8017632:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8017636:	0fda      	lsrs	r2, r3, #31
 8017638:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 801763c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8017640:	2000      	movs	r0, #0
 8017642:	106d      	asrs	r5, r5, #1
 8017644:	005b      	lsls	r3, r3, #1
 8017646:	f04f 0e16 	mov.w	lr, #22
 801764a:	4684      	mov	ip, r0
 801764c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8017650:	eb0c 0401 	add.w	r4, ip, r1
 8017654:	4294      	cmp	r4, r2
 8017656:	bfde      	ittt	le
 8017658:	1b12      	suble	r2, r2, r4
 801765a:	eb04 0c01 	addle.w	ip, r4, r1
 801765e:	1840      	addle	r0, r0, r1
 8017660:	0052      	lsls	r2, r2, #1
 8017662:	f1be 0e01 	subs.w	lr, lr, #1
 8017666:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801766a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801766e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8017672:	d1ed      	bne.n	8017650 <__ieee754_sqrt+0x94>
 8017674:	4671      	mov	r1, lr
 8017676:	2720      	movs	r7, #32
 8017678:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801767c:	4562      	cmp	r2, ip
 801767e:	eb04 060e 	add.w	r6, r4, lr
 8017682:	dc02      	bgt.n	801768a <__ieee754_sqrt+0xce>
 8017684:	d113      	bne.n	80176ae <__ieee754_sqrt+0xf2>
 8017686:	429e      	cmp	r6, r3
 8017688:	d811      	bhi.n	80176ae <__ieee754_sqrt+0xf2>
 801768a:	2e00      	cmp	r6, #0
 801768c:	eb06 0e04 	add.w	lr, r6, r4
 8017690:	da43      	bge.n	801771a <__ieee754_sqrt+0x15e>
 8017692:	f1be 0f00 	cmp.w	lr, #0
 8017696:	db40      	blt.n	801771a <__ieee754_sqrt+0x15e>
 8017698:	f10c 0801 	add.w	r8, ip, #1
 801769c:	eba2 020c 	sub.w	r2, r2, ip
 80176a0:	429e      	cmp	r6, r3
 80176a2:	bf88      	it	hi
 80176a4:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80176a8:	1b9b      	subs	r3, r3, r6
 80176aa:	4421      	add	r1, r4
 80176ac:	46c4      	mov	ip, r8
 80176ae:	0052      	lsls	r2, r2, #1
 80176b0:	3f01      	subs	r7, #1
 80176b2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80176b6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80176ba:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80176be:	d1dd      	bne.n	801767c <__ieee754_sqrt+0xc0>
 80176c0:	4313      	orrs	r3, r2
 80176c2:	d006      	beq.n	80176d2 <__ieee754_sqrt+0x116>
 80176c4:	1c4c      	adds	r4, r1, #1
 80176c6:	bf13      	iteet	ne
 80176c8:	3101      	addne	r1, #1
 80176ca:	3001      	addeq	r0, #1
 80176cc:	4639      	moveq	r1, r7
 80176ce:	f021 0101 	bicne.w	r1, r1, #1
 80176d2:	1043      	asrs	r3, r0, #1
 80176d4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80176d8:	0849      	lsrs	r1, r1, #1
 80176da:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80176de:	07c2      	lsls	r2, r0, #31
 80176e0:	bf48      	it	mi
 80176e2:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 80176e6:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 80176ea:	460c      	mov	r4, r1
 80176ec:	463d      	mov	r5, r7
 80176ee:	e77f      	b.n	80175f0 <__ieee754_sqrt+0x34>
 80176f0:	0ada      	lsrs	r2, r3, #11
 80176f2:	3815      	subs	r0, #21
 80176f4:	055b      	lsls	r3, r3, #21
 80176f6:	2a00      	cmp	r2, #0
 80176f8:	d0fa      	beq.n	80176f0 <__ieee754_sqrt+0x134>
 80176fa:	02d7      	lsls	r7, r2, #11
 80176fc:	d50a      	bpl.n	8017714 <__ieee754_sqrt+0x158>
 80176fe:	f1c1 0420 	rsb	r4, r1, #32
 8017702:	fa23 f404 	lsr.w	r4, r3, r4
 8017706:	1e4d      	subs	r5, r1, #1
 8017708:	408b      	lsls	r3, r1
 801770a:	4322      	orrs	r2, r4
 801770c:	1b41      	subs	r1, r0, r5
 801770e:	e788      	b.n	8017622 <__ieee754_sqrt+0x66>
 8017710:	4608      	mov	r0, r1
 8017712:	e7f0      	b.n	80176f6 <__ieee754_sqrt+0x13a>
 8017714:	0052      	lsls	r2, r2, #1
 8017716:	3101      	adds	r1, #1
 8017718:	e7ef      	b.n	80176fa <__ieee754_sqrt+0x13e>
 801771a:	46e0      	mov	r8, ip
 801771c:	e7be      	b.n	801769c <__ieee754_sqrt+0xe0>
 801771e:	bf00      	nop
 8017720:	7ff00000 	.word	0x7ff00000

08017724 <finite>:
 8017724:	b082      	sub	sp, #8
 8017726:	ed8d 0b00 	vstr	d0, [sp]
 801772a:	9801      	ldr	r0, [sp, #4]
 801772c:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8017730:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8017734:	0fc0      	lsrs	r0, r0, #31
 8017736:	b002      	add	sp, #8
 8017738:	4770      	bx	lr
 801773a:	0000      	movs	r0, r0
 801773c:	0000      	movs	r0, r0
	...

08017740 <nan>:
 8017740:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8017748 <nan+0x8>
 8017744:	4770      	bx	lr
 8017746:	bf00      	nop
 8017748:	00000000 	.word	0x00000000
 801774c:	7ff80000 	.word	0x7ff80000

08017750 <_init>:
 8017750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017752:	bf00      	nop
 8017754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017756:	bc08      	pop	{r3}
 8017758:	469e      	mov	lr, r3
 801775a:	4770      	bx	lr

0801775c <_fini>:
 801775c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801775e:	bf00      	nop
 8017760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017762:	bc08      	pop	{r3}
 8017764:	469e      	mov	lr, r3
 8017766:	4770      	bx	lr
