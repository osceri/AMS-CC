
AMS-CC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001bad8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000820  0801bc68  0801bc68  0002bc68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c488  0801c488  000314ac  2**0
                  CONTENTS
  4 .ARM          00000008  0801c488  0801c488  0002c488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c490  0801c490  000314ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c490  0801c490  0002c490  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801c494  0801c494  0002c494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000014ac  20000000  0801c498  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000314ac  2**0
                  CONTENTS
 10 .bss          0001d86c  200014b0  200014b0  000314b0  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2001ed1c  2001ed1c  000314b0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000314ac  2**0
                  CONTENTS, READONLY
 13 .debug_info   00056cc3  00000000  00000000  000314dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00009930  00000000  00000000  0008819f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00005328  00000000  00000000  00091ad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00004dc0  00000000  00000000  00096df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002bf49  00000000  00000000  0009bbb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00040cf6  00000000  00000000  000c7b01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001012ec  00000000  00000000  001087f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000c8  00000000  00000000  00209ae3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00016aac  00000000  00000000  00209bac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200014b0 	.word	0x200014b0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801bc50 	.word	0x0801bc50

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200014b4 	.word	0x200014b4
 80001cc:	0801bc50 	.word	0x0801bc50

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	2001ec68 	.word	0x2001ec68

08000264 <__aeabi_drsub>:
 8000264:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000268:	e002      	b.n	8000270 <__adddf3>
 800026a:	bf00      	nop

0800026c <__aeabi_dsub>:
 800026c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000270 <__adddf3>:
 8000270:	b530      	push	{r4, r5, lr}
 8000272:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000276:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800027a:	ea94 0f05 	teq	r4, r5
 800027e:	bf08      	it	eq
 8000280:	ea90 0f02 	teqeq	r0, r2
 8000284:	bf1f      	itttt	ne
 8000286:	ea54 0c00 	orrsne.w	ip, r4, r0
 800028a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800028e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000292:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000296:	f000 80e2 	beq.w	800045e <__adddf3+0x1ee>
 800029a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800029e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002a2:	bfb8      	it	lt
 80002a4:	426d      	neglt	r5, r5
 80002a6:	dd0c      	ble.n	80002c2 <__adddf3+0x52>
 80002a8:	442c      	add	r4, r5
 80002aa:	ea80 0202 	eor.w	r2, r0, r2
 80002ae:	ea81 0303 	eor.w	r3, r1, r3
 80002b2:	ea82 0000 	eor.w	r0, r2, r0
 80002b6:	ea83 0101 	eor.w	r1, r3, r1
 80002ba:	ea80 0202 	eor.w	r2, r0, r2
 80002be:	ea81 0303 	eor.w	r3, r1, r3
 80002c2:	2d36      	cmp	r5, #54	; 0x36
 80002c4:	bf88      	it	hi
 80002c6:	bd30      	pophi	{r4, r5, pc}
 80002c8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002d0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002d4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002d8:	d002      	beq.n	80002e0 <__adddf3+0x70>
 80002da:	4240      	negs	r0, r0
 80002dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002e0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002e8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002ec:	d002      	beq.n	80002f4 <__adddf3+0x84>
 80002ee:	4252      	negs	r2, r2
 80002f0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002f4:	ea94 0f05 	teq	r4, r5
 80002f8:	f000 80a7 	beq.w	800044a <__adddf3+0x1da>
 80002fc:	f1a4 0401 	sub.w	r4, r4, #1
 8000300:	f1d5 0e20 	rsbs	lr, r5, #32
 8000304:	db0d      	blt.n	8000322 <__adddf3+0xb2>
 8000306:	fa02 fc0e 	lsl.w	ip, r2, lr
 800030a:	fa22 f205 	lsr.w	r2, r2, r5
 800030e:	1880      	adds	r0, r0, r2
 8000310:	f141 0100 	adc.w	r1, r1, #0
 8000314:	fa03 f20e 	lsl.w	r2, r3, lr
 8000318:	1880      	adds	r0, r0, r2
 800031a:	fa43 f305 	asr.w	r3, r3, r5
 800031e:	4159      	adcs	r1, r3
 8000320:	e00e      	b.n	8000340 <__adddf3+0xd0>
 8000322:	f1a5 0520 	sub.w	r5, r5, #32
 8000326:	f10e 0e20 	add.w	lr, lr, #32
 800032a:	2a01      	cmp	r2, #1
 800032c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000330:	bf28      	it	cs
 8000332:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	18c0      	adds	r0, r0, r3
 800033c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000340:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000344:	d507      	bpl.n	8000356 <__adddf3+0xe6>
 8000346:	f04f 0e00 	mov.w	lr, #0
 800034a:	f1dc 0c00 	rsbs	ip, ip, #0
 800034e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000352:	eb6e 0101 	sbc.w	r1, lr, r1
 8000356:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800035a:	d31b      	bcc.n	8000394 <__adddf3+0x124>
 800035c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000360:	d30c      	bcc.n	800037c <__adddf3+0x10c>
 8000362:	0849      	lsrs	r1, r1, #1
 8000364:	ea5f 0030 	movs.w	r0, r0, rrx
 8000368:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800036c:	f104 0401 	add.w	r4, r4, #1
 8000370:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000374:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000378:	f080 809a 	bcs.w	80004b0 <__adddf3+0x240>
 800037c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000380:	bf08      	it	eq
 8000382:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000386:	f150 0000 	adcs.w	r0, r0, #0
 800038a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800038e:	ea41 0105 	orr.w	r1, r1, r5
 8000392:	bd30      	pop	{r4, r5, pc}
 8000394:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000398:	4140      	adcs	r0, r0
 800039a:	eb41 0101 	adc.w	r1, r1, r1
 800039e:	3c01      	subs	r4, #1
 80003a0:	bf28      	it	cs
 80003a2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003a6:	d2e9      	bcs.n	800037c <__adddf3+0x10c>
 80003a8:	f091 0f00 	teq	r1, #0
 80003ac:	bf04      	itt	eq
 80003ae:	4601      	moveq	r1, r0
 80003b0:	2000      	moveq	r0, #0
 80003b2:	fab1 f381 	clz	r3, r1
 80003b6:	bf08      	it	eq
 80003b8:	3320      	addeq	r3, #32
 80003ba:	f1a3 030b 	sub.w	r3, r3, #11
 80003be:	f1b3 0220 	subs.w	r2, r3, #32
 80003c2:	da0c      	bge.n	80003de <__adddf3+0x16e>
 80003c4:	320c      	adds	r2, #12
 80003c6:	dd08      	ble.n	80003da <__adddf3+0x16a>
 80003c8:	f102 0c14 	add.w	ip, r2, #20
 80003cc:	f1c2 020c 	rsb	r2, r2, #12
 80003d0:	fa01 f00c 	lsl.w	r0, r1, ip
 80003d4:	fa21 f102 	lsr.w	r1, r1, r2
 80003d8:	e00c      	b.n	80003f4 <__adddf3+0x184>
 80003da:	f102 0214 	add.w	r2, r2, #20
 80003de:	bfd8      	it	le
 80003e0:	f1c2 0c20 	rsble	ip, r2, #32
 80003e4:	fa01 f102 	lsl.w	r1, r1, r2
 80003e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003ec:	bfdc      	itt	le
 80003ee:	ea41 010c 	orrle.w	r1, r1, ip
 80003f2:	4090      	lslle	r0, r2
 80003f4:	1ae4      	subs	r4, r4, r3
 80003f6:	bfa2      	ittt	ge
 80003f8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003fc:	4329      	orrge	r1, r5
 80003fe:	bd30      	popge	{r4, r5, pc}
 8000400:	ea6f 0404 	mvn.w	r4, r4
 8000404:	3c1f      	subs	r4, #31
 8000406:	da1c      	bge.n	8000442 <__adddf3+0x1d2>
 8000408:	340c      	adds	r4, #12
 800040a:	dc0e      	bgt.n	800042a <__adddf3+0x1ba>
 800040c:	f104 0414 	add.w	r4, r4, #20
 8000410:	f1c4 0220 	rsb	r2, r4, #32
 8000414:	fa20 f004 	lsr.w	r0, r0, r4
 8000418:	fa01 f302 	lsl.w	r3, r1, r2
 800041c:	ea40 0003 	orr.w	r0, r0, r3
 8000420:	fa21 f304 	lsr.w	r3, r1, r4
 8000424:	ea45 0103 	orr.w	r1, r5, r3
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	f1c4 040c 	rsb	r4, r4, #12
 800042e:	f1c4 0220 	rsb	r2, r4, #32
 8000432:	fa20 f002 	lsr.w	r0, r0, r2
 8000436:	fa01 f304 	lsl.w	r3, r1, r4
 800043a:	ea40 0003 	orr.w	r0, r0, r3
 800043e:	4629      	mov	r1, r5
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	fa21 f004 	lsr.w	r0, r1, r4
 8000446:	4629      	mov	r1, r5
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	f094 0f00 	teq	r4, #0
 800044e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000452:	bf06      	itte	eq
 8000454:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000458:	3401      	addeq	r4, #1
 800045a:	3d01      	subne	r5, #1
 800045c:	e74e      	b.n	80002fc <__adddf3+0x8c>
 800045e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000462:	bf18      	it	ne
 8000464:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000468:	d029      	beq.n	80004be <__adddf3+0x24e>
 800046a:	ea94 0f05 	teq	r4, r5
 800046e:	bf08      	it	eq
 8000470:	ea90 0f02 	teqeq	r0, r2
 8000474:	d005      	beq.n	8000482 <__adddf3+0x212>
 8000476:	ea54 0c00 	orrs.w	ip, r4, r0
 800047a:	bf04      	itt	eq
 800047c:	4619      	moveq	r1, r3
 800047e:	4610      	moveq	r0, r2
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea91 0f03 	teq	r1, r3
 8000486:	bf1e      	ittt	ne
 8000488:	2100      	movne	r1, #0
 800048a:	2000      	movne	r0, #0
 800048c:	bd30      	popne	{r4, r5, pc}
 800048e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000492:	d105      	bne.n	80004a0 <__adddf3+0x230>
 8000494:	0040      	lsls	r0, r0, #1
 8000496:	4149      	adcs	r1, r1
 8000498:	bf28      	it	cs
 800049a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800049e:	bd30      	pop	{r4, r5, pc}
 80004a0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004a4:	bf3c      	itt	cc
 80004a6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004aa:	bd30      	popcc	{r4, r5, pc}
 80004ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004b0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004b8:	f04f 0000 	mov.w	r0, #0
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c2:	bf1a      	itte	ne
 80004c4:	4619      	movne	r1, r3
 80004c6:	4610      	movne	r0, r2
 80004c8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004cc:	bf1c      	itt	ne
 80004ce:	460b      	movne	r3, r1
 80004d0:	4602      	movne	r2, r0
 80004d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004d6:	bf06      	itte	eq
 80004d8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004dc:	ea91 0f03 	teqeq	r1, r3
 80004e0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	bf00      	nop

080004e8 <__aeabi_ui2d>:
 80004e8:	f090 0f00 	teq	r0, #0
 80004ec:	bf04      	itt	eq
 80004ee:	2100      	moveq	r1, #0
 80004f0:	4770      	bxeq	lr
 80004f2:	b530      	push	{r4, r5, lr}
 80004f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fc:	f04f 0500 	mov.w	r5, #0
 8000500:	f04f 0100 	mov.w	r1, #0
 8000504:	e750      	b.n	80003a8 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_i2d>:
 8000508:	f090 0f00 	teq	r0, #0
 800050c:	bf04      	itt	eq
 800050e:	2100      	moveq	r1, #0
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000518:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000520:	bf48      	it	mi
 8000522:	4240      	negmi	r0, r0
 8000524:	f04f 0100 	mov.w	r1, #0
 8000528:	e73e      	b.n	80003a8 <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_f2d>:
 800052c:	0042      	lsls	r2, r0, #1
 800052e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000532:	ea4f 0131 	mov.w	r1, r1, rrx
 8000536:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800053a:	bf1f      	itttt	ne
 800053c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000540:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000544:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000548:	4770      	bxne	lr
 800054a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800054e:	bf08      	it	eq
 8000550:	4770      	bxeq	lr
 8000552:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000556:	bf04      	itt	eq
 8000558:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000564:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000568:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800056c:	e71c      	b.n	80003a8 <__adddf3+0x138>
 800056e:	bf00      	nop

08000570 <__aeabi_ul2d>:
 8000570:	ea50 0201 	orrs.w	r2, r0, r1
 8000574:	bf08      	it	eq
 8000576:	4770      	bxeq	lr
 8000578:	b530      	push	{r4, r5, lr}
 800057a:	f04f 0500 	mov.w	r5, #0
 800057e:	e00a      	b.n	8000596 <__aeabi_l2d+0x16>

08000580 <__aeabi_l2d>:
 8000580:	ea50 0201 	orrs.w	r2, r0, r1
 8000584:	bf08      	it	eq
 8000586:	4770      	bxeq	lr
 8000588:	b530      	push	{r4, r5, lr}
 800058a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800058e:	d502      	bpl.n	8000596 <__aeabi_l2d+0x16>
 8000590:	4240      	negs	r0, r0
 8000592:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000596:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800059a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800059e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005a2:	f43f aed8 	beq.w	8000356 <__adddf3+0xe6>
 80005a6:	f04f 0203 	mov.w	r2, #3
 80005aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ae:	bf18      	it	ne
 80005b0:	3203      	addne	r2, #3
 80005b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005b6:	bf18      	it	ne
 80005b8:	3203      	addne	r2, #3
 80005ba:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005be:	f1c2 0320 	rsb	r3, r2, #32
 80005c2:	fa00 fc03 	lsl.w	ip, r0, r3
 80005c6:	fa20 f002 	lsr.w	r0, r0, r2
 80005ca:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ce:	ea40 000e 	orr.w	r0, r0, lr
 80005d2:	fa21 f102 	lsr.w	r1, r1, r2
 80005d6:	4414      	add	r4, r2
 80005d8:	e6bd      	b.n	8000356 <__adddf3+0xe6>
 80005da:	bf00      	nop

080005dc <__aeabi_dmul>:
 80005dc:	b570      	push	{r4, r5, r6, lr}
 80005de:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ea:	bf1d      	ittte	ne
 80005ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005f0:	ea94 0f0c 	teqne	r4, ip
 80005f4:	ea95 0f0c 	teqne	r5, ip
 80005f8:	f000 f8de 	bleq	80007b8 <__aeabi_dmul+0x1dc>
 80005fc:	442c      	add	r4, r5
 80005fe:	ea81 0603 	eor.w	r6, r1, r3
 8000602:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000606:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800060a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800060e:	bf18      	it	ne
 8000610:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800061c:	d038      	beq.n	8000690 <__aeabi_dmul+0xb4>
 800061e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000622:	f04f 0500 	mov.w	r5, #0
 8000626:	fbe1 e502 	umlal	lr, r5, r1, r2
 800062a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800062e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000632:	f04f 0600 	mov.w	r6, #0
 8000636:	fbe1 5603 	umlal	r5, r6, r1, r3
 800063a:	f09c 0f00 	teq	ip, #0
 800063e:	bf18      	it	ne
 8000640:	f04e 0e01 	orrne.w	lr, lr, #1
 8000644:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000648:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800064c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000650:	d204      	bcs.n	800065c <__aeabi_dmul+0x80>
 8000652:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000656:	416d      	adcs	r5, r5
 8000658:	eb46 0606 	adc.w	r6, r6, r6
 800065c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000660:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000664:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000668:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800066c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000670:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000674:	bf88      	it	hi
 8000676:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800067a:	d81e      	bhi.n	80006ba <__aeabi_dmul+0xde>
 800067c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000680:	bf08      	it	eq
 8000682:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000686:	f150 0000 	adcs.w	r0, r0, #0
 800068a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800068e:	bd70      	pop	{r4, r5, r6, pc}
 8000690:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000694:	ea46 0101 	orr.w	r1, r6, r1
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	ea81 0103 	eor.w	r1, r1, r3
 80006a0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006a4:	bfc2      	ittt	gt
 80006a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ae:	bd70      	popgt	{r4, r5, r6, pc}
 80006b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006b4:	f04f 0e00 	mov.w	lr, #0
 80006b8:	3c01      	subs	r4, #1
 80006ba:	f300 80ab 	bgt.w	8000814 <__aeabi_dmul+0x238>
 80006be:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006c2:	bfde      	ittt	le
 80006c4:	2000      	movle	r0, #0
 80006c6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ca:	bd70      	pople	{r4, r5, r6, pc}
 80006cc:	f1c4 0400 	rsb	r4, r4, #0
 80006d0:	3c20      	subs	r4, #32
 80006d2:	da35      	bge.n	8000740 <__aeabi_dmul+0x164>
 80006d4:	340c      	adds	r4, #12
 80006d6:	dc1b      	bgt.n	8000710 <__aeabi_dmul+0x134>
 80006d8:	f104 0414 	add.w	r4, r4, #20
 80006dc:	f1c4 0520 	rsb	r5, r4, #32
 80006e0:	fa00 f305 	lsl.w	r3, r0, r5
 80006e4:	fa20 f004 	lsr.w	r0, r0, r4
 80006e8:	fa01 f205 	lsl.w	r2, r1, r5
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	fa21 f604 	lsr.w	r6, r1, r4
 8000700:	eb42 0106 	adc.w	r1, r2, r6
 8000704:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000708:	bf08      	it	eq
 800070a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070e:	bd70      	pop	{r4, r5, r6, pc}
 8000710:	f1c4 040c 	rsb	r4, r4, #12
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f304 	lsl.w	r3, r0, r4
 800071c:	fa20 f005 	lsr.w	r0, r0, r5
 8000720:	fa01 f204 	lsl.w	r2, r1, r4
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000730:	f141 0100 	adc.w	r1, r1, #0
 8000734:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000738:	bf08      	it	eq
 800073a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073e:	bd70      	pop	{r4, r5, r6, pc}
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f205 	lsl.w	r2, r0, r5
 8000748:	ea4e 0e02 	orr.w	lr, lr, r2
 800074c:	fa20 f304 	lsr.w	r3, r0, r4
 8000750:	fa01 f205 	lsl.w	r2, r1, r5
 8000754:	ea43 0302 	orr.w	r3, r3, r2
 8000758:	fa21 f004 	lsr.w	r0, r1, r4
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	fa21 f204 	lsr.w	r2, r1, r4
 8000764:	ea20 0002 	bic.w	r0, r0, r2
 8000768:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800076c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000770:	bf08      	it	eq
 8000772:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000776:	bd70      	pop	{r4, r5, r6, pc}
 8000778:	f094 0f00 	teq	r4, #0
 800077c:	d10f      	bne.n	800079e <__aeabi_dmul+0x1c2>
 800077e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000782:	0040      	lsls	r0, r0, #1
 8000784:	eb41 0101 	adc.w	r1, r1, r1
 8000788:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800078c:	bf08      	it	eq
 800078e:	3c01      	subeq	r4, #1
 8000790:	d0f7      	beq.n	8000782 <__aeabi_dmul+0x1a6>
 8000792:	ea41 0106 	orr.w	r1, r1, r6
 8000796:	f095 0f00 	teq	r5, #0
 800079a:	bf18      	it	ne
 800079c:	4770      	bxne	lr
 800079e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007a2:	0052      	lsls	r2, r2, #1
 80007a4:	eb43 0303 	adc.w	r3, r3, r3
 80007a8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007ac:	bf08      	it	eq
 80007ae:	3d01      	subeq	r5, #1
 80007b0:	d0f7      	beq.n	80007a2 <__aeabi_dmul+0x1c6>
 80007b2:	ea43 0306 	orr.w	r3, r3, r6
 80007b6:	4770      	bx	lr
 80007b8:	ea94 0f0c 	teq	r4, ip
 80007bc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007c0:	bf18      	it	ne
 80007c2:	ea95 0f0c 	teqne	r5, ip
 80007c6:	d00c      	beq.n	80007e2 <__aeabi_dmul+0x206>
 80007c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007cc:	bf18      	it	ne
 80007ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007d2:	d1d1      	bne.n	8000778 <__aeabi_dmul+0x19c>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e6:	bf06      	itte	eq
 80007e8:	4610      	moveq	r0, r2
 80007ea:	4619      	moveq	r1, r3
 80007ec:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f0:	d019      	beq.n	8000826 <__aeabi_dmul+0x24a>
 80007f2:	ea94 0f0c 	teq	r4, ip
 80007f6:	d102      	bne.n	80007fe <__aeabi_dmul+0x222>
 80007f8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007fc:	d113      	bne.n	8000826 <__aeabi_dmul+0x24a>
 80007fe:	ea95 0f0c 	teq	r5, ip
 8000802:	d105      	bne.n	8000810 <__aeabi_dmul+0x234>
 8000804:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000808:	bf1c      	itt	ne
 800080a:	4610      	movne	r0, r2
 800080c:	4619      	movne	r1, r3
 800080e:	d10a      	bne.n	8000826 <__aeabi_dmul+0x24a>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800081c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000820:	f04f 0000 	mov.w	r0, #0
 8000824:	bd70      	pop	{r4, r5, r6, pc}
 8000826:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800082a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800082e:	bd70      	pop	{r4, r5, r6, pc}

08000830 <__aeabi_ddiv>:
 8000830:	b570      	push	{r4, r5, r6, lr}
 8000832:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000836:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800083a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800083e:	bf1d      	ittte	ne
 8000840:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000844:	ea94 0f0c 	teqne	r4, ip
 8000848:	ea95 0f0c 	teqne	r5, ip
 800084c:	f000 f8a7 	bleq	800099e <__aeabi_ddiv+0x16e>
 8000850:	eba4 0405 	sub.w	r4, r4, r5
 8000854:	ea81 0e03 	eor.w	lr, r1, r3
 8000858:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800085c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000860:	f000 8088 	beq.w	8000974 <__aeabi_ddiv+0x144>
 8000864:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000868:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800086c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000870:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000874:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000878:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800087c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000880:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000884:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000888:	429d      	cmp	r5, r3
 800088a:	bf08      	it	eq
 800088c:	4296      	cmpeq	r6, r2
 800088e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000892:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000896:	d202      	bcs.n	800089e <__aeabi_ddiv+0x6e>
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	1ab6      	subs	r6, r6, r2
 80008a0:	eb65 0503 	sbc.w	r5, r5, r3
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ae:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ba:	bf22      	ittt	cs
 80008bc:	1ab6      	subcs	r6, r6, r2
 80008be:	4675      	movcs	r5, lr
 80008c0:	ea40 000c 	orrcs.w	r0, r0, ip
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d2:	bf22      	ittt	cs
 80008d4:	1ab6      	subcs	r6, r6, r2
 80008d6:	4675      	movcs	r5, lr
 80008d8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008dc:	085b      	lsrs	r3, r3, #1
 80008de:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ea:	bf22      	ittt	cs
 80008ec:	1ab6      	subcs	r6, r6, r2
 80008ee:	4675      	movcs	r5, lr
 80008f0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000902:	bf22      	ittt	cs
 8000904:	1ab6      	subcs	r6, r6, r2
 8000906:	4675      	movcs	r5, lr
 8000908:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800090c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000910:	d018      	beq.n	8000944 <__aeabi_ddiv+0x114>
 8000912:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000916:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800091a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800091e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000922:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000926:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800092a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800092e:	d1c0      	bne.n	80008b2 <__aeabi_ddiv+0x82>
 8000930:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000934:	d10b      	bne.n	800094e <__aeabi_ddiv+0x11e>
 8000936:	ea41 0100 	orr.w	r1, r1, r0
 800093a:	f04f 0000 	mov.w	r0, #0
 800093e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000942:	e7b6      	b.n	80008b2 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	bf04      	itt	eq
 800094a:	4301      	orreq	r1, r0
 800094c:	2000      	moveq	r0, #0
 800094e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000952:	bf88      	it	hi
 8000954:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000958:	f63f aeaf 	bhi.w	80006ba <__aeabi_dmul+0xde>
 800095c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000960:	bf04      	itt	eq
 8000962:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000966:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800096a:	f150 0000 	adcs.w	r0, r0, #0
 800096e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000972:	bd70      	pop	{r4, r5, r6, pc}
 8000974:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000978:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800097c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000980:	bfc2      	ittt	gt
 8000982:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000986:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800098a:	bd70      	popgt	{r4, r5, r6, pc}
 800098c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000990:	f04f 0e00 	mov.w	lr, #0
 8000994:	3c01      	subs	r4, #1
 8000996:	e690      	b.n	80006ba <__aeabi_dmul+0xde>
 8000998:	ea45 0e06 	orr.w	lr, r5, r6
 800099c:	e68d      	b.n	80006ba <__aeabi_dmul+0xde>
 800099e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009a2:	ea94 0f0c 	teq	r4, ip
 80009a6:	bf08      	it	eq
 80009a8:	ea95 0f0c 	teqeq	r5, ip
 80009ac:	f43f af3b 	beq.w	8000826 <__aeabi_dmul+0x24a>
 80009b0:	ea94 0f0c 	teq	r4, ip
 80009b4:	d10a      	bne.n	80009cc <__aeabi_ddiv+0x19c>
 80009b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ba:	f47f af34 	bne.w	8000826 <__aeabi_dmul+0x24a>
 80009be:	ea95 0f0c 	teq	r5, ip
 80009c2:	f47f af25 	bne.w	8000810 <__aeabi_dmul+0x234>
 80009c6:	4610      	mov	r0, r2
 80009c8:	4619      	mov	r1, r3
 80009ca:	e72c      	b.n	8000826 <__aeabi_dmul+0x24a>
 80009cc:	ea95 0f0c 	teq	r5, ip
 80009d0:	d106      	bne.n	80009e0 <__aeabi_ddiv+0x1b0>
 80009d2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009d6:	f43f aefd 	beq.w	80007d4 <__aeabi_dmul+0x1f8>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e722      	b.n	8000826 <__aeabi_dmul+0x24a>
 80009e0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009e4:	bf18      	it	ne
 80009e6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ea:	f47f aec5 	bne.w	8000778 <__aeabi_dmul+0x19c>
 80009ee:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009f2:	f47f af0d 	bne.w	8000810 <__aeabi_dmul+0x234>
 80009f6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009fa:	f47f aeeb 	bne.w	80007d4 <__aeabi_dmul+0x1f8>
 80009fe:	e712      	b.n	8000826 <__aeabi_dmul+0x24a>

08000a00 <__gedf2>:
 8000a00:	f04f 3cff 	mov.w	ip, #4294967295
 8000a04:	e006      	b.n	8000a14 <__cmpdf2+0x4>
 8000a06:	bf00      	nop

08000a08 <__ledf2>:
 8000a08:	f04f 0c01 	mov.w	ip, #1
 8000a0c:	e002      	b.n	8000a14 <__cmpdf2+0x4>
 8000a0e:	bf00      	nop

08000a10 <__cmpdf2>:
 8000a10:	f04f 0c01 	mov.w	ip, #1
 8000a14:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a24:	bf18      	it	ne
 8000a26:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a2a:	d01b      	beq.n	8000a64 <__cmpdf2+0x54>
 8000a2c:	b001      	add	sp, #4
 8000a2e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a32:	bf0c      	ite	eq
 8000a34:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a38:	ea91 0f03 	teqne	r1, r3
 8000a3c:	bf02      	ittt	eq
 8000a3e:	ea90 0f02 	teqeq	r0, r2
 8000a42:	2000      	moveq	r0, #0
 8000a44:	4770      	bxeq	lr
 8000a46:	f110 0f00 	cmn.w	r0, #0
 8000a4a:	ea91 0f03 	teq	r1, r3
 8000a4e:	bf58      	it	pl
 8000a50:	4299      	cmppl	r1, r3
 8000a52:	bf08      	it	eq
 8000a54:	4290      	cmpeq	r0, r2
 8000a56:	bf2c      	ite	cs
 8000a58:	17d8      	asrcs	r0, r3, #31
 8000a5a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a5e:	f040 0001 	orr.w	r0, r0, #1
 8000a62:	4770      	bx	lr
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	d102      	bne.n	8000a74 <__cmpdf2+0x64>
 8000a6e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a72:	d107      	bne.n	8000a84 <__cmpdf2+0x74>
 8000a74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d1d6      	bne.n	8000a2c <__cmpdf2+0x1c>
 8000a7e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a82:	d0d3      	beq.n	8000a2c <__cmpdf2+0x1c>
 8000a84:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop

08000a8c <__aeabi_cdrcmple>:
 8000a8c:	4684      	mov	ip, r0
 8000a8e:	4610      	mov	r0, r2
 8000a90:	4662      	mov	r2, ip
 8000a92:	468c      	mov	ip, r1
 8000a94:	4619      	mov	r1, r3
 8000a96:	4663      	mov	r3, ip
 8000a98:	e000      	b.n	8000a9c <__aeabi_cdcmpeq>
 8000a9a:	bf00      	nop

08000a9c <__aeabi_cdcmpeq>:
 8000a9c:	b501      	push	{r0, lr}
 8000a9e:	f7ff ffb7 	bl	8000a10 <__cmpdf2>
 8000aa2:	2800      	cmp	r0, #0
 8000aa4:	bf48      	it	mi
 8000aa6:	f110 0f00 	cmnmi.w	r0, #0
 8000aaa:	bd01      	pop	{r0, pc}

08000aac <__aeabi_dcmpeq>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff fff4 	bl	8000a9c <__aeabi_cdcmpeq>
 8000ab4:	bf0c      	ite	eq
 8000ab6:	2001      	moveq	r0, #1
 8000ab8:	2000      	movne	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmplt>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffea 	bl	8000a9c <__aeabi_cdcmpeq>
 8000ac8:	bf34      	ite	cc
 8000aca:	2001      	movcc	r0, #1
 8000acc:	2000      	movcs	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmple>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffe0 	bl	8000a9c <__aeabi_cdcmpeq>
 8000adc:	bf94      	ite	ls
 8000ade:	2001      	movls	r0, #1
 8000ae0:	2000      	movhi	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmpge>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffce 	bl	8000a8c <__aeabi_cdrcmple>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpgt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffc4 	bl	8000a8c <__aeabi_cdrcmple>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmpun>:
 8000b10:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b18:	d102      	bne.n	8000b20 <__aeabi_dcmpun+0x10>
 8000b1a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b1e:	d10a      	bne.n	8000b36 <__aeabi_dcmpun+0x26>
 8000b20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b28:	d102      	bne.n	8000b30 <__aeabi_dcmpun+0x20>
 8000b2a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b2e:	d102      	bne.n	8000b36 <__aeabi_dcmpun+0x26>
 8000b30:	f04f 0000 	mov.w	r0, #0
 8000b34:	4770      	bx	lr
 8000b36:	f04f 0001 	mov.w	r0, #1
 8000b3a:	4770      	bx	lr

08000b3c <__aeabi_d2iz>:
 8000b3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b44:	d215      	bcs.n	8000b72 <__aeabi_d2iz+0x36>
 8000b46:	d511      	bpl.n	8000b6c <__aeabi_d2iz+0x30>
 8000b48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b50:	d912      	bls.n	8000b78 <__aeabi_d2iz+0x3c>
 8000b52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b5e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b62:	fa23 f002 	lsr.w	r0, r3, r2
 8000b66:	bf18      	it	ne
 8000b68:	4240      	negne	r0, r0
 8000b6a:	4770      	bx	lr
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b76:	d105      	bne.n	8000b84 <__aeabi_d2iz+0x48>
 8000b78:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b7c:	bf08      	it	eq
 8000b7e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b82:	4770      	bx	lr
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <__aeabi_d2uiz>:
 8000b8c:	004a      	lsls	r2, r1, #1
 8000b8e:	d211      	bcs.n	8000bb4 <__aeabi_d2uiz+0x28>
 8000b90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b94:	d211      	bcs.n	8000bba <__aeabi_d2uiz+0x2e>
 8000b96:	d50d      	bpl.n	8000bb4 <__aeabi_d2uiz+0x28>
 8000b98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba0:	d40e      	bmi.n	8000bc0 <__aeabi_d2uiz+0x34>
 8000ba2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000baa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bbe:	d102      	bne.n	8000bc6 <__aeabi_d2uiz+0x3a>
 8000bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc4:	4770      	bx	lr
 8000bc6:	f04f 0000 	mov.w	r0, #0
 8000bca:	4770      	bx	lr

08000bcc <__aeabi_d2f>:
 8000bcc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bd0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd4:	bf24      	itt	cs
 8000bd6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bda:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bde:	d90d      	bls.n	8000bfc <__aeabi_d2f+0x30>
 8000be0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bf0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf4:	bf08      	it	eq
 8000bf6:	f020 0001 	biceq.w	r0, r0, #1
 8000bfa:	4770      	bx	lr
 8000bfc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c00:	d121      	bne.n	8000c46 <__aeabi_d2f+0x7a>
 8000c02:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c06:	bfbc      	itt	lt
 8000c08:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c0c:	4770      	bxlt	lr
 8000c0e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c12:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c16:	f1c2 0218 	rsb	r2, r2, #24
 8000c1a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c22:	fa20 f002 	lsr.w	r0, r0, r2
 8000c26:	bf18      	it	ne
 8000c28:	f040 0001 	orrne.w	r0, r0, #1
 8000c2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c34:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c38:	ea40 000c 	orr.w	r0, r0, ip
 8000c3c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c44:	e7cc      	b.n	8000be0 <__aeabi_d2f+0x14>
 8000c46:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c4a:	d107      	bne.n	8000c5c <__aeabi_d2f+0x90>
 8000c4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c50:	bf1e      	ittt	ne
 8000c52:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c56:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c5a:	4770      	bxne	lr
 8000c5c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c60:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop

08000c6c <__aeabi_uldivmod>:
 8000c6c:	b953      	cbnz	r3, 8000c84 <__aeabi_uldivmod+0x18>
 8000c6e:	b94a      	cbnz	r2, 8000c84 <__aeabi_uldivmod+0x18>
 8000c70:	2900      	cmp	r1, #0
 8000c72:	bf08      	it	eq
 8000c74:	2800      	cmpeq	r0, #0
 8000c76:	bf1c      	itt	ne
 8000c78:	f04f 31ff 	movne.w	r1, #4294967295
 8000c7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c80:	f000 b96e 	b.w	8000f60 <__aeabi_idiv0>
 8000c84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c8c:	f000 f806 	bl	8000c9c <__udivmoddi4>
 8000c90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c98:	b004      	add	sp, #16
 8000c9a:	4770      	bx	lr

08000c9c <__udivmoddi4>:
 8000c9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ca0:	9d08      	ldr	r5, [sp, #32]
 8000ca2:	4604      	mov	r4, r0
 8000ca4:	468c      	mov	ip, r1
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	f040 8083 	bne.w	8000db2 <__udivmoddi4+0x116>
 8000cac:	428a      	cmp	r2, r1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	d947      	bls.n	8000d42 <__udivmoddi4+0xa6>
 8000cb2:	fab2 f282 	clz	r2, r2
 8000cb6:	b142      	cbz	r2, 8000cca <__udivmoddi4+0x2e>
 8000cb8:	f1c2 0020 	rsb	r0, r2, #32
 8000cbc:	fa24 f000 	lsr.w	r0, r4, r0
 8000cc0:	4091      	lsls	r1, r2
 8000cc2:	4097      	lsls	r7, r2
 8000cc4:	ea40 0c01 	orr.w	ip, r0, r1
 8000cc8:	4094      	lsls	r4, r2
 8000cca:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cce:	0c23      	lsrs	r3, r4, #16
 8000cd0:	fbbc f6f8 	udiv	r6, ip, r8
 8000cd4:	fa1f fe87 	uxth.w	lr, r7
 8000cd8:	fb08 c116 	mls	r1, r8, r6, ip
 8000cdc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ce0:	fb06 f10e 	mul.w	r1, r6, lr
 8000ce4:	4299      	cmp	r1, r3
 8000ce6:	d909      	bls.n	8000cfc <__udivmoddi4+0x60>
 8000ce8:	18fb      	adds	r3, r7, r3
 8000cea:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cee:	f080 8119 	bcs.w	8000f24 <__udivmoddi4+0x288>
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	f240 8116 	bls.w	8000f24 <__udivmoddi4+0x288>
 8000cf8:	3e02      	subs	r6, #2
 8000cfa:	443b      	add	r3, r7
 8000cfc:	1a5b      	subs	r3, r3, r1
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d04:	fb08 3310 	mls	r3, r8, r0, r3
 8000d08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x8c>
 8000d14:	193c      	adds	r4, r7, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	f080 8105 	bcs.w	8000f28 <__udivmoddi4+0x28c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f240 8102 	bls.w	8000f28 <__udivmoddi4+0x28c>
 8000d24:	3802      	subs	r0, #2
 8000d26:	443c      	add	r4, r7
 8000d28:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d2c:	eba4 040e 	sub.w	r4, r4, lr
 8000d30:	2600      	movs	r6, #0
 8000d32:	b11d      	cbz	r5, 8000d3c <__udivmoddi4+0xa0>
 8000d34:	40d4      	lsrs	r4, r2
 8000d36:	2300      	movs	r3, #0
 8000d38:	e9c5 4300 	strd	r4, r3, [r5]
 8000d3c:	4631      	mov	r1, r6
 8000d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d42:	b902      	cbnz	r2, 8000d46 <__udivmoddi4+0xaa>
 8000d44:	deff      	udf	#255	; 0xff
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	2a00      	cmp	r2, #0
 8000d4c:	d150      	bne.n	8000df0 <__udivmoddi4+0x154>
 8000d4e:	1bcb      	subs	r3, r1, r7
 8000d50:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d54:	fa1f f887 	uxth.w	r8, r7
 8000d58:	2601      	movs	r6, #1
 8000d5a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d5e:	0c21      	lsrs	r1, r4, #16
 8000d60:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d68:	fb08 f30c 	mul.w	r3, r8, ip
 8000d6c:	428b      	cmp	r3, r1
 8000d6e:	d907      	bls.n	8000d80 <__udivmoddi4+0xe4>
 8000d70:	1879      	adds	r1, r7, r1
 8000d72:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d76:	d202      	bcs.n	8000d7e <__udivmoddi4+0xe2>
 8000d78:	428b      	cmp	r3, r1
 8000d7a:	f200 80e9 	bhi.w	8000f50 <__udivmoddi4+0x2b4>
 8000d7e:	4684      	mov	ip, r0
 8000d80:	1ac9      	subs	r1, r1, r3
 8000d82:	b2a3      	uxth	r3, r4
 8000d84:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d88:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d8c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d90:	fb08 f800 	mul.w	r8, r8, r0
 8000d94:	45a0      	cmp	r8, r4
 8000d96:	d907      	bls.n	8000da8 <__udivmoddi4+0x10c>
 8000d98:	193c      	adds	r4, r7, r4
 8000d9a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d9e:	d202      	bcs.n	8000da6 <__udivmoddi4+0x10a>
 8000da0:	45a0      	cmp	r8, r4
 8000da2:	f200 80d9 	bhi.w	8000f58 <__udivmoddi4+0x2bc>
 8000da6:	4618      	mov	r0, r3
 8000da8:	eba4 0408 	sub.w	r4, r4, r8
 8000dac:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000db0:	e7bf      	b.n	8000d32 <__udivmoddi4+0x96>
 8000db2:	428b      	cmp	r3, r1
 8000db4:	d909      	bls.n	8000dca <__udivmoddi4+0x12e>
 8000db6:	2d00      	cmp	r5, #0
 8000db8:	f000 80b1 	beq.w	8000f1e <__udivmoddi4+0x282>
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000dc2:	4630      	mov	r0, r6
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	fab3 f683 	clz	r6, r3
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	d14a      	bne.n	8000e68 <__udivmoddi4+0x1cc>
 8000dd2:	428b      	cmp	r3, r1
 8000dd4:	d302      	bcc.n	8000ddc <__udivmoddi4+0x140>
 8000dd6:	4282      	cmp	r2, r0
 8000dd8:	f200 80b8 	bhi.w	8000f4c <__udivmoddi4+0x2b0>
 8000ddc:	1a84      	subs	r4, r0, r2
 8000dde:	eb61 0103 	sbc.w	r1, r1, r3
 8000de2:	2001      	movs	r0, #1
 8000de4:	468c      	mov	ip, r1
 8000de6:	2d00      	cmp	r5, #0
 8000de8:	d0a8      	beq.n	8000d3c <__udivmoddi4+0xa0>
 8000dea:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dee:	e7a5      	b.n	8000d3c <__udivmoddi4+0xa0>
 8000df0:	f1c2 0320 	rsb	r3, r2, #32
 8000df4:	fa20 f603 	lsr.w	r6, r0, r3
 8000df8:	4097      	lsls	r7, r2
 8000dfa:	fa01 f002 	lsl.w	r0, r1, r2
 8000dfe:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e02:	40d9      	lsrs	r1, r3
 8000e04:	4330      	orrs	r0, r6
 8000e06:	0c03      	lsrs	r3, r0, #16
 8000e08:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e0c:	fa1f f887 	uxth.w	r8, r7
 8000e10:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e14:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e18:	fb06 f108 	mul.w	r1, r6, r8
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	fa04 f402 	lsl.w	r4, r4, r2
 8000e22:	d909      	bls.n	8000e38 <__udivmoddi4+0x19c>
 8000e24:	18fb      	adds	r3, r7, r3
 8000e26:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e2a:	f080 808d 	bcs.w	8000f48 <__udivmoddi4+0x2ac>
 8000e2e:	4299      	cmp	r1, r3
 8000e30:	f240 808a 	bls.w	8000f48 <__udivmoddi4+0x2ac>
 8000e34:	3e02      	subs	r6, #2
 8000e36:	443b      	add	r3, r7
 8000e38:	1a5b      	subs	r3, r3, r1
 8000e3a:	b281      	uxth	r1, r0
 8000e3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb00 f308 	mul.w	r3, r0, r8
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d907      	bls.n	8000e60 <__udivmoddi4+0x1c4>
 8000e50:	1879      	adds	r1, r7, r1
 8000e52:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e56:	d273      	bcs.n	8000f40 <__udivmoddi4+0x2a4>
 8000e58:	428b      	cmp	r3, r1
 8000e5a:	d971      	bls.n	8000f40 <__udivmoddi4+0x2a4>
 8000e5c:	3802      	subs	r0, #2
 8000e5e:	4439      	add	r1, r7
 8000e60:	1acb      	subs	r3, r1, r3
 8000e62:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e66:	e778      	b.n	8000d5a <__udivmoddi4+0xbe>
 8000e68:	f1c6 0c20 	rsb	ip, r6, #32
 8000e6c:	fa03 f406 	lsl.w	r4, r3, r6
 8000e70:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e74:	431c      	orrs	r4, r3
 8000e76:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e7e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e82:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e86:	431f      	orrs	r7, r3
 8000e88:	0c3b      	lsrs	r3, r7, #16
 8000e8a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e8e:	fa1f f884 	uxth.w	r8, r4
 8000e92:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e96:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e9a:	fb09 fa08 	mul.w	sl, r9, r8
 8000e9e:	458a      	cmp	sl, r1
 8000ea0:	fa02 f206 	lsl.w	r2, r2, r6
 8000ea4:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x220>
 8000eaa:	1861      	adds	r1, r4, r1
 8000eac:	f109 30ff 	add.w	r0, r9, #4294967295
 8000eb0:	d248      	bcs.n	8000f44 <__udivmoddi4+0x2a8>
 8000eb2:	458a      	cmp	sl, r1
 8000eb4:	d946      	bls.n	8000f44 <__udivmoddi4+0x2a8>
 8000eb6:	f1a9 0902 	sub.w	r9, r9, #2
 8000eba:	4421      	add	r1, r4
 8000ebc:	eba1 010a 	sub.w	r1, r1, sl
 8000ec0:	b2bf      	uxth	r7, r7
 8000ec2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ec6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000eca:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000ece:	fb00 f808 	mul.w	r8, r0, r8
 8000ed2:	45b8      	cmp	r8, r7
 8000ed4:	d907      	bls.n	8000ee6 <__udivmoddi4+0x24a>
 8000ed6:	19e7      	adds	r7, r4, r7
 8000ed8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000edc:	d22e      	bcs.n	8000f3c <__udivmoddi4+0x2a0>
 8000ede:	45b8      	cmp	r8, r7
 8000ee0:	d92c      	bls.n	8000f3c <__udivmoddi4+0x2a0>
 8000ee2:	3802      	subs	r0, #2
 8000ee4:	4427      	add	r7, r4
 8000ee6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eea:	eba7 0708 	sub.w	r7, r7, r8
 8000eee:	fba0 8902 	umull	r8, r9, r0, r2
 8000ef2:	454f      	cmp	r7, r9
 8000ef4:	46c6      	mov	lr, r8
 8000ef6:	4649      	mov	r1, r9
 8000ef8:	d31a      	bcc.n	8000f30 <__udivmoddi4+0x294>
 8000efa:	d017      	beq.n	8000f2c <__udivmoddi4+0x290>
 8000efc:	b15d      	cbz	r5, 8000f16 <__udivmoddi4+0x27a>
 8000efe:	ebb3 020e 	subs.w	r2, r3, lr
 8000f02:	eb67 0701 	sbc.w	r7, r7, r1
 8000f06:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f0a:	40f2      	lsrs	r2, r6
 8000f0c:	ea4c 0202 	orr.w	r2, ip, r2
 8000f10:	40f7      	lsrs	r7, r6
 8000f12:	e9c5 2700 	strd	r2, r7, [r5]
 8000f16:	2600      	movs	r6, #0
 8000f18:	4631      	mov	r1, r6
 8000f1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f1e:	462e      	mov	r6, r5
 8000f20:	4628      	mov	r0, r5
 8000f22:	e70b      	b.n	8000d3c <__udivmoddi4+0xa0>
 8000f24:	4606      	mov	r6, r0
 8000f26:	e6e9      	b.n	8000cfc <__udivmoddi4+0x60>
 8000f28:	4618      	mov	r0, r3
 8000f2a:	e6fd      	b.n	8000d28 <__udivmoddi4+0x8c>
 8000f2c:	4543      	cmp	r3, r8
 8000f2e:	d2e5      	bcs.n	8000efc <__udivmoddi4+0x260>
 8000f30:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f34:	eb69 0104 	sbc.w	r1, r9, r4
 8000f38:	3801      	subs	r0, #1
 8000f3a:	e7df      	b.n	8000efc <__udivmoddi4+0x260>
 8000f3c:	4608      	mov	r0, r1
 8000f3e:	e7d2      	b.n	8000ee6 <__udivmoddi4+0x24a>
 8000f40:	4660      	mov	r0, ip
 8000f42:	e78d      	b.n	8000e60 <__udivmoddi4+0x1c4>
 8000f44:	4681      	mov	r9, r0
 8000f46:	e7b9      	b.n	8000ebc <__udivmoddi4+0x220>
 8000f48:	4666      	mov	r6, ip
 8000f4a:	e775      	b.n	8000e38 <__udivmoddi4+0x19c>
 8000f4c:	4630      	mov	r0, r6
 8000f4e:	e74a      	b.n	8000de6 <__udivmoddi4+0x14a>
 8000f50:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f54:	4439      	add	r1, r7
 8000f56:	e713      	b.n	8000d80 <__udivmoddi4+0xe4>
 8000f58:	3802      	subs	r0, #2
 8000f5a:	443c      	add	r4, r7
 8000f5c:	e724      	b.n	8000da8 <__udivmoddi4+0x10c>
 8000f5e:	bf00      	nop

08000f60 <__aeabi_idiv0>:
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop

08000f64 <unpack_left_shift_u16>:

static inline uint16_t unpack_left_shift_u16(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	71fb      	strb	r3, [r7, #7]
 8000f6e:	460b      	mov	r3, r1
 8000f70:	71bb      	strb	r3, [r7, #6]
 8000f72:	4613      	mov	r3, r2
 8000f74:	717b      	strb	r3, [r7, #5]
    return (uint16_t)((uint16_t)(value & mask) << shift);
 8000f76:	79fa      	ldrb	r2, [r7, #7]
 8000f78:	797b      	ldrb	r3, [r7, #5]
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	461a      	mov	r2, r3
 8000f80:	79bb      	ldrb	r3, [r7, #6]
 8000f82:	fa02 f303 	lsl.w	r3, r2, r3
 8000f86:	b29b      	uxth	r3, r3
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	370c      	adds	r7, #12
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr

08000f94 <unpack_right_shift_u8>:

static inline uint8_t unpack_right_shift_u8(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	71fb      	strb	r3, [r7, #7]
 8000f9e:	460b      	mov	r3, r1
 8000fa0:	71bb      	strb	r3, [r7, #6]
 8000fa2:	4613      	mov	r3, r2
 8000fa4:	717b      	strb	r3, [r7, #5]
    return (uint8_t)((uint8_t)(value & mask) >> shift);
 8000fa6:	79fa      	ldrb	r2, [r7, #7]
 8000fa8:	797b      	ldrb	r3, [r7, #5]
 8000faa:	4013      	ands	r3, r2
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	461a      	mov	r2, r3
 8000fb0:	79bb      	ldrb	r3, [r7, #6]
 8000fb2:	fa42 f303 	asr.w	r3, r2, r3
 8000fb6:	b2db      	uxtb	r3, r3
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <unpack_right_shift_u16>:

static inline uint16_t unpack_right_shift_u16(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	71fb      	strb	r3, [r7, #7]
 8000fce:	460b      	mov	r3, r1
 8000fd0:	71bb      	strb	r3, [r7, #6]
 8000fd2:	4613      	mov	r3, r2
 8000fd4:	717b      	strb	r3, [r7, #5]
    return (uint16_t)((uint16_t)(value & mask) >> shift);
 8000fd6:	79fa      	ldrb	r2, [r7, #7]
 8000fd8:	797b      	ldrb	r3, [r7, #5]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	461a      	mov	r2, r3
 8000fe0:	79bb      	ldrb	r3, [r7, #6]
 8000fe2:	fa42 f303 	asr.w	r3, r2, r3
 8000fe6:	b29b      	uxth	r3, r3
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	370c      	adds	r7, #12
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr

08000ff4 <can1_dbu_status_1_unpack>:

int can1_dbu_status_1_unpack(
    struct can1_dbu_status_1_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b086      	sub	sp, #24
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	60f8      	str	r0, [r7, #12]
 8000ffc:	60b9      	str	r1, [r7, #8]
 8000ffe:	607a      	str	r2, [r7, #4]
    uint16_t dbu_temperature;

    if (size < 8u) {
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2b07      	cmp	r3, #7
 8001004:	d802      	bhi.n	800100c <can1_dbu_status_1_unpack+0x18>
        return (-EINVAL);
 8001006:	f06f 0315 	mvn.w	r3, #21
 800100a:	e03b      	b.n	8001084 <can1_dbu_status_1_unpack+0x90>
    }

    dst_p->activate_ts_button = unpack_right_shift_u8(src_p[0], 0u, 0x01u);
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	2201      	movs	r2, #1
 8001012:	2100      	movs	r1, #0
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff ffbd 	bl	8000f94 <unpack_right_shift_u8>
 800101a:	4603      	mov	r3, r0
 800101c:	461a      	mov	r2, r3
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	701a      	strb	r2, [r3, #0]
    dst_p->ready_to_drive_button = unpack_right_shift_u8(src_p[0], 1u, 0x02u);
 8001022:	68bb      	ldr	r3, [r7, #8]
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	2202      	movs	r2, #2
 8001028:	2101      	movs	r1, #1
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff ffb2 	bl	8000f94 <unpack_right_shift_u8>
 8001030:	4603      	mov	r3, r0
 8001032:	461a      	mov	r2, r3
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	705a      	strb	r2, [r3, #1]
    dbu_temperature = unpack_right_shift_u16(src_p[0], 4u, 0xf0u);
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	22f0      	movs	r2, #240	; 0xf0
 800103e:	2104      	movs	r1, #4
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff ffbf 	bl	8000fc4 <unpack_right_shift_u16>
 8001046:	4603      	mov	r3, r0
 8001048:	82fb      	strh	r3, [r7, #22]
    dbu_temperature |= unpack_left_shift_u16(src_p[1], 4u, 0xffu);
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	3301      	adds	r3, #1
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	22ff      	movs	r2, #255	; 0xff
 8001052:	2104      	movs	r1, #4
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff ff85 	bl	8000f64 <unpack_left_shift_u16>
 800105a:	4603      	mov	r3, r0
 800105c:	461a      	mov	r2, r3
 800105e:	8afb      	ldrh	r3, [r7, #22]
 8001060:	4313      	orrs	r3, r2
 8001062:	82fb      	strh	r3, [r7, #22]

    if ((dbu_temperature & (1u << 11)) != 0u) {
 8001064:	8afb      	ldrh	r3, [r7, #22]
 8001066:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800106a:	2b00      	cmp	r3, #0
 800106c:	d005      	beq.n	800107a <can1_dbu_status_1_unpack+0x86>
        dbu_temperature |= 0xf000u;
 800106e:	8afb      	ldrh	r3, [r7, #22]
 8001070:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8001074:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8001078:	82fb      	strh	r3, [r7, #22]
    }

    dst_p->dbu_temperature = (int16_t)dbu_temperature;
 800107a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	805a      	strh	r2, [r3, #2]

    return (0);
 8001082:	2300      	movs	r3, #0
}
 8001084:	4618      	mov	r0, r3
 8001086:	3718      	adds	r7, #24
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}

0800108c <unpack_left_shift_u16>:

static inline uint16_t unpack_left_shift_u16(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	71fb      	strb	r3, [r7, #7]
 8001096:	460b      	mov	r3, r1
 8001098:	71bb      	strb	r3, [r7, #6]
 800109a:	4613      	mov	r3, r2
 800109c:	717b      	strb	r3, [r7, #5]
    return (uint16_t)((uint16_t)(value & mask) << shift);
 800109e:	79fa      	ldrb	r2, [r7, #7]
 80010a0:	797b      	ldrb	r3, [r7, #5]
 80010a2:	4013      	ands	r3, r2
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	461a      	mov	r2, r3
 80010a8:	79bb      	ldrb	r3, [r7, #6]
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	b29b      	uxth	r3, r3
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr

080010bc <unpack_left_shift_u64>:

static inline uint64_t unpack_left_shift_u64(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 80010bc:	b4f0      	push	{r4, r5, r6, r7}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	71fb      	strb	r3, [r7, #7]
 80010c6:	460b      	mov	r3, r1
 80010c8:	71bb      	strb	r3, [r7, #6]
 80010ca:	4613      	mov	r3, r2
 80010cc:	717b      	strb	r3, [r7, #5]
    return (uint64_t)((uint64_t)(value & mask) << shift);
 80010ce:	79fa      	ldrb	r2, [r7, #7]
 80010d0:	797b      	ldrb	r3, [r7, #5]
 80010d2:	4013      	ands	r3, r2
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	b2da      	uxtb	r2, r3
 80010d8:	f04f 0300 	mov.w	r3, #0
 80010dc:	79b9      	ldrb	r1, [r7, #6]
 80010de:	f1a1 0620 	sub.w	r6, r1, #32
 80010e2:	f1c1 0020 	rsb	r0, r1, #32
 80010e6:	fa03 f501 	lsl.w	r5, r3, r1
 80010ea:	fa02 f606 	lsl.w	r6, r2, r6
 80010ee:	4335      	orrs	r5, r6
 80010f0:	fa22 f000 	lsr.w	r0, r2, r0
 80010f4:	4305      	orrs	r5, r0
 80010f6:	fa02 f401 	lsl.w	r4, r2, r1
 80010fa:	4622      	mov	r2, r4
 80010fc:	462b      	mov	r3, r5
}
 80010fe:	4610      	mov	r0, r2
 8001100:	4619      	mov	r1, r3
 8001102:	3708      	adds	r7, #8
 8001104:	46bd      	mov	sp, r7
 8001106:	bcf0      	pop	{r4, r5, r6, r7}
 8001108:	4770      	bx	lr

0800110a <unpack_right_shift_u8>:

static inline uint8_t unpack_right_shift_u8(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 800110a:	b480      	push	{r7}
 800110c:	b083      	sub	sp, #12
 800110e:	af00      	add	r7, sp, #0
 8001110:	4603      	mov	r3, r0
 8001112:	71fb      	strb	r3, [r7, #7]
 8001114:	460b      	mov	r3, r1
 8001116:	71bb      	strb	r3, [r7, #6]
 8001118:	4613      	mov	r3, r2
 800111a:	717b      	strb	r3, [r7, #5]
    return (uint8_t)((uint8_t)(value & mask) >> shift);
 800111c:	79fa      	ldrb	r2, [r7, #7]
 800111e:	797b      	ldrb	r3, [r7, #5]
 8001120:	4013      	ands	r3, r2
 8001122:	b2db      	uxtb	r3, r3
 8001124:	461a      	mov	r2, r3
 8001126:	79bb      	ldrb	r3, [r7, #6]
 8001128:	fa42 f303 	asr.w	r3, r2, r3
 800112c:	b2db      	uxtb	r3, r3
}
 800112e:	4618      	mov	r0, r3
 8001130:	370c      	adds	r7, #12
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr

0800113a <unpack_right_shift_u16>:

static inline uint16_t unpack_right_shift_u16(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 800113a:	b480      	push	{r7}
 800113c:	b083      	sub	sp, #12
 800113e:	af00      	add	r7, sp, #0
 8001140:	4603      	mov	r3, r0
 8001142:	71fb      	strb	r3, [r7, #7]
 8001144:	460b      	mov	r3, r1
 8001146:	71bb      	strb	r3, [r7, #6]
 8001148:	4613      	mov	r3, r2
 800114a:	717b      	strb	r3, [r7, #5]
    return (uint16_t)((uint16_t)(value & mask) >> shift);
 800114c:	79fa      	ldrb	r2, [r7, #7]
 800114e:	797b      	ldrb	r3, [r7, #5]
 8001150:	4013      	ands	r3, r2
 8001152:	b2db      	uxtb	r3, r3
 8001154:	461a      	mov	r2, r3
 8001156:	79bb      	ldrb	r3, [r7, #6]
 8001158:	fa42 f303 	asr.w	r3, r2, r3
 800115c:	b29b      	uxth	r3, r3
}
 800115e:	4618      	mov	r0, r3
 8001160:	370c      	adds	r7, #12
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr

0800116a <unpack_right_shift_u64>:

static inline uint64_t unpack_right_shift_u64(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 800116a:	b4f0      	push	{r4, r5, r6, r7}
 800116c:	b082      	sub	sp, #8
 800116e:	af00      	add	r7, sp, #0
 8001170:	4603      	mov	r3, r0
 8001172:	71fb      	strb	r3, [r7, #7]
 8001174:	460b      	mov	r3, r1
 8001176:	71bb      	strb	r3, [r7, #6]
 8001178:	4613      	mov	r3, r2
 800117a:	717b      	strb	r3, [r7, #5]
    return (uint64_t)((uint64_t)(value & mask) >> shift);
 800117c:	79fa      	ldrb	r2, [r7, #7]
 800117e:	797b      	ldrb	r3, [r7, #5]
 8001180:	4013      	ands	r3, r2
 8001182:	b2db      	uxtb	r3, r3
 8001184:	b2da      	uxtb	r2, r3
 8001186:	f04f 0300 	mov.w	r3, #0
 800118a:	79b9      	ldrb	r1, [r7, #6]
 800118c:	f1c1 0620 	rsb	r6, r1, #32
 8001190:	f1a1 0020 	sub.w	r0, r1, #32
 8001194:	fa22 f401 	lsr.w	r4, r2, r1
 8001198:	fa03 f606 	lsl.w	r6, r3, r6
 800119c:	4334      	orrs	r4, r6
 800119e:	fa23 f000 	lsr.w	r0, r3, r0
 80011a2:	4304      	orrs	r4, r0
 80011a4:	fa23 f501 	lsr.w	r5, r3, r1
 80011a8:	4622      	mov	r2, r4
 80011aa:	462b      	mov	r3, r5
}
 80011ac:	4610      	mov	r0, r2
 80011ae:	4619      	mov	r1, r3
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bcf0      	pop	{r4, r5, r6, r7}
 80011b6:	4770      	bx	lr

080011b8 <can2_amk1_setpoints_1_unpack>:

int can2_amk1_setpoints_1_unpack(
    struct can2_amk1_setpoints_1_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b086      	sub	sp, #24
 80011bc:	af00      	add	r7, sp, #0
 80011be:	60f8      	str	r0, [r7, #12]
 80011c0:	60b9      	str	r1, [r7, #8]
 80011c2:	607a      	str	r2, [r7, #4]
    uint16_t amk1_target_velocity;
    uint16_t amk1_torque_limit_negativ;
    uint16_t amk1_torque_limit_positiv;

    if (size < 8u) {
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2b07      	cmp	r3, #7
 80011c8:	d802      	bhi.n	80011d0 <can2_amk1_setpoints_1_unpack+0x18>
        return (-EINVAL);
 80011ca:	f06f 0315 	mvn.w	r3, #21
 80011ce:	e081      	b.n	80012d4 <can2_amk1_setpoints_1_unpack+0x11c>
    }

    dst_p->amk1_control_inverter_on = unpack_right_shift_u8(src_p[1], 0u, 0x01u);
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	3301      	adds	r3, #1
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	2201      	movs	r2, #1
 80011d8:	2100      	movs	r1, #0
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff ff95 	bl	800110a <unpack_right_shift_u8>
 80011e0:	4603      	mov	r3, r0
 80011e2:	461a      	mov	r2, r3
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	701a      	strb	r2, [r3, #0]
    dst_p->amk1_control_dc_on = unpack_right_shift_u8(src_p[1], 1u, 0x02u);
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	3301      	adds	r3, #1
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	2202      	movs	r2, #2
 80011f0:	2101      	movs	r1, #1
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7ff ff89 	bl	800110a <unpack_right_shift_u8>
 80011f8:	4603      	mov	r3, r0
 80011fa:	461a      	mov	r2, r3
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	705a      	strb	r2, [r3, #1]
    dst_p->amk1_control_enable = unpack_right_shift_u8(src_p[1], 2u, 0x04u);
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	3301      	adds	r3, #1
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	2204      	movs	r2, #4
 8001208:	2102      	movs	r1, #2
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff ff7d 	bl	800110a <unpack_right_shift_u8>
 8001210:	4603      	mov	r3, r0
 8001212:	461a      	mov	r2, r3
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	709a      	strb	r2, [r3, #2]
    dst_p->amk1_control_error_reset = unpack_right_shift_u8(src_p[1], 3u, 0x08u);
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	3301      	adds	r3, #1
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	2208      	movs	r2, #8
 8001220:	2103      	movs	r1, #3
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff ff71 	bl	800110a <unpack_right_shift_u8>
 8001228:	4603      	mov	r3, r0
 800122a:	461a      	mov	r2, r3
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	70da      	strb	r2, [r3, #3]
    amk1_target_velocity = unpack_right_shift_u16(src_p[2], 0u, 0xffu);
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	3302      	adds	r3, #2
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	22ff      	movs	r2, #255	; 0xff
 8001238:	2100      	movs	r1, #0
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff ff7d 	bl	800113a <unpack_right_shift_u16>
 8001240:	4603      	mov	r3, r0
 8001242:	82fb      	strh	r3, [r7, #22]
    amk1_target_velocity |= unpack_left_shift_u16(src_p[3], 8u, 0xffu);
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	3303      	adds	r3, #3
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	22ff      	movs	r2, #255	; 0xff
 800124c:	2108      	movs	r1, #8
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff ff1c 	bl	800108c <unpack_left_shift_u16>
 8001254:	4603      	mov	r3, r0
 8001256:	461a      	mov	r2, r3
 8001258:	8afb      	ldrh	r3, [r7, #22]
 800125a:	4313      	orrs	r3, r2
 800125c:	82fb      	strh	r3, [r7, #22]
    dst_p->amk1_target_velocity = (int16_t)amk1_target_velocity;
 800125e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	809a      	strh	r2, [r3, #4]
    amk1_torque_limit_positiv = unpack_right_shift_u16(src_p[4], 0u, 0xffu);
 8001266:	68bb      	ldr	r3, [r7, #8]
 8001268:	3304      	adds	r3, #4
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	22ff      	movs	r2, #255	; 0xff
 800126e:	2100      	movs	r1, #0
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff ff62 	bl	800113a <unpack_right_shift_u16>
 8001276:	4603      	mov	r3, r0
 8001278:	82bb      	strh	r3, [r7, #20]
    amk1_torque_limit_positiv |= unpack_left_shift_u16(src_p[5], 8u, 0xffu);
 800127a:	68bb      	ldr	r3, [r7, #8]
 800127c:	3305      	adds	r3, #5
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	22ff      	movs	r2, #255	; 0xff
 8001282:	2108      	movs	r1, #8
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff ff01 	bl	800108c <unpack_left_shift_u16>
 800128a:	4603      	mov	r3, r0
 800128c:	461a      	mov	r2, r3
 800128e:	8abb      	ldrh	r3, [r7, #20]
 8001290:	4313      	orrs	r3, r2
 8001292:	82bb      	strh	r3, [r7, #20]
    dst_p->amk1_torque_limit_positiv = (int16_t)amk1_torque_limit_positiv;
 8001294:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	80da      	strh	r2, [r3, #6]
    amk1_torque_limit_negativ = unpack_right_shift_u16(src_p[6], 0u, 0xffu);
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	3306      	adds	r3, #6
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	22ff      	movs	r2, #255	; 0xff
 80012a4:	2100      	movs	r1, #0
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff ff47 	bl	800113a <unpack_right_shift_u16>
 80012ac:	4603      	mov	r3, r0
 80012ae:	827b      	strh	r3, [r7, #18]
    amk1_torque_limit_negativ |= unpack_left_shift_u16(src_p[7], 8u, 0xffu);
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	3307      	adds	r3, #7
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	22ff      	movs	r2, #255	; 0xff
 80012b8:	2108      	movs	r1, #8
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff fee6 	bl	800108c <unpack_left_shift_u16>
 80012c0:	4603      	mov	r3, r0
 80012c2:	461a      	mov	r2, r3
 80012c4:	8a7b      	ldrh	r3, [r7, #18]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	827b      	strh	r3, [r7, #18]
    dst_p->amk1_torque_limit_negativ = (int16_t)amk1_torque_limit_negativ;
 80012ca:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	811a      	strh	r2, [r3, #8]

    return (0);
 80012d2:	2300      	movs	r3, #0
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3718      	adds	r7, #24
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}

080012dc <can2_ivt_msg_result_i_unpack>:

int can2_ivt_msg_result_i_unpack(
    struct can2_ivt_msg_result_i_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
 80012dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80012e0:	b08e      	sub	sp, #56	; 0x38
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	62f8      	str	r0, [r7, #44]	; 0x2c
 80012e6:	62b9      	str	r1, [r7, #40]	; 0x28
 80012e8:	627a      	str	r2, [r7, #36]	; 0x24
    uint64_t i_ts;

    if (size < 6u) {
 80012ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ec:	2b05      	cmp	r3, #5
 80012ee:	d802      	bhi.n	80012f6 <can2_ivt_msg_result_i_unpack+0x1a>
        return (-EINVAL);
 80012f0:	f06f 0315 	mvn.w	r3, #21
 80012f4:	e081      	b.n	80013fa <can2_ivt_msg_result_i_unpack+0x11e>
    }

    i_ts = unpack_left_shift_u64(src_p[0], 40u, 0xffu);
 80012f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	22ff      	movs	r2, #255	; 0xff
 80012fc:	2128      	movs	r1, #40	; 0x28
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff fedc 	bl	80010bc <unpack_left_shift_u64>
 8001304:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
    i_ts |= unpack_left_shift_u64(src_p[1], 32u, 0xffu);
 8001308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800130a:	3301      	adds	r3, #1
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	22ff      	movs	r2, #255	; 0xff
 8001310:	2120      	movs	r1, #32
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff fed2 	bl	80010bc <unpack_left_shift_u64>
 8001318:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800131c:	ea42 0400 	orr.w	r4, r2, r0
 8001320:	ea43 0501 	orr.w	r5, r3, r1
 8001324:	e9c7 450c 	strd	r4, r5, [r7, #48]	; 0x30
    i_ts |= unpack_left_shift_u64(src_p[2], 24u, 0xffu);
 8001328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800132a:	3302      	adds	r3, #2
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	22ff      	movs	r2, #255	; 0xff
 8001330:	2118      	movs	r1, #24
 8001332:	4618      	mov	r0, r3
 8001334:	f7ff fec2 	bl	80010bc <unpack_left_shift_u64>
 8001338:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800133c:	ea42 0800 	orr.w	r8, r2, r0
 8001340:	ea43 0901 	orr.w	r9, r3, r1
 8001344:	e9c7 890c 	strd	r8, r9, [r7, #48]	; 0x30
    i_ts |= unpack_left_shift_u64(src_p[3], 16u, 0xffu);
 8001348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800134a:	3303      	adds	r3, #3
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	22ff      	movs	r2, #255	; 0xff
 8001350:	2110      	movs	r1, #16
 8001352:	4618      	mov	r0, r3
 8001354:	f7ff feb2 	bl	80010bc <unpack_left_shift_u64>
 8001358:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800135c:	ea42 0400 	orr.w	r4, r2, r0
 8001360:	613c      	str	r4, [r7, #16]
 8001362:	430b      	orrs	r3, r1
 8001364:	617b      	str	r3, [r7, #20]
 8001366:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800136a:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    i_ts |= unpack_left_shift_u64(src_p[4], 8u, 0xffu);
 800136e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001370:	3304      	adds	r3, #4
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	22ff      	movs	r2, #255	; 0xff
 8001376:	2108      	movs	r1, #8
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff fe9f 	bl	80010bc <unpack_left_shift_u64>
 800137e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001382:	ea42 0400 	orr.w	r4, r2, r0
 8001386:	60bc      	str	r4, [r7, #8]
 8001388:	430b      	orrs	r3, r1
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001390:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    i_ts |= unpack_right_shift_u64(src_p[5], 0u, 0xffu);
 8001394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001396:	3305      	adds	r3, #5
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	22ff      	movs	r2, #255	; 0xff
 800139c:	2100      	movs	r1, #0
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff fee3 	bl	800116a <unpack_right_shift_u64>
 80013a4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80013a8:	ea42 0400 	orr.w	r4, r2, r0
 80013ac:	603c      	str	r4, [r7, #0]
 80013ae:	430b      	orrs	r3, r1
 80013b0:	607b      	str	r3, [r7, #4]
 80013b2:	e9d7 3400 	ldrd	r3, r4, [r7]
 80013b6:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    if ((i_ts & (1ull << 47)) != 0ull) {
 80013ba:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80013be:	f04f 0000 	mov.w	r0, #0
 80013c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013c6:	ea02 0400 	and.w	r4, r2, r0
 80013ca:	61bc      	str	r4, [r7, #24]
 80013cc:	400b      	ands	r3, r1
 80013ce:	61fb      	str	r3, [r7, #28]
 80013d0:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80013d4:	4323      	orrs	r3, r4
 80013d6:	d00a      	beq.n	80013ee <can2_ivt_msg_result_i_unpack+0x112>
        i_ts |= 0xffff000000000000ull;
 80013d8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80013dc:	f04f 0000 	mov.w	r0, #0
 80013e0:	4908      	ldr	r1, [pc, #32]	; (8001404 <can2_ivt_msg_result_i_unpack+0x128>)
 80013e2:	ea42 0a00 	orr.w	sl, r2, r0
 80013e6:	ea43 0b01 	orr.w	fp, r3, r1
 80013ea:	e9c7 ab0c 	strd	sl, fp, [r7, #48]	; 0x30
    }

    dst_p->i_ts = (int64_t)i_ts;
 80013ee:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80013f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80013f4:	e9c1 2300 	strd	r2, r3, [r1]

    return (0);
 80013f8:	2300      	movs	r3, #0
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3738      	adds	r7, #56	; 0x38
 80013fe:	46bd      	mov	sp, r7
 8001400:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001404:	ffff0000 	.word	0xffff0000

08001408 <can2_ivt_msg_result_u1_unpack>:

int can2_ivt_msg_result_u1_unpack(
    struct can2_ivt_msg_result_u1_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
 8001408:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800140c:	b08e      	sub	sp, #56	; 0x38
 800140e:	af00      	add	r7, sp, #0
 8001410:	62f8      	str	r0, [r7, #44]	; 0x2c
 8001412:	62b9      	str	r1, [r7, #40]	; 0x28
 8001414:	627a      	str	r2, [r7, #36]	; 0x24
    uint64_t u_cells;

    if (size < 6u) {
 8001416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001418:	2b05      	cmp	r3, #5
 800141a:	d802      	bhi.n	8001422 <can2_ivt_msg_result_u1_unpack+0x1a>
        return (-EINVAL);
 800141c:	f06f 0315 	mvn.w	r3, #21
 8001420:	e081      	b.n	8001526 <can2_ivt_msg_result_u1_unpack+0x11e>
    }

    u_cells = unpack_left_shift_u64(src_p[0], 40u, 0xffu);
 8001422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	22ff      	movs	r2, #255	; 0xff
 8001428:	2128      	movs	r1, #40	; 0x28
 800142a:	4618      	mov	r0, r3
 800142c:	f7ff fe46 	bl	80010bc <unpack_left_shift_u64>
 8001430:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
    u_cells |= unpack_left_shift_u64(src_p[1], 32u, 0xffu);
 8001434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001436:	3301      	adds	r3, #1
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	22ff      	movs	r2, #255	; 0xff
 800143c:	2120      	movs	r1, #32
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff fe3c 	bl	80010bc <unpack_left_shift_u64>
 8001444:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001448:	ea42 0400 	orr.w	r4, r2, r0
 800144c:	ea43 0501 	orr.w	r5, r3, r1
 8001450:	e9c7 450c 	strd	r4, r5, [r7, #48]	; 0x30
    u_cells |= unpack_left_shift_u64(src_p[2], 24u, 0xffu);
 8001454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001456:	3302      	adds	r3, #2
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	22ff      	movs	r2, #255	; 0xff
 800145c:	2118      	movs	r1, #24
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff fe2c 	bl	80010bc <unpack_left_shift_u64>
 8001464:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001468:	ea42 0800 	orr.w	r8, r2, r0
 800146c:	ea43 0901 	orr.w	r9, r3, r1
 8001470:	e9c7 890c 	strd	r8, r9, [r7, #48]	; 0x30
    u_cells |= unpack_left_shift_u64(src_p[3], 16u, 0xffu);
 8001474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001476:	3303      	adds	r3, #3
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	22ff      	movs	r2, #255	; 0xff
 800147c:	2110      	movs	r1, #16
 800147e:	4618      	mov	r0, r3
 8001480:	f7ff fe1c 	bl	80010bc <unpack_left_shift_u64>
 8001484:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001488:	ea42 0400 	orr.w	r4, r2, r0
 800148c:	613c      	str	r4, [r7, #16]
 800148e:	430b      	orrs	r3, r1
 8001490:	617b      	str	r3, [r7, #20]
 8001492:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001496:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    u_cells |= unpack_left_shift_u64(src_p[4], 8u, 0xffu);
 800149a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800149c:	3304      	adds	r3, #4
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	22ff      	movs	r2, #255	; 0xff
 80014a2:	2108      	movs	r1, #8
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff fe09 	bl	80010bc <unpack_left_shift_u64>
 80014aa:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80014ae:	ea42 0400 	orr.w	r4, r2, r0
 80014b2:	60bc      	str	r4, [r7, #8]
 80014b4:	430b      	orrs	r3, r1
 80014b6:	60fb      	str	r3, [r7, #12]
 80014b8:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80014bc:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    u_cells |= unpack_right_shift_u64(src_p[5], 0u, 0xffu);
 80014c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014c2:	3305      	adds	r3, #5
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	22ff      	movs	r2, #255	; 0xff
 80014c8:	2100      	movs	r1, #0
 80014ca:	4618      	mov	r0, r3
 80014cc:	f7ff fe4d 	bl	800116a <unpack_right_shift_u64>
 80014d0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80014d4:	ea42 0400 	orr.w	r4, r2, r0
 80014d8:	603c      	str	r4, [r7, #0]
 80014da:	430b      	orrs	r3, r1
 80014dc:	607b      	str	r3, [r7, #4]
 80014de:	e9d7 3400 	ldrd	r3, r4, [r7]
 80014e2:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    if ((u_cells & (1ull << 47)) != 0ull) {
 80014e6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80014ea:	f04f 0000 	mov.w	r0, #0
 80014ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014f2:	ea02 0400 	and.w	r4, r2, r0
 80014f6:	61bc      	str	r4, [r7, #24]
 80014f8:	400b      	ands	r3, r1
 80014fa:	61fb      	str	r3, [r7, #28]
 80014fc:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001500:	4323      	orrs	r3, r4
 8001502:	d00a      	beq.n	800151a <can2_ivt_msg_result_u1_unpack+0x112>
        u_cells |= 0xffff000000000000ull;
 8001504:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001508:	f04f 0000 	mov.w	r0, #0
 800150c:	4908      	ldr	r1, [pc, #32]	; (8001530 <can2_ivt_msg_result_u1_unpack+0x128>)
 800150e:	ea42 0a00 	orr.w	sl, r2, r0
 8001512:	ea43 0b01 	orr.w	fp, r3, r1
 8001516:	e9c7 ab0c 	strd	sl, fp, [r7, #48]	; 0x30
    }

    dst_p->u_cells = (int64_t)u_cells;
 800151a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800151e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001520:	e9c1 2300 	strd	r2, r3, [r1]

    return (0);
 8001524:	2300      	movs	r3, #0
}
 8001526:	4618      	mov	r0, r3
 8001528:	3738      	adds	r7, #56	; 0x38
 800152a:	46bd      	mov	sp, r7
 800152c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001530:	ffff0000 	.word	0xffff0000

08001534 <can2_ivt_msg_result_u3_unpack>:

int can2_ivt_msg_result_u3_unpack(
    struct can2_ivt_msg_result_u3_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
 8001534:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001538:	b08e      	sub	sp, #56	; 0x38
 800153a:	af00      	add	r7, sp, #0
 800153c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800153e:	62b9      	str	r1, [r7, #40]	; 0x28
 8001540:	627a      	str	r2, [r7, #36]	; 0x24
    uint64_t u_vehicle;

    if (size < 6u) {
 8001542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001544:	2b05      	cmp	r3, #5
 8001546:	d802      	bhi.n	800154e <can2_ivt_msg_result_u3_unpack+0x1a>
        return (-EINVAL);
 8001548:	f06f 0315 	mvn.w	r3, #21
 800154c:	e081      	b.n	8001652 <can2_ivt_msg_result_u3_unpack+0x11e>
    }

    u_vehicle = unpack_left_shift_u64(src_p[0], 40u, 0xffu);
 800154e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	22ff      	movs	r2, #255	; 0xff
 8001554:	2128      	movs	r1, #40	; 0x28
 8001556:	4618      	mov	r0, r3
 8001558:	f7ff fdb0 	bl	80010bc <unpack_left_shift_u64>
 800155c:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
    u_vehicle |= unpack_left_shift_u64(src_p[1], 32u, 0xffu);
 8001560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001562:	3301      	adds	r3, #1
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	22ff      	movs	r2, #255	; 0xff
 8001568:	2120      	movs	r1, #32
 800156a:	4618      	mov	r0, r3
 800156c:	f7ff fda6 	bl	80010bc <unpack_left_shift_u64>
 8001570:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001574:	ea42 0400 	orr.w	r4, r2, r0
 8001578:	ea43 0501 	orr.w	r5, r3, r1
 800157c:	e9c7 450c 	strd	r4, r5, [r7, #48]	; 0x30
    u_vehicle |= unpack_left_shift_u64(src_p[2], 24u, 0xffu);
 8001580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001582:	3302      	adds	r3, #2
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	22ff      	movs	r2, #255	; 0xff
 8001588:	2118      	movs	r1, #24
 800158a:	4618      	mov	r0, r3
 800158c:	f7ff fd96 	bl	80010bc <unpack_left_shift_u64>
 8001590:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001594:	ea42 0800 	orr.w	r8, r2, r0
 8001598:	ea43 0901 	orr.w	r9, r3, r1
 800159c:	e9c7 890c 	strd	r8, r9, [r7, #48]	; 0x30
    u_vehicle |= unpack_left_shift_u64(src_p[3], 16u, 0xffu);
 80015a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015a2:	3303      	adds	r3, #3
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	22ff      	movs	r2, #255	; 0xff
 80015a8:	2110      	movs	r1, #16
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7ff fd86 	bl	80010bc <unpack_left_shift_u64>
 80015b0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80015b4:	ea42 0400 	orr.w	r4, r2, r0
 80015b8:	613c      	str	r4, [r7, #16]
 80015ba:	430b      	orrs	r3, r1
 80015bc:	617b      	str	r3, [r7, #20]
 80015be:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80015c2:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    u_vehicle |= unpack_left_shift_u64(src_p[4], 8u, 0xffu);
 80015c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015c8:	3304      	adds	r3, #4
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	22ff      	movs	r2, #255	; 0xff
 80015ce:	2108      	movs	r1, #8
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7ff fd73 	bl	80010bc <unpack_left_shift_u64>
 80015d6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80015da:	ea42 0400 	orr.w	r4, r2, r0
 80015de:	60bc      	str	r4, [r7, #8]
 80015e0:	430b      	orrs	r3, r1
 80015e2:	60fb      	str	r3, [r7, #12]
 80015e4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80015e8:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    u_vehicle |= unpack_right_shift_u64(src_p[5], 0u, 0xffu);
 80015ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015ee:	3305      	adds	r3, #5
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	22ff      	movs	r2, #255	; 0xff
 80015f4:	2100      	movs	r1, #0
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7ff fdb7 	bl	800116a <unpack_right_shift_u64>
 80015fc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001600:	ea42 0400 	orr.w	r4, r2, r0
 8001604:	603c      	str	r4, [r7, #0]
 8001606:	430b      	orrs	r3, r1
 8001608:	607b      	str	r3, [r7, #4]
 800160a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800160e:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    if ((u_vehicle & (1ull << 47)) != 0ull) {
 8001612:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001616:	f04f 0000 	mov.w	r0, #0
 800161a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800161e:	ea02 0400 	and.w	r4, r2, r0
 8001622:	61bc      	str	r4, [r7, #24]
 8001624:	400b      	ands	r3, r1
 8001626:	61fb      	str	r3, [r7, #28]
 8001628:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800162c:	4323      	orrs	r3, r4
 800162e:	d00a      	beq.n	8001646 <can2_ivt_msg_result_u3_unpack+0x112>
        u_vehicle |= 0xffff000000000000ull;
 8001630:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001634:	f04f 0000 	mov.w	r0, #0
 8001638:	4908      	ldr	r1, [pc, #32]	; (800165c <can2_ivt_msg_result_u3_unpack+0x128>)
 800163a:	ea42 0a00 	orr.w	sl, r2, r0
 800163e:	ea43 0b01 	orr.w	fp, r3, r1
 8001642:	e9c7 ab0c 	strd	sl, fp, [r7, #48]	; 0x30
    }

    dst_p->u_vehicle = (int64_t)u_vehicle;
 8001646:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800164a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800164c:	e9c1 2300 	strd	r2, r3, [r1]

    return (0);
 8001650:	2300      	movs	r3, #0
}
 8001652:	4618      	mov	r0, r3
 8001654:	3738      	adds	r7, #56	; 0x38
 8001656:	46bd      	mov	sp, r7
 8001658:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800165c:	ffff0000 	.word	0xffff0000

08001660 <can2_cc_status_unpack>:

int can2_cc_status_unpack(
    struct can2_cc_status_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	607a      	str	r2, [r7, #4]
    if (size < 1u) {
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d102      	bne.n	8001678 <can2_cc_status_unpack+0x18>
        return (-EINVAL);
 8001672:	f06f 0315 	mvn.w	r3, #21
 8001676:	e00b      	b.n	8001690 <can2_cc_status_unpack+0x30>
    }

    dst_p->enable_ams_charging = unpack_right_shift_u8(src_p[0], 0u, 0x01u);
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	2201      	movs	r2, #1
 800167e:	2100      	movs	r1, #0
 8001680:	4618      	mov	r0, r3
 8001682:	f7ff fd42 	bl	800110a <unpack_right_shift_u8>
 8001686:	4603      	mov	r3, r0
 8001688:	461a      	mov	r2, r3
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	701a      	strb	r2, [r3, #0]

    return (0);
 800168e:	2300      	movs	r3, #0
}
 8001690:	4618      	mov	r0, r3
 8001692:	3710      	adds	r7, #16
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}

08001698 <can1_dbu_status_1_decode>:

/*
 * @Brief  
 * @Retval None
 */
void can1_dbu_status_1_decode() {
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
   can1_dbu_status_1_unpack(&can1_dbu_status_1, rx_data, 8);
 800169c:	2208      	movs	r2, #8
 800169e:	4904      	ldr	r1, [pc, #16]	; (80016b0 <can1_dbu_status_1_decode+0x18>)
 80016a0:	4804      	ldr	r0, [pc, #16]	; (80016b4 <can1_dbu_status_1_decode+0x1c>)
 80016a2:	f7ff fca7 	bl	8000ff4 <can1_dbu_status_1_unpack>
   can1_dbu_status_1_flag = 1;
 80016a6:	4b04      	ldr	r3, [pc, #16]	; (80016b8 <can1_dbu_status_1_decode+0x20>)
 80016a8:	2201      	movs	r2, #1
 80016aa:	701a      	strb	r2, [r3, #0]
}
 80016ac:	bf00      	nop
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	200014cc 	.word	0x200014cc
 80016b4:	200014d4 	.word	0x200014d4
 80016b8:	20001501 	.word	0x20001501

080016bc <can2_amk1_setpoints_1_decode>:

/*
 * @Brief  
 * @Retval None
 */
void can2_amk1_setpoints_1_decode() {
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
   can2_amk1_setpoints_1_unpack(&can2_amk1_setpoints_1, rx_data, 8);
 80016c0:	2208      	movs	r2, #8
 80016c2:	4904      	ldr	r1, [pc, #16]	; (80016d4 <can2_amk1_setpoints_1_decode+0x18>)
 80016c4:	4804      	ldr	r0, [pc, #16]	; (80016d8 <can2_amk1_setpoints_1_decode+0x1c>)
 80016c6:	f7ff fd77 	bl	80011b8 <can2_amk1_setpoints_1_unpack>
   can2_amk1_setpoints_1_flag = 1;
 80016ca:	4b04      	ldr	r3, [pc, #16]	; (80016dc <can2_amk1_setpoints_1_decode+0x20>)
 80016cc:	2201      	movs	r2, #1
 80016ce:	701a      	strb	r2, [r3, #0]
}
 80016d0:	bf00      	nop
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	200014cc 	.word	0x200014cc
 80016d8:	200014d8 	.word	0x200014d8
 80016dc:	20001502 	.word	0x20001502

080016e0 <can2_ivt_msg_result_i_decode>:

/*
 * @Brief  
 * @Retval None
 */
void can2_ivt_msg_result_i_decode() {
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
   can2_ivt_msg_result_i_unpack(&can2_ivt_msg_result_i, rx_data, 6);
 80016e4:	2206      	movs	r2, #6
 80016e6:	4904      	ldr	r1, [pc, #16]	; (80016f8 <can2_ivt_msg_result_i_decode+0x18>)
 80016e8:	4804      	ldr	r0, [pc, #16]	; (80016fc <can2_ivt_msg_result_i_decode+0x1c>)
 80016ea:	f7ff fdf7 	bl	80012dc <can2_ivt_msg_result_i_unpack>
   can2_ivt_msg_result_i_flag = 1;
 80016ee:	4b04      	ldr	r3, [pc, #16]	; (8001700 <can2_ivt_msg_result_i_decode+0x20>)
 80016f0:	2201      	movs	r2, #1
 80016f2:	701a      	strb	r2, [r3, #0]
}
 80016f4:	bf00      	nop
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	200014cc 	.word	0x200014cc
 80016fc:	200014e8 	.word	0x200014e8
 8001700:	20001503 	.word	0x20001503

08001704 <can2_ivt_msg_result_u1_decode>:

/*
 * @Brief  
 * @Retval None
 */
void can2_ivt_msg_result_u1_decode() {
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
   can2_ivt_msg_result_u1_unpack(&can2_ivt_msg_result_u1, rx_data, 6);
 8001708:	2206      	movs	r2, #6
 800170a:	4904      	ldr	r1, [pc, #16]	; (800171c <can2_ivt_msg_result_u1_decode+0x18>)
 800170c:	4804      	ldr	r0, [pc, #16]	; (8001720 <can2_ivt_msg_result_u1_decode+0x1c>)
 800170e:	f7ff fe7b 	bl	8001408 <can2_ivt_msg_result_u1_unpack>
   can2_ivt_msg_result_u1_flag = 1;
 8001712:	4b04      	ldr	r3, [pc, #16]	; (8001724 <can2_ivt_msg_result_u1_decode+0x20>)
 8001714:	2201      	movs	r2, #1
 8001716:	701a      	strb	r2, [r3, #0]
}
 8001718:	bf00      	nop
 800171a:	bd80      	pop	{r7, pc}
 800171c:	200014cc 	.word	0x200014cc
 8001720:	200014f0 	.word	0x200014f0
 8001724:	20001504 	.word	0x20001504

08001728 <can2_ivt_msg_result_u3_decode>:

/*
 * @Brief  
 * @Retval None
 */
void can2_ivt_msg_result_u3_decode() {
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
   can2_ivt_msg_result_u3_unpack(&can2_ivt_msg_result_u3, rx_data, 6);
 800172c:	2206      	movs	r2, #6
 800172e:	4904      	ldr	r1, [pc, #16]	; (8001740 <can2_ivt_msg_result_u3_decode+0x18>)
 8001730:	4804      	ldr	r0, [pc, #16]	; (8001744 <can2_ivt_msg_result_u3_decode+0x1c>)
 8001732:	f7ff feff 	bl	8001534 <can2_ivt_msg_result_u3_unpack>
   can2_ivt_msg_result_u3_flag = 1;
 8001736:	4b04      	ldr	r3, [pc, #16]	; (8001748 <can2_ivt_msg_result_u3_decode+0x20>)
 8001738:	2201      	movs	r2, #1
 800173a:	701a      	strb	r2, [r3, #0]
}
 800173c:	bf00      	nop
 800173e:	bd80      	pop	{r7, pc}
 8001740:	200014cc 	.word	0x200014cc
 8001744:	200014f8 	.word	0x200014f8
 8001748:	20001505 	.word	0x20001505

0800174c <can2_cc_status_decode>:

/*
 * @Brief  
 * @Retval None
 */
void can2_cc_status_decode() {
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
   can2_cc_status_unpack(&can2_cc_status, rx_data, 1);
 8001750:	2201      	movs	r2, #1
 8001752:	4904      	ldr	r1, [pc, #16]	; (8001764 <can2_cc_status_decode+0x18>)
 8001754:	4804      	ldr	r0, [pc, #16]	; (8001768 <can2_cc_status_decode+0x1c>)
 8001756:	f7ff ff83 	bl	8001660 <can2_cc_status_unpack>
   can2_cc_status_flag = 1;
 800175a:	4b04      	ldr	r3, [pc, #16]	; (800176c <can2_cc_status_decode+0x20>)
 800175c:	2201      	movs	r2, #1
 800175e:	701a      	strb	r2, [r3, #0]
}
 8001760:	bf00      	nop
 8001762:	bd80      	pop	{r7, pc}
 8001764:	200014cc 	.word	0x200014cc
 8001768:	20001500 	.word	0x20001500
 800176c:	20001506 	.word	0x20001506

08001770 <HAL_CAN_RxFifo0MsgPendingCallback>:
       can2_cc_status_rx_callback(&cc_status);
       can2_cc_status_flag = 0;
   }
}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001770:	b580      	push	{r7, lr}
 8001772:	b08a      	sub	sp, #40	; 0x28
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
   CAN_RxHeaderTypeDef rx_header;
   static uint8_t rx_data[8];

   if (HAL_OK == HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_header, rx_data)) {
 8001778:	f107 020c 	add.w	r2, r7, #12
 800177c:	4b21      	ldr	r3, [pc, #132]	; (8001804 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 800177e:	2100      	movs	r1, #0
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	f010 fee6 	bl	8012552 <HAL_CAN_GetRxMessage>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d136      	bne.n	80017fa <HAL_CAN_RxFifo0MsgPendingCallback+0x8a>
       switch(rx_header.StdId) {
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	f240 5224 	movw	r2, #1316	; 0x524
 8001792:	4293      	cmp	r3, r2
 8001794:	d02b      	beq.n	80017ee <HAL_CAN_RxFifo0MsgPendingCallback+0x7e>
 8001796:	f240 5224 	movw	r2, #1316	; 0x524
 800179a:	4293      	cmp	r3, r2
 800179c:	d82e      	bhi.n	80017fc <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>
 800179e:	f240 5222 	movw	r2, #1314	; 0x522
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d020      	beq.n	80017e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>
 80017a6:	f240 5222 	movw	r2, #1314	; 0x522
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d826      	bhi.n	80017fc <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>
 80017ae:	f240 5221 	movw	r2, #1313	; 0x521
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d015      	beq.n	80017e2 <HAL_CAN_RxFifo0MsgPendingCallback+0x72>
 80017b6:	f240 5221 	movw	r2, #1313	; 0x521
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d81e      	bhi.n	80017fc <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>
 80017be:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 80017c2:	d017      	beq.n	80017f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>
 80017c4:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 80017c8:	d818      	bhi.n	80017fc <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>
 80017ca:	2b40      	cmp	r3, #64	; 0x40
 80017cc:	d003      	beq.n	80017d6 <HAL_CAN_RxFifo0MsgPendingCallback+0x66>
 80017ce:	f5b3 7fc2 	cmp.w	r3, #388	; 0x184
 80017d2:	d003      	beq.n	80017dc <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>
           case 592:
               can2_cc_status_decode();
               break;
        }
    }
}
 80017d4:	e012      	b.n	80017fc <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>
               can1_dbu_status_1_decode();
 80017d6:	f7ff ff5f 	bl	8001698 <can1_dbu_status_1_decode>
               break;
 80017da:	e00f      	b.n	80017fc <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>
               can2_amk1_setpoints_1_decode();
 80017dc:	f7ff ff6e 	bl	80016bc <can2_amk1_setpoints_1_decode>
               break;
 80017e0:	e00c      	b.n	80017fc <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>
               can2_ivt_msg_result_i_decode();
 80017e2:	f7ff ff7d 	bl	80016e0 <can2_ivt_msg_result_i_decode>
               break;
 80017e6:	e009      	b.n	80017fc <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>
               can2_ivt_msg_result_u1_decode();
 80017e8:	f7ff ff8c 	bl	8001704 <can2_ivt_msg_result_u1_decode>
               break;
 80017ec:	e006      	b.n	80017fc <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>
               can2_ivt_msg_result_u3_decode();
 80017ee:	f7ff ff9b 	bl	8001728 <can2_ivt_msg_result_u3_decode>
               break;
 80017f2:	e003      	b.n	80017fc <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>
               can2_cc_status_decode();
 80017f4:	f7ff ffaa 	bl	800174c <can2_cc_status_decode>
               break;
 80017f8:	e000      	b.n	80017fc <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>
    }
 80017fa:	bf00      	nop
}
 80017fc:	bf00      	nop
 80017fe:	3728      	adds	r7, #40	; 0x28
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	20001508 	.word	0x20001508

08001808 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001808:	b580      	push	{r7, lr}
 800180a:	b08a      	sub	sp, #40	; 0x28
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
   CAN_RxHeaderTypeDef rx_header;
   static uint8_t rx_data[8];

   if (HAL_OK == HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &rx_header, rx_data)) {
 8001810:	f107 020c 	add.w	r2, r7, #12
 8001814:	4b21      	ldr	r3, [pc, #132]	; (800189c <HAL_CAN_RxFifo1MsgPendingCallback+0x94>)
 8001816:	2101      	movs	r1, #1
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f010 fe9a 	bl	8012552 <HAL_CAN_GetRxMessage>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d136      	bne.n	8001892 <HAL_CAN_RxFifo1MsgPendingCallback+0x8a>
       switch(rx_header.StdId) {
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	f240 5224 	movw	r2, #1316	; 0x524
 800182a:	4293      	cmp	r3, r2
 800182c:	d02b      	beq.n	8001886 <HAL_CAN_RxFifo1MsgPendingCallback+0x7e>
 800182e:	f240 5224 	movw	r2, #1316	; 0x524
 8001832:	4293      	cmp	r3, r2
 8001834:	d82e      	bhi.n	8001894 <HAL_CAN_RxFifo1MsgPendingCallback+0x8c>
 8001836:	f240 5222 	movw	r2, #1314	; 0x522
 800183a:	4293      	cmp	r3, r2
 800183c:	d020      	beq.n	8001880 <HAL_CAN_RxFifo1MsgPendingCallback+0x78>
 800183e:	f240 5222 	movw	r2, #1314	; 0x522
 8001842:	4293      	cmp	r3, r2
 8001844:	d826      	bhi.n	8001894 <HAL_CAN_RxFifo1MsgPendingCallback+0x8c>
 8001846:	f240 5221 	movw	r2, #1313	; 0x521
 800184a:	4293      	cmp	r3, r2
 800184c:	d015      	beq.n	800187a <HAL_CAN_RxFifo1MsgPendingCallback+0x72>
 800184e:	f240 5221 	movw	r2, #1313	; 0x521
 8001852:	4293      	cmp	r3, r2
 8001854:	d81e      	bhi.n	8001894 <HAL_CAN_RxFifo1MsgPendingCallback+0x8c>
 8001856:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800185a:	d017      	beq.n	800188c <HAL_CAN_RxFifo1MsgPendingCallback+0x84>
 800185c:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8001860:	d818      	bhi.n	8001894 <HAL_CAN_RxFifo1MsgPendingCallback+0x8c>
 8001862:	2b40      	cmp	r3, #64	; 0x40
 8001864:	d003      	beq.n	800186e <HAL_CAN_RxFifo1MsgPendingCallback+0x66>
 8001866:	f5b3 7fc2 	cmp.w	r3, #388	; 0x184
 800186a:	d003      	beq.n	8001874 <HAL_CAN_RxFifo1MsgPendingCallback+0x6c>
           case 592:
               can2_cc_status_decode();
               break;
        }
    }
}
 800186c:	e012      	b.n	8001894 <HAL_CAN_RxFifo1MsgPendingCallback+0x8c>
               can1_dbu_status_1_decode();
 800186e:	f7ff ff13 	bl	8001698 <can1_dbu_status_1_decode>
               break;
 8001872:	e00f      	b.n	8001894 <HAL_CAN_RxFifo1MsgPendingCallback+0x8c>
               can2_amk1_setpoints_1_decode();
 8001874:	f7ff ff22 	bl	80016bc <can2_amk1_setpoints_1_decode>
               break;
 8001878:	e00c      	b.n	8001894 <HAL_CAN_RxFifo1MsgPendingCallback+0x8c>
               can2_ivt_msg_result_i_decode();
 800187a:	f7ff ff31 	bl	80016e0 <can2_ivt_msg_result_i_decode>
               break;
 800187e:	e009      	b.n	8001894 <HAL_CAN_RxFifo1MsgPendingCallback+0x8c>
               can2_ivt_msg_result_u1_decode();
 8001880:	f7ff ff40 	bl	8001704 <can2_ivt_msg_result_u1_decode>
               break;
 8001884:	e006      	b.n	8001894 <HAL_CAN_RxFifo1MsgPendingCallback+0x8c>
               can2_ivt_msg_result_u3_decode();
 8001886:	f7ff ff4f 	bl	8001728 <can2_ivt_msg_result_u3_decode>
               break;
 800188a:	e003      	b.n	8001894 <HAL_CAN_RxFifo1MsgPendingCallback+0x8c>
               can2_cc_status_decode();
 800188c:	f7ff ff5e 	bl	800174c <can2_cc_status_decode>
               break;
 8001890:	e000      	b.n	8001894 <HAL_CAN_RxFifo1MsgPendingCallback+0x8c>
    }
 8001892:	bf00      	nop
}
 8001894:	bf00      	nop
 8001896:	3728      	adds	r7, #40	; 0x28
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	20001510 	.word	0x20001510

080018a0 <inc_res>:
 * @Brief	Increments if true, resets (to zero) otherwise
 * @Param	A conditional statement which evaluates to true or false
 * @Param	A pointer to an integer which may be incremented or reset
 * @Retval	Void
 */
static void inc_res(uint8_t cnd, uint8_t *ptr) {
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	4603      	mov	r3, r0
 80018a8:	6039      	str	r1, [r7, #0]
 80018aa:	71fb      	strb	r3, [r7, #7]
	if (cnd) {
 80018ac:	79fb      	ldrb	r3, [r7, #7]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d006      	beq.n	80018c0 <inc_res+0x20>
		ptr[0]++;
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	3301      	adds	r3, #1
 80018b8:	b2da      	uxtb	r2, r3
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	701a      	strb	r2, [r3, #0]
	} else {
		ptr[0] = 0;
	}
}
 80018be:	e002      	b.n	80018c6 <inc_res+0x26>
		ptr[0] = 0;
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	2200      	movs	r2, #0
 80018c4:	701a      	strb	r2, [r3, #0]
}
 80018c6:	bf00      	nop
 80018c8:	370c      	adds	r7, #12
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
	...

080018d4 <COM_voltages_ok>:
 * @Param	A vector of voltages to check
 * @Param	The sample constraint. How many consecutive samples may be wrong before an error is triggered
 * @retval	An error code
 */
error_t COM_voltages_ok(double *voltages,
		uint16_t sample_constraint) {
 80018d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018d6:	b087      	sub	sp, #28
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	460b      	mov	r3, r1
 80018de:	807b      	strh	r3, [r7, #2]
	const float upper_boundary = 4.19;
 80018e0:	4b2e      	ldr	r3, [pc, #184]	; (800199c <COM_voltages_ok+0xc8>)
 80018e2:	613b      	str	r3, [r7, #16]
	const float lower_boundary = 2.81;
 80018e4:	4b2e      	ldr	r3, [pc, #184]	; (80019a0 <COM_voltages_ok+0xcc>)
 80018e6:	60fb      	str	r3, [r7, #12]

	for (int p = 0; p < 126; p++) {
 80018e8:	2300      	movs	r3, #0
 80018ea:	617b      	str	r3, [r7, #20]
 80018ec:	e04d      	b.n	800198a <COM_voltages_ok+0xb6>
		inc_res(voltages[p] > upper_boundary, &over_voltages[p]);
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	00db      	lsls	r3, r3, #3
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	4413      	add	r3, r2
 80018f6:	e9d3 4500 	ldrd	r4, r5, [r3]
 80018fa:	6938      	ldr	r0, [r7, #16]
 80018fc:	f7fe fe16 	bl	800052c <__aeabi_f2d>
 8001900:	4602      	mov	r2, r0
 8001902:	460b      	mov	r3, r1
 8001904:	2101      	movs	r1, #1
 8001906:	460e      	mov	r6, r1
 8001908:	4620      	mov	r0, r4
 800190a:	4629      	mov	r1, r5
 800190c:	f7ff f8f6 	bl	8000afc <__aeabi_dcmpgt>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d101      	bne.n	800191a <COM_voltages_ok+0x46>
 8001916:	2300      	movs	r3, #0
 8001918:	461e      	mov	r6, r3
 800191a:	b2f3      	uxtb	r3, r6
 800191c:	4618      	mov	r0, r3
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	4a20      	ldr	r2, [pc, #128]	; (80019a4 <COM_voltages_ok+0xd0>)
 8001922:	4413      	add	r3, r2
 8001924:	4619      	mov	r1, r3
 8001926:	f7ff ffbb 	bl	80018a0 <inc_res>
		inc_res(lower_boundary > voltages[p], &under_voltages[p]);
 800192a:	68f8      	ldr	r0, [r7, #12]
 800192c:	f7fe fdfe 	bl	800052c <__aeabi_f2d>
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	00db      	lsls	r3, r3, #3
 8001934:	687a      	ldr	r2, [r7, #4]
 8001936:	4413      	add	r3, r2
 8001938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800193c:	2401      	movs	r4, #1
 800193e:	f7ff f8dd 	bl	8000afc <__aeabi_dcmpgt>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d101      	bne.n	800194c <COM_voltages_ok+0x78>
 8001948:	2300      	movs	r3, #0
 800194a:	461c      	mov	r4, r3
 800194c:	b2e3      	uxtb	r3, r4
 800194e:	4618      	mov	r0, r3
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	4a15      	ldr	r2, [pc, #84]	; (80019a8 <COM_voltages_ok+0xd4>)
 8001954:	4413      	add	r3, r2
 8001956:	4619      	mov	r1, r3
 8001958:	f7ff ffa2 	bl	80018a0 <inc_res>

		if (over_voltages[p] > sample_constraint) {
 800195c:	4a11      	ldr	r2, [pc, #68]	; (80019a4 <COM_voltages_ok+0xd0>)
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	4413      	add	r3, r2
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	b29b      	uxth	r3, r3
 8001966:	887a      	ldrh	r2, [r7, #2]
 8001968:	429a      	cmp	r2, r3
 800196a:	d201      	bcs.n	8001970 <COM_voltages_ok+0x9c>
			return ERROR_OVER_VOLTAGE;
 800196c:	2316      	movs	r3, #22
 800196e:	e010      	b.n	8001992 <COM_voltages_ok+0xbe>
		}
		if (under_voltages[p] > sample_constraint) {
 8001970:	4a0d      	ldr	r2, [pc, #52]	; (80019a8 <COM_voltages_ok+0xd4>)
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	4413      	add	r3, r2
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	b29b      	uxth	r3, r3
 800197a:	887a      	ldrh	r2, [r7, #2]
 800197c:	429a      	cmp	r2, r3
 800197e:	d201      	bcs.n	8001984 <COM_voltages_ok+0xb0>
			return ERROR_UNDER_VOLTAGE;
 8001980:	2315      	movs	r3, #21
 8001982:	e006      	b.n	8001992 <COM_voltages_ok+0xbe>
	for (int p = 0; p < 126; p++) {
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	3301      	adds	r3, #1
 8001988:	617b      	str	r3, [r7, #20]
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	2b7d      	cmp	r3, #125	; 0x7d
 800198e:	ddae      	ble.n	80018ee <COM_voltages_ok+0x1a>
		}
	}

	return 0;
 8001990:	2300      	movs	r3, #0

}
 8001992:	4618      	mov	r0, r3
 8001994:	371c      	adds	r7, #28
 8001996:	46bd      	mov	sp, r7
 8001998:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800199a:	bf00      	nop
 800199c:	4086147b 	.word	0x4086147b
 80019a0:	4033d70a 	.word	0x4033d70a
 80019a4:	20001518 	.word	0x20001518
 80019a8:	20001598 	.word	0x20001598

080019ac <COM_temperatures_ok>:
 * @Param	A vector of temperatures to check
 * @Param	The sample constraint. How many consecutive samples may be wrong before an error is triggered
 * @retval	An error code
 */
error_t COM_temperatures_ok(double *temperatures,
		uint16_t sample_constraint) {
 80019ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019ae:	b087      	sub	sp, #28
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	460b      	mov	r3, r1
 80019b6:	807b      	strh	r3, [r7, #2]
	const float upper_boundary = 60;
 80019b8:	4b2e      	ldr	r3, [pc, #184]	; (8001a74 <COM_temperatures_ok+0xc8>)
 80019ba:	613b      	str	r3, [r7, #16]
	const float lower_boundary = -20;
 80019bc:	4b2e      	ldr	r3, [pc, #184]	; (8001a78 <COM_temperatures_ok+0xcc>)
 80019be:	60fb      	str	r3, [r7, #12]

	for (int p = 0; p < 60; p++) {
 80019c0:	2300      	movs	r3, #0
 80019c2:	617b      	str	r3, [r7, #20]
 80019c4:	e04d      	b.n	8001a62 <COM_temperatures_ok+0xb6>
		inc_res(temperatures[p] > upper_boundary,
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	00db      	lsls	r3, r3, #3
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	4413      	add	r3, r2
 80019ce:	e9d3 4500 	ldrd	r4, r5, [r3]
 80019d2:	6938      	ldr	r0, [r7, #16]
 80019d4:	f7fe fdaa 	bl	800052c <__aeabi_f2d>
 80019d8:	4602      	mov	r2, r0
 80019da:	460b      	mov	r3, r1
 80019dc:	2101      	movs	r1, #1
 80019de:	460e      	mov	r6, r1
 80019e0:	4620      	mov	r0, r4
 80019e2:	4629      	mov	r1, r5
 80019e4:	f7ff f88a 	bl	8000afc <__aeabi_dcmpgt>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d101      	bne.n	80019f2 <COM_temperatures_ok+0x46>
 80019ee:	2300      	movs	r3, #0
 80019f0:	461e      	mov	r6, r3
 80019f2:	b2f3      	uxtb	r3, r6
 80019f4:	4618      	mov	r0, r3
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	4a20      	ldr	r2, [pc, #128]	; (8001a7c <COM_temperatures_ok+0xd0>)
 80019fa:	4413      	add	r3, r2
 80019fc:	4619      	mov	r1, r3
 80019fe:	f7ff ff4f 	bl	80018a0 <inc_res>
				&over_temperatures[p]);
		inc_res(lower_boundary > temperatures[p],
 8001a02:	68f8      	ldr	r0, [r7, #12]
 8001a04:	f7fe fd92 	bl	800052c <__aeabi_f2d>
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	00db      	lsls	r3, r3, #3
 8001a0c:	687a      	ldr	r2, [r7, #4]
 8001a0e:	4413      	add	r3, r2
 8001a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a14:	2401      	movs	r4, #1
 8001a16:	f7ff f871 	bl	8000afc <__aeabi_dcmpgt>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d101      	bne.n	8001a24 <COM_temperatures_ok+0x78>
 8001a20:	2300      	movs	r3, #0
 8001a22:	461c      	mov	r4, r3
 8001a24:	b2e3      	uxtb	r3, r4
 8001a26:	4618      	mov	r0, r3
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	4a15      	ldr	r2, [pc, #84]	; (8001a80 <COM_temperatures_ok+0xd4>)
 8001a2c:	4413      	add	r3, r2
 8001a2e:	4619      	mov	r1, r3
 8001a30:	f7ff ff36 	bl	80018a0 <inc_res>
				&under_temperatures[p]);

		if (over_temperatures[p] > sample_constraint) {
 8001a34:	4a11      	ldr	r2, [pc, #68]	; (8001a7c <COM_temperatures_ok+0xd0>)
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	4413      	add	r3, r2
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	b29b      	uxth	r3, r3
 8001a3e:	887a      	ldrh	r2, [r7, #2]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d201      	bcs.n	8001a48 <COM_temperatures_ok+0x9c>
			return ERROR_OVER_TEMPERATURE;
 8001a44:	2318      	movs	r3, #24
 8001a46:	e010      	b.n	8001a6a <COM_temperatures_ok+0xbe>
		}
		if (under_temperatures[p] > sample_constraint) {
 8001a48:	4a0d      	ldr	r2, [pc, #52]	; (8001a80 <COM_temperatures_ok+0xd4>)
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	4413      	add	r3, r2
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	887a      	ldrh	r2, [r7, #2]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d201      	bcs.n	8001a5c <COM_temperatures_ok+0xb0>
			return ERROR_UNDER_TEMPERATURE;
 8001a58:	2317      	movs	r3, #23
 8001a5a:	e006      	b.n	8001a6a <COM_temperatures_ok+0xbe>
	for (int p = 0; p < 60; p++) {
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	3301      	adds	r3, #1
 8001a60:	617b      	str	r3, [r7, #20]
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	2b3b      	cmp	r3, #59	; 0x3b
 8001a66:	ddae      	ble.n	80019c6 <COM_temperatures_ok+0x1a>
		}
	}

	return 0;
 8001a68:	2300      	movs	r3, #0

}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	371c      	adds	r7, #28
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a72:	bf00      	nop
 8001a74:	42700000 	.word	0x42700000
 8001a78:	c1a00000 	.word	0xc1a00000
 8001a7c:	20001618 	.word	0x20001618
 8001a80:	20001654 	.word	0x20001654

08001a84 <COM_current_ok>:
 * @Param	A single current to check
 * @Param	The sample constraint. How many consecutive samples may be wrong before an error is triggered
 * @retval	An error code
 */
error_t COM_current_ok(double *current,
		uint16_t sample_constraint) {
 8001a84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a86:	b085      	sub	sp, #20
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	807b      	strh	r3, [r7, #2]
	const float upper_boundary = 100;
 8001a90:	4b21      	ldr	r3, [pc, #132]	; (8001b18 <COM_current_ok+0x94>)
 8001a92:	60fb      	str	r3, [r7, #12]
	const float lower_boundary = -40;
 8001a94:	4b21      	ldr	r3, [pc, #132]	; (8001b1c <COM_current_ok+0x98>)
 8001a96:	60bb      	str	r3, [r7, #8]

	inc_res(current[0] > upper_boundary, &over_current);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001a9e:	68f8      	ldr	r0, [r7, #12]
 8001aa0:	f7fe fd44 	bl	800052c <__aeabi_f2d>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	2101      	movs	r1, #1
 8001aaa:	460e      	mov	r6, r1
 8001aac:	4620      	mov	r0, r4
 8001aae:	4629      	mov	r1, r5
 8001ab0:	f7ff f824 	bl	8000afc <__aeabi_dcmpgt>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d101      	bne.n	8001abe <COM_current_ok+0x3a>
 8001aba:	2300      	movs	r3, #0
 8001abc:	461e      	mov	r6, r3
 8001abe:	b2f3      	uxtb	r3, r6
 8001ac0:	4917      	ldr	r1, [pc, #92]	; (8001b20 <COM_current_ok+0x9c>)
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f7ff feec 	bl	80018a0 <inc_res>
	inc_res(lower_boundary > current[0], &under_current);
 8001ac8:	68b8      	ldr	r0, [r7, #8]
 8001aca:	f7fe fd2f 	bl	800052c <__aeabi_f2d>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ad4:	2401      	movs	r4, #1
 8001ad6:	f7ff f811 	bl	8000afc <__aeabi_dcmpgt>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d101      	bne.n	8001ae4 <COM_current_ok+0x60>
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	461c      	mov	r4, r3
 8001ae4:	b2e3      	uxtb	r3, r4
 8001ae6:	490f      	ldr	r1, [pc, #60]	; (8001b24 <COM_current_ok+0xa0>)
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7ff fed9 	bl	80018a0 <inc_res>

	if (over_current > sample_constraint) {
 8001aee:	4b0c      	ldr	r3, [pc, #48]	; (8001b20 <COM_current_ok+0x9c>)
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	b29b      	uxth	r3, r3
 8001af4:	887a      	ldrh	r2, [r7, #2]
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d201      	bcs.n	8001afe <COM_current_ok+0x7a>
		return ERROR_OVER_CURRENT;
 8001afa:	2320      	movs	r3, #32
 8001afc:	e008      	b.n	8001b10 <COM_current_ok+0x8c>
	}
	if (under_current > sample_constraint) {
 8001afe:	4b09      	ldr	r3, [pc, #36]	; (8001b24 <COM_current_ok+0xa0>)
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	b29b      	uxth	r3, r3
 8001b04:	887a      	ldrh	r2, [r7, #2]
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d201      	bcs.n	8001b0e <COM_current_ok+0x8a>
		return ERROR_UNDER_CURRENT;
 8001b0a:	231f      	movs	r3, #31
 8001b0c:	e000      	b.n	8001b10 <COM_current_ok+0x8c>
	}

	return 0;
 8001b0e:	2300      	movs	r3, #0

}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3714      	adds	r7, #20
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b18:	42c80000 	.word	0x42c80000
 8001b1c:	c2200000 	.word	0xc2200000
 8001b20:	20001690 	.word	0x20001690
 8001b24:	20001691 	.word	0x20001691

08001b28 <FAN_initialize>:
#include "main.h"
#include "programme_data.h"

#include "FAN.h"

void FAN_initialize(TIM_HandleTypeDef *htim) {
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
	const float frequency = 1000;
 8001b30:	4b10      	ldr	r3, [pc, #64]	; (8001b74 <FAN_initialize+0x4c>)
 8001b32:	60fb      	str	r3, [r7, #12]

	htim->Instance->ARR = 65535 / frequency;
 8001b34:	eddf 6a10 	vldr	s13, [pc, #64]	; 8001b78 <FAN_initialize+0x50>
 8001b38:	ed97 7a03 	vldr	s14, [r7, #12]
 8001b3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b48:	ee17 2a90 	vmov	r2, s15
 8001b4c:	62da      	str	r2, [r3, #44]	; 0x2c
	htim->Instance->CCR3 = htim->Instance->ARR / 2;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	0852      	lsrs	r2, r2, #1
 8001b5a:	63da      	str	r2, [r3, #60]	; 0x3c
	htim->Instance->CNT = 0;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2200      	movs	r2, #0
 8001b62:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_PWM_Start(htim, TIM_CHANNEL_3);
 8001b64:	2108      	movs	r1, #8
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f013 f9d2 	bl	8014f10 <HAL_TIM_PWM_Start>

}
 8001b6c:	bf00      	nop
 8001b6e:	3710      	adds	r7, #16
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	447a0000 	.word	0x447a0000
 8001b78:	477fff00 	.word	0x477fff00

08001b7c <FAN_duty_cycle>:

void FAN_duty_cycle(TIM_HandleTypeDef *htim, float duty_cycle) {
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	ed87 0a00 	vstr	s0, [r7]
	if (duty_cycle < 0) {
 8001b88:	edd7 7a00 	vldr	s15, [r7]
 8001b8c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b94:	d502      	bpl.n	8001b9c <FAN_duty_cycle+0x20>
		duty_cycle = 0;
 8001b96:	f04f 0300 	mov.w	r3, #0
 8001b9a:	603b      	str	r3, [r7, #0]
	}
	if (100 < duty_cycle) {
 8001b9c:	edd7 7a00 	vldr	s15, [r7]
 8001ba0:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001bf4 <FAN_duty_cycle+0x78>
 8001ba4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ba8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bac:	dd01      	ble.n	8001bb2 <FAN_duty_cycle+0x36>
		duty_cycle = 100;
 8001bae:	4b12      	ldr	r3, [pc, #72]	; (8001bf8 <FAN_duty_cycle+0x7c>)
 8001bb0:	603b      	str	r3, [r7, #0]
	}

	htim->Instance->CCR3 = (duty_cycle / 100) * htim->Instance->ARR;
 8001bb2:	edd7 7a00 	vldr	s15, [r7]
 8001bb6:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8001bf4 <FAN_duty_cycle+0x78>
 8001bba:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc4:	ee07 3a90 	vmov	s15, r3
 8001bc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bd8:	ee17 2a90 	vmov	r2, s15
 8001bdc:	63da      	str	r2, [r3, #60]	; 0x3c
	htim->Instance->CNT = 0;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	2200      	movs	r2, #0
 8001be4:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001be6:	bf00      	nop
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	42c80000 	.word	0x42c80000
 8001bf8:	42c80000 	.word	0x42c80000

08001bfc <HAL_TIM_IC_CaptureCallback>:
#include "programme_data.h"
#include "programme_queues.h"

static IMD_t IMD;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b086      	sub	sp, #24
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
	float ante = 0;
 8001c04:	f04f 0300 	mov.w	r3, #0
 8001c08:	617b      	str	r3, [r7, #20]
	float conq = 0;
 8001c0a:	f04f 0300 	mov.w	r3, #0
 8001c0e:	613b      	str	r3, [r7, #16]

	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001c10:	2300      	movs	r3, #0
 8001c12:	60fb      	str	r3, [r7, #12]

	if (htim->Instance == TIM2) {
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c1c:	d148      	bne.n	8001cb0 <HAL_TIM_IC_CaptureCallback+0xb4>
		ante = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8001c1e:	2104      	movs	r1, #4
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f014 f80b 	bl	8015c3c <HAL_TIM_ReadCapturedValue>
 8001c26:	ee07 0a90 	vmov	s15, r0
 8001c2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c2e:	edc7 7a05 	vstr	s15, [r7, #20]
		conq = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001c32:	2100      	movs	r1, #0
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f014 f801 	bl	8015c3c <HAL_TIM_ReadCapturedValue>
 8001c3a:	ee07 0a90 	vmov	s15, r0
 8001c3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c42:	edc7 7a04 	vstr	s15, [r7, #16]

		IMD.duty_cycle = ante / conq;
 8001c46:	ed97 7a05 	vldr	s14, [r7, #20]
 8001c4a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c4e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001c52:	ee16 0a90 	vmov	r0, s13
 8001c56:	f7fe fc69 	bl	800052c <__aeabi_f2d>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	4916      	ldr	r1, [pc, #88]	; (8001cb8 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8001c60:	e9c1 2300 	strd	r2, r3, [r1]
		IMD.frequency = 100000000 / (conq + 1);
 8001c64:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c68:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001c6c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001c70:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001cbc <HAL_TIM_IC_CaptureCallback+0xc0>
 8001c74:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001c78:	ee16 0a90 	vmov	r0, s13
 8001c7c:	f7fe fc56 	bl	800052c <__aeabi_f2d>
 8001c80:	4602      	mov	r2, r0
 8001c82:	460b      	mov	r3, r1
 8001c84:	490c      	ldr	r1, [pc, #48]	; (8001cb8 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8001c86:	e9c1 2302 	strd	r2, r3, [r1, #8]

		xQueueOverwriteFromISR(IMD_queue, &IMD, &xHigherPriorityTaskWoken);
 8001c8a:	4b0d      	ldr	r3, [pc, #52]	; (8001cc0 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8001c8c:	6818      	ldr	r0, [r3, #0]
 8001c8e:	f107 020c 	add.w	r2, r7, #12
 8001c92:	2302      	movs	r3, #2
 8001c94:	4908      	ldr	r1, [pc, #32]	; (8001cb8 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8001c96:	f015 fab1 	bl	80171fc <xQueueGenericSendFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d007      	beq.n	8001cb0 <HAL_TIM_IC_CaptureCallback+0xb4>
 8001ca0:	4b08      	ldr	r3, [pc, #32]	; (8001cc4 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8001ca2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ca6:	601a      	str	r2, [r3, #0]
 8001ca8:	f3bf 8f4f 	dsb	sy
 8001cac:	f3bf 8f6f 	isb	sy
	}
}
 8001cb0:	bf00      	nop
 8001cb2:	3718      	adds	r7, #24
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	20001698 	.word	0x20001698
 8001cbc:	4cbebc20 	.word	0x4cbebc20
 8001cc0:	2001b5d4 	.word	0x2001b5d4
 8001cc4:	e000ed04 	.word	0xe000ed04

08001cc8 <initialize_IMD>:

void initialize_IMD(TIM_HandleTypeDef *htim) {
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
	htim->Instance->ARR = 42000000;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a0b      	ldr	r2, [pc, #44]	; (8001d04 <initialize_IMD+0x3c>)
 8001cd6:	62da      	str	r2, [r3, #44]	; 0x2c

	if (HAL_TIM_IC_Start_IT(htim, TIM_CHANNEL_1) != HAL_OK) {
 8001cd8:	2100      	movs	r1, #0
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f013 fb16 	bl	801530c <HAL_TIM_IC_Start_IT>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <initialize_IMD+0x22>
		Error_Handler();
 8001ce6:	f002 fa23 	bl	8004130 <Error_Handler>
	}

	if (HAL_TIM_IC_Start(htim, TIM_CHANNEL_2) != HAL_OK) {
 8001cea:	2104      	movs	r1, #4
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f013 fa31 	bl	8015154 <HAL_TIM_IC_Start>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d001      	beq.n	8001cfc <initialize_IMD+0x34>
		Error_Handler();
 8001cf8:	f002 fa1a 	bl	8004130 <Error_Handler>
	}
}
 8001cfc:	bf00      	nop
 8001cfe:	3708      	adds	r7, #8
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	0280de80 	.word	0x0280de80

08001d08 <PID_progress>:
/*
 * @brief	Progress the PID
 * @param	Input at current timestep
 * @retval	1 if it went through, 0 else
 */
uint8_t PID_progress(PID_t *ctrl, float input) {
 8001d08:	b480      	push	{r7}
 8001d0a:	b087      	sub	sp, #28
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	ed87 0a00 	vstr	s0, [r7]
	ctrl->input = input;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	683a      	ldr	r2, [r7, #0]
 8001d18:	605a      	str	r2, [r3, #4]
	ctrl->error = ctrl->input - ctrl->reference;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	edd3 7a03 	vldr	s15, [r3, #12]
 8001d26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	edc3 7a00 	vstr	s15, [r3]

	ctrl->output = arm_pid_f32(&(ctrl->controller), ctrl->error);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f103 0218 	add.w	r2, r3, #24
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	617a      	str	r2, [r7, #20]
 8001d3c:	613b      	str	r3, [r7, #16]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	ed93 7a00 	vldr	s14, [r3]
 8001d44:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d48:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	edd3 6a01 	vldr	s13, [r3, #4]
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	edd3 7a03 	vldr	s15, [r3, #12]
 8001d58:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8001d5c:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	edd3 6a02 	vldr	s13, [r3, #8]
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	edd3 7a04 	vldr	s15, [r3, #16]
 8001d6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d70:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8001d7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d7e:	edc7 7a03 	vstr	s15, [r7, #12]

    /* Update state */
    S->state[1] = S->state[0];
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	68da      	ldr	r2, [r3, #12]
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	693a      	ldr	r2, [r7, #16]
 8001d8e:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	68fa      	ldr	r2, [r7, #12]
 8001d94:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8001d96:	68fa      	ldr	r2, [r7, #12]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	609a      	str	r2, [r3, #8]

	if (ctrl->output < ctrl->output_lower_bound) {
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	edd3 7a05 	vldr	s15, [r3, #20]
 8001da8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001dac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001db0:	d503      	bpl.n	8001dba <PID_progress+0xb2>
		ctrl->output = ctrl->output_lower_bound;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	695a      	ldr	r2, [r3, #20]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	609a      	str	r2, [r3, #8]
	}

	if (ctrl->output_upper_bound < ctrl->output) {
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	ed93 7a04 	vldr	s14, [r3, #16]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	edd3 7a02 	vldr	s15, [r3, #8]
 8001dc6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001dca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dce:	d503      	bpl.n	8001dd8 <PID_progress+0xd0>
		ctrl->output = ctrl->output_upper_bound;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	691a      	ldr	r2, [r3, #16]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	609a      	str	r2, [r3, #8]
	}

	return 1;
 8001dd8:	2301      	movs	r3, #1
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	371c      	adds	r7, #28
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr

08001de6 <PID_initialize>:
 * @param	output upper bound, ex 100 for PWM
 * @retval	1 if it went through, 0 else
 */
uint8_t PID_initialize(PID_t *ctrl, float reference,
		float proportional, float integral, float derivative,
		float output_lower_bound, float output_upper_bound) {
 8001de6:	b580      	push	{r7, lr}
 8001de8:	b088      	sub	sp, #32
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	61f8      	str	r0, [r7, #28]
 8001dee:	ed87 0a06 	vstr	s0, [r7, #24]
 8001df2:	edc7 0a05 	vstr	s1, [r7, #20]
 8001df6:	ed87 1a04 	vstr	s2, [r7, #16]
 8001dfa:	edc7 1a03 	vstr	s3, [r7, #12]
 8001dfe:	ed87 2a02 	vstr	s4, [r7, #8]
 8001e02:	edc7 2a01 	vstr	s5, [r7, #4]
	if (output_upper_bound < output_lower_bound) {
 8001e06:	ed97 7a01 	vldr	s14, [r7, #4]
 8001e0a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e0e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e16:	d501      	bpl.n	8001e1c <PID_initialize+0x36>
		return 0;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	e024      	b.n	8001e66 <PID_initialize+0x80>
	}

	ctrl->error = 0.;
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	f04f 0200 	mov.w	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]
	ctrl->input = 0.;
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	f04f 0200 	mov.w	r2, #0
 8001e2a:	605a      	str	r2, [r3, #4]
	ctrl->output = 0.;
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	f04f 0200 	mov.w	r2, #0
 8001e32:	609a      	str	r2, [r3, #8]
	ctrl->reference = reference;
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	69ba      	ldr	r2, [r7, #24]
 8001e38:	60da      	str	r2, [r3, #12]

	ctrl->output_upper_bound = output_upper_bound;
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	687a      	ldr	r2, [r7, #4]
 8001e3e:	611a      	str	r2, [r3, #16]
	ctrl->output_lower_bound = output_lower_bound;
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	68ba      	ldr	r2, [r7, #8]
 8001e44:	615a      	str	r2, [r3, #20]

	ctrl->controller.Kp = proportional;
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	697a      	ldr	r2, [r7, #20]
 8001e4a:	631a      	str	r2, [r3, #48]	; 0x30
	ctrl->controller.Ki = integral;
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	693a      	ldr	r2, [r7, #16]
 8001e50:	635a      	str	r2, [r3, #52]	; 0x34
	ctrl->controller.Kd = derivative;
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	68fa      	ldr	r2, [r7, #12]
 8001e56:	639a      	str	r2, [r3, #56]	; 0x38

	arm_pid_init_f32(&(ctrl->controller), 1);
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	3318      	adds	r3, #24
 8001e5c:	2101      	movs	r1, #1
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f019 f8a4 	bl	801afac <arm_pid_init_f32>

	return 1;
 8001e64:	2301      	movs	r3, #1
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3720      	adds	r7, #32
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
	...

08001e70 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8001e74:	4803      	ldr	r0, [pc, #12]	; (8001e84 <_cbSendSystemDesc+0x14>)
 8001e76:	f018 fe19 	bl	801aaac <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8001e7a:	4803      	ldr	r0, [pc, #12]	; (8001e88 <_cbSendSystemDesc+0x18>)
 8001e7c:	f018 fe16 	bl	801aaac <SEGGER_SYSVIEW_SendSysDesc>
}
 8001e80:	bf00      	nop
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	0801bc68 	.word	0x0801bc68
 8001e88:	0801bc94 	.word	0x0801bc94

08001e8c <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8001e90:	4b06      	ldr	r3, [pc, #24]	; (8001eac <SEGGER_SYSVIEW_Conf+0x20>)
 8001e92:	6818      	ldr	r0, [r3, #0]
 8001e94:	4b05      	ldr	r3, [pc, #20]	; (8001eac <SEGGER_SYSVIEW_Conf+0x20>)
 8001e96:	6819      	ldr	r1, [r3, #0]
 8001e98:	4b05      	ldr	r3, [pc, #20]	; (8001eb0 <SEGGER_SYSVIEW_Conf+0x24>)
 8001e9a:	4a06      	ldr	r2, [pc, #24]	; (8001eb4 <SEGGER_SYSVIEW_Conf+0x28>)
 8001e9c:	f018 f984 	bl	801a1a8 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8001ea0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001ea4:	f018 f9c4 	bl	801a230 <SEGGER_SYSVIEW_SetRAMBase>
}
 8001ea8:	bf00      	nop
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	20000084 	.word	0x20000084
 8001eb0:	08001e71 	.word	0x08001e71
 8001eb4:	0801bdbc 	.word	0x0801bdbc

08001eb8 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8001eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001eba:	b085      	sub	sp, #20
 8001ebc:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	607b      	str	r3, [r7, #4]
 8001ec2:	e048      	b.n	8001f56 <_cbSendTaskList+0x9e>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
 8001ec4:	4929      	ldr	r1, [pc, #164]	; (8001f6c <_cbSendTaskList+0xb4>)
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	4613      	mov	r3, r2
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	4413      	add	r3, r2
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	440b      	add	r3, r1
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f016 fcb3 	bl	8018840 <uxTaskGetStackHighWaterMark>
 8001eda:	4601      	mov	r1, r0
 8001edc:	4823      	ldr	r0, [pc, #140]	; (8001f6c <_cbSendTaskList+0xb4>)
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	4413      	add	r3, r2
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	4403      	add	r3, r0
 8001eea:	3310      	adds	r3, #16
 8001eec:	6019      	str	r1, [r3, #0]
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8001eee:	491f      	ldr	r1, [pc, #124]	; (8001f6c <_cbSendTaskList+0xb4>)
 8001ef0:	687a      	ldr	r2, [r7, #4]
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	4413      	add	r3, r2
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	440b      	add	r3, r1
 8001efc:	6818      	ldr	r0, [r3, #0]
 8001efe:	491b      	ldr	r1, [pc, #108]	; (8001f6c <_cbSendTaskList+0xb4>)
 8001f00:	687a      	ldr	r2, [r7, #4]
 8001f02:	4613      	mov	r3, r2
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	4413      	add	r3, r2
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	440b      	add	r3, r1
 8001f0c:	3304      	adds	r3, #4
 8001f0e:	6819      	ldr	r1, [r3, #0]
 8001f10:	4c16      	ldr	r4, [pc, #88]	; (8001f6c <_cbSendTaskList+0xb4>)
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	4613      	mov	r3, r2
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	4413      	add	r3, r2
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	4423      	add	r3, r4
 8001f1e:	3308      	adds	r3, #8
 8001f20:	681c      	ldr	r4, [r3, #0]
 8001f22:	4d12      	ldr	r5, [pc, #72]	; (8001f6c <_cbSendTaskList+0xb4>)
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	4613      	mov	r3, r2
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	4413      	add	r3, r2
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	442b      	add	r3, r5
 8001f30:	330c      	adds	r3, #12
 8001f32:	681d      	ldr	r5, [r3, #0]
 8001f34:	4e0d      	ldr	r6, [pc, #52]	; (8001f6c <_cbSendTaskList+0xb4>)
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	4613      	mov	r3, r2
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	4413      	add	r3, r2
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	4433      	add	r3, r6
 8001f42:	3310      	adds	r3, #16
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	9300      	str	r3, [sp, #0]
 8001f48:	462b      	mov	r3, r5
 8001f4a:	4622      	mov	r2, r4
 8001f4c:	f000 f8b6 	bl	80020bc <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	3301      	adds	r3, #1
 8001f54:	607b      	str	r3, [r7, #4]
 8001f56:	4b06      	ldr	r3, [pc, #24]	; (8001f70 <_cbSendTaskList+0xb8>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d3b1      	bcc.n	8001ec4 <_cbSendTaskList+0xc>
  }
}
 8001f60:	bf00      	nop
 8001f62:	bf00      	nop
 8001f64:	370c      	adds	r7, #12
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	200016a8 	.word	0x200016a8
 8001f70:	200017e8 	.word	0x200017e8

08001f74 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8001f74:	b5b0      	push	{r4, r5, r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8001f7a:	f016 f939 	bl	80181f0 <xTaskGetTickCountFromISR>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	461a      	mov	r2, r3
 8001f82:	f04f 0300 	mov.w	r3, #0
 8001f86:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8001f8a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001f8e:	4602      	mov	r2, r0
 8001f90:	460b      	mov	r3, r1
 8001f92:	f04f 0400 	mov.w	r4, #0
 8001f96:	f04f 0500 	mov.w	r5, #0
 8001f9a:	015d      	lsls	r5, r3, #5
 8001f9c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8001fa0:	0154      	lsls	r4, r2, #5
 8001fa2:	4622      	mov	r2, r4
 8001fa4:	462b      	mov	r3, r5
 8001fa6:	1a12      	subs	r2, r2, r0
 8001fa8:	eb63 0301 	sbc.w	r3, r3, r1
 8001fac:	f04f 0400 	mov.w	r4, #0
 8001fb0:	f04f 0500 	mov.w	r5, #0
 8001fb4:	009d      	lsls	r5, r3, #2
 8001fb6:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 8001fba:	0094      	lsls	r4, r2, #2
 8001fbc:	4622      	mov	r2, r4
 8001fbe:	462b      	mov	r3, r5
 8001fc0:	1812      	adds	r2, r2, r0
 8001fc2:	eb41 0303 	adc.w	r3, r1, r3
 8001fc6:	f04f 0000 	mov.w	r0, #0
 8001fca:	f04f 0100 	mov.w	r1, #0
 8001fce:	00d9      	lsls	r1, r3, #3
 8001fd0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001fd4:	00d0      	lsls	r0, r2, #3
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	460b      	mov	r3, r1
 8001fda:	e9c7 2300 	strd	r2, r3, [r7]
  return Time;
 8001fde:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8001fe2:	4610      	mov	r0, r2
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	3708      	adds	r7, #8
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bdb0      	pop	{r4, r5, r7, pc}

08001fec <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b086      	sub	sp, #24
 8001ff0:	af02      	add	r7, sp, #8
 8001ff2:	60f8      	str	r0, [r7, #12]
 8001ff4:	60b9      	str	r1, [r7, #8]
 8001ff6:	607a      	str	r2, [r7, #4]
 8001ff8:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8001ffa:	2205      	movs	r2, #5
 8001ffc:	492b      	ldr	r1, [pc, #172]	; (80020ac <SYSVIEW_AddTask+0xc0>)
 8001ffe:	68b8      	ldr	r0, [r7, #8]
 8002000:	f019 f81e 	bl	801b040 <memcmp>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d04b      	beq.n	80020a2 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800200a:	4b29      	ldr	r3, [pc, #164]	; (80020b0 <SYSVIEW_AddTask+0xc4>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	2b0f      	cmp	r3, #15
 8002010:	d903      	bls.n	800201a <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8002012:	4828      	ldr	r0, [pc, #160]	; (80020b4 <SYSVIEW_AddTask+0xc8>)
 8002014:	f018 ff6e 	bl	801aef4 <SEGGER_SYSVIEW_Warn>
    return;
 8002018:	e044      	b.n	80020a4 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800201a:	4b25      	ldr	r3, [pc, #148]	; (80020b0 <SYSVIEW_AddTask+0xc4>)
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	4926      	ldr	r1, [pc, #152]	; (80020b8 <SYSVIEW_AddTask+0xcc>)
 8002020:	4613      	mov	r3, r2
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	4413      	add	r3, r2
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	440b      	add	r3, r1
 800202a:	68fa      	ldr	r2, [r7, #12]
 800202c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800202e:	4b20      	ldr	r3, [pc, #128]	; (80020b0 <SYSVIEW_AddTask+0xc4>)
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	4921      	ldr	r1, [pc, #132]	; (80020b8 <SYSVIEW_AddTask+0xcc>)
 8002034:	4613      	mov	r3, r2
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	4413      	add	r3, r2
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	440b      	add	r3, r1
 800203e:	3304      	adds	r3, #4
 8002040:	68ba      	ldr	r2, [r7, #8]
 8002042:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8002044:	4b1a      	ldr	r3, [pc, #104]	; (80020b0 <SYSVIEW_AddTask+0xc4>)
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	491b      	ldr	r1, [pc, #108]	; (80020b8 <SYSVIEW_AddTask+0xcc>)
 800204a:	4613      	mov	r3, r2
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	4413      	add	r3, r2
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	440b      	add	r3, r1
 8002054:	3308      	adds	r3, #8
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 800205a:	4b15      	ldr	r3, [pc, #84]	; (80020b0 <SYSVIEW_AddTask+0xc4>)
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	4916      	ldr	r1, [pc, #88]	; (80020b8 <SYSVIEW_AddTask+0xcc>)
 8002060:	4613      	mov	r3, r2
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	4413      	add	r3, r2
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	440b      	add	r3, r1
 800206a:	330c      	adds	r3, #12
 800206c:	683a      	ldr	r2, [r7, #0]
 800206e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8002070:	4b0f      	ldr	r3, [pc, #60]	; (80020b0 <SYSVIEW_AddTask+0xc4>)
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	4910      	ldr	r1, [pc, #64]	; (80020b8 <SYSVIEW_AddTask+0xcc>)
 8002076:	4613      	mov	r3, r2
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	4413      	add	r3, r2
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	440b      	add	r3, r1
 8002080:	3310      	adds	r3, #16
 8002082:	69ba      	ldr	r2, [r7, #24]
 8002084:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8002086:	4b0a      	ldr	r3, [pc, #40]	; (80020b0 <SYSVIEW_AddTask+0xc4>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	3301      	adds	r3, #1
 800208c:	4a08      	ldr	r2, [pc, #32]	; (80020b0 <SYSVIEW_AddTask+0xc4>)
 800208e:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8002090:	69bb      	ldr	r3, [r7, #24]
 8002092:	9300      	str	r3, [sp, #0]
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	68b9      	ldr	r1, [r7, #8]
 800209a:	68f8      	ldr	r0, [r7, #12]
 800209c:	f000 f80e 	bl	80020bc <SYSVIEW_SendTaskInfo>
 80020a0:	e000      	b.n	80020a4 <SYSVIEW_AddTask+0xb8>
    return;
 80020a2:	bf00      	nop

}
 80020a4:	3710      	adds	r7, #16
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	0801bca4 	.word	0x0801bca4
 80020b0:	200017e8 	.word	0x200017e8
 80020b4:	0801bcac 	.word	0x0801bcac
 80020b8:	200016a8 	.word	0x200016a8

080020bc <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80020bc:	b580      	push	{r7, lr}
 80020be:	b08a      	sub	sp, #40	; 0x28
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	60f8      	str	r0, [r7, #12]
 80020c4:	60b9      	str	r1, [r7, #8]
 80020c6:	607a      	str	r2, [r7, #4]
 80020c8:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80020ca:	f107 0314 	add.w	r3, r7, #20
 80020ce:	2214      	movs	r2, #20
 80020d0:	2100      	movs	r1, #0
 80020d2:	4618      	mov	r0, r3
 80020d4:	f018 ffd0 	bl	801b078 <memset>
  TaskInfo.TaskID     = TaskID;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 80020e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020ea:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80020ec:	f107 0314 	add.w	r3, r7, #20
 80020f0:	4618      	mov	r0, r3
 80020f2:	f018 fbe3 	bl	801a8bc <SEGGER_SYSVIEW_SendTaskInfo>
}
 80020f6:	bf00      	nop
 80020f8:	3728      	adds	r7, #40	; 0x28
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
	...

08002100 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002106:	463b      	mov	r3, r7
 8002108:	2200      	movs	r2, #0
 800210a:	601a      	str	r2, [r3, #0]
 800210c:	605a      	str	r2, [r3, #4]
 800210e:	609a      	str	r2, [r3, #8]
 8002110:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002112:	4b37      	ldr	r3, [pc, #220]	; (80021f0 <MX_ADC1_Init+0xf0>)
 8002114:	4a37      	ldr	r2, [pc, #220]	; (80021f4 <MX_ADC1_Init+0xf4>)
 8002116:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002118:	4b35      	ldr	r3, [pc, #212]	; (80021f0 <MX_ADC1_Init+0xf0>)
 800211a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800211e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002120:	4b33      	ldr	r3, [pc, #204]	; (80021f0 <MX_ADC1_Init+0xf0>)
 8002122:	2200      	movs	r2, #0
 8002124:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002126:	4b32      	ldr	r3, [pc, #200]	; (80021f0 <MX_ADC1_Init+0xf0>)
 8002128:	2201      	movs	r2, #1
 800212a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800212c:	4b30      	ldr	r3, [pc, #192]	; (80021f0 <MX_ADC1_Init+0xf0>)
 800212e:	2200      	movs	r2, #0
 8002130:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002132:	4b2f      	ldr	r3, [pc, #188]	; (80021f0 <MX_ADC1_Init+0xf0>)
 8002134:	2200      	movs	r2, #0
 8002136:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800213a:	4b2d      	ldr	r3, [pc, #180]	; (80021f0 <MX_ADC1_Init+0xf0>)
 800213c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002140:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8002142:	4b2b      	ldr	r3, [pc, #172]	; (80021f0 <MX_ADC1_Init+0xf0>)
 8002144:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002148:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800214a:	4b29      	ldr	r3, [pc, #164]	; (80021f0 <MX_ADC1_Init+0xf0>)
 800214c:	2200      	movs	r2, #0
 800214e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8002150:	4b27      	ldr	r3, [pc, #156]	; (80021f0 <MX_ADC1_Init+0xf0>)
 8002152:	2204      	movs	r2, #4
 8002154:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002156:	4b26      	ldr	r3, [pc, #152]	; (80021f0 <MX_ADC1_Init+0xf0>)
 8002158:	2200      	movs	r2, #0
 800215a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800215e:	4b24      	ldr	r3, [pc, #144]	; (80021f0 <MX_ADC1_Init+0xf0>)
 8002160:	2201      	movs	r2, #1
 8002162:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002164:	4822      	ldr	r0, [pc, #136]	; (80021f0 <MX_ADC1_Init+0xf0>)
 8002166:	f00f fb9d 	bl	80118a4 <HAL_ADC_Init>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d001      	beq.n	8002174 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8002170:	f001 ffde 	bl	8004130 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002174:	2301      	movs	r3, #1
 8002176:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002178:	2301      	movs	r3, #1
 800217a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 800217c:	2302      	movs	r3, #2
 800217e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002180:	463b      	mov	r3, r7
 8002182:	4619      	mov	r1, r3
 8002184:	481a      	ldr	r0, [pc, #104]	; (80021f0 <MX_ADC1_Init+0xf0>)
 8002186:	f00f fe3f 	bl	8011e08 <HAL_ADC_ConfigChannel>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8002190:	f001 ffce 	bl	8004130 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002194:	2302      	movs	r3, #2
 8002196:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8002198:	2302      	movs	r3, #2
 800219a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800219c:	463b      	mov	r3, r7
 800219e:	4619      	mov	r1, r3
 80021a0:	4813      	ldr	r0, [pc, #76]	; (80021f0 <MX_ADC1_Init+0xf0>)
 80021a2:	f00f fe31 	bl	8011e08 <HAL_ADC_ConfigChannel>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d001      	beq.n	80021b0 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 80021ac:	f001 ffc0 	bl	8004130 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80021b0:	2303      	movs	r3, #3
 80021b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80021b4:	2303      	movs	r3, #3
 80021b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80021b8:	463b      	mov	r3, r7
 80021ba:	4619      	mov	r1, r3
 80021bc:	480c      	ldr	r0, [pc, #48]	; (80021f0 <MX_ADC1_Init+0xf0>)
 80021be:	f00f fe23 	bl	8011e08 <HAL_ADC_ConfigChannel>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d001      	beq.n	80021cc <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 80021c8:	f001 ffb2 	bl	8004130 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80021cc:	2304      	movs	r3, #4
 80021ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80021d0:	2304      	movs	r3, #4
 80021d2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80021d4:	463b      	mov	r3, r7
 80021d6:	4619      	mov	r1, r3
 80021d8:	4805      	ldr	r0, [pc, #20]	; (80021f0 <MX_ADC1_Init+0xf0>)
 80021da:	f00f fe15 	bl	8011e08 <HAL_ADC_ConfigChannel>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d001      	beq.n	80021e8 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 80021e4:	f001 ffa4 	bl	8004130 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80021e8:	bf00      	nop
 80021ea:	3710      	adds	r7, #16
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	2001b600 	.word	0x2001b600
 80021f4:	40012000 	.word	0x40012000

080021f8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b08a      	sub	sp, #40	; 0x28
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002200:	f107 0314 	add.w	r3, r7, #20
 8002204:	2200      	movs	r2, #0
 8002206:	601a      	str	r2, [r3, #0]
 8002208:	605a      	str	r2, [r3, #4]
 800220a:	609a      	str	r2, [r3, #8]
 800220c:	60da      	str	r2, [r3, #12]
 800220e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a33      	ldr	r2, [pc, #204]	; (80022e4 <HAL_ADC_MspInit+0xec>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d15f      	bne.n	80022da <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800221a:	2300      	movs	r3, #0
 800221c:	613b      	str	r3, [r7, #16]
 800221e:	4b32      	ldr	r3, [pc, #200]	; (80022e8 <HAL_ADC_MspInit+0xf0>)
 8002220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002222:	4a31      	ldr	r2, [pc, #196]	; (80022e8 <HAL_ADC_MspInit+0xf0>)
 8002224:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002228:	6453      	str	r3, [r2, #68]	; 0x44
 800222a:	4b2f      	ldr	r3, [pc, #188]	; (80022e8 <HAL_ADC_MspInit+0xf0>)
 800222c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800222e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002232:	613b      	str	r3, [r7, #16]
 8002234:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002236:	2300      	movs	r3, #0
 8002238:	60fb      	str	r3, [r7, #12]
 800223a:	4b2b      	ldr	r3, [pc, #172]	; (80022e8 <HAL_ADC_MspInit+0xf0>)
 800223c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223e:	4a2a      	ldr	r2, [pc, #168]	; (80022e8 <HAL_ADC_MspInit+0xf0>)
 8002240:	f043 0301 	orr.w	r3, r3, #1
 8002244:	6313      	str	r3, [r2, #48]	; 0x30
 8002246:	4b28      	ldr	r3, [pc, #160]	; (80022e8 <HAL_ADC_MspInit+0xf0>)
 8002248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224a:	f003 0301 	and.w	r3, r3, #1
 800224e:	60fb      	str	r3, [r7, #12]
 8002250:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = precharge_resistor_temperature_Pin|fuse_resistor_temperature_Pin|aux_temp1_Pin|aux_temp2_Pin;
 8002252:	231e      	movs	r3, #30
 8002254:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002256:	2303      	movs	r3, #3
 8002258:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225a:	2300      	movs	r3, #0
 800225c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800225e:	f107 0314 	add.w	r3, r7, #20
 8002262:	4619      	mov	r1, r3
 8002264:	4821      	ldr	r0, [pc, #132]	; (80022ec <HAL_ADC_MspInit+0xf4>)
 8002266:	f011 f8fd 	bl	8013464 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800226a:	4b21      	ldr	r3, [pc, #132]	; (80022f0 <HAL_ADC_MspInit+0xf8>)
 800226c:	4a21      	ldr	r2, [pc, #132]	; (80022f4 <HAL_ADC_MspInit+0xfc>)
 800226e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002270:	4b1f      	ldr	r3, [pc, #124]	; (80022f0 <HAL_ADC_MspInit+0xf8>)
 8002272:	2200      	movs	r2, #0
 8002274:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002276:	4b1e      	ldr	r3, [pc, #120]	; (80022f0 <HAL_ADC_MspInit+0xf8>)
 8002278:	2200      	movs	r2, #0
 800227a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800227c:	4b1c      	ldr	r3, [pc, #112]	; (80022f0 <HAL_ADC_MspInit+0xf8>)
 800227e:	2200      	movs	r2, #0
 8002280:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002282:	4b1b      	ldr	r3, [pc, #108]	; (80022f0 <HAL_ADC_MspInit+0xf8>)
 8002284:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002288:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800228a:	4b19      	ldr	r3, [pc, #100]	; (80022f0 <HAL_ADC_MspInit+0xf8>)
 800228c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002290:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002292:	4b17      	ldr	r3, [pc, #92]	; (80022f0 <HAL_ADC_MspInit+0xf8>)
 8002294:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002298:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800229a:	4b15      	ldr	r3, [pc, #84]	; (80022f0 <HAL_ADC_MspInit+0xf8>)
 800229c:	2200      	movs	r2, #0
 800229e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80022a0:	4b13      	ldr	r3, [pc, #76]	; (80022f0 <HAL_ADC_MspInit+0xf8>)
 80022a2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80022a6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80022a8:	4b11      	ldr	r3, [pc, #68]	; (80022f0 <HAL_ADC_MspInit+0xf8>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80022ae:	4810      	ldr	r0, [pc, #64]	; (80022f0 <HAL_ADC_MspInit+0xf8>)
 80022b0:	f010 fd68 	bl	8012d84 <HAL_DMA_Init>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80022ba:	f001 ff39 	bl	8004130 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a0b      	ldr	r2, [pc, #44]	; (80022f0 <HAL_ADC_MspInit+0xf8>)
 80022c2:	639a      	str	r2, [r3, #56]	; 0x38
 80022c4:	4a0a      	ldr	r2, [pc, #40]	; (80022f0 <HAL_ADC_MspInit+0xf8>)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 80022ca:	2200      	movs	r2, #0
 80022cc:	2105      	movs	r1, #5
 80022ce:	2012      	movs	r0, #18
 80022d0:	f010 fd2e 	bl	8012d30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80022d4:	2012      	movs	r0, #18
 80022d6:	f010 fd47 	bl	8012d68 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80022da:	bf00      	nop
 80022dc:	3728      	adds	r7, #40	; 0x28
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	40012000 	.word	0x40012000
 80022e8:	40023800 	.word	0x40023800
 80022ec:	40020000 	.word	0x40020000
 80022f0:	2001b648 	.word	0x2001b648
 80022f4:	40026410 	.word	0x40026410

080022f8 <interpret_ADC_buffer>:
/* USER CODE BEGIN 1 */

uint16_t ADC_FLAG = 1;

void interpret_ADC_buffer(temperatures_t *temperatures,
		uint16_t *adcBuffer, uint8_t L) {
 80022f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80022fc:	b08e      	sub	sp, #56	; 0x38
 80022fe:	af00      	add	r7, sp, #0
 8002300:	60f8      	str	r0, [r7, #12]
 8002302:	60b9      	str	r1, [r7, #8]
 8002304:	4613      	mov	r3, r2
 8002306:	71fb      	strb	r3, [r7, #7]
	uint16_t i, j;
	float adcAverageBuffer[4];

	float beta = 3500;
 8002308:	4bd3      	ldr	r3, [pc, #844]	; (8002658 <interpret_ADC_buffer+0x360>)
 800230a:	633b      	str	r3, [r7, #48]	; 0x30
	float temp = 25 + 273.15;
 800230c:	4bd3      	ldr	r3, [pc, #844]	; (800265c <interpret_ADC_buffer+0x364>)
 800230e:	62fb      	str	r3, [r7, #44]	; 0x2c
	float R0 = 10000 * exp(-beta / temp);
 8002310:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002314:	eeb1 7a67 	vneg.f32	s14, s15
 8002318:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800231c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002320:	ee16 0a90 	vmov	r0, s13
 8002324:	f7fe f902 	bl	800052c <__aeabi_f2d>
 8002328:	4602      	mov	r2, r0
 800232a:	460b      	mov	r3, r1
 800232c:	ec43 2b10 	vmov	d0, r2, r3
 8002330:	f018 ffc2 	bl	801b2b8 <exp>
 8002334:	ec51 0b10 	vmov	r0, r1, d0
 8002338:	a3c3      	add	r3, pc, #780	; (adr r3, 8002648 <interpret_ADC_buffer+0x350>)
 800233a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800233e:	f7fe f94d 	bl	80005dc <__aeabi_dmul>
 8002342:	4602      	mov	r2, r0
 8002344:	460b      	mov	r3, r1
 8002346:	4610      	mov	r0, r2
 8002348:	4619      	mov	r1, r3
 800234a:	f7fe fc3f 	bl	8000bcc <__aeabi_d2f>
 800234e:	4603      	mov	r3, r0
 8002350:	62bb      	str	r3, [r7, #40]	; 0x28
	float R = 10000;
 8002352:	4bc3      	ldr	r3, [pc, #780]	; (8002660 <interpret_ADC_buffer+0x368>)
 8002354:	627b      	str	r3, [r7, #36]	; 0x24
	float resolution = pow(2, 12) - 1;
 8002356:	4bc3      	ldr	r3, [pc, #780]	; (8002664 <interpret_ADC_buffer+0x36c>)
 8002358:	623b      	str	r3, [r7, #32]

	for (i = 0; i < 4; i++) {
 800235a:	2300      	movs	r3, #0
 800235c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800235e:	e063      	b.n	8002428 <interpret_ADC_buffer+0x130>
		adcAverageBuffer[i] = 0;
 8002360:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002368:	4413      	add	r3, r2
 800236a:	3b28      	subs	r3, #40	; 0x28
 800236c:	f04f 0200 	mov.w	r2, #0
 8002370:	601a      	str	r2, [r3, #0]
		for (j = 0; j < L; j++) {
 8002372:	2300      	movs	r3, #0
 8002374:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002376:	e020      	b.n	80023ba <interpret_ADC_buffer+0xc2>
			adcAverageBuffer[i] += adcBuffer[4 * j + i];
 8002378:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002380:	4413      	add	r3, r2
 8002382:	3b28      	subs	r3, #40	; 0x28
 8002384:	ed93 7a00 	vldr	s14, [r3]
 8002388:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800238a:	009a      	lsls	r2, r3, #2
 800238c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800238e:	4413      	add	r3, r2
 8002390:	005b      	lsls	r3, r3, #1
 8002392:	68ba      	ldr	r2, [r7, #8]
 8002394:	4413      	add	r3, r2
 8002396:	881b      	ldrh	r3, [r3, #0]
 8002398:	ee07 3a90 	vmov	s15, r3
 800239c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023a0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80023a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80023ac:	4413      	add	r3, r2
 80023ae:	3b28      	subs	r3, #40	; 0x28
 80023b0:	edc3 7a00 	vstr	s15, [r3]
		for (j = 0; j < L; j++) {
 80023b4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80023b6:	3301      	adds	r3, #1
 80023b8:	86bb      	strh	r3, [r7, #52]	; 0x34
 80023ba:	79fb      	ldrb	r3, [r7, #7]
 80023bc:	b29b      	uxth	r3, r3
 80023be:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d3d9      	bcc.n	8002378 <interpret_ADC_buffer+0x80>
		}
		adcAverageBuffer[i] /= L;
 80023c4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80023cc:	4413      	add	r3, r2
 80023ce:	3b28      	subs	r3, #40	; 0x28
 80023d0:	edd3 6a00 	vldr	s13, [r3]
 80023d4:	79fb      	ldrb	r3, [r7, #7]
 80023d6:	ee07 3a90 	vmov	s15, r3
 80023da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023de:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80023e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80023ea:	4413      	add	r3, r2
 80023ec:	3b28      	subs	r3, #40	; 0x28
 80023ee:	edc3 7a00 	vstr	s15, [r3]

		/* The adc value shouldn't be negative, nor should it be 0 */
		if (adcAverageBuffer[i] < 0.25) {
 80023f2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80023fa:	4413      	add	r3, r2
 80023fc:	3b28      	subs	r3, #40	; 0x28
 80023fe:	edd3 7a00 	vldr	s15, [r3]
 8002402:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8002406:	eef4 7ac7 	vcmpe.f32	s15, s14
 800240a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800240e:	d508      	bpl.n	8002422 <interpret_ADC_buffer+0x12a>
			adcAverageBuffer[i] = 1;
 8002410:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002418:	4413      	add	r3, r2
 800241a:	3b28      	subs	r3, #40	; 0x28
 800241c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002420:	601a      	str	r2, [r3, #0]
	for (i = 0; i < 4; i++) {
 8002422:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002424:	3301      	adds	r3, #1
 8002426:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002428:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800242a:	2b03      	cmp	r3, #3
 800242c:	d998      	bls.n	8002360 <interpret_ADC_buffer+0x68>
	}
	/* temperature = beta / (log(R0 * ( resolution / adcAverageBuffer[i] - 1) ) - log(R)); */
	/* v/vt = ((2^n - 1)*v/vref)/((2^n - 1)*vt/vref) = ((2^n - 1)*v/vref)/adcAverageBuffer[i] */
	/* Assume v = vref, n = 12 */
	temperatures->precharge_resistor = beta
			/ (log(R0 * (resolution / adcAverageBuffer[0] - 1)) - log(R))
 800242e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002430:	f7fe f87c 	bl	800052c <__aeabi_f2d>
 8002434:	4604      	mov	r4, r0
 8002436:	460d      	mov	r5, r1
 8002438:	ed97 7a04 	vldr	s14, [r7, #16]
 800243c:	edd7 6a08 	vldr	s13, [r7, #32]
 8002440:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002444:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002448:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800244c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002450:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002454:	ee17 0a90 	vmov	r0, s15
 8002458:	f7fe f868 	bl	800052c <__aeabi_f2d>
 800245c:	4602      	mov	r2, r0
 800245e:	460b      	mov	r3, r1
 8002460:	ec43 2b10 	vmov	d0, r2, r3
 8002464:	f018 ff78 	bl	801b358 <log>
 8002468:	ec59 8b10 	vmov	r8, r9, d0
 800246c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800246e:	f7fe f85d 	bl	800052c <__aeabi_f2d>
 8002472:	4602      	mov	r2, r0
 8002474:	460b      	mov	r3, r1
 8002476:	ec43 2b10 	vmov	d0, r2, r3
 800247a:	f018 ff6d 	bl	801b358 <log>
 800247e:	ec53 2b10 	vmov	r2, r3, d0
 8002482:	4640      	mov	r0, r8
 8002484:	4649      	mov	r1, r9
 8002486:	f7fd fef1 	bl	800026c <__aeabi_dsub>
 800248a:	4602      	mov	r2, r0
 800248c:	460b      	mov	r3, r1
 800248e:	4620      	mov	r0, r4
 8002490:	4629      	mov	r1, r5
 8002492:	f7fe f9cd 	bl	8000830 <__aeabi_ddiv>
 8002496:	4602      	mov	r2, r0
 8002498:	460b      	mov	r3, r1
 800249a:	4610      	mov	r0, r2
 800249c:	4619      	mov	r1, r3
			- 273.15;
 800249e:	a36c      	add	r3, pc, #432	; (adr r3, 8002650 <interpret_ADC_buffer+0x358>)
 80024a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024a4:	f7fd fee2 	bl	800026c <__aeabi_dsub>
 80024a8:	4602      	mov	r2, r0
 80024aa:	460b      	mov	r3, r1
	temperatures->precharge_resistor = beta
 80024ac:	68f9      	ldr	r1, [r7, #12]
 80024ae:	e9c1 2300 	strd	r2, r3, [r1]
	temperatures->fuse = beta
			/ (log(R0 * (resolution / adcAverageBuffer[1] - 1)) - log(R))
 80024b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80024b4:	f7fe f83a 	bl	800052c <__aeabi_f2d>
 80024b8:	4604      	mov	r4, r0
 80024ba:	460d      	mov	r5, r1
 80024bc:	ed97 7a05 	vldr	s14, [r7, #20]
 80024c0:	edd7 6a08 	vldr	s13, [r7, #32]
 80024c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80024cc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80024d0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80024d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024d8:	ee17 0a90 	vmov	r0, s15
 80024dc:	f7fe f826 	bl	800052c <__aeabi_f2d>
 80024e0:	4602      	mov	r2, r0
 80024e2:	460b      	mov	r3, r1
 80024e4:	ec43 2b10 	vmov	d0, r2, r3
 80024e8:	f018 ff36 	bl	801b358 <log>
 80024ec:	ec59 8b10 	vmov	r8, r9, d0
 80024f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80024f2:	f7fe f81b 	bl	800052c <__aeabi_f2d>
 80024f6:	4602      	mov	r2, r0
 80024f8:	460b      	mov	r3, r1
 80024fa:	ec43 2b10 	vmov	d0, r2, r3
 80024fe:	f018 ff2b 	bl	801b358 <log>
 8002502:	ec53 2b10 	vmov	r2, r3, d0
 8002506:	4640      	mov	r0, r8
 8002508:	4649      	mov	r1, r9
 800250a:	f7fd feaf 	bl	800026c <__aeabi_dsub>
 800250e:	4602      	mov	r2, r0
 8002510:	460b      	mov	r3, r1
 8002512:	4620      	mov	r0, r4
 8002514:	4629      	mov	r1, r5
 8002516:	f7fe f98b 	bl	8000830 <__aeabi_ddiv>
 800251a:	4602      	mov	r2, r0
 800251c:	460b      	mov	r3, r1
 800251e:	4610      	mov	r0, r2
 8002520:	4619      	mov	r1, r3
			- 273.15;
 8002522:	a34b      	add	r3, pc, #300	; (adr r3, 8002650 <interpret_ADC_buffer+0x358>)
 8002524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002528:	f7fd fea0 	bl	800026c <__aeabi_dsub>
 800252c:	4602      	mov	r2, r0
 800252e:	460b      	mov	r3, r1
	temperatures->fuse = beta
 8002530:	68f9      	ldr	r1, [r7, #12]
 8002532:	e9c1 2302 	strd	r2, r3, [r1, #8]
	temperatures->aux_1 = beta
			/ (log(R0 * (resolution / adcAverageBuffer[2] - 1)) - log(R))
 8002536:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002538:	f7fd fff8 	bl	800052c <__aeabi_f2d>
 800253c:	4604      	mov	r4, r0
 800253e:	460d      	mov	r5, r1
 8002540:	ed97 7a06 	vldr	s14, [r7, #24]
 8002544:	edd7 6a08 	vldr	s13, [r7, #32]
 8002548:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800254c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002550:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002554:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002558:	ee67 7a27 	vmul.f32	s15, s14, s15
 800255c:	ee17 0a90 	vmov	r0, s15
 8002560:	f7fd ffe4 	bl	800052c <__aeabi_f2d>
 8002564:	4602      	mov	r2, r0
 8002566:	460b      	mov	r3, r1
 8002568:	ec43 2b10 	vmov	d0, r2, r3
 800256c:	f018 fef4 	bl	801b358 <log>
 8002570:	ec59 8b10 	vmov	r8, r9, d0
 8002574:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002576:	f7fd ffd9 	bl	800052c <__aeabi_f2d>
 800257a:	4602      	mov	r2, r0
 800257c:	460b      	mov	r3, r1
 800257e:	ec43 2b10 	vmov	d0, r2, r3
 8002582:	f018 fee9 	bl	801b358 <log>
 8002586:	ec53 2b10 	vmov	r2, r3, d0
 800258a:	4640      	mov	r0, r8
 800258c:	4649      	mov	r1, r9
 800258e:	f7fd fe6d 	bl	800026c <__aeabi_dsub>
 8002592:	4602      	mov	r2, r0
 8002594:	460b      	mov	r3, r1
 8002596:	4620      	mov	r0, r4
 8002598:	4629      	mov	r1, r5
 800259a:	f7fe f949 	bl	8000830 <__aeabi_ddiv>
 800259e:	4602      	mov	r2, r0
 80025a0:	460b      	mov	r3, r1
 80025a2:	4610      	mov	r0, r2
 80025a4:	4619      	mov	r1, r3
			- 273.15;
 80025a6:	a32a      	add	r3, pc, #168	; (adr r3, 8002650 <interpret_ADC_buffer+0x358>)
 80025a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ac:	f7fd fe5e 	bl	800026c <__aeabi_dsub>
 80025b0:	4602      	mov	r2, r0
 80025b2:	460b      	mov	r3, r1
	temperatures->aux_1 = beta
 80025b4:	68f9      	ldr	r1, [r7, #12]
 80025b6:	e9c1 2304 	strd	r2, r3, [r1, #16]
	temperatures->aux_2 = beta
			/ (log(R0 * (resolution / adcAverageBuffer[3] - 1)) - log(R))
 80025ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80025bc:	f7fd ffb6 	bl	800052c <__aeabi_f2d>
 80025c0:	4604      	mov	r4, r0
 80025c2:	460d      	mov	r5, r1
 80025c4:	ed97 7a07 	vldr	s14, [r7, #28]
 80025c8:	edd7 6a08 	vldr	s13, [r7, #32]
 80025cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80025d4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80025d8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80025dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025e0:	ee17 0a90 	vmov	r0, s15
 80025e4:	f7fd ffa2 	bl	800052c <__aeabi_f2d>
 80025e8:	4602      	mov	r2, r0
 80025ea:	460b      	mov	r3, r1
 80025ec:	ec43 2b10 	vmov	d0, r2, r3
 80025f0:	f018 feb2 	bl	801b358 <log>
 80025f4:	ec59 8b10 	vmov	r8, r9, d0
 80025f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80025fa:	f7fd ff97 	bl	800052c <__aeabi_f2d>
 80025fe:	4602      	mov	r2, r0
 8002600:	460b      	mov	r3, r1
 8002602:	ec43 2b10 	vmov	d0, r2, r3
 8002606:	f018 fea7 	bl	801b358 <log>
 800260a:	ec53 2b10 	vmov	r2, r3, d0
 800260e:	4640      	mov	r0, r8
 8002610:	4649      	mov	r1, r9
 8002612:	f7fd fe2b 	bl	800026c <__aeabi_dsub>
 8002616:	4602      	mov	r2, r0
 8002618:	460b      	mov	r3, r1
 800261a:	4620      	mov	r0, r4
 800261c:	4629      	mov	r1, r5
 800261e:	f7fe f907 	bl	8000830 <__aeabi_ddiv>
 8002622:	4602      	mov	r2, r0
 8002624:	460b      	mov	r3, r1
 8002626:	4610      	mov	r0, r2
 8002628:	4619      	mov	r1, r3
			- 273.15;
 800262a:	a309      	add	r3, pc, #36	; (adr r3, 8002650 <interpret_ADC_buffer+0x358>)
 800262c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002630:	f7fd fe1c 	bl	800026c <__aeabi_dsub>
 8002634:	4602      	mov	r2, r0
 8002636:	460b      	mov	r3, r1
	temperatures->aux_2 = beta
 8002638:	68f9      	ldr	r1, [r7, #12]
 800263a:	e9c1 2306 	strd	r2, r3, [r1, #24]

}
 800263e:	bf00      	nop
 8002640:	3738      	adds	r7, #56	; 0x38
 8002642:	46bd      	mov	sp, r7
 8002644:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002648:	00000000 	.word	0x00000000
 800264c:	40c38800 	.word	0x40c38800
 8002650:	66666666 	.word	0x66666666
 8002654:	40711266 	.word	0x40711266
 8002658:	455ac000 	.word	0x455ac000
 800265c:	43951333 	.word	0x43951333
 8002660:	461c4000 	.word	0x461c4000
 8002664:	457ff000 	.word	0x457ff000

08002668 <ADC_initialize>:

void ADC_initialize(TIM_HandleTypeDef* htim) {
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
	htim->Instance->ARR = 65535 / 1000; // 100 Hz sample rate
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2241      	movs	r2, #65	; 0x41
 8002676:	62da      	str	r2, [r3, #44]	; 0x2c
	HAL_TIM_Base_Start(htim);
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f012 fb17 	bl	8014cac <HAL_TIM_Base_Start>
	ADC_FLAG = 1;
 800267e:	4b03      	ldr	r3, [pc, #12]	; (800268c <ADC_initialize+0x24>)
 8002680:	2201      	movs	r2, #1
 8002682:	801a      	strh	r2, [r3, #0]
}
 8002684:	bf00      	nop
 8002686:	3708      	adds	r7, #8
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	20000000 	.word	0x20000000

08002690 <ADC_step>:

void ADC_step(uint32_t *buf, uint16_t len) {
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	460b      	mov	r3, r1
 800269a:	807b      	strh	r3, [r7, #2]
	if (ADC_FLAG == 1) {
 800269c:	4b08      	ldr	r3, [pc, #32]	; (80026c0 <ADC_step+0x30>)
 800269e:	881b      	ldrh	r3, [r3, #0]
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d108      	bne.n	80026b6 <ADC_step+0x26>
		ADC_FLAG = 0;
 80026a4:	4b06      	ldr	r3, [pc, #24]	; (80026c0 <ADC_step+0x30>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	801a      	strh	r2, [r3, #0]
		HAL_ADC_Start_DMA(&hadc1, buf, len);
 80026aa:	887b      	ldrh	r3, [r7, #2]
 80026ac:	461a      	mov	r2, r3
 80026ae:	6879      	ldr	r1, [r7, #4]
 80026b0:	4804      	ldr	r0, [pc, #16]	; (80026c4 <ADC_step+0x34>)
 80026b2:	f00f fa7b 	bl	8011bac <HAL_ADC_Start_DMA>
	}
}
 80026b6:	bf00      	nop
 80026b8:	3708      	adds	r7, #8
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	20000000 	.word	0x20000000
 80026c4:	2001b600 	.word	0x2001b600

080026c8 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
	ADC_FLAG = 1;
 80026d0:	4b04      	ldr	r3, [pc, #16]	; (80026e4 <HAL_ADC_ConvCpltCallback+0x1c>)
 80026d2:	2201      	movs	r2, #1
 80026d4:	801a      	strh	r2, [r3, #0]

}
 80026d6:	bf00      	nop
 80026d8:	370c      	adds	r7, #12
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop
 80026e4:	20000000 	.word	0x20000000

080026e8 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80026ec:	4b17      	ldr	r3, [pc, #92]	; (800274c <MX_CAN1_Init+0x64>)
 80026ee:	4a18      	ldr	r2, [pc, #96]	; (8002750 <MX_CAN1_Init+0x68>)
 80026f0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 2;
 80026f2:	4b16      	ldr	r3, [pc, #88]	; (800274c <MX_CAN1_Init+0x64>)
 80026f4:	2202      	movs	r2, #2
 80026f6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80026f8:	4b14      	ldr	r3, [pc, #80]	; (800274c <MX_CAN1_Init+0x64>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80026fe:	4b13      	ldr	r3, [pc, #76]	; (800274c <MX_CAN1_Init+0x64>)
 8002700:	2200      	movs	r2, #0
 8002702:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 8002704:	4b11      	ldr	r3, [pc, #68]	; (800274c <MX_CAN1_Init+0x64>)
 8002706:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 800270a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800270c:	4b0f      	ldr	r3, [pc, #60]	; (800274c <MX_CAN1_Init+0x64>)
 800270e:	2200      	movs	r2, #0
 8002710:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8002712:	4b0e      	ldr	r3, [pc, #56]	; (800274c <MX_CAN1_Init+0x64>)
 8002714:	2200      	movs	r2, #0
 8002716:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8002718:	4b0c      	ldr	r3, [pc, #48]	; (800274c <MX_CAN1_Init+0x64>)
 800271a:	2200      	movs	r2, #0
 800271c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800271e:	4b0b      	ldr	r3, [pc, #44]	; (800274c <MX_CAN1_Init+0x64>)
 8002720:	2200      	movs	r2, #0
 8002722:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8002724:	4b09      	ldr	r3, [pc, #36]	; (800274c <MX_CAN1_Init+0x64>)
 8002726:	2200      	movs	r2, #0
 8002728:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800272a:	4b08      	ldr	r3, [pc, #32]	; (800274c <MX_CAN1_Init+0x64>)
 800272c:	2200      	movs	r2, #0
 800272e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8002730:	4b06      	ldr	r3, [pc, #24]	; (800274c <MX_CAN1_Init+0x64>)
 8002732:	2200      	movs	r2, #0
 8002734:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8002736:	4805      	ldr	r0, [pc, #20]	; (800274c <MX_CAN1_Init+0x64>)
 8002738:	f00f fe10 	bl	801235c <HAL_CAN_Init>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d001      	beq.n	8002746 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8002742:	f001 fcf5 	bl	8004130 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8002746:	bf00      	nop
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	2001b6d0 	.word	0x2001b6d0
 8002750:	40006400 	.word	0x40006400

08002754 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8002758:	4b17      	ldr	r3, [pc, #92]	; (80027b8 <MX_CAN2_Init+0x64>)
 800275a:	4a18      	ldr	r2, [pc, #96]	; (80027bc <MX_CAN2_Init+0x68>)
 800275c:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 4;
 800275e:	4b16      	ldr	r3, [pc, #88]	; (80027b8 <MX_CAN2_Init+0x64>)
 8002760:	2204      	movs	r2, #4
 8002762:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8002764:	4b14      	ldr	r3, [pc, #80]	; (80027b8 <MX_CAN2_Init+0x64>)
 8002766:	2200      	movs	r2, #0
 8002768:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800276a:	4b13      	ldr	r3, [pc, #76]	; (80027b8 <MX_CAN2_Init+0x64>)
 800276c:	2200      	movs	r2, #0
 800276e:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_8TQ;
 8002770:	4b11      	ldr	r3, [pc, #68]	; (80027b8 <MX_CAN2_Init+0x64>)
 8002772:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8002776:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8002778:	4b0f      	ldr	r3, [pc, #60]	; (80027b8 <MX_CAN2_Init+0x64>)
 800277a:	2200      	movs	r2, #0
 800277c:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 800277e:	4b0e      	ldr	r3, [pc, #56]	; (80027b8 <MX_CAN2_Init+0x64>)
 8002780:	2200      	movs	r2, #0
 8002782:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8002784:	4b0c      	ldr	r3, [pc, #48]	; (80027b8 <MX_CAN2_Init+0x64>)
 8002786:	2200      	movs	r2, #0
 8002788:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 800278a:	4b0b      	ldr	r3, [pc, #44]	; (80027b8 <MX_CAN2_Init+0x64>)
 800278c:	2200      	movs	r2, #0
 800278e:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8002790:	4b09      	ldr	r3, [pc, #36]	; (80027b8 <MX_CAN2_Init+0x64>)
 8002792:	2200      	movs	r2, #0
 8002794:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8002796:	4b08      	ldr	r3, [pc, #32]	; (80027b8 <MX_CAN2_Init+0x64>)
 8002798:	2200      	movs	r2, #0
 800279a:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 800279c:	4b06      	ldr	r3, [pc, #24]	; (80027b8 <MX_CAN2_Init+0x64>)
 800279e:	2200      	movs	r2, #0
 80027a0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80027a2:	4805      	ldr	r0, [pc, #20]	; (80027b8 <MX_CAN2_Init+0x64>)
 80027a4:	f00f fdda 	bl	801235c <HAL_CAN_Init>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d001      	beq.n	80027b2 <MX_CAN2_Init+0x5e>
  {
    Error_Handler();
 80027ae:	f001 fcbf 	bl	8004130 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80027b2:	bf00      	nop
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	2001b6a8 	.word	0x2001b6a8
 80027bc:	40006800 	.word	0x40006800

080027c0 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b08c      	sub	sp, #48	; 0x30
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027c8:	f107 031c 	add.w	r3, r7, #28
 80027cc:	2200      	movs	r2, #0
 80027ce:	601a      	str	r2, [r3, #0]
 80027d0:	605a      	str	r2, [r3, #4]
 80027d2:	609a      	str	r2, [r3, #8]
 80027d4:	60da      	str	r2, [r3, #12]
 80027d6:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a5b      	ldr	r2, [pc, #364]	; (800294c <HAL_CAN_MspInit+0x18c>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d14e      	bne.n	8002880 <HAL_CAN_MspInit+0xc0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80027e2:	4b5b      	ldr	r3, [pc, #364]	; (8002950 <HAL_CAN_MspInit+0x190>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	3301      	adds	r3, #1
 80027e8:	4a59      	ldr	r2, [pc, #356]	; (8002950 <HAL_CAN_MspInit+0x190>)
 80027ea:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80027ec:	4b58      	ldr	r3, [pc, #352]	; (8002950 <HAL_CAN_MspInit+0x190>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d10d      	bne.n	8002810 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80027f4:	2300      	movs	r3, #0
 80027f6:	61bb      	str	r3, [r7, #24]
 80027f8:	4b56      	ldr	r3, [pc, #344]	; (8002954 <HAL_CAN_MspInit+0x194>)
 80027fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fc:	4a55      	ldr	r2, [pc, #340]	; (8002954 <HAL_CAN_MspInit+0x194>)
 80027fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002802:	6413      	str	r3, [r2, #64]	; 0x40
 8002804:	4b53      	ldr	r3, [pc, #332]	; (8002954 <HAL_CAN_MspInit+0x194>)
 8002806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002808:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800280c:	61bb      	str	r3, [r7, #24]
 800280e:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002810:	2300      	movs	r3, #0
 8002812:	617b      	str	r3, [r7, #20]
 8002814:	4b4f      	ldr	r3, [pc, #316]	; (8002954 <HAL_CAN_MspInit+0x194>)
 8002816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002818:	4a4e      	ldr	r2, [pc, #312]	; (8002954 <HAL_CAN_MspInit+0x194>)
 800281a:	f043 0301 	orr.w	r3, r3, #1
 800281e:	6313      	str	r3, [r2, #48]	; 0x30
 8002820:	4b4c      	ldr	r3, [pc, #304]	; (8002954 <HAL_CAN_MspInit+0x194>)
 8002822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002824:	f003 0301 	and.w	r3, r3, #1
 8002828:	617b      	str	r3, [r7, #20]
 800282a:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800282c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002830:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002832:	2302      	movs	r3, #2
 8002834:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002836:	2300      	movs	r3, #0
 8002838:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800283a:	2303      	movs	r3, #3
 800283c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800283e:	2309      	movs	r3, #9
 8002840:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002842:	f107 031c 	add.w	r3, r7, #28
 8002846:	4619      	mov	r1, r3
 8002848:	4843      	ldr	r0, [pc, #268]	; (8002958 <HAL_CAN_MspInit+0x198>)
 800284a:	f010 fe0b 	bl	8013464 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 800284e:	2200      	movs	r2, #0
 8002850:	2105      	movs	r1, #5
 8002852:	2013      	movs	r0, #19
 8002854:	f010 fa6c 	bl	8012d30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8002858:	2013      	movs	r0, #19
 800285a:	f010 fa85 	bl	8012d68 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 800285e:	2200      	movs	r2, #0
 8002860:	2105      	movs	r1, #5
 8002862:	2014      	movs	r0, #20
 8002864:	f010 fa64 	bl	8012d30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002868:	2014      	movs	r0, #20
 800286a:	f010 fa7d 	bl	8012d68 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 800286e:	2200      	movs	r2, #0
 8002870:	2105      	movs	r1, #5
 8002872:	2015      	movs	r0, #21
 8002874:	f010 fa5c 	bl	8012d30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8002878:	2015      	movs	r0, #21
 800287a:	f010 fa75 	bl	8012d68 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 800287e:	e060      	b.n	8002942 <HAL_CAN_MspInit+0x182>
  else if(canHandle->Instance==CAN2)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a35      	ldr	r2, [pc, #212]	; (800295c <HAL_CAN_MspInit+0x19c>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d15b      	bne.n	8002942 <HAL_CAN_MspInit+0x182>
    __HAL_RCC_CAN2_CLK_ENABLE();
 800288a:	2300      	movs	r3, #0
 800288c:	613b      	str	r3, [r7, #16]
 800288e:	4b31      	ldr	r3, [pc, #196]	; (8002954 <HAL_CAN_MspInit+0x194>)
 8002890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002892:	4a30      	ldr	r2, [pc, #192]	; (8002954 <HAL_CAN_MspInit+0x194>)
 8002894:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002898:	6413      	str	r3, [r2, #64]	; 0x40
 800289a:	4b2e      	ldr	r3, [pc, #184]	; (8002954 <HAL_CAN_MspInit+0x194>)
 800289c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80028a2:	613b      	str	r3, [r7, #16]
 80028a4:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80028a6:	4b2a      	ldr	r3, [pc, #168]	; (8002950 <HAL_CAN_MspInit+0x190>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	3301      	adds	r3, #1
 80028ac:	4a28      	ldr	r2, [pc, #160]	; (8002950 <HAL_CAN_MspInit+0x190>)
 80028ae:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80028b0:	4b27      	ldr	r3, [pc, #156]	; (8002950 <HAL_CAN_MspInit+0x190>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d10d      	bne.n	80028d4 <HAL_CAN_MspInit+0x114>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80028b8:	2300      	movs	r3, #0
 80028ba:	60fb      	str	r3, [r7, #12]
 80028bc:	4b25      	ldr	r3, [pc, #148]	; (8002954 <HAL_CAN_MspInit+0x194>)
 80028be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c0:	4a24      	ldr	r2, [pc, #144]	; (8002954 <HAL_CAN_MspInit+0x194>)
 80028c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80028c6:	6413      	str	r3, [r2, #64]	; 0x40
 80028c8:	4b22      	ldr	r3, [pc, #136]	; (8002954 <HAL_CAN_MspInit+0x194>)
 80028ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028d0:	60fb      	str	r3, [r7, #12]
 80028d2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028d4:	2300      	movs	r3, #0
 80028d6:	60bb      	str	r3, [r7, #8]
 80028d8:	4b1e      	ldr	r3, [pc, #120]	; (8002954 <HAL_CAN_MspInit+0x194>)
 80028da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028dc:	4a1d      	ldr	r2, [pc, #116]	; (8002954 <HAL_CAN_MspInit+0x194>)
 80028de:	f043 0302 	orr.w	r3, r3, #2
 80028e2:	6313      	str	r3, [r2, #48]	; 0x30
 80028e4:	4b1b      	ldr	r3, [pc, #108]	; (8002954 <HAL_CAN_MspInit+0x194>)
 80028e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e8:	f003 0302 	and.w	r3, r3, #2
 80028ec:	60bb      	str	r3, [r7, #8]
 80028ee:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80028f0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80028f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028f6:	2302      	movs	r3, #2
 80028f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028fa:	2300      	movs	r3, #0
 80028fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028fe:	2303      	movs	r3, #3
 8002900:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8002902:	2309      	movs	r3, #9
 8002904:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002906:	f107 031c 	add.w	r3, r7, #28
 800290a:	4619      	mov	r1, r3
 800290c:	4814      	ldr	r0, [pc, #80]	; (8002960 <HAL_CAN_MspInit+0x1a0>)
 800290e:	f010 fda9 	bl	8013464 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 5, 0);
 8002912:	2200      	movs	r2, #0
 8002914:	2105      	movs	r1, #5
 8002916:	203f      	movs	r0, #63	; 0x3f
 8002918:	f010 fa0a 	bl	8012d30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 800291c:	203f      	movs	r0, #63	; 0x3f
 800291e:	f010 fa23 	bl	8012d68 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 8002922:	2200      	movs	r2, #0
 8002924:	2105      	movs	r1, #5
 8002926:	2040      	movs	r0, #64	; 0x40
 8002928:	f010 fa02 	bl	8012d30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 800292c:	2040      	movs	r0, #64	; 0x40
 800292e:	f010 fa1b 	bl	8012d68 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 5, 0);
 8002932:	2200      	movs	r2, #0
 8002934:	2105      	movs	r1, #5
 8002936:	2041      	movs	r0, #65	; 0x41
 8002938:	f010 f9fa 	bl	8012d30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 800293c:	2041      	movs	r0, #65	; 0x41
 800293e:	f010 fa13 	bl	8012d68 <HAL_NVIC_EnableIRQ>
}
 8002942:	bf00      	nop
 8002944:	3730      	adds	r7, #48	; 0x30
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	40006400 	.word	0x40006400
 8002950:	200017ec 	.word	0x200017ec
 8002954:	40023800 	.word	0x40023800
 8002958:	40020000 	.word	0x40020000
 800295c:	40006800 	.word	0x40006800
 8002960:	40020400 	.word	0x40020400

08002964 <swap>:
#define _abc(a,b,c) _abcd(a,b,c,0)_abcd(a,b,c,1)_abcd(a,b,c,2)_abcd(a,b,c,3)_abcd(a,b,c,4)_abcd(a,b,c,5)_abcd(a,b,c,6)
#define _ab(a,b) _abc(a,b,0)_abc(a,b,1)_abc(a,b,2)
#define _a(a) _ab(a,0)_ab(a,1)_ab(a,2)
		_a(0)_a(1) };

void swap(uint8_t g) {
 8002964:	b480      	push	{r7}
 8002966:	b085      	sub	sp, #20
 8002968:	af00      	add	r7, sp, #0
 800296a:	4603      	mov	r3, r0
 800296c:	71fb      	strb	r3, [r7, #7]
	uint8_t _I = sorted_indices[g];
 800296e:	79fb      	ldrb	r3, [r7, #7]
 8002970:	4a0a      	ldr	r2, [pc, #40]	; (800299c <swap+0x38>)
 8002972:	5cd3      	ldrb	r3, [r2, r3]
 8002974:	73fb      	strb	r3, [r7, #15]
	sorted_indices[g] = sorted_indices[g - 1];
 8002976:	79fb      	ldrb	r3, [r7, #7]
 8002978:	1e5a      	subs	r2, r3, #1
 800297a:	79fb      	ldrb	r3, [r7, #7]
 800297c:	4907      	ldr	r1, [pc, #28]	; (800299c <swap+0x38>)
 800297e:	5c89      	ldrb	r1, [r1, r2]
 8002980:	4a06      	ldr	r2, [pc, #24]	; (800299c <swap+0x38>)
 8002982:	54d1      	strb	r1, [r2, r3]
	sorted_indices[g - 1] = _I;
 8002984:	79fb      	ldrb	r3, [r7, #7]
 8002986:	3b01      	subs	r3, #1
 8002988:	4904      	ldr	r1, [pc, #16]	; (800299c <swap+0x38>)
 800298a:	7bfa      	ldrb	r2, [r7, #15]
 800298c:	54ca      	strb	r2, [r1, r3]
}
 800298e:	bf00      	nop
 8002990:	3714      	adds	r7, #20
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	20000004 	.word	0x20000004

080029a0 <compare>:

uint8_t compare(uint8_t g) {
 80029a0:	b590      	push	{r4, r7, lr}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	4603      	mov	r3, r0
 80029a8:	71fb      	strb	r3, [r7, #7]
	return cell_voltages[sorted_indices[g]] < cell_voltages[sorted_indices[g - 1]];
 80029aa:	4b10      	ldr	r3, [pc, #64]	; (80029ec <compare+0x4c>)
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	79fb      	ldrb	r3, [r7, #7]
 80029b0:	490f      	ldr	r1, [pc, #60]	; (80029f0 <compare+0x50>)
 80029b2:	5ccb      	ldrb	r3, [r1, r3]
 80029b4:	00db      	lsls	r3, r3, #3
 80029b6:	4413      	add	r3, r2
 80029b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80029bc:	4b0b      	ldr	r3, [pc, #44]	; (80029ec <compare+0x4c>)
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	79fb      	ldrb	r3, [r7, #7]
 80029c2:	3b01      	subs	r3, #1
 80029c4:	4c0a      	ldr	r4, [pc, #40]	; (80029f0 <compare+0x50>)
 80029c6:	5ce3      	ldrb	r3, [r4, r3]
 80029c8:	00db      	lsls	r3, r3, #3
 80029ca:	4413      	add	r3, r2
 80029cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029d0:	2401      	movs	r4, #1
 80029d2:	f7fe f875 	bl	8000ac0 <__aeabi_dcmplt>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d101      	bne.n	80029e0 <compare+0x40>
 80029dc:	2300      	movs	r3, #0
 80029de:	461c      	mov	r4, r3
 80029e0:	b2e3      	uxtb	r3, r4
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	370c      	adds	r7, #12
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd90      	pop	{r4, r7, pc}
 80029ea:	bf00      	nop
 80029ec:	2001b764 	.word	0x2001b764
 80029f0:	20000004 	.word	0x20000004

080029f4 <gnome_sort>:

void gnome_sort() {
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
	uint8_t gnome = 0;
 80029fa:	2300      	movs	r3, #0
 80029fc:	71fb      	strb	r3, [r7, #7]
	while (gnome < 126) {
 80029fe:	e014      	b.n	8002a2a <gnome_sort+0x36>
		if ((gnome == 0) || compare(gnome)) {
 8002a00:	79fb      	ldrb	r3, [r7, #7]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d006      	beq.n	8002a14 <gnome_sort+0x20>
 8002a06:	79fb      	ldrb	r3, [r7, #7]
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7ff ffc9 	bl	80029a0 <compare>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d003      	beq.n	8002a1c <gnome_sort+0x28>
			gnome++;
 8002a14:	79fb      	ldrb	r3, [r7, #7]
 8002a16:	3301      	adds	r3, #1
 8002a18:	71fb      	strb	r3, [r7, #7]
 8002a1a:	e006      	b.n	8002a2a <gnome_sort+0x36>
		} else {
			swap(gnome);
 8002a1c:	79fb      	ldrb	r3, [r7, #7]
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7ff ffa0 	bl	8002964 <swap>
			gnome--;
 8002a24:	79fb      	ldrb	r3, [r7, #7]
 8002a26:	3b01      	subs	r3, #1
 8002a28:	71fb      	strb	r3, [r7, #7]
	while (gnome < 126) {
 8002a2a:	79fb      	ldrb	r3, [r7, #7]
 8002a2c:	2b7d      	cmp	r3, #125	; 0x7d
 8002a2e:	d9e7      	bls.n	8002a00 <gnome_sort+0xc>
		}
	}
}
 8002a30:	bf00      	nop
 8002a32:	bf00      	nop
 8002a34:	3708      	adds	r7, #8
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
	...

08002a3c <do_cell_balancing>:

uint8_t do_cell_balancing() {
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
	if (xQueuePeek(cell_voltages_queue, &cell_voltages, 0)) {
 8002a42:	4b19      	ldr	r3, [pc, #100]	; (8002aa8 <do_cell_balancing+0x6c>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	2200      	movs	r2, #0
 8002a48:	4918      	ldr	r1, [pc, #96]	; (8002aac <do_cell_balancing+0x70>)
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f014 fd96 	bl	801757c <xQueuePeek>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d023      	beq.n	8002a9e <do_cell_balancing+0x62>
		gnome_sort();
 8002a56:	f7ff ffcd 	bl	80029f4 <gnome_sort>
		for (int i = 0; i < 126; i++) {
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	607b      	str	r3, [r7, #4]
 8002a5e:	e009      	b.n	8002a74 <do_cell_balancing+0x38>
			set_balance_ext(0, i, NULL);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	2200      	movs	r2, #0
 8002a66:	4619      	mov	r1, r3
 8002a68:	2000      	movs	r0, #0
 8002a6a:	f001 fc53 	bl	8004314 <set_balance_ext>
		for (int i = 0; i < 126; i++) {
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	3301      	adds	r3, #1
 8002a72:	607b      	str	r3, [r7, #4]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2b7d      	cmp	r3, #125	; 0x7d
 8002a78:	ddf2      	ble.n	8002a60 <do_cell_balancing+0x24>
		}
		for (int i = 0; i < 41; i++) {
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	603b      	str	r3, [r7, #0]
 8002a7e:	e00b      	b.n	8002a98 <do_cell_balancing+0x5c>
			set_balance_ext(1, sorted_indices[i], NULL);
 8002a80:	4a0b      	ldr	r2, [pc, #44]	; (8002ab0 <do_cell_balancing+0x74>)
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	4413      	add	r3, r2
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	2001      	movs	r0, #1
 8002a8e:	f001 fc41 	bl	8004314 <set_balance_ext>
		for (int i = 0; i < 41; i++) {
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	3301      	adds	r3, #1
 8002a96:	603b      	str	r3, [r7, #0]
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	2b28      	cmp	r3, #40	; 0x28
 8002a9c:	ddf0      	ble.n	8002a80 <do_cell_balancing+0x44>

		}
	}
	return 1;
 8002a9e:	2301      	movs	r3, #1
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3708      	adds	r7, #8
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	2001b5c0 	.word	0x2001b5c0
 8002aac:	2001b764 	.word	0x2001b764
 8002ab0:	20000004 	.word	0x20000004

08002ab4 <end_cell_balancing>:

uint8_t end_cell_balancing() {
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
	for (int i = 0; i < 126; i++) {
 8002aba:	2300      	movs	r3, #0
 8002abc:	607b      	str	r3, [r7, #4]
 8002abe:	e009      	b.n	8002ad4 <end_cell_balancing+0x20>
		set_balance_ext(0, i, NULL);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	2000      	movs	r0, #0
 8002aca:	f001 fc23 	bl	8004314 <set_balance_ext>
	for (int i = 0; i < 126; i++) {
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	3301      	adds	r3, #1
 8002ad2:	607b      	str	r3, [r7, #4]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2b7d      	cmp	r3, #125	; 0x7d
 8002ad8:	ddf2      	ble.n	8002ac0 <end_cell_balancing+0xc>
	}
	return 1;
 8002ada:	2301      	movs	r3, #1
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3708      	adds	r7, #8
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002aea:	2300      	movs	r3, #0
 8002aec:	607b      	str	r3, [r7, #4]
 8002aee:	4b0c      	ldr	r3, [pc, #48]	; (8002b20 <MX_DMA_Init+0x3c>)
 8002af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af2:	4a0b      	ldr	r2, [pc, #44]	; (8002b20 <MX_DMA_Init+0x3c>)
 8002af4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002af8:	6313      	str	r3, [r2, #48]	; 0x30
 8002afa:	4b09      	ldr	r3, [pc, #36]	; (8002b20 <MX_DMA_Init+0x3c>)
 8002afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b02:	607b      	str	r3, [r7, #4]
 8002b04:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8002b06:	2200      	movs	r2, #0
 8002b08:	2105      	movs	r1, #5
 8002b0a:	2038      	movs	r0, #56	; 0x38
 8002b0c:	f010 f910 	bl	8012d30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002b10:	2038      	movs	r0, #56	; 0x38
 8002b12:	f010 f929 	bl	8012d68 <HAL_NVIC_EnableIRQ>

}
 8002b16:	bf00      	nop
 8002b18:	3708      	adds	r7, #8
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	40023800 	.word	0x40023800

08002b24 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b08a      	sub	sp, #40	; 0x28
 8002b28:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b2a:	f107 0314 	add.w	r3, r7, #20
 8002b2e:	2200      	movs	r2, #0
 8002b30:	601a      	str	r2, [r3, #0]
 8002b32:	605a      	str	r2, [r3, #4]
 8002b34:	609a      	str	r2, [r3, #8]
 8002b36:	60da      	str	r2, [r3, #12]
 8002b38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	613b      	str	r3, [r7, #16]
 8002b3e:	4b4d      	ldr	r3, [pc, #308]	; (8002c74 <MX_GPIO_Init+0x150>)
 8002b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b42:	4a4c      	ldr	r2, [pc, #304]	; (8002c74 <MX_GPIO_Init+0x150>)
 8002b44:	f043 0310 	orr.w	r3, r3, #16
 8002b48:	6313      	str	r3, [r2, #48]	; 0x30
 8002b4a:	4b4a      	ldr	r3, [pc, #296]	; (8002c74 <MX_GPIO_Init+0x150>)
 8002b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4e:	f003 0310 	and.w	r3, r3, #16
 8002b52:	613b      	str	r3, [r7, #16]
 8002b54:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b56:	2300      	movs	r3, #0
 8002b58:	60fb      	str	r3, [r7, #12]
 8002b5a:	4b46      	ldr	r3, [pc, #280]	; (8002c74 <MX_GPIO_Init+0x150>)
 8002b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5e:	4a45      	ldr	r2, [pc, #276]	; (8002c74 <MX_GPIO_Init+0x150>)
 8002b60:	f043 0304 	orr.w	r3, r3, #4
 8002b64:	6313      	str	r3, [r2, #48]	; 0x30
 8002b66:	4b43      	ldr	r3, [pc, #268]	; (8002c74 <MX_GPIO_Init+0x150>)
 8002b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6a:	f003 0304 	and.w	r3, r3, #4
 8002b6e:	60fb      	str	r3, [r7, #12]
 8002b70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b72:	2300      	movs	r3, #0
 8002b74:	60bb      	str	r3, [r7, #8]
 8002b76:	4b3f      	ldr	r3, [pc, #252]	; (8002c74 <MX_GPIO_Init+0x150>)
 8002b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7a:	4a3e      	ldr	r2, [pc, #248]	; (8002c74 <MX_GPIO_Init+0x150>)
 8002b7c:	f043 0301 	orr.w	r3, r3, #1
 8002b80:	6313      	str	r3, [r2, #48]	; 0x30
 8002b82:	4b3c      	ldr	r3, [pc, #240]	; (8002c74 <MX_GPIO_Init+0x150>)
 8002b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b86:	f003 0301 	and.w	r3, r3, #1
 8002b8a:	60bb      	str	r3, [r7, #8]
 8002b8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b8e:	2300      	movs	r3, #0
 8002b90:	607b      	str	r3, [r7, #4]
 8002b92:	4b38      	ldr	r3, [pc, #224]	; (8002c74 <MX_GPIO_Init+0x150>)
 8002b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b96:	4a37      	ldr	r2, [pc, #220]	; (8002c74 <MX_GPIO_Init+0x150>)
 8002b98:	f043 0302 	orr.w	r3, r3, #2
 8002b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b9e:	4b35      	ldr	r3, [pc, #212]	; (8002c74 <MX_GPIO_Init+0x150>)
 8002ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba2:	f003 0302 	and.w	r3, r3, #2
 8002ba6:	607b      	str	r3, [r7, #4]
 8002ba8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, enable_AIR_plus_Pin|enable_AIR_minus_Pin|enable_precharge_Pin, GPIO_PIN_RESET);
 8002baa:	2200      	movs	r2, #0
 8002bac:	210e      	movs	r1, #14
 8002bae:	4832      	ldr	r0, [pc, #200]	; (8002c78 <MX_GPIO_Init+0x154>)
 8002bb0:	f010 fdf4 	bl	801379c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, WARNING_LED_Pin|HEARTBEAT_LED_Pin|OK_LED_Pin, GPIO_PIN_RESET);
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	21e0      	movs	r1, #224	; 0xe0
 8002bb8:	4830      	ldr	r0, [pc, #192]	; (8002c7c <MX_GPIO_Init+0x158>)
 8002bba:	f010 fdef 	bl	801379c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LTC_CS_Pin|error_LED_Pin|AMS_error_Pin|IMD_error_Pin, GPIO_PIN_RESET);
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f44f 712c 	mov.w	r1, #688	; 0x2b0
 8002bc4:	482e      	ldr	r0, [pc, #184]	; (8002c80 <MX_GPIO_Init+0x15c>)
 8002bc6:	f010 fde9 	bl	801379c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = enable_AIR_plus_Pin|enable_AIR_minus_Pin|enable_precharge_Pin;
 8002bca:	230e      	movs	r3, #14
 8002bcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002bda:	f107 0314 	add.w	r3, r7, #20
 8002bde:	4619      	mov	r1, r3
 8002be0:	4825      	ldr	r0, [pc, #148]	; (8002c78 <MX_GPIO_Init+0x154>)
 8002be2:	f010 fc3f 	bl	8013464 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = AIR_plus_closed_Pin|AIR_minus_closed_Pin|precharge_closed_Pin;
 8002be6:	2370      	movs	r3, #112	; 0x70
 8002be8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bea:	2300      	movs	r3, #0
 8002bec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002bee:	2302      	movs	r3, #2
 8002bf0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002bf2:	f107 0314 	add.w	r3, r7, #20
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	481f      	ldr	r0, [pc, #124]	; (8002c78 <MX_GPIO_Init+0x154>)
 8002bfa:	f010 fc33 	bl	8013464 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = WARNING_LED_Pin|HEARTBEAT_LED_Pin|OK_LED_Pin;
 8002bfe:	23e0      	movs	r3, #224	; 0xe0
 8002c00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c02:	2301      	movs	r3, #1
 8002c04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c06:	2300      	movs	r3, #0
 8002c08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c0e:	f107 0314 	add.w	r3, r7, #20
 8002c12:	4619      	mov	r1, r3
 8002c14:	4819      	ldr	r0, [pc, #100]	; (8002c7c <MX_GPIO_Init+0x158>)
 8002c16:	f010 fc25 	bl	8013464 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LTC_CS_Pin|error_LED_Pin|AMS_error_Pin|IMD_error_Pin;
 8002c1a:	f44f 732c 	mov.w	r3, #688	; 0x2b0
 8002c1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c20:	2301      	movs	r3, #1
 8002c22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c24:	2300      	movs	r3, #0
 8002c26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c2c:	f107 0314 	add.w	r3, r7, #20
 8002c30:	4619      	mov	r1, r3
 8002c32:	4813      	ldr	r0, [pc, #76]	; (8002c80 <MX_GPIO_Init+0x15c>)
 8002c34:	f010 fc16 	bl	8013464 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SC_probe_Pin|IMD_ok_Pin;
 8002c38:	2306      	movs	r3, #6
 8002c3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c40:	2300      	movs	r3, #0
 8002c42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c44:	f107 0314 	add.w	r3, r7, #20
 8002c48:	4619      	mov	r1, r3
 8002c4a:	480e      	ldr	r0, [pc, #56]	; (8002c84 <MX_GPIO_Init+0x160>)
 8002c4c:	f010 fc0a 	bl	8013464 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = AMS_error_latched_Pin|IMD_error_latched_Pin;
 8002c50:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002c54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c56:	2300      	movs	r3, #0
 8002c58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c5e:	f107 0314 	add.w	r3, r7, #20
 8002c62:	4619      	mov	r1, r3
 8002c64:	4806      	ldr	r0, [pc, #24]	; (8002c80 <MX_GPIO_Init+0x15c>)
 8002c66:	f010 fbfd 	bl	8013464 <HAL_GPIO_Init>

}
 8002c6a:	bf00      	nop
 8002c6c:	3728      	adds	r7, #40	; 0x28
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	40023800 	.word	0x40023800
 8002c78:	40021000 	.word	0x40021000
 8002c7c:	40020000 	.word	0x40020000
 8002c80:	40020800 	.word	0x40020800
 8002c84:	40020400 	.word	0x40020400

08002c88 <main>:
		sizeof(ams_state_t), };

const queue_info error_queue_info = { .element_count = 1, .element_size =
		sizeof(error_t), };

int main() {
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	af00      	add	r7, sp, #0
	/* INSTRUMENTATE */
	SEGGER_SYSVIEW_Conf();
 8002c8c:	f7ff f8fe 	bl	8001e8c <SEGGER_SYSVIEW_Conf>

	/* RESET PERIPHERALS, ETC. */
	HAL_Init();
 8002c90:	f00e fda2 	bl	80117d8 <HAL_Init>

	/* CONFIGURE SYSTEM CLOCK */
	SystemClock_Config();
 8002c94:	f000 f984 	bl	8002fa0 <SystemClock_Config>

	/* INITIALZE PERIPHERALS */
	MX_GPIO_Init();
 8002c98:	f7ff ff44 	bl	8002b24 <MX_GPIO_Init>
	MX_SPI2_Init();
 8002c9c:	f001 fe30 	bl	8004900 <MX_SPI2_Init>
	MX_CAN1_Init();
 8002ca0:	f7ff fd22 	bl	80026e8 <MX_CAN1_Init>
	MX_CAN2_Init();
 8002ca4:	f7ff fd56 	bl	8002754 <MX_CAN2_Init>
	MX_TIM1_Init();
 8002ca8:	f001 ffe4 	bl	8004c74 <MX_TIM1_Init>
	MX_DMA_Init();
 8002cac:	f7ff ff1a 	bl	8002ae4 <MX_DMA_Init>
	MX_TIM3_Init();
 8002cb0:	f002 f91c 	bl	8004eec <MX_TIM3_Init>
	MX_TIM2_Init();
 8002cb4:	f002 f87e 	bl	8004db4 <MX_TIM2_Init>
	MX_ADC1_Init();
 8002cb8:	f7ff fa22 	bl	8002100 <MX_ADC1_Init>

#ifndef SIMULATION
	initialize_CAN(&hcan1, &hcan2);
#endif
	initialize_LTC(&hspi2);
 8002cbc:	4888      	ldr	r0, [pc, #544]	; (8002ee0 <main+0x258>)
 8002cbe:	f001 fb79 	bl	80043b4 <initialize_LTC>

	/* Initialize kernel */
	osKernelInitialize();
 8002cc2:	f013 fe0f 	bl	80168e4 <osKernelInitialize>

	/* INITIALIZE QUEUES */

	GPIO_queue = xQueueCreate(GPIO_queue_info.element_count,
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	2207      	movs	r2, #7
 8002cca:	4611      	mov	r1, r2
 8002ccc:	2200      	movs	r2, #0
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f014 f90a 	bl	8016ee8 <xQueueGenericCreate>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	4a83      	ldr	r2, [pc, #524]	; (8002ee4 <main+0x25c>)
 8002cd8:	6013      	str	r3, [r2, #0]
			GPIO_queue_info.element_size);

	IMD_queue = xQueueCreate(IMD_queue_info.element_count,
 8002cda:	2301      	movs	r3, #1
 8002cdc:	2210      	movs	r2, #16
 8002cde:	4611      	mov	r1, r2
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f014 f900 	bl	8016ee8 <xQueueGenericCreate>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	4a7f      	ldr	r2, [pc, #508]	; (8002ee8 <main+0x260>)
 8002cec:	6013      	str	r3, [r2, #0]
			IMD_queue_info.element_size);

	CSE_queue = xQueueCreate(CSE_queue_info.element_count,
 8002cee:	2301      	movs	r3, #1
 8002cf0:	2210      	movs	r2, #16
 8002cf2:	4611      	mov	r1, r2
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f014 f8f6 	bl	8016ee8 <xQueueGenericCreate>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	4a7b      	ldr	r2, [pc, #492]	; (8002eec <main+0x264>)
 8002d00:	6013      	str	r3, [r2, #0]
			CSE_queue_info.element_size);

	temperatures_queue = xQueueCreate(temperatures_queue_info.element_count,
 8002d02:	2301      	movs	r3, #1
 8002d04:	2220      	movs	r2, #32
 8002d06:	4611      	mov	r1, r2
 8002d08:	2200      	movs	r2, #0
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f014 f8ec 	bl	8016ee8 <xQueueGenericCreate>
 8002d10:	4603      	mov	r3, r0
 8002d12:	4a77      	ldr	r2, [pc, #476]	; (8002ef0 <main+0x268>)
 8002d14:	6013      	str	r3, [r2, #0]
			temperatures_queue_info.element_size);

	PID_queue = xQueueCreate(PID_queue_info.element_count,
 8002d16:	2301      	movs	r3, #1
 8002d18:	2208      	movs	r2, #8
 8002d1a:	4611      	mov	r1, r2
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f014 f8e2 	bl	8016ee8 <xQueueGenericCreate>
 8002d24:	4603      	mov	r3, r0
 8002d26:	4a73      	ldr	r2, [pc, #460]	; (8002ef4 <main+0x26c>)
 8002d28:	6013      	str	r3, [r2, #0]
			PID_queue_info.element_size);

	charger_queue = xQueueCreate(charger_queue_info.element_count,
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	2218      	movs	r2, #24
 8002d2e:	4611      	mov	r1, r2
 8002d30:	2200      	movs	r2, #0
 8002d32:	4618      	mov	r0, r3
 8002d34:	f014 f8d8 	bl	8016ee8 <xQueueGenericCreate>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	4a6f      	ldr	r2, [pc, #444]	; (8002ef8 <main+0x270>)
 8002d3c:	6013      	str	r3, [r2, #0]
			charger_queue_info.element_size);

	accumulator_voltage_queue = xQueueCreate(
 8002d3e:	2301      	movs	r3, #1
 8002d40:	2208      	movs	r2, #8
 8002d42:	4611      	mov	r1, r2
 8002d44:	2200      	movs	r2, #0
 8002d46:	4618      	mov	r0, r3
 8002d48:	f014 f8ce 	bl	8016ee8 <xQueueGenericCreate>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	4a6b      	ldr	r2, [pc, #428]	; (8002efc <main+0x274>)
 8002d50:	6013      	str	r3, [r2, #0]
			accumulator_voltage_queue_info.element_count,
			accumulator_voltage_queue_info.element_size);

	vehicle_voltage_queue = xQueueCreate(
 8002d52:	2301      	movs	r3, #1
 8002d54:	2208      	movs	r2, #8
 8002d56:	4611      	mov	r1, r2
 8002d58:	2200      	movs	r2, #0
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f014 f8c4 	bl	8016ee8 <xQueueGenericCreate>
 8002d60:	4603      	mov	r3, r0
 8002d62:	4a67      	ldr	r2, [pc, #412]	; (8002f00 <main+0x278>)
 8002d64:	6013      	str	r3, [r2, #0]
			vehicle_voltage_queue_info.element_count,
			vehicle_voltage_queue_info.element_size);

	accumulator_current_queue = xQueueCreate(
 8002d66:	2301      	movs	r3, #1
 8002d68:	2208      	movs	r2, #8
 8002d6a:	4611      	mov	r1, r2
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f014 f8ba 	bl	8016ee8 <xQueueGenericCreate>
 8002d74:	4603      	mov	r3, r0
 8002d76:	4a63      	ldr	r2, [pc, #396]	; (8002f04 <main+0x27c>)
 8002d78:	6013      	str	r3, [r2, #0]
			accumulator_current_queue_info.element_count,
			accumulator_current_queue_info.element_size);

	cell_voltages_queue = xQueueCreate(cell_voltages_queue_info.element_count,
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	2204      	movs	r2, #4
 8002d7e:	4611      	mov	r1, r2
 8002d80:	2200      	movs	r2, #0
 8002d82:	4618      	mov	r0, r3
 8002d84:	f014 f8b0 	bl	8016ee8 <xQueueGenericCreate>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	4a5f      	ldr	r2, [pc, #380]	; (8002f08 <main+0x280>)
 8002d8c:	6013      	str	r3, [r2, #0]
			cell_voltages_queue_info.element_size);

	cell_temperatures_queue = xQueueCreate(
 8002d8e:	2301      	movs	r3, #1
 8002d90:	2204      	movs	r2, #4
 8002d92:	4611      	mov	r1, r2
 8002d94:	2200      	movs	r2, #0
 8002d96:	4618      	mov	r0, r3
 8002d98:	f014 f8a6 	bl	8016ee8 <xQueueGenericCreate>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	4a5b      	ldr	r2, [pc, #364]	; (8002f0c <main+0x284>)
 8002da0:	6013      	str	r3, [r2, #0]
			cell_temperatures_queue_info.element_count,
			cell_temperatures_queue_info.element_size);

	start_drive_queue = xQueueCreate(start_drive_queue_info.element_count,
 8002da2:	2301      	movs	r3, #1
 8002da4:	2201      	movs	r2, #1
 8002da6:	4611      	mov	r1, r2
 8002da8:	2200      	movs	r2, #0
 8002daa:	4618      	mov	r0, r3
 8002dac:	f014 f89c 	bl	8016ee8 <xQueueGenericCreate>
 8002db0:	4603      	mov	r3, r0
 8002db2:	4a57      	ldr	r2, [pc, #348]	; (8002f10 <main+0x288>)
 8002db4:	6013      	str	r3, [r2, #0]
			start_drive_queue_info.element_size);

	start_charge_queue = xQueueCreate(start_charge_queue_info.element_count,
 8002db6:	2301      	movs	r3, #1
 8002db8:	2201      	movs	r2, #1
 8002dba:	4611      	mov	r1, r2
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f014 f892 	bl	8016ee8 <xQueueGenericCreate>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	4a53      	ldr	r2, [pc, #332]	; (8002f14 <main+0x28c>)
 8002dc8:	6013      	str	r3, [r2, #0]
			start_charge_queue_info.element_size);

	start_balance_queue = xQueueCreate(start_balance_queue_info.element_count,
 8002dca:	2301      	movs	r3, #1
 8002dcc:	2201      	movs	r2, #1
 8002dce:	4611      	mov	r1, r2
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f014 f888 	bl	8016ee8 <xQueueGenericCreate>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	4a4f      	ldr	r2, [pc, #316]	; (8002f18 <main+0x290>)
 8002ddc:	6013      	str	r3, [r2, #0]
			start_balance_queue_info.element_size);

	state_queue = xQueueCreate(state_queue_info.element_count,
 8002dde:	2301      	movs	r3, #1
 8002de0:	2201      	movs	r2, #1
 8002de2:	4611      	mov	r1, r2
 8002de4:	2200      	movs	r2, #0
 8002de6:	4618      	mov	r0, r3
 8002de8:	f014 f87e 	bl	8016ee8 <xQueueGenericCreate>
 8002dec:	4603      	mov	r3, r0
 8002dee:	4a4b      	ldr	r2, [pc, #300]	; (8002f1c <main+0x294>)
 8002df0:	6013      	str	r3, [r2, #0]
			state_queue_info.element_size);

	error_queue = xQueueCreate(error_queue_info.element_count,
 8002df2:	2301      	movs	r3, #1
 8002df4:	2201      	movs	r2, #1
 8002df6:	4611      	mov	r1, r2
 8002df8:	2200      	movs	r2, #0
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f014 f874 	bl	8016ee8 <xQueueGenericCreate>
 8002e00:	4603      	mov	r3, r0
 8002e02:	4a47      	ldr	r2, [pc, #284]	; (8002f20 <main+0x298>)
 8002e04:	6013      	str	r3, [r2, #0]
			error_queue_info.element_size);

	/* INITIALIZE TASKS */

	first_tick = 0.25 * TICK2HZ + osKernelGetTickCount(); // Wait for segger, etc
 8002e06:	f013 fdb7 	bl	8016978 <osKernelGetTickCount>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f7fd fb6b 	bl	80004e8 <__aeabi_ui2d>
 8002e12:	a331      	add	r3, pc, #196	; (adr r3, 8002ed8 <main+0x250>)
 8002e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e18:	f7fd fa2a 	bl	8000270 <__adddf3>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	460b      	mov	r3, r1
 8002e20:	4610      	mov	r0, r2
 8002e22:	4619      	mov	r1, r3
 8002e24:	f7fd feb2 	bl	8000b8c <__aeabi_d2uiz>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	4a3e      	ldr	r2, [pc, #248]	; (8002f24 <main+0x29c>)
 8002e2c:	6013      	str	r3, [r2, #0]

	SM_task_handle = osThreadNew(start_SM_task, NULL, &SM_task_info.attributes);
 8002e2e:	4a3e      	ldr	r2, [pc, #248]	; (8002f28 <main+0x2a0>)
 8002e30:	2100      	movs	r1, #0
 8002e32:	483e      	ldr	r0, [pc, #248]	; (8002f2c <main+0x2a4>)
 8002e34:	f013 fdb5 	bl	80169a2 <osThreadNew>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	4a3d      	ldr	r2, [pc, #244]	; (8002f30 <main+0x2a8>)
 8002e3c:	6013      	str	r3, [r2, #0]

#ifdef SIMULATION
	SIM_task_handle = osThreadNew(start_SIM_task, NULL,
 8002e3e:	4a3d      	ldr	r2, [pc, #244]	; (8002f34 <main+0x2ac>)
 8002e40:	2100      	movs	r1, #0
 8002e42:	483d      	ldr	r0, [pc, #244]	; (8002f38 <main+0x2b0>)
 8002e44:	f013 fdad 	bl	80169a2 <osThreadNew>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	4a3c      	ldr	r2, [pc, #240]	; (8002f3c <main+0x2b4>)
 8002e4c:	6013      	str	r3, [r2, #0]
			&SIM_task_info.attributes);
#endif

	CSE_task_handle = osThreadNew(start_CSE_task, NULL,
 8002e4e:	4a3c      	ldr	r2, [pc, #240]	; (8002f40 <main+0x2b8>)
 8002e50:	2100      	movs	r1, #0
 8002e52:	483c      	ldr	r0, [pc, #240]	; (8002f44 <main+0x2bc>)
 8002e54:	f013 fda5 	bl	80169a2 <osThreadNew>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	4a3b      	ldr	r2, [pc, #236]	; (8002f48 <main+0x2c0>)
 8002e5c:	6013      	str	r3, [r2, #0]
			&CSE_task_info.attributes);

	IMD_task_handle = osThreadNew(start_IMD_task, NULL,
 8002e5e:	4a3b      	ldr	r2, [pc, #236]	; (8002f4c <main+0x2c4>)
 8002e60:	2100      	movs	r1, #0
 8002e62:	483b      	ldr	r0, [pc, #236]	; (8002f50 <main+0x2c8>)
 8002e64:	f013 fd9d 	bl	80169a2 <osThreadNew>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	4a3a      	ldr	r2, [pc, #232]	; (8002f54 <main+0x2cc>)
 8002e6c:	6013      	str	r3, [r2, #0]
			&IMD_task_info.attributes);

	GPIO_task_handle = osThreadNew(start_GPIO_task, NULL,
 8002e6e:	4a3a      	ldr	r2, [pc, #232]	; (8002f58 <main+0x2d0>)
 8002e70:	2100      	movs	r1, #0
 8002e72:	483a      	ldr	r0, [pc, #232]	; (8002f5c <main+0x2d4>)
 8002e74:	f013 fd95 	bl	80169a2 <osThreadNew>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	4a39      	ldr	r2, [pc, #228]	; (8002f60 <main+0x2d8>)
 8002e7c:	6013      	str	r3, [r2, #0]
			&GPIO_task_info.attributes);

	ADC_task_handle = osThreadNew(start_ADC_task, NULL,
 8002e7e:	4a39      	ldr	r2, [pc, #228]	; (8002f64 <main+0x2dc>)
 8002e80:	2100      	movs	r1, #0
 8002e82:	4839      	ldr	r0, [pc, #228]	; (8002f68 <main+0x2e0>)
 8002e84:	f013 fd8d 	bl	80169a2 <osThreadNew>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	4a38      	ldr	r2, [pc, #224]	; (8002f6c <main+0x2e4>)
 8002e8c:	6013      	str	r3, [r2, #0]
			&ADC_task_info.attributes);

	COOL_task_handle = osThreadNew(start_COOL_task, NULL,
 8002e8e:	4a38      	ldr	r2, [pc, #224]	; (8002f70 <main+0x2e8>)
 8002e90:	2100      	movs	r1, #0
 8002e92:	4838      	ldr	r0, [pc, #224]	; (8002f74 <main+0x2ec>)
 8002e94:	f013 fd85 	bl	80169a2 <osThreadNew>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	4a37      	ldr	r2, [pc, #220]	; (8002f78 <main+0x2f0>)
 8002e9c:	6013      	str	r3, [r2, #0]
#ifndef SIMULATION
	CAN_task_handle = osThreadNew(start_CAN_task, NULL,
			&CAN_task_info.attributes);
#endif

	COM_task_handle = osThreadNew(start_COM_task, NULL,
 8002e9e:	4a37      	ldr	r2, [pc, #220]	; (8002f7c <main+0x2f4>)
 8002ea0:	2100      	movs	r1, #0
 8002ea2:	4837      	ldr	r0, [pc, #220]	; (8002f80 <main+0x2f8>)
 8002ea4:	f013 fd7d 	bl	80169a2 <osThreadNew>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	4a36      	ldr	r2, [pc, #216]	; (8002f84 <main+0x2fc>)
 8002eac:	6013      	str	r3, [r2, #0]
			&COM_task_info.attributes);

	IWDG_task_handle = osThreadNew(start_IWDG_task, NULL,
 8002eae:	4a36      	ldr	r2, [pc, #216]	; (8002f88 <main+0x300>)
 8002eb0:	2100      	movs	r1, #0
 8002eb2:	4836      	ldr	r0, [pc, #216]	; (8002f8c <main+0x304>)
 8002eb4:	f013 fd75 	bl	80169a2 <osThreadNew>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	4a35      	ldr	r2, [pc, #212]	; (8002f90 <main+0x308>)
 8002ebc:	6013      	str	r3, [r2, #0]
			&IWDG_task_info.attributes);

	event_handler_task_handle = osThreadNew(start_event_handler_task, NULL,
 8002ebe:	4a35      	ldr	r2, [pc, #212]	; (8002f94 <main+0x30c>)
 8002ec0:	2100      	movs	r1, #0
 8002ec2:	4835      	ldr	r0, [pc, #212]	; (8002f98 <main+0x310>)
 8002ec4:	f013 fd6d 	bl	80169a2 <osThreadNew>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	4a34      	ldr	r2, [pc, #208]	; (8002f9c <main+0x314>)
 8002ecc:	6013      	str	r3, [r2, #0]
			&event_handler_task_info.attributes);

	/* Launch RTOS ! */
	osKernelStart();
 8002ece:	f013 fd2d 	bl	801692c <osKernelStart>

	for (;;)
 8002ed2:	e7fe      	b.n	8002ed2 <main+0x24a>
 8002ed4:	f3af 8000 	nop.w
 8002ed8:	aaaaaaab 	.word	0xaaaaaaab
 8002edc:	406a0aaa 	.word	0x406a0aaa
 8002ee0:	2001bf50 	.word	0x2001bf50
 8002ee4:	2001b5ec 	.word	0x2001b5ec
 8002ee8:	2001b5d4 	.word	0x2001b5d4
 8002eec:	2001b5f8 	.word	0x2001b5f8
 8002ef0:	2001b5cc 	.word	0x2001b5cc
 8002ef4:	2001b5e4 	.word	0x2001b5e4
 8002ef8:	2001b5e8 	.word	0x2001b5e8
 8002efc:	2001b5f0 	.word	0x2001b5f0
 8002f00:	2001b5e0 	.word	0x2001b5e0
 8002f04:	2001b5fc 	.word	0x2001b5fc
 8002f08:	2001b5c0 	.word	0x2001b5c0
 8002f0c:	2001b5dc 	.word	0x2001b5dc
 8002f10:	2001b5c4 	.word	0x2001b5c4
 8002f14:	2001b5d8 	.word	0x2001b5d8
 8002f18:	2001b5f4 	.word	0x2001b5f4
 8002f1c:	2001b5c8 	.word	0x2001b5c8
 8002f20:	2001b5d0 	.word	0x2001b5d0
 8002f24:	2001b79c 	.word	0x2001b79c
 8002f28:	0801bdc4 	.word	0x0801bdc4
 8002f2c:	08003239 	.word	0x08003239
 8002f30:	2001b780 	.word	0x2001b780
 8002f34:	0801bdf4 	.word	0x0801bdf4
 8002f38:	08003f19 	.word	0x08003f19
 8002f3c:	2001b788 	.word	0x2001b788
 8002f40:	0801be54 	.word	0x0801be54
 8002f44:	08003ae1 	.word	0x08003ae1
 8002f48:	2001b790 	.word	0x2001b790
 8002f4c:	0801bf14 	.word	0x0801bf14
 8002f50:	08003601 	.word	0x08003601
 8002f54:	2001b7a4 	.word	0x2001b7a4
 8002f58:	0801bee4 	.word	0x0801bee4
 8002f5c:	080036e1 	.word	0x080036e1
 8002f60:	2001b77c 	.word	0x2001b77c
 8002f64:	0801beb4 	.word	0x0801beb4
 8002f68:	080037d1 	.word	0x080037d1
 8002f6c:	2001b794 	.word	0x2001b794
 8002f70:	0801be24 	.word	0x0801be24
 8002f74:	08003c71 	.word	0x08003c71
 8002f78:	2001b78c 	.word	0x2001b78c
 8002f7c:	0801be84 	.word	0x0801be84
 8002f80:	080038b1 	.word	0x080038b1
 8002f84:	2001b778 	.word	0x2001b778
 8002f88:	0801bf74 	.word	0x0801bf74
 8002f8c:	08003e61 	.word	0x08003e61
 8002f90:	2001b7a0 	.word	0x2001b7a0
 8002f94:	0801bf44 	.word	0x0801bf44
 8002f98:	08003e01 	.word	0x08003e01
 8002f9c:	2001b774 	.word	0x2001b774

08002fa0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b094      	sub	sp, #80	; 0x50
 8002fa4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002fa6:	f107 0320 	add.w	r3, r7, #32
 8002faa:	2230      	movs	r2, #48	; 0x30
 8002fac:	2100      	movs	r1, #0
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f018 f862 	bl	801b078 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002fb4:	f107 030c 	add.w	r3, r7, #12
 8002fb8:	2200      	movs	r2, #0
 8002fba:	601a      	str	r2, [r3, #0]
 8002fbc:	605a      	str	r2, [r3, #4]
 8002fbe:	609a      	str	r2, [r3, #8]
 8002fc0:	60da      	str	r2, [r3, #12]
 8002fc2:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	60bb      	str	r3, [r7, #8]
 8002fc8:	4b29      	ldr	r3, [pc, #164]	; (8003070 <SystemClock_Config+0xd0>)
 8002fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fcc:	4a28      	ldr	r2, [pc, #160]	; (8003070 <SystemClock_Config+0xd0>)
 8002fce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fd2:	6413      	str	r3, [r2, #64]	; 0x40
 8002fd4:	4b26      	ldr	r3, [pc, #152]	; (8003070 <SystemClock_Config+0xd0>)
 8002fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fdc:	60bb      	str	r3, [r7, #8]
 8002fde:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	607b      	str	r3, [r7, #4]
 8002fe4:	4b23      	ldr	r3, [pc, #140]	; (8003074 <SystemClock_Config+0xd4>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a22      	ldr	r2, [pc, #136]	; (8003074 <SystemClock_Config+0xd4>)
 8002fea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fee:	6013      	str	r3, [r2, #0]
 8002ff0:	4b20      	ldr	r3, [pc, #128]	; (8003074 <SystemClock_Config+0xd4>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ff8:	607b      	str	r3, [r7, #4]
 8002ffa:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 8002ffc:	230a      	movs	r3, #10
 8002ffe:	623b      	str	r3, [r7, #32]
			| RCC_OSCILLATORTYPE_LSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003000:	2301      	movs	r3, #1
 8003002:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003004:	2310      	movs	r3, #16
 8003006:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003008:	2301      	movs	r3, #1
 800300a:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800300c:	2302      	movs	r3, #2
 800300e:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003010:	2300      	movs	r3, #0
 8003012:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8003014:	2308      	movs	r3, #8
 8003016:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 160;
 8003018:	23a0      	movs	r3, #160	; 0xa0
 800301a:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800301c:	2302      	movs	r3, #2
 800301e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8003020:	2304      	movs	r3, #4
 8003022:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8003024:	f107 0320 	add.w	r3, r7, #32
 8003028:	4618      	mov	r0, r3
 800302a:	f010 fbe1 	bl	80137f0 <HAL_RCC_OscConfig>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d001      	beq.n	8003038 <SystemClock_Config+0x98>
		Error_Handler();
 8003034:	f001 f87c 	bl	8004130 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8003038:	230f      	movs	r3, #15
 800303a:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800303c:	2302      	movs	r3, #2
 800303e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003040:	2300      	movs	r3, #0
 8003042:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8003044:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003048:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800304a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800304e:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8003050:	f107 030c 	add.w	r3, r7, #12
 8003054:	2105      	movs	r1, #5
 8003056:	4618      	mov	r0, r3
 8003058:	f010 fe42 	bl	8013ce0 <HAL_RCC_ClockConfig>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d001      	beq.n	8003066 <SystemClock_Config+0xc6>
		Error_Handler();
 8003062:	f001 f865 	bl	8004130 <Error_Handler>
	}
}
 8003066:	bf00      	nop
 8003068:	3750      	adds	r7, #80	; 0x50
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	40023800 	.word	0x40023800
 8003074:	40007000 	.word	0x40007000

08003078 <__wait_for_data>:
#define WAIT_FOR_DRIVE					0x0020
#define WAIT_FOR_CHARGE					0x0040
#define WAIT_FOR_BALANCE				0x0080
#define WAIT_FOR_ALL 					0xFFFF

void __wait_for_data(uint16_t FLAGS) {
 8003078:	b580      	push	{r7, lr}
 800307a:	b088      	sub	sp, #32
 800307c:	af00      	add	r7, sp, #0
 800307e:	4603      	mov	r3, r0
 8003080:	80fb      	strh	r3, [r7, #6]
	uint8_t NOT_OK = 1;
 8003082:	2301      	movs	r3, #1
 8003084:	77fb      	strb	r3, [r7, #31]

	double _d;
	double *_dptr;
	uint8_t _u8;
	while (NOT_OK) {
 8003086:	e0a3      	b.n	80031d0 <__wait_for_data+0x158>
		osDelay(0.500 * TICK2HZ);
 8003088:	f44f 70d0 	mov.w	r0, #416	; 0x1a0
 800308c:	f013 fd1b 	bl	8016ac6 <osDelay>
		NOT_OK &= !((FLAGS | WAIT_FOR_CELL_VOLTAGES)
				&& xQueuePeek(cell_voltages_queue, &_dptr, 0));
 8003090:	4b54      	ldr	r3, [pc, #336]	; (80031e4 <__wait_for_data+0x16c>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f107 010c 	add.w	r1, r7, #12
 8003098:	2200      	movs	r2, #0
 800309a:	4618      	mov	r0, r3
 800309c:	f014 fa6e 	bl	801757c <xQueuePeek>
 80030a0:	4603      	mov	r3, r0
		NOT_OK &= !((FLAGS | WAIT_FOR_CELL_VOLTAGES)
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	bf0c      	ite	eq
 80030a6:	2301      	moveq	r3, #1
 80030a8:	2300      	movne	r3, #0
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	b25a      	sxtb	r2, r3
 80030ae:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80030b2:	4013      	ands	r3, r2
 80030b4:	b25b      	sxtb	r3, r3
 80030b6:	77fb      	strb	r3, [r7, #31]
		NOT_OK &= !((FLAGS | WAIT_FOR_CELL_TEMPERATURES)
				&& xQueuePeek(cell_temperatures_queue, &_dptr, 0));
 80030b8:	4b4b      	ldr	r3, [pc, #300]	; (80031e8 <__wait_for_data+0x170>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f107 010c 	add.w	r1, r7, #12
 80030c0:	2200      	movs	r2, #0
 80030c2:	4618      	mov	r0, r3
 80030c4:	f014 fa5a 	bl	801757c <xQueuePeek>
 80030c8:	4603      	mov	r3, r0
		NOT_OK &= !((FLAGS | WAIT_FOR_CELL_TEMPERATURES)
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	bf0c      	ite	eq
 80030ce:	2301      	moveq	r3, #1
 80030d0:	2300      	movne	r3, #0
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	b25a      	sxtb	r2, r3
 80030d6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80030da:	4013      	ands	r3, r2
 80030dc:	b25b      	sxtb	r3, r3
 80030de:	77fb      	strb	r3, [r7, #31]
		NOT_OK &= !((FLAGS | WAIT_FOR_ACCUMULATOR_CURRENT)
				&& xQueuePeek(accumulator_current_queue, &_d, 0));
 80030e0:	4b42      	ldr	r3, [pc, #264]	; (80031ec <__wait_for_data+0x174>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f107 0110 	add.w	r1, r7, #16
 80030e8:	2200      	movs	r2, #0
 80030ea:	4618      	mov	r0, r3
 80030ec:	f014 fa46 	bl	801757c <xQueuePeek>
 80030f0:	4603      	mov	r3, r0
		NOT_OK &= !((FLAGS | WAIT_FOR_ACCUMULATOR_CURRENT)
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	bf0c      	ite	eq
 80030f6:	2301      	moveq	r3, #1
 80030f8:	2300      	movne	r3, #0
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	b25a      	sxtb	r2, r3
 80030fe:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003102:	4013      	ands	r3, r2
 8003104:	b25b      	sxtb	r3, r3
 8003106:	77fb      	strb	r3, [r7, #31]
		NOT_OK &= !((FLAGS | WAIT_FOR_ACCUMULATOR_VOLTAGE)
				&& xQueuePeek(accumulator_voltage_queue, &_d, 0));
 8003108:	4b39      	ldr	r3, [pc, #228]	; (80031f0 <__wait_for_data+0x178>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f107 0110 	add.w	r1, r7, #16
 8003110:	2200      	movs	r2, #0
 8003112:	4618      	mov	r0, r3
 8003114:	f014 fa32 	bl	801757c <xQueuePeek>
 8003118:	4603      	mov	r3, r0
		NOT_OK &= !((FLAGS | WAIT_FOR_ACCUMULATOR_VOLTAGE)
 800311a:	2b00      	cmp	r3, #0
 800311c:	bf0c      	ite	eq
 800311e:	2301      	moveq	r3, #1
 8003120:	2300      	movne	r3, #0
 8003122:	b2db      	uxtb	r3, r3
 8003124:	b25a      	sxtb	r2, r3
 8003126:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800312a:	4013      	ands	r3, r2
 800312c:	b25b      	sxtb	r3, r3
 800312e:	77fb      	strb	r3, [r7, #31]
		NOT_OK &= !((FLAGS | WAIT_FOR_VEHICLE_VOLTAGE)
				&& xQueuePeek(vehicle_voltage_queue, &_d, 0));
 8003130:	4b30      	ldr	r3, [pc, #192]	; (80031f4 <__wait_for_data+0x17c>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f107 0110 	add.w	r1, r7, #16
 8003138:	2200      	movs	r2, #0
 800313a:	4618      	mov	r0, r3
 800313c:	f014 fa1e 	bl	801757c <xQueuePeek>
 8003140:	4603      	mov	r3, r0
		NOT_OK &= !((FLAGS | WAIT_FOR_VEHICLE_VOLTAGE)
 8003142:	2b00      	cmp	r3, #0
 8003144:	bf0c      	ite	eq
 8003146:	2301      	moveq	r3, #1
 8003148:	2300      	movne	r3, #0
 800314a:	b2db      	uxtb	r3, r3
 800314c:	b25a      	sxtb	r2, r3
 800314e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003152:	4013      	ands	r3, r2
 8003154:	b25b      	sxtb	r3, r3
 8003156:	77fb      	strb	r3, [r7, #31]
		NOT_OK &= !((FLAGS | WAIT_FOR_DRIVE)
				&& xQueuePeek(start_drive_queue, &_u8, 0));
 8003158:	4b27      	ldr	r3, [pc, #156]	; (80031f8 <__wait_for_data+0x180>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f107 010b 	add.w	r1, r7, #11
 8003160:	2200      	movs	r2, #0
 8003162:	4618      	mov	r0, r3
 8003164:	f014 fa0a 	bl	801757c <xQueuePeek>
 8003168:	4603      	mov	r3, r0
		NOT_OK &= !((FLAGS | WAIT_FOR_DRIVE)
 800316a:	2b00      	cmp	r3, #0
 800316c:	bf0c      	ite	eq
 800316e:	2301      	moveq	r3, #1
 8003170:	2300      	movne	r3, #0
 8003172:	b2db      	uxtb	r3, r3
 8003174:	b25a      	sxtb	r2, r3
 8003176:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800317a:	4013      	ands	r3, r2
 800317c:	b25b      	sxtb	r3, r3
 800317e:	77fb      	strb	r3, [r7, #31]
		NOT_OK &= !((FLAGS | WAIT_FOR_CHARGE)
				&& xQueuePeek(start_charge_queue, &_u8, 0));
 8003180:	4b1e      	ldr	r3, [pc, #120]	; (80031fc <__wait_for_data+0x184>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f107 010b 	add.w	r1, r7, #11
 8003188:	2200      	movs	r2, #0
 800318a:	4618      	mov	r0, r3
 800318c:	f014 f9f6 	bl	801757c <xQueuePeek>
 8003190:	4603      	mov	r3, r0
		NOT_OK &= !((FLAGS | WAIT_FOR_CHARGE)
 8003192:	2b00      	cmp	r3, #0
 8003194:	bf0c      	ite	eq
 8003196:	2301      	moveq	r3, #1
 8003198:	2300      	movne	r3, #0
 800319a:	b2db      	uxtb	r3, r3
 800319c:	b25a      	sxtb	r2, r3
 800319e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80031a2:	4013      	ands	r3, r2
 80031a4:	b25b      	sxtb	r3, r3
 80031a6:	77fb      	strb	r3, [r7, #31]
		NOT_OK &= !((FLAGS | WAIT_FOR_BALANCE)
				&& xQueuePeek(start_balance_queue, &_u8, 0));
 80031a8:	4b15      	ldr	r3, [pc, #84]	; (8003200 <__wait_for_data+0x188>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f107 010b 	add.w	r1, r7, #11
 80031b0:	2200      	movs	r2, #0
 80031b2:	4618      	mov	r0, r3
 80031b4:	f014 f9e2 	bl	801757c <xQueuePeek>
 80031b8:	4603      	mov	r3, r0
		NOT_OK &= !((FLAGS | WAIT_FOR_BALANCE)
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	bf0c      	ite	eq
 80031be:	2301      	moveq	r3, #1
 80031c0:	2300      	movne	r3, #0
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	b25a      	sxtb	r2, r3
 80031c6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80031ca:	4013      	ands	r3, r2
 80031cc:	b25b      	sxtb	r3, r3
 80031ce:	77fb      	strb	r3, [r7, #31]
	while (NOT_OK) {
 80031d0:	7ffb      	ldrb	r3, [r7, #31]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	f47f af58 	bne.w	8003088 <__wait_for_data+0x10>
	}
}
 80031d8:	bf00      	nop
 80031da:	bf00      	nop
 80031dc:	3720      	adds	r7, #32
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	2001b5c0 	.word	0x2001b5c0
 80031e8:	2001b5dc 	.word	0x2001b5dc
 80031ec:	2001b5fc 	.word	0x2001b5fc
 80031f0:	2001b5f0 	.word	0x2001b5f0
 80031f4:	2001b5e0 	.word	0x2001b5e0
 80031f8:	2001b5c4 	.word	0x2001b5c4
 80031fc:	2001b5d8 	.word	0x2001b5d8
 8003200:	2001b5f4 	.word	0x2001b5f4

08003204 <__raise_error>:

error_t __error;
void __raise_error(error_t error) {
 8003204:	b580      	push	{r7, lr}
 8003206:	b082      	sub	sp, #8
 8003208:	af00      	add	r7, sp, #0
 800320a:	4603      	mov	r3, r0
 800320c:	71fb      	strb	r3, [r7, #7]
	__error = error;
 800320e:	79fa      	ldrb	r2, [r7, #7]
 8003210:	4b06      	ldr	r3, [pc, #24]	; (800322c <__raise_error+0x28>)
 8003212:	701a      	strb	r2, [r3, #0]
	xQueueSend(error_queue, &error, portMAX_DELAY);
 8003214:	4b06      	ldr	r3, [pc, #24]	; (8003230 <__raise_error+0x2c>)
 8003216:	6818      	ldr	r0, [r3, #0]
 8003218:	1df9      	adds	r1, r7, #7
 800321a:	2300      	movs	r3, #0
 800321c:	f04f 32ff 	mov.w	r2, #4294967295
 8003220:	f013 fec6 	bl	8016fb0 <xQueueGenericSend>
}
 8003224:	bf00      	nop
 8003226:	3708      	adds	r7, #8
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}
 800322c:	2001b784 	.word	0x2001b784
 8003230:	2001b5d0 	.word	0x2001b5d0
 8003234:	00000000 	.word	0x00000000

08003238 <start_SM_task>:

/* ENTER TASKS */
void start_SM_task(void *argument) {
 8003238:	b5b0      	push	{r4, r5, r7, lr}
 800323a:	b09a      	sub	sp, #104	; 0x68
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
	SEGGER_SYSVIEW_Start();
 8003240:	f017 f9c2 	bl	801a5c8 <SEGGER_SYSVIEW_Start>

	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 8003244:	4b6c      	ldr	r3, [pc, #432]	; (80033f8 <start_SM_task+0x1c0>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	667b      	str	r3, [r7, #100]	; 0x64
	uint32_t tick_increment = TICK2HZ * SM_task_info.periodicity;
 800324a:	4b6c      	ldr	r3, [pc, #432]	; (80033fc <start_SM_task+0x1c4>)
 800324c:	4618      	mov	r0, r3
 800324e:	f7fd f96d 	bl	800052c <__aeabi_f2d>
 8003252:	a367      	add	r3, pc, #412	; (adr r3, 80033f0 <start_SM_task+0x1b8>)
 8003254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003258:	f7fd f9c0 	bl	80005dc <__aeabi_dmul>
 800325c:	4602      	mov	r2, r0
 800325e:	460b      	mov	r3, r1
 8003260:	4610      	mov	r0, r2
 8003262:	4619      	mov	r1, r3
 8003264:	f7fd fc92 	bl	8000b8c <__aeabi_d2uiz>
 8003268:	4603      	mov	r3, r0
 800326a:	637b      	str	r3, [r7, #52]	; 0x34

	/* Make task-specific structures */
	charger_t charger;
	ams_parameters.Ts = SM_task_info.periodicity;
 800326c:	4a63      	ldr	r2, [pc, #396]	; (80033fc <start_SM_task+0x1c4>)
 800326e:	4b64      	ldr	r3, [pc, #400]	; (8003400 <start_SM_task+0x1c8>)
 8003270:	609a      	str	r2, [r3, #8]
	double mean;
	double variance;
	double maximum;

	/* Wait until offset */
	next_tick += TICK2HZ * SM_task_info.offset;
 8003272:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8003274:	f7fd f938 	bl	80004e8 <__aeabi_ui2d>
 8003278:	4604      	mov	r4, r0
 800327a:	460d      	mov	r5, r1
 800327c:	f04f 0300 	mov.w	r3, #0
 8003280:	4618      	mov	r0, r3
 8003282:	f7fd f953 	bl	800052c <__aeabi_f2d>
 8003286:	a35a      	add	r3, pc, #360	; (adr r3, 80033f0 <start_SM_task+0x1b8>)
 8003288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800328c:	f7fd f9a6 	bl	80005dc <__aeabi_dmul>
 8003290:	4602      	mov	r2, r0
 8003292:	460b      	mov	r3, r1
 8003294:	4620      	mov	r0, r4
 8003296:	4629      	mov	r1, r5
 8003298:	f7fc ffea 	bl	8000270 <__adddf3>
 800329c:	4602      	mov	r2, r0
 800329e:	460b      	mov	r3, r1
 80032a0:	4610      	mov	r0, r2
 80032a2:	4619      	mov	r1, r3
 80032a4:	f7fd fc72 	bl	8000b8c <__aeabi_d2uiz>
 80032a8:	4603      	mov	r3, r0
 80032aa:	667b      	str	r3, [r7, #100]	; 0x64
	osDelayUntil(next_tick);
 80032ac:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80032ae:	f013 fc25 	bl	8016afc <osDelayUntil>

	__wait_for_data(WAIT_FOR_ALL);
 80032b2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80032b6:	f7ff fedf 	bl	8003078 <__wait_for_data>

	set_charger_voltage_limit_ext(4.15 * 126);
 80032ba:	ed9f 0a52 	vldr	s0, [pc, #328]	; 8003404 <start_SM_task+0x1cc>
 80032be:	f001 f801 	bl	80042c4 <set_charger_voltage_limit_ext>
	set_charger_current_limit_ext(6.6 * 2);
 80032c2:	ed9f 0a51 	vldr	s0, [pc, #324]	; 8003408 <start_SM_task+0x1d0>
 80032c6:	f001 f811 	bl	80042ec <set_charger_current_limit_ext>

	for (;;) {
		/* Enter periodic behaviour */
		/* Receive every piece of data which is required to propagate the state machine */
		if (0x1 && xQueuePeek(cell_voltages_queue, &cell_voltages, 0)
 80032ca:	4b50      	ldr	r3, [pc, #320]	; (800340c <start_SM_task+0x1d4>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f107 010c 	add.w	r1, r7, #12
 80032d2:	2200      	movs	r2, #0
 80032d4:	4618      	mov	r0, r3
 80032d6:	f014 f951 	bl	801757c <xQueuePeek>
 80032da:	4603      	mov	r3, r0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	f000 813b 	beq.w	8003558 <start_SM_task+0x320>
				&& xQueuePeek(accumulator_current_queue,
 80032e2:	4b4b      	ldr	r3, [pc, #300]	; (8003410 <start_SM_task+0x1d8>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	2200      	movs	r2, #0
 80032e8:	494a      	ldr	r1, [pc, #296]	; (8003414 <start_SM_task+0x1dc>)
 80032ea:	4618      	mov	r0, r3
 80032ec:	f014 f946 	bl	801757c <xQueuePeek>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	f000 8130 	beq.w	8003558 <start_SM_task+0x320>
						&ams_inputs.accumulator_current, 0)
				&& xQueuePeek(accumulator_voltage_queue,
 80032f8:	4b47      	ldr	r3, [pc, #284]	; (8003418 <start_SM_task+0x1e0>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2200      	movs	r2, #0
 80032fe:	4947      	ldr	r1, [pc, #284]	; (800341c <start_SM_task+0x1e4>)
 8003300:	4618      	mov	r0, r3
 8003302:	f014 f93b 	bl	801757c <xQueuePeek>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	f000 8125 	beq.w	8003558 <start_SM_task+0x320>
						&ams_inputs.accumulator_voltage, 0)
				&& xQueuePeek(vehicle_voltage_queue,
 800330e:	4b44      	ldr	r3, [pc, #272]	; (8003420 <start_SM_task+0x1e8>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	2200      	movs	r2, #0
 8003314:	4943      	ldr	r1, [pc, #268]	; (8003424 <start_SM_task+0x1ec>)
 8003316:	4618      	mov	r0, r3
 8003318:	f014 f930 	bl	801757c <xQueuePeek>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	f000 811a 	beq.w	8003558 <start_SM_task+0x320>
						&ams_inputs.vehicle_voltage, 0)) {

			/* Calculate mean, maximum and variance of cell voltages */
			{
				mean = 0;
 8003324:	f04f 0200 	mov.w	r2, #0
 8003328:	f04f 0300 	mov.w	r3, #0
 800332c:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
				variance = 0;
 8003330:	f04f 0200 	mov.w	r2, #0
 8003334:	f04f 0300 	mov.w	r3, #0
 8003338:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
				maximum = cell_voltages[0];
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003342:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
				minimum = cell_voltages[0];
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800334c:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
				for (int i = 0; i < 126; i++) {
 8003350:	2300      	movs	r3, #0
 8003352:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003354:	e03a      	b.n	80033cc <start_SM_task+0x194>
					mean += cell_voltages[i];
 8003356:	68fa      	ldr	r2, [r7, #12]
 8003358:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800335a:	00db      	lsls	r3, r3, #3
 800335c:	4413      	add	r3, r2
 800335e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003362:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003366:	f7fc ff83 	bl	8000270 <__adddf3>
 800336a:	4602      	mov	r2, r0
 800336c:	460b      	mov	r3, r1
 800336e:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
					if (cell_voltages[i] > maximum) {
 8003372:	68fa      	ldr	r2, [r7, #12]
 8003374:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003376:	00db      	lsls	r3, r3, #3
 8003378:	4413      	add	r3, r2
 800337a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800337e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8003382:	f7fd fb9d 	bl	8000ac0 <__aeabi_dcmplt>
 8003386:	4603      	mov	r3, r0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d007      	beq.n	800339c <start_SM_task+0x164>
						maximum = cell_voltages[i];
 800338c:	68fa      	ldr	r2, [r7, #12]
 800338e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003390:	00db      	lsls	r3, r3, #3
 8003392:	4413      	add	r3, r2
 8003394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003398:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
					}
					if (cell_voltages[i] < minimum) {
 800339c:	68fa      	ldr	r2, [r7, #12]
 800339e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033a0:	00db      	lsls	r3, r3, #3
 80033a2:	4413      	add	r3, r2
 80033a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033a8:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80033ac:	f7fd fba6 	bl	8000afc <__aeabi_dcmpgt>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d007      	beq.n	80033c6 <start_SM_task+0x18e>
						minimum = cell_voltages[i];
 80033b6:	68fa      	ldr	r2, [r7, #12]
 80033b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033ba:	00db      	lsls	r3, r3, #3
 80033bc:	4413      	add	r3, r2
 80033be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033c2:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
				for (int i = 0; i < 126; i++) {
 80033c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033c8:	3301      	adds	r3, #1
 80033ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033ce:	2b7d      	cmp	r3, #125	; 0x7d
 80033d0:	ddc1      	ble.n	8003356 <start_SM_task+0x11e>
					}
				}
				mean /= 126;
 80033d2:	f04f 0200 	mov.w	r2, #0
 80033d6:	4b14      	ldr	r3, [pc, #80]	; (8003428 <start_SM_task+0x1f0>)
 80033d8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80033dc:	f7fd fa28 	bl	8000830 <__aeabi_ddiv>
 80033e0:	4602      	mov	r2, r0
 80033e2:	460b      	mov	r3, r1
 80033e4:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
				for (int i = 0; i < 126; i++) {
 80033e8:	2300      	movs	r3, #0
 80033ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80033ec:	e03f      	b.n	800346e <start_SM_task+0x236>
 80033ee:	bf00      	nop
 80033f0:	aaaaaaab 	.word	0xaaaaaaab
 80033f4:	408a0aaa 	.word	0x408a0aaa
 80033f8:	2001b79c 	.word	0x2001b79c
 80033fc:	3dcccccd 	.word	0x3dcccccd
 8003400:	2001b750 	.word	0x2001b750
 8003404:	4402b99a 	.word	0x4402b99a
 8003408:	41533333 	.word	0x41533333
 800340c:	2001b5c0 	.word	0x2001b5c0
 8003410:	2001b5fc 	.word	0x2001b5fc
 8003414:	2001b700 	.word	0x2001b700
 8003418:	2001b5f0 	.word	0x2001b5f0
 800341c:	2001b740 	.word	0x2001b740
 8003420:	2001b5e0 	.word	0x2001b5e0
 8003424:	2001b730 	.word	0x2001b730
 8003428:	405f8000 	.word	0x405f8000
					double svar = cell_voltages[i] - mean;
 800342c:	68fa      	ldr	r2, [r7, #12]
 800342e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003430:	00db      	lsls	r3, r3, #3
 8003432:	4413      	add	r3, r2
 8003434:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003438:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800343c:	f7fc ff16 	bl	800026c <__aeabi_dsub>
 8003440:	4602      	mov	r2, r0
 8003442:	460b      	mov	r3, r1
 8003444:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
					variance += svar * svar;
 8003448:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800344c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003450:	f7fd f8c4 	bl	80005dc <__aeabi_dmul>
 8003454:	4602      	mov	r2, r0
 8003456:	460b      	mov	r3, r1
 8003458:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800345c:	f7fc ff08 	bl	8000270 <__adddf3>
 8003460:	4602      	mov	r2, r0
 8003462:	460b      	mov	r3, r1
 8003464:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
				for (int i = 0; i < 126; i++) {
 8003468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800346a:	3301      	adds	r3, #1
 800346c:	63bb      	str	r3, [r7, #56]	; 0x38
 800346e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003470:	2b7d      	cmp	r3, #125	; 0x7d
 8003472:	dddb      	ble.n	800342c <start_SM_task+0x1f4>
				}
			}

			/* Set the rest of the state machine inputs */
			ams_inputs.cell_voltages_variance = variance;
 8003474:	4958      	ldr	r1, [pc, #352]	; (80035d8 <start_SM_task+0x3a0>)
 8003476:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800347a:	e9c1 2306 	strd	r2, r3, [r1, #24]
			ams_inputs.maximum_cell_voltage = maximum;
 800347e:	4956      	ldr	r1, [pc, #344]	; (80035d8 <start_SM_task+0x3a0>)
 8003480:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003484:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
			ams_inputs.minimum_cell_voltage = minimum;
 8003488:	4953      	ldr	r1, [pc, #332]	; (80035d8 <start_SM_task+0x3a0>)
 800348a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800348e:	e9c1 2304 	strd	r2, r3, [r1, #16]
			ams_inputs.charger_is_awake = 1;
 8003492:	4b51      	ldr	r3, [pc, #324]	; (80035d8 <start_SM_task+0x3a0>)
 8003494:	2201      	movs	r2, #1
 8003496:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			ams_inputs.ams_error = get_ams_error_latched_ext();
 800349a:	f000 fecf 	bl	800423c <get_ams_error_latched_ext>
 800349e:	4603      	mov	r3, r0
 80034a0:	461a      	mov	r2, r3
 80034a2:	4b4d      	ldr	r3, [pc, #308]	; (80035d8 <start_SM_task+0x3a0>)
 80034a4:	701a      	strb	r2, [r3, #0]
			ams_inputs.imd_error = get_imd_error_latched_ext();
 80034a6:	f000 fee9 	bl	800427c <get_imd_error_latched_ext>
 80034aa:	4603      	mov	r3, r0
 80034ac:	461a      	mov	r2, r3
 80034ae:	4b4a      	ldr	r3, [pc, #296]	; (80035d8 <start_SM_task+0x3a0>)
 80034b0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			ams_inputs.air_minus_closed = get_air_minus_ext();
 80034b4:	f000 fe7a 	bl	80041ac <get_air_minus_ext>
 80034b8:	4603      	mov	r3, r0
 80034ba:	461a      	mov	r2, r3
 80034bc:	4b46      	ldr	r3, [pc, #280]	; (80035d8 <start_SM_task+0x3a0>)
 80034be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			ams_inputs.air_plus_closed = get_air_plus_ext();
 80034c2:	f000 fe4f 	bl	8004164 <get_air_plus_ext>
 80034c6:	4603      	mov	r3, r0
 80034c8:	461a      	mov	r2, r3
 80034ca:	4b43      	ldr	r3, [pc, #268]	; (80035d8 <start_SM_task+0x3a0>)
 80034cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
			ams_inputs.precharge_closed = get_precharge_ext();
 80034d0:	f000 fe90 	bl	80041f4 <get_precharge_ext>
 80034d4:	4603      	mov	r3, r0
 80034d6:	461a      	mov	r2, r3
 80034d8:	4b3f      	ldr	r3, [pc, #252]	; (80035d8 <start_SM_task+0x3a0>)
 80034da:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
			ams_inputs.SC = get_sc_probe_ext();
 80034de:	f000 fed9 	bl	8004294 <get_sc_probe_ext>
 80034e2:	4603      	mov	r3, r0
 80034e4:	461a      	mov	r2, r3
 80034e6:	4b3c      	ldr	r3, [pc, #240]	; (80035d8 <start_SM_task+0x3a0>)
 80034e8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

			/* Try to get the trigger signals */
			if (!xQueueReceive(start_drive_queue, &ams_inputs.drive, 0)) {
 80034ec:	4b3b      	ldr	r3, [pc, #236]	; (80035dc <start_SM_task+0x3a4>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	2200      	movs	r2, #0
 80034f2:	493b      	ldr	r1, [pc, #236]	; (80035e0 <start_SM_task+0x3a8>)
 80034f4:	4618      	mov	r0, r3
 80034f6:	f013 ff31 	bl	801735c <xQueueReceive>
 80034fa:	4603      	mov	r3, r0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d103      	bne.n	8003508 <start_SM_task+0x2d0>
				ams_inputs.drive = 0;
 8003500:	4b35      	ldr	r3, [pc, #212]	; (80035d8 <start_SM_task+0x3a0>)
 8003502:	2200      	movs	r2, #0
 8003504:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			if (!xQueueReceive(start_charge_queue, &ams_inputs.charge, 0)) {
 8003508:	4b36      	ldr	r3, [pc, #216]	; (80035e4 <start_SM_task+0x3ac>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	2200      	movs	r2, #0
 800350e:	4936      	ldr	r1, [pc, #216]	; (80035e8 <start_SM_task+0x3b0>)
 8003510:	4618      	mov	r0, r3
 8003512:	f013 ff23 	bl	801735c <xQueueReceive>
 8003516:	4603      	mov	r3, r0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d103      	bne.n	8003524 <start_SM_task+0x2ec>
				ams_inputs.charge = 0;
 800351c:	4b2e      	ldr	r3, [pc, #184]	; (80035d8 <start_SM_task+0x3a0>)
 800351e:	2200      	movs	r2, #0
 8003520:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
			}
			if (!xQueueReceive(start_balance_queue, &ams_inputs.balance, 0)) {
 8003524:	4b31      	ldr	r3, [pc, #196]	; (80035ec <start_SM_task+0x3b4>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	2200      	movs	r2, #0
 800352a:	4931      	ldr	r1, [pc, #196]	; (80035f0 <start_SM_task+0x3b8>)
 800352c:	4618      	mov	r0, r3
 800352e:	f013 ff15 	bl	801735c <xQueueReceive>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d103      	bne.n	8003540 <start_SM_task+0x308>
				ams_inputs.balance = 0;
 8003538:	4b27      	ldr	r3, [pc, #156]	; (80035d8 <start_SM_task+0x3a0>)
 800353a:	2200      	movs	r2, #0
 800353c:	f883 2020 	strb.w	r2, [r3, #32]
			}

			ams_state_t state = ams_function(); // _step
 8003540:	f00e f84e 	bl	80115e0 <ams_function>
 8003544:	4603      	mov	r3, r0
 8003546:	72fb      	strb	r3, [r7, #11]
			xQueueOverwrite(state_queue, &state);
 8003548:	4b2a      	ldr	r3, [pc, #168]	; (80035f4 <start_SM_task+0x3bc>)
 800354a:	6818      	ldr	r0, [r3, #0]
 800354c:	f107 010b 	add.w	r1, r7, #11
 8003550:	2302      	movs	r3, #2
 8003552:	2200      	movs	r2, #0
 8003554:	f013 fd2c 	bl	8016fb0 <xQueueGenericSend>
		}

		/* If any error was produced by the state machine (1xx), then raise them */
		if (ams_outputs.set_error) {
 8003558:	4b27      	ldr	r3, [pc, #156]	; (80035f8 <start_SM_task+0x3c0>)
 800355a:	791b      	ldrb	r3, [r3, #4]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d004      	beq.n	800356a <start_SM_task+0x332>
			__raise_error((error_t) ams_outputs.set_error);
 8003560:	4b25      	ldr	r3, [pc, #148]	; (80035f8 <start_SM_task+0x3c0>)
 8003562:	791b      	ldrb	r3, [r3, #4]
 8003564:	4618      	mov	r0, r3
 8003566:	f7ff fe4d 	bl	8003204 <__raise_error>

		}

		charger.charger_current_limit = 6.6 * 2; 		// 2 * C
 800356a:	a317      	add	r3, pc, #92	; (adr r3, 80035c8 <start_SM_task+0x390>)
 800356c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003570:	e9c7 2304 	strd	r2, r3, [r7, #16]
		charger.charger_voltage_limit = 4.15 * 126;	// sought cell voltage times aount of cells
 8003574:	a316      	add	r3, pc, #88	; (adr r3, 80035d0 <start_SM_task+0x398>)
 8003576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800357a:	e9c7 2306 	strd	r2, r3, [r7, #24]
		charger.enable_charger = ams_outputs.enable_charger;
 800357e:	4b1e      	ldr	r3, [pc, #120]	; (80035f8 <start_SM_task+0x3c0>)
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	f887 3020 	strb.w	r3, [r7, #32]

		xQueueOverwrite(charger_queue, &charger);
 8003586:	4b1d      	ldr	r3, [pc, #116]	; (80035fc <start_SM_task+0x3c4>)
 8003588:	6818      	ldr	r0, [r3, #0]
 800358a:	f107 0110 	add.w	r1, r7, #16
 800358e:	2302      	movs	r3, #2
 8003590:	2200      	movs	r2, #0
 8003592:	f013 fd0d 	bl	8016fb0 <xQueueGenericSend>

		set_air_minus_ext(ams_outputs.close_air_minus);
 8003596:	4b18      	ldr	r3, [pc, #96]	; (80035f8 <start_SM_task+0x3c0>)
 8003598:	789b      	ldrb	r3, [r3, #2]
 800359a:	4618      	mov	r0, r3
 800359c:	f000 fdf2 	bl	8004184 <set_air_minus_ext>
		set_air_plus_ext(ams_outputs.close_air_plus);
 80035a0:	4b15      	ldr	r3, [pc, #84]	; (80035f8 <start_SM_task+0x3c0>)
 80035a2:	78db      	ldrb	r3, [r3, #3]
 80035a4:	4618      	mov	r0, r3
 80035a6:	f000 fdc9 	bl	800413c <set_air_plus_ext>
		set_precharge_ext(ams_outputs.close_precharge);
 80035aa:	4b13      	ldr	r3, [pc, #76]	; (80035f8 <start_SM_task+0x3c0>)
 80035ac:	785b      	ldrb	r3, [r3, #1]
 80035ae:	4618      	mov	r0, r3
 80035b0:	f000 fe0c 	bl	80041cc <set_precharge_ext>

		/* Wait until next period */
		next_tick += tick_increment;
 80035b4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80035b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035b8:	4413      	add	r3, r2
 80035ba:	667b      	str	r3, [r7, #100]	; 0x64
		osDelayUntil(next_tick);
 80035bc:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80035be:	f013 fa9d 	bl	8016afc <osDelayUntil>
		if (0x1 && xQueuePeek(cell_voltages_queue, &cell_voltages, 0)
 80035c2:	e682      	b.n	80032ca <start_SM_task+0x92>
 80035c4:	f3af 8000 	nop.w
 80035c8:	66666666 	.word	0x66666666
 80035cc:	402a6666 	.word	0x402a6666
 80035d0:	33333334 	.word	0x33333334
 80035d4:	40805733 	.word	0x40805733
 80035d8:	2001b6f8 	.word	0x2001b6f8
 80035dc:	2001b5c4 	.word	0x2001b5c4
 80035e0:	2001b748 	.word	0x2001b748
 80035e4:	2001b5d8 	.word	0x2001b5d8
 80035e8:	2001b738 	.word	0x2001b738
 80035ec:	2001b5f4 	.word	0x2001b5f4
 80035f0:	2001b718 	.word	0x2001b718
 80035f4:	2001b5c8 	.word	0x2001b5c8
 80035f8:	2001b75c 	.word	0x2001b75c
 80035fc:	2001b5e8 	.word	0x2001b5e8

08003600 <start_IMD_task>:
	}
}

void start_IMD_task(void *argument) {
 8003600:	b5b0      	push	{r4, r5, r7, lr}
 8003602:	b08a      	sub	sp, #40	; 0x28
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 8003608:	4b2f      	ldr	r3, [pc, #188]	; (80036c8 <start_IMD_task+0xc8>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t tick_increment = TICK2HZ * IMD_task_info.periodicity;
 800360e:	4b2f      	ldr	r3, [pc, #188]	; (80036cc <start_IMD_task+0xcc>)
 8003610:	4618      	mov	r0, r3
 8003612:	f7fc ff8b 	bl	800052c <__aeabi_f2d>
 8003616:	a32a      	add	r3, pc, #168	; (adr r3, 80036c0 <start_IMD_task+0xc0>)
 8003618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800361c:	f7fc ffde 	bl	80005dc <__aeabi_dmul>
 8003620:	4602      	mov	r2, r0
 8003622:	460b      	mov	r3, r1
 8003624:	4610      	mov	r0, r2
 8003626:	4619      	mov	r1, r3
 8003628:	f7fd fab0 	bl	8000b8c <__aeabi_d2uiz>
 800362c:	4603      	mov	r3, r0
 800362e:	623b      	str	r3, [r7, #32]

	/* Make task-specific structures */
	IMD_t IMD;
	initialize_IMD(&htim2);
 8003630:	4827      	ldr	r0, [pc, #156]	; (80036d0 <start_IMD_task+0xd0>)
 8003632:	f7fe fb49 	bl	8001cc8 <initialize_IMD>

	/* Wait until offset */
	next_tick += TICK2HZ * IMD_task_info.offset;
 8003636:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003638:	f7fc ff56 	bl	80004e8 <__aeabi_ui2d>
 800363c:	4604      	mov	r4, r0
 800363e:	460d      	mov	r5, r1
 8003640:	f04f 0300 	mov.w	r3, #0
 8003644:	4618      	mov	r0, r3
 8003646:	f7fc ff71 	bl	800052c <__aeabi_f2d>
 800364a:	a31d      	add	r3, pc, #116	; (adr r3, 80036c0 <start_IMD_task+0xc0>)
 800364c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003650:	f7fc ffc4 	bl	80005dc <__aeabi_dmul>
 8003654:	4602      	mov	r2, r0
 8003656:	460b      	mov	r3, r1
 8003658:	4620      	mov	r0, r4
 800365a:	4629      	mov	r1, r5
 800365c:	f7fc fe08 	bl	8000270 <__adddf3>
 8003660:	4602      	mov	r2, r0
 8003662:	460b      	mov	r3, r1
 8003664:	4610      	mov	r0, r2
 8003666:	4619      	mov	r1, r3
 8003668:	f7fd fa90 	bl	8000b8c <__aeabi_d2uiz>
 800366c:	4603      	mov	r3, r0
 800366e:	627b      	str	r3, [r7, #36]	; 0x24
	osDelayUntil(next_tick);
 8003670:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003672:	f013 fa43 	bl	8016afc <osDelayUntil>

	for (;;) {
		/* Enter periodic behaviour */

		if (xQueuePeek(IMD_queue, &IMD, 0)) {
 8003676:	4b17      	ldr	r3, [pc, #92]	; (80036d4 <start_IMD_task+0xd4>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f107 0108 	add.w	r1, r7, #8
 800367e:	2200      	movs	r2, #0
 8003680:	4618      	mov	r0, r3
 8003682:	f013 ff7b 	bl	801757c <xQueuePeek>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d00e      	beq.n	80036aa <start_IMD_task+0xaa>
			uint8_t frequency_range = (uint8_t) (IMD.frequency / 10);
 800368c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003690:	f04f 0200 	mov.w	r2, #0
 8003694:	4b10      	ldr	r3, [pc, #64]	; (80036d8 <start_IMD_task+0xd8>)
 8003696:	f7fd f8cb 	bl	8000830 <__aeabi_ddiv>
 800369a:	4602      	mov	r2, r0
 800369c:	460b      	mov	r3, r1
 800369e:	4610      	mov	r0, r2
 80036a0:	4619      	mov	r1, r3
 80036a2:	f7fd fa73 	bl	8000b8c <__aeabi_d2uiz>
 80036a6:	4603      	mov	r3, r0
 80036a8:	77fb      	strb	r3, [r7, #31]

		}

		/* Wait until next period */
		next_tick += tick_increment;
 80036aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036ac:	6a3b      	ldr	r3, [r7, #32]
 80036ae:	4413      	add	r3, r2
 80036b0:	627b      	str	r3, [r7, #36]	; 0x24
		osDelayUntil(next_tick);
 80036b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80036b4:	f013 fa22 	bl	8016afc <osDelayUntil>
		if (xQueuePeek(IMD_queue, &IMD, 0)) {
 80036b8:	e7dd      	b.n	8003676 <start_IMD_task+0x76>
 80036ba:	bf00      	nop
 80036bc:	f3af 8000 	nop.w
 80036c0:	aaaaaaab 	.word	0xaaaaaaab
 80036c4:	408a0aaa 	.word	0x408a0aaa
 80036c8:	2001b79c 	.word	0x2001b79c
 80036cc:	3dcccccd 	.word	0x3dcccccd
 80036d0:	2001c080 	.word	0x2001c080
 80036d4:	2001b5d4 	.word	0x2001b5d4
 80036d8:	40240000 	.word	0x40240000
 80036dc:	00000000 	.word	0x00000000

080036e0 <start_GPIO_task>:
	}
}

void start_GPIO_task(void *argument) {
 80036e0:	b5b0      	push	{r4, r5, r7, lr}
 80036e2:	b086      	sub	sp, #24
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 80036e8:	4b35      	ldr	r3, [pc, #212]	; (80037c0 <start_GPIO_task+0xe0>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	617b      	str	r3, [r7, #20]
	uint32_t tick_increment = TICK2HZ * GPIO_task_info.periodicity;
 80036ee:	4b35      	ldr	r3, [pc, #212]	; (80037c4 <start_GPIO_task+0xe4>)
 80036f0:	4618      	mov	r0, r3
 80036f2:	f7fc ff1b 	bl	800052c <__aeabi_f2d>
 80036f6:	a330      	add	r3, pc, #192	; (adr r3, 80037b8 <start_GPIO_task+0xd8>)
 80036f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036fc:	f7fc ff6e 	bl	80005dc <__aeabi_dmul>
 8003700:	4602      	mov	r2, r0
 8003702:	460b      	mov	r3, r1
 8003704:	4610      	mov	r0, r2
 8003706:	4619      	mov	r1, r3
 8003708:	f7fd fa40 	bl	8000b8c <__aeabi_d2uiz>
 800370c:	4603      	mov	r3, r0
 800370e:	613b      	str	r3, [r7, #16]

	/* Make task-specific structures */
	GPIO_t GPIO;

	/* Wait until offset */
	next_tick += TICK2HZ * GPIO_task_info.offset;
 8003710:	6978      	ldr	r0, [r7, #20]
 8003712:	f7fc fee9 	bl	80004e8 <__aeabi_ui2d>
 8003716:	4604      	mov	r4, r0
 8003718:	460d      	mov	r5, r1
 800371a:	f04f 0300 	mov.w	r3, #0
 800371e:	4618      	mov	r0, r3
 8003720:	f7fc ff04 	bl	800052c <__aeabi_f2d>
 8003724:	a324      	add	r3, pc, #144	; (adr r3, 80037b8 <start_GPIO_task+0xd8>)
 8003726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800372a:	f7fc ff57 	bl	80005dc <__aeabi_dmul>
 800372e:	4602      	mov	r2, r0
 8003730:	460b      	mov	r3, r1
 8003732:	4620      	mov	r0, r4
 8003734:	4629      	mov	r1, r5
 8003736:	f7fc fd9b 	bl	8000270 <__adddf3>
 800373a:	4602      	mov	r2, r0
 800373c:	460b      	mov	r3, r1
 800373e:	4610      	mov	r0, r2
 8003740:	4619      	mov	r1, r3
 8003742:	f7fd fa23 	bl	8000b8c <__aeabi_d2uiz>
 8003746:	4603      	mov	r3, r0
 8003748:	617b      	str	r3, [r7, #20]
	osDelayUntil(next_tick);
 800374a:	6978      	ldr	r0, [r7, #20]
 800374c:	f013 f9d6 	bl	8016afc <osDelayUntil>

	for (;;) {
		/* Enter periodic behaviour */
		GPIO.AMS_error_latched = get_ams_error_latched_ext();
 8003750:	f000 fd74 	bl	800423c <get_ams_error_latched_ext>
 8003754:	4603      	mov	r3, r0
 8003756:	723b      	strb	r3, [r7, #8]
		GPIO.IMD_error_latched = get_imd_error_latched_ext();
 8003758:	f000 fd90 	bl	800427c <get_imd_error_latched_ext>
 800375c:	4603      	mov	r3, r0
 800375e:	727b      	strb	r3, [r7, #9]
		GPIO.SC_probe = get_sc_probe_ext();
 8003760:	f000 fd98 	bl	8004294 <get_sc_probe_ext>
 8003764:	4603      	mov	r3, r0
 8003766:	72bb      	strb	r3, [r7, #10]
		GPIO.IMD_ok = get_imd_ok_ext();
 8003768:	f000 fda4 	bl	80042b4 <get_imd_ok_ext>
 800376c:	4603      	mov	r3, r0
 800376e:	72fb      	strb	r3, [r7, #11]
		GPIO.AIR_plus_closed = get_air_plus_ext();
 8003770:	f000 fcf8 	bl	8004164 <get_air_plus_ext>
 8003774:	4603      	mov	r3, r0
 8003776:	733b      	strb	r3, [r7, #12]
		GPIO.AIR_minus_closed = get_air_minus_ext();
 8003778:	f000 fd18 	bl	80041ac <get_air_minus_ext>
 800377c:	4603      	mov	r3, r0
 800377e:	737b      	strb	r3, [r7, #13]
		GPIO.precharge_closed = get_precharge_ext();
 8003780:	f000 fd38 	bl	80041f4 <get_precharge_ext>
 8003784:	4603      	mov	r3, r0
 8003786:	73bb      	strb	r3, [r7, #14]

		if (!GPIO.IMD_ok) {
 8003788:	7afb      	ldrb	r3, [r7, #11]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d102      	bne.n	8003794 <start_GPIO_task+0xb4>
			__raise_error(ERROR_IMD);
 800378e:	2002      	movs	r0, #2
 8003790:	f7ff fd38 	bl	8003204 <__raise_error>
		}

		xQueueOverwrite(GPIO_queue, &GPIO);
 8003794:	4b0c      	ldr	r3, [pc, #48]	; (80037c8 <start_GPIO_task+0xe8>)
 8003796:	6818      	ldr	r0, [r3, #0]
 8003798:	f107 0108 	add.w	r1, r7, #8
 800379c:	2302      	movs	r3, #2
 800379e:	2200      	movs	r2, #0
 80037a0:	f013 fc06 	bl	8016fb0 <xQueueGenericSend>

		/* Wait until next period */
		next_tick += tick_increment;
 80037a4:	697a      	ldr	r2, [r7, #20]
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	4413      	add	r3, r2
 80037aa:	617b      	str	r3, [r7, #20]
		osDelayUntil(next_tick);
 80037ac:	6978      	ldr	r0, [r7, #20]
 80037ae:	f013 f9a5 	bl	8016afc <osDelayUntil>
		GPIO.AMS_error_latched = get_ams_error_latched_ext();
 80037b2:	e7cd      	b.n	8003750 <start_GPIO_task+0x70>
 80037b4:	f3af 8000 	nop.w
 80037b8:	aaaaaaab 	.word	0xaaaaaaab
 80037bc:	408a0aaa 	.word	0x408a0aaa
 80037c0:	2001b79c 	.word	0x2001b79c
 80037c4:	3dcccccd 	.word	0x3dcccccd
 80037c8:	2001b5ec 	.word	0x2001b5ec
 80037cc:	00000000 	.word	0x00000000

080037d0 <start_ADC_task>:
	}
}

void start_ADC_task(void *argument) {
 80037d0:	b5b0      	push	{r4, r5, r7, lr}
 80037d2:	b0ac      	sub	sp, #176	; 0xb0
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 80037d8:	4b31      	ldr	r3, [pc, #196]	; (80038a0 <start_ADC_task+0xd0>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	uint32_t tick_increment = TICK2HZ * ADC_task_info.periodicity;
 80037e0:	4b30      	ldr	r3, [pc, #192]	; (80038a4 <start_ADC_task+0xd4>)
 80037e2:	4618      	mov	r0, r3
 80037e4:	f7fc fea2 	bl	800052c <__aeabi_f2d>
 80037e8:	a32b      	add	r3, pc, #172	; (adr r3, 8003898 <start_ADC_task+0xc8>)
 80037ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ee:	f7fc fef5 	bl	80005dc <__aeabi_dmul>
 80037f2:	4602      	mov	r2, r0
 80037f4:	460b      	mov	r3, r1
 80037f6:	4610      	mov	r0, r2
 80037f8:	4619      	mov	r1, r3
 80037fa:	f7fd f9c7 	bl	8000b8c <__aeabi_d2uiz>
 80037fe:	4603      	mov	r3, r0
 8003800:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

	/* Make task-specific structures */
	uint16_t adc_readings[4 * 16];
	ADC_initialize(&htim3);
 8003804:	4828      	ldr	r0, [pc, #160]	; (80038a8 <start_ADC_task+0xd8>)
 8003806:	f7fe ff2f 	bl	8002668 <ADC_initialize>
	temperatures_t temperatures;

	/* Wait until offset */
	next_tick += TICK2HZ * ADC_task_info.offset;
 800380a:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800380e:	f7fc fe6b 	bl	80004e8 <__aeabi_ui2d>
 8003812:	4604      	mov	r4, r0
 8003814:	460d      	mov	r5, r1
 8003816:	f04f 0300 	mov.w	r3, #0
 800381a:	4618      	mov	r0, r3
 800381c:	f7fc fe86 	bl	800052c <__aeabi_f2d>
 8003820:	a31d      	add	r3, pc, #116	; (adr r3, 8003898 <start_ADC_task+0xc8>)
 8003822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003826:	f7fc fed9 	bl	80005dc <__aeabi_dmul>
 800382a:	4602      	mov	r2, r0
 800382c:	460b      	mov	r3, r1
 800382e:	4620      	mov	r0, r4
 8003830:	4629      	mov	r1, r5
 8003832:	f7fc fd1d 	bl	8000270 <__adddf3>
 8003836:	4602      	mov	r2, r0
 8003838:	460b      	mov	r3, r1
 800383a:	4610      	mov	r0, r2
 800383c:	4619      	mov	r1, r3
 800383e:	f7fd f9a5 	bl	8000b8c <__aeabi_d2uiz>
 8003842:	4603      	mov	r3, r0
 8003844:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	osDelayUntil(next_tick);
 8003848:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800384c:	f013 f956 	bl	8016afc <osDelayUntil>

	for (;;) {
		/* Enter periodic behaviour */
		ADC_step((uint32_t*) &adc_readings, sizeof((uint32_t*) adc_readings));
 8003850:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003854:	2104      	movs	r1, #4
 8003856:	4618      	mov	r0, r3
 8003858:	f7fe ff1a 	bl	8002690 <ADC_step>
		interpret_ADC_buffer(&temperatures, adc_readings, 16);
 800385c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8003860:	f107 0308 	add.w	r3, r7, #8
 8003864:	2210      	movs	r2, #16
 8003866:	4618      	mov	r0, r3
 8003868:	f7fe fd46 	bl	80022f8 <interpret_ADC_buffer>

		xQueueOverwrite(temperatures_queue, &temperatures);
 800386c:	4b0f      	ldr	r3, [pc, #60]	; (80038ac <start_ADC_task+0xdc>)
 800386e:	6818      	ldr	r0, [r3, #0]
 8003870:	f107 0108 	add.w	r1, r7, #8
 8003874:	2302      	movs	r3, #2
 8003876:	2200      	movs	r2, #0
 8003878:	f013 fb9a 	bl	8016fb0 <xQueueGenericSend>

		/* Wait until next period */
		next_tick += tick_increment;
 800387c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003880:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003884:	4413      	add	r3, r2
 8003886:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		osDelayUntil(next_tick);
 800388a:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800388e:	f013 f935 	bl	8016afc <osDelayUntil>
		ADC_step((uint32_t*) &adc_readings, sizeof((uint32_t*) adc_readings));
 8003892:	e7dd      	b.n	8003850 <start_ADC_task+0x80>
 8003894:	f3af 8000 	nop.w
 8003898:	aaaaaaab 	.word	0xaaaaaaab
 800389c:	408a0aaa 	.word	0x408a0aaa
 80038a0:	2001b79c 	.word	0x2001b79c
 80038a4:	3dcccccd 	.word	0x3dcccccd
 80038a8:	2001bff0 	.word	0x2001bff0
 80038ac:	2001b5cc 	.word	0x2001b5cc

080038b0 <start_COM_task>:
	}
}

void start_COM_task(void *argument) {
 80038b0:	b5b0      	push	{r4, r5, r7, lr}
 80038b2:	b090      	sub	sp, #64	; 0x40
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 80038b8:	4b81      	ldr	r3, [pc, #516]	; (8003ac0 <start_COM_task+0x210>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t tick_increment = TICK2HZ * COM_task_info.periodicity;
 80038be:	4b81      	ldr	r3, [pc, #516]	; (8003ac4 <start_COM_task+0x214>)
 80038c0:	4618      	mov	r0, r3
 80038c2:	f7fc fe33 	bl	800052c <__aeabi_f2d>
 80038c6:	a37c      	add	r3, pc, #496	; (adr r3, 8003ab8 <start_COM_task+0x208>)
 80038c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038cc:	f7fc fe86 	bl	80005dc <__aeabi_dmul>
 80038d0:	4602      	mov	r2, r0
 80038d2:	460b      	mov	r3, r1
 80038d4:	4610      	mov	r0, r2
 80038d6:	4619      	mov	r1, r3
 80038d8:	f7fd f958 	bl	8000b8c <__aeabi_d2uiz>
 80038dc:	4603      	mov	r3, r0
 80038de:	633b      	str	r3, [r7, #48]	; 0x30
	error_t cell_temperatures_error;
	error_t accumulator_current_error;
	uint8_t cell_data_valid;
	uint8_t accumulator_current_valid;

	const float voltage_time_constraint = 0.5;
 80038e0:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 80038e4:	62fb      	str	r3, [r7, #44]	; 0x2c
	const float temperature_time_constraint = 1.0;
 80038e6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80038ea:	62bb      	str	r3, [r7, #40]	; 0x28
	const float current_time_constraint = 0.5;
 80038ec:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 80038f0:	627b      	str	r3, [r7, #36]	; 0x24

	uint16_t voltage_sample_constraint = (voltage_time_constraint
			/ COM_task_info.periodicity);
 80038f2:	eddf 6a75 	vldr	s13, [pc, #468]	; 8003ac8 <start_COM_task+0x218>
 80038f6:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80038fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
	uint16_t voltage_sample_constraint = (voltage_time_constraint
 80038fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003902:	ee17 3a90 	vmov	r3, s15
 8003906:	877b      	strh	r3, [r7, #58]	; 0x3a
	if (voltage_sample_constraint < 1) {
 8003908:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800390a:	2b00      	cmp	r3, #0
 800390c:	d101      	bne.n	8003912 <start_COM_task+0x62>
		voltage_sample_constraint = 1;
 800390e:	2301      	movs	r3, #1
 8003910:	877b      	strh	r3, [r7, #58]	; 0x3a
	}

	uint16_t temperature_sample_constraint = (temperature_time_constraint
			/ COM_task_info.periodicity);
 8003912:	eddf 6a6d 	vldr	s13, [pc, #436]	; 8003ac8 <start_COM_task+0x218>
 8003916:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800391a:	eec7 7a26 	vdiv.f32	s15, s14, s13
	uint16_t temperature_sample_constraint = (temperature_time_constraint
 800391e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003922:	ee17 3a90 	vmov	r3, s15
 8003926:	873b      	strh	r3, [r7, #56]	; 0x38
	if (temperature_sample_constraint < 1) {
 8003928:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800392a:	2b00      	cmp	r3, #0
 800392c:	d101      	bne.n	8003932 <start_COM_task+0x82>
		temperature_sample_constraint = 1;
 800392e:	2301      	movs	r3, #1
 8003930:	873b      	strh	r3, [r7, #56]	; 0x38
	}

	uint16_t current_sample_constraint = (current_time_constraint
			/ COM_task_info.periodicity);
 8003932:	eddf 6a65 	vldr	s13, [pc, #404]	; 8003ac8 <start_COM_task+0x218>
 8003936:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800393a:	eec7 7a26 	vdiv.f32	s15, s14, s13
	uint16_t current_sample_constraint = (current_time_constraint
 800393e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003942:	ee17 3a90 	vmov	r3, s15
 8003946:	86fb      	strh	r3, [r7, #54]	; 0x36
	if (current_sample_constraint < 1) {
 8003948:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800394a:	2b00      	cmp	r3, #0
 800394c:	d101      	bne.n	8003952 <start_COM_task+0xa2>
		current_sample_constraint = 1;
 800394e:	2301      	movs	r3, #1
 8003950:	86fb      	strh	r3, [r7, #54]	; 0x36
	}

	/* Wait until offset */
	next_tick += TICK2HZ * COM_task_info.offset;
 8003952:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003954:	f7fc fdc8 	bl	80004e8 <__aeabi_ui2d>
 8003958:	4604      	mov	r4, r0
 800395a:	460d      	mov	r5, r1
 800395c:	f04f 0300 	mov.w	r3, #0
 8003960:	4618      	mov	r0, r3
 8003962:	f7fc fde3 	bl	800052c <__aeabi_f2d>
 8003966:	a354      	add	r3, pc, #336	; (adr r3, 8003ab8 <start_COM_task+0x208>)
 8003968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800396c:	f7fc fe36 	bl	80005dc <__aeabi_dmul>
 8003970:	4602      	mov	r2, r0
 8003972:	460b      	mov	r3, r1
 8003974:	4620      	mov	r0, r4
 8003976:	4629      	mov	r1, r5
 8003978:	f7fc fc7a 	bl	8000270 <__adddf3>
 800397c:	4602      	mov	r2, r0
 800397e:	460b      	mov	r3, r1
 8003980:	4610      	mov	r0, r2
 8003982:	4619      	mov	r1, r3
 8003984:	f7fd f902 	bl	8000b8c <__aeabi_d2uiz>
 8003988:	4603      	mov	r3, r0
 800398a:	63fb      	str	r3, [r7, #60]	; 0x3c
	osDelayUntil(next_tick);
 800398c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800398e:	f013 f8b5 	bl	8016afc <osDelayUntil>

	__wait_for_data(WAIT_FOR_ACCUMULATOR_CURRENT);
 8003992:	2008      	movs	r0, #8
 8003994:	f7ff fb70 	bl	8003078 <__wait_for_data>

	for (;;) {
		/* Enter periodic behaviour */
		/* Take the queue elements so that other tasks may not */
		xQueueReceive(cell_voltages_queue, &cell_voltages, 0);
 8003998:	4b4c      	ldr	r3, [pc, #304]	; (8003acc <start_COM_task+0x21c>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f107 0118 	add.w	r1, r7, #24
 80039a0:	2200      	movs	r2, #0
 80039a2:	4618      	mov	r0, r3
 80039a4:	f013 fcda 	bl	801735c <xQueueReceive>
		xQueueReceive(cell_temperatures_queue, &cell_temperatures, 0);
 80039a8:	4b49      	ldr	r3, [pc, #292]	; (8003ad0 <start_COM_task+0x220>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f107 0114 	add.w	r1, r7, #20
 80039b0:	2200      	movs	r2, #0
 80039b2:	4618      	mov	r0, r3
 80039b4:	f013 fcd2 	bl	801735c <xQueueReceive>

		/* Get new data (indirectly) form CAN */
		accumulator_current_valid = xQueuePeek(accumulator_current_queue,
 80039b8:	4b46      	ldr	r3, [pc, #280]	; (8003ad4 <start_COM_task+0x224>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f107 0108 	add.w	r1, r7, #8
 80039c0:	2200      	movs	r2, #0
 80039c2:	4618      	mov	r0, r3
 80039c4:	f013 fdda 	bl	801757c <xQueuePeek>
 80039c8:	4603      	mov	r3, r0
 80039ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				&accumulator_current, 0);
		/* Get new data over isoSPI */
		LTC_acquire_data(1);
 80039ce:	2001      	movs	r0, #1
 80039d0:	f000 fdec 	bl	80045ac <LTC_acquire_data>

		/* Get data from the program */
#ifdef SIMULATION
		cell_voltages = SIM0_Y.cell_voltages;
 80039d4:	4b40      	ldr	r3, [pc, #256]	; (8003ad8 <start_COM_task+0x228>)
 80039d6:	61bb      	str	r3, [r7, #24]
		cell_temperatures = SIM0_Y.cell_temperatures;
 80039d8:	4b40      	ldr	r3, [pc, #256]	; (8003adc <start_COM_task+0x22c>)
 80039da:	617b      	str	r3, [r7, #20]
		cell_data_valid = 1;
 80039dc:	2301      	movs	r3, #1
 80039de:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		cell_temperatures = LTC_temperatures;
		cell_data_valid = LTC_data_valid;
#endif

		/* If new cell data is available, supply the system with it */
		if (cell_data_valid) {
 80039e2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d010      	beq.n	8003a0c <start_COM_task+0x15c>
			xQueueOverwrite(cell_voltages_queue, &cell_voltages);
 80039ea:	4b38      	ldr	r3, [pc, #224]	; (8003acc <start_COM_task+0x21c>)
 80039ec:	6818      	ldr	r0, [r3, #0]
 80039ee:	f107 0118 	add.w	r1, r7, #24
 80039f2:	2302      	movs	r3, #2
 80039f4:	2200      	movs	r2, #0
 80039f6:	f013 fadb 	bl	8016fb0 <xQueueGenericSend>
			xQueueOverwrite(cell_temperatures_queue, &cell_temperatures);
 80039fa:	4b35      	ldr	r3, [pc, #212]	; (8003ad0 <start_COM_task+0x220>)
 80039fc:	6818      	ldr	r0, [r3, #0]
 80039fe:	f107 0114 	add.w	r1, r7, #20
 8003a02:	2302      	movs	r3, #2
 8003a04:	2200      	movs	r2, #0
 8003a06:	f013 fad3 	bl	8016fb0 <xQueueGenericSend>
 8003a0a:	e002      	b.n	8003a12 <start_COM_task+0x162>
		} else {
			__raise_error(ERROR_NO_LTC_DATA);
 8003a0c:	200a      	movs	r0, #10
 8003a0e:	f7ff fbf9 	bl	8003204 <__raise_error>
		}

		/* Raise an error if cell voltage time constraints are not met,
		 * or if there is no data being received */
		cell_voltages_error = COM_voltages_ok(cell_voltages,
 8003a12:	69bb      	ldr	r3, [r7, #24]
 8003a14:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8003a16:	4611      	mov	r1, r2
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f7fd ff5b 	bl	80018d4 <COM_voltages_ok>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
				voltage_sample_constraint);

		if (cell_voltages_error) {
 8003a24:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d004      	beq.n	8003a36 <start_COM_task+0x186>
			__raise_error(cell_voltages_error);
 8003a2c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003a30:	4618      	mov	r0, r3
 8003a32:	f7ff fbe7 	bl	8003204 <__raise_error>
		}

		/* Raise an error if cell temperature time constraints are not met,
		 * or if there is no data being received */
		cell_temperatures_error = COM_temperatures_ok(cell_temperatures,
 8003a36:	697a      	ldr	r2, [r7, #20]
 8003a38:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	bf0c      	ite	eq
 8003a3e:	2301      	moveq	r3, #1
 8003a40:	2300      	movne	r3, #0
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	4619      	mov	r1, r3
 8003a48:	4610      	mov	r0, r2
 8003a4a:	f7fd ffaf 	bl	80019ac <COM_temperatures_ok>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	f887 3020 	strb.w	r3, [r7, #32]
				!temperature_sample_constraint);

		if (cell_temperatures_error) {
 8003a54:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d004      	beq.n	8003a66 <start_COM_task+0x1b6>
			__raise_error(cell_temperatures_error);
 8003a5c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003a60:	4618      	mov	r0, r3
 8003a62:	f7ff fbcf 	bl	8003204 <__raise_error>
		}

		/* If no new accumulator current was gathered, raise an error */
		if (!accumulator_current_valid) {
 8003a66:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d102      	bne.n	8003a74 <start_COM_task+0x1c4>
			__raise_error(ERROR_NO_CURRENT_DATA);
 8003a6e:	200b      	movs	r0, #11
 8003a70:	f7ff fbc8 	bl	8003204 <__raise_error>
		}

		/* Raise an error if accumulator current time constraints are not met,
		 * or if there is no data being received */
		accumulator_current_error = COM_current_ok(&accumulator_current,
 8003a74:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003a76:	f107 0308 	add.w	r3, r7, #8
 8003a7a:	4611      	mov	r1, r2
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f7fe f801 	bl	8001a84 <COM_current_ok>
 8003a82:	4603      	mov	r3, r0
 8003a84:	77fb      	strb	r3, [r7, #31]
				current_sample_constraint);

		if (accumulator_current_error) {
 8003a86:	7ffb      	ldrb	r3, [r7, #31]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d008      	beq.n	8003a9e <start_COM_task+0x1ee>
			__raise_error(accumulator_current_error);
 8003a8c:	7ffb      	ldrb	r3, [r7, #31]
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f7ff fbb8 	bl	8003204 <__raise_error>
		}
		/* Wait until next period */
		while (next_tick < osKernelGetTickCount()) {
 8003a94:	e003      	b.n	8003a9e <start_COM_task+0x1ee>
			next_tick += tick_increment;
 8003a96:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a9a:	4413      	add	r3, r2
 8003a9c:	63fb      	str	r3, [r7, #60]	; 0x3c
		while (next_tick < osKernelGetTickCount()) {
 8003a9e:	f012 ff6b 	bl	8016978 <osKernelGetTickCount>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d3f5      	bcc.n	8003a96 <start_COM_task+0x1e6>
		}
		osDelayUntil(next_tick);
 8003aaa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003aac:	f013 f826 	bl	8016afc <osDelayUntil>
		xQueueReceive(cell_voltages_queue, &cell_voltages, 0);
 8003ab0:	e772      	b.n	8003998 <start_COM_task+0xe8>
 8003ab2:	bf00      	nop
 8003ab4:	f3af 8000 	nop.w
 8003ab8:	aaaaaaab 	.word	0xaaaaaaab
 8003abc:	408a0aaa 	.word	0x408a0aaa
 8003ac0:	2001b79c 	.word	0x2001b79c
 8003ac4:	3dcccccd 	.word	0x3dcccccd
 8003ac8:	3dcccccd 	.word	0x3dcccccd
 8003acc:	2001b5c0 	.word	0x2001b5c0
 8003ad0:	2001b5dc 	.word	0x2001b5dc
 8003ad4:	2001b5fc 	.word	0x2001b5fc
 8003ad8:	2001d9e8 	.word	0x2001d9e8
 8003adc:	2001e5b8 	.word	0x2001e5b8

08003ae0 <start_CSE_task>:
		}
		osDelayUntil(next_tick);
	}
}

void start_CSE_task(void *argument) {
 8003ae0:	b5b0      	push	{r4, r5, r7, lr}
 8003ae2:	b090      	sub	sp, #64	; 0x40
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 8003ae8:	4b59      	ldr	r3, [pc, #356]	; (8003c50 <start_CSE_task+0x170>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t tick_increment = TICK2HZ * CSE_task_info.periodicity;
 8003aee:	4b59      	ldr	r3, [pc, #356]	; (8003c54 <start_CSE_task+0x174>)
 8003af0:	4618      	mov	r0, r3
 8003af2:	f7fc fd1b 	bl	800052c <__aeabi_f2d>
 8003af6:	a352      	add	r3, pc, #328	; (adr r3, 8003c40 <start_CSE_task+0x160>)
 8003af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003afc:	f7fc fd6e 	bl	80005dc <__aeabi_dmul>
 8003b00:	4602      	mov	r2, r0
 8003b02:	460b      	mov	r3, r1
 8003b04:	4610      	mov	r0, r2
 8003b06:	4619      	mov	r1, r3
 8003b08:	f7fd f840 	bl	8000b8c <__aeabi_d2uiz>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Make task-specific structures */
	CSE_initialize();
 8003b10:	f003 fa72 	bl	8006ff8 <CSE_initialize>
	double *cell_voltages;
	double accumulator_current;
	double mean_cell_voltage;

	/* Wait until offset */
	next_tick += TICK2HZ * CSE_task_info.offset;
 8003b14:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003b16:	f7fc fce7 	bl	80004e8 <__aeabi_ui2d>
 8003b1a:	4604      	mov	r4, r0
 8003b1c:	460d      	mov	r5, r1
 8003b1e:	f04f 0300 	mov.w	r3, #0
 8003b22:	4618      	mov	r0, r3
 8003b24:	f7fc fd02 	bl	800052c <__aeabi_f2d>
 8003b28:	a345      	add	r3, pc, #276	; (adr r3, 8003c40 <start_CSE_task+0x160>)
 8003b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b2e:	f7fc fd55 	bl	80005dc <__aeabi_dmul>
 8003b32:	4602      	mov	r2, r0
 8003b34:	460b      	mov	r3, r1
 8003b36:	4620      	mov	r0, r4
 8003b38:	4629      	mov	r1, r5
 8003b3a:	f7fc fb99 	bl	8000270 <__adddf3>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	460b      	mov	r3, r1
 8003b42:	4610      	mov	r0, r2
 8003b44:	4619      	mov	r1, r3
 8003b46:	f7fd f821 	bl	8000b8c <__aeabi_d2uiz>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	63fb      	str	r3, [r7, #60]	; 0x3c
	osDelayUntil(next_tick);
 8003b4e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003b50:	f012 ffd4 	bl	8016afc <osDelayUntil>

	__wait_for_data(WAIT_FOR_ALL);
 8003b54:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003b58:	f7ff fa8e 	bl	8003078 <__wait_for_data>

	for (;;) {
		/* Enter periodic behaviour */

		/* Collect cell voltages and accumulator current -- then calcualte SOC/SOH */
		if (xQueuePeek(accumulator_current_queue, &accumulator_current, 0)
 8003b5c:	4b3e      	ldr	r3, [pc, #248]	; (8003c58 <start_CSE_task+0x178>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f107 0108 	add.w	r1, r7, #8
 8003b64:	2200      	movs	r2, #0
 8003b66:	4618      	mov	r0, r3
 8003b68:	f013 fd08 	bl	801757c <xQueuePeek>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d05c      	beq.n	8003c2c <start_CSE_task+0x14c>
				&& xQueuePeek(cell_voltages_queue, &cell_voltages, 0)) {
 8003b72:	4b3a      	ldr	r3, [pc, #232]	; (8003c5c <start_CSE_task+0x17c>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f107 0114 	add.w	r1, r7, #20
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f013 fcfd 	bl	801757c <xQueuePeek>
 8003b82:	4603      	mov	r3, r0
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d051      	beq.n	8003c2c <start_CSE_task+0x14c>
			/*
			 * Calculate the mean cell voltage -- if the periodicity is high enough
			 * one might calculate them all individually at some point (and/or do them interleaving)
			 */
			mean_cell_voltage = 0;
 8003b88:	f04f 0200 	mov.w	r2, #0
 8003b8c:	f04f 0300 	mov.w	r3, #0
 8003b90:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
			for (int i = 0; i < 126; i++) {
 8003b94:	2300      	movs	r3, #0
 8003b96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b98:	e010      	b.n	8003bbc <start_CSE_task+0xdc>
				mean_cell_voltage += cell_voltages[i];
 8003b9a:	697a      	ldr	r2, [r7, #20]
 8003b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b9e:	00db      	lsls	r3, r3, #3
 8003ba0:	4413      	add	r3, r2
 8003ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ba6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8003baa:	f7fc fb61 	bl	8000270 <__adddf3>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	460b      	mov	r3, r1
 8003bb2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
			for (int i = 0; i < 126; i++) {
 8003bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bb8:	3301      	adds	r3, #1
 8003bba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bbe:	2b7d      	cmp	r3, #125	; 0x7d
 8003bc0:	ddeb      	ble.n	8003b9a <start_CSE_task+0xba>
			}
			mean_cell_voltage /= 126;
 8003bc2:	f04f 0200 	mov.w	r2, #0
 8003bc6:	4b26      	ldr	r3, [pc, #152]	; (8003c60 <start_CSE_task+0x180>)
 8003bc8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8003bcc:	f7fc fe30 	bl	8000830 <__aeabi_ddiv>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	460b      	mov	r3, r1
 8003bd4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

			CSE_U.current = accumulator_current;
 8003bd8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003bdc:	4921      	ldr	r1, [pc, #132]	; (8003c64 <start_CSE_task+0x184>)
 8003bde:	e9c1 2300 	strd	r2, r3, [r1]
			CSE_U.y = mean_cell_voltage;
 8003be2:	4920      	ldr	r1, [pc, #128]	; (8003c64 <start_CSE_task+0x184>)
 8003be4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003be8:	e9c1 2302 	strd	r2, r3, [r1, #8]

			CSE_step();
 8003bec:	f001 ff00 	bl	80059f0 <CSE_step>

			CSE.SOC = CSE_Y.soc;
 8003bf0:	4b1d      	ldr	r3, [pc, #116]	; (8003c68 <start_CSE_task+0x188>)
 8003bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bf6:	e9c7 2306 	strd	r2, r3, [r7, #24]
			CSE.SOH = CSE_Y.capacity / (6.6 * 3600);
 8003bfa:	4b1b      	ldr	r3, [pc, #108]	; (8003c68 <start_CSE_task+0x188>)
 8003bfc:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003c00:	a311      	add	r3, pc, #68	; (adr r3, 8003c48 <start_CSE_task+0x168>)
 8003c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c06:	f7fc fe13 	bl	8000830 <__aeabi_ddiv>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	460b      	mov	r3, r1
 8003c0e:	e9c7 2308 	strd	r2, r3, [r7, #32]
			xQueueOverwrite(CSE_queue, &CSE);
 8003c12:	4b16      	ldr	r3, [pc, #88]	; (8003c6c <start_CSE_task+0x18c>)
 8003c14:	6818      	ldr	r0, [r3, #0]
 8003c16:	f107 0118 	add.w	r1, r7, #24
 8003c1a:	2302      	movs	r3, #2
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f013 f9c7 	bl	8016fb0 <xQueueGenericSend>

		}

		/* Wait until next period */
		while (next_tick < osKernelGetTickCount()) {
 8003c22:	e003      	b.n	8003c2c <start_CSE_task+0x14c>
			next_tick += tick_increment;
 8003c24:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c28:	4413      	add	r3, r2
 8003c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
		while (next_tick < osKernelGetTickCount()) {
 8003c2c:	f012 fea4 	bl	8016978 <osKernelGetTickCount>
 8003c30:	4602      	mov	r2, r0
 8003c32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d3f5      	bcc.n	8003c24 <start_CSE_task+0x144>
		}
		osDelayUntil(next_tick);
 8003c38:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003c3a:	f012 ff5f 	bl	8016afc <osDelayUntil>
		if (xQueuePeek(accumulator_current_queue, &accumulator_current, 0)
 8003c3e:	e78d      	b.n	8003b5c <start_CSE_task+0x7c>
 8003c40:	aaaaaaab 	.word	0xaaaaaaab
 8003c44:	408a0aaa 	.word	0x408a0aaa
 8003c48:	00000000 	.word	0x00000000
 8003c4c:	40d73400 	.word	0x40d73400
 8003c50:	2001b79c 	.word	0x2001b79c
 8003c54:	3dcccccd 	.word	0x3dcccccd
 8003c58:	2001b5fc 	.word	0x2001b5fc
 8003c5c:	2001b5c0 	.word	0x2001b5c0
 8003c60:	405f8000 	.word	0x405f8000
 8003c64:	2001c0d8 	.word	0x2001c0d8
 8003c68:	2001c0c8 	.word	0x2001c0c8
 8003c6c:	2001b5f8 	.word	0x2001b5f8

08003c70 <start_COOL_task>:
	}
}

void start_COOL_task(void *argument) {
 8003c70:	b5b0      	push	{r4, r5, r7, lr}
 8003c72:	b09c      	sub	sp, #112	; 0x70
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 8003c78:	4b59      	ldr	r3, [pc, #356]	; (8003de0 <start_COOL_task+0x170>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	66fb      	str	r3, [r7, #108]	; 0x6c
	uint32_t tick_increment = TICK2HZ * COOL_task_info.periodicity;
 8003c7e:	4b59      	ldr	r3, [pc, #356]	; (8003de4 <start_COOL_task+0x174>)
 8003c80:	4618      	mov	r0, r3
 8003c82:	f7fc fc53 	bl	800052c <__aeabi_f2d>
 8003c86:	a354      	add	r3, pc, #336	; (adr r3, 8003dd8 <start_COOL_task+0x168>)
 8003c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c8c:	f7fc fca6 	bl	80005dc <__aeabi_dmul>
 8003c90:	4602      	mov	r2, r0
 8003c92:	460b      	mov	r3, r1
 8003c94:	4610      	mov	r0, r2
 8003c96:	4619      	mov	r1, r3
 8003c98:	f7fc ff78 	bl	8000b8c <__aeabi_d2uiz>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	65bb      	str	r3, [r7, #88]	; 0x58

	/* Make task-specific structures */
	PID_t PID;
	pPID_t pPID;

	PID_initialize(&PID, // *ptr
 8003ca0:	f107 031c 	add.w	r3, r7, #28
 8003ca4:	eddf 2a50 	vldr	s5, [pc, #320]	; 8003de8 <start_COOL_task+0x178>
 8003ca8:	eeb3 2a04 	vmov.f32	s4, #52	; 0x41a00000  20.0
 8003cac:	eddf 1a4f 	vldr	s3, [pc, #316]	; 8003dec <start_COOL_task+0x17c>
 8003cb0:	ed9f 1a4e 	vldr	s2, [pc, #312]	; 8003dec <start_COOL_task+0x17c>
 8003cb4:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 8003cb8:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f7fe f892 	bl	8001de6 <PID_initialize>
			0,			// Integral gain
			0,			// Differential gain
			20,			// Lower PID output bound
			100			// Upper PID output bound
			);
	FAN_initialize(&htim1);
 8003cc2:	484b      	ldr	r0, [pc, #300]	; (8003df0 <start_COOL_task+0x180>)
 8003cc4:	f7fd ff30 	bl	8001b28 <FAN_initialize>

	double *cell_temperatures;
	double max_cell_temperature;

	/* Wait until offset */
	next_tick += TICK2HZ * COOL_task_info.offset;
 8003cc8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003cca:	f7fc fc0d 	bl	80004e8 <__aeabi_ui2d>
 8003cce:	4604      	mov	r4, r0
 8003cd0:	460d      	mov	r5, r1
 8003cd2:	f04f 0300 	mov.w	r3, #0
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f7fc fc28 	bl	800052c <__aeabi_f2d>
 8003cdc:	a33e      	add	r3, pc, #248	; (adr r3, 8003dd8 <start_COOL_task+0x168>)
 8003cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ce2:	f7fc fc7b 	bl	80005dc <__aeabi_dmul>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	460b      	mov	r3, r1
 8003cea:	4620      	mov	r0, r4
 8003cec:	4629      	mov	r1, r5
 8003cee:	f7fc fabf 	bl	8000270 <__adddf3>
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	460b      	mov	r3, r1
 8003cf6:	4610      	mov	r0, r2
 8003cf8:	4619      	mov	r1, r3
 8003cfa:	f7fc ff47 	bl	8000b8c <__aeabi_d2uiz>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	66fb      	str	r3, [r7, #108]	; 0x6c
	osDelayUntil(next_tick);
 8003d02:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003d04:	f012 fefa 	bl	8016afc <osDelayUntil>

	__wait_for_data(WAIT_FOR_CELL_TEMPERATURES);
 8003d08:	2002      	movs	r0, #2
 8003d0a:	f7ff f9b5 	bl	8003078 <__wait_for_data>

	for (;;) {
		/* Enter periodic behaviour */

		/* If the cell temperatures are received one may input them into the PID */
		if (xQueuePeek(cell_temperatures_queue, &cell_temperatures, 0)) {
 8003d0e:	4b39      	ldr	r3, [pc, #228]	; (8003df4 <start_COOL_task+0x184>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f107 010c 	add.w	r1, r7, #12
 8003d16:	2200      	movs	r2, #0
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f013 fc2f 	bl	801757c <xQueuePeek>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d04f      	beq.n	8003dc4 <start_COOL_task+0x154>
			/* Calculate the maximum cell temperature */
			max_cell_temperature = 0;
 8003d24:	f04f 0200 	mov.w	r2, #0
 8003d28:	f04f 0300 	mov.w	r3, #0
 8003d2c:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
			for (int i = 0; i < 126; i++) {
 8003d30:	2300      	movs	r3, #0
 8003d32:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d34:	e010      	b.n	8003d58 <start_COOL_task+0xe8>
				max_cell_temperature += cell_temperatures[i];
 8003d36:	68fa      	ldr	r2, [r7, #12]
 8003d38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d3a:	00db      	lsls	r3, r3, #3
 8003d3c:	4413      	add	r3, r2
 8003d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d42:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003d46:	f7fc fa93 	bl	8000270 <__adddf3>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	460b      	mov	r3, r1
 8003d4e:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
			for (int i = 0; i < 126; i++) {
 8003d52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d54:	3301      	adds	r3, #1
 8003d56:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d5a:	2b7d      	cmp	r3, #125	; 0x7d
 8003d5c:	ddeb      	ble.n	8003d36 <start_COOL_task+0xc6>
			}
			max_cell_temperature /= 126;
 8003d5e:	f04f 0200 	mov.w	r2, #0
 8003d62:	4b25      	ldr	r3, [pc, #148]	; (8003df8 <start_COOL_task+0x188>)
 8003d64:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003d68:	f7fc fd62 	bl	8000830 <__aeabi_ddiv>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	460b      	mov	r3, r1
 8003d70:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60

			/* Progress the PID and set the fan duty cycle accordingly */
			PID_progress(&PID, max_cell_temperature);
 8003d74:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003d78:	f7fc ff28 	bl	8000bcc <__aeabi_d2f>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	f107 031c 	add.w	r3, r7, #28
 8003d82:	ee00 2a10 	vmov	s0, r2
 8003d86:	4618      	mov	r0, r3
 8003d88:	f7fd ffbe 	bl	8001d08 <PID_progress>
			FAN_duty_cycle(&htim1, PID.output);
 8003d8c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003d90:	eeb0 0a67 	vmov.f32	s0, s15
 8003d94:	4816      	ldr	r0, [pc, #88]	; (8003df0 <start_COOL_task+0x180>)
 8003d96:	f7fd fef1 	bl	8001b7c <FAN_duty_cycle>

			pPID.duty_cycle = PID.output;
 8003d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f7fc fbc5 	bl	800052c <__aeabi_f2d>
 8003da2:	4602      	mov	r2, r0
 8003da4:	460b      	mov	r3, r1
 8003da6:	e9c7 2304 	strd	r2, r3, [r7, #16]
			xQueueOverwrite(PID_queue, &pPID);
 8003daa:	4b14      	ldr	r3, [pc, #80]	; (8003dfc <start_COOL_task+0x18c>)
 8003dac:	6818      	ldr	r0, [r3, #0]
 8003dae:	f107 0110 	add.w	r1, r7, #16
 8003db2:	2302      	movs	r3, #2
 8003db4:	2200      	movs	r2, #0
 8003db6:	f013 f8fb 	bl	8016fb0 <xQueueGenericSend>
		}

		/* Wait until next period */
		while (next_tick < osKernelGetTickCount()) {
 8003dba:	e003      	b.n	8003dc4 <start_COOL_task+0x154>
			next_tick += tick_increment;
 8003dbc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003dbe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003dc0:	4413      	add	r3, r2
 8003dc2:	66fb      	str	r3, [r7, #108]	; 0x6c
		while (next_tick < osKernelGetTickCount()) {
 8003dc4:	f012 fdd8 	bl	8016978 <osKernelGetTickCount>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d3f5      	bcc.n	8003dbc <start_COOL_task+0x14c>
		}
		osDelayUntil(next_tick);
 8003dd0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003dd2:	f012 fe93 	bl	8016afc <osDelayUntil>
		if (xQueuePeek(cell_temperatures_queue, &cell_temperatures, 0)) {
 8003dd6:	e79a      	b.n	8003d0e <start_COOL_task+0x9e>
 8003dd8:	aaaaaaab 	.word	0xaaaaaaab
 8003ddc:	408a0aaa 	.word	0x408a0aaa
 8003de0:	2001b79c 	.word	0x2001b79c
 8003de4:	3dcccccd 	.word	0x3dcccccd
 8003de8:	42c80000 	.word	0x42c80000
 8003dec:	00000000 	.word	0x00000000
 8003df0:	2001c038 	.word	0x2001c038
 8003df4:	2001b5dc 	.word	0x2001b5dc
 8003df8:	405f8000 	.word	0x405f8000
 8003dfc:	2001b5e4 	.word	0x2001b5e4

08003e00 <start_event_handler_task>:
	}
}
void start_event_handler_task(void *argument) {
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b084      	sub	sp, #16
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
	__wait_for_data(WAIT_FOR_ALL);
 8003e08:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003e0c:	f7ff f934 	bl	8003078 <__wait_for_data>
	error_t error;

	for (;;) {
		/* Always unlatch the errors after this time has ended
		 * -- this will of course not affect the actual XXX_error_latched signal */
		set_ams_error_ext(0);
 8003e10:	2000      	movs	r0, #0
 8003e12:	f000 f9ff 	bl	8004214 <set_ams_error_ext>
		set_imd_error_ext(0);
 8003e16:	2000      	movs	r0, #0
 8003e18:	f000 fa1c 	bl	8004254 <set_imd_error_ext>
		/* Wait forever for an error to be raised */
		if (xQueueReceive(error_queue, &error, portMAX_DELAY)) {
 8003e1c:	4b0e      	ldr	r3, [pc, #56]	; (8003e58 <start_event_handler_task+0x58>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f107 010f 	add.w	r1, r7, #15
 8003e24:	f04f 32ff 	mov.w	r2, #4294967295
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f013 fa97 	bl	801735c <xQueueReceive>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d00a      	beq.n	8003e4a <start_event_handler_task+0x4a>
			switch (error) {
 8003e34:	7bfb      	ldrb	r3, [r7, #15]
 8003e36:	2b02      	cmp	r3, #2
 8003e38:	d103      	bne.n	8003e42 <start_event_handler_task+0x42>
			case ERROR_IMD:
				set_imd_error_ext(1);
 8003e3a:	2001      	movs	r0, #1
 8003e3c:	f000 fa0a 	bl	8004254 <set_imd_error_ext>
				break;
 8003e40:	e004      	b.n	8003e4c <start_event_handler_task+0x4c>
			default:
				set_ams_error_ext(1);
 8003e42:	2001      	movs	r0, #1
 8003e44:	f000 f9e6 	bl	8004214 <set_ams_error_ext>
				break;
 8003e48:	e000      	b.n	8003e4c <start_event_handler_task+0x4c>
			}
		}
 8003e4a:	bf00      	nop

		/* Latch the ams_error for 500 ms */
		osDelay(0.500 * TICK2HZ);
 8003e4c:	f44f 70d0 	mov.w	r0, #416	; 0x1a0
 8003e50:	f012 fe39 	bl	8016ac6 <osDelay>
		set_ams_error_ext(0);
 8003e54:	e7dc      	b.n	8003e10 <start_event_handler_task+0x10>
 8003e56:	bf00      	nop
 8003e58:	2001b5d0 	.word	0x2001b5d0
 8003e5c:	00000000 	.word	0x00000000

08003e60 <start_IWDG_task>:
	}
}

void start_IWDG_task(void *argument) {
 8003e60:	b5b0      	push	{r4, r5, r7, lr}
 8003e62:	b084      	sub	sp, #16
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 8003e68:	4b27      	ldr	r3, [pc, #156]	; (8003f08 <start_IWDG_task+0xa8>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	60fb      	str	r3, [r7, #12]
	uint32_t tick_increment = TICK2HZ * IWDG_task_info.periodicity;
 8003e6e:	4b27      	ldr	r3, [pc, #156]	; (8003f0c <start_IWDG_task+0xac>)
 8003e70:	4618      	mov	r0, r3
 8003e72:	f7fc fb5b 	bl	800052c <__aeabi_f2d>
 8003e76:	a322      	add	r3, pc, #136	; (adr r3, 8003f00 <start_IWDG_task+0xa0>)
 8003e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e7c:	f7fc fbae 	bl	80005dc <__aeabi_dmul>
 8003e80:	4602      	mov	r2, r0
 8003e82:	460b      	mov	r3, r1
 8003e84:	4610      	mov	r0, r2
 8003e86:	4619      	mov	r1, r3
 8003e88:	f7fc fe80 	bl	8000b8c <__aeabi_d2uiz>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	60bb      	str	r3, [r7, #8]

	/* Make task-specific structures */

	/* Wait until offset */
	next_tick += TICK2HZ * IWDG_task_info.offset;
 8003e90:	68f8      	ldr	r0, [r7, #12]
 8003e92:	f7fc fb29 	bl	80004e8 <__aeabi_ui2d>
 8003e96:	4604      	mov	r4, r0
 8003e98:	460d      	mov	r5, r1
 8003e9a:	f04f 0300 	mov.w	r3, #0
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f7fc fb44 	bl	800052c <__aeabi_f2d>
 8003ea4:	a316      	add	r3, pc, #88	; (adr r3, 8003f00 <start_IWDG_task+0xa0>)
 8003ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eaa:	f7fc fb97 	bl	80005dc <__aeabi_dmul>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	460b      	mov	r3, r1
 8003eb2:	4620      	mov	r0, r4
 8003eb4:	4629      	mov	r1, r5
 8003eb6:	f7fc f9db 	bl	8000270 <__adddf3>
 8003eba:	4602      	mov	r2, r0
 8003ebc:	460b      	mov	r3, r1
 8003ebe:	4610      	mov	r0, r2
 8003ec0:	4619      	mov	r1, r3
 8003ec2:	f7fc fe63 	bl	8000b8c <__aeabi_d2uiz>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	60fb      	str	r3, [r7, #12]
	osDelayUntil(next_tick);
 8003eca:	68f8      	ldr	r0, [r7, #12]
 8003ecc:	f012 fe16 	bl	8016afc <osDelayUntil>

	__wait_for_data(WAIT_FOR_ALL);
 8003ed0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003ed4:	f7ff f8d0 	bl	8003078 <__wait_for_data>
	//initialize_IWDG(&hiwdg, IWDG_task_info.periodicity);

	for (;;) {
		/* Enter periodic behaviour */
		HAL_IWDG_Refresh(&hiwdg);
 8003ed8:	480d      	ldr	r0, [pc, #52]	; (8003f10 <start_IWDG_task+0xb0>)
 8003eda:	f00f fc78 	bl	80137ce <HAL_IWDG_Refresh>

		/* Wait until next period */
		while (next_tick < osKernelGetTickCount()) {
 8003ede:	e003      	b.n	8003ee8 <start_IWDG_task+0x88>
			next_tick += tick_increment;
 8003ee0:	68fa      	ldr	r2, [r7, #12]
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	4413      	add	r3, r2
 8003ee6:	60fb      	str	r3, [r7, #12]
		while (next_tick < osKernelGetTickCount()) {
 8003ee8:	f012 fd46 	bl	8016978 <osKernelGetTickCount>
 8003eec:	4602      	mov	r2, r0
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d3f5      	bcc.n	8003ee0 <start_IWDG_task+0x80>
		}
		osDelayUntil(next_tick);
 8003ef4:	68f8      	ldr	r0, [r7, #12]
 8003ef6:	f012 fe01 	bl	8016afc <osDelayUntil>
		HAL_IWDG_Refresh(&hiwdg);
 8003efa:	e7ed      	b.n	8003ed8 <start_IWDG_task+0x78>
 8003efc:	f3af 8000 	nop.w
 8003f00:	aaaaaaab 	.word	0xaaaaaaab
 8003f04:	408a0aaa 	.word	0x408a0aaa
 8003f08:	2001b79c 	.word	0x2001b79c
 8003f0c:	3dcccccd 	.word	0x3dcccccd
 8003f10:	2001b768 	.word	0x2001b768
 8003f14:	00000000 	.word	0x00000000

08003f18 <start_SIM_task>:
	}
}

void start_SIM_task(void *argument) {
 8003f18:	b5b0      	push	{r4, r5, r7, lr}
 8003f1a:	b08e      	sub	sp, #56	; 0x38
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 8003f20:	4b6b      	ldr	r3, [pc, #428]	; (80040d0 <start_SIM_task+0x1b8>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t tick_increment = TICK2HZ * SIM_task_info.periodicity;
 8003f26:	4b6b      	ldr	r3, [pc, #428]	; (80040d4 <start_SIM_task+0x1bc>)
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f7fc faff 	bl	800052c <__aeabi_f2d>
 8003f2e:	a366      	add	r3, pc, #408	; (adr r3, 80040c8 <start_SIM_task+0x1b0>)
 8003f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f34:	f7fc fb52 	bl	80005dc <__aeabi_dmul>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	460b      	mov	r3, r1
 8003f3c:	4610      	mov	r0, r2
 8003f3e:	4619      	mov	r1, r3
 8003f40:	f7fc fe24 	bl	8000b8c <__aeabi_d2uiz>
 8003f44:	4603      	mov	r3, r0
 8003f46:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Make task-specific structures */
	SIM0_initialize();
 8003f48:	f004 f98e 	bl	8008268 <SIM0_initialize>
	charger_t charger;
	uint16_t k = 0;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	867b      	strh	r3, [r7, #50]	; 0x32

	uint8_t SC = 1;
 8003f50:	2301      	movs	r3, #1
 8003f52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t start_drive = 0;
 8003f56:	2300      	movs	r3, #0
 8003f58:	73fb      	strb	r3, [r7, #15]
	uint8_t start_charge = 1;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	73bb      	strb	r3, [r7, #14]
	uint8_t start_balance = 0;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	737b      	strb	r3, [r7, #13]

	SIM0_P.Ts = SIM_task_info.periodicity;
 8003f62:	4b5c      	ldr	r3, [pc, #368]	; (80040d4 <start_SIM_task+0x1bc>)
 8003f64:	4618      	mov	r0, r3
 8003f66:	f7fc fae1 	bl	800052c <__aeabi_f2d>
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	460b      	mov	r3, r1
 8003f6e:	495a      	ldr	r1, [pc, #360]	; (80040d8 <start_SIM_task+0x1c0>)
 8003f70:	e9c1 233c 	strd	r2, r3, [r1, #240]	; 0xf0
	SIM0_U.SC = SC;
 8003f74:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f7fc fab5 	bl	80004e8 <__aeabi_ui2d>
 8003f7e:	4602      	mov	r2, r0
 8003f80:	460b      	mov	r3, r1
 8003f82:	4956      	ldr	r1, [pc, #344]	; (80040dc <start_SIM_task+0x1c4>)
 8003f84:	e9c1 2308 	strd	r2, r3, [r1, #32]
	SIM0_U.drive = start_drive ^ start_balance;
 8003f88:	7bfa      	ldrb	r2, [r7, #15]
 8003f8a:	7b7b      	ldrb	r3, [r7, #13]
 8003f8c:	4053      	eors	r3, r2
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	4618      	mov	r0, r3
 8003f92:	f7fc fab9 	bl	8000508 <__aeabi_i2d>
 8003f96:	4602      	mov	r2, r0
 8003f98:	460b      	mov	r3, r1
 8003f9a:	4950      	ldr	r1, [pc, #320]	; (80040dc <start_SIM_task+0x1c4>)
 8003f9c:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	SIM0_U.charge = start_charge ^ start_balance;
 8003fa0:	7bba      	ldrb	r2, [r7, #14]
 8003fa2:	7b7b      	ldrb	r3, [r7, #13]
 8003fa4:	4053      	eors	r3, r2
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f7fc faad 	bl	8000508 <__aeabi_i2d>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	460b      	mov	r3, r1
 8003fb2:	494a      	ldr	r1, [pc, #296]	; (80040dc <start_SIM_task+0x1c4>)
 8003fb4:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	SIM0_U.drive_current = -5;
 8003fb8:	4b48      	ldr	r3, [pc, #288]	; (80040dc <start_SIM_task+0x1c4>)
 8003fba:	f503 618b 	add.w	r1, r3, #1112	; 0x458
 8003fbe:	f04f 0200 	mov.w	r2, #0
 8003fc2:	4b47      	ldr	r3, [pc, #284]	; (80040e0 <start_SIM_task+0x1c8>)
 8003fc4:	e9c1 2300 	strd	r2, r3, [r1]

	/* Wait until offset */
	next_tick += TICK2HZ * SIM_task_info.offset;
 8003fc8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003fca:	f7fc fa8d 	bl	80004e8 <__aeabi_ui2d>
 8003fce:	4604      	mov	r4, r0
 8003fd0:	460d      	mov	r5, r1
 8003fd2:	f04f 0300 	mov.w	r3, #0
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f7fc faa8 	bl	800052c <__aeabi_f2d>
 8003fdc:	a33a      	add	r3, pc, #232	; (adr r3, 80040c8 <start_SIM_task+0x1b0>)
 8003fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fe2:	f7fc fafb 	bl	80005dc <__aeabi_dmul>
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	460b      	mov	r3, r1
 8003fea:	4620      	mov	r0, r4
 8003fec:	4629      	mov	r1, r5
 8003fee:	f7fc f93f 	bl	8000270 <__adddf3>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	460b      	mov	r3, r1
 8003ff6:	4610      	mov	r0, r2
 8003ff8:	4619      	mov	r1, r3
 8003ffa:	f7fc fdc7 	bl	8000b8c <__aeabi_d2uiz>
 8003ffe:	4603      	mov	r3, r0
 8004000:	637b      	str	r3, [r7, #52]	; 0x34
	osDelayUntil(next_tick);
 8004002:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004004:	f012 fd7a 	bl	8016afc <osDelayUntil>

	for (;;) {
		/* Enter periodic behaviour */

		if (k == 10) {
 8004008:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800400a:	2b0a      	cmp	r3, #10
 800400c:	d117      	bne.n	800403e <start_SIM_task+0x126>
			xQueueOverwrite(start_drive_queue, &start_drive);
 800400e:	4b35      	ldr	r3, [pc, #212]	; (80040e4 <start_SIM_task+0x1cc>)
 8004010:	6818      	ldr	r0, [r3, #0]
 8004012:	f107 010f 	add.w	r1, r7, #15
 8004016:	2302      	movs	r3, #2
 8004018:	2200      	movs	r2, #0
 800401a:	f012 ffc9 	bl	8016fb0 <xQueueGenericSend>
			xQueueOverwrite(start_charge_queue, &start_charge);
 800401e:	4b32      	ldr	r3, [pc, #200]	; (80040e8 <start_SIM_task+0x1d0>)
 8004020:	6818      	ldr	r0, [r3, #0]
 8004022:	f107 010e 	add.w	r1, r7, #14
 8004026:	2302      	movs	r3, #2
 8004028:	2200      	movs	r2, #0
 800402a:	f012 ffc1 	bl	8016fb0 <xQueueGenericSend>
			xQueueOverwrite(start_balance_queue, &start_balance);
 800402e:	4b2f      	ldr	r3, [pc, #188]	; (80040ec <start_SIM_task+0x1d4>)
 8004030:	6818      	ldr	r0, [r3, #0]
 8004032:	f107 010d 	add.w	r1, r7, #13
 8004036:	2302      	movs	r3, #2
 8004038:	2200      	movs	r2, #0
 800403a:	f012 ffb9 	bl	8016fb0 <xQueueGenericSend>
		}
		k++;
 800403e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004040:	3301      	adds	r3, #1
 8004042:	867b      	strh	r3, [r7, #50]	; 0x32

		xQueuePeek(charger_queue, &charger, 0);
 8004044:	4b2a      	ldr	r3, [pc, #168]	; (80040f0 <start_SIM_task+0x1d8>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f107 0110 	add.w	r1, r7, #16
 800404c:	2200      	movs	r2, #0
 800404e:	4618      	mov	r0, r3
 8004050:	f013 fa94 	bl	801757c <xQueuePeek>
		SIM0_U.CurrentLimit = charger.charger_current_limit;
 8004054:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004058:	4920      	ldr	r1, [pc, #128]	; (80040dc <start_SIM_task+0x1c4>)
 800405a:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
		SIM0_U.VoltageLimit = charger.charger_voltage_limit;
 800405e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004062:	491e      	ldr	r1, [pc, #120]	; (80040dc <start_SIM_task+0x1c4>)
 8004064:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
		SIM0_U.EnableCharge = charger.enable_charger;
 8004068:	f897 3020 	ldrb.w	r3, [r7, #32]
 800406c:	4618      	mov	r0, r3
 800406e:	f7fc fa3b 	bl	80004e8 <__aeabi_ui2d>
 8004072:	4602      	mov	r2, r0
 8004074:	460b      	mov	r3, r1
 8004076:	4919      	ldr	r1, [pc, #100]	; (80040dc <start_SIM_task+0x1c4>)
 8004078:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50

		SIM0_step();
 800407c:	f002 ffe0 	bl	8007040 <SIM0_step>

		xQueueOverwrite(accumulator_voltage_queue, &SIM0_Y.accumulator_voltage);
 8004080:	4b1c      	ldr	r3, [pc, #112]	; (80040f4 <start_SIM_task+0x1dc>)
 8004082:	6818      	ldr	r0, [r3, #0]
 8004084:	2302      	movs	r3, #2
 8004086:	2200      	movs	r2, #0
 8004088:	491b      	ldr	r1, [pc, #108]	; (80040f8 <start_SIM_task+0x1e0>)
 800408a:	f012 ff91 	bl	8016fb0 <xQueueGenericSend>
		xQueueOverwrite(vehicle_voltage_queue, &SIM0_Y.vehicle_voltage);
 800408e:	4b1b      	ldr	r3, [pc, #108]	; (80040fc <start_SIM_task+0x1e4>)
 8004090:	6818      	ldr	r0, [r3, #0]
 8004092:	2302      	movs	r3, #2
 8004094:	2200      	movs	r2, #0
 8004096:	491a      	ldr	r1, [pc, #104]	; (8004100 <start_SIM_task+0x1e8>)
 8004098:	f012 ff8a 	bl	8016fb0 <xQueueGenericSend>
		xQueueOverwrite(accumulator_current_queue, &SIM0_Y.current);
 800409c:	4b19      	ldr	r3, [pc, #100]	; (8004104 <start_SIM_task+0x1ec>)
 800409e:	6818      	ldr	r0, [r3, #0]
 80040a0:	2302      	movs	r3, #2
 80040a2:	2200      	movs	r2, #0
 80040a4:	4918      	ldr	r1, [pc, #96]	; (8004108 <start_SIM_task+0x1f0>)
 80040a6:	f012 ff83 	bl	8016fb0 <xQueueGenericSend>

		/* Wait until next period */
		while (next_tick < osKernelGetTickCount()) {
 80040aa:	e003      	b.n	80040b4 <start_SIM_task+0x19c>
			next_tick += tick_increment;
 80040ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80040ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040b0:	4413      	add	r3, r2
 80040b2:	637b      	str	r3, [r7, #52]	; 0x34
		while (next_tick < osKernelGetTickCount()) {
 80040b4:	f012 fc60 	bl	8016978 <osKernelGetTickCount>
 80040b8:	4602      	mov	r2, r0
 80040ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040bc:	4293      	cmp	r3, r2
 80040be:	d3f5      	bcc.n	80040ac <start_SIM_task+0x194>
		}
		osDelayUntil(next_tick);
 80040c0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80040c2:	f012 fd1b 	bl	8016afc <osDelayUntil>
		if (k == 10) {
 80040c6:	e79f      	b.n	8004008 <start_SIM_task+0xf0>
 80040c8:	aaaaaaab 	.word	0xaaaaaaab
 80040cc:	408a0aaa 	.word	0x408a0aaa
 80040d0:	2001b79c 	.word	0x2001b79c
 80040d4:	3dcccccd 	.word	0x3dcccccd
 80040d8:	20000360 	.word	0x20000360
 80040dc:	2001e7a0 	.word	0x2001e7a0
 80040e0:	c0140000 	.word	0xc0140000
 80040e4:	2001b5c4 	.word	0x2001b5c4
 80040e8:	2001b5d8 	.word	0x2001b5d8
 80040ec:	2001b5f4 	.word	0x2001b5f4
 80040f0:	2001b5e8 	.word	0x2001b5e8
 80040f4:	2001b5f0 	.word	0x2001b5f0
 80040f8:	2001d9e0 	.word	0x2001d9e0
 80040fc:	2001b5e0 	.word	0x2001b5e0
 8004100:	2001d9d0 	.word	0x2001d9d0
 8004104:	2001b5fc 	.word	0x2001b5fc
 8004108:	2001d9d8 	.word	0x2001d9d8

0800410c <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800410c:	b580      	push	{r7, lr}
 800410e:	b082      	sub	sp, #8
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM5) {
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a04      	ldr	r2, [pc, #16]	; (800412c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d101      	bne.n	8004122 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 800411e:	f00d fb7d 	bl	801181c <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8004122:	bf00      	nop
 8004124:	3708      	adds	r7, #8
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop
 800412c:	40000c00 	.word	0x40000c00

08004130 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8004130:	b480      	push	{r7}
 8004132:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004134:	b672      	cpsid	i
}
 8004136:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8004138:	e7fe      	b.n	8004138 <Error_Handler+0x8>
	...

0800413c <set_air_plus_ext>:
#include "main.h"

#include "canlib_callbacks.h"
#include "SIM0.h"

void set_air_plus_ext(uint8_t closed) {
 800413c:	b580      	push	{r7, lr}
 800413e:	b082      	sub	sp, #8
 8004140:	af00      	add	r7, sp, #0
 8004142:	4603      	mov	r3, r0
 8004144:	71fb      	strb	r3, [r7, #7]
#ifdef SIMULATION
	SIM0_U.EnableAirPlus = closed;
 8004146:	79fb      	ldrb	r3, [r7, #7]
 8004148:	4618      	mov	r0, r3
 800414a:	f7fc f9cd 	bl	80004e8 <__aeabi_ui2d>
 800414e:	4602      	mov	r2, r0
 8004150:	460b      	mov	r3, r1
 8004152:	4903      	ldr	r1, [pc, #12]	; (8004160 <set_air_plus_ext+0x24>)
 8004154:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
#elif
	HAL_GPIO_WritePin(enable_AIR_plus_Port, enable_AIR_plus_GPIO_Pin, closed);
#endif
}
 8004158:	bf00      	nop
 800415a:	3708      	adds	r7, #8
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}
 8004160:	2001e7a0 	.word	0x2001e7a0

08004164 <get_air_plus_ext>:

uint8_t get_air_plus_ext() {
 8004164:	b580      	push	{r7, lr}
 8004166:	af00      	add	r7, sp, #0
#ifdef SIMULATION
	return SIM0_Y.AIR_plus_closed;
 8004168:	4b05      	ldr	r3, [pc, #20]	; (8004180 <get_air_plus_ext+0x1c>)
 800416a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800416e:	4610      	mov	r0, r2
 8004170:	4619      	mov	r1, r3
 8004172:	f7fc fd0b 	bl	8000b8c <__aeabi_d2uiz>
 8004176:	4603      	mov	r3, r0
 8004178:	b2db      	uxtb	r3, r3
#elif
	return HAL_GPIO_ReadPin(AIR_plus_closed_Port, AIR_plus_closed_GPIO_Pin);
#endif
}
 800417a:	4618      	mov	r0, r3
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	2001d9a8 	.word	0x2001d9a8

08004184 <set_air_minus_ext>:

void set_air_minus_ext(uint8_t closed) {
 8004184:	b580      	push	{r7, lr}
 8004186:	b082      	sub	sp, #8
 8004188:	af00      	add	r7, sp, #0
 800418a:	4603      	mov	r3, r0
 800418c:	71fb      	strb	r3, [r7, #7]
#ifdef SIMULATION
	SIM0_U.EnableAirMinus = closed;
 800418e:	79fb      	ldrb	r3, [r7, #7]
 8004190:	4618      	mov	r0, r3
 8004192:	f7fc f9a9 	bl	80004e8 <__aeabi_ui2d>
 8004196:	4602      	mov	r2, r0
 8004198:	460b      	mov	r3, r1
 800419a:	4903      	ldr	r1, [pc, #12]	; (80041a8 <set_air_minus_ext+0x24>)
 800419c:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
#elif
	HAL_GPIO_WritePin(enable_AIR_minus_Port, enable_AIR_minus_GPIO_Pin, closed);
#endif
}
 80041a0:	bf00      	nop
 80041a2:	3708      	adds	r7, #8
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}
 80041a8:	2001e7a0 	.word	0x2001e7a0

080041ac <get_air_minus_ext>:

uint8_t get_air_minus_ext() {
 80041ac:	b580      	push	{r7, lr}
 80041ae:	af00      	add	r7, sp, #0
#ifdef SIMULATION
	return SIM0_Y.AIR_minus_closed;
 80041b0:	4b05      	ldr	r3, [pc, #20]	; (80041c8 <get_air_minus_ext+0x1c>)
 80041b2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80041b6:	4610      	mov	r0, r2
 80041b8:	4619      	mov	r1, r3
 80041ba:	f7fc fce7 	bl	8000b8c <__aeabi_d2uiz>
 80041be:	4603      	mov	r3, r0
 80041c0:	b2db      	uxtb	r3, r3
#elif
	return HAL_GPIO_ReadPin(AIR_minus_closed_Port, AIR_minus_closed_GPIO_Pin);
#endif
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	2001d9a8 	.word	0x2001d9a8

080041cc <set_precharge_ext>:

void set_precharge_ext(uint8_t closed) {
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b082      	sub	sp, #8
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	4603      	mov	r3, r0
 80041d4:	71fb      	strb	r3, [r7, #7]
#ifdef SIMULATION
	SIM0_U.EnablePrecharge = closed;
 80041d6:	79fb      	ldrb	r3, [r7, #7]
 80041d8:	4618      	mov	r0, r3
 80041da:	f7fc f985 	bl	80004e8 <__aeabi_ui2d>
 80041de:	4602      	mov	r2, r0
 80041e0:	460b      	mov	r3, r1
 80041e2:	4903      	ldr	r1, [pc, #12]	; (80041f0 <set_precharge_ext+0x24>)
 80041e4:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
#elif
	HAL_GPIO_WritePin(enable_precharge_Port, enable_precharge_GPIO_Pin, closed);
#endif
}
 80041e8:	bf00      	nop
 80041ea:	3708      	adds	r7, #8
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}
 80041f0:	2001e7a0 	.word	0x2001e7a0

080041f4 <get_precharge_ext>:

uint8_t get_precharge_ext() {
 80041f4:	b580      	push	{r7, lr}
 80041f6:	af00      	add	r7, sp, #0
#ifdef SIMULATION
	return SIM0_Y.precharge_closed;
 80041f8:	4b05      	ldr	r3, [pc, #20]	; (8004210 <get_precharge_ext+0x1c>)
 80041fa:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80041fe:	4610      	mov	r0, r2
 8004200:	4619      	mov	r1, r3
 8004202:	f7fc fcc3 	bl	8000b8c <__aeabi_d2uiz>
 8004206:	4603      	mov	r3, r0
 8004208:	b2db      	uxtb	r3, r3
#elif
	return HAL_GPIO_ReadPin(precharge_closed_Port, precharge_closed_GPIO_Pin);
#endif

}
 800420a:	4618      	mov	r0, r3
 800420c:	bd80      	pop	{r7, pc}
 800420e:	bf00      	nop
 8004210:	2001d9a8 	.word	0x2001d9a8

08004214 <set_ams_error_ext>:

void set_ams_error_ext(uint8_t raise_error) {
 8004214:	b580      	push	{r7, lr}
 8004216:	b082      	sub	sp, #8
 8004218:	af00      	add	r7, sp, #0
 800421a:	4603      	mov	r3, r0
 800421c:	71fb      	strb	r3, [r7, #7]
#ifdef SIMULATION
	SIM0_U.AMS_error = raise_error;
 800421e:	79fb      	ldrb	r3, [r7, #7]
 8004220:	4618      	mov	r0, r3
 8004222:	f7fc f961 	bl	80004e8 <__aeabi_ui2d>
 8004226:	4602      	mov	r2, r0
 8004228:	460b      	mov	r3, r1
 800422a:	4903      	ldr	r1, [pc, #12]	; (8004238 <set_ams_error_ext+0x24>)
 800422c:	e9c1 2300 	strd	r2, r3, [r1]
#elif
	HAL_GPIO_WritePin(AMS_error_Port, AMS_error_GPIO_Pin, closed);
#endif
}
 8004230:	bf00      	nop
 8004232:	3708      	adds	r7, #8
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}
 8004238:	2001e7a0 	.word	0x2001e7a0

0800423c <get_ams_error_latched_ext>:

uint8_t get_ams_error_latched_ext() {
 800423c:	b480      	push	{r7}
 800423e:	af00      	add	r7, sp, #0
#ifdef SIMULATION
	return SIM0_Y.AMS_error_latched;
 8004240:	4b03      	ldr	r3, [pc, #12]	; (8004250 <get_ams_error_latched_ext+0x14>)
 8004242:	781b      	ldrb	r3, [r3, #0]
#elif
	return HAL_GPIO_ReadPin(AMS_error_latched_Port, AMS_error_latched_GPIO_Pin);
#endif
}
 8004244:	4618      	mov	r0, r3
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr
 800424e:	bf00      	nop
 8004250:	2001d9a8 	.word	0x2001d9a8

08004254 <set_imd_error_ext>:

void set_imd_error_ext(uint8_t raise_error) {
 8004254:	b580      	push	{r7, lr}
 8004256:	b082      	sub	sp, #8
 8004258:	af00      	add	r7, sp, #0
 800425a:	4603      	mov	r3, r0
 800425c:	71fb      	strb	r3, [r7, #7]
#ifdef SIMULATION
	SIM0_U.IMD_error = raise_error;
 800425e:	79fb      	ldrb	r3, [r7, #7]
 8004260:	4618      	mov	r0, r3
 8004262:	f7fc f941 	bl	80004e8 <__aeabi_ui2d>
 8004266:	4602      	mov	r2, r0
 8004268:	460b      	mov	r3, r1
 800426a:	4903      	ldr	r1, [pc, #12]	; (8004278 <set_imd_error_ext+0x24>)
 800426c:	e9c1 2304 	strd	r2, r3, [r1, #16]
#elif
	return HAL_GPIO_ReadPin(IMD_error_Port, IMD_error_GPIO_Pin);
#endif
}
 8004270:	bf00      	nop
 8004272:	3708      	adds	r7, #8
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}
 8004278:	2001e7a0 	.word	0x2001e7a0

0800427c <get_imd_error_latched_ext>:

uint8_t get_imd_error_latched_ext() {
 800427c:	b480      	push	{r7}
 800427e:	af00      	add	r7, sp, #0
#ifdef SIMULATION
	return SIM0_Y.IMD_error_latched;
 8004280:	4b03      	ldr	r3, [pc, #12]	; (8004290 <get_imd_error_latched_ext+0x14>)
 8004282:	785b      	ldrb	r3, [r3, #1]
#elif
	return HAL_GPIO_ReadPin(IMD_error_latched_Port, IMD_error_latched_GPIO_Pin);
#endif
}
 8004284:	4618      	mov	r0, r3
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr
 800428e:	bf00      	nop
 8004290:	2001d9a8 	.word	0x2001d9a8

08004294 <get_sc_probe_ext>:

uint8_t get_sc_probe_ext() {
 8004294:	b580      	push	{r7, lr}
 8004296:	af00      	add	r7, sp, #0
#ifdef SIMULATION
	return SIM0_Y.SC_probe;
 8004298:	4b05      	ldr	r3, [pc, #20]	; (80042b0 <get_sc_probe_ext+0x1c>)
 800429a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800429e:	4610      	mov	r0, r2
 80042a0:	4619      	mov	r1, r3
 80042a2:	f7fc fc73 	bl	8000b8c <__aeabi_d2uiz>
 80042a6:	4603      	mov	r3, r0
 80042a8:	b2db      	uxtb	r3, r3
#elif
	return HAL_GPIO_ReadPin(SC_probe_latched_Port, SC_probe_GPIO_Pin);
#endif
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop
 80042b0:	2001d9a8 	.word	0x2001d9a8

080042b4 <get_imd_ok_ext>:

uint8_t get_imd_ok_ext() {
 80042b4:	b480      	push	{r7}
 80042b6:	af00      	add	r7, sp, #0
#ifdef SIMULATION
	return 1;
 80042b8:	2301      	movs	r3, #1
#elif
	return HAL_GPIO_ReadPin(IMD_ok_Port, IMD_ok_GPIO_Pin);
#endif
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr

080042c4 <set_charger_voltage_limit_ext>:

void set_charger_voltage_limit_ext(float level) {
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b082      	sub	sp, #8
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	ed87 0a01 	vstr	s0, [r7, #4]
	SIM0_U.VoltageLimit = level;
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f7fc f92c 	bl	800052c <__aeabi_f2d>
 80042d4:	4602      	mov	r2, r0
 80042d6:	460b      	mov	r3, r1
 80042d8:	4903      	ldr	r1, [pc, #12]	; (80042e8 <set_charger_voltage_limit_ext+0x24>)
 80042da:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
}
 80042de:	bf00      	nop
 80042e0:	3708      	adds	r7, #8
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	bf00      	nop
 80042e8:	2001e7a0 	.word	0x2001e7a0

080042ec <set_charger_current_limit_ext>:

void set_charger_current_limit_ext(float level) {
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	ed87 0a01 	vstr	s0, [r7, #4]
	SIM0_U.CurrentLimit = level;
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f7fc f918 	bl	800052c <__aeabi_f2d>
 80042fc:	4602      	mov	r2, r0
 80042fe:	460b      	mov	r3, r1
 8004300:	4903      	ldr	r1, [pc, #12]	; (8004310 <set_charger_current_limit_ext+0x24>)
 8004302:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
}
 8004306:	bf00      	nop
 8004308:	3708      	adds	r7, #8
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
 800430e:	bf00      	nop
 8004310:	2001e7a0 	.word	0x2001e7a0

08004314 <set_balance_ext>:

void set_enable_charge_ext(uint8_t enable) {
	SIM0_U.EnableCharge = enable;
}

void set_balance_ext(uint8_t closed, uint8_t index, void *settings) {
 8004314:	b590      	push	{r4, r7, lr}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
 800431a:	4603      	mov	r3, r0
 800431c:	603a      	str	r2, [r7, #0]
 800431e:	71fb      	strb	r3, [r7, #7]
 8004320:	460b      	mov	r3, r1
 8004322:	71bb      	strb	r3, [r7, #6]
	SIM0_U.BalanceOut[index] = closed;
 8004324:	79bc      	ldrb	r4, [r7, #6]
 8004326:	79fb      	ldrb	r3, [r7, #7]
 8004328:	4618      	mov	r0, r3
 800432a:	f7fc f8dd 	bl	80004e8 <__aeabi_ui2d>
 800432e:	4602      	mov	r2, r0
 8004330:	460b      	mov	r3, r1
 8004332:	4805      	ldr	r0, [pc, #20]	; (8004348 <set_balance_ext+0x34>)
 8004334:	f104 010d 	add.w	r1, r4, #13
 8004338:	00c9      	lsls	r1, r1, #3
 800433a:	4401      	add	r1, r0
 800433c:	e9c1 2300 	strd	r2, r3, [r1]

}
 8004340:	bf00      	nop
 8004342:	370c      	adds	r7, #12
 8004344:	46bd      	mov	sp, r7
 8004346:	bd90      	pop	{r4, r7, pc}
 8004348:	2001e7a0 	.word	0x2001e7a0

0800434c <pec15_calc>:
 * @param	The data used to calculate the PEC
 * @retval	The 16-bit PEC code
 */
uint16_t pec15_calc(uint8_t len, // Number of bytes that will be used to calculate a PEC
		uint8_t *data  // Array of data that will be used to calculate  a PEC
		) {
 800434c:	b480      	push	{r7}
 800434e:	b085      	sub	sp, #20
 8004350:	af00      	add	r7, sp, #0
 8004352:	4603      	mov	r3, r0
 8004354:	6039      	str	r1, [r7, #0]
 8004356:	71fb      	strb	r3, [r7, #7]
	uint16_t remainder, addr;
	remainder = 16;                    // initialize the PEC
 8004358:	2310      	movs	r3, #16
 800435a:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i < len; i++)  // loops for each byte in data array
 800435c:	2300      	movs	r3, #0
 800435e:	737b      	strb	r3, [r7, #13]
 8004360:	e018      	b.n	8004394 <pec15_calc+0x48>
			{
		addr = ((remainder >> 7) ^ data[i]) & 0xff; // calculate PEC table address
 8004362:	89fb      	ldrh	r3, [r7, #14]
 8004364:	09db      	lsrs	r3, r3, #7
 8004366:	b29a      	uxth	r2, r3
 8004368:	7b7b      	ldrb	r3, [r7, #13]
 800436a:	6839      	ldr	r1, [r7, #0]
 800436c:	440b      	add	r3, r1
 800436e:	781b      	ldrb	r3, [r3, #0]
 8004370:	b29b      	uxth	r3, r3
 8004372:	4053      	eors	r3, r2
 8004374:	b29b      	uxth	r3, r3
 8004376:	b2db      	uxtb	r3, r3
 8004378:	817b      	strh	r3, [r7, #10]
		remainder = (remainder << 8) ^ crc15Table[addr];
 800437a:	89fb      	ldrh	r3, [r7, #14]
 800437c:	021b      	lsls	r3, r3, #8
 800437e:	b29a      	uxth	r2, r3
 8004380:	897b      	ldrh	r3, [r7, #10]
 8004382:	490b      	ldr	r1, [pc, #44]	; (80043b0 <pec15_calc+0x64>)
 8004384:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004388:	b29b      	uxth	r3, r3
 800438a:	4053      	eors	r3, r2
 800438c:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i < len; i++)  // loops for each byte in data array
 800438e:	7b7b      	ldrb	r3, [r7, #13]
 8004390:	3301      	adds	r3, #1
 8004392:	737b      	strb	r3, [r7, #13]
 8004394:	7b7a      	ldrb	r2, [r7, #13]
 8004396:	79fb      	ldrb	r3, [r7, #7]
 8004398:	429a      	cmp	r2, r3
 800439a:	d3e2      	bcc.n	8004362 <pec15_calc+0x16>
	}
	return (remainder * 2);  // The CRC15 has a 0 in the LSB so the remainder
 800439c:	89fb      	ldrh	r3, [r7, #14]
 800439e:	005b      	lsls	r3, r3, #1
 80043a0:	b29b      	uxth	r3, r3
							 // must be multiplied by 2
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3714      	adds	r7, #20
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr
 80043ae:	bf00      	nop
 80043b0:	0801bfa4 	.word	0x0801bfa4

080043b4 <initialize_LTC>:
/*
 * @brief	Set the hspi which LTC uses
 * @param	The hspi to be used
 * @retval	None
 */
void initialize_LTC(SPI_HandleTypeDef *hspi) {
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
	hltc = hspi;
 80043bc:	4a04      	ldr	r2, [pc, #16]	; (80043d0 <initialize_LTC+0x1c>)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6013      	str	r3, [r2, #0]
}
 80043c2:	bf00      	nop
 80043c4:	370c      	adds	r7, #12
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr
 80043ce:	bf00      	nop
 80043d0:	2001b7b4 	.word	0x2001b7b4

080043d4 <LTC_CS_select>:

/*
 * @brief	Selects CS
 * @retval	None
 */
void LTC_CS_select(void) {
 80043d4:	b580      	push	{r7, lr}
 80043d6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LTC_CS_GPIO_Port, LTC_CS_Pin, 0);
 80043d8:	2200      	movs	r2, #0
 80043da:	2110      	movs	r1, #16
 80043dc:	4802      	ldr	r0, [pc, #8]	; (80043e8 <LTC_CS_select+0x14>)
 80043de:	f00f f9dd 	bl	801379c <HAL_GPIO_WritePin>
}
 80043e2:	bf00      	nop
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	bf00      	nop
 80043e8:	40020800 	.word	0x40020800

080043ec <LTC_CS_deselect>:

/*
 * @brief	Deselects CS
 * @retval	None
 */
void LTC_CS_deselect(void) {
 80043ec:	b580      	push	{r7, lr}
 80043ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LTC_CS_GPIO_Port, LTC_CS_Pin, 1);
 80043f0:	2201      	movs	r2, #1
 80043f2:	2110      	movs	r1, #16
 80043f4:	4802      	ldr	r0, [pc, #8]	; (8004400 <LTC_CS_deselect+0x14>)
 80043f6:	f00f f9d1 	bl	801379c <HAL_GPIO_WritePin>
}
 80043fa:	bf00      	nop
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	40020800 	.word	0x40020800

08004404 <LTC_wake>:

/*
 * @brief	A helper function which interfaces with SPI. wakes the isoSPI port from sleep
 * @retval	LTC Status
 */
uint8_t LTC_wake() {
 8004404:	b580      	push	{r7, lr}
 8004406:	b082      	sub	sp, #8
 8004408:	af00      	add	r7, sp, #0
	uint16_t pec;

	// This is the ADSTAT command. Chosen for no specific reason
	uint16_t command = 0b0000010101101000;
 800440a:	f44f 63ad 	mov.w	r3, #1384	; 0x568
 800440e:	80fb      	strh	r3, [r7, #6]

	// This is how one would pack the command, calculate the PEC, and the pack the contents.
	LTC_command_buffer[0] = command >> 8;
 8004410:	88fb      	ldrh	r3, [r7, #6]
 8004412:	0a1b      	lsrs	r3, r3, #8
 8004414:	b29b      	uxth	r3, r3
 8004416:	b2da      	uxtb	r2, r3
 8004418:	4b12      	ldr	r3, [pc, #72]	; (8004464 <LTC_wake+0x60>)
 800441a:	701a      	strb	r2, [r3, #0]
	LTC_command_buffer[1] = command;
 800441c:	88fb      	ldrh	r3, [r7, #6]
 800441e:	b2da      	uxtb	r2, r3
 8004420:	4b10      	ldr	r3, [pc, #64]	; (8004464 <LTC_wake+0x60>)
 8004422:	705a      	strb	r2, [r3, #1]
	pec = pec15_calc(2, LTC_command_buffer);
 8004424:	490f      	ldr	r1, [pc, #60]	; (8004464 <LTC_wake+0x60>)
 8004426:	2002      	movs	r0, #2
 8004428:	f7ff ff90 	bl	800434c <pec15_calc>
 800442c:	4603      	mov	r3, r0
 800442e:	80bb      	strh	r3, [r7, #4]
	LTC_command_buffer[2] = pec >> 8;
 8004430:	88bb      	ldrh	r3, [r7, #4]
 8004432:	0a1b      	lsrs	r3, r3, #8
 8004434:	b29b      	uxth	r3, r3
 8004436:	b2da      	uxtb	r2, r3
 8004438:	4b0a      	ldr	r3, [pc, #40]	; (8004464 <LTC_wake+0x60>)
 800443a:	709a      	strb	r2, [r3, #2]
	LTC_command_buffer[3] = pec;
 800443c:	88bb      	ldrh	r3, [r7, #4]
 800443e:	b2da      	uxtb	r2, r3
 8004440:	4b08      	ldr	r3, [pc, #32]	; (8004464 <LTC_wake+0x60>)
 8004442:	70da      	strb	r2, [r3, #3]

	// Simply lock the CS before transmitting and/or receiving
	LTC_CS_select();
 8004444:	f7ff ffc6 	bl	80043d4 <LTC_CS_select>
	HAL_SPI_Transmit(hltc, LTC_command_buffer, 4, LTC_COM_TIMEOUT);
 8004448:	4b07      	ldr	r3, [pc, #28]	; (8004468 <LTC_wake+0x64>)
 800444a:	6818      	ldr	r0, [r3, #0]
 800444c:	2300      	movs	r3, #0
 800444e:	2204      	movs	r2, #4
 8004450:	4904      	ldr	r1, [pc, #16]	; (8004464 <LTC_wake+0x60>)
 8004452:	f00f febc 	bl	80141ce <HAL_SPI_Transmit>
	LTC_CS_deselect();
 8004456:	f7ff ffc9 	bl	80043ec <LTC_CS_deselect>

	return 1;
 800445a:	2301      	movs	r3, #1
}
 800445c:	4618      	mov	r0, r3
 800445e:	3708      	adds	r7, #8
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}
 8004464:	2001b7c8 	.word	0x2001b7c8
 8004468:	2001b7b4 	.word	0x2001b7b4

0800446c <LTC_command>:
 * @brief	A helper function which interfaces with SPI.
 * @param	Wether or not to wake the isoSPI port first
 * @param	Which command to be sent
 * @retval	LTC Status
 */
uint8_t LTC_command(uint8_t wake, uint16_t command) {
 800446c:	b580      	push	{r7, lr}
 800446e:	b084      	sub	sp, #16
 8004470:	af00      	add	r7, sp, #0
 8004472:	4603      	mov	r3, r0
 8004474:	460a      	mov	r2, r1
 8004476:	71fb      	strb	r3, [r7, #7]
 8004478:	4613      	mov	r3, r2
 800447a:	80bb      	strh	r3, [r7, #4]
	uint16_t pec;

	if (wake) {
 800447c:	79fb      	ldrb	r3, [r7, #7]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d006      	beq.n	8004490 <LTC_command+0x24>
		if (!LTC_wake()) {
 8004482:	f7ff ffbf 	bl	8004404 <LTC_wake>
 8004486:	4603      	mov	r3, r0
 8004488:	2b00      	cmp	r3, #0
 800448a:	d101      	bne.n	8004490 <LTC_command+0x24>
			return 0;
 800448c:	2300      	movs	r3, #0
 800448e:	e025      	b.n	80044dc <LTC_command+0x70>
		}
	}

	LTC_command_buffer[0] = command >> 8;
 8004490:	88bb      	ldrh	r3, [r7, #4]
 8004492:	0a1b      	lsrs	r3, r3, #8
 8004494:	b29b      	uxth	r3, r3
 8004496:	b2da      	uxtb	r2, r3
 8004498:	4b12      	ldr	r3, [pc, #72]	; (80044e4 <LTC_command+0x78>)
 800449a:	701a      	strb	r2, [r3, #0]
	LTC_command_buffer[1] = command;
 800449c:	88bb      	ldrh	r3, [r7, #4]
 800449e:	b2da      	uxtb	r2, r3
 80044a0:	4b10      	ldr	r3, [pc, #64]	; (80044e4 <LTC_command+0x78>)
 80044a2:	705a      	strb	r2, [r3, #1]
	pec = pec15_calc(2, LTC_command_buffer);
 80044a4:	490f      	ldr	r1, [pc, #60]	; (80044e4 <LTC_command+0x78>)
 80044a6:	2002      	movs	r0, #2
 80044a8:	f7ff ff50 	bl	800434c <pec15_calc>
 80044ac:	4603      	mov	r3, r0
 80044ae:	81fb      	strh	r3, [r7, #14]
	LTC_command_buffer[2] = pec >> 8;
 80044b0:	89fb      	ldrh	r3, [r7, #14]
 80044b2:	0a1b      	lsrs	r3, r3, #8
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	b2da      	uxtb	r2, r3
 80044b8:	4b0a      	ldr	r3, [pc, #40]	; (80044e4 <LTC_command+0x78>)
 80044ba:	709a      	strb	r2, [r3, #2]
	LTC_command_buffer[3] = pec;
 80044bc:	89fb      	ldrh	r3, [r7, #14]
 80044be:	b2da      	uxtb	r2, r3
 80044c0:	4b08      	ldr	r3, [pc, #32]	; (80044e4 <LTC_command+0x78>)
 80044c2:	70da      	strb	r2, [r3, #3]

	LTC_CS_select();
 80044c4:	f7ff ff86 	bl	80043d4 <LTC_CS_select>
	HAL_SPI_Transmit(hltc, LTC_command_buffer, 4, LTC_COM_TIMEOUT);
 80044c8:	4b07      	ldr	r3, [pc, #28]	; (80044e8 <LTC_command+0x7c>)
 80044ca:	6818      	ldr	r0, [r3, #0]
 80044cc:	2300      	movs	r3, #0
 80044ce:	2204      	movs	r2, #4
 80044d0:	4904      	ldr	r1, [pc, #16]	; (80044e4 <LTC_command+0x78>)
 80044d2:	f00f fe7c 	bl	80141ce <HAL_SPI_Transmit>
	LTC_CS_deselect();
 80044d6:	f7ff ff89 	bl	80043ec <LTC_CS_deselect>

	return 1;
 80044da:	2301      	movs	r3, #1
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3710      	adds	r7, #16
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}
 80044e4:	2001b7c8 	.word	0x2001b7c8
 80044e8:	2001b7b4 	.word	0x2001b7b4

080044ec <LTC_read_command>:
 * @brief	A helper function which interfaces with SPI. Puts received data in LTC_read_buffer
 * @param	Whether or not to wake the isoSPI port first
 * @param	Which command the received data corresponds to
 * @retval	LTC Status
 */
uint8_t LTC_read_command(uint8_t wake, uint16_t command) {
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b084      	sub	sp, #16
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	4603      	mov	r3, r0
 80044f4:	460a      	mov	r2, r1
 80044f6:	71fb      	strb	r3, [r7, #7]
 80044f8:	4613      	mov	r3, r2
 80044fa:	80bb      	strh	r3, [r7, #4]
	uint16_t pec;

	if (wake) {
 80044fc:	79fb      	ldrb	r3, [r7, #7]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d006      	beq.n	8004510 <LTC_read_command+0x24>
		if (!LTC_wake()) {
 8004502:	f7ff ff7f 	bl	8004404 <LTC_wake>
 8004506:	4603      	mov	r3, r0
 8004508:	2b00      	cmp	r3, #0
 800450a:	d101      	bne.n	8004510 <LTC_read_command+0x24>
			return 0;
 800450c:	2300      	movs	r3, #0
 800450e:	e042      	b.n	8004596 <LTC_read_command+0xaa>
		}
	}

	LTC_command_buffer[0] = command >> 8;
 8004510:	88bb      	ldrh	r3, [r7, #4]
 8004512:	0a1b      	lsrs	r3, r3, #8
 8004514:	b29b      	uxth	r3, r3
 8004516:	b2da      	uxtb	r2, r3
 8004518:	4b21      	ldr	r3, [pc, #132]	; (80045a0 <LTC_read_command+0xb4>)
 800451a:	701a      	strb	r2, [r3, #0]
	LTC_command_buffer[1] = command;
 800451c:	88bb      	ldrh	r3, [r7, #4]
 800451e:	b2da      	uxtb	r2, r3
 8004520:	4b1f      	ldr	r3, [pc, #124]	; (80045a0 <LTC_read_command+0xb4>)
 8004522:	705a      	strb	r2, [r3, #1]
	pec = pec15_calc(2, LTC_command_buffer);
 8004524:	491e      	ldr	r1, [pc, #120]	; (80045a0 <LTC_read_command+0xb4>)
 8004526:	2002      	movs	r0, #2
 8004528:	f7ff ff10 	bl	800434c <pec15_calc>
 800452c:	4603      	mov	r3, r0
 800452e:	81fb      	strh	r3, [r7, #14]
	LTC_command_buffer[2] = pec >> 8;
 8004530:	89fb      	ldrh	r3, [r7, #14]
 8004532:	0a1b      	lsrs	r3, r3, #8
 8004534:	b29b      	uxth	r3, r3
 8004536:	b2da      	uxtb	r2, r3
 8004538:	4b19      	ldr	r3, [pc, #100]	; (80045a0 <LTC_read_command+0xb4>)
 800453a:	709a      	strb	r2, [r3, #2]
	LTC_command_buffer[3] = pec;
 800453c:	89fb      	ldrh	r3, [r7, #14]
 800453e:	b2da      	uxtb	r2, r3
 8004540:	4b17      	ldr	r3, [pc, #92]	; (80045a0 <LTC_read_command+0xb4>)
 8004542:	70da      	strb	r2, [r3, #3]

	// We receive at the same instance
	LTC_CS_select();
 8004544:	f7ff ff46 	bl	80043d4 <LTC_CS_select>
	HAL_SPI_Transmit(hltc, LTC_command_buffer, 4, LTC_COM_TIMEOUT);
 8004548:	4b16      	ldr	r3, [pc, #88]	; (80045a4 <LTC_read_command+0xb8>)
 800454a:	6818      	ldr	r0, [r3, #0]
 800454c:	2300      	movs	r3, #0
 800454e:	2204      	movs	r2, #4
 8004550:	4913      	ldr	r1, [pc, #76]	; (80045a0 <LTC_read_command+0xb4>)
 8004552:	f00f fe3c 	bl	80141ce <HAL_SPI_Transmit>
	HAL_SPI_Receive(hltc, LTC_read_buffer, 10, LTC_COM_TIMEOUT);
 8004556:	4b13      	ldr	r3, [pc, #76]	; (80045a4 <LTC_read_command+0xb8>)
 8004558:	6818      	ldr	r0, [r3, #0]
 800455a:	2300      	movs	r3, #0
 800455c:	220a      	movs	r2, #10
 800455e:	4912      	ldr	r1, [pc, #72]	; (80045a8 <LTC_read_command+0xbc>)
 8004560:	f00f ff71 	bl	8014446 <HAL_SPI_Receive>
	LTC_CS_deselect();
 8004564:	f7ff ff42 	bl	80043ec <LTC_CS_deselect>

	// We should make sure that the data is correct
	pec = pec15_calc(8, LTC_read_buffer);
 8004568:	490f      	ldr	r1, [pc, #60]	; (80045a8 <LTC_read_command+0xbc>)
 800456a:	2008      	movs	r0, #8
 800456c:	f7ff feee 	bl	800434c <pec15_calc>
 8004570:	4603      	mov	r3, r0
 8004572:	81fb      	strh	r3, [r7, #14]

	// If there is a discrepancy we return an error code
	if (!((((pec >> 8) & 0xff) != LTC_read_buffer[8])
 8004574:	89fb      	ldrh	r3, [r7, #14]
 8004576:	0a1b      	lsrs	r3, r3, #8
 8004578:	b29b      	uxth	r3, r3
 800457a:	b2db      	uxtb	r3, r3
 800457c:	4a0a      	ldr	r2, [pc, #40]	; (80045a8 <LTC_read_command+0xbc>)
 800457e:	7a12      	ldrb	r2, [r2, #8]
 8004580:	4293      	cmp	r3, r2
 8004582:	d005      	beq.n	8004590 <LTC_read_command+0xa4>
			&& (((pec >> 0) & 0xff) != LTC_read_buffer[9]))) {
 8004584:	89fb      	ldrh	r3, [r7, #14]
 8004586:	b2db      	uxtb	r3, r3
 8004588:	4a07      	ldr	r2, [pc, #28]	; (80045a8 <LTC_read_command+0xbc>)
 800458a:	7a52      	ldrb	r2, [r2, #9]
	if (!((((pec >> 8) & 0xff) != LTC_read_buffer[8])
 800458c:	4293      	cmp	r3, r2
 800458e:	d101      	bne.n	8004594 <LTC_read_command+0xa8>
		return 0;
 8004590:	2300      	movs	r3, #0
 8004592:	e000      	b.n	8004596 <LTC_read_command+0xaa>
	}

	return 1;
 8004594:	2301      	movs	r3, #1
}
 8004596:	4618      	mov	r0, r3
 8004598:	3710      	adds	r7, #16
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}
 800459e:	bf00      	nop
 80045a0:	2001b7c8 	.word	0x2001b7c8
 80045a4:	2001b7b4 	.word	0x2001b7b4
 80045a8:	2001b7bc 	.word	0x2001b7bc

080045ac <LTC_acquire_data>:
 * @brief	The function which acquires all of the cell temperatures and voltages, and places them in cell_voltages and cell_temperatures
 * @param	Whether or not to wake the isoSPI port beforehand
 * @param	LTC_data_valid[n] is high if the n:th slave has given valid data
 * @retval	LTC Status
 */
uint8_t LTC_acquire_data(uint8_t wake) {
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b08a      	sub	sp, #40	; 0x28
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	4603      	mov	r3, r0
 80045b4:	71fb      	strb	r3, [r7, #7]
	int p, k, i, j, command;
	uint16_t all_read; /* LTC_data_valid[n] might only be high if slave n was read (PEC correct, among other things) */
	uint16_t all_zeros; /* LTC_data_valid[n] might only be high if the bits are not all zero, as this would constitute a zero voltage reference (or zeroed/floating cell voltages) */
	uint16_t all_ones; /* LTC_data_valid[n] might only be high if the bits are not all ones, as this is indicative of the message being corrupted */

	LTC_data_valid = 0;
 80045b6:	4b42      	ldr	r3, [pc, #264]	; (80046c0 <LTC_acquire_data+0x114>)
 80045b8:	2200      	movs	r2, #0
 80045ba:	701a      	strb	r2, [r3, #0]

	/* ADCV, MD = 10, PUP = 1, DCP = 0, CH = 000 */
	command = 0b0000001101110000;
 80045bc:	f44f 735c 	mov.w	r3, #880	; 0x370
 80045c0:	613b      	str	r3, [r7, #16]

	LTC_command(wake, command);
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	b29a      	uxth	r2, r3
 80045c6:	79fb      	ldrb	r3, [r7, #7]
 80045c8:	4611      	mov	r1, r2
 80045ca:	4618      	mov	r0, r3
 80045cc:	f7ff ff4e 	bl	800446c <LTC_command>

	//osDelay(configTICK_RATE_HZ * 0.02); // ~2 ms
	HAL_Delay(2);
 80045d0:	2002      	movs	r0, #2
 80045d2:	f00d f943 	bl	801185c <HAL_Delay>

	/* ADAX : MD = 10, PUP = 1, CH = 000 */
	command = 0b0000010101100000;
 80045d6:	f44f 63ac 	mov.w	r3, #1376	; 0x560
 80045da:	613b      	str	r3, [r7, #16]

	LTC_command(0, command);
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	b29b      	uxth	r3, r3
 80045e0:	4619      	mov	r1, r3
 80045e2:	2000      	movs	r0, #0
 80045e4:	f7ff ff42 	bl	800446c <LTC_command>

	//osDelay(configTICK_RATE_HZ * 0.02); // ~2 ms
	HAL_Delay(2);
 80045e8:	2002      	movs	r0, #2
 80045ea:	f00d f937 	bl	801185c <HAL_Delay>

	// First we fill the cell_voltage buffer with the integer values
	p = 0;
 80045ee:	2300      	movs	r3, #0
 80045f0:	627b      	str	r3, [r7, #36]	; 0x24

	for (k = 0; k < 12; k++) { // 12 segments
 80045f2:	2300      	movs	r3, #0
 80045f4:	623b      	str	r3, [r7, #32]
 80045f6:	e056      	b.n	80046a6 <LTC_acquire_data+0xfa>
		all_read = 1;
 80045f8:	2301      	movs	r3, #1
 80045fa:	82fb      	strh	r3, [r7, #22]
		all_zeros = 1;
 80045fc:	2301      	movs	r3, #1
 80045fe:	81fb      	strh	r3, [r7, #14]
		all_ones = 1;
 8004600:	2301      	movs	r3, #1
 8004602:	81bb      	strh	r3, [r7, #12]

		for (i = 0; i < 6; i++) {
 8004604:	2300      	movs	r3, #0
 8004606:	61fb      	str	r3, [r7, #28]
 8004608:	e038      	b.n	800467c <LTC_acquire_data+0xd0>
			// We use the RDCVA command and increment it every pass to get RDCVB, RDCVC .. RDAUXB
			command = 0b1000000000000100 | (cellstack_address_map(k) << 11);
 800460a:	6a3b      	ldr	r3, [r7, #32]
 800460c:	02db      	lsls	r3, r3, #11
 800460e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004612:	f043 0304 	orr.w	r3, r3, #4
 8004616:	613b      	str	r3, [r7, #16]
			command += 2 * i;
 8004618:	69fb      	ldr	r3, [r7, #28]
 800461a:	005b      	lsls	r3, r3, #1
 800461c:	693a      	ldr	r2, [r7, #16]
 800461e:	4413      	add	r3, r2
 8004620:	613b      	str	r3, [r7, #16]

			all_read &= LTC_read_command(0, command);
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	b29b      	uxth	r3, r3
 8004626:	4619      	mov	r1, r3
 8004628:	2000      	movs	r0, #0
 800462a:	f7ff ff5f 	bl	80044ec <LTC_read_command>
 800462e:	4603      	mov	r3, r0
 8004630:	b29a      	uxth	r2, r3
 8004632:	8afb      	ldrh	r3, [r7, #22]
 8004634:	4013      	ands	r3, r2
 8004636:	82fb      	strh	r3, [r7, #22]

			for (j = 0; j < 3; j++) {
 8004638:	2300      	movs	r3, #0
 800463a:	61bb      	str	r3, [r7, #24]
 800463c:	e018      	b.n	8004670 <LTC_acquire_data+0xc4>
				LTC_data[p] = LTC_read_buffer[2 * j]
 800463e:	69bb      	ldr	r3, [r7, #24]
 8004640:	005b      	lsls	r3, r3, #1
 8004642:	4a20      	ldr	r2, [pc, #128]	; (80046c4 <LTC_acquire_data+0x118>)
 8004644:	5cd3      	ldrb	r3, [r2, r3]
 8004646:	b21a      	sxth	r2, r3
						| (LTC_read_buffer[2 * j + 1] << 8);
 8004648:	69bb      	ldr	r3, [r7, #24]
 800464a:	005b      	lsls	r3, r3, #1
 800464c:	3301      	adds	r3, #1
 800464e:	491d      	ldr	r1, [pc, #116]	; (80046c4 <LTC_acquire_data+0x118>)
 8004650:	5ccb      	ldrb	r3, [r1, r3]
 8004652:	021b      	lsls	r3, r3, #8
 8004654:	b21b      	sxth	r3, r3
 8004656:	4313      	orrs	r3, r2
 8004658:	b21b      	sxth	r3, r3
 800465a:	b299      	uxth	r1, r3
				LTC_data[p] = LTC_read_buffer[2 * j]
 800465c:	4a1a      	ldr	r2, [pc, #104]	; (80046c8 <LTC_acquire_data+0x11c>)
 800465e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004660:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

				//all_zeros &= (LTC_data[p] == 0);
				//all_ones &= (LTC_data[p] == -1);

				p++;
 8004664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004666:	3301      	adds	r3, #1
 8004668:	627b      	str	r3, [r7, #36]	; 0x24
			for (j = 0; j < 3; j++) {
 800466a:	69bb      	ldr	r3, [r7, #24]
 800466c:	3301      	adds	r3, #1
 800466e:	61bb      	str	r3, [r7, #24]
 8004670:	69bb      	ldr	r3, [r7, #24]
 8004672:	2b02      	cmp	r3, #2
 8004674:	dde3      	ble.n	800463e <LTC_acquire_data+0x92>
		for (i = 0; i < 6; i++) {
 8004676:	69fb      	ldr	r3, [r7, #28]
 8004678:	3301      	adds	r3, #1
 800467a:	61fb      	str	r3, [r7, #28]
 800467c:	69fb      	ldr	r3, [r7, #28]
 800467e:	2b05      	cmp	r3, #5
 8004680:	ddc3      	ble.n	800460a <LTC_acquire_data+0x5e>
			}
		}

		LTC_data_valid = (all_read && !all_zeros && !all_ones);
 8004682:	8afb      	ldrh	r3, [r7, #22]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d007      	beq.n	8004698 <LTC_acquire_data+0xec>
 8004688:	89fb      	ldrh	r3, [r7, #14]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d104      	bne.n	8004698 <LTC_acquire_data+0xec>
 800468e:	89bb      	ldrh	r3, [r7, #12]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d101      	bne.n	8004698 <LTC_acquire_data+0xec>
 8004694:	2301      	movs	r3, #1
 8004696:	e000      	b.n	800469a <LTC_acquire_data+0xee>
 8004698:	2300      	movs	r3, #0
 800469a:	b2da      	uxtb	r2, r3
 800469c:	4b08      	ldr	r3, [pc, #32]	; (80046c0 <LTC_acquire_data+0x114>)
 800469e:	701a      	strb	r2, [r3, #0]
	for (k = 0; k < 12; k++) { // 12 segments
 80046a0:	6a3b      	ldr	r3, [r7, #32]
 80046a2:	3301      	adds	r3, #1
 80046a4:	623b      	str	r3, [r7, #32]
 80046a6:	6a3b      	ldr	r3, [r7, #32]
 80046a8:	2b0b      	cmp	r3, #11
 80046aa:	dda5      	ble.n	80045f8 <LTC_acquire_data+0x4c>
	}

	LTC_make_voltages();
 80046ac:	f000 f810 	bl	80046d0 <LTC_make_voltages>
	LTC_make_temperatures();
 80046b0:	f000 f856 	bl	8004760 <LTC_make_temperatures>

	return 1;
 80046b4:	2301      	movs	r3, #1
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3728      	adds	r7, #40	; 0x28
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	bf00      	nop
 80046c0:	2001b7b8 	.word	0x2001b7b8
 80046c4:	2001b7bc 	.word	0x2001b7bc
 80046c8:	2001bbc0 	.word	0x2001bbc0
 80046cc:	00000000 	.word	0x00000000

080046d0 <LTC_make_voltages>:
#define cellstack_voltage_count(cellstack) (11 - (cellstack % 2))
/*
 * @brief	A function which takes data from LTC_data and translates it into LTC_voltages
 * @retval	1 if successful
 */
uint8_t LTC_make_voltages(void) {
 80046d0:	b590      	push	{r4, r7, lr}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
	uint16_t cellstack, K, k, p;

	p = 0;
 80046d6:	2300      	movs	r3, #0
 80046d8:	807b      	strh	r3, [r7, #2]

	for (cellstack = 0; cellstack < 12; cellstack++) {
 80046da:	2300      	movs	r3, #0
 80046dc:	80fb      	strh	r3, [r7, #6]
 80046de:	e02e      	b.n	800473e <LTC_make_voltages+0x6e>
		K = cellstack_voltage_count(cellstack);
 80046e0:	88fb      	ldrh	r3, [r7, #6]
 80046e2:	f003 0301 	and.w	r3, r3, #1
 80046e6:	b29b      	uxth	r3, r3
 80046e8:	f1c3 030b 	rsb	r3, r3, #11
 80046ec:	803b      	strh	r3, [r7, #0]
		for (k = 0; k < K; k++) {
 80046ee:	2300      	movs	r3, #0
 80046f0:	80bb      	strh	r3, [r7, #4]
 80046f2:	e01d      	b.n	8004730 <LTC_make_voltages+0x60>
			LTC_voltages[p] = 0.0001 * LTC_data[18 * cellstack + k];
 80046f4:	88fa      	ldrh	r2, [r7, #6]
 80046f6:	4613      	mov	r3, r2
 80046f8:	00db      	lsls	r3, r3, #3
 80046fa:	4413      	add	r3, r2
 80046fc:	005b      	lsls	r3, r3, #1
 80046fe:	461a      	mov	r2, r3
 8004700:	88bb      	ldrh	r3, [r7, #4]
 8004702:	4413      	add	r3, r2
 8004704:	4a14      	ldr	r2, [pc, #80]	; (8004758 <LTC_make_voltages+0x88>)
 8004706:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800470a:	4618      	mov	r0, r3
 800470c:	f7fb fefc 	bl	8000508 <__aeabi_i2d>
 8004710:	887c      	ldrh	r4, [r7, #2]
 8004712:	a30f      	add	r3, pc, #60	; (adr r3, 8004750 <LTC_make_voltages+0x80>)
 8004714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004718:	f7fb ff60 	bl	80005dc <__aeabi_dmul>
 800471c:	4602      	mov	r2, r0
 800471e:	460b      	mov	r3, r1
 8004720:	480e      	ldr	r0, [pc, #56]	; (800475c <LTC_make_voltages+0x8c>)
 8004722:	00e1      	lsls	r1, r4, #3
 8004724:	4401      	add	r1, r0
 8004726:	e9c1 2300 	strd	r2, r3, [r1]
		for (k = 0; k < K; k++) {
 800472a:	88bb      	ldrh	r3, [r7, #4]
 800472c:	3301      	adds	r3, #1
 800472e:	80bb      	strh	r3, [r7, #4]
 8004730:	88ba      	ldrh	r2, [r7, #4]
 8004732:	883b      	ldrh	r3, [r7, #0]
 8004734:	429a      	cmp	r2, r3
 8004736:	d3dd      	bcc.n	80046f4 <LTC_make_voltages+0x24>
	for (cellstack = 0; cellstack < 12; cellstack++) {
 8004738:	88fb      	ldrh	r3, [r7, #6]
 800473a:	3301      	adds	r3, #1
 800473c:	80fb      	strh	r3, [r7, #6]
 800473e:	88fb      	ldrh	r3, [r7, #6]
 8004740:	2b0b      	cmp	r3, #11
 8004742:	d9cd      	bls.n	80046e0 <LTC_make_voltages+0x10>
		}
	}

	return 1;
 8004744:	2301      	movs	r3, #1
}
 8004746:	4618      	mov	r0, r3
 8004748:	370c      	adds	r7, #12
 800474a:	46bd      	mov	sp, r7
 800474c:	bd90      	pop	{r4, r7, pc}
 800474e:	bf00      	nop
 8004750:	eb1c432d 	.word	0xeb1c432d
 8004754:	3f1a36e2 	.word	0x3f1a36e2
 8004758:	2001bbc0 	.word	0x2001bbc0
 800475c:	2001b7d0 	.word	0x2001b7d0

08004760 <LTC_make_temperatures>:

/*
 * @brief	A function which takes data from LTC_data and translates it into LTC_temperatures
 * @retval	1 if successful
 */
uint8_t LTC_make_temperatures(void) {
 8004760:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004764:	b08d      	sub	sp, #52	; 0x34
 8004766:	af00      	add	r7, sp, #0
	uint16_t cellstack, K, k, p;

	double beta = 3500;
 8004768:	a35f      	add	r3, pc, #380	; (adr r3, 80048e8 <LTC_make_temperatures+0x188>)
 800476a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800476e:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double temp = 25 + 273.15;
 8004772:	a35f      	add	r3, pc, #380	; (adr r3, 80048f0 <LTC_make_temperatures+0x190>)
 8004774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004778:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double R0 = 10000 * exp(-beta / temp);
 800477c:	6a38      	ldr	r0, [r7, #32]
 800477e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004780:	f083 4100 	eor.w	r1, r3, #2147483648	; 0x80000000
 8004784:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004788:	f7fc f852 	bl	8000830 <__aeabi_ddiv>
 800478c:	4602      	mov	r2, r0
 800478e:	460b      	mov	r3, r1
 8004790:	ec43 2b17 	vmov	d7, r2, r3
 8004794:	eeb0 0a47 	vmov.f32	s0, s14
 8004798:	eef0 0a67 	vmov.f32	s1, s15
 800479c:	f016 fd8c 	bl	801b2b8 <exp>
 80047a0:	ec51 0b10 	vmov	r0, r1, d0
 80047a4:	a354      	add	r3, pc, #336	; (adr r3, 80048f8 <LTC_make_temperatures+0x198>)
 80047a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047aa:	f7fb ff17 	bl	80005dc <__aeabi_dmul>
 80047ae:	4602      	mov	r2, r0
 80047b0:	460b      	mov	r3, r1
 80047b2:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double R = 10000;
 80047b6:	a350      	add	r3, pc, #320	; (adr r3, 80048f8 <LTC_make_temperatures+0x198>)
 80047b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047bc:	e9c7 2302 	strd	r2, r3, [r7, #8]

	p = 0;
 80047c0:	2300      	movs	r3, #0
 80047c2:	80fb      	strh	r3, [r7, #6]

	for (cellstack = 0; cellstack < 12; cellstack++) {
 80047c4:	2300      	movs	r3, #0
 80047c6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80047c8:	e07b      	b.n	80048c2 <LTC_make_temperatures+0x162>
		K = 5;
 80047ca:	2305      	movs	r3, #5
 80047cc:	80bb      	strh	r3, [r7, #4]

		for (k = 0; k < K; k++) {
 80047ce:	2300      	movs	r3, #0
 80047d0:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80047d2:	e06f      	b.n	80048b4 <LTC_make_temperatures+0x154>
			LTC_temperatures[p] = beta
					/ (log(R * LTC_data[18 * cellstack + 12 + k])
 80047d4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80047d6:	4613      	mov	r3, r2
 80047d8:	00db      	lsls	r3, r3, #3
 80047da:	4413      	add	r3, r2
 80047dc:	005b      	lsls	r3, r3, #1
 80047de:	f103 020c 	add.w	r2, r3, #12
 80047e2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80047e4:	4413      	add	r3, r2
 80047e6:	4a3e      	ldr	r2, [pc, #248]	; (80048e0 <LTC_make_temperatures+0x180>)
 80047e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80047ec:	4618      	mov	r0, r3
 80047ee:	f7fb fe8b 	bl	8000508 <__aeabi_i2d>
 80047f2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80047f6:	f7fb fef1 	bl	80005dc <__aeabi_dmul>
 80047fa:	4602      	mov	r2, r0
 80047fc:	460b      	mov	r3, r1
 80047fe:	ec43 2b17 	vmov	d7, r2, r3
 8004802:	eeb0 0a47 	vmov.f32	s0, s14
 8004806:	eef0 0a67 	vmov.f32	s1, s15
 800480a:	f016 fda5 	bl	801b358 <log>
 800480e:	ec59 8b10 	vmov	r8, r9, d0
							- log(
									-R0
 8004812:	693c      	ldr	r4, [r7, #16]
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
											* (LTC_data[18 * cellstack + 12 + k]
 800481a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800481c:	4613      	mov	r3, r2
 800481e:	00db      	lsls	r3, r3, #3
 8004820:	4413      	add	r3, r2
 8004822:	005b      	lsls	r3, r3, #1
 8004824:	f103 020c 	add.w	r2, r3, #12
 8004828:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800482a:	4413      	add	r3, r2
 800482c:	4a2c      	ldr	r2, [pc, #176]	; (80048e0 <LTC_make_temperatures+0x180>)
 800482e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004832:	4619      	mov	r1, r3
													- LTC_data[18 * cellstack
 8004834:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004836:	4613      	mov	r3, r2
 8004838:	00db      	lsls	r3, r3, #3
 800483a:	4413      	add	r3, r2
 800483c:	005b      	lsls	r3, r3, #1
															+ 12 + K])))
 800483e:	f103 020c 	add.w	r2, r3, #12
 8004842:	88bb      	ldrh	r3, [r7, #4]
 8004844:	4413      	add	r3, r2
													- LTC_data[18 * cellstack
 8004846:	4a26      	ldr	r2, [pc, #152]	; (80048e0 <LTC_make_temperatures+0x180>)
 8004848:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800484c:	1acb      	subs	r3, r1, r3
							- log(
 800484e:	4618      	mov	r0, r3
 8004850:	f7fb fe5a 	bl	8000508 <__aeabi_i2d>
 8004854:	4602      	mov	r2, r0
 8004856:	460b      	mov	r3, r1
 8004858:	4620      	mov	r0, r4
 800485a:	4629      	mov	r1, r5
 800485c:	f7fb febe 	bl	80005dc <__aeabi_dmul>
 8004860:	4602      	mov	r2, r0
 8004862:	460b      	mov	r3, r1
 8004864:	ec43 2b17 	vmov	d7, r2, r3
 8004868:	eeb0 0a47 	vmov.f32	s0, s14
 800486c:	eef0 0a67 	vmov.f32	s1, s15
 8004870:	f016 fd72 	bl	801b358 <log>
 8004874:	ec53 2b10 	vmov	r2, r3, d0
 8004878:	4640      	mov	r0, r8
 800487a:	4649      	mov	r1, r9
 800487c:	f7fb fcf6 	bl	800026c <__aeabi_dsub>
 8004880:	4602      	mov	r2, r0
 8004882:	460b      	mov	r3, r1
					/ (log(R * LTC_data[18 * cellstack + 12 + k])
 8004884:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004888:	f7fb ffd2 	bl	8000830 <__aeabi_ddiv>
 800488c:	4602      	mov	r2, r0
 800488e:	460b      	mov	r3, r1
 8004890:	4610      	mov	r0, r2
 8004892:	4619      	mov	r1, r3
			LTC_temperatures[p] = beta
 8004894:	88fe      	ldrh	r6, [r7, #6]
					- 273.15;
 8004896:	a310      	add	r3, pc, #64	; (adr r3, 80048d8 <LTC_make_temperatures+0x178>)
 8004898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800489c:	f7fb fce6 	bl	800026c <__aeabi_dsub>
 80048a0:	4602      	mov	r2, r0
 80048a2:	460b      	mov	r3, r1
			LTC_temperatures[p] = beta
 80048a4:	480f      	ldr	r0, [pc, #60]	; (80048e4 <LTC_make_temperatures+0x184>)
 80048a6:	00f1      	lsls	r1, r6, #3
 80048a8:	4401      	add	r1, r0
 80048aa:	e9c1 2300 	strd	r2, r3, [r1]
		for (k = 0; k < K; k++) {
 80048ae:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80048b0:	3301      	adds	r3, #1
 80048b2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80048b4:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80048b6:	88bb      	ldrh	r3, [r7, #4]
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d38b      	bcc.n	80047d4 <LTC_make_temperatures+0x74>
	for (cellstack = 0; cellstack < 12; cellstack++) {
 80048bc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80048be:	3301      	adds	r3, #1
 80048c0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80048c2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80048c4:	2b0b      	cmp	r3, #11
 80048c6:	d980      	bls.n	80047ca <LTC_make_temperatures+0x6a>

		}
	}

	return 1;
 80048c8:	2301      	movs	r3, #1
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3734      	adds	r7, #52	; 0x34
 80048ce:	46bd      	mov	sp, r7
 80048d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80048d4:	f3af 8000 	nop.w
 80048d8:	66666666 	.word	0x66666666
 80048dc:	40711266 	.word	0x40711266
 80048e0:	2001bbc0 	.word	0x2001bbc0
 80048e4:	2001bd70 	.word	0x2001bd70
 80048e8:	00000000 	.word	0x00000000
 80048ec:	40ab5800 	.word	0x40ab5800
 80048f0:	66666666 	.word	0x66666666
 80048f4:	4072a266 	.word	0x4072a266
 80048f8:	00000000 	.word	0x00000000
 80048fc:	40c38800 	.word	0x40c38800

08004900 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8004904:	4b17      	ldr	r3, [pc, #92]	; (8004964 <MX_SPI2_Init+0x64>)
 8004906:	4a18      	ldr	r2, [pc, #96]	; (8004968 <MX_SPI2_Init+0x68>)
 8004908:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800490a:	4b16      	ldr	r3, [pc, #88]	; (8004964 <MX_SPI2_Init+0x64>)
 800490c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004910:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8004912:	4b14      	ldr	r3, [pc, #80]	; (8004964 <MX_SPI2_Init+0x64>)
 8004914:	2200      	movs	r2, #0
 8004916:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8004918:	4b12      	ldr	r3, [pc, #72]	; (8004964 <MX_SPI2_Init+0x64>)
 800491a:	2200      	movs	r2, #0
 800491c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800491e:	4b11      	ldr	r3, [pc, #68]	; (8004964 <MX_SPI2_Init+0x64>)
 8004920:	2200      	movs	r2, #0
 8004922:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004924:	4b0f      	ldr	r3, [pc, #60]	; (8004964 <MX_SPI2_Init+0x64>)
 8004926:	2200      	movs	r2, #0
 8004928:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800492a:	4b0e      	ldr	r3, [pc, #56]	; (8004964 <MX_SPI2_Init+0x64>)
 800492c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004930:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8004932:	4b0c      	ldr	r3, [pc, #48]	; (8004964 <MX_SPI2_Init+0x64>)
 8004934:	2220      	movs	r2, #32
 8004936:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004938:	4b0a      	ldr	r3, [pc, #40]	; (8004964 <MX_SPI2_Init+0x64>)
 800493a:	2200      	movs	r2, #0
 800493c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800493e:	4b09      	ldr	r3, [pc, #36]	; (8004964 <MX_SPI2_Init+0x64>)
 8004940:	2200      	movs	r2, #0
 8004942:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004944:	4b07      	ldr	r3, [pc, #28]	; (8004964 <MX_SPI2_Init+0x64>)
 8004946:	2200      	movs	r2, #0
 8004948:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800494a:	4b06      	ldr	r3, [pc, #24]	; (8004964 <MX_SPI2_Init+0x64>)
 800494c:	220a      	movs	r2, #10
 800494e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004950:	4804      	ldr	r0, [pc, #16]	; (8004964 <MX_SPI2_Init+0x64>)
 8004952:	f00f fbb3 	bl	80140bc <HAL_SPI_Init>
 8004956:	4603      	mov	r3, r0
 8004958:	2b00      	cmp	r3, #0
 800495a:	d001      	beq.n	8004960 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800495c:	f7ff fbe8 	bl	8004130 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8004960:	bf00      	nop
 8004962:	bd80      	pop	{r7, pc}
 8004964:	2001bf50 	.word	0x2001bf50
 8004968:	40003800 	.word	0x40003800

0800496c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b08a      	sub	sp, #40	; 0x28
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004974:	f107 0314 	add.w	r3, r7, #20
 8004978:	2200      	movs	r2, #0
 800497a:	601a      	str	r2, [r3, #0]
 800497c:	605a      	str	r2, [r3, #4]
 800497e:	609a      	str	r2, [r3, #8]
 8004980:	60da      	str	r2, [r3, #12]
 8004982:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a28      	ldr	r2, [pc, #160]	; (8004a2c <HAL_SPI_MspInit+0xc0>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d14a      	bne.n	8004a24 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800498e:	2300      	movs	r3, #0
 8004990:	613b      	str	r3, [r7, #16]
 8004992:	4b27      	ldr	r3, [pc, #156]	; (8004a30 <HAL_SPI_MspInit+0xc4>)
 8004994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004996:	4a26      	ldr	r2, [pc, #152]	; (8004a30 <HAL_SPI_MspInit+0xc4>)
 8004998:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800499c:	6413      	str	r3, [r2, #64]	; 0x40
 800499e:	4b24      	ldr	r3, [pc, #144]	; (8004a30 <HAL_SPI_MspInit+0xc4>)
 80049a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049a6:	613b      	str	r3, [r7, #16]
 80049a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80049aa:	2300      	movs	r3, #0
 80049ac:	60fb      	str	r3, [r7, #12]
 80049ae:	4b20      	ldr	r3, [pc, #128]	; (8004a30 <HAL_SPI_MspInit+0xc4>)
 80049b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049b2:	4a1f      	ldr	r2, [pc, #124]	; (8004a30 <HAL_SPI_MspInit+0xc4>)
 80049b4:	f043 0304 	orr.w	r3, r3, #4
 80049b8:	6313      	str	r3, [r2, #48]	; 0x30
 80049ba:	4b1d      	ldr	r3, [pc, #116]	; (8004a30 <HAL_SPI_MspInit+0xc4>)
 80049bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049be:	f003 0304 	and.w	r3, r3, #4
 80049c2:	60fb      	str	r3, [r7, #12]
 80049c4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80049c6:	2300      	movs	r3, #0
 80049c8:	60bb      	str	r3, [r7, #8]
 80049ca:	4b19      	ldr	r3, [pc, #100]	; (8004a30 <HAL_SPI_MspInit+0xc4>)
 80049cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ce:	4a18      	ldr	r2, [pc, #96]	; (8004a30 <HAL_SPI_MspInit+0xc4>)
 80049d0:	f043 0302 	orr.w	r3, r3, #2
 80049d4:	6313      	str	r3, [r2, #48]	; 0x30
 80049d6:	4b16      	ldr	r3, [pc, #88]	; (8004a30 <HAL_SPI_MspInit+0xc4>)
 80049d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049da:	f003 0302 	and.w	r3, r3, #2
 80049de:	60bb      	str	r3, [r7, #8]
 80049e0:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80049e2:	230c      	movs	r3, #12
 80049e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049e6:	2302      	movs	r3, #2
 80049e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049ea:	2300      	movs	r3, #0
 80049ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049ee:	2303      	movs	r3, #3
 80049f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80049f2:	2305      	movs	r3, #5
 80049f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80049f6:	f107 0314 	add.w	r3, r7, #20
 80049fa:	4619      	mov	r1, r3
 80049fc:	480d      	ldr	r0, [pc, #52]	; (8004a34 <HAL_SPI_MspInit+0xc8>)
 80049fe:	f00e fd31 	bl	8013464 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004a02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a08:	2302      	movs	r3, #2
 8004a0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a10:	2303      	movs	r3, #3
 8004a12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004a14:	2305      	movs	r3, #5
 8004a16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a18:	f107 0314 	add.w	r3, r7, #20
 8004a1c:	4619      	mov	r1, r3
 8004a1e:	4806      	ldr	r0, [pc, #24]	; (8004a38 <HAL_SPI_MspInit+0xcc>)
 8004a20:	f00e fd20 	bl	8013464 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8004a24:	bf00      	nop
 8004a26:	3728      	adds	r7, #40	; 0x28
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}
 8004a2c:	40003800 	.word	0x40003800
 8004a30:	40023800 	.word	0x40023800
 8004a34:	40020800 	.word	0x40020800
 8004a38:	40020400 	.word	0x40020400

08004a3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b082      	sub	sp, #8
 8004a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a42:	2300      	movs	r3, #0
 8004a44:	607b      	str	r3, [r7, #4]
 8004a46:	4b12      	ldr	r3, [pc, #72]	; (8004a90 <HAL_MspInit+0x54>)
 8004a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a4a:	4a11      	ldr	r2, [pc, #68]	; (8004a90 <HAL_MspInit+0x54>)
 8004a4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004a50:	6453      	str	r3, [r2, #68]	; 0x44
 8004a52:	4b0f      	ldr	r3, [pc, #60]	; (8004a90 <HAL_MspInit+0x54>)
 8004a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a5a:	607b      	str	r3, [r7, #4]
 8004a5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004a5e:	2300      	movs	r3, #0
 8004a60:	603b      	str	r3, [r7, #0]
 8004a62:	4b0b      	ldr	r3, [pc, #44]	; (8004a90 <HAL_MspInit+0x54>)
 8004a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a66:	4a0a      	ldr	r2, [pc, #40]	; (8004a90 <HAL_MspInit+0x54>)
 8004a68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a6c:	6413      	str	r3, [r2, #64]	; 0x40
 8004a6e:	4b08      	ldr	r3, [pc, #32]	; (8004a90 <HAL_MspInit+0x54>)
 8004a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a76:	603b      	str	r3, [r7, #0]
 8004a78:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	210f      	movs	r1, #15
 8004a7e:	f06f 0001 	mvn.w	r0, #1
 8004a82:	f00e f955 	bl	8012d30 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004a86:	bf00      	nop
 8004a88:	3708      	adds	r7, #8
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	bf00      	nop
 8004a90:	40023800 	.word	0x40023800

08004a94 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b08c      	sub	sp, #48	; 0x30
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	6879      	ldr	r1, [r7, #4]
 8004aa8:	2032      	movs	r0, #50	; 0x32
 8004aaa:	f00e f941 	bl	8012d30 <HAL_NVIC_SetPriority>

  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8004aae:	2032      	movs	r0, #50	; 0x32
 8004ab0:	f00e f95a 	bl	8012d68 <HAL_NVIC_EnableIRQ>

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	60fb      	str	r3, [r7, #12]
 8004ab8:	4b1f      	ldr	r3, [pc, #124]	; (8004b38 <HAL_InitTick+0xa4>)
 8004aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004abc:	4a1e      	ldr	r2, [pc, #120]	; (8004b38 <HAL_InitTick+0xa4>)
 8004abe:	f043 0308 	orr.w	r3, r3, #8
 8004ac2:	6413      	str	r3, [r2, #64]	; 0x40
 8004ac4:	4b1c      	ldr	r3, [pc, #112]	; (8004b38 <HAL_InitTick+0xa4>)
 8004ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac8:	f003 0308 	and.w	r3, r3, #8
 8004acc:	60fb      	str	r3, [r7, #12]
 8004ace:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004ad0:	f107 0210 	add.w	r2, r7, #16
 8004ad4:	f107 0314 	add.w	r3, r7, #20
 8004ad8:	4611      	mov	r1, r2
 8004ada:	4618      	mov	r0, r3
 8004adc:	f00f fabc 	bl	8014058 <HAL_RCC_GetClockConfig>

  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8004ae0:	f00f faa6 	bl	8014030 <HAL_RCC_GetPCLK1Freq>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	005b      	lsls	r3, r3, #1
 8004ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aec:	4a13      	ldr	r2, [pc, #76]	; (8004b3c <HAL_InitTick+0xa8>)
 8004aee:	fba2 2303 	umull	r2, r3, r2, r3
 8004af2:	0c9b      	lsrs	r3, r3, #18
 8004af4:	3b01      	subs	r3, #1
 8004af6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8004af8:	4b11      	ldr	r3, [pc, #68]	; (8004b40 <HAL_InitTick+0xac>)
 8004afa:	4a12      	ldr	r2, [pc, #72]	; (8004b44 <HAL_InitTick+0xb0>)
 8004afc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8004afe:	4b10      	ldr	r3, [pc, #64]	; (8004b40 <HAL_InitTick+0xac>)
 8004b00:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004b04:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8004b06:	4a0e      	ldr	r2, [pc, #56]	; (8004b40 <HAL_InitTick+0xac>)
 8004b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b0a:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8004b0c:	4b0c      	ldr	r3, [pc, #48]	; (8004b40 <HAL_InitTick+0xac>)
 8004b0e:	2200      	movs	r2, #0
 8004b10:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b12:	4b0b      	ldr	r3, [pc, #44]	; (8004b40 <HAL_InitTick+0xac>)
 8004b14:	2200      	movs	r2, #0
 8004b16:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8004b18:	4809      	ldr	r0, [pc, #36]	; (8004b40 <HAL_InitTick+0xac>)
 8004b1a:	f010 f877 	bl	8014c0c <HAL_TIM_Base_Init>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d104      	bne.n	8004b2e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8004b24:	4806      	ldr	r0, [pc, #24]	; (8004b40 <HAL_InitTick+0xac>)
 8004b26:	f010 f929 	bl	8014d7c <HAL_TIM_Base_Start_IT>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	e000      	b.n	8004b30 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	3730      	adds	r7, #48	; 0x30
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}
 8004b38:	40023800 	.word	0x40023800
 8004b3c:	431bde83 	.word	0x431bde83
 8004b40:	2001bfa8 	.word	0x2001bfa8
 8004b44:	40000c00 	.word	0x40000c00

08004b48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004b4c:	e7fe      	b.n	8004b4c <NMI_Handler+0x4>

08004b4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004b4e:	b480      	push	{r7}
 8004b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004b52:	e7fe      	b.n	8004b52 <HardFault_Handler+0x4>

08004b54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004b54:	b480      	push	{r7}
 8004b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004b58:	e7fe      	b.n	8004b58 <MemManage_Handler+0x4>

08004b5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004b5a:	b480      	push	{r7}
 8004b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004b5e:	e7fe      	b.n	8004b5e <BusFault_Handler+0x4>

08004b60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004b60:	b480      	push	{r7}
 8004b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004b64:	e7fe      	b.n	8004b64 <UsageFault_Handler+0x4>

08004b66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004b66:	b480      	push	{r7}
 8004b68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004b6a:	bf00      	nop
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr

08004b74 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004b78:	4802      	ldr	r0, [pc, #8]	; (8004b84 <ADC_IRQHandler+0x10>)
 8004b7a:	f00c fed6 	bl	801192a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8004b7e:	bf00      	nop
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	bf00      	nop
 8004b84:	2001b600 	.word	0x2001b600

08004b88 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8004b8c:	4802      	ldr	r0, [pc, #8]	; (8004b98 <CAN1_TX_IRQHandler+0x10>)
 8004b8e:	f00d fdf2 	bl	8012776 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8004b92:	bf00      	nop
 8004b94:	bd80      	pop	{r7, pc}
 8004b96:	bf00      	nop
 8004b98:	2001b6d0 	.word	0x2001b6d0

08004b9c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8004ba0:	4802      	ldr	r0, [pc, #8]	; (8004bac <CAN1_RX0_IRQHandler+0x10>)
 8004ba2:	f00d fde8 	bl	8012776 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8004ba6:	bf00      	nop
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	bf00      	nop
 8004bac:	2001b6d0 	.word	0x2001b6d0

08004bb0 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8004bb4:	4802      	ldr	r0, [pc, #8]	; (8004bc0 <CAN1_RX1_IRQHandler+0x10>)
 8004bb6:	f00d fdde 	bl	8012776 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8004bba:	bf00      	nop
 8004bbc:	bd80      	pop	{r7, pc}
 8004bbe:	bf00      	nop
 8004bc0:	2001b6d0 	.word	0x2001b6d0

08004bc4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004bc8:	4802      	ldr	r0, [pc, #8]	; (8004bd4 <TIM2_IRQHandler+0x10>)
 8004bca:	f010 fcc7 	bl	801555c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004bce:	bf00      	nop
 8004bd0:	bd80      	pop	{r7, pc}
 8004bd2:	bf00      	nop
 8004bd4:	2001c080 	.word	0x2001c080

08004bd8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004bdc:	4802      	ldr	r0, [pc, #8]	; (8004be8 <TIM3_IRQHandler+0x10>)
 8004bde:	f010 fcbd 	bl	801555c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004be2:	bf00      	nop
 8004be4:	bd80      	pop	{r7, pc}
 8004be6:	bf00      	nop
 8004be8:	2001bff0 	.word	0x2001bff0

08004bec <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8004bf0:	4802      	ldr	r0, [pc, #8]	; (8004bfc <TIM5_IRQHandler+0x10>)
 8004bf2:	f010 fcb3 	bl	801555c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8004bf6:	bf00      	nop
 8004bf8:	bd80      	pop	{r7, pc}
 8004bfa:	bf00      	nop
 8004bfc:	2001bfa8 	.word	0x2001bfa8

08004c00 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004c04:	4802      	ldr	r0, [pc, #8]	; (8004c10 <DMA2_Stream0_IRQHandler+0x10>)
 8004c06:	f00e f9c3 	bl	8012f90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004c0a:	bf00      	nop
 8004c0c:	bd80      	pop	{r7, pc}
 8004c0e:	bf00      	nop
 8004c10:	2001b648 	.word	0x2001b648

08004c14 <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupts.
  */
void CAN2_TX_IRQHandler(void)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8004c18:	4802      	ldr	r0, [pc, #8]	; (8004c24 <CAN2_TX_IRQHandler+0x10>)
 8004c1a:	f00d fdac 	bl	8012776 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 8004c1e:	bf00      	nop
 8004c20:	bd80      	pop	{r7, pc}
 8004c22:	bf00      	nop
 8004c24:	2001b6a8 	.word	0x2001b6a8

08004c28 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8004c2c:	4802      	ldr	r0, [pc, #8]	; (8004c38 <CAN2_RX0_IRQHandler+0x10>)
 8004c2e:	f00d fda2 	bl	8012776 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8004c32:	bf00      	nop
 8004c34:	bd80      	pop	{r7, pc}
 8004c36:	bf00      	nop
 8004c38:	2001b6a8 	.word	0x2001b6a8

08004c3c <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8004c40:	4802      	ldr	r0, [pc, #8]	; (8004c4c <CAN2_RX1_IRQHandler+0x10>)
 8004c42:	f00d fd98 	bl	8012776 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8004c46:	bf00      	nop
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	bf00      	nop
 8004c4c:	2001b6a8 	.word	0x2001b6a8

08004c50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004c50:	b480      	push	{r7}
 8004c52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004c54:	4b06      	ldr	r3, [pc, #24]	; (8004c70 <SystemInit+0x20>)
 8004c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c5a:	4a05      	ldr	r2, [pc, #20]	; (8004c70 <SystemInit+0x20>)
 8004c5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004c60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004c64:	bf00      	nop
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr
 8004c6e:	bf00      	nop
 8004c70:	e000ed00 	.word	0xe000ed00

08004c74 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b096      	sub	sp, #88	; 0x58
 8004c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004c7a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004c7e:	2200      	movs	r2, #0
 8004c80:	601a      	str	r2, [r3, #0]
 8004c82:	605a      	str	r2, [r3, #4]
 8004c84:	609a      	str	r2, [r3, #8]
 8004c86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004c88:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	601a      	str	r2, [r3, #0]
 8004c90:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004c92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c96:	2200      	movs	r2, #0
 8004c98:	601a      	str	r2, [r3, #0]
 8004c9a:	605a      	str	r2, [r3, #4]
 8004c9c:	609a      	str	r2, [r3, #8]
 8004c9e:	60da      	str	r2, [r3, #12]
 8004ca0:	611a      	str	r2, [r3, #16]
 8004ca2:	615a      	str	r2, [r3, #20]
 8004ca4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004ca6:	1d3b      	adds	r3, r7, #4
 8004ca8:	2220      	movs	r2, #32
 8004caa:	2100      	movs	r1, #0
 8004cac:	4618      	mov	r0, r3
 8004cae:	f016 f9e3 	bl	801b078 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004cb2:	4b3e      	ldr	r3, [pc, #248]	; (8004dac <MX_TIM1_Init+0x138>)
 8004cb4:	4a3e      	ldr	r2, [pc, #248]	; (8004db0 <MX_TIM1_Init+0x13c>)
 8004cb6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8004cb8:	4b3c      	ldr	r3, [pc, #240]	; (8004dac <MX_TIM1_Init+0x138>)
 8004cba:	2200      	movs	r2, #0
 8004cbc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004cbe:	4b3b      	ldr	r3, [pc, #236]	; (8004dac <MX_TIM1_Init+0x138>)
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8004cc4:	4b39      	ldr	r3, [pc, #228]	; (8004dac <MX_TIM1_Init+0x138>)
 8004cc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004cca:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004ccc:	4b37      	ldr	r3, [pc, #220]	; (8004dac <MX_TIM1_Init+0x138>)
 8004cce:	2200      	movs	r2, #0
 8004cd0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004cd2:	4b36      	ldr	r3, [pc, #216]	; (8004dac <MX_TIM1_Init+0x138>)
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004cd8:	4b34      	ldr	r3, [pc, #208]	; (8004dac <MX_TIM1_Init+0x138>)
 8004cda:	2200      	movs	r2, #0
 8004cdc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004cde:	4833      	ldr	r0, [pc, #204]	; (8004dac <MX_TIM1_Init+0x138>)
 8004ce0:	f00f ff94 	bl	8014c0c <HAL_TIM_Base_Init>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d001      	beq.n	8004cee <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8004cea:	f7ff fa21 	bl	8004130 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004cee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004cf2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004cf4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004cf8:	4619      	mov	r1, r3
 8004cfa:	482c      	ldr	r0, [pc, #176]	; (8004dac <MX_TIM1_Init+0x138>)
 8004cfc:	f010 fe94 	bl	8015a28 <HAL_TIM_ConfigClockSource>
 8004d00:	4603      	mov	r3, r0
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d001      	beq.n	8004d0a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8004d06:	f7ff fa13 	bl	8004130 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004d0a:	4828      	ldr	r0, [pc, #160]	; (8004dac <MX_TIM1_Init+0x138>)
 8004d0c:	f010 f8a6 	bl	8014e5c <HAL_TIM_PWM_Init>
 8004d10:	4603      	mov	r3, r0
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d001      	beq.n	8004d1a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8004d16:	f7ff fa0b 	bl	8004130 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004d22:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004d26:	4619      	mov	r1, r3
 8004d28:	4820      	ldr	r0, [pc, #128]	; (8004dac <MX_TIM1_Init+0x138>)
 8004d2a:	f011 fcb5 	bl	8016698 <HAL_TIMEx_MasterConfigSynchronization>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d001      	beq.n	8004d38 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8004d34:	f7ff f9fc 	bl	8004130 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004d38:	2360      	movs	r3, #96	; 0x60
 8004d3a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004d40:	2300      	movs	r3, #0
 8004d42:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004d44:	2300      	movs	r3, #0
 8004d46:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004d50:	2300      	movs	r3, #0
 8004d52:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004d54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d58:	2208      	movs	r2, #8
 8004d5a:	4619      	mov	r1, r3
 8004d5c:	4813      	ldr	r0, [pc, #76]	; (8004dac <MX_TIM1_Init+0x138>)
 8004d5e:	f010 fda1 	bl	80158a4 <HAL_TIM_PWM_ConfigChannel>
 8004d62:	4603      	mov	r3, r0
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d001      	beq.n	8004d6c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8004d68:	f7ff f9e2 	bl	8004130 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004d70:	2300      	movs	r3, #0
 8004d72:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004d74:	2300      	movs	r3, #0
 8004d76:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004d80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004d84:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004d86:	2300      	movs	r3, #0
 8004d88:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004d8a:	1d3b      	adds	r3, r7, #4
 8004d8c:	4619      	mov	r1, r3
 8004d8e:	4807      	ldr	r0, [pc, #28]	; (8004dac <MX_TIM1_Init+0x138>)
 8004d90:	f011 fcfe 	bl	8016790 <HAL_TIMEx_ConfigBreakDeadTime>
 8004d94:	4603      	mov	r3, r0
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d001      	beq.n	8004d9e <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8004d9a:	f7ff f9c9 	bl	8004130 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004d9e:	4803      	ldr	r0, [pc, #12]	; (8004dac <MX_TIM1_Init+0x138>)
 8004da0:	f000 f974 	bl	800508c <HAL_TIM_MspPostInit>

}
 8004da4:	bf00      	nop
 8004da6:	3758      	adds	r7, #88	; 0x58
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}
 8004dac:	2001c038 	.word	0x2001c038
 8004db0:	40010000 	.word	0x40010000

08004db4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b090      	sub	sp, #64	; 0x40
 8004db8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004dba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	601a      	str	r2, [r3, #0]
 8004dc2:	605a      	str	r2, [r3, #4]
 8004dc4:	609a      	str	r2, [r3, #8]
 8004dc6:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8004dc8:	f107 031c 	add.w	r3, r7, #28
 8004dcc:	2200      	movs	r2, #0
 8004dce:	601a      	str	r2, [r3, #0]
 8004dd0:	605a      	str	r2, [r3, #4]
 8004dd2:	609a      	str	r2, [r3, #8]
 8004dd4:	60da      	str	r2, [r3, #12]
 8004dd6:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8004dd8:	f107 030c 	add.w	r3, r7, #12
 8004ddc:	2200      	movs	r2, #0
 8004dde:	601a      	str	r2, [r3, #0]
 8004de0:	605a      	str	r2, [r3, #4]
 8004de2:	609a      	str	r2, [r3, #8]
 8004de4:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004de6:	1d3b      	adds	r3, r7, #4
 8004de8:	2200      	movs	r2, #0
 8004dea:	601a      	str	r2, [r3, #0]
 8004dec:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004dee:	4b3e      	ldr	r3, [pc, #248]	; (8004ee8 <MX_TIM2_Init+0x134>)
 8004df0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004df4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8004df6:	4b3c      	ldr	r3, [pc, #240]	; (8004ee8 <MX_TIM2_Init+0x134>)
 8004df8:	2200      	movs	r2, #0
 8004dfa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004dfc:	4b3a      	ldr	r3, [pc, #232]	; (8004ee8 <MX_TIM2_Init+0x134>)
 8004dfe:	2200      	movs	r2, #0
 8004e00:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8004e02:	4b39      	ldr	r3, [pc, #228]	; (8004ee8 <MX_TIM2_Init+0x134>)
 8004e04:	f04f 32ff 	mov.w	r2, #4294967295
 8004e08:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004e0a:	4b37      	ldr	r3, [pc, #220]	; (8004ee8 <MX_TIM2_Init+0x134>)
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004e10:	4b35      	ldr	r3, [pc, #212]	; (8004ee8 <MX_TIM2_Init+0x134>)
 8004e12:	2200      	movs	r2, #0
 8004e14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004e16:	4834      	ldr	r0, [pc, #208]	; (8004ee8 <MX_TIM2_Init+0x134>)
 8004e18:	f00f fef8 	bl	8014c0c <HAL_TIM_Base_Init>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d001      	beq.n	8004e26 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8004e22:	f7ff f985 	bl	8004130 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004e26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e2a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004e2c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004e30:	4619      	mov	r1, r3
 8004e32:	482d      	ldr	r0, [pc, #180]	; (8004ee8 <MX_TIM2_Init+0x134>)
 8004e34:	f010 fdf8 	bl	8015a28 <HAL_TIM_ConfigClockSource>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d001      	beq.n	8004e42 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8004e3e:	f7ff f977 	bl	8004130 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8004e42:	4829      	ldr	r0, [pc, #164]	; (8004ee8 <MX_TIM2_Init+0x134>)
 8004e44:	f010 f92c 	bl	80150a0 <HAL_TIM_IC_Init>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d001      	beq.n	8004e52 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8004e4e:	f7ff f96f 	bl	8004130 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8004e52:	2304      	movs	r3, #4
 8004e54:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8004e56:	2350      	movs	r3, #80	; 0x50
 8004e58:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8004e62:	2300      	movs	r3, #0
 8004e64:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8004e66:	f107 031c 	add.w	r3, r7, #28
 8004e6a:	4619      	mov	r1, r3
 8004e6c:	481e      	ldr	r0, [pc, #120]	; (8004ee8 <MX_TIM2_Init+0x134>)
 8004e6e:	f010 fea2 	bl	8015bb6 <HAL_TIM_SlaveConfigSynchro>
 8004e72:	4603      	mov	r3, r0
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d001      	beq.n	8004e7c <MX_TIM2_Init+0xc8>
  {
    Error_Handler();
 8004e78:	f7ff f95a 	bl	8004130 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8004e80:	2301      	movs	r3, #1
 8004e82:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8004e84:	2300      	movs	r3, #0
 8004e86:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8004e8c:	f107 030c 	add.w	r3, r7, #12
 8004e90:	2200      	movs	r2, #0
 8004e92:	4619      	mov	r1, r3
 8004e94:	4814      	ldr	r0, [pc, #80]	; (8004ee8 <MX_TIM2_Init+0x134>)
 8004e96:	f010 fc69 	bl	801576c <HAL_TIM_IC_ConfigChannel>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d001      	beq.n	8004ea4 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8004ea0:	f7ff f946 	bl	8004130 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8004ea4:	2302      	movs	r3, #2
 8004ea6:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8004ea8:	2302      	movs	r3, #2
 8004eaa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8004eac:	f107 030c 	add.w	r3, r7, #12
 8004eb0:	2204      	movs	r2, #4
 8004eb2:	4619      	mov	r1, r3
 8004eb4:	480c      	ldr	r0, [pc, #48]	; (8004ee8 <MX_TIM2_Init+0x134>)
 8004eb6:	f010 fc59 	bl	801576c <HAL_TIM_IC_ConfigChannel>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d001      	beq.n	8004ec4 <MX_TIM2_Init+0x110>
  {
    Error_Handler();
 8004ec0:	f7ff f936 	bl	8004130 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004ecc:	1d3b      	adds	r3, r7, #4
 8004ece:	4619      	mov	r1, r3
 8004ed0:	4805      	ldr	r0, [pc, #20]	; (8004ee8 <MX_TIM2_Init+0x134>)
 8004ed2:	f011 fbe1 	bl	8016698 <HAL_TIMEx_MasterConfigSynchronization>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d001      	beq.n	8004ee0 <MX_TIM2_Init+0x12c>
  {
    Error_Handler();
 8004edc:	f7ff f928 	bl	8004130 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004ee0:	bf00      	nop
 8004ee2:	3740      	adds	r7, #64	; 0x40
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}
 8004ee8:	2001c080 	.word	0x2001c080

08004eec <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b086      	sub	sp, #24
 8004ef0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004ef2:	f107 0308 	add.w	r3, r7, #8
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	601a      	str	r2, [r3, #0]
 8004efa:	605a      	str	r2, [r3, #4]
 8004efc:	609a      	str	r2, [r3, #8]
 8004efe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004f00:	463b      	mov	r3, r7
 8004f02:	2200      	movs	r2, #0
 8004f04:	601a      	str	r2, [r3, #0]
 8004f06:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004f08:	4b1d      	ldr	r3, [pc, #116]	; (8004f80 <MX_TIM3_Init+0x94>)
 8004f0a:	4a1e      	ldr	r2, [pc, #120]	; (8004f84 <MX_TIM3_Init+0x98>)
 8004f0c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8004f0e:	4b1c      	ldr	r3, [pc, #112]	; (8004f80 <MX_TIM3_Init+0x94>)
 8004f10:	2200      	movs	r2, #0
 8004f12:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f14:	4b1a      	ldr	r3, [pc, #104]	; (8004f80 <MX_TIM3_Init+0x94>)
 8004f16:	2200      	movs	r2, #0
 8004f18:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8004f1a:	4b19      	ldr	r3, [pc, #100]	; (8004f80 <MX_TIM3_Init+0x94>)
 8004f1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004f20:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004f22:	4b17      	ldr	r3, [pc, #92]	; (8004f80 <MX_TIM3_Init+0x94>)
 8004f24:	2200      	movs	r2, #0
 8004f26:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004f28:	4b15      	ldr	r3, [pc, #84]	; (8004f80 <MX_TIM3_Init+0x94>)
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004f2e:	4814      	ldr	r0, [pc, #80]	; (8004f80 <MX_TIM3_Init+0x94>)
 8004f30:	f00f fe6c 	bl	8014c0c <HAL_TIM_Base_Init>
 8004f34:	4603      	mov	r3, r0
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d001      	beq.n	8004f3e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8004f3a:	f7ff f8f9 	bl	8004130 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004f3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004f42:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004f44:	f107 0308 	add.w	r3, r7, #8
 8004f48:	4619      	mov	r1, r3
 8004f4a:	480d      	ldr	r0, [pc, #52]	; (8004f80 <MX_TIM3_Init+0x94>)
 8004f4c:	f010 fd6c 	bl	8015a28 <HAL_TIM_ConfigClockSource>
 8004f50:	4603      	mov	r3, r0
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d001      	beq.n	8004f5a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8004f56:	f7ff f8eb 	bl	8004130 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004f5a:	2320      	movs	r3, #32
 8004f5c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004f62:	463b      	mov	r3, r7
 8004f64:	4619      	mov	r1, r3
 8004f66:	4806      	ldr	r0, [pc, #24]	; (8004f80 <MX_TIM3_Init+0x94>)
 8004f68:	f011 fb96 	bl	8016698 <HAL_TIMEx_MasterConfigSynchronization>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d001      	beq.n	8004f76 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8004f72:	f7ff f8dd 	bl	8004130 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8004f76:	bf00      	nop
 8004f78:	3718      	adds	r7, #24
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}
 8004f7e:	bf00      	nop
 8004f80:	2001bff0 	.word	0x2001bff0
 8004f84:	40000400 	.word	0x40000400

08004f88 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b08c      	sub	sp, #48	; 0x30
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f90:	f107 031c 	add.w	r3, r7, #28
 8004f94:	2200      	movs	r2, #0
 8004f96:	601a      	str	r2, [r3, #0]
 8004f98:	605a      	str	r2, [r3, #4]
 8004f9a:	609a      	str	r2, [r3, #8]
 8004f9c:	60da      	str	r2, [r3, #12]
 8004f9e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a35      	ldr	r2, [pc, #212]	; (800507c <HAL_TIM_Base_MspInit+0xf4>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d10e      	bne.n	8004fc8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004faa:	2300      	movs	r3, #0
 8004fac:	61bb      	str	r3, [r7, #24]
 8004fae:	4b34      	ldr	r3, [pc, #208]	; (8005080 <HAL_TIM_Base_MspInit+0xf8>)
 8004fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fb2:	4a33      	ldr	r2, [pc, #204]	; (8005080 <HAL_TIM_Base_MspInit+0xf8>)
 8004fb4:	f043 0301 	orr.w	r3, r3, #1
 8004fb8:	6453      	str	r3, [r2, #68]	; 0x44
 8004fba:	4b31      	ldr	r3, [pc, #196]	; (8005080 <HAL_TIM_Base_MspInit+0xf8>)
 8004fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fbe:	f003 0301 	and.w	r3, r3, #1
 8004fc2:	61bb      	str	r3, [r7, #24]
 8004fc4:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8004fc6:	e055      	b.n	8005074 <HAL_TIM_Base_MspInit+0xec>
  else if(tim_baseHandle->Instance==TIM2)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fd0:	d135      	bne.n	800503e <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	617b      	str	r3, [r7, #20]
 8004fd6:	4b2a      	ldr	r3, [pc, #168]	; (8005080 <HAL_TIM_Base_MspInit+0xf8>)
 8004fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fda:	4a29      	ldr	r2, [pc, #164]	; (8005080 <HAL_TIM_Base_MspInit+0xf8>)
 8004fdc:	f043 0301 	orr.w	r3, r3, #1
 8004fe0:	6413      	str	r3, [r2, #64]	; 0x40
 8004fe2:	4b27      	ldr	r3, [pc, #156]	; (8005080 <HAL_TIM_Base_MspInit+0xf8>)
 8004fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe6:	f003 0301 	and.w	r3, r3, #1
 8004fea:	617b      	str	r3, [r7, #20]
 8004fec:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004fee:	2300      	movs	r3, #0
 8004ff0:	613b      	str	r3, [r7, #16]
 8004ff2:	4b23      	ldr	r3, [pc, #140]	; (8005080 <HAL_TIM_Base_MspInit+0xf8>)
 8004ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ff6:	4a22      	ldr	r2, [pc, #136]	; (8005080 <HAL_TIM_Base_MspInit+0xf8>)
 8004ff8:	f043 0301 	orr.w	r3, r3, #1
 8004ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8004ffe:	4b20      	ldr	r3, [pc, #128]	; (8005080 <HAL_TIM_Base_MspInit+0xf8>)
 8005000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005002:	f003 0301 	and.w	r3, r3, #1
 8005006:	613b      	str	r3, [r7, #16]
 8005008:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = IMD_data_Pin;
 800500a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800500e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005010:	2302      	movs	r3, #2
 8005012:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005014:	2300      	movs	r3, #0
 8005016:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005018:	2300      	movs	r3, #0
 800501a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800501c:	2301      	movs	r3, #1
 800501e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(IMD_data_GPIO_Port, &GPIO_InitStruct);
 8005020:	f107 031c 	add.w	r3, r7, #28
 8005024:	4619      	mov	r1, r3
 8005026:	4817      	ldr	r0, [pc, #92]	; (8005084 <HAL_TIM_Base_MspInit+0xfc>)
 8005028:	f00e fa1c 	bl	8013464 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800502c:	2200      	movs	r2, #0
 800502e:	2105      	movs	r1, #5
 8005030:	201c      	movs	r0, #28
 8005032:	f00d fe7d 	bl	8012d30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005036:	201c      	movs	r0, #28
 8005038:	f00d fe96 	bl	8012d68 <HAL_NVIC_EnableIRQ>
}
 800503c:	e01a      	b.n	8005074 <HAL_TIM_Base_MspInit+0xec>
  else if(tim_baseHandle->Instance==TIM3)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a11      	ldr	r2, [pc, #68]	; (8005088 <HAL_TIM_Base_MspInit+0x100>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d115      	bne.n	8005074 <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005048:	2300      	movs	r3, #0
 800504a:	60fb      	str	r3, [r7, #12]
 800504c:	4b0c      	ldr	r3, [pc, #48]	; (8005080 <HAL_TIM_Base_MspInit+0xf8>)
 800504e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005050:	4a0b      	ldr	r2, [pc, #44]	; (8005080 <HAL_TIM_Base_MspInit+0xf8>)
 8005052:	f043 0302 	orr.w	r3, r3, #2
 8005056:	6413      	str	r3, [r2, #64]	; 0x40
 8005058:	4b09      	ldr	r3, [pc, #36]	; (8005080 <HAL_TIM_Base_MspInit+0xf8>)
 800505a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800505c:	f003 0302 	and.w	r3, r3, #2
 8005060:	60fb      	str	r3, [r7, #12]
 8005062:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8005064:	2200      	movs	r2, #0
 8005066:	2105      	movs	r1, #5
 8005068:	201d      	movs	r0, #29
 800506a:	f00d fe61 	bl	8012d30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800506e:	201d      	movs	r0, #29
 8005070:	f00d fe7a 	bl	8012d68 <HAL_NVIC_EnableIRQ>
}
 8005074:	bf00      	nop
 8005076:	3730      	adds	r7, #48	; 0x30
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}
 800507c:	40010000 	.word	0x40010000
 8005080:	40023800 	.word	0x40023800
 8005084:	40020000 	.word	0x40020000
 8005088:	40000400 	.word	0x40000400

0800508c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b088      	sub	sp, #32
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005094:	f107 030c 	add.w	r3, r7, #12
 8005098:	2200      	movs	r2, #0
 800509a:	601a      	str	r2, [r3, #0]
 800509c:	605a      	str	r2, [r3, #4]
 800509e:	609a      	str	r2, [r3, #8]
 80050a0:	60da      	str	r2, [r3, #12]
 80050a2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a12      	ldr	r2, [pc, #72]	; (80050f4 <HAL_TIM_MspPostInit+0x68>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d11e      	bne.n	80050ec <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80050ae:	2300      	movs	r3, #0
 80050b0:	60bb      	str	r3, [r7, #8]
 80050b2:	4b11      	ldr	r3, [pc, #68]	; (80050f8 <HAL_TIM_MspPostInit+0x6c>)
 80050b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050b6:	4a10      	ldr	r2, [pc, #64]	; (80050f8 <HAL_TIM_MspPostInit+0x6c>)
 80050b8:	f043 0310 	orr.w	r3, r3, #16
 80050bc:	6313      	str	r3, [r2, #48]	; 0x30
 80050be:	4b0e      	ldr	r3, [pc, #56]	; (80050f8 <HAL_TIM_MspPostInit+0x6c>)
 80050c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050c2:	f003 0310 	and.w	r3, r3, #16
 80050c6:	60bb      	str	r3, [r7, #8]
 80050c8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = fan_PWM_Pin;
 80050ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80050ce:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050d0:	2302      	movs	r3, #2
 80050d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050d4:	2300      	movs	r3, #0
 80050d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050d8:	2300      	movs	r3, #0
 80050da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80050dc:	2301      	movs	r3, #1
 80050de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(fan_PWM_GPIO_Port, &GPIO_InitStruct);
 80050e0:	f107 030c 	add.w	r3, r7, #12
 80050e4:	4619      	mov	r1, r3
 80050e6:	4805      	ldr	r0, [pc, #20]	; (80050fc <HAL_TIM_MspPostInit+0x70>)
 80050e8:	f00e f9bc 	bl	8013464 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80050ec:	bf00      	nop
 80050ee:	3720      	adds	r7, #32
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}
 80050f4:	40010000 	.word	0x40010000
 80050f8:	40023800 	.word	0x40023800
 80050fc:	40021000 	.word	0x40021000

08005100 <CSE_S_x>:
RT_MODEL_CSE_T *const CSE_M = &CSE_M_;
static void UKFCorrectorAdditive_getPredict(real_T Rs, const real_T X1[3], const
  real_T S[9], real_T alpha, real_T beta, real_T kappa, real_T *Ymean, real_T
  Pxy[3], real_T *Sy);
void CSE_S_x(const real_T rtu_x[3], real_T rty_x_next[3])
{
 8005100:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005104:	b086      	sub	sp, #24
 8005106:	af00      	add	r7, sp, #0
 8005108:	6078      	str	r0, [r7, #4]
 800510a:	6039      	str	r1, [r7, #0]
  real_T rtb_Divide;
  real_T tmp;
  rtb_Divide = rtu_x[1] / rtu_x[2];
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	3308      	adds	r3, #8
 8005110:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	3310      	adds	r3, #16
 8005118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800511c:	f7fb fb88 	bl	8000830 <__aeabi_ddiv>
 8005120:	4602      	mov	r2, r0
 8005122:	460b      	mov	r3, r1
 8005124:	e9c7 2304 	strd	r2, r3, [r7, #16]
  tmp = exp(-CSE_P.Ts / look1_binlxpw(rtb_Divide, CSE_P.soc, CSE_P.tau, 12U));
 8005128:	4b3e      	ldr	r3, [pc, #248]	; (8005224 <CSE_S_x+0x124>)
 800512a:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	; 0xd0
 800512e:	4614      	mov	r4, r2
 8005130:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8005134:	220c      	movs	r2, #12
 8005136:	493c      	ldr	r1, [pc, #240]	; (8005228 <CSE_S_x+0x128>)
 8005138:	483c      	ldr	r0, [pc, #240]	; (800522c <CSE_S_x+0x12c>)
 800513a:	ed97 0b04 	vldr	d0, [r7, #16]
 800513e:	f005 fb4f 	bl	800a7e0 <look1_binlxpw>
 8005142:	ec53 2b10 	vmov	r2, r3, d0
 8005146:	4620      	mov	r0, r4
 8005148:	4629      	mov	r1, r5
 800514a:	f7fb fb71 	bl	8000830 <__aeabi_ddiv>
 800514e:	4602      	mov	r2, r0
 8005150:	460b      	mov	r3, r1
 8005152:	ec43 2b17 	vmov	d7, r2, r3
 8005156:	eeb0 0a47 	vmov.f32	s0, s14
 800515a:	eef0 0a67 	vmov.f32	s1, s15
 800515e:	f016 f8ab 	bl	801b2b8 <exp>
 8005162:	ed87 0b02 	vstr	d0, [r7, #8]
  rty_x_next[0] = (1.0 - tmp) * CSE_U.current * look1_binlxpw(rtb_Divide,
 8005166:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800516a:	f04f 0000 	mov.w	r0, #0
 800516e:	4930      	ldr	r1, [pc, #192]	; (8005230 <CSE_S_x+0x130>)
 8005170:	f7fb f87c 	bl	800026c <__aeabi_dsub>
 8005174:	4602      	mov	r2, r0
 8005176:	460b      	mov	r3, r1
 8005178:	4610      	mov	r0, r2
 800517a:	4619      	mov	r1, r3
 800517c:	4b2d      	ldr	r3, [pc, #180]	; (8005234 <CSE_S_x+0x134>)
 800517e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005182:	f7fb fa2b 	bl	80005dc <__aeabi_dmul>
 8005186:	4602      	mov	r2, r0
 8005188:	460b      	mov	r3, r1
 800518a:	4614      	mov	r4, r2
 800518c:	461d      	mov	r5, r3
 800518e:	220c      	movs	r2, #12
 8005190:	4924      	ldr	r1, [pc, #144]	; (8005224 <CSE_S_x+0x124>)
 8005192:	4826      	ldr	r0, [pc, #152]	; (800522c <CSE_S_x+0x12c>)
 8005194:	ed97 0b04 	vldr	d0, [r7, #16]
 8005198:	f005 fb22 	bl	800a7e0 <look1_binlxpw>
 800519c:	ec53 2b10 	vmov	r2, r3, d0
 80051a0:	4620      	mov	r0, r4
 80051a2:	4629      	mov	r1, r5
 80051a4:	f7fb fa1a 	bl	80005dc <__aeabi_dmul>
 80051a8:	4602      	mov	r2, r0
 80051aa:	460b      	mov	r3, r1
 80051ac:	4614      	mov	r4, r2
 80051ae:	461d      	mov	r5, r3
    CSE_P.soc, CSE_P.Rp, 12U) + tmp * rtu_x[0];
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80051b6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80051ba:	f7fb fa0f 	bl	80005dc <__aeabi_dmul>
 80051be:	4602      	mov	r2, r0
 80051c0:	460b      	mov	r3, r1
 80051c2:	4620      	mov	r0, r4
 80051c4:	4629      	mov	r1, r5
 80051c6:	f7fb f853 	bl	8000270 <__adddf3>
 80051ca:	4602      	mov	r2, r0
 80051cc:	460b      	mov	r3, r1
  rty_x_next[0] = (1.0 - tmp) * CSE_U.current * look1_binlxpw(rtb_Divide,
 80051ce:	6839      	ldr	r1, [r7, #0]
 80051d0:	e9c1 2300 	strd	r2, r3, [r1]
  rty_x_next[1] = CSE_U.current * CSE_P.Ts + rtu_x[1];
 80051d4:	4b17      	ldr	r3, [pc, #92]	; (8005234 <CSE_S_x+0x134>)
 80051d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80051da:	4b12      	ldr	r3, [pc, #72]	; (8005224 <CSE_S_x+0x124>)
 80051dc:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	; 0xd0
 80051e0:	f7fb f9fc 	bl	80005dc <__aeabi_dmul>
 80051e4:	4602      	mov	r2, r0
 80051e6:	460b      	mov	r3, r1
 80051e8:	4690      	mov	r8, r2
 80051ea:	4699      	mov	r9, r3
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	3308      	adds	r3, #8
 80051f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051f4:	6839      	ldr	r1, [r7, #0]
 80051f6:	f101 0408 	add.w	r4, r1, #8
 80051fa:	4640      	mov	r0, r8
 80051fc:	4649      	mov	r1, r9
 80051fe:	f7fb f837 	bl	8000270 <__adddf3>
 8005202:	4602      	mov	r2, r0
 8005204:	460b      	mov	r3, r1
 8005206:	e9c4 2300 	strd	r2, r3, [r4]
  rty_x_next[2] = rtu_x[2];
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	f103 0110 	add.w	r1, r3, #16
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8005216:	e9c1 2300 	strd	r2, r3, [r1]
}
 800521a:	bf00      	nop
 800521c:	3718      	adds	r7, #24
 800521e:	46bd      	mov	sp, r7
 8005220:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005224:	20000088 	.word	0x20000088
 8005228:	20000230 	.word	0x20000230
 800522c:	200001c8 	.word	0x200001c8
 8005230:	3ff00000 	.word	0x3ff00000
 8005234:	2001c0d8 	.word	0x2001c0d8

08005238 <CSE_M_x>:

void CSE_M_x(const real_T rtu_x[3], real_T *rty_y)
{
 8005238:	b5b0      	push	{r4, r5, r7, lr}
 800523a:	b084      	sub	sp, #16
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	6039      	str	r1, [r7, #0]
  real_T rtb_Divide;
  rtb_Divide = rtu_x[1] / rtu_x[2];
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	3308      	adds	r3, #8
 8005246:	e9d3 0100 	ldrd	r0, r1, [r3]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	3310      	adds	r3, #16
 800524e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005252:	f7fb faed 	bl	8000830 <__aeabi_ddiv>
 8005256:	4602      	mov	r2, r0
 8005258:	460b      	mov	r3, r1
 800525a:	e9c7 2302 	strd	r2, r3, [r7, #8]
  *rty_y = (CSE_U.current * look1_binlxpw(rtb_Divide, CSE_P.soc, CSE_P.Rs, 12U)
 800525e:	4b19      	ldr	r3, [pc, #100]	; (80052c4 <CSE_M_x+0x8c>)
 8005260:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005264:	220c      	movs	r2, #12
 8005266:	4918      	ldr	r1, [pc, #96]	; (80052c8 <CSE_M_x+0x90>)
 8005268:	4818      	ldr	r0, [pc, #96]	; (80052cc <CSE_M_x+0x94>)
 800526a:	ed97 0b02 	vldr	d0, [r7, #8]
 800526e:	f005 fab7 	bl	800a7e0 <look1_binlxpw>
 8005272:	ec53 2b10 	vmov	r2, r3, d0
 8005276:	4620      	mov	r0, r4
 8005278:	4629      	mov	r1, r5
 800527a:	f7fb f9af 	bl	80005dc <__aeabi_dmul>
 800527e:	4602      	mov	r2, r0
 8005280:	460b      	mov	r3, r1
 8005282:	4614      	mov	r4, r2
 8005284:	461d      	mov	r5, r3
            + look1_binlxpw(rtb_Divide, CSE_P.soc, CSE_P.ocv, 12U)) + rtu_x[0];
 8005286:	220c      	movs	r2, #12
 8005288:	4911      	ldr	r1, [pc, #68]	; (80052d0 <CSE_M_x+0x98>)
 800528a:	4810      	ldr	r0, [pc, #64]	; (80052cc <CSE_M_x+0x94>)
 800528c:	ed97 0b02 	vldr	d0, [r7, #8]
 8005290:	f005 faa6 	bl	800a7e0 <look1_binlxpw>
 8005294:	ec53 2b10 	vmov	r2, r3, d0
 8005298:	4620      	mov	r0, r4
 800529a:	4629      	mov	r1, r5
 800529c:	f7fa ffe8 	bl	8000270 <__adddf3>
 80052a0:	4602      	mov	r2, r0
 80052a2:	460b      	mov	r3, r1
 80052a4:	4610      	mov	r0, r2
 80052a6:	4619      	mov	r1, r3
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ae:	f7fa ffdf 	bl	8000270 <__adddf3>
 80052b2:	4602      	mov	r2, r0
 80052b4:	460b      	mov	r3, r1
  *rty_y = (CSE_U.current * look1_binlxpw(rtb_Divide, CSE_P.soc, CSE_P.Rs, 12U)
 80052b6:	6839      	ldr	r1, [r7, #0]
 80052b8:	e9c1 2300 	strd	r2, r3, [r1]
}
 80052bc:	bf00      	nop
 80052be:	3710      	adds	r7, #16
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bdb0      	pop	{r4, r5, r7, pc}
 80052c4:	2001c0d8 	.word	0x2001c0d8
 80052c8:	200000f0 	.word	0x200000f0
 80052cc:	200001c8 	.word	0x200001c8
 80052d0:	20000160 	.word	0x20000160

080052d4 <UKFCorrectorAdditive_getPredict>:

static void UKFCorrectorAdditive_getPredict(real_T Rs, const real_T X1[3], const
  real_T S[9], real_T alpha, real_T beta, real_T kappa, real_T *Ymean, real_T
  Pxy[3], real_T *Sy)
{
 80052d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052d8:	ed2d 8b02 	vpush	{d8}
 80052dc:	b0e1      	sub	sp, #388	; 0x184
 80052de:	af04      	add	r7, sp, #16
 80052e0:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80052e4:	ed84 0b00 	vstr	d0, [r4]
 80052e8:	f107 0434 	add.w	r4, r7, #52	; 0x34
 80052ec:	6020      	str	r0, [r4, #0]
 80052ee:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80052f2:	6001      	str	r1, [r0, #0]
 80052f4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80052f8:	ed81 1b00 	vstr	d1, [r1]
 80052fc:	f107 0120 	add.w	r1, r7, #32
 8005300:	ed81 2b00 	vstr	d2, [r1]
 8005304:	f107 0118 	add.w	r1, r7, #24
 8005308:	ed81 3b00 	vstr	d3, [r1]
 800530c:	f107 0114 	add.w	r1, r7, #20
 8005310:	600a      	str	r2, [r1, #0]
 8005312:	f107 0210 	add.w	r2, r7, #16
 8005316:	6013      	str	r3, [r2, #0]
  real_T Wmean[2];
  real_T tempY;
  real_T tempY_tmp;
  int32_T knt;
  int32_T knt_0;
  tempY_tmp = alpha * alpha;
 8005318:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800531c:	e9d1 2300 	ldrd	r2, r3, [r1]
 8005320:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005324:	f7fb f95a 	bl	80005dc <__aeabi_dmul>
 8005328:	4602      	mov	r2, r0
 800532a:	460b      	mov	r3, r1
 800532c:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8005330:	e9c1 2300 	strd	r2, r3, [r1]
  tempY = (kappa + 3.0) * tempY_tmp;
 8005334:	f107 0118 	add.w	r1, r7, #24
 8005338:	f04f 0200 	mov.w	r2, #0
 800533c:	4b96      	ldr	r3, [pc, #600]	; (8005598 <UKFCorrectorAdditive_getPredict+0x2c4>)
 800533e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005342:	f7fa ff95 	bl	8000270 <__adddf3>
 8005346:	4602      	mov	r2, r0
 8005348:	460b      	mov	r3, r1
 800534a:	4610      	mov	r0, r2
 800534c:	4619      	mov	r1, r3
 800534e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005356:	f7fb f941 	bl	80005dc <__aeabi_dmul>
 800535a:	4602      	mov	r2, r0
 800535c:	460b      	mov	r3, r1
 800535e:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8005362:	e9c1 2300 	strd	r2, r3, [r1]
  Wmean[0] = 1.0 - 3.0 / tempY;
 8005366:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800536a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800536e:	f04f 0000 	mov.w	r0, #0
 8005372:	4989      	ldr	r1, [pc, #548]	; (8005598 <UKFCorrectorAdditive_getPredict+0x2c4>)
 8005374:	f7fb fa5c 	bl	8000830 <__aeabi_ddiv>
 8005378:	4602      	mov	r2, r0
 800537a:	460b      	mov	r3, r1
 800537c:	f04f 0000 	mov.w	r0, #0
 8005380:	4986      	ldr	r1, [pc, #536]	; (800559c <UKFCorrectorAdditive_getPredict+0x2c8>)
 8005382:	f7fa ff73 	bl	800026c <__aeabi_dsub>
 8005386:	4602      	mov	r2, r0
 8005388:	460b      	mov	r3, r1
 800538a:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800538e:	e9c1 2300 	strd	r2, r3, [r1]
  Wmean[1] = 1.0 / (2.0 * tempY);
 8005392:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005396:	e9d3 0100 	ldrd	r0, r1, [r3]
 800539a:	4602      	mov	r2, r0
 800539c:	460b      	mov	r3, r1
 800539e:	f7fa ff67 	bl	8000270 <__adddf3>
 80053a2:	4602      	mov	r2, r0
 80053a4:	460b      	mov	r3, r1
 80053a6:	f04f 0000 	mov.w	r0, #0
 80053aa:	497c      	ldr	r1, [pc, #496]	; (800559c <UKFCorrectorAdditive_getPredict+0x2c8>)
 80053ac:	f7fb fa40 	bl	8000830 <__aeabi_ddiv>
 80053b0:	4602      	mov	r2, r0
 80053b2:	460b      	mov	r3, r1
 80053b4:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80053b8:	e9c1 2302 	strd	r2, r3, [r1, #8]
  Wcov[0] = ((1.0 - tempY_tmp) + beta) + Wmean[0];
 80053bc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80053c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053c4:	f04f 0000 	mov.w	r0, #0
 80053c8:	4974      	ldr	r1, [pc, #464]	; (800559c <UKFCorrectorAdditive_getPredict+0x2c8>)
 80053ca:	f7fa ff4f 	bl	800026c <__aeabi_dsub>
 80053ce:	4602      	mov	r2, r0
 80053d0:	460b      	mov	r3, r1
 80053d2:	4610      	mov	r0, r2
 80053d4:	4619      	mov	r1, r3
 80053d6:	f107 0320 	add.w	r3, r7, #32
 80053da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053de:	f7fa ff47 	bl	8000270 <__adddf3>
 80053e2:	4602      	mov	r2, r0
 80053e4:	460b      	mov	r3, r1
 80053e6:	4610      	mov	r0, r2
 80053e8:	4619      	mov	r1, r3
 80053ea:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80053ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f2:	f7fa ff3d 	bl	8000270 <__adddf3>
 80053f6:	4602      	mov	r2, r0
 80053f8:	460b      	mov	r3, r1
 80053fa:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80053fe:	e9c1 2300 	strd	r2, r3, [r1]
  Wcov[1] = Wmean[1];
 8005402:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005406:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800540a:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800540e:	e9c1 2302 	strd	r2, r3, [r1, #8]
  if (Wmean[0] != 0.0) {
 8005412:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005416:	e9d3 0100 	ldrd	r0, r1, [r3]
 800541a:	f04f 0200 	mov.w	r2, #0
 800541e:	f04f 0300 	mov.w	r3, #0
 8005422:	f7fb fb43 	bl	8000aac <__aeabi_dcmpeq>
 8005426:	4603      	mov	r3, r0
 8005428:	2b00      	cmp	r3, #0
 800542a:	d154      	bne.n	80054d6 <UKFCorrectorAdditive_getPredict+0x202>
    real_T Wcov_0;
    *Sy = Wmean[0];
 800542c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005434:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 8005438:	e9c1 2300 	strd	r2, r3, [r1]
    tempY_tmp = Wmean[0];
 800543c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005444:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8005448:	e9c1 2300 	strd	r2, r3, [r1]
    Wmean[0] /= Wmean[0];
 800544c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005450:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005454:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800545c:	f7fb f9e8 	bl	8000830 <__aeabi_ddiv>
 8005460:	4602      	mov	r2, r0
 8005462:	460b      	mov	r3, r1
 8005464:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8005468:	e9c1 2300 	strd	r2, r3, [r1]
    Wcov[0] /= *Sy;
 800546c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8005470:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005474:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8005478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800547c:	f7fb f9d8 	bl	8000830 <__aeabi_ddiv>
 8005480:	4602      	mov	r2, r0
 8005482:	460b      	mov	r3, r1
 8005484:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8005488:	e9c1 2300 	strd	r2, r3, [r1]
    Wcov_0 = Wmean[1];
 800548c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005490:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8005494:	e9c7 2358 	strd	r2, r3, [r7, #352]	; 0x160
    Wmean[1] /= tempY_tmp;
 8005498:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800549c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80054a0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80054a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054a8:	f7fb f9c2 	bl	8000830 <__aeabi_ddiv>
 80054ac:	4602      	mov	r2, r0
 80054ae:	460b      	mov	r3, r1
 80054b0:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80054b4:	e9c1 2302 	strd	r2, r3, [r1, #8]
    Wcov[1] = Wcov_0 / *Sy;
 80054b8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80054bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054c0:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	; 0x160
 80054c4:	f7fb f9b4 	bl	8000830 <__aeabi_ddiv>
 80054c8:	4602      	mov	r2, r0
 80054ca:	460b      	mov	r3, r1
 80054cc:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80054d0:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80054d4:	e006      	b.n	80054e4 <UKFCorrectorAdditive_getPredict+0x210>
  } else {
    *Sy = 1.0;
 80054d6:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 80054da:	f04f 0200 	mov.w	r2, #0
 80054de:	4b2f      	ldr	r3, [pc, #188]	; (800559c <UKFCorrectorAdditive_getPredict+0x2c8>)
 80054e0:	e9c1 2300 	strd	r2, r3, [r1]
  }

  tempY = sqrt(tempY);
 80054e4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80054e8:	ed93 7b00 	vldr	d7, [r3]
 80054ec:	eeb0 0a47 	vmov.f32	s0, s14
 80054f0:	eef0 0a67 	vmov.f32	s1, s15
 80054f4:	f015 ff78 	bl	801b3e8 <sqrt>
 80054f8:	eeb0 7a40 	vmov.f32	s14, s0
 80054fc:	eef0 7a60 	vmov.f32	s15, s1
 8005500:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005504:	ed83 7b00 	vstr	d7, [r3]
  for (knt = 0; knt < 9; knt++) {
 8005508:	2300      	movs	r3, #0
 800550a:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 800550e:	e037      	b.n	8005580 <UKFCorrectorAdditive_getPredict+0x2ac>
    tempY_tmp = tempY * S[knt];
 8005510:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005514:	00db      	lsls	r3, r3, #3
 8005516:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800551a:	6812      	ldr	r2, [r2, #0]
 800551c:	4413      	add	r3, r2
 800551e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005522:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800552a:	f7fb f857 	bl	80005dc <__aeabi_dmul>
 800552e:	4602      	mov	r2, r0
 8005530:	460b      	mov	r3, r1
 8005532:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8005536:	e9c1 2300 	strd	r2, r3, [r1]
    X2[knt] = tempY_tmp;
 800553a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800553e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005542:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8005546:	00c9      	lsls	r1, r1, #3
 8005548:	f507 70b8 	add.w	r0, r7, #368	; 0x170
 800554c:	4401      	add	r1, r0
 800554e:	39a0      	subs	r1, #160	; 0xa0
 8005550:	e9c1 2300 	strd	r2, r3, [r1]
    X2[knt + 9] = -tempY_tmp;
 8005554:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800555c:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8005560:	3109      	adds	r1, #9
 8005562:	4690      	mov	r8, r2
 8005564:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8005568:	00cb      	lsls	r3, r1, #3
 800556a:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 800556e:	4413      	add	r3, r2
 8005570:	3ba0      	subs	r3, #160	; 0xa0
 8005572:	e9c3 8900 	strd	r8, r9, [r3]
  for (knt = 0; knt < 9; knt++) {
 8005576:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800557a:	3301      	adds	r3, #1
 800557c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8005580:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005584:	2b08      	cmp	r3, #8
 8005586:	ddc3      	ble.n	8005510 <UKFCorrectorAdditive_getPredict+0x23c>
  }

  knt_0 = 0;
 8005588:	2300      	movs	r3, #0
 800558a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  for (knt = 0; knt < 6; knt++) {
 800558e:	2300      	movs	r3, #0
 8005590:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8005594:	e065      	b.n	8005662 <UKFCorrectorAdditive_getPredict+0x38e>
 8005596:	bf00      	nop
 8005598:	40080000 	.word	0x40080000
 800559c:	3ff00000 	.word	0x3ff00000
    X2[knt_0] += X1[0];
 80055a0:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80055a4:	00db      	lsls	r3, r3, #3
 80055a6:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 80055aa:	4413      	add	r3, r2
 80055ac:	3ba0      	subs	r3, #160	; 0xa0
 80055ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80055b2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055bc:	f7fa fe58 	bl	8000270 <__adddf3>
 80055c0:	4602      	mov	r2, r0
 80055c2:	460b      	mov	r3, r1
 80055c4:	f8d7 1168 	ldr.w	r1, [r7, #360]	; 0x168
 80055c8:	00c9      	lsls	r1, r1, #3
 80055ca:	f507 70b8 	add.w	r0, r7, #368	; 0x170
 80055ce:	4401      	add	r1, r0
 80055d0:	39a0      	subs	r1, #160	; 0xa0
 80055d2:	e9c1 2300 	strd	r2, r3, [r1]
    X2[knt_0 + 1] += X1[1];
 80055d6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80055da:	3301      	adds	r3, #1
 80055dc:	00db      	lsls	r3, r3, #3
 80055de:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 80055e2:	4413      	add	r3, r2
 80055e4:	3ba0      	subs	r3, #160	; 0xa0
 80055e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80055ea:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	3308      	adds	r3, #8
 80055f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f6:	f8d7 4168 	ldr.w	r4, [r7, #360]	; 0x168
 80055fa:	3401      	adds	r4, #1
 80055fc:	f7fa fe38 	bl	8000270 <__adddf3>
 8005600:	4602      	mov	r2, r0
 8005602:	460b      	mov	r3, r1
 8005604:	00e1      	lsls	r1, r4, #3
 8005606:	f507 70b8 	add.w	r0, r7, #368	; 0x170
 800560a:	4401      	add	r1, r0
 800560c:	39a0      	subs	r1, #160	; 0xa0
 800560e:	e9c1 2300 	strd	r2, r3, [r1]
    X2[knt_0 + 2] += X1[2];
 8005612:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005616:	3302      	adds	r3, #2
 8005618:	00db      	lsls	r3, r3, #3
 800561a:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 800561e:	4413      	add	r3, r2
 8005620:	3ba0      	subs	r3, #160	; 0xa0
 8005622:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005626:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	3310      	adds	r3, #16
 800562e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005632:	f8d7 4168 	ldr.w	r4, [r7, #360]	; 0x168
 8005636:	3402      	adds	r4, #2
 8005638:	f7fa fe1a 	bl	8000270 <__adddf3>
 800563c:	4602      	mov	r2, r0
 800563e:	460b      	mov	r3, r1
 8005640:	00e1      	lsls	r1, r4, #3
 8005642:	f507 70b8 	add.w	r0, r7, #368	; 0x170
 8005646:	4401      	add	r1, r0
 8005648:	39a0      	subs	r1, #160	; 0xa0
 800564a:	e9c1 2300 	strd	r2, r3, [r1]
    knt_0 += 3;
 800564e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005652:	3303      	adds	r3, #3
 8005654:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  for (knt = 0; knt < 6; knt++) {
 8005658:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800565c:	3301      	adds	r3, #1
 800565e:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8005662:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005666:	2b05      	cmp	r3, #5
 8005668:	dd9a      	ble.n	80055a0 <UKFCorrectorAdditive_getPredict+0x2cc>
  }

  knt_0 = 0;
 800566a:	2300      	movs	r3, #0
 800566c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  for (knt = 0; knt < 6; knt++) {
 8005670:	2300      	movs	r3, #0
 8005672:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8005676:	e018      	b.n	80056aa <UKFCorrectorAdditive_getPredict+0x3d6>
    CSE_M_x(&X2[knt_0], &Y2[knt]);
 8005678:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 800567c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005680:	00db      	lsls	r3, r3, #3
 8005682:	18d0      	adds	r0, r2, r3
 8005684:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8005688:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800568c:	00db      	lsls	r3, r3, #3
 800568e:	4413      	add	r3, r2
 8005690:	4619      	mov	r1, r3
 8005692:	f7ff fdd1 	bl	8005238 <CSE_M_x>
    knt_0 += 3;
 8005696:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800569a:	3303      	adds	r3, #3
 800569c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  for (knt = 0; knt < 6; knt++) {
 80056a0:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80056a4:	3301      	adds	r3, #1
 80056a6:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 80056aa:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80056ae:	2b05      	cmp	r3, #5
 80056b0:	dde2      	ble.n	8005678 <UKFCorrectorAdditive_getPredict+0x3a4>
  }

  CSE_M_x(X1, &tempY);
 80056b2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80056b6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80056ba:	4611      	mov	r1, r2
 80056bc:	6818      	ldr	r0, [r3, #0]
 80056be:	f7ff fdbb 	bl	8005238 <CSE_M_x>
  for (knt = 0; knt < 6; knt++) {
 80056c2:	2300      	movs	r3, #0
 80056c4:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 80056c8:	e027      	b.n	800571a <UKFCorrectorAdditive_getPredict+0x446>
    Y2_0[knt] = (Y2[knt] - tempY) + tempY;
 80056ca:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80056ce:	00db      	lsls	r3, r3, #3
 80056d0:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 80056d4:	4413      	add	r3, r2
 80056d6:	3bd0      	subs	r3, #208	; 0xd0
 80056d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80056dc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80056e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056e4:	f7fa fdc2 	bl	800026c <__aeabi_dsub>
 80056e8:	4602      	mov	r2, r0
 80056ea:	460b      	mov	r3, r1
 80056ec:	4610      	mov	r0, r2
 80056ee:	4619      	mov	r1, r3
 80056f0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80056f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056f8:	f7fa fdba 	bl	8000270 <__adddf3>
 80056fc:	4602      	mov	r2, r0
 80056fe:	460b      	mov	r3, r1
 8005700:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8005704:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8005708:	00c9      	lsls	r1, r1, #3
 800570a:	4401      	add	r1, r0
 800570c:	e9c1 2300 	strd	r2, r3, [r1]
  for (knt = 0; knt < 6; knt++) {
 8005710:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005714:	3301      	adds	r3, #1
 8005716:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 800571a:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800571e:	2b05      	cmp	r3, #5
 8005720:	ddd3      	ble.n	80056ca <UKFCorrectorAdditive_getPredict+0x3f6>
  }

  UTMeanCovSqrt_C6QfB9Td(Wmean, Wcov, *Sy, tempY, Y2_0, X1, X2, Ymean,
 8005722:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8005726:	ed93 7b00 	vldr	d7, [r3]
 800572a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800572e:	ed93 6b00 	vldr	d6, [r3]
 8005732:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005736:	f107 0470 	add.w	r4, r7, #112	; 0x70
 800573a:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800573e:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8005742:	f107 0210 	add.w	r2, r7, #16
 8005746:	6812      	ldr	r2, [r2, #0]
 8005748:	9203      	str	r2, [sp, #12]
 800574a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800574e:	9202      	str	r2, [sp, #8]
 8005750:	f107 0214 	add.w	r2, r7, #20
 8005754:	6812      	ldr	r2, [r2, #0]
 8005756:	9201      	str	r2, [sp, #4]
 8005758:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 800575c:	9200      	str	r2, [sp, #0]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4622      	mov	r2, r4
 8005762:	eeb0 1a46 	vmov.f32	s2, s12
 8005766:	eef0 1a66 	vmov.f32	s3, s13
 800576a:	eeb0 0a47 	vmov.f32	s0, s14
 800576e:	eef0 0a67 	vmov.f32	s1, s15
 8005772:	f004 fbdb 	bl	8009f2c <UTMeanCovSqrt_C6QfB9Td>
    &tempY_tmp, Pxy);
  Wmean[0] = tempY_tmp;
 8005776:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800577a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800577e:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8005782:	e9c1 2300 	strd	r2, r3, [r1]
  Wmean[1] = Rs;
 8005786:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800578a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800578e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005792:	e9c1 2302 	strd	r2, r3, [r1, #8]
  *Sy = tempY_tmp;
 8005796:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800579a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800579e:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 80057a2:	e9c1 2300 	strd	r2, r3, [r1]
  tempY = xnrm2_Mnmxg9YT(1, Wmean, 2);
 80057a6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80057aa:	2202      	movs	r2, #2
 80057ac:	4619      	mov	r1, r3
 80057ae:	2001      	movs	r0, #1
 80057b0:	f009 feec 	bl	800f58c <xnrm2_Mnmxg9YT>
 80057b4:	eeb0 7a40 	vmov.f32	s14, s0
 80057b8:	eef0 7a60 	vmov.f32	s15, s1
 80057bc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80057c0:	ed83 7b00 	vstr	d7, [r3]
  if (tempY != 0.0) {
 80057c4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80057c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80057cc:	f04f 0200 	mov.w	r2, #0
 80057d0:	f04f 0300 	mov.w	r3, #0
 80057d4:	f7fb f96a 	bl	8000aac <__aeabi_dcmpeq>
 80057d8:	4603      	mov	r3, r0
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d000      	beq.n	80057e0 <UKFCorrectorAdditive_getPredict+0x50c>
      *Sy = tempY;
    } else {
      *Sy = tempY;
    }
  }
}
 80057de:	e0fa      	b.n	80059d6 <UKFCorrectorAdditive_getPredict+0x702>
    tempY = rt_hypotd_snf(tempY_tmp, tempY);
 80057e0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80057e4:	ed93 7b00 	vldr	d7, [r3]
 80057e8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80057ec:	ed93 6b00 	vldr	d6, [r3]
 80057f0:	eeb0 1a46 	vmov.f32	s2, s12
 80057f4:	eef0 1a66 	vmov.f32	s3, s13
 80057f8:	eeb0 0a47 	vmov.f32	s0, s14
 80057fc:	eef0 0a67 	vmov.f32	s1, s15
 8005800:	f007 fb3a 	bl	800ce78 <rt_hypotd_snf>
 8005804:	eeb0 7a40 	vmov.f32	s14, s0
 8005808:	eef0 7a60 	vmov.f32	s15, s1
 800580c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005810:	ed83 7b00 	vstr	d7, [r3]
    if (tempY_tmp >= 0.0) {
 8005814:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005818:	e9d3 0100 	ldrd	r0, r1, [r3]
 800581c:	f04f 0200 	mov.w	r2, #0
 8005820:	f04f 0300 	mov.w	r3, #0
 8005824:	f7fb f960 	bl	8000ae8 <__aeabi_dcmpge>
 8005828:	4603      	mov	r3, r0
 800582a:	2b00      	cmp	r3, #0
 800582c:	d00a      	beq.n	8005844 <UKFCorrectorAdditive_getPredict+0x570>
      tempY = -tempY;
 800582e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005836:	4615      	mov	r5, r2
 8005838:	f083 4600 	eor.w	r6, r3, #2147483648	; 0x80000000
 800583c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005840:	e9c3 5600 	strd	r5, r6, [r3]
    if (fabs(tempY) < 1.0020841800044864E-292) {
 8005844:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800584c:	60ba      	str	r2, [r7, #8]
 800584e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005852:	60fb      	str	r3, [r7, #12]
 8005854:	f04f 0200 	mov.w	r2, #0
 8005858:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800585c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005860:	f7fb f92e 	bl	8000ac0 <__aeabi_dcmplt>
 8005864:	4603      	mov	r3, r0
 8005866:	2b00      	cmp	r3, #0
 8005868:	f000 80ad 	beq.w	80059c6 <UKFCorrectorAdditive_getPredict+0x6f2>
      knt = 0;
 800586c:	2300      	movs	r3, #0
 800586e:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
        knt++;
 8005872:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005876:	3301      	adds	r3, #1
 8005878:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
        Wmean[1] *= 9.9792015476736E+291;
 800587c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005880:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8005884:	f04f 0200 	mov.w	r2, #0
 8005888:	4b57      	ldr	r3, [pc, #348]	; (80059e8 <UKFCorrectorAdditive_getPredict+0x714>)
 800588a:	f7fa fea7 	bl	80005dc <__aeabi_dmul>
 800588e:	4602      	mov	r2, r0
 8005890:	460b      	mov	r3, r1
 8005892:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8005896:	e9c1 2302 	strd	r2, r3, [r1, #8]
        tempY *= 9.9792015476736E+291;
 800589a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800589e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80058a2:	f04f 0200 	mov.w	r2, #0
 80058a6:	4b50      	ldr	r3, [pc, #320]	; (80059e8 <UKFCorrectorAdditive_getPredict+0x714>)
 80058a8:	f7fa fe98 	bl	80005dc <__aeabi_dmul>
 80058ac:	4602      	mov	r2, r0
 80058ae:	460b      	mov	r3, r1
 80058b0:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80058b4:	e9c1 2300 	strd	r2, r3, [r1]
        *Sy *= 9.9792015476736E+291;
 80058b8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80058bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80058c0:	f04f 0200 	mov.w	r2, #0
 80058c4:	4b48      	ldr	r3, [pc, #288]	; (80059e8 <UKFCorrectorAdditive_getPredict+0x714>)
 80058c6:	f7fa fe89 	bl	80005dc <__aeabi_dmul>
 80058ca:	4602      	mov	r2, r0
 80058cc:	460b      	mov	r3, r1
 80058ce:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 80058d2:	e9c1 2300 	strd	r2, r3, [r1]
      } while ((fabs(tempY) < 1.0020841800044864E-292) && (knt < 20));
 80058d6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80058da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058de:	603a      	str	r2, [r7, #0]
 80058e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80058e4:	607b      	str	r3, [r7, #4]
 80058e6:	f04f 0200 	mov.w	r2, #0
 80058ea:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 80058ee:	e9d7 0100 	ldrd	r0, r1, [r7]
 80058f2:	f7fb f8e5 	bl	8000ac0 <__aeabi_dcmplt>
 80058f6:	4603      	mov	r3, r0
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d003      	beq.n	8005904 <UKFCorrectorAdditive_getPredict+0x630>
 80058fc:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005900:	2b13      	cmp	r3, #19
 8005902:	ddb6      	ble.n	8005872 <UKFCorrectorAdditive_getPredict+0x59e>
      tempY = rt_hypotd_snf(*Sy, xnrm2_Mnmxg9YT(1, Wmean, 2));
 8005904:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8005908:	ed93 8b00 	vldr	d8, [r3]
 800590c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005910:	2202      	movs	r2, #2
 8005912:	4619      	mov	r1, r3
 8005914:	2001      	movs	r0, #1
 8005916:	f009 fe39 	bl	800f58c <xnrm2_Mnmxg9YT>
 800591a:	eeb0 7a40 	vmov.f32	s14, s0
 800591e:	eef0 7a60 	vmov.f32	s15, s1
 8005922:	eeb0 1a47 	vmov.f32	s2, s14
 8005926:	eef0 1a67 	vmov.f32	s3, s15
 800592a:	eeb0 0a48 	vmov.f32	s0, s16
 800592e:	eef0 0a68 	vmov.f32	s1, s17
 8005932:	f007 faa1 	bl	800ce78 <rt_hypotd_snf>
 8005936:	eeb0 7a40 	vmov.f32	s14, s0
 800593a:	eef0 7a60 	vmov.f32	s15, s1
 800593e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005942:	ed83 7b00 	vstr	d7, [r3]
      if (*Sy >= 0.0) {
 8005946:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800594a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800594e:	f04f 0200 	mov.w	r2, #0
 8005952:	f04f 0300 	mov.w	r3, #0
 8005956:	f7fb f8c7 	bl	8000ae8 <__aeabi_dcmpge>
 800595a:	4603      	mov	r3, r0
 800595c:	2b00      	cmp	r3, #0
 800595e:	d00a      	beq.n	8005976 <UKFCorrectorAdditive_getPredict+0x6a2>
        tempY = -tempY;
 8005960:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005968:	4692      	mov	sl, r2
 800596a:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 800596e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005972:	e9c3 ab00 	strd	sl, fp, [r3]
      for (knt_0 = 0; knt_0 < knt; knt_0++) {
 8005976:	2300      	movs	r3, #0
 8005978:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 800597c:	e014      	b.n	80059a8 <UKFCorrectorAdditive_getPredict+0x6d4>
        tempY *= 1.0020841800044864E-292;
 800597e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005982:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005986:	f04f 0200 	mov.w	r2, #0
 800598a:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800598e:	f7fa fe25 	bl	80005dc <__aeabi_dmul>
 8005992:	4602      	mov	r2, r0
 8005994:	460b      	mov	r3, r1
 8005996:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800599a:	e9c1 2300 	strd	r2, r3, [r1]
      for (knt_0 = 0; knt_0 < knt; knt_0++) {
 800599e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80059a2:	3301      	adds	r3, #1
 80059a4:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 80059a8:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 80059ac:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80059b0:	429a      	cmp	r2, r3
 80059b2:	dbe4      	blt.n	800597e <UKFCorrectorAdditive_getPredict+0x6aa>
      *Sy = tempY;
 80059b4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80059b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059bc:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 80059c0:	e9c1 2300 	strd	r2, r3, [r1]
}
 80059c4:	e007      	b.n	80059d6 <UKFCorrectorAdditive_getPredict+0x702>
      *Sy = tempY;
 80059c6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80059ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ce:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 80059d2:	e9c1 2300 	strd	r2, r3, [r1]
}
 80059d6:	bf00      	nop
 80059d8:	f507 77ba 	add.w	r7, r7, #372	; 0x174
 80059dc:	46bd      	mov	sp, r7
 80059de:	ecbd 8b02 	vpop	{d8}
 80059e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059e6:	bf00      	nop
 80059e8:	7c900000 	.word	0x7c900000
 80059ec:	00000000 	.word	0x00000000

080059f0 <CSE_step>:

void CSE_step(void)
{
 80059f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80059f4:	f5ad 7d43 	sub.w	sp, sp, #780	; 0x30c
 80059f8:	af06      	add	r7, sp, #24
  int32_T iAcol_0;
  static const real_T Wmean[2] = { 1.0, -0.1666668333335 };

  static const real_T Wcov[2] = { 0.999996999998, -0.1666668333335 };

  if (CSE_P.Enable1_Value) {
 80059fa:	4bb3      	ldr	r3, [pc, #716]	; (8005cc8 <CSE_step+0x2d8>)
 80059fc:	f893 32d2 	ldrb.w	r3, [r3, #722]	; 0x2d2
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	f001 803e 	beq.w	8006a82 <CSE_step+0x1092>
    boolean_T errorCondition;
    boolean_T guard1 = false;
 8005a06:	2300      	movs	r3, #0
 8005a08:	f887 32de 	strb.w	r3, [r7, #734]	; 0x2de
    CSE_M_x(CSE_DW.x, &s_0);
 8005a0c:	f107 0308 	add.w	r3, r7, #8
 8005a10:	4619      	mov	r1, r3
 8005a12:	48ae      	ldr	r0, [pc, #696]	; (8005ccc <CSE_step+0x2dc>)
 8005a14:	f7ff fc10 	bl	8005238 <CSE_M_x>
    UKFCorrectorAdditive_getPredict(CSE_P.R1_Value, CSE_DW.x, CSE_DW.P, 0.001,
 8005a18:	4bab      	ldr	r3, [pc, #684]	; (8005cc8 <CSE_step+0x2d8>)
 8005a1a:	ed93 7b84 	vldr	d7, [r3, #528]	; 0x210
 8005a1e:	f107 0110 	add.w	r1, r7, #16
 8005a22:	f107 0208 	add.w	r2, r7, #8
 8005a26:	463b      	mov	r3, r7
 8005a28:	9300      	str	r3, [sp, #0]
 8005a2a:	460b      	mov	r3, r1
 8005a2c:	ed9f 3ba0 	vldr	d3, [pc, #640]	; 8005cb0 <CSE_step+0x2c0>
 8005a30:	ed9f 2ba1 	vldr	d2, [pc, #644]	; 8005cb8 <CSE_step+0x2c8>
 8005a34:	ed9f 1ba2 	vldr	d1, [pc, #648]	; 8005cc0 <CSE_step+0x2d0>
 8005a38:	49a5      	ldr	r1, [pc, #660]	; (8005cd0 <CSE_step+0x2e0>)
 8005a3a:	48a4      	ldr	r0, [pc, #656]	; (8005ccc <CSE_step+0x2dc>)
 8005a3c:	eeb0 0a47 	vmov.f32	s0, s14
 8005a40:	eef0 0a67 	vmov.f32	s1, s15
 8005a44:	f7ff fc46 	bl	80052d4 <UKFCorrectorAdditive_getPredict>
      2.0, 0.0, &s_0, tempY, &temp);
    s_0 = CSE_U.y - s_0;
 8005a48:	4ba2      	ldr	r3, [pc, #648]	; (8005cd4 <CSE_step+0x2e4>)
 8005a4a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8005a4e:	f107 0308 	add.w	r3, r7, #8
 8005a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a56:	f7fa fc09 	bl	800026c <__aeabi_dsub>
 8005a5a:	4602      	mov	r2, r0
 8005a5c:	460b      	mov	r3, r1
 8005a5e:	f107 0108 	add.w	r1, r7, #8
 8005a62:	e9c1 2300 	strd	r2, r3, [r1]
    iAcol_0 = 0;
 8005a66:	2300      	movs	r3, #0
 8005a68:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
    for (iAcol = 0; iAcol < 3; iAcol++) {
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8005a72:	e04a      	b.n	8005b0a <CSE_step+0x11a>
      R[iAcol_0] = CSE_DW.P[iAcol];
 8005a74:	4a96      	ldr	r2, [pc, #600]	; (8005cd0 <CSE_step+0x2e0>)
 8005a76:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005a7a:	00db      	lsls	r3, r3, #3
 8005a7c:	4413      	add	r3, r2
 8005a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a82:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8005a86:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8005a8a:	00c9      	lsls	r1, r1, #3
 8005a8c:	4401      	add	r1, r0
 8005a8e:	e9c1 2300 	strd	r2, r3, [r1]
      R[iAcol_0 + 1] = CSE_DW.P[iAcol + 3];
 8005a92:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005a96:	3303      	adds	r3, #3
 8005a98:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8005a9c:	1c51      	adds	r1, r2, #1
 8005a9e:	4a8c      	ldr	r2, [pc, #560]	; (8005cd0 <CSE_step+0x2e0>)
 8005aa0:	00db      	lsls	r3, r3, #3
 8005aa2:	4413      	add	r3, r2
 8005aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aa8:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8005aac:	00c9      	lsls	r1, r1, #3
 8005aae:	4401      	add	r1, r0
 8005ab0:	e9c1 2300 	strd	r2, r3, [r1]
      R[iAcol_0 + 2] = CSE_DW.P[iAcol + 6];
 8005ab4:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005ab8:	3306      	adds	r3, #6
 8005aba:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8005abe:	1c91      	adds	r1, r2, #2
 8005ac0:	4a83      	ldr	r2, [pc, #524]	; (8005cd0 <CSE_step+0x2e0>)
 8005ac2:	00db      	lsls	r3, r3, #3
 8005ac4:	4413      	add	r3, r2
 8005ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aca:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8005ace:	00c9      	lsls	r1, r1, #3
 8005ad0:	4401      	add	r1, r0
 8005ad2:	e9c1 2300 	strd	r2, r3, [r1]
      C[iAcol] = tempY[iAcol];
 8005ad6:	f107 0210 	add.w	r2, r7, #16
 8005ada:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005ade:	00db      	lsls	r3, r3, #3
 8005ae0:	4413      	add	r3, r2
 8005ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ae6:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8005aea:	f8d7 12e4 	ldr.w	r1, [r7, #740]	; 0x2e4
 8005aee:	00c9      	lsls	r1, r1, #3
 8005af0:	4401      	add	r1, r0
 8005af2:	e9c1 2300 	strd	r2, r3, [r1]
      iAcol_0 += 3;
 8005af6:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005afa:	3303      	adds	r3, #3
 8005afc:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
    for (iAcol = 0; iAcol < 3; iAcol++) {
 8005b00:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005b04:	3301      	adds	r3, #1
 8005b06:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8005b0a:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005b0e:	2b02      	cmp	r3, #2
 8005b10:	ddb0      	ble.n	8005a74 <CSE_step+0x84>
    }

    trisolve_BC1XmAGq(temp, C);
 8005b12:	463b      	mov	r3, r7
 8005b14:	ed93 7b00 	vldr	d7, [r3]
 8005b18:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	eeb0 0a47 	vmov.f32	s0, s14
 8005b22:	eef0 0a67 	vmov.f32	s1, s15
 8005b26:	f009 f8cb 	bl	800ecc0 <trisolve_BC1XmAGq>
    K[0] = C[0];
 8005b2a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b32:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8005b36:	e9c1 2300 	strd	r2, r3, [r1]
    K[1] = C[1];
 8005b3a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005b3e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8005b42:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8005b46:	e9c1 2302 	strd	r2, r3, [r1, #8]
    K[2] = C[2];
 8005b4a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005b4e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8005b52:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8005b56:	e9c1 2304 	strd	r2, r3, [r1, #16]
    trisolve_BC1XmAGq(temp, K);
 8005b5a:	463b      	mov	r3, r7
 8005b5c:	ed93 7b00 	vldr	d7, [r3]
 8005b60:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005b64:	4618      	mov	r0, r3
 8005b66:	eeb0 0a47 	vmov.f32	s0, s14
 8005b6a:	eef0 0a67 	vmov.f32	s1, s15
 8005b6e:	f009 f8a7 	bl	800ecc0 <trisolve_BC1XmAGq>
    tempY[0] = K[0] * temp;
 8005b72:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005b76:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005b7a:	463b      	mov	r3, r7
 8005b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b80:	f7fa fd2c 	bl	80005dc <__aeabi_dmul>
 8005b84:	4602      	mov	r2, r0
 8005b86:	460b      	mov	r3, r1
 8005b88:	f107 0110 	add.w	r1, r7, #16
 8005b8c:	e9c1 2300 	strd	r2, r3, [r1]
    for (iAcol = 0; iAcol < 2; iAcol++) {
 8005b90:	2300      	movs	r3, #0
 8005b92:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8005b96:	e011      	b.n	8005bbc <CSE_step+0x1cc>
      R[iAcol + 1] = 0.0;
 8005b98:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005b9c:	3301      	adds	r3, #1
 8005b9e:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8005ba2:	00db      	lsls	r3, r3, #3
 8005ba4:	18d1      	adds	r1, r2, r3
 8005ba6:	f04f 0200 	mov.w	r2, #0
 8005baa:	f04f 0300 	mov.w	r3, #0
 8005bae:	e9c1 2300 	strd	r2, r3, [r1]
    for (iAcol = 0; iAcol < 2; iAcol++) {
 8005bb2:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005bb6:	3301      	adds	r3, #1
 8005bb8:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8005bbc:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	dde9      	ble.n	8005b98 <CSE_step+0x1a8>
    }

    tempY[1] = K[1] * temp;
 8005bc4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005bc8:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8005bcc:	463b      	mov	r3, r7
 8005bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bd2:	f7fa fd03 	bl	80005dc <__aeabi_dmul>
 8005bd6:	4602      	mov	r2, r0
 8005bd8:	460b      	mov	r3, r1
 8005bda:	f107 0110 	add.w	r1, r7, #16
 8005bde:	e9c1 2302 	strd	r2, r3, [r1, #8]
    R[5] = 0.0;
 8005be2:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 8005be6:	f04f 0200 	mov.w	r2, #0
 8005bea:	f04f 0300 	mov.w	r3, #0
 8005bee:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    tempY[2] = K[2] * temp;
 8005bf2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005bf6:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8005bfa:	463b      	mov	r3, r7
 8005bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c00:	f7fa fcec 	bl	80005dc <__aeabi_dmul>
 8005c04:	4602      	mov	r2, r0
 8005c06:	460b      	mov	r3, r1
 8005c08:	f107 0110 	add.w	r1, r7, #16
 8005c0c:	e9c1 2304 	strd	r2, r3, [r1, #16]
    errorCondition = (R[0] == 0.0);
 8005c10:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005c14:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005c18:	2301      	movs	r3, #1
 8005c1a:	461e      	mov	r6, r3
 8005c1c:	f04f 0200 	mov.w	r2, #0
 8005c20:	f04f 0300 	mov.w	r3, #0
 8005c24:	f7fa ff42 	bl	8000aac <__aeabi_dcmpeq>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d101      	bne.n	8005c32 <CSE_step+0x242>
 8005c2e:	2300      	movs	r3, #0
 8005c30:	461e      	mov	r6, r3
 8005c32:	b2f3      	uxtb	r3, r6
 8005c34:	f887 32df 	strb.w	r3, [r7, #735]	; 0x2df
    if (!errorCondition) {
 8005c38:	f897 32df 	ldrb.w	r3, [r7, #735]	; 0x2df
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d113      	bne.n	8005c68 <CSE_step+0x278>
      errorCondition = (R[4] == 0.0);
 8005c40:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005c44:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8005c48:	2301      	movs	r3, #1
 8005c4a:	461e      	mov	r6, r3
 8005c4c:	f04f 0200 	mov.w	r2, #0
 8005c50:	f04f 0300 	mov.w	r3, #0
 8005c54:	f7fa ff2a 	bl	8000aac <__aeabi_dcmpeq>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d101      	bne.n	8005c62 <CSE_step+0x272>
 8005c5e:	2300      	movs	r3, #0
 8005c60:	461e      	mov	r6, r3
 8005c62:	b2f3      	uxtb	r3, r6
 8005c64:	f887 32df 	strb.w	r3, [r7, #735]	; 0x2df
    }

    if (!errorCondition) {
 8005c68:	f897 32df 	ldrb.w	r3, [r7, #735]	; 0x2df
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d113      	bne.n	8005c98 <CSE_step+0x2a8>
      errorCondition = (R[8] == 0.0);
 8005c70:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005c74:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8005c78:	2301      	movs	r3, #1
 8005c7a:	461e      	mov	r6, r3
 8005c7c:	f04f 0200 	mov.w	r2, #0
 8005c80:	f04f 0300 	mov.w	r3, #0
 8005c84:	f7fa ff12 	bl	8000aac <__aeabi_dcmpeq>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d101      	bne.n	8005c92 <CSE_step+0x2a2>
 8005c8e:	2300      	movs	r3, #0
 8005c90:	461e      	mov	r6, r3
 8005c92:	b2f3      	uxtb	r3, r6
 8005c94:	f887 32df 	strb.w	r3, [r7, #735]	; 0x2df
    }

    guard1 = false;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	f887 32de 	strb.w	r3, [r7, #734]	; 0x2de
    if (errorCondition) {
 8005c9e:	f897 32df 	ldrb.w	r3, [r7, #735]	; 0x2df
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d018      	beq.n	8005cd8 <CSE_step+0x2e8>
      guard1 = true;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	f887 32de 	strb.w	r3, [r7, #734]	; 0x2de
 8005cac:	e395      	b.n	80063da <CSE_step+0x9ea>
 8005cae:	bf00      	nop
	...
 8005cbc:	40000000 	.word	0x40000000
 8005cc0:	d2f1a9fc 	.word	0xd2f1a9fc
 8005cc4:	3f50624d 	.word	0x3f50624d
 8005cc8:	20000088 	.word	0x20000088
 8005ccc:	2001c130 	.word	0x2001c130
 8005cd0:	2001c0e8 	.word	0x2001c0e8
 8005cd4:	2001c0d8 	.word	0x2001c0d8
    } else {
      real_T absxk;
      real_T scale;
      real_T t;
      C[2] = tempY[2];
 8005cd8:	f107 0310 	add.w	r3, r7, #16
 8005cdc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8005ce0:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8005ce4:	e9c1 2304 	strd	r2, r3, [r1, #16]
      C[0] = tempY[0] / R[0];
 8005ce8:	f107 0310 	add.w	r3, r7, #16
 8005cec:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005cf0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cf8:	f7fa fd9a 	bl	8000830 <__aeabi_ddiv>
 8005cfc:	4602      	mov	r2, r0
 8005cfe:	460b      	mov	r3, r1
 8005d00:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8005d04:	e9c1 2300 	strd	r2, r3, [r1]
      C[1] = (tempY[1] - C[0] * R[3]) / R[4];
 8005d08:	f107 0310 	add.w	r3, r7, #16
 8005d0c:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 8005d10:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005d14:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005d18:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005d1c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8005d20:	f7fa fc5c 	bl	80005dc <__aeabi_dmul>
 8005d24:	4602      	mov	r2, r0
 8005d26:	460b      	mov	r3, r1
 8005d28:	4640      	mov	r0, r8
 8005d2a:	4649      	mov	r1, r9
 8005d2c:	f7fa fa9e 	bl	800026c <__aeabi_dsub>
 8005d30:	4602      	mov	r2, r0
 8005d32:	460b      	mov	r3, r1
 8005d34:	4610      	mov	r0, r2
 8005d36:	4619      	mov	r1, r3
 8005d38:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005d3c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005d40:	f7fa fd76 	bl	8000830 <__aeabi_ddiv>
 8005d44:	4602      	mov	r2, r0
 8005d46:	460b      	mov	r3, r1
 8005d48:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8005d4c:	e9c1 2302 	strd	r2, r3, [r1, #8]
      temp = tempY[2];
 8005d50:	f107 0310 	add.w	r3, r7, #16
 8005d54:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8005d58:	4639      	mov	r1, r7
 8005d5a:	e9c1 2300 	strd	r2, r3, [r1]
      for (iAcol_0 = 0; iAcol_0 < 2; iAcol_0++) {
 8005d5e:	2300      	movs	r3, #0
 8005d60:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8005d64:	e025      	b.n	8005db2 <CSE_step+0x3c2>
        temp -= R[iAcol_0 + 6] * C[iAcol_0];
 8005d66:	463b      	mov	r3, r7
 8005d68:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005d6c:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005d70:	3306      	adds	r3, #6
 8005d72:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8005d76:	00db      	lsls	r3, r3, #3
 8005d78:	4413      	add	r3, r2
 8005d7a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005d7e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8005d82:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005d86:	00db      	lsls	r3, r3, #3
 8005d88:	4413      	add	r3, r2
 8005d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d8e:	f7fa fc25 	bl	80005dc <__aeabi_dmul>
 8005d92:	4602      	mov	r2, r0
 8005d94:	460b      	mov	r3, r1
 8005d96:	4640      	mov	r0, r8
 8005d98:	4649      	mov	r1, r9
 8005d9a:	f7fa fa67 	bl	800026c <__aeabi_dsub>
 8005d9e:	4602      	mov	r2, r0
 8005da0:	460b      	mov	r3, r1
 8005da2:	4639      	mov	r1, r7
 8005da4:	e9c1 2300 	strd	r2, r3, [r1]
      for (iAcol_0 = 0; iAcol_0 < 2; iAcol_0++) {
 8005da8:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005dac:	3301      	adds	r3, #1
 8005dae:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8005db2:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005db6:	2b01      	cmp	r3, #1
 8005db8:	ddd5      	ble.n	8005d66 <CSE_step+0x376>
      }

      C[2] = temp / R[8];
 8005dba:	463b      	mov	r3, r7
 8005dbc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005dc0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005dc4:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8005dc8:	f7fa fd32 	bl	8000830 <__aeabi_ddiv>
 8005dcc:	4602      	mov	r2, r0
 8005dce:	460b      	mov	r3, r1
 8005dd0:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8005dd4:	e9c1 2304 	strd	r2, r3, [r1, #16]
      scale = 3.3121686421112381E-170;
 8005dd8:	f04f 0200 	mov.w	r2, #0
 8005ddc:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 8005de0:	e9c7 23b4 	strd	r2, r3, [r7, #720]	; 0x2d0
      absxk = fabs(C[0]);
 8005de4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dec:	4611      	mov	r1, r2
 8005dee:	f8c7 12c0 	str.w	r1, [r7, #704]	; 0x2c0
 8005df2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005df6:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
      if (absxk > 3.3121686421112381E-170) {
 8005dfa:	f04f 0200 	mov.w	r2, #0
 8005dfe:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 8005e02:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	; 0x2c0
 8005e06:	f7fa fe79 	bl	8000afc <__aeabi_dcmpgt>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d00a      	beq.n	8005e26 <CSE_step+0x436>
        temp = 1.0;
 8005e10:	4639      	mov	r1, r7
 8005e12:	f04f 0200 	mov.w	r2, #0
 8005e16:	4bbf      	ldr	r3, [pc, #764]	; (8006114 <CSE_step+0x724>)
 8005e18:	e9c1 2300 	strd	r2, r3, [r1]
        scale = absxk;
 8005e1c:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	; 0x2c0
 8005e20:	e9c7 23b4 	strd	r2, r3, [r7, #720]	; 0x2d0
 8005e24:	e016      	b.n	8005e54 <CSE_step+0x464>
      } else {
        t = absxk / 3.3121686421112381E-170;
 8005e26:	f04f 0200 	mov.w	r2, #0
 8005e2a:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 8005e2e:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	; 0x2c0
 8005e32:	f7fa fcfd 	bl	8000830 <__aeabi_ddiv>
 8005e36:	4602      	mov	r2, r0
 8005e38:	460b      	mov	r3, r1
 8005e3a:	e9c7 23ae 	strd	r2, r3, [r7, #696]	; 0x2b8
        temp = t * t;
 8005e3e:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 8005e42:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	; 0x2b8
 8005e46:	f7fa fbc9 	bl	80005dc <__aeabi_dmul>
 8005e4a:	4602      	mov	r2, r0
 8005e4c:	460b      	mov	r3, r1
 8005e4e:	4639      	mov	r1, r7
 8005e50:	e9c1 2300 	strd	r2, r3, [r1]
      }

      absxk = fabs(C[1]);
 8005e54:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005e58:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8005e5c:	4611      	mov	r1, r2
 8005e5e:	f8c7 12c0 	str.w	r1, [r7, #704]	; 0x2c0
 8005e62:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005e66:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
      if (absxk > scale) {
 8005e6a:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	; 0x2d0
 8005e6e:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	; 0x2c0
 8005e72:	f7fa fe43 	bl	8000afc <__aeabi_dcmpgt>
 8005e76:	4603      	mov	r3, r0
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d02b      	beq.n	8005ed4 <CSE_step+0x4e4>
        t = scale / absxk;
 8005e7c:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	; 0x2c0
 8005e80:	e9d7 01b4 	ldrd	r0, r1, [r7, #720]	; 0x2d0
 8005e84:	f7fa fcd4 	bl	8000830 <__aeabi_ddiv>
 8005e88:	4602      	mov	r2, r0
 8005e8a:	460b      	mov	r3, r1
 8005e8c:	e9c7 23ae 	strd	r2, r3, [r7, #696]	; 0x2b8
        temp = temp * t * t + 1.0;
 8005e90:	463b      	mov	r3, r7
 8005e92:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005e96:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 8005e9a:	f7fa fb9f 	bl	80005dc <__aeabi_dmul>
 8005e9e:	4602      	mov	r2, r0
 8005ea0:	460b      	mov	r3, r1
 8005ea2:	4610      	mov	r0, r2
 8005ea4:	4619      	mov	r1, r3
 8005ea6:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 8005eaa:	f7fa fb97 	bl	80005dc <__aeabi_dmul>
 8005eae:	4602      	mov	r2, r0
 8005eb0:	460b      	mov	r3, r1
 8005eb2:	4610      	mov	r0, r2
 8005eb4:	4619      	mov	r1, r3
 8005eb6:	f04f 0200 	mov.w	r2, #0
 8005eba:	4b96      	ldr	r3, [pc, #600]	; (8006114 <CSE_step+0x724>)
 8005ebc:	f7fa f9d8 	bl	8000270 <__adddf3>
 8005ec0:	4602      	mov	r2, r0
 8005ec2:	460b      	mov	r3, r1
 8005ec4:	4639      	mov	r1, r7
 8005ec6:	e9c1 2300 	strd	r2, r3, [r1]
        scale = absxk;
 8005eca:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	; 0x2c0
 8005ece:	e9c7 23b4 	strd	r2, r3, [r7, #720]	; 0x2d0
 8005ed2:	e01d      	b.n	8005f10 <CSE_step+0x520>
      } else {
        t = absxk / scale;
 8005ed4:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	; 0x2d0
 8005ed8:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	; 0x2c0
 8005edc:	f7fa fca8 	bl	8000830 <__aeabi_ddiv>
 8005ee0:	4602      	mov	r2, r0
 8005ee2:	460b      	mov	r3, r1
 8005ee4:	e9c7 23ae 	strd	r2, r3, [r7, #696]	; 0x2b8
        temp += t * t;
 8005ee8:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 8005eec:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	; 0x2b8
 8005ef0:	f7fa fb74 	bl	80005dc <__aeabi_dmul>
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	460b      	mov	r3, r1
 8005ef8:	4610      	mov	r0, r2
 8005efa:	4619      	mov	r1, r3
 8005efc:	463b      	mov	r3, r7
 8005efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f02:	f7fa f9b5 	bl	8000270 <__adddf3>
 8005f06:	4602      	mov	r2, r0
 8005f08:	460b      	mov	r3, r1
 8005f0a:	4639      	mov	r1, r7
 8005f0c:	e9c1 2300 	strd	r2, r3, [r1]
      }

      absxk = fabs(C[2]);
 8005f10:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005f14:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8005f18:	4611      	mov	r1, r2
 8005f1a:	f8c7 12c0 	str.w	r1, [r7, #704]	; 0x2c0
 8005f1e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005f22:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
      if (absxk > scale) {
 8005f26:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	; 0x2d0
 8005f2a:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	; 0x2c0
 8005f2e:	f7fa fde5 	bl	8000afc <__aeabi_dcmpgt>
 8005f32:	4603      	mov	r3, r0
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d02b      	beq.n	8005f90 <CSE_step+0x5a0>
        t = scale / absxk;
 8005f38:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	; 0x2c0
 8005f3c:	e9d7 01b4 	ldrd	r0, r1, [r7, #720]	; 0x2d0
 8005f40:	f7fa fc76 	bl	8000830 <__aeabi_ddiv>
 8005f44:	4602      	mov	r2, r0
 8005f46:	460b      	mov	r3, r1
 8005f48:	e9c7 23ae 	strd	r2, r3, [r7, #696]	; 0x2b8
        temp = temp * t * t + 1.0;
 8005f4c:	463b      	mov	r3, r7
 8005f4e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005f52:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 8005f56:	f7fa fb41 	bl	80005dc <__aeabi_dmul>
 8005f5a:	4602      	mov	r2, r0
 8005f5c:	460b      	mov	r3, r1
 8005f5e:	4610      	mov	r0, r2
 8005f60:	4619      	mov	r1, r3
 8005f62:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 8005f66:	f7fa fb39 	bl	80005dc <__aeabi_dmul>
 8005f6a:	4602      	mov	r2, r0
 8005f6c:	460b      	mov	r3, r1
 8005f6e:	4610      	mov	r0, r2
 8005f70:	4619      	mov	r1, r3
 8005f72:	f04f 0200 	mov.w	r2, #0
 8005f76:	4b67      	ldr	r3, [pc, #412]	; (8006114 <CSE_step+0x724>)
 8005f78:	f7fa f97a 	bl	8000270 <__adddf3>
 8005f7c:	4602      	mov	r2, r0
 8005f7e:	460b      	mov	r3, r1
 8005f80:	4639      	mov	r1, r7
 8005f82:	e9c1 2300 	strd	r2, r3, [r1]
        scale = absxk;
 8005f86:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	; 0x2c0
 8005f8a:	e9c7 23b4 	strd	r2, r3, [r7, #720]	; 0x2d0
 8005f8e:	e01d      	b.n	8005fcc <CSE_step+0x5dc>
      } else {
        t = absxk / scale;
 8005f90:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	; 0x2d0
 8005f94:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	; 0x2c0
 8005f98:	f7fa fc4a 	bl	8000830 <__aeabi_ddiv>
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	460b      	mov	r3, r1
 8005fa0:	e9c7 23ae 	strd	r2, r3, [r7, #696]	; 0x2b8
        temp += t * t;
 8005fa4:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 8005fa8:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	; 0x2b8
 8005fac:	f7fa fb16 	bl	80005dc <__aeabi_dmul>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	460b      	mov	r3, r1
 8005fb4:	4610      	mov	r0, r2
 8005fb6:	4619      	mov	r1, r3
 8005fb8:	463b      	mov	r3, r7
 8005fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fbe:	f7fa f957 	bl	8000270 <__adddf3>
 8005fc2:	4602      	mov	r2, r0
 8005fc4:	460b      	mov	r3, r1
 8005fc6:	4639      	mov	r1, r7
 8005fc8:	e9c1 2300 	strd	r2, r3, [r1]
      }

      temp = scale * sqrt(temp);
 8005fcc:	463b      	mov	r3, r7
 8005fce:	ed93 7b00 	vldr	d7, [r3]
 8005fd2:	eeb0 0a47 	vmov.f32	s0, s14
 8005fd6:	eef0 0a67 	vmov.f32	s1, s15
 8005fda:	f015 fa05 	bl	801b3e8 <sqrt>
 8005fde:	ec51 0b10 	vmov	r0, r1, d0
 8005fe2:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	; 0x2d0
 8005fe6:	f7fa faf9 	bl	80005dc <__aeabi_dmul>
 8005fea:	4602      	mov	r2, r0
 8005fec:	460b      	mov	r3, r1
 8005fee:	4639      	mov	r1, r7
 8005ff0:	e9c1 2300 	strd	r2, r3, [r1]
      if (temp >= 1.0) {
 8005ff4:	463b      	mov	r3, r7
 8005ff6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005ffa:	f04f 0200 	mov.w	r2, #0
 8005ffe:	4b45      	ldr	r3, [pc, #276]	; (8006114 <CSE_step+0x724>)
 8006000:	f7fa fd72 	bl	8000ae8 <__aeabi_dcmpge>
 8006004:	4603      	mov	r3, r0
 8006006:	2b00      	cmp	r3, #0
 8006008:	d003      	beq.n	8006012 <CSE_step+0x622>
        guard1 = true;
 800600a:	2301      	movs	r3, #1
 800600c:	f887 32de 	strb.w	r3, [r7, #734]	; 0x2de
 8006010:	e1e3      	b.n	80063da <CSE_step+0x9ea>
      } else {
        rotate_LZ7ctbe0(sqrt(1.0 - temp * temp), C[2], &tempY[2], &s[2], &temp);
 8006012:	463b      	mov	r3, r7
 8006014:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006018:	463b      	mov	r3, r7
 800601a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800601e:	f7fa fadd 	bl	80005dc <__aeabi_dmul>
 8006022:	4602      	mov	r2, r0
 8006024:	460b      	mov	r3, r1
 8006026:	f04f 0000 	mov.w	r0, #0
 800602a:	493a      	ldr	r1, [pc, #232]	; (8006114 <CSE_step+0x724>)
 800602c:	f7fa f91e 	bl	800026c <__aeabi_dsub>
 8006030:	4602      	mov	r2, r0
 8006032:	460b      	mov	r3, r1
 8006034:	ec43 2b17 	vmov	d7, r2, r3
 8006038:	eeb0 0a47 	vmov.f32	s0, s14
 800603c:	eef0 0a67 	vmov.f32	s1, s15
 8006040:	f015 f9d2 	bl	801b3e8 <sqrt>
 8006044:	eeb0 6a40 	vmov.f32	s12, s0
 8006048:	eef0 6a60 	vmov.f32	s13, s1
 800604c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006050:	ed93 7b04 	vldr	d7, [r3, #16]
 8006054:	463a      	mov	r2, r7
 8006056:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800605a:	f103 0110 	add.w	r1, r3, #16
 800605e:	f107 0310 	add.w	r3, r7, #16
 8006062:	3310      	adds	r3, #16
 8006064:	4618      	mov	r0, r3
 8006066:	eeb0 1a47 	vmov.f32	s2, s14
 800606a:	eef0 1a67 	vmov.f32	s3, s15
 800606e:	eeb0 0a46 	vmov.f32	s0, s12
 8006072:	eef0 0a66 	vmov.f32	s1, s13
 8006076:	f006 fd75 	bl	800cb64 <rotate_LZ7ctbe0>
        C[2] = 0.0;
 800607a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800607e:	f04f 0200 	mov.w	r2, #0
 8006082:	f04f 0300 	mov.w	r3, #0
 8006086:	e9c1 2304 	strd	r2, r3, [r1, #16]
        rotate_LZ7ctbe0(temp, C[1], &tempY[1], &s[1], &temp);
 800608a:	463b      	mov	r3, r7
 800608c:	ed93 7b00 	vldr	d7, [r3]
 8006090:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006094:	ed93 6b02 	vldr	d6, [r3, #8]
 8006098:	463a      	mov	r2, r7
 800609a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800609e:	f103 0108 	add.w	r1, r3, #8
 80060a2:	f107 0310 	add.w	r3, r7, #16
 80060a6:	3308      	adds	r3, #8
 80060a8:	4618      	mov	r0, r3
 80060aa:	eeb0 1a46 	vmov.f32	s2, s12
 80060ae:	eef0 1a66 	vmov.f32	s3, s13
 80060b2:	eeb0 0a47 	vmov.f32	s0, s14
 80060b6:	eef0 0a67 	vmov.f32	s1, s15
 80060ba:	f006 fd53 	bl	800cb64 <rotate_LZ7ctbe0>
        C[1] = 0.0;
 80060be:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80060c2:	f04f 0200 	mov.w	r2, #0
 80060c6:	f04f 0300 	mov.w	r3, #0
 80060ca:	e9c1 2302 	strd	r2, r3, [r1, #8]
        rotate_LZ7ctbe0(temp, C[0], &tempY[0], &s[0], &temp);
 80060ce:	463b      	mov	r3, r7
 80060d0:	ed93 7b00 	vldr	d7, [r3]
 80060d4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80060d8:	ed93 6b00 	vldr	d6, [r3]
 80060dc:	463a      	mov	r2, r7
 80060de:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80060e2:	f107 0310 	add.w	r3, r7, #16
 80060e6:	4618      	mov	r0, r3
 80060e8:	eeb0 1a46 	vmov.f32	s2, s12
 80060ec:	eef0 1a66 	vmov.f32	s3, s13
 80060f0:	eeb0 0a47 	vmov.f32	s0, s14
 80060f4:	eef0 0a67 	vmov.f32	s1, s15
 80060f8:	f006 fd34 	bl	800cb64 <rotate_LZ7ctbe0>
        C[0] = 0.0;
 80060fc:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8006100:	f04f 0200 	mov.w	r2, #0
 8006104:	f04f 0300 	mov.w	r3, #0
 8006108:	e9c1 2300 	strd	r2, r3, [r1]
        for (iAcol_0 = 0; iAcol_0 + 1 > 0; iAcol_0--) {
 800610c:	2300      	movs	r3, #0
 800610e:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8006112:	e06e      	b.n	80061f2 <CSE_step+0x802>
 8006114:	3ff00000 	.word	0x3ff00000
          temp = s[iAcol_0] * R[iAcol_0];
 8006118:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800611c:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006120:	00db      	lsls	r3, r3, #3
 8006122:	4413      	add	r3, r2
 8006124:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006128:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800612c:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006130:	00db      	lsls	r3, r3, #3
 8006132:	4413      	add	r3, r2
 8006134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006138:	f7fa fa50 	bl	80005dc <__aeabi_dmul>
 800613c:	4602      	mov	r2, r0
 800613e:	460b      	mov	r3, r1
 8006140:	4639      	mov	r1, r7
 8006142:	e9c1 2300 	strd	r2, r3, [r1]
          R[iAcol_0] = tempY[iAcol_0] * R[iAcol_0] - s[iAcol_0] * C[0];
 8006146:	f107 0210 	add.w	r2, r7, #16
 800614a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800614e:	00db      	lsls	r3, r3, #3
 8006150:	4413      	add	r3, r2
 8006152:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006156:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800615a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800615e:	00db      	lsls	r3, r3, #3
 8006160:	4413      	add	r3, r2
 8006162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006166:	f7fa fa39 	bl	80005dc <__aeabi_dmul>
 800616a:	4602      	mov	r2, r0
 800616c:	460b      	mov	r3, r1
 800616e:	4690      	mov	r8, r2
 8006170:	4699      	mov	r9, r3
 8006172:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006176:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800617a:	00db      	lsls	r3, r3, #3
 800617c:	4413      	add	r3, r2
 800617e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006182:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800618a:	f7fa fa27 	bl	80005dc <__aeabi_dmul>
 800618e:	4602      	mov	r2, r0
 8006190:	460b      	mov	r3, r1
 8006192:	4640      	mov	r0, r8
 8006194:	4649      	mov	r1, r9
 8006196:	f7fa f869 	bl	800026c <__aeabi_dsub>
 800619a:	4602      	mov	r2, r0
 800619c:	460b      	mov	r3, r1
 800619e:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 80061a2:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 80061a6:	00c9      	lsls	r1, r1, #3
 80061a8:	4401      	add	r1, r0
 80061aa:	e9c1 2300 	strd	r2, r3, [r1]
          C[0] = tempY[iAcol_0] * C[0] + temp;
 80061ae:	f107 0210 	add.w	r2, r7, #16
 80061b2:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80061b6:	00db      	lsls	r3, r3, #3
 80061b8:	4413      	add	r3, r2
 80061ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 80061be:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80061c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061c6:	f7fa fa09 	bl	80005dc <__aeabi_dmul>
 80061ca:	4602      	mov	r2, r0
 80061cc:	460b      	mov	r3, r1
 80061ce:	4610      	mov	r0, r2
 80061d0:	4619      	mov	r1, r3
 80061d2:	463b      	mov	r3, r7
 80061d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061d8:	f7fa f84a 	bl	8000270 <__adddf3>
 80061dc:	4602      	mov	r2, r0
 80061de:	460b      	mov	r3, r1
 80061e0:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80061e4:	e9c1 2300 	strd	r2, r3, [r1]
        for (iAcol_0 = 0; iAcol_0 + 1 > 0; iAcol_0--) {
 80061e8:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80061ec:	3b01      	subs	r3, #1
 80061ee:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 80061f2:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	da8e      	bge.n	8006118 <CSE_step+0x728>
        }

        for (iAcol_0 = 1; iAcol_0 + 1 > 0; iAcol_0--) {
 80061fa:	2301      	movs	r3, #1
 80061fc:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8006200:	e06f      	b.n	80062e2 <CSE_step+0x8f2>
          temp = R[iAcol_0 + 3];
 8006202:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006206:	3303      	adds	r3, #3
 8006208:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800620c:	00db      	lsls	r3, r3, #3
 800620e:	4413      	add	r3, r2
 8006210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006214:	4639      	mov	r1, r7
 8006216:	e9c1 2300 	strd	r2, r3, [r1]
          R[iAcol_0 + 3] = temp * tempY[iAcol_0] - s[iAcol_0] * C[1];
 800621a:	f107 0210 	add.w	r2, r7, #16
 800621e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006222:	00db      	lsls	r3, r3, #3
 8006224:	4413      	add	r3, r2
 8006226:	e9d3 0100 	ldrd	r0, r1, [r3]
 800622a:	463b      	mov	r3, r7
 800622c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006230:	f7fa f9d4 	bl	80005dc <__aeabi_dmul>
 8006234:	4602      	mov	r2, r0
 8006236:	460b      	mov	r3, r1
 8006238:	4690      	mov	r8, r2
 800623a:	4699      	mov	r9, r3
 800623c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006240:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006244:	00db      	lsls	r3, r3, #3
 8006246:	4413      	add	r3, r2
 8006248:	e9d3 0100 	ldrd	r0, r1, [r3]
 800624c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006250:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8006254:	f7fa f9c2 	bl	80005dc <__aeabi_dmul>
 8006258:	4602      	mov	r2, r0
 800625a:	460b      	mov	r3, r1
 800625c:	4610      	mov	r0, r2
 800625e:	4619      	mov	r1, r3
 8006260:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006264:	1cde      	adds	r6, r3, #3
 8006266:	4602      	mov	r2, r0
 8006268:	460b      	mov	r3, r1
 800626a:	4640      	mov	r0, r8
 800626c:	4649      	mov	r1, r9
 800626e:	f7f9 fffd 	bl	800026c <__aeabi_dsub>
 8006272:	4602      	mov	r2, r0
 8006274:	460b      	mov	r3, r1
 8006276:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 800627a:	00f1      	lsls	r1, r6, #3
 800627c:	4401      	add	r1, r0
 800627e:	e9c1 2300 	strd	r2, r3, [r1]
          C[1] = tempY[iAcol_0] * C[1] + temp * s[iAcol_0];
 8006282:	f107 0210 	add.w	r2, r7, #16
 8006286:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800628a:	00db      	lsls	r3, r3, #3
 800628c:	4413      	add	r3, r2
 800628e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006292:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006296:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800629a:	f7fa f99f 	bl	80005dc <__aeabi_dmul>
 800629e:	4602      	mov	r2, r0
 80062a0:	460b      	mov	r3, r1
 80062a2:	4690      	mov	r8, r2
 80062a4:	4699      	mov	r9, r3
 80062a6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80062aa:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80062ae:	00db      	lsls	r3, r3, #3
 80062b0:	4413      	add	r3, r2
 80062b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80062b6:	463b      	mov	r3, r7
 80062b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062bc:	f7fa f98e 	bl	80005dc <__aeabi_dmul>
 80062c0:	4602      	mov	r2, r0
 80062c2:	460b      	mov	r3, r1
 80062c4:	4640      	mov	r0, r8
 80062c6:	4649      	mov	r1, r9
 80062c8:	f7f9 ffd2 	bl	8000270 <__adddf3>
 80062cc:	4602      	mov	r2, r0
 80062ce:	460b      	mov	r3, r1
 80062d0:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80062d4:	e9c1 2302 	strd	r2, r3, [r1, #8]
        for (iAcol_0 = 1; iAcol_0 + 1 > 0; iAcol_0--) {
 80062d8:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80062dc:	3b01      	subs	r3, #1
 80062de:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 80062e2:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	da8b      	bge.n	8006202 <CSE_step+0x812>
        }

        for (iAcol_0 = 2; iAcol_0 + 1 > 0; iAcol_0--) {
 80062ea:	2302      	movs	r3, #2
 80062ec:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 80062f0:	e06f      	b.n	80063d2 <CSE_step+0x9e2>
          temp = R[iAcol_0 + 6];
 80062f2:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80062f6:	3306      	adds	r3, #6
 80062f8:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80062fc:	00db      	lsls	r3, r3, #3
 80062fe:	4413      	add	r3, r2
 8006300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006304:	4639      	mov	r1, r7
 8006306:	e9c1 2300 	strd	r2, r3, [r1]
          R[iAcol_0 + 6] = temp * tempY[iAcol_0] - s[iAcol_0] * C[2];
 800630a:	f107 0210 	add.w	r2, r7, #16
 800630e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006312:	00db      	lsls	r3, r3, #3
 8006314:	4413      	add	r3, r2
 8006316:	e9d3 0100 	ldrd	r0, r1, [r3]
 800631a:	463b      	mov	r3, r7
 800631c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006320:	f7fa f95c 	bl	80005dc <__aeabi_dmul>
 8006324:	4602      	mov	r2, r0
 8006326:	460b      	mov	r3, r1
 8006328:	4690      	mov	r8, r2
 800632a:	4699      	mov	r9, r3
 800632c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006330:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006334:	00db      	lsls	r3, r3, #3
 8006336:	4413      	add	r3, r2
 8006338:	e9d3 0100 	ldrd	r0, r1, [r3]
 800633c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006340:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8006344:	f7fa f94a 	bl	80005dc <__aeabi_dmul>
 8006348:	4602      	mov	r2, r0
 800634a:	460b      	mov	r3, r1
 800634c:	4610      	mov	r0, r2
 800634e:	4619      	mov	r1, r3
 8006350:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006354:	1d9e      	adds	r6, r3, #6
 8006356:	4602      	mov	r2, r0
 8006358:	460b      	mov	r3, r1
 800635a:	4640      	mov	r0, r8
 800635c:	4649      	mov	r1, r9
 800635e:	f7f9 ff85 	bl	800026c <__aeabi_dsub>
 8006362:	4602      	mov	r2, r0
 8006364:	460b      	mov	r3, r1
 8006366:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 800636a:	00f1      	lsls	r1, r6, #3
 800636c:	4401      	add	r1, r0
 800636e:	e9c1 2300 	strd	r2, r3, [r1]
          C[2] = tempY[iAcol_0] * C[2] + temp * s[iAcol_0];
 8006372:	f107 0210 	add.w	r2, r7, #16
 8006376:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800637a:	00db      	lsls	r3, r3, #3
 800637c:	4413      	add	r3, r2
 800637e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006382:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006386:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800638a:	f7fa f927 	bl	80005dc <__aeabi_dmul>
 800638e:	4602      	mov	r2, r0
 8006390:	460b      	mov	r3, r1
 8006392:	4690      	mov	r8, r2
 8006394:	4699      	mov	r9, r3
 8006396:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800639a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800639e:	00db      	lsls	r3, r3, #3
 80063a0:	4413      	add	r3, r2
 80063a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80063a6:	463b      	mov	r3, r7
 80063a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ac:	f7fa f916 	bl	80005dc <__aeabi_dmul>
 80063b0:	4602      	mov	r2, r0
 80063b2:	460b      	mov	r3, r1
 80063b4:	4640      	mov	r0, r8
 80063b6:	4649      	mov	r1, r9
 80063b8:	f7f9 ff5a 	bl	8000270 <__adddf3>
 80063bc:	4602      	mov	r2, r0
 80063be:	460b      	mov	r3, r1
 80063c0:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80063c4:	e9c1 2304 	strd	r2, r3, [r1, #16]
        for (iAcol_0 = 2; iAcol_0 + 1 > 0; iAcol_0--) {
 80063c8:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80063cc:	3b01      	subs	r3, #1
 80063ce:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 80063d2:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	da8b      	bge.n	80062f2 <CSE_step+0x902>
        }
      }
    }

    if (guard1) {
 80063da:	f897 32de 	ldrb.w	r3, [r7, #734]	; 0x2de
 80063de:	2b00      	cmp	r3, #0
 80063e0:	f000 82e1 	beq.w	80069a6 <CSE_step+0xfb6>
      int32_T R_tmp;
      boolean_T exitg2;
      iAcol_0 = 0;
 80063e4:	2300      	movs	r3, #0
 80063e6:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
      for (iAcol = 0; iAcol < 3; iAcol++) {
 80063ea:	2300      	movs	r3, #0
 80063ec:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 80063f0:	e0d6      	b.n	80065a0 <CSE_step+0xbb0>
        coffset = 0;
 80063f2:	2300      	movs	r3, #0
 80063f4:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
        for (aoffset = 0; aoffset < 3; aoffset++) {
 80063f8:	2300      	movs	r3, #0
 80063fa:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 80063fe:	e0c0      	b.n	8006582 <CSE_step+0xb92>
          R_tmp = coffset + iAcol;
 8006400:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 8006404:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006408:	4413      	add	r3, r2
 800640a:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
          R_0[R_tmp] = 0.0;
 800640e:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8006412:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8006416:	00db      	lsls	r3, r3, #3
 8006418:	18d1      	adds	r1, r2, r3
 800641a:	f04f 0200 	mov.w	r2, #0
 800641e:	f04f 0300 	mov.w	r3, #0
 8006422:	e9c1 2300 	strd	r2, r3, [r1]
          R_0[R_tmp] += R[iAcol_0] * R[coffset];
 8006426:	f507 7280 	add.w	r2, r7, #256	; 0x100
 800642a:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 800642e:	00db      	lsls	r3, r3, #3
 8006430:	4413      	add	r3, r2
 8006432:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006436:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800643a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800643e:	00db      	lsls	r3, r3, #3
 8006440:	4413      	add	r3, r2
 8006442:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006446:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800644a:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 800644e:	00db      	lsls	r3, r3, #3
 8006450:	4413      	add	r3, r2
 8006452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006456:	f7fa f8c1 	bl	80005dc <__aeabi_dmul>
 800645a:	4602      	mov	r2, r0
 800645c:	460b      	mov	r3, r1
 800645e:	4640      	mov	r0, r8
 8006460:	4649      	mov	r1, r9
 8006462:	f7f9 ff05 	bl	8000270 <__adddf3>
 8006466:	4602      	mov	r2, r0
 8006468:	460b      	mov	r3, r1
 800646a:	f507 7080 	add.w	r0, r7, #256	; 0x100
 800646e:	f8d7 12b4 	ldr.w	r1, [r7, #692]	; 0x2b4
 8006472:	00c9      	lsls	r1, r1, #3
 8006474:	4401      	add	r1, r0
 8006476:	e9c1 2300 	strd	r2, r3, [r1]
          R_0[R_tmp] += R[iAcol_0 + 1] * R[coffset + 1];
 800647a:	f507 7280 	add.w	r2, r7, #256	; 0x100
 800647e:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8006482:	00db      	lsls	r3, r3, #3
 8006484:	4413      	add	r3, r2
 8006486:	e9d3 8900 	ldrd	r8, r9, [r3]
 800648a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800648e:	3301      	adds	r3, #1
 8006490:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8006494:	00db      	lsls	r3, r3, #3
 8006496:	4413      	add	r3, r2
 8006498:	e9d3 0100 	ldrd	r0, r1, [r3]
 800649c:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 80064a0:	3301      	adds	r3, #1
 80064a2:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80064a6:	00db      	lsls	r3, r3, #3
 80064a8:	4413      	add	r3, r2
 80064aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ae:	f7fa f895 	bl	80005dc <__aeabi_dmul>
 80064b2:	4602      	mov	r2, r0
 80064b4:	460b      	mov	r3, r1
 80064b6:	4640      	mov	r0, r8
 80064b8:	4649      	mov	r1, r9
 80064ba:	f7f9 fed9 	bl	8000270 <__adddf3>
 80064be:	4602      	mov	r2, r0
 80064c0:	460b      	mov	r3, r1
 80064c2:	f507 7080 	add.w	r0, r7, #256	; 0x100
 80064c6:	f8d7 12b4 	ldr.w	r1, [r7, #692]	; 0x2b4
 80064ca:	00c9      	lsls	r1, r1, #3
 80064cc:	4401      	add	r1, r0
 80064ce:	e9c1 2300 	strd	r2, r3, [r1]
          R_0[R_tmp] += R[iAcol_0 + 2] * R[coffset + 2];
 80064d2:	f507 7280 	add.w	r2, r7, #256	; 0x100
 80064d6:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 80064da:	00db      	lsls	r3, r3, #3
 80064dc:	4413      	add	r3, r2
 80064de:	e9d3 8900 	ldrd	r8, r9, [r3]
 80064e2:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80064e6:	3302      	adds	r3, #2
 80064e8:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80064ec:	00db      	lsls	r3, r3, #3
 80064ee:	4413      	add	r3, r2
 80064f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80064f4:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 80064f8:	3302      	adds	r3, #2
 80064fa:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80064fe:	00db      	lsls	r3, r3, #3
 8006500:	4413      	add	r3, r2
 8006502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006506:	f7fa f869 	bl	80005dc <__aeabi_dmul>
 800650a:	4602      	mov	r2, r0
 800650c:	460b      	mov	r3, r1
 800650e:	4640      	mov	r0, r8
 8006510:	4649      	mov	r1, r9
 8006512:	f7f9 fead 	bl	8000270 <__adddf3>
 8006516:	4602      	mov	r2, r0
 8006518:	460b      	mov	r3, r1
 800651a:	f507 7080 	add.w	r0, r7, #256	; 0x100
 800651e:	f8d7 12b4 	ldr.w	r1, [r7, #692]	; 0x2b4
 8006522:	00c9      	lsls	r1, r1, #3
 8006524:	4401      	add	r1, r0
 8006526:	e9c1 2300 	strd	r2, r3, [r1]
          tempY_0[aoffset + iAcol_0] = tempY[aoffset] * tempY[iAcol];
 800652a:	f107 0210 	add.w	r2, r7, #16
 800652e:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8006532:	00db      	lsls	r3, r3, #3
 8006534:	4413      	add	r3, r2
 8006536:	e9d3 0100 	ldrd	r0, r1, [r3]
 800653a:	f107 0210 	add.w	r2, r7, #16
 800653e:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006542:	00db      	lsls	r3, r3, #3
 8006544:	4413      	add	r3, r2
 8006546:	e9d3 8900 	ldrd	r8, r9, [r3]
 800654a:	f8d7 62ec 	ldr.w	r6, [r7, #748]	; 0x2ec
 800654e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006552:	4433      	add	r3, r6
 8006554:	461e      	mov	r6, r3
 8006556:	4642      	mov	r2, r8
 8006558:	464b      	mov	r3, r9
 800655a:	f7fa f83f 	bl	80005dc <__aeabi_dmul>
 800655e:	4602      	mov	r2, r0
 8006560:	460b      	mov	r3, r1
 8006562:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8006566:	00f1      	lsls	r1, r6, #3
 8006568:	4401      	add	r1, r0
 800656a:	e9c1 2300 	strd	r2, r3, [r1]
          coffset += 3;
 800656e:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8006572:	3303      	adds	r3, #3
 8006574:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
        for (aoffset = 0; aoffset < 3; aoffset++) {
 8006578:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 800657c:	3301      	adds	r3, #1
 800657e:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 8006582:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8006586:	2b02      	cmp	r3, #2
 8006588:	f77f af3a 	ble.w	8006400 <CSE_step+0xa10>
        }

        iAcol_0 += 3;
 800658c:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006590:	3303      	adds	r3, #3
 8006592:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
      for (iAcol = 0; iAcol < 3; iAcol++) {
 8006596:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 800659a:	3301      	adds	r3, #1
 800659c:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 80065a0:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80065a4:	2b02      	cmp	r3, #2
 80065a6:	f77f af24 	ble.w	80063f2 <CSE_step+0xa02>
      }

      errorCondition = true;
 80065aa:	2301      	movs	r3, #1
 80065ac:	f887 32df 	strb.w	r3, [r7, #735]	; 0x2df
      for (iAcol = 0; iAcol < 9; iAcol++) {
 80065b0:	2300      	movs	r3, #0
 80065b2:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 80065b6:	e045      	b.n	8006644 <CSE_step+0xc54>
        temp = R_0[iAcol] - tempY_0[iAcol];
 80065b8:	f507 7280 	add.w	r2, r7, #256	; 0x100
 80065bc:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80065c0:	00db      	lsls	r3, r3, #3
 80065c2:	4413      	add	r3, r2
 80065c4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80065c8:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80065cc:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80065d0:	00db      	lsls	r3, r3, #3
 80065d2:	4413      	add	r3, r2
 80065d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065d8:	f7f9 fe48 	bl	800026c <__aeabi_dsub>
 80065dc:	4602      	mov	r2, r0
 80065de:	460b      	mov	r3, r1
 80065e0:	4639      	mov	r1, r7
 80065e2:	e9c1 2300 	strd	r2, r3, [r1]
        if (errorCondition && (rtIsInf(temp) || rtIsNaN(temp))) {
 80065e6:	f897 32df 	ldrb.w	r3, [r7, #735]	; 0x2df
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d01a      	beq.n	8006624 <CSE_step+0xc34>
 80065ee:	463b      	mov	r3, r7
 80065f0:	ed93 7b00 	vldr	d7, [r3]
 80065f4:	eeb0 0a47 	vmov.f32	s0, s14
 80065f8:	eef0 0a67 	vmov.f32	s1, s15
 80065fc:	f006 fd26 	bl	800d04c <rtIsInf>
 8006600:	4603      	mov	r3, r0
 8006602:	2b00      	cmp	r3, #0
 8006604:	d10b      	bne.n	800661e <CSE_step+0xc2e>
 8006606:	463b      	mov	r3, r7
 8006608:	ed93 7b00 	vldr	d7, [r3]
 800660c:	eeb0 0a47 	vmov.f32	s0, s14
 8006610:	eef0 0a67 	vmov.f32	s1, s15
 8006614:	f006 fd3e 	bl	800d094 <rtIsNaN>
 8006618:	4603      	mov	r3, r0
 800661a:	2b00      	cmp	r3, #0
 800661c:	d002      	beq.n	8006624 <CSE_step+0xc34>
          errorCondition = false;
 800661e:	2300      	movs	r3, #0
 8006620:	f887 32df 	strb.w	r3, [r7, #735]	; 0x2df
        }

        Ss[iAcol] = temp;
 8006624:	463b      	mov	r3, r7
 8006626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800662a:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 800662e:	f8d7 12e4 	ldr.w	r1, [r7, #740]	; 0x2e4
 8006632:	00c9      	lsls	r1, r1, #3
 8006634:	4401      	add	r1, r0
 8006636:	e9c1 2300 	strd	r2, r3, [r1]
      for (iAcol = 0; iAcol < 9; iAcol++) {
 800663a:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 800663e:	3301      	adds	r3, #1
 8006640:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8006644:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006648:	2b08      	cmp	r3, #8
 800664a:	ddb5      	ble.n	80065b8 <CSE_step+0xbc8>
      }

      if (errorCondition) {
 800664c:	f897 32df 	ldrb.w	r3, [r7, #735]	; 0x2df
 8006650:	2b00      	cmp	r3, #0
 8006652:	d00a      	beq.n	800666a <CSE_step+0xc7a>
        svd_u3DvUgOe(Ss, tempY_0, s, R_0);
 8006654:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8006658:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800665c:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8006660:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 8006664:	f006 fd68 	bl	800d138 <svd_u3DvUgOe>
 8006668:	e02c      	b.n	80066c4 <CSE_step+0xcd4>
      } else {
        s[0] = (rtNaN);
 800666a:	4bd2      	ldr	r3, [pc, #840]	; (80069b4 <CSE_step+0xfc4>)
 800666c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006670:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8006674:	e9c1 2300 	strd	r2, r3, [r1]
        s[1] = (rtNaN);
 8006678:	4bce      	ldr	r3, [pc, #824]	; (80069b4 <CSE_step+0xfc4>)
 800667a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800667e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8006682:	e9c1 2302 	strd	r2, r3, [r1, #8]
        s[2] = (rtNaN);
 8006686:	4bcb      	ldr	r3, [pc, #812]	; (80069b4 <CSE_step+0xfc4>)
 8006688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800668c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8006690:	e9c1 2304 	strd	r2, r3, [r1, #16]
        for (iAcol_0 = 0; iAcol_0 < 9; iAcol_0++) {
 8006694:	2300      	movs	r3, #0
 8006696:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 800669a:	e00f      	b.n	80066bc <CSE_step+0xccc>
          R_0[iAcol_0] = (rtNaN);
 800669c:	4bc5      	ldr	r3, [pc, #788]	; (80069b4 <CSE_step+0xfc4>)
 800669e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066a2:	f507 7080 	add.w	r0, r7, #256	; 0x100
 80066a6:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 80066aa:	00c9      	lsls	r1, r1, #3
 80066ac:	4401      	add	r1, r0
 80066ae:	e9c1 2300 	strd	r2, r3, [r1]
        for (iAcol_0 = 0; iAcol_0 < 9; iAcol_0++) {
 80066b2:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80066b6:	3301      	adds	r3, #1
 80066b8:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 80066bc:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80066c0:	2b08      	cmp	r3, #8
 80066c2:	ddeb      	ble.n	800669c <CSE_step+0xcac>
        }
      }

      memset(&Ss[0], 0, 9U * sizeof(real_T));
 80066c4:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80066c8:	2248      	movs	r2, #72	; 0x48
 80066ca:	2100      	movs	r1, #0
 80066cc:	4618      	mov	r0, r3
 80066ce:	f014 fcd3 	bl	801b078 <memset>
      Ss[0] = s[0];
 80066d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80066d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066da:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 80066de:	e9c1 2300 	strd	r2, r3, [r1]
      Ss[4] = s[1];
 80066e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80066e6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80066ea:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 80066ee:	e9c1 2308 	strd	r2, r3, [r1, #32]
      Ss[8] = s[2];
 80066f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80066f6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80066fa:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 80066fe:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
      for (iAcol_0 = 0; iAcol_0 < 9; iAcol_0++) {
 8006702:	2300      	movs	r3, #0
 8006704:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8006708:	e01e      	b.n	8006748 <CSE_step+0xd58>
        Ss[iAcol_0] = sqrt(Ss[iAcol_0]);
 800670a:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 800670e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006712:	00db      	lsls	r3, r3, #3
 8006714:	4413      	add	r3, r2
 8006716:	ed93 7b00 	vldr	d7, [r3]
 800671a:	eeb0 0a47 	vmov.f32	s0, s14
 800671e:	eef0 0a67 	vmov.f32	s1, s15
 8006722:	f014 fe61 	bl	801b3e8 <sqrt>
 8006726:	eeb0 7a40 	vmov.f32	s14, s0
 800672a:	eef0 7a60 	vmov.f32	s15, s1
 800672e:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8006732:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006736:	00db      	lsls	r3, r3, #3
 8006738:	4413      	add	r3, r2
 800673a:	ed83 7b00 	vstr	d7, [r3]
      for (iAcol_0 = 0; iAcol_0 < 9; iAcol_0++) {
 800673e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006742:	3301      	adds	r3, #1
 8006744:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8006748:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800674c:	2b08      	cmp	r3, #8
 800674e:	dddc      	ble.n	800670a <CSE_step+0xd1a>
      }

      iAcol_0 = 0;
 8006750:	2300      	movs	r3, #0
 8006752:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
      for (iAcol = 0; iAcol < 3; iAcol++) {
 8006756:	2300      	movs	r3, #0
 8006758:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 800675c:	e0b4      	b.n	80068c8 <CSE_step+0xed8>
        coffset = 0;
 800675e:	2300      	movs	r3, #0
 8006760:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
        for (aoffset = 0; aoffset < 3; aoffset++) {
 8006764:	2300      	movs	r3, #0
 8006766:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 800676a:	e09e      	b.n	80068aa <CSE_step+0xeba>
          R_tmp = coffset + iAcol;
 800676c:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 8006770:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006774:	4413      	add	r3, r2
 8006776:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
          R[R_tmp] = 0.0;
 800677a:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800677e:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8006782:	00db      	lsls	r3, r3, #3
 8006784:	18d1      	adds	r1, r2, r3
 8006786:	f04f 0200 	mov.w	r2, #0
 800678a:	f04f 0300 	mov.w	r3, #0
 800678e:	e9c1 2300 	strd	r2, r3, [r1]
          R[R_tmp] += Ss[iAcol_0] * R_0[aoffset];
 8006792:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8006796:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 800679a:	00db      	lsls	r3, r3, #3
 800679c:	4413      	add	r3, r2
 800679e:	e9d3 8900 	ldrd	r8, r9, [r3]
 80067a2:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 80067a6:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80067aa:	00db      	lsls	r3, r3, #3
 80067ac:	4413      	add	r3, r2
 80067ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80067b2:	f507 7280 	add.w	r2, r7, #256	; 0x100
 80067b6:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 80067ba:	00db      	lsls	r3, r3, #3
 80067bc:	4413      	add	r3, r2
 80067be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067c2:	f7f9 ff0b 	bl	80005dc <__aeabi_dmul>
 80067c6:	4602      	mov	r2, r0
 80067c8:	460b      	mov	r3, r1
 80067ca:	4640      	mov	r0, r8
 80067cc:	4649      	mov	r1, r9
 80067ce:	f7f9 fd4f 	bl	8000270 <__adddf3>
 80067d2:	4602      	mov	r2, r0
 80067d4:	460b      	mov	r3, r1
 80067d6:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 80067da:	f8d7 12b4 	ldr.w	r1, [r7, #692]	; 0x2b4
 80067de:	00c9      	lsls	r1, r1, #3
 80067e0:	4401      	add	r1, r0
 80067e2:	e9c1 2300 	strd	r2, r3, [r1]
          R[R_tmp] += Ss[iAcol_0 + 1] * R_0[aoffset + 3];
 80067e6:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80067ea:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 80067ee:	00db      	lsls	r3, r3, #3
 80067f0:	4413      	add	r3, r2
 80067f2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80067f6:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80067fa:	3301      	adds	r3, #1
 80067fc:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8006800:	00db      	lsls	r3, r3, #3
 8006802:	4413      	add	r3, r2
 8006804:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006808:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 800680c:	3303      	adds	r3, #3
 800680e:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8006812:	00db      	lsls	r3, r3, #3
 8006814:	4413      	add	r3, r2
 8006816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800681a:	f7f9 fedf 	bl	80005dc <__aeabi_dmul>
 800681e:	4602      	mov	r2, r0
 8006820:	460b      	mov	r3, r1
 8006822:	4640      	mov	r0, r8
 8006824:	4649      	mov	r1, r9
 8006826:	f7f9 fd23 	bl	8000270 <__adddf3>
 800682a:	4602      	mov	r2, r0
 800682c:	460b      	mov	r3, r1
 800682e:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8006832:	f8d7 12b4 	ldr.w	r1, [r7, #692]	; 0x2b4
 8006836:	00c9      	lsls	r1, r1, #3
 8006838:	4401      	add	r1, r0
 800683a:	e9c1 2300 	strd	r2, r3, [r1]
          R[R_tmp] += Ss[iAcol_0 + 2] * R_0[aoffset + 6];
 800683e:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8006842:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8006846:	00db      	lsls	r3, r3, #3
 8006848:	4413      	add	r3, r2
 800684a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800684e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006852:	3302      	adds	r3, #2
 8006854:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8006858:	00db      	lsls	r3, r3, #3
 800685a:	4413      	add	r3, r2
 800685c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006860:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8006864:	3306      	adds	r3, #6
 8006866:	f507 7280 	add.w	r2, r7, #256	; 0x100
 800686a:	00db      	lsls	r3, r3, #3
 800686c:	4413      	add	r3, r2
 800686e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006872:	f7f9 feb3 	bl	80005dc <__aeabi_dmul>
 8006876:	4602      	mov	r2, r0
 8006878:	460b      	mov	r3, r1
 800687a:	4640      	mov	r0, r8
 800687c:	4649      	mov	r1, r9
 800687e:	f7f9 fcf7 	bl	8000270 <__adddf3>
 8006882:	4602      	mov	r2, r0
 8006884:	460b      	mov	r3, r1
 8006886:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 800688a:	f8d7 12b4 	ldr.w	r1, [r7, #692]	; 0x2b4
 800688e:	00c9      	lsls	r1, r1, #3
 8006890:	4401      	add	r1, r0
 8006892:	e9c1 2300 	strd	r2, r3, [r1]
          coffset += 3;
 8006896:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 800689a:	3303      	adds	r3, #3
 800689c:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
        for (aoffset = 0; aoffset < 3; aoffset++) {
 80068a0:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 80068a4:	3301      	adds	r3, #1
 80068a6:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 80068aa:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 80068ae:	2b02      	cmp	r3, #2
 80068b0:	f77f af5c 	ble.w	800676c <CSE_step+0xd7c>
        }

        iAcol_0 += 3;
 80068b4:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80068b8:	3303      	adds	r3, #3
 80068ba:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
      for (iAcol = 0; iAcol < 3; iAcol++) {
 80068be:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80068c2:	3301      	adds	r3, #1
 80068c4:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 80068c8:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80068cc:	2b02      	cmp	r3, #2
 80068ce:	f77f af46 	ble.w	800675e <CSE_step+0xd6e>
      }

      errorCondition = true;
 80068d2:	2301      	movs	r3, #1
 80068d4:	f887 32df 	strb.w	r3, [r7, #735]	; 0x2df
      iAcol = 0;
 80068d8:	2300      	movs	r3, #0
 80068da:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
      exitg2 = false;
 80068de:	2300      	movs	r3, #0
 80068e0:	f887 32cf 	strb.w	r3, [r7, #719]	; 0x2cf
      while ((!exitg2) && (iAcol < 3)) {
 80068e4:	e042      	b.n	800696c <CSE_step+0xf7c>
        int32_T exitg1;
        iAcol_0 = iAcol + 1;
 80068e6:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80068ea:	3301      	adds	r3, #1
 80068ec:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
        do {
          exitg1 = 0;
 80068f0:	2300      	movs	r3, #0
 80068f2:	f8c7 32c8 	str.w	r3, [r7, #712]	; 0x2c8
          if (iAcol_0 + 1 < 4) {
 80068f6:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80068fa:	2b02      	cmp	r3, #2
 80068fc:	dc23      	bgt.n	8006946 <CSE_step+0xf56>
            if (!(R[3 * iAcol + iAcol_0] == 0.0)) {
 80068fe:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8006902:	4613      	mov	r3, r2
 8006904:	005b      	lsls	r3, r3, #1
 8006906:	441a      	add	r2, r3
 8006908:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800690c:	4413      	add	r3, r2
 800690e:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8006912:	00db      	lsls	r3, r3, #3
 8006914:	4413      	add	r3, r2
 8006916:	e9d3 0100 	ldrd	r0, r1, [r3]
 800691a:	f04f 0200 	mov.w	r2, #0
 800691e:	f04f 0300 	mov.w	r3, #0
 8006922:	f7fa f8c3 	bl	8000aac <__aeabi_dcmpeq>
 8006926:	4603      	mov	r3, r0
 8006928:	2b00      	cmp	r3, #0
 800692a:	d106      	bne.n	800693a <CSE_step+0xf4a>
              errorCondition = false;
 800692c:	2300      	movs	r3, #0
 800692e:	f887 32df 	strb.w	r3, [r7, #735]	; 0x2df
              exitg1 = 1;
 8006932:	2301      	movs	r3, #1
 8006934:	f8c7 32c8 	str.w	r3, [r7, #712]	; 0x2c8
 8006938:	e00d      	b.n	8006956 <CSE_step+0xf66>
            } else {
              iAcol_0++;
 800693a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800693e:	3301      	adds	r3, #1
 8006940:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8006944:	e007      	b.n	8006956 <CSE_step+0xf66>
            }
          } else {
            iAcol++;
 8006946:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 800694a:	3301      	adds	r3, #1
 800694c:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
            exitg1 = 2;
 8006950:	2302      	movs	r3, #2
 8006952:	f8c7 32c8 	str.w	r3, [r7, #712]	; 0x2c8
          }
        } while (exitg1 == 0);
 8006956:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 800695a:	2b00      	cmp	r3, #0
 800695c:	d0c8      	beq.n	80068f0 <CSE_step+0xf00>

        if (exitg1 == 1) {
 800695e:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 8006962:	2b01      	cmp	r3, #1
 8006964:	d102      	bne.n	800696c <CSE_step+0xf7c>
          exitg2 = true;
 8006966:	2301      	movs	r3, #1
 8006968:	f887 32cf 	strb.w	r3, [r7, #719]	; 0x2cf
      while ((!exitg2) && (iAcol < 3)) {
 800696c:	f897 32cf 	ldrb.w	r3, [r7, #719]	; 0x2cf
 8006970:	2b00      	cmp	r3, #0
 8006972:	d103      	bne.n	800697c <CSE_step+0xf8c>
 8006974:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006978:	2b02      	cmp	r3, #2
 800697a:	ddb4      	ble.n	80068e6 <CSE_step+0xef6>
        }
      }

      if (!errorCondition) {
 800697c:	f897 32df 	ldrb.w	r3, [r7, #735]	; 0x2df
 8006980:	2b00      	cmp	r3, #0
 8006982:	d110      	bne.n	80069a6 <CSE_step+0xfb6>
        memcpy(&R_0[0], &R[0], 9U * sizeof(real_T));
 8006984:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 8006988:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800698c:	2248      	movs	r2, #72	; 0x48
 800698e:	4618      	mov	r0, r3
 8006990:	f014 fb64 	bl	801b05c <memcpy>
        qr_5a2P8Gh6(R_0, tempY_0, R);
 8006994:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8006998:	f107 0170 	add.w	r1, r7, #112	; 0x70
 800699c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80069a0:	4618      	mov	r0, r3
 80069a2:	f004 f807 	bl	800a9b4 <qr_5a2P8Gh6>
      }
    }

    iAcol_0 = 0;
 80069a6:	2300      	movs	r3, #0
 80069a8:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
    for (iAcol = 0; iAcol < 3; iAcol++) {
 80069ac:	2300      	movs	r3, #0
 80069ae:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 80069b2:	e062      	b.n	8006a7a <CSE_step+0x108a>
 80069b4:	2001ec10 	.word	0x2001ec10
      CSE_DW.P[iAcol_0] = R[iAcol];
 80069b8:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80069bc:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80069c0:	00db      	lsls	r3, r3, #3
 80069c2:	4413      	add	r3, r2
 80069c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069c8:	48a5      	ldr	r0, [pc, #660]	; (8006c60 <CSE_step+0x1270>)
 80069ca:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 80069ce:	00c9      	lsls	r1, r1, #3
 80069d0:	4401      	add	r1, r0
 80069d2:	e9c1 2300 	strd	r2, r3, [r1]
      CSE_DW.P[iAcol_0 + 1] = R[iAcol + 3];
 80069d6:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80069da:	3303      	adds	r3, #3
 80069dc:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 80069e0:	1c51      	adds	r1, r2, #1
 80069e2:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80069e6:	00db      	lsls	r3, r3, #3
 80069e8:	4413      	add	r3, r2
 80069ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ee:	489c      	ldr	r0, [pc, #624]	; (8006c60 <CSE_step+0x1270>)
 80069f0:	00c9      	lsls	r1, r1, #3
 80069f2:	4401      	add	r1, r0
 80069f4:	e9c1 2300 	strd	r2, r3, [r1]
      CSE_DW.P[iAcol_0 + 2] = R[iAcol + 6];
 80069f8:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80069fc:	3306      	adds	r3, #6
 80069fe:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8006a02:	1c91      	adds	r1, r2, #2
 8006a04:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8006a08:	00db      	lsls	r3, r3, #3
 8006a0a:	4413      	add	r3, r2
 8006a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a10:	4893      	ldr	r0, [pc, #588]	; (8006c60 <CSE_step+0x1270>)
 8006a12:	00c9      	lsls	r1, r1, #3
 8006a14:	4401      	add	r1, r0
 8006a16:	e9c1 2300 	strd	r2, r3, [r1]
      CSE_DW.x[iAcol] += K[iAcol] * s_0;
 8006a1a:	4a91      	ldr	r2, [pc, #580]	; (8006c60 <CSE_step+0x1270>)
 8006a1c:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006a20:	3309      	adds	r3, #9
 8006a22:	00db      	lsls	r3, r3, #3
 8006a24:	4413      	add	r3, r2
 8006a26:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006a2a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8006a2e:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006a32:	00db      	lsls	r3, r3, #3
 8006a34:	4413      	add	r3, r2
 8006a36:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006a3a:	f107 0308 	add.w	r3, r7, #8
 8006a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a42:	f7f9 fdcb 	bl	80005dc <__aeabi_dmul>
 8006a46:	4602      	mov	r2, r0
 8006a48:	460b      	mov	r3, r1
 8006a4a:	4640      	mov	r0, r8
 8006a4c:	4649      	mov	r1, r9
 8006a4e:	f7f9 fc0f 	bl	8000270 <__adddf3>
 8006a52:	4602      	mov	r2, r0
 8006a54:	460b      	mov	r3, r1
 8006a56:	4882      	ldr	r0, [pc, #520]	; (8006c60 <CSE_step+0x1270>)
 8006a58:	f8d7 12e4 	ldr.w	r1, [r7, #740]	; 0x2e4
 8006a5c:	3109      	adds	r1, #9
 8006a5e:	00c9      	lsls	r1, r1, #3
 8006a60:	4401      	add	r1, r0
 8006a62:	e9c1 2300 	strd	r2, r3, [r1]
      iAcol_0 += 3;
 8006a66:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006a6a:	3303      	adds	r3, #3
 8006a6c:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
    for (iAcol = 0; iAcol < 3; iAcol++) {
 8006a70:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006a74:	3301      	adds	r3, #1
 8006a76:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8006a7a:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006a7e:	2b02      	cmp	r3, #2
 8006a80:	dd9a      	ble.n	80069b8 <CSE_step+0xfc8>
    }
  }

  CSE_Y.soc = CSE_DW.x[1] / CSE_DW.x[2];
 8006a82:	4b77      	ldr	r3, [pc, #476]	; (8006c60 <CSE_step+0x1270>)
 8006a84:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8006a88:	4b75      	ldr	r3, [pc, #468]	; (8006c60 <CSE_step+0x1270>)
 8006a8a:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8006a8e:	f7f9 fecf 	bl	8000830 <__aeabi_ddiv>
 8006a92:	4602      	mov	r2, r0
 8006a94:	460b      	mov	r3, r1
 8006a96:	4973      	ldr	r1, [pc, #460]	; (8006c64 <CSE_step+0x1274>)
 8006a98:	e9c1 2300 	strd	r2, r3, [r1]
  CSE_Y.capacity = CSE_DW.x[2];
 8006a9c:	4b70      	ldr	r3, [pc, #448]	; (8006c60 <CSE_step+0x1270>)
 8006a9e:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8006aa2:	4970      	ldr	r1, [pc, #448]	; (8006c64 <CSE_step+0x1274>)
 8006aa4:	e9c1 2302 	strd	r2, r3, [r1, #8]
  CSE_S_x(CSE_DW.x, tempY);
 8006aa8:	f107 0310 	add.w	r3, r7, #16
 8006aac:	4619      	mov	r1, r3
 8006aae:	486e      	ldr	r0, [pc, #440]	; (8006c68 <CSE_step+0x1278>)
 8006ab0:	f7fe fb26 	bl	8005100 <CSE_S_x>
  for (iAcol_0 = 0; iAcol_0 < 9; iAcol_0++) {
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8006aba:	e034      	b.n	8006b26 <CSE_step+0x1136>
    s_0 = 0.0017320508075688774 * CSE_DW.P[iAcol_0];
 8006abc:	4a68      	ldr	r2, [pc, #416]	; (8006c60 <CSE_step+0x1270>)
 8006abe:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006ac2:	00db      	lsls	r3, r3, #3
 8006ac4:	4413      	add	r3, r2
 8006ac6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006aca:	a363      	add	r3, pc, #396	; (adr r3, 8006c58 <CSE_step+0x1268>)
 8006acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ad0:	f7f9 fd84 	bl	80005dc <__aeabi_dmul>
 8006ad4:	4602      	mov	r2, r0
 8006ad6:	460b      	mov	r3, r1
 8006ad8:	f107 0108 	add.w	r1, r7, #8
 8006adc:	e9c1 2300 	strd	r2, r3, [r1]
    X2state[iAcol_0] = s_0;
 8006ae0:	f107 0308 	add.w	r3, r7, #8
 8006ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ae8:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8006aec:	00c9      	lsls	r1, r1, #3
 8006aee:	f507 703c 	add.w	r0, r7, #752	; 0x2f0
 8006af2:	4401      	add	r1, r0
 8006af4:	39d0      	subs	r1, #208	; 0xd0
 8006af6:	e9c1 2300 	strd	r2, r3, [r1]
    X2state[iAcol_0 + 9] = -s_0;
 8006afa:	f107 0308 	add.w	r3, r7, #8
 8006afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b02:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8006b06:	3109      	adds	r1, #9
 8006b08:	4614      	mov	r4, r2
 8006b0a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8006b0e:	00cb      	lsls	r3, r1, #3
 8006b10:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
 8006b14:	4413      	add	r3, r2
 8006b16:	3bd0      	subs	r3, #208	; 0xd0
 8006b18:	e9c3 4500 	strd	r4, r5, [r3]
  for (iAcol_0 = 0; iAcol_0 < 9; iAcol_0++) {
 8006b1c:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006b20:	3301      	adds	r3, #1
 8006b22:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8006b26:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006b2a:	2b08      	cmp	r3, #8
 8006b2c:	ddc6      	ble.n	8006abc <CSE_step+0x10cc>
  }

  iAcol_0 = 0;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
  for (iAcol = 0; iAcol < 6; iAcol++) {
 8006b34:	2300      	movs	r3, #0
 8006b36:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8006b3a:	e058      	b.n	8006bee <CSE_step+0x11fe>
    X2state[iAcol_0] += CSE_DW.x[0];
 8006b3c:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006b40:	00db      	lsls	r3, r3, #3
 8006b42:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
 8006b46:	4413      	add	r3, r2
 8006b48:	3bd0      	subs	r3, #208	; 0xd0
 8006b4a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006b4e:	4b44      	ldr	r3, [pc, #272]	; (8006c60 <CSE_step+0x1270>)
 8006b50:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8006b54:	f7f9 fb8c 	bl	8000270 <__adddf3>
 8006b58:	4602      	mov	r2, r0
 8006b5a:	460b      	mov	r3, r1
 8006b5c:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8006b60:	00c9      	lsls	r1, r1, #3
 8006b62:	f507 703c 	add.w	r0, r7, #752	; 0x2f0
 8006b66:	4401      	add	r1, r0
 8006b68:	39d0      	subs	r1, #208	; 0xd0
 8006b6a:	e9c1 2300 	strd	r2, r3, [r1]
    X2state[iAcol_0 + 1] += CSE_DW.x[1];
 8006b6e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006b72:	3301      	adds	r3, #1
 8006b74:	00db      	lsls	r3, r3, #3
 8006b76:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
 8006b7a:	4413      	add	r3, r2
 8006b7c:	3bd0      	subs	r3, #208	; 0xd0
 8006b7e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006b82:	4b37      	ldr	r3, [pc, #220]	; (8006c60 <CSE_step+0x1270>)
 8006b84:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8006b88:	f8d7 42e0 	ldr.w	r4, [r7, #736]	; 0x2e0
 8006b8c:	3401      	adds	r4, #1
 8006b8e:	f7f9 fb6f 	bl	8000270 <__adddf3>
 8006b92:	4602      	mov	r2, r0
 8006b94:	460b      	mov	r3, r1
 8006b96:	00e1      	lsls	r1, r4, #3
 8006b98:	f507 703c 	add.w	r0, r7, #752	; 0x2f0
 8006b9c:	4401      	add	r1, r0
 8006b9e:	39d0      	subs	r1, #208	; 0xd0
 8006ba0:	e9c1 2300 	strd	r2, r3, [r1]
    X2state[iAcol_0 + 2] += CSE_DW.x[2];
 8006ba4:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006ba8:	3302      	adds	r3, #2
 8006baa:	00db      	lsls	r3, r3, #3
 8006bac:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
 8006bb0:	4413      	add	r3, r2
 8006bb2:	3bd0      	subs	r3, #208	; 0xd0
 8006bb4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006bb8:	4b29      	ldr	r3, [pc, #164]	; (8006c60 <CSE_step+0x1270>)
 8006bba:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8006bbe:	f8d7 42e0 	ldr.w	r4, [r7, #736]	; 0x2e0
 8006bc2:	3402      	adds	r4, #2
 8006bc4:	f7f9 fb54 	bl	8000270 <__adddf3>
 8006bc8:	4602      	mov	r2, r0
 8006bca:	460b      	mov	r3, r1
 8006bcc:	00e1      	lsls	r1, r4, #3
 8006bce:	f507 703c 	add.w	r0, r7, #752	; 0x2f0
 8006bd2:	4401      	add	r1, r0
 8006bd4:	39d0      	subs	r1, #208	; 0xd0
 8006bd6:	e9c1 2300 	strd	r2, r3, [r1]
    iAcol_0 += 3;
 8006bda:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006bde:	3303      	adds	r3, #3
 8006be0:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
  for (iAcol = 0; iAcol < 6; iAcol++) {
 8006be4:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006be8:	3301      	adds	r3, #1
 8006bea:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8006bee:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006bf2:	2b05      	cmp	r3, #5
 8006bf4:	dda2      	ble.n	8006b3c <CSE_step+0x114c>
  }

  iAcol_0 = 0;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
  for (iAcol = 0; iAcol < 6; iAcol++) {
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8006c02:	e018      	b.n	8006c36 <CSE_step+0x1246>
    CSE_S_x(&X2state[iAcol_0], &Y2[iAcol_0]);
 8006c04:	f507 7208 	add.w	r2, r7, #544	; 0x220
 8006c08:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006c0c:	00db      	lsls	r3, r3, #3
 8006c0e:	18d0      	adds	r0, r2, r3
 8006c10:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 8006c14:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006c18:	00db      	lsls	r3, r3, #3
 8006c1a:	4413      	add	r3, r2
 8006c1c:	4619      	mov	r1, r3
 8006c1e:	f7fe fa6f 	bl	8005100 <CSE_S_x>
    iAcol_0 += 3;
 8006c22:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006c26:	3303      	adds	r3, #3
 8006c28:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
  for (iAcol = 0; iAcol < 6; iAcol++) {
 8006c2c:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006c30:	3301      	adds	r3, #1
 8006c32:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8006c36:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006c3a:	2b05      	cmp	r3, #5
 8006c3c:	dde2      	ble.n	8006c04 <CSE_step+0x1214>
  }

  CSE_S_x(CSE_DW.x, tempY);
 8006c3e:	f107 0310 	add.w	r3, r7, #16
 8006c42:	4619      	mov	r1, r3
 8006c44:	4808      	ldr	r0, [pc, #32]	; (8006c68 <CSE_step+0x1278>)
 8006c46:	f7fe fa5b 	bl	8005100 <CSE_S_x>
  for (iAcol_0 = 0; iAcol_0 < 3; iAcol_0++) {
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8006c50:	e021      	b.n	8006c96 <CSE_step+0x12a6>
 8006c52:	bf00      	nop
 8006c54:	f3af 8000 	nop.w
 8006c58:	64b487da 	.word	0x64b487da
 8006c5c:	3f5c60bf 	.word	0x3f5c60bf
 8006c60:	2001c0e8 	.word	0x2001c0e8
 8006c64:	2001c0c8 	.word	0x2001c0c8
 8006c68:	2001c130 	.word	0x2001c130
    C[iAcol_0] = CSE_DW.x[iAcol_0];
 8006c6c:	4ab8      	ldr	r2, [pc, #736]	; (8006f50 <CSE_step+0x1560>)
 8006c6e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006c72:	3309      	adds	r3, #9
 8006c74:	00db      	lsls	r3, r3, #3
 8006c76:	4413      	add	r3, r2
 8006c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c7c:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8006c80:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8006c84:	00c9      	lsls	r1, r1, #3
 8006c86:	4401      	add	r1, r0
 8006c88:	e9c1 2300 	strd	r2, r3, [r1]
  for (iAcol_0 = 0; iAcol_0 < 3; iAcol_0++) {
 8006c8c:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006c90:	3301      	adds	r3, #1
 8006c92:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8006c96:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006c9a:	2b02      	cmp	r3, #2
 8006c9c:	dde6      	ble.n	8006c6c <CSE_step+0x127c>
  }

  UTMeanCovSqrt_C2vgLQ4W(Wmean, Wcov, -999999.0, tempY, Y2, C, X2state, CSE_DW.x,
 8006c9e:	f507 71c8 	add.w	r1, r7, #400	; 0x190
 8006ca2:	f107 0210 	add.w	r2, r7, #16
 8006ca6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006caa:	9304      	str	r3, [sp, #16]
 8006cac:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8006cb0:	9303      	str	r3, [sp, #12]
 8006cb2:	4ba8      	ldr	r3, [pc, #672]	; (8006f54 <CSE_step+0x1564>)
 8006cb4:	9302      	str	r3, [sp, #8]
 8006cb6:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8006cba:	9301      	str	r3, [sp, #4]
 8006cbc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006cc0:	9300      	str	r3, [sp, #0]
 8006cc2:	460b      	mov	r3, r1
 8006cc4:	ed9f 0ba0 	vldr	d0, [pc, #640]	; 8006f48 <CSE_step+0x1558>
 8006cc8:	49a3      	ldr	r1, [pc, #652]	; (8006f58 <CSE_step+0x1568>)
 8006cca:	48a4      	ldr	r0, [pc, #656]	; (8006f5c <CSE_step+0x156c>)
 8006ccc:	f001 fc42 	bl	8008554 <UTMeanCovSqrt_C2vgLQ4W>
    Ss, R);
  memset(&R[0], 0, 9U * sizeof(real_T));
 8006cd0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006cd4:	2248      	movs	r2, #72	; 0x48
 8006cd6:	2100      	movs	r1, #0
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f014 f9cd 	bl	801b078 <memset>
  R[0] = 1.0;
 8006cde:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 8006ce2:	f04f 0200 	mov.w	r2, #0
 8006ce6:	4b9e      	ldr	r3, [pc, #632]	; (8006f60 <CSE_step+0x1570>)
 8006ce8:	e9c1 2300 	strd	r2, r3, [r1]
  R[4] = 1.0;
 8006cec:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 8006cf0:	f04f 0200 	mov.w	r2, #0
 8006cf4:	4b9a      	ldr	r3, [pc, #616]	; (8006f60 <CSE_step+0x1570>)
 8006cf6:	e9c1 2308 	strd	r2, r3, [r1, #32]
  R[8] = 1.0;
 8006cfa:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 8006cfe:	f04f 0200 	mov.w	r2, #0
 8006d02:	4b97      	ldr	r3, [pc, #604]	; (8006f60 <CSE_step+0x1570>)
 8006d04:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
  for (iAcol_0 = 0; iAcol_0 < 3; iAcol_0++) {
 8006d08:	2300      	movs	r3, #0
 8006d0a:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8006d0e:	e07e      	b.n	8006e0e <CSE_step+0x141e>
    coffset = iAcol_0 * 3;
 8006d10:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8006d14:	4613      	mov	r3, r2
 8006d16:	005b      	lsls	r3, r3, #1
 8006d18:	4413      	add	r3, r2
 8006d1a:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
    for (iAcol = 0; iAcol < 3; iAcol++) {
 8006d1e:	2300      	movs	r3, #0
 8006d20:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8006d24:	e06a      	b.n	8006dfc <CSE_step+0x140c>
      aoffset = iAcol * 3;
 8006d26:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8006d2a:	4613      	mov	r3, r2
 8006d2c:	005b      	lsls	r3, r3, #1
 8006d2e:	4413      	add	r3, r2
 8006d30:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
      R_0[coffset + iAcol] = (Ss[aoffset + 1] * R[iAcol_0 + 3] + Ss[aoffset] *
 8006d34:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8006d38:	3301      	adds	r3, #1
 8006d3a:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8006d3e:	00db      	lsls	r3, r3, #3
 8006d40:	4413      	add	r3, r2
 8006d42:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006d46:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006d4a:	3303      	adds	r3, #3
 8006d4c:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8006d50:	00db      	lsls	r3, r3, #3
 8006d52:	4413      	add	r3, r2
 8006d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d58:	f7f9 fc40 	bl	80005dc <__aeabi_dmul>
 8006d5c:	4602      	mov	r2, r0
 8006d5e:	460b      	mov	r3, r1
 8006d60:	4614      	mov	r4, r2
 8006d62:	461d      	mov	r5, r3
 8006d64:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8006d68:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8006d6c:	00db      	lsls	r3, r3, #3
 8006d6e:	4413      	add	r3, r2
 8006d70:	e9d3 0100 	ldrd	r0, r1, [r3]
        R[iAcol_0]) + Ss[aoffset + 2] * R[iAcol_0 + 6];
 8006d74:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8006d78:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006d7c:	00db      	lsls	r3, r3, #3
 8006d7e:	4413      	add	r3, r2
 8006d80:	e9d3 2300 	ldrd	r2, r3, [r3]
      R_0[coffset + iAcol] = (Ss[aoffset + 1] * R[iAcol_0 + 3] + Ss[aoffset] *
 8006d84:	f7f9 fc2a 	bl	80005dc <__aeabi_dmul>
 8006d88:	4602      	mov	r2, r0
 8006d8a:	460b      	mov	r3, r1
 8006d8c:	4620      	mov	r0, r4
 8006d8e:	4629      	mov	r1, r5
 8006d90:	f7f9 fa6e 	bl	8000270 <__adddf3>
 8006d94:	4602      	mov	r2, r0
 8006d96:	460b      	mov	r3, r1
 8006d98:	4690      	mov	r8, r2
 8006d9a:	4699      	mov	r9, r3
        R[iAcol_0]) + Ss[aoffset + 2] * R[iAcol_0 + 6];
 8006d9c:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8006da0:	3302      	adds	r3, #2
 8006da2:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8006da6:	00db      	lsls	r3, r3, #3
 8006da8:	4413      	add	r3, r2
 8006daa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006dae:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006db2:	3306      	adds	r3, #6
 8006db4:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8006db8:	00db      	lsls	r3, r3, #3
 8006dba:	4413      	add	r3, r2
 8006dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dc0:	f7f9 fc0c 	bl	80005dc <__aeabi_dmul>
 8006dc4:	4602      	mov	r2, r0
 8006dc6:	460b      	mov	r3, r1
 8006dc8:	4610      	mov	r0, r2
 8006dca:	4619      	mov	r1, r3
      R_0[coffset + iAcol] = (Ss[aoffset + 1] * R[iAcol_0 + 3] + Ss[aoffset] *
 8006dcc:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 8006dd0:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006dd4:	18d4      	adds	r4, r2, r3
        R[iAcol_0]) + Ss[aoffset + 2] * R[iAcol_0 + 6];
 8006dd6:	4602      	mov	r2, r0
 8006dd8:	460b      	mov	r3, r1
 8006dda:	4640      	mov	r0, r8
 8006ddc:	4649      	mov	r1, r9
 8006dde:	f7f9 fa47 	bl	8000270 <__adddf3>
 8006de2:	4602      	mov	r2, r0
 8006de4:	460b      	mov	r3, r1
      R_0[coffset + iAcol] = (Ss[aoffset + 1] * R[iAcol_0 + 3] + Ss[aoffset] *
 8006de6:	f507 7080 	add.w	r0, r7, #256	; 0x100
 8006dea:	00e1      	lsls	r1, r4, #3
 8006dec:	4401      	add	r1, r0
 8006dee:	e9c1 2300 	strd	r2, r3, [r1]
    for (iAcol = 0; iAcol < 3; iAcol++) {
 8006df2:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006df6:	3301      	adds	r3, #1
 8006df8:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8006dfc:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006e00:	2b02      	cmp	r3, #2
 8006e02:	dd90      	ble.n	8006d26 <CSE_step+0x1336>
  for (iAcol_0 = 0; iAcol_0 < 3; iAcol_0++) {
 8006e04:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006e08:	3301      	adds	r3, #1
 8006e0a:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8006e0e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006e12:	2b02      	cmp	r3, #2
 8006e14:	f77f af7c 	ble.w	8006d10 <CSE_step+0x1320>
    }
  }

  iAcol_0 = 0;
 8006e18:	2300      	movs	r3, #0
 8006e1a:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
  iAcol = 0;
 8006e1e:	2300      	movs	r3, #0
 8006e20:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
  for (coffset = 0; coffset < 3; coffset++) {
 8006e24:	2300      	movs	r3, #0
 8006e26:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
 8006e2a:	e077      	b.n	8006f1c <CSE_step+0x152c>
    Y2[iAcol_0] = R_0[iAcol];
 8006e2c:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8006e30:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006e34:	00db      	lsls	r3, r3, #3
 8006e36:	4413      	add	r3, r2
 8006e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e3c:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 8006e40:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8006e44:	00c9      	lsls	r1, r1, #3
 8006e46:	4401      	add	r1, r0
 8006e48:	e9c1 2300 	strd	r2, r3, [r1]
    Y2[iAcol_0 + 3] = CSE_P.Q_Value[coffset];
 8006e4c:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006e50:	1cd9      	adds	r1, r3, #3
 8006e52:	4a44      	ldr	r2, [pc, #272]	; (8006f64 <CSE_step+0x1574>)
 8006e54:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8006e58:	3344      	adds	r3, #68	; 0x44
 8006e5a:	00db      	lsls	r3, r3, #3
 8006e5c:	4413      	add	r3, r2
 8006e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e62:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 8006e66:	00c9      	lsls	r1, r1, #3
 8006e68:	4401      	add	r1, r0
 8006e6a:	e9c1 2300 	strd	r2, r3, [r1]
    Y2[iAcol_0 + 1] = R_0[iAcol + 1];
 8006e6e:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006e72:	3301      	adds	r3, #1
 8006e74:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8006e78:	1c51      	adds	r1, r2, #1
 8006e7a:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8006e7e:	00db      	lsls	r3, r3, #3
 8006e80:	4413      	add	r3, r2
 8006e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e86:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 8006e8a:	00c9      	lsls	r1, r1, #3
 8006e8c:	4401      	add	r1, r0
 8006e8e:	e9c1 2300 	strd	r2, r3, [r1]
    Y2[iAcol_0 + 4] = CSE_P.Q_Value[coffset + 3];
 8006e92:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8006e96:	3303      	adds	r3, #3
 8006e98:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8006e9c:	1d11      	adds	r1, r2, #4
 8006e9e:	4a31      	ldr	r2, [pc, #196]	; (8006f64 <CSE_step+0x1574>)
 8006ea0:	3344      	adds	r3, #68	; 0x44
 8006ea2:	00db      	lsls	r3, r3, #3
 8006ea4:	4413      	add	r3, r2
 8006ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eaa:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 8006eae:	00c9      	lsls	r1, r1, #3
 8006eb0:	4401      	add	r1, r0
 8006eb2:	e9c1 2300 	strd	r2, r3, [r1]
    Y2[iAcol_0 + 2] = R_0[iAcol + 2];
 8006eb6:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006eba:	3302      	adds	r3, #2
 8006ebc:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8006ec0:	1c91      	adds	r1, r2, #2
 8006ec2:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8006ec6:	00db      	lsls	r3, r3, #3
 8006ec8:	4413      	add	r3, r2
 8006eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ece:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 8006ed2:	00c9      	lsls	r1, r1, #3
 8006ed4:	4401      	add	r1, r0
 8006ed6:	e9c1 2300 	strd	r2, r3, [r1]
    Y2[iAcol_0 + 5] = CSE_P.Q_Value[coffset + 6];
 8006eda:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8006ede:	3306      	adds	r3, #6
 8006ee0:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8006ee4:	1d51      	adds	r1, r2, #5
 8006ee6:	4a1f      	ldr	r2, [pc, #124]	; (8006f64 <CSE_step+0x1574>)
 8006ee8:	3344      	adds	r3, #68	; 0x44
 8006eea:	00db      	lsls	r3, r3, #3
 8006eec:	4413      	add	r3, r2
 8006eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ef2:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 8006ef6:	00c9      	lsls	r1, r1, #3
 8006ef8:	4401      	add	r1, r0
 8006efa:	e9c1 2300 	strd	r2, r3, [r1]
    iAcol_0 += 6;
 8006efe:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006f02:	3306      	adds	r3, #6
 8006f04:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
    iAcol += 3;
 8006f08:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006f0c:	3303      	adds	r3, #3
 8006f0e:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
  for (coffset = 0; coffset < 3; coffset++) {
 8006f12:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8006f16:	3301      	adds	r3, #1
 8006f18:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
 8006f1c:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8006f20:	2b02      	cmp	r3, #2
 8006f22:	dd83      	ble.n	8006e2c <CSE_step+0x143c>
  }

  qr_DvOBrgQi(Y2, X2state, R);
 8006f24:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8006f28:	f507 7108 	add.w	r1, r7, #544	; 0x220
 8006f2c:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8006f30:	4618      	mov	r0, r3
 8006f32:	f004 fcc7 	bl	800b8c4 <qr_DvOBrgQi>
  iAcol_0 = 0;
 8006f36:	2300      	movs	r3, #0
 8006f38:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
  for (iAcol = 0; iAcol < 3; iAcol++) {
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8006f42:	e04c      	b.n	8006fde <CSE_step+0x15ee>
 8006f44:	f3af 8000 	nop.w
 8006f48:	00000000 	.word	0x00000000
 8006f4c:	c12e847e 	.word	0xc12e847e
 8006f50:	2001c0e8 	.word	0x2001c0e8
 8006f54:	2001c130 	.word	0x2001c130
 8006f58:	0801c3d0 	.word	0x0801c3d0
 8006f5c:	0801c3c0 	.word	0x0801c3c0
 8006f60:	3ff00000 	.word	0x3ff00000
 8006f64:	20000088 	.word	0x20000088
    CSE_DW.P[iAcol_0] = R[iAcol];
 8006f68:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8006f6c:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006f70:	00db      	lsls	r3, r3, #3
 8006f72:	4413      	add	r3, r2
 8006f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f78:	481e      	ldr	r0, [pc, #120]	; (8006ff4 <CSE_step+0x1604>)
 8006f7a:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8006f7e:	00c9      	lsls	r1, r1, #3
 8006f80:	4401      	add	r1, r0
 8006f82:	e9c1 2300 	strd	r2, r3, [r1]
    CSE_DW.P[iAcol_0 + 1] = R[iAcol + 3];
 8006f86:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006f8a:	3303      	adds	r3, #3
 8006f8c:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8006f90:	1c51      	adds	r1, r2, #1
 8006f92:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8006f96:	00db      	lsls	r3, r3, #3
 8006f98:	4413      	add	r3, r2
 8006f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f9e:	4815      	ldr	r0, [pc, #84]	; (8006ff4 <CSE_step+0x1604>)
 8006fa0:	00c9      	lsls	r1, r1, #3
 8006fa2:	4401      	add	r1, r0
 8006fa4:	e9c1 2300 	strd	r2, r3, [r1]
    CSE_DW.P[iAcol_0 + 2] = R[iAcol + 6];
 8006fa8:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006fac:	3306      	adds	r3, #6
 8006fae:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8006fb2:	1c91      	adds	r1, r2, #2
 8006fb4:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8006fb8:	00db      	lsls	r3, r3, #3
 8006fba:	4413      	add	r3, r2
 8006fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fc0:	480c      	ldr	r0, [pc, #48]	; (8006ff4 <CSE_step+0x1604>)
 8006fc2:	00c9      	lsls	r1, r1, #3
 8006fc4:	4401      	add	r1, r0
 8006fc6:	e9c1 2300 	strd	r2, r3, [r1]
    iAcol_0 += 3;
 8006fca:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006fce:	3303      	adds	r3, #3
 8006fd0:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
  for (iAcol = 0; iAcol < 3; iAcol++) {
 8006fd4:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006fd8:	3301      	adds	r3, #1
 8006fda:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8006fde:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006fe2:	2b02      	cmp	r3, #2
 8006fe4:	ddc0      	ble.n	8006f68 <CSE_step+0x1578>
  }
}
 8006fe6:	bf00      	nop
 8006fe8:	bf00      	nop
 8006fea:	f507 773d 	add.w	r7, r7, #756	; 0x2f4
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006ff4:	2001c0e8 	.word	0x2001c0e8

08006ff8 <CSE_initialize>:

void CSE_initialize(void)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	af00      	add	r7, sp, #0
  rt_InitInfAndNaN(sizeof(real_T));
 8006ffc:	2008      	movs	r0, #8
 8006ffe:	f005 ffe1 	bl	800cfc4 <rt_InitInfAndNaN>
  memcpy(&CSE_DW.P[0], &CSE_P.DataStoreMemoryP_InitialValue[0], 9U * sizeof
 8007002:	2248      	movs	r2, #72	; 0x48
 8007004:	490b      	ldr	r1, [pc, #44]	; (8007034 <CSE_initialize+0x3c>)
 8007006:	480c      	ldr	r0, [pc, #48]	; (8007038 <CSE_initialize+0x40>)
 8007008:	f014 f828 	bl	801b05c <memcpy>
         (real_T));
  CSE_DW.x[0] = CSE_P.DataStoreMemoryx_InitialValue[0];
 800700c:	4b0b      	ldr	r3, [pc, #44]	; (800703c <CSE_initialize+0x44>)
 800700e:	e9d3 23ae 	ldrd	r2, r3, [r3, #696]	; 0x2b8
 8007012:	4909      	ldr	r1, [pc, #36]	; (8007038 <CSE_initialize+0x40>)
 8007014:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
  CSE_DW.x[1] = CSE_P.DataStoreMemoryx_InitialValue[1];
 8007018:	4b08      	ldr	r3, [pc, #32]	; (800703c <CSE_initialize+0x44>)
 800701a:	e9d3 23b0 	ldrd	r2, r3, [r3, #704]	; 0x2c0
 800701e:	4906      	ldr	r1, [pc, #24]	; (8007038 <CSE_initialize+0x40>)
 8007020:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
  CSE_DW.x[2] = CSE_P.DataStoreMemoryx_InitialValue[2];
 8007024:	4b05      	ldr	r3, [pc, #20]	; (800703c <CSE_initialize+0x44>)
 8007026:	e9d3 23b2 	ldrd	r2, r3, [r3, #712]	; 0x2c8
 800702a:	4903      	ldr	r1, [pc, #12]	; (8007038 <CSE_initialize+0x40>)
 800702c:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
}
 8007030:	bf00      	nop
 8007032:	bd80      	pop	{r7, pc}
 8007034:	200002f8 	.word	0x200002f8
 8007038:	2001c0e8 	.word	0x2001c0e8
 800703c:	20000088 	.word	0x20000088

08007040 <SIM0_step>:
ExtU_SIM0_T SIM0_U;
ExtY_SIM0_T SIM0_Y;
static RT_MODEL_SIM0_T SIM0_M_;
RT_MODEL_SIM0_T *const SIM0_M = &SIM0_M_;
void SIM0_step(void)
{
 8007040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007044:	f5ad 5da0 	sub.w	sp, sp, #5120	; 0x1400
 8007048:	b087      	sub	sp, #28
 800704a:	af00      	add	r7, sp, #0
  int32_T i;
  int32_T iU;
  int32_T rtb_is_charge;
  boolean_T rtb_Logic_idx_0;
  boolean_T rtb_Logic_p_idx_0;
  rtb_Memory20 = SIM0_DW.Memory20_PreviousInput;
 800704c:	4b20      	ldr	r3, [pc, #128]	; (80070d0 <SIM0_step+0x90>)
 800704e:	f603 0308 	addw	r3, r3, #2056	; 0x808
 8007052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007056:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 800705a:	f101 0118 	add.w	r1, r1, #24
 800705e:	e9c1 2300 	strd	r2, r3, [r1]
  rtb_Exp = exp(SIM0_P.Cap_det / (SIM0_P.C_r * 3600.0) *
 8007062:	4b1c      	ldr	r3, [pc, #112]	; (80070d4 <SIM0_step+0x94>)
 8007064:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
 8007068:	4b1a      	ldr	r3, [pc, #104]	; (80070d4 <SIM0_step+0x94>)
 800706a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800706e:	a316      	add	r3, pc, #88	; (adr r3, 80070c8 <SIM0_step+0x88>)
 8007070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007074:	f7f9 fab2 	bl	80005dc <__aeabi_dmul>
 8007078:	4602      	mov	r2, r0
 800707a:	460b      	mov	r3, r1
 800707c:	4650      	mov	r0, sl
 800707e:	4659      	mov	r1, fp
 8007080:	f7f9 fbd6 	bl	8000830 <__aeabi_ddiv>
 8007084:	4602      	mov	r2, r0
 8007086:	460b      	mov	r3, r1
 8007088:	4610      	mov	r0, r2
 800708a:	4619      	mov	r1, r3
                SIM0_DW.Memory9_PreviousInput);
 800708c:	4b10      	ldr	r3, [pc, #64]	; (80070d0 <SIM0_step+0x90>)
 800708e:	f603 73f8 	addw	r3, r3, #4088	; 0xff8
 8007092:	e9d3 2300 	ldrd	r2, r3, [r3]
  rtb_Exp = exp(SIM0_P.Cap_det / (SIM0_P.C_r * 3600.0) *
 8007096:	f7f9 faa1 	bl	80005dc <__aeabi_dmul>
 800709a:	4602      	mov	r2, r0
 800709c:	460b      	mov	r3, r1
 800709e:	ec43 2b17 	vmov	d7, r2, r3
 80070a2:	eeb0 0a47 	vmov.f32	s0, s14
 80070a6:	eef0 0a67 	vmov.f32	s1, s15
 80070aa:	f014 f905 	bl	801b2b8 <exp>
 80070ae:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 80070b2:	f103 0308 	add.w	r3, r3, #8
 80070b6:	ed83 0b00 	vstr	d0, [r3]
  for (i = 0; i < 126; i++) {
 80070ba:	2300      	movs	r3, #0
 80070bc:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 80070c0:	f102 020c 	add.w	r2, r2, #12
 80070c4:	6013      	str	r3, [r2, #0]
 80070c6:	e243      	b.n	8007550 <SIM0_step+0x510>
 80070c8:	00000000 	.word	0x00000000
 80070cc:	40ac2000 	.word	0x40ac2000
 80070d0:	2001c148 	.word	0x2001c148
 80070d4:	20000360 	.word	0x20000360
    rtb_Memory15[i] = SIM0_DW.Memory15_PreviousInput[i];
 80070d8:	4aca      	ldr	r2, [pc, #808]	; (8007404 <SIM0_step+0x3c4>)
 80070da:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 80070de:	f103 030c 	add.w	r3, r3, #12
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	3305      	adds	r3, #5
 80070e6:	00db      	lsls	r3, r3, #3
 80070e8:	4413      	add	r3, r2
 80070ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ee:	f607 70c8 	addw	r0, r7, #4040	; 0xfc8
 80070f2:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 80070f6:	f101 010c 	add.w	r1, r1, #12
 80070fa:	6809      	ldr	r1, [r1, #0]
 80070fc:	00c9      	lsls	r1, r1, #3
 80070fe:	4401      	add	r1, r0
 8007100:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_Memory22 = SIM0_DW.Memory_PreviousInput[i] /
 8007104:	4abf      	ldr	r2, [pc, #764]	; (8007404 <SIM0_step+0x3c4>)
 8007106:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 800710a:	f103 030c 	add.w	r3, r3, #12
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f203 1303 	addw	r3, r3, #259	; 0x103
 8007114:	00db      	lsls	r3, r3, #3
 8007116:	4413      	add	r3, r2
 8007118:	e9d3 0100 	ldrd	r0, r1, [r3]
      SIM0_DW.Memory10_PreviousInput[i];
 800711c:	4ab9      	ldr	r2, [pc, #740]	; (8007404 <SIM0_step+0x3c4>)
 800711e:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8007122:	f103 030c 	add.w	r3, r3, #12
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f203 1381 	addw	r3, r3, #385	; 0x181
 800712c:	00db      	lsls	r3, r3, #3
 800712e:	4413      	add	r3, r2
 8007130:	e9d3 2300 	ldrd	r2, r3, [r3]
    rtb_Memory22 = SIM0_DW.Memory_PreviousInput[i] /
 8007134:	f7f9 fb7c 	bl	8000830 <__aeabi_ddiv>
 8007138:	4602      	mov	r2, r0
 800713a:	460b      	mov	r3, r1
 800713c:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 8007140:	f101 0108 	add.w	r1, r1, #8
 8007144:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_Product1_n = look1_binlxpw(rtb_Memory22, SIM0_P.soc, SIM0_P.Rs, 12U);
 8007148:	220c      	movs	r2, #12
 800714a:	49af      	ldr	r1, [pc, #700]	; (8007408 <SIM0_step+0x3c8>)
 800714c:	48af      	ldr	r0, [pc, #700]	; (800740c <SIM0_step+0x3cc>)
 800714e:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8007152:	f103 0308 	add.w	r3, r3, #8
 8007156:	ed93 0b00 	vldr	d0, [r3]
 800715a:	f003 fb41 	bl	800a7e0 <look1_binlxpw>
 800715e:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8007162:	ed83 0b00 	vstr	d0, [r3]
    rtb_is_drive = look1_binlxpw(rtb_Memory22, SIM0_P.soc, SIM0_P.tau, 12U);
 8007166:	220c      	movs	r2, #12
 8007168:	49a9      	ldr	r1, [pc, #676]	; (8007410 <SIM0_step+0x3d0>)
 800716a:	48a8      	ldr	r0, [pc, #672]	; (800740c <SIM0_step+0x3cc>)
 800716c:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8007170:	f103 0308 	add.w	r3, r3, #8
 8007174:	ed93 0b00 	vldr	d0, [r3]
 8007178:	f003 fb32 	bl	800a7e0 <look1_binlxpw>
 800717c:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8007180:	f103 0318 	add.w	r3, r3, #24
 8007184:	ed83 0b00 	vstr	d0, [r3]
    rtb_Product9 = rtb_Product1_n * rtb_is_drive;
 8007188:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 800718c:	f103 0318 	add.w	r3, r3, #24
 8007190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007194:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 8007198:	e9d1 0100 	ldrd	r0, r1, [r1]
 800719c:	f7f9 fa1e 	bl	80005dc <__aeabi_dmul>
 80071a0:	4602      	mov	r2, r0
 80071a2:	460b      	mov	r3, r1
 80071a4:	f507 519d 	add.w	r1, r7, #5024	; 0x13a0
 80071a8:	f101 0118 	add.w	r1, r1, #24
 80071ac:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_Product1_n = (rtb_Product1_n + look1_binlxpw(rtb_Memory22, SIM0_P.soc,
 80071b0:	220c      	movs	r2, #12
 80071b2:	4998      	ldr	r1, [pc, #608]	; (8007414 <SIM0_step+0x3d4>)
 80071b4:	4895      	ldr	r0, [pc, #596]	; (800740c <SIM0_step+0x3cc>)
 80071b6:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 80071ba:	f103 0308 	add.w	r3, r3, #8
 80071be:	ed93 0b00 	vldr	d0, [r3]
 80071c2:	f003 fb0d 	bl	800a7e0 <look1_binlxpw>
 80071c6:	ec51 0b10 	vmov	r0, r1, d0
 80071ca:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 80071ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071d2:	f7f9 f84d 	bl	8000270 <__adddf3>
 80071d6:	4602      	mov	r2, r0
 80071d8:	460b      	mov	r3, r1
 80071da:	4610      	mov	r0, r2
 80071dc:	4619      	mov	r1, r3
      SIM0_P.Rp, 12U)) * SIM0_P.Ts;
 80071de:	4b8e      	ldr	r3, [pc, #568]	; (8007418 <SIM0_step+0x3d8>)
 80071e0:	e9d3 233c 	ldrd	r2, r3, [r3, #240]	; 0xf0
    rtb_Product1_n = (rtb_Product1_n + look1_binlxpw(rtb_Memory22, SIM0_P.soc,
 80071e4:	f7f9 f9fa 	bl	80005dc <__aeabi_dmul>
 80071e8:	4602      	mov	r2, r0
 80071ea:	460b      	mov	r3, r1
 80071ec:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 80071f0:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_Product1_n = (((2.0 * rtb_Product9 + rtb_Product1_n) * rtb_Memory20 +
 80071f4:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 80071f8:	f103 0318 	add.w	r3, r3, #24
 80071fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007200:	4602      	mov	r2, r0
 8007202:	460b      	mov	r3, r1
 8007204:	f7f9 f834 	bl	8000270 <__adddf3>
 8007208:	4602      	mov	r2, r0
 800720a:	460b      	mov	r3, r1
 800720c:	4610      	mov	r0, r2
 800720e:	4619      	mov	r1, r3
 8007210:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8007214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007218:	f7f9 f82a 	bl	8000270 <__adddf3>
 800721c:	4602      	mov	r2, r0
 800721e:	460b      	mov	r3, r1
 8007220:	4610      	mov	r0, r2
 8007222:	4619      	mov	r1, r3
 8007224:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8007228:	f103 0318 	add.w	r3, r3, #24
 800722c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007230:	f7f9 f9d4 	bl	80005dc <__aeabi_dmul>
 8007234:	4602      	mov	r2, r0
 8007236:	460b      	mov	r3, r1
 8007238:	4692      	mov	sl, r2
 800723a:	469b      	mov	fp, r3
                       (rtb_Product1_n - 2.0 * rtb_Product9) *
 800723c:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 8007240:	f103 0318 	add.w	r3, r3, #24
 8007244:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007248:	4602      	mov	r2, r0
 800724a:	460b      	mov	r3, r1
 800724c:	f7f9 f810 	bl	8000270 <__adddf3>
 8007250:	4602      	mov	r2, r0
 8007252:	460b      	mov	r3, r1
 8007254:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 8007258:	e9d1 0100 	ldrd	r0, r1, [r1]
 800725c:	f7f9 f806 	bl	800026c <__aeabi_dsub>
 8007260:	4602      	mov	r2, r0
 8007262:	460b      	mov	r3, r1
 8007264:	4610      	mov	r0, r2
 8007266:	4619      	mov	r1, r3
                       SIM0_DW.Memory11_PreviousInput) - (SIM0_P.Ts - 2.0 *
 8007268:	4b66      	ldr	r3, [pc, #408]	; (8007404 <SIM0_step+0x3c4>)
 800726a:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 800726e:	e9d3 2300 	ldrd	r2, r3, [r3]
                       (rtb_Product1_n - 2.0 * rtb_Product9) *
 8007272:	f7f9 f9b3 	bl	80005dc <__aeabi_dmul>
 8007276:	4602      	mov	r2, r0
 8007278:	460b      	mov	r3, r1
    rtb_Product1_n = (((2.0 * rtb_Product9 + rtb_Product1_n) * rtb_Memory20 +
 800727a:	4650      	mov	r0, sl
 800727c:	4659      	mov	r1, fp
 800727e:	f7f8 fff7 	bl	8000270 <__adddf3>
 8007282:	4602      	mov	r2, r0
 8007284:	460b      	mov	r3, r1
 8007286:	e9c7 2300 	strd	r2, r3, [r7]
                       SIM0_DW.Memory11_PreviousInput) - (SIM0_P.Ts - 2.0 *
 800728a:	4b63      	ldr	r3, [pc, #396]	; (8007418 <SIM0_step+0x3d8>)
 800728c:	e9d3 ab3c 	ldrd	sl, fp, [r3, #240]	; 0xf0
 8007290:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8007294:	f103 0318 	add.w	r3, r3, #24
 8007298:	e9d3 0100 	ldrd	r0, r1, [r3]
 800729c:	4602      	mov	r2, r0
 800729e:	460b      	mov	r3, r1
 80072a0:	f7f8 ffe6 	bl	8000270 <__adddf3>
 80072a4:	4602      	mov	r2, r0
 80072a6:	460b      	mov	r3, r1
 80072a8:	4650      	mov	r0, sl
 80072aa:	4659      	mov	r1, fp
 80072ac:	f7f8 ffde 	bl	800026c <__aeabi_dsub>
 80072b0:	4602      	mov	r2, r0
 80072b2:	460b      	mov	r3, r1
 80072b4:	4610      	mov	r0, r2
 80072b6:	4619      	mov	r1, r3
      rtb_is_drive) * SIM0_DW.Memory12_PreviousInput[i]) / (2.0 * rtb_is_drive +
 80072b8:	4a52      	ldr	r2, [pc, #328]	; (8007404 <SIM0_step+0x3c4>)
 80072ba:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 80072be:	f103 030c 	add.w	r3, r3, #12
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	3383      	adds	r3, #131	; 0x83
 80072c6:	00db      	lsls	r3, r3, #3
 80072c8:	4413      	add	r3, r2
 80072ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ce:	f7f9 f985 	bl	80005dc <__aeabi_dmul>
 80072d2:	4602      	mov	r2, r0
 80072d4:	460b      	mov	r3, r1
                       SIM0_DW.Memory11_PreviousInput) - (SIM0_P.Ts - 2.0 *
 80072d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80072da:	f7f8 ffc7 	bl	800026c <__aeabi_dsub>
 80072de:	4602      	mov	r2, r0
 80072e0:	460b      	mov	r3, r1
 80072e2:	4692      	mov	sl, r2
 80072e4:	469b      	mov	fp, r3
      rtb_is_drive) * SIM0_DW.Memory12_PreviousInput[i]) / (2.0 * rtb_is_drive +
 80072e6:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 80072ea:	f103 0318 	add.w	r3, r3, #24
 80072ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80072f2:	4602      	mov	r2, r0
 80072f4:	460b      	mov	r3, r1
 80072f6:	f7f8 ffbb 	bl	8000270 <__adddf3>
 80072fa:	4602      	mov	r2, r0
 80072fc:	460b      	mov	r3, r1
 80072fe:	4610      	mov	r0, r2
 8007300:	4619      	mov	r1, r3
      SIM0_P.Ts);
 8007302:	4b45      	ldr	r3, [pc, #276]	; (8007418 <SIM0_step+0x3d8>)
 8007304:	e9d3 233c 	ldrd	r2, r3, [r3, #240]	; 0xf0
      rtb_is_drive) * SIM0_DW.Memory12_PreviousInput[i]) / (2.0 * rtb_is_drive +
 8007308:	f7f8 ffb2 	bl	8000270 <__adddf3>
 800730c:	4602      	mov	r2, r0
 800730e:	460b      	mov	r3, r1
    rtb_Product1_n = (((2.0 * rtb_Product9 + rtb_Product1_n) * rtb_Memory20 +
 8007310:	4650      	mov	r0, sl
 8007312:	4659      	mov	r1, fp
 8007314:	f7f9 fa8c 	bl	8000830 <__aeabi_ddiv>
 8007318:	4602      	mov	r2, r0
 800731a:	460b      	mov	r3, r1
 800731c:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 8007320:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_is_drive = rtb_Product1_n + look1_binlxpw(rtb_Memory22, SIM0_P.soc,
 8007324:	220c      	movs	r2, #12
 8007326:	493d      	ldr	r1, [pc, #244]	; (800741c <SIM0_step+0x3dc>)
 8007328:	4838      	ldr	r0, [pc, #224]	; (800740c <SIM0_step+0x3cc>)
 800732a:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 800732e:	f103 0308 	add.w	r3, r3, #8
 8007332:	ed93 0b00 	vldr	d0, [r3]
 8007336:	f003 fa53 	bl	800a7e0 <look1_binlxpw>
 800733a:	ec53 2b10 	vmov	r2, r3, d0
 800733e:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 8007342:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007346:	f7f8 ff93 	bl	8000270 <__adddf3>
 800734a:	4602      	mov	r2, r0
 800734c:	460b      	mov	r3, r1
 800734e:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 8007352:	f101 0118 	add.w	r1, r1, #24
 8007356:	e9c1 2300 	strd	r2, r3, [r1]
      SIM0_P.ocv, 12U);
    SIM0_Y.cell_voltages[i] = rtb_is_drive;
 800735a:	4a31      	ldr	r2, [pc, #196]	; (8007420 <SIM0_step+0x3e0>)
 800735c:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8007360:	f103 030c 	add.w	r3, r3, #12
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	3308      	adds	r3, #8
 8007368:	00db      	lsls	r3, r3, #3
 800736a:	18d1      	adds	r1, r2, r3
 800736c:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8007370:	f103 0318 	add.w	r3, r3, #24
 8007374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007378:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_Y.cell_socs[i] = rtb_Memory22;
 800737c:	4a28      	ldr	r2, [pc, #160]	; (8007420 <SIM0_step+0x3e0>)
 800737e:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8007382:	f103 030c 	add.w	r3, r3, #12
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	3386      	adds	r3, #134	; 0x86
 800738a:	00db      	lsls	r3, r3, #3
 800738c:	18d1      	adds	r1, r2, r3
 800738e:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8007392:	f103 0308 	add.w	r3, r3, #8
 8007396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800739a:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_Y.cell_capacities[i] = SIM0_DW.Memory10_PreviousInput[i];
 800739e:	4a19      	ldr	r2, [pc, #100]	; (8007404 <SIM0_step+0x3c4>)
 80073a0:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 80073a4:	f103 030c 	add.w	r3, r3, #12
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f203 1381 	addw	r3, r3, #385	; 0x181
 80073ae:	00db      	lsls	r3, r3, #3
 80073b0:	4413      	add	r3, r2
 80073b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073b6:	481a      	ldr	r0, [pc, #104]	; (8007420 <SIM0_step+0x3e0>)
 80073b8:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 80073bc:	f101 010c 	add.w	r1, r1, #12
 80073c0:	6809      	ldr	r1, [r1, #0]
 80073c2:	f501 7182 	add.w	r1, r1, #260	; 0x104
 80073c6:	00c9      	lsls	r1, r1, #3
 80073c8:	4401      	add	r1, r0
 80073ca:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_Memory21[i] = SIM0_DW.Memory10_PreviousInput[i] * rtb_Exp;
 80073ce:	4a0d      	ldr	r2, [pc, #52]	; (8007404 <SIM0_step+0x3c4>)
 80073d0:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 80073d4:	f103 030c 	add.w	r3, r3, #12
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f203 1381 	addw	r3, r3, #385	; 0x181
 80073de:	00db      	lsls	r3, r3, #3
 80073e0:	4413      	add	r3, r2
 80073e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80073e6:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 80073ea:	f103 0308 	add.w	r3, r3, #8
 80073ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073f2:	f7f9 f8f3 	bl	80005dc <__aeabi_dmul>
 80073f6:	4602      	mov	r2, r0
 80073f8:	460b      	mov	r3, r1
 80073fa:	f507 60fd 	add.w	r0, r7, #2024	; 0x7e8
 80073fe:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 8007402:	e00f      	b.n	8007424 <SIM0_step+0x3e4>
 8007404:	2001c148 	.word	0x2001c148
 8007408:	200003e8 	.word	0x200003e8
 800740c:	20000e80 	.word	0x20000e80
 8007410:	20000ee8 	.word	0x20000ee8
 8007414:	20000380 	.word	0x20000380
 8007418:	20000360 	.word	0x20000360
 800741c:	20000e18 	.word	0x20000e18
 8007420:	2001d9a8 	.word	0x2001d9a8
 8007424:	f101 010c 	add.w	r1, r1, #12
 8007428:	6809      	ldr	r1, [r1, #0]
 800742a:	00c9      	lsls	r1, r1, #3
 800742c:	4401      	add	r1, r0
 800742e:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_Rsz[i] = rtb_Product1_n;
 8007432:	f107 0318 	add.w	r3, r7, #24
 8007436:	3b10      	subs	r3, #16
 8007438:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 800743c:	f102 020c 	add.w	r2, r2, #12
 8007440:	6812      	ldr	r2, [r2, #0]
 8007442:	00d2      	lsls	r2, r2, #3
 8007444:	1899      	adds	r1, r3, r2
 8007446:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 800744a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800744e:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_Rpz[i] = (SIM0_DW.Memory21_PreviousInput[i] / SIM0_P.R_short
 8007452:	4aa2      	ldr	r2, [pc, #648]	; (80076dc <SIM0_step+0x69c>)
 8007454:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8007458:	f103 030c 	add.w	r3, r3, #12
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8007462:	00db      	lsls	r3, r3, #3
 8007464:	4413      	add	r3, r2
 8007466:	e9d3 0100 	ldrd	r0, r1, [r3]
 800746a:	4b9d      	ldr	r3, [pc, #628]	; (80076e0 <SIM0_step+0x6a0>)
 800746c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8007470:	f7f9 f9de 	bl	8000830 <__aeabi_ddiv>
 8007474:	4602      	mov	r2, r0
 8007476:	460b      	mov	r3, r1
 8007478:	4610      	mov	r0, r2
 800747a:	4619      	mov	r1, r3
                  * SIM0_DW.Memory19_PreviousInput[i] * SIM0_P.Gain_Gain +
 800747c:	4a97      	ldr	r2, [pc, #604]	; (80076dc <SIM0_step+0x69c>)
 800747e:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8007482:	f103 030c 	add.w	r3, r3, #12
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800748c:	00db      	lsls	r3, r3, #3
 800748e:	4413      	add	r3, r2
 8007490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007494:	f7f9 f8a2 	bl	80005dc <__aeabi_dmul>
 8007498:	4602      	mov	r2, r0
 800749a:	460b      	mov	r3, r1
 800749c:	4610      	mov	r0, r2
 800749e:	4619      	mov	r1, r3
 80074a0:	4b8f      	ldr	r3, [pc, #572]	; (80076e0 <SIM0_step+0x6a0>)
 80074a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074a6:	3318      	adds	r3, #24
 80074a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ac:	f7f9 f896 	bl	80005dc <__aeabi_dmul>
 80074b0:	4602      	mov	r2, r0
 80074b2:	460b      	mov	r3, r1
 80074b4:	4610      	mov	r0, r2
 80074b6:	4619      	mov	r1, r3
 80074b8:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 80074bc:	f103 0318 	add.w	r3, r3, #24
 80074c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074c4:	f7f8 fed4 	bl	8000270 <__adddf3>
 80074c8:	4602      	mov	r2, r0
 80074ca:	460b      	mov	r3, r1
 80074cc:	4610      	mov	r0, r2
 80074ce:	4619      	mov	r1, r3
                  rtb_Memory20) * SIM0_P.Ts + SIM0_DW.Memory_PreviousInput[i];
 80074d0:	4b83      	ldr	r3, [pc, #524]	; (80076e0 <SIM0_step+0x6a0>)
 80074d2:	e9d3 233c 	ldrd	r2, r3, [r3, #240]	; 0xf0
 80074d6:	f7f9 f881 	bl	80005dc <__aeabi_dmul>
 80074da:	4602      	mov	r2, r0
 80074dc:	460b      	mov	r3, r1
 80074de:	4610      	mov	r0, r2
 80074e0:	4619      	mov	r1, r3
 80074e2:	4a7e      	ldr	r2, [pc, #504]	; (80076dc <SIM0_step+0x69c>)
 80074e4:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 80074e8:	f103 030c 	add.w	r3, r3, #12
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f203 1303 	addw	r3, r3, #259	; 0x103
 80074f2:	00db      	lsls	r3, r3, #3
 80074f4:	4413      	add	r3, r2
 80074f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074fa:	f7f8 feb9 	bl	8000270 <__adddf3>
 80074fe:	4602      	mov	r2, r0
 8007500:	460b      	mov	r3, r1
    rtb_Rpz[i] = (SIM0_DW.Memory21_PreviousInput[i] / SIM0_P.R_short
 8007502:	f507 707e 	add.w	r0, r7, #1016	; 0x3f8
 8007506:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 800750a:	f101 010c 	add.w	r1, r1, #12
 800750e:	6809      	ldr	r1, [r1, #0]
 8007510:	00c9      	lsls	r1, r1, #3
 8007512:	4401      	add	r1, r0
 8007514:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_Memory19[i] = rtb_is_drive;
 8007518:	f607 32d8 	addw	r2, r7, #3032	; 0xbd8
 800751c:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8007520:	f103 030c 	add.w	r3, r3, #12
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	00db      	lsls	r3, r3, #3
 8007528:	18d1      	adds	r1, r2, r3
 800752a:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 800752e:	f103 0318 	add.w	r3, r3, #24
 8007532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007536:	e9c1 2300 	strd	r2, r3, [r1]
  for (i = 0; i < 126; i++) {
 800753a:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 800753e:	f103 030c 	add.w	r3, r3, #12
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	3301      	adds	r3, #1
 8007546:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 800754a:	f102 020c 	add.w	r2, r2, #12
 800754e:	6013      	str	r3, [r2, #0]
 8007550:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8007554:	f103 030c 	add.w	r3, r3, #12
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	2b7d      	cmp	r3, #125	; 0x7d
 800755c:	f77f adbc 	ble.w	80070d8 <SIM0_step+0x98>
  }

  boolean_T rtb_Logic_idx_1;
  i = (int32_T)(((((uint32_T)(SIM0_DW.Memory1_PreviousInput != 0.0) << 1) +
 8007560:	4b5e      	ldr	r3, [pc, #376]	; (80076dc <SIM0_step+0x69c>)
 8007562:	f503 53bf 	add.w	r3, r3, #6112	; 0x17e0
 8007566:	e9d3 0100 	ldrd	r0, r1, [r3]
 800756a:	f04f 0200 	mov.w	r2, #0
 800756e:	f04f 0300 	mov.w	r3, #0
 8007572:	f7f9 fa9b 	bl	8000aac <__aeabi_dcmpeq>
 8007576:	4603      	mov	r3, r0
 8007578:	2b00      	cmp	r3, #0
 800757a:	d101      	bne.n	8007580 <SIM0_step+0x540>
 800757c:	2602      	movs	r6, #2
 800757e:	e000      	b.n	8007582 <SIM0_step+0x542>
 8007580:	2600      	movs	r6, #0
                  (SIM0_DW.Memory2_PreviousInput != 0.0)) << 1) +
 8007582:	4b56      	ldr	r3, [pc, #344]	; (80076dc <SIM0_step+0x69c>)
 8007584:	f503 53bf 	add.w	r3, r3, #6112	; 0x17e0
 8007588:	3308      	adds	r3, #8
 800758a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800758e:	2301      	movs	r3, #1
 8007590:	469a      	mov	sl, r3
 8007592:	f04f 0200 	mov.w	r2, #0
 8007596:	f04f 0300 	mov.w	r3, #0
 800759a:	f7f9 fa87 	bl	8000aac <__aeabi_dcmpeq>
 800759e:	4603      	mov	r3, r0
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d001      	beq.n	80075a8 <SIM0_step+0x568>
 80075a4:	2300      	movs	r3, #0
 80075a6:	469a      	mov	sl, r3
 80075a8:	fa5f f38a 	uxtb.w	r3, sl
  i = (int32_T)(((((uint32_T)(SIM0_DW.Memory1_PreviousInput != 0.0) << 1) +
 80075ac:	4433      	add	r3, r6
                  (SIM0_DW.Memory2_PreviousInput != 0.0)) << 1) +
 80075ae:	005a      	lsls	r2, r3, #1
                SIM0_DW.Memory_PreviousInput_m);
 80075b0:	4b4a      	ldr	r3, [pc, #296]	; (80076dc <SIM0_step+0x69c>)
 80075b2:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 80075b6:	3318      	adds	r3, #24
 80075b8:	781b      	ldrb	r3, [r3, #0]
                  (SIM0_DW.Memory2_PreviousInput != 0.0)) << 1) +
 80075ba:	4413      	add	r3, r2
  i = (int32_T)(((((uint32_T)(SIM0_DW.Memory1_PreviousInput != 0.0) << 1) +
 80075bc:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 80075c0:	f102 020c 	add.w	r2, r2, #12
 80075c4:	6013      	str	r3, [r2, #0]
  rtb_Logic_idx_0 = SIM0_P.Logic_table[(uint32_T)i];
 80075c6:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 80075ca:	f103 030c 	add.w	r3, r3, #12
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4a43      	ldr	r2, [pc, #268]	; (80076e0 <SIM0_step+0x6a0>)
 80075d2:	4413      	add	r3, r2
 80075d4:	f503 5385 	add.w	r3, r3, #4256	; 0x10a0
 80075d8:	3318      	adds	r3, #24
 80075da:	781b      	ldrb	r3, [r3, #0]
 80075dc:	f507 529e 	add.w	r2, r7, #5056	; 0x13c0
 80075e0:	f102 0217 	add.w	r2, r2, #23
 80075e4:	7013      	strb	r3, [r2, #0]
  rtb_Logic_idx_1 = SIM0_P.Logic_table[i + 8U];
 80075e6:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 80075ea:	f103 030c 	add.w	r3, r3, #12
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	3308      	adds	r3, #8
 80075f2:	4a3b      	ldr	r2, [pc, #236]	; (80076e0 <SIM0_step+0x6a0>)
 80075f4:	4413      	add	r3, r2
 80075f6:	f503 5385 	add.w	r3, r3, #4256	; 0x10a0
 80075fa:	3318      	adds	r3, #24
 80075fc:	781b      	ldrb	r3, [r3, #0]
 80075fe:	f507 529e 	add.w	r2, r7, #5056	; 0x13c0
 8007602:	f102 0216 	add.w	r2, r2, #22
 8007606:	7013      	strb	r3, [r2, #0]
  SIM0_Y.AMS_error_latched = rtb_Logic_idx_0;
 8007608:	4a36      	ldr	r2, [pc, #216]	; (80076e4 <SIM0_step+0x6a4>)
 800760a:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 800760e:	f103 0317 	add.w	r3, r3, #23
 8007612:	781b      	ldrb	r3, [r3, #0]
 8007614:	7013      	strb	r3, [r2, #0]
  i = (int32_T)(((((uint32_T)(SIM0_DW.Memory3_PreviousInput != 0.0) << 1) +
 8007616:	4b31      	ldr	r3, [pc, #196]	; (80076dc <SIM0_step+0x69c>)
 8007618:	f503 53bf 	add.w	r3, r3, #6112	; 0x17e0
 800761c:	3310      	adds	r3, #16
 800761e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007622:	f04f 0200 	mov.w	r2, #0
 8007626:	f04f 0300 	mov.w	r3, #0
 800762a:	f7f9 fa3f 	bl	8000aac <__aeabi_dcmpeq>
 800762e:	4603      	mov	r3, r0
 8007630:	2b00      	cmp	r3, #0
 8007632:	d101      	bne.n	8007638 <SIM0_step+0x5f8>
 8007634:	2602      	movs	r6, #2
 8007636:	e000      	b.n	800763a <SIM0_step+0x5fa>
 8007638:	2600      	movs	r6, #0
                  (SIM0_DW.Memory4_PreviousInput != 0.0)) << 1) +
 800763a:	4b28      	ldr	r3, [pc, #160]	; (80076dc <SIM0_step+0x69c>)
 800763c:	f503 53bf 	add.w	r3, r3, #6112	; 0x17e0
 8007640:	3318      	adds	r3, #24
 8007642:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007646:	2301      	movs	r3, #1
 8007648:	469a      	mov	sl, r3
 800764a:	f04f 0200 	mov.w	r2, #0
 800764e:	f04f 0300 	mov.w	r3, #0
 8007652:	f7f9 fa2b 	bl	8000aac <__aeabi_dcmpeq>
 8007656:	4603      	mov	r3, r0
 8007658:	2b00      	cmp	r3, #0
 800765a:	d001      	beq.n	8007660 <SIM0_step+0x620>
 800765c:	2300      	movs	r3, #0
 800765e:	469a      	mov	sl, r3
 8007660:	fa5f f38a 	uxtb.w	r3, sl
  i = (int32_T)(((((uint32_T)(SIM0_DW.Memory3_PreviousInput != 0.0) << 1) +
 8007664:	4433      	add	r3, r6
                  (SIM0_DW.Memory4_PreviousInput != 0.0)) << 1) +
 8007666:	005a      	lsls	r2, r3, #1
                SIM0_DW.Memory_PreviousInput_c);
 8007668:	4b1c      	ldr	r3, [pc, #112]	; (80076dc <SIM0_step+0x69c>)
 800766a:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 800766e:	3319      	adds	r3, #25
 8007670:	781b      	ldrb	r3, [r3, #0]
                  (SIM0_DW.Memory4_PreviousInput != 0.0)) << 1) +
 8007672:	4413      	add	r3, r2
  i = (int32_T)(((((uint32_T)(SIM0_DW.Memory3_PreviousInput != 0.0) << 1) +
 8007674:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 8007678:	f102 020c 	add.w	r2, r2, #12
 800767c:	6013      	str	r3, [r2, #0]
  rtb_Logic_p_idx_0 = SIM0_P.Logic_table_p[(uint32_T)i];
 800767e:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8007682:	f103 030c 	add.w	r3, r3, #12
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a15      	ldr	r2, [pc, #84]	; (80076e0 <SIM0_step+0x6a0>)
 800768a:	4413      	add	r3, r2
 800768c:	f503 5386 	add.w	r3, r3, #4288	; 0x10c0
 8007690:	3308      	adds	r3, #8
 8007692:	781b      	ldrb	r3, [r3, #0]
 8007694:	f507 529e 	add.w	r2, r7, #5056	; 0x13c0
 8007698:	f102 0215 	add.w	r2, r2, #21
 800769c:	7013      	strb	r3, [r2, #0]
  SIM0_Y.IMD_error_latched = rtb_Logic_p_idx_0;
 800769e:	4a11      	ldr	r2, [pc, #68]	; (80076e4 <SIM0_step+0x6a4>)
 80076a0:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 80076a4:	f103 0315 	add.w	r3, r3, #21
 80076a8:	781b      	ldrb	r3, [r3, #0]
 80076aa:	7053      	strb	r3, [r2, #1]
  rtb_Memory22 = (rtb_Logic_idx_1 ? (real_T)SIM0_P.Logic_table_p[i + 8U] : 0.0) *
 80076ac:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 80076b0:	f103 0316 	add.w	r3, r3, #22
 80076b4:	781b      	ldrb	r3, [r3, #0]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d016      	beq.n	80076e8 <SIM0_step+0x6a8>
 80076ba:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 80076be:	f103 030c 	add.w	r3, r3, #12
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	3308      	adds	r3, #8
 80076c6:	4a06      	ldr	r2, [pc, #24]	; (80076e0 <SIM0_step+0x6a0>)
 80076c8:	4413      	add	r3, r2
 80076ca:	f503 5386 	add.w	r3, r3, #4288	; 0x10c0
 80076ce:	3308      	adds	r3, #8
 80076d0:	781b      	ldrb	r3, [r3, #0]
 80076d2:	4618      	mov	r0, r3
 80076d4:	f7f8 ff08 	bl	80004e8 <__aeabi_ui2d>
 80076d8:	e00a      	b.n	80076f0 <SIM0_step+0x6b0>
 80076da:	bf00      	nop
 80076dc:	2001c148 	.word	0x2001c148
 80076e0:	20000360 	.word	0x20000360
 80076e4:	2001d9a8 	.word	0x2001d9a8
 80076e8:	f04f 0000 	mov.w	r0, #0
 80076ec:	f04f 0100 	mov.w	r1, #0
    SIM0_DW.Memory5_PreviousInput;
 80076f0:	4bba      	ldr	r3, [pc, #744]	; (80079dc <SIM0_step+0x99c>)
 80076f2:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 80076f6:	e9d3 2300 	ldrd	r2, r3, [r3]
  rtb_Memory22 = (rtb_Logic_idx_1 ? (real_T)SIM0_P.Logic_table_p[i + 8U] : 0.0) *
 80076fa:	f7f8 ff6f 	bl	80005dc <__aeabi_dmul>
 80076fe:	4602      	mov	r2, r0
 8007700:	460b      	mov	r3, r1
 8007702:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 8007706:	f101 0108 	add.w	r1, r1, #8
 800770a:	e9c1 2300 	strd	r2, r3, [r1]
  SIM0_Y.SC_probe = rtb_Memory22;
 800770e:	49b4      	ldr	r1, [pc, #720]	; (80079e0 <SIM0_step+0x9a0>)
 8007710:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8007714:	f103 0308 	add.w	r3, r3, #8
 8007718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800771c:	e9c1 2302 	strd	r2, r3, [r1, #8]
  rtb_Exp = rtb_Memory22 * SIM0_DW.Delay1_DSTATE;
 8007720:	4bae      	ldr	r3, [pc, #696]	; (80079dc <SIM0_step+0x99c>)
 8007722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007726:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 800772a:	f101 0108 	add.w	r1, r1, #8
 800772e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007732:	f7f8 ff53 	bl	80005dc <__aeabi_dmul>
 8007736:	4602      	mov	r2, r0
 8007738:	460b      	mov	r3, r1
 800773a:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 800773e:	f101 0108 	add.w	r1, r1, #8
 8007742:	e9c1 2300 	strd	r2, r3, [r1]
  SIM0_Y.precharge_closed = rtb_Exp;
 8007746:	49a6      	ldr	r1, [pc, #664]	; (80079e0 <SIM0_step+0x9a0>)
 8007748:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 800774c:	f103 0308 	add.w	r3, r3, #8
 8007750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007754:	e9c1 2308 	strd	r2, r3, [r1, #32]
  rtb_Product1_n = rtb_Memory22 * SIM0_DW.Delay2_DSTATE[0];
 8007758:	4ba0      	ldr	r3, [pc, #640]	; (80079dc <SIM0_step+0x99c>)
 800775a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800775e:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 8007762:	f101 0108 	add.w	r1, r1, #8
 8007766:	e9d1 0100 	ldrd	r0, r1, [r1]
 800776a:	f7f8 ff37 	bl	80005dc <__aeabi_dmul>
 800776e:	4602      	mov	r2, r0
 8007770:	460b      	mov	r3, r1
 8007772:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 8007776:	e9c1 2300 	strd	r2, r3, [r1]
  rtb_Memory22 *= SIM0_DW.Delay3_DSTATE[0];
 800777a:	4b98      	ldr	r3, [pc, #608]	; (80079dc <SIM0_step+0x99c>)
 800777c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8007780:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 8007784:	f101 0108 	add.w	r1, r1, #8
 8007788:	e9d1 0100 	ldrd	r0, r1, [r1]
 800778c:	f7f8 ff26 	bl	80005dc <__aeabi_dmul>
 8007790:	4602      	mov	r2, r0
 8007792:	460b      	mov	r3, r1
 8007794:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 8007798:	f101 0108 	add.w	r1, r1, #8
 800779c:	e9c1 2300 	strd	r2, r3, [r1]
  i = 1;
 80077a0:	2301      	movs	r3, #1
 80077a2:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 80077a6:	f102 020c 	add.w	r2, r2, #12
 80077aa:	6013      	str	r3, [r2, #0]
  rtb_is_charge = 0;
 80077ac:	2300      	movs	r3, #0
 80077ae:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 80077b2:	f102 0204 	add.w	r2, r2, #4
 80077b6:	6013      	str	r3, [r2, #0]
  rtb_is_drive = 0.0;
 80077b8:	f04f 0200 	mov.w	r2, #0
 80077bc:	f04f 0300 	mov.w	r3, #0
 80077c0:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 80077c4:	f101 0118 	add.w	r1, r1, #24
 80077c8:	e9c1 2300 	strd	r2, r3, [r1]
  if (SIM0_DW.Memory6_PreviousInput != 0.0) {
 80077cc:	4b83      	ldr	r3, [pc, #524]	; (80079dc <SIM0_step+0x99c>)
 80077ce:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 80077d2:	3308      	adds	r3, #8
 80077d4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80077d8:	f04f 0200 	mov.w	r2, #0
 80077dc:	f04f 0300 	mov.w	r3, #0
 80077e0:	f7f9 f964 	bl	8000aac <__aeabi_dcmpeq>
 80077e4:	4603      	mov	r3, r0
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d10c      	bne.n	8007804 <SIM0_step+0x7c4>
    i = 2;
 80077ea:	2302      	movs	r3, #2
 80077ec:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 80077f0:	f102 020c 	add.w	r2, r2, #12
 80077f4:	6013      	str	r3, [r2, #0]
    rtb_is_charge = 1;
 80077f6:	2301      	movs	r3, #1
 80077f8:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 80077fc:	f102 0204 	add.w	r2, r2, #4
 8007800:	6013      	str	r3, [r2, #0]
 8007802:	e01d      	b.n	8007840 <SIM0_step+0x800>
  } else if (SIM0_DW.Memory7_PreviousInput != 0.0) {
 8007804:	4b75      	ldr	r3, [pc, #468]	; (80079dc <SIM0_step+0x99c>)
 8007806:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 800780a:	3310      	adds	r3, #16
 800780c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007810:	f04f 0200 	mov.w	r2, #0
 8007814:	f04f 0300 	mov.w	r3, #0
 8007818:	f7f9 f948 	bl	8000aac <__aeabi_dcmpeq>
 800781c:	4603      	mov	r3, r0
 800781e:	2b00      	cmp	r3, #0
 8007820:	d10e      	bne.n	8007840 <SIM0_step+0x800>
    i = 3;
 8007822:	2303      	movs	r3, #3
 8007824:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 8007828:	f102 020c 	add.w	r2, r2, #12
 800782c:	6013      	str	r3, [r2, #0]
    rtb_is_drive = 1.0;
 800782e:	f04f 0200 	mov.w	r2, #0
 8007832:	4b6c      	ldr	r3, [pc, #432]	; (80079e4 <SIM0_step+0x9a4>)
 8007834:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 8007838:	f101 0118 	add.w	r1, r1, #24
 800783c:	e9c1 2300 	strd	r2, r3, [r1]
  }

  rtb_Product9 = rtb_Memory22 * rtb_Product1_n;
 8007840:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8007844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007848:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 800784c:	f101 0108 	add.w	r1, r1, #8
 8007850:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007854:	f7f8 fec2 	bl	80005dc <__aeabi_dmul>
 8007858:	4602      	mov	r2, r0
 800785a:	460b      	mov	r3, r1
 800785c:	f507 519d 	add.w	r1, r7, #5024	; 0x13a0
 8007860:	f101 0118 	add.w	r1, r1, #24
 8007864:	e9c1 2300 	strd	r2, r3, [r1]
  rtb_is_drive = rtb_is_drive * SIM0_DW.Memory22_PreviousInput * rtb_Product9;
 8007868:	4b5c      	ldr	r3, [pc, #368]	; (80079dc <SIM0_step+0x99c>)
 800786a:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 800786e:	3318      	adds	r3, #24
 8007870:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007874:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8007878:	f103 0318 	add.w	r3, r3, #24
 800787c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007880:	f7f8 feac 	bl	80005dc <__aeabi_dmul>
 8007884:	4602      	mov	r2, r0
 8007886:	460b      	mov	r3, r1
 8007888:	f507 519d 	add.w	r1, r7, #5024	; 0x13a0
 800788c:	f101 0118 	add.w	r1, r1, #24
 8007890:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007894:	f7f8 fea2 	bl	80005dc <__aeabi_dmul>
 8007898:	4602      	mov	r2, r0
 800789a:	460b      	mov	r3, r1
 800789c:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 80078a0:	f101 0118 	add.w	r1, r1, #24
 80078a4:	e9c1 2300 	strd	r2, r3, [r1]
  rtb_y = rtb_Memory15[0];
 80078a8:	f607 73c8 	addw	r3, r7, #4040	; 0xfc8
 80078ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078b0:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 80078b4:	f101 0110 	add.w	r1, r1, #16
 80078b8:	e9c1 2300 	strd	r2, r3, [r1]
  for (iU = 0; iU < 125; iU++) {
 80078bc:	2300      	movs	r3, #0
 80078be:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 80078c2:	f102 0208 	add.w	r2, r2, #8
 80078c6:	6013      	str	r3, [r2, #0]
 80078c8:	e026      	b.n	8007918 <SIM0_step+0x8d8>
    rtb_y += rtb_Memory15[iU + 1];
 80078ca:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 80078ce:	f103 0308 	add.w	r3, r3, #8
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	3301      	adds	r3, #1
 80078d6:	f607 72c8 	addw	r2, r7, #4040	; 0xfc8
 80078da:	00db      	lsls	r3, r3, #3
 80078dc:	4413      	add	r3, r2
 80078de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078e2:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 80078e6:	f101 0110 	add.w	r1, r1, #16
 80078ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 80078ee:	f7f8 fcbf 	bl	8000270 <__adddf3>
 80078f2:	4602      	mov	r2, r0
 80078f4:	460b      	mov	r3, r1
 80078f6:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 80078fa:	f101 0110 	add.w	r1, r1, #16
 80078fe:	e9c1 2300 	strd	r2, r3, [r1]
  for (iU = 0; iU < 125; iU++) {
 8007902:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8007906:	f103 0308 	add.w	r3, r3, #8
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	3301      	adds	r3, #1
 800790e:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 8007912:	f102 0208 	add.w	r2, r2, #8
 8007916:	6013      	str	r3, [r2, #0]
 8007918:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 800791c:	f103 0308 	add.w	r3, r3, #8
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	2b7c      	cmp	r3, #124	; 0x7c
 8007924:	ddd1      	ble.n	80078ca <SIM0_step+0x88a>
  }

  if (SIM0_DW.Memory16_PreviousInput != 0.0) {
 8007926:	4b2d      	ldr	r3, [pc, #180]	; (80079dc <SIM0_step+0x99c>)
 8007928:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 800792c:	3308      	adds	r3, #8
 800792e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007932:	f04f 0200 	mov.w	r2, #0
 8007936:	f04f 0300 	mov.w	r3, #0
 800793a:	f7f9 f8b7 	bl	8000aac <__aeabi_dcmpeq>
 800793e:	4603      	mov	r3, r0
 8007940:	2b00      	cmp	r3, #0
 8007942:	d151      	bne.n	80079e8 <SIM0_step+0x9a8>
    rtb_Current = SIM0_DW.Memory17_PreviousInput - rtb_y;
 8007944:	4b25      	ldr	r3, [pc, #148]	; (80079dc <SIM0_step+0x99c>)
 8007946:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 800794a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800794e:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8007952:	f103 0310 	add.w	r3, r3, #16
 8007956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800795a:	f7f8 fc87 	bl	800026c <__aeabi_dsub>
 800795e:	4602      	mov	r2, r0
 8007960:	460b      	mov	r3, r1
 8007962:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 8007966:	f101 0110 	add.w	r1, r1, #16
 800796a:	e9c1 2300 	strd	r2, r3, [r1]
    if (rtb_Current < 0.0) {
 800796e:	f04f 0200 	mov.w	r2, #0
 8007972:	f04f 0300 	mov.w	r3, #0
 8007976:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 800797a:	f101 0110 	add.w	r1, r1, #16
 800797e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007982:	f7f9 f89d 	bl	8000ac0 <__aeabi_dcmplt>
 8007986:	4603      	mov	r3, r0
 8007988:	2b00      	cmp	r3, #0
 800798a:	d009      	beq.n	80079a0 <SIM0_step+0x960>
      rtb_Current = 0.0;
 800798c:	f04f 0200 	mov.w	r2, #0
 8007990:	f04f 0300 	mov.w	r3, #0
 8007994:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 8007998:	f101 0110 	add.w	r1, r1, #16
 800799c:	e9c1 2300 	strd	r2, r3, [r1]
    }

    if (SIM0_DW.Memory18_PreviousInput < rtb_Current) {
 80079a0:	4b0e      	ldr	r3, [pc, #56]	; (80079dc <SIM0_step+0x99c>)
 80079a2:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 80079a6:	3310      	adds	r3, #16
 80079a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ac:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 80079b0:	f101 0110 	add.w	r1, r1, #16
 80079b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80079b8:	f7f9 f8a0 	bl	8000afc <__aeabi_dcmpgt>
 80079bc:	4603      	mov	r3, r0
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d01c      	beq.n	80079fc <SIM0_step+0x9bc>
      rtb_Current = SIM0_DW.Memory18_PreviousInput;
 80079c2:	4b06      	ldr	r3, [pc, #24]	; (80079dc <SIM0_step+0x99c>)
 80079c4:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 80079c8:	3310      	adds	r3, #16
 80079ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ce:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 80079d2:	f101 0110 	add.w	r1, r1, #16
 80079d6:	e9c1 2300 	strd	r2, r3, [r1]
 80079da:	e00f      	b.n	80079fc <SIM0_step+0x9bc>
 80079dc:	2001c148 	.word	0x2001c148
 80079e0:	2001d9a8 	.word	0x2001d9a8
 80079e4:	3ff00000 	.word	0x3ff00000
    }
  } else {
    rtb_Current = 0.0;
 80079e8:	f04f 0200 	mov.w	r2, #0
 80079ec:	f04f 0300 	mov.w	r3, #0
 80079f0:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 80079f4:	f101 0110 	add.w	r1, r1, #16
 80079f8:	e9c1 2300 	strd	r2, r3, [r1]
  }

  rtb_current = 0.0;
 80079fc:	f04f 0200 	mov.w	r2, #0
 8007a00:	f04f 0300 	mov.w	r3, #0
 8007a04:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 8007a08:	e9c1 2300 	strd	r2, r3, [r1]
  if (i == 1) {
 8007a0c:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8007a10:	f103 030c 	add.w	r3, r3, #12
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	2b01      	cmp	r3, #1
 8007a18:	d109      	bne.n	8007a2e <SIM0_step+0x9ee>
    rtb_Exp = -1.0;
 8007a1a:	f04f 0200 	mov.w	r2, #0
 8007a1e:	4bc0      	ldr	r3, [pc, #768]	; (8007d20 <SIM0_step+0xce0>)
 8007a20:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 8007a24:	f101 0108 	add.w	r1, r1, #8
 8007a28:	e9c1 2300 	strd	r2, r3, [r1]
 8007a2c:	e1d3      	b.n	8007dd6 <SIM0_step+0xd96>
  } else if (i == 2) {
 8007a2e:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8007a32:	f103 030c 	add.w	r3, r3, #12
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	2b02      	cmp	r3, #2
 8007a3a:	f040 8099 	bne.w	8007b70 <SIM0_step+0xb30>
    if (rtb_Memory22 != 0.0) {
 8007a3e:	f04f 0200 	mov.w	r2, #0
 8007a42:	f04f 0300 	mov.w	r3, #0
 8007a46:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 8007a4a:	f101 0108 	add.w	r1, r1, #8
 8007a4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a52:	f7f9 f82b 	bl	8000aac <__aeabi_dcmpeq>
 8007a56:	4603      	mov	r3, r0
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d17f      	bne.n	8007b5c <SIM0_step+0xb1c>
      if ((rtb_Product1_n != 0.0) || (rtb_Exp != 0.0)) {
 8007a5c:	f04f 0200 	mov.w	r2, #0
 8007a60:	f04f 0300 	mov.w	r3, #0
 8007a64:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 8007a68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a6c:	f7f9 f81e 	bl	8000aac <__aeabi_dcmpeq>
 8007a70:	4603      	mov	r3, r0
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d00e      	beq.n	8007a94 <SIM0_step+0xa54>
 8007a76:	f04f 0200 	mov.w	r2, #0
 8007a7a:	f04f 0300 	mov.w	r3, #0
 8007a7e:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 8007a82:	f101 0108 	add.w	r1, r1, #8
 8007a86:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a8a:	f7f9 f80f 	bl	8000aac <__aeabi_dcmpeq>
 8007a8e:	4603      	mov	r3, r0
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d141      	bne.n	8007b18 <SIM0_step+0xad8>
        rtb_Exp = (rtb_y - SIM0_DW.Memory_PreviousInput_a) +
 8007a94:	4ba3      	ldr	r3, [pc, #652]	; (8007d24 <SIM0_step+0xce4>)
 8007a96:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 8007a9a:	3318      	adds	r3, #24
 8007a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aa0:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 8007aa4:	f101 0110 	add.w	r1, r1, #16
 8007aa8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007aac:	f7f8 fbde 	bl	800026c <__aeabi_dsub>
 8007ab0:	4602      	mov	r2, r0
 8007ab2:	460b      	mov	r3, r1
 8007ab4:	4610      	mov	r0, r2
 8007ab6:	4619      	mov	r1, r3
          SIM0_DW.Memory_PreviousInput_a;
 8007ab8:	4b9a      	ldr	r3, [pc, #616]	; (8007d24 <SIM0_step+0xce4>)
 8007aba:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 8007abe:	3318      	adds	r3, #24
 8007ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
        rtb_Exp = (rtb_y - SIM0_DW.Memory_PreviousInput_a) +
 8007ac4:	f7f8 fbd4 	bl	8000270 <__adddf3>
 8007ac8:	4602      	mov	r2, r0
 8007aca:	460b      	mov	r3, r1
 8007acc:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 8007ad0:	f101 0108 	add.w	r1, r1, #8
 8007ad4:	e9c1 2300 	strd	r2, r3, [r1]
        rtb_current = (real_T)rtb_is_charge * rtb_Current * rtb_Product9;
 8007ad8:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8007adc:	f103 0304 	add.w	r3, r3, #4
 8007ae0:	6818      	ldr	r0, [r3, #0]
 8007ae2:	f7f8 fd11 	bl	8000508 <__aeabi_i2d>
 8007ae6:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 8007aea:	f103 0310 	add.w	r3, r3, #16
 8007aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007af2:	f7f8 fd73 	bl	80005dc <__aeabi_dmul>
 8007af6:	4602      	mov	r2, r0
 8007af8:	460b      	mov	r3, r1
 8007afa:	f507 519d 	add.w	r1, r7, #5024	; 0x13a0
 8007afe:	f101 0118 	add.w	r1, r1, #24
 8007b02:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b06:	f7f8 fd69 	bl	80005dc <__aeabi_dmul>
 8007b0a:	4602      	mov	r2, r0
 8007b0c:	460b      	mov	r3, r1
 8007b0e:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 8007b12:	e9c1 2300 	strd	r2, r3, [r1]
 8007b16:	e15e      	b.n	8007dd6 <SIM0_step+0xd96>
      } else {
        rtb_Exp = (SIM0_DW.Memory17_PreviousInput -
 8007b18:	4b82      	ldr	r3, [pc, #520]	; (8007d24 <SIM0_step+0xce4>)
 8007b1a:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 8007b1e:	e9d3 0100 	ldrd	r0, r1, [r3]
                   SIM0_DW.Memory_PreviousInput_a) +
 8007b22:	4b80      	ldr	r3, [pc, #512]	; (8007d24 <SIM0_step+0xce4>)
 8007b24:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 8007b28:	3318      	adds	r3, #24
 8007b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
        rtb_Exp = (SIM0_DW.Memory17_PreviousInput -
 8007b2e:	f7f8 fb9d 	bl	800026c <__aeabi_dsub>
 8007b32:	4602      	mov	r2, r0
 8007b34:	460b      	mov	r3, r1
 8007b36:	4610      	mov	r0, r2
 8007b38:	4619      	mov	r1, r3
          SIM0_DW.Memory_PreviousInput_a;
 8007b3a:	4b7a      	ldr	r3, [pc, #488]	; (8007d24 <SIM0_step+0xce4>)
 8007b3c:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 8007b40:	3318      	adds	r3, #24
 8007b42:	e9d3 2300 	ldrd	r2, r3, [r3]
        rtb_Exp = (SIM0_DW.Memory17_PreviousInput -
 8007b46:	f7f8 fb93 	bl	8000270 <__adddf3>
 8007b4a:	4602      	mov	r2, r0
 8007b4c:	460b      	mov	r3, r1
 8007b4e:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 8007b52:	f101 0108 	add.w	r1, r1, #8
 8007b56:	e9c1 2300 	strd	r2, r3, [r1]
 8007b5a:	e13c      	b.n	8007dd6 <SIM0_step+0xd96>
      }
    } else {
      rtb_Exp = -1.0;
 8007b5c:	f04f 0200 	mov.w	r2, #0
 8007b60:	4b6f      	ldr	r3, [pc, #444]	; (8007d20 <SIM0_step+0xce0>)
 8007b62:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 8007b66:	f101 0108 	add.w	r1, r1, #8
 8007b6a:	e9c1 2300 	strd	r2, r3, [r1]
 8007b6e:	e132      	b.n	8007dd6 <SIM0_step+0xd96>
    }
  } else if (rtb_Memory22 != 0.0) {
 8007b70:	f04f 0200 	mov.w	r2, #0
 8007b74:	f04f 0300 	mov.w	r3, #0
 8007b78:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 8007b7c:	f101 0108 	add.w	r1, r1, #8
 8007b80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b84:	f7f8 ff92 	bl	8000aac <__aeabi_dcmpeq>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	f040 811a 	bne.w	8007dc4 <SIM0_step+0xd84>
    if (rtb_Product1_n != 0.0) {
 8007b90:	f04f 0200 	mov.w	r2, #0
 8007b94:	f04f 0300 	mov.w	r3, #0
 8007b98:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 8007b9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ba0:	f7f8 ff84 	bl	8000aac <__aeabi_dcmpeq>
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d152      	bne.n	8007c50 <SIM0_step+0xc10>
      rtb_Exp = (rtb_y - SIM0_DW.Memory_PreviousInput_a) * 0.8 +
 8007baa:	4b5e      	ldr	r3, [pc, #376]	; (8007d24 <SIM0_step+0xce4>)
 8007bac:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 8007bb0:	3318      	adds	r3, #24
 8007bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bb6:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 8007bba:	f101 0110 	add.w	r1, r1, #16
 8007bbe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007bc2:	f7f8 fb53 	bl	800026c <__aeabi_dsub>
 8007bc6:	4602      	mov	r2, r0
 8007bc8:	460b      	mov	r3, r1
 8007bca:	4610      	mov	r0, r2
 8007bcc:	4619      	mov	r1, r3
 8007bce:	a352      	add	r3, pc, #328	; (adr r3, 8007d18 <SIM0_step+0xcd8>)
 8007bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bd4:	f7f8 fd02 	bl	80005dc <__aeabi_dmul>
 8007bd8:	4602      	mov	r2, r0
 8007bda:	460b      	mov	r3, r1
 8007bdc:	4610      	mov	r0, r2
 8007bde:	4619      	mov	r1, r3
        SIM0_DW.Memory_PreviousInput_a;
 8007be0:	4b50      	ldr	r3, [pc, #320]	; (8007d24 <SIM0_step+0xce4>)
 8007be2:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 8007be6:	3318      	adds	r3, #24
 8007be8:	e9d3 2300 	ldrd	r2, r3, [r3]
      rtb_Exp = (rtb_y - SIM0_DW.Memory_PreviousInput_a) * 0.8 +
 8007bec:	f7f8 fb40 	bl	8000270 <__adddf3>
 8007bf0:	4602      	mov	r2, r0
 8007bf2:	460b      	mov	r3, r1
 8007bf4:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 8007bf8:	f101 0108 	add.w	r1, r1, #8
 8007bfc:	e9c1 2300 	strd	r2, r3, [r1]
      rtb_current = rtb_is_drive - (rtb_y - rtb_Exp) / 0.5;
 8007c00:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 8007c04:	f103 0308 	add.w	r3, r3, #8
 8007c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c0c:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 8007c10:	f101 0110 	add.w	r1, r1, #16
 8007c14:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c18:	f7f8 fb28 	bl	800026c <__aeabi_dsub>
 8007c1c:	4602      	mov	r2, r0
 8007c1e:	460b      	mov	r3, r1
 8007c20:	4610      	mov	r0, r2
 8007c22:	4619      	mov	r1, r3
 8007c24:	f04f 0200 	mov.w	r2, #0
 8007c28:	4b3f      	ldr	r3, [pc, #252]	; (8007d28 <SIM0_step+0xce8>)
 8007c2a:	f7f8 fe01 	bl	8000830 <__aeabi_ddiv>
 8007c2e:	4602      	mov	r2, r0
 8007c30:	460b      	mov	r3, r1
 8007c32:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 8007c36:	f101 0118 	add.w	r1, r1, #24
 8007c3a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c3e:	f7f8 fb15 	bl	800026c <__aeabi_dsub>
 8007c42:	4602      	mov	r2, r0
 8007c44:	460b      	mov	r3, r1
 8007c46:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 8007c4a:	e9c1 2300 	strd	r2, r3, [r1]
 8007c4e:	e0c2      	b.n	8007dd6 <SIM0_step+0xd96>
    } else if (rtb_Exp != 0.0) {
 8007c50:	f04f 0200 	mov.w	r2, #0
 8007c54:	f04f 0300 	mov.w	r3, #0
 8007c58:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 8007c5c:	f101 0108 	add.w	r1, r1, #8
 8007c60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c64:	f7f8 ff22 	bl	8000aac <__aeabi_dcmpeq>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d162      	bne.n	8007d34 <SIM0_step+0xcf4>
      rtb_Exp = (rtb_y - SIM0_DW.Memory_PreviousInput_a) / 50.0 +
 8007c6e:	4b2d      	ldr	r3, [pc, #180]	; (8007d24 <SIM0_step+0xce4>)
 8007c70:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 8007c74:	3318      	adds	r3, #24
 8007c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c7a:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 8007c7e:	f101 0110 	add.w	r1, r1, #16
 8007c82:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c86:	f7f8 faf1 	bl	800026c <__aeabi_dsub>
 8007c8a:	4602      	mov	r2, r0
 8007c8c:	460b      	mov	r3, r1
 8007c8e:	4610      	mov	r0, r2
 8007c90:	4619      	mov	r1, r3
 8007c92:	f04f 0200 	mov.w	r2, #0
 8007c96:	4b25      	ldr	r3, [pc, #148]	; (8007d2c <SIM0_step+0xcec>)
 8007c98:	f7f8 fdca 	bl	8000830 <__aeabi_ddiv>
 8007c9c:	4602      	mov	r2, r0
 8007c9e:	460b      	mov	r3, r1
 8007ca0:	4610      	mov	r0, r2
 8007ca2:	4619      	mov	r1, r3
        SIM0_DW.Memory_PreviousInput_a;
 8007ca4:	4b1f      	ldr	r3, [pc, #124]	; (8007d24 <SIM0_step+0xce4>)
 8007ca6:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 8007caa:	3318      	adds	r3, #24
 8007cac:	e9d3 2300 	ldrd	r2, r3, [r3]
      rtb_Exp = (rtb_y - SIM0_DW.Memory_PreviousInput_a) / 50.0 +
 8007cb0:	f7f8 fade 	bl	8000270 <__adddf3>
 8007cb4:	4602      	mov	r2, r0
 8007cb6:	460b      	mov	r3, r1
 8007cb8:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 8007cbc:	f101 0108 	add.w	r1, r1, #8
 8007cc0:	e9c1 2300 	strd	r2, r3, [r1]
      rtb_current = rtb_is_drive - (rtb_y - rtb_Exp) / 100.0;
 8007cc4:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 8007cc8:	f103 0308 	add.w	r3, r3, #8
 8007ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cd0:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 8007cd4:	f101 0110 	add.w	r1, r1, #16
 8007cd8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007cdc:	f7f8 fac6 	bl	800026c <__aeabi_dsub>
 8007ce0:	4602      	mov	r2, r0
 8007ce2:	460b      	mov	r3, r1
 8007ce4:	4610      	mov	r0, r2
 8007ce6:	4619      	mov	r1, r3
 8007ce8:	f04f 0200 	mov.w	r2, #0
 8007cec:	4b10      	ldr	r3, [pc, #64]	; (8007d30 <SIM0_step+0xcf0>)
 8007cee:	f7f8 fd9f 	bl	8000830 <__aeabi_ddiv>
 8007cf2:	4602      	mov	r2, r0
 8007cf4:	460b      	mov	r3, r1
 8007cf6:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 8007cfa:	f101 0118 	add.w	r1, r1, #24
 8007cfe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d02:	f7f8 fab3 	bl	800026c <__aeabi_dsub>
 8007d06:	4602      	mov	r2, r0
 8007d08:	460b      	mov	r3, r1
 8007d0a:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 8007d0e:	e9c1 2300 	strd	r2, r3, [r1]
 8007d12:	e060      	b.n	8007dd6 <SIM0_step+0xd96>
 8007d14:	f3af 8000 	nop.w
 8007d18:	9999999a 	.word	0x9999999a
 8007d1c:	3fe99999 	.word	0x3fe99999
 8007d20:	bff00000 	.word	0xbff00000
 8007d24:	2001c148 	.word	0x2001c148
 8007d28:	3fe00000 	.word	0x3fe00000
 8007d2c:	40490000 	.word	0x40490000
 8007d30:	40590000 	.word	0x40590000
    } else {
      rtb_Exp = (0.0 - SIM0_DW.Memory_PreviousInput_a) / 5.0 +
 8007d34:	4bad      	ldr	r3, [pc, #692]	; (8007fec <SIM0_step+0xfac>)
 8007d36:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 8007d3a:	3318      	adds	r3, #24
 8007d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d40:	f04f 0000 	mov.w	r0, #0
 8007d44:	f04f 0100 	mov.w	r1, #0
 8007d48:	f7f8 fa90 	bl	800026c <__aeabi_dsub>
 8007d4c:	4602      	mov	r2, r0
 8007d4e:	460b      	mov	r3, r1
 8007d50:	4610      	mov	r0, r2
 8007d52:	4619      	mov	r1, r3
 8007d54:	f04f 0200 	mov.w	r2, #0
 8007d58:	4ba5      	ldr	r3, [pc, #660]	; (8007ff0 <SIM0_step+0xfb0>)
 8007d5a:	f7f8 fd69 	bl	8000830 <__aeabi_ddiv>
 8007d5e:	4602      	mov	r2, r0
 8007d60:	460b      	mov	r3, r1
 8007d62:	4610      	mov	r0, r2
 8007d64:	4619      	mov	r1, r3
        SIM0_DW.Memory_PreviousInput_a;
 8007d66:	4ba1      	ldr	r3, [pc, #644]	; (8007fec <SIM0_step+0xfac>)
 8007d68:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 8007d6c:	3318      	adds	r3, #24
 8007d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
      rtb_Exp = (0.0 - SIM0_DW.Memory_PreviousInput_a) / 5.0 +
 8007d72:	f7f8 fa7d 	bl	8000270 <__adddf3>
 8007d76:	4602      	mov	r2, r0
 8007d78:	460b      	mov	r3, r1
 8007d7a:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 8007d7e:	f101 0108 	add.w	r1, r1, #8
 8007d82:	e9c1 2300 	strd	r2, r3, [r1]
      rtb_current = -(0.0 - rtb_Exp) / 10.0;
 8007d86:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 8007d8a:	f103 0308 	add.w	r3, r3, #8
 8007d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d92:	f04f 0000 	mov.w	r0, #0
 8007d96:	f04f 0100 	mov.w	r1, #0
 8007d9a:	f7f8 fa67 	bl	800026c <__aeabi_dsub>
 8007d9e:	4602      	mov	r2, r0
 8007da0:	460b      	mov	r3, r1
 8007da2:	4690      	mov	r8, r2
 8007da4:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8007da8:	f04f 0200 	mov.w	r2, #0
 8007dac:	4b91      	ldr	r3, [pc, #580]	; (8007ff4 <SIM0_step+0xfb4>)
 8007dae:	4640      	mov	r0, r8
 8007db0:	4649      	mov	r1, r9
 8007db2:	f7f8 fd3d 	bl	8000830 <__aeabi_ddiv>
 8007db6:	4602      	mov	r2, r0
 8007db8:	460b      	mov	r3, r1
 8007dba:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 8007dbe:	e9c1 2300 	strd	r2, r3, [r1]
 8007dc2:	e008      	b.n	8007dd6 <SIM0_step+0xd96>
    }
  } else {
    rtb_Exp = -1.0;
 8007dc4:	f04f 0200 	mov.w	r2, #0
 8007dc8:	4b8b      	ldr	r3, [pc, #556]	; (8007ff8 <SIM0_step+0xfb8>)
 8007dca:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 8007dce:	f101 0108 	add.w	r1, r1, #8
 8007dd2:	e9c1 2300 	strd	r2, r3, [r1]
  }

  SIM0_Y.vehicle_voltage = rtb_Exp;
 8007dd6:	4989      	ldr	r1, [pc, #548]	; (8007ffc <SIM0_step+0xfbc>)
 8007dd8:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 8007ddc:	f103 0308 	add.w	r3, r3, #8
 8007de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007de4:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
  SIM0_Y.current = rtb_current;
 8007de8:	4984      	ldr	r1, [pc, #528]	; (8007ffc <SIM0_step+0xfbc>)
 8007dea:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 8007dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007df2:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
  SIM0_Y.accumulator_voltage = rtb_y;
 8007df6:	4981      	ldr	r1, [pc, #516]	; (8007ffc <SIM0_step+0xfbc>)
 8007df8:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8007dfc:	f103 0310 	add.w	r3, r3, #16
 8007e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e04:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
  SIM0_Y.AIR_minus_closed = rtb_Memory22;
 8007e08:	497c      	ldr	r1, [pc, #496]	; (8007ffc <SIM0_step+0xfbc>)
 8007e0a:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8007e0e:	f103 0308 	add.w	r3, r3, #8
 8007e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e16:	e9c1 2304 	strd	r2, r3, [r1, #16]
  SIM0_Y.AIR_plus_closed = rtb_Product1_n;
 8007e1a:	4978      	ldr	r1, [pc, #480]	; (8007ffc <SIM0_step+0xfbc>)
 8007e1c:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8007e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e24:	e9c1 2306 	strd	r2, r3, [r1, #24]
  memcpy(&SIM0_Y.cell_temperatures[0], &SIM0_P.cTmp[0], 60U * sizeof(real_T));
 8007e28:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8007e2c:	4974      	ldr	r1, [pc, #464]	; (8008000 <SIM0_step+0xfc0>)
 8007e2e:	4875      	ldr	r0, [pc, #468]	; (8008004 <SIM0_step+0xfc4>)
 8007e30:	f013 f914 	bl	801b05c <memcpy>
  SIM0_Y.IMD_ok = SIM0_P.IMD_ok;
 8007e34:	4b74      	ldr	r3, [pc, #464]	; (8008008 <SIM0_step+0xfc8>)
 8007e36:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8007e3a:	4970      	ldr	r1, [pc, #448]	; (8007ffc <SIM0_step+0xfbc>)
 8007e3c:	f501 615f 	add.w	r1, r1, #3568	; 0xdf0
 8007e40:	e9c1 2300 	strd	r2, r3, [r1]
  SIM0_DW.Memory20_PreviousInput = rtb_current;
 8007e44:	4b69      	ldr	r3, [pc, #420]	; (8007fec <SIM0_step+0xfac>)
 8007e46:	f603 0108 	addw	r1, r3, #2056	; 0x808
 8007e4a:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 8007e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e52:	e9c1 2300 	strd	r2, r3, [r1]
  SIM0_DW.Memory11_PreviousInput = rtb_Memory20;
 8007e56:	4b65      	ldr	r3, [pc, #404]	; (8007fec <SIM0_step+0xfac>)
 8007e58:	f503 6101 	add.w	r1, r3, #2064	; 0x810
 8007e5c:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8007e60:	f103 0318 	add.w	r3, r3, #24
 8007e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e68:	e9c1 2300 	strd	r2, r3, [r1]
  SIM0_DW.Memory9_PreviousInput = fabs(rtb_Memory20 +
    SIM0_DW.Memory9_PreviousInput);
 8007e6c:	4b5f      	ldr	r3, [pc, #380]	; (8007fec <SIM0_step+0xfac>)
 8007e6e:	f603 73f8 	addw	r3, r3, #4088	; 0xff8
 8007e72:	e9d3 0100 	ldrd	r0, r1, [r3]
  SIM0_DW.Memory9_PreviousInput = fabs(rtb_Memory20 +
 8007e76:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8007e7a:	f103 0318 	add.w	r3, r3, #24
 8007e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e82:	f7f8 f9f5 	bl	8000270 <__adddf3>
 8007e86:	4602      	mov	r2, r0
 8007e88:	460b      	mov	r3, r1
 8007e8a:	4614      	mov	r4, r2
 8007e8c:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8007e90:	4b56      	ldr	r3, [pc, #344]	; (8007fec <SIM0_step+0xfac>)
 8007e92:	f603 73f8 	addw	r3, r3, #4088	; 0xff8
 8007e96:	e9c3 4500 	strd	r4, r5, [r3]
  for (i = 0; i < 126; i++) {
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 8007ea0:	f102 020c 	add.w	r2, r2, #12
 8007ea4:	6013      	str	r3, [r2, #0]
 8007ea6:	e109      	b.n	80080bc <SIM0_step+0x107c>
    rtb_Memory22 = rtb_Memory21[i];
 8007ea8:	f507 62fd 	add.w	r2, r7, #2024	; 0x7e8
 8007eac:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8007eb0:	f103 030c 	add.w	r3, r3, #12
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	00db      	lsls	r3, r3, #3
 8007eb8:	4413      	add	r3, r2
 8007eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ebe:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 8007ec2:	f101 0108 	add.w	r1, r1, #8
 8007ec6:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_Memory20 = rtb_Rpz[i];
 8007eca:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 8007ece:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8007ed2:	f103 030c 	add.w	r3, r3, #12
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	00db      	lsls	r3, r3, #3
 8007eda:	4413      	add	r3, r2
 8007edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ee0:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 8007ee4:	f101 0118 	add.w	r1, r1, #24
 8007ee8:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_is_drive = rtb_Memory19[i];
 8007eec:	f607 32d8 	addw	r2, r7, #3032	; 0xbd8
 8007ef0:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8007ef4:	f103 030c 	add.w	r3, r3, #12
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	00db      	lsls	r3, r3, #3
 8007efc:	4413      	add	r3, r2
 8007efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f02:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 8007f06:	f101 0118 	add.w	r1, r1, #24
 8007f0a:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_DW.Memory15_PreviousInput[i] = rtb_is_drive;
 8007f0e:	4a37      	ldr	r2, [pc, #220]	; (8007fec <SIM0_step+0xfac>)
 8007f10:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8007f14:	f103 030c 	add.w	r3, r3, #12
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	3305      	adds	r3, #5
 8007f1c:	00db      	lsls	r3, r3, #3
 8007f1e:	18d1      	adds	r1, r2, r3
 8007f20:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8007f24:	f103 0318 	add.w	r3, r3, #24
 8007f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f2c:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_DW.Memory12_PreviousInput[i] = rtb_Rsz[i];
 8007f30:	f107 0318 	add.w	r3, r7, #24
 8007f34:	3b10      	subs	r3, #16
 8007f36:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 8007f3a:	f102 020c 	add.w	r2, r2, #12
 8007f3e:	6812      	ldr	r2, [r2, #0]
 8007f40:	00d2      	lsls	r2, r2, #3
 8007f42:	4413      	add	r3, r2
 8007f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f48:	4828      	ldr	r0, [pc, #160]	; (8007fec <SIM0_step+0xfac>)
 8007f4a:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 8007f4e:	f101 010c 	add.w	r1, r1, #12
 8007f52:	6809      	ldr	r1, [r1, #0]
 8007f54:	3183      	adds	r1, #131	; 0x83
 8007f56:	00c9      	lsls	r1, r1, #3
 8007f58:	4401      	add	r1, r0
 8007f5a:	e9c1 2300 	strd	r2, r3, [r1]
    if (rtb_Memory20 > rtb_Memory22) {
 8007f5e:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8007f62:	f103 0308 	add.w	r3, r3, #8
 8007f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f6a:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 8007f6e:	f101 0118 	add.w	r1, r1, #24
 8007f72:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f76:	f7f8 fdc1 	bl	8000afc <__aeabi_dcmpgt>
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d012      	beq.n	8007fa6 <SIM0_step+0xf66>
      SIM0_DW.Memory_PreviousInput[i] = rtb_Memory22;
 8007f80:	4a1a      	ldr	r2, [pc, #104]	; (8007fec <SIM0_step+0xfac>)
 8007f82:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8007f86:	f103 030c 	add.w	r3, r3, #12
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f203 1303 	addw	r3, r3, #259	; 0x103
 8007f90:	00db      	lsls	r3, r3, #3
 8007f92:	18d1      	adds	r1, r2, r3
 8007f94:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8007f98:	f103 0308 	add.w	r3, r3, #8
 8007f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fa0:	e9c1 2300 	strd	r2, r3, [r1]
 8007fa4:	e044      	b.n	8008030 <SIM0_step+0xff0>
    } else if (rtb_Memory20 < SIM0_P.Constant1_Value) {
 8007fa6:	4b18      	ldr	r3, [pc, #96]	; (8008008 <SIM0_step+0xfc8>)
 8007fa8:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8007fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fb0:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 8007fb4:	f101 0118 	add.w	r1, r1, #24
 8007fb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007fbc:	f7f8 fd80 	bl	8000ac0 <__aeabi_dcmplt>
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d022      	beq.n	800800c <SIM0_step+0xfcc>
      SIM0_DW.Memory_PreviousInput[i] = SIM0_P.Constant1_Value;
 8007fc6:	4b10      	ldr	r3, [pc, #64]	; (8008008 <SIM0_step+0xfc8>)
 8007fc8:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8007fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fd0:	4806      	ldr	r0, [pc, #24]	; (8007fec <SIM0_step+0xfac>)
 8007fd2:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 8007fd6:	f101 010c 	add.w	r1, r1, #12
 8007fda:	6809      	ldr	r1, [r1, #0]
 8007fdc:	f201 1103 	addw	r1, r1, #259	; 0x103
 8007fe0:	00c9      	lsls	r1, r1, #3
 8007fe2:	4401      	add	r1, r0
 8007fe4:	e9c1 2300 	strd	r2, r3, [r1]
 8007fe8:	e022      	b.n	8008030 <SIM0_step+0xff0>
 8007fea:	bf00      	nop
 8007fec:	2001c148 	.word	0x2001c148
 8007ff0:	40140000 	.word	0x40140000
 8007ff4:	40240000 	.word	0x40240000
 8007ff8:	bff00000 	.word	0xbff00000
 8007ffc:	2001d9a8 	.word	0x2001d9a8
 8008000:	20000c38 	.word	0x20000c38
 8008004:	2001e5b8 	.word	0x2001e5b8
 8008008:	20000360 	.word	0x20000360
    } else {
      SIM0_DW.Memory_PreviousInput[i] = rtb_Memory20;
 800800c:	4a94      	ldr	r2, [pc, #592]	; (8008260 <SIM0_step+0x1220>)
 800800e:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8008012:	f103 030c 	add.w	r3, r3, #12
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f203 1303 	addw	r3, r3, #259	; 0x103
 800801c:	00db      	lsls	r3, r3, #3
 800801e:	18d1      	adds	r1, r2, r3
 8008020:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8008024:	f103 0318 	add.w	r3, r3, #24
 8008028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800802c:	e9c1 2300 	strd	r2, r3, [r1]
    }

    SIM0_DW.Memory10_PreviousInput[i] = rtb_Memory22;
 8008030:	4a8b      	ldr	r2, [pc, #556]	; (8008260 <SIM0_step+0x1220>)
 8008032:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8008036:	f103 030c 	add.w	r3, r3, #12
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f203 1381 	addw	r3, r3, #385	; 0x181
 8008040:	00db      	lsls	r3, r3, #3
 8008042:	18d1      	adds	r1, r2, r3
 8008044:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8008048:	f103 0308 	add.w	r3, r3, #8
 800804c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008050:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_DW.Memory19_PreviousInput[i] = SIM0_U.BalanceOut[i];
 8008054:	4a83      	ldr	r2, [pc, #524]	; (8008264 <SIM0_step+0x1224>)
 8008056:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 800805a:	f103 030c 	add.w	r3, r3, #12
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	330d      	adds	r3, #13
 8008062:	00db      	lsls	r3, r3, #3
 8008064:	4413      	add	r3, r2
 8008066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800806a:	487d      	ldr	r0, [pc, #500]	; (8008260 <SIM0_step+0x1220>)
 800806c:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 8008070:	f101 010c 	add.w	r1, r1, #12
 8008074:	6809      	ldr	r1, [r1, #0]
 8008076:	f501 7100 	add.w	r1, r1, #512	; 0x200
 800807a:	00c9      	lsls	r1, r1, #3
 800807c:	4401      	add	r1, r0
 800807e:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_DW.Memory21_PreviousInput[i] = rtb_is_drive;
 8008082:	4a77      	ldr	r2, [pc, #476]	; (8008260 <SIM0_step+0x1220>)
 8008084:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8008088:	f103 030c 	add.w	r3, r3, #12
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8008092:	00db      	lsls	r3, r3, #3
 8008094:	18d1      	adds	r1, r2, r3
 8008096:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 800809a:	f103 0318 	add.w	r3, r3, #24
 800809e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080a2:	e9c1 2300 	strd	r2, r3, [r1]
  for (i = 0; i < 126; i++) {
 80080a6:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 80080aa:	f103 030c 	add.w	r3, r3, #12
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	3301      	adds	r3, #1
 80080b2:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 80080b6:	f102 020c 	add.w	r2, r2, #12
 80080ba:	6013      	str	r3, [r2, #0]
 80080bc:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 80080c0:	f103 030c 	add.w	r3, r3, #12
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	2b7d      	cmp	r3, #125	; 0x7d
 80080c8:	f77f aeee 	ble.w	8007ea8 <SIM0_step+0xe68>
  }

  SIM0_DW.Memory1_PreviousInput = SIM0_U.AMS_error;
 80080cc:	4b65      	ldr	r3, [pc, #404]	; (8008264 <SIM0_step+0x1224>)
 80080ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080d2:	4963      	ldr	r1, [pc, #396]	; (8008260 <SIM0_step+0x1220>)
 80080d4:	f501 51bf 	add.w	r1, r1, #6112	; 0x17e0
 80080d8:	e9c1 2300 	strd	r2, r3, [r1]
  SIM0_DW.Memory2_PreviousInput = SIM0_U.AMS_error_reset;
 80080dc:	4b61      	ldr	r3, [pc, #388]	; (8008264 <SIM0_step+0x1224>)
 80080de:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80080e2:	4b5f      	ldr	r3, [pc, #380]	; (8008260 <SIM0_step+0x1220>)
 80080e4:	f503 53bf 	add.w	r3, r3, #6112	; 0x17e0
 80080e8:	3308      	adds	r3, #8
 80080ea:	e9c3 0100 	strd	r0, r1, [r3]
  SIM0_DW.Memory_PreviousInput_m = rtb_Logic_idx_0;
 80080ee:	4b5c      	ldr	r3, [pc, #368]	; (8008260 <SIM0_step+0x1220>)
 80080f0:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 80080f4:	3318      	adds	r3, #24
 80080f6:	f507 529e 	add.w	r2, r7, #5056	; 0x13c0
 80080fa:	f102 0217 	add.w	r2, r2, #23
 80080fe:	7812      	ldrb	r2, [r2, #0]
 8008100:	701a      	strb	r2, [r3, #0]
  SIM0_DW.Memory3_PreviousInput = SIM0_U.IMD_error;
 8008102:	4b58      	ldr	r3, [pc, #352]	; (8008264 <SIM0_step+0x1224>)
 8008104:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8008108:	4b55      	ldr	r3, [pc, #340]	; (8008260 <SIM0_step+0x1220>)
 800810a:	f503 53bf 	add.w	r3, r3, #6112	; 0x17e0
 800810e:	3310      	adds	r3, #16
 8008110:	e9c3 0100 	strd	r0, r1, [r3]
  SIM0_DW.Memory4_PreviousInput = SIM0_U.IMD_error_reset;
 8008114:	4b53      	ldr	r3, [pc, #332]	; (8008264 <SIM0_step+0x1224>)
 8008116:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800811a:	4b51      	ldr	r3, [pc, #324]	; (8008260 <SIM0_step+0x1220>)
 800811c:	f503 53bf 	add.w	r3, r3, #6112	; 0x17e0
 8008120:	3318      	adds	r3, #24
 8008122:	e9c3 0100 	strd	r0, r1, [r3]
  SIM0_DW.Memory_PreviousInput_c = rtb_Logic_p_idx_0;
 8008126:	4b4e      	ldr	r3, [pc, #312]	; (8008260 <SIM0_step+0x1220>)
 8008128:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 800812c:	3319      	adds	r3, #25
 800812e:	f507 529e 	add.w	r2, r7, #5056	; 0x13c0
 8008132:	f102 0215 	add.w	r2, r2, #21
 8008136:	7812      	ldrb	r2, [r2, #0]
 8008138:	701a      	strb	r2, [r3, #0]
  SIM0_DW.Memory5_PreviousInput = SIM0_U.SC;
 800813a:	4b4a      	ldr	r3, [pc, #296]	; (8008264 <SIM0_step+0x1224>)
 800813c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008140:	4947      	ldr	r1, [pc, #284]	; (8008260 <SIM0_step+0x1220>)
 8008142:	f501 51c0 	add.w	r1, r1, #6144	; 0x1800
 8008146:	e9c1 2300 	strd	r2, r3, [r1]
  SIM0_DW.Delay1_DSTATE = SIM0_DW.Memory14_PreviousInput;
 800814a:	4b45      	ldr	r3, [pc, #276]	; (8008260 <SIM0_step+0x1220>)
 800814c:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 8008150:	3308      	adds	r3, #8
 8008152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008156:	4942      	ldr	r1, [pc, #264]	; (8008260 <SIM0_step+0x1220>)
 8008158:	e9c1 2300 	strd	r2, r3, [r1]
  SIM0_DW.Delay3_DSTATE[0] = SIM0_DW.Delay3_DSTATE[1];
 800815c:	4b40      	ldr	r3, [pc, #256]	; (8008260 <SIM0_step+0x1220>)
 800815e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8008162:	493f      	ldr	r1, [pc, #252]	; (8008260 <SIM0_step+0x1220>)
 8008164:	e9c1 2302 	strd	r2, r3, [r1, #8]
  SIM0_DW.Delay3_DSTATE[1] = SIM0_DW.Memory8_PreviousInput;
 8008168:	4b3d      	ldr	r3, [pc, #244]	; (8008260 <SIM0_step+0x1220>)
 800816a:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 800816e:	3310      	adds	r3, #16
 8008170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008174:	493a      	ldr	r1, [pc, #232]	; (8008260 <SIM0_step+0x1220>)
 8008176:	e9c1 2304 	strd	r2, r3, [r1, #16]
  SIM0_DW.Delay2_DSTATE[0] = SIM0_DW.Delay2_DSTATE[1];
 800817a:	4b39      	ldr	r3, [pc, #228]	; (8008260 <SIM0_step+0x1220>)
 800817c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008180:	4937      	ldr	r1, [pc, #220]	; (8008260 <SIM0_step+0x1220>)
 8008182:	e9c1 2306 	strd	r2, r3, [r1, #24]
  SIM0_DW.Delay2_DSTATE[1] = SIM0_DW.Memory13_PreviousInput;
 8008186:	4b36      	ldr	r3, [pc, #216]	; (8008260 <SIM0_step+0x1220>)
 8008188:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 800818c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008190:	4933      	ldr	r1, [pc, #204]	; (8008260 <SIM0_step+0x1220>)
 8008192:	e9c1 2308 	strd	r2, r3, [r1, #32]
  SIM0_DW.Memory6_PreviousInput = SIM0_U.charge;
 8008196:	4b33      	ldr	r3, [pc, #204]	; (8008264 <SIM0_step+0x1224>)
 8008198:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 800819c:	4b30      	ldr	r3, [pc, #192]	; (8008260 <SIM0_step+0x1220>)
 800819e:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 80081a2:	3308      	adds	r3, #8
 80081a4:	e9c3 0100 	strd	r0, r1, [r3]
  SIM0_DW.Memory7_PreviousInput = SIM0_U.drive;
 80081a8:	4b2e      	ldr	r3, [pc, #184]	; (8008264 <SIM0_step+0x1224>)
 80081aa:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 80081ae:	4b2c      	ldr	r3, [pc, #176]	; (8008260 <SIM0_step+0x1220>)
 80081b0:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 80081b4:	3310      	adds	r3, #16
 80081b6:	e9c3 0100 	strd	r0, r1, [r3]
  SIM0_DW.Memory22_PreviousInput = SIM0_U.drive_current;
 80081ba:	4b2a      	ldr	r3, [pc, #168]	; (8008264 <SIM0_step+0x1224>)
 80081bc:	f503 638b 	add.w	r3, r3, #1112	; 0x458
 80081c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80081c4:	4b26      	ldr	r3, [pc, #152]	; (8008260 <SIM0_step+0x1220>)
 80081c6:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 80081ca:	3318      	adds	r3, #24
 80081cc:	e9c3 0100 	strd	r0, r1, [r3]
  SIM0_DW.Memory17_PreviousInput = SIM0_U.VoltageLimit;
 80081d0:	4b24      	ldr	r3, [pc, #144]	; (8008264 <SIM0_step+0x1224>)
 80081d2:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80081d6:	4922      	ldr	r1, [pc, #136]	; (8008260 <SIM0_step+0x1220>)
 80081d8:	f501 51c1 	add.w	r1, r1, #6176	; 0x1820
 80081dc:	e9c1 2300 	strd	r2, r3, [r1]
  SIM0_DW.Memory16_PreviousInput = SIM0_U.EnableCharge;
 80081e0:	4b20      	ldr	r3, [pc, #128]	; (8008264 <SIM0_step+0x1224>)
 80081e2:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80081e6:	4b1e      	ldr	r3, [pc, #120]	; (8008260 <SIM0_step+0x1220>)
 80081e8:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 80081ec:	3308      	adds	r3, #8
 80081ee:	e9c3 0100 	strd	r0, r1, [r3]
  SIM0_DW.Memory18_PreviousInput = SIM0_U.CurrentLimit;
 80081f2:	4b1c      	ldr	r3, [pc, #112]	; (8008264 <SIM0_step+0x1224>)
 80081f4:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 80081f8:	4b19      	ldr	r3, [pc, #100]	; (8008260 <SIM0_step+0x1220>)
 80081fa:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 80081fe:	3310      	adds	r3, #16
 8008200:	e9c3 0100 	strd	r0, r1, [r3]
  SIM0_DW.Memory_PreviousInput_a = rtb_Exp;
 8008204:	4b16      	ldr	r3, [pc, #88]	; (8008260 <SIM0_step+0x1220>)
 8008206:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 800820a:	3318      	adds	r3, #24
 800820c:	f507 52a0 	add.w	r2, r7, #5120	; 0x1400
 8008210:	f102 0208 	add.w	r2, r2, #8
 8008214:	e9d2 0100 	ldrd	r0, r1, [r2]
 8008218:	e9c3 0100 	strd	r0, r1, [r3]
  SIM0_DW.Memory13_PreviousInput = SIM0_U.EnableAirPlus;
 800821c:	4b11      	ldr	r3, [pc, #68]	; (8008264 <SIM0_step+0x1224>)
 800821e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8008222:	490f      	ldr	r1, [pc, #60]	; (8008260 <SIM0_step+0x1220>)
 8008224:	f501 51c2 	add.w	r1, r1, #6208	; 0x1840
 8008228:	e9c1 2300 	strd	r2, r3, [r1]
  SIM0_DW.Memory14_PreviousInput = SIM0_U.EnablePrecharge;
 800822c:	4b0d      	ldr	r3, [pc, #52]	; (8008264 <SIM0_step+0x1224>)
 800822e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8008232:	4b0b      	ldr	r3, [pc, #44]	; (8008260 <SIM0_step+0x1220>)
 8008234:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 8008238:	3308      	adds	r3, #8
 800823a:	e9c3 0100 	strd	r0, r1, [r3]
  SIM0_DW.Memory8_PreviousInput = SIM0_U.EnableAirMinus;
 800823e:	4b09      	ldr	r3, [pc, #36]	; (8008264 <SIM0_step+0x1224>)
 8008240:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8008244:	4b06      	ldr	r3, [pc, #24]	; (8008260 <SIM0_step+0x1220>)
 8008246:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 800824a:	3310      	adds	r3, #16
 800824c:	e9c3 0100 	strd	r0, r1, [r3]
}
 8008250:	bf00      	nop
 8008252:	f507 57a0 	add.w	r7, r7, #5120	; 0x1400
 8008256:	371c      	adds	r7, #28
 8008258:	46bd      	mov	sp, r7
 800825a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800825e:	bf00      	nop
 8008260:	2001c148 	.word	0x2001c148
 8008264:	2001e7a0 	.word	0x2001e7a0

08008268 <SIM0_initialize>:

void SIM0_initialize(void)
{
 8008268:	b480      	push	{r7}
 800826a:	b083      	sub	sp, #12
 800826c:	af00      	add	r7, sp, #0
  {
    int32_T i;
    SIM0_DW.Memory20_PreviousInput = SIM0_P.Memory20_InitialCondition;
 800826e:	4b10      	ldr	r3, [pc, #64]	; (80082b0 <SIM0_initialize+0x48>)
 8008270:	f503 637f 	add.w	r3, r3, #4080	; 0xff0
 8008274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008278:	490e      	ldr	r1, [pc, #56]	; (80082b4 <SIM0_initialize+0x4c>)
 800827a:	f601 0108 	addw	r1, r1, #2056	; 0x808
 800827e:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_DW.Memory11_PreviousInput = SIM0_P.Memory11_InitialCondition;
 8008282:	4b0b      	ldr	r3, [pc, #44]	; (80082b0 <SIM0_initialize+0x48>)
 8008284:	f603 73f8 	addw	r3, r3, #4088	; 0xff8
 8008288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800828c:	4909      	ldr	r1, [pc, #36]	; (80082b4 <SIM0_initialize+0x4c>)
 800828e:	f501 6101 	add.w	r1, r1, #2064	; 0x810
 8008292:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_DW.Memory9_PreviousInput = SIM0_P.Memory9_InitialCondition;
 8008296:	4b06      	ldr	r3, [pc, #24]	; (80082b0 <SIM0_initialize+0x48>)
 8008298:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800829c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082a0:	4904      	ldr	r1, [pc, #16]	; (80082b4 <SIM0_initialize+0x4c>)
 80082a2:	f601 71f8 	addw	r1, r1, #4088	; 0xff8
 80082a6:	e9c1 2300 	strd	r2, r3, [r1]
    for (i = 0; i < 126; i++) {
 80082aa:	2300      	movs	r3, #0
 80082ac:	607b      	str	r3, [r7, #4]
 80082ae:	e05b      	b.n	8008368 <SIM0_initialize+0x100>
 80082b0:	20000360 	.word	0x20000360
 80082b4:	2001c148 	.word	0x2001c148
      SIM0_DW.Memory15_PreviousInput[i] = SIM0_P.Memory15_InitialCondition;
 80082b8:	4ba4      	ldr	r3, [pc, #656]	; (800854c <SIM0_initialize+0x2e4>)
 80082ba:	f603 33f8 	addw	r3, r3, #3064	; 0xbf8
 80082be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082c2:	48a3      	ldr	r0, [pc, #652]	; (8008550 <SIM0_initialize+0x2e8>)
 80082c4:	6879      	ldr	r1, [r7, #4]
 80082c6:	3105      	adds	r1, #5
 80082c8:	00c9      	lsls	r1, r1, #3
 80082ca:	4401      	add	r1, r0
 80082cc:	e9c1 2300 	strd	r2, r3, [r1]
      SIM0_DW.Memory12_PreviousInput[i] = SIM0_P.Memory12_InitialCondition[i];
 80082d0:	4a9e      	ldr	r2, [pc, #632]	; (800854c <SIM0_initialize+0x2e4>)
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80082d8:	00db      	lsls	r3, r3, #3
 80082da:	4413      	add	r3, r2
 80082dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082e0:	489b      	ldr	r0, [pc, #620]	; (8008550 <SIM0_initialize+0x2e8>)
 80082e2:	6879      	ldr	r1, [r7, #4]
 80082e4:	3183      	adds	r1, #131	; 0x83
 80082e6:	00c9      	lsls	r1, r1, #3
 80082e8:	4401      	add	r1, r0
 80082ea:	e9c1 2300 	strd	r2, r3, [r1]
      SIM0_DW.Memory_PreviousInput[i] = SIM0_P.cQur[i];
 80082ee:	4a97      	ldr	r2, [pc, #604]	; (800854c <SIM0_initialize+0x2e4>)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	339d      	adds	r3, #157	; 0x9d
 80082f4:	00db      	lsls	r3, r3, #3
 80082f6:	4413      	add	r3, r2
 80082f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082fc:	4894      	ldr	r0, [pc, #592]	; (8008550 <SIM0_initialize+0x2e8>)
 80082fe:	6879      	ldr	r1, [r7, #4]
 8008300:	f201 1103 	addw	r1, r1, #259	; 0x103
 8008304:	00c9      	lsls	r1, r1, #3
 8008306:	4401      	add	r1, r0
 8008308:	e9c1 2300 	strd	r2, r3, [r1]
      SIM0_DW.Memory10_PreviousInput[i] = SIM0_P.cCap[i];
 800830c:	4a8f      	ldr	r2, [pc, #572]	; (800854c <SIM0_initialize+0x2e4>)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	331f      	adds	r3, #31
 8008312:	00db      	lsls	r3, r3, #3
 8008314:	4413      	add	r3, r2
 8008316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800831a:	488d      	ldr	r0, [pc, #564]	; (8008550 <SIM0_initialize+0x2e8>)
 800831c:	6879      	ldr	r1, [r7, #4]
 800831e:	f201 1181 	addw	r1, r1, #385	; 0x181
 8008322:	00c9      	lsls	r1, r1, #3
 8008324:	4401      	add	r1, r0
 8008326:	e9c1 2300 	strd	r2, r3, [r1]
      SIM0_DW.Memory19_PreviousInput[i] = SIM0_P.Memory19_InitialCondition;
 800832a:	4b88      	ldr	r3, [pc, #544]	; (800854c <SIM0_initialize+0x2e4>)
 800832c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008330:	3308      	adds	r3, #8
 8008332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008336:	4886      	ldr	r0, [pc, #536]	; (8008550 <SIM0_initialize+0x2e8>)
 8008338:	6879      	ldr	r1, [r7, #4]
 800833a:	f501 7100 	add.w	r1, r1, #512	; 0x200
 800833e:	00c9      	lsls	r1, r1, #3
 8008340:	4401      	add	r1, r0
 8008342:	e9c1 2300 	strd	r2, r3, [r1]
      SIM0_DW.Memory21_PreviousInput[i] = SIM0_P.Memory21_InitialCondition;
 8008346:	4b81      	ldr	r3, [pc, #516]	; (800854c <SIM0_initialize+0x2e4>)
 8008348:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800834c:	3310      	adds	r3, #16
 800834e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008352:	487f      	ldr	r0, [pc, #508]	; (8008550 <SIM0_initialize+0x2e8>)
 8008354:	6879      	ldr	r1, [r7, #4]
 8008356:	f201 217e 	addw	r1, r1, #638	; 0x27e
 800835a:	00c9      	lsls	r1, r1, #3
 800835c:	4401      	add	r1, r0
 800835e:	e9c1 2300 	strd	r2, r3, [r1]
    for (i = 0; i < 126; i++) {
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	3301      	adds	r3, #1
 8008366:	607b      	str	r3, [r7, #4]
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2b7d      	cmp	r3, #125	; 0x7d
 800836c:	dda4      	ble.n	80082b8 <SIM0_initialize+0x50>
    }

    SIM0_DW.Memory1_PreviousInput = SIM0_P.Memory1_InitialCondition;
 800836e:	4b77      	ldr	r3, [pc, #476]	; (800854c <SIM0_initialize+0x2e4>)
 8008370:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8008374:	3308      	adds	r3, #8
 8008376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800837a:	4975      	ldr	r1, [pc, #468]	; (8008550 <SIM0_initialize+0x2e8>)
 800837c:	f501 51bf 	add.w	r1, r1, #6112	; 0x17e0
 8008380:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_DW.Memory2_PreviousInput = SIM0_P.Memory2_InitialCondition;
 8008384:	4b71      	ldr	r3, [pc, #452]	; (800854c <SIM0_initialize+0x2e4>)
 8008386:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800838a:	3310      	adds	r3, #16
 800838c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008390:	4b6f      	ldr	r3, [pc, #444]	; (8008550 <SIM0_initialize+0x2e8>)
 8008392:	f503 53bf 	add.w	r3, r3, #6112	; 0x17e0
 8008396:	3308      	adds	r3, #8
 8008398:	e9c3 0100 	strd	r0, r1, [r3]
    SIM0_DW.Memory_PreviousInput_m = SIM0_P.SRFlipFlop2_initial_condition;
 800839c:	4b6b      	ldr	r3, [pc, #428]	; (800854c <SIM0_initialize+0x2e4>)
 800839e:	f893 2bf0 	ldrb.w	r2, [r3, #3056]	; 0xbf0
 80083a2:	4b6b      	ldr	r3, [pc, #428]	; (8008550 <SIM0_initialize+0x2e8>)
 80083a4:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 80083a8:	3318      	adds	r3, #24
 80083aa:	701a      	strb	r2, [r3, #0]
    SIM0_DW.Memory3_PreviousInput = SIM0_P.Memory3_InitialCondition;
 80083ac:	4b67      	ldr	r3, [pc, #412]	; (800854c <SIM0_initialize+0x2e4>)
 80083ae:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80083b2:	3318      	adds	r3, #24
 80083b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80083b8:	4b65      	ldr	r3, [pc, #404]	; (8008550 <SIM0_initialize+0x2e8>)
 80083ba:	f503 53bf 	add.w	r3, r3, #6112	; 0x17e0
 80083be:	3310      	adds	r3, #16
 80083c0:	e9c3 0100 	strd	r0, r1, [r3]
    SIM0_DW.Memory4_PreviousInput = SIM0_P.Memory4_InitialCondition;
 80083c4:	4b61      	ldr	r3, [pc, #388]	; (800854c <SIM0_initialize+0x2e4>)
 80083c6:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 80083ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80083ce:	4b60      	ldr	r3, [pc, #384]	; (8008550 <SIM0_initialize+0x2e8>)
 80083d0:	f503 53bf 	add.w	r3, r3, #6112	; 0x17e0
 80083d4:	3318      	adds	r3, #24
 80083d6:	e9c3 0100 	strd	r0, r1, [r3]
    SIM0_DW.Memory_PreviousInput_c = SIM0_P.SRFlipFlop1_initial_condition;
 80083da:	4b5c      	ldr	r3, [pc, #368]	; (800854c <SIM0_initialize+0x2e4>)
 80083dc:	f893 2bf1 	ldrb.w	r2, [r3, #3057]	; 0xbf1
 80083e0:	4b5b      	ldr	r3, [pc, #364]	; (8008550 <SIM0_initialize+0x2e8>)
 80083e2:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 80083e6:	3319      	adds	r3, #25
 80083e8:	701a      	strb	r2, [r3, #0]
    SIM0_DW.Memory5_PreviousInput = SIM0_P.Memory5_InitialCondition;
 80083ea:	4b58      	ldr	r3, [pc, #352]	; (800854c <SIM0_initialize+0x2e4>)
 80083ec:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 80083f0:	3308      	adds	r3, #8
 80083f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083f6:	4956      	ldr	r1, [pc, #344]	; (8008550 <SIM0_initialize+0x2e8>)
 80083f8:	f501 51c0 	add.w	r1, r1, #6144	; 0x1800
 80083fc:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_DW.Delay1_DSTATE = SIM0_P.Delay1_InitialCondition;
 8008400:	4b52      	ldr	r3, [pc, #328]	; (800854c <SIM0_initialize+0x2e4>)
 8008402:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8008406:	3310      	adds	r3, #16
 8008408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800840c:	4950      	ldr	r1, [pc, #320]	; (8008550 <SIM0_initialize+0x2e8>)
 800840e:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_DW.Delay3_DSTATE[0] = SIM0_P.Delay3_InitialCondition;
 8008412:	4b4e      	ldr	r3, [pc, #312]	; (800854c <SIM0_initialize+0x2e4>)
 8008414:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8008418:	3318      	adds	r3, #24
 800841a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800841e:	494c      	ldr	r1, [pc, #304]	; (8008550 <SIM0_initialize+0x2e8>)
 8008420:	e9c1 2302 	strd	r2, r3, [r1, #8]
    SIM0_DW.Delay2_DSTATE[0] = SIM0_P.Delay2_InitialCondition;
 8008424:	4b49      	ldr	r3, [pc, #292]	; (800854c <SIM0_initialize+0x2e4>)
 8008426:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 800842a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800842e:	4948      	ldr	r1, [pc, #288]	; (8008550 <SIM0_initialize+0x2e8>)
 8008430:	e9c1 2306 	strd	r2, r3, [r1, #24]
    SIM0_DW.Delay3_DSTATE[1] = SIM0_P.Delay3_InitialCondition;
 8008434:	4b45      	ldr	r3, [pc, #276]	; (800854c <SIM0_initialize+0x2e4>)
 8008436:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800843a:	3318      	adds	r3, #24
 800843c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008440:	4943      	ldr	r1, [pc, #268]	; (8008550 <SIM0_initialize+0x2e8>)
 8008442:	e9c1 2304 	strd	r2, r3, [r1, #16]
    SIM0_DW.Delay2_DSTATE[1] = SIM0_P.Delay2_InitialCondition;
 8008446:	4b41      	ldr	r3, [pc, #260]	; (800854c <SIM0_initialize+0x2e4>)
 8008448:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 800844c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008450:	493f      	ldr	r1, [pc, #252]	; (8008550 <SIM0_initialize+0x2e8>)
 8008452:	e9c1 2308 	strd	r2, r3, [r1, #32]
    SIM0_DW.Memory6_PreviousInput = SIM0_P.Memory6_InitialCondition;
 8008456:	4b3d      	ldr	r3, [pc, #244]	; (800854c <SIM0_initialize+0x2e4>)
 8008458:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 800845c:	3308      	adds	r3, #8
 800845e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008462:	4b3b      	ldr	r3, [pc, #236]	; (8008550 <SIM0_initialize+0x2e8>)
 8008464:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 8008468:	3308      	adds	r3, #8
 800846a:	e9c3 0100 	strd	r0, r1, [r3]
    SIM0_DW.Memory7_PreviousInput = SIM0_P.Memory7_InitialCondition;
 800846e:	4b37      	ldr	r3, [pc, #220]	; (800854c <SIM0_initialize+0x2e4>)
 8008470:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8008474:	3310      	adds	r3, #16
 8008476:	e9d3 0100 	ldrd	r0, r1, [r3]
 800847a:	4b35      	ldr	r3, [pc, #212]	; (8008550 <SIM0_initialize+0x2e8>)
 800847c:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 8008480:	3310      	adds	r3, #16
 8008482:	e9c3 0100 	strd	r0, r1, [r3]
    SIM0_DW.Memory22_PreviousInput = SIM0_P.Memory22_InitialCondition;
 8008486:	4b31      	ldr	r3, [pc, #196]	; (800854c <SIM0_initialize+0x2e4>)
 8008488:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 800848c:	3318      	adds	r3, #24
 800848e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008492:	4b2f      	ldr	r3, [pc, #188]	; (8008550 <SIM0_initialize+0x2e8>)
 8008494:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 8008498:	3318      	adds	r3, #24
 800849a:	e9c3 0100 	strd	r0, r1, [r3]
    SIM0_DW.Memory17_PreviousInput = SIM0_P.Memory17_InitialCondition;
 800849e:	4b2b      	ldr	r3, [pc, #172]	; (800854c <SIM0_initialize+0x2e4>)
 80084a0:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 80084a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084a8:	4929      	ldr	r1, [pc, #164]	; (8008550 <SIM0_initialize+0x2e8>)
 80084aa:	f501 51c1 	add.w	r1, r1, #6176	; 0x1820
 80084ae:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_DW.Memory16_PreviousInput = SIM0_P.Memory16_InitialCondition;
 80084b2:	4b26      	ldr	r3, [pc, #152]	; (800854c <SIM0_initialize+0x2e4>)
 80084b4:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 80084b8:	3308      	adds	r3, #8
 80084ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 80084be:	4b24      	ldr	r3, [pc, #144]	; (8008550 <SIM0_initialize+0x2e8>)
 80084c0:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 80084c4:	3308      	adds	r3, #8
 80084c6:	e9c3 0100 	strd	r0, r1, [r3]
    SIM0_DW.Memory18_PreviousInput = SIM0_P.Memory18_InitialCondition;
 80084ca:	4b20      	ldr	r3, [pc, #128]	; (800854c <SIM0_initialize+0x2e4>)
 80084cc:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 80084d0:	3310      	adds	r3, #16
 80084d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80084d6:	4b1e      	ldr	r3, [pc, #120]	; (8008550 <SIM0_initialize+0x2e8>)
 80084d8:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 80084dc:	3310      	adds	r3, #16
 80084de:	e9c3 0100 	strd	r0, r1, [r3]
    SIM0_DW.Memory_PreviousInput_a = SIM0_P.Memory_InitialCondition;
 80084e2:	4b1a      	ldr	r3, [pc, #104]	; (800854c <SIM0_initialize+0x2e4>)
 80084e4:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 80084e8:	3318      	adds	r3, #24
 80084ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80084ee:	4b18      	ldr	r3, [pc, #96]	; (8008550 <SIM0_initialize+0x2e8>)
 80084f0:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 80084f4:	3318      	adds	r3, #24
 80084f6:	e9c3 0100 	strd	r0, r1, [r3]
    SIM0_DW.Memory13_PreviousInput = SIM0_P.Memory13_InitialCondition;
 80084fa:	4b14      	ldr	r3, [pc, #80]	; (800854c <SIM0_initialize+0x2e4>)
 80084fc:	f503 5385 	add.w	r3, r3, #4256	; 0x10a0
 8008500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008504:	4912      	ldr	r1, [pc, #72]	; (8008550 <SIM0_initialize+0x2e8>)
 8008506:	f501 51c2 	add.w	r1, r1, #6208	; 0x1840
 800850a:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_DW.Memory14_PreviousInput = SIM0_P.Memory14_InitialCondition;
 800850e:	4b0f      	ldr	r3, [pc, #60]	; (800854c <SIM0_initialize+0x2e4>)
 8008510:	f503 5385 	add.w	r3, r3, #4256	; 0x10a0
 8008514:	3308      	adds	r3, #8
 8008516:	e9d3 0100 	ldrd	r0, r1, [r3]
 800851a:	4b0d      	ldr	r3, [pc, #52]	; (8008550 <SIM0_initialize+0x2e8>)
 800851c:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 8008520:	3308      	adds	r3, #8
 8008522:	e9c3 0100 	strd	r0, r1, [r3]
    SIM0_DW.Memory8_PreviousInput = SIM0_P.Memory8_InitialCondition;
 8008526:	4b09      	ldr	r3, [pc, #36]	; (800854c <SIM0_initialize+0x2e4>)
 8008528:	f503 5385 	add.w	r3, r3, #4256	; 0x10a0
 800852c:	3310      	adds	r3, #16
 800852e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008532:	4b07      	ldr	r3, [pc, #28]	; (8008550 <SIM0_initialize+0x2e8>)
 8008534:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 8008538:	3310      	adds	r3, #16
 800853a:	e9c3 0100 	strd	r0, r1, [r3]
  }
}
 800853e:	bf00      	nop
 8008540:	370c      	adds	r7, #12
 8008542:	46bd      	mov	sp, r7
 8008544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008548:	4770      	bx	lr
 800854a:	bf00      	nop
 800854c:	20000360 	.word	0x20000360
 8008550:	2001c148 	.word	0x2001c148

08008554 <UTMeanCovSqrt_C2vgLQ4W>:
#include "qr_5a2P8Gh6.h"

void UTMeanCovSqrt_C2vgLQ4W(const real_T meanWeights[2], const real_T
  covWeights[2], real_T OOM, real_T Y1[3], real_T Y2[18], const real_T X1[3],
  real_T X2[18], real_T Ymean[3], real_T Sy[9], real_T Pxy[9])
{
 8008554:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008558:	f5ad 7d2f 	sub.w	sp, sp, #700	; 0x2bc
 800855c:	af00      	add	r7, sp, #0
 800855e:	f107 0414 	add.w	r4, r7, #20
 8008562:	6020      	str	r0, [r4, #0]
 8008564:	f107 0010 	add.w	r0, r7, #16
 8008568:	6001      	str	r1, [r0, #0]
 800856a:	f107 0108 	add.w	r1, r7, #8
 800856e:	ed81 0b00 	vstr	d0, [r1]
 8008572:	1d39      	adds	r1, r7, #4
 8008574:	600a      	str	r2, [r1, #0]
 8008576:	463a      	mov	r2, r7
 8008578:	6013      	str	r3, [r2, #0]
  int32_T i;
  int32_T iAcol;
  int32_T i_0;
  int32_T i_1;
  int32_T kk;
  Ymean[0] = Y1[0] * meanWeights[0];
 800857a:	1d3b      	adds	r3, r7, #4
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008582:	f107 0314 	add.w	r3, r7, #20
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800858c:	f7f8 f826 	bl	80005dc <__aeabi_dmul>
 8008590:	4602      	mov	r2, r0
 8008592:	460b      	mov	r3, r1
 8008594:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8008598:	e9c1 2300 	strd	r2, r3, [r1]
  Ymean[1] = meanWeights[0] * Y1[1];
 800859c:	f107 0314 	add.w	r3, r7, #20
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80085a6:	1d3b      	adds	r3, r7, #4
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	3308      	adds	r3, #8
 80085ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085b0:	f8d7 42e0 	ldr.w	r4, [r7, #736]	; 0x2e0
 80085b4:	3408      	adds	r4, #8
 80085b6:	f7f8 f811 	bl	80005dc <__aeabi_dmul>
 80085ba:	4602      	mov	r2, r0
 80085bc:	460b      	mov	r3, r1
 80085be:	e9c4 2300 	strd	r2, r3, [r4]
  Ymean[2] = meanWeights[0] * Y1[2];
 80085c2:	f107 0314 	add.w	r3, r7, #20
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80085cc:	1d3b      	adds	r3, r7, #4
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	3310      	adds	r3, #16
 80085d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085d6:	f8d7 42e0 	ldr.w	r4, [r7, #736]	; 0x2e0
 80085da:	3410      	adds	r4, #16
 80085dc:	f7f7 fffe 	bl	80005dc <__aeabi_dmul>
 80085e0:	4602      	mov	r2, r0
 80085e2:	460b      	mov	r3, r1
 80085e4:	e9c4 2300 	strd	r2, r3, [r4]
  iAcol = 0;
 80085e8:	2300      	movs	r3, #0
 80085ea:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
  for (kk = 0; kk < 6; kk++) {
 80085ee:	2300      	movs	r3, #0
 80085f0:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 80085f4:	e079      	b.n	80086ea <UTMeanCovSqrt_C2vgLQ4W+0x196>
    Ymean[0] += Y2[iAcol] * meanWeights[1];
 80085f6:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80085fa:	e9d3 4500 	ldrd	r4, r5, [r3]
 80085fe:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008602:	00db      	lsls	r3, r3, #3
 8008604:	463a      	mov	r2, r7
 8008606:	6812      	ldr	r2, [r2, #0]
 8008608:	4413      	add	r3, r2
 800860a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800860e:	f107 0314 	add.w	r3, r7, #20
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	3308      	adds	r3, #8
 8008616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800861a:	f7f7 ffdf 	bl	80005dc <__aeabi_dmul>
 800861e:	4602      	mov	r2, r0
 8008620:	460b      	mov	r3, r1
 8008622:	4620      	mov	r0, r4
 8008624:	4629      	mov	r1, r5
 8008626:	f7f7 fe23 	bl	8000270 <__adddf3>
 800862a:	4602      	mov	r2, r0
 800862c:	460b      	mov	r3, r1
 800862e:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8008632:	e9c1 2300 	strd	r2, r3, [r1]
    Ymean[1] += Y2[iAcol + 1] * meanWeights[1];
 8008636:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800863a:	3308      	adds	r3, #8
 800863c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8008640:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008644:	3301      	adds	r3, #1
 8008646:	00db      	lsls	r3, r3, #3
 8008648:	463a      	mov	r2, r7
 800864a:	6812      	ldr	r2, [r2, #0]
 800864c:	4413      	add	r3, r2
 800864e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008652:	f107 0314 	add.w	r3, r7, #20
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	3308      	adds	r3, #8
 800865a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800865e:	f7f7 ffbd 	bl	80005dc <__aeabi_dmul>
 8008662:	4602      	mov	r2, r0
 8008664:	460b      	mov	r3, r1
 8008666:	4610      	mov	r0, r2
 8008668:	4619      	mov	r1, r3
 800866a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800866e:	f103 0608 	add.w	r6, r3, #8
 8008672:	4602      	mov	r2, r0
 8008674:	460b      	mov	r3, r1
 8008676:	4620      	mov	r0, r4
 8008678:	4629      	mov	r1, r5
 800867a:	f7f7 fdf9 	bl	8000270 <__adddf3>
 800867e:	4602      	mov	r2, r0
 8008680:	460b      	mov	r3, r1
 8008682:	e9c6 2300 	strd	r2, r3, [r6]
    Ymean[2] += Y2[iAcol + 2] * meanWeights[1];
 8008686:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800868a:	3310      	adds	r3, #16
 800868c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8008690:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008694:	3302      	adds	r3, #2
 8008696:	00db      	lsls	r3, r3, #3
 8008698:	463a      	mov	r2, r7
 800869a:	6812      	ldr	r2, [r2, #0]
 800869c:	4413      	add	r3, r2
 800869e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80086a2:	f107 0314 	add.w	r3, r7, #20
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	3308      	adds	r3, #8
 80086aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ae:	f7f7 ff95 	bl	80005dc <__aeabi_dmul>
 80086b2:	4602      	mov	r2, r0
 80086b4:	460b      	mov	r3, r1
 80086b6:	4610      	mov	r0, r2
 80086b8:	4619      	mov	r1, r3
 80086ba:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80086be:	f103 0610 	add.w	r6, r3, #16
 80086c2:	4602      	mov	r2, r0
 80086c4:	460b      	mov	r3, r1
 80086c6:	4620      	mov	r0, r4
 80086c8:	4629      	mov	r1, r5
 80086ca:	f7f7 fdd1 	bl	8000270 <__adddf3>
 80086ce:	4602      	mov	r2, r0
 80086d0:	460b      	mov	r3, r1
 80086d2:	e9c6 2300 	strd	r2, r3, [r6]
    iAcol += 3;
 80086d6:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80086da:	3303      	adds	r3, #3
 80086dc:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
  for (kk = 0; kk < 6; kk++) {
 80086e0:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80086e4:	3301      	adds	r3, #1
 80086e6:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 80086ea:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80086ee:	2b05      	cmp	r3, #5
 80086f0:	dd81      	ble.n	80085f6 <UTMeanCovSqrt_C2vgLQ4W+0xa2>
  }

  signOOM = Ymean[0] * OOM;
 80086f2:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80086f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086fa:	f107 0108 	add.w	r1, r7, #8
 80086fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008702:	f7f7 ff6b 	bl	80005dc <__aeabi_dmul>
 8008706:	4602      	mov	r2, r0
 8008708:	460b      	mov	r3, r1
 800870a:	e9c7 23a8 	strd	r2, r3, [r7, #672]	; 0x2a0
  scale = Y1[0] - signOOM;
 800870e:	1d3b      	adds	r3, r7, #4
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008716:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 800871a:	f7f7 fda7 	bl	800026c <__aeabi_dsub>
 800871e:	4602      	mov	r2, r0
 8008720:	460b      	mov	r3, r1
 8008722:	e9c7 23aa 	strd	r2, r3, [r7, #680]	; 0x2a8
  Ymean[0] = signOOM;
 8008726:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 800872a:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 800872e:	e9c1 2300 	strd	r2, r3, [r1]
  Y1[0] = scale;
 8008732:	1d3b      	adds	r3, r7, #4
 8008734:	6819      	ldr	r1, [r3, #0]
 8008736:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 800873a:	e9c1 2300 	strd	r2, r3, [r1]
  signOOM = Ymean[1] * OOM;
 800873e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8008742:	3308      	adds	r3, #8
 8008744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008748:	f107 0108 	add.w	r1, r7, #8
 800874c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008750:	f7f7 ff44 	bl	80005dc <__aeabi_dmul>
 8008754:	4602      	mov	r2, r0
 8008756:	460b      	mov	r3, r1
 8008758:	e9c7 23a8 	strd	r2, r3, [r7, #672]	; 0x2a0
  absxk = Y1[1] - signOOM;
 800875c:	1d3b      	adds	r3, r7, #4
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	3308      	adds	r3, #8
 8008762:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008766:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 800876a:	f7f7 fd7f 	bl	800026c <__aeabi_dsub>
 800876e:	4602      	mov	r2, r0
 8008770:	460b      	mov	r3, r1
 8008772:	e9c7 239e 	strd	r2, r3, [r7, #632]	; 0x278
  Ymean[1] = signOOM;
 8008776:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800877a:	f103 0108 	add.w	r1, r3, #8
 800877e:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 8008782:	e9c1 2300 	strd	r2, r3, [r1]
  Y1[1] = absxk;
 8008786:	1d3b      	adds	r3, r7, #4
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f103 0108 	add.w	r1, r3, #8
 800878e:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 8008792:	e9c1 2300 	strd	r2, r3, [r1]
  signOOM = Ymean[2] * OOM;
 8008796:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800879a:	3310      	adds	r3, #16
 800879c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087a0:	f107 0108 	add.w	r1, r7, #8
 80087a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80087a8:	f7f7 ff18 	bl	80005dc <__aeabi_dmul>
 80087ac:	4602      	mov	r2, r0
 80087ae:	460b      	mov	r3, r1
 80087b0:	e9c7 23a8 	strd	r2, r3, [r7, #672]	; 0x2a0
  b_t = Y1[2] - signOOM;
 80087b4:	1d3b      	adds	r3, r7, #4
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	3310      	adds	r3, #16
 80087ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 80087be:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 80087c2:	f7f7 fd53 	bl	800026c <__aeabi_dsub>
 80087c6:	4602      	mov	r2, r0
 80087c8:	460b      	mov	r3, r1
 80087ca:	e9c7 239c 	strd	r2, r3, [r7, #624]	; 0x270
  Ymean[2] = signOOM;
 80087ce:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80087d2:	f103 0110 	add.w	r1, r3, #16
 80087d6:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 80087da:	e9c1 2300 	strd	r2, r3, [r1]
  Y1[2] = b_t;
 80087de:	1d3b      	adds	r3, r7, #4
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f103 0110 	add.w	r1, r3, #16
 80087e6:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 80087ea:	e9c1 2300 	strd	r2, r3, [r1]
  iAcol = 0;
 80087ee:	2300      	movs	r3, #0
 80087f0:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
  for (kk = 0; kk < 6; kk++) {
 80087f4:	2300      	movs	r3, #0
 80087f6:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 80087fa:	e054      	b.n	80088a6 <UTMeanCovSqrt_C2vgLQ4W+0x352>
    Y2[iAcol] -= Ymean[0];
 80087fc:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008800:	00db      	lsls	r3, r3, #3
 8008802:	463a      	mov	r2, r7
 8008804:	6812      	ldr	r2, [r2, #0]
 8008806:	4413      	add	r3, r2
 8008808:	e9d3 0100 	ldrd	r0, r1, [r3]
 800880c:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8008810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008814:	f8d7 4298 	ldr.w	r4, [r7, #664]	; 0x298
 8008818:	00e4      	lsls	r4, r4, #3
 800881a:	463d      	mov	r5, r7
 800881c:	682d      	ldr	r5, [r5, #0]
 800881e:	442c      	add	r4, r5
 8008820:	f7f7 fd24 	bl	800026c <__aeabi_dsub>
 8008824:	4602      	mov	r2, r0
 8008826:	460b      	mov	r3, r1
 8008828:	e9c4 2300 	strd	r2, r3, [r4]
    Y2[iAcol + 1] -= Ymean[1];
 800882c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008830:	3301      	adds	r3, #1
 8008832:	00db      	lsls	r3, r3, #3
 8008834:	463a      	mov	r2, r7
 8008836:	6812      	ldr	r2, [r2, #0]
 8008838:	4413      	add	r3, r2
 800883a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800883e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8008842:	3308      	adds	r3, #8
 8008844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008848:	f8d7 4298 	ldr.w	r4, [r7, #664]	; 0x298
 800884c:	3401      	adds	r4, #1
 800884e:	00e4      	lsls	r4, r4, #3
 8008850:	463d      	mov	r5, r7
 8008852:	682d      	ldr	r5, [r5, #0]
 8008854:	442c      	add	r4, r5
 8008856:	f7f7 fd09 	bl	800026c <__aeabi_dsub>
 800885a:	4602      	mov	r2, r0
 800885c:	460b      	mov	r3, r1
 800885e:	e9c4 2300 	strd	r2, r3, [r4]
    Y2[iAcol + 2] -= signOOM;
 8008862:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008866:	3302      	adds	r3, #2
 8008868:	00db      	lsls	r3, r3, #3
 800886a:	463a      	mov	r2, r7
 800886c:	6812      	ldr	r2, [r2, #0]
 800886e:	4413      	add	r3, r2
 8008870:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008874:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008878:	3302      	adds	r3, #2
 800887a:	00db      	lsls	r3, r3, #3
 800887c:	463a      	mov	r2, r7
 800887e:	6812      	ldr	r2, [r2, #0]
 8008880:	18d4      	adds	r4, r2, r3
 8008882:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 8008886:	f7f7 fcf1 	bl	800026c <__aeabi_dsub>
 800888a:	4602      	mov	r2, r0
 800888c:	460b      	mov	r3, r1
 800888e:	e9c4 2300 	strd	r2, r3, [r4]
    iAcol += 3;
 8008892:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008896:	3303      	adds	r3, #3
 8008898:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
  for (kk = 0; kk < 6; kk++) {
 800889c:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80088a0:	3301      	adds	r3, #1
 80088a2:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 80088a6:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80088aa:	2b05      	cmp	r3, #5
 80088ac:	dda6      	ble.n	80087fc <UTMeanCovSqrt_C2vgLQ4W+0x2a8>
  }

  if (rtIsNaN(OOM)) {
 80088ae:	f107 0308 	add.w	r3, r7, #8
 80088b2:	ed93 0b00 	vldr	d0, [r3]
 80088b6:	f004 fbed 	bl	800d094 <rtIsNaN>
 80088ba:	4603      	mov	r3, r0
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d006      	beq.n	80088ce <UTMeanCovSqrt_C2vgLQ4W+0x37a>
    signOOM = OOM;
 80088c0:	f107 0308 	add.w	r3, r7, #8
 80088c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088c8:	e9c7 23a8 	strd	r2, r3, [r7, #672]	; 0x2a0
 80088cc:	e029      	b.n	8008922 <UTMeanCovSqrt_C2vgLQ4W+0x3ce>
  } else if (OOM < 0.0) {
 80088ce:	f107 0108 	add.w	r1, r7, #8
 80088d2:	f04f 0200 	mov.w	r2, #0
 80088d6:	f04f 0300 	mov.w	r3, #0
 80088da:	e9d1 0100 	ldrd	r0, r1, [r1]
 80088de:	f7f8 f8ef 	bl	8000ac0 <__aeabi_dcmplt>
 80088e2:	4603      	mov	r3, r0
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d005      	beq.n	80088f4 <UTMeanCovSqrt_C2vgLQ4W+0x3a0>
    signOOM = -1.0;
 80088e8:	f04f 0200 	mov.w	r2, #0
 80088ec:	4bce      	ldr	r3, [pc, #824]	; (8008c28 <UTMeanCovSqrt_C2vgLQ4W+0x6d4>)
 80088ee:	e9c7 23a8 	strd	r2, r3, [r7, #672]	; 0x2a0
 80088f2:	e016      	b.n	8008922 <UTMeanCovSqrt_C2vgLQ4W+0x3ce>
  } else {
    signOOM = (OOM > 0.0);
 80088f4:	f107 0108 	add.w	r1, r7, #8
 80088f8:	f04f 0200 	mov.w	r2, #0
 80088fc:	f04f 0300 	mov.w	r3, #0
 8008900:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008904:	f7f8 f8fa 	bl	8000afc <__aeabi_dcmpgt>
 8008908:	4603      	mov	r3, r0
 800890a:	2b00      	cmp	r3, #0
 800890c:	d003      	beq.n	8008916 <UTMeanCovSqrt_C2vgLQ4W+0x3c2>
 800890e:	f04f 0200 	mov.w	r2, #0
 8008912:	4bc6      	ldr	r3, [pc, #792]	; (8008c2c <UTMeanCovSqrt_C2vgLQ4W+0x6d8>)
 8008914:	e003      	b.n	800891e <UTMeanCovSqrt_C2vgLQ4W+0x3ca>
 8008916:	f04f 0200 	mov.w	r2, #0
 800891a:	f04f 0300 	mov.w	r3, #0
 800891e:	e9c7 23a8 	strd	r2, r3, [r7, #672]	; 0x2a0
  }

  covWeights_0 = signOOM * covWeights[0];
 8008922:	f107 0310 	add.w	r3, r7, #16
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800892c:	e9d7 01a8 	ldrd	r0, r1, [r7, #672]	; 0x2a0
 8008930:	f7f7 fe54 	bl	80005dc <__aeabi_dmul>
 8008934:	4602      	mov	r2, r0
 8008936:	460b      	mov	r3, r1
 8008938:	e9c7 23ac 	strd	r2, r3, [r7, #688]	; 0x2b0
  covWeights_1 = signOOM * covWeights[1];
 800893c:	f107 0310 	add.w	r3, r7, #16
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	3308      	adds	r3, #8
 8008944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008948:	e9d7 01a8 	ldrd	r0, r1, [r7, #672]	; 0x2a0
 800894c:	f7f7 fe46 	bl	80005dc <__aeabi_dmul>
 8008950:	4602      	mov	r2, r0
 8008952:	460b      	mov	r3, r1
 8008954:	e9c7 239a 	strd	r2, r3, [r7, #616]	; 0x268
  OOM *= signOOM;
 8008958:	f107 0408 	add.w	r4, r7, #8
 800895c:	f107 0108 	add.w	r1, r7, #8
 8008960:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 8008964:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008968:	f7f7 fe38 	bl	80005dc <__aeabi_dmul>
 800896c:	4602      	mov	r2, r0
 800896e:	460b      	mov	r3, r1
 8008970:	e9c4 2300 	strd	r2, r3, [r4]
  signOOM = sqrt(OOM);
 8008974:	f107 0308 	add.w	r3, r7, #8
 8008978:	ed93 0b00 	vldr	d0, [r3]
 800897c:	f012 fd34 	bl	801b3e8 <sqrt>
 8008980:	ed87 0ba8 	vstr	d0, [r7, #672]	; 0x2a0
  temp = sqrt(covWeights_1);
 8008984:	ed97 0b9a 	vldr	d0, [r7, #616]	; 0x268
 8008988:	f012 fd2e 	bl	801b3e8 <sqrt>
 800898c:	eeb0 7a40 	vmov.f32	s14, s0
 8008990:	eef0 7a60 	vmov.f32	s15, s1
 8008994:	f107 0318 	add.w	r3, r7, #24
 8008998:	ed83 7b00 	vstr	d7, [r3]
  kk = 0;
 800899c:	2300      	movs	r3, #0
 800899e:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
  for (iAcol = 0; iAcol < 3; iAcol++) {
 80089a2:	2300      	movs	r3, #0
 80089a4:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 80089a8:	e03c      	b.n	8008a24 <UTMeanCovSqrt_C2vgLQ4W+0x4d0>
    i_1 = 0;
 80089aa:	2300      	movs	r3, #0
 80089ac:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
    for (i = 0; i < 6; i++) {
 80089b0:	2300      	movs	r3, #0
 80089b2:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 80089b6:	e027      	b.n	8008a08 <UTMeanCovSqrt_C2vgLQ4W+0x4b4>
      temp_0[i + kk] = Y2[i_1 + iAcol] * temp;
 80089b8:	f8d7 2290 	ldr.w	r2, [r7, #656]	; 0x290
 80089bc:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80089c0:	4413      	add	r3, r2
 80089c2:	00db      	lsls	r3, r3, #3
 80089c4:	463a      	mov	r2, r7
 80089c6:	6812      	ldr	r2, [r2, #0]
 80089c8:	4413      	add	r3, r2
 80089ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80089ce:	f107 0318 	add.w	r3, r7, #24
 80089d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089d6:	f8d7 529c 	ldr.w	r5, [r7, #668]	; 0x29c
 80089da:	f8d7 428c 	ldr.w	r4, [r7, #652]	; 0x28c
 80089de:	442c      	add	r4, r5
 80089e0:	f7f7 fdfc 	bl	80005dc <__aeabi_dmul>
 80089e4:	4602      	mov	r2, r0
 80089e6:	460b      	mov	r3, r1
 80089e8:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 80089ec:	00e1      	lsls	r1, r4, #3
 80089ee:	4401      	add	r1, r0
 80089f0:	e9c1 2300 	strd	r2, r3, [r1]
      i_1 += 3;
 80089f4:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 80089f8:	3303      	adds	r3, #3
 80089fa:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
    for (i = 0; i < 6; i++) {
 80089fe:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8008a02:	3301      	adds	r3, #1
 8008a04:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 8008a08:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8008a0c:	2b05      	cmp	r3, #5
 8008a0e:	ddd3      	ble.n	80089b8 <UTMeanCovSqrt_C2vgLQ4W+0x464>
    }

    kk += 6;
 8008a10:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8008a14:	3306      	adds	r3, #6
 8008a16:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
  for (iAcol = 0; iAcol < 3; iAcol++) {
 8008a1a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008a1e:	3301      	adds	r3, #1
 8008a20:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8008a24:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008a28:	2b02      	cmp	r3, #2
 8008a2a:	ddbe      	ble.n	80089aa <UTMeanCovSqrt_C2vgLQ4W+0x456>
  }

  qr_DvOBrgQi(temp_0, a__1, Sy);
 8008a2c:	f507 71e8 	add.w	r1, r7, #464	; 0x1d0
 8008a30:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008a34:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8008a38:	4618      	mov	r0, r3
 8008a3a:	f002 ff43 	bl	800b8c4 <qr_DvOBrgQi>
  if (!rtIsNaN(covWeights_0)) {
 8008a3e:	ed97 0bac 	vldr	d0, [r7, #688]	; 0x2b0
 8008a42:	f004 fb27 	bl	800d094 <rtIsNaN>
 8008a46:	4603      	mov	r3, r0
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d125      	bne.n	8008a98 <UTMeanCovSqrt_C2vgLQ4W+0x544>
    if (covWeights_0 < 0.0) {
 8008a4c:	f04f 0200 	mov.w	r2, #0
 8008a50:	f04f 0300 	mov.w	r3, #0
 8008a54:	e9d7 01ac 	ldrd	r0, r1, [r7, #688]	; 0x2b0
 8008a58:	f7f8 f832 	bl	8000ac0 <__aeabi_dcmplt>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d005      	beq.n	8008a6e <UTMeanCovSqrt_C2vgLQ4W+0x51a>
      covWeights_0 = -1.0;
 8008a62:	f04f 0200 	mov.w	r2, #0
 8008a66:	4b70      	ldr	r3, [pc, #448]	; (8008c28 <UTMeanCovSqrt_C2vgLQ4W+0x6d4>)
 8008a68:	e9c7 23ac 	strd	r2, r3, [r7, #688]	; 0x2b0
 8008a6c:	e014      	b.n	8008a98 <UTMeanCovSqrt_C2vgLQ4W+0x544>
    } else {
      covWeights_0 = (covWeights_0 > 0.0);
 8008a6e:	f04f 0200 	mov.w	r2, #0
 8008a72:	f04f 0300 	mov.w	r3, #0
 8008a76:	e9d7 01ac 	ldrd	r0, r1, [r7, #688]	; 0x2b0
 8008a7a:	f7f8 f83f 	bl	8000afc <__aeabi_dcmpgt>
 8008a7e:	4603      	mov	r3, r0
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d003      	beq.n	8008a8c <UTMeanCovSqrt_C2vgLQ4W+0x538>
 8008a84:	f04f 0200 	mov.w	r2, #0
 8008a88:	4b68      	ldr	r3, [pc, #416]	; (8008c2c <UTMeanCovSqrt_C2vgLQ4W+0x6d8>)
 8008a8a:	e003      	b.n	8008a94 <UTMeanCovSqrt_C2vgLQ4W+0x540>
 8008a8c:	f04f 0200 	mov.w	r2, #0
 8008a90:	f04f 0300 	mov.w	r3, #0
 8008a94:	e9c7 23ac 	strd	r2, r3, [r7, #688]	; 0x2b0
    }
  }

  if (covWeights_0 == 1.0) {
 8008a98:	f04f 0200 	mov.w	r2, #0
 8008a9c:	4b63      	ldr	r3, [pc, #396]	; (8008c2c <UTMeanCovSqrt_C2vgLQ4W+0x6d8>)
 8008a9e:	e9d7 01ac 	ldrd	r0, r1, [r7, #688]	; 0x2b0
 8008aa2:	f7f8 f803 	bl	8000aac <__aeabi_dcmpeq>
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	f000 81bd 	beq.w	8008e28 <UTMeanCovSqrt_C2vgLQ4W+0x8d4>
    for (iAcol = 0; iAcol < 2; iAcol++) {
 8008aae:	2300      	movs	r3, #0
 8008ab0:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8008ab4:	e011      	b.n	8008ada <UTMeanCovSqrt_C2vgLQ4W+0x586>
      Sy[iAcol + 1] = 0.0;
 8008ab6:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008aba:	3301      	adds	r3, #1
 8008abc:	00db      	lsls	r3, r3, #3
 8008abe:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8008ac2:	18d1      	adds	r1, r2, r3
 8008ac4:	f04f 0200 	mov.w	r2, #0
 8008ac8:	f04f 0300 	mov.w	r3, #0
 8008acc:	e9c1 2300 	strd	r2, r3, [r1]
    for (iAcol = 0; iAcol < 2; iAcol++) {
 8008ad0:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008ad4:	3301      	adds	r3, #1
 8008ad6:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8008ada:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008ade:	2b01      	cmp	r3, #1
 8008ae0:	dde9      	ble.n	8008ab6 <UTMeanCovSqrt_C2vgLQ4W+0x562>
    }

    Sy[5] = 0.0;
 8008ae2:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8008ae6:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8008aea:	f04f 0200 	mov.w	r2, #0
 8008aee:	f04f 0300 	mov.w	r3, #0
 8008af2:	e9c1 2300 	strd	r2, r3, [r1]
    c[2] = 0.0;
 8008af6:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8008afa:	f04f 0200 	mov.w	r2, #0
 8008afe:	f04f 0300 	mov.w	r3, #0
 8008b02:	e9c1 2304 	strd	r2, r3, [r1, #16]
    s[2] = 0.0;
 8008b06:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8008b0a:	f04f 0200 	mov.w	r2, #0
 8008b0e:	f04f 0300 	mov.w	r3, #0
 8008b12:	e9c1 2304 	strd	r2, r3, [r1, #16]
    rotate_LZ7ctbe0(Sy[0], scale, &c[0], &s[0], &Sy[0]);
 8008b16:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8008b1a:	ed93 7b00 	vldr	d7, [r3]
 8008b1e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8008b22:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008b26:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	ed97 1baa 	vldr	d1, [r7, #680]	; 0x2a8
 8008b30:	eeb0 0a47 	vmov.f32	s0, s14
 8008b34:	eef0 0a67 	vmov.f32	s1, s15
 8008b38:	f004 f814 	bl	800cb64 <rotate_LZ7ctbe0>
    temp = c[0] * absxk - s[0] * Sy[3];
 8008b3c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008b40:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008b44:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 8008b48:	f7f7 fd48 	bl	80005dc <__aeabi_dmul>
 8008b4c:	4602      	mov	r2, r0
 8008b4e:	460b      	mov	r3, r1
 8008b50:	4614      	mov	r4, r2
 8008b52:	461d      	mov	r5, r3
 8008b54:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008b58:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008b5c:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8008b60:	3318      	adds	r3, #24
 8008b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b66:	f7f7 fd39 	bl	80005dc <__aeabi_dmul>
 8008b6a:	4602      	mov	r2, r0
 8008b6c:	460b      	mov	r3, r1
 8008b6e:	4620      	mov	r0, r4
 8008b70:	4629      	mov	r1, r5
 8008b72:	f7f7 fb7b 	bl	800026c <__aeabi_dsub>
 8008b76:	4602      	mov	r2, r0
 8008b78:	460b      	mov	r3, r1
 8008b7a:	f107 0118 	add.w	r1, r7, #24
 8008b7e:	e9c1 2300 	strd	r2, r3, [r1]
    Sy[3] = c[0] * Sy[3] + s[0] * absxk;
 8008b82:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008b86:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008b8a:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8008b8e:	3318      	adds	r3, #24
 8008b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b94:	f7f7 fd22 	bl	80005dc <__aeabi_dmul>
 8008b98:	4602      	mov	r2, r0
 8008b9a:	460b      	mov	r3, r1
 8008b9c:	4690      	mov	r8, r2
 8008b9e:	4699      	mov	r9, r3
 8008ba0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008ba4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008ba8:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 8008bac:	f7f7 fd16 	bl	80005dc <__aeabi_dmul>
 8008bb0:	4602      	mov	r2, r0
 8008bb2:	460b      	mov	r3, r1
 8008bb4:	4610      	mov	r0, r2
 8008bb6:	4619      	mov	r1, r3
 8008bb8:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8008bbc:	f103 0418 	add.w	r4, r3, #24
 8008bc0:	4602      	mov	r2, r0
 8008bc2:	460b      	mov	r3, r1
 8008bc4:	4640      	mov	r0, r8
 8008bc6:	4649      	mov	r1, r9
 8008bc8:	f7f7 fb52 	bl	8000270 <__adddf3>
 8008bcc:	4602      	mov	r2, r0
 8008bce:	460b      	mov	r3, r1
 8008bd0:	e9c4 2300 	strd	r2, r3, [r4]
    rotate_LZ7ctbe0(Sy[4], temp, &c[1], &s[1], &Sy[4]);
 8008bd4:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8008bd8:	3320      	adds	r3, #32
 8008bda:	ed93 7b00 	vldr	d7, [r3]
 8008bde:	f107 0318 	add.w	r3, r7, #24
 8008be2:	ed93 6b00 	vldr	d6, [r3]
 8008be6:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8008bea:	f103 0220 	add.w	r2, r3, #32
 8008bee:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008bf2:	f103 0108 	add.w	r1, r3, #8
 8008bf6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008bfa:	3308      	adds	r3, #8
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	eeb0 1a46 	vmov.f32	s2, s12
 8008c02:	eef0 1a66 	vmov.f32	s3, s13
 8008c06:	eeb0 0a47 	vmov.f32	s0, s14
 8008c0a:	eef0 0a67 	vmov.f32	s1, s15
 8008c0e:	f003 ffa9 	bl	800cb64 <rotate_LZ7ctbe0>
    temp = b_t;
 8008c12:	f107 0118 	add.w	r1, r7, #24
 8008c16:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 8008c1a:	e9c1 2300 	strd	r2, r3, [r1]
    for (iAcol = 0; iAcol < 2; iAcol++) {
 8008c1e:	2300      	movs	r3, #0
 8008c20:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8008c24:	e06f      	b.n	8008d06 <UTMeanCovSqrt_C2vgLQ4W+0x7b2>
 8008c26:	bf00      	nop
 8008c28:	bff00000 	.word	0xbff00000
 8008c2c:	3ff00000 	.word	0x3ff00000
      scale = s[iAcol] * temp;
 8008c30:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8008c34:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008c38:	00db      	lsls	r3, r3, #3
 8008c3a:	4413      	add	r3, r2
 8008c3c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008c40:	f107 0318 	add.w	r3, r7, #24
 8008c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c48:	f7f7 fcc8 	bl	80005dc <__aeabi_dmul>
 8008c4c:	4602      	mov	r2, r0
 8008c4e:	460b      	mov	r3, r1
 8008c50:	e9c7 23aa 	strd	r2, r3, [r7, #680]	; 0x2a8
      absxk = Sy[iAcol + 6];
 8008c54:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008c58:	3306      	adds	r3, #6
 8008c5a:	00db      	lsls	r3, r3, #3
 8008c5c:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8008c60:	4413      	add	r3, r2
 8008c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c66:	e9c7 239e 	strd	r2, r3, [r7, #632]	; 0x278
      temp = c[iAcol] * temp - absxk * s[iAcol];
 8008c6a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8008c6e:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008c72:	00db      	lsls	r3, r3, #3
 8008c74:	4413      	add	r3, r2
 8008c76:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008c7a:	f107 0318 	add.w	r3, r7, #24
 8008c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c82:	f7f7 fcab 	bl	80005dc <__aeabi_dmul>
 8008c86:	4602      	mov	r2, r0
 8008c88:	460b      	mov	r3, r1
 8008c8a:	4614      	mov	r4, r2
 8008c8c:	461d      	mov	r5, r3
 8008c8e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8008c92:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008c96:	00db      	lsls	r3, r3, #3
 8008c98:	4413      	add	r3, r2
 8008c9a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008c9e:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 8008ca2:	f7f7 fc9b 	bl	80005dc <__aeabi_dmul>
 8008ca6:	4602      	mov	r2, r0
 8008ca8:	460b      	mov	r3, r1
 8008caa:	4620      	mov	r0, r4
 8008cac:	4629      	mov	r1, r5
 8008cae:	f7f7 fadd 	bl	800026c <__aeabi_dsub>
 8008cb2:	4602      	mov	r2, r0
 8008cb4:	460b      	mov	r3, r1
 8008cb6:	f107 0118 	add.w	r1, r7, #24
 8008cba:	e9c1 2300 	strd	r2, r3, [r1]
      Sy[iAcol + 6] = absxk * c[iAcol] + scale;
 8008cbe:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8008cc2:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008cc6:	00db      	lsls	r3, r3, #3
 8008cc8:	4413      	add	r3, r2
 8008cca:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008cce:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 8008cd2:	f7f7 fc83 	bl	80005dc <__aeabi_dmul>
 8008cd6:	4602      	mov	r2, r0
 8008cd8:	460b      	mov	r3, r1
 8008cda:	4610      	mov	r0, r2
 8008cdc:	4619      	mov	r1, r3
 8008cde:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008ce2:	3306      	adds	r3, #6
 8008ce4:	00db      	lsls	r3, r3, #3
 8008ce6:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8008cea:	18d4      	adds	r4, r2, r3
 8008cec:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 8008cf0:	f7f7 fabe 	bl	8000270 <__adddf3>
 8008cf4:	4602      	mov	r2, r0
 8008cf6:	460b      	mov	r3, r1
 8008cf8:	e9c4 2300 	strd	r2, r3, [r4]
    for (iAcol = 0; iAcol < 2; iAcol++) {
 8008cfc:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008d00:	3301      	adds	r3, #1
 8008d02:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8008d06:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008d0a:	2b01      	cmp	r3, #1
 8008d0c:	dd90      	ble.n	8008c30 <UTMeanCovSqrt_C2vgLQ4W+0x6dc>
    }

    rotate_LZ7ctbe0(Sy[8], temp, &c[2], &s[2], &Sy[8]);
 8008d0e:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8008d12:	3340      	adds	r3, #64	; 0x40
 8008d14:	ed93 7b00 	vldr	d7, [r3]
 8008d18:	f107 0318 	add.w	r3, r7, #24
 8008d1c:	ed93 6b00 	vldr	d6, [r3]
 8008d20:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8008d24:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8008d28:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008d2c:	f103 0110 	add.w	r1, r3, #16
 8008d30:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008d34:	3310      	adds	r3, #16
 8008d36:	4618      	mov	r0, r3
 8008d38:	eeb0 1a46 	vmov.f32	s2, s12
 8008d3c:	eef0 1a66 	vmov.f32	s3, s13
 8008d40:	eeb0 0a47 	vmov.f32	s0, s14
 8008d44:	eef0 0a67 	vmov.f32	s1, s15
 8008d48:	f003 ff0c 	bl	800cb64 <rotate_LZ7ctbe0>
    kk = 0;
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
    for (iAcol = 0; iAcol < 3; iAcol++) {
 8008d52:	2300      	movs	r3, #0
 8008d54:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8008d58:	e03d      	b.n	8008dd6 <UTMeanCovSqrt_C2vgLQ4W+0x882>
      Sy_0[kk] = Sy[iAcol];
 8008d5a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008d5e:	00db      	lsls	r3, r3, #3
 8008d60:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8008d64:	4413      	add	r3, r2
 8008d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d6a:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8008d6e:	f8d7 128c 	ldr.w	r1, [r7, #652]	; 0x28c
 8008d72:	00c9      	lsls	r1, r1, #3
 8008d74:	4401      	add	r1, r0
 8008d76:	e9c1 2300 	strd	r2, r3, [r1]
      Sy_0[kk + 1] = Sy[iAcol + 3];
 8008d7a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008d7e:	3303      	adds	r3, #3
 8008d80:	00db      	lsls	r3, r3, #3
 8008d82:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8008d86:	4413      	add	r3, r2
 8008d88:	f8d7 228c 	ldr.w	r2, [r7, #652]	; 0x28c
 8008d8c:	1c51      	adds	r1, r2, #1
 8008d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d92:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8008d96:	00c9      	lsls	r1, r1, #3
 8008d98:	4401      	add	r1, r0
 8008d9a:	e9c1 2300 	strd	r2, r3, [r1]
      Sy_0[kk + 2] = Sy[iAcol + 6];
 8008d9e:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008da2:	3306      	adds	r3, #6
 8008da4:	00db      	lsls	r3, r3, #3
 8008da6:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8008daa:	4413      	add	r3, r2
 8008dac:	f8d7 228c 	ldr.w	r2, [r7, #652]	; 0x28c
 8008db0:	1c91      	adds	r1, r2, #2
 8008db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008db6:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8008dba:	00c9      	lsls	r1, r1, #3
 8008dbc:	4401      	add	r1, r0
 8008dbe:	e9c1 2300 	strd	r2, r3, [r1]
      kk += 3;
 8008dc2:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8008dc6:	3303      	adds	r3, #3
 8008dc8:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
    for (iAcol = 0; iAcol < 3; iAcol++) {
 8008dcc:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008dd0:	3301      	adds	r3, #1
 8008dd2:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8008dd6:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008dda:	2b02      	cmp	r3, #2
 8008ddc:	ddbd      	ble.n	8008d5a <UTMeanCovSqrt_C2vgLQ4W+0x806>
    }

    for (kk = 0; kk < 9; kk++) {
 8008dde:	2300      	movs	r3, #0
 8008de0:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8008de4:	e01a      	b.n	8008e1c <UTMeanCovSqrt_C2vgLQ4W+0x8c8>
      Sy[kk] = signOOM * Sy_0[kk];
 8008de6:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8008dea:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8008dee:	00db      	lsls	r3, r3, #3
 8008df0:	4413      	add	r3, r2
 8008df2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008df6:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8008dfa:	00db      	lsls	r3, r3, #3
 8008dfc:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8008e00:	18d4      	adds	r4, r2, r3
 8008e02:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 8008e06:	f7f7 fbe9 	bl	80005dc <__aeabi_dmul>
 8008e0a:	4602      	mov	r2, r0
 8008e0c:	460b      	mov	r3, r1
 8008e0e:	e9c4 2300 	strd	r2, r3, [r4]
    for (kk = 0; kk < 9; kk++) {
 8008e12:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8008e16:	3301      	adds	r3, #1
 8008e18:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8008e1c:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8008e20:	2b08      	cmp	r3, #8
 8008e22:	dde0      	ble.n	8008de6 <UTMeanCovSqrt_C2vgLQ4W+0x892>
 8008e24:	f000 bf6e 	b.w	8009d04 <UTMeanCovSqrt_C2vgLQ4W+0x17b0>
    }
  } else {
    boolean_T errorCondition;
    boolean_T guard1 = false;
 8008e28:	2300      	movs	r3, #0
 8008e2a:	f887 328a 	strb.w	r3, [r7, #650]	; 0x28a
    for (iAcol = 0; iAcol < 2; iAcol++) {
 8008e2e:	2300      	movs	r3, #0
 8008e30:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8008e34:	e011      	b.n	8008e5a <UTMeanCovSqrt_C2vgLQ4W+0x906>
      Sy[iAcol + 1] = 0.0;
 8008e36:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008e3a:	3301      	adds	r3, #1
 8008e3c:	00db      	lsls	r3, r3, #3
 8008e3e:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8008e42:	18d1      	adds	r1, r2, r3
 8008e44:	f04f 0200 	mov.w	r2, #0
 8008e48:	f04f 0300 	mov.w	r3, #0
 8008e4c:	e9c1 2300 	strd	r2, r3, [r1]
    for (iAcol = 0; iAcol < 2; iAcol++) {
 8008e50:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008e54:	3301      	adds	r3, #1
 8008e56:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8008e5a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008e5e:	2b01      	cmp	r3, #1
 8008e60:	dde9      	ble.n	8008e36 <UTMeanCovSqrt_C2vgLQ4W+0x8e2>
    }

    Sy[5] = 0.0;
 8008e62:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8008e66:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8008e6a:	f04f 0200 	mov.w	r2, #0
 8008e6e:	f04f 0300 	mov.w	r3, #0
 8008e72:	e9c1 2300 	strd	r2, r3, [r1]
    errorCondition = (Sy[0] == 0.0);
 8008e76:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8008e7a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008e7e:	2301      	movs	r3, #1
 8008e80:	461c      	mov	r4, r3
 8008e82:	f04f 0200 	mov.w	r2, #0
 8008e86:	f04f 0300 	mov.w	r3, #0
 8008e8a:	f7f7 fe0f 	bl	8000aac <__aeabi_dcmpeq>
 8008e8e:	4603      	mov	r3, r0
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d101      	bne.n	8008e98 <UTMeanCovSqrt_C2vgLQ4W+0x944>
 8008e94:	2300      	movs	r3, #0
 8008e96:	461c      	mov	r4, r3
 8008e98:	b2e3      	uxtb	r3, r4
 8008e9a:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
    if (!errorCondition) {
 8008e9e:	f897 328b 	ldrb.w	r3, [r7, #651]	; 0x28b
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d114      	bne.n	8008ed0 <UTMeanCovSqrt_C2vgLQ4W+0x97c>
      errorCondition = (Sy[4] == 0.0);
 8008ea6:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8008eaa:	3320      	adds	r3, #32
 8008eac:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008eb0:	2301      	movs	r3, #1
 8008eb2:	461c      	mov	r4, r3
 8008eb4:	f04f 0200 	mov.w	r2, #0
 8008eb8:	f04f 0300 	mov.w	r3, #0
 8008ebc:	f7f7 fdf6 	bl	8000aac <__aeabi_dcmpeq>
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d101      	bne.n	8008eca <UTMeanCovSqrt_C2vgLQ4W+0x976>
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	461c      	mov	r4, r3
 8008eca:	b2e3      	uxtb	r3, r4
 8008ecc:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
    }

    if (!errorCondition) {
 8008ed0:	f897 328b 	ldrb.w	r3, [r7, #651]	; 0x28b
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d114      	bne.n	8008f02 <UTMeanCovSqrt_C2vgLQ4W+0x9ae>
      errorCondition = (Sy[8] == 0.0);
 8008ed8:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8008edc:	3340      	adds	r3, #64	; 0x40
 8008ede:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008ee2:	2301      	movs	r3, #1
 8008ee4:	461c      	mov	r4, r3
 8008ee6:	f04f 0200 	mov.w	r2, #0
 8008eea:	f04f 0300 	mov.w	r3, #0
 8008eee:	f7f7 fddd 	bl	8000aac <__aeabi_dcmpeq>
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d101      	bne.n	8008efc <UTMeanCovSqrt_C2vgLQ4W+0x9a8>
 8008ef8:	2300      	movs	r3, #0
 8008efa:	461c      	mov	r4, r3
 8008efc:	b2e3      	uxtb	r3, r4
 8008efe:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
    }

    guard1 = false;
 8008f02:	2300      	movs	r3, #0
 8008f04:	f887 328a 	strb.w	r3, [r7, #650]	; 0x28a
    if (errorCondition) {
 8008f08:	f897 328b 	ldrb.w	r3, [r7, #651]	; 0x28b
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d003      	beq.n	8008f18 <UTMeanCovSqrt_C2vgLQ4W+0x9c4>
      guard1 = true;
 8008f10:	2301      	movs	r3, #1
 8008f12:	f887 328a 	strb.w	r3, [r7, #650]	; 0x28a
 8008f16:	e394      	b.n	8009642 <UTMeanCovSqrt_C2vgLQ4W+0x10ee>
    } else {
      x[2] = b_t;
 8008f18:	f107 0120 	add.w	r1, r7, #32
 8008f1c:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 8008f20:	e9c1 2304 	strd	r2, r3, [r1, #16]
      x[0] = scale / Sy[0];
 8008f24:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8008f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f2c:	e9d7 01aa 	ldrd	r0, r1, [r7, #680]	; 0x2a8
 8008f30:	f7f7 fc7e 	bl	8000830 <__aeabi_ddiv>
 8008f34:	4602      	mov	r2, r0
 8008f36:	460b      	mov	r3, r1
 8008f38:	f107 0120 	add.w	r1, r7, #32
 8008f3c:	e9c1 2300 	strd	r2, r3, [r1]
      x[1] = (absxk - x[0] * Sy[3]) / Sy[4];
 8008f40:	f107 0320 	add.w	r3, r7, #32
 8008f44:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008f48:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8008f4c:	3318      	adds	r3, #24
 8008f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f52:	f7f7 fb43 	bl	80005dc <__aeabi_dmul>
 8008f56:	4602      	mov	r2, r0
 8008f58:	460b      	mov	r3, r1
 8008f5a:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 8008f5e:	f7f7 f985 	bl	800026c <__aeabi_dsub>
 8008f62:	4602      	mov	r2, r0
 8008f64:	460b      	mov	r3, r1
 8008f66:	4610      	mov	r0, r2
 8008f68:	4619      	mov	r1, r3
 8008f6a:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8008f6e:	3320      	adds	r3, #32
 8008f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f74:	f7f7 fc5c 	bl	8000830 <__aeabi_ddiv>
 8008f78:	4602      	mov	r2, r0
 8008f7a:	460b      	mov	r3, r1
 8008f7c:	f107 0120 	add.w	r1, r7, #32
 8008f80:	e9c1 2302 	strd	r2, r3, [r1, #8]
      temp = b_t;
 8008f84:	f107 0118 	add.w	r1, r7, #24
 8008f88:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 8008f8c:	e9c1 2300 	strd	r2, r3, [r1]
      for (kk = 0; kk < 2; kk++) {
 8008f90:	2300      	movs	r3, #0
 8008f92:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8008f96:	e027      	b.n	8008fe8 <UTMeanCovSqrt_C2vgLQ4W+0xa94>
        temp -= Sy[kk + 6] * x[kk];
 8008f98:	f107 0318 	add.w	r3, r7, #24
 8008f9c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8008fa0:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8008fa4:	3306      	adds	r3, #6
 8008fa6:	00db      	lsls	r3, r3, #3
 8008fa8:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8008fac:	4413      	add	r3, r2
 8008fae:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008fb2:	f107 0220 	add.w	r2, r7, #32
 8008fb6:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8008fba:	00db      	lsls	r3, r3, #3
 8008fbc:	4413      	add	r3, r2
 8008fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fc2:	f7f7 fb0b 	bl	80005dc <__aeabi_dmul>
 8008fc6:	4602      	mov	r2, r0
 8008fc8:	460b      	mov	r3, r1
 8008fca:	4620      	mov	r0, r4
 8008fcc:	4629      	mov	r1, r5
 8008fce:	f7f7 f94d 	bl	800026c <__aeabi_dsub>
 8008fd2:	4602      	mov	r2, r0
 8008fd4:	460b      	mov	r3, r1
 8008fd6:	f107 0118 	add.w	r1, r7, #24
 8008fda:	e9c1 2300 	strd	r2, r3, [r1]
      for (kk = 0; kk < 2; kk++) {
 8008fde:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8008fe2:	3301      	adds	r3, #1
 8008fe4:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8008fe8:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8008fec:	2b01      	cmp	r3, #1
 8008fee:	ddd3      	ble.n	8008f98 <UTMeanCovSqrt_C2vgLQ4W+0xa44>
      }

      x[2] = temp / Sy[8];
 8008ff0:	f107 0318 	add.w	r3, r7, #24
 8008ff4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008ff8:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8008ffc:	3340      	adds	r3, #64	; 0x40
 8008ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009002:	f7f7 fc15 	bl	8000830 <__aeabi_ddiv>
 8009006:	4602      	mov	r2, r0
 8009008:	460b      	mov	r3, r1
 800900a:	f107 0120 	add.w	r1, r7, #32
 800900e:	e9c1 2304 	strd	r2, r3, [r1, #16]
      scale = 3.3121686421112381E-170;
 8009012:	f04f 0200 	mov.w	r2, #0
 8009016:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 800901a:	e9c7 23aa 	strd	r2, r3, [r7, #680]	; 0x2a8
      absxk = fabs(x[0]);
 800901e:	f107 0320 	add.w	r3, r7, #32
 8009022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009026:	4611      	mov	r1, r2
 8009028:	f8c7 1278 	str.w	r1, [r7, #632]	; 0x278
 800902c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009030:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
      if (absxk > 3.3121686421112381E-170) {
 8009034:	f04f 0200 	mov.w	r2, #0
 8009038:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 800903c:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 8009040:	f7f7 fd5c 	bl	8000afc <__aeabi_dcmpgt>
 8009044:	4603      	mov	r3, r0
 8009046:	2b00      	cmp	r3, #0
 8009048:	d00b      	beq.n	8009062 <UTMeanCovSqrt_C2vgLQ4W+0xb0e>
        temp = 1.0;
 800904a:	f107 0118 	add.w	r1, r7, #24
 800904e:	f04f 0200 	mov.w	r2, #0
 8009052:	4b85      	ldr	r3, [pc, #532]	; (8009268 <UTMeanCovSqrt_C2vgLQ4W+0xd14>)
 8009054:	e9c1 2300 	strd	r2, r3, [r1]
        scale = absxk;
 8009058:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 800905c:	e9c7 23aa 	strd	r2, r3, [r7, #680]	; 0x2a8
 8009060:	e017      	b.n	8009092 <UTMeanCovSqrt_C2vgLQ4W+0xb3e>
      } else {
        b_t = absxk / 3.3121686421112381E-170;
 8009062:	f04f 0200 	mov.w	r2, #0
 8009066:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 800906a:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 800906e:	f7f7 fbdf 	bl	8000830 <__aeabi_ddiv>
 8009072:	4602      	mov	r2, r0
 8009074:	460b      	mov	r3, r1
 8009076:	e9c7 239c 	strd	r2, r3, [r7, #624]	; 0x270
        temp = b_t * b_t;
 800907a:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 800907e:	e9d7 019c 	ldrd	r0, r1, [r7, #624]	; 0x270
 8009082:	f7f7 faab 	bl	80005dc <__aeabi_dmul>
 8009086:	4602      	mov	r2, r0
 8009088:	460b      	mov	r3, r1
 800908a:	f107 0118 	add.w	r1, r7, #24
 800908e:	e9c1 2300 	strd	r2, r3, [r1]
      }

      absxk = fabs(x[1]);
 8009092:	f107 0320 	add.w	r3, r7, #32
 8009096:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800909a:	4611      	mov	r1, r2
 800909c:	f8c7 1278 	str.w	r1, [r7, #632]	; 0x278
 80090a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80090a4:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
      if (absxk > scale) {
 80090a8:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 80090ac:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 80090b0:	f7f7 fd24 	bl	8000afc <__aeabi_dcmpgt>
 80090b4:	4603      	mov	r3, r0
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d02d      	beq.n	8009116 <UTMeanCovSqrt_C2vgLQ4W+0xbc2>
        b_t = scale / absxk;
 80090ba:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 80090be:	e9d7 01aa 	ldrd	r0, r1, [r7, #680]	; 0x2a8
 80090c2:	f7f7 fbb5 	bl	8000830 <__aeabi_ddiv>
 80090c6:	4602      	mov	r2, r0
 80090c8:	460b      	mov	r3, r1
 80090ca:	e9c7 239c 	strd	r2, r3, [r7, #624]	; 0x270
        temp = temp * b_t * b_t + 1.0;
 80090ce:	f107 0318 	add.w	r3, r7, #24
 80090d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80090d6:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 80090da:	f7f7 fa7f 	bl	80005dc <__aeabi_dmul>
 80090de:	4602      	mov	r2, r0
 80090e0:	460b      	mov	r3, r1
 80090e2:	4610      	mov	r0, r2
 80090e4:	4619      	mov	r1, r3
 80090e6:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 80090ea:	f7f7 fa77 	bl	80005dc <__aeabi_dmul>
 80090ee:	4602      	mov	r2, r0
 80090f0:	460b      	mov	r3, r1
 80090f2:	4610      	mov	r0, r2
 80090f4:	4619      	mov	r1, r3
 80090f6:	f04f 0200 	mov.w	r2, #0
 80090fa:	4b5b      	ldr	r3, [pc, #364]	; (8009268 <UTMeanCovSqrt_C2vgLQ4W+0xd14>)
 80090fc:	f7f7 f8b8 	bl	8000270 <__adddf3>
 8009100:	4602      	mov	r2, r0
 8009102:	460b      	mov	r3, r1
 8009104:	f107 0118 	add.w	r1, r7, #24
 8009108:	e9c1 2300 	strd	r2, r3, [r1]
        scale = absxk;
 800910c:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 8009110:	e9c7 23aa 	strd	r2, r3, [r7, #680]	; 0x2a8
 8009114:	e01f      	b.n	8009156 <UTMeanCovSqrt_C2vgLQ4W+0xc02>
      } else {
        b_t = absxk / scale;
 8009116:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 800911a:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 800911e:	f7f7 fb87 	bl	8000830 <__aeabi_ddiv>
 8009122:	4602      	mov	r2, r0
 8009124:	460b      	mov	r3, r1
 8009126:	e9c7 239c 	strd	r2, r3, [r7, #624]	; 0x270
        temp += b_t * b_t;
 800912a:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 800912e:	e9d7 019c 	ldrd	r0, r1, [r7, #624]	; 0x270
 8009132:	f7f7 fa53 	bl	80005dc <__aeabi_dmul>
 8009136:	4602      	mov	r2, r0
 8009138:	460b      	mov	r3, r1
 800913a:	4610      	mov	r0, r2
 800913c:	4619      	mov	r1, r3
 800913e:	f107 0318 	add.w	r3, r7, #24
 8009142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009146:	f7f7 f893 	bl	8000270 <__adddf3>
 800914a:	4602      	mov	r2, r0
 800914c:	460b      	mov	r3, r1
 800914e:	f107 0118 	add.w	r1, r7, #24
 8009152:	e9c1 2300 	strd	r2, r3, [r1]
      }

      absxk = fabs(x[2]);
 8009156:	f107 0320 	add.w	r3, r7, #32
 800915a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800915e:	4611      	mov	r1, r2
 8009160:	f8c7 1278 	str.w	r1, [r7, #632]	; 0x278
 8009164:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009168:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
      if (absxk > scale) {
 800916c:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 8009170:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 8009174:	f7f7 fcc2 	bl	8000afc <__aeabi_dcmpgt>
 8009178:	4603      	mov	r3, r0
 800917a:	2b00      	cmp	r3, #0
 800917c:	d02d      	beq.n	80091da <UTMeanCovSqrt_C2vgLQ4W+0xc86>
        b_t = scale / absxk;
 800917e:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 8009182:	e9d7 01aa 	ldrd	r0, r1, [r7, #680]	; 0x2a8
 8009186:	f7f7 fb53 	bl	8000830 <__aeabi_ddiv>
 800918a:	4602      	mov	r2, r0
 800918c:	460b      	mov	r3, r1
 800918e:	e9c7 239c 	strd	r2, r3, [r7, #624]	; 0x270
        temp = temp * b_t * b_t + 1.0;
 8009192:	f107 0318 	add.w	r3, r7, #24
 8009196:	e9d3 0100 	ldrd	r0, r1, [r3]
 800919a:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 800919e:	f7f7 fa1d 	bl	80005dc <__aeabi_dmul>
 80091a2:	4602      	mov	r2, r0
 80091a4:	460b      	mov	r3, r1
 80091a6:	4610      	mov	r0, r2
 80091a8:	4619      	mov	r1, r3
 80091aa:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 80091ae:	f7f7 fa15 	bl	80005dc <__aeabi_dmul>
 80091b2:	4602      	mov	r2, r0
 80091b4:	460b      	mov	r3, r1
 80091b6:	4610      	mov	r0, r2
 80091b8:	4619      	mov	r1, r3
 80091ba:	f04f 0200 	mov.w	r2, #0
 80091be:	4b2a      	ldr	r3, [pc, #168]	; (8009268 <UTMeanCovSqrt_C2vgLQ4W+0xd14>)
 80091c0:	f7f7 f856 	bl	8000270 <__adddf3>
 80091c4:	4602      	mov	r2, r0
 80091c6:	460b      	mov	r3, r1
 80091c8:	f107 0118 	add.w	r1, r7, #24
 80091cc:	e9c1 2300 	strd	r2, r3, [r1]
        scale = absxk;
 80091d0:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 80091d4:	e9c7 23aa 	strd	r2, r3, [r7, #680]	; 0x2a8
 80091d8:	e01f      	b.n	800921a <UTMeanCovSqrt_C2vgLQ4W+0xcc6>
      } else {
        b_t = absxk / scale;
 80091da:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 80091de:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 80091e2:	f7f7 fb25 	bl	8000830 <__aeabi_ddiv>
 80091e6:	4602      	mov	r2, r0
 80091e8:	460b      	mov	r3, r1
 80091ea:	e9c7 239c 	strd	r2, r3, [r7, #624]	; 0x270
        temp += b_t * b_t;
 80091ee:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 80091f2:	e9d7 019c 	ldrd	r0, r1, [r7, #624]	; 0x270
 80091f6:	f7f7 f9f1 	bl	80005dc <__aeabi_dmul>
 80091fa:	4602      	mov	r2, r0
 80091fc:	460b      	mov	r3, r1
 80091fe:	4610      	mov	r0, r2
 8009200:	4619      	mov	r1, r3
 8009202:	f107 0318 	add.w	r3, r7, #24
 8009206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800920a:	f7f7 f831 	bl	8000270 <__adddf3>
 800920e:	4602      	mov	r2, r0
 8009210:	460b      	mov	r3, r1
 8009212:	f107 0118 	add.w	r1, r7, #24
 8009216:	e9c1 2300 	strd	r2, r3, [r1]
      }

      temp = scale * sqrt(temp);
 800921a:	f107 0318 	add.w	r3, r7, #24
 800921e:	ed93 7b00 	vldr	d7, [r3]
 8009222:	eeb0 0a47 	vmov.f32	s0, s14
 8009226:	eef0 0a67 	vmov.f32	s1, s15
 800922a:	f012 f8dd 	bl	801b3e8 <sqrt>
 800922e:	ec51 0b10 	vmov	r0, r1, d0
 8009232:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 8009236:	f7f7 f9d1 	bl	80005dc <__aeabi_dmul>
 800923a:	4602      	mov	r2, r0
 800923c:	460b      	mov	r3, r1
 800923e:	f107 0118 	add.w	r1, r7, #24
 8009242:	e9c1 2300 	strd	r2, r3, [r1]
      if (temp >= 1.0) {
 8009246:	f107 0318 	add.w	r3, r7, #24
 800924a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800924e:	f04f 0200 	mov.w	r2, #0
 8009252:	4b05      	ldr	r3, [pc, #20]	; (8009268 <UTMeanCovSqrt_C2vgLQ4W+0xd14>)
 8009254:	f7f7 fc48 	bl	8000ae8 <__aeabi_dcmpge>
 8009258:	4603      	mov	r3, r0
 800925a:	2b00      	cmp	r3, #0
 800925c:	d006      	beq.n	800926c <UTMeanCovSqrt_C2vgLQ4W+0xd18>
        guard1 = true;
 800925e:	2301      	movs	r3, #1
 8009260:	f887 328a 	strb.w	r3, [r7, #650]	; 0x28a
 8009264:	e1ed      	b.n	8009642 <UTMeanCovSqrt_C2vgLQ4W+0x10ee>
 8009266:	bf00      	nop
 8009268:	3ff00000 	.word	0x3ff00000
      } else {
        rotate_LZ7ctbe0(sqrt(1.0 - temp * temp), x[2], &c[2], &s[2], &temp);
 800926c:	f107 0318 	add.w	r3, r7, #24
 8009270:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009274:	f107 0318 	add.w	r3, r7, #24
 8009278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800927c:	f7f7 f9ae 	bl	80005dc <__aeabi_dmul>
 8009280:	4602      	mov	r2, r0
 8009282:	460b      	mov	r3, r1
 8009284:	f04f 0000 	mov.w	r0, #0
 8009288:	49b4      	ldr	r1, [pc, #720]	; (800955c <UTMeanCovSqrt_C2vgLQ4W+0x1008>)
 800928a:	f7f6 ffef 	bl	800026c <__aeabi_dsub>
 800928e:	4602      	mov	r2, r0
 8009290:	460b      	mov	r3, r1
 8009292:	ec43 2b17 	vmov	d7, r2, r3
 8009296:	eeb0 0a47 	vmov.f32	s0, s14
 800929a:	eef0 0a67 	vmov.f32	s1, s15
 800929e:	f012 f8a3 	bl	801b3e8 <sqrt>
 80092a2:	eeb0 6a40 	vmov.f32	s12, s0
 80092a6:	eef0 6a60 	vmov.f32	s13, s1
 80092aa:	f107 0320 	add.w	r3, r7, #32
 80092ae:	ed93 7b04 	vldr	d7, [r3, #16]
 80092b2:	f107 0218 	add.w	r2, r7, #24
 80092b6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80092ba:	f103 0110 	add.w	r1, r3, #16
 80092be:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80092c2:	3310      	adds	r3, #16
 80092c4:	4618      	mov	r0, r3
 80092c6:	eeb0 1a47 	vmov.f32	s2, s14
 80092ca:	eef0 1a67 	vmov.f32	s3, s15
 80092ce:	eeb0 0a46 	vmov.f32	s0, s12
 80092d2:	eef0 0a66 	vmov.f32	s1, s13
 80092d6:	f003 fc45 	bl	800cb64 <rotate_LZ7ctbe0>
        x[2] = 0.0;
 80092da:	f107 0120 	add.w	r1, r7, #32
 80092de:	f04f 0200 	mov.w	r2, #0
 80092e2:	f04f 0300 	mov.w	r3, #0
 80092e6:	e9c1 2304 	strd	r2, r3, [r1, #16]
        rotate_LZ7ctbe0(temp, x[1], &c[1], &s[1], &temp);
 80092ea:	f107 0318 	add.w	r3, r7, #24
 80092ee:	ed93 7b00 	vldr	d7, [r3]
 80092f2:	f107 0320 	add.w	r3, r7, #32
 80092f6:	ed93 6b02 	vldr	d6, [r3, #8]
 80092fa:	f107 0218 	add.w	r2, r7, #24
 80092fe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009302:	f103 0108 	add.w	r1, r3, #8
 8009306:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800930a:	3308      	adds	r3, #8
 800930c:	4618      	mov	r0, r3
 800930e:	eeb0 1a46 	vmov.f32	s2, s12
 8009312:	eef0 1a66 	vmov.f32	s3, s13
 8009316:	eeb0 0a47 	vmov.f32	s0, s14
 800931a:	eef0 0a67 	vmov.f32	s1, s15
 800931e:	f003 fc21 	bl	800cb64 <rotate_LZ7ctbe0>
        x[1] = 0.0;
 8009322:	f107 0120 	add.w	r1, r7, #32
 8009326:	f04f 0200 	mov.w	r2, #0
 800932a:	f04f 0300 	mov.w	r3, #0
 800932e:	e9c1 2302 	strd	r2, r3, [r1, #8]
        rotate_LZ7ctbe0(temp, x[0], &c[0], &s[0], &temp);
 8009332:	f107 0318 	add.w	r3, r7, #24
 8009336:	ed93 7b00 	vldr	d7, [r3]
 800933a:	f107 0320 	add.w	r3, r7, #32
 800933e:	ed93 6b00 	vldr	d6, [r3]
 8009342:	f107 0218 	add.w	r2, r7, #24
 8009346:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800934a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800934e:	4618      	mov	r0, r3
 8009350:	eeb0 1a46 	vmov.f32	s2, s12
 8009354:	eef0 1a66 	vmov.f32	s3, s13
 8009358:	eeb0 0a47 	vmov.f32	s0, s14
 800935c:	eef0 0a67 	vmov.f32	s1, s15
 8009360:	f003 fc00 	bl	800cb64 <rotate_LZ7ctbe0>
        x[0] = 0.0;
 8009364:	f107 0120 	add.w	r1, r7, #32
 8009368:	f04f 0200 	mov.w	r2, #0
 800936c:	f04f 0300 	mov.w	r3, #0
 8009370:	e9c1 2300 	strd	r2, r3, [r1]
        for (iAcol = 0; iAcol + 1 > 0; iAcol--) {
 8009374:	2300      	movs	r3, #0
 8009376:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 800937a:	e072      	b.n	8009462 <UTMeanCovSqrt_C2vgLQ4W+0xf0e>
          temp = s[iAcol] * Sy[iAcol];
 800937c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8009380:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8009384:	00db      	lsls	r3, r3, #3
 8009386:	4413      	add	r3, r2
 8009388:	e9d3 0100 	ldrd	r0, r1, [r3]
 800938c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8009390:	00db      	lsls	r3, r3, #3
 8009392:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8009396:	4413      	add	r3, r2
 8009398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800939c:	f7f7 f91e 	bl	80005dc <__aeabi_dmul>
 80093a0:	4602      	mov	r2, r0
 80093a2:	460b      	mov	r3, r1
 80093a4:	f107 0118 	add.w	r1, r7, #24
 80093a8:	e9c1 2300 	strd	r2, r3, [r1]
          Sy[iAcol] = c[iAcol] * Sy[iAcol] - s[iAcol] * x[0];
 80093ac:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80093b0:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80093b4:	00db      	lsls	r3, r3, #3
 80093b6:	4413      	add	r3, r2
 80093b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80093bc:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80093c0:	00db      	lsls	r3, r3, #3
 80093c2:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 80093c6:	4413      	add	r3, r2
 80093c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093cc:	f7f7 f906 	bl	80005dc <__aeabi_dmul>
 80093d0:	4602      	mov	r2, r0
 80093d2:	460b      	mov	r3, r1
 80093d4:	4690      	mov	r8, r2
 80093d6:	4699      	mov	r9, r3
 80093d8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80093dc:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80093e0:	00db      	lsls	r3, r3, #3
 80093e2:	4413      	add	r3, r2
 80093e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80093e8:	f107 0320 	add.w	r3, r7, #32
 80093ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093f0:	f7f7 f8f4 	bl	80005dc <__aeabi_dmul>
 80093f4:	4602      	mov	r2, r0
 80093f6:	460b      	mov	r3, r1
 80093f8:	4610      	mov	r0, r2
 80093fa:	4619      	mov	r1, r3
 80093fc:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8009400:	00db      	lsls	r3, r3, #3
 8009402:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8009406:	18d4      	adds	r4, r2, r3
 8009408:	4602      	mov	r2, r0
 800940a:	460b      	mov	r3, r1
 800940c:	4640      	mov	r0, r8
 800940e:	4649      	mov	r1, r9
 8009410:	f7f6 ff2c 	bl	800026c <__aeabi_dsub>
 8009414:	4602      	mov	r2, r0
 8009416:	460b      	mov	r3, r1
 8009418:	e9c4 2300 	strd	r2, r3, [r4]
          x[0] = c[iAcol] * x[0] + temp;
 800941c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8009420:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8009424:	00db      	lsls	r3, r3, #3
 8009426:	4413      	add	r3, r2
 8009428:	e9d3 0100 	ldrd	r0, r1, [r3]
 800942c:	f107 0320 	add.w	r3, r7, #32
 8009430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009434:	f7f7 f8d2 	bl	80005dc <__aeabi_dmul>
 8009438:	4602      	mov	r2, r0
 800943a:	460b      	mov	r3, r1
 800943c:	4610      	mov	r0, r2
 800943e:	4619      	mov	r1, r3
 8009440:	f107 0318 	add.w	r3, r7, #24
 8009444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009448:	f7f6 ff12 	bl	8000270 <__adddf3>
 800944c:	4602      	mov	r2, r0
 800944e:	460b      	mov	r3, r1
 8009450:	f107 0120 	add.w	r1, r7, #32
 8009454:	e9c1 2300 	strd	r2, r3, [r1]
        for (iAcol = 0; iAcol + 1 > 0; iAcol--) {
 8009458:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800945c:	3b01      	subs	r3, #1
 800945e:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8009462:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8009466:	2b00      	cmp	r3, #0
 8009468:	da88      	bge.n	800937c <UTMeanCovSqrt_C2vgLQ4W+0xe28>
        }

        for (iAcol = 1; iAcol + 1 > 0; iAcol--) {
 800946a:	2301      	movs	r3, #1
 800946c:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8009470:	e06c      	b.n	800954c <UTMeanCovSqrt_C2vgLQ4W+0xff8>
          absxk = Sy[iAcol + 3];
 8009472:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8009476:	3303      	adds	r3, #3
 8009478:	00db      	lsls	r3, r3, #3
 800947a:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 800947e:	4413      	add	r3, r2
 8009480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009484:	e9c7 239e 	strd	r2, r3, [r7, #632]	; 0x278
          Sy[iAcol + 3] = absxk * c[iAcol] - s[iAcol] * x[1];
 8009488:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800948c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8009490:	00db      	lsls	r3, r3, #3
 8009492:	4413      	add	r3, r2
 8009494:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009498:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 800949c:	f7f7 f89e 	bl	80005dc <__aeabi_dmul>
 80094a0:	4602      	mov	r2, r0
 80094a2:	460b      	mov	r3, r1
 80094a4:	4690      	mov	r8, r2
 80094a6:	4699      	mov	r9, r3
 80094a8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80094ac:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80094b0:	00db      	lsls	r3, r3, #3
 80094b2:	4413      	add	r3, r2
 80094b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80094b8:	f107 0320 	add.w	r3, r7, #32
 80094bc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80094c0:	f7f7 f88c 	bl	80005dc <__aeabi_dmul>
 80094c4:	4602      	mov	r2, r0
 80094c6:	460b      	mov	r3, r1
 80094c8:	4610      	mov	r0, r2
 80094ca:	4619      	mov	r1, r3
 80094cc:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80094d0:	3303      	adds	r3, #3
 80094d2:	00db      	lsls	r3, r3, #3
 80094d4:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 80094d8:	18d4      	adds	r4, r2, r3
 80094da:	4602      	mov	r2, r0
 80094dc:	460b      	mov	r3, r1
 80094de:	4640      	mov	r0, r8
 80094e0:	4649      	mov	r1, r9
 80094e2:	f7f6 fec3 	bl	800026c <__aeabi_dsub>
 80094e6:	4602      	mov	r2, r0
 80094e8:	460b      	mov	r3, r1
 80094ea:	e9c4 2300 	strd	r2, r3, [r4]
          x[1] = c[iAcol] * x[1] + absxk * s[iAcol];
 80094ee:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80094f2:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80094f6:	00db      	lsls	r3, r3, #3
 80094f8:	4413      	add	r3, r2
 80094fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80094fe:	f107 0320 	add.w	r3, r7, #32
 8009502:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8009506:	f7f7 f869 	bl	80005dc <__aeabi_dmul>
 800950a:	4602      	mov	r2, r0
 800950c:	460b      	mov	r3, r1
 800950e:	4614      	mov	r4, r2
 8009510:	461d      	mov	r5, r3
 8009512:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8009516:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800951a:	00db      	lsls	r3, r3, #3
 800951c:	4413      	add	r3, r2
 800951e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009522:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 8009526:	f7f7 f859 	bl	80005dc <__aeabi_dmul>
 800952a:	4602      	mov	r2, r0
 800952c:	460b      	mov	r3, r1
 800952e:	4620      	mov	r0, r4
 8009530:	4629      	mov	r1, r5
 8009532:	f7f6 fe9d 	bl	8000270 <__adddf3>
 8009536:	4602      	mov	r2, r0
 8009538:	460b      	mov	r3, r1
 800953a:	f107 0120 	add.w	r1, r7, #32
 800953e:	e9c1 2302 	strd	r2, r3, [r1, #8]
        for (iAcol = 1; iAcol + 1 > 0; iAcol--) {
 8009542:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8009546:	3b01      	subs	r3, #1
 8009548:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 800954c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8009550:	2b00      	cmp	r3, #0
 8009552:	da8e      	bge.n	8009472 <UTMeanCovSqrt_C2vgLQ4W+0xf1e>
        }

        for (iAcol = 2; iAcol + 1 > 0; iAcol--) {
 8009554:	2302      	movs	r3, #2
 8009556:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 800955a:	e06e      	b.n	800963a <UTMeanCovSqrt_C2vgLQ4W+0x10e6>
 800955c:	3ff00000 	.word	0x3ff00000
          absxk = Sy[iAcol + 6];
 8009560:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8009564:	3306      	adds	r3, #6
 8009566:	00db      	lsls	r3, r3, #3
 8009568:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 800956c:	4413      	add	r3, r2
 800956e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009572:	e9c7 239e 	strd	r2, r3, [r7, #632]	; 0x278
          Sy[iAcol + 6] = absxk * c[iAcol] - s[iAcol] * x[2];
 8009576:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800957a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800957e:	00db      	lsls	r3, r3, #3
 8009580:	4413      	add	r3, r2
 8009582:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009586:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 800958a:	f7f7 f827 	bl	80005dc <__aeabi_dmul>
 800958e:	4602      	mov	r2, r0
 8009590:	460b      	mov	r3, r1
 8009592:	4690      	mov	r8, r2
 8009594:	4699      	mov	r9, r3
 8009596:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800959a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800959e:	00db      	lsls	r3, r3, #3
 80095a0:	4413      	add	r3, r2
 80095a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80095a6:	f107 0320 	add.w	r3, r7, #32
 80095aa:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80095ae:	f7f7 f815 	bl	80005dc <__aeabi_dmul>
 80095b2:	4602      	mov	r2, r0
 80095b4:	460b      	mov	r3, r1
 80095b6:	4610      	mov	r0, r2
 80095b8:	4619      	mov	r1, r3
 80095ba:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80095be:	3306      	adds	r3, #6
 80095c0:	00db      	lsls	r3, r3, #3
 80095c2:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 80095c6:	18d4      	adds	r4, r2, r3
 80095c8:	4602      	mov	r2, r0
 80095ca:	460b      	mov	r3, r1
 80095cc:	4640      	mov	r0, r8
 80095ce:	4649      	mov	r1, r9
 80095d0:	f7f6 fe4c 	bl	800026c <__aeabi_dsub>
 80095d4:	4602      	mov	r2, r0
 80095d6:	460b      	mov	r3, r1
 80095d8:	e9c4 2300 	strd	r2, r3, [r4]
          x[2] = c[iAcol] * x[2] + absxk * s[iAcol];
 80095dc:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80095e0:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80095e4:	00db      	lsls	r3, r3, #3
 80095e6:	4413      	add	r3, r2
 80095e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80095ec:	f107 0320 	add.w	r3, r7, #32
 80095f0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80095f4:	f7f6 fff2 	bl	80005dc <__aeabi_dmul>
 80095f8:	4602      	mov	r2, r0
 80095fa:	460b      	mov	r3, r1
 80095fc:	4614      	mov	r4, r2
 80095fe:	461d      	mov	r5, r3
 8009600:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8009604:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8009608:	00db      	lsls	r3, r3, #3
 800960a:	4413      	add	r3, r2
 800960c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009610:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 8009614:	f7f6 ffe2 	bl	80005dc <__aeabi_dmul>
 8009618:	4602      	mov	r2, r0
 800961a:	460b      	mov	r3, r1
 800961c:	4620      	mov	r0, r4
 800961e:	4629      	mov	r1, r5
 8009620:	f7f6 fe26 	bl	8000270 <__adddf3>
 8009624:	4602      	mov	r2, r0
 8009626:	460b      	mov	r3, r1
 8009628:	f107 0120 	add.w	r1, r7, #32
 800962c:	e9c1 2304 	strd	r2, r3, [r1, #16]
        for (iAcol = 2; iAcol + 1 > 0; iAcol--) {
 8009630:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8009634:	3b01      	subs	r3, #1
 8009636:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 800963a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800963e:	2b00      	cmp	r3, #0
 8009640:	da8e      	bge.n	8009560 <UTMeanCovSqrt_C2vgLQ4W+0x100c>
        }
      }
    }

    if (guard1) {
 8009642:	f897 328a 	ldrb.w	r3, [r7, #650]	; 0x28a
 8009646:	2b00      	cmp	r3, #0
 8009648:	f000 82f0 	beq.w	8009c2c <UTMeanCovSqrt_C2vgLQ4W+0x16d8>
      boolean_T exitg2;
      kk = 0;
 800964c:	2300      	movs	r3, #0
 800964e:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
      for (iAcol = 0; iAcol < 3; iAcol++) {
 8009652:	2300      	movs	r3, #0
 8009654:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8009658:	e0d3      	b.n	8009802 <UTMeanCovSqrt_C2vgLQ4W+0x12ae>
        i_1 = 0;
 800965a:	2300      	movs	r3, #0
 800965c:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
        for (i = 0; i < 3; i++) {
 8009660:	2300      	movs	r3, #0
 8009662:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 8009666:	e0bd      	b.n	80097e4 <UTMeanCovSqrt_C2vgLQ4W+0x1290>
          Sy_tmp = i_1 + iAcol;
 8009668:	f8d7 2290 	ldr.w	r2, [r7, #656]	; 0x290
 800966c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8009670:	4413      	add	r3, r2
 8009672:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
          Sy_0[Sy_tmp] = 0.0;
 8009676:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800967a:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 800967e:	00db      	lsls	r3, r3, #3
 8009680:	18d1      	adds	r1, r2, r3
 8009682:	f04f 0200 	mov.w	r2, #0
 8009686:	f04f 0300 	mov.w	r3, #0
 800968a:	e9c1 2300 	strd	r2, r3, [r1]
          Sy_0[Sy_tmp] += Sy[kk] * Sy[i_1];
 800968e:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8009692:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8009696:	00db      	lsls	r3, r3, #3
 8009698:	4413      	add	r3, r2
 800969a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800969e:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80096a2:	00db      	lsls	r3, r3, #3
 80096a4:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 80096a8:	4413      	add	r3, r2
 80096aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80096ae:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 80096b2:	00db      	lsls	r3, r3, #3
 80096b4:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 80096b8:	4413      	add	r3, r2
 80096ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096be:	f7f6 ff8d 	bl	80005dc <__aeabi_dmul>
 80096c2:	4602      	mov	r2, r0
 80096c4:	460b      	mov	r3, r1
 80096c6:	4620      	mov	r0, r4
 80096c8:	4629      	mov	r1, r5
 80096ca:	f7f6 fdd1 	bl	8000270 <__adddf3>
 80096ce:	4602      	mov	r2, r0
 80096d0:	460b      	mov	r3, r1
 80096d2:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 80096d6:	f8d7 1264 	ldr.w	r1, [r7, #612]	; 0x264
 80096da:	00c9      	lsls	r1, r1, #3
 80096dc:	4401      	add	r1, r0
 80096de:	e9c1 2300 	strd	r2, r3, [r1]
          Sy_0[Sy_tmp] += Sy[kk + 1] * Sy[i_1 + 1];
 80096e2:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80096e6:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 80096ea:	00db      	lsls	r3, r3, #3
 80096ec:	4413      	add	r3, r2
 80096ee:	e9d3 4500 	ldrd	r4, r5, [r3]
 80096f2:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80096f6:	3301      	adds	r3, #1
 80096f8:	00db      	lsls	r3, r3, #3
 80096fa:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 80096fe:	4413      	add	r3, r2
 8009700:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009704:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8009708:	3301      	adds	r3, #1
 800970a:	00db      	lsls	r3, r3, #3
 800970c:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8009710:	4413      	add	r3, r2
 8009712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009716:	f7f6 ff61 	bl	80005dc <__aeabi_dmul>
 800971a:	4602      	mov	r2, r0
 800971c:	460b      	mov	r3, r1
 800971e:	4620      	mov	r0, r4
 8009720:	4629      	mov	r1, r5
 8009722:	f7f6 fda5 	bl	8000270 <__adddf3>
 8009726:	4602      	mov	r2, r0
 8009728:	460b      	mov	r3, r1
 800972a:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 800972e:	f8d7 1264 	ldr.w	r1, [r7, #612]	; 0x264
 8009732:	00c9      	lsls	r1, r1, #3
 8009734:	4401      	add	r1, r0
 8009736:	e9c1 2300 	strd	r2, r3, [r1]
          Sy_0[Sy_tmp] += Sy[kk + 2] * Sy[i_1 + 2];
 800973a:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800973e:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8009742:	00db      	lsls	r3, r3, #3
 8009744:	4413      	add	r3, r2
 8009746:	e9d3 4500 	ldrd	r4, r5, [r3]
 800974a:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 800974e:	3302      	adds	r3, #2
 8009750:	00db      	lsls	r3, r3, #3
 8009752:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8009756:	4413      	add	r3, r2
 8009758:	e9d3 0100 	ldrd	r0, r1, [r3]
 800975c:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8009760:	3302      	adds	r3, #2
 8009762:	00db      	lsls	r3, r3, #3
 8009764:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8009768:	4413      	add	r3, r2
 800976a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800976e:	f7f6 ff35 	bl	80005dc <__aeabi_dmul>
 8009772:	4602      	mov	r2, r0
 8009774:	460b      	mov	r3, r1
 8009776:	4620      	mov	r0, r4
 8009778:	4629      	mov	r1, r5
 800977a:	f7f6 fd79 	bl	8000270 <__adddf3>
 800977e:	4602      	mov	r2, r0
 8009780:	460b      	mov	r3, r1
 8009782:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8009786:	f8d7 1264 	ldr.w	r1, [r7, #612]	; 0x264
 800978a:	00c9      	lsls	r1, r1, #3
 800978c:	4401      	add	r1, r0
 800978e:	e9c1 2300 	strd	r2, r3, [r1]
          Y1_0[i + kk] = Y1[i] * Y1[iAcol];
 8009792:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8009796:	00db      	lsls	r3, r3, #3
 8009798:	1d3a      	adds	r2, r7, #4
 800979a:	6812      	ldr	r2, [r2, #0]
 800979c:	4413      	add	r3, r2
 800979e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80097a2:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80097a6:	00db      	lsls	r3, r3, #3
 80097a8:	1d3a      	adds	r2, r7, #4
 80097aa:	6812      	ldr	r2, [r2, #0]
 80097ac:	4413      	add	r3, r2
 80097ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097b2:	f8d7 529c 	ldr.w	r5, [r7, #668]	; 0x29c
 80097b6:	f8d7 428c 	ldr.w	r4, [r7, #652]	; 0x28c
 80097ba:	442c      	add	r4, r5
 80097bc:	f7f6 ff0e 	bl	80005dc <__aeabi_dmul>
 80097c0:	4602      	mov	r2, r0
 80097c2:	460b      	mov	r3, r1
 80097c4:	f107 0068 	add.w	r0, r7, #104	; 0x68
 80097c8:	00e1      	lsls	r1, r4, #3
 80097ca:	4401      	add	r1, r0
 80097cc:	e9c1 2300 	strd	r2, r3, [r1]
          i_1 += 3;
 80097d0:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 80097d4:	3303      	adds	r3, #3
 80097d6:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
        for (i = 0; i < 3; i++) {
 80097da:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80097de:	3301      	adds	r3, #1
 80097e0:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 80097e4:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80097e8:	2b02      	cmp	r3, #2
 80097ea:	f77f af3d 	ble.w	8009668 <UTMeanCovSqrt_C2vgLQ4W+0x1114>
        }

        kk += 3;
 80097ee:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80097f2:	3303      	adds	r3, #3
 80097f4:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
      for (iAcol = 0; iAcol < 3; iAcol++) {
 80097f8:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80097fc:	3301      	adds	r3, #1
 80097fe:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8009802:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8009806:	2b02      	cmp	r3, #2
 8009808:	f77f af27 	ble.w	800965a <UTMeanCovSqrt_C2vgLQ4W+0x1106>
      }

      errorCondition = true;
 800980c:	2301      	movs	r3, #1
 800980e:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
      for (iAcol = 0; iAcol < 9; iAcol++) {
 8009812:	2300      	movs	r3, #0
 8009814:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8009818:	e049      	b.n	80098ae <UTMeanCovSqrt_C2vgLQ4W+0x135a>
        temp = Sy_0[iAcol] - Y1_0[iAcol];
 800981a:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800981e:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8009822:	00db      	lsls	r3, r3, #3
 8009824:	4413      	add	r3, r2
 8009826:	e9d3 0100 	ldrd	r0, r1, [r3]
 800982a:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800982e:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8009832:	00db      	lsls	r3, r3, #3
 8009834:	4413      	add	r3, r2
 8009836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800983a:	f7f6 fd17 	bl	800026c <__aeabi_dsub>
 800983e:	4602      	mov	r2, r0
 8009840:	460b      	mov	r3, r1
 8009842:	f107 0118 	add.w	r1, r7, #24
 8009846:	e9c1 2300 	strd	r2, r3, [r1]
        if (errorCondition && (rtIsInf(temp) || rtIsNaN(temp))) {
 800984a:	f897 328b 	ldrb.w	r3, [r7, #651]	; 0x28b
 800984e:	2b00      	cmp	r3, #0
 8009850:	d01c      	beq.n	800988c <UTMeanCovSqrt_C2vgLQ4W+0x1338>
 8009852:	f107 0318 	add.w	r3, r7, #24
 8009856:	ed93 7b00 	vldr	d7, [r3]
 800985a:	eeb0 0a47 	vmov.f32	s0, s14
 800985e:	eef0 0a67 	vmov.f32	s1, s15
 8009862:	f003 fbf3 	bl	800d04c <rtIsInf>
 8009866:	4603      	mov	r3, r0
 8009868:	2b00      	cmp	r3, #0
 800986a:	d10c      	bne.n	8009886 <UTMeanCovSqrt_C2vgLQ4W+0x1332>
 800986c:	f107 0318 	add.w	r3, r7, #24
 8009870:	ed93 7b00 	vldr	d7, [r3]
 8009874:	eeb0 0a47 	vmov.f32	s0, s14
 8009878:	eef0 0a67 	vmov.f32	s1, s15
 800987c:	f003 fc0a 	bl	800d094 <rtIsNaN>
 8009880:	4603      	mov	r3, r0
 8009882:	2b00      	cmp	r3, #0
 8009884:	d002      	beq.n	800988c <UTMeanCovSqrt_C2vgLQ4W+0x1338>
          errorCondition = false;
 8009886:	2300      	movs	r3, #0
 8009888:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
        }

        Ss[iAcol] = temp;
 800988c:	f107 0318 	add.w	r3, r7, #24
 8009890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009894:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 8009898:	f8d7 1298 	ldr.w	r1, [r7, #664]	; 0x298
 800989c:	00c9      	lsls	r1, r1, #3
 800989e:	4401      	add	r1, r0
 80098a0:	e9c1 2300 	strd	r2, r3, [r1]
      for (iAcol = 0; iAcol < 9; iAcol++) {
 80098a4:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80098a8:	3301      	adds	r3, #1
 80098aa:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 80098ae:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80098b2:	2b08      	cmp	r3, #8
 80098b4:	ddb1      	ble.n	800981a <UTMeanCovSqrt_C2vgLQ4W+0x12c6>
      }

      if (errorCondition) {
 80098b6:	f897 328b 	ldrb.w	r3, [r7, #651]	; 0x28b
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d00a      	beq.n	80098d4 <UTMeanCovSqrt_C2vgLQ4W+0x1380>
        svd_u3DvUgOe(Ss, Y1_0, s, Sy_0);
 80098be:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80098c2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80098c6:	f107 0168 	add.w	r1, r7, #104	; 0x68
 80098ca:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 80098ce:	f003 fc33 	bl	800d138 <svd_u3DvUgOe>
 80098d2:	e02c      	b.n	800992e <UTMeanCovSqrt_C2vgLQ4W+0x13da>
      } else {
        s[0] = (rtNaN);
 80098d4:	4bbc      	ldr	r3, [pc, #752]	; (8009bc8 <UTMeanCovSqrt_C2vgLQ4W+0x1674>)
 80098d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098da:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80098de:	e9c1 2300 	strd	r2, r3, [r1]
        s[1] = (rtNaN);
 80098e2:	4bb9      	ldr	r3, [pc, #740]	; (8009bc8 <UTMeanCovSqrt_C2vgLQ4W+0x1674>)
 80098e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098e8:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80098ec:	e9c1 2302 	strd	r2, r3, [r1, #8]
        s[2] = (rtNaN);
 80098f0:	4bb5      	ldr	r3, [pc, #724]	; (8009bc8 <UTMeanCovSqrt_C2vgLQ4W+0x1674>)
 80098f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098f6:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80098fa:	e9c1 2304 	strd	r2, r3, [r1, #16]
        for (kk = 0; kk < 9; kk++) {
 80098fe:	2300      	movs	r3, #0
 8009900:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8009904:	e00f      	b.n	8009926 <UTMeanCovSqrt_C2vgLQ4W+0x13d2>
          Sy_0[kk] = (rtNaN);
 8009906:	4bb0      	ldr	r3, [pc, #704]	; (8009bc8 <UTMeanCovSqrt_C2vgLQ4W+0x1674>)
 8009908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800990c:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8009910:	f8d7 128c 	ldr.w	r1, [r7, #652]	; 0x28c
 8009914:	00c9      	lsls	r1, r1, #3
 8009916:	4401      	add	r1, r0
 8009918:	e9c1 2300 	strd	r2, r3, [r1]
        for (kk = 0; kk < 9; kk++) {
 800991c:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8009920:	3301      	adds	r3, #1
 8009922:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8009926:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 800992a:	2b08      	cmp	r3, #8
 800992c:	ddeb      	ble.n	8009906 <UTMeanCovSqrt_C2vgLQ4W+0x13b2>
        }
      }

      memset(&Ss[0], 0, 9U * sizeof(real_T));
 800992e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8009932:	2248      	movs	r2, #72	; 0x48
 8009934:	2100      	movs	r1, #0
 8009936:	4618      	mov	r0, r3
 8009938:	f011 fb9e 	bl	801b078 <memset>
      Ss[0] = s[0];
 800993c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009944:	f107 01f8 	add.w	r1, r7, #248	; 0xf8
 8009948:	e9c1 2300 	strd	r2, r3, [r1]
      Ss[4] = s[1];
 800994c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009950:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8009954:	f107 01f8 	add.w	r1, r7, #248	; 0xf8
 8009958:	e9c1 2308 	strd	r2, r3, [r1, #32]
      Ss[8] = s[2];
 800995c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009960:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8009964:	f107 01f8 	add.w	r1, r7, #248	; 0xf8
 8009968:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
      for (kk = 0; kk < 9; kk++) {
 800996c:	2300      	movs	r3, #0
 800996e:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8009972:	e01e      	b.n	80099b2 <UTMeanCovSqrt_C2vgLQ4W+0x145e>
        Ss[kk] = sqrt(Ss[kk]);
 8009974:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8009978:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 800997c:	00db      	lsls	r3, r3, #3
 800997e:	4413      	add	r3, r2
 8009980:	ed93 7b00 	vldr	d7, [r3]
 8009984:	eeb0 0a47 	vmov.f32	s0, s14
 8009988:	eef0 0a67 	vmov.f32	s1, s15
 800998c:	f011 fd2c 	bl	801b3e8 <sqrt>
 8009990:	eeb0 7a40 	vmov.f32	s14, s0
 8009994:	eef0 7a60 	vmov.f32	s15, s1
 8009998:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 800999c:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80099a0:	00db      	lsls	r3, r3, #3
 80099a2:	4413      	add	r3, r2
 80099a4:	ed83 7b00 	vstr	d7, [r3]
      for (kk = 0; kk < 9; kk++) {
 80099a8:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80099ac:	3301      	adds	r3, #1
 80099ae:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 80099b2:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80099b6:	2b08      	cmp	r3, #8
 80099b8:	dddc      	ble.n	8009974 <UTMeanCovSqrt_C2vgLQ4W+0x1420>
      }

      kk = 0;
 80099ba:	2300      	movs	r3, #0
 80099bc:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
      for (iAcol = 0; iAcol < 3; iAcol++) {
 80099c0:	2300      	movs	r3, #0
 80099c2:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 80099c6:	e0c0      	b.n	8009b4a <UTMeanCovSqrt_C2vgLQ4W+0x15f6>
        i_1 = 0;
 80099c8:	2300      	movs	r3, #0
 80099ca:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
        for (i = 0; i < 3; i++) {
 80099ce:	2300      	movs	r3, #0
 80099d0:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 80099d4:	e0aa      	b.n	8009b2c <UTMeanCovSqrt_C2vgLQ4W+0x15d8>
          Sy_tmp = i_1 + iAcol;
 80099d6:	f8d7 2290 	ldr.w	r2, [r7, #656]	; 0x290
 80099da:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80099de:	4413      	add	r3, r2
 80099e0:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
          Sy[Sy_tmp] = 0.0;
 80099e4:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 80099e8:	00db      	lsls	r3, r3, #3
 80099ea:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 80099ee:	18d1      	adds	r1, r2, r3
 80099f0:	f04f 0200 	mov.w	r2, #0
 80099f4:	f04f 0300 	mov.w	r3, #0
 80099f8:	e9c1 2300 	strd	r2, r3, [r1]
          Sy[Sy_tmp] += Ss[kk] * Sy_0[i];
 80099fc:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8009a00:	00db      	lsls	r3, r3, #3
 8009a02:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8009a06:	4413      	add	r3, r2
 8009a08:	e9d3 4500 	ldrd	r4, r5, [r3]
 8009a0c:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8009a10:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8009a14:	00db      	lsls	r3, r3, #3
 8009a16:	4413      	add	r3, r2
 8009a18:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009a1c:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8009a20:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8009a24:	00db      	lsls	r3, r3, #3
 8009a26:	4413      	add	r3, r2
 8009a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a2c:	f7f6 fdd6 	bl	80005dc <__aeabi_dmul>
 8009a30:	4602      	mov	r2, r0
 8009a32:	460b      	mov	r3, r1
 8009a34:	4610      	mov	r0, r2
 8009a36:	4619      	mov	r1, r3
 8009a38:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8009a3c:	00db      	lsls	r3, r3, #3
 8009a3e:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8009a42:	18d6      	adds	r6, r2, r3
 8009a44:	4602      	mov	r2, r0
 8009a46:	460b      	mov	r3, r1
 8009a48:	4620      	mov	r0, r4
 8009a4a:	4629      	mov	r1, r5
 8009a4c:	f7f6 fc10 	bl	8000270 <__adddf3>
 8009a50:	4602      	mov	r2, r0
 8009a52:	460b      	mov	r3, r1
 8009a54:	e9c6 2300 	strd	r2, r3, [r6]
          Sy[Sy_tmp] += Ss[kk + 1] * Sy_0[i + 3];
 8009a58:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8009a5c:	00db      	lsls	r3, r3, #3
 8009a5e:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8009a62:	4413      	add	r3, r2
 8009a64:	e9d3 4500 	ldrd	r4, r5, [r3]
 8009a68:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8009a6c:	3301      	adds	r3, #1
 8009a6e:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8009a72:	00db      	lsls	r3, r3, #3
 8009a74:	4413      	add	r3, r2
 8009a76:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009a7a:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8009a7e:	3303      	adds	r3, #3
 8009a80:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8009a84:	00db      	lsls	r3, r3, #3
 8009a86:	4413      	add	r3, r2
 8009a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a8c:	f7f6 fda6 	bl	80005dc <__aeabi_dmul>
 8009a90:	4602      	mov	r2, r0
 8009a92:	460b      	mov	r3, r1
 8009a94:	4610      	mov	r0, r2
 8009a96:	4619      	mov	r1, r3
 8009a98:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8009a9c:	00db      	lsls	r3, r3, #3
 8009a9e:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8009aa2:	18d6      	adds	r6, r2, r3
 8009aa4:	4602      	mov	r2, r0
 8009aa6:	460b      	mov	r3, r1
 8009aa8:	4620      	mov	r0, r4
 8009aaa:	4629      	mov	r1, r5
 8009aac:	f7f6 fbe0 	bl	8000270 <__adddf3>
 8009ab0:	4602      	mov	r2, r0
 8009ab2:	460b      	mov	r3, r1
 8009ab4:	e9c6 2300 	strd	r2, r3, [r6]
          Sy[Sy_tmp] += Ss[kk + 2] * Sy_0[i + 6];
 8009ab8:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8009abc:	00db      	lsls	r3, r3, #3
 8009abe:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8009ac2:	4413      	add	r3, r2
 8009ac4:	e9d3 4500 	ldrd	r4, r5, [r3]
 8009ac8:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8009acc:	3302      	adds	r3, #2
 8009ace:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8009ad2:	00db      	lsls	r3, r3, #3
 8009ad4:	4413      	add	r3, r2
 8009ad6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009ada:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8009ade:	3306      	adds	r3, #6
 8009ae0:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8009ae4:	00db      	lsls	r3, r3, #3
 8009ae6:	4413      	add	r3, r2
 8009ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aec:	f7f6 fd76 	bl	80005dc <__aeabi_dmul>
 8009af0:	4602      	mov	r2, r0
 8009af2:	460b      	mov	r3, r1
 8009af4:	4610      	mov	r0, r2
 8009af6:	4619      	mov	r1, r3
 8009af8:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8009afc:	00db      	lsls	r3, r3, #3
 8009afe:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8009b02:	18d6      	adds	r6, r2, r3
 8009b04:	4602      	mov	r2, r0
 8009b06:	460b      	mov	r3, r1
 8009b08:	4620      	mov	r0, r4
 8009b0a:	4629      	mov	r1, r5
 8009b0c:	f7f6 fbb0 	bl	8000270 <__adddf3>
 8009b10:	4602      	mov	r2, r0
 8009b12:	460b      	mov	r3, r1
 8009b14:	e9c6 2300 	strd	r2, r3, [r6]
          i_1 += 3;
 8009b18:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8009b1c:	3303      	adds	r3, #3
 8009b1e:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
        for (i = 0; i < 3; i++) {
 8009b22:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8009b26:	3301      	adds	r3, #1
 8009b28:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 8009b2c:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8009b30:	2b02      	cmp	r3, #2
 8009b32:	f77f af50 	ble.w	80099d6 <UTMeanCovSqrt_C2vgLQ4W+0x1482>
        }

        kk += 3;
 8009b36:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8009b3a:	3303      	adds	r3, #3
 8009b3c:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
      for (iAcol = 0; iAcol < 3; iAcol++) {
 8009b40:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8009b44:	3301      	adds	r3, #1
 8009b46:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8009b4a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8009b4e:	2b02      	cmp	r3, #2
 8009b50:	f77f af3a 	ble.w	80099c8 <UTMeanCovSqrt_C2vgLQ4W+0x1474>
      }

      errorCondition = true;
 8009b54:	2301      	movs	r3, #1
 8009b56:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
      kk = 0;
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
      exitg2 = false;
 8009b60:	2300      	movs	r3, #0
 8009b62:	f887 3289 	strb.w	r3, [r7, #649]	; 0x289
      while ((!exitg2) && (kk < 3)) {
 8009b66:	e044      	b.n	8009bf2 <UTMeanCovSqrt_C2vgLQ4W+0x169e>
        int32_T exitg1;
        iAcol = kk + 1;
 8009b68:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8009b6c:	3301      	adds	r3, #1
 8009b6e:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
        do {
          exitg1 = 0;
 8009b72:	2300      	movs	r3, #0
 8009b74:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
          if (iAcol + 1 < 4) {
 8009b78:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8009b7c:	2b02      	cmp	r3, #2
 8009b7e:	dc25      	bgt.n	8009bcc <UTMeanCovSqrt_C2vgLQ4W+0x1678>
            if (!(Sy[3 * kk + iAcol] == 0.0)) {
 8009b80:	f8d7 228c 	ldr.w	r2, [r7, #652]	; 0x28c
 8009b84:	4613      	mov	r3, r2
 8009b86:	005b      	lsls	r3, r3, #1
 8009b88:	441a      	add	r2, r3
 8009b8a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8009b8e:	4413      	add	r3, r2
 8009b90:	00db      	lsls	r3, r3, #3
 8009b92:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8009b96:	4413      	add	r3, r2
 8009b98:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009b9c:	f04f 0200 	mov.w	r2, #0
 8009ba0:	f04f 0300 	mov.w	r3, #0
 8009ba4:	f7f6 ff82 	bl	8000aac <__aeabi_dcmpeq>
 8009ba8:	4603      	mov	r3, r0
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d106      	bne.n	8009bbc <UTMeanCovSqrt_C2vgLQ4W+0x1668>
              errorCondition = false;
 8009bae:	2300      	movs	r3, #0
 8009bb0:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
              exitg1 = 1;
 8009bb4:	2301      	movs	r3, #1
 8009bb6:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 8009bba:	e00f      	b.n	8009bdc <UTMeanCovSqrt_C2vgLQ4W+0x1688>
            } else {
              iAcol++;
 8009bbc:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8009bc0:	3301      	adds	r3, #1
 8009bc2:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8009bc6:	e009      	b.n	8009bdc <UTMeanCovSqrt_C2vgLQ4W+0x1688>
 8009bc8:	2001ec10 	.word	0x2001ec10
            }
          } else {
            kk++;
 8009bcc:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8009bd0:	3301      	adds	r3, #1
 8009bd2:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
            exitg1 = 2;
 8009bd6:	2302      	movs	r3, #2
 8009bd8:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
          }
        } while (exitg1 == 0);
 8009bdc:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d0c6      	beq.n	8009b72 <UTMeanCovSqrt_C2vgLQ4W+0x161e>

        if (exitg1 == 1) {
 8009be4:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8009be8:	2b01      	cmp	r3, #1
 8009bea:	d102      	bne.n	8009bf2 <UTMeanCovSqrt_C2vgLQ4W+0x169e>
          exitg2 = true;
 8009bec:	2301      	movs	r3, #1
 8009bee:	f887 3289 	strb.w	r3, [r7, #649]	; 0x289
      while ((!exitg2) && (kk < 3)) {
 8009bf2:	f897 3289 	ldrb.w	r3, [r7, #649]	; 0x289
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d103      	bne.n	8009c02 <UTMeanCovSqrt_C2vgLQ4W+0x16ae>
 8009bfa:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8009bfe:	2b02      	cmp	r3, #2
 8009c00:	ddb2      	ble.n	8009b68 <UTMeanCovSqrt_C2vgLQ4W+0x1614>
        }
      }

      if (!errorCondition) {
 8009c02:	f897 328b 	ldrb.w	r3, [r7, #651]	; 0x28b
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d110      	bne.n	8009c2c <UTMeanCovSqrt_C2vgLQ4W+0x16d8>
        memcpy(&Sy_0[0], &Sy[0], 9U * sizeof(real_T));
 8009c0a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8009c0e:	2248      	movs	r2, #72	; 0x48
 8009c10:	f8d7 12e4 	ldr.w	r1, [r7, #740]	; 0x2e4
 8009c14:	4618      	mov	r0, r3
 8009c16:	f011 fa21 	bl	801b05c <memcpy>
        qr_5a2P8Gh6(Sy_0, Y1_0, Sy);
 8009c1a:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8009c1e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8009c22:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8009c26:	4618      	mov	r0, r3
 8009c28:	f000 fec4 	bl	800a9b4 <qr_5a2P8Gh6>
      }
    }

    kk = 0;
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
    for (iAcol = 0; iAcol < 3; iAcol++) {
 8009c32:	2300      	movs	r3, #0
 8009c34:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8009c38:	e03d      	b.n	8009cb6 <UTMeanCovSqrt_C2vgLQ4W+0x1762>
      Sy_0[kk] = Sy[iAcol];
 8009c3a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8009c3e:	00db      	lsls	r3, r3, #3
 8009c40:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8009c44:	4413      	add	r3, r2
 8009c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c4a:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8009c4e:	f8d7 128c 	ldr.w	r1, [r7, #652]	; 0x28c
 8009c52:	00c9      	lsls	r1, r1, #3
 8009c54:	4401      	add	r1, r0
 8009c56:	e9c1 2300 	strd	r2, r3, [r1]
      Sy_0[kk + 1] = Sy[iAcol + 3];
 8009c5a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8009c5e:	3303      	adds	r3, #3
 8009c60:	00db      	lsls	r3, r3, #3
 8009c62:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8009c66:	4413      	add	r3, r2
 8009c68:	f8d7 228c 	ldr.w	r2, [r7, #652]	; 0x28c
 8009c6c:	1c51      	adds	r1, r2, #1
 8009c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c72:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8009c76:	00c9      	lsls	r1, r1, #3
 8009c78:	4401      	add	r1, r0
 8009c7a:	e9c1 2300 	strd	r2, r3, [r1]
      Sy_0[kk + 2] = Sy[iAcol + 6];
 8009c7e:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8009c82:	3306      	adds	r3, #6
 8009c84:	00db      	lsls	r3, r3, #3
 8009c86:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8009c8a:	4413      	add	r3, r2
 8009c8c:	f8d7 228c 	ldr.w	r2, [r7, #652]	; 0x28c
 8009c90:	1c91      	adds	r1, r2, #2
 8009c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c96:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8009c9a:	00c9      	lsls	r1, r1, #3
 8009c9c:	4401      	add	r1, r0
 8009c9e:	e9c1 2300 	strd	r2, r3, [r1]
      kk += 3;
 8009ca2:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8009ca6:	3303      	adds	r3, #3
 8009ca8:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
    for (iAcol = 0; iAcol < 3; iAcol++) {
 8009cac:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8009cb0:	3301      	adds	r3, #1
 8009cb2:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8009cb6:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8009cba:	2b02      	cmp	r3, #2
 8009cbc:	ddbd      	ble.n	8009c3a <UTMeanCovSqrt_C2vgLQ4W+0x16e6>
    }

    for (kk = 0; kk < 9; kk++) {
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8009cc4:	e01a      	b.n	8009cfc <UTMeanCovSqrt_C2vgLQ4W+0x17a8>
      Sy[kk] = signOOM * Sy_0[kk];
 8009cc6:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8009cca:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8009cce:	00db      	lsls	r3, r3, #3
 8009cd0:	4413      	add	r3, r2
 8009cd2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009cd6:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8009cda:	00db      	lsls	r3, r3, #3
 8009cdc:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8009ce0:	18d4      	adds	r4, r2, r3
 8009ce2:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 8009ce6:	f7f6 fc79 	bl	80005dc <__aeabi_dmul>
 8009cea:	4602      	mov	r2, r0
 8009cec:	460b      	mov	r3, r1
 8009cee:	e9c4 2300 	strd	r2, r3, [r4]
    for (kk = 0; kk < 9; kk++) {
 8009cf2:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8009cf6:	3301      	adds	r3, #1
 8009cf8:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8009cfc:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8009d00:	2b08      	cmp	r3, #8
 8009d02:	dde0      	ble.n	8009cc6 <UTMeanCovSqrt_C2vgLQ4W+0x1772>
    }
  }

  iAcol = 0;
 8009d04:	2300      	movs	r3, #0
 8009d06:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
  for (kk = 0; kk < 6; kk++) {
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8009d10:	e057      	b.n	8009dc2 <UTMeanCovSqrt_C2vgLQ4W+0x186e>
    X2[iAcol] -= X1[0];
 8009d12:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8009d16:	00db      	lsls	r3, r3, #3
 8009d18:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 8009d1c:	4413      	add	r3, r2
 8009d1e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009d22:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 8009d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d2a:	f8d7 4298 	ldr.w	r4, [r7, #664]	; 0x298
 8009d2e:	00e4      	lsls	r4, r4, #3
 8009d30:	f8d7 52dc 	ldr.w	r5, [r7, #732]	; 0x2dc
 8009d34:	442c      	add	r4, r5
 8009d36:	f7f6 fa99 	bl	800026c <__aeabi_dsub>
 8009d3a:	4602      	mov	r2, r0
 8009d3c:	460b      	mov	r3, r1
 8009d3e:	e9c4 2300 	strd	r2, r3, [r4]
    X2[iAcol + 1] -= X1[1];
 8009d42:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8009d46:	3301      	adds	r3, #1
 8009d48:	00db      	lsls	r3, r3, #3
 8009d4a:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 8009d4e:	4413      	add	r3, r2
 8009d50:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009d54:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 8009d58:	3308      	adds	r3, #8
 8009d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d5e:	f8d7 4298 	ldr.w	r4, [r7, #664]	; 0x298
 8009d62:	3401      	adds	r4, #1
 8009d64:	00e4      	lsls	r4, r4, #3
 8009d66:	f8d7 52dc 	ldr.w	r5, [r7, #732]	; 0x2dc
 8009d6a:	442c      	add	r4, r5
 8009d6c:	f7f6 fa7e 	bl	800026c <__aeabi_dsub>
 8009d70:	4602      	mov	r2, r0
 8009d72:	460b      	mov	r3, r1
 8009d74:	e9c4 2300 	strd	r2, r3, [r4]
    X2[iAcol + 2] -= X1[2];
 8009d78:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8009d7c:	3302      	adds	r3, #2
 8009d7e:	00db      	lsls	r3, r3, #3
 8009d80:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 8009d84:	4413      	add	r3, r2
 8009d86:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009d8a:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 8009d8e:	3310      	adds	r3, #16
 8009d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d94:	f8d7 4298 	ldr.w	r4, [r7, #664]	; 0x298
 8009d98:	3402      	adds	r4, #2
 8009d9a:	00e4      	lsls	r4, r4, #3
 8009d9c:	f8d7 52dc 	ldr.w	r5, [r7, #732]	; 0x2dc
 8009da0:	442c      	add	r4, r5
 8009da2:	f7f6 fa63 	bl	800026c <__aeabi_dsub>
 8009da6:	4602      	mov	r2, r0
 8009da8:	460b      	mov	r3, r1
 8009daa:	e9c4 2300 	strd	r2, r3, [r4]
    iAcol += 3;
 8009dae:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8009db2:	3303      	adds	r3, #3
 8009db4:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
  for (kk = 0; kk < 6; kk++) {
 8009db8:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8009dbc:	3301      	adds	r3, #1
 8009dbe:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8009dc2:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8009dc6:	2b05      	cmp	r3, #5
 8009dc8:	dda3      	ble.n	8009d12 <UTMeanCovSqrt_C2vgLQ4W+0x17be>
  }

  signOOM = covWeights_1 * OOM;
 8009dca:	f107 0308 	add.w	r3, r7, #8
 8009dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dd2:	e9d7 019a 	ldrd	r0, r1, [r7, #616]	; 0x268
 8009dd6:	f7f6 fc01 	bl	80005dc <__aeabi_dmul>
 8009dda:	4602      	mov	r2, r0
 8009ddc:	460b      	mov	r3, r1
 8009dde:	e9c7 23a8 	strd	r2, r3, [r7, #672]	; 0x2a0
  for (kk = 0; kk < 3; kk++) {
 8009de2:	2300      	movs	r3, #0
 8009de4:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8009de8:	e071      	b.n	8009ece <UTMeanCovSqrt_C2vgLQ4W+0x197a>
    iAcol = 0;
 8009dea:	2300      	movs	r3, #0
 8009dec:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
    for (i_1 = 0; i_1 < 3; i_1++) {
 8009df0:	2300      	movs	r3, #0
 8009df2:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
 8009df6:	e061      	b.n	8009ebc <UTMeanCovSqrt_C2vgLQ4W+0x1968>
      Sy_tmp = iAcol + kk;
 8009df8:	f8d7 2298 	ldr.w	r2, [r7, #664]	; 0x298
 8009dfc:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8009e00:	4413      	add	r3, r2
 8009e02:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
      Ss[Sy_tmp] = 0.0;
 8009e06:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8009e0a:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8009e0e:	00db      	lsls	r3, r3, #3
 8009e10:	18d1      	adds	r1, r2, r3
 8009e12:	f04f 0200 	mov.w	r2, #0
 8009e16:	f04f 0300 	mov.w	r3, #0
 8009e1a:	e9c1 2300 	strd	r2, r3, [r1]
      i = 0;
 8009e1e:	2300      	movs	r3, #0
 8009e20:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
      for (i_0 = 0; i_0 < 6; i_0++) {
 8009e24:	2300      	movs	r3, #0
 8009e26:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 8009e2a:	e039      	b.n	8009ea0 <UTMeanCovSqrt_C2vgLQ4W+0x194c>
        Ss[Sy_tmp] += X2[i + kk] * Y2[i + i_1];
 8009e2c:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8009e30:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8009e34:	00db      	lsls	r3, r3, #3
 8009e36:	4413      	add	r3, r2
 8009e38:	e9d3 4500 	ldrd	r4, r5, [r3]
 8009e3c:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8009e40:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8009e44:	4413      	add	r3, r2
 8009e46:	00db      	lsls	r3, r3, #3
 8009e48:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 8009e4c:	4413      	add	r3, r2
 8009e4e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009e52:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8009e56:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8009e5a:	4413      	add	r3, r2
 8009e5c:	00db      	lsls	r3, r3, #3
 8009e5e:	463a      	mov	r2, r7
 8009e60:	6812      	ldr	r2, [r2, #0]
 8009e62:	4413      	add	r3, r2
 8009e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e68:	f7f6 fbb8 	bl	80005dc <__aeabi_dmul>
 8009e6c:	4602      	mov	r2, r0
 8009e6e:	460b      	mov	r3, r1
 8009e70:	4620      	mov	r0, r4
 8009e72:	4629      	mov	r1, r5
 8009e74:	f7f6 f9fc 	bl	8000270 <__adddf3>
 8009e78:	4602      	mov	r2, r0
 8009e7a:	460b      	mov	r3, r1
 8009e7c:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 8009e80:	f8d7 1264 	ldr.w	r1, [r7, #612]	; 0x264
 8009e84:	00c9      	lsls	r1, r1, #3
 8009e86:	4401      	add	r1, r0
 8009e88:	e9c1 2300 	strd	r2, r3, [r1]
        i += 3;
 8009e8c:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8009e90:	3303      	adds	r3, #3
 8009e92:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
      for (i_0 = 0; i_0 < 6; i_0++) {
 8009e96:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8009e9a:	3301      	adds	r3, #1
 8009e9c:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 8009ea0:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8009ea4:	2b05      	cmp	r3, #5
 8009ea6:	ddc1      	ble.n	8009e2c <UTMeanCovSqrt_C2vgLQ4W+0x18d8>
      }

      iAcol += 3;
 8009ea8:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8009eac:	3303      	adds	r3, #3
 8009eae:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
    for (i_1 = 0; i_1 < 3; i_1++) {
 8009eb2:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8009eb6:	3301      	adds	r3, #1
 8009eb8:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
 8009ebc:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8009ec0:	2b02      	cmp	r3, #2
 8009ec2:	dd99      	ble.n	8009df8 <UTMeanCovSqrt_C2vgLQ4W+0x18a4>
  for (kk = 0; kk < 3; kk++) {
 8009ec4:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8009ec8:	3301      	adds	r3, #1
 8009eca:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8009ece:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8009ed2:	2b02      	cmp	r3, #2
 8009ed4:	dd89      	ble.n	8009dea <UTMeanCovSqrt_C2vgLQ4W+0x1896>
    }
  }

  for (kk = 0; kk < 9; kk++) {
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8009edc:	e01a      	b.n	8009f14 <UTMeanCovSqrt_C2vgLQ4W+0x19c0>
    Pxy[kk] = Ss[kk] * signOOM;
 8009ede:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8009ee2:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8009ee6:	00db      	lsls	r3, r3, #3
 8009ee8:	4413      	add	r3, r2
 8009eea:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009eee:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8009ef2:	00db      	lsls	r3, r3, #3
 8009ef4:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 8009ef8:	18d4      	adds	r4, r2, r3
 8009efa:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 8009efe:	f7f6 fb6d 	bl	80005dc <__aeabi_dmul>
 8009f02:	4602      	mov	r2, r0
 8009f04:	460b      	mov	r3, r1
 8009f06:	e9c4 2300 	strd	r2, r3, [r4]
  for (kk = 0; kk < 9; kk++) {
 8009f0a:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8009f0e:	3301      	adds	r3, #1
 8009f10:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8009f14:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8009f18:	2b08      	cmp	r3, #8
 8009f1a:	dde0      	ble.n	8009ede <UTMeanCovSqrt_C2vgLQ4W+0x198a>
  }
}
 8009f1c:	bf00      	nop
 8009f1e:	bf00      	nop
 8009f20:	f507 772f 	add.w	r7, r7, #700	; 0x2bc
 8009f24:	46bd      	mov	sp, r7
 8009f26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009f2a:	bf00      	nop

08009f2c <UTMeanCovSqrt_C6QfB9Td>:
#include "rotate_LZ7ctbe0.h"

void UTMeanCovSqrt_C6QfB9Td(const real_T meanWeights[2], const real_T
  covWeights[2], real_T OOM, real_T Y1, real_T Y2[6], const real_T X1[3], real_T
  X2[18], real_T *Ymean, real_T *Sy, real_T Pxy[3])
{
 8009f2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009f30:	ed2d 8b02 	vpush	{d8}
 8009f34:	b0ac      	sub	sp, #176	; 0xb0
 8009f36:	af00      	add	r7, sp, #0
 8009f38:	6378      	str	r0, [r7, #52]	; 0x34
 8009f3a:	6339      	str	r1, [r7, #48]	; 0x30
 8009f3c:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
 8009f40:	ed87 1b08 	vstr	d1, [r7, #32]
 8009f44:	61fa      	str	r2, [r7, #28]
 8009f46:	61bb      	str	r3, [r7, #24]
  real_T signOOM;
  real_T xnorm;
  int32_T b_k;
  int32_T i;
  int32_T knt;
  *Ymean = Y1 * meanWeights[0];
 8009f48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f4a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009f4e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009f52:	f7f6 fb43 	bl	80005dc <__aeabi_dmul>
 8009f56:	4602      	mov	r2, r0
 8009f58:	460b      	mov	r3, r1
 8009f5a:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8009f5e:	e9c1 2300 	strd	r2, r3, [r1]
  for (knt = 0; knt < 6; knt++) {
 8009f62:	2300      	movs	r3, #0
 8009f64:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009f68:	e021      	b.n	8009fae <UTMeanCovSqrt_C6QfB9Td+0x82>
    *Ymean += Y2[knt] * meanWeights[1];
 8009f6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009f6e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8009f72:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009f76:	00db      	lsls	r3, r3, #3
 8009f78:	69fa      	ldr	r2, [r7, #28]
 8009f7a:	4413      	add	r3, r2
 8009f7c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009f80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f82:	3308      	adds	r3, #8
 8009f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f88:	f7f6 fb28 	bl	80005dc <__aeabi_dmul>
 8009f8c:	4602      	mov	r2, r0
 8009f8e:	460b      	mov	r3, r1
 8009f90:	4620      	mov	r0, r4
 8009f92:	4629      	mov	r1, r5
 8009f94:	f7f6 f96c 	bl	8000270 <__adddf3>
 8009f98:	4602      	mov	r2, r0
 8009f9a:	460b      	mov	r3, r1
 8009f9c:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8009fa0:	e9c1 2300 	strd	r2, r3, [r1]
  for (knt = 0; knt < 6; knt++) {
 8009fa4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009fa8:	3301      	adds	r3, #1
 8009faa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009fae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009fb2:	2b05      	cmp	r3, #5
 8009fb4:	ddd9      	ble.n	8009f6a <UTMeanCovSqrt_C6QfB9Td+0x3e>
  }

  *Ymean *= OOM;
 8009fb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009fba:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009fbe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009fc2:	f7f6 fb0b 	bl	80005dc <__aeabi_dmul>
 8009fc6:	4602      	mov	r2, r0
 8009fc8:	460b      	mov	r3, r1
 8009fca:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8009fce:	e9c1 2300 	strd	r2, r3, [r1]
  Y1 -= *Ymean;
 8009fd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fda:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8009fde:	f7f6 f945 	bl	800026c <__aeabi_dsub>
 8009fe2:	4602      	mov	r2, r0
 8009fe4:	460b      	mov	r3, r1
 8009fe6:	e9c7 2308 	strd	r2, r3, [r7, #32]
  for (knt = 0; knt < 6; knt++) {
 8009fea:	2300      	movs	r3, #0
 8009fec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009ff0:	e01c      	b.n	800a02c <UTMeanCovSqrt_C6QfB9Td+0x100>
    Y2[knt] -= *Ymean;
 8009ff2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009ff6:	00db      	lsls	r3, r3, #3
 8009ff8:	69fa      	ldr	r2, [r7, #28]
 8009ffa:	4413      	add	r3, r2
 8009ffc:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a000:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a004:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a008:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a00c:	00db      	lsls	r3, r3, #3
 800a00e:	69fa      	ldr	r2, [r7, #28]
 800a010:	18d4      	adds	r4, r2, r3
 800a012:	4642      	mov	r2, r8
 800a014:	464b      	mov	r3, r9
 800a016:	f7f6 f929 	bl	800026c <__aeabi_dsub>
 800a01a:	4602      	mov	r2, r0
 800a01c:	460b      	mov	r3, r1
 800a01e:	e9c4 2300 	strd	r2, r3, [r4]
  for (knt = 0; knt < 6; knt++) {
 800a022:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a026:	3301      	adds	r3, #1
 800a028:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a02c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a030:	2b05      	cmp	r3, #5
 800a032:	ddde      	ble.n	8009ff2 <UTMeanCovSqrt_C6QfB9Td+0xc6>
  }

  if (rtIsNaN(OOM)) {
 800a034:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 800a038:	f003 f82c 	bl	800d094 <rtIsNaN>
 800a03c:	4603      	mov	r3, r0
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d004      	beq.n	800a04c <UTMeanCovSqrt_C6QfB9Td+0x120>
    signOOM = OOM;
 800a042:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a046:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 800a04a:	e025      	b.n	800a098 <UTMeanCovSqrt_C6QfB9Td+0x16c>
  } else if (OOM < 0.0) {
 800a04c:	f04f 0200 	mov.w	r2, #0
 800a050:	f04f 0300 	mov.w	r3, #0
 800a054:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800a058:	f7f6 fd32 	bl	8000ac0 <__aeabi_dcmplt>
 800a05c:	4603      	mov	r3, r0
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d005      	beq.n	800a06e <UTMeanCovSqrt_C6QfB9Td+0x142>
    signOOM = -1.0;
 800a062:	f04f 0200 	mov.w	r2, #0
 800a066:	4bc3      	ldr	r3, [pc, #780]	; (800a374 <UTMeanCovSqrt_C6QfB9Td+0x448>)
 800a068:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 800a06c:	e014      	b.n	800a098 <UTMeanCovSqrt_C6QfB9Td+0x16c>
  } else {
    signOOM = (OOM > 0.0);
 800a06e:	f04f 0200 	mov.w	r2, #0
 800a072:	f04f 0300 	mov.w	r3, #0
 800a076:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800a07a:	f7f6 fd3f 	bl	8000afc <__aeabi_dcmpgt>
 800a07e:	4603      	mov	r3, r0
 800a080:	2b00      	cmp	r3, #0
 800a082:	d003      	beq.n	800a08c <UTMeanCovSqrt_C6QfB9Td+0x160>
 800a084:	f04f 0200 	mov.w	r2, #0
 800a088:	4bbb      	ldr	r3, [pc, #748]	; (800a378 <UTMeanCovSqrt_C6QfB9Td+0x44c>)
 800a08a:	e003      	b.n	800a094 <UTMeanCovSqrt_C6QfB9Td+0x168>
 800a08c:	f04f 0200 	mov.w	r2, #0
 800a090:	f04f 0300 	mov.w	r3, #0
 800a094:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  }

  covWeights_0 = signOOM * covWeights[0];
 800a098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a09a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a09e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a0a2:	f7f6 fa9b 	bl	80005dc <__aeabi_dmul>
 800a0a6:	4602      	mov	r2, r0
 800a0a8:	460b      	mov	r3, r1
 800a0aa:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
  covWeights_1 = signOOM * covWeights[1];
 800a0ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0b0:	3308      	adds	r3, #8
 800a0b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a0b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a0ba:	f7f6 fa8f 	bl	80005dc <__aeabi_dmul>
 800a0be:	4602      	mov	r2, r0
 800a0c0:	460b      	mov	r3, r1
 800a0c2:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
  OOM *= signOOM;
 800a0c6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a0ca:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800a0ce:	f7f6 fa85 	bl	80005dc <__aeabi_dmul>
 800a0d2:	4602      	mov	r2, r0
 800a0d4:	460b      	mov	r3, r1
 800a0d6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  signOOM = sqrt(covWeights_1);
 800a0da:	ed97 0b26 	vldr	d0, [r7, #152]	; 0x98
 800a0de:	f011 f983 	bl	801b3e8 <sqrt>
 800a0e2:	eeb0 7a40 	vmov.f32	s14, s0
 800a0e6:	eef0 7a60 	vmov.f32	s15, s1
 800a0ea:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
  for (knt = 0; knt < 6; knt++) {
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a0f4:	e01a      	b.n	800a12c <UTMeanCovSqrt_C6QfB9Td+0x200>
    A[knt] = signOOM * Y2[knt];
 800a0f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a0fa:	00db      	lsls	r3, r3, #3
 800a0fc:	69fa      	ldr	r2, [r7, #28]
 800a0fe:	4413      	add	r3, r2
 800a100:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a104:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a108:	f7f6 fa68 	bl	80005dc <__aeabi_dmul>
 800a10c:	4602      	mov	r2, r0
 800a10e:	460b      	mov	r3, r1
 800a110:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a114:	00c9      	lsls	r1, r1, #3
 800a116:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 800a11a:	4401      	add	r1, r0
 800a11c:	3948      	subs	r1, #72	; 0x48
 800a11e:	e9c1 2300 	strd	r2, r3, [r1]
  for (knt = 0; knt < 6; knt++) {
 800a122:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a126:	3301      	adds	r3, #1
 800a128:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a12c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a130:	2b05      	cmp	r3, #5
 800a132:	dde0      	ble.n	800a0f6 <UTMeanCovSqrt_C6QfB9Td+0x1ca>
  }

  signOOM = A[0];
 800a134:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800a138:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  xnorm = xnrm2_7bm34mDQ(5, A, 2);
 800a13c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800a140:	2202      	movs	r2, #2
 800a142:	4619      	mov	r1, r3
 800a144:	2005      	movs	r0, #5
 800a146:	f005 f973 	bl	800f430 <xnrm2_7bm34mDQ>
 800a14a:	eeb0 7a40 	vmov.f32	s14, s0
 800a14e:	eef0 7a60 	vmov.f32	s15, s1
 800a152:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
  if (xnorm != 0.0) {
 800a156:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800a15a:	f04f 0200 	mov.w	r2, #0
 800a15e:	f04f 0300 	mov.w	r3, #0
 800a162:	f7f6 fca3 	bl	8000aac <__aeabi_dcmpeq>
 800a166:	4603      	mov	r3, r0
 800a168:	2b00      	cmp	r3, #0
 800a16a:	f040 80e7 	bne.w	800a33c <UTMeanCovSqrt_C6QfB9Td+0x410>
    xnorm = rt_hypotd_snf(A[0], xnorm);
 800a16e:	ed97 7b1a 	vldr	d7, [r7, #104]	; 0x68
 800a172:	ed97 6b0e 	vldr	d6, [r7, #56]	; 0x38
 800a176:	eeb0 1a46 	vmov.f32	s2, s12
 800a17a:	eef0 1a66 	vmov.f32	s3, s13
 800a17e:	eeb0 0a47 	vmov.f32	s0, s14
 800a182:	eef0 0a67 	vmov.f32	s1, s15
 800a186:	f002 fe77 	bl	800ce78 <rt_hypotd_snf>
 800a18a:	eeb0 7a40 	vmov.f32	s14, s0
 800a18e:	eef0 7a60 	vmov.f32	s15, s1
 800a192:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
    if (A[0] >= 0.0) {
 800a196:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a19a:	f04f 0200 	mov.w	r2, #0
 800a19e:	f04f 0300 	mov.w	r3, #0
 800a1a2:	f7f6 fca1 	bl	8000ae8 <__aeabi_dcmpge>
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d009      	beq.n	800a1c0 <UTMeanCovSqrt_C6QfB9Td+0x294>
      xnorm = -xnorm;
 800a1ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a1b0:	613a      	str	r2, [r7, #16]
 800a1b2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800a1b6:	617b      	str	r3, [r7, #20]
 800a1b8:	ed97 7b04 	vldr	d7, [r7, #16]
 800a1bc:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
    }

    if (fabs(xnorm) < 1.0020841800044864E-292) {
 800a1c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a1c4:	60ba      	str	r2, [r7, #8]
 800a1c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a1ca:	60fb      	str	r3, [r7, #12]
 800a1cc:	f04f 0200 	mov.w	r2, #0
 800a1d0:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800a1d4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a1d8:	f7f6 fc72 	bl	8000ac0 <__aeabi_dcmplt>
 800a1dc:	4603      	mov	r3, r0
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	f000 80a8 	beq.w	800a334 <UTMeanCovSqrt_C6QfB9Td+0x408>
      knt = 0;
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
      do {
        knt++;
 800a1ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a1ee:	3301      	adds	r3, #1
 800a1f0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        for (b_k = 1; b_k < 6; b_k++) {
 800a1f4:	2301      	movs	r3, #1
 800a1f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a1fa:	e01d      	b.n	800a238 <UTMeanCovSqrt_C6QfB9Td+0x30c>
          A[b_k] *= 9.9792015476736E+291;
 800a1fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a200:	00db      	lsls	r3, r3, #3
 800a202:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800a206:	4413      	add	r3, r2
 800a208:	3b48      	subs	r3, #72	; 0x48
 800a20a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a20e:	f04f 0200 	mov.w	r2, #0
 800a212:	4b5a      	ldr	r3, [pc, #360]	; (800a37c <UTMeanCovSqrt_C6QfB9Td+0x450>)
 800a214:	f7f6 f9e2 	bl	80005dc <__aeabi_dmul>
 800a218:	4602      	mov	r2, r0
 800a21a:	460b      	mov	r3, r1
 800a21c:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 800a220:	00c9      	lsls	r1, r1, #3
 800a222:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 800a226:	4401      	add	r1, r0
 800a228:	3948      	subs	r1, #72	; 0x48
 800a22a:	e9c1 2300 	strd	r2, r3, [r1]
        for (b_k = 1; b_k < 6; b_k++) {
 800a22e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a232:	3301      	adds	r3, #1
 800a234:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a238:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a23c:	2b05      	cmp	r3, #5
 800a23e:	dddd      	ble.n	800a1fc <UTMeanCovSqrt_C6QfB9Td+0x2d0>
        }

        xnorm *= 9.9792015476736E+291;
 800a240:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800a244:	f04f 0200 	mov.w	r2, #0
 800a248:	4b4c      	ldr	r3, [pc, #304]	; (800a37c <UTMeanCovSqrt_C6QfB9Td+0x450>)
 800a24a:	f7f6 f9c7 	bl	80005dc <__aeabi_dmul>
 800a24e:	4602      	mov	r2, r0
 800a250:	460b      	mov	r3, r1
 800a252:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
        signOOM *= 9.9792015476736E+291;
 800a256:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800a25a:	f04f 0200 	mov.w	r2, #0
 800a25e:	4b47      	ldr	r3, [pc, #284]	; (800a37c <UTMeanCovSqrt_C6QfB9Td+0x450>)
 800a260:	f7f6 f9bc 	bl	80005dc <__aeabi_dmul>
 800a264:	4602      	mov	r2, r0
 800a266:	460b      	mov	r3, r1
 800a268:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      } while ((fabs(xnorm) < 1.0020841800044864E-292) && (knt < 20));
 800a26c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a270:	603a      	str	r2, [r7, #0]
 800a272:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a276:	607b      	str	r3, [r7, #4]
 800a278:	f04f 0200 	mov.w	r2, #0
 800a27c:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800a280:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a284:	f7f6 fc1c 	bl	8000ac0 <__aeabi_dcmplt>
 800a288:	4603      	mov	r3, r0
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d003      	beq.n	800a296 <UTMeanCovSqrt_C6QfB9Td+0x36a>
 800a28e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a292:	2b13      	cmp	r3, #19
 800a294:	dda9      	ble.n	800a1ea <UTMeanCovSqrt_C6QfB9Td+0x2be>

      xnorm = rt_hypotd_snf(signOOM, xnrm2_7bm34mDQ(5, A, 2));
 800a296:	ed97 8b10 	vldr	d8, [r7, #64]	; 0x40
 800a29a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800a29e:	2202      	movs	r2, #2
 800a2a0:	4619      	mov	r1, r3
 800a2a2:	2005      	movs	r0, #5
 800a2a4:	f005 f8c4 	bl	800f430 <xnrm2_7bm34mDQ>
 800a2a8:	eeb0 7a40 	vmov.f32	s14, s0
 800a2ac:	eef0 7a60 	vmov.f32	s15, s1
 800a2b0:	eeb0 1a47 	vmov.f32	s2, s14
 800a2b4:	eef0 1a67 	vmov.f32	s3, s15
 800a2b8:	eeb0 0a48 	vmov.f32	s0, s16
 800a2bc:	eef0 0a68 	vmov.f32	s1, s17
 800a2c0:	f002 fdda 	bl	800ce78 <rt_hypotd_snf>
 800a2c4:	eeb0 7a40 	vmov.f32	s14, s0
 800a2c8:	eef0 7a60 	vmov.f32	s15, s1
 800a2cc:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
      if (signOOM >= 0.0) {
 800a2d0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800a2d4:	f04f 0200 	mov.w	r2, #0
 800a2d8:	f04f 0300 	mov.w	r3, #0
 800a2dc:	f7f6 fc04 	bl	8000ae8 <__aeabi_dcmpge>
 800a2e0:	4603      	mov	r3, r0
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d006      	beq.n	800a2f4 <UTMeanCovSqrt_C6QfB9Td+0x3c8>
        xnorm = -xnorm;
 800a2e6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a2ea:	4692      	mov	sl, r2
 800a2ec:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 800a2f0:	e9c7 ab0e 	strd	sl, fp, [r7, #56]	; 0x38
      }

      for (b_k = 0; b_k < knt; b_k++) {
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a2fa:	e010      	b.n	800a31e <UTMeanCovSqrt_C6QfB9Td+0x3f2>
        xnorm *= 1.0020841800044864E-292;
 800a2fc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800a300:	f04f 0200 	mov.w	r2, #0
 800a304:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800a308:	f7f6 f968 	bl	80005dc <__aeabi_dmul>
 800a30c:	4602      	mov	r2, r0
 800a30e:	460b      	mov	r3, r1
 800a310:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
      for (b_k = 0; b_k < knt; b_k++) {
 800a314:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a318:	3301      	adds	r3, #1
 800a31a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a31e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a322:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a326:	429a      	cmp	r2, r3
 800a328:	dbe8      	blt.n	800a2fc <UTMeanCovSqrt_C6QfB9Td+0x3d0>
      }

      signOOM = xnorm;
 800a32a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a32e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 800a332:	e003      	b.n	800a33c <UTMeanCovSqrt_C6QfB9Td+0x410>
    } else {
      signOOM = xnorm;
 800a334:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a338:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    }
  }

  if (!rtIsNaN(covWeights_0)) {
 800a33c:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 800a340:	eeb0 0a47 	vmov.f32	s0, s14
 800a344:	eef0 0a67 	vmov.f32	s1, s15
 800a348:	f002 fea4 	bl	800d094 <rtIsNaN>
 800a34c:	4603      	mov	r3, r0
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d12b      	bne.n	800a3aa <UTMeanCovSqrt_C6QfB9Td+0x47e>
    if (covWeights_0 < 0.0) {
 800a352:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800a356:	f04f 0200 	mov.w	r2, #0
 800a35a:	f04f 0300 	mov.w	r3, #0
 800a35e:	f7f6 fbaf 	bl	8000ac0 <__aeabi_dcmplt>
 800a362:	4603      	mov	r3, r0
 800a364:	2b00      	cmp	r3, #0
 800a366:	d00b      	beq.n	800a380 <UTMeanCovSqrt_C6QfB9Td+0x454>
      covWeights_0 = -1.0;
 800a368:	f04f 0200 	mov.w	r2, #0
 800a36c:	4b01      	ldr	r3, [pc, #4]	; (800a374 <UTMeanCovSqrt_C6QfB9Td+0x448>)
 800a36e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 800a372:	e01a      	b.n	800a3aa <UTMeanCovSqrt_C6QfB9Td+0x47e>
 800a374:	bff00000 	.word	0xbff00000
 800a378:	3ff00000 	.word	0x3ff00000
 800a37c:	7c900000 	.word	0x7c900000
    } else {
      covWeights_0 = (covWeights_0 > 0.0);
 800a380:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800a384:	f04f 0200 	mov.w	r2, #0
 800a388:	f04f 0300 	mov.w	r3, #0
 800a38c:	f7f6 fbb6 	bl	8000afc <__aeabi_dcmpgt>
 800a390:	4603      	mov	r3, r0
 800a392:	2b00      	cmp	r3, #0
 800a394:	d003      	beq.n	800a39e <UTMeanCovSqrt_C6QfB9Td+0x472>
 800a396:	f04f 0200 	mov.w	r2, #0
 800a39a:	4b99      	ldr	r3, [pc, #612]	; (800a600 <UTMeanCovSqrt_C6QfB9Td+0x6d4>)
 800a39c:	e003      	b.n	800a3a6 <UTMeanCovSqrt_C6QfB9Td+0x47a>
 800a39e:	f04f 0200 	mov.w	r2, #0
 800a3a2:	f04f 0300 	mov.w	r3, #0
 800a3a6:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    }
  }

  if (covWeights_0 == 1.0) {
 800a3aa:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800a3ae:	f04f 0200 	mov.w	r2, #0
 800a3b2:	4b93      	ldr	r3, [pc, #588]	; (800a600 <UTMeanCovSqrt_C6QfB9Td+0x6d4>)
 800a3b4:	f7f6 fb7a 	bl	8000aac <__aeabi_dcmpeq>
 800a3b8:	4603      	mov	r3, r0
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d021      	beq.n	800a402 <UTMeanCovSqrt_C6QfB9Td+0x4d6>
    rotate_LZ7ctbe0(signOOM, Y1, &signOOM, &xnorm, &covWeights_0);
 800a3be:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 800a3c2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a3c6:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800a3ca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	ed97 1b08 	vldr	d1, [r7, #32]
 800a3d4:	eeb0 0a47 	vmov.f32	s0, s14
 800a3d8:	eef0 0a67 	vmov.f32	s1, s15
 800a3dc:	f002 fbc2 	bl	800cb64 <rotate_LZ7ctbe0>
    *Sy = sqrt(OOM) * covWeights_0;
 800a3e0:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 800a3e4:	f011 f800 	bl	801b3e8 <sqrt>
 800a3e8:	ec51 0b10 	vmov	r0, r1, d0
 800a3ec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a3f0:	f7f6 f8f4 	bl	80005dc <__aeabi_dmul>
 800a3f4:	4602      	mov	r2, r0
 800a3f6:	460b      	mov	r3, r1
 800a3f8:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 800a3fc:	e9c1 2300 	strd	r2, r3, [r1]
 800a400:	e016      	b.n	800a430 <UTMeanCovSqrt_C6QfB9Td+0x504>
  } else {
    cholUpdateFactor_HBMX5a5h(&signOOM, Y1);
 800a402:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a406:	ed97 0b08 	vldr	d0, [r7, #32]
 800a40a:	4618      	mov	r0, r3
 800a40c:	f000 f8fa 	bl	800a604 <cholUpdateFactor_HBMX5a5h>
    *Sy = sqrt(OOM) * signOOM;
 800a410:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 800a414:	f010 ffe8 	bl	801b3e8 <sqrt>
 800a418:	ec51 0b10 	vmov	r0, r1, d0
 800a41c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a420:	f7f6 f8dc 	bl	80005dc <__aeabi_dmul>
 800a424:	4602      	mov	r2, r0
 800a426:	460b      	mov	r3, r1
 800a428:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 800a42c:	e9c1 2300 	strd	r2, r3, [r1]
  }

  b_k = 0;
 800a430:	2300      	movs	r3, #0
 800a432:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  for (knt = 0; knt < 6; knt++) {
 800a436:	2300      	movs	r3, #0
 800a438:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a43c:	e054      	b.n	800a4e8 <UTMeanCovSqrt_C6QfB9Td+0x5bc>
    X2[b_k] -= X1[0];
 800a43e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a442:	00db      	lsls	r3, r3, #3
 800a444:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800a448:	4413      	add	r3, r2
 800a44a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a44e:	69bb      	ldr	r3, [r7, #24]
 800a450:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a454:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 800a458:	00e4      	lsls	r4, r4, #3
 800a45a:	f8d7 50d8 	ldr.w	r5, [r7, #216]	; 0xd8
 800a45e:	442c      	add	r4, r5
 800a460:	f7f5 ff04 	bl	800026c <__aeabi_dsub>
 800a464:	4602      	mov	r2, r0
 800a466:	460b      	mov	r3, r1
 800a468:	e9c4 2300 	strd	r2, r3, [r4]
    X2[b_k + 1] -= X1[1];
 800a46c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a470:	3301      	adds	r3, #1
 800a472:	00db      	lsls	r3, r3, #3
 800a474:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800a478:	4413      	add	r3, r2
 800a47a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a47e:	69bb      	ldr	r3, [r7, #24]
 800a480:	3308      	adds	r3, #8
 800a482:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a486:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 800a48a:	3401      	adds	r4, #1
 800a48c:	00e4      	lsls	r4, r4, #3
 800a48e:	f8d7 50d8 	ldr.w	r5, [r7, #216]	; 0xd8
 800a492:	442c      	add	r4, r5
 800a494:	f7f5 feea 	bl	800026c <__aeabi_dsub>
 800a498:	4602      	mov	r2, r0
 800a49a:	460b      	mov	r3, r1
 800a49c:	e9c4 2300 	strd	r2, r3, [r4]
    X2[b_k + 2] -= X1[2];
 800a4a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a4a4:	3302      	adds	r3, #2
 800a4a6:	00db      	lsls	r3, r3, #3
 800a4a8:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800a4ac:	4413      	add	r3, r2
 800a4ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a4b2:	69bb      	ldr	r3, [r7, #24]
 800a4b4:	3310      	adds	r3, #16
 800a4b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ba:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 800a4be:	3402      	adds	r4, #2
 800a4c0:	00e4      	lsls	r4, r4, #3
 800a4c2:	f8d7 50d8 	ldr.w	r5, [r7, #216]	; 0xd8
 800a4c6:	442c      	add	r4, r5
 800a4c8:	f7f5 fed0 	bl	800026c <__aeabi_dsub>
 800a4cc:	4602      	mov	r2, r0
 800a4ce:	460b      	mov	r3, r1
 800a4d0:	e9c4 2300 	strd	r2, r3, [r4]
    b_k += 3;
 800a4d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a4d8:	3303      	adds	r3, #3
 800a4da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  for (knt = 0; knt < 6; knt++) {
 800a4de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a4e2:	3301      	adds	r3, #1
 800a4e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a4e8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a4ec:	2b05      	cmp	r3, #5
 800a4ee:	dda6      	ble.n	800a43e <UTMeanCovSqrt_C6QfB9Td+0x512>
  }

  signOOM = covWeights_1 * OOM;
 800a4f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a4f4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a4f8:	f7f6 f870 	bl	80005dc <__aeabi_dmul>
 800a4fc:	4602      	mov	r2, r0
 800a4fe:	460b      	mov	r3, r1
 800a500:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  for (knt = 0; knt < 3; knt++) {
 800a504:	2300      	movs	r3, #0
 800a506:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a50a:	e06c      	b.n	800a5e6 <UTMeanCovSqrt_C6QfB9Td+0x6ba>
    X2_0[knt] = 0.0;
 800a50c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a510:	00db      	lsls	r3, r3, #3
 800a512:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800a516:	4413      	add	r3, r2
 800a518:	f1a3 0160 	sub.w	r1, r3, #96	; 0x60
 800a51c:	f04f 0200 	mov.w	r2, #0
 800a520:	f04f 0300 	mov.w	r3, #0
 800a524:	e9c1 2300 	strd	r2, r3, [r1]
    b_k = 0;
 800a528:	2300      	movs	r3, #0
 800a52a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    for (i = 0; i < 6; i++) {
 800a52e:	2300      	movs	r3, #0
 800a530:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a534:	e037      	b.n	800a5a6 <UTMeanCovSqrt_C6QfB9Td+0x67a>
      X2_0[knt] += X2[b_k + knt] * Y2[i];
 800a536:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a53a:	00db      	lsls	r3, r3, #3
 800a53c:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800a540:	4413      	add	r3, r2
 800a542:	3b60      	subs	r3, #96	; 0x60
 800a544:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a548:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a54c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a550:	4413      	add	r3, r2
 800a552:	00db      	lsls	r3, r3, #3
 800a554:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800a558:	4413      	add	r3, r2
 800a55a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a55e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a562:	00db      	lsls	r3, r3, #3
 800a564:	69fa      	ldr	r2, [r7, #28]
 800a566:	4413      	add	r3, r2
 800a568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a56c:	f7f6 f836 	bl	80005dc <__aeabi_dmul>
 800a570:	4602      	mov	r2, r0
 800a572:	460b      	mov	r3, r1
 800a574:	4620      	mov	r0, r4
 800a576:	4629      	mov	r1, r5
 800a578:	f7f5 fe7a 	bl	8000270 <__adddf3>
 800a57c:	4602      	mov	r2, r0
 800a57e:	460b      	mov	r3, r1
 800a580:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a584:	00c9      	lsls	r1, r1, #3
 800a586:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 800a58a:	4401      	add	r1, r0
 800a58c:	3960      	subs	r1, #96	; 0x60
 800a58e:	e9c1 2300 	strd	r2, r3, [r1]
      b_k += 3;
 800a592:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a596:	3303      	adds	r3, #3
 800a598:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    for (i = 0; i < 6; i++) {
 800a59c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a5a0:	3301      	adds	r3, #1
 800a5a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a5a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a5aa:	2b05      	cmp	r3, #5
 800a5ac:	ddc3      	ble.n	800a536 <UTMeanCovSqrt_C6QfB9Td+0x60a>
    }

    Pxy[knt] = X2_0[knt] * signOOM;
 800a5ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a5b2:	00db      	lsls	r3, r3, #3
 800a5b4:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800a5b8:	4413      	add	r3, r2
 800a5ba:	3b60      	subs	r3, #96	; 0x60
 800a5bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a5c0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a5c4:	f8d7 40a4 	ldr.w	r4, [r7, #164]	; 0xa4
 800a5c8:	00e4      	lsls	r4, r4, #3
 800a5ca:	f8d7 50e4 	ldr.w	r5, [r7, #228]	; 0xe4
 800a5ce:	442c      	add	r4, r5
 800a5d0:	f7f6 f804 	bl	80005dc <__aeabi_dmul>
 800a5d4:	4602      	mov	r2, r0
 800a5d6:	460b      	mov	r3, r1
 800a5d8:	e9c4 2300 	strd	r2, r3, [r4]
  for (knt = 0; knt < 3; knt++) {
 800a5dc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a5e0:	3301      	adds	r3, #1
 800a5e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a5e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a5ea:	2b02      	cmp	r3, #2
 800a5ec:	dd8e      	ble.n	800a50c <UTMeanCovSqrt_C6QfB9Td+0x5e0>
  }
}
 800a5ee:	bf00      	nop
 800a5f0:	bf00      	nop
 800a5f2:	37b0      	adds	r7, #176	; 0xb0
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	ecbd 8b02 	vpop	{d8}
 800a5fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a5fe:	bf00      	nop
 800a600:	3ff00000 	.word	0x3ff00000

0800a604 <cholUpdateFactor_HBMX5a5h>:
#include "rotate_LZ7ctbe0.h"
#include "rt_nonfinite.h"
#include "rtGetNaN.h"

void cholUpdateFactor_HBMX5a5h(real_T *S, real_T U)
{
 800a604:	b5b0      	push	{r4, r5, r7, lr}
 800a606:	b090      	sub	sp, #64	; 0x40
 800a608:	af00      	add	r7, sp, #0
 800a60a:	60f8      	str	r0, [r7, #12]
 800a60c:	ed87 0b00 	vstr	d0, [r7]
  real_T alpha;
  real_T c;
  real_T nrmx;
  real_T s;
  int8_T p;
  R = *S;
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a616:	e9c7 2308 	strd	r2, r3, [r7, #32]
  p = 0;
 800a61a:	2300      	movs	r3, #0
 800a61c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (*S == 0.0) {
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a626:	f04f 0200 	mov.w	r2, #0
 800a62a:	f04f 0300 	mov.w	r3, #0
 800a62e:	f7f6 fa3d 	bl	8000aac <__aeabi_dcmpeq>
 800a632:	4603      	mov	r3, r0
 800a634:	2b00      	cmp	r3, #0
 800a636:	d003      	beq.n	800a640 <cholUpdateFactor_HBMX5a5h+0x3c>
    p = 2;
 800a638:	2302      	movs	r3, #2
 800a63a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a63e:	e065      	b.n	800a70c <cholUpdateFactor_HBMX5a5h+0x108>
  } else {
    s = U / *S;
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a646:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a64a:	f7f6 f8f1 	bl	8000830 <__aeabi_ddiv>
 800a64e:	4602      	mov	r2, r0
 800a650:	460b      	mov	r3, r1
 800a652:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    nrmx = fabs(s);
 800a656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a658:	63bb      	str	r3, [r7, #56]	; 0x38
 800a65a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a65c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a660:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (nrmx >= 1.0) {
 800a662:	f04f 0200 	mov.w	r2, #0
 800a666:	4b5c      	ldr	r3, [pc, #368]	; (800a7d8 <cholUpdateFactor_HBMX5a5h+0x1d4>)
 800a668:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800a66c:	f7f6 fa3c 	bl	8000ae8 <__aeabi_dcmpge>
 800a670:	4603      	mov	r3, r0
 800a672:	2b00      	cmp	r3, #0
 800a674:	d003      	beq.n	800a67e <cholUpdateFactor_HBMX5a5h+0x7a>
      p = 1;
 800a676:	2301      	movs	r3, #1
 800a678:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a67c:	e046      	b.n	800a70c <cholUpdateFactor_HBMX5a5h+0x108>
    } else {
      rotate_LZ7ctbe0(sqrt(1.0 - nrmx * nrmx), s, &R, &c, &alpha);
 800a67e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a682:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800a686:	f7f5 ffa9 	bl	80005dc <__aeabi_dmul>
 800a68a:	4602      	mov	r2, r0
 800a68c:	460b      	mov	r3, r1
 800a68e:	f04f 0000 	mov.w	r0, #0
 800a692:	4951      	ldr	r1, [pc, #324]	; (800a7d8 <cholUpdateFactor_HBMX5a5h+0x1d4>)
 800a694:	f7f5 fdea 	bl	800026c <__aeabi_dsub>
 800a698:	4602      	mov	r2, r0
 800a69a:	460b      	mov	r3, r1
 800a69c:	ec43 2b17 	vmov	d7, r2, r3
 800a6a0:	eeb0 0a47 	vmov.f32	s0, s14
 800a6a4:	eef0 0a67 	vmov.f32	s1, s15
 800a6a8:	f010 fe9e 	bl	801b3e8 <sqrt>
 800a6ac:	eeb0 7a40 	vmov.f32	s14, s0
 800a6b0:	eef0 7a60 	vmov.f32	s15, s1
 800a6b4:	f107 0218 	add.w	r2, r7, #24
 800a6b8:	f107 0110 	add.w	r1, r7, #16
 800a6bc:	f107 0320 	add.w	r3, r7, #32
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	ed97 1b0c 	vldr	d1, [r7, #48]	; 0x30
 800a6c6:	eeb0 0a47 	vmov.f32	s0, s14
 800a6ca:	eef0 0a67 	vmov.f32	s1, s15
 800a6ce:	f002 fa49 	bl	800cb64 <rotate_LZ7ctbe0>
      R = R * *S - c * 0.0;
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a6d8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a6dc:	f7f5 ff7e 	bl	80005dc <__aeabi_dmul>
 800a6e0:	4602      	mov	r2, r0
 800a6e2:	460b      	mov	r3, r1
 800a6e4:	4614      	mov	r4, r2
 800a6e6:	461d      	mov	r5, r3
 800a6e8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a6ec:	f04f 0200 	mov.w	r2, #0
 800a6f0:	f04f 0300 	mov.w	r3, #0
 800a6f4:	f7f5 ff72 	bl	80005dc <__aeabi_dmul>
 800a6f8:	4602      	mov	r2, r0
 800a6fa:	460b      	mov	r3, r1
 800a6fc:	4620      	mov	r0, r4
 800a6fe:	4629      	mov	r1, r5
 800a700:	f7f5 fdb4 	bl	800026c <__aeabi_dsub>
 800a704:	4602      	mov	r2, r0
 800a706:	460b      	mov	r3, r1
 800a708:	e9c7 2308 	strd	r2, r3, [r7, #32]
    }
  }

  *S = R;
 800a70c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a710:	68f9      	ldr	r1, [r7, #12]
 800a712:	e9c1 2300 	strd	r2, r3, [r1]
  if (p != 0) {
 800a716:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d057      	beq.n	800a7ce <cholUpdateFactor_HBMX5a5h+0x1ca>
    s = R * R - U * U;
 800a71e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800a722:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a726:	f7f5 ff59 	bl	80005dc <__aeabi_dmul>
 800a72a:	4602      	mov	r2, r0
 800a72c:	460b      	mov	r3, r1
 800a72e:	4614      	mov	r4, r2
 800a730:	461d      	mov	r5, r3
 800a732:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a736:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a73a:	f7f5 ff4f 	bl	80005dc <__aeabi_dmul>
 800a73e:	4602      	mov	r2, r0
 800a740:	460b      	mov	r3, r1
 800a742:	4620      	mov	r0, r4
 800a744:	4629      	mov	r1, r5
 800a746:	f7f5 fd91 	bl	800026c <__aeabi_dsub>
 800a74a:	4602      	mov	r2, r0
 800a74c:	460b      	mov	r3, r1
 800a74e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    if ((!rtIsInf(s)) && (!rtIsNaN(s))) {
 800a752:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 800a756:	f002 fc79 	bl	800d04c <rtIsInf>
 800a75a:	4603      	mov	r3, r0
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d11d      	bne.n	800a79c <cholUpdateFactor_HBMX5a5h+0x198>
 800a760:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 800a764:	f002 fc96 	bl	800d094 <rtIsNaN>
 800a768:	4603      	mov	r3, r0
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d116      	bne.n	800a79c <cholUpdateFactor_HBMX5a5h+0x198>
      nrmx = 1.0;
 800a76e:	f04f 0200 	mov.w	r2, #0
 800a772:	4b19      	ldr	r3, [pc, #100]	; (800a7d8 <cholUpdateFactor_HBMX5a5h+0x1d4>)
 800a774:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
      if (s != 0.0) {
 800a778:	f04f 0200 	mov.w	r2, #0
 800a77c:	f04f 0300 	mov.w	r3, #0
 800a780:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800a784:	f7f6 f992 	bl	8000aac <__aeabi_dcmpeq>
 800a788:	4603      	mov	r3, r0
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d110      	bne.n	800a7b0 <cholUpdateFactor_HBMX5a5h+0x1ac>
        s = fabs(s);
 800a78e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a790:	633b      	str	r3, [r7, #48]	; 0x30
 800a792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a794:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a798:	637b      	str	r3, [r7, #52]	; 0x34
      if (s != 0.0) {
 800a79a:	e009      	b.n	800a7b0 <cholUpdateFactor_HBMX5a5h+0x1ac>
      }
    } else {
      s = (rtNaN);
 800a79c:	4b0f      	ldr	r3, [pc, #60]	; (800a7dc <cholUpdateFactor_HBMX5a5h+0x1d8>)
 800a79e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7a2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      nrmx = (rtNaN);
 800a7a6:	4b0d      	ldr	r3, [pc, #52]	; (800a7dc <cholUpdateFactor_HBMX5a5h+0x1d8>)
 800a7a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ac:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }

    *S = nrmx * sqrt(s);
 800a7b0:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 800a7b4:	f010 fe18 	bl	801b3e8 <sqrt>
 800a7b8:	ec51 0b10 	vmov	r0, r1, d0
 800a7bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a7c0:	f7f5 ff0c 	bl	80005dc <__aeabi_dmul>
 800a7c4:	4602      	mov	r2, r0
 800a7c6:	460b      	mov	r3, r1
 800a7c8:	68f9      	ldr	r1, [r7, #12]
 800a7ca:	e9c1 2300 	strd	r2, r3, [r1]
  }
}
 800a7ce:	bf00      	nop
 800a7d0:	3740      	adds	r7, #64	; 0x40
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	bdb0      	pop	{r4, r5, r7, pc}
 800a7d6:	bf00      	nop
 800a7d8:	3ff00000 	.word	0x3ff00000
 800a7dc:	2001ec10 	.word	0x2001ec10

0800a7e0 <look1_binlxpw>:
#include "look1_binlxpw.h"
#include "rtwtypes.h"

real_T look1_binlxpw(real_T u0, const real_T bp0[], const real_T table[],
                     uint32_T maxIndex)
{
 800a7e0:	b5b0      	push	{r4, r5, r7, lr}
 800a7e2:	b08e      	sub	sp, #56	; 0x38
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	ed87 0b04 	vstr	d0, [r7, #16]
 800a7ea:	60f8      	str	r0, [r7, #12]
 800a7ec:	60b9      	str	r1, [r7, #8]
 800a7ee:	607a      	str	r2, [r7, #4]
  real_T frac;
  real_T yL_0d0;
  uint32_T iLeft;
  if (u0 <= bp0[0U]) {
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7f6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a7fa:	f7f6 f96b 	bl	8000ad4 <__aeabi_dcmple>
 800a7fe:	4603      	mov	r3, r0
 800a800:	2b00      	cmp	r3, #0
 800a802:	d020      	beq.n	800a846 <look1_binlxpw+0x66>
    iLeft = 0U;
 800a804:	2300      	movs	r3, #0
 800a806:	62fb      	str	r3, [r7, #44]	; 0x2c
    frac = (u0 - bp0[0U]) / (bp0[1U] - bp0[0U]);
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a80e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a812:	f7f5 fd2b 	bl	800026c <__aeabi_dsub>
 800a816:	4602      	mov	r2, r0
 800a818:	460b      	mov	r3, r1
 800a81a:	4614      	mov	r4, r2
 800a81c:	461d      	mov	r5, r3
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	3308      	adds	r3, #8
 800a822:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a82c:	f7f5 fd1e 	bl	800026c <__aeabi_dsub>
 800a830:	4602      	mov	r2, r0
 800a832:	460b      	mov	r3, r1
 800a834:	4620      	mov	r0, r4
 800a836:	4629      	mov	r1, r5
 800a838:	f7f5 fffa 	bl	8000830 <__aeabi_ddiv>
 800a83c:	4602      	mov	r2, r0
 800a83e:	460b      	mov	r3, r1
 800a840:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 800a844:	e087      	b.n	800a956 <look1_binlxpw+0x176>
  } else if (u0 < bp0[maxIndex]) {
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	00db      	lsls	r3, r3, #3
 800a84a:	68fa      	ldr	r2, [r7, #12]
 800a84c:	4413      	add	r3, r2
 800a84e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a852:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a856:	f7f6 f933 	bl	8000ac0 <__aeabi_dcmplt>
 800a85a:	4603      	mov	r3, r0
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d04b      	beq.n	800a8f8 <look1_binlxpw+0x118>
    uint32_T bpIdx;
    uint32_T iRght;
    bpIdx = maxIndex >> 1U;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	085b      	lsrs	r3, r3, #1
 800a864:	62bb      	str	r3, [r7, #40]	; 0x28
    iLeft = 0U;
 800a866:	2300      	movs	r3, #0
 800a868:	62fb      	str	r3, [r7, #44]	; 0x2c
    iRght = maxIndex;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	627b      	str	r3, [r7, #36]	; 0x24
    while (iRght - iLeft > 1U) {
 800a86e:	e016      	b.n	800a89e <look1_binlxpw+0xbe>
      if (u0 < bp0[bpIdx]) {
 800a870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a872:	00db      	lsls	r3, r3, #3
 800a874:	68fa      	ldr	r2, [r7, #12]
 800a876:	4413      	add	r3, r2
 800a878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a87c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a880:	f7f6 f91e 	bl	8000ac0 <__aeabi_dcmplt>
 800a884:	4603      	mov	r3, r0
 800a886:	2b00      	cmp	r3, #0
 800a888:	d002      	beq.n	800a890 <look1_binlxpw+0xb0>
        iRght = bpIdx;
 800a88a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a88c:	627b      	str	r3, [r7, #36]	; 0x24
 800a88e:	e001      	b.n	800a894 <look1_binlxpw+0xb4>
      } else {
        iLeft = bpIdx;
 800a890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a892:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      bpIdx = (iRght + iLeft) >> 1U;
 800a894:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a898:	4413      	add	r3, r2
 800a89a:	085b      	lsrs	r3, r3, #1
 800a89c:	62bb      	str	r3, [r7, #40]	; 0x28
    while (iRght - iLeft > 1U) {
 800a89e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8a2:	1ad3      	subs	r3, r2, r3
 800a8a4:	2b01      	cmp	r3, #1
 800a8a6:	d8e3      	bhi.n	800a870 <look1_binlxpw+0x90>
    }

    frac = (u0 - bp0[iLeft]) / (bp0[iLeft + 1U] - bp0[iLeft]);
 800a8a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8aa:	00db      	lsls	r3, r3, #3
 800a8ac:	68fa      	ldr	r2, [r7, #12]
 800a8ae:	4413      	add	r3, r2
 800a8b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8b4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a8b8:	f7f5 fcd8 	bl	800026c <__aeabi_dsub>
 800a8bc:	4602      	mov	r2, r0
 800a8be:	460b      	mov	r3, r1
 800a8c0:	4614      	mov	r4, r2
 800a8c2:	461d      	mov	r5, r3
 800a8c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8c6:	3301      	adds	r3, #1
 800a8c8:	00db      	lsls	r3, r3, #3
 800a8ca:	68fa      	ldr	r2, [r7, #12]
 800a8cc:	4413      	add	r3, r2
 800a8ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a8d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8d4:	00db      	lsls	r3, r3, #3
 800a8d6:	68fa      	ldr	r2, [r7, #12]
 800a8d8:	4413      	add	r3, r2
 800a8da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8de:	f7f5 fcc5 	bl	800026c <__aeabi_dsub>
 800a8e2:	4602      	mov	r2, r0
 800a8e4:	460b      	mov	r3, r1
 800a8e6:	4620      	mov	r0, r4
 800a8e8:	4629      	mov	r1, r5
 800a8ea:	f7f5 ffa1 	bl	8000830 <__aeabi_ddiv>
 800a8ee:	4602      	mov	r2, r0
 800a8f0:	460b      	mov	r3, r1
 800a8f2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 800a8f6:	e02e      	b.n	800a956 <look1_binlxpw+0x176>
  } else {
    iLeft = maxIndex - 1U;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	3b01      	subs	r3, #1
 800a8fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    frac = (u0 - bp0[maxIndex - 1U]) / (bp0[maxIndex] - bp0[maxIndex - 1U]);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800a904:	3b01      	subs	r3, #1
 800a906:	00db      	lsls	r3, r3, #3
 800a908:	68fa      	ldr	r2, [r7, #12]
 800a90a:	4413      	add	r3, r2
 800a90c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a910:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a914:	f7f5 fcaa 	bl	800026c <__aeabi_dsub>
 800a918:	4602      	mov	r2, r0
 800a91a:	460b      	mov	r3, r1
 800a91c:	4614      	mov	r4, r2
 800a91e:	461d      	mov	r5, r3
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	00db      	lsls	r3, r3, #3
 800a924:	68fa      	ldr	r2, [r7, #12]
 800a926:	4413      	add	r3, r2
 800a928:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800a932:	3b01      	subs	r3, #1
 800a934:	00db      	lsls	r3, r3, #3
 800a936:	68fa      	ldr	r2, [r7, #12]
 800a938:	4413      	add	r3, r2
 800a93a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a93e:	f7f5 fc95 	bl	800026c <__aeabi_dsub>
 800a942:	4602      	mov	r2, r0
 800a944:	460b      	mov	r3, r1
 800a946:	4620      	mov	r0, r4
 800a948:	4629      	mov	r1, r5
 800a94a:	f7f5 ff71 	bl	8000830 <__aeabi_ddiv>
 800a94e:	4602      	mov	r2, r0
 800a950:	460b      	mov	r3, r1
 800a952:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  }

  yL_0d0 = table[iLeft];
 800a956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a958:	00db      	lsls	r3, r3, #3
 800a95a:	68ba      	ldr	r2, [r7, #8]
 800a95c:	4413      	add	r3, r2
 800a95e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a962:	e9c7 2306 	strd	r2, r3, [r7, #24]
  return (table[iLeft + 1U] - yL_0d0) * frac + yL_0d0;
 800a966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a968:	3301      	adds	r3, #1
 800a96a:	00db      	lsls	r3, r3, #3
 800a96c:	68ba      	ldr	r2, [r7, #8]
 800a96e:	4413      	add	r3, r2
 800a970:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a974:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a978:	f7f5 fc78 	bl	800026c <__aeabi_dsub>
 800a97c:	4602      	mov	r2, r0
 800a97e:	460b      	mov	r3, r1
 800a980:	4610      	mov	r0, r2
 800a982:	4619      	mov	r1, r3
 800a984:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a988:	f7f5 fe28 	bl	80005dc <__aeabi_dmul>
 800a98c:	4602      	mov	r2, r0
 800a98e:	460b      	mov	r3, r1
 800a990:	4610      	mov	r0, r2
 800a992:	4619      	mov	r1, r3
 800a994:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a998:	f7f5 fc6a 	bl	8000270 <__adddf3>
 800a99c:	4602      	mov	r2, r0
 800a99e:	460b      	mov	r3, r1
 800a9a0:	ec43 2b17 	vmov	d7, r2, r3
}
 800a9a4:	eeb0 0a47 	vmov.f32	s0, s14
 800a9a8:	eef0 0a67 	vmov.f32	s1, s15
 800a9ac:	3738      	adds	r7, #56	; 0x38
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800a9b4 <qr_5a2P8Gh6>:
#include <math.h>
#include "xgemv_fRiR1I1O.h"
#include "xgerc_tNNiazQU.h"

void qr_5a2P8Gh6(const real_T A[9], real_T Q[9], real_T R[9])
{
 800a9b4:	b5b0      	push	{r4, r5, r7, lr}
 800a9b6:	b0c0      	sub	sp, #256	; 0x100
 800a9b8:	af04      	add	r7, sp, #16
 800a9ba:	6578      	str	r0, [r7, #84]	; 0x54
 800a9bc:	6539      	str	r1, [r7, #80]	; 0x50
 800a9be:	64fa      	str	r2, [r7, #76]	; 0x4c
  int32_T c_lastc;
  int32_T coltop;
  int32_T exitg1;
  int32_T knt;
  boolean_T exitg2;
  memcpy(&b_A[0], &A[0], 9U * sizeof(real_T));
 800a9c0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800a9c4:	2248      	movs	r2, #72	; 0x48
 800a9c6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	f010 fb47 	bl	801b05c <memcpy>
  tau_idx_0 = 0.0;
 800a9ce:	f04f 0200 	mov.w	r2, #0
 800a9d2:	f04f 0300 	mov.w	r3, #0
 800a9d6:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
  work[0] = 0.0;
 800a9da:	f04f 0200 	mov.w	r2, #0
 800a9de:	f04f 0300 	mov.w	r3, #0
 800a9e2:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
  tau_idx_1 = 0.0;
 800a9e6:	f04f 0200 	mov.w	r2, #0
 800a9ea:	f04f 0300 	mov.w	r3, #0
 800a9ee:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
  work[1] = 0.0;
 800a9f2:	f04f 0200 	mov.w	r2, #0
 800a9f6:	f04f 0300 	mov.w	r3, #0
 800a9fa:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
  work[2] = 0.0;
 800a9fe:	f04f 0200 	mov.w	r2, #0
 800aa02:	f04f 0300 	mov.w	r3, #0
 800aa06:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
  atmp = b_A[0];
 800aa0a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800aa0e:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
  beta1 = xnrm2_xDOlDEtw(2, b_A, 2);
 800aa12:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800aa16:	2202      	movs	r2, #2
 800aa18:	4619      	mov	r1, r3
 800aa1a:	2002      	movs	r0, #2
 800aa1c:	f004 ffc0 	bl	800f9a0 <xnrm2_xDOlDEtw>
 800aa20:	ed87 0b38 	vstr	d0, [r7, #224]	; 0xe0
  if (beta1 != 0.0) {
 800aa24:	f04f 0200 	mov.w	r2, #0
 800aa28:	f04f 0300 	mov.w	r3, #0
 800aa2c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800aa30:	f7f6 f83c 	bl	8000aac <__aeabi_dcmpeq>
 800aa34:	4603      	mov	r3, r0
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	f040 8172 	bne.w	800ad20 <qr_5a2P8Gh6+0x36c>
    beta1 = rt_hypotd_snf(b_A[0], beta1);
 800aa3c:	ed97 7b1c 	vldr	d7, [r7, #112]	; 0x70
 800aa40:	ed97 1b38 	vldr	d1, [r7, #224]	; 0xe0
 800aa44:	eeb0 0a47 	vmov.f32	s0, s14
 800aa48:	eef0 0a67 	vmov.f32	s1, s15
 800aa4c:	f002 fa14 	bl	800ce78 <rt_hypotd_snf>
 800aa50:	ed87 0b38 	vstr	d0, [r7, #224]	; 0xe0
    if (b_A[0] >= 0.0) {
 800aa54:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800aa58:	f04f 0200 	mov.w	r2, #0
 800aa5c:	f04f 0300 	mov.w	r3, #0
 800aa60:	f7f6 f842 	bl	8000ae8 <__aeabi_dcmpge>
 800aa64:	4603      	mov	r3, r0
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d009      	beq.n	800aa7e <qr_5a2P8Gh6+0xca>
      beta1 = -beta1;
 800aa6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aa6e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800aa72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa76:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800aa7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    }

    if (fabs(beta1) < 1.0020841800044864E-292) {
 800aa7e:	f8d7 40e0 	ldr.w	r4, [r7, #224]	; 0xe0
 800aa82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa86:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800aa8a:	f04f 0200 	mov.w	r2, #0
 800aa8e:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800aa92:	4620      	mov	r0, r4
 800aa94:	4629      	mov	r1, r5
 800aa96:	f7f6 f813 	bl	8000ac0 <__aeabi_dcmplt>
 800aa9a:	4603      	mov	r3, r0
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	f000 80f1 	beq.w	800ac84 <qr_5a2P8Gh6+0x2d0>
      knt = 0;
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      do {
        knt++;
 800aaa8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800aaac:	3301      	adds	r3, #1
 800aaae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
        for (b_coltop = 1; b_coltop < 3; b_coltop++) {
 800aab2:	2301      	movs	r3, #1
 800aab4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800aab8:	e01f      	b.n	800aafa <qr_5a2P8Gh6+0x146>
          b_A[b_coltop] *= 9.9792015476736E+291;
 800aaba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800aabe:	00db      	lsls	r3, r3, #3
 800aac0:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800aac4:	4413      	add	r3, r2
 800aac6:	3b80      	subs	r3, #128	; 0x80
 800aac8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800aacc:	f04f 0200 	mov.w	r2, #0
 800aad0:	4bc9      	ldr	r3, [pc, #804]	; (800adf8 <qr_5a2P8Gh6+0x444>)
 800aad2:	f7f5 fd83 	bl	80005dc <__aeabi_dmul>
 800aad6:	4602      	mov	r2, r0
 800aad8:	460b      	mov	r3, r1
 800aada:	4610      	mov	r0, r2
 800aadc:	4619      	mov	r1, r3
 800aade:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800aae2:	00db      	lsls	r3, r3, #3
 800aae4:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800aae8:	4413      	add	r3, r2
 800aaea:	3b80      	subs	r3, #128	; 0x80
 800aaec:	e9c3 0100 	strd	r0, r1, [r3]
        for (b_coltop = 1; b_coltop < 3; b_coltop++) {
 800aaf0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800aaf4:	3301      	adds	r3, #1
 800aaf6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800aafa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800aafe:	2b02      	cmp	r3, #2
 800ab00:	dddb      	ble.n	800aaba <qr_5a2P8Gh6+0x106>
        }

        beta1 *= 9.9792015476736E+291;
 800ab02:	f04f 0200 	mov.w	r2, #0
 800ab06:	4bbc      	ldr	r3, [pc, #752]	; (800adf8 <qr_5a2P8Gh6+0x444>)
 800ab08:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800ab0c:	f7f5 fd66 	bl	80005dc <__aeabi_dmul>
 800ab10:	4602      	mov	r2, r0
 800ab12:	460b      	mov	r3, r1
 800ab14:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
        atmp *= 9.9792015476736E+291;
 800ab18:	f04f 0200 	mov.w	r2, #0
 800ab1c:	4bb6      	ldr	r3, [pc, #728]	; (800adf8 <qr_5a2P8Gh6+0x444>)
 800ab1e:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 800ab22:	f7f5 fd5b 	bl	80005dc <__aeabi_dmul>
 800ab26:	4602      	mov	r2, r0
 800ab28:	460b      	mov	r3, r1
 800ab2a:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
      } while ((fabs(beta1) < 1.0020841800044864E-292) && (knt < 20));
 800ab2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ab32:	643b      	str	r3, [r7, #64]	; 0x40
 800ab34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab38:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ab3c:	647b      	str	r3, [r7, #68]	; 0x44
 800ab3e:	f04f 0200 	mov.w	r2, #0
 800ab42:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800ab46:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800ab4a:	f7f5 ffb9 	bl	8000ac0 <__aeabi_dcmplt>
 800ab4e:	4603      	mov	r3, r0
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d003      	beq.n	800ab5c <qr_5a2P8Gh6+0x1a8>
 800ab54:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ab58:	2b13      	cmp	r3, #19
 800ab5a:	dda5      	ble.n	800aaa8 <qr_5a2P8Gh6+0xf4>

      beta1 = rt_hypotd_snf(atmp, xnrm2_xDOlDEtw(2, b_A, 2));
 800ab5c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800ab60:	2202      	movs	r2, #2
 800ab62:	4619      	mov	r1, r3
 800ab64:	2002      	movs	r0, #2
 800ab66:	f004 ff1b 	bl	800f9a0 <xnrm2_xDOlDEtw>
 800ab6a:	eeb0 7a40 	vmov.f32	s14, s0
 800ab6e:	eef0 7a60 	vmov.f32	s15, s1
 800ab72:	eeb0 1a47 	vmov.f32	s2, s14
 800ab76:	eef0 1a67 	vmov.f32	s3, s15
 800ab7a:	ed97 0b3a 	vldr	d0, [r7, #232]	; 0xe8
 800ab7e:	f002 f97b 	bl	800ce78 <rt_hypotd_snf>
 800ab82:	ed87 0b38 	vstr	d0, [r7, #224]	; 0xe0
      if (atmp >= 0.0) {
 800ab86:	f04f 0200 	mov.w	r2, #0
 800ab8a:	f04f 0300 	mov.w	r3, #0
 800ab8e:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 800ab92:	f7f5 ffa9 	bl	8000ae8 <__aeabi_dcmpge>
 800ab96:	4603      	mov	r3, r0
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d009      	beq.n	800abb0 <qr_5a2P8Gh6+0x1fc>
        beta1 = -beta1;
 800ab9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aba0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800aba4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aba8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800abac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      }

      tau_idx_0 = (beta1 - atmp) / beta1;
 800abb0:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 800abb4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800abb8:	f7f5 fb58 	bl	800026c <__aeabi_dsub>
 800abbc:	4602      	mov	r2, r0
 800abbe:	460b      	mov	r3, r1
 800abc0:	4610      	mov	r0, r2
 800abc2:	4619      	mov	r1, r3
 800abc4:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800abc8:	f7f5 fe32 	bl	8000830 <__aeabi_ddiv>
 800abcc:	4602      	mov	r2, r0
 800abce:	460b      	mov	r3, r1
 800abd0:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
      atmp = 1.0 / (atmp - beta1);
 800abd4:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800abd8:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 800abdc:	f7f5 fb46 	bl	800026c <__aeabi_dsub>
 800abe0:	4602      	mov	r2, r0
 800abe2:	460b      	mov	r3, r1
 800abe4:	f04f 0000 	mov.w	r0, #0
 800abe8:	4984      	ldr	r1, [pc, #528]	; (800adfc <qr_5a2P8Gh6+0x448>)
 800abea:	f7f5 fe21 	bl	8000830 <__aeabi_ddiv>
 800abee:	4602      	mov	r2, r0
 800abf0:	460b      	mov	r3, r1
 800abf2:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
      for (b_coltop = 1; b_coltop < 3; b_coltop++) {
 800abf6:	2301      	movs	r3, #1
 800abf8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800abfc:	e01e      	b.n	800ac3c <qr_5a2P8Gh6+0x288>
        b_A[b_coltop] *= atmp;
 800abfe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800ac02:	00db      	lsls	r3, r3, #3
 800ac04:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800ac08:	4413      	add	r3, r2
 800ac0a:	3b80      	subs	r3, #128	; 0x80
 800ac0c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ac10:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 800ac14:	f7f5 fce2 	bl	80005dc <__aeabi_dmul>
 800ac18:	4602      	mov	r2, r0
 800ac1a:	460b      	mov	r3, r1
 800ac1c:	4610      	mov	r0, r2
 800ac1e:	4619      	mov	r1, r3
 800ac20:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800ac24:	00db      	lsls	r3, r3, #3
 800ac26:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800ac2a:	4413      	add	r3, r2
 800ac2c:	3b80      	subs	r3, #128	; 0x80
 800ac2e:	e9c3 0100 	strd	r0, r1, [r3]
      for (b_coltop = 1; b_coltop < 3; b_coltop++) {
 800ac32:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800ac36:	3301      	adds	r3, #1
 800ac38:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800ac3c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800ac40:	2b02      	cmp	r3, #2
 800ac42:	dddc      	ble.n	800abfe <qr_5a2P8Gh6+0x24a>
      }

      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 800ac44:	2300      	movs	r3, #0
 800ac46:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ac4a:	e010      	b.n	800ac6e <qr_5a2P8Gh6+0x2ba>
        beta1 *= 1.0020841800044864E-292;
 800ac4c:	f04f 0200 	mov.w	r2, #0
 800ac50:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800ac54:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800ac58:	f7f5 fcc0 	bl	80005dc <__aeabi_dmul>
 800ac5c:	4602      	mov	r2, r0
 800ac5e:	460b      	mov	r3, r1
 800ac60:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 800ac64:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ac68:	3301      	adds	r3, #1
 800ac6a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ac6e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800ac72:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ac76:	429a      	cmp	r2, r3
 800ac78:	dbe8      	blt.n	800ac4c <qr_5a2P8Gh6+0x298>
      }

      atmp = beta1;
 800ac7a:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800ac7e:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
 800ac82:	e04d      	b.n	800ad20 <qr_5a2P8Gh6+0x36c>
    } else {
      tau_idx_0 = (beta1 - b_A[0]) / beta1;
 800ac84:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800ac88:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800ac8c:	f7f5 faee 	bl	800026c <__aeabi_dsub>
 800ac90:	4602      	mov	r2, r0
 800ac92:	460b      	mov	r3, r1
 800ac94:	4610      	mov	r0, r2
 800ac96:	4619      	mov	r1, r3
 800ac98:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800ac9c:	f7f5 fdc8 	bl	8000830 <__aeabi_ddiv>
 800aca0:	4602      	mov	r2, r0
 800aca2:	460b      	mov	r3, r1
 800aca4:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
      atmp = 1.0 / (b_A[0] - beta1);
 800aca8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800acac:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800acb0:	f7f5 fadc 	bl	800026c <__aeabi_dsub>
 800acb4:	4602      	mov	r2, r0
 800acb6:	460b      	mov	r3, r1
 800acb8:	f04f 0000 	mov.w	r0, #0
 800acbc:	494f      	ldr	r1, [pc, #316]	; (800adfc <qr_5a2P8Gh6+0x448>)
 800acbe:	f7f5 fdb7 	bl	8000830 <__aeabi_ddiv>
 800acc2:	4602      	mov	r2, r0
 800acc4:	460b      	mov	r3, r1
 800acc6:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
      for (c_lastc = 1; c_lastc < 3; c_lastc++) {
 800acca:	2301      	movs	r3, #1
 800accc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800acd0:	e01e      	b.n	800ad10 <qr_5a2P8Gh6+0x35c>
        b_A[c_lastc] *= atmp;
 800acd2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800acd6:	00db      	lsls	r3, r3, #3
 800acd8:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800acdc:	4413      	add	r3, r2
 800acde:	3b80      	subs	r3, #128	; 0x80
 800ace0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ace4:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 800ace8:	f7f5 fc78 	bl	80005dc <__aeabi_dmul>
 800acec:	4602      	mov	r2, r0
 800acee:	460b      	mov	r3, r1
 800acf0:	4610      	mov	r0, r2
 800acf2:	4619      	mov	r1, r3
 800acf4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800acf8:	00db      	lsls	r3, r3, #3
 800acfa:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800acfe:	4413      	add	r3, r2
 800ad00:	3b80      	subs	r3, #128	; 0x80
 800ad02:	e9c3 0100 	strd	r0, r1, [r3]
      for (c_lastc = 1; c_lastc < 3; c_lastc++) {
 800ad06:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ad0a:	3301      	adds	r3, #1
 800ad0c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ad10:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ad14:	2b02      	cmp	r3, #2
 800ad16:	dddc      	ble.n	800acd2 <qr_5a2P8Gh6+0x31e>
      }

      atmp = beta1;
 800ad18:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800ad1c:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
    }
  }

  b_A[0] = 1.0;
 800ad20:	f04f 0200 	mov.w	r2, #0
 800ad24:	4b35      	ldr	r3, [pc, #212]	; (800adfc <qr_5a2P8Gh6+0x448>)
 800ad26:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  if (tau_idx_0 != 0.0) {
 800ad2a:	f04f 0200 	mov.w	r2, #0
 800ad2e:	f04f 0300 	mov.w	r3, #0
 800ad32:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800ad36:	f7f5 feb9 	bl	8000aac <__aeabi_dcmpeq>
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	f040 8081 	bne.w	800ae44 <qr_5a2P8Gh6+0x490>
    knt = 3;
 800ad42:	2303      	movs	r3, #3
 800ad44:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    c_lastc = 2;
 800ad48:	2302      	movs	r3, #2
 800ad4a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    while ((knt > 0) && (b_A[c_lastc] == 0.0)) {
 800ad4e:	e009      	b.n	800ad64 <qr_5a2P8Gh6+0x3b0>
      knt--;
 800ad50:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ad54:	3b01      	subs	r3, #1
 800ad56:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      c_lastc--;
 800ad5a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ad5e:	3b01      	subs	r3, #1
 800ad60:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    while ((knt > 0) && (b_A[c_lastc] == 0.0)) {
 800ad64:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	dd11      	ble.n	800ad90 <qr_5a2P8Gh6+0x3dc>
 800ad6c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ad70:	00db      	lsls	r3, r3, #3
 800ad72:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800ad76:	4413      	add	r3, r2
 800ad78:	3b80      	subs	r3, #128	; 0x80
 800ad7a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ad7e:	f04f 0200 	mov.w	r2, #0
 800ad82:	f04f 0300 	mov.w	r3, #0
 800ad86:	f7f5 fe91 	bl	8000aac <__aeabi_dcmpeq>
 800ad8a:	4603      	mov	r3, r0
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d1df      	bne.n	800ad50 <qr_5a2P8Gh6+0x39c>
    }

    c_lastc = 2;
 800ad90:	2302      	movs	r3, #2
 800ad92:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    exitg2 = false;
 800ad96:	2300      	movs	r3, #0
 800ad98:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
    while ((!exitg2) && (c_lastc > 0)) {
 800ad9c:	e049      	b.n	800ae32 <qr_5a2P8Gh6+0x47e>
      b_coltop = (c_lastc - 1) * 3 + 3;
 800ad9e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800ada2:	4613      	mov	r3, r2
 800ada4:	005b      	lsls	r3, r3, #1
 800ada6:	4413      	add	r3, r2
 800ada8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
      coltop = b_coltop;
 800adac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800adb0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
      do {
        exitg1 = 0;
 800adb4:	2300      	movs	r3, #0
 800adb6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
        if (coltop + 1 <= b_coltop + knt) {
 800adba:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800adbe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800adc2:	441a      	add	r2, r3
 800adc4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800adc8:	4293      	cmp	r3, r2
 800adca:	da1f      	bge.n	800ae0c <qr_5a2P8Gh6+0x458>
          if (b_A[coltop] != 0.0) {
 800adcc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800add0:	00db      	lsls	r3, r3, #3
 800add2:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800add6:	4413      	add	r3, r2
 800add8:	3b80      	subs	r3, #128	; 0x80
 800adda:	e9d3 0100 	ldrd	r0, r1, [r3]
 800adde:	f04f 0200 	mov.w	r2, #0
 800ade2:	f04f 0300 	mov.w	r3, #0
 800ade6:	f7f5 fe61 	bl	8000aac <__aeabi_dcmpeq>
 800adea:	4603      	mov	r3, r0
 800adec:	2b00      	cmp	r3, #0
 800adee:	d107      	bne.n	800ae00 <qr_5a2P8Gh6+0x44c>
            exitg1 = 1;
 800adf0:	2301      	movs	r3, #1
 800adf2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800adf6:	e011      	b.n	800ae1c <qr_5a2P8Gh6+0x468>
 800adf8:	7c900000 	.word	0x7c900000
 800adfc:	3ff00000 	.word	0x3ff00000
          } else {
            coltop++;
 800ae00:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800ae04:	3301      	adds	r3, #1
 800ae06:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ae0a:	e007      	b.n	800ae1c <qr_5a2P8Gh6+0x468>
          }
        } else {
          c_lastc--;
 800ae0c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ae10:	3b01      	subs	r3, #1
 800ae12:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
          exitg1 = 2;
 800ae16:	2302      	movs	r3, #2
 800ae18:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
        }
      } while (exitg1 == 0);
 800ae1c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d0c7      	beq.n	800adb4 <qr_5a2P8Gh6+0x400>

      if (exitg1 == 1) {
 800ae24:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ae28:	2b01      	cmp	r3, #1
 800ae2a:	d102      	bne.n	800ae32 <qr_5a2P8Gh6+0x47e>
        exitg2 = true;
 800ae2c:	2301      	movs	r3, #1
 800ae2e:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
    while ((!exitg2) && (c_lastc > 0)) {
 800ae32:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d10a      	bne.n	800ae50 <qr_5a2P8Gh6+0x49c>
 800ae3a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	dcad      	bgt.n	800ad9e <qr_5a2P8Gh6+0x3ea>
 800ae42:	e005      	b.n	800ae50 <qr_5a2P8Gh6+0x49c>
      }
    }
  } else {
    knt = 0;
 800ae44:	2300      	movs	r3, #0
 800ae46:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    c_lastc = 0;
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  }

  if (knt > 0) {
 800ae50:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	dd29      	ble.n	800aeac <qr_5a2P8Gh6+0x4f8>
    xgemv_fRiR1I1O(knt, c_lastc, b_A, 4, b_A, 1, work);
 800ae58:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800ae5c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ae60:	9302      	str	r3, [sp, #8]
 800ae62:	2301      	movs	r3, #1
 800ae64:	9301      	str	r3, [sp, #4]
 800ae66:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800ae6a:	9300      	str	r3, [sp, #0]
 800ae6c:	2304      	movs	r3, #4
 800ae6e:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 800ae72:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800ae76:	f004 f94f 	bl	800f118 <xgemv_fRiR1I1O>
    xgerc_tNNiazQU(knt, c_lastc, -tau_idx_0, 1, work, b_A, 4);
 800ae7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ae7e:	63bb      	str	r3, [r7, #56]	; 0x38
 800ae80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ae84:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800ae88:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae8a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800ae8e:	2304      	movs	r3, #4
 800ae90:	9301      	str	r3, [sp, #4]
 800ae92:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800ae96:	9300      	str	r3, [sp, #0]
 800ae98:	4613      	mov	r3, r2
 800ae9a:	2201      	movs	r2, #1
 800ae9c:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 800aea0:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 800aea4:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800aea8:	f004 fa3f 	bl	800f32a <xgerc_tNNiazQU>
  }

  b_A[0] = atmp;
 800aeac:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 800aeb0:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  atmp = b_A[4];
 800aeb4:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800aeb8:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
  beta1 = xnrm2_xDOlDEtw(1, b_A, 6);
 800aebc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800aec0:	2206      	movs	r2, #6
 800aec2:	4619      	mov	r1, r3
 800aec4:	2001      	movs	r0, #1
 800aec6:	f004 fd6b 	bl	800f9a0 <xnrm2_xDOlDEtw>
 800aeca:	ed87 0b38 	vstr	d0, [r7, #224]	; 0xe0
  if (beta1 != 0.0) {
 800aece:	f04f 0200 	mov.w	r2, #0
 800aed2:	f04f 0300 	mov.w	r3, #0
 800aed6:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800aeda:	f7f5 fde7 	bl	8000aac <__aeabi_dcmpeq>
 800aede:	4603      	mov	r3, r0
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	f040 8170 	bne.w	800b1c6 <qr_5a2P8Gh6+0x812>
    beta1 = rt_hypotd_snf(b_A[4], beta1);
 800aee6:	ed97 7b24 	vldr	d7, [r7, #144]	; 0x90
 800aeea:	ed97 1b38 	vldr	d1, [r7, #224]	; 0xe0
 800aeee:	eeb0 0a47 	vmov.f32	s0, s14
 800aef2:	eef0 0a67 	vmov.f32	s1, s15
 800aef6:	f001 ffbf 	bl	800ce78 <rt_hypotd_snf>
 800aefa:	ed87 0b38 	vstr	d0, [r7, #224]	; 0xe0
    if (b_A[4] >= 0.0) {
 800aefe:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800af02:	f04f 0200 	mov.w	r2, #0
 800af06:	f04f 0300 	mov.w	r3, #0
 800af0a:	f7f5 fded 	bl	8000ae8 <__aeabi_dcmpge>
 800af0e:	4603      	mov	r3, r0
 800af10:	2b00      	cmp	r3, #0
 800af12:	d009      	beq.n	800af28 <qr_5a2P8Gh6+0x574>
      beta1 = -beta1;
 800af14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800af18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800af1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af20:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800af24:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    }

    if (fabs(beta1) < 1.0020841800044864E-292) {
 800af28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800af2c:	633b      	str	r3, [r7, #48]	; 0x30
 800af2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af32:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800af36:	637b      	str	r3, [r7, #52]	; 0x34
 800af38:	f04f 0200 	mov.w	r2, #0
 800af3c:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800af40:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800af44:	f7f5 fdbc 	bl	8000ac0 <__aeabi_dcmplt>
 800af48:	4603      	mov	r3, r0
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	f000 80ef 	beq.w	800b12e <qr_5a2P8Gh6+0x77a>
      knt = 0;
 800af50:	2300      	movs	r3, #0
 800af52:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      do {
        knt++;
 800af56:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800af5a:	3301      	adds	r3, #1
 800af5c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
        for (b_coltop = 5; b_coltop < 6; b_coltop++) {
 800af60:	2305      	movs	r3, #5
 800af62:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800af66:	e01f      	b.n	800afa8 <qr_5a2P8Gh6+0x5f4>
          b_A[b_coltop] *= 9.9792015476736E+291;
 800af68:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800af6c:	00db      	lsls	r3, r3, #3
 800af6e:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800af72:	4413      	add	r3, r2
 800af74:	3b80      	subs	r3, #128	; 0x80
 800af76:	e9d3 0100 	ldrd	r0, r1, [r3]
 800af7a:	f04f 0200 	mov.w	r2, #0
 800af7e:	4bc9      	ldr	r3, [pc, #804]	; (800b2a4 <qr_5a2P8Gh6+0x8f0>)
 800af80:	f7f5 fb2c 	bl	80005dc <__aeabi_dmul>
 800af84:	4602      	mov	r2, r0
 800af86:	460b      	mov	r3, r1
 800af88:	4610      	mov	r0, r2
 800af8a:	4619      	mov	r1, r3
 800af8c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800af90:	00db      	lsls	r3, r3, #3
 800af92:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800af96:	4413      	add	r3, r2
 800af98:	3b80      	subs	r3, #128	; 0x80
 800af9a:	e9c3 0100 	strd	r0, r1, [r3]
        for (b_coltop = 5; b_coltop < 6; b_coltop++) {
 800af9e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800afa2:	3301      	adds	r3, #1
 800afa4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800afa8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800afac:	2b05      	cmp	r3, #5
 800afae:	dddb      	ble.n	800af68 <qr_5a2P8Gh6+0x5b4>
        }

        beta1 *= 9.9792015476736E+291;
 800afb0:	f04f 0200 	mov.w	r2, #0
 800afb4:	4bbb      	ldr	r3, [pc, #748]	; (800b2a4 <qr_5a2P8Gh6+0x8f0>)
 800afb6:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800afba:	f7f5 fb0f 	bl	80005dc <__aeabi_dmul>
 800afbe:	4602      	mov	r2, r0
 800afc0:	460b      	mov	r3, r1
 800afc2:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
        atmp *= 9.9792015476736E+291;
 800afc6:	f04f 0200 	mov.w	r2, #0
 800afca:	4bb6      	ldr	r3, [pc, #728]	; (800b2a4 <qr_5a2P8Gh6+0x8f0>)
 800afcc:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 800afd0:	f7f5 fb04 	bl	80005dc <__aeabi_dmul>
 800afd4:	4602      	mov	r2, r0
 800afd6:	460b      	mov	r3, r1
 800afd8:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
      } while ((fabs(beta1) < 1.0020841800044864E-292) && (knt < 20));
 800afdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800afe0:	62bb      	str	r3, [r7, #40]	; 0x28
 800afe2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800afe6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800afea:	62fb      	str	r3, [r7, #44]	; 0x2c
 800afec:	f04f 0200 	mov.w	r2, #0
 800aff0:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800aff4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800aff8:	f7f5 fd62 	bl	8000ac0 <__aeabi_dcmplt>
 800affc:	4603      	mov	r3, r0
 800affe:	2b00      	cmp	r3, #0
 800b000:	d003      	beq.n	800b00a <qr_5a2P8Gh6+0x656>
 800b002:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b006:	2b13      	cmp	r3, #19
 800b008:	dda5      	ble.n	800af56 <qr_5a2P8Gh6+0x5a2>

      beta1 = rt_hypotd_snf(atmp, xnrm2_xDOlDEtw(1, b_A, 6));
 800b00a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800b00e:	2206      	movs	r2, #6
 800b010:	4619      	mov	r1, r3
 800b012:	2001      	movs	r0, #1
 800b014:	f004 fcc4 	bl	800f9a0 <xnrm2_xDOlDEtw>
 800b018:	eeb0 7a40 	vmov.f32	s14, s0
 800b01c:	eef0 7a60 	vmov.f32	s15, s1
 800b020:	eeb0 1a47 	vmov.f32	s2, s14
 800b024:	eef0 1a67 	vmov.f32	s3, s15
 800b028:	ed97 0b3a 	vldr	d0, [r7, #232]	; 0xe8
 800b02c:	f001 ff24 	bl	800ce78 <rt_hypotd_snf>
 800b030:	ed87 0b38 	vstr	d0, [r7, #224]	; 0xe0
      if (atmp >= 0.0) {
 800b034:	f04f 0200 	mov.w	r2, #0
 800b038:	f04f 0300 	mov.w	r3, #0
 800b03c:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 800b040:	f7f5 fd52 	bl	8000ae8 <__aeabi_dcmpge>
 800b044:	4603      	mov	r3, r0
 800b046:	2b00      	cmp	r3, #0
 800b048:	d009      	beq.n	800b05e <qr_5a2P8Gh6+0x6aa>
        beta1 = -beta1;
 800b04a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b04e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b052:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b056:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800b05a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      }

      tau_idx_1 = (beta1 - atmp) / beta1;
 800b05e:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 800b062:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b066:	f7f5 f901 	bl	800026c <__aeabi_dsub>
 800b06a:	4602      	mov	r2, r0
 800b06c:	460b      	mov	r3, r1
 800b06e:	4610      	mov	r0, r2
 800b070:	4619      	mov	r1, r3
 800b072:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800b076:	f7f5 fbdb 	bl	8000830 <__aeabi_ddiv>
 800b07a:	4602      	mov	r2, r0
 800b07c:	460b      	mov	r3, r1
 800b07e:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
      atmp = 1.0 / (atmp - beta1);
 800b082:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800b086:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 800b08a:	f7f5 f8ef 	bl	800026c <__aeabi_dsub>
 800b08e:	4602      	mov	r2, r0
 800b090:	460b      	mov	r3, r1
 800b092:	f04f 0000 	mov.w	r0, #0
 800b096:	4984      	ldr	r1, [pc, #528]	; (800b2a8 <qr_5a2P8Gh6+0x8f4>)
 800b098:	f7f5 fbca 	bl	8000830 <__aeabi_ddiv>
 800b09c:	4602      	mov	r2, r0
 800b09e:	460b      	mov	r3, r1
 800b0a0:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
      for (b_coltop = 5; b_coltop < 6; b_coltop++) {
 800b0a4:	2305      	movs	r3, #5
 800b0a6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b0aa:	e01c      	b.n	800b0e6 <qr_5a2P8Gh6+0x732>
        b_A[b_coltop] *= atmp;
 800b0ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b0b0:	00db      	lsls	r3, r3, #3
 800b0b2:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800b0b6:	4413      	add	r3, r2
 800b0b8:	3b80      	subs	r3, #128	; 0x80
 800b0ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b0be:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 800b0c2:	f7f5 fa8b 	bl	80005dc <__aeabi_dmul>
 800b0c6:	4602      	mov	r2, r0
 800b0c8:	460b      	mov	r3, r1
 800b0ca:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 800b0ce:	00c9      	lsls	r1, r1, #3
 800b0d0:	f107 00f0 	add.w	r0, r7, #240	; 0xf0
 800b0d4:	4401      	add	r1, r0
 800b0d6:	3980      	subs	r1, #128	; 0x80
 800b0d8:	e9c1 2300 	strd	r2, r3, [r1]
      for (b_coltop = 5; b_coltop < 6; b_coltop++) {
 800b0dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b0e0:	3301      	adds	r3, #1
 800b0e2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b0e6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b0ea:	2b05      	cmp	r3, #5
 800b0ec:	ddde      	ble.n	800b0ac <qr_5a2P8Gh6+0x6f8>
      }

      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b0f4:	e010      	b.n	800b118 <qr_5a2P8Gh6+0x764>
        beta1 *= 1.0020841800044864E-292;
 800b0f6:	f04f 0200 	mov.w	r2, #0
 800b0fa:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800b0fe:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b102:	f7f5 fa6b 	bl	80005dc <__aeabi_dmul>
 800b106:	4602      	mov	r2, r0
 800b108:	460b      	mov	r3, r1
 800b10a:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 800b10e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b112:	3301      	adds	r3, #1
 800b114:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b118:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b11c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b120:	429a      	cmp	r2, r3
 800b122:	dbe8      	blt.n	800b0f6 <qr_5a2P8Gh6+0x742>
      }

      atmp = beta1;
 800b124:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800b128:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
 800b12c:	e04b      	b.n	800b1c6 <qr_5a2P8Gh6+0x812>
    } else {
      tau_idx_1 = (beta1 - b_A[4]) / beta1;
 800b12e:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800b132:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b136:	f7f5 f899 	bl	800026c <__aeabi_dsub>
 800b13a:	4602      	mov	r2, r0
 800b13c:	460b      	mov	r3, r1
 800b13e:	4610      	mov	r0, r2
 800b140:	4619      	mov	r1, r3
 800b142:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800b146:	f7f5 fb73 	bl	8000830 <__aeabi_ddiv>
 800b14a:	4602      	mov	r2, r0
 800b14c:	460b      	mov	r3, r1
 800b14e:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
      atmp = 1.0 / (b_A[4] - beta1);
 800b152:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800b156:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800b15a:	f7f5 f887 	bl	800026c <__aeabi_dsub>
 800b15e:	4602      	mov	r2, r0
 800b160:	460b      	mov	r3, r1
 800b162:	f04f 0000 	mov.w	r0, #0
 800b166:	4950      	ldr	r1, [pc, #320]	; (800b2a8 <qr_5a2P8Gh6+0x8f4>)
 800b168:	f7f5 fb62 	bl	8000830 <__aeabi_ddiv>
 800b16c:	4602      	mov	r2, r0
 800b16e:	460b      	mov	r3, r1
 800b170:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
      for (c_lastc = 5; c_lastc < 6; c_lastc++) {
 800b174:	2305      	movs	r3, #5
 800b176:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b17a:	e01c      	b.n	800b1b6 <qr_5a2P8Gh6+0x802>
        b_A[c_lastc] *= atmp;
 800b17c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b180:	00db      	lsls	r3, r3, #3
 800b182:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800b186:	4413      	add	r3, r2
 800b188:	3b80      	subs	r3, #128	; 0x80
 800b18a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b18e:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 800b192:	f7f5 fa23 	bl	80005dc <__aeabi_dmul>
 800b196:	4602      	mov	r2, r0
 800b198:	460b      	mov	r3, r1
 800b19a:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 800b19e:	00c9      	lsls	r1, r1, #3
 800b1a0:	f107 00f0 	add.w	r0, r7, #240	; 0xf0
 800b1a4:	4401      	add	r1, r0
 800b1a6:	3980      	subs	r1, #128	; 0x80
 800b1a8:	e9c1 2300 	strd	r2, r3, [r1]
      for (c_lastc = 5; c_lastc < 6; c_lastc++) {
 800b1ac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b1b0:	3301      	adds	r3, #1
 800b1b2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b1b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b1ba:	2b05      	cmp	r3, #5
 800b1bc:	ddde      	ble.n	800b17c <qr_5a2P8Gh6+0x7c8>
      }

      atmp = beta1;
 800b1be:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800b1c2:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
    }
  }

  b_A[4] = 1.0;
 800b1c6:	f04f 0200 	mov.w	r2, #0
 800b1ca:	4b37      	ldr	r3, [pc, #220]	; (800b2a8 <qr_5a2P8Gh6+0x8f4>)
 800b1cc:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
  if (tau_idx_1 != 0.0) {
 800b1d0:	f04f 0200 	mov.w	r2, #0
 800b1d4:	f04f 0300 	mov.w	r3, #0
 800b1d8:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800b1dc:	f7f5 fc66 	bl	8000aac <__aeabi_dcmpeq>
 800b1e0:	4603      	mov	r3, r0
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d162      	bne.n	800b2ac <qr_5a2P8Gh6+0x8f8>
    knt = 2;
 800b1e6:	2302      	movs	r3, #2
 800b1e8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    c_lastc = 5;
 800b1ec:	2305      	movs	r3, #5
 800b1ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    while ((knt > 0) && (b_A[c_lastc] == 0.0)) {
 800b1f2:	e009      	b.n	800b208 <qr_5a2P8Gh6+0x854>
      knt--;
 800b1f4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b1f8:	3b01      	subs	r3, #1
 800b1fa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      c_lastc--;
 800b1fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b202:	3b01      	subs	r3, #1
 800b204:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    while ((knt > 0) && (b_A[c_lastc] == 0.0)) {
 800b208:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	dd11      	ble.n	800b234 <qr_5a2P8Gh6+0x880>
 800b210:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b214:	00db      	lsls	r3, r3, #3
 800b216:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800b21a:	4413      	add	r3, r2
 800b21c:	3b80      	subs	r3, #128	; 0x80
 800b21e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b222:	f04f 0200 	mov.w	r2, #0
 800b226:	f04f 0300 	mov.w	r3, #0
 800b22a:	f7f5 fc3f 	bl	8000aac <__aeabi_dcmpeq>
 800b22e:	4603      	mov	r3, r0
 800b230:	2b00      	cmp	r3, #0
 800b232:	d1df      	bne.n	800b1f4 <qr_5a2P8Gh6+0x840>
    }

    c_lastc = 1;
 800b234:	2301      	movs	r3, #1
 800b236:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    coltop = 7;
 800b23a:	2307      	movs	r3, #7
 800b23c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    do {
      exitg1 = 0;
 800b240:	2300      	movs	r3, #0
 800b242:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
      if (coltop + 1 <= knt + 7) {
 800b246:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b24a:	3306      	adds	r3, #6
 800b24c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b250:	429a      	cmp	r2, r3
 800b252:	dc1b      	bgt.n	800b28c <qr_5a2P8Gh6+0x8d8>
        if (b_A[coltop] != 0.0) {
 800b254:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b258:	00db      	lsls	r3, r3, #3
 800b25a:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800b25e:	4413      	add	r3, r2
 800b260:	3b80      	subs	r3, #128	; 0x80
 800b262:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b266:	f04f 0200 	mov.w	r2, #0
 800b26a:	f04f 0300 	mov.w	r3, #0
 800b26e:	f7f5 fc1d 	bl	8000aac <__aeabi_dcmpeq>
 800b272:	4603      	mov	r3, r0
 800b274:	2b00      	cmp	r3, #0
 800b276:	d103      	bne.n	800b280 <qr_5a2P8Gh6+0x8cc>
          exitg1 = 1;
 800b278:	2301      	movs	r3, #1
 800b27a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b27e:	e00b      	b.n	800b298 <qr_5a2P8Gh6+0x8e4>
        } else {
          coltop++;
 800b280:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b284:	3301      	adds	r3, #1
 800b286:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b28a:	e005      	b.n	800b298 <qr_5a2P8Gh6+0x8e4>
        }
      } else {
        c_lastc = 0;
 800b28c:	2300      	movs	r3, #0
 800b28e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
        exitg1 = 1;
 800b292:	2301      	movs	r3, #1
 800b294:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
      }
    } while (exitg1 == 0);
 800b298:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d0cf      	beq.n	800b240 <qr_5a2P8Gh6+0x88c>
 800b2a0:	e00a      	b.n	800b2b8 <qr_5a2P8Gh6+0x904>
 800b2a2:	bf00      	nop
 800b2a4:	7c900000 	.word	0x7c900000
 800b2a8:	3ff00000 	.word	0x3ff00000
  } else {
    knt = 0;
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    c_lastc = 0;
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  }

  if (knt > 0) {
 800b2b8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	dd29      	ble.n	800b314 <qr_5a2P8Gh6+0x960>
    xgemv_fRiR1I1O(knt, c_lastc, b_A, 8, b_A, 5, work);
 800b2c0:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800b2c4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b2c8:	9302      	str	r3, [sp, #8]
 800b2ca:	2305      	movs	r3, #5
 800b2cc:	9301      	str	r3, [sp, #4]
 800b2ce:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800b2d2:	9300      	str	r3, [sp, #0]
 800b2d4:	2308      	movs	r3, #8
 800b2d6:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 800b2da:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800b2de:	f003 ff1b 	bl	800f118 <xgemv_fRiR1I1O>
    xgerc_tNNiazQU(knt, c_lastc, -tau_idx_1, 5, work, b_A, 8);
 800b2e2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b2e6:	623b      	str	r3, [r7, #32]
 800b2e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b2ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800b2f0:	627b      	str	r3, [r7, #36]	; 0x24
 800b2f2:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800b2f6:	2308      	movs	r3, #8
 800b2f8:	9301      	str	r3, [sp, #4]
 800b2fa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800b2fe:	9300      	str	r3, [sp, #0]
 800b300:	4613      	mov	r3, r2
 800b302:	2205      	movs	r2, #5
 800b304:	ed97 0b08 	vldr	d0, [r7, #32]
 800b308:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 800b30c:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800b310:	f004 f80b 	bl	800f32a <xgerc_tNNiazQU>
  }

  b_A[4] = atmp;
 800b314:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 800b318:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
  R[0] = b_A[0];
 800b31c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800b320:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800b322:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 1; c_lastc + 1 < 4; c_lastc++) {
 800b326:	2301      	movs	r3, #1
 800b328:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b32c:	e00f      	b.n	800b34e <qr_5a2P8Gh6+0x99a>
    R[c_lastc] = 0.0;
 800b32e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b332:	00db      	lsls	r3, r3, #3
 800b334:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b336:	18d1      	adds	r1, r2, r3
 800b338:	f04f 0200 	mov.w	r2, #0
 800b33c:	f04f 0300 	mov.w	r3, #0
 800b340:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 1; c_lastc + 1 < 4; c_lastc++) {
 800b344:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b348:	3301      	adds	r3, #1
 800b34a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b34e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b352:	2b02      	cmp	r3, #2
 800b354:	ddeb      	ble.n	800b32e <qr_5a2P8Gh6+0x97a>
  }

  work[0] = 0.0;
 800b356:	f04f 0200 	mov.w	r2, #0
 800b35a:	f04f 0300 	mov.w	r3, #0
 800b35e:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
  for (c_lastc = 0; c_lastc < 2; c_lastc++) {
 800b362:	2300      	movs	r3, #0
 800b364:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b368:	e016      	b.n	800b398 <qr_5a2P8Gh6+0x9e4>
    R[c_lastc + 3] = b_A[c_lastc + 3];
 800b36a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b36e:	3303      	adds	r3, #3
 800b370:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b374:	3203      	adds	r2, #3
 800b376:	00d2      	lsls	r2, r2, #3
 800b378:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800b37a:	4411      	add	r1, r2
 800b37c:	00db      	lsls	r3, r3, #3
 800b37e:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800b382:	4413      	add	r3, r2
 800b384:	3b80      	subs	r3, #128	; 0x80
 800b386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b38a:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 0; c_lastc < 2; c_lastc++) {
 800b38e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b392:	3301      	adds	r3, #1
 800b394:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b398:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b39c:	2b01      	cmp	r3, #1
 800b39e:	dde4      	ble.n	800b36a <qr_5a2P8Gh6+0x9b6>
  }

  while (c_lastc + 1 < 4) {
 800b3a0:	e010      	b.n	800b3c4 <qr_5a2P8Gh6+0xa10>
    R[c_lastc + 3] = 0.0;
 800b3a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b3a6:	3303      	adds	r3, #3
 800b3a8:	00db      	lsls	r3, r3, #3
 800b3aa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b3ac:	18d1      	adds	r1, r2, r3
 800b3ae:	f04f 0200 	mov.w	r2, #0
 800b3b2:	f04f 0300 	mov.w	r3, #0
 800b3b6:	e9c1 2300 	strd	r2, r3, [r1]
    c_lastc++;
 800b3ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b3be:	3301      	adds	r3, #1
 800b3c0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  while (c_lastc + 1 < 4) {
 800b3c4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b3c8:	2b02      	cmp	r3, #2
 800b3ca:	ddea      	ble.n	800b3a2 <qr_5a2P8Gh6+0x9ee>
  }

  work[1] = 0.0;
 800b3cc:	f04f 0200 	mov.w	r2, #0
 800b3d0:	f04f 0300 	mov.w	r3, #0
 800b3d4:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
  for (c_lastc = 0; c_lastc < 3; c_lastc++) {
 800b3d8:	2300      	movs	r3, #0
 800b3da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b3de:	e016      	b.n	800b40e <qr_5a2P8Gh6+0xa5a>
    R[c_lastc + 6] = b_A[c_lastc + 6];
 800b3e0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b3e4:	3306      	adds	r3, #6
 800b3e6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b3ea:	3206      	adds	r2, #6
 800b3ec:	00d2      	lsls	r2, r2, #3
 800b3ee:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800b3f0:	4411      	add	r1, r2
 800b3f2:	00db      	lsls	r3, r3, #3
 800b3f4:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800b3f8:	4413      	add	r3, r2
 800b3fa:	3b80      	subs	r3, #128	; 0x80
 800b3fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b400:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 0; c_lastc < 3; c_lastc++) {
 800b404:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b408:	3301      	adds	r3, #1
 800b40a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b40e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b412:	2b02      	cmp	r3, #2
 800b414:	dde4      	ble.n	800b3e0 <qr_5a2P8Gh6+0xa2c>
  }

  work[2] = 0.0;
 800b416:	f04f 0200 	mov.w	r2, #0
 800b41a:	f04f 0300 	mov.w	r3, #0
 800b41e:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
  b_A[8] = 1.0;
 800b422:	f04f 0200 	mov.w	r2, #0
 800b426:	4bc8      	ldr	r3, [pc, #800]	; (800b748 <qr_5a2P8Gh6+0xd94>)
 800b428:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
  for (c_lastc = 0; c_lastc < 2; c_lastc++) {
 800b42c:	2300      	movs	r3, #0
 800b42e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b432:	e014      	b.n	800b45e <qr_5a2P8Gh6+0xaaa>
    b_A[7 - c_lastc] = 0.0;
 800b434:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b438:	f1c3 0307 	rsb	r3, r3, #7
 800b43c:	00db      	lsls	r3, r3, #3
 800b43e:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800b442:	4413      	add	r3, r2
 800b444:	f1a3 0180 	sub.w	r1, r3, #128	; 0x80
 800b448:	f04f 0200 	mov.w	r2, #0
 800b44c:	f04f 0300 	mov.w	r3, #0
 800b450:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 0; c_lastc < 2; c_lastc++) {
 800b454:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b458:	3301      	adds	r3, #1
 800b45a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b45e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b462:	2b01      	cmp	r3, #1
 800b464:	dde6      	ble.n	800b434 <qr_5a2P8Gh6+0xa80>
  }

  b_A[4] = 1.0;
 800b466:	f04f 0200 	mov.w	r2, #0
 800b46a:	4bb7      	ldr	r3, [pc, #732]	; (800b748 <qr_5a2P8Gh6+0xd94>)
 800b46c:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
  if (tau_idx_1 != 0.0) {
 800b470:	f04f 0200 	mov.w	r2, #0
 800b474:	f04f 0300 	mov.w	r3, #0
 800b478:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800b47c:	f7f5 fb16 	bl	8000aac <__aeabi_dcmpeq>
 800b480:	4603      	mov	r3, r0
 800b482:	2b00      	cmp	r3, #0
 800b484:	d15c      	bne.n	800b540 <qr_5a2P8Gh6+0xb8c>
    b_coltop = 7;
 800b486:	2307      	movs	r3, #7
 800b488:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    while ((c_lastc > 0) && (b_A[b_coltop - 2] == 0.0)) {
 800b48c:	e009      	b.n	800b4a2 <qr_5a2P8Gh6+0xaee>
      c_lastc--;
 800b48e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b492:	3b01      	subs	r3, #1
 800b494:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
      b_coltop--;
 800b498:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b49c:	3b01      	subs	r3, #1
 800b49e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    while ((c_lastc > 0) && (b_A[b_coltop - 2] == 0.0)) {
 800b4a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	dd12      	ble.n	800b4d0 <qr_5a2P8Gh6+0xb1c>
 800b4aa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b4ae:	3b02      	subs	r3, #2
 800b4b0:	00db      	lsls	r3, r3, #3
 800b4b2:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800b4b6:	4413      	add	r3, r2
 800b4b8:	3b80      	subs	r3, #128	; 0x80
 800b4ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b4be:	f04f 0200 	mov.w	r2, #0
 800b4c2:	f04f 0300 	mov.w	r3, #0
 800b4c6:	f7f5 faf1 	bl	8000aac <__aeabi_dcmpeq>
 800b4ca:	4603      	mov	r3, r0
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d1de      	bne.n	800b48e <qr_5a2P8Gh6+0xada>
    }

    b_coltop = 1;
 800b4d0:	2301      	movs	r3, #1
 800b4d2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    knt = 8;
 800b4d6:	2308      	movs	r3, #8
 800b4d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    do {
      exitg1 = 0;
 800b4dc:	2300      	movs	r3, #0
 800b4de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
      if (knt <= c_lastc + 7) {
 800b4e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b4e6:	3307      	adds	r3, #7
 800b4e8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800b4ec:	429a      	cmp	r2, r3
 800b4ee:	dc1c      	bgt.n	800b52a <qr_5a2P8Gh6+0xb76>
        if (b_A[knt - 1] != 0.0) {
 800b4f0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b4f4:	3b01      	subs	r3, #1
 800b4f6:	00db      	lsls	r3, r3, #3
 800b4f8:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800b4fc:	4413      	add	r3, r2
 800b4fe:	3b80      	subs	r3, #128	; 0x80
 800b500:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b504:	f04f 0200 	mov.w	r2, #0
 800b508:	f04f 0300 	mov.w	r3, #0
 800b50c:	f7f5 face 	bl	8000aac <__aeabi_dcmpeq>
 800b510:	4603      	mov	r3, r0
 800b512:	2b00      	cmp	r3, #0
 800b514:	d103      	bne.n	800b51e <qr_5a2P8Gh6+0xb6a>
          exitg1 = 1;
 800b516:	2301      	movs	r3, #1
 800b518:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b51c:	e00b      	b.n	800b536 <qr_5a2P8Gh6+0xb82>
        } else {
          knt++;
 800b51e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b522:	3301      	adds	r3, #1
 800b524:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b528:	e005      	b.n	800b536 <qr_5a2P8Gh6+0xb82>
        }
      } else {
        b_coltop = 0;
 800b52a:	2300      	movs	r3, #0
 800b52c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
        exitg1 = 1;
 800b530:	2301      	movs	r3, #1
 800b532:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
      }
    } while (exitg1 == 0);
 800b536:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d0ce      	beq.n	800b4dc <qr_5a2P8Gh6+0xb28>
 800b53e:	e005      	b.n	800b54c <qr_5a2P8Gh6+0xb98>
  } else {
    c_lastc = 0;
 800b540:	2300      	movs	r3, #0
 800b542:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    b_coltop = 0;
 800b546:	2300      	movs	r3, #0
 800b548:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  }

  if (c_lastc > 0) {
 800b54c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b550:	2b00      	cmp	r3, #0
 800b552:	dd29      	ble.n	800b5a8 <qr_5a2P8Gh6+0xbf4>
    xgemv_fRiR1I1O(c_lastc, b_coltop, b_A, 8, b_A, 5, work);
 800b554:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800b558:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b55c:	9302      	str	r3, [sp, #8]
 800b55e:	2305      	movs	r3, #5
 800b560:	9301      	str	r3, [sp, #4]
 800b562:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800b566:	9300      	str	r3, [sp, #0]
 800b568:	2308      	movs	r3, #8
 800b56a:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 800b56e:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 800b572:	f003 fdd1 	bl	800f118 <xgemv_fRiR1I1O>
    xgerc_tNNiazQU(c_lastc, b_coltop, -tau_idx_1, 5, work, b_A, 8);
 800b576:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b57a:	61bb      	str	r3, [r7, #24]
 800b57c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b580:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800b584:	61fb      	str	r3, [r7, #28]
 800b586:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800b58a:	2308      	movs	r3, #8
 800b58c:	9301      	str	r3, [sp, #4]
 800b58e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800b592:	9300      	str	r3, [sp, #0]
 800b594:	4613      	mov	r3, r2
 800b596:	2205      	movs	r2, #5
 800b598:	ed97 0b06 	vldr	d0, [r7, #24]
 800b59c:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 800b5a0:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 800b5a4:	f003 fec1 	bl	800f32a <xgerc_tNNiazQU>
  }

  for (b_coltop = 5; b_coltop < 6; b_coltop++) {
 800b5a8:	2305      	movs	r3, #5
 800b5aa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b5ae:	e024      	b.n	800b5fa <qr_5a2P8Gh6+0xc46>
    b_A[b_coltop] *= -tau_idx_1;
 800b5b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b5b4:	00db      	lsls	r3, r3, #3
 800b5b6:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800b5ba:	4413      	add	r3, r2
 800b5bc:	3b80      	subs	r3, #128	; 0x80
 800b5be:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b5c2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b5c6:	613b      	str	r3, [r7, #16]
 800b5c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b5cc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800b5d0:	617b      	str	r3, [r7, #20]
 800b5d2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b5d6:	f7f5 f801 	bl	80005dc <__aeabi_dmul>
 800b5da:	4602      	mov	r2, r0
 800b5dc:	460b      	mov	r3, r1
 800b5de:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 800b5e2:	00c9      	lsls	r1, r1, #3
 800b5e4:	f107 00f0 	add.w	r0, r7, #240	; 0xf0
 800b5e8:	4401      	add	r1, r0
 800b5ea:	3980      	subs	r1, #128	; 0x80
 800b5ec:	e9c1 2300 	strd	r2, r3, [r1]
  for (b_coltop = 5; b_coltop < 6; b_coltop++) {
 800b5f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b5f4:	3301      	adds	r3, #1
 800b5f6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b5fa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b5fe:	2b05      	cmp	r3, #5
 800b600:	ddd6      	ble.n	800b5b0 <qr_5a2P8Gh6+0xbfc>
  }

  b_A[4] = 1.0 - tau_idx_1;
 800b602:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800b606:	f04f 0000 	mov.w	r0, #0
 800b60a:	494f      	ldr	r1, [pc, #316]	; (800b748 <qr_5a2P8Gh6+0xd94>)
 800b60c:	f7f4 fe2e 	bl	800026c <__aeabi_dsub>
 800b610:	4602      	mov	r2, r0
 800b612:	460b      	mov	r3, r1
 800b614:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
  b_A[3] = 0.0;
 800b618:	f04f 0200 	mov.w	r2, #0
 800b61c:	f04f 0300 	mov.w	r3, #0
 800b620:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
  b_A[0] = 1.0;
 800b624:	f04f 0200 	mov.w	r2, #0
 800b628:	4b47      	ldr	r3, [pc, #284]	; (800b748 <qr_5a2P8Gh6+0xd94>)
 800b62a:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  if (tau_idx_0 != 0.0) {
 800b62e:	f04f 0200 	mov.w	r2, #0
 800b632:	f04f 0300 	mov.w	r3, #0
 800b636:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800b63a:	f7f5 fa37 	bl	8000aac <__aeabi_dcmpeq>
 800b63e:	4603      	mov	r3, r0
 800b640:	2b00      	cmp	r3, #0
 800b642:	f040 8083 	bne.w	800b74c <qr_5a2P8Gh6+0xd98>
    c_lastc = 3;
 800b646:	2303      	movs	r3, #3
 800b648:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    b_coltop = 4;
 800b64c:	2304      	movs	r3, #4
 800b64e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    while ((c_lastc > 0) && (b_A[b_coltop - 2] == 0.0)) {
 800b652:	e009      	b.n	800b668 <qr_5a2P8Gh6+0xcb4>
      c_lastc--;
 800b654:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b658:	3b01      	subs	r3, #1
 800b65a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
      b_coltop--;
 800b65e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b662:	3b01      	subs	r3, #1
 800b664:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    while ((c_lastc > 0) && (b_A[b_coltop - 2] == 0.0)) {
 800b668:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	dd12      	ble.n	800b696 <qr_5a2P8Gh6+0xce2>
 800b670:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b674:	3b02      	subs	r3, #2
 800b676:	00db      	lsls	r3, r3, #3
 800b678:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800b67c:	4413      	add	r3, r2
 800b67e:	3b80      	subs	r3, #128	; 0x80
 800b680:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b684:	f04f 0200 	mov.w	r2, #0
 800b688:	f04f 0300 	mov.w	r3, #0
 800b68c:	f7f5 fa0e 	bl	8000aac <__aeabi_dcmpeq>
 800b690:	4603      	mov	r3, r0
 800b692:	2b00      	cmp	r3, #0
 800b694:	d1de      	bne.n	800b654 <qr_5a2P8Gh6+0xca0>
    }

    b_coltop = 2;
 800b696:	2302      	movs	r3, #2
 800b698:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    exitg2 = false;
 800b69c:	2300      	movs	r3, #0
 800b69e:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
    while ((!exitg2) && (b_coltop > 0)) {
 800b6a2:	e048      	b.n	800b736 <qr_5a2P8Gh6+0xd82>
      coltop = (b_coltop - 1) * 3 + 4;
 800b6a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b6a8:	1e5a      	subs	r2, r3, #1
 800b6aa:	4613      	mov	r3, r2
 800b6ac:	005b      	lsls	r3, r3, #1
 800b6ae:	4413      	add	r3, r2
 800b6b0:	3304      	adds	r3, #4
 800b6b2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
      knt = coltop;
 800b6b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b6ba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      do {
        exitg1 = 0;
 800b6be:	2300      	movs	r3, #0
 800b6c0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
        if (knt <= (coltop + c_lastc) - 1) {
 800b6c4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b6c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b6cc:	4413      	add	r3, r2
 800b6ce:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800b6d2:	429a      	cmp	r2, r3
 800b6d4:	da1c      	bge.n	800b710 <qr_5a2P8Gh6+0xd5c>
          if (b_A[knt - 1] != 0.0) {
 800b6d6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b6da:	3b01      	subs	r3, #1
 800b6dc:	00db      	lsls	r3, r3, #3
 800b6de:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800b6e2:	4413      	add	r3, r2
 800b6e4:	3b80      	subs	r3, #128	; 0x80
 800b6e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b6ea:	f04f 0200 	mov.w	r2, #0
 800b6ee:	f04f 0300 	mov.w	r3, #0
 800b6f2:	f7f5 f9db 	bl	8000aac <__aeabi_dcmpeq>
 800b6f6:	4603      	mov	r3, r0
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d103      	bne.n	800b704 <qr_5a2P8Gh6+0xd50>
            exitg1 = 1;
 800b6fc:	2301      	movs	r3, #1
 800b6fe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b702:	e00d      	b.n	800b720 <qr_5a2P8Gh6+0xd6c>
          } else {
            knt++;
 800b704:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b708:	3301      	adds	r3, #1
 800b70a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b70e:	e007      	b.n	800b720 <qr_5a2P8Gh6+0xd6c>
          }
        } else {
          b_coltop--;
 800b710:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b714:	3b01      	subs	r3, #1
 800b716:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
          exitg1 = 2;
 800b71a:	2302      	movs	r3, #2
 800b71c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
        }
      } while (exitg1 == 0);
 800b720:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b724:	2b00      	cmp	r3, #0
 800b726:	d0ca      	beq.n	800b6be <qr_5a2P8Gh6+0xd0a>

      if (exitg1 == 1) {
 800b728:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b72c:	2b01      	cmp	r3, #1
 800b72e:	d102      	bne.n	800b736 <qr_5a2P8Gh6+0xd82>
        exitg2 = true;
 800b730:	2301      	movs	r3, #1
 800b732:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
    while ((!exitg2) && (b_coltop > 0)) {
 800b736:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d10c      	bne.n	800b758 <qr_5a2P8Gh6+0xda4>
 800b73e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b742:	2b00      	cmp	r3, #0
 800b744:	dcae      	bgt.n	800b6a4 <qr_5a2P8Gh6+0xcf0>
 800b746:	e007      	b.n	800b758 <qr_5a2P8Gh6+0xda4>
 800b748:	3ff00000 	.word	0x3ff00000
      }
    }
  } else {
    c_lastc = 0;
 800b74c:	2300      	movs	r3, #0
 800b74e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    b_coltop = 0;
 800b752:	2300      	movs	r3, #0
 800b754:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  }

  if (c_lastc > 0) {
 800b758:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	dd29      	ble.n	800b7b4 <qr_5a2P8Gh6+0xe00>
    xgemv_fRiR1I1O(c_lastc, b_coltop, b_A, 4, b_A, 1, work);
 800b760:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800b764:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b768:	9302      	str	r3, [sp, #8]
 800b76a:	2301      	movs	r3, #1
 800b76c:	9301      	str	r3, [sp, #4]
 800b76e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800b772:	9300      	str	r3, [sp, #0]
 800b774:	2304      	movs	r3, #4
 800b776:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 800b77a:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 800b77e:	f003 fccb 	bl	800f118 <xgemv_fRiR1I1O>
    xgerc_tNNiazQU(c_lastc, b_coltop, -tau_idx_0, 1, work, b_A, 4);
 800b782:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b786:	60bb      	str	r3, [r7, #8]
 800b788:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b78c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800b790:	60fb      	str	r3, [r7, #12]
 800b792:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800b796:	2304      	movs	r3, #4
 800b798:	9301      	str	r3, [sp, #4]
 800b79a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800b79e:	9300      	str	r3, [sp, #0]
 800b7a0:	4613      	mov	r3, r2
 800b7a2:	2201      	movs	r2, #1
 800b7a4:	ed97 0b02 	vldr	d0, [r7, #8]
 800b7a8:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 800b7ac:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 800b7b0:	f003 fdbb 	bl	800f32a <xgerc_tNNiazQU>
  }

  for (b_coltop = 1; b_coltop < 3; b_coltop++) {
 800b7b4:	2301      	movs	r3, #1
 800b7b6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b7ba:	e024      	b.n	800b806 <qr_5a2P8Gh6+0xe52>
    b_A[b_coltop] *= -tau_idx_0;
 800b7bc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b7c0:	00db      	lsls	r3, r3, #3
 800b7c2:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800b7c6:	4413      	add	r3, r2
 800b7c8:	3b80      	subs	r3, #128	; 0x80
 800b7ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b7ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b7d2:	603b      	str	r3, [r7, #0]
 800b7d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b7d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800b7dc:	607b      	str	r3, [r7, #4]
 800b7de:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b7e2:	f7f4 fefb 	bl	80005dc <__aeabi_dmul>
 800b7e6:	4602      	mov	r2, r0
 800b7e8:	460b      	mov	r3, r1
 800b7ea:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 800b7ee:	00c9      	lsls	r1, r1, #3
 800b7f0:	f107 00f0 	add.w	r0, r7, #240	; 0xf0
 800b7f4:	4401      	add	r1, r0
 800b7f6:	3980      	subs	r1, #128	; 0x80
 800b7f8:	e9c1 2300 	strd	r2, r3, [r1]
  for (b_coltop = 1; b_coltop < 3; b_coltop++) {
 800b7fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b800:	3301      	adds	r3, #1
 800b802:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b806:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b80a:	2b02      	cmp	r3, #2
 800b80c:	ddd6      	ble.n	800b7bc <qr_5a2P8Gh6+0xe08>
  }

  b_A[0] = 1.0 - tau_idx_0;
 800b80e:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 800b812:	f04f 0000 	mov.w	r0, #0
 800b816:	492a      	ldr	r1, [pc, #168]	; (800b8c0 <qr_5a2P8Gh6+0xf0c>)
 800b818:	f7f4 fd28 	bl	800026c <__aeabi_dsub>
 800b81c:	4602      	mov	r2, r0
 800b81e:	460b      	mov	r3, r1
 800b820:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  c_lastc = 0;
 800b824:	2300      	movs	r3, #0
 800b826:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  for (b_coltop = 0; b_coltop < 3; b_coltop++) {
 800b82a:	2300      	movs	r3, #0
 800b82c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b830:	e03d      	b.n	800b8ae <qr_5a2P8Gh6+0xefa>
    Q[c_lastc] = b_A[c_lastc];
 800b832:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b836:	00db      	lsls	r3, r3, #3
 800b838:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b83a:	18d1      	adds	r1, r2, r3
 800b83c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b840:	00db      	lsls	r3, r3, #3
 800b842:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800b846:	4413      	add	r3, r2
 800b848:	3b80      	subs	r3, #128	; 0x80
 800b84a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b84e:	e9c1 2300 	strd	r2, r3, [r1]
    Q[c_lastc + 1] = b_A[c_lastc + 1];
 800b852:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b856:	3301      	adds	r3, #1
 800b858:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b85c:	3201      	adds	r2, #1
 800b85e:	00d2      	lsls	r2, r2, #3
 800b860:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b862:	4411      	add	r1, r2
 800b864:	00db      	lsls	r3, r3, #3
 800b866:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800b86a:	4413      	add	r3, r2
 800b86c:	3b80      	subs	r3, #128	; 0x80
 800b86e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b872:	e9c1 2300 	strd	r2, r3, [r1]
    Q[c_lastc + 2] = b_A[c_lastc + 2];
 800b876:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b87a:	3302      	adds	r3, #2
 800b87c:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b880:	3202      	adds	r2, #2
 800b882:	00d2      	lsls	r2, r2, #3
 800b884:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b886:	4411      	add	r1, r2
 800b888:	00db      	lsls	r3, r3, #3
 800b88a:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800b88e:	4413      	add	r3, r2
 800b890:	3b80      	subs	r3, #128	; 0x80
 800b892:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b896:	e9c1 2300 	strd	r2, r3, [r1]
    c_lastc += 3;
 800b89a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b89e:	3303      	adds	r3, #3
 800b8a0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  for (b_coltop = 0; b_coltop < 3; b_coltop++) {
 800b8a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b8a8:	3301      	adds	r3, #1
 800b8aa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b8ae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b8b2:	2b02      	cmp	r3, #2
 800b8b4:	ddbd      	ble.n	800b832 <qr_5a2P8Gh6+0xe7e>
  }
}
 800b8b6:	bf00      	nop
 800b8b8:	bf00      	nop
 800b8ba:	37f0      	adds	r7, #240	; 0xf0
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	bdb0      	pop	{r4, r5, r7, pc}
 800b8c0:	3ff00000 	.word	0x3ff00000

0800b8c4 <qr_DvOBrgQi>:
#include <math.h>
#include "xgemv_NQlWbt2i.h"
#include "xgerc_R09LiDgJ.h"

void qr_DvOBrgQi(const real_T A[18], real_T Q[18], real_T R[9])
{
 800b8c4:	b5b0      	push	{r4, r5, r7, lr}
 800b8c6:	b0da      	sub	sp, #360	; 0x168
 800b8c8:	af04      	add	r7, sp, #16
 800b8ca:	66f8      	str	r0, [r7, #108]	; 0x6c
 800b8cc:	66b9      	str	r1, [r7, #104]	; 0x68
 800b8ce:	667a      	str	r2, [r7, #100]	; 0x64
  int32_T c_lastc;
  int32_T coltop;
  int32_T exitg1;
  int32_T knt;
  boolean_T exitg2;
  memcpy(&b_A[0], &A[0], 18U * sizeof(real_T));
 800b8d0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800b8d4:	2290      	movs	r2, #144	; 0x90
 800b8d6:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800b8d8:	4618      	mov	r0, r3
 800b8da:	f00f fbbf 	bl	801b05c <memcpy>
  work[0] = 0.0;
 800b8de:	f04f 0200 	mov.w	r2, #0
 800b8e2:	f04f 0300 	mov.w	r3, #0
 800b8e6:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  work[1] = 0.0;
 800b8ea:	f04f 0200 	mov.w	r2, #0
 800b8ee:	f04f 0300 	mov.w	r3, #0
 800b8f2:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
  work[2] = 0.0;
 800b8f6:	f04f 0200 	mov.w	r2, #0
 800b8fa:	f04f 0300 	mov.w	r3, #0
 800b8fe:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
  atmp = b_A[0];
 800b902:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800b906:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
  tau_idx_0 = 0.0;
 800b90a:	f04f 0200 	mov.w	r2, #0
 800b90e:	f04f 0300 	mov.w	r3, #0
 800b912:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
  beta1 = xnrm2_nLdASVZH(5, b_A, 2);
 800b916:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800b91a:	2202      	movs	r2, #2
 800b91c:	4619      	mov	r1, r3
 800b91e:	2005      	movs	r0, #5
 800b920:	f003 ff90 	bl	800f844 <xnrm2_nLdASVZH>
 800b924:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
  if (beta1 != 0.0) {
 800b928:	f04f 0200 	mov.w	r2, #0
 800b92c:	f04f 0300 	mov.w	r3, #0
 800b930:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800b934:	f7f5 f8ba 	bl	8000aac <__aeabi_dcmpeq>
 800b938:	4603      	mov	r3, r0
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	f040 8172 	bne.w	800bc24 <qr_DvOBrgQi+0x360>
    beta1 = rt_hypotd_snf(b_A[0], beta1);
 800b940:	ed97 7b22 	vldr	d7, [r7, #136]	; 0x88
 800b944:	ed97 1b52 	vldr	d1, [r7, #328]	; 0x148
 800b948:	eeb0 0a47 	vmov.f32	s0, s14
 800b94c:	eef0 0a67 	vmov.f32	s1, s15
 800b950:	f001 fa92 	bl	800ce78 <rt_hypotd_snf>
 800b954:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
    if (b_A[0] >= 0.0) {
 800b958:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800b95c:	f04f 0200 	mov.w	r2, #0
 800b960:	f04f 0300 	mov.w	r3, #0
 800b964:	f7f5 f8c0 	bl	8000ae8 <__aeabi_dcmpge>
 800b968:	4603      	mov	r3, r0
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d009      	beq.n	800b982 <qr_DvOBrgQi+0xbe>
      beta1 = -beta1;
 800b96e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800b972:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800b976:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800b97a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800b97e:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    }

    if (fabs(beta1) < 1.0020841800044864E-292) {
 800b982:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 800b986:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800b98a:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800b98e:	f04f 0200 	mov.w	r2, #0
 800b992:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800b996:	4620      	mov	r0, r4
 800b998:	4629      	mov	r1, r5
 800b99a:	f7f5 f891 	bl	8000ac0 <__aeabi_dcmplt>
 800b99e:	4603      	mov	r3, r0
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	f000 80f1 	beq.w	800bb88 <qr_DvOBrgQi+0x2c4>
      knt = 0;
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
      do {
        knt++;
 800b9ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800b9b0:	3301      	adds	r3, #1
 800b9b2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        for (b_coltop = 1; b_coltop < 6; b_coltop++) {
 800b9b6:	2301      	movs	r3, #1
 800b9b8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800b9bc:	e01f      	b.n	800b9fe <qr_DvOBrgQi+0x13a>
          b_A[b_coltop] *= 9.9792015476736E+291;
 800b9be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b9c2:	00db      	lsls	r3, r3, #3
 800b9c4:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800b9c8:	4413      	add	r3, r2
 800b9ca:	3bd0      	subs	r3, #208	; 0xd0
 800b9cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b9d0:	f04f 0200 	mov.w	r2, #0
 800b9d4:	4bca      	ldr	r3, [pc, #808]	; (800bd00 <qr_DvOBrgQi+0x43c>)
 800b9d6:	f7f4 fe01 	bl	80005dc <__aeabi_dmul>
 800b9da:	4602      	mov	r2, r0
 800b9dc:	460b      	mov	r3, r1
 800b9de:	4610      	mov	r0, r2
 800b9e0:	4619      	mov	r1, r3
 800b9e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b9e6:	00db      	lsls	r3, r3, #3
 800b9e8:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800b9ec:	4413      	add	r3, r2
 800b9ee:	3bd0      	subs	r3, #208	; 0xd0
 800b9f0:	e9c3 0100 	strd	r0, r1, [r3]
        for (b_coltop = 1; b_coltop < 6; b_coltop++) {
 800b9f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b9f8:	3301      	adds	r3, #1
 800b9fa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800b9fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ba02:	2b05      	cmp	r3, #5
 800ba04:	dddb      	ble.n	800b9be <qr_DvOBrgQi+0xfa>
        }

        beta1 *= 9.9792015476736E+291;
 800ba06:	f04f 0200 	mov.w	r2, #0
 800ba0a:	4bbd      	ldr	r3, [pc, #756]	; (800bd00 <qr_DvOBrgQi+0x43c>)
 800ba0c:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800ba10:	f7f4 fde4 	bl	80005dc <__aeabi_dmul>
 800ba14:	4602      	mov	r2, r0
 800ba16:	460b      	mov	r3, r1
 800ba18:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
        atmp *= 9.9792015476736E+291;
 800ba1c:	f04f 0200 	mov.w	r2, #0
 800ba20:	4bb7      	ldr	r3, [pc, #732]	; (800bd00 <qr_DvOBrgQi+0x43c>)
 800ba22:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 800ba26:	f7f4 fdd9 	bl	80005dc <__aeabi_dmul>
 800ba2a:	4602      	mov	r2, r0
 800ba2c:	460b      	mov	r3, r1
 800ba2e:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      } while ((fabs(beta1) < 1.0020841800044864E-292) && (knt < 20));
 800ba32:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800ba36:	65bb      	str	r3, [r7, #88]	; 0x58
 800ba38:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800ba3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ba40:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ba42:	f04f 0200 	mov.w	r2, #0
 800ba46:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800ba4a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800ba4e:	f7f5 f837 	bl	8000ac0 <__aeabi_dcmplt>
 800ba52:	4603      	mov	r3, r0
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d003      	beq.n	800ba60 <qr_DvOBrgQi+0x19c>
 800ba58:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800ba5c:	2b13      	cmp	r3, #19
 800ba5e:	dda5      	ble.n	800b9ac <qr_DvOBrgQi+0xe8>

      beta1 = rt_hypotd_snf(atmp, xnrm2_nLdASVZH(5, b_A, 2));
 800ba60:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800ba64:	2202      	movs	r2, #2
 800ba66:	4619      	mov	r1, r3
 800ba68:	2005      	movs	r0, #5
 800ba6a:	f003 feeb 	bl	800f844 <xnrm2_nLdASVZH>
 800ba6e:	eeb0 7a40 	vmov.f32	s14, s0
 800ba72:	eef0 7a60 	vmov.f32	s15, s1
 800ba76:	eeb0 1a47 	vmov.f32	s2, s14
 800ba7a:	eef0 1a67 	vmov.f32	s3, s15
 800ba7e:	ed97 0b54 	vldr	d0, [r7, #336]	; 0x150
 800ba82:	f001 f9f9 	bl	800ce78 <rt_hypotd_snf>
 800ba86:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
      if (atmp >= 0.0) {
 800ba8a:	f04f 0200 	mov.w	r2, #0
 800ba8e:	f04f 0300 	mov.w	r3, #0
 800ba92:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 800ba96:	f7f5 f827 	bl	8000ae8 <__aeabi_dcmpge>
 800ba9a:	4603      	mov	r3, r0
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d009      	beq.n	800bab4 <qr_DvOBrgQi+0x1f0>
        beta1 = -beta1;
 800baa0:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800baa4:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800baa8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800baac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800bab0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
      }

      tau_idx_0 = (beta1 - atmp) / beta1;
 800bab4:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 800bab8:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800babc:	f7f4 fbd6 	bl	800026c <__aeabi_dsub>
 800bac0:	4602      	mov	r2, r0
 800bac2:	460b      	mov	r3, r1
 800bac4:	4610      	mov	r0, r2
 800bac6:	4619      	mov	r1, r3
 800bac8:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800bacc:	f7f4 feb0 	bl	8000830 <__aeabi_ddiv>
 800bad0:	4602      	mov	r2, r0
 800bad2:	460b      	mov	r3, r1
 800bad4:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
      atmp = 1.0 / (atmp - beta1);
 800bad8:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800badc:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 800bae0:	f7f4 fbc4 	bl	800026c <__aeabi_dsub>
 800bae4:	4602      	mov	r2, r0
 800bae6:	460b      	mov	r3, r1
 800bae8:	f04f 0000 	mov.w	r0, #0
 800baec:	4985      	ldr	r1, [pc, #532]	; (800bd04 <qr_DvOBrgQi+0x440>)
 800baee:	f7f4 fe9f 	bl	8000830 <__aeabi_ddiv>
 800baf2:	4602      	mov	r2, r0
 800baf4:	460b      	mov	r3, r1
 800baf6:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      for (b_coltop = 1; b_coltop < 6; b_coltop++) {
 800bafa:	2301      	movs	r3, #1
 800bafc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800bb00:	e01e      	b.n	800bb40 <qr_DvOBrgQi+0x27c>
        b_A[b_coltop] *= atmp;
 800bb02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bb06:	00db      	lsls	r3, r3, #3
 800bb08:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800bb0c:	4413      	add	r3, r2
 800bb0e:	3bd0      	subs	r3, #208	; 0xd0
 800bb10:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bb14:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 800bb18:	f7f4 fd60 	bl	80005dc <__aeabi_dmul>
 800bb1c:	4602      	mov	r2, r0
 800bb1e:	460b      	mov	r3, r1
 800bb20:	4610      	mov	r0, r2
 800bb22:	4619      	mov	r1, r3
 800bb24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bb28:	00db      	lsls	r3, r3, #3
 800bb2a:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800bb2e:	4413      	add	r3, r2
 800bb30:	3bd0      	subs	r3, #208	; 0xd0
 800bb32:	e9c3 0100 	strd	r0, r1, [r3]
      for (b_coltop = 1; b_coltop < 6; b_coltop++) {
 800bb36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bb3a:	3301      	adds	r3, #1
 800bb3c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800bb40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bb44:	2b05      	cmp	r3, #5
 800bb46:	dddc      	ble.n	800bb02 <qr_DvOBrgQi+0x23e>
      }

      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 800bb48:	2300      	movs	r3, #0
 800bb4a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800bb4e:	e010      	b.n	800bb72 <qr_DvOBrgQi+0x2ae>
        beta1 *= 1.0020841800044864E-292;
 800bb50:	f04f 0200 	mov.w	r2, #0
 800bb54:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800bb58:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800bb5c:	f7f4 fd3e 	bl	80005dc <__aeabi_dmul>
 800bb60:	4602      	mov	r2, r0
 800bb62:	460b      	mov	r3, r1
 800bb64:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 800bb68:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bb6c:	3301      	adds	r3, #1
 800bb6e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800bb72:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800bb76:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800bb7a:	429a      	cmp	r2, r3
 800bb7c:	dbe8      	blt.n	800bb50 <qr_DvOBrgQi+0x28c>
      }

      atmp = beta1;
 800bb7e:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800bb82:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
 800bb86:	e04d      	b.n	800bc24 <qr_DvOBrgQi+0x360>
    } else {
      tau_idx_0 = (beta1 - b_A[0]) / beta1;
 800bb88:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800bb8c:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800bb90:	f7f4 fb6c 	bl	800026c <__aeabi_dsub>
 800bb94:	4602      	mov	r2, r0
 800bb96:	460b      	mov	r3, r1
 800bb98:	4610      	mov	r0, r2
 800bb9a:	4619      	mov	r1, r3
 800bb9c:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800bba0:	f7f4 fe46 	bl	8000830 <__aeabi_ddiv>
 800bba4:	4602      	mov	r2, r0
 800bba6:	460b      	mov	r3, r1
 800bba8:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
      atmp = 1.0 / (b_A[0] - beta1);
 800bbac:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800bbb0:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800bbb4:	f7f4 fb5a 	bl	800026c <__aeabi_dsub>
 800bbb8:	4602      	mov	r2, r0
 800bbba:	460b      	mov	r3, r1
 800bbbc:	f04f 0000 	mov.w	r0, #0
 800bbc0:	4950      	ldr	r1, [pc, #320]	; (800bd04 <qr_DvOBrgQi+0x440>)
 800bbc2:	f7f4 fe35 	bl	8000830 <__aeabi_ddiv>
 800bbc6:	4602      	mov	r2, r0
 800bbc8:	460b      	mov	r3, r1
 800bbca:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      for (c_lastc = 1; c_lastc < 6; c_lastc++) {
 800bbce:	2301      	movs	r3, #1
 800bbd0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800bbd4:	e01e      	b.n	800bc14 <qr_DvOBrgQi+0x350>
        b_A[c_lastc] *= atmp;
 800bbd6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bbda:	00db      	lsls	r3, r3, #3
 800bbdc:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800bbe0:	4413      	add	r3, r2
 800bbe2:	3bd0      	subs	r3, #208	; 0xd0
 800bbe4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bbe8:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 800bbec:	f7f4 fcf6 	bl	80005dc <__aeabi_dmul>
 800bbf0:	4602      	mov	r2, r0
 800bbf2:	460b      	mov	r3, r1
 800bbf4:	4610      	mov	r0, r2
 800bbf6:	4619      	mov	r1, r3
 800bbf8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bbfc:	00db      	lsls	r3, r3, #3
 800bbfe:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800bc02:	4413      	add	r3, r2
 800bc04:	3bd0      	subs	r3, #208	; 0xd0
 800bc06:	e9c3 0100 	strd	r0, r1, [r3]
      for (c_lastc = 1; c_lastc < 6; c_lastc++) {
 800bc0a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bc0e:	3301      	adds	r3, #1
 800bc10:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800bc14:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bc18:	2b05      	cmp	r3, #5
 800bc1a:	dddc      	ble.n	800bbd6 <qr_DvOBrgQi+0x312>
      }

      atmp = beta1;
 800bc1c:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800bc20:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
    }
  }

  b_A[0] = 1.0;
 800bc24:	f04f 0200 	mov.w	r2, #0
 800bc28:	4b36      	ldr	r3, [pc, #216]	; (800bd04 <qr_DvOBrgQi+0x440>)
 800bc2a:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
  if (tau_idx_0 != 0.0) {
 800bc2e:	f04f 0200 	mov.w	r2, #0
 800bc32:	f04f 0300 	mov.w	r3, #0
 800bc36:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 800bc3a:	f7f4 ff37 	bl	8000aac <__aeabi_dcmpeq>
 800bc3e:	4603      	mov	r3, r0
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	f040 8083 	bne.w	800bd4c <qr_DvOBrgQi+0x488>
    knt = 6;
 800bc46:	2306      	movs	r3, #6
 800bc48:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    c_lastc = 5;
 800bc4c:	2305      	movs	r3, #5
 800bc4e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    while ((knt > 0) && (b_A[c_lastc] == 0.0)) {
 800bc52:	e009      	b.n	800bc68 <qr_DvOBrgQi+0x3a4>
      knt--;
 800bc54:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800bc58:	3b01      	subs	r3, #1
 800bc5a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
      c_lastc--;
 800bc5e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bc62:	3b01      	subs	r3, #1
 800bc64:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    while ((knt > 0) && (b_A[c_lastc] == 0.0)) {
 800bc68:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	dd11      	ble.n	800bc94 <qr_DvOBrgQi+0x3d0>
 800bc70:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bc74:	00db      	lsls	r3, r3, #3
 800bc76:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800bc7a:	4413      	add	r3, r2
 800bc7c:	3bd0      	subs	r3, #208	; 0xd0
 800bc7e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bc82:	f04f 0200 	mov.w	r2, #0
 800bc86:	f04f 0300 	mov.w	r3, #0
 800bc8a:	f7f4 ff0f 	bl	8000aac <__aeabi_dcmpeq>
 800bc8e:	4603      	mov	r3, r0
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d1df      	bne.n	800bc54 <qr_DvOBrgQi+0x390>
    }

    c_lastc = 2;
 800bc94:	2302      	movs	r3, #2
 800bc96:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    exitg2 = false;
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
    while ((!exitg2) && (c_lastc > 0)) {
 800bca0:	e04b      	b.n	800bd3a <qr_DvOBrgQi+0x476>
      b_coltop = (c_lastc - 1) * 6 + 6;
 800bca2:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800bca6:	4613      	mov	r3, r2
 800bca8:	005b      	lsls	r3, r3, #1
 800bcaa:	4413      	add	r3, r2
 800bcac:	005b      	lsls	r3, r3, #1
 800bcae:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
      coltop = b_coltop;
 800bcb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bcb6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
      do {
        exitg1 = 0;
 800bcba:	2300      	movs	r3, #0
 800bcbc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        if (coltop + 1 <= b_coltop + knt) {
 800bcc0:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800bcc4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800bcc8:	441a      	add	r2, r3
 800bcca:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800bcce:	4293      	cmp	r3, r2
 800bcd0:	da20      	bge.n	800bd14 <qr_DvOBrgQi+0x450>
          if (b_A[coltop] != 0.0) {
 800bcd2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800bcd6:	00db      	lsls	r3, r3, #3
 800bcd8:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800bcdc:	4413      	add	r3, r2
 800bcde:	3bd0      	subs	r3, #208	; 0xd0
 800bce0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bce4:	f04f 0200 	mov.w	r2, #0
 800bce8:	f04f 0300 	mov.w	r3, #0
 800bcec:	f7f4 fede 	bl	8000aac <__aeabi_dcmpeq>
 800bcf0:	4603      	mov	r3, r0
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d108      	bne.n	800bd08 <qr_DvOBrgQi+0x444>
            exitg1 = 1;
 800bcf6:	2301      	movs	r3, #1
 800bcf8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800bcfc:	e012      	b.n	800bd24 <qr_DvOBrgQi+0x460>
 800bcfe:	bf00      	nop
 800bd00:	7c900000 	.word	0x7c900000
 800bd04:	3ff00000 	.word	0x3ff00000
          } else {
            coltop++;
 800bd08:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800bd0c:	3301      	adds	r3, #1
 800bd0e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800bd12:	e007      	b.n	800bd24 <qr_DvOBrgQi+0x460>
          }
        } else {
          c_lastc--;
 800bd14:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bd18:	3b01      	subs	r3, #1
 800bd1a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
          exitg1 = 2;
 800bd1e:	2302      	movs	r3, #2
 800bd20:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        }
      } while (exitg1 == 0);
 800bd24:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d0c6      	beq.n	800bcba <qr_DvOBrgQi+0x3f6>

      if (exitg1 == 1) {
 800bd2c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800bd30:	2b01      	cmp	r3, #1
 800bd32:	d102      	bne.n	800bd3a <qr_DvOBrgQi+0x476>
        exitg2 = true;
 800bd34:	2301      	movs	r3, #1
 800bd36:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
    while ((!exitg2) && (c_lastc > 0)) {
 800bd3a:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d10a      	bne.n	800bd58 <qr_DvOBrgQi+0x494>
 800bd42:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	dcab      	bgt.n	800bca2 <qr_DvOBrgQi+0x3de>
 800bd4a:	e005      	b.n	800bd58 <qr_DvOBrgQi+0x494>
      }
    }
  } else {
    knt = 0;
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    c_lastc = 0;
 800bd52:	2300      	movs	r3, #0
 800bd54:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }

  if (knt > 0) {
 800bd58:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	dd29      	ble.n	800bdb4 <qr_DvOBrgQi+0x4f0>
    xgemv_NQlWbt2i(knt, c_lastc, b_A, 7, b_A, 1, work);
 800bd60:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800bd64:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800bd68:	9302      	str	r3, [sp, #8]
 800bd6a:	2301      	movs	r3, #1
 800bd6c:	9301      	str	r3, [sp, #4]
 800bd6e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800bd72:	9300      	str	r3, [sp, #0]
 800bd74:	2307      	movs	r3, #7
 800bd76:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 800bd7a:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800bd7e:	f003 f943 	bl	800f008 <xgemv_NQlWbt2i>
    xgerc_R09LiDgJ(knt, c_lastc, -tau_idx_0, 1, work, b_A, 7);
 800bd82:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800bd86:	653b      	str	r3, [r7, #80]	; 0x50
 800bd88:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800bd8c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800bd90:	657b      	str	r3, [r7, #84]	; 0x54
 800bd92:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800bd96:	2307      	movs	r3, #7
 800bd98:	9301      	str	r3, [sp, #4]
 800bd9a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800bd9e:	9300      	str	r3, [sp, #0]
 800bda0:	4613      	mov	r3, r2
 800bda2:	2201      	movs	r2, #1
 800bda4:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 800bda8:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 800bdac:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800bdb0:	f003 fa38 	bl	800f224 <xgerc_R09LiDgJ>
  }

  b_A[0] = atmp;
 800bdb4:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 800bdb8:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
  atmp = b_A[7];
 800bdbc:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 800bdc0:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
  tau_idx_1 = 0.0;
 800bdc4:	f04f 0200 	mov.w	r2, #0
 800bdc8:	f04f 0300 	mov.w	r3, #0
 800bdcc:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
  beta1 = xnrm2_nLdASVZH(4, b_A, 9);
 800bdd0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800bdd4:	2209      	movs	r2, #9
 800bdd6:	4619      	mov	r1, r3
 800bdd8:	2004      	movs	r0, #4
 800bdda:	f003 fd33 	bl	800f844 <xnrm2_nLdASVZH>
 800bdde:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
  if (beta1 != 0.0) {
 800bde2:	f04f 0200 	mov.w	r2, #0
 800bde6:	f04f 0300 	mov.w	r3, #0
 800bdea:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800bdee:	f7f4 fe5d 	bl	8000aac <__aeabi_dcmpeq>
 800bdf2:	4603      	mov	r3, r0
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	f040 8174 	bne.w	800c0e2 <qr_DvOBrgQi+0x81e>
    beta1 = rt_hypotd_snf(b_A[7], beta1);
 800bdfa:	ed97 7b30 	vldr	d7, [r7, #192]	; 0xc0
 800bdfe:	ed97 1b52 	vldr	d1, [r7, #328]	; 0x148
 800be02:	eeb0 0a47 	vmov.f32	s0, s14
 800be06:	eef0 0a67 	vmov.f32	s1, s15
 800be0a:	f001 f835 	bl	800ce78 <rt_hypotd_snf>
 800be0e:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
    if (b_A[7] >= 0.0) {
 800be12:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800be16:	f04f 0200 	mov.w	r2, #0
 800be1a:	f04f 0300 	mov.w	r3, #0
 800be1e:	f7f4 fe63 	bl	8000ae8 <__aeabi_dcmpge>
 800be22:	4603      	mov	r3, r0
 800be24:	2b00      	cmp	r3, #0
 800be26:	d009      	beq.n	800be3c <qr_DvOBrgQi+0x578>
      beta1 = -beta1;
 800be28:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800be2c:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800be30:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800be34:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800be38:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    }

    if (fabs(beta1) < 1.0020841800044864E-292) {
 800be3c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800be40:	64bb      	str	r3, [r7, #72]	; 0x48
 800be42:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800be46:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800be4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800be4c:	f04f 0200 	mov.w	r2, #0
 800be50:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800be54:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800be58:	f7f4 fe32 	bl	8000ac0 <__aeabi_dcmplt>
 800be5c:	4603      	mov	r3, r0
 800be5e:	2b00      	cmp	r3, #0
 800be60:	f000 80f1 	beq.w	800c046 <qr_DvOBrgQi+0x782>
      knt = 0;
 800be64:	2300      	movs	r3, #0
 800be66:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
      do {
        knt++;
 800be6a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800be6e:	3301      	adds	r3, #1
 800be70:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        for (b_coltop = 8; b_coltop < 12; b_coltop++) {
 800be74:	2308      	movs	r3, #8
 800be76:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800be7a:	e01f      	b.n	800bebc <qr_DvOBrgQi+0x5f8>
          b_A[b_coltop] *= 9.9792015476736E+291;
 800be7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800be80:	00db      	lsls	r3, r3, #3
 800be82:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800be86:	4413      	add	r3, r2
 800be88:	3bd0      	subs	r3, #208	; 0xd0
 800be8a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800be8e:	f04f 0200 	mov.w	r2, #0
 800be92:	4bc6      	ldr	r3, [pc, #792]	; (800c1ac <qr_DvOBrgQi+0x8e8>)
 800be94:	f7f4 fba2 	bl	80005dc <__aeabi_dmul>
 800be98:	4602      	mov	r2, r0
 800be9a:	460b      	mov	r3, r1
 800be9c:	4610      	mov	r0, r2
 800be9e:	4619      	mov	r1, r3
 800bea0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bea4:	00db      	lsls	r3, r3, #3
 800bea6:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800beaa:	4413      	add	r3, r2
 800beac:	3bd0      	subs	r3, #208	; 0xd0
 800beae:	e9c3 0100 	strd	r0, r1, [r3]
        for (b_coltop = 8; b_coltop < 12; b_coltop++) {
 800beb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800beb6:	3301      	adds	r3, #1
 800beb8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800bebc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bec0:	2b0b      	cmp	r3, #11
 800bec2:	dddb      	ble.n	800be7c <qr_DvOBrgQi+0x5b8>
        }

        beta1 *= 9.9792015476736E+291;
 800bec4:	f04f 0200 	mov.w	r2, #0
 800bec8:	4bb8      	ldr	r3, [pc, #736]	; (800c1ac <qr_DvOBrgQi+0x8e8>)
 800beca:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800bece:	f7f4 fb85 	bl	80005dc <__aeabi_dmul>
 800bed2:	4602      	mov	r2, r0
 800bed4:	460b      	mov	r3, r1
 800bed6:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
        atmp *= 9.9792015476736E+291;
 800beda:	f04f 0200 	mov.w	r2, #0
 800bede:	4bb3      	ldr	r3, [pc, #716]	; (800c1ac <qr_DvOBrgQi+0x8e8>)
 800bee0:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 800bee4:	f7f4 fb7a 	bl	80005dc <__aeabi_dmul>
 800bee8:	4602      	mov	r2, r0
 800beea:	460b      	mov	r3, r1
 800beec:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      } while ((fabs(beta1) < 1.0020841800044864E-292) && (knt < 20));
 800bef0:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800bef4:	643b      	str	r3, [r7, #64]	; 0x40
 800bef6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800befa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800befe:	647b      	str	r3, [r7, #68]	; 0x44
 800bf00:	f04f 0200 	mov.w	r2, #0
 800bf04:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800bf08:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800bf0c:	f7f4 fdd8 	bl	8000ac0 <__aeabi_dcmplt>
 800bf10:	4603      	mov	r3, r0
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d003      	beq.n	800bf1e <qr_DvOBrgQi+0x65a>
 800bf16:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800bf1a:	2b13      	cmp	r3, #19
 800bf1c:	dda5      	ble.n	800be6a <qr_DvOBrgQi+0x5a6>

      beta1 = rt_hypotd_snf(atmp, xnrm2_nLdASVZH(4, b_A, 9));
 800bf1e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800bf22:	2209      	movs	r2, #9
 800bf24:	4619      	mov	r1, r3
 800bf26:	2004      	movs	r0, #4
 800bf28:	f003 fc8c 	bl	800f844 <xnrm2_nLdASVZH>
 800bf2c:	eeb0 7a40 	vmov.f32	s14, s0
 800bf30:	eef0 7a60 	vmov.f32	s15, s1
 800bf34:	eeb0 1a47 	vmov.f32	s2, s14
 800bf38:	eef0 1a67 	vmov.f32	s3, s15
 800bf3c:	ed97 0b54 	vldr	d0, [r7, #336]	; 0x150
 800bf40:	f000 ff9a 	bl	800ce78 <rt_hypotd_snf>
 800bf44:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
      if (atmp >= 0.0) {
 800bf48:	f04f 0200 	mov.w	r2, #0
 800bf4c:	f04f 0300 	mov.w	r3, #0
 800bf50:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 800bf54:	f7f4 fdc8 	bl	8000ae8 <__aeabi_dcmpge>
 800bf58:	4603      	mov	r3, r0
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d009      	beq.n	800bf72 <qr_DvOBrgQi+0x6ae>
        beta1 = -beta1;
 800bf5e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800bf62:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800bf66:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800bf6a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800bf6e:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
      }

      tau_idx_1 = (beta1 - atmp) / beta1;
 800bf72:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 800bf76:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800bf7a:	f7f4 f977 	bl	800026c <__aeabi_dsub>
 800bf7e:	4602      	mov	r2, r0
 800bf80:	460b      	mov	r3, r1
 800bf82:	4610      	mov	r0, r2
 800bf84:	4619      	mov	r1, r3
 800bf86:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800bf8a:	f7f4 fc51 	bl	8000830 <__aeabi_ddiv>
 800bf8e:	4602      	mov	r2, r0
 800bf90:	460b      	mov	r3, r1
 800bf92:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
      atmp = 1.0 / (atmp - beta1);
 800bf96:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800bf9a:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 800bf9e:	f7f4 f965 	bl	800026c <__aeabi_dsub>
 800bfa2:	4602      	mov	r2, r0
 800bfa4:	460b      	mov	r3, r1
 800bfa6:	f04f 0000 	mov.w	r0, #0
 800bfaa:	4981      	ldr	r1, [pc, #516]	; (800c1b0 <qr_DvOBrgQi+0x8ec>)
 800bfac:	f7f4 fc40 	bl	8000830 <__aeabi_ddiv>
 800bfb0:	4602      	mov	r2, r0
 800bfb2:	460b      	mov	r3, r1
 800bfb4:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      for (b_coltop = 8; b_coltop < 12; b_coltop++) {
 800bfb8:	2308      	movs	r3, #8
 800bfba:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800bfbe:	e01e      	b.n	800bffe <qr_DvOBrgQi+0x73a>
        b_A[b_coltop] *= atmp;
 800bfc0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bfc4:	00db      	lsls	r3, r3, #3
 800bfc6:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800bfca:	4413      	add	r3, r2
 800bfcc:	3bd0      	subs	r3, #208	; 0xd0
 800bfce:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bfd2:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 800bfd6:	f7f4 fb01 	bl	80005dc <__aeabi_dmul>
 800bfda:	4602      	mov	r2, r0
 800bfdc:	460b      	mov	r3, r1
 800bfde:	4610      	mov	r0, r2
 800bfe0:	4619      	mov	r1, r3
 800bfe2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bfe6:	00db      	lsls	r3, r3, #3
 800bfe8:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800bfec:	4413      	add	r3, r2
 800bfee:	3bd0      	subs	r3, #208	; 0xd0
 800bff0:	e9c3 0100 	strd	r0, r1, [r3]
      for (b_coltop = 8; b_coltop < 12; b_coltop++) {
 800bff4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bff8:	3301      	adds	r3, #1
 800bffa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800bffe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c002:	2b0b      	cmp	r3, #11
 800c004:	dddc      	ble.n	800bfc0 <qr_DvOBrgQi+0x6fc>
      }

      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 800c006:	2300      	movs	r3, #0
 800c008:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800c00c:	e010      	b.n	800c030 <qr_DvOBrgQi+0x76c>
        beta1 *= 1.0020841800044864E-292;
 800c00e:	f04f 0200 	mov.w	r2, #0
 800c012:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800c016:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800c01a:	f7f4 fadf 	bl	80005dc <__aeabi_dmul>
 800c01e:	4602      	mov	r2, r0
 800c020:	460b      	mov	r3, r1
 800c022:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 800c026:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c02a:	3301      	adds	r3, #1
 800c02c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800c030:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800c034:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800c038:	429a      	cmp	r2, r3
 800c03a:	dbe8      	blt.n	800c00e <qr_DvOBrgQi+0x74a>
      }

      atmp = beta1;
 800c03c:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800c040:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
 800c044:	e04d      	b.n	800c0e2 <qr_DvOBrgQi+0x81e>
    } else {
      tau_idx_1 = (beta1 - b_A[7]) / beta1;
 800c046:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 800c04a:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800c04e:	f7f4 f90d 	bl	800026c <__aeabi_dsub>
 800c052:	4602      	mov	r2, r0
 800c054:	460b      	mov	r3, r1
 800c056:	4610      	mov	r0, r2
 800c058:	4619      	mov	r1, r3
 800c05a:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800c05e:	f7f4 fbe7 	bl	8000830 <__aeabi_ddiv>
 800c062:	4602      	mov	r2, r0
 800c064:	460b      	mov	r3, r1
 800c066:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
      atmp = 1.0 / (b_A[7] - beta1);
 800c06a:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800c06e:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800c072:	f7f4 f8fb 	bl	800026c <__aeabi_dsub>
 800c076:	4602      	mov	r2, r0
 800c078:	460b      	mov	r3, r1
 800c07a:	f04f 0000 	mov.w	r0, #0
 800c07e:	494c      	ldr	r1, [pc, #304]	; (800c1b0 <qr_DvOBrgQi+0x8ec>)
 800c080:	f7f4 fbd6 	bl	8000830 <__aeabi_ddiv>
 800c084:	4602      	mov	r2, r0
 800c086:	460b      	mov	r3, r1
 800c088:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      for (c_lastc = 8; c_lastc < 12; c_lastc++) {
 800c08c:	2308      	movs	r3, #8
 800c08e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800c092:	e01e      	b.n	800c0d2 <qr_DvOBrgQi+0x80e>
        b_A[c_lastc] *= atmp;
 800c094:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c098:	00db      	lsls	r3, r3, #3
 800c09a:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800c09e:	4413      	add	r3, r2
 800c0a0:	3bd0      	subs	r3, #208	; 0xd0
 800c0a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c0a6:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 800c0aa:	f7f4 fa97 	bl	80005dc <__aeabi_dmul>
 800c0ae:	4602      	mov	r2, r0
 800c0b0:	460b      	mov	r3, r1
 800c0b2:	4610      	mov	r0, r2
 800c0b4:	4619      	mov	r1, r3
 800c0b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c0ba:	00db      	lsls	r3, r3, #3
 800c0bc:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800c0c0:	4413      	add	r3, r2
 800c0c2:	3bd0      	subs	r3, #208	; 0xd0
 800c0c4:	e9c3 0100 	strd	r0, r1, [r3]
      for (c_lastc = 8; c_lastc < 12; c_lastc++) {
 800c0c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c0cc:	3301      	adds	r3, #1
 800c0ce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800c0d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c0d6:	2b0b      	cmp	r3, #11
 800c0d8:	dddc      	ble.n	800c094 <qr_DvOBrgQi+0x7d0>
      }

      atmp = beta1;
 800c0da:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800c0de:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
    }
  }

  b_A[7] = 1.0;
 800c0e2:	f04f 0200 	mov.w	r2, #0
 800c0e6:	4b32      	ldr	r3, [pc, #200]	; (800c1b0 <qr_DvOBrgQi+0x8ec>)
 800c0e8:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
  if (tau_idx_1 != 0.0) {
 800c0ec:	f04f 0200 	mov.w	r2, #0
 800c0f0:	f04f 0300 	mov.w	r3, #0
 800c0f4:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 800c0f8:	f7f4 fcd8 	bl	8000aac <__aeabi_dcmpeq>
 800c0fc:	4603      	mov	r3, r0
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d163      	bne.n	800c1ca <qr_DvOBrgQi+0x906>
    knt = 5;
 800c102:	2305      	movs	r3, #5
 800c104:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    c_lastc = 11;
 800c108:	230b      	movs	r3, #11
 800c10a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    while ((knt > 0) && (b_A[c_lastc] == 0.0)) {
 800c10e:	e009      	b.n	800c124 <qr_DvOBrgQi+0x860>
      knt--;
 800c110:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800c114:	3b01      	subs	r3, #1
 800c116:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
      c_lastc--;
 800c11a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c11e:	3b01      	subs	r3, #1
 800c120:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    while ((knt > 0) && (b_A[c_lastc] == 0.0)) {
 800c124:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800c128:	2b00      	cmp	r3, #0
 800c12a:	dd11      	ble.n	800c150 <qr_DvOBrgQi+0x88c>
 800c12c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c130:	00db      	lsls	r3, r3, #3
 800c132:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800c136:	4413      	add	r3, r2
 800c138:	3bd0      	subs	r3, #208	; 0xd0
 800c13a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c13e:	f04f 0200 	mov.w	r2, #0
 800c142:	f04f 0300 	mov.w	r3, #0
 800c146:	f7f4 fcb1 	bl	8000aac <__aeabi_dcmpeq>
 800c14a:	4603      	mov	r3, r0
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d1df      	bne.n	800c110 <qr_DvOBrgQi+0x84c>
    }

    c_lastc = 1;
 800c150:	2301      	movs	r3, #1
 800c152:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    coltop = 13;
 800c156:	230d      	movs	r3, #13
 800c158:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    do {
      exitg1 = 0;
 800c15c:	2300      	movs	r3, #0
 800c15e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
      if (coltop + 1 <= knt + 13) {
 800c162:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800c166:	f103 020c 	add.w	r2, r3, #12
 800c16a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800c16e:	4293      	cmp	r3, r2
 800c170:	dc20      	bgt.n	800c1b4 <qr_DvOBrgQi+0x8f0>
        if (b_A[coltop] != 0.0) {
 800c172:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800c176:	00db      	lsls	r3, r3, #3
 800c178:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800c17c:	4413      	add	r3, r2
 800c17e:	3bd0      	subs	r3, #208	; 0xd0
 800c180:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c184:	f04f 0200 	mov.w	r2, #0
 800c188:	f04f 0300 	mov.w	r3, #0
 800c18c:	f7f4 fc8e 	bl	8000aac <__aeabi_dcmpeq>
 800c190:	4603      	mov	r3, r0
 800c192:	2b00      	cmp	r3, #0
 800c194:	d103      	bne.n	800c19e <qr_DvOBrgQi+0x8da>
          exitg1 = 1;
 800c196:	2301      	movs	r3, #1
 800c198:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800c19c:	e010      	b.n	800c1c0 <qr_DvOBrgQi+0x8fc>
        } else {
          coltop++;
 800c19e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800c1a2:	3301      	adds	r3, #1
 800c1a4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800c1a8:	e00a      	b.n	800c1c0 <qr_DvOBrgQi+0x8fc>
 800c1aa:	bf00      	nop
 800c1ac:	7c900000 	.word	0x7c900000
 800c1b0:	3ff00000 	.word	0x3ff00000
        }
      } else {
        c_lastc = 0;
 800c1b4:	2300      	movs	r3, #0
 800c1b6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
        exitg1 = 1;
 800c1ba:	2301      	movs	r3, #1
 800c1bc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
      }
    } while (exitg1 == 0);
 800c1c0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d0c9      	beq.n	800c15c <qr_DvOBrgQi+0x898>
 800c1c8:	e005      	b.n	800c1d6 <qr_DvOBrgQi+0x912>
  } else {
    knt = 0;
 800c1ca:	2300      	movs	r3, #0
 800c1cc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    c_lastc = 0;
 800c1d0:	2300      	movs	r3, #0
 800c1d2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }

  if (knt > 0) {
 800c1d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	dd29      	ble.n	800c232 <qr_DvOBrgQi+0x96e>
    xgemv_NQlWbt2i(knt, c_lastc, b_A, 14, b_A, 8, work);
 800c1de:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800c1e2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800c1e6:	9302      	str	r3, [sp, #8]
 800c1e8:	2308      	movs	r3, #8
 800c1ea:	9301      	str	r3, [sp, #4]
 800c1ec:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800c1f0:	9300      	str	r3, [sp, #0]
 800c1f2:	230e      	movs	r3, #14
 800c1f4:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 800c1f8:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800c1fc:	f002 ff04 	bl	800f008 <xgemv_NQlWbt2i>
    xgerc_R09LiDgJ(knt, c_lastc, -tau_idx_1, 8, work, b_A, 14);
 800c200:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800c204:	63bb      	str	r3, [r7, #56]	; 0x38
 800c206:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800c20a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800c20e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c210:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800c214:	230e      	movs	r3, #14
 800c216:	9301      	str	r3, [sp, #4]
 800c218:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800c21c:	9300      	str	r3, [sp, #0]
 800c21e:	4613      	mov	r3, r2
 800c220:	2208      	movs	r2, #8
 800c222:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 800c226:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 800c22a:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800c22e:	f002 fff9 	bl	800f224 <xgerc_R09LiDgJ>
  }

  b_A[7] = atmp;
 800c232:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 800c236:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
  atmp = b_A[14];
 800c23a:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 800c23e:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
  tau_idx_2 = 0.0;
 800c242:	f04f 0200 	mov.w	r2, #0
 800c246:	f04f 0300 	mov.w	r3, #0
 800c24a:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
  beta1 = xnrm2_nLdASVZH(3, b_A, 16);
 800c24e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800c252:	2210      	movs	r2, #16
 800c254:	4619      	mov	r1, r3
 800c256:	2003      	movs	r0, #3
 800c258:	f003 faf4 	bl	800f844 <xnrm2_nLdASVZH>
 800c25c:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
  if (beta1 != 0.0) {
 800c260:	f04f 0200 	mov.w	r2, #0
 800c264:	f04f 0300 	mov.w	r3, #0
 800c268:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800c26c:	f7f4 fc1e 	bl	8000aac <__aeabi_dcmpeq>
 800c270:	4603      	mov	r3, r0
 800c272:	2b00      	cmp	r3, #0
 800c274:	f040 8170 	bne.w	800c558 <qr_DvOBrgQi+0xc94>
    beta1 = rt_hypotd_snf(b_A[14], beta1);
 800c278:	ed97 7b3e 	vldr	d7, [r7, #248]	; 0xf8
 800c27c:	ed97 1b52 	vldr	d1, [r7, #328]	; 0x148
 800c280:	eeb0 0a47 	vmov.f32	s0, s14
 800c284:	eef0 0a67 	vmov.f32	s1, s15
 800c288:	f000 fdf6 	bl	800ce78 <rt_hypotd_snf>
 800c28c:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
    if (b_A[14] >= 0.0) {
 800c290:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 800c294:	f04f 0200 	mov.w	r2, #0
 800c298:	f04f 0300 	mov.w	r3, #0
 800c29c:	f7f4 fc24 	bl	8000ae8 <__aeabi_dcmpge>
 800c2a0:	4603      	mov	r3, r0
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d009      	beq.n	800c2ba <qr_DvOBrgQi+0x9f6>
      beta1 = -beta1;
 800c2a6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c2aa:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800c2ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c2b2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800c2b6:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    }

    if (fabs(beta1) < 1.0020841800044864E-292) {
 800c2ba:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c2be:	633b      	str	r3, [r7, #48]	; 0x30
 800c2c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c2c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c2c8:	637b      	str	r3, [r7, #52]	; 0x34
 800c2ca:	f04f 0200 	mov.w	r2, #0
 800c2ce:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800c2d2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800c2d6:	f7f4 fbf3 	bl	8000ac0 <__aeabi_dcmplt>
 800c2da:	4603      	mov	r3, r0
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	f000 80ef 	beq.w	800c4c0 <qr_DvOBrgQi+0xbfc>
      knt = 0;
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
      do {
        knt++;
 800c2e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800c2ec:	3301      	adds	r3, #1
 800c2ee:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        for (b_coltop = 15; b_coltop < 18; b_coltop++) {
 800c2f2:	230f      	movs	r3, #15
 800c2f4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800c2f8:	e01f      	b.n	800c33a <qr_DvOBrgQi+0xa76>
          b_A[b_coltop] *= 9.9792015476736E+291;
 800c2fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c2fe:	00db      	lsls	r3, r3, #3
 800c300:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800c304:	4413      	add	r3, r2
 800c306:	3bd0      	subs	r3, #208	; 0xd0
 800c308:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c30c:	f04f 0200 	mov.w	r2, #0
 800c310:	4bb5      	ldr	r3, [pc, #724]	; (800c5e8 <qr_DvOBrgQi+0xd24>)
 800c312:	f7f4 f963 	bl	80005dc <__aeabi_dmul>
 800c316:	4602      	mov	r2, r0
 800c318:	460b      	mov	r3, r1
 800c31a:	4610      	mov	r0, r2
 800c31c:	4619      	mov	r1, r3
 800c31e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c322:	00db      	lsls	r3, r3, #3
 800c324:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800c328:	4413      	add	r3, r2
 800c32a:	3bd0      	subs	r3, #208	; 0xd0
 800c32c:	e9c3 0100 	strd	r0, r1, [r3]
        for (b_coltop = 15; b_coltop < 18; b_coltop++) {
 800c330:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c334:	3301      	adds	r3, #1
 800c336:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800c33a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c33e:	2b11      	cmp	r3, #17
 800c340:	dddb      	ble.n	800c2fa <qr_DvOBrgQi+0xa36>
        }

        beta1 *= 9.9792015476736E+291;
 800c342:	f04f 0200 	mov.w	r2, #0
 800c346:	4ba8      	ldr	r3, [pc, #672]	; (800c5e8 <qr_DvOBrgQi+0xd24>)
 800c348:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800c34c:	f7f4 f946 	bl	80005dc <__aeabi_dmul>
 800c350:	4602      	mov	r2, r0
 800c352:	460b      	mov	r3, r1
 800c354:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
        atmp *= 9.9792015476736E+291;
 800c358:	f04f 0200 	mov.w	r2, #0
 800c35c:	4ba2      	ldr	r3, [pc, #648]	; (800c5e8 <qr_DvOBrgQi+0xd24>)
 800c35e:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 800c362:	f7f4 f93b 	bl	80005dc <__aeabi_dmul>
 800c366:	4602      	mov	r2, r0
 800c368:	460b      	mov	r3, r1
 800c36a:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      } while ((fabs(beta1) < 1.0020841800044864E-292) && (knt < 20));
 800c36e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c372:	62bb      	str	r3, [r7, #40]	; 0x28
 800c374:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c378:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c37c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c37e:	f04f 0200 	mov.w	r2, #0
 800c382:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800c386:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800c38a:	f7f4 fb99 	bl	8000ac0 <__aeabi_dcmplt>
 800c38e:	4603      	mov	r3, r0
 800c390:	2b00      	cmp	r3, #0
 800c392:	d003      	beq.n	800c39c <qr_DvOBrgQi+0xad8>
 800c394:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800c398:	2b13      	cmp	r3, #19
 800c39a:	dda5      	ble.n	800c2e8 <qr_DvOBrgQi+0xa24>

      beta1 = rt_hypotd_snf(atmp, xnrm2_nLdASVZH(3, b_A, 16));
 800c39c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800c3a0:	2210      	movs	r2, #16
 800c3a2:	4619      	mov	r1, r3
 800c3a4:	2003      	movs	r0, #3
 800c3a6:	f003 fa4d 	bl	800f844 <xnrm2_nLdASVZH>
 800c3aa:	eeb0 7a40 	vmov.f32	s14, s0
 800c3ae:	eef0 7a60 	vmov.f32	s15, s1
 800c3b2:	eeb0 1a47 	vmov.f32	s2, s14
 800c3b6:	eef0 1a67 	vmov.f32	s3, s15
 800c3ba:	ed97 0b54 	vldr	d0, [r7, #336]	; 0x150
 800c3be:	f000 fd5b 	bl	800ce78 <rt_hypotd_snf>
 800c3c2:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
      if (atmp >= 0.0) {
 800c3c6:	f04f 0200 	mov.w	r2, #0
 800c3ca:	f04f 0300 	mov.w	r3, #0
 800c3ce:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 800c3d2:	f7f4 fb89 	bl	8000ae8 <__aeabi_dcmpge>
 800c3d6:	4603      	mov	r3, r0
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d009      	beq.n	800c3f0 <qr_DvOBrgQi+0xb2c>
        beta1 = -beta1;
 800c3dc:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c3e0:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800c3e4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c3e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800c3ec:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
      }

      tau_idx_2 = (beta1 - atmp) / beta1;
 800c3f0:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 800c3f4:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800c3f8:	f7f3 ff38 	bl	800026c <__aeabi_dsub>
 800c3fc:	4602      	mov	r2, r0
 800c3fe:	460b      	mov	r3, r1
 800c400:	4610      	mov	r0, r2
 800c402:	4619      	mov	r1, r3
 800c404:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800c408:	f7f4 fa12 	bl	8000830 <__aeabi_ddiv>
 800c40c:	4602      	mov	r2, r0
 800c40e:	460b      	mov	r3, r1
 800c410:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
      atmp = 1.0 / (atmp - beta1);
 800c414:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800c418:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 800c41c:	f7f3 ff26 	bl	800026c <__aeabi_dsub>
 800c420:	4602      	mov	r2, r0
 800c422:	460b      	mov	r3, r1
 800c424:	f04f 0000 	mov.w	r0, #0
 800c428:	4970      	ldr	r1, [pc, #448]	; (800c5ec <qr_DvOBrgQi+0xd28>)
 800c42a:	f7f4 fa01 	bl	8000830 <__aeabi_ddiv>
 800c42e:	4602      	mov	r2, r0
 800c430:	460b      	mov	r3, r1
 800c432:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      for (b_coltop = 15; b_coltop < 18; b_coltop++) {
 800c436:	230f      	movs	r3, #15
 800c438:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800c43c:	e01c      	b.n	800c478 <qr_DvOBrgQi+0xbb4>
        b_A[b_coltop] *= atmp;
 800c43e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c442:	00db      	lsls	r3, r3, #3
 800c444:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800c448:	4413      	add	r3, r2
 800c44a:	3bd0      	subs	r3, #208	; 0xd0
 800c44c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c450:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 800c454:	f7f4 f8c2 	bl	80005dc <__aeabi_dmul>
 800c458:	4602      	mov	r2, r0
 800c45a:	460b      	mov	r3, r1
 800c45c:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 800c460:	00c9      	lsls	r1, r1, #3
 800c462:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 800c466:	4401      	add	r1, r0
 800c468:	39d0      	subs	r1, #208	; 0xd0
 800c46a:	e9c1 2300 	strd	r2, r3, [r1]
      for (b_coltop = 15; b_coltop < 18; b_coltop++) {
 800c46e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c472:	3301      	adds	r3, #1
 800c474:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800c478:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c47c:	2b11      	cmp	r3, #17
 800c47e:	ddde      	ble.n	800c43e <qr_DvOBrgQi+0xb7a>
      }

      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 800c480:	2300      	movs	r3, #0
 800c482:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800c486:	e010      	b.n	800c4aa <qr_DvOBrgQi+0xbe6>
        beta1 *= 1.0020841800044864E-292;
 800c488:	f04f 0200 	mov.w	r2, #0
 800c48c:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800c490:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800c494:	f7f4 f8a2 	bl	80005dc <__aeabi_dmul>
 800c498:	4602      	mov	r2, r0
 800c49a:	460b      	mov	r3, r1
 800c49c:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 800c4a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c4a4:	3301      	adds	r3, #1
 800c4a6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800c4aa:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800c4ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800c4b2:	429a      	cmp	r2, r3
 800c4b4:	dbe8      	blt.n	800c488 <qr_DvOBrgQi+0xbc4>
      }

      atmp = beta1;
 800c4b6:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800c4ba:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
 800c4be:	e04b      	b.n	800c558 <qr_DvOBrgQi+0xc94>
    } else {
      tau_idx_2 = (beta1 - b_A[14]) / beta1;
 800c4c0:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 800c4c4:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800c4c8:	f7f3 fed0 	bl	800026c <__aeabi_dsub>
 800c4cc:	4602      	mov	r2, r0
 800c4ce:	460b      	mov	r3, r1
 800c4d0:	4610      	mov	r0, r2
 800c4d2:	4619      	mov	r1, r3
 800c4d4:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800c4d8:	f7f4 f9aa 	bl	8000830 <__aeabi_ddiv>
 800c4dc:	4602      	mov	r2, r0
 800c4de:	460b      	mov	r3, r1
 800c4e0:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
      atmp = 1.0 / (b_A[14] - beta1);
 800c4e4:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 800c4e8:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800c4ec:	f7f3 febe 	bl	800026c <__aeabi_dsub>
 800c4f0:	4602      	mov	r2, r0
 800c4f2:	460b      	mov	r3, r1
 800c4f4:	f04f 0000 	mov.w	r0, #0
 800c4f8:	493c      	ldr	r1, [pc, #240]	; (800c5ec <qr_DvOBrgQi+0xd28>)
 800c4fa:	f7f4 f999 	bl	8000830 <__aeabi_ddiv>
 800c4fe:	4602      	mov	r2, r0
 800c500:	460b      	mov	r3, r1
 800c502:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      for (c_lastc = 15; c_lastc < 18; c_lastc++) {
 800c506:	230f      	movs	r3, #15
 800c508:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800c50c:	e01c      	b.n	800c548 <qr_DvOBrgQi+0xc84>
        b_A[c_lastc] *= atmp;
 800c50e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c512:	00db      	lsls	r3, r3, #3
 800c514:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800c518:	4413      	add	r3, r2
 800c51a:	3bd0      	subs	r3, #208	; 0xd0
 800c51c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c520:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 800c524:	f7f4 f85a 	bl	80005dc <__aeabi_dmul>
 800c528:	4602      	mov	r2, r0
 800c52a:	460b      	mov	r3, r1
 800c52c:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 800c530:	00c9      	lsls	r1, r1, #3
 800c532:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 800c536:	4401      	add	r1, r0
 800c538:	39d0      	subs	r1, #208	; 0xd0
 800c53a:	e9c1 2300 	strd	r2, r3, [r1]
      for (c_lastc = 15; c_lastc < 18; c_lastc++) {
 800c53e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c542:	3301      	adds	r3, #1
 800c544:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800c548:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c54c:	2b11      	cmp	r3, #17
 800c54e:	ddde      	ble.n	800c50e <qr_DvOBrgQi+0xc4a>
      }

      atmp = beta1;
 800c550:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800c554:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
    }
  }

  b_A[14] = atmp;
 800c558:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 800c55c:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
  R[0] = b_A[0];
 800c560:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800c564:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800c566:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 1; c_lastc + 1 < 4; c_lastc++) {
 800c56a:	2301      	movs	r3, #1
 800c56c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800c570:	e00f      	b.n	800c592 <qr_DvOBrgQi+0xcce>
    R[c_lastc] = 0.0;
 800c572:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c576:	00db      	lsls	r3, r3, #3
 800c578:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c57a:	18d1      	adds	r1, r2, r3
 800c57c:	f04f 0200 	mov.w	r2, #0
 800c580:	f04f 0300 	mov.w	r3, #0
 800c584:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 1; c_lastc + 1 < 4; c_lastc++) {
 800c588:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c58c:	3301      	adds	r3, #1
 800c58e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800c592:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c596:	2b02      	cmp	r3, #2
 800c598:	ddeb      	ble.n	800c572 <qr_DvOBrgQi+0xcae>
  }

  work[0] = 0.0;
 800c59a:	f04f 0200 	mov.w	r2, #0
 800c59e:	f04f 0300 	mov.w	r3, #0
 800c5a2:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  for (c_lastc = 0; c_lastc < 2; c_lastc++) {
 800c5a6:	2300      	movs	r3, #0
 800c5a8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800c5ac:	e016      	b.n	800c5dc <qr_DvOBrgQi+0xd18>
    R[c_lastc + 3] = b_A[c_lastc + 6];
 800c5ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c5b2:	3306      	adds	r3, #6
 800c5b4:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800c5b8:	3203      	adds	r2, #3
 800c5ba:	00d2      	lsls	r2, r2, #3
 800c5bc:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800c5be:	4411      	add	r1, r2
 800c5c0:	00db      	lsls	r3, r3, #3
 800c5c2:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800c5c6:	4413      	add	r3, r2
 800c5c8:	3bd0      	subs	r3, #208	; 0xd0
 800c5ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5ce:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 0; c_lastc < 2; c_lastc++) {
 800c5d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c5d6:	3301      	adds	r3, #1
 800c5d8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800c5dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c5e0:	2b01      	cmp	r3, #1
 800c5e2:	dde4      	ble.n	800c5ae <qr_DvOBrgQi+0xcea>
  }

  while (c_lastc + 1 < 4) {
 800c5e4:	e015      	b.n	800c612 <qr_DvOBrgQi+0xd4e>
 800c5e6:	bf00      	nop
 800c5e8:	7c900000 	.word	0x7c900000
 800c5ec:	3ff00000 	.word	0x3ff00000
    R[c_lastc + 3] = 0.0;
 800c5f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c5f4:	3303      	adds	r3, #3
 800c5f6:	00db      	lsls	r3, r3, #3
 800c5f8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c5fa:	18d1      	adds	r1, r2, r3
 800c5fc:	f04f 0200 	mov.w	r2, #0
 800c600:	f04f 0300 	mov.w	r3, #0
 800c604:	e9c1 2300 	strd	r2, r3, [r1]
    c_lastc++;
 800c608:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c60c:	3301      	adds	r3, #1
 800c60e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  while (c_lastc + 1 < 4) {
 800c612:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c616:	2b02      	cmp	r3, #2
 800c618:	ddea      	ble.n	800c5f0 <qr_DvOBrgQi+0xd2c>
  }

  work[1] = 0.0;
 800c61a:	f04f 0200 	mov.w	r2, #0
 800c61e:	f04f 0300 	mov.w	r3, #0
 800c622:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
  for (c_lastc = 0; c_lastc < 3; c_lastc++) {
 800c626:	2300      	movs	r3, #0
 800c628:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800c62c:	e016      	b.n	800c65c <qr_DvOBrgQi+0xd98>
    R[c_lastc + 6] = b_A[c_lastc + 12];
 800c62e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c632:	330c      	adds	r3, #12
 800c634:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800c638:	3206      	adds	r2, #6
 800c63a:	00d2      	lsls	r2, r2, #3
 800c63c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800c63e:	4411      	add	r1, r2
 800c640:	00db      	lsls	r3, r3, #3
 800c642:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800c646:	4413      	add	r3, r2
 800c648:	3bd0      	subs	r3, #208	; 0xd0
 800c64a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c64e:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 0; c_lastc < 3; c_lastc++) {
 800c652:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c656:	3301      	adds	r3, #1
 800c658:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800c65c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c660:	2b02      	cmp	r3, #2
 800c662:	dde4      	ble.n	800c62e <qr_DvOBrgQi+0xd6a>
  }

  work[2] = 0.0;
 800c664:	f04f 0200 	mov.w	r2, #0
 800c668:	f04f 0300 	mov.w	r3, #0
 800c66c:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
  for (b_coltop = 15; b_coltop < 18; b_coltop++) {
 800c670:	230f      	movs	r3, #15
 800c672:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800c676:	e024      	b.n	800c6c2 <qr_DvOBrgQi+0xdfe>
    b_A[b_coltop] *= -tau_idx_2;
 800c678:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c67c:	00db      	lsls	r3, r3, #3
 800c67e:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800c682:	4413      	add	r3, r2
 800c684:	3bd0      	subs	r3, #208	; 0xd0
 800c686:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c68a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c68e:	623b      	str	r3, [r7, #32]
 800c690:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800c694:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800c698:	627b      	str	r3, [r7, #36]	; 0x24
 800c69a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c69e:	f7f3 ff9d 	bl	80005dc <__aeabi_dmul>
 800c6a2:	4602      	mov	r2, r0
 800c6a4:	460b      	mov	r3, r1
 800c6a6:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 800c6aa:	00c9      	lsls	r1, r1, #3
 800c6ac:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 800c6b0:	4401      	add	r1, r0
 800c6b2:	39d0      	subs	r1, #208	; 0xd0
 800c6b4:	e9c1 2300 	strd	r2, r3, [r1]
  for (b_coltop = 15; b_coltop < 18; b_coltop++) {
 800c6b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c6bc:	3301      	adds	r3, #1
 800c6be:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800c6c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c6c6:	2b11      	cmp	r3, #17
 800c6c8:	ddd6      	ble.n	800c678 <qr_DvOBrgQi+0xdb4>
  }

  b_A[14] = 1.0 - tau_idx_2;
 800c6ca:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 800c6ce:	f04f 0000 	mov.w	r0, #0
 800c6d2:	49cc      	ldr	r1, [pc, #816]	; (800ca04 <qr_DvOBrgQi+0x1140>)
 800c6d4:	f7f3 fdca 	bl	800026c <__aeabi_dsub>
 800c6d8:	4602      	mov	r2, r0
 800c6da:	460b      	mov	r3, r1
 800c6dc:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
  for (c_lastc = 0; c_lastc < 2; c_lastc++) {
 800c6e0:	2300      	movs	r3, #0
 800c6e2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800c6e6:	e014      	b.n	800c712 <qr_DvOBrgQi+0xe4e>
    b_A[13 - c_lastc] = 0.0;
 800c6e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c6ec:	f1c3 030d 	rsb	r3, r3, #13
 800c6f0:	00db      	lsls	r3, r3, #3
 800c6f2:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800c6f6:	4413      	add	r3, r2
 800c6f8:	f1a3 01d0 	sub.w	r1, r3, #208	; 0xd0
 800c6fc:	f04f 0200 	mov.w	r2, #0
 800c700:	f04f 0300 	mov.w	r3, #0
 800c704:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 0; c_lastc < 2; c_lastc++) {
 800c708:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c70c:	3301      	adds	r3, #1
 800c70e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800c712:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c716:	2b01      	cmp	r3, #1
 800c718:	dde6      	ble.n	800c6e8 <qr_DvOBrgQi+0xe24>
  }

  b_A[7] = 1.0;
 800c71a:	f04f 0200 	mov.w	r2, #0
 800c71e:	4bb9      	ldr	r3, [pc, #740]	; (800ca04 <qr_DvOBrgQi+0x1140>)
 800c720:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
  if (tau_idx_1 != 0.0) {
 800c724:	f04f 0200 	mov.w	r2, #0
 800c728:	f04f 0300 	mov.w	r3, #0
 800c72c:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 800c730:	f7f4 f9bc 	bl	8000aac <__aeabi_dcmpeq>
 800c734:	4603      	mov	r3, r0
 800c736:	2b00      	cmp	r3, #0
 800c738:	d15f      	bne.n	800c7fa <qr_DvOBrgQi+0xf36>
    c_lastc = 5;
 800c73a:	2305      	movs	r3, #5
 800c73c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    b_coltop = 13;
 800c740:	230d      	movs	r3, #13
 800c742:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    while ((c_lastc > 0) && (b_A[b_coltop - 2] == 0.0)) {
 800c746:	e009      	b.n	800c75c <qr_DvOBrgQi+0xe98>
      c_lastc--;
 800c748:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c74c:	3b01      	subs	r3, #1
 800c74e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
      b_coltop--;
 800c752:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c756:	3b01      	subs	r3, #1
 800c758:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    while ((c_lastc > 0) && (b_A[b_coltop - 2] == 0.0)) {
 800c75c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c760:	2b00      	cmp	r3, #0
 800c762:	dd12      	ble.n	800c78a <qr_DvOBrgQi+0xec6>
 800c764:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c768:	3b02      	subs	r3, #2
 800c76a:	00db      	lsls	r3, r3, #3
 800c76c:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800c770:	4413      	add	r3, r2
 800c772:	3bd0      	subs	r3, #208	; 0xd0
 800c774:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c778:	f04f 0200 	mov.w	r2, #0
 800c77c:	f04f 0300 	mov.w	r3, #0
 800c780:	f7f4 f994 	bl	8000aac <__aeabi_dcmpeq>
 800c784:	4603      	mov	r3, r0
 800c786:	2b00      	cmp	r3, #0
 800c788:	d1de      	bne.n	800c748 <qr_DvOBrgQi+0xe84>
    }

    b_coltop = 1;
 800c78a:	2301      	movs	r3, #1
 800c78c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    knt = 14;
 800c790:	230e      	movs	r3, #14
 800c792:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    do {
      exitg1 = 0;
 800c796:	2300      	movs	r3, #0
 800c798:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
      if (knt <= c_lastc + 13) {
 800c79c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c7a0:	330d      	adds	r3, #13
 800c7a2:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800c7a6:	429a      	cmp	r2, r3
 800c7a8:	dc1c      	bgt.n	800c7e4 <qr_DvOBrgQi+0xf20>
        if (b_A[knt - 1] != 0.0) {
 800c7aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800c7ae:	3b01      	subs	r3, #1
 800c7b0:	00db      	lsls	r3, r3, #3
 800c7b2:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800c7b6:	4413      	add	r3, r2
 800c7b8:	3bd0      	subs	r3, #208	; 0xd0
 800c7ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c7be:	f04f 0200 	mov.w	r2, #0
 800c7c2:	f04f 0300 	mov.w	r3, #0
 800c7c6:	f7f4 f971 	bl	8000aac <__aeabi_dcmpeq>
 800c7ca:	4603      	mov	r3, r0
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d103      	bne.n	800c7d8 <qr_DvOBrgQi+0xf14>
          exitg1 = 1;
 800c7d0:	2301      	movs	r3, #1
 800c7d2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800c7d6:	e00b      	b.n	800c7f0 <qr_DvOBrgQi+0xf2c>
        } else {
          knt++;
 800c7d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800c7dc:	3301      	adds	r3, #1
 800c7de:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800c7e2:	e005      	b.n	800c7f0 <qr_DvOBrgQi+0xf2c>
        }
      } else {
        b_coltop = 0;
 800c7e4:	2300      	movs	r3, #0
 800c7e6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        exitg1 = 1;
 800c7ea:	2301      	movs	r3, #1
 800c7ec:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
      }
    } while (exitg1 == 0);
 800c7f0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d0ce      	beq.n	800c796 <qr_DvOBrgQi+0xed2>
 800c7f8:	e005      	b.n	800c806 <qr_DvOBrgQi+0xf42>
  } else {
    c_lastc = 0;
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    b_coltop = 0;
 800c800:	2300      	movs	r3, #0
 800c802:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  }

  if (c_lastc > 0) {
 800c806:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	dd29      	ble.n	800c862 <qr_DvOBrgQi+0xf9e>
    xgemv_NQlWbt2i(c_lastc, b_coltop, b_A, 14, b_A, 8, work);
 800c80e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800c812:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800c816:	9302      	str	r3, [sp, #8]
 800c818:	2308      	movs	r3, #8
 800c81a:	9301      	str	r3, [sp, #4]
 800c81c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800c820:	9300      	str	r3, [sp, #0]
 800c822:	230e      	movs	r3, #14
 800c824:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 800c828:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 800c82c:	f002 fbec 	bl	800f008 <xgemv_NQlWbt2i>
    xgerc_R09LiDgJ(c_lastc, b_coltop, -tau_idx_1, 8, work, b_A, 14);
 800c830:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800c834:	61bb      	str	r3, [r7, #24]
 800c836:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800c83a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800c83e:	61fb      	str	r3, [r7, #28]
 800c840:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800c844:	230e      	movs	r3, #14
 800c846:	9301      	str	r3, [sp, #4]
 800c848:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800c84c:	9300      	str	r3, [sp, #0]
 800c84e:	4613      	mov	r3, r2
 800c850:	2208      	movs	r2, #8
 800c852:	ed97 0b06 	vldr	d0, [r7, #24]
 800c856:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 800c85a:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 800c85e:	f002 fce1 	bl	800f224 <xgerc_R09LiDgJ>
  }

  for (b_coltop = 8; b_coltop < 12; b_coltop++) {
 800c862:	2308      	movs	r3, #8
 800c864:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800c868:	e024      	b.n	800c8b4 <qr_DvOBrgQi+0xff0>
    b_A[b_coltop] *= -tau_idx_1;
 800c86a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c86e:	00db      	lsls	r3, r3, #3
 800c870:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800c874:	4413      	add	r3, r2
 800c876:	3bd0      	subs	r3, #208	; 0xd0
 800c878:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c87c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800c880:	613b      	str	r3, [r7, #16]
 800c882:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800c886:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800c88a:	617b      	str	r3, [r7, #20]
 800c88c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800c890:	f7f3 fea4 	bl	80005dc <__aeabi_dmul>
 800c894:	4602      	mov	r2, r0
 800c896:	460b      	mov	r3, r1
 800c898:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 800c89c:	00c9      	lsls	r1, r1, #3
 800c89e:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 800c8a2:	4401      	add	r1, r0
 800c8a4:	39d0      	subs	r1, #208	; 0xd0
 800c8a6:	e9c1 2300 	strd	r2, r3, [r1]
  for (b_coltop = 8; b_coltop < 12; b_coltop++) {
 800c8aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c8ae:	3301      	adds	r3, #1
 800c8b0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800c8b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c8b8:	2b0b      	cmp	r3, #11
 800c8ba:	ddd6      	ble.n	800c86a <qr_DvOBrgQi+0xfa6>
  }

  b_A[7] = 1.0 - tau_idx_1;
 800c8bc:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800c8c0:	f04f 0000 	mov.w	r0, #0
 800c8c4:	494f      	ldr	r1, [pc, #316]	; (800ca04 <qr_DvOBrgQi+0x1140>)
 800c8c6:	f7f3 fcd1 	bl	800026c <__aeabi_dsub>
 800c8ca:	4602      	mov	r2, r0
 800c8cc:	460b      	mov	r3, r1
 800c8ce:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
  b_A[6] = 0.0;
 800c8d2:	f04f 0200 	mov.w	r2, #0
 800c8d6:	f04f 0300 	mov.w	r3, #0
 800c8da:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
  b_A[0] = 1.0;
 800c8de:	f04f 0200 	mov.w	r2, #0
 800c8e2:	4b48      	ldr	r3, [pc, #288]	; (800ca04 <qr_DvOBrgQi+0x1140>)
 800c8e4:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
  if (tau_idx_0 != 0.0) {
 800c8e8:	f04f 0200 	mov.w	r2, #0
 800c8ec:	f04f 0300 	mov.w	r3, #0
 800c8f0:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 800c8f4:	f7f4 f8da 	bl	8000aac <__aeabi_dcmpeq>
 800c8f8:	4603      	mov	r3, r0
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	f040 8084 	bne.w	800ca08 <qr_DvOBrgQi+0x1144>
    c_lastc = 6;
 800c900:	2306      	movs	r3, #6
 800c902:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    b_coltop = 7;
 800c906:	2307      	movs	r3, #7
 800c908:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    while ((c_lastc > 0) && (b_A[b_coltop - 2] == 0.0)) {
 800c90c:	e009      	b.n	800c922 <qr_DvOBrgQi+0x105e>
      c_lastc--;
 800c90e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c912:	3b01      	subs	r3, #1
 800c914:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
      b_coltop--;
 800c918:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c91c:	3b01      	subs	r3, #1
 800c91e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    while ((c_lastc > 0) && (b_A[b_coltop - 2] == 0.0)) {
 800c922:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c926:	2b00      	cmp	r3, #0
 800c928:	dd12      	ble.n	800c950 <qr_DvOBrgQi+0x108c>
 800c92a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c92e:	3b02      	subs	r3, #2
 800c930:	00db      	lsls	r3, r3, #3
 800c932:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800c936:	4413      	add	r3, r2
 800c938:	3bd0      	subs	r3, #208	; 0xd0
 800c93a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c93e:	f04f 0200 	mov.w	r2, #0
 800c942:	f04f 0300 	mov.w	r3, #0
 800c946:	f7f4 f8b1 	bl	8000aac <__aeabi_dcmpeq>
 800c94a:	4603      	mov	r3, r0
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d1de      	bne.n	800c90e <qr_DvOBrgQi+0x104a>
    }

    b_coltop = 2;
 800c950:	2302      	movs	r3, #2
 800c952:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    exitg2 = false;
 800c956:	2300      	movs	r3, #0
 800c958:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
    while ((!exitg2) && (b_coltop > 0)) {
 800c95c:	e049      	b.n	800c9f2 <qr_DvOBrgQi+0x112e>
      coltop = (b_coltop - 1) * 6 + 7;
 800c95e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c962:	1e5a      	subs	r2, r3, #1
 800c964:	4613      	mov	r3, r2
 800c966:	005b      	lsls	r3, r3, #1
 800c968:	4413      	add	r3, r2
 800c96a:	005b      	lsls	r3, r3, #1
 800c96c:	3307      	adds	r3, #7
 800c96e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
      knt = coltop;
 800c972:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800c976:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
      do {
        exitg1 = 0;
 800c97a:	2300      	movs	r3, #0
 800c97c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        if (knt <= (coltop + c_lastc) - 1) {
 800c980:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800c984:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c988:	4413      	add	r3, r2
 800c98a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800c98e:	429a      	cmp	r2, r3
 800c990:	da1c      	bge.n	800c9cc <qr_DvOBrgQi+0x1108>
          if (b_A[knt - 1] != 0.0) {
 800c992:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800c996:	3b01      	subs	r3, #1
 800c998:	00db      	lsls	r3, r3, #3
 800c99a:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800c99e:	4413      	add	r3, r2
 800c9a0:	3bd0      	subs	r3, #208	; 0xd0
 800c9a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c9a6:	f04f 0200 	mov.w	r2, #0
 800c9aa:	f04f 0300 	mov.w	r3, #0
 800c9ae:	f7f4 f87d 	bl	8000aac <__aeabi_dcmpeq>
 800c9b2:	4603      	mov	r3, r0
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d103      	bne.n	800c9c0 <qr_DvOBrgQi+0x10fc>
            exitg1 = 1;
 800c9b8:	2301      	movs	r3, #1
 800c9ba:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800c9be:	e00d      	b.n	800c9dc <qr_DvOBrgQi+0x1118>
          } else {
            knt++;
 800c9c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800c9c4:	3301      	adds	r3, #1
 800c9c6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800c9ca:	e007      	b.n	800c9dc <qr_DvOBrgQi+0x1118>
          }
        } else {
          b_coltop--;
 800c9cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c9d0:	3b01      	subs	r3, #1
 800c9d2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          exitg1 = 2;
 800c9d6:	2302      	movs	r3, #2
 800c9d8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        }
      } while (exitg1 == 0);
 800c9dc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d0ca      	beq.n	800c97a <qr_DvOBrgQi+0x10b6>

      if (exitg1 == 1) {
 800c9e4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800c9e8:	2b01      	cmp	r3, #1
 800c9ea:	d102      	bne.n	800c9f2 <qr_DvOBrgQi+0x112e>
        exitg2 = true;
 800c9ec:	2301      	movs	r3, #1
 800c9ee:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
    while ((!exitg2) && (b_coltop > 0)) {
 800c9f2:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d10c      	bne.n	800ca14 <qr_DvOBrgQi+0x1150>
 800c9fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	dcad      	bgt.n	800c95e <qr_DvOBrgQi+0x109a>
 800ca02:	e007      	b.n	800ca14 <qr_DvOBrgQi+0x1150>
 800ca04:	3ff00000 	.word	0x3ff00000
      }
    }
  } else {
    c_lastc = 0;
 800ca08:	2300      	movs	r3, #0
 800ca0a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    b_coltop = 0;
 800ca0e:	2300      	movs	r3, #0
 800ca10:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  }

  if (c_lastc > 0) {
 800ca14:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	dd29      	ble.n	800ca70 <qr_DvOBrgQi+0x11ac>
    xgemv_NQlWbt2i(c_lastc, b_coltop, b_A, 7, b_A, 1, work);
 800ca1c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800ca20:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800ca24:	9302      	str	r3, [sp, #8]
 800ca26:	2301      	movs	r3, #1
 800ca28:	9301      	str	r3, [sp, #4]
 800ca2a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800ca2e:	9300      	str	r3, [sp, #0]
 800ca30:	2307      	movs	r3, #7
 800ca32:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 800ca36:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 800ca3a:	f002 fae5 	bl	800f008 <xgemv_NQlWbt2i>
    xgerc_R09LiDgJ(c_lastc, b_coltop, -tau_idx_0, 1, work, b_A, 7);
 800ca3e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800ca42:	60bb      	str	r3, [r7, #8]
 800ca44:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800ca48:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800ca4c:	60fb      	str	r3, [r7, #12]
 800ca4e:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800ca52:	2307      	movs	r3, #7
 800ca54:	9301      	str	r3, [sp, #4]
 800ca56:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800ca5a:	9300      	str	r3, [sp, #0]
 800ca5c:	4613      	mov	r3, r2
 800ca5e:	2201      	movs	r2, #1
 800ca60:	ed97 0b02 	vldr	d0, [r7, #8]
 800ca64:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 800ca68:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 800ca6c:	f002 fbda 	bl	800f224 <xgerc_R09LiDgJ>
  }

  for (b_coltop = 1; b_coltop < 6; b_coltop++) {
 800ca70:	2301      	movs	r3, #1
 800ca72:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800ca76:	e024      	b.n	800cac2 <qr_DvOBrgQi+0x11fe>
    b_A[b_coltop] *= -tau_idx_0;
 800ca78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ca7c:	00db      	lsls	r3, r3, #3
 800ca7e:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800ca82:	4413      	add	r3, r2
 800ca84:	3bd0      	subs	r3, #208	; 0xd0
 800ca86:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ca8a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800ca8e:	603b      	str	r3, [r7, #0]
 800ca90:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800ca94:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800ca98:	607b      	str	r3, [r7, #4]
 800ca9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca9e:	f7f3 fd9d 	bl	80005dc <__aeabi_dmul>
 800caa2:	4602      	mov	r2, r0
 800caa4:	460b      	mov	r3, r1
 800caa6:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 800caaa:	00c9      	lsls	r1, r1, #3
 800caac:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 800cab0:	4401      	add	r1, r0
 800cab2:	39d0      	subs	r1, #208	; 0xd0
 800cab4:	e9c1 2300 	strd	r2, r3, [r1]
  for (b_coltop = 1; b_coltop < 6; b_coltop++) {
 800cab8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cabc:	3301      	adds	r3, #1
 800cabe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800cac2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cac6:	2b05      	cmp	r3, #5
 800cac8:	ddd6      	ble.n	800ca78 <qr_DvOBrgQi+0x11b4>
  }

  b_A[0] = 1.0 - tau_idx_0;
 800caca:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 800cace:	f04f 0000 	mov.w	r0, #0
 800cad2:	4923      	ldr	r1, [pc, #140]	; (800cb60 <qr_DvOBrgQi+0x129c>)
 800cad4:	f7f3 fbca 	bl	800026c <__aeabi_dsub>
 800cad8:	4602      	mov	r2, r0
 800cada:	460b      	mov	r3, r1
 800cadc:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
  b_coltop = 0;
 800cae0:	2300      	movs	r3, #0
 800cae2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  for (coltop = 0; coltop < 3; coltop++) {
 800cae6:	2300      	movs	r3, #0
 800cae8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800caec:	e02d      	b.n	800cb4a <qr_DvOBrgQi+0x1286>
    for (c_lastc = 0; c_lastc < 6; c_lastc++) {
 800caee:	2300      	movs	r3, #0
 800caf0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800caf4:	e01b      	b.n	800cb2e <qr_DvOBrgQi+0x126a>
      knt = c_lastc + b_coltop;
 800caf6:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800cafa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cafe:	4413      	add	r3, r2
 800cb00:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
      Q[knt] = b_A[knt];
 800cb04:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800cb08:	00db      	lsls	r3, r3, #3
 800cb0a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800cb0c:	18d1      	adds	r1, r2, r3
 800cb0e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800cb12:	00db      	lsls	r3, r3, #3
 800cb14:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800cb18:	4413      	add	r3, r2
 800cb1a:	3bd0      	subs	r3, #208	; 0xd0
 800cb1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb20:	e9c1 2300 	strd	r2, r3, [r1]
    for (c_lastc = 0; c_lastc < 6; c_lastc++) {
 800cb24:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cb28:	3301      	adds	r3, #1
 800cb2a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800cb2e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cb32:	2b05      	cmp	r3, #5
 800cb34:	dddf      	ble.n	800caf6 <qr_DvOBrgQi+0x1232>
    }

    b_coltop += 6;
 800cb36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cb3a:	3306      	adds	r3, #6
 800cb3c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  for (coltop = 0; coltop < 3; coltop++) {
 800cb40:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800cb44:	3301      	adds	r3, #1
 800cb46:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800cb4a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800cb4e:	2b02      	cmp	r3, #2
 800cb50:	ddcd      	ble.n	800caee <qr_DvOBrgQi+0x122a>
  }
}
 800cb52:	bf00      	nop
 800cb54:	bf00      	nop
 800cb56:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 800cb5a:	46bd      	mov	sp, r7
 800cb5c:	bdb0      	pop	{r4, r5, r7, pc}
 800cb5e:	bf00      	nop
 800cb60:	3ff00000 	.word	0x3ff00000

0800cb64 <rotate_LZ7ctbe0>:
#include "rotate_LZ7ctbe0.h"
#include <math.h>
#include "rt_hypotd_snf.h"

void rotate_LZ7ctbe0(real_T x, real_T y, real_T *c, real_T *s, real_T *r)
{
 800cb64:	b5b0      	push	{r4, r5, r7, lr}
 800cb66:	b092      	sub	sp, #72	; 0x48
 800cb68:	af00      	add	r7, sp, #0
 800cb6a:	ed87 0b06 	vstr	d0, [r7, #24]
 800cb6e:	ed87 1b04 	vstr	d1, [r7, #16]
 800cb72:	60f8      	str	r0, [r7, #12]
 800cb74:	60b9      	str	r1, [r7, #8]
 800cb76:	607a      	str	r2, [r7, #4]
  real_T absx;
  real_T absy;
  absx = fabs(x);
 800cb78:	69bb      	ldr	r3, [r7, #24]
 800cb7a:	643b      	str	r3, [r7, #64]	; 0x40
 800cb7c:	69fb      	ldr	r3, [r7, #28]
 800cb7e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cb82:	647b      	str	r3, [r7, #68]	; 0x44
  absy = fabs(y);
 800cb84:	693b      	ldr	r3, [r7, #16]
 800cb86:	63bb      	str	r3, [r7, #56]	; 0x38
 800cb88:	697b      	ldr	r3, [r7, #20]
 800cb8a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cb8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (absy == 0.0) {
 800cb90:	f04f 0200 	mov.w	r2, #0
 800cb94:	f04f 0300 	mov.w	r3, #0
 800cb98:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800cb9c:	f7f3 ff86 	bl	8000aac <__aeabi_dcmpeq>
 800cba0:	4603      	mov	r3, r0
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d012      	beq.n	800cbcc <rotate_LZ7ctbe0+0x68>
    *c = 1.0;
 800cba6:	68f9      	ldr	r1, [r7, #12]
 800cba8:	f04f 0200 	mov.w	r2, #0
 800cbac:	4b4e      	ldr	r3, [pc, #312]	; (800cce8 <rotate_LZ7ctbe0+0x184>)
 800cbae:	e9c1 2300 	strd	r2, r3, [r1]
    *s = 0.0;
 800cbb2:	68b9      	ldr	r1, [r7, #8]
 800cbb4:	f04f 0200 	mov.w	r2, #0
 800cbb8:	f04f 0300 	mov.w	r3, #0
 800cbbc:	e9c1 2300 	strd	r2, r3, [r1]
    *r = x;
 800cbc0:	6879      	ldr	r1, [r7, #4]
 800cbc2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800cbc6:	e9c1 2300 	strd	r2, r3, [r1]
    *c = absx / rho;
    xx /= absx;
    *s = xx * yy / rho;
    *r = rho * absy * xx;
  }
}
 800cbca:	e088      	b.n	800ccde <rotate_LZ7ctbe0+0x17a>
  } else if (absx == 0.0) {
 800cbcc:	f04f 0200 	mov.w	r2, #0
 800cbd0:	f04f 0300 	mov.w	r3, #0
 800cbd4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800cbd8:	f7f3 ff68 	bl	8000aac <__aeabi_dcmpeq>
 800cbdc:	4603      	mov	r3, r0
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d012      	beq.n	800cc08 <rotate_LZ7ctbe0+0xa4>
    *c = 0.0;
 800cbe2:	68f9      	ldr	r1, [r7, #12]
 800cbe4:	f04f 0200 	mov.w	r2, #0
 800cbe8:	f04f 0300 	mov.w	r3, #0
 800cbec:	e9c1 2300 	strd	r2, r3, [r1]
    *s = 1.0;
 800cbf0:	68b9      	ldr	r1, [r7, #8]
 800cbf2:	f04f 0200 	mov.w	r2, #0
 800cbf6:	4b3c      	ldr	r3, [pc, #240]	; (800cce8 <rotate_LZ7ctbe0+0x184>)
 800cbf8:	e9c1 2300 	strd	r2, r3, [r1]
    *r = y;
 800cbfc:	6879      	ldr	r1, [r7, #4]
 800cbfe:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800cc02:	e9c1 2300 	strd	r2, r3, [r1]
}
 800cc06:	e06a      	b.n	800ccde <rotate_LZ7ctbe0+0x17a>
    absy += absx;
 800cc08:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800cc0c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800cc10:	f7f3 fb2e 	bl	8000270 <__adddf3>
 800cc14:	4602      	mov	r2, r0
 800cc16:	460b      	mov	r3, r1
 800cc18:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xx = x / absy;
 800cc1c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800cc20:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800cc24:	f7f3 fe04 	bl	8000830 <__aeabi_ddiv>
 800cc28:	4602      	mov	r2, r0
 800cc2a:	460b      	mov	r3, r1
 800cc2c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    yy = y / absy;
 800cc30:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800cc34:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800cc38:	f7f3 fdfa 	bl	8000830 <__aeabi_ddiv>
 800cc3c:	4602      	mov	r2, r0
 800cc3e:	460b      	mov	r3, r1
 800cc40:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    absx = fabs(xx);
 800cc44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc46:	643b      	str	r3, [r7, #64]	; 0x40
 800cc48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc4a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cc4e:	647b      	str	r3, [r7, #68]	; 0x44
    rho = rt_hypotd_snf(absx, fabs(yy));
 800cc50:	6abc      	ldr	r4, [r7, #40]	; 0x28
 800cc52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc54:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800cc58:	ec45 4b11 	vmov	d1, r4, r5
 800cc5c:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 800cc60:	f000 f90a 	bl	800ce78 <rt_hypotd_snf>
 800cc64:	ed87 0b08 	vstr	d0, [r7, #32]
    *c = absx / rho;
 800cc68:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800cc6c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800cc70:	f7f3 fdde 	bl	8000830 <__aeabi_ddiv>
 800cc74:	4602      	mov	r2, r0
 800cc76:	460b      	mov	r3, r1
 800cc78:	68f9      	ldr	r1, [r7, #12]
 800cc7a:	e9c1 2300 	strd	r2, r3, [r1]
    xx /= absx;
 800cc7e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800cc82:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800cc86:	f7f3 fdd3 	bl	8000830 <__aeabi_ddiv>
 800cc8a:	4602      	mov	r2, r0
 800cc8c:	460b      	mov	r3, r1
 800cc8e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    *s = xx * yy / rho;
 800cc92:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800cc96:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800cc9a:	f7f3 fc9f 	bl	80005dc <__aeabi_dmul>
 800cc9e:	4602      	mov	r2, r0
 800cca0:	460b      	mov	r3, r1
 800cca2:	4610      	mov	r0, r2
 800cca4:	4619      	mov	r1, r3
 800cca6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ccaa:	f7f3 fdc1 	bl	8000830 <__aeabi_ddiv>
 800ccae:	4602      	mov	r2, r0
 800ccb0:	460b      	mov	r3, r1
 800ccb2:	68b9      	ldr	r1, [r7, #8]
 800ccb4:	e9c1 2300 	strd	r2, r3, [r1]
    *r = rho * absy * xx;
 800ccb8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800ccbc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800ccc0:	f7f3 fc8c 	bl	80005dc <__aeabi_dmul>
 800ccc4:	4602      	mov	r2, r0
 800ccc6:	460b      	mov	r3, r1
 800ccc8:	4610      	mov	r0, r2
 800ccca:	4619      	mov	r1, r3
 800cccc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800ccd0:	f7f3 fc84 	bl	80005dc <__aeabi_dmul>
 800ccd4:	4602      	mov	r2, r0
 800ccd6:	460b      	mov	r3, r1
 800ccd8:	6879      	ldr	r1, [r7, #4]
 800ccda:	e9c1 2300 	strd	r2, r3, [r1]
}
 800ccde:	bf00      	nop
 800cce0:	3748      	adds	r7, #72	; 0x48
 800cce2:	46bd      	mov	sp, r7
 800cce4:	bdb0      	pop	{r4, r5, r7, pc}
 800cce6:	bf00      	nop
 800cce8:	3ff00000 	.word	0x3ff00000

0800ccec <rtGetInf>:
#include <stddef.h>
#include "rt_nonfinite.h"
#define NumBitsPerChar                 8U

real_T rtGetInf(void)
{
 800ccec:	b580      	push	{r7, lr}
 800ccee:	b086      	sub	sp, #24
 800ccf0:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 800ccf2:	2340      	movs	r3, #64	; 0x40
 800ccf4:	60fb      	str	r3, [r7, #12]
  real_T inf = 0.0;
 800ccf6:	f04f 0200 	mov.w	r2, #0
 800ccfa:	f04f 0300 	mov.w	r3, #0
 800ccfe:	e9c7 2304 	strd	r2, r3, [r7, #16]
  if (bitsPerReal == 32U) {
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	2b20      	cmp	r3, #32
 800cd06:	d10b      	bne.n	800cd20 <rtGetInf+0x34>
    inf = rtGetInfF();
 800cd08:	f000 f820 	bl	800cd4c <rtGetInfF>
 800cd0c:	ee10 3a10 	vmov	r3, s0
 800cd10:	4618      	mov	r0, r3
 800cd12:	f7f3 fc0b 	bl	800052c <__aeabi_f2d>
 800cd16:	4602      	mov	r2, r0
 800cd18:	460b      	mov	r3, r1
 800cd1a:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800cd1e:	e007      	b.n	800cd30 <rtGetInf+0x44>
    union {
      LittleEndianIEEEDouble bitVal;
      real_T fltVal;
    } tmpVal;

    tmpVal.bitVal.words.wordH = 0x7FF00000U;
 800cd20:	4b09      	ldr	r3, [pc, #36]	; (800cd48 <rtGetInf+0x5c>)
 800cd22:	607b      	str	r3, [r7, #4]
    tmpVal.bitVal.words.wordL = 0x00000000U;
 800cd24:	2300      	movs	r3, #0
 800cd26:	603b      	str	r3, [r7, #0]
    inf = tmpVal.fltVal;
 800cd28:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cd2c:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  return inf;
 800cd30:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800cd34:	ec43 2b17 	vmov	d7, r2, r3
}
 800cd38:	eeb0 0a47 	vmov.f32	s0, s14
 800cd3c:	eef0 0a67 	vmov.f32	s1, s15
 800cd40:	3718      	adds	r7, #24
 800cd42:	46bd      	mov	sp, r7
 800cd44:	bd80      	pop	{r7, pc}
 800cd46:	bf00      	nop
 800cd48:	7ff00000 	.word	0x7ff00000

0800cd4c <rtGetInfF>:

real32_T rtGetInfF(void)
{
 800cd4c:	b480      	push	{r7}
 800cd4e:	b083      	sub	sp, #12
 800cd50:	af00      	add	r7, sp, #0
  IEEESingle infF;
  infF.wordL.wordLuint = 0x7F800000U;
 800cd52:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 800cd56:	607b      	str	r3, [r7, #4]
  return infF.wordL.wordLreal;
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	ee07 3a90 	vmov	s15, r3
}
 800cd5e:	eeb0 0a67 	vmov.f32	s0, s15
 800cd62:	370c      	adds	r7, #12
 800cd64:	46bd      	mov	sp, r7
 800cd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd6a:	4770      	bx	lr

0800cd6c <rtGetMinusInf>:

real_T rtGetMinusInf(void)
{
 800cd6c:	b580      	push	{r7, lr}
 800cd6e:	b086      	sub	sp, #24
 800cd70:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 800cd72:	2340      	movs	r3, #64	; 0x40
 800cd74:	60fb      	str	r3, [r7, #12]
  real_T minf = 0.0;
 800cd76:	f04f 0200 	mov.w	r2, #0
 800cd7a:	f04f 0300 	mov.w	r3, #0
 800cd7e:	e9c7 2304 	strd	r2, r3, [r7, #16]
  if (bitsPerReal == 32U) {
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	2b20      	cmp	r3, #32
 800cd86:	d10b      	bne.n	800cda0 <rtGetMinusInf+0x34>
    minf = rtGetMinusInfF();
 800cd88:	f000 f820 	bl	800cdcc <rtGetMinusInfF>
 800cd8c:	ee10 3a10 	vmov	r3, s0
 800cd90:	4618      	mov	r0, r3
 800cd92:	f7f3 fbcb 	bl	800052c <__aeabi_f2d>
 800cd96:	4602      	mov	r2, r0
 800cd98:	460b      	mov	r3, r1
 800cd9a:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800cd9e:	e007      	b.n	800cdb0 <rtGetMinusInf+0x44>
    union {
      LittleEndianIEEEDouble bitVal;
      real_T fltVal;
    } tmpVal;

    tmpVal.bitVal.words.wordH = 0xFFF00000U;
 800cda0:	4b09      	ldr	r3, [pc, #36]	; (800cdc8 <rtGetMinusInf+0x5c>)
 800cda2:	607b      	str	r3, [r7, #4]
    tmpVal.bitVal.words.wordL = 0x00000000U;
 800cda4:	2300      	movs	r3, #0
 800cda6:	603b      	str	r3, [r7, #0]
    minf = tmpVal.fltVal;
 800cda8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cdac:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  return minf;
 800cdb0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800cdb4:	ec43 2b17 	vmov	d7, r2, r3
}
 800cdb8:	eeb0 0a47 	vmov.f32	s0, s14
 800cdbc:	eef0 0a67 	vmov.f32	s1, s15
 800cdc0:	3718      	adds	r7, #24
 800cdc2:	46bd      	mov	sp, r7
 800cdc4:	bd80      	pop	{r7, pc}
 800cdc6:	bf00      	nop
 800cdc8:	fff00000 	.word	0xfff00000

0800cdcc <rtGetMinusInfF>:

real32_T rtGetMinusInfF(void)
{
 800cdcc:	b480      	push	{r7}
 800cdce:	b083      	sub	sp, #12
 800cdd0:	af00      	add	r7, sp, #0
  IEEESingle minfF;
  minfF.wordL.wordLuint = 0xFF800000U;
 800cdd2:	4b06      	ldr	r3, [pc, #24]	; (800cdec <rtGetMinusInfF+0x20>)
 800cdd4:	607b      	str	r3, [r7, #4]
  return minfF.wordL.wordLreal;
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	ee07 3a90 	vmov	s15, r3
}
 800cddc:	eeb0 0a67 	vmov.f32	s0, s15
 800cde0:	370c      	adds	r7, #12
 800cde2:	46bd      	mov	sp, r7
 800cde4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde8:	4770      	bx	lr
 800cdea:	bf00      	nop
 800cdec:	ff800000 	.word	0xff800000

0800cdf0 <rtGetNaN>:
#include <stddef.h>
#include "rt_nonfinite.h"
#define NumBitsPerChar                 8U

real_T rtGetNaN(void)
{
 800cdf0:	b580      	push	{r7, lr}
 800cdf2:	b086      	sub	sp, #24
 800cdf4:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 800cdf6:	2340      	movs	r3, #64	; 0x40
 800cdf8:	60fb      	str	r3, [r7, #12]
  real_T nan = 0.0;
 800cdfa:	f04f 0200 	mov.w	r2, #0
 800cdfe:	f04f 0300 	mov.w	r3, #0
 800ce02:	e9c7 2304 	strd	r2, r3, [r7, #16]
  if (bitsPerReal == 32U) {
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	2b20      	cmp	r3, #32
 800ce0a:	d10b      	bne.n	800ce24 <rtGetNaN+0x34>
    nan = rtGetNaNF();
 800ce0c:	f000 f820 	bl	800ce50 <rtGetNaNF>
 800ce10:	ee10 3a10 	vmov	r3, s0
 800ce14:	4618      	mov	r0, r3
 800ce16:	f7f3 fb89 	bl	800052c <__aeabi_f2d>
 800ce1a:	4602      	mov	r2, r0
 800ce1c:	460b      	mov	r3, r1
 800ce1e:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800ce22:	e007      	b.n	800ce34 <rtGetNaN+0x44>
    union {
      LittleEndianIEEEDouble bitVal;
      real_T fltVal;
    } tmpVal;

    tmpVal.bitVal.words.wordH = 0xFFF80000U;
 800ce24:	4b09      	ldr	r3, [pc, #36]	; (800ce4c <rtGetNaN+0x5c>)
 800ce26:	607b      	str	r3, [r7, #4]
    tmpVal.bitVal.words.wordL = 0x00000000U;
 800ce28:	2300      	movs	r3, #0
 800ce2a:	603b      	str	r3, [r7, #0]
    nan = tmpVal.fltVal;
 800ce2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ce30:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  return nan;
 800ce34:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ce38:	ec43 2b17 	vmov	d7, r2, r3
}
 800ce3c:	eeb0 0a47 	vmov.f32	s0, s14
 800ce40:	eef0 0a67 	vmov.f32	s1, s15
 800ce44:	3718      	adds	r7, #24
 800ce46:	46bd      	mov	sp, r7
 800ce48:	bd80      	pop	{r7, pc}
 800ce4a:	bf00      	nop
 800ce4c:	fff80000 	.word	0xfff80000

0800ce50 <rtGetNaNF>:

real32_T rtGetNaNF(void)
{
 800ce50:	b480      	push	{r7}
 800ce52:	b083      	sub	sp, #12
 800ce54:	af00      	add	r7, sp, #0
  IEEESingle nanF = { { 0.0F } };
 800ce56:	f04f 0300 	mov.w	r3, #0
 800ce5a:	607b      	str	r3, [r7, #4]

  nanF.wordL.wordLuint = 0xFFC00000U;
 800ce5c:	4b05      	ldr	r3, [pc, #20]	; (800ce74 <rtGetNaNF+0x24>)
 800ce5e:	607b      	str	r3, [r7, #4]
  return nanF.wordL.wordLreal;
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	ee07 3a90 	vmov	s15, r3
}
 800ce66:	eeb0 0a67 	vmov.f32	s0, s15
 800ce6a:	370c      	adds	r7, #12
 800ce6c:	46bd      	mov	sp, r7
 800ce6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce72:	4770      	bx	lr
 800ce74:	ffc00000 	.word	0xffc00000

0800ce78 <rt_hypotd_snf>:
#include "rt_hypotd_snf.h"
#include <math.h>
#include "rt_nonfinite.h"

real_T rt_hypotd_snf(real_T u0, real_T u1)
{
 800ce78:	b580      	push	{r7, lr}
 800ce7a:	b088      	sub	sp, #32
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	ed87 0b02 	vstr	d0, [r7, #8]
 800ce82:	ed87 1b00 	vstr	d1, [r7]
  real_T a;
  real_T y;
  a = fabs(u0);
 800ce86:	68bb      	ldr	r3, [r7, #8]
 800ce88:	613b      	str	r3, [r7, #16]
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ce90:	617b      	str	r3, [r7, #20]
  y = fabs(u1);
 800ce92:	683b      	ldr	r3, [r7, #0]
 800ce94:	61bb      	str	r3, [r7, #24]
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ce9c:	61fb      	str	r3, [r7, #28]
  if (a < y) {
 800ce9e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800cea2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800cea6:	f7f3 fe0b 	bl	8000ac0 <__aeabi_dcmplt>
 800ceaa:	4603      	mov	r3, r0
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d02d      	beq.n	800cf0c <rt_hypotd_snf+0x94>
    a /= y;
 800ceb0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ceb4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800ceb8:	f7f3 fcba 	bl	8000830 <__aeabi_ddiv>
 800cebc:	4602      	mov	r2, r0
 800cebe:	460b      	mov	r3, r1
 800cec0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    y *= sqrt(a * a + 1.0);
 800cec4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800cec8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800cecc:	f7f3 fb86 	bl	80005dc <__aeabi_dmul>
 800ced0:	4602      	mov	r2, r0
 800ced2:	460b      	mov	r3, r1
 800ced4:	4610      	mov	r0, r2
 800ced6:	4619      	mov	r1, r3
 800ced8:	f04f 0200 	mov.w	r2, #0
 800cedc:	4b38      	ldr	r3, [pc, #224]	; (800cfc0 <rt_hypotd_snf+0x148>)
 800cede:	f7f3 f9c7 	bl	8000270 <__adddf3>
 800cee2:	4602      	mov	r2, r0
 800cee4:	460b      	mov	r3, r1
 800cee6:	ec43 2b17 	vmov	d7, r2, r3
 800ceea:	eeb0 0a47 	vmov.f32	s0, s14
 800ceee:	eef0 0a67 	vmov.f32	s1, s15
 800cef2:	f00e fa79 	bl	801b3e8 <sqrt>
 800cef6:	ec53 2b10 	vmov	r2, r3, d0
 800cefa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800cefe:	f7f3 fb6d 	bl	80005dc <__aeabi_dmul>
 800cf02:	4602      	mov	r2, r0
 800cf04:	460b      	mov	r3, r1
 800cf06:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800cf0a:	e048      	b.n	800cf9e <rt_hypotd_snf+0x126>
  } else if (a > y) {
 800cf0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800cf10:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800cf14:	f7f3 fdf2 	bl	8000afc <__aeabi_dcmpgt>
 800cf18:	4603      	mov	r3, r0
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d02d      	beq.n	800cf7a <rt_hypotd_snf+0x102>
    y /= a;
 800cf1e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800cf22:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800cf26:	f7f3 fc83 	bl	8000830 <__aeabi_ddiv>
 800cf2a:	4602      	mov	r2, r0
 800cf2c:	460b      	mov	r3, r1
 800cf2e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    y = sqrt(y * y + 1.0) * a;
 800cf32:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800cf36:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800cf3a:	f7f3 fb4f 	bl	80005dc <__aeabi_dmul>
 800cf3e:	4602      	mov	r2, r0
 800cf40:	460b      	mov	r3, r1
 800cf42:	4610      	mov	r0, r2
 800cf44:	4619      	mov	r1, r3
 800cf46:	f04f 0200 	mov.w	r2, #0
 800cf4a:	4b1d      	ldr	r3, [pc, #116]	; (800cfc0 <rt_hypotd_snf+0x148>)
 800cf4c:	f7f3 f990 	bl	8000270 <__adddf3>
 800cf50:	4602      	mov	r2, r0
 800cf52:	460b      	mov	r3, r1
 800cf54:	ec43 2b17 	vmov	d7, r2, r3
 800cf58:	eeb0 0a47 	vmov.f32	s0, s14
 800cf5c:	eef0 0a67 	vmov.f32	s1, s15
 800cf60:	f00e fa42 	bl	801b3e8 <sqrt>
 800cf64:	ec53 2b10 	vmov	r2, r3, d0
 800cf68:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800cf6c:	f7f3 fb36 	bl	80005dc <__aeabi_dmul>
 800cf70:	4602      	mov	r2, r0
 800cf72:	460b      	mov	r3, r1
 800cf74:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800cf78:	e011      	b.n	800cf9e <rt_hypotd_snf+0x126>
  } else if (!rtIsNaN(y)) {
 800cf7a:	ed97 0b06 	vldr	d0, [r7, #24]
 800cf7e:	f000 f889 	bl	800d094 <rtIsNaN>
 800cf82:	4603      	mov	r3, r0
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d10a      	bne.n	800cf9e <rt_hypotd_snf+0x126>
    y = a * 1.4142135623730951;
 800cf88:	a30b      	add	r3, pc, #44	; (adr r3, 800cfb8 <rt_hypotd_snf+0x140>)
 800cf8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf8e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800cf92:	f7f3 fb23 	bl	80005dc <__aeabi_dmul>
 800cf96:	4602      	mov	r2, r0
 800cf98:	460b      	mov	r3, r1
 800cf9a:	e9c7 2306 	strd	r2, r3, [r7, #24]
  }

  return y;
 800cf9e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800cfa2:	ec43 2b17 	vmov	d7, r2, r3
}
 800cfa6:	eeb0 0a47 	vmov.f32	s0, s14
 800cfaa:	eef0 0a67 	vmov.f32	s1, s15
 800cfae:	3720      	adds	r7, #32
 800cfb0:	46bd      	mov	sp, r7
 800cfb2:	bd80      	pop	{r7, pc}
 800cfb4:	f3af 8000 	nop.w
 800cfb8:	667f3bcd 	.word	0x667f3bcd
 800cfbc:	3ff6a09e 	.word	0x3ff6a09e
 800cfc0:	3ff00000 	.word	0x3ff00000

0800cfc4 <rt_InitInfAndNaN>:
real_T rtNaN;
real32_T rtInfF;
real32_T rtMinusInfF;
real32_T rtNaNF;
void rt_InitInfAndNaN(size_t realSize)
{
 800cfc4:	b580      	push	{r7, lr}
 800cfc6:	b082      	sub	sp, #8
 800cfc8:	af00      	add	r7, sp, #0
 800cfca:	6078      	str	r0, [r7, #4]
  (void) (realSize);
  rtNaN = rtGetNaN();
 800cfcc:	f7ff ff10 	bl	800cdf0 <rtGetNaN>
 800cfd0:	eeb0 7a40 	vmov.f32	s14, s0
 800cfd4:	eef0 7a60 	vmov.f32	s15, s1
 800cfd8:	4b16      	ldr	r3, [pc, #88]	; (800d034 <rt_InitInfAndNaN+0x70>)
 800cfda:	ed83 7b00 	vstr	d7, [r3]
  rtNaNF = rtGetNaNF();
 800cfde:	f7ff ff37 	bl	800ce50 <rtGetNaNF>
 800cfe2:	eef0 7a40 	vmov.f32	s15, s0
 800cfe6:	4b14      	ldr	r3, [pc, #80]	; (800d038 <rt_InitInfAndNaN+0x74>)
 800cfe8:	edc3 7a00 	vstr	s15, [r3]
  rtInf = rtGetInf();
 800cfec:	f7ff fe7e 	bl	800ccec <rtGetInf>
 800cff0:	eeb0 7a40 	vmov.f32	s14, s0
 800cff4:	eef0 7a60 	vmov.f32	s15, s1
 800cff8:	4b10      	ldr	r3, [pc, #64]	; (800d03c <rt_InitInfAndNaN+0x78>)
 800cffa:	ed83 7b00 	vstr	d7, [r3]
  rtInfF = rtGetInfF();
 800cffe:	f7ff fea5 	bl	800cd4c <rtGetInfF>
 800d002:	eef0 7a40 	vmov.f32	s15, s0
 800d006:	4b0e      	ldr	r3, [pc, #56]	; (800d040 <rt_InitInfAndNaN+0x7c>)
 800d008:	edc3 7a00 	vstr	s15, [r3]
  rtMinusInf = rtGetMinusInf();
 800d00c:	f7ff feae 	bl	800cd6c <rtGetMinusInf>
 800d010:	eeb0 7a40 	vmov.f32	s14, s0
 800d014:	eef0 7a60 	vmov.f32	s15, s1
 800d018:	4b0a      	ldr	r3, [pc, #40]	; (800d044 <rt_InitInfAndNaN+0x80>)
 800d01a:	ed83 7b00 	vstr	d7, [r3]
  rtMinusInfF = rtGetMinusInfF();
 800d01e:	f7ff fed5 	bl	800cdcc <rtGetMinusInfF>
 800d022:	eef0 7a40 	vmov.f32	s15, s0
 800d026:	4b08      	ldr	r3, [pc, #32]	; (800d048 <rt_InitInfAndNaN+0x84>)
 800d028:	edc3 7a00 	vstr	s15, [r3]
}
 800d02c:	bf00      	nop
 800d02e:	3708      	adds	r7, #8
 800d030:	46bd      	mov	sp, r7
 800d032:	bd80      	pop	{r7, pc}
 800d034:	2001ec10 	.word	0x2001ec10
 800d038:	2001ec00 	.word	0x2001ec00
 800d03c:	2001ec08 	.word	0x2001ec08
 800d040:	2001ec04 	.word	0x2001ec04
 800d044:	2001ec18 	.word	0x2001ec18
 800d048:	2001ec20 	.word	0x2001ec20

0800d04c <rtIsInf>:

boolean_T rtIsInf(real_T value)
{
 800d04c:	b580      	push	{r7, lr}
 800d04e:	b082      	sub	sp, #8
 800d050:	af00      	add	r7, sp, #0
 800d052:	ed87 0b00 	vstr	d0, [r7]
  return (boolean_T)((value==rtInf || value==rtMinusInf) ? 1U : 0U);
 800d056:	4b0d      	ldr	r3, [pc, #52]	; (800d08c <rtIsInf+0x40>)
 800d058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d05c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d060:	f7f3 fd24 	bl	8000aac <__aeabi_dcmpeq>
 800d064:	4603      	mov	r3, r0
 800d066:	2b00      	cmp	r3, #0
 800d068:	d109      	bne.n	800d07e <rtIsInf+0x32>
 800d06a:	4b09      	ldr	r3, [pc, #36]	; (800d090 <rtIsInf+0x44>)
 800d06c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d070:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d074:	f7f3 fd1a 	bl	8000aac <__aeabi_dcmpeq>
 800d078:	4603      	mov	r3, r0
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d001      	beq.n	800d082 <rtIsInf+0x36>
 800d07e:	2301      	movs	r3, #1
 800d080:	e000      	b.n	800d084 <rtIsInf+0x38>
 800d082:	2300      	movs	r3, #0
}
 800d084:	4618      	mov	r0, r3
 800d086:	3708      	adds	r7, #8
 800d088:	46bd      	mov	sp, r7
 800d08a:	bd80      	pop	{r7, pc}
 800d08c:	2001ec08 	.word	0x2001ec08
 800d090:	2001ec18 	.word	0x2001ec18

0800d094 <rtIsNaN>:
{
  return (boolean_T)(((value)==rtInfF || (value)==rtMinusInfF) ? 1U : 0U);
}

boolean_T rtIsNaN(real_T value)
{
 800d094:	b580      	push	{r7, lr}
 800d096:	b086      	sub	sp, #24
 800d098:	af00      	add	r7, sp, #0
 800d09a:	ed87 0b00 	vstr	d0, [r7]
  boolean_T result = (boolean_T) 0;
 800d09e:	2300      	movs	r3, #0
 800d0a0:	75fb      	strb	r3, [r7, #23]
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 800d0a2:	2340      	movs	r3, #64	; 0x40
 800d0a4:	613b      	str	r3, [r7, #16]
  if (bitsPerReal == 32U) {
 800d0a6:	693b      	ldr	r3, [r7, #16]
 800d0a8:	2b20      	cmp	r3, #32
 800d0aa:	d10b      	bne.n	800d0c4 <rtIsNaN+0x30>
    result = rtIsNaNF((real32_T)value);
 800d0ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d0b0:	f7f3 fd8c 	bl	8000bcc <__aeabi_d2f>
 800d0b4:	4603      	mov	r3, r0
 800d0b6:	ee00 3a10 	vmov	s0, r3
 800d0ba:	f000 f821 	bl	800d100 <rtIsNaNF>
 800d0be:	4603      	mov	r3, r0
 800d0c0:	75fb      	strb	r3, [r7, #23]
 800d0c2:	e015      	b.n	800d0f0 <rtIsNaN+0x5c>
    union {
      LittleEndianIEEEDouble bitVal;
      real_T fltVal;
    } tmpVal;

    tmpVal.fltVal = value;
 800d0c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d0c8:	e9c7 2302 	strd	r2, r3, [r7, #8]
    result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) == 0x7FF00000 &&
 800d0cc:	68fa      	ldr	r2, [r7, #12]
 800d0ce:	4b0b      	ldr	r3, [pc, #44]	; (800d0fc <rtIsNaN+0x68>)
 800d0d0:	4013      	ands	r3, r2
 800d0d2:	4a0a      	ldr	r2, [pc, #40]	; (800d0fc <rtIsNaN+0x68>)
 800d0d4:	4293      	cmp	r3, r2
 800d0d6:	d109      	bne.n	800d0ec <rtIsNaN+0x58>
                         ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	f3c3 0313 	ubfx	r3, r3, #0, #20
    result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) == 0x7FF00000 &&
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d102      	bne.n	800d0e8 <rtIsNaN+0x54>
                          (tmpVal.bitVal.words.wordL != 0) ));
 800d0e2:	68bb      	ldr	r3, [r7, #8]
                         ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d001      	beq.n	800d0ec <rtIsNaN+0x58>
    result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) == 0x7FF00000 &&
 800d0e8:	2301      	movs	r3, #1
 800d0ea:	e000      	b.n	800d0ee <rtIsNaN+0x5a>
 800d0ec:	2300      	movs	r3, #0
 800d0ee:	75fb      	strb	r3, [r7, #23]
  }

  return result;
 800d0f0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d0f2:	4618      	mov	r0, r3
 800d0f4:	3718      	adds	r7, #24
 800d0f6:	46bd      	mov	sp, r7
 800d0f8:	bd80      	pop	{r7, pc}
 800d0fa:	bf00      	nop
 800d0fc:	7ff00000 	.word	0x7ff00000

0800d100 <rtIsNaNF>:

boolean_T rtIsNaNF(real32_T value)
{
 800d100:	b480      	push	{r7}
 800d102:	b085      	sub	sp, #20
 800d104:	af00      	add	r7, sp, #0
 800d106:	ed87 0a01 	vstr	s0, [r7, #4]
  IEEESingle tmp;
  tmp.wordL.wordLreal = value;
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	60fb      	str	r3, [r7, #12]
  return (boolean_T)( (tmp.wordL.wordLuint & 0x7F800000) == 0x7F800000 &&
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	f003 43ff 	and.w	r3, r3, #2139095040	; 0x7f800000
 800d114:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800d118:	d106      	bne.n	800d128 <rtIsNaNF+0x28>
                     (tmp.wordL.wordLuint & 0x007FFFFF) != 0 );
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	f3c3 0316 	ubfx	r3, r3, #0, #23
  return (boolean_T)( (tmp.wordL.wordLuint & 0x7F800000) == 0x7F800000 &&
 800d120:	2b00      	cmp	r3, #0
 800d122:	d001      	beq.n	800d128 <rtIsNaNF+0x28>
 800d124:	2301      	movs	r3, #1
 800d126:	e000      	b.n	800d12a <rtIsNaNF+0x2a>
 800d128:	2300      	movs	r3, #0
 800d12a:	b2db      	uxtb	r3, r3
}
 800d12c:	4618      	mov	r0, r3
 800d12e:	3714      	adds	r7, #20
 800d130:	46bd      	mov	sp, r7
 800d132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d136:	4770      	bx	lr

0800d138 <svd_u3DvUgOe>:
#include "xrotg_XzIjz1eG.h"
#include "xrot_i7f01JoJ.h"
#include "xswap_JoAqPjUv.h"

void svd_u3DvUgOe(const real_T A[9], real_T U[9], real_T s[3], real_T V[9])
{
 800d138:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d13c:	ed2d 8b02 	vpush	{d8}
 800d140:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800d144:	af02      	add	r7, sp, #8
 800d146:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 800d14a:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 800d14e:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 800d152:	f507 7280 	add.w	r2, r7, #256	; 0x100
 800d156:	6013      	str	r3, [r2, #0]
  int32_T kase;
  int32_T m;
  int32_T qjj;
  int32_T qq;
  boolean_T apply_transform;
  e[0] = 0.0;
 800d158:	f04f 0200 	mov.w	r2, #0
 800d15c:	f04f 0300 	mov.w	r3, #0
 800d160:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
  work[0] = 0.0;
 800d164:	f04f 0200 	mov.w	r2, #0
 800d168:	f04f 0300 	mov.w	r3, #0
 800d16c:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
  e[1] = 0.0;
 800d170:	f04f 0200 	mov.w	r2, #0
 800d174:	f04f 0300 	mov.w	r3, #0
 800d178:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
  work[1] = 0.0;
 800d17c:	f04f 0200 	mov.w	r2, #0
 800d180:	f04f 0300 	mov.w	r3, #0
 800d184:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
  e[2] = 0.0;
 800d188:	f04f 0200 	mov.w	r2, #0
 800d18c:	f04f 0300 	mov.w	r3, #0
 800d190:	e9c7 2356 	strd	r2, r3, [r7, #344]	; 0x158
  work[2] = 0.0;
 800d194:	f04f 0200 	mov.w	r2, #0
 800d198:	f04f 0300 	mov.w	r3, #0
 800d19c:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
  for (qq = 0; qq < 9; qq++) {
 800d1a0:	2300      	movs	r3, #0
 800d1a2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800d1a6:	e02e      	b.n	800d206 <svd_u3DvUgOe+0xce>
    b_A[qq] = A[qq];
 800d1a8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d1ac:	00da      	lsls	r2, r3, #3
 800d1ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d1b2:	4413      	add	r3, r2
 800d1b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d1b8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d1bc:	00db      	lsls	r3, r3, #3
 800d1be:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d1c2:	4413      	add	r3, r2
 800d1c4:	3b88      	subs	r3, #136	; 0x88
 800d1c6:	e9c3 0100 	strd	r0, r1, [r3]
    U[qq] = 0.0;
 800d1ca:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d1ce:	00da      	lsls	r2, r3, #3
 800d1d0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d1d4:	1899      	adds	r1, r3, r2
 800d1d6:	f04f 0200 	mov.w	r2, #0
 800d1da:	f04f 0300 	mov.w	r3, #0
 800d1de:	e9c1 2300 	strd	r2, r3, [r1]
    V[qq] = 0.0;
 800d1e2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d1e6:	00da      	lsls	r2, r3, #3
 800d1e8:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	1899      	adds	r1, r3, r2
 800d1f0:	f04f 0200 	mov.w	r2, #0
 800d1f4:	f04f 0300 	mov.w	r3, #0
 800d1f8:	e9c1 2300 	strd	r2, r3, [r1]
  for (qq = 0; qq < 9; qq++) {
 800d1fc:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d200:	3301      	adds	r3, #1
 800d202:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800d206:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d20a:	2b08      	cmp	r3, #8
 800d20c:	ddcc      	ble.n	800d1a8 <svd_u3DvUgOe+0x70>
  }

  qq = 0;
 800d20e:	2300      	movs	r3, #0
 800d210:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  apply_transform = false;
 800d214:	2300      	movs	r3, #0
 800d216:	f887 31eb 	strb.w	r3, [r7, #491]	; 0x1eb
  nrm = xnrm2_xDOlDEtw(3, b_A, 1);
 800d21a:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800d21e:	2201      	movs	r2, #1
 800d220:	4619      	mov	r1, r3
 800d222:	2003      	movs	r0, #3
 800d224:	f002 fbbc 	bl	800f9a0 <xnrm2_xDOlDEtw>
 800d228:	ed87 0b72 	vstr	d0, [r7, #456]	; 0x1c8
  if (nrm > 0.0) {
 800d22c:	f04f 0200 	mov.w	r2, #0
 800d230:	f04f 0300 	mov.w	r3, #0
 800d234:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	; 0x1c8
 800d238:	f7f3 fc60 	bl	8000afc <__aeabi_dcmpgt>
 800d23c:	4603      	mov	r3, r0
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d07b      	beq.n	800d33a <svd_u3DvUgOe+0x202>
    apply_transform = true;
 800d242:	2301      	movs	r3, #1
 800d244:	f887 31eb 	strb.w	r3, [r7, #491]	; 0x1eb
    if (b_A[0] < 0.0) {
 800d248:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 800d24c:	f04f 0200 	mov.w	r2, #0
 800d250:	f04f 0300 	mov.w	r3, #0
 800d254:	f7f3 fc34 	bl	8000ac0 <__aeabi_dcmplt>
 800d258:	4603      	mov	r3, r0
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d008      	beq.n	800d270 <svd_u3DvUgOe+0x138>
      b_s[0] = -nrm;
 800d25e:	f8d7 41c8 	ldr.w	r4, [r7, #456]	; 0x1c8
 800d262:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800d266:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800d26a:	e9c7 4558 	strd	r4, r5, [r7, #352]	; 0x160
 800d26e:	e003      	b.n	800d278 <svd_u3DvUgOe+0x140>
    } else {
      b_s[0] = nrm;
 800d270:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 800d274:	e9c7 2358 	strd	r2, r3, [r7, #352]	; 0x160
    }

    if (fabs(b_s[0]) >= 1.0020841800044864E-292) {
 800d278:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 800d27c:	4690      	mov	r8, r2
 800d27e:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 800d282:	f04f 0200 	mov.w	r2, #0
 800d286:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800d28a:	4640      	mov	r0, r8
 800d28c:	4649      	mov	r1, r9
 800d28e:	f7f3 fc2b 	bl	8000ae8 <__aeabi_dcmpge>
 800d292:	4603      	mov	r3, r0
 800d294:	2b00      	cmp	r3, #0
 800d296:	d016      	beq.n	800d2c6 <svd_u3DvUgOe+0x18e>
      xscal_59GtRAwv(3, 1.0 / b_s[0], b_A, 1);
 800d298:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 800d29c:	f04f 0000 	mov.w	r0, #0
 800d2a0:	49c1      	ldr	r1, [pc, #772]	; (800d5a8 <svd_u3DvUgOe+0x470>)
 800d2a2:	f7f3 fac5 	bl	8000830 <__aeabi_ddiv>
 800d2a6:	4602      	mov	r2, r0
 800d2a8:	460b      	mov	r3, r1
 800d2aa:	ec43 2b17 	vmov	d7, r2, r3
 800d2ae:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800d2b2:	2201      	movs	r2, #1
 800d2b4:	4619      	mov	r1, r3
 800d2b6:	eeb0 0a47 	vmov.f32	s0, s14
 800d2ba:	eef0 0a67 	vmov.f32	s1, s15
 800d2be:	2003      	movs	r0, #3
 800d2c0:	f002 fe36 	bl	800ff30 <xscal_59GtRAwv>
 800d2c4:	e026      	b.n	800d314 <svd_u3DvUgOe+0x1dc>
    } else {
      for (qjj = 0; qjj < 3; qjj++) {
 800d2c6:	2300      	movs	r3, #0
 800d2c8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800d2cc:	e01e      	b.n	800d30c <svd_u3DvUgOe+0x1d4>
        b_A[qjj] /= b_s[0];
 800d2ce:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800d2d2:	00db      	lsls	r3, r3, #3
 800d2d4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d2d8:	4413      	add	r3, r2
 800d2da:	3b88      	subs	r3, #136	; 0x88
 800d2dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d2e0:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 800d2e4:	f7f3 faa4 	bl	8000830 <__aeabi_ddiv>
 800d2e8:	4602      	mov	r2, r0
 800d2ea:	460b      	mov	r3, r1
 800d2ec:	4610      	mov	r0, r2
 800d2ee:	4619      	mov	r1, r3
 800d2f0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800d2f4:	00db      	lsls	r3, r3, #3
 800d2f6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d2fa:	4413      	add	r3, r2
 800d2fc:	3b88      	subs	r3, #136	; 0x88
 800d2fe:	e9c3 0100 	strd	r0, r1, [r3]
      for (qjj = 0; qjj < 3; qjj++) {
 800d302:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800d306:	3301      	adds	r3, #1
 800d308:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800d30c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800d310:	2b02      	cmp	r3, #2
 800d312:	dddc      	ble.n	800d2ce <svd_u3DvUgOe+0x196>
      }
    }

    b_A[0]++;
 800d314:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 800d318:	f04f 0200 	mov.w	r2, #0
 800d31c:	4ba2      	ldr	r3, [pc, #648]	; (800d5a8 <svd_u3DvUgOe+0x470>)
 800d31e:	f7f2 ffa7 	bl	8000270 <__adddf3>
 800d322:	4602      	mov	r2, r0
 800d324:	460b      	mov	r3, r1
 800d326:	e9c7 235e 	strd	r2, r3, [r7, #376]	; 0x178
    b_s[0] = -b_s[0];
 800d32a:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 800d32e:	4692      	mov	sl, r2
 800d330:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 800d334:	e9c7 ab58 	strd	sl, fp, [r7, #352]	; 0x160
 800d338:	e005      	b.n	800d346 <svd_u3DvUgOe+0x20e>
  } else {
    b_s[0] = 0.0;
 800d33a:	f04f 0200 	mov.w	r2, #0
 800d33e:	f04f 0300 	mov.w	r3, #0
 800d342:	e9c7 2358 	strd	r2, r3, [r7, #352]	; 0x160
  }

  for (d = 1; d + 1 < 4; d++) {
 800d346:	2301      	movs	r3, #1
 800d348:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 800d34c:	e047      	b.n	800d3de <svd_u3DvUgOe+0x2a6>
    qjj = 3 * d;
 800d34e:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 800d352:	4613      	mov	r3, r2
 800d354:	005b      	lsls	r3, r3, #1
 800d356:	4413      	add	r3, r2
 800d358:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    if (apply_transform) {
 800d35c:	f897 31eb 	ldrb.w	r3, [r7, #491]	; 0x1eb
 800d360:	2b00      	cmp	r3, #0
 800d362:	d025      	beq.n	800d3b0 <svd_u3DvUgOe+0x278>
      xaxpy_guu0hJif(3, -(xdotc_mznw4aLl(3, b_A, 1, b_A, qjj + 1) / b_A[0]), 1,
 800d364:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800d368:	3301      	adds	r3, #1
 800d36a:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 800d36e:	f507 71bc 	add.w	r1, r7, #376	; 0x178
 800d372:	9300      	str	r3, [sp, #0]
 800d374:	4613      	mov	r3, r2
 800d376:	2201      	movs	r2, #1
 800d378:	2003      	movs	r0, #3
 800d37a:	f001 fdf8 	bl	800ef6e <xdotc_mznw4aLl>
 800d37e:	ec51 0b10 	vmov	r0, r1, d0
 800d382:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 800d386:	f7f3 fa53 	bl	8000830 <__aeabi_ddiv>
 800d38a:	4602      	mov	r2, r0
 800d38c:	460b      	mov	r3, r1
 800d38e:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 800d392:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800d396:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800d39a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800d39e:	3301      	adds	r3, #1
 800d3a0:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 800d3a4:	2101      	movs	r1, #1
 800d3a6:	ed97 0b3e 	vldr	d0, [r7, #248]	; 0xf8
 800d3aa:	2003      	movs	r0, #3
 800d3ac:	f001 fd8b 	bl	800eec6 <xaxpy_guu0hJif>
                     b_A, qjj + 1);
    }

    e[d] = b_A[qjj];
 800d3b0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800d3b4:	00db      	lsls	r3, r3, #3
 800d3b6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d3ba:	4413      	add	r3, r2
 800d3bc:	3b88      	subs	r3, #136	; 0x88
 800d3be:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d3c2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800d3c6:	00db      	lsls	r3, r3, #3
 800d3c8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d3cc:	4413      	add	r3, r2
 800d3ce:	3bb8      	subs	r3, #184	; 0xb8
 800d3d0:	e9c3 0100 	strd	r0, r1, [r3]
  for (d = 1; d + 1 < 4; d++) {
 800d3d4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800d3d8:	3301      	adds	r3, #1
 800d3da:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 800d3de:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800d3e2:	2b02      	cmp	r3, #2
 800d3e4:	ddb3      	ble.n	800d34e <svd_u3DvUgOe+0x216>
  }

  while (qq + 1 < 4) {
 800d3e6:	e015      	b.n	800d414 <svd_u3DvUgOe+0x2dc>
    U[qq] = b_A[qq];
 800d3e8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d3ec:	00da      	lsls	r2, r3, #3
 800d3ee:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d3f2:	1899      	adds	r1, r3, r2
 800d3f4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d3f8:	00db      	lsls	r3, r3, #3
 800d3fa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d3fe:	4413      	add	r3, r2
 800d400:	3b88      	subs	r3, #136	; 0x88
 800d402:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d406:	e9c1 2300 	strd	r2, r3, [r1]
    qq++;
 800d40a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d40e:	3301      	adds	r3, #1
 800d410:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  while (qq + 1 < 4) {
 800d414:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d418:	2b02      	cmp	r3, #2
 800d41a:	dde5      	ble.n	800d3e8 <svd_u3DvUgOe+0x2b0>
  }

  nrm = xnrm2_Rlk0oxWw(2, e, 2);
 800d41c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800d420:	2202      	movs	r2, #2
 800d422:	4619      	mov	r1, r3
 800d424:	2002      	movs	r0, #2
 800d426:	f002 f95f 	bl	800f6e8 <xnrm2_Rlk0oxWw>
 800d42a:	ed87 0b72 	vstr	d0, [r7, #456]	; 0x1c8
  if (nrm == 0.0) {
 800d42e:	f04f 0200 	mov.w	r2, #0
 800d432:	f04f 0300 	mov.w	r3, #0
 800d436:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	; 0x1c8
 800d43a:	f7f3 fb37 	bl	8000aac <__aeabi_dcmpeq>
 800d43e:	4603      	mov	r3, r0
 800d440:	2b00      	cmp	r3, #0
 800d442:	d006      	beq.n	800d452 <svd_u3DvUgOe+0x31a>
    e[0] = 0.0;
 800d444:	f04f 0200 	mov.w	r2, #0
 800d448:	f04f 0300 	mov.w	r3, #0
 800d44c:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
 800d450:	e10d      	b.n	800d66e <svd_u3DvUgOe+0x536>
  } else {
    if (e[1] < 0.0) {
 800d452:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 800d456:	f04f 0200 	mov.w	r2, #0
 800d45a:	f04f 0300 	mov.w	r3, #0
 800d45e:	f7f3 fb2f 	bl	8000ac0 <__aeabi_dcmplt>
 800d462:	4603      	mov	r3, r0
 800d464:	2b00      	cmp	r3, #0
 800d466:	d00e      	beq.n	800d486 <svd_u3DvUgOe+0x34e>
      e[0] = -nrm;
 800d468:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800d46c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800d470:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800d474:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800d478:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800d47c:	ed97 7b3c 	vldr	d7, [r7, #240]	; 0xf0
 800d480:	ed87 7b52 	vstr	d7, [r7, #328]	; 0x148
 800d484:	e003      	b.n	800d48e <svd_u3DvUgOe+0x356>
    } else {
      e[0] = nrm;
 800d486:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 800d48a:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
    }

    nrm = e[0];
 800d48e:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800d492:	e9c7 2372 	strd	r2, r3, [r7, #456]	; 0x1c8
    if (fabs(e[0]) >= 1.0020841800044864E-292) {
 800d496:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800d49a:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 800d49e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d4a2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800d4a6:	f04f 0200 	mov.w	r2, #0
 800d4aa:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800d4ae:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 800d4b2:	f7f3 fb19 	bl	8000ae8 <__aeabi_dcmpge>
 800d4b6:	4603      	mov	r3, r0
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d016      	beq.n	800d4ea <svd_u3DvUgOe+0x3b2>
      xscal_PLmmUlD2(2, 1.0 / e[0], e, 2);
 800d4bc:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800d4c0:	f04f 0000 	mov.w	r0, #0
 800d4c4:	4938      	ldr	r1, [pc, #224]	; (800d5a8 <svd_u3DvUgOe+0x470>)
 800d4c6:	f7f3 f9b3 	bl	8000830 <__aeabi_ddiv>
 800d4ca:	4602      	mov	r2, r0
 800d4cc:	460b      	mov	r3, r1
 800d4ce:	ec43 2b17 	vmov	d7, r2, r3
 800d4d2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800d4d6:	2202      	movs	r2, #2
 800d4d8:	4619      	mov	r1, r3
 800d4da:	eeb0 0a47 	vmov.f32	s0, s14
 800d4de:	eef0 0a67 	vmov.f32	s1, s15
 800d4e2:	2002      	movs	r0, #2
 800d4e4:	f002 fd58 	bl	800ff98 <xscal_PLmmUlD2>
 800d4e8:	e026      	b.n	800d538 <svd_u3DvUgOe+0x400>
    } else {
      for (qq = 1; qq < 3; qq++) {
 800d4ea:	2301      	movs	r3, #1
 800d4ec:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800d4f0:	e01e      	b.n	800d530 <svd_u3DvUgOe+0x3f8>
        e[qq] /= nrm;
 800d4f2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d4f6:	00db      	lsls	r3, r3, #3
 800d4f8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d4fc:	4413      	add	r3, r2
 800d4fe:	3bb8      	subs	r3, #184	; 0xb8
 800d500:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d504:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 800d508:	f7f3 f992 	bl	8000830 <__aeabi_ddiv>
 800d50c:	4602      	mov	r2, r0
 800d50e:	460b      	mov	r3, r1
 800d510:	4610      	mov	r0, r2
 800d512:	4619      	mov	r1, r3
 800d514:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d518:	00db      	lsls	r3, r3, #3
 800d51a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d51e:	4413      	add	r3, r2
 800d520:	3bb8      	subs	r3, #184	; 0xb8
 800d522:	e9c3 0100 	strd	r0, r1, [r3]
      for (qq = 1; qq < 3; qq++) {
 800d526:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d52a:	3301      	adds	r3, #1
 800d52c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800d530:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d534:	2b02      	cmp	r3, #2
 800d536:	dddc      	ble.n	800d4f2 <svd_u3DvUgOe+0x3ba>
      }
    }

    e[1]++;
 800d538:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 800d53c:	f04f 0200 	mov.w	r2, #0
 800d540:	4b19      	ldr	r3, [pc, #100]	; (800d5a8 <svd_u3DvUgOe+0x470>)
 800d542:	f7f2 fe95 	bl	8000270 <__adddf3>
 800d546:	4602      	mov	r2, r0
 800d548:	460b      	mov	r3, r1
 800d54a:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
    e[0] = -e[0];
 800d54e:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800d552:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 800d556:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800d55a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800d55e:	ed97 7b38 	vldr	d7, [r7, #224]	; 0xe0
 800d562:	ed87 7b52 	vstr	d7, [r7, #328]	; 0x148
    for (qq = 2; qq < 4; qq++) {
 800d566:	2302      	movs	r3, #2
 800d568:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800d56c:	e013      	b.n	800d596 <svd_u3DvUgOe+0x45e>
      work[qq - 1] = 0.0;
 800d56e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d572:	3b01      	subs	r3, #1
 800d574:	00db      	lsls	r3, r3, #3
 800d576:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d57a:	4413      	add	r3, r2
 800d57c:	f1a3 01d0 	sub.w	r1, r3, #208	; 0xd0
 800d580:	f04f 0200 	mov.w	r2, #0
 800d584:	f04f 0300 	mov.w	r3, #0
 800d588:	e9c1 2300 	strd	r2, r3, [r1]
    for (qq = 2; qq < 4; qq++) {
 800d58c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d590:	3301      	adds	r3, #1
 800d592:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800d596:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d59a:	2b03      	cmp	r3, #3
 800d59c:	dde7      	ble.n	800d56e <svd_u3DvUgOe+0x436>
    }

    for (qq = 1; qq + 1 < 4; qq++) {
 800d59e:	2301      	movs	r3, #1
 800d5a0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800d5a4:	e025      	b.n	800d5f2 <svd_u3DvUgOe+0x4ba>
 800d5a6:	bf00      	nop
 800d5a8:	3ff00000 	.word	0x3ff00000
      xaxpy_OQ28XA21(2, e[qq], b_A, 3 * qq + 2, work, 2);
 800d5ac:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d5b0:	00db      	lsls	r3, r3, #3
 800d5b2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d5b6:	4413      	add	r3, r2
 800d5b8:	3bb8      	subs	r3, #184	; 0xb8
 800d5ba:	ed93 7b00 	vldr	d7, [r3]
 800d5be:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 800d5c2:	4613      	mov	r3, r2
 800d5c4:	005b      	lsls	r3, r3, #1
 800d5c6:	4413      	add	r3, r2
 800d5c8:	1c98      	adds	r0, r3, #2
 800d5ca:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800d5ce:	f507 71bc 	add.w	r1, r7, #376	; 0x178
 800d5d2:	2302      	movs	r3, #2
 800d5d4:	9300      	str	r3, [sp, #0]
 800d5d6:	4613      	mov	r3, r2
 800d5d8:	4602      	mov	r2, r0
 800d5da:	eeb0 0a47 	vmov.f32	s0, s14
 800d5de:	eef0 0a67 	vmov.f32	s1, s15
 800d5e2:	2002      	movs	r0, #2
 800d5e4:	f001 fbc7 	bl	800ed76 <xaxpy_OQ28XA21>
    for (qq = 1; qq + 1 < 4; qq++) {
 800d5e8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d5ec:	3301      	adds	r3, #1
 800d5ee:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800d5f2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d5f6:	2b02      	cmp	r3, #2
 800d5f8:	ddd8      	ble.n	800d5ac <svd_u3DvUgOe+0x474>
    }

    for (qq = 1; qq + 1 < 4; qq++) {
 800d5fa:	2301      	movs	r3, #1
 800d5fc:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800d600:	e031      	b.n	800d666 <svd_u3DvUgOe+0x52e>
      xaxpy_Wxch84Fl(2, -e[qq] / e[1], work, 2, b_A, 3 * qq + 2);
 800d602:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d606:	00db      	lsls	r3, r3, #3
 800d608:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d60c:	4413      	add	r3, r2
 800d60e:	3bb8      	subs	r3, #184	; 0xb8
 800d610:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d614:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 800d618:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800d61c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800d620:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 800d624:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800d628:	f7f3 f902 	bl	8000830 <__aeabi_ddiv>
 800d62c:	4602      	mov	r2, r0
 800d62e:	460b      	mov	r3, r1
 800d630:	ec43 2b17 	vmov	d7, r2, r3
 800d634:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 800d638:	4613      	mov	r3, r2
 800d63a:	005b      	lsls	r3, r3, #1
 800d63c:	4413      	add	r3, r2
 800d63e:	3302      	adds	r3, #2
 800d640:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 800d644:	f507 7198 	add.w	r1, r7, #304	; 0x130
 800d648:	9300      	str	r3, [sp, #0]
 800d64a:	4613      	mov	r3, r2
 800d64c:	2202      	movs	r2, #2
 800d64e:	eeb0 0a47 	vmov.f32	s0, s14
 800d652:	eef0 0a67 	vmov.f32	s1, s15
 800d656:	2002      	movs	r0, #2
 800d658:	f001 fbe1 	bl	800ee1e <xaxpy_Wxch84Fl>
    for (qq = 1; qq + 1 < 4; qq++) {
 800d65c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d660:	3301      	adds	r3, #1
 800d662:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800d666:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d66a:	2b02      	cmp	r3, #2
 800d66c:	ddc9      	ble.n	800d602 <svd_u3DvUgOe+0x4ca>
    }
  }

  for (qq = 1; qq + 1 < 4; qq++) {
 800d66e:	2301      	movs	r3, #1
 800d670:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800d674:	e016      	b.n	800d6a4 <svd_u3DvUgOe+0x56c>
    V[qq] = e[qq];
 800d676:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d67a:	00da      	lsls	r2, r3, #3
 800d67c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	1899      	adds	r1, r3, r2
 800d684:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d688:	00db      	lsls	r3, r3, #3
 800d68a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d68e:	4413      	add	r3, r2
 800d690:	3bb8      	subs	r3, #184	; 0xb8
 800d692:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d696:	e9c1 2300 	strd	r2, r3, [r1]
  for (qq = 1; qq + 1 < 4; qq++) {
 800d69a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d69e:	3301      	adds	r3, #1
 800d6a0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800d6a4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d6a8:	2b02      	cmp	r3, #2
 800d6aa:	dde4      	ble.n	800d676 <svd_u3DvUgOe+0x53e>
  }

  apply_transform = false;
 800d6ac:	2300      	movs	r3, #0
 800d6ae:	f887 31eb 	strb.w	r3, [r7, #491]	; 0x1eb
  nrm = xnrm2_xDOlDEtw(2, b_A, 5);
 800d6b2:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800d6b6:	2205      	movs	r2, #5
 800d6b8:	4619      	mov	r1, r3
 800d6ba:	2002      	movs	r0, #2
 800d6bc:	f002 f970 	bl	800f9a0 <xnrm2_xDOlDEtw>
 800d6c0:	ed87 0b72 	vstr	d0, [r7, #456]	; 0x1c8
  if (nrm > 0.0) {
 800d6c4:	f04f 0200 	mov.w	r2, #0
 800d6c8:	f04f 0300 	mov.w	r3, #0
 800d6cc:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	; 0x1c8
 800d6d0:	f7f3 fa14 	bl	8000afc <__aeabi_dcmpgt>
 800d6d4:	4603      	mov	r3, r0
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	f000 808a 	beq.w	800d7f0 <svd_u3DvUgOe+0x6b8>
    apply_transform = true;
 800d6dc:	2301      	movs	r3, #1
 800d6de:	f887 31eb 	strb.w	r3, [r7, #491]	; 0x1eb
    if (b_A[4] < 0.0) {
 800d6e2:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800d6e6:	f04f 0200 	mov.w	r2, #0
 800d6ea:	f04f 0300 	mov.w	r3, #0
 800d6ee:	f7f3 f9e7 	bl	8000ac0 <__aeabi_dcmplt>
 800d6f2:	4603      	mov	r3, r0
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d00e      	beq.n	800d716 <svd_u3DvUgOe+0x5de>
      b_s[1] = -nrm;
 800d6f8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800d6fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d700:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800d704:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800d708:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800d70c:	ed97 7b34 	vldr	d7, [r7, #208]	; 0xd0
 800d710:	ed87 7b5a 	vstr	d7, [r7, #360]	; 0x168
 800d714:	e003      	b.n	800d71e <svd_u3DvUgOe+0x5e6>
    } else {
      b_s[1] = nrm;
 800d716:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 800d71a:	e9c7 235a 	strd	r2, r3, [r7, #360]	; 0x168
    }

    if (fabs(b_s[1]) >= 1.0020841800044864E-292) {
 800d71e:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 800d722:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 800d726:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d72a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800d72e:	f04f 0200 	mov.w	r2, #0
 800d732:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800d736:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800d73a:	f7f3 f9d5 	bl	8000ae8 <__aeabi_dcmpge>
 800d73e:	4603      	mov	r3, r0
 800d740:	2b00      	cmp	r3, #0
 800d742:	d016      	beq.n	800d772 <svd_u3DvUgOe+0x63a>
      xscal_59GtRAwv(2, 1.0 / b_s[1], b_A, 5);
 800d744:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 800d748:	f04f 0000 	mov.w	r0, #0
 800d74c:	49d6      	ldr	r1, [pc, #856]	; (800daa8 <svd_u3DvUgOe+0x970>)
 800d74e:	f7f3 f86f 	bl	8000830 <__aeabi_ddiv>
 800d752:	4602      	mov	r2, r0
 800d754:	460b      	mov	r3, r1
 800d756:	ec43 2b17 	vmov	d7, r2, r3
 800d75a:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800d75e:	2205      	movs	r2, #5
 800d760:	4619      	mov	r1, r3
 800d762:	eeb0 0a47 	vmov.f32	s0, s14
 800d766:	eef0 0a67 	vmov.f32	s1, s15
 800d76a:	2002      	movs	r0, #2
 800d76c:	f002 fbe0 	bl	800ff30 <xscal_59GtRAwv>
 800d770:	e026      	b.n	800d7c0 <svd_u3DvUgOe+0x688>
    } else {
      for (qjj = 4; qjj < 6; qjj++) {
 800d772:	2304      	movs	r3, #4
 800d774:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800d778:	e01e      	b.n	800d7b8 <svd_u3DvUgOe+0x680>
        b_A[qjj] /= b_s[1];
 800d77a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800d77e:	00db      	lsls	r3, r3, #3
 800d780:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d784:	4413      	add	r3, r2
 800d786:	3b88      	subs	r3, #136	; 0x88
 800d788:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d78c:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 800d790:	f7f3 f84e 	bl	8000830 <__aeabi_ddiv>
 800d794:	4602      	mov	r2, r0
 800d796:	460b      	mov	r3, r1
 800d798:	4610      	mov	r0, r2
 800d79a:	4619      	mov	r1, r3
 800d79c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800d7a0:	00db      	lsls	r3, r3, #3
 800d7a2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d7a6:	4413      	add	r3, r2
 800d7a8:	3b88      	subs	r3, #136	; 0x88
 800d7aa:	e9c3 0100 	strd	r0, r1, [r3]
      for (qjj = 4; qjj < 6; qjj++) {
 800d7ae:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800d7b2:	3301      	adds	r3, #1
 800d7b4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800d7b8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800d7bc:	2b05      	cmp	r3, #5
 800d7be:	dddc      	ble.n	800d77a <svd_u3DvUgOe+0x642>
      }
    }

    b_A[4]++;
 800d7c0:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800d7c4:	f04f 0200 	mov.w	r2, #0
 800d7c8:	4bb7      	ldr	r3, [pc, #732]	; (800daa8 <svd_u3DvUgOe+0x970>)
 800d7ca:	f7f2 fd51 	bl	8000270 <__adddf3>
 800d7ce:	4602      	mov	r2, r0
 800d7d0:	460b      	mov	r3, r1
 800d7d2:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
    b_s[1] = -b_s[1];
 800d7d6:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 800d7da:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 800d7de:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800d7e2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d7e6:	ed97 7b30 	vldr	d7, [r7, #192]	; 0xc0
 800d7ea:	ed87 7b5a 	vstr	d7, [r7, #360]	; 0x168
 800d7ee:	e005      	b.n	800d7fc <svd_u3DvUgOe+0x6c4>
  } else {
    b_s[1] = 0.0;
 800d7f0:	f04f 0200 	mov.w	r2, #0
 800d7f4:	f04f 0300 	mov.w	r3, #0
 800d7f8:	e9c7 235a 	strd	r2, r3, [r7, #360]	; 0x168
  }

  for (d = 2; d + 1 < 4; d++) {
 800d7fc:	2302      	movs	r3, #2
 800d7fe:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 800d802:	e048      	b.n	800d896 <svd_u3DvUgOe+0x75e>
    qjj = 3 * d + 1;
 800d804:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 800d808:	4613      	mov	r3, r2
 800d80a:	005b      	lsls	r3, r3, #1
 800d80c:	4413      	add	r3, r2
 800d80e:	3301      	adds	r3, #1
 800d810:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    if (apply_transform) {
 800d814:	f897 31eb 	ldrb.w	r3, [r7, #491]	; 0x1eb
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d025      	beq.n	800d868 <svd_u3DvUgOe+0x730>
      xaxpy_guu0hJif(2, -(xdotc_mznw4aLl(2, b_A, 5, b_A, qjj + 1) / b_A[4]), 5,
 800d81c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800d820:	3301      	adds	r3, #1
 800d822:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 800d826:	f507 71bc 	add.w	r1, r7, #376	; 0x178
 800d82a:	9300      	str	r3, [sp, #0]
 800d82c:	4613      	mov	r3, r2
 800d82e:	2205      	movs	r2, #5
 800d830:	2002      	movs	r0, #2
 800d832:	f001 fb9c 	bl	800ef6e <xdotc_mznw4aLl>
 800d836:	ec51 0b10 	vmov	r0, r1, d0
 800d83a:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 800d83e:	f7f2 fff7 	bl	8000830 <__aeabi_ddiv>
 800d842:	4602      	mov	r2, r0
 800d844:	460b      	mov	r3, r1
 800d846:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 800d84a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800d84e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800d852:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800d856:	3301      	adds	r3, #1
 800d858:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 800d85c:	2105      	movs	r1, #5
 800d85e:	ed97 0b2e 	vldr	d0, [r7, #184]	; 0xb8
 800d862:	2002      	movs	r0, #2
 800d864:	f001 fb2f 	bl	800eec6 <xaxpy_guu0hJif>
                     b_A, qjj + 1);
    }

    e[d] = b_A[qjj];
 800d868:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800d86c:	00db      	lsls	r3, r3, #3
 800d86e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d872:	4413      	add	r3, r2
 800d874:	3b88      	subs	r3, #136	; 0x88
 800d876:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d87a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800d87e:	00db      	lsls	r3, r3, #3
 800d880:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d884:	4413      	add	r3, r2
 800d886:	3bb8      	subs	r3, #184	; 0xb8
 800d888:	e9c3 0100 	strd	r0, r1, [r3]
  for (d = 2; d + 1 < 4; d++) {
 800d88c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800d890:	3301      	adds	r3, #1
 800d892:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 800d896:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800d89a:	2b02      	cmp	r3, #2
 800d89c:	ddb2      	ble.n	800d804 <svd_u3DvUgOe+0x6cc>
  }

  for (qq = 1; qq + 1 < 4; qq++) {
 800d89e:	2301      	movs	r3, #1
 800d8a0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800d8a4:	e017      	b.n	800d8d6 <svd_u3DvUgOe+0x79e>
    U[qq + 3] = b_A[qq + 3];
 800d8a6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d8aa:	1cd8      	adds	r0, r3, #3
 800d8ac:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d8b0:	3303      	adds	r3, #3
 800d8b2:	00da      	lsls	r2, r3, #3
 800d8b4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d8b8:	1899      	adds	r1, r3, r2
 800d8ba:	00c3      	lsls	r3, r0, #3
 800d8bc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d8c0:	4413      	add	r3, r2
 800d8c2:	3b88      	subs	r3, #136	; 0x88
 800d8c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8c8:	e9c1 2300 	strd	r2, r3, [r1]
  for (qq = 1; qq + 1 < 4; qq++) {
 800d8cc:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d8d0:	3301      	adds	r3, #1
 800d8d2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800d8d6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d8da:	2b02      	cmp	r3, #2
 800d8dc:	dde3      	ble.n	800d8a6 <svd_u3DvUgOe+0x76e>
  }

  m = 1;
 800d8de:	2301      	movs	r3, #1
 800d8e0:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  b_s[2] = b_A[8];
 800d8e4:	e9d7 236e 	ldrd	r2, r3, [r7, #440]	; 0x1b8
 800d8e8:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170
  U[6] = 0.0;
 800d8ec:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d8f0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d8f4:	f04f 0200 	mov.w	r2, #0
 800d8f8:	f04f 0300 	mov.w	r3, #0
 800d8fc:	e9c1 2300 	strd	r2, r3, [r1]
  U[7] = 0.0;
 800d900:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d904:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d908:	f04f 0200 	mov.w	r2, #0
 800d90c:	f04f 0300 	mov.w	r3, #0
 800d910:	e9c1 2300 	strd	r2, r3, [r1]
  U[8] = 1.0;
 800d914:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d918:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800d91c:	f04f 0200 	mov.w	r2, #0
 800d920:	4b61      	ldr	r3, [pc, #388]	; (800daa8 <svd_u3DvUgOe+0x970>)
 800d922:	e9c1 2300 	strd	r2, r3, [r1]
  for (d = 1; d >= 0; d--) {
 800d926:	2301      	movs	r3, #1
 800d928:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 800d92c:	e100      	b.n	800db30 <svd_u3DvUgOe+0x9f8>
    qq = 3 * d + d;
 800d92e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800d932:	009b      	lsls	r3, r3, #2
 800d934:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    if (b_s[d] != 0.0) {
 800d938:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800d93c:	00db      	lsls	r3, r3, #3
 800d93e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d942:	4413      	add	r3, r2
 800d944:	3ba0      	subs	r3, #160	; 0xa0
 800d946:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d94a:	f04f 0200 	mov.w	r2, #0
 800d94e:	f04f 0300 	mov.w	r3, #0
 800d952:	f7f3 f8ab 	bl	8000aac <__aeabi_dcmpeq>
 800d956:	4603      	mov	r3, r0
 800d958:	2b00      	cmp	r3, #0
 800d95a:	f040 80a7 	bne.w	800daac <svd_u3DvUgOe+0x974>
      for (kase = d + 1; kase + 1 < 4; kase++) {
 800d95e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800d962:	3301      	adds	r3, #1
 800d964:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 800d968:	e043      	b.n	800d9f2 <svd_u3DvUgOe+0x8ba>
        qjj = (3 * kase + d) + 1;
 800d96a:	f8d7 21f8 	ldr.w	r2, [r7, #504]	; 0x1f8
 800d96e:	4613      	mov	r3, r2
 800d970:	005b      	lsls	r3, r3, #1
 800d972:	441a      	add	r2, r3
 800d974:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800d978:	4413      	add	r3, r2
 800d97a:	3301      	adds	r3, #1
 800d97c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
        xaxpy_guu0hJif(3 - d, -(xdotc_mznw4aLl(3 - d, U, qq + 1, U, qjj) / U[qq]),
 800d980:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800d984:	f1c3 0403 	rsb	r4, r3, #3
 800d988:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800d98c:	f1c3 0003 	rsb	r0, r3, #3
 800d990:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d994:	1c5a      	adds	r2, r3, #1
 800d996:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800d99a:	9300      	str	r3, [sp, #0]
 800d99c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d9a0:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 800d9a4:	f001 fae3 	bl	800ef6e <xdotc_mznw4aLl>
 800d9a8:	ec51 0b10 	vmov	r0, r1, d0
 800d9ac:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d9b0:	00da      	lsls	r2, r3, #3
 800d9b2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d9b6:	4413      	add	r3, r2
 800d9b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9bc:	f7f2 ff38 	bl	8000830 <__aeabi_ddiv>
 800d9c0:	4602      	mov	r2, r0
 800d9c2:	460b      	mov	r3, r1
 800d9c4:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 800d9c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800d9cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d9d0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d9d4:	1c59      	adds	r1, r3, #1
 800d9d6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800d9da:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 800d9de:	ed97 0b2c 	vldr	d0, [r7, #176]	; 0xb0
 800d9e2:	4620      	mov	r0, r4
 800d9e4:	f001 fa6f 	bl	800eec6 <xaxpy_guu0hJif>
      for (kase = d + 1; kase + 1 < 4; kase++) {
 800d9e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800d9ec:	3301      	adds	r3, #1
 800d9ee:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 800d9f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800d9f6:	2b02      	cmp	r3, #2
 800d9f8:	ddb7      	ble.n	800d96a <svd_u3DvUgOe+0x832>
                       qq + 1, U, qjj);
      }

      for (qjj = d; qjj + 1 < 4; qjj++) {
 800d9fa:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800d9fe:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800da02:	e026      	b.n	800da52 <svd_u3DvUgOe+0x91a>
        kase = 3 * d + qjj;
 800da04:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 800da08:	4613      	mov	r3, r2
 800da0a:	005b      	lsls	r3, r3, #1
 800da0c:	441a      	add	r2, r3
 800da0e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800da12:	4413      	add	r3, r2
 800da14:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        U[kase] = -U[kase];
 800da18:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800da1c:	00da      	lsls	r2, r3, #3
 800da1e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800da22:	4413      	add	r3, r2
 800da24:	e9d3 0100 	ldrd	r0, r1, [r3]
 800da28:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800da2c:	00da      	lsls	r2, r3, #3
 800da2e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800da32:	4413      	add	r3, r2
 800da34:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
 800da38:	f081 4200 	eor.w	r2, r1, #2147483648	; 0x80000000
 800da3c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800da40:	ed97 7b2a 	vldr	d7, [r7, #168]	; 0xa8
 800da44:	ed83 7b00 	vstr	d7, [r3]
      for (qjj = d; qjj + 1 < 4; qjj++) {
 800da48:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800da4c:	3301      	adds	r3, #1
 800da4e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800da52:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800da56:	2b02      	cmp	r3, #2
 800da58:	ddd4      	ble.n	800da04 <svd_u3DvUgOe+0x8cc>
      }

      U[qq]++;
 800da5a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800da5e:	00da      	lsls	r2, r3, #3
 800da60:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800da64:	189c      	adds	r4, r3, r2
 800da66:	e9d4 0100 	ldrd	r0, r1, [r4]
 800da6a:	f04f 0200 	mov.w	r2, #0
 800da6e:	4b0e      	ldr	r3, [pc, #56]	; (800daa8 <svd_u3DvUgOe+0x970>)
 800da70:	f7f2 fbfe 	bl	8000270 <__adddf3>
 800da74:	4602      	mov	r2, r0
 800da76:	460b      	mov	r3, r1
 800da78:	e9c4 2300 	strd	r2, r3, [r4]
      if (d - 1 >= 0) {
 800da7c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800da80:	2b00      	cmp	r3, #0
 800da82:	dd50      	ble.n	800db26 <svd_u3DvUgOe+0x9ee>
        U[3 * d] = 0.0;
 800da84:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 800da88:	4613      	mov	r3, r2
 800da8a:	005b      	lsls	r3, r3, #1
 800da8c:	4413      	add	r3, r2
 800da8e:	00db      	lsls	r3, r3, #3
 800da90:	461a      	mov	r2, r3
 800da92:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800da96:	1899      	adds	r1, r3, r2
 800da98:	f04f 0200 	mov.w	r2, #0
 800da9c:	f04f 0300 	mov.w	r3, #0
 800daa0:	e9c1 2300 	strd	r2, r3, [r1]
 800daa4:	e03f      	b.n	800db26 <svd_u3DvUgOe+0x9ee>
 800daa6:	bf00      	nop
 800daa8:	3ff00000 	.word	0x3ff00000
      }
    } else {
      U[3 * d] = 0.0;
 800daac:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 800dab0:	4613      	mov	r3, r2
 800dab2:	005b      	lsls	r3, r3, #1
 800dab4:	4413      	add	r3, r2
 800dab6:	00db      	lsls	r3, r3, #3
 800dab8:	461a      	mov	r2, r3
 800daba:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800dabe:	1899      	adds	r1, r3, r2
 800dac0:	f04f 0200 	mov.w	r2, #0
 800dac4:	f04f 0300 	mov.w	r3, #0
 800dac8:	e9c1 2300 	strd	r2, r3, [r1]
      U[3 * d + 1] = 0.0;
 800dacc:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 800dad0:	4613      	mov	r3, r2
 800dad2:	005b      	lsls	r3, r3, #1
 800dad4:	4413      	add	r3, r2
 800dad6:	00db      	lsls	r3, r3, #3
 800dad8:	f103 0208 	add.w	r2, r3, #8
 800dadc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800dae0:	1899      	adds	r1, r3, r2
 800dae2:	f04f 0200 	mov.w	r2, #0
 800dae6:	f04f 0300 	mov.w	r3, #0
 800daea:	e9c1 2300 	strd	r2, r3, [r1]
      U[3 * d + 2] = 0.0;
 800daee:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 800daf2:	4613      	mov	r3, r2
 800daf4:	005b      	lsls	r3, r3, #1
 800daf6:	4413      	add	r3, r2
 800daf8:	00db      	lsls	r3, r3, #3
 800dafa:	f103 0210 	add.w	r2, r3, #16
 800dafe:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800db02:	1899      	adds	r1, r3, r2
 800db04:	f04f 0200 	mov.w	r2, #0
 800db08:	f04f 0300 	mov.w	r3, #0
 800db0c:	e9c1 2300 	strd	r2, r3, [r1]
      U[qq] = 1.0;
 800db10:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800db14:	00da      	lsls	r2, r3, #3
 800db16:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800db1a:	1899      	adds	r1, r3, r2
 800db1c:	f04f 0200 	mov.w	r2, #0
 800db20:	4b11      	ldr	r3, [pc, #68]	; (800db68 <svd_u3DvUgOe+0xa30>)
 800db22:	e9c1 2300 	strd	r2, r3, [r1]
  for (d = 1; d >= 0; d--) {
 800db26:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800db2a:	3b01      	subs	r3, #1
 800db2c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 800db30:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800db34:	2b00      	cmp	r3, #0
 800db36:	f6bf aefa 	bge.w	800d92e <svd_u3DvUgOe+0x7f6>
    }
  }

  for (qq = 2; qq >= 0; qq--) {
 800db3a:	2302      	movs	r3, #2
 800db3c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800db40:	e096      	b.n	800dc70 <svd_u3DvUgOe+0xb38>
    if ((qq + 1 <= 1) && (e[0] != 0.0)) {
 800db42:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800db46:	2b00      	cmp	r3, #0
 800db48:	dc4c      	bgt.n	800dbe4 <svd_u3DvUgOe+0xaac>
 800db4a:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800db4e:	f04f 0200 	mov.w	r2, #0
 800db52:	f04f 0300 	mov.w	r3, #0
 800db56:	f7f2 ffa9 	bl	8000aac <__aeabi_dcmpeq>
 800db5a:	4603      	mov	r3, r0
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d141      	bne.n	800dbe4 <svd_u3DvUgOe+0xaac>
      for (d = 2; d < 4; d++) {
 800db60:	2302      	movs	r3, #2
 800db62:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 800db66:	e039      	b.n	800dbdc <svd_u3DvUgOe+0xaa4>
 800db68:	3ff00000 	.word	0x3ff00000
        qjj = (d - 1) * 3 + 2;
 800db6c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800db70:	1e5a      	subs	r2, r3, #1
 800db72:	4613      	mov	r3, r2
 800db74:	005b      	lsls	r3, r3, #1
 800db76:	4413      	add	r3, r2
 800db78:	3302      	adds	r3, #2
 800db7a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
        xaxpy_guu0hJif(2, -(xdotc_mznw4aLl(2, V, 2, V, qjj) / V[1]), 2, V, qjj);
 800db7e:	f507 7280 	add.w	r2, r7, #256	; 0x100
 800db82:	f507 7180 	add.w	r1, r7, #256	; 0x100
 800db86:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800db8a:	9300      	str	r3, [sp, #0]
 800db8c:	6813      	ldr	r3, [r2, #0]
 800db8e:	2202      	movs	r2, #2
 800db90:	6809      	ldr	r1, [r1, #0]
 800db92:	2002      	movs	r0, #2
 800db94:	f001 f9eb 	bl	800ef6e <xdotc_mznw4aLl>
 800db98:	ec51 0b10 	vmov	r0, r1, d0
 800db9c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	3308      	adds	r3, #8
 800dba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dba8:	f7f2 fe42 	bl	8000830 <__aeabi_ddiv>
 800dbac:	4602      	mov	r2, r0
 800dbae:	460b      	mov	r3, r1
 800dbb0:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 800dbb4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800dbb8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800dbbc:	f507 7280 	add.w	r2, r7, #256	; 0x100
 800dbc0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800dbc4:	6812      	ldr	r2, [r2, #0]
 800dbc6:	2102      	movs	r1, #2
 800dbc8:	ed97 0b28 	vldr	d0, [r7, #160]	; 0xa0
 800dbcc:	2002      	movs	r0, #2
 800dbce:	f001 f97a 	bl	800eec6 <xaxpy_guu0hJif>
      for (d = 2; d < 4; d++) {
 800dbd2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800dbd6:	3301      	adds	r3, #1
 800dbd8:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 800dbdc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800dbe0:	2b03      	cmp	r3, #3
 800dbe2:	ddc3      	ble.n	800db6c <svd_u3DvUgOe+0xa34>
      }
    }

    V[3 * qq] = 0.0;
 800dbe4:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 800dbe8:	4613      	mov	r3, r2
 800dbea:	005b      	lsls	r3, r3, #1
 800dbec:	4413      	add	r3, r2
 800dbee:	00db      	lsls	r3, r3, #3
 800dbf0:	461a      	mov	r2, r3
 800dbf2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	1899      	adds	r1, r3, r2
 800dbfa:	f04f 0200 	mov.w	r2, #0
 800dbfe:	f04f 0300 	mov.w	r3, #0
 800dc02:	e9c1 2300 	strd	r2, r3, [r1]
    V[3 * qq + 1] = 0.0;
 800dc06:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 800dc0a:	4613      	mov	r3, r2
 800dc0c:	005b      	lsls	r3, r3, #1
 800dc0e:	4413      	add	r3, r2
 800dc10:	00db      	lsls	r3, r3, #3
 800dc12:	f103 0208 	add.w	r2, r3, #8
 800dc16:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	1899      	adds	r1, r3, r2
 800dc1e:	f04f 0200 	mov.w	r2, #0
 800dc22:	f04f 0300 	mov.w	r3, #0
 800dc26:	e9c1 2300 	strd	r2, r3, [r1]
    V[3 * qq + 2] = 0.0;
 800dc2a:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 800dc2e:	4613      	mov	r3, r2
 800dc30:	005b      	lsls	r3, r3, #1
 800dc32:	4413      	add	r3, r2
 800dc34:	00db      	lsls	r3, r3, #3
 800dc36:	f103 0210 	add.w	r2, r3, #16
 800dc3a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	1899      	adds	r1, r3, r2
 800dc42:	f04f 0200 	mov.w	r2, #0
 800dc46:	f04f 0300 	mov.w	r3, #0
 800dc4a:	e9c1 2300 	strd	r2, r3, [r1]
    V[qq + 3 * qq] = 1.0;
 800dc4e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800dc52:	015a      	lsls	r2, r3, #5
 800dc54:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	1899      	adds	r1, r3, r2
 800dc5c:	f04f 0200 	mov.w	r2, #0
 800dc60:	4bbd      	ldr	r3, [pc, #756]	; (800df58 <svd_u3DvUgOe+0xe20>)
 800dc62:	e9c1 2300 	strd	r2, r3, [r1]
  for (qq = 2; qq >= 0; qq--) {
 800dc66:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800dc6a:	3b01      	subs	r3, #1
 800dc6c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800dc70:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	f6bf af64 	bge.w	800db42 <svd_u3DvUgOe+0xa0a>
  }

  ztest = e[0];
 800dc7a:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800dc7e:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
  if (b_s[0] != 0.0) {
 800dc82:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	; 0x160
 800dc86:	f04f 0200 	mov.w	r2, #0
 800dc8a:	f04f 0300 	mov.w	r3, #0
 800dc8e:	f7f2 ff0d 	bl	8000aac <__aeabi_dcmpeq>
 800dc92:	4603      	mov	r3, r0
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d12a      	bne.n	800dcee <svd_u3DvUgOe+0xbb6>
    rt = fabs(b_s[0]);
 800dc98:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 800dc9c:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 800dca0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dca4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800dca8:	ed97 7b26 	vldr	d7, [r7, #152]	; 0x98
 800dcac:	ed87 7b4a 	vstr	d7, [r7, #296]	; 0x128
    nrm = b_s[0] / rt;
 800dcb0:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	; 0x160
 800dcb4:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800dcb8:	f7f2 fdba 	bl	8000830 <__aeabi_ddiv>
 800dcbc:	4602      	mov	r2, r0
 800dcbe:	460b      	mov	r3, r1
 800dcc0:	e9c7 2372 	strd	r2, r3, [r7, #456]	; 0x1c8
    b_s[0] = rt;
 800dcc4:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800dcc8:	e9c7 2358 	strd	r2, r3, [r7, #352]	; 0x160
    ztest = e[0] / nrm;
 800dccc:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800dcd0:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 800dcd4:	f7f2 fdac 	bl	8000830 <__aeabi_ddiv>
 800dcd8:	4602      	mov	r2, r0
 800dcda:	460b      	mov	r3, r1
 800dcdc:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
    xscal_eaAxXsvQ(nrm, U, 1);
 800dce0:	2101      	movs	r1, #1
 800dce2:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 800dce6:	ed97 0b72 	vldr	d0, [r7, #456]	; 0x1c8
 800dcea:	f002 f989 	bl	8010000 <xscal_eaAxXsvQ>
  }

  if (ztest != 0.0) {
 800dcee:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 800dcf2:	f04f 0200 	mov.w	r2, #0
 800dcf6:	f04f 0300 	mov.w	r3, #0
 800dcfa:	f7f2 fed7 	bl	8000aac <__aeabi_dcmpeq>
 800dcfe:	4603      	mov	r3, r0
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d12b      	bne.n	800dd5c <svd_u3DvUgOe+0xc24>
    rt = fabs(ztest);
 800dd04:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800dd08:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800dd0c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dd10:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800dd14:	ed97 7b24 	vldr	d7, [r7, #144]	; 0x90
 800dd18:	ed87 7b4a 	vstr	d7, [r7, #296]	; 0x128
    nrm = rt / ztest;
 800dd1c:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800dd20:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800dd24:	f7f2 fd84 	bl	8000830 <__aeabi_ddiv>
 800dd28:	4602      	mov	r2, r0
 800dd2a:	460b      	mov	r3, r1
 800dd2c:	e9c7 2372 	strd	r2, r3, [r7, #456]	; 0x1c8
    ztest = rt;
 800dd30:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800dd34:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
    b_s[1] *= nrm;
 800dd38:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	; 0x168
 800dd3c:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 800dd40:	f7f2 fc4c 	bl	80005dc <__aeabi_dmul>
 800dd44:	4602      	mov	r2, r0
 800dd46:	460b      	mov	r3, r1
 800dd48:	e9c7 235a 	strd	r2, r3, [r7, #360]	; 0x168
    xscal_eaAxXsvQ(nrm, V, 4);
 800dd4c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800dd50:	2104      	movs	r1, #4
 800dd52:	6818      	ldr	r0, [r3, #0]
 800dd54:	ed97 0b72 	vldr	d0, [r7, #456]	; 0x1c8
 800dd58:	f002 f952 	bl	8010000 <xscal_eaAxXsvQ>
  }

  e[0] = ztest;
 800dd5c:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800dd60:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
  ztest = b_A[7];
 800dd64:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	; 0x1b0
 800dd68:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
  if (b_s[1] != 0.0) {
 800dd6c:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	; 0x168
 800dd70:	f04f 0200 	mov.w	r2, #0
 800dd74:	f04f 0300 	mov.w	r3, #0
 800dd78:	f7f2 fe98 	bl	8000aac <__aeabi_dcmpeq>
 800dd7c:	4603      	mov	r3, r0
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d12a      	bne.n	800ddd8 <svd_u3DvUgOe+0xca0>
    rt = fabs(b_s[1]);
 800dd82:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 800dd86:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800dd8a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dd8e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800dd92:	ed97 7b22 	vldr	d7, [r7, #136]	; 0x88
 800dd96:	ed87 7b4a 	vstr	d7, [r7, #296]	; 0x128
    nrm = b_s[1] / rt;
 800dd9a:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	; 0x168
 800dd9e:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800dda2:	f7f2 fd45 	bl	8000830 <__aeabi_ddiv>
 800dda6:	4602      	mov	r2, r0
 800dda8:	460b      	mov	r3, r1
 800ddaa:	e9c7 2372 	strd	r2, r3, [r7, #456]	; 0x1c8
    b_s[1] = rt;
 800ddae:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800ddb2:	e9c7 235a 	strd	r2, r3, [r7, #360]	; 0x168
    ztest = b_A[7] / nrm;
 800ddb6:	e9d7 016c 	ldrd	r0, r1, [r7, #432]	; 0x1b0
 800ddba:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 800ddbe:	f7f2 fd37 	bl	8000830 <__aeabi_ddiv>
 800ddc2:	4602      	mov	r2, r0
 800ddc4:	460b      	mov	r3, r1
 800ddc6:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
    xscal_eaAxXsvQ(nrm, U, 4);
 800ddca:	2104      	movs	r1, #4
 800ddcc:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 800ddd0:	ed97 0b72 	vldr	d0, [r7, #456]	; 0x1c8
 800ddd4:	f002 f914 	bl	8010000 <xscal_eaAxXsvQ>
  }

  if (ztest != 0.0) {
 800ddd8:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 800dddc:	f04f 0200 	mov.w	r2, #0
 800dde0:	f04f 0300 	mov.w	r3, #0
 800dde4:	f7f2 fe62 	bl	8000aac <__aeabi_dcmpeq>
 800dde8:	4603      	mov	r3, r0
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d12b      	bne.n	800de46 <svd_u3DvUgOe+0xd0e>
    rt = fabs(ztest);
 800ddee:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800ddf2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800ddf6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ddfa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ddfe:	ed97 7b20 	vldr	d7, [r7, #128]	; 0x80
 800de02:	ed87 7b4a 	vstr	d7, [r7, #296]	; 0x128
    nrm = rt / ztest;
 800de06:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800de0a:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800de0e:	f7f2 fd0f 	bl	8000830 <__aeabi_ddiv>
 800de12:	4602      	mov	r2, r0
 800de14:	460b      	mov	r3, r1
 800de16:	e9c7 2372 	strd	r2, r3, [r7, #456]	; 0x1c8
    ztest = rt;
 800de1a:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800de1e:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
    b_s[2] = b_A[8] * nrm;
 800de22:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 800de26:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 800de2a:	f7f2 fbd7 	bl	80005dc <__aeabi_dmul>
 800de2e:	4602      	mov	r2, r0
 800de30:	460b      	mov	r3, r1
 800de32:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170
    xscal_eaAxXsvQ(nrm, V, 7);
 800de36:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800de3a:	2107      	movs	r1, #7
 800de3c:	6818      	ldr	r0, [r3, #0]
 800de3e:	ed97 0b72 	vldr	d0, [r7, #456]	; 0x1c8
 800de42:	f002 f8dd 	bl	8010000 <xscal_eaAxXsvQ>
  }

  e[1] = ztest;
 800de46:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800de4a:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
  if (b_s[2] != 0.0) {
 800de4e:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 800de52:	f04f 0200 	mov.w	r2, #0
 800de56:	f04f 0300 	mov.w	r3, #0
 800de5a:	f7f2 fe27 	bl	8000aac <__aeabi_dcmpeq>
 800de5e:	4603      	mov	r3, r0
 800de60:	2b00      	cmp	r3, #0
 800de62:	d11e      	bne.n	800dea2 <svd_u3DvUgOe+0xd6a>
    rt = fabs(b_s[2]);
 800de64:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800de68:	67ba      	str	r2, [r7, #120]	; 0x78
 800de6a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800de6e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800de70:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 800de74:	ed87 7b4a 	vstr	d7, [r7, #296]	; 0x128
    nrm = b_s[2] / rt;
 800de78:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 800de7c:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800de80:	f7f2 fcd6 	bl	8000830 <__aeabi_ddiv>
 800de84:	4602      	mov	r2, r0
 800de86:	460b      	mov	r3, r1
 800de88:	e9c7 2372 	strd	r2, r3, [r7, #456]	; 0x1c8
    b_s[2] = rt;
 800de8c:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800de90:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170
    xscal_eaAxXsvQ(nrm, U, 7);
 800de94:	2107      	movs	r1, #7
 800de96:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 800de9a:	ed97 0b72 	vldr	d0, [r7, #456]	; 0x1c8
 800de9e:	f002 f8af 	bl	8010000 <xscal_eaAxXsvQ>
  }

  e[2] = 0.0;
 800dea2:	f04f 0200 	mov.w	r2, #0
 800dea6:	f04f 0300 	mov.w	r3, #0
 800deaa:	e9c7 2356 	strd	r2, r3, [r7, #344]	; 0x158
  qq = 0;
 800deae:	2300      	movs	r3, #0
 800deb0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  nrm = fmax(fmax(fmax(b_s[0], e[0]), fmax(b_s[1], ztest)), fmax(b_s[2], 0.0));
 800deb4:	ed97 7b58 	vldr	d7, [r7, #352]	; 0x160
 800deb8:	ed97 6b52 	vldr	d6, [r7, #328]	; 0x148
 800debc:	eeb0 1a46 	vmov.f32	s2, s12
 800dec0:	eef0 1a66 	vmov.f32	s3, s13
 800dec4:	eeb0 0a47 	vmov.f32	s0, s14
 800dec8:	eef0 0a67 	vmov.f32	s1, s15
 800decc:	f00d f9a2 	bl	801b214 <fmax>
 800ded0:	eeb0 8a40 	vmov.f32	s16, s0
 800ded4:	eef0 8a60 	vmov.f32	s17, s1
 800ded8:	ed97 7b5a 	vldr	d7, [r7, #360]	; 0x168
 800dedc:	ed97 6b44 	vldr	d6, [r7, #272]	; 0x110
 800dee0:	eeb0 1a46 	vmov.f32	s2, s12
 800dee4:	eef0 1a66 	vmov.f32	s3, s13
 800dee8:	eeb0 0a47 	vmov.f32	s0, s14
 800deec:	eef0 0a67 	vmov.f32	s1, s15
 800def0:	f00d f990 	bl	801b214 <fmax>
 800def4:	eeb0 7a40 	vmov.f32	s14, s0
 800def8:	eef0 7a60 	vmov.f32	s15, s1
 800defc:	eeb0 1a47 	vmov.f32	s2, s14
 800df00:	eef0 1a67 	vmov.f32	s3, s15
 800df04:	eeb0 0a48 	vmov.f32	s0, s16
 800df08:	eef0 0a68 	vmov.f32	s1, s17
 800df0c:	f00d f982 	bl	801b214 <fmax>
 800df10:	eeb0 8a40 	vmov.f32	s16, s0
 800df14:	eef0 8a60 	vmov.f32	s17, s1
 800df18:	ed97 7b5c 	vldr	d7, [r7, #368]	; 0x170
 800df1c:	ed9f 1b0c 	vldr	d1, [pc, #48]	; 800df50 <svd_u3DvUgOe+0xe18>
 800df20:	eeb0 0a47 	vmov.f32	s0, s14
 800df24:	eef0 0a67 	vmov.f32	s1, s15
 800df28:	f00d f974 	bl	801b214 <fmax>
 800df2c:	eeb0 7a40 	vmov.f32	s14, s0
 800df30:	eef0 7a60 	vmov.f32	s15, s1
 800df34:	eeb0 1a47 	vmov.f32	s2, s14
 800df38:	eef0 1a67 	vmov.f32	s3, s15
 800df3c:	eeb0 0a48 	vmov.f32	s0, s16
 800df40:	eef0 0a68 	vmov.f32	s1, s17
 800df44:	f00d f966 	bl	801b214 <fmax>
 800df48:	ed87 0b72 	vstr	d0, [r7, #456]	; 0x1c8
  while ((m + 2 > 0) && (qq < 75)) {
 800df4c:	f000 be8a 	b.w	800ec64 <svd_u3DvUgOe+0x1b2c>
	...
 800df58:	3ff00000 	.word	0x3ff00000
    kase = m + 1;
 800df5c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800df60:	3301      	adds	r3, #1
 800df62:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
    int32_T exitg1;
    do {
      exitg1 = 0;
 800df66:	2300      	movs	r3, #0
 800df68:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
      d = kase;
 800df6c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800df70:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
      if (kase == 0) {
 800df74:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d103      	bne.n	800df84 <svd_u3DvUgOe+0xe4c>
        exitg1 = 1;
 800df7c:	2301      	movs	r3, #1
 800df7e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800df82:	e092      	b.n	800e0aa <svd_u3DvUgOe+0xf72>
      } else {
        rt = fabs(e[kase - 1]);
 800df84:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800df88:	3b01      	subs	r3, #1
 800df8a:	00db      	lsls	r3, r3, #3
 800df8c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800df90:	4413      	add	r3, r2
 800df92:	3bb8      	subs	r3, #184	; 0xb8
 800df94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df98:	673a      	str	r2, [r7, #112]	; 0x70
 800df9a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800df9e:	677b      	str	r3, [r7, #116]	; 0x74
 800dfa0:	ed97 7b1c 	vldr	d7, [r7, #112]	; 0x70
 800dfa4:	ed87 7b4a 	vstr	d7, [r7, #296]	; 0x128
        if (rt <= (fabs(b_s[kase - 1]) + fabs(b_s[kase])) *
 800dfa8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800dfac:	3b01      	subs	r3, #1
 800dfae:	00db      	lsls	r3, r3, #3
 800dfb0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800dfb4:	4413      	add	r3, r2
 800dfb6:	3ba0      	subs	r3, #160	; 0xa0
 800dfb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfbc:	66ba      	str	r2, [r7, #104]	; 0x68
 800dfbe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dfc2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800dfc4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800dfc8:	00db      	lsls	r3, r3, #3
 800dfca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800dfce:	4413      	add	r3, r2
 800dfd0:	3ba0      	subs	r3, #160	; 0xa0
 800dfd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfd6:	663a      	str	r2, [r7, #96]	; 0x60
 800dfd8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dfdc:	667b      	str	r3, [r7, #100]	; 0x64
 800dfde:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800dfe2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800dfe6:	f7f2 f943 	bl	8000270 <__adddf3>
 800dfea:	4602      	mov	r2, r0
 800dfec:	460b      	mov	r3, r1
 800dfee:	4610      	mov	r0, r2
 800dff0:	4619      	mov	r1, r3
 800dff2:	f04f 0200 	mov.w	r2, #0
 800dff6:	4bb2      	ldr	r3, [pc, #712]	; (800e2c0 <svd_u3DvUgOe+0x1188>)
 800dff8:	f7f2 faf0 	bl	80005dc <__aeabi_dmul>
 800dffc:	4602      	mov	r2, r0
 800dffe:	460b      	mov	r3, r1
 800e000:	4610      	mov	r0, r2
 800e002:	4619      	mov	r1, r3
 800e004:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800e008:	f7f2 fd6e 	bl	8000ae8 <__aeabi_dcmpge>
 800e00c:	4603      	mov	r3, r0
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d012      	beq.n	800e038 <svd_u3DvUgOe+0xf00>
            2.2204460492503131E-16) {
          e[kase - 1] = 0.0;
 800e012:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800e016:	3b01      	subs	r3, #1
 800e018:	00db      	lsls	r3, r3, #3
 800e01a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e01e:	4413      	add	r3, r2
 800e020:	f1a3 01b8 	sub.w	r1, r3, #184	; 0xb8
 800e024:	f04f 0200 	mov.w	r2, #0
 800e028:	f04f 0300 	mov.w	r3, #0
 800e02c:	e9c1 2300 	strd	r2, r3, [r1]
          exitg1 = 1;
 800e030:	2301      	movs	r3, #1
 800e032:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800e036:	e038      	b.n	800e0aa <svd_u3DvUgOe+0xf72>
        } else if ((rt <= 1.0020841800044864E-292) || ((qq > 20) && (rt <=
 800e038:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800e03c:	f04f 0200 	mov.w	r2, #0
 800e040:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800e044:	f7f2 fd46 	bl	8000ad4 <__aeabi_dcmple>
 800e048:	4603      	mov	r3, r0
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d115      	bne.n	800e07a <svd_u3DvUgOe+0xf42>
 800e04e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800e052:	2b14      	cmp	r3, #20
 800e054:	dd24      	ble.n	800e0a0 <svd_u3DvUgOe+0xf68>
                     2.2204460492503131E-16 * nrm))) {
 800e056:	f04f 0200 	mov.w	r2, #0
 800e05a:	4b99      	ldr	r3, [pc, #612]	; (800e2c0 <svd_u3DvUgOe+0x1188>)
 800e05c:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	; 0x1c8
 800e060:	f7f2 fabc 	bl	80005dc <__aeabi_dmul>
 800e064:	4602      	mov	r2, r0
 800e066:	460b      	mov	r3, r1
 800e068:	4610      	mov	r0, r2
 800e06a:	4619      	mov	r1, r3
        } else if ((rt <= 1.0020841800044864E-292) || ((qq > 20) && (rt <=
 800e06c:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800e070:	f7f2 fd3a 	bl	8000ae8 <__aeabi_dcmpge>
 800e074:	4603      	mov	r3, r0
 800e076:	2b00      	cmp	r3, #0
 800e078:	d012      	beq.n	800e0a0 <svd_u3DvUgOe+0xf68>
          e[kase - 1] = 0.0;
 800e07a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800e07e:	3b01      	subs	r3, #1
 800e080:	00db      	lsls	r3, r3, #3
 800e082:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e086:	4413      	add	r3, r2
 800e088:	f1a3 01b8 	sub.w	r1, r3, #184	; 0xb8
 800e08c:	f04f 0200 	mov.w	r2, #0
 800e090:	f04f 0300 	mov.w	r3, #0
 800e094:	e9c1 2300 	strd	r2, r3, [r1]
          exitg1 = 1;
 800e098:	2301      	movs	r3, #1
 800e09a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800e09e:	e004      	b.n	800e0aa <svd_u3DvUgOe+0xf72>
        } else {
          kase--;
 800e0a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800e0a4:	3b01      	subs	r3, #1
 800e0a6:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        }
      }
    } while (exitg1 == 0);
 800e0aa:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	f43f af59 	beq.w	800df66 <svd_u3DvUgOe+0xe2e>

    if (m + 1 == kase) {
 800e0b4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800e0b8:	1c5a      	adds	r2, r3, #1
 800e0ba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800e0be:	4293      	cmp	r3, r2
 800e0c0:	d103      	bne.n	800e0ca <svd_u3DvUgOe+0xf92>
      kase = 4;
 800e0c2:	2304      	movs	r3, #4
 800e0c4:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 800e0c8:	e0c7      	b.n	800e25a <svd_u3DvUgOe+0x1122>
    } else {
      int32_T k_ii;
      boolean_T exitg2;
      qjj = m + 2;
 800e0ca:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800e0ce:	3302      	adds	r3, #2
 800e0d0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
      k_ii = m + 2;
 800e0d4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800e0d8:	3302      	adds	r3, #2
 800e0da:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
      exitg2 = false;
 800e0de:	2300      	movs	r3, #0
 800e0e0:	f887 31df 	strb.w	r3, [r7, #479]	; 0x1df
      while ((!exitg2) && (k_ii >= kase)) {
 800e0e4:	e092      	b.n	800e20c <svd_u3DvUgOe+0x10d4>
        qjj = k_ii;
 800e0e6:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800e0ea:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
        if (k_ii == kase) {
 800e0ee:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 800e0f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800e0f6:	429a      	cmp	r2, r3
 800e0f8:	d103      	bne.n	800e102 <svd_u3DvUgOe+0xfca>
          exitg2 = true;
 800e0fa:	2301      	movs	r3, #1
 800e0fc:	f887 31df 	strb.w	r3, [r7, #479]	; 0x1df
 800e100:	e084      	b.n	800e20c <svd_u3DvUgOe+0x10d4>
        } else {
          rt = 0.0;
 800e102:	f04f 0200 	mov.w	r2, #0
 800e106:	f04f 0300 	mov.w	r3, #0
 800e10a:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
          if (k_ii < m + 2) {
 800e10e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800e112:	1c5a      	adds	r2, r3, #1
 800e114:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800e118:	4293      	cmp	r3, r2
 800e11a:	dc11      	bgt.n	800e140 <svd_u3DvUgOe+0x1008>
            rt = fabs(e[k_ii - 1]);
 800e11c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800e120:	3b01      	subs	r3, #1
 800e122:	00db      	lsls	r3, r3, #3
 800e124:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e128:	4413      	add	r3, r2
 800e12a:	3bb8      	subs	r3, #184	; 0xb8
 800e12c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e130:	65ba      	str	r2, [r7, #88]	; 0x58
 800e132:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e136:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e138:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 800e13c:	ed87 7b4a 	vstr	d7, [r7, #296]	; 0x128
          }

          if (k_ii > kase + 1) {
 800e140:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800e144:	1c5a      	adds	r2, r3, #1
 800e146:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800e14a:	4293      	cmp	r3, r2
 800e14c:	dd17      	ble.n	800e17e <svd_u3DvUgOe+0x1046>
            rt += fabs(e[k_ii - 2]);
 800e14e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800e152:	3b02      	subs	r3, #2
 800e154:	00db      	lsls	r3, r3, #3
 800e156:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e15a:	4413      	add	r3, r2
 800e15c:	3bb8      	subs	r3, #184	; 0xb8
 800e15e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e162:	653a      	str	r2, [r7, #80]	; 0x50
 800e164:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e168:	657b      	str	r3, [r7, #84]	; 0x54
 800e16a:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800e16e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800e172:	f7f2 f87d 	bl	8000270 <__adddf3>
 800e176:	4602      	mov	r2, r0
 800e178:	460b      	mov	r3, r1
 800e17a:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
          }

          ztest = fabs(b_s[k_ii - 1]);
 800e17e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800e182:	3b01      	subs	r3, #1
 800e184:	00db      	lsls	r3, r3, #3
 800e186:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e18a:	4413      	add	r3, r2
 800e18c:	3ba0      	subs	r3, #160	; 0xa0
 800e18e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e192:	64ba      	str	r2, [r7, #72]	; 0x48
 800e194:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e198:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e19a:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 800e19e:	ed87 7b44 	vstr	d7, [r7, #272]	; 0x110
          if ((ztest <= 2.2204460492503131E-16 * rt) || (ztest <=
 800e1a2:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800e1a6:	f04f 0200 	mov.w	r2, #0
 800e1aa:	4b45      	ldr	r3, [pc, #276]	; (800e2c0 <svd_u3DvUgOe+0x1188>)
 800e1ac:	f7f2 fa16 	bl	80005dc <__aeabi_dmul>
 800e1b0:	4602      	mov	r2, r0
 800e1b2:	460b      	mov	r3, r1
 800e1b4:	4610      	mov	r0, r2
 800e1b6:	4619      	mov	r1, r3
 800e1b8:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800e1bc:	f7f2 fc94 	bl	8000ae8 <__aeabi_dcmpge>
 800e1c0:	4603      	mov	r3, r0
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d10a      	bne.n	800e1dc <svd_u3DvUgOe+0x10a4>
 800e1c6:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 800e1ca:	f04f 0200 	mov.w	r2, #0
 800e1ce:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800e1d2:	f7f2 fc7f 	bl	8000ad4 <__aeabi_dcmple>
 800e1d6:	4603      	mov	r3, r0
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d012      	beq.n	800e202 <svd_u3DvUgOe+0x10ca>
               1.0020841800044864E-292)) {
            b_s[k_ii - 1] = 0.0;
 800e1dc:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800e1e0:	3b01      	subs	r3, #1
 800e1e2:	00db      	lsls	r3, r3, #3
 800e1e4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e1e8:	4413      	add	r3, r2
 800e1ea:	f1a3 01a0 	sub.w	r1, r3, #160	; 0xa0
 800e1ee:	f04f 0200 	mov.w	r2, #0
 800e1f2:	f04f 0300 	mov.w	r3, #0
 800e1f6:	e9c1 2300 	strd	r2, r3, [r1]
            exitg2 = true;
 800e1fa:	2301      	movs	r3, #1
 800e1fc:	f887 31df 	strb.w	r3, [r7, #479]	; 0x1df
 800e200:	e004      	b.n	800e20c <svd_u3DvUgOe+0x10d4>
          } else {
            k_ii--;
 800e202:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800e206:	3b01      	subs	r3, #1
 800e208:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
      while ((!exitg2) && (k_ii >= kase)) {
 800e20c:	f897 31df 	ldrb.w	r3, [r7, #479]	; 0x1df
 800e210:	2b00      	cmp	r3, #0
 800e212:	d106      	bne.n	800e222 <svd_u3DvUgOe+0x10ea>
 800e214:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 800e218:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800e21c:	429a      	cmp	r2, r3
 800e21e:	f6bf af62 	bge.w	800e0e6 <svd_u3DvUgOe+0xfae>
          }
        }
      }

      if (qjj == kase) {
 800e222:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 800e226:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800e22a:	429a      	cmp	r2, r3
 800e22c:	d103      	bne.n	800e236 <svd_u3DvUgOe+0x10fe>
        kase = 3;
 800e22e:	2303      	movs	r3, #3
 800e230:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 800e234:	e011      	b.n	800e25a <svd_u3DvUgOe+0x1122>
      } else if (m + 2 == qjj) {
 800e236:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800e23a:	1c9a      	adds	r2, r3, #2
 800e23c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800e240:	4293      	cmp	r3, r2
 800e242:	d103      	bne.n	800e24c <svd_u3DvUgOe+0x1114>
        kase = 1;
 800e244:	2301      	movs	r3, #1
 800e246:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 800e24a:	e006      	b.n	800e25a <svd_u3DvUgOe+0x1122>
      } else {
        kase = 2;
 800e24c:	2302      	movs	r3, #2
 800e24e:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        d = qjj;
 800e252:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800e256:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
      }
    }

    switch (kase) {
 800e25a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800e25e:	2b03      	cmp	r3, #3
 800e260:	f000 8113 	beq.w	800e48a <svd_u3DvUgOe+0x1352>
 800e264:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800e268:	2b03      	cmp	r3, #3
 800e26a:	f300 8443 	bgt.w	800eaf4 <svd_u3DvUgOe+0x19bc>
 800e26e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800e272:	2b01      	cmp	r3, #1
 800e274:	d005      	beq.n	800e282 <svd_u3DvUgOe+0x114a>
 800e276:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800e27a:	2b02      	cmp	r3, #2
 800e27c:	d07b      	beq.n	800e376 <svd_u3DvUgOe+0x123e>
 800e27e:	f000 bc39 	b.w	800eaf4 <svd_u3DvUgOe+0x19bc>
     case 1:
      rt = e[m];
 800e282:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800e286:	00db      	lsls	r3, r3, #3
 800e288:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e28c:	4413      	add	r3, r2
 800e28e:	3bb8      	subs	r3, #184	; 0xb8
 800e290:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e294:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
      e[m] = 0.0;
 800e298:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800e29c:	00db      	lsls	r3, r3, #3
 800e29e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e2a2:	4413      	add	r3, r2
 800e2a4:	f1a3 01b8 	sub.w	r1, r3, #184	; 0xb8
 800e2a8:	f04f 0200 	mov.w	r2, #0
 800e2ac:	f04f 0300 	mov.w	r3, #0
 800e2b0:	e9c1 2300 	strd	r2, r3, [r1]
      for (qjj = m; qjj + 1 >= d + 1; qjj--) {
 800e2b4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800e2b8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800e2bc:	e053      	b.n	800e366 <svd_u3DvUgOe+0x122e>
 800e2be:	bf00      	nop
 800e2c0:	3cb00000 	.word	0x3cb00000
        xrotg_XzIjz1eG(&b_s[qjj], &rt, &ztest, &sqds);
 800e2c4:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 800e2c8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800e2cc:	00db      	lsls	r3, r3, #3
 800e2ce:	18d0      	adds	r0, r2, r3
 800e2d0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800e2d4:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800e2d8:	f507 7194 	add.w	r1, r7, #296	; 0x128
 800e2dc:	f001 fd2a 	bl	800fd34 <xrotg_XzIjz1eG>
        if (qjj + 1 > d + 1) {
 800e2e0:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 800e2e4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800e2e8:	429a      	cmp	r2, r3
 800e2ea:	dd19      	ble.n	800e320 <svd_u3DvUgOe+0x11e8>
          rt = -sqds * e[0];
 800e2ec:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800e2f0:	643a      	str	r2, [r7, #64]	; 0x40
 800e2f2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800e2f6:	647b      	str	r3, [r7, #68]	; 0x44
 800e2f8:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800e2fc:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800e300:	f7f2 f96c 	bl	80005dc <__aeabi_dmul>
 800e304:	4602      	mov	r2, r0
 800e306:	460b      	mov	r3, r1
 800e308:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
          e[0] *= ztest;
 800e30c:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800e310:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800e314:	f7f2 f962 	bl	80005dc <__aeabi_dmul>
 800e318:	4602      	mov	r2, r0
 800e31a:	460b      	mov	r3, r1
 800e31c:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
        }

        xrot_i7f01JoJ(V, 3 * qjj + 1, 3 * (m + 1) + 1, ztest, sqds);
 800e320:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 800e324:	4613      	mov	r3, r2
 800e326:	005b      	lsls	r3, r3, #1
 800e328:	4413      	add	r3, r2
 800e32a:	1c59      	adds	r1, r3, #1
 800e32c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800e330:	1c5a      	adds	r2, r3, #1
 800e332:	4613      	mov	r3, r2
 800e334:	005b      	lsls	r3, r3, #1
 800e336:	4413      	add	r3, r2
 800e338:	1c5a      	adds	r2, r3, #1
 800e33a:	ed97 7b44 	vldr	d7, [r7, #272]	; 0x110
 800e33e:	ed97 6b46 	vldr	d6, [r7, #280]	; 0x118
 800e342:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800e346:	eeb0 1a46 	vmov.f32	s2, s12
 800e34a:	eef0 1a66 	vmov.f32	s3, s13
 800e34e:	eeb0 0a47 	vmov.f32	s0, s14
 800e352:	eef0 0a67 	vmov.f32	s1, s15
 800e356:	6818      	ldr	r0, [r3, #0]
 800e358:	f001 fbd0 	bl	800fafc <xrot_i7f01JoJ>
      for (qjj = m; qjj + 1 >= d + 1; qjj--) {
 800e35c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800e360:	3b01      	subs	r3, #1
 800e362:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800e366:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 800e36a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800e36e:	429a      	cmp	r2, r3
 800e370:	daa8      	bge.n	800e2c4 <svd_u3DvUgOe+0x118c>
      }
      break;
 800e372:	f000 bc77 	b.w	800ec64 <svd_u3DvUgOe+0x1b2c>

     case 2:
      rt = e[d - 1];
 800e376:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800e37a:	3b01      	subs	r3, #1
 800e37c:	00db      	lsls	r3, r3, #3
 800e37e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e382:	4413      	add	r3, r2
 800e384:	3bb8      	subs	r3, #184	; 0xb8
 800e386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e38a:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
      e[d - 1] = 0.0;
 800e38e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800e392:	3b01      	subs	r3, #1
 800e394:	00db      	lsls	r3, r3, #3
 800e396:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e39a:	4413      	add	r3, r2
 800e39c:	f1a3 01b8 	sub.w	r1, r3, #184	; 0xb8
 800e3a0:	f04f 0200 	mov.w	r2, #0
 800e3a4:	f04f 0300 	mov.w	r3, #0
 800e3a8:	e9c1 2300 	strd	r2, r3, [r1]
      for (qjj = d; qjj < m + 2; qjj++) {
 800e3ac:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800e3b0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800e3b4:	e061      	b.n	800e47a <svd_u3DvUgOe+0x1342>
        xrotg_XzIjz1eG(&b_s[qjj], &rt, &ztest, &sqds);
 800e3b6:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 800e3ba:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800e3be:	00db      	lsls	r3, r3, #3
 800e3c0:	18d0      	adds	r0, r2, r3
 800e3c2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800e3c6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800e3ca:	f507 7194 	add.w	r1, r7, #296	; 0x128
 800e3ce:	f001 fcb1 	bl	800fd34 <xrotg_XzIjz1eG>
        rt = -sqds * e[qjj];
 800e3d2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800e3d6:	63ba      	str	r2, [r7, #56]	; 0x38
 800e3d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800e3dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e3de:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800e3e2:	00db      	lsls	r3, r3, #3
 800e3e4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e3e8:	4413      	add	r3, r2
 800e3ea:	3bb8      	subs	r3, #184	; 0xb8
 800e3ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3f0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800e3f4:	f7f2 f8f2 	bl	80005dc <__aeabi_dmul>
 800e3f8:	4602      	mov	r2, r0
 800e3fa:	460b      	mov	r3, r1
 800e3fc:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
        e[qjj] *= ztest;
 800e400:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800e404:	00db      	lsls	r3, r3, #3
 800e406:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e40a:	4413      	add	r3, r2
 800e40c:	3bb8      	subs	r3, #184	; 0xb8
 800e40e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e412:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800e416:	f7f2 f8e1 	bl	80005dc <__aeabi_dmul>
 800e41a:	4602      	mov	r2, r0
 800e41c:	460b      	mov	r3, r1
 800e41e:	4610      	mov	r0, r2
 800e420:	4619      	mov	r1, r3
 800e422:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800e426:	00db      	lsls	r3, r3, #3
 800e428:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e42c:	4413      	add	r3, r2
 800e42e:	3bb8      	subs	r3, #184	; 0xb8
 800e430:	e9c3 0100 	strd	r0, r1, [r3]
        xrot_i7f01JoJ(U, 3 * qjj + 1, 3 * (d - 1) + 1, ztest, sqds);
 800e434:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 800e438:	4613      	mov	r3, r2
 800e43a:	005b      	lsls	r3, r3, #1
 800e43c:	4413      	add	r3, r2
 800e43e:	1c59      	adds	r1, r3, #1
 800e440:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800e444:	1e5a      	subs	r2, r3, #1
 800e446:	4613      	mov	r3, r2
 800e448:	005b      	lsls	r3, r3, #1
 800e44a:	4413      	add	r3, r2
 800e44c:	3301      	adds	r3, #1
 800e44e:	ed97 7b44 	vldr	d7, [r7, #272]	; 0x110
 800e452:	ed97 6b46 	vldr	d6, [r7, #280]	; 0x118
 800e456:	eeb0 1a46 	vmov.f32	s2, s12
 800e45a:	eef0 1a66 	vmov.f32	s3, s13
 800e45e:	eeb0 0a47 	vmov.f32	s0, s14
 800e462:	eef0 0a67 	vmov.f32	s1, s15
 800e466:	461a      	mov	r2, r3
 800e468:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 800e46c:	f001 fb46 	bl	800fafc <xrot_i7f01JoJ>
      for (qjj = d; qjj < m + 2; qjj++) {
 800e470:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800e474:	3301      	adds	r3, #1
 800e476:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800e47a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800e47e:	1c5a      	adds	r2, r3, #1
 800e480:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800e484:	4293      	cmp	r3, r2
 800e486:	dd96      	ble.n	800e3b6 <svd_u3DvUgOe+0x127e>
      }
      break;
 800e488:	e3ec      	b.n	800ec64 <svd_u3DvUgOe+0x1b2c>

     case 3:
      {
        real_T emm1;
        real_T shift;
        sqds = b_s[m + 1];
 800e48a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800e48e:	3301      	adds	r3, #1
 800e490:	00db      	lsls	r3, r3, #3
 800e492:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e496:	4413      	add	r3, r2
 800e498:	3ba0      	subs	r3, #160	; 0xa0
 800e49a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e49e:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
        ztest = fmax(fmax(fmax(fmax(fabs(sqds), fabs(b_s[m])), fabs(e[m])), fabs
 800e4a2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800e4a6:	633a      	str	r2, [r7, #48]	; 0x30
 800e4a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e4ac:	637b      	str	r3, [r7, #52]	; 0x34
 800e4ae:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800e4b2:	00db      	lsls	r3, r3, #3
 800e4b4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e4b8:	4413      	add	r3, r2
 800e4ba:	3ba0      	subs	r3, #160	; 0xa0
 800e4bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4c0:	62ba      	str	r2, [r7, #40]	; 0x28
 800e4c2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e4c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e4c8:	ed97 1b0a 	vldr	d1, [r7, #40]	; 0x28
 800e4cc:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 800e4d0:	f00c fea0 	bl	801b214 <fmax>
 800e4d4:	eeb0 7a40 	vmov.f32	s14, s0
 800e4d8:	eef0 7a60 	vmov.f32	s15, s1
 800e4dc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800e4e0:	00db      	lsls	r3, r3, #3
 800e4e2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e4e6:	4413      	add	r3, r2
 800e4e8:	3bb8      	subs	r3, #184	; 0xb8
 800e4ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4ee:	623a      	str	r2, [r7, #32]
 800e4f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e4f4:	627b      	str	r3, [r7, #36]	; 0x24
 800e4f6:	ed97 1b08 	vldr	d1, [r7, #32]
 800e4fa:	eeb0 0a47 	vmov.f32	s0, s14
 800e4fe:	eef0 0a67 	vmov.f32	s1, s15
 800e502:	f00c fe87 	bl	801b214 <fmax>
 800e506:	eeb0 7a40 	vmov.f32	s14, s0
 800e50a:	eef0 7a60 	vmov.f32	s15, s1
                          (b_s[d])), fabs(e[d]));
 800e50e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800e512:	00db      	lsls	r3, r3, #3
 800e514:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e518:	4413      	add	r3, r2
 800e51a:	3ba0      	subs	r3, #160	; 0xa0
 800e51c:	e9d3 2300 	ldrd	r2, r3, [r3]
        ztest = fmax(fmax(fmax(fmax(fabs(sqds), fabs(b_s[m])), fabs(e[m])), fabs
 800e520:	61ba      	str	r2, [r7, #24]
 800e522:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e526:	61fb      	str	r3, [r7, #28]
 800e528:	ed97 1b06 	vldr	d1, [r7, #24]
 800e52c:	eeb0 0a47 	vmov.f32	s0, s14
 800e530:	eef0 0a67 	vmov.f32	s1, s15
 800e534:	f00c fe6e 	bl	801b214 <fmax>
 800e538:	eeb0 7a40 	vmov.f32	s14, s0
 800e53c:	eef0 7a60 	vmov.f32	s15, s1
                          (b_s[d])), fabs(e[d]));
 800e540:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800e544:	00db      	lsls	r3, r3, #3
 800e546:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e54a:	4413      	add	r3, r2
 800e54c:	3bb8      	subs	r3, #184	; 0xb8
 800e54e:	e9d3 2300 	ldrd	r2, r3, [r3]
        ztest = fmax(fmax(fmax(fmax(fabs(sqds), fabs(b_s[m])), fabs(e[m])), fabs
 800e552:	613a      	str	r2, [r7, #16]
 800e554:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e558:	617b      	str	r3, [r7, #20]
 800e55a:	ed97 1b04 	vldr	d1, [r7, #16]
 800e55e:	eeb0 0a47 	vmov.f32	s0, s14
 800e562:	eef0 0a67 	vmov.f32	s1, s15
 800e566:	f00c fe55 	bl	801b214 <fmax>
 800e56a:	eeb0 7a40 	vmov.f32	s14, s0
 800e56e:	eef0 7a60 	vmov.f32	s15, s1
 800e572:	ed87 7b44 	vstr	d7, [r7, #272]	; 0x110
        rt = sqds / ztest;
 800e576:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800e57a:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800e57e:	f7f2 f957 	bl	8000830 <__aeabi_ddiv>
 800e582:	4602      	mov	r2, r0
 800e584:	460b      	mov	r3, r1
 800e586:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
        smm1 = b_s[m] / ztest;
 800e58a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800e58e:	00db      	lsls	r3, r3, #3
 800e590:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e594:	4413      	add	r3, r2
 800e596:	3ba0      	subs	r3, #160	; 0xa0
 800e598:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e59c:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800e5a0:	f7f2 f946 	bl	8000830 <__aeabi_ddiv>
 800e5a4:	4602      	mov	r2, r0
 800e5a6:	460b      	mov	r3, r1
 800e5a8:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
        emm1 = e[m] / ztest;
 800e5ac:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800e5b0:	00db      	lsls	r3, r3, #3
 800e5b2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e5b6:	4413      	add	r3, r2
 800e5b8:	3bb8      	subs	r3, #184	; 0xb8
 800e5ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e5be:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800e5c2:	f7f2 f935 	bl	8000830 <__aeabi_ddiv>
 800e5c6:	4602      	mov	r2, r0
 800e5c8:	460b      	mov	r3, r1
 800e5ca:	e9c7 2370 	strd	r2, r3, [r7, #448]	; 0x1c0
        sqds = b_s[d] / ztest;
 800e5ce:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800e5d2:	00db      	lsls	r3, r3, #3
 800e5d4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e5d8:	4413      	add	r3, r2
 800e5da:	3ba0      	subs	r3, #160	; 0xa0
 800e5dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e5e0:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800e5e4:	f7f2 f924 	bl	8000830 <__aeabi_ddiv>
 800e5e8:	4602      	mov	r2, r0
 800e5ea:	460b      	mov	r3, r1
 800e5ec:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
        smm1 = ((smm1 + rt) * (smm1 - rt) + emm1 * emm1) / 2.0;
 800e5f0:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 800e5f4:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800e5f8:	f7f1 fe3a 	bl	8000270 <__adddf3>
 800e5fc:	4602      	mov	r2, r0
 800e5fe:	460b      	mov	r3, r1
 800e600:	4614      	mov	r4, r2
 800e602:	461d      	mov	r5, r3
 800e604:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 800e608:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800e60c:	f7f1 fe2e 	bl	800026c <__aeabi_dsub>
 800e610:	4602      	mov	r2, r0
 800e612:	460b      	mov	r3, r1
 800e614:	4620      	mov	r0, r4
 800e616:	4629      	mov	r1, r5
 800e618:	f7f1 ffe0 	bl	80005dc <__aeabi_dmul>
 800e61c:	4602      	mov	r2, r0
 800e61e:	460b      	mov	r3, r1
 800e620:	4614      	mov	r4, r2
 800e622:	461d      	mov	r5, r3
 800e624:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	; 0x1c0
 800e628:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	; 0x1c0
 800e62c:	f7f1 ffd6 	bl	80005dc <__aeabi_dmul>
 800e630:	4602      	mov	r2, r0
 800e632:	460b      	mov	r3, r1
 800e634:	4620      	mov	r0, r4
 800e636:	4629      	mov	r1, r5
 800e638:	f7f1 fe1a 	bl	8000270 <__adddf3>
 800e63c:	4602      	mov	r2, r0
 800e63e:	460b      	mov	r3, r1
 800e640:	4610      	mov	r0, r2
 800e642:	4619      	mov	r1, r3
 800e644:	f04f 0200 	mov.w	r2, #0
 800e648:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e64c:	f7f2 f8f0 	bl	8000830 <__aeabi_ddiv>
 800e650:	4602      	mov	r2, r0
 800e652:	460b      	mov	r3, r1
 800e654:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
        emm1 *= rt;
 800e658:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800e65c:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	; 0x1c0
 800e660:	f7f1 ffbc 	bl	80005dc <__aeabi_dmul>
 800e664:	4602      	mov	r2, r0
 800e666:	460b      	mov	r3, r1
 800e668:	e9c7 2370 	strd	r2, r3, [r7, #448]	; 0x1c0
        emm1 *= emm1;
 800e66c:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	; 0x1c0
 800e670:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	; 0x1c0
 800e674:	f7f1 ffb2 	bl	80005dc <__aeabi_dmul>
 800e678:	4602      	mov	r2, r0
 800e67a:	460b      	mov	r3, r1
 800e67c:	e9c7 2370 	strd	r2, r3, [r7, #448]	; 0x1c0
        if ((smm1 != 0.0) || (emm1 != 0.0)) {
 800e680:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 800e684:	f04f 0200 	mov.w	r2, #0
 800e688:	f04f 0300 	mov.w	r3, #0
 800e68c:	f7f2 fa0e 	bl	8000aac <__aeabi_dcmpeq>
 800e690:	4603      	mov	r3, r0
 800e692:	2b00      	cmp	r3, #0
 800e694:	d00a      	beq.n	800e6ac <svd_u3DvUgOe+0x1574>
 800e696:	f04f 0200 	mov.w	r2, #0
 800e69a:	f04f 0300 	mov.w	r3, #0
 800e69e:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	; 0x1c0
 800e6a2:	f7f2 fa03 	bl	8000aac <__aeabi_dcmpeq>
 800e6a6:	4603      	mov	r3, r0
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d13f      	bne.n	800e72c <svd_u3DvUgOe+0x15f4>
          shift = sqrt(smm1 * smm1 + emm1);
 800e6ac:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 800e6b0:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800e6b4:	f7f1 ff92 	bl	80005dc <__aeabi_dmul>
 800e6b8:	4602      	mov	r2, r0
 800e6ba:	460b      	mov	r3, r1
 800e6bc:	4610      	mov	r0, r2
 800e6be:	4619      	mov	r1, r3
 800e6c0:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	; 0x1c0
 800e6c4:	f7f1 fdd4 	bl	8000270 <__adddf3>
 800e6c8:	4602      	mov	r2, r0
 800e6ca:	460b      	mov	r3, r1
 800e6cc:	ec43 2b17 	vmov	d7, r2, r3
 800e6d0:	eeb0 0a47 	vmov.f32	s0, s14
 800e6d4:	eef0 0a67 	vmov.f32	s1, s15
 800e6d8:	f00c fe86 	bl	801b3e8 <sqrt>
 800e6dc:	ed87 0b74 	vstr	d0, [r7, #464]	; 0x1d0
          if (smm1 < 0.0) {
 800e6e0:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 800e6e4:	f04f 0200 	mov.w	r2, #0
 800e6e8:	f04f 0300 	mov.w	r3, #0
 800e6ec:	f7f2 f9e8 	bl	8000ac0 <__aeabi_dcmplt>
 800e6f0:	4603      	mov	r3, r0
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d009      	beq.n	800e70a <svd_u3DvUgOe+0x15d2>
            shift = -shift;
 800e6f6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800e6fa:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 800e6fe:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800e702:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800e706:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
          }

          shift = emm1 / (smm1 + shift);
 800e70a:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 800e70e:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	; 0x1d0
 800e712:	f7f1 fdad 	bl	8000270 <__adddf3>
 800e716:	4602      	mov	r2, r0
 800e718:	460b      	mov	r3, r1
 800e71a:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	; 0x1c0
 800e71e:	f7f2 f887 	bl	8000830 <__aeabi_ddiv>
 800e722:	4602      	mov	r2, r0
 800e724:	460b      	mov	r3, r1
 800e726:	e9c7 2374 	strd	r2, r3, [r7, #464]	; 0x1d0
 800e72a:	e005      	b.n	800e738 <svd_u3DvUgOe+0x1600>
        } else {
          shift = 0.0;
 800e72c:	f04f 0200 	mov.w	r2, #0
 800e730:	f04f 0300 	mov.w	r3, #0
 800e734:	e9c7 2374 	strd	r2, r3, [r7, #464]	; 0x1d0
        }

        rt = (sqds + rt) * (sqds - rt) + shift;
 800e738:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800e73c:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800e740:	f7f1 fd96 	bl	8000270 <__adddf3>
 800e744:	4602      	mov	r2, r0
 800e746:	460b      	mov	r3, r1
 800e748:	4614      	mov	r4, r2
 800e74a:	461d      	mov	r5, r3
 800e74c:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800e750:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800e754:	f7f1 fd8a 	bl	800026c <__aeabi_dsub>
 800e758:	4602      	mov	r2, r0
 800e75a:	460b      	mov	r3, r1
 800e75c:	4620      	mov	r0, r4
 800e75e:	4629      	mov	r1, r5
 800e760:	f7f1 ff3c 	bl	80005dc <__aeabi_dmul>
 800e764:	4602      	mov	r2, r0
 800e766:	460b      	mov	r3, r1
 800e768:	4610      	mov	r0, r2
 800e76a:	4619      	mov	r1, r3
 800e76c:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	; 0x1d0
 800e770:	f7f1 fd7e 	bl	8000270 <__adddf3>
 800e774:	4602      	mov	r2, r0
 800e776:	460b      	mov	r3, r1
 800e778:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
        ztest = e[d] / ztest * sqds;
 800e77c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800e780:	00db      	lsls	r3, r3, #3
 800e782:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e786:	4413      	add	r3, r2
 800e788:	3bb8      	subs	r3, #184	; 0xb8
 800e78a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e78e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800e792:	f7f2 f84d 	bl	8000830 <__aeabi_ddiv>
 800e796:	4602      	mov	r2, r0
 800e798:	460b      	mov	r3, r1
 800e79a:	4610      	mov	r0, r2
 800e79c:	4619      	mov	r1, r3
 800e79e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800e7a2:	f7f1 ff1b 	bl	80005dc <__aeabi_dmul>
 800e7a6:	4602      	mov	r2, r0
 800e7a8:	460b      	mov	r3, r1
 800e7aa:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
        for (qjj = d + 1; qjj <= m + 1; qjj++) {
 800e7ae:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800e7b2:	3301      	adds	r3, #1
 800e7b4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800e7b8:	e183      	b.n	800eac2 <svd_u3DvUgOe+0x198a>
          xrotg_XzIjz1eG(&rt, &ztest, &sqds, &smm1);
 800e7ba:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800e7be:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800e7c2:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800e7c6:	f507 7094 	add.w	r0, r7, #296	; 0x128
 800e7ca:	f001 fab3 	bl	800fd34 <xrotg_XzIjz1eG>
          if (qjj > d + 1) {
 800e7ce:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800e7d2:	1c5a      	adds	r2, r3, #1
 800e7d4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800e7d8:	4293      	cmp	r3, r2
 800e7da:	dd03      	ble.n	800e7e4 <svd_u3DvUgOe+0x16ac>
            e[0] = rt;
 800e7dc:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800e7e0:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
          }

          rt = e[qjj - 1];
 800e7e4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800e7e8:	3b01      	subs	r3, #1
 800e7ea:	00db      	lsls	r3, r3, #3
 800e7ec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e7f0:	4413      	add	r3, r2
 800e7f2:	3bb8      	subs	r3, #184	; 0xb8
 800e7f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7f8:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
          emm1 = b_s[qjj - 1];
 800e7fc:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800e800:	3b01      	subs	r3, #1
 800e802:	00db      	lsls	r3, r3, #3
 800e804:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e808:	4413      	add	r3, r2
 800e80a:	3ba0      	subs	r3, #160	; 0xa0
 800e80c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e810:	e9c7 2370 	strd	r2, r3, [r7, #448]	; 0x1c0
          e[qjj - 1] = rt * sqds - emm1 * smm1;
 800e814:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800e818:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800e81c:	f7f1 fede 	bl	80005dc <__aeabi_dmul>
 800e820:	4602      	mov	r2, r0
 800e822:	460b      	mov	r3, r1
 800e824:	4690      	mov	r8, r2
 800e826:	4699      	mov	r9, r3
 800e828:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 800e82c:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	; 0x1c0
 800e830:	f7f1 fed4 	bl	80005dc <__aeabi_dmul>
 800e834:	4602      	mov	r2, r0
 800e836:	460b      	mov	r3, r1
 800e838:	4610      	mov	r0, r2
 800e83a:	4619      	mov	r1, r3
 800e83c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800e840:	1e5c      	subs	r4, r3, #1
 800e842:	4602      	mov	r2, r0
 800e844:	460b      	mov	r3, r1
 800e846:	4640      	mov	r0, r8
 800e848:	4649      	mov	r1, r9
 800e84a:	f7f1 fd0f 	bl	800026c <__aeabi_dsub>
 800e84e:	4602      	mov	r2, r0
 800e850:	460b      	mov	r3, r1
 800e852:	4610      	mov	r0, r2
 800e854:	4619      	mov	r1, r3
 800e856:	00e3      	lsls	r3, r4, #3
 800e858:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e85c:	4413      	add	r3, r2
 800e85e:	3bb8      	subs	r3, #184	; 0xb8
 800e860:	e9c3 0100 	strd	r0, r1, [r3]
          ztest = smm1 * b_s[qjj];
 800e864:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800e868:	00db      	lsls	r3, r3, #3
 800e86a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e86e:	4413      	add	r3, r2
 800e870:	3ba0      	subs	r3, #160	; 0xa0
 800e872:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e876:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800e87a:	f7f1 feaf 	bl	80005dc <__aeabi_dmul>
 800e87e:	4602      	mov	r2, r0
 800e880:	460b      	mov	r3, r1
 800e882:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
          b_s[qjj] *= sqds;
 800e886:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800e88a:	00db      	lsls	r3, r3, #3
 800e88c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e890:	4413      	add	r3, r2
 800e892:	3ba0      	subs	r3, #160	; 0xa0
 800e894:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e898:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800e89c:	f7f1 fe9e 	bl	80005dc <__aeabi_dmul>
 800e8a0:	4602      	mov	r2, r0
 800e8a2:	460b      	mov	r3, r1
 800e8a4:	4610      	mov	r0, r2
 800e8a6:	4619      	mov	r1, r3
 800e8a8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800e8ac:	00db      	lsls	r3, r3, #3
 800e8ae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e8b2:	4413      	add	r3, r2
 800e8b4:	3ba0      	subs	r3, #160	; 0xa0
 800e8b6:	e9c3 0100 	strd	r0, r1, [r3]
          xrot_i7f01JoJ(V, 3 * (qjj - 1) + 1, 3 * qjj + 1, sqds, smm1);
 800e8ba:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800e8be:	1e5a      	subs	r2, r3, #1
 800e8c0:	4613      	mov	r3, r2
 800e8c2:	005b      	lsls	r3, r3, #1
 800e8c4:	4413      	add	r3, r2
 800e8c6:	1c59      	adds	r1, r3, #1
 800e8c8:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 800e8cc:	4613      	mov	r3, r2
 800e8ce:	005b      	lsls	r3, r3, #1
 800e8d0:	4413      	add	r3, r2
 800e8d2:	1c5a      	adds	r2, r3, #1
 800e8d4:	ed97 7b46 	vldr	d7, [r7, #280]	; 0x118
 800e8d8:	ed97 6b48 	vldr	d6, [r7, #288]	; 0x120
 800e8dc:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800e8e0:	eeb0 1a46 	vmov.f32	s2, s12
 800e8e4:	eef0 1a66 	vmov.f32	s3, s13
 800e8e8:	eeb0 0a47 	vmov.f32	s0, s14
 800e8ec:	eef0 0a67 	vmov.f32	s1, s15
 800e8f0:	6818      	ldr	r0, [r3, #0]
 800e8f2:	f001 f903 	bl	800fafc <xrot_i7f01JoJ>
          b_s[qjj - 1] = emm1 * sqds + rt * smm1;
 800e8f6:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800e8fa:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	; 0x1c0
 800e8fe:	f7f1 fe6d 	bl	80005dc <__aeabi_dmul>
 800e902:	4602      	mov	r2, r0
 800e904:	460b      	mov	r3, r1
 800e906:	4690      	mov	r8, r2
 800e908:	4699      	mov	r9, r3
 800e90a:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800e90e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800e912:	f7f1 fe63 	bl	80005dc <__aeabi_dmul>
 800e916:	4602      	mov	r2, r0
 800e918:	460b      	mov	r3, r1
 800e91a:	4610      	mov	r0, r2
 800e91c:	4619      	mov	r1, r3
 800e91e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800e922:	1e5c      	subs	r4, r3, #1
 800e924:	4602      	mov	r2, r0
 800e926:	460b      	mov	r3, r1
 800e928:	4640      	mov	r0, r8
 800e92a:	4649      	mov	r1, r9
 800e92c:	f7f1 fca0 	bl	8000270 <__adddf3>
 800e930:	4602      	mov	r2, r0
 800e932:	460b      	mov	r3, r1
 800e934:	4610      	mov	r0, r2
 800e936:	4619      	mov	r1, r3
 800e938:	00e3      	lsls	r3, r4, #3
 800e93a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e93e:	4413      	add	r3, r2
 800e940:	3ba0      	subs	r3, #160	; 0xa0
 800e942:	e9c3 0100 	strd	r0, r1, [r3]
          xrotg_XzIjz1eG(&b_s[qjj - 1], &ztest, &sqds, &smm1);
 800e946:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800e94a:	3b01      	subs	r3, #1
 800e94c:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 800e950:	00db      	lsls	r3, r3, #3
 800e952:	18d0      	adds	r0, r2, r3
 800e954:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800e958:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800e95c:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800e960:	f001 f9e8 	bl	800fd34 <xrotg_XzIjz1eG>
          rt = e[qjj - 1] * sqds + smm1 * b_s[qjj];
 800e964:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800e968:	3b01      	subs	r3, #1
 800e96a:	00db      	lsls	r3, r3, #3
 800e96c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e970:	4413      	add	r3, r2
 800e972:	3bb8      	subs	r3, #184	; 0xb8
 800e974:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e978:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800e97c:	f7f1 fe2e 	bl	80005dc <__aeabi_dmul>
 800e980:	4602      	mov	r2, r0
 800e982:	460b      	mov	r3, r1
 800e984:	4614      	mov	r4, r2
 800e986:	461d      	mov	r5, r3
 800e988:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800e98c:	00db      	lsls	r3, r3, #3
 800e98e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e992:	4413      	add	r3, r2
 800e994:	3ba0      	subs	r3, #160	; 0xa0
 800e996:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e99a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800e99e:	f7f1 fe1d 	bl	80005dc <__aeabi_dmul>
 800e9a2:	4602      	mov	r2, r0
 800e9a4:	460b      	mov	r3, r1
 800e9a6:	4620      	mov	r0, r4
 800e9a8:	4629      	mov	r1, r5
 800e9aa:	f7f1 fc61 	bl	8000270 <__adddf3>
 800e9ae:	4602      	mov	r2, r0
 800e9b0:	460b      	mov	r3, r1
 800e9b2:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
          b_s[qjj] = e[qjj - 1] * -smm1 + sqds * b_s[qjj];
 800e9b6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800e9ba:	3b01      	subs	r3, #1
 800e9bc:	00db      	lsls	r3, r3, #3
 800e9be:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e9c2:	4413      	add	r3, r2
 800e9c4:	3bb8      	subs	r3, #184	; 0xb8
 800e9c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e9ca:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800e9ce:	60ba      	str	r2, [r7, #8]
 800e9d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800e9d4:	60fb      	str	r3, [r7, #12]
 800e9d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e9da:	f7f1 fdff 	bl	80005dc <__aeabi_dmul>
 800e9de:	4602      	mov	r2, r0
 800e9e0:	460b      	mov	r3, r1
 800e9e2:	4614      	mov	r4, r2
 800e9e4:	461d      	mov	r5, r3
 800e9e6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800e9ea:	00db      	lsls	r3, r3, #3
 800e9ec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e9f0:	4413      	add	r3, r2
 800e9f2:	3ba0      	subs	r3, #160	; 0xa0
 800e9f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e9f8:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800e9fc:	f7f1 fdee 	bl	80005dc <__aeabi_dmul>
 800ea00:	4602      	mov	r2, r0
 800ea02:	460b      	mov	r3, r1
 800ea04:	4620      	mov	r0, r4
 800ea06:	4629      	mov	r1, r5
 800ea08:	f7f1 fc32 	bl	8000270 <__adddf3>
 800ea0c:	4602      	mov	r2, r0
 800ea0e:	460b      	mov	r3, r1
 800ea10:	4610      	mov	r0, r2
 800ea12:	4619      	mov	r1, r3
 800ea14:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800ea18:	00db      	lsls	r3, r3, #3
 800ea1a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800ea1e:	4413      	add	r3, r2
 800ea20:	3ba0      	subs	r3, #160	; 0xa0
 800ea22:	e9c3 0100 	strd	r0, r1, [r3]
          ztest = smm1 * e[qjj];
 800ea26:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800ea2a:	00db      	lsls	r3, r3, #3
 800ea2c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800ea30:	4413      	add	r3, r2
 800ea32:	3bb8      	subs	r3, #184	; 0xb8
 800ea34:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ea38:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800ea3c:	f7f1 fdce 	bl	80005dc <__aeabi_dmul>
 800ea40:	4602      	mov	r2, r0
 800ea42:	460b      	mov	r3, r1
 800ea44:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
          e[qjj] *= sqds;
 800ea48:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800ea4c:	00db      	lsls	r3, r3, #3
 800ea4e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800ea52:	4413      	add	r3, r2
 800ea54:	3bb8      	subs	r3, #184	; 0xb8
 800ea56:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ea5a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800ea5e:	f7f1 fdbd 	bl	80005dc <__aeabi_dmul>
 800ea62:	4602      	mov	r2, r0
 800ea64:	460b      	mov	r3, r1
 800ea66:	4610      	mov	r0, r2
 800ea68:	4619      	mov	r1, r3
 800ea6a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800ea6e:	00db      	lsls	r3, r3, #3
 800ea70:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800ea74:	4413      	add	r3, r2
 800ea76:	3bb8      	subs	r3, #184	; 0xb8
 800ea78:	e9c3 0100 	strd	r0, r1, [r3]
          xrot_i7f01JoJ(U, 3 * (qjj - 1) + 1, 3 * qjj + 1, sqds, smm1);
 800ea7c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800ea80:	1e5a      	subs	r2, r3, #1
 800ea82:	4613      	mov	r3, r2
 800ea84:	005b      	lsls	r3, r3, #1
 800ea86:	4413      	add	r3, r2
 800ea88:	1c59      	adds	r1, r3, #1
 800ea8a:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 800ea8e:	4613      	mov	r3, r2
 800ea90:	005b      	lsls	r3, r3, #1
 800ea92:	4413      	add	r3, r2
 800ea94:	3301      	adds	r3, #1
 800ea96:	ed97 7b46 	vldr	d7, [r7, #280]	; 0x118
 800ea9a:	ed97 6b48 	vldr	d6, [r7, #288]	; 0x120
 800ea9e:	eeb0 1a46 	vmov.f32	s2, s12
 800eaa2:	eef0 1a66 	vmov.f32	s3, s13
 800eaa6:	eeb0 0a47 	vmov.f32	s0, s14
 800eaaa:	eef0 0a67 	vmov.f32	s1, s15
 800eaae:	461a      	mov	r2, r3
 800eab0:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 800eab4:	f001 f822 	bl	800fafc <xrot_i7f01JoJ>
        for (qjj = d + 1; qjj <= m + 1; qjj++) {
 800eab8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800eabc:	3301      	adds	r3, #1
 800eabe:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800eac2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800eac6:	1c5a      	adds	r2, r3, #1
 800eac8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800eacc:	4293      	cmp	r3, r2
 800eace:	f77f ae74 	ble.w	800e7ba <svd_u3DvUgOe+0x1682>
        }

        e[m] = rt;
 800ead2:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800ead6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800eada:	00db      	lsls	r3, r3, #3
 800eadc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800eae0:	4413      	add	r3, r2
 800eae2:	3bb8      	subs	r3, #184	; 0xb8
 800eae4:	e9c3 0100 	strd	r0, r1, [r3]
        qq++;
 800eae8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800eaec:	3301      	adds	r3, #1
 800eaee:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
      }
      break;
 800eaf2:	e0b7      	b.n	800ec64 <svd_u3DvUgOe+0x1b2c>

     default:
      if (b_s[d] < 0.0) {
 800eaf4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800eaf8:	00db      	lsls	r3, r3, #3
 800eafa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800eafe:	4413      	add	r3, r2
 800eb00:	3ba0      	subs	r3, #160	; 0xa0
 800eb02:	e9d3 0100 	ldrd	r0, r1, [r3]
 800eb06:	f04f 0200 	mov.w	r2, #0
 800eb0a:	f04f 0300 	mov.w	r3, #0
 800eb0e:	f7f1 ffd7 	bl	8000ac0 <__aeabi_dcmplt>
 800eb12:	4603      	mov	r3, r0
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d025      	beq.n	800eb64 <svd_u3DvUgOe+0x1a2c>
        b_s[d] = -b_s[d];
 800eb18:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800eb1c:	00db      	lsls	r3, r3, #3
 800eb1e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800eb22:	4413      	add	r3, r2
 800eb24:	3ba0      	subs	r3, #160	; 0xa0
 800eb26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb2a:	603a      	str	r2, [r7, #0]
 800eb2c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800eb30:	607b      	str	r3, [r7, #4]
 800eb32:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800eb36:	00db      	lsls	r3, r3, #3
 800eb38:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800eb3c:	4413      	add	r3, r2
 800eb3e:	3ba0      	subs	r3, #160	; 0xa0
 800eb40:	ed97 7b00 	vldr	d7, [r7]
 800eb44:	ed83 7b00 	vstr	d7, [r3]
        xscal_eaAxXsvQ(-1.0, V, 3 * d + 1);
 800eb48:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 800eb4c:	4613      	mov	r3, r2
 800eb4e:	005b      	lsls	r3, r3, #1
 800eb50:	4413      	add	r3, r2
 800eb52:	1c5a      	adds	r2, r3, #1
 800eb54:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800eb58:	4611      	mov	r1, r2
 800eb5a:	6818      	ldr	r0, [r3, #0]
 800eb5c:	ed9f 0b56 	vldr	d0, [pc, #344]	; 800ecb8 <svd_u3DvUgOe+0x1b80>
 800eb60:	f001 fa4e 	bl	8010000 <xscal_eaAxXsvQ>
      }

      qq = d + 1;
 800eb64:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800eb68:	3301      	adds	r3, #1
 800eb6a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
      while ((d + 1 < 3) && (b_s[d] < b_s[qq])) {
 800eb6e:	e055      	b.n	800ec1c <svd_u3DvUgOe+0x1ae4>
        rt = b_s[d];
 800eb70:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800eb74:	00db      	lsls	r3, r3, #3
 800eb76:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800eb7a:	4413      	add	r3, r2
 800eb7c:	3ba0      	subs	r3, #160	; 0xa0
 800eb7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb82:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
        b_s[d] = b_s[qq];
 800eb86:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800eb8a:	00db      	lsls	r3, r3, #3
 800eb8c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800eb90:	4413      	add	r3, r2
 800eb92:	3ba0      	subs	r3, #160	; 0xa0
 800eb94:	e9d3 0100 	ldrd	r0, r1, [r3]
 800eb98:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800eb9c:	00db      	lsls	r3, r3, #3
 800eb9e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800eba2:	4413      	add	r3, r2
 800eba4:	3ba0      	subs	r3, #160	; 0xa0
 800eba6:	e9c3 0100 	strd	r0, r1, [r3]
        b_s[qq] = rt;
 800ebaa:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800ebae:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800ebb2:	00db      	lsls	r3, r3, #3
 800ebb4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800ebb8:	4413      	add	r3, r2
 800ebba:	3ba0      	subs	r3, #160	; 0xa0
 800ebbc:	e9c3 0100 	strd	r0, r1, [r3]
        xswap_JoAqPjUv(V, 3 * d + 1, 3 * (d + 1) + 1);
 800ebc0:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 800ebc4:	4613      	mov	r3, r2
 800ebc6:	005b      	lsls	r3, r3, #1
 800ebc8:	4413      	add	r3, r2
 800ebca:	1c59      	adds	r1, r3, #1
 800ebcc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800ebd0:	1c5a      	adds	r2, r3, #1
 800ebd2:	4613      	mov	r3, r2
 800ebd4:	005b      	lsls	r3, r3, #1
 800ebd6:	4413      	add	r3, r2
 800ebd8:	3301      	adds	r3, #1
 800ebda:	f507 7080 	add.w	r0, r7, #256	; 0x100
 800ebde:	461a      	mov	r2, r3
 800ebe0:	6800      	ldr	r0, [r0, #0]
 800ebe2:	f001 fa3c 	bl	801005e <xswap_JoAqPjUv>
        xswap_JoAqPjUv(U, 3 * d + 1, 3 * (d + 1) + 1);
 800ebe6:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 800ebea:	4613      	mov	r3, r2
 800ebec:	005b      	lsls	r3, r3, #1
 800ebee:	4413      	add	r3, r2
 800ebf0:	1c59      	adds	r1, r3, #1
 800ebf2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800ebf6:	1c5a      	adds	r2, r3, #1
 800ebf8:	4613      	mov	r3, r2
 800ebfa:	005b      	lsls	r3, r3, #1
 800ebfc:	4413      	add	r3, r2
 800ebfe:	3301      	adds	r3, #1
 800ec00:	461a      	mov	r2, r3
 800ec02:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 800ec06:	f001 fa2a 	bl	801005e <xswap_JoAqPjUv>
        d = qq;
 800ec0a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800ec0e:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
        qq++;
 800ec12:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800ec16:	3301      	adds	r3, #1
 800ec18:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
      while ((d + 1 < 3) && (b_s[d] < b_s[qq])) {
 800ec1c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800ec20:	2b01      	cmp	r3, #1
 800ec22:	dc16      	bgt.n	800ec52 <svd_u3DvUgOe+0x1b1a>
 800ec24:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800ec28:	00db      	lsls	r3, r3, #3
 800ec2a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800ec2e:	4413      	add	r3, r2
 800ec30:	3ba0      	subs	r3, #160	; 0xa0
 800ec32:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ec36:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800ec3a:	00db      	lsls	r3, r3, #3
 800ec3c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800ec40:	4413      	add	r3, r2
 800ec42:	3ba0      	subs	r3, #160	; 0xa0
 800ec44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec48:	f7f1 ff3a 	bl	8000ac0 <__aeabi_dcmplt>
 800ec4c:	4603      	mov	r3, r0
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d18e      	bne.n	800eb70 <svd_u3DvUgOe+0x1a38>
      }

      qq = 0;
 800ec52:	2300      	movs	r3, #0
 800ec54:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
      m--;
 800ec58:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800ec5c:	3b01      	subs	r3, #1
 800ec5e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
      break;
 800ec62:	bf00      	nop
  while ((m + 2 > 0) && (qq < 75)) {
 800ec64:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800ec68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec6c:	db04      	blt.n	800ec78 <svd_u3DvUgOe+0x1b40>
 800ec6e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800ec72:	2b4a      	cmp	r3, #74	; 0x4a
 800ec74:	f77f a972 	ble.w	800df5c <svd_u3DvUgOe+0xe24>
    }
  }

  s[0] = b_s[0];
 800ec78:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 800ec7c:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 800ec80:	e9c1 2300 	strd	r2, r3, [r1]
  s[1] = b_s[1];
 800ec84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ec88:	f103 0108 	add.w	r1, r3, #8
 800ec8c:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 800ec90:	e9c1 2300 	strd	r2, r3, [r1]
  s[2] = b_s[2];
 800ec94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ec98:	f103 0110 	add.w	r1, r3, #16
 800ec9c:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800eca0:	e9c1 2300 	strd	r2, r3, [r1]
}
 800eca4:	bf00      	nop
 800eca6:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800ecaa:	46bd      	mov	sp, r7
 800ecac:	ecbd 8b02 	vpop	{d8}
 800ecb0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ecb4:	f3af 8000 	nop.w
 800ecb8:	00000000 	.word	0x00000000
 800ecbc:	bff00000 	.word	0xbff00000

0800ecc0 <trisolve_BC1XmAGq>:
#include "rtwtypes.h"
#include "trisolve_BC1XmAGq.h"

void trisolve_BC1XmAGq(real_T A, real_T B[3])
{
 800ecc0:	b590      	push	{r4, r7, lr}
 800ecc2:	b085      	sub	sp, #20
 800ecc4:	af00      	add	r7, sp, #0
 800ecc6:	ed87 0b02 	vstr	d0, [r7, #8]
 800ecca:	6078      	str	r0, [r7, #4]
  if (B[0] != 0.0) {
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ecd2:	f04f 0200 	mov.w	r2, #0
 800ecd6:	f04f 0300 	mov.w	r3, #0
 800ecda:	f7f1 fee7 	bl	8000aac <__aeabi_dcmpeq>
 800ecde:	4603      	mov	r3, r0
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d10b      	bne.n	800ecfc <trisolve_BC1XmAGq+0x3c>
    B[0] /= A;
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ecea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ecee:	f7f1 fd9f 	bl	8000830 <__aeabi_ddiv>
 800ecf2:	4602      	mov	r2, r0
 800ecf4:	460b      	mov	r3, r1
 800ecf6:	6879      	ldr	r1, [r7, #4]
 800ecf8:	e9c1 2300 	strd	r2, r3, [r1]
  }

  if (B[1] != 0.0) {
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	3308      	adds	r3, #8
 800ed00:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ed04:	f04f 0200 	mov.w	r2, #0
 800ed08:	f04f 0300 	mov.w	r3, #0
 800ed0c:	f7f1 fece 	bl	8000aac <__aeabi_dcmpeq>
 800ed10:	4603      	mov	r3, r0
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d10e      	bne.n	800ed34 <trisolve_BC1XmAGq+0x74>
    B[1] /= A;
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	3308      	adds	r3, #8
 800ed1a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	f103 0408 	add.w	r4, r3, #8
 800ed24:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ed28:	f7f1 fd82 	bl	8000830 <__aeabi_ddiv>
 800ed2c:	4602      	mov	r2, r0
 800ed2e:	460b      	mov	r3, r1
 800ed30:	e9c4 2300 	strd	r2, r3, [r4]
  }

  if (B[2] != 0.0) {
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	3310      	adds	r3, #16
 800ed38:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ed3c:	f04f 0200 	mov.w	r2, #0
 800ed40:	f04f 0300 	mov.w	r3, #0
 800ed44:	f7f1 feb2 	bl	8000aac <__aeabi_dcmpeq>
 800ed48:	4603      	mov	r3, r0
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d000      	beq.n	800ed50 <trisolve_BC1XmAGq+0x90>
    B[2] /= A;
  }
}
 800ed4e:	e00e      	b.n	800ed6e <trisolve_BC1XmAGq+0xae>
    B[2] /= A;
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	3310      	adds	r3, #16
 800ed54:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	f103 0410 	add.w	r4, r3, #16
 800ed5e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ed62:	f7f1 fd65 	bl	8000830 <__aeabi_ddiv>
 800ed66:	4602      	mov	r2, r0
 800ed68:	460b      	mov	r3, r1
 800ed6a:	e9c4 2300 	strd	r2, r3, [r4]
}
 800ed6e:	bf00      	nop
 800ed70:	3714      	adds	r7, #20
 800ed72:	46bd      	mov	sp, r7
 800ed74:	bd90      	pop	{r4, r7, pc}

0800ed76 <xaxpy_OQ28XA21>:
#include "rtwtypes.h"
#include "xaxpy_OQ28XA21.h"

void xaxpy_OQ28XA21(int32_T n, real_T a, const real_T x[9], int32_T ix0, real_T
                    y[3], int32_T iy0)
{
 800ed76:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ed78:	b08b      	sub	sp, #44	; 0x2c
 800ed7a:	af00      	add	r7, sp, #0
 800ed7c:	6178      	str	r0, [r7, #20]
 800ed7e:	ed87 0b02 	vstr	d0, [r7, #8]
 800ed82:	6139      	str	r1, [r7, #16]
 800ed84:	607a      	str	r2, [r7, #4]
 800ed86:	603b      	str	r3, [r7, #0]
  int32_T k;
  if ((n >= 1) && (!(a == 0.0))) {
 800ed88:	697b      	ldr	r3, [r7, #20]
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	dd43      	ble.n	800ee16 <xaxpy_OQ28XA21+0xa0>
 800ed8e:	f04f 0200 	mov.w	r2, #0
 800ed92:	f04f 0300 	mov.w	r3, #0
 800ed96:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ed9a:	f7f1 fe87 	bl	8000aac <__aeabi_dcmpeq>
 800ed9e:	4603      	mov	r3, r0
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d000      	beq.n	800eda6 <xaxpy_OQ28XA21+0x30>
      y[iy] += a * x[ix];
      ix++;
      iy++;
    }
  }
}
 800eda4:	e037      	b.n	800ee16 <xaxpy_OQ28XA21+0xa0>
    ix = ix0 - 1;
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	3b01      	subs	r3, #1
 800edaa:	623b      	str	r3, [r7, #32]
    iy = iy0 - 1;
 800edac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800edae:	3b01      	subs	r3, #1
 800edb0:	61fb      	str	r3, [r7, #28]
    for (k = 0; k < n; k++) {
 800edb2:	2300      	movs	r3, #0
 800edb4:	627b      	str	r3, [r7, #36]	; 0x24
 800edb6:	e02a      	b.n	800ee0e <xaxpy_OQ28XA21+0x98>
      y[iy] += a * x[ix];
 800edb8:	69fb      	ldr	r3, [r7, #28]
 800edba:	00db      	lsls	r3, r3, #3
 800edbc:	683a      	ldr	r2, [r7, #0]
 800edbe:	4413      	add	r3, r2
 800edc0:	e9d3 4500 	ldrd	r4, r5, [r3]
 800edc4:	6a3b      	ldr	r3, [r7, #32]
 800edc6:	00db      	lsls	r3, r3, #3
 800edc8:	693a      	ldr	r2, [r7, #16]
 800edca:	4413      	add	r3, r2
 800edcc:	e9d3 0100 	ldrd	r0, r1, [r3]
 800edd0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800edd4:	f7f1 fc02 	bl	80005dc <__aeabi_dmul>
 800edd8:	4602      	mov	r2, r0
 800edda:	460b      	mov	r3, r1
 800eddc:	4610      	mov	r0, r2
 800edde:	4619      	mov	r1, r3
 800ede0:	69fb      	ldr	r3, [r7, #28]
 800ede2:	00db      	lsls	r3, r3, #3
 800ede4:	683a      	ldr	r2, [r7, #0]
 800ede6:	18d6      	adds	r6, r2, r3
 800ede8:	4602      	mov	r2, r0
 800edea:	460b      	mov	r3, r1
 800edec:	4620      	mov	r0, r4
 800edee:	4629      	mov	r1, r5
 800edf0:	f7f1 fa3e 	bl	8000270 <__adddf3>
 800edf4:	4602      	mov	r2, r0
 800edf6:	460b      	mov	r3, r1
 800edf8:	e9c6 2300 	strd	r2, r3, [r6]
      ix++;
 800edfc:	6a3b      	ldr	r3, [r7, #32]
 800edfe:	3301      	adds	r3, #1
 800ee00:	623b      	str	r3, [r7, #32]
      iy++;
 800ee02:	69fb      	ldr	r3, [r7, #28]
 800ee04:	3301      	adds	r3, #1
 800ee06:	61fb      	str	r3, [r7, #28]
    for (k = 0; k < n; k++) {
 800ee08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee0a:	3301      	adds	r3, #1
 800ee0c:	627b      	str	r3, [r7, #36]	; 0x24
 800ee0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ee10:	697b      	ldr	r3, [r7, #20]
 800ee12:	429a      	cmp	r2, r3
 800ee14:	dbd0      	blt.n	800edb8 <xaxpy_OQ28XA21+0x42>
}
 800ee16:	bf00      	nop
 800ee18:	372c      	adds	r7, #44	; 0x2c
 800ee1a:	46bd      	mov	sp, r7
 800ee1c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ee1e <xaxpy_Wxch84Fl>:
#include "rtwtypes.h"
#include "xaxpy_Wxch84Fl.h"

void xaxpy_Wxch84Fl(int32_T n, real_T a, const real_T x[3], int32_T ix0, real_T
                    y[9], int32_T iy0)
{
 800ee1e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ee20:	b08b      	sub	sp, #44	; 0x2c
 800ee22:	af00      	add	r7, sp, #0
 800ee24:	6178      	str	r0, [r7, #20]
 800ee26:	ed87 0b02 	vstr	d0, [r7, #8]
 800ee2a:	6139      	str	r1, [r7, #16]
 800ee2c:	607a      	str	r2, [r7, #4]
 800ee2e:	603b      	str	r3, [r7, #0]
  int32_T k;
  if ((n >= 1) && (!(a == 0.0))) {
 800ee30:	697b      	ldr	r3, [r7, #20]
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	dd43      	ble.n	800eebe <xaxpy_Wxch84Fl+0xa0>
 800ee36:	f04f 0200 	mov.w	r2, #0
 800ee3a:	f04f 0300 	mov.w	r3, #0
 800ee3e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ee42:	f7f1 fe33 	bl	8000aac <__aeabi_dcmpeq>
 800ee46:	4603      	mov	r3, r0
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d000      	beq.n	800ee4e <xaxpy_Wxch84Fl+0x30>
      y[iy] += a * x[ix];
      ix++;
      iy++;
    }
  }
}
 800ee4c:	e037      	b.n	800eebe <xaxpy_Wxch84Fl+0xa0>
    ix = ix0 - 1;
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	3b01      	subs	r3, #1
 800ee52:	623b      	str	r3, [r7, #32]
    iy = iy0 - 1;
 800ee54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee56:	3b01      	subs	r3, #1
 800ee58:	61fb      	str	r3, [r7, #28]
    for (k = 0; k < n; k++) {
 800ee5a:	2300      	movs	r3, #0
 800ee5c:	627b      	str	r3, [r7, #36]	; 0x24
 800ee5e:	e02a      	b.n	800eeb6 <xaxpy_Wxch84Fl+0x98>
      y[iy] += a * x[ix];
 800ee60:	69fb      	ldr	r3, [r7, #28]
 800ee62:	00db      	lsls	r3, r3, #3
 800ee64:	683a      	ldr	r2, [r7, #0]
 800ee66:	4413      	add	r3, r2
 800ee68:	e9d3 4500 	ldrd	r4, r5, [r3]
 800ee6c:	6a3b      	ldr	r3, [r7, #32]
 800ee6e:	00db      	lsls	r3, r3, #3
 800ee70:	693a      	ldr	r2, [r7, #16]
 800ee72:	4413      	add	r3, r2
 800ee74:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ee78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ee7c:	f7f1 fbae 	bl	80005dc <__aeabi_dmul>
 800ee80:	4602      	mov	r2, r0
 800ee82:	460b      	mov	r3, r1
 800ee84:	4610      	mov	r0, r2
 800ee86:	4619      	mov	r1, r3
 800ee88:	69fb      	ldr	r3, [r7, #28]
 800ee8a:	00db      	lsls	r3, r3, #3
 800ee8c:	683a      	ldr	r2, [r7, #0]
 800ee8e:	18d6      	adds	r6, r2, r3
 800ee90:	4602      	mov	r2, r0
 800ee92:	460b      	mov	r3, r1
 800ee94:	4620      	mov	r0, r4
 800ee96:	4629      	mov	r1, r5
 800ee98:	f7f1 f9ea 	bl	8000270 <__adddf3>
 800ee9c:	4602      	mov	r2, r0
 800ee9e:	460b      	mov	r3, r1
 800eea0:	e9c6 2300 	strd	r2, r3, [r6]
      ix++;
 800eea4:	6a3b      	ldr	r3, [r7, #32]
 800eea6:	3301      	adds	r3, #1
 800eea8:	623b      	str	r3, [r7, #32]
      iy++;
 800eeaa:	69fb      	ldr	r3, [r7, #28]
 800eeac:	3301      	adds	r3, #1
 800eeae:	61fb      	str	r3, [r7, #28]
    for (k = 0; k < n; k++) {
 800eeb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eeb2:	3301      	adds	r3, #1
 800eeb4:	627b      	str	r3, [r7, #36]	; 0x24
 800eeb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eeb8:	697b      	ldr	r3, [r7, #20]
 800eeba:	429a      	cmp	r2, r3
 800eebc:	dbd0      	blt.n	800ee60 <xaxpy_Wxch84Fl+0x42>
}
 800eebe:	bf00      	nop
 800eec0:	372c      	adds	r7, #44	; 0x2c
 800eec2:	46bd      	mov	sp, r7
 800eec4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800eec6 <xaxpy_guu0hJif>:
#include "rtwtypes.h"
#include "xaxpy_guu0hJif.h"

void xaxpy_guu0hJif(int32_T n, real_T a, int32_T ix0, real_T y[9], int32_T iy0)
{
 800eec6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eec8:	b08b      	sub	sp, #44	; 0x2c
 800eeca:	af00      	add	r7, sp, #0
 800eecc:	6178      	str	r0, [r7, #20]
 800eece:	ed87 0b02 	vstr	d0, [r7, #8]
 800eed2:	6139      	str	r1, [r7, #16]
 800eed4:	607a      	str	r2, [r7, #4]
 800eed6:	603b      	str	r3, [r7, #0]
  int32_T k;
  if ((n >= 1) && (!(a == 0.0))) {
 800eed8:	697b      	ldr	r3, [r7, #20]
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	dd43      	ble.n	800ef66 <xaxpy_guu0hJif+0xa0>
 800eede:	f04f 0200 	mov.w	r2, #0
 800eee2:	f04f 0300 	mov.w	r3, #0
 800eee6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800eeea:	f7f1 fddf 	bl	8000aac <__aeabi_dcmpeq>
 800eeee:	4603      	mov	r3, r0
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d000      	beq.n	800eef6 <xaxpy_guu0hJif+0x30>
      y[iy] += a * y[ix];
      ix++;
      iy++;
    }
  }
}
 800eef4:	e037      	b.n	800ef66 <xaxpy_guu0hJif+0xa0>
    ix = ix0 - 1;
 800eef6:	693b      	ldr	r3, [r7, #16]
 800eef8:	3b01      	subs	r3, #1
 800eefa:	623b      	str	r3, [r7, #32]
    iy = iy0 - 1;
 800eefc:	683b      	ldr	r3, [r7, #0]
 800eefe:	3b01      	subs	r3, #1
 800ef00:	61fb      	str	r3, [r7, #28]
    for (k = 0; k < n; k++) {
 800ef02:	2300      	movs	r3, #0
 800ef04:	627b      	str	r3, [r7, #36]	; 0x24
 800ef06:	e02a      	b.n	800ef5e <xaxpy_guu0hJif+0x98>
      y[iy] += a * y[ix];
 800ef08:	69fb      	ldr	r3, [r7, #28]
 800ef0a:	00db      	lsls	r3, r3, #3
 800ef0c:	687a      	ldr	r2, [r7, #4]
 800ef0e:	4413      	add	r3, r2
 800ef10:	e9d3 4500 	ldrd	r4, r5, [r3]
 800ef14:	6a3b      	ldr	r3, [r7, #32]
 800ef16:	00db      	lsls	r3, r3, #3
 800ef18:	687a      	ldr	r2, [r7, #4]
 800ef1a:	4413      	add	r3, r2
 800ef1c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ef20:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ef24:	f7f1 fb5a 	bl	80005dc <__aeabi_dmul>
 800ef28:	4602      	mov	r2, r0
 800ef2a:	460b      	mov	r3, r1
 800ef2c:	4610      	mov	r0, r2
 800ef2e:	4619      	mov	r1, r3
 800ef30:	69fb      	ldr	r3, [r7, #28]
 800ef32:	00db      	lsls	r3, r3, #3
 800ef34:	687a      	ldr	r2, [r7, #4]
 800ef36:	18d6      	adds	r6, r2, r3
 800ef38:	4602      	mov	r2, r0
 800ef3a:	460b      	mov	r3, r1
 800ef3c:	4620      	mov	r0, r4
 800ef3e:	4629      	mov	r1, r5
 800ef40:	f7f1 f996 	bl	8000270 <__adddf3>
 800ef44:	4602      	mov	r2, r0
 800ef46:	460b      	mov	r3, r1
 800ef48:	e9c6 2300 	strd	r2, r3, [r6]
      ix++;
 800ef4c:	6a3b      	ldr	r3, [r7, #32]
 800ef4e:	3301      	adds	r3, #1
 800ef50:	623b      	str	r3, [r7, #32]
      iy++;
 800ef52:	69fb      	ldr	r3, [r7, #28]
 800ef54:	3301      	adds	r3, #1
 800ef56:	61fb      	str	r3, [r7, #28]
    for (k = 0; k < n; k++) {
 800ef58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef5a:	3301      	adds	r3, #1
 800ef5c:	627b      	str	r3, [r7, #36]	; 0x24
 800ef5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ef60:	697b      	ldr	r3, [r7, #20]
 800ef62:	429a      	cmp	r2, r3
 800ef64:	dbd0      	blt.n	800ef08 <xaxpy_guu0hJif+0x42>
}
 800ef66:	bf00      	nop
 800ef68:	372c      	adds	r7, #44	; 0x2c
 800ef6a:	46bd      	mov	sp, r7
 800ef6c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ef6e <xdotc_mznw4aLl>:
#include "rtwtypes.h"
#include "xdotc_mznw4aLl.h"

real_T xdotc_mznw4aLl(int32_T n, const real_T x[9], int32_T ix0, const real_T y
                      [9], int32_T iy0)
{
 800ef6e:	b580      	push	{r7, lr}
 800ef70:	b08a      	sub	sp, #40	; 0x28
 800ef72:	af00      	add	r7, sp, #0
 800ef74:	60f8      	str	r0, [r7, #12]
 800ef76:	60b9      	str	r1, [r7, #8]
 800ef78:	607a      	str	r2, [r7, #4]
 800ef7a:	603b      	str	r3, [r7, #0]
  real_T d;
  int32_T k;
  d = 0.0;
 800ef7c:	f04f 0200 	mov.w	r2, #0
 800ef80:	f04f 0300 	mov.w	r3, #0
 800ef84:	e9c7 2308 	strd	r2, r3, [r7, #32]
  if (n >= 1) {
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	dd31      	ble.n	800eff2 <xdotc_mznw4aLl+0x84>
    int32_T ix;
    int32_T iy;
    ix = ix0;
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	61bb      	str	r3, [r7, #24]
    iy = iy0;
 800ef92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef94:	617b      	str	r3, [r7, #20]
    for (k = 0; k < n; k++) {
 800ef96:	2300      	movs	r3, #0
 800ef98:	61fb      	str	r3, [r7, #28]
 800ef9a:	e026      	b.n	800efea <xdotc_mznw4aLl+0x7c>
      d += x[ix - 1] * y[iy - 1];
 800ef9c:	69bb      	ldr	r3, [r7, #24]
 800ef9e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800efa2:	3b01      	subs	r3, #1
 800efa4:	00db      	lsls	r3, r3, #3
 800efa6:	68ba      	ldr	r2, [r7, #8]
 800efa8:	4413      	add	r3, r2
 800efaa:	e9d3 0100 	ldrd	r0, r1, [r3]
 800efae:	697b      	ldr	r3, [r7, #20]
 800efb0:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800efb4:	3b01      	subs	r3, #1
 800efb6:	00db      	lsls	r3, r3, #3
 800efb8:	683a      	ldr	r2, [r7, #0]
 800efba:	4413      	add	r3, r2
 800efbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efc0:	f7f1 fb0c 	bl	80005dc <__aeabi_dmul>
 800efc4:	4602      	mov	r2, r0
 800efc6:	460b      	mov	r3, r1
 800efc8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800efcc:	f7f1 f950 	bl	8000270 <__adddf3>
 800efd0:	4602      	mov	r2, r0
 800efd2:	460b      	mov	r3, r1
 800efd4:	e9c7 2308 	strd	r2, r3, [r7, #32]
      ix++;
 800efd8:	69bb      	ldr	r3, [r7, #24]
 800efda:	3301      	adds	r3, #1
 800efdc:	61bb      	str	r3, [r7, #24]
      iy++;
 800efde:	697b      	ldr	r3, [r7, #20]
 800efe0:	3301      	adds	r3, #1
 800efe2:	617b      	str	r3, [r7, #20]
    for (k = 0; k < n; k++) {
 800efe4:	69fb      	ldr	r3, [r7, #28]
 800efe6:	3301      	adds	r3, #1
 800efe8:	61fb      	str	r3, [r7, #28]
 800efea:	69fa      	ldr	r2, [r7, #28]
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	429a      	cmp	r2, r3
 800eff0:	dbd4      	blt.n	800ef9c <xdotc_mznw4aLl+0x2e>
    }
  }

  return d;
 800eff2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800eff6:	ec43 2b17 	vmov	d7, r2, r3
}
 800effa:	eeb0 0a47 	vmov.f32	s0, s14
 800effe:	eef0 0a67 	vmov.f32	s1, s15
 800f002:	3728      	adds	r7, #40	; 0x28
 800f004:	46bd      	mov	sp, r7
 800f006:	bd80      	pop	{r7, pc}

0800f008 <xgemv_NQlWbt2i>:
#include "rtwtypes.h"
#include "xgemv_NQlWbt2i.h"

void xgemv_NQlWbt2i(int32_T m, int32_T n, const real_T A[18], int32_T ia0, const
                    real_T x[18], int32_T ix0, real_T y[3])
{
 800f008:	b590      	push	{r4, r7, lr}
 800f00a:	b08f      	sub	sp, #60	; 0x3c
 800f00c:	af00      	add	r7, sp, #0
 800f00e:	60f8      	str	r0, [r7, #12]
 800f010:	60b9      	str	r1, [r7, #8]
 800f012:	607a      	str	r2, [r7, #4]
 800f014:	603b      	str	r3, [r7, #0]
  int32_T b_iy;
  int32_T ia;
  int32_T iac;
  if ((m != 0) && (n != 0)) {
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d079      	beq.n	800f110 <xgemv_NQlWbt2i+0x108>
 800f01c:	68bb      	ldr	r3, [r7, #8]
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d076      	beq.n	800f110 <xgemv_NQlWbt2i+0x108>
    int32_T b;
    for (b_iy = 0; b_iy < n; b_iy++) {
 800f022:	2300      	movs	r3, #0
 800f024:	637b      	str	r3, [r7, #52]	; 0x34
 800f026:	e00c      	b.n	800f042 <xgemv_NQlWbt2i+0x3a>
      y[b_iy] = 0.0;
 800f028:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f02a:	00db      	lsls	r3, r3, #3
 800f02c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f02e:	18d1      	adds	r1, r2, r3
 800f030:	f04f 0200 	mov.w	r2, #0
 800f034:	f04f 0300 	mov.w	r3, #0
 800f038:	e9c1 2300 	strd	r2, r3, [r1]
    for (b_iy = 0; b_iy < n; b_iy++) {
 800f03c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f03e:	3301      	adds	r3, #1
 800f040:	637b      	str	r3, [r7, #52]	; 0x34
 800f042:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f044:	68bb      	ldr	r3, [r7, #8]
 800f046:	429a      	cmp	r2, r3
 800f048:	dbee      	blt.n	800f028 <xgemv_NQlWbt2i+0x20>
    }

    b_iy = 0;
 800f04a:	2300      	movs	r3, #0
 800f04c:	637b      	str	r3, [r7, #52]	; 0x34
    b = (n - 1) * 6 + ia0;
 800f04e:	68bb      	ldr	r3, [r7, #8]
 800f050:	1e5a      	subs	r2, r3, #1
 800f052:	4613      	mov	r3, r2
 800f054:	005b      	lsls	r3, r3, #1
 800f056:	4413      	add	r3, r2
 800f058:	005b      	lsls	r3, r3, #1
 800f05a:	461a      	mov	r2, r3
 800f05c:	683b      	ldr	r3, [r7, #0]
 800f05e:	4413      	add	r3, r2
 800f060:	61bb      	str	r3, [r7, #24]
    for (iac = ia0; iac <= b; iac += 6) {
 800f062:	683b      	ldr	r3, [r7, #0]
 800f064:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f066:	e04f      	b.n	800f108 <xgemv_NQlWbt2i+0x100>
      real_T c;
      int32_T d;
      int32_T ix;
      ix = ix0;
 800f068:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f06a:	61fb      	str	r3, [r7, #28]
      c = 0.0;
 800f06c:	f04f 0200 	mov.w	r2, #0
 800f070:	f04f 0300 	mov.w	r3, #0
 800f074:	e9c7 2308 	strd	r2, r3, [r7, #32]
      d = (iac + m) - 1;
 800f078:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f07a:	68fb      	ldr	r3, [r7, #12]
 800f07c:	4413      	add	r3, r2
 800f07e:	3b01      	subs	r3, #1
 800f080:	617b      	str	r3, [r7, #20]
      for (ia = iac; ia <= d; ia++) {
 800f082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f084:	633b      	str	r3, [r7, #48]	; 0x30
 800f086:	e023      	b.n	800f0d0 <xgemv_NQlWbt2i+0xc8>
        c += A[ia - 1] * x[ix - 1];
 800f088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f08a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800f08e:	3b01      	subs	r3, #1
 800f090:	00db      	lsls	r3, r3, #3
 800f092:	687a      	ldr	r2, [r7, #4]
 800f094:	4413      	add	r3, r2
 800f096:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f09a:	69fb      	ldr	r3, [r7, #28]
 800f09c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800f0a0:	3b01      	subs	r3, #1
 800f0a2:	00db      	lsls	r3, r3, #3
 800f0a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f0a6:	4413      	add	r3, r2
 800f0a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0ac:	f7f1 fa96 	bl	80005dc <__aeabi_dmul>
 800f0b0:	4602      	mov	r2, r0
 800f0b2:	460b      	mov	r3, r1
 800f0b4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800f0b8:	f7f1 f8da 	bl	8000270 <__adddf3>
 800f0bc:	4602      	mov	r2, r0
 800f0be:	460b      	mov	r3, r1
 800f0c0:	e9c7 2308 	strd	r2, r3, [r7, #32]
        ix++;
 800f0c4:	69fb      	ldr	r3, [r7, #28]
 800f0c6:	3301      	adds	r3, #1
 800f0c8:	61fb      	str	r3, [r7, #28]
      for (ia = iac; ia <= d; ia++) {
 800f0ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0cc:	3301      	adds	r3, #1
 800f0ce:	633b      	str	r3, [r7, #48]	; 0x30
 800f0d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f0d2:	697b      	ldr	r3, [r7, #20]
 800f0d4:	429a      	cmp	r2, r3
 800f0d6:	ddd7      	ble.n	800f088 <xgemv_NQlWbt2i+0x80>
      }

      y[b_iy] += c;
 800f0d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f0da:	00db      	lsls	r3, r3, #3
 800f0dc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f0de:	4413      	add	r3, r2
 800f0e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f0e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f0e6:	00db      	lsls	r3, r3, #3
 800f0e8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f0ea:	18d4      	adds	r4, r2, r3
 800f0ec:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800f0f0:	f7f1 f8be 	bl	8000270 <__adddf3>
 800f0f4:	4602      	mov	r2, r0
 800f0f6:	460b      	mov	r3, r1
 800f0f8:	e9c4 2300 	strd	r2, r3, [r4]
      b_iy++;
 800f0fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f0fe:	3301      	adds	r3, #1
 800f100:	637b      	str	r3, [r7, #52]	; 0x34
    for (iac = ia0; iac <= b; iac += 6) {
 800f102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f104:	3306      	adds	r3, #6
 800f106:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f108:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f10a:	69bb      	ldr	r3, [r7, #24]
 800f10c:	429a      	cmp	r2, r3
 800f10e:	ddab      	ble.n	800f068 <xgemv_NQlWbt2i+0x60>
    }
  }
}
 800f110:	bf00      	nop
 800f112:	373c      	adds	r7, #60	; 0x3c
 800f114:	46bd      	mov	sp, r7
 800f116:	bd90      	pop	{r4, r7, pc}

0800f118 <xgemv_fRiR1I1O>:
#include "rtwtypes.h"
#include "xgemv_fRiR1I1O.h"

void xgemv_fRiR1I1O(int32_T m, int32_T n, const real_T A[9], int32_T ia0, const
                    real_T x[9], int32_T ix0, real_T y[3])
{
 800f118:	b590      	push	{r4, r7, lr}
 800f11a:	b08f      	sub	sp, #60	; 0x3c
 800f11c:	af00      	add	r7, sp, #0
 800f11e:	60f8      	str	r0, [r7, #12]
 800f120:	60b9      	str	r1, [r7, #8]
 800f122:	607a      	str	r2, [r7, #4]
 800f124:	603b      	str	r3, [r7, #0]
  int32_T b_iy;
  int32_T ia;
  int32_T iac;
  if ((m != 0) && (n != 0)) {
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d077      	beq.n	800f21c <xgemv_fRiR1I1O+0x104>
 800f12c:	68bb      	ldr	r3, [r7, #8]
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d074      	beq.n	800f21c <xgemv_fRiR1I1O+0x104>
    int32_T b;
    for (b_iy = 0; b_iy < n; b_iy++) {
 800f132:	2300      	movs	r3, #0
 800f134:	637b      	str	r3, [r7, #52]	; 0x34
 800f136:	e00c      	b.n	800f152 <xgemv_fRiR1I1O+0x3a>
      y[b_iy] = 0.0;
 800f138:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f13a:	00db      	lsls	r3, r3, #3
 800f13c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f13e:	18d1      	adds	r1, r2, r3
 800f140:	f04f 0200 	mov.w	r2, #0
 800f144:	f04f 0300 	mov.w	r3, #0
 800f148:	e9c1 2300 	strd	r2, r3, [r1]
    for (b_iy = 0; b_iy < n; b_iy++) {
 800f14c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f14e:	3301      	adds	r3, #1
 800f150:	637b      	str	r3, [r7, #52]	; 0x34
 800f152:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f154:	68bb      	ldr	r3, [r7, #8]
 800f156:	429a      	cmp	r2, r3
 800f158:	dbee      	blt.n	800f138 <xgemv_fRiR1I1O+0x20>
    }

    b_iy = 0;
 800f15a:	2300      	movs	r3, #0
 800f15c:	637b      	str	r3, [r7, #52]	; 0x34
    b = (n - 1) * 3 + ia0;
 800f15e:	68bb      	ldr	r3, [r7, #8]
 800f160:	1e5a      	subs	r2, r3, #1
 800f162:	4613      	mov	r3, r2
 800f164:	005b      	lsls	r3, r3, #1
 800f166:	4413      	add	r3, r2
 800f168:	683a      	ldr	r2, [r7, #0]
 800f16a:	4413      	add	r3, r2
 800f16c:	61bb      	str	r3, [r7, #24]
    for (iac = ia0; iac <= b; iac += 3) {
 800f16e:	683b      	ldr	r3, [r7, #0]
 800f170:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f172:	e04f      	b.n	800f214 <xgemv_fRiR1I1O+0xfc>
      real_T c;
      int32_T d;
      int32_T ix;
      ix = ix0;
 800f174:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f176:	61fb      	str	r3, [r7, #28]
      c = 0.0;
 800f178:	f04f 0200 	mov.w	r2, #0
 800f17c:	f04f 0300 	mov.w	r3, #0
 800f180:	e9c7 2308 	strd	r2, r3, [r7, #32]
      d = (iac + m) - 1;
 800f184:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	4413      	add	r3, r2
 800f18a:	3b01      	subs	r3, #1
 800f18c:	617b      	str	r3, [r7, #20]
      for (ia = iac; ia <= d; ia++) {
 800f18e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f190:	633b      	str	r3, [r7, #48]	; 0x30
 800f192:	e023      	b.n	800f1dc <xgemv_fRiR1I1O+0xc4>
        c += A[ia - 1] * x[ix - 1];
 800f194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f196:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800f19a:	3b01      	subs	r3, #1
 800f19c:	00db      	lsls	r3, r3, #3
 800f19e:	687a      	ldr	r2, [r7, #4]
 800f1a0:	4413      	add	r3, r2
 800f1a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f1a6:	69fb      	ldr	r3, [r7, #28]
 800f1a8:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800f1ac:	3b01      	subs	r3, #1
 800f1ae:	00db      	lsls	r3, r3, #3
 800f1b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f1b2:	4413      	add	r3, r2
 800f1b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1b8:	f7f1 fa10 	bl	80005dc <__aeabi_dmul>
 800f1bc:	4602      	mov	r2, r0
 800f1be:	460b      	mov	r3, r1
 800f1c0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800f1c4:	f7f1 f854 	bl	8000270 <__adddf3>
 800f1c8:	4602      	mov	r2, r0
 800f1ca:	460b      	mov	r3, r1
 800f1cc:	e9c7 2308 	strd	r2, r3, [r7, #32]
        ix++;
 800f1d0:	69fb      	ldr	r3, [r7, #28]
 800f1d2:	3301      	adds	r3, #1
 800f1d4:	61fb      	str	r3, [r7, #28]
      for (ia = iac; ia <= d; ia++) {
 800f1d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1d8:	3301      	adds	r3, #1
 800f1da:	633b      	str	r3, [r7, #48]	; 0x30
 800f1dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f1de:	697b      	ldr	r3, [r7, #20]
 800f1e0:	429a      	cmp	r2, r3
 800f1e2:	ddd7      	ble.n	800f194 <xgemv_fRiR1I1O+0x7c>
      }

      y[b_iy] += c;
 800f1e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f1e6:	00db      	lsls	r3, r3, #3
 800f1e8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f1ea:	4413      	add	r3, r2
 800f1ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f1f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f1f2:	00db      	lsls	r3, r3, #3
 800f1f4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f1f6:	18d4      	adds	r4, r2, r3
 800f1f8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800f1fc:	f7f1 f838 	bl	8000270 <__adddf3>
 800f200:	4602      	mov	r2, r0
 800f202:	460b      	mov	r3, r1
 800f204:	e9c4 2300 	strd	r2, r3, [r4]
      b_iy++;
 800f208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f20a:	3301      	adds	r3, #1
 800f20c:	637b      	str	r3, [r7, #52]	; 0x34
    for (iac = ia0; iac <= b; iac += 3) {
 800f20e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f210:	3303      	adds	r3, #3
 800f212:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f214:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f216:	69bb      	ldr	r3, [r7, #24]
 800f218:	429a      	cmp	r2, r3
 800f21a:	ddab      	ble.n	800f174 <xgemv_fRiR1I1O+0x5c>
    }
  }
}
 800f21c:	bf00      	nop
 800f21e:	373c      	adds	r7, #60	; 0x3c
 800f220:	46bd      	mov	sp, r7
 800f222:	bd90      	pop	{r4, r7, pc}

0800f224 <xgerc_R09LiDgJ>:
#include "rtwtypes.h"
#include "xgerc_R09LiDgJ.h"

void xgerc_R09LiDgJ(int32_T m, int32_T n, real_T alpha1, int32_T ix0, const
                    real_T y[3], real_T A[18], int32_T ia0)
{
 800f224:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f226:	b091      	sub	sp, #68	; 0x44
 800f228:	af00      	add	r7, sp, #0
 800f22a:	6178      	str	r0, [r7, #20]
 800f22c:	6139      	str	r1, [r7, #16]
 800f22e:	ed87 0b02 	vstr	d0, [r7, #8]
 800f232:	607a      	str	r2, [r7, #4]
 800f234:	603b      	str	r3, [r7, #0]
  int32_T j;
  if (!(alpha1 == 0.0)) {
 800f236:	f04f 0200 	mov.w	r2, #0
 800f23a:	f04f 0300 	mov.w	r3, #0
 800f23e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f242:	f7f1 fc33 	bl	8000aac <__aeabi_dcmpeq>
 800f246:	4603      	mov	r3, r0
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d000      	beq.n	800f24e <xgerc_R09LiDgJ+0x2a>

      jy++;
      jA += 6;
    }
  }
}
 800f24c:	e069      	b.n	800f322 <xgerc_R09LiDgJ+0xfe>
    jA = ia0 - 1;
 800f24e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f250:	3b01      	subs	r3, #1
 800f252:	63bb      	str	r3, [r7, #56]	; 0x38
    jy = 0;
 800f254:	2300      	movs	r3, #0
 800f256:	637b      	str	r3, [r7, #52]	; 0x34
    for (j = 0; j < n; j++) {
 800f258:	2300      	movs	r3, #0
 800f25a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f25c:	e05d      	b.n	800f31a <xgerc_R09LiDgJ+0xf6>
      if (y[jy] != 0.0) {
 800f25e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f260:	00db      	lsls	r3, r3, #3
 800f262:	683a      	ldr	r2, [r7, #0]
 800f264:	4413      	add	r3, r2
 800f266:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f26a:	f04f 0200 	mov.w	r2, #0
 800f26e:	f04f 0300 	mov.w	r3, #0
 800f272:	f7f1 fc1b 	bl	8000aac <__aeabi_dcmpeq>
 800f276:	4603      	mov	r3, r0
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d145      	bne.n	800f308 <xgerc_R09LiDgJ+0xe4>
        temp = y[jy] * alpha1;
 800f27c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f27e:	00db      	lsls	r3, r3, #3
 800f280:	683a      	ldr	r2, [r7, #0]
 800f282:	4413      	add	r3, r2
 800f284:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f288:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f28c:	f7f1 f9a6 	bl	80005dc <__aeabi_dmul>
 800f290:	4602      	mov	r2, r0
 800f292:	460b      	mov	r3, r1
 800f294:	e9c7 2308 	strd	r2, r3, [r7, #32]
        ix = ix0;
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ijA = jA;
 800f29c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f29e:	633b      	str	r3, [r7, #48]	; 0x30
        b = m + jA;
 800f2a0:	697a      	ldr	r2, [r7, #20]
 800f2a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2a4:	4413      	add	r3, r2
 800f2a6:	61fb      	str	r3, [r7, #28]
        while (ijA + 1 <= b) {
 800f2a8:	e02a      	b.n	800f300 <xgerc_R09LiDgJ+0xdc>
          A[ijA] += A[ix - 1] * temp;
 800f2aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2ac:	00db      	lsls	r3, r3, #3
 800f2ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f2b0:	4413      	add	r3, r2
 800f2b2:	e9d3 4500 	ldrd	r4, r5, [r3]
 800f2b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2b8:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800f2bc:	3b01      	subs	r3, #1
 800f2be:	00db      	lsls	r3, r3, #3
 800f2c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f2c2:	4413      	add	r3, r2
 800f2c4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f2c8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800f2cc:	f7f1 f986 	bl	80005dc <__aeabi_dmul>
 800f2d0:	4602      	mov	r2, r0
 800f2d2:	460b      	mov	r3, r1
 800f2d4:	4610      	mov	r0, r2
 800f2d6:	4619      	mov	r1, r3
 800f2d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2da:	00db      	lsls	r3, r3, #3
 800f2dc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f2de:	18d6      	adds	r6, r2, r3
 800f2e0:	4602      	mov	r2, r0
 800f2e2:	460b      	mov	r3, r1
 800f2e4:	4620      	mov	r0, r4
 800f2e6:	4629      	mov	r1, r5
 800f2e8:	f7f0 ffc2 	bl	8000270 <__adddf3>
 800f2ec:	4602      	mov	r2, r0
 800f2ee:	460b      	mov	r3, r1
 800f2f0:	e9c6 2300 	strd	r2, r3, [r6]
          ix++;
 800f2f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2f6:	3301      	adds	r3, #1
 800f2f8:	62fb      	str	r3, [r7, #44]	; 0x2c
          ijA++;
 800f2fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2fc:	3301      	adds	r3, #1
 800f2fe:	633b      	str	r3, [r7, #48]	; 0x30
        while (ijA + 1 <= b) {
 800f300:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f302:	69fb      	ldr	r3, [r7, #28]
 800f304:	429a      	cmp	r2, r3
 800f306:	dbd0      	blt.n	800f2aa <xgerc_R09LiDgJ+0x86>
      jy++;
 800f308:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f30a:	3301      	adds	r3, #1
 800f30c:	637b      	str	r3, [r7, #52]	; 0x34
      jA += 6;
 800f30e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f310:	3306      	adds	r3, #6
 800f312:	63bb      	str	r3, [r7, #56]	; 0x38
    for (j = 0; j < n; j++) {
 800f314:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f316:	3301      	adds	r3, #1
 800f318:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f31a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f31c:	693b      	ldr	r3, [r7, #16]
 800f31e:	429a      	cmp	r2, r3
 800f320:	db9d      	blt.n	800f25e <xgerc_R09LiDgJ+0x3a>
}
 800f322:	bf00      	nop
 800f324:	3744      	adds	r7, #68	; 0x44
 800f326:	46bd      	mov	sp, r7
 800f328:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f32a <xgerc_tNNiazQU>:
#include "rtwtypes.h"
#include "xgerc_tNNiazQU.h"

void xgerc_tNNiazQU(int32_T m, int32_T n, real_T alpha1, int32_T ix0, const
                    real_T y[3], real_T A[9], int32_T ia0)
{
 800f32a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f32c:	b091      	sub	sp, #68	; 0x44
 800f32e:	af00      	add	r7, sp, #0
 800f330:	6178      	str	r0, [r7, #20]
 800f332:	6139      	str	r1, [r7, #16]
 800f334:	ed87 0b02 	vstr	d0, [r7, #8]
 800f338:	607a      	str	r2, [r7, #4]
 800f33a:	603b      	str	r3, [r7, #0]
  int32_T j;
  if (!(alpha1 == 0.0)) {
 800f33c:	f04f 0200 	mov.w	r2, #0
 800f340:	f04f 0300 	mov.w	r3, #0
 800f344:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f348:	f7f1 fbb0 	bl	8000aac <__aeabi_dcmpeq>
 800f34c:	4603      	mov	r3, r0
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d000      	beq.n	800f354 <xgerc_tNNiazQU+0x2a>

      jy++;
      jA += 3;
    }
  }
}
 800f352:	e069      	b.n	800f428 <xgerc_tNNiazQU+0xfe>
    jA = ia0 - 1;
 800f354:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f356:	3b01      	subs	r3, #1
 800f358:	63bb      	str	r3, [r7, #56]	; 0x38
    jy = 0;
 800f35a:	2300      	movs	r3, #0
 800f35c:	637b      	str	r3, [r7, #52]	; 0x34
    for (j = 0; j < n; j++) {
 800f35e:	2300      	movs	r3, #0
 800f360:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f362:	e05d      	b.n	800f420 <xgerc_tNNiazQU+0xf6>
      if (y[jy] != 0.0) {
 800f364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f366:	00db      	lsls	r3, r3, #3
 800f368:	683a      	ldr	r2, [r7, #0]
 800f36a:	4413      	add	r3, r2
 800f36c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f370:	f04f 0200 	mov.w	r2, #0
 800f374:	f04f 0300 	mov.w	r3, #0
 800f378:	f7f1 fb98 	bl	8000aac <__aeabi_dcmpeq>
 800f37c:	4603      	mov	r3, r0
 800f37e:	2b00      	cmp	r3, #0
 800f380:	d145      	bne.n	800f40e <xgerc_tNNiazQU+0xe4>
        temp = y[jy] * alpha1;
 800f382:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f384:	00db      	lsls	r3, r3, #3
 800f386:	683a      	ldr	r2, [r7, #0]
 800f388:	4413      	add	r3, r2
 800f38a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f38e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f392:	f7f1 f923 	bl	80005dc <__aeabi_dmul>
 800f396:	4602      	mov	r2, r0
 800f398:	460b      	mov	r3, r1
 800f39a:	e9c7 2308 	strd	r2, r3, [r7, #32]
        ix = ix0;
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ijA = jA;
 800f3a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3a4:	633b      	str	r3, [r7, #48]	; 0x30
        b = m + jA;
 800f3a6:	697a      	ldr	r2, [r7, #20]
 800f3a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3aa:	4413      	add	r3, r2
 800f3ac:	61fb      	str	r3, [r7, #28]
        while (ijA + 1 <= b) {
 800f3ae:	e02a      	b.n	800f406 <xgerc_tNNiazQU+0xdc>
          A[ijA] += A[ix - 1] * temp;
 800f3b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3b2:	00db      	lsls	r3, r3, #3
 800f3b4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f3b6:	4413      	add	r3, r2
 800f3b8:	e9d3 4500 	ldrd	r4, r5, [r3]
 800f3bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3be:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800f3c2:	3b01      	subs	r3, #1
 800f3c4:	00db      	lsls	r3, r3, #3
 800f3c6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f3c8:	4413      	add	r3, r2
 800f3ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f3ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800f3d2:	f7f1 f903 	bl	80005dc <__aeabi_dmul>
 800f3d6:	4602      	mov	r2, r0
 800f3d8:	460b      	mov	r3, r1
 800f3da:	4610      	mov	r0, r2
 800f3dc:	4619      	mov	r1, r3
 800f3de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3e0:	00db      	lsls	r3, r3, #3
 800f3e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f3e4:	18d6      	adds	r6, r2, r3
 800f3e6:	4602      	mov	r2, r0
 800f3e8:	460b      	mov	r3, r1
 800f3ea:	4620      	mov	r0, r4
 800f3ec:	4629      	mov	r1, r5
 800f3ee:	f7f0 ff3f 	bl	8000270 <__adddf3>
 800f3f2:	4602      	mov	r2, r0
 800f3f4:	460b      	mov	r3, r1
 800f3f6:	e9c6 2300 	strd	r2, r3, [r6]
          ix++;
 800f3fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3fc:	3301      	adds	r3, #1
 800f3fe:	62fb      	str	r3, [r7, #44]	; 0x2c
          ijA++;
 800f400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f402:	3301      	adds	r3, #1
 800f404:	633b      	str	r3, [r7, #48]	; 0x30
        while (ijA + 1 <= b) {
 800f406:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f408:	69fb      	ldr	r3, [r7, #28]
 800f40a:	429a      	cmp	r2, r3
 800f40c:	dbd0      	blt.n	800f3b0 <xgerc_tNNiazQU+0x86>
      jy++;
 800f40e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f410:	3301      	adds	r3, #1
 800f412:	637b      	str	r3, [r7, #52]	; 0x34
      jA += 3;
 800f414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f416:	3303      	adds	r3, #3
 800f418:	63bb      	str	r3, [r7, #56]	; 0x38
    for (j = 0; j < n; j++) {
 800f41a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f41c:	3301      	adds	r3, #1
 800f41e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f420:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f422:	693b      	ldr	r3, [r7, #16]
 800f424:	429a      	cmp	r2, r3
 800f426:	db9d      	blt.n	800f364 <xgerc_tNNiazQU+0x3a>
}
 800f428:	bf00      	nop
 800f42a:	3744      	adds	r7, #68	; 0x44
 800f42c:	46bd      	mov	sp, r7
 800f42e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f430 <xnrm2_7bm34mDQ>:
#include "rtwtypes.h"
#include "xnrm2_7bm34mDQ.h"
#include <math.h>

real_T xnrm2_7bm34mDQ(int32_T n, const real_T x[6], int32_T ix0)
{
 800f430:	b580      	push	{r7, lr}
 800f432:	b092      	sub	sp, #72	; 0x48
 800f434:	af00      	add	r7, sp, #0
 800f436:	60f8      	str	r0, [r7, #12]
 800f438:	60b9      	str	r1, [r7, #8]
 800f43a:	607a      	str	r2, [r7, #4]
  real_T y;
  int32_T k;
  y = 0.0;
 800f43c:	f04f 0200 	mov.w	r2, #0
 800f440:	f04f 0300 	mov.w	r3, #0
 800f444:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  if (n >= 1) {
 800f448:	68fb      	ldr	r3, [r7, #12]
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	f340 8090 	ble.w	800f570 <xnrm2_7bm34mDQ+0x140>
    if (n == 1) {
 800f450:	68fb      	ldr	r3, [r7, #12]
 800f452:	2b01      	cmp	r3, #1
 800f454:	d10e      	bne.n	800f474 <xnrm2_7bm34mDQ+0x44>
      y = fabs(x[ix0 - 1]);
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800f45c:	3b01      	subs	r3, #1
 800f45e:	00db      	lsls	r3, r3, #3
 800f460:	68ba      	ldr	r2, [r7, #8]
 800f462:	4413      	add	r3, r2
 800f464:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f468:	4611      	mov	r1, r2
 800f46a:	6439      	str	r1, [r7, #64]	; 0x40
 800f46c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f470:	647b      	str	r3, [r7, #68]	; 0x44
 800f472:	e07d      	b.n	800f570 <xnrm2_7bm34mDQ+0x140>
    } else {
      real_T scale;
      int32_T kend;
      scale = 3.3121686421112381E-170;
 800f474:	f04f 0200 	mov.w	r2, #0
 800f478:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 800f47c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      kend = (ix0 + n) - 1;
 800f480:	687a      	ldr	r2, [r7, #4]
 800f482:	68fb      	ldr	r3, [r7, #12]
 800f484:	4413      	add	r3, r2
 800f486:	3b01      	subs	r3, #1
 800f488:	62fb      	str	r3, [r7, #44]	; 0x2c
      for (k = ix0; k <= kend; k++) {
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f48e:	e05d      	b.n	800f54c <xnrm2_7bm34mDQ+0x11c>
        real_T absxk;
        absxk = fabs(x[k - 1]);
 800f490:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f492:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800f496:	3b01      	subs	r3, #1
 800f498:	00db      	lsls	r3, r3, #3
 800f49a:	68ba      	ldr	r2, [r7, #8]
 800f49c:	4413      	add	r3, r2
 800f49e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4a2:	4611      	mov	r1, r2
 800f4a4:	6239      	str	r1, [r7, #32]
 800f4a6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f4aa:	627b      	str	r3, [r7, #36]	; 0x24
        if (absxk > scale) {
 800f4ac:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f4b0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800f4b4:	f7f1 fb22 	bl	8000afc <__aeabi_dcmpgt>
 800f4b8:	4603      	mov	r3, r0
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d029      	beq.n	800f512 <xnrm2_7bm34mDQ+0xe2>
          real_T t;
          t = scale / absxk;
 800f4be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800f4c2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800f4c6:	f7f1 f9b3 	bl	8000830 <__aeabi_ddiv>
 800f4ca:	4602      	mov	r2, r0
 800f4cc:	460b      	mov	r3, r1
 800f4ce:	e9c7 2304 	strd	r2, r3, [r7, #16]
          y = y * t * t + 1.0;
 800f4d2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800f4d6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800f4da:	f7f1 f87f 	bl	80005dc <__aeabi_dmul>
 800f4de:	4602      	mov	r2, r0
 800f4e0:	460b      	mov	r3, r1
 800f4e2:	4610      	mov	r0, r2
 800f4e4:	4619      	mov	r1, r3
 800f4e6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800f4ea:	f7f1 f877 	bl	80005dc <__aeabi_dmul>
 800f4ee:	4602      	mov	r2, r0
 800f4f0:	460b      	mov	r3, r1
 800f4f2:	4610      	mov	r0, r2
 800f4f4:	4619      	mov	r1, r3
 800f4f6:	f04f 0200 	mov.w	r2, #0
 800f4fa:	4b23      	ldr	r3, [pc, #140]	; (800f588 <xnrm2_7bm34mDQ+0x158>)
 800f4fc:	f7f0 feb8 	bl	8000270 <__adddf3>
 800f500:	4602      	mov	r2, r0
 800f502:	460b      	mov	r3, r1
 800f504:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
          scale = absxk;
 800f508:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800f50c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 800f510:	e019      	b.n	800f546 <xnrm2_7bm34mDQ+0x116>
        } else {
          real_T t;
          t = absxk / scale;
 800f512:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f516:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800f51a:	f7f1 f989 	bl	8000830 <__aeabi_ddiv>
 800f51e:	4602      	mov	r2, r0
 800f520:	460b      	mov	r3, r1
 800f522:	e9c7 2306 	strd	r2, r3, [r7, #24]
          y += t * t;
 800f526:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800f52a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800f52e:	f7f1 f855 	bl	80005dc <__aeabi_dmul>
 800f532:	4602      	mov	r2, r0
 800f534:	460b      	mov	r3, r1
 800f536:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800f53a:	f7f0 fe99 	bl	8000270 <__adddf3>
 800f53e:	4602      	mov	r2, r0
 800f540:	460b      	mov	r3, r1
 800f542:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      for (k = ix0; k <= kend; k++) {
 800f546:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f548:	3301      	adds	r3, #1
 800f54a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f54c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f54e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f550:	429a      	cmp	r2, r3
 800f552:	dd9d      	ble.n	800f490 <xnrm2_7bm34mDQ+0x60>
        }
      }

      y = scale * sqrt(y);
 800f554:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 800f558:	f00b ff46 	bl	801b3e8 <sqrt>
 800f55c:	ec53 2b10 	vmov	r2, r3, d0
 800f560:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800f564:	f7f1 f83a 	bl	80005dc <__aeabi_dmul>
 800f568:	4602      	mov	r2, r0
 800f56a:	460b      	mov	r3, r1
 800f56c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    }
  }

  return y;
 800f570:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800f574:	ec43 2b17 	vmov	d7, r2, r3
}
 800f578:	eeb0 0a47 	vmov.f32	s0, s14
 800f57c:	eef0 0a67 	vmov.f32	s1, s15
 800f580:	3748      	adds	r7, #72	; 0x48
 800f582:	46bd      	mov	sp, r7
 800f584:	bd80      	pop	{r7, pc}
 800f586:	bf00      	nop
 800f588:	3ff00000 	.word	0x3ff00000

0800f58c <xnrm2_Mnmxg9YT>:
#include "rtwtypes.h"
#include "xnrm2_Mnmxg9YT.h"
#include <math.h>

real_T xnrm2_Mnmxg9YT(int32_T n, const real_T x[2], int32_T ix0)
{
 800f58c:	b580      	push	{r7, lr}
 800f58e:	b092      	sub	sp, #72	; 0x48
 800f590:	af00      	add	r7, sp, #0
 800f592:	60f8      	str	r0, [r7, #12]
 800f594:	60b9      	str	r1, [r7, #8]
 800f596:	607a      	str	r2, [r7, #4]
  real_T y;
  int32_T k;
  y = 0.0;
 800f598:	f04f 0200 	mov.w	r2, #0
 800f59c:	f04f 0300 	mov.w	r3, #0
 800f5a0:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  if (n >= 1) {
 800f5a4:	68fb      	ldr	r3, [r7, #12]
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	f340 8090 	ble.w	800f6cc <xnrm2_Mnmxg9YT+0x140>
    if (n == 1) {
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	2b01      	cmp	r3, #1
 800f5b0:	d10e      	bne.n	800f5d0 <xnrm2_Mnmxg9YT+0x44>
      y = fabs(x[ix0 - 1]);
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800f5b8:	3b01      	subs	r3, #1
 800f5ba:	00db      	lsls	r3, r3, #3
 800f5bc:	68ba      	ldr	r2, [r7, #8]
 800f5be:	4413      	add	r3, r2
 800f5c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5c4:	4611      	mov	r1, r2
 800f5c6:	6439      	str	r1, [r7, #64]	; 0x40
 800f5c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f5cc:	647b      	str	r3, [r7, #68]	; 0x44
 800f5ce:	e07d      	b.n	800f6cc <xnrm2_Mnmxg9YT+0x140>
    } else {
      real_T scale;
      int32_T kend;
      scale = 3.3121686421112381E-170;
 800f5d0:	f04f 0200 	mov.w	r2, #0
 800f5d4:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 800f5d8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      kend = (ix0 + n) - 1;
 800f5dc:	687a      	ldr	r2, [r7, #4]
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	4413      	add	r3, r2
 800f5e2:	3b01      	subs	r3, #1
 800f5e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      for (k = ix0; k <= kend; k++) {
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f5ea:	e05d      	b.n	800f6a8 <xnrm2_Mnmxg9YT+0x11c>
        real_T absxk;
        absxk = fabs(x[k - 1]);
 800f5ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f5ee:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800f5f2:	3b01      	subs	r3, #1
 800f5f4:	00db      	lsls	r3, r3, #3
 800f5f6:	68ba      	ldr	r2, [r7, #8]
 800f5f8:	4413      	add	r3, r2
 800f5fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5fe:	4611      	mov	r1, r2
 800f600:	6239      	str	r1, [r7, #32]
 800f602:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f606:	627b      	str	r3, [r7, #36]	; 0x24
        if (absxk > scale) {
 800f608:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f60c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800f610:	f7f1 fa74 	bl	8000afc <__aeabi_dcmpgt>
 800f614:	4603      	mov	r3, r0
 800f616:	2b00      	cmp	r3, #0
 800f618:	d029      	beq.n	800f66e <xnrm2_Mnmxg9YT+0xe2>
          real_T t;
          t = scale / absxk;
 800f61a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800f61e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800f622:	f7f1 f905 	bl	8000830 <__aeabi_ddiv>
 800f626:	4602      	mov	r2, r0
 800f628:	460b      	mov	r3, r1
 800f62a:	e9c7 2304 	strd	r2, r3, [r7, #16]
          y = y * t * t + 1.0;
 800f62e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800f632:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800f636:	f7f0 ffd1 	bl	80005dc <__aeabi_dmul>
 800f63a:	4602      	mov	r2, r0
 800f63c:	460b      	mov	r3, r1
 800f63e:	4610      	mov	r0, r2
 800f640:	4619      	mov	r1, r3
 800f642:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800f646:	f7f0 ffc9 	bl	80005dc <__aeabi_dmul>
 800f64a:	4602      	mov	r2, r0
 800f64c:	460b      	mov	r3, r1
 800f64e:	4610      	mov	r0, r2
 800f650:	4619      	mov	r1, r3
 800f652:	f04f 0200 	mov.w	r2, #0
 800f656:	4b23      	ldr	r3, [pc, #140]	; (800f6e4 <xnrm2_Mnmxg9YT+0x158>)
 800f658:	f7f0 fe0a 	bl	8000270 <__adddf3>
 800f65c:	4602      	mov	r2, r0
 800f65e:	460b      	mov	r3, r1
 800f660:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
          scale = absxk;
 800f664:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800f668:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 800f66c:	e019      	b.n	800f6a2 <xnrm2_Mnmxg9YT+0x116>
        } else {
          real_T t;
          t = absxk / scale;
 800f66e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f672:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800f676:	f7f1 f8db 	bl	8000830 <__aeabi_ddiv>
 800f67a:	4602      	mov	r2, r0
 800f67c:	460b      	mov	r3, r1
 800f67e:	e9c7 2306 	strd	r2, r3, [r7, #24]
          y += t * t;
 800f682:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800f686:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800f68a:	f7f0 ffa7 	bl	80005dc <__aeabi_dmul>
 800f68e:	4602      	mov	r2, r0
 800f690:	460b      	mov	r3, r1
 800f692:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800f696:	f7f0 fdeb 	bl	8000270 <__adddf3>
 800f69a:	4602      	mov	r2, r0
 800f69c:	460b      	mov	r3, r1
 800f69e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      for (k = ix0; k <= kend; k++) {
 800f6a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f6a4:	3301      	adds	r3, #1
 800f6a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f6a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f6aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6ac:	429a      	cmp	r2, r3
 800f6ae:	dd9d      	ble.n	800f5ec <xnrm2_Mnmxg9YT+0x60>
        }
      }

      y = scale * sqrt(y);
 800f6b0:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 800f6b4:	f00b fe98 	bl	801b3e8 <sqrt>
 800f6b8:	ec53 2b10 	vmov	r2, r3, d0
 800f6bc:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800f6c0:	f7f0 ff8c 	bl	80005dc <__aeabi_dmul>
 800f6c4:	4602      	mov	r2, r0
 800f6c6:	460b      	mov	r3, r1
 800f6c8:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    }
  }

  return y;
 800f6cc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800f6d0:	ec43 2b17 	vmov	d7, r2, r3
}
 800f6d4:	eeb0 0a47 	vmov.f32	s0, s14
 800f6d8:	eef0 0a67 	vmov.f32	s1, s15
 800f6dc:	3748      	adds	r7, #72	; 0x48
 800f6de:	46bd      	mov	sp, r7
 800f6e0:	bd80      	pop	{r7, pc}
 800f6e2:	bf00      	nop
 800f6e4:	3ff00000 	.word	0x3ff00000

0800f6e8 <xnrm2_Rlk0oxWw>:
#include "rtwtypes.h"
#include "xnrm2_Rlk0oxWw.h"
#include <math.h>

real_T xnrm2_Rlk0oxWw(int32_T n, const real_T x[3], int32_T ix0)
{
 800f6e8:	b580      	push	{r7, lr}
 800f6ea:	b092      	sub	sp, #72	; 0x48
 800f6ec:	af00      	add	r7, sp, #0
 800f6ee:	60f8      	str	r0, [r7, #12]
 800f6f0:	60b9      	str	r1, [r7, #8]
 800f6f2:	607a      	str	r2, [r7, #4]
  real_T y;
  int32_T k;
  y = 0.0;
 800f6f4:	f04f 0200 	mov.w	r2, #0
 800f6f8:	f04f 0300 	mov.w	r3, #0
 800f6fc:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  if (n >= 1) {
 800f700:	68fb      	ldr	r3, [r7, #12]
 800f702:	2b00      	cmp	r3, #0
 800f704:	f340 8090 	ble.w	800f828 <xnrm2_Rlk0oxWw+0x140>
    if (n == 1) {
 800f708:	68fb      	ldr	r3, [r7, #12]
 800f70a:	2b01      	cmp	r3, #1
 800f70c:	d10e      	bne.n	800f72c <xnrm2_Rlk0oxWw+0x44>
      y = fabs(x[ix0 - 1]);
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800f714:	3b01      	subs	r3, #1
 800f716:	00db      	lsls	r3, r3, #3
 800f718:	68ba      	ldr	r2, [r7, #8]
 800f71a:	4413      	add	r3, r2
 800f71c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f720:	4611      	mov	r1, r2
 800f722:	6439      	str	r1, [r7, #64]	; 0x40
 800f724:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f728:	647b      	str	r3, [r7, #68]	; 0x44
 800f72a:	e07d      	b.n	800f828 <xnrm2_Rlk0oxWw+0x140>
    } else {
      real_T scale;
      int32_T kend;
      scale = 3.3121686421112381E-170;
 800f72c:	f04f 0200 	mov.w	r2, #0
 800f730:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 800f734:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      kend = (ix0 + n) - 1;
 800f738:	687a      	ldr	r2, [r7, #4]
 800f73a:	68fb      	ldr	r3, [r7, #12]
 800f73c:	4413      	add	r3, r2
 800f73e:	3b01      	subs	r3, #1
 800f740:	62fb      	str	r3, [r7, #44]	; 0x2c
      for (k = ix0; k <= kend; k++) {
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f746:	e05d      	b.n	800f804 <xnrm2_Rlk0oxWw+0x11c>
        real_T absxk;
        absxk = fabs(x[k - 1]);
 800f748:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f74a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800f74e:	3b01      	subs	r3, #1
 800f750:	00db      	lsls	r3, r3, #3
 800f752:	68ba      	ldr	r2, [r7, #8]
 800f754:	4413      	add	r3, r2
 800f756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f75a:	4611      	mov	r1, r2
 800f75c:	6239      	str	r1, [r7, #32]
 800f75e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f762:	627b      	str	r3, [r7, #36]	; 0x24
        if (absxk > scale) {
 800f764:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f768:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800f76c:	f7f1 f9c6 	bl	8000afc <__aeabi_dcmpgt>
 800f770:	4603      	mov	r3, r0
 800f772:	2b00      	cmp	r3, #0
 800f774:	d029      	beq.n	800f7ca <xnrm2_Rlk0oxWw+0xe2>
          real_T t;
          t = scale / absxk;
 800f776:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800f77a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800f77e:	f7f1 f857 	bl	8000830 <__aeabi_ddiv>
 800f782:	4602      	mov	r2, r0
 800f784:	460b      	mov	r3, r1
 800f786:	e9c7 2304 	strd	r2, r3, [r7, #16]
          y = y * t * t + 1.0;
 800f78a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800f78e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800f792:	f7f0 ff23 	bl	80005dc <__aeabi_dmul>
 800f796:	4602      	mov	r2, r0
 800f798:	460b      	mov	r3, r1
 800f79a:	4610      	mov	r0, r2
 800f79c:	4619      	mov	r1, r3
 800f79e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800f7a2:	f7f0 ff1b 	bl	80005dc <__aeabi_dmul>
 800f7a6:	4602      	mov	r2, r0
 800f7a8:	460b      	mov	r3, r1
 800f7aa:	4610      	mov	r0, r2
 800f7ac:	4619      	mov	r1, r3
 800f7ae:	f04f 0200 	mov.w	r2, #0
 800f7b2:	4b23      	ldr	r3, [pc, #140]	; (800f840 <xnrm2_Rlk0oxWw+0x158>)
 800f7b4:	f7f0 fd5c 	bl	8000270 <__adddf3>
 800f7b8:	4602      	mov	r2, r0
 800f7ba:	460b      	mov	r3, r1
 800f7bc:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
          scale = absxk;
 800f7c0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800f7c4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 800f7c8:	e019      	b.n	800f7fe <xnrm2_Rlk0oxWw+0x116>
        } else {
          real_T t;
          t = absxk / scale;
 800f7ca:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f7ce:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800f7d2:	f7f1 f82d 	bl	8000830 <__aeabi_ddiv>
 800f7d6:	4602      	mov	r2, r0
 800f7d8:	460b      	mov	r3, r1
 800f7da:	e9c7 2306 	strd	r2, r3, [r7, #24]
          y += t * t;
 800f7de:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800f7e2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800f7e6:	f7f0 fef9 	bl	80005dc <__aeabi_dmul>
 800f7ea:	4602      	mov	r2, r0
 800f7ec:	460b      	mov	r3, r1
 800f7ee:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800f7f2:	f7f0 fd3d 	bl	8000270 <__adddf3>
 800f7f6:	4602      	mov	r2, r0
 800f7f8:	460b      	mov	r3, r1
 800f7fa:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      for (k = ix0; k <= kend; k++) {
 800f7fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f800:	3301      	adds	r3, #1
 800f802:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f804:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f808:	429a      	cmp	r2, r3
 800f80a:	dd9d      	ble.n	800f748 <xnrm2_Rlk0oxWw+0x60>
        }
      }

      y = scale * sqrt(y);
 800f80c:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 800f810:	f00b fdea 	bl	801b3e8 <sqrt>
 800f814:	ec53 2b10 	vmov	r2, r3, d0
 800f818:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800f81c:	f7f0 fede 	bl	80005dc <__aeabi_dmul>
 800f820:	4602      	mov	r2, r0
 800f822:	460b      	mov	r3, r1
 800f824:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    }
  }

  return y;
 800f828:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800f82c:	ec43 2b17 	vmov	d7, r2, r3
}
 800f830:	eeb0 0a47 	vmov.f32	s0, s14
 800f834:	eef0 0a67 	vmov.f32	s1, s15
 800f838:	3748      	adds	r7, #72	; 0x48
 800f83a:	46bd      	mov	sp, r7
 800f83c:	bd80      	pop	{r7, pc}
 800f83e:	bf00      	nop
 800f840:	3ff00000 	.word	0x3ff00000

0800f844 <xnrm2_nLdASVZH>:
#include "rtwtypes.h"
#include "xnrm2_nLdASVZH.h"
#include <math.h>

real_T xnrm2_nLdASVZH(int32_T n, const real_T x[18], int32_T ix0)
{
 800f844:	b580      	push	{r7, lr}
 800f846:	b092      	sub	sp, #72	; 0x48
 800f848:	af00      	add	r7, sp, #0
 800f84a:	60f8      	str	r0, [r7, #12]
 800f84c:	60b9      	str	r1, [r7, #8]
 800f84e:	607a      	str	r2, [r7, #4]
  real_T y;
  int32_T k;
  y = 0.0;
 800f850:	f04f 0200 	mov.w	r2, #0
 800f854:	f04f 0300 	mov.w	r3, #0
 800f858:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  if (n >= 1) {
 800f85c:	68fb      	ldr	r3, [r7, #12]
 800f85e:	2b00      	cmp	r3, #0
 800f860:	f340 8090 	ble.w	800f984 <xnrm2_nLdASVZH+0x140>
    if (n == 1) {
 800f864:	68fb      	ldr	r3, [r7, #12]
 800f866:	2b01      	cmp	r3, #1
 800f868:	d10e      	bne.n	800f888 <xnrm2_nLdASVZH+0x44>
      y = fabs(x[ix0 - 1]);
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800f870:	3b01      	subs	r3, #1
 800f872:	00db      	lsls	r3, r3, #3
 800f874:	68ba      	ldr	r2, [r7, #8]
 800f876:	4413      	add	r3, r2
 800f878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f87c:	4611      	mov	r1, r2
 800f87e:	6439      	str	r1, [r7, #64]	; 0x40
 800f880:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f884:	647b      	str	r3, [r7, #68]	; 0x44
 800f886:	e07d      	b.n	800f984 <xnrm2_nLdASVZH+0x140>
    } else {
      real_T scale;
      int32_T kend;
      scale = 3.3121686421112381E-170;
 800f888:	f04f 0200 	mov.w	r2, #0
 800f88c:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 800f890:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      kend = (ix0 + n) - 1;
 800f894:	687a      	ldr	r2, [r7, #4]
 800f896:	68fb      	ldr	r3, [r7, #12]
 800f898:	4413      	add	r3, r2
 800f89a:	3b01      	subs	r3, #1
 800f89c:	62fb      	str	r3, [r7, #44]	; 0x2c
      for (k = ix0; k <= kend; k++) {
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f8a2:	e05d      	b.n	800f960 <xnrm2_nLdASVZH+0x11c>
        real_T absxk;
        absxk = fabs(x[k - 1]);
 800f8a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f8a6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800f8aa:	3b01      	subs	r3, #1
 800f8ac:	00db      	lsls	r3, r3, #3
 800f8ae:	68ba      	ldr	r2, [r7, #8]
 800f8b0:	4413      	add	r3, r2
 800f8b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8b6:	4611      	mov	r1, r2
 800f8b8:	6239      	str	r1, [r7, #32]
 800f8ba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f8be:	627b      	str	r3, [r7, #36]	; 0x24
        if (absxk > scale) {
 800f8c0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f8c4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800f8c8:	f7f1 f918 	bl	8000afc <__aeabi_dcmpgt>
 800f8cc:	4603      	mov	r3, r0
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d029      	beq.n	800f926 <xnrm2_nLdASVZH+0xe2>
          real_T t;
          t = scale / absxk;
 800f8d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800f8d6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800f8da:	f7f0 ffa9 	bl	8000830 <__aeabi_ddiv>
 800f8de:	4602      	mov	r2, r0
 800f8e0:	460b      	mov	r3, r1
 800f8e2:	e9c7 2304 	strd	r2, r3, [r7, #16]
          y = y * t * t + 1.0;
 800f8e6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800f8ea:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800f8ee:	f7f0 fe75 	bl	80005dc <__aeabi_dmul>
 800f8f2:	4602      	mov	r2, r0
 800f8f4:	460b      	mov	r3, r1
 800f8f6:	4610      	mov	r0, r2
 800f8f8:	4619      	mov	r1, r3
 800f8fa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800f8fe:	f7f0 fe6d 	bl	80005dc <__aeabi_dmul>
 800f902:	4602      	mov	r2, r0
 800f904:	460b      	mov	r3, r1
 800f906:	4610      	mov	r0, r2
 800f908:	4619      	mov	r1, r3
 800f90a:	f04f 0200 	mov.w	r2, #0
 800f90e:	4b23      	ldr	r3, [pc, #140]	; (800f99c <xnrm2_nLdASVZH+0x158>)
 800f910:	f7f0 fcae 	bl	8000270 <__adddf3>
 800f914:	4602      	mov	r2, r0
 800f916:	460b      	mov	r3, r1
 800f918:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
          scale = absxk;
 800f91c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800f920:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 800f924:	e019      	b.n	800f95a <xnrm2_nLdASVZH+0x116>
        } else {
          real_T t;
          t = absxk / scale;
 800f926:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f92a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800f92e:	f7f0 ff7f 	bl	8000830 <__aeabi_ddiv>
 800f932:	4602      	mov	r2, r0
 800f934:	460b      	mov	r3, r1
 800f936:	e9c7 2306 	strd	r2, r3, [r7, #24]
          y += t * t;
 800f93a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800f93e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800f942:	f7f0 fe4b 	bl	80005dc <__aeabi_dmul>
 800f946:	4602      	mov	r2, r0
 800f948:	460b      	mov	r3, r1
 800f94a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800f94e:	f7f0 fc8f 	bl	8000270 <__adddf3>
 800f952:	4602      	mov	r2, r0
 800f954:	460b      	mov	r3, r1
 800f956:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      for (k = ix0; k <= kend; k++) {
 800f95a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f95c:	3301      	adds	r3, #1
 800f95e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f960:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f964:	429a      	cmp	r2, r3
 800f966:	dd9d      	ble.n	800f8a4 <xnrm2_nLdASVZH+0x60>
        }
      }

      y = scale * sqrt(y);
 800f968:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 800f96c:	f00b fd3c 	bl	801b3e8 <sqrt>
 800f970:	ec53 2b10 	vmov	r2, r3, d0
 800f974:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800f978:	f7f0 fe30 	bl	80005dc <__aeabi_dmul>
 800f97c:	4602      	mov	r2, r0
 800f97e:	460b      	mov	r3, r1
 800f980:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    }
  }

  return y;
 800f984:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800f988:	ec43 2b17 	vmov	d7, r2, r3
}
 800f98c:	eeb0 0a47 	vmov.f32	s0, s14
 800f990:	eef0 0a67 	vmov.f32	s1, s15
 800f994:	3748      	adds	r7, #72	; 0x48
 800f996:	46bd      	mov	sp, r7
 800f998:	bd80      	pop	{r7, pc}
 800f99a:	bf00      	nop
 800f99c:	3ff00000 	.word	0x3ff00000

0800f9a0 <xnrm2_xDOlDEtw>:
#include "rtwtypes.h"
#include "xnrm2_xDOlDEtw.h"
#include <math.h>

real_T xnrm2_xDOlDEtw(int32_T n, const real_T x[9], int32_T ix0)
{
 800f9a0:	b580      	push	{r7, lr}
 800f9a2:	b092      	sub	sp, #72	; 0x48
 800f9a4:	af00      	add	r7, sp, #0
 800f9a6:	60f8      	str	r0, [r7, #12]
 800f9a8:	60b9      	str	r1, [r7, #8]
 800f9aa:	607a      	str	r2, [r7, #4]
  real_T y;
  int32_T k;
  y = 0.0;
 800f9ac:	f04f 0200 	mov.w	r2, #0
 800f9b0:	f04f 0300 	mov.w	r3, #0
 800f9b4:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  if (n >= 1) {
 800f9b8:	68fb      	ldr	r3, [r7, #12]
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	f340 8090 	ble.w	800fae0 <xnrm2_xDOlDEtw+0x140>
    if (n == 1) {
 800f9c0:	68fb      	ldr	r3, [r7, #12]
 800f9c2:	2b01      	cmp	r3, #1
 800f9c4:	d10e      	bne.n	800f9e4 <xnrm2_xDOlDEtw+0x44>
      y = fabs(x[ix0 - 1]);
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800f9cc:	3b01      	subs	r3, #1
 800f9ce:	00db      	lsls	r3, r3, #3
 800f9d0:	68ba      	ldr	r2, [r7, #8]
 800f9d2:	4413      	add	r3, r2
 800f9d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9d8:	4611      	mov	r1, r2
 800f9da:	6439      	str	r1, [r7, #64]	; 0x40
 800f9dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f9e0:	647b      	str	r3, [r7, #68]	; 0x44
 800f9e2:	e07d      	b.n	800fae0 <xnrm2_xDOlDEtw+0x140>
    } else {
      real_T scale;
      int32_T kend;
      scale = 3.3121686421112381E-170;
 800f9e4:	f04f 0200 	mov.w	r2, #0
 800f9e8:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 800f9ec:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      kend = (ix0 + n) - 1;
 800f9f0:	687a      	ldr	r2, [r7, #4]
 800f9f2:	68fb      	ldr	r3, [r7, #12]
 800f9f4:	4413      	add	r3, r2
 800f9f6:	3b01      	subs	r3, #1
 800f9f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      for (k = ix0; k <= kend; k++) {
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f9fe:	e05d      	b.n	800fabc <xnrm2_xDOlDEtw+0x11c>
        real_T absxk;
        absxk = fabs(x[k - 1]);
 800fa00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa02:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800fa06:	3b01      	subs	r3, #1
 800fa08:	00db      	lsls	r3, r3, #3
 800fa0a:	68ba      	ldr	r2, [r7, #8]
 800fa0c:	4413      	add	r3, r2
 800fa0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa12:	4611      	mov	r1, r2
 800fa14:	6239      	str	r1, [r7, #32]
 800fa16:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fa1a:	627b      	str	r3, [r7, #36]	; 0x24
        if (absxk > scale) {
 800fa1c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800fa20:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800fa24:	f7f1 f86a 	bl	8000afc <__aeabi_dcmpgt>
 800fa28:	4603      	mov	r3, r0
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d029      	beq.n	800fa82 <xnrm2_xDOlDEtw+0xe2>
          real_T t;
          t = scale / absxk;
 800fa2e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800fa32:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800fa36:	f7f0 fefb 	bl	8000830 <__aeabi_ddiv>
 800fa3a:	4602      	mov	r2, r0
 800fa3c:	460b      	mov	r3, r1
 800fa3e:	e9c7 2304 	strd	r2, r3, [r7, #16]
          y = y * t * t + 1.0;
 800fa42:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800fa46:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800fa4a:	f7f0 fdc7 	bl	80005dc <__aeabi_dmul>
 800fa4e:	4602      	mov	r2, r0
 800fa50:	460b      	mov	r3, r1
 800fa52:	4610      	mov	r0, r2
 800fa54:	4619      	mov	r1, r3
 800fa56:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800fa5a:	f7f0 fdbf 	bl	80005dc <__aeabi_dmul>
 800fa5e:	4602      	mov	r2, r0
 800fa60:	460b      	mov	r3, r1
 800fa62:	4610      	mov	r0, r2
 800fa64:	4619      	mov	r1, r3
 800fa66:	f04f 0200 	mov.w	r2, #0
 800fa6a:	4b23      	ldr	r3, [pc, #140]	; (800faf8 <xnrm2_xDOlDEtw+0x158>)
 800fa6c:	f7f0 fc00 	bl	8000270 <__adddf3>
 800fa70:	4602      	mov	r2, r0
 800fa72:	460b      	mov	r3, r1
 800fa74:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
          scale = absxk;
 800fa78:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800fa7c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 800fa80:	e019      	b.n	800fab6 <xnrm2_xDOlDEtw+0x116>
        } else {
          real_T t;
          t = absxk / scale;
 800fa82:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800fa86:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800fa8a:	f7f0 fed1 	bl	8000830 <__aeabi_ddiv>
 800fa8e:	4602      	mov	r2, r0
 800fa90:	460b      	mov	r3, r1
 800fa92:	e9c7 2306 	strd	r2, r3, [r7, #24]
          y += t * t;
 800fa96:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800fa9a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800fa9e:	f7f0 fd9d 	bl	80005dc <__aeabi_dmul>
 800faa2:	4602      	mov	r2, r0
 800faa4:	460b      	mov	r3, r1
 800faa6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800faaa:	f7f0 fbe1 	bl	8000270 <__adddf3>
 800faae:	4602      	mov	r2, r0
 800fab0:	460b      	mov	r3, r1
 800fab2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      for (k = ix0; k <= kend; k++) {
 800fab6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fab8:	3301      	adds	r3, #1
 800faba:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fabc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fabe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fac0:	429a      	cmp	r2, r3
 800fac2:	dd9d      	ble.n	800fa00 <xnrm2_xDOlDEtw+0x60>
        }
      }

      y = scale * sqrt(y);
 800fac4:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 800fac8:	f00b fc8e 	bl	801b3e8 <sqrt>
 800facc:	ec53 2b10 	vmov	r2, r3, d0
 800fad0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800fad4:	f7f0 fd82 	bl	80005dc <__aeabi_dmul>
 800fad8:	4602      	mov	r2, r0
 800fada:	460b      	mov	r3, r1
 800fadc:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    }
  }

  return y;
 800fae0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800fae4:	ec43 2b17 	vmov	d7, r2, r3
}
 800fae8:	eeb0 0a47 	vmov.f32	s0, s14
 800faec:	eef0 0a67 	vmov.f32	s1, s15
 800faf0:	3748      	adds	r7, #72	; 0x48
 800faf2:	46bd      	mov	sp, r7
 800faf4:	bd80      	pop	{r7, pc}
 800faf6:	bf00      	nop
 800faf8:	3ff00000 	.word	0x3ff00000

0800fafc <xrot_i7f01JoJ>:
#include "rtwtypes.h"
#include "xrot_i7f01JoJ.h"

void xrot_i7f01JoJ(real_T x[9], int32_T ix0, int32_T iy0, real_T c, real_T s)
{
 800fafc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800fb00:	b08c      	sub	sp, #48	; 0x30
 800fb02:	af00      	add	r7, sp, #0
 800fb04:	61f8      	str	r0, [r7, #28]
 800fb06:	61b9      	str	r1, [r7, #24]
 800fb08:	617a      	str	r2, [r7, #20]
 800fb0a:	ed87 0b02 	vstr	d0, [r7, #8]
 800fb0e:	ed87 1b00 	vstr	d1, [r7]
  real_T temp;
  real_T temp_tmp;
  temp = x[iy0 - 1];
 800fb12:	697b      	ldr	r3, [r7, #20]
 800fb14:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800fb18:	3b01      	subs	r3, #1
 800fb1a:	00db      	lsls	r3, r3, #3
 800fb1c:	69fa      	ldr	r2, [r7, #28]
 800fb1e:	4413      	add	r3, r2
 800fb20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb24:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  temp_tmp = x[ix0 - 1];
 800fb28:	69bb      	ldr	r3, [r7, #24]
 800fb2a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800fb2e:	3b01      	subs	r3, #1
 800fb30:	00db      	lsls	r3, r3, #3
 800fb32:	69fa      	ldr	r2, [r7, #28]
 800fb34:	4413      	add	r3, r2
 800fb36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb3a:	e9c7 2308 	strd	r2, r3, [r7, #32]
  x[iy0 - 1] = temp * c - temp_tmp * s;
 800fb3e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800fb42:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800fb46:	f7f0 fd49 	bl	80005dc <__aeabi_dmul>
 800fb4a:	4602      	mov	r2, r0
 800fb4c:	460b      	mov	r3, r1
 800fb4e:	4690      	mov	r8, r2
 800fb50:	4699      	mov	r9, r3
 800fb52:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fb56:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800fb5a:	f7f0 fd3f 	bl	80005dc <__aeabi_dmul>
 800fb5e:	4602      	mov	r2, r0
 800fb60:	460b      	mov	r3, r1
 800fb62:	4610      	mov	r0, r2
 800fb64:	4619      	mov	r1, r3
 800fb66:	697b      	ldr	r3, [r7, #20]
 800fb68:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800fb6c:	3b01      	subs	r3, #1
 800fb6e:	00db      	lsls	r3, r3, #3
 800fb70:	69fa      	ldr	r2, [r7, #28]
 800fb72:	18d4      	adds	r4, r2, r3
 800fb74:	4602      	mov	r2, r0
 800fb76:	460b      	mov	r3, r1
 800fb78:	4640      	mov	r0, r8
 800fb7a:	4649      	mov	r1, r9
 800fb7c:	f7f0 fb76 	bl	800026c <__aeabi_dsub>
 800fb80:	4602      	mov	r2, r0
 800fb82:	460b      	mov	r3, r1
 800fb84:	e9c4 2300 	strd	r2, r3, [r4]
  x[ix0 - 1] = temp_tmp * c + temp * s;
 800fb88:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800fb8c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800fb90:	f7f0 fd24 	bl	80005dc <__aeabi_dmul>
 800fb94:	4602      	mov	r2, r0
 800fb96:	460b      	mov	r3, r1
 800fb98:	4690      	mov	r8, r2
 800fb9a:	4699      	mov	r9, r3
 800fb9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fba0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800fba4:	f7f0 fd1a 	bl	80005dc <__aeabi_dmul>
 800fba8:	4602      	mov	r2, r0
 800fbaa:	460b      	mov	r3, r1
 800fbac:	4610      	mov	r0, r2
 800fbae:	4619      	mov	r1, r3
 800fbb0:	69bb      	ldr	r3, [r7, #24]
 800fbb2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800fbb6:	3b01      	subs	r3, #1
 800fbb8:	00db      	lsls	r3, r3, #3
 800fbba:	69fa      	ldr	r2, [r7, #28]
 800fbbc:	18d4      	adds	r4, r2, r3
 800fbbe:	4602      	mov	r2, r0
 800fbc0:	460b      	mov	r3, r1
 800fbc2:	4640      	mov	r0, r8
 800fbc4:	4649      	mov	r1, r9
 800fbc6:	f7f0 fb53 	bl	8000270 <__adddf3>
 800fbca:	4602      	mov	r2, r0
 800fbcc:	460b      	mov	r3, r1
 800fbce:	e9c4 2300 	strd	r2, r3, [r4]
  temp = x[ix0] * c + x[iy0] * s;
 800fbd2:	69bb      	ldr	r3, [r7, #24]
 800fbd4:	00db      	lsls	r3, r3, #3
 800fbd6:	69fa      	ldr	r2, [r7, #28]
 800fbd8:	4413      	add	r3, r2
 800fbda:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fbde:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800fbe2:	f7f0 fcfb 	bl	80005dc <__aeabi_dmul>
 800fbe6:	4602      	mov	r2, r0
 800fbe8:	460b      	mov	r3, r1
 800fbea:	4614      	mov	r4, r2
 800fbec:	461d      	mov	r5, r3
 800fbee:	697b      	ldr	r3, [r7, #20]
 800fbf0:	00db      	lsls	r3, r3, #3
 800fbf2:	69fa      	ldr	r2, [r7, #28]
 800fbf4:	4413      	add	r3, r2
 800fbf6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fbfa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fbfe:	f7f0 fced 	bl	80005dc <__aeabi_dmul>
 800fc02:	4602      	mov	r2, r0
 800fc04:	460b      	mov	r3, r1
 800fc06:	4620      	mov	r0, r4
 800fc08:	4629      	mov	r1, r5
 800fc0a:	f7f0 fb31 	bl	8000270 <__adddf3>
 800fc0e:	4602      	mov	r2, r0
 800fc10:	460b      	mov	r3, r1
 800fc12:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  x[iy0] = x[iy0] * c - x[ix0] * s;
 800fc16:	697b      	ldr	r3, [r7, #20]
 800fc18:	00db      	lsls	r3, r3, #3
 800fc1a:	69fa      	ldr	r2, [r7, #28]
 800fc1c:	4413      	add	r3, r2
 800fc1e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fc22:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800fc26:	f7f0 fcd9 	bl	80005dc <__aeabi_dmul>
 800fc2a:	4602      	mov	r2, r0
 800fc2c:	460b      	mov	r3, r1
 800fc2e:	4690      	mov	r8, r2
 800fc30:	4699      	mov	r9, r3
 800fc32:	69bb      	ldr	r3, [r7, #24]
 800fc34:	00db      	lsls	r3, r3, #3
 800fc36:	69fa      	ldr	r2, [r7, #28]
 800fc38:	4413      	add	r3, r2
 800fc3a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fc3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fc42:	f7f0 fccb 	bl	80005dc <__aeabi_dmul>
 800fc46:	4602      	mov	r2, r0
 800fc48:	460b      	mov	r3, r1
 800fc4a:	4610      	mov	r0, r2
 800fc4c:	4619      	mov	r1, r3
 800fc4e:	697b      	ldr	r3, [r7, #20]
 800fc50:	00db      	lsls	r3, r3, #3
 800fc52:	69fa      	ldr	r2, [r7, #28]
 800fc54:	18d4      	adds	r4, r2, r3
 800fc56:	4602      	mov	r2, r0
 800fc58:	460b      	mov	r3, r1
 800fc5a:	4640      	mov	r0, r8
 800fc5c:	4649      	mov	r1, r9
 800fc5e:	f7f0 fb05 	bl	800026c <__aeabi_dsub>
 800fc62:	4602      	mov	r2, r0
 800fc64:	460b      	mov	r3, r1
 800fc66:	e9c4 2300 	strd	r2, r3, [r4]
  x[ix0] = temp;
 800fc6a:	69bb      	ldr	r3, [r7, #24]
 800fc6c:	00db      	lsls	r3, r3, #3
 800fc6e:	69fa      	ldr	r2, [r7, #28]
 800fc70:	18d1      	adds	r1, r2, r3
 800fc72:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800fc76:	e9c1 2300 	strd	r2, r3, [r1]
  temp = x[iy0 + 1];
 800fc7a:	697b      	ldr	r3, [r7, #20]
 800fc7c:	3301      	adds	r3, #1
 800fc7e:	00db      	lsls	r3, r3, #3
 800fc80:	69fa      	ldr	r2, [r7, #28]
 800fc82:	4413      	add	r3, r2
 800fc84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc88:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  temp_tmp = x[ix0 + 1];
 800fc8c:	69bb      	ldr	r3, [r7, #24]
 800fc8e:	3301      	adds	r3, #1
 800fc90:	00db      	lsls	r3, r3, #3
 800fc92:	69fa      	ldr	r2, [r7, #28]
 800fc94:	4413      	add	r3, r2
 800fc96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc9a:	e9c7 2308 	strd	r2, r3, [r7, #32]
  x[iy0 + 1] = temp * c - temp_tmp * s;
 800fc9e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800fca2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800fca6:	f7f0 fc99 	bl	80005dc <__aeabi_dmul>
 800fcaa:	4602      	mov	r2, r0
 800fcac:	460b      	mov	r3, r1
 800fcae:	4690      	mov	r8, r2
 800fcb0:	4699      	mov	r9, r3
 800fcb2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fcb6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800fcba:	f7f0 fc8f 	bl	80005dc <__aeabi_dmul>
 800fcbe:	4602      	mov	r2, r0
 800fcc0:	460b      	mov	r3, r1
 800fcc2:	4610      	mov	r0, r2
 800fcc4:	4619      	mov	r1, r3
 800fcc6:	697b      	ldr	r3, [r7, #20]
 800fcc8:	3301      	adds	r3, #1
 800fcca:	00db      	lsls	r3, r3, #3
 800fccc:	69fa      	ldr	r2, [r7, #28]
 800fcce:	18d4      	adds	r4, r2, r3
 800fcd0:	4602      	mov	r2, r0
 800fcd2:	460b      	mov	r3, r1
 800fcd4:	4640      	mov	r0, r8
 800fcd6:	4649      	mov	r1, r9
 800fcd8:	f7f0 fac8 	bl	800026c <__aeabi_dsub>
 800fcdc:	4602      	mov	r2, r0
 800fcde:	460b      	mov	r3, r1
 800fce0:	e9c4 2300 	strd	r2, r3, [r4]
  x[ix0 + 1] = temp_tmp * c + temp * s;
 800fce4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800fce8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800fcec:	f7f0 fc76 	bl	80005dc <__aeabi_dmul>
 800fcf0:	4602      	mov	r2, r0
 800fcf2:	460b      	mov	r3, r1
 800fcf4:	4690      	mov	r8, r2
 800fcf6:	4699      	mov	r9, r3
 800fcf8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fcfc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800fd00:	f7f0 fc6c 	bl	80005dc <__aeabi_dmul>
 800fd04:	4602      	mov	r2, r0
 800fd06:	460b      	mov	r3, r1
 800fd08:	4610      	mov	r0, r2
 800fd0a:	4619      	mov	r1, r3
 800fd0c:	69bb      	ldr	r3, [r7, #24]
 800fd0e:	3301      	adds	r3, #1
 800fd10:	00db      	lsls	r3, r3, #3
 800fd12:	69fa      	ldr	r2, [r7, #28]
 800fd14:	18d4      	adds	r4, r2, r3
 800fd16:	4602      	mov	r2, r0
 800fd18:	460b      	mov	r3, r1
 800fd1a:	4640      	mov	r0, r8
 800fd1c:	4649      	mov	r1, r9
 800fd1e:	f7f0 faa7 	bl	8000270 <__adddf3>
 800fd22:	4602      	mov	r2, r0
 800fd24:	460b      	mov	r3, r1
 800fd26:	e9c4 2300 	strd	r2, r3, [r4]
}
 800fd2a:	bf00      	nop
 800fd2c:	3730      	adds	r7, #48	; 0x30
 800fd2e:	46bd      	mov	sp, r7
 800fd30:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800fd34 <xrotg_XzIjz1eG>:
#include "rtwtypes.h"
#include "xrotg_XzIjz1eG.h"
#include <math.h>

void xrotg_XzIjz1eG(real_T *a, real_T *b, real_T *c, real_T *s)
{
 800fd34:	b5b0      	push	{r4, r5, r7, lr}
 800fd36:	b090      	sub	sp, #64	; 0x40
 800fd38:	af00      	add	r7, sp, #0
 800fd3a:	60f8      	str	r0, [r7, #12]
 800fd3c:	60b9      	str	r1, [r7, #8]
 800fd3e:	607a      	str	r2, [r7, #4]
 800fd40:	603b      	str	r3, [r7, #0]
  real_T absa;
  real_T absb;
  real_T roe;
  real_T scale;
  roe = *b;
 800fd42:	68bb      	ldr	r3, [r7, #8]
 800fd44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd48:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  absa = fabs(*a);
 800fd4c:	68fb      	ldr	r3, [r7, #12]
 800fd4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd52:	4611      	mov	r1, r2
 800fd54:	62b9      	str	r1, [r7, #40]	; 0x28
 800fd56:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fd5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  absb = fabs(*b);
 800fd5c:	68bb      	ldr	r3, [r7, #8]
 800fd5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd62:	4611      	mov	r1, r2
 800fd64:	6239      	str	r1, [r7, #32]
 800fd66:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fd6a:	627b      	str	r3, [r7, #36]	; 0x24
  if (absa > absb) {
 800fd6c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800fd70:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800fd74:	f7f0 fec2 	bl	8000afc <__aeabi_dcmpgt>
 800fd78:	4603      	mov	r3, r0
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d004      	beq.n	800fd88 <xrotg_XzIjz1eG+0x54>
    roe = *a;
 800fd7e:	68fb      	ldr	r3, [r7, #12]
 800fd80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd84:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  }

  scale = absa + absb;
 800fd88:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800fd8c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800fd90:	f7f0 fa6e 	bl	8000270 <__adddf3>
 800fd94:	4602      	mov	r2, r0
 800fd96:	460b      	mov	r3, r1
 800fd98:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  if (scale == 0.0) {
 800fd9c:	f04f 0200 	mov.w	r2, #0
 800fda0:	f04f 0300 	mov.w	r3, #0
 800fda4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800fda8:	f7f0 fe80 	bl	8000aac <__aeabi_dcmpeq>
 800fdac:	4603      	mov	r3, r0
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d01b      	beq.n	800fdea <xrotg_XzIjz1eG+0xb6>
    *s = 0.0;
 800fdb2:	6839      	ldr	r1, [r7, #0]
 800fdb4:	f04f 0200 	mov.w	r2, #0
 800fdb8:	f04f 0300 	mov.w	r3, #0
 800fdbc:	e9c1 2300 	strd	r2, r3, [r1]
    *c = 1.0;
 800fdc0:	6879      	ldr	r1, [r7, #4]
 800fdc2:	f04f 0200 	mov.w	r2, #0
 800fdc6:	4b59      	ldr	r3, [pc, #356]	; (800ff2c <xrotg_XzIjz1eG+0x1f8>)
 800fdc8:	e9c1 2300 	strd	r2, r3, [r1]
    *a = 0.0;
 800fdcc:	68f9      	ldr	r1, [r7, #12]
 800fdce:	f04f 0200 	mov.w	r2, #0
 800fdd2:	f04f 0300 	mov.w	r3, #0
 800fdd6:	e9c1 2300 	strd	r2, r3, [r1]
    *b = 0.0;
 800fdda:	68b9      	ldr	r1, [r7, #8]
 800fddc:	f04f 0200 	mov.w	r2, #0
 800fde0:	f04f 0300 	mov.w	r3, #0
 800fde4:	e9c1 2300 	strd	r2, r3, [r1]
      *b = 1.0;
    }

    *a = scale;
  }
}
 800fde8:	e09b      	b.n	800ff22 <xrotg_XzIjz1eG+0x1ee>
    ads = absa / scale;
 800fdea:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800fdee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800fdf2:	f7f0 fd1d 	bl	8000830 <__aeabi_ddiv>
 800fdf6:	4602      	mov	r2, r0
 800fdf8:	460b      	mov	r3, r1
 800fdfa:	e9c7 2306 	strd	r2, r3, [r7, #24]
    bds = absb / scale;
 800fdfe:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800fe02:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800fe06:	f7f0 fd13 	bl	8000830 <__aeabi_ddiv>
 800fe0a:	4602      	mov	r2, r0
 800fe0c:	460b      	mov	r3, r1
 800fe0e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    scale *= sqrt(ads * ads + bds * bds);
 800fe12:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800fe16:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800fe1a:	f7f0 fbdf 	bl	80005dc <__aeabi_dmul>
 800fe1e:	4602      	mov	r2, r0
 800fe20:	460b      	mov	r3, r1
 800fe22:	4614      	mov	r4, r2
 800fe24:	461d      	mov	r5, r3
 800fe26:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800fe2a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800fe2e:	f7f0 fbd5 	bl	80005dc <__aeabi_dmul>
 800fe32:	4602      	mov	r2, r0
 800fe34:	460b      	mov	r3, r1
 800fe36:	4620      	mov	r0, r4
 800fe38:	4629      	mov	r1, r5
 800fe3a:	f7f0 fa19 	bl	8000270 <__adddf3>
 800fe3e:	4602      	mov	r2, r0
 800fe40:	460b      	mov	r3, r1
 800fe42:	ec43 2b17 	vmov	d7, r2, r3
 800fe46:	eeb0 0a47 	vmov.f32	s0, s14
 800fe4a:	eef0 0a67 	vmov.f32	s1, s15
 800fe4e:	f00b facb 	bl	801b3e8 <sqrt>
 800fe52:	ec53 2b10 	vmov	r2, r3, d0
 800fe56:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800fe5a:	f7f0 fbbf 	bl	80005dc <__aeabi_dmul>
 800fe5e:	4602      	mov	r2, r0
 800fe60:	460b      	mov	r3, r1
 800fe62:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    if (roe < 0.0) {
 800fe66:	f04f 0200 	mov.w	r2, #0
 800fe6a:	f04f 0300 	mov.w	r3, #0
 800fe6e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800fe72:	f7f0 fe25 	bl	8000ac0 <__aeabi_dcmplt>
 800fe76:	4603      	mov	r3, r0
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	d005      	beq.n	800fe88 <xrotg_XzIjz1eG+0x154>
      scale = -scale;
 800fe7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe7e:	633b      	str	r3, [r7, #48]	; 0x30
 800fe80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe82:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800fe86:	637b      	str	r3, [r7, #52]	; 0x34
    *c = *a / scale;
 800fe88:	68fb      	ldr	r3, [r7, #12]
 800fe8a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fe8e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800fe92:	f7f0 fccd 	bl	8000830 <__aeabi_ddiv>
 800fe96:	4602      	mov	r2, r0
 800fe98:	460b      	mov	r3, r1
 800fe9a:	6879      	ldr	r1, [r7, #4]
 800fe9c:	e9c1 2300 	strd	r2, r3, [r1]
    *s = *b / scale;
 800fea0:	68bb      	ldr	r3, [r7, #8]
 800fea2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fea6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800feaa:	f7f0 fcc1 	bl	8000830 <__aeabi_ddiv>
 800feae:	4602      	mov	r2, r0
 800feb0:	460b      	mov	r3, r1
 800feb2:	6839      	ldr	r1, [r7, #0]
 800feb4:	e9c1 2300 	strd	r2, r3, [r1]
    if (absa > absb) {
 800feb8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800febc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800fec0:	f7f0 fe1c 	bl	8000afc <__aeabi_dcmpgt>
 800fec4:	4603      	mov	r3, r0
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	d006      	beq.n	800fed8 <xrotg_XzIjz1eG+0x1a4>
      *b = *s;
 800feca:	683b      	ldr	r3, [r7, #0]
 800fecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fed0:	68b9      	ldr	r1, [r7, #8]
 800fed2:	e9c1 2300 	strd	r2, r3, [r1]
 800fed6:	e01f      	b.n	800ff18 <xrotg_XzIjz1eG+0x1e4>
    } else if (*c != 0.0) {
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fede:	f04f 0200 	mov.w	r2, #0
 800fee2:	f04f 0300 	mov.w	r3, #0
 800fee6:	f7f0 fde1 	bl	8000aac <__aeabi_dcmpeq>
 800feea:	4603      	mov	r3, r0
 800feec:	2b00      	cmp	r3, #0
 800feee:	d10d      	bne.n	800ff0c <xrotg_XzIjz1eG+0x1d8>
      *b = 1.0 / *c;
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fef6:	f04f 0000 	mov.w	r0, #0
 800fefa:	490c      	ldr	r1, [pc, #48]	; (800ff2c <xrotg_XzIjz1eG+0x1f8>)
 800fefc:	f7f0 fc98 	bl	8000830 <__aeabi_ddiv>
 800ff00:	4602      	mov	r2, r0
 800ff02:	460b      	mov	r3, r1
 800ff04:	68b9      	ldr	r1, [r7, #8]
 800ff06:	e9c1 2300 	strd	r2, r3, [r1]
 800ff0a:	e005      	b.n	800ff18 <xrotg_XzIjz1eG+0x1e4>
      *b = 1.0;
 800ff0c:	68b9      	ldr	r1, [r7, #8]
 800ff0e:	f04f 0200 	mov.w	r2, #0
 800ff12:	4b06      	ldr	r3, [pc, #24]	; (800ff2c <xrotg_XzIjz1eG+0x1f8>)
 800ff14:	e9c1 2300 	strd	r2, r3, [r1]
    *a = scale;
 800ff18:	68f9      	ldr	r1, [r7, #12]
 800ff1a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800ff1e:	e9c1 2300 	strd	r2, r3, [r1]
}
 800ff22:	bf00      	nop
 800ff24:	3740      	adds	r7, #64	; 0x40
 800ff26:	46bd      	mov	sp, r7
 800ff28:	bdb0      	pop	{r4, r5, r7, pc}
 800ff2a:	bf00      	nop
 800ff2c:	3ff00000 	.word	0x3ff00000

0800ff30 <xscal_59GtRAwv>:
#include "rtwtypes.h"
#include "xscal_59GtRAwv.h"

void xscal_59GtRAwv(int32_T n, real_T a, real_T x[9], int32_T ix0)
{
 800ff30:	b590      	push	{r4, r7, lr}
 800ff32:	b089      	sub	sp, #36	; 0x24
 800ff34:	af00      	add	r7, sp, #0
 800ff36:	6178      	str	r0, [r7, #20]
 800ff38:	ed87 0b02 	vstr	d0, [r7, #8]
 800ff3c:	6139      	str	r1, [r7, #16]
 800ff3e:	607a      	str	r2, [r7, #4]
  int32_T b;
  int32_T k;
  b = (ix0 + n) - 1;
 800ff40:	687a      	ldr	r2, [r7, #4]
 800ff42:	697b      	ldr	r3, [r7, #20]
 800ff44:	4413      	add	r3, r2
 800ff46:	3b01      	subs	r3, #1
 800ff48:	61bb      	str	r3, [r7, #24]
  for (k = ix0; k <= b; k++) {
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	61fb      	str	r3, [r7, #28]
 800ff4e:	e01a      	b.n	800ff86 <xscal_59GtRAwv+0x56>
    x[k - 1] *= a;
 800ff50:	69fb      	ldr	r3, [r7, #28]
 800ff52:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800ff56:	3b01      	subs	r3, #1
 800ff58:	00db      	lsls	r3, r3, #3
 800ff5a:	693a      	ldr	r2, [r7, #16]
 800ff5c:	4413      	add	r3, r2
 800ff5e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ff62:	69fb      	ldr	r3, [r7, #28]
 800ff64:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800ff68:	3b01      	subs	r3, #1
 800ff6a:	00db      	lsls	r3, r3, #3
 800ff6c:	693a      	ldr	r2, [r7, #16]
 800ff6e:	18d4      	adds	r4, r2, r3
 800ff70:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ff74:	f7f0 fb32 	bl	80005dc <__aeabi_dmul>
 800ff78:	4602      	mov	r2, r0
 800ff7a:	460b      	mov	r3, r1
 800ff7c:	e9c4 2300 	strd	r2, r3, [r4]
  for (k = ix0; k <= b; k++) {
 800ff80:	69fb      	ldr	r3, [r7, #28]
 800ff82:	3301      	adds	r3, #1
 800ff84:	61fb      	str	r3, [r7, #28]
 800ff86:	69fa      	ldr	r2, [r7, #28]
 800ff88:	69bb      	ldr	r3, [r7, #24]
 800ff8a:	429a      	cmp	r2, r3
 800ff8c:	dde0      	ble.n	800ff50 <xscal_59GtRAwv+0x20>
  }
}
 800ff8e:	bf00      	nop
 800ff90:	bf00      	nop
 800ff92:	3724      	adds	r7, #36	; 0x24
 800ff94:	46bd      	mov	sp, r7
 800ff96:	bd90      	pop	{r4, r7, pc}

0800ff98 <xscal_PLmmUlD2>:
#include "rtwtypes.h"
#include "xscal_PLmmUlD2.h"

void xscal_PLmmUlD2(int32_T n, real_T a, real_T x[3], int32_T ix0)
{
 800ff98:	b590      	push	{r4, r7, lr}
 800ff9a:	b089      	sub	sp, #36	; 0x24
 800ff9c:	af00      	add	r7, sp, #0
 800ff9e:	6178      	str	r0, [r7, #20]
 800ffa0:	ed87 0b02 	vstr	d0, [r7, #8]
 800ffa4:	6139      	str	r1, [r7, #16]
 800ffa6:	607a      	str	r2, [r7, #4]
  int32_T b;
  int32_T k;
  b = (ix0 + n) - 1;
 800ffa8:	687a      	ldr	r2, [r7, #4]
 800ffaa:	697b      	ldr	r3, [r7, #20]
 800ffac:	4413      	add	r3, r2
 800ffae:	3b01      	subs	r3, #1
 800ffb0:	61bb      	str	r3, [r7, #24]
  for (k = ix0; k <= b; k++) {
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	61fb      	str	r3, [r7, #28]
 800ffb6:	e01a      	b.n	800ffee <xscal_PLmmUlD2+0x56>
    x[k - 1] *= a;
 800ffb8:	69fb      	ldr	r3, [r7, #28]
 800ffba:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800ffbe:	3b01      	subs	r3, #1
 800ffc0:	00db      	lsls	r3, r3, #3
 800ffc2:	693a      	ldr	r2, [r7, #16]
 800ffc4:	4413      	add	r3, r2
 800ffc6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ffca:	69fb      	ldr	r3, [r7, #28]
 800ffcc:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800ffd0:	3b01      	subs	r3, #1
 800ffd2:	00db      	lsls	r3, r3, #3
 800ffd4:	693a      	ldr	r2, [r7, #16]
 800ffd6:	18d4      	adds	r4, r2, r3
 800ffd8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ffdc:	f7f0 fafe 	bl	80005dc <__aeabi_dmul>
 800ffe0:	4602      	mov	r2, r0
 800ffe2:	460b      	mov	r3, r1
 800ffe4:	e9c4 2300 	strd	r2, r3, [r4]
  for (k = ix0; k <= b; k++) {
 800ffe8:	69fb      	ldr	r3, [r7, #28]
 800ffea:	3301      	adds	r3, #1
 800ffec:	61fb      	str	r3, [r7, #28]
 800ffee:	69fa      	ldr	r2, [r7, #28]
 800fff0:	69bb      	ldr	r3, [r7, #24]
 800fff2:	429a      	cmp	r2, r3
 800fff4:	dde0      	ble.n	800ffb8 <xscal_PLmmUlD2+0x20>
  }
}
 800fff6:	bf00      	nop
 800fff8:	bf00      	nop
 800fffa:	3724      	adds	r7, #36	; 0x24
 800fffc:	46bd      	mov	sp, r7
 800fffe:	bd90      	pop	{r4, r7, pc}

08010000 <xscal_eaAxXsvQ>:
#include "rtwtypes.h"
#include "xscal_eaAxXsvQ.h"

void xscal_eaAxXsvQ(real_T a, real_T x[9], int32_T ix0)
{
 8010000:	b590      	push	{r4, r7, lr}
 8010002:	b087      	sub	sp, #28
 8010004:	af00      	add	r7, sp, #0
 8010006:	ed87 0b02 	vstr	d0, [r7, #8]
 801000a:	6078      	str	r0, [r7, #4]
 801000c:	6039      	str	r1, [r7, #0]
  int32_T k;
  for (k = ix0; k <= ix0 + 2; k++) {
 801000e:	683b      	ldr	r3, [r7, #0]
 8010010:	617b      	str	r3, [r7, #20]
 8010012:	e01a      	b.n	801004a <xscal_eaAxXsvQ+0x4a>
    x[k - 1] *= a;
 8010014:	697b      	ldr	r3, [r7, #20]
 8010016:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 801001a:	3b01      	subs	r3, #1
 801001c:	00db      	lsls	r3, r3, #3
 801001e:	687a      	ldr	r2, [r7, #4]
 8010020:	4413      	add	r3, r2
 8010022:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010026:	697b      	ldr	r3, [r7, #20]
 8010028:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 801002c:	3b01      	subs	r3, #1
 801002e:	00db      	lsls	r3, r3, #3
 8010030:	687a      	ldr	r2, [r7, #4]
 8010032:	18d4      	adds	r4, r2, r3
 8010034:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8010038:	f7f0 fad0 	bl	80005dc <__aeabi_dmul>
 801003c:	4602      	mov	r2, r0
 801003e:	460b      	mov	r3, r1
 8010040:	e9c4 2300 	strd	r2, r3, [r4]
  for (k = ix0; k <= ix0 + 2; k++) {
 8010044:	697b      	ldr	r3, [r7, #20]
 8010046:	3301      	adds	r3, #1
 8010048:	617b      	str	r3, [r7, #20]
 801004a:	683b      	ldr	r3, [r7, #0]
 801004c:	3302      	adds	r3, #2
 801004e:	697a      	ldr	r2, [r7, #20]
 8010050:	429a      	cmp	r2, r3
 8010052:	dddf      	ble.n	8010014 <xscal_eaAxXsvQ+0x14>
  }
}
 8010054:	bf00      	nop
 8010056:	bf00      	nop
 8010058:	371c      	adds	r7, #28
 801005a:	46bd      	mov	sp, r7
 801005c:	bd90      	pop	{r4, r7, pc}

0801005e <xswap_JoAqPjUv>:
#include "rtwtypes.h"
#include "xswap_JoAqPjUv.h"

void xswap_JoAqPjUv(real_T x[9], int32_T ix0, int32_T iy0)
{
 801005e:	b480      	push	{r7}
 8010060:	b087      	sub	sp, #28
 8010062:	af00      	add	r7, sp, #0
 8010064:	60f8      	str	r0, [r7, #12]
 8010066:	60b9      	str	r1, [r7, #8]
 8010068:	607a      	str	r2, [r7, #4]
  real_T temp;
  temp = x[ix0 - 1];
 801006a:	68bb      	ldr	r3, [r7, #8]
 801006c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8010070:	3b01      	subs	r3, #1
 8010072:	00db      	lsls	r3, r3, #3
 8010074:	68fa      	ldr	r2, [r7, #12]
 8010076:	4413      	add	r3, r2
 8010078:	e9d3 2300 	ldrd	r2, r3, [r3]
 801007c:	e9c7 2304 	strd	r2, r3, [r7, #16]
  x[ix0 - 1] = x[iy0 - 1];
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8010086:	3b01      	subs	r3, #1
 8010088:	00db      	lsls	r3, r3, #3
 801008a:	68fa      	ldr	r2, [r7, #12]
 801008c:	441a      	add	r2, r3
 801008e:	68bb      	ldr	r3, [r7, #8]
 8010090:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8010094:	3b01      	subs	r3, #1
 8010096:	00db      	lsls	r3, r3, #3
 8010098:	68f9      	ldr	r1, [r7, #12]
 801009a:	4419      	add	r1, r3
 801009c:	e9d2 2300 	ldrd	r2, r3, [r2]
 80100a0:	e9c1 2300 	strd	r2, r3, [r1]
  x[iy0 - 1] = temp;
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80100aa:	3b01      	subs	r3, #1
 80100ac:	00db      	lsls	r3, r3, #3
 80100ae:	68fa      	ldr	r2, [r7, #12]
 80100b0:	18d1      	adds	r1, r2, r3
 80100b2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80100b6:	e9c1 2300 	strd	r2, r3, [r1]
  temp = x[ix0];
 80100ba:	68bb      	ldr	r3, [r7, #8]
 80100bc:	00db      	lsls	r3, r3, #3
 80100be:	68fa      	ldr	r2, [r7, #12]
 80100c0:	4413      	add	r3, r2
 80100c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100c6:	e9c7 2304 	strd	r2, r3, [r7, #16]
  x[ix0] = x[iy0];
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	00db      	lsls	r3, r3, #3
 80100ce:	68fa      	ldr	r2, [r7, #12]
 80100d0:	4413      	add	r3, r2
 80100d2:	68ba      	ldr	r2, [r7, #8]
 80100d4:	00d2      	lsls	r2, r2, #3
 80100d6:	68f9      	ldr	r1, [r7, #12]
 80100d8:	4411      	add	r1, r2
 80100da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100de:	e9c1 2300 	strd	r2, r3, [r1]
  x[iy0] = temp;
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	00db      	lsls	r3, r3, #3
 80100e6:	68fa      	ldr	r2, [r7, #12]
 80100e8:	18d1      	adds	r1, r2, r3
 80100ea:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80100ee:	e9c1 2300 	strd	r2, r3, [r1]
  temp = x[ix0 + 1];
 80100f2:	68bb      	ldr	r3, [r7, #8]
 80100f4:	3301      	adds	r3, #1
 80100f6:	00db      	lsls	r3, r3, #3
 80100f8:	68fa      	ldr	r2, [r7, #12]
 80100fa:	4413      	add	r3, r2
 80100fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010100:	e9c7 2304 	strd	r2, r3, [r7, #16]
  x[ix0 + 1] = x[iy0 + 1];
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	3301      	adds	r3, #1
 8010108:	00db      	lsls	r3, r3, #3
 801010a:	68fa      	ldr	r2, [r7, #12]
 801010c:	4413      	add	r3, r2
 801010e:	68ba      	ldr	r2, [r7, #8]
 8010110:	3201      	adds	r2, #1
 8010112:	00d2      	lsls	r2, r2, #3
 8010114:	68f9      	ldr	r1, [r7, #12]
 8010116:	4411      	add	r1, r2
 8010118:	e9d3 2300 	ldrd	r2, r3, [r3]
 801011c:	e9c1 2300 	strd	r2, r3, [r1]
  x[iy0 + 1] = temp;
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	3301      	adds	r3, #1
 8010124:	00db      	lsls	r3, r3, #3
 8010126:	68fa      	ldr	r2, [r7, #12]
 8010128:	18d1      	adds	r1, r2, r3
 801012a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801012e:	e9c1 2300 	strd	r2, r3, [r1]
}
 8010132:	bf00      	nop
 8010134:	371c      	adds	r7, #28
 8010136:	46bd      	mov	sp, r7
 8010138:	f85d 7b04 	ldr.w	r7, [sp], #4
 801013c:	4770      	bx	lr

0801013e <ams_error>:

__weak uint8_t end_cell_balancing() {
   /* Type your actual code somewhere else */
}

__weak void ams_error() {
 801013e:	b480      	push	{r7}
 8010140:	af00      	add	r7, sp, #0
   /* Type your actual code somewhere else */
}
 8010142:	bf00      	nop
 8010144:	46bd      	mov	sp, r7
 8010146:	f85d 7b04 	ldr.w	r7, [sp], #4
 801014a:	4770      	bx	lr

0801014c <ams_precharge_drive_close_air_minus_function>:
static ams_state_t state_r2;
static float timer_r0;
static float timer_r1;
static float timer_r2;

ams_state_t ams_precharge_drive_close_air_minus_function() {
 801014c:	b480      	push	{r7}
 801014e:	af00      	add	r7, sp, #0
   if((timer_r2 < 2)&&ams_inputs.air_minus_closed) {
 8010150:	4b1d      	ldr	r3, [pc, #116]	; (80101c8 <ams_precharge_drive_close_air_minus_function+0x7c>)
 8010152:	edd3 7a00 	vldr	s15, [r3]
 8010156:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 801015a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801015e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010162:	d50d      	bpl.n	8010180 <ams_precharge_drive_close_air_minus_function+0x34>
 8010164:	4b19      	ldr	r3, [pc, #100]	; (80101cc <ams_precharge_drive_close_air_minus_function+0x80>)
 8010166:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801016a:	2b00      	cmp	r3, #0
 801016c:	d008      	beq.n	8010180 <ams_precharge_drive_close_air_minus_function+0x34>
       ams_outputs.close_precharge=1;
 801016e:	4b18      	ldr	r3, [pc, #96]	; (80101d0 <ams_precharge_drive_close_air_minus_function+0x84>)
 8010170:	2201      	movs	r2, #1
 8010172:	705a      	strb	r2, [r3, #1]
       timer_r2 = 0;
 8010174:	4b14      	ldr	r3, [pc, #80]	; (80101c8 <ams_precharge_drive_close_air_minus_function+0x7c>)
 8010176:	f04f 0200 	mov.w	r2, #0
 801017a:	601a      	str	r2, [r3, #0]
       return STATE_AMS_PRECHARGE_DRIVE_CLOSE_PRECHARGE;
 801017c:	2304      	movs	r3, #4
 801017e:	e01e      	b.n	80101be <ams_precharge_drive_close_air_minus_function+0x72>
   }

   if((timer_r2 > 2)) {
 8010180:	4b11      	ldr	r3, [pc, #68]	; (80101c8 <ams_precharge_drive_close_air_minus_function+0x7c>)
 8010182:	edd3 7a00 	vldr	s15, [r3]
 8010186:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 801018a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801018e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010192:	dd08      	ble.n	80101a6 <ams_precharge_drive_close_air_minus_function+0x5a>
       ams_parameters.error=111;
 8010194:	4b0f      	ldr	r3, [pc, #60]	; (80101d4 <ams_precharge_drive_close_air_minus_function+0x88>)
 8010196:	226f      	movs	r2, #111	; 0x6f
 8010198:	701a      	strb	r2, [r3, #0]
       timer_r2 = 0;
 801019a:	4b0b      	ldr	r3, [pc, #44]	; (80101c8 <ams_precharge_drive_close_air_minus_function+0x7c>)
 801019c:	f04f 0200 	mov.w	r2, #0
 80101a0:	601a      	str	r2, [r3, #0]
       return STATE_AMS_PRECHARGE_DRIVE_ERROR;
 80101a2:	2305      	movs	r3, #5
 80101a4:	e00b      	b.n	80101be <ams_precharge_drive_close_air_minus_function+0x72>
   }

   timer_r2 += ams_parameters.Ts;
 80101a6:	4b0b      	ldr	r3, [pc, #44]	; (80101d4 <ams_precharge_drive_close_air_minus_function+0x88>)
 80101a8:	ed93 7a02 	vldr	s14, [r3, #8]
 80101ac:	4b06      	ldr	r3, [pc, #24]	; (80101c8 <ams_precharge_drive_close_air_minus_function+0x7c>)
 80101ae:	edd3 7a00 	vldr	s15, [r3]
 80101b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80101b6:	4b04      	ldr	r3, [pc, #16]	; (80101c8 <ams_precharge_drive_close_air_minus_function+0x7c>)
 80101b8:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_PRECHARGE_DRIVE_CLOSE_AIR_MINUS;
 80101bc:	2303      	movs	r3, #3
}
 80101be:	4618      	mov	r0, r3
 80101c0:	46bd      	mov	sp, r7
 80101c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101c6:	4770      	bx	lr
 80101c8:	200017fc 	.word	0x200017fc
 80101cc:	2001b6f8 	.word	0x2001b6f8
 80101d0:	2001b75c 	.word	0x2001b75c
 80101d4:	2001b750 	.word	0x2001b750

080101d8 <ams_precharge_drive_close_precharge_function>:

ams_state_t ams_precharge_drive_close_precharge_function() {
 80101d8:	b480      	push	{r7}
 80101da:	af00      	add	r7, sp, #0
   if((timer_r2 < 2)&&ams_inputs.precharge_closed) {
 80101dc:	4b1c      	ldr	r3, [pc, #112]	; (8010250 <ams_precharge_drive_close_precharge_function+0x78>)
 80101de:	edd3 7a00 	vldr	s15, [r3]
 80101e2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80101e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80101ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101ee:	d50a      	bpl.n	8010206 <ams_precharge_drive_close_precharge_function+0x2e>
 80101f0:	4b18      	ldr	r3, [pc, #96]	; (8010254 <ams_precharge_drive_close_precharge_function+0x7c>)
 80101f2:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	d005      	beq.n	8010206 <ams_precharge_drive_close_precharge_function+0x2e>
       timer_r2 = 0;
 80101fa:	4b15      	ldr	r3, [pc, #84]	; (8010250 <ams_precharge_drive_close_precharge_function+0x78>)
 80101fc:	f04f 0200 	mov.w	r2, #0
 8010200:	601a      	str	r2, [r3, #0]
       return STATE_AMS_PRECHARGE_DRIVE_WAIT;
 8010202:	2306      	movs	r3, #6
 8010204:	e01e      	b.n	8010244 <ams_precharge_drive_close_precharge_function+0x6c>
   }

   if((timer_r2 > 2)) {
 8010206:	4b12      	ldr	r3, [pc, #72]	; (8010250 <ams_precharge_drive_close_precharge_function+0x78>)
 8010208:	edd3 7a00 	vldr	s15, [r3]
 801020c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8010210:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010214:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010218:	dd08      	ble.n	801022c <ams_precharge_drive_close_precharge_function+0x54>
       ams_parameters.error=112;
 801021a:	4b0f      	ldr	r3, [pc, #60]	; (8010258 <ams_precharge_drive_close_precharge_function+0x80>)
 801021c:	2270      	movs	r2, #112	; 0x70
 801021e:	701a      	strb	r2, [r3, #0]
       timer_r2 = 0;
 8010220:	4b0b      	ldr	r3, [pc, #44]	; (8010250 <ams_precharge_drive_close_precharge_function+0x78>)
 8010222:	f04f 0200 	mov.w	r2, #0
 8010226:	601a      	str	r2, [r3, #0]
       return STATE_AMS_PRECHARGE_DRIVE_ERROR;
 8010228:	2305      	movs	r3, #5
 801022a:	e00b      	b.n	8010244 <ams_precharge_drive_close_precharge_function+0x6c>
   }

   timer_r2 += ams_parameters.Ts;
 801022c:	4b0a      	ldr	r3, [pc, #40]	; (8010258 <ams_precharge_drive_close_precharge_function+0x80>)
 801022e:	ed93 7a02 	vldr	s14, [r3, #8]
 8010232:	4b07      	ldr	r3, [pc, #28]	; (8010250 <ams_precharge_drive_close_precharge_function+0x78>)
 8010234:	edd3 7a00 	vldr	s15, [r3]
 8010238:	ee77 7a27 	vadd.f32	s15, s14, s15
 801023c:	4b04      	ldr	r3, [pc, #16]	; (8010250 <ams_precharge_drive_close_precharge_function+0x78>)
 801023e:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_PRECHARGE_DRIVE_CLOSE_PRECHARGE;
 8010242:	2304      	movs	r3, #4
}
 8010244:	4618      	mov	r0, r3
 8010246:	46bd      	mov	sp, r7
 8010248:	f85d 7b04 	ldr.w	r7, [sp], #4
 801024c:	4770      	bx	lr
 801024e:	bf00      	nop
 8010250:	200017fc 	.word	0x200017fc
 8010254:	2001b6f8 	.word	0x2001b6f8
 8010258:	2001b750 	.word	0x2001b750

0801025c <ams_precharge_drive_error_function>:

ams_state_t ams_precharge_drive_error_function() {
 801025c:	b480      	push	{r7}
 801025e:	af00      	add	r7, sp, #0
   timer_r2 += ams_parameters.Ts;
 8010260:	4b08      	ldr	r3, [pc, #32]	; (8010284 <ams_precharge_drive_error_function+0x28>)
 8010262:	ed93 7a02 	vldr	s14, [r3, #8]
 8010266:	4b08      	ldr	r3, [pc, #32]	; (8010288 <ams_precharge_drive_error_function+0x2c>)
 8010268:	edd3 7a00 	vldr	s15, [r3]
 801026c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010270:	4b05      	ldr	r3, [pc, #20]	; (8010288 <ams_precharge_drive_error_function+0x2c>)
 8010272:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_PRECHARGE_DRIVE_ERROR;
 8010276:	2305      	movs	r3, #5
}
 8010278:	4618      	mov	r0, r3
 801027a:	46bd      	mov	sp, r7
 801027c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010280:	4770      	bx	lr
 8010282:	bf00      	nop
 8010284:	2001b750 	.word	0x2001b750
 8010288:	200017fc 	.word	0x200017fc
 801028c:	00000000 	.word	0x00000000

08010290 <ams_precharge_drive_wait_function>:

ams_state_t ams_precharge_drive_wait_function() {
 8010290:	b580      	push	{r7, lr}
 8010292:	af00      	add	r7, sp, #0
   if((timer_r2 > 5)&&(timer_r2 < 30)&&(ams_inputs.accumulator_voltage*0.95<ams_inputs.vehicle_voltage)) {
 8010294:	4b2a      	ldr	r3, [pc, #168]	; (8010340 <ams_precharge_drive_wait_function+0xb0>)
 8010296:	edd3 7a00 	vldr	s15, [r3]
 801029a:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 801029e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80102a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102a6:	dd26      	ble.n	80102f6 <ams_precharge_drive_wait_function+0x66>
 80102a8:	4b25      	ldr	r3, [pc, #148]	; (8010340 <ams_precharge_drive_wait_function+0xb0>)
 80102aa:	edd3 7a00 	vldr	s15, [r3]
 80102ae:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80102b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80102b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102ba:	d51c      	bpl.n	80102f6 <ams_precharge_drive_wait_function+0x66>
 80102bc:	4b21      	ldr	r3, [pc, #132]	; (8010344 <ams_precharge_drive_wait_function+0xb4>)
 80102be:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 80102c2:	a31d      	add	r3, pc, #116	; (adr r3, 8010338 <ams_precharge_drive_wait_function+0xa8>)
 80102c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102c8:	f7f0 f988 	bl	80005dc <__aeabi_dmul>
 80102cc:	4602      	mov	r2, r0
 80102ce:	460b      	mov	r3, r1
 80102d0:	4610      	mov	r0, r2
 80102d2:	4619      	mov	r1, r3
 80102d4:	4b1b      	ldr	r3, [pc, #108]	; (8010344 <ams_precharge_drive_wait_function+0xb4>)
 80102d6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80102da:	f7f0 fbf1 	bl	8000ac0 <__aeabi_dcmplt>
 80102de:	4603      	mov	r3, r0
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d008      	beq.n	80102f6 <ams_precharge_drive_wait_function+0x66>
       ams_outputs.close_air_plus=1;
 80102e4:	4b18      	ldr	r3, [pc, #96]	; (8010348 <ams_precharge_drive_wait_function+0xb8>)
 80102e6:	2201      	movs	r2, #1
 80102e8:	70da      	strb	r2, [r3, #3]
       timer_r2 = 0;
 80102ea:	4b15      	ldr	r3, [pc, #84]	; (8010340 <ams_precharge_drive_wait_function+0xb0>)
 80102ec:	f04f 0200 	mov.w	r2, #0
 80102f0:	601a      	str	r2, [r3, #0]
       return STATE_AMS_PRECHARGE_DRIVE_CLOSE_AIR_PLUS;
 80102f2:	2307      	movs	r3, #7
 80102f4:	e01e      	b.n	8010334 <ams_precharge_drive_wait_function+0xa4>
   }

   if((timer_r2 > 30)) {
 80102f6:	4b12      	ldr	r3, [pc, #72]	; (8010340 <ams_precharge_drive_wait_function+0xb0>)
 80102f8:	edd3 7a00 	vldr	s15, [r3]
 80102fc:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8010300:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010308:	dd08      	ble.n	801031c <ams_precharge_drive_wait_function+0x8c>
       ams_parameters.error=113;
 801030a:	4b10      	ldr	r3, [pc, #64]	; (801034c <ams_precharge_drive_wait_function+0xbc>)
 801030c:	2271      	movs	r2, #113	; 0x71
 801030e:	701a      	strb	r2, [r3, #0]
       timer_r2 = 0;
 8010310:	4b0b      	ldr	r3, [pc, #44]	; (8010340 <ams_precharge_drive_wait_function+0xb0>)
 8010312:	f04f 0200 	mov.w	r2, #0
 8010316:	601a      	str	r2, [r3, #0]
       return STATE_AMS_PRECHARGE_DRIVE_ERROR;
 8010318:	2305      	movs	r3, #5
 801031a:	e00b      	b.n	8010334 <ams_precharge_drive_wait_function+0xa4>
   }

   timer_r2 += ams_parameters.Ts;
 801031c:	4b0b      	ldr	r3, [pc, #44]	; (801034c <ams_precharge_drive_wait_function+0xbc>)
 801031e:	ed93 7a02 	vldr	s14, [r3, #8]
 8010322:	4b07      	ldr	r3, [pc, #28]	; (8010340 <ams_precharge_drive_wait_function+0xb0>)
 8010324:	edd3 7a00 	vldr	s15, [r3]
 8010328:	ee77 7a27 	vadd.f32	s15, s14, s15
 801032c:	4b04      	ldr	r3, [pc, #16]	; (8010340 <ams_precharge_drive_wait_function+0xb0>)
 801032e:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_PRECHARGE_DRIVE_WAIT;
 8010332:	2306      	movs	r3, #6
}
 8010334:	4618      	mov	r0, r3
 8010336:	bd80      	pop	{r7, pc}
 8010338:	66666666 	.word	0x66666666
 801033c:	3fee6666 	.word	0x3fee6666
 8010340:	200017fc 	.word	0x200017fc
 8010344:	2001b6f8 	.word	0x2001b6f8
 8010348:	2001b75c 	.word	0x2001b75c
 801034c:	2001b750 	.word	0x2001b750

08010350 <ams_precharge_drive_close_air_plus_function>:

ams_state_t ams_precharge_drive_close_air_plus_function() {
 8010350:	b480      	push	{r7}
 8010352:	af00      	add	r7, sp, #0
   if((timer_r2 < 2)&&ams_inputs.air_plus_closed) {
 8010354:	4b1d      	ldr	r3, [pc, #116]	; (80103cc <ams_precharge_drive_close_air_plus_function+0x7c>)
 8010356:	edd3 7a00 	vldr	s15, [r3]
 801035a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 801035e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010366:	d50d      	bpl.n	8010384 <ams_precharge_drive_close_air_plus_function+0x34>
 8010368:	4b19      	ldr	r3, [pc, #100]	; (80103d0 <ams_precharge_drive_close_air_plus_function+0x80>)
 801036a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801036e:	2b00      	cmp	r3, #0
 8010370:	d008      	beq.n	8010384 <ams_precharge_drive_close_air_plus_function+0x34>
       ams_outputs.close_precharge=0;
 8010372:	4b18      	ldr	r3, [pc, #96]	; (80103d4 <ams_precharge_drive_close_air_plus_function+0x84>)
 8010374:	2200      	movs	r2, #0
 8010376:	705a      	strb	r2, [r3, #1]
       timer_r2 = 0;
 8010378:	4b14      	ldr	r3, [pc, #80]	; (80103cc <ams_precharge_drive_close_air_plus_function+0x7c>)
 801037a:	f04f 0200 	mov.w	r2, #0
 801037e:	601a      	str	r2, [r3, #0]
       return STATE_AMS_PRECHARGE_DRIVE_OPEN_PRECHARGE;
 8010380:	2308      	movs	r3, #8
 8010382:	e01e      	b.n	80103c2 <ams_precharge_drive_close_air_plus_function+0x72>
   }

   if((timer_r2 > 2)) {
 8010384:	4b11      	ldr	r3, [pc, #68]	; (80103cc <ams_precharge_drive_close_air_plus_function+0x7c>)
 8010386:	edd3 7a00 	vldr	s15, [r3]
 801038a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 801038e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010396:	dd08      	ble.n	80103aa <ams_precharge_drive_close_air_plus_function+0x5a>
       ams_parameters.error=114;
 8010398:	4b0f      	ldr	r3, [pc, #60]	; (80103d8 <ams_precharge_drive_close_air_plus_function+0x88>)
 801039a:	2272      	movs	r2, #114	; 0x72
 801039c:	701a      	strb	r2, [r3, #0]
       timer_r2 = 0;
 801039e:	4b0b      	ldr	r3, [pc, #44]	; (80103cc <ams_precharge_drive_close_air_plus_function+0x7c>)
 80103a0:	f04f 0200 	mov.w	r2, #0
 80103a4:	601a      	str	r2, [r3, #0]
       return STATE_AMS_PRECHARGE_DRIVE_ERROR;
 80103a6:	2305      	movs	r3, #5
 80103a8:	e00b      	b.n	80103c2 <ams_precharge_drive_close_air_plus_function+0x72>
   }

   timer_r2 += ams_parameters.Ts;
 80103aa:	4b0b      	ldr	r3, [pc, #44]	; (80103d8 <ams_precharge_drive_close_air_plus_function+0x88>)
 80103ac:	ed93 7a02 	vldr	s14, [r3, #8]
 80103b0:	4b06      	ldr	r3, [pc, #24]	; (80103cc <ams_precharge_drive_close_air_plus_function+0x7c>)
 80103b2:	edd3 7a00 	vldr	s15, [r3]
 80103b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80103ba:	4b04      	ldr	r3, [pc, #16]	; (80103cc <ams_precharge_drive_close_air_plus_function+0x7c>)
 80103bc:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_PRECHARGE_DRIVE_CLOSE_AIR_PLUS;
 80103c0:	2307      	movs	r3, #7
}
 80103c2:	4618      	mov	r0, r3
 80103c4:	46bd      	mov	sp, r7
 80103c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ca:	4770      	bx	lr
 80103cc:	200017fc 	.word	0x200017fc
 80103d0:	2001b6f8 	.word	0x2001b6f8
 80103d4:	2001b75c 	.word	0x2001b75c
 80103d8:	2001b750 	.word	0x2001b750

080103dc <ams_precharge_drive_open_precharge_function>:

ams_state_t ams_precharge_drive_open_precharge_function() {
 80103dc:	b480      	push	{r7}
 80103de:	af00      	add	r7, sp, #0
   if((timer_r2 > 2)) {
 80103e0:	4b1d      	ldr	r3, [pc, #116]	; (8010458 <ams_precharge_drive_open_precharge_function+0x7c>)
 80103e2:	edd3 7a00 	vldr	s15, [r3]
 80103e6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80103ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80103ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103f2:	dd08      	ble.n	8010406 <ams_precharge_drive_open_precharge_function+0x2a>
       ams_parameters.error=115;
 80103f4:	4b19      	ldr	r3, [pc, #100]	; (801045c <ams_precharge_drive_open_precharge_function+0x80>)
 80103f6:	2273      	movs	r2, #115	; 0x73
 80103f8:	701a      	strb	r2, [r3, #0]
       timer_r2 = 0;
 80103fa:	4b17      	ldr	r3, [pc, #92]	; (8010458 <ams_precharge_drive_open_precharge_function+0x7c>)
 80103fc:	f04f 0200 	mov.w	r2, #0
 8010400:	601a      	str	r2, [r3, #0]
       return STATE_AMS_PRECHARGE_DRIVE_ERROR;
 8010402:	2305      	movs	r3, #5
 8010404:	e023      	b.n	801044e <ams_precharge_drive_open_precharge_function+0x72>
   }

   if((timer_r2 < 2)&&!ams_inputs.precharge_closed) {
 8010406:	4b14      	ldr	r3, [pc, #80]	; (8010458 <ams_precharge_drive_open_precharge_function+0x7c>)
 8010408:	edd3 7a00 	vldr	s15, [r3]
 801040c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8010410:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010418:	d50d      	bpl.n	8010436 <ams_precharge_drive_open_precharge_function+0x5a>
 801041a:	4b11      	ldr	r3, [pc, #68]	; (8010460 <ams_precharge_drive_open_precharge_function+0x84>)
 801041c:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8010420:	2b00      	cmp	r3, #0
 8010422:	d108      	bne.n	8010436 <ams_precharge_drive_open_precharge_function+0x5a>
       ams_parameters.precharge_drive_complete=1;
 8010424:	4b0d      	ldr	r3, [pc, #52]	; (801045c <ams_precharge_drive_open_precharge_function+0x80>)
 8010426:	2201      	movs	r2, #1
 8010428:	711a      	strb	r2, [r3, #4]
       timer_r2 = 0;
 801042a:	4b0b      	ldr	r3, [pc, #44]	; (8010458 <ams_precharge_drive_open_precharge_function+0x7c>)
 801042c:	f04f 0200 	mov.w	r2, #0
 8010430:	601a      	str	r2, [r3, #0]
       return STATE_AMS_PRECHARGE_DRIVE_EXIT;
 8010432:	2309      	movs	r3, #9
 8010434:	e00b      	b.n	801044e <ams_precharge_drive_open_precharge_function+0x72>
   }

   timer_r2 += ams_parameters.Ts;
 8010436:	4b09      	ldr	r3, [pc, #36]	; (801045c <ams_precharge_drive_open_precharge_function+0x80>)
 8010438:	ed93 7a02 	vldr	s14, [r3, #8]
 801043c:	4b06      	ldr	r3, [pc, #24]	; (8010458 <ams_precharge_drive_open_precharge_function+0x7c>)
 801043e:	edd3 7a00 	vldr	s15, [r3]
 8010442:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010446:	4b04      	ldr	r3, [pc, #16]	; (8010458 <ams_precharge_drive_open_precharge_function+0x7c>)
 8010448:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_PRECHARGE_DRIVE_OPEN_PRECHARGE;
 801044c:	2308      	movs	r3, #8
}
 801044e:	4618      	mov	r0, r3
 8010450:	46bd      	mov	sp, r7
 8010452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010456:	4770      	bx	lr
 8010458:	200017fc 	.word	0x200017fc
 801045c:	2001b750 	.word	0x2001b750
 8010460:	2001b6f8 	.word	0x2001b6f8

08010464 <ams_precharge_drive_exit_function>:

ams_state_t ams_precharge_drive_exit_function() {
 8010464:	b480      	push	{r7}
 8010466:	af00      	add	r7, sp, #0
   timer_r2 += ams_parameters.Ts;
 8010468:	4b08      	ldr	r3, [pc, #32]	; (801048c <ams_precharge_drive_exit_function+0x28>)
 801046a:	ed93 7a02 	vldr	s14, [r3, #8]
 801046e:	4b08      	ldr	r3, [pc, #32]	; (8010490 <ams_precharge_drive_exit_function+0x2c>)
 8010470:	edd3 7a00 	vldr	s15, [r3]
 8010474:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010478:	4b05      	ldr	r3, [pc, #20]	; (8010490 <ams_precharge_drive_exit_function+0x2c>)
 801047a:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_PRECHARGE_DRIVE_EXIT;
 801047e:	2309      	movs	r3, #9
}
 8010480:	4618      	mov	r0, r3
 8010482:	46bd      	mov	sp, r7
 8010484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010488:	4770      	bx	lr
 801048a:	bf00      	nop
 801048c:	2001b750 	.word	0x2001b750
 8010490:	200017fc 	.word	0x200017fc

08010494 <ams_precharge_drive_0_function>:

ams_state_t ams_precharge_drive_0_function() {
 8010494:	b480      	push	{r7}
 8010496:	af00      	add	r7, sp, #0
   if(1) {
       timer_r2 = 0;
 8010498:	4b04      	ldr	r3, [pc, #16]	; (80104ac <ams_precharge_drive_0_function+0x18>)
 801049a:	f04f 0200 	mov.w	r2, #0
 801049e:	601a      	str	r2, [r3, #0]
       return STATE_AMS_PRECHARGE_DRIVE_ENTRY;
 80104a0:	230b      	movs	r3, #11
   }

   timer_r2 += ams_parameters.Ts;
   return STATE_AMS_PRECHARGE_DRIVE_0;
}
 80104a2:	4618      	mov	r0, r3
 80104a4:	46bd      	mov	sp, r7
 80104a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104aa:	4770      	bx	lr
 80104ac:	200017fc 	.word	0x200017fc

080104b0 <ams_precharge_drive_entry_function>:

ams_state_t ams_precharge_drive_entry_function() {
 80104b0:	b480      	push	{r7}
 80104b2:	af00      	add	r7, sp, #0
   if(1) {
       ams_outputs.close_air_minus=1;
 80104b4:	4b06      	ldr	r3, [pc, #24]	; (80104d0 <ams_precharge_drive_entry_function+0x20>)
 80104b6:	2201      	movs	r2, #1
 80104b8:	709a      	strb	r2, [r3, #2]
       timer_r2 = 0;
 80104ba:	4b06      	ldr	r3, [pc, #24]	; (80104d4 <ams_precharge_drive_entry_function+0x24>)
 80104bc:	f04f 0200 	mov.w	r2, #0
 80104c0:	601a      	str	r2, [r3, #0]
       return STATE_AMS_PRECHARGE_DRIVE_CLOSE_AIR_MINUS;
 80104c2:	2303      	movs	r3, #3
   }

   timer_r2 += ams_parameters.Ts;
   return STATE_AMS_PRECHARGE_DRIVE_ENTRY;
}
 80104c4:	4618      	mov	r0, r3
 80104c6:	46bd      	mov	sp, r7
 80104c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104cc:	4770      	bx	lr
 80104ce:	bf00      	nop
 80104d0:	2001b75c 	.word	0x2001b75c
 80104d4:	200017fc 	.word	0x200017fc

080104d8 <ams_precharge_drive_function>:

ams_state_t ams_precharge_drive_function() {
 80104d8:	b5b0      	push	{r4, r5, r7, lr}
 80104da:	af00      	add	r7, sp, #0
   if(timer_r1 < 0.001*ams_parameters.Ts) {
 80104dc:	4b56      	ldr	r3, [pc, #344]	; (8010638 <ams_precharge_drive_function+0x160>)
 80104de:	681b      	ldr	r3, [r3, #0]
 80104e0:	4618      	mov	r0, r3
 80104e2:	f7f0 f823 	bl	800052c <__aeabi_f2d>
 80104e6:	4604      	mov	r4, r0
 80104e8:	460d      	mov	r5, r1
 80104ea:	4b54      	ldr	r3, [pc, #336]	; (801063c <ams_precharge_drive_function+0x164>)
 80104ec:	689b      	ldr	r3, [r3, #8]
 80104ee:	4618      	mov	r0, r3
 80104f0:	f7f0 f81c 	bl	800052c <__aeabi_f2d>
 80104f4:	a34e      	add	r3, pc, #312	; (adr r3, 8010630 <ams_precharge_drive_function+0x158>)
 80104f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104fa:	f7f0 f86f 	bl	80005dc <__aeabi_dmul>
 80104fe:	4602      	mov	r2, r0
 8010500:	460b      	mov	r3, r1
 8010502:	4620      	mov	r0, r4
 8010504:	4629      	mov	r1, r5
 8010506:	f7f0 fadb 	bl	8000ac0 <__aeabi_dcmplt>
 801050a:	4603      	mov	r3, r0
 801050c:	2b00      	cmp	r3, #0
 801050e:	d002      	beq.n	8010516 <ams_precharge_drive_function+0x3e>
       state_r2 = STATE_AMS_PRECHARGE_DRIVE_0;
 8010510:	4b4b      	ldr	r3, [pc, #300]	; (8010640 <ams_precharge_drive_function+0x168>)
 8010512:	220a      	movs	r2, #10
 8010514:	701a      	strb	r2, [r3, #0]
   }

   switch(state_r2) {
 8010516:	4b4a      	ldr	r3, [pc, #296]	; (8010640 <ams_precharge_drive_function+0x168>)
 8010518:	781b      	ldrb	r3, [r3, #0]
 801051a:	3b03      	subs	r3, #3
 801051c:	2b08      	cmp	r3, #8
 801051e:	d854      	bhi.n	80105ca <ams_precharge_drive_function+0xf2>
 8010520:	a201      	add	r2, pc, #4	; (adr r2, 8010528 <ams_precharge_drive_function+0x50>)
 8010522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010526:	bf00      	nop
 8010528:	0801054d 	.word	0x0801054d
 801052c:	0801055b 	.word	0x0801055b
 8010530:	08010569 	.word	0x08010569
 8010534:	08010577 	.word	0x08010577
 8010538:	08010585 	.word	0x08010585
 801053c:	08010593 	.word	0x08010593
 8010540:	080105a1 	.word	0x080105a1
 8010544:	080105af 	.word	0x080105af
 8010548:	080105bd 	.word	0x080105bd
       case STATE_AMS_PRECHARGE_DRIVE_CLOSE_AIR_MINUS:
           state_r2 = ams_precharge_drive_close_air_minus_function();
 801054c:	f7ff fdfe 	bl	801014c <ams_precharge_drive_close_air_minus_function>
 8010550:	4603      	mov	r3, r0
 8010552:	461a      	mov	r2, r3
 8010554:	4b3a      	ldr	r3, [pc, #232]	; (8010640 <ams_precharge_drive_function+0x168>)
 8010556:	701a      	strb	r2, [r3, #0]
           break;
 8010558:	e03a      	b.n	80105d0 <ams_precharge_drive_function+0xf8>
       case STATE_AMS_PRECHARGE_DRIVE_CLOSE_PRECHARGE:
           state_r2 = ams_precharge_drive_close_precharge_function();
 801055a:	f7ff fe3d 	bl	80101d8 <ams_precharge_drive_close_precharge_function>
 801055e:	4603      	mov	r3, r0
 8010560:	461a      	mov	r2, r3
 8010562:	4b37      	ldr	r3, [pc, #220]	; (8010640 <ams_precharge_drive_function+0x168>)
 8010564:	701a      	strb	r2, [r3, #0]
           break;
 8010566:	e033      	b.n	80105d0 <ams_precharge_drive_function+0xf8>
       case STATE_AMS_PRECHARGE_DRIVE_ERROR:
           state_r2 = ams_precharge_drive_error_function();
 8010568:	f7ff fe78 	bl	801025c <ams_precharge_drive_error_function>
 801056c:	4603      	mov	r3, r0
 801056e:	461a      	mov	r2, r3
 8010570:	4b33      	ldr	r3, [pc, #204]	; (8010640 <ams_precharge_drive_function+0x168>)
 8010572:	701a      	strb	r2, [r3, #0]
           break;
 8010574:	e02c      	b.n	80105d0 <ams_precharge_drive_function+0xf8>
       case STATE_AMS_PRECHARGE_DRIVE_WAIT:
           state_r2 = ams_precharge_drive_wait_function();
 8010576:	f7ff fe8b 	bl	8010290 <ams_precharge_drive_wait_function>
 801057a:	4603      	mov	r3, r0
 801057c:	461a      	mov	r2, r3
 801057e:	4b30      	ldr	r3, [pc, #192]	; (8010640 <ams_precharge_drive_function+0x168>)
 8010580:	701a      	strb	r2, [r3, #0]
           break;
 8010582:	e025      	b.n	80105d0 <ams_precharge_drive_function+0xf8>
       case STATE_AMS_PRECHARGE_DRIVE_CLOSE_AIR_PLUS:
           state_r2 = ams_precharge_drive_close_air_plus_function();
 8010584:	f7ff fee4 	bl	8010350 <ams_precharge_drive_close_air_plus_function>
 8010588:	4603      	mov	r3, r0
 801058a:	461a      	mov	r2, r3
 801058c:	4b2c      	ldr	r3, [pc, #176]	; (8010640 <ams_precharge_drive_function+0x168>)
 801058e:	701a      	strb	r2, [r3, #0]
           break;
 8010590:	e01e      	b.n	80105d0 <ams_precharge_drive_function+0xf8>
       case STATE_AMS_PRECHARGE_DRIVE_OPEN_PRECHARGE:
           state_r2 = ams_precharge_drive_open_precharge_function();
 8010592:	f7ff ff23 	bl	80103dc <ams_precharge_drive_open_precharge_function>
 8010596:	4603      	mov	r3, r0
 8010598:	461a      	mov	r2, r3
 801059a:	4b29      	ldr	r3, [pc, #164]	; (8010640 <ams_precharge_drive_function+0x168>)
 801059c:	701a      	strb	r2, [r3, #0]
           break;
 801059e:	e017      	b.n	80105d0 <ams_precharge_drive_function+0xf8>
       case STATE_AMS_PRECHARGE_DRIVE_EXIT:
           state_r2 = ams_precharge_drive_exit_function();
 80105a0:	f7ff ff60 	bl	8010464 <ams_precharge_drive_exit_function>
 80105a4:	4603      	mov	r3, r0
 80105a6:	461a      	mov	r2, r3
 80105a8:	4b25      	ldr	r3, [pc, #148]	; (8010640 <ams_precharge_drive_function+0x168>)
 80105aa:	701a      	strb	r2, [r3, #0]
           break;
 80105ac:	e010      	b.n	80105d0 <ams_precharge_drive_function+0xf8>
       case STATE_AMS_PRECHARGE_DRIVE_0:
           state_r2 = ams_precharge_drive_0_function();
 80105ae:	f7ff ff71 	bl	8010494 <ams_precharge_drive_0_function>
 80105b2:	4603      	mov	r3, r0
 80105b4:	461a      	mov	r2, r3
 80105b6:	4b22      	ldr	r3, [pc, #136]	; (8010640 <ams_precharge_drive_function+0x168>)
 80105b8:	701a      	strb	r2, [r3, #0]
           break;
 80105ba:	e009      	b.n	80105d0 <ams_precharge_drive_function+0xf8>
       case STATE_AMS_PRECHARGE_DRIVE_ENTRY:
           state_r2 = ams_precharge_drive_entry_function();
 80105bc:	f7ff ff78 	bl	80104b0 <ams_precharge_drive_entry_function>
 80105c0:	4603      	mov	r3, r0
 80105c2:	461a      	mov	r2, r3
 80105c4:	4b1e      	ldr	r3, [pc, #120]	; (8010640 <ams_precharge_drive_function+0x168>)
 80105c6:	701a      	strb	r2, [r3, #0]
           break;
 80105c8:	e002      	b.n	80105d0 <ams_precharge_drive_function+0xf8>
       default:
           ams_error();
 80105ca:	f7ff fdb8 	bl	801013e <ams_error>
           break;
 80105ce:	bf00      	nop
   }

   if(ams_parameters.precharge_drive_complete) {
 80105d0:	4b1a      	ldr	r3, [pc, #104]	; (801063c <ams_precharge_drive_function+0x164>)
 80105d2:	791b      	ldrb	r3, [r3, #4]
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d008      	beq.n	80105ea <ams_precharge_drive_function+0x112>
       ams_parameters.precharge_drive_complete=0;
 80105d8:	4b18      	ldr	r3, [pc, #96]	; (801063c <ams_precharge_drive_function+0x164>)
 80105da:	2200      	movs	r2, #0
 80105dc:	711a      	strb	r2, [r3, #4]
       timer_r1 = 0;
 80105de:	4b16      	ldr	r3, [pc, #88]	; (8010638 <ams_precharge_drive_function+0x160>)
 80105e0:	f04f 0200 	mov.w	r2, #0
 80105e4:	601a      	str	r2, [r3, #0]
       return STATE_AMS_DRIVE;
 80105e6:	230c      	movs	r3, #12
 80105e8:	e01e      	b.n	8010628 <ams_precharge_drive_function+0x150>
   }

   if(ams_parameters.error||ams_inputs.ams_error||ams_inputs.imd_error) {
 80105ea:	4b14      	ldr	r3, [pc, #80]	; (801063c <ams_precharge_drive_function+0x164>)
 80105ec:	781b      	ldrb	r3, [r3, #0]
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	d108      	bne.n	8010604 <ams_precharge_drive_function+0x12c>
 80105f2:	4b14      	ldr	r3, [pc, #80]	; (8010644 <ams_precharge_drive_function+0x16c>)
 80105f4:	781b      	ldrb	r3, [r3, #0]
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	d104      	bne.n	8010604 <ams_precharge_drive_function+0x12c>
 80105fa:	4b12      	ldr	r3, [pc, #72]	; (8010644 <ams_precharge_drive_function+0x16c>)
 80105fc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010600:	2b00      	cmp	r3, #0
 8010602:	d005      	beq.n	8010610 <ams_precharge_drive_function+0x138>
       timer_r1 = 0;
 8010604:	4b0c      	ldr	r3, [pc, #48]	; (8010638 <ams_precharge_drive_function+0x160>)
 8010606:	f04f 0200 	mov.w	r2, #0
 801060a:	601a      	str	r2, [r3, #0]
       return STATE_AMS_ERROR;
 801060c:	2312      	movs	r3, #18
 801060e:	e00b      	b.n	8010628 <ams_precharge_drive_function+0x150>
   }


   timer_r1 += ams_parameters.Ts;
 8010610:	4b0a      	ldr	r3, [pc, #40]	; (801063c <ams_precharge_drive_function+0x164>)
 8010612:	ed93 7a02 	vldr	s14, [r3, #8]
 8010616:	4b08      	ldr	r3, [pc, #32]	; (8010638 <ams_precharge_drive_function+0x160>)
 8010618:	edd3 7a00 	vldr	s15, [r3]
 801061c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010620:	4b05      	ldr	r3, [pc, #20]	; (8010638 <ams_precharge_drive_function+0x160>)
 8010622:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_PRECHARGE_DRIVE;
 8010626:	2302      	movs	r3, #2
}
 8010628:	4618      	mov	r0, r3
 801062a:	bdb0      	pop	{r4, r5, r7, pc}
 801062c:	f3af 8000 	nop.w
 8010630:	d2f1a9fc 	.word	0xd2f1a9fc
 8010634:	3f50624d 	.word	0x3f50624d
 8010638:	200017f8 	.word	0x200017f8
 801063c:	2001b750 	.word	0x2001b750
 8010640:	200017f1 	.word	0x200017f1
 8010644:	2001b6f8 	.word	0x2001b6f8

08010648 <ams_drive_0_function>:

ams_state_t ams_drive_0_function() {
 8010648:	b480      	push	{r7}
 801064a:	af00      	add	r7, sp, #0
   if(1) {
       timer_r2 = 0;
 801064c:	4b04      	ldr	r3, [pc, #16]	; (8010660 <ams_drive_0_function+0x18>)
 801064e:	f04f 0200 	mov.w	r2, #0
 8010652:	601a      	str	r2, [r3, #0]
       return STATE_AMS_DRIVE_DRIVE;
 8010654:	230e      	movs	r3, #14
   }

   timer_r2 += ams_parameters.Ts;
   return STATE_AMS_DRIVE_0;
}
 8010656:	4618      	mov	r0, r3
 8010658:	46bd      	mov	sp, r7
 801065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801065e:	4770      	bx	lr
 8010660:	200017fc 	.word	0x200017fc
 8010664:	00000000 	.word	0x00000000

08010668 <ams_drive_drive_function>:

ams_state_t ams_drive_drive_function() {
 8010668:	b580      	push	{r7, lr}
 801066a:	af00      	add	r7, sp, #0
   if((ams_inputs.minimum_cell_voltage<2.85)||!ams_inputs.drive) {
 801066c:	4b14      	ldr	r3, [pc, #80]	; (80106c0 <ams_drive_drive_function+0x58>)
 801066e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8010672:	a311      	add	r3, pc, #68	; (adr r3, 80106b8 <ams_drive_drive_function+0x50>)
 8010674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010678:	f7f0 fa22 	bl	8000ac0 <__aeabi_dcmplt>
 801067c:	4603      	mov	r3, r0
 801067e:	2b00      	cmp	r3, #0
 8010680:	d104      	bne.n	801068c <ams_drive_drive_function+0x24>
 8010682:	4b0f      	ldr	r3, [pc, #60]	; (80106c0 <ams_drive_drive_function+0x58>)
 8010684:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8010688:	2b00      	cmp	r3, #0
 801068a:	d105      	bne.n	8010698 <ams_drive_drive_function+0x30>
       timer_r2 = 0;
 801068c:	4b0d      	ldr	r3, [pc, #52]	; (80106c4 <ams_drive_drive_function+0x5c>)
 801068e:	f04f 0200 	mov.w	r2, #0
 8010692:	601a      	str	r2, [r3, #0]
       return STATE_AMS_DRIVE_END_DRIVE;
 8010694:	230f      	movs	r3, #15
 8010696:	e00b      	b.n	80106b0 <ams_drive_drive_function+0x48>
   }

   timer_r2 += ams_parameters.Ts;
 8010698:	4b0b      	ldr	r3, [pc, #44]	; (80106c8 <ams_drive_drive_function+0x60>)
 801069a:	ed93 7a02 	vldr	s14, [r3, #8]
 801069e:	4b09      	ldr	r3, [pc, #36]	; (80106c4 <ams_drive_drive_function+0x5c>)
 80106a0:	edd3 7a00 	vldr	s15, [r3]
 80106a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80106a8:	4b06      	ldr	r3, [pc, #24]	; (80106c4 <ams_drive_drive_function+0x5c>)
 80106aa:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_DRIVE_DRIVE;
 80106ae:	230e      	movs	r3, #14
}
 80106b0:	4618      	mov	r0, r3
 80106b2:	bd80      	pop	{r7, pc}
 80106b4:	f3af 8000 	nop.w
 80106b8:	cccccccd 	.word	0xcccccccd
 80106bc:	4006cccc 	.word	0x4006cccc
 80106c0:	2001b6f8 	.word	0x2001b6f8
 80106c4:	200017fc 	.word	0x200017fc
 80106c8:	2001b750 	.word	0x2001b750
 80106cc:	00000000 	.word	0x00000000

080106d0 <ams_drive_end_drive_function>:

ams_state_t ams_drive_end_drive_function() {
 80106d0:	b580      	push	{r7, lr}
 80106d2:	af00      	add	r7, sp, #0
   if((timer_r2 < 7)&&(fabsf(ams_inputs.accumulator_current)<0.001)) {
 80106d4:	4b30      	ldr	r3, [pc, #192]	; (8010798 <ams_drive_end_drive_function+0xc8>)
 80106d6:	edd3 7a00 	vldr	s15, [r3]
 80106da:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 80106de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80106e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106e6:	d528      	bpl.n	801073a <ams_drive_end_drive_function+0x6a>
 80106e8:	4b2c      	ldr	r3, [pc, #176]	; (801079c <ams_drive_end_drive_function+0xcc>)
 80106ea:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80106ee:	4610      	mov	r0, r2
 80106f0:	4619      	mov	r1, r3
 80106f2:	f7f0 fa6b 	bl	8000bcc <__aeabi_d2f>
 80106f6:	ee07 0a90 	vmov	s15, r0
 80106fa:	eef0 7ae7 	vabs.f32	s15, s15
 80106fe:	ee17 0a90 	vmov	r0, s15
 8010702:	f7ef ff13 	bl	800052c <__aeabi_f2d>
 8010706:	a322      	add	r3, pc, #136	; (adr r3, 8010790 <ams_drive_end_drive_function+0xc0>)
 8010708:	e9d3 2300 	ldrd	r2, r3, [r3]
 801070c:	f7f0 f9d8 	bl	8000ac0 <__aeabi_dcmplt>
 8010710:	4603      	mov	r3, r0
 8010712:	2b00      	cmp	r3, #0
 8010714:	d011      	beq.n	801073a <ams_drive_end_drive_function+0x6a>
       ams_outputs.close_air_plus=0;
 8010716:	4b22      	ldr	r3, [pc, #136]	; (80107a0 <ams_drive_end_drive_function+0xd0>)
 8010718:	2200      	movs	r2, #0
 801071a:	70da      	strb	r2, [r3, #3]
       ams_outputs.close_air_minus=0;
 801071c:	4b20      	ldr	r3, [pc, #128]	; (80107a0 <ams_drive_end_drive_function+0xd0>)
 801071e:	2200      	movs	r2, #0
 8010720:	709a      	strb	r2, [r3, #2]
       ams_outputs.close_precharge=0;
 8010722:	4b1f      	ldr	r3, [pc, #124]	; (80107a0 <ams_drive_end_drive_function+0xd0>)
 8010724:	2200      	movs	r2, #0
 8010726:	705a      	strb	r2, [r3, #1]
       ams_parameters.drive_complete=1;
 8010728:	4b1e      	ldr	r3, [pc, #120]	; (80107a4 <ams_drive_end_drive_function+0xd4>)
 801072a:	2201      	movs	r2, #1
 801072c:	709a      	strb	r2, [r3, #2]
       timer_r2 = 0;
 801072e:	4b1a      	ldr	r3, [pc, #104]	; (8010798 <ams_drive_end_drive_function+0xc8>)
 8010730:	f04f 0200 	mov.w	r2, #0
 8010734:	601a      	str	r2, [r3, #0]
       return STATE_AMS_DRIVE_EXIT;
 8010736:	2310      	movs	r3, #16
 8010738:	e027      	b.n	801078a <ams_drive_end_drive_function+0xba>
   }

   if((timer_r2 > 7)) {
 801073a:	4b17      	ldr	r3, [pc, #92]	; (8010798 <ams_drive_end_drive_function+0xc8>)
 801073c:	edd3 7a00 	vldr	s15, [r3]
 8010740:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 8010744:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801074c:	dd11      	ble.n	8010772 <ams_drive_end_drive_function+0xa2>
       ams_outputs.close_air_plus=0;
 801074e:	4b14      	ldr	r3, [pc, #80]	; (80107a0 <ams_drive_end_drive_function+0xd0>)
 8010750:	2200      	movs	r2, #0
 8010752:	70da      	strb	r2, [r3, #3]
       ams_outputs.close_air_minus=0;
 8010754:	4b12      	ldr	r3, [pc, #72]	; (80107a0 <ams_drive_end_drive_function+0xd0>)
 8010756:	2200      	movs	r2, #0
 8010758:	709a      	strb	r2, [r3, #2]
       ams_outputs.close_precharge=0;
 801075a:	4b11      	ldr	r3, [pc, #68]	; (80107a0 <ams_drive_end_drive_function+0xd0>)
 801075c:	2200      	movs	r2, #0
 801075e:	705a      	strb	r2, [r3, #1]
       ams_parameters.error=131;
 8010760:	4b10      	ldr	r3, [pc, #64]	; (80107a4 <ams_drive_end_drive_function+0xd4>)
 8010762:	2283      	movs	r2, #131	; 0x83
 8010764:	701a      	strb	r2, [r3, #0]
       timer_r2 = 0;
 8010766:	4b0c      	ldr	r3, [pc, #48]	; (8010798 <ams_drive_end_drive_function+0xc8>)
 8010768:	f04f 0200 	mov.w	r2, #0
 801076c:	601a      	str	r2, [r3, #0]
       return STATE_AMS_DRIVE_FORCE_QUIT;
 801076e:	2311      	movs	r3, #17
 8010770:	e00b      	b.n	801078a <ams_drive_end_drive_function+0xba>
   }

   timer_r2 += ams_parameters.Ts;
 8010772:	4b0c      	ldr	r3, [pc, #48]	; (80107a4 <ams_drive_end_drive_function+0xd4>)
 8010774:	ed93 7a02 	vldr	s14, [r3, #8]
 8010778:	4b07      	ldr	r3, [pc, #28]	; (8010798 <ams_drive_end_drive_function+0xc8>)
 801077a:	edd3 7a00 	vldr	s15, [r3]
 801077e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010782:	4b05      	ldr	r3, [pc, #20]	; (8010798 <ams_drive_end_drive_function+0xc8>)
 8010784:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_DRIVE_END_DRIVE;
 8010788:	230f      	movs	r3, #15
}
 801078a:	4618      	mov	r0, r3
 801078c:	bd80      	pop	{r7, pc}
 801078e:	bf00      	nop
 8010790:	d2f1a9fc 	.word	0xd2f1a9fc
 8010794:	3f50624d 	.word	0x3f50624d
 8010798:	200017fc 	.word	0x200017fc
 801079c:	2001b6f8 	.word	0x2001b6f8
 80107a0:	2001b75c 	.word	0x2001b75c
 80107a4:	2001b750 	.word	0x2001b750

080107a8 <ams_drive_exit_function>:

ams_state_t ams_drive_exit_function() {
 80107a8:	b480      	push	{r7}
 80107aa:	af00      	add	r7, sp, #0
   timer_r2 += ams_parameters.Ts;
 80107ac:	4b08      	ldr	r3, [pc, #32]	; (80107d0 <ams_drive_exit_function+0x28>)
 80107ae:	ed93 7a02 	vldr	s14, [r3, #8]
 80107b2:	4b08      	ldr	r3, [pc, #32]	; (80107d4 <ams_drive_exit_function+0x2c>)
 80107b4:	edd3 7a00 	vldr	s15, [r3]
 80107b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80107bc:	4b05      	ldr	r3, [pc, #20]	; (80107d4 <ams_drive_exit_function+0x2c>)
 80107be:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_DRIVE_EXIT;
 80107c2:	2310      	movs	r3, #16
}
 80107c4:	4618      	mov	r0, r3
 80107c6:	46bd      	mov	sp, r7
 80107c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107cc:	4770      	bx	lr
 80107ce:	bf00      	nop
 80107d0:	2001b750 	.word	0x2001b750
 80107d4:	200017fc 	.word	0x200017fc

080107d8 <ams_drive_force_quit_function>:

ams_state_t ams_drive_force_quit_function() {
 80107d8:	b480      	push	{r7}
 80107da:	af00      	add	r7, sp, #0
   timer_r2 += ams_parameters.Ts;
 80107dc:	4b08      	ldr	r3, [pc, #32]	; (8010800 <ams_drive_force_quit_function+0x28>)
 80107de:	ed93 7a02 	vldr	s14, [r3, #8]
 80107e2:	4b08      	ldr	r3, [pc, #32]	; (8010804 <ams_drive_force_quit_function+0x2c>)
 80107e4:	edd3 7a00 	vldr	s15, [r3]
 80107e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80107ec:	4b05      	ldr	r3, [pc, #20]	; (8010804 <ams_drive_force_quit_function+0x2c>)
 80107ee:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_DRIVE_FORCE_QUIT;
 80107f2:	2311      	movs	r3, #17
}
 80107f4:	4618      	mov	r0, r3
 80107f6:	46bd      	mov	sp, r7
 80107f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107fc:	4770      	bx	lr
 80107fe:	bf00      	nop
 8010800:	2001b750 	.word	0x2001b750
 8010804:	200017fc 	.word	0x200017fc

08010808 <ams_drive_function>:

ams_state_t ams_drive_function() {
 8010808:	b5b0      	push	{r4, r5, r7, lr}
 801080a:	af00      	add	r7, sp, #0
   if(timer_r1 < 0.001*ams_parameters.Ts) {
 801080c:	4b44      	ldr	r3, [pc, #272]	; (8010920 <ams_drive_function+0x118>)
 801080e:	681b      	ldr	r3, [r3, #0]
 8010810:	4618      	mov	r0, r3
 8010812:	f7ef fe8b 	bl	800052c <__aeabi_f2d>
 8010816:	4604      	mov	r4, r0
 8010818:	460d      	mov	r5, r1
 801081a:	4b42      	ldr	r3, [pc, #264]	; (8010924 <ams_drive_function+0x11c>)
 801081c:	689b      	ldr	r3, [r3, #8]
 801081e:	4618      	mov	r0, r3
 8010820:	f7ef fe84 	bl	800052c <__aeabi_f2d>
 8010824:	a33c      	add	r3, pc, #240	; (adr r3, 8010918 <ams_drive_function+0x110>)
 8010826:	e9d3 2300 	ldrd	r2, r3, [r3]
 801082a:	f7ef fed7 	bl	80005dc <__aeabi_dmul>
 801082e:	4602      	mov	r2, r0
 8010830:	460b      	mov	r3, r1
 8010832:	4620      	mov	r0, r4
 8010834:	4629      	mov	r1, r5
 8010836:	f7f0 f943 	bl	8000ac0 <__aeabi_dcmplt>
 801083a:	4603      	mov	r3, r0
 801083c:	2b00      	cmp	r3, #0
 801083e:	d002      	beq.n	8010846 <ams_drive_function+0x3e>
       state_r2 = STATE_AMS_DRIVE_0;
 8010840:	4b39      	ldr	r3, [pc, #228]	; (8010928 <ams_drive_function+0x120>)
 8010842:	220d      	movs	r2, #13
 8010844:	701a      	strb	r2, [r3, #0]
   }

   switch(state_r2) {
 8010846:	4b38      	ldr	r3, [pc, #224]	; (8010928 <ams_drive_function+0x120>)
 8010848:	781b      	ldrb	r3, [r3, #0]
 801084a:	3b0d      	subs	r3, #13
 801084c:	2b04      	cmp	r3, #4
 801084e:	d830      	bhi.n	80108b2 <ams_drive_function+0xaa>
 8010850:	a201      	add	r2, pc, #4	; (adr r2, 8010858 <ams_drive_function+0x50>)
 8010852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010856:	bf00      	nop
 8010858:	0801086d 	.word	0x0801086d
 801085c:	0801087b 	.word	0x0801087b
 8010860:	08010889 	.word	0x08010889
 8010864:	08010897 	.word	0x08010897
 8010868:	080108a5 	.word	0x080108a5
       case STATE_AMS_DRIVE_0:
           state_r2 = ams_drive_0_function();
 801086c:	f7ff feec 	bl	8010648 <ams_drive_0_function>
 8010870:	4603      	mov	r3, r0
 8010872:	461a      	mov	r2, r3
 8010874:	4b2c      	ldr	r3, [pc, #176]	; (8010928 <ams_drive_function+0x120>)
 8010876:	701a      	strb	r2, [r3, #0]
           break;
 8010878:	e01e      	b.n	80108b8 <ams_drive_function+0xb0>
       case STATE_AMS_DRIVE_DRIVE:
           state_r2 = ams_drive_drive_function();
 801087a:	f7ff fef5 	bl	8010668 <ams_drive_drive_function>
 801087e:	4603      	mov	r3, r0
 8010880:	461a      	mov	r2, r3
 8010882:	4b29      	ldr	r3, [pc, #164]	; (8010928 <ams_drive_function+0x120>)
 8010884:	701a      	strb	r2, [r3, #0]
           break;
 8010886:	e017      	b.n	80108b8 <ams_drive_function+0xb0>
       case STATE_AMS_DRIVE_END_DRIVE:
           state_r2 = ams_drive_end_drive_function();
 8010888:	f7ff ff22 	bl	80106d0 <ams_drive_end_drive_function>
 801088c:	4603      	mov	r3, r0
 801088e:	461a      	mov	r2, r3
 8010890:	4b25      	ldr	r3, [pc, #148]	; (8010928 <ams_drive_function+0x120>)
 8010892:	701a      	strb	r2, [r3, #0]
           break;
 8010894:	e010      	b.n	80108b8 <ams_drive_function+0xb0>
       case STATE_AMS_DRIVE_EXIT:
           state_r2 = ams_drive_exit_function();
 8010896:	f7ff ff87 	bl	80107a8 <ams_drive_exit_function>
 801089a:	4603      	mov	r3, r0
 801089c:	461a      	mov	r2, r3
 801089e:	4b22      	ldr	r3, [pc, #136]	; (8010928 <ams_drive_function+0x120>)
 80108a0:	701a      	strb	r2, [r3, #0]
           break;
 80108a2:	e009      	b.n	80108b8 <ams_drive_function+0xb0>
       case STATE_AMS_DRIVE_FORCE_QUIT:
           state_r2 = ams_drive_force_quit_function();
 80108a4:	f7ff ff98 	bl	80107d8 <ams_drive_force_quit_function>
 80108a8:	4603      	mov	r3, r0
 80108aa:	461a      	mov	r2, r3
 80108ac:	4b1e      	ldr	r3, [pc, #120]	; (8010928 <ams_drive_function+0x120>)
 80108ae:	701a      	strb	r2, [r3, #0]
           break;
 80108b0:	e002      	b.n	80108b8 <ams_drive_function+0xb0>
       default:
           ams_error();
 80108b2:	f7ff fc44 	bl	801013e <ams_error>
           break;
 80108b6:	bf00      	nop
   }

   if(ams_inputs.ams_error||ams_inputs.imd_error||ams_inputs.drive_error) {
 80108b8:	4b1c      	ldr	r3, [pc, #112]	; (801092c <ams_drive_function+0x124>)
 80108ba:	781b      	ldrb	r3, [r3, #0]
 80108bc:	2b00      	cmp	r3, #0
 80108be:	d109      	bne.n	80108d4 <ams_drive_function+0xcc>
 80108c0:	4b1a      	ldr	r3, [pc, #104]	; (801092c <ams_drive_function+0x124>)
 80108c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	d104      	bne.n	80108d4 <ams_drive_function+0xcc>
 80108ca:	4b18      	ldr	r3, [pc, #96]	; (801092c <ams_drive_function+0x124>)
 80108cc:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	d005      	beq.n	80108e0 <ams_drive_function+0xd8>
       timer_r1 = 0;
 80108d4:	4b12      	ldr	r3, [pc, #72]	; (8010920 <ams_drive_function+0x118>)
 80108d6:	f04f 0200 	mov.w	r2, #0
 80108da:	601a      	str	r2, [r3, #0]
       return STATE_AMS_ERROR;
 80108dc:	2312      	movs	r3, #18
 80108de:	e018      	b.n	8010912 <ams_drive_function+0x10a>
   }

   if(ams_parameters.drive_complete) {
 80108e0:	4b10      	ldr	r3, [pc, #64]	; (8010924 <ams_drive_function+0x11c>)
 80108e2:	789b      	ldrb	r3, [r3, #2]
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	d008      	beq.n	80108fa <ams_drive_function+0xf2>
       ams_parameters.drive_complete=0;
 80108e8:	4b0e      	ldr	r3, [pc, #56]	; (8010924 <ams_drive_function+0x11c>)
 80108ea:	2200      	movs	r2, #0
 80108ec:	709a      	strb	r2, [r3, #2]
       timer_r1 = 0;
 80108ee:	4b0c      	ldr	r3, [pc, #48]	; (8010920 <ams_drive_function+0x118>)
 80108f0:	f04f 0200 	mov.w	r2, #0
 80108f4:	601a      	str	r2, [r3, #0]
       return STATE_AMS_IDLE;
 80108f6:	2327      	movs	r3, #39	; 0x27
 80108f8:	e00b      	b.n	8010912 <ams_drive_function+0x10a>
   }


   timer_r1 += ams_parameters.Ts;
 80108fa:	4b0a      	ldr	r3, [pc, #40]	; (8010924 <ams_drive_function+0x11c>)
 80108fc:	ed93 7a02 	vldr	s14, [r3, #8]
 8010900:	4b07      	ldr	r3, [pc, #28]	; (8010920 <ams_drive_function+0x118>)
 8010902:	edd3 7a00 	vldr	s15, [r3]
 8010906:	ee77 7a27 	vadd.f32	s15, s14, s15
 801090a:	4b05      	ldr	r3, [pc, #20]	; (8010920 <ams_drive_function+0x118>)
 801090c:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_DRIVE;
 8010910:	230c      	movs	r3, #12
}
 8010912:	4618      	mov	r0, r3
 8010914:	bdb0      	pop	{r4, r5, r7, pc}
 8010916:	bf00      	nop
 8010918:	d2f1a9fc 	.word	0xd2f1a9fc
 801091c:	3f50624d 	.word	0x3f50624d
 8010920:	200017f8 	.word	0x200017f8
 8010924:	2001b750 	.word	0x2001b750
 8010928:	200017f1 	.word	0x200017f1
 801092c:	2001b6f8 	.word	0x2001b6f8

08010930 <ams_error_0_function>:

ams_state_t ams_error_0_function() {
 8010930:	b480      	push	{r7}
 8010932:	af00      	add	r7, sp, #0
   if(1) {
       timer_r2 = 0;
 8010934:	4b04      	ldr	r3, [pc, #16]	; (8010948 <ams_error_0_function+0x18>)
 8010936:	f04f 0200 	mov.w	r2, #0
 801093a:	601a      	str	r2, [r3, #0]
       return STATE_AMS_ERROR_ERROR_DETECTED;
 801093c:	2314      	movs	r3, #20
   }

   timer_r2 += ams_parameters.Ts;
   return STATE_AMS_ERROR_0;
}
 801093e:	4618      	mov	r0, r3
 8010940:	46bd      	mov	sp, r7
 8010942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010946:	4770      	bx	lr
 8010948:	200017fc 	.word	0x200017fc

0801094c <ams_error_error_detected_function>:

ams_state_t ams_error_error_detected_function() {
 801094c:	b480      	push	{r7}
 801094e:	af00      	add	r7, sp, #0
   if(1) {
       ams_outputs.close_air_plus=0;
 8010950:	4b0b      	ldr	r3, [pc, #44]	; (8010980 <ams_error_error_detected_function+0x34>)
 8010952:	2200      	movs	r2, #0
 8010954:	70da      	strb	r2, [r3, #3]
       ams_outputs.close_air_minus=0;
 8010956:	4b0a      	ldr	r3, [pc, #40]	; (8010980 <ams_error_error_detected_function+0x34>)
 8010958:	2200      	movs	r2, #0
 801095a:	709a      	strb	r2, [r3, #2]
       ams_outputs.close_precharge=0;
 801095c:	4b08      	ldr	r3, [pc, #32]	; (8010980 <ams_error_error_detected_function+0x34>)
 801095e:	2200      	movs	r2, #0
 8010960:	705a      	strb	r2, [r3, #1]
       ams_outputs.set_error=ams_parameters.error;
 8010962:	4b08      	ldr	r3, [pc, #32]	; (8010984 <ams_error_error_detected_function+0x38>)
 8010964:	781a      	ldrb	r2, [r3, #0]
 8010966:	4b06      	ldr	r3, [pc, #24]	; (8010980 <ams_error_error_detected_function+0x34>)
 8010968:	711a      	strb	r2, [r3, #4]
       timer_r2 = 0;
 801096a:	4b07      	ldr	r3, [pc, #28]	; (8010988 <ams_error_error_detected_function+0x3c>)
 801096c:	f04f 0200 	mov.w	r2, #0
 8010970:	601a      	str	r2, [r3, #0]
       return STATE_AMS_ERROR_RELAYS_OPENED;
 8010972:	2315      	movs	r3, #21
   }

   timer_r2 += ams_parameters.Ts;
   return STATE_AMS_ERROR_ERROR_DETECTED;
}
 8010974:	4618      	mov	r0, r3
 8010976:	46bd      	mov	sp, r7
 8010978:	f85d 7b04 	ldr.w	r7, [sp], #4
 801097c:	4770      	bx	lr
 801097e:	bf00      	nop
 8010980:	2001b75c 	.word	0x2001b75c
 8010984:	2001b750 	.word	0x2001b750
 8010988:	200017fc 	.word	0x200017fc

0801098c <ams_error_relays_opened_function>:

ams_state_t ams_error_relays_opened_function() {
 801098c:	b480      	push	{r7}
 801098e:	af00      	add	r7, sp, #0
   if((timer_r2 > 5)) {
 8010990:	4b13      	ldr	r3, [pc, #76]	; (80109e0 <ams_error_relays_opened_function+0x54>)
 8010992:	edd3 7a00 	vldr	s15, [r3]
 8010996:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 801099a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801099e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109a2:	dd0b      	ble.n	80109bc <ams_error_relays_opened_function+0x30>
       ams_outputs.set_error=0;
 80109a4:	4b0f      	ldr	r3, [pc, #60]	; (80109e4 <ams_error_relays_opened_function+0x58>)
 80109a6:	2200      	movs	r2, #0
 80109a8:	711a      	strb	r2, [r3, #4]
       ams_parameters.error=0;
 80109aa:	4b0f      	ldr	r3, [pc, #60]	; (80109e8 <ams_error_relays_opened_function+0x5c>)
 80109ac:	2200      	movs	r2, #0
 80109ae:	701a      	strb	r2, [r3, #0]
       timer_r2 = 0;
 80109b0:	4b0b      	ldr	r3, [pc, #44]	; (80109e0 <ams_error_relays_opened_function+0x54>)
 80109b2:	f04f 0200 	mov.w	r2, #0
 80109b6:	601a      	str	r2, [r3, #0]
       return STATE_AMS_ERROR_AWAITING_ERROR_RESOLUTION;
 80109b8:	2316      	movs	r3, #22
 80109ba:	e00b      	b.n	80109d4 <ams_error_relays_opened_function+0x48>
   }

   timer_r2 += ams_parameters.Ts;
 80109bc:	4b0a      	ldr	r3, [pc, #40]	; (80109e8 <ams_error_relays_opened_function+0x5c>)
 80109be:	ed93 7a02 	vldr	s14, [r3, #8]
 80109c2:	4b07      	ldr	r3, [pc, #28]	; (80109e0 <ams_error_relays_opened_function+0x54>)
 80109c4:	edd3 7a00 	vldr	s15, [r3]
 80109c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80109cc:	4b04      	ldr	r3, [pc, #16]	; (80109e0 <ams_error_relays_opened_function+0x54>)
 80109ce:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_ERROR_RELAYS_OPENED;
 80109d2:	2315      	movs	r3, #21
}
 80109d4:	4618      	mov	r0, r3
 80109d6:	46bd      	mov	sp, r7
 80109d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109dc:	4770      	bx	lr
 80109de:	bf00      	nop
 80109e0:	200017fc 	.word	0x200017fc
 80109e4:	2001b75c 	.word	0x2001b75c
 80109e8:	2001b750 	.word	0x2001b750

080109ec <ams_error_awaiting_error_resolution_function>:

ams_state_t ams_error_awaiting_error_resolution_function() {
 80109ec:	b480      	push	{r7}
 80109ee:	af00      	add	r7, sp, #0
   timer_r2 += ams_parameters.Ts;
 80109f0:	4b08      	ldr	r3, [pc, #32]	; (8010a14 <ams_error_awaiting_error_resolution_function+0x28>)
 80109f2:	ed93 7a02 	vldr	s14, [r3, #8]
 80109f6:	4b08      	ldr	r3, [pc, #32]	; (8010a18 <ams_error_awaiting_error_resolution_function+0x2c>)
 80109f8:	edd3 7a00 	vldr	s15, [r3]
 80109fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010a00:	4b05      	ldr	r3, [pc, #20]	; (8010a18 <ams_error_awaiting_error_resolution_function+0x2c>)
 8010a02:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_ERROR_AWAITING_ERROR_RESOLUTION;
 8010a06:	2316      	movs	r3, #22
}
 8010a08:	4618      	mov	r0, r3
 8010a0a:	46bd      	mov	sp, r7
 8010a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a10:	4770      	bx	lr
 8010a12:	bf00      	nop
 8010a14:	2001b750 	.word	0x2001b750
 8010a18:	200017fc 	.word	0x200017fc
 8010a1c:	00000000 	.word	0x00000000

08010a20 <ams_error_function>:

ams_state_t ams_error_function() {
 8010a20:	b5b0      	push	{r4, r5, r7, lr}
 8010a22:	af00      	add	r7, sp, #0
   if(timer_r1 < 0.001*ams_parameters.Ts) {
 8010a24:	4b38      	ldr	r3, [pc, #224]	; (8010b08 <ams_error_function+0xe8>)
 8010a26:	681b      	ldr	r3, [r3, #0]
 8010a28:	4618      	mov	r0, r3
 8010a2a:	f7ef fd7f 	bl	800052c <__aeabi_f2d>
 8010a2e:	4604      	mov	r4, r0
 8010a30:	460d      	mov	r5, r1
 8010a32:	4b36      	ldr	r3, [pc, #216]	; (8010b0c <ams_error_function+0xec>)
 8010a34:	689b      	ldr	r3, [r3, #8]
 8010a36:	4618      	mov	r0, r3
 8010a38:	f7ef fd78 	bl	800052c <__aeabi_f2d>
 8010a3c:	a330      	add	r3, pc, #192	; (adr r3, 8010b00 <ams_error_function+0xe0>)
 8010a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a42:	f7ef fdcb 	bl	80005dc <__aeabi_dmul>
 8010a46:	4602      	mov	r2, r0
 8010a48:	460b      	mov	r3, r1
 8010a4a:	4620      	mov	r0, r4
 8010a4c:	4629      	mov	r1, r5
 8010a4e:	f7f0 f837 	bl	8000ac0 <__aeabi_dcmplt>
 8010a52:	4603      	mov	r3, r0
 8010a54:	2b00      	cmp	r3, #0
 8010a56:	d002      	beq.n	8010a5e <ams_error_function+0x3e>
       state_r2 = STATE_AMS_ERROR_0;
 8010a58:	4b2d      	ldr	r3, [pc, #180]	; (8010b10 <ams_error_function+0xf0>)
 8010a5a:	2213      	movs	r2, #19
 8010a5c:	701a      	strb	r2, [r3, #0]
   }

   switch(state_r2) {
 8010a5e:	4b2c      	ldr	r3, [pc, #176]	; (8010b10 <ams_error_function+0xf0>)
 8010a60:	781b      	ldrb	r3, [r3, #0]
 8010a62:	3b13      	subs	r3, #19
 8010a64:	2b03      	cmp	r3, #3
 8010a66:	d827      	bhi.n	8010ab8 <ams_error_function+0x98>
 8010a68:	a201      	add	r2, pc, #4	; (adr r2, 8010a70 <ams_error_function+0x50>)
 8010a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a6e:	bf00      	nop
 8010a70:	08010a81 	.word	0x08010a81
 8010a74:	08010a8f 	.word	0x08010a8f
 8010a78:	08010a9d 	.word	0x08010a9d
 8010a7c:	08010aab 	.word	0x08010aab
       case STATE_AMS_ERROR_0:
           state_r2 = ams_error_0_function();
 8010a80:	f7ff ff56 	bl	8010930 <ams_error_0_function>
 8010a84:	4603      	mov	r3, r0
 8010a86:	461a      	mov	r2, r3
 8010a88:	4b21      	ldr	r3, [pc, #132]	; (8010b10 <ams_error_function+0xf0>)
 8010a8a:	701a      	strb	r2, [r3, #0]
           break;
 8010a8c:	e017      	b.n	8010abe <ams_error_function+0x9e>
       case STATE_AMS_ERROR_ERROR_DETECTED:
           state_r2 = ams_error_error_detected_function();
 8010a8e:	f7ff ff5d 	bl	801094c <ams_error_error_detected_function>
 8010a92:	4603      	mov	r3, r0
 8010a94:	461a      	mov	r2, r3
 8010a96:	4b1e      	ldr	r3, [pc, #120]	; (8010b10 <ams_error_function+0xf0>)
 8010a98:	701a      	strb	r2, [r3, #0]
           break;
 8010a9a:	e010      	b.n	8010abe <ams_error_function+0x9e>
       case STATE_AMS_ERROR_RELAYS_OPENED:
           state_r2 = ams_error_relays_opened_function();
 8010a9c:	f7ff ff76 	bl	801098c <ams_error_relays_opened_function>
 8010aa0:	4603      	mov	r3, r0
 8010aa2:	461a      	mov	r2, r3
 8010aa4:	4b1a      	ldr	r3, [pc, #104]	; (8010b10 <ams_error_function+0xf0>)
 8010aa6:	701a      	strb	r2, [r3, #0]
           break;
 8010aa8:	e009      	b.n	8010abe <ams_error_function+0x9e>
       case STATE_AMS_ERROR_AWAITING_ERROR_RESOLUTION:
           state_r2 = ams_error_awaiting_error_resolution_function();
 8010aaa:	f7ff ff9f 	bl	80109ec <ams_error_awaiting_error_resolution_function>
 8010aae:	4603      	mov	r3, r0
 8010ab0:	461a      	mov	r2, r3
 8010ab2:	4b17      	ldr	r3, [pc, #92]	; (8010b10 <ams_error_function+0xf0>)
 8010ab4:	701a      	strb	r2, [r3, #0]
           break;
 8010ab6:	e002      	b.n	8010abe <ams_error_function+0x9e>
       default:
           ams_error();
 8010ab8:	f7ff fb41 	bl	801013e <ams_error>
           break;
 8010abc:	bf00      	nop
   }

   if(!(ams_parameters.error||ams_inputs.ams_error||ams_inputs.imd_error)) {
 8010abe:	4b13      	ldr	r3, [pc, #76]	; (8010b0c <ams_error_function+0xec>)
 8010ac0:	781b      	ldrb	r3, [r3, #0]
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	d10e      	bne.n	8010ae4 <ams_error_function+0xc4>
 8010ac6:	4b13      	ldr	r3, [pc, #76]	; (8010b14 <ams_error_function+0xf4>)
 8010ac8:	781b      	ldrb	r3, [r3, #0]
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	d10a      	bne.n	8010ae4 <ams_error_function+0xc4>
 8010ace:	4b11      	ldr	r3, [pc, #68]	; (8010b14 <ams_error_function+0xf4>)
 8010ad0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	d105      	bne.n	8010ae4 <ams_error_function+0xc4>
       timer_r1 = 0;
 8010ad8:	4b0b      	ldr	r3, [pc, #44]	; (8010b08 <ams_error_function+0xe8>)
 8010ada:	f04f 0200 	mov.w	r2, #0
 8010ade:	601a      	str	r2, [r3, #0]
       return STATE_AMS_IDLE;
 8010ae0:	2327      	movs	r3, #39	; 0x27
 8010ae2:	e00b      	b.n	8010afc <ams_error_function+0xdc>
   }


   timer_r1 += ams_parameters.Ts;
 8010ae4:	4b09      	ldr	r3, [pc, #36]	; (8010b0c <ams_error_function+0xec>)
 8010ae6:	ed93 7a02 	vldr	s14, [r3, #8]
 8010aea:	4b07      	ldr	r3, [pc, #28]	; (8010b08 <ams_error_function+0xe8>)
 8010aec:	edd3 7a00 	vldr	s15, [r3]
 8010af0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010af4:	4b04      	ldr	r3, [pc, #16]	; (8010b08 <ams_error_function+0xe8>)
 8010af6:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_ERROR;
 8010afa:	2312      	movs	r3, #18
}
 8010afc:	4618      	mov	r0, r3
 8010afe:	bdb0      	pop	{r4, r5, r7, pc}
 8010b00:	d2f1a9fc 	.word	0xd2f1a9fc
 8010b04:	3f50624d 	.word	0x3f50624d
 8010b08:	200017f8 	.word	0x200017f8
 8010b0c:	2001b750 	.word	0x2001b750
 8010b10:	200017f1 	.word	0x200017f1
 8010b14:	2001b6f8 	.word	0x2001b6f8

08010b18 <ams_precharge_charge_close_air_minus_function>:

ams_state_t ams_precharge_charge_close_air_minus_function() {
 8010b18:	b480      	push	{r7}
 8010b1a:	af00      	add	r7, sp, #0
   if((timer_r2 < 2)&&ams_inputs.air_minus_closed) {
 8010b1c:	4b1d      	ldr	r3, [pc, #116]	; (8010b94 <ams_precharge_charge_close_air_minus_function+0x7c>)
 8010b1e:	edd3 7a00 	vldr	s15, [r3]
 8010b22:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8010b26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010b2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b2e:	d50d      	bpl.n	8010b4c <ams_precharge_charge_close_air_minus_function+0x34>
 8010b30:	4b19      	ldr	r3, [pc, #100]	; (8010b98 <ams_precharge_charge_close_air_minus_function+0x80>)
 8010b32:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	d008      	beq.n	8010b4c <ams_precharge_charge_close_air_minus_function+0x34>
       ams_outputs.close_precharge=1;
 8010b3a:	4b18      	ldr	r3, [pc, #96]	; (8010b9c <ams_precharge_charge_close_air_minus_function+0x84>)
 8010b3c:	2201      	movs	r2, #1
 8010b3e:	705a      	strb	r2, [r3, #1]
       timer_r2 = 0;
 8010b40:	4b14      	ldr	r3, [pc, #80]	; (8010b94 <ams_precharge_charge_close_air_minus_function+0x7c>)
 8010b42:	f04f 0200 	mov.w	r2, #0
 8010b46:	601a      	str	r2, [r3, #0]
       return STATE_AMS_PRECHARGE_CHARGE_CLOSE_PRECHARGE;
 8010b48:	2319      	movs	r3, #25
 8010b4a:	e01e      	b.n	8010b8a <ams_precharge_charge_close_air_minus_function+0x72>
   }

   if((timer_r2 > 2)) {
 8010b4c:	4b11      	ldr	r3, [pc, #68]	; (8010b94 <ams_precharge_charge_close_air_minus_function+0x7c>)
 8010b4e:	edd3 7a00 	vldr	s15, [r3]
 8010b52:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8010b56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010b5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b5e:	dd08      	ble.n	8010b72 <ams_precharge_charge_close_air_minus_function+0x5a>
       ams_parameters.error=122;
 8010b60:	4b0f      	ldr	r3, [pc, #60]	; (8010ba0 <ams_precharge_charge_close_air_minus_function+0x88>)
 8010b62:	227a      	movs	r2, #122	; 0x7a
 8010b64:	701a      	strb	r2, [r3, #0]
       timer_r2 = 0;
 8010b66:	4b0b      	ldr	r3, [pc, #44]	; (8010b94 <ams_precharge_charge_close_air_minus_function+0x7c>)
 8010b68:	f04f 0200 	mov.w	r2, #0
 8010b6c:	601a      	str	r2, [r3, #0]
       return STATE_AMS_PRECHARGE_CHARGE_ERROR;
 8010b6e:	231a      	movs	r3, #26
 8010b70:	e00b      	b.n	8010b8a <ams_precharge_charge_close_air_minus_function+0x72>
   }

   timer_r2 += ams_parameters.Ts;
 8010b72:	4b0b      	ldr	r3, [pc, #44]	; (8010ba0 <ams_precharge_charge_close_air_minus_function+0x88>)
 8010b74:	ed93 7a02 	vldr	s14, [r3, #8]
 8010b78:	4b06      	ldr	r3, [pc, #24]	; (8010b94 <ams_precharge_charge_close_air_minus_function+0x7c>)
 8010b7a:	edd3 7a00 	vldr	s15, [r3]
 8010b7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010b82:	4b04      	ldr	r3, [pc, #16]	; (8010b94 <ams_precharge_charge_close_air_minus_function+0x7c>)
 8010b84:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_PRECHARGE_CHARGE_CLOSE_AIR_MINUS;
 8010b88:	2318      	movs	r3, #24
}
 8010b8a:	4618      	mov	r0, r3
 8010b8c:	46bd      	mov	sp, r7
 8010b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b92:	4770      	bx	lr
 8010b94:	200017fc 	.word	0x200017fc
 8010b98:	2001b6f8 	.word	0x2001b6f8
 8010b9c:	2001b75c 	.word	0x2001b75c
 8010ba0:	2001b750 	.word	0x2001b750

08010ba4 <ams_precharge_charge_close_precharge_function>:

ams_state_t ams_precharge_charge_close_precharge_function() {
 8010ba4:	b480      	push	{r7}
 8010ba6:	af00      	add	r7, sp, #0
   if((timer_r2 < 2)&&ams_inputs.precharge_closed) {
 8010ba8:	4b1c      	ldr	r3, [pc, #112]	; (8010c1c <ams_precharge_charge_close_precharge_function+0x78>)
 8010baa:	edd3 7a00 	vldr	s15, [r3]
 8010bae:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8010bb2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010bb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bba:	d50a      	bpl.n	8010bd2 <ams_precharge_charge_close_precharge_function+0x2e>
 8010bbc:	4b18      	ldr	r3, [pc, #96]	; (8010c20 <ams_precharge_charge_close_precharge_function+0x7c>)
 8010bbe:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	d005      	beq.n	8010bd2 <ams_precharge_charge_close_precharge_function+0x2e>
       timer_r2 = 0;
 8010bc6:	4b15      	ldr	r3, [pc, #84]	; (8010c1c <ams_precharge_charge_close_precharge_function+0x78>)
 8010bc8:	f04f 0200 	mov.w	r2, #0
 8010bcc:	601a      	str	r2, [r3, #0]
       return STATE_AMS_PRECHARGE_CHARGE_WAIT;
 8010bce:	231b      	movs	r3, #27
 8010bd0:	e01e      	b.n	8010c10 <ams_precharge_charge_close_precharge_function+0x6c>
   }

   if((timer_r2 > 2)) {
 8010bd2:	4b12      	ldr	r3, [pc, #72]	; (8010c1c <ams_precharge_charge_close_precharge_function+0x78>)
 8010bd4:	edd3 7a00 	vldr	s15, [r3]
 8010bd8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8010bdc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010be0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010be4:	dd08      	ble.n	8010bf8 <ams_precharge_charge_close_precharge_function+0x54>
       ams_parameters.error=123;
 8010be6:	4b0f      	ldr	r3, [pc, #60]	; (8010c24 <ams_precharge_charge_close_precharge_function+0x80>)
 8010be8:	227b      	movs	r2, #123	; 0x7b
 8010bea:	701a      	strb	r2, [r3, #0]
       timer_r2 = 0;
 8010bec:	4b0b      	ldr	r3, [pc, #44]	; (8010c1c <ams_precharge_charge_close_precharge_function+0x78>)
 8010bee:	f04f 0200 	mov.w	r2, #0
 8010bf2:	601a      	str	r2, [r3, #0]
       return STATE_AMS_PRECHARGE_CHARGE_ERROR;
 8010bf4:	231a      	movs	r3, #26
 8010bf6:	e00b      	b.n	8010c10 <ams_precharge_charge_close_precharge_function+0x6c>
   }

   timer_r2 += ams_parameters.Ts;
 8010bf8:	4b0a      	ldr	r3, [pc, #40]	; (8010c24 <ams_precharge_charge_close_precharge_function+0x80>)
 8010bfa:	ed93 7a02 	vldr	s14, [r3, #8]
 8010bfe:	4b07      	ldr	r3, [pc, #28]	; (8010c1c <ams_precharge_charge_close_precharge_function+0x78>)
 8010c00:	edd3 7a00 	vldr	s15, [r3]
 8010c04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010c08:	4b04      	ldr	r3, [pc, #16]	; (8010c1c <ams_precharge_charge_close_precharge_function+0x78>)
 8010c0a:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_PRECHARGE_CHARGE_CLOSE_PRECHARGE;
 8010c0e:	2319      	movs	r3, #25
}
 8010c10:	4618      	mov	r0, r3
 8010c12:	46bd      	mov	sp, r7
 8010c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c18:	4770      	bx	lr
 8010c1a:	bf00      	nop
 8010c1c:	200017fc 	.word	0x200017fc
 8010c20:	2001b6f8 	.word	0x2001b6f8
 8010c24:	2001b750 	.word	0x2001b750

08010c28 <ams_precharge_charge_error_function>:

ams_state_t ams_precharge_charge_error_function() {
 8010c28:	b480      	push	{r7}
 8010c2a:	af00      	add	r7, sp, #0
   timer_r2 += ams_parameters.Ts;
 8010c2c:	4b08      	ldr	r3, [pc, #32]	; (8010c50 <ams_precharge_charge_error_function+0x28>)
 8010c2e:	ed93 7a02 	vldr	s14, [r3, #8]
 8010c32:	4b08      	ldr	r3, [pc, #32]	; (8010c54 <ams_precharge_charge_error_function+0x2c>)
 8010c34:	edd3 7a00 	vldr	s15, [r3]
 8010c38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010c3c:	4b05      	ldr	r3, [pc, #20]	; (8010c54 <ams_precharge_charge_error_function+0x2c>)
 8010c3e:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_PRECHARGE_CHARGE_ERROR;
 8010c42:	231a      	movs	r3, #26
}
 8010c44:	4618      	mov	r0, r3
 8010c46:	46bd      	mov	sp, r7
 8010c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c4c:	4770      	bx	lr
 8010c4e:	bf00      	nop
 8010c50:	2001b750 	.word	0x2001b750
 8010c54:	200017fc 	.word	0x200017fc

08010c58 <ams_precharge_charge_wait_function>:

ams_state_t ams_precharge_charge_wait_function() {
 8010c58:	b580      	push	{r7, lr}
 8010c5a:	af00      	add	r7, sp, #0
   if((timer_r2 > 5)&&(timer_r2 < 30)&&(ams_inputs.accumulator_voltage*0.95<ams_inputs.vehicle_voltage)) {
 8010c5c:	4b2a      	ldr	r3, [pc, #168]	; (8010d08 <ams_precharge_charge_wait_function+0xb0>)
 8010c5e:	edd3 7a00 	vldr	s15, [r3]
 8010c62:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8010c66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010c6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c6e:	dd26      	ble.n	8010cbe <ams_precharge_charge_wait_function+0x66>
 8010c70:	4b25      	ldr	r3, [pc, #148]	; (8010d08 <ams_precharge_charge_wait_function+0xb0>)
 8010c72:	edd3 7a00 	vldr	s15, [r3]
 8010c76:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8010c7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010c7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c82:	d51c      	bpl.n	8010cbe <ams_precharge_charge_wait_function+0x66>
 8010c84:	4b21      	ldr	r3, [pc, #132]	; (8010d0c <ams_precharge_charge_wait_function+0xb4>)
 8010c86:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8010c8a:	a31d      	add	r3, pc, #116	; (adr r3, 8010d00 <ams_precharge_charge_wait_function+0xa8>)
 8010c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c90:	f7ef fca4 	bl	80005dc <__aeabi_dmul>
 8010c94:	4602      	mov	r2, r0
 8010c96:	460b      	mov	r3, r1
 8010c98:	4610      	mov	r0, r2
 8010c9a:	4619      	mov	r1, r3
 8010c9c:	4b1b      	ldr	r3, [pc, #108]	; (8010d0c <ams_precharge_charge_wait_function+0xb4>)
 8010c9e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8010ca2:	f7ef ff0d 	bl	8000ac0 <__aeabi_dcmplt>
 8010ca6:	4603      	mov	r3, r0
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	d008      	beq.n	8010cbe <ams_precharge_charge_wait_function+0x66>
       ams_outputs.close_air_plus=1;
 8010cac:	4b18      	ldr	r3, [pc, #96]	; (8010d10 <ams_precharge_charge_wait_function+0xb8>)
 8010cae:	2201      	movs	r2, #1
 8010cb0:	70da      	strb	r2, [r3, #3]
       timer_r2 = 0;
 8010cb2:	4b15      	ldr	r3, [pc, #84]	; (8010d08 <ams_precharge_charge_wait_function+0xb0>)
 8010cb4:	f04f 0200 	mov.w	r2, #0
 8010cb8:	601a      	str	r2, [r3, #0]
       return STATE_AMS_PRECHARGE_CHARGE_CLOSE_AIR_PLUS;
 8010cba:	231c      	movs	r3, #28
 8010cbc:	e01e      	b.n	8010cfc <ams_precharge_charge_wait_function+0xa4>
   }

   if((timer_r2 > 30)) {
 8010cbe:	4b12      	ldr	r3, [pc, #72]	; (8010d08 <ams_precharge_charge_wait_function+0xb0>)
 8010cc0:	edd3 7a00 	vldr	s15, [r3]
 8010cc4:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8010cc8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010ccc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cd0:	dd08      	ble.n	8010ce4 <ams_precharge_charge_wait_function+0x8c>
       ams_parameters.error=124;
 8010cd2:	4b10      	ldr	r3, [pc, #64]	; (8010d14 <ams_precharge_charge_wait_function+0xbc>)
 8010cd4:	227c      	movs	r2, #124	; 0x7c
 8010cd6:	701a      	strb	r2, [r3, #0]
       timer_r2 = 0;
 8010cd8:	4b0b      	ldr	r3, [pc, #44]	; (8010d08 <ams_precharge_charge_wait_function+0xb0>)
 8010cda:	f04f 0200 	mov.w	r2, #0
 8010cde:	601a      	str	r2, [r3, #0]
       return STATE_AMS_PRECHARGE_CHARGE_ERROR;
 8010ce0:	231a      	movs	r3, #26
 8010ce2:	e00b      	b.n	8010cfc <ams_precharge_charge_wait_function+0xa4>
   }

   timer_r2 += ams_parameters.Ts;
 8010ce4:	4b0b      	ldr	r3, [pc, #44]	; (8010d14 <ams_precharge_charge_wait_function+0xbc>)
 8010ce6:	ed93 7a02 	vldr	s14, [r3, #8]
 8010cea:	4b07      	ldr	r3, [pc, #28]	; (8010d08 <ams_precharge_charge_wait_function+0xb0>)
 8010cec:	edd3 7a00 	vldr	s15, [r3]
 8010cf0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010cf4:	4b04      	ldr	r3, [pc, #16]	; (8010d08 <ams_precharge_charge_wait_function+0xb0>)
 8010cf6:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_PRECHARGE_CHARGE_WAIT;
 8010cfa:	231b      	movs	r3, #27
}
 8010cfc:	4618      	mov	r0, r3
 8010cfe:	bd80      	pop	{r7, pc}
 8010d00:	66666666 	.word	0x66666666
 8010d04:	3fee6666 	.word	0x3fee6666
 8010d08:	200017fc 	.word	0x200017fc
 8010d0c:	2001b6f8 	.word	0x2001b6f8
 8010d10:	2001b75c 	.word	0x2001b75c
 8010d14:	2001b750 	.word	0x2001b750

08010d18 <ams_precharge_charge_close_air_plus_function>:

ams_state_t ams_precharge_charge_close_air_plus_function() {
 8010d18:	b480      	push	{r7}
 8010d1a:	af00      	add	r7, sp, #0
   if((timer_r2 < 2)&&ams_inputs.air_plus_closed) {
 8010d1c:	4b1d      	ldr	r3, [pc, #116]	; (8010d94 <ams_precharge_charge_close_air_plus_function+0x7c>)
 8010d1e:	edd3 7a00 	vldr	s15, [r3]
 8010d22:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8010d26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010d2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d2e:	d50d      	bpl.n	8010d4c <ams_precharge_charge_close_air_plus_function+0x34>
 8010d30:	4b19      	ldr	r3, [pc, #100]	; (8010d98 <ams_precharge_charge_close_air_plus_function+0x80>)
 8010d32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	d008      	beq.n	8010d4c <ams_precharge_charge_close_air_plus_function+0x34>
       ams_outputs.close_precharge=0;
 8010d3a:	4b18      	ldr	r3, [pc, #96]	; (8010d9c <ams_precharge_charge_close_air_plus_function+0x84>)
 8010d3c:	2200      	movs	r2, #0
 8010d3e:	705a      	strb	r2, [r3, #1]
       timer_r2 = 0;
 8010d40:	4b14      	ldr	r3, [pc, #80]	; (8010d94 <ams_precharge_charge_close_air_plus_function+0x7c>)
 8010d42:	f04f 0200 	mov.w	r2, #0
 8010d46:	601a      	str	r2, [r3, #0]
       return STATE_AMS_PRECHARGE_CHARGE_OPEN_PRECHARGE;
 8010d48:	231d      	movs	r3, #29
 8010d4a:	e01e      	b.n	8010d8a <ams_precharge_charge_close_air_plus_function+0x72>
   }

   if((timer_r2 > 2)) {
 8010d4c:	4b11      	ldr	r3, [pc, #68]	; (8010d94 <ams_precharge_charge_close_air_plus_function+0x7c>)
 8010d4e:	edd3 7a00 	vldr	s15, [r3]
 8010d52:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8010d56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010d5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d5e:	dd08      	ble.n	8010d72 <ams_precharge_charge_close_air_plus_function+0x5a>
       ams_parameters.error=125;
 8010d60:	4b0f      	ldr	r3, [pc, #60]	; (8010da0 <ams_precharge_charge_close_air_plus_function+0x88>)
 8010d62:	227d      	movs	r2, #125	; 0x7d
 8010d64:	701a      	strb	r2, [r3, #0]
       timer_r2 = 0;
 8010d66:	4b0b      	ldr	r3, [pc, #44]	; (8010d94 <ams_precharge_charge_close_air_plus_function+0x7c>)
 8010d68:	f04f 0200 	mov.w	r2, #0
 8010d6c:	601a      	str	r2, [r3, #0]
       return STATE_AMS_PRECHARGE_CHARGE_ERROR;
 8010d6e:	231a      	movs	r3, #26
 8010d70:	e00b      	b.n	8010d8a <ams_precharge_charge_close_air_plus_function+0x72>
   }

   timer_r2 += ams_parameters.Ts;
 8010d72:	4b0b      	ldr	r3, [pc, #44]	; (8010da0 <ams_precharge_charge_close_air_plus_function+0x88>)
 8010d74:	ed93 7a02 	vldr	s14, [r3, #8]
 8010d78:	4b06      	ldr	r3, [pc, #24]	; (8010d94 <ams_precharge_charge_close_air_plus_function+0x7c>)
 8010d7a:	edd3 7a00 	vldr	s15, [r3]
 8010d7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010d82:	4b04      	ldr	r3, [pc, #16]	; (8010d94 <ams_precharge_charge_close_air_plus_function+0x7c>)
 8010d84:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_PRECHARGE_CHARGE_CLOSE_AIR_PLUS;
 8010d88:	231c      	movs	r3, #28
}
 8010d8a:	4618      	mov	r0, r3
 8010d8c:	46bd      	mov	sp, r7
 8010d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d92:	4770      	bx	lr
 8010d94:	200017fc 	.word	0x200017fc
 8010d98:	2001b6f8 	.word	0x2001b6f8
 8010d9c:	2001b75c 	.word	0x2001b75c
 8010da0:	2001b750 	.word	0x2001b750

08010da4 <ams_precharge_charge_open_precharge_function>:

ams_state_t ams_precharge_charge_open_precharge_function() {
 8010da4:	b480      	push	{r7}
 8010da6:	af00      	add	r7, sp, #0
   if((timer_r2 > 2)) {
 8010da8:	4b1d      	ldr	r3, [pc, #116]	; (8010e20 <ams_precharge_charge_open_precharge_function+0x7c>)
 8010daa:	edd3 7a00 	vldr	s15, [r3]
 8010dae:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8010db2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010db6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010dba:	dd08      	ble.n	8010dce <ams_precharge_charge_open_precharge_function+0x2a>
       ams_parameters.error=126;
 8010dbc:	4b19      	ldr	r3, [pc, #100]	; (8010e24 <ams_precharge_charge_open_precharge_function+0x80>)
 8010dbe:	227e      	movs	r2, #126	; 0x7e
 8010dc0:	701a      	strb	r2, [r3, #0]
       timer_r2 = 0;
 8010dc2:	4b17      	ldr	r3, [pc, #92]	; (8010e20 <ams_precharge_charge_open_precharge_function+0x7c>)
 8010dc4:	f04f 0200 	mov.w	r2, #0
 8010dc8:	601a      	str	r2, [r3, #0]
       return STATE_AMS_PRECHARGE_CHARGE_ERROR;
 8010dca:	231a      	movs	r3, #26
 8010dcc:	e023      	b.n	8010e16 <ams_precharge_charge_open_precharge_function+0x72>
   }

   if((timer_r2 < 2)&&!ams_inputs.precharge_closed) {
 8010dce:	4b14      	ldr	r3, [pc, #80]	; (8010e20 <ams_precharge_charge_open_precharge_function+0x7c>)
 8010dd0:	edd3 7a00 	vldr	s15, [r3]
 8010dd4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8010dd8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010ddc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010de0:	d50d      	bpl.n	8010dfe <ams_precharge_charge_open_precharge_function+0x5a>
 8010de2:	4b11      	ldr	r3, [pc, #68]	; (8010e28 <ams_precharge_charge_open_precharge_function+0x84>)
 8010de4:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	d108      	bne.n	8010dfe <ams_precharge_charge_open_precharge_function+0x5a>
       ams_parameters.precharge_charge_complete=1;
 8010dec:	4b0d      	ldr	r3, [pc, #52]	; (8010e24 <ams_precharge_charge_open_precharge_function+0x80>)
 8010dee:	2201      	movs	r2, #1
 8010df0:	705a      	strb	r2, [r3, #1]
       timer_r2 = 0;
 8010df2:	4b0b      	ldr	r3, [pc, #44]	; (8010e20 <ams_precharge_charge_open_precharge_function+0x7c>)
 8010df4:	f04f 0200 	mov.w	r2, #0
 8010df8:	601a      	str	r2, [r3, #0]
       return STATE_AMS_PRECHARGE_CHARGE_EXIT;
 8010dfa:	231e      	movs	r3, #30
 8010dfc:	e00b      	b.n	8010e16 <ams_precharge_charge_open_precharge_function+0x72>
   }

   timer_r2 += ams_parameters.Ts;
 8010dfe:	4b09      	ldr	r3, [pc, #36]	; (8010e24 <ams_precharge_charge_open_precharge_function+0x80>)
 8010e00:	ed93 7a02 	vldr	s14, [r3, #8]
 8010e04:	4b06      	ldr	r3, [pc, #24]	; (8010e20 <ams_precharge_charge_open_precharge_function+0x7c>)
 8010e06:	edd3 7a00 	vldr	s15, [r3]
 8010e0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010e0e:	4b04      	ldr	r3, [pc, #16]	; (8010e20 <ams_precharge_charge_open_precharge_function+0x7c>)
 8010e10:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_PRECHARGE_CHARGE_OPEN_PRECHARGE;
 8010e14:	231d      	movs	r3, #29
}
 8010e16:	4618      	mov	r0, r3
 8010e18:	46bd      	mov	sp, r7
 8010e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e1e:	4770      	bx	lr
 8010e20:	200017fc 	.word	0x200017fc
 8010e24:	2001b750 	.word	0x2001b750
 8010e28:	2001b6f8 	.word	0x2001b6f8

08010e2c <ams_precharge_charge_exit_function>:

ams_state_t ams_precharge_charge_exit_function() {
 8010e2c:	b480      	push	{r7}
 8010e2e:	af00      	add	r7, sp, #0
   timer_r2 += ams_parameters.Ts;
 8010e30:	4b08      	ldr	r3, [pc, #32]	; (8010e54 <ams_precharge_charge_exit_function+0x28>)
 8010e32:	ed93 7a02 	vldr	s14, [r3, #8]
 8010e36:	4b08      	ldr	r3, [pc, #32]	; (8010e58 <ams_precharge_charge_exit_function+0x2c>)
 8010e38:	edd3 7a00 	vldr	s15, [r3]
 8010e3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010e40:	4b05      	ldr	r3, [pc, #20]	; (8010e58 <ams_precharge_charge_exit_function+0x2c>)
 8010e42:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_PRECHARGE_CHARGE_EXIT;
 8010e46:	231e      	movs	r3, #30
}
 8010e48:	4618      	mov	r0, r3
 8010e4a:	46bd      	mov	sp, r7
 8010e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e50:	4770      	bx	lr
 8010e52:	bf00      	nop
 8010e54:	2001b750 	.word	0x2001b750
 8010e58:	200017fc 	.word	0x200017fc

08010e5c <ams_precharge_charge_0_function>:

ams_state_t ams_precharge_charge_0_function() {
 8010e5c:	b480      	push	{r7}
 8010e5e:	af00      	add	r7, sp, #0
   if(1) {
       timer_r2 = 0;
 8010e60:	4b04      	ldr	r3, [pc, #16]	; (8010e74 <ams_precharge_charge_0_function+0x18>)
 8010e62:	f04f 0200 	mov.w	r2, #0
 8010e66:	601a      	str	r2, [r3, #0]
       return STATE_AMS_PRECHARGE_CHARGE_WAKE_CHARGER;
 8010e68:	2320      	movs	r3, #32
   }

   timer_r2 += ams_parameters.Ts;
   return STATE_AMS_PRECHARGE_CHARGE_0;
}
 8010e6a:	4618      	mov	r0, r3
 8010e6c:	46bd      	mov	sp, r7
 8010e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e72:	4770      	bx	lr
 8010e74:	200017fc 	.word	0x200017fc

08010e78 <ams_precharge_charge_wake_charger_function>:

ams_state_t ams_precharge_charge_wake_charger_function() {
 8010e78:	b480      	push	{r7}
 8010e7a:	af00      	add	r7, sp, #0
   if((timer_r2 < 10)&&ams_inputs.charger_is_awake) {
 8010e7c:	4b1d      	ldr	r3, [pc, #116]	; (8010ef4 <ams_precharge_charge_wake_charger_function+0x7c>)
 8010e7e:	edd3 7a00 	vldr	s15, [r3]
 8010e82:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8010e86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010e8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e8e:	d50d      	bpl.n	8010eac <ams_precharge_charge_wake_charger_function+0x34>
 8010e90:	4b19      	ldr	r3, [pc, #100]	; (8010ef8 <ams_precharge_charge_wake_charger_function+0x80>)
 8010e92:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8010e96:	2b00      	cmp	r3, #0
 8010e98:	d008      	beq.n	8010eac <ams_precharge_charge_wake_charger_function+0x34>
       ams_outputs.close_air_minus=1;
 8010e9a:	4b18      	ldr	r3, [pc, #96]	; (8010efc <ams_precharge_charge_wake_charger_function+0x84>)
 8010e9c:	2201      	movs	r2, #1
 8010e9e:	709a      	strb	r2, [r3, #2]
       timer_r2 = 0;
 8010ea0:	4b14      	ldr	r3, [pc, #80]	; (8010ef4 <ams_precharge_charge_wake_charger_function+0x7c>)
 8010ea2:	f04f 0200 	mov.w	r2, #0
 8010ea6:	601a      	str	r2, [r3, #0]
       return STATE_AMS_PRECHARGE_CHARGE_CLOSE_AIR_MINUS;
 8010ea8:	2318      	movs	r3, #24
 8010eaa:	e01e      	b.n	8010eea <ams_precharge_charge_wake_charger_function+0x72>
   }

   if((timer_r2 > 10)) {
 8010eac:	4b11      	ldr	r3, [pc, #68]	; (8010ef4 <ams_precharge_charge_wake_charger_function+0x7c>)
 8010eae:	edd3 7a00 	vldr	s15, [r3]
 8010eb2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8010eb6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010eba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ebe:	dd08      	ble.n	8010ed2 <ams_precharge_charge_wake_charger_function+0x5a>
       ams_parameters.error=121;
 8010ec0:	4b0f      	ldr	r3, [pc, #60]	; (8010f00 <ams_precharge_charge_wake_charger_function+0x88>)
 8010ec2:	2279      	movs	r2, #121	; 0x79
 8010ec4:	701a      	strb	r2, [r3, #0]
       timer_r2 = 0;
 8010ec6:	4b0b      	ldr	r3, [pc, #44]	; (8010ef4 <ams_precharge_charge_wake_charger_function+0x7c>)
 8010ec8:	f04f 0200 	mov.w	r2, #0
 8010ecc:	601a      	str	r2, [r3, #0]
       return STATE_AMS_PRECHARGE_CHARGE_ERROR;
 8010ece:	231a      	movs	r3, #26
 8010ed0:	e00b      	b.n	8010eea <ams_precharge_charge_wake_charger_function+0x72>
   }

   timer_r2 += ams_parameters.Ts;
 8010ed2:	4b0b      	ldr	r3, [pc, #44]	; (8010f00 <ams_precharge_charge_wake_charger_function+0x88>)
 8010ed4:	ed93 7a02 	vldr	s14, [r3, #8]
 8010ed8:	4b06      	ldr	r3, [pc, #24]	; (8010ef4 <ams_precharge_charge_wake_charger_function+0x7c>)
 8010eda:	edd3 7a00 	vldr	s15, [r3]
 8010ede:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010ee2:	4b04      	ldr	r3, [pc, #16]	; (8010ef4 <ams_precharge_charge_wake_charger_function+0x7c>)
 8010ee4:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_PRECHARGE_CHARGE_WAKE_CHARGER;
 8010ee8:	2320      	movs	r3, #32
}
 8010eea:	4618      	mov	r0, r3
 8010eec:	46bd      	mov	sp, r7
 8010eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ef2:	4770      	bx	lr
 8010ef4:	200017fc 	.word	0x200017fc
 8010ef8:	2001b6f8 	.word	0x2001b6f8
 8010efc:	2001b75c 	.word	0x2001b75c
 8010f00:	2001b750 	.word	0x2001b750
 8010f04:	00000000 	.word	0x00000000

08010f08 <ams_precharge_charge_function>:

ams_state_t ams_precharge_charge_function() {
 8010f08:	b5b0      	push	{r4, r5, r7, lr}
 8010f0a:	af00      	add	r7, sp, #0
   if(timer_r1 < 0.001*ams_parameters.Ts) {
 8010f0c:	4b56      	ldr	r3, [pc, #344]	; (8011068 <ams_precharge_charge_function+0x160>)
 8010f0e:	681b      	ldr	r3, [r3, #0]
 8010f10:	4618      	mov	r0, r3
 8010f12:	f7ef fb0b 	bl	800052c <__aeabi_f2d>
 8010f16:	4604      	mov	r4, r0
 8010f18:	460d      	mov	r5, r1
 8010f1a:	4b54      	ldr	r3, [pc, #336]	; (801106c <ams_precharge_charge_function+0x164>)
 8010f1c:	689b      	ldr	r3, [r3, #8]
 8010f1e:	4618      	mov	r0, r3
 8010f20:	f7ef fb04 	bl	800052c <__aeabi_f2d>
 8010f24:	a34e      	add	r3, pc, #312	; (adr r3, 8011060 <ams_precharge_charge_function+0x158>)
 8010f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f2a:	f7ef fb57 	bl	80005dc <__aeabi_dmul>
 8010f2e:	4602      	mov	r2, r0
 8010f30:	460b      	mov	r3, r1
 8010f32:	4620      	mov	r0, r4
 8010f34:	4629      	mov	r1, r5
 8010f36:	f7ef fdc3 	bl	8000ac0 <__aeabi_dcmplt>
 8010f3a:	4603      	mov	r3, r0
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	d002      	beq.n	8010f46 <ams_precharge_charge_function+0x3e>
       state_r2 = STATE_AMS_PRECHARGE_CHARGE_0;
 8010f40:	4b4b      	ldr	r3, [pc, #300]	; (8011070 <ams_precharge_charge_function+0x168>)
 8010f42:	221f      	movs	r2, #31
 8010f44:	701a      	strb	r2, [r3, #0]
   }

   switch(state_r2) {
 8010f46:	4b4a      	ldr	r3, [pc, #296]	; (8011070 <ams_precharge_charge_function+0x168>)
 8010f48:	781b      	ldrb	r3, [r3, #0]
 8010f4a:	3b18      	subs	r3, #24
 8010f4c:	2b08      	cmp	r3, #8
 8010f4e:	d854      	bhi.n	8010ffa <ams_precharge_charge_function+0xf2>
 8010f50:	a201      	add	r2, pc, #4	; (adr r2, 8010f58 <ams_precharge_charge_function+0x50>)
 8010f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f56:	bf00      	nop
 8010f58:	08010f7d 	.word	0x08010f7d
 8010f5c:	08010f8b 	.word	0x08010f8b
 8010f60:	08010f99 	.word	0x08010f99
 8010f64:	08010fa7 	.word	0x08010fa7
 8010f68:	08010fb5 	.word	0x08010fb5
 8010f6c:	08010fc3 	.word	0x08010fc3
 8010f70:	08010fd1 	.word	0x08010fd1
 8010f74:	08010fdf 	.word	0x08010fdf
 8010f78:	08010fed 	.word	0x08010fed
       case STATE_AMS_PRECHARGE_CHARGE_CLOSE_AIR_MINUS:
           state_r2 = ams_precharge_charge_close_air_minus_function();
 8010f7c:	f7ff fdcc 	bl	8010b18 <ams_precharge_charge_close_air_minus_function>
 8010f80:	4603      	mov	r3, r0
 8010f82:	461a      	mov	r2, r3
 8010f84:	4b3a      	ldr	r3, [pc, #232]	; (8011070 <ams_precharge_charge_function+0x168>)
 8010f86:	701a      	strb	r2, [r3, #0]
           break;
 8010f88:	e03a      	b.n	8011000 <ams_precharge_charge_function+0xf8>
       case STATE_AMS_PRECHARGE_CHARGE_CLOSE_PRECHARGE:
           state_r2 = ams_precharge_charge_close_precharge_function();
 8010f8a:	f7ff fe0b 	bl	8010ba4 <ams_precharge_charge_close_precharge_function>
 8010f8e:	4603      	mov	r3, r0
 8010f90:	461a      	mov	r2, r3
 8010f92:	4b37      	ldr	r3, [pc, #220]	; (8011070 <ams_precharge_charge_function+0x168>)
 8010f94:	701a      	strb	r2, [r3, #0]
           break;
 8010f96:	e033      	b.n	8011000 <ams_precharge_charge_function+0xf8>
       case STATE_AMS_PRECHARGE_CHARGE_ERROR:
           state_r2 = ams_precharge_charge_error_function();
 8010f98:	f7ff fe46 	bl	8010c28 <ams_precharge_charge_error_function>
 8010f9c:	4603      	mov	r3, r0
 8010f9e:	461a      	mov	r2, r3
 8010fa0:	4b33      	ldr	r3, [pc, #204]	; (8011070 <ams_precharge_charge_function+0x168>)
 8010fa2:	701a      	strb	r2, [r3, #0]
           break;
 8010fa4:	e02c      	b.n	8011000 <ams_precharge_charge_function+0xf8>
       case STATE_AMS_PRECHARGE_CHARGE_WAIT:
           state_r2 = ams_precharge_charge_wait_function();
 8010fa6:	f7ff fe57 	bl	8010c58 <ams_precharge_charge_wait_function>
 8010faa:	4603      	mov	r3, r0
 8010fac:	461a      	mov	r2, r3
 8010fae:	4b30      	ldr	r3, [pc, #192]	; (8011070 <ams_precharge_charge_function+0x168>)
 8010fb0:	701a      	strb	r2, [r3, #0]
           break;
 8010fb2:	e025      	b.n	8011000 <ams_precharge_charge_function+0xf8>
       case STATE_AMS_PRECHARGE_CHARGE_CLOSE_AIR_PLUS:
           state_r2 = ams_precharge_charge_close_air_plus_function();
 8010fb4:	f7ff feb0 	bl	8010d18 <ams_precharge_charge_close_air_plus_function>
 8010fb8:	4603      	mov	r3, r0
 8010fba:	461a      	mov	r2, r3
 8010fbc:	4b2c      	ldr	r3, [pc, #176]	; (8011070 <ams_precharge_charge_function+0x168>)
 8010fbe:	701a      	strb	r2, [r3, #0]
           break;
 8010fc0:	e01e      	b.n	8011000 <ams_precharge_charge_function+0xf8>
       case STATE_AMS_PRECHARGE_CHARGE_OPEN_PRECHARGE:
           state_r2 = ams_precharge_charge_open_precharge_function();
 8010fc2:	f7ff feef 	bl	8010da4 <ams_precharge_charge_open_precharge_function>
 8010fc6:	4603      	mov	r3, r0
 8010fc8:	461a      	mov	r2, r3
 8010fca:	4b29      	ldr	r3, [pc, #164]	; (8011070 <ams_precharge_charge_function+0x168>)
 8010fcc:	701a      	strb	r2, [r3, #0]
           break;
 8010fce:	e017      	b.n	8011000 <ams_precharge_charge_function+0xf8>
       case STATE_AMS_PRECHARGE_CHARGE_EXIT:
           state_r2 = ams_precharge_charge_exit_function();
 8010fd0:	f7ff ff2c 	bl	8010e2c <ams_precharge_charge_exit_function>
 8010fd4:	4603      	mov	r3, r0
 8010fd6:	461a      	mov	r2, r3
 8010fd8:	4b25      	ldr	r3, [pc, #148]	; (8011070 <ams_precharge_charge_function+0x168>)
 8010fda:	701a      	strb	r2, [r3, #0]
           break;
 8010fdc:	e010      	b.n	8011000 <ams_precharge_charge_function+0xf8>
       case STATE_AMS_PRECHARGE_CHARGE_0:
           state_r2 = ams_precharge_charge_0_function();
 8010fde:	f7ff ff3d 	bl	8010e5c <ams_precharge_charge_0_function>
 8010fe2:	4603      	mov	r3, r0
 8010fe4:	461a      	mov	r2, r3
 8010fe6:	4b22      	ldr	r3, [pc, #136]	; (8011070 <ams_precharge_charge_function+0x168>)
 8010fe8:	701a      	strb	r2, [r3, #0]
           break;
 8010fea:	e009      	b.n	8011000 <ams_precharge_charge_function+0xf8>
       case STATE_AMS_PRECHARGE_CHARGE_WAKE_CHARGER:
           state_r2 = ams_precharge_charge_wake_charger_function();
 8010fec:	f7ff ff44 	bl	8010e78 <ams_precharge_charge_wake_charger_function>
 8010ff0:	4603      	mov	r3, r0
 8010ff2:	461a      	mov	r2, r3
 8010ff4:	4b1e      	ldr	r3, [pc, #120]	; (8011070 <ams_precharge_charge_function+0x168>)
 8010ff6:	701a      	strb	r2, [r3, #0]
           break;
 8010ff8:	e002      	b.n	8011000 <ams_precharge_charge_function+0xf8>
       default:
           ams_error();
 8010ffa:	f7ff f8a0 	bl	801013e <ams_error>
           break;
 8010ffe:	bf00      	nop
   }

   if(ams_parameters.precharge_charge_complete) {
 8011000:	4b1a      	ldr	r3, [pc, #104]	; (801106c <ams_precharge_charge_function+0x164>)
 8011002:	785b      	ldrb	r3, [r3, #1]
 8011004:	2b00      	cmp	r3, #0
 8011006:	d008      	beq.n	801101a <ams_precharge_charge_function+0x112>
       ams_parameters.precharge_charge_complete=0;
 8011008:	4b18      	ldr	r3, [pc, #96]	; (801106c <ams_precharge_charge_function+0x164>)
 801100a:	2200      	movs	r2, #0
 801100c:	705a      	strb	r2, [r3, #1]
       timer_r1 = 0;
 801100e:	4b16      	ldr	r3, [pc, #88]	; (8011068 <ams_precharge_charge_function+0x160>)
 8011010:	f04f 0200 	mov.w	r2, #0
 8011014:	601a      	str	r2, [r3, #0]
       return STATE_AMS_CHARGE;
 8011016:	2321      	movs	r3, #33	; 0x21
 8011018:	e01e      	b.n	8011058 <ams_precharge_charge_function+0x150>
   }

   if(ams_parameters.error||ams_inputs.ams_error||ams_inputs.imd_error) {
 801101a:	4b14      	ldr	r3, [pc, #80]	; (801106c <ams_precharge_charge_function+0x164>)
 801101c:	781b      	ldrb	r3, [r3, #0]
 801101e:	2b00      	cmp	r3, #0
 8011020:	d108      	bne.n	8011034 <ams_precharge_charge_function+0x12c>
 8011022:	4b14      	ldr	r3, [pc, #80]	; (8011074 <ams_precharge_charge_function+0x16c>)
 8011024:	781b      	ldrb	r3, [r3, #0]
 8011026:	2b00      	cmp	r3, #0
 8011028:	d104      	bne.n	8011034 <ams_precharge_charge_function+0x12c>
 801102a:	4b12      	ldr	r3, [pc, #72]	; (8011074 <ams_precharge_charge_function+0x16c>)
 801102c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011030:	2b00      	cmp	r3, #0
 8011032:	d005      	beq.n	8011040 <ams_precharge_charge_function+0x138>
       timer_r1 = 0;
 8011034:	4b0c      	ldr	r3, [pc, #48]	; (8011068 <ams_precharge_charge_function+0x160>)
 8011036:	f04f 0200 	mov.w	r2, #0
 801103a:	601a      	str	r2, [r3, #0]
       return STATE_AMS_ERROR;
 801103c:	2312      	movs	r3, #18
 801103e:	e00b      	b.n	8011058 <ams_precharge_charge_function+0x150>
   }


   timer_r1 += ams_parameters.Ts;
 8011040:	4b0a      	ldr	r3, [pc, #40]	; (801106c <ams_precharge_charge_function+0x164>)
 8011042:	ed93 7a02 	vldr	s14, [r3, #8]
 8011046:	4b08      	ldr	r3, [pc, #32]	; (8011068 <ams_precharge_charge_function+0x160>)
 8011048:	edd3 7a00 	vldr	s15, [r3]
 801104c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011050:	4b05      	ldr	r3, [pc, #20]	; (8011068 <ams_precharge_charge_function+0x160>)
 8011052:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_PRECHARGE_CHARGE;
 8011056:	2317      	movs	r3, #23
}
 8011058:	4618      	mov	r0, r3
 801105a:	bdb0      	pop	{r4, r5, r7, pc}
 801105c:	f3af 8000 	nop.w
 8011060:	d2f1a9fc 	.word	0xd2f1a9fc
 8011064:	3f50624d 	.word	0x3f50624d
 8011068:	200017f8 	.word	0x200017f8
 801106c:	2001b750 	.word	0x2001b750
 8011070:	200017f1 	.word	0x200017f1
 8011074:	2001b6f8 	.word	0x2001b6f8

08011078 <ams_charge_0_function>:

ams_state_t ams_charge_0_function() {
 8011078:	b480      	push	{r7}
 801107a:	af00      	add	r7, sp, #0
   if(1) {
       timer_r2 = 0;
 801107c:	4b04      	ldr	r3, [pc, #16]	; (8011090 <ams_charge_0_function+0x18>)
 801107e:	f04f 0200 	mov.w	r2, #0
 8011082:	601a      	str	r2, [r3, #0]
       return STATE_AMS_CHARGE_CHARGE;
 8011084:	2323      	movs	r3, #35	; 0x23
   }

   timer_r2 += ams_parameters.Ts;
   return STATE_AMS_CHARGE_0;
}
 8011086:	4618      	mov	r0, r3
 8011088:	46bd      	mov	sp, r7
 801108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801108e:	4770      	bx	lr
 8011090:	200017fc 	.word	0x200017fc
 8011094:	00000000 	.word	0x00000000

08011098 <ams_charge_charge_function>:

ams_state_t ams_charge_charge_function() {
 8011098:	b580      	push	{r7, lr}
 801109a:	af00      	add	r7, sp, #0
   if((ams_inputs.maximum_cell_voltage>4.15)||!ams_inputs.charge) {
 801109c:	4b16      	ldr	r3, [pc, #88]	; (80110f8 <ams_charge_charge_function+0x60>)
 801109e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80110a2:	a313      	add	r3, pc, #76	; (adr r3, 80110f0 <ams_charge_charge_function+0x58>)
 80110a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110a8:	f7ef fd28 	bl	8000afc <__aeabi_dcmpgt>
 80110ac:	4603      	mov	r3, r0
 80110ae:	2b00      	cmp	r3, #0
 80110b0:	d104      	bne.n	80110bc <ams_charge_charge_function+0x24>
 80110b2:	4b11      	ldr	r3, [pc, #68]	; (80110f8 <ams_charge_charge_function+0x60>)
 80110b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	d108      	bne.n	80110ce <ams_charge_charge_function+0x36>
       ams_outputs.enable_charger=0;
 80110bc:	4b0f      	ldr	r3, [pc, #60]	; (80110fc <ams_charge_charge_function+0x64>)
 80110be:	2200      	movs	r2, #0
 80110c0:	701a      	strb	r2, [r3, #0]
       timer_r2 = 0;
 80110c2:	4b0f      	ldr	r3, [pc, #60]	; (8011100 <ams_charge_charge_function+0x68>)
 80110c4:	f04f 0200 	mov.w	r2, #0
 80110c8:	601a      	str	r2, [r3, #0]
       return STATE_AMS_CHARGE_END_CHARGE;
 80110ca:	2324      	movs	r3, #36	; 0x24
 80110cc:	e00b      	b.n	80110e6 <ams_charge_charge_function+0x4e>
   }

   timer_r2 += ams_parameters.Ts;
 80110ce:	4b0d      	ldr	r3, [pc, #52]	; (8011104 <ams_charge_charge_function+0x6c>)
 80110d0:	ed93 7a02 	vldr	s14, [r3, #8]
 80110d4:	4b0a      	ldr	r3, [pc, #40]	; (8011100 <ams_charge_charge_function+0x68>)
 80110d6:	edd3 7a00 	vldr	s15, [r3]
 80110da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80110de:	4b08      	ldr	r3, [pc, #32]	; (8011100 <ams_charge_charge_function+0x68>)
 80110e0:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_CHARGE_CHARGE;
 80110e4:	2323      	movs	r3, #35	; 0x23
}
 80110e6:	4618      	mov	r0, r3
 80110e8:	bd80      	pop	{r7, pc}
 80110ea:	bf00      	nop
 80110ec:	f3af 8000 	nop.w
 80110f0:	9999999a 	.word	0x9999999a
 80110f4:	40109999 	.word	0x40109999
 80110f8:	2001b6f8 	.word	0x2001b6f8
 80110fc:	2001b75c 	.word	0x2001b75c
 8011100:	200017fc 	.word	0x200017fc
 8011104:	2001b750 	.word	0x2001b750

08011108 <ams_charge_end_charge_function>:

ams_state_t ams_charge_end_charge_function() {
 8011108:	b580      	push	{r7, lr}
 801110a:	af00      	add	r7, sp, #0
   if((timer_r2 < 7)&&(fabsf(ams_inputs.accumulator_current)<0.001)) {
 801110c:	4b30      	ldr	r3, [pc, #192]	; (80111d0 <ams_charge_end_charge_function+0xc8>)
 801110e:	edd3 7a00 	vldr	s15, [r3]
 8011112:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 8011116:	eef4 7ac7 	vcmpe.f32	s15, s14
 801111a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801111e:	d528      	bpl.n	8011172 <ams_charge_end_charge_function+0x6a>
 8011120:	4b2c      	ldr	r3, [pc, #176]	; (80111d4 <ams_charge_end_charge_function+0xcc>)
 8011122:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8011126:	4610      	mov	r0, r2
 8011128:	4619      	mov	r1, r3
 801112a:	f7ef fd4f 	bl	8000bcc <__aeabi_d2f>
 801112e:	ee07 0a90 	vmov	s15, r0
 8011132:	eef0 7ae7 	vabs.f32	s15, s15
 8011136:	ee17 0a90 	vmov	r0, s15
 801113a:	f7ef f9f7 	bl	800052c <__aeabi_f2d>
 801113e:	a322      	add	r3, pc, #136	; (adr r3, 80111c8 <ams_charge_end_charge_function+0xc0>)
 8011140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011144:	f7ef fcbc 	bl	8000ac0 <__aeabi_dcmplt>
 8011148:	4603      	mov	r3, r0
 801114a:	2b00      	cmp	r3, #0
 801114c:	d011      	beq.n	8011172 <ams_charge_end_charge_function+0x6a>
       ams_outputs.close_air_plus=0;
 801114e:	4b22      	ldr	r3, [pc, #136]	; (80111d8 <ams_charge_end_charge_function+0xd0>)
 8011150:	2200      	movs	r2, #0
 8011152:	70da      	strb	r2, [r3, #3]
       ams_outputs.close_air_minus=0;
 8011154:	4b20      	ldr	r3, [pc, #128]	; (80111d8 <ams_charge_end_charge_function+0xd0>)
 8011156:	2200      	movs	r2, #0
 8011158:	709a      	strb	r2, [r3, #2]
       ams_outputs.close_precharge=0;
 801115a:	4b1f      	ldr	r3, [pc, #124]	; (80111d8 <ams_charge_end_charge_function+0xd0>)
 801115c:	2200      	movs	r2, #0
 801115e:	705a      	strb	r2, [r3, #1]
       ams_parameters.charge_complete=1;
 8011160:	4b1e      	ldr	r3, [pc, #120]	; (80111dc <ams_charge_end_charge_function+0xd4>)
 8011162:	2201      	movs	r2, #1
 8011164:	70da      	strb	r2, [r3, #3]
       timer_r2 = 0;
 8011166:	4b1a      	ldr	r3, [pc, #104]	; (80111d0 <ams_charge_end_charge_function+0xc8>)
 8011168:	f04f 0200 	mov.w	r2, #0
 801116c:	601a      	str	r2, [r3, #0]
       return STATE_AMS_CHARGE_EXIT;
 801116e:	2325      	movs	r3, #37	; 0x25
 8011170:	e027      	b.n	80111c2 <ams_charge_end_charge_function+0xba>
   }

   if((timer_r2 > 7)) {
 8011172:	4b17      	ldr	r3, [pc, #92]	; (80111d0 <ams_charge_end_charge_function+0xc8>)
 8011174:	edd3 7a00 	vldr	s15, [r3]
 8011178:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 801117c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011184:	dd11      	ble.n	80111aa <ams_charge_end_charge_function+0xa2>
       ams_outputs.close_air_plus=0;
 8011186:	4b14      	ldr	r3, [pc, #80]	; (80111d8 <ams_charge_end_charge_function+0xd0>)
 8011188:	2200      	movs	r2, #0
 801118a:	70da      	strb	r2, [r3, #3]
       ams_outputs.close_air_minus=0;
 801118c:	4b12      	ldr	r3, [pc, #72]	; (80111d8 <ams_charge_end_charge_function+0xd0>)
 801118e:	2200      	movs	r2, #0
 8011190:	709a      	strb	r2, [r3, #2]
       ams_outputs.close_precharge=0;
 8011192:	4b11      	ldr	r3, [pc, #68]	; (80111d8 <ams_charge_end_charge_function+0xd0>)
 8011194:	2200      	movs	r2, #0
 8011196:	705a      	strb	r2, [r3, #1]
       ams_parameters.error=141;
 8011198:	4b10      	ldr	r3, [pc, #64]	; (80111dc <ams_charge_end_charge_function+0xd4>)
 801119a:	228d      	movs	r2, #141	; 0x8d
 801119c:	701a      	strb	r2, [r3, #0]
       timer_r2 = 0;
 801119e:	4b0c      	ldr	r3, [pc, #48]	; (80111d0 <ams_charge_end_charge_function+0xc8>)
 80111a0:	f04f 0200 	mov.w	r2, #0
 80111a4:	601a      	str	r2, [r3, #0]
       return STATE_AMS_CHARGE_FORCE_QUIT;
 80111a6:	2326      	movs	r3, #38	; 0x26
 80111a8:	e00b      	b.n	80111c2 <ams_charge_end_charge_function+0xba>
   }

   timer_r2 += ams_parameters.Ts;
 80111aa:	4b0c      	ldr	r3, [pc, #48]	; (80111dc <ams_charge_end_charge_function+0xd4>)
 80111ac:	ed93 7a02 	vldr	s14, [r3, #8]
 80111b0:	4b07      	ldr	r3, [pc, #28]	; (80111d0 <ams_charge_end_charge_function+0xc8>)
 80111b2:	edd3 7a00 	vldr	s15, [r3]
 80111b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80111ba:	4b05      	ldr	r3, [pc, #20]	; (80111d0 <ams_charge_end_charge_function+0xc8>)
 80111bc:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_CHARGE_END_CHARGE;
 80111c0:	2324      	movs	r3, #36	; 0x24
}
 80111c2:	4618      	mov	r0, r3
 80111c4:	bd80      	pop	{r7, pc}
 80111c6:	bf00      	nop
 80111c8:	d2f1a9fc 	.word	0xd2f1a9fc
 80111cc:	3f50624d 	.word	0x3f50624d
 80111d0:	200017fc 	.word	0x200017fc
 80111d4:	2001b6f8 	.word	0x2001b6f8
 80111d8:	2001b75c 	.word	0x2001b75c
 80111dc:	2001b750 	.word	0x2001b750

080111e0 <ams_charge_exit_function>:

ams_state_t ams_charge_exit_function() {
 80111e0:	b480      	push	{r7}
 80111e2:	af00      	add	r7, sp, #0
   timer_r2 += ams_parameters.Ts;
 80111e4:	4b08      	ldr	r3, [pc, #32]	; (8011208 <ams_charge_exit_function+0x28>)
 80111e6:	ed93 7a02 	vldr	s14, [r3, #8]
 80111ea:	4b08      	ldr	r3, [pc, #32]	; (801120c <ams_charge_exit_function+0x2c>)
 80111ec:	edd3 7a00 	vldr	s15, [r3]
 80111f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80111f4:	4b05      	ldr	r3, [pc, #20]	; (801120c <ams_charge_exit_function+0x2c>)
 80111f6:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_CHARGE_EXIT;
 80111fa:	2325      	movs	r3, #37	; 0x25
}
 80111fc:	4618      	mov	r0, r3
 80111fe:	46bd      	mov	sp, r7
 8011200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011204:	4770      	bx	lr
 8011206:	bf00      	nop
 8011208:	2001b750 	.word	0x2001b750
 801120c:	200017fc 	.word	0x200017fc

08011210 <ams_charge_force_quit_function>:

ams_state_t ams_charge_force_quit_function() {
 8011210:	b480      	push	{r7}
 8011212:	af00      	add	r7, sp, #0
   timer_r2 += ams_parameters.Ts;
 8011214:	4b08      	ldr	r3, [pc, #32]	; (8011238 <ams_charge_force_quit_function+0x28>)
 8011216:	ed93 7a02 	vldr	s14, [r3, #8]
 801121a:	4b08      	ldr	r3, [pc, #32]	; (801123c <ams_charge_force_quit_function+0x2c>)
 801121c:	edd3 7a00 	vldr	s15, [r3]
 8011220:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011224:	4b05      	ldr	r3, [pc, #20]	; (801123c <ams_charge_force_quit_function+0x2c>)
 8011226:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_CHARGE_FORCE_QUIT;
 801122a:	2326      	movs	r3, #38	; 0x26
}
 801122c:	4618      	mov	r0, r3
 801122e:	46bd      	mov	sp, r7
 8011230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011234:	4770      	bx	lr
 8011236:	bf00      	nop
 8011238:	2001b750 	.word	0x2001b750
 801123c:	200017fc 	.word	0x200017fc

08011240 <ams_charge_function>:

ams_state_t ams_charge_function() {
 8011240:	b5b0      	push	{r4, r5, r7, lr}
 8011242:	af00      	add	r7, sp, #0
   if(timer_r1 < 0.001*ams_parameters.Ts) {
 8011244:	4b46      	ldr	r3, [pc, #280]	; (8011360 <ams_charge_function+0x120>)
 8011246:	681b      	ldr	r3, [r3, #0]
 8011248:	4618      	mov	r0, r3
 801124a:	f7ef f96f 	bl	800052c <__aeabi_f2d>
 801124e:	4604      	mov	r4, r0
 8011250:	460d      	mov	r5, r1
 8011252:	4b44      	ldr	r3, [pc, #272]	; (8011364 <ams_charge_function+0x124>)
 8011254:	689b      	ldr	r3, [r3, #8]
 8011256:	4618      	mov	r0, r3
 8011258:	f7ef f968 	bl	800052c <__aeabi_f2d>
 801125c:	a33e      	add	r3, pc, #248	; (adr r3, 8011358 <ams_charge_function+0x118>)
 801125e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011262:	f7ef f9bb 	bl	80005dc <__aeabi_dmul>
 8011266:	4602      	mov	r2, r0
 8011268:	460b      	mov	r3, r1
 801126a:	4620      	mov	r0, r4
 801126c:	4629      	mov	r1, r5
 801126e:	f7ef fc27 	bl	8000ac0 <__aeabi_dcmplt>
 8011272:	4603      	mov	r3, r0
 8011274:	2b00      	cmp	r3, #0
 8011276:	d002      	beq.n	801127e <ams_charge_function+0x3e>
       state_r2 = STATE_AMS_CHARGE_0;
 8011278:	4b3b      	ldr	r3, [pc, #236]	; (8011368 <ams_charge_function+0x128>)
 801127a:	2222      	movs	r2, #34	; 0x22
 801127c:	701a      	strb	r2, [r3, #0]
   }

   switch(state_r2) {
 801127e:	4b3a      	ldr	r3, [pc, #232]	; (8011368 <ams_charge_function+0x128>)
 8011280:	781b      	ldrb	r3, [r3, #0]
 8011282:	3b22      	subs	r3, #34	; 0x22
 8011284:	2b04      	cmp	r3, #4
 8011286:	d830      	bhi.n	80112ea <ams_charge_function+0xaa>
 8011288:	a201      	add	r2, pc, #4	; (adr r2, 8011290 <ams_charge_function+0x50>)
 801128a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801128e:	bf00      	nop
 8011290:	080112a5 	.word	0x080112a5
 8011294:	080112b3 	.word	0x080112b3
 8011298:	080112c1 	.word	0x080112c1
 801129c:	080112cf 	.word	0x080112cf
 80112a0:	080112dd 	.word	0x080112dd
       case STATE_AMS_CHARGE_0:
           state_r2 = ams_charge_0_function();
 80112a4:	f7ff fee8 	bl	8011078 <ams_charge_0_function>
 80112a8:	4603      	mov	r3, r0
 80112aa:	461a      	mov	r2, r3
 80112ac:	4b2e      	ldr	r3, [pc, #184]	; (8011368 <ams_charge_function+0x128>)
 80112ae:	701a      	strb	r2, [r3, #0]
           break;
 80112b0:	e01e      	b.n	80112f0 <ams_charge_function+0xb0>
       case STATE_AMS_CHARGE_CHARGE:
           state_r2 = ams_charge_charge_function();
 80112b2:	f7ff fef1 	bl	8011098 <ams_charge_charge_function>
 80112b6:	4603      	mov	r3, r0
 80112b8:	461a      	mov	r2, r3
 80112ba:	4b2b      	ldr	r3, [pc, #172]	; (8011368 <ams_charge_function+0x128>)
 80112bc:	701a      	strb	r2, [r3, #0]
           break;
 80112be:	e017      	b.n	80112f0 <ams_charge_function+0xb0>
       case STATE_AMS_CHARGE_END_CHARGE:
           state_r2 = ams_charge_end_charge_function();
 80112c0:	f7ff ff22 	bl	8011108 <ams_charge_end_charge_function>
 80112c4:	4603      	mov	r3, r0
 80112c6:	461a      	mov	r2, r3
 80112c8:	4b27      	ldr	r3, [pc, #156]	; (8011368 <ams_charge_function+0x128>)
 80112ca:	701a      	strb	r2, [r3, #0]
           break;
 80112cc:	e010      	b.n	80112f0 <ams_charge_function+0xb0>
       case STATE_AMS_CHARGE_EXIT:
           state_r2 = ams_charge_exit_function();
 80112ce:	f7ff ff87 	bl	80111e0 <ams_charge_exit_function>
 80112d2:	4603      	mov	r3, r0
 80112d4:	461a      	mov	r2, r3
 80112d6:	4b24      	ldr	r3, [pc, #144]	; (8011368 <ams_charge_function+0x128>)
 80112d8:	701a      	strb	r2, [r3, #0]
           break;
 80112da:	e009      	b.n	80112f0 <ams_charge_function+0xb0>
       case STATE_AMS_CHARGE_FORCE_QUIT:
           state_r2 = ams_charge_force_quit_function();
 80112dc:	f7ff ff98 	bl	8011210 <ams_charge_force_quit_function>
 80112e0:	4603      	mov	r3, r0
 80112e2:	461a      	mov	r2, r3
 80112e4:	4b20      	ldr	r3, [pc, #128]	; (8011368 <ams_charge_function+0x128>)
 80112e6:	701a      	strb	r2, [r3, #0]
           break;
 80112e8:	e002      	b.n	80112f0 <ams_charge_function+0xb0>
       default:
           ams_error();
 80112ea:	f7fe ff28 	bl	801013e <ams_error>
           break;
 80112ee:	bf00      	nop
   }

   if(ams_inputs.ams_error||ams_inputs.imd_error||ams_inputs.charge_error) {
 80112f0:	4b1e      	ldr	r3, [pc, #120]	; (801136c <ams_charge_function+0x12c>)
 80112f2:	781b      	ldrb	r3, [r3, #0]
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	d109      	bne.n	801130c <ams_charge_function+0xcc>
 80112f8:	4b1c      	ldr	r3, [pc, #112]	; (801136c <ams_charge_function+0x12c>)
 80112fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80112fe:	2b00      	cmp	r3, #0
 8011300:	d104      	bne.n	801130c <ams_charge_function+0xcc>
 8011302:	4b1a      	ldr	r3, [pc, #104]	; (801136c <ams_charge_function+0x12c>)
 8011304:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011308:	2b00      	cmp	r3, #0
 801130a:	d005      	beq.n	8011318 <ams_charge_function+0xd8>
       timer_r1 = 0;
 801130c:	4b14      	ldr	r3, [pc, #80]	; (8011360 <ams_charge_function+0x120>)
 801130e:	f04f 0200 	mov.w	r2, #0
 8011312:	601a      	str	r2, [r3, #0]
       return STATE_AMS_ERROR;
 8011314:	2312      	movs	r3, #18
 8011316:	e01b      	b.n	8011350 <ams_charge_function+0x110>
   }

   if(ams_parameters.charge_complete) {
 8011318:	4b12      	ldr	r3, [pc, #72]	; (8011364 <ams_charge_function+0x124>)
 801131a:	78db      	ldrb	r3, [r3, #3]
 801131c:	2b00      	cmp	r3, #0
 801131e:	d00b      	beq.n	8011338 <ams_charge_function+0xf8>
       ams_parameters.charge_complete=0;
 8011320:	4b10      	ldr	r3, [pc, #64]	; (8011364 <ams_charge_function+0x124>)
 8011322:	2200      	movs	r2, #0
 8011324:	70da      	strb	r2, [r3, #3]
       ams_outputs.enable_charger=0;
 8011326:	4b12      	ldr	r3, [pc, #72]	; (8011370 <ams_charge_function+0x130>)
 8011328:	2200      	movs	r2, #0
 801132a:	701a      	strb	r2, [r3, #0]
       timer_r1 = 0;
 801132c:	4b0c      	ldr	r3, [pc, #48]	; (8011360 <ams_charge_function+0x120>)
 801132e:	f04f 0200 	mov.w	r2, #0
 8011332:	601a      	str	r2, [r3, #0]
       return STATE_AMS_IDLE;
 8011334:	2327      	movs	r3, #39	; 0x27
 8011336:	e00b      	b.n	8011350 <ams_charge_function+0x110>
   }


   timer_r1 += ams_parameters.Ts;
 8011338:	4b0a      	ldr	r3, [pc, #40]	; (8011364 <ams_charge_function+0x124>)
 801133a:	ed93 7a02 	vldr	s14, [r3, #8]
 801133e:	4b08      	ldr	r3, [pc, #32]	; (8011360 <ams_charge_function+0x120>)
 8011340:	edd3 7a00 	vldr	s15, [r3]
 8011344:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011348:	4b05      	ldr	r3, [pc, #20]	; (8011360 <ams_charge_function+0x120>)
 801134a:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_CHARGE;
 801134e:	2321      	movs	r3, #33	; 0x21
}
 8011350:	4618      	mov	r0, r3
 8011352:	bdb0      	pop	{r4, r5, r7, pc}
 8011354:	f3af 8000 	nop.w
 8011358:	d2f1a9fc 	.word	0xd2f1a9fc
 801135c:	3f50624d 	.word	0x3f50624d
 8011360:	200017f8 	.word	0x200017f8
 8011364:	2001b750 	.word	0x2001b750
 8011368:	200017f1 	.word	0x200017f1
 801136c:	2001b6f8 	.word	0x2001b6f8
 8011370:	2001b75c 	.word	0x2001b75c
 8011374:	00000000 	.word	0x00000000

08011378 <ams_idle_function>:

ams_state_t ams_idle_function() {
 8011378:	b580      	push	{r7, lr}
 801137a:	af00      	add	r7, sp, #0
   if(ams_inputs.SC&&ams_inputs.drive) {
 801137c:	4b28      	ldr	r3, [pc, #160]	; (8011420 <ams_idle_function+0xa8>)
 801137e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8011382:	2b00      	cmp	r3, #0
 8011384:	d00a      	beq.n	801139c <ams_idle_function+0x24>
 8011386:	4b26      	ldr	r3, [pc, #152]	; (8011420 <ams_idle_function+0xa8>)
 8011388:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801138c:	2b00      	cmp	r3, #0
 801138e:	d005      	beq.n	801139c <ams_idle_function+0x24>
       timer_r1 = 0;
 8011390:	4b24      	ldr	r3, [pc, #144]	; (8011424 <ams_idle_function+0xac>)
 8011392:	f04f 0200 	mov.w	r2, #0
 8011396:	601a      	str	r2, [r3, #0]
       return STATE_AMS_PRECHARGE_DRIVE;
 8011398:	2302      	movs	r3, #2
 801139a:	e039      	b.n	8011410 <ams_idle_function+0x98>
   }

   if(ams_inputs.SC&&ams_inputs.charge) {
 801139c:	4b20      	ldr	r3, [pc, #128]	; (8011420 <ams_idle_function+0xa8>)
 801139e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	d00d      	beq.n	80113c2 <ams_idle_function+0x4a>
 80113a6:	4b1e      	ldr	r3, [pc, #120]	; (8011420 <ams_idle_function+0xa8>)
 80113a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	d008      	beq.n	80113c2 <ams_idle_function+0x4a>
       ams_outputs.enable_charger=1;
 80113b0:	4b1d      	ldr	r3, [pc, #116]	; (8011428 <ams_idle_function+0xb0>)
 80113b2:	2201      	movs	r2, #1
 80113b4:	701a      	strb	r2, [r3, #0]
       timer_r1 = 0;
 80113b6:	4b1b      	ldr	r3, [pc, #108]	; (8011424 <ams_idle_function+0xac>)
 80113b8:	f04f 0200 	mov.w	r2, #0
 80113bc:	601a      	str	r2, [r3, #0]
       return STATE_AMS_PRECHARGE_CHARGE;
 80113be:	2317      	movs	r3, #23
 80113c0:	e026      	b.n	8011410 <ams_idle_function+0x98>
   }

   if(!ams_inputs.SC&&ams_inputs.balance&&(ams_inputs.cell_voltages_variance>0.01)) {
 80113c2:	4b17      	ldr	r3, [pc, #92]	; (8011420 <ams_idle_function+0xa8>)
 80113c4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80113c8:	2b00      	cmp	r3, #0
 80113ca:	d115      	bne.n	80113f8 <ams_idle_function+0x80>
 80113cc:	4b14      	ldr	r3, [pc, #80]	; (8011420 <ams_idle_function+0xa8>)
 80113ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80113d2:	2b00      	cmp	r3, #0
 80113d4:	d010      	beq.n	80113f8 <ams_idle_function+0x80>
 80113d6:	4b12      	ldr	r3, [pc, #72]	; (8011420 <ams_idle_function+0xa8>)
 80113d8:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80113dc:	a30e      	add	r3, pc, #56	; (adr r3, 8011418 <ams_idle_function+0xa0>)
 80113de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113e2:	f7ef fb8b 	bl	8000afc <__aeabi_dcmpgt>
 80113e6:	4603      	mov	r3, r0
 80113e8:	2b00      	cmp	r3, #0
 80113ea:	d005      	beq.n	80113f8 <ams_idle_function+0x80>
       timer_r1 = 0;
 80113ec:	4b0d      	ldr	r3, [pc, #52]	; (8011424 <ams_idle_function+0xac>)
 80113ee:	f04f 0200 	mov.w	r2, #0
 80113f2:	601a      	str	r2, [r3, #0]
       return STATE_AMS_BALANCE;
 80113f4:	2328      	movs	r3, #40	; 0x28
 80113f6:	e00b      	b.n	8011410 <ams_idle_function+0x98>
   }

   timer_r1 += ams_parameters.Ts;
 80113f8:	4b0c      	ldr	r3, [pc, #48]	; (801142c <ams_idle_function+0xb4>)
 80113fa:	ed93 7a02 	vldr	s14, [r3, #8]
 80113fe:	4b09      	ldr	r3, [pc, #36]	; (8011424 <ams_idle_function+0xac>)
 8011400:	edd3 7a00 	vldr	s15, [r3]
 8011404:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011408:	4b06      	ldr	r3, [pc, #24]	; (8011424 <ams_idle_function+0xac>)
 801140a:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_IDLE;
 801140e:	2327      	movs	r3, #39	; 0x27
}
 8011410:	4618      	mov	r0, r3
 8011412:	bd80      	pop	{r7, pc}
 8011414:	f3af 8000 	nop.w
 8011418:	47ae147b 	.word	0x47ae147b
 801141c:	3f847ae1 	.word	0x3f847ae1
 8011420:	2001b6f8 	.word	0x2001b6f8
 8011424:	200017f8 	.word	0x200017f8
 8011428:	2001b75c 	.word	0x2001b75c
 801142c:	2001b750 	.word	0x2001b750

08011430 <ams_balance_0_function>:

ams_state_t ams_balance_0_function() {
 8011430:	b480      	push	{r7}
 8011432:	af00      	add	r7, sp, #0
   if(1) {
       timer_r2 = 0;
 8011434:	4b04      	ldr	r3, [pc, #16]	; (8011448 <ams_balance_0_function+0x18>)
 8011436:	f04f 0200 	mov.w	r2, #0
 801143a:	601a      	str	r2, [r3, #0]
       return STATE_AMS_BALANCE_BALANCE;
 801143c:	232a      	movs	r3, #42	; 0x2a
   }

   timer_r2 += ams_parameters.Ts;
   return STATE_AMS_BALANCE_0;
}
 801143e:	4618      	mov	r0, r3
 8011440:	46bd      	mov	sp, r7
 8011442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011446:	4770      	bx	lr
 8011448:	200017fc 	.word	0x200017fc

0801144c <ams_balance_balance_function>:

ams_state_t ams_balance_balance_function() {
 801144c:	b580      	push	{r7, lr}
 801144e:	af00      	add	r7, sp, #0
   if(1) {
       do_cell_balancing();
 8011450:	f7f1 faf4 	bl	8002a3c <do_cell_balancing>
       timer_r2 = 0;
 8011454:	4b03      	ldr	r3, [pc, #12]	; (8011464 <ams_balance_balance_function+0x18>)
 8011456:	f04f 0200 	mov.w	r2, #0
 801145a:	601a      	str	r2, [r3, #0]
       return STATE_AMS_BALANCE_WAIT;
 801145c:	232b      	movs	r3, #43	; 0x2b
   }

   timer_r2 += ams_parameters.Ts;
   return STATE_AMS_BALANCE_BALANCE;
}
 801145e:	4618      	mov	r0, r3
 8011460:	bd80      	pop	{r7, pc}
 8011462:	bf00      	nop
 8011464:	200017fc 	.word	0x200017fc

08011468 <ams_balance_wait_function>:

ams_state_t ams_balance_wait_function() {
 8011468:	b480      	push	{r7}
 801146a:	af00      	add	r7, sp, #0
   if((timer_r2 > 60)) {
 801146c:	4b10      	ldr	r3, [pc, #64]	; (80114b0 <ams_balance_wait_function+0x48>)
 801146e:	edd3 7a00 	vldr	s15, [r3]
 8011472:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80114b4 <ams_balance_wait_function+0x4c>
 8011476:	eef4 7ac7 	vcmpe.f32	s15, s14
 801147a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801147e:	dd05      	ble.n	801148c <ams_balance_wait_function+0x24>
       timer_r2 = 0;
 8011480:	4b0b      	ldr	r3, [pc, #44]	; (80114b0 <ams_balance_wait_function+0x48>)
 8011482:	f04f 0200 	mov.w	r2, #0
 8011486:	601a      	str	r2, [r3, #0]
       return STATE_AMS_BALANCE_BALANCE;
 8011488:	232a      	movs	r3, #42	; 0x2a
 801148a:	e00b      	b.n	80114a4 <ams_balance_wait_function+0x3c>
   }

   timer_r2 += ams_parameters.Ts;
 801148c:	4b0a      	ldr	r3, [pc, #40]	; (80114b8 <ams_balance_wait_function+0x50>)
 801148e:	ed93 7a02 	vldr	s14, [r3, #8]
 8011492:	4b07      	ldr	r3, [pc, #28]	; (80114b0 <ams_balance_wait_function+0x48>)
 8011494:	edd3 7a00 	vldr	s15, [r3]
 8011498:	ee77 7a27 	vadd.f32	s15, s14, s15
 801149c:	4b04      	ldr	r3, [pc, #16]	; (80114b0 <ams_balance_wait_function+0x48>)
 801149e:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_BALANCE_WAIT;
 80114a2:	232b      	movs	r3, #43	; 0x2b
}
 80114a4:	4618      	mov	r0, r3
 80114a6:	46bd      	mov	sp, r7
 80114a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114ac:	4770      	bx	lr
 80114ae:	bf00      	nop
 80114b0:	200017fc 	.word	0x200017fc
 80114b4:	42700000 	.word	0x42700000
 80114b8:	2001b750 	.word	0x2001b750
 80114bc:	00000000 	.word	0x00000000

080114c0 <ams_balance_function>:

ams_state_t ams_balance_function() {
 80114c0:	b5b0      	push	{r4, r5, r7, lr}
 80114c2:	af00      	add	r7, sp, #0
   if(timer_r1 < 0.001*ams_parameters.Ts) {
 80114c4:	4b3a      	ldr	r3, [pc, #232]	; (80115b0 <ams_balance_function+0xf0>)
 80114c6:	681b      	ldr	r3, [r3, #0]
 80114c8:	4618      	mov	r0, r3
 80114ca:	f7ef f82f 	bl	800052c <__aeabi_f2d>
 80114ce:	4604      	mov	r4, r0
 80114d0:	460d      	mov	r5, r1
 80114d2:	4b38      	ldr	r3, [pc, #224]	; (80115b4 <ams_balance_function+0xf4>)
 80114d4:	689b      	ldr	r3, [r3, #8]
 80114d6:	4618      	mov	r0, r3
 80114d8:	f7ef f828 	bl	800052c <__aeabi_f2d>
 80114dc:	a330      	add	r3, pc, #192	; (adr r3, 80115a0 <ams_balance_function+0xe0>)
 80114de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114e2:	f7ef f87b 	bl	80005dc <__aeabi_dmul>
 80114e6:	4602      	mov	r2, r0
 80114e8:	460b      	mov	r3, r1
 80114ea:	4620      	mov	r0, r4
 80114ec:	4629      	mov	r1, r5
 80114ee:	f7ef fae7 	bl	8000ac0 <__aeabi_dcmplt>
 80114f2:	4603      	mov	r3, r0
 80114f4:	2b00      	cmp	r3, #0
 80114f6:	d002      	beq.n	80114fe <ams_balance_function+0x3e>
       state_r2 = STATE_AMS_BALANCE_0;
 80114f8:	4b2f      	ldr	r3, [pc, #188]	; (80115b8 <ams_balance_function+0xf8>)
 80114fa:	2229      	movs	r2, #41	; 0x29
 80114fc:	701a      	strb	r2, [r3, #0]
   }

   switch(state_r2) {
 80114fe:	4b2e      	ldr	r3, [pc, #184]	; (80115b8 <ams_balance_function+0xf8>)
 8011500:	781b      	ldrb	r3, [r3, #0]
 8011502:	2b2b      	cmp	r3, #43	; 0x2b
 8011504:	d014      	beq.n	8011530 <ams_balance_function+0x70>
 8011506:	2b2b      	cmp	r3, #43	; 0x2b
 8011508:	dc19      	bgt.n	801153e <ams_balance_function+0x7e>
 801150a:	2b29      	cmp	r3, #41	; 0x29
 801150c:	d002      	beq.n	8011514 <ams_balance_function+0x54>
 801150e:	2b2a      	cmp	r3, #42	; 0x2a
 8011510:	d007      	beq.n	8011522 <ams_balance_function+0x62>
 8011512:	e014      	b.n	801153e <ams_balance_function+0x7e>
       case STATE_AMS_BALANCE_0:
           state_r2 = ams_balance_0_function();
 8011514:	f7ff ff8c 	bl	8011430 <ams_balance_0_function>
 8011518:	4603      	mov	r3, r0
 801151a:	461a      	mov	r2, r3
 801151c:	4b26      	ldr	r3, [pc, #152]	; (80115b8 <ams_balance_function+0xf8>)
 801151e:	701a      	strb	r2, [r3, #0]
           break;
 8011520:	e010      	b.n	8011544 <ams_balance_function+0x84>
       case STATE_AMS_BALANCE_BALANCE:
           state_r2 = ams_balance_balance_function();
 8011522:	f7ff ff93 	bl	801144c <ams_balance_balance_function>
 8011526:	4603      	mov	r3, r0
 8011528:	461a      	mov	r2, r3
 801152a:	4b23      	ldr	r3, [pc, #140]	; (80115b8 <ams_balance_function+0xf8>)
 801152c:	701a      	strb	r2, [r3, #0]
           break;
 801152e:	e009      	b.n	8011544 <ams_balance_function+0x84>
       case STATE_AMS_BALANCE_WAIT:
           state_r2 = ams_balance_wait_function();
 8011530:	f7ff ff9a 	bl	8011468 <ams_balance_wait_function>
 8011534:	4603      	mov	r3, r0
 8011536:	461a      	mov	r2, r3
 8011538:	4b1f      	ldr	r3, [pc, #124]	; (80115b8 <ams_balance_function+0xf8>)
 801153a:	701a      	strb	r2, [r3, #0]
           break;
 801153c:	e002      	b.n	8011544 <ams_balance_function+0x84>
       default:
           ams_error();
 801153e:	f7fe fdfe 	bl	801013e <ams_error>
           break;
 8011542:	bf00      	nop
   }

   if(ams_inputs.SC||(!ams_inputs.balance)||(ams_inputs.cell_voltages_variance<0.005)) {
 8011544:	4b1d      	ldr	r3, [pc, #116]	; (80115bc <ams_balance_function+0xfc>)
 8011546:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 801154a:	2b00      	cmp	r3, #0
 801154c:	d10f      	bne.n	801156e <ams_balance_function+0xae>
 801154e:	4b1b      	ldr	r3, [pc, #108]	; (80115bc <ams_balance_function+0xfc>)
 8011550:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011554:	2b00      	cmp	r3, #0
 8011556:	d00a      	beq.n	801156e <ams_balance_function+0xae>
 8011558:	4b18      	ldr	r3, [pc, #96]	; (80115bc <ams_balance_function+0xfc>)
 801155a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 801155e:	a312      	add	r3, pc, #72	; (adr r3, 80115a8 <ams_balance_function+0xe8>)
 8011560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011564:	f7ef faac 	bl	8000ac0 <__aeabi_dcmplt>
 8011568:	4603      	mov	r3, r0
 801156a:	2b00      	cmp	r3, #0
 801156c:	d007      	beq.n	801157e <ams_balance_function+0xbe>
       end_cell_balancing();
 801156e:	f7f1 faa1 	bl	8002ab4 <end_cell_balancing>
       timer_r1 = 0;
 8011572:	4b0f      	ldr	r3, [pc, #60]	; (80115b0 <ams_balance_function+0xf0>)
 8011574:	f04f 0200 	mov.w	r2, #0
 8011578:	601a      	str	r2, [r3, #0]
       return STATE_AMS_IDLE;
 801157a:	2327      	movs	r3, #39	; 0x27
 801157c:	e00b      	b.n	8011596 <ams_balance_function+0xd6>
   }


   timer_r1 += ams_parameters.Ts;
 801157e:	4b0d      	ldr	r3, [pc, #52]	; (80115b4 <ams_balance_function+0xf4>)
 8011580:	ed93 7a02 	vldr	s14, [r3, #8]
 8011584:	4b0a      	ldr	r3, [pc, #40]	; (80115b0 <ams_balance_function+0xf0>)
 8011586:	edd3 7a00 	vldr	s15, [r3]
 801158a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801158e:	4b08      	ldr	r3, [pc, #32]	; (80115b0 <ams_balance_function+0xf0>)
 8011590:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_BALANCE;
 8011594:	2328      	movs	r3, #40	; 0x28
}
 8011596:	4618      	mov	r0, r3
 8011598:	bdb0      	pop	{r4, r5, r7, pc}
 801159a:	bf00      	nop
 801159c:	f3af 8000 	nop.w
 80115a0:	d2f1a9fc 	.word	0xd2f1a9fc
 80115a4:	3f50624d 	.word	0x3f50624d
 80115a8:	47ae147b 	.word	0x47ae147b
 80115ac:	3f747ae1 	.word	0x3f747ae1
 80115b0:	200017f8 	.word	0x200017f8
 80115b4:	2001b750 	.word	0x2001b750
 80115b8:	200017f1 	.word	0x200017f1
 80115bc:	2001b6f8 	.word	0x2001b6f8

080115c0 <ams_0_function>:

ams_state_t ams_0_function() {
 80115c0:	b480      	push	{r7}
 80115c2:	af00      	add	r7, sp, #0
   if(1) {
       timer_r1 = 0;
 80115c4:	4b04      	ldr	r3, [pc, #16]	; (80115d8 <ams_0_function+0x18>)
 80115c6:	f04f 0200 	mov.w	r2, #0
 80115ca:	601a      	str	r2, [r3, #0]
       return STATE_AMS_IDLE;
 80115cc:	2327      	movs	r3, #39	; 0x27
   }

   timer_r1 += ams_parameters.Ts;
   return STATE_AMS_0;
}
 80115ce:	4618      	mov	r0, r3
 80115d0:	46bd      	mov	sp, r7
 80115d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115d6:	4770      	bx	lr
 80115d8:	200017f8 	.word	0x200017f8
 80115dc:	00000000 	.word	0x00000000

080115e0 <ams_function>:

ams_state_t ams_function() {
 80115e0:	b5b0      	push	{r4, r5, r7, lr}
 80115e2:	af00      	add	r7, sp, #0
   if(timer_r0 < 0.001*ams_parameters.Ts) {
 80115e4:	4b64      	ldr	r3, [pc, #400]	; (8011778 <ams_function+0x198>)
 80115e6:	681b      	ldr	r3, [r3, #0]
 80115e8:	4618      	mov	r0, r3
 80115ea:	f7ee ff9f 	bl	800052c <__aeabi_f2d>
 80115ee:	4604      	mov	r4, r0
 80115f0:	460d      	mov	r5, r1
 80115f2:	4b62      	ldr	r3, [pc, #392]	; (801177c <ams_function+0x19c>)
 80115f4:	689b      	ldr	r3, [r3, #8]
 80115f6:	4618      	mov	r0, r3
 80115f8:	f7ee ff98 	bl	800052c <__aeabi_f2d>
 80115fc:	a35c      	add	r3, pc, #368	; (adr r3, 8011770 <ams_function+0x190>)
 80115fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011602:	f7ee ffeb 	bl	80005dc <__aeabi_dmul>
 8011606:	4602      	mov	r2, r0
 8011608:	460b      	mov	r3, r1
 801160a:	4620      	mov	r0, r4
 801160c:	4629      	mov	r1, r5
 801160e:	f7ef fa57 	bl	8000ac0 <__aeabi_dcmplt>
 8011612:	4603      	mov	r3, r0
 8011614:	2b00      	cmp	r3, #0
 8011616:	d002      	beq.n	801161e <ams_function+0x3e>
       state_r1 = STATE_AMS_0;
 8011618:	4b59      	ldr	r3, [pc, #356]	; (8011780 <ams_function+0x1a0>)
 801161a:	222c      	movs	r2, #44	; 0x2c
 801161c:	701a      	strb	r2, [r3, #0]
   }

   switch(state_r1) {
 801161e:	4b58      	ldr	r3, [pc, #352]	; (8011780 <ams_function+0x1a0>)
 8011620:	781b      	ldrb	r3, [r3, #0]
 8011622:	3b02      	subs	r3, #2
 8011624:	2b2a      	cmp	r3, #42	; 0x2a
 8011626:	f200 8091 	bhi.w	801174c <ams_function+0x16c>
 801162a:	a201      	add	r2, pc, #4	; (adr r2, 8011630 <ams_function+0x50>)
 801162c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011630:	080116dd 	.word	0x080116dd
 8011634:	0801174d 	.word	0x0801174d
 8011638:	0801174d 	.word	0x0801174d
 801163c:	0801174d 	.word	0x0801174d
 8011640:	0801174d 	.word	0x0801174d
 8011644:	0801174d 	.word	0x0801174d
 8011648:	0801174d 	.word	0x0801174d
 801164c:	0801174d 	.word	0x0801174d
 8011650:	0801174d 	.word	0x0801174d
 8011654:	0801174d 	.word	0x0801174d
 8011658:	080116eb 	.word	0x080116eb
 801165c:	0801174d 	.word	0x0801174d
 8011660:	0801174d 	.word	0x0801174d
 8011664:	0801174d 	.word	0x0801174d
 8011668:	0801174d 	.word	0x0801174d
 801166c:	0801174d 	.word	0x0801174d
 8011670:	080116f9 	.word	0x080116f9
 8011674:	0801174d 	.word	0x0801174d
 8011678:	0801174d 	.word	0x0801174d
 801167c:	0801174d 	.word	0x0801174d
 8011680:	0801174d 	.word	0x0801174d
 8011684:	08011707 	.word	0x08011707
 8011688:	0801174d 	.word	0x0801174d
 801168c:	0801174d 	.word	0x0801174d
 8011690:	0801174d 	.word	0x0801174d
 8011694:	0801174d 	.word	0x0801174d
 8011698:	0801174d 	.word	0x0801174d
 801169c:	0801174d 	.word	0x0801174d
 80116a0:	0801174d 	.word	0x0801174d
 80116a4:	0801174d 	.word	0x0801174d
 80116a8:	0801174d 	.word	0x0801174d
 80116ac:	08011715 	.word	0x08011715
 80116b0:	0801174d 	.word	0x0801174d
 80116b4:	0801174d 	.word	0x0801174d
 80116b8:	0801174d 	.word	0x0801174d
 80116bc:	0801174d 	.word	0x0801174d
 80116c0:	0801174d 	.word	0x0801174d
 80116c4:	08011723 	.word	0x08011723
 80116c8:	08011731 	.word	0x08011731
 80116cc:	0801174d 	.word	0x0801174d
 80116d0:	0801174d 	.word	0x0801174d
 80116d4:	0801174d 	.word	0x0801174d
 80116d8:	0801173f 	.word	0x0801173f
       case STATE_AMS_PRECHARGE_DRIVE:
           state_r1 = ams_precharge_drive_function();
 80116dc:	f7fe fefc 	bl	80104d8 <ams_precharge_drive_function>
 80116e0:	4603      	mov	r3, r0
 80116e2:	461a      	mov	r2, r3
 80116e4:	4b26      	ldr	r3, [pc, #152]	; (8011780 <ams_function+0x1a0>)
 80116e6:	701a      	strb	r2, [r3, #0]
           break;
 80116e8:	e033      	b.n	8011752 <ams_function+0x172>
       case STATE_AMS_DRIVE:
           state_r1 = ams_drive_function();
 80116ea:	f7ff f88d 	bl	8010808 <ams_drive_function>
 80116ee:	4603      	mov	r3, r0
 80116f0:	461a      	mov	r2, r3
 80116f2:	4b23      	ldr	r3, [pc, #140]	; (8011780 <ams_function+0x1a0>)
 80116f4:	701a      	strb	r2, [r3, #0]
           break;
 80116f6:	e02c      	b.n	8011752 <ams_function+0x172>
       case STATE_AMS_ERROR:
           state_r1 = ams_error_function();
 80116f8:	f7ff f992 	bl	8010a20 <ams_error_function>
 80116fc:	4603      	mov	r3, r0
 80116fe:	461a      	mov	r2, r3
 8011700:	4b1f      	ldr	r3, [pc, #124]	; (8011780 <ams_function+0x1a0>)
 8011702:	701a      	strb	r2, [r3, #0]
           break;
 8011704:	e025      	b.n	8011752 <ams_function+0x172>
       case STATE_AMS_PRECHARGE_CHARGE:
           state_r1 = ams_precharge_charge_function();
 8011706:	f7ff fbff 	bl	8010f08 <ams_precharge_charge_function>
 801170a:	4603      	mov	r3, r0
 801170c:	461a      	mov	r2, r3
 801170e:	4b1c      	ldr	r3, [pc, #112]	; (8011780 <ams_function+0x1a0>)
 8011710:	701a      	strb	r2, [r3, #0]
           break;
 8011712:	e01e      	b.n	8011752 <ams_function+0x172>
       case STATE_AMS_CHARGE:
           state_r1 = ams_charge_function();
 8011714:	f7ff fd94 	bl	8011240 <ams_charge_function>
 8011718:	4603      	mov	r3, r0
 801171a:	461a      	mov	r2, r3
 801171c:	4b18      	ldr	r3, [pc, #96]	; (8011780 <ams_function+0x1a0>)
 801171e:	701a      	strb	r2, [r3, #0]
           break;
 8011720:	e017      	b.n	8011752 <ams_function+0x172>
       case STATE_AMS_IDLE:
           state_r1 = ams_idle_function();
 8011722:	f7ff fe29 	bl	8011378 <ams_idle_function>
 8011726:	4603      	mov	r3, r0
 8011728:	461a      	mov	r2, r3
 801172a:	4b15      	ldr	r3, [pc, #84]	; (8011780 <ams_function+0x1a0>)
 801172c:	701a      	strb	r2, [r3, #0]
           break;
 801172e:	e010      	b.n	8011752 <ams_function+0x172>
       case STATE_AMS_BALANCE:
           state_r1 = ams_balance_function();
 8011730:	f7ff fec6 	bl	80114c0 <ams_balance_function>
 8011734:	4603      	mov	r3, r0
 8011736:	461a      	mov	r2, r3
 8011738:	4b11      	ldr	r3, [pc, #68]	; (8011780 <ams_function+0x1a0>)
 801173a:	701a      	strb	r2, [r3, #0]
           break;
 801173c:	e009      	b.n	8011752 <ams_function+0x172>
       case STATE_AMS_0:
           state_r1 = ams_0_function();
 801173e:	f7ff ff3f 	bl	80115c0 <ams_0_function>
 8011742:	4603      	mov	r3, r0
 8011744:	461a      	mov	r2, r3
 8011746:	4b0e      	ldr	r3, [pc, #56]	; (8011780 <ams_function+0x1a0>)
 8011748:	701a      	strb	r2, [r3, #0]
           break;
 801174a:	e002      	b.n	8011752 <ams_function+0x172>
       default:
           ams_error();
 801174c:	f7fe fcf7 	bl	801013e <ams_error>
           break;
 8011750:	bf00      	nop
   }

   timer_r0 += ams_parameters.Ts;
 8011752:	4b0a      	ldr	r3, [pc, #40]	; (801177c <ams_function+0x19c>)
 8011754:	ed93 7a02 	vldr	s14, [r3, #8]
 8011758:	4b07      	ldr	r3, [pc, #28]	; (8011778 <ams_function+0x198>)
 801175a:	edd3 7a00 	vldr	s15, [r3]
 801175e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011762:	4b05      	ldr	r3, [pc, #20]	; (8011778 <ams_function+0x198>)
 8011764:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS;
 8011768:	2301      	movs	r3, #1
}
 801176a:	4618      	mov	r0, r3
 801176c:	bdb0      	pop	{r4, r5, r7, pc}
 801176e:	bf00      	nop
 8011770:	d2f1a9fc 	.word	0xd2f1a9fc
 8011774:	3f50624d 	.word	0x3f50624d
 8011778:	200017f4 	.word	0x200017f4
 801177c:	2001b750 	.word	0x2001b750
 8011780:	200017f0 	.word	0x200017f0

08011784 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8011784:	f8df d034 	ldr.w	sp, [pc, #52]	; 80117bc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8011788:	480d      	ldr	r0, [pc, #52]	; (80117c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 801178a:	490e      	ldr	r1, [pc, #56]	; (80117c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 801178c:	4a0e      	ldr	r2, [pc, #56]	; (80117c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 801178e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8011790:	e002      	b.n	8011798 <LoopCopyDataInit>

08011792 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8011792:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8011794:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8011796:	3304      	adds	r3, #4

08011798 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8011798:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 801179a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 801179c:	d3f9      	bcc.n	8011792 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 801179e:	4a0b      	ldr	r2, [pc, #44]	; (80117cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80117a0:	4c0b      	ldr	r4, [pc, #44]	; (80117d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80117a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80117a4:	e001      	b.n	80117aa <LoopFillZerobss>

080117a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80117a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80117a8:	3204      	adds	r2, #4

080117aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80117aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80117ac:	d3fb      	bcc.n	80117a6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80117ae:	f7f3 fa4f 	bl	8004c50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80117b2:	f009 fc1f 	bl	801aff4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80117b6:	f7f1 fa67 	bl	8002c88 <main>
  bx  lr    
 80117ba:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80117bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80117c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80117c4:	200014ac 	.word	0x200014ac
  ldr r2, =_sidata
 80117c8:	0801c498 	.word	0x0801c498
  ldr r2, =_sbss
 80117cc:	200014b0 	.word	0x200014b0
  ldr r4, =_ebss
 80117d0:	2001ed1c 	.word	0x2001ed1c

080117d4 <CAN1_SCE_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80117d4:	e7fe      	b.n	80117d4 <CAN1_SCE_IRQHandler>
	...

080117d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80117d8:	b580      	push	{r7, lr}
 80117da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80117dc:	4b0e      	ldr	r3, [pc, #56]	; (8011818 <HAL_Init+0x40>)
 80117de:	681b      	ldr	r3, [r3, #0]
 80117e0:	4a0d      	ldr	r2, [pc, #52]	; (8011818 <HAL_Init+0x40>)
 80117e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80117e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80117e8:	4b0b      	ldr	r3, [pc, #44]	; (8011818 <HAL_Init+0x40>)
 80117ea:	681b      	ldr	r3, [r3, #0]
 80117ec:	4a0a      	ldr	r2, [pc, #40]	; (8011818 <HAL_Init+0x40>)
 80117ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80117f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80117f4:	4b08      	ldr	r3, [pc, #32]	; (8011818 <HAL_Init+0x40>)
 80117f6:	681b      	ldr	r3, [r3, #0]
 80117f8:	4a07      	ldr	r2, [pc, #28]	; (8011818 <HAL_Init+0x40>)
 80117fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80117fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8011800:	2003      	movs	r0, #3
 8011802:	f001 fa8a 	bl	8012d1a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8011806:	200f      	movs	r0, #15
 8011808:	f7f3 f944 	bl	8004a94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 801180c:	f7f3 f916 	bl	8004a3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8011810:	2300      	movs	r3, #0
}
 8011812:	4618      	mov	r0, r3
 8011814:	bd80      	pop	{r7, pc}
 8011816:	bf00      	nop
 8011818:	40023c00 	.word	0x40023c00

0801181c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 801181c:	b480      	push	{r7}
 801181e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8011820:	4b06      	ldr	r3, [pc, #24]	; (801183c <HAL_IncTick+0x20>)
 8011822:	781b      	ldrb	r3, [r3, #0]
 8011824:	461a      	mov	r2, r3
 8011826:	4b06      	ldr	r3, [pc, #24]	; (8011840 <HAL_IncTick+0x24>)
 8011828:	681b      	ldr	r3, [r3, #0]
 801182a:	4413      	add	r3, r2
 801182c:	4a04      	ldr	r2, [pc, #16]	; (8011840 <HAL_IncTick+0x24>)
 801182e:	6013      	str	r3, [r2, #0]
}
 8011830:	bf00      	nop
 8011832:	46bd      	mov	sp, r7
 8011834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011838:	4770      	bx	lr
 801183a:	bf00      	nop
 801183c:	2000143c 	.word	0x2000143c
 8011840:	2001ec24 	.word	0x2001ec24

08011844 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8011844:	b480      	push	{r7}
 8011846:	af00      	add	r7, sp, #0
  return uwTick;
 8011848:	4b03      	ldr	r3, [pc, #12]	; (8011858 <HAL_GetTick+0x14>)
 801184a:	681b      	ldr	r3, [r3, #0]
}
 801184c:	4618      	mov	r0, r3
 801184e:	46bd      	mov	sp, r7
 8011850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011854:	4770      	bx	lr
 8011856:	bf00      	nop
 8011858:	2001ec24 	.word	0x2001ec24

0801185c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 801185c:	b580      	push	{r7, lr}
 801185e:	b084      	sub	sp, #16
 8011860:	af00      	add	r7, sp, #0
 8011862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8011864:	f7ff ffee 	bl	8011844 <HAL_GetTick>
 8011868:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 801186e:	68fb      	ldr	r3, [r7, #12]
 8011870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011874:	d005      	beq.n	8011882 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8011876:	4b0a      	ldr	r3, [pc, #40]	; (80118a0 <HAL_Delay+0x44>)
 8011878:	781b      	ldrb	r3, [r3, #0]
 801187a:	461a      	mov	r2, r3
 801187c:	68fb      	ldr	r3, [r7, #12]
 801187e:	4413      	add	r3, r2
 8011880:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8011882:	bf00      	nop
 8011884:	f7ff ffde 	bl	8011844 <HAL_GetTick>
 8011888:	4602      	mov	r2, r0
 801188a:	68bb      	ldr	r3, [r7, #8]
 801188c:	1ad3      	subs	r3, r2, r3
 801188e:	68fa      	ldr	r2, [r7, #12]
 8011890:	429a      	cmp	r2, r3
 8011892:	d8f7      	bhi.n	8011884 <HAL_Delay+0x28>
  {
  }
}
 8011894:	bf00      	nop
 8011896:	bf00      	nop
 8011898:	3710      	adds	r7, #16
 801189a:	46bd      	mov	sp, r7
 801189c:	bd80      	pop	{r7, pc}
 801189e:	bf00      	nop
 80118a0:	2000143c 	.word	0x2000143c

080118a4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80118a4:	b580      	push	{r7, lr}
 80118a6:	b084      	sub	sp, #16
 80118a8:	af00      	add	r7, sp, #0
 80118aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80118ac:	2300      	movs	r3, #0
 80118ae:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	2b00      	cmp	r3, #0
 80118b4:	d101      	bne.n	80118ba <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80118b6:	2301      	movs	r3, #1
 80118b8:	e033      	b.n	8011922 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80118be:	2b00      	cmp	r3, #0
 80118c0:	d109      	bne.n	80118d6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80118c2:	6878      	ldr	r0, [r7, #4]
 80118c4:	f7f0 fc98 	bl	80021f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	2200      	movs	r2, #0
 80118cc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	2200      	movs	r2, #0
 80118d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80118da:	f003 0310 	and.w	r3, r3, #16
 80118de:	2b00      	cmp	r3, #0
 80118e0:	d118      	bne.n	8011914 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80118e6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80118ea:	f023 0302 	bic.w	r3, r3, #2
 80118ee:	f043 0202 	orr.w	r2, r3, #2
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80118f6:	6878      	ldr	r0, [r7, #4]
 80118f8:	f000 fba8 	bl	801204c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	2200      	movs	r2, #0
 8011900:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011906:	f023 0303 	bic.w	r3, r3, #3
 801190a:	f043 0201 	orr.w	r2, r3, #1
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	641a      	str	r2, [r3, #64]	; 0x40
 8011912:	e001      	b.n	8011918 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8011914:	2301      	movs	r3, #1
 8011916:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	2200      	movs	r2, #0
 801191c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8011920:	7bfb      	ldrb	r3, [r7, #15]
}
 8011922:	4618      	mov	r0, r3
 8011924:	3710      	adds	r7, #16
 8011926:	46bd      	mov	sp, r7
 8011928:	bd80      	pop	{r7, pc}

0801192a <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 801192a:	b580      	push	{r7, lr}
 801192c:	b084      	sub	sp, #16
 801192e:	af00      	add	r7, sp, #0
 8011930:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8011932:	2300      	movs	r3, #0
 8011934:	60fb      	str	r3, [r7, #12]
 8011936:	2300      	movs	r3, #0
 8011938:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	681b      	ldr	r3, [r3, #0]
 801193e:	681b      	ldr	r3, [r3, #0]
 8011940:	f003 0302 	and.w	r3, r3, #2
 8011944:	2b02      	cmp	r3, #2
 8011946:	bf0c      	ite	eq
 8011948:	2301      	moveq	r3, #1
 801194a:	2300      	movne	r3, #0
 801194c:	b2db      	uxtb	r3, r3
 801194e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	681b      	ldr	r3, [r3, #0]
 8011954:	685b      	ldr	r3, [r3, #4]
 8011956:	f003 0320 	and.w	r3, r3, #32
 801195a:	2b20      	cmp	r3, #32
 801195c:	bf0c      	ite	eq
 801195e:	2301      	moveq	r3, #1
 8011960:	2300      	movne	r3, #0
 8011962:	b2db      	uxtb	r3, r3
 8011964:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8011966:	68fb      	ldr	r3, [r7, #12]
 8011968:	2b00      	cmp	r3, #0
 801196a:	d049      	beq.n	8011a00 <HAL_ADC_IRQHandler+0xd6>
 801196c:	68bb      	ldr	r3, [r7, #8]
 801196e:	2b00      	cmp	r3, #0
 8011970:	d046      	beq.n	8011a00 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011976:	f003 0310 	and.w	r3, r3, #16
 801197a:	2b00      	cmp	r3, #0
 801197c:	d105      	bne.n	801198a <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011982:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	681b      	ldr	r3, [r3, #0]
 801198e:	689b      	ldr	r3, [r3, #8]
 8011990:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8011994:	2b00      	cmp	r3, #0
 8011996:	d12b      	bne.n	80119f0 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 801199c:	2b00      	cmp	r3, #0
 801199e:	d127      	bne.n	80119f0 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	681b      	ldr	r3, [r3, #0]
 80119a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80119a6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	d006      	beq.n	80119bc <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	681b      	ldr	r3, [r3, #0]
 80119b2:	689b      	ldr	r3, [r3, #8]
 80119b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80119b8:	2b00      	cmp	r3, #0
 80119ba:	d119      	bne.n	80119f0 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	681b      	ldr	r3, [r3, #0]
 80119c0:	685a      	ldr	r2, [r3, #4]
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	681b      	ldr	r3, [r3, #0]
 80119c6:	f022 0220 	bic.w	r2, r2, #32
 80119ca:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80119d0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80119dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80119e0:	2b00      	cmp	r3, #0
 80119e2:	d105      	bne.n	80119f0 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80119e8:	f043 0201 	orr.w	r2, r3, #1
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80119f0:	6878      	ldr	r0, [r7, #4]
 80119f2:	f7f0 fe69 	bl	80026c8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	681b      	ldr	r3, [r3, #0]
 80119fa:	f06f 0212 	mvn.w	r2, #18
 80119fe:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	681b      	ldr	r3, [r3, #0]
 8011a04:	681b      	ldr	r3, [r3, #0]
 8011a06:	f003 0304 	and.w	r3, r3, #4
 8011a0a:	2b04      	cmp	r3, #4
 8011a0c:	bf0c      	ite	eq
 8011a0e:	2301      	moveq	r3, #1
 8011a10:	2300      	movne	r3, #0
 8011a12:	b2db      	uxtb	r3, r3
 8011a14:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	681b      	ldr	r3, [r3, #0]
 8011a1a:	685b      	ldr	r3, [r3, #4]
 8011a1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011a20:	2b80      	cmp	r3, #128	; 0x80
 8011a22:	bf0c      	ite	eq
 8011a24:	2301      	moveq	r3, #1
 8011a26:	2300      	movne	r3, #0
 8011a28:	b2db      	uxtb	r3, r3
 8011a2a:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8011a2c:	68fb      	ldr	r3, [r7, #12]
 8011a2e:	2b00      	cmp	r3, #0
 8011a30:	d057      	beq.n	8011ae2 <HAL_ADC_IRQHandler+0x1b8>
 8011a32:	68bb      	ldr	r3, [r7, #8]
 8011a34:	2b00      	cmp	r3, #0
 8011a36:	d054      	beq.n	8011ae2 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011a3c:	f003 0310 	and.w	r3, r3, #16
 8011a40:	2b00      	cmp	r3, #0
 8011a42:	d105      	bne.n	8011a50 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011a48:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	681b      	ldr	r3, [r3, #0]
 8011a54:	689b      	ldr	r3, [r3, #8]
 8011a56:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	d139      	bne.n	8011ad2 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	681b      	ldr	r3, [r3, #0]
 8011a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011a64:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	d006      	beq.n	8011a7a <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	681b      	ldr	r3, [r3, #0]
 8011a70:	689b      	ldr	r3, [r3, #8]
 8011a72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	d12b      	bne.n	8011ad2 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	681b      	ldr	r3, [r3, #0]
 8011a7e:	685b      	ldr	r3, [r3, #4]
 8011a80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	d124      	bne.n	8011ad2 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	681b      	ldr	r3, [r3, #0]
 8011a8c:	689b      	ldr	r3, [r3, #8]
 8011a8e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8011a92:	2b00      	cmp	r3, #0
 8011a94:	d11d      	bne.n	8011ad2 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8011a9a:	2b00      	cmp	r3, #0
 8011a9c:	d119      	bne.n	8011ad2 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	681b      	ldr	r3, [r3, #0]
 8011aa2:	685a      	ldr	r2, [r3, #4]
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	681b      	ldr	r3, [r3, #0]
 8011aa8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8011aac:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011ab2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	d105      	bne.n	8011ad2 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011aca:	f043 0201 	orr.w	r2, r3, #1
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8011ad2:	6878      	ldr	r0, [r7, #4]
 8011ad4:	f000 fc38 	bl	8012348 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	681b      	ldr	r3, [r3, #0]
 8011adc:	f06f 020c 	mvn.w	r2, #12
 8011ae0:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	681b      	ldr	r3, [r3, #0]
 8011ae6:	681b      	ldr	r3, [r3, #0]
 8011ae8:	f003 0301 	and.w	r3, r3, #1
 8011aec:	2b01      	cmp	r3, #1
 8011aee:	bf0c      	ite	eq
 8011af0:	2301      	moveq	r3, #1
 8011af2:	2300      	movne	r3, #0
 8011af4:	b2db      	uxtb	r3, r3
 8011af6:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	681b      	ldr	r3, [r3, #0]
 8011afc:	685b      	ldr	r3, [r3, #4]
 8011afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011b02:	2b40      	cmp	r3, #64	; 0x40
 8011b04:	bf0c      	ite	eq
 8011b06:	2301      	moveq	r3, #1
 8011b08:	2300      	movne	r3, #0
 8011b0a:	b2db      	uxtb	r3, r3
 8011b0c:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8011b0e:	68fb      	ldr	r3, [r7, #12]
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	d017      	beq.n	8011b44 <HAL_ADC_IRQHandler+0x21a>
 8011b14:	68bb      	ldr	r3, [r7, #8]
 8011b16:	2b00      	cmp	r3, #0
 8011b18:	d014      	beq.n	8011b44 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	681b      	ldr	r3, [r3, #0]
 8011b1e:	681b      	ldr	r3, [r3, #0]
 8011b20:	f003 0301 	and.w	r3, r3, #1
 8011b24:	2b01      	cmp	r3, #1
 8011b26:	d10d      	bne.n	8011b44 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011b2c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8011b34:	6878      	ldr	r0, [r7, #4]
 8011b36:	f000 f953 	bl	8011de0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	681b      	ldr	r3, [r3, #0]
 8011b3e:	f06f 0201 	mvn.w	r2, #1
 8011b42:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	681b      	ldr	r3, [r3, #0]
 8011b48:	681b      	ldr	r3, [r3, #0]
 8011b4a:	f003 0320 	and.w	r3, r3, #32
 8011b4e:	2b20      	cmp	r3, #32
 8011b50:	bf0c      	ite	eq
 8011b52:	2301      	moveq	r3, #1
 8011b54:	2300      	movne	r3, #0
 8011b56:	b2db      	uxtb	r3, r3
 8011b58:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	681b      	ldr	r3, [r3, #0]
 8011b5e:	685b      	ldr	r3, [r3, #4]
 8011b60:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8011b64:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8011b68:	bf0c      	ite	eq
 8011b6a:	2301      	moveq	r3, #1
 8011b6c:	2300      	movne	r3, #0
 8011b6e:	b2db      	uxtb	r3, r3
 8011b70:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8011b72:	68fb      	ldr	r3, [r7, #12]
 8011b74:	2b00      	cmp	r3, #0
 8011b76:	d015      	beq.n	8011ba4 <HAL_ADC_IRQHandler+0x27a>
 8011b78:	68bb      	ldr	r3, [r7, #8]
 8011b7a:	2b00      	cmp	r3, #0
 8011b7c:	d012      	beq.n	8011ba4 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011b82:	f043 0202 	orr.w	r2, r3, #2
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	681b      	ldr	r3, [r3, #0]
 8011b8e:	f06f 0220 	mvn.w	r2, #32
 8011b92:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8011b94:	6878      	ldr	r0, [r7, #4]
 8011b96:	f000 f92d 	bl	8011df4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	681b      	ldr	r3, [r3, #0]
 8011b9e:	f06f 0220 	mvn.w	r2, #32
 8011ba2:	601a      	str	r2, [r3, #0]
  }
}
 8011ba4:	bf00      	nop
 8011ba6:	3710      	adds	r7, #16
 8011ba8:	46bd      	mov	sp, r7
 8011baa:	bd80      	pop	{r7, pc}

08011bac <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8011bac:	b580      	push	{r7, lr}
 8011bae:	b086      	sub	sp, #24
 8011bb0:	af00      	add	r7, sp, #0
 8011bb2:	60f8      	str	r0, [r7, #12]
 8011bb4:	60b9      	str	r1, [r7, #8]
 8011bb6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8011bb8:	2300      	movs	r3, #0
 8011bba:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8011bbc:	68fb      	ldr	r3, [r7, #12]
 8011bbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011bc2:	2b01      	cmp	r3, #1
 8011bc4:	d101      	bne.n	8011bca <HAL_ADC_Start_DMA+0x1e>
 8011bc6:	2302      	movs	r3, #2
 8011bc8:	e0e9      	b.n	8011d9e <HAL_ADC_Start_DMA+0x1f2>
 8011bca:	68fb      	ldr	r3, [r7, #12]
 8011bcc:	2201      	movs	r2, #1
 8011bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8011bd2:	68fb      	ldr	r3, [r7, #12]
 8011bd4:	681b      	ldr	r3, [r3, #0]
 8011bd6:	689b      	ldr	r3, [r3, #8]
 8011bd8:	f003 0301 	and.w	r3, r3, #1
 8011bdc:	2b01      	cmp	r3, #1
 8011bde:	d018      	beq.n	8011c12 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8011be0:	68fb      	ldr	r3, [r7, #12]
 8011be2:	681b      	ldr	r3, [r3, #0]
 8011be4:	689a      	ldr	r2, [r3, #8]
 8011be6:	68fb      	ldr	r3, [r7, #12]
 8011be8:	681b      	ldr	r3, [r3, #0]
 8011bea:	f042 0201 	orr.w	r2, r2, #1
 8011bee:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8011bf0:	4b6d      	ldr	r3, [pc, #436]	; (8011da8 <HAL_ADC_Start_DMA+0x1fc>)
 8011bf2:	681b      	ldr	r3, [r3, #0]
 8011bf4:	4a6d      	ldr	r2, [pc, #436]	; (8011dac <HAL_ADC_Start_DMA+0x200>)
 8011bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8011bfa:	0c9a      	lsrs	r2, r3, #18
 8011bfc:	4613      	mov	r3, r2
 8011bfe:	005b      	lsls	r3, r3, #1
 8011c00:	4413      	add	r3, r2
 8011c02:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8011c04:	e002      	b.n	8011c0c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8011c06:	693b      	ldr	r3, [r7, #16]
 8011c08:	3b01      	subs	r3, #1
 8011c0a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8011c0c:	693b      	ldr	r3, [r7, #16]
 8011c0e:	2b00      	cmp	r3, #0
 8011c10:	d1f9      	bne.n	8011c06 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8011c12:	68fb      	ldr	r3, [r7, #12]
 8011c14:	681b      	ldr	r3, [r3, #0]
 8011c16:	689b      	ldr	r3, [r3, #8]
 8011c18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011c1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011c20:	d107      	bne.n	8011c32 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8011c22:	68fb      	ldr	r3, [r7, #12]
 8011c24:	681b      	ldr	r3, [r3, #0]
 8011c26:	689a      	ldr	r2, [r3, #8]
 8011c28:	68fb      	ldr	r3, [r7, #12]
 8011c2a:	681b      	ldr	r3, [r3, #0]
 8011c2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8011c30:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8011c32:	68fb      	ldr	r3, [r7, #12]
 8011c34:	681b      	ldr	r3, [r3, #0]
 8011c36:	689b      	ldr	r3, [r3, #8]
 8011c38:	f003 0301 	and.w	r3, r3, #1
 8011c3c:	2b01      	cmp	r3, #1
 8011c3e:	f040 80a1 	bne.w	8011d84 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8011c42:	68fb      	ldr	r3, [r7, #12]
 8011c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011c46:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8011c4a:	f023 0301 	bic.w	r3, r3, #1
 8011c4e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8011c52:	68fb      	ldr	r3, [r7, #12]
 8011c54:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8011c56:	68fb      	ldr	r3, [r7, #12]
 8011c58:	681b      	ldr	r3, [r3, #0]
 8011c5a:	685b      	ldr	r3, [r3, #4]
 8011c5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	d007      	beq.n	8011c74 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8011c64:	68fb      	ldr	r3, [r7, #12]
 8011c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011c68:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8011c6c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8011c70:	68fb      	ldr	r3, [r7, #12]
 8011c72:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8011c74:	68fb      	ldr	r3, [r7, #12]
 8011c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011c78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8011c7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011c80:	d106      	bne.n	8011c90 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8011c82:	68fb      	ldr	r3, [r7, #12]
 8011c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011c86:	f023 0206 	bic.w	r2, r3, #6
 8011c8a:	68fb      	ldr	r3, [r7, #12]
 8011c8c:	645a      	str	r2, [r3, #68]	; 0x44
 8011c8e:	e002      	b.n	8011c96 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8011c90:	68fb      	ldr	r3, [r7, #12]
 8011c92:	2200      	movs	r2, #0
 8011c94:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8011c96:	68fb      	ldr	r3, [r7, #12]
 8011c98:	2200      	movs	r2, #0
 8011c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8011c9e:	4b44      	ldr	r3, [pc, #272]	; (8011db0 <HAL_ADC_Start_DMA+0x204>)
 8011ca0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8011ca2:	68fb      	ldr	r3, [r7, #12]
 8011ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011ca6:	4a43      	ldr	r2, [pc, #268]	; (8011db4 <HAL_ADC_Start_DMA+0x208>)
 8011ca8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8011caa:	68fb      	ldr	r3, [r7, #12]
 8011cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011cae:	4a42      	ldr	r2, [pc, #264]	; (8011db8 <HAL_ADC_Start_DMA+0x20c>)
 8011cb0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8011cb2:	68fb      	ldr	r3, [r7, #12]
 8011cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011cb6:	4a41      	ldr	r2, [pc, #260]	; (8011dbc <HAL_ADC_Start_DMA+0x210>)
 8011cb8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8011cba:	68fb      	ldr	r3, [r7, #12]
 8011cbc:	681b      	ldr	r3, [r3, #0]
 8011cbe:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8011cc2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8011cc4:	68fb      	ldr	r3, [r7, #12]
 8011cc6:	681b      	ldr	r3, [r3, #0]
 8011cc8:	685a      	ldr	r2, [r3, #4]
 8011cca:	68fb      	ldr	r3, [r7, #12]
 8011ccc:	681b      	ldr	r3, [r3, #0]
 8011cce:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8011cd2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8011cd4:	68fb      	ldr	r3, [r7, #12]
 8011cd6:	681b      	ldr	r3, [r3, #0]
 8011cd8:	689a      	ldr	r2, [r3, #8]
 8011cda:	68fb      	ldr	r3, [r7, #12]
 8011cdc:	681b      	ldr	r3, [r3, #0]
 8011cde:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8011ce2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8011ce4:	68fb      	ldr	r3, [r7, #12]
 8011ce6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8011ce8:	68fb      	ldr	r3, [r7, #12]
 8011cea:	681b      	ldr	r3, [r3, #0]
 8011cec:	334c      	adds	r3, #76	; 0x4c
 8011cee:	4619      	mov	r1, r3
 8011cf0:	68ba      	ldr	r2, [r7, #8]
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	f001 f8f4 	bl	8012ee0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8011cf8:	697b      	ldr	r3, [r7, #20]
 8011cfa:	685b      	ldr	r3, [r3, #4]
 8011cfc:	f003 031f 	and.w	r3, r3, #31
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	d12a      	bne.n	8011d5a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8011d04:	68fb      	ldr	r3, [r7, #12]
 8011d06:	681b      	ldr	r3, [r3, #0]
 8011d08:	4a2d      	ldr	r2, [pc, #180]	; (8011dc0 <HAL_ADC_Start_DMA+0x214>)
 8011d0a:	4293      	cmp	r3, r2
 8011d0c:	d015      	beq.n	8011d3a <HAL_ADC_Start_DMA+0x18e>
 8011d0e:	68fb      	ldr	r3, [r7, #12]
 8011d10:	681b      	ldr	r3, [r3, #0]
 8011d12:	4a2c      	ldr	r2, [pc, #176]	; (8011dc4 <HAL_ADC_Start_DMA+0x218>)
 8011d14:	4293      	cmp	r3, r2
 8011d16:	d105      	bne.n	8011d24 <HAL_ADC_Start_DMA+0x178>
 8011d18:	4b25      	ldr	r3, [pc, #148]	; (8011db0 <HAL_ADC_Start_DMA+0x204>)
 8011d1a:	685b      	ldr	r3, [r3, #4]
 8011d1c:	f003 031f 	and.w	r3, r3, #31
 8011d20:	2b00      	cmp	r3, #0
 8011d22:	d00a      	beq.n	8011d3a <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8011d24:	68fb      	ldr	r3, [r7, #12]
 8011d26:	681b      	ldr	r3, [r3, #0]
 8011d28:	4a27      	ldr	r2, [pc, #156]	; (8011dc8 <HAL_ADC_Start_DMA+0x21c>)
 8011d2a:	4293      	cmp	r3, r2
 8011d2c:	d136      	bne.n	8011d9c <HAL_ADC_Start_DMA+0x1f0>
 8011d2e:	4b20      	ldr	r3, [pc, #128]	; (8011db0 <HAL_ADC_Start_DMA+0x204>)
 8011d30:	685b      	ldr	r3, [r3, #4]
 8011d32:	f003 0310 	and.w	r3, r3, #16
 8011d36:	2b00      	cmp	r3, #0
 8011d38:	d130      	bne.n	8011d9c <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8011d3a:	68fb      	ldr	r3, [r7, #12]
 8011d3c:	681b      	ldr	r3, [r3, #0]
 8011d3e:	689b      	ldr	r3, [r3, #8]
 8011d40:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8011d44:	2b00      	cmp	r3, #0
 8011d46:	d129      	bne.n	8011d9c <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8011d48:	68fb      	ldr	r3, [r7, #12]
 8011d4a:	681b      	ldr	r3, [r3, #0]
 8011d4c:	689a      	ldr	r2, [r3, #8]
 8011d4e:	68fb      	ldr	r3, [r7, #12]
 8011d50:	681b      	ldr	r3, [r3, #0]
 8011d52:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8011d56:	609a      	str	r2, [r3, #8]
 8011d58:	e020      	b.n	8011d9c <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8011d5a:	68fb      	ldr	r3, [r7, #12]
 8011d5c:	681b      	ldr	r3, [r3, #0]
 8011d5e:	4a18      	ldr	r2, [pc, #96]	; (8011dc0 <HAL_ADC_Start_DMA+0x214>)
 8011d60:	4293      	cmp	r3, r2
 8011d62:	d11b      	bne.n	8011d9c <HAL_ADC_Start_DMA+0x1f0>
 8011d64:	68fb      	ldr	r3, [r7, #12]
 8011d66:	681b      	ldr	r3, [r3, #0]
 8011d68:	689b      	ldr	r3, [r3, #8]
 8011d6a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8011d6e:	2b00      	cmp	r3, #0
 8011d70:	d114      	bne.n	8011d9c <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8011d72:	68fb      	ldr	r3, [r7, #12]
 8011d74:	681b      	ldr	r3, [r3, #0]
 8011d76:	689a      	ldr	r2, [r3, #8]
 8011d78:	68fb      	ldr	r3, [r7, #12]
 8011d7a:	681b      	ldr	r3, [r3, #0]
 8011d7c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8011d80:	609a      	str	r2, [r3, #8]
 8011d82:	e00b      	b.n	8011d9c <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8011d84:	68fb      	ldr	r3, [r7, #12]
 8011d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011d88:	f043 0210 	orr.w	r2, r3, #16
 8011d8c:	68fb      	ldr	r3, [r7, #12]
 8011d8e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8011d90:	68fb      	ldr	r3, [r7, #12]
 8011d92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011d94:	f043 0201 	orr.w	r2, r3, #1
 8011d98:	68fb      	ldr	r3, [r7, #12]
 8011d9a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8011d9c:	2300      	movs	r3, #0
}
 8011d9e:	4618      	mov	r0, r3
 8011da0:	3718      	adds	r7, #24
 8011da2:	46bd      	mov	sp, r7
 8011da4:	bd80      	pop	{r7, pc}
 8011da6:	bf00      	nop
 8011da8:	20000084 	.word	0x20000084
 8011dac:	431bde83 	.word	0x431bde83
 8011db0:	40012300 	.word	0x40012300
 8011db4:	08012245 	.word	0x08012245
 8011db8:	080122ff 	.word	0x080122ff
 8011dbc:	0801231b 	.word	0x0801231b
 8011dc0:	40012000 	.word	0x40012000
 8011dc4:	40012100 	.word	0x40012100
 8011dc8:	40012200 	.word	0x40012200

08011dcc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8011dcc:	b480      	push	{r7}
 8011dce:	b083      	sub	sp, #12
 8011dd0:	af00      	add	r7, sp, #0
 8011dd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8011dd4:	bf00      	nop
 8011dd6:	370c      	adds	r7, #12
 8011dd8:	46bd      	mov	sp, r7
 8011dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dde:	4770      	bx	lr

08011de0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8011de0:	b480      	push	{r7}
 8011de2:	b083      	sub	sp, #12
 8011de4:	af00      	add	r7, sp, #0
 8011de6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8011de8:	bf00      	nop
 8011dea:	370c      	adds	r7, #12
 8011dec:	46bd      	mov	sp, r7
 8011dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011df2:	4770      	bx	lr

08011df4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8011df4:	b480      	push	{r7}
 8011df6:	b083      	sub	sp, #12
 8011df8:	af00      	add	r7, sp, #0
 8011dfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8011dfc:	bf00      	nop
 8011dfe:	370c      	adds	r7, #12
 8011e00:	46bd      	mov	sp, r7
 8011e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e06:	4770      	bx	lr

08011e08 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8011e08:	b480      	push	{r7}
 8011e0a:	b085      	sub	sp, #20
 8011e0c:	af00      	add	r7, sp, #0
 8011e0e:	6078      	str	r0, [r7, #4]
 8011e10:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8011e12:	2300      	movs	r3, #0
 8011e14:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011e1c:	2b01      	cmp	r3, #1
 8011e1e:	d101      	bne.n	8011e24 <HAL_ADC_ConfigChannel+0x1c>
 8011e20:	2302      	movs	r3, #2
 8011e22:	e105      	b.n	8012030 <HAL_ADC_ConfigChannel+0x228>
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	2201      	movs	r2, #1
 8011e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8011e2c:	683b      	ldr	r3, [r7, #0]
 8011e2e:	681b      	ldr	r3, [r3, #0]
 8011e30:	2b09      	cmp	r3, #9
 8011e32:	d925      	bls.n	8011e80 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	681b      	ldr	r3, [r3, #0]
 8011e38:	68d9      	ldr	r1, [r3, #12]
 8011e3a:	683b      	ldr	r3, [r7, #0]
 8011e3c:	681b      	ldr	r3, [r3, #0]
 8011e3e:	b29b      	uxth	r3, r3
 8011e40:	461a      	mov	r2, r3
 8011e42:	4613      	mov	r3, r2
 8011e44:	005b      	lsls	r3, r3, #1
 8011e46:	4413      	add	r3, r2
 8011e48:	3b1e      	subs	r3, #30
 8011e4a:	2207      	movs	r2, #7
 8011e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8011e50:	43da      	mvns	r2, r3
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	681b      	ldr	r3, [r3, #0]
 8011e56:	400a      	ands	r2, r1
 8011e58:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	681b      	ldr	r3, [r3, #0]
 8011e5e:	68d9      	ldr	r1, [r3, #12]
 8011e60:	683b      	ldr	r3, [r7, #0]
 8011e62:	689a      	ldr	r2, [r3, #8]
 8011e64:	683b      	ldr	r3, [r7, #0]
 8011e66:	681b      	ldr	r3, [r3, #0]
 8011e68:	b29b      	uxth	r3, r3
 8011e6a:	4618      	mov	r0, r3
 8011e6c:	4603      	mov	r3, r0
 8011e6e:	005b      	lsls	r3, r3, #1
 8011e70:	4403      	add	r3, r0
 8011e72:	3b1e      	subs	r3, #30
 8011e74:	409a      	lsls	r2, r3
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	681b      	ldr	r3, [r3, #0]
 8011e7a:	430a      	orrs	r2, r1
 8011e7c:	60da      	str	r2, [r3, #12]
 8011e7e:	e022      	b.n	8011ec6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	681b      	ldr	r3, [r3, #0]
 8011e84:	6919      	ldr	r1, [r3, #16]
 8011e86:	683b      	ldr	r3, [r7, #0]
 8011e88:	681b      	ldr	r3, [r3, #0]
 8011e8a:	b29b      	uxth	r3, r3
 8011e8c:	461a      	mov	r2, r3
 8011e8e:	4613      	mov	r3, r2
 8011e90:	005b      	lsls	r3, r3, #1
 8011e92:	4413      	add	r3, r2
 8011e94:	2207      	movs	r2, #7
 8011e96:	fa02 f303 	lsl.w	r3, r2, r3
 8011e9a:	43da      	mvns	r2, r3
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	681b      	ldr	r3, [r3, #0]
 8011ea0:	400a      	ands	r2, r1
 8011ea2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	681b      	ldr	r3, [r3, #0]
 8011ea8:	6919      	ldr	r1, [r3, #16]
 8011eaa:	683b      	ldr	r3, [r7, #0]
 8011eac:	689a      	ldr	r2, [r3, #8]
 8011eae:	683b      	ldr	r3, [r7, #0]
 8011eb0:	681b      	ldr	r3, [r3, #0]
 8011eb2:	b29b      	uxth	r3, r3
 8011eb4:	4618      	mov	r0, r3
 8011eb6:	4603      	mov	r3, r0
 8011eb8:	005b      	lsls	r3, r3, #1
 8011eba:	4403      	add	r3, r0
 8011ebc:	409a      	lsls	r2, r3
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	681b      	ldr	r3, [r3, #0]
 8011ec2:	430a      	orrs	r2, r1
 8011ec4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8011ec6:	683b      	ldr	r3, [r7, #0]
 8011ec8:	685b      	ldr	r3, [r3, #4]
 8011eca:	2b06      	cmp	r3, #6
 8011ecc:	d824      	bhi.n	8011f18 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	681b      	ldr	r3, [r3, #0]
 8011ed2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8011ed4:	683b      	ldr	r3, [r7, #0]
 8011ed6:	685a      	ldr	r2, [r3, #4]
 8011ed8:	4613      	mov	r3, r2
 8011eda:	009b      	lsls	r3, r3, #2
 8011edc:	4413      	add	r3, r2
 8011ede:	3b05      	subs	r3, #5
 8011ee0:	221f      	movs	r2, #31
 8011ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8011ee6:	43da      	mvns	r2, r3
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	681b      	ldr	r3, [r3, #0]
 8011eec:	400a      	ands	r2, r1
 8011eee:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	681b      	ldr	r3, [r3, #0]
 8011ef4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8011ef6:	683b      	ldr	r3, [r7, #0]
 8011ef8:	681b      	ldr	r3, [r3, #0]
 8011efa:	b29b      	uxth	r3, r3
 8011efc:	4618      	mov	r0, r3
 8011efe:	683b      	ldr	r3, [r7, #0]
 8011f00:	685a      	ldr	r2, [r3, #4]
 8011f02:	4613      	mov	r3, r2
 8011f04:	009b      	lsls	r3, r3, #2
 8011f06:	4413      	add	r3, r2
 8011f08:	3b05      	subs	r3, #5
 8011f0a:	fa00 f203 	lsl.w	r2, r0, r3
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	681b      	ldr	r3, [r3, #0]
 8011f12:	430a      	orrs	r2, r1
 8011f14:	635a      	str	r2, [r3, #52]	; 0x34
 8011f16:	e04c      	b.n	8011fb2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8011f18:	683b      	ldr	r3, [r7, #0]
 8011f1a:	685b      	ldr	r3, [r3, #4]
 8011f1c:	2b0c      	cmp	r3, #12
 8011f1e:	d824      	bhi.n	8011f6a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	681b      	ldr	r3, [r3, #0]
 8011f24:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8011f26:	683b      	ldr	r3, [r7, #0]
 8011f28:	685a      	ldr	r2, [r3, #4]
 8011f2a:	4613      	mov	r3, r2
 8011f2c:	009b      	lsls	r3, r3, #2
 8011f2e:	4413      	add	r3, r2
 8011f30:	3b23      	subs	r3, #35	; 0x23
 8011f32:	221f      	movs	r2, #31
 8011f34:	fa02 f303 	lsl.w	r3, r2, r3
 8011f38:	43da      	mvns	r2, r3
 8011f3a:	687b      	ldr	r3, [r7, #4]
 8011f3c:	681b      	ldr	r3, [r3, #0]
 8011f3e:	400a      	ands	r2, r1
 8011f40:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	681b      	ldr	r3, [r3, #0]
 8011f46:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8011f48:	683b      	ldr	r3, [r7, #0]
 8011f4a:	681b      	ldr	r3, [r3, #0]
 8011f4c:	b29b      	uxth	r3, r3
 8011f4e:	4618      	mov	r0, r3
 8011f50:	683b      	ldr	r3, [r7, #0]
 8011f52:	685a      	ldr	r2, [r3, #4]
 8011f54:	4613      	mov	r3, r2
 8011f56:	009b      	lsls	r3, r3, #2
 8011f58:	4413      	add	r3, r2
 8011f5a:	3b23      	subs	r3, #35	; 0x23
 8011f5c:	fa00 f203 	lsl.w	r2, r0, r3
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	681b      	ldr	r3, [r3, #0]
 8011f64:	430a      	orrs	r2, r1
 8011f66:	631a      	str	r2, [r3, #48]	; 0x30
 8011f68:	e023      	b.n	8011fb2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	681b      	ldr	r3, [r3, #0]
 8011f6e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8011f70:	683b      	ldr	r3, [r7, #0]
 8011f72:	685a      	ldr	r2, [r3, #4]
 8011f74:	4613      	mov	r3, r2
 8011f76:	009b      	lsls	r3, r3, #2
 8011f78:	4413      	add	r3, r2
 8011f7a:	3b41      	subs	r3, #65	; 0x41
 8011f7c:	221f      	movs	r2, #31
 8011f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8011f82:	43da      	mvns	r2, r3
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	681b      	ldr	r3, [r3, #0]
 8011f88:	400a      	ands	r2, r1
 8011f8a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	681b      	ldr	r3, [r3, #0]
 8011f90:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8011f92:	683b      	ldr	r3, [r7, #0]
 8011f94:	681b      	ldr	r3, [r3, #0]
 8011f96:	b29b      	uxth	r3, r3
 8011f98:	4618      	mov	r0, r3
 8011f9a:	683b      	ldr	r3, [r7, #0]
 8011f9c:	685a      	ldr	r2, [r3, #4]
 8011f9e:	4613      	mov	r3, r2
 8011fa0:	009b      	lsls	r3, r3, #2
 8011fa2:	4413      	add	r3, r2
 8011fa4:	3b41      	subs	r3, #65	; 0x41
 8011fa6:	fa00 f203 	lsl.w	r2, r0, r3
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	681b      	ldr	r3, [r3, #0]
 8011fae:	430a      	orrs	r2, r1
 8011fb0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8011fb2:	4b22      	ldr	r3, [pc, #136]	; (801203c <HAL_ADC_ConfigChannel+0x234>)
 8011fb4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	681b      	ldr	r3, [r3, #0]
 8011fba:	4a21      	ldr	r2, [pc, #132]	; (8012040 <HAL_ADC_ConfigChannel+0x238>)
 8011fbc:	4293      	cmp	r3, r2
 8011fbe:	d109      	bne.n	8011fd4 <HAL_ADC_ConfigChannel+0x1cc>
 8011fc0:	683b      	ldr	r3, [r7, #0]
 8011fc2:	681b      	ldr	r3, [r3, #0]
 8011fc4:	2b12      	cmp	r3, #18
 8011fc6:	d105      	bne.n	8011fd4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8011fc8:	68fb      	ldr	r3, [r7, #12]
 8011fca:	685b      	ldr	r3, [r3, #4]
 8011fcc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8011fd0:	68fb      	ldr	r3, [r7, #12]
 8011fd2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	681b      	ldr	r3, [r3, #0]
 8011fd8:	4a19      	ldr	r2, [pc, #100]	; (8012040 <HAL_ADC_ConfigChannel+0x238>)
 8011fda:	4293      	cmp	r3, r2
 8011fdc:	d123      	bne.n	8012026 <HAL_ADC_ConfigChannel+0x21e>
 8011fde:	683b      	ldr	r3, [r7, #0]
 8011fe0:	681b      	ldr	r3, [r3, #0]
 8011fe2:	2b10      	cmp	r3, #16
 8011fe4:	d003      	beq.n	8011fee <HAL_ADC_ConfigChannel+0x1e6>
 8011fe6:	683b      	ldr	r3, [r7, #0]
 8011fe8:	681b      	ldr	r3, [r3, #0]
 8011fea:	2b11      	cmp	r3, #17
 8011fec:	d11b      	bne.n	8012026 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8011fee:	68fb      	ldr	r3, [r7, #12]
 8011ff0:	685b      	ldr	r3, [r3, #4]
 8011ff2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8011ff6:	68fb      	ldr	r3, [r7, #12]
 8011ff8:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8011ffa:	683b      	ldr	r3, [r7, #0]
 8011ffc:	681b      	ldr	r3, [r3, #0]
 8011ffe:	2b10      	cmp	r3, #16
 8012000:	d111      	bne.n	8012026 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8012002:	4b10      	ldr	r3, [pc, #64]	; (8012044 <HAL_ADC_ConfigChannel+0x23c>)
 8012004:	681b      	ldr	r3, [r3, #0]
 8012006:	4a10      	ldr	r2, [pc, #64]	; (8012048 <HAL_ADC_ConfigChannel+0x240>)
 8012008:	fba2 2303 	umull	r2, r3, r2, r3
 801200c:	0c9a      	lsrs	r2, r3, #18
 801200e:	4613      	mov	r3, r2
 8012010:	009b      	lsls	r3, r3, #2
 8012012:	4413      	add	r3, r2
 8012014:	005b      	lsls	r3, r3, #1
 8012016:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8012018:	e002      	b.n	8012020 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 801201a:	68bb      	ldr	r3, [r7, #8]
 801201c:	3b01      	subs	r3, #1
 801201e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8012020:	68bb      	ldr	r3, [r7, #8]
 8012022:	2b00      	cmp	r3, #0
 8012024:	d1f9      	bne.n	801201a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	2200      	movs	r2, #0
 801202a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 801202e:	2300      	movs	r3, #0
}
 8012030:	4618      	mov	r0, r3
 8012032:	3714      	adds	r7, #20
 8012034:	46bd      	mov	sp, r7
 8012036:	f85d 7b04 	ldr.w	r7, [sp], #4
 801203a:	4770      	bx	lr
 801203c:	40012300 	.word	0x40012300
 8012040:	40012000 	.word	0x40012000
 8012044:	20000084 	.word	0x20000084
 8012048:	431bde83 	.word	0x431bde83

0801204c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 801204c:	b480      	push	{r7}
 801204e:	b085      	sub	sp, #20
 8012050:	af00      	add	r7, sp, #0
 8012052:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8012054:	4b79      	ldr	r3, [pc, #484]	; (801223c <ADC_Init+0x1f0>)
 8012056:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8012058:	68fb      	ldr	r3, [r7, #12]
 801205a:	685b      	ldr	r3, [r3, #4]
 801205c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8012060:	68fb      	ldr	r3, [r7, #12]
 8012062:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8012064:	68fb      	ldr	r3, [r7, #12]
 8012066:	685a      	ldr	r2, [r3, #4]
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	685b      	ldr	r3, [r3, #4]
 801206c:	431a      	orrs	r2, r3
 801206e:	68fb      	ldr	r3, [r7, #12]
 8012070:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	681b      	ldr	r3, [r3, #0]
 8012076:	685a      	ldr	r2, [r3, #4]
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	681b      	ldr	r3, [r3, #0]
 801207c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8012080:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	681b      	ldr	r3, [r3, #0]
 8012086:	6859      	ldr	r1, [r3, #4]
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	691b      	ldr	r3, [r3, #16]
 801208c:	021a      	lsls	r2, r3, #8
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	681b      	ldr	r3, [r3, #0]
 8012092:	430a      	orrs	r2, r1
 8012094:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	681b      	ldr	r3, [r3, #0]
 801209a:	685a      	ldr	r2, [r3, #4]
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	681b      	ldr	r3, [r3, #0]
 80120a0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80120a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	681b      	ldr	r3, [r3, #0]
 80120aa:	6859      	ldr	r1, [r3, #4]
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	689a      	ldr	r2, [r3, #8]
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	681b      	ldr	r3, [r3, #0]
 80120b4:	430a      	orrs	r2, r1
 80120b6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	681b      	ldr	r3, [r3, #0]
 80120bc:	689a      	ldr	r2, [r3, #8]
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	681b      	ldr	r3, [r3, #0]
 80120c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80120c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	681b      	ldr	r3, [r3, #0]
 80120cc:	6899      	ldr	r1, [r3, #8]
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	68da      	ldr	r2, [r3, #12]
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	681b      	ldr	r3, [r3, #0]
 80120d6:	430a      	orrs	r2, r1
 80120d8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80120de:	4a58      	ldr	r2, [pc, #352]	; (8012240 <ADC_Init+0x1f4>)
 80120e0:	4293      	cmp	r3, r2
 80120e2:	d022      	beq.n	801212a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	681b      	ldr	r3, [r3, #0]
 80120e8:	689a      	ldr	r2, [r3, #8]
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	681b      	ldr	r3, [r3, #0]
 80120ee:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80120f2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	681b      	ldr	r3, [r3, #0]
 80120f8:	6899      	ldr	r1, [r3, #8]
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	681b      	ldr	r3, [r3, #0]
 8012102:	430a      	orrs	r2, r1
 8012104:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	681b      	ldr	r3, [r3, #0]
 801210a:	689a      	ldr	r2, [r3, #8]
 801210c:	687b      	ldr	r3, [r7, #4]
 801210e:	681b      	ldr	r3, [r3, #0]
 8012110:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8012114:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	681b      	ldr	r3, [r3, #0]
 801211a:	6899      	ldr	r1, [r3, #8]
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	681b      	ldr	r3, [r3, #0]
 8012124:	430a      	orrs	r2, r1
 8012126:	609a      	str	r2, [r3, #8]
 8012128:	e00f      	b.n	801214a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 801212a:	687b      	ldr	r3, [r7, #4]
 801212c:	681b      	ldr	r3, [r3, #0]
 801212e:	689a      	ldr	r2, [r3, #8]
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	681b      	ldr	r3, [r3, #0]
 8012134:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8012138:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	681b      	ldr	r3, [r3, #0]
 801213e:	689a      	ldr	r2, [r3, #8]
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	681b      	ldr	r3, [r3, #0]
 8012144:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8012148:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	681b      	ldr	r3, [r3, #0]
 801214e:	689a      	ldr	r2, [r3, #8]
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	681b      	ldr	r3, [r3, #0]
 8012154:	f022 0202 	bic.w	r2, r2, #2
 8012158:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	681b      	ldr	r3, [r3, #0]
 801215e:	6899      	ldr	r1, [r3, #8]
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	7e1b      	ldrb	r3, [r3, #24]
 8012164:	005a      	lsls	r2, r3, #1
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	681b      	ldr	r3, [r3, #0]
 801216a:	430a      	orrs	r2, r1
 801216c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012174:	2b00      	cmp	r3, #0
 8012176:	d01b      	beq.n	80121b0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	681b      	ldr	r3, [r3, #0]
 801217c:	685a      	ldr	r2, [r3, #4]
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	681b      	ldr	r3, [r3, #0]
 8012182:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8012186:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	681b      	ldr	r3, [r3, #0]
 801218c:	685a      	ldr	r2, [r3, #4]
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	681b      	ldr	r3, [r3, #0]
 8012192:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8012196:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	681b      	ldr	r3, [r3, #0]
 801219c:	6859      	ldr	r1, [r3, #4]
 801219e:	687b      	ldr	r3, [r7, #4]
 80121a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121a2:	3b01      	subs	r3, #1
 80121a4:	035a      	lsls	r2, r3, #13
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	681b      	ldr	r3, [r3, #0]
 80121aa:	430a      	orrs	r2, r1
 80121ac:	605a      	str	r2, [r3, #4]
 80121ae:	e007      	b.n	80121c0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	681b      	ldr	r3, [r3, #0]
 80121b4:	685a      	ldr	r2, [r3, #4]
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	681b      	ldr	r3, [r3, #0]
 80121ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80121be:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	681b      	ldr	r3, [r3, #0]
 80121c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	681b      	ldr	r3, [r3, #0]
 80121ca:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80121ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	681b      	ldr	r3, [r3, #0]
 80121d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	69db      	ldr	r3, [r3, #28]
 80121da:	3b01      	subs	r3, #1
 80121dc:	051a      	lsls	r2, r3, #20
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	681b      	ldr	r3, [r3, #0]
 80121e2:	430a      	orrs	r2, r1
 80121e4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	681b      	ldr	r3, [r3, #0]
 80121ea:	689a      	ldr	r2, [r3, #8]
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	681b      	ldr	r3, [r3, #0]
 80121f0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80121f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	681b      	ldr	r3, [r3, #0]
 80121fa:	6899      	ldr	r1, [r3, #8]
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012202:	025a      	lsls	r2, r3, #9
 8012204:	687b      	ldr	r3, [r7, #4]
 8012206:	681b      	ldr	r3, [r3, #0]
 8012208:	430a      	orrs	r2, r1
 801220a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	681b      	ldr	r3, [r3, #0]
 8012210:	689a      	ldr	r2, [r3, #8]
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	681b      	ldr	r3, [r3, #0]
 8012216:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801221a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	681b      	ldr	r3, [r3, #0]
 8012220:	6899      	ldr	r1, [r3, #8]
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	695b      	ldr	r3, [r3, #20]
 8012226:	029a      	lsls	r2, r3, #10
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	681b      	ldr	r3, [r3, #0]
 801222c:	430a      	orrs	r2, r1
 801222e:	609a      	str	r2, [r3, #8]
}
 8012230:	bf00      	nop
 8012232:	3714      	adds	r7, #20
 8012234:	46bd      	mov	sp, r7
 8012236:	f85d 7b04 	ldr.w	r7, [sp], #4
 801223a:	4770      	bx	lr
 801223c:	40012300 	.word	0x40012300
 8012240:	0f000001 	.word	0x0f000001

08012244 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8012244:	b580      	push	{r7, lr}
 8012246:	b084      	sub	sp, #16
 8012248:	af00      	add	r7, sp, #0
 801224a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012250:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8012252:	68fb      	ldr	r3, [r7, #12]
 8012254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012256:	f003 0350 	and.w	r3, r3, #80	; 0x50
 801225a:	2b00      	cmp	r3, #0
 801225c:	d13c      	bne.n	80122d8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 801225e:	68fb      	ldr	r3, [r7, #12]
 8012260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012262:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8012266:	68fb      	ldr	r3, [r7, #12]
 8012268:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 801226a:	68fb      	ldr	r3, [r7, #12]
 801226c:	681b      	ldr	r3, [r3, #0]
 801226e:	689b      	ldr	r3, [r3, #8]
 8012270:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8012274:	2b00      	cmp	r3, #0
 8012276:	d12b      	bne.n	80122d0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8012278:	68fb      	ldr	r3, [r7, #12]
 801227a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 801227c:	2b00      	cmp	r3, #0
 801227e:	d127      	bne.n	80122d0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8012280:	68fb      	ldr	r3, [r7, #12]
 8012282:	681b      	ldr	r3, [r3, #0]
 8012284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012286:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 801228a:	2b00      	cmp	r3, #0
 801228c:	d006      	beq.n	801229c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 801228e:	68fb      	ldr	r3, [r7, #12]
 8012290:	681b      	ldr	r3, [r3, #0]
 8012292:	689b      	ldr	r3, [r3, #8]
 8012294:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8012298:	2b00      	cmp	r3, #0
 801229a:	d119      	bne.n	80122d0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 801229c:	68fb      	ldr	r3, [r7, #12]
 801229e:	681b      	ldr	r3, [r3, #0]
 80122a0:	685a      	ldr	r2, [r3, #4]
 80122a2:	68fb      	ldr	r3, [r7, #12]
 80122a4:	681b      	ldr	r3, [r3, #0]
 80122a6:	f022 0220 	bic.w	r2, r2, #32
 80122aa:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80122ac:	68fb      	ldr	r3, [r7, #12]
 80122ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80122b0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80122b4:	68fb      	ldr	r3, [r7, #12]
 80122b6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80122b8:	68fb      	ldr	r3, [r7, #12]
 80122ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80122bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80122c0:	2b00      	cmp	r3, #0
 80122c2:	d105      	bne.n	80122d0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80122c4:	68fb      	ldr	r3, [r7, #12]
 80122c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80122c8:	f043 0201 	orr.w	r2, r3, #1
 80122cc:	68fb      	ldr	r3, [r7, #12]
 80122ce:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80122d0:	68f8      	ldr	r0, [r7, #12]
 80122d2:	f7f0 f9f9 	bl	80026c8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80122d6:	e00e      	b.n	80122f6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80122d8:	68fb      	ldr	r3, [r7, #12]
 80122da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80122dc:	f003 0310 	and.w	r3, r3, #16
 80122e0:	2b00      	cmp	r3, #0
 80122e2:	d003      	beq.n	80122ec <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80122e4:	68f8      	ldr	r0, [r7, #12]
 80122e6:	f7ff fd85 	bl	8011df4 <HAL_ADC_ErrorCallback>
}
 80122ea:	e004      	b.n	80122f6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80122ec:	68fb      	ldr	r3, [r7, #12]
 80122ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80122f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80122f2:	6878      	ldr	r0, [r7, #4]
 80122f4:	4798      	blx	r3
}
 80122f6:	bf00      	nop
 80122f8:	3710      	adds	r7, #16
 80122fa:	46bd      	mov	sp, r7
 80122fc:	bd80      	pop	{r7, pc}

080122fe <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80122fe:	b580      	push	{r7, lr}
 8012300:	b084      	sub	sp, #16
 8012302:	af00      	add	r7, sp, #0
 8012304:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801230a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 801230c:	68f8      	ldr	r0, [r7, #12]
 801230e:	f7ff fd5d 	bl	8011dcc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8012312:	bf00      	nop
 8012314:	3710      	adds	r7, #16
 8012316:	46bd      	mov	sp, r7
 8012318:	bd80      	pop	{r7, pc}

0801231a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 801231a:	b580      	push	{r7, lr}
 801231c:	b084      	sub	sp, #16
 801231e:	af00      	add	r7, sp, #0
 8012320:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012326:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8012328:	68fb      	ldr	r3, [r7, #12]
 801232a:	2240      	movs	r2, #64	; 0x40
 801232c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 801232e:	68fb      	ldr	r3, [r7, #12]
 8012330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012332:	f043 0204 	orr.w	r2, r3, #4
 8012336:	68fb      	ldr	r3, [r7, #12]
 8012338:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 801233a:	68f8      	ldr	r0, [r7, #12]
 801233c:	f7ff fd5a 	bl	8011df4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8012340:	bf00      	nop
 8012342:	3710      	adds	r7, #16
 8012344:	46bd      	mov	sp, r7
 8012346:	bd80      	pop	{r7, pc}

08012348 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8012348:	b480      	push	{r7}
 801234a:	b083      	sub	sp, #12
 801234c:	af00      	add	r7, sp, #0
 801234e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8012350:	bf00      	nop
 8012352:	370c      	adds	r7, #12
 8012354:	46bd      	mov	sp, r7
 8012356:	f85d 7b04 	ldr.w	r7, [sp], #4
 801235a:	4770      	bx	lr

0801235c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 801235c:	b580      	push	{r7, lr}
 801235e:	b084      	sub	sp, #16
 8012360:	af00      	add	r7, sp, #0
 8012362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	2b00      	cmp	r3, #0
 8012368:	d101      	bne.n	801236e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 801236a:	2301      	movs	r3, #1
 801236c:	e0ed      	b.n	801254a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012374:	b2db      	uxtb	r3, r3
 8012376:	2b00      	cmp	r3, #0
 8012378:	d102      	bne.n	8012380 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 801237a:	6878      	ldr	r0, [r7, #4]
 801237c:	f7f0 fa20 	bl	80027c0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	681b      	ldr	r3, [r3, #0]
 8012384:	681a      	ldr	r2, [r3, #0]
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	681b      	ldr	r3, [r3, #0]
 801238a:	f042 0201 	orr.w	r2, r2, #1
 801238e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8012390:	f7ff fa58 	bl	8011844 <HAL_GetTick>
 8012394:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8012396:	e012      	b.n	80123be <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8012398:	f7ff fa54 	bl	8011844 <HAL_GetTick>
 801239c:	4602      	mov	r2, r0
 801239e:	68fb      	ldr	r3, [r7, #12]
 80123a0:	1ad3      	subs	r3, r2, r3
 80123a2:	2b0a      	cmp	r3, #10
 80123a4:	d90b      	bls.n	80123be <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80123aa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	2205      	movs	r2, #5
 80123b6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80123ba:	2301      	movs	r3, #1
 80123bc:	e0c5      	b.n	801254a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	681b      	ldr	r3, [r3, #0]
 80123c2:	685b      	ldr	r3, [r3, #4]
 80123c4:	f003 0301 	and.w	r3, r3, #1
 80123c8:	2b00      	cmp	r3, #0
 80123ca:	d0e5      	beq.n	8012398 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	681b      	ldr	r3, [r3, #0]
 80123d0:	681a      	ldr	r2, [r3, #0]
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	681b      	ldr	r3, [r3, #0]
 80123d6:	f022 0202 	bic.w	r2, r2, #2
 80123da:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80123dc:	f7ff fa32 	bl	8011844 <HAL_GetTick>
 80123e0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80123e2:	e012      	b.n	801240a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80123e4:	f7ff fa2e 	bl	8011844 <HAL_GetTick>
 80123e8:	4602      	mov	r2, r0
 80123ea:	68fb      	ldr	r3, [r7, #12]
 80123ec:	1ad3      	subs	r3, r2, r3
 80123ee:	2b0a      	cmp	r3, #10
 80123f0:	d90b      	bls.n	801240a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80123f6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	2205      	movs	r2, #5
 8012402:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8012406:	2301      	movs	r3, #1
 8012408:	e09f      	b.n	801254a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	681b      	ldr	r3, [r3, #0]
 801240e:	685b      	ldr	r3, [r3, #4]
 8012410:	f003 0302 	and.w	r3, r3, #2
 8012414:	2b00      	cmp	r3, #0
 8012416:	d1e5      	bne.n	80123e4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	7e1b      	ldrb	r3, [r3, #24]
 801241c:	2b01      	cmp	r3, #1
 801241e:	d108      	bne.n	8012432 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	681b      	ldr	r3, [r3, #0]
 8012424:	681a      	ldr	r2, [r3, #0]
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	681b      	ldr	r3, [r3, #0]
 801242a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 801242e:	601a      	str	r2, [r3, #0]
 8012430:	e007      	b.n	8012442 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	681b      	ldr	r3, [r3, #0]
 8012436:	681a      	ldr	r2, [r3, #0]
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	681b      	ldr	r3, [r3, #0]
 801243c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8012440:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	7e5b      	ldrb	r3, [r3, #25]
 8012446:	2b01      	cmp	r3, #1
 8012448:	d108      	bne.n	801245c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	681b      	ldr	r3, [r3, #0]
 801244e:	681a      	ldr	r2, [r3, #0]
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	681b      	ldr	r3, [r3, #0]
 8012454:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8012458:	601a      	str	r2, [r3, #0]
 801245a:	e007      	b.n	801246c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	681b      	ldr	r3, [r3, #0]
 8012460:	681a      	ldr	r2, [r3, #0]
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	681b      	ldr	r3, [r3, #0]
 8012466:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801246a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	7e9b      	ldrb	r3, [r3, #26]
 8012470:	2b01      	cmp	r3, #1
 8012472:	d108      	bne.n	8012486 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	681b      	ldr	r3, [r3, #0]
 8012478:	681a      	ldr	r2, [r3, #0]
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	681b      	ldr	r3, [r3, #0]
 801247e:	f042 0220 	orr.w	r2, r2, #32
 8012482:	601a      	str	r2, [r3, #0]
 8012484:	e007      	b.n	8012496 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	681b      	ldr	r3, [r3, #0]
 801248a:	681a      	ldr	r2, [r3, #0]
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	681b      	ldr	r3, [r3, #0]
 8012490:	f022 0220 	bic.w	r2, r2, #32
 8012494:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	7edb      	ldrb	r3, [r3, #27]
 801249a:	2b01      	cmp	r3, #1
 801249c:	d108      	bne.n	80124b0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	681b      	ldr	r3, [r3, #0]
 80124a2:	681a      	ldr	r2, [r3, #0]
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	681b      	ldr	r3, [r3, #0]
 80124a8:	f022 0210 	bic.w	r2, r2, #16
 80124ac:	601a      	str	r2, [r3, #0]
 80124ae:	e007      	b.n	80124c0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	681b      	ldr	r3, [r3, #0]
 80124b4:	681a      	ldr	r2, [r3, #0]
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	681b      	ldr	r3, [r3, #0]
 80124ba:	f042 0210 	orr.w	r2, r2, #16
 80124be:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	7f1b      	ldrb	r3, [r3, #28]
 80124c4:	2b01      	cmp	r3, #1
 80124c6:	d108      	bne.n	80124da <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	681b      	ldr	r3, [r3, #0]
 80124cc:	681a      	ldr	r2, [r3, #0]
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	681b      	ldr	r3, [r3, #0]
 80124d2:	f042 0208 	orr.w	r2, r2, #8
 80124d6:	601a      	str	r2, [r3, #0]
 80124d8:	e007      	b.n	80124ea <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	681b      	ldr	r3, [r3, #0]
 80124de:	681a      	ldr	r2, [r3, #0]
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	681b      	ldr	r3, [r3, #0]
 80124e4:	f022 0208 	bic.w	r2, r2, #8
 80124e8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	7f5b      	ldrb	r3, [r3, #29]
 80124ee:	2b01      	cmp	r3, #1
 80124f0:	d108      	bne.n	8012504 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	681b      	ldr	r3, [r3, #0]
 80124f6:	681a      	ldr	r2, [r3, #0]
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	681b      	ldr	r3, [r3, #0]
 80124fc:	f042 0204 	orr.w	r2, r2, #4
 8012500:	601a      	str	r2, [r3, #0]
 8012502:	e007      	b.n	8012514 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	681b      	ldr	r3, [r3, #0]
 8012508:	681a      	ldr	r2, [r3, #0]
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	681b      	ldr	r3, [r3, #0]
 801250e:	f022 0204 	bic.w	r2, r2, #4
 8012512:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	689a      	ldr	r2, [r3, #8]
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	68db      	ldr	r3, [r3, #12]
 801251c:	431a      	orrs	r2, r3
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	691b      	ldr	r3, [r3, #16]
 8012522:	431a      	orrs	r2, r3
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	695b      	ldr	r3, [r3, #20]
 8012528:	ea42 0103 	orr.w	r1, r2, r3
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	685b      	ldr	r3, [r3, #4]
 8012530:	1e5a      	subs	r2, r3, #1
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	681b      	ldr	r3, [r3, #0]
 8012536:	430a      	orrs	r2, r1
 8012538:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	2200      	movs	r2, #0
 801253e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	2201      	movs	r2, #1
 8012544:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8012548:	2300      	movs	r3, #0
}
 801254a:	4618      	mov	r0, r3
 801254c:	3710      	adds	r7, #16
 801254e:	46bd      	mov	sp, r7
 8012550:	bd80      	pop	{r7, pc}

08012552 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8012552:	b480      	push	{r7}
 8012554:	b087      	sub	sp, #28
 8012556:	af00      	add	r7, sp, #0
 8012558:	60f8      	str	r0, [r7, #12]
 801255a:	60b9      	str	r1, [r7, #8]
 801255c:	607a      	str	r2, [r7, #4]
 801255e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8012560:	68fb      	ldr	r3, [r7, #12]
 8012562:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012566:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8012568:	7dfb      	ldrb	r3, [r7, #23]
 801256a:	2b01      	cmp	r3, #1
 801256c:	d003      	beq.n	8012576 <HAL_CAN_GetRxMessage+0x24>
 801256e:	7dfb      	ldrb	r3, [r7, #23]
 8012570:	2b02      	cmp	r3, #2
 8012572:	f040 80f3 	bne.w	801275c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8012576:	68bb      	ldr	r3, [r7, #8]
 8012578:	2b00      	cmp	r3, #0
 801257a:	d10e      	bne.n	801259a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 801257c:	68fb      	ldr	r3, [r7, #12]
 801257e:	681b      	ldr	r3, [r3, #0]
 8012580:	68db      	ldr	r3, [r3, #12]
 8012582:	f003 0303 	and.w	r3, r3, #3
 8012586:	2b00      	cmp	r3, #0
 8012588:	d116      	bne.n	80125b8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 801258a:	68fb      	ldr	r3, [r7, #12]
 801258c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801258e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8012592:	68fb      	ldr	r3, [r7, #12]
 8012594:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8012596:	2301      	movs	r3, #1
 8012598:	e0e7      	b.n	801276a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 801259a:	68fb      	ldr	r3, [r7, #12]
 801259c:	681b      	ldr	r3, [r3, #0]
 801259e:	691b      	ldr	r3, [r3, #16]
 80125a0:	f003 0303 	and.w	r3, r3, #3
 80125a4:	2b00      	cmp	r3, #0
 80125a6:	d107      	bne.n	80125b8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80125a8:	68fb      	ldr	r3, [r7, #12]
 80125aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80125ac:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80125b0:	68fb      	ldr	r3, [r7, #12]
 80125b2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80125b4:	2301      	movs	r3, #1
 80125b6:	e0d8      	b.n	801276a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80125b8:	68fb      	ldr	r3, [r7, #12]
 80125ba:	681a      	ldr	r2, [r3, #0]
 80125bc:	68bb      	ldr	r3, [r7, #8]
 80125be:	331b      	adds	r3, #27
 80125c0:	011b      	lsls	r3, r3, #4
 80125c2:	4413      	add	r3, r2
 80125c4:	681b      	ldr	r3, [r3, #0]
 80125c6:	f003 0204 	and.w	r2, r3, #4
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	689b      	ldr	r3, [r3, #8]
 80125d2:	2b00      	cmp	r3, #0
 80125d4:	d10c      	bne.n	80125f0 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80125d6:	68fb      	ldr	r3, [r7, #12]
 80125d8:	681a      	ldr	r2, [r3, #0]
 80125da:	68bb      	ldr	r3, [r7, #8]
 80125dc:	331b      	adds	r3, #27
 80125de:	011b      	lsls	r3, r3, #4
 80125e0:	4413      	add	r3, r2
 80125e2:	681b      	ldr	r3, [r3, #0]
 80125e4:	0d5b      	lsrs	r3, r3, #21
 80125e6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	601a      	str	r2, [r3, #0]
 80125ee:	e00b      	b.n	8012608 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80125f0:	68fb      	ldr	r3, [r7, #12]
 80125f2:	681a      	ldr	r2, [r3, #0]
 80125f4:	68bb      	ldr	r3, [r7, #8]
 80125f6:	331b      	adds	r3, #27
 80125f8:	011b      	lsls	r3, r3, #4
 80125fa:	4413      	add	r3, r2
 80125fc:	681b      	ldr	r3, [r3, #0]
 80125fe:	08db      	lsrs	r3, r3, #3
 8012600:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8012608:	68fb      	ldr	r3, [r7, #12]
 801260a:	681a      	ldr	r2, [r3, #0]
 801260c:	68bb      	ldr	r3, [r7, #8]
 801260e:	331b      	adds	r3, #27
 8012610:	011b      	lsls	r3, r3, #4
 8012612:	4413      	add	r3, r2
 8012614:	681b      	ldr	r3, [r3, #0]
 8012616:	f003 0202 	and.w	r2, r3, #2
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 801261e:	68fb      	ldr	r3, [r7, #12]
 8012620:	681a      	ldr	r2, [r3, #0]
 8012622:	68bb      	ldr	r3, [r7, #8]
 8012624:	331b      	adds	r3, #27
 8012626:	011b      	lsls	r3, r3, #4
 8012628:	4413      	add	r3, r2
 801262a:	3304      	adds	r3, #4
 801262c:	681b      	ldr	r3, [r3, #0]
 801262e:	f003 020f 	and.w	r2, r3, #15
 8012632:	687b      	ldr	r3, [r7, #4]
 8012634:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8012636:	68fb      	ldr	r3, [r7, #12]
 8012638:	681a      	ldr	r2, [r3, #0]
 801263a:	68bb      	ldr	r3, [r7, #8]
 801263c:	331b      	adds	r3, #27
 801263e:	011b      	lsls	r3, r3, #4
 8012640:	4413      	add	r3, r2
 8012642:	3304      	adds	r3, #4
 8012644:	681b      	ldr	r3, [r3, #0]
 8012646:	0a1b      	lsrs	r3, r3, #8
 8012648:	b2da      	uxtb	r2, r3
 801264a:	687b      	ldr	r3, [r7, #4]
 801264c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 801264e:	68fb      	ldr	r3, [r7, #12]
 8012650:	681a      	ldr	r2, [r3, #0]
 8012652:	68bb      	ldr	r3, [r7, #8]
 8012654:	331b      	adds	r3, #27
 8012656:	011b      	lsls	r3, r3, #4
 8012658:	4413      	add	r3, r2
 801265a:	3304      	adds	r3, #4
 801265c:	681b      	ldr	r3, [r3, #0]
 801265e:	0c1b      	lsrs	r3, r3, #16
 8012660:	b29a      	uxth	r2, r3
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8012666:	68fb      	ldr	r3, [r7, #12]
 8012668:	681a      	ldr	r2, [r3, #0]
 801266a:	68bb      	ldr	r3, [r7, #8]
 801266c:	011b      	lsls	r3, r3, #4
 801266e:	4413      	add	r3, r2
 8012670:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8012674:	681b      	ldr	r3, [r3, #0]
 8012676:	b2da      	uxtb	r2, r3
 8012678:	683b      	ldr	r3, [r7, #0]
 801267a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 801267c:	68fb      	ldr	r3, [r7, #12]
 801267e:	681a      	ldr	r2, [r3, #0]
 8012680:	68bb      	ldr	r3, [r7, #8]
 8012682:	011b      	lsls	r3, r3, #4
 8012684:	4413      	add	r3, r2
 8012686:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 801268a:	681b      	ldr	r3, [r3, #0]
 801268c:	0a1a      	lsrs	r2, r3, #8
 801268e:	683b      	ldr	r3, [r7, #0]
 8012690:	3301      	adds	r3, #1
 8012692:	b2d2      	uxtb	r2, r2
 8012694:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8012696:	68fb      	ldr	r3, [r7, #12]
 8012698:	681a      	ldr	r2, [r3, #0]
 801269a:	68bb      	ldr	r3, [r7, #8]
 801269c:	011b      	lsls	r3, r3, #4
 801269e:	4413      	add	r3, r2
 80126a0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80126a4:	681b      	ldr	r3, [r3, #0]
 80126a6:	0c1a      	lsrs	r2, r3, #16
 80126a8:	683b      	ldr	r3, [r7, #0]
 80126aa:	3302      	adds	r3, #2
 80126ac:	b2d2      	uxtb	r2, r2
 80126ae:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80126b0:	68fb      	ldr	r3, [r7, #12]
 80126b2:	681a      	ldr	r2, [r3, #0]
 80126b4:	68bb      	ldr	r3, [r7, #8]
 80126b6:	011b      	lsls	r3, r3, #4
 80126b8:	4413      	add	r3, r2
 80126ba:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80126be:	681b      	ldr	r3, [r3, #0]
 80126c0:	0e1a      	lsrs	r2, r3, #24
 80126c2:	683b      	ldr	r3, [r7, #0]
 80126c4:	3303      	adds	r3, #3
 80126c6:	b2d2      	uxtb	r2, r2
 80126c8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80126ca:	68fb      	ldr	r3, [r7, #12]
 80126cc:	681a      	ldr	r2, [r3, #0]
 80126ce:	68bb      	ldr	r3, [r7, #8]
 80126d0:	011b      	lsls	r3, r3, #4
 80126d2:	4413      	add	r3, r2
 80126d4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80126d8:	681a      	ldr	r2, [r3, #0]
 80126da:	683b      	ldr	r3, [r7, #0]
 80126dc:	3304      	adds	r3, #4
 80126de:	b2d2      	uxtb	r2, r2
 80126e0:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80126e2:	68fb      	ldr	r3, [r7, #12]
 80126e4:	681a      	ldr	r2, [r3, #0]
 80126e6:	68bb      	ldr	r3, [r7, #8]
 80126e8:	011b      	lsls	r3, r3, #4
 80126ea:	4413      	add	r3, r2
 80126ec:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80126f0:	681b      	ldr	r3, [r3, #0]
 80126f2:	0a1a      	lsrs	r2, r3, #8
 80126f4:	683b      	ldr	r3, [r7, #0]
 80126f6:	3305      	adds	r3, #5
 80126f8:	b2d2      	uxtb	r2, r2
 80126fa:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80126fc:	68fb      	ldr	r3, [r7, #12]
 80126fe:	681a      	ldr	r2, [r3, #0]
 8012700:	68bb      	ldr	r3, [r7, #8]
 8012702:	011b      	lsls	r3, r3, #4
 8012704:	4413      	add	r3, r2
 8012706:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 801270a:	681b      	ldr	r3, [r3, #0]
 801270c:	0c1a      	lsrs	r2, r3, #16
 801270e:	683b      	ldr	r3, [r7, #0]
 8012710:	3306      	adds	r3, #6
 8012712:	b2d2      	uxtb	r2, r2
 8012714:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8012716:	68fb      	ldr	r3, [r7, #12]
 8012718:	681a      	ldr	r2, [r3, #0]
 801271a:	68bb      	ldr	r3, [r7, #8]
 801271c:	011b      	lsls	r3, r3, #4
 801271e:	4413      	add	r3, r2
 8012720:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8012724:	681b      	ldr	r3, [r3, #0]
 8012726:	0e1a      	lsrs	r2, r3, #24
 8012728:	683b      	ldr	r3, [r7, #0]
 801272a:	3307      	adds	r3, #7
 801272c:	b2d2      	uxtb	r2, r2
 801272e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8012730:	68bb      	ldr	r3, [r7, #8]
 8012732:	2b00      	cmp	r3, #0
 8012734:	d108      	bne.n	8012748 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8012736:	68fb      	ldr	r3, [r7, #12]
 8012738:	681b      	ldr	r3, [r3, #0]
 801273a:	68da      	ldr	r2, [r3, #12]
 801273c:	68fb      	ldr	r3, [r7, #12]
 801273e:	681b      	ldr	r3, [r3, #0]
 8012740:	f042 0220 	orr.w	r2, r2, #32
 8012744:	60da      	str	r2, [r3, #12]
 8012746:	e007      	b.n	8012758 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8012748:	68fb      	ldr	r3, [r7, #12]
 801274a:	681b      	ldr	r3, [r3, #0]
 801274c:	691a      	ldr	r2, [r3, #16]
 801274e:	68fb      	ldr	r3, [r7, #12]
 8012750:	681b      	ldr	r3, [r3, #0]
 8012752:	f042 0220 	orr.w	r2, r2, #32
 8012756:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8012758:	2300      	movs	r3, #0
 801275a:	e006      	b.n	801276a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 801275c:	68fb      	ldr	r3, [r7, #12]
 801275e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012760:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8012764:	68fb      	ldr	r3, [r7, #12]
 8012766:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8012768:	2301      	movs	r3, #1
  }
}
 801276a:	4618      	mov	r0, r3
 801276c:	371c      	adds	r7, #28
 801276e:	46bd      	mov	sp, r7
 8012770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012774:	4770      	bx	lr

08012776 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8012776:	b580      	push	{r7, lr}
 8012778:	b08a      	sub	sp, #40	; 0x28
 801277a:	af00      	add	r7, sp, #0
 801277c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 801277e:	2300      	movs	r3, #0
 8012780:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	681b      	ldr	r3, [r3, #0]
 8012786:	695b      	ldr	r3, [r3, #20]
 8012788:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	681b      	ldr	r3, [r3, #0]
 801278e:	685b      	ldr	r3, [r3, #4]
 8012790:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8012792:	687b      	ldr	r3, [r7, #4]
 8012794:	681b      	ldr	r3, [r3, #0]
 8012796:	689b      	ldr	r3, [r3, #8]
 8012798:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 801279a:	687b      	ldr	r3, [r7, #4]
 801279c:	681b      	ldr	r3, [r3, #0]
 801279e:	68db      	ldr	r3, [r3, #12]
 80127a0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	681b      	ldr	r3, [r3, #0]
 80127a6:	691b      	ldr	r3, [r3, #16]
 80127a8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80127aa:	687b      	ldr	r3, [r7, #4]
 80127ac:	681b      	ldr	r3, [r3, #0]
 80127ae:	699b      	ldr	r3, [r3, #24]
 80127b0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80127b2:	6a3b      	ldr	r3, [r7, #32]
 80127b4:	f003 0301 	and.w	r3, r3, #1
 80127b8:	2b00      	cmp	r3, #0
 80127ba:	d07c      	beq.n	80128b6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80127bc:	69bb      	ldr	r3, [r7, #24]
 80127be:	f003 0301 	and.w	r3, r3, #1
 80127c2:	2b00      	cmp	r3, #0
 80127c4:	d023      	beq.n	801280e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	681b      	ldr	r3, [r3, #0]
 80127ca:	2201      	movs	r2, #1
 80127cc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80127ce:	69bb      	ldr	r3, [r7, #24]
 80127d0:	f003 0302 	and.w	r3, r3, #2
 80127d4:	2b00      	cmp	r3, #0
 80127d6:	d003      	beq.n	80127e0 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80127d8:	6878      	ldr	r0, [r7, #4]
 80127da:	f000 f983 	bl	8012ae4 <HAL_CAN_TxMailbox0CompleteCallback>
 80127de:	e016      	b.n	801280e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80127e0:	69bb      	ldr	r3, [r7, #24]
 80127e2:	f003 0304 	and.w	r3, r3, #4
 80127e6:	2b00      	cmp	r3, #0
 80127e8:	d004      	beq.n	80127f4 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80127ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127ec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80127f0:	627b      	str	r3, [r7, #36]	; 0x24
 80127f2:	e00c      	b.n	801280e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80127f4:	69bb      	ldr	r3, [r7, #24]
 80127f6:	f003 0308 	and.w	r3, r3, #8
 80127fa:	2b00      	cmp	r3, #0
 80127fc:	d004      	beq.n	8012808 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80127fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012800:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8012804:	627b      	str	r3, [r7, #36]	; 0x24
 8012806:	e002      	b.n	801280e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8012808:	6878      	ldr	r0, [r7, #4]
 801280a:	f000 f989 	bl	8012b20 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 801280e:	69bb      	ldr	r3, [r7, #24]
 8012810:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012814:	2b00      	cmp	r3, #0
 8012816:	d024      	beq.n	8012862 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	681b      	ldr	r3, [r3, #0]
 801281c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012820:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8012822:	69bb      	ldr	r3, [r7, #24]
 8012824:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8012828:	2b00      	cmp	r3, #0
 801282a:	d003      	beq.n	8012834 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 801282c:	6878      	ldr	r0, [r7, #4]
 801282e:	f000 f963 	bl	8012af8 <HAL_CAN_TxMailbox1CompleteCallback>
 8012832:	e016      	b.n	8012862 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8012834:	69bb      	ldr	r3, [r7, #24]
 8012836:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801283a:	2b00      	cmp	r3, #0
 801283c:	d004      	beq.n	8012848 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 801283e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012840:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8012844:	627b      	str	r3, [r7, #36]	; 0x24
 8012846:	e00c      	b.n	8012862 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8012848:	69bb      	ldr	r3, [r7, #24]
 801284a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801284e:	2b00      	cmp	r3, #0
 8012850:	d004      	beq.n	801285c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8012852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012854:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8012858:	627b      	str	r3, [r7, #36]	; 0x24
 801285a:	e002      	b.n	8012862 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 801285c:	6878      	ldr	r0, [r7, #4]
 801285e:	f000 f969 	bl	8012b34 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8012862:	69bb      	ldr	r3, [r7, #24]
 8012864:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012868:	2b00      	cmp	r3, #0
 801286a:	d024      	beq.n	80128b6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	681b      	ldr	r3, [r3, #0]
 8012870:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8012874:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8012876:	69bb      	ldr	r3, [r7, #24]
 8012878:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801287c:	2b00      	cmp	r3, #0
 801287e:	d003      	beq.n	8012888 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8012880:	6878      	ldr	r0, [r7, #4]
 8012882:	f000 f943 	bl	8012b0c <HAL_CAN_TxMailbox2CompleteCallback>
 8012886:	e016      	b.n	80128b6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8012888:	69bb      	ldr	r3, [r7, #24]
 801288a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801288e:	2b00      	cmp	r3, #0
 8012890:	d004      	beq.n	801289c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8012892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012894:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012898:	627b      	str	r3, [r7, #36]	; 0x24
 801289a:	e00c      	b.n	80128b6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 801289c:	69bb      	ldr	r3, [r7, #24]
 801289e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80128a2:	2b00      	cmp	r3, #0
 80128a4:	d004      	beq.n	80128b0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80128a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80128ac:	627b      	str	r3, [r7, #36]	; 0x24
 80128ae:	e002      	b.n	80128b6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80128b0:	6878      	ldr	r0, [r7, #4]
 80128b2:	f000 f949 	bl	8012b48 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80128b6:	6a3b      	ldr	r3, [r7, #32]
 80128b8:	f003 0308 	and.w	r3, r3, #8
 80128bc:	2b00      	cmp	r3, #0
 80128be:	d00c      	beq.n	80128da <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80128c0:	697b      	ldr	r3, [r7, #20]
 80128c2:	f003 0310 	and.w	r3, r3, #16
 80128c6:	2b00      	cmp	r3, #0
 80128c8:	d007      	beq.n	80128da <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80128ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80128d0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	681b      	ldr	r3, [r3, #0]
 80128d6:	2210      	movs	r2, #16
 80128d8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80128da:	6a3b      	ldr	r3, [r7, #32]
 80128dc:	f003 0304 	and.w	r3, r3, #4
 80128e0:	2b00      	cmp	r3, #0
 80128e2:	d00b      	beq.n	80128fc <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80128e4:	697b      	ldr	r3, [r7, #20]
 80128e6:	f003 0308 	and.w	r3, r3, #8
 80128ea:	2b00      	cmp	r3, #0
 80128ec:	d006      	beq.n	80128fc <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	681b      	ldr	r3, [r3, #0]
 80128f2:	2208      	movs	r2, #8
 80128f4:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80128f6:	6878      	ldr	r0, [r7, #4]
 80128f8:	f000 f930 	bl	8012b5c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80128fc:	6a3b      	ldr	r3, [r7, #32]
 80128fe:	f003 0302 	and.w	r3, r3, #2
 8012902:	2b00      	cmp	r3, #0
 8012904:	d009      	beq.n	801291a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	681b      	ldr	r3, [r3, #0]
 801290a:	68db      	ldr	r3, [r3, #12]
 801290c:	f003 0303 	and.w	r3, r3, #3
 8012910:	2b00      	cmp	r3, #0
 8012912:	d002      	beq.n	801291a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8012914:	6878      	ldr	r0, [r7, #4]
 8012916:	f7ee ff2b 	bl	8001770 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 801291a:	6a3b      	ldr	r3, [r7, #32]
 801291c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012920:	2b00      	cmp	r3, #0
 8012922:	d00c      	beq.n	801293e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8012924:	693b      	ldr	r3, [r7, #16]
 8012926:	f003 0310 	and.w	r3, r3, #16
 801292a:	2b00      	cmp	r3, #0
 801292c:	d007      	beq.n	801293e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 801292e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012930:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8012934:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	681b      	ldr	r3, [r3, #0]
 801293a:	2210      	movs	r2, #16
 801293c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 801293e:	6a3b      	ldr	r3, [r7, #32]
 8012940:	f003 0320 	and.w	r3, r3, #32
 8012944:	2b00      	cmp	r3, #0
 8012946:	d00b      	beq.n	8012960 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8012948:	693b      	ldr	r3, [r7, #16]
 801294a:	f003 0308 	and.w	r3, r3, #8
 801294e:	2b00      	cmp	r3, #0
 8012950:	d006      	beq.n	8012960 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	681b      	ldr	r3, [r3, #0]
 8012956:	2208      	movs	r2, #8
 8012958:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 801295a:	6878      	ldr	r0, [r7, #4]
 801295c:	f000 f908 	bl	8012b70 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8012960:	6a3b      	ldr	r3, [r7, #32]
 8012962:	f003 0310 	and.w	r3, r3, #16
 8012966:	2b00      	cmp	r3, #0
 8012968:	d009      	beq.n	801297e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	681b      	ldr	r3, [r3, #0]
 801296e:	691b      	ldr	r3, [r3, #16]
 8012970:	f003 0303 	and.w	r3, r3, #3
 8012974:	2b00      	cmp	r3, #0
 8012976:	d002      	beq.n	801297e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8012978:	6878      	ldr	r0, [r7, #4]
 801297a:	f7ee ff45 	bl	8001808 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 801297e:	6a3b      	ldr	r3, [r7, #32]
 8012980:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012984:	2b00      	cmp	r3, #0
 8012986:	d00b      	beq.n	80129a0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8012988:	69fb      	ldr	r3, [r7, #28]
 801298a:	f003 0310 	and.w	r3, r3, #16
 801298e:	2b00      	cmp	r3, #0
 8012990:	d006      	beq.n	80129a0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8012992:	687b      	ldr	r3, [r7, #4]
 8012994:	681b      	ldr	r3, [r3, #0]
 8012996:	2210      	movs	r2, #16
 8012998:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 801299a:	6878      	ldr	r0, [r7, #4]
 801299c:	f000 f8f2 	bl	8012b84 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80129a0:	6a3b      	ldr	r3, [r7, #32]
 80129a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80129a6:	2b00      	cmp	r3, #0
 80129a8:	d00b      	beq.n	80129c2 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80129aa:	69fb      	ldr	r3, [r7, #28]
 80129ac:	f003 0308 	and.w	r3, r3, #8
 80129b0:	2b00      	cmp	r3, #0
 80129b2:	d006      	beq.n	80129c2 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	681b      	ldr	r3, [r3, #0]
 80129b8:	2208      	movs	r2, #8
 80129ba:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80129bc:	6878      	ldr	r0, [r7, #4]
 80129be:	f000 f8eb 	bl	8012b98 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80129c2:	6a3b      	ldr	r3, [r7, #32]
 80129c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80129c8:	2b00      	cmp	r3, #0
 80129ca:	d07b      	beq.n	8012ac4 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80129cc:	69fb      	ldr	r3, [r7, #28]
 80129ce:	f003 0304 	and.w	r3, r3, #4
 80129d2:	2b00      	cmp	r3, #0
 80129d4:	d072      	beq.n	8012abc <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80129d6:	6a3b      	ldr	r3, [r7, #32]
 80129d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80129dc:	2b00      	cmp	r3, #0
 80129de:	d008      	beq.n	80129f2 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80129e0:	68fb      	ldr	r3, [r7, #12]
 80129e2:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80129e6:	2b00      	cmp	r3, #0
 80129e8:	d003      	beq.n	80129f2 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80129ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129ec:	f043 0301 	orr.w	r3, r3, #1
 80129f0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80129f2:	6a3b      	ldr	r3, [r7, #32]
 80129f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80129f8:	2b00      	cmp	r3, #0
 80129fa:	d008      	beq.n	8012a0e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80129fc:	68fb      	ldr	r3, [r7, #12]
 80129fe:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8012a02:	2b00      	cmp	r3, #0
 8012a04:	d003      	beq.n	8012a0e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8012a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a08:	f043 0302 	orr.w	r3, r3, #2
 8012a0c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8012a0e:	6a3b      	ldr	r3, [r7, #32]
 8012a10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8012a14:	2b00      	cmp	r3, #0
 8012a16:	d008      	beq.n	8012a2a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8012a18:	68fb      	ldr	r3, [r7, #12]
 8012a1a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8012a1e:	2b00      	cmp	r3, #0
 8012a20:	d003      	beq.n	8012a2a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8012a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a24:	f043 0304 	orr.w	r3, r3, #4
 8012a28:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8012a2a:	6a3b      	ldr	r3, [r7, #32]
 8012a2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	d043      	beq.n	8012abc <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8012a34:	68fb      	ldr	r3, [r7, #12]
 8012a36:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8012a3a:	2b00      	cmp	r3, #0
 8012a3c:	d03e      	beq.n	8012abc <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8012a3e:	68fb      	ldr	r3, [r7, #12]
 8012a40:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8012a44:	2b60      	cmp	r3, #96	; 0x60
 8012a46:	d02b      	beq.n	8012aa0 <HAL_CAN_IRQHandler+0x32a>
 8012a48:	2b60      	cmp	r3, #96	; 0x60
 8012a4a:	d82e      	bhi.n	8012aaa <HAL_CAN_IRQHandler+0x334>
 8012a4c:	2b50      	cmp	r3, #80	; 0x50
 8012a4e:	d022      	beq.n	8012a96 <HAL_CAN_IRQHandler+0x320>
 8012a50:	2b50      	cmp	r3, #80	; 0x50
 8012a52:	d82a      	bhi.n	8012aaa <HAL_CAN_IRQHandler+0x334>
 8012a54:	2b40      	cmp	r3, #64	; 0x40
 8012a56:	d019      	beq.n	8012a8c <HAL_CAN_IRQHandler+0x316>
 8012a58:	2b40      	cmp	r3, #64	; 0x40
 8012a5a:	d826      	bhi.n	8012aaa <HAL_CAN_IRQHandler+0x334>
 8012a5c:	2b30      	cmp	r3, #48	; 0x30
 8012a5e:	d010      	beq.n	8012a82 <HAL_CAN_IRQHandler+0x30c>
 8012a60:	2b30      	cmp	r3, #48	; 0x30
 8012a62:	d822      	bhi.n	8012aaa <HAL_CAN_IRQHandler+0x334>
 8012a64:	2b10      	cmp	r3, #16
 8012a66:	d002      	beq.n	8012a6e <HAL_CAN_IRQHandler+0x2f8>
 8012a68:	2b20      	cmp	r3, #32
 8012a6a:	d005      	beq.n	8012a78 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8012a6c:	e01d      	b.n	8012aaa <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8012a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a70:	f043 0308 	orr.w	r3, r3, #8
 8012a74:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8012a76:	e019      	b.n	8012aac <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8012a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a7a:	f043 0310 	orr.w	r3, r3, #16
 8012a7e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8012a80:	e014      	b.n	8012aac <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8012a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a84:	f043 0320 	orr.w	r3, r3, #32
 8012a88:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8012a8a:	e00f      	b.n	8012aac <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8012a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012a92:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8012a94:	e00a      	b.n	8012aac <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8012a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012a9c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8012a9e:	e005      	b.n	8012aac <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8012aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012aa2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012aa6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8012aa8:	e000      	b.n	8012aac <HAL_CAN_IRQHandler+0x336>
            break;
 8012aaa:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	681b      	ldr	r3, [r3, #0]
 8012ab0:	699a      	ldr	r2, [r3, #24]
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	681b      	ldr	r3, [r3, #0]
 8012ab6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8012aba:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	681b      	ldr	r3, [r3, #0]
 8012ac0:	2204      	movs	r2, #4
 8012ac2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8012ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ac6:	2b00      	cmp	r3, #0
 8012ac8:	d008      	beq.n	8012adc <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ad0:	431a      	orrs	r2, r3
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8012ad6:	6878      	ldr	r0, [r7, #4]
 8012ad8:	f000 f868 	bl	8012bac <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8012adc:	bf00      	nop
 8012ade:	3728      	adds	r7, #40	; 0x28
 8012ae0:	46bd      	mov	sp, r7
 8012ae2:	bd80      	pop	{r7, pc}

08012ae4 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8012ae4:	b480      	push	{r7}
 8012ae6:	b083      	sub	sp, #12
 8012ae8:	af00      	add	r7, sp, #0
 8012aea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8012aec:	bf00      	nop
 8012aee:	370c      	adds	r7, #12
 8012af0:	46bd      	mov	sp, r7
 8012af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012af6:	4770      	bx	lr

08012af8 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8012af8:	b480      	push	{r7}
 8012afa:	b083      	sub	sp, #12
 8012afc:	af00      	add	r7, sp, #0
 8012afe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8012b00:	bf00      	nop
 8012b02:	370c      	adds	r7, #12
 8012b04:	46bd      	mov	sp, r7
 8012b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b0a:	4770      	bx	lr

08012b0c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8012b0c:	b480      	push	{r7}
 8012b0e:	b083      	sub	sp, #12
 8012b10:	af00      	add	r7, sp, #0
 8012b12:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8012b14:	bf00      	nop
 8012b16:	370c      	adds	r7, #12
 8012b18:	46bd      	mov	sp, r7
 8012b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b1e:	4770      	bx	lr

08012b20 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8012b20:	b480      	push	{r7}
 8012b22:	b083      	sub	sp, #12
 8012b24:	af00      	add	r7, sp, #0
 8012b26:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8012b28:	bf00      	nop
 8012b2a:	370c      	adds	r7, #12
 8012b2c:	46bd      	mov	sp, r7
 8012b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b32:	4770      	bx	lr

08012b34 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8012b34:	b480      	push	{r7}
 8012b36:	b083      	sub	sp, #12
 8012b38:	af00      	add	r7, sp, #0
 8012b3a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8012b3c:	bf00      	nop
 8012b3e:	370c      	adds	r7, #12
 8012b40:	46bd      	mov	sp, r7
 8012b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b46:	4770      	bx	lr

08012b48 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8012b48:	b480      	push	{r7}
 8012b4a:	b083      	sub	sp, #12
 8012b4c:	af00      	add	r7, sp, #0
 8012b4e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8012b50:	bf00      	nop
 8012b52:	370c      	adds	r7, #12
 8012b54:	46bd      	mov	sp, r7
 8012b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b5a:	4770      	bx	lr

08012b5c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8012b5c:	b480      	push	{r7}
 8012b5e:	b083      	sub	sp, #12
 8012b60:	af00      	add	r7, sp, #0
 8012b62:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8012b64:	bf00      	nop
 8012b66:	370c      	adds	r7, #12
 8012b68:	46bd      	mov	sp, r7
 8012b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b6e:	4770      	bx	lr

08012b70 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8012b70:	b480      	push	{r7}
 8012b72:	b083      	sub	sp, #12
 8012b74:	af00      	add	r7, sp, #0
 8012b76:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8012b78:	bf00      	nop
 8012b7a:	370c      	adds	r7, #12
 8012b7c:	46bd      	mov	sp, r7
 8012b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b82:	4770      	bx	lr

08012b84 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8012b84:	b480      	push	{r7}
 8012b86:	b083      	sub	sp, #12
 8012b88:	af00      	add	r7, sp, #0
 8012b8a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8012b8c:	bf00      	nop
 8012b8e:	370c      	adds	r7, #12
 8012b90:	46bd      	mov	sp, r7
 8012b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b96:	4770      	bx	lr

08012b98 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8012b98:	b480      	push	{r7}
 8012b9a:	b083      	sub	sp, #12
 8012b9c:	af00      	add	r7, sp, #0
 8012b9e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8012ba0:	bf00      	nop
 8012ba2:	370c      	adds	r7, #12
 8012ba4:	46bd      	mov	sp, r7
 8012ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012baa:	4770      	bx	lr

08012bac <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8012bac:	b480      	push	{r7}
 8012bae:	b083      	sub	sp, #12
 8012bb0:	af00      	add	r7, sp, #0
 8012bb2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8012bb4:	bf00      	nop
 8012bb6:	370c      	adds	r7, #12
 8012bb8:	46bd      	mov	sp, r7
 8012bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bbe:	4770      	bx	lr

08012bc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8012bc0:	b480      	push	{r7}
 8012bc2:	b085      	sub	sp, #20
 8012bc4:	af00      	add	r7, sp, #0
 8012bc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8012bc8:	687b      	ldr	r3, [r7, #4]
 8012bca:	f003 0307 	and.w	r3, r3, #7
 8012bce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8012bd0:	4b0c      	ldr	r3, [pc, #48]	; (8012c04 <__NVIC_SetPriorityGrouping+0x44>)
 8012bd2:	68db      	ldr	r3, [r3, #12]
 8012bd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8012bd6:	68ba      	ldr	r2, [r7, #8]
 8012bd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8012bdc:	4013      	ands	r3, r2
 8012bde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8012be0:	68fb      	ldr	r3, [r7, #12]
 8012be2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8012be4:	68bb      	ldr	r3, [r7, #8]
 8012be6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8012be8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8012bec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8012bf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8012bf2:	4a04      	ldr	r2, [pc, #16]	; (8012c04 <__NVIC_SetPriorityGrouping+0x44>)
 8012bf4:	68bb      	ldr	r3, [r7, #8]
 8012bf6:	60d3      	str	r3, [r2, #12]
}
 8012bf8:	bf00      	nop
 8012bfa:	3714      	adds	r7, #20
 8012bfc:	46bd      	mov	sp, r7
 8012bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c02:	4770      	bx	lr
 8012c04:	e000ed00 	.word	0xe000ed00

08012c08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8012c08:	b480      	push	{r7}
 8012c0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8012c0c:	4b04      	ldr	r3, [pc, #16]	; (8012c20 <__NVIC_GetPriorityGrouping+0x18>)
 8012c0e:	68db      	ldr	r3, [r3, #12]
 8012c10:	0a1b      	lsrs	r3, r3, #8
 8012c12:	f003 0307 	and.w	r3, r3, #7
}
 8012c16:	4618      	mov	r0, r3
 8012c18:	46bd      	mov	sp, r7
 8012c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c1e:	4770      	bx	lr
 8012c20:	e000ed00 	.word	0xe000ed00

08012c24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8012c24:	b480      	push	{r7}
 8012c26:	b083      	sub	sp, #12
 8012c28:	af00      	add	r7, sp, #0
 8012c2a:	4603      	mov	r3, r0
 8012c2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8012c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012c32:	2b00      	cmp	r3, #0
 8012c34:	db0b      	blt.n	8012c4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8012c36:	79fb      	ldrb	r3, [r7, #7]
 8012c38:	f003 021f 	and.w	r2, r3, #31
 8012c3c:	4907      	ldr	r1, [pc, #28]	; (8012c5c <__NVIC_EnableIRQ+0x38>)
 8012c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012c42:	095b      	lsrs	r3, r3, #5
 8012c44:	2001      	movs	r0, #1
 8012c46:	fa00 f202 	lsl.w	r2, r0, r2
 8012c4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8012c4e:	bf00      	nop
 8012c50:	370c      	adds	r7, #12
 8012c52:	46bd      	mov	sp, r7
 8012c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c58:	4770      	bx	lr
 8012c5a:	bf00      	nop
 8012c5c:	e000e100 	.word	0xe000e100

08012c60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8012c60:	b480      	push	{r7}
 8012c62:	b083      	sub	sp, #12
 8012c64:	af00      	add	r7, sp, #0
 8012c66:	4603      	mov	r3, r0
 8012c68:	6039      	str	r1, [r7, #0]
 8012c6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8012c6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012c70:	2b00      	cmp	r3, #0
 8012c72:	db0a      	blt.n	8012c8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012c74:	683b      	ldr	r3, [r7, #0]
 8012c76:	b2da      	uxtb	r2, r3
 8012c78:	490c      	ldr	r1, [pc, #48]	; (8012cac <__NVIC_SetPriority+0x4c>)
 8012c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012c7e:	0112      	lsls	r2, r2, #4
 8012c80:	b2d2      	uxtb	r2, r2
 8012c82:	440b      	add	r3, r1
 8012c84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8012c88:	e00a      	b.n	8012ca0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012c8a:	683b      	ldr	r3, [r7, #0]
 8012c8c:	b2da      	uxtb	r2, r3
 8012c8e:	4908      	ldr	r1, [pc, #32]	; (8012cb0 <__NVIC_SetPriority+0x50>)
 8012c90:	79fb      	ldrb	r3, [r7, #7]
 8012c92:	f003 030f 	and.w	r3, r3, #15
 8012c96:	3b04      	subs	r3, #4
 8012c98:	0112      	lsls	r2, r2, #4
 8012c9a:	b2d2      	uxtb	r2, r2
 8012c9c:	440b      	add	r3, r1
 8012c9e:	761a      	strb	r2, [r3, #24]
}
 8012ca0:	bf00      	nop
 8012ca2:	370c      	adds	r7, #12
 8012ca4:	46bd      	mov	sp, r7
 8012ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012caa:	4770      	bx	lr
 8012cac:	e000e100 	.word	0xe000e100
 8012cb0:	e000ed00 	.word	0xe000ed00

08012cb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8012cb4:	b480      	push	{r7}
 8012cb6:	b089      	sub	sp, #36	; 0x24
 8012cb8:	af00      	add	r7, sp, #0
 8012cba:	60f8      	str	r0, [r7, #12]
 8012cbc:	60b9      	str	r1, [r7, #8]
 8012cbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8012cc0:	68fb      	ldr	r3, [r7, #12]
 8012cc2:	f003 0307 	and.w	r3, r3, #7
 8012cc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8012cc8:	69fb      	ldr	r3, [r7, #28]
 8012cca:	f1c3 0307 	rsb	r3, r3, #7
 8012cce:	2b04      	cmp	r3, #4
 8012cd0:	bf28      	it	cs
 8012cd2:	2304      	movcs	r3, #4
 8012cd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8012cd6:	69fb      	ldr	r3, [r7, #28]
 8012cd8:	3304      	adds	r3, #4
 8012cda:	2b06      	cmp	r3, #6
 8012cdc:	d902      	bls.n	8012ce4 <NVIC_EncodePriority+0x30>
 8012cde:	69fb      	ldr	r3, [r7, #28]
 8012ce0:	3b03      	subs	r3, #3
 8012ce2:	e000      	b.n	8012ce6 <NVIC_EncodePriority+0x32>
 8012ce4:	2300      	movs	r3, #0
 8012ce6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8012ce8:	f04f 32ff 	mov.w	r2, #4294967295
 8012cec:	69bb      	ldr	r3, [r7, #24]
 8012cee:	fa02 f303 	lsl.w	r3, r2, r3
 8012cf2:	43da      	mvns	r2, r3
 8012cf4:	68bb      	ldr	r3, [r7, #8]
 8012cf6:	401a      	ands	r2, r3
 8012cf8:	697b      	ldr	r3, [r7, #20]
 8012cfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8012cfc:	f04f 31ff 	mov.w	r1, #4294967295
 8012d00:	697b      	ldr	r3, [r7, #20]
 8012d02:	fa01 f303 	lsl.w	r3, r1, r3
 8012d06:	43d9      	mvns	r1, r3
 8012d08:	687b      	ldr	r3, [r7, #4]
 8012d0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8012d0c:	4313      	orrs	r3, r2
         );
}
 8012d0e:	4618      	mov	r0, r3
 8012d10:	3724      	adds	r7, #36	; 0x24
 8012d12:	46bd      	mov	sp, r7
 8012d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d18:	4770      	bx	lr

08012d1a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8012d1a:	b580      	push	{r7, lr}
 8012d1c:	b082      	sub	sp, #8
 8012d1e:	af00      	add	r7, sp, #0
 8012d20:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8012d22:	6878      	ldr	r0, [r7, #4]
 8012d24:	f7ff ff4c 	bl	8012bc0 <__NVIC_SetPriorityGrouping>
}
 8012d28:	bf00      	nop
 8012d2a:	3708      	adds	r7, #8
 8012d2c:	46bd      	mov	sp, r7
 8012d2e:	bd80      	pop	{r7, pc}

08012d30 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8012d30:	b580      	push	{r7, lr}
 8012d32:	b086      	sub	sp, #24
 8012d34:	af00      	add	r7, sp, #0
 8012d36:	4603      	mov	r3, r0
 8012d38:	60b9      	str	r1, [r7, #8]
 8012d3a:	607a      	str	r2, [r7, #4]
 8012d3c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8012d3e:	2300      	movs	r3, #0
 8012d40:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8012d42:	f7ff ff61 	bl	8012c08 <__NVIC_GetPriorityGrouping>
 8012d46:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8012d48:	687a      	ldr	r2, [r7, #4]
 8012d4a:	68b9      	ldr	r1, [r7, #8]
 8012d4c:	6978      	ldr	r0, [r7, #20]
 8012d4e:	f7ff ffb1 	bl	8012cb4 <NVIC_EncodePriority>
 8012d52:	4602      	mov	r2, r0
 8012d54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012d58:	4611      	mov	r1, r2
 8012d5a:	4618      	mov	r0, r3
 8012d5c:	f7ff ff80 	bl	8012c60 <__NVIC_SetPriority>
}
 8012d60:	bf00      	nop
 8012d62:	3718      	adds	r7, #24
 8012d64:	46bd      	mov	sp, r7
 8012d66:	bd80      	pop	{r7, pc}

08012d68 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8012d68:	b580      	push	{r7, lr}
 8012d6a:	b082      	sub	sp, #8
 8012d6c:	af00      	add	r7, sp, #0
 8012d6e:	4603      	mov	r3, r0
 8012d70:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8012d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012d76:	4618      	mov	r0, r3
 8012d78:	f7ff ff54 	bl	8012c24 <__NVIC_EnableIRQ>
}
 8012d7c:	bf00      	nop
 8012d7e:	3708      	adds	r7, #8
 8012d80:	46bd      	mov	sp, r7
 8012d82:	bd80      	pop	{r7, pc}

08012d84 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8012d84:	b580      	push	{r7, lr}
 8012d86:	b086      	sub	sp, #24
 8012d88:	af00      	add	r7, sp, #0
 8012d8a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8012d8c:	2300      	movs	r3, #0
 8012d8e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8012d90:	f7fe fd58 	bl	8011844 <HAL_GetTick>
 8012d94:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	2b00      	cmp	r3, #0
 8012d9a:	d101      	bne.n	8012da0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8012d9c:	2301      	movs	r3, #1
 8012d9e:	e099      	b.n	8012ed4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	2202      	movs	r2, #2
 8012da4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	2200      	movs	r2, #0
 8012dac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8012db0:	687b      	ldr	r3, [r7, #4]
 8012db2:	681b      	ldr	r3, [r3, #0]
 8012db4:	681a      	ldr	r2, [r3, #0]
 8012db6:	687b      	ldr	r3, [r7, #4]
 8012db8:	681b      	ldr	r3, [r3, #0]
 8012dba:	f022 0201 	bic.w	r2, r2, #1
 8012dbe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8012dc0:	e00f      	b.n	8012de2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8012dc2:	f7fe fd3f 	bl	8011844 <HAL_GetTick>
 8012dc6:	4602      	mov	r2, r0
 8012dc8:	693b      	ldr	r3, [r7, #16]
 8012dca:	1ad3      	subs	r3, r2, r3
 8012dcc:	2b05      	cmp	r3, #5
 8012dce:	d908      	bls.n	8012de2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	2220      	movs	r2, #32
 8012dd4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	2203      	movs	r2, #3
 8012dda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8012dde:	2303      	movs	r3, #3
 8012de0:	e078      	b.n	8012ed4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	681b      	ldr	r3, [r3, #0]
 8012de6:	681b      	ldr	r3, [r3, #0]
 8012de8:	f003 0301 	and.w	r3, r3, #1
 8012dec:	2b00      	cmp	r3, #0
 8012dee:	d1e8      	bne.n	8012dc2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8012df0:	687b      	ldr	r3, [r7, #4]
 8012df2:	681b      	ldr	r3, [r3, #0]
 8012df4:	681b      	ldr	r3, [r3, #0]
 8012df6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8012df8:	697a      	ldr	r2, [r7, #20]
 8012dfa:	4b38      	ldr	r3, [pc, #224]	; (8012edc <HAL_DMA_Init+0x158>)
 8012dfc:	4013      	ands	r3, r2
 8012dfe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	685a      	ldr	r2, [r3, #4]
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	689b      	ldr	r3, [r3, #8]
 8012e08:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8012e0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	691b      	ldr	r3, [r3, #16]
 8012e14:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8012e16:	687b      	ldr	r3, [r7, #4]
 8012e18:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8012e1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8012e1c:	687b      	ldr	r3, [r7, #4]
 8012e1e:	699b      	ldr	r3, [r3, #24]
 8012e20:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8012e22:	687b      	ldr	r3, [r7, #4]
 8012e24:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8012e26:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8012e28:	687b      	ldr	r3, [r7, #4]
 8012e2a:	6a1b      	ldr	r3, [r3, #32]
 8012e2c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8012e2e:	697a      	ldr	r2, [r7, #20]
 8012e30:	4313      	orrs	r3, r2
 8012e32:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8012e34:	687b      	ldr	r3, [r7, #4]
 8012e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e38:	2b04      	cmp	r3, #4
 8012e3a:	d107      	bne.n	8012e4c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8012e3c:	687b      	ldr	r3, [r7, #4]
 8012e3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012e40:	687b      	ldr	r3, [r7, #4]
 8012e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012e44:	4313      	orrs	r3, r2
 8012e46:	697a      	ldr	r2, [r7, #20]
 8012e48:	4313      	orrs	r3, r2
 8012e4a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	681b      	ldr	r3, [r3, #0]
 8012e50:	697a      	ldr	r2, [r7, #20]
 8012e52:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8012e54:	687b      	ldr	r3, [r7, #4]
 8012e56:	681b      	ldr	r3, [r3, #0]
 8012e58:	695b      	ldr	r3, [r3, #20]
 8012e5a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8012e5c:	697b      	ldr	r3, [r7, #20]
 8012e5e:	f023 0307 	bic.w	r3, r3, #7
 8012e62:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8012e64:	687b      	ldr	r3, [r7, #4]
 8012e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e68:	697a      	ldr	r2, [r7, #20]
 8012e6a:	4313      	orrs	r3, r2
 8012e6c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8012e6e:	687b      	ldr	r3, [r7, #4]
 8012e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e72:	2b04      	cmp	r3, #4
 8012e74:	d117      	bne.n	8012ea6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012e7a:	697a      	ldr	r2, [r7, #20]
 8012e7c:	4313      	orrs	r3, r2
 8012e7e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e84:	2b00      	cmp	r3, #0
 8012e86:	d00e      	beq.n	8012ea6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8012e88:	6878      	ldr	r0, [r7, #4]
 8012e8a:	f000 fa6f 	bl	801336c <DMA_CheckFifoParam>
 8012e8e:	4603      	mov	r3, r0
 8012e90:	2b00      	cmp	r3, #0
 8012e92:	d008      	beq.n	8012ea6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	2240      	movs	r2, #64	; 0x40
 8012e98:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	2201      	movs	r2, #1
 8012e9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8012ea2:	2301      	movs	r3, #1
 8012ea4:	e016      	b.n	8012ed4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	681b      	ldr	r3, [r3, #0]
 8012eaa:	697a      	ldr	r2, [r7, #20]
 8012eac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8012eae:	6878      	ldr	r0, [r7, #4]
 8012eb0:	f000 fa26 	bl	8013300 <DMA_CalcBaseAndBitshift>
 8012eb4:	4603      	mov	r3, r0
 8012eb6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8012eb8:	687b      	ldr	r3, [r7, #4]
 8012eba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012ebc:	223f      	movs	r2, #63	; 0x3f
 8012ebe:	409a      	lsls	r2, r3
 8012ec0:	68fb      	ldr	r3, [r7, #12]
 8012ec2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8012ec4:	687b      	ldr	r3, [r7, #4]
 8012ec6:	2200      	movs	r2, #0
 8012ec8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	2201      	movs	r2, #1
 8012ece:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8012ed2:	2300      	movs	r3, #0
}
 8012ed4:	4618      	mov	r0, r3
 8012ed6:	3718      	adds	r7, #24
 8012ed8:	46bd      	mov	sp, r7
 8012eda:	bd80      	pop	{r7, pc}
 8012edc:	f010803f 	.word	0xf010803f

08012ee0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8012ee0:	b580      	push	{r7, lr}
 8012ee2:	b086      	sub	sp, #24
 8012ee4:	af00      	add	r7, sp, #0
 8012ee6:	60f8      	str	r0, [r7, #12]
 8012ee8:	60b9      	str	r1, [r7, #8]
 8012eea:	607a      	str	r2, [r7, #4]
 8012eec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8012eee:	2300      	movs	r3, #0
 8012ef0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8012ef2:	68fb      	ldr	r3, [r7, #12]
 8012ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012ef6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8012ef8:	68fb      	ldr	r3, [r7, #12]
 8012efa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012efe:	2b01      	cmp	r3, #1
 8012f00:	d101      	bne.n	8012f06 <HAL_DMA_Start_IT+0x26>
 8012f02:	2302      	movs	r3, #2
 8012f04:	e040      	b.n	8012f88 <HAL_DMA_Start_IT+0xa8>
 8012f06:	68fb      	ldr	r3, [r7, #12]
 8012f08:	2201      	movs	r2, #1
 8012f0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8012f0e:	68fb      	ldr	r3, [r7, #12]
 8012f10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8012f14:	b2db      	uxtb	r3, r3
 8012f16:	2b01      	cmp	r3, #1
 8012f18:	d12f      	bne.n	8012f7a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8012f1a:	68fb      	ldr	r3, [r7, #12]
 8012f1c:	2202      	movs	r2, #2
 8012f1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8012f22:	68fb      	ldr	r3, [r7, #12]
 8012f24:	2200      	movs	r2, #0
 8012f26:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8012f28:	683b      	ldr	r3, [r7, #0]
 8012f2a:	687a      	ldr	r2, [r7, #4]
 8012f2c:	68b9      	ldr	r1, [r7, #8]
 8012f2e:	68f8      	ldr	r0, [r7, #12]
 8012f30:	f000 f9b8 	bl	80132a4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8012f34:	68fb      	ldr	r3, [r7, #12]
 8012f36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012f38:	223f      	movs	r2, #63	; 0x3f
 8012f3a:	409a      	lsls	r2, r3
 8012f3c:	693b      	ldr	r3, [r7, #16]
 8012f3e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8012f40:	68fb      	ldr	r3, [r7, #12]
 8012f42:	681b      	ldr	r3, [r3, #0]
 8012f44:	681a      	ldr	r2, [r3, #0]
 8012f46:	68fb      	ldr	r3, [r7, #12]
 8012f48:	681b      	ldr	r3, [r3, #0]
 8012f4a:	f042 0216 	orr.w	r2, r2, #22
 8012f4e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8012f50:	68fb      	ldr	r3, [r7, #12]
 8012f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012f54:	2b00      	cmp	r3, #0
 8012f56:	d007      	beq.n	8012f68 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8012f58:	68fb      	ldr	r3, [r7, #12]
 8012f5a:	681b      	ldr	r3, [r3, #0]
 8012f5c:	681a      	ldr	r2, [r3, #0]
 8012f5e:	68fb      	ldr	r3, [r7, #12]
 8012f60:	681b      	ldr	r3, [r3, #0]
 8012f62:	f042 0208 	orr.w	r2, r2, #8
 8012f66:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8012f68:	68fb      	ldr	r3, [r7, #12]
 8012f6a:	681b      	ldr	r3, [r3, #0]
 8012f6c:	681a      	ldr	r2, [r3, #0]
 8012f6e:	68fb      	ldr	r3, [r7, #12]
 8012f70:	681b      	ldr	r3, [r3, #0]
 8012f72:	f042 0201 	orr.w	r2, r2, #1
 8012f76:	601a      	str	r2, [r3, #0]
 8012f78:	e005      	b.n	8012f86 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8012f7a:	68fb      	ldr	r3, [r7, #12]
 8012f7c:	2200      	movs	r2, #0
 8012f7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8012f82:	2302      	movs	r3, #2
 8012f84:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8012f86:	7dfb      	ldrb	r3, [r7, #23]
}
 8012f88:	4618      	mov	r0, r3
 8012f8a:	3718      	adds	r7, #24
 8012f8c:	46bd      	mov	sp, r7
 8012f8e:	bd80      	pop	{r7, pc}

08012f90 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8012f90:	b580      	push	{r7, lr}
 8012f92:	b086      	sub	sp, #24
 8012f94:	af00      	add	r7, sp, #0
 8012f96:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8012f98:	2300      	movs	r3, #0
 8012f9a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8012f9c:	4b92      	ldr	r3, [pc, #584]	; (80131e8 <HAL_DMA_IRQHandler+0x258>)
 8012f9e:	681b      	ldr	r3, [r3, #0]
 8012fa0:	4a92      	ldr	r2, [pc, #584]	; (80131ec <HAL_DMA_IRQHandler+0x25c>)
 8012fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8012fa6:	0a9b      	lsrs	r3, r3, #10
 8012fa8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012fae:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8012fb0:	693b      	ldr	r3, [r7, #16]
 8012fb2:	681b      	ldr	r3, [r3, #0]
 8012fb4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8012fb6:	687b      	ldr	r3, [r7, #4]
 8012fb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012fba:	2208      	movs	r2, #8
 8012fbc:	409a      	lsls	r2, r3
 8012fbe:	68fb      	ldr	r3, [r7, #12]
 8012fc0:	4013      	ands	r3, r2
 8012fc2:	2b00      	cmp	r3, #0
 8012fc4:	d01a      	beq.n	8012ffc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8012fc6:	687b      	ldr	r3, [r7, #4]
 8012fc8:	681b      	ldr	r3, [r3, #0]
 8012fca:	681b      	ldr	r3, [r3, #0]
 8012fcc:	f003 0304 	and.w	r3, r3, #4
 8012fd0:	2b00      	cmp	r3, #0
 8012fd2:	d013      	beq.n	8012ffc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8012fd4:	687b      	ldr	r3, [r7, #4]
 8012fd6:	681b      	ldr	r3, [r3, #0]
 8012fd8:	681a      	ldr	r2, [r3, #0]
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	681b      	ldr	r3, [r3, #0]
 8012fde:	f022 0204 	bic.w	r2, r2, #4
 8012fe2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8012fe4:	687b      	ldr	r3, [r7, #4]
 8012fe6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012fe8:	2208      	movs	r2, #8
 8012fea:	409a      	lsls	r2, r3
 8012fec:	693b      	ldr	r3, [r7, #16]
 8012fee:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8012ff0:	687b      	ldr	r3, [r7, #4]
 8012ff2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012ff4:	f043 0201 	orr.w	r2, r3, #1
 8012ff8:	687b      	ldr	r3, [r7, #4]
 8012ffa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8012ffc:	687b      	ldr	r3, [r7, #4]
 8012ffe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013000:	2201      	movs	r2, #1
 8013002:	409a      	lsls	r2, r3
 8013004:	68fb      	ldr	r3, [r7, #12]
 8013006:	4013      	ands	r3, r2
 8013008:	2b00      	cmp	r3, #0
 801300a:	d012      	beq.n	8013032 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 801300c:	687b      	ldr	r3, [r7, #4]
 801300e:	681b      	ldr	r3, [r3, #0]
 8013010:	695b      	ldr	r3, [r3, #20]
 8013012:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013016:	2b00      	cmp	r3, #0
 8013018:	d00b      	beq.n	8013032 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 801301a:	687b      	ldr	r3, [r7, #4]
 801301c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801301e:	2201      	movs	r2, #1
 8013020:	409a      	lsls	r2, r3
 8013022:	693b      	ldr	r3, [r7, #16]
 8013024:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8013026:	687b      	ldr	r3, [r7, #4]
 8013028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801302a:	f043 0202 	orr.w	r2, r3, #2
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8013032:	687b      	ldr	r3, [r7, #4]
 8013034:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013036:	2204      	movs	r2, #4
 8013038:	409a      	lsls	r2, r3
 801303a:	68fb      	ldr	r3, [r7, #12]
 801303c:	4013      	ands	r3, r2
 801303e:	2b00      	cmp	r3, #0
 8013040:	d012      	beq.n	8013068 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	681b      	ldr	r3, [r3, #0]
 8013046:	681b      	ldr	r3, [r3, #0]
 8013048:	f003 0302 	and.w	r3, r3, #2
 801304c:	2b00      	cmp	r3, #0
 801304e:	d00b      	beq.n	8013068 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013054:	2204      	movs	r2, #4
 8013056:	409a      	lsls	r2, r3
 8013058:	693b      	ldr	r3, [r7, #16]
 801305a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 801305c:	687b      	ldr	r3, [r7, #4]
 801305e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013060:	f043 0204 	orr.w	r2, r3, #4
 8013064:	687b      	ldr	r3, [r7, #4]
 8013066:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801306c:	2210      	movs	r2, #16
 801306e:	409a      	lsls	r2, r3
 8013070:	68fb      	ldr	r3, [r7, #12]
 8013072:	4013      	ands	r3, r2
 8013074:	2b00      	cmp	r3, #0
 8013076:	d043      	beq.n	8013100 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8013078:	687b      	ldr	r3, [r7, #4]
 801307a:	681b      	ldr	r3, [r3, #0]
 801307c:	681b      	ldr	r3, [r3, #0]
 801307e:	f003 0308 	and.w	r3, r3, #8
 8013082:	2b00      	cmp	r3, #0
 8013084:	d03c      	beq.n	8013100 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8013086:	687b      	ldr	r3, [r7, #4]
 8013088:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801308a:	2210      	movs	r2, #16
 801308c:	409a      	lsls	r2, r3
 801308e:	693b      	ldr	r3, [r7, #16]
 8013090:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8013092:	687b      	ldr	r3, [r7, #4]
 8013094:	681b      	ldr	r3, [r3, #0]
 8013096:	681b      	ldr	r3, [r3, #0]
 8013098:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801309c:	2b00      	cmp	r3, #0
 801309e:	d018      	beq.n	80130d2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	681b      	ldr	r3, [r3, #0]
 80130a4:	681b      	ldr	r3, [r3, #0]
 80130a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80130aa:	2b00      	cmp	r3, #0
 80130ac:	d108      	bne.n	80130c0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80130ae:	687b      	ldr	r3, [r7, #4]
 80130b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80130b2:	2b00      	cmp	r3, #0
 80130b4:	d024      	beq.n	8013100 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80130b6:	687b      	ldr	r3, [r7, #4]
 80130b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80130ba:	6878      	ldr	r0, [r7, #4]
 80130bc:	4798      	blx	r3
 80130be:	e01f      	b.n	8013100 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80130c0:	687b      	ldr	r3, [r7, #4]
 80130c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80130c4:	2b00      	cmp	r3, #0
 80130c6:	d01b      	beq.n	8013100 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80130cc:	6878      	ldr	r0, [r7, #4]
 80130ce:	4798      	blx	r3
 80130d0:	e016      	b.n	8013100 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80130d2:	687b      	ldr	r3, [r7, #4]
 80130d4:	681b      	ldr	r3, [r3, #0]
 80130d6:	681b      	ldr	r3, [r3, #0]
 80130d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80130dc:	2b00      	cmp	r3, #0
 80130de:	d107      	bne.n	80130f0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80130e0:	687b      	ldr	r3, [r7, #4]
 80130e2:	681b      	ldr	r3, [r3, #0]
 80130e4:	681a      	ldr	r2, [r3, #0]
 80130e6:	687b      	ldr	r3, [r7, #4]
 80130e8:	681b      	ldr	r3, [r3, #0]
 80130ea:	f022 0208 	bic.w	r2, r2, #8
 80130ee:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80130f0:	687b      	ldr	r3, [r7, #4]
 80130f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80130f4:	2b00      	cmp	r3, #0
 80130f6:	d003      	beq.n	8013100 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80130fc:	6878      	ldr	r0, [r7, #4]
 80130fe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013104:	2220      	movs	r2, #32
 8013106:	409a      	lsls	r2, r3
 8013108:	68fb      	ldr	r3, [r7, #12]
 801310a:	4013      	ands	r3, r2
 801310c:	2b00      	cmp	r3, #0
 801310e:	f000 808e 	beq.w	801322e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8013112:	687b      	ldr	r3, [r7, #4]
 8013114:	681b      	ldr	r3, [r3, #0]
 8013116:	681b      	ldr	r3, [r3, #0]
 8013118:	f003 0310 	and.w	r3, r3, #16
 801311c:	2b00      	cmp	r3, #0
 801311e:	f000 8086 	beq.w	801322e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8013122:	687b      	ldr	r3, [r7, #4]
 8013124:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013126:	2220      	movs	r2, #32
 8013128:	409a      	lsls	r2, r3
 801312a:	693b      	ldr	r3, [r7, #16]
 801312c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 801312e:	687b      	ldr	r3, [r7, #4]
 8013130:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8013134:	b2db      	uxtb	r3, r3
 8013136:	2b05      	cmp	r3, #5
 8013138:	d136      	bne.n	80131a8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 801313a:	687b      	ldr	r3, [r7, #4]
 801313c:	681b      	ldr	r3, [r3, #0]
 801313e:	681a      	ldr	r2, [r3, #0]
 8013140:	687b      	ldr	r3, [r7, #4]
 8013142:	681b      	ldr	r3, [r3, #0]
 8013144:	f022 0216 	bic.w	r2, r2, #22
 8013148:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 801314a:	687b      	ldr	r3, [r7, #4]
 801314c:	681b      	ldr	r3, [r3, #0]
 801314e:	695a      	ldr	r2, [r3, #20]
 8013150:	687b      	ldr	r3, [r7, #4]
 8013152:	681b      	ldr	r3, [r3, #0]
 8013154:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8013158:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 801315a:	687b      	ldr	r3, [r7, #4]
 801315c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801315e:	2b00      	cmp	r3, #0
 8013160:	d103      	bne.n	801316a <HAL_DMA_IRQHandler+0x1da>
 8013162:	687b      	ldr	r3, [r7, #4]
 8013164:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013166:	2b00      	cmp	r3, #0
 8013168:	d007      	beq.n	801317a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 801316a:	687b      	ldr	r3, [r7, #4]
 801316c:	681b      	ldr	r3, [r3, #0]
 801316e:	681a      	ldr	r2, [r3, #0]
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	681b      	ldr	r3, [r3, #0]
 8013174:	f022 0208 	bic.w	r2, r2, #8
 8013178:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 801317a:	687b      	ldr	r3, [r7, #4]
 801317c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801317e:	223f      	movs	r2, #63	; 0x3f
 8013180:	409a      	lsls	r2, r3
 8013182:	693b      	ldr	r3, [r7, #16]
 8013184:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8013186:	687b      	ldr	r3, [r7, #4]
 8013188:	2201      	movs	r2, #1
 801318a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 801318e:	687b      	ldr	r3, [r7, #4]
 8013190:	2200      	movs	r2, #0
 8013192:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8013196:	687b      	ldr	r3, [r7, #4]
 8013198:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801319a:	2b00      	cmp	r3, #0
 801319c:	d07d      	beq.n	801329a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 801319e:	687b      	ldr	r3, [r7, #4]
 80131a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80131a2:	6878      	ldr	r0, [r7, #4]
 80131a4:	4798      	blx	r3
        }
        return;
 80131a6:	e078      	b.n	801329a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80131a8:	687b      	ldr	r3, [r7, #4]
 80131aa:	681b      	ldr	r3, [r3, #0]
 80131ac:	681b      	ldr	r3, [r3, #0]
 80131ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80131b2:	2b00      	cmp	r3, #0
 80131b4:	d01c      	beq.n	80131f0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80131b6:	687b      	ldr	r3, [r7, #4]
 80131b8:	681b      	ldr	r3, [r3, #0]
 80131ba:	681b      	ldr	r3, [r3, #0]
 80131bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80131c0:	2b00      	cmp	r3, #0
 80131c2:	d108      	bne.n	80131d6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80131c4:	687b      	ldr	r3, [r7, #4]
 80131c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80131c8:	2b00      	cmp	r3, #0
 80131ca:	d030      	beq.n	801322e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80131cc:	687b      	ldr	r3, [r7, #4]
 80131ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80131d0:	6878      	ldr	r0, [r7, #4]
 80131d2:	4798      	blx	r3
 80131d4:	e02b      	b.n	801322e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80131d6:	687b      	ldr	r3, [r7, #4]
 80131d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80131da:	2b00      	cmp	r3, #0
 80131dc:	d027      	beq.n	801322e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80131de:	687b      	ldr	r3, [r7, #4]
 80131e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80131e2:	6878      	ldr	r0, [r7, #4]
 80131e4:	4798      	blx	r3
 80131e6:	e022      	b.n	801322e <HAL_DMA_IRQHandler+0x29e>
 80131e8:	20000084 	.word	0x20000084
 80131ec:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80131f0:	687b      	ldr	r3, [r7, #4]
 80131f2:	681b      	ldr	r3, [r3, #0]
 80131f4:	681b      	ldr	r3, [r3, #0]
 80131f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80131fa:	2b00      	cmp	r3, #0
 80131fc:	d10f      	bne.n	801321e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80131fe:	687b      	ldr	r3, [r7, #4]
 8013200:	681b      	ldr	r3, [r3, #0]
 8013202:	681a      	ldr	r2, [r3, #0]
 8013204:	687b      	ldr	r3, [r7, #4]
 8013206:	681b      	ldr	r3, [r3, #0]
 8013208:	f022 0210 	bic.w	r2, r2, #16
 801320c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 801320e:	687b      	ldr	r3, [r7, #4]
 8013210:	2201      	movs	r2, #1
 8013212:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	2200      	movs	r2, #0
 801321a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 801321e:	687b      	ldr	r3, [r7, #4]
 8013220:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013222:	2b00      	cmp	r3, #0
 8013224:	d003      	beq.n	801322e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801322a:	6878      	ldr	r0, [r7, #4]
 801322c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013232:	2b00      	cmp	r3, #0
 8013234:	d032      	beq.n	801329c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8013236:	687b      	ldr	r3, [r7, #4]
 8013238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801323a:	f003 0301 	and.w	r3, r3, #1
 801323e:	2b00      	cmp	r3, #0
 8013240:	d022      	beq.n	8013288 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8013242:	687b      	ldr	r3, [r7, #4]
 8013244:	2205      	movs	r2, #5
 8013246:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 801324a:	687b      	ldr	r3, [r7, #4]
 801324c:	681b      	ldr	r3, [r3, #0]
 801324e:	681a      	ldr	r2, [r3, #0]
 8013250:	687b      	ldr	r3, [r7, #4]
 8013252:	681b      	ldr	r3, [r3, #0]
 8013254:	f022 0201 	bic.w	r2, r2, #1
 8013258:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 801325a:	68bb      	ldr	r3, [r7, #8]
 801325c:	3301      	adds	r3, #1
 801325e:	60bb      	str	r3, [r7, #8]
 8013260:	697a      	ldr	r2, [r7, #20]
 8013262:	429a      	cmp	r2, r3
 8013264:	d307      	bcc.n	8013276 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	681b      	ldr	r3, [r3, #0]
 801326a:	681b      	ldr	r3, [r3, #0]
 801326c:	f003 0301 	and.w	r3, r3, #1
 8013270:	2b00      	cmp	r3, #0
 8013272:	d1f2      	bne.n	801325a <HAL_DMA_IRQHandler+0x2ca>
 8013274:	e000      	b.n	8013278 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8013276:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8013278:	687b      	ldr	r3, [r7, #4]
 801327a:	2201      	movs	r2, #1
 801327c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8013280:	687b      	ldr	r3, [r7, #4]
 8013282:	2200      	movs	r2, #0
 8013284:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801328c:	2b00      	cmp	r3, #0
 801328e:	d005      	beq.n	801329c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8013290:	687b      	ldr	r3, [r7, #4]
 8013292:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013294:	6878      	ldr	r0, [r7, #4]
 8013296:	4798      	blx	r3
 8013298:	e000      	b.n	801329c <HAL_DMA_IRQHandler+0x30c>
        return;
 801329a:	bf00      	nop
    }
  }
}
 801329c:	3718      	adds	r7, #24
 801329e:	46bd      	mov	sp, r7
 80132a0:	bd80      	pop	{r7, pc}
 80132a2:	bf00      	nop

080132a4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80132a4:	b480      	push	{r7}
 80132a6:	b085      	sub	sp, #20
 80132a8:	af00      	add	r7, sp, #0
 80132aa:	60f8      	str	r0, [r7, #12]
 80132ac:	60b9      	str	r1, [r7, #8]
 80132ae:	607a      	str	r2, [r7, #4]
 80132b0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80132b2:	68fb      	ldr	r3, [r7, #12]
 80132b4:	681b      	ldr	r3, [r3, #0]
 80132b6:	681a      	ldr	r2, [r3, #0]
 80132b8:	68fb      	ldr	r3, [r7, #12]
 80132ba:	681b      	ldr	r3, [r3, #0]
 80132bc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80132c0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80132c2:	68fb      	ldr	r3, [r7, #12]
 80132c4:	681b      	ldr	r3, [r3, #0]
 80132c6:	683a      	ldr	r2, [r7, #0]
 80132c8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80132ca:	68fb      	ldr	r3, [r7, #12]
 80132cc:	689b      	ldr	r3, [r3, #8]
 80132ce:	2b40      	cmp	r3, #64	; 0x40
 80132d0:	d108      	bne.n	80132e4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80132d2:	68fb      	ldr	r3, [r7, #12]
 80132d4:	681b      	ldr	r3, [r3, #0]
 80132d6:	687a      	ldr	r2, [r7, #4]
 80132d8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80132da:	68fb      	ldr	r3, [r7, #12]
 80132dc:	681b      	ldr	r3, [r3, #0]
 80132de:	68ba      	ldr	r2, [r7, #8]
 80132e0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80132e2:	e007      	b.n	80132f4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80132e4:	68fb      	ldr	r3, [r7, #12]
 80132e6:	681b      	ldr	r3, [r3, #0]
 80132e8:	68ba      	ldr	r2, [r7, #8]
 80132ea:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80132ec:	68fb      	ldr	r3, [r7, #12]
 80132ee:	681b      	ldr	r3, [r3, #0]
 80132f0:	687a      	ldr	r2, [r7, #4]
 80132f2:	60da      	str	r2, [r3, #12]
}
 80132f4:	bf00      	nop
 80132f6:	3714      	adds	r7, #20
 80132f8:	46bd      	mov	sp, r7
 80132fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132fe:	4770      	bx	lr

08013300 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8013300:	b480      	push	{r7}
 8013302:	b085      	sub	sp, #20
 8013304:	af00      	add	r7, sp, #0
 8013306:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8013308:	687b      	ldr	r3, [r7, #4]
 801330a:	681b      	ldr	r3, [r3, #0]
 801330c:	b2db      	uxtb	r3, r3
 801330e:	3b10      	subs	r3, #16
 8013310:	4a14      	ldr	r2, [pc, #80]	; (8013364 <DMA_CalcBaseAndBitshift+0x64>)
 8013312:	fba2 2303 	umull	r2, r3, r2, r3
 8013316:	091b      	lsrs	r3, r3, #4
 8013318:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 801331a:	4a13      	ldr	r2, [pc, #76]	; (8013368 <DMA_CalcBaseAndBitshift+0x68>)
 801331c:	68fb      	ldr	r3, [r7, #12]
 801331e:	4413      	add	r3, r2
 8013320:	781b      	ldrb	r3, [r3, #0]
 8013322:	461a      	mov	r2, r3
 8013324:	687b      	ldr	r3, [r7, #4]
 8013326:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8013328:	68fb      	ldr	r3, [r7, #12]
 801332a:	2b03      	cmp	r3, #3
 801332c:	d909      	bls.n	8013342 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 801332e:	687b      	ldr	r3, [r7, #4]
 8013330:	681b      	ldr	r3, [r3, #0]
 8013332:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8013336:	f023 0303 	bic.w	r3, r3, #3
 801333a:	1d1a      	adds	r2, r3, #4
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	659a      	str	r2, [r3, #88]	; 0x58
 8013340:	e007      	b.n	8013352 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8013342:	687b      	ldr	r3, [r7, #4]
 8013344:	681b      	ldr	r3, [r3, #0]
 8013346:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 801334a:	f023 0303 	bic.w	r3, r3, #3
 801334e:	687a      	ldr	r2, [r7, #4]
 8013350:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8013352:	687b      	ldr	r3, [r7, #4]
 8013354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8013356:	4618      	mov	r0, r3
 8013358:	3714      	adds	r7, #20
 801335a:	46bd      	mov	sp, r7
 801335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013360:	4770      	bx	lr
 8013362:	bf00      	nop
 8013364:	aaaaaaab 	.word	0xaaaaaaab
 8013368:	0801c3e0 	.word	0x0801c3e0

0801336c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 801336c:	b480      	push	{r7}
 801336e:	b085      	sub	sp, #20
 8013370:	af00      	add	r7, sp, #0
 8013372:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8013374:	2300      	movs	r3, #0
 8013376:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801337c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 801337e:	687b      	ldr	r3, [r7, #4]
 8013380:	699b      	ldr	r3, [r3, #24]
 8013382:	2b00      	cmp	r3, #0
 8013384:	d11f      	bne.n	80133c6 <DMA_CheckFifoParam+0x5a>
 8013386:	68bb      	ldr	r3, [r7, #8]
 8013388:	2b03      	cmp	r3, #3
 801338a:	d856      	bhi.n	801343a <DMA_CheckFifoParam+0xce>
 801338c:	a201      	add	r2, pc, #4	; (adr r2, 8013394 <DMA_CheckFifoParam+0x28>)
 801338e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013392:	bf00      	nop
 8013394:	080133a5 	.word	0x080133a5
 8013398:	080133b7 	.word	0x080133b7
 801339c:	080133a5 	.word	0x080133a5
 80133a0:	0801343b 	.word	0x0801343b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80133a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80133ac:	2b00      	cmp	r3, #0
 80133ae:	d046      	beq.n	801343e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80133b0:	2301      	movs	r3, #1
 80133b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80133b4:	e043      	b.n	801343e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80133b6:	687b      	ldr	r3, [r7, #4]
 80133b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80133ba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80133be:	d140      	bne.n	8013442 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80133c0:	2301      	movs	r3, #1
 80133c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80133c4:	e03d      	b.n	8013442 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80133c6:	687b      	ldr	r3, [r7, #4]
 80133c8:	699b      	ldr	r3, [r3, #24]
 80133ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80133ce:	d121      	bne.n	8013414 <DMA_CheckFifoParam+0xa8>
 80133d0:	68bb      	ldr	r3, [r7, #8]
 80133d2:	2b03      	cmp	r3, #3
 80133d4:	d837      	bhi.n	8013446 <DMA_CheckFifoParam+0xda>
 80133d6:	a201      	add	r2, pc, #4	; (adr r2, 80133dc <DMA_CheckFifoParam+0x70>)
 80133d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80133dc:	080133ed 	.word	0x080133ed
 80133e0:	080133f3 	.word	0x080133f3
 80133e4:	080133ed 	.word	0x080133ed
 80133e8:	08013405 	.word	0x08013405
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80133ec:	2301      	movs	r3, #1
 80133ee:	73fb      	strb	r3, [r7, #15]
      break;
 80133f0:	e030      	b.n	8013454 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80133f2:	687b      	ldr	r3, [r7, #4]
 80133f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80133f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80133fa:	2b00      	cmp	r3, #0
 80133fc:	d025      	beq.n	801344a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80133fe:	2301      	movs	r3, #1
 8013400:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8013402:	e022      	b.n	801344a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013408:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 801340c:	d11f      	bne.n	801344e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 801340e:	2301      	movs	r3, #1
 8013410:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8013412:	e01c      	b.n	801344e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8013414:	68bb      	ldr	r3, [r7, #8]
 8013416:	2b02      	cmp	r3, #2
 8013418:	d903      	bls.n	8013422 <DMA_CheckFifoParam+0xb6>
 801341a:	68bb      	ldr	r3, [r7, #8]
 801341c:	2b03      	cmp	r3, #3
 801341e:	d003      	beq.n	8013428 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8013420:	e018      	b.n	8013454 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8013422:	2301      	movs	r3, #1
 8013424:	73fb      	strb	r3, [r7, #15]
      break;
 8013426:	e015      	b.n	8013454 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801342c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8013430:	2b00      	cmp	r3, #0
 8013432:	d00e      	beq.n	8013452 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8013434:	2301      	movs	r3, #1
 8013436:	73fb      	strb	r3, [r7, #15]
      break;
 8013438:	e00b      	b.n	8013452 <DMA_CheckFifoParam+0xe6>
      break;
 801343a:	bf00      	nop
 801343c:	e00a      	b.n	8013454 <DMA_CheckFifoParam+0xe8>
      break;
 801343e:	bf00      	nop
 8013440:	e008      	b.n	8013454 <DMA_CheckFifoParam+0xe8>
      break;
 8013442:	bf00      	nop
 8013444:	e006      	b.n	8013454 <DMA_CheckFifoParam+0xe8>
      break;
 8013446:	bf00      	nop
 8013448:	e004      	b.n	8013454 <DMA_CheckFifoParam+0xe8>
      break;
 801344a:	bf00      	nop
 801344c:	e002      	b.n	8013454 <DMA_CheckFifoParam+0xe8>
      break;   
 801344e:	bf00      	nop
 8013450:	e000      	b.n	8013454 <DMA_CheckFifoParam+0xe8>
      break;
 8013452:	bf00      	nop
    }
  } 
  
  return status; 
 8013454:	7bfb      	ldrb	r3, [r7, #15]
}
 8013456:	4618      	mov	r0, r3
 8013458:	3714      	adds	r7, #20
 801345a:	46bd      	mov	sp, r7
 801345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013460:	4770      	bx	lr
 8013462:	bf00      	nop

08013464 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8013464:	b480      	push	{r7}
 8013466:	b089      	sub	sp, #36	; 0x24
 8013468:	af00      	add	r7, sp, #0
 801346a:	6078      	str	r0, [r7, #4]
 801346c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 801346e:	2300      	movs	r3, #0
 8013470:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8013472:	2300      	movs	r3, #0
 8013474:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8013476:	2300      	movs	r3, #0
 8013478:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 801347a:	2300      	movs	r3, #0
 801347c:	61fb      	str	r3, [r7, #28]
 801347e:	e16b      	b.n	8013758 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8013480:	2201      	movs	r2, #1
 8013482:	69fb      	ldr	r3, [r7, #28]
 8013484:	fa02 f303 	lsl.w	r3, r2, r3
 8013488:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 801348a:	683b      	ldr	r3, [r7, #0]
 801348c:	681b      	ldr	r3, [r3, #0]
 801348e:	697a      	ldr	r2, [r7, #20]
 8013490:	4013      	ands	r3, r2
 8013492:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8013494:	693a      	ldr	r2, [r7, #16]
 8013496:	697b      	ldr	r3, [r7, #20]
 8013498:	429a      	cmp	r2, r3
 801349a:	f040 815a 	bne.w	8013752 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 801349e:	683b      	ldr	r3, [r7, #0]
 80134a0:	685b      	ldr	r3, [r3, #4]
 80134a2:	f003 0303 	and.w	r3, r3, #3
 80134a6:	2b01      	cmp	r3, #1
 80134a8:	d005      	beq.n	80134b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80134aa:	683b      	ldr	r3, [r7, #0]
 80134ac:	685b      	ldr	r3, [r3, #4]
 80134ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80134b2:	2b02      	cmp	r3, #2
 80134b4:	d130      	bne.n	8013518 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80134b6:	687b      	ldr	r3, [r7, #4]
 80134b8:	689b      	ldr	r3, [r3, #8]
 80134ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80134bc:	69fb      	ldr	r3, [r7, #28]
 80134be:	005b      	lsls	r3, r3, #1
 80134c0:	2203      	movs	r2, #3
 80134c2:	fa02 f303 	lsl.w	r3, r2, r3
 80134c6:	43db      	mvns	r3, r3
 80134c8:	69ba      	ldr	r2, [r7, #24]
 80134ca:	4013      	ands	r3, r2
 80134cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80134ce:	683b      	ldr	r3, [r7, #0]
 80134d0:	68da      	ldr	r2, [r3, #12]
 80134d2:	69fb      	ldr	r3, [r7, #28]
 80134d4:	005b      	lsls	r3, r3, #1
 80134d6:	fa02 f303 	lsl.w	r3, r2, r3
 80134da:	69ba      	ldr	r2, [r7, #24]
 80134dc:	4313      	orrs	r3, r2
 80134de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80134e0:	687b      	ldr	r3, [r7, #4]
 80134e2:	69ba      	ldr	r2, [r7, #24]
 80134e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80134e6:	687b      	ldr	r3, [r7, #4]
 80134e8:	685b      	ldr	r3, [r3, #4]
 80134ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80134ec:	2201      	movs	r2, #1
 80134ee:	69fb      	ldr	r3, [r7, #28]
 80134f0:	fa02 f303 	lsl.w	r3, r2, r3
 80134f4:	43db      	mvns	r3, r3
 80134f6:	69ba      	ldr	r2, [r7, #24]
 80134f8:	4013      	ands	r3, r2
 80134fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80134fc:	683b      	ldr	r3, [r7, #0]
 80134fe:	685b      	ldr	r3, [r3, #4]
 8013500:	091b      	lsrs	r3, r3, #4
 8013502:	f003 0201 	and.w	r2, r3, #1
 8013506:	69fb      	ldr	r3, [r7, #28]
 8013508:	fa02 f303 	lsl.w	r3, r2, r3
 801350c:	69ba      	ldr	r2, [r7, #24]
 801350e:	4313      	orrs	r3, r2
 8013510:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8013512:	687b      	ldr	r3, [r7, #4]
 8013514:	69ba      	ldr	r2, [r7, #24]
 8013516:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8013518:	683b      	ldr	r3, [r7, #0]
 801351a:	685b      	ldr	r3, [r3, #4]
 801351c:	f003 0303 	and.w	r3, r3, #3
 8013520:	2b03      	cmp	r3, #3
 8013522:	d017      	beq.n	8013554 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8013524:	687b      	ldr	r3, [r7, #4]
 8013526:	68db      	ldr	r3, [r3, #12]
 8013528:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 801352a:	69fb      	ldr	r3, [r7, #28]
 801352c:	005b      	lsls	r3, r3, #1
 801352e:	2203      	movs	r2, #3
 8013530:	fa02 f303 	lsl.w	r3, r2, r3
 8013534:	43db      	mvns	r3, r3
 8013536:	69ba      	ldr	r2, [r7, #24]
 8013538:	4013      	ands	r3, r2
 801353a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 801353c:	683b      	ldr	r3, [r7, #0]
 801353e:	689a      	ldr	r2, [r3, #8]
 8013540:	69fb      	ldr	r3, [r7, #28]
 8013542:	005b      	lsls	r3, r3, #1
 8013544:	fa02 f303 	lsl.w	r3, r2, r3
 8013548:	69ba      	ldr	r2, [r7, #24]
 801354a:	4313      	orrs	r3, r2
 801354c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	69ba      	ldr	r2, [r7, #24]
 8013552:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8013554:	683b      	ldr	r3, [r7, #0]
 8013556:	685b      	ldr	r3, [r3, #4]
 8013558:	f003 0303 	and.w	r3, r3, #3
 801355c:	2b02      	cmp	r3, #2
 801355e:	d123      	bne.n	80135a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8013560:	69fb      	ldr	r3, [r7, #28]
 8013562:	08da      	lsrs	r2, r3, #3
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	3208      	adds	r2, #8
 8013568:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801356c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 801356e:	69fb      	ldr	r3, [r7, #28]
 8013570:	f003 0307 	and.w	r3, r3, #7
 8013574:	009b      	lsls	r3, r3, #2
 8013576:	220f      	movs	r2, #15
 8013578:	fa02 f303 	lsl.w	r3, r2, r3
 801357c:	43db      	mvns	r3, r3
 801357e:	69ba      	ldr	r2, [r7, #24]
 8013580:	4013      	ands	r3, r2
 8013582:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8013584:	683b      	ldr	r3, [r7, #0]
 8013586:	691a      	ldr	r2, [r3, #16]
 8013588:	69fb      	ldr	r3, [r7, #28]
 801358a:	f003 0307 	and.w	r3, r3, #7
 801358e:	009b      	lsls	r3, r3, #2
 8013590:	fa02 f303 	lsl.w	r3, r2, r3
 8013594:	69ba      	ldr	r2, [r7, #24]
 8013596:	4313      	orrs	r3, r2
 8013598:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 801359a:	69fb      	ldr	r3, [r7, #28]
 801359c:	08da      	lsrs	r2, r3, #3
 801359e:	687b      	ldr	r3, [r7, #4]
 80135a0:	3208      	adds	r2, #8
 80135a2:	69b9      	ldr	r1, [r7, #24]
 80135a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80135a8:	687b      	ldr	r3, [r7, #4]
 80135aa:	681b      	ldr	r3, [r3, #0]
 80135ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80135ae:	69fb      	ldr	r3, [r7, #28]
 80135b0:	005b      	lsls	r3, r3, #1
 80135b2:	2203      	movs	r2, #3
 80135b4:	fa02 f303 	lsl.w	r3, r2, r3
 80135b8:	43db      	mvns	r3, r3
 80135ba:	69ba      	ldr	r2, [r7, #24]
 80135bc:	4013      	ands	r3, r2
 80135be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80135c0:	683b      	ldr	r3, [r7, #0]
 80135c2:	685b      	ldr	r3, [r3, #4]
 80135c4:	f003 0203 	and.w	r2, r3, #3
 80135c8:	69fb      	ldr	r3, [r7, #28]
 80135ca:	005b      	lsls	r3, r3, #1
 80135cc:	fa02 f303 	lsl.w	r3, r2, r3
 80135d0:	69ba      	ldr	r2, [r7, #24]
 80135d2:	4313      	orrs	r3, r2
 80135d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80135d6:	687b      	ldr	r3, [r7, #4]
 80135d8:	69ba      	ldr	r2, [r7, #24]
 80135da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80135dc:	683b      	ldr	r3, [r7, #0]
 80135de:	685b      	ldr	r3, [r3, #4]
 80135e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80135e4:	2b00      	cmp	r3, #0
 80135e6:	f000 80b4 	beq.w	8013752 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80135ea:	2300      	movs	r3, #0
 80135ec:	60fb      	str	r3, [r7, #12]
 80135ee:	4b60      	ldr	r3, [pc, #384]	; (8013770 <HAL_GPIO_Init+0x30c>)
 80135f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80135f2:	4a5f      	ldr	r2, [pc, #380]	; (8013770 <HAL_GPIO_Init+0x30c>)
 80135f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80135f8:	6453      	str	r3, [r2, #68]	; 0x44
 80135fa:	4b5d      	ldr	r3, [pc, #372]	; (8013770 <HAL_GPIO_Init+0x30c>)
 80135fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80135fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8013602:	60fb      	str	r3, [r7, #12]
 8013604:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8013606:	4a5b      	ldr	r2, [pc, #364]	; (8013774 <HAL_GPIO_Init+0x310>)
 8013608:	69fb      	ldr	r3, [r7, #28]
 801360a:	089b      	lsrs	r3, r3, #2
 801360c:	3302      	adds	r3, #2
 801360e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013612:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8013614:	69fb      	ldr	r3, [r7, #28]
 8013616:	f003 0303 	and.w	r3, r3, #3
 801361a:	009b      	lsls	r3, r3, #2
 801361c:	220f      	movs	r2, #15
 801361e:	fa02 f303 	lsl.w	r3, r2, r3
 8013622:	43db      	mvns	r3, r3
 8013624:	69ba      	ldr	r2, [r7, #24]
 8013626:	4013      	ands	r3, r2
 8013628:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 801362a:	687b      	ldr	r3, [r7, #4]
 801362c:	4a52      	ldr	r2, [pc, #328]	; (8013778 <HAL_GPIO_Init+0x314>)
 801362e:	4293      	cmp	r3, r2
 8013630:	d02b      	beq.n	801368a <HAL_GPIO_Init+0x226>
 8013632:	687b      	ldr	r3, [r7, #4]
 8013634:	4a51      	ldr	r2, [pc, #324]	; (801377c <HAL_GPIO_Init+0x318>)
 8013636:	4293      	cmp	r3, r2
 8013638:	d025      	beq.n	8013686 <HAL_GPIO_Init+0x222>
 801363a:	687b      	ldr	r3, [r7, #4]
 801363c:	4a50      	ldr	r2, [pc, #320]	; (8013780 <HAL_GPIO_Init+0x31c>)
 801363e:	4293      	cmp	r3, r2
 8013640:	d01f      	beq.n	8013682 <HAL_GPIO_Init+0x21e>
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	4a4f      	ldr	r2, [pc, #316]	; (8013784 <HAL_GPIO_Init+0x320>)
 8013646:	4293      	cmp	r3, r2
 8013648:	d019      	beq.n	801367e <HAL_GPIO_Init+0x21a>
 801364a:	687b      	ldr	r3, [r7, #4]
 801364c:	4a4e      	ldr	r2, [pc, #312]	; (8013788 <HAL_GPIO_Init+0x324>)
 801364e:	4293      	cmp	r3, r2
 8013650:	d013      	beq.n	801367a <HAL_GPIO_Init+0x216>
 8013652:	687b      	ldr	r3, [r7, #4]
 8013654:	4a4d      	ldr	r2, [pc, #308]	; (801378c <HAL_GPIO_Init+0x328>)
 8013656:	4293      	cmp	r3, r2
 8013658:	d00d      	beq.n	8013676 <HAL_GPIO_Init+0x212>
 801365a:	687b      	ldr	r3, [r7, #4]
 801365c:	4a4c      	ldr	r2, [pc, #304]	; (8013790 <HAL_GPIO_Init+0x32c>)
 801365e:	4293      	cmp	r3, r2
 8013660:	d007      	beq.n	8013672 <HAL_GPIO_Init+0x20e>
 8013662:	687b      	ldr	r3, [r7, #4]
 8013664:	4a4b      	ldr	r2, [pc, #300]	; (8013794 <HAL_GPIO_Init+0x330>)
 8013666:	4293      	cmp	r3, r2
 8013668:	d101      	bne.n	801366e <HAL_GPIO_Init+0x20a>
 801366a:	2307      	movs	r3, #7
 801366c:	e00e      	b.n	801368c <HAL_GPIO_Init+0x228>
 801366e:	2308      	movs	r3, #8
 8013670:	e00c      	b.n	801368c <HAL_GPIO_Init+0x228>
 8013672:	2306      	movs	r3, #6
 8013674:	e00a      	b.n	801368c <HAL_GPIO_Init+0x228>
 8013676:	2305      	movs	r3, #5
 8013678:	e008      	b.n	801368c <HAL_GPIO_Init+0x228>
 801367a:	2304      	movs	r3, #4
 801367c:	e006      	b.n	801368c <HAL_GPIO_Init+0x228>
 801367e:	2303      	movs	r3, #3
 8013680:	e004      	b.n	801368c <HAL_GPIO_Init+0x228>
 8013682:	2302      	movs	r3, #2
 8013684:	e002      	b.n	801368c <HAL_GPIO_Init+0x228>
 8013686:	2301      	movs	r3, #1
 8013688:	e000      	b.n	801368c <HAL_GPIO_Init+0x228>
 801368a:	2300      	movs	r3, #0
 801368c:	69fa      	ldr	r2, [r7, #28]
 801368e:	f002 0203 	and.w	r2, r2, #3
 8013692:	0092      	lsls	r2, r2, #2
 8013694:	4093      	lsls	r3, r2
 8013696:	69ba      	ldr	r2, [r7, #24]
 8013698:	4313      	orrs	r3, r2
 801369a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 801369c:	4935      	ldr	r1, [pc, #212]	; (8013774 <HAL_GPIO_Init+0x310>)
 801369e:	69fb      	ldr	r3, [r7, #28]
 80136a0:	089b      	lsrs	r3, r3, #2
 80136a2:	3302      	adds	r3, #2
 80136a4:	69ba      	ldr	r2, [r7, #24]
 80136a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80136aa:	4b3b      	ldr	r3, [pc, #236]	; (8013798 <HAL_GPIO_Init+0x334>)
 80136ac:	681b      	ldr	r3, [r3, #0]
 80136ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80136b0:	693b      	ldr	r3, [r7, #16]
 80136b2:	43db      	mvns	r3, r3
 80136b4:	69ba      	ldr	r2, [r7, #24]
 80136b6:	4013      	ands	r3, r2
 80136b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80136ba:	683b      	ldr	r3, [r7, #0]
 80136bc:	685b      	ldr	r3, [r3, #4]
 80136be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80136c2:	2b00      	cmp	r3, #0
 80136c4:	d003      	beq.n	80136ce <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80136c6:	69ba      	ldr	r2, [r7, #24]
 80136c8:	693b      	ldr	r3, [r7, #16]
 80136ca:	4313      	orrs	r3, r2
 80136cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80136ce:	4a32      	ldr	r2, [pc, #200]	; (8013798 <HAL_GPIO_Init+0x334>)
 80136d0:	69bb      	ldr	r3, [r7, #24]
 80136d2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80136d4:	4b30      	ldr	r3, [pc, #192]	; (8013798 <HAL_GPIO_Init+0x334>)
 80136d6:	685b      	ldr	r3, [r3, #4]
 80136d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80136da:	693b      	ldr	r3, [r7, #16]
 80136dc:	43db      	mvns	r3, r3
 80136de:	69ba      	ldr	r2, [r7, #24]
 80136e0:	4013      	ands	r3, r2
 80136e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80136e4:	683b      	ldr	r3, [r7, #0]
 80136e6:	685b      	ldr	r3, [r3, #4]
 80136e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80136ec:	2b00      	cmp	r3, #0
 80136ee:	d003      	beq.n	80136f8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80136f0:	69ba      	ldr	r2, [r7, #24]
 80136f2:	693b      	ldr	r3, [r7, #16]
 80136f4:	4313      	orrs	r3, r2
 80136f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80136f8:	4a27      	ldr	r2, [pc, #156]	; (8013798 <HAL_GPIO_Init+0x334>)
 80136fa:	69bb      	ldr	r3, [r7, #24]
 80136fc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80136fe:	4b26      	ldr	r3, [pc, #152]	; (8013798 <HAL_GPIO_Init+0x334>)
 8013700:	689b      	ldr	r3, [r3, #8]
 8013702:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8013704:	693b      	ldr	r3, [r7, #16]
 8013706:	43db      	mvns	r3, r3
 8013708:	69ba      	ldr	r2, [r7, #24]
 801370a:	4013      	ands	r3, r2
 801370c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 801370e:	683b      	ldr	r3, [r7, #0]
 8013710:	685b      	ldr	r3, [r3, #4]
 8013712:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8013716:	2b00      	cmp	r3, #0
 8013718:	d003      	beq.n	8013722 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 801371a:	69ba      	ldr	r2, [r7, #24]
 801371c:	693b      	ldr	r3, [r7, #16]
 801371e:	4313      	orrs	r3, r2
 8013720:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8013722:	4a1d      	ldr	r2, [pc, #116]	; (8013798 <HAL_GPIO_Init+0x334>)
 8013724:	69bb      	ldr	r3, [r7, #24]
 8013726:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8013728:	4b1b      	ldr	r3, [pc, #108]	; (8013798 <HAL_GPIO_Init+0x334>)
 801372a:	68db      	ldr	r3, [r3, #12]
 801372c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801372e:	693b      	ldr	r3, [r7, #16]
 8013730:	43db      	mvns	r3, r3
 8013732:	69ba      	ldr	r2, [r7, #24]
 8013734:	4013      	ands	r3, r2
 8013736:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8013738:	683b      	ldr	r3, [r7, #0]
 801373a:	685b      	ldr	r3, [r3, #4]
 801373c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8013740:	2b00      	cmp	r3, #0
 8013742:	d003      	beq.n	801374c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8013744:	69ba      	ldr	r2, [r7, #24]
 8013746:	693b      	ldr	r3, [r7, #16]
 8013748:	4313      	orrs	r3, r2
 801374a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 801374c:	4a12      	ldr	r2, [pc, #72]	; (8013798 <HAL_GPIO_Init+0x334>)
 801374e:	69bb      	ldr	r3, [r7, #24]
 8013750:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8013752:	69fb      	ldr	r3, [r7, #28]
 8013754:	3301      	adds	r3, #1
 8013756:	61fb      	str	r3, [r7, #28]
 8013758:	69fb      	ldr	r3, [r7, #28]
 801375a:	2b0f      	cmp	r3, #15
 801375c:	f67f ae90 	bls.w	8013480 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8013760:	bf00      	nop
 8013762:	bf00      	nop
 8013764:	3724      	adds	r7, #36	; 0x24
 8013766:	46bd      	mov	sp, r7
 8013768:	f85d 7b04 	ldr.w	r7, [sp], #4
 801376c:	4770      	bx	lr
 801376e:	bf00      	nop
 8013770:	40023800 	.word	0x40023800
 8013774:	40013800 	.word	0x40013800
 8013778:	40020000 	.word	0x40020000
 801377c:	40020400 	.word	0x40020400
 8013780:	40020800 	.word	0x40020800
 8013784:	40020c00 	.word	0x40020c00
 8013788:	40021000 	.word	0x40021000
 801378c:	40021400 	.word	0x40021400
 8013790:	40021800 	.word	0x40021800
 8013794:	40021c00 	.word	0x40021c00
 8013798:	40013c00 	.word	0x40013c00

0801379c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801379c:	b480      	push	{r7}
 801379e:	b083      	sub	sp, #12
 80137a0:	af00      	add	r7, sp, #0
 80137a2:	6078      	str	r0, [r7, #4]
 80137a4:	460b      	mov	r3, r1
 80137a6:	807b      	strh	r3, [r7, #2]
 80137a8:	4613      	mov	r3, r2
 80137aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80137ac:	787b      	ldrb	r3, [r7, #1]
 80137ae:	2b00      	cmp	r3, #0
 80137b0:	d003      	beq.n	80137ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80137b2:	887a      	ldrh	r2, [r7, #2]
 80137b4:	687b      	ldr	r3, [r7, #4]
 80137b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80137b8:	e003      	b.n	80137c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80137ba:	887b      	ldrh	r3, [r7, #2]
 80137bc:	041a      	lsls	r2, r3, #16
 80137be:	687b      	ldr	r3, [r7, #4]
 80137c0:	619a      	str	r2, [r3, #24]
}
 80137c2:	bf00      	nop
 80137c4:	370c      	adds	r7, #12
 80137c6:	46bd      	mov	sp, r7
 80137c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137cc:	4770      	bx	lr

080137ce <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80137ce:	b480      	push	{r7}
 80137d0:	b083      	sub	sp, #12
 80137d2:	af00      	add	r7, sp, #0
 80137d4:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80137d6:	687b      	ldr	r3, [r7, #4]
 80137d8:	681b      	ldr	r3, [r3, #0]
 80137da:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80137de:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80137e0:	2300      	movs	r3, #0
}
 80137e2:	4618      	mov	r0, r3
 80137e4:	370c      	adds	r7, #12
 80137e6:	46bd      	mov	sp, r7
 80137e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137ec:	4770      	bx	lr
	...

080137f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80137f0:	b580      	push	{r7, lr}
 80137f2:	b086      	sub	sp, #24
 80137f4:	af00      	add	r7, sp, #0
 80137f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80137f8:	687b      	ldr	r3, [r7, #4]
 80137fa:	2b00      	cmp	r3, #0
 80137fc:	d101      	bne.n	8013802 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80137fe:	2301      	movs	r3, #1
 8013800:	e264      	b.n	8013ccc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8013802:	687b      	ldr	r3, [r7, #4]
 8013804:	681b      	ldr	r3, [r3, #0]
 8013806:	f003 0301 	and.w	r3, r3, #1
 801380a:	2b00      	cmp	r3, #0
 801380c:	d075      	beq.n	80138fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 801380e:	4ba3      	ldr	r3, [pc, #652]	; (8013a9c <HAL_RCC_OscConfig+0x2ac>)
 8013810:	689b      	ldr	r3, [r3, #8]
 8013812:	f003 030c 	and.w	r3, r3, #12
 8013816:	2b04      	cmp	r3, #4
 8013818:	d00c      	beq.n	8013834 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801381a:	4ba0      	ldr	r3, [pc, #640]	; (8013a9c <HAL_RCC_OscConfig+0x2ac>)
 801381c:	689b      	ldr	r3, [r3, #8]
 801381e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8013822:	2b08      	cmp	r3, #8
 8013824:	d112      	bne.n	801384c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8013826:	4b9d      	ldr	r3, [pc, #628]	; (8013a9c <HAL_RCC_OscConfig+0x2ac>)
 8013828:	685b      	ldr	r3, [r3, #4]
 801382a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801382e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8013832:	d10b      	bne.n	801384c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8013834:	4b99      	ldr	r3, [pc, #612]	; (8013a9c <HAL_RCC_OscConfig+0x2ac>)
 8013836:	681b      	ldr	r3, [r3, #0]
 8013838:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801383c:	2b00      	cmp	r3, #0
 801383e:	d05b      	beq.n	80138f8 <HAL_RCC_OscConfig+0x108>
 8013840:	687b      	ldr	r3, [r7, #4]
 8013842:	685b      	ldr	r3, [r3, #4]
 8013844:	2b00      	cmp	r3, #0
 8013846:	d157      	bne.n	80138f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8013848:	2301      	movs	r3, #1
 801384a:	e23f      	b.n	8013ccc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801384c:	687b      	ldr	r3, [r7, #4]
 801384e:	685b      	ldr	r3, [r3, #4]
 8013850:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013854:	d106      	bne.n	8013864 <HAL_RCC_OscConfig+0x74>
 8013856:	4b91      	ldr	r3, [pc, #580]	; (8013a9c <HAL_RCC_OscConfig+0x2ac>)
 8013858:	681b      	ldr	r3, [r3, #0]
 801385a:	4a90      	ldr	r2, [pc, #576]	; (8013a9c <HAL_RCC_OscConfig+0x2ac>)
 801385c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8013860:	6013      	str	r3, [r2, #0]
 8013862:	e01d      	b.n	80138a0 <HAL_RCC_OscConfig+0xb0>
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	685b      	ldr	r3, [r3, #4]
 8013868:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801386c:	d10c      	bne.n	8013888 <HAL_RCC_OscConfig+0x98>
 801386e:	4b8b      	ldr	r3, [pc, #556]	; (8013a9c <HAL_RCC_OscConfig+0x2ac>)
 8013870:	681b      	ldr	r3, [r3, #0]
 8013872:	4a8a      	ldr	r2, [pc, #552]	; (8013a9c <HAL_RCC_OscConfig+0x2ac>)
 8013874:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8013878:	6013      	str	r3, [r2, #0]
 801387a:	4b88      	ldr	r3, [pc, #544]	; (8013a9c <HAL_RCC_OscConfig+0x2ac>)
 801387c:	681b      	ldr	r3, [r3, #0]
 801387e:	4a87      	ldr	r2, [pc, #540]	; (8013a9c <HAL_RCC_OscConfig+0x2ac>)
 8013880:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8013884:	6013      	str	r3, [r2, #0]
 8013886:	e00b      	b.n	80138a0 <HAL_RCC_OscConfig+0xb0>
 8013888:	4b84      	ldr	r3, [pc, #528]	; (8013a9c <HAL_RCC_OscConfig+0x2ac>)
 801388a:	681b      	ldr	r3, [r3, #0]
 801388c:	4a83      	ldr	r2, [pc, #524]	; (8013a9c <HAL_RCC_OscConfig+0x2ac>)
 801388e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8013892:	6013      	str	r3, [r2, #0]
 8013894:	4b81      	ldr	r3, [pc, #516]	; (8013a9c <HAL_RCC_OscConfig+0x2ac>)
 8013896:	681b      	ldr	r3, [r3, #0]
 8013898:	4a80      	ldr	r2, [pc, #512]	; (8013a9c <HAL_RCC_OscConfig+0x2ac>)
 801389a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801389e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	685b      	ldr	r3, [r3, #4]
 80138a4:	2b00      	cmp	r3, #0
 80138a6:	d013      	beq.n	80138d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80138a8:	f7fd ffcc 	bl	8011844 <HAL_GetTick>
 80138ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80138ae:	e008      	b.n	80138c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80138b0:	f7fd ffc8 	bl	8011844 <HAL_GetTick>
 80138b4:	4602      	mov	r2, r0
 80138b6:	693b      	ldr	r3, [r7, #16]
 80138b8:	1ad3      	subs	r3, r2, r3
 80138ba:	2b64      	cmp	r3, #100	; 0x64
 80138bc:	d901      	bls.n	80138c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80138be:	2303      	movs	r3, #3
 80138c0:	e204      	b.n	8013ccc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80138c2:	4b76      	ldr	r3, [pc, #472]	; (8013a9c <HAL_RCC_OscConfig+0x2ac>)
 80138c4:	681b      	ldr	r3, [r3, #0]
 80138c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80138ca:	2b00      	cmp	r3, #0
 80138cc:	d0f0      	beq.n	80138b0 <HAL_RCC_OscConfig+0xc0>
 80138ce:	e014      	b.n	80138fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80138d0:	f7fd ffb8 	bl	8011844 <HAL_GetTick>
 80138d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80138d6:	e008      	b.n	80138ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80138d8:	f7fd ffb4 	bl	8011844 <HAL_GetTick>
 80138dc:	4602      	mov	r2, r0
 80138de:	693b      	ldr	r3, [r7, #16]
 80138e0:	1ad3      	subs	r3, r2, r3
 80138e2:	2b64      	cmp	r3, #100	; 0x64
 80138e4:	d901      	bls.n	80138ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80138e6:	2303      	movs	r3, #3
 80138e8:	e1f0      	b.n	8013ccc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80138ea:	4b6c      	ldr	r3, [pc, #432]	; (8013a9c <HAL_RCC_OscConfig+0x2ac>)
 80138ec:	681b      	ldr	r3, [r3, #0]
 80138ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80138f2:	2b00      	cmp	r3, #0
 80138f4:	d1f0      	bne.n	80138d8 <HAL_RCC_OscConfig+0xe8>
 80138f6:	e000      	b.n	80138fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80138f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80138fa:	687b      	ldr	r3, [r7, #4]
 80138fc:	681b      	ldr	r3, [r3, #0]
 80138fe:	f003 0302 	and.w	r3, r3, #2
 8013902:	2b00      	cmp	r3, #0
 8013904:	d063      	beq.n	80139ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8013906:	4b65      	ldr	r3, [pc, #404]	; (8013a9c <HAL_RCC_OscConfig+0x2ac>)
 8013908:	689b      	ldr	r3, [r3, #8]
 801390a:	f003 030c 	and.w	r3, r3, #12
 801390e:	2b00      	cmp	r3, #0
 8013910:	d00b      	beq.n	801392a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8013912:	4b62      	ldr	r3, [pc, #392]	; (8013a9c <HAL_RCC_OscConfig+0x2ac>)
 8013914:	689b      	ldr	r3, [r3, #8]
 8013916:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 801391a:	2b08      	cmp	r3, #8
 801391c:	d11c      	bne.n	8013958 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801391e:	4b5f      	ldr	r3, [pc, #380]	; (8013a9c <HAL_RCC_OscConfig+0x2ac>)
 8013920:	685b      	ldr	r3, [r3, #4]
 8013922:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8013926:	2b00      	cmp	r3, #0
 8013928:	d116      	bne.n	8013958 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801392a:	4b5c      	ldr	r3, [pc, #368]	; (8013a9c <HAL_RCC_OscConfig+0x2ac>)
 801392c:	681b      	ldr	r3, [r3, #0]
 801392e:	f003 0302 	and.w	r3, r3, #2
 8013932:	2b00      	cmp	r3, #0
 8013934:	d005      	beq.n	8013942 <HAL_RCC_OscConfig+0x152>
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	68db      	ldr	r3, [r3, #12]
 801393a:	2b01      	cmp	r3, #1
 801393c:	d001      	beq.n	8013942 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 801393e:	2301      	movs	r3, #1
 8013940:	e1c4      	b.n	8013ccc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8013942:	4b56      	ldr	r3, [pc, #344]	; (8013a9c <HAL_RCC_OscConfig+0x2ac>)
 8013944:	681b      	ldr	r3, [r3, #0]
 8013946:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801394a:	687b      	ldr	r3, [r7, #4]
 801394c:	691b      	ldr	r3, [r3, #16]
 801394e:	00db      	lsls	r3, r3, #3
 8013950:	4952      	ldr	r1, [pc, #328]	; (8013a9c <HAL_RCC_OscConfig+0x2ac>)
 8013952:	4313      	orrs	r3, r2
 8013954:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8013956:	e03a      	b.n	80139ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8013958:	687b      	ldr	r3, [r7, #4]
 801395a:	68db      	ldr	r3, [r3, #12]
 801395c:	2b00      	cmp	r3, #0
 801395e:	d020      	beq.n	80139a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8013960:	4b4f      	ldr	r3, [pc, #316]	; (8013aa0 <HAL_RCC_OscConfig+0x2b0>)
 8013962:	2201      	movs	r2, #1
 8013964:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013966:	f7fd ff6d 	bl	8011844 <HAL_GetTick>
 801396a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801396c:	e008      	b.n	8013980 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801396e:	f7fd ff69 	bl	8011844 <HAL_GetTick>
 8013972:	4602      	mov	r2, r0
 8013974:	693b      	ldr	r3, [r7, #16]
 8013976:	1ad3      	subs	r3, r2, r3
 8013978:	2b02      	cmp	r3, #2
 801397a:	d901      	bls.n	8013980 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 801397c:	2303      	movs	r3, #3
 801397e:	e1a5      	b.n	8013ccc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8013980:	4b46      	ldr	r3, [pc, #280]	; (8013a9c <HAL_RCC_OscConfig+0x2ac>)
 8013982:	681b      	ldr	r3, [r3, #0]
 8013984:	f003 0302 	and.w	r3, r3, #2
 8013988:	2b00      	cmp	r3, #0
 801398a:	d0f0      	beq.n	801396e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801398c:	4b43      	ldr	r3, [pc, #268]	; (8013a9c <HAL_RCC_OscConfig+0x2ac>)
 801398e:	681b      	ldr	r3, [r3, #0]
 8013990:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8013994:	687b      	ldr	r3, [r7, #4]
 8013996:	691b      	ldr	r3, [r3, #16]
 8013998:	00db      	lsls	r3, r3, #3
 801399a:	4940      	ldr	r1, [pc, #256]	; (8013a9c <HAL_RCC_OscConfig+0x2ac>)
 801399c:	4313      	orrs	r3, r2
 801399e:	600b      	str	r3, [r1, #0]
 80139a0:	e015      	b.n	80139ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80139a2:	4b3f      	ldr	r3, [pc, #252]	; (8013aa0 <HAL_RCC_OscConfig+0x2b0>)
 80139a4:	2200      	movs	r2, #0
 80139a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80139a8:	f7fd ff4c 	bl	8011844 <HAL_GetTick>
 80139ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80139ae:	e008      	b.n	80139c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80139b0:	f7fd ff48 	bl	8011844 <HAL_GetTick>
 80139b4:	4602      	mov	r2, r0
 80139b6:	693b      	ldr	r3, [r7, #16]
 80139b8:	1ad3      	subs	r3, r2, r3
 80139ba:	2b02      	cmp	r3, #2
 80139bc:	d901      	bls.n	80139c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80139be:	2303      	movs	r3, #3
 80139c0:	e184      	b.n	8013ccc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80139c2:	4b36      	ldr	r3, [pc, #216]	; (8013a9c <HAL_RCC_OscConfig+0x2ac>)
 80139c4:	681b      	ldr	r3, [r3, #0]
 80139c6:	f003 0302 	and.w	r3, r3, #2
 80139ca:	2b00      	cmp	r3, #0
 80139cc:	d1f0      	bne.n	80139b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	681b      	ldr	r3, [r3, #0]
 80139d2:	f003 0308 	and.w	r3, r3, #8
 80139d6:	2b00      	cmp	r3, #0
 80139d8:	d030      	beq.n	8013a3c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80139da:	687b      	ldr	r3, [r7, #4]
 80139dc:	695b      	ldr	r3, [r3, #20]
 80139de:	2b00      	cmp	r3, #0
 80139e0:	d016      	beq.n	8013a10 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80139e2:	4b30      	ldr	r3, [pc, #192]	; (8013aa4 <HAL_RCC_OscConfig+0x2b4>)
 80139e4:	2201      	movs	r2, #1
 80139e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80139e8:	f7fd ff2c 	bl	8011844 <HAL_GetTick>
 80139ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80139ee:	e008      	b.n	8013a02 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80139f0:	f7fd ff28 	bl	8011844 <HAL_GetTick>
 80139f4:	4602      	mov	r2, r0
 80139f6:	693b      	ldr	r3, [r7, #16]
 80139f8:	1ad3      	subs	r3, r2, r3
 80139fa:	2b02      	cmp	r3, #2
 80139fc:	d901      	bls.n	8013a02 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80139fe:	2303      	movs	r3, #3
 8013a00:	e164      	b.n	8013ccc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8013a02:	4b26      	ldr	r3, [pc, #152]	; (8013a9c <HAL_RCC_OscConfig+0x2ac>)
 8013a04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013a06:	f003 0302 	and.w	r3, r3, #2
 8013a0a:	2b00      	cmp	r3, #0
 8013a0c:	d0f0      	beq.n	80139f0 <HAL_RCC_OscConfig+0x200>
 8013a0e:	e015      	b.n	8013a3c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8013a10:	4b24      	ldr	r3, [pc, #144]	; (8013aa4 <HAL_RCC_OscConfig+0x2b4>)
 8013a12:	2200      	movs	r2, #0
 8013a14:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8013a16:	f7fd ff15 	bl	8011844 <HAL_GetTick>
 8013a1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8013a1c:	e008      	b.n	8013a30 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8013a1e:	f7fd ff11 	bl	8011844 <HAL_GetTick>
 8013a22:	4602      	mov	r2, r0
 8013a24:	693b      	ldr	r3, [r7, #16]
 8013a26:	1ad3      	subs	r3, r2, r3
 8013a28:	2b02      	cmp	r3, #2
 8013a2a:	d901      	bls.n	8013a30 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8013a2c:	2303      	movs	r3, #3
 8013a2e:	e14d      	b.n	8013ccc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8013a30:	4b1a      	ldr	r3, [pc, #104]	; (8013a9c <HAL_RCC_OscConfig+0x2ac>)
 8013a32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013a34:	f003 0302 	and.w	r3, r3, #2
 8013a38:	2b00      	cmp	r3, #0
 8013a3a:	d1f0      	bne.n	8013a1e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8013a3c:	687b      	ldr	r3, [r7, #4]
 8013a3e:	681b      	ldr	r3, [r3, #0]
 8013a40:	f003 0304 	and.w	r3, r3, #4
 8013a44:	2b00      	cmp	r3, #0
 8013a46:	f000 80a0 	beq.w	8013b8a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8013a4a:	2300      	movs	r3, #0
 8013a4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8013a4e:	4b13      	ldr	r3, [pc, #76]	; (8013a9c <HAL_RCC_OscConfig+0x2ac>)
 8013a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013a56:	2b00      	cmp	r3, #0
 8013a58:	d10f      	bne.n	8013a7a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8013a5a:	2300      	movs	r3, #0
 8013a5c:	60bb      	str	r3, [r7, #8]
 8013a5e:	4b0f      	ldr	r3, [pc, #60]	; (8013a9c <HAL_RCC_OscConfig+0x2ac>)
 8013a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013a62:	4a0e      	ldr	r2, [pc, #56]	; (8013a9c <HAL_RCC_OscConfig+0x2ac>)
 8013a64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013a68:	6413      	str	r3, [r2, #64]	; 0x40
 8013a6a:	4b0c      	ldr	r3, [pc, #48]	; (8013a9c <HAL_RCC_OscConfig+0x2ac>)
 8013a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013a72:	60bb      	str	r3, [r7, #8]
 8013a74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8013a76:	2301      	movs	r3, #1
 8013a78:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8013a7a:	4b0b      	ldr	r3, [pc, #44]	; (8013aa8 <HAL_RCC_OscConfig+0x2b8>)
 8013a7c:	681b      	ldr	r3, [r3, #0]
 8013a7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013a82:	2b00      	cmp	r3, #0
 8013a84:	d121      	bne.n	8013aca <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8013a86:	4b08      	ldr	r3, [pc, #32]	; (8013aa8 <HAL_RCC_OscConfig+0x2b8>)
 8013a88:	681b      	ldr	r3, [r3, #0]
 8013a8a:	4a07      	ldr	r2, [pc, #28]	; (8013aa8 <HAL_RCC_OscConfig+0x2b8>)
 8013a8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013a90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8013a92:	f7fd fed7 	bl	8011844 <HAL_GetTick>
 8013a96:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8013a98:	e011      	b.n	8013abe <HAL_RCC_OscConfig+0x2ce>
 8013a9a:	bf00      	nop
 8013a9c:	40023800 	.word	0x40023800
 8013aa0:	42470000 	.word	0x42470000
 8013aa4:	42470e80 	.word	0x42470e80
 8013aa8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8013aac:	f7fd feca 	bl	8011844 <HAL_GetTick>
 8013ab0:	4602      	mov	r2, r0
 8013ab2:	693b      	ldr	r3, [r7, #16]
 8013ab4:	1ad3      	subs	r3, r2, r3
 8013ab6:	2b02      	cmp	r3, #2
 8013ab8:	d901      	bls.n	8013abe <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8013aba:	2303      	movs	r3, #3
 8013abc:	e106      	b.n	8013ccc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8013abe:	4b85      	ldr	r3, [pc, #532]	; (8013cd4 <HAL_RCC_OscConfig+0x4e4>)
 8013ac0:	681b      	ldr	r3, [r3, #0]
 8013ac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013ac6:	2b00      	cmp	r3, #0
 8013ac8:	d0f0      	beq.n	8013aac <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8013aca:	687b      	ldr	r3, [r7, #4]
 8013acc:	689b      	ldr	r3, [r3, #8]
 8013ace:	2b01      	cmp	r3, #1
 8013ad0:	d106      	bne.n	8013ae0 <HAL_RCC_OscConfig+0x2f0>
 8013ad2:	4b81      	ldr	r3, [pc, #516]	; (8013cd8 <HAL_RCC_OscConfig+0x4e8>)
 8013ad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013ad6:	4a80      	ldr	r2, [pc, #512]	; (8013cd8 <HAL_RCC_OscConfig+0x4e8>)
 8013ad8:	f043 0301 	orr.w	r3, r3, #1
 8013adc:	6713      	str	r3, [r2, #112]	; 0x70
 8013ade:	e01c      	b.n	8013b1a <HAL_RCC_OscConfig+0x32a>
 8013ae0:	687b      	ldr	r3, [r7, #4]
 8013ae2:	689b      	ldr	r3, [r3, #8]
 8013ae4:	2b05      	cmp	r3, #5
 8013ae6:	d10c      	bne.n	8013b02 <HAL_RCC_OscConfig+0x312>
 8013ae8:	4b7b      	ldr	r3, [pc, #492]	; (8013cd8 <HAL_RCC_OscConfig+0x4e8>)
 8013aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013aec:	4a7a      	ldr	r2, [pc, #488]	; (8013cd8 <HAL_RCC_OscConfig+0x4e8>)
 8013aee:	f043 0304 	orr.w	r3, r3, #4
 8013af2:	6713      	str	r3, [r2, #112]	; 0x70
 8013af4:	4b78      	ldr	r3, [pc, #480]	; (8013cd8 <HAL_RCC_OscConfig+0x4e8>)
 8013af6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013af8:	4a77      	ldr	r2, [pc, #476]	; (8013cd8 <HAL_RCC_OscConfig+0x4e8>)
 8013afa:	f043 0301 	orr.w	r3, r3, #1
 8013afe:	6713      	str	r3, [r2, #112]	; 0x70
 8013b00:	e00b      	b.n	8013b1a <HAL_RCC_OscConfig+0x32a>
 8013b02:	4b75      	ldr	r3, [pc, #468]	; (8013cd8 <HAL_RCC_OscConfig+0x4e8>)
 8013b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013b06:	4a74      	ldr	r2, [pc, #464]	; (8013cd8 <HAL_RCC_OscConfig+0x4e8>)
 8013b08:	f023 0301 	bic.w	r3, r3, #1
 8013b0c:	6713      	str	r3, [r2, #112]	; 0x70
 8013b0e:	4b72      	ldr	r3, [pc, #456]	; (8013cd8 <HAL_RCC_OscConfig+0x4e8>)
 8013b10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013b12:	4a71      	ldr	r2, [pc, #452]	; (8013cd8 <HAL_RCC_OscConfig+0x4e8>)
 8013b14:	f023 0304 	bic.w	r3, r3, #4
 8013b18:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8013b1a:	687b      	ldr	r3, [r7, #4]
 8013b1c:	689b      	ldr	r3, [r3, #8]
 8013b1e:	2b00      	cmp	r3, #0
 8013b20:	d015      	beq.n	8013b4e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8013b22:	f7fd fe8f 	bl	8011844 <HAL_GetTick>
 8013b26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8013b28:	e00a      	b.n	8013b40 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8013b2a:	f7fd fe8b 	bl	8011844 <HAL_GetTick>
 8013b2e:	4602      	mov	r2, r0
 8013b30:	693b      	ldr	r3, [r7, #16]
 8013b32:	1ad3      	subs	r3, r2, r3
 8013b34:	f241 3288 	movw	r2, #5000	; 0x1388
 8013b38:	4293      	cmp	r3, r2
 8013b3a:	d901      	bls.n	8013b40 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8013b3c:	2303      	movs	r3, #3
 8013b3e:	e0c5      	b.n	8013ccc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8013b40:	4b65      	ldr	r3, [pc, #404]	; (8013cd8 <HAL_RCC_OscConfig+0x4e8>)
 8013b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013b44:	f003 0302 	and.w	r3, r3, #2
 8013b48:	2b00      	cmp	r3, #0
 8013b4a:	d0ee      	beq.n	8013b2a <HAL_RCC_OscConfig+0x33a>
 8013b4c:	e014      	b.n	8013b78 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8013b4e:	f7fd fe79 	bl	8011844 <HAL_GetTick>
 8013b52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8013b54:	e00a      	b.n	8013b6c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8013b56:	f7fd fe75 	bl	8011844 <HAL_GetTick>
 8013b5a:	4602      	mov	r2, r0
 8013b5c:	693b      	ldr	r3, [r7, #16]
 8013b5e:	1ad3      	subs	r3, r2, r3
 8013b60:	f241 3288 	movw	r2, #5000	; 0x1388
 8013b64:	4293      	cmp	r3, r2
 8013b66:	d901      	bls.n	8013b6c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8013b68:	2303      	movs	r3, #3
 8013b6a:	e0af      	b.n	8013ccc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8013b6c:	4b5a      	ldr	r3, [pc, #360]	; (8013cd8 <HAL_RCC_OscConfig+0x4e8>)
 8013b6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013b70:	f003 0302 	and.w	r3, r3, #2
 8013b74:	2b00      	cmp	r3, #0
 8013b76:	d1ee      	bne.n	8013b56 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8013b78:	7dfb      	ldrb	r3, [r7, #23]
 8013b7a:	2b01      	cmp	r3, #1
 8013b7c:	d105      	bne.n	8013b8a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8013b7e:	4b56      	ldr	r3, [pc, #344]	; (8013cd8 <HAL_RCC_OscConfig+0x4e8>)
 8013b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013b82:	4a55      	ldr	r2, [pc, #340]	; (8013cd8 <HAL_RCC_OscConfig+0x4e8>)
 8013b84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8013b88:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8013b8a:	687b      	ldr	r3, [r7, #4]
 8013b8c:	699b      	ldr	r3, [r3, #24]
 8013b8e:	2b00      	cmp	r3, #0
 8013b90:	f000 809b 	beq.w	8013cca <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8013b94:	4b50      	ldr	r3, [pc, #320]	; (8013cd8 <HAL_RCC_OscConfig+0x4e8>)
 8013b96:	689b      	ldr	r3, [r3, #8]
 8013b98:	f003 030c 	and.w	r3, r3, #12
 8013b9c:	2b08      	cmp	r3, #8
 8013b9e:	d05c      	beq.n	8013c5a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8013ba0:	687b      	ldr	r3, [r7, #4]
 8013ba2:	699b      	ldr	r3, [r3, #24]
 8013ba4:	2b02      	cmp	r3, #2
 8013ba6:	d141      	bne.n	8013c2c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8013ba8:	4b4c      	ldr	r3, [pc, #304]	; (8013cdc <HAL_RCC_OscConfig+0x4ec>)
 8013baa:	2200      	movs	r2, #0
 8013bac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013bae:	f7fd fe49 	bl	8011844 <HAL_GetTick>
 8013bb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8013bb4:	e008      	b.n	8013bc8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8013bb6:	f7fd fe45 	bl	8011844 <HAL_GetTick>
 8013bba:	4602      	mov	r2, r0
 8013bbc:	693b      	ldr	r3, [r7, #16]
 8013bbe:	1ad3      	subs	r3, r2, r3
 8013bc0:	2b02      	cmp	r3, #2
 8013bc2:	d901      	bls.n	8013bc8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8013bc4:	2303      	movs	r3, #3
 8013bc6:	e081      	b.n	8013ccc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8013bc8:	4b43      	ldr	r3, [pc, #268]	; (8013cd8 <HAL_RCC_OscConfig+0x4e8>)
 8013bca:	681b      	ldr	r3, [r3, #0]
 8013bcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013bd0:	2b00      	cmp	r3, #0
 8013bd2:	d1f0      	bne.n	8013bb6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8013bd4:	687b      	ldr	r3, [r7, #4]
 8013bd6:	69da      	ldr	r2, [r3, #28]
 8013bd8:	687b      	ldr	r3, [r7, #4]
 8013bda:	6a1b      	ldr	r3, [r3, #32]
 8013bdc:	431a      	orrs	r2, r3
 8013bde:	687b      	ldr	r3, [r7, #4]
 8013be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013be2:	019b      	lsls	r3, r3, #6
 8013be4:	431a      	orrs	r2, r3
 8013be6:	687b      	ldr	r3, [r7, #4]
 8013be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013bea:	085b      	lsrs	r3, r3, #1
 8013bec:	3b01      	subs	r3, #1
 8013bee:	041b      	lsls	r3, r3, #16
 8013bf0:	431a      	orrs	r2, r3
 8013bf2:	687b      	ldr	r3, [r7, #4]
 8013bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013bf6:	061b      	lsls	r3, r3, #24
 8013bf8:	4937      	ldr	r1, [pc, #220]	; (8013cd8 <HAL_RCC_OscConfig+0x4e8>)
 8013bfa:	4313      	orrs	r3, r2
 8013bfc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8013bfe:	4b37      	ldr	r3, [pc, #220]	; (8013cdc <HAL_RCC_OscConfig+0x4ec>)
 8013c00:	2201      	movs	r2, #1
 8013c02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013c04:	f7fd fe1e 	bl	8011844 <HAL_GetTick>
 8013c08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8013c0a:	e008      	b.n	8013c1e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8013c0c:	f7fd fe1a 	bl	8011844 <HAL_GetTick>
 8013c10:	4602      	mov	r2, r0
 8013c12:	693b      	ldr	r3, [r7, #16]
 8013c14:	1ad3      	subs	r3, r2, r3
 8013c16:	2b02      	cmp	r3, #2
 8013c18:	d901      	bls.n	8013c1e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8013c1a:	2303      	movs	r3, #3
 8013c1c:	e056      	b.n	8013ccc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8013c1e:	4b2e      	ldr	r3, [pc, #184]	; (8013cd8 <HAL_RCC_OscConfig+0x4e8>)
 8013c20:	681b      	ldr	r3, [r3, #0]
 8013c22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013c26:	2b00      	cmp	r3, #0
 8013c28:	d0f0      	beq.n	8013c0c <HAL_RCC_OscConfig+0x41c>
 8013c2a:	e04e      	b.n	8013cca <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8013c2c:	4b2b      	ldr	r3, [pc, #172]	; (8013cdc <HAL_RCC_OscConfig+0x4ec>)
 8013c2e:	2200      	movs	r2, #0
 8013c30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013c32:	f7fd fe07 	bl	8011844 <HAL_GetTick>
 8013c36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8013c38:	e008      	b.n	8013c4c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8013c3a:	f7fd fe03 	bl	8011844 <HAL_GetTick>
 8013c3e:	4602      	mov	r2, r0
 8013c40:	693b      	ldr	r3, [r7, #16]
 8013c42:	1ad3      	subs	r3, r2, r3
 8013c44:	2b02      	cmp	r3, #2
 8013c46:	d901      	bls.n	8013c4c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8013c48:	2303      	movs	r3, #3
 8013c4a:	e03f      	b.n	8013ccc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8013c4c:	4b22      	ldr	r3, [pc, #136]	; (8013cd8 <HAL_RCC_OscConfig+0x4e8>)
 8013c4e:	681b      	ldr	r3, [r3, #0]
 8013c50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013c54:	2b00      	cmp	r3, #0
 8013c56:	d1f0      	bne.n	8013c3a <HAL_RCC_OscConfig+0x44a>
 8013c58:	e037      	b.n	8013cca <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8013c5a:	687b      	ldr	r3, [r7, #4]
 8013c5c:	699b      	ldr	r3, [r3, #24]
 8013c5e:	2b01      	cmp	r3, #1
 8013c60:	d101      	bne.n	8013c66 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8013c62:	2301      	movs	r3, #1
 8013c64:	e032      	b.n	8013ccc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8013c66:	4b1c      	ldr	r3, [pc, #112]	; (8013cd8 <HAL_RCC_OscConfig+0x4e8>)
 8013c68:	685b      	ldr	r3, [r3, #4]
 8013c6a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	699b      	ldr	r3, [r3, #24]
 8013c70:	2b01      	cmp	r3, #1
 8013c72:	d028      	beq.n	8013cc6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8013c74:	68fb      	ldr	r3, [r7, #12]
 8013c76:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8013c7a:	687b      	ldr	r3, [r7, #4]
 8013c7c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8013c7e:	429a      	cmp	r2, r3
 8013c80:	d121      	bne.n	8013cc6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8013c82:	68fb      	ldr	r3, [r7, #12]
 8013c84:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8013c88:	687b      	ldr	r3, [r7, #4]
 8013c8a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8013c8c:	429a      	cmp	r2, r3
 8013c8e:	d11a      	bne.n	8013cc6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8013c90:	68fa      	ldr	r2, [r7, #12]
 8013c92:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8013c96:	4013      	ands	r3, r2
 8013c98:	687a      	ldr	r2, [r7, #4]
 8013c9a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8013c9c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8013c9e:	4293      	cmp	r3, r2
 8013ca0:	d111      	bne.n	8013cc6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8013ca2:	68fb      	ldr	r3, [r7, #12]
 8013ca4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8013ca8:	687b      	ldr	r3, [r7, #4]
 8013caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013cac:	085b      	lsrs	r3, r3, #1
 8013cae:	3b01      	subs	r3, #1
 8013cb0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8013cb2:	429a      	cmp	r2, r3
 8013cb4:	d107      	bne.n	8013cc6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8013cb6:	68fb      	ldr	r3, [r7, #12]
 8013cb8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013cc0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8013cc2:	429a      	cmp	r2, r3
 8013cc4:	d001      	beq.n	8013cca <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8013cc6:	2301      	movs	r3, #1
 8013cc8:	e000      	b.n	8013ccc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8013cca:	2300      	movs	r3, #0
}
 8013ccc:	4618      	mov	r0, r3
 8013cce:	3718      	adds	r7, #24
 8013cd0:	46bd      	mov	sp, r7
 8013cd2:	bd80      	pop	{r7, pc}
 8013cd4:	40007000 	.word	0x40007000
 8013cd8:	40023800 	.word	0x40023800
 8013cdc:	42470060 	.word	0x42470060

08013ce0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8013ce0:	b580      	push	{r7, lr}
 8013ce2:	b084      	sub	sp, #16
 8013ce4:	af00      	add	r7, sp, #0
 8013ce6:	6078      	str	r0, [r7, #4]
 8013ce8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8013cea:	687b      	ldr	r3, [r7, #4]
 8013cec:	2b00      	cmp	r3, #0
 8013cee:	d101      	bne.n	8013cf4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8013cf0:	2301      	movs	r3, #1
 8013cf2:	e0cc      	b.n	8013e8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8013cf4:	4b68      	ldr	r3, [pc, #416]	; (8013e98 <HAL_RCC_ClockConfig+0x1b8>)
 8013cf6:	681b      	ldr	r3, [r3, #0]
 8013cf8:	f003 0307 	and.w	r3, r3, #7
 8013cfc:	683a      	ldr	r2, [r7, #0]
 8013cfe:	429a      	cmp	r2, r3
 8013d00:	d90c      	bls.n	8013d1c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8013d02:	4b65      	ldr	r3, [pc, #404]	; (8013e98 <HAL_RCC_ClockConfig+0x1b8>)
 8013d04:	683a      	ldr	r2, [r7, #0]
 8013d06:	b2d2      	uxtb	r2, r2
 8013d08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8013d0a:	4b63      	ldr	r3, [pc, #396]	; (8013e98 <HAL_RCC_ClockConfig+0x1b8>)
 8013d0c:	681b      	ldr	r3, [r3, #0]
 8013d0e:	f003 0307 	and.w	r3, r3, #7
 8013d12:	683a      	ldr	r2, [r7, #0]
 8013d14:	429a      	cmp	r2, r3
 8013d16:	d001      	beq.n	8013d1c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8013d18:	2301      	movs	r3, #1
 8013d1a:	e0b8      	b.n	8013e8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8013d1c:	687b      	ldr	r3, [r7, #4]
 8013d1e:	681b      	ldr	r3, [r3, #0]
 8013d20:	f003 0302 	and.w	r3, r3, #2
 8013d24:	2b00      	cmp	r3, #0
 8013d26:	d020      	beq.n	8013d6a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8013d28:	687b      	ldr	r3, [r7, #4]
 8013d2a:	681b      	ldr	r3, [r3, #0]
 8013d2c:	f003 0304 	and.w	r3, r3, #4
 8013d30:	2b00      	cmp	r3, #0
 8013d32:	d005      	beq.n	8013d40 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8013d34:	4b59      	ldr	r3, [pc, #356]	; (8013e9c <HAL_RCC_ClockConfig+0x1bc>)
 8013d36:	689b      	ldr	r3, [r3, #8]
 8013d38:	4a58      	ldr	r2, [pc, #352]	; (8013e9c <HAL_RCC_ClockConfig+0x1bc>)
 8013d3a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8013d3e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8013d40:	687b      	ldr	r3, [r7, #4]
 8013d42:	681b      	ldr	r3, [r3, #0]
 8013d44:	f003 0308 	and.w	r3, r3, #8
 8013d48:	2b00      	cmp	r3, #0
 8013d4a:	d005      	beq.n	8013d58 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8013d4c:	4b53      	ldr	r3, [pc, #332]	; (8013e9c <HAL_RCC_ClockConfig+0x1bc>)
 8013d4e:	689b      	ldr	r3, [r3, #8]
 8013d50:	4a52      	ldr	r2, [pc, #328]	; (8013e9c <HAL_RCC_ClockConfig+0x1bc>)
 8013d52:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8013d56:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8013d58:	4b50      	ldr	r3, [pc, #320]	; (8013e9c <HAL_RCC_ClockConfig+0x1bc>)
 8013d5a:	689b      	ldr	r3, [r3, #8]
 8013d5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8013d60:	687b      	ldr	r3, [r7, #4]
 8013d62:	689b      	ldr	r3, [r3, #8]
 8013d64:	494d      	ldr	r1, [pc, #308]	; (8013e9c <HAL_RCC_ClockConfig+0x1bc>)
 8013d66:	4313      	orrs	r3, r2
 8013d68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8013d6a:	687b      	ldr	r3, [r7, #4]
 8013d6c:	681b      	ldr	r3, [r3, #0]
 8013d6e:	f003 0301 	and.w	r3, r3, #1
 8013d72:	2b00      	cmp	r3, #0
 8013d74:	d044      	beq.n	8013e00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8013d76:	687b      	ldr	r3, [r7, #4]
 8013d78:	685b      	ldr	r3, [r3, #4]
 8013d7a:	2b01      	cmp	r3, #1
 8013d7c:	d107      	bne.n	8013d8e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8013d7e:	4b47      	ldr	r3, [pc, #284]	; (8013e9c <HAL_RCC_ClockConfig+0x1bc>)
 8013d80:	681b      	ldr	r3, [r3, #0]
 8013d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013d86:	2b00      	cmp	r3, #0
 8013d88:	d119      	bne.n	8013dbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8013d8a:	2301      	movs	r3, #1
 8013d8c:	e07f      	b.n	8013e8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8013d8e:	687b      	ldr	r3, [r7, #4]
 8013d90:	685b      	ldr	r3, [r3, #4]
 8013d92:	2b02      	cmp	r3, #2
 8013d94:	d003      	beq.n	8013d9e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8013d96:	687b      	ldr	r3, [r7, #4]
 8013d98:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8013d9a:	2b03      	cmp	r3, #3
 8013d9c:	d107      	bne.n	8013dae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8013d9e:	4b3f      	ldr	r3, [pc, #252]	; (8013e9c <HAL_RCC_ClockConfig+0x1bc>)
 8013da0:	681b      	ldr	r3, [r3, #0]
 8013da2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013da6:	2b00      	cmp	r3, #0
 8013da8:	d109      	bne.n	8013dbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8013daa:	2301      	movs	r3, #1
 8013dac:	e06f      	b.n	8013e8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8013dae:	4b3b      	ldr	r3, [pc, #236]	; (8013e9c <HAL_RCC_ClockConfig+0x1bc>)
 8013db0:	681b      	ldr	r3, [r3, #0]
 8013db2:	f003 0302 	and.w	r3, r3, #2
 8013db6:	2b00      	cmp	r3, #0
 8013db8:	d101      	bne.n	8013dbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8013dba:	2301      	movs	r3, #1
 8013dbc:	e067      	b.n	8013e8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8013dbe:	4b37      	ldr	r3, [pc, #220]	; (8013e9c <HAL_RCC_ClockConfig+0x1bc>)
 8013dc0:	689b      	ldr	r3, [r3, #8]
 8013dc2:	f023 0203 	bic.w	r2, r3, #3
 8013dc6:	687b      	ldr	r3, [r7, #4]
 8013dc8:	685b      	ldr	r3, [r3, #4]
 8013dca:	4934      	ldr	r1, [pc, #208]	; (8013e9c <HAL_RCC_ClockConfig+0x1bc>)
 8013dcc:	4313      	orrs	r3, r2
 8013dce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8013dd0:	f7fd fd38 	bl	8011844 <HAL_GetTick>
 8013dd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8013dd6:	e00a      	b.n	8013dee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8013dd8:	f7fd fd34 	bl	8011844 <HAL_GetTick>
 8013ddc:	4602      	mov	r2, r0
 8013dde:	68fb      	ldr	r3, [r7, #12]
 8013de0:	1ad3      	subs	r3, r2, r3
 8013de2:	f241 3288 	movw	r2, #5000	; 0x1388
 8013de6:	4293      	cmp	r3, r2
 8013de8:	d901      	bls.n	8013dee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8013dea:	2303      	movs	r3, #3
 8013dec:	e04f      	b.n	8013e8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8013dee:	4b2b      	ldr	r3, [pc, #172]	; (8013e9c <HAL_RCC_ClockConfig+0x1bc>)
 8013df0:	689b      	ldr	r3, [r3, #8]
 8013df2:	f003 020c 	and.w	r2, r3, #12
 8013df6:	687b      	ldr	r3, [r7, #4]
 8013df8:	685b      	ldr	r3, [r3, #4]
 8013dfa:	009b      	lsls	r3, r3, #2
 8013dfc:	429a      	cmp	r2, r3
 8013dfe:	d1eb      	bne.n	8013dd8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8013e00:	4b25      	ldr	r3, [pc, #148]	; (8013e98 <HAL_RCC_ClockConfig+0x1b8>)
 8013e02:	681b      	ldr	r3, [r3, #0]
 8013e04:	f003 0307 	and.w	r3, r3, #7
 8013e08:	683a      	ldr	r2, [r7, #0]
 8013e0a:	429a      	cmp	r2, r3
 8013e0c:	d20c      	bcs.n	8013e28 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8013e0e:	4b22      	ldr	r3, [pc, #136]	; (8013e98 <HAL_RCC_ClockConfig+0x1b8>)
 8013e10:	683a      	ldr	r2, [r7, #0]
 8013e12:	b2d2      	uxtb	r2, r2
 8013e14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8013e16:	4b20      	ldr	r3, [pc, #128]	; (8013e98 <HAL_RCC_ClockConfig+0x1b8>)
 8013e18:	681b      	ldr	r3, [r3, #0]
 8013e1a:	f003 0307 	and.w	r3, r3, #7
 8013e1e:	683a      	ldr	r2, [r7, #0]
 8013e20:	429a      	cmp	r2, r3
 8013e22:	d001      	beq.n	8013e28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8013e24:	2301      	movs	r3, #1
 8013e26:	e032      	b.n	8013e8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8013e28:	687b      	ldr	r3, [r7, #4]
 8013e2a:	681b      	ldr	r3, [r3, #0]
 8013e2c:	f003 0304 	and.w	r3, r3, #4
 8013e30:	2b00      	cmp	r3, #0
 8013e32:	d008      	beq.n	8013e46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8013e34:	4b19      	ldr	r3, [pc, #100]	; (8013e9c <HAL_RCC_ClockConfig+0x1bc>)
 8013e36:	689b      	ldr	r3, [r3, #8]
 8013e38:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8013e3c:	687b      	ldr	r3, [r7, #4]
 8013e3e:	68db      	ldr	r3, [r3, #12]
 8013e40:	4916      	ldr	r1, [pc, #88]	; (8013e9c <HAL_RCC_ClockConfig+0x1bc>)
 8013e42:	4313      	orrs	r3, r2
 8013e44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8013e46:	687b      	ldr	r3, [r7, #4]
 8013e48:	681b      	ldr	r3, [r3, #0]
 8013e4a:	f003 0308 	and.w	r3, r3, #8
 8013e4e:	2b00      	cmp	r3, #0
 8013e50:	d009      	beq.n	8013e66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8013e52:	4b12      	ldr	r3, [pc, #72]	; (8013e9c <HAL_RCC_ClockConfig+0x1bc>)
 8013e54:	689b      	ldr	r3, [r3, #8]
 8013e56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8013e5a:	687b      	ldr	r3, [r7, #4]
 8013e5c:	691b      	ldr	r3, [r3, #16]
 8013e5e:	00db      	lsls	r3, r3, #3
 8013e60:	490e      	ldr	r1, [pc, #56]	; (8013e9c <HAL_RCC_ClockConfig+0x1bc>)
 8013e62:	4313      	orrs	r3, r2
 8013e64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8013e66:	f000 f821 	bl	8013eac <HAL_RCC_GetSysClockFreq>
 8013e6a:	4602      	mov	r2, r0
 8013e6c:	4b0b      	ldr	r3, [pc, #44]	; (8013e9c <HAL_RCC_ClockConfig+0x1bc>)
 8013e6e:	689b      	ldr	r3, [r3, #8]
 8013e70:	091b      	lsrs	r3, r3, #4
 8013e72:	f003 030f 	and.w	r3, r3, #15
 8013e76:	490a      	ldr	r1, [pc, #40]	; (8013ea0 <HAL_RCC_ClockConfig+0x1c0>)
 8013e78:	5ccb      	ldrb	r3, [r1, r3]
 8013e7a:	fa22 f303 	lsr.w	r3, r2, r3
 8013e7e:	4a09      	ldr	r2, [pc, #36]	; (8013ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8013e80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8013e82:	4b09      	ldr	r3, [pc, #36]	; (8013ea8 <HAL_RCC_ClockConfig+0x1c8>)
 8013e84:	681b      	ldr	r3, [r3, #0]
 8013e86:	4618      	mov	r0, r3
 8013e88:	f7f0 fe04 	bl	8004a94 <HAL_InitTick>

  return HAL_OK;
 8013e8c:	2300      	movs	r3, #0
}
 8013e8e:	4618      	mov	r0, r3
 8013e90:	3710      	adds	r7, #16
 8013e92:	46bd      	mov	sp, r7
 8013e94:	bd80      	pop	{r7, pc}
 8013e96:	bf00      	nop
 8013e98:	40023c00 	.word	0x40023c00
 8013e9c:	40023800 	.word	0x40023800
 8013ea0:	0801c3a4 	.word	0x0801c3a4
 8013ea4:	20000084 	.word	0x20000084
 8013ea8:	20001438 	.word	0x20001438

08013eac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8013eac:	b5b0      	push	{r4, r5, r7, lr}
 8013eae:	b084      	sub	sp, #16
 8013eb0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8013eb2:	2100      	movs	r1, #0
 8013eb4:	6079      	str	r1, [r7, #4]
 8013eb6:	2100      	movs	r1, #0
 8013eb8:	60f9      	str	r1, [r7, #12]
 8013eba:	2100      	movs	r1, #0
 8013ebc:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8013ebe:	2100      	movs	r1, #0
 8013ec0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8013ec2:	4952      	ldr	r1, [pc, #328]	; (801400c <HAL_RCC_GetSysClockFreq+0x160>)
 8013ec4:	6889      	ldr	r1, [r1, #8]
 8013ec6:	f001 010c 	and.w	r1, r1, #12
 8013eca:	2908      	cmp	r1, #8
 8013ecc:	d00d      	beq.n	8013eea <HAL_RCC_GetSysClockFreq+0x3e>
 8013ece:	2908      	cmp	r1, #8
 8013ed0:	f200 8094 	bhi.w	8013ffc <HAL_RCC_GetSysClockFreq+0x150>
 8013ed4:	2900      	cmp	r1, #0
 8013ed6:	d002      	beq.n	8013ede <HAL_RCC_GetSysClockFreq+0x32>
 8013ed8:	2904      	cmp	r1, #4
 8013eda:	d003      	beq.n	8013ee4 <HAL_RCC_GetSysClockFreq+0x38>
 8013edc:	e08e      	b.n	8013ffc <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8013ede:	4b4c      	ldr	r3, [pc, #304]	; (8014010 <HAL_RCC_GetSysClockFreq+0x164>)
 8013ee0:	60bb      	str	r3, [r7, #8]
       break;
 8013ee2:	e08e      	b.n	8014002 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8013ee4:	4b4b      	ldr	r3, [pc, #300]	; (8014014 <HAL_RCC_GetSysClockFreq+0x168>)
 8013ee6:	60bb      	str	r3, [r7, #8]
      break;
 8013ee8:	e08b      	b.n	8014002 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8013eea:	4948      	ldr	r1, [pc, #288]	; (801400c <HAL_RCC_GetSysClockFreq+0x160>)
 8013eec:	6849      	ldr	r1, [r1, #4]
 8013eee:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8013ef2:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8013ef4:	4945      	ldr	r1, [pc, #276]	; (801400c <HAL_RCC_GetSysClockFreq+0x160>)
 8013ef6:	6849      	ldr	r1, [r1, #4]
 8013ef8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8013efc:	2900      	cmp	r1, #0
 8013efe:	d024      	beq.n	8013f4a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8013f00:	4942      	ldr	r1, [pc, #264]	; (801400c <HAL_RCC_GetSysClockFreq+0x160>)
 8013f02:	6849      	ldr	r1, [r1, #4]
 8013f04:	0989      	lsrs	r1, r1, #6
 8013f06:	4608      	mov	r0, r1
 8013f08:	f04f 0100 	mov.w	r1, #0
 8013f0c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8013f10:	f04f 0500 	mov.w	r5, #0
 8013f14:	ea00 0204 	and.w	r2, r0, r4
 8013f18:	ea01 0305 	and.w	r3, r1, r5
 8013f1c:	493d      	ldr	r1, [pc, #244]	; (8014014 <HAL_RCC_GetSysClockFreq+0x168>)
 8013f1e:	fb01 f003 	mul.w	r0, r1, r3
 8013f22:	2100      	movs	r1, #0
 8013f24:	fb01 f102 	mul.w	r1, r1, r2
 8013f28:	1844      	adds	r4, r0, r1
 8013f2a:	493a      	ldr	r1, [pc, #232]	; (8014014 <HAL_RCC_GetSysClockFreq+0x168>)
 8013f2c:	fba2 0101 	umull	r0, r1, r2, r1
 8013f30:	1863      	adds	r3, r4, r1
 8013f32:	4619      	mov	r1, r3
 8013f34:	687b      	ldr	r3, [r7, #4]
 8013f36:	461a      	mov	r2, r3
 8013f38:	f04f 0300 	mov.w	r3, #0
 8013f3c:	f7ec fe96 	bl	8000c6c <__aeabi_uldivmod>
 8013f40:	4602      	mov	r2, r0
 8013f42:	460b      	mov	r3, r1
 8013f44:	4613      	mov	r3, r2
 8013f46:	60fb      	str	r3, [r7, #12]
 8013f48:	e04a      	b.n	8013fe0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8013f4a:	4b30      	ldr	r3, [pc, #192]	; (801400c <HAL_RCC_GetSysClockFreq+0x160>)
 8013f4c:	685b      	ldr	r3, [r3, #4]
 8013f4e:	099b      	lsrs	r3, r3, #6
 8013f50:	461a      	mov	r2, r3
 8013f52:	f04f 0300 	mov.w	r3, #0
 8013f56:	f240 10ff 	movw	r0, #511	; 0x1ff
 8013f5a:	f04f 0100 	mov.w	r1, #0
 8013f5e:	ea02 0400 	and.w	r4, r2, r0
 8013f62:	ea03 0501 	and.w	r5, r3, r1
 8013f66:	4620      	mov	r0, r4
 8013f68:	4629      	mov	r1, r5
 8013f6a:	f04f 0200 	mov.w	r2, #0
 8013f6e:	f04f 0300 	mov.w	r3, #0
 8013f72:	014b      	lsls	r3, r1, #5
 8013f74:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8013f78:	0142      	lsls	r2, r0, #5
 8013f7a:	4610      	mov	r0, r2
 8013f7c:	4619      	mov	r1, r3
 8013f7e:	1b00      	subs	r0, r0, r4
 8013f80:	eb61 0105 	sbc.w	r1, r1, r5
 8013f84:	f04f 0200 	mov.w	r2, #0
 8013f88:	f04f 0300 	mov.w	r3, #0
 8013f8c:	018b      	lsls	r3, r1, #6
 8013f8e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8013f92:	0182      	lsls	r2, r0, #6
 8013f94:	1a12      	subs	r2, r2, r0
 8013f96:	eb63 0301 	sbc.w	r3, r3, r1
 8013f9a:	f04f 0000 	mov.w	r0, #0
 8013f9e:	f04f 0100 	mov.w	r1, #0
 8013fa2:	00d9      	lsls	r1, r3, #3
 8013fa4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8013fa8:	00d0      	lsls	r0, r2, #3
 8013faa:	4602      	mov	r2, r0
 8013fac:	460b      	mov	r3, r1
 8013fae:	1912      	adds	r2, r2, r4
 8013fb0:	eb45 0303 	adc.w	r3, r5, r3
 8013fb4:	f04f 0000 	mov.w	r0, #0
 8013fb8:	f04f 0100 	mov.w	r1, #0
 8013fbc:	0299      	lsls	r1, r3, #10
 8013fbe:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8013fc2:	0290      	lsls	r0, r2, #10
 8013fc4:	4602      	mov	r2, r0
 8013fc6:	460b      	mov	r3, r1
 8013fc8:	4610      	mov	r0, r2
 8013fca:	4619      	mov	r1, r3
 8013fcc:	687b      	ldr	r3, [r7, #4]
 8013fce:	461a      	mov	r2, r3
 8013fd0:	f04f 0300 	mov.w	r3, #0
 8013fd4:	f7ec fe4a 	bl	8000c6c <__aeabi_uldivmod>
 8013fd8:	4602      	mov	r2, r0
 8013fda:	460b      	mov	r3, r1
 8013fdc:	4613      	mov	r3, r2
 8013fde:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8013fe0:	4b0a      	ldr	r3, [pc, #40]	; (801400c <HAL_RCC_GetSysClockFreq+0x160>)
 8013fe2:	685b      	ldr	r3, [r3, #4]
 8013fe4:	0c1b      	lsrs	r3, r3, #16
 8013fe6:	f003 0303 	and.w	r3, r3, #3
 8013fea:	3301      	adds	r3, #1
 8013fec:	005b      	lsls	r3, r3, #1
 8013fee:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8013ff0:	68fa      	ldr	r2, [r7, #12]
 8013ff2:	683b      	ldr	r3, [r7, #0]
 8013ff4:	fbb2 f3f3 	udiv	r3, r2, r3
 8013ff8:	60bb      	str	r3, [r7, #8]
      break;
 8013ffa:	e002      	b.n	8014002 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8013ffc:	4b04      	ldr	r3, [pc, #16]	; (8014010 <HAL_RCC_GetSysClockFreq+0x164>)
 8013ffe:	60bb      	str	r3, [r7, #8]
      break;
 8014000:	bf00      	nop
    }
  }
  return sysclockfreq;
 8014002:	68bb      	ldr	r3, [r7, #8]
}
 8014004:	4618      	mov	r0, r3
 8014006:	3710      	adds	r7, #16
 8014008:	46bd      	mov	sp, r7
 801400a:	bdb0      	pop	{r4, r5, r7, pc}
 801400c:	40023800 	.word	0x40023800
 8014010:	00f42400 	.word	0x00f42400
 8014014:	017d7840 	.word	0x017d7840

08014018 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8014018:	b480      	push	{r7}
 801401a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801401c:	4b03      	ldr	r3, [pc, #12]	; (801402c <HAL_RCC_GetHCLKFreq+0x14>)
 801401e:	681b      	ldr	r3, [r3, #0]
}
 8014020:	4618      	mov	r0, r3
 8014022:	46bd      	mov	sp, r7
 8014024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014028:	4770      	bx	lr
 801402a:	bf00      	nop
 801402c:	20000084 	.word	0x20000084

08014030 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8014030:	b580      	push	{r7, lr}
 8014032:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8014034:	f7ff fff0 	bl	8014018 <HAL_RCC_GetHCLKFreq>
 8014038:	4602      	mov	r2, r0
 801403a:	4b05      	ldr	r3, [pc, #20]	; (8014050 <HAL_RCC_GetPCLK1Freq+0x20>)
 801403c:	689b      	ldr	r3, [r3, #8]
 801403e:	0a9b      	lsrs	r3, r3, #10
 8014040:	f003 0307 	and.w	r3, r3, #7
 8014044:	4903      	ldr	r1, [pc, #12]	; (8014054 <HAL_RCC_GetPCLK1Freq+0x24>)
 8014046:	5ccb      	ldrb	r3, [r1, r3]
 8014048:	fa22 f303 	lsr.w	r3, r2, r3
}
 801404c:	4618      	mov	r0, r3
 801404e:	bd80      	pop	{r7, pc}
 8014050:	40023800 	.word	0x40023800
 8014054:	0801c3b4 	.word	0x0801c3b4

08014058 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8014058:	b480      	push	{r7}
 801405a:	b083      	sub	sp, #12
 801405c:	af00      	add	r7, sp, #0
 801405e:	6078      	str	r0, [r7, #4]
 8014060:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8014062:	687b      	ldr	r3, [r7, #4]
 8014064:	220f      	movs	r2, #15
 8014066:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8014068:	4b12      	ldr	r3, [pc, #72]	; (80140b4 <HAL_RCC_GetClockConfig+0x5c>)
 801406a:	689b      	ldr	r3, [r3, #8]
 801406c:	f003 0203 	and.w	r2, r3, #3
 8014070:	687b      	ldr	r3, [r7, #4]
 8014072:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8014074:	4b0f      	ldr	r3, [pc, #60]	; (80140b4 <HAL_RCC_GetClockConfig+0x5c>)
 8014076:	689b      	ldr	r3, [r3, #8]
 8014078:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 801407c:	687b      	ldr	r3, [r7, #4]
 801407e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8014080:	4b0c      	ldr	r3, [pc, #48]	; (80140b4 <HAL_RCC_GetClockConfig+0x5c>)
 8014082:	689b      	ldr	r3, [r3, #8]
 8014084:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8014088:	687b      	ldr	r3, [r7, #4]
 801408a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 801408c:	4b09      	ldr	r3, [pc, #36]	; (80140b4 <HAL_RCC_GetClockConfig+0x5c>)
 801408e:	689b      	ldr	r3, [r3, #8]
 8014090:	08db      	lsrs	r3, r3, #3
 8014092:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8014096:	687b      	ldr	r3, [r7, #4]
 8014098:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 801409a:	4b07      	ldr	r3, [pc, #28]	; (80140b8 <HAL_RCC_GetClockConfig+0x60>)
 801409c:	681b      	ldr	r3, [r3, #0]
 801409e:	f003 0207 	and.w	r2, r3, #7
 80140a2:	683b      	ldr	r3, [r7, #0]
 80140a4:	601a      	str	r2, [r3, #0]
}
 80140a6:	bf00      	nop
 80140a8:	370c      	adds	r7, #12
 80140aa:	46bd      	mov	sp, r7
 80140ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140b0:	4770      	bx	lr
 80140b2:	bf00      	nop
 80140b4:	40023800 	.word	0x40023800
 80140b8:	40023c00 	.word	0x40023c00

080140bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80140bc:	b580      	push	{r7, lr}
 80140be:	b082      	sub	sp, #8
 80140c0:	af00      	add	r7, sp, #0
 80140c2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80140c4:	687b      	ldr	r3, [r7, #4]
 80140c6:	2b00      	cmp	r3, #0
 80140c8:	d101      	bne.n	80140ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80140ca:	2301      	movs	r3, #1
 80140cc:	e07b      	b.n	80141c6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80140d2:	2b00      	cmp	r3, #0
 80140d4:	d108      	bne.n	80140e8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80140d6:	687b      	ldr	r3, [r7, #4]
 80140d8:	685b      	ldr	r3, [r3, #4]
 80140da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80140de:	d009      	beq.n	80140f4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80140e0:	687b      	ldr	r3, [r7, #4]
 80140e2:	2200      	movs	r2, #0
 80140e4:	61da      	str	r2, [r3, #28]
 80140e6:	e005      	b.n	80140f4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80140e8:	687b      	ldr	r3, [r7, #4]
 80140ea:	2200      	movs	r2, #0
 80140ec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80140ee:	687b      	ldr	r3, [r7, #4]
 80140f0:	2200      	movs	r2, #0
 80140f2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80140f4:	687b      	ldr	r3, [r7, #4]
 80140f6:	2200      	movs	r2, #0
 80140f8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80140fa:	687b      	ldr	r3, [r7, #4]
 80140fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8014100:	b2db      	uxtb	r3, r3
 8014102:	2b00      	cmp	r3, #0
 8014104:	d106      	bne.n	8014114 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8014106:	687b      	ldr	r3, [r7, #4]
 8014108:	2200      	movs	r2, #0
 801410a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801410e:	6878      	ldr	r0, [r7, #4]
 8014110:	f7f0 fc2c 	bl	800496c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	2202      	movs	r2, #2
 8014118:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801411c:	687b      	ldr	r3, [r7, #4]
 801411e:	681b      	ldr	r3, [r3, #0]
 8014120:	681a      	ldr	r2, [r3, #0]
 8014122:	687b      	ldr	r3, [r7, #4]
 8014124:	681b      	ldr	r3, [r3, #0]
 8014126:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801412a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 801412c:	687b      	ldr	r3, [r7, #4]
 801412e:	685b      	ldr	r3, [r3, #4]
 8014130:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8014134:	687b      	ldr	r3, [r7, #4]
 8014136:	689b      	ldr	r3, [r3, #8]
 8014138:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 801413c:	431a      	orrs	r2, r3
 801413e:	687b      	ldr	r3, [r7, #4]
 8014140:	68db      	ldr	r3, [r3, #12]
 8014142:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8014146:	431a      	orrs	r2, r3
 8014148:	687b      	ldr	r3, [r7, #4]
 801414a:	691b      	ldr	r3, [r3, #16]
 801414c:	f003 0302 	and.w	r3, r3, #2
 8014150:	431a      	orrs	r2, r3
 8014152:	687b      	ldr	r3, [r7, #4]
 8014154:	695b      	ldr	r3, [r3, #20]
 8014156:	f003 0301 	and.w	r3, r3, #1
 801415a:	431a      	orrs	r2, r3
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	699b      	ldr	r3, [r3, #24]
 8014160:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8014164:	431a      	orrs	r2, r3
 8014166:	687b      	ldr	r3, [r7, #4]
 8014168:	69db      	ldr	r3, [r3, #28]
 801416a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801416e:	431a      	orrs	r2, r3
 8014170:	687b      	ldr	r3, [r7, #4]
 8014172:	6a1b      	ldr	r3, [r3, #32]
 8014174:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014178:	ea42 0103 	orr.w	r1, r2, r3
 801417c:	687b      	ldr	r3, [r7, #4]
 801417e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014180:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8014184:	687b      	ldr	r3, [r7, #4]
 8014186:	681b      	ldr	r3, [r3, #0]
 8014188:	430a      	orrs	r2, r1
 801418a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 801418c:	687b      	ldr	r3, [r7, #4]
 801418e:	699b      	ldr	r3, [r3, #24]
 8014190:	0c1b      	lsrs	r3, r3, #16
 8014192:	f003 0104 	and.w	r1, r3, #4
 8014196:	687b      	ldr	r3, [r7, #4]
 8014198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801419a:	f003 0210 	and.w	r2, r3, #16
 801419e:	687b      	ldr	r3, [r7, #4]
 80141a0:	681b      	ldr	r3, [r3, #0]
 80141a2:	430a      	orrs	r2, r1
 80141a4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80141a6:	687b      	ldr	r3, [r7, #4]
 80141a8:	681b      	ldr	r3, [r3, #0]
 80141aa:	69da      	ldr	r2, [r3, #28]
 80141ac:	687b      	ldr	r3, [r7, #4]
 80141ae:	681b      	ldr	r3, [r3, #0]
 80141b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80141b4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80141b6:	687b      	ldr	r3, [r7, #4]
 80141b8:	2200      	movs	r2, #0
 80141ba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80141bc:	687b      	ldr	r3, [r7, #4]
 80141be:	2201      	movs	r2, #1
 80141c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80141c4:	2300      	movs	r3, #0
}
 80141c6:	4618      	mov	r0, r3
 80141c8:	3708      	adds	r7, #8
 80141ca:	46bd      	mov	sp, r7
 80141cc:	bd80      	pop	{r7, pc}

080141ce <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80141ce:	b580      	push	{r7, lr}
 80141d0:	b088      	sub	sp, #32
 80141d2:	af00      	add	r7, sp, #0
 80141d4:	60f8      	str	r0, [r7, #12]
 80141d6:	60b9      	str	r1, [r7, #8]
 80141d8:	603b      	str	r3, [r7, #0]
 80141da:	4613      	mov	r3, r2
 80141dc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80141de:	2300      	movs	r3, #0
 80141e0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80141e2:	68fb      	ldr	r3, [r7, #12]
 80141e4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80141e8:	2b01      	cmp	r3, #1
 80141ea:	d101      	bne.n	80141f0 <HAL_SPI_Transmit+0x22>
 80141ec:	2302      	movs	r3, #2
 80141ee:	e126      	b.n	801443e <HAL_SPI_Transmit+0x270>
 80141f0:	68fb      	ldr	r3, [r7, #12]
 80141f2:	2201      	movs	r2, #1
 80141f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80141f8:	f7fd fb24 	bl	8011844 <HAL_GetTick>
 80141fc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80141fe:	88fb      	ldrh	r3, [r7, #6]
 8014200:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8014202:	68fb      	ldr	r3, [r7, #12]
 8014204:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8014208:	b2db      	uxtb	r3, r3
 801420a:	2b01      	cmp	r3, #1
 801420c:	d002      	beq.n	8014214 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 801420e:	2302      	movs	r3, #2
 8014210:	77fb      	strb	r3, [r7, #31]
    goto error;
 8014212:	e10b      	b.n	801442c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8014214:	68bb      	ldr	r3, [r7, #8]
 8014216:	2b00      	cmp	r3, #0
 8014218:	d002      	beq.n	8014220 <HAL_SPI_Transmit+0x52>
 801421a:	88fb      	ldrh	r3, [r7, #6]
 801421c:	2b00      	cmp	r3, #0
 801421e:	d102      	bne.n	8014226 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8014220:	2301      	movs	r3, #1
 8014222:	77fb      	strb	r3, [r7, #31]
    goto error;
 8014224:	e102      	b.n	801442c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8014226:	68fb      	ldr	r3, [r7, #12]
 8014228:	2203      	movs	r2, #3
 801422a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801422e:	68fb      	ldr	r3, [r7, #12]
 8014230:	2200      	movs	r2, #0
 8014232:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8014234:	68fb      	ldr	r3, [r7, #12]
 8014236:	68ba      	ldr	r2, [r7, #8]
 8014238:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 801423a:	68fb      	ldr	r3, [r7, #12]
 801423c:	88fa      	ldrh	r2, [r7, #6]
 801423e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8014240:	68fb      	ldr	r3, [r7, #12]
 8014242:	88fa      	ldrh	r2, [r7, #6]
 8014244:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8014246:	68fb      	ldr	r3, [r7, #12]
 8014248:	2200      	movs	r2, #0
 801424a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 801424c:	68fb      	ldr	r3, [r7, #12]
 801424e:	2200      	movs	r2, #0
 8014250:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8014252:	68fb      	ldr	r3, [r7, #12]
 8014254:	2200      	movs	r2, #0
 8014256:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8014258:	68fb      	ldr	r3, [r7, #12]
 801425a:	2200      	movs	r2, #0
 801425c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 801425e:	68fb      	ldr	r3, [r7, #12]
 8014260:	2200      	movs	r2, #0
 8014262:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8014264:	68fb      	ldr	r3, [r7, #12]
 8014266:	689b      	ldr	r3, [r3, #8]
 8014268:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801426c:	d10f      	bne.n	801428e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801426e:	68fb      	ldr	r3, [r7, #12]
 8014270:	681b      	ldr	r3, [r3, #0]
 8014272:	681a      	ldr	r2, [r3, #0]
 8014274:	68fb      	ldr	r3, [r7, #12]
 8014276:	681b      	ldr	r3, [r3, #0]
 8014278:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801427c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 801427e:	68fb      	ldr	r3, [r7, #12]
 8014280:	681b      	ldr	r3, [r3, #0]
 8014282:	681a      	ldr	r2, [r3, #0]
 8014284:	68fb      	ldr	r3, [r7, #12]
 8014286:	681b      	ldr	r3, [r3, #0]
 8014288:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801428c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801428e:	68fb      	ldr	r3, [r7, #12]
 8014290:	681b      	ldr	r3, [r3, #0]
 8014292:	681b      	ldr	r3, [r3, #0]
 8014294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014298:	2b40      	cmp	r3, #64	; 0x40
 801429a:	d007      	beq.n	80142ac <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801429c:	68fb      	ldr	r3, [r7, #12]
 801429e:	681b      	ldr	r3, [r3, #0]
 80142a0:	681a      	ldr	r2, [r3, #0]
 80142a2:	68fb      	ldr	r3, [r7, #12]
 80142a4:	681b      	ldr	r3, [r3, #0]
 80142a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80142aa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80142ac:	68fb      	ldr	r3, [r7, #12]
 80142ae:	68db      	ldr	r3, [r3, #12]
 80142b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80142b4:	d14b      	bne.n	801434e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80142b6:	68fb      	ldr	r3, [r7, #12]
 80142b8:	685b      	ldr	r3, [r3, #4]
 80142ba:	2b00      	cmp	r3, #0
 80142bc:	d002      	beq.n	80142c4 <HAL_SPI_Transmit+0xf6>
 80142be:	8afb      	ldrh	r3, [r7, #22]
 80142c0:	2b01      	cmp	r3, #1
 80142c2:	d13e      	bne.n	8014342 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80142c4:	68fb      	ldr	r3, [r7, #12]
 80142c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80142c8:	881a      	ldrh	r2, [r3, #0]
 80142ca:	68fb      	ldr	r3, [r7, #12]
 80142cc:	681b      	ldr	r3, [r3, #0]
 80142ce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80142d0:	68fb      	ldr	r3, [r7, #12]
 80142d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80142d4:	1c9a      	adds	r2, r3, #2
 80142d6:	68fb      	ldr	r3, [r7, #12]
 80142d8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80142da:	68fb      	ldr	r3, [r7, #12]
 80142dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80142de:	b29b      	uxth	r3, r3
 80142e0:	3b01      	subs	r3, #1
 80142e2:	b29a      	uxth	r2, r3
 80142e4:	68fb      	ldr	r3, [r7, #12]
 80142e6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80142e8:	e02b      	b.n	8014342 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80142ea:	68fb      	ldr	r3, [r7, #12]
 80142ec:	681b      	ldr	r3, [r3, #0]
 80142ee:	689b      	ldr	r3, [r3, #8]
 80142f0:	f003 0302 	and.w	r3, r3, #2
 80142f4:	2b02      	cmp	r3, #2
 80142f6:	d112      	bne.n	801431e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80142f8:	68fb      	ldr	r3, [r7, #12]
 80142fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80142fc:	881a      	ldrh	r2, [r3, #0]
 80142fe:	68fb      	ldr	r3, [r7, #12]
 8014300:	681b      	ldr	r3, [r3, #0]
 8014302:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8014304:	68fb      	ldr	r3, [r7, #12]
 8014306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014308:	1c9a      	adds	r2, r3, #2
 801430a:	68fb      	ldr	r3, [r7, #12]
 801430c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 801430e:	68fb      	ldr	r3, [r7, #12]
 8014310:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014312:	b29b      	uxth	r3, r3
 8014314:	3b01      	subs	r3, #1
 8014316:	b29a      	uxth	r2, r3
 8014318:	68fb      	ldr	r3, [r7, #12]
 801431a:	86da      	strh	r2, [r3, #54]	; 0x36
 801431c:	e011      	b.n	8014342 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801431e:	f7fd fa91 	bl	8011844 <HAL_GetTick>
 8014322:	4602      	mov	r2, r0
 8014324:	69bb      	ldr	r3, [r7, #24]
 8014326:	1ad3      	subs	r3, r2, r3
 8014328:	683a      	ldr	r2, [r7, #0]
 801432a:	429a      	cmp	r2, r3
 801432c:	d803      	bhi.n	8014336 <HAL_SPI_Transmit+0x168>
 801432e:	683b      	ldr	r3, [r7, #0]
 8014330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014334:	d102      	bne.n	801433c <HAL_SPI_Transmit+0x16e>
 8014336:	683b      	ldr	r3, [r7, #0]
 8014338:	2b00      	cmp	r3, #0
 801433a:	d102      	bne.n	8014342 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 801433c:	2303      	movs	r3, #3
 801433e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8014340:	e074      	b.n	801442c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8014342:	68fb      	ldr	r3, [r7, #12]
 8014344:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014346:	b29b      	uxth	r3, r3
 8014348:	2b00      	cmp	r3, #0
 801434a:	d1ce      	bne.n	80142ea <HAL_SPI_Transmit+0x11c>
 801434c:	e04c      	b.n	80143e8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801434e:	68fb      	ldr	r3, [r7, #12]
 8014350:	685b      	ldr	r3, [r3, #4]
 8014352:	2b00      	cmp	r3, #0
 8014354:	d002      	beq.n	801435c <HAL_SPI_Transmit+0x18e>
 8014356:	8afb      	ldrh	r3, [r7, #22]
 8014358:	2b01      	cmp	r3, #1
 801435a:	d140      	bne.n	80143de <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801435c:	68fb      	ldr	r3, [r7, #12]
 801435e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014360:	68fb      	ldr	r3, [r7, #12]
 8014362:	681b      	ldr	r3, [r3, #0]
 8014364:	330c      	adds	r3, #12
 8014366:	7812      	ldrb	r2, [r2, #0]
 8014368:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 801436a:	68fb      	ldr	r3, [r7, #12]
 801436c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801436e:	1c5a      	adds	r2, r3, #1
 8014370:	68fb      	ldr	r3, [r7, #12]
 8014372:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8014374:	68fb      	ldr	r3, [r7, #12]
 8014376:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014378:	b29b      	uxth	r3, r3
 801437a:	3b01      	subs	r3, #1
 801437c:	b29a      	uxth	r2, r3
 801437e:	68fb      	ldr	r3, [r7, #12]
 8014380:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8014382:	e02c      	b.n	80143de <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8014384:	68fb      	ldr	r3, [r7, #12]
 8014386:	681b      	ldr	r3, [r3, #0]
 8014388:	689b      	ldr	r3, [r3, #8]
 801438a:	f003 0302 	and.w	r3, r3, #2
 801438e:	2b02      	cmp	r3, #2
 8014390:	d113      	bne.n	80143ba <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8014392:	68fb      	ldr	r3, [r7, #12]
 8014394:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014396:	68fb      	ldr	r3, [r7, #12]
 8014398:	681b      	ldr	r3, [r3, #0]
 801439a:	330c      	adds	r3, #12
 801439c:	7812      	ldrb	r2, [r2, #0]
 801439e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80143a0:	68fb      	ldr	r3, [r7, #12]
 80143a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80143a4:	1c5a      	adds	r2, r3, #1
 80143a6:	68fb      	ldr	r3, [r7, #12]
 80143a8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80143aa:	68fb      	ldr	r3, [r7, #12]
 80143ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80143ae:	b29b      	uxth	r3, r3
 80143b0:	3b01      	subs	r3, #1
 80143b2:	b29a      	uxth	r2, r3
 80143b4:	68fb      	ldr	r3, [r7, #12]
 80143b6:	86da      	strh	r2, [r3, #54]	; 0x36
 80143b8:	e011      	b.n	80143de <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80143ba:	f7fd fa43 	bl	8011844 <HAL_GetTick>
 80143be:	4602      	mov	r2, r0
 80143c0:	69bb      	ldr	r3, [r7, #24]
 80143c2:	1ad3      	subs	r3, r2, r3
 80143c4:	683a      	ldr	r2, [r7, #0]
 80143c6:	429a      	cmp	r2, r3
 80143c8:	d803      	bhi.n	80143d2 <HAL_SPI_Transmit+0x204>
 80143ca:	683b      	ldr	r3, [r7, #0]
 80143cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80143d0:	d102      	bne.n	80143d8 <HAL_SPI_Transmit+0x20a>
 80143d2:	683b      	ldr	r3, [r7, #0]
 80143d4:	2b00      	cmp	r3, #0
 80143d6:	d102      	bne.n	80143de <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80143d8:	2303      	movs	r3, #3
 80143da:	77fb      	strb	r3, [r7, #31]
          goto error;
 80143dc:	e026      	b.n	801442c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80143de:	68fb      	ldr	r3, [r7, #12]
 80143e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80143e2:	b29b      	uxth	r3, r3
 80143e4:	2b00      	cmp	r3, #0
 80143e6:	d1cd      	bne.n	8014384 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80143e8:	69ba      	ldr	r2, [r7, #24]
 80143ea:	6839      	ldr	r1, [r7, #0]
 80143ec:	68f8      	ldr	r0, [r7, #12]
 80143ee:	f000 fbcb 	bl	8014b88 <SPI_EndRxTxTransaction>
 80143f2:	4603      	mov	r3, r0
 80143f4:	2b00      	cmp	r3, #0
 80143f6:	d002      	beq.n	80143fe <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80143f8:	68fb      	ldr	r3, [r7, #12]
 80143fa:	2220      	movs	r2, #32
 80143fc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80143fe:	68fb      	ldr	r3, [r7, #12]
 8014400:	689b      	ldr	r3, [r3, #8]
 8014402:	2b00      	cmp	r3, #0
 8014404:	d10a      	bne.n	801441c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8014406:	2300      	movs	r3, #0
 8014408:	613b      	str	r3, [r7, #16]
 801440a:	68fb      	ldr	r3, [r7, #12]
 801440c:	681b      	ldr	r3, [r3, #0]
 801440e:	68db      	ldr	r3, [r3, #12]
 8014410:	613b      	str	r3, [r7, #16]
 8014412:	68fb      	ldr	r3, [r7, #12]
 8014414:	681b      	ldr	r3, [r3, #0]
 8014416:	689b      	ldr	r3, [r3, #8]
 8014418:	613b      	str	r3, [r7, #16]
 801441a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801441c:	68fb      	ldr	r3, [r7, #12]
 801441e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014420:	2b00      	cmp	r3, #0
 8014422:	d002      	beq.n	801442a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8014424:	2301      	movs	r3, #1
 8014426:	77fb      	strb	r3, [r7, #31]
 8014428:	e000      	b.n	801442c <HAL_SPI_Transmit+0x25e>
  }

error:
 801442a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801442c:	68fb      	ldr	r3, [r7, #12]
 801442e:	2201      	movs	r2, #1
 8014430:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8014434:	68fb      	ldr	r3, [r7, #12]
 8014436:	2200      	movs	r2, #0
 8014438:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 801443c:	7ffb      	ldrb	r3, [r7, #31]
}
 801443e:	4618      	mov	r0, r3
 8014440:	3720      	adds	r7, #32
 8014442:	46bd      	mov	sp, r7
 8014444:	bd80      	pop	{r7, pc}

08014446 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8014446:	b580      	push	{r7, lr}
 8014448:	b088      	sub	sp, #32
 801444a:	af02      	add	r7, sp, #8
 801444c:	60f8      	str	r0, [r7, #12]
 801444e:	60b9      	str	r1, [r7, #8]
 8014450:	603b      	str	r3, [r7, #0]
 8014452:	4613      	mov	r3, r2
 8014454:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8014456:	2300      	movs	r3, #0
 8014458:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 801445a:	68fb      	ldr	r3, [r7, #12]
 801445c:	685b      	ldr	r3, [r3, #4]
 801445e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8014462:	d112      	bne.n	801448a <HAL_SPI_Receive+0x44>
 8014464:	68fb      	ldr	r3, [r7, #12]
 8014466:	689b      	ldr	r3, [r3, #8]
 8014468:	2b00      	cmp	r3, #0
 801446a:	d10e      	bne.n	801448a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 801446c:	68fb      	ldr	r3, [r7, #12]
 801446e:	2204      	movs	r2, #4
 8014470:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8014474:	88fa      	ldrh	r2, [r7, #6]
 8014476:	683b      	ldr	r3, [r7, #0]
 8014478:	9300      	str	r3, [sp, #0]
 801447a:	4613      	mov	r3, r2
 801447c:	68ba      	ldr	r2, [r7, #8]
 801447e:	68b9      	ldr	r1, [r7, #8]
 8014480:	68f8      	ldr	r0, [r7, #12]
 8014482:	f000 f8f1 	bl	8014668 <HAL_SPI_TransmitReceive>
 8014486:	4603      	mov	r3, r0
 8014488:	e0ea      	b.n	8014660 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 801448a:	68fb      	ldr	r3, [r7, #12]
 801448c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8014490:	2b01      	cmp	r3, #1
 8014492:	d101      	bne.n	8014498 <HAL_SPI_Receive+0x52>
 8014494:	2302      	movs	r3, #2
 8014496:	e0e3      	b.n	8014660 <HAL_SPI_Receive+0x21a>
 8014498:	68fb      	ldr	r3, [r7, #12]
 801449a:	2201      	movs	r2, #1
 801449c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80144a0:	f7fd f9d0 	bl	8011844 <HAL_GetTick>
 80144a4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80144a6:	68fb      	ldr	r3, [r7, #12]
 80144a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80144ac:	b2db      	uxtb	r3, r3
 80144ae:	2b01      	cmp	r3, #1
 80144b0:	d002      	beq.n	80144b8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80144b2:	2302      	movs	r3, #2
 80144b4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80144b6:	e0ca      	b.n	801464e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80144b8:	68bb      	ldr	r3, [r7, #8]
 80144ba:	2b00      	cmp	r3, #0
 80144bc:	d002      	beq.n	80144c4 <HAL_SPI_Receive+0x7e>
 80144be:	88fb      	ldrh	r3, [r7, #6]
 80144c0:	2b00      	cmp	r3, #0
 80144c2:	d102      	bne.n	80144ca <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80144c4:	2301      	movs	r3, #1
 80144c6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80144c8:	e0c1      	b.n	801464e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80144ca:	68fb      	ldr	r3, [r7, #12]
 80144cc:	2204      	movs	r2, #4
 80144ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80144d2:	68fb      	ldr	r3, [r7, #12]
 80144d4:	2200      	movs	r2, #0
 80144d6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80144d8:	68fb      	ldr	r3, [r7, #12]
 80144da:	68ba      	ldr	r2, [r7, #8]
 80144dc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80144de:	68fb      	ldr	r3, [r7, #12]
 80144e0:	88fa      	ldrh	r2, [r7, #6]
 80144e2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80144e4:	68fb      	ldr	r3, [r7, #12]
 80144e6:	88fa      	ldrh	r2, [r7, #6]
 80144e8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80144ea:	68fb      	ldr	r3, [r7, #12]
 80144ec:	2200      	movs	r2, #0
 80144ee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80144f0:	68fb      	ldr	r3, [r7, #12]
 80144f2:	2200      	movs	r2, #0
 80144f4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80144f6:	68fb      	ldr	r3, [r7, #12]
 80144f8:	2200      	movs	r2, #0
 80144fa:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80144fc:	68fb      	ldr	r3, [r7, #12]
 80144fe:	2200      	movs	r2, #0
 8014500:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8014502:	68fb      	ldr	r3, [r7, #12]
 8014504:	2200      	movs	r2, #0
 8014506:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8014508:	68fb      	ldr	r3, [r7, #12]
 801450a:	689b      	ldr	r3, [r3, #8]
 801450c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014510:	d10f      	bne.n	8014532 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8014512:	68fb      	ldr	r3, [r7, #12]
 8014514:	681b      	ldr	r3, [r3, #0]
 8014516:	681a      	ldr	r2, [r3, #0]
 8014518:	68fb      	ldr	r3, [r7, #12]
 801451a:	681b      	ldr	r3, [r3, #0]
 801451c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8014520:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8014522:	68fb      	ldr	r3, [r7, #12]
 8014524:	681b      	ldr	r3, [r3, #0]
 8014526:	681a      	ldr	r2, [r3, #0]
 8014528:	68fb      	ldr	r3, [r7, #12]
 801452a:	681b      	ldr	r3, [r3, #0]
 801452c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8014530:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8014532:	68fb      	ldr	r3, [r7, #12]
 8014534:	681b      	ldr	r3, [r3, #0]
 8014536:	681b      	ldr	r3, [r3, #0]
 8014538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801453c:	2b40      	cmp	r3, #64	; 0x40
 801453e:	d007      	beq.n	8014550 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8014540:	68fb      	ldr	r3, [r7, #12]
 8014542:	681b      	ldr	r3, [r3, #0]
 8014544:	681a      	ldr	r2, [r3, #0]
 8014546:	68fb      	ldr	r3, [r7, #12]
 8014548:	681b      	ldr	r3, [r3, #0]
 801454a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801454e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8014550:	68fb      	ldr	r3, [r7, #12]
 8014552:	68db      	ldr	r3, [r3, #12]
 8014554:	2b00      	cmp	r3, #0
 8014556:	d162      	bne.n	801461e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8014558:	e02e      	b.n	80145b8 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801455a:	68fb      	ldr	r3, [r7, #12]
 801455c:	681b      	ldr	r3, [r3, #0]
 801455e:	689b      	ldr	r3, [r3, #8]
 8014560:	f003 0301 	and.w	r3, r3, #1
 8014564:	2b01      	cmp	r3, #1
 8014566:	d115      	bne.n	8014594 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8014568:	68fb      	ldr	r3, [r7, #12]
 801456a:	681b      	ldr	r3, [r3, #0]
 801456c:	f103 020c 	add.w	r2, r3, #12
 8014570:	68fb      	ldr	r3, [r7, #12]
 8014572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014574:	7812      	ldrb	r2, [r2, #0]
 8014576:	b2d2      	uxtb	r2, r2
 8014578:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 801457a:	68fb      	ldr	r3, [r7, #12]
 801457c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801457e:	1c5a      	adds	r2, r3, #1
 8014580:	68fb      	ldr	r3, [r7, #12]
 8014582:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8014584:	68fb      	ldr	r3, [r7, #12]
 8014586:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014588:	b29b      	uxth	r3, r3
 801458a:	3b01      	subs	r3, #1
 801458c:	b29a      	uxth	r2, r3
 801458e:	68fb      	ldr	r3, [r7, #12]
 8014590:	87da      	strh	r2, [r3, #62]	; 0x3e
 8014592:	e011      	b.n	80145b8 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8014594:	f7fd f956 	bl	8011844 <HAL_GetTick>
 8014598:	4602      	mov	r2, r0
 801459a:	693b      	ldr	r3, [r7, #16]
 801459c:	1ad3      	subs	r3, r2, r3
 801459e:	683a      	ldr	r2, [r7, #0]
 80145a0:	429a      	cmp	r2, r3
 80145a2:	d803      	bhi.n	80145ac <HAL_SPI_Receive+0x166>
 80145a4:	683b      	ldr	r3, [r7, #0]
 80145a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80145aa:	d102      	bne.n	80145b2 <HAL_SPI_Receive+0x16c>
 80145ac:	683b      	ldr	r3, [r7, #0]
 80145ae:	2b00      	cmp	r3, #0
 80145b0:	d102      	bne.n	80145b8 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80145b2:	2303      	movs	r3, #3
 80145b4:	75fb      	strb	r3, [r7, #23]
          goto error;
 80145b6:	e04a      	b.n	801464e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80145b8:	68fb      	ldr	r3, [r7, #12]
 80145ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80145bc:	b29b      	uxth	r3, r3
 80145be:	2b00      	cmp	r3, #0
 80145c0:	d1cb      	bne.n	801455a <HAL_SPI_Receive+0x114>
 80145c2:	e031      	b.n	8014628 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80145c4:	68fb      	ldr	r3, [r7, #12]
 80145c6:	681b      	ldr	r3, [r3, #0]
 80145c8:	689b      	ldr	r3, [r3, #8]
 80145ca:	f003 0301 	and.w	r3, r3, #1
 80145ce:	2b01      	cmp	r3, #1
 80145d0:	d113      	bne.n	80145fa <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80145d2:	68fb      	ldr	r3, [r7, #12]
 80145d4:	681b      	ldr	r3, [r3, #0]
 80145d6:	68da      	ldr	r2, [r3, #12]
 80145d8:	68fb      	ldr	r3, [r7, #12]
 80145da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80145dc:	b292      	uxth	r2, r2
 80145de:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80145e0:	68fb      	ldr	r3, [r7, #12]
 80145e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80145e4:	1c9a      	adds	r2, r3, #2
 80145e6:	68fb      	ldr	r3, [r7, #12]
 80145e8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80145ea:	68fb      	ldr	r3, [r7, #12]
 80145ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80145ee:	b29b      	uxth	r3, r3
 80145f0:	3b01      	subs	r3, #1
 80145f2:	b29a      	uxth	r2, r3
 80145f4:	68fb      	ldr	r3, [r7, #12]
 80145f6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80145f8:	e011      	b.n	801461e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80145fa:	f7fd f923 	bl	8011844 <HAL_GetTick>
 80145fe:	4602      	mov	r2, r0
 8014600:	693b      	ldr	r3, [r7, #16]
 8014602:	1ad3      	subs	r3, r2, r3
 8014604:	683a      	ldr	r2, [r7, #0]
 8014606:	429a      	cmp	r2, r3
 8014608:	d803      	bhi.n	8014612 <HAL_SPI_Receive+0x1cc>
 801460a:	683b      	ldr	r3, [r7, #0]
 801460c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014610:	d102      	bne.n	8014618 <HAL_SPI_Receive+0x1d2>
 8014612:	683b      	ldr	r3, [r7, #0]
 8014614:	2b00      	cmp	r3, #0
 8014616:	d102      	bne.n	801461e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8014618:	2303      	movs	r3, #3
 801461a:	75fb      	strb	r3, [r7, #23]
          goto error;
 801461c:	e017      	b.n	801464e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 801461e:	68fb      	ldr	r3, [r7, #12]
 8014620:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014622:	b29b      	uxth	r3, r3
 8014624:	2b00      	cmp	r3, #0
 8014626:	d1cd      	bne.n	80145c4 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8014628:	693a      	ldr	r2, [r7, #16]
 801462a:	6839      	ldr	r1, [r7, #0]
 801462c:	68f8      	ldr	r0, [r7, #12]
 801462e:	f000 fa45 	bl	8014abc <SPI_EndRxTransaction>
 8014632:	4603      	mov	r3, r0
 8014634:	2b00      	cmp	r3, #0
 8014636:	d002      	beq.n	801463e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8014638:	68fb      	ldr	r3, [r7, #12]
 801463a:	2220      	movs	r2, #32
 801463c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801463e:	68fb      	ldr	r3, [r7, #12]
 8014640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014642:	2b00      	cmp	r3, #0
 8014644:	d002      	beq.n	801464c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8014646:	2301      	movs	r3, #1
 8014648:	75fb      	strb	r3, [r7, #23]
 801464a:	e000      	b.n	801464e <HAL_SPI_Receive+0x208>
  }

error :
 801464c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801464e:	68fb      	ldr	r3, [r7, #12]
 8014650:	2201      	movs	r2, #1
 8014652:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8014656:	68fb      	ldr	r3, [r7, #12]
 8014658:	2200      	movs	r2, #0
 801465a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 801465e:	7dfb      	ldrb	r3, [r7, #23]
}
 8014660:	4618      	mov	r0, r3
 8014662:	3718      	adds	r7, #24
 8014664:	46bd      	mov	sp, r7
 8014666:	bd80      	pop	{r7, pc}

08014668 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8014668:	b580      	push	{r7, lr}
 801466a:	b08c      	sub	sp, #48	; 0x30
 801466c:	af00      	add	r7, sp, #0
 801466e:	60f8      	str	r0, [r7, #12]
 8014670:	60b9      	str	r1, [r7, #8]
 8014672:	607a      	str	r2, [r7, #4]
 8014674:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8014676:	2301      	movs	r3, #1
 8014678:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 801467a:	2300      	movs	r3, #0
 801467c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8014680:	68fb      	ldr	r3, [r7, #12]
 8014682:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8014686:	2b01      	cmp	r3, #1
 8014688:	d101      	bne.n	801468e <HAL_SPI_TransmitReceive+0x26>
 801468a:	2302      	movs	r3, #2
 801468c:	e18a      	b.n	80149a4 <HAL_SPI_TransmitReceive+0x33c>
 801468e:	68fb      	ldr	r3, [r7, #12]
 8014690:	2201      	movs	r2, #1
 8014692:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8014696:	f7fd f8d5 	bl	8011844 <HAL_GetTick>
 801469a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 801469c:	68fb      	ldr	r3, [r7, #12]
 801469e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80146a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80146a6:	68fb      	ldr	r3, [r7, #12]
 80146a8:	685b      	ldr	r3, [r3, #4]
 80146aa:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80146ac:	887b      	ldrh	r3, [r7, #2]
 80146ae:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80146b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80146b4:	2b01      	cmp	r3, #1
 80146b6:	d00f      	beq.n	80146d8 <HAL_SPI_TransmitReceive+0x70>
 80146b8:	69fb      	ldr	r3, [r7, #28]
 80146ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80146be:	d107      	bne.n	80146d0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80146c0:	68fb      	ldr	r3, [r7, #12]
 80146c2:	689b      	ldr	r3, [r3, #8]
 80146c4:	2b00      	cmp	r3, #0
 80146c6:	d103      	bne.n	80146d0 <HAL_SPI_TransmitReceive+0x68>
 80146c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80146cc:	2b04      	cmp	r3, #4
 80146ce:	d003      	beq.n	80146d8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80146d0:	2302      	movs	r3, #2
 80146d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80146d6:	e15b      	b.n	8014990 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80146d8:	68bb      	ldr	r3, [r7, #8]
 80146da:	2b00      	cmp	r3, #0
 80146dc:	d005      	beq.n	80146ea <HAL_SPI_TransmitReceive+0x82>
 80146de:	687b      	ldr	r3, [r7, #4]
 80146e0:	2b00      	cmp	r3, #0
 80146e2:	d002      	beq.n	80146ea <HAL_SPI_TransmitReceive+0x82>
 80146e4:	887b      	ldrh	r3, [r7, #2]
 80146e6:	2b00      	cmp	r3, #0
 80146e8:	d103      	bne.n	80146f2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80146ea:	2301      	movs	r3, #1
 80146ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80146f0:	e14e      	b.n	8014990 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80146f2:	68fb      	ldr	r3, [r7, #12]
 80146f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80146f8:	b2db      	uxtb	r3, r3
 80146fa:	2b04      	cmp	r3, #4
 80146fc:	d003      	beq.n	8014706 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80146fe:	68fb      	ldr	r3, [r7, #12]
 8014700:	2205      	movs	r2, #5
 8014702:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8014706:	68fb      	ldr	r3, [r7, #12]
 8014708:	2200      	movs	r2, #0
 801470a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 801470c:	68fb      	ldr	r3, [r7, #12]
 801470e:	687a      	ldr	r2, [r7, #4]
 8014710:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8014712:	68fb      	ldr	r3, [r7, #12]
 8014714:	887a      	ldrh	r2, [r7, #2]
 8014716:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8014718:	68fb      	ldr	r3, [r7, #12]
 801471a:	887a      	ldrh	r2, [r7, #2]
 801471c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 801471e:	68fb      	ldr	r3, [r7, #12]
 8014720:	68ba      	ldr	r2, [r7, #8]
 8014722:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8014724:	68fb      	ldr	r3, [r7, #12]
 8014726:	887a      	ldrh	r2, [r7, #2]
 8014728:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 801472a:	68fb      	ldr	r3, [r7, #12]
 801472c:	887a      	ldrh	r2, [r7, #2]
 801472e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8014730:	68fb      	ldr	r3, [r7, #12]
 8014732:	2200      	movs	r2, #0
 8014734:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8014736:	68fb      	ldr	r3, [r7, #12]
 8014738:	2200      	movs	r2, #0
 801473a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801473c:	68fb      	ldr	r3, [r7, #12]
 801473e:	681b      	ldr	r3, [r3, #0]
 8014740:	681b      	ldr	r3, [r3, #0]
 8014742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014746:	2b40      	cmp	r3, #64	; 0x40
 8014748:	d007      	beq.n	801475a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801474a:	68fb      	ldr	r3, [r7, #12]
 801474c:	681b      	ldr	r3, [r3, #0]
 801474e:	681a      	ldr	r2, [r3, #0]
 8014750:	68fb      	ldr	r3, [r7, #12]
 8014752:	681b      	ldr	r3, [r3, #0]
 8014754:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014758:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 801475a:	68fb      	ldr	r3, [r7, #12]
 801475c:	68db      	ldr	r3, [r3, #12]
 801475e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8014762:	d178      	bne.n	8014856 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8014764:	68fb      	ldr	r3, [r7, #12]
 8014766:	685b      	ldr	r3, [r3, #4]
 8014768:	2b00      	cmp	r3, #0
 801476a:	d002      	beq.n	8014772 <HAL_SPI_TransmitReceive+0x10a>
 801476c:	8b7b      	ldrh	r3, [r7, #26]
 801476e:	2b01      	cmp	r3, #1
 8014770:	d166      	bne.n	8014840 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8014772:	68fb      	ldr	r3, [r7, #12]
 8014774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014776:	881a      	ldrh	r2, [r3, #0]
 8014778:	68fb      	ldr	r3, [r7, #12]
 801477a:	681b      	ldr	r3, [r3, #0]
 801477c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801477e:	68fb      	ldr	r3, [r7, #12]
 8014780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014782:	1c9a      	adds	r2, r3, #2
 8014784:	68fb      	ldr	r3, [r7, #12]
 8014786:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8014788:	68fb      	ldr	r3, [r7, #12]
 801478a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801478c:	b29b      	uxth	r3, r3
 801478e:	3b01      	subs	r3, #1
 8014790:	b29a      	uxth	r2, r3
 8014792:	68fb      	ldr	r3, [r7, #12]
 8014794:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8014796:	e053      	b.n	8014840 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8014798:	68fb      	ldr	r3, [r7, #12]
 801479a:	681b      	ldr	r3, [r3, #0]
 801479c:	689b      	ldr	r3, [r3, #8]
 801479e:	f003 0302 	and.w	r3, r3, #2
 80147a2:	2b02      	cmp	r3, #2
 80147a4:	d11b      	bne.n	80147de <HAL_SPI_TransmitReceive+0x176>
 80147a6:	68fb      	ldr	r3, [r7, #12]
 80147a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80147aa:	b29b      	uxth	r3, r3
 80147ac:	2b00      	cmp	r3, #0
 80147ae:	d016      	beq.n	80147de <HAL_SPI_TransmitReceive+0x176>
 80147b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80147b2:	2b01      	cmp	r3, #1
 80147b4:	d113      	bne.n	80147de <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80147b6:	68fb      	ldr	r3, [r7, #12]
 80147b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80147ba:	881a      	ldrh	r2, [r3, #0]
 80147bc:	68fb      	ldr	r3, [r7, #12]
 80147be:	681b      	ldr	r3, [r3, #0]
 80147c0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80147c2:	68fb      	ldr	r3, [r7, #12]
 80147c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80147c6:	1c9a      	adds	r2, r3, #2
 80147c8:	68fb      	ldr	r3, [r7, #12]
 80147ca:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80147cc:	68fb      	ldr	r3, [r7, #12]
 80147ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80147d0:	b29b      	uxth	r3, r3
 80147d2:	3b01      	subs	r3, #1
 80147d4:	b29a      	uxth	r2, r3
 80147d6:	68fb      	ldr	r3, [r7, #12]
 80147d8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80147da:	2300      	movs	r3, #0
 80147dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80147de:	68fb      	ldr	r3, [r7, #12]
 80147e0:	681b      	ldr	r3, [r3, #0]
 80147e2:	689b      	ldr	r3, [r3, #8]
 80147e4:	f003 0301 	and.w	r3, r3, #1
 80147e8:	2b01      	cmp	r3, #1
 80147ea:	d119      	bne.n	8014820 <HAL_SPI_TransmitReceive+0x1b8>
 80147ec:	68fb      	ldr	r3, [r7, #12]
 80147ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80147f0:	b29b      	uxth	r3, r3
 80147f2:	2b00      	cmp	r3, #0
 80147f4:	d014      	beq.n	8014820 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80147f6:	68fb      	ldr	r3, [r7, #12]
 80147f8:	681b      	ldr	r3, [r3, #0]
 80147fa:	68da      	ldr	r2, [r3, #12]
 80147fc:	68fb      	ldr	r3, [r7, #12]
 80147fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014800:	b292      	uxth	r2, r2
 8014802:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8014804:	68fb      	ldr	r3, [r7, #12]
 8014806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014808:	1c9a      	adds	r2, r3, #2
 801480a:	68fb      	ldr	r3, [r7, #12]
 801480c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 801480e:	68fb      	ldr	r3, [r7, #12]
 8014810:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014812:	b29b      	uxth	r3, r3
 8014814:	3b01      	subs	r3, #1
 8014816:	b29a      	uxth	r2, r3
 8014818:	68fb      	ldr	r3, [r7, #12]
 801481a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801481c:	2301      	movs	r3, #1
 801481e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8014820:	f7fd f810 	bl	8011844 <HAL_GetTick>
 8014824:	4602      	mov	r2, r0
 8014826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014828:	1ad3      	subs	r3, r2, r3
 801482a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801482c:	429a      	cmp	r2, r3
 801482e:	d807      	bhi.n	8014840 <HAL_SPI_TransmitReceive+0x1d8>
 8014830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014836:	d003      	beq.n	8014840 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8014838:	2303      	movs	r3, #3
 801483a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 801483e:	e0a7      	b.n	8014990 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8014840:	68fb      	ldr	r3, [r7, #12]
 8014842:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014844:	b29b      	uxth	r3, r3
 8014846:	2b00      	cmp	r3, #0
 8014848:	d1a6      	bne.n	8014798 <HAL_SPI_TransmitReceive+0x130>
 801484a:	68fb      	ldr	r3, [r7, #12]
 801484c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801484e:	b29b      	uxth	r3, r3
 8014850:	2b00      	cmp	r3, #0
 8014852:	d1a1      	bne.n	8014798 <HAL_SPI_TransmitReceive+0x130>
 8014854:	e07c      	b.n	8014950 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8014856:	68fb      	ldr	r3, [r7, #12]
 8014858:	685b      	ldr	r3, [r3, #4]
 801485a:	2b00      	cmp	r3, #0
 801485c:	d002      	beq.n	8014864 <HAL_SPI_TransmitReceive+0x1fc>
 801485e:	8b7b      	ldrh	r3, [r7, #26]
 8014860:	2b01      	cmp	r3, #1
 8014862:	d16b      	bne.n	801493c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8014864:	68fb      	ldr	r3, [r7, #12]
 8014866:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014868:	68fb      	ldr	r3, [r7, #12]
 801486a:	681b      	ldr	r3, [r3, #0]
 801486c:	330c      	adds	r3, #12
 801486e:	7812      	ldrb	r2, [r2, #0]
 8014870:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8014872:	68fb      	ldr	r3, [r7, #12]
 8014874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014876:	1c5a      	adds	r2, r3, #1
 8014878:	68fb      	ldr	r3, [r7, #12]
 801487a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 801487c:	68fb      	ldr	r3, [r7, #12]
 801487e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014880:	b29b      	uxth	r3, r3
 8014882:	3b01      	subs	r3, #1
 8014884:	b29a      	uxth	r2, r3
 8014886:	68fb      	ldr	r3, [r7, #12]
 8014888:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801488a:	e057      	b.n	801493c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801488c:	68fb      	ldr	r3, [r7, #12]
 801488e:	681b      	ldr	r3, [r3, #0]
 8014890:	689b      	ldr	r3, [r3, #8]
 8014892:	f003 0302 	and.w	r3, r3, #2
 8014896:	2b02      	cmp	r3, #2
 8014898:	d11c      	bne.n	80148d4 <HAL_SPI_TransmitReceive+0x26c>
 801489a:	68fb      	ldr	r3, [r7, #12]
 801489c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801489e:	b29b      	uxth	r3, r3
 80148a0:	2b00      	cmp	r3, #0
 80148a2:	d017      	beq.n	80148d4 <HAL_SPI_TransmitReceive+0x26c>
 80148a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80148a6:	2b01      	cmp	r3, #1
 80148a8:	d114      	bne.n	80148d4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80148aa:	68fb      	ldr	r3, [r7, #12]
 80148ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80148ae:	68fb      	ldr	r3, [r7, #12]
 80148b0:	681b      	ldr	r3, [r3, #0]
 80148b2:	330c      	adds	r3, #12
 80148b4:	7812      	ldrb	r2, [r2, #0]
 80148b6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80148b8:	68fb      	ldr	r3, [r7, #12]
 80148ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80148bc:	1c5a      	adds	r2, r3, #1
 80148be:	68fb      	ldr	r3, [r7, #12]
 80148c0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80148c2:	68fb      	ldr	r3, [r7, #12]
 80148c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80148c6:	b29b      	uxth	r3, r3
 80148c8:	3b01      	subs	r3, #1
 80148ca:	b29a      	uxth	r2, r3
 80148cc:	68fb      	ldr	r3, [r7, #12]
 80148ce:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80148d0:	2300      	movs	r3, #0
 80148d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80148d4:	68fb      	ldr	r3, [r7, #12]
 80148d6:	681b      	ldr	r3, [r3, #0]
 80148d8:	689b      	ldr	r3, [r3, #8]
 80148da:	f003 0301 	and.w	r3, r3, #1
 80148de:	2b01      	cmp	r3, #1
 80148e0:	d119      	bne.n	8014916 <HAL_SPI_TransmitReceive+0x2ae>
 80148e2:	68fb      	ldr	r3, [r7, #12]
 80148e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80148e6:	b29b      	uxth	r3, r3
 80148e8:	2b00      	cmp	r3, #0
 80148ea:	d014      	beq.n	8014916 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80148ec:	68fb      	ldr	r3, [r7, #12]
 80148ee:	681b      	ldr	r3, [r3, #0]
 80148f0:	68da      	ldr	r2, [r3, #12]
 80148f2:	68fb      	ldr	r3, [r7, #12]
 80148f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80148f6:	b2d2      	uxtb	r2, r2
 80148f8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80148fa:	68fb      	ldr	r3, [r7, #12]
 80148fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80148fe:	1c5a      	adds	r2, r3, #1
 8014900:	68fb      	ldr	r3, [r7, #12]
 8014902:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8014904:	68fb      	ldr	r3, [r7, #12]
 8014906:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014908:	b29b      	uxth	r3, r3
 801490a:	3b01      	subs	r3, #1
 801490c:	b29a      	uxth	r2, r3
 801490e:	68fb      	ldr	r3, [r7, #12]
 8014910:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8014912:	2301      	movs	r3, #1
 8014914:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8014916:	f7fc ff95 	bl	8011844 <HAL_GetTick>
 801491a:	4602      	mov	r2, r0
 801491c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801491e:	1ad3      	subs	r3, r2, r3
 8014920:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014922:	429a      	cmp	r2, r3
 8014924:	d803      	bhi.n	801492e <HAL_SPI_TransmitReceive+0x2c6>
 8014926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014928:	f1b3 3fff 	cmp.w	r3, #4294967295
 801492c:	d102      	bne.n	8014934 <HAL_SPI_TransmitReceive+0x2cc>
 801492e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014930:	2b00      	cmp	r3, #0
 8014932:	d103      	bne.n	801493c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8014934:	2303      	movs	r3, #3
 8014936:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 801493a:	e029      	b.n	8014990 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801493c:	68fb      	ldr	r3, [r7, #12]
 801493e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014940:	b29b      	uxth	r3, r3
 8014942:	2b00      	cmp	r3, #0
 8014944:	d1a2      	bne.n	801488c <HAL_SPI_TransmitReceive+0x224>
 8014946:	68fb      	ldr	r3, [r7, #12]
 8014948:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801494a:	b29b      	uxth	r3, r3
 801494c:	2b00      	cmp	r3, #0
 801494e:	d19d      	bne.n	801488c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8014950:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014952:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014954:	68f8      	ldr	r0, [r7, #12]
 8014956:	f000 f917 	bl	8014b88 <SPI_EndRxTxTransaction>
 801495a:	4603      	mov	r3, r0
 801495c:	2b00      	cmp	r3, #0
 801495e:	d006      	beq.n	801496e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8014960:	2301      	movs	r3, #1
 8014962:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8014966:	68fb      	ldr	r3, [r7, #12]
 8014968:	2220      	movs	r2, #32
 801496a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 801496c:	e010      	b.n	8014990 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801496e:	68fb      	ldr	r3, [r7, #12]
 8014970:	689b      	ldr	r3, [r3, #8]
 8014972:	2b00      	cmp	r3, #0
 8014974:	d10b      	bne.n	801498e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8014976:	2300      	movs	r3, #0
 8014978:	617b      	str	r3, [r7, #20]
 801497a:	68fb      	ldr	r3, [r7, #12]
 801497c:	681b      	ldr	r3, [r3, #0]
 801497e:	68db      	ldr	r3, [r3, #12]
 8014980:	617b      	str	r3, [r7, #20]
 8014982:	68fb      	ldr	r3, [r7, #12]
 8014984:	681b      	ldr	r3, [r3, #0]
 8014986:	689b      	ldr	r3, [r3, #8]
 8014988:	617b      	str	r3, [r7, #20]
 801498a:	697b      	ldr	r3, [r7, #20]
 801498c:	e000      	b.n	8014990 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 801498e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8014990:	68fb      	ldr	r3, [r7, #12]
 8014992:	2201      	movs	r2, #1
 8014994:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8014998:	68fb      	ldr	r3, [r7, #12]
 801499a:	2200      	movs	r2, #0
 801499c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80149a0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80149a4:	4618      	mov	r0, r3
 80149a6:	3730      	adds	r7, #48	; 0x30
 80149a8:	46bd      	mov	sp, r7
 80149aa:	bd80      	pop	{r7, pc}

080149ac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80149ac:	b580      	push	{r7, lr}
 80149ae:	b088      	sub	sp, #32
 80149b0:	af00      	add	r7, sp, #0
 80149b2:	60f8      	str	r0, [r7, #12]
 80149b4:	60b9      	str	r1, [r7, #8]
 80149b6:	603b      	str	r3, [r7, #0]
 80149b8:	4613      	mov	r3, r2
 80149ba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80149bc:	f7fc ff42 	bl	8011844 <HAL_GetTick>
 80149c0:	4602      	mov	r2, r0
 80149c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149c4:	1a9b      	subs	r3, r3, r2
 80149c6:	683a      	ldr	r2, [r7, #0]
 80149c8:	4413      	add	r3, r2
 80149ca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80149cc:	f7fc ff3a 	bl	8011844 <HAL_GetTick>
 80149d0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80149d2:	4b39      	ldr	r3, [pc, #228]	; (8014ab8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80149d4:	681b      	ldr	r3, [r3, #0]
 80149d6:	015b      	lsls	r3, r3, #5
 80149d8:	0d1b      	lsrs	r3, r3, #20
 80149da:	69fa      	ldr	r2, [r7, #28]
 80149dc:	fb02 f303 	mul.w	r3, r2, r3
 80149e0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80149e2:	e054      	b.n	8014a8e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80149e4:	683b      	ldr	r3, [r7, #0]
 80149e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80149ea:	d050      	beq.n	8014a8e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80149ec:	f7fc ff2a 	bl	8011844 <HAL_GetTick>
 80149f0:	4602      	mov	r2, r0
 80149f2:	69bb      	ldr	r3, [r7, #24]
 80149f4:	1ad3      	subs	r3, r2, r3
 80149f6:	69fa      	ldr	r2, [r7, #28]
 80149f8:	429a      	cmp	r2, r3
 80149fa:	d902      	bls.n	8014a02 <SPI_WaitFlagStateUntilTimeout+0x56>
 80149fc:	69fb      	ldr	r3, [r7, #28]
 80149fe:	2b00      	cmp	r3, #0
 8014a00:	d13d      	bne.n	8014a7e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8014a02:	68fb      	ldr	r3, [r7, #12]
 8014a04:	681b      	ldr	r3, [r3, #0]
 8014a06:	685a      	ldr	r2, [r3, #4]
 8014a08:	68fb      	ldr	r3, [r7, #12]
 8014a0a:	681b      	ldr	r3, [r3, #0]
 8014a0c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8014a10:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8014a12:	68fb      	ldr	r3, [r7, #12]
 8014a14:	685b      	ldr	r3, [r3, #4]
 8014a16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8014a1a:	d111      	bne.n	8014a40 <SPI_WaitFlagStateUntilTimeout+0x94>
 8014a1c:	68fb      	ldr	r3, [r7, #12]
 8014a1e:	689b      	ldr	r3, [r3, #8]
 8014a20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014a24:	d004      	beq.n	8014a30 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8014a26:	68fb      	ldr	r3, [r7, #12]
 8014a28:	689b      	ldr	r3, [r3, #8]
 8014a2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014a2e:	d107      	bne.n	8014a40 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8014a30:	68fb      	ldr	r3, [r7, #12]
 8014a32:	681b      	ldr	r3, [r3, #0]
 8014a34:	681a      	ldr	r2, [r3, #0]
 8014a36:	68fb      	ldr	r3, [r7, #12]
 8014a38:	681b      	ldr	r3, [r3, #0]
 8014a3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8014a3e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8014a40:	68fb      	ldr	r3, [r7, #12]
 8014a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014a44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8014a48:	d10f      	bne.n	8014a6a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8014a4a:	68fb      	ldr	r3, [r7, #12]
 8014a4c:	681b      	ldr	r3, [r3, #0]
 8014a4e:	681a      	ldr	r2, [r3, #0]
 8014a50:	68fb      	ldr	r3, [r7, #12]
 8014a52:	681b      	ldr	r3, [r3, #0]
 8014a54:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8014a58:	601a      	str	r2, [r3, #0]
 8014a5a:	68fb      	ldr	r3, [r7, #12]
 8014a5c:	681b      	ldr	r3, [r3, #0]
 8014a5e:	681a      	ldr	r2, [r3, #0]
 8014a60:	68fb      	ldr	r3, [r7, #12]
 8014a62:	681b      	ldr	r3, [r3, #0]
 8014a64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8014a68:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8014a6a:	68fb      	ldr	r3, [r7, #12]
 8014a6c:	2201      	movs	r2, #1
 8014a6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8014a72:	68fb      	ldr	r3, [r7, #12]
 8014a74:	2200      	movs	r2, #0
 8014a76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8014a7a:	2303      	movs	r3, #3
 8014a7c:	e017      	b.n	8014aae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8014a7e:	697b      	ldr	r3, [r7, #20]
 8014a80:	2b00      	cmp	r3, #0
 8014a82:	d101      	bne.n	8014a88 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8014a84:	2300      	movs	r3, #0
 8014a86:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8014a88:	697b      	ldr	r3, [r7, #20]
 8014a8a:	3b01      	subs	r3, #1
 8014a8c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8014a8e:	68fb      	ldr	r3, [r7, #12]
 8014a90:	681b      	ldr	r3, [r3, #0]
 8014a92:	689a      	ldr	r2, [r3, #8]
 8014a94:	68bb      	ldr	r3, [r7, #8]
 8014a96:	4013      	ands	r3, r2
 8014a98:	68ba      	ldr	r2, [r7, #8]
 8014a9a:	429a      	cmp	r2, r3
 8014a9c:	bf0c      	ite	eq
 8014a9e:	2301      	moveq	r3, #1
 8014aa0:	2300      	movne	r3, #0
 8014aa2:	b2db      	uxtb	r3, r3
 8014aa4:	461a      	mov	r2, r3
 8014aa6:	79fb      	ldrb	r3, [r7, #7]
 8014aa8:	429a      	cmp	r2, r3
 8014aaa:	d19b      	bne.n	80149e4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8014aac:	2300      	movs	r3, #0
}
 8014aae:	4618      	mov	r0, r3
 8014ab0:	3720      	adds	r7, #32
 8014ab2:	46bd      	mov	sp, r7
 8014ab4:	bd80      	pop	{r7, pc}
 8014ab6:	bf00      	nop
 8014ab8:	20000084 	.word	0x20000084

08014abc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8014abc:	b580      	push	{r7, lr}
 8014abe:	b086      	sub	sp, #24
 8014ac0:	af02      	add	r7, sp, #8
 8014ac2:	60f8      	str	r0, [r7, #12]
 8014ac4:	60b9      	str	r1, [r7, #8]
 8014ac6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8014ac8:	68fb      	ldr	r3, [r7, #12]
 8014aca:	685b      	ldr	r3, [r3, #4]
 8014acc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8014ad0:	d111      	bne.n	8014af6 <SPI_EndRxTransaction+0x3a>
 8014ad2:	68fb      	ldr	r3, [r7, #12]
 8014ad4:	689b      	ldr	r3, [r3, #8]
 8014ad6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014ada:	d004      	beq.n	8014ae6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8014adc:	68fb      	ldr	r3, [r7, #12]
 8014ade:	689b      	ldr	r3, [r3, #8]
 8014ae0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014ae4:	d107      	bne.n	8014af6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8014ae6:	68fb      	ldr	r3, [r7, #12]
 8014ae8:	681b      	ldr	r3, [r3, #0]
 8014aea:	681a      	ldr	r2, [r3, #0]
 8014aec:	68fb      	ldr	r3, [r7, #12]
 8014aee:	681b      	ldr	r3, [r3, #0]
 8014af0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8014af4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8014af6:	68fb      	ldr	r3, [r7, #12]
 8014af8:	685b      	ldr	r3, [r3, #4]
 8014afa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8014afe:	d12a      	bne.n	8014b56 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8014b00:	68fb      	ldr	r3, [r7, #12]
 8014b02:	689b      	ldr	r3, [r3, #8]
 8014b04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014b08:	d012      	beq.n	8014b30 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8014b0a:	687b      	ldr	r3, [r7, #4]
 8014b0c:	9300      	str	r3, [sp, #0]
 8014b0e:	68bb      	ldr	r3, [r7, #8]
 8014b10:	2200      	movs	r2, #0
 8014b12:	2180      	movs	r1, #128	; 0x80
 8014b14:	68f8      	ldr	r0, [r7, #12]
 8014b16:	f7ff ff49 	bl	80149ac <SPI_WaitFlagStateUntilTimeout>
 8014b1a:	4603      	mov	r3, r0
 8014b1c:	2b00      	cmp	r3, #0
 8014b1e:	d02d      	beq.n	8014b7c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014b20:	68fb      	ldr	r3, [r7, #12]
 8014b22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014b24:	f043 0220 	orr.w	r2, r3, #32
 8014b28:	68fb      	ldr	r3, [r7, #12]
 8014b2a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8014b2c:	2303      	movs	r3, #3
 8014b2e:	e026      	b.n	8014b7e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8014b30:	687b      	ldr	r3, [r7, #4]
 8014b32:	9300      	str	r3, [sp, #0]
 8014b34:	68bb      	ldr	r3, [r7, #8]
 8014b36:	2200      	movs	r2, #0
 8014b38:	2101      	movs	r1, #1
 8014b3a:	68f8      	ldr	r0, [r7, #12]
 8014b3c:	f7ff ff36 	bl	80149ac <SPI_WaitFlagStateUntilTimeout>
 8014b40:	4603      	mov	r3, r0
 8014b42:	2b00      	cmp	r3, #0
 8014b44:	d01a      	beq.n	8014b7c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014b46:	68fb      	ldr	r3, [r7, #12]
 8014b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014b4a:	f043 0220 	orr.w	r2, r3, #32
 8014b4e:	68fb      	ldr	r3, [r7, #12]
 8014b50:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8014b52:	2303      	movs	r3, #3
 8014b54:	e013      	b.n	8014b7e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8014b56:	687b      	ldr	r3, [r7, #4]
 8014b58:	9300      	str	r3, [sp, #0]
 8014b5a:	68bb      	ldr	r3, [r7, #8]
 8014b5c:	2200      	movs	r2, #0
 8014b5e:	2101      	movs	r1, #1
 8014b60:	68f8      	ldr	r0, [r7, #12]
 8014b62:	f7ff ff23 	bl	80149ac <SPI_WaitFlagStateUntilTimeout>
 8014b66:	4603      	mov	r3, r0
 8014b68:	2b00      	cmp	r3, #0
 8014b6a:	d007      	beq.n	8014b7c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014b6c:	68fb      	ldr	r3, [r7, #12]
 8014b6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014b70:	f043 0220 	orr.w	r2, r3, #32
 8014b74:	68fb      	ldr	r3, [r7, #12]
 8014b76:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8014b78:	2303      	movs	r3, #3
 8014b7a:	e000      	b.n	8014b7e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8014b7c:	2300      	movs	r3, #0
}
 8014b7e:	4618      	mov	r0, r3
 8014b80:	3710      	adds	r7, #16
 8014b82:	46bd      	mov	sp, r7
 8014b84:	bd80      	pop	{r7, pc}
	...

08014b88 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8014b88:	b580      	push	{r7, lr}
 8014b8a:	b088      	sub	sp, #32
 8014b8c:	af02      	add	r7, sp, #8
 8014b8e:	60f8      	str	r0, [r7, #12]
 8014b90:	60b9      	str	r1, [r7, #8]
 8014b92:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8014b94:	4b1b      	ldr	r3, [pc, #108]	; (8014c04 <SPI_EndRxTxTransaction+0x7c>)
 8014b96:	681b      	ldr	r3, [r3, #0]
 8014b98:	4a1b      	ldr	r2, [pc, #108]	; (8014c08 <SPI_EndRxTxTransaction+0x80>)
 8014b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8014b9e:	0d5b      	lsrs	r3, r3, #21
 8014ba0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8014ba4:	fb02 f303 	mul.w	r3, r2, r3
 8014ba8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8014baa:	68fb      	ldr	r3, [r7, #12]
 8014bac:	685b      	ldr	r3, [r3, #4]
 8014bae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8014bb2:	d112      	bne.n	8014bda <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8014bb4:	687b      	ldr	r3, [r7, #4]
 8014bb6:	9300      	str	r3, [sp, #0]
 8014bb8:	68bb      	ldr	r3, [r7, #8]
 8014bba:	2200      	movs	r2, #0
 8014bbc:	2180      	movs	r1, #128	; 0x80
 8014bbe:	68f8      	ldr	r0, [r7, #12]
 8014bc0:	f7ff fef4 	bl	80149ac <SPI_WaitFlagStateUntilTimeout>
 8014bc4:	4603      	mov	r3, r0
 8014bc6:	2b00      	cmp	r3, #0
 8014bc8:	d016      	beq.n	8014bf8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014bca:	68fb      	ldr	r3, [r7, #12]
 8014bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014bce:	f043 0220 	orr.w	r2, r3, #32
 8014bd2:	68fb      	ldr	r3, [r7, #12]
 8014bd4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8014bd6:	2303      	movs	r3, #3
 8014bd8:	e00f      	b.n	8014bfa <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8014bda:	697b      	ldr	r3, [r7, #20]
 8014bdc:	2b00      	cmp	r3, #0
 8014bde:	d00a      	beq.n	8014bf6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8014be0:	697b      	ldr	r3, [r7, #20]
 8014be2:	3b01      	subs	r3, #1
 8014be4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8014be6:	68fb      	ldr	r3, [r7, #12]
 8014be8:	681b      	ldr	r3, [r3, #0]
 8014bea:	689b      	ldr	r3, [r3, #8]
 8014bec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014bf0:	2b80      	cmp	r3, #128	; 0x80
 8014bf2:	d0f2      	beq.n	8014bda <SPI_EndRxTxTransaction+0x52>
 8014bf4:	e000      	b.n	8014bf8 <SPI_EndRxTxTransaction+0x70>
        break;
 8014bf6:	bf00      	nop
  }

  return HAL_OK;
 8014bf8:	2300      	movs	r3, #0
}
 8014bfa:	4618      	mov	r0, r3
 8014bfc:	3718      	adds	r7, #24
 8014bfe:	46bd      	mov	sp, r7
 8014c00:	bd80      	pop	{r7, pc}
 8014c02:	bf00      	nop
 8014c04:	20000084 	.word	0x20000084
 8014c08:	165e9f81 	.word	0x165e9f81

08014c0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8014c0c:	b580      	push	{r7, lr}
 8014c0e:	b082      	sub	sp, #8
 8014c10:	af00      	add	r7, sp, #0
 8014c12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8014c14:	687b      	ldr	r3, [r7, #4]
 8014c16:	2b00      	cmp	r3, #0
 8014c18:	d101      	bne.n	8014c1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8014c1a:	2301      	movs	r3, #1
 8014c1c:	e041      	b.n	8014ca2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8014c1e:	687b      	ldr	r3, [r7, #4]
 8014c20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014c24:	b2db      	uxtb	r3, r3
 8014c26:	2b00      	cmp	r3, #0
 8014c28:	d106      	bne.n	8014c38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8014c2a:	687b      	ldr	r3, [r7, #4]
 8014c2c:	2200      	movs	r2, #0
 8014c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8014c32:	6878      	ldr	r0, [r7, #4]
 8014c34:	f7f0 f9a8 	bl	8004f88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8014c38:	687b      	ldr	r3, [r7, #4]
 8014c3a:	2202      	movs	r2, #2
 8014c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8014c40:	687b      	ldr	r3, [r7, #4]
 8014c42:	681a      	ldr	r2, [r3, #0]
 8014c44:	687b      	ldr	r3, [r7, #4]
 8014c46:	3304      	adds	r3, #4
 8014c48:	4619      	mov	r1, r3
 8014c4a:	4610      	mov	r0, r2
 8014c4c:	f001 f858 	bl	8015d00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8014c50:	687b      	ldr	r3, [r7, #4]
 8014c52:	2201      	movs	r2, #1
 8014c54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8014c58:	687b      	ldr	r3, [r7, #4]
 8014c5a:	2201      	movs	r2, #1
 8014c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8014c60:	687b      	ldr	r3, [r7, #4]
 8014c62:	2201      	movs	r2, #1
 8014c64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8014c68:	687b      	ldr	r3, [r7, #4]
 8014c6a:	2201      	movs	r2, #1
 8014c6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8014c70:	687b      	ldr	r3, [r7, #4]
 8014c72:	2201      	movs	r2, #1
 8014c74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8014c78:	687b      	ldr	r3, [r7, #4]
 8014c7a:	2201      	movs	r2, #1
 8014c7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8014c80:	687b      	ldr	r3, [r7, #4]
 8014c82:	2201      	movs	r2, #1
 8014c84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8014c88:	687b      	ldr	r3, [r7, #4]
 8014c8a:	2201      	movs	r2, #1
 8014c8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014c90:	687b      	ldr	r3, [r7, #4]
 8014c92:	2201      	movs	r2, #1
 8014c94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8014c98:	687b      	ldr	r3, [r7, #4]
 8014c9a:	2201      	movs	r2, #1
 8014c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8014ca0:	2300      	movs	r3, #0
}
 8014ca2:	4618      	mov	r0, r3
 8014ca4:	3708      	adds	r7, #8
 8014ca6:	46bd      	mov	sp, r7
 8014ca8:	bd80      	pop	{r7, pc}
	...

08014cac <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8014cac:	b480      	push	{r7}
 8014cae:	b085      	sub	sp, #20
 8014cb0:	af00      	add	r7, sp, #0
 8014cb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8014cb4:	687b      	ldr	r3, [r7, #4]
 8014cb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014cba:	b2db      	uxtb	r3, r3
 8014cbc:	2b01      	cmp	r3, #1
 8014cbe:	d001      	beq.n	8014cc4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8014cc0:	2301      	movs	r3, #1
 8014cc2:	e046      	b.n	8014d52 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8014cc4:	687b      	ldr	r3, [r7, #4]
 8014cc6:	2202      	movs	r2, #2
 8014cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8014ccc:	687b      	ldr	r3, [r7, #4]
 8014cce:	681b      	ldr	r3, [r3, #0]
 8014cd0:	4a23      	ldr	r2, [pc, #140]	; (8014d60 <HAL_TIM_Base_Start+0xb4>)
 8014cd2:	4293      	cmp	r3, r2
 8014cd4:	d022      	beq.n	8014d1c <HAL_TIM_Base_Start+0x70>
 8014cd6:	687b      	ldr	r3, [r7, #4]
 8014cd8:	681b      	ldr	r3, [r3, #0]
 8014cda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014cde:	d01d      	beq.n	8014d1c <HAL_TIM_Base_Start+0x70>
 8014ce0:	687b      	ldr	r3, [r7, #4]
 8014ce2:	681b      	ldr	r3, [r3, #0]
 8014ce4:	4a1f      	ldr	r2, [pc, #124]	; (8014d64 <HAL_TIM_Base_Start+0xb8>)
 8014ce6:	4293      	cmp	r3, r2
 8014ce8:	d018      	beq.n	8014d1c <HAL_TIM_Base_Start+0x70>
 8014cea:	687b      	ldr	r3, [r7, #4]
 8014cec:	681b      	ldr	r3, [r3, #0]
 8014cee:	4a1e      	ldr	r2, [pc, #120]	; (8014d68 <HAL_TIM_Base_Start+0xbc>)
 8014cf0:	4293      	cmp	r3, r2
 8014cf2:	d013      	beq.n	8014d1c <HAL_TIM_Base_Start+0x70>
 8014cf4:	687b      	ldr	r3, [r7, #4]
 8014cf6:	681b      	ldr	r3, [r3, #0]
 8014cf8:	4a1c      	ldr	r2, [pc, #112]	; (8014d6c <HAL_TIM_Base_Start+0xc0>)
 8014cfa:	4293      	cmp	r3, r2
 8014cfc:	d00e      	beq.n	8014d1c <HAL_TIM_Base_Start+0x70>
 8014cfe:	687b      	ldr	r3, [r7, #4]
 8014d00:	681b      	ldr	r3, [r3, #0]
 8014d02:	4a1b      	ldr	r2, [pc, #108]	; (8014d70 <HAL_TIM_Base_Start+0xc4>)
 8014d04:	4293      	cmp	r3, r2
 8014d06:	d009      	beq.n	8014d1c <HAL_TIM_Base_Start+0x70>
 8014d08:	687b      	ldr	r3, [r7, #4]
 8014d0a:	681b      	ldr	r3, [r3, #0]
 8014d0c:	4a19      	ldr	r2, [pc, #100]	; (8014d74 <HAL_TIM_Base_Start+0xc8>)
 8014d0e:	4293      	cmp	r3, r2
 8014d10:	d004      	beq.n	8014d1c <HAL_TIM_Base_Start+0x70>
 8014d12:	687b      	ldr	r3, [r7, #4]
 8014d14:	681b      	ldr	r3, [r3, #0]
 8014d16:	4a18      	ldr	r2, [pc, #96]	; (8014d78 <HAL_TIM_Base_Start+0xcc>)
 8014d18:	4293      	cmp	r3, r2
 8014d1a:	d111      	bne.n	8014d40 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8014d1c:	687b      	ldr	r3, [r7, #4]
 8014d1e:	681b      	ldr	r3, [r3, #0]
 8014d20:	689b      	ldr	r3, [r3, #8]
 8014d22:	f003 0307 	and.w	r3, r3, #7
 8014d26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8014d28:	68fb      	ldr	r3, [r7, #12]
 8014d2a:	2b06      	cmp	r3, #6
 8014d2c:	d010      	beq.n	8014d50 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8014d2e:	687b      	ldr	r3, [r7, #4]
 8014d30:	681b      	ldr	r3, [r3, #0]
 8014d32:	681a      	ldr	r2, [r3, #0]
 8014d34:	687b      	ldr	r3, [r7, #4]
 8014d36:	681b      	ldr	r3, [r3, #0]
 8014d38:	f042 0201 	orr.w	r2, r2, #1
 8014d3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8014d3e:	e007      	b.n	8014d50 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8014d40:	687b      	ldr	r3, [r7, #4]
 8014d42:	681b      	ldr	r3, [r3, #0]
 8014d44:	681a      	ldr	r2, [r3, #0]
 8014d46:	687b      	ldr	r3, [r7, #4]
 8014d48:	681b      	ldr	r3, [r3, #0]
 8014d4a:	f042 0201 	orr.w	r2, r2, #1
 8014d4e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8014d50:	2300      	movs	r3, #0
}
 8014d52:	4618      	mov	r0, r3
 8014d54:	3714      	adds	r7, #20
 8014d56:	46bd      	mov	sp, r7
 8014d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d5c:	4770      	bx	lr
 8014d5e:	bf00      	nop
 8014d60:	40010000 	.word	0x40010000
 8014d64:	40000400 	.word	0x40000400
 8014d68:	40000800 	.word	0x40000800
 8014d6c:	40000c00 	.word	0x40000c00
 8014d70:	40010400 	.word	0x40010400
 8014d74:	40014000 	.word	0x40014000
 8014d78:	40001800 	.word	0x40001800

08014d7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8014d7c:	b480      	push	{r7}
 8014d7e:	b085      	sub	sp, #20
 8014d80:	af00      	add	r7, sp, #0
 8014d82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8014d84:	687b      	ldr	r3, [r7, #4]
 8014d86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014d8a:	b2db      	uxtb	r3, r3
 8014d8c:	2b01      	cmp	r3, #1
 8014d8e:	d001      	beq.n	8014d94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8014d90:	2301      	movs	r3, #1
 8014d92:	e04e      	b.n	8014e32 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8014d94:	687b      	ldr	r3, [r7, #4]
 8014d96:	2202      	movs	r2, #2
 8014d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8014d9c:	687b      	ldr	r3, [r7, #4]
 8014d9e:	681b      	ldr	r3, [r3, #0]
 8014da0:	68da      	ldr	r2, [r3, #12]
 8014da2:	687b      	ldr	r3, [r7, #4]
 8014da4:	681b      	ldr	r3, [r3, #0]
 8014da6:	f042 0201 	orr.w	r2, r2, #1
 8014daa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8014dac:	687b      	ldr	r3, [r7, #4]
 8014dae:	681b      	ldr	r3, [r3, #0]
 8014db0:	4a23      	ldr	r2, [pc, #140]	; (8014e40 <HAL_TIM_Base_Start_IT+0xc4>)
 8014db2:	4293      	cmp	r3, r2
 8014db4:	d022      	beq.n	8014dfc <HAL_TIM_Base_Start_IT+0x80>
 8014db6:	687b      	ldr	r3, [r7, #4]
 8014db8:	681b      	ldr	r3, [r3, #0]
 8014dba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014dbe:	d01d      	beq.n	8014dfc <HAL_TIM_Base_Start_IT+0x80>
 8014dc0:	687b      	ldr	r3, [r7, #4]
 8014dc2:	681b      	ldr	r3, [r3, #0]
 8014dc4:	4a1f      	ldr	r2, [pc, #124]	; (8014e44 <HAL_TIM_Base_Start_IT+0xc8>)
 8014dc6:	4293      	cmp	r3, r2
 8014dc8:	d018      	beq.n	8014dfc <HAL_TIM_Base_Start_IT+0x80>
 8014dca:	687b      	ldr	r3, [r7, #4]
 8014dcc:	681b      	ldr	r3, [r3, #0]
 8014dce:	4a1e      	ldr	r2, [pc, #120]	; (8014e48 <HAL_TIM_Base_Start_IT+0xcc>)
 8014dd0:	4293      	cmp	r3, r2
 8014dd2:	d013      	beq.n	8014dfc <HAL_TIM_Base_Start_IT+0x80>
 8014dd4:	687b      	ldr	r3, [r7, #4]
 8014dd6:	681b      	ldr	r3, [r3, #0]
 8014dd8:	4a1c      	ldr	r2, [pc, #112]	; (8014e4c <HAL_TIM_Base_Start_IT+0xd0>)
 8014dda:	4293      	cmp	r3, r2
 8014ddc:	d00e      	beq.n	8014dfc <HAL_TIM_Base_Start_IT+0x80>
 8014dde:	687b      	ldr	r3, [r7, #4]
 8014de0:	681b      	ldr	r3, [r3, #0]
 8014de2:	4a1b      	ldr	r2, [pc, #108]	; (8014e50 <HAL_TIM_Base_Start_IT+0xd4>)
 8014de4:	4293      	cmp	r3, r2
 8014de6:	d009      	beq.n	8014dfc <HAL_TIM_Base_Start_IT+0x80>
 8014de8:	687b      	ldr	r3, [r7, #4]
 8014dea:	681b      	ldr	r3, [r3, #0]
 8014dec:	4a19      	ldr	r2, [pc, #100]	; (8014e54 <HAL_TIM_Base_Start_IT+0xd8>)
 8014dee:	4293      	cmp	r3, r2
 8014df0:	d004      	beq.n	8014dfc <HAL_TIM_Base_Start_IT+0x80>
 8014df2:	687b      	ldr	r3, [r7, #4]
 8014df4:	681b      	ldr	r3, [r3, #0]
 8014df6:	4a18      	ldr	r2, [pc, #96]	; (8014e58 <HAL_TIM_Base_Start_IT+0xdc>)
 8014df8:	4293      	cmp	r3, r2
 8014dfa:	d111      	bne.n	8014e20 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8014dfc:	687b      	ldr	r3, [r7, #4]
 8014dfe:	681b      	ldr	r3, [r3, #0]
 8014e00:	689b      	ldr	r3, [r3, #8]
 8014e02:	f003 0307 	and.w	r3, r3, #7
 8014e06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8014e08:	68fb      	ldr	r3, [r7, #12]
 8014e0a:	2b06      	cmp	r3, #6
 8014e0c:	d010      	beq.n	8014e30 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8014e0e:	687b      	ldr	r3, [r7, #4]
 8014e10:	681b      	ldr	r3, [r3, #0]
 8014e12:	681a      	ldr	r2, [r3, #0]
 8014e14:	687b      	ldr	r3, [r7, #4]
 8014e16:	681b      	ldr	r3, [r3, #0]
 8014e18:	f042 0201 	orr.w	r2, r2, #1
 8014e1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8014e1e:	e007      	b.n	8014e30 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8014e20:	687b      	ldr	r3, [r7, #4]
 8014e22:	681b      	ldr	r3, [r3, #0]
 8014e24:	681a      	ldr	r2, [r3, #0]
 8014e26:	687b      	ldr	r3, [r7, #4]
 8014e28:	681b      	ldr	r3, [r3, #0]
 8014e2a:	f042 0201 	orr.w	r2, r2, #1
 8014e2e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8014e30:	2300      	movs	r3, #0
}
 8014e32:	4618      	mov	r0, r3
 8014e34:	3714      	adds	r7, #20
 8014e36:	46bd      	mov	sp, r7
 8014e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e3c:	4770      	bx	lr
 8014e3e:	bf00      	nop
 8014e40:	40010000 	.word	0x40010000
 8014e44:	40000400 	.word	0x40000400
 8014e48:	40000800 	.word	0x40000800
 8014e4c:	40000c00 	.word	0x40000c00
 8014e50:	40010400 	.word	0x40010400
 8014e54:	40014000 	.word	0x40014000
 8014e58:	40001800 	.word	0x40001800

08014e5c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8014e5c:	b580      	push	{r7, lr}
 8014e5e:	b082      	sub	sp, #8
 8014e60:	af00      	add	r7, sp, #0
 8014e62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8014e64:	687b      	ldr	r3, [r7, #4]
 8014e66:	2b00      	cmp	r3, #0
 8014e68:	d101      	bne.n	8014e6e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8014e6a:	2301      	movs	r3, #1
 8014e6c:	e041      	b.n	8014ef2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8014e6e:	687b      	ldr	r3, [r7, #4]
 8014e70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014e74:	b2db      	uxtb	r3, r3
 8014e76:	2b00      	cmp	r3, #0
 8014e78:	d106      	bne.n	8014e88 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8014e7a:	687b      	ldr	r3, [r7, #4]
 8014e7c:	2200      	movs	r2, #0
 8014e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8014e82:	6878      	ldr	r0, [r7, #4]
 8014e84:	f000 f839 	bl	8014efa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8014e88:	687b      	ldr	r3, [r7, #4]
 8014e8a:	2202      	movs	r2, #2
 8014e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8014e90:	687b      	ldr	r3, [r7, #4]
 8014e92:	681a      	ldr	r2, [r3, #0]
 8014e94:	687b      	ldr	r3, [r7, #4]
 8014e96:	3304      	adds	r3, #4
 8014e98:	4619      	mov	r1, r3
 8014e9a:	4610      	mov	r0, r2
 8014e9c:	f000 ff30 	bl	8015d00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8014ea0:	687b      	ldr	r3, [r7, #4]
 8014ea2:	2201      	movs	r2, #1
 8014ea4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8014ea8:	687b      	ldr	r3, [r7, #4]
 8014eaa:	2201      	movs	r2, #1
 8014eac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8014eb0:	687b      	ldr	r3, [r7, #4]
 8014eb2:	2201      	movs	r2, #1
 8014eb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8014eb8:	687b      	ldr	r3, [r7, #4]
 8014eba:	2201      	movs	r2, #1
 8014ebc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8014ec0:	687b      	ldr	r3, [r7, #4]
 8014ec2:	2201      	movs	r2, #1
 8014ec4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8014ec8:	687b      	ldr	r3, [r7, #4]
 8014eca:	2201      	movs	r2, #1
 8014ecc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8014ed0:	687b      	ldr	r3, [r7, #4]
 8014ed2:	2201      	movs	r2, #1
 8014ed4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8014ed8:	687b      	ldr	r3, [r7, #4]
 8014eda:	2201      	movs	r2, #1
 8014edc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014ee0:	687b      	ldr	r3, [r7, #4]
 8014ee2:	2201      	movs	r2, #1
 8014ee4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8014ee8:	687b      	ldr	r3, [r7, #4]
 8014eea:	2201      	movs	r2, #1
 8014eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8014ef0:	2300      	movs	r3, #0
}
 8014ef2:	4618      	mov	r0, r3
 8014ef4:	3708      	adds	r7, #8
 8014ef6:	46bd      	mov	sp, r7
 8014ef8:	bd80      	pop	{r7, pc}

08014efa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8014efa:	b480      	push	{r7}
 8014efc:	b083      	sub	sp, #12
 8014efe:	af00      	add	r7, sp, #0
 8014f00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8014f02:	bf00      	nop
 8014f04:	370c      	adds	r7, #12
 8014f06:	46bd      	mov	sp, r7
 8014f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f0c:	4770      	bx	lr
	...

08014f10 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8014f10:	b580      	push	{r7, lr}
 8014f12:	b084      	sub	sp, #16
 8014f14:	af00      	add	r7, sp, #0
 8014f16:	6078      	str	r0, [r7, #4]
 8014f18:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8014f1a:	683b      	ldr	r3, [r7, #0]
 8014f1c:	2b00      	cmp	r3, #0
 8014f1e:	d109      	bne.n	8014f34 <HAL_TIM_PWM_Start+0x24>
 8014f20:	687b      	ldr	r3, [r7, #4]
 8014f22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8014f26:	b2db      	uxtb	r3, r3
 8014f28:	2b01      	cmp	r3, #1
 8014f2a:	bf14      	ite	ne
 8014f2c:	2301      	movne	r3, #1
 8014f2e:	2300      	moveq	r3, #0
 8014f30:	b2db      	uxtb	r3, r3
 8014f32:	e022      	b.n	8014f7a <HAL_TIM_PWM_Start+0x6a>
 8014f34:	683b      	ldr	r3, [r7, #0]
 8014f36:	2b04      	cmp	r3, #4
 8014f38:	d109      	bne.n	8014f4e <HAL_TIM_PWM_Start+0x3e>
 8014f3a:	687b      	ldr	r3, [r7, #4]
 8014f3c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8014f40:	b2db      	uxtb	r3, r3
 8014f42:	2b01      	cmp	r3, #1
 8014f44:	bf14      	ite	ne
 8014f46:	2301      	movne	r3, #1
 8014f48:	2300      	moveq	r3, #0
 8014f4a:	b2db      	uxtb	r3, r3
 8014f4c:	e015      	b.n	8014f7a <HAL_TIM_PWM_Start+0x6a>
 8014f4e:	683b      	ldr	r3, [r7, #0]
 8014f50:	2b08      	cmp	r3, #8
 8014f52:	d109      	bne.n	8014f68 <HAL_TIM_PWM_Start+0x58>
 8014f54:	687b      	ldr	r3, [r7, #4]
 8014f56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014f5a:	b2db      	uxtb	r3, r3
 8014f5c:	2b01      	cmp	r3, #1
 8014f5e:	bf14      	ite	ne
 8014f60:	2301      	movne	r3, #1
 8014f62:	2300      	moveq	r3, #0
 8014f64:	b2db      	uxtb	r3, r3
 8014f66:	e008      	b.n	8014f7a <HAL_TIM_PWM_Start+0x6a>
 8014f68:	687b      	ldr	r3, [r7, #4]
 8014f6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8014f6e:	b2db      	uxtb	r3, r3
 8014f70:	2b01      	cmp	r3, #1
 8014f72:	bf14      	ite	ne
 8014f74:	2301      	movne	r3, #1
 8014f76:	2300      	moveq	r3, #0
 8014f78:	b2db      	uxtb	r3, r3
 8014f7a:	2b00      	cmp	r3, #0
 8014f7c:	d001      	beq.n	8014f82 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8014f7e:	2301      	movs	r3, #1
 8014f80:	e07c      	b.n	801507c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8014f82:	683b      	ldr	r3, [r7, #0]
 8014f84:	2b00      	cmp	r3, #0
 8014f86:	d104      	bne.n	8014f92 <HAL_TIM_PWM_Start+0x82>
 8014f88:	687b      	ldr	r3, [r7, #4]
 8014f8a:	2202      	movs	r2, #2
 8014f8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8014f90:	e013      	b.n	8014fba <HAL_TIM_PWM_Start+0xaa>
 8014f92:	683b      	ldr	r3, [r7, #0]
 8014f94:	2b04      	cmp	r3, #4
 8014f96:	d104      	bne.n	8014fa2 <HAL_TIM_PWM_Start+0x92>
 8014f98:	687b      	ldr	r3, [r7, #4]
 8014f9a:	2202      	movs	r2, #2
 8014f9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8014fa0:	e00b      	b.n	8014fba <HAL_TIM_PWM_Start+0xaa>
 8014fa2:	683b      	ldr	r3, [r7, #0]
 8014fa4:	2b08      	cmp	r3, #8
 8014fa6:	d104      	bne.n	8014fb2 <HAL_TIM_PWM_Start+0xa2>
 8014fa8:	687b      	ldr	r3, [r7, #4]
 8014faa:	2202      	movs	r2, #2
 8014fac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8014fb0:	e003      	b.n	8014fba <HAL_TIM_PWM_Start+0xaa>
 8014fb2:	687b      	ldr	r3, [r7, #4]
 8014fb4:	2202      	movs	r2, #2
 8014fb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8014fba:	687b      	ldr	r3, [r7, #4]
 8014fbc:	681b      	ldr	r3, [r3, #0]
 8014fbe:	2201      	movs	r2, #1
 8014fc0:	6839      	ldr	r1, [r7, #0]
 8014fc2:	4618      	mov	r0, r3
 8014fc4:	f001 fb42 	bl	801664c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8014fc8:	687b      	ldr	r3, [r7, #4]
 8014fca:	681b      	ldr	r3, [r3, #0]
 8014fcc:	4a2d      	ldr	r2, [pc, #180]	; (8015084 <HAL_TIM_PWM_Start+0x174>)
 8014fce:	4293      	cmp	r3, r2
 8014fd0:	d004      	beq.n	8014fdc <HAL_TIM_PWM_Start+0xcc>
 8014fd2:	687b      	ldr	r3, [r7, #4]
 8014fd4:	681b      	ldr	r3, [r3, #0]
 8014fd6:	4a2c      	ldr	r2, [pc, #176]	; (8015088 <HAL_TIM_PWM_Start+0x178>)
 8014fd8:	4293      	cmp	r3, r2
 8014fda:	d101      	bne.n	8014fe0 <HAL_TIM_PWM_Start+0xd0>
 8014fdc:	2301      	movs	r3, #1
 8014fde:	e000      	b.n	8014fe2 <HAL_TIM_PWM_Start+0xd2>
 8014fe0:	2300      	movs	r3, #0
 8014fe2:	2b00      	cmp	r3, #0
 8014fe4:	d007      	beq.n	8014ff6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8014fe6:	687b      	ldr	r3, [r7, #4]
 8014fe8:	681b      	ldr	r3, [r3, #0]
 8014fea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014fec:	687b      	ldr	r3, [r7, #4]
 8014fee:	681b      	ldr	r3, [r3, #0]
 8014ff0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8014ff4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8014ff6:	687b      	ldr	r3, [r7, #4]
 8014ff8:	681b      	ldr	r3, [r3, #0]
 8014ffa:	4a22      	ldr	r2, [pc, #136]	; (8015084 <HAL_TIM_PWM_Start+0x174>)
 8014ffc:	4293      	cmp	r3, r2
 8014ffe:	d022      	beq.n	8015046 <HAL_TIM_PWM_Start+0x136>
 8015000:	687b      	ldr	r3, [r7, #4]
 8015002:	681b      	ldr	r3, [r3, #0]
 8015004:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015008:	d01d      	beq.n	8015046 <HAL_TIM_PWM_Start+0x136>
 801500a:	687b      	ldr	r3, [r7, #4]
 801500c:	681b      	ldr	r3, [r3, #0]
 801500e:	4a1f      	ldr	r2, [pc, #124]	; (801508c <HAL_TIM_PWM_Start+0x17c>)
 8015010:	4293      	cmp	r3, r2
 8015012:	d018      	beq.n	8015046 <HAL_TIM_PWM_Start+0x136>
 8015014:	687b      	ldr	r3, [r7, #4]
 8015016:	681b      	ldr	r3, [r3, #0]
 8015018:	4a1d      	ldr	r2, [pc, #116]	; (8015090 <HAL_TIM_PWM_Start+0x180>)
 801501a:	4293      	cmp	r3, r2
 801501c:	d013      	beq.n	8015046 <HAL_TIM_PWM_Start+0x136>
 801501e:	687b      	ldr	r3, [r7, #4]
 8015020:	681b      	ldr	r3, [r3, #0]
 8015022:	4a1c      	ldr	r2, [pc, #112]	; (8015094 <HAL_TIM_PWM_Start+0x184>)
 8015024:	4293      	cmp	r3, r2
 8015026:	d00e      	beq.n	8015046 <HAL_TIM_PWM_Start+0x136>
 8015028:	687b      	ldr	r3, [r7, #4]
 801502a:	681b      	ldr	r3, [r3, #0]
 801502c:	4a16      	ldr	r2, [pc, #88]	; (8015088 <HAL_TIM_PWM_Start+0x178>)
 801502e:	4293      	cmp	r3, r2
 8015030:	d009      	beq.n	8015046 <HAL_TIM_PWM_Start+0x136>
 8015032:	687b      	ldr	r3, [r7, #4]
 8015034:	681b      	ldr	r3, [r3, #0]
 8015036:	4a18      	ldr	r2, [pc, #96]	; (8015098 <HAL_TIM_PWM_Start+0x188>)
 8015038:	4293      	cmp	r3, r2
 801503a:	d004      	beq.n	8015046 <HAL_TIM_PWM_Start+0x136>
 801503c:	687b      	ldr	r3, [r7, #4]
 801503e:	681b      	ldr	r3, [r3, #0]
 8015040:	4a16      	ldr	r2, [pc, #88]	; (801509c <HAL_TIM_PWM_Start+0x18c>)
 8015042:	4293      	cmp	r3, r2
 8015044:	d111      	bne.n	801506a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8015046:	687b      	ldr	r3, [r7, #4]
 8015048:	681b      	ldr	r3, [r3, #0]
 801504a:	689b      	ldr	r3, [r3, #8]
 801504c:	f003 0307 	and.w	r3, r3, #7
 8015050:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015052:	68fb      	ldr	r3, [r7, #12]
 8015054:	2b06      	cmp	r3, #6
 8015056:	d010      	beq.n	801507a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8015058:	687b      	ldr	r3, [r7, #4]
 801505a:	681b      	ldr	r3, [r3, #0]
 801505c:	681a      	ldr	r2, [r3, #0]
 801505e:	687b      	ldr	r3, [r7, #4]
 8015060:	681b      	ldr	r3, [r3, #0]
 8015062:	f042 0201 	orr.w	r2, r2, #1
 8015066:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015068:	e007      	b.n	801507a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801506a:	687b      	ldr	r3, [r7, #4]
 801506c:	681b      	ldr	r3, [r3, #0]
 801506e:	681a      	ldr	r2, [r3, #0]
 8015070:	687b      	ldr	r3, [r7, #4]
 8015072:	681b      	ldr	r3, [r3, #0]
 8015074:	f042 0201 	orr.w	r2, r2, #1
 8015078:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801507a:	2300      	movs	r3, #0
}
 801507c:	4618      	mov	r0, r3
 801507e:	3710      	adds	r7, #16
 8015080:	46bd      	mov	sp, r7
 8015082:	bd80      	pop	{r7, pc}
 8015084:	40010000 	.word	0x40010000
 8015088:	40010400 	.word	0x40010400
 801508c:	40000400 	.word	0x40000400
 8015090:	40000800 	.word	0x40000800
 8015094:	40000c00 	.word	0x40000c00
 8015098:	40014000 	.word	0x40014000
 801509c:	40001800 	.word	0x40001800

080150a0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80150a0:	b580      	push	{r7, lr}
 80150a2:	b082      	sub	sp, #8
 80150a4:	af00      	add	r7, sp, #0
 80150a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80150a8:	687b      	ldr	r3, [r7, #4]
 80150aa:	2b00      	cmp	r3, #0
 80150ac:	d101      	bne.n	80150b2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80150ae:	2301      	movs	r3, #1
 80150b0:	e041      	b.n	8015136 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80150b2:	687b      	ldr	r3, [r7, #4]
 80150b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80150b8:	b2db      	uxtb	r3, r3
 80150ba:	2b00      	cmp	r3, #0
 80150bc:	d106      	bne.n	80150cc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80150be:	687b      	ldr	r3, [r7, #4]
 80150c0:	2200      	movs	r2, #0
 80150c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80150c6:	6878      	ldr	r0, [r7, #4]
 80150c8:	f000 f839 	bl	801513e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80150cc:	687b      	ldr	r3, [r7, #4]
 80150ce:	2202      	movs	r2, #2
 80150d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80150d4:	687b      	ldr	r3, [r7, #4]
 80150d6:	681a      	ldr	r2, [r3, #0]
 80150d8:	687b      	ldr	r3, [r7, #4]
 80150da:	3304      	adds	r3, #4
 80150dc:	4619      	mov	r1, r3
 80150de:	4610      	mov	r0, r2
 80150e0:	f000 fe0e 	bl	8015d00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80150e4:	687b      	ldr	r3, [r7, #4]
 80150e6:	2201      	movs	r2, #1
 80150e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80150ec:	687b      	ldr	r3, [r7, #4]
 80150ee:	2201      	movs	r2, #1
 80150f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80150f4:	687b      	ldr	r3, [r7, #4]
 80150f6:	2201      	movs	r2, #1
 80150f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80150fc:	687b      	ldr	r3, [r7, #4]
 80150fe:	2201      	movs	r2, #1
 8015100:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8015104:	687b      	ldr	r3, [r7, #4]
 8015106:	2201      	movs	r2, #1
 8015108:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801510c:	687b      	ldr	r3, [r7, #4]
 801510e:	2201      	movs	r2, #1
 8015110:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8015114:	687b      	ldr	r3, [r7, #4]
 8015116:	2201      	movs	r2, #1
 8015118:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801511c:	687b      	ldr	r3, [r7, #4]
 801511e:	2201      	movs	r2, #1
 8015120:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015124:	687b      	ldr	r3, [r7, #4]
 8015126:	2201      	movs	r2, #1
 8015128:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801512c:	687b      	ldr	r3, [r7, #4]
 801512e:	2201      	movs	r2, #1
 8015130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8015134:	2300      	movs	r3, #0
}
 8015136:	4618      	mov	r0, r3
 8015138:	3708      	adds	r7, #8
 801513a:	46bd      	mov	sp, r7
 801513c:	bd80      	pop	{r7, pc}

0801513e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 801513e:	b480      	push	{r7}
 8015140:	b083      	sub	sp, #12
 8015142:	af00      	add	r7, sp, #0
 8015144:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8015146:	bf00      	nop
 8015148:	370c      	adds	r7, #12
 801514a:	46bd      	mov	sp, r7
 801514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015150:	4770      	bx	lr
	...

08015154 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8015154:	b580      	push	{r7, lr}
 8015156:	b084      	sub	sp, #16
 8015158:	af00      	add	r7, sp, #0
 801515a:	6078      	str	r0, [r7, #4]
 801515c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 801515e:	683b      	ldr	r3, [r7, #0]
 8015160:	2b00      	cmp	r3, #0
 8015162:	d104      	bne.n	801516e <HAL_TIM_IC_Start+0x1a>
 8015164:	687b      	ldr	r3, [r7, #4]
 8015166:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801516a:	b2db      	uxtb	r3, r3
 801516c:	e013      	b.n	8015196 <HAL_TIM_IC_Start+0x42>
 801516e:	683b      	ldr	r3, [r7, #0]
 8015170:	2b04      	cmp	r3, #4
 8015172:	d104      	bne.n	801517e <HAL_TIM_IC_Start+0x2a>
 8015174:	687b      	ldr	r3, [r7, #4]
 8015176:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801517a:	b2db      	uxtb	r3, r3
 801517c:	e00b      	b.n	8015196 <HAL_TIM_IC_Start+0x42>
 801517e:	683b      	ldr	r3, [r7, #0]
 8015180:	2b08      	cmp	r3, #8
 8015182:	d104      	bne.n	801518e <HAL_TIM_IC_Start+0x3a>
 8015184:	687b      	ldr	r3, [r7, #4]
 8015186:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801518a:	b2db      	uxtb	r3, r3
 801518c:	e003      	b.n	8015196 <HAL_TIM_IC_Start+0x42>
 801518e:	687b      	ldr	r3, [r7, #4]
 8015190:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8015194:	b2db      	uxtb	r3, r3
 8015196:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8015198:	683b      	ldr	r3, [r7, #0]
 801519a:	2b00      	cmp	r3, #0
 801519c:	d104      	bne.n	80151a8 <HAL_TIM_IC_Start+0x54>
 801519e:	687b      	ldr	r3, [r7, #4]
 80151a0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80151a4:	b2db      	uxtb	r3, r3
 80151a6:	e013      	b.n	80151d0 <HAL_TIM_IC_Start+0x7c>
 80151a8:	683b      	ldr	r3, [r7, #0]
 80151aa:	2b04      	cmp	r3, #4
 80151ac:	d104      	bne.n	80151b8 <HAL_TIM_IC_Start+0x64>
 80151ae:	687b      	ldr	r3, [r7, #4]
 80151b0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80151b4:	b2db      	uxtb	r3, r3
 80151b6:	e00b      	b.n	80151d0 <HAL_TIM_IC_Start+0x7c>
 80151b8:	683b      	ldr	r3, [r7, #0]
 80151ba:	2b08      	cmp	r3, #8
 80151bc:	d104      	bne.n	80151c8 <HAL_TIM_IC_Start+0x74>
 80151be:	687b      	ldr	r3, [r7, #4]
 80151c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80151c4:	b2db      	uxtb	r3, r3
 80151c6:	e003      	b.n	80151d0 <HAL_TIM_IC_Start+0x7c>
 80151c8:	687b      	ldr	r3, [r7, #4]
 80151ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80151ce:	b2db      	uxtb	r3, r3
 80151d0:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80151d2:	7bfb      	ldrb	r3, [r7, #15]
 80151d4:	2b01      	cmp	r3, #1
 80151d6:	d102      	bne.n	80151de <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80151d8:	7bbb      	ldrb	r3, [r7, #14]
 80151da:	2b01      	cmp	r3, #1
 80151dc:	d001      	beq.n	80151e2 <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 80151de:	2301      	movs	r3, #1
 80151e0:	e081      	b.n	80152e6 <HAL_TIM_IC_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80151e2:	683b      	ldr	r3, [r7, #0]
 80151e4:	2b00      	cmp	r3, #0
 80151e6:	d104      	bne.n	80151f2 <HAL_TIM_IC_Start+0x9e>
 80151e8:	687b      	ldr	r3, [r7, #4]
 80151ea:	2202      	movs	r2, #2
 80151ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80151f0:	e013      	b.n	801521a <HAL_TIM_IC_Start+0xc6>
 80151f2:	683b      	ldr	r3, [r7, #0]
 80151f4:	2b04      	cmp	r3, #4
 80151f6:	d104      	bne.n	8015202 <HAL_TIM_IC_Start+0xae>
 80151f8:	687b      	ldr	r3, [r7, #4]
 80151fa:	2202      	movs	r2, #2
 80151fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8015200:	e00b      	b.n	801521a <HAL_TIM_IC_Start+0xc6>
 8015202:	683b      	ldr	r3, [r7, #0]
 8015204:	2b08      	cmp	r3, #8
 8015206:	d104      	bne.n	8015212 <HAL_TIM_IC_Start+0xbe>
 8015208:	687b      	ldr	r3, [r7, #4]
 801520a:	2202      	movs	r2, #2
 801520c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8015210:	e003      	b.n	801521a <HAL_TIM_IC_Start+0xc6>
 8015212:	687b      	ldr	r3, [r7, #4]
 8015214:	2202      	movs	r2, #2
 8015216:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801521a:	683b      	ldr	r3, [r7, #0]
 801521c:	2b00      	cmp	r3, #0
 801521e:	d104      	bne.n	801522a <HAL_TIM_IC_Start+0xd6>
 8015220:	687b      	ldr	r3, [r7, #4]
 8015222:	2202      	movs	r2, #2
 8015224:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8015228:	e013      	b.n	8015252 <HAL_TIM_IC_Start+0xfe>
 801522a:	683b      	ldr	r3, [r7, #0]
 801522c:	2b04      	cmp	r3, #4
 801522e:	d104      	bne.n	801523a <HAL_TIM_IC_Start+0xe6>
 8015230:	687b      	ldr	r3, [r7, #4]
 8015232:	2202      	movs	r2, #2
 8015234:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8015238:	e00b      	b.n	8015252 <HAL_TIM_IC_Start+0xfe>
 801523a:	683b      	ldr	r3, [r7, #0]
 801523c:	2b08      	cmp	r3, #8
 801523e:	d104      	bne.n	801524a <HAL_TIM_IC_Start+0xf6>
 8015240:	687b      	ldr	r3, [r7, #4]
 8015242:	2202      	movs	r2, #2
 8015244:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015248:	e003      	b.n	8015252 <HAL_TIM_IC_Start+0xfe>
 801524a:	687b      	ldr	r3, [r7, #4]
 801524c:	2202      	movs	r2, #2
 801524e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8015252:	687b      	ldr	r3, [r7, #4]
 8015254:	681b      	ldr	r3, [r3, #0]
 8015256:	2201      	movs	r2, #1
 8015258:	6839      	ldr	r1, [r7, #0]
 801525a:	4618      	mov	r0, r3
 801525c:	f001 f9f6 	bl	801664c <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8015260:	687b      	ldr	r3, [r7, #4]
 8015262:	681b      	ldr	r3, [r3, #0]
 8015264:	4a22      	ldr	r2, [pc, #136]	; (80152f0 <HAL_TIM_IC_Start+0x19c>)
 8015266:	4293      	cmp	r3, r2
 8015268:	d022      	beq.n	80152b0 <HAL_TIM_IC_Start+0x15c>
 801526a:	687b      	ldr	r3, [r7, #4]
 801526c:	681b      	ldr	r3, [r3, #0]
 801526e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015272:	d01d      	beq.n	80152b0 <HAL_TIM_IC_Start+0x15c>
 8015274:	687b      	ldr	r3, [r7, #4]
 8015276:	681b      	ldr	r3, [r3, #0]
 8015278:	4a1e      	ldr	r2, [pc, #120]	; (80152f4 <HAL_TIM_IC_Start+0x1a0>)
 801527a:	4293      	cmp	r3, r2
 801527c:	d018      	beq.n	80152b0 <HAL_TIM_IC_Start+0x15c>
 801527e:	687b      	ldr	r3, [r7, #4]
 8015280:	681b      	ldr	r3, [r3, #0]
 8015282:	4a1d      	ldr	r2, [pc, #116]	; (80152f8 <HAL_TIM_IC_Start+0x1a4>)
 8015284:	4293      	cmp	r3, r2
 8015286:	d013      	beq.n	80152b0 <HAL_TIM_IC_Start+0x15c>
 8015288:	687b      	ldr	r3, [r7, #4]
 801528a:	681b      	ldr	r3, [r3, #0]
 801528c:	4a1b      	ldr	r2, [pc, #108]	; (80152fc <HAL_TIM_IC_Start+0x1a8>)
 801528e:	4293      	cmp	r3, r2
 8015290:	d00e      	beq.n	80152b0 <HAL_TIM_IC_Start+0x15c>
 8015292:	687b      	ldr	r3, [r7, #4]
 8015294:	681b      	ldr	r3, [r3, #0]
 8015296:	4a1a      	ldr	r2, [pc, #104]	; (8015300 <HAL_TIM_IC_Start+0x1ac>)
 8015298:	4293      	cmp	r3, r2
 801529a:	d009      	beq.n	80152b0 <HAL_TIM_IC_Start+0x15c>
 801529c:	687b      	ldr	r3, [r7, #4]
 801529e:	681b      	ldr	r3, [r3, #0]
 80152a0:	4a18      	ldr	r2, [pc, #96]	; (8015304 <HAL_TIM_IC_Start+0x1b0>)
 80152a2:	4293      	cmp	r3, r2
 80152a4:	d004      	beq.n	80152b0 <HAL_TIM_IC_Start+0x15c>
 80152a6:	687b      	ldr	r3, [r7, #4]
 80152a8:	681b      	ldr	r3, [r3, #0]
 80152aa:	4a17      	ldr	r2, [pc, #92]	; (8015308 <HAL_TIM_IC_Start+0x1b4>)
 80152ac:	4293      	cmp	r3, r2
 80152ae:	d111      	bne.n	80152d4 <HAL_TIM_IC_Start+0x180>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80152b0:	687b      	ldr	r3, [r7, #4]
 80152b2:	681b      	ldr	r3, [r3, #0]
 80152b4:	689b      	ldr	r3, [r3, #8]
 80152b6:	f003 0307 	and.w	r3, r3, #7
 80152ba:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80152bc:	68bb      	ldr	r3, [r7, #8]
 80152be:	2b06      	cmp	r3, #6
 80152c0:	d010      	beq.n	80152e4 <HAL_TIM_IC_Start+0x190>
    {
      __HAL_TIM_ENABLE(htim);
 80152c2:	687b      	ldr	r3, [r7, #4]
 80152c4:	681b      	ldr	r3, [r3, #0]
 80152c6:	681a      	ldr	r2, [r3, #0]
 80152c8:	687b      	ldr	r3, [r7, #4]
 80152ca:	681b      	ldr	r3, [r3, #0]
 80152cc:	f042 0201 	orr.w	r2, r2, #1
 80152d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80152d2:	e007      	b.n	80152e4 <HAL_TIM_IC_Start+0x190>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80152d4:	687b      	ldr	r3, [r7, #4]
 80152d6:	681b      	ldr	r3, [r3, #0]
 80152d8:	681a      	ldr	r2, [r3, #0]
 80152da:	687b      	ldr	r3, [r7, #4]
 80152dc:	681b      	ldr	r3, [r3, #0]
 80152de:	f042 0201 	orr.w	r2, r2, #1
 80152e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80152e4:	2300      	movs	r3, #0
}
 80152e6:	4618      	mov	r0, r3
 80152e8:	3710      	adds	r7, #16
 80152ea:	46bd      	mov	sp, r7
 80152ec:	bd80      	pop	{r7, pc}
 80152ee:	bf00      	nop
 80152f0:	40010000 	.word	0x40010000
 80152f4:	40000400 	.word	0x40000400
 80152f8:	40000800 	.word	0x40000800
 80152fc:	40000c00 	.word	0x40000c00
 8015300:	40010400 	.word	0x40010400
 8015304:	40014000 	.word	0x40014000
 8015308:	40001800 	.word	0x40001800

0801530c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801530c:	b580      	push	{r7, lr}
 801530e:	b084      	sub	sp, #16
 8015310:	af00      	add	r7, sp, #0
 8015312:	6078      	str	r0, [r7, #4]
 8015314:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8015316:	2300      	movs	r3, #0
 8015318:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 801531a:	683b      	ldr	r3, [r7, #0]
 801531c:	2b00      	cmp	r3, #0
 801531e:	d104      	bne.n	801532a <HAL_TIM_IC_Start_IT+0x1e>
 8015320:	687b      	ldr	r3, [r7, #4]
 8015322:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8015326:	b2db      	uxtb	r3, r3
 8015328:	e013      	b.n	8015352 <HAL_TIM_IC_Start_IT+0x46>
 801532a:	683b      	ldr	r3, [r7, #0]
 801532c:	2b04      	cmp	r3, #4
 801532e:	d104      	bne.n	801533a <HAL_TIM_IC_Start_IT+0x2e>
 8015330:	687b      	ldr	r3, [r7, #4]
 8015332:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8015336:	b2db      	uxtb	r3, r3
 8015338:	e00b      	b.n	8015352 <HAL_TIM_IC_Start_IT+0x46>
 801533a:	683b      	ldr	r3, [r7, #0]
 801533c:	2b08      	cmp	r3, #8
 801533e:	d104      	bne.n	801534a <HAL_TIM_IC_Start_IT+0x3e>
 8015340:	687b      	ldr	r3, [r7, #4]
 8015342:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8015346:	b2db      	uxtb	r3, r3
 8015348:	e003      	b.n	8015352 <HAL_TIM_IC_Start_IT+0x46>
 801534a:	687b      	ldr	r3, [r7, #4]
 801534c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8015350:	b2db      	uxtb	r3, r3
 8015352:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8015354:	683b      	ldr	r3, [r7, #0]
 8015356:	2b00      	cmp	r3, #0
 8015358:	d104      	bne.n	8015364 <HAL_TIM_IC_Start_IT+0x58>
 801535a:	687b      	ldr	r3, [r7, #4]
 801535c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015360:	b2db      	uxtb	r3, r3
 8015362:	e013      	b.n	801538c <HAL_TIM_IC_Start_IT+0x80>
 8015364:	683b      	ldr	r3, [r7, #0]
 8015366:	2b04      	cmp	r3, #4
 8015368:	d104      	bne.n	8015374 <HAL_TIM_IC_Start_IT+0x68>
 801536a:	687b      	ldr	r3, [r7, #4]
 801536c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8015370:	b2db      	uxtb	r3, r3
 8015372:	e00b      	b.n	801538c <HAL_TIM_IC_Start_IT+0x80>
 8015374:	683b      	ldr	r3, [r7, #0]
 8015376:	2b08      	cmp	r3, #8
 8015378:	d104      	bne.n	8015384 <HAL_TIM_IC_Start_IT+0x78>
 801537a:	687b      	ldr	r3, [r7, #4]
 801537c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015380:	b2db      	uxtb	r3, r3
 8015382:	e003      	b.n	801538c <HAL_TIM_IC_Start_IT+0x80>
 8015384:	687b      	ldr	r3, [r7, #4]
 8015386:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801538a:	b2db      	uxtb	r3, r3
 801538c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 801538e:	7bbb      	ldrb	r3, [r7, #14]
 8015390:	2b01      	cmp	r3, #1
 8015392:	d102      	bne.n	801539a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8015394:	7b7b      	ldrb	r3, [r7, #13]
 8015396:	2b01      	cmp	r3, #1
 8015398:	d001      	beq.n	801539e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 801539a:	2301      	movs	r3, #1
 801539c:	e0cc      	b.n	8015538 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801539e:	683b      	ldr	r3, [r7, #0]
 80153a0:	2b00      	cmp	r3, #0
 80153a2:	d104      	bne.n	80153ae <HAL_TIM_IC_Start_IT+0xa2>
 80153a4:	687b      	ldr	r3, [r7, #4]
 80153a6:	2202      	movs	r2, #2
 80153a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80153ac:	e013      	b.n	80153d6 <HAL_TIM_IC_Start_IT+0xca>
 80153ae:	683b      	ldr	r3, [r7, #0]
 80153b0:	2b04      	cmp	r3, #4
 80153b2:	d104      	bne.n	80153be <HAL_TIM_IC_Start_IT+0xb2>
 80153b4:	687b      	ldr	r3, [r7, #4]
 80153b6:	2202      	movs	r2, #2
 80153b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80153bc:	e00b      	b.n	80153d6 <HAL_TIM_IC_Start_IT+0xca>
 80153be:	683b      	ldr	r3, [r7, #0]
 80153c0:	2b08      	cmp	r3, #8
 80153c2:	d104      	bne.n	80153ce <HAL_TIM_IC_Start_IT+0xc2>
 80153c4:	687b      	ldr	r3, [r7, #4]
 80153c6:	2202      	movs	r2, #2
 80153c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80153cc:	e003      	b.n	80153d6 <HAL_TIM_IC_Start_IT+0xca>
 80153ce:	687b      	ldr	r3, [r7, #4]
 80153d0:	2202      	movs	r2, #2
 80153d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80153d6:	683b      	ldr	r3, [r7, #0]
 80153d8:	2b00      	cmp	r3, #0
 80153da:	d104      	bne.n	80153e6 <HAL_TIM_IC_Start_IT+0xda>
 80153dc:	687b      	ldr	r3, [r7, #4]
 80153de:	2202      	movs	r2, #2
 80153e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80153e4:	e013      	b.n	801540e <HAL_TIM_IC_Start_IT+0x102>
 80153e6:	683b      	ldr	r3, [r7, #0]
 80153e8:	2b04      	cmp	r3, #4
 80153ea:	d104      	bne.n	80153f6 <HAL_TIM_IC_Start_IT+0xea>
 80153ec:	687b      	ldr	r3, [r7, #4]
 80153ee:	2202      	movs	r2, #2
 80153f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80153f4:	e00b      	b.n	801540e <HAL_TIM_IC_Start_IT+0x102>
 80153f6:	683b      	ldr	r3, [r7, #0]
 80153f8:	2b08      	cmp	r3, #8
 80153fa:	d104      	bne.n	8015406 <HAL_TIM_IC_Start_IT+0xfa>
 80153fc:	687b      	ldr	r3, [r7, #4]
 80153fe:	2202      	movs	r2, #2
 8015400:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015404:	e003      	b.n	801540e <HAL_TIM_IC_Start_IT+0x102>
 8015406:	687b      	ldr	r3, [r7, #4]
 8015408:	2202      	movs	r2, #2
 801540a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801540e:	683b      	ldr	r3, [r7, #0]
 8015410:	2b0c      	cmp	r3, #12
 8015412:	d841      	bhi.n	8015498 <HAL_TIM_IC_Start_IT+0x18c>
 8015414:	a201      	add	r2, pc, #4	; (adr r2, 801541c <HAL_TIM_IC_Start_IT+0x110>)
 8015416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801541a:	bf00      	nop
 801541c:	08015451 	.word	0x08015451
 8015420:	08015499 	.word	0x08015499
 8015424:	08015499 	.word	0x08015499
 8015428:	08015499 	.word	0x08015499
 801542c:	08015463 	.word	0x08015463
 8015430:	08015499 	.word	0x08015499
 8015434:	08015499 	.word	0x08015499
 8015438:	08015499 	.word	0x08015499
 801543c:	08015475 	.word	0x08015475
 8015440:	08015499 	.word	0x08015499
 8015444:	08015499 	.word	0x08015499
 8015448:	08015499 	.word	0x08015499
 801544c:	08015487 	.word	0x08015487
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8015450:	687b      	ldr	r3, [r7, #4]
 8015452:	681b      	ldr	r3, [r3, #0]
 8015454:	68da      	ldr	r2, [r3, #12]
 8015456:	687b      	ldr	r3, [r7, #4]
 8015458:	681b      	ldr	r3, [r3, #0]
 801545a:	f042 0202 	orr.w	r2, r2, #2
 801545e:	60da      	str	r2, [r3, #12]
      break;
 8015460:	e01d      	b.n	801549e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8015462:	687b      	ldr	r3, [r7, #4]
 8015464:	681b      	ldr	r3, [r3, #0]
 8015466:	68da      	ldr	r2, [r3, #12]
 8015468:	687b      	ldr	r3, [r7, #4]
 801546a:	681b      	ldr	r3, [r3, #0]
 801546c:	f042 0204 	orr.w	r2, r2, #4
 8015470:	60da      	str	r2, [r3, #12]
      break;
 8015472:	e014      	b.n	801549e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8015474:	687b      	ldr	r3, [r7, #4]
 8015476:	681b      	ldr	r3, [r3, #0]
 8015478:	68da      	ldr	r2, [r3, #12]
 801547a:	687b      	ldr	r3, [r7, #4]
 801547c:	681b      	ldr	r3, [r3, #0]
 801547e:	f042 0208 	orr.w	r2, r2, #8
 8015482:	60da      	str	r2, [r3, #12]
      break;
 8015484:	e00b      	b.n	801549e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8015486:	687b      	ldr	r3, [r7, #4]
 8015488:	681b      	ldr	r3, [r3, #0]
 801548a:	68da      	ldr	r2, [r3, #12]
 801548c:	687b      	ldr	r3, [r7, #4]
 801548e:	681b      	ldr	r3, [r3, #0]
 8015490:	f042 0210 	orr.w	r2, r2, #16
 8015494:	60da      	str	r2, [r3, #12]
      break;
 8015496:	e002      	b.n	801549e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8015498:	2301      	movs	r3, #1
 801549a:	73fb      	strb	r3, [r7, #15]
      break;
 801549c:	bf00      	nop
  }

  if (status == HAL_OK)
 801549e:	7bfb      	ldrb	r3, [r7, #15]
 80154a0:	2b00      	cmp	r3, #0
 80154a2:	d148      	bne.n	8015536 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80154a4:	687b      	ldr	r3, [r7, #4]
 80154a6:	681b      	ldr	r3, [r3, #0]
 80154a8:	2201      	movs	r2, #1
 80154aa:	6839      	ldr	r1, [r7, #0]
 80154ac:	4618      	mov	r0, r3
 80154ae:	f001 f8cd 	bl	801664c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80154b2:	687b      	ldr	r3, [r7, #4]
 80154b4:	681b      	ldr	r3, [r3, #0]
 80154b6:	4a22      	ldr	r2, [pc, #136]	; (8015540 <HAL_TIM_IC_Start_IT+0x234>)
 80154b8:	4293      	cmp	r3, r2
 80154ba:	d022      	beq.n	8015502 <HAL_TIM_IC_Start_IT+0x1f6>
 80154bc:	687b      	ldr	r3, [r7, #4]
 80154be:	681b      	ldr	r3, [r3, #0]
 80154c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80154c4:	d01d      	beq.n	8015502 <HAL_TIM_IC_Start_IT+0x1f6>
 80154c6:	687b      	ldr	r3, [r7, #4]
 80154c8:	681b      	ldr	r3, [r3, #0]
 80154ca:	4a1e      	ldr	r2, [pc, #120]	; (8015544 <HAL_TIM_IC_Start_IT+0x238>)
 80154cc:	4293      	cmp	r3, r2
 80154ce:	d018      	beq.n	8015502 <HAL_TIM_IC_Start_IT+0x1f6>
 80154d0:	687b      	ldr	r3, [r7, #4]
 80154d2:	681b      	ldr	r3, [r3, #0]
 80154d4:	4a1c      	ldr	r2, [pc, #112]	; (8015548 <HAL_TIM_IC_Start_IT+0x23c>)
 80154d6:	4293      	cmp	r3, r2
 80154d8:	d013      	beq.n	8015502 <HAL_TIM_IC_Start_IT+0x1f6>
 80154da:	687b      	ldr	r3, [r7, #4]
 80154dc:	681b      	ldr	r3, [r3, #0]
 80154de:	4a1b      	ldr	r2, [pc, #108]	; (801554c <HAL_TIM_IC_Start_IT+0x240>)
 80154e0:	4293      	cmp	r3, r2
 80154e2:	d00e      	beq.n	8015502 <HAL_TIM_IC_Start_IT+0x1f6>
 80154e4:	687b      	ldr	r3, [r7, #4]
 80154e6:	681b      	ldr	r3, [r3, #0]
 80154e8:	4a19      	ldr	r2, [pc, #100]	; (8015550 <HAL_TIM_IC_Start_IT+0x244>)
 80154ea:	4293      	cmp	r3, r2
 80154ec:	d009      	beq.n	8015502 <HAL_TIM_IC_Start_IT+0x1f6>
 80154ee:	687b      	ldr	r3, [r7, #4]
 80154f0:	681b      	ldr	r3, [r3, #0]
 80154f2:	4a18      	ldr	r2, [pc, #96]	; (8015554 <HAL_TIM_IC_Start_IT+0x248>)
 80154f4:	4293      	cmp	r3, r2
 80154f6:	d004      	beq.n	8015502 <HAL_TIM_IC_Start_IT+0x1f6>
 80154f8:	687b      	ldr	r3, [r7, #4]
 80154fa:	681b      	ldr	r3, [r3, #0]
 80154fc:	4a16      	ldr	r2, [pc, #88]	; (8015558 <HAL_TIM_IC_Start_IT+0x24c>)
 80154fe:	4293      	cmp	r3, r2
 8015500:	d111      	bne.n	8015526 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8015502:	687b      	ldr	r3, [r7, #4]
 8015504:	681b      	ldr	r3, [r3, #0]
 8015506:	689b      	ldr	r3, [r3, #8]
 8015508:	f003 0307 	and.w	r3, r3, #7
 801550c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801550e:	68bb      	ldr	r3, [r7, #8]
 8015510:	2b06      	cmp	r3, #6
 8015512:	d010      	beq.n	8015536 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8015514:	687b      	ldr	r3, [r7, #4]
 8015516:	681b      	ldr	r3, [r3, #0]
 8015518:	681a      	ldr	r2, [r3, #0]
 801551a:	687b      	ldr	r3, [r7, #4]
 801551c:	681b      	ldr	r3, [r3, #0]
 801551e:	f042 0201 	orr.w	r2, r2, #1
 8015522:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015524:	e007      	b.n	8015536 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8015526:	687b      	ldr	r3, [r7, #4]
 8015528:	681b      	ldr	r3, [r3, #0]
 801552a:	681a      	ldr	r2, [r3, #0]
 801552c:	687b      	ldr	r3, [r7, #4]
 801552e:	681b      	ldr	r3, [r3, #0]
 8015530:	f042 0201 	orr.w	r2, r2, #1
 8015534:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8015536:	7bfb      	ldrb	r3, [r7, #15]
}
 8015538:	4618      	mov	r0, r3
 801553a:	3710      	adds	r7, #16
 801553c:	46bd      	mov	sp, r7
 801553e:	bd80      	pop	{r7, pc}
 8015540:	40010000 	.word	0x40010000
 8015544:	40000400 	.word	0x40000400
 8015548:	40000800 	.word	0x40000800
 801554c:	40000c00 	.word	0x40000c00
 8015550:	40010400 	.word	0x40010400
 8015554:	40014000 	.word	0x40014000
 8015558:	40001800 	.word	0x40001800

0801555c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801555c:	b580      	push	{r7, lr}
 801555e:	b082      	sub	sp, #8
 8015560:	af00      	add	r7, sp, #0
 8015562:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8015564:	687b      	ldr	r3, [r7, #4]
 8015566:	681b      	ldr	r3, [r3, #0]
 8015568:	691b      	ldr	r3, [r3, #16]
 801556a:	f003 0302 	and.w	r3, r3, #2
 801556e:	2b02      	cmp	r3, #2
 8015570:	d122      	bne.n	80155b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8015572:	687b      	ldr	r3, [r7, #4]
 8015574:	681b      	ldr	r3, [r3, #0]
 8015576:	68db      	ldr	r3, [r3, #12]
 8015578:	f003 0302 	and.w	r3, r3, #2
 801557c:	2b02      	cmp	r3, #2
 801557e:	d11b      	bne.n	80155b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8015580:	687b      	ldr	r3, [r7, #4]
 8015582:	681b      	ldr	r3, [r3, #0]
 8015584:	f06f 0202 	mvn.w	r2, #2
 8015588:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801558a:	687b      	ldr	r3, [r7, #4]
 801558c:	2201      	movs	r2, #1
 801558e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8015590:	687b      	ldr	r3, [r7, #4]
 8015592:	681b      	ldr	r3, [r3, #0]
 8015594:	699b      	ldr	r3, [r3, #24]
 8015596:	f003 0303 	and.w	r3, r3, #3
 801559a:	2b00      	cmp	r3, #0
 801559c:	d003      	beq.n	80155a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801559e:	6878      	ldr	r0, [r7, #4]
 80155a0:	f7ec fb2c 	bl	8001bfc <HAL_TIM_IC_CaptureCallback>
 80155a4:	e005      	b.n	80155b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80155a6:	6878      	ldr	r0, [r7, #4]
 80155a8:	f000 fb8c 	bl	8015cc4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80155ac:	6878      	ldr	r0, [r7, #4]
 80155ae:	f000 fb93 	bl	8015cd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80155b2:	687b      	ldr	r3, [r7, #4]
 80155b4:	2200      	movs	r2, #0
 80155b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80155b8:	687b      	ldr	r3, [r7, #4]
 80155ba:	681b      	ldr	r3, [r3, #0]
 80155bc:	691b      	ldr	r3, [r3, #16]
 80155be:	f003 0304 	and.w	r3, r3, #4
 80155c2:	2b04      	cmp	r3, #4
 80155c4:	d122      	bne.n	801560c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80155c6:	687b      	ldr	r3, [r7, #4]
 80155c8:	681b      	ldr	r3, [r3, #0]
 80155ca:	68db      	ldr	r3, [r3, #12]
 80155cc:	f003 0304 	and.w	r3, r3, #4
 80155d0:	2b04      	cmp	r3, #4
 80155d2:	d11b      	bne.n	801560c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80155d4:	687b      	ldr	r3, [r7, #4]
 80155d6:	681b      	ldr	r3, [r3, #0]
 80155d8:	f06f 0204 	mvn.w	r2, #4
 80155dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80155de:	687b      	ldr	r3, [r7, #4]
 80155e0:	2202      	movs	r2, #2
 80155e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80155e4:	687b      	ldr	r3, [r7, #4]
 80155e6:	681b      	ldr	r3, [r3, #0]
 80155e8:	699b      	ldr	r3, [r3, #24]
 80155ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80155ee:	2b00      	cmp	r3, #0
 80155f0:	d003      	beq.n	80155fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80155f2:	6878      	ldr	r0, [r7, #4]
 80155f4:	f7ec fb02 	bl	8001bfc <HAL_TIM_IC_CaptureCallback>
 80155f8:	e005      	b.n	8015606 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80155fa:	6878      	ldr	r0, [r7, #4]
 80155fc:	f000 fb62 	bl	8015cc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8015600:	6878      	ldr	r0, [r7, #4]
 8015602:	f000 fb69 	bl	8015cd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8015606:	687b      	ldr	r3, [r7, #4]
 8015608:	2200      	movs	r2, #0
 801560a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801560c:	687b      	ldr	r3, [r7, #4]
 801560e:	681b      	ldr	r3, [r3, #0]
 8015610:	691b      	ldr	r3, [r3, #16]
 8015612:	f003 0308 	and.w	r3, r3, #8
 8015616:	2b08      	cmp	r3, #8
 8015618:	d122      	bne.n	8015660 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801561a:	687b      	ldr	r3, [r7, #4]
 801561c:	681b      	ldr	r3, [r3, #0]
 801561e:	68db      	ldr	r3, [r3, #12]
 8015620:	f003 0308 	and.w	r3, r3, #8
 8015624:	2b08      	cmp	r3, #8
 8015626:	d11b      	bne.n	8015660 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8015628:	687b      	ldr	r3, [r7, #4]
 801562a:	681b      	ldr	r3, [r3, #0]
 801562c:	f06f 0208 	mvn.w	r2, #8
 8015630:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8015632:	687b      	ldr	r3, [r7, #4]
 8015634:	2204      	movs	r2, #4
 8015636:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8015638:	687b      	ldr	r3, [r7, #4]
 801563a:	681b      	ldr	r3, [r3, #0]
 801563c:	69db      	ldr	r3, [r3, #28]
 801563e:	f003 0303 	and.w	r3, r3, #3
 8015642:	2b00      	cmp	r3, #0
 8015644:	d003      	beq.n	801564e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8015646:	6878      	ldr	r0, [r7, #4]
 8015648:	f7ec fad8 	bl	8001bfc <HAL_TIM_IC_CaptureCallback>
 801564c:	e005      	b.n	801565a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801564e:	6878      	ldr	r0, [r7, #4]
 8015650:	f000 fb38 	bl	8015cc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8015654:	6878      	ldr	r0, [r7, #4]
 8015656:	f000 fb3f 	bl	8015cd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801565a:	687b      	ldr	r3, [r7, #4]
 801565c:	2200      	movs	r2, #0
 801565e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8015660:	687b      	ldr	r3, [r7, #4]
 8015662:	681b      	ldr	r3, [r3, #0]
 8015664:	691b      	ldr	r3, [r3, #16]
 8015666:	f003 0310 	and.w	r3, r3, #16
 801566a:	2b10      	cmp	r3, #16
 801566c:	d122      	bne.n	80156b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801566e:	687b      	ldr	r3, [r7, #4]
 8015670:	681b      	ldr	r3, [r3, #0]
 8015672:	68db      	ldr	r3, [r3, #12]
 8015674:	f003 0310 	and.w	r3, r3, #16
 8015678:	2b10      	cmp	r3, #16
 801567a:	d11b      	bne.n	80156b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801567c:	687b      	ldr	r3, [r7, #4]
 801567e:	681b      	ldr	r3, [r3, #0]
 8015680:	f06f 0210 	mvn.w	r2, #16
 8015684:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8015686:	687b      	ldr	r3, [r7, #4]
 8015688:	2208      	movs	r2, #8
 801568a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801568c:	687b      	ldr	r3, [r7, #4]
 801568e:	681b      	ldr	r3, [r3, #0]
 8015690:	69db      	ldr	r3, [r3, #28]
 8015692:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8015696:	2b00      	cmp	r3, #0
 8015698:	d003      	beq.n	80156a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801569a:	6878      	ldr	r0, [r7, #4]
 801569c:	f7ec faae 	bl	8001bfc <HAL_TIM_IC_CaptureCallback>
 80156a0:	e005      	b.n	80156ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80156a2:	6878      	ldr	r0, [r7, #4]
 80156a4:	f000 fb0e 	bl	8015cc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80156a8:	6878      	ldr	r0, [r7, #4]
 80156aa:	f000 fb15 	bl	8015cd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80156ae:	687b      	ldr	r3, [r7, #4]
 80156b0:	2200      	movs	r2, #0
 80156b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80156b4:	687b      	ldr	r3, [r7, #4]
 80156b6:	681b      	ldr	r3, [r3, #0]
 80156b8:	691b      	ldr	r3, [r3, #16]
 80156ba:	f003 0301 	and.w	r3, r3, #1
 80156be:	2b01      	cmp	r3, #1
 80156c0:	d10e      	bne.n	80156e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80156c2:	687b      	ldr	r3, [r7, #4]
 80156c4:	681b      	ldr	r3, [r3, #0]
 80156c6:	68db      	ldr	r3, [r3, #12]
 80156c8:	f003 0301 	and.w	r3, r3, #1
 80156cc:	2b01      	cmp	r3, #1
 80156ce:	d107      	bne.n	80156e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80156d0:	687b      	ldr	r3, [r7, #4]
 80156d2:	681b      	ldr	r3, [r3, #0]
 80156d4:	f06f 0201 	mvn.w	r2, #1
 80156d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80156da:	6878      	ldr	r0, [r7, #4]
 80156dc:	f7ee fd16 	bl	800410c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80156e0:	687b      	ldr	r3, [r7, #4]
 80156e2:	681b      	ldr	r3, [r3, #0]
 80156e4:	691b      	ldr	r3, [r3, #16]
 80156e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80156ea:	2b80      	cmp	r3, #128	; 0x80
 80156ec:	d10e      	bne.n	801570c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80156ee:	687b      	ldr	r3, [r7, #4]
 80156f0:	681b      	ldr	r3, [r3, #0]
 80156f2:	68db      	ldr	r3, [r3, #12]
 80156f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80156f8:	2b80      	cmp	r3, #128	; 0x80
 80156fa:	d107      	bne.n	801570c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80156fc:	687b      	ldr	r3, [r7, #4]
 80156fe:	681b      	ldr	r3, [r3, #0]
 8015700:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8015704:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8015706:	6878      	ldr	r0, [r7, #4]
 8015708:	f001 f89e 	bl	8016848 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801570c:	687b      	ldr	r3, [r7, #4]
 801570e:	681b      	ldr	r3, [r3, #0]
 8015710:	691b      	ldr	r3, [r3, #16]
 8015712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015716:	2b40      	cmp	r3, #64	; 0x40
 8015718:	d10e      	bne.n	8015738 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801571a:	687b      	ldr	r3, [r7, #4]
 801571c:	681b      	ldr	r3, [r3, #0]
 801571e:	68db      	ldr	r3, [r3, #12]
 8015720:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015724:	2b40      	cmp	r3, #64	; 0x40
 8015726:	d107      	bne.n	8015738 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8015728:	687b      	ldr	r3, [r7, #4]
 801572a:	681b      	ldr	r3, [r3, #0]
 801572c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8015730:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8015732:	6878      	ldr	r0, [r7, #4]
 8015734:	f000 fada 	bl	8015cec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8015738:	687b      	ldr	r3, [r7, #4]
 801573a:	681b      	ldr	r3, [r3, #0]
 801573c:	691b      	ldr	r3, [r3, #16]
 801573e:	f003 0320 	and.w	r3, r3, #32
 8015742:	2b20      	cmp	r3, #32
 8015744:	d10e      	bne.n	8015764 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8015746:	687b      	ldr	r3, [r7, #4]
 8015748:	681b      	ldr	r3, [r3, #0]
 801574a:	68db      	ldr	r3, [r3, #12]
 801574c:	f003 0320 	and.w	r3, r3, #32
 8015750:	2b20      	cmp	r3, #32
 8015752:	d107      	bne.n	8015764 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8015754:	687b      	ldr	r3, [r7, #4]
 8015756:	681b      	ldr	r3, [r3, #0]
 8015758:	f06f 0220 	mvn.w	r2, #32
 801575c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801575e:	6878      	ldr	r0, [r7, #4]
 8015760:	f001 f868 	bl	8016834 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8015764:	bf00      	nop
 8015766:	3708      	adds	r7, #8
 8015768:	46bd      	mov	sp, r7
 801576a:	bd80      	pop	{r7, pc}

0801576c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 801576c:	b580      	push	{r7, lr}
 801576e:	b086      	sub	sp, #24
 8015770:	af00      	add	r7, sp, #0
 8015772:	60f8      	str	r0, [r7, #12]
 8015774:	60b9      	str	r1, [r7, #8]
 8015776:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8015778:	2300      	movs	r3, #0
 801577a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 801577c:	68fb      	ldr	r3, [r7, #12]
 801577e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015782:	2b01      	cmp	r3, #1
 8015784:	d101      	bne.n	801578a <HAL_TIM_IC_ConfigChannel+0x1e>
 8015786:	2302      	movs	r3, #2
 8015788:	e088      	b.n	801589c <HAL_TIM_IC_ConfigChannel+0x130>
 801578a:	68fb      	ldr	r3, [r7, #12]
 801578c:	2201      	movs	r2, #1
 801578e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8015792:	687b      	ldr	r3, [r7, #4]
 8015794:	2b00      	cmp	r3, #0
 8015796:	d11b      	bne.n	80157d0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8015798:	68fb      	ldr	r3, [r7, #12]
 801579a:	6818      	ldr	r0, [r3, #0]
 801579c:	68bb      	ldr	r3, [r7, #8]
 801579e:	6819      	ldr	r1, [r3, #0]
 80157a0:	68bb      	ldr	r3, [r7, #8]
 80157a2:	685a      	ldr	r2, [r3, #4]
 80157a4:	68bb      	ldr	r3, [r7, #8]
 80157a6:	68db      	ldr	r3, [r3, #12]
 80157a8:	f000 fd8c 	bl	80162c4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80157ac:	68fb      	ldr	r3, [r7, #12]
 80157ae:	681b      	ldr	r3, [r3, #0]
 80157b0:	699a      	ldr	r2, [r3, #24]
 80157b2:	68fb      	ldr	r3, [r7, #12]
 80157b4:	681b      	ldr	r3, [r3, #0]
 80157b6:	f022 020c 	bic.w	r2, r2, #12
 80157ba:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80157bc:	68fb      	ldr	r3, [r7, #12]
 80157be:	681b      	ldr	r3, [r3, #0]
 80157c0:	6999      	ldr	r1, [r3, #24]
 80157c2:	68bb      	ldr	r3, [r7, #8]
 80157c4:	689a      	ldr	r2, [r3, #8]
 80157c6:	68fb      	ldr	r3, [r7, #12]
 80157c8:	681b      	ldr	r3, [r3, #0]
 80157ca:	430a      	orrs	r2, r1
 80157cc:	619a      	str	r2, [r3, #24]
 80157ce:	e060      	b.n	8015892 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80157d0:	687b      	ldr	r3, [r7, #4]
 80157d2:	2b04      	cmp	r3, #4
 80157d4:	d11c      	bne.n	8015810 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80157d6:	68fb      	ldr	r3, [r7, #12]
 80157d8:	6818      	ldr	r0, [r3, #0]
 80157da:	68bb      	ldr	r3, [r7, #8]
 80157dc:	6819      	ldr	r1, [r3, #0]
 80157de:	68bb      	ldr	r3, [r7, #8]
 80157e0:	685a      	ldr	r2, [r3, #4]
 80157e2:	68bb      	ldr	r3, [r7, #8]
 80157e4:	68db      	ldr	r3, [r3, #12]
 80157e6:	f000 fe10 	bl	801640a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80157ea:	68fb      	ldr	r3, [r7, #12]
 80157ec:	681b      	ldr	r3, [r3, #0]
 80157ee:	699a      	ldr	r2, [r3, #24]
 80157f0:	68fb      	ldr	r3, [r7, #12]
 80157f2:	681b      	ldr	r3, [r3, #0]
 80157f4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80157f8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80157fa:	68fb      	ldr	r3, [r7, #12]
 80157fc:	681b      	ldr	r3, [r3, #0]
 80157fe:	6999      	ldr	r1, [r3, #24]
 8015800:	68bb      	ldr	r3, [r7, #8]
 8015802:	689b      	ldr	r3, [r3, #8]
 8015804:	021a      	lsls	r2, r3, #8
 8015806:	68fb      	ldr	r3, [r7, #12]
 8015808:	681b      	ldr	r3, [r3, #0]
 801580a:	430a      	orrs	r2, r1
 801580c:	619a      	str	r2, [r3, #24]
 801580e:	e040      	b.n	8015892 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8015810:	687b      	ldr	r3, [r7, #4]
 8015812:	2b08      	cmp	r3, #8
 8015814:	d11b      	bne.n	801584e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8015816:	68fb      	ldr	r3, [r7, #12]
 8015818:	6818      	ldr	r0, [r3, #0]
 801581a:	68bb      	ldr	r3, [r7, #8]
 801581c:	6819      	ldr	r1, [r3, #0]
 801581e:	68bb      	ldr	r3, [r7, #8]
 8015820:	685a      	ldr	r2, [r3, #4]
 8015822:	68bb      	ldr	r3, [r7, #8]
 8015824:	68db      	ldr	r3, [r3, #12]
 8015826:	f000 fe5d 	bl	80164e4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 801582a:	68fb      	ldr	r3, [r7, #12]
 801582c:	681b      	ldr	r3, [r3, #0]
 801582e:	69da      	ldr	r2, [r3, #28]
 8015830:	68fb      	ldr	r3, [r7, #12]
 8015832:	681b      	ldr	r3, [r3, #0]
 8015834:	f022 020c 	bic.w	r2, r2, #12
 8015838:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 801583a:	68fb      	ldr	r3, [r7, #12]
 801583c:	681b      	ldr	r3, [r3, #0]
 801583e:	69d9      	ldr	r1, [r3, #28]
 8015840:	68bb      	ldr	r3, [r7, #8]
 8015842:	689a      	ldr	r2, [r3, #8]
 8015844:	68fb      	ldr	r3, [r7, #12]
 8015846:	681b      	ldr	r3, [r3, #0]
 8015848:	430a      	orrs	r2, r1
 801584a:	61da      	str	r2, [r3, #28]
 801584c:	e021      	b.n	8015892 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 801584e:	687b      	ldr	r3, [r7, #4]
 8015850:	2b0c      	cmp	r3, #12
 8015852:	d11c      	bne.n	801588e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8015854:	68fb      	ldr	r3, [r7, #12]
 8015856:	6818      	ldr	r0, [r3, #0]
 8015858:	68bb      	ldr	r3, [r7, #8]
 801585a:	6819      	ldr	r1, [r3, #0]
 801585c:	68bb      	ldr	r3, [r7, #8]
 801585e:	685a      	ldr	r2, [r3, #4]
 8015860:	68bb      	ldr	r3, [r7, #8]
 8015862:	68db      	ldr	r3, [r3, #12]
 8015864:	f000 fe7a 	bl	801655c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8015868:	68fb      	ldr	r3, [r7, #12]
 801586a:	681b      	ldr	r3, [r3, #0]
 801586c:	69da      	ldr	r2, [r3, #28]
 801586e:	68fb      	ldr	r3, [r7, #12]
 8015870:	681b      	ldr	r3, [r3, #0]
 8015872:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8015876:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8015878:	68fb      	ldr	r3, [r7, #12]
 801587a:	681b      	ldr	r3, [r3, #0]
 801587c:	69d9      	ldr	r1, [r3, #28]
 801587e:	68bb      	ldr	r3, [r7, #8]
 8015880:	689b      	ldr	r3, [r3, #8]
 8015882:	021a      	lsls	r2, r3, #8
 8015884:	68fb      	ldr	r3, [r7, #12]
 8015886:	681b      	ldr	r3, [r3, #0]
 8015888:	430a      	orrs	r2, r1
 801588a:	61da      	str	r2, [r3, #28]
 801588c:	e001      	b.n	8015892 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 801588e:	2301      	movs	r3, #1
 8015890:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8015892:	68fb      	ldr	r3, [r7, #12]
 8015894:	2200      	movs	r2, #0
 8015896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801589a:	7dfb      	ldrb	r3, [r7, #23]
}
 801589c:	4618      	mov	r0, r3
 801589e:	3718      	adds	r7, #24
 80158a0:	46bd      	mov	sp, r7
 80158a2:	bd80      	pop	{r7, pc}

080158a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80158a4:	b580      	push	{r7, lr}
 80158a6:	b086      	sub	sp, #24
 80158a8:	af00      	add	r7, sp, #0
 80158aa:	60f8      	str	r0, [r7, #12]
 80158ac:	60b9      	str	r1, [r7, #8]
 80158ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80158b0:	2300      	movs	r3, #0
 80158b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80158b4:	68fb      	ldr	r3, [r7, #12]
 80158b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80158ba:	2b01      	cmp	r3, #1
 80158bc:	d101      	bne.n	80158c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80158be:	2302      	movs	r3, #2
 80158c0:	e0ae      	b.n	8015a20 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80158c2:	68fb      	ldr	r3, [r7, #12]
 80158c4:	2201      	movs	r2, #1
 80158c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80158ca:	687b      	ldr	r3, [r7, #4]
 80158cc:	2b0c      	cmp	r3, #12
 80158ce:	f200 809f 	bhi.w	8015a10 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80158d2:	a201      	add	r2, pc, #4	; (adr r2, 80158d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80158d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80158d8:	0801590d 	.word	0x0801590d
 80158dc:	08015a11 	.word	0x08015a11
 80158e0:	08015a11 	.word	0x08015a11
 80158e4:	08015a11 	.word	0x08015a11
 80158e8:	0801594d 	.word	0x0801594d
 80158ec:	08015a11 	.word	0x08015a11
 80158f0:	08015a11 	.word	0x08015a11
 80158f4:	08015a11 	.word	0x08015a11
 80158f8:	0801598f 	.word	0x0801598f
 80158fc:	08015a11 	.word	0x08015a11
 8015900:	08015a11 	.word	0x08015a11
 8015904:	08015a11 	.word	0x08015a11
 8015908:	080159cf 	.word	0x080159cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801590c:	68fb      	ldr	r3, [r7, #12]
 801590e:	681b      	ldr	r3, [r3, #0]
 8015910:	68b9      	ldr	r1, [r7, #8]
 8015912:	4618      	mov	r0, r3
 8015914:	f000 fa94 	bl	8015e40 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8015918:	68fb      	ldr	r3, [r7, #12]
 801591a:	681b      	ldr	r3, [r3, #0]
 801591c:	699a      	ldr	r2, [r3, #24]
 801591e:	68fb      	ldr	r3, [r7, #12]
 8015920:	681b      	ldr	r3, [r3, #0]
 8015922:	f042 0208 	orr.w	r2, r2, #8
 8015926:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8015928:	68fb      	ldr	r3, [r7, #12]
 801592a:	681b      	ldr	r3, [r3, #0]
 801592c:	699a      	ldr	r2, [r3, #24]
 801592e:	68fb      	ldr	r3, [r7, #12]
 8015930:	681b      	ldr	r3, [r3, #0]
 8015932:	f022 0204 	bic.w	r2, r2, #4
 8015936:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8015938:	68fb      	ldr	r3, [r7, #12]
 801593a:	681b      	ldr	r3, [r3, #0]
 801593c:	6999      	ldr	r1, [r3, #24]
 801593e:	68bb      	ldr	r3, [r7, #8]
 8015940:	691a      	ldr	r2, [r3, #16]
 8015942:	68fb      	ldr	r3, [r7, #12]
 8015944:	681b      	ldr	r3, [r3, #0]
 8015946:	430a      	orrs	r2, r1
 8015948:	619a      	str	r2, [r3, #24]
      break;
 801594a:	e064      	b.n	8015a16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801594c:	68fb      	ldr	r3, [r7, #12]
 801594e:	681b      	ldr	r3, [r3, #0]
 8015950:	68b9      	ldr	r1, [r7, #8]
 8015952:	4618      	mov	r0, r3
 8015954:	f000 fae4 	bl	8015f20 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8015958:	68fb      	ldr	r3, [r7, #12]
 801595a:	681b      	ldr	r3, [r3, #0]
 801595c:	699a      	ldr	r2, [r3, #24]
 801595e:	68fb      	ldr	r3, [r7, #12]
 8015960:	681b      	ldr	r3, [r3, #0]
 8015962:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8015966:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8015968:	68fb      	ldr	r3, [r7, #12]
 801596a:	681b      	ldr	r3, [r3, #0]
 801596c:	699a      	ldr	r2, [r3, #24]
 801596e:	68fb      	ldr	r3, [r7, #12]
 8015970:	681b      	ldr	r3, [r3, #0]
 8015972:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8015976:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8015978:	68fb      	ldr	r3, [r7, #12]
 801597a:	681b      	ldr	r3, [r3, #0]
 801597c:	6999      	ldr	r1, [r3, #24]
 801597e:	68bb      	ldr	r3, [r7, #8]
 8015980:	691b      	ldr	r3, [r3, #16]
 8015982:	021a      	lsls	r2, r3, #8
 8015984:	68fb      	ldr	r3, [r7, #12]
 8015986:	681b      	ldr	r3, [r3, #0]
 8015988:	430a      	orrs	r2, r1
 801598a:	619a      	str	r2, [r3, #24]
      break;
 801598c:	e043      	b.n	8015a16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801598e:	68fb      	ldr	r3, [r7, #12]
 8015990:	681b      	ldr	r3, [r3, #0]
 8015992:	68b9      	ldr	r1, [r7, #8]
 8015994:	4618      	mov	r0, r3
 8015996:	f000 fb39 	bl	801600c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801599a:	68fb      	ldr	r3, [r7, #12]
 801599c:	681b      	ldr	r3, [r3, #0]
 801599e:	69da      	ldr	r2, [r3, #28]
 80159a0:	68fb      	ldr	r3, [r7, #12]
 80159a2:	681b      	ldr	r3, [r3, #0]
 80159a4:	f042 0208 	orr.w	r2, r2, #8
 80159a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80159aa:	68fb      	ldr	r3, [r7, #12]
 80159ac:	681b      	ldr	r3, [r3, #0]
 80159ae:	69da      	ldr	r2, [r3, #28]
 80159b0:	68fb      	ldr	r3, [r7, #12]
 80159b2:	681b      	ldr	r3, [r3, #0]
 80159b4:	f022 0204 	bic.w	r2, r2, #4
 80159b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80159ba:	68fb      	ldr	r3, [r7, #12]
 80159bc:	681b      	ldr	r3, [r3, #0]
 80159be:	69d9      	ldr	r1, [r3, #28]
 80159c0:	68bb      	ldr	r3, [r7, #8]
 80159c2:	691a      	ldr	r2, [r3, #16]
 80159c4:	68fb      	ldr	r3, [r7, #12]
 80159c6:	681b      	ldr	r3, [r3, #0]
 80159c8:	430a      	orrs	r2, r1
 80159ca:	61da      	str	r2, [r3, #28]
      break;
 80159cc:	e023      	b.n	8015a16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80159ce:	68fb      	ldr	r3, [r7, #12]
 80159d0:	681b      	ldr	r3, [r3, #0]
 80159d2:	68b9      	ldr	r1, [r7, #8]
 80159d4:	4618      	mov	r0, r3
 80159d6:	f000 fb8d 	bl	80160f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80159da:	68fb      	ldr	r3, [r7, #12]
 80159dc:	681b      	ldr	r3, [r3, #0]
 80159de:	69da      	ldr	r2, [r3, #28]
 80159e0:	68fb      	ldr	r3, [r7, #12]
 80159e2:	681b      	ldr	r3, [r3, #0]
 80159e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80159e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80159ea:	68fb      	ldr	r3, [r7, #12]
 80159ec:	681b      	ldr	r3, [r3, #0]
 80159ee:	69da      	ldr	r2, [r3, #28]
 80159f0:	68fb      	ldr	r3, [r7, #12]
 80159f2:	681b      	ldr	r3, [r3, #0]
 80159f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80159f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80159fa:	68fb      	ldr	r3, [r7, #12]
 80159fc:	681b      	ldr	r3, [r3, #0]
 80159fe:	69d9      	ldr	r1, [r3, #28]
 8015a00:	68bb      	ldr	r3, [r7, #8]
 8015a02:	691b      	ldr	r3, [r3, #16]
 8015a04:	021a      	lsls	r2, r3, #8
 8015a06:	68fb      	ldr	r3, [r7, #12]
 8015a08:	681b      	ldr	r3, [r3, #0]
 8015a0a:	430a      	orrs	r2, r1
 8015a0c:	61da      	str	r2, [r3, #28]
      break;
 8015a0e:	e002      	b.n	8015a16 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8015a10:	2301      	movs	r3, #1
 8015a12:	75fb      	strb	r3, [r7, #23]
      break;
 8015a14:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8015a16:	68fb      	ldr	r3, [r7, #12]
 8015a18:	2200      	movs	r2, #0
 8015a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8015a1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8015a20:	4618      	mov	r0, r3
 8015a22:	3718      	adds	r7, #24
 8015a24:	46bd      	mov	sp, r7
 8015a26:	bd80      	pop	{r7, pc}

08015a28 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8015a28:	b580      	push	{r7, lr}
 8015a2a:	b084      	sub	sp, #16
 8015a2c:	af00      	add	r7, sp, #0
 8015a2e:	6078      	str	r0, [r7, #4]
 8015a30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8015a32:	2300      	movs	r3, #0
 8015a34:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8015a36:	687b      	ldr	r3, [r7, #4]
 8015a38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015a3c:	2b01      	cmp	r3, #1
 8015a3e:	d101      	bne.n	8015a44 <HAL_TIM_ConfigClockSource+0x1c>
 8015a40:	2302      	movs	r3, #2
 8015a42:	e0b4      	b.n	8015bae <HAL_TIM_ConfigClockSource+0x186>
 8015a44:	687b      	ldr	r3, [r7, #4]
 8015a46:	2201      	movs	r2, #1
 8015a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8015a4c:	687b      	ldr	r3, [r7, #4]
 8015a4e:	2202      	movs	r2, #2
 8015a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8015a54:	687b      	ldr	r3, [r7, #4]
 8015a56:	681b      	ldr	r3, [r3, #0]
 8015a58:	689b      	ldr	r3, [r3, #8]
 8015a5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8015a5c:	68bb      	ldr	r3, [r7, #8]
 8015a5e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8015a62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8015a64:	68bb      	ldr	r3, [r7, #8]
 8015a66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8015a6a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8015a6c:	687b      	ldr	r3, [r7, #4]
 8015a6e:	681b      	ldr	r3, [r3, #0]
 8015a70:	68ba      	ldr	r2, [r7, #8]
 8015a72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8015a74:	683b      	ldr	r3, [r7, #0]
 8015a76:	681b      	ldr	r3, [r3, #0]
 8015a78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8015a7c:	d03e      	beq.n	8015afc <HAL_TIM_ConfigClockSource+0xd4>
 8015a7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8015a82:	f200 8087 	bhi.w	8015b94 <HAL_TIM_ConfigClockSource+0x16c>
 8015a86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015a8a:	f000 8086 	beq.w	8015b9a <HAL_TIM_ConfigClockSource+0x172>
 8015a8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015a92:	d87f      	bhi.n	8015b94 <HAL_TIM_ConfigClockSource+0x16c>
 8015a94:	2b70      	cmp	r3, #112	; 0x70
 8015a96:	d01a      	beq.n	8015ace <HAL_TIM_ConfigClockSource+0xa6>
 8015a98:	2b70      	cmp	r3, #112	; 0x70
 8015a9a:	d87b      	bhi.n	8015b94 <HAL_TIM_ConfigClockSource+0x16c>
 8015a9c:	2b60      	cmp	r3, #96	; 0x60
 8015a9e:	d050      	beq.n	8015b42 <HAL_TIM_ConfigClockSource+0x11a>
 8015aa0:	2b60      	cmp	r3, #96	; 0x60
 8015aa2:	d877      	bhi.n	8015b94 <HAL_TIM_ConfigClockSource+0x16c>
 8015aa4:	2b50      	cmp	r3, #80	; 0x50
 8015aa6:	d03c      	beq.n	8015b22 <HAL_TIM_ConfigClockSource+0xfa>
 8015aa8:	2b50      	cmp	r3, #80	; 0x50
 8015aaa:	d873      	bhi.n	8015b94 <HAL_TIM_ConfigClockSource+0x16c>
 8015aac:	2b40      	cmp	r3, #64	; 0x40
 8015aae:	d058      	beq.n	8015b62 <HAL_TIM_ConfigClockSource+0x13a>
 8015ab0:	2b40      	cmp	r3, #64	; 0x40
 8015ab2:	d86f      	bhi.n	8015b94 <HAL_TIM_ConfigClockSource+0x16c>
 8015ab4:	2b30      	cmp	r3, #48	; 0x30
 8015ab6:	d064      	beq.n	8015b82 <HAL_TIM_ConfigClockSource+0x15a>
 8015ab8:	2b30      	cmp	r3, #48	; 0x30
 8015aba:	d86b      	bhi.n	8015b94 <HAL_TIM_ConfigClockSource+0x16c>
 8015abc:	2b20      	cmp	r3, #32
 8015abe:	d060      	beq.n	8015b82 <HAL_TIM_ConfigClockSource+0x15a>
 8015ac0:	2b20      	cmp	r3, #32
 8015ac2:	d867      	bhi.n	8015b94 <HAL_TIM_ConfigClockSource+0x16c>
 8015ac4:	2b00      	cmp	r3, #0
 8015ac6:	d05c      	beq.n	8015b82 <HAL_TIM_ConfigClockSource+0x15a>
 8015ac8:	2b10      	cmp	r3, #16
 8015aca:	d05a      	beq.n	8015b82 <HAL_TIM_ConfigClockSource+0x15a>
 8015acc:	e062      	b.n	8015b94 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8015ace:	687b      	ldr	r3, [r7, #4]
 8015ad0:	6818      	ldr	r0, [r3, #0]
 8015ad2:	683b      	ldr	r3, [r7, #0]
 8015ad4:	6899      	ldr	r1, [r3, #8]
 8015ad6:	683b      	ldr	r3, [r7, #0]
 8015ad8:	685a      	ldr	r2, [r3, #4]
 8015ada:	683b      	ldr	r3, [r7, #0]
 8015adc:	68db      	ldr	r3, [r3, #12]
 8015ade:	f000 fd95 	bl	801660c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8015ae2:	687b      	ldr	r3, [r7, #4]
 8015ae4:	681b      	ldr	r3, [r3, #0]
 8015ae6:	689b      	ldr	r3, [r3, #8]
 8015ae8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8015aea:	68bb      	ldr	r3, [r7, #8]
 8015aec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8015af0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8015af2:	687b      	ldr	r3, [r7, #4]
 8015af4:	681b      	ldr	r3, [r3, #0]
 8015af6:	68ba      	ldr	r2, [r7, #8]
 8015af8:	609a      	str	r2, [r3, #8]
      break;
 8015afa:	e04f      	b.n	8015b9c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8015afc:	687b      	ldr	r3, [r7, #4]
 8015afe:	6818      	ldr	r0, [r3, #0]
 8015b00:	683b      	ldr	r3, [r7, #0]
 8015b02:	6899      	ldr	r1, [r3, #8]
 8015b04:	683b      	ldr	r3, [r7, #0]
 8015b06:	685a      	ldr	r2, [r3, #4]
 8015b08:	683b      	ldr	r3, [r7, #0]
 8015b0a:	68db      	ldr	r3, [r3, #12]
 8015b0c:	f000 fd7e 	bl	801660c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8015b10:	687b      	ldr	r3, [r7, #4]
 8015b12:	681b      	ldr	r3, [r3, #0]
 8015b14:	689a      	ldr	r2, [r3, #8]
 8015b16:	687b      	ldr	r3, [r7, #4]
 8015b18:	681b      	ldr	r3, [r3, #0]
 8015b1a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8015b1e:	609a      	str	r2, [r3, #8]
      break;
 8015b20:	e03c      	b.n	8015b9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8015b22:	687b      	ldr	r3, [r7, #4]
 8015b24:	6818      	ldr	r0, [r3, #0]
 8015b26:	683b      	ldr	r3, [r7, #0]
 8015b28:	6859      	ldr	r1, [r3, #4]
 8015b2a:	683b      	ldr	r3, [r7, #0]
 8015b2c:	68db      	ldr	r3, [r3, #12]
 8015b2e:	461a      	mov	r2, r3
 8015b30:	f000 fc3c 	bl	80163ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8015b34:	687b      	ldr	r3, [r7, #4]
 8015b36:	681b      	ldr	r3, [r3, #0]
 8015b38:	2150      	movs	r1, #80	; 0x50
 8015b3a:	4618      	mov	r0, r3
 8015b3c:	f000 fd4b 	bl	80165d6 <TIM_ITRx_SetConfig>
      break;
 8015b40:	e02c      	b.n	8015b9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8015b42:	687b      	ldr	r3, [r7, #4]
 8015b44:	6818      	ldr	r0, [r3, #0]
 8015b46:	683b      	ldr	r3, [r7, #0]
 8015b48:	6859      	ldr	r1, [r3, #4]
 8015b4a:	683b      	ldr	r3, [r7, #0]
 8015b4c:	68db      	ldr	r3, [r3, #12]
 8015b4e:	461a      	mov	r2, r3
 8015b50:	f000 fc98 	bl	8016484 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8015b54:	687b      	ldr	r3, [r7, #4]
 8015b56:	681b      	ldr	r3, [r3, #0]
 8015b58:	2160      	movs	r1, #96	; 0x60
 8015b5a:	4618      	mov	r0, r3
 8015b5c:	f000 fd3b 	bl	80165d6 <TIM_ITRx_SetConfig>
      break;
 8015b60:	e01c      	b.n	8015b9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8015b62:	687b      	ldr	r3, [r7, #4]
 8015b64:	6818      	ldr	r0, [r3, #0]
 8015b66:	683b      	ldr	r3, [r7, #0]
 8015b68:	6859      	ldr	r1, [r3, #4]
 8015b6a:	683b      	ldr	r3, [r7, #0]
 8015b6c:	68db      	ldr	r3, [r3, #12]
 8015b6e:	461a      	mov	r2, r3
 8015b70:	f000 fc1c 	bl	80163ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8015b74:	687b      	ldr	r3, [r7, #4]
 8015b76:	681b      	ldr	r3, [r3, #0]
 8015b78:	2140      	movs	r1, #64	; 0x40
 8015b7a:	4618      	mov	r0, r3
 8015b7c:	f000 fd2b 	bl	80165d6 <TIM_ITRx_SetConfig>
      break;
 8015b80:	e00c      	b.n	8015b9c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8015b82:	687b      	ldr	r3, [r7, #4]
 8015b84:	681a      	ldr	r2, [r3, #0]
 8015b86:	683b      	ldr	r3, [r7, #0]
 8015b88:	681b      	ldr	r3, [r3, #0]
 8015b8a:	4619      	mov	r1, r3
 8015b8c:	4610      	mov	r0, r2
 8015b8e:	f000 fd22 	bl	80165d6 <TIM_ITRx_SetConfig>
      break;
 8015b92:	e003      	b.n	8015b9c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8015b94:	2301      	movs	r3, #1
 8015b96:	73fb      	strb	r3, [r7, #15]
      break;
 8015b98:	e000      	b.n	8015b9c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8015b9a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8015b9c:	687b      	ldr	r3, [r7, #4]
 8015b9e:	2201      	movs	r2, #1
 8015ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8015ba4:	687b      	ldr	r3, [r7, #4]
 8015ba6:	2200      	movs	r2, #0
 8015ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8015bac:	7bfb      	ldrb	r3, [r7, #15]
}
 8015bae:	4618      	mov	r0, r3
 8015bb0:	3710      	adds	r7, #16
 8015bb2:	46bd      	mov	sp, r7
 8015bb4:	bd80      	pop	{r7, pc}

08015bb6 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8015bb6:	b580      	push	{r7, lr}
 8015bb8:	b082      	sub	sp, #8
 8015bba:	af00      	add	r7, sp, #0
 8015bbc:	6078      	str	r0, [r7, #4]
 8015bbe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8015bc0:	687b      	ldr	r3, [r7, #4]
 8015bc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015bc6:	2b01      	cmp	r3, #1
 8015bc8:	d101      	bne.n	8015bce <HAL_TIM_SlaveConfigSynchro+0x18>
 8015bca:	2302      	movs	r3, #2
 8015bcc:	e031      	b.n	8015c32 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8015bce:	687b      	ldr	r3, [r7, #4]
 8015bd0:	2201      	movs	r2, #1
 8015bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8015bd6:	687b      	ldr	r3, [r7, #4]
 8015bd8:	2202      	movs	r2, #2
 8015bda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8015bde:	6839      	ldr	r1, [r7, #0]
 8015be0:	6878      	ldr	r0, [r7, #4]
 8015be2:	f000 fadd 	bl	80161a0 <TIM_SlaveTimer_SetConfig>
 8015be6:	4603      	mov	r3, r0
 8015be8:	2b00      	cmp	r3, #0
 8015bea:	d009      	beq.n	8015c00 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8015bec:	687b      	ldr	r3, [r7, #4]
 8015bee:	2201      	movs	r2, #1
 8015bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8015bf4:	687b      	ldr	r3, [r7, #4]
 8015bf6:	2200      	movs	r2, #0
 8015bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8015bfc:	2301      	movs	r3, #1
 8015bfe:	e018      	b.n	8015c32 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8015c00:	687b      	ldr	r3, [r7, #4]
 8015c02:	681b      	ldr	r3, [r3, #0]
 8015c04:	68da      	ldr	r2, [r3, #12]
 8015c06:	687b      	ldr	r3, [r7, #4]
 8015c08:	681b      	ldr	r3, [r3, #0]
 8015c0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8015c0e:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8015c10:	687b      	ldr	r3, [r7, #4]
 8015c12:	681b      	ldr	r3, [r3, #0]
 8015c14:	68da      	ldr	r2, [r3, #12]
 8015c16:	687b      	ldr	r3, [r7, #4]
 8015c18:	681b      	ldr	r3, [r3, #0]
 8015c1a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8015c1e:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8015c20:	687b      	ldr	r3, [r7, #4]
 8015c22:	2201      	movs	r2, #1
 8015c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8015c28:	687b      	ldr	r3, [r7, #4]
 8015c2a:	2200      	movs	r2, #0
 8015c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8015c30:	2300      	movs	r3, #0
}
 8015c32:	4618      	mov	r0, r3
 8015c34:	3708      	adds	r7, #8
 8015c36:	46bd      	mov	sp, r7
 8015c38:	bd80      	pop	{r7, pc}
	...

08015c3c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8015c3c:	b480      	push	{r7}
 8015c3e:	b085      	sub	sp, #20
 8015c40:	af00      	add	r7, sp, #0
 8015c42:	6078      	str	r0, [r7, #4]
 8015c44:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8015c46:	2300      	movs	r3, #0
 8015c48:	60fb      	str	r3, [r7, #12]
 8015c4a:	683b      	ldr	r3, [r7, #0]
 8015c4c:	2b0c      	cmp	r3, #12
 8015c4e:	d831      	bhi.n	8015cb4 <HAL_TIM_ReadCapturedValue+0x78>
 8015c50:	a201      	add	r2, pc, #4	; (adr r2, 8015c58 <HAL_TIM_ReadCapturedValue+0x1c>)
 8015c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015c56:	bf00      	nop
 8015c58:	08015c8d 	.word	0x08015c8d
 8015c5c:	08015cb5 	.word	0x08015cb5
 8015c60:	08015cb5 	.word	0x08015cb5
 8015c64:	08015cb5 	.word	0x08015cb5
 8015c68:	08015c97 	.word	0x08015c97
 8015c6c:	08015cb5 	.word	0x08015cb5
 8015c70:	08015cb5 	.word	0x08015cb5
 8015c74:	08015cb5 	.word	0x08015cb5
 8015c78:	08015ca1 	.word	0x08015ca1
 8015c7c:	08015cb5 	.word	0x08015cb5
 8015c80:	08015cb5 	.word	0x08015cb5
 8015c84:	08015cb5 	.word	0x08015cb5
 8015c88:	08015cab 	.word	0x08015cab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8015c8c:	687b      	ldr	r3, [r7, #4]
 8015c8e:	681b      	ldr	r3, [r3, #0]
 8015c90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015c92:	60fb      	str	r3, [r7, #12]

      break;
 8015c94:	e00f      	b.n	8015cb6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8015c96:	687b      	ldr	r3, [r7, #4]
 8015c98:	681b      	ldr	r3, [r3, #0]
 8015c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015c9c:	60fb      	str	r3, [r7, #12]

      break;
 8015c9e:	e00a      	b.n	8015cb6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8015ca0:	687b      	ldr	r3, [r7, #4]
 8015ca2:	681b      	ldr	r3, [r3, #0]
 8015ca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015ca6:	60fb      	str	r3, [r7, #12]

      break;
 8015ca8:	e005      	b.n	8015cb6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8015caa:	687b      	ldr	r3, [r7, #4]
 8015cac:	681b      	ldr	r3, [r3, #0]
 8015cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015cb0:	60fb      	str	r3, [r7, #12]

      break;
 8015cb2:	e000      	b.n	8015cb6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8015cb4:	bf00      	nop
  }

  return tmpreg;
 8015cb6:	68fb      	ldr	r3, [r7, #12]
}
 8015cb8:	4618      	mov	r0, r3
 8015cba:	3714      	adds	r7, #20
 8015cbc:	46bd      	mov	sp, r7
 8015cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cc2:	4770      	bx	lr

08015cc4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8015cc4:	b480      	push	{r7}
 8015cc6:	b083      	sub	sp, #12
 8015cc8:	af00      	add	r7, sp, #0
 8015cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8015ccc:	bf00      	nop
 8015cce:	370c      	adds	r7, #12
 8015cd0:	46bd      	mov	sp, r7
 8015cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cd6:	4770      	bx	lr

08015cd8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8015cd8:	b480      	push	{r7}
 8015cda:	b083      	sub	sp, #12
 8015cdc:	af00      	add	r7, sp, #0
 8015cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8015ce0:	bf00      	nop
 8015ce2:	370c      	adds	r7, #12
 8015ce4:	46bd      	mov	sp, r7
 8015ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cea:	4770      	bx	lr

08015cec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8015cec:	b480      	push	{r7}
 8015cee:	b083      	sub	sp, #12
 8015cf0:	af00      	add	r7, sp, #0
 8015cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8015cf4:	bf00      	nop
 8015cf6:	370c      	adds	r7, #12
 8015cf8:	46bd      	mov	sp, r7
 8015cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cfe:	4770      	bx	lr

08015d00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8015d00:	b480      	push	{r7}
 8015d02:	b085      	sub	sp, #20
 8015d04:	af00      	add	r7, sp, #0
 8015d06:	6078      	str	r0, [r7, #4]
 8015d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8015d0a:	687b      	ldr	r3, [r7, #4]
 8015d0c:	681b      	ldr	r3, [r3, #0]
 8015d0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8015d10:	687b      	ldr	r3, [r7, #4]
 8015d12:	4a40      	ldr	r2, [pc, #256]	; (8015e14 <TIM_Base_SetConfig+0x114>)
 8015d14:	4293      	cmp	r3, r2
 8015d16:	d013      	beq.n	8015d40 <TIM_Base_SetConfig+0x40>
 8015d18:	687b      	ldr	r3, [r7, #4]
 8015d1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015d1e:	d00f      	beq.n	8015d40 <TIM_Base_SetConfig+0x40>
 8015d20:	687b      	ldr	r3, [r7, #4]
 8015d22:	4a3d      	ldr	r2, [pc, #244]	; (8015e18 <TIM_Base_SetConfig+0x118>)
 8015d24:	4293      	cmp	r3, r2
 8015d26:	d00b      	beq.n	8015d40 <TIM_Base_SetConfig+0x40>
 8015d28:	687b      	ldr	r3, [r7, #4]
 8015d2a:	4a3c      	ldr	r2, [pc, #240]	; (8015e1c <TIM_Base_SetConfig+0x11c>)
 8015d2c:	4293      	cmp	r3, r2
 8015d2e:	d007      	beq.n	8015d40 <TIM_Base_SetConfig+0x40>
 8015d30:	687b      	ldr	r3, [r7, #4]
 8015d32:	4a3b      	ldr	r2, [pc, #236]	; (8015e20 <TIM_Base_SetConfig+0x120>)
 8015d34:	4293      	cmp	r3, r2
 8015d36:	d003      	beq.n	8015d40 <TIM_Base_SetConfig+0x40>
 8015d38:	687b      	ldr	r3, [r7, #4]
 8015d3a:	4a3a      	ldr	r2, [pc, #232]	; (8015e24 <TIM_Base_SetConfig+0x124>)
 8015d3c:	4293      	cmp	r3, r2
 8015d3e:	d108      	bne.n	8015d52 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8015d40:	68fb      	ldr	r3, [r7, #12]
 8015d42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8015d46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8015d48:	683b      	ldr	r3, [r7, #0]
 8015d4a:	685b      	ldr	r3, [r3, #4]
 8015d4c:	68fa      	ldr	r2, [r7, #12]
 8015d4e:	4313      	orrs	r3, r2
 8015d50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8015d52:	687b      	ldr	r3, [r7, #4]
 8015d54:	4a2f      	ldr	r2, [pc, #188]	; (8015e14 <TIM_Base_SetConfig+0x114>)
 8015d56:	4293      	cmp	r3, r2
 8015d58:	d02b      	beq.n	8015db2 <TIM_Base_SetConfig+0xb2>
 8015d5a:	687b      	ldr	r3, [r7, #4]
 8015d5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015d60:	d027      	beq.n	8015db2 <TIM_Base_SetConfig+0xb2>
 8015d62:	687b      	ldr	r3, [r7, #4]
 8015d64:	4a2c      	ldr	r2, [pc, #176]	; (8015e18 <TIM_Base_SetConfig+0x118>)
 8015d66:	4293      	cmp	r3, r2
 8015d68:	d023      	beq.n	8015db2 <TIM_Base_SetConfig+0xb2>
 8015d6a:	687b      	ldr	r3, [r7, #4]
 8015d6c:	4a2b      	ldr	r2, [pc, #172]	; (8015e1c <TIM_Base_SetConfig+0x11c>)
 8015d6e:	4293      	cmp	r3, r2
 8015d70:	d01f      	beq.n	8015db2 <TIM_Base_SetConfig+0xb2>
 8015d72:	687b      	ldr	r3, [r7, #4]
 8015d74:	4a2a      	ldr	r2, [pc, #168]	; (8015e20 <TIM_Base_SetConfig+0x120>)
 8015d76:	4293      	cmp	r3, r2
 8015d78:	d01b      	beq.n	8015db2 <TIM_Base_SetConfig+0xb2>
 8015d7a:	687b      	ldr	r3, [r7, #4]
 8015d7c:	4a29      	ldr	r2, [pc, #164]	; (8015e24 <TIM_Base_SetConfig+0x124>)
 8015d7e:	4293      	cmp	r3, r2
 8015d80:	d017      	beq.n	8015db2 <TIM_Base_SetConfig+0xb2>
 8015d82:	687b      	ldr	r3, [r7, #4]
 8015d84:	4a28      	ldr	r2, [pc, #160]	; (8015e28 <TIM_Base_SetConfig+0x128>)
 8015d86:	4293      	cmp	r3, r2
 8015d88:	d013      	beq.n	8015db2 <TIM_Base_SetConfig+0xb2>
 8015d8a:	687b      	ldr	r3, [r7, #4]
 8015d8c:	4a27      	ldr	r2, [pc, #156]	; (8015e2c <TIM_Base_SetConfig+0x12c>)
 8015d8e:	4293      	cmp	r3, r2
 8015d90:	d00f      	beq.n	8015db2 <TIM_Base_SetConfig+0xb2>
 8015d92:	687b      	ldr	r3, [r7, #4]
 8015d94:	4a26      	ldr	r2, [pc, #152]	; (8015e30 <TIM_Base_SetConfig+0x130>)
 8015d96:	4293      	cmp	r3, r2
 8015d98:	d00b      	beq.n	8015db2 <TIM_Base_SetConfig+0xb2>
 8015d9a:	687b      	ldr	r3, [r7, #4]
 8015d9c:	4a25      	ldr	r2, [pc, #148]	; (8015e34 <TIM_Base_SetConfig+0x134>)
 8015d9e:	4293      	cmp	r3, r2
 8015da0:	d007      	beq.n	8015db2 <TIM_Base_SetConfig+0xb2>
 8015da2:	687b      	ldr	r3, [r7, #4]
 8015da4:	4a24      	ldr	r2, [pc, #144]	; (8015e38 <TIM_Base_SetConfig+0x138>)
 8015da6:	4293      	cmp	r3, r2
 8015da8:	d003      	beq.n	8015db2 <TIM_Base_SetConfig+0xb2>
 8015daa:	687b      	ldr	r3, [r7, #4]
 8015dac:	4a23      	ldr	r2, [pc, #140]	; (8015e3c <TIM_Base_SetConfig+0x13c>)
 8015dae:	4293      	cmp	r3, r2
 8015db0:	d108      	bne.n	8015dc4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8015db2:	68fb      	ldr	r3, [r7, #12]
 8015db4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8015db8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8015dba:	683b      	ldr	r3, [r7, #0]
 8015dbc:	68db      	ldr	r3, [r3, #12]
 8015dbe:	68fa      	ldr	r2, [r7, #12]
 8015dc0:	4313      	orrs	r3, r2
 8015dc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8015dc4:	68fb      	ldr	r3, [r7, #12]
 8015dc6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8015dca:	683b      	ldr	r3, [r7, #0]
 8015dcc:	695b      	ldr	r3, [r3, #20]
 8015dce:	4313      	orrs	r3, r2
 8015dd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8015dd2:	687b      	ldr	r3, [r7, #4]
 8015dd4:	68fa      	ldr	r2, [r7, #12]
 8015dd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8015dd8:	683b      	ldr	r3, [r7, #0]
 8015dda:	689a      	ldr	r2, [r3, #8]
 8015ddc:	687b      	ldr	r3, [r7, #4]
 8015dde:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8015de0:	683b      	ldr	r3, [r7, #0]
 8015de2:	681a      	ldr	r2, [r3, #0]
 8015de4:	687b      	ldr	r3, [r7, #4]
 8015de6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8015de8:	687b      	ldr	r3, [r7, #4]
 8015dea:	4a0a      	ldr	r2, [pc, #40]	; (8015e14 <TIM_Base_SetConfig+0x114>)
 8015dec:	4293      	cmp	r3, r2
 8015dee:	d003      	beq.n	8015df8 <TIM_Base_SetConfig+0xf8>
 8015df0:	687b      	ldr	r3, [r7, #4]
 8015df2:	4a0c      	ldr	r2, [pc, #48]	; (8015e24 <TIM_Base_SetConfig+0x124>)
 8015df4:	4293      	cmp	r3, r2
 8015df6:	d103      	bne.n	8015e00 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8015df8:	683b      	ldr	r3, [r7, #0]
 8015dfa:	691a      	ldr	r2, [r3, #16]
 8015dfc:	687b      	ldr	r3, [r7, #4]
 8015dfe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8015e00:	687b      	ldr	r3, [r7, #4]
 8015e02:	2201      	movs	r2, #1
 8015e04:	615a      	str	r2, [r3, #20]
}
 8015e06:	bf00      	nop
 8015e08:	3714      	adds	r7, #20
 8015e0a:	46bd      	mov	sp, r7
 8015e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e10:	4770      	bx	lr
 8015e12:	bf00      	nop
 8015e14:	40010000 	.word	0x40010000
 8015e18:	40000400 	.word	0x40000400
 8015e1c:	40000800 	.word	0x40000800
 8015e20:	40000c00 	.word	0x40000c00
 8015e24:	40010400 	.word	0x40010400
 8015e28:	40014000 	.word	0x40014000
 8015e2c:	40014400 	.word	0x40014400
 8015e30:	40014800 	.word	0x40014800
 8015e34:	40001800 	.word	0x40001800
 8015e38:	40001c00 	.word	0x40001c00
 8015e3c:	40002000 	.word	0x40002000

08015e40 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8015e40:	b480      	push	{r7}
 8015e42:	b087      	sub	sp, #28
 8015e44:	af00      	add	r7, sp, #0
 8015e46:	6078      	str	r0, [r7, #4]
 8015e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8015e4a:	687b      	ldr	r3, [r7, #4]
 8015e4c:	6a1b      	ldr	r3, [r3, #32]
 8015e4e:	f023 0201 	bic.w	r2, r3, #1
 8015e52:	687b      	ldr	r3, [r7, #4]
 8015e54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8015e56:	687b      	ldr	r3, [r7, #4]
 8015e58:	6a1b      	ldr	r3, [r3, #32]
 8015e5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8015e5c:	687b      	ldr	r3, [r7, #4]
 8015e5e:	685b      	ldr	r3, [r3, #4]
 8015e60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8015e62:	687b      	ldr	r3, [r7, #4]
 8015e64:	699b      	ldr	r3, [r3, #24]
 8015e66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8015e68:	68fb      	ldr	r3, [r7, #12]
 8015e6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8015e6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8015e70:	68fb      	ldr	r3, [r7, #12]
 8015e72:	f023 0303 	bic.w	r3, r3, #3
 8015e76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8015e78:	683b      	ldr	r3, [r7, #0]
 8015e7a:	681b      	ldr	r3, [r3, #0]
 8015e7c:	68fa      	ldr	r2, [r7, #12]
 8015e7e:	4313      	orrs	r3, r2
 8015e80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8015e82:	697b      	ldr	r3, [r7, #20]
 8015e84:	f023 0302 	bic.w	r3, r3, #2
 8015e88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8015e8a:	683b      	ldr	r3, [r7, #0]
 8015e8c:	689b      	ldr	r3, [r3, #8]
 8015e8e:	697a      	ldr	r2, [r7, #20]
 8015e90:	4313      	orrs	r3, r2
 8015e92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8015e94:	687b      	ldr	r3, [r7, #4]
 8015e96:	4a20      	ldr	r2, [pc, #128]	; (8015f18 <TIM_OC1_SetConfig+0xd8>)
 8015e98:	4293      	cmp	r3, r2
 8015e9a:	d003      	beq.n	8015ea4 <TIM_OC1_SetConfig+0x64>
 8015e9c:	687b      	ldr	r3, [r7, #4]
 8015e9e:	4a1f      	ldr	r2, [pc, #124]	; (8015f1c <TIM_OC1_SetConfig+0xdc>)
 8015ea0:	4293      	cmp	r3, r2
 8015ea2:	d10c      	bne.n	8015ebe <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8015ea4:	697b      	ldr	r3, [r7, #20]
 8015ea6:	f023 0308 	bic.w	r3, r3, #8
 8015eaa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8015eac:	683b      	ldr	r3, [r7, #0]
 8015eae:	68db      	ldr	r3, [r3, #12]
 8015eb0:	697a      	ldr	r2, [r7, #20]
 8015eb2:	4313      	orrs	r3, r2
 8015eb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8015eb6:	697b      	ldr	r3, [r7, #20]
 8015eb8:	f023 0304 	bic.w	r3, r3, #4
 8015ebc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8015ebe:	687b      	ldr	r3, [r7, #4]
 8015ec0:	4a15      	ldr	r2, [pc, #84]	; (8015f18 <TIM_OC1_SetConfig+0xd8>)
 8015ec2:	4293      	cmp	r3, r2
 8015ec4:	d003      	beq.n	8015ece <TIM_OC1_SetConfig+0x8e>
 8015ec6:	687b      	ldr	r3, [r7, #4]
 8015ec8:	4a14      	ldr	r2, [pc, #80]	; (8015f1c <TIM_OC1_SetConfig+0xdc>)
 8015eca:	4293      	cmp	r3, r2
 8015ecc:	d111      	bne.n	8015ef2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8015ece:	693b      	ldr	r3, [r7, #16]
 8015ed0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8015ed4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8015ed6:	693b      	ldr	r3, [r7, #16]
 8015ed8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8015edc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8015ede:	683b      	ldr	r3, [r7, #0]
 8015ee0:	695b      	ldr	r3, [r3, #20]
 8015ee2:	693a      	ldr	r2, [r7, #16]
 8015ee4:	4313      	orrs	r3, r2
 8015ee6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8015ee8:	683b      	ldr	r3, [r7, #0]
 8015eea:	699b      	ldr	r3, [r3, #24]
 8015eec:	693a      	ldr	r2, [r7, #16]
 8015eee:	4313      	orrs	r3, r2
 8015ef0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8015ef2:	687b      	ldr	r3, [r7, #4]
 8015ef4:	693a      	ldr	r2, [r7, #16]
 8015ef6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8015ef8:	687b      	ldr	r3, [r7, #4]
 8015efa:	68fa      	ldr	r2, [r7, #12]
 8015efc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8015efe:	683b      	ldr	r3, [r7, #0]
 8015f00:	685a      	ldr	r2, [r3, #4]
 8015f02:	687b      	ldr	r3, [r7, #4]
 8015f04:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8015f06:	687b      	ldr	r3, [r7, #4]
 8015f08:	697a      	ldr	r2, [r7, #20]
 8015f0a:	621a      	str	r2, [r3, #32]
}
 8015f0c:	bf00      	nop
 8015f0e:	371c      	adds	r7, #28
 8015f10:	46bd      	mov	sp, r7
 8015f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f16:	4770      	bx	lr
 8015f18:	40010000 	.word	0x40010000
 8015f1c:	40010400 	.word	0x40010400

08015f20 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8015f20:	b480      	push	{r7}
 8015f22:	b087      	sub	sp, #28
 8015f24:	af00      	add	r7, sp, #0
 8015f26:	6078      	str	r0, [r7, #4]
 8015f28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8015f2a:	687b      	ldr	r3, [r7, #4]
 8015f2c:	6a1b      	ldr	r3, [r3, #32]
 8015f2e:	f023 0210 	bic.w	r2, r3, #16
 8015f32:	687b      	ldr	r3, [r7, #4]
 8015f34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8015f36:	687b      	ldr	r3, [r7, #4]
 8015f38:	6a1b      	ldr	r3, [r3, #32]
 8015f3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8015f3c:	687b      	ldr	r3, [r7, #4]
 8015f3e:	685b      	ldr	r3, [r3, #4]
 8015f40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8015f42:	687b      	ldr	r3, [r7, #4]
 8015f44:	699b      	ldr	r3, [r3, #24]
 8015f46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8015f48:	68fb      	ldr	r3, [r7, #12]
 8015f4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8015f4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8015f50:	68fb      	ldr	r3, [r7, #12]
 8015f52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8015f56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8015f58:	683b      	ldr	r3, [r7, #0]
 8015f5a:	681b      	ldr	r3, [r3, #0]
 8015f5c:	021b      	lsls	r3, r3, #8
 8015f5e:	68fa      	ldr	r2, [r7, #12]
 8015f60:	4313      	orrs	r3, r2
 8015f62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8015f64:	697b      	ldr	r3, [r7, #20]
 8015f66:	f023 0320 	bic.w	r3, r3, #32
 8015f6a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8015f6c:	683b      	ldr	r3, [r7, #0]
 8015f6e:	689b      	ldr	r3, [r3, #8]
 8015f70:	011b      	lsls	r3, r3, #4
 8015f72:	697a      	ldr	r2, [r7, #20]
 8015f74:	4313      	orrs	r3, r2
 8015f76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8015f78:	687b      	ldr	r3, [r7, #4]
 8015f7a:	4a22      	ldr	r2, [pc, #136]	; (8016004 <TIM_OC2_SetConfig+0xe4>)
 8015f7c:	4293      	cmp	r3, r2
 8015f7e:	d003      	beq.n	8015f88 <TIM_OC2_SetConfig+0x68>
 8015f80:	687b      	ldr	r3, [r7, #4]
 8015f82:	4a21      	ldr	r2, [pc, #132]	; (8016008 <TIM_OC2_SetConfig+0xe8>)
 8015f84:	4293      	cmp	r3, r2
 8015f86:	d10d      	bne.n	8015fa4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8015f88:	697b      	ldr	r3, [r7, #20]
 8015f8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8015f8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8015f90:	683b      	ldr	r3, [r7, #0]
 8015f92:	68db      	ldr	r3, [r3, #12]
 8015f94:	011b      	lsls	r3, r3, #4
 8015f96:	697a      	ldr	r2, [r7, #20]
 8015f98:	4313      	orrs	r3, r2
 8015f9a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8015f9c:	697b      	ldr	r3, [r7, #20]
 8015f9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8015fa2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8015fa4:	687b      	ldr	r3, [r7, #4]
 8015fa6:	4a17      	ldr	r2, [pc, #92]	; (8016004 <TIM_OC2_SetConfig+0xe4>)
 8015fa8:	4293      	cmp	r3, r2
 8015faa:	d003      	beq.n	8015fb4 <TIM_OC2_SetConfig+0x94>
 8015fac:	687b      	ldr	r3, [r7, #4]
 8015fae:	4a16      	ldr	r2, [pc, #88]	; (8016008 <TIM_OC2_SetConfig+0xe8>)
 8015fb0:	4293      	cmp	r3, r2
 8015fb2:	d113      	bne.n	8015fdc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8015fb4:	693b      	ldr	r3, [r7, #16]
 8015fb6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8015fba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8015fbc:	693b      	ldr	r3, [r7, #16]
 8015fbe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8015fc2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8015fc4:	683b      	ldr	r3, [r7, #0]
 8015fc6:	695b      	ldr	r3, [r3, #20]
 8015fc8:	009b      	lsls	r3, r3, #2
 8015fca:	693a      	ldr	r2, [r7, #16]
 8015fcc:	4313      	orrs	r3, r2
 8015fce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8015fd0:	683b      	ldr	r3, [r7, #0]
 8015fd2:	699b      	ldr	r3, [r3, #24]
 8015fd4:	009b      	lsls	r3, r3, #2
 8015fd6:	693a      	ldr	r2, [r7, #16]
 8015fd8:	4313      	orrs	r3, r2
 8015fda:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8015fdc:	687b      	ldr	r3, [r7, #4]
 8015fde:	693a      	ldr	r2, [r7, #16]
 8015fe0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8015fe2:	687b      	ldr	r3, [r7, #4]
 8015fe4:	68fa      	ldr	r2, [r7, #12]
 8015fe6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8015fe8:	683b      	ldr	r3, [r7, #0]
 8015fea:	685a      	ldr	r2, [r3, #4]
 8015fec:	687b      	ldr	r3, [r7, #4]
 8015fee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8015ff0:	687b      	ldr	r3, [r7, #4]
 8015ff2:	697a      	ldr	r2, [r7, #20]
 8015ff4:	621a      	str	r2, [r3, #32]
}
 8015ff6:	bf00      	nop
 8015ff8:	371c      	adds	r7, #28
 8015ffa:	46bd      	mov	sp, r7
 8015ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016000:	4770      	bx	lr
 8016002:	bf00      	nop
 8016004:	40010000 	.word	0x40010000
 8016008:	40010400 	.word	0x40010400

0801600c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801600c:	b480      	push	{r7}
 801600e:	b087      	sub	sp, #28
 8016010:	af00      	add	r7, sp, #0
 8016012:	6078      	str	r0, [r7, #4]
 8016014:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8016016:	687b      	ldr	r3, [r7, #4]
 8016018:	6a1b      	ldr	r3, [r3, #32]
 801601a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801601e:	687b      	ldr	r3, [r7, #4]
 8016020:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8016022:	687b      	ldr	r3, [r7, #4]
 8016024:	6a1b      	ldr	r3, [r3, #32]
 8016026:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016028:	687b      	ldr	r3, [r7, #4]
 801602a:	685b      	ldr	r3, [r3, #4]
 801602c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801602e:	687b      	ldr	r3, [r7, #4]
 8016030:	69db      	ldr	r3, [r3, #28]
 8016032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8016034:	68fb      	ldr	r3, [r7, #12]
 8016036:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801603a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801603c:	68fb      	ldr	r3, [r7, #12]
 801603e:	f023 0303 	bic.w	r3, r3, #3
 8016042:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8016044:	683b      	ldr	r3, [r7, #0]
 8016046:	681b      	ldr	r3, [r3, #0]
 8016048:	68fa      	ldr	r2, [r7, #12]
 801604a:	4313      	orrs	r3, r2
 801604c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801604e:	697b      	ldr	r3, [r7, #20]
 8016050:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8016054:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8016056:	683b      	ldr	r3, [r7, #0]
 8016058:	689b      	ldr	r3, [r3, #8]
 801605a:	021b      	lsls	r3, r3, #8
 801605c:	697a      	ldr	r2, [r7, #20]
 801605e:	4313      	orrs	r3, r2
 8016060:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8016062:	687b      	ldr	r3, [r7, #4]
 8016064:	4a21      	ldr	r2, [pc, #132]	; (80160ec <TIM_OC3_SetConfig+0xe0>)
 8016066:	4293      	cmp	r3, r2
 8016068:	d003      	beq.n	8016072 <TIM_OC3_SetConfig+0x66>
 801606a:	687b      	ldr	r3, [r7, #4]
 801606c:	4a20      	ldr	r2, [pc, #128]	; (80160f0 <TIM_OC3_SetConfig+0xe4>)
 801606e:	4293      	cmp	r3, r2
 8016070:	d10d      	bne.n	801608e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8016072:	697b      	ldr	r3, [r7, #20]
 8016074:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8016078:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801607a:	683b      	ldr	r3, [r7, #0]
 801607c:	68db      	ldr	r3, [r3, #12]
 801607e:	021b      	lsls	r3, r3, #8
 8016080:	697a      	ldr	r2, [r7, #20]
 8016082:	4313      	orrs	r3, r2
 8016084:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8016086:	697b      	ldr	r3, [r7, #20]
 8016088:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801608c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801608e:	687b      	ldr	r3, [r7, #4]
 8016090:	4a16      	ldr	r2, [pc, #88]	; (80160ec <TIM_OC3_SetConfig+0xe0>)
 8016092:	4293      	cmp	r3, r2
 8016094:	d003      	beq.n	801609e <TIM_OC3_SetConfig+0x92>
 8016096:	687b      	ldr	r3, [r7, #4]
 8016098:	4a15      	ldr	r2, [pc, #84]	; (80160f0 <TIM_OC3_SetConfig+0xe4>)
 801609a:	4293      	cmp	r3, r2
 801609c:	d113      	bne.n	80160c6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801609e:	693b      	ldr	r3, [r7, #16]
 80160a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80160a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80160a6:	693b      	ldr	r3, [r7, #16]
 80160a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80160ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80160ae:	683b      	ldr	r3, [r7, #0]
 80160b0:	695b      	ldr	r3, [r3, #20]
 80160b2:	011b      	lsls	r3, r3, #4
 80160b4:	693a      	ldr	r2, [r7, #16]
 80160b6:	4313      	orrs	r3, r2
 80160b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80160ba:	683b      	ldr	r3, [r7, #0]
 80160bc:	699b      	ldr	r3, [r3, #24]
 80160be:	011b      	lsls	r3, r3, #4
 80160c0:	693a      	ldr	r2, [r7, #16]
 80160c2:	4313      	orrs	r3, r2
 80160c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80160c6:	687b      	ldr	r3, [r7, #4]
 80160c8:	693a      	ldr	r2, [r7, #16]
 80160ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80160cc:	687b      	ldr	r3, [r7, #4]
 80160ce:	68fa      	ldr	r2, [r7, #12]
 80160d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80160d2:	683b      	ldr	r3, [r7, #0]
 80160d4:	685a      	ldr	r2, [r3, #4]
 80160d6:	687b      	ldr	r3, [r7, #4]
 80160d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80160da:	687b      	ldr	r3, [r7, #4]
 80160dc:	697a      	ldr	r2, [r7, #20]
 80160de:	621a      	str	r2, [r3, #32]
}
 80160e0:	bf00      	nop
 80160e2:	371c      	adds	r7, #28
 80160e4:	46bd      	mov	sp, r7
 80160e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160ea:	4770      	bx	lr
 80160ec:	40010000 	.word	0x40010000
 80160f0:	40010400 	.word	0x40010400

080160f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80160f4:	b480      	push	{r7}
 80160f6:	b087      	sub	sp, #28
 80160f8:	af00      	add	r7, sp, #0
 80160fa:	6078      	str	r0, [r7, #4]
 80160fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80160fe:	687b      	ldr	r3, [r7, #4]
 8016100:	6a1b      	ldr	r3, [r3, #32]
 8016102:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8016106:	687b      	ldr	r3, [r7, #4]
 8016108:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801610a:	687b      	ldr	r3, [r7, #4]
 801610c:	6a1b      	ldr	r3, [r3, #32]
 801610e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016110:	687b      	ldr	r3, [r7, #4]
 8016112:	685b      	ldr	r3, [r3, #4]
 8016114:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8016116:	687b      	ldr	r3, [r7, #4]
 8016118:	69db      	ldr	r3, [r3, #28]
 801611a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801611c:	68fb      	ldr	r3, [r7, #12]
 801611e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8016122:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8016124:	68fb      	ldr	r3, [r7, #12]
 8016126:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801612a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801612c:	683b      	ldr	r3, [r7, #0]
 801612e:	681b      	ldr	r3, [r3, #0]
 8016130:	021b      	lsls	r3, r3, #8
 8016132:	68fa      	ldr	r2, [r7, #12]
 8016134:	4313      	orrs	r3, r2
 8016136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8016138:	693b      	ldr	r3, [r7, #16]
 801613a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801613e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8016140:	683b      	ldr	r3, [r7, #0]
 8016142:	689b      	ldr	r3, [r3, #8]
 8016144:	031b      	lsls	r3, r3, #12
 8016146:	693a      	ldr	r2, [r7, #16]
 8016148:	4313      	orrs	r3, r2
 801614a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801614c:	687b      	ldr	r3, [r7, #4]
 801614e:	4a12      	ldr	r2, [pc, #72]	; (8016198 <TIM_OC4_SetConfig+0xa4>)
 8016150:	4293      	cmp	r3, r2
 8016152:	d003      	beq.n	801615c <TIM_OC4_SetConfig+0x68>
 8016154:	687b      	ldr	r3, [r7, #4]
 8016156:	4a11      	ldr	r2, [pc, #68]	; (801619c <TIM_OC4_SetConfig+0xa8>)
 8016158:	4293      	cmp	r3, r2
 801615a:	d109      	bne.n	8016170 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801615c:	697b      	ldr	r3, [r7, #20]
 801615e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8016162:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8016164:	683b      	ldr	r3, [r7, #0]
 8016166:	695b      	ldr	r3, [r3, #20]
 8016168:	019b      	lsls	r3, r3, #6
 801616a:	697a      	ldr	r2, [r7, #20]
 801616c:	4313      	orrs	r3, r2
 801616e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016170:	687b      	ldr	r3, [r7, #4]
 8016172:	697a      	ldr	r2, [r7, #20]
 8016174:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8016176:	687b      	ldr	r3, [r7, #4]
 8016178:	68fa      	ldr	r2, [r7, #12]
 801617a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801617c:	683b      	ldr	r3, [r7, #0]
 801617e:	685a      	ldr	r2, [r3, #4]
 8016180:	687b      	ldr	r3, [r7, #4]
 8016182:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016184:	687b      	ldr	r3, [r7, #4]
 8016186:	693a      	ldr	r2, [r7, #16]
 8016188:	621a      	str	r2, [r3, #32]
}
 801618a:	bf00      	nop
 801618c:	371c      	adds	r7, #28
 801618e:	46bd      	mov	sp, r7
 8016190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016194:	4770      	bx	lr
 8016196:	bf00      	nop
 8016198:	40010000 	.word	0x40010000
 801619c:	40010400 	.word	0x40010400

080161a0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80161a0:	b580      	push	{r7, lr}
 80161a2:	b086      	sub	sp, #24
 80161a4:	af00      	add	r7, sp, #0
 80161a6:	6078      	str	r0, [r7, #4]
 80161a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80161aa:	2300      	movs	r3, #0
 80161ac:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80161ae:	687b      	ldr	r3, [r7, #4]
 80161b0:	681b      	ldr	r3, [r3, #0]
 80161b2:	689b      	ldr	r3, [r3, #8]
 80161b4:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80161b6:	693b      	ldr	r3, [r7, #16]
 80161b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80161bc:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80161be:	683b      	ldr	r3, [r7, #0]
 80161c0:	685b      	ldr	r3, [r3, #4]
 80161c2:	693a      	ldr	r2, [r7, #16]
 80161c4:	4313      	orrs	r3, r2
 80161c6:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80161c8:	693b      	ldr	r3, [r7, #16]
 80161ca:	f023 0307 	bic.w	r3, r3, #7
 80161ce:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80161d0:	683b      	ldr	r3, [r7, #0]
 80161d2:	681b      	ldr	r3, [r3, #0]
 80161d4:	693a      	ldr	r2, [r7, #16]
 80161d6:	4313      	orrs	r3, r2
 80161d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80161da:	687b      	ldr	r3, [r7, #4]
 80161dc:	681b      	ldr	r3, [r3, #0]
 80161de:	693a      	ldr	r2, [r7, #16]
 80161e0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80161e2:	683b      	ldr	r3, [r7, #0]
 80161e4:	685b      	ldr	r3, [r3, #4]
 80161e6:	2b70      	cmp	r3, #112	; 0x70
 80161e8:	d01a      	beq.n	8016220 <TIM_SlaveTimer_SetConfig+0x80>
 80161ea:	2b70      	cmp	r3, #112	; 0x70
 80161ec:	d860      	bhi.n	80162b0 <TIM_SlaveTimer_SetConfig+0x110>
 80161ee:	2b60      	cmp	r3, #96	; 0x60
 80161f0:	d054      	beq.n	801629c <TIM_SlaveTimer_SetConfig+0xfc>
 80161f2:	2b60      	cmp	r3, #96	; 0x60
 80161f4:	d85c      	bhi.n	80162b0 <TIM_SlaveTimer_SetConfig+0x110>
 80161f6:	2b50      	cmp	r3, #80	; 0x50
 80161f8:	d046      	beq.n	8016288 <TIM_SlaveTimer_SetConfig+0xe8>
 80161fa:	2b50      	cmp	r3, #80	; 0x50
 80161fc:	d858      	bhi.n	80162b0 <TIM_SlaveTimer_SetConfig+0x110>
 80161fe:	2b40      	cmp	r3, #64	; 0x40
 8016200:	d019      	beq.n	8016236 <TIM_SlaveTimer_SetConfig+0x96>
 8016202:	2b40      	cmp	r3, #64	; 0x40
 8016204:	d854      	bhi.n	80162b0 <TIM_SlaveTimer_SetConfig+0x110>
 8016206:	2b30      	cmp	r3, #48	; 0x30
 8016208:	d055      	beq.n	80162b6 <TIM_SlaveTimer_SetConfig+0x116>
 801620a:	2b30      	cmp	r3, #48	; 0x30
 801620c:	d850      	bhi.n	80162b0 <TIM_SlaveTimer_SetConfig+0x110>
 801620e:	2b20      	cmp	r3, #32
 8016210:	d051      	beq.n	80162b6 <TIM_SlaveTimer_SetConfig+0x116>
 8016212:	2b20      	cmp	r3, #32
 8016214:	d84c      	bhi.n	80162b0 <TIM_SlaveTimer_SetConfig+0x110>
 8016216:	2b00      	cmp	r3, #0
 8016218:	d04d      	beq.n	80162b6 <TIM_SlaveTimer_SetConfig+0x116>
 801621a:	2b10      	cmp	r3, #16
 801621c:	d04b      	beq.n	80162b6 <TIM_SlaveTimer_SetConfig+0x116>
 801621e:	e047      	b.n	80162b0 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8016220:	687b      	ldr	r3, [r7, #4]
 8016222:	6818      	ldr	r0, [r3, #0]
 8016224:	683b      	ldr	r3, [r7, #0]
 8016226:	68d9      	ldr	r1, [r3, #12]
 8016228:	683b      	ldr	r3, [r7, #0]
 801622a:	689a      	ldr	r2, [r3, #8]
 801622c:	683b      	ldr	r3, [r7, #0]
 801622e:	691b      	ldr	r3, [r3, #16]
 8016230:	f000 f9ec 	bl	801660c <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8016234:	e040      	b.n	80162b8 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8016236:	683b      	ldr	r3, [r7, #0]
 8016238:	681b      	ldr	r3, [r3, #0]
 801623a:	2b05      	cmp	r3, #5
 801623c:	d101      	bne.n	8016242 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 801623e:	2301      	movs	r3, #1
 8016240:	e03b      	b.n	80162ba <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8016242:	687b      	ldr	r3, [r7, #4]
 8016244:	681b      	ldr	r3, [r3, #0]
 8016246:	6a1b      	ldr	r3, [r3, #32]
 8016248:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 801624a:	687b      	ldr	r3, [r7, #4]
 801624c:	681b      	ldr	r3, [r3, #0]
 801624e:	6a1a      	ldr	r2, [r3, #32]
 8016250:	687b      	ldr	r3, [r7, #4]
 8016252:	681b      	ldr	r3, [r3, #0]
 8016254:	f022 0201 	bic.w	r2, r2, #1
 8016258:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 801625a:	687b      	ldr	r3, [r7, #4]
 801625c:	681b      	ldr	r3, [r3, #0]
 801625e:	699b      	ldr	r3, [r3, #24]
 8016260:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8016262:	68bb      	ldr	r3, [r7, #8]
 8016264:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8016268:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 801626a:	683b      	ldr	r3, [r7, #0]
 801626c:	691b      	ldr	r3, [r3, #16]
 801626e:	011b      	lsls	r3, r3, #4
 8016270:	68ba      	ldr	r2, [r7, #8]
 8016272:	4313      	orrs	r3, r2
 8016274:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8016276:	687b      	ldr	r3, [r7, #4]
 8016278:	681b      	ldr	r3, [r3, #0]
 801627a:	68ba      	ldr	r2, [r7, #8]
 801627c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 801627e:	687b      	ldr	r3, [r7, #4]
 8016280:	681b      	ldr	r3, [r3, #0]
 8016282:	68fa      	ldr	r2, [r7, #12]
 8016284:	621a      	str	r2, [r3, #32]
      break;
 8016286:	e017      	b.n	80162b8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8016288:	687b      	ldr	r3, [r7, #4]
 801628a:	6818      	ldr	r0, [r3, #0]
 801628c:	683b      	ldr	r3, [r7, #0]
 801628e:	6899      	ldr	r1, [r3, #8]
 8016290:	683b      	ldr	r3, [r7, #0]
 8016292:	691b      	ldr	r3, [r3, #16]
 8016294:	461a      	mov	r2, r3
 8016296:	f000 f889 	bl	80163ac <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 801629a:	e00d      	b.n	80162b8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 801629c:	687b      	ldr	r3, [r7, #4]
 801629e:	6818      	ldr	r0, [r3, #0]
 80162a0:	683b      	ldr	r3, [r7, #0]
 80162a2:	6899      	ldr	r1, [r3, #8]
 80162a4:	683b      	ldr	r3, [r7, #0]
 80162a6:	691b      	ldr	r3, [r3, #16]
 80162a8:	461a      	mov	r2, r3
 80162aa:	f000 f8eb 	bl	8016484 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80162ae:	e003      	b.n	80162b8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80162b0:	2301      	movs	r3, #1
 80162b2:	75fb      	strb	r3, [r7, #23]
      break;
 80162b4:	e000      	b.n	80162b8 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 80162b6:	bf00      	nop
  }

  return status;
 80162b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80162ba:	4618      	mov	r0, r3
 80162bc:	3718      	adds	r7, #24
 80162be:	46bd      	mov	sp, r7
 80162c0:	bd80      	pop	{r7, pc}
	...

080162c4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80162c4:	b480      	push	{r7}
 80162c6:	b087      	sub	sp, #28
 80162c8:	af00      	add	r7, sp, #0
 80162ca:	60f8      	str	r0, [r7, #12]
 80162cc:	60b9      	str	r1, [r7, #8]
 80162ce:	607a      	str	r2, [r7, #4]
 80162d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80162d2:	68fb      	ldr	r3, [r7, #12]
 80162d4:	6a1b      	ldr	r3, [r3, #32]
 80162d6:	f023 0201 	bic.w	r2, r3, #1
 80162da:	68fb      	ldr	r3, [r7, #12]
 80162dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80162de:	68fb      	ldr	r3, [r7, #12]
 80162e0:	699b      	ldr	r3, [r3, #24]
 80162e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80162e4:	68fb      	ldr	r3, [r7, #12]
 80162e6:	6a1b      	ldr	r3, [r3, #32]
 80162e8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80162ea:	68fb      	ldr	r3, [r7, #12]
 80162ec:	4a28      	ldr	r2, [pc, #160]	; (8016390 <TIM_TI1_SetConfig+0xcc>)
 80162ee:	4293      	cmp	r3, r2
 80162f0:	d01b      	beq.n	801632a <TIM_TI1_SetConfig+0x66>
 80162f2:	68fb      	ldr	r3, [r7, #12]
 80162f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80162f8:	d017      	beq.n	801632a <TIM_TI1_SetConfig+0x66>
 80162fa:	68fb      	ldr	r3, [r7, #12]
 80162fc:	4a25      	ldr	r2, [pc, #148]	; (8016394 <TIM_TI1_SetConfig+0xd0>)
 80162fe:	4293      	cmp	r3, r2
 8016300:	d013      	beq.n	801632a <TIM_TI1_SetConfig+0x66>
 8016302:	68fb      	ldr	r3, [r7, #12]
 8016304:	4a24      	ldr	r2, [pc, #144]	; (8016398 <TIM_TI1_SetConfig+0xd4>)
 8016306:	4293      	cmp	r3, r2
 8016308:	d00f      	beq.n	801632a <TIM_TI1_SetConfig+0x66>
 801630a:	68fb      	ldr	r3, [r7, #12]
 801630c:	4a23      	ldr	r2, [pc, #140]	; (801639c <TIM_TI1_SetConfig+0xd8>)
 801630e:	4293      	cmp	r3, r2
 8016310:	d00b      	beq.n	801632a <TIM_TI1_SetConfig+0x66>
 8016312:	68fb      	ldr	r3, [r7, #12]
 8016314:	4a22      	ldr	r2, [pc, #136]	; (80163a0 <TIM_TI1_SetConfig+0xdc>)
 8016316:	4293      	cmp	r3, r2
 8016318:	d007      	beq.n	801632a <TIM_TI1_SetConfig+0x66>
 801631a:	68fb      	ldr	r3, [r7, #12]
 801631c:	4a21      	ldr	r2, [pc, #132]	; (80163a4 <TIM_TI1_SetConfig+0xe0>)
 801631e:	4293      	cmp	r3, r2
 8016320:	d003      	beq.n	801632a <TIM_TI1_SetConfig+0x66>
 8016322:	68fb      	ldr	r3, [r7, #12]
 8016324:	4a20      	ldr	r2, [pc, #128]	; (80163a8 <TIM_TI1_SetConfig+0xe4>)
 8016326:	4293      	cmp	r3, r2
 8016328:	d101      	bne.n	801632e <TIM_TI1_SetConfig+0x6a>
 801632a:	2301      	movs	r3, #1
 801632c:	e000      	b.n	8016330 <TIM_TI1_SetConfig+0x6c>
 801632e:	2300      	movs	r3, #0
 8016330:	2b00      	cmp	r3, #0
 8016332:	d008      	beq.n	8016346 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8016334:	697b      	ldr	r3, [r7, #20]
 8016336:	f023 0303 	bic.w	r3, r3, #3
 801633a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 801633c:	697a      	ldr	r2, [r7, #20]
 801633e:	687b      	ldr	r3, [r7, #4]
 8016340:	4313      	orrs	r3, r2
 8016342:	617b      	str	r3, [r7, #20]
 8016344:	e003      	b.n	801634e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8016346:	697b      	ldr	r3, [r7, #20]
 8016348:	f043 0301 	orr.w	r3, r3, #1
 801634c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801634e:	697b      	ldr	r3, [r7, #20]
 8016350:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8016354:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8016356:	683b      	ldr	r3, [r7, #0]
 8016358:	011b      	lsls	r3, r3, #4
 801635a:	b2db      	uxtb	r3, r3
 801635c:	697a      	ldr	r2, [r7, #20]
 801635e:	4313      	orrs	r3, r2
 8016360:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8016362:	693b      	ldr	r3, [r7, #16]
 8016364:	f023 030a 	bic.w	r3, r3, #10
 8016368:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 801636a:	68bb      	ldr	r3, [r7, #8]
 801636c:	f003 030a 	and.w	r3, r3, #10
 8016370:	693a      	ldr	r2, [r7, #16]
 8016372:	4313      	orrs	r3, r2
 8016374:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8016376:	68fb      	ldr	r3, [r7, #12]
 8016378:	697a      	ldr	r2, [r7, #20]
 801637a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801637c:	68fb      	ldr	r3, [r7, #12]
 801637e:	693a      	ldr	r2, [r7, #16]
 8016380:	621a      	str	r2, [r3, #32]
}
 8016382:	bf00      	nop
 8016384:	371c      	adds	r7, #28
 8016386:	46bd      	mov	sp, r7
 8016388:	f85d 7b04 	ldr.w	r7, [sp], #4
 801638c:	4770      	bx	lr
 801638e:	bf00      	nop
 8016390:	40010000 	.word	0x40010000
 8016394:	40000400 	.word	0x40000400
 8016398:	40000800 	.word	0x40000800
 801639c:	40000c00 	.word	0x40000c00
 80163a0:	40010400 	.word	0x40010400
 80163a4:	40014000 	.word	0x40014000
 80163a8:	40001800 	.word	0x40001800

080163ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80163ac:	b480      	push	{r7}
 80163ae:	b087      	sub	sp, #28
 80163b0:	af00      	add	r7, sp, #0
 80163b2:	60f8      	str	r0, [r7, #12]
 80163b4:	60b9      	str	r1, [r7, #8]
 80163b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80163b8:	68fb      	ldr	r3, [r7, #12]
 80163ba:	6a1b      	ldr	r3, [r3, #32]
 80163bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80163be:	68fb      	ldr	r3, [r7, #12]
 80163c0:	6a1b      	ldr	r3, [r3, #32]
 80163c2:	f023 0201 	bic.w	r2, r3, #1
 80163c6:	68fb      	ldr	r3, [r7, #12]
 80163c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80163ca:	68fb      	ldr	r3, [r7, #12]
 80163cc:	699b      	ldr	r3, [r3, #24]
 80163ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80163d0:	693b      	ldr	r3, [r7, #16]
 80163d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80163d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80163d8:	687b      	ldr	r3, [r7, #4]
 80163da:	011b      	lsls	r3, r3, #4
 80163dc:	693a      	ldr	r2, [r7, #16]
 80163de:	4313      	orrs	r3, r2
 80163e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80163e2:	697b      	ldr	r3, [r7, #20]
 80163e4:	f023 030a 	bic.w	r3, r3, #10
 80163e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80163ea:	697a      	ldr	r2, [r7, #20]
 80163ec:	68bb      	ldr	r3, [r7, #8]
 80163ee:	4313      	orrs	r3, r2
 80163f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80163f2:	68fb      	ldr	r3, [r7, #12]
 80163f4:	693a      	ldr	r2, [r7, #16]
 80163f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80163f8:	68fb      	ldr	r3, [r7, #12]
 80163fa:	697a      	ldr	r2, [r7, #20]
 80163fc:	621a      	str	r2, [r3, #32]
}
 80163fe:	bf00      	nop
 8016400:	371c      	adds	r7, #28
 8016402:	46bd      	mov	sp, r7
 8016404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016408:	4770      	bx	lr

0801640a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 801640a:	b480      	push	{r7}
 801640c:	b087      	sub	sp, #28
 801640e:	af00      	add	r7, sp, #0
 8016410:	60f8      	str	r0, [r7, #12]
 8016412:	60b9      	str	r1, [r7, #8]
 8016414:	607a      	str	r2, [r7, #4]
 8016416:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8016418:	68fb      	ldr	r3, [r7, #12]
 801641a:	6a1b      	ldr	r3, [r3, #32]
 801641c:	f023 0210 	bic.w	r2, r3, #16
 8016420:	68fb      	ldr	r3, [r7, #12]
 8016422:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8016424:	68fb      	ldr	r3, [r7, #12]
 8016426:	699b      	ldr	r3, [r3, #24]
 8016428:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801642a:	68fb      	ldr	r3, [r7, #12]
 801642c:	6a1b      	ldr	r3, [r3, #32]
 801642e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8016430:	697b      	ldr	r3, [r7, #20]
 8016432:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8016436:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8016438:	687b      	ldr	r3, [r7, #4]
 801643a:	021b      	lsls	r3, r3, #8
 801643c:	697a      	ldr	r2, [r7, #20]
 801643e:	4313      	orrs	r3, r2
 8016440:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8016442:	697b      	ldr	r3, [r7, #20]
 8016444:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8016448:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 801644a:	683b      	ldr	r3, [r7, #0]
 801644c:	031b      	lsls	r3, r3, #12
 801644e:	b29b      	uxth	r3, r3
 8016450:	697a      	ldr	r2, [r7, #20]
 8016452:	4313      	orrs	r3, r2
 8016454:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8016456:	693b      	ldr	r3, [r7, #16]
 8016458:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801645c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 801645e:	68bb      	ldr	r3, [r7, #8]
 8016460:	011b      	lsls	r3, r3, #4
 8016462:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8016466:	693a      	ldr	r2, [r7, #16]
 8016468:	4313      	orrs	r3, r2
 801646a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801646c:	68fb      	ldr	r3, [r7, #12]
 801646e:	697a      	ldr	r2, [r7, #20]
 8016470:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8016472:	68fb      	ldr	r3, [r7, #12]
 8016474:	693a      	ldr	r2, [r7, #16]
 8016476:	621a      	str	r2, [r3, #32]
}
 8016478:	bf00      	nop
 801647a:	371c      	adds	r7, #28
 801647c:	46bd      	mov	sp, r7
 801647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016482:	4770      	bx	lr

08016484 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8016484:	b480      	push	{r7}
 8016486:	b087      	sub	sp, #28
 8016488:	af00      	add	r7, sp, #0
 801648a:	60f8      	str	r0, [r7, #12]
 801648c:	60b9      	str	r1, [r7, #8]
 801648e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8016490:	68fb      	ldr	r3, [r7, #12]
 8016492:	6a1b      	ldr	r3, [r3, #32]
 8016494:	f023 0210 	bic.w	r2, r3, #16
 8016498:	68fb      	ldr	r3, [r7, #12]
 801649a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801649c:	68fb      	ldr	r3, [r7, #12]
 801649e:	699b      	ldr	r3, [r3, #24]
 80164a0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80164a2:	68fb      	ldr	r3, [r7, #12]
 80164a4:	6a1b      	ldr	r3, [r3, #32]
 80164a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80164a8:	697b      	ldr	r3, [r7, #20]
 80164aa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80164ae:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80164b0:	687b      	ldr	r3, [r7, #4]
 80164b2:	031b      	lsls	r3, r3, #12
 80164b4:	697a      	ldr	r2, [r7, #20]
 80164b6:	4313      	orrs	r3, r2
 80164b8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80164ba:	693b      	ldr	r3, [r7, #16]
 80164bc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80164c0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80164c2:	68bb      	ldr	r3, [r7, #8]
 80164c4:	011b      	lsls	r3, r3, #4
 80164c6:	693a      	ldr	r2, [r7, #16]
 80164c8:	4313      	orrs	r3, r2
 80164ca:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80164cc:	68fb      	ldr	r3, [r7, #12]
 80164ce:	697a      	ldr	r2, [r7, #20]
 80164d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80164d2:	68fb      	ldr	r3, [r7, #12]
 80164d4:	693a      	ldr	r2, [r7, #16]
 80164d6:	621a      	str	r2, [r3, #32]
}
 80164d8:	bf00      	nop
 80164da:	371c      	adds	r7, #28
 80164dc:	46bd      	mov	sp, r7
 80164de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164e2:	4770      	bx	lr

080164e4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80164e4:	b480      	push	{r7}
 80164e6:	b087      	sub	sp, #28
 80164e8:	af00      	add	r7, sp, #0
 80164ea:	60f8      	str	r0, [r7, #12]
 80164ec:	60b9      	str	r1, [r7, #8]
 80164ee:	607a      	str	r2, [r7, #4]
 80164f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80164f2:	68fb      	ldr	r3, [r7, #12]
 80164f4:	6a1b      	ldr	r3, [r3, #32]
 80164f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80164fa:	68fb      	ldr	r3, [r7, #12]
 80164fc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80164fe:	68fb      	ldr	r3, [r7, #12]
 8016500:	69db      	ldr	r3, [r3, #28]
 8016502:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8016504:	68fb      	ldr	r3, [r7, #12]
 8016506:	6a1b      	ldr	r3, [r3, #32]
 8016508:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 801650a:	697b      	ldr	r3, [r7, #20]
 801650c:	f023 0303 	bic.w	r3, r3, #3
 8016510:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8016512:	697a      	ldr	r2, [r7, #20]
 8016514:	687b      	ldr	r3, [r7, #4]
 8016516:	4313      	orrs	r3, r2
 8016518:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 801651a:	697b      	ldr	r3, [r7, #20]
 801651c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8016520:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8016522:	683b      	ldr	r3, [r7, #0]
 8016524:	011b      	lsls	r3, r3, #4
 8016526:	b2db      	uxtb	r3, r3
 8016528:	697a      	ldr	r2, [r7, #20]
 801652a:	4313      	orrs	r3, r2
 801652c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 801652e:	693b      	ldr	r3, [r7, #16]
 8016530:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8016534:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8016536:	68bb      	ldr	r3, [r7, #8]
 8016538:	021b      	lsls	r3, r3, #8
 801653a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 801653e:	693a      	ldr	r2, [r7, #16]
 8016540:	4313      	orrs	r3, r2
 8016542:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8016544:	68fb      	ldr	r3, [r7, #12]
 8016546:	697a      	ldr	r2, [r7, #20]
 8016548:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 801654a:	68fb      	ldr	r3, [r7, #12]
 801654c:	693a      	ldr	r2, [r7, #16]
 801654e:	621a      	str	r2, [r3, #32]
}
 8016550:	bf00      	nop
 8016552:	371c      	adds	r7, #28
 8016554:	46bd      	mov	sp, r7
 8016556:	f85d 7b04 	ldr.w	r7, [sp], #4
 801655a:	4770      	bx	lr

0801655c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 801655c:	b480      	push	{r7}
 801655e:	b087      	sub	sp, #28
 8016560:	af00      	add	r7, sp, #0
 8016562:	60f8      	str	r0, [r7, #12]
 8016564:	60b9      	str	r1, [r7, #8]
 8016566:	607a      	str	r2, [r7, #4]
 8016568:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801656a:	68fb      	ldr	r3, [r7, #12]
 801656c:	6a1b      	ldr	r3, [r3, #32]
 801656e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8016572:	68fb      	ldr	r3, [r7, #12]
 8016574:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8016576:	68fb      	ldr	r3, [r7, #12]
 8016578:	69db      	ldr	r3, [r3, #28]
 801657a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801657c:	68fb      	ldr	r3, [r7, #12]
 801657e:	6a1b      	ldr	r3, [r3, #32]
 8016580:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8016582:	697b      	ldr	r3, [r7, #20]
 8016584:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8016588:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 801658a:	687b      	ldr	r3, [r7, #4]
 801658c:	021b      	lsls	r3, r3, #8
 801658e:	697a      	ldr	r2, [r7, #20]
 8016590:	4313      	orrs	r3, r2
 8016592:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8016594:	697b      	ldr	r3, [r7, #20]
 8016596:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801659a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 801659c:	683b      	ldr	r3, [r7, #0]
 801659e:	031b      	lsls	r3, r3, #12
 80165a0:	b29b      	uxth	r3, r3
 80165a2:	697a      	ldr	r2, [r7, #20]
 80165a4:	4313      	orrs	r3, r2
 80165a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80165a8:	693b      	ldr	r3, [r7, #16]
 80165aa:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80165ae:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80165b0:	68bb      	ldr	r3, [r7, #8]
 80165b2:	031b      	lsls	r3, r3, #12
 80165b4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80165b8:	693a      	ldr	r2, [r7, #16]
 80165ba:	4313      	orrs	r3, r2
 80165bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80165be:	68fb      	ldr	r3, [r7, #12]
 80165c0:	697a      	ldr	r2, [r7, #20]
 80165c2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80165c4:	68fb      	ldr	r3, [r7, #12]
 80165c6:	693a      	ldr	r2, [r7, #16]
 80165c8:	621a      	str	r2, [r3, #32]
}
 80165ca:	bf00      	nop
 80165cc:	371c      	adds	r7, #28
 80165ce:	46bd      	mov	sp, r7
 80165d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165d4:	4770      	bx	lr

080165d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80165d6:	b480      	push	{r7}
 80165d8:	b085      	sub	sp, #20
 80165da:	af00      	add	r7, sp, #0
 80165dc:	6078      	str	r0, [r7, #4]
 80165de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80165e0:	687b      	ldr	r3, [r7, #4]
 80165e2:	689b      	ldr	r3, [r3, #8]
 80165e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80165e6:	68fb      	ldr	r3, [r7, #12]
 80165e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80165ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80165ee:	683a      	ldr	r2, [r7, #0]
 80165f0:	68fb      	ldr	r3, [r7, #12]
 80165f2:	4313      	orrs	r3, r2
 80165f4:	f043 0307 	orr.w	r3, r3, #7
 80165f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80165fa:	687b      	ldr	r3, [r7, #4]
 80165fc:	68fa      	ldr	r2, [r7, #12]
 80165fe:	609a      	str	r2, [r3, #8]
}
 8016600:	bf00      	nop
 8016602:	3714      	adds	r7, #20
 8016604:	46bd      	mov	sp, r7
 8016606:	f85d 7b04 	ldr.w	r7, [sp], #4
 801660a:	4770      	bx	lr

0801660c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801660c:	b480      	push	{r7}
 801660e:	b087      	sub	sp, #28
 8016610:	af00      	add	r7, sp, #0
 8016612:	60f8      	str	r0, [r7, #12]
 8016614:	60b9      	str	r1, [r7, #8]
 8016616:	607a      	str	r2, [r7, #4]
 8016618:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801661a:	68fb      	ldr	r3, [r7, #12]
 801661c:	689b      	ldr	r3, [r3, #8]
 801661e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8016620:	697b      	ldr	r3, [r7, #20]
 8016622:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8016626:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8016628:	683b      	ldr	r3, [r7, #0]
 801662a:	021a      	lsls	r2, r3, #8
 801662c:	687b      	ldr	r3, [r7, #4]
 801662e:	431a      	orrs	r2, r3
 8016630:	68bb      	ldr	r3, [r7, #8]
 8016632:	4313      	orrs	r3, r2
 8016634:	697a      	ldr	r2, [r7, #20]
 8016636:	4313      	orrs	r3, r2
 8016638:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801663a:	68fb      	ldr	r3, [r7, #12]
 801663c:	697a      	ldr	r2, [r7, #20]
 801663e:	609a      	str	r2, [r3, #8]
}
 8016640:	bf00      	nop
 8016642:	371c      	adds	r7, #28
 8016644:	46bd      	mov	sp, r7
 8016646:	f85d 7b04 	ldr.w	r7, [sp], #4
 801664a:	4770      	bx	lr

0801664c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801664c:	b480      	push	{r7}
 801664e:	b087      	sub	sp, #28
 8016650:	af00      	add	r7, sp, #0
 8016652:	60f8      	str	r0, [r7, #12]
 8016654:	60b9      	str	r1, [r7, #8]
 8016656:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8016658:	68bb      	ldr	r3, [r7, #8]
 801665a:	f003 031f 	and.w	r3, r3, #31
 801665e:	2201      	movs	r2, #1
 8016660:	fa02 f303 	lsl.w	r3, r2, r3
 8016664:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8016666:	68fb      	ldr	r3, [r7, #12]
 8016668:	6a1a      	ldr	r2, [r3, #32]
 801666a:	697b      	ldr	r3, [r7, #20]
 801666c:	43db      	mvns	r3, r3
 801666e:	401a      	ands	r2, r3
 8016670:	68fb      	ldr	r3, [r7, #12]
 8016672:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8016674:	68fb      	ldr	r3, [r7, #12]
 8016676:	6a1a      	ldr	r2, [r3, #32]
 8016678:	68bb      	ldr	r3, [r7, #8]
 801667a:	f003 031f 	and.w	r3, r3, #31
 801667e:	6879      	ldr	r1, [r7, #4]
 8016680:	fa01 f303 	lsl.w	r3, r1, r3
 8016684:	431a      	orrs	r2, r3
 8016686:	68fb      	ldr	r3, [r7, #12]
 8016688:	621a      	str	r2, [r3, #32]
}
 801668a:	bf00      	nop
 801668c:	371c      	adds	r7, #28
 801668e:	46bd      	mov	sp, r7
 8016690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016694:	4770      	bx	lr
	...

08016698 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8016698:	b480      	push	{r7}
 801669a:	b085      	sub	sp, #20
 801669c:	af00      	add	r7, sp, #0
 801669e:	6078      	str	r0, [r7, #4]
 80166a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80166a2:	687b      	ldr	r3, [r7, #4]
 80166a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80166a8:	2b01      	cmp	r3, #1
 80166aa:	d101      	bne.n	80166b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80166ac:	2302      	movs	r3, #2
 80166ae:	e05a      	b.n	8016766 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80166b0:	687b      	ldr	r3, [r7, #4]
 80166b2:	2201      	movs	r2, #1
 80166b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80166b8:	687b      	ldr	r3, [r7, #4]
 80166ba:	2202      	movs	r2, #2
 80166bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80166c0:	687b      	ldr	r3, [r7, #4]
 80166c2:	681b      	ldr	r3, [r3, #0]
 80166c4:	685b      	ldr	r3, [r3, #4]
 80166c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80166c8:	687b      	ldr	r3, [r7, #4]
 80166ca:	681b      	ldr	r3, [r3, #0]
 80166cc:	689b      	ldr	r3, [r3, #8]
 80166ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80166d0:	68fb      	ldr	r3, [r7, #12]
 80166d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80166d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80166d8:	683b      	ldr	r3, [r7, #0]
 80166da:	681b      	ldr	r3, [r3, #0]
 80166dc:	68fa      	ldr	r2, [r7, #12]
 80166de:	4313      	orrs	r3, r2
 80166e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80166e2:	687b      	ldr	r3, [r7, #4]
 80166e4:	681b      	ldr	r3, [r3, #0]
 80166e6:	68fa      	ldr	r2, [r7, #12]
 80166e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80166ea:	687b      	ldr	r3, [r7, #4]
 80166ec:	681b      	ldr	r3, [r3, #0]
 80166ee:	4a21      	ldr	r2, [pc, #132]	; (8016774 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80166f0:	4293      	cmp	r3, r2
 80166f2:	d022      	beq.n	801673a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80166f4:	687b      	ldr	r3, [r7, #4]
 80166f6:	681b      	ldr	r3, [r3, #0]
 80166f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80166fc:	d01d      	beq.n	801673a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80166fe:	687b      	ldr	r3, [r7, #4]
 8016700:	681b      	ldr	r3, [r3, #0]
 8016702:	4a1d      	ldr	r2, [pc, #116]	; (8016778 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8016704:	4293      	cmp	r3, r2
 8016706:	d018      	beq.n	801673a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8016708:	687b      	ldr	r3, [r7, #4]
 801670a:	681b      	ldr	r3, [r3, #0]
 801670c:	4a1b      	ldr	r2, [pc, #108]	; (801677c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 801670e:	4293      	cmp	r3, r2
 8016710:	d013      	beq.n	801673a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8016712:	687b      	ldr	r3, [r7, #4]
 8016714:	681b      	ldr	r3, [r3, #0]
 8016716:	4a1a      	ldr	r2, [pc, #104]	; (8016780 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8016718:	4293      	cmp	r3, r2
 801671a:	d00e      	beq.n	801673a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801671c:	687b      	ldr	r3, [r7, #4]
 801671e:	681b      	ldr	r3, [r3, #0]
 8016720:	4a18      	ldr	r2, [pc, #96]	; (8016784 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8016722:	4293      	cmp	r3, r2
 8016724:	d009      	beq.n	801673a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8016726:	687b      	ldr	r3, [r7, #4]
 8016728:	681b      	ldr	r3, [r3, #0]
 801672a:	4a17      	ldr	r2, [pc, #92]	; (8016788 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 801672c:	4293      	cmp	r3, r2
 801672e:	d004      	beq.n	801673a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8016730:	687b      	ldr	r3, [r7, #4]
 8016732:	681b      	ldr	r3, [r3, #0]
 8016734:	4a15      	ldr	r2, [pc, #84]	; (801678c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8016736:	4293      	cmp	r3, r2
 8016738:	d10c      	bne.n	8016754 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801673a:	68bb      	ldr	r3, [r7, #8]
 801673c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8016740:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8016742:	683b      	ldr	r3, [r7, #0]
 8016744:	685b      	ldr	r3, [r3, #4]
 8016746:	68ba      	ldr	r2, [r7, #8]
 8016748:	4313      	orrs	r3, r2
 801674a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801674c:	687b      	ldr	r3, [r7, #4]
 801674e:	681b      	ldr	r3, [r3, #0]
 8016750:	68ba      	ldr	r2, [r7, #8]
 8016752:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8016754:	687b      	ldr	r3, [r7, #4]
 8016756:	2201      	movs	r2, #1
 8016758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801675c:	687b      	ldr	r3, [r7, #4]
 801675e:	2200      	movs	r2, #0
 8016760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8016764:	2300      	movs	r3, #0
}
 8016766:	4618      	mov	r0, r3
 8016768:	3714      	adds	r7, #20
 801676a:	46bd      	mov	sp, r7
 801676c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016770:	4770      	bx	lr
 8016772:	bf00      	nop
 8016774:	40010000 	.word	0x40010000
 8016778:	40000400 	.word	0x40000400
 801677c:	40000800 	.word	0x40000800
 8016780:	40000c00 	.word	0x40000c00
 8016784:	40010400 	.word	0x40010400
 8016788:	40014000 	.word	0x40014000
 801678c:	40001800 	.word	0x40001800

08016790 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8016790:	b480      	push	{r7}
 8016792:	b085      	sub	sp, #20
 8016794:	af00      	add	r7, sp, #0
 8016796:	6078      	str	r0, [r7, #4]
 8016798:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 801679a:	2300      	movs	r3, #0
 801679c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 801679e:	687b      	ldr	r3, [r7, #4]
 80167a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80167a4:	2b01      	cmp	r3, #1
 80167a6:	d101      	bne.n	80167ac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80167a8:	2302      	movs	r3, #2
 80167aa:	e03d      	b.n	8016828 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80167ac:	687b      	ldr	r3, [r7, #4]
 80167ae:	2201      	movs	r2, #1
 80167b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80167b4:	68fb      	ldr	r3, [r7, #12]
 80167b6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80167ba:	683b      	ldr	r3, [r7, #0]
 80167bc:	68db      	ldr	r3, [r3, #12]
 80167be:	4313      	orrs	r3, r2
 80167c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80167c2:	68fb      	ldr	r3, [r7, #12]
 80167c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80167c8:	683b      	ldr	r3, [r7, #0]
 80167ca:	689b      	ldr	r3, [r3, #8]
 80167cc:	4313      	orrs	r3, r2
 80167ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80167d0:	68fb      	ldr	r3, [r7, #12]
 80167d2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80167d6:	683b      	ldr	r3, [r7, #0]
 80167d8:	685b      	ldr	r3, [r3, #4]
 80167da:	4313      	orrs	r3, r2
 80167dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80167de:	68fb      	ldr	r3, [r7, #12]
 80167e0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80167e4:	683b      	ldr	r3, [r7, #0]
 80167e6:	681b      	ldr	r3, [r3, #0]
 80167e8:	4313      	orrs	r3, r2
 80167ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80167ec:	68fb      	ldr	r3, [r7, #12]
 80167ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80167f2:	683b      	ldr	r3, [r7, #0]
 80167f4:	691b      	ldr	r3, [r3, #16]
 80167f6:	4313      	orrs	r3, r2
 80167f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80167fa:	68fb      	ldr	r3, [r7, #12]
 80167fc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8016800:	683b      	ldr	r3, [r7, #0]
 8016802:	695b      	ldr	r3, [r3, #20]
 8016804:	4313      	orrs	r3, r2
 8016806:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8016808:	68fb      	ldr	r3, [r7, #12]
 801680a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 801680e:	683b      	ldr	r3, [r7, #0]
 8016810:	69db      	ldr	r3, [r3, #28]
 8016812:	4313      	orrs	r3, r2
 8016814:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8016816:	687b      	ldr	r3, [r7, #4]
 8016818:	681b      	ldr	r3, [r3, #0]
 801681a:	68fa      	ldr	r2, [r7, #12]
 801681c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 801681e:	687b      	ldr	r3, [r7, #4]
 8016820:	2200      	movs	r2, #0
 8016822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8016826:	2300      	movs	r3, #0
}
 8016828:	4618      	mov	r0, r3
 801682a:	3714      	adds	r7, #20
 801682c:	46bd      	mov	sp, r7
 801682e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016832:	4770      	bx	lr

08016834 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8016834:	b480      	push	{r7}
 8016836:	b083      	sub	sp, #12
 8016838:	af00      	add	r7, sp, #0
 801683a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801683c:	bf00      	nop
 801683e:	370c      	adds	r7, #12
 8016840:	46bd      	mov	sp, r7
 8016842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016846:	4770      	bx	lr

08016848 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8016848:	b480      	push	{r7}
 801684a:	b083      	sub	sp, #12
 801684c:	af00      	add	r7, sp, #0
 801684e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8016850:	bf00      	nop
 8016852:	370c      	adds	r7, #12
 8016854:	46bd      	mov	sp, r7
 8016856:	f85d 7b04 	ldr.w	r7, [sp], #4
 801685a:	4770      	bx	lr

0801685c <__NVIC_SetPriority>:
{
 801685c:	b480      	push	{r7}
 801685e:	b083      	sub	sp, #12
 8016860:	af00      	add	r7, sp, #0
 8016862:	4603      	mov	r3, r0
 8016864:	6039      	str	r1, [r7, #0]
 8016866:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8016868:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801686c:	2b00      	cmp	r3, #0
 801686e:	db0a      	blt.n	8016886 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8016870:	683b      	ldr	r3, [r7, #0]
 8016872:	b2da      	uxtb	r2, r3
 8016874:	490c      	ldr	r1, [pc, #48]	; (80168a8 <__NVIC_SetPriority+0x4c>)
 8016876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801687a:	0112      	lsls	r2, r2, #4
 801687c:	b2d2      	uxtb	r2, r2
 801687e:	440b      	add	r3, r1
 8016880:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8016884:	e00a      	b.n	801689c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8016886:	683b      	ldr	r3, [r7, #0]
 8016888:	b2da      	uxtb	r2, r3
 801688a:	4908      	ldr	r1, [pc, #32]	; (80168ac <__NVIC_SetPriority+0x50>)
 801688c:	79fb      	ldrb	r3, [r7, #7]
 801688e:	f003 030f 	and.w	r3, r3, #15
 8016892:	3b04      	subs	r3, #4
 8016894:	0112      	lsls	r2, r2, #4
 8016896:	b2d2      	uxtb	r2, r2
 8016898:	440b      	add	r3, r1
 801689a:	761a      	strb	r2, [r3, #24]
}
 801689c:	bf00      	nop
 801689e:	370c      	adds	r7, #12
 80168a0:	46bd      	mov	sp, r7
 80168a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168a6:	4770      	bx	lr
 80168a8:	e000e100 	.word	0xe000e100
 80168ac:	e000ed00 	.word	0xe000ed00

080168b0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80168b0:	b580      	push	{r7, lr}
 80168b2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80168b4:	4b05      	ldr	r3, [pc, #20]	; (80168cc <SysTick_Handler+0x1c>)
 80168b6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80168b8:	f002 f832 	bl	8018920 <xTaskGetSchedulerState>
 80168bc:	4603      	mov	r3, r0
 80168be:	2b01      	cmp	r3, #1
 80168c0:	d001      	beq.n	80168c6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80168c2:	f002 fe21 	bl	8019508 <xPortSysTickHandler>
  }
}
 80168c6:	bf00      	nop
 80168c8:	bd80      	pop	{r7, pc}
 80168ca:	bf00      	nop
 80168cc:	e000e010 	.word	0xe000e010

080168d0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80168d0:	b580      	push	{r7, lr}
 80168d2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80168d4:	2100      	movs	r1, #0
 80168d6:	f06f 0004 	mvn.w	r0, #4
 80168da:	f7ff ffbf 	bl	801685c <__NVIC_SetPriority>
#endif
}
 80168de:	bf00      	nop
 80168e0:	bd80      	pop	{r7, pc}
	...

080168e4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80168e4:	b480      	push	{r7}
 80168e6:	b083      	sub	sp, #12
 80168e8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80168ea:	f3ef 8305 	mrs	r3, IPSR
 80168ee:	603b      	str	r3, [r7, #0]
  return(result);
 80168f0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80168f2:	2b00      	cmp	r3, #0
 80168f4:	d003      	beq.n	80168fe <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80168f6:	f06f 0305 	mvn.w	r3, #5
 80168fa:	607b      	str	r3, [r7, #4]
 80168fc:	e00c      	b.n	8016918 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80168fe:	4b0a      	ldr	r3, [pc, #40]	; (8016928 <osKernelInitialize+0x44>)
 8016900:	681b      	ldr	r3, [r3, #0]
 8016902:	2b00      	cmp	r3, #0
 8016904:	d105      	bne.n	8016912 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8016906:	4b08      	ldr	r3, [pc, #32]	; (8016928 <osKernelInitialize+0x44>)
 8016908:	2201      	movs	r2, #1
 801690a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 801690c:	2300      	movs	r3, #0
 801690e:	607b      	str	r3, [r7, #4]
 8016910:	e002      	b.n	8016918 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8016912:	f04f 33ff 	mov.w	r3, #4294967295
 8016916:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8016918:	687b      	ldr	r3, [r7, #4]
}
 801691a:	4618      	mov	r0, r3
 801691c:	370c      	adds	r7, #12
 801691e:	46bd      	mov	sp, r7
 8016920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016924:	4770      	bx	lr
 8016926:	bf00      	nop
 8016928:	20001800 	.word	0x20001800

0801692c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 801692c:	b580      	push	{r7, lr}
 801692e:	b082      	sub	sp, #8
 8016930:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016932:	f3ef 8305 	mrs	r3, IPSR
 8016936:	603b      	str	r3, [r7, #0]
  return(result);
 8016938:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801693a:	2b00      	cmp	r3, #0
 801693c:	d003      	beq.n	8016946 <osKernelStart+0x1a>
    stat = osErrorISR;
 801693e:	f06f 0305 	mvn.w	r3, #5
 8016942:	607b      	str	r3, [r7, #4]
 8016944:	e010      	b.n	8016968 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8016946:	4b0b      	ldr	r3, [pc, #44]	; (8016974 <osKernelStart+0x48>)
 8016948:	681b      	ldr	r3, [r3, #0]
 801694a:	2b01      	cmp	r3, #1
 801694c:	d109      	bne.n	8016962 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 801694e:	f7ff ffbf 	bl	80168d0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8016952:	4b08      	ldr	r3, [pc, #32]	; (8016974 <osKernelStart+0x48>)
 8016954:	2202      	movs	r2, #2
 8016956:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8016958:	f001 fb08 	bl	8017f6c <vTaskStartScheduler>
      stat = osOK;
 801695c:	2300      	movs	r3, #0
 801695e:	607b      	str	r3, [r7, #4]
 8016960:	e002      	b.n	8016968 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8016962:	f04f 33ff 	mov.w	r3, #4294967295
 8016966:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8016968:	687b      	ldr	r3, [r7, #4]
}
 801696a:	4618      	mov	r0, r3
 801696c:	3708      	adds	r7, #8
 801696e:	46bd      	mov	sp, r7
 8016970:	bd80      	pop	{r7, pc}
 8016972:	bf00      	nop
 8016974:	20001800 	.word	0x20001800

08016978 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8016978:	b580      	push	{r7, lr}
 801697a:	b082      	sub	sp, #8
 801697c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801697e:	f3ef 8305 	mrs	r3, IPSR
 8016982:	603b      	str	r3, [r7, #0]
  return(result);
 8016984:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8016986:	2b00      	cmp	r3, #0
 8016988:	d003      	beq.n	8016992 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 801698a:	f001 fc31 	bl	80181f0 <xTaskGetTickCountFromISR>
 801698e:	6078      	str	r0, [r7, #4]
 8016990:	e002      	b.n	8016998 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8016992:	f001 fc1d 	bl	80181d0 <xTaskGetTickCount>
 8016996:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8016998:	687b      	ldr	r3, [r7, #4]
}
 801699a:	4618      	mov	r0, r3
 801699c:	3708      	adds	r7, #8
 801699e:	46bd      	mov	sp, r7
 80169a0:	bd80      	pop	{r7, pc}

080169a2 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80169a2:	b580      	push	{r7, lr}
 80169a4:	b08e      	sub	sp, #56	; 0x38
 80169a6:	af04      	add	r7, sp, #16
 80169a8:	60f8      	str	r0, [r7, #12]
 80169aa:	60b9      	str	r1, [r7, #8]
 80169ac:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80169ae:	2300      	movs	r3, #0
 80169b0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80169b2:	f3ef 8305 	mrs	r3, IPSR
 80169b6:	617b      	str	r3, [r7, #20]
  return(result);
 80169b8:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80169ba:	2b00      	cmp	r3, #0
 80169bc:	d17e      	bne.n	8016abc <osThreadNew+0x11a>
 80169be:	68fb      	ldr	r3, [r7, #12]
 80169c0:	2b00      	cmp	r3, #0
 80169c2:	d07b      	beq.n	8016abc <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80169c4:	2380      	movs	r3, #128	; 0x80
 80169c6:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80169c8:	2318      	movs	r3, #24
 80169ca:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80169cc:	2300      	movs	r3, #0
 80169ce:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80169d0:	f04f 33ff 	mov.w	r3, #4294967295
 80169d4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80169d6:	687b      	ldr	r3, [r7, #4]
 80169d8:	2b00      	cmp	r3, #0
 80169da:	d045      	beq.n	8016a68 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80169dc:	687b      	ldr	r3, [r7, #4]
 80169de:	681b      	ldr	r3, [r3, #0]
 80169e0:	2b00      	cmp	r3, #0
 80169e2:	d002      	beq.n	80169ea <osThreadNew+0x48>
        name = attr->name;
 80169e4:	687b      	ldr	r3, [r7, #4]
 80169e6:	681b      	ldr	r3, [r3, #0]
 80169e8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80169ea:	687b      	ldr	r3, [r7, #4]
 80169ec:	699b      	ldr	r3, [r3, #24]
 80169ee:	2b00      	cmp	r3, #0
 80169f0:	d002      	beq.n	80169f8 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80169f2:	687b      	ldr	r3, [r7, #4]
 80169f4:	699b      	ldr	r3, [r3, #24]
 80169f6:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80169f8:	69fb      	ldr	r3, [r7, #28]
 80169fa:	2b00      	cmp	r3, #0
 80169fc:	d008      	beq.n	8016a10 <osThreadNew+0x6e>
 80169fe:	69fb      	ldr	r3, [r7, #28]
 8016a00:	2b38      	cmp	r3, #56	; 0x38
 8016a02:	d805      	bhi.n	8016a10 <osThreadNew+0x6e>
 8016a04:	687b      	ldr	r3, [r7, #4]
 8016a06:	685b      	ldr	r3, [r3, #4]
 8016a08:	f003 0301 	and.w	r3, r3, #1
 8016a0c:	2b00      	cmp	r3, #0
 8016a0e:	d001      	beq.n	8016a14 <osThreadNew+0x72>
        return (NULL);
 8016a10:	2300      	movs	r3, #0
 8016a12:	e054      	b.n	8016abe <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8016a14:	687b      	ldr	r3, [r7, #4]
 8016a16:	695b      	ldr	r3, [r3, #20]
 8016a18:	2b00      	cmp	r3, #0
 8016a1a:	d003      	beq.n	8016a24 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8016a1c:	687b      	ldr	r3, [r7, #4]
 8016a1e:	695b      	ldr	r3, [r3, #20]
 8016a20:	089b      	lsrs	r3, r3, #2
 8016a22:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8016a24:	687b      	ldr	r3, [r7, #4]
 8016a26:	689b      	ldr	r3, [r3, #8]
 8016a28:	2b00      	cmp	r3, #0
 8016a2a:	d00e      	beq.n	8016a4a <osThreadNew+0xa8>
 8016a2c:	687b      	ldr	r3, [r7, #4]
 8016a2e:	68db      	ldr	r3, [r3, #12]
 8016a30:	2bcb      	cmp	r3, #203	; 0xcb
 8016a32:	d90a      	bls.n	8016a4a <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8016a34:	687b      	ldr	r3, [r7, #4]
 8016a36:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8016a38:	2b00      	cmp	r3, #0
 8016a3a:	d006      	beq.n	8016a4a <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8016a3c:	687b      	ldr	r3, [r7, #4]
 8016a3e:	695b      	ldr	r3, [r3, #20]
 8016a40:	2b00      	cmp	r3, #0
 8016a42:	d002      	beq.n	8016a4a <osThreadNew+0xa8>
        mem = 1;
 8016a44:	2301      	movs	r3, #1
 8016a46:	61bb      	str	r3, [r7, #24]
 8016a48:	e010      	b.n	8016a6c <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8016a4a:	687b      	ldr	r3, [r7, #4]
 8016a4c:	689b      	ldr	r3, [r3, #8]
 8016a4e:	2b00      	cmp	r3, #0
 8016a50:	d10c      	bne.n	8016a6c <osThreadNew+0xca>
 8016a52:	687b      	ldr	r3, [r7, #4]
 8016a54:	68db      	ldr	r3, [r3, #12]
 8016a56:	2b00      	cmp	r3, #0
 8016a58:	d108      	bne.n	8016a6c <osThreadNew+0xca>
 8016a5a:	687b      	ldr	r3, [r7, #4]
 8016a5c:	691b      	ldr	r3, [r3, #16]
 8016a5e:	2b00      	cmp	r3, #0
 8016a60:	d104      	bne.n	8016a6c <osThreadNew+0xca>
          mem = 0;
 8016a62:	2300      	movs	r3, #0
 8016a64:	61bb      	str	r3, [r7, #24]
 8016a66:	e001      	b.n	8016a6c <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8016a68:	2300      	movs	r3, #0
 8016a6a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8016a6c:	69bb      	ldr	r3, [r7, #24]
 8016a6e:	2b01      	cmp	r3, #1
 8016a70:	d110      	bne.n	8016a94 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8016a72:	687b      	ldr	r3, [r7, #4]
 8016a74:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8016a76:	687a      	ldr	r2, [r7, #4]
 8016a78:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8016a7a:	9202      	str	r2, [sp, #8]
 8016a7c:	9301      	str	r3, [sp, #4]
 8016a7e:	69fb      	ldr	r3, [r7, #28]
 8016a80:	9300      	str	r3, [sp, #0]
 8016a82:	68bb      	ldr	r3, [r7, #8]
 8016a84:	6a3a      	ldr	r2, [r7, #32]
 8016a86:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016a88:	68f8      	ldr	r0, [r7, #12]
 8016a8a:	f000 ffe1 	bl	8017a50 <xTaskCreateStatic>
 8016a8e:	4603      	mov	r3, r0
 8016a90:	613b      	str	r3, [r7, #16]
 8016a92:	e013      	b.n	8016abc <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8016a94:	69bb      	ldr	r3, [r7, #24]
 8016a96:	2b00      	cmp	r3, #0
 8016a98:	d110      	bne.n	8016abc <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8016a9a:	6a3b      	ldr	r3, [r7, #32]
 8016a9c:	b29a      	uxth	r2, r3
 8016a9e:	f107 0310 	add.w	r3, r7, #16
 8016aa2:	9301      	str	r3, [sp, #4]
 8016aa4:	69fb      	ldr	r3, [r7, #28]
 8016aa6:	9300      	str	r3, [sp, #0]
 8016aa8:	68bb      	ldr	r3, [r7, #8]
 8016aaa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016aac:	68f8      	ldr	r0, [r7, #12]
 8016aae:	f001 f82c 	bl	8017b0a <xTaskCreate>
 8016ab2:	4603      	mov	r3, r0
 8016ab4:	2b01      	cmp	r3, #1
 8016ab6:	d001      	beq.n	8016abc <osThreadNew+0x11a>
            hTask = NULL;
 8016ab8:	2300      	movs	r3, #0
 8016aba:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8016abc:	693b      	ldr	r3, [r7, #16]
}
 8016abe:	4618      	mov	r0, r3
 8016ac0:	3728      	adds	r7, #40	; 0x28
 8016ac2:	46bd      	mov	sp, r7
 8016ac4:	bd80      	pop	{r7, pc}

08016ac6 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8016ac6:	b580      	push	{r7, lr}
 8016ac8:	b084      	sub	sp, #16
 8016aca:	af00      	add	r7, sp, #0
 8016acc:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016ace:	f3ef 8305 	mrs	r3, IPSR
 8016ad2:	60bb      	str	r3, [r7, #8]
  return(result);
 8016ad4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8016ad6:	2b00      	cmp	r3, #0
 8016ad8:	d003      	beq.n	8016ae2 <osDelay+0x1c>
    stat = osErrorISR;
 8016ada:	f06f 0305 	mvn.w	r3, #5
 8016ade:	60fb      	str	r3, [r7, #12]
 8016ae0:	e007      	b.n	8016af2 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8016ae2:	2300      	movs	r3, #0
 8016ae4:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8016ae6:	687b      	ldr	r3, [r7, #4]
 8016ae8:	2b00      	cmp	r3, #0
 8016aea:	d002      	beq.n	8016af2 <osDelay+0x2c>
      vTaskDelay(ticks);
 8016aec:	6878      	ldr	r0, [r7, #4]
 8016aee:	f001 fa05 	bl	8017efc <vTaskDelay>
    }
  }

  return (stat);
 8016af2:	68fb      	ldr	r3, [r7, #12]
}
 8016af4:	4618      	mov	r0, r3
 8016af6:	3710      	adds	r7, #16
 8016af8:	46bd      	mov	sp, r7
 8016afa:	bd80      	pop	{r7, pc}

08016afc <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 8016afc:	b580      	push	{r7, lr}
 8016afe:	b086      	sub	sp, #24
 8016b00:	af00      	add	r7, sp, #0
 8016b02:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016b04:	f3ef 8305 	mrs	r3, IPSR
 8016b08:	60fb      	str	r3, [r7, #12]
  return(result);
 8016b0a:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 8016b0c:	2b00      	cmp	r3, #0
 8016b0e:	d003      	beq.n	8016b18 <osDelayUntil+0x1c>
    stat = osErrorISR;
 8016b10:	f06f 0305 	mvn.w	r3, #5
 8016b14:	617b      	str	r3, [r7, #20]
 8016b16:	e019      	b.n	8016b4c <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 8016b18:	2300      	movs	r3, #0
 8016b1a:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 8016b1c:	f001 fb58 	bl	80181d0 <xTaskGetTickCount>
 8016b20:	4603      	mov	r3, r0
 8016b22:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 8016b24:	68bb      	ldr	r3, [r7, #8]
 8016b26:	687a      	ldr	r2, [r7, #4]
 8016b28:	1ad3      	subs	r3, r2, r3
 8016b2a:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 8016b2c:	693b      	ldr	r3, [r7, #16]
 8016b2e:	2b00      	cmp	r3, #0
 8016b30:	d009      	beq.n	8016b46 <osDelayUntil+0x4a>
 8016b32:	693b      	ldr	r3, [r7, #16]
 8016b34:	2b00      	cmp	r3, #0
 8016b36:	db06      	blt.n	8016b46 <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 8016b38:	f107 0308 	add.w	r3, r7, #8
 8016b3c:	6939      	ldr	r1, [r7, #16]
 8016b3e:	4618      	mov	r0, r3
 8016b40:	f001 f95c 	bl	8017dfc <vTaskDelayUntil>
 8016b44:	e002      	b.n	8016b4c <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 8016b46:	f06f 0303 	mvn.w	r3, #3
 8016b4a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8016b4c:	697b      	ldr	r3, [r7, #20]
}
 8016b4e:	4618      	mov	r0, r3
 8016b50:	3718      	adds	r7, #24
 8016b52:	46bd      	mov	sp, r7
 8016b54:	bd80      	pop	{r7, pc}
	...

08016b58 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8016b58:	b480      	push	{r7}
 8016b5a:	b085      	sub	sp, #20
 8016b5c:	af00      	add	r7, sp, #0
 8016b5e:	60f8      	str	r0, [r7, #12]
 8016b60:	60b9      	str	r1, [r7, #8]
 8016b62:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8016b64:	68fb      	ldr	r3, [r7, #12]
 8016b66:	4a07      	ldr	r2, [pc, #28]	; (8016b84 <vApplicationGetIdleTaskMemory+0x2c>)
 8016b68:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8016b6a:	68bb      	ldr	r3, [r7, #8]
 8016b6c:	4a06      	ldr	r2, [pc, #24]	; (8016b88 <vApplicationGetIdleTaskMemory+0x30>)
 8016b6e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8016b70:	687b      	ldr	r3, [r7, #4]
 8016b72:	2280      	movs	r2, #128	; 0x80
 8016b74:	601a      	str	r2, [r3, #0]
}
 8016b76:	bf00      	nop
 8016b78:	3714      	adds	r7, #20
 8016b7a:	46bd      	mov	sp, r7
 8016b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b80:	4770      	bx	lr
 8016b82:	bf00      	nop
 8016b84:	20001804 	.word	0x20001804
 8016b88:	200018d0 	.word	0x200018d0

08016b8c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8016b8c:	b480      	push	{r7}
 8016b8e:	b085      	sub	sp, #20
 8016b90:	af00      	add	r7, sp, #0
 8016b92:	60f8      	str	r0, [r7, #12]
 8016b94:	60b9      	str	r1, [r7, #8]
 8016b96:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8016b98:	68fb      	ldr	r3, [r7, #12]
 8016b9a:	4a07      	ldr	r2, [pc, #28]	; (8016bb8 <vApplicationGetTimerTaskMemory+0x2c>)
 8016b9c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8016b9e:	68bb      	ldr	r3, [r7, #8]
 8016ba0:	4a06      	ldr	r2, [pc, #24]	; (8016bbc <vApplicationGetTimerTaskMemory+0x30>)
 8016ba2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8016ba4:	687b      	ldr	r3, [r7, #4]
 8016ba6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8016baa:	601a      	str	r2, [r3, #0]
}
 8016bac:	bf00      	nop
 8016bae:	3714      	adds	r7, #20
 8016bb0:	46bd      	mov	sp, r7
 8016bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bb6:	4770      	bx	lr
 8016bb8:	20001ad0 	.word	0x20001ad0
 8016bbc:	20001b9c 	.word	0x20001b9c

08016bc0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8016bc0:	b480      	push	{r7}
 8016bc2:	b083      	sub	sp, #12
 8016bc4:	af00      	add	r7, sp, #0
 8016bc6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8016bc8:	687b      	ldr	r3, [r7, #4]
 8016bca:	f103 0208 	add.w	r2, r3, #8
 8016bce:	687b      	ldr	r3, [r7, #4]
 8016bd0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8016bd2:	687b      	ldr	r3, [r7, #4]
 8016bd4:	f04f 32ff 	mov.w	r2, #4294967295
 8016bd8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8016bda:	687b      	ldr	r3, [r7, #4]
 8016bdc:	f103 0208 	add.w	r2, r3, #8
 8016be0:	687b      	ldr	r3, [r7, #4]
 8016be2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8016be4:	687b      	ldr	r3, [r7, #4]
 8016be6:	f103 0208 	add.w	r2, r3, #8
 8016bea:	687b      	ldr	r3, [r7, #4]
 8016bec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8016bee:	687b      	ldr	r3, [r7, #4]
 8016bf0:	2200      	movs	r2, #0
 8016bf2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8016bf4:	bf00      	nop
 8016bf6:	370c      	adds	r7, #12
 8016bf8:	46bd      	mov	sp, r7
 8016bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bfe:	4770      	bx	lr

08016c00 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8016c00:	b480      	push	{r7}
 8016c02:	b083      	sub	sp, #12
 8016c04:	af00      	add	r7, sp, #0
 8016c06:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8016c08:	687b      	ldr	r3, [r7, #4]
 8016c0a:	2200      	movs	r2, #0
 8016c0c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8016c0e:	bf00      	nop
 8016c10:	370c      	adds	r7, #12
 8016c12:	46bd      	mov	sp, r7
 8016c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c18:	4770      	bx	lr

08016c1a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8016c1a:	b480      	push	{r7}
 8016c1c:	b085      	sub	sp, #20
 8016c1e:	af00      	add	r7, sp, #0
 8016c20:	6078      	str	r0, [r7, #4]
 8016c22:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8016c24:	687b      	ldr	r3, [r7, #4]
 8016c26:	685b      	ldr	r3, [r3, #4]
 8016c28:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8016c2a:	683b      	ldr	r3, [r7, #0]
 8016c2c:	68fa      	ldr	r2, [r7, #12]
 8016c2e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8016c30:	68fb      	ldr	r3, [r7, #12]
 8016c32:	689a      	ldr	r2, [r3, #8]
 8016c34:	683b      	ldr	r3, [r7, #0]
 8016c36:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8016c38:	68fb      	ldr	r3, [r7, #12]
 8016c3a:	689b      	ldr	r3, [r3, #8]
 8016c3c:	683a      	ldr	r2, [r7, #0]
 8016c3e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8016c40:	68fb      	ldr	r3, [r7, #12]
 8016c42:	683a      	ldr	r2, [r7, #0]
 8016c44:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8016c46:	683b      	ldr	r3, [r7, #0]
 8016c48:	687a      	ldr	r2, [r7, #4]
 8016c4a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8016c4c:	687b      	ldr	r3, [r7, #4]
 8016c4e:	681b      	ldr	r3, [r3, #0]
 8016c50:	1c5a      	adds	r2, r3, #1
 8016c52:	687b      	ldr	r3, [r7, #4]
 8016c54:	601a      	str	r2, [r3, #0]
}
 8016c56:	bf00      	nop
 8016c58:	3714      	adds	r7, #20
 8016c5a:	46bd      	mov	sp, r7
 8016c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c60:	4770      	bx	lr

08016c62 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8016c62:	b480      	push	{r7}
 8016c64:	b085      	sub	sp, #20
 8016c66:	af00      	add	r7, sp, #0
 8016c68:	6078      	str	r0, [r7, #4]
 8016c6a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8016c6c:	683b      	ldr	r3, [r7, #0]
 8016c6e:	681b      	ldr	r3, [r3, #0]
 8016c70:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8016c72:	68bb      	ldr	r3, [r7, #8]
 8016c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016c78:	d103      	bne.n	8016c82 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8016c7a:	687b      	ldr	r3, [r7, #4]
 8016c7c:	691b      	ldr	r3, [r3, #16]
 8016c7e:	60fb      	str	r3, [r7, #12]
 8016c80:	e00c      	b.n	8016c9c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8016c82:	687b      	ldr	r3, [r7, #4]
 8016c84:	3308      	adds	r3, #8
 8016c86:	60fb      	str	r3, [r7, #12]
 8016c88:	e002      	b.n	8016c90 <vListInsert+0x2e>
 8016c8a:	68fb      	ldr	r3, [r7, #12]
 8016c8c:	685b      	ldr	r3, [r3, #4]
 8016c8e:	60fb      	str	r3, [r7, #12]
 8016c90:	68fb      	ldr	r3, [r7, #12]
 8016c92:	685b      	ldr	r3, [r3, #4]
 8016c94:	681b      	ldr	r3, [r3, #0]
 8016c96:	68ba      	ldr	r2, [r7, #8]
 8016c98:	429a      	cmp	r2, r3
 8016c9a:	d2f6      	bcs.n	8016c8a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8016c9c:	68fb      	ldr	r3, [r7, #12]
 8016c9e:	685a      	ldr	r2, [r3, #4]
 8016ca0:	683b      	ldr	r3, [r7, #0]
 8016ca2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8016ca4:	683b      	ldr	r3, [r7, #0]
 8016ca6:	685b      	ldr	r3, [r3, #4]
 8016ca8:	683a      	ldr	r2, [r7, #0]
 8016caa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8016cac:	683b      	ldr	r3, [r7, #0]
 8016cae:	68fa      	ldr	r2, [r7, #12]
 8016cb0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8016cb2:	68fb      	ldr	r3, [r7, #12]
 8016cb4:	683a      	ldr	r2, [r7, #0]
 8016cb6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8016cb8:	683b      	ldr	r3, [r7, #0]
 8016cba:	687a      	ldr	r2, [r7, #4]
 8016cbc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8016cbe:	687b      	ldr	r3, [r7, #4]
 8016cc0:	681b      	ldr	r3, [r3, #0]
 8016cc2:	1c5a      	adds	r2, r3, #1
 8016cc4:	687b      	ldr	r3, [r7, #4]
 8016cc6:	601a      	str	r2, [r3, #0]
}
 8016cc8:	bf00      	nop
 8016cca:	3714      	adds	r7, #20
 8016ccc:	46bd      	mov	sp, r7
 8016cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cd2:	4770      	bx	lr

08016cd4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8016cd4:	b480      	push	{r7}
 8016cd6:	b085      	sub	sp, #20
 8016cd8:	af00      	add	r7, sp, #0
 8016cda:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8016cdc:	687b      	ldr	r3, [r7, #4]
 8016cde:	691b      	ldr	r3, [r3, #16]
 8016ce0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8016ce2:	687b      	ldr	r3, [r7, #4]
 8016ce4:	685b      	ldr	r3, [r3, #4]
 8016ce6:	687a      	ldr	r2, [r7, #4]
 8016ce8:	6892      	ldr	r2, [r2, #8]
 8016cea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8016cec:	687b      	ldr	r3, [r7, #4]
 8016cee:	689b      	ldr	r3, [r3, #8]
 8016cf0:	687a      	ldr	r2, [r7, #4]
 8016cf2:	6852      	ldr	r2, [r2, #4]
 8016cf4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8016cf6:	68fb      	ldr	r3, [r7, #12]
 8016cf8:	685b      	ldr	r3, [r3, #4]
 8016cfa:	687a      	ldr	r2, [r7, #4]
 8016cfc:	429a      	cmp	r2, r3
 8016cfe:	d103      	bne.n	8016d08 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8016d00:	687b      	ldr	r3, [r7, #4]
 8016d02:	689a      	ldr	r2, [r3, #8]
 8016d04:	68fb      	ldr	r3, [r7, #12]
 8016d06:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8016d08:	687b      	ldr	r3, [r7, #4]
 8016d0a:	2200      	movs	r2, #0
 8016d0c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8016d0e:	68fb      	ldr	r3, [r7, #12]
 8016d10:	681b      	ldr	r3, [r3, #0]
 8016d12:	1e5a      	subs	r2, r3, #1
 8016d14:	68fb      	ldr	r3, [r7, #12]
 8016d16:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8016d18:	68fb      	ldr	r3, [r7, #12]
 8016d1a:	681b      	ldr	r3, [r3, #0]
}
 8016d1c:	4618      	mov	r0, r3
 8016d1e:	3714      	adds	r7, #20
 8016d20:	46bd      	mov	sp, r7
 8016d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d26:	4770      	bx	lr

08016d28 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8016d28:	b580      	push	{r7, lr}
 8016d2a:	b084      	sub	sp, #16
 8016d2c:	af00      	add	r7, sp, #0
 8016d2e:	6078      	str	r0, [r7, #4]
 8016d30:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8016d32:	687b      	ldr	r3, [r7, #4]
 8016d34:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8016d36:	68fb      	ldr	r3, [r7, #12]
 8016d38:	2b00      	cmp	r3, #0
 8016d3a:	d10a      	bne.n	8016d52 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8016d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d40:	f383 8811 	msr	BASEPRI, r3
 8016d44:	f3bf 8f6f 	isb	sy
 8016d48:	f3bf 8f4f 	dsb	sy
 8016d4c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8016d4e:	bf00      	nop
 8016d50:	e7fe      	b.n	8016d50 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8016d52:	f002 fb47 	bl	80193e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016d56:	68fb      	ldr	r3, [r7, #12]
 8016d58:	681a      	ldr	r2, [r3, #0]
 8016d5a:	68fb      	ldr	r3, [r7, #12]
 8016d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016d5e:	68f9      	ldr	r1, [r7, #12]
 8016d60:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8016d62:	fb01 f303 	mul.w	r3, r1, r3
 8016d66:	441a      	add	r2, r3
 8016d68:	68fb      	ldr	r3, [r7, #12]
 8016d6a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8016d6c:	68fb      	ldr	r3, [r7, #12]
 8016d6e:	2200      	movs	r2, #0
 8016d70:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8016d72:	68fb      	ldr	r3, [r7, #12]
 8016d74:	681a      	ldr	r2, [r3, #0]
 8016d76:	68fb      	ldr	r3, [r7, #12]
 8016d78:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016d7a:	68fb      	ldr	r3, [r7, #12]
 8016d7c:	681a      	ldr	r2, [r3, #0]
 8016d7e:	68fb      	ldr	r3, [r7, #12]
 8016d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016d82:	3b01      	subs	r3, #1
 8016d84:	68f9      	ldr	r1, [r7, #12]
 8016d86:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8016d88:	fb01 f303 	mul.w	r3, r1, r3
 8016d8c:	441a      	add	r2, r3
 8016d8e:	68fb      	ldr	r3, [r7, #12]
 8016d90:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8016d92:	68fb      	ldr	r3, [r7, #12]
 8016d94:	22ff      	movs	r2, #255	; 0xff
 8016d96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8016d9a:	68fb      	ldr	r3, [r7, #12]
 8016d9c:	22ff      	movs	r2, #255	; 0xff
 8016d9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8016da2:	683b      	ldr	r3, [r7, #0]
 8016da4:	2b00      	cmp	r3, #0
 8016da6:	d114      	bne.n	8016dd2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016da8:	68fb      	ldr	r3, [r7, #12]
 8016daa:	691b      	ldr	r3, [r3, #16]
 8016dac:	2b00      	cmp	r3, #0
 8016dae:	d01a      	beq.n	8016de6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016db0:	68fb      	ldr	r3, [r7, #12]
 8016db2:	3310      	adds	r3, #16
 8016db4:	4618      	mov	r0, r3
 8016db6:	f001 fbb5 	bl	8018524 <xTaskRemoveFromEventList>
 8016dba:	4603      	mov	r3, r0
 8016dbc:	2b00      	cmp	r3, #0
 8016dbe:	d012      	beq.n	8016de6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8016dc0:	4b0c      	ldr	r3, [pc, #48]	; (8016df4 <xQueueGenericReset+0xcc>)
 8016dc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016dc6:	601a      	str	r2, [r3, #0]
 8016dc8:	f3bf 8f4f 	dsb	sy
 8016dcc:	f3bf 8f6f 	isb	sy
 8016dd0:	e009      	b.n	8016de6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8016dd2:	68fb      	ldr	r3, [r7, #12]
 8016dd4:	3310      	adds	r3, #16
 8016dd6:	4618      	mov	r0, r3
 8016dd8:	f7ff fef2 	bl	8016bc0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8016ddc:	68fb      	ldr	r3, [r7, #12]
 8016dde:	3324      	adds	r3, #36	; 0x24
 8016de0:	4618      	mov	r0, r3
 8016de2:	f7ff feed 	bl	8016bc0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8016de6:	f002 fb2d 	bl	8019444 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8016dea:	2301      	movs	r3, #1
}
 8016dec:	4618      	mov	r0, r3
 8016dee:	3710      	adds	r7, #16
 8016df0:	46bd      	mov	sp, r7
 8016df2:	bd80      	pop	{r7, pc}
 8016df4:	e000ed04 	.word	0xe000ed04

08016df8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8016df8:	b580      	push	{r7, lr}
 8016dfa:	b08e      	sub	sp, #56	; 0x38
 8016dfc:	af02      	add	r7, sp, #8
 8016dfe:	60f8      	str	r0, [r7, #12]
 8016e00:	60b9      	str	r1, [r7, #8]
 8016e02:	607a      	str	r2, [r7, #4]
 8016e04:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8016e06:	68fb      	ldr	r3, [r7, #12]
 8016e08:	2b00      	cmp	r3, #0
 8016e0a:	d10a      	bne.n	8016e22 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8016e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e10:	f383 8811 	msr	BASEPRI, r3
 8016e14:	f3bf 8f6f 	isb	sy
 8016e18:	f3bf 8f4f 	dsb	sy
 8016e1c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8016e1e:	bf00      	nop
 8016e20:	e7fe      	b.n	8016e20 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8016e22:	683b      	ldr	r3, [r7, #0]
 8016e24:	2b00      	cmp	r3, #0
 8016e26:	d10a      	bne.n	8016e3e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8016e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e2c:	f383 8811 	msr	BASEPRI, r3
 8016e30:	f3bf 8f6f 	isb	sy
 8016e34:	f3bf 8f4f 	dsb	sy
 8016e38:	627b      	str	r3, [r7, #36]	; 0x24
}
 8016e3a:	bf00      	nop
 8016e3c:	e7fe      	b.n	8016e3c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8016e3e:	687b      	ldr	r3, [r7, #4]
 8016e40:	2b00      	cmp	r3, #0
 8016e42:	d002      	beq.n	8016e4a <xQueueGenericCreateStatic+0x52>
 8016e44:	68bb      	ldr	r3, [r7, #8]
 8016e46:	2b00      	cmp	r3, #0
 8016e48:	d001      	beq.n	8016e4e <xQueueGenericCreateStatic+0x56>
 8016e4a:	2301      	movs	r3, #1
 8016e4c:	e000      	b.n	8016e50 <xQueueGenericCreateStatic+0x58>
 8016e4e:	2300      	movs	r3, #0
 8016e50:	2b00      	cmp	r3, #0
 8016e52:	d10a      	bne.n	8016e6a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8016e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e58:	f383 8811 	msr	BASEPRI, r3
 8016e5c:	f3bf 8f6f 	isb	sy
 8016e60:	f3bf 8f4f 	dsb	sy
 8016e64:	623b      	str	r3, [r7, #32]
}
 8016e66:	bf00      	nop
 8016e68:	e7fe      	b.n	8016e68 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8016e6a:	687b      	ldr	r3, [r7, #4]
 8016e6c:	2b00      	cmp	r3, #0
 8016e6e:	d102      	bne.n	8016e76 <xQueueGenericCreateStatic+0x7e>
 8016e70:	68bb      	ldr	r3, [r7, #8]
 8016e72:	2b00      	cmp	r3, #0
 8016e74:	d101      	bne.n	8016e7a <xQueueGenericCreateStatic+0x82>
 8016e76:	2301      	movs	r3, #1
 8016e78:	e000      	b.n	8016e7c <xQueueGenericCreateStatic+0x84>
 8016e7a:	2300      	movs	r3, #0
 8016e7c:	2b00      	cmp	r3, #0
 8016e7e:	d10a      	bne.n	8016e96 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8016e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e84:	f383 8811 	msr	BASEPRI, r3
 8016e88:	f3bf 8f6f 	isb	sy
 8016e8c:	f3bf 8f4f 	dsb	sy
 8016e90:	61fb      	str	r3, [r7, #28]
}
 8016e92:	bf00      	nop
 8016e94:	e7fe      	b.n	8016e94 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8016e96:	2350      	movs	r3, #80	; 0x50
 8016e98:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8016e9a:	697b      	ldr	r3, [r7, #20]
 8016e9c:	2b50      	cmp	r3, #80	; 0x50
 8016e9e:	d00a      	beq.n	8016eb6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8016ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ea4:	f383 8811 	msr	BASEPRI, r3
 8016ea8:	f3bf 8f6f 	isb	sy
 8016eac:	f3bf 8f4f 	dsb	sy
 8016eb0:	61bb      	str	r3, [r7, #24]
}
 8016eb2:	bf00      	nop
 8016eb4:	e7fe      	b.n	8016eb4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8016eb6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8016eb8:	683b      	ldr	r3, [r7, #0]
 8016eba:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8016ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ebe:	2b00      	cmp	r3, #0
 8016ec0:	d00d      	beq.n	8016ede <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8016ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ec4:	2201      	movs	r2, #1
 8016ec6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8016eca:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8016ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ed0:	9300      	str	r3, [sp, #0]
 8016ed2:	4613      	mov	r3, r2
 8016ed4:	687a      	ldr	r2, [r7, #4]
 8016ed6:	68b9      	ldr	r1, [r7, #8]
 8016ed8:	68f8      	ldr	r0, [r7, #12]
 8016eda:	f000 f83f 	bl	8016f5c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8016ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8016ee0:	4618      	mov	r0, r3
 8016ee2:	3730      	adds	r7, #48	; 0x30
 8016ee4:	46bd      	mov	sp, r7
 8016ee6:	bd80      	pop	{r7, pc}

08016ee8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8016ee8:	b580      	push	{r7, lr}
 8016eea:	b08a      	sub	sp, #40	; 0x28
 8016eec:	af02      	add	r7, sp, #8
 8016eee:	60f8      	str	r0, [r7, #12]
 8016ef0:	60b9      	str	r1, [r7, #8]
 8016ef2:	4613      	mov	r3, r2
 8016ef4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8016ef6:	68fb      	ldr	r3, [r7, #12]
 8016ef8:	2b00      	cmp	r3, #0
 8016efa:	d10a      	bne.n	8016f12 <xQueueGenericCreate+0x2a>
	__asm volatile
 8016efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016f00:	f383 8811 	msr	BASEPRI, r3
 8016f04:	f3bf 8f6f 	isb	sy
 8016f08:	f3bf 8f4f 	dsb	sy
 8016f0c:	613b      	str	r3, [r7, #16]
}
 8016f0e:	bf00      	nop
 8016f10:	e7fe      	b.n	8016f10 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016f12:	68fb      	ldr	r3, [r7, #12]
 8016f14:	68ba      	ldr	r2, [r7, #8]
 8016f16:	fb02 f303 	mul.w	r3, r2, r3
 8016f1a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8016f1c:	69fb      	ldr	r3, [r7, #28]
 8016f1e:	3350      	adds	r3, #80	; 0x50
 8016f20:	4618      	mov	r0, r3
 8016f22:	f002 fb81 	bl	8019628 <pvPortMalloc>
 8016f26:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8016f28:	69bb      	ldr	r3, [r7, #24]
 8016f2a:	2b00      	cmp	r3, #0
 8016f2c:	d011      	beq.n	8016f52 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8016f2e:	69bb      	ldr	r3, [r7, #24]
 8016f30:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016f32:	697b      	ldr	r3, [r7, #20]
 8016f34:	3350      	adds	r3, #80	; 0x50
 8016f36:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8016f38:	69bb      	ldr	r3, [r7, #24]
 8016f3a:	2200      	movs	r2, #0
 8016f3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8016f40:	79fa      	ldrb	r2, [r7, #7]
 8016f42:	69bb      	ldr	r3, [r7, #24]
 8016f44:	9300      	str	r3, [sp, #0]
 8016f46:	4613      	mov	r3, r2
 8016f48:	697a      	ldr	r2, [r7, #20]
 8016f4a:	68b9      	ldr	r1, [r7, #8]
 8016f4c:	68f8      	ldr	r0, [r7, #12]
 8016f4e:	f000 f805 	bl	8016f5c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8016f52:	69bb      	ldr	r3, [r7, #24]
	}
 8016f54:	4618      	mov	r0, r3
 8016f56:	3720      	adds	r7, #32
 8016f58:	46bd      	mov	sp, r7
 8016f5a:	bd80      	pop	{r7, pc}

08016f5c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8016f5c:	b580      	push	{r7, lr}
 8016f5e:	b084      	sub	sp, #16
 8016f60:	af00      	add	r7, sp, #0
 8016f62:	60f8      	str	r0, [r7, #12]
 8016f64:	60b9      	str	r1, [r7, #8]
 8016f66:	607a      	str	r2, [r7, #4]
 8016f68:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8016f6a:	68bb      	ldr	r3, [r7, #8]
 8016f6c:	2b00      	cmp	r3, #0
 8016f6e:	d103      	bne.n	8016f78 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8016f70:	69bb      	ldr	r3, [r7, #24]
 8016f72:	69ba      	ldr	r2, [r7, #24]
 8016f74:	601a      	str	r2, [r3, #0]
 8016f76:	e002      	b.n	8016f7e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8016f78:	69bb      	ldr	r3, [r7, #24]
 8016f7a:	687a      	ldr	r2, [r7, #4]
 8016f7c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8016f7e:	69bb      	ldr	r3, [r7, #24]
 8016f80:	68fa      	ldr	r2, [r7, #12]
 8016f82:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8016f84:	69bb      	ldr	r3, [r7, #24]
 8016f86:	68ba      	ldr	r2, [r7, #8]
 8016f88:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8016f8a:	2101      	movs	r1, #1
 8016f8c:	69b8      	ldr	r0, [r7, #24]
 8016f8e:	f7ff fecb 	bl	8016d28 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8016f92:	69bb      	ldr	r3, [r7, #24]
 8016f94:	78fa      	ldrb	r2, [r7, #3]
 8016f96:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 8016f9a:	78fb      	ldrb	r3, [r7, #3]
 8016f9c:	68ba      	ldr	r2, [r7, #8]
 8016f9e:	68f9      	ldr	r1, [r7, #12]
 8016fa0:	2073      	movs	r0, #115	; 0x73
 8016fa2:	f003 fa09 	bl	801a3b8 <SEGGER_SYSVIEW_RecordU32x3>
}
 8016fa6:	bf00      	nop
 8016fa8:	3710      	adds	r7, #16
 8016faa:	46bd      	mov	sp, r7
 8016fac:	bd80      	pop	{r7, pc}
	...

08016fb0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8016fb0:	b580      	push	{r7, lr}
 8016fb2:	b090      	sub	sp, #64	; 0x40
 8016fb4:	af02      	add	r7, sp, #8
 8016fb6:	60f8      	str	r0, [r7, #12]
 8016fb8:	60b9      	str	r1, [r7, #8]
 8016fba:	607a      	str	r2, [r7, #4]
 8016fbc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8016fbe:	2300      	movs	r3, #0
 8016fc0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8016fc2:	68fb      	ldr	r3, [r7, #12]
 8016fc4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8016fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016fc8:	2b00      	cmp	r3, #0
 8016fca:	d10a      	bne.n	8016fe2 <xQueueGenericSend+0x32>
	__asm volatile
 8016fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016fd0:	f383 8811 	msr	BASEPRI, r3
 8016fd4:	f3bf 8f6f 	isb	sy
 8016fd8:	f3bf 8f4f 	dsb	sy
 8016fdc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8016fde:	bf00      	nop
 8016fe0:	e7fe      	b.n	8016fe0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016fe2:	68bb      	ldr	r3, [r7, #8]
 8016fe4:	2b00      	cmp	r3, #0
 8016fe6:	d103      	bne.n	8016ff0 <xQueueGenericSend+0x40>
 8016fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016fec:	2b00      	cmp	r3, #0
 8016fee:	d101      	bne.n	8016ff4 <xQueueGenericSend+0x44>
 8016ff0:	2301      	movs	r3, #1
 8016ff2:	e000      	b.n	8016ff6 <xQueueGenericSend+0x46>
 8016ff4:	2300      	movs	r3, #0
 8016ff6:	2b00      	cmp	r3, #0
 8016ff8:	d10a      	bne.n	8017010 <xQueueGenericSend+0x60>
	__asm volatile
 8016ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ffe:	f383 8811 	msr	BASEPRI, r3
 8017002:	f3bf 8f6f 	isb	sy
 8017006:	f3bf 8f4f 	dsb	sy
 801700a:	627b      	str	r3, [r7, #36]	; 0x24
}
 801700c:	bf00      	nop
 801700e:	e7fe      	b.n	801700e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8017010:	683b      	ldr	r3, [r7, #0]
 8017012:	2b02      	cmp	r3, #2
 8017014:	d103      	bne.n	801701e <xQueueGenericSend+0x6e>
 8017016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801701a:	2b01      	cmp	r3, #1
 801701c:	d101      	bne.n	8017022 <xQueueGenericSend+0x72>
 801701e:	2301      	movs	r3, #1
 8017020:	e000      	b.n	8017024 <xQueueGenericSend+0x74>
 8017022:	2300      	movs	r3, #0
 8017024:	2b00      	cmp	r3, #0
 8017026:	d10a      	bne.n	801703e <xQueueGenericSend+0x8e>
	__asm volatile
 8017028:	f04f 0350 	mov.w	r3, #80	; 0x50
 801702c:	f383 8811 	msr	BASEPRI, r3
 8017030:	f3bf 8f6f 	isb	sy
 8017034:	f3bf 8f4f 	dsb	sy
 8017038:	623b      	str	r3, [r7, #32]
}
 801703a:	bf00      	nop
 801703c:	e7fe      	b.n	801703c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801703e:	f001 fc6f 	bl	8018920 <xTaskGetSchedulerState>
 8017042:	4603      	mov	r3, r0
 8017044:	2b00      	cmp	r3, #0
 8017046:	d102      	bne.n	801704e <xQueueGenericSend+0x9e>
 8017048:	687b      	ldr	r3, [r7, #4]
 801704a:	2b00      	cmp	r3, #0
 801704c:	d101      	bne.n	8017052 <xQueueGenericSend+0xa2>
 801704e:	2301      	movs	r3, #1
 8017050:	e000      	b.n	8017054 <xQueueGenericSend+0xa4>
 8017052:	2300      	movs	r3, #0
 8017054:	2b00      	cmp	r3, #0
 8017056:	d10a      	bne.n	801706e <xQueueGenericSend+0xbe>
	__asm volatile
 8017058:	f04f 0350 	mov.w	r3, #80	; 0x50
 801705c:	f383 8811 	msr	BASEPRI, r3
 8017060:	f3bf 8f6f 	isb	sy
 8017064:	f3bf 8f4f 	dsb	sy
 8017068:	61fb      	str	r3, [r7, #28]
}
 801706a:	bf00      	nop
 801706c:	e7fe      	b.n	801706c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801706e:	f002 f9b9 	bl	80193e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8017072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017074:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8017076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801707a:	429a      	cmp	r2, r3
 801707c:	d302      	bcc.n	8017084 <xQueueGenericSend+0xd4>
 801707e:	683b      	ldr	r3, [r7, #0]
 8017080:	2b02      	cmp	r3, #2
 8017082:	d136      	bne.n	80170f2 <xQueueGenericSend+0x142>
			{
				traceQUEUE_SEND( pxQueue );
 8017084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017086:	4618      	mov	r0, r3
 8017088:	f003 fe48 	bl	801ad1c <SEGGER_SYSVIEW_ShrinkId>
 801708c:	68ba      	ldr	r2, [r7, #8]
 801708e:	6879      	ldr	r1, [r7, #4]
 8017090:	683b      	ldr	r3, [r7, #0]
 8017092:	9300      	str	r3, [sp, #0]
 8017094:	460b      	mov	r3, r1
 8017096:	4601      	mov	r1, r0
 8017098:	205a      	movs	r0, #90	; 0x5a
 801709a:	f003 fa03 	bl	801a4a4 <SEGGER_SYSVIEW_RecordU32x4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801709e:	683a      	ldr	r2, [r7, #0]
 80170a0:	68b9      	ldr	r1, [r7, #8]
 80170a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80170a4:	f000 fb5e 	bl	8017764 <prvCopyDataToQueue>
 80170a8:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80170aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80170ae:	2b00      	cmp	r3, #0
 80170b0:	d010      	beq.n	80170d4 <xQueueGenericSend+0x124>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80170b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170b4:	3324      	adds	r3, #36	; 0x24
 80170b6:	4618      	mov	r0, r3
 80170b8:	f001 fa34 	bl	8018524 <xTaskRemoveFromEventList>
 80170bc:	4603      	mov	r3, r0
 80170be:	2b00      	cmp	r3, #0
 80170c0:	d013      	beq.n	80170ea <xQueueGenericSend+0x13a>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80170c2:	4b4d      	ldr	r3, [pc, #308]	; (80171f8 <xQueueGenericSend+0x248>)
 80170c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80170c8:	601a      	str	r2, [r3, #0]
 80170ca:	f3bf 8f4f 	dsb	sy
 80170ce:	f3bf 8f6f 	isb	sy
 80170d2:	e00a      	b.n	80170ea <xQueueGenericSend+0x13a>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80170d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170d6:	2b00      	cmp	r3, #0
 80170d8:	d007      	beq.n	80170ea <xQueueGenericSend+0x13a>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80170da:	4b47      	ldr	r3, [pc, #284]	; (80171f8 <xQueueGenericSend+0x248>)
 80170dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80170e0:	601a      	str	r2, [r3, #0]
 80170e2:	f3bf 8f4f 	dsb	sy
 80170e6:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80170ea:	f002 f9ab 	bl	8019444 <vPortExitCritical>
				return pdPASS;
 80170ee:	2301      	movs	r3, #1
 80170f0:	e07d      	b.n	80171ee <xQueueGenericSend+0x23e>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80170f2:	687b      	ldr	r3, [r7, #4]
 80170f4:	2b00      	cmp	r3, #0
 80170f6:	d110      	bne.n	801711a <xQueueGenericSend+0x16a>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80170f8:	f002 f9a4 	bl	8019444 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 80170fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170fe:	4618      	mov	r0, r3
 8017100:	f003 fe0c 	bl	801ad1c <SEGGER_SYSVIEW_ShrinkId>
 8017104:	68ba      	ldr	r2, [r7, #8]
 8017106:	6879      	ldr	r1, [r7, #4]
 8017108:	683b      	ldr	r3, [r7, #0]
 801710a:	9300      	str	r3, [sp, #0]
 801710c:	460b      	mov	r3, r1
 801710e:	4601      	mov	r1, r0
 8017110:	205a      	movs	r0, #90	; 0x5a
 8017112:	f003 f9c7 	bl	801a4a4 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_FULL;
 8017116:	2300      	movs	r3, #0
 8017118:	e069      	b.n	80171ee <xQueueGenericSend+0x23e>
				}
				else if( xEntryTimeSet == pdFALSE )
 801711a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801711c:	2b00      	cmp	r3, #0
 801711e:	d106      	bne.n	801712e <xQueueGenericSend+0x17e>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8017120:	f107 0314 	add.w	r3, r7, #20
 8017124:	4618      	mov	r0, r3
 8017126:	f001 fa65 	bl	80185f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801712a:	2301      	movs	r3, #1
 801712c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801712e:	f002 f989 	bl	8019444 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8017132:	f000 ff9d 	bl	8018070 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8017136:	f002 f955 	bl	80193e4 <vPortEnterCritical>
 801713a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801713c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017140:	b25b      	sxtb	r3, r3
 8017142:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017146:	d103      	bne.n	8017150 <xQueueGenericSend+0x1a0>
 8017148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801714a:	2200      	movs	r2, #0
 801714c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8017150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017152:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017156:	b25b      	sxtb	r3, r3
 8017158:	f1b3 3fff 	cmp.w	r3, #4294967295
 801715c:	d103      	bne.n	8017166 <xQueueGenericSend+0x1b6>
 801715e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017160:	2200      	movs	r2, #0
 8017162:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8017166:	f002 f96d 	bl	8019444 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801716a:	1d3a      	adds	r2, r7, #4
 801716c:	f107 0314 	add.w	r3, r7, #20
 8017170:	4611      	mov	r1, r2
 8017172:	4618      	mov	r0, r3
 8017174:	f001 fa54 	bl	8018620 <xTaskCheckForTimeOut>
 8017178:	4603      	mov	r3, r0
 801717a:	2b00      	cmp	r3, #0
 801717c:	d124      	bne.n	80171c8 <xQueueGenericSend+0x218>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801717e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017180:	f000 fbe8 	bl	8017954 <prvIsQueueFull>
 8017184:	4603      	mov	r3, r0
 8017186:	2b00      	cmp	r3, #0
 8017188:	d018      	beq.n	80171bc <xQueueGenericSend+0x20c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801718a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801718c:	3310      	adds	r3, #16
 801718e:	687a      	ldr	r2, [r7, #4]
 8017190:	4611      	mov	r1, r2
 8017192:	4618      	mov	r0, r3
 8017194:	f001 f974 	bl	8018480 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8017198:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801719a:	f000 fb73 	bl	8017884 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801719e:	f000 ff75 	bl	801808c <xTaskResumeAll>
 80171a2:	4603      	mov	r3, r0
 80171a4:	2b00      	cmp	r3, #0
 80171a6:	f47f af62 	bne.w	801706e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80171aa:	4b13      	ldr	r3, [pc, #76]	; (80171f8 <xQueueGenericSend+0x248>)
 80171ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80171b0:	601a      	str	r2, [r3, #0]
 80171b2:	f3bf 8f4f 	dsb	sy
 80171b6:	f3bf 8f6f 	isb	sy
 80171ba:	e758      	b.n	801706e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80171bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80171be:	f000 fb61 	bl	8017884 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80171c2:	f000 ff63 	bl	801808c <xTaskResumeAll>
 80171c6:	e752      	b.n	801706e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80171c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80171ca:	f000 fb5b 	bl	8017884 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80171ce:	f000 ff5d 	bl	801808c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 80171d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80171d4:	4618      	mov	r0, r3
 80171d6:	f003 fda1 	bl	801ad1c <SEGGER_SYSVIEW_ShrinkId>
 80171da:	68ba      	ldr	r2, [r7, #8]
 80171dc:	6879      	ldr	r1, [r7, #4]
 80171de:	683b      	ldr	r3, [r7, #0]
 80171e0:	9300      	str	r3, [sp, #0]
 80171e2:	460b      	mov	r3, r1
 80171e4:	4601      	mov	r1, r0
 80171e6:	205a      	movs	r0, #90	; 0x5a
 80171e8:	f003 f95c 	bl	801a4a4 <SEGGER_SYSVIEW_RecordU32x4>
			return errQUEUE_FULL;
 80171ec:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80171ee:	4618      	mov	r0, r3
 80171f0:	3738      	adds	r7, #56	; 0x38
 80171f2:	46bd      	mov	sp, r7
 80171f4:	bd80      	pop	{r7, pc}
 80171f6:	bf00      	nop
 80171f8:	e000ed04 	.word	0xe000ed04

080171fc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80171fc:	b580      	push	{r7, lr}
 80171fe:	b090      	sub	sp, #64	; 0x40
 8017200:	af00      	add	r7, sp, #0
 8017202:	60f8      	str	r0, [r7, #12]
 8017204:	60b9      	str	r1, [r7, #8]
 8017206:	607a      	str	r2, [r7, #4]
 8017208:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801720a:	68fb      	ldr	r3, [r7, #12]
 801720c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 801720e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017210:	2b00      	cmp	r3, #0
 8017212:	d10a      	bne.n	801722a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8017214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017218:	f383 8811 	msr	BASEPRI, r3
 801721c:	f3bf 8f6f 	isb	sy
 8017220:	f3bf 8f4f 	dsb	sy
 8017224:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8017226:	bf00      	nop
 8017228:	e7fe      	b.n	8017228 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801722a:	68bb      	ldr	r3, [r7, #8]
 801722c:	2b00      	cmp	r3, #0
 801722e:	d103      	bne.n	8017238 <xQueueGenericSendFromISR+0x3c>
 8017230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017234:	2b00      	cmp	r3, #0
 8017236:	d101      	bne.n	801723c <xQueueGenericSendFromISR+0x40>
 8017238:	2301      	movs	r3, #1
 801723a:	e000      	b.n	801723e <xQueueGenericSendFromISR+0x42>
 801723c:	2300      	movs	r3, #0
 801723e:	2b00      	cmp	r3, #0
 8017240:	d10a      	bne.n	8017258 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8017242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017246:	f383 8811 	msr	BASEPRI, r3
 801724a:	f3bf 8f6f 	isb	sy
 801724e:	f3bf 8f4f 	dsb	sy
 8017252:	627b      	str	r3, [r7, #36]	; 0x24
}
 8017254:	bf00      	nop
 8017256:	e7fe      	b.n	8017256 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8017258:	683b      	ldr	r3, [r7, #0]
 801725a:	2b02      	cmp	r3, #2
 801725c:	d103      	bne.n	8017266 <xQueueGenericSendFromISR+0x6a>
 801725e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017262:	2b01      	cmp	r3, #1
 8017264:	d101      	bne.n	801726a <xQueueGenericSendFromISR+0x6e>
 8017266:	2301      	movs	r3, #1
 8017268:	e000      	b.n	801726c <xQueueGenericSendFromISR+0x70>
 801726a:	2300      	movs	r3, #0
 801726c:	2b00      	cmp	r3, #0
 801726e:	d10a      	bne.n	8017286 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8017270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017274:	f383 8811 	msr	BASEPRI, r3
 8017278:	f3bf 8f6f 	isb	sy
 801727c:	f3bf 8f4f 	dsb	sy
 8017280:	623b      	str	r3, [r7, #32]
}
 8017282:	bf00      	nop
 8017284:	e7fe      	b.n	8017284 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8017286:	f002 f98f 	bl	80195a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801728a:	f3ef 8211 	mrs	r2, BASEPRI
 801728e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017292:	f383 8811 	msr	BASEPRI, r3
 8017296:	f3bf 8f6f 	isb	sy
 801729a:	f3bf 8f4f 	dsb	sy
 801729e:	61fa      	str	r2, [r7, #28]
 80172a0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80172a2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80172a4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80172a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80172a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80172aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80172ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80172ae:	429a      	cmp	r2, r3
 80172b0:	d302      	bcc.n	80172b8 <xQueueGenericSendFromISR+0xbc>
 80172b2:	683b      	ldr	r3, [r7, #0]
 80172b4:	2b02      	cmp	r3, #2
 80172b6:	d139      	bne.n	801732c <xQueueGenericSendFromISR+0x130>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80172b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80172ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80172be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80172c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80172c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80172c6:	62fb      	str	r3, [r7, #44]	; 0x2c

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 80172c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80172ca:	4618      	mov	r0, r3
 80172cc:	f003 fd26 	bl	801ad1c <SEGGER_SYSVIEW_ShrinkId>
 80172d0:	4601      	mov	r1, r0
 80172d2:	687b      	ldr	r3, [r7, #4]
 80172d4:	461a      	mov	r2, r3
 80172d6:	2060      	movs	r0, #96	; 0x60
 80172d8:	f003 f814 	bl	801a304 <SEGGER_SYSVIEW_RecordU32x2>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80172dc:	683a      	ldr	r2, [r7, #0]
 80172de:	68b9      	ldr	r1, [r7, #8]
 80172e0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80172e2:	f000 fa3f 	bl	8017764 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80172e6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80172ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80172ee:	d112      	bne.n	8017316 <xQueueGenericSendFromISR+0x11a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80172f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80172f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80172f4:	2b00      	cmp	r3, #0
 80172f6:	d016      	beq.n	8017326 <xQueueGenericSendFromISR+0x12a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80172f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80172fa:	3324      	adds	r3, #36	; 0x24
 80172fc:	4618      	mov	r0, r3
 80172fe:	f001 f911 	bl	8018524 <xTaskRemoveFromEventList>
 8017302:	4603      	mov	r3, r0
 8017304:	2b00      	cmp	r3, #0
 8017306:	d00e      	beq.n	8017326 <xQueueGenericSendFromISR+0x12a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8017308:	687b      	ldr	r3, [r7, #4]
 801730a:	2b00      	cmp	r3, #0
 801730c:	d00b      	beq.n	8017326 <xQueueGenericSendFromISR+0x12a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801730e:	687b      	ldr	r3, [r7, #4]
 8017310:	2201      	movs	r2, #1
 8017312:	601a      	str	r2, [r3, #0]
 8017314:	e007      	b.n	8017326 <xQueueGenericSendFromISR+0x12a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8017316:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801731a:	3301      	adds	r3, #1
 801731c:	b2db      	uxtb	r3, r3
 801731e:	b25a      	sxtb	r2, r3
 8017320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017322:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8017326:	2301      	movs	r3, #1
 8017328:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 801732a:	e00b      	b.n	8017344 <xQueueGenericSendFromISR+0x148>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 801732c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801732e:	4618      	mov	r0, r3
 8017330:	f003 fcf4 	bl	801ad1c <SEGGER_SYSVIEW_ShrinkId>
 8017334:	4601      	mov	r1, r0
 8017336:	687b      	ldr	r3, [r7, #4]
 8017338:	461a      	mov	r2, r3
 801733a:	2060      	movs	r0, #96	; 0x60
 801733c:	f002 ffe2 	bl	801a304 <SEGGER_SYSVIEW_RecordU32x2>
			xReturn = errQUEUE_FULL;
 8017340:	2300      	movs	r3, #0
 8017342:	63fb      	str	r3, [r7, #60]	; 0x3c
 8017344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017346:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8017348:	697b      	ldr	r3, [r7, #20]
 801734a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801734e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8017350:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8017352:	4618      	mov	r0, r3
 8017354:	3740      	adds	r7, #64	; 0x40
 8017356:	46bd      	mov	sp, r7
 8017358:	bd80      	pop	{r7, pc}
	...

0801735c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 801735c:	b590      	push	{r4, r7, lr}
 801735e:	b08f      	sub	sp, #60	; 0x3c
 8017360:	af02      	add	r7, sp, #8
 8017362:	60f8      	str	r0, [r7, #12]
 8017364:	60b9      	str	r1, [r7, #8]
 8017366:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8017368:	2300      	movs	r3, #0
 801736a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801736c:	68fb      	ldr	r3, [r7, #12]
 801736e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8017370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017372:	2b00      	cmp	r3, #0
 8017374:	d10a      	bne.n	801738c <xQueueReceive+0x30>
	__asm volatile
 8017376:	f04f 0350 	mov.w	r3, #80	; 0x50
 801737a:	f383 8811 	msr	BASEPRI, r3
 801737e:	f3bf 8f6f 	isb	sy
 8017382:	f3bf 8f4f 	dsb	sy
 8017386:	623b      	str	r3, [r7, #32]
}
 8017388:	bf00      	nop
 801738a:	e7fe      	b.n	801738a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801738c:	68bb      	ldr	r3, [r7, #8]
 801738e:	2b00      	cmp	r3, #0
 8017390:	d103      	bne.n	801739a <xQueueReceive+0x3e>
 8017392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017396:	2b00      	cmp	r3, #0
 8017398:	d101      	bne.n	801739e <xQueueReceive+0x42>
 801739a:	2301      	movs	r3, #1
 801739c:	e000      	b.n	80173a0 <xQueueReceive+0x44>
 801739e:	2300      	movs	r3, #0
 80173a0:	2b00      	cmp	r3, #0
 80173a2:	d10a      	bne.n	80173ba <xQueueReceive+0x5e>
	__asm volatile
 80173a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80173a8:	f383 8811 	msr	BASEPRI, r3
 80173ac:	f3bf 8f6f 	isb	sy
 80173b0:	f3bf 8f4f 	dsb	sy
 80173b4:	61fb      	str	r3, [r7, #28]
}
 80173b6:	bf00      	nop
 80173b8:	e7fe      	b.n	80173b8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80173ba:	f001 fab1 	bl	8018920 <xTaskGetSchedulerState>
 80173be:	4603      	mov	r3, r0
 80173c0:	2b00      	cmp	r3, #0
 80173c2:	d102      	bne.n	80173ca <xQueueReceive+0x6e>
 80173c4:	687b      	ldr	r3, [r7, #4]
 80173c6:	2b00      	cmp	r3, #0
 80173c8:	d101      	bne.n	80173ce <xQueueReceive+0x72>
 80173ca:	2301      	movs	r3, #1
 80173cc:	e000      	b.n	80173d0 <xQueueReceive+0x74>
 80173ce:	2300      	movs	r3, #0
 80173d0:	2b00      	cmp	r3, #0
 80173d2:	d10a      	bne.n	80173ea <xQueueReceive+0x8e>
	__asm volatile
 80173d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80173d8:	f383 8811 	msr	BASEPRI, r3
 80173dc:	f3bf 8f6f 	isb	sy
 80173e0:	f3bf 8f4f 	dsb	sy
 80173e4:	61bb      	str	r3, [r7, #24]
}
 80173e6:	bf00      	nop
 80173e8:	e7fe      	b.n	80173e8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80173ea:	f001 fffb 	bl	80193e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80173ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80173f2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80173f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173f6:	2b00      	cmp	r3, #0
 80173f8:	d02f      	beq.n	801745a <xQueueReceive+0xfe>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80173fa:	68b9      	ldr	r1, [r7, #8]
 80173fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80173fe:	f000 fa1b 	bl	8017838 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
 8017402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017404:	4618      	mov	r0, r3
 8017406:	f003 fc89 	bl	801ad1c <SEGGER_SYSVIEW_ShrinkId>
 801740a:	4604      	mov	r4, r0
 801740c:	2000      	movs	r0, #0
 801740e:	f003 fc85 	bl	801ad1c <SEGGER_SYSVIEW_ShrinkId>
 8017412:	4602      	mov	r2, r0
 8017414:	687b      	ldr	r3, [r7, #4]
 8017416:	2101      	movs	r1, #1
 8017418:	9100      	str	r1, [sp, #0]
 801741a:	4621      	mov	r1, r4
 801741c:	205c      	movs	r0, #92	; 0x5c
 801741e:	f003 f841 	bl	801a4a4 <SEGGER_SYSVIEW_RecordU32x4>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8017422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017424:	1e5a      	subs	r2, r3, #1
 8017426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017428:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801742a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801742c:	691b      	ldr	r3, [r3, #16]
 801742e:	2b00      	cmp	r3, #0
 8017430:	d00f      	beq.n	8017452 <xQueueReceive+0xf6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017434:	3310      	adds	r3, #16
 8017436:	4618      	mov	r0, r3
 8017438:	f001 f874 	bl	8018524 <xTaskRemoveFromEventList>
 801743c:	4603      	mov	r3, r0
 801743e:	2b00      	cmp	r3, #0
 8017440:	d007      	beq.n	8017452 <xQueueReceive+0xf6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8017442:	4b4d      	ldr	r3, [pc, #308]	; (8017578 <xQueueReceive+0x21c>)
 8017444:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017448:	601a      	str	r2, [r3, #0]
 801744a:	f3bf 8f4f 	dsb	sy
 801744e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8017452:	f001 fff7 	bl	8019444 <vPortExitCritical>
				return pdPASS;
 8017456:	2301      	movs	r3, #1
 8017458:	e08a      	b.n	8017570 <xQueueReceive+0x214>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801745a:	687b      	ldr	r3, [r7, #4]
 801745c:	2b00      	cmp	r3, #0
 801745e:	d113      	bne.n	8017488 <xQueueReceive+0x12c>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8017460:	f001 fff0 	bl	8019444 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 8017464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017466:	4618      	mov	r0, r3
 8017468:	f003 fc58 	bl	801ad1c <SEGGER_SYSVIEW_ShrinkId>
 801746c:	4604      	mov	r4, r0
 801746e:	2000      	movs	r0, #0
 8017470:	f003 fc54 	bl	801ad1c <SEGGER_SYSVIEW_ShrinkId>
 8017474:	4602      	mov	r2, r0
 8017476:	687b      	ldr	r3, [r7, #4]
 8017478:	2101      	movs	r1, #1
 801747a:	9100      	str	r1, [sp, #0]
 801747c:	4621      	mov	r1, r4
 801747e:	205c      	movs	r0, #92	; 0x5c
 8017480:	f003 f810 	bl	801a4a4 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 8017484:	2300      	movs	r3, #0
 8017486:	e073      	b.n	8017570 <xQueueReceive+0x214>
				}
				else if( xEntryTimeSet == pdFALSE )
 8017488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801748a:	2b00      	cmp	r3, #0
 801748c:	d106      	bne.n	801749c <xQueueReceive+0x140>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801748e:	f107 0310 	add.w	r3, r7, #16
 8017492:	4618      	mov	r0, r3
 8017494:	f001 f8ae 	bl	80185f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8017498:	2301      	movs	r3, #1
 801749a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801749c:	f001 ffd2 	bl	8019444 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80174a0:	f000 fde6 	bl	8018070 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80174a4:	f001 ff9e 	bl	80193e4 <vPortEnterCritical>
 80174a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80174ae:	b25b      	sxtb	r3, r3
 80174b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80174b4:	d103      	bne.n	80174be <xQueueReceive+0x162>
 80174b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174b8:	2200      	movs	r2, #0
 80174ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80174be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80174c4:	b25b      	sxtb	r3, r3
 80174c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80174ca:	d103      	bne.n	80174d4 <xQueueReceive+0x178>
 80174cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174ce:	2200      	movs	r2, #0
 80174d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80174d4:	f001 ffb6 	bl	8019444 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80174d8:	1d3a      	adds	r2, r7, #4
 80174da:	f107 0310 	add.w	r3, r7, #16
 80174de:	4611      	mov	r1, r2
 80174e0:	4618      	mov	r0, r3
 80174e2:	f001 f89d 	bl	8018620 <xTaskCheckForTimeOut>
 80174e6:	4603      	mov	r3, r0
 80174e8:	2b00      	cmp	r3, #0
 80174ea:	d124      	bne.n	8017536 <xQueueReceive+0x1da>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80174ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80174ee:	f000 fa1b 	bl	8017928 <prvIsQueueEmpty>
 80174f2:	4603      	mov	r3, r0
 80174f4:	2b00      	cmp	r3, #0
 80174f6:	d018      	beq.n	801752a <xQueueReceive+0x1ce>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80174f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174fa:	3324      	adds	r3, #36	; 0x24
 80174fc:	687a      	ldr	r2, [r7, #4]
 80174fe:	4611      	mov	r1, r2
 8017500:	4618      	mov	r0, r3
 8017502:	f000 ffbd 	bl	8018480 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8017506:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017508:	f000 f9bc 	bl	8017884 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801750c:	f000 fdbe 	bl	801808c <xTaskResumeAll>
 8017510:	4603      	mov	r3, r0
 8017512:	2b00      	cmp	r3, #0
 8017514:	f47f af69 	bne.w	80173ea <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8017518:	4b17      	ldr	r3, [pc, #92]	; (8017578 <xQueueReceive+0x21c>)
 801751a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801751e:	601a      	str	r2, [r3, #0]
 8017520:	f3bf 8f4f 	dsb	sy
 8017524:	f3bf 8f6f 	isb	sy
 8017528:	e75f      	b.n	80173ea <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801752a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801752c:	f000 f9aa 	bl	8017884 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8017530:	f000 fdac 	bl	801808c <xTaskResumeAll>
 8017534:	e759      	b.n	80173ea <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8017536:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017538:	f000 f9a4 	bl	8017884 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801753c:	f000 fda6 	bl	801808c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017540:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017542:	f000 f9f1 	bl	8017928 <prvIsQueueEmpty>
 8017546:	4603      	mov	r3, r0
 8017548:	2b00      	cmp	r3, #0
 801754a:	f43f af4e 	beq.w	80173ea <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 801754e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017550:	4618      	mov	r0, r3
 8017552:	f003 fbe3 	bl	801ad1c <SEGGER_SYSVIEW_ShrinkId>
 8017556:	4604      	mov	r4, r0
 8017558:	2000      	movs	r0, #0
 801755a:	f003 fbdf 	bl	801ad1c <SEGGER_SYSVIEW_ShrinkId>
 801755e:	4602      	mov	r2, r0
 8017560:	687b      	ldr	r3, [r7, #4]
 8017562:	2101      	movs	r1, #1
 8017564:	9100      	str	r1, [sp, #0]
 8017566:	4621      	mov	r1, r4
 8017568:	205c      	movs	r0, #92	; 0x5c
 801756a:	f002 ff9b 	bl	801a4a4 <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 801756e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8017570:	4618      	mov	r0, r3
 8017572:	3734      	adds	r7, #52	; 0x34
 8017574:	46bd      	mov	sp, r7
 8017576:	bd90      	pop	{r4, r7, pc}
 8017578:	e000ed04 	.word	0xe000ed04

0801757c <xQueuePeek>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 801757c:	b590      	push	{r4, r7, lr}
 801757e:	b091      	sub	sp, #68	; 0x44
 8017580:	af02      	add	r7, sp, #8
 8017582:	60f8      	str	r0, [r7, #12]
 8017584:	60b9      	str	r1, [r7, #8]
 8017586:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8017588:	2300      	movs	r3, #0
 801758a:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = xQueue;
 801758c:	68fb      	ldr	r3, [r7, #12]
 801758e:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8017590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017592:	2b00      	cmp	r3, #0
 8017594:	d10a      	bne.n	80175ac <xQueuePeek+0x30>
	__asm volatile
 8017596:	f04f 0350 	mov.w	r3, #80	; 0x50
 801759a:	f383 8811 	msr	BASEPRI, r3
 801759e:	f3bf 8f6f 	isb	sy
 80175a2:	f3bf 8f4f 	dsb	sy
 80175a6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80175a8:	bf00      	nop
 80175aa:	e7fe      	b.n	80175aa <xQueuePeek+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80175ac:	68bb      	ldr	r3, [r7, #8]
 80175ae:	2b00      	cmp	r3, #0
 80175b0:	d103      	bne.n	80175ba <xQueuePeek+0x3e>
 80175b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80175b6:	2b00      	cmp	r3, #0
 80175b8:	d101      	bne.n	80175be <xQueuePeek+0x42>
 80175ba:	2301      	movs	r3, #1
 80175bc:	e000      	b.n	80175c0 <xQueuePeek+0x44>
 80175be:	2300      	movs	r3, #0
 80175c0:	2b00      	cmp	r3, #0
 80175c2:	d10a      	bne.n	80175da <xQueuePeek+0x5e>
	__asm volatile
 80175c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80175c8:	f383 8811 	msr	BASEPRI, r3
 80175cc:	f3bf 8f6f 	isb	sy
 80175d0:	f3bf 8f4f 	dsb	sy
 80175d4:	623b      	str	r3, [r7, #32]
}
 80175d6:	bf00      	nop
 80175d8:	e7fe      	b.n	80175d8 <xQueuePeek+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80175da:	f001 f9a1 	bl	8018920 <xTaskGetSchedulerState>
 80175de:	4603      	mov	r3, r0
 80175e0:	2b00      	cmp	r3, #0
 80175e2:	d102      	bne.n	80175ea <xQueuePeek+0x6e>
 80175e4:	687b      	ldr	r3, [r7, #4]
 80175e6:	2b00      	cmp	r3, #0
 80175e8:	d101      	bne.n	80175ee <xQueuePeek+0x72>
 80175ea:	2301      	movs	r3, #1
 80175ec:	e000      	b.n	80175f0 <xQueuePeek+0x74>
 80175ee:	2300      	movs	r3, #0
 80175f0:	2b00      	cmp	r3, #0
 80175f2:	d10a      	bne.n	801760a <xQueuePeek+0x8e>
	__asm volatile
 80175f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80175f8:	f383 8811 	msr	BASEPRI, r3
 80175fc:	f3bf 8f6f 	isb	sy
 8017600:	f3bf 8f4f 	dsb	sy
 8017604:	61fb      	str	r3, [r7, #28]
}
 8017606:	bf00      	nop
 8017608:	e7fe      	b.n	8017608 <xQueuePeek+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801760a:	f001 feeb 	bl	80193e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801760e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017612:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017616:	2b00      	cmp	r3, #0
 8017618:	d032      	beq.n	8017680 <xQueuePeek+0x104>
			{
				/* Remember the read position so it can be reset after the data
				is read from the queue as this function is only peeking the
				data, not removing it. */
				pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 801761a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801761c:	68db      	ldr	r3, [r3, #12]
 801761e:	62bb      	str	r3, [r7, #40]	; 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8017620:	68b9      	ldr	r1, [r7, #8]
 8017622:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017624:	f000 f908 	bl	8017838 <prvCopyDataFromQueue>
				traceQUEUE_PEEK( pxQueue );
 8017628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801762a:	4618      	mov	r0, r3
 801762c:	f003 fb76 	bl	801ad1c <SEGGER_SYSVIEW_ShrinkId>
 8017630:	4604      	mov	r4, r0
 8017632:	68bb      	ldr	r3, [r7, #8]
 8017634:	4618      	mov	r0, r3
 8017636:	f003 fb71 	bl	801ad1c <SEGGER_SYSVIEW_ShrinkId>
 801763a:	4602      	mov	r2, r0
 801763c:	687b      	ldr	r3, [r7, #4]
 801763e:	2101      	movs	r1, #1
 8017640:	9100      	str	r1, [sp, #0]
 8017642:	4621      	mov	r1, r4
 8017644:	205c      	movs	r0, #92	; 0x5c
 8017646:	f002 ff2d 	bl	801a4a4 <SEGGER_SYSVIEW_RecordU32x4>

				/* The data is not being removed, so reset the read pointer. */
				pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 801764a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801764c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801764e:	60da      	str	r2, [r3, #12]

				/* The data is being left in the queue, so see if there are
				any other tasks waiting for the data. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017654:	2b00      	cmp	r3, #0
 8017656:	d00f      	beq.n	8017678 <xQueuePeek+0xfc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801765a:	3324      	adds	r3, #36	; 0x24
 801765c:	4618      	mov	r0, r3
 801765e:	f000 ff61 	bl	8018524 <xTaskRemoveFromEventList>
 8017662:	4603      	mov	r3, r0
 8017664:	2b00      	cmp	r3, #0
 8017666:	d007      	beq.n	8017678 <xQueuePeek+0xfc>
					{
						/* The task waiting has a higher priority than this task. */
						queueYIELD_IF_USING_PREEMPTION();
 8017668:	4b3d      	ldr	r3, [pc, #244]	; (8017760 <xQueuePeek+0x1e4>)
 801766a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801766e:	601a      	str	r2, [r3, #0]
 8017670:	f3bf 8f4f 	dsb	sy
 8017674:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8017678:	f001 fee4 	bl	8019444 <vPortExitCritical>
				return pdPASS;
 801767c:	2301      	movs	r3, #1
 801767e:	e06a      	b.n	8017756 <xQueuePeek+0x1da>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8017680:	687b      	ldr	r3, [r7, #4]
 8017682:	2b00      	cmp	r3, #0
 8017684:	d103      	bne.n	801768e <xQueuePeek+0x112>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8017686:	f001 fedd 	bl	8019444 <vPortExitCritical>
					traceQUEUE_PEEK_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801768a:	2300      	movs	r3, #0
 801768c:	e063      	b.n	8017756 <xQueuePeek+0x1da>
				}
				else if( xEntryTimeSet == pdFALSE )
 801768e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017690:	2b00      	cmp	r3, #0
 8017692:	d106      	bne.n	80176a2 <xQueuePeek+0x126>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure ready to enter the blocked
					state. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8017694:	f107 0314 	add.w	r3, r7, #20
 8017698:	4618      	mov	r0, r3
 801769a:	f000 ffab 	bl	80185f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801769e:	2301      	movs	r3, #1
 80176a0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80176a2:	f001 fecf 	bl	8019444 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80176a6:	f000 fce3 	bl	8018070 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80176aa:	f001 fe9b 	bl	80193e4 <vPortEnterCritical>
 80176ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80176b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80176b4:	b25b      	sxtb	r3, r3
 80176b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80176ba:	d103      	bne.n	80176c4 <xQueuePeek+0x148>
 80176bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80176be:	2200      	movs	r2, #0
 80176c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80176c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80176c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80176ca:	b25b      	sxtb	r3, r3
 80176cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80176d0:	d103      	bne.n	80176da <xQueuePeek+0x15e>
 80176d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80176d4:	2200      	movs	r2, #0
 80176d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80176da:	f001 feb3 	bl	8019444 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80176de:	1d3a      	adds	r2, r7, #4
 80176e0:	f107 0314 	add.w	r3, r7, #20
 80176e4:	4611      	mov	r1, r2
 80176e6:	4618      	mov	r0, r3
 80176e8:	f000 ff9a 	bl	8018620 <xTaskCheckForTimeOut>
 80176ec:	4603      	mov	r3, r0
 80176ee:	2b00      	cmp	r3, #0
 80176f0:	d124      	bne.n	801773c <xQueuePeek+0x1c0>
		{
			/* Timeout has not expired yet, check to see if there is data in the
			queue now, and if not enter the Blocked state to wait for data. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80176f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80176f4:	f000 f918 	bl	8017928 <prvIsQueueEmpty>
 80176f8:	4603      	mov	r3, r0
 80176fa:	2b00      	cmp	r3, #0
 80176fc:	d018      	beq.n	8017730 <xQueuePeek+0x1b4>
			{
				traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80176fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017700:	3324      	adds	r3, #36	; 0x24
 8017702:	687a      	ldr	r2, [r7, #4]
 8017704:	4611      	mov	r1, r2
 8017706:	4618      	mov	r0, r3
 8017708:	f000 feba 	bl	8018480 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801770c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801770e:	f000 f8b9 	bl	8017884 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8017712:	f000 fcbb 	bl	801808c <xTaskResumeAll>
 8017716:	4603      	mov	r3, r0
 8017718:	2b00      	cmp	r3, #0
 801771a:	f47f af76 	bne.w	801760a <xQueuePeek+0x8e>
				{
					portYIELD_WITHIN_API();
 801771e:	4b10      	ldr	r3, [pc, #64]	; (8017760 <xQueuePeek+0x1e4>)
 8017720:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017724:	601a      	str	r2, [r3, #0]
 8017726:	f3bf 8f4f 	dsb	sy
 801772a:	f3bf 8f6f 	isb	sy
 801772e:	e76c      	b.n	801760a <xQueuePeek+0x8e>
			}
			else
			{
				/* There is data in the queue now, so don't enter the blocked
				state, instead return to try and obtain the data. */
				prvUnlockQueue( pxQueue );
 8017730:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017732:	f000 f8a7 	bl	8017884 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8017736:	f000 fca9 	bl	801808c <xTaskResumeAll>
 801773a:	e766      	b.n	801760a <xQueuePeek+0x8e>
		}
		else
		{
			/* The timeout has expired.  If there is still no data in the queue
			exit, otherwise go back and try to read the data again. */
			prvUnlockQueue( pxQueue );
 801773c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801773e:	f000 f8a1 	bl	8017884 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8017742:	f000 fca3 	bl	801808c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017746:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017748:	f000 f8ee 	bl	8017928 <prvIsQueueEmpty>
 801774c:	4603      	mov	r3, r0
 801774e:	2b00      	cmp	r3, #0
 8017750:	f43f af5b 	beq.w	801760a <xQueuePeek+0x8e>
			{
				traceQUEUE_PEEK_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8017754:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8017756:	4618      	mov	r0, r3
 8017758:	373c      	adds	r7, #60	; 0x3c
 801775a:	46bd      	mov	sp, r7
 801775c:	bd90      	pop	{r4, r7, pc}
 801775e:	bf00      	nop
 8017760:	e000ed04 	.word	0xe000ed04

08017764 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8017764:	b580      	push	{r7, lr}
 8017766:	b086      	sub	sp, #24
 8017768:	af00      	add	r7, sp, #0
 801776a:	60f8      	str	r0, [r7, #12]
 801776c:	60b9      	str	r1, [r7, #8]
 801776e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8017770:	2300      	movs	r3, #0
 8017772:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017774:	68fb      	ldr	r3, [r7, #12]
 8017776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017778:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801777a:	68fb      	ldr	r3, [r7, #12]
 801777c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801777e:	2b00      	cmp	r3, #0
 8017780:	d10d      	bne.n	801779e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8017782:	68fb      	ldr	r3, [r7, #12]
 8017784:	681b      	ldr	r3, [r3, #0]
 8017786:	2b00      	cmp	r3, #0
 8017788:	d14d      	bne.n	8017826 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801778a:	68fb      	ldr	r3, [r7, #12]
 801778c:	689b      	ldr	r3, [r3, #8]
 801778e:	4618      	mov	r0, r3
 8017790:	f001 f8e4 	bl	801895c <xTaskPriorityDisinherit>
 8017794:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8017796:	68fb      	ldr	r3, [r7, #12]
 8017798:	2200      	movs	r2, #0
 801779a:	609a      	str	r2, [r3, #8]
 801779c:	e043      	b.n	8017826 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801779e:	687b      	ldr	r3, [r7, #4]
 80177a0:	2b00      	cmp	r3, #0
 80177a2:	d119      	bne.n	80177d8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80177a4:	68fb      	ldr	r3, [r7, #12]
 80177a6:	6858      	ldr	r0, [r3, #4]
 80177a8:	68fb      	ldr	r3, [r7, #12]
 80177aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80177ac:	461a      	mov	r2, r3
 80177ae:	68b9      	ldr	r1, [r7, #8]
 80177b0:	f003 fc54 	bl	801b05c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80177b4:	68fb      	ldr	r3, [r7, #12]
 80177b6:	685a      	ldr	r2, [r3, #4]
 80177b8:	68fb      	ldr	r3, [r7, #12]
 80177ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80177bc:	441a      	add	r2, r3
 80177be:	68fb      	ldr	r3, [r7, #12]
 80177c0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80177c2:	68fb      	ldr	r3, [r7, #12]
 80177c4:	685a      	ldr	r2, [r3, #4]
 80177c6:	68fb      	ldr	r3, [r7, #12]
 80177c8:	689b      	ldr	r3, [r3, #8]
 80177ca:	429a      	cmp	r2, r3
 80177cc:	d32b      	bcc.n	8017826 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80177ce:	68fb      	ldr	r3, [r7, #12]
 80177d0:	681a      	ldr	r2, [r3, #0]
 80177d2:	68fb      	ldr	r3, [r7, #12]
 80177d4:	605a      	str	r2, [r3, #4]
 80177d6:	e026      	b.n	8017826 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80177d8:	68fb      	ldr	r3, [r7, #12]
 80177da:	68d8      	ldr	r0, [r3, #12]
 80177dc:	68fb      	ldr	r3, [r7, #12]
 80177de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80177e0:	461a      	mov	r2, r3
 80177e2:	68b9      	ldr	r1, [r7, #8]
 80177e4:	f003 fc3a 	bl	801b05c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80177e8:	68fb      	ldr	r3, [r7, #12]
 80177ea:	68da      	ldr	r2, [r3, #12]
 80177ec:	68fb      	ldr	r3, [r7, #12]
 80177ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80177f0:	425b      	negs	r3, r3
 80177f2:	441a      	add	r2, r3
 80177f4:	68fb      	ldr	r3, [r7, #12]
 80177f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80177f8:	68fb      	ldr	r3, [r7, #12]
 80177fa:	68da      	ldr	r2, [r3, #12]
 80177fc:	68fb      	ldr	r3, [r7, #12]
 80177fe:	681b      	ldr	r3, [r3, #0]
 8017800:	429a      	cmp	r2, r3
 8017802:	d207      	bcs.n	8017814 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8017804:	68fb      	ldr	r3, [r7, #12]
 8017806:	689a      	ldr	r2, [r3, #8]
 8017808:	68fb      	ldr	r3, [r7, #12]
 801780a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801780c:	425b      	negs	r3, r3
 801780e:	441a      	add	r2, r3
 8017810:	68fb      	ldr	r3, [r7, #12]
 8017812:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8017814:	687b      	ldr	r3, [r7, #4]
 8017816:	2b02      	cmp	r3, #2
 8017818:	d105      	bne.n	8017826 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801781a:	693b      	ldr	r3, [r7, #16]
 801781c:	2b00      	cmp	r3, #0
 801781e:	d002      	beq.n	8017826 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8017820:	693b      	ldr	r3, [r7, #16]
 8017822:	3b01      	subs	r3, #1
 8017824:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8017826:	693b      	ldr	r3, [r7, #16]
 8017828:	1c5a      	adds	r2, r3, #1
 801782a:	68fb      	ldr	r3, [r7, #12]
 801782c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801782e:	697b      	ldr	r3, [r7, #20]
}
 8017830:	4618      	mov	r0, r3
 8017832:	3718      	adds	r7, #24
 8017834:	46bd      	mov	sp, r7
 8017836:	bd80      	pop	{r7, pc}

08017838 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8017838:	b580      	push	{r7, lr}
 801783a:	b082      	sub	sp, #8
 801783c:	af00      	add	r7, sp, #0
 801783e:	6078      	str	r0, [r7, #4]
 8017840:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8017842:	687b      	ldr	r3, [r7, #4]
 8017844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017846:	2b00      	cmp	r3, #0
 8017848:	d018      	beq.n	801787c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801784a:	687b      	ldr	r3, [r7, #4]
 801784c:	68da      	ldr	r2, [r3, #12]
 801784e:	687b      	ldr	r3, [r7, #4]
 8017850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017852:	441a      	add	r2, r3
 8017854:	687b      	ldr	r3, [r7, #4]
 8017856:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8017858:	687b      	ldr	r3, [r7, #4]
 801785a:	68da      	ldr	r2, [r3, #12]
 801785c:	687b      	ldr	r3, [r7, #4]
 801785e:	689b      	ldr	r3, [r3, #8]
 8017860:	429a      	cmp	r2, r3
 8017862:	d303      	bcc.n	801786c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8017864:	687b      	ldr	r3, [r7, #4]
 8017866:	681a      	ldr	r2, [r3, #0]
 8017868:	687b      	ldr	r3, [r7, #4]
 801786a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801786c:	687b      	ldr	r3, [r7, #4]
 801786e:	68d9      	ldr	r1, [r3, #12]
 8017870:	687b      	ldr	r3, [r7, #4]
 8017872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017874:	461a      	mov	r2, r3
 8017876:	6838      	ldr	r0, [r7, #0]
 8017878:	f003 fbf0 	bl	801b05c <memcpy>
	}
}
 801787c:	bf00      	nop
 801787e:	3708      	adds	r7, #8
 8017880:	46bd      	mov	sp, r7
 8017882:	bd80      	pop	{r7, pc}

08017884 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8017884:	b580      	push	{r7, lr}
 8017886:	b084      	sub	sp, #16
 8017888:	af00      	add	r7, sp, #0
 801788a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801788c:	f001 fdaa 	bl	80193e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8017890:	687b      	ldr	r3, [r7, #4]
 8017892:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017896:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8017898:	e011      	b.n	80178be <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801789a:	687b      	ldr	r3, [r7, #4]
 801789c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801789e:	2b00      	cmp	r3, #0
 80178a0:	d012      	beq.n	80178c8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80178a2:	687b      	ldr	r3, [r7, #4]
 80178a4:	3324      	adds	r3, #36	; 0x24
 80178a6:	4618      	mov	r0, r3
 80178a8:	f000 fe3c 	bl	8018524 <xTaskRemoveFromEventList>
 80178ac:	4603      	mov	r3, r0
 80178ae:	2b00      	cmp	r3, #0
 80178b0:	d001      	beq.n	80178b6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80178b2:	f000 ff17 	bl	80186e4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80178b6:	7bfb      	ldrb	r3, [r7, #15]
 80178b8:	3b01      	subs	r3, #1
 80178ba:	b2db      	uxtb	r3, r3
 80178bc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80178be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80178c2:	2b00      	cmp	r3, #0
 80178c4:	dce9      	bgt.n	801789a <prvUnlockQueue+0x16>
 80178c6:	e000      	b.n	80178ca <prvUnlockQueue+0x46>
					break;
 80178c8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80178ca:	687b      	ldr	r3, [r7, #4]
 80178cc:	22ff      	movs	r2, #255	; 0xff
 80178ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80178d2:	f001 fdb7 	bl	8019444 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80178d6:	f001 fd85 	bl	80193e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80178da:	687b      	ldr	r3, [r7, #4]
 80178dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80178e0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80178e2:	e011      	b.n	8017908 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80178e4:	687b      	ldr	r3, [r7, #4]
 80178e6:	691b      	ldr	r3, [r3, #16]
 80178e8:	2b00      	cmp	r3, #0
 80178ea:	d012      	beq.n	8017912 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80178ec:	687b      	ldr	r3, [r7, #4]
 80178ee:	3310      	adds	r3, #16
 80178f0:	4618      	mov	r0, r3
 80178f2:	f000 fe17 	bl	8018524 <xTaskRemoveFromEventList>
 80178f6:	4603      	mov	r3, r0
 80178f8:	2b00      	cmp	r3, #0
 80178fa:	d001      	beq.n	8017900 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80178fc:	f000 fef2 	bl	80186e4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8017900:	7bbb      	ldrb	r3, [r7, #14]
 8017902:	3b01      	subs	r3, #1
 8017904:	b2db      	uxtb	r3, r3
 8017906:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8017908:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801790c:	2b00      	cmp	r3, #0
 801790e:	dce9      	bgt.n	80178e4 <prvUnlockQueue+0x60>
 8017910:	e000      	b.n	8017914 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8017912:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8017914:	687b      	ldr	r3, [r7, #4]
 8017916:	22ff      	movs	r2, #255	; 0xff
 8017918:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801791c:	f001 fd92 	bl	8019444 <vPortExitCritical>
}
 8017920:	bf00      	nop
 8017922:	3710      	adds	r7, #16
 8017924:	46bd      	mov	sp, r7
 8017926:	bd80      	pop	{r7, pc}

08017928 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8017928:	b580      	push	{r7, lr}
 801792a:	b084      	sub	sp, #16
 801792c:	af00      	add	r7, sp, #0
 801792e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8017930:	f001 fd58 	bl	80193e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8017934:	687b      	ldr	r3, [r7, #4]
 8017936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017938:	2b00      	cmp	r3, #0
 801793a:	d102      	bne.n	8017942 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801793c:	2301      	movs	r3, #1
 801793e:	60fb      	str	r3, [r7, #12]
 8017940:	e001      	b.n	8017946 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8017942:	2300      	movs	r3, #0
 8017944:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8017946:	f001 fd7d 	bl	8019444 <vPortExitCritical>

	return xReturn;
 801794a:	68fb      	ldr	r3, [r7, #12]
}
 801794c:	4618      	mov	r0, r3
 801794e:	3710      	adds	r7, #16
 8017950:	46bd      	mov	sp, r7
 8017952:	bd80      	pop	{r7, pc}

08017954 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8017954:	b580      	push	{r7, lr}
 8017956:	b084      	sub	sp, #16
 8017958:	af00      	add	r7, sp, #0
 801795a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801795c:	f001 fd42 	bl	80193e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8017960:	687b      	ldr	r3, [r7, #4]
 8017962:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8017964:	687b      	ldr	r3, [r7, #4]
 8017966:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017968:	429a      	cmp	r2, r3
 801796a:	d102      	bne.n	8017972 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801796c:	2301      	movs	r3, #1
 801796e:	60fb      	str	r3, [r7, #12]
 8017970:	e001      	b.n	8017976 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8017972:	2300      	movs	r3, #0
 8017974:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8017976:	f001 fd65 	bl	8019444 <vPortExitCritical>

	return xReturn;
 801797a:	68fb      	ldr	r3, [r7, #12]
}
 801797c:	4618      	mov	r0, r3
 801797e:	3710      	adds	r7, #16
 8017980:	46bd      	mov	sp, r7
 8017982:	bd80      	pop	{r7, pc}

08017984 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8017984:	b580      	push	{r7, lr}
 8017986:	b084      	sub	sp, #16
 8017988:	af00      	add	r7, sp, #0
 801798a:	6078      	str	r0, [r7, #4]
 801798c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801798e:	2300      	movs	r3, #0
 8017990:	60fb      	str	r3, [r7, #12]
 8017992:	e01e      	b.n	80179d2 <vQueueAddToRegistry+0x4e>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8017994:	4a13      	ldr	r2, [pc, #76]	; (80179e4 <vQueueAddToRegistry+0x60>)
 8017996:	68fb      	ldr	r3, [r7, #12]
 8017998:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801799c:	2b00      	cmp	r3, #0
 801799e:	d115      	bne.n	80179cc <vQueueAddToRegistry+0x48>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80179a0:	4910      	ldr	r1, [pc, #64]	; (80179e4 <vQueueAddToRegistry+0x60>)
 80179a2:	68fb      	ldr	r3, [r7, #12]
 80179a4:	683a      	ldr	r2, [r7, #0]
 80179a6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80179aa:	4a0e      	ldr	r2, [pc, #56]	; (80179e4 <vQueueAddToRegistry+0x60>)
 80179ac:	68fb      	ldr	r3, [r7, #12]
 80179ae:	00db      	lsls	r3, r3, #3
 80179b0:	4413      	add	r3, r2
 80179b2:	687a      	ldr	r2, [r7, #4]
 80179b4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 80179b6:	687b      	ldr	r3, [r7, #4]
 80179b8:	4618      	mov	r0, r3
 80179ba:	f003 f9af 	bl	801ad1c <SEGGER_SYSVIEW_ShrinkId>
 80179be:	4601      	mov	r1, r0
 80179c0:	683b      	ldr	r3, [r7, #0]
 80179c2:	461a      	mov	r2, r3
 80179c4:	2071      	movs	r0, #113	; 0x71
 80179c6:	f002 fc9d 	bl	801a304 <SEGGER_SYSVIEW_RecordU32x2>
				break;
 80179ca:	e006      	b.n	80179da <vQueueAddToRegistry+0x56>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80179cc:	68fb      	ldr	r3, [r7, #12]
 80179ce:	3301      	adds	r3, #1
 80179d0:	60fb      	str	r3, [r7, #12]
 80179d2:	68fb      	ldr	r3, [r7, #12]
 80179d4:	2b07      	cmp	r3, #7
 80179d6:	d9dd      	bls.n	8017994 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80179d8:	bf00      	nop
 80179da:	bf00      	nop
 80179dc:	3710      	adds	r7, #16
 80179de:	46bd      	mov	sp, r7
 80179e0:	bd80      	pop	{r7, pc}
 80179e2:	bf00      	nop
 80179e4:	2001ec28 	.word	0x2001ec28

080179e8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80179e8:	b580      	push	{r7, lr}
 80179ea:	b086      	sub	sp, #24
 80179ec:	af00      	add	r7, sp, #0
 80179ee:	60f8      	str	r0, [r7, #12]
 80179f0:	60b9      	str	r1, [r7, #8]
 80179f2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80179f4:	68fb      	ldr	r3, [r7, #12]
 80179f6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80179f8:	f001 fcf4 	bl	80193e4 <vPortEnterCritical>
 80179fc:	697b      	ldr	r3, [r7, #20]
 80179fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017a02:	b25b      	sxtb	r3, r3
 8017a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017a08:	d103      	bne.n	8017a12 <vQueueWaitForMessageRestricted+0x2a>
 8017a0a:	697b      	ldr	r3, [r7, #20]
 8017a0c:	2200      	movs	r2, #0
 8017a0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8017a12:	697b      	ldr	r3, [r7, #20]
 8017a14:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017a18:	b25b      	sxtb	r3, r3
 8017a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017a1e:	d103      	bne.n	8017a28 <vQueueWaitForMessageRestricted+0x40>
 8017a20:	697b      	ldr	r3, [r7, #20]
 8017a22:	2200      	movs	r2, #0
 8017a24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8017a28:	f001 fd0c 	bl	8019444 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8017a2c:	697b      	ldr	r3, [r7, #20]
 8017a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017a30:	2b00      	cmp	r3, #0
 8017a32:	d106      	bne.n	8017a42 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8017a34:	697b      	ldr	r3, [r7, #20]
 8017a36:	3324      	adds	r3, #36	; 0x24
 8017a38:	687a      	ldr	r2, [r7, #4]
 8017a3a:	68b9      	ldr	r1, [r7, #8]
 8017a3c:	4618      	mov	r0, r3
 8017a3e:	f000 fd43 	bl	80184c8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8017a42:	6978      	ldr	r0, [r7, #20]
 8017a44:	f7ff ff1e 	bl	8017884 <prvUnlockQueue>
	}
 8017a48:	bf00      	nop
 8017a4a:	3718      	adds	r7, #24
 8017a4c:	46bd      	mov	sp, r7
 8017a4e:	bd80      	pop	{r7, pc}

08017a50 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8017a50:	b580      	push	{r7, lr}
 8017a52:	b08e      	sub	sp, #56	; 0x38
 8017a54:	af04      	add	r7, sp, #16
 8017a56:	60f8      	str	r0, [r7, #12]
 8017a58:	60b9      	str	r1, [r7, #8]
 8017a5a:	607a      	str	r2, [r7, #4]
 8017a5c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8017a5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017a60:	2b00      	cmp	r3, #0
 8017a62:	d10a      	bne.n	8017a7a <xTaskCreateStatic+0x2a>
	__asm volatile
 8017a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a68:	f383 8811 	msr	BASEPRI, r3
 8017a6c:	f3bf 8f6f 	isb	sy
 8017a70:	f3bf 8f4f 	dsb	sy
 8017a74:	623b      	str	r3, [r7, #32]
}
 8017a76:	bf00      	nop
 8017a78:	e7fe      	b.n	8017a78 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8017a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017a7c:	2b00      	cmp	r3, #0
 8017a7e:	d10a      	bne.n	8017a96 <xTaskCreateStatic+0x46>
	__asm volatile
 8017a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a84:	f383 8811 	msr	BASEPRI, r3
 8017a88:	f3bf 8f6f 	isb	sy
 8017a8c:	f3bf 8f4f 	dsb	sy
 8017a90:	61fb      	str	r3, [r7, #28]
}
 8017a92:	bf00      	nop
 8017a94:	e7fe      	b.n	8017a94 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8017a96:	23cc      	movs	r3, #204	; 0xcc
 8017a98:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8017a9a:	693b      	ldr	r3, [r7, #16]
 8017a9c:	2bcc      	cmp	r3, #204	; 0xcc
 8017a9e:	d00a      	beq.n	8017ab6 <xTaskCreateStatic+0x66>
	__asm volatile
 8017aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017aa4:	f383 8811 	msr	BASEPRI, r3
 8017aa8:	f3bf 8f6f 	isb	sy
 8017aac:	f3bf 8f4f 	dsb	sy
 8017ab0:	61bb      	str	r3, [r7, #24]
}
 8017ab2:	bf00      	nop
 8017ab4:	e7fe      	b.n	8017ab4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8017ab6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8017ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017aba:	2b00      	cmp	r3, #0
 8017abc:	d01e      	beq.n	8017afc <xTaskCreateStatic+0xac>
 8017abe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017ac0:	2b00      	cmp	r3, #0
 8017ac2:	d01b      	beq.n	8017afc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8017ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ac6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8017ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017aca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017acc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8017ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ad0:	2202      	movs	r2, #2
 8017ad2:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8017ad6:	2300      	movs	r3, #0
 8017ad8:	9303      	str	r3, [sp, #12]
 8017ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017adc:	9302      	str	r3, [sp, #8]
 8017ade:	f107 0314 	add.w	r3, r7, #20
 8017ae2:	9301      	str	r3, [sp, #4]
 8017ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ae6:	9300      	str	r3, [sp, #0]
 8017ae8:	683b      	ldr	r3, [r7, #0]
 8017aea:	687a      	ldr	r2, [r7, #4]
 8017aec:	68b9      	ldr	r1, [r7, #8]
 8017aee:	68f8      	ldr	r0, [r7, #12]
 8017af0:	f000 f850 	bl	8017b94 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8017af4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017af6:	f000 f8f3 	bl	8017ce0 <prvAddNewTaskToReadyList>
 8017afa:	e001      	b.n	8017b00 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8017afc:	2300      	movs	r3, #0
 8017afe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8017b00:	697b      	ldr	r3, [r7, #20]
	}
 8017b02:	4618      	mov	r0, r3
 8017b04:	3728      	adds	r7, #40	; 0x28
 8017b06:	46bd      	mov	sp, r7
 8017b08:	bd80      	pop	{r7, pc}

08017b0a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8017b0a:	b580      	push	{r7, lr}
 8017b0c:	b08c      	sub	sp, #48	; 0x30
 8017b0e:	af04      	add	r7, sp, #16
 8017b10:	60f8      	str	r0, [r7, #12]
 8017b12:	60b9      	str	r1, [r7, #8]
 8017b14:	603b      	str	r3, [r7, #0]
 8017b16:	4613      	mov	r3, r2
 8017b18:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8017b1a:	88fb      	ldrh	r3, [r7, #6]
 8017b1c:	009b      	lsls	r3, r3, #2
 8017b1e:	4618      	mov	r0, r3
 8017b20:	f001 fd82 	bl	8019628 <pvPortMalloc>
 8017b24:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8017b26:	697b      	ldr	r3, [r7, #20]
 8017b28:	2b00      	cmp	r3, #0
 8017b2a:	d00e      	beq.n	8017b4a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8017b2c:	20cc      	movs	r0, #204	; 0xcc
 8017b2e:	f001 fd7b 	bl	8019628 <pvPortMalloc>
 8017b32:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8017b34:	69fb      	ldr	r3, [r7, #28]
 8017b36:	2b00      	cmp	r3, #0
 8017b38:	d003      	beq.n	8017b42 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8017b3a:	69fb      	ldr	r3, [r7, #28]
 8017b3c:	697a      	ldr	r2, [r7, #20]
 8017b3e:	631a      	str	r2, [r3, #48]	; 0x30
 8017b40:	e005      	b.n	8017b4e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8017b42:	6978      	ldr	r0, [r7, #20]
 8017b44:	f001 fe3c 	bl	80197c0 <vPortFree>
 8017b48:	e001      	b.n	8017b4e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8017b4a:	2300      	movs	r3, #0
 8017b4c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8017b4e:	69fb      	ldr	r3, [r7, #28]
 8017b50:	2b00      	cmp	r3, #0
 8017b52:	d017      	beq.n	8017b84 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8017b54:	69fb      	ldr	r3, [r7, #28]
 8017b56:	2200      	movs	r2, #0
 8017b58:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8017b5c:	88fa      	ldrh	r2, [r7, #6]
 8017b5e:	2300      	movs	r3, #0
 8017b60:	9303      	str	r3, [sp, #12]
 8017b62:	69fb      	ldr	r3, [r7, #28]
 8017b64:	9302      	str	r3, [sp, #8]
 8017b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b68:	9301      	str	r3, [sp, #4]
 8017b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b6c:	9300      	str	r3, [sp, #0]
 8017b6e:	683b      	ldr	r3, [r7, #0]
 8017b70:	68b9      	ldr	r1, [r7, #8]
 8017b72:	68f8      	ldr	r0, [r7, #12]
 8017b74:	f000 f80e 	bl	8017b94 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8017b78:	69f8      	ldr	r0, [r7, #28]
 8017b7a:	f000 f8b1 	bl	8017ce0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8017b7e:	2301      	movs	r3, #1
 8017b80:	61bb      	str	r3, [r7, #24]
 8017b82:	e002      	b.n	8017b8a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8017b84:	f04f 33ff 	mov.w	r3, #4294967295
 8017b88:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8017b8a:	69bb      	ldr	r3, [r7, #24]
	}
 8017b8c:	4618      	mov	r0, r3
 8017b8e:	3720      	adds	r7, #32
 8017b90:	46bd      	mov	sp, r7
 8017b92:	bd80      	pop	{r7, pc}

08017b94 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8017b94:	b580      	push	{r7, lr}
 8017b96:	b088      	sub	sp, #32
 8017b98:	af00      	add	r7, sp, #0
 8017b9a:	60f8      	str	r0, [r7, #12]
 8017b9c:	60b9      	str	r1, [r7, #8]
 8017b9e:	607a      	str	r2, [r7, #4]
 8017ba0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8017ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ba4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8017ba6:	687b      	ldr	r3, [r7, #4]
 8017ba8:	009b      	lsls	r3, r3, #2
 8017baa:	461a      	mov	r2, r3
 8017bac:	21a5      	movs	r1, #165	; 0xa5
 8017bae:	f003 fa63 	bl	801b078 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8017bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017bb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8017bb6:	687b      	ldr	r3, [r7, #4]
 8017bb8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8017bbc:	3b01      	subs	r3, #1
 8017bbe:	009b      	lsls	r3, r3, #2
 8017bc0:	4413      	add	r3, r2
 8017bc2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8017bc4:	69bb      	ldr	r3, [r7, #24]
 8017bc6:	f023 0307 	bic.w	r3, r3, #7
 8017bca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8017bcc:	69bb      	ldr	r3, [r7, #24]
 8017bce:	f003 0307 	and.w	r3, r3, #7
 8017bd2:	2b00      	cmp	r3, #0
 8017bd4:	d00a      	beq.n	8017bec <prvInitialiseNewTask+0x58>
	__asm volatile
 8017bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017bda:	f383 8811 	msr	BASEPRI, r3
 8017bde:	f3bf 8f6f 	isb	sy
 8017be2:	f3bf 8f4f 	dsb	sy
 8017be6:	617b      	str	r3, [r7, #20]
}
 8017be8:	bf00      	nop
 8017bea:	e7fe      	b.n	8017bea <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8017bec:	68bb      	ldr	r3, [r7, #8]
 8017bee:	2b00      	cmp	r3, #0
 8017bf0:	d01f      	beq.n	8017c32 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8017bf2:	2300      	movs	r3, #0
 8017bf4:	61fb      	str	r3, [r7, #28]
 8017bf6:	e012      	b.n	8017c1e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8017bf8:	68ba      	ldr	r2, [r7, #8]
 8017bfa:	69fb      	ldr	r3, [r7, #28]
 8017bfc:	4413      	add	r3, r2
 8017bfe:	7819      	ldrb	r1, [r3, #0]
 8017c00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017c02:	69fb      	ldr	r3, [r7, #28]
 8017c04:	4413      	add	r3, r2
 8017c06:	3334      	adds	r3, #52	; 0x34
 8017c08:	460a      	mov	r2, r1
 8017c0a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8017c0c:	68ba      	ldr	r2, [r7, #8]
 8017c0e:	69fb      	ldr	r3, [r7, #28]
 8017c10:	4413      	add	r3, r2
 8017c12:	781b      	ldrb	r3, [r3, #0]
 8017c14:	2b00      	cmp	r3, #0
 8017c16:	d006      	beq.n	8017c26 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8017c18:	69fb      	ldr	r3, [r7, #28]
 8017c1a:	3301      	adds	r3, #1
 8017c1c:	61fb      	str	r3, [r7, #28]
 8017c1e:	69fb      	ldr	r3, [r7, #28]
 8017c20:	2b1f      	cmp	r3, #31
 8017c22:	d9e9      	bls.n	8017bf8 <prvInitialiseNewTask+0x64>
 8017c24:	e000      	b.n	8017c28 <prvInitialiseNewTask+0x94>
			{
				break;
 8017c26:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8017c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c2a:	2200      	movs	r2, #0
 8017c2c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8017c30:	e003      	b.n	8017c3a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8017c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c34:	2200      	movs	r2, #0
 8017c36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8017c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c3c:	2b37      	cmp	r3, #55	; 0x37
 8017c3e:	d901      	bls.n	8017c44 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8017c40:	2337      	movs	r3, #55	; 0x37
 8017c42:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8017c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017c48:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8017c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017c4e:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->uxMutexesHeld = 0;
 8017c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c52:	2200      	movs	r2, #0
 8017c54:	661a      	str	r2, [r3, #96]	; 0x60
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8017c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c58:	3304      	adds	r3, #4
 8017c5a:	4618      	mov	r0, r3
 8017c5c:	f7fe ffd0 	bl	8016c00 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8017c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c62:	3318      	adds	r3, #24
 8017c64:	4618      	mov	r0, r3
 8017c66:	f7fe ffcb 	bl	8016c00 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8017c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017c6e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c72:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8017c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c78:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8017c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017c7e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8017c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c82:	2200      	movs	r2, #0
 8017c84:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8017c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c8a:	2200      	movs	r2, #0
 8017c8c:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8017c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c92:	3364      	adds	r3, #100	; 0x64
 8017c94:	2260      	movs	r2, #96	; 0x60
 8017c96:	2100      	movs	r1, #0
 8017c98:	4618      	mov	r0, r3
 8017c9a:	f003 f9ed 	bl	801b078 <memset>
 8017c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ca0:	4a0c      	ldr	r2, [pc, #48]	; (8017cd4 <prvInitialiseNewTask+0x140>)
 8017ca2:	669a      	str	r2, [r3, #104]	; 0x68
 8017ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ca6:	4a0c      	ldr	r2, [pc, #48]	; (8017cd8 <prvInitialiseNewTask+0x144>)
 8017ca8:	66da      	str	r2, [r3, #108]	; 0x6c
 8017caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017cac:	4a0b      	ldr	r2, [pc, #44]	; (8017cdc <prvInitialiseNewTask+0x148>)
 8017cae:	671a      	str	r2, [r3, #112]	; 0x70
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8017cb0:	683a      	ldr	r2, [r7, #0]
 8017cb2:	68f9      	ldr	r1, [r7, #12]
 8017cb4:	69b8      	ldr	r0, [r7, #24]
 8017cb6:	f001 fa69 	bl	801918c <pxPortInitialiseStack>
 8017cba:	4602      	mov	r2, r0
 8017cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017cbe:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8017cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017cc2:	2b00      	cmp	r3, #0
 8017cc4:	d002      	beq.n	8017ccc <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8017cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017cc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017cca:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8017ccc:	bf00      	nop
 8017cce:	3720      	adds	r7, #32
 8017cd0:	46bd      	mov	sp, r7
 8017cd2:	bd80      	pop	{r7, pc}
 8017cd4:	0801c414 	.word	0x0801c414
 8017cd8:	0801c434 	.word	0x0801c434
 8017cdc:	0801c3f4 	.word	0x0801c3f4

08017ce0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8017ce0:	b5b0      	push	{r4, r5, r7, lr}
 8017ce2:	b084      	sub	sp, #16
 8017ce4:	af02      	add	r7, sp, #8
 8017ce6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8017ce8:	f001 fb7c 	bl	80193e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8017cec:	4b3c      	ldr	r3, [pc, #240]	; (8017de0 <prvAddNewTaskToReadyList+0x100>)
 8017cee:	681b      	ldr	r3, [r3, #0]
 8017cf0:	3301      	adds	r3, #1
 8017cf2:	4a3b      	ldr	r2, [pc, #236]	; (8017de0 <prvAddNewTaskToReadyList+0x100>)
 8017cf4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8017cf6:	4b3b      	ldr	r3, [pc, #236]	; (8017de4 <prvAddNewTaskToReadyList+0x104>)
 8017cf8:	681b      	ldr	r3, [r3, #0]
 8017cfa:	2b00      	cmp	r3, #0
 8017cfc:	d109      	bne.n	8017d12 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8017cfe:	4a39      	ldr	r2, [pc, #228]	; (8017de4 <prvAddNewTaskToReadyList+0x104>)
 8017d00:	687b      	ldr	r3, [r7, #4]
 8017d02:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8017d04:	4b36      	ldr	r3, [pc, #216]	; (8017de0 <prvAddNewTaskToReadyList+0x100>)
 8017d06:	681b      	ldr	r3, [r3, #0]
 8017d08:	2b01      	cmp	r3, #1
 8017d0a:	d110      	bne.n	8017d2e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8017d0c:	f000 fd0e 	bl	801872c <prvInitialiseTaskLists>
 8017d10:	e00d      	b.n	8017d2e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8017d12:	4b35      	ldr	r3, [pc, #212]	; (8017de8 <prvAddNewTaskToReadyList+0x108>)
 8017d14:	681b      	ldr	r3, [r3, #0]
 8017d16:	2b00      	cmp	r3, #0
 8017d18:	d109      	bne.n	8017d2e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8017d1a:	4b32      	ldr	r3, [pc, #200]	; (8017de4 <prvAddNewTaskToReadyList+0x104>)
 8017d1c:	681b      	ldr	r3, [r3, #0]
 8017d1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017d20:	687b      	ldr	r3, [r7, #4]
 8017d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017d24:	429a      	cmp	r2, r3
 8017d26:	d802      	bhi.n	8017d2e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8017d28:	4a2e      	ldr	r2, [pc, #184]	; (8017de4 <prvAddNewTaskToReadyList+0x104>)
 8017d2a:	687b      	ldr	r3, [r7, #4]
 8017d2c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8017d2e:	4b2f      	ldr	r3, [pc, #188]	; (8017dec <prvAddNewTaskToReadyList+0x10c>)
 8017d30:	681b      	ldr	r3, [r3, #0]
 8017d32:	3301      	adds	r3, #1
 8017d34:	4a2d      	ldr	r2, [pc, #180]	; (8017dec <prvAddNewTaskToReadyList+0x10c>)
 8017d36:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8017d38:	4b2c      	ldr	r3, [pc, #176]	; (8017dec <prvAddNewTaskToReadyList+0x10c>)
 8017d3a:	681a      	ldr	r2, [r3, #0]
 8017d3c:	687b      	ldr	r3, [r7, #4]
 8017d3e:	655a      	str	r2, [r3, #84]	; 0x54
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 8017d40:	687b      	ldr	r3, [r7, #4]
 8017d42:	2b00      	cmp	r3, #0
 8017d44:	d016      	beq.n	8017d74 <prvAddNewTaskToReadyList+0x94>
 8017d46:	687b      	ldr	r3, [r7, #4]
 8017d48:	4618      	mov	r0, r3
 8017d4a:	f002 ff21 	bl	801ab90 <SEGGER_SYSVIEW_OnTaskCreate>
 8017d4e:	6878      	ldr	r0, [r7, #4]
 8017d50:	687b      	ldr	r3, [r7, #4]
 8017d52:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8017d56:	687b      	ldr	r3, [r7, #4]
 8017d58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017d5a:	687b      	ldr	r3, [r7, #4]
 8017d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017d5e:	461d      	mov	r5, r3
 8017d60:	687b      	ldr	r3, [r7, #4]
 8017d62:	681b      	ldr	r3, [r3, #0]
 8017d64:	461c      	mov	r4, r3
 8017d66:	687b      	ldr	r3, [r7, #4]
 8017d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017d6a:	1ae3      	subs	r3, r4, r3
 8017d6c:	9300      	str	r3, [sp, #0]
 8017d6e:	462b      	mov	r3, r5
 8017d70:	f7ea f93c 	bl	8001fec <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 8017d74:	687b      	ldr	r3, [r7, #4]
 8017d76:	4618      	mov	r0, r3
 8017d78:	f002 ff8e 	bl	801ac98 <SEGGER_SYSVIEW_OnTaskStartReady>
 8017d7c:	687b      	ldr	r3, [r7, #4]
 8017d7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017d80:	4b1b      	ldr	r3, [pc, #108]	; (8017df0 <prvAddNewTaskToReadyList+0x110>)
 8017d82:	681b      	ldr	r3, [r3, #0]
 8017d84:	429a      	cmp	r2, r3
 8017d86:	d903      	bls.n	8017d90 <prvAddNewTaskToReadyList+0xb0>
 8017d88:	687b      	ldr	r3, [r7, #4]
 8017d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017d8c:	4a18      	ldr	r2, [pc, #96]	; (8017df0 <prvAddNewTaskToReadyList+0x110>)
 8017d8e:	6013      	str	r3, [r2, #0]
 8017d90:	687b      	ldr	r3, [r7, #4]
 8017d92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017d94:	4613      	mov	r3, r2
 8017d96:	009b      	lsls	r3, r3, #2
 8017d98:	4413      	add	r3, r2
 8017d9a:	009b      	lsls	r3, r3, #2
 8017d9c:	4a15      	ldr	r2, [pc, #84]	; (8017df4 <prvAddNewTaskToReadyList+0x114>)
 8017d9e:	441a      	add	r2, r3
 8017da0:	687b      	ldr	r3, [r7, #4]
 8017da2:	3304      	adds	r3, #4
 8017da4:	4619      	mov	r1, r3
 8017da6:	4610      	mov	r0, r2
 8017da8:	f7fe ff37 	bl	8016c1a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8017dac:	f001 fb4a 	bl	8019444 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8017db0:	4b0d      	ldr	r3, [pc, #52]	; (8017de8 <prvAddNewTaskToReadyList+0x108>)
 8017db2:	681b      	ldr	r3, [r3, #0]
 8017db4:	2b00      	cmp	r3, #0
 8017db6:	d00e      	beq.n	8017dd6 <prvAddNewTaskToReadyList+0xf6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8017db8:	4b0a      	ldr	r3, [pc, #40]	; (8017de4 <prvAddNewTaskToReadyList+0x104>)
 8017dba:	681b      	ldr	r3, [r3, #0]
 8017dbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017dbe:	687b      	ldr	r3, [r7, #4]
 8017dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017dc2:	429a      	cmp	r2, r3
 8017dc4:	d207      	bcs.n	8017dd6 <prvAddNewTaskToReadyList+0xf6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8017dc6:	4b0c      	ldr	r3, [pc, #48]	; (8017df8 <prvAddNewTaskToReadyList+0x118>)
 8017dc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017dcc:	601a      	str	r2, [r3, #0]
 8017dce:	f3bf 8f4f 	dsb	sy
 8017dd2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8017dd6:	bf00      	nop
 8017dd8:	3708      	adds	r7, #8
 8017dda:	46bd      	mov	sp, r7
 8017ddc:	bdb0      	pop	{r4, r5, r7, pc}
 8017dde:	bf00      	nop
 8017de0:	20002470 	.word	0x20002470
 8017de4:	20001f9c 	.word	0x20001f9c
 8017de8:	2000247c 	.word	0x2000247c
 8017dec:	2000248c 	.word	0x2000248c
 8017df0:	20002478 	.word	0x20002478
 8017df4:	20001fa0 	.word	0x20001fa0
 8017df8:	e000ed04 	.word	0xe000ed04

08017dfc <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8017dfc:	b580      	push	{r7, lr}
 8017dfe:	b08a      	sub	sp, #40	; 0x28
 8017e00:	af00      	add	r7, sp, #0
 8017e02:	6078      	str	r0, [r7, #4]
 8017e04:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8017e06:	2300      	movs	r3, #0
 8017e08:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8017e0a:	687b      	ldr	r3, [r7, #4]
 8017e0c:	2b00      	cmp	r3, #0
 8017e0e:	d10a      	bne.n	8017e26 <vTaskDelayUntil+0x2a>
	__asm volatile
 8017e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e14:	f383 8811 	msr	BASEPRI, r3
 8017e18:	f3bf 8f6f 	isb	sy
 8017e1c:	f3bf 8f4f 	dsb	sy
 8017e20:	617b      	str	r3, [r7, #20]
}
 8017e22:	bf00      	nop
 8017e24:	e7fe      	b.n	8017e24 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8017e26:	683b      	ldr	r3, [r7, #0]
 8017e28:	2b00      	cmp	r3, #0
 8017e2a:	d10a      	bne.n	8017e42 <vTaskDelayUntil+0x46>
	__asm volatile
 8017e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e30:	f383 8811 	msr	BASEPRI, r3
 8017e34:	f3bf 8f6f 	isb	sy
 8017e38:	f3bf 8f4f 	dsb	sy
 8017e3c:	613b      	str	r3, [r7, #16]
}
 8017e3e:	bf00      	nop
 8017e40:	e7fe      	b.n	8017e40 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8017e42:	4b2b      	ldr	r3, [pc, #172]	; (8017ef0 <vTaskDelayUntil+0xf4>)
 8017e44:	681b      	ldr	r3, [r3, #0]
 8017e46:	2b00      	cmp	r3, #0
 8017e48:	d00a      	beq.n	8017e60 <vTaskDelayUntil+0x64>
	__asm volatile
 8017e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e4e:	f383 8811 	msr	BASEPRI, r3
 8017e52:	f3bf 8f6f 	isb	sy
 8017e56:	f3bf 8f4f 	dsb	sy
 8017e5a:	60fb      	str	r3, [r7, #12]
}
 8017e5c:	bf00      	nop
 8017e5e:	e7fe      	b.n	8017e5e <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8017e60:	f000 f906 	bl	8018070 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8017e64:	4b23      	ldr	r3, [pc, #140]	; (8017ef4 <vTaskDelayUntil+0xf8>)
 8017e66:	681b      	ldr	r3, [r3, #0]
 8017e68:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8017e6a:	687b      	ldr	r3, [r7, #4]
 8017e6c:	681b      	ldr	r3, [r3, #0]
 8017e6e:	683a      	ldr	r2, [r7, #0]
 8017e70:	4413      	add	r3, r2
 8017e72:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8017e74:	687b      	ldr	r3, [r7, #4]
 8017e76:	681b      	ldr	r3, [r3, #0]
 8017e78:	6a3a      	ldr	r2, [r7, #32]
 8017e7a:	429a      	cmp	r2, r3
 8017e7c:	d20b      	bcs.n	8017e96 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8017e7e:	687b      	ldr	r3, [r7, #4]
 8017e80:	681b      	ldr	r3, [r3, #0]
 8017e82:	69fa      	ldr	r2, [r7, #28]
 8017e84:	429a      	cmp	r2, r3
 8017e86:	d211      	bcs.n	8017eac <vTaskDelayUntil+0xb0>
 8017e88:	69fa      	ldr	r2, [r7, #28]
 8017e8a:	6a3b      	ldr	r3, [r7, #32]
 8017e8c:	429a      	cmp	r2, r3
 8017e8e:	d90d      	bls.n	8017eac <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8017e90:	2301      	movs	r3, #1
 8017e92:	627b      	str	r3, [r7, #36]	; 0x24
 8017e94:	e00a      	b.n	8017eac <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8017e96:	687b      	ldr	r3, [r7, #4]
 8017e98:	681b      	ldr	r3, [r3, #0]
 8017e9a:	69fa      	ldr	r2, [r7, #28]
 8017e9c:	429a      	cmp	r2, r3
 8017e9e:	d303      	bcc.n	8017ea8 <vTaskDelayUntil+0xac>
 8017ea0:	69fa      	ldr	r2, [r7, #28]
 8017ea2:	6a3b      	ldr	r3, [r7, #32]
 8017ea4:	429a      	cmp	r2, r3
 8017ea6:	d901      	bls.n	8017eac <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8017ea8:	2301      	movs	r3, #1
 8017eaa:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8017eac:	687b      	ldr	r3, [r7, #4]
 8017eae:	69fa      	ldr	r2, [r7, #28]
 8017eb0:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8017eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017eb4:	2b00      	cmp	r3, #0
 8017eb6:	d009      	beq.n	8017ecc <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );
 8017eb8:	2024      	movs	r0, #36	; 0x24
 8017eba:	f002 f9c9 	bl	801a250 <SEGGER_SYSVIEW_RecordVoid>

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8017ebe:	69fa      	ldr	r2, [r7, #28]
 8017ec0:	6a3b      	ldr	r3, [r7, #32]
 8017ec2:	1ad3      	subs	r3, r2, r3
 8017ec4:	2100      	movs	r1, #0
 8017ec6:	4618      	mov	r0, r3
 8017ec8:	f000 fdbe 	bl	8018a48 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8017ecc:	f000 f8de 	bl	801808c <xTaskResumeAll>
 8017ed0:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8017ed2:	69bb      	ldr	r3, [r7, #24]
 8017ed4:	2b00      	cmp	r3, #0
 8017ed6:	d107      	bne.n	8017ee8 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 8017ed8:	4b07      	ldr	r3, [pc, #28]	; (8017ef8 <vTaskDelayUntil+0xfc>)
 8017eda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017ede:	601a      	str	r2, [r3, #0]
 8017ee0:	f3bf 8f4f 	dsb	sy
 8017ee4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8017ee8:	bf00      	nop
 8017eea:	3728      	adds	r7, #40	; 0x28
 8017eec:	46bd      	mov	sp, r7
 8017eee:	bd80      	pop	{r7, pc}
 8017ef0:	20002498 	.word	0x20002498
 8017ef4:	20002474 	.word	0x20002474
 8017ef8:	e000ed04 	.word	0xe000ed04

08017efc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8017efc:	b580      	push	{r7, lr}
 8017efe:	b084      	sub	sp, #16
 8017f00:	af00      	add	r7, sp, #0
 8017f02:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8017f04:	2300      	movs	r3, #0
 8017f06:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8017f08:	687b      	ldr	r3, [r7, #4]
 8017f0a:	2b00      	cmp	r3, #0
 8017f0c:	d01b      	beq.n	8017f46 <vTaskDelay+0x4a>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8017f0e:	4b15      	ldr	r3, [pc, #84]	; (8017f64 <vTaskDelay+0x68>)
 8017f10:	681b      	ldr	r3, [r3, #0]
 8017f12:	2b00      	cmp	r3, #0
 8017f14:	d00a      	beq.n	8017f2c <vTaskDelay+0x30>
	__asm volatile
 8017f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017f1a:	f383 8811 	msr	BASEPRI, r3
 8017f1e:	f3bf 8f6f 	isb	sy
 8017f22:	f3bf 8f4f 	dsb	sy
 8017f26:	60bb      	str	r3, [r7, #8]
}
 8017f28:	bf00      	nop
 8017f2a:	e7fe      	b.n	8017f2a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8017f2c:	f000 f8a0 	bl	8018070 <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 8017f30:	6879      	ldr	r1, [r7, #4]
 8017f32:	2023      	movs	r0, #35	; 0x23
 8017f34:	f002 f9aa 	bl	801a28c <SEGGER_SYSVIEW_RecordU32>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8017f38:	2100      	movs	r1, #0
 8017f3a:	6878      	ldr	r0, [r7, #4]
 8017f3c:	f000 fd84 	bl	8018a48 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8017f40:	f000 f8a4 	bl	801808c <xTaskResumeAll>
 8017f44:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8017f46:	68fb      	ldr	r3, [r7, #12]
 8017f48:	2b00      	cmp	r3, #0
 8017f4a:	d107      	bne.n	8017f5c <vTaskDelay+0x60>
		{
			portYIELD_WITHIN_API();
 8017f4c:	4b06      	ldr	r3, [pc, #24]	; (8017f68 <vTaskDelay+0x6c>)
 8017f4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017f52:	601a      	str	r2, [r3, #0]
 8017f54:	f3bf 8f4f 	dsb	sy
 8017f58:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8017f5c:	bf00      	nop
 8017f5e:	3710      	adds	r7, #16
 8017f60:	46bd      	mov	sp, r7
 8017f62:	bd80      	pop	{r7, pc}
 8017f64:	20002498 	.word	0x20002498
 8017f68:	e000ed04 	.word	0xe000ed04

08017f6c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8017f6c:	b580      	push	{r7, lr}
 8017f6e:	b08a      	sub	sp, #40	; 0x28
 8017f70:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8017f72:	2300      	movs	r3, #0
 8017f74:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8017f76:	2300      	movs	r3, #0
 8017f78:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8017f7a:	463a      	mov	r2, r7
 8017f7c:	1d39      	adds	r1, r7, #4
 8017f7e:	f107 0308 	add.w	r3, r7, #8
 8017f82:	4618      	mov	r0, r3
 8017f84:	f7fe fde8 	bl	8016b58 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8017f88:	6839      	ldr	r1, [r7, #0]
 8017f8a:	687b      	ldr	r3, [r7, #4]
 8017f8c:	68ba      	ldr	r2, [r7, #8]
 8017f8e:	9202      	str	r2, [sp, #8]
 8017f90:	9301      	str	r3, [sp, #4]
 8017f92:	2300      	movs	r3, #0
 8017f94:	9300      	str	r3, [sp, #0]
 8017f96:	2300      	movs	r3, #0
 8017f98:	460a      	mov	r2, r1
 8017f9a:	492d      	ldr	r1, [pc, #180]	; (8018050 <vTaskStartScheduler+0xe4>)
 8017f9c:	482d      	ldr	r0, [pc, #180]	; (8018054 <vTaskStartScheduler+0xe8>)
 8017f9e:	f7ff fd57 	bl	8017a50 <xTaskCreateStatic>
 8017fa2:	4603      	mov	r3, r0
 8017fa4:	4a2c      	ldr	r2, [pc, #176]	; (8018058 <vTaskStartScheduler+0xec>)
 8017fa6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8017fa8:	4b2b      	ldr	r3, [pc, #172]	; (8018058 <vTaskStartScheduler+0xec>)
 8017faa:	681b      	ldr	r3, [r3, #0]
 8017fac:	2b00      	cmp	r3, #0
 8017fae:	d002      	beq.n	8017fb6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8017fb0:	2301      	movs	r3, #1
 8017fb2:	617b      	str	r3, [r7, #20]
 8017fb4:	e001      	b.n	8017fba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8017fb6:	2300      	movs	r3, #0
 8017fb8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8017fba:	697b      	ldr	r3, [r7, #20]
 8017fbc:	2b01      	cmp	r3, #1
 8017fbe:	d102      	bne.n	8017fc6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8017fc0:	f000 fd96 	bl	8018af0 <xTimerCreateTimerTask>
 8017fc4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8017fc6:	697b      	ldr	r3, [r7, #20]
 8017fc8:	2b01      	cmp	r3, #1
 8017fca:	d12e      	bne.n	801802a <vTaskStartScheduler+0xbe>
	__asm volatile
 8017fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017fd0:	f383 8811 	msr	BASEPRI, r3
 8017fd4:	f3bf 8f6f 	isb	sy
 8017fd8:	f3bf 8f4f 	dsb	sy
 8017fdc:	613b      	str	r3, [r7, #16]
}
 8017fde:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8017fe0:	4b1e      	ldr	r3, [pc, #120]	; (801805c <vTaskStartScheduler+0xf0>)
 8017fe2:	681b      	ldr	r3, [r3, #0]
 8017fe4:	3364      	adds	r3, #100	; 0x64
 8017fe6:	4a1e      	ldr	r2, [pc, #120]	; (8018060 <vTaskStartScheduler+0xf4>)
 8017fe8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8017fea:	4b1e      	ldr	r3, [pc, #120]	; (8018064 <vTaskStartScheduler+0xf8>)
 8017fec:	f04f 32ff 	mov.w	r2, #4294967295
 8017ff0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8017ff2:	4b1d      	ldr	r3, [pc, #116]	; (8018068 <vTaskStartScheduler+0xfc>)
 8017ff4:	2201      	movs	r2, #1
 8017ff6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8017ff8:	4b1c      	ldr	r3, [pc, #112]	; (801806c <vTaskStartScheduler+0x100>)
 8017ffa:	2200      	movs	r2, #0
 8017ffc:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 8017ffe:	4b17      	ldr	r3, [pc, #92]	; (801805c <vTaskStartScheduler+0xf0>)
 8018000:	681b      	ldr	r3, [r3, #0]
 8018002:	3334      	adds	r3, #52	; 0x34
 8018004:	2205      	movs	r2, #5
 8018006:	4912      	ldr	r1, [pc, #72]	; (8018050 <vTaskStartScheduler+0xe4>)
 8018008:	4618      	mov	r0, r3
 801800a:	f003 f819 	bl	801b040 <memcmp>
 801800e:	4603      	mov	r3, r0
 8018010:	2b00      	cmp	r3, #0
 8018012:	d005      	beq.n	8018020 <vTaskStartScheduler+0xb4>
 8018014:	4b11      	ldr	r3, [pc, #68]	; (801805c <vTaskStartScheduler+0xf0>)
 8018016:	681b      	ldr	r3, [r3, #0]
 8018018:	4618      	mov	r0, r3
 801801a:	f002 fdfb 	bl	801ac14 <SEGGER_SYSVIEW_OnTaskStartExec>
 801801e:	e001      	b.n	8018024 <vTaskStartScheduler+0xb8>
 8018020:	f002 fd9a 	bl	801ab58 <SEGGER_SYSVIEW_OnIdle>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8018024:	f001 f93c 	bl	80192a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8018028:	e00e      	b.n	8018048 <vTaskStartScheduler+0xdc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801802a:	697b      	ldr	r3, [r7, #20]
 801802c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018030:	d10a      	bne.n	8018048 <vTaskStartScheduler+0xdc>
	__asm volatile
 8018032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018036:	f383 8811 	msr	BASEPRI, r3
 801803a:	f3bf 8f6f 	isb	sy
 801803e:	f3bf 8f4f 	dsb	sy
 8018042:	60fb      	str	r3, [r7, #12]
}
 8018044:	bf00      	nop
 8018046:	e7fe      	b.n	8018046 <vTaskStartScheduler+0xda>
}
 8018048:	bf00      	nop
 801804a:	3718      	adds	r7, #24
 801804c:	46bd      	mov	sp, r7
 801804e:	bd80      	pop	{r7, pc}
 8018050:	0801bd84 	.word	0x0801bd84
 8018054:	080186fd 	.word	0x080186fd
 8018058:	20002494 	.word	0x20002494
 801805c:	20001f9c 	.word	0x20001f9c
 8018060:	20001444 	.word	0x20001444
 8018064:	20002490 	.word	0x20002490
 8018068:	2000247c 	.word	0x2000247c
 801806c:	20002474 	.word	0x20002474

08018070 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8018070:	b480      	push	{r7}
 8018072:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8018074:	4b04      	ldr	r3, [pc, #16]	; (8018088 <vTaskSuspendAll+0x18>)
 8018076:	681b      	ldr	r3, [r3, #0]
 8018078:	3301      	adds	r3, #1
 801807a:	4a03      	ldr	r2, [pc, #12]	; (8018088 <vTaskSuspendAll+0x18>)
 801807c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801807e:	bf00      	nop
 8018080:	46bd      	mov	sp, r7
 8018082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018086:	4770      	bx	lr
 8018088:	20002498 	.word	0x20002498

0801808c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801808c:	b580      	push	{r7, lr}
 801808e:	b084      	sub	sp, #16
 8018090:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8018092:	2300      	movs	r3, #0
 8018094:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8018096:	2300      	movs	r3, #0
 8018098:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801809a:	4b44      	ldr	r3, [pc, #272]	; (80181ac <xTaskResumeAll+0x120>)
 801809c:	681b      	ldr	r3, [r3, #0]
 801809e:	2b00      	cmp	r3, #0
 80180a0:	d10a      	bne.n	80180b8 <xTaskResumeAll+0x2c>
	__asm volatile
 80180a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80180a6:	f383 8811 	msr	BASEPRI, r3
 80180aa:	f3bf 8f6f 	isb	sy
 80180ae:	f3bf 8f4f 	dsb	sy
 80180b2:	603b      	str	r3, [r7, #0]
}
 80180b4:	bf00      	nop
 80180b6:	e7fe      	b.n	80180b6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80180b8:	f001 f994 	bl	80193e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80180bc:	4b3b      	ldr	r3, [pc, #236]	; (80181ac <xTaskResumeAll+0x120>)
 80180be:	681b      	ldr	r3, [r3, #0]
 80180c0:	3b01      	subs	r3, #1
 80180c2:	4a3a      	ldr	r2, [pc, #232]	; (80181ac <xTaskResumeAll+0x120>)
 80180c4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80180c6:	4b39      	ldr	r3, [pc, #228]	; (80181ac <xTaskResumeAll+0x120>)
 80180c8:	681b      	ldr	r3, [r3, #0]
 80180ca:	2b00      	cmp	r3, #0
 80180cc:	d166      	bne.n	801819c <xTaskResumeAll+0x110>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80180ce:	4b38      	ldr	r3, [pc, #224]	; (80181b0 <xTaskResumeAll+0x124>)
 80180d0:	681b      	ldr	r3, [r3, #0]
 80180d2:	2b00      	cmp	r3, #0
 80180d4:	d062      	beq.n	801819c <xTaskResumeAll+0x110>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80180d6:	e033      	b.n	8018140 <xTaskResumeAll+0xb4>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80180d8:	4b36      	ldr	r3, [pc, #216]	; (80181b4 <xTaskResumeAll+0x128>)
 80180da:	68db      	ldr	r3, [r3, #12]
 80180dc:	68db      	ldr	r3, [r3, #12]
 80180de:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80180e0:	68fb      	ldr	r3, [r7, #12]
 80180e2:	3318      	adds	r3, #24
 80180e4:	4618      	mov	r0, r3
 80180e6:	f7fe fdf5 	bl	8016cd4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80180ea:	68fb      	ldr	r3, [r7, #12]
 80180ec:	3304      	adds	r3, #4
 80180ee:	4618      	mov	r0, r3
 80180f0:	f7fe fdf0 	bl	8016cd4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80180f4:	68fb      	ldr	r3, [r7, #12]
 80180f6:	4618      	mov	r0, r3
 80180f8:	f002 fdce 	bl	801ac98 <SEGGER_SYSVIEW_OnTaskStartReady>
 80180fc:	68fb      	ldr	r3, [r7, #12]
 80180fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018100:	4b2d      	ldr	r3, [pc, #180]	; (80181b8 <xTaskResumeAll+0x12c>)
 8018102:	681b      	ldr	r3, [r3, #0]
 8018104:	429a      	cmp	r2, r3
 8018106:	d903      	bls.n	8018110 <xTaskResumeAll+0x84>
 8018108:	68fb      	ldr	r3, [r7, #12]
 801810a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801810c:	4a2a      	ldr	r2, [pc, #168]	; (80181b8 <xTaskResumeAll+0x12c>)
 801810e:	6013      	str	r3, [r2, #0]
 8018110:	68fb      	ldr	r3, [r7, #12]
 8018112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018114:	4613      	mov	r3, r2
 8018116:	009b      	lsls	r3, r3, #2
 8018118:	4413      	add	r3, r2
 801811a:	009b      	lsls	r3, r3, #2
 801811c:	4a27      	ldr	r2, [pc, #156]	; (80181bc <xTaskResumeAll+0x130>)
 801811e:	441a      	add	r2, r3
 8018120:	68fb      	ldr	r3, [r7, #12]
 8018122:	3304      	adds	r3, #4
 8018124:	4619      	mov	r1, r3
 8018126:	4610      	mov	r0, r2
 8018128:	f7fe fd77 	bl	8016c1a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801812c:	68fb      	ldr	r3, [r7, #12]
 801812e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018130:	4b23      	ldr	r3, [pc, #140]	; (80181c0 <xTaskResumeAll+0x134>)
 8018132:	681b      	ldr	r3, [r3, #0]
 8018134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018136:	429a      	cmp	r2, r3
 8018138:	d302      	bcc.n	8018140 <xTaskResumeAll+0xb4>
					{
						xYieldPending = pdTRUE;
 801813a:	4b22      	ldr	r3, [pc, #136]	; (80181c4 <xTaskResumeAll+0x138>)
 801813c:	2201      	movs	r2, #1
 801813e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8018140:	4b1c      	ldr	r3, [pc, #112]	; (80181b4 <xTaskResumeAll+0x128>)
 8018142:	681b      	ldr	r3, [r3, #0]
 8018144:	2b00      	cmp	r3, #0
 8018146:	d1c7      	bne.n	80180d8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8018148:	68fb      	ldr	r3, [r7, #12]
 801814a:	2b00      	cmp	r3, #0
 801814c:	d001      	beq.n	8018152 <xTaskResumeAll+0xc6>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801814e:	f000 fbc7 	bl	80188e0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8018152:	4b1d      	ldr	r3, [pc, #116]	; (80181c8 <xTaskResumeAll+0x13c>)
 8018154:	681b      	ldr	r3, [r3, #0]
 8018156:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8018158:	687b      	ldr	r3, [r7, #4]
 801815a:	2b00      	cmp	r3, #0
 801815c:	d010      	beq.n	8018180 <xTaskResumeAll+0xf4>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801815e:	f000 f859 	bl	8018214 <xTaskIncrementTick>
 8018162:	4603      	mov	r3, r0
 8018164:	2b00      	cmp	r3, #0
 8018166:	d002      	beq.n	801816e <xTaskResumeAll+0xe2>
							{
								xYieldPending = pdTRUE;
 8018168:	4b16      	ldr	r3, [pc, #88]	; (80181c4 <xTaskResumeAll+0x138>)
 801816a:	2201      	movs	r2, #1
 801816c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801816e:	687b      	ldr	r3, [r7, #4]
 8018170:	3b01      	subs	r3, #1
 8018172:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8018174:	687b      	ldr	r3, [r7, #4]
 8018176:	2b00      	cmp	r3, #0
 8018178:	d1f1      	bne.n	801815e <xTaskResumeAll+0xd2>

						xPendedTicks = 0;
 801817a:	4b13      	ldr	r3, [pc, #76]	; (80181c8 <xTaskResumeAll+0x13c>)
 801817c:	2200      	movs	r2, #0
 801817e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8018180:	4b10      	ldr	r3, [pc, #64]	; (80181c4 <xTaskResumeAll+0x138>)
 8018182:	681b      	ldr	r3, [r3, #0]
 8018184:	2b00      	cmp	r3, #0
 8018186:	d009      	beq.n	801819c <xTaskResumeAll+0x110>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8018188:	2301      	movs	r3, #1
 801818a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801818c:	4b0f      	ldr	r3, [pc, #60]	; (80181cc <xTaskResumeAll+0x140>)
 801818e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018192:	601a      	str	r2, [r3, #0]
 8018194:	f3bf 8f4f 	dsb	sy
 8018198:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801819c:	f001 f952 	bl	8019444 <vPortExitCritical>

	return xAlreadyYielded;
 80181a0:	68bb      	ldr	r3, [r7, #8]
}
 80181a2:	4618      	mov	r0, r3
 80181a4:	3710      	adds	r7, #16
 80181a6:	46bd      	mov	sp, r7
 80181a8:	bd80      	pop	{r7, pc}
 80181aa:	bf00      	nop
 80181ac:	20002498 	.word	0x20002498
 80181b0:	20002470 	.word	0x20002470
 80181b4:	20002430 	.word	0x20002430
 80181b8:	20002478 	.word	0x20002478
 80181bc:	20001fa0 	.word	0x20001fa0
 80181c0:	20001f9c 	.word	0x20001f9c
 80181c4:	20002484 	.word	0x20002484
 80181c8:	20002480 	.word	0x20002480
 80181cc:	e000ed04 	.word	0xe000ed04

080181d0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80181d0:	b480      	push	{r7}
 80181d2:	b083      	sub	sp, #12
 80181d4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80181d6:	4b05      	ldr	r3, [pc, #20]	; (80181ec <xTaskGetTickCount+0x1c>)
 80181d8:	681b      	ldr	r3, [r3, #0]
 80181da:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80181dc:	687b      	ldr	r3, [r7, #4]
}
 80181de:	4618      	mov	r0, r3
 80181e0:	370c      	adds	r7, #12
 80181e2:	46bd      	mov	sp, r7
 80181e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181e8:	4770      	bx	lr
 80181ea:	bf00      	nop
 80181ec:	20002474 	.word	0x20002474

080181f0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80181f0:	b580      	push	{r7, lr}
 80181f2:	b082      	sub	sp, #8
 80181f4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80181f6:	f001 f9d7 	bl	80195a8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80181fa:	2300      	movs	r3, #0
 80181fc:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80181fe:	4b04      	ldr	r3, [pc, #16]	; (8018210 <xTaskGetTickCountFromISR+0x20>)
 8018200:	681b      	ldr	r3, [r3, #0]
 8018202:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8018204:	683b      	ldr	r3, [r7, #0]
}
 8018206:	4618      	mov	r0, r3
 8018208:	3708      	adds	r7, #8
 801820a:	46bd      	mov	sp, r7
 801820c:	bd80      	pop	{r7, pc}
 801820e:	bf00      	nop
 8018210:	20002474 	.word	0x20002474

08018214 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8018214:	b580      	push	{r7, lr}
 8018216:	b086      	sub	sp, #24
 8018218:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801821a:	2300      	movs	r3, #0
 801821c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801821e:	4b51      	ldr	r3, [pc, #324]	; (8018364 <xTaskIncrementTick+0x150>)
 8018220:	681b      	ldr	r3, [r3, #0]
 8018222:	2b00      	cmp	r3, #0
 8018224:	f040 8093 	bne.w	801834e <xTaskIncrementTick+0x13a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8018228:	4b4f      	ldr	r3, [pc, #316]	; (8018368 <xTaskIncrementTick+0x154>)
 801822a:	681b      	ldr	r3, [r3, #0]
 801822c:	3301      	adds	r3, #1
 801822e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8018230:	4a4d      	ldr	r2, [pc, #308]	; (8018368 <xTaskIncrementTick+0x154>)
 8018232:	693b      	ldr	r3, [r7, #16]
 8018234:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8018236:	693b      	ldr	r3, [r7, #16]
 8018238:	2b00      	cmp	r3, #0
 801823a:	d120      	bne.n	801827e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 801823c:	4b4b      	ldr	r3, [pc, #300]	; (801836c <xTaskIncrementTick+0x158>)
 801823e:	681b      	ldr	r3, [r3, #0]
 8018240:	681b      	ldr	r3, [r3, #0]
 8018242:	2b00      	cmp	r3, #0
 8018244:	d00a      	beq.n	801825c <xTaskIncrementTick+0x48>
	__asm volatile
 8018246:	f04f 0350 	mov.w	r3, #80	; 0x50
 801824a:	f383 8811 	msr	BASEPRI, r3
 801824e:	f3bf 8f6f 	isb	sy
 8018252:	f3bf 8f4f 	dsb	sy
 8018256:	603b      	str	r3, [r7, #0]
}
 8018258:	bf00      	nop
 801825a:	e7fe      	b.n	801825a <xTaskIncrementTick+0x46>
 801825c:	4b43      	ldr	r3, [pc, #268]	; (801836c <xTaskIncrementTick+0x158>)
 801825e:	681b      	ldr	r3, [r3, #0]
 8018260:	60fb      	str	r3, [r7, #12]
 8018262:	4b43      	ldr	r3, [pc, #268]	; (8018370 <xTaskIncrementTick+0x15c>)
 8018264:	681b      	ldr	r3, [r3, #0]
 8018266:	4a41      	ldr	r2, [pc, #260]	; (801836c <xTaskIncrementTick+0x158>)
 8018268:	6013      	str	r3, [r2, #0]
 801826a:	4a41      	ldr	r2, [pc, #260]	; (8018370 <xTaskIncrementTick+0x15c>)
 801826c:	68fb      	ldr	r3, [r7, #12]
 801826e:	6013      	str	r3, [r2, #0]
 8018270:	4b40      	ldr	r3, [pc, #256]	; (8018374 <xTaskIncrementTick+0x160>)
 8018272:	681b      	ldr	r3, [r3, #0]
 8018274:	3301      	adds	r3, #1
 8018276:	4a3f      	ldr	r2, [pc, #252]	; (8018374 <xTaskIncrementTick+0x160>)
 8018278:	6013      	str	r3, [r2, #0]
 801827a:	f000 fb31 	bl	80188e0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801827e:	4b3e      	ldr	r3, [pc, #248]	; (8018378 <xTaskIncrementTick+0x164>)
 8018280:	681b      	ldr	r3, [r3, #0]
 8018282:	693a      	ldr	r2, [r7, #16]
 8018284:	429a      	cmp	r2, r3
 8018286:	d34d      	bcc.n	8018324 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8018288:	4b38      	ldr	r3, [pc, #224]	; (801836c <xTaskIncrementTick+0x158>)
 801828a:	681b      	ldr	r3, [r3, #0]
 801828c:	681b      	ldr	r3, [r3, #0]
 801828e:	2b00      	cmp	r3, #0
 8018290:	d104      	bne.n	801829c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018292:	4b39      	ldr	r3, [pc, #228]	; (8018378 <xTaskIncrementTick+0x164>)
 8018294:	f04f 32ff 	mov.w	r2, #4294967295
 8018298:	601a      	str	r2, [r3, #0]
					break;
 801829a:	e043      	b.n	8018324 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801829c:	4b33      	ldr	r3, [pc, #204]	; (801836c <xTaskIncrementTick+0x158>)
 801829e:	681b      	ldr	r3, [r3, #0]
 80182a0:	68db      	ldr	r3, [r3, #12]
 80182a2:	68db      	ldr	r3, [r3, #12]
 80182a4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80182a6:	68bb      	ldr	r3, [r7, #8]
 80182a8:	685b      	ldr	r3, [r3, #4]
 80182aa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80182ac:	693a      	ldr	r2, [r7, #16]
 80182ae:	687b      	ldr	r3, [r7, #4]
 80182b0:	429a      	cmp	r2, r3
 80182b2:	d203      	bcs.n	80182bc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80182b4:	4a30      	ldr	r2, [pc, #192]	; (8018378 <xTaskIncrementTick+0x164>)
 80182b6:	687b      	ldr	r3, [r7, #4]
 80182b8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80182ba:	e033      	b.n	8018324 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80182bc:	68bb      	ldr	r3, [r7, #8]
 80182be:	3304      	adds	r3, #4
 80182c0:	4618      	mov	r0, r3
 80182c2:	f7fe fd07 	bl	8016cd4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80182c6:	68bb      	ldr	r3, [r7, #8]
 80182c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80182ca:	2b00      	cmp	r3, #0
 80182cc:	d004      	beq.n	80182d8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80182ce:	68bb      	ldr	r3, [r7, #8]
 80182d0:	3318      	adds	r3, #24
 80182d2:	4618      	mov	r0, r3
 80182d4:	f7fe fcfe 	bl	8016cd4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80182d8:	68bb      	ldr	r3, [r7, #8]
 80182da:	4618      	mov	r0, r3
 80182dc:	f002 fcdc 	bl	801ac98 <SEGGER_SYSVIEW_OnTaskStartReady>
 80182e0:	68bb      	ldr	r3, [r7, #8]
 80182e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80182e4:	4b25      	ldr	r3, [pc, #148]	; (801837c <xTaskIncrementTick+0x168>)
 80182e6:	681b      	ldr	r3, [r3, #0]
 80182e8:	429a      	cmp	r2, r3
 80182ea:	d903      	bls.n	80182f4 <xTaskIncrementTick+0xe0>
 80182ec:	68bb      	ldr	r3, [r7, #8]
 80182ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80182f0:	4a22      	ldr	r2, [pc, #136]	; (801837c <xTaskIncrementTick+0x168>)
 80182f2:	6013      	str	r3, [r2, #0]
 80182f4:	68bb      	ldr	r3, [r7, #8]
 80182f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80182f8:	4613      	mov	r3, r2
 80182fa:	009b      	lsls	r3, r3, #2
 80182fc:	4413      	add	r3, r2
 80182fe:	009b      	lsls	r3, r3, #2
 8018300:	4a1f      	ldr	r2, [pc, #124]	; (8018380 <xTaskIncrementTick+0x16c>)
 8018302:	441a      	add	r2, r3
 8018304:	68bb      	ldr	r3, [r7, #8]
 8018306:	3304      	adds	r3, #4
 8018308:	4619      	mov	r1, r3
 801830a:	4610      	mov	r0, r2
 801830c:	f7fe fc85 	bl	8016c1a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8018310:	68bb      	ldr	r3, [r7, #8]
 8018312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018314:	4b1b      	ldr	r3, [pc, #108]	; (8018384 <xTaskIncrementTick+0x170>)
 8018316:	681b      	ldr	r3, [r3, #0]
 8018318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801831a:	429a      	cmp	r2, r3
 801831c:	d3b4      	bcc.n	8018288 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 801831e:	2301      	movs	r3, #1
 8018320:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8018322:	e7b1      	b.n	8018288 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8018324:	4b17      	ldr	r3, [pc, #92]	; (8018384 <xTaskIncrementTick+0x170>)
 8018326:	681b      	ldr	r3, [r3, #0]
 8018328:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801832a:	4915      	ldr	r1, [pc, #84]	; (8018380 <xTaskIncrementTick+0x16c>)
 801832c:	4613      	mov	r3, r2
 801832e:	009b      	lsls	r3, r3, #2
 8018330:	4413      	add	r3, r2
 8018332:	009b      	lsls	r3, r3, #2
 8018334:	440b      	add	r3, r1
 8018336:	681b      	ldr	r3, [r3, #0]
 8018338:	2b01      	cmp	r3, #1
 801833a:	d901      	bls.n	8018340 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 801833c:	2301      	movs	r3, #1
 801833e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8018340:	4b11      	ldr	r3, [pc, #68]	; (8018388 <xTaskIncrementTick+0x174>)
 8018342:	681b      	ldr	r3, [r3, #0]
 8018344:	2b00      	cmp	r3, #0
 8018346:	d007      	beq.n	8018358 <xTaskIncrementTick+0x144>
			{
				xSwitchRequired = pdTRUE;
 8018348:	2301      	movs	r3, #1
 801834a:	617b      	str	r3, [r7, #20]
 801834c:	e004      	b.n	8018358 <xTaskIncrementTick+0x144>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801834e:	4b0f      	ldr	r3, [pc, #60]	; (801838c <xTaskIncrementTick+0x178>)
 8018350:	681b      	ldr	r3, [r3, #0]
 8018352:	3301      	adds	r3, #1
 8018354:	4a0d      	ldr	r2, [pc, #52]	; (801838c <xTaskIncrementTick+0x178>)
 8018356:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8018358:	697b      	ldr	r3, [r7, #20]
}
 801835a:	4618      	mov	r0, r3
 801835c:	3718      	adds	r7, #24
 801835e:	46bd      	mov	sp, r7
 8018360:	bd80      	pop	{r7, pc}
 8018362:	bf00      	nop
 8018364:	20002498 	.word	0x20002498
 8018368:	20002474 	.word	0x20002474
 801836c:	20002428 	.word	0x20002428
 8018370:	2000242c 	.word	0x2000242c
 8018374:	20002488 	.word	0x20002488
 8018378:	20002490 	.word	0x20002490
 801837c:	20002478 	.word	0x20002478
 8018380:	20001fa0 	.word	0x20001fa0
 8018384:	20001f9c 	.word	0x20001f9c
 8018388:	20002484 	.word	0x20002484
 801838c:	20002480 	.word	0x20002480

08018390 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8018390:	b580      	push	{r7, lr}
 8018392:	b084      	sub	sp, #16
 8018394:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8018396:	4b33      	ldr	r3, [pc, #204]	; (8018464 <vTaskSwitchContext+0xd4>)
 8018398:	681b      	ldr	r3, [r3, #0]
 801839a:	2b00      	cmp	r3, #0
 801839c:	d003      	beq.n	80183a6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801839e:	4b32      	ldr	r3, [pc, #200]	; (8018468 <vTaskSwitchContext+0xd8>)
 80183a0:	2201      	movs	r2, #1
 80183a2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80183a4:	e059      	b.n	801845a <vTaskSwitchContext+0xca>
		xYieldPending = pdFALSE;
 80183a6:	4b30      	ldr	r3, [pc, #192]	; (8018468 <vTaskSwitchContext+0xd8>)
 80183a8:	2200      	movs	r2, #0
 80183aa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80183ac:	4b2f      	ldr	r3, [pc, #188]	; (801846c <vTaskSwitchContext+0xdc>)
 80183ae:	681b      	ldr	r3, [r3, #0]
 80183b0:	60fb      	str	r3, [r7, #12]
 80183b2:	e010      	b.n	80183d6 <vTaskSwitchContext+0x46>
 80183b4:	68fb      	ldr	r3, [r7, #12]
 80183b6:	2b00      	cmp	r3, #0
 80183b8:	d10a      	bne.n	80183d0 <vTaskSwitchContext+0x40>
	__asm volatile
 80183ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80183be:	f383 8811 	msr	BASEPRI, r3
 80183c2:	f3bf 8f6f 	isb	sy
 80183c6:	f3bf 8f4f 	dsb	sy
 80183ca:	607b      	str	r3, [r7, #4]
}
 80183cc:	bf00      	nop
 80183ce:	e7fe      	b.n	80183ce <vTaskSwitchContext+0x3e>
 80183d0:	68fb      	ldr	r3, [r7, #12]
 80183d2:	3b01      	subs	r3, #1
 80183d4:	60fb      	str	r3, [r7, #12]
 80183d6:	4926      	ldr	r1, [pc, #152]	; (8018470 <vTaskSwitchContext+0xe0>)
 80183d8:	68fa      	ldr	r2, [r7, #12]
 80183da:	4613      	mov	r3, r2
 80183dc:	009b      	lsls	r3, r3, #2
 80183de:	4413      	add	r3, r2
 80183e0:	009b      	lsls	r3, r3, #2
 80183e2:	440b      	add	r3, r1
 80183e4:	681b      	ldr	r3, [r3, #0]
 80183e6:	2b00      	cmp	r3, #0
 80183e8:	d0e4      	beq.n	80183b4 <vTaskSwitchContext+0x24>
 80183ea:	68fa      	ldr	r2, [r7, #12]
 80183ec:	4613      	mov	r3, r2
 80183ee:	009b      	lsls	r3, r3, #2
 80183f0:	4413      	add	r3, r2
 80183f2:	009b      	lsls	r3, r3, #2
 80183f4:	4a1e      	ldr	r2, [pc, #120]	; (8018470 <vTaskSwitchContext+0xe0>)
 80183f6:	4413      	add	r3, r2
 80183f8:	60bb      	str	r3, [r7, #8]
 80183fa:	68bb      	ldr	r3, [r7, #8]
 80183fc:	685b      	ldr	r3, [r3, #4]
 80183fe:	685a      	ldr	r2, [r3, #4]
 8018400:	68bb      	ldr	r3, [r7, #8]
 8018402:	605a      	str	r2, [r3, #4]
 8018404:	68bb      	ldr	r3, [r7, #8]
 8018406:	685a      	ldr	r2, [r3, #4]
 8018408:	68bb      	ldr	r3, [r7, #8]
 801840a:	3308      	adds	r3, #8
 801840c:	429a      	cmp	r2, r3
 801840e:	d104      	bne.n	801841a <vTaskSwitchContext+0x8a>
 8018410:	68bb      	ldr	r3, [r7, #8]
 8018412:	685b      	ldr	r3, [r3, #4]
 8018414:	685a      	ldr	r2, [r3, #4]
 8018416:	68bb      	ldr	r3, [r7, #8]
 8018418:	605a      	str	r2, [r3, #4]
 801841a:	68bb      	ldr	r3, [r7, #8]
 801841c:	685b      	ldr	r3, [r3, #4]
 801841e:	68db      	ldr	r3, [r3, #12]
 8018420:	4a14      	ldr	r2, [pc, #80]	; (8018474 <vTaskSwitchContext+0xe4>)
 8018422:	6013      	str	r3, [r2, #0]
 8018424:	4a11      	ldr	r2, [pc, #68]	; (801846c <vTaskSwitchContext+0xdc>)
 8018426:	68fb      	ldr	r3, [r7, #12]
 8018428:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 801842a:	4b12      	ldr	r3, [pc, #72]	; (8018474 <vTaskSwitchContext+0xe4>)
 801842c:	681b      	ldr	r3, [r3, #0]
 801842e:	3334      	adds	r3, #52	; 0x34
 8018430:	2205      	movs	r2, #5
 8018432:	4911      	ldr	r1, [pc, #68]	; (8018478 <vTaskSwitchContext+0xe8>)
 8018434:	4618      	mov	r0, r3
 8018436:	f002 fe03 	bl	801b040 <memcmp>
 801843a:	4603      	mov	r3, r0
 801843c:	2b00      	cmp	r3, #0
 801843e:	d005      	beq.n	801844c <vTaskSwitchContext+0xbc>
 8018440:	4b0c      	ldr	r3, [pc, #48]	; (8018474 <vTaskSwitchContext+0xe4>)
 8018442:	681b      	ldr	r3, [r3, #0]
 8018444:	4618      	mov	r0, r3
 8018446:	f002 fbe5 	bl	801ac14 <SEGGER_SYSVIEW_OnTaskStartExec>
 801844a:	e001      	b.n	8018450 <vTaskSwitchContext+0xc0>
 801844c:	f002 fb84 	bl	801ab58 <SEGGER_SYSVIEW_OnIdle>
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8018450:	4b08      	ldr	r3, [pc, #32]	; (8018474 <vTaskSwitchContext+0xe4>)
 8018452:	681b      	ldr	r3, [r3, #0]
 8018454:	3364      	adds	r3, #100	; 0x64
 8018456:	4a09      	ldr	r2, [pc, #36]	; (801847c <vTaskSwitchContext+0xec>)
 8018458:	6013      	str	r3, [r2, #0]
}
 801845a:	bf00      	nop
 801845c:	3710      	adds	r7, #16
 801845e:	46bd      	mov	sp, r7
 8018460:	bd80      	pop	{r7, pc}
 8018462:	bf00      	nop
 8018464:	20002498 	.word	0x20002498
 8018468:	20002484 	.word	0x20002484
 801846c:	20002478 	.word	0x20002478
 8018470:	20001fa0 	.word	0x20001fa0
 8018474:	20001f9c 	.word	0x20001f9c
 8018478:	0801bd84 	.word	0x0801bd84
 801847c:	20001444 	.word	0x20001444

08018480 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8018480:	b580      	push	{r7, lr}
 8018482:	b084      	sub	sp, #16
 8018484:	af00      	add	r7, sp, #0
 8018486:	6078      	str	r0, [r7, #4]
 8018488:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801848a:	687b      	ldr	r3, [r7, #4]
 801848c:	2b00      	cmp	r3, #0
 801848e:	d10a      	bne.n	80184a6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8018490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018494:	f383 8811 	msr	BASEPRI, r3
 8018498:	f3bf 8f6f 	isb	sy
 801849c:	f3bf 8f4f 	dsb	sy
 80184a0:	60fb      	str	r3, [r7, #12]
}
 80184a2:	bf00      	nop
 80184a4:	e7fe      	b.n	80184a4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80184a6:	4b07      	ldr	r3, [pc, #28]	; (80184c4 <vTaskPlaceOnEventList+0x44>)
 80184a8:	681b      	ldr	r3, [r3, #0]
 80184aa:	3318      	adds	r3, #24
 80184ac:	4619      	mov	r1, r3
 80184ae:	6878      	ldr	r0, [r7, #4]
 80184b0:	f7fe fbd7 	bl	8016c62 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80184b4:	2101      	movs	r1, #1
 80184b6:	6838      	ldr	r0, [r7, #0]
 80184b8:	f000 fac6 	bl	8018a48 <prvAddCurrentTaskToDelayedList>
}
 80184bc:	bf00      	nop
 80184be:	3710      	adds	r7, #16
 80184c0:	46bd      	mov	sp, r7
 80184c2:	bd80      	pop	{r7, pc}
 80184c4:	20001f9c 	.word	0x20001f9c

080184c8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80184c8:	b580      	push	{r7, lr}
 80184ca:	b086      	sub	sp, #24
 80184cc:	af00      	add	r7, sp, #0
 80184ce:	60f8      	str	r0, [r7, #12]
 80184d0:	60b9      	str	r1, [r7, #8]
 80184d2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80184d4:	68fb      	ldr	r3, [r7, #12]
 80184d6:	2b00      	cmp	r3, #0
 80184d8:	d10a      	bne.n	80184f0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80184da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80184de:	f383 8811 	msr	BASEPRI, r3
 80184e2:	f3bf 8f6f 	isb	sy
 80184e6:	f3bf 8f4f 	dsb	sy
 80184ea:	617b      	str	r3, [r7, #20]
}
 80184ec:	bf00      	nop
 80184ee:	e7fe      	b.n	80184ee <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80184f0:	4b0b      	ldr	r3, [pc, #44]	; (8018520 <vTaskPlaceOnEventListRestricted+0x58>)
 80184f2:	681b      	ldr	r3, [r3, #0]
 80184f4:	3318      	adds	r3, #24
 80184f6:	4619      	mov	r1, r3
 80184f8:	68f8      	ldr	r0, [r7, #12]
 80184fa:	f7fe fb8e 	bl	8016c1a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80184fe:	687b      	ldr	r3, [r7, #4]
 8018500:	2b00      	cmp	r3, #0
 8018502:	d002      	beq.n	801850a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8018504:	f04f 33ff 	mov.w	r3, #4294967295
 8018508:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 801850a:	2024      	movs	r0, #36	; 0x24
 801850c:	f001 fea0 	bl	801a250 <SEGGER_SYSVIEW_RecordVoid>
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8018510:	6879      	ldr	r1, [r7, #4]
 8018512:	68b8      	ldr	r0, [r7, #8]
 8018514:	f000 fa98 	bl	8018a48 <prvAddCurrentTaskToDelayedList>
	}
 8018518:	bf00      	nop
 801851a:	3718      	adds	r7, #24
 801851c:	46bd      	mov	sp, r7
 801851e:	bd80      	pop	{r7, pc}
 8018520:	20001f9c 	.word	0x20001f9c

08018524 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8018524:	b580      	push	{r7, lr}
 8018526:	b086      	sub	sp, #24
 8018528:	af00      	add	r7, sp, #0
 801852a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801852c:	687b      	ldr	r3, [r7, #4]
 801852e:	68db      	ldr	r3, [r3, #12]
 8018530:	68db      	ldr	r3, [r3, #12]
 8018532:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8018534:	693b      	ldr	r3, [r7, #16]
 8018536:	2b00      	cmp	r3, #0
 8018538:	d10a      	bne.n	8018550 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 801853a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801853e:	f383 8811 	msr	BASEPRI, r3
 8018542:	f3bf 8f6f 	isb	sy
 8018546:	f3bf 8f4f 	dsb	sy
 801854a:	60fb      	str	r3, [r7, #12]
}
 801854c:	bf00      	nop
 801854e:	e7fe      	b.n	801854e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8018550:	693b      	ldr	r3, [r7, #16]
 8018552:	3318      	adds	r3, #24
 8018554:	4618      	mov	r0, r3
 8018556:	f7fe fbbd 	bl	8016cd4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801855a:	4b20      	ldr	r3, [pc, #128]	; (80185dc <xTaskRemoveFromEventList+0xb8>)
 801855c:	681b      	ldr	r3, [r3, #0]
 801855e:	2b00      	cmp	r3, #0
 8018560:	d121      	bne.n	80185a6 <xTaskRemoveFromEventList+0x82>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8018562:	693b      	ldr	r3, [r7, #16]
 8018564:	3304      	adds	r3, #4
 8018566:	4618      	mov	r0, r3
 8018568:	f7fe fbb4 	bl	8016cd4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801856c:	693b      	ldr	r3, [r7, #16]
 801856e:	4618      	mov	r0, r3
 8018570:	f002 fb92 	bl	801ac98 <SEGGER_SYSVIEW_OnTaskStartReady>
 8018574:	693b      	ldr	r3, [r7, #16]
 8018576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018578:	4b19      	ldr	r3, [pc, #100]	; (80185e0 <xTaskRemoveFromEventList+0xbc>)
 801857a:	681b      	ldr	r3, [r3, #0]
 801857c:	429a      	cmp	r2, r3
 801857e:	d903      	bls.n	8018588 <xTaskRemoveFromEventList+0x64>
 8018580:	693b      	ldr	r3, [r7, #16]
 8018582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018584:	4a16      	ldr	r2, [pc, #88]	; (80185e0 <xTaskRemoveFromEventList+0xbc>)
 8018586:	6013      	str	r3, [r2, #0]
 8018588:	693b      	ldr	r3, [r7, #16]
 801858a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801858c:	4613      	mov	r3, r2
 801858e:	009b      	lsls	r3, r3, #2
 8018590:	4413      	add	r3, r2
 8018592:	009b      	lsls	r3, r3, #2
 8018594:	4a13      	ldr	r2, [pc, #76]	; (80185e4 <xTaskRemoveFromEventList+0xc0>)
 8018596:	441a      	add	r2, r3
 8018598:	693b      	ldr	r3, [r7, #16]
 801859a:	3304      	adds	r3, #4
 801859c:	4619      	mov	r1, r3
 801859e:	4610      	mov	r0, r2
 80185a0:	f7fe fb3b 	bl	8016c1a <vListInsertEnd>
 80185a4:	e005      	b.n	80185b2 <xTaskRemoveFromEventList+0x8e>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80185a6:	693b      	ldr	r3, [r7, #16]
 80185a8:	3318      	adds	r3, #24
 80185aa:	4619      	mov	r1, r3
 80185ac:	480e      	ldr	r0, [pc, #56]	; (80185e8 <xTaskRemoveFromEventList+0xc4>)
 80185ae:	f7fe fb34 	bl	8016c1a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80185b2:	693b      	ldr	r3, [r7, #16]
 80185b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80185b6:	4b0d      	ldr	r3, [pc, #52]	; (80185ec <xTaskRemoveFromEventList+0xc8>)
 80185b8:	681b      	ldr	r3, [r3, #0]
 80185ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80185bc:	429a      	cmp	r2, r3
 80185be:	d905      	bls.n	80185cc <xTaskRemoveFromEventList+0xa8>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80185c0:	2301      	movs	r3, #1
 80185c2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80185c4:	4b0a      	ldr	r3, [pc, #40]	; (80185f0 <xTaskRemoveFromEventList+0xcc>)
 80185c6:	2201      	movs	r2, #1
 80185c8:	601a      	str	r2, [r3, #0]
 80185ca:	e001      	b.n	80185d0 <xTaskRemoveFromEventList+0xac>
	}
	else
	{
		xReturn = pdFALSE;
 80185cc:	2300      	movs	r3, #0
 80185ce:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80185d0:	697b      	ldr	r3, [r7, #20]
}
 80185d2:	4618      	mov	r0, r3
 80185d4:	3718      	adds	r7, #24
 80185d6:	46bd      	mov	sp, r7
 80185d8:	bd80      	pop	{r7, pc}
 80185da:	bf00      	nop
 80185dc:	20002498 	.word	0x20002498
 80185e0:	20002478 	.word	0x20002478
 80185e4:	20001fa0 	.word	0x20001fa0
 80185e8:	20002430 	.word	0x20002430
 80185ec:	20001f9c 	.word	0x20001f9c
 80185f0:	20002484 	.word	0x20002484

080185f4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80185f4:	b480      	push	{r7}
 80185f6:	b083      	sub	sp, #12
 80185f8:	af00      	add	r7, sp, #0
 80185fa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80185fc:	4b06      	ldr	r3, [pc, #24]	; (8018618 <vTaskInternalSetTimeOutState+0x24>)
 80185fe:	681a      	ldr	r2, [r3, #0]
 8018600:	687b      	ldr	r3, [r7, #4]
 8018602:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8018604:	4b05      	ldr	r3, [pc, #20]	; (801861c <vTaskInternalSetTimeOutState+0x28>)
 8018606:	681a      	ldr	r2, [r3, #0]
 8018608:	687b      	ldr	r3, [r7, #4]
 801860a:	605a      	str	r2, [r3, #4]
}
 801860c:	bf00      	nop
 801860e:	370c      	adds	r7, #12
 8018610:	46bd      	mov	sp, r7
 8018612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018616:	4770      	bx	lr
 8018618:	20002488 	.word	0x20002488
 801861c:	20002474 	.word	0x20002474

08018620 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8018620:	b580      	push	{r7, lr}
 8018622:	b088      	sub	sp, #32
 8018624:	af00      	add	r7, sp, #0
 8018626:	6078      	str	r0, [r7, #4]
 8018628:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801862a:	687b      	ldr	r3, [r7, #4]
 801862c:	2b00      	cmp	r3, #0
 801862e:	d10a      	bne.n	8018646 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8018630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018634:	f383 8811 	msr	BASEPRI, r3
 8018638:	f3bf 8f6f 	isb	sy
 801863c:	f3bf 8f4f 	dsb	sy
 8018640:	613b      	str	r3, [r7, #16]
}
 8018642:	bf00      	nop
 8018644:	e7fe      	b.n	8018644 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8018646:	683b      	ldr	r3, [r7, #0]
 8018648:	2b00      	cmp	r3, #0
 801864a:	d10a      	bne.n	8018662 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 801864c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018650:	f383 8811 	msr	BASEPRI, r3
 8018654:	f3bf 8f6f 	isb	sy
 8018658:	f3bf 8f4f 	dsb	sy
 801865c:	60fb      	str	r3, [r7, #12]
}
 801865e:	bf00      	nop
 8018660:	e7fe      	b.n	8018660 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8018662:	f000 febf 	bl	80193e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8018666:	4b1d      	ldr	r3, [pc, #116]	; (80186dc <xTaskCheckForTimeOut+0xbc>)
 8018668:	681b      	ldr	r3, [r3, #0]
 801866a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801866c:	687b      	ldr	r3, [r7, #4]
 801866e:	685b      	ldr	r3, [r3, #4]
 8018670:	69ba      	ldr	r2, [r7, #24]
 8018672:	1ad3      	subs	r3, r2, r3
 8018674:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8018676:	683b      	ldr	r3, [r7, #0]
 8018678:	681b      	ldr	r3, [r3, #0]
 801867a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801867e:	d102      	bne.n	8018686 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8018680:	2300      	movs	r3, #0
 8018682:	61fb      	str	r3, [r7, #28]
 8018684:	e023      	b.n	80186ce <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8018686:	687b      	ldr	r3, [r7, #4]
 8018688:	681a      	ldr	r2, [r3, #0]
 801868a:	4b15      	ldr	r3, [pc, #84]	; (80186e0 <xTaskCheckForTimeOut+0xc0>)
 801868c:	681b      	ldr	r3, [r3, #0]
 801868e:	429a      	cmp	r2, r3
 8018690:	d007      	beq.n	80186a2 <xTaskCheckForTimeOut+0x82>
 8018692:	687b      	ldr	r3, [r7, #4]
 8018694:	685b      	ldr	r3, [r3, #4]
 8018696:	69ba      	ldr	r2, [r7, #24]
 8018698:	429a      	cmp	r2, r3
 801869a:	d302      	bcc.n	80186a2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801869c:	2301      	movs	r3, #1
 801869e:	61fb      	str	r3, [r7, #28]
 80186a0:	e015      	b.n	80186ce <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80186a2:	683b      	ldr	r3, [r7, #0]
 80186a4:	681b      	ldr	r3, [r3, #0]
 80186a6:	697a      	ldr	r2, [r7, #20]
 80186a8:	429a      	cmp	r2, r3
 80186aa:	d20b      	bcs.n	80186c4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80186ac:	683b      	ldr	r3, [r7, #0]
 80186ae:	681a      	ldr	r2, [r3, #0]
 80186b0:	697b      	ldr	r3, [r7, #20]
 80186b2:	1ad2      	subs	r2, r2, r3
 80186b4:	683b      	ldr	r3, [r7, #0]
 80186b6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80186b8:	6878      	ldr	r0, [r7, #4]
 80186ba:	f7ff ff9b 	bl	80185f4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80186be:	2300      	movs	r3, #0
 80186c0:	61fb      	str	r3, [r7, #28]
 80186c2:	e004      	b.n	80186ce <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80186c4:	683b      	ldr	r3, [r7, #0]
 80186c6:	2200      	movs	r2, #0
 80186c8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80186ca:	2301      	movs	r3, #1
 80186cc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80186ce:	f000 feb9 	bl	8019444 <vPortExitCritical>

	return xReturn;
 80186d2:	69fb      	ldr	r3, [r7, #28]
}
 80186d4:	4618      	mov	r0, r3
 80186d6:	3720      	adds	r7, #32
 80186d8:	46bd      	mov	sp, r7
 80186da:	bd80      	pop	{r7, pc}
 80186dc:	20002474 	.word	0x20002474
 80186e0:	20002488 	.word	0x20002488

080186e4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80186e4:	b480      	push	{r7}
 80186e6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80186e8:	4b03      	ldr	r3, [pc, #12]	; (80186f8 <vTaskMissedYield+0x14>)
 80186ea:	2201      	movs	r2, #1
 80186ec:	601a      	str	r2, [r3, #0]
}
 80186ee:	bf00      	nop
 80186f0:	46bd      	mov	sp, r7
 80186f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186f6:	4770      	bx	lr
 80186f8:	20002484 	.word	0x20002484

080186fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80186fc:	b580      	push	{r7, lr}
 80186fe:	b082      	sub	sp, #8
 8018700:	af00      	add	r7, sp, #0
 8018702:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8018704:	f000 f852 	bl	80187ac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8018708:	4b06      	ldr	r3, [pc, #24]	; (8018724 <prvIdleTask+0x28>)
 801870a:	681b      	ldr	r3, [r3, #0]
 801870c:	2b01      	cmp	r3, #1
 801870e:	d9f9      	bls.n	8018704 <prvIdleTask+0x8>
			{
				taskYIELD();
 8018710:	4b05      	ldr	r3, [pc, #20]	; (8018728 <prvIdleTask+0x2c>)
 8018712:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018716:	601a      	str	r2, [r3, #0]
 8018718:	f3bf 8f4f 	dsb	sy
 801871c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8018720:	e7f0      	b.n	8018704 <prvIdleTask+0x8>
 8018722:	bf00      	nop
 8018724:	20001fa0 	.word	0x20001fa0
 8018728:	e000ed04 	.word	0xe000ed04

0801872c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801872c:	b580      	push	{r7, lr}
 801872e:	b082      	sub	sp, #8
 8018730:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8018732:	2300      	movs	r3, #0
 8018734:	607b      	str	r3, [r7, #4]
 8018736:	e00c      	b.n	8018752 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8018738:	687a      	ldr	r2, [r7, #4]
 801873a:	4613      	mov	r3, r2
 801873c:	009b      	lsls	r3, r3, #2
 801873e:	4413      	add	r3, r2
 8018740:	009b      	lsls	r3, r3, #2
 8018742:	4a12      	ldr	r2, [pc, #72]	; (801878c <prvInitialiseTaskLists+0x60>)
 8018744:	4413      	add	r3, r2
 8018746:	4618      	mov	r0, r3
 8018748:	f7fe fa3a 	bl	8016bc0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801874c:	687b      	ldr	r3, [r7, #4]
 801874e:	3301      	adds	r3, #1
 8018750:	607b      	str	r3, [r7, #4]
 8018752:	687b      	ldr	r3, [r7, #4]
 8018754:	2b37      	cmp	r3, #55	; 0x37
 8018756:	d9ef      	bls.n	8018738 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8018758:	480d      	ldr	r0, [pc, #52]	; (8018790 <prvInitialiseTaskLists+0x64>)
 801875a:	f7fe fa31 	bl	8016bc0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801875e:	480d      	ldr	r0, [pc, #52]	; (8018794 <prvInitialiseTaskLists+0x68>)
 8018760:	f7fe fa2e 	bl	8016bc0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8018764:	480c      	ldr	r0, [pc, #48]	; (8018798 <prvInitialiseTaskLists+0x6c>)
 8018766:	f7fe fa2b 	bl	8016bc0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801876a:	480c      	ldr	r0, [pc, #48]	; (801879c <prvInitialiseTaskLists+0x70>)
 801876c:	f7fe fa28 	bl	8016bc0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8018770:	480b      	ldr	r0, [pc, #44]	; (80187a0 <prvInitialiseTaskLists+0x74>)
 8018772:	f7fe fa25 	bl	8016bc0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8018776:	4b0b      	ldr	r3, [pc, #44]	; (80187a4 <prvInitialiseTaskLists+0x78>)
 8018778:	4a05      	ldr	r2, [pc, #20]	; (8018790 <prvInitialiseTaskLists+0x64>)
 801877a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801877c:	4b0a      	ldr	r3, [pc, #40]	; (80187a8 <prvInitialiseTaskLists+0x7c>)
 801877e:	4a05      	ldr	r2, [pc, #20]	; (8018794 <prvInitialiseTaskLists+0x68>)
 8018780:	601a      	str	r2, [r3, #0]
}
 8018782:	bf00      	nop
 8018784:	3708      	adds	r7, #8
 8018786:	46bd      	mov	sp, r7
 8018788:	bd80      	pop	{r7, pc}
 801878a:	bf00      	nop
 801878c:	20001fa0 	.word	0x20001fa0
 8018790:	20002400 	.word	0x20002400
 8018794:	20002414 	.word	0x20002414
 8018798:	20002430 	.word	0x20002430
 801879c:	20002444 	.word	0x20002444
 80187a0:	2000245c 	.word	0x2000245c
 80187a4:	20002428 	.word	0x20002428
 80187a8:	2000242c 	.word	0x2000242c

080187ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80187ac:	b580      	push	{r7, lr}
 80187ae:	b082      	sub	sp, #8
 80187b0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80187b2:	e019      	b.n	80187e8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80187b4:	f000 fe16 	bl	80193e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80187b8:	4b10      	ldr	r3, [pc, #64]	; (80187fc <prvCheckTasksWaitingTermination+0x50>)
 80187ba:	68db      	ldr	r3, [r3, #12]
 80187bc:	68db      	ldr	r3, [r3, #12]
 80187be:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80187c0:	687b      	ldr	r3, [r7, #4]
 80187c2:	3304      	adds	r3, #4
 80187c4:	4618      	mov	r0, r3
 80187c6:	f7fe fa85 	bl	8016cd4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80187ca:	4b0d      	ldr	r3, [pc, #52]	; (8018800 <prvCheckTasksWaitingTermination+0x54>)
 80187cc:	681b      	ldr	r3, [r3, #0]
 80187ce:	3b01      	subs	r3, #1
 80187d0:	4a0b      	ldr	r2, [pc, #44]	; (8018800 <prvCheckTasksWaitingTermination+0x54>)
 80187d2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80187d4:	4b0b      	ldr	r3, [pc, #44]	; (8018804 <prvCheckTasksWaitingTermination+0x58>)
 80187d6:	681b      	ldr	r3, [r3, #0]
 80187d8:	3b01      	subs	r3, #1
 80187da:	4a0a      	ldr	r2, [pc, #40]	; (8018804 <prvCheckTasksWaitingTermination+0x58>)
 80187dc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80187de:	f000 fe31 	bl	8019444 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80187e2:	6878      	ldr	r0, [r7, #4]
 80187e4:	f000 f848 	bl	8018878 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80187e8:	4b06      	ldr	r3, [pc, #24]	; (8018804 <prvCheckTasksWaitingTermination+0x58>)
 80187ea:	681b      	ldr	r3, [r3, #0]
 80187ec:	2b00      	cmp	r3, #0
 80187ee:	d1e1      	bne.n	80187b4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80187f0:	bf00      	nop
 80187f2:	bf00      	nop
 80187f4:	3708      	adds	r7, #8
 80187f6:	46bd      	mov	sp, r7
 80187f8:	bd80      	pop	{r7, pc}
 80187fa:	bf00      	nop
 80187fc:	20002444 	.word	0x20002444
 8018800:	20002470 	.word	0x20002470
 8018804:	20002458 	.word	0x20002458

08018808 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8018808:	b480      	push	{r7}
 801880a:	b085      	sub	sp, #20
 801880c:	af00      	add	r7, sp, #0
 801880e:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8018810:	2300      	movs	r3, #0
 8018812:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8018814:	e005      	b.n	8018822 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8018816:	687b      	ldr	r3, [r7, #4]
 8018818:	3301      	adds	r3, #1
 801881a:	607b      	str	r3, [r7, #4]
			ulCount++;
 801881c:	68fb      	ldr	r3, [r7, #12]
 801881e:	3301      	adds	r3, #1
 8018820:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8018822:	687b      	ldr	r3, [r7, #4]
 8018824:	781b      	ldrb	r3, [r3, #0]
 8018826:	2ba5      	cmp	r3, #165	; 0xa5
 8018828:	d0f5      	beq.n	8018816 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 801882a:	68fb      	ldr	r3, [r7, #12]
 801882c:	089b      	lsrs	r3, r3, #2
 801882e:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8018830:	68fb      	ldr	r3, [r7, #12]
 8018832:	b29b      	uxth	r3, r3
	}
 8018834:	4618      	mov	r0, r3
 8018836:	3714      	adds	r7, #20
 8018838:	46bd      	mov	sp, r7
 801883a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801883e:	4770      	bx	lr

08018840 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 8018840:	b580      	push	{r7, lr}
 8018842:	b086      	sub	sp, #24
 8018844:	af00      	add	r7, sp, #0
 8018846:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 8018848:	687b      	ldr	r3, [r7, #4]
 801884a:	2b00      	cmp	r3, #0
 801884c:	d102      	bne.n	8018854 <uxTaskGetStackHighWaterMark+0x14>
 801884e:	4b09      	ldr	r3, [pc, #36]	; (8018874 <uxTaskGetStackHighWaterMark+0x34>)
 8018850:	681b      	ldr	r3, [r3, #0]
 8018852:	e000      	b.n	8018856 <uxTaskGetStackHighWaterMark+0x16>
 8018854:	687b      	ldr	r3, [r7, #4]
 8018856:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8018858:	697b      	ldr	r3, [r7, #20]
 801885a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801885c:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 801885e:	6938      	ldr	r0, [r7, #16]
 8018860:	f7ff ffd2 	bl	8018808 <prvTaskCheckFreeStackSpace>
 8018864:	4603      	mov	r3, r0
 8018866:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 8018868:	68fb      	ldr	r3, [r7, #12]
	}
 801886a:	4618      	mov	r0, r3
 801886c:	3718      	adds	r7, #24
 801886e:	46bd      	mov	sp, r7
 8018870:	bd80      	pop	{r7, pc}
 8018872:	bf00      	nop
 8018874:	20001f9c 	.word	0x20001f9c

08018878 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8018878:	b580      	push	{r7, lr}
 801887a:	b084      	sub	sp, #16
 801887c:	af00      	add	r7, sp, #0
 801887e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8018880:	687b      	ldr	r3, [r7, #4]
 8018882:	3364      	adds	r3, #100	; 0x64
 8018884:	4618      	mov	r0, r3
 8018886:	f002 fc0d 	bl	801b0a4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801888a:	687b      	ldr	r3, [r7, #4]
 801888c:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 8018890:	2b00      	cmp	r3, #0
 8018892:	d108      	bne.n	80188a6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8018894:	687b      	ldr	r3, [r7, #4]
 8018896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018898:	4618      	mov	r0, r3
 801889a:	f000 ff91 	bl	80197c0 <vPortFree>
				vPortFree( pxTCB );
 801889e:	6878      	ldr	r0, [r7, #4]
 80188a0:	f000 ff8e 	bl	80197c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80188a4:	e018      	b.n	80188d8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80188a6:	687b      	ldr	r3, [r7, #4]
 80188a8:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 80188ac:	2b01      	cmp	r3, #1
 80188ae:	d103      	bne.n	80188b8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80188b0:	6878      	ldr	r0, [r7, #4]
 80188b2:	f000 ff85 	bl	80197c0 <vPortFree>
	}
 80188b6:	e00f      	b.n	80188d8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80188b8:	687b      	ldr	r3, [r7, #4]
 80188ba:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 80188be:	2b02      	cmp	r3, #2
 80188c0:	d00a      	beq.n	80188d8 <prvDeleteTCB+0x60>
	__asm volatile
 80188c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80188c6:	f383 8811 	msr	BASEPRI, r3
 80188ca:	f3bf 8f6f 	isb	sy
 80188ce:	f3bf 8f4f 	dsb	sy
 80188d2:	60fb      	str	r3, [r7, #12]
}
 80188d4:	bf00      	nop
 80188d6:	e7fe      	b.n	80188d6 <prvDeleteTCB+0x5e>
	}
 80188d8:	bf00      	nop
 80188da:	3710      	adds	r7, #16
 80188dc:	46bd      	mov	sp, r7
 80188de:	bd80      	pop	{r7, pc}

080188e0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80188e0:	b480      	push	{r7}
 80188e2:	b083      	sub	sp, #12
 80188e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80188e6:	4b0c      	ldr	r3, [pc, #48]	; (8018918 <prvResetNextTaskUnblockTime+0x38>)
 80188e8:	681b      	ldr	r3, [r3, #0]
 80188ea:	681b      	ldr	r3, [r3, #0]
 80188ec:	2b00      	cmp	r3, #0
 80188ee:	d104      	bne.n	80188fa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80188f0:	4b0a      	ldr	r3, [pc, #40]	; (801891c <prvResetNextTaskUnblockTime+0x3c>)
 80188f2:	f04f 32ff 	mov.w	r2, #4294967295
 80188f6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80188f8:	e008      	b.n	801890c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80188fa:	4b07      	ldr	r3, [pc, #28]	; (8018918 <prvResetNextTaskUnblockTime+0x38>)
 80188fc:	681b      	ldr	r3, [r3, #0]
 80188fe:	68db      	ldr	r3, [r3, #12]
 8018900:	68db      	ldr	r3, [r3, #12]
 8018902:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8018904:	687b      	ldr	r3, [r7, #4]
 8018906:	685b      	ldr	r3, [r3, #4]
 8018908:	4a04      	ldr	r2, [pc, #16]	; (801891c <prvResetNextTaskUnblockTime+0x3c>)
 801890a:	6013      	str	r3, [r2, #0]
}
 801890c:	bf00      	nop
 801890e:	370c      	adds	r7, #12
 8018910:	46bd      	mov	sp, r7
 8018912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018916:	4770      	bx	lr
 8018918:	20002428 	.word	0x20002428
 801891c:	20002490 	.word	0x20002490

08018920 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8018920:	b480      	push	{r7}
 8018922:	b083      	sub	sp, #12
 8018924:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8018926:	4b0b      	ldr	r3, [pc, #44]	; (8018954 <xTaskGetSchedulerState+0x34>)
 8018928:	681b      	ldr	r3, [r3, #0]
 801892a:	2b00      	cmp	r3, #0
 801892c:	d102      	bne.n	8018934 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801892e:	2301      	movs	r3, #1
 8018930:	607b      	str	r3, [r7, #4]
 8018932:	e008      	b.n	8018946 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018934:	4b08      	ldr	r3, [pc, #32]	; (8018958 <xTaskGetSchedulerState+0x38>)
 8018936:	681b      	ldr	r3, [r3, #0]
 8018938:	2b00      	cmp	r3, #0
 801893a:	d102      	bne.n	8018942 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801893c:	2302      	movs	r3, #2
 801893e:	607b      	str	r3, [r7, #4]
 8018940:	e001      	b.n	8018946 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8018942:	2300      	movs	r3, #0
 8018944:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8018946:	687b      	ldr	r3, [r7, #4]
	}
 8018948:	4618      	mov	r0, r3
 801894a:	370c      	adds	r7, #12
 801894c:	46bd      	mov	sp, r7
 801894e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018952:	4770      	bx	lr
 8018954:	2000247c 	.word	0x2000247c
 8018958:	20002498 	.word	0x20002498

0801895c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801895c:	b580      	push	{r7, lr}
 801895e:	b086      	sub	sp, #24
 8018960:	af00      	add	r7, sp, #0
 8018962:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8018964:	687b      	ldr	r3, [r7, #4]
 8018966:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8018968:	2300      	movs	r3, #0
 801896a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801896c:	687b      	ldr	r3, [r7, #4]
 801896e:	2b00      	cmp	r3, #0
 8018970:	d05f      	beq.n	8018a32 <xTaskPriorityDisinherit+0xd6>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8018972:	4b32      	ldr	r3, [pc, #200]	; (8018a3c <xTaskPriorityDisinherit+0xe0>)
 8018974:	681b      	ldr	r3, [r3, #0]
 8018976:	693a      	ldr	r2, [r7, #16]
 8018978:	429a      	cmp	r2, r3
 801897a:	d00a      	beq.n	8018992 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 801897c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018980:	f383 8811 	msr	BASEPRI, r3
 8018984:	f3bf 8f6f 	isb	sy
 8018988:	f3bf 8f4f 	dsb	sy
 801898c:	60fb      	str	r3, [r7, #12]
}
 801898e:	bf00      	nop
 8018990:	e7fe      	b.n	8018990 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8018992:	693b      	ldr	r3, [r7, #16]
 8018994:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018996:	2b00      	cmp	r3, #0
 8018998:	d10a      	bne.n	80189b0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 801899a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801899e:	f383 8811 	msr	BASEPRI, r3
 80189a2:	f3bf 8f6f 	isb	sy
 80189a6:	f3bf 8f4f 	dsb	sy
 80189aa:	60bb      	str	r3, [r7, #8]
}
 80189ac:	bf00      	nop
 80189ae:	e7fe      	b.n	80189ae <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80189b0:	693b      	ldr	r3, [r7, #16]
 80189b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80189b4:	1e5a      	subs	r2, r3, #1
 80189b6:	693b      	ldr	r3, [r7, #16]
 80189b8:	661a      	str	r2, [r3, #96]	; 0x60

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80189ba:	693b      	ldr	r3, [r7, #16]
 80189bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80189be:	693b      	ldr	r3, [r7, #16]
 80189c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80189c2:	429a      	cmp	r2, r3
 80189c4:	d035      	beq.n	8018a32 <xTaskPriorityDisinherit+0xd6>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80189c6:	693b      	ldr	r3, [r7, #16]
 80189c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80189ca:	2b00      	cmp	r3, #0
 80189cc:	d131      	bne.n	8018a32 <xTaskPriorityDisinherit+0xd6>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80189ce:	693b      	ldr	r3, [r7, #16]
 80189d0:	3304      	adds	r3, #4
 80189d2:	4618      	mov	r0, r3
 80189d4:	f7fe f97e 	bl	8016cd4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 80189d8:	687b      	ldr	r3, [r7, #4]
 80189da:	4619      	mov	r1, r3
 80189dc:	204a      	movs	r0, #74	; 0x4a
 80189de:	f001 fc55 	bl	801a28c <SEGGER_SYSVIEW_RecordU32>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80189e2:	693b      	ldr	r3, [r7, #16]
 80189e4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80189e6:	693b      	ldr	r3, [r7, #16]
 80189e8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80189ea:	693b      	ldr	r3, [r7, #16]
 80189ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80189ee:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80189f2:	693b      	ldr	r3, [r7, #16]
 80189f4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80189f6:	693b      	ldr	r3, [r7, #16]
 80189f8:	4618      	mov	r0, r3
 80189fa:	f002 f94d 	bl	801ac98 <SEGGER_SYSVIEW_OnTaskStartReady>
 80189fe:	693b      	ldr	r3, [r7, #16]
 8018a00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018a02:	4b0f      	ldr	r3, [pc, #60]	; (8018a40 <xTaskPriorityDisinherit+0xe4>)
 8018a04:	681b      	ldr	r3, [r3, #0]
 8018a06:	429a      	cmp	r2, r3
 8018a08:	d903      	bls.n	8018a12 <xTaskPriorityDisinherit+0xb6>
 8018a0a:	693b      	ldr	r3, [r7, #16]
 8018a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018a0e:	4a0c      	ldr	r2, [pc, #48]	; (8018a40 <xTaskPriorityDisinherit+0xe4>)
 8018a10:	6013      	str	r3, [r2, #0]
 8018a12:	693b      	ldr	r3, [r7, #16]
 8018a14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018a16:	4613      	mov	r3, r2
 8018a18:	009b      	lsls	r3, r3, #2
 8018a1a:	4413      	add	r3, r2
 8018a1c:	009b      	lsls	r3, r3, #2
 8018a1e:	4a09      	ldr	r2, [pc, #36]	; (8018a44 <xTaskPriorityDisinherit+0xe8>)
 8018a20:	441a      	add	r2, r3
 8018a22:	693b      	ldr	r3, [r7, #16]
 8018a24:	3304      	adds	r3, #4
 8018a26:	4619      	mov	r1, r3
 8018a28:	4610      	mov	r0, r2
 8018a2a:	f7fe f8f6 	bl	8016c1a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8018a2e:	2301      	movs	r3, #1
 8018a30:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8018a32:	697b      	ldr	r3, [r7, #20]
	}
 8018a34:	4618      	mov	r0, r3
 8018a36:	3718      	adds	r7, #24
 8018a38:	46bd      	mov	sp, r7
 8018a3a:	bd80      	pop	{r7, pc}
 8018a3c:	20001f9c 	.word	0x20001f9c
 8018a40:	20002478 	.word	0x20002478
 8018a44:	20001fa0 	.word	0x20001fa0

08018a48 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8018a48:	b580      	push	{r7, lr}
 8018a4a:	b084      	sub	sp, #16
 8018a4c:	af00      	add	r7, sp, #0
 8018a4e:	6078      	str	r0, [r7, #4]
 8018a50:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8018a52:	4b21      	ldr	r3, [pc, #132]	; (8018ad8 <prvAddCurrentTaskToDelayedList+0x90>)
 8018a54:	681b      	ldr	r3, [r3, #0]
 8018a56:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018a58:	4b20      	ldr	r3, [pc, #128]	; (8018adc <prvAddCurrentTaskToDelayedList+0x94>)
 8018a5a:	681b      	ldr	r3, [r3, #0]
 8018a5c:	3304      	adds	r3, #4
 8018a5e:	4618      	mov	r0, r3
 8018a60:	f7fe f938 	bl	8016cd4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8018a64:	687b      	ldr	r3, [r7, #4]
 8018a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018a6a:	d10a      	bne.n	8018a82 <prvAddCurrentTaskToDelayedList+0x3a>
 8018a6c:	683b      	ldr	r3, [r7, #0]
 8018a6e:	2b00      	cmp	r3, #0
 8018a70:	d007      	beq.n	8018a82 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018a72:	4b1a      	ldr	r3, [pc, #104]	; (8018adc <prvAddCurrentTaskToDelayedList+0x94>)
 8018a74:	681b      	ldr	r3, [r3, #0]
 8018a76:	3304      	adds	r3, #4
 8018a78:	4619      	mov	r1, r3
 8018a7a:	4819      	ldr	r0, [pc, #100]	; (8018ae0 <prvAddCurrentTaskToDelayedList+0x98>)
 8018a7c:	f7fe f8cd 	bl	8016c1a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8018a80:	e026      	b.n	8018ad0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8018a82:	68fa      	ldr	r2, [r7, #12]
 8018a84:	687b      	ldr	r3, [r7, #4]
 8018a86:	4413      	add	r3, r2
 8018a88:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8018a8a:	4b14      	ldr	r3, [pc, #80]	; (8018adc <prvAddCurrentTaskToDelayedList+0x94>)
 8018a8c:	681b      	ldr	r3, [r3, #0]
 8018a8e:	68ba      	ldr	r2, [r7, #8]
 8018a90:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8018a92:	68ba      	ldr	r2, [r7, #8]
 8018a94:	68fb      	ldr	r3, [r7, #12]
 8018a96:	429a      	cmp	r2, r3
 8018a98:	d209      	bcs.n	8018aae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018a9a:	4b12      	ldr	r3, [pc, #72]	; (8018ae4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8018a9c:	681a      	ldr	r2, [r3, #0]
 8018a9e:	4b0f      	ldr	r3, [pc, #60]	; (8018adc <prvAddCurrentTaskToDelayedList+0x94>)
 8018aa0:	681b      	ldr	r3, [r3, #0]
 8018aa2:	3304      	adds	r3, #4
 8018aa4:	4619      	mov	r1, r3
 8018aa6:	4610      	mov	r0, r2
 8018aa8:	f7fe f8db 	bl	8016c62 <vListInsert>
}
 8018aac:	e010      	b.n	8018ad0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018aae:	4b0e      	ldr	r3, [pc, #56]	; (8018ae8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8018ab0:	681a      	ldr	r2, [r3, #0]
 8018ab2:	4b0a      	ldr	r3, [pc, #40]	; (8018adc <prvAddCurrentTaskToDelayedList+0x94>)
 8018ab4:	681b      	ldr	r3, [r3, #0]
 8018ab6:	3304      	adds	r3, #4
 8018ab8:	4619      	mov	r1, r3
 8018aba:	4610      	mov	r0, r2
 8018abc:	f7fe f8d1 	bl	8016c62 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8018ac0:	4b0a      	ldr	r3, [pc, #40]	; (8018aec <prvAddCurrentTaskToDelayedList+0xa4>)
 8018ac2:	681b      	ldr	r3, [r3, #0]
 8018ac4:	68ba      	ldr	r2, [r7, #8]
 8018ac6:	429a      	cmp	r2, r3
 8018ac8:	d202      	bcs.n	8018ad0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8018aca:	4a08      	ldr	r2, [pc, #32]	; (8018aec <prvAddCurrentTaskToDelayedList+0xa4>)
 8018acc:	68bb      	ldr	r3, [r7, #8]
 8018ace:	6013      	str	r3, [r2, #0]
}
 8018ad0:	bf00      	nop
 8018ad2:	3710      	adds	r7, #16
 8018ad4:	46bd      	mov	sp, r7
 8018ad6:	bd80      	pop	{r7, pc}
 8018ad8:	20002474 	.word	0x20002474
 8018adc:	20001f9c 	.word	0x20001f9c
 8018ae0:	2000245c 	.word	0x2000245c
 8018ae4:	2000242c 	.word	0x2000242c
 8018ae8:	20002428 	.word	0x20002428
 8018aec:	20002490 	.word	0x20002490

08018af0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8018af0:	b580      	push	{r7, lr}
 8018af2:	b08a      	sub	sp, #40	; 0x28
 8018af4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8018af6:	2300      	movs	r3, #0
 8018af8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8018afa:	f000 fb07 	bl	801910c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8018afe:	4b1c      	ldr	r3, [pc, #112]	; (8018b70 <xTimerCreateTimerTask+0x80>)
 8018b00:	681b      	ldr	r3, [r3, #0]
 8018b02:	2b00      	cmp	r3, #0
 8018b04:	d021      	beq.n	8018b4a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8018b06:	2300      	movs	r3, #0
 8018b08:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8018b0a:	2300      	movs	r3, #0
 8018b0c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8018b0e:	1d3a      	adds	r2, r7, #4
 8018b10:	f107 0108 	add.w	r1, r7, #8
 8018b14:	f107 030c 	add.w	r3, r7, #12
 8018b18:	4618      	mov	r0, r3
 8018b1a:	f7fe f837 	bl	8016b8c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8018b1e:	6879      	ldr	r1, [r7, #4]
 8018b20:	68bb      	ldr	r3, [r7, #8]
 8018b22:	68fa      	ldr	r2, [r7, #12]
 8018b24:	9202      	str	r2, [sp, #8]
 8018b26:	9301      	str	r3, [sp, #4]
 8018b28:	2302      	movs	r3, #2
 8018b2a:	9300      	str	r3, [sp, #0]
 8018b2c:	2300      	movs	r3, #0
 8018b2e:	460a      	mov	r2, r1
 8018b30:	4910      	ldr	r1, [pc, #64]	; (8018b74 <xTimerCreateTimerTask+0x84>)
 8018b32:	4811      	ldr	r0, [pc, #68]	; (8018b78 <xTimerCreateTimerTask+0x88>)
 8018b34:	f7fe ff8c 	bl	8017a50 <xTaskCreateStatic>
 8018b38:	4603      	mov	r3, r0
 8018b3a:	4a10      	ldr	r2, [pc, #64]	; (8018b7c <xTimerCreateTimerTask+0x8c>)
 8018b3c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8018b3e:	4b0f      	ldr	r3, [pc, #60]	; (8018b7c <xTimerCreateTimerTask+0x8c>)
 8018b40:	681b      	ldr	r3, [r3, #0]
 8018b42:	2b00      	cmp	r3, #0
 8018b44:	d001      	beq.n	8018b4a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8018b46:	2301      	movs	r3, #1
 8018b48:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8018b4a:	697b      	ldr	r3, [r7, #20]
 8018b4c:	2b00      	cmp	r3, #0
 8018b4e:	d10a      	bne.n	8018b66 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8018b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018b54:	f383 8811 	msr	BASEPRI, r3
 8018b58:	f3bf 8f6f 	isb	sy
 8018b5c:	f3bf 8f4f 	dsb	sy
 8018b60:	613b      	str	r3, [r7, #16]
}
 8018b62:	bf00      	nop
 8018b64:	e7fe      	b.n	8018b64 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8018b66:	697b      	ldr	r3, [r7, #20]
}
 8018b68:	4618      	mov	r0, r3
 8018b6a:	3718      	adds	r7, #24
 8018b6c:	46bd      	mov	sp, r7
 8018b6e:	bd80      	pop	{r7, pc}
 8018b70:	200024cc 	.word	0x200024cc
 8018b74:	0801bd8c 	.word	0x0801bd8c
 8018b78:	08018cb5 	.word	0x08018cb5
 8018b7c:	200024d0 	.word	0x200024d0

08018b80 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8018b80:	b580      	push	{r7, lr}
 8018b82:	b08a      	sub	sp, #40	; 0x28
 8018b84:	af00      	add	r7, sp, #0
 8018b86:	60f8      	str	r0, [r7, #12]
 8018b88:	60b9      	str	r1, [r7, #8]
 8018b8a:	607a      	str	r2, [r7, #4]
 8018b8c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8018b8e:	2300      	movs	r3, #0
 8018b90:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8018b92:	68fb      	ldr	r3, [r7, #12]
 8018b94:	2b00      	cmp	r3, #0
 8018b96:	d10a      	bne.n	8018bae <xTimerGenericCommand+0x2e>
	__asm volatile
 8018b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018b9c:	f383 8811 	msr	BASEPRI, r3
 8018ba0:	f3bf 8f6f 	isb	sy
 8018ba4:	f3bf 8f4f 	dsb	sy
 8018ba8:	623b      	str	r3, [r7, #32]
}
 8018baa:	bf00      	nop
 8018bac:	e7fe      	b.n	8018bac <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8018bae:	4b1a      	ldr	r3, [pc, #104]	; (8018c18 <xTimerGenericCommand+0x98>)
 8018bb0:	681b      	ldr	r3, [r3, #0]
 8018bb2:	2b00      	cmp	r3, #0
 8018bb4:	d02a      	beq.n	8018c0c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8018bb6:	68bb      	ldr	r3, [r7, #8]
 8018bb8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8018bba:	687b      	ldr	r3, [r7, #4]
 8018bbc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8018bbe:	68fb      	ldr	r3, [r7, #12]
 8018bc0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8018bc2:	68bb      	ldr	r3, [r7, #8]
 8018bc4:	2b05      	cmp	r3, #5
 8018bc6:	dc18      	bgt.n	8018bfa <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8018bc8:	f7ff feaa 	bl	8018920 <xTaskGetSchedulerState>
 8018bcc:	4603      	mov	r3, r0
 8018bce:	2b02      	cmp	r3, #2
 8018bd0:	d109      	bne.n	8018be6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8018bd2:	4b11      	ldr	r3, [pc, #68]	; (8018c18 <xTimerGenericCommand+0x98>)
 8018bd4:	6818      	ldr	r0, [r3, #0]
 8018bd6:	f107 0110 	add.w	r1, r7, #16
 8018bda:	2300      	movs	r3, #0
 8018bdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018bde:	f7fe f9e7 	bl	8016fb0 <xQueueGenericSend>
 8018be2:	6278      	str	r0, [r7, #36]	; 0x24
 8018be4:	e012      	b.n	8018c0c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8018be6:	4b0c      	ldr	r3, [pc, #48]	; (8018c18 <xTimerGenericCommand+0x98>)
 8018be8:	6818      	ldr	r0, [r3, #0]
 8018bea:	f107 0110 	add.w	r1, r7, #16
 8018bee:	2300      	movs	r3, #0
 8018bf0:	2200      	movs	r2, #0
 8018bf2:	f7fe f9dd 	bl	8016fb0 <xQueueGenericSend>
 8018bf6:	6278      	str	r0, [r7, #36]	; 0x24
 8018bf8:	e008      	b.n	8018c0c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8018bfa:	4b07      	ldr	r3, [pc, #28]	; (8018c18 <xTimerGenericCommand+0x98>)
 8018bfc:	6818      	ldr	r0, [r3, #0]
 8018bfe:	f107 0110 	add.w	r1, r7, #16
 8018c02:	2300      	movs	r3, #0
 8018c04:	683a      	ldr	r2, [r7, #0]
 8018c06:	f7fe faf9 	bl	80171fc <xQueueGenericSendFromISR>
 8018c0a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8018c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8018c0e:	4618      	mov	r0, r3
 8018c10:	3728      	adds	r7, #40	; 0x28
 8018c12:	46bd      	mov	sp, r7
 8018c14:	bd80      	pop	{r7, pc}
 8018c16:	bf00      	nop
 8018c18:	200024cc 	.word	0x200024cc

08018c1c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8018c1c:	b580      	push	{r7, lr}
 8018c1e:	b088      	sub	sp, #32
 8018c20:	af02      	add	r7, sp, #8
 8018c22:	6078      	str	r0, [r7, #4]
 8018c24:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018c26:	4b22      	ldr	r3, [pc, #136]	; (8018cb0 <prvProcessExpiredTimer+0x94>)
 8018c28:	681b      	ldr	r3, [r3, #0]
 8018c2a:	68db      	ldr	r3, [r3, #12]
 8018c2c:	68db      	ldr	r3, [r3, #12]
 8018c2e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8018c30:	697b      	ldr	r3, [r7, #20]
 8018c32:	3304      	adds	r3, #4
 8018c34:	4618      	mov	r0, r3
 8018c36:	f7fe f84d 	bl	8016cd4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8018c3a:	697b      	ldr	r3, [r7, #20]
 8018c3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018c40:	f003 0304 	and.w	r3, r3, #4
 8018c44:	2b00      	cmp	r3, #0
 8018c46:	d022      	beq.n	8018c8e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8018c48:	697b      	ldr	r3, [r7, #20]
 8018c4a:	699a      	ldr	r2, [r3, #24]
 8018c4c:	687b      	ldr	r3, [r7, #4]
 8018c4e:	18d1      	adds	r1, r2, r3
 8018c50:	687b      	ldr	r3, [r7, #4]
 8018c52:	683a      	ldr	r2, [r7, #0]
 8018c54:	6978      	ldr	r0, [r7, #20]
 8018c56:	f000 f8d1 	bl	8018dfc <prvInsertTimerInActiveList>
 8018c5a:	4603      	mov	r3, r0
 8018c5c:	2b00      	cmp	r3, #0
 8018c5e:	d01f      	beq.n	8018ca0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8018c60:	2300      	movs	r3, #0
 8018c62:	9300      	str	r3, [sp, #0]
 8018c64:	2300      	movs	r3, #0
 8018c66:	687a      	ldr	r2, [r7, #4]
 8018c68:	2100      	movs	r1, #0
 8018c6a:	6978      	ldr	r0, [r7, #20]
 8018c6c:	f7ff ff88 	bl	8018b80 <xTimerGenericCommand>
 8018c70:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8018c72:	693b      	ldr	r3, [r7, #16]
 8018c74:	2b00      	cmp	r3, #0
 8018c76:	d113      	bne.n	8018ca0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8018c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018c7c:	f383 8811 	msr	BASEPRI, r3
 8018c80:	f3bf 8f6f 	isb	sy
 8018c84:	f3bf 8f4f 	dsb	sy
 8018c88:	60fb      	str	r3, [r7, #12]
}
 8018c8a:	bf00      	nop
 8018c8c:	e7fe      	b.n	8018c8c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8018c8e:	697b      	ldr	r3, [r7, #20]
 8018c90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018c94:	f023 0301 	bic.w	r3, r3, #1
 8018c98:	b2da      	uxtb	r2, r3
 8018c9a:	697b      	ldr	r3, [r7, #20]
 8018c9c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8018ca0:	697b      	ldr	r3, [r7, #20]
 8018ca2:	6a1b      	ldr	r3, [r3, #32]
 8018ca4:	6978      	ldr	r0, [r7, #20]
 8018ca6:	4798      	blx	r3
}
 8018ca8:	bf00      	nop
 8018caa:	3718      	adds	r7, #24
 8018cac:	46bd      	mov	sp, r7
 8018cae:	bd80      	pop	{r7, pc}
 8018cb0:	200024c4 	.word	0x200024c4

08018cb4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8018cb4:	b580      	push	{r7, lr}
 8018cb6:	b084      	sub	sp, #16
 8018cb8:	af00      	add	r7, sp, #0
 8018cba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8018cbc:	f107 0308 	add.w	r3, r7, #8
 8018cc0:	4618      	mov	r0, r3
 8018cc2:	f000 f857 	bl	8018d74 <prvGetNextExpireTime>
 8018cc6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8018cc8:	68bb      	ldr	r3, [r7, #8]
 8018cca:	4619      	mov	r1, r3
 8018ccc:	68f8      	ldr	r0, [r7, #12]
 8018cce:	f000 f803 	bl	8018cd8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8018cd2:	f000 f8d5 	bl	8018e80 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8018cd6:	e7f1      	b.n	8018cbc <prvTimerTask+0x8>

08018cd8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8018cd8:	b580      	push	{r7, lr}
 8018cda:	b084      	sub	sp, #16
 8018cdc:	af00      	add	r7, sp, #0
 8018cde:	6078      	str	r0, [r7, #4]
 8018ce0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8018ce2:	f7ff f9c5 	bl	8018070 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8018ce6:	f107 0308 	add.w	r3, r7, #8
 8018cea:	4618      	mov	r0, r3
 8018cec:	f000 f866 	bl	8018dbc <prvSampleTimeNow>
 8018cf0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8018cf2:	68bb      	ldr	r3, [r7, #8]
 8018cf4:	2b00      	cmp	r3, #0
 8018cf6:	d130      	bne.n	8018d5a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8018cf8:	683b      	ldr	r3, [r7, #0]
 8018cfa:	2b00      	cmp	r3, #0
 8018cfc:	d10a      	bne.n	8018d14 <prvProcessTimerOrBlockTask+0x3c>
 8018cfe:	687a      	ldr	r2, [r7, #4]
 8018d00:	68fb      	ldr	r3, [r7, #12]
 8018d02:	429a      	cmp	r2, r3
 8018d04:	d806      	bhi.n	8018d14 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8018d06:	f7ff f9c1 	bl	801808c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8018d0a:	68f9      	ldr	r1, [r7, #12]
 8018d0c:	6878      	ldr	r0, [r7, #4]
 8018d0e:	f7ff ff85 	bl	8018c1c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8018d12:	e024      	b.n	8018d5e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8018d14:	683b      	ldr	r3, [r7, #0]
 8018d16:	2b00      	cmp	r3, #0
 8018d18:	d008      	beq.n	8018d2c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8018d1a:	4b13      	ldr	r3, [pc, #76]	; (8018d68 <prvProcessTimerOrBlockTask+0x90>)
 8018d1c:	681b      	ldr	r3, [r3, #0]
 8018d1e:	681b      	ldr	r3, [r3, #0]
 8018d20:	2b00      	cmp	r3, #0
 8018d22:	d101      	bne.n	8018d28 <prvProcessTimerOrBlockTask+0x50>
 8018d24:	2301      	movs	r3, #1
 8018d26:	e000      	b.n	8018d2a <prvProcessTimerOrBlockTask+0x52>
 8018d28:	2300      	movs	r3, #0
 8018d2a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8018d2c:	4b0f      	ldr	r3, [pc, #60]	; (8018d6c <prvProcessTimerOrBlockTask+0x94>)
 8018d2e:	6818      	ldr	r0, [r3, #0]
 8018d30:	687a      	ldr	r2, [r7, #4]
 8018d32:	68fb      	ldr	r3, [r7, #12]
 8018d34:	1ad3      	subs	r3, r2, r3
 8018d36:	683a      	ldr	r2, [r7, #0]
 8018d38:	4619      	mov	r1, r3
 8018d3a:	f7fe fe55 	bl	80179e8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8018d3e:	f7ff f9a5 	bl	801808c <xTaskResumeAll>
 8018d42:	4603      	mov	r3, r0
 8018d44:	2b00      	cmp	r3, #0
 8018d46:	d10a      	bne.n	8018d5e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8018d48:	4b09      	ldr	r3, [pc, #36]	; (8018d70 <prvProcessTimerOrBlockTask+0x98>)
 8018d4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018d4e:	601a      	str	r2, [r3, #0]
 8018d50:	f3bf 8f4f 	dsb	sy
 8018d54:	f3bf 8f6f 	isb	sy
}
 8018d58:	e001      	b.n	8018d5e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8018d5a:	f7ff f997 	bl	801808c <xTaskResumeAll>
}
 8018d5e:	bf00      	nop
 8018d60:	3710      	adds	r7, #16
 8018d62:	46bd      	mov	sp, r7
 8018d64:	bd80      	pop	{r7, pc}
 8018d66:	bf00      	nop
 8018d68:	200024c8 	.word	0x200024c8
 8018d6c:	200024cc 	.word	0x200024cc
 8018d70:	e000ed04 	.word	0xe000ed04

08018d74 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8018d74:	b480      	push	{r7}
 8018d76:	b085      	sub	sp, #20
 8018d78:	af00      	add	r7, sp, #0
 8018d7a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8018d7c:	4b0e      	ldr	r3, [pc, #56]	; (8018db8 <prvGetNextExpireTime+0x44>)
 8018d7e:	681b      	ldr	r3, [r3, #0]
 8018d80:	681b      	ldr	r3, [r3, #0]
 8018d82:	2b00      	cmp	r3, #0
 8018d84:	d101      	bne.n	8018d8a <prvGetNextExpireTime+0x16>
 8018d86:	2201      	movs	r2, #1
 8018d88:	e000      	b.n	8018d8c <prvGetNextExpireTime+0x18>
 8018d8a:	2200      	movs	r2, #0
 8018d8c:	687b      	ldr	r3, [r7, #4]
 8018d8e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8018d90:	687b      	ldr	r3, [r7, #4]
 8018d92:	681b      	ldr	r3, [r3, #0]
 8018d94:	2b00      	cmp	r3, #0
 8018d96:	d105      	bne.n	8018da4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8018d98:	4b07      	ldr	r3, [pc, #28]	; (8018db8 <prvGetNextExpireTime+0x44>)
 8018d9a:	681b      	ldr	r3, [r3, #0]
 8018d9c:	68db      	ldr	r3, [r3, #12]
 8018d9e:	681b      	ldr	r3, [r3, #0]
 8018da0:	60fb      	str	r3, [r7, #12]
 8018da2:	e001      	b.n	8018da8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8018da4:	2300      	movs	r3, #0
 8018da6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8018da8:	68fb      	ldr	r3, [r7, #12]
}
 8018daa:	4618      	mov	r0, r3
 8018dac:	3714      	adds	r7, #20
 8018dae:	46bd      	mov	sp, r7
 8018db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018db4:	4770      	bx	lr
 8018db6:	bf00      	nop
 8018db8:	200024c4 	.word	0x200024c4

08018dbc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8018dbc:	b580      	push	{r7, lr}
 8018dbe:	b084      	sub	sp, #16
 8018dc0:	af00      	add	r7, sp, #0
 8018dc2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8018dc4:	f7ff fa04 	bl	80181d0 <xTaskGetTickCount>
 8018dc8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8018dca:	4b0b      	ldr	r3, [pc, #44]	; (8018df8 <prvSampleTimeNow+0x3c>)
 8018dcc:	681b      	ldr	r3, [r3, #0]
 8018dce:	68fa      	ldr	r2, [r7, #12]
 8018dd0:	429a      	cmp	r2, r3
 8018dd2:	d205      	bcs.n	8018de0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8018dd4:	f000 f936 	bl	8019044 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8018dd8:	687b      	ldr	r3, [r7, #4]
 8018dda:	2201      	movs	r2, #1
 8018ddc:	601a      	str	r2, [r3, #0]
 8018dde:	e002      	b.n	8018de6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8018de0:	687b      	ldr	r3, [r7, #4]
 8018de2:	2200      	movs	r2, #0
 8018de4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8018de6:	4a04      	ldr	r2, [pc, #16]	; (8018df8 <prvSampleTimeNow+0x3c>)
 8018de8:	68fb      	ldr	r3, [r7, #12]
 8018dea:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8018dec:	68fb      	ldr	r3, [r7, #12]
}
 8018dee:	4618      	mov	r0, r3
 8018df0:	3710      	adds	r7, #16
 8018df2:	46bd      	mov	sp, r7
 8018df4:	bd80      	pop	{r7, pc}
 8018df6:	bf00      	nop
 8018df8:	200024d4 	.word	0x200024d4

08018dfc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8018dfc:	b580      	push	{r7, lr}
 8018dfe:	b086      	sub	sp, #24
 8018e00:	af00      	add	r7, sp, #0
 8018e02:	60f8      	str	r0, [r7, #12]
 8018e04:	60b9      	str	r1, [r7, #8]
 8018e06:	607a      	str	r2, [r7, #4]
 8018e08:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8018e0a:	2300      	movs	r3, #0
 8018e0c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8018e0e:	68fb      	ldr	r3, [r7, #12]
 8018e10:	68ba      	ldr	r2, [r7, #8]
 8018e12:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8018e14:	68fb      	ldr	r3, [r7, #12]
 8018e16:	68fa      	ldr	r2, [r7, #12]
 8018e18:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8018e1a:	68ba      	ldr	r2, [r7, #8]
 8018e1c:	687b      	ldr	r3, [r7, #4]
 8018e1e:	429a      	cmp	r2, r3
 8018e20:	d812      	bhi.n	8018e48 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018e22:	687a      	ldr	r2, [r7, #4]
 8018e24:	683b      	ldr	r3, [r7, #0]
 8018e26:	1ad2      	subs	r2, r2, r3
 8018e28:	68fb      	ldr	r3, [r7, #12]
 8018e2a:	699b      	ldr	r3, [r3, #24]
 8018e2c:	429a      	cmp	r2, r3
 8018e2e:	d302      	bcc.n	8018e36 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8018e30:	2301      	movs	r3, #1
 8018e32:	617b      	str	r3, [r7, #20]
 8018e34:	e01b      	b.n	8018e6e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8018e36:	4b10      	ldr	r3, [pc, #64]	; (8018e78 <prvInsertTimerInActiveList+0x7c>)
 8018e38:	681a      	ldr	r2, [r3, #0]
 8018e3a:	68fb      	ldr	r3, [r7, #12]
 8018e3c:	3304      	adds	r3, #4
 8018e3e:	4619      	mov	r1, r3
 8018e40:	4610      	mov	r0, r2
 8018e42:	f7fd ff0e 	bl	8016c62 <vListInsert>
 8018e46:	e012      	b.n	8018e6e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8018e48:	687a      	ldr	r2, [r7, #4]
 8018e4a:	683b      	ldr	r3, [r7, #0]
 8018e4c:	429a      	cmp	r2, r3
 8018e4e:	d206      	bcs.n	8018e5e <prvInsertTimerInActiveList+0x62>
 8018e50:	68ba      	ldr	r2, [r7, #8]
 8018e52:	683b      	ldr	r3, [r7, #0]
 8018e54:	429a      	cmp	r2, r3
 8018e56:	d302      	bcc.n	8018e5e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8018e58:	2301      	movs	r3, #1
 8018e5a:	617b      	str	r3, [r7, #20]
 8018e5c:	e007      	b.n	8018e6e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8018e5e:	4b07      	ldr	r3, [pc, #28]	; (8018e7c <prvInsertTimerInActiveList+0x80>)
 8018e60:	681a      	ldr	r2, [r3, #0]
 8018e62:	68fb      	ldr	r3, [r7, #12]
 8018e64:	3304      	adds	r3, #4
 8018e66:	4619      	mov	r1, r3
 8018e68:	4610      	mov	r0, r2
 8018e6a:	f7fd fefa 	bl	8016c62 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8018e6e:	697b      	ldr	r3, [r7, #20]
}
 8018e70:	4618      	mov	r0, r3
 8018e72:	3718      	adds	r7, #24
 8018e74:	46bd      	mov	sp, r7
 8018e76:	bd80      	pop	{r7, pc}
 8018e78:	200024c8 	.word	0x200024c8
 8018e7c:	200024c4 	.word	0x200024c4

08018e80 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8018e80:	b580      	push	{r7, lr}
 8018e82:	b08e      	sub	sp, #56	; 0x38
 8018e84:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8018e86:	e0ca      	b.n	801901e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8018e88:	687b      	ldr	r3, [r7, #4]
 8018e8a:	2b00      	cmp	r3, #0
 8018e8c:	da18      	bge.n	8018ec0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8018e8e:	1d3b      	adds	r3, r7, #4
 8018e90:	3304      	adds	r3, #4
 8018e92:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8018e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018e96:	2b00      	cmp	r3, #0
 8018e98:	d10a      	bne.n	8018eb0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8018e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018e9e:	f383 8811 	msr	BASEPRI, r3
 8018ea2:	f3bf 8f6f 	isb	sy
 8018ea6:	f3bf 8f4f 	dsb	sy
 8018eaa:	61fb      	str	r3, [r7, #28]
}
 8018eac:	bf00      	nop
 8018eae:	e7fe      	b.n	8018eae <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8018eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018eb2:	681b      	ldr	r3, [r3, #0]
 8018eb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018eb6:	6850      	ldr	r0, [r2, #4]
 8018eb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018eba:	6892      	ldr	r2, [r2, #8]
 8018ebc:	4611      	mov	r1, r2
 8018ebe:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8018ec0:	687b      	ldr	r3, [r7, #4]
 8018ec2:	2b00      	cmp	r3, #0
 8018ec4:	f2c0 80aa 	blt.w	801901c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8018ec8:	68fb      	ldr	r3, [r7, #12]
 8018eca:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8018ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ece:	695b      	ldr	r3, [r3, #20]
 8018ed0:	2b00      	cmp	r3, #0
 8018ed2:	d004      	beq.n	8018ede <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8018ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ed6:	3304      	adds	r3, #4
 8018ed8:	4618      	mov	r0, r3
 8018eda:	f7fd fefb 	bl	8016cd4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8018ede:	463b      	mov	r3, r7
 8018ee0:	4618      	mov	r0, r3
 8018ee2:	f7ff ff6b 	bl	8018dbc <prvSampleTimeNow>
 8018ee6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8018ee8:	687b      	ldr	r3, [r7, #4]
 8018eea:	2b09      	cmp	r3, #9
 8018eec:	f200 8097 	bhi.w	801901e <prvProcessReceivedCommands+0x19e>
 8018ef0:	a201      	add	r2, pc, #4	; (adr r2, 8018ef8 <prvProcessReceivedCommands+0x78>)
 8018ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018ef6:	bf00      	nop
 8018ef8:	08018f21 	.word	0x08018f21
 8018efc:	08018f21 	.word	0x08018f21
 8018f00:	08018f21 	.word	0x08018f21
 8018f04:	08018f95 	.word	0x08018f95
 8018f08:	08018fa9 	.word	0x08018fa9
 8018f0c:	08018ff3 	.word	0x08018ff3
 8018f10:	08018f21 	.word	0x08018f21
 8018f14:	08018f21 	.word	0x08018f21
 8018f18:	08018f95 	.word	0x08018f95
 8018f1c:	08018fa9 	.word	0x08018fa9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8018f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018f22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018f26:	f043 0301 	orr.w	r3, r3, #1
 8018f2a:	b2da      	uxtb	r2, r3
 8018f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018f2e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8018f32:	68ba      	ldr	r2, [r7, #8]
 8018f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018f36:	699b      	ldr	r3, [r3, #24]
 8018f38:	18d1      	adds	r1, r2, r3
 8018f3a:	68bb      	ldr	r3, [r7, #8]
 8018f3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018f3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018f40:	f7ff ff5c 	bl	8018dfc <prvInsertTimerInActiveList>
 8018f44:	4603      	mov	r3, r0
 8018f46:	2b00      	cmp	r3, #0
 8018f48:	d069      	beq.n	801901e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8018f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018f4c:	6a1b      	ldr	r3, [r3, #32]
 8018f4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018f50:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8018f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018f54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018f58:	f003 0304 	and.w	r3, r3, #4
 8018f5c:	2b00      	cmp	r3, #0
 8018f5e:	d05e      	beq.n	801901e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8018f60:	68ba      	ldr	r2, [r7, #8]
 8018f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018f64:	699b      	ldr	r3, [r3, #24]
 8018f66:	441a      	add	r2, r3
 8018f68:	2300      	movs	r3, #0
 8018f6a:	9300      	str	r3, [sp, #0]
 8018f6c:	2300      	movs	r3, #0
 8018f6e:	2100      	movs	r1, #0
 8018f70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018f72:	f7ff fe05 	bl	8018b80 <xTimerGenericCommand>
 8018f76:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8018f78:	6a3b      	ldr	r3, [r7, #32]
 8018f7a:	2b00      	cmp	r3, #0
 8018f7c:	d14f      	bne.n	801901e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8018f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018f82:	f383 8811 	msr	BASEPRI, r3
 8018f86:	f3bf 8f6f 	isb	sy
 8018f8a:	f3bf 8f4f 	dsb	sy
 8018f8e:	61bb      	str	r3, [r7, #24]
}
 8018f90:	bf00      	nop
 8018f92:	e7fe      	b.n	8018f92 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8018f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018f96:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018f9a:	f023 0301 	bic.w	r3, r3, #1
 8018f9e:	b2da      	uxtb	r2, r3
 8018fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018fa2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8018fa6:	e03a      	b.n	801901e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8018fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018faa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018fae:	f043 0301 	orr.w	r3, r3, #1
 8018fb2:	b2da      	uxtb	r2, r3
 8018fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018fb6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8018fba:	68ba      	ldr	r2, [r7, #8]
 8018fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018fbe:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8018fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018fc2:	699b      	ldr	r3, [r3, #24]
 8018fc4:	2b00      	cmp	r3, #0
 8018fc6:	d10a      	bne.n	8018fde <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8018fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018fcc:	f383 8811 	msr	BASEPRI, r3
 8018fd0:	f3bf 8f6f 	isb	sy
 8018fd4:	f3bf 8f4f 	dsb	sy
 8018fd8:	617b      	str	r3, [r7, #20]
}
 8018fda:	bf00      	nop
 8018fdc:	e7fe      	b.n	8018fdc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8018fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018fe0:	699a      	ldr	r2, [r3, #24]
 8018fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018fe4:	18d1      	adds	r1, r2, r3
 8018fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018fe8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018fea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018fec:	f7ff ff06 	bl	8018dfc <prvInsertTimerInActiveList>
					break;
 8018ff0:	e015      	b.n	801901e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8018ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ff4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018ff8:	f003 0302 	and.w	r3, r3, #2
 8018ffc:	2b00      	cmp	r3, #0
 8018ffe:	d103      	bne.n	8019008 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8019000:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019002:	f000 fbdd 	bl	80197c0 <vPortFree>
 8019006:	e00a      	b.n	801901e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8019008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801900a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801900e:	f023 0301 	bic.w	r3, r3, #1
 8019012:	b2da      	uxtb	r2, r3
 8019014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019016:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801901a:	e000      	b.n	801901e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 801901c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801901e:	4b08      	ldr	r3, [pc, #32]	; (8019040 <prvProcessReceivedCommands+0x1c0>)
 8019020:	681b      	ldr	r3, [r3, #0]
 8019022:	1d39      	adds	r1, r7, #4
 8019024:	2200      	movs	r2, #0
 8019026:	4618      	mov	r0, r3
 8019028:	f7fe f998 	bl	801735c <xQueueReceive>
 801902c:	4603      	mov	r3, r0
 801902e:	2b00      	cmp	r3, #0
 8019030:	f47f af2a 	bne.w	8018e88 <prvProcessReceivedCommands+0x8>
	}
}
 8019034:	bf00      	nop
 8019036:	bf00      	nop
 8019038:	3730      	adds	r7, #48	; 0x30
 801903a:	46bd      	mov	sp, r7
 801903c:	bd80      	pop	{r7, pc}
 801903e:	bf00      	nop
 8019040:	200024cc 	.word	0x200024cc

08019044 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8019044:	b580      	push	{r7, lr}
 8019046:	b088      	sub	sp, #32
 8019048:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801904a:	e048      	b.n	80190de <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801904c:	4b2d      	ldr	r3, [pc, #180]	; (8019104 <prvSwitchTimerLists+0xc0>)
 801904e:	681b      	ldr	r3, [r3, #0]
 8019050:	68db      	ldr	r3, [r3, #12]
 8019052:	681b      	ldr	r3, [r3, #0]
 8019054:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019056:	4b2b      	ldr	r3, [pc, #172]	; (8019104 <prvSwitchTimerLists+0xc0>)
 8019058:	681b      	ldr	r3, [r3, #0]
 801905a:	68db      	ldr	r3, [r3, #12]
 801905c:	68db      	ldr	r3, [r3, #12]
 801905e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8019060:	68fb      	ldr	r3, [r7, #12]
 8019062:	3304      	adds	r3, #4
 8019064:	4618      	mov	r0, r3
 8019066:	f7fd fe35 	bl	8016cd4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801906a:	68fb      	ldr	r3, [r7, #12]
 801906c:	6a1b      	ldr	r3, [r3, #32]
 801906e:	68f8      	ldr	r0, [r7, #12]
 8019070:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8019072:	68fb      	ldr	r3, [r7, #12]
 8019074:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019078:	f003 0304 	and.w	r3, r3, #4
 801907c:	2b00      	cmp	r3, #0
 801907e:	d02e      	beq.n	80190de <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8019080:	68fb      	ldr	r3, [r7, #12]
 8019082:	699b      	ldr	r3, [r3, #24]
 8019084:	693a      	ldr	r2, [r7, #16]
 8019086:	4413      	add	r3, r2
 8019088:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801908a:	68ba      	ldr	r2, [r7, #8]
 801908c:	693b      	ldr	r3, [r7, #16]
 801908e:	429a      	cmp	r2, r3
 8019090:	d90e      	bls.n	80190b0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8019092:	68fb      	ldr	r3, [r7, #12]
 8019094:	68ba      	ldr	r2, [r7, #8]
 8019096:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8019098:	68fb      	ldr	r3, [r7, #12]
 801909a:	68fa      	ldr	r2, [r7, #12]
 801909c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801909e:	4b19      	ldr	r3, [pc, #100]	; (8019104 <prvSwitchTimerLists+0xc0>)
 80190a0:	681a      	ldr	r2, [r3, #0]
 80190a2:	68fb      	ldr	r3, [r7, #12]
 80190a4:	3304      	adds	r3, #4
 80190a6:	4619      	mov	r1, r3
 80190a8:	4610      	mov	r0, r2
 80190aa:	f7fd fdda 	bl	8016c62 <vListInsert>
 80190ae:	e016      	b.n	80190de <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80190b0:	2300      	movs	r3, #0
 80190b2:	9300      	str	r3, [sp, #0]
 80190b4:	2300      	movs	r3, #0
 80190b6:	693a      	ldr	r2, [r7, #16]
 80190b8:	2100      	movs	r1, #0
 80190ba:	68f8      	ldr	r0, [r7, #12]
 80190bc:	f7ff fd60 	bl	8018b80 <xTimerGenericCommand>
 80190c0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80190c2:	687b      	ldr	r3, [r7, #4]
 80190c4:	2b00      	cmp	r3, #0
 80190c6:	d10a      	bne.n	80190de <prvSwitchTimerLists+0x9a>
	__asm volatile
 80190c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80190cc:	f383 8811 	msr	BASEPRI, r3
 80190d0:	f3bf 8f6f 	isb	sy
 80190d4:	f3bf 8f4f 	dsb	sy
 80190d8:	603b      	str	r3, [r7, #0]
}
 80190da:	bf00      	nop
 80190dc:	e7fe      	b.n	80190dc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80190de:	4b09      	ldr	r3, [pc, #36]	; (8019104 <prvSwitchTimerLists+0xc0>)
 80190e0:	681b      	ldr	r3, [r3, #0]
 80190e2:	681b      	ldr	r3, [r3, #0]
 80190e4:	2b00      	cmp	r3, #0
 80190e6:	d1b1      	bne.n	801904c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80190e8:	4b06      	ldr	r3, [pc, #24]	; (8019104 <prvSwitchTimerLists+0xc0>)
 80190ea:	681b      	ldr	r3, [r3, #0]
 80190ec:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80190ee:	4b06      	ldr	r3, [pc, #24]	; (8019108 <prvSwitchTimerLists+0xc4>)
 80190f0:	681b      	ldr	r3, [r3, #0]
 80190f2:	4a04      	ldr	r2, [pc, #16]	; (8019104 <prvSwitchTimerLists+0xc0>)
 80190f4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80190f6:	4a04      	ldr	r2, [pc, #16]	; (8019108 <prvSwitchTimerLists+0xc4>)
 80190f8:	697b      	ldr	r3, [r7, #20]
 80190fa:	6013      	str	r3, [r2, #0]
}
 80190fc:	bf00      	nop
 80190fe:	3718      	adds	r7, #24
 8019100:	46bd      	mov	sp, r7
 8019102:	bd80      	pop	{r7, pc}
 8019104:	200024c4 	.word	0x200024c4
 8019108:	200024c8 	.word	0x200024c8

0801910c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801910c:	b580      	push	{r7, lr}
 801910e:	b082      	sub	sp, #8
 8019110:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8019112:	f000 f967 	bl	80193e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8019116:	4b15      	ldr	r3, [pc, #84]	; (801916c <prvCheckForValidListAndQueue+0x60>)
 8019118:	681b      	ldr	r3, [r3, #0]
 801911a:	2b00      	cmp	r3, #0
 801911c:	d120      	bne.n	8019160 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801911e:	4814      	ldr	r0, [pc, #80]	; (8019170 <prvCheckForValidListAndQueue+0x64>)
 8019120:	f7fd fd4e 	bl	8016bc0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8019124:	4813      	ldr	r0, [pc, #76]	; (8019174 <prvCheckForValidListAndQueue+0x68>)
 8019126:	f7fd fd4b 	bl	8016bc0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801912a:	4b13      	ldr	r3, [pc, #76]	; (8019178 <prvCheckForValidListAndQueue+0x6c>)
 801912c:	4a10      	ldr	r2, [pc, #64]	; (8019170 <prvCheckForValidListAndQueue+0x64>)
 801912e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8019130:	4b12      	ldr	r3, [pc, #72]	; (801917c <prvCheckForValidListAndQueue+0x70>)
 8019132:	4a10      	ldr	r2, [pc, #64]	; (8019174 <prvCheckForValidListAndQueue+0x68>)
 8019134:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8019136:	2300      	movs	r3, #0
 8019138:	9300      	str	r3, [sp, #0]
 801913a:	4b11      	ldr	r3, [pc, #68]	; (8019180 <prvCheckForValidListAndQueue+0x74>)
 801913c:	4a11      	ldr	r2, [pc, #68]	; (8019184 <prvCheckForValidListAndQueue+0x78>)
 801913e:	2110      	movs	r1, #16
 8019140:	200a      	movs	r0, #10
 8019142:	f7fd fe59 	bl	8016df8 <xQueueGenericCreateStatic>
 8019146:	4603      	mov	r3, r0
 8019148:	4a08      	ldr	r2, [pc, #32]	; (801916c <prvCheckForValidListAndQueue+0x60>)
 801914a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801914c:	4b07      	ldr	r3, [pc, #28]	; (801916c <prvCheckForValidListAndQueue+0x60>)
 801914e:	681b      	ldr	r3, [r3, #0]
 8019150:	2b00      	cmp	r3, #0
 8019152:	d005      	beq.n	8019160 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8019154:	4b05      	ldr	r3, [pc, #20]	; (801916c <prvCheckForValidListAndQueue+0x60>)
 8019156:	681b      	ldr	r3, [r3, #0]
 8019158:	490b      	ldr	r1, [pc, #44]	; (8019188 <prvCheckForValidListAndQueue+0x7c>)
 801915a:	4618      	mov	r0, r3
 801915c:	f7fe fc12 	bl	8017984 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8019160:	f000 f970 	bl	8019444 <vPortExitCritical>
}
 8019164:	bf00      	nop
 8019166:	46bd      	mov	sp, r7
 8019168:	bd80      	pop	{r7, pc}
 801916a:	bf00      	nop
 801916c:	200024cc 	.word	0x200024cc
 8019170:	2000249c 	.word	0x2000249c
 8019174:	200024b0 	.word	0x200024b0
 8019178:	200024c4 	.word	0x200024c4
 801917c:	200024c8 	.word	0x200024c8
 8019180:	20002578 	.word	0x20002578
 8019184:	200024d8 	.word	0x200024d8
 8019188:	0801bd94 	.word	0x0801bd94

0801918c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801918c:	b480      	push	{r7}
 801918e:	b085      	sub	sp, #20
 8019190:	af00      	add	r7, sp, #0
 8019192:	60f8      	str	r0, [r7, #12]
 8019194:	60b9      	str	r1, [r7, #8]
 8019196:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8019198:	68fb      	ldr	r3, [r7, #12]
 801919a:	3b04      	subs	r3, #4
 801919c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801919e:	68fb      	ldr	r3, [r7, #12]
 80191a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80191a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80191a6:	68fb      	ldr	r3, [r7, #12]
 80191a8:	3b04      	subs	r3, #4
 80191aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80191ac:	68bb      	ldr	r3, [r7, #8]
 80191ae:	f023 0201 	bic.w	r2, r3, #1
 80191b2:	68fb      	ldr	r3, [r7, #12]
 80191b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80191b6:	68fb      	ldr	r3, [r7, #12]
 80191b8:	3b04      	subs	r3, #4
 80191ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80191bc:	4a0c      	ldr	r2, [pc, #48]	; (80191f0 <pxPortInitialiseStack+0x64>)
 80191be:	68fb      	ldr	r3, [r7, #12]
 80191c0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80191c2:	68fb      	ldr	r3, [r7, #12]
 80191c4:	3b14      	subs	r3, #20
 80191c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80191c8:	687a      	ldr	r2, [r7, #4]
 80191ca:	68fb      	ldr	r3, [r7, #12]
 80191cc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80191ce:	68fb      	ldr	r3, [r7, #12]
 80191d0:	3b04      	subs	r3, #4
 80191d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80191d4:	68fb      	ldr	r3, [r7, #12]
 80191d6:	f06f 0202 	mvn.w	r2, #2
 80191da:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80191dc:	68fb      	ldr	r3, [r7, #12]
 80191de:	3b20      	subs	r3, #32
 80191e0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80191e2:	68fb      	ldr	r3, [r7, #12]
}
 80191e4:	4618      	mov	r0, r3
 80191e6:	3714      	adds	r7, #20
 80191e8:	46bd      	mov	sp, r7
 80191ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191ee:	4770      	bx	lr
 80191f0:	080191f5 	.word	0x080191f5

080191f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80191f4:	b480      	push	{r7}
 80191f6:	b085      	sub	sp, #20
 80191f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80191fa:	2300      	movs	r3, #0
 80191fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80191fe:	4b12      	ldr	r3, [pc, #72]	; (8019248 <prvTaskExitError+0x54>)
 8019200:	681b      	ldr	r3, [r3, #0]
 8019202:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019206:	d00a      	beq.n	801921e <prvTaskExitError+0x2a>
	__asm volatile
 8019208:	f04f 0350 	mov.w	r3, #80	; 0x50
 801920c:	f383 8811 	msr	BASEPRI, r3
 8019210:	f3bf 8f6f 	isb	sy
 8019214:	f3bf 8f4f 	dsb	sy
 8019218:	60fb      	str	r3, [r7, #12]
}
 801921a:	bf00      	nop
 801921c:	e7fe      	b.n	801921c <prvTaskExitError+0x28>
	__asm volatile
 801921e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019222:	f383 8811 	msr	BASEPRI, r3
 8019226:	f3bf 8f6f 	isb	sy
 801922a:	f3bf 8f4f 	dsb	sy
 801922e:	60bb      	str	r3, [r7, #8]
}
 8019230:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8019232:	bf00      	nop
 8019234:	687b      	ldr	r3, [r7, #4]
 8019236:	2b00      	cmp	r3, #0
 8019238:	d0fc      	beq.n	8019234 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801923a:	bf00      	nop
 801923c:	bf00      	nop
 801923e:	3714      	adds	r7, #20
 8019240:	46bd      	mov	sp, r7
 8019242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019246:	4770      	bx	lr
 8019248:	20001440 	.word	0x20001440
 801924c:	00000000 	.word	0x00000000

08019250 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8019250:	4b07      	ldr	r3, [pc, #28]	; (8019270 <pxCurrentTCBConst2>)
 8019252:	6819      	ldr	r1, [r3, #0]
 8019254:	6808      	ldr	r0, [r1, #0]
 8019256:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801925a:	f380 8809 	msr	PSP, r0
 801925e:	f3bf 8f6f 	isb	sy
 8019262:	f04f 0000 	mov.w	r0, #0
 8019266:	f380 8811 	msr	BASEPRI, r0
 801926a:	4770      	bx	lr
 801926c:	f3af 8000 	nop.w

08019270 <pxCurrentTCBConst2>:
 8019270:	20001f9c 	.word	0x20001f9c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8019274:	bf00      	nop
 8019276:	bf00      	nop

08019278 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8019278:	4808      	ldr	r0, [pc, #32]	; (801929c <prvPortStartFirstTask+0x24>)
 801927a:	6800      	ldr	r0, [r0, #0]
 801927c:	6800      	ldr	r0, [r0, #0]
 801927e:	f380 8808 	msr	MSP, r0
 8019282:	f04f 0000 	mov.w	r0, #0
 8019286:	f380 8814 	msr	CONTROL, r0
 801928a:	b662      	cpsie	i
 801928c:	b661      	cpsie	f
 801928e:	f3bf 8f4f 	dsb	sy
 8019292:	f3bf 8f6f 	isb	sy
 8019296:	df00      	svc	0
 8019298:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801929a:	bf00      	nop
 801929c:	e000ed08 	.word	0xe000ed08

080192a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80192a0:	b580      	push	{r7, lr}
 80192a2:	b086      	sub	sp, #24
 80192a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80192a6:	4b46      	ldr	r3, [pc, #280]	; (80193c0 <xPortStartScheduler+0x120>)
 80192a8:	681b      	ldr	r3, [r3, #0]
 80192aa:	4a46      	ldr	r2, [pc, #280]	; (80193c4 <xPortStartScheduler+0x124>)
 80192ac:	4293      	cmp	r3, r2
 80192ae:	d10a      	bne.n	80192c6 <xPortStartScheduler+0x26>
	__asm volatile
 80192b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80192b4:	f383 8811 	msr	BASEPRI, r3
 80192b8:	f3bf 8f6f 	isb	sy
 80192bc:	f3bf 8f4f 	dsb	sy
 80192c0:	613b      	str	r3, [r7, #16]
}
 80192c2:	bf00      	nop
 80192c4:	e7fe      	b.n	80192c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80192c6:	4b3e      	ldr	r3, [pc, #248]	; (80193c0 <xPortStartScheduler+0x120>)
 80192c8:	681b      	ldr	r3, [r3, #0]
 80192ca:	4a3f      	ldr	r2, [pc, #252]	; (80193c8 <xPortStartScheduler+0x128>)
 80192cc:	4293      	cmp	r3, r2
 80192ce:	d10a      	bne.n	80192e6 <xPortStartScheduler+0x46>
	__asm volatile
 80192d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80192d4:	f383 8811 	msr	BASEPRI, r3
 80192d8:	f3bf 8f6f 	isb	sy
 80192dc:	f3bf 8f4f 	dsb	sy
 80192e0:	60fb      	str	r3, [r7, #12]
}
 80192e2:	bf00      	nop
 80192e4:	e7fe      	b.n	80192e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80192e6:	4b39      	ldr	r3, [pc, #228]	; (80193cc <xPortStartScheduler+0x12c>)
 80192e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80192ea:	697b      	ldr	r3, [r7, #20]
 80192ec:	781b      	ldrb	r3, [r3, #0]
 80192ee:	b2db      	uxtb	r3, r3
 80192f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80192f2:	697b      	ldr	r3, [r7, #20]
 80192f4:	22ff      	movs	r2, #255	; 0xff
 80192f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80192f8:	697b      	ldr	r3, [r7, #20]
 80192fa:	781b      	ldrb	r3, [r3, #0]
 80192fc:	b2db      	uxtb	r3, r3
 80192fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8019300:	78fb      	ldrb	r3, [r7, #3]
 8019302:	b2db      	uxtb	r3, r3
 8019304:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8019308:	b2da      	uxtb	r2, r3
 801930a:	4b31      	ldr	r3, [pc, #196]	; (80193d0 <xPortStartScheduler+0x130>)
 801930c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801930e:	4b31      	ldr	r3, [pc, #196]	; (80193d4 <xPortStartScheduler+0x134>)
 8019310:	2207      	movs	r2, #7
 8019312:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8019314:	e009      	b.n	801932a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8019316:	4b2f      	ldr	r3, [pc, #188]	; (80193d4 <xPortStartScheduler+0x134>)
 8019318:	681b      	ldr	r3, [r3, #0]
 801931a:	3b01      	subs	r3, #1
 801931c:	4a2d      	ldr	r2, [pc, #180]	; (80193d4 <xPortStartScheduler+0x134>)
 801931e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8019320:	78fb      	ldrb	r3, [r7, #3]
 8019322:	b2db      	uxtb	r3, r3
 8019324:	005b      	lsls	r3, r3, #1
 8019326:	b2db      	uxtb	r3, r3
 8019328:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801932a:	78fb      	ldrb	r3, [r7, #3]
 801932c:	b2db      	uxtb	r3, r3
 801932e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019332:	2b80      	cmp	r3, #128	; 0x80
 8019334:	d0ef      	beq.n	8019316 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8019336:	4b27      	ldr	r3, [pc, #156]	; (80193d4 <xPortStartScheduler+0x134>)
 8019338:	681b      	ldr	r3, [r3, #0]
 801933a:	f1c3 0307 	rsb	r3, r3, #7
 801933e:	2b04      	cmp	r3, #4
 8019340:	d00a      	beq.n	8019358 <xPortStartScheduler+0xb8>
	__asm volatile
 8019342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019346:	f383 8811 	msr	BASEPRI, r3
 801934a:	f3bf 8f6f 	isb	sy
 801934e:	f3bf 8f4f 	dsb	sy
 8019352:	60bb      	str	r3, [r7, #8]
}
 8019354:	bf00      	nop
 8019356:	e7fe      	b.n	8019356 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8019358:	4b1e      	ldr	r3, [pc, #120]	; (80193d4 <xPortStartScheduler+0x134>)
 801935a:	681b      	ldr	r3, [r3, #0]
 801935c:	021b      	lsls	r3, r3, #8
 801935e:	4a1d      	ldr	r2, [pc, #116]	; (80193d4 <xPortStartScheduler+0x134>)
 8019360:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8019362:	4b1c      	ldr	r3, [pc, #112]	; (80193d4 <xPortStartScheduler+0x134>)
 8019364:	681b      	ldr	r3, [r3, #0]
 8019366:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801936a:	4a1a      	ldr	r2, [pc, #104]	; (80193d4 <xPortStartScheduler+0x134>)
 801936c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801936e:	687b      	ldr	r3, [r7, #4]
 8019370:	b2da      	uxtb	r2, r3
 8019372:	697b      	ldr	r3, [r7, #20]
 8019374:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8019376:	4b18      	ldr	r3, [pc, #96]	; (80193d8 <xPortStartScheduler+0x138>)
 8019378:	681b      	ldr	r3, [r3, #0]
 801937a:	4a17      	ldr	r2, [pc, #92]	; (80193d8 <xPortStartScheduler+0x138>)
 801937c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8019380:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8019382:	4b15      	ldr	r3, [pc, #84]	; (80193d8 <xPortStartScheduler+0x138>)
 8019384:	681b      	ldr	r3, [r3, #0]
 8019386:	4a14      	ldr	r2, [pc, #80]	; (80193d8 <xPortStartScheduler+0x138>)
 8019388:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801938c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801938e:	f000 f8dd 	bl	801954c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8019392:	4b12      	ldr	r3, [pc, #72]	; (80193dc <xPortStartScheduler+0x13c>)
 8019394:	2200      	movs	r2, #0
 8019396:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8019398:	f000 f8fc 	bl	8019594 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801939c:	4b10      	ldr	r3, [pc, #64]	; (80193e0 <xPortStartScheduler+0x140>)
 801939e:	681b      	ldr	r3, [r3, #0]
 80193a0:	4a0f      	ldr	r2, [pc, #60]	; (80193e0 <xPortStartScheduler+0x140>)
 80193a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80193a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80193a8:	f7ff ff66 	bl	8019278 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80193ac:	f7fe fff0 	bl	8018390 <vTaskSwitchContext>
	prvTaskExitError();
 80193b0:	f7ff ff20 	bl	80191f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80193b4:	2300      	movs	r3, #0
}
 80193b6:	4618      	mov	r0, r3
 80193b8:	3718      	adds	r7, #24
 80193ba:	46bd      	mov	sp, r7
 80193bc:	bd80      	pop	{r7, pc}
 80193be:	bf00      	nop
 80193c0:	e000ed00 	.word	0xe000ed00
 80193c4:	410fc271 	.word	0x410fc271
 80193c8:	410fc270 	.word	0x410fc270
 80193cc:	e000e400 	.word	0xe000e400
 80193d0:	200025c8 	.word	0x200025c8
 80193d4:	200025cc 	.word	0x200025cc
 80193d8:	e000ed20 	.word	0xe000ed20
 80193dc:	20001440 	.word	0x20001440
 80193e0:	e000ef34 	.word	0xe000ef34

080193e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80193e4:	b480      	push	{r7}
 80193e6:	b083      	sub	sp, #12
 80193e8:	af00      	add	r7, sp, #0
	__asm volatile
 80193ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80193ee:	f383 8811 	msr	BASEPRI, r3
 80193f2:	f3bf 8f6f 	isb	sy
 80193f6:	f3bf 8f4f 	dsb	sy
 80193fa:	607b      	str	r3, [r7, #4]
}
 80193fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80193fe:	4b0f      	ldr	r3, [pc, #60]	; (801943c <vPortEnterCritical+0x58>)
 8019400:	681b      	ldr	r3, [r3, #0]
 8019402:	3301      	adds	r3, #1
 8019404:	4a0d      	ldr	r2, [pc, #52]	; (801943c <vPortEnterCritical+0x58>)
 8019406:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8019408:	4b0c      	ldr	r3, [pc, #48]	; (801943c <vPortEnterCritical+0x58>)
 801940a:	681b      	ldr	r3, [r3, #0]
 801940c:	2b01      	cmp	r3, #1
 801940e:	d10f      	bne.n	8019430 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8019410:	4b0b      	ldr	r3, [pc, #44]	; (8019440 <vPortEnterCritical+0x5c>)
 8019412:	681b      	ldr	r3, [r3, #0]
 8019414:	b2db      	uxtb	r3, r3
 8019416:	2b00      	cmp	r3, #0
 8019418:	d00a      	beq.n	8019430 <vPortEnterCritical+0x4c>
	__asm volatile
 801941a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801941e:	f383 8811 	msr	BASEPRI, r3
 8019422:	f3bf 8f6f 	isb	sy
 8019426:	f3bf 8f4f 	dsb	sy
 801942a:	603b      	str	r3, [r7, #0]
}
 801942c:	bf00      	nop
 801942e:	e7fe      	b.n	801942e <vPortEnterCritical+0x4a>
	}
}
 8019430:	bf00      	nop
 8019432:	370c      	adds	r7, #12
 8019434:	46bd      	mov	sp, r7
 8019436:	f85d 7b04 	ldr.w	r7, [sp], #4
 801943a:	4770      	bx	lr
 801943c:	20001440 	.word	0x20001440
 8019440:	e000ed04 	.word	0xe000ed04

08019444 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8019444:	b480      	push	{r7}
 8019446:	b083      	sub	sp, #12
 8019448:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801944a:	4b12      	ldr	r3, [pc, #72]	; (8019494 <vPortExitCritical+0x50>)
 801944c:	681b      	ldr	r3, [r3, #0]
 801944e:	2b00      	cmp	r3, #0
 8019450:	d10a      	bne.n	8019468 <vPortExitCritical+0x24>
	__asm volatile
 8019452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019456:	f383 8811 	msr	BASEPRI, r3
 801945a:	f3bf 8f6f 	isb	sy
 801945e:	f3bf 8f4f 	dsb	sy
 8019462:	607b      	str	r3, [r7, #4]
}
 8019464:	bf00      	nop
 8019466:	e7fe      	b.n	8019466 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8019468:	4b0a      	ldr	r3, [pc, #40]	; (8019494 <vPortExitCritical+0x50>)
 801946a:	681b      	ldr	r3, [r3, #0]
 801946c:	3b01      	subs	r3, #1
 801946e:	4a09      	ldr	r2, [pc, #36]	; (8019494 <vPortExitCritical+0x50>)
 8019470:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8019472:	4b08      	ldr	r3, [pc, #32]	; (8019494 <vPortExitCritical+0x50>)
 8019474:	681b      	ldr	r3, [r3, #0]
 8019476:	2b00      	cmp	r3, #0
 8019478:	d105      	bne.n	8019486 <vPortExitCritical+0x42>
 801947a:	2300      	movs	r3, #0
 801947c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801947e:	683b      	ldr	r3, [r7, #0]
 8019480:	f383 8811 	msr	BASEPRI, r3
}
 8019484:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8019486:	bf00      	nop
 8019488:	370c      	adds	r7, #12
 801948a:	46bd      	mov	sp, r7
 801948c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019490:	4770      	bx	lr
 8019492:	bf00      	nop
 8019494:	20001440 	.word	0x20001440
	...

080194a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80194a0:	f3ef 8009 	mrs	r0, PSP
 80194a4:	f3bf 8f6f 	isb	sy
 80194a8:	4b15      	ldr	r3, [pc, #84]	; (8019500 <pxCurrentTCBConst>)
 80194aa:	681a      	ldr	r2, [r3, #0]
 80194ac:	f01e 0f10 	tst.w	lr, #16
 80194b0:	bf08      	it	eq
 80194b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80194b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80194ba:	6010      	str	r0, [r2, #0]
 80194bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80194c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80194c4:	f380 8811 	msr	BASEPRI, r0
 80194c8:	f3bf 8f4f 	dsb	sy
 80194cc:	f3bf 8f6f 	isb	sy
 80194d0:	f7fe ff5e 	bl	8018390 <vTaskSwitchContext>
 80194d4:	f04f 0000 	mov.w	r0, #0
 80194d8:	f380 8811 	msr	BASEPRI, r0
 80194dc:	bc09      	pop	{r0, r3}
 80194de:	6819      	ldr	r1, [r3, #0]
 80194e0:	6808      	ldr	r0, [r1, #0]
 80194e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80194e6:	f01e 0f10 	tst.w	lr, #16
 80194ea:	bf08      	it	eq
 80194ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80194f0:	f380 8809 	msr	PSP, r0
 80194f4:	f3bf 8f6f 	isb	sy
 80194f8:	4770      	bx	lr
 80194fa:	bf00      	nop
 80194fc:	f3af 8000 	nop.w

08019500 <pxCurrentTCBConst>:
 8019500:	20001f9c 	.word	0x20001f9c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8019504:	bf00      	nop
 8019506:	bf00      	nop

08019508 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8019508:	b580      	push	{r7, lr}
 801950a:	b082      	sub	sp, #8
 801950c:	af00      	add	r7, sp, #0
	__asm volatile
 801950e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019512:	f383 8811 	msr	BASEPRI, r3
 8019516:	f3bf 8f6f 	isb	sy
 801951a:	f3bf 8f4f 	dsb	sy
 801951e:	607b      	str	r3, [r7, #4]
}
 8019520:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8019522:	f7fe fe77 	bl	8018214 <xTaskIncrementTick>
 8019526:	4603      	mov	r3, r0
 8019528:	2b00      	cmp	r3, #0
 801952a:	d003      	beq.n	8019534 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801952c:	4b06      	ldr	r3, [pc, #24]	; (8019548 <xPortSysTickHandler+0x40>)
 801952e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019532:	601a      	str	r2, [r3, #0]
 8019534:	2300      	movs	r3, #0
 8019536:	603b      	str	r3, [r7, #0]
	__asm volatile
 8019538:	683b      	ldr	r3, [r7, #0]
 801953a:	f383 8811 	msr	BASEPRI, r3
}
 801953e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8019540:	bf00      	nop
 8019542:	3708      	adds	r7, #8
 8019544:	46bd      	mov	sp, r7
 8019546:	bd80      	pop	{r7, pc}
 8019548:	e000ed04 	.word	0xe000ed04

0801954c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801954c:	b480      	push	{r7}
 801954e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8019550:	4b0b      	ldr	r3, [pc, #44]	; (8019580 <vPortSetupTimerInterrupt+0x34>)
 8019552:	2200      	movs	r2, #0
 8019554:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8019556:	4b0b      	ldr	r3, [pc, #44]	; (8019584 <vPortSetupTimerInterrupt+0x38>)
 8019558:	2200      	movs	r2, #0
 801955a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801955c:	4b0a      	ldr	r3, [pc, #40]	; (8019588 <vPortSetupTimerInterrupt+0x3c>)
 801955e:	681b      	ldr	r3, [r3, #0]
 8019560:	4a0a      	ldr	r2, [pc, #40]	; (801958c <vPortSetupTimerInterrupt+0x40>)
 8019562:	fba2 2303 	umull	r2, r3, r2, r3
 8019566:	099b      	lsrs	r3, r3, #6
 8019568:	4a09      	ldr	r2, [pc, #36]	; (8019590 <vPortSetupTimerInterrupt+0x44>)
 801956a:	3b01      	subs	r3, #1
 801956c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801956e:	4b04      	ldr	r3, [pc, #16]	; (8019580 <vPortSetupTimerInterrupt+0x34>)
 8019570:	2207      	movs	r2, #7
 8019572:	601a      	str	r2, [r3, #0]
}
 8019574:	bf00      	nop
 8019576:	46bd      	mov	sp, r7
 8019578:	f85d 7b04 	ldr.w	r7, [sp], #4
 801957c:	4770      	bx	lr
 801957e:	bf00      	nop
 8019580:	e000e010 	.word	0xe000e010
 8019584:	e000e018 	.word	0xe000e018
 8019588:	20000084 	.word	0x20000084
 801958c:	10624dd3 	.word	0x10624dd3
 8019590:	e000e014 	.word	0xe000e014

08019594 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8019594:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80195a4 <vPortEnableVFP+0x10>
 8019598:	6801      	ldr	r1, [r0, #0]
 801959a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801959e:	6001      	str	r1, [r0, #0]
 80195a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80195a2:	bf00      	nop
 80195a4:	e000ed88 	.word	0xe000ed88

080195a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80195a8:	b480      	push	{r7}
 80195aa:	b085      	sub	sp, #20
 80195ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80195ae:	f3ef 8305 	mrs	r3, IPSR
 80195b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80195b4:	68fb      	ldr	r3, [r7, #12]
 80195b6:	2b0f      	cmp	r3, #15
 80195b8:	d914      	bls.n	80195e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80195ba:	4a17      	ldr	r2, [pc, #92]	; (8019618 <vPortValidateInterruptPriority+0x70>)
 80195bc:	68fb      	ldr	r3, [r7, #12]
 80195be:	4413      	add	r3, r2
 80195c0:	781b      	ldrb	r3, [r3, #0]
 80195c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80195c4:	4b15      	ldr	r3, [pc, #84]	; (801961c <vPortValidateInterruptPriority+0x74>)
 80195c6:	781b      	ldrb	r3, [r3, #0]
 80195c8:	7afa      	ldrb	r2, [r7, #11]
 80195ca:	429a      	cmp	r2, r3
 80195cc:	d20a      	bcs.n	80195e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80195ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80195d2:	f383 8811 	msr	BASEPRI, r3
 80195d6:	f3bf 8f6f 	isb	sy
 80195da:	f3bf 8f4f 	dsb	sy
 80195de:	607b      	str	r3, [r7, #4]
}
 80195e0:	bf00      	nop
 80195e2:	e7fe      	b.n	80195e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80195e4:	4b0e      	ldr	r3, [pc, #56]	; (8019620 <vPortValidateInterruptPriority+0x78>)
 80195e6:	681b      	ldr	r3, [r3, #0]
 80195e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80195ec:	4b0d      	ldr	r3, [pc, #52]	; (8019624 <vPortValidateInterruptPriority+0x7c>)
 80195ee:	681b      	ldr	r3, [r3, #0]
 80195f0:	429a      	cmp	r2, r3
 80195f2:	d90a      	bls.n	801960a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80195f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80195f8:	f383 8811 	msr	BASEPRI, r3
 80195fc:	f3bf 8f6f 	isb	sy
 8019600:	f3bf 8f4f 	dsb	sy
 8019604:	603b      	str	r3, [r7, #0]
}
 8019606:	bf00      	nop
 8019608:	e7fe      	b.n	8019608 <vPortValidateInterruptPriority+0x60>
	}
 801960a:	bf00      	nop
 801960c:	3714      	adds	r7, #20
 801960e:	46bd      	mov	sp, r7
 8019610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019614:	4770      	bx	lr
 8019616:	bf00      	nop
 8019618:	e000e3f0 	.word	0xe000e3f0
 801961c:	200025c8 	.word	0x200025c8
 8019620:	e000ed0c 	.word	0xe000ed0c
 8019624:	200025cc 	.word	0x200025cc

08019628 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8019628:	b580      	push	{r7, lr}
 801962a:	b08a      	sub	sp, #40	; 0x28
 801962c:	af00      	add	r7, sp, #0
 801962e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8019630:	2300      	movs	r3, #0
 8019632:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8019634:	f7fe fd1c 	bl	8018070 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8019638:	4b5b      	ldr	r3, [pc, #364]	; (80197a8 <pvPortMalloc+0x180>)
 801963a:	681b      	ldr	r3, [r3, #0]
 801963c:	2b00      	cmp	r3, #0
 801963e:	d101      	bne.n	8019644 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8019640:	f000 f920 	bl	8019884 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8019644:	4b59      	ldr	r3, [pc, #356]	; (80197ac <pvPortMalloc+0x184>)
 8019646:	681a      	ldr	r2, [r3, #0]
 8019648:	687b      	ldr	r3, [r7, #4]
 801964a:	4013      	ands	r3, r2
 801964c:	2b00      	cmp	r3, #0
 801964e:	f040 8093 	bne.w	8019778 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8019652:	687b      	ldr	r3, [r7, #4]
 8019654:	2b00      	cmp	r3, #0
 8019656:	d01d      	beq.n	8019694 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8019658:	2208      	movs	r2, #8
 801965a:	687b      	ldr	r3, [r7, #4]
 801965c:	4413      	add	r3, r2
 801965e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8019660:	687b      	ldr	r3, [r7, #4]
 8019662:	f003 0307 	and.w	r3, r3, #7
 8019666:	2b00      	cmp	r3, #0
 8019668:	d014      	beq.n	8019694 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801966a:	687b      	ldr	r3, [r7, #4]
 801966c:	f023 0307 	bic.w	r3, r3, #7
 8019670:	3308      	adds	r3, #8
 8019672:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8019674:	687b      	ldr	r3, [r7, #4]
 8019676:	f003 0307 	and.w	r3, r3, #7
 801967a:	2b00      	cmp	r3, #0
 801967c:	d00a      	beq.n	8019694 <pvPortMalloc+0x6c>
	__asm volatile
 801967e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019682:	f383 8811 	msr	BASEPRI, r3
 8019686:	f3bf 8f6f 	isb	sy
 801968a:	f3bf 8f4f 	dsb	sy
 801968e:	617b      	str	r3, [r7, #20]
}
 8019690:	bf00      	nop
 8019692:	e7fe      	b.n	8019692 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8019694:	687b      	ldr	r3, [r7, #4]
 8019696:	2b00      	cmp	r3, #0
 8019698:	d06e      	beq.n	8019778 <pvPortMalloc+0x150>
 801969a:	4b45      	ldr	r3, [pc, #276]	; (80197b0 <pvPortMalloc+0x188>)
 801969c:	681b      	ldr	r3, [r3, #0]
 801969e:	687a      	ldr	r2, [r7, #4]
 80196a0:	429a      	cmp	r2, r3
 80196a2:	d869      	bhi.n	8019778 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80196a4:	4b43      	ldr	r3, [pc, #268]	; (80197b4 <pvPortMalloc+0x18c>)
 80196a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80196a8:	4b42      	ldr	r3, [pc, #264]	; (80197b4 <pvPortMalloc+0x18c>)
 80196aa:	681b      	ldr	r3, [r3, #0]
 80196ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80196ae:	e004      	b.n	80196ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80196b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80196b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80196b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80196b6:	681b      	ldr	r3, [r3, #0]
 80196b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80196ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80196bc:	685b      	ldr	r3, [r3, #4]
 80196be:	687a      	ldr	r2, [r7, #4]
 80196c0:	429a      	cmp	r2, r3
 80196c2:	d903      	bls.n	80196cc <pvPortMalloc+0xa4>
 80196c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80196c6:	681b      	ldr	r3, [r3, #0]
 80196c8:	2b00      	cmp	r3, #0
 80196ca:	d1f1      	bne.n	80196b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80196cc:	4b36      	ldr	r3, [pc, #216]	; (80197a8 <pvPortMalloc+0x180>)
 80196ce:	681b      	ldr	r3, [r3, #0]
 80196d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80196d2:	429a      	cmp	r2, r3
 80196d4:	d050      	beq.n	8019778 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80196d6:	6a3b      	ldr	r3, [r7, #32]
 80196d8:	681b      	ldr	r3, [r3, #0]
 80196da:	2208      	movs	r2, #8
 80196dc:	4413      	add	r3, r2
 80196de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80196e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80196e2:	681a      	ldr	r2, [r3, #0]
 80196e4:	6a3b      	ldr	r3, [r7, #32]
 80196e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80196e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80196ea:	685a      	ldr	r2, [r3, #4]
 80196ec:	687b      	ldr	r3, [r7, #4]
 80196ee:	1ad2      	subs	r2, r2, r3
 80196f0:	2308      	movs	r3, #8
 80196f2:	005b      	lsls	r3, r3, #1
 80196f4:	429a      	cmp	r2, r3
 80196f6:	d91f      	bls.n	8019738 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80196f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80196fa:	687b      	ldr	r3, [r7, #4]
 80196fc:	4413      	add	r3, r2
 80196fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8019700:	69bb      	ldr	r3, [r7, #24]
 8019702:	f003 0307 	and.w	r3, r3, #7
 8019706:	2b00      	cmp	r3, #0
 8019708:	d00a      	beq.n	8019720 <pvPortMalloc+0xf8>
	__asm volatile
 801970a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801970e:	f383 8811 	msr	BASEPRI, r3
 8019712:	f3bf 8f6f 	isb	sy
 8019716:	f3bf 8f4f 	dsb	sy
 801971a:	613b      	str	r3, [r7, #16]
}
 801971c:	bf00      	nop
 801971e:	e7fe      	b.n	801971e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8019720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019722:	685a      	ldr	r2, [r3, #4]
 8019724:	687b      	ldr	r3, [r7, #4]
 8019726:	1ad2      	subs	r2, r2, r3
 8019728:	69bb      	ldr	r3, [r7, #24]
 801972a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801972c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801972e:	687a      	ldr	r2, [r7, #4]
 8019730:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8019732:	69b8      	ldr	r0, [r7, #24]
 8019734:	f000 f90a 	bl	801994c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8019738:	4b1d      	ldr	r3, [pc, #116]	; (80197b0 <pvPortMalloc+0x188>)
 801973a:	681a      	ldr	r2, [r3, #0]
 801973c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801973e:	685b      	ldr	r3, [r3, #4]
 8019740:	1ad3      	subs	r3, r2, r3
 8019742:	4a1b      	ldr	r2, [pc, #108]	; (80197b0 <pvPortMalloc+0x188>)
 8019744:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8019746:	4b1a      	ldr	r3, [pc, #104]	; (80197b0 <pvPortMalloc+0x188>)
 8019748:	681a      	ldr	r2, [r3, #0]
 801974a:	4b1b      	ldr	r3, [pc, #108]	; (80197b8 <pvPortMalloc+0x190>)
 801974c:	681b      	ldr	r3, [r3, #0]
 801974e:	429a      	cmp	r2, r3
 8019750:	d203      	bcs.n	801975a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8019752:	4b17      	ldr	r3, [pc, #92]	; (80197b0 <pvPortMalloc+0x188>)
 8019754:	681b      	ldr	r3, [r3, #0]
 8019756:	4a18      	ldr	r2, [pc, #96]	; (80197b8 <pvPortMalloc+0x190>)
 8019758:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801975a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801975c:	685a      	ldr	r2, [r3, #4]
 801975e:	4b13      	ldr	r3, [pc, #76]	; (80197ac <pvPortMalloc+0x184>)
 8019760:	681b      	ldr	r3, [r3, #0]
 8019762:	431a      	orrs	r2, r3
 8019764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019766:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8019768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801976a:	2200      	movs	r2, #0
 801976c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801976e:	4b13      	ldr	r3, [pc, #76]	; (80197bc <pvPortMalloc+0x194>)
 8019770:	681b      	ldr	r3, [r3, #0]
 8019772:	3301      	adds	r3, #1
 8019774:	4a11      	ldr	r2, [pc, #68]	; (80197bc <pvPortMalloc+0x194>)
 8019776:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8019778:	f7fe fc88 	bl	801808c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801977c:	69fb      	ldr	r3, [r7, #28]
 801977e:	f003 0307 	and.w	r3, r3, #7
 8019782:	2b00      	cmp	r3, #0
 8019784:	d00a      	beq.n	801979c <pvPortMalloc+0x174>
	__asm volatile
 8019786:	f04f 0350 	mov.w	r3, #80	; 0x50
 801978a:	f383 8811 	msr	BASEPRI, r3
 801978e:	f3bf 8f6f 	isb	sy
 8019792:	f3bf 8f4f 	dsb	sy
 8019796:	60fb      	str	r3, [r7, #12]
}
 8019798:	bf00      	nop
 801979a:	e7fe      	b.n	801979a <pvPortMalloc+0x172>
	return pvReturn;
 801979c:	69fb      	ldr	r3, [r7, #28]
}
 801979e:	4618      	mov	r0, r3
 80197a0:	3728      	adds	r7, #40	; 0x28
 80197a2:	46bd      	mov	sp, r7
 80197a4:	bd80      	pop	{r7, pc}
 80197a6:	bf00      	nop
 80197a8:	2001ac78 	.word	0x2001ac78
 80197ac:	2001ac8c 	.word	0x2001ac8c
 80197b0:	2001ac7c 	.word	0x2001ac7c
 80197b4:	2001ac70 	.word	0x2001ac70
 80197b8:	2001ac80 	.word	0x2001ac80
 80197bc:	2001ac84 	.word	0x2001ac84

080197c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80197c0:	b580      	push	{r7, lr}
 80197c2:	b086      	sub	sp, #24
 80197c4:	af00      	add	r7, sp, #0
 80197c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80197c8:	687b      	ldr	r3, [r7, #4]
 80197ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80197cc:	687b      	ldr	r3, [r7, #4]
 80197ce:	2b00      	cmp	r3, #0
 80197d0:	d04d      	beq.n	801986e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80197d2:	2308      	movs	r3, #8
 80197d4:	425b      	negs	r3, r3
 80197d6:	697a      	ldr	r2, [r7, #20]
 80197d8:	4413      	add	r3, r2
 80197da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80197dc:	697b      	ldr	r3, [r7, #20]
 80197de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80197e0:	693b      	ldr	r3, [r7, #16]
 80197e2:	685a      	ldr	r2, [r3, #4]
 80197e4:	4b24      	ldr	r3, [pc, #144]	; (8019878 <vPortFree+0xb8>)
 80197e6:	681b      	ldr	r3, [r3, #0]
 80197e8:	4013      	ands	r3, r2
 80197ea:	2b00      	cmp	r3, #0
 80197ec:	d10a      	bne.n	8019804 <vPortFree+0x44>
	__asm volatile
 80197ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80197f2:	f383 8811 	msr	BASEPRI, r3
 80197f6:	f3bf 8f6f 	isb	sy
 80197fa:	f3bf 8f4f 	dsb	sy
 80197fe:	60fb      	str	r3, [r7, #12]
}
 8019800:	bf00      	nop
 8019802:	e7fe      	b.n	8019802 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8019804:	693b      	ldr	r3, [r7, #16]
 8019806:	681b      	ldr	r3, [r3, #0]
 8019808:	2b00      	cmp	r3, #0
 801980a:	d00a      	beq.n	8019822 <vPortFree+0x62>
	__asm volatile
 801980c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019810:	f383 8811 	msr	BASEPRI, r3
 8019814:	f3bf 8f6f 	isb	sy
 8019818:	f3bf 8f4f 	dsb	sy
 801981c:	60bb      	str	r3, [r7, #8]
}
 801981e:	bf00      	nop
 8019820:	e7fe      	b.n	8019820 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8019822:	693b      	ldr	r3, [r7, #16]
 8019824:	685a      	ldr	r2, [r3, #4]
 8019826:	4b14      	ldr	r3, [pc, #80]	; (8019878 <vPortFree+0xb8>)
 8019828:	681b      	ldr	r3, [r3, #0]
 801982a:	4013      	ands	r3, r2
 801982c:	2b00      	cmp	r3, #0
 801982e:	d01e      	beq.n	801986e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8019830:	693b      	ldr	r3, [r7, #16]
 8019832:	681b      	ldr	r3, [r3, #0]
 8019834:	2b00      	cmp	r3, #0
 8019836:	d11a      	bne.n	801986e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8019838:	693b      	ldr	r3, [r7, #16]
 801983a:	685a      	ldr	r2, [r3, #4]
 801983c:	4b0e      	ldr	r3, [pc, #56]	; (8019878 <vPortFree+0xb8>)
 801983e:	681b      	ldr	r3, [r3, #0]
 8019840:	43db      	mvns	r3, r3
 8019842:	401a      	ands	r2, r3
 8019844:	693b      	ldr	r3, [r7, #16]
 8019846:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8019848:	f7fe fc12 	bl	8018070 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801984c:	693b      	ldr	r3, [r7, #16]
 801984e:	685a      	ldr	r2, [r3, #4]
 8019850:	4b0a      	ldr	r3, [pc, #40]	; (801987c <vPortFree+0xbc>)
 8019852:	681b      	ldr	r3, [r3, #0]
 8019854:	4413      	add	r3, r2
 8019856:	4a09      	ldr	r2, [pc, #36]	; (801987c <vPortFree+0xbc>)
 8019858:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801985a:	6938      	ldr	r0, [r7, #16]
 801985c:	f000 f876 	bl	801994c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8019860:	4b07      	ldr	r3, [pc, #28]	; (8019880 <vPortFree+0xc0>)
 8019862:	681b      	ldr	r3, [r3, #0]
 8019864:	3301      	adds	r3, #1
 8019866:	4a06      	ldr	r2, [pc, #24]	; (8019880 <vPortFree+0xc0>)
 8019868:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801986a:	f7fe fc0f 	bl	801808c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801986e:	bf00      	nop
 8019870:	3718      	adds	r7, #24
 8019872:	46bd      	mov	sp, r7
 8019874:	bd80      	pop	{r7, pc}
 8019876:	bf00      	nop
 8019878:	2001ac8c 	.word	0x2001ac8c
 801987c:	2001ac7c 	.word	0x2001ac7c
 8019880:	2001ac88 	.word	0x2001ac88

08019884 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8019884:	b480      	push	{r7}
 8019886:	b085      	sub	sp, #20
 8019888:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801988a:	4b29      	ldr	r3, [pc, #164]	; (8019930 <prvHeapInit+0xac>)
 801988c:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801988e:	4b29      	ldr	r3, [pc, #164]	; (8019934 <prvHeapInit+0xb0>)
 8019890:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8019892:	68fb      	ldr	r3, [r7, #12]
 8019894:	f003 0307 	and.w	r3, r3, #7
 8019898:	2b00      	cmp	r3, #0
 801989a:	d00c      	beq.n	80198b6 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801989c:	68fb      	ldr	r3, [r7, #12]
 801989e:	3307      	adds	r3, #7
 80198a0:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80198a2:	68fb      	ldr	r3, [r7, #12]
 80198a4:	f023 0307 	bic.w	r3, r3, #7
 80198a8:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80198aa:	68ba      	ldr	r2, [r7, #8]
 80198ac:	68fb      	ldr	r3, [r7, #12]
 80198ae:	1ad3      	subs	r3, r2, r3
 80198b0:	4a20      	ldr	r2, [pc, #128]	; (8019934 <prvHeapInit+0xb0>)
 80198b2:	4413      	add	r3, r2
 80198b4:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80198b6:	68fb      	ldr	r3, [r7, #12]
 80198b8:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80198ba:	4a1f      	ldr	r2, [pc, #124]	; (8019938 <prvHeapInit+0xb4>)
 80198bc:	687b      	ldr	r3, [r7, #4]
 80198be:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80198c0:	4b1d      	ldr	r3, [pc, #116]	; (8019938 <prvHeapInit+0xb4>)
 80198c2:	2200      	movs	r2, #0
 80198c4:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80198c6:	687b      	ldr	r3, [r7, #4]
 80198c8:	68ba      	ldr	r2, [r7, #8]
 80198ca:	4413      	add	r3, r2
 80198cc:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80198ce:	2208      	movs	r2, #8
 80198d0:	68fb      	ldr	r3, [r7, #12]
 80198d2:	1a9b      	subs	r3, r3, r2
 80198d4:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80198d6:	68fb      	ldr	r3, [r7, #12]
 80198d8:	f023 0307 	bic.w	r3, r3, #7
 80198dc:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80198de:	68fb      	ldr	r3, [r7, #12]
 80198e0:	4a16      	ldr	r2, [pc, #88]	; (801993c <prvHeapInit+0xb8>)
 80198e2:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80198e4:	4b15      	ldr	r3, [pc, #84]	; (801993c <prvHeapInit+0xb8>)
 80198e6:	681b      	ldr	r3, [r3, #0]
 80198e8:	2200      	movs	r2, #0
 80198ea:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80198ec:	4b13      	ldr	r3, [pc, #76]	; (801993c <prvHeapInit+0xb8>)
 80198ee:	681b      	ldr	r3, [r3, #0]
 80198f0:	2200      	movs	r2, #0
 80198f2:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80198f4:	687b      	ldr	r3, [r7, #4]
 80198f6:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80198f8:	683b      	ldr	r3, [r7, #0]
 80198fa:	68fa      	ldr	r2, [r7, #12]
 80198fc:	1ad2      	subs	r2, r2, r3
 80198fe:	683b      	ldr	r3, [r7, #0]
 8019900:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8019902:	4b0e      	ldr	r3, [pc, #56]	; (801993c <prvHeapInit+0xb8>)
 8019904:	681a      	ldr	r2, [r3, #0]
 8019906:	683b      	ldr	r3, [r7, #0]
 8019908:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801990a:	683b      	ldr	r3, [r7, #0]
 801990c:	685b      	ldr	r3, [r3, #4]
 801990e:	4a0c      	ldr	r2, [pc, #48]	; (8019940 <prvHeapInit+0xbc>)
 8019910:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8019912:	683b      	ldr	r3, [r7, #0]
 8019914:	685b      	ldr	r3, [r3, #4]
 8019916:	4a0b      	ldr	r2, [pc, #44]	; (8019944 <prvHeapInit+0xc0>)
 8019918:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801991a:	4b0b      	ldr	r3, [pc, #44]	; (8019948 <prvHeapInit+0xc4>)
 801991c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8019920:	601a      	str	r2, [r3, #0]
}
 8019922:	bf00      	nop
 8019924:	3714      	adds	r7, #20
 8019926:	46bd      	mov	sp, r7
 8019928:	f85d 7b04 	ldr.w	r7, [sp], #4
 801992c:	4770      	bx	lr
 801992e:	bf00      	nop
 8019930:	000186a0 	.word	0x000186a0
 8019934:	200025d0 	.word	0x200025d0
 8019938:	2001ac70 	.word	0x2001ac70
 801993c:	2001ac78 	.word	0x2001ac78
 8019940:	2001ac80 	.word	0x2001ac80
 8019944:	2001ac7c 	.word	0x2001ac7c
 8019948:	2001ac8c 	.word	0x2001ac8c

0801994c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801994c:	b480      	push	{r7}
 801994e:	b085      	sub	sp, #20
 8019950:	af00      	add	r7, sp, #0
 8019952:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8019954:	4b28      	ldr	r3, [pc, #160]	; (80199f8 <prvInsertBlockIntoFreeList+0xac>)
 8019956:	60fb      	str	r3, [r7, #12]
 8019958:	e002      	b.n	8019960 <prvInsertBlockIntoFreeList+0x14>
 801995a:	68fb      	ldr	r3, [r7, #12]
 801995c:	681b      	ldr	r3, [r3, #0]
 801995e:	60fb      	str	r3, [r7, #12]
 8019960:	68fb      	ldr	r3, [r7, #12]
 8019962:	681b      	ldr	r3, [r3, #0]
 8019964:	687a      	ldr	r2, [r7, #4]
 8019966:	429a      	cmp	r2, r3
 8019968:	d8f7      	bhi.n	801995a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801996a:	68fb      	ldr	r3, [r7, #12]
 801996c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801996e:	68fb      	ldr	r3, [r7, #12]
 8019970:	685b      	ldr	r3, [r3, #4]
 8019972:	68ba      	ldr	r2, [r7, #8]
 8019974:	4413      	add	r3, r2
 8019976:	687a      	ldr	r2, [r7, #4]
 8019978:	429a      	cmp	r2, r3
 801997a:	d108      	bne.n	801998e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801997c:	68fb      	ldr	r3, [r7, #12]
 801997e:	685a      	ldr	r2, [r3, #4]
 8019980:	687b      	ldr	r3, [r7, #4]
 8019982:	685b      	ldr	r3, [r3, #4]
 8019984:	441a      	add	r2, r3
 8019986:	68fb      	ldr	r3, [r7, #12]
 8019988:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801998a:	68fb      	ldr	r3, [r7, #12]
 801998c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801998e:	687b      	ldr	r3, [r7, #4]
 8019990:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8019992:	687b      	ldr	r3, [r7, #4]
 8019994:	685b      	ldr	r3, [r3, #4]
 8019996:	68ba      	ldr	r2, [r7, #8]
 8019998:	441a      	add	r2, r3
 801999a:	68fb      	ldr	r3, [r7, #12]
 801999c:	681b      	ldr	r3, [r3, #0]
 801999e:	429a      	cmp	r2, r3
 80199a0:	d118      	bne.n	80199d4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80199a2:	68fb      	ldr	r3, [r7, #12]
 80199a4:	681a      	ldr	r2, [r3, #0]
 80199a6:	4b15      	ldr	r3, [pc, #84]	; (80199fc <prvInsertBlockIntoFreeList+0xb0>)
 80199a8:	681b      	ldr	r3, [r3, #0]
 80199aa:	429a      	cmp	r2, r3
 80199ac:	d00d      	beq.n	80199ca <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80199ae:	687b      	ldr	r3, [r7, #4]
 80199b0:	685a      	ldr	r2, [r3, #4]
 80199b2:	68fb      	ldr	r3, [r7, #12]
 80199b4:	681b      	ldr	r3, [r3, #0]
 80199b6:	685b      	ldr	r3, [r3, #4]
 80199b8:	441a      	add	r2, r3
 80199ba:	687b      	ldr	r3, [r7, #4]
 80199bc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80199be:	68fb      	ldr	r3, [r7, #12]
 80199c0:	681b      	ldr	r3, [r3, #0]
 80199c2:	681a      	ldr	r2, [r3, #0]
 80199c4:	687b      	ldr	r3, [r7, #4]
 80199c6:	601a      	str	r2, [r3, #0]
 80199c8:	e008      	b.n	80199dc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80199ca:	4b0c      	ldr	r3, [pc, #48]	; (80199fc <prvInsertBlockIntoFreeList+0xb0>)
 80199cc:	681a      	ldr	r2, [r3, #0]
 80199ce:	687b      	ldr	r3, [r7, #4]
 80199d0:	601a      	str	r2, [r3, #0]
 80199d2:	e003      	b.n	80199dc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80199d4:	68fb      	ldr	r3, [r7, #12]
 80199d6:	681a      	ldr	r2, [r3, #0]
 80199d8:	687b      	ldr	r3, [r7, #4]
 80199da:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80199dc:	68fa      	ldr	r2, [r7, #12]
 80199de:	687b      	ldr	r3, [r7, #4]
 80199e0:	429a      	cmp	r2, r3
 80199e2:	d002      	beq.n	80199ea <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80199e4:	68fb      	ldr	r3, [r7, #12]
 80199e6:	687a      	ldr	r2, [r7, #4]
 80199e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80199ea:	bf00      	nop
 80199ec:	3714      	adds	r7, #20
 80199ee:	46bd      	mov	sp, r7
 80199f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199f4:	4770      	bx	lr
 80199f6:	bf00      	nop
 80199f8:	2001ac70 	.word	0x2001ac70
 80199fc:	2001ac78 	.word	0x2001ac78

08019a00 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8019a00:	b480      	push	{r7}
 8019a02:	b083      	sub	sp, #12
 8019a04:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8019a06:	4b24      	ldr	r3, [pc, #144]	; (8019a98 <_DoInit+0x98>)
 8019a08:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8019a0a:	687b      	ldr	r3, [r7, #4]
 8019a0c:	2203      	movs	r2, #3
 8019a0e:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8019a10:	687b      	ldr	r3, [r7, #4]
 8019a12:	2203      	movs	r2, #3
 8019a14:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8019a16:	687b      	ldr	r3, [r7, #4]
 8019a18:	4a20      	ldr	r2, [pc, #128]	; (8019a9c <_DoInit+0x9c>)
 8019a1a:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8019a1c:	687b      	ldr	r3, [r7, #4]
 8019a1e:	4a20      	ldr	r2, [pc, #128]	; (8019aa0 <_DoInit+0xa0>)
 8019a20:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8019a22:	687b      	ldr	r3, [r7, #4]
 8019a24:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8019a28:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8019a2a:	687b      	ldr	r3, [r7, #4]
 8019a2c:	2200      	movs	r2, #0
 8019a2e:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8019a30:	687b      	ldr	r3, [r7, #4]
 8019a32:	2200      	movs	r2, #0
 8019a34:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8019a36:	687b      	ldr	r3, [r7, #4]
 8019a38:	2200      	movs	r2, #0
 8019a3a:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8019a3c:	687b      	ldr	r3, [r7, #4]
 8019a3e:	4a17      	ldr	r2, [pc, #92]	; (8019a9c <_DoInit+0x9c>)
 8019a40:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8019a42:	687b      	ldr	r3, [r7, #4]
 8019a44:	4a17      	ldr	r2, [pc, #92]	; (8019aa4 <_DoInit+0xa4>)
 8019a46:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8019a48:	687b      	ldr	r3, [r7, #4]
 8019a4a:	2210      	movs	r2, #16
 8019a4c:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8019a4e:	687b      	ldr	r3, [r7, #4]
 8019a50:	2200      	movs	r2, #0
 8019a52:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8019a54:	687b      	ldr	r3, [r7, #4]
 8019a56:	2200      	movs	r2, #0
 8019a58:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8019a5a:	687b      	ldr	r3, [r7, #4]
 8019a5c:	2200      	movs	r2, #0
 8019a5e:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8019a60:	687b      	ldr	r3, [r7, #4]
 8019a62:	3307      	adds	r3, #7
 8019a64:	4a10      	ldr	r2, [pc, #64]	; (8019aa8 <_DoInit+0xa8>)
 8019a66:	6810      	ldr	r0, [r2, #0]
 8019a68:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8019a6a:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8019a6e:	687b      	ldr	r3, [r7, #4]
 8019a70:	4a0e      	ldr	r2, [pc, #56]	; (8019aac <_DoInit+0xac>)
 8019a72:	6810      	ldr	r0, [r2, #0]
 8019a74:	6018      	str	r0, [r3, #0]
 8019a76:	8891      	ldrh	r1, [r2, #4]
 8019a78:	7992      	ldrb	r2, [r2, #6]
 8019a7a:	8099      	strh	r1, [r3, #4]
 8019a7c:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8019a7e:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8019a82:	687b      	ldr	r3, [r7, #4]
 8019a84:	2220      	movs	r2, #32
 8019a86:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8019a88:	f3bf 8f5f 	dmb	sy
}
 8019a8c:	bf00      	nop
 8019a8e:	370c      	adds	r7, #12
 8019a90:	46bd      	mov	sp, r7
 8019a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a96:	4770      	bx	lr
 8019a98:	2001ec68 	.word	0x2001ec68
 8019a9c:	0801bd9c 	.word	0x0801bd9c
 8019aa0:	2001ac90 	.word	0x2001ac90
 8019aa4:	2001b090 	.word	0x2001b090
 8019aa8:	0801bda8 	.word	0x0801bda8
 8019aac:	0801bdac 	.word	0x0801bdac

08019ab0 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8019ab0:	b580      	push	{r7, lr}
 8019ab2:	b08c      	sub	sp, #48	; 0x30
 8019ab4:	af00      	add	r7, sp, #0
 8019ab6:	60f8      	str	r0, [r7, #12]
 8019ab8:	60b9      	str	r1, [r7, #8]
 8019aba:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8019abc:	4b3e      	ldr	r3, [pc, #248]	; (8019bb8 <SEGGER_RTT_ReadNoLock+0x108>)
 8019abe:	623b      	str	r3, [r7, #32]
 8019ac0:	6a3b      	ldr	r3, [r7, #32]
 8019ac2:	781b      	ldrb	r3, [r3, #0]
 8019ac4:	b2db      	uxtb	r3, r3
 8019ac6:	2b00      	cmp	r3, #0
 8019ac8:	d101      	bne.n	8019ace <SEGGER_RTT_ReadNoLock+0x1e>
 8019aca:	f7ff ff99 	bl	8019a00 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8019ace:	68fa      	ldr	r2, [r7, #12]
 8019ad0:	4613      	mov	r3, r2
 8019ad2:	005b      	lsls	r3, r3, #1
 8019ad4:	4413      	add	r3, r2
 8019ad6:	00db      	lsls	r3, r3, #3
 8019ad8:	3360      	adds	r3, #96	; 0x60
 8019ada:	4a37      	ldr	r2, [pc, #220]	; (8019bb8 <SEGGER_RTT_ReadNoLock+0x108>)
 8019adc:	4413      	add	r3, r2
 8019ade:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8019ae0:	68bb      	ldr	r3, [r7, #8]
 8019ae2:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8019ae4:	69fb      	ldr	r3, [r7, #28]
 8019ae6:	691b      	ldr	r3, [r3, #16]
 8019ae8:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8019aea:	69fb      	ldr	r3, [r7, #28]
 8019aec:	68db      	ldr	r3, [r3, #12]
 8019aee:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8019af0:	2300      	movs	r3, #0
 8019af2:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8019af4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019af6:	69bb      	ldr	r3, [r7, #24]
 8019af8:	429a      	cmp	r2, r3
 8019afa:	d92b      	bls.n	8019b54 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8019afc:	69fb      	ldr	r3, [r7, #28]
 8019afe:	689a      	ldr	r2, [r3, #8]
 8019b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019b02:	1ad3      	subs	r3, r2, r3
 8019b04:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8019b06:	697a      	ldr	r2, [r7, #20]
 8019b08:	687b      	ldr	r3, [r7, #4]
 8019b0a:	4293      	cmp	r3, r2
 8019b0c:	bf28      	it	cs
 8019b0e:	4613      	movcs	r3, r2
 8019b10:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8019b12:	69fb      	ldr	r3, [r7, #28]
 8019b14:	685a      	ldr	r2, [r3, #4]
 8019b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019b18:	4413      	add	r3, r2
 8019b1a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8019b1c:	697a      	ldr	r2, [r7, #20]
 8019b1e:	6939      	ldr	r1, [r7, #16]
 8019b20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019b22:	f001 fa9b 	bl	801b05c <memcpy>
    NumBytesRead += NumBytesRem;
 8019b26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019b28:	697b      	ldr	r3, [r7, #20]
 8019b2a:	4413      	add	r3, r2
 8019b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8019b2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019b30:	697b      	ldr	r3, [r7, #20]
 8019b32:	4413      	add	r3, r2
 8019b34:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8019b36:	687a      	ldr	r2, [r7, #4]
 8019b38:	697b      	ldr	r3, [r7, #20]
 8019b3a:	1ad3      	subs	r3, r2, r3
 8019b3c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8019b3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019b40:	697b      	ldr	r3, [r7, #20]
 8019b42:	4413      	add	r3, r2
 8019b44:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8019b46:	69fb      	ldr	r3, [r7, #28]
 8019b48:	689b      	ldr	r3, [r3, #8]
 8019b4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019b4c:	429a      	cmp	r2, r3
 8019b4e:	d101      	bne.n	8019b54 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8019b50:	2300      	movs	r3, #0
 8019b52:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8019b54:	69ba      	ldr	r2, [r7, #24]
 8019b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019b58:	1ad3      	subs	r3, r2, r3
 8019b5a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8019b5c:	697a      	ldr	r2, [r7, #20]
 8019b5e:	687b      	ldr	r3, [r7, #4]
 8019b60:	4293      	cmp	r3, r2
 8019b62:	bf28      	it	cs
 8019b64:	4613      	movcs	r3, r2
 8019b66:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8019b68:	697b      	ldr	r3, [r7, #20]
 8019b6a:	2b00      	cmp	r3, #0
 8019b6c:	d019      	beq.n	8019ba2 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8019b6e:	69fb      	ldr	r3, [r7, #28]
 8019b70:	685a      	ldr	r2, [r3, #4]
 8019b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019b74:	4413      	add	r3, r2
 8019b76:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8019b78:	697a      	ldr	r2, [r7, #20]
 8019b7a:	6939      	ldr	r1, [r7, #16]
 8019b7c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019b7e:	f001 fa6d 	bl	801b05c <memcpy>
    NumBytesRead += NumBytesRem;
 8019b82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019b84:	697b      	ldr	r3, [r7, #20]
 8019b86:	4413      	add	r3, r2
 8019b88:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8019b8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019b8c:	697b      	ldr	r3, [r7, #20]
 8019b8e:	4413      	add	r3, r2
 8019b90:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8019b92:	687a      	ldr	r2, [r7, #4]
 8019b94:	697b      	ldr	r3, [r7, #20]
 8019b96:	1ad3      	subs	r3, r2, r3
 8019b98:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8019b9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019b9c:	697b      	ldr	r3, [r7, #20]
 8019b9e:	4413      	add	r3, r2
 8019ba0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8019ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ba4:	2b00      	cmp	r3, #0
 8019ba6:	d002      	beq.n	8019bae <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8019ba8:	69fb      	ldr	r3, [r7, #28]
 8019baa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019bac:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8019bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8019bb0:	4618      	mov	r0, r3
 8019bb2:	3730      	adds	r7, #48	; 0x30
 8019bb4:	46bd      	mov	sp, r7
 8019bb6:	bd80      	pop	{r7, pc}
 8019bb8:	2001ec68 	.word	0x2001ec68

08019bbc <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8019bbc:	b580      	push	{r7, lr}
 8019bbe:	b088      	sub	sp, #32
 8019bc0:	af00      	add	r7, sp, #0
 8019bc2:	60f8      	str	r0, [r7, #12]
 8019bc4:	60b9      	str	r1, [r7, #8]
 8019bc6:	607a      	str	r2, [r7, #4]
 8019bc8:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8019bca:	4b3d      	ldr	r3, [pc, #244]	; (8019cc0 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8019bcc:	61bb      	str	r3, [r7, #24]
 8019bce:	69bb      	ldr	r3, [r7, #24]
 8019bd0:	781b      	ldrb	r3, [r3, #0]
 8019bd2:	b2db      	uxtb	r3, r3
 8019bd4:	2b00      	cmp	r3, #0
 8019bd6:	d101      	bne.n	8019bdc <SEGGER_RTT_AllocUpBuffer+0x20>
 8019bd8:	f7ff ff12 	bl	8019a00 <_DoInit>
  SEGGER_RTT_LOCK();
 8019bdc:	f3ef 8311 	mrs	r3, BASEPRI
 8019be0:	f04f 0120 	mov.w	r1, #32
 8019be4:	f381 8811 	msr	BASEPRI, r1
 8019be8:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8019bea:	4b35      	ldr	r3, [pc, #212]	; (8019cc0 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8019bec:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8019bee:	2300      	movs	r3, #0
 8019bf0:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8019bf2:	6939      	ldr	r1, [r7, #16]
 8019bf4:	69fb      	ldr	r3, [r7, #28]
 8019bf6:	1c5a      	adds	r2, r3, #1
 8019bf8:	4613      	mov	r3, r2
 8019bfa:	005b      	lsls	r3, r3, #1
 8019bfc:	4413      	add	r3, r2
 8019bfe:	00db      	lsls	r3, r3, #3
 8019c00:	440b      	add	r3, r1
 8019c02:	3304      	adds	r3, #4
 8019c04:	681b      	ldr	r3, [r3, #0]
 8019c06:	2b00      	cmp	r3, #0
 8019c08:	d008      	beq.n	8019c1c <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8019c0a:	69fb      	ldr	r3, [r7, #28]
 8019c0c:	3301      	adds	r3, #1
 8019c0e:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8019c10:	693b      	ldr	r3, [r7, #16]
 8019c12:	691b      	ldr	r3, [r3, #16]
 8019c14:	69fa      	ldr	r2, [r7, #28]
 8019c16:	429a      	cmp	r2, r3
 8019c18:	dbeb      	blt.n	8019bf2 <SEGGER_RTT_AllocUpBuffer+0x36>
 8019c1a:	e000      	b.n	8019c1e <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8019c1c:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8019c1e:	693b      	ldr	r3, [r7, #16]
 8019c20:	691b      	ldr	r3, [r3, #16]
 8019c22:	69fa      	ldr	r2, [r7, #28]
 8019c24:	429a      	cmp	r2, r3
 8019c26:	da3f      	bge.n	8019ca8 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8019c28:	6939      	ldr	r1, [r7, #16]
 8019c2a:	69fb      	ldr	r3, [r7, #28]
 8019c2c:	1c5a      	adds	r2, r3, #1
 8019c2e:	4613      	mov	r3, r2
 8019c30:	005b      	lsls	r3, r3, #1
 8019c32:	4413      	add	r3, r2
 8019c34:	00db      	lsls	r3, r3, #3
 8019c36:	440b      	add	r3, r1
 8019c38:	68fa      	ldr	r2, [r7, #12]
 8019c3a:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8019c3c:	6939      	ldr	r1, [r7, #16]
 8019c3e:	69fb      	ldr	r3, [r7, #28]
 8019c40:	1c5a      	adds	r2, r3, #1
 8019c42:	4613      	mov	r3, r2
 8019c44:	005b      	lsls	r3, r3, #1
 8019c46:	4413      	add	r3, r2
 8019c48:	00db      	lsls	r3, r3, #3
 8019c4a:	440b      	add	r3, r1
 8019c4c:	3304      	adds	r3, #4
 8019c4e:	68ba      	ldr	r2, [r7, #8]
 8019c50:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8019c52:	6939      	ldr	r1, [r7, #16]
 8019c54:	69fa      	ldr	r2, [r7, #28]
 8019c56:	4613      	mov	r3, r2
 8019c58:	005b      	lsls	r3, r3, #1
 8019c5a:	4413      	add	r3, r2
 8019c5c:	00db      	lsls	r3, r3, #3
 8019c5e:	440b      	add	r3, r1
 8019c60:	3320      	adds	r3, #32
 8019c62:	687a      	ldr	r2, [r7, #4]
 8019c64:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8019c66:	6939      	ldr	r1, [r7, #16]
 8019c68:	69fa      	ldr	r2, [r7, #28]
 8019c6a:	4613      	mov	r3, r2
 8019c6c:	005b      	lsls	r3, r3, #1
 8019c6e:	4413      	add	r3, r2
 8019c70:	00db      	lsls	r3, r3, #3
 8019c72:	440b      	add	r3, r1
 8019c74:	3328      	adds	r3, #40	; 0x28
 8019c76:	2200      	movs	r2, #0
 8019c78:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8019c7a:	6939      	ldr	r1, [r7, #16]
 8019c7c:	69fa      	ldr	r2, [r7, #28]
 8019c7e:	4613      	mov	r3, r2
 8019c80:	005b      	lsls	r3, r3, #1
 8019c82:	4413      	add	r3, r2
 8019c84:	00db      	lsls	r3, r3, #3
 8019c86:	440b      	add	r3, r1
 8019c88:	3324      	adds	r3, #36	; 0x24
 8019c8a:	2200      	movs	r2, #0
 8019c8c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8019c8e:	6939      	ldr	r1, [r7, #16]
 8019c90:	69fa      	ldr	r2, [r7, #28]
 8019c92:	4613      	mov	r3, r2
 8019c94:	005b      	lsls	r3, r3, #1
 8019c96:	4413      	add	r3, r2
 8019c98:	00db      	lsls	r3, r3, #3
 8019c9a:	440b      	add	r3, r1
 8019c9c:	332c      	adds	r3, #44	; 0x2c
 8019c9e:	683a      	ldr	r2, [r7, #0]
 8019ca0:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8019ca2:	f3bf 8f5f 	dmb	sy
 8019ca6:	e002      	b.n	8019cae <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8019ca8:	f04f 33ff 	mov.w	r3, #4294967295
 8019cac:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8019cae:	697b      	ldr	r3, [r7, #20]
 8019cb0:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8019cb4:	69fb      	ldr	r3, [r7, #28]
}
 8019cb6:	4618      	mov	r0, r3
 8019cb8:	3720      	adds	r7, #32
 8019cba:	46bd      	mov	sp, r7
 8019cbc:	bd80      	pop	{r7, pc}
 8019cbe:	bf00      	nop
 8019cc0:	2001ec68 	.word	0x2001ec68

08019cc4 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8019cc4:	b580      	push	{r7, lr}
 8019cc6:	b08a      	sub	sp, #40	; 0x28
 8019cc8:	af00      	add	r7, sp, #0
 8019cca:	60f8      	str	r0, [r7, #12]
 8019ccc:	60b9      	str	r1, [r7, #8]
 8019cce:	607a      	str	r2, [r7, #4]
 8019cd0:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8019cd2:	4b21      	ldr	r3, [pc, #132]	; (8019d58 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8019cd4:	623b      	str	r3, [r7, #32]
 8019cd6:	6a3b      	ldr	r3, [r7, #32]
 8019cd8:	781b      	ldrb	r3, [r3, #0]
 8019cda:	b2db      	uxtb	r3, r3
 8019cdc:	2b00      	cmp	r3, #0
 8019cde:	d101      	bne.n	8019ce4 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8019ce0:	f7ff fe8e 	bl	8019a00 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8019ce4:	4b1c      	ldr	r3, [pc, #112]	; (8019d58 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8019ce6:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8019ce8:	68fb      	ldr	r3, [r7, #12]
 8019cea:	2b02      	cmp	r3, #2
 8019cec:	d82c      	bhi.n	8019d48 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8019cee:	f3ef 8311 	mrs	r3, BASEPRI
 8019cf2:	f04f 0120 	mov.w	r1, #32
 8019cf6:	f381 8811 	msr	BASEPRI, r1
 8019cfa:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8019cfc:	68fa      	ldr	r2, [r7, #12]
 8019cfe:	4613      	mov	r3, r2
 8019d00:	005b      	lsls	r3, r3, #1
 8019d02:	4413      	add	r3, r2
 8019d04:	00db      	lsls	r3, r3, #3
 8019d06:	3360      	adds	r3, #96	; 0x60
 8019d08:	69fa      	ldr	r2, [r7, #28]
 8019d0a:	4413      	add	r3, r2
 8019d0c:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8019d0e:	68fb      	ldr	r3, [r7, #12]
 8019d10:	2b00      	cmp	r3, #0
 8019d12:	d00e      	beq.n	8019d32 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8019d14:	697b      	ldr	r3, [r7, #20]
 8019d16:	68ba      	ldr	r2, [r7, #8]
 8019d18:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8019d1a:	697b      	ldr	r3, [r7, #20]
 8019d1c:	687a      	ldr	r2, [r7, #4]
 8019d1e:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8019d20:	697b      	ldr	r3, [r7, #20]
 8019d22:	683a      	ldr	r2, [r7, #0]
 8019d24:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8019d26:	697b      	ldr	r3, [r7, #20]
 8019d28:	2200      	movs	r2, #0
 8019d2a:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8019d2c:	697b      	ldr	r3, [r7, #20]
 8019d2e:	2200      	movs	r2, #0
 8019d30:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8019d32:	697b      	ldr	r3, [r7, #20]
 8019d34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019d36:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8019d38:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8019d3c:	69bb      	ldr	r3, [r7, #24]
 8019d3e:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8019d42:	2300      	movs	r3, #0
 8019d44:	627b      	str	r3, [r7, #36]	; 0x24
 8019d46:	e002      	b.n	8019d4e <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8019d48:	f04f 33ff 	mov.w	r3, #4294967295
 8019d4c:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8019d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8019d50:	4618      	mov	r0, r3
 8019d52:	3728      	adds	r7, #40	; 0x28
 8019d54:	46bd      	mov	sp, r7
 8019d56:	bd80      	pop	{r7, pc}
 8019d58:	2001ec68 	.word	0x2001ec68

08019d5c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8019d5c:	b480      	push	{r7}
 8019d5e:	b087      	sub	sp, #28
 8019d60:	af00      	add	r7, sp, #0
 8019d62:	60f8      	str	r0, [r7, #12]
 8019d64:	60b9      	str	r1, [r7, #8]
 8019d66:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8019d68:	2300      	movs	r3, #0
 8019d6a:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 8019d6c:	68bb      	ldr	r3, [r7, #8]
 8019d6e:	2b00      	cmp	r3, #0
 8019d70:	d00f      	beq.n	8019d92 <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 8019d72:	e002      	b.n	8019d7a <_EncodeStr+0x1e>
      Len++;
 8019d74:	693b      	ldr	r3, [r7, #16]
 8019d76:	3301      	adds	r3, #1
 8019d78:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 8019d7a:	68ba      	ldr	r2, [r7, #8]
 8019d7c:	693b      	ldr	r3, [r7, #16]
 8019d7e:	4413      	add	r3, r2
 8019d80:	781b      	ldrb	r3, [r3, #0]
 8019d82:	2b00      	cmp	r3, #0
 8019d84:	d1f6      	bne.n	8019d74 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 8019d86:	693a      	ldr	r2, [r7, #16]
 8019d88:	687b      	ldr	r3, [r7, #4]
 8019d8a:	429a      	cmp	r2, r3
 8019d8c:	d901      	bls.n	8019d92 <_EncodeStr+0x36>
      Len = Limit;
 8019d8e:	687b      	ldr	r3, [r7, #4]
 8019d90:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8019d92:	693b      	ldr	r3, [r7, #16]
 8019d94:	2bfe      	cmp	r3, #254	; 0xfe
 8019d96:	d806      	bhi.n	8019da6 <_EncodeStr+0x4a>
    *pPayload++ = Len; 
 8019d98:	68fb      	ldr	r3, [r7, #12]
 8019d9a:	1c5a      	adds	r2, r3, #1
 8019d9c:	60fa      	str	r2, [r7, #12]
 8019d9e:	693a      	ldr	r2, [r7, #16]
 8019da0:	b2d2      	uxtb	r2, r2
 8019da2:	701a      	strb	r2, [r3, #0]
 8019da4:	e011      	b.n	8019dca <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 8019da6:	68fb      	ldr	r3, [r7, #12]
 8019da8:	1c5a      	adds	r2, r3, #1
 8019daa:	60fa      	str	r2, [r7, #12]
 8019dac:	22ff      	movs	r2, #255	; 0xff
 8019dae:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8019db0:	68fb      	ldr	r3, [r7, #12]
 8019db2:	1c5a      	adds	r2, r3, #1
 8019db4:	60fa      	str	r2, [r7, #12]
 8019db6:	693a      	ldr	r2, [r7, #16]
 8019db8:	b2d2      	uxtb	r2, r2
 8019dba:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8019dbc:	693b      	ldr	r3, [r7, #16]
 8019dbe:	0a19      	lsrs	r1, r3, #8
 8019dc0:	68fb      	ldr	r3, [r7, #12]
 8019dc2:	1c5a      	adds	r2, r3, #1
 8019dc4:	60fa      	str	r2, [r7, #12]
 8019dc6:	b2ca      	uxtb	r2, r1
 8019dc8:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8019dca:	2300      	movs	r3, #0
 8019dcc:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8019dce:	e00a      	b.n	8019de6 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 8019dd0:	68ba      	ldr	r2, [r7, #8]
 8019dd2:	1c53      	adds	r3, r2, #1
 8019dd4:	60bb      	str	r3, [r7, #8]
 8019dd6:	68fb      	ldr	r3, [r7, #12]
 8019dd8:	1c59      	adds	r1, r3, #1
 8019dda:	60f9      	str	r1, [r7, #12]
 8019ddc:	7812      	ldrb	r2, [r2, #0]
 8019dde:	701a      	strb	r2, [r3, #0]
    n++;
 8019de0:	697b      	ldr	r3, [r7, #20]
 8019de2:	3301      	adds	r3, #1
 8019de4:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8019de6:	697a      	ldr	r2, [r7, #20]
 8019de8:	693b      	ldr	r3, [r7, #16]
 8019dea:	429a      	cmp	r2, r3
 8019dec:	d3f0      	bcc.n	8019dd0 <_EncodeStr+0x74>
  }
  return pPayload;
 8019dee:	68fb      	ldr	r3, [r7, #12]
}
 8019df0:	4618      	mov	r0, r3
 8019df2:	371c      	adds	r7, #28
 8019df4:	46bd      	mov	sp, r7
 8019df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019dfa:	4770      	bx	lr

08019dfc <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8019dfc:	b480      	push	{r7}
 8019dfe:	b083      	sub	sp, #12
 8019e00:	af00      	add	r7, sp, #0
 8019e02:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8019e04:	687b      	ldr	r3, [r7, #4]
 8019e06:	3304      	adds	r3, #4
}
 8019e08:	4618      	mov	r0, r3
 8019e0a:	370c      	adds	r7, #12
 8019e0c:	46bd      	mov	sp, r7
 8019e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e12:	4770      	bx	lr

08019e14 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8019e14:	b580      	push	{r7, lr}
 8019e16:	b082      	sub	sp, #8
 8019e18:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8019e1a:	4b36      	ldr	r3, [pc, #216]	; (8019ef4 <_HandleIncomingPacket+0xe0>)
 8019e1c:	7e1b      	ldrb	r3, [r3, #24]
 8019e1e:	4618      	mov	r0, r3
 8019e20:	1cfb      	adds	r3, r7, #3
 8019e22:	2201      	movs	r2, #1
 8019e24:	4619      	mov	r1, r3
 8019e26:	f7ff fe43 	bl	8019ab0 <SEGGER_RTT_ReadNoLock>
 8019e2a:	4603      	mov	r3, r0
 8019e2c:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8019e2e:	687b      	ldr	r3, [r7, #4]
 8019e30:	2b00      	cmp	r3, #0
 8019e32:	dd54      	ble.n	8019ede <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8019e34:	78fb      	ldrb	r3, [r7, #3]
 8019e36:	2b80      	cmp	r3, #128	; 0x80
 8019e38:	d032      	beq.n	8019ea0 <_HandleIncomingPacket+0x8c>
 8019e3a:	2b80      	cmp	r3, #128	; 0x80
 8019e3c:	dc42      	bgt.n	8019ec4 <_HandleIncomingPacket+0xb0>
 8019e3e:	2b07      	cmp	r3, #7
 8019e40:	dc16      	bgt.n	8019e70 <_HandleIncomingPacket+0x5c>
 8019e42:	2b00      	cmp	r3, #0
 8019e44:	dd3e      	ble.n	8019ec4 <_HandleIncomingPacket+0xb0>
 8019e46:	3b01      	subs	r3, #1
 8019e48:	2b06      	cmp	r3, #6
 8019e4a:	d83b      	bhi.n	8019ec4 <_HandleIncomingPacket+0xb0>
 8019e4c:	a201      	add	r2, pc, #4	; (adr r2, 8019e54 <_HandleIncomingPacket+0x40>)
 8019e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019e52:	bf00      	nop
 8019e54:	08019e77 	.word	0x08019e77
 8019e58:	08019e7d 	.word	0x08019e7d
 8019e5c:	08019e83 	.word	0x08019e83
 8019e60:	08019e89 	.word	0x08019e89
 8019e64:	08019e8f 	.word	0x08019e8f
 8019e68:	08019e95 	.word	0x08019e95
 8019e6c:	08019e9b 	.word	0x08019e9b
 8019e70:	2b7f      	cmp	r3, #127	; 0x7f
 8019e72:	d036      	beq.n	8019ee2 <_HandleIncomingPacket+0xce>
 8019e74:	e026      	b.n	8019ec4 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8019e76:	f000 fba7 	bl	801a5c8 <SEGGER_SYSVIEW_Start>
      break;
 8019e7a:	e037      	b.n	8019eec <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8019e7c:	f000 fc5e 	bl	801a73c <SEGGER_SYSVIEW_Stop>
      break;
 8019e80:	e034      	b.n	8019eec <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8019e82:	f000 fe37 	bl	801aaf4 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8019e86:	e031      	b.n	8019eec <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8019e88:	f000 fdfc 	bl	801aa84 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8019e8c:	e02e      	b.n	8019eec <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8019e8e:	f000 fc7b 	bl	801a788 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8019e92:	e02b      	b.n	8019eec <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8019e94:	f000 fff0 	bl	801ae78 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8019e98:	e028      	b.n	8019eec <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8019e9a:	f000 ffcf 	bl	801ae3c <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8019e9e:	e025      	b.n	8019eec <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8019ea0:	4b14      	ldr	r3, [pc, #80]	; (8019ef4 <_HandleIncomingPacket+0xe0>)
 8019ea2:	7e1b      	ldrb	r3, [r3, #24]
 8019ea4:	4618      	mov	r0, r3
 8019ea6:	1cfb      	adds	r3, r7, #3
 8019ea8:	2201      	movs	r2, #1
 8019eaa:	4619      	mov	r1, r3
 8019eac:	f7ff fe00 	bl	8019ab0 <SEGGER_RTT_ReadNoLock>
 8019eb0:	4603      	mov	r3, r0
 8019eb2:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8019eb4:	687b      	ldr	r3, [r7, #4]
 8019eb6:	2b00      	cmp	r3, #0
 8019eb8:	dd15      	ble.n	8019ee6 <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8019eba:	78fb      	ldrb	r3, [r7, #3]
 8019ebc:	4618      	mov	r0, r3
 8019ebe:	f000 ff3d 	bl	801ad3c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8019ec2:	e010      	b.n	8019ee6 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8019ec4:	78fb      	ldrb	r3, [r7, #3]
 8019ec6:	b25b      	sxtb	r3, r3
 8019ec8:	2b00      	cmp	r3, #0
 8019eca:	da0e      	bge.n	8019eea <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8019ecc:	4b09      	ldr	r3, [pc, #36]	; (8019ef4 <_HandleIncomingPacket+0xe0>)
 8019ece:	7e1b      	ldrb	r3, [r3, #24]
 8019ed0:	4618      	mov	r0, r3
 8019ed2:	1cfb      	adds	r3, r7, #3
 8019ed4:	2201      	movs	r2, #1
 8019ed6:	4619      	mov	r1, r3
 8019ed8:	f7ff fdea 	bl	8019ab0 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8019edc:	e005      	b.n	8019eea <_HandleIncomingPacket+0xd6>
    }
  }
 8019ede:	bf00      	nop
 8019ee0:	e004      	b.n	8019eec <_HandleIncomingPacket+0xd8>
      break;
 8019ee2:	bf00      	nop
 8019ee4:	e002      	b.n	8019eec <_HandleIncomingPacket+0xd8>
      break;
 8019ee6:	bf00      	nop
 8019ee8:	e000      	b.n	8019eec <_HandleIncomingPacket+0xd8>
      break;
 8019eea:	bf00      	nop
}
 8019eec:	bf00      	nop
 8019eee:	3708      	adds	r7, #8
 8019ef0:	46bd      	mov	sp, r7
 8019ef2:	bd80      	pop	{r7, pc}
 8019ef4:	2001b4a8 	.word	0x2001b4a8

08019ef8 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8019ef8:	b580      	push	{r7, lr}
 8019efa:	b08c      	sub	sp, #48	; 0x30
 8019efc:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8019efe:	2301      	movs	r3, #1
 8019f00:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8019f02:	1d3b      	adds	r3, r7, #4
 8019f04:	3301      	adds	r3, #1
 8019f06:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8019f08:	69fb      	ldr	r3, [r7, #28]
 8019f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019f0c:	4b31      	ldr	r3, [pc, #196]	; (8019fd4 <_TrySendOverflowPacket+0xdc>)
 8019f0e:	695b      	ldr	r3, [r3, #20]
 8019f10:	62bb      	str	r3, [r7, #40]	; 0x28
 8019f12:	e00b      	b.n	8019f2c <_TrySendOverflowPacket+0x34>
 8019f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f16:	b2da      	uxtb	r2, r3
 8019f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f1a:	1c59      	adds	r1, r3, #1
 8019f1c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8019f1e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8019f22:	b2d2      	uxtb	r2, r2
 8019f24:	701a      	strb	r2, [r3, #0]
 8019f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f28:	09db      	lsrs	r3, r3, #7
 8019f2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8019f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f2e:	2b7f      	cmp	r3, #127	; 0x7f
 8019f30:	d8f0      	bhi.n	8019f14 <_TrySendOverflowPacket+0x1c>
 8019f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f34:	1c5a      	adds	r2, r3, #1
 8019f36:	62fa      	str	r2, [r7, #44]	; 0x2c
 8019f38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019f3a:	b2d2      	uxtb	r2, r2
 8019f3c:	701a      	strb	r2, [r3, #0]
 8019f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f40:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8019f42:	4b25      	ldr	r3, [pc, #148]	; (8019fd8 <_TrySendOverflowPacket+0xe0>)
 8019f44:	681b      	ldr	r3, [r3, #0]
 8019f46:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8019f48:	4b22      	ldr	r3, [pc, #136]	; (8019fd4 <_TrySendOverflowPacket+0xdc>)
 8019f4a:	68db      	ldr	r3, [r3, #12]
 8019f4c:	69ba      	ldr	r2, [r7, #24]
 8019f4e:	1ad3      	subs	r3, r2, r3
 8019f50:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8019f52:	69fb      	ldr	r3, [r7, #28]
 8019f54:	627b      	str	r3, [r7, #36]	; 0x24
 8019f56:	697b      	ldr	r3, [r7, #20]
 8019f58:	623b      	str	r3, [r7, #32]
 8019f5a:	e00b      	b.n	8019f74 <_TrySendOverflowPacket+0x7c>
 8019f5c:	6a3b      	ldr	r3, [r7, #32]
 8019f5e:	b2da      	uxtb	r2, r3
 8019f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f62:	1c59      	adds	r1, r3, #1
 8019f64:	6279      	str	r1, [r7, #36]	; 0x24
 8019f66:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8019f6a:	b2d2      	uxtb	r2, r2
 8019f6c:	701a      	strb	r2, [r3, #0]
 8019f6e:	6a3b      	ldr	r3, [r7, #32]
 8019f70:	09db      	lsrs	r3, r3, #7
 8019f72:	623b      	str	r3, [r7, #32]
 8019f74:	6a3b      	ldr	r3, [r7, #32]
 8019f76:	2b7f      	cmp	r3, #127	; 0x7f
 8019f78:	d8f0      	bhi.n	8019f5c <_TrySendOverflowPacket+0x64>
 8019f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f7c:	1c5a      	adds	r2, r3, #1
 8019f7e:	627a      	str	r2, [r7, #36]	; 0x24
 8019f80:	6a3a      	ldr	r2, [r7, #32]
 8019f82:	b2d2      	uxtb	r2, r2
 8019f84:	701a      	strb	r2, [r3, #0]
 8019f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f88:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8019f8a:	4b12      	ldr	r3, [pc, #72]	; (8019fd4 <_TrySendOverflowPacket+0xdc>)
 8019f8c:	785b      	ldrb	r3, [r3, #1]
 8019f8e:	4618      	mov	r0, r3
 8019f90:	1d3b      	adds	r3, r7, #4
 8019f92:	69fa      	ldr	r2, [r7, #28]
 8019f94:	1ad3      	subs	r3, r2, r3
 8019f96:	461a      	mov	r2, r3
 8019f98:	1d3b      	adds	r3, r7, #4
 8019f9a:	4619      	mov	r1, r3
 8019f9c:	f7e6 f918 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8019fa0:	4603      	mov	r3, r0
 8019fa2:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8019fa4:	693b      	ldr	r3, [r7, #16]
 8019fa6:	2b00      	cmp	r3, #0
 8019fa8:	d009      	beq.n	8019fbe <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8019faa:	4a0a      	ldr	r2, [pc, #40]	; (8019fd4 <_TrySendOverflowPacket+0xdc>)
 8019fac:	69bb      	ldr	r3, [r7, #24]
 8019fae:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8019fb0:	4b08      	ldr	r3, [pc, #32]	; (8019fd4 <_TrySendOverflowPacket+0xdc>)
 8019fb2:	781b      	ldrb	r3, [r3, #0]
 8019fb4:	3b01      	subs	r3, #1
 8019fb6:	b2da      	uxtb	r2, r3
 8019fb8:	4b06      	ldr	r3, [pc, #24]	; (8019fd4 <_TrySendOverflowPacket+0xdc>)
 8019fba:	701a      	strb	r2, [r3, #0]
 8019fbc:	e004      	b.n	8019fc8 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8019fbe:	4b05      	ldr	r3, [pc, #20]	; (8019fd4 <_TrySendOverflowPacket+0xdc>)
 8019fc0:	695b      	ldr	r3, [r3, #20]
 8019fc2:	3301      	adds	r3, #1
 8019fc4:	4a03      	ldr	r2, [pc, #12]	; (8019fd4 <_TrySendOverflowPacket+0xdc>)
 8019fc6:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8019fc8:	693b      	ldr	r3, [r7, #16]
}
 8019fca:	4618      	mov	r0, r3
 8019fcc:	3730      	adds	r7, #48	; 0x30
 8019fce:	46bd      	mov	sp, r7
 8019fd0:	bd80      	pop	{r7, pc}
 8019fd2:	bf00      	nop
 8019fd4:	2001b4a8 	.word	0x2001b4a8
 8019fd8:	e0001004 	.word	0xe0001004

08019fdc <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8019fdc:	b580      	push	{r7, lr}
 8019fde:	b08a      	sub	sp, #40	; 0x28
 8019fe0:	af00      	add	r7, sp, #0
 8019fe2:	60f8      	str	r0, [r7, #12]
 8019fe4:	60b9      	str	r1, [r7, #8]
 8019fe6:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8019fe8:	4b6c      	ldr	r3, [pc, #432]	; (801a19c <_SendPacket+0x1c0>)
 8019fea:	781b      	ldrb	r3, [r3, #0]
 8019fec:	2b01      	cmp	r3, #1
 8019fee:	d010      	beq.n	801a012 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8019ff0:	4b6a      	ldr	r3, [pc, #424]	; (801a19c <_SendPacket+0x1c0>)
 8019ff2:	781b      	ldrb	r3, [r3, #0]
 8019ff4:	2b00      	cmp	r3, #0
 8019ff6:	f000 80a3 	beq.w	801a140 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8019ffa:	4b68      	ldr	r3, [pc, #416]	; (801a19c <_SendPacket+0x1c0>)
 8019ffc:	781b      	ldrb	r3, [r3, #0]
 8019ffe:	2b02      	cmp	r3, #2
 801a000:	d109      	bne.n	801a016 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 801a002:	f7ff ff79 	bl	8019ef8 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 801a006:	4b65      	ldr	r3, [pc, #404]	; (801a19c <_SendPacket+0x1c0>)
 801a008:	781b      	ldrb	r3, [r3, #0]
 801a00a:	2b01      	cmp	r3, #1
 801a00c:	f040 809a 	bne.w	801a144 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 801a010:	e001      	b.n	801a016 <_SendPacket+0x3a>
    goto Send;
 801a012:	bf00      	nop
 801a014:	e000      	b.n	801a018 <_SendPacket+0x3c>
Send:
 801a016:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 801a018:	687b      	ldr	r3, [r7, #4]
 801a01a:	2b1f      	cmp	r3, #31
 801a01c:	d809      	bhi.n	801a032 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 801a01e:	4b5f      	ldr	r3, [pc, #380]	; (801a19c <_SendPacket+0x1c0>)
 801a020:	69da      	ldr	r2, [r3, #28]
 801a022:	687b      	ldr	r3, [r7, #4]
 801a024:	fa22 f303 	lsr.w	r3, r2, r3
 801a028:	f003 0301 	and.w	r3, r3, #1
 801a02c:	2b00      	cmp	r3, #0
 801a02e:	f040 808b 	bne.w	801a148 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 801a032:	687b      	ldr	r3, [r7, #4]
 801a034:	2b17      	cmp	r3, #23
 801a036:	d807      	bhi.n	801a048 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 801a038:	68fb      	ldr	r3, [r7, #12]
 801a03a:	3b01      	subs	r3, #1
 801a03c:	60fb      	str	r3, [r7, #12]
 801a03e:	687b      	ldr	r3, [r7, #4]
 801a040:	b2da      	uxtb	r2, r3
 801a042:	68fb      	ldr	r3, [r7, #12]
 801a044:	701a      	strb	r2, [r3, #0]
 801a046:	e03d      	b.n	801a0c4 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 801a048:	68ba      	ldr	r2, [r7, #8]
 801a04a:	68fb      	ldr	r3, [r7, #12]
 801a04c:	1ad3      	subs	r3, r2, r3
 801a04e:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 801a050:	69fb      	ldr	r3, [r7, #28]
 801a052:	2b7f      	cmp	r3, #127	; 0x7f
 801a054:	d912      	bls.n	801a07c <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 801a056:	69fb      	ldr	r3, [r7, #28]
 801a058:	09da      	lsrs	r2, r3, #7
 801a05a:	68fb      	ldr	r3, [r7, #12]
 801a05c:	3b01      	subs	r3, #1
 801a05e:	60fb      	str	r3, [r7, #12]
 801a060:	b2d2      	uxtb	r2, r2
 801a062:	68fb      	ldr	r3, [r7, #12]
 801a064:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 801a066:	69fb      	ldr	r3, [r7, #28]
 801a068:	b2db      	uxtb	r3, r3
 801a06a:	68fa      	ldr	r2, [r7, #12]
 801a06c:	3a01      	subs	r2, #1
 801a06e:	60fa      	str	r2, [r7, #12]
 801a070:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801a074:	b2da      	uxtb	r2, r3
 801a076:	68fb      	ldr	r3, [r7, #12]
 801a078:	701a      	strb	r2, [r3, #0]
 801a07a:	e006      	b.n	801a08a <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 801a07c:	68fb      	ldr	r3, [r7, #12]
 801a07e:	3b01      	subs	r3, #1
 801a080:	60fb      	str	r3, [r7, #12]
 801a082:	69fb      	ldr	r3, [r7, #28]
 801a084:	b2da      	uxtb	r2, r3
 801a086:	68fb      	ldr	r3, [r7, #12]
 801a088:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 801a08a:	687b      	ldr	r3, [r7, #4]
 801a08c:	2b7f      	cmp	r3, #127	; 0x7f
 801a08e:	d912      	bls.n	801a0b6 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 801a090:	687b      	ldr	r3, [r7, #4]
 801a092:	09da      	lsrs	r2, r3, #7
 801a094:	68fb      	ldr	r3, [r7, #12]
 801a096:	3b01      	subs	r3, #1
 801a098:	60fb      	str	r3, [r7, #12]
 801a09a:	b2d2      	uxtb	r2, r2
 801a09c:	68fb      	ldr	r3, [r7, #12]
 801a09e:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 801a0a0:	687b      	ldr	r3, [r7, #4]
 801a0a2:	b2db      	uxtb	r3, r3
 801a0a4:	68fa      	ldr	r2, [r7, #12]
 801a0a6:	3a01      	subs	r2, #1
 801a0a8:	60fa      	str	r2, [r7, #12]
 801a0aa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801a0ae:	b2da      	uxtb	r2, r3
 801a0b0:	68fb      	ldr	r3, [r7, #12]
 801a0b2:	701a      	strb	r2, [r3, #0]
 801a0b4:	e006      	b.n	801a0c4 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 801a0b6:	68fb      	ldr	r3, [r7, #12]
 801a0b8:	3b01      	subs	r3, #1
 801a0ba:	60fb      	str	r3, [r7, #12]
 801a0bc:	687b      	ldr	r3, [r7, #4]
 801a0be:	b2da      	uxtb	r2, r3
 801a0c0:	68fb      	ldr	r3, [r7, #12]
 801a0c2:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 801a0c4:	4b36      	ldr	r3, [pc, #216]	; (801a1a0 <_SendPacket+0x1c4>)
 801a0c6:	681b      	ldr	r3, [r3, #0]
 801a0c8:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 801a0ca:	4b34      	ldr	r3, [pc, #208]	; (801a19c <_SendPacket+0x1c0>)
 801a0cc:	68db      	ldr	r3, [r3, #12]
 801a0ce:	69ba      	ldr	r2, [r7, #24]
 801a0d0:	1ad3      	subs	r3, r2, r3
 801a0d2:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 801a0d4:	68bb      	ldr	r3, [r7, #8]
 801a0d6:	627b      	str	r3, [r7, #36]	; 0x24
 801a0d8:	697b      	ldr	r3, [r7, #20]
 801a0da:	623b      	str	r3, [r7, #32]
 801a0dc:	e00b      	b.n	801a0f6 <_SendPacket+0x11a>
 801a0de:	6a3b      	ldr	r3, [r7, #32]
 801a0e0:	b2da      	uxtb	r2, r3
 801a0e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a0e4:	1c59      	adds	r1, r3, #1
 801a0e6:	6279      	str	r1, [r7, #36]	; 0x24
 801a0e8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801a0ec:	b2d2      	uxtb	r2, r2
 801a0ee:	701a      	strb	r2, [r3, #0]
 801a0f0:	6a3b      	ldr	r3, [r7, #32]
 801a0f2:	09db      	lsrs	r3, r3, #7
 801a0f4:	623b      	str	r3, [r7, #32]
 801a0f6:	6a3b      	ldr	r3, [r7, #32]
 801a0f8:	2b7f      	cmp	r3, #127	; 0x7f
 801a0fa:	d8f0      	bhi.n	801a0de <_SendPacket+0x102>
 801a0fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a0fe:	1c5a      	adds	r2, r3, #1
 801a100:	627a      	str	r2, [r7, #36]	; 0x24
 801a102:	6a3a      	ldr	r2, [r7, #32]
 801a104:	b2d2      	uxtb	r2, r2
 801a106:	701a      	strb	r2, [r3, #0]
 801a108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a10a:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 801a10c:	4b23      	ldr	r3, [pc, #140]	; (801a19c <_SendPacket+0x1c0>)
 801a10e:	785b      	ldrb	r3, [r3, #1]
 801a110:	4618      	mov	r0, r3
 801a112:	68ba      	ldr	r2, [r7, #8]
 801a114:	68fb      	ldr	r3, [r7, #12]
 801a116:	1ad3      	subs	r3, r2, r3
 801a118:	461a      	mov	r2, r3
 801a11a:	68f9      	ldr	r1, [r7, #12]
 801a11c:	f7e6 f858 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 801a120:	4603      	mov	r3, r0
 801a122:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 801a124:	693b      	ldr	r3, [r7, #16]
 801a126:	2b00      	cmp	r3, #0
 801a128:	d003      	beq.n	801a132 <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 801a12a:	4a1c      	ldr	r2, [pc, #112]	; (801a19c <_SendPacket+0x1c0>)
 801a12c:	69bb      	ldr	r3, [r7, #24]
 801a12e:	60d3      	str	r3, [r2, #12]
 801a130:	e00b      	b.n	801a14a <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 801a132:	4b1a      	ldr	r3, [pc, #104]	; (801a19c <_SendPacket+0x1c0>)
 801a134:	781b      	ldrb	r3, [r3, #0]
 801a136:	3301      	adds	r3, #1
 801a138:	b2da      	uxtb	r2, r3
 801a13a:	4b18      	ldr	r3, [pc, #96]	; (801a19c <_SendPacket+0x1c0>)
 801a13c:	701a      	strb	r2, [r3, #0]
 801a13e:	e004      	b.n	801a14a <_SendPacket+0x16e>
    goto SendDone;
 801a140:	bf00      	nop
 801a142:	e002      	b.n	801a14a <_SendPacket+0x16e>
      goto SendDone;
 801a144:	bf00      	nop
 801a146:	e000      	b.n	801a14a <_SendPacket+0x16e>
      goto SendDone;
 801a148:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 801a14a:	4b14      	ldr	r3, [pc, #80]	; (801a19c <_SendPacket+0x1c0>)
 801a14c:	7e1b      	ldrb	r3, [r3, #24]
 801a14e:	4619      	mov	r1, r3
 801a150:	4a14      	ldr	r2, [pc, #80]	; (801a1a4 <_SendPacket+0x1c8>)
 801a152:	460b      	mov	r3, r1
 801a154:	005b      	lsls	r3, r3, #1
 801a156:	440b      	add	r3, r1
 801a158:	00db      	lsls	r3, r3, #3
 801a15a:	4413      	add	r3, r2
 801a15c:	336c      	adds	r3, #108	; 0x6c
 801a15e:	681a      	ldr	r2, [r3, #0]
 801a160:	4b0e      	ldr	r3, [pc, #56]	; (801a19c <_SendPacket+0x1c0>)
 801a162:	7e1b      	ldrb	r3, [r3, #24]
 801a164:	4618      	mov	r0, r3
 801a166:	490f      	ldr	r1, [pc, #60]	; (801a1a4 <_SendPacket+0x1c8>)
 801a168:	4603      	mov	r3, r0
 801a16a:	005b      	lsls	r3, r3, #1
 801a16c:	4403      	add	r3, r0
 801a16e:	00db      	lsls	r3, r3, #3
 801a170:	440b      	add	r3, r1
 801a172:	3370      	adds	r3, #112	; 0x70
 801a174:	681b      	ldr	r3, [r3, #0]
 801a176:	429a      	cmp	r2, r3
 801a178:	d00b      	beq.n	801a192 <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 801a17a:	4b08      	ldr	r3, [pc, #32]	; (801a19c <_SendPacket+0x1c0>)
 801a17c:	789b      	ldrb	r3, [r3, #2]
 801a17e:	2b00      	cmp	r3, #0
 801a180:	d107      	bne.n	801a192 <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 801a182:	4b06      	ldr	r3, [pc, #24]	; (801a19c <_SendPacket+0x1c0>)
 801a184:	2201      	movs	r2, #1
 801a186:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 801a188:	f7ff fe44 	bl	8019e14 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 801a18c:	4b03      	ldr	r3, [pc, #12]	; (801a19c <_SendPacket+0x1c0>)
 801a18e:	2200      	movs	r2, #0
 801a190:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 801a192:	bf00      	nop
 801a194:	3728      	adds	r7, #40	; 0x28
 801a196:	46bd      	mov	sp, r7
 801a198:	bd80      	pop	{r7, pc}
 801a19a:	bf00      	nop
 801a19c:	2001b4a8 	.word	0x2001b4a8
 801a1a0:	e0001004 	.word	0xe0001004
 801a1a4:	2001ec68 	.word	0x2001ec68

0801a1a8 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 801a1a8:	b580      	push	{r7, lr}
 801a1aa:	b086      	sub	sp, #24
 801a1ac:	af02      	add	r7, sp, #8
 801a1ae:	60f8      	str	r0, [r7, #12]
 801a1b0:	60b9      	str	r1, [r7, #8]
 801a1b2:	607a      	str	r2, [r7, #4]
 801a1b4:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 801a1b6:	2300      	movs	r3, #0
 801a1b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801a1bc:	4917      	ldr	r1, [pc, #92]	; (801a21c <SEGGER_SYSVIEW_Init+0x74>)
 801a1be:	4818      	ldr	r0, [pc, #96]	; (801a220 <SEGGER_SYSVIEW_Init+0x78>)
 801a1c0:	f7ff fcfc 	bl	8019bbc <SEGGER_RTT_AllocUpBuffer>
 801a1c4:	4603      	mov	r3, r0
 801a1c6:	b2da      	uxtb	r2, r3
 801a1c8:	4b16      	ldr	r3, [pc, #88]	; (801a224 <SEGGER_SYSVIEW_Init+0x7c>)
 801a1ca:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 801a1cc:	4b15      	ldr	r3, [pc, #84]	; (801a224 <SEGGER_SYSVIEW_Init+0x7c>)
 801a1ce:	785a      	ldrb	r2, [r3, #1]
 801a1d0:	4b14      	ldr	r3, [pc, #80]	; (801a224 <SEGGER_SYSVIEW_Init+0x7c>)
 801a1d2:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 801a1d4:	4b13      	ldr	r3, [pc, #76]	; (801a224 <SEGGER_SYSVIEW_Init+0x7c>)
 801a1d6:	7e1b      	ldrb	r3, [r3, #24]
 801a1d8:	4618      	mov	r0, r3
 801a1da:	2300      	movs	r3, #0
 801a1dc:	9300      	str	r3, [sp, #0]
 801a1de:	2308      	movs	r3, #8
 801a1e0:	4a11      	ldr	r2, [pc, #68]	; (801a228 <SEGGER_SYSVIEW_Init+0x80>)
 801a1e2:	490f      	ldr	r1, [pc, #60]	; (801a220 <SEGGER_SYSVIEW_Init+0x78>)
 801a1e4:	f7ff fd6e 	bl	8019cc4 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 801a1e8:	4b0e      	ldr	r3, [pc, #56]	; (801a224 <SEGGER_SYSVIEW_Init+0x7c>)
 801a1ea:	2200      	movs	r2, #0
 801a1ec:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 801a1ee:	4b0f      	ldr	r3, [pc, #60]	; (801a22c <SEGGER_SYSVIEW_Init+0x84>)
 801a1f0:	681b      	ldr	r3, [r3, #0]
 801a1f2:	4a0c      	ldr	r2, [pc, #48]	; (801a224 <SEGGER_SYSVIEW_Init+0x7c>)
 801a1f4:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 801a1f6:	4a0b      	ldr	r2, [pc, #44]	; (801a224 <SEGGER_SYSVIEW_Init+0x7c>)
 801a1f8:	687b      	ldr	r3, [r7, #4]
 801a1fa:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 801a1fc:	4a09      	ldr	r2, [pc, #36]	; (801a224 <SEGGER_SYSVIEW_Init+0x7c>)
 801a1fe:	68fb      	ldr	r3, [r7, #12]
 801a200:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 801a202:	4a08      	ldr	r2, [pc, #32]	; (801a224 <SEGGER_SYSVIEW_Init+0x7c>)
 801a204:	68bb      	ldr	r3, [r7, #8]
 801a206:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 801a208:	4a06      	ldr	r2, [pc, #24]	; (801a224 <SEGGER_SYSVIEW_Init+0x7c>)
 801a20a:	683b      	ldr	r3, [r7, #0]
 801a20c:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 801a20e:	4b05      	ldr	r3, [pc, #20]	; (801a224 <SEGGER_SYSVIEW_Init+0x7c>)
 801a210:	2200      	movs	r2, #0
 801a212:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 801a214:	bf00      	nop
 801a216:	3710      	adds	r7, #16
 801a218:	46bd      	mov	sp, r7
 801a21a:	bd80      	pop	{r7, pc}
 801a21c:	2001b0a0 	.word	0x2001b0a0
 801a220:	0801bdb4 	.word	0x0801bdb4
 801a224:	2001b4a8 	.word	0x2001b4a8
 801a228:	2001b4a0 	.word	0x2001b4a0
 801a22c:	e0001004 	.word	0xe0001004

0801a230 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 801a230:	b480      	push	{r7}
 801a232:	b083      	sub	sp, #12
 801a234:	af00      	add	r7, sp, #0
 801a236:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 801a238:	4a04      	ldr	r2, [pc, #16]	; (801a24c <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 801a23a:	687b      	ldr	r3, [r7, #4]
 801a23c:	6113      	str	r3, [r2, #16]
}
 801a23e:	bf00      	nop
 801a240:	370c      	adds	r7, #12
 801a242:	46bd      	mov	sp, r7
 801a244:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a248:	4770      	bx	lr
 801a24a:	bf00      	nop
 801a24c:	2001b4a8 	.word	0x2001b4a8

0801a250 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 801a250:	b580      	push	{r7, lr}
 801a252:	b084      	sub	sp, #16
 801a254:	af00      	add	r7, sp, #0
 801a256:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 801a258:	f3ef 8311 	mrs	r3, BASEPRI
 801a25c:	f04f 0120 	mov.w	r1, #32
 801a260:	f381 8811 	msr	BASEPRI, r1
 801a264:	60fb      	str	r3, [r7, #12]
 801a266:	4808      	ldr	r0, [pc, #32]	; (801a288 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 801a268:	f7ff fdc8 	bl	8019dfc <_PreparePacket>
 801a26c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 801a26e:	687a      	ldr	r2, [r7, #4]
 801a270:	68b9      	ldr	r1, [r7, #8]
 801a272:	68b8      	ldr	r0, [r7, #8]
 801a274:	f7ff feb2 	bl	8019fdc <_SendPacket>
  RECORD_END();
 801a278:	68fb      	ldr	r3, [r7, #12]
 801a27a:	f383 8811 	msr	BASEPRI, r3
}
 801a27e:	bf00      	nop
 801a280:	3710      	adds	r7, #16
 801a282:	46bd      	mov	sp, r7
 801a284:	bd80      	pop	{r7, pc}
 801a286:	bf00      	nop
 801a288:	2001b4d8 	.word	0x2001b4d8

0801a28c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 801a28c:	b580      	push	{r7, lr}
 801a28e:	b088      	sub	sp, #32
 801a290:	af00      	add	r7, sp, #0
 801a292:	6078      	str	r0, [r7, #4]
 801a294:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 801a296:	f3ef 8311 	mrs	r3, BASEPRI
 801a29a:	f04f 0120 	mov.w	r1, #32
 801a29e:	f381 8811 	msr	BASEPRI, r1
 801a2a2:	617b      	str	r3, [r7, #20]
 801a2a4:	4816      	ldr	r0, [pc, #88]	; (801a300 <SEGGER_SYSVIEW_RecordU32+0x74>)
 801a2a6:	f7ff fda9 	bl	8019dfc <_PreparePacket>
 801a2aa:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 801a2ac:	693b      	ldr	r3, [r7, #16]
 801a2ae:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 801a2b0:	68fb      	ldr	r3, [r7, #12]
 801a2b2:	61fb      	str	r3, [r7, #28]
 801a2b4:	683b      	ldr	r3, [r7, #0]
 801a2b6:	61bb      	str	r3, [r7, #24]
 801a2b8:	e00b      	b.n	801a2d2 <SEGGER_SYSVIEW_RecordU32+0x46>
 801a2ba:	69bb      	ldr	r3, [r7, #24]
 801a2bc:	b2da      	uxtb	r2, r3
 801a2be:	69fb      	ldr	r3, [r7, #28]
 801a2c0:	1c59      	adds	r1, r3, #1
 801a2c2:	61f9      	str	r1, [r7, #28]
 801a2c4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801a2c8:	b2d2      	uxtb	r2, r2
 801a2ca:	701a      	strb	r2, [r3, #0]
 801a2cc:	69bb      	ldr	r3, [r7, #24]
 801a2ce:	09db      	lsrs	r3, r3, #7
 801a2d0:	61bb      	str	r3, [r7, #24]
 801a2d2:	69bb      	ldr	r3, [r7, #24]
 801a2d4:	2b7f      	cmp	r3, #127	; 0x7f
 801a2d6:	d8f0      	bhi.n	801a2ba <SEGGER_SYSVIEW_RecordU32+0x2e>
 801a2d8:	69fb      	ldr	r3, [r7, #28]
 801a2da:	1c5a      	adds	r2, r3, #1
 801a2dc:	61fa      	str	r2, [r7, #28]
 801a2de:	69ba      	ldr	r2, [r7, #24]
 801a2e0:	b2d2      	uxtb	r2, r2
 801a2e2:	701a      	strb	r2, [r3, #0]
 801a2e4:	69fb      	ldr	r3, [r7, #28]
 801a2e6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 801a2e8:	687a      	ldr	r2, [r7, #4]
 801a2ea:	68f9      	ldr	r1, [r7, #12]
 801a2ec:	6938      	ldr	r0, [r7, #16]
 801a2ee:	f7ff fe75 	bl	8019fdc <_SendPacket>
  RECORD_END();
 801a2f2:	697b      	ldr	r3, [r7, #20]
 801a2f4:	f383 8811 	msr	BASEPRI, r3
}
 801a2f8:	bf00      	nop
 801a2fa:	3720      	adds	r7, #32
 801a2fc:	46bd      	mov	sp, r7
 801a2fe:	bd80      	pop	{r7, pc}
 801a300:	2001b4d8 	.word	0x2001b4d8

0801a304 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 801a304:	b580      	push	{r7, lr}
 801a306:	b08c      	sub	sp, #48	; 0x30
 801a308:	af00      	add	r7, sp, #0
 801a30a:	60f8      	str	r0, [r7, #12]
 801a30c:	60b9      	str	r1, [r7, #8]
 801a30e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 801a310:	f3ef 8311 	mrs	r3, BASEPRI
 801a314:	f04f 0120 	mov.w	r1, #32
 801a318:	f381 8811 	msr	BASEPRI, r1
 801a31c:	61fb      	str	r3, [r7, #28]
 801a31e:	4825      	ldr	r0, [pc, #148]	; (801a3b4 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 801a320:	f7ff fd6c 	bl	8019dfc <_PreparePacket>
 801a324:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 801a326:	69bb      	ldr	r3, [r7, #24]
 801a328:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 801a32a:	697b      	ldr	r3, [r7, #20]
 801a32c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a32e:	68bb      	ldr	r3, [r7, #8]
 801a330:	62bb      	str	r3, [r7, #40]	; 0x28
 801a332:	e00b      	b.n	801a34c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 801a334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a336:	b2da      	uxtb	r2, r3
 801a338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a33a:	1c59      	adds	r1, r3, #1
 801a33c:	62f9      	str	r1, [r7, #44]	; 0x2c
 801a33e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801a342:	b2d2      	uxtb	r2, r2
 801a344:	701a      	strb	r2, [r3, #0]
 801a346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a348:	09db      	lsrs	r3, r3, #7
 801a34a:	62bb      	str	r3, [r7, #40]	; 0x28
 801a34c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a34e:	2b7f      	cmp	r3, #127	; 0x7f
 801a350:	d8f0      	bhi.n	801a334 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 801a352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a354:	1c5a      	adds	r2, r3, #1
 801a356:	62fa      	str	r2, [r7, #44]	; 0x2c
 801a358:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a35a:	b2d2      	uxtb	r2, r2
 801a35c:	701a      	strb	r2, [r3, #0]
 801a35e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a360:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 801a362:	697b      	ldr	r3, [r7, #20]
 801a364:	627b      	str	r3, [r7, #36]	; 0x24
 801a366:	687b      	ldr	r3, [r7, #4]
 801a368:	623b      	str	r3, [r7, #32]
 801a36a:	e00b      	b.n	801a384 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 801a36c:	6a3b      	ldr	r3, [r7, #32]
 801a36e:	b2da      	uxtb	r2, r3
 801a370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a372:	1c59      	adds	r1, r3, #1
 801a374:	6279      	str	r1, [r7, #36]	; 0x24
 801a376:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801a37a:	b2d2      	uxtb	r2, r2
 801a37c:	701a      	strb	r2, [r3, #0]
 801a37e:	6a3b      	ldr	r3, [r7, #32]
 801a380:	09db      	lsrs	r3, r3, #7
 801a382:	623b      	str	r3, [r7, #32]
 801a384:	6a3b      	ldr	r3, [r7, #32]
 801a386:	2b7f      	cmp	r3, #127	; 0x7f
 801a388:	d8f0      	bhi.n	801a36c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 801a38a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a38c:	1c5a      	adds	r2, r3, #1
 801a38e:	627a      	str	r2, [r7, #36]	; 0x24
 801a390:	6a3a      	ldr	r2, [r7, #32]
 801a392:	b2d2      	uxtb	r2, r2
 801a394:	701a      	strb	r2, [r3, #0]
 801a396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a398:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 801a39a:	68fa      	ldr	r2, [r7, #12]
 801a39c:	6979      	ldr	r1, [r7, #20]
 801a39e:	69b8      	ldr	r0, [r7, #24]
 801a3a0:	f7ff fe1c 	bl	8019fdc <_SendPacket>
  RECORD_END();
 801a3a4:	69fb      	ldr	r3, [r7, #28]
 801a3a6:	f383 8811 	msr	BASEPRI, r3
}
 801a3aa:	bf00      	nop
 801a3ac:	3730      	adds	r7, #48	; 0x30
 801a3ae:	46bd      	mov	sp, r7
 801a3b0:	bd80      	pop	{r7, pc}
 801a3b2:	bf00      	nop
 801a3b4:	2001b4d8 	.word	0x2001b4d8

0801a3b8 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 801a3b8:	b580      	push	{r7, lr}
 801a3ba:	b08e      	sub	sp, #56	; 0x38
 801a3bc:	af00      	add	r7, sp, #0
 801a3be:	60f8      	str	r0, [r7, #12]
 801a3c0:	60b9      	str	r1, [r7, #8]
 801a3c2:	607a      	str	r2, [r7, #4]
 801a3c4:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 801a3c6:	f3ef 8311 	mrs	r3, BASEPRI
 801a3ca:	f04f 0120 	mov.w	r1, #32
 801a3ce:	f381 8811 	msr	BASEPRI, r1
 801a3d2:	61fb      	str	r3, [r7, #28]
 801a3d4:	4832      	ldr	r0, [pc, #200]	; (801a4a0 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 801a3d6:	f7ff fd11 	bl	8019dfc <_PreparePacket>
 801a3da:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 801a3dc:	69bb      	ldr	r3, [r7, #24]
 801a3de:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 801a3e0:	697b      	ldr	r3, [r7, #20]
 801a3e2:	637b      	str	r3, [r7, #52]	; 0x34
 801a3e4:	68bb      	ldr	r3, [r7, #8]
 801a3e6:	633b      	str	r3, [r7, #48]	; 0x30
 801a3e8:	e00b      	b.n	801a402 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 801a3ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a3ec:	b2da      	uxtb	r2, r3
 801a3ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a3f0:	1c59      	adds	r1, r3, #1
 801a3f2:	6379      	str	r1, [r7, #52]	; 0x34
 801a3f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801a3f8:	b2d2      	uxtb	r2, r2
 801a3fa:	701a      	strb	r2, [r3, #0]
 801a3fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a3fe:	09db      	lsrs	r3, r3, #7
 801a400:	633b      	str	r3, [r7, #48]	; 0x30
 801a402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a404:	2b7f      	cmp	r3, #127	; 0x7f
 801a406:	d8f0      	bhi.n	801a3ea <SEGGER_SYSVIEW_RecordU32x3+0x32>
 801a408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a40a:	1c5a      	adds	r2, r3, #1
 801a40c:	637a      	str	r2, [r7, #52]	; 0x34
 801a40e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a410:	b2d2      	uxtb	r2, r2
 801a412:	701a      	strb	r2, [r3, #0]
 801a414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a416:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 801a418:	697b      	ldr	r3, [r7, #20]
 801a41a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a41c:	687b      	ldr	r3, [r7, #4]
 801a41e:	62bb      	str	r3, [r7, #40]	; 0x28
 801a420:	e00b      	b.n	801a43a <SEGGER_SYSVIEW_RecordU32x3+0x82>
 801a422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a424:	b2da      	uxtb	r2, r3
 801a426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a428:	1c59      	adds	r1, r3, #1
 801a42a:	62f9      	str	r1, [r7, #44]	; 0x2c
 801a42c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801a430:	b2d2      	uxtb	r2, r2
 801a432:	701a      	strb	r2, [r3, #0]
 801a434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a436:	09db      	lsrs	r3, r3, #7
 801a438:	62bb      	str	r3, [r7, #40]	; 0x28
 801a43a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a43c:	2b7f      	cmp	r3, #127	; 0x7f
 801a43e:	d8f0      	bhi.n	801a422 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 801a440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a442:	1c5a      	adds	r2, r3, #1
 801a444:	62fa      	str	r2, [r7, #44]	; 0x2c
 801a446:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a448:	b2d2      	uxtb	r2, r2
 801a44a:	701a      	strb	r2, [r3, #0]
 801a44c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a44e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 801a450:	697b      	ldr	r3, [r7, #20]
 801a452:	627b      	str	r3, [r7, #36]	; 0x24
 801a454:	683b      	ldr	r3, [r7, #0]
 801a456:	623b      	str	r3, [r7, #32]
 801a458:	e00b      	b.n	801a472 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 801a45a:	6a3b      	ldr	r3, [r7, #32]
 801a45c:	b2da      	uxtb	r2, r3
 801a45e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a460:	1c59      	adds	r1, r3, #1
 801a462:	6279      	str	r1, [r7, #36]	; 0x24
 801a464:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801a468:	b2d2      	uxtb	r2, r2
 801a46a:	701a      	strb	r2, [r3, #0]
 801a46c:	6a3b      	ldr	r3, [r7, #32]
 801a46e:	09db      	lsrs	r3, r3, #7
 801a470:	623b      	str	r3, [r7, #32]
 801a472:	6a3b      	ldr	r3, [r7, #32]
 801a474:	2b7f      	cmp	r3, #127	; 0x7f
 801a476:	d8f0      	bhi.n	801a45a <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 801a478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a47a:	1c5a      	adds	r2, r3, #1
 801a47c:	627a      	str	r2, [r7, #36]	; 0x24
 801a47e:	6a3a      	ldr	r2, [r7, #32]
 801a480:	b2d2      	uxtb	r2, r2
 801a482:	701a      	strb	r2, [r3, #0]
 801a484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a486:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 801a488:	68fa      	ldr	r2, [r7, #12]
 801a48a:	6979      	ldr	r1, [r7, #20]
 801a48c:	69b8      	ldr	r0, [r7, #24]
 801a48e:	f7ff fda5 	bl	8019fdc <_SendPacket>
  RECORD_END();
 801a492:	69fb      	ldr	r3, [r7, #28]
 801a494:	f383 8811 	msr	BASEPRI, r3
}
 801a498:	bf00      	nop
 801a49a:	3738      	adds	r7, #56	; 0x38
 801a49c:	46bd      	mov	sp, r7
 801a49e:	bd80      	pop	{r7, pc}
 801a4a0:	2001b4d8 	.word	0x2001b4d8

0801a4a4 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 801a4a4:	b580      	push	{r7, lr}
 801a4a6:	b090      	sub	sp, #64	; 0x40
 801a4a8:	af00      	add	r7, sp, #0
 801a4aa:	60f8      	str	r0, [r7, #12]
 801a4ac:	60b9      	str	r1, [r7, #8]
 801a4ae:	607a      	str	r2, [r7, #4]
 801a4b0:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 801a4b2:	f3ef 8311 	mrs	r3, BASEPRI
 801a4b6:	f04f 0120 	mov.w	r1, #32
 801a4ba:	f381 8811 	msr	BASEPRI, r1
 801a4be:	61fb      	str	r3, [r7, #28]
 801a4c0:	4840      	ldr	r0, [pc, #256]	; (801a5c4 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 801a4c2:	f7ff fc9b 	bl	8019dfc <_PreparePacket>
 801a4c6:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 801a4c8:	69bb      	ldr	r3, [r7, #24]
 801a4ca:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 801a4cc:	697b      	ldr	r3, [r7, #20]
 801a4ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 801a4d0:	68bb      	ldr	r3, [r7, #8]
 801a4d2:	63bb      	str	r3, [r7, #56]	; 0x38
 801a4d4:	e00b      	b.n	801a4ee <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 801a4d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a4d8:	b2da      	uxtb	r2, r3
 801a4da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a4dc:	1c59      	adds	r1, r3, #1
 801a4de:	63f9      	str	r1, [r7, #60]	; 0x3c
 801a4e0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801a4e4:	b2d2      	uxtb	r2, r2
 801a4e6:	701a      	strb	r2, [r3, #0]
 801a4e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a4ea:	09db      	lsrs	r3, r3, #7
 801a4ec:	63bb      	str	r3, [r7, #56]	; 0x38
 801a4ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a4f0:	2b7f      	cmp	r3, #127	; 0x7f
 801a4f2:	d8f0      	bhi.n	801a4d6 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 801a4f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a4f6:	1c5a      	adds	r2, r3, #1
 801a4f8:	63fa      	str	r2, [r7, #60]	; 0x3c
 801a4fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801a4fc:	b2d2      	uxtb	r2, r2
 801a4fe:	701a      	strb	r2, [r3, #0]
 801a500:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a502:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 801a504:	697b      	ldr	r3, [r7, #20]
 801a506:	637b      	str	r3, [r7, #52]	; 0x34
 801a508:	687b      	ldr	r3, [r7, #4]
 801a50a:	633b      	str	r3, [r7, #48]	; 0x30
 801a50c:	e00b      	b.n	801a526 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 801a50e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a510:	b2da      	uxtb	r2, r3
 801a512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a514:	1c59      	adds	r1, r3, #1
 801a516:	6379      	str	r1, [r7, #52]	; 0x34
 801a518:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801a51c:	b2d2      	uxtb	r2, r2
 801a51e:	701a      	strb	r2, [r3, #0]
 801a520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a522:	09db      	lsrs	r3, r3, #7
 801a524:	633b      	str	r3, [r7, #48]	; 0x30
 801a526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a528:	2b7f      	cmp	r3, #127	; 0x7f
 801a52a:	d8f0      	bhi.n	801a50e <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 801a52c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a52e:	1c5a      	adds	r2, r3, #1
 801a530:	637a      	str	r2, [r7, #52]	; 0x34
 801a532:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a534:	b2d2      	uxtb	r2, r2
 801a536:	701a      	strb	r2, [r3, #0]
 801a538:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a53a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 801a53c:	697b      	ldr	r3, [r7, #20]
 801a53e:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a540:	683b      	ldr	r3, [r7, #0]
 801a542:	62bb      	str	r3, [r7, #40]	; 0x28
 801a544:	e00b      	b.n	801a55e <SEGGER_SYSVIEW_RecordU32x4+0xba>
 801a546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a548:	b2da      	uxtb	r2, r3
 801a54a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a54c:	1c59      	adds	r1, r3, #1
 801a54e:	62f9      	str	r1, [r7, #44]	; 0x2c
 801a550:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801a554:	b2d2      	uxtb	r2, r2
 801a556:	701a      	strb	r2, [r3, #0]
 801a558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a55a:	09db      	lsrs	r3, r3, #7
 801a55c:	62bb      	str	r3, [r7, #40]	; 0x28
 801a55e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a560:	2b7f      	cmp	r3, #127	; 0x7f
 801a562:	d8f0      	bhi.n	801a546 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 801a564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a566:	1c5a      	adds	r2, r3, #1
 801a568:	62fa      	str	r2, [r7, #44]	; 0x2c
 801a56a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a56c:	b2d2      	uxtb	r2, r2
 801a56e:	701a      	strb	r2, [r3, #0]
 801a570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a572:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 801a574:	697b      	ldr	r3, [r7, #20]
 801a576:	627b      	str	r3, [r7, #36]	; 0x24
 801a578:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a57a:	623b      	str	r3, [r7, #32]
 801a57c:	e00b      	b.n	801a596 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 801a57e:	6a3b      	ldr	r3, [r7, #32]
 801a580:	b2da      	uxtb	r2, r3
 801a582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a584:	1c59      	adds	r1, r3, #1
 801a586:	6279      	str	r1, [r7, #36]	; 0x24
 801a588:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801a58c:	b2d2      	uxtb	r2, r2
 801a58e:	701a      	strb	r2, [r3, #0]
 801a590:	6a3b      	ldr	r3, [r7, #32]
 801a592:	09db      	lsrs	r3, r3, #7
 801a594:	623b      	str	r3, [r7, #32]
 801a596:	6a3b      	ldr	r3, [r7, #32]
 801a598:	2b7f      	cmp	r3, #127	; 0x7f
 801a59a:	d8f0      	bhi.n	801a57e <SEGGER_SYSVIEW_RecordU32x4+0xda>
 801a59c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a59e:	1c5a      	adds	r2, r3, #1
 801a5a0:	627a      	str	r2, [r7, #36]	; 0x24
 801a5a2:	6a3a      	ldr	r2, [r7, #32]
 801a5a4:	b2d2      	uxtb	r2, r2
 801a5a6:	701a      	strb	r2, [r3, #0]
 801a5a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a5aa:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 801a5ac:	68fa      	ldr	r2, [r7, #12]
 801a5ae:	6979      	ldr	r1, [r7, #20]
 801a5b0:	69b8      	ldr	r0, [r7, #24]
 801a5b2:	f7ff fd13 	bl	8019fdc <_SendPacket>
  RECORD_END();
 801a5b6:	69fb      	ldr	r3, [r7, #28]
 801a5b8:	f383 8811 	msr	BASEPRI, r3
}
 801a5bc:	bf00      	nop
 801a5be:	3740      	adds	r7, #64	; 0x40
 801a5c0:	46bd      	mov	sp, r7
 801a5c2:	bd80      	pop	{r7, pc}
 801a5c4:	2001b4d8 	.word	0x2001b4d8

0801a5c8 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 801a5c8:	b580      	push	{r7, lr}
 801a5ca:	b08c      	sub	sp, #48	; 0x30
 801a5cc:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 801a5ce:	4b58      	ldr	r3, [pc, #352]	; (801a730 <SEGGER_SYSVIEW_Start+0x168>)
 801a5d0:	2201      	movs	r2, #1
 801a5d2:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 801a5d4:	f3ef 8311 	mrs	r3, BASEPRI
 801a5d8:	f04f 0120 	mov.w	r1, #32
 801a5dc:	f381 8811 	msr	BASEPRI, r1
 801a5e0:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 801a5e2:	4b53      	ldr	r3, [pc, #332]	; (801a730 <SEGGER_SYSVIEW_Start+0x168>)
 801a5e4:	785b      	ldrb	r3, [r3, #1]
 801a5e6:	220a      	movs	r2, #10
 801a5e8:	4952      	ldr	r1, [pc, #328]	; (801a734 <SEGGER_SYSVIEW_Start+0x16c>)
 801a5ea:	4618      	mov	r0, r3
 801a5ec:	f7e5 fdf0 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 801a5f0:	68fb      	ldr	r3, [r7, #12]
 801a5f2:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 801a5f6:	200a      	movs	r0, #10
 801a5f8:	f7ff fe2a 	bl	801a250 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 801a5fc:	f3ef 8311 	mrs	r3, BASEPRI
 801a600:	f04f 0120 	mov.w	r1, #32
 801a604:	f381 8811 	msr	BASEPRI, r1
 801a608:	60bb      	str	r3, [r7, #8]
 801a60a:	484b      	ldr	r0, [pc, #300]	; (801a738 <SEGGER_SYSVIEW_Start+0x170>)
 801a60c:	f7ff fbf6 	bl	8019dfc <_PreparePacket>
 801a610:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 801a612:	687b      	ldr	r3, [r7, #4]
 801a614:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 801a616:	683b      	ldr	r3, [r7, #0]
 801a618:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a61a:	4b45      	ldr	r3, [pc, #276]	; (801a730 <SEGGER_SYSVIEW_Start+0x168>)
 801a61c:	685b      	ldr	r3, [r3, #4]
 801a61e:	62bb      	str	r3, [r7, #40]	; 0x28
 801a620:	e00b      	b.n	801a63a <SEGGER_SYSVIEW_Start+0x72>
 801a622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a624:	b2da      	uxtb	r2, r3
 801a626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a628:	1c59      	adds	r1, r3, #1
 801a62a:	62f9      	str	r1, [r7, #44]	; 0x2c
 801a62c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801a630:	b2d2      	uxtb	r2, r2
 801a632:	701a      	strb	r2, [r3, #0]
 801a634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a636:	09db      	lsrs	r3, r3, #7
 801a638:	62bb      	str	r3, [r7, #40]	; 0x28
 801a63a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a63c:	2b7f      	cmp	r3, #127	; 0x7f
 801a63e:	d8f0      	bhi.n	801a622 <SEGGER_SYSVIEW_Start+0x5a>
 801a640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a642:	1c5a      	adds	r2, r3, #1
 801a644:	62fa      	str	r2, [r7, #44]	; 0x2c
 801a646:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a648:	b2d2      	uxtb	r2, r2
 801a64a:	701a      	strb	r2, [r3, #0]
 801a64c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a64e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 801a650:	683b      	ldr	r3, [r7, #0]
 801a652:	627b      	str	r3, [r7, #36]	; 0x24
 801a654:	4b36      	ldr	r3, [pc, #216]	; (801a730 <SEGGER_SYSVIEW_Start+0x168>)
 801a656:	689b      	ldr	r3, [r3, #8]
 801a658:	623b      	str	r3, [r7, #32]
 801a65a:	e00b      	b.n	801a674 <SEGGER_SYSVIEW_Start+0xac>
 801a65c:	6a3b      	ldr	r3, [r7, #32]
 801a65e:	b2da      	uxtb	r2, r3
 801a660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a662:	1c59      	adds	r1, r3, #1
 801a664:	6279      	str	r1, [r7, #36]	; 0x24
 801a666:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801a66a:	b2d2      	uxtb	r2, r2
 801a66c:	701a      	strb	r2, [r3, #0]
 801a66e:	6a3b      	ldr	r3, [r7, #32]
 801a670:	09db      	lsrs	r3, r3, #7
 801a672:	623b      	str	r3, [r7, #32]
 801a674:	6a3b      	ldr	r3, [r7, #32]
 801a676:	2b7f      	cmp	r3, #127	; 0x7f
 801a678:	d8f0      	bhi.n	801a65c <SEGGER_SYSVIEW_Start+0x94>
 801a67a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a67c:	1c5a      	adds	r2, r3, #1
 801a67e:	627a      	str	r2, [r7, #36]	; 0x24
 801a680:	6a3a      	ldr	r2, [r7, #32]
 801a682:	b2d2      	uxtb	r2, r2
 801a684:	701a      	strb	r2, [r3, #0]
 801a686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a688:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 801a68a:	683b      	ldr	r3, [r7, #0]
 801a68c:	61fb      	str	r3, [r7, #28]
 801a68e:	4b28      	ldr	r3, [pc, #160]	; (801a730 <SEGGER_SYSVIEW_Start+0x168>)
 801a690:	691b      	ldr	r3, [r3, #16]
 801a692:	61bb      	str	r3, [r7, #24]
 801a694:	e00b      	b.n	801a6ae <SEGGER_SYSVIEW_Start+0xe6>
 801a696:	69bb      	ldr	r3, [r7, #24]
 801a698:	b2da      	uxtb	r2, r3
 801a69a:	69fb      	ldr	r3, [r7, #28]
 801a69c:	1c59      	adds	r1, r3, #1
 801a69e:	61f9      	str	r1, [r7, #28]
 801a6a0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801a6a4:	b2d2      	uxtb	r2, r2
 801a6a6:	701a      	strb	r2, [r3, #0]
 801a6a8:	69bb      	ldr	r3, [r7, #24]
 801a6aa:	09db      	lsrs	r3, r3, #7
 801a6ac:	61bb      	str	r3, [r7, #24]
 801a6ae:	69bb      	ldr	r3, [r7, #24]
 801a6b0:	2b7f      	cmp	r3, #127	; 0x7f
 801a6b2:	d8f0      	bhi.n	801a696 <SEGGER_SYSVIEW_Start+0xce>
 801a6b4:	69fb      	ldr	r3, [r7, #28]
 801a6b6:	1c5a      	adds	r2, r3, #1
 801a6b8:	61fa      	str	r2, [r7, #28]
 801a6ba:	69ba      	ldr	r2, [r7, #24]
 801a6bc:	b2d2      	uxtb	r2, r2
 801a6be:	701a      	strb	r2, [r3, #0]
 801a6c0:	69fb      	ldr	r3, [r7, #28]
 801a6c2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 801a6c4:	683b      	ldr	r3, [r7, #0]
 801a6c6:	617b      	str	r3, [r7, #20]
 801a6c8:	2300      	movs	r3, #0
 801a6ca:	613b      	str	r3, [r7, #16]
 801a6cc:	e00b      	b.n	801a6e6 <SEGGER_SYSVIEW_Start+0x11e>
 801a6ce:	693b      	ldr	r3, [r7, #16]
 801a6d0:	b2da      	uxtb	r2, r3
 801a6d2:	697b      	ldr	r3, [r7, #20]
 801a6d4:	1c59      	adds	r1, r3, #1
 801a6d6:	6179      	str	r1, [r7, #20]
 801a6d8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801a6dc:	b2d2      	uxtb	r2, r2
 801a6de:	701a      	strb	r2, [r3, #0]
 801a6e0:	693b      	ldr	r3, [r7, #16]
 801a6e2:	09db      	lsrs	r3, r3, #7
 801a6e4:	613b      	str	r3, [r7, #16]
 801a6e6:	693b      	ldr	r3, [r7, #16]
 801a6e8:	2b7f      	cmp	r3, #127	; 0x7f
 801a6ea:	d8f0      	bhi.n	801a6ce <SEGGER_SYSVIEW_Start+0x106>
 801a6ec:	697b      	ldr	r3, [r7, #20]
 801a6ee:	1c5a      	adds	r2, r3, #1
 801a6f0:	617a      	str	r2, [r7, #20]
 801a6f2:	693a      	ldr	r2, [r7, #16]
 801a6f4:	b2d2      	uxtb	r2, r2
 801a6f6:	701a      	strb	r2, [r3, #0]
 801a6f8:	697b      	ldr	r3, [r7, #20]
 801a6fa:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 801a6fc:	2218      	movs	r2, #24
 801a6fe:	6839      	ldr	r1, [r7, #0]
 801a700:	6878      	ldr	r0, [r7, #4]
 801a702:	f7ff fc6b 	bl	8019fdc <_SendPacket>
      RECORD_END();
 801a706:	68bb      	ldr	r3, [r7, #8]
 801a708:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 801a70c:	4b08      	ldr	r3, [pc, #32]	; (801a730 <SEGGER_SYSVIEW_Start+0x168>)
 801a70e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a710:	2b00      	cmp	r3, #0
 801a712:	d002      	beq.n	801a71a <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 801a714:	4b06      	ldr	r3, [pc, #24]	; (801a730 <SEGGER_SYSVIEW_Start+0x168>)
 801a716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a718:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 801a71a:	f000 f9eb 	bl	801aaf4 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 801a71e:	f000 f9b1 	bl	801aa84 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 801a722:	f000 fba9 	bl	801ae78 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 801a726:	bf00      	nop
 801a728:	3730      	adds	r7, #48	; 0x30
 801a72a:	46bd      	mov	sp, r7
 801a72c:	bd80      	pop	{r7, pc}
 801a72e:	bf00      	nop
 801a730:	2001b4a8 	.word	0x2001b4a8
 801a734:	0801c3e8 	.word	0x0801c3e8
 801a738:	2001b4d8 	.word	0x2001b4d8

0801a73c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 801a73c:	b580      	push	{r7, lr}
 801a73e:	b082      	sub	sp, #8
 801a740:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 801a742:	f3ef 8311 	mrs	r3, BASEPRI
 801a746:	f04f 0120 	mov.w	r1, #32
 801a74a:	f381 8811 	msr	BASEPRI, r1
 801a74e:	607b      	str	r3, [r7, #4]
 801a750:	480b      	ldr	r0, [pc, #44]	; (801a780 <SEGGER_SYSVIEW_Stop+0x44>)
 801a752:	f7ff fb53 	bl	8019dfc <_PreparePacket>
 801a756:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 801a758:	4b0a      	ldr	r3, [pc, #40]	; (801a784 <SEGGER_SYSVIEW_Stop+0x48>)
 801a75a:	781b      	ldrb	r3, [r3, #0]
 801a75c:	2b00      	cmp	r3, #0
 801a75e:	d007      	beq.n	801a770 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 801a760:	220b      	movs	r2, #11
 801a762:	6839      	ldr	r1, [r7, #0]
 801a764:	6838      	ldr	r0, [r7, #0]
 801a766:	f7ff fc39 	bl	8019fdc <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 801a76a:	4b06      	ldr	r3, [pc, #24]	; (801a784 <SEGGER_SYSVIEW_Stop+0x48>)
 801a76c:	2200      	movs	r2, #0
 801a76e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 801a770:	687b      	ldr	r3, [r7, #4]
 801a772:	f383 8811 	msr	BASEPRI, r3
}
 801a776:	bf00      	nop
 801a778:	3708      	adds	r7, #8
 801a77a:	46bd      	mov	sp, r7
 801a77c:	bd80      	pop	{r7, pc}
 801a77e:	bf00      	nop
 801a780:	2001b4d8 	.word	0x2001b4d8
 801a784:	2001b4a8 	.word	0x2001b4a8

0801a788 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 801a788:	b580      	push	{r7, lr}
 801a78a:	b08c      	sub	sp, #48	; 0x30
 801a78c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 801a78e:	f3ef 8311 	mrs	r3, BASEPRI
 801a792:	f04f 0120 	mov.w	r1, #32
 801a796:	f381 8811 	msr	BASEPRI, r1
 801a79a:	60fb      	str	r3, [r7, #12]
 801a79c:	4845      	ldr	r0, [pc, #276]	; (801a8b4 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 801a79e:	f7ff fb2d 	bl	8019dfc <_PreparePacket>
 801a7a2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 801a7a4:	68bb      	ldr	r3, [r7, #8]
 801a7a6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 801a7a8:	687b      	ldr	r3, [r7, #4]
 801a7aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a7ac:	4b42      	ldr	r3, [pc, #264]	; (801a8b8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 801a7ae:	685b      	ldr	r3, [r3, #4]
 801a7b0:	62bb      	str	r3, [r7, #40]	; 0x28
 801a7b2:	e00b      	b.n	801a7cc <SEGGER_SYSVIEW_GetSysDesc+0x44>
 801a7b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a7b6:	b2da      	uxtb	r2, r3
 801a7b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a7ba:	1c59      	adds	r1, r3, #1
 801a7bc:	62f9      	str	r1, [r7, #44]	; 0x2c
 801a7be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801a7c2:	b2d2      	uxtb	r2, r2
 801a7c4:	701a      	strb	r2, [r3, #0]
 801a7c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a7c8:	09db      	lsrs	r3, r3, #7
 801a7ca:	62bb      	str	r3, [r7, #40]	; 0x28
 801a7cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a7ce:	2b7f      	cmp	r3, #127	; 0x7f
 801a7d0:	d8f0      	bhi.n	801a7b4 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 801a7d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a7d4:	1c5a      	adds	r2, r3, #1
 801a7d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 801a7d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a7da:	b2d2      	uxtb	r2, r2
 801a7dc:	701a      	strb	r2, [r3, #0]
 801a7de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a7e0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 801a7e2:	687b      	ldr	r3, [r7, #4]
 801a7e4:	627b      	str	r3, [r7, #36]	; 0x24
 801a7e6:	4b34      	ldr	r3, [pc, #208]	; (801a8b8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 801a7e8:	689b      	ldr	r3, [r3, #8]
 801a7ea:	623b      	str	r3, [r7, #32]
 801a7ec:	e00b      	b.n	801a806 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 801a7ee:	6a3b      	ldr	r3, [r7, #32]
 801a7f0:	b2da      	uxtb	r2, r3
 801a7f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a7f4:	1c59      	adds	r1, r3, #1
 801a7f6:	6279      	str	r1, [r7, #36]	; 0x24
 801a7f8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801a7fc:	b2d2      	uxtb	r2, r2
 801a7fe:	701a      	strb	r2, [r3, #0]
 801a800:	6a3b      	ldr	r3, [r7, #32]
 801a802:	09db      	lsrs	r3, r3, #7
 801a804:	623b      	str	r3, [r7, #32]
 801a806:	6a3b      	ldr	r3, [r7, #32]
 801a808:	2b7f      	cmp	r3, #127	; 0x7f
 801a80a:	d8f0      	bhi.n	801a7ee <SEGGER_SYSVIEW_GetSysDesc+0x66>
 801a80c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a80e:	1c5a      	adds	r2, r3, #1
 801a810:	627a      	str	r2, [r7, #36]	; 0x24
 801a812:	6a3a      	ldr	r2, [r7, #32]
 801a814:	b2d2      	uxtb	r2, r2
 801a816:	701a      	strb	r2, [r3, #0]
 801a818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a81a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 801a81c:	687b      	ldr	r3, [r7, #4]
 801a81e:	61fb      	str	r3, [r7, #28]
 801a820:	4b25      	ldr	r3, [pc, #148]	; (801a8b8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 801a822:	691b      	ldr	r3, [r3, #16]
 801a824:	61bb      	str	r3, [r7, #24]
 801a826:	e00b      	b.n	801a840 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 801a828:	69bb      	ldr	r3, [r7, #24]
 801a82a:	b2da      	uxtb	r2, r3
 801a82c:	69fb      	ldr	r3, [r7, #28]
 801a82e:	1c59      	adds	r1, r3, #1
 801a830:	61f9      	str	r1, [r7, #28]
 801a832:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801a836:	b2d2      	uxtb	r2, r2
 801a838:	701a      	strb	r2, [r3, #0]
 801a83a:	69bb      	ldr	r3, [r7, #24]
 801a83c:	09db      	lsrs	r3, r3, #7
 801a83e:	61bb      	str	r3, [r7, #24]
 801a840:	69bb      	ldr	r3, [r7, #24]
 801a842:	2b7f      	cmp	r3, #127	; 0x7f
 801a844:	d8f0      	bhi.n	801a828 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 801a846:	69fb      	ldr	r3, [r7, #28]
 801a848:	1c5a      	adds	r2, r3, #1
 801a84a:	61fa      	str	r2, [r7, #28]
 801a84c:	69ba      	ldr	r2, [r7, #24]
 801a84e:	b2d2      	uxtb	r2, r2
 801a850:	701a      	strb	r2, [r3, #0]
 801a852:	69fb      	ldr	r3, [r7, #28]
 801a854:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 801a856:	687b      	ldr	r3, [r7, #4]
 801a858:	617b      	str	r3, [r7, #20]
 801a85a:	2300      	movs	r3, #0
 801a85c:	613b      	str	r3, [r7, #16]
 801a85e:	e00b      	b.n	801a878 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 801a860:	693b      	ldr	r3, [r7, #16]
 801a862:	b2da      	uxtb	r2, r3
 801a864:	697b      	ldr	r3, [r7, #20]
 801a866:	1c59      	adds	r1, r3, #1
 801a868:	6179      	str	r1, [r7, #20]
 801a86a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801a86e:	b2d2      	uxtb	r2, r2
 801a870:	701a      	strb	r2, [r3, #0]
 801a872:	693b      	ldr	r3, [r7, #16]
 801a874:	09db      	lsrs	r3, r3, #7
 801a876:	613b      	str	r3, [r7, #16]
 801a878:	693b      	ldr	r3, [r7, #16]
 801a87a:	2b7f      	cmp	r3, #127	; 0x7f
 801a87c:	d8f0      	bhi.n	801a860 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 801a87e:	697b      	ldr	r3, [r7, #20]
 801a880:	1c5a      	adds	r2, r3, #1
 801a882:	617a      	str	r2, [r7, #20]
 801a884:	693a      	ldr	r2, [r7, #16]
 801a886:	b2d2      	uxtb	r2, r2
 801a888:	701a      	strb	r2, [r3, #0]
 801a88a:	697b      	ldr	r3, [r7, #20]
 801a88c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 801a88e:	2218      	movs	r2, #24
 801a890:	6879      	ldr	r1, [r7, #4]
 801a892:	68b8      	ldr	r0, [r7, #8]
 801a894:	f7ff fba2 	bl	8019fdc <_SendPacket>
  RECORD_END();
 801a898:	68fb      	ldr	r3, [r7, #12]
 801a89a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 801a89e:	4b06      	ldr	r3, [pc, #24]	; (801a8b8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 801a8a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a8a2:	2b00      	cmp	r3, #0
 801a8a4:	d002      	beq.n	801a8ac <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 801a8a6:	4b04      	ldr	r3, [pc, #16]	; (801a8b8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 801a8a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a8aa:	4798      	blx	r3
  }
}
 801a8ac:	bf00      	nop
 801a8ae:	3730      	adds	r7, #48	; 0x30
 801a8b0:	46bd      	mov	sp, r7
 801a8b2:	bd80      	pop	{r7, pc}
 801a8b4:	2001b4d8 	.word	0x2001b4d8
 801a8b8:	2001b4a8 	.word	0x2001b4a8

0801a8bc <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 801a8bc:	b580      	push	{r7, lr}
 801a8be:	b092      	sub	sp, #72	; 0x48
 801a8c0:	af00      	add	r7, sp, #0
 801a8c2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 801a8c4:	f3ef 8311 	mrs	r3, BASEPRI
 801a8c8:	f04f 0120 	mov.w	r1, #32
 801a8cc:	f381 8811 	msr	BASEPRI, r1
 801a8d0:	617b      	str	r3, [r7, #20]
 801a8d2:	486a      	ldr	r0, [pc, #424]	; (801aa7c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 801a8d4:	f7ff fa92 	bl	8019dfc <_PreparePacket>
 801a8d8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 801a8da:	693b      	ldr	r3, [r7, #16]
 801a8dc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 801a8de:	68fb      	ldr	r3, [r7, #12]
 801a8e0:	647b      	str	r3, [r7, #68]	; 0x44
 801a8e2:	687b      	ldr	r3, [r7, #4]
 801a8e4:	681a      	ldr	r2, [r3, #0]
 801a8e6:	4b66      	ldr	r3, [pc, #408]	; (801aa80 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 801a8e8:	691b      	ldr	r3, [r3, #16]
 801a8ea:	1ad3      	subs	r3, r2, r3
 801a8ec:	643b      	str	r3, [r7, #64]	; 0x40
 801a8ee:	e00b      	b.n	801a908 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 801a8f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a8f2:	b2da      	uxtb	r2, r3
 801a8f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a8f6:	1c59      	adds	r1, r3, #1
 801a8f8:	6479      	str	r1, [r7, #68]	; 0x44
 801a8fa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801a8fe:	b2d2      	uxtb	r2, r2
 801a900:	701a      	strb	r2, [r3, #0]
 801a902:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a904:	09db      	lsrs	r3, r3, #7
 801a906:	643b      	str	r3, [r7, #64]	; 0x40
 801a908:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a90a:	2b7f      	cmp	r3, #127	; 0x7f
 801a90c:	d8f0      	bhi.n	801a8f0 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 801a90e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a910:	1c5a      	adds	r2, r3, #1
 801a912:	647a      	str	r2, [r7, #68]	; 0x44
 801a914:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801a916:	b2d2      	uxtb	r2, r2
 801a918:	701a      	strb	r2, [r3, #0]
 801a91a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a91c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 801a91e:	68fb      	ldr	r3, [r7, #12]
 801a920:	63fb      	str	r3, [r7, #60]	; 0x3c
 801a922:	687b      	ldr	r3, [r7, #4]
 801a924:	689b      	ldr	r3, [r3, #8]
 801a926:	63bb      	str	r3, [r7, #56]	; 0x38
 801a928:	e00b      	b.n	801a942 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 801a92a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a92c:	b2da      	uxtb	r2, r3
 801a92e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a930:	1c59      	adds	r1, r3, #1
 801a932:	63f9      	str	r1, [r7, #60]	; 0x3c
 801a934:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801a938:	b2d2      	uxtb	r2, r2
 801a93a:	701a      	strb	r2, [r3, #0]
 801a93c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a93e:	09db      	lsrs	r3, r3, #7
 801a940:	63bb      	str	r3, [r7, #56]	; 0x38
 801a942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a944:	2b7f      	cmp	r3, #127	; 0x7f
 801a946:	d8f0      	bhi.n	801a92a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 801a948:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a94a:	1c5a      	adds	r2, r3, #1
 801a94c:	63fa      	str	r2, [r7, #60]	; 0x3c
 801a94e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801a950:	b2d2      	uxtb	r2, r2
 801a952:	701a      	strb	r2, [r3, #0]
 801a954:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a956:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 801a958:	687b      	ldr	r3, [r7, #4]
 801a95a:	685b      	ldr	r3, [r3, #4]
 801a95c:	2220      	movs	r2, #32
 801a95e:	4619      	mov	r1, r3
 801a960:	68f8      	ldr	r0, [r7, #12]
 801a962:	f7ff f9fb 	bl	8019d5c <_EncodeStr>
 801a966:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 801a968:	2209      	movs	r2, #9
 801a96a:	68f9      	ldr	r1, [r7, #12]
 801a96c:	6938      	ldr	r0, [r7, #16]
 801a96e:	f7ff fb35 	bl	8019fdc <_SendPacket>
  //
  pPayload = pPayloadStart;
 801a972:	693b      	ldr	r3, [r7, #16]
 801a974:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 801a976:	68fb      	ldr	r3, [r7, #12]
 801a978:	637b      	str	r3, [r7, #52]	; 0x34
 801a97a:	687b      	ldr	r3, [r7, #4]
 801a97c:	681a      	ldr	r2, [r3, #0]
 801a97e:	4b40      	ldr	r3, [pc, #256]	; (801aa80 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 801a980:	691b      	ldr	r3, [r3, #16]
 801a982:	1ad3      	subs	r3, r2, r3
 801a984:	633b      	str	r3, [r7, #48]	; 0x30
 801a986:	e00b      	b.n	801a9a0 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 801a988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a98a:	b2da      	uxtb	r2, r3
 801a98c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a98e:	1c59      	adds	r1, r3, #1
 801a990:	6379      	str	r1, [r7, #52]	; 0x34
 801a992:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801a996:	b2d2      	uxtb	r2, r2
 801a998:	701a      	strb	r2, [r3, #0]
 801a99a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a99c:	09db      	lsrs	r3, r3, #7
 801a99e:	633b      	str	r3, [r7, #48]	; 0x30
 801a9a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a9a2:	2b7f      	cmp	r3, #127	; 0x7f
 801a9a4:	d8f0      	bhi.n	801a988 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 801a9a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a9a8:	1c5a      	adds	r2, r3, #1
 801a9aa:	637a      	str	r2, [r7, #52]	; 0x34
 801a9ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a9ae:	b2d2      	uxtb	r2, r2
 801a9b0:	701a      	strb	r2, [r3, #0]
 801a9b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a9b4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 801a9b6:	68fb      	ldr	r3, [r7, #12]
 801a9b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a9ba:	687b      	ldr	r3, [r7, #4]
 801a9bc:	68db      	ldr	r3, [r3, #12]
 801a9be:	62bb      	str	r3, [r7, #40]	; 0x28
 801a9c0:	e00b      	b.n	801a9da <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 801a9c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a9c4:	b2da      	uxtb	r2, r3
 801a9c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a9c8:	1c59      	adds	r1, r3, #1
 801a9ca:	62f9      	str	r1, [r7, #44]	; 0x2c
 801a9cc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801a9d0:	b2d2      	uxtb	r2, r2
 801a9d2:	701a      	strb	r2, [r3, #0]
 801a9d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a9d6:	09db      	lsrs	r3, r3, #7
 801a9d8:	62bb      	str	r3, [r7, #40]	; 0x28
 801a9da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a9dc:	2b7f      	cmp	r3, #127	; 0x7f
 801a9de:	d8f0      	bhi.n	801a9c2 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 801a9e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a9e2:	1c5a      	adds	r2, r3, #1
 801a9e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 801a9e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a9e8:	b2d2      	uxtb	r2, r2
 801a9ea:	701a      	strb	r2, [r3, #0]
 801a9ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a9ee:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 801a9f0:	68fb      	ldr	r3, [r7, #12]
 801a9f2:	627b      	str	r3, [r7, #36]	; 0x24
 801a9f4:	687b      	ldr	r3, [r7, #4]
 801a9f6:	691b      	ldr	r3, [r3, #16]
 801a9f8:	623b      	str	r3, [r7, #32]
 801a9fa:	e00b      	b.n	801aa14 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 801a9fc:	6a3b      	ldr	r3, [r7, #32]
 801a9fe:	b2da      	uxtb	r2, r3
 801aa00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aa02:	1c59      	adds	r1, r3, #1
 801aa04:	6279      	str	r1, [r7, #36]	; 0x24
 801aa06:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801aa0a:	b2d2      	uxtb	r2, r2
 801aa0c:	701a      	strb	r2, [r3, #0]
 801aa0e:	6a3b      	ldr	r3, [r7, #32]
 801aa10:	09db      	lsrs	r3, r3, #7
 801aa12:	623b      	str	r3, [r7, #32]
 801aa14:	6a3b      	ldr	r3, [r7, #32]
 801aa16:	2b7f      	cmp	r3, #127	; 0x7f
 801aa18:	d8f0      	bhi.n	801a9fc <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 801aa1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aa1c:	1c5a      	adds	r2, r3, #1
 801aa1e:	627a      	str	r2, [r7, #36]	; 0x24
 801aa20:	6a3a      	ldr	r2, [r7, #32]
 801aa22:	b2d2      	uxtb	r2, r2
 801aa24:	701a      	strb	r2, [r3, #0]
 801aa26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aa28:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 801aa2a:	68fb      	ldr	r3, [r7, #12]
 801aa2c:	61fb      	str	r3, [r7, #28]
 801aa2e:	2300      	movs	r3, #0
 801aa30:	61bb      	str	r3, [r7, #24]
 801aa32:	e00b      	b.n	801aa4c <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 801aa34:	69bb      	ldr	r3, [r7, #24]
 801aa36:	b2da      	uxtb	r2, r3
 801aa38:	69fb      	ldr	r3, [r7, #28]
 801aa3a:	1c59      	adds	r1, r3, #1
 801aa3c:	61f9      	str	r1, [r7, #28]
 801aa3e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801aa42:	b2d2      	uxtb	r2, r2
 801aa44:	701a      	strb	r2, [r3, #0]
 801aa46:	69bb      	ldr	r3, [r7, #24]
 801aa48:	09db      	lsrs	r3, r3, #7
 801aa4a:	61bb      	str	r3, [r7, #24]
 801aa4c:	69bb      	ldr	r3, [r7, #24]
 801aa4e:	2b7f      	cmp	r3, #127	; 0x7f
 801aa50:	d8f0      	bhi.n	801aa34 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 801aa52:	69fb      	ldr	r3, [r7, #28]
 801aa54:	1c5a      	adds	r2, r3, #1
 801aa56:	61fa      	str	r2, [r7, #28]
 801aa58:	69ba      	ldr	r2, [r7, #24]
 801aa5a:	b2d2      	uxtb	r2, r2
 801aa5c:	701a      	strb	r2, [r3, #0]
 801aa5e:	69fb      	ldr	r3, [r7, #28]
 801aa60:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 801aa62:	2215      	movs	r2, #21
 801aa64:	68f9      	ldr	r1, [r7, #12]
 801aa66:	6938      	ldr	r0, [r7, #16]
 801aa68:	f7ff fab8 	bl	8019fdc <_SendPacket>
  RECORD_END();
 801aa6c:	697b      	ldr	r3, [r7, #20]
 801aa6e:	f383 8811 	msr	BASEPRI, r3
}
 801aa72:	bf00      	nop
 801aa74:	3748      	adds	r7, #72	; 0x48
 801aa76:	46bd      	mov	sp, r7
 801aa78:	bd80      	pop	{r7, pc}
 801aa7a:	bf00      	nop
 801aa7c:	2001b4d8 	.word	0x2001b4d8
 801aa80:	2001b4a8 	.word	0x2001b4a8

0801aa84 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 801aa84:	b580      	push	{r7, lr}
 801aa86:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 801aa88:	4b07      	ldr	r3, [pc, #28]	; (801aaa8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 801aa8a:	6a1b      	ldr	r3, [r3, #32]
 801aa8c:	2b00      	cmp	r3, #0
 801aa8e:	d008      	beq.n	801aaa2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 801aa90:	4b05      	ldr	r3, [pc, #20]	; (801aaa8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 801aa92:	6a1b      	ldr	r3, [r3, #32]
 801aa94:	685b      	ldr	r3, [r3, #4]
 801aa96:	2b00      	cmp	r3, #0
 801aa98:	d003      	beq.n	801aaa2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 801aa9a:	4b03      	ldr	r3, [pc, #12]	; (801aaa8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 801aa9c:	6a1b      	ldr	r3, [r3, #32]
 801aa9e:	685b      	ldr	r3, [r3, #4]
 801aaa0:	4798      	blx	r3
  }
}
 801aaa2:	bf00      	nop
 801aaa4:	bd80      	pop	{r7, pc}
 801aaa6:	bf00      	nop
 801aaa8:	2001b4a8 	.word	0x2001b4a8

0801aaac <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 801aaac:	b580      	push	{r7, lr}
 801aaae:	b086      	sub	sp, #24
 801aab0:	af00      	add	r7, sp, #0
 801aab2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 801aab4:	f3ef 8311 	mrs	r3, BASEPRI
 801aab8:	f04f 0120 	mov.w	r1, #32
 801aabc:	f381 8811 	msr	BASEPRI, r1
 801aac0:	617b      	str	r3, [r7, #20]
 801aac2:	480b      	ldr	r0, [pc, #44]	; (801aaf0 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 801aac4:	f7ff f99a 	bl	8019dfc <_PreparePacket>
 801aac8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 801aaca:	2280      	movs	r2, #128	; 0x80
 801aacc:	6879      	ldr	r1, [r7, #4]
 801aace:	6938      	ldr	r0, [r7, #16]
 801aad0:	f7ff f944 	bl	8019d5c <_EncodeStr>
 801aad4:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 801aad6:	220e      	movs	r2, #14
 801aad8:	68f9      	ldr	r1, [r7, #12]
 801aada:	6938      	ldr	r0, [r7, #16]
 801aadc:	f7ff fa7e 	bl	8019fdc <_SendPacket>
  RECORD_END();
 801aae0:	697b      	ldr	r3, [r7, #20]
 801aae2:	f383 8811 	msr	BASEPRI, r3
}
 801aae6:	bf00      	nop
 801aae8:	3718      	adds	r7, #24
 801aaea:	46bd      	mov	sp, r7
 801aaec:	bd80      	pop	{r7, pc}
 801aaee:	bf00      	nop
 801aaf0:	2001b4d8 	.word	0x2001b4d8

0801aaf4 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 801aaf4:	b590      	push	{r4, r7, lr}
 801aaf6:	b083      	sub	sp, #12
 801aaf8:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 801aafa:	4b15      	ldr	r3, [pc, #84]	; (801ab50 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 801aafc:	6a1b      	ldr	r3, [r3, #32]
 801aafe:	2b00      	cmp	r3, #0
 801ab00:	d01a      	beq.n	801ab38 <SEGGER_SYSVIEW_RecordSystime+0x44>
 801ab02:	4b13      	ldr	r3, [pc, #76]	; (801ab50 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 801ab04:	6a1b      	ldr	r3, [r3, #32]
 801ab06:	681b      	ldr	r3, [r3, #0]
 801ab08:	2b00      	cmp	r3, #0
 801ab0a:	d015      	beq.n	801ab38 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 801ab0c:	4b10      	ldr	r3, [pc, #64]	; (801ab50 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 801ab0e:	6a1b      	ldr	r3, [r3, #32]
 801ab10:	681b      	ldr	r3, [r3, #0]
 801ab12:	4798      	blx	r3
 801ab14:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 801ab18:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 801ab1a:	e9d7 0100 	ldrd	r0, r1, [r7]
 801ab1e:	f04f 0200 	mov.w	r2, #0
 801ab22:	f04f 0300 	mov.w	r3, #0
 801ab26:	000a      	movs	r2, r1
 801ab28:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 801ab2a:	4613      	mov	r3, r2
 801ab2c:	461a      	mov	r2, r3
 801ab2e:	4621      	mov	r1, r4
 801ab30:	200d      	movs	r0, #13
 801ab32:	f7ff fbe7 	bl	801a304 <SEGGER_SYSVIEW_RecordU32x2>
 801ab36:	e006      	b.n	801ab46 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 801ab38:	4b06      	ldr	r3, [pc, #24]	; (801ab54 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 801ab3a:	681b      	ldr	r3, [r3, #0]
 801ab3c:	4619      	mov	r1, r3
 801ab3e:	200c      	movs	r0, #12
 801ab40:	f7ff fba4 	bl	801a28c <SEGGER_SYSVIEW_RecordU32>
  }
}
 801ab44:	bf00      	nop
 801ab46:	bf00      	nop
 801ab48:	370c      	adds	r7, #12
 801ab4a:	46bd      	mov	sp, r7
 801ab4c:	bd90      	pop	{r4, r7, pc}
 801ab4e:	bf00      	nop
 801ab50:	2001b4a8 	.word	0x2001b4a8
 801ab54:	e0001004 	.word	0xe0001004

0801ab58 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 801ab58:	b580      	push	{r7, lr}
 801ab5a:	b082      	sub	sp, #8
 801ab5c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 801ab5e:	f3ef 8311 	mrs	r3, BASEPRI
 801ab62:	f04f 0120 	mov.w	r1, #32
 801ab66:	f381 8811 	msr	BASEPRI, r1
 801ab6a:	607b      	str	r3, [r7, #4]
 801ab6c:	4807      	ldr	r0, [pc, #28]	; (801ab8c <SEGGER_SYSVIEW_OnIdle+0x34>)
 801ab6e:	f7ff f945 	bl	8019dfc <_PreparePacket>
 801ab72:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 801ab74:	2211      	movs	r2, #17
 801ab76:	6839      	ldr	r1, [r7, #0]
 801ab78:	6838      	ldr	r0, [r7, #0]
 801ab7a:	f7ff fa2f 	bl	8019fdc <_SendPacket>
  RECORD_END();
 801ab7e:	687b      	ldr	r3, [r7, #4]
 801ab80:	f383 8811 	msr	BASEPRI, r3
}
 801ab84:	bf00      	nop
 801ab86:	3708      	adds	r7, #8
 801ab88:	46bd      	mov	sp, r7
 801ab8a:	bd80      	pop	{r7, pc}
 801ab8c:	2001b4d8 	.word	0x2001b4d8

0801ab90 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 801ab90:	b580      	push	{r7, lr}
 801ab92:	b088      	sub	sp, #32
 801ab94:	af00      	add	r7, sp, #0
 801ab96:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 801ab98:	f3ef 8311 	mrs	r3, BASEPRI
 801ab9c:	f04f 0120 	mov.w	r1, #32
 801aba0:	f381 8811 	msr	BASEPRI, r1
 801aba4:	617b      	str	r3, [r7, #20]
 801aba6:	4819      	ldr	r0, [pc, #100]	; (801ac0c <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 801aba8:	f7ff f928 	bl	8019dfc <_PreparePacket>
 801abac:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 801abae:	693b      	ldr	r3, [r7, #16]
 801abb0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 801abb2:	4b17      	ldr	r3, [pc, #92]	; (801ac10 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 801abb4:	691b      	ldr	r3, [r3, #16]
 801abb6:	687a      	ldr	r2, [r7, #4]
 801abb8:	1ad3      	subs	r3, r2, r3
 801abba:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 801abbc:	68fb      	ldr	r3, [r7, #12]
 801abbe:	61fb      	str	r3, [r7, #28]
 801abc0:	687b      	ldr	r3, [r7, #4]
 801abc2:	61bb      	str	r3, [r7, #24]
 801abc4:	e00b      	b.n	801abde <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 801abc6:	69bb      	ldr	r3, [r7, #24]
 801abc8:	b2da      	uxtb	r2, r3
 801abca:	69fb      	ldr	r3, [r7, #28]
 801abcc:	1c59      	adds	r1, r3, #1
 801abce:	61f9      	str	r1, [r7, #28]
 801abd0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801abd4:	b2d2      	uxtb	r2, r2
 801abd6:	701a      	strb	r2, [r3, #0]
 801abd8:	69bb      	ldr	r3, [r7, #24]
 801abda:	09db      	lsrs	r3, r3, #7
 801abdc:	61bb      	str	r3, [r7, #24]
 801abde:	69bb      	ldr	r3, [r7, #24]
 801abe0:	2b7f      	cmp	r3, #127	; 0x7f
 801abe2:	d8f0      	bhi.n	801abc6 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 801abe4:	69fb      	ldr	r3, [r7, #28]
 801abe6:	1c5a      	adds	r2, r3, #1
 801abe8:	61fa      	str	r2, [r7, #28]
 801abea:	69ba      	ldr	r2, [r7, #24]
 801abec:	b2d2      	uxtb	r2, r2
 801abee:	701a      	strb	r2, [r3, #0]
 801abf0:	69fb      	ldr	r3, [r7, #28]
 801abf2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 801abf4:	2208      	movs	r2, #8
 801abf6:	68f9      	ldr	r1, [r7, #12]
 801abf8:	6938      	ldr	r0, [r7, #16]
 801abfa:	f7ff f9ef 	bl	8019fdc <_SendPacket>
  RECORD_END();
 801abfe:	697b      	ldr	r3, [r7, #20]
 801ac00:	f383 8811 	msr	BASEPRI, r3
}
 801ac04:	bf00      	nop
 801ac06:	3720      	adds	r7, #32
 801ac08:	46bd      	mov	sp, r7
 801ac0a:	bd80      	pop	{r7, pc}
 801ac0c:	2001b4d8 	.word	0x2001b4d8
 801ac10:	2001b4a8 	.word	0x2001b4a8

0801ac14 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 801ac14:	b580      	push	{r7, lr}
 801ac16:	b088      	sub	sp, #32
 801ac18:	af00      	add	r7, sp, #0
 801ac1a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 801ac1c:	f3ef 8311 	mrs	r3, BASEPRI
 801ac20:	f04f 0120 	mov.w	r1, #32
 801ac24:	f381 8811 	msr	BASEPRI, r1
 801ac28:	617b      	str	r3, [r7, #20]
 801ac2a:	4819      	ldr	r0, [pc, #100]	; (801ac90 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 801ac2c:	f7ff f8e6 	bl	8019dfc <_PreparePacket>
 801ac30:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 801ac32:	693b      	ldr	r3, [r7, #16]
 801ac34:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 801ac36:	4b17      	ldr	r3, [pc, #92]	; (801ac94 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 801ac38:	691b      	ldr	r3, [r3, #16]
 801ac3a:	687a      	ldr	r2, [r7, #4]
 801ac3c:	1ad3      	subs	r3, r2, r3
 801ac3e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 801ac40:	68fb      	ldr	r3, [r7, #12]
 801ac42:	61fb      	str	r3, [r7, #28]
 801ac44:	687b      	ldr	r3, [r7, #4]
 801ac46:	61bb      	str	r3, [r7, #24]
 801ac48:	e00b      	b.n	801ac62 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 801ac4a:	69bb      	ldr	r3, [r7, #24]
 801ac4c:	b2da      	uxtb	r2, r3
 801ac4e:	69fb      	ldr	r3, [r7, #28]
 801ac50:	1c59      	adds	r1, r3, #1
 801ac52:	61f9      	str	r1, [r7, #28]
 801ac54:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801ac58:	b2d2      	uxtb	r2, r2
 801ac5a:	701a      	strb	r2, [r3, #0]
 801ac5c:	69bb      	ldr	r3, [r7, #24]
 801ac5e:	09db      	lsrs	r3, r3, #7
 801ac60:	61bb      	str	r3, [r7, #24]
 801ac62:	69bb      	ldr	r3, [r7, #24]
 801ac64:	2b7f      	cmp	r3, #127	; 0x7f
 801ac66:	d8f0      	bhi.n	801ac4a <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 801ac68:	69fb      	ldr	r3, [r7, #28]
 801ac6a:	1c5a      	adds	r2, r3, #1
 801ac6c:	61fa      	str	r2, [r7, #28]
 801ac6e:	69ba      	ldr	r2, [r7, #24]
 801ac70:	b2d2      	uxtb	r2, r2
 801ac72:	701a      	strb	r2, [r3, #0]
 801ac74:	69fb      	ldr	r3, [r7, #28]
 801ac76:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 801ac78:	2204      	movs	r2, #4
 801ac7a:	68f9      	ldr	r1, [r7, #12]
 801ac7c:	6938      	ldr	r0, [r7, #16]
 801ac7e:	f7ff f9ad 	bl	8019fdc <_SendPacket>
  RECORD_END();
 801ac82:	697b      	ldr	r3, [r7, #20]
 801ac84:	f383 8811 	msr	BASEPRI, r3
}
 801ac88:	bf00      	nop
 801ac8a:	3720      	adds	r7, #32
 801ac8c:	46bd      	mov	sp, r7
 801ac8e:	bd80      	pop	{r7, pc}
 801ac90:	2001b4d8 	.word	0x2001b4d8
 801ac94:	2001b4a8 	.word	0x2001b4a8

0801ac98 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 801ac98:	b580      	push	{r7, lr}
 801ac9a:	b088      	sub	sp, #32
 801ac9c:	af00      	add	r7, sp, #0
 801ac9e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 801aca0:	f3ef 8311 	mrs	r3, BASEPRI
 801aca4:	f04f 0120 	mov.w	r1, #32
 801aca8:	f381 8811 	msr	BASEPRI, r1
 801acac:	617b      	str	r3, [r7, #20]
 801acae:	4819      	ldr	r0, [pc, #100]	; (801ad14 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 801acb0:	f7ff f8a4 	bl	8019dfc <_PreparePacket>
 801acb4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 801acb6:	693b      	ldr	r3, [r7, #16]
 801acb8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 801acba:	4b17      	ldr	r3, [pc, #92]	; (801ad18 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 801acbc:	691b      	ldr	r3, [r3, #16]
 801acbe:	687a      	ldr	r2, [r7, #4]
 801acc0:	1ad3      	subs	r3, r2, r3
 801acc2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 801acc4:	68fb      	ldr	r3, [r7, #12]
 801acc6:	61fb      	str	r3, [r7, #28]
 801acc8:	687b      	ldr	r3, [r7, #4]
 801acca:	61bb      	str	r3, [r7, #24]
 801accc:	e00b      	b.n	801ace6 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 801acce:	69bb      	ldr	r3, [r7, #24]
 801acd0:	b2da      	uxtb	r2, r3
 801acd2:	69fb      	ldr	r3, [r7, #28]
 801acd4:	1c59      	adds	r1, r3, #1
 801acd6:	61f9      	str	r1, [r7, #28]
 801acd8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801acdc:	b2d2      	uxtb	r2, r2
 801acde:	701a      	strb	r2, [r3, #0]
 801ace0:	69bb      	ldr	r3, [r7, #24]
 801ace2:	09db      	lsrs	r3, r3, #7
 801ace4:	61bb      	str	r3, [r7, #24]
 801ace6:	69bb      	ldr	r3, [r7, #24]
 801ace8:	2b7f      	cmp	r3, #127	; 0x7f
 801acea:	d8f0      	bhi.n	801acce <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 801acec:	69fb      	ldr	r3, [r7, #28]
 801acee:	1c5a      	adds	r2, r3, #1
 801acf0:	61fa      	str	r2, [r7, #28]
 801acf2:	69ba      	ldr	r2, [r7, #24]
 801acf4:	b2d2      	uxtb	r2, r2
 801acf6:	701a      	strb	r2, [r3, #0]
 801acf8:	69fb      	ldr	r3, [r7, #28]
 801acfa:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 801acfc:	2206      	movs	r2, #6
 801acfe:	68f9      	ldr	r1, [r7, #12]
 801ad00:	6938      	ldr	r0, [r7, #16]
 801ad02:	f7ff f96b 	bl	8019fdc <_SendPacket>
  RECORD_END();
 801ad06:	697b      	ldr	r3, [r7, #20]
 801ad08:	f383 8811 	msr	BASEPRI, r3
}
 801ad0c:	bf00      	nop
 801ad0e:	3720      	adds	r7, #32
 801ad10:	46bd      	mov	sp, r7
 801ad12:	bd80      	pop	{r7, pc}
 801ad14:	2001b4d8 	.word	0x2001b4d8
 801ad18:	2001b4a8 	.word	0x2001b4a8

0801ad1c <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 801ad1c:	b480      	push	{r7}
 801ad1e:	b083      	sub	sp, #12
 801ad20:	af00      	add	r7, sp, #0
 801ad22:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 801ad24:	4b04      	ldr	r3, [pc, #16]	; (801ad38 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 801ad26:	691b      	ldr	r3, [r3, #16]
 801ad28:	687a      	ldr	r2, [r7, #4]
 801ad2a:	1ad3      	subs	r3, r2, r3
}
 801ad2c:	4618      	mov	r0, r3
 801ad2e:	370c      	adds	r7, #12
 801ad30:	46bd      	mov	sp, r7
 801ad32:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad36:	4770      	bx	lr
 801ad38:	2001b4a8 	.word	0x2001b4a8

0801ad3c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 801ad3c:	b580      	push	{r7, lr}
 801ad3e:	b08c      	sub	sp, #48	; 0x30
 801ad40:	af00      	add	r7, sp, #0
 801ad42:	4603      	mov	r3, r0
 801ad44:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 801ad46:	4b3b      	ldr	r3, [pc, #236]	; (801ae34 <SEGGER_SYSVIEW_SendModule+0xf8>)
 801ad48:	681b      	ldr	r3, [r3, #0]
 801ad4a:	2b00      	cmp	r3, #0
 801ad4c:	d06d      	beq.n	801ae2a <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 801ad4e:	4b39      	ldr	r3, [pc, #228]	; (801ae34 <SEGGER_SYSVIEW_SendModule+0xf8>)
 801ad50:	681b      	ldr	r3, [r3, #0]
 801ad52:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 801ad54:	2300      	movs	r3, #0
 801ad56:	62bb      	str	r3, [r7, #40]	; 0x28
 801ad58:	e008      	b.n	801ad6c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 801ad5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ad5c:	691b      	ldr	r3, [r3, #16]
 801ad5e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 801ad60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ad62:	2b00      	cmp	r3, #0
 801ad64:	d007      	beq.n	801ad76 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 801ad66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ad68:	3301      	adds	r3, #1
 801ad6a:	62bb      	str	r3, [r7, #40]	; 0x28
 801ad6c:	79fb      	ldrb	r3, [r7, #7]
 801ad6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801ad70:	429a      	cmp	r2, r3
 801ad72:	d3f2      	bcc.n	801ad5a <SEGGER_SYSVIEW_SendModule+0x1e>
 801ad74:	e000      	b.n	801ad78 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 801ad76:	bf00      	nop
      }
    }
    if (pModule != 0) {
 801ad78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ad7a:	2b00      	cmp	r3, #0
 801ad7c:	d055      	beq.n	801ae2a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 801ad7e:	f3ef 8311 	mrs	r3, BASEPRI
 801ad82:	f04f 0120 	mov.w	r1, #32
 801ad86:	f381 8811 	msr	BASEPRI, r1
 801ad8a:	617b      	str	r3, [r7, #20]
 801ad8c:	482a      	ldr	r0, [pc, #168]	; (801ae38 <SEGGER_SYSVIEW_SendModule+0xfc>)
 801ad8e:	f7ff f835 	bl	8019dfc <_PreparePacket>
 801ad92:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 801ad94:	693b      	ldr	r3, [r7, #16]
 801ad96:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 801ad98:	68fb      	ldr	r3, [r7, #12]
 801ad9a:	627b      	str	r3, [r7, #36]	; 0x24
 801ad9c:	79fb      	ldrb	r3, [r7, #7]
 801ad9e:	623b      	str	r3, [r7, #32]
 801ada0:	e00b      	b.n	801adba <SEGGER_SYSVIEW_SendModule+0x7e>
 801ada2:	6a3b      	ldr	r3, [r7, #32]
 801ada4:	b2da      	uxtb	r2, r3
 801ada6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ada8:	1c59      	adds	r1, r3, #1
 801adaa:	6279      	str	r1, [r7, #36]	; 0x24
 801adac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801adb0:	b2d2      	uxtb	r2, r2
 801adb2:	701a      	strb	r2, [r3, #0]
 801adb4:	6a3b      	ldr	r3, [r7, #32]
 801adb6:	09db      	lsrs	r3, r3, #7
 801adb8:	623b      	str	r3, [r7, #32]
 801adba:	6a3b      	ldr	r3, [r7, #32]
 801adbc:	2b7f      	cmp	r3, #127	; 0x7f
 801adbe:	d8f0      	bhi.n	801ada2 <SEGGER_SYSVIEW_SendModule+0x66>
 801adc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801adc2:	1c5a      	adds	r2, r3, #1
 801adc4:	627a      	str	r2, [r7, #36]	; 0x24
 801adc6:	6a3a      	ldr	r2, [r7, #32]
 801adc8:	b2d2      	uxtb	r2, r2
 801adca:	701a      	strb	r2, [r3, #0]
 801adcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801adce:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 801add0:	68fb      	ldr	r3, [r7, #12]
 801add2:	61fb      	str	r3, [r7, #28]
 801add4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801add6:	689b      	ldr	r3, [r3, #8]
 801add8:	61bb      	str	r3, [r7, #24]
 801adda:	e00b      	b.n	801adf4 <SEGGER_SYSVIEW_SendModule+0xb8>
 801addc:	69bb      	ldr	r3, [r7, #24]
 801adde:	b2da      	uxtb	r2, r3
 801ade0:	69fb      	ldr	r3, [r7, #28]
 801ade2:	1c59      	adds	r1, r3, #1
 801ade4:	61f9      	str	r1, [r7, #28]
 801ade6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801adea:	b2d2      	uxtb	r2, r2
 801adec:	701a      	strb	r2, [r3, #0]
 801adee:	69bb      	ldr	r3, [r7, #24]
 801adf0:	09db      	lsrs	r3, r3, #7
 801adf2:	61bb      	str	r3, [r7, #24]
 801adf4:	69bb      	ldr	r3, [r7, #24]
 801adf6:	2b7f      	cmp	r3, #127	; 0x7f
 801adf8:	d8f0      	bhi.n	801addc <SEGGER_SYSVIEW_SendModule+0xa0>
 801adfa:	69fb      	ldr	r3, [r7, #28]
 801adfc:	1c5a      	adds	r2, r3, #1
 801adfe:	61fa      	str	r2, [r7, #28]
 801ae00:	69ba      	ldr	r2, [r7, #24]
 801ae02:	b2d2      	uxtb	r2, r2
 801ae04:	701a      	strb	r2, [r3, #0]
 801ae06:	69fb      	ldr	r3, [r7, #28]
 801ae08:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 801ae0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ae0c:	681b      	ldr	r3, [r3, #0]
 801ae0e:	2280      	movs	r2, #128	; 0x80
 801ae10:	4619      	mov	r1, r3
 801ae12:	68f8      	ldr	r0, [r7, #12]
 801ae14:	f7fe ffa2 	bl	8019d5c <_EncodeStr>
 801ae18:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 801ae1a:	2216      	movs	r2, #22
 801ae1c:	68f9      	ldr	r1, [r7, #12]
 801ae1e:	6938      	ldr	r0, [r7, #16]
 801ae20:	f7ff f8dc 	bl	8019fdc <_SendPacket>
      RECORD_END();
 801ae24:	697b      	ldr	r3, [r7, #20]
 801ae26:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 801ae2a:	bf00      	nop
 801ae2c:	3730      	adds	r7, #48	; 0x30
 801ae2e:	46bd      	mov	sp, r7
 801ae30:	bd80      	pop	{r7, pc}
 801ae32:	bf00      	nop
 801ae34:	2001b4d0 	.word	0x2001b4d0
 801ae38:	2001b4d8 	.word	0x2001b4d8

0801ae3c <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 801ae3c:	b580      	push	{r7, lr}
 801ae3e:	b082      	sub	sp, #8
 801ae40:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 801ae42:	4b0c      	ldr	r3, [pc, #48]	; (801ae74 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 801ae44:	681b      	ldr	r3, [r3, #0]
 801ae46:	2b00      	cmp	r3, #0
 801ae48:	d00f      	beq.n	801ae6a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 801ae4a:	4b0a      	ldr	r3, [pc, #40]	; (801ae74 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 801ae4c:	681b      	ldr	r3, [r3, #0]
 801ae4e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 801ae50:	687b      	ldr	r3, [r7, #4]
 801ae52:	68db      	ldr	r3, [r3, #12]
 801ae54:	2b00      	cmp	r3, #0
 801ae56:	d002      	beq.n	801ae5e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 801ae58:	687b      	ldr	r3, [r7, #4]
 801ae5a:	68db      	ldr	r3, [r3, #12]
 801ae5c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 801ae5e:	687b      	ldr	r3, [r7, #4]
 801ae60:	691b      	ldr	r3, [r3, #16]
 801ae62:	607b      	str	r3, [r7, #4]
    } while (pModule);
 801ae64:	687b      	ldr	r3, [r7, #4]
 801ae66:	2b00      	cmp	r3, #0
 801ae68:	d1f2      	bne.n	801ae50 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 801ae6a:	bf00      	nop
 801ae6c:	3708      	adds	r7, #8
 801ae6e:	46bd      	mov	sp, r7
 801ae70:	bd80      	pop	{r7, pc}
 801ae72:	bf00      	nop
 801ae74:	2001b4d0 	.word	0x2001b4d0

0801ae78 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 801ae78:	b580      	push	{r7, lr}
 801ae7a:	b086      	sub	sp, #24
 801ae7c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 801ae7e:	f3ef 8311 	mrs	r3, BASEPRI
 801ae82:	f04f 0120 	mov.w	r1, #32
 801ae86:	f381 8811 	msr	BASEPRI, r1
 801ae8a:	60fb      	str	r3, [r7, #12]
 801ae8c:	4817      	ldr	r0, [pc, #92]	; (801aeec <SEGGER_SYSVIEW_SendNumModules+0x74>)
 801ae8e:	f7fe ffb5 	bl	8019dfc <_PreparePacket>
 801ae92:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 801ae94:	68bb      	ldr	r3, [r7, #8]
 801ae96:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 801ae98:	687b      	ldr	r3, [r7, #4]
 801ae9a:	617b      	str	r3, [r7, #20]
 801ae9c:	4b14      	ldr	r3, [pc, #80]	; (801aef0 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 801ae9e:	781b      	ldrb	r3, [r3, #0]
 801aea0:	613b      	str	r3, [r7, #16]
 801aea2:	e00b      	b.n	801aebc <SEGGER_SYSVIEW_SendNumModules+0x44>
 801aea4:	693b      	ldr	r3, [r7, #16]
 801aea6:	b2da      	uxtb	r2, r3
 801aea8:	697b      	ldr	r3, [r7, #20]
 801aeaa:	1c59      	adds	r1, r3, #1
 801aeac:	6179      	str	r1, [r7, #20]
 801aeae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801aeb2:	b2d2      	uxtb	r2, r2
 801aeb4:	701a      	strb	r2, [r3, #0]
 801aeb6:	693b      	ldr	r3, [r7, #16]
 801aeb8:	09db      	lsrs	r3, r3, #7
 801aeba:	613b      	str	r3, [r7, #16]
 801aebc:	693b      	ldr	r3, [r7, #16]
 801aebe:	2b7f      	cmp	r3, #127	; 0x7f
 801aec0:	d8f0      	bhi.n	801aea4 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 801aec2:	697b      	ldr	r3, [r7, #20]
 801aec4:	1c5a      	adds	r2, r3, #1
 801aec6:	617a      	str	r2, [r7, #20]
 801aec8:	693a      	ldr	r2, [r7, #16]
 801aeca:	b2d2      	uxtb	r2, r2
 801aecc:	701a      	strb	r2, [r3, #0]
 801aece:	697b      	ldr	r3, [r7, #20]
 801aed0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 801aed2:	221b      	movs	r2, #27
 801aed4:	6879      	ldr	r1, [r7, #4]
 801aed6:	68b8      	ldr	r0, [r7, #8]
 801aed8:	f7ff f880 	bl	8019fdc <_SendPacket>
  RECORD_END();
 801aedc:	68fb      	ldr	r3, [r7, #12]
 801aede:	f383 8811 	msr	BASEPRI, r3
}
 801aee2:	bf00      	nop
 801aee4:	3718      	adds	r7, #24
 801aee6:	46bd      	mov	sp, r7
 801aee8:	bd80      	pop	{r7, pc}
 801aeea:	bf00      	nop
 801aeec:	2001b4d8 	.word	0x2001b4d8
 801aef0:	2001b4d4 	.word	0x2001b4d4

0801aef4 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 801aef4:	b580      	push	{r7, lr}
 801aef6:	b08a      	sub	sp, #40	; 0x28
 801aef8:	af00      	add	r7, sp, #0
 801aefa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 801aefc:	f3ef 8311 	mrs	r3, BASEPRI
 801af00:	f04f 0120 	mov.w	r1, #32
 801af04:	f381 8811 	msr	BASEPRI, r1
 801af08:	617b      	str	r3, [r7, #20]
 801af0a:	4827      	ldr	r0, [pc, #156]	; (801afa8 <SEGGER_SYSVIEW_Warn+0xb4>)
 801af0c:	f7fe ff76 	bl	8019dfc <_PreparePacket>
 801af10:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 801af12:	2280      	movs	r2, #128	; 0x80
 801af14:	6879      	ldr	r1, [r7, #4]
 801af16:	6938      	ldr	r0, [r7, #16]
 801af18:	f7fe ff20 	bl	8019d5c <_EncodeStr>
 801af1c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 801af1e:	68fb      	ldr	r3, [r7, #12]
 801af20:	627b      	str	r3, [r7, #36]	; 0x24
 801af22:	2301      	movs	r3, #1
 801af24:	623b      	str	r3, [r7, #32]
 801af26:	e00b      	b.n	801af40 <SEGGER_SYSVIEW_Warn+0x4c>
 801af28:	6a3b      	ldr	r3, [r7, #32]
 801af2a:	b2da      	uxtb	r2, r3
 801af2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801af2e:	1c59      	adds	r1, r3, #1
 801af30:	6279      	str	r1, [r7, #36]	; 0x24
 801af32:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801af36:	b2d2      	uxtb	r2, r2
 801af38:	701a      	strb	r2, [r3, #0]
 801af3a:	6a3b      	ldr	r3, [r7, #32]
 801af3c:	09db      	lsrs	r3, r3, #7
 801af3e:	623b      	str	r3, [r7, #32]
 801af40:	6a3b      	ldr	r3, [r7, #32]
 801af42:	2b7f      	cmp	r3, #127	; 0x7f
 801af44:	d8f0      	bhi.n	801af28 <SEGGER_SYSVIEW_Warn+0x34>
 801af46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801af48:	1c5a      	adds	r2, r3, #1
 801af4a:	627a      	str	r2, [r7, #36]	; 0x24
 801af4c:	6a3a      	ldr	r2, [r7, #32]
 801af4e:	b2d2      	uxtb	r2, r2
 801af50:	701a      	strb	r2, [r3, #0]
 801af52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801af54:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 801af56:	68fb      	ldr	r3, [r7, #12]
 801af58:	61fb      	str	r3, [r7, #28]
 801af5a:	2300      	movs	r3, #0
 801af5c:	61bb      	str	r3, [r7, #24]
 801af5e:	e00b      	b.n	801af78 <SEGGER_SYSVIEW_Warn+0x84>
 801af60:	69bb      	ldr	r3, [r7, #24]
 801af62:	b2da      	uxtb	r2, r3
 801af64:	69fb      	ldr	r3, [r7, #28]
 801af66:	1c59      	adds	r1, r3, #1
 801af68:	61f9      	str	r1, [r7, #28]
 801af6a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801af6e:	b2d2      	uxtb	r2, r2
 801af70:	701a      	strb	r2, [r3, #0]
 801af72:	69bb      	ldr	r3, [r7, #24]
 801af74:	09db      	lsrs	r3, r3, #7
 801af76:	61bb      	str	r3, [r7, #24]
 801af78:	69bb      	ldr	r3, [r7, #24]
 801af7a:	2b7f      	cmp	r3, #127	; 0x7f
 801af7c:	d8f0      	bhi.n	801af60 <SEGGER_SYSVIEW_Warn+0x6c>
 801af7e:	69fb      	ldr	r3, [r7, #28]
 801af80:	1c5a      	adds	r2, r3, #1
 801af82:	61fa      	str	r2, [r7, #28]
 801af84:	69ba      	ldr	r2, [r7, #24]
 801af86:	b2d2      	uxtb	r2, r2
 801af88:	701a      	strb	r2, [r3, #0]
 801af8a:	69fb      	ldr	r3, [r7, #28]
 801af8c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 801af8e:	221a      	movs	r2, #26
 801af90:	68f9      	ldr	r1, [r7, #12]
 801af92:	6938      	ldr	r0, [r7, #16]
 801af94:	f7ff f822 	bl	8019fdc <_SendPacket>
  RECORD_END();
 801af98:	697b      	ldr	r3, [r7, #20]
 801af9a:	f383 8811 	msr	BASEPRI, r3
}
 801af9e:	bf00      	nop
 801afa0:	3728      	adds	r7, #40	; 0x28
 801afa2:	46bd      	mov	sp, r7
 801afa4:	bd80      	pop	{r7, pc}
 801afa6:	bf00      	nop
 801afa8:	2001b4d8 	.word	0x2001b4d8

0801afac <arm_pid_init_f32>:
 801afac:	edd0 6a08 	vldr	s13, [r0, #32]
 801afb0:	edd0 7a06 	vldr	s15, [r0, #24]
 801afb4:	ed90 7a07 	vldr	s14, [r0, #28]
 801afb8:	edc0 6a02 	vstr	s13, [r0, #8]
 801afbc:	ee37 7a87 	vadd.f32	s14, s15, s14
 801afc0:	ee36 6aa6 	vadd.f32	s12, s13, s13
 801afc4:	eef1 7a67 	vneg.f32	s15, s15
 801afc8:	ee37 7a26 	vadd.f32	s14, s14, s13
 801afcc:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801afd0:	ed80 7a00 	vstr	s14, [r0]
 801afd4:	edc0 7a01 	vstr	s15, [r0, #4]
 801afd8:	b901      	cbnz	r1, 801afdc <arm_pid_init_f32+0x30>
 801afda:	4770      	bx	lr
 801afdc:	2300      	movs	r3, #0
 801afde:	60c3      	str	r3, [r0, #12]
 801afe0:	6103      	str	r3, [r0, #16]
 801afe2:	6143      	str	r3, [r0, #20]
 801afe4:	4770      	bx	lr
 801afe6:	bf00      	nop

0801afe8 <__errno>:
 801afe8:	4b01      	ldr	r3, [pc, #4]	; (801aff0 <__errno+0x8>)
 801afea:	6818      	ldr	r0, [r3, #0]
 801afec:	4770      	bx	lr
 801afee:	bf00      	nop
 801aff0:	20001444 	.word	0x20001444

0801aff4 <__libc_init_array>:
 801aff4:	b570      	push	{r4, r5, r6, lr}
 801aff6:	4d0d      	ldr	r5, [pc, #52]	; (801b02c <__libc_init_array+0x38>)
 801aff8:	4c0d      	ldr	r4, [pc, #52]	; (801b030 <__libc_init_array+0x3c>)
 801affa:	1b64      	subs	r4, r4, r5
 801affc:	10a4      	asrs	r4, r4, #2
 801affe:	2600      	movs	r6, #0
 801b000:	42a6      	cmp	r6, r4
 801b002:	d109      	bne.n	801b018 <__libc_init_array+0x24>
 801b004:	4d0b      	ldr	r5, [pc, #44]	; (801b034 <__libc_init_array+0x40>)
 801b006:	4c0c      	ldr	r4, [pc, #48]	; (801b038 <__libc_init_array+0x44>)
 801b008:	f000 fe22 	bl	801bc50 <_init>
 801b00c:	1b64      	subs	r4, r4, r5
 801b00e:	10a4      	asrs	r4, r4, #2
 801b010:	2600      	movs	r6, #0
 801b012:	42a6      	cmp	r6, r4
 801b014:	d105      	bne.n	801b022 <__libc_init_array+0x2e>
 801b016:	bd70      	pop	{r4, r5, r6, pc}
 801b018:	f855 3b04 	ldr.w	r3, [r5], #4
 801b01c:	4798      	blx	r3
 801b01e:	3601      	adds	r6, #1
 801b020:	e7ee      	b.n	801b000 <__libc_init_array+0xc>
 801b022:	f855 3b04 	ldr.w	r3, [r5], #4
 801b026:	4798      	blx	r3
 801b028:	3601      	adds	r6, #1
 801b02a:	e7f2      	b.n	801b012 <__libc_init_array+0x1e>
 801b02c:	0801c490 	.word	0x0801c490
 801b030:	0801c490 	.word	0x0801c490
 801b034:	0801c490 	.word	0x0801c490
 801b038:	0801c494 	.word	0x0801c494

0801b03c <__retarget_lock_acquire_recursive>:
 801b03c:	4770      	bx	lr

0801b03e <__retarget_lock_release_recursive>:
 801b03e:	4770      	bx	lr

0801b040 <memcmp>:
 801b040:	b530      	push	{r4, r5, lr}
 801b042:	3901      	subs	r1, #1
 801b044:	2400      	movs	r4, #0
 801b046:	42a2      	cmp	r2, r4
 801b048:	d101      	bne.n	801b04e <memcmp+0xe>
 801b04a:	2000      	movs	r0, #0
 801b04c:	e005      	b.n	801b05a <memcmp+0x1a>
 801b04e:	5d03      	ldrb	r3, [r0, r4]
 801b050:	3401      	adds	r4, #1
 801b052:	5d0d      	ldrb	r5, [r1, r4]
 801b054:	42ab      	cmp	r3, r5
 801b056:	d0f6      	beq.n	801b046 <memcmp+0x6>
 801b058:	1b58      	subs	r0, r3, r5
 801b05a:	bd30      	pop	{r4, r5, pc}

0801b05c <memcpy>:
 801b05c:	440a      	add	r2, r1
 801b05e:	4291      	cmp	r1, r2
 801b060:	f100 33ff 	add.w	r3, r0, #4294967295
 801b064:	d100      	bne.n	801b068 <memcpy+0xc>
 801b066:	4770      	bx	lr
 801b068:	b510      	push	{r4, lr}
 801b06a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b06e:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b072:	4291      	cmp	r1, r2
 801b074:	d1f9      	bne.n	801b06a <memcpy+0xe>
 801b076:	bd10      	pop	{r4, pc}

0801b078 <memset>:
 801b078:	4402      	add	r2, r0
 801b07a:	4603      	mov	r3, r0
 801b07c:	4293      	cmp	r3, r2
 801b07e:	d100      	bne.n	801b082 <memset+0xa>
 801b080:	4770      	bx	lr
 801b082:	f803 1b01 	strb.w	r1, [r3], #1
 801b086:	e7f9      	b.n	801b07c <memset+0x4>

0801b088 <cleanup_glue>:
 801b088:	b538      	push	{r3, r4, r5, lr}
 801b08a:	460c      	mov	r4, r1
 801b08c:	6809      	ldr	r1, [r1, #0]
 801b08e:	4605      	mov	r5, r0
 801b090:	b109      	cbz	r1, 801b096 <cleanup_glue+0xe>
 801b092:	f7ff fff9 	bl	801b088 <cleanup_glue>
 801b096:	4621      	mov	r1, r4
 801b098:	4628      	mov	r0, r5
 801b09a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b09e:	f000 b869 	b.w	801b174 <_free_r>
	...

0801b0a4 <_reclaim_reent>:
 801b0a4:	4b2c      	ldr	r3, [pc, #176]	; (801b158 <_reclaim_reent+0xb4>)
 801b0a6:	681b      	ldr	r3, [r3, #0]
 801b0a8:	4283      	cmp	r3, r0
 801b0aa:	b570      	push	{r4, r5, r6, lr}
 801b0ac:	4604      	mov	r4, r0
 801b0ae:	d051      	beq.n	801b154 <_reclaim_reent+0xb0>
 801b0b0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801b0b2:	b143      	cbz	r3, 801b0c6 <_reclaim_reent+0x22>
 801b0b4:	68db      	ldr	r3, [r3, #12]
 801b0b6:	2b00      	cmp	r3, #0
 801b0b8:	d14a      	bne.n	801b150 <_reclaim_reent+0xac>
 801b0ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b0bc:	6819      	ldr	r1, [r3, #0]
 801b0be:	b111      	cbz	r1, 801b0c6 <_reclaim_reent+0x22>
 801b0c0:	4620      	mov	r0, r4
 801b0c2:	f000 f857 	bl	801b174 <_free_r>
 801b0c6:	6961      	ldr	r1, [r4, #20]
 801b0c8:	b111      	cbz	r1, 801b0d0 <_reclaim_reent+0x2c>
 801b0ca:	4620      	mov	r0, r4
 801b0cc:	f000 f852 	bl	801b174 <_free_r>
 801b0d0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801b0d2:	b111      	cbz	r1, 801b0da <_reclaim_reent+0x36>
 801b0d4:	4620      	mov	r0, r4
 801b0d6:	f000 f84d 	bl	801b174 <_free_r>
 801b0da:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801b0dc:	b111      	cbz	r1, 801b0e4 <_reclaim_reent+0x40>
 801b0de:	4620      	mov	r0, r4
 801b0e0:	f000 f848 	bl	801b174 <_free_r>
 801b0e4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801b0e6:	b111      	cbz	r1, 801b0ee <_reclaim_reent+0x4a>
 801b0e8:	4620      	mov	r0, r4
 801b0ea:	f000 f843 	bl	801b174 <_free_r>
 801b0ee:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801b0f0:	b111      	cbz	r1, 801b0f8 <_reclaim_reent+0x54>
 801b0f2:	4620      	mov	r0, r4
 801b0f4:	f000 f83e 	bl	801b174 <_free_r>
 801b0f8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801b0fa:	b111      	cbz	r1, 801b102 <_reclaim_reent+0x5e>
 801b0fc:	4620      	mov	r0, r4
 801b0fe:	f000 f839 	bl	801b174 <_free_r>
 801b102:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801b104:	b111      	cbz	r1, 801b10c <_reclaim_reent+0x68>
 801b106:	4620      	mov	r0, r4
 801b108:	f000 f834 	bl	801b174 <_free_r>
 801b10c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b10e:	b111      	cbz	r1, 801b116 <_reclaim_reent+0x72>
 801b110:	4620      	mov	r0, r4
 801b112:	f000 f82f 	bl	801b174 <_free_r>
 801b116:	69a3      	ldr	r3, [r4, #24]
 801b118:	b1e3      	cbz	r3, 801b154 <_reclaim_reent+0xb0>
 801b11a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801b11c:	4620      	mov	r0, r4
 801b11e:	4798      	blx	r3
 801b120:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801b122:	b1b9      	cbz	r1, 801b154 <_reclaim_reent+0xb0>
 801b124:	4620      	mov	r0, r4
 801b126:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b12a:	f7ff bfad 	b.w	801b088 <cleanup_glue>
 801b12e:	5949      	ldr	r1, [r1, r5]
 801b130:	b941      	cbnz	r1, 801b144 <_reclaim_reent+0xa0>
 801b132:	3504      	adds	r5, #4
 801b134:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b136:	2d80      	cmp	r5, #128	; 0x80
 801b138:	68d9      	ldr	r1, [r3, #12]
 801b13a:	d1f8      	bne.n	801b12e <_reclaim_reent+0x8a>
 801b13c:	4620      	mov	r0, r4
 801b13e:	f000 f819 	bl	801b174 <_free_r>
 801b142:	e7ba      	b.n	801b0ba <_reclaim_reent+0x16>
 801b144:	680e      	ldr	r6, [r1, #0]
 801b146:	4620      	mov	r0, r4
 801b148:	f000 f814 	bl	801b174 <_free_r>
 801b14c:	4631      	mov	r1, r6
 801b14e:	e7ef      	b.n	801b130 <_reclaim_reent+0x8c>
 801b150:	2500      	movs	r5, #0
 801b152:	e7ef      	b.n	801b134 <_reclaim_reent+0x90>
 801b154:	bd70      	pop	{r4, r5, r6, pc}
 801b156:	bf00      	nop
 801b158:	20001444 	.word	0x20001444

0801b15c <__malloc_lock>:
 801b15c:	4801      	ldr	r0, [pc, #4]	; (801b164 <__malloc_lock+0x8>)
 801b15e:	f7ff bf6d 	b.w	801b03c <__retarget_lock_acquire_recursive>
 801b162:	bf00      	nop
 801b164:	2001ed14 	.word	0x2001ed14

0801b168 <__malloc_unlock>:
 801b168:	4801      	ldr	r0, [pc, #4]	; (801b170 <__malloc_unlock+0x8>)
 801b16a:	f7ff bf68 	b.w	801b03e <__retarget_lock_release_recursive>
 801b16e:	bf00      	nop
 801b170:	2001ed14 	.word	0x2001ed14

0801b174 <_free_r>:
 801b174:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b176:	2900      	cmp	r1, #0
 801b178:	d048      	beq.n	801b20c <_free_r+0x98>
 801b17a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b17e:	9001      	str	r0, [sp, #4]
 801b180:	2b00      	cmp	r3, #0
 801b182:	f1a1 0404 	sub.w	r4, r1, #4
 801b186:	bfb8      	it	lt
 801b188:	18e4      	addlt	r4, r4, r3
 801b18a:	f7ff ffe7 	bl	801b15c <__malloc_lock>
 801b18e:	4a20      	ldr	r2, [pc, #128]	; (801b210 <_free_r+0x9c>)
 801b190:	9801      	ldr	r0, [sp, #4]
 801b192:	6813      	ldr	r3, [r2, #0]
 801b194:	4615      	mov	r5, r2
 801b196:	b933      	cbnz	r3, 801b1a6 <_free_r+0x32>
 801b198:	6063      	str	r3, [r4, #4]
 801b19a:	6014      	str	r4, [r2, #0]
 801b19c:	b003      	add	sp, #12
 801b19e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b1a2:	f7ff bfe1 	b.w	801b168 <__malloc_unlock>
 801b1a6:	42a3      	cmp	r3, r4
 801b1a8:	d90b      	bls.n	801b1c2 <_free_r+0x4e>
 801b1aa:	6821      	ldr	r1, [r4, #0]
 801b1ac:	1862      	adds	r2, r4, r1
 801b1ae:	4293      	cmp	r3, r2
 801b1b0:	bf04      	itt	eq
 801b1b2:	681a      	ldreq	r2, [r3, #0]
 801b1b4:	685b      	ldreq	r3, [r3, #4]
 801b1b6:	6063      	str	r3, [r4, #4]
 801b1b8:	bf04      	itt	eq
 801b1ba:	1852      	addeq	r2, r2, r1
 801b1bc:	6022      	streq	r2, [r4, #0]
 801b1be:	602c      	str	r4, [r5, #0]
 801b1c0:	e7ec      	b.n	801b19c <_free_r+0x28>
 801b1c2:	461a      	mov	r2, r3
 801b1c4:	685b      	ldr	r3, [r3, #4]
 801b1c6:	b10b      	cbz	r3, 801b1cc <_free_r+0x58>
 801b1c8:	42a3      	cmp	r3, r4
 801b1ca:	d9fa      	bls.n	801b1c2 <_free_r+0x4e>
 801b1cc:	6811      	ldr	r1, [r2, #0]
 801b1ce:	1855      	adds	r5, r2, r1
 801b1d0:	42a5      	cmp	r5, r4
 801b1d2:	d10b      	bne.n	801b1ec <_free_r+0x78>
 801b1d4:	6824      	ldr	r4, [r4, #0]
 801b1d6:	4421      	add	r1, r4
 801b1d8:	1854      	adds	r4, r2, r1
 801b1da:	42a3      	cmp	r3, r4
 801b1dc:	6011      	str	r1, [r2, #0]
 801b1de:	d1dd      	bne.n	801b19c <_free_r+0x28>
 801b1e0:	681c      	ldr	r4, [r3, #0]
 801b1e2:	685b      	ldr	r3, [r3, #4]
 801b1e4:	6053      	str	r3, [r2, #4]
 801b1e6:	4421      	add	r1, r4
 801b1e8:	6011      	str	r1, [r2, #0]
 801b1ea:	e7d7      	b.n	801b19c <_free_r+0x28>
 801b1ec:	d902      	bls.n	801b1f4 <_free_r+0x80>
 801b1ee:	230c      	movs	r3, #12
 801b1f0:	6003      	str	r3, [r0, #0]
 801b1f2:	e7d3      	b.n	801b19c <_free_r+0x28>
 801b1f4:	6825      	ldr	r5, [r4, #0]
 801b1f6:	1961      	adds	r1, r4, r5
 801b1f8:	428b      	cmp	r3, r1
 801b1fa:	bf04      	itt	eq
 801b1fc:	6819      	ldreq	r1, [r3, #0]
 801b1fe:	685b      	ldreq	r3, [r3, #4]
 801b200:	6063      	str	r3, [r4, #4]
 801b202:	bf04      	itt	eq
 801b204:	1949      	addeq	r1, r1, r5
 801b206:	6021      	streq	r1, [r4, #0]
 801b208:	6054      	str	r4, [r2, #4]
 801b20a:	e7c7      	b.n	801b19c <_free_r+0x28>
 801b20c:	b003      	add	sp, #12
 801b20e:	bd30      	pop	{r4, r5, pc}
 801b210:	2001b5bc 	.word	0x2001b5bc

0801b214 <fmax>:
 801b214:	b508      	push	{r3, lr}
 801b216:	ed2d 8b04 	vpush	{d8-d9}
 801b21a:	eeb0 8a40 	vmov.f32	s16, s0
 801b21e:	eef0 8a60 	vmov.f32	s17, s1
 801b222:	eeb0 9a41 	vmov.f32	s18, s2
 801b226:	eef0 9a61 	vmov.f32	s19, s3
 801b22a:	f000 f81b 	bl	801b264 <__fpclassifyd>
 801b22e:	b168      	cbz	r0, 801b24c <fmax+0x38>
 801b230:	eeb0 0a49 	vmov.f32	s0, s18
 801b234:	eef0 0a69 	vmov.f32	s1, s19
 801b238:	f000 f814 	bl	801b264 <__fpclassifyd>
 801b23c:	b150      	cbz	r0, 801b254 <fmax+0x40>
 801b23e:	ec53 2b19 	vmov	r2, r3, d9
 801b242:	ec51 0b18 	vmov	r0, r1, d8
 801b246:	f7e5 fc59 	bl	8000afc <__aeabi_dcmpgt>
 801b24a:	b918      	cbnz	r0, 801b254 <fmax+0x40>
 801b24c:	eeb0 8a49 	vmov.f32	s16, s18
 801b250:	eef0 8a69 	vmov.f32	s17, s19
 801b254:	eeb0 0a48 	vmov.f32	s0, s16
 801b258:	eef0 0a68 	vmov.f32	s1, s17
 801b25c:	ecbd 8b04 	vpop	{d8-d9}
 801b260:	bd08      	pop	{r3, pc}
	...

0801b264 <__fpclassifyd>:
 801b264:	ec51 0b10 	vmov	r0, r1, d0
 801b268:	b510      	push	{r4, lr}
 801b26a:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
 801b26e:	460b      	mov	r3, r1
 801b270:	d019      	beq.n	801b2a6 <__fpclassifyd+0x42>
 801b272:	f5a1 1280 	sub.w	r2, r1, #1048576	; 0x100000
 801b276:	490e      	ldr	r1, [pc, #56]	; (801b2b0 <__fpclassifyd+0x4c>)
 801b278:	428a      	cmp	r2, r1
 801b27a:	d90e      	bls.n	801b29a <__fpclassifyd+0x36>
 801b27c:	f103 42ff 	add.w	r2, r3, #2139095040	; 0x7f800000
 801b280:	f502 02e0 	add.w	r2, r2, #7340032	; 0x700000
 801b284:	428a      	cmp	r2, r1
 801b286:	d908      	bls.n	801b29a <__fpclassifyd+0x36>
 801b288:	4a0a      	ldr	r2, [pc, #40]	; (801b2b4 <__fpclassifyd+0x50>)
 801b28a:	4213      	tst	r3, r2
 801b28c:	d007      	beq.n	801b29e <__fpclassifyd+0x3a>
 801b28e:	4294      	cmp	r4, r2
 801b290:	d107      	bne.n	801b2a2 <__fpclassifyd+0x3e>
 801b292:	fab0 f080 	clz	r0, r0
 801b296:	0940      	lsrs	r0, r0, #5
 801b298:	bd10      	pop	{r4, pc}
 801b29a:	2004      	movs	r0, #4
 801b29c:	e7fc      	b.n	801b298 <__fpclassifyd+0x34>
 801b29e:	2003      	movs	r0, #3
 801b2a0:	e7fa      	b.n	801b298 <__fpclassifyd+0x34>
 801b2a2:	2000      	movs	r0, #0
 801b2a4:	e7f8      	b.n	801b298 <__fpclassifyd+0x34>
 801b2a6:	2800      	cmp	r0, #0
 801b2a8:	d1ee      	bne.n	801b288 <__fpclassifyd+0x24>
 801b2aa:	2002      	movs	r0, #2
 801b2ac:	e7f4      	b.n	801b298 <__fpclassifyd+0x34>
 801b2ae:	bf00      	nop
 801b2b0:	7fdfffff 	.word	0x7fdfffff
 801b2b4:	7ff00000 	.word	0x7ff00000

0801b2b8 <exp>:
 801b2b8:	b538      	push	{r3, r4, r5, lr}
 801b2ba:	ed2d 8b02 	vpush	{d8}
 801b2be:	ec55 4b10 	vmov	r4, r5, d0
 801b2c2:	f000 f8c5 	bl	801b450 <__ieee754_exp>
 801b2c6:	4b22      	ldr	r3, [pc, #136]	; (801b350 <exp+0x98>)
 801b2c8:	eeb0 8a40 	vmov.f32	s16, s0
 801b2cc:	eef0 8a60 	vmov.f32	s17, s1
 801b2d0:	f993 3000 	ldrsb.w	r3, [r3]
 801b2d4:	3301      	adds	r3, #1
 801b2d6:	d012      	beq.n	801b2fe <exp+0x46>
 801b2d8:	ec45 4b10 	vmov	d0, r4, r5
 801b2dc:	f000 fca2 	bl	801bc24 <finite>
 801b2e0:	b168      	cbz	r0, 801b2fe <exp+0x46>
 801b2e2:	a313      	add	r3, pc, #76	; (adr r3, 801b330 <exp+0x78>)
 801b2e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b2e8:	4620      	mov	r0, r4
 801b2ea:	4629      	mov	r1, r5
 801b2ec:	f7e5 fc06 	bl	8000afc <__aeabi_dcmpgt>
 801b2f0:	b160      	cbz	r0, 801b30c <exp+0x54>
 801b2f2:	f7ff fe79 	bl	801afe8 <__errno>
 801b2f6:	ed9f 8b10 	vldr	d8, [pc, #64]	; 801b338 <exp+0x80>
 801b2fa:	2322      	movs	r3, #34	; 0x22
 801b2fc:	6003      	str	r3, [r0, #0]
 801b2fe:	eeb0 0a48 	vmov.f32	s0, s16
 801b302:	eef0 0a68 	vmov.f32	s1, s17
 801b306:	ecbd 8b02 	vpop	{d8}
 801b30a:	bd38      	pop	{r3, r4, r5, pc}
 801b30c:	a30c      	add	r3, pc, #48	; (adr r3, 801b340 <exp+0x88>)
 801b30e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b312:	4620      	mov	r0, r4
 801b314:	4629      	mov	r1, r5
 801b316:	f7e5 fbd3 	bl	8000ac0 <__aeabi_dcmplt>
 801b31a:	2800      	cmp	r0, #0
 801b31c:	d0ef      	beq.n	801b2fe <exp+0x46>
 801b31e:	f7ff fe63 	bl	801afe8 <__errno>
 801b322:	2322      	movs	r3, #34	; 0x22
 801b324:	ed9f 8b08 	vldr	d8, [pc, #32]	; 801b348 <exp+0x90>
 801b328:	6003      	str	r3, [r0, #0]
 801b32a:	e7e8      	b.n	801b2fe <exp+0x46>
 801b32c:	f3af 8000 	nop.w
 801b330:	fefa39ef 	.word	0xfefa39ef
 801b334:	40862e42 	.word	0x40862e42
 801b338:	00000000 	.word	0x00000000
 801b33c:	7ff00000 	.word	0x7ff00000
 801b340:	d52d3051 	.word	0xd52d3051
 801b344:	c0874910 	.word	0xc0874910
	...
 801b350:	200014a8 	.word	0x200014a8
 801b354:	00000000 	.word	0x00000000

0801b358 <log>:
 801b358:	b538      	push	{r3, r4, r5, lr}
 801b35a:	ed2d 8b02 	vpush	{d8}
 801b35e:	ec55 4b10 	vmov	r4, r5, d0
 801b362:	f000 f9f1 	bl	801b748 <__ieee754_log>
 801b366:	4b1e      	ldr	r3, [pc, #120]	; (801b3e0 <log+0x88>)
 801b368:	eeb0 8a40 	vmov.f32	s16, s0
 801b36c:	eef0 8a60 	vmov.f32	s17, s1
 801b370:	f993 3000 	ldrsb.w	r3, [r3]
 801b374:	3301      	adds	r3, #1
 801b376:	d01a      	beq.n	801b3ae <log+0x56>
 801b378:	4622      	mov	r2, r4
 801b37a:	462b      	mov	r3, r5
 801b37c:	4620      	mov	r0, r4
 801b37e:	4629      	mov	r1, r5
 801b380:	f7e5 fbc6 	bl	8000b10 <__aeabi_dcmpun>
 801b384:	b998      	cbnz	r0, 801b3ae <log+0x56>
 801b386:	2200      	movs	r2, #0
 801b388:	2300      	movs	r3, #0
 801b38a:	4620      	mov	r0, r4
 801b38c:	4629      	mov	r1, r5
 801b38e:	f7e5 fbb5 	bl	8000afc <__aeabi_dcmpgt>
 801b392:	b960      	cbnz	r0, 801b3ae <log+0x56>
 801b394:	2200      	movs	r2, #0
 801b396:	2300      	movs	r3, #0
 801b398:	4620      	mov	r0, r4
 801b39a:	4629      	mov	r1, r5
 801b39c:	f7e5 fb86 	bl	8000aac <__aeabi_dcmpeq>
 801b3a0:	b160      	cbz	r0, 801b3bc <log+0x64>
 801b3a2:	f7ff fe21 	bl	801afe8 <__errno>
 801b3a6:	ed9f 8b0c 	vldr	d8, [pc, #48]	; 801b3d8 <log+0x80>
 801b3aa:	2322      	movs	r3, #34	; 0x22
 801b3ac:	6003      	str	r3, [r0, #0]
 801b3ae:	eeb0 0a48 	vmov.f32	s0, s16
 801b3b2:	eef0 0a68 	vmov.f32	s1, s17
 801b3b6:	ecbd 8b02 	vpop	{d8}
 801b3ba:	bd38      	pop	{r3, r4, r5, pc}
 801b3bc:	f7ff fe14 	bl	801afe8 <__errno>
 801b3c0:	ecbd 8b02 	vpop	{d8}
 801b3c4:	2321      	movs	r3, #33	; 0x21
 801b3c6:	6003      	str	r3, [r0, #0]
 801b3c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b3cc:	4805      	ldr	r0, [pc, #20]	; (801b3e4 <log+0x8c>)
 801b3ce:	f000 bc37 	b.w	801bc40 <nan>
 801b3d2:	bf00      	nop
 801b3d4:	f3af 8000 	nop.w
 801b3d8:	00000000 	.word	0x00000000
 801b3dc:	fff00000 	.word	0xfff00000
 801b3e0:	200014a8 	.word	0x200014a8
 801b3e4:	0801c454 	.word	0x0801c454

0801b3e8 <sqrt>:
 801b3e8:	b538      	push	{r3, r4, r5, lr}
 801b3ea:	ed2d 8b02 	vpush	{d8}
 801b3ee:	ec55 4b10 	vmov	r4, r5, d0
 801b3f2:	f000 fb63 	bl	801babc <__ieee754_sqrt>
 801b3f6:	4b15      	ldr	r3, [pc, #84]	; (801b44c <sqrt+0x64>)
 801b3f8:	eeb0 8a40 	vmov.f32	s16, s0
 801b3fc:	eef0 8a60 	vmov.f32	s17, s1
 801b400:	f993 3000 	ldrsb.w	r3, [r3]
 801b404:	3301      	adds	r3, #1
 801b406:	d019      	beq.n	801b43c <sqrt+0x54>
 801b408:	4622      	mov	r2, r4
 801b40a:	462b      	mov	r3, r5
 801b40c:	4620      	mov	r0, r4
 801b40e:	4629      	mov	r1, r5
 801b410:	f7e5 fb7e 	bl	8000b10 <__aeabi_dcmpun>
 801b414:	b990      	cbnz	r0, 801b43c <sqrt+0x54>
 801b416:	2200      	movs	r2, #0
 801b418:	2300      	movs	r3, #0
 801b41a:	4620      	mov	r0, r4
 801b41c:	4629      	mov	r1, r5
 801b41e:	f7e5 fb4f 	bl	8000ac0 <__aeabi_dcmplt>
 801b422:	b158      	cbz	r0, 801b43c <sqrt+0x54>
 801b424:	f7ff fde0 	bl	801afe8 <__errno>
 801b428:	2321      	movs	r3, #33	; 0x21
 801b42a:	6003      	str	r3, [r0, #0]
 801b42c:	2200      	movs	r2, #0
 801b42e:	2300      	movs	r3, #0
 801b430:	4610      	mov	r0, r2
 801b432:	4619      	mov	r1, r3
 801b434:	f7e5 f9fc 	bl	8000830 <__aeabi_ddiv>
 801b438:	ec41 0b18 	vmov	d8, r0, r1
 801b43c:	eeb0 0a48 	vmov.f32	s0, s16
 801b440:	eef0 0a68 	vmov.f32	s1, s17
 801b444:	ecbd 8b02 	vpop	{d8}
 801b448:	bd38      	pop	{r3, r4, r5, pc}
 801b44a:	bf00      	nop
 801b44c:	200014a8 	.word	0x200014a8

0801b450 <__ieee754_exp>:
 801b450:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b454:	ec55 4b10 	vmov	r4, r5, d0
 801b458:	49b1      	ldr	r1, [pc, #708]	; (801b720 <__ieee754_exp+0x2d0>)
 801b45a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801b45e:	428b      	cmp	r3, r1
 801b460:	ed2d 8b04 	vpush	{d8-d9}
 801b464:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 801b468:	d937      	bls.n	801b4da <__ieee754_exp+0x8a>
 801b46a:	49ae      	ldr	r1, [pc, #696]	; (801b724 <__ieee754_exp+0x2d4>)
 801b46c:	428b      	cmp	r3, r1
 801b46e:	d916      	bls.n	801b49e <__ieee754_exp+0x4e>
 801b470:	ee10 3a10 	vmov	r3, s0
 801b474:	f3c5 0213 	ubfx	r2, r5, #0, #20
 801b478:	4313      	orrs	r3, r2
 801b47a:	d009      	beq.n	801b490 <__ieee754_exp+0x40>
 801b47c:	ee10 2a10 	vmov	r2, s0
 801b480:	462b      	mov	r3, r5
 801b482:	4620      	mov	r0, r4
 801b484:	4629      	mov	r1, r5
 801b486:	f7e4 fef3 	bl	8000270 <__adddf3>
 801b48a:	4604      	mov	r4, r0
 801b48c:	460d      	mov	r5, r1
 801b48e:	e000      	b.n	801b492 <__ieee754_exp+0x42>
 801b490:	bb06      	cbnz	r6, 801b4d4 <__ieee754_exp+0x84>
 801b492:	ecbd 8b04 	vpop	{d8-d9}
 801b496:	ec45 4b10 	vmov	d0, r4, r5
 801b49a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b49e:	a38a      	add	r3, pc, #552	; (adr r3, 801b6c8 <__ieee754_exp+0x278>)
 801b4a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b4a4:	ee10 0a10 	vmov	r0, s0
 801b4a8:	4629      	mov	r1, r5
 801b4aa:	f7e5 fb27 	bl	8000afc <__aeabi_dcmpgt>
 801b4ae:	b138      	cbz	r0, 801b4c0 <__ieee754_exp+0x70>
 801b4b0:	a387      	add	r3, pc, #540	; (adr r3, 801b6d0 <__ieee754_exp+0x280>)
 801b4b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b4b6:	4610      	mov	r0, r2
 801b4b8:	4619      	mov	r1, r3
 801b4ba:	f7e5 f88f 	bl	80005dc <__aeabi_dmul>
 801b4be:	e7e4      	b.n	801b48a <__ieee754_exp+0x3a>
 801b4c0:	a385      	add	r3, pc, #532	; (adr r3, 801b6d8 <__ieee754_exp+0x288>)
 801b4c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b4c6:	4620      	mov	r0, r4
 801b4c8:	4629      	mov	r1, r5
 801b4ca:	f7e5 faf9 	bl	8000ac0 <__aeabi_dcmplt>
 801b4ce:	2800      	cmp	r0, #0
 801b4d0:	f000 8087 	beq.w	801b5e2 <__ieee754_exp+0x192>
 801b4d4:	2400      	movs	r4, #0
 801b4d6:	2500      	movs	r5, #0
 801b4d8:	e7db      	b.n	801b492 <__ieee754_exp+0x42>
 801b4da:	4a93      	ldr	r2, [pc, #588]	; (801b728 <__ieee754_exp+0x2d8>)
 801b4dc:	4293      	cmp	r3, r2
 801b4de:	f240 80ac 	bls.w	801b63a <__ieee754_exp+0x1ea>
 801b4e2:	4a92      	ldr	r2, [pc, #584]	; (801b72c <__ieee754_exp+0x2dc>)
 801b4e4:	4293      	cmp	r3, r2
 801b4e6:	d87c      	bhi.n	801b5e2 <__ieee754_exp+0x192>
 801b4e8:	4b91      	ldr	r3, [pc, #580]	; (801b730 <__ieee754_exp+0x2e0>)
 801b4ea:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801b4ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b4f2:	ee10 0a10 	vmov	r0, s0
 801b4f6:	4629      	mov	r1, r5
 801b4f8:	f7e4 feb8 	bl	800026c <__aeabi_dsub>
 801b4fc:	4b8d      	ldr	r3, [pc, #564]	; (801b734 <__ieee754_exp+0x2e4>)
 801b4fe:	00f7      	lsls	r7, r6, #3
 801b500:	443b      	add	r3, r7
 801b502:	ed93 7b00 	vldr	d7, [r3]
 801b506:	f1c6 0a01 	rsb	sl, r6, #1
 801b50a:	4680      	mov	r8, r0
 801b50c:	4689      	mov	r9, r1
 801b50e:	ebaa 0a06 	sub.w	sl, sl, r6
 801b512:	eeb0 8a47 	vmov.f32	s16, s14
 801b516:	eef0 8a67 	vmov.f32	s17, s15
 801b51a:	ec53 2b18 	vmov	r2, r3, d8
 801b51e:	4640      	mov	r0, r8
 801b520:	4649      	mov	r1, r9
 801b522:	f7e4 fea3 	bl	800026c <__aeabi_dsub>
 801b526:	4604      	mov	r4, r0
 801b528:	460d      	mov	r5, r1
 801b52a:	4622      	mov	r2, r4
 801b52c:	462b      	mov	r3, r5
 801b52e:	4620      	mov	r0, r4
 801b530:	4629      	mov	r1, r5
 801b532:	f7e5 f853 	bl	80005dc <__aeabi_dmul>
 801b536:	a36a      	add	r3, pc, #424	; (adr r3, 801b6e0 <__ieee754_exp+0x290>)
 801b538:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b53c:	4606      	mov	r6, r0
 801b53e:	460f      	mov	r7, r1
 801b540:	f7e5 f84c 	bl	80005dc <__aeabi_dmul>
 801b544:	a368      	add	r3, pc, #416	; (adr r3, 801b6e8 <__ieee754_exp+0x298>)
 801b546:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b54a:	f7e4 fe8f 	bl	800026c <__aeabi_dsub>
 801b54e:	4632      	mov	r2, r6
 801b550:	463b      	mov	r3, r7
 801b552:	f7e5 f843 	bl	80005dc <__aeabi_dmul>
 801b556:	a366      	add	r3, pc, #408	; (adr r3, 801b6f0 <__ieee754_exp+0x2a0>)
 801b558:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b55c:	f7e4 fe88 	bl	8000270 <__adddf3>
 801b560:	4632      	mov	r2, r6
 801b562:	463b      	mov	r3, r7
 801b564:	f7e5 f83a 	bl	80005dc <__aeabi_dmul>
 801b568:	a363      	add	r3, pc, #396	; (adr r3, 801b6f8 <__ieee754_exp+0x2a8>)
 801b56a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b56e:	f7e4 fe7d 	bl	800026c <__aeabi_dsub>
 801b572:	4632      	mov	r2, r6
 801b574:	463b      	mov	r3, r7
 801b576:	f7e5 f831 	bl	80005dc <__aeabi_dmul>
 801b57a:	a361      	add	r3, pc, #388	; (adr r3, 801b700 <__ieee754_exp+0x2b0>)
 801b57c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b580:	f7e4 fe76 	bl	8000270 <__adddf3>
 801b584:	4632      	mov	r2, r6
 801b586:	463b      	mov	r3, r7
 801b588:	f7e5 f828 	bl	80005dc <__aeabi_dmul>
 801b58c:	4602      	mov	r2, r0
 801b58e:	460b      	mov	r3, r1
 801b590:	4620      	mov	r0, r4
 801b592:	4629      	mov	r1, r5
 801b594:	f7e4 fe6a 	bl	800026c <__aeabi_dsub>
 801b598:	4602      	mov	r2, r0
 801b59a:	460b      	mov	r3, r1
 801b59c:	4606      	mov	r6, r0
 801b59e:	460f      	mov	r7, r1
 801b5a0:	4620      	mov	r0, r4
 801b5a2:	4629      	mov	r1, r5
 801b5a4:	f7e5 f81a 	bl	80005dc <__aeabi_dmul>
 801b5a8:	ec41 0b19 	vmov	d9, r0, r1
 801b5ac:	f1ba 0f00 	cmp.w	sl, #0
 801b5b0:	d15d      	bne.n	801b66e <__ieee754_exp+0x21e>
 801b5b2:	2200      	movs	r2, #0
 801b5b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801b5b8:	4630      	mov	r0, r6
 801b5ba:	4639      	mov	r1, r7
 801b5bc:	f7e4 fe56 	bl	800026c <__aeabi_dsub>
 801b5c0:	4602      	mov	r2, r0
 801b5c2:	460b      	mov	r3, r1
 801b5c4:	ec51 0b19 	vmov	r0, r1, d9
 801b5c8:	f7e5 f932 	bl	8000830 <__aeabi_ddiv>
 801b5cc:	4622      	mov	r2, r4
 801b5ce:	462b      	mov	r3, r5
 801b5d0:	f7e4 fe4c 	bl	800026c <__aeabi_dsub>
 801b5d4:	4602      	mov	r2, r0
 801b5d6:	460b      	mov	r3, r1
 801b5d8:	2000      	movs	r0, #0
 801b5da:	4957      	ldr	r1, [pc, #348]	; (801b738 <__ieee754_exp+0x2e8>)
 801b5dc:	f7e4 fe46 	bl	800026c <__aeabi_dsub>
 801b5e0:	e753      	b.n	801b48a <__ieee754_exp+0x3a>
 801b5e2:	4856      	ldr	r0, [pc, #344]	; (801b73c <__ieee754_exp+0x2ec>)
 801b5e4:	a348      	add	r3, pc, #288	; (adr r3, 801b708 <__ieee754_exp+0x2b8>)
 801b5e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b5ea:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 801b5ee:	4629      	mov	r1, r5
 801b5f0:	4620      	mov	r0, r4
 801b5f2:	f7e4 fff3 	bl	80005dc <__aeabi_dmul>
 801b5f6:	e9d6 2300 	ldrd	r2, r3, [r6]
 801b5fa:	f7e4 fe39 	bl	8000270 <__adddf3>
 801b5fe:	f7e5 fa9d 	bl	8000b3c <__aeabi_d2iz>
 801b602:	4682      	mov	sl, r0
 801b604:	f7e4 ff80 	bl	8000508 <__aeabi_i2d>
 801b608:	a341      	add	r3, pc, #260	; (adr r3, 801b710 <__ieee754_exp+0x2c0>)
 801b60a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b60e:	4606      	mov	r6, r0
 801b610:	460f      	mov	r7, r1
 801b612:	f7e4 ffe3 	bl	80005dc <__aeabi_dmul>
 801b616:	4602      	mov	r2, r0
 801b618:	460b      	mov	r3, r1
 801b61a:	4620      	mov	r0, r4
 801b61c:	4629      	mov	r1, r5
 801b61e:	f7e4 fe25 	bl	800026c <__aeabi_dsub>
 801b622:	a33d      	add	r3, pc, #244	; (adr r3, 801b718 <__ieee754_exp+0x2c8>)
 801b624:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b628:	4680      	mov	r8, r0
 801b62a:	4689      	mov	r9, r1
 801b62c:	4630      	mov	r0, r6
 801b62e:	4639      	mov	r1, r7
 801b630:	f7e4 ffd4 	bl	80005dc <__aeabi_dmul>
 801b634:	ec41 0b18 	vmov	d8, r0, r1
 801b638:	e76f      	b.n	801b51a <__ieee754_exp+0xca>
 801b63a:	4a41      	ldr	r2, [pc, #260]	; (801b740 <__ieee754_exp+0x2f0>)
 801b63c:	4293      	cmp	r3, r2
 801b63e:	d811      	bhi.n	801b664 <__ieee754_exp+0x214>
 801b640:	a323      	add	r3, pc, #140	; (adr r3, 801b6d0 <__ieee754_exp+0x280>)
 801b642:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b646:	ee10 0a10 	vmov	r0, s0
 801b64a:	4629      	mov	r1, r5
 801b64c:	f7e4 fe10 	bl	8000270 <__adddf3>
 801b650:	4b39      	ldr	r3, [pc, #228]	; (801b738 <__ieee754_exp+0x2e8>)
 801b652:	2200      	movs	r2, #0
 801b654:	f7e5 fa52 	bl	8000afc <__aeabi_dcmpgt>
 801b658:	b138      	cbz	r0, 801b66a <__ieee754_exp+0x21a>
 801b65a:	4b37      	ldr	r3, [pc, #220]	; (801b738 <__ieee754_exp+0x2e8>)
 801b65c:	2200      	movs	r2, #0
 801b65e:	4620      	mov	r0, r4
 801b660:	4629      	mov	r1, r5
 801b662:	e710      	b.n	801b486 <__ieee754_exp+0x36>
 801b664:	f04f 0a00 	mov.w	sl, #0
 801b668:	e75f      	b.n	801b52a <__ieee754_exp+0xda>
 801b66a:	4682      	mov	sl, r0
 801b66c:	e75d      	b.n	801b52a <__ieee754_exp+0xda>
 801b66e:	4632      	mov	r2, r6
 801b670:	463b      	mov	r3, r7
 801b672:	2000      	movs	r0, #0
 801b674:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 801b678:	f7e4 fdf8 	bl	800026c <__aeabi_dsub>
 801b67c:	4602      	mov	r2, r0
 801b67e:	460b      	mov	r3, r1
 801b680:	ec51 0b19 	vmov	r0, r1, d9
 801b684:	f7e5 f8d4 	bl	8000830 <__aeabi_ddiv>
 801b688:	4602      	mov	r2, r0
 801b68a:	460b      	mov	r3, r1
 801b68c:	ec51 0b18 	vmov	r0, r1, d8
 801b690:	f7e4 fdec 	bl	800026c <__aeabi_dsub>
 801b694:	4642      	mov	r2, r8
 801b696:	464b      	mov	r3, r9
 801b698:	f7e4 fde8 	bl	800026c <__aeabi_dsub>
 801b69c:	4602      	mov	r2, r0
 801b69e:	460b      	mov	r3, r1
 801b6a0:	2000      	movs	r0, #0
 801b6a2:	4925      	ldr	r1, [pc, #148]	; (801b738 <__ieee754_exp+0x2e8>)
 801b6a4:	f7e4 fde2 	bl	800026c <__aeabi_dsub>
 801b6a8:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 801b6ac:	4592      	cmp	sl, r2
 801b6ae:	db02      	blt.n	801b6b6 <__ieee754_exp+0x266>
 801b6b0:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 801b6b4:	e6e9      	b.n	801b48a <__ieee754_exp+0x3a>
 801b6b6:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 801b6ba:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 801b6be:	2200      	movs	r2, #0
 801b6c0:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 801b6c4:	e6f9      	b.n	801b4ba <__ieee754_exp+0x6a>
 801b6c6:	bf00      	nop
 801b6c8:	fefa39ef 	.word	0xfefa39ef
 801b6cc:	40862e42 	.word	0x40862e42
 801b6d0:	8800759c 	.word	0x8800759c
 801b6d4:	7e37e43c 	.word	0x7e37e43c
 801b6d8:	d52d3051 	.word	0xd52d3051
 801b6dc:	c0874910 	.word	0xc0874910
 801b6e0:	72bea4d0 	.word	0x72bea4d0
 801b6e4:	3e663769 	.word	0x3e663769
 801b6e8:	c5d26bf1 	.word	0xc5d26bf1
 801b6ec:	3ebbbd41 	.word	0x3ebbbd41
 801b6f0:	af25de2c 	.word	0xaf25de2c
 801b6f4:	3f11566a 	.word	0x3f11566a
 801b6f8:	16bebd93 	.word	0x16bebd93
 801b6fc:	3f66c16c 	.word	0x3f66c16c
 801b700:	5555553e 	.word	0x5555553e
 801b704:	3fc55555 	.word	0x3fc55555
 801b708:	652b82fe 	.word	0x652b82fe
 801b70c:	3ff71547 	.word	0x3ff71547
 801b710:	fee00000 	.word	0xfee00000
 801b714:	3fe62e42 	.word	0x3fe62e42
 801b718:	35793c76 	.word	0x35793c76
 801b71c:	3dea39ef 	.word	0x3dea39ef
 801b720:	40862e41 	.word	0x40862e41
 801b724:	7fefffff 	.word	0x7fefffff
 801b728:	3fd62e42 	.word	0x3fd62e42
 801b72c:	3ff0a2b1 	.word	0x3ff0a2b1
 801b730:	0801c468 	.word	0x0801c468
 801b734:	0801c478 	.word	0x0801c478
 801b738:	3ff00000 	.word	0x3ff00000
 801b73c:	0801c458 	.word	0x0801c458
 801b740:	3e2fffff 	.word	0x3e2fffff
 801b744:	00000000 	.word	0x00000000

0801b748 <__ieee754_log>:
 801b748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b74c:	ec51 0b10 	vmov	r0, r1, d0
 801b750:	ed2d 8b04 	vpush	{d8-d9}
 801b754:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 801b758:	b083      	sub	sp, #12
 801b75a:	460d      	mov	r5, r1
 801b75c:	da29      	bge.n	801b7b2 <__ieee754_log+0x6a>
 801b75e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801b762:	4303      	orrs	r3, r0
 801b764:	ee10 2a10 	vmov	r2, s0
 801b768:	d10c      	bne.n	801b784 <__ieee754_log+0x3c>
 801b76a:	49cf      	ldr	r1, [pc, #828]	; (801baa8 <__ieee754_log+0x360>)
 801b76c:	2200      	movs	r2, #0
 801b76e:	2300      	movs	r3, #0
 801b770:	2000      	movs	r0, #0
 801b772:	f7e5 f85d 	bl	8000830 <__aeabi_ddiv>
 801b776:	ec41 0b10 	vmov	d0, r0, r1
 801b77a:	b003      	add	sp, #12
 801b77c:	ecbd 8b04 	vpop	{d8-d9}
 801b780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b784:	2900      	cmp	r1, #0
 801b786:	da05      	bge.n	801b794 <__ieee754_log+0x4c>
 801b788:	460b      	mov	r3, r1
 801b78a:	f7e4 fd6f 	bl	800026c <__aeabi_dsub>
 801b78e:	2200      	movs	r2, #0
 801b790:	2300      	movs	r3, #0
 801b792:	e7ee      	b.n	801b772 <__ieee754_log+0x2a>
 801b794:	4bc5      	ldr	r3, [pc, #788]	; (801baac <__ieee754_log+0x364>)
 801b796:	2200      	movs	r2, #0
 801b798:	f7e4 ff20 	bl	80005dc <__aeabi_dmul>
 801b79c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 801b7a0:	460d      	mov	r5, r1
 801b7a2:	4ac3      	ldr	r2, [pc, #780]	; (801bab0 <__ieee754_log+0x368>)
 801b7a4:	4295      	cmp	r5, r2
 801b7a6:	dd06      	ble.n	801b7b6 <__ieee754_log+0x6e>
 801b7a8:	4602      	mov	r2, r0
 801b7aa:	460b      	mov	r3, r1
 801b7ac:	f7e4 fd60 	bl	8000270 <__adddf3>
 801b7b0:	e7e1      	b.n	801b776 <__ieee754_log+0x2e>
 801b7b2:	2300      	movs	r3, #0
 801b7b4:	e7f5      	b.n	801b7a2 <__ieee754_log+0x5a>
 801b7b6:	152c      	asrs	r4, r5, #20
 801b7b8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 801b7bc:	f3c5 0513 	ubfx	r5, r5, #0, #20
 801b7c0:	441c      	add	r4, r3
 801b7c2:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 801b7c6:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 801b7ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801b7ce:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 801b7d2:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 801b7d6:	ea42 0105 	orr.w	r1, r2, r5
 801b7da:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 801b7de:	2200      	movs	r2, #0
 801b7e0:	4bb4      	ldr	r3, [pc, #720]	; (801bab4 <__ieee754_log+0x36c>)
 801b7e2:	f7e4 fd43 	bl	800026c <__aeabi_dsub>
 801b7e6:	1cab      	adds	r3, r5, #2
 801b7e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801b7ec:	2b02      	cmp	r3, #2
 801b7ee:	4682      	mov	sl, r0
 801b7f0:	468b      	mov	fp, r1
 801b7f2:	f04f 0200 	mov.w	r2, #0
 801b7f6:	dc53      	bgt.n	801b8a0 <__ieee754_log+0x158>
 801b7f8:	2300      	movs	r3, #0
 801b7fa:	f7e5 f957 	bl	8000aac <__aeabi_dcmpeq>
 801b7fe:	b1d0      	cbz	r0, 801b836 <__ieee754_log+0xee>
 801b800:	2c00      	cmp	r4, #0
 801b802:	f000 8122 	beq.w	801ba4a <__ieee754_log+0x302>
 801b806:	4620      	mov	r0, r4
 801b808:	f7e4 fe7e 	bl	8000508 <__aeabi_i2d>
 801b80c:	a390      	add	r3, pc, #576	; (adr r3, 801ba50 <__ieee754_log+0x308>)
 801b80e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b812:	4606      	mov	r6, r0
 801b814:	460f      	mov	r7, r1
 801b816:	f7e4 fee1 	bl	80005dc <__aeabi_dmul>
 801b81a:	a38f      	add	r3, pc, #572	; (adr r3, 801ba58 <__ieee754_log+0x310>)
 801b81c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b820:	4604      	mov	r4, r0
 801b822:	460d      	mov	r5, r1
 801b824:	4630      	mov	r0, r6
 801b826:	4639      	mov	r1, r7
 801b828:	f7e4 fed8 	bl	80005dc <__aeabi_dmul>
 801b82c:	4602      	mov	r2, r0
 801b82e:	460b      	mov	r3, r1
 801b830:	4620      	mov	r0, r4
 801b832:	4629      	mov	r1, r5
 801b834:	e7ba      	b.n	801b7ac <__ieee754_log+0x64>
 801b836:	a38a      	add	r3, pc, #552	; (adr r3, 801ba60 <__ieee754_log+0x318>)
 801b838:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b83c:	4650      	mov	r0, sl
 801b83e:	4659      	mov	r1, fp
 801b840:	f7e4 fecc 	bl	80005dc <__aeabi_dmul>
 801b844:	4602      	mov	r2, r0
 801b846:	460b      	mov	r3, r1
 801b848:	2000      	movs	r0, #0
 801b84a:	499b      	ldr	r1, [pc, #620]	; (801bab8 <__ieee754_log+0x370>)
 801b84c:	f7e4 fd0e 	bl	800026c <__aeabi_dsub>
 801b850:	4652      	mov	r2, sl
 801b852:	4606      	mov	r6, r0
 801b854:	460f      	mov	r7, r1
 801b856:	465b      	mov	r3, fp
 801b858:	4650      	mov	r0, sl
 801b85a:	4659      	mov	r1, fp
 801b85c:	f7e4 febe 	bl	80005dc <__aeabi_dmul>
 801b860:	4602      	mov	r2, r0
 801b862:	460b      	mov	r3, r1
 801b864:	4630      	mov	r0, r6
 801b866:	4639      	mov	r1, r7
 801b868:	f7e4 feb8 	bl	80005dc <__aeabi_dmul>
 801b86c:	4606      	mov	r6, r0
 801b86e:	460f      	mov	r7, r1
 801b870:	b914      	cbnz	r4, 801b878 <__ieee754_log+0x130>
 801b872:	4632      	mov	r2, r6
 801b874:	463b      	mov	r3, r7
 801b876:	e0a2      	b.n	801b9be <__ieee754_log+0x276>
 801b878:	4620      	mov	r0, r4
 801b87a:	f7e4 fe45 	bl	8000508 <__aeabi_i2d>
 801b87e:	a374      	add	r3, pc, #464	; (adr r3, 801ba50 <__ieee754_log+0x308>)
 801b880:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b884:	4680      	mov	r8, r0
 801b886:	4689      	mov	r9, r1
 801b888:	f7e4 fea8 	bl	80005dc <__aeabi_dmul>
 801b88c:	a372      	add	r3, pc, #456	; (adr r3, 801ba58 <__ieee754_log+0x310>)
 801b88e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b892:	4604      	mov	r4, r0
 801b894:	460d      	mov	r5, r1
 801b896:	4640      	mov	r0, r8
 801b898:	4649      	mov	r1, r9
 801b89a:	f7e4 fe9f 	bl	80005dc <__aeabi_dmul>
 801b89e:	e0a7      	b.n	801b9f0 <__ieee754_log+0x2a8>
 801b8a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801b8a4:	f7e4 fce4 	bl	8000270 <__adddf3>
 801b8a8:	4602      	mov	r2, r0
 801b8aa:	460b      	mov	r3, r1
 801b8ac:	4650      	mov	r0, sl
 801b8ae:	4659      	mov	r1, fp
 801b8b0:	f7e4 ffbe 	bl	8000830 <__aeabi_ddiv>
 801b8b4:	ec41 0b18 	vmov	d8, r0, r1
 801b8b8:	4620      	mov	r0, r4
 801b8ba:	f7e4 fe25 	bl	8000508 <__aeabi_i2d>
 801b8be:	ec53 2b18 	vmov	r2, r3, d8
 801b8c2:	ec41 0b19 	vmov	d9, r0, r1
 801b8c6:	ec51 0b18 	vmov	r0, r1, d8
 801b8ca:	f7e4 fe87 	bl	80005dc <__aeabi_dmul>
 801b8ce:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 801b8d2:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 801b8d6:	9301      	str	r3, [sp, #4]
 801b8d8:	4602      	mov	r2, r0
 801b8da:	460b      	mov	r3, r1
 801b8dc:	4680      	mov	r8, r0
 801b8de:	4689      	mov	r9, r1
 801b8e0:	f7e4 fe7c 	bl	80005dc <__aeabi_dmul>
 801b8e4:	a360      	add	r3, pc, #384	; (adr r3, 801ba68 <__ieee754_log+0x320>)
 801b8e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b8ea:	4606      	mov	r6, r0
 801b8ec:	460f      	mov	r7, r1
 801b8ee:	f7e4 fe75 	bl	80005dc <__aeabi_dmul>
 801b8f2:	a35f      	add	r3, pc, #380	; (adr r3, 801ba70 <__ieee754_log+0x328>)
 801b8f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b8f8:	f7e4 fcba 	bl	8000270 <__adddf3>
 801b8fc:	4632      	mov	r2, r6
 801b8fe:	463b      	mov	r3, r7
 801b900:	f7e4 fe6c 	bl	80005dc <__aeabi_dmul>
 801b904:	a35c      	add	r3, pc, #368	; (adr r3, 801ba78 <__ieee754_log+0x330>)
 801b906:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b90a:	f7e4 fcb1 	bl	8000270 <__adddf3>
 801b90e:	4632      	mov	r2, r6
 801b910:	463b      	mov	r3, r7
 801b912:	f7e4 fe63 	bl	80005dc <__aeabi_dmul>
 801b916:	a35a      	add	r3, pc, #360	; (adr r3, 801ba80 <__ieee754_log+0x338>)
 801b918:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b91c:	f7e4 fca8 	bl	8000270 <__adddf3>
 801b920:	4642      	mov	r2, r8
 801b922:	464b      	mov	r3, r9
 801b924:	f7e4 fe5a 	bl	80005dc <__aeabi_dmul>
 801b928:	a357      	add	r3, pc, #348	; (adr r3, 801ba88 <__ieee754_log+0x340>)
 801b92a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b92e:	4680      	mov	r8, r0
 801b930:	4689      	mov	r9, r1
 801b932:	4630      	mov	r0, r6
 801b934:	4639      	mov	r1, r7
 801b936:	f7e4 fe51 	bl	80005dc <__aeabi_dmul>
 801b93a:	a355      	add	r3, pc, #340	; (adr r3, 801ba90 <__ieee754_log+0x348>)
 801b93c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b940:	f7e4 fc96 	bl	8000270 <__adddf3>
 801b944:	4632      	mov	r2, r6
 801b946:	463b      	mov	r3, r7
 801b948:	f7e4 fe48 	bl	80005dc <__aeabi_dmul>
 801b94c:	a352      	add	r3, pc, #328	; (adr r3, 801ba98 <__ieee754_log+0x350>)
 801b94e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b952:	f7e4 fc8d 	bl	8000270 <__adddf3>
 801b956:	4632      	mov	r2, r6
 801b958:	463b      	mov	r3, r7
 801b95a:	f7e4 fe3f 	bl	80005dc <__aeabi_dmul>
 801b95e:	460b      	mov	r3, r1
 801b960:	4602      	mov	r2, r0
 801b962:	4649      	mov	r1, r9
 801b964:	4640      	mov	r0, r8
 801b966:	f7e4 fc83 	bl	8000270 <__adddf3>
 801b96a:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 801b96e:	9b01      	ldr	r3, [sp, #4]
 801b970:	3551      	adds	r5, #81	; 0x51
 801b972:	431d      	orrs	r5, r3
 801b974:	2d00      	cmp	r5, #0
 801b976:	4680      	mov	r8, r0
 801b978:	4689      	mov	r9, r1
 801b97a:	dd48      	ble.n	801ba0e <__ieee754_log+0x2c6>
 801b97c:	4b4e      	ldr	r3, [pc, #312]	; (801bab8 <__ieee754_log+0x370>)
 801b97e:	2200      	movs	r2, #0
 801b980:	4650      	mov	r0, sl
 801b982:	4659      	mov	r1, fp
 801b984:	f7e4 fe2a 	bl	80005dc <__aeabi_dmul>
 801b988:	4652      	mov	r2, sl
 801b98a:	465b      	mov	r3, fp
 801b98c:	f7e4 fe26 	bl	80005dc <__aeabi_dmul>
 801b990:	4602      	mov	r2, r0
 801b992:	460b      	mov	r3, r1
 801b994:	4606      	mov	r6, r0
 801b996:	460f      	mov	r7, r1
 801b998:	4640      	mov	r0, r8
 801b99a:	4649      	mov	r1, r9
 801b99c:	f7e4 fc68 	bl	8000270 <__adddf3>
 801b9a0:	ec53 2b18 	vmov	r2, r3, d8
 801b9a4:	f7e4 fe1a 	bl	80005dc <__aeabi_dmul>
 801b9a8:	4680      	mov	r8, r0
 801b9aa:	4689      	mov	r9, r1
 801b9ac:	b964      	cbnz	r4, 801b9c8 <__ieee754_log+0x280>
 801b9ae:	4602      	mov	r2, r0
 801b9b0:	460b      	mov	r3, r1
 801b9b2:	4630      	mov	r0, r6
 801b9b4:	4639      	mov	r1, r7
 801b9b6:	f7e4 fc59 	bl	800026c <__aeabi_dsub>
 801b9ba:	4602      	mov	r2, r0
 801b9bc:	460b      	mov	r3, r1
 801b9be:	4650      	mov	r0, sl
 801b9c0:	4659      	mov	r1, fp
 801b9c2:	f7e4 fc53 	bl	800026c <__aeabi_dsub>
 801b9c6:	e6d6      	b.n	801b776 <__ieee754_log+0x2e>
 801b9c8:	a321      	add	r3, pc, #132	; (adr r3, 801ba50 <__ieee754_log+0x308>)
 801b9ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b9ce:	ec51 0b19 	vmov	r0, r1, d9
 801b9d2:	f7e4 fe03 	bl	80005dc <__aeabi_dmul>
 801b9d6:	a320      	add	r3, pc, #128	; (adr r3, 801ba58 <__ieee754_log+0x310>)
 801b9d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b9dc:	4604      	mov	r4, r0
 801b9de:	460d      	mov	r5, r1
 801b9e0:	ec51 0b19 	vmov	r0, r1, d9
 801b9e4:	f7e4 fdfa 	bl	80005dc <__aeabi_dmul>
 801b9e8:	4642      	mov	r2, r8
 801b9ea:	464b      	mov	r3, r9
 801b9ec:	f7e4 fc40 	bl	8000270 <__adddf3>
 801b9f0:	4602      	mov	r2, r0
 801b9f2:	460b      	mov	r3, r1
 801b9f4:	4630      	mov	r0, r6
 801b9f6:	4639      	mov	r1, r7
 801b9f8:	f7e4 fc38 	bl	800026c <__aeabi_dsub>
 801b9fc:	4652      	mov	r2, sl
 801b9fe:	465b      	mov	r3, fp
 801ba00:	f7e4 fc34 	bl	800026c <__aeabi_dsub>
 801ba04:	4602      	mov	r2, r0
 801ba06:	460b      	mov	r3, r1
 801ba08:	4620      	mov	r0, r4
 801ba0a:	4629      	mov	r1, r5
 801ba0c:	e7d9      	b.n	801b9c2 <__ieee754_log+0x27a>
 801ba0e:	4602      	mov	r2, r0
 801ba10:	460b      	mov	r3, r1
 801ba12:	4650      	mov	r0, sl
 801ba14:	4659      	mov	r1, fp
 801ba16:	f7e4 fc29 	bl	800026c <__aeabi_dsub>
 801ba1a:	ec53 2b18 	vmov	r2, r3, d8
 801ba1e:	f7e4 fddd 	bl	80005dc <__aeabi_dmul>
 801ba22:	4606      	mov	r6, r0
 801ba24:	460f      	mov	r7, r1
 801ba26:	2c00      	cmp	r4, #0
 801ba28:	f43f af23 	beq.w	801b872 <__ieee754_log+0x12a>
 801ba2c:	a308      	add	r3, pc, #32	; (adr r3, 801ba50 <__ieee754_log+0x308>)
 801ba2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba32:	ec51 0b19 	vmov	r0, r1, d9
 801ba36:	f7e4 fdd1 	bl	80005dc <__aeabi_dmul>
 801ba3a:	a307      	add	r3, pc, #28	; (adr r3, 801ba58 <__ieee754_log+0x310>)
 801ba3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba40:	4604      	mov	r4, r0
 801ba42:	460d      	mov	r5, r1
 801ba44:	ec51 0b19 	vmov	r0, r1, d9
 801ba48:	e727      	b.n	801b89a <__ieee754_log+0x152>
 801ba4a:	ed9f 0b15 	vldr	d0, [pc, #84]	; 801baa0 <__ieee754_log+0x358>
 801ba4e:	e694      	b.n	801b77a <__ieee754_log+0x32>
 801ba50:	fee00000 	.word	0xfee00000
 801ba54:	3fe62e42 	.word	0x3fe62e42
 801ba58:	35793c76 	.word	0x35793c76
 801ba5c:	3dea39ef 	.word	0x3dea39ef
 801ba60:	55555555 	.word	0x55555555
 801ba64:	3fd55555 	.word	0x3fd55555
 801ba68:	df3e5244 	.word	0xdf3e5244
 801ba6c:	3fc2f112 	.word	0x3fc2f112
 801ba70:	96cb03de 	.word	0x96cb03de
 801ba74:	3fc74664 	.word	0x3fc74664
 801ba78:	94229359 	.word	0x94229359
 801ba7c:	3fd24924 	.word	0x3fd24924
 801ba80:	55555593 	.word	0x55555593
 801ba84:	3fe55555 	.word	0x3fe55555
 801ba88:	d078c69f 	.word	0xd078c69f
 801ba8c:	3fc39a09 	.word	0x3fc39a09
 801ba90:	1d8e78af 	.word	0x1d8e78af
 801ba94:	3fcc71c5 	.word	0x3fcc71c5
 801ba98:	9997fa04 	.word	0x9997fa04
 801ba9c:	3fd99999 	.word	0x3fd99999
	...
 801baa8:	c3500000 	.word	0xc3500000
 801baac:	43500000 	.word	0x43500000
 801bab0:	7fefffff 	.word	0x7fefffff
 801bab4:	3ff00000 	.word	0x3ff00000
 801bab8:	3fe00000 	.word	0x3fe00000

0801babc <__ieee754_sqrt>:
 801babc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bac0:	ec55 4b10 	vmov	r4, r5, d0
 801bac4:	4e56      	ldr	r6, [pc, #344]	; (801bc20 <__ieee754_sqrt+0x164>)
 801bac6:	43ae      	bics	r6, r5
 801bac8:	ee10 0a10 	vmov	r0, s0
 801bacc:	ee10 3a10 	vmov	r3, s0
 801bad0:	4629      	mov	r1, r5
 801bad2:	462a      	mov	r2, r5
 801bad4:	d110      	bne.n	801baf8 <__ieee754_sqrt+0x3c>
 801bad6:	ee10 2a10 	vmov	r2, s0
 801bada:	462b      	mov	r3, r5
 801badc:	f7e4 fd7e 	bl	80005dc <__aeabi_dmul>
 801bae0:	4602      	mov	r2, r0
 801bae2:	460b      	mov	r3, r1
 801bae4:	4620      	mov	r0, r4
 801bae6:	4629      	mov	r1, r5
 801bae8:	f7e4 fbc2 	bl	8000270 <__adddf3>
 801baec:	4604      	mov	r4, r0
 801baee:	460d      	mov	r5, r1
 801baf0:	ec45 4b10 	vmov	d0, r4, r5
 801baf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801baf8:	2d00      	cmp	r5, #0
 801bafa:	dc10      	bgt.n	801bb1e <__ieee754_sqrt+0x62>
 801bafc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801bb00:	4330      	orrs	r0, r6
 801bb02:	d0f5      	beq.n	801baf0 <__ieee754_sqrt+0x34>
 801bb04:	b15d      	cbz	r5, 801bb1e <__ieee754_sqrt+0x62>
 801bb06:	ee10 2a10 	vmov	r2, s0
 801bb0a:	462b      	mov	r3, r5
 801bb0c:	ee10 0a10 	vmov	r0, s0
 801bb10:	f7e4 fbac 	bl	800026c <__aeabi_dsub>
 801bb14:	4602      	mov	r2, r0
 801bb16:	460b      	mov	r3, r1
 801bb18:	f7e4 fe8a 	bl	8000830 <__aeabi_ddiv>
 801bb1c:	e7e6      	b.n	801baec <__ieee754_sqrt+0x30>
 801bb1e:	1509      	asrs	r1, r1, #20
 801bb20:	d076      	beq.n	801bc10 <__ieee754_sqrt+0x154>
 801bb22:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801bb26:	07ce      	lsls	r6, r1, #31
 801bb28:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 801bb2c:	bf5e      	ittt	pl
 801bb2e:	0fda      	lsrpl	r2, r3, #31
 801bb30:	005b      	lslpl	r3, r3, #1
 801bb32:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 801bb36:	0fda      	lsrs	r2, r3, #31
 801bb38:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 801bb3c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 801bb40:	2000      	movs	r0, #0
 801bb42:	106d      	asrs	r5, r5, #1
 801bb44:	005b      	lsls	r3, r3, #1
 801bb46:	f04f 0e16 	mov.w	lr, #22
 801bb4a:	4684      	mov	ip, r0
 801bb4c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801bb50:	eb0c 0401 	add.w	r4, ip, r1
 801bb54:	4294      	cmp	r4, r2
 801bb56:	bfde      	ittt	le
 801bb58:	1b12      	suble	r2, r2, r4
 801bb5a:	eb04 0c01 	addle.w	ip, r4, r1
 801bb5e:	1840      	addle	r0, r0, r1
 801bb60:	0052      	lsls	r2, r2, #1
 801bb62:	f1be 0e01 	subs.w	lr, lr, #1
 801bb66:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801bb6a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801bb6e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801bb72:	d1ed      	bne.n	801bb50 <__ieee754_sqrt+0x94>
 801bb74:	4671      	mov	r1, lr
 801bb76:	2720      	movs	r7, #32
 801bb78:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801bb7c:	4562      	cmp	r2, ip
 801bb7e:	eb04 060e 	add.w	r6, r4, lr
 801bb82:	dc02      	bgt.n	801bb8a <__ieee754_sqrt+0xce>
 801bb84:	d113      	bne.n	801bbae <__ieee754_sqrt+0xf2>
 801bb86:	429e      	cmp	r6, r3
 801bb88:	d811      	bhi.n	801bbae <__ieee754_sqrt+0xf2>
 801bb8a:	2e00      	cmp	r6, #0
 801bb8c:	eb06 0e04 	add.w	lr, r6, r4
 801bb90:	da43      	bge.n	801bc1a <__ieee754_sqrt+0x15e>
 801bb92:	f1be 0f00 	cmp.w	lr, #0
 801bb96:	db40      	blt.n	801bc1a <__ieee754_sqrt+0x15e>
 801bb98:	f10c 0801 	add.w	r8, ip, #1
 801bb9c:	eba2 020c 	sub.w	r2, r2, ip
 801bba0:	429e      	cmp	r6, r3
 801bba2:	bf88      	it	hi
 801bba4:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801bba8:	1b9b      	subs	r3, r3, r6
 801bbaa:	4421      	add	r1, r4
 801bbac:	46c4      	mov	ip, r8
 801bbae:	0052      	lsls	r2, r2, #1
 801bbb0:	3f01      	subs	r7, #1
 801bbb2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801bbb6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801bbba:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801bbbe:	d1dd      	bne.n	801bb7c <__ieee754_sqrt+0xc0>
 801bbc0:	4313      	orrs	r3, r2
 801bbc2:	d006      	beq.n	801bbd2 <__ieee754_sqrt+0x116>
 801bbc4:	1c4c      	adds	r4, r1, #1
 801bbc6:	bf13      	iteet	ne
 801bbc8:	3101      	addne	r1, #1
 801bbca:	3001      	addeq	r0, #1
 801bbcc:	4639      	moveq	r1, r7
 801bbce:	f021 0101 	bicne.w	r1, r1, #1
 801bbd2:	1043      	asrs	r3, r0, #1
 801bbd4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801bbd8:	0849      	lsrs	r1, r1, #1
 801bbda:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801bbde:	07c2      	lsls	r2, r0, #31
 801bbe0:	bf48      	it	mi
 801bbe2:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 801bbe6:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 801bbea:	460c      	mov	r4, r1
 801bbec:	463d      	mov	r5, r7
 801bbee:	e77f      	b.n	801baf0 <__ieee754_sqrt+0x34>
 801bbf0:	0ada      	lsrs	r2, r3, #11
 801bbf2:	3815      	subs	r0, #21
 801bbf4:	055b      	lsls	r3, r3, #21
 801bbf6:	2a00      	cmp	r2, #0
 801bbf8:	d0fa      	beq.n	801bbf0 <__ieee754_sqrt+0x134>
 801bbfa:	02d7      	lsls	r7, r2, #11
 801bbfc:	d50a      	bpl.n	801bc14 <__ieee754_sqrt+0x158>
 801bbfe:	f1c1 0420 	rsb	r4, r1, #32
 801bc02:	fa23 f404 	lsr.w	r4, r3, r4
 801bc06:	1e4d      	subs	r5, r1, #1
 801bc08:	408b      	lsls	r3, r1
 801bc0a:	4322      	orrs	r2, r4
 801bc0c:	1b41      	subs	r1, r0, r5
 801bc0e:	e788      	b.n	801bb22 <__ieee754_sqrt+0x66>
 801bc10:	4608      	mov	r0, r1
 801bc12:	e7f0      	b.n	801bbf6 <__ieee754_sqrt+0x13a>
 801bc14:	0052      	lsls	r2, r2, #1
 801bc16:	3101      	adds	r1, #1
 801bc18:	e7ef      	b.n	801bbfa <__ieee754_sqrt+0x13e>
 801bc1a:	46e0      	mov	r8, ip
 801bc1c:	e7be      	b.n	801bb9c <__ieee754_sqrt+0xe0>
 801bc1e:	bf00      	nop
 801bc20:	7ff00000 	.word	0x7ff00000

0801bc24 <finite>:
 801bc24:	b082      	sub	sp, #8
 801bc26:	ed8d 0b00 	vstr	d0, [sp]
 801bc2a:	9801      	ldr	r0, [sp, #4]
 801bc2c:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801bc30:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801bc34:	0fc0      	lsrs	r0, r0, #31
 801bc36:	b002      	add	sp, #8
 801bc38:	4770      	bx	lr
 801bc3a:	0000      	movs	r0, r0
 801bc3c:	0000      	movs	r0, r0
	...

0801bc40 <nan>:
 801bc40:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801bc48 <nan+0x8>
 801bc44:	4770      	bx	lr
 801bc46:	bf00      	nop
 801bc48:	00000000 	.word	0x00000000
 801bc4c:	7ff80000 	.word	0x7ff80000

0801bc50 <_init>:
 801bc50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bc52:	bf00      	nop
 801bc54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801bc56:	bc08      	pop	{r3}
 801bc58:	469e      	mov	lr, r3
 801bc5a:	4770      	bx	lr

0801bc5c <_fini>:
 801bc5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bc5e:	bf00      	nop
 801bc60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801bc62:	bc08      	pop	{r3}
 801bc64:	469e      	mov	lr, r3
 801bc66:	4770      	bx	lr
