
AMS-CC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001acc8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000850  0801ae58  0801ae58  0002ae58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b6a8  0801b6a8  0003142c  2**0
                  CONTENTS
  4 .ARM          00000008  0801b6a8  0801b6a8  0002b6a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b6b0  0801b6b0  0003142c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b6b0  0801b6b0  0002b6b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801b6b4  0801b6b4  0002b6b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000142c  20000000  0801b6b8  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0003142c  2**0
                  CONTENTS
 10 .bss          0001d5ec  20001430  20001430  00031430  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2001ea1c  2001ea1c  00031430  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0003142c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00055a95  00000000  00000000  0003145c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00009708  00000000  00000000  00086ef1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00005268  00000000  00000000  00090600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00004d10  00000000  00000000  00095868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002bacc  00000000  00000000  0009a578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003fb98  00000000  00000000  000c6044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001008ce  00000000  00000000  00105bdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000c8  00000000  00000000  002064aa  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0001685c  00000000  00000000  00206574  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20001430 	.word	0x20001430
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801ae40 	.word	0x0801ae40

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20001434 	.word	0x20001434
 80001cc:	0801ae40 	.word	0x0801ae40

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	2001e968 	.word	0x2001e968

08000264 <__aeabi_drsub>:
 8000264:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000268:	e002      	b.n	8000270 <__adddf3>
 800026a:	bf00      	nop

0800026c <__aeabi_dsub>:
 800026c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000270 <__adddf3>:
 8000270:	b530      	push	{r4, r5, lr}
 8000272:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000276:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800027a:	ea94 0f05 	teq	r4, r5
 800027e:	bf08      	it	eq
 8000280:	ea90 0f02 	teqeq	r0, r2
 8000284:	bf1f      	itttt	ne
 8000286:	ea54 0c00 	orrsne.w	ip, r4, r0
 800028a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800028e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000292:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000296:	f000 80e2 	beq.w	800045e <__adddf3+0x1ee>
 800029a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800029e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002a2:	bfb8      	it	lt
 80002a4:	426d      	neglt	r5, r5
 80002a6:	dd0c      	ble.n	80002c2 <__adddf3+0x52>
 80002a8:	442c      	add	r4, r5
 80002aa:	ea80 0202 	eor.w	r2, r0, r2
 80002ae:	ea81 0303 	eor.w	r3, r1, r3
 80002b2:	ea82 0000 	eor.w	r0, r2, r0
 80002b6:	ea83 0101 	eor.w	r1, r3, r1
 80002ba:	ea80 0202 	eor.w	r2, r0, r2
 80002be:	ea81 0303 	eor.w	r3, r1, r3
 80002c2:	2d36      	cmp	r5, #54	; 0x36
 80002c4:	bf88      	it	hi
 80002c6:	bd30      	pophi	{r4, r5, pc}
 80002c8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002d0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002d4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002d8:	d002      	beq.n	80002e0 <__adddf3+0x70>
 80002da:	4240      	negs	r0, r0
 80002dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002e0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002e8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002ec:	d002      	beq.n	80002f4 <__adddf3+0x84>
 80002ee:	4252      	negs	r2, r2
 80002f0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002f4:	ea94 0f05 	teq	r4, r5
 80002f8:	f000 80a7 	beq.w	800044a <__adddf3+0x1da>
 80002fc:	f1a4 0401 	sub.w	r4, r4, #1
 8000300:	f1d5 0e20 	rsbs	lr, r5, #32
 8000304:	db0d      	blt.n	8000322 <__adddf3+0xb2>
 8000306:	fa02 fc0e 	lsl.w	ip, r2, lr
 800030a:	fa22 f205 	lsr.w	r2, r2, r5
 800030e:	1880      	adds	r0, r0, r2
 8000310:	f141 0100 	adc.w	r1, r1, #0
 8000314:	fa03 f20e 	lsl.w	r2, r3, lr
 8000318:	1880      	adds	r0, r0, r2
 800031a:	fa43 f305 	asr.w	r3, r3, r5
 800031e:	4159      	adcs	r1, r3
 8000320:	e00e      	b.n	8000340 <__adddf3+0xd0>
 8000322:	f1a5 0520 	sub.w	r5, r5, #32
 8000326:	f10e 0e20 	add.w	lr, lr, #32
 800032a:	2a01      	cmp	r2, #1
 800032c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000330:	bf28      	it	cs
 8000332:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	18c0      	adds	r0, r0, r3
 800033c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000340:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000344:	d507      	bpl.n	8000356 <__adddf3+0xe6>
 8000346:	f04f 0e00 	mov.w	lr, #0
 800034a:	f1dc 0c00 	rsbs	ip, ip, #0
 800034e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000352:	eb6e 0101 	sbc.w	r1, lr, r1
 8000356:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800035a:	d31b      	bcc.n	8000394 <__adddf3+0x124>
 800035c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000360:	d30c      	bcc.n	800037c <__adddf3+0x10c>
 8000362:	0849      	lsrs	r1, r1, #1
 8000364:	ea5f 0030 	movs.w	r0, r0, rrx
 8000368:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800036c:	f104 0401 	add.w	r4, r4, #1
 8000370:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000374:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000378:	f080 809a 	bcs.w	80004b0 <__adddf3+0x240>
 800037c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000380:	bf08      	it	eq
 8000382:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000386:	f150 0000 	adcs.w	r0, r0, #0
 800038a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800038e:	ea41 0105 	orr.w	r1, r1, r5
 8000392:	bd30      	pop	{r4, r5, pc}
 8000394:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000398:	4140      	adcs	r0, r0
 800039a:	eb41 0101 	adc.w	r1, r1, r1
 800039e:	3c01      	subs	r4, #1
 80003a0:	bf28      	it	cs
 80003a2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003a6:	d2e9      	bcs.n	800037c <__adddf3+0x10c>
 80003a8:	f091 0f00 	teq	r1, #0
 80003ac:	bf04      	itt	eq
 80003ae:	4601      	moveq	r1, r0
 80003b0:	2000      	moveq	r0, #0
 80003b2:	fab1 f381 	clz	r3, r1
 80003b6:	bf08      	it	eq
 80003b8:	3320      	addeq	r3, #32
 80003ba:	f1a3 030b 	sub.w	r3, r3, #11
 80003be:	f1b3 0220 	subs.w	r2, r3, #32
 80003c2:	da0c      	bge.n	80003de <__adddf3+0x16e>
 80003c4:	320c      	adds	r2, #12
 80003c6:	dd08      	ble.n	80003da <__adddf3+0x16a>
 80003c8:	f102 0c14 	add.w	ip, r2, #20
 80003cc:	f1c2 020c 	rsb	r2, r2, #12
 80003d0:	fa01 f00c 	lsl.w	r0, r1, ip
 80003d4:	fa21 f102 	lsr.w	r1, r1, r2
 80003d8:	e00c      	b.n	80003f4 <__adddf3+0x184>
 80003da:	f102 0214 	add.w	r2, r2, #20
 80003de:	bfd8      	it	le
 80003e0:	f1c2 0c20 	rsble	ip, r2, #32
 80003e4:	fa01 f102 	lsl.w	r1, r1, r2
 80003e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003ec:	bfdc      	itt	le
 80003ee:	ea41 010c 	orrle.w	r1, r1, ip
 80003f2:	4090      	lslle	r0, r2
 80003f4:	1ae4      	subs	r4, r4, r3
 80003f6:	bfa2      	ittt	ge
 80003f8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003fc:	4329      	orrge	r1, r5
 80003fe:	bd30      	popge	{r4, r5, pc}
 8000400:	ea6f 0404 	mvn.w	r4, r4
 8000404:	3c1f      	subs	r4, #31
 8000406:	da1c      	bge.n	8000442 <__adddf3+0x1d2>
 8000408:	340c      	adds	r4, #12
 800040a:	dc0e      	bgt.n	800042a <__adddf3+0x1ba>
 800040c:	f104 0414 	add.w	r4, r4, #20
 8000410:	f1c4 0220 	rsb	r2, r4, #32
 8000414:	fa20 f004 	lsr.w	r0, r0, r4
 8000418:	fa01 f302 	lsl.w	r3, r1, r2
 800041c:	ea40 0003 	orr.w	r0, r0, r3
 8000420:	fa21 f304 	lsr.w	r3, r1, r4
 8000424:	ea45 0103 	orr.w	r1, r5, r3
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	f1c4 040c 	rsb	r4, r4, #12
 800042e:	f1c4 0220 	rsb	r2, r4, #32
 8000432:	fa20 f002 	lsr.w	r0, r0, r2
 8000436:	fa01 f304 	lsl.w	r3, r1, r4
 800043a:	ea40 0003 	orr.w	r0, r0, r3
 800043e:	4629      	mov	r1, r5
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	fa21 f004 	lsr.w	r0, r1, r4
 8000446:	4629      	mov	r1, r5
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	f094 0f00 	teq	r4, #0
 800044e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000452:	bf06      	itte	eq
 8000454:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000458:	3401      	addeq	r4, #1
 800045a:	3d01      	subne	r5, #1
 800045c:	e74e      	b.n	80002fc <__adddf3+0x8c>
 800045e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000462:	bf18      	it	ne
 8000464:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000468:	d029      	beq.n	80004be <__adddf3+0x24e>
 800046a:	ea94 0f05 	teq	r4, r5
 800046e:	bf08      	it	eq
 8000470:	ea90 0f02 	teqeq	r0, r2
 8000474:	d005      	beq.n	8000482 <__adddf3+0x212>
 8000476:	ea54 0c00 	orrs.w	ip, r4, r0
 800047a:	bf04      	itt	eq
 800047c:	4619      	moveq	r1, r3
 800047e:	4610      	moveq	r0, r2
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea91 0f03 	teq	r1, r3
 8000486:	bf1e      	ittt	ne
 8000488:	2100      	movne	r1, #0
 800048a:	2000      	movne	r0, #0
 800048c:	bd30      	popne	{r4, r5, pc}
 800048e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000492:	d105      	bne.n	80004a0 <__adddf3+0x230>
 8000494:	0040      	lsls	r0, r0, #1
 8000496:	4149      	adcs	r1, r1
 8000498:	bf28      	it	cs
 800049a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800049e:	bd30      	pop	{r4, r5, pc}
 80004a0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004a4:	bf3c      	itt	cc
 80004a6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004aa:	bd30      	popcc	{r4, r5, pc}
 80004ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004b0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004b8:	f04f 0000 	mov.w	r0, #0
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c2:	bf1a      	itte	ne
 80004c4:	4619      	movne	r1, r3
 80004c6:	4610      	movne	r0, r2
 80004c8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004cc:	bf1c      	itt	ne
 80004ce:	460b      	movne	r3, r1
 80004d0:	4602      	movne	r2, r0
 80004d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004d6:	bf06      	itte	eq
 80004d8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004dc:	ea91 0f03 	teqeq	r1, r3
 80004e0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	bf00      	nop

080004e8 <__aeabi_ui2d>:
 80004e8:	f090 0f00 	teq	r0, #0
 80004ec:	bf04      	itt	eq
 80004ee:	2100      	moveq	r1, #0
 80004f0:	4770      	bxeq	lr
 80004f2:	b530      	push	{r4, r5, lr}
 80004f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fc:	f04f 0500 	mov.w	r5, #0
 8000500:	f04f 0100 	mov.w	r1, #0
 8000504:	e750      	b.n	80003a8 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_i2d>:
 8000508:	f090 0f00 	teq	r0, #0
 800050c:	bf04      	itt	eq
 800050e:	2100      	moveq	r1, #0
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000518:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000520:	bf48      	it	mi
 8000522:	4240      	negmi	r0, r0
 8000524:	f04f 0100 	mov.w	r1, #0
 8000528:	e73e      	b.n	80003a8 <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_f2d>:
 800052c:	0042      	lsls	r2, r0, #1
 800052e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000532:	ea4f 0131 	mov.w	r1, r1, rrx
 8000536:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800053a:	bf1f      	itttt	ne
 800053c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000540:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000544:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000548:	4770      	bxne	lr
 800054a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800054e:	bf08      	it	eq
 8000550:	4770      	bxeq	lr
 8000552:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000556:	bf04      	itt	eq
 8000558:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000564:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000568:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800056c:	e71c      	b.n	80003a8 <__adddf3+0x138>
 800056e:	bf00      	nop

08000570 <__aeabi_ul2d>:
 8000570:	ea50 0201 	orrs.w	r2, r0, r1
 8000574:	bf08      	it	eq
 8000576:	4770      	bxeq	lr
 8000578:	b530      	push	{r4, r5, lr}
 800057a:	f04f 0500 	mov.w	r5, #0
 800057e:	e00a      	b.n	8000596 <__aeabi_l2d+0x16>

08000580 <__aeabi_l2d>:
 8000580:	ea50 0201 	orrs.w	r2, r0, r1
 8000584:	bf08      	it	eq
 8000586:	4770      	bxeq	lr
 8000588:	b530      	push	{r4, r5, lr}
 800058a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800058e:	d502      	bpl.n	8000596 <__aeabi_l2d+0x16>
 8000590:	4240      	negs	r0, r0
 8000592:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000596:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800059a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800059e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005a2:	f43f aed8 	beq.w	8000356 <__adddf3+0xe6>
 80005a6:	f04f 0203 	mov.w	r2, #3
 80005aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ae:	bf18      	it	ne
 80005b0:	3203      	addne	r2, #3
 80005b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005b6:	bf18      	it	ne
 80005b8:	3203      	addne	r2, #3
 80005ba:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005be:	f1c2 0320 	rsb	r3, r2, #32
 80005c2:	fa00 fc03 	lsl.w	ip, r0, r3
 80005c6:	fa20 f002 	lsr.w	r0, r0, r2
 80005ca:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ce:	ea40 000e 	orr.w	r0, r0, lr
 80005d2:	fa21 f102 	lsr.w	r1, r1, r2
 80005d6:	4414      	add	r4, r2
 80005d8:	e6bd      	b.n	8000356 <__adddf3+0xe6>
 80005da:	bf00      	nop

080005dc <__aeabi_dmul>:
 80005dc:	b570      	push	{r4, r5, r6, lr}
 80005de:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ea:	bf1d      	ittte	ne
 80005ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005f0:	ea94 0f0c 	teqne	r4, ip
 80005f4:	ea95 0f0c 	teqne	r5, ip
 80005f8:	f000 f8de 	bleq	80007b8 <__aeabi_dmul+0x1dc>
 80005fc:	442c      	add	r4, r5
 80005fe:	ea81 0603 	eor.w	r6, r1, r3
 8000602:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000606:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800060a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800060e:	bf18      	it	ne
 8000610:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800061c:	d038      	beq.n	8000690 <__aeabi_dmul+0xb4>
 800061e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000622:	f04f 0500 	mov.w	r5, #0
 8000626:	fbe1 e502 	umlal	lr, r5, r1, r2
 800062a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800062e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000632:	f04f 0600 	mov.w	r6, #0
 8000636:	fbe1 5603 	umlal	r5, r6, r1, r3
 800063a:	f09c 0f00 	teq	ip, #0
 800063e:	bf18      	it	ne
 8000640:	f04e 0e01 	orrne.w	lr, lr, #1
 8000644:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000648:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800064c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000650:	d204      	bcs.n	800065c <__aeabi_dmul+0x80>
 8000652:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000656:	416d      	adcs	r5, r5
 8000658:	eb46 0606 	adc.w	r6, r6, r6
 800065c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000660:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000664:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000668:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800066c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000670:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000674:	bf88      	it	hi
 8000676:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800067a:	d81e      	bhi.n	80006ba <__aeabi_dmul+0xde>
 800067c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000680:	bf08      	it	eq
 8000682:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000686:	f150 0000 	adcs.w	r0, r0, #0
 800068a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800068e:	bd70      	pop	{r4, r5, r6, pc}
 8000690:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000694:	ea46 0101 	orr.w	r1, r6, r1
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	ea81 0103 	eor.w	r1, r1, r3
 80006a0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006a4:	bfc2      	ittt	gt
 80006a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ae:	bd70      	popgt	{r4, r5, r6, pc}
 80006b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006b4:	f04f 0e00 	mov.w	lr, #0
 80006b8:	3c01      	subs	r4, #1
 80006ba:	f300 80ab 	bgt.w	8000814 <__aeabi_dmul+0x238>
 80006be:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006c2:	bfde      	ittt	le
 80006c4:	2000      	movle	r0, #0
 80006c6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ca:	bd70      	pople	{r4, r5, r6, pc}
 80006cc:	f1c4 0400 	rsb	r4, r4, #0
 80006d0:	3c20      	subs	r4, #32
 80006d2:	da35      	bge.n	8000740 <__aeabi_dmul+0x164>
 80006d4:	340c      	adds	r4, #12
 80006d6:	dc1b      	bgt.n	8000710 <__aeabi_dmul+0x134>
 80006d8:	f104 0414 	add.w	r4, r4, #20
 80006dc:	f1c4 0520 	rsb	r5, r4, #32
 80006e0:	fa00 f305 	lsl.w	r3, r0, r5
 80006e4:	fa20 f004 	lsr.w	r0, r0, r4
 80006e8:	fa01 f205 	lsl.w	r2, r1, r5
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	fa21 f604 	lsr.w	r6, r1, r4
 8000700:	eb42 0106 	adc.w	r1, r2, r6
 8000704:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000708:	bf08      	it	eq
 800070a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070e:	bd70      	pop	{r4, r5, r6, pc}
 8000710:	f1c4 040c 	rsb	r4, r4, #12
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f304 	lsl.w	r3, r0, r4
 800071c:	fa20 f005 	lsr.w	r0, r0, r5
 8000720:	fa01 f204 	lsl.w	r2, r1, r4
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000730:	f141 0100 	adc.w	r1, r1, #0
 8000734:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000738:	bf08      	it	eq
 800073a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073e:	bd70      	pop	{r4, r5, r6, pc}
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f205 	lsl.w	r2, r0, r5
 8000748:	ea4e 0e02 	orr.w	lr, lr, r2
 800074c:	fa20 f304 	lsr.w	r3, r0, r4
 8000750:	fa01 f205 	lsl.w	r2, r1, r5
 8000754:	ea43 0302 	orr.w	r3, r3, r2
 8000758:	fa21 f004 	lsr.w	r0, r1, r4
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	fa21 f204 	lsr.w	r2, r1, r4
 8000764:	ea20 0002 	bic.w	r0, r0, r2
 8000768:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800076c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000770:	bf08      	it	eq
 8000772:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000776:	bd70      	pop	{r4, r5, r6, pc}
 8000778:	f094 0f00 	teq	r4, #0
 800077c:	d10f      	bne.n	800079e <__aeabi_dmul+0x1c2>
 800077e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000782:	0040      	lsls	r0, r0, #1
 8000784:	eb41 0101 	adc.w	r1, r1, r1
 8000788:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800078c:	bf08      	it	eq
 800078e:	3c01      	subeq	r4, #1
 8000790:	d0f7      	beq.n	8000782 <__aeabi_dmul+0x1a6>
 8000792:	ea41 0106 	orr.w	r1, r1, r6
 8000796:	f095 0f00 	teq	r5, #0
 800079a:	bf18      	it	ne
 800079c:	4770      	bxne	lr
 800079e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007a2:	0052      	lsls	r2, r2, #1
 80007a4:	eb43 0303 	adc.w	r3, r3, r3
 80007a8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007ac:	bf08      	it	eq
 80007ae:	3d01      	subeq	r5, #1
 80007b0:	d0f7      	beq.n	80007a2 <__aeabi_dmul+0x1c6>
 80007b2:	ea43 0306 	orr.w	r3, r3, r6
 80007b6:	4770      	bx	lr
 80007b8:	ea94 0f0c 	teq	r4, ip
 80007bc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007c0:	bf18      	it	ne
 80007c2:	ea95 0f0c 	teqne	r5, ip
 80007c6:	d00c      	beq.n	80007e2 <__aeabi_dmul+0x206>
 80007c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007cc:	bf18      	it	ne
 80007ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007d2:	d1d1      	bne.n	8000778 <__aeabi_dmul+0x19c>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e6:	bf06      	itte	eq
 80007e8:	4610      	moveq	r0, r2
 80007ea:	4619      	moveq	r1, r3
 80007ec:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f0:	d019      	beq.n	8000826 <__aeabi_dmul+0x24a>
 80007f2:	ea94 0f0c 	teq	r4, ip
 80007f6:	d102      	bne.n	80007fe <__aeabi_dmul+0x222>
 80007f8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007fc:	d113      	bne.n	8000826 <__aeabi_dmul+0x24a>
 80007fe:	ea95 0f0c 	teq	r5, ip
 8000802:	d105      	bne.n	8000810 <__aeabi_dmul+0x234>
 8000804:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000808:	bf1c      	itt	ne
 800080a:	4610      	movne	r0, r2
 800080c:	4619      	movne	r1, r3
 800080e:	d10a      	bne.n	8000826 <__aeabi_dmul+0x24a>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800081c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000820:	f04f 0000 	mov.w	r0, #0
 8000824:	bd70      	pop	{r4, r5, r6, pc}
 8000826:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800082a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800082e:	bd70      	pop	{r4, r5, r6, pc}

08000830 <__aeabi_ddiv>:
 8000830:	b570      	push	{r4, r5, r6, lr}
 8000832:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000836:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800083a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800083e:	bf1d      	ittte	ne
 8000840:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000844:	ea94 0f0c 	teqne	r4, ip
 8000848:	ea95 0f0c 	teqne	r5, ip
 800084c:	f000 f8a7 	bleq	800099e <__aeabi_ddiv+0x16e>
 8000850:	eba4 0405 	sub.w	r4, r4, r5
 8000854:	ea81 0e03 	eor.w	lr, r1, r3
 8000858:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800085c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000860:	f000 8088 	beq.w	8000974 <__aeabi_ddiv+0x144>
 8000864:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000868:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800086c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000870:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000874:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000878:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800087c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000880:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000884:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000888:	429d      	cmp	r5, r3
 800088a:	bf08      	it	eq
 800088c:	4296      	cmpeq	r6, r2
 800088e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000892:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000896:	d202      	bcs.n	800089e <__aeabi_ddiv+0x6e>
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	1ab6      	subs	r6, r6, r2
 80008a0:	eb65 0503 	sbc.w	r5, r5, r3
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ae:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ba:	bf22      	ittt	cs
 80008bc:	1ab6      	subcs	r6, r6, r2
 80008be:	4675      	movcs	r5, lr
 80008c0:	ea40 000c 	orrcs.w	r0, r0, ip
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d2:	bf22      	ittt	cs
 80008d4:	1ab6      	subcs	r6, r6, r2
 80008d6:	4675      	movcs	r5, lr
 80008d8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008dc:	085b      	lsrs	r3, r3, #1
 80008de:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ea:	bf22      	ittt	cs
 80008ec:	1ab6      	subcs	r6, r6, r2
 80008ee:	4675      	movcs	r5, lr
 80008f0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000902:	bf22      	ittt	cs
 8000904:	1ab6      	subcs	r6, r6, r2
 8000906:	4675      	movcs	r5, lr
 8000908:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800090c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000910:	d018      	beq.n	8000944 <__aeabi_ddiv+0x114>
 8000912:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000916:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800091a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800091e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000922:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000926:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800092a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800092e:	d1c0      	bne.n	80008b2 <__aeabi_ddiv+0x82>
 8000930:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000934:	d10b      	bne.n	800094e <__aeabi_ddiv+0x11e>
 8000936:	ea41 0100 	orr.w	r1, r1, r0
 800093a:	f04f 0000 	mov.w	r0, #0
 800093e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000942:	e7b6      	b.n	80008b2 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	bf04      	itt	eq
 800094a:	4301      	orreq	r1, r0
 800094c:	2000      	moveq	r0, #0
 800094e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000952:	bf88      	it	hi
 8000954:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000958:	f63f aeaf 	bhi.w	80006ba <__aeabi_dmul+0xde>
 800095c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000960:	bf04      	itt	eq
 8000962:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000966:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800096a:	f150 0000 	adcs.w	r0, r0, #0
 800096e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000972:	bd70      	pop	{r4, r5, r6, pc}
 8000974:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000978:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800097c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000980:	bfc2      	ittt	gt
 8000982:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000986:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800098a:	bd70      	popgt	{r4, r5, r6, pc}
 800098c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000990:	f04f 0e00 	mov.w	lr, #0
 8000994:	3c01      	subs	r4, #1
 8000996:	e690      	b.n	80006ba <__aeabi_dmul+0xde>
 8000998:	ea45 0e06 	orr.w	lr, r5, r6
 800099c:	e68d      	b.n	80006ba <__aeabi_dmul+0xde>
 800099e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009a2:	ea94 0f0c 	teq	r4, ip
 80009a6:	bf08      	it	eq
 80009a8:	ea95 0f0c 	teqeq	r5, ip
 80009ac:	f43f af3b 	beq.w	8000826 <__aeabi_dmul+0x24a>
 80009b0:	ea94 0f0c 	teq	r4, ip
 80009b4:	d10a      	bne.n	80009cc <__aeabi_ddiv+0x19c>
 80009b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ba:	f47f af34 	bne.w	8000826 <__aeabi_dmul+0x24a>
 80009be:	ea95 0f0c 	teq	r5, ip
 80009c2:	f47f af25 	bne.w	8000810 <__aeabi_dmul+0x234>
 80009c6:	4610      	mov	r0, r2
 80009c8:	4619      	mov	r1, r3
 80009ca:	e72c      	b.n	8000826 <__aeabi_dmul+0x24a>
 80009cc:	ea95 0f0c 	teq	r5, ip
 80009d0:	d106      	bne.n	80009e0 <__aeabi_ddiv+0x1b0>
 80009d2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009d6:	f43f aefd 	beq.w	80007d4 <__aeabi_dmul+0x1f8>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e722      	b.n	8000826 <__aeabi_dmul+0x24a>
 80009e0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009e4:	bf18      	it	ne
 80009e6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ea:	f47f aec5 	bne.w	8000778 <__aeabi_dmul+0x19c>
 80009ee:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009f2:	f47f af0d 	bne.w	8000810 <__aeabi_dmul+0x234>
 80009f6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009fa:	f47f aeeb 	bne.w	80007d4 <__aeabi_dmul+0x1f8>
 80009fe:	e712      	b.n	8000826 <__aeabi_dmul+0x24a>

08000a00 <__gedf2>:
 8000a00:	f04f 3cff 	mov.w	ip, #4294967295
 8000a04:	e006      	b.n	8000a14 <__cmpdf2+0x4>
 8000a06:	bf00      	nop

08000a08 <__ledf2>:
 8000a08:	f04f 0c01 	mov.w	ip, #1
 8000a0c:	e002      	b.n	8000a14 <__cmpdf2+0x4>
 8000a0e:	bf00      	nop

08000a10 <__cmpdf2>:
 8000a10:	f04f 0c01 	mov.w	ip, #1
 8000a14:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a24:	bf18      	it	ne
 8000a26:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a2a:	d01b      	beq.n	8000a64 <__cmpdf2+0x54>
 8000a2c:	b001      	add	sp, #4
 8000a2e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a32:	bf0c      	ite	eq
 8000a34:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a38:	ea91 0f03 	teqne	r1, r3
 8000a3c:	bf02      	ittt	eq
 8000a3e:	ea90 0f02 	teqeq	r0, r2
 8000a42:	2000      	moveq	r0, #0
 8000a44:	4770      	bxeq	lr
 8000a46:	f110 0f00 	cmn.w	r0, #0
 8000a4a:	ea91 0f03 	teq	r1, r3
 8000a4e:	bf58      	it	pl
 8000a50:	4299      	cmppl	r1, r3
 8000a52:	bf08      	it	eq
 8000a54:	4290      	cmpeq	r0, r2
 8000a56:	bf2c      	ite	cs
 8000a58:	17d8      	asrcs	r0, r3, #31
 8000a5a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a5e:	f040 0001 	orr.w	r0, r0, #1
 8000a62:	4770      	bx	lr
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	d102      	bne.n	8000a74 <__cmpdf2+0x64>
 8000a6e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a72:	d107      	bne.n	8000a84 <__cmpdf2+0x74>
 8000a74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d1d6      	bne.n	8000a2c <__cmpdf2+0x1c>
 8000a7e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a82:	d0d3      	beq.n	8000a2c <__cmpdf2+0x1c>
 8000a84:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop

08000a8c <__aeabi_cdrcmple>:
 8000a8c:	4684      	mov	ip, r0
 8000a8e:	4610      	mov	r0, r2
 8000a90:	4662      	mov	r2, ip
 8000a92:	468c      	mov	ip, r1
 8000a94:	4619      	mov	r1, r3
 8000a96:	4663      	mov	r3, ip
 8000a98:	e000      	b.n	8000a9c <__aeabi_cdcmpeq>
 8000a9a:	bf00      	nop

08000a9c <__aeabi_cdcmpeq>:
 8000a9c:	b501      	push	{r0, lr}
 8000a9e:	f7ff ffb7 	bl	8000a10 <__cmpdf2>
 8000aa2:	2800      	cmp	r0, #0
 8000aa4:	bf48      	it	mi
 8000aa6:	f110 0f00 	cmnmi.w	r0, #0
 8000aaa:	bd01      	pop	{r0, pc}

08000aac <__aeabi_dcmpeq>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff fff4 	bl	8000a9c <__aeabi_cdcmpeq>
 8000ab4:	bf0c      	ite	eq
 8000ab6:	2001      	moveq	r0, #1
 8000ab8:	2000      	movne	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmplt>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffea 	bl	8000a9c <__aeabi_cdcmpeq>
 8000ac8:	bf34      	ite	cc
 8000aca:	2001      	movcc	r0, #1
 8000acc:	2000      	movcs	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmple>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffe0 	bl	8000a9c <__aeabi_cdcmpeq>
 8000adc:	bf94      	ite	ls
 8000ade:	2001      	movls	r0, #1
 8000ae0:	2000      	movhi	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmpge>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffce 	bl	8000a8c <__aeabi_cdrcmple>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpgt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffc4 	bl	8000a8c <__aeabi_cdrcmple>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmpun>:
 8000b10:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b18:	d102      	bne.n	8000b20 <__aeabi_dcmpun+0x10>
 8000b1a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b1e:	d10a      	bne.n	8000b36 <__aeabi_dcmpun+0x26>
 8000b20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b28:	d102      	bne.n	8000b30 <__aeabi_dcmpun+0x20>
 8000b2a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b2e:	d102      	bne.n	8000b36 <__aeabi_dcmpun+0x26>
 8000b30:	f04f 0000 	mov.w	r0, #0
 8000b34:	4770      	bx	lr
 8000b36:	f04f 0001 	mov.w	r0, #1
 8000b3a:	4770      	bx	lr

08000b3c <__aeabi_d2iz>:
 8000b3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b44:	d215      	bcs.n	8000b72 <__aeabi_d2iz+0x36>
 8000b46:	d511      	bpl.n	8000b6c <__aeabi_d2iz+0x30>
 8000b48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b50:	d912      	bls.n	8000b78 <__aeabi_d2iz+0x3c>
 8000b52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b5e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b62:	fa23 f002 	lsr.w	r0, r3, r2
 8000b66:	bf18      	it	ne
 8000b68:	4240      	negne	r0, r0
 8000b6a:	4770      	bx	lr
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b76:	d105      	bne.n	8000b84 <__aeabi_d2iz+0x48>
 8000b78:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b7c:	bf08      	it	eq
 8000b7e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b82:	4770      	bx	lr
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <__aeabi_d2uiz>:
 8000b8c:	004a      	lsls	r2, r1, #1
 8000b8e:	d211      	bcs.n	8000bb4 <__aeabi_d2uiz+0x28>
 8000b90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b94:	d211      	bcs.n	8000bba <__aeabi_d2uiz+0x2e>
 8000b96:	d50d      	bpl.n	8000bb4 <__aeabi_d2uiz+0x28>
 8000b98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba0:	d40e      	bmi.n	8000bc0 <__aeabi_d2uiz+0x34>
 8000ba2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000baa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bbe:	d102      	bne.n	8000bc6 <__aeabi_d2uiz+0x3a>
 8000bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc4:	4770      	bx	lr
 8000bc6:	f04f 0000 	mov.w	r0, #0
 8000bca:	4770      	bx	lr

08000bcc <__aeabi_d2f>:
 8000bcc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bd0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd4:	bf24      	itt	cs
 8000bd6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bda:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bde:	d90d      	bls.n	8000bfc <__aeabi_d2f+0x30>
 8000be0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bf0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf4:	bf08      	it	eq
 8000bf6:	f020 0001 	biceq.w	r0, r0, #1
 8000bfa:	4770      	bx	lr
 8000bfc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c00:	d121      	bne.n	8000c46 <__aeabi_d2f+0x7a>
 8000c02:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c06:	bfbc      	itt	lt
 8000c08:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c0c:	4770      	bxlt	lr
 8000c0e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c12:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c16:	f1c2 0218 	rsb	r2, r2, #24
 8000c1a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c22:	fa20 f002 	lsr.w	r0, r0, r2
 8000c26:	bf18      	it	ne
 8000c28:	f040 0001 	orrne.w	r0, r0, #1
 8000c2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c34:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c38:	ea40 000c 	orr.w	r0, r0, ip
 8000c3c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c44:	e7cc      	b.n	8000be0 <__aeabi_d2f+0x14>
 8000c46:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c4a:	d107      	bne.n	8000c5c <__aeabi_d2f+0x90>
 8000c4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c50:	bf1e      	ittt	ne
 8000c52:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c56:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c5a:	4770      	bxne	lr
 8000c5c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c60:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop

08000c6c <__aeabi_uldivmod>:
 8000c6c:	b953      	cbnz	r3, 8000c84 <__aeabi_uldivmod+0x18>
 8000c6e:	b94a      	cbnz	r2, 8000c84 <__aeabi_uldivmod+0x18>
 8000c70:	2900      	cmp	r1, #0
 8000c72:	bf08      	it	eq
 8000c74:	2800      	cmpeq	r0, #0
 8000c76:	bf1c      	itt	ne
 8000c78:	f04f 31ff 	movne.w	r1, #4294967295
 8000c7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c80:	f000 b96e 	b.w	8000f60 <__aeabi_idiv0>
 8000c84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c8c:	f000 f806 	bl	8000c9c <__udivmoddi4>
 8000c90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c98:	b004      	add	sp, #16
 8000c9a:	4770      	bx	lr

08000c9c <__udivmoddi4>:
 8000c9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ca0:	9d08      	ldr	r5, [sp, #32]
 8000ca2:	4604      	mov	r4, r0
 8000ca4:	468c      	mov	ip, r1
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	f040 8083 	bne.w	8000db2 <__udivmoddi4+0x116>
 8000cac:	428a      	cmp	r2, r1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	d947      	bls.n	8000d42 <__udivmoddi4+0xa6>
 8000cb2:	fab2 f282 	clz	r2, r2
 8000cb6:	b142      	cbz	r2, 8000cca <__udivmoddi4+0x2e>
 8000cb8:	f1c2 0020 	rsb	r0, r2, #32
 8000cbc:	fa24 f000 	lsr.w	r0, r4, r0
 8000cc0:	4091      	lsls	r1, r2
 8000cc2:	4097      	lsls	r7, r2
 8000cc4:	ea40 0c01 	orr.w	ip, r0, r1
 8000cc8:	4094      	lsls	r4, r2
 8000cca:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cce:	0c23      	lsrs	r3, r4, #16
 8000cd0:	fbbc f6f8 	udiv	r6, ip, r8
 8000cd4:	fa1f fe87 	uxth.w	lr, r7
 8000cd8:	fb08 c116 	mls	r1, r8, r6, ip
 8000cdc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ce0:	fb06 f10e 	mul.w	r1, r6, lr
 8000ce4:	4299      	cmp	r1, r3
 8000ce6:	d909      	bls.n	8000cfc <__udivmoddi4+0x60>
 8000ce8:	18fb      	adds	r3, r7, r3
 8000cea:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cee:	f080 8119 	bcs.w	8000f24 <__udivmoddi4+0x288>
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	f240 8116 	bls.w	8000f24 <__udivmoddi4+0x288>
 8000cf8:	3e02      	subs	r6, #2
 8000cfa:	443b      	add	r3, r7
 8000cfc:	1a5b      	subs	r3, r3, r1
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d04:	fb08 3310 	mls	r3, r8, r0, r3
 8000d08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x8c>
 8000d14:	193c      	adds	r4, r7, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	f080 8105 	bcs.w	8000f28 <__udivmoddi4+0x28c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f240 8102 	bls.w	8000f28 <__udivmoddi4+0x28c>
 8000d24:	3802      	subs	r0, #2
 8000d26:	443c      	add	r4, r7
 8000d28:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d2c:	eba4 040e 	sub.w	r4, r4, lr
 8000d30:	2600      	movs	r6, #0
 8000d32:	b11d      	cbz	r5, 8000d3c <__udivmoddi4+0xa0>
 8000d34:	40d4      	lsrs	r4, r2
 8000d36:	2300      	movs	r3, #0
 8000d38:	e9c5 4300 	strd	r4, r3, [r5]
 8000d3c:	4631      	mov	r1, r6
 8000d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d42:	b902      	cbnz	r2, 8000d46 <__udivmoddi4+0xaa>
 8000d44:	deff      	udf	#255	; 0xff
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	2a00      	cmp	r2, #0
 8000d4c:	d150      	bne.n	8000df0 <__udivmoddi4+0x154>
 8000d4e:	1bcb      	subs	r3, r1, r7
 8000d50:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d54:	fa1f f887 	uxth.w	r8, r7
 8000d58:	2601      	movs	r6, #1
 8000d5a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d5e:	0c21      	lsrs	r1, r4, #16
 8000d60:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d68:	fb08 f30c 	mul.w	r3, r8, ip
 8000d6c:	428b      	cmp	r3, r1
 8000d6e:	d907      	bls.n	8000d80 <__udivmoddi4+0xe4>
 8000d70:	1879      	adds	r1, r7, r1
 8000d72:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d76:	d202      	bcs.n	8000d7e <__udivmoddi4+0xe2>
 8000d78:	428b      	cmp	r3, r1
 8000d7a:	f200 80e9 	bhi.w	8000f50 <__udivmoddi4+0x2b4>
 8000d7e:	4684      	mov	ip, r0
 8000d80:	1ac9      	subs	r1, r1, r3
 8000d82:	b2a3      	uxth	r3, r4
 8000d84:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d88:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d8c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d90:	fb08 f800 	mul.w	r8, r8, r0
 8000d94:	45a0      	cmp	r8, r4
 8000d96:	d907      	bls.n	8000da8 <__udivmoddi4+0x10c>
 8000d98:	193c      	adds	r4, r7, r4
 8000d9a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d9e:	d202      	bcs.n	8000da6 <__udivmoddi4+0x10a>
 8000da0:	45a0      	cmp	r8, r4
 8000da2:	f200 80d9 	bhi.w	8000f58 <__udivmoddi4+0x2bc>
 8000da6:	4618      	mov	r0, r3
 8000da8:	eba4 0408 	sub.w	r4, r4, r8
 8000dac:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000db0:	e7bf      	b.n	8000d32 <__udivmoddi4+0x96>
 8000db2:	428b      	cmp	r3, r1
 8000db4:	d909      	bls.n	8000dca <__udivmoddi4+0x12e>
 8000db6:	2d00      	cmp	r5, #0
 8000db8:	f000 80b1 	beq.w	8000f1e <__udivmoddi4+0x282>
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000dc2:	4630      	mov	r0, r6
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	fab3 f683 	clz	r6, r3
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	d14a      	bne.n	8000e68 <__udivmoddi4+0x1cc>
 8000dd2:	428b      	cmp	r3, r1
 8000dd4:	d302      	bcc.n	8000ddc <__udivmoddi4+0x140>
 8000dd6:	4282      	cmp	r2, r0
 8000dd8:	f200 80b8 	bhi.w	8000f4c <__udivmoddi4+0x2b0>
 8000ddc:	1a84      	subs	r4, r0, r2
 8000dde:	eb61 0103 	sbc.w	r1, r1, r3
 8000de2:	2001      	movs	r0, #1
 8000de4:	468c      	mov	ip, r1
 8000de6:	2d00      	cmp	r5, #0
 8000de8:	d0a8      	beq.n	8000d3c <__udivmoddi4+0xa0>
 8000dea:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dee:	e7a5      	b.n	8000d3c <__udivmoddi4+0xa0>
 8000df0:	f1c2 0320 	rsb	r3, r2, #32
 8000df4:	fa20 f603 	lsr.w	r6, r0, r3
 8000df8:	4097      	lsls	r7, r2
 8000dfa:	fa01 f002 	lsl.w	r0, r1, r2
 8000dfe:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e02:	40d9      	lsrs	r1, r3
 8000e04:	4330      	orrs	r0, r6
 8000e06:	0c03      	lsrs	r3, r0, #16
 8000e08:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e0c:	fa1f f887 	uxth.w	r8, r7
 8000e10:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e14:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e18:	fb06 f108 	mul.w	r1, r6, r8
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	fa04 f402 	lsl.w	r4, r4, r2
 8000e22:	d909      	bls.n	8000e38 <__udivmoddi4+0x19c>
 8000e24:	18fb      	adds	r3, r7, r3
 8000e26:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e2a:	f080 808d 	bcs.w	8000f48 <__udivmoddi4+0x2ac>
 8000e2e:	4299      	cmp	r1, r3
 8000e30:	f240 808a 	bls.w	8000f48 <__udivmoddi4+0x2ac>
 8000e34:	3e02      	subs	r6, #2
 8000e36:	443b      	add	r3, r7
 8000e38:	1a5b      	subs	r3, r3, r1
 8000e3a:	b281      	uxth	r1, r0
 8000e3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb00 f308 	mul.w	r3, r0, r8
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d907      	bls.n	8000e60 <__udivmoddi4+0x1c4>
 8000e50:	1879      	adds	r1, r7, r1
 8000e52:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e56:	d273      	bcs.n	8000f40 <__udivmoddi4+0x2a4>
 8000e58:	428b      	cmp	r3, r1
 8000e5a:	d971      	bls.n	8000f40 <__udivmoddi4+0x2a4>
 8000e5c:	3802      	subs	r0, #2
 8000e5e:	4439      	add	r1, r7
 8000e60:	1acb      	subs	r3, r1, r3
 8000e62:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e66:	e778      	b.n	8000d5a <__udivmoddi4+0xbe>
 8000e68:	f1c6 0c20 	rsb	ip, r6, #32
 8000e6c:	fa03 f406 	lsl.w	r4, r3, r6
 8000e70:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e74:	431c      	orrs	r4, r3
 8000e76:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e7e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e82:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e86:	431f      	orrs	r7, r3
 8000e88:	0c3b      	lsrs	r3, r7, #16
 8000e8a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e8e:	fa1f f884 	uxth.w	r8, r4
 8000e92:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e96:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e9a:	fb09 fa08 	mul.w	sl, r9, r8
 8000e9e:	458a      	cmp	sl, r1
 8000ea0:	fa02 f206 	lsl.w	r2, r2, r6
 8000ea4:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x220>
 8000eaa:	1861      	adds	r1, r4, r1
 8000eac:	f109 30ff 	add.w	r0, r9, #4294967295
 8000eb0:	d248      	bcs.n	8000f44 <__udivmoddi4+0x2a8>
 8000eb2:	458a      	cmp	sl, r1
 8000eb4:	d946      	bls.n	8000f44 <__udivmoddi4+0x2a8>
 8000eb6:	f1a9 0902 	sub.w	r9, r9, #2
 8000eba:	4421      	add	r1, r4
 8000ebc:	eba1 010a 	sub.w	r1, r1, sl
 8000ec0:	b2bf      	uxth	r7, r7
 8000ec2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ec6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000eca:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000ece:	fb00 f808 	mul.w	r8, r0, r8
 8000ed2:	45b8      	cmp	r8, r7
 8000ed4:	d907      	bls.n	8000ee6 <__udivmoddi4+0x24a>
 8000ed6:	19e7      	adds	r7, r4, r7
 8000ed8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000edc:	d22e      	bcs.n	8000f3c <__udivmoddi4+0x2a0>
 8000ede:	45b8      	cmp	r8, r7
 8000ee0:	d92c      	bls.n	8000f3c <__udivmoddi4+0x2a0>
 8000ee2:	3802      	subs	r0, #2
 8000ee4:	4427      	add	r7, r4
 8000ee6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eea:	eba7 0708 	sub.w	r7, r7, r8
 8000eee:	fba0 8902 	umull	r8, r9, r0, r2
 8000ef2:	454f      	cmp	r7, r9
 8000ef4:	46c6      	mov	lr, r8
 8000ef6:	4649      	mov	r1, r9
 8000ef8:	d31a      	bcc.n	8000f30 <__udivmoddi4+0x294>
 8000efa:	d017      	beq.n	8000f2c <__udivmoddi4+0x290>
 8000efc:	b15d      	cbz	r5, 8000f16 <__udivmoddi4+0x27a>
 8000efe:	ebb3 020e 	subs.w	r2, r3, lr
 8000f02:	eb67 0701 	sbc.w	r7, r7, r1
 8000f06:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f0a:	40f2      	lsrs	r2, r6
 8000f0c:	ea4c 0202 	orr.w	r2, ip, r2
 8000f10:	40f7      	lsrs	r7, r6
 8000f12:	e9c5 2700 	strd	r2, r7, [r5]
 8000f16:	2600      	movs	r6, #0
 8000f18:	4631      	mov	r1, r6
 8000f1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f1e:	462e      	mov	r6, r5
 8000f20:	4628      	mov	r0, r5
 8000f22:	e70b      	b.n	8000d3c <__udivmoddi4+0xa0>
 8000f24:	4606      	mov	r6, r0
 8000f26:	e6e9      	b.n	8000cfc <__udivmoddi4+0x60>
 8000f28:	4618      	mov	r0, r3
 8000f2a:	e6fd      	b.n	8000d28 <__udivmoddi4+0x8c>
 8000f2c:	4543      	cmp	r3, r8
 8000f2e:	d2e5      	bcs.n	8000efc <__udivmoddi4+0x260>
 8000f30:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f34:	eb69 0104 	sbc.w	r1, r9, r4
 8000f38:	3801      	subs	r0, #1
 8000f3a:	e7df      	b.n	8000efc <__udivmoddi4+0x260>
 8000f3c:	4608      	mov	r0, r1
 8000f3e:	e7d2      	b.n	8000ee6 <__udivmoddi4+0x24a>
 8000f40:	4660      	mov	r0, ip
 8000f42:	e78d      	b.n	8000e60 <__udivmoddi4+0x1c4>
 8000f44:	4681      	mov	r9, r0
 8000f46:	e7b9      	b.n	8000ebc <__udivmoddi4+0x220>
 8000f48:	4666      	mov	r6, ip
 8000f4a:	e775      	b.n	8000e38 <__udivmoddi4+0x19c>
 8000f4c:	4630      	mov	r0, r6
 8000f4e:	e74a      	b.n	8000de6 <__udivmoddi4+0x14a>
 8000f50:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f54:	4439      	add	r1, r7
 8000f56:	e713      	b.n	8000d80 <__udivmoddi4+0xe4>
 8000f58:	3802      	subs	r0, #2
 8000f5a:	443c      	add	r4, r7
 8000f5c:	e724      	b.n	8000da8 <__udivmoddi4+0x10c>
 8000f5e:	bf00      	nop

08000f60 <__aeabi_idiv0>:
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop

08000f64 <unpack_left_shift_u16>:

static inline uint16_t unpack_left_shift_u16(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	71fb      	strb	r3, [r7, #7]
 8000f6e:	460b      	mov	r3, r1
 8000f70:	71bb      	strb	r3, [r7, #6]
 8000f72:	4613      	mov	r3, r2
 8000f74:	717b      	strb	r3, [r7, #5]
    return (uint16_t)((uint16_t)(value & mask) << shift);
 8000f76:	79fa      	ldrb	r2, [r7, #7]
 8000f78:	797b      	ldrb	r3, [r7, #5]
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	461a      	mov	r2, r3
 8000f80:	79bb      	ldrb	r3, [r7, #6]
 8000f82:	fa02 f303 	lsl.w	r3, r2, r3
 8000f86:	b29b      	uxth	r3, r3
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	370c      	adds	r7, #12
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr

08000f94 <unpack_right_shift_u8>:

static inline uint8_t unpack_right_shift_u8(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	71fb      	strb	r3, [r7, #7]
 8000f9e:	460b      	mov	r3, r1
 8000fa0:	71bb      	strb	r3, [r7, #6]
 8000fa2:	4613      	mov	r3, r2
 8000fa4:	717b      	strb	r3, [r7, #5]
    return (uint8_t)((uint8_t)(value & mask) >> shift);
 8000fa6:	79fa      	ldrb	r2, [r7, #7]
 8000fa8:	797b      	ldrb	r3, [r7, #5]
 8000faa:	4013      	ands	r3, r2
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	461a      	mov	r2, r3
 8000fb0:	79bb      	ldrb	r3, [r7, #6]
 8000fb2:	fa42 f303 	asr.w	r3, r2, r3
 8000fb6:	b2db      	uxtb	r3, r3
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <unpack_right_shift_u16>:

static inline uint16_t unpack_right_shift_u16(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	71fb      	strb	r3, [r7, #7]
 8000fce:	460b      	mov	r3, r1
 8000fd0:	71bb      	strb	r3, [r7, #6]
 8000fd2:	4613      	mov	r3, r2
 8000fd4:	717b      	strb	r3, [r7, #5]
    return (uint16_t)((uint16_t)(value & mask) >> shift);
 8000fd6:	79fa      	ldrb	r2, [r7, #7]
 8000fd8:	797b      	ldrb	r3, [r7, #5]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	461a      	mov	r2, r3
 8000fe0:	79bb      	ldrb	r3, [r7, #6]
 8000fe2:	fa42 f303 	asr.w	r3, r2, r3
 8000fe6:	b29b      	uxth	r3, r3
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	370c      	adds	r7, #12
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr

08000ff4 <can1_dbu_status_1_unpack>:

int can1_dbu_status_1_unpack(
    struct can1_dbu_status_1_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b086      	sub	sp, #24
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	60f8      	str	r0, [r7, #12]
 8000ffc:	60b9      	str	r1, [r7, #8]
 8000ffe:	607a      	str	r2, [r7, #4]
    uint16_t dbu_temperature;

    if (size < 8u) {
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2b07      	cmp	r3, #7
 8001004:	d802      	bhi.n	800100c <can1_dbu_status_1_unpack+0x18>
        return (-EINVAL);
 8001006:	f06f 0315 	mvn.w	r3, #21
 800100a:	e03b      	b.n	8001084 <can1_dbu_status_1_unpack+0x90>
    }

    dst_p->activate_ts_button = unpack_right_shift_u8(src_p[0], 0u, 0x01u);
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	2201      	movs	r2, #1
 8001012:	2100      	movs	r1, #0
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff ffbd 	bl	8000f94 <unpack_right_shift_u8>
 800101a:	4603      	mov	r3, r0
 800101c:	461a      	mov	r2, r3
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	701a      	strb	r2, [r3, #0]
    dst_p->ready_to_drive_button = unpack_right_shift_u8(src_p[0], 1u, 0x02u);
 8001022:	68bb      	ldr	r3, [r7, #8]
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	2202      	movs	r2, #2
 8001028:	2101      	movs	r1, #1
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff ffb2 	bl	8000f94 <unpack_right_shift_u8>
 8001030:	4603      	mov	r3, r0
 8001032:	461a      	mov	r2, r3
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	705a      	strb	r2, [r3, #1]
    dbu_temperature = unpack_right_shift_u16(src_p[0], 4u, 0xf0u);
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	22f0      	movs	r2, #240	; 0xf0
 800103e:	2104      	movs	r1, #4
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff ffbf 	bl	8000fc4 <unpack_right_shift_u16>
 8001046:	4603      	mov	r3, r0
 8001048:	82fb      	strh	r3, [r7, #22]
    dbu_temperature |= unpack_left_shift_u16(src_p[1], 4u, 0xffu);
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	3301      	adds	r3, #1
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	22ff      	movs	r2, #255	; 0xff
 8001052:	2104      	movs	r1, #4
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff ff85 	bl	8000f64 <unpack_left_shift_u16>
 800105a:	4603      	mov	r3, r0
 800105c:	461a      	mov	r2, r3
 800105e:	8afb      	ldrh	r3, [r7, #22]
 8001060:	4313      	orrs	r3, r2
 8001062:	82fb      	strh	r3, [r7, #22]

    if ((dbu_temperature & (1u << 11)) != 0u) {
 8001064:	8afb      	ldrh	r3, [r7, #22]
 8001066:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800106a:	2b00      	cmp	r3, #0
 800106c:	d005      	beq.n	800107a <can1_dbu_status_1_unpack+0x86>
        dbu_temperature |= 0xf000u;
 800106e:	8afb      	ldrh	r3, [r7, #22]
 8001070:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8001074:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8001078:	82fb      	strh	r3, [r7, #22]
    }

    dst_p->dbu_temperature = (int16_t)dbu_temperature;
 800107a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	805a      	strh	r2, [r3, #2]

    return (0);
 8001082:	2300      	movs	r3, #0
}
 8001084:	4618      	mov	r0, r3
 8001086:	3718      	adds	r7, #24
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}

0800108c <unpack_left_shift_u16>:

static inline uint16_t unpack_left_shift_u16(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	71fb      	strb	r3, [r7, #7]
 8001096:	460b      	mov	r3, r1
 8001098:	71bb      	strb	r3, [r7, #6]
 800109a:	4613      	mov	r3, r2
 800109c:	717b      	strb	r3, [r7, #5]
    return (uint16_t)((uint16_t)(value & mask) << shift);
 800109e:	79fa      	ldrb	r2, [r7, #7]
 80010a0:	797b      	ldrb	r3, [r7, #5]
 80010a2:	4013      	ands	r3, r2
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	461a      	mov	r2, r3
 80010a8:	79bb      	ldrb	r3, [r7, #6]
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	b29b      	uxth	r3, r3
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr

080010bc <unpack_left_shift_u64>:

static inline uint64_t unpack_left_shift_u64(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 80010bc:	b4f0      	push	{r4, r5, r6, r7}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	71fb      	strb	r3, [r7, #7]
 80010c6:	460b      	mov	r3, r1
 80010c8:	71bb      	strb	r3, [r7, #6]
 80010ca:	4613      	mov	r3, r2
 80010cc:	717b      	strb	r3, [r7, #5]
    return (uint64_t)((uint64_t)(value & mask) << shift);
 80010ce:	79fa      	ldrb	r2, [r7, #7]
 80010d0:	797b      	ldrb	r3, [r7, #5]
 80010d2:	4013      	ands	r3, r2
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	b2da      	uxtb	r2, r3
 80010d8:	f04f 0300 	mov.w	r3, #0
 80010dc:	79b9      	ldrb	r1, [r7, #6]
 80010de:	f1a1 0620 	sub.w	r6, r1, #32
 80010e2:	f1c1 0020 	rsb	r0, r1, #32
 80010e6:	fa03 f501 	lsl.w	r5, r3, r1
 80010ea:	fa02 f606 	lsl.w	r6, r2, r6
 80010ee:	4335      	orrs	r5, r6
 80010f0:	fa22 f000 	lsr.w	r0, r2, r0
 80010f4:	4305      	orrs	r5, r0
 80010f6:	fa02 f401 	lsl.w	r4, r2, r1
 80010fa:	4622      	mov	r2, r4
 80010fc:	462b      	mov	r3, r5
}
 80010fe:	4610      	mov	r0, r2
 8001100:	4619      	mov	r1, r3
 8001102:	3708      	adds	r7, #8
 8001104:	46bd      	mov	sp, r7
 8001106:	bcf0      	pop	{r4, r5, r6, r7}
 8001108:	4770      	bx	lr

0800110a <unpack_right_shift_u8>:

static inline uint8_t unpack_right_shift_u8(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 800110a:	b480      	push	{r7}
 800110c:	b083      	sub	sp, #12
 800110e:	af00      	add	r7, sp, #0
 8001110:	4603      	mov	r3, r0
 8001112:	71fb      	strb	r3, [r7, #7]
 8001114:	460b      	mov	r3, r1
 8001116:	71bb      	strb	r3, [r7, #6]
 8001118:	4613      	mov	r3, r2
 800111a:	717b      	strb	r3, [r7, #5]
    return (uint8_t)((uint8_t)(value & mask) >> shift);
 800111c:	79fa      	ldrb	r2, [r7, #7]
 800111e:	797b      	ldrb	r3, [r7, #5]
 8001120:	4013      	ands	r3, r2
 8001122:	b2db      	uxtb	r3, r3
 8001124:	461a      	mov	r2, r3
 8001126:	79bb      	ldrb	r3, [r7, #6]
 8001128:	fa42 f303 	asr.w	r3, r2, r3
 800112c:	b2db      	uxtb	r3, r3
}
 800112e:	4618      	mov	r0, r3
 8001130:	370c      	adds	r7, #12
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr

0800113a <unpack_right_shift_u16>:

static inline uint16_t unpack_right_shift_u16(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 800113a:	b480      	push	{r7}
 800113c:	b083      	sub	sp, #12
 800113e:	af00      	add	r7, sp, #0
 8001140:	4603      	mov	r3, r0
 8001142:	71fb      	strb	r3, [r7, #7]
 8001144:	460b      	mov	r3, r1
 8001146:	71bb      	strb	r3, [r7, #6]
 8001148:	4613      	mov	r3, r2
 800114a:	717b      	strb	r3, [r7, #5]
    return (uint16_t)((uint16_t)(value & mask) >> shift);
 800114c:	79fa      	ldrb	r2, [r7, #7]
 800114e:	797b      	ldrb	r3, [r7, #5]
 8001150:	4013      	ands	r3, r2
 8001152:	b2db      	uxtb	r3, r3
 8001154:	461a      	mov	r2, r3
 8001156:	79bb      	ldrb	r3, [r7, #6]
 8001158:	fa42 f303 	asr.w	r3, r2, r3
 800115c:	b29b      	uxth	r3, r3
}
 800115e:	4618      	mov	r0, r3
 8001160:	370c      	adds	r7, #12
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr

0800116a <unpack_right_shift_u64>:

static inline uint64_t unpack_right_shift_u64(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 800116a:	b4f0      	push	{r4, r5, r6, r7}
 800116c:	b082      	sub	sp, #8
 800116e:	af00      	add	r7, sp, #0
 8001170:	4603      	mov	r3, r0
 8001172:	71fb      	strb	r3, [r7, #7]
 8001174:	460b      	mov	r3, r1
 8001176:	71bb      	strb	r3, [r7, #6]
 8001178:	4613      	mov	r3, r2
 800117a:	717b      	strb	r3, [r7, #5]
    return (uint64_t)((uint64_t)(value & mask) >> shift);
 800117c:	79fa      	ldrb	r2, [r7, #7]
 800117e:	797b      	ldrb	r3, [r7, #5]
 8001180:	4013      	ands	r3, r2
 8001182:	b2db      	uxtb	r3, r3
 8001184:	b2da      	uxtb	r2, r3
 8001186:	f04f 0300 	mov.w	r3, #0
 800118a:	79b9      	ldrb	r1, [r7, #6]
 800118c:	f1c1 0620 	rsb	r6, r1, #32
 8001190:	f1a1 0020 	sub.w	r0, r1, #32
 8001194:	fa22 f401 	lsr.w	r4, r2, r1
 8001198:	fa03 f606 	lsl.w	r6, r3, r6
 800119c:	4334      	orrs	r4, r6
 800119e:	fa23 f000 	lsr.w	r0, r3, r0
 80011a2:	4304      	orrs	r4, r0
 80011a4:	fa23 f501 	lsr.w	r5, r3, r1
 80011a8:	4622      	mov	r2, r4
 80011aa:	462b      	mov	r3, r5
}
 80011ac:	4610      	mov	r0, r2
 80011ae:	4619      	mov	r1, r3
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bcf0      	pop	{r4, r5, r6, r7}
 80011b6:	4770      	bx	lr

080011b8 <can2_amk1_setpoints_1_unpack>:

int can2_amk1_setpoints_1_unpack(
    struct can2_amk1_setpoints_1_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b086      	sub	sp, #24
 80011bc:	af00      	add	r7, sp, #0
 80011be:	60f8      	str	r0, [r7, #12]
 80011c0:	60b9      	str	r1, [r7, #8]
 80011c2:	607a      	str	r2, [r7, #4]
    uint16_t amk1_target_velocity;
    uint16_t amk1_torque_limit_negativ;
    uint16_t amk1_torque_limit_positiv;

    if (size < 8u) {
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2b07      	cmp	r3, #7
 80011c8:	d802      	bhi.n	80011d0 <can2_amk1_setpoints_1_unpack+0x18>
        return (-EINVAL);
 80011ca:	f06f 0315 	mvn.w	r3, #21
 80011ce:	e081      	b.n	80012d4 <can2_amk1_setpoints_1_unpack+0x11c>
    }

    dst_p->amk1_control_inverter_on = unpack_right_shift_u8(src_p[1], 0u, 0x01u);
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	3301      	adds	r3, #1
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	2201      	movs	r2, #1
 80011d8:	2100      	movs	r1, #0
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff ff95 	bl	800110a <unpack_right_shift_u8>
 80011e0:	4603      	mov	r3, r0
 80011e2:	461a      	mov	r2, r3
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	701a      	strb	r2, [r3, #0]
    dst_p->amk1_control_dc_on = unpack_right_shift_u8(src_p[1], 1u, 0x02u);
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	3301      	adds	r3, #1
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	2202      	movs	r2, #2
 80011f0:	2101      	movs	r1, #1
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7ff ff89 	bl	800110a <unpack_right_shift_u8>
 80011f8:	4603      	mov	r3, r0
 80011fa:	461a      	mov	r2, r3
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	705a      	strb	r2, [r3, #1]
    dst_p->amk1_control_enable = unpack_right_shift_u8(src_p[1], 2u, 0x04u);
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	3301      	adds	r3, #1
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	2204      	movs	r2, #4
 8001208:	2102      	movs	r1, #2
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff ff7d 	bl	800110a <unpack_right_shift_u8>
 8001210:	4603      	mov	r3, r0
 8001212:	461a      	mov	r2, r3
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	709a      	strb	r2, [r3, #2]
    dst_p->amk1_control_error_reset = unpack_right_shift_u8(src_p[1], 3u, 0x08u);
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	3301      	adds	r3, #1
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	2208      	movs	r2, #8
 8001220:	2103      	movs	r1, #3
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff ff71 	bl	800110a <unpack_right_shift_u8>
 8001228:	4603      	mov	r3, r0
 800122a:	461a      	mov	r2, r3
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	70da      	strb	r2, [r3, #3]
    amk1_target_velocity = unpack_right_shift_u16(src_p[2], 0u, 0xffu);
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	3302      	adds	r3, #2
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	22ff      	movs	r2, #255	; 0xff
 8001238:	2100      	movs	r1, #0
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff ff7d 	bl	800113a <unpack_right_shift_u16>
 8001240:	4603      	mov	r3, r0
 8001242:	82fb      	strh	r3, [r7, #22]
    amk1_target_velocity |= unpack_left_shift_u16(src_p[3], 8u, 0xffu);
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	3303      	adds	r3, #3
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	22ff      	movs	r2, #255	; 0xff
 800124c:	2108      	movs	r1, #8
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff ff1c 	bl	800108c <unpack_left_shift_u16>
 8001254:	4603      	mov	r3, r0
 8001256:	461a      	mov	r2, r3
 8001258:	8afb      	ldrh	r3, [r7, #22]
 800125a:	4313      	orrs	r3, r2
 800125c:	82fb      	strh	r3, [r7, #22]
    dst_p->amk1_target_velocity = (int16_t)amk1_target_velocity;
 800125e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	809a      	strh	r2, [r3, #4]
    amk1_torque_limit_positiv = unpack_right_shift_u16(src_p[4], 0u, 0xffu);
 8001266:	68bb      	ldr	r3, [r7, #8]
 8001268:	3304      	adds	r3, #4
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	22ff      	movs	r2, #255	; 0xff
 800126e:	2100      	movs	r1, #0
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff ff62 	bl	800113a <unpack_right_shift_u16>
 8001276:	4603      	mov	r3, r0
 8001278:	82bb      	strh	r3, [r7, #20]
    amk1_torque_limit_positiv |= unpack_left_shift_u16(src_p[5], 8u, 0xffu);
 800127a:	68bb      	ldr	r3, [r7, #8]
 800127c:	3305      	adds	r3, #5
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	22ff      	movs	r2, #255	; 0xff
 8001282:	2108      	movs	r1, #8
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff ff01 	bl	800108c <unpack_left_shift_u16>
 800128a:	4603      	mov	r3, r0
 800128c:	461a      	mov	r2, r3
 800128e:	8abb      	ldrh	r3, [r7, #20]
 8001290:	4313      	orrs	r3, r2
 8001292:	82bb      	strh	r3, [r7, #20]
    dst_p->amk1_torque_limit_positiv = (int16_t)amk1_torque_limit_positiv;
 8001294:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	80da      	strh	r2, [r3, #6]
    amk1_torque_limit_negativ = unpack_right_shift_u16(src_p[6], 0u, 0xffu);
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	3306      	adds	r3, #6
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	22ff      	movs	r2, #255	; 0xff
 80012a4:	2100      	movs	r1, #0
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff ff47 	bl	800113a <unpack_right_shift_u16>
 80012ac:	4603      	mov	r3, r0
 80012ae:	827b      	strh	r3, [r7, #18]
    amk1_torque_limit_negativ |= unpack_left_shift_u16(src_p[7], 8u, 0xffu);
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	3307      	adds	r3, #7
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	22ff      	movs	r2, #255	; 0xff
 80012b8:	2108      	movs	r1, #8
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff fee6 	bl	800108c <unpack_left_shift_u16>
 80012c0:	4603      	mov	r3, r0
 80012c2:	461a      	mov	r2, r3
 80012c4:	8a7b      	ldrh	r3, [r7, #18]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	827b      	strh	r3, [r7, #18]
    dst_p->amk1_torque_limit_negativ = (int16_t)amk1_torque_limit_negativ;
 80012ca:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	811a      	strh	r2, [r3, #8]

    return (0);
 80012d2:	2300      	movs	r3, #0
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3718      	adds	r7, #24
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}

080012dc <can2_ivt_msg_result_i_unpack>:

int can2_ivt_msg_result_i_unpack(
    struct can2_ivt_msg_result_i_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
 80012dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80012e0:	b08e      	sub	sp, #56	; 0x38
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	62f8      	str	r0, [r7, #44]	; 0x2c
 80012e6:	62b9      	str	r1, [r7, #40]	; 0x28
 80012e8:	627a      	str	r2, [r7, #36]	; 0x24
    uint64_t i_ts;

    if (size < 6u) {
 80012ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ec:	2b05      	cmp	r3, #5
 80012ee:	d802      	bhi.n	80012f6 <can2_ivt_msg_result_i_unpack+0x1a>
        return (-EINVAL);
 80012f0:	f06f 0315 	mvn.w	r3, #21
 80012f4:	e081      	b.n	80013fa <can2_ivt_msg_result_i_unpack+0x11e>
    }

    i_ts = unpack_left_shift_u64(src_p[0], 40u, 0xffu);
 80012f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	22ff      	movs	r2, #255	; 0xff
 80012fc:	2128      	movs	r1, #40	; 0x28
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff fedc 	bl	80010bc <unpack_left_shift_u64>
 8001304:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
    i_ts |= unpack_left_shift_u64(src_p[1], 32u, 0xffu);
 8001308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800130a:	3301      	adds	r3, #1
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	22ff      	movs	r2, #255	; 0xff
 8001310:	2120      	movs	r1, #32
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff fed2 	bl	80010bc <unpack_left_shift_u64>
 8001318:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800131c:	ea42 0400 	orr.w	r4, r2, r0
 8001320:	ea43 0501 	orr.w	r5, r3, r1
 8001324:	e9c7 450c 	strd	r4, r5, [r7, #48]	; 0x30
    i_ts |= unpack_left_shift_u64(src_p[2], 24u, 0xffu);
 8001328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800132a:	3302      	adds	r3, #2
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	22ff      	movs	r2, #255	; 0xff
 8001330:	2118      	movs	r1, #24
 8001332:	4618      	mov	r0, r3
 8001334:	f7ff fec2 	bl	80010bc <unpack_left_shift_u64>
 8001338:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800133c:	ea42 0800 	orr.w	r8, r2, r0
 8001340:	ea43 0901 	orr.w	r9, r3, r1
 8001344:	e9c7 890c 	strd	r8, r9, [r7, #48]	; 0x30
    i_ts |= unpack_left_shift_u64(src_p[3], 16u, 0xffu);
 8001348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800134a:	3303      	adds	r3, #3
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	22ff      	movs	r2, #255	; 0xff
 8001350:	2110      	movs	r1, #16
 8001352:	4618      	mov	r0, r3
 8001354:	f7ff feb2 	bl	80010bc <unpack_left_shift_u64>
 8001358:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800135c:	ea42 0400 	orr.w	r4, r2, r0
 8001360:	613c      	str	r4, [r7, #16]
 8001362:	430b      	orrs	r3, r1
 8001364:	617b      	str	r3, [r7, #20]
 8001366:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800136a:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    i_ts |= unpack_left_shift_u64(src_p[4], 8u, 0xffu);
 800136e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001370:	3304      	adds	r3, #4
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	22ff      	movs	r2, #255	; 0xff
 8001376:	2108      	movs	r1, #8
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff fe9f 	bl	80010bc <unpack_left_shift_u64>
 800137e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001382:	ea42 0400 	orr.w	r4, r2, r0
 8001386:	60bc      	str	r4, [r7, #8]
 8001388:	430b      	orrs	r3, r1
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001390:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    i_ts |= unpack_right_shift_u64(src_p[5], 0u, 0xffu);
 8001394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001396:	3305      	adds	r3, #5
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	22ff      	movs	r2, #255	; 0xff
 800139c:	2100      	movs	r1, #0
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff fee3 	bl	800116a <unpack_right_shift_u64>
 80013a4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80013a8:	ea42 0400 	orr.w	r4, r2, r0
 80013ac:	603c      	str	r4, [r7, #0]
 80013ae:	430b      	orrs	r3, r1
 80013b0:	607b      	str	r3, [r7, #4]
 80013b2:	e9d7 3400 	ldrd	r3, r4, [r7]
 80013b6:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    if ((i_ts & (1ull << 47)) != 0ull) {
 80013ba:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80013be:	f04f 0000 	mov.w	r0, #0
 80013c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013c6:	ea02 0400 	and.w	r4, r2, r0
 80013ca:	61bc      	str	r4, [r7, #24]
 80013cc:	400b      	ands	r3, r1
 80013ce:	61fb      	str	r3, [r7, #28]
 80013d0:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80013d4:	4323      	orrs	r3, r4
 80013d6:	d00a      	beq.n	80013ee <can2_ivt_msg_result_i_unpack+0x112>
        i_ts |= 0xffff000000000000ull;
 80013d8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80013dc:	f04f 0000 	mov.w	r0, #0
 80013e0:	4908      	ldr	r1, [pc, #32]	; (8001404 <can2_ivt_msg_result_i_unpack+0x128>)
 80013e2:	ea42 0a00 	orr.w	sl, r2, r0
 80013e6:	ea43 0b01 	orr.w	fp, r3, r1
 80013ea:	e9c7 ab0c 	strd	sl, fp, [r7, #48]	; 0x30
    }

    dst_p->i_ts = (int64_t)i_ts;
 80013ee:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80013f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80013f4:	e9c1 2300 	strd	r2, r3, [r1]

    return (0);
 80013f8:	2300      	movs	r3, #0
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3738      	adds	r7, #56	; 0x38
 80013fe:	46bd      	mov	sp, r7
 8001400:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001404:	ffff0000 	.word	0xffff0000

08001408 <can2_ivt_msg_result_u1_unpack>:

int can2_ivt_msg_result_u1_unpack(
    struct can2_ivt_msg_result_u1_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
 8001408:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800140c:	b08e      	sub	sp, #56	; 0x38
 800140e:	af00      	add	r7, sp, #0
 8001410:	62f8      	str	r0, [r7, #44]	; 0x2c
 8001412:	62b9      	str	r1, [r7, #40]	; 0x28
 8001414:	627a      	str	r2, [r7, #36]	; 0x24
    uint64_t u_cells;

    if (size < 6u) {
 8001416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001418:	2b05      	cmp	r3, #5
 800141a:	d802      	bhi.n	8001422 <can2_ivt_msg_result_u1_unpack+0x1a>
        return (-EINVAL);
 800141c:	f06f 0315 	mvn.w	r3, #21
 8001420:	e081      	b.n	8001526 <can2_ivt_msg_result_u1_unpack+0x11e>
    }

    u_cells = unpack_left_shift_u64(src_p[0], 40u, 0xffu);
 8001422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	22ff      	movs	r2, #255	; 0xff
 8001428:	2128      	movs	r1, #40	; 0x28
 800142a:	4618      	mov	r0, r3
 800142c:	f7ff fe46 	bl	80010bc <unpack_left_shift_u64>
 8001430:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
    u_cells |= unpack_left_shift_u64(src_p[1], 32u, 0xffu);
 8001434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001436:	3301      	adds	r3, #1
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	22ff      	movs	r2, #255	; 0xff
 800143c:	2120      	movs	r1, #32
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff fe3c 	bl	80010bc <unpack_left_shift_u64>
 8001444:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001448:	ea42 0400 	orr.w	r4, r2, r0
 800144c:	ea43 0501 	orr.w	r5, r3, r1
 8001450:	e9c7 450c 	strd	r4, r5, [r7, #48]	; 0x30
    u_cells |= unpack_left_shift_u64(src_p[2], 24u, 0xffu);
 8001454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001456:	3302      	adds	r3, #2
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	22ff      	movs	r2, #255	; 0xff
 800145c:	2118      	movs	r1, #24
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff fe2c 	bl	80010bc <unpack_left_shift_u64>
 8001464:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001468:	ea42 0800 	orr.w	r8, r2, r0
 800146c:	ea43 0901 	orr.w	r9, r3, r1
 8001470:	e9c7 890c 	strd	r8, r9, [r7, #48]	; 0x30
    u_cells |= unpack_left_shift_u64(src_p[3], 16u, 0xffu);
 8001474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001476:	3303      	adds	r3, #3
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	22ff      	movs	r2, #255	; 0xff
 800147c:	2110      	movs	r1, #16
 800147e:	4618      	mov	r0, r3
 8001480:	f7ff fe1c 	bl	80010bc <unpack_left_shift_u64>
 8001484:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001488:	ea42 0400 	orr.w	r4, r2, r0
 800148c:	613c      	str	r4, [r7, #16]
 800148e:	430b      	orrs	r3, r1
 8001490:	617b      	str	r3, [r7, #20]
 8001492:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001496:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    u_cells |= unpack_left_shift_u64(src_p[4], 8u, 0xffu);
 800149a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800149c:	3304      	adds	r3, #4
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	22ff      	movs	r2, #255	; 0xff
 80014a2:	2108      	movs	r1, #8
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff fe09 	bl	80010bc <unpack_left_shift_u64>
 80014aa:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80014ae:	ea42 0400 	orr.w	r4, r2, r0
 80014b2:	60bc      	str	r4, [r7, #8]
 80014b4:	430b      	orrs	r3, r1
 80014b6:	60fb      	str	r3, [r7, #12]
 80014b8:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80014bc:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    u_cells |= unpack_right_shift_u64(src_p[5], 0u, 0xffu);
 80014c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014c2:	3305      	adds	r3, #5
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	22ff      	movs	r2, #255	; 0xff
 80014c8:	2100      	movs	r1, #0
 80014ca:	4618      	mov	r0, r3
 80014cc:	f7ff fe4d 	bl	800116a <unpack_right_shift_u64>
 80014d0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80014d4:	ea42 0400 	orr.w	r4, r2, r0
 80014d8:	603c      	str	r4, [r7, #0]
 80014da:	430b      	orrs	r3, r1
 80014dc:	607b      	str	r3, [r7, #4]
 80014de:	e9d7 3400 	ldrd	r3, r4, [r7]
 80014e2:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    if ((u_cells & (1ull << 47)) != 0ull) {
 80014e6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80014ea:	f04f 0000 	mov.w	r0, #0
 80014ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014f2:	ea02 0400 	and.w	r4, r2, r0
 80014f6:	61bc      	str	r4, [r7, #24]
 80014f8:	400b      	ands	r3, r1
 80014fa:	61fb      	str	r3, [r7, #28]
 80014fc:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001500:	4323      	orrs	r3, r4
 8001502:	d00a      	beq.n	800151a <can2_ivt_msg_result_u1_unpack+0x112>
        u_cells |= 0xffff000000000000ull;
 8001504:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001508:	f04f 0000 	mov.w	r0, #0
 800150c:	4908      	ldr	r1, [pc, #32]	; (8001530 <can2_ivt_msg_result_u1_unpack+0x128>)
 800150e:	ea42 0a00 	orr.w	sl, r2, r0
 8001512:	ea43 0b01 	orr.w	fp, r3, r1
 8001516:	e9c7 ab0c 	strd	sl, fp, [r7, #48]	; 0x30
    }

    dst_p->u_cells = (int64_t)u_cells;
 800151a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800151e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001520:	e9c1 2300 	strd	r2, r3, [r1]

    return (0);
 8001524:	2300      	movs	r3, #0
}
 8001526:	4618      	mov	r0, r3
 8001528:	3738      	adds	r7, #56	; 0x38
 800152a:	46bd      	mov	sp, r7
 800152c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001530:	ffff0000 	.word	0xffff0000

08001534 <can2_ivt_msg_result_u3_unpack>:

int can2_ivt_msg_result_u3_unpack(
    struct can2_ivt_msg_result_u3_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
 8001534:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001538:	b08e      	sub	sp, #56	; 0x38
 800153a:	af00      	add	r7, sp, #0
 800153c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800153e:	62b9      	str	r1, [r7, #40]	; 0x28
 8001540:	627a      	str	r2, [r7, #36]	; 0x24
    uint64_t u_vehicle;

    if (size < 6u) {
 8001542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001544:	2b05      	cmp	r3, #5
 8001546:	d802      	bhi.n	800154e <can2_ivt_msg_result_u3_unpack+0x1a>
        return (-EINVAL);
 8001548:	f06f 0315 	mvn.w	r3, #21
 800154c:	e081      	b.n	8001652 <can2_ivt_msg_result_u3_unpack+0x11e>
    }

    u_vehicle = unpack_left_shift_u64(src_p[0], 40u, 0xffu);
 800154e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	22ff      	movs	r2, #255	; 0xff
 8001554:	2128      	movs	r1, #40	; 0x28
 8001556:	4618      	mov	r0, r3
 8001558:	f7ff fdb0 	bl	80010bc <unpack_left_shift_u64>
 800155c:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
    u_vehicle |= unpack_left_shift_u64(src_p[1], 32u, 0xffu);
 8001560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001562:	3301      	adds	r3, #1
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	22ff      	movs	r2, #255	; 0xff
 8001568:	2120      	movs	r1, #32
 800156a:	4618      	mov	r0, r3
 800156c:	f7ff fda6 	bl	80010bc <unpack_left_shift_u64>
 8001570:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001574:	ea42 0400 	orr.w	r4, r2, r0
 8001578:	ea43 0501 	orr.w	r5, r3, r1
 800157c:	e9c7 450c 	strd	r4, r5, [r7, #48]	; 0x30
    u_vehicle |= unpack_left_shift_u64(src_p[2], 24u, 0xffu);
 8001580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001582:	3302      	adds	r3, #2
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	22ff      	movs	r2, #255	; 0xff
 8001588:	2118      	movs	r1, #24
 800158a:	4618      	mov	r0, r3
 800158c:	f7ff fd96 	bl	80010bc <unpack_left_shift_u64>
 8001590:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001594:	ea42 0800 	orr.w	r8, r2, r0
 8001598:	ea43 0901 	orr.w	r9, r3, r1
 800159c:	e9c7 890c 	strd	r8, r9, [r7, #48]	; 0x30
    u_vehicle |= unpack_left_shift_u64(src_p[3], 16u, 0xffu);
 80015a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015a2:	3303      	adds	r3, #3
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	22ff      	movs	r2, #255	; 0xff
 80015a8:	2110      	movs	r1, #16
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7ff fd86 	bl	80010bc <unpack_left_shift_u64>
 80015b0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80015b4:	ea42 0400 	orr.w	r4, r2, r0
 80015b8:	613c      	str	r4, [r7, #16]
 80015ba:	430b      	orrs	r3, r1
 80015bc:	617b      	str	r3, [r7, #20]
 80015be:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80015c2:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    u_vehicle |= unpack_left_shift_u64(src_p[4], 8u, 0xffu);
 80015c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015c8:	3304      	adds	r3, #4
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	22ff      	movs	r2, #255	; 0xff
 80015ce:	2108      	movs	r1, #8
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7ff fd73 	bl	80010bc <unpack_left_shift_u64>
 80015d6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80015da:	ea42 0400 	orr.w	r4, r2, r0
 80015de:	60bc      	str	r4, [r7, #8]
 80015e0:	430b      	orrs	r3, r1
 80015e2:	60fb      	str	r3, [r7, #12]
 80015e4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80015e8:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    u_vehicle |= unpack_right_shift_u64(src_p[5], 0u, 0xffu);
 80015ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015ee:	3305      	adds	r3, #5
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	22ff      	movs	r2, #255	; 0xff
 80015f4:	2100      	movs	r1, #0
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7ff fdb7 	bl	800116a <unpack_right_shift_u64>
 80015fc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001600:	ea42 0400 	orr.w	r4, r2, r0
 8001604:	603c      	str	r4, [r7, #0]
 8001606:	430b      	orrs	r3, r1
 8001608:	607b      	str	r3, [r7, #4]
 800160a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800160e:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    if ((u_vehicle & (1ull << 47)) != 0ull) {
 8001612:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001616:	f04f 0000 	mov.w	r0, #0
 800161a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800161e:	ea02 0400 	and.w	r4, r2, r0
 8001622:	61bc      	str	r4, [r7, #24]
 8001624:	400b      	ands	r3, r1
 8001626:	61fb      	str	r3, [r7, #28]
 8001628:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800162c:	4323      	orrs	r3, r4
 800162e:	d00a      	beq.n	8001646 <can2_ivt_msg_result_u3_unpack+0x112>
        u_vehicle |= 0xffff000000000000ull;
 8001630:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001634:	f04f 0000 	mov.w	r0, #0
 8001638:	4908      	ldr	r1, [pc, #32]	; (800165c <can2_ivt_msg_result_u3_unpack+0x128>)
 800163a:	ea42 0a00 	orr.w	sl, r2, r0
 800163e:	ea43 0b01 	orr.w	fp, r3, r1
 8001642:	e9c7 ab0c 	strd	sl, fp, [r7, #48]	; 0x30
    }

    dst_p->u_vehicle = (int64_t)u_vehicle;
 8001646:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800164a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800164c:	e9c1 2300 	strd	r2, r3, [r1]

    return (0);
 8001650:	2300      	movs	r3, #0
}
 8001652:	4618      	mov	r0, r3
 8001654:	3738      	adds	r7, #56	; 0x38
 8001656:	46bd      	mov	sp, r7
 8001658:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800165c:	ffff0000 	.word	0xffff0000

08001660 <can2_cc_status_unpack>:

int can2_cc_status_unpack(
    struct can2_cc_status_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	607a      	str	r2, [r7, #4]
    if (size < 1u) {
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d102      	bne.n	8001678 <can2_cc_status_unpack+0x18>
        return (-EINVAL);
 8001672:	f06f 0315 	mvn.w	r3, #21
 8001676:	e00b      	b.n	8001690 <can2_cc_status_unpack+0x30>
    }

    dst_p->enable_ams_charging = unpack_right_shift_u8(src_p[0], 0u, 0x01u);
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	2201      	movs	r2, #1
 800167e:	2100      	movs	r1, #0
 8001680:	4618      	mov	r0, r3
 8001682:	f7ff fd42 	bl	800110a <unpack_right_shift_u8>
 8001686:	4603      	mov	r3, r0
 8001688:	461a      	mov	r2, r3
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	701a      	strb	r2, [r3, #0]

    return (0);
 800168e:	2300      	movs	r3, #0
}
 8001690:	4618      	mov	r0, r3
 8001692:	3710      	adds	r7, #16
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}

08001698 <can1_dbu_status_1_decode>:

/*
 * @Brief  
 * @Retval None
 */
void can1_dbu_status_1_decode() {
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
   can1_dbu_status_1_unpack(&can1_dbu_status_1, rx_data, 8);
 800169c:	2208      	movs	r2, #8
 800169e:	4904      	ldr	r1, [pc, #16]	; (80016b0 <can1_dbu_status_1_decode+0x18>)
 80016a0:	4804      	ldr	r0, [pc, #16]	; (80016b4 <can1_dbu_status_1_decode+0x1c>)
 80016a2:	f7ff fca7 	bl	8000ff4 <can1_dbu_status_1_unpack>
   can1_dbu_status_1_flag = 1;
 80016a6:	4b04      	ldr	r3, [pc, #16]	; (80016b8 <can1_dbu_status_1_decode+0x20>)
 80016a8:	2201      	movs	r2, #1
 80016aa:	701a      	strb	r2, [r3, #0]
}
 80016ac:	bf00      	nop
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	2000144c 	.word	0x2000144c
 80016b4:	20001454 	.word	0x20001454
 80016b8:	20001481 	.word	0x20001481

080016bc <can2_amk1_setpoints_1_decode>:

/*
 * @Brief  
 * @Retval None
 */
void can2_amk1_setpoints_1_decode() {
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
   can2_amk1_setpoints_1_unpack(&can2_amk1_setpoints_1, rx_data, 8);
 80016c0:	2208      	movs	r2, #8
 80016c2:	4904      	ldr	r1, [pc, #16]	; (80016d4 <can2_amk1_setpoints_1_decode+0x18>)
 80016c4:	4804      	ldr	r0, [pc, #16]	; (80016d8 <can2_amk1_setpoints_1_decode+0x1c>)
 80016c6:	f7ff fd77 	bl	80011b8 <can2_amk1_setpoints_1_unpack>
   can2_amk1_setpoints_1_flag = 1;
 80016ca:	4b04      	ldr	r3, [pc, #16]	; (80016dc <can2_amk1_setpoints_1_decode+0x20>)
 80016cc:	2201      	movs	r2, #1
 80016ce:	701a      	strb	r2, [r3, #0]
}
 80016d0:	bf00      	nop
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	2000144c 	.word	0x2000144c
 80016d8:	20001458 	.word	0x20001458
 80016dc:	20001482 	.word	0x20001482

080016e0 <can2_ivt_msg_result_i_decode>:

/*
 * @Brief  
 * @Retval None
 */
void can2_ivt_msg_result_i_decode() {
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
   can2_ivt_msg_result_i_unpack(&can2_ivt_msg_result_i, rx_data, 6);
 80016e4:	2206      	movs	r2, #6
 80016e6:	4904      	ldr	r1, [pc, #16]	; (80016f8 <can2_ivt_msg_result_i_decode+0x18>)
 80016e8:	4804      	ldr	r0, [pc, #16]	; (80016fc <can2_ivt_msg_result_i_decode+0x1c>)
 80016ea:	f7ff fdf7 	bl	80012dc <can2_ivt_msg_result_i_unpack>
   can2_ivt_msg_result_i_flag = 1;
 80016ee:	4b04      	ldr	r3, [pc, #16]	; (8001700 <can2_ivt_msg_result_i_decode+0x20>)
 80016f0:	2201      	movs	r2, #1
 80016f2:	701a      	strb	r2, [r3, #0]
}
 80016f4:	bf00      	nop
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	2000144c 	.word	0x2000144c
 80016fc:	20001468 	.word	0x20001468
 8001700:	20001483 	.word	0x20001483

08001704 <can2_ivt_msg_result_u1_decode>:

/*
 * @Brief  
 * @Retval None
 */
void can2_ivt_msg_result_u1_decode() {
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
   can2_ivt_msg_result_u1_unpack(&can2_ivt_msg_result_u1, rx_data, 6);
 8001708:	2206      	movs	r2, #6
 800170a:	4904      	ldr	r1, [pc, #16]	; (800171c <can2_ivt_msg_result_u1_decode+0x18>)
 800170c:	4804      	ldr	r0, [pc, #16]	; (8001720 <can2_ivt_msg_result_u1_decode+0x1c>)
 800170e:	f7ff fe7b 	bl	8001408 <can2_ivt_msg_result_u1_unpack>
   can2_ivt_msg_result_u1_flag = 1;
 8001712:	4b04      	ldr	r3, [pc, #16]	; (8001724 <can2_ivt_msg_result_u1_decode+0x20>)
 8001714:	2201      	movs	r2, #1
 8001716:	701a      	strb	r2, [r3, #0]
}
 8001718:	bf00      	nop
 800171a:	bd80      	pop	{r7, pc}
 800171c:	2000144c 	.word	0x2000144c
 8001720:	20001470 	.word	0x20001470
 8001724:	20001484 	.word	0x20001484

08001728 <can2_ivt_msg_result_u3_decode>:

/*
 * @Brief  
 * @Retval None
 */
void can2_ivt_msg_result_u3_decode() {
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
   can2_ivt_msg_result_u3_unpack(&can2_ivt_msg_result_u3, rx_data, 6);
 800172c:	2206      	movs	r2, #6
 800172e:	4904      	ldr	r1, [pc, #16]	; (8001740 <can2_ivt_msg_result_u3_decode+0x18>)
 8001730:	4804      	ldr	r0, [pc, #16]	; (8001744 <can2_ivt_msg_result_u3_decode+0x1c>)
 8001732:	f7ff feff 	bl	8001534 <can2_ivt_msg_result_u3_unpack>
   can2_ivt_msg_result_u3_flag = 1;
 8001736:	4b04      	ldr	r3, [pc, #16]	; (8001748 <can2_ivt_msg_result_u3_decode+0x20>)
 8001738:	2201      	movs	r2, #1
 800173a:	701a      	strb	r2, [r3, #0]
}
 800173c:	bf00      	nop
 800173e:	bd80      	pop	{r7, pc}
 8001740:	2000144c 	.word	0x2000144c
 8001744:	20001478 	.word	0x20001478
 8001748:	20001485 	.word	0x20001485

0800174c <can2_cc_status_decode>:

/*
 * @Brief  
 * @Retval None
 */
void can2_cc_status_decode() {
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
   can2_cc_status_unpack(&can2_cc_status, rx_data, 1);
 8001750:	2201      	movs	r2, #1
 8001752:	4904      	ldr	r1, [pc, #16]	; (8001764 <can2_cc_status_decode+0x18>)
 8001754:	4804      	ldr	r0, [pc, #16]	; (8001768 <can2_cc_status_decode+0x1c>)
 8001756:	f7ff ff83 	bl	8001660 <can2_cc_status_unpack>
   can2_cc_status_flag = 1;
 800175a:	4b04      	ldr	r3, [pc, #16]	; (800176c <can2_cc_status_decode+0x20>)
 800175c:	2201      	movs	r2, #1
 800175e:	701a      	strb	r2, [r3, #0]
}
 8001760:	bf00      	nop
 8001762:	bd80      	pop	{r7, pc}
 8001764:	2000144c 	.word	0x2000144c
 8001768:	20001480 	.word	0x20001480
 800176c:	20001486 	.word	0x20001486

08001770 <HAL_CAN_RxFifo0MsgPendingCallback>:
       can2_cc_status_rx_callback(&cc_status);
       can2_cc_status_flag = 0;
   }
}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001770:	b580      	push	{r7, lr}
 8001772:	b08a      	sub	sp, #40	; 0x28
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
   CAN_RxHeaderTypeDef rx_header;

   if (HAL_OK == HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_header, rx_data)) {
 8001778:	f107 020c 	add.w	r2, r7, #12
 800177c:	4b21      	ldr	r3, [pc, #132]	; (8001804 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 800177e:	2100      	movs	r1, #0
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	f010 f80d 	bl	80117a0 <HAL_CAN_GetRxMessage>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d136      	bne.n	80017fa <HAL_CAN_RxFifo0MsgPendingCallback+0x8a>
       switch(rx_header.StdId) {
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	f240 5224 	movw	r2, #1316	; 0x524
 8001792:	4293      	cmp	r3, r2
 8001794:	d02b      	beq.n	80017ee <HAL_CAN_RxFifo0MsgPendingCallback+0x7e>
 8001796:	f240 5224 	movw	r2, #1316	; 0x524
 800179a:	4293      	cmp	r3, r2
 800179c:	d82e      	bhi.n	80017fc <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>
 800179e:	f240 5222 	movw	r2, #1314	; 0x522
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d020      	beq.n	80017e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>
 80017a6:	f240 5222 	movw	r2, #1314	; 0x522
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d826      	bhi.n	80017fc <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>
 80017ae:	f240 5221 	movw	r2, #1313	; 0x521
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d015      	beq.n	80017e2 <HAL_CAN_RxFifo0MsgPendingCallback+0x72>
 80017b6:	f240 5221 	movw	r2, #1313	; 0x521
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d81e      	bhi.n	80017fc <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>
 80017be:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 80017c2:	d017      	beq.n	80017f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>
 80017c4:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 80017c8:	d818      	bhi.n	80017fc <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>
 80017ca:	2b40      	cmp	r3, #64	; 0x40
 80017cc:	d003      	beq.n	80017d6 <HAL_CAN_RxFifo0MsgPendingCallback+0x66>
 80017ce:	f5b3 7fc2 	cmp.w	r3, #388	; 0x184
 80017d2:	d003      	beq.n	80017dc <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>
           case 592:
               can2_cc_status_decode();
               break;
        }
    }
}
 80017d4:	e012      	b.n	80017fc <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>
               can1_dbu_status_1_decode();
 80017d6:	f7ff ff5f 	bl	8001698 <can1_dbu_status_1_decode>
               break;
 80017da:	e00f      	b.n	80017fc <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>
               can2_amk1_setpoints_1_decode();
 80017dc:	f7ff ff6e 	bl	80016bc <can2_amk1_setpoints_1_decode>
               break;
 80017e0:	e00c      	b.n	80017fc <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>
               can2_ivt_msg_result_i_decode();
 80017e2:	f7ff ff7d 	bl	80016e0 <can2_ivt_msg_result_i_decode>
               break;
 80017e6:	e009      	b.n	80017fc <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>
               can2_ivt_msg_result_u1_decode();
 80017e8:	f7ff ff8c 	bl	8001704 <can2_ivt_msg_result_u1_decode>
               break;
 80017ec:	e006      	b.n	80017fc <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>
               can2_ivt_msg_result_u3_decode();
 80017ee:	f7ff ff9b 	bl	8001728 <can2_ivt_msg_result_u3_decode>
               break;
 80017f2:	e003      	b.n	80017fc <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>
               can2_cc_status_decode();
 80017f4:	f7ff ffaa 	bl	800174c <can2_cc_status_decode>
               break;
 80017f8:	e000      	b.n	80017fc <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>
    }
 80017fa:	bf00      	nop
}
 80017fc:	bf00      	nop
 80017fe:	3728      	adds	r7, #40	; 0x28
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	2000144c 	.word	0x2000144c

08001808 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001808:	b580      	push	{r7, lr}
 800180a:	b08a      	sub	sp, #40	; 0x28
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
   CAN_RxHeaderTypeDef rx_header;

   if (HAL_OK == HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &rx_header, rx_data)) {
 8001810:	f107 020c 	add.w	r2, r7, #12
 8001814:	4b21      	ldr	r3, [pc, #132]	; (800189c <HAL_CAN_RxFifo1MsgPendingCallback+0x94>)
 8001816:	2101      	movs	r1, #1
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f00f ffc1 	bl	80117a0 <HAL_CAN_GetRxMessage>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d136      	bne.n	8001892 <HAL_CAN_RxFifo1MsgPendingCallback+0x8a>
       switch(rx_header.StdId) {
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	f240 5224 	movw	r2, #1316	; 0x524
 800182a:	4293      	cmp	r3, r2
 800182c:	d02b      	beq.n	8001886 <HAL_CAN_RxFifo1MsgPendingCallback+0x7e>
 800182e:	f240 5224 	movw	r2, #1316	; 0x524
 8001832:	4293      	cmp	r3, r2
 8001834:	d82e      	bhi.n	8001894 <HAL_CAN_RxFifo1MsgPendingCallback+0x8c>
 8001836:	f240 5222 	movw	r2, #1314	; 0x522
 800183a:	4293      	cmp	r3, r2
 800183c:	d020      	beq.n	8001880 <HAL_CAN_RxFifo1MsgPendingCallback+0x78>
 800183e:	f240 5222 	movw	r2, #1314	; 0x522
 8001842:	4293      	cmp	r3, r2
 8001844:	d826      	bhi.n	8001894 <HAL_CAN_RxFifo1MsgPendingCallback+0x8c>
 8001846:	f240 5221 	movw	r2, #1313	; 0x521
 800184a:	4293      	cmp	r3, r2
 800184c:	d015      	beq.n	800187a <HAL_CAN_RxFifo1MsgPendingCallback+0x72>
 800184e:	f240 5221 	movw	r2, #1313	; 0x521
 8001852:	4293      	cmp	r3, r2
 8001854:	d81e      	bhi.n	8001894 <HAL_CAN_RxFifo1MsgPendingCallback+0x8c>
 8001856:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800185a:	d017      	beq.n	800188c <HAL_CAN_RxFifo1MsgPendingCallback+0x84>
 800185c:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8001860:	d818      	bhi.n	8001894 <HAL_CAN_RxFifo1MsgPendingCallback+0x8c>
 8001862:	2b40      	cmp	r3, #64	; 0x40
 8001864:	d003      	beq.n	800186e <HAL_CAN_RxFifo1MsgPendingCallback+0x66>
 8001866:	f5b3 7fc2 	cmp.w	r3, #388	; 0x184
 800186a:	d003      	beq.n	8001874 <HAL_CAN_RxFifo1MsgPendingCallback+0x6c>
           case 592:
               can2_cc_status_decode();
               break;
        }
    }
}
 800186c:	e012      	b.n	8001894 <HAL_CAN_RxFifo1MsgPendingCallback+0x8c>
               can1_dbu_status_1_decode();
 800186e:	f7ff ff13 	bl	8001698 <can1_dbu_status_1_decode>
               break;
 8001872:	e00f      	b.n	8001894 <HAL_CAN_RxFifo1MsgPendingCallback+0x8c>
               can2_amk1_setpoints_1_decode();
 8001874:	f7ff ff22 	bl	80016bc <can2_amk1_setpoints_1_decode>
               break;
 8001878:	e00c      	b.n	8001894 <HAL_CAN_RxFifo1MsgPendingCallback+0x8c>
               can2_ivt_msg_result_i_decode();
 800187a:	f7ff ff31 	bl	80016e0 <can2_ivt_msg_result_i_decode>
               break;
 800187e:	e009      	b.n	8001894 <HAL_CAN_RxFifo1MsgPendingCallback+0x8c>
               can2_ivt_msg_result_u1_decode();
 8001880:	f7ff ff40 	bl	8001704 <can2_ivt_msg_result_u1_decode>
               break;
 8001884:	e006      	b.n	8001894 <HAL_CAN_RxFifo1MsgPendingCallback+0x8c>
               can2_ivt_msg_result_u3_decode();
 8001886:	f7ff ff4f 	bl	8001728 <can2_ivt_msg_result_u3_decode>
               break;
 800188a:	e003      	b.n	8001894 <HAL_CAN_RxFifo1MsgPendingCallback+0x8c>
               can2_cc_status_decode();
 800188c:	f7ff ff5e 	bl	800174c <can2_cc_status_decode>
               break;
 8001890:	e000      	b.n	8001894 <HAL_CAN_RxFifo1MsgPendingCallback+0x8c>
    }
 8001892:	bf00      	nop
}
 8001894:	bf00      	nop
 8001896:	3728      	adds	r7, #40	; 0x28
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	2000144c 	.word	0x2000144c

080018a0 <simple_filter>:

void simple_filter() {
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b08a      	sub	sp, #40	; 0x28
 80018a4:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef filter_config;

		filter_config.FilterActivation = ENABLE;
 80018a6:	2301      	movs	r3, #1
 80018a8:	623b      	str	r3, [r7, #32]
		filter_config.FilterBank = 0;
 80018aa:	2300      	movs	r3, #0
 80018ac:	617b      	str	r3, [r7, #20]
		filter_config.FilterMode = CAN_FILTERMODE_IDMASK;
 80018ae:	2300      	movs	r3, #0
 80018b0:	61bb      	str	r3, [r7, #24]
		filter_config.FilterIdHigh = 0x0000;
 80018b2:	2300      	movs	r3, #0
 80018b4:	603b      	str	r3, [r7, #0]
		filter_config.FilterIdLow = 0x0000;
 80018b6:	2300      	movs	r3, #0
 80018b8:	607b      	str	r3, [r7, #4]
		filter_config.FilterMaskIdHigh = 0x0000;
 80018ba:	2300      	movs	r3, #0
 80018bc:	60bb      	str	r3, [r7, #8]
		filter_config.FilterMaskIdLow = 0x0000;
 80018be:	2300      	movs	r3, #0
 80018c0:	60fb      	str	r3, [r7, #12]
		filter_config.FilterScale = CAN_FILTERSCALE_32BIT;
 80018c2:	2301      	movs	r3, #1
 80018c4:	61fb      	str	r3, [r7, #28]

		filter_config.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80018c6:	2300      	movs	r3, #0
 80018c8:	613b      	str	r3, [r7, #16]
		if (HAL_CAN_ConfigFilter(_hcan1, &filter_config) != HAL_OK) {
 80018ca:	4b1c      	ldr	r3, [pc, #112]	; (800193c <simple_filter+0x9c>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	463a      	mov	r2, r7
 80018d0:	4611      	mov	r1, r2
 80018d2:	4618      	mov	r0, r3
 80018d4:	f00f fdfe 	bl	80114d4 <HAL_CAN_ConfigFilter>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <simple_filter+0x42>
			Error_Handler();
 80018de:	f002 f8cd 	bl	8003a7c <Error_Handler>
		}

		filter_config.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 80018e2:	2301      	movs	r3, #1
 80018e4:	613b      	str	r3, [r7, #16]
		if (HAL_CAN_ConfigFilter(_hcan1, &filter_config) != HAL_OK) {
 80018e6:	4b15      	ldr	r3, [pc, #84]	; (800193c <simple_filter+0x9c>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	463a      	mov	r2, r7
 80018ec:	4611      	mov	r1, r2
 80018ee:	4618      	mov	r0, r3
 80018f0:	f00f fdf0 	bl	80114d4 <HAL_CAN_ConfigFilter>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <simple_filter+0x5e>
			Error_Handler();
 80018fa:	f002 f8bf 	bl	8003a7c <Error_Handler>
		}

		if (HAL_CAN_ConfigFilter(_hcan2, &filter_config) != HAL_OK) {
 80018fe:	4b10      	ldr	r3, [pc, #64]	; (8001940 <simple_filter+0xa0>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	463a      	mov	r2, r7
 8001904:	4611      	mov	r1, r2
 8001906:	4618      	mov	r0, r3
 8001908:	f00f fde4 	bl	80114d4 <HAL_CAN_ConfigFilter>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <simple_filter+0x76>
			Error_Handler();
 8001912:	f002 f8b3 	bl	8003a7c <Error_Handler>
		}

		filter_config.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 8001916:	2301      	movs	r3, #1
 8001918:	613b      	str	r3, [r7, #16]
		if (HAL_CAN_ConfigFilter(_hcan2, &filter_config) != HAL_OK) {
 800191a:	4b09      	ldr	r3, [pc, #36]	; (8001940 <simple_filter+0xa0>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	463a      	mov	r2, r7
 8001920:	4611      	mov	r1, r2
 8001922:	4618      	mov	r0, r3
 8001924:	f00f fdd6 	bl	80114d4 <HAL_CAN_ConfigFilter>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <simple_filter+0x92>
			Error_Handler();
 800192e:	f002 f8a5 	bl	8003a7c <Error_Handler>
		}


}
 8001932:	bf00      	nop
 8001934:	3728      	adds	r7, #40	; 0x28
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	20001488 	.word	0x20001488
 8001940:	2000148c 	.word	0x2000148c

08001944 <initialize_CAN>:

void initialize_CAN(CAN_HandleTypeDef* __hcan1, CAN_HandleTypeDef* __hcan2) {
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	6039      	str	r1, [r7, #0]
   _hcan1 = __hcan1;
 800194e:	4a25      	ldr	r2, [pc, #148]	; (80019e4 <initialize_CAN+0xa0>)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6013      	str	r3, [r2, #0]

   if (HAL_CAN_Start(_hcan1) != HAL_OK) {
 8001954:	4b23      	ldr	r3, [pc, #140]	; (80019e4 <initialize_CAN+0xa0>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4618      	mov	r0, r3
 800195a:	f00f fe9b 	bl	8011694 <HAL_CAN_Start>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <initialize_CAN+0x24>
       Error_Handler();
 8001964:	f002 f88a 	bl	8003a7c <Error_Handler>
   }
   if (HAL_CAN_WakeUp(_hcan1) != HAL_OK) {
 8001968:	4b1e      	ldr	r3, [pc, #120]	; (80019e4 <initialize_CAN+0xa0>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4618      	mov	r0, r3
 800196e:	f00f fed5 	bl	801171c <HAL_CAN_WakeUp>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <initialize_CAN+0x38>
       Error_Handler();
 8001978:	f002 f880 	bl	8003a7c <Error_Handler>
   }
   if (HAL_CAN_ActivateNotification(_hcan1, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK) {
 800197c:	4b19      	ldr	r3, [pc, #100]	; (80019e4 <initialize_CAN+0xa0>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2112      	movs	r1, #18
 8001982:	4618      	mov	r0, r3
 8001984:	f010 f81e 	bl	80119c4 <HAL_CAN_ActivateNotification>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <initialize_CAN+0x4e>
       Error_Handler();
 800198e:	f002 f875 	bl	8003a7c <Error_Handler>
   }

   _hcan2 = __hcan2;
 8001992:	4a15      	ldr	r2, [pc, #84]	; (80019e8 <initialize_CAN+0xa4>)
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	6013      	str	r3, [r2, #0]

   if (HAL_CAN_Start(_hcan2) != HAL_OK) {
 8001998:	4b13      	ldr	r3, [pc, #76]	; (80019e8 <initialize_CAN+0xa4>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4618      	mov	r0, r3
 800199e:	f00f fe79 	bl	8011694 <HAL_CAN_Start>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <initialize_CAN+0x68>
       Error_Handler();
 80019a8:	f002 f868 	bl	8003a7c <Error_Handler>
   }
   if (HAL_CAN_WakeUp(_hcan2) != HAL_OK) {
 80019ac:	4b0e      	ldr	r3, [pc, #56]	; (80019e8 <initialize_CAN+0xa4>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4618      	mov	r0, r3
 80019b2:	f00f feb3 	bl	801171c <HAL_CAN_WakeUp>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <initialize_CAN+0x7c>
       Error_Handler();
 80019bc:	f002 f85e 	bl	8003a7c <Error_Handler>
   }
   if (HAL_CAN_ActivateNotification(_hcan2, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK) {
 80019c0:	4b09      	ldr	r3, [pc, #36]	; (80019e8 <initialize_CAN+0xa4>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	2112      	movs	r1, #18
 80019c6:	4618      	mov	r0, r3
 80019c8:	f00f fffc 	bl	80119c4 <HAL_CAN_ActivateNotification>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <initialize_CAN+0x92>
       Error_Handler();
 80019d2:	f002 f853 	bl	8003a7c <Error_Handler>
   }


   simple_filter();
 80019d6:	f7ff ff63 	bl	80018a0 <simple_filter>

}
 80019da:	bf00      	nop
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	20001488 	.word	0x20001488
 80019e8:	2000148c 	.word	0x2000148c

080019ec <inc_res>:
 * @Brief	Increments if true, resets (to zero) otherwise
 * @Param	A conditional statement which evaluates to true or false
 * @Param	A pointer to an integer which may be incremented or reset
 * @Retval	Void
 */
static void inc_res(uint8_t cnd, uint8_t *ptr) {
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	4603      	mov	r3, r0
 80019f4:	6039      	str	r1, [r7, #0]
 80019f6:	71fb      	strb	r3, [r7, #7]
	if (cnd) {
 80019f8:	79fb      	ldrb	r3, [r7, #7]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d006      	beq.n	8001a0c <inc_res+0x20>
		ptr[0]++;
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	3301      	adds	r3, #1
 8001a04:	b2da      	uxtb	r2, r3
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	701a      	strb	r2, [r3, #0]
	} else {
		ptr[0] = 0;
	}
}
 8001a0a:	e002      	b.n	8001a12 <inc_res+0x26>
		ptr[0] = 0;
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	701a      	strb	r2, [r3, #0]
}
 8001a12:	bf00      	nop
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
	...

08001a20 <COM_voltages_ok_d>:
 * @Param	A flag which says whether the values are valid or not (due to corruption, etc.)
 * @Param	The sample constraint. How many consecutive samples may be wrong before an error is triggered
 * @retval	1 if there is no error
 */
uint8_t COM_voltages_ok_d(double *voltages, uint8_t valid,
		uint16_t sample_constraint) {
 8001a20:	b5b0      	push	{r4, r5, r7, lr}
 8001a22:	b086      	sub	sp, #24
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	460b      	mov	r3, r1
 8001a2a:	70fb      	strb	r3, [r7, #3]
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	803b      	strh	r3, [r7, #0]
	const float upper_boundary = 4.19;
 8001a30:	4b30      	ldr	r3, [pc, #192]	; (8001af4 <COM_voltages_ok_d+0xd4>)
 8001a32:	613b      	str	r3, [r7, #16]
	const float lower_boundary = 2.81;
 8001a34:	4b30      	ldr	r3, [pc, #192]	; (8001af8 <COM_voltages_ok_d+0xd8>)
 8001a36:	60fb      	str	r3, [r7, #12]

	for (int p = 0; p < 126; p++) {
 8001a38:	2300      	movs	r3, #0
 8001a3a:	617b      	str	r3, [r7, #20]
 8001a3c:	e052      	b.n	8001ae4 <COM_voltages_ok_d+0xc4>
		inc_res(valid && (voltages[p] > upper_boundary), &over_voltages[p]);
 8001a3e:	78fb      	ldrb	r3, [r7, #3]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d013      	beq.n	8001a6c <COM_voltages_ok_d+0x4c>
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	00db      	lsls	r3, r3, #3
 8001a48:	687a      	ldr	r2, [r7, #4]
 8001a4a:	4413      	add	r3, r2
 8001a4c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001a50:	6938      	ldr	r0, [r7, #16]
 8001a52:	f7fe fd6b 	bl	800052c <__aeabi_f2d>
 8001a56:	4602      	mov	r2, r0
 8001a58:	460b      	mov	r3, r1
 8001a5a:	4620      	mov	r0, r4
 8001a5c:	4629      	mov	r1, r5
 8001a5e:	f7ff f84d 	bl	8000afc <__aeabi_dcmpgt>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <COM_voltages_ok_d+0x4c>
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e000      	b.n	8001a6e <COM_voltages_ok_d+0x4e>
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	b2da      	uxtb	r2, r3
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	4922      	ldr	r1, [pc, #136]	; (8001afc <COM_voltages_ok_d+0xdc>)
 8001a74:	440b      	add	r3, r1
 8001a76:	4619      	mov	r1, r3
 8001a78:	4610      	mov	r0, r2
 8001a7a:	f7ff ffb7 	bl	80019ec <inc_res>
		inc_res(valid && (lower_boundary > voltages[p]), &under_voltages[p]);
 8001a7e:	78fb      	ldrb	r3, [r7, #3]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d00f      	beq.n	8001aa4 <COM_voltages_ok_d+0x84>
 8001a84:	68f8      	ldr	r0, [r7, #12]
 8001a86:	f7fe fd51 	bl	800052c <__aeabi_f2d>
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	00db      	lsls	r3, r3, #3
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	4413      	add	r3, r2
 8001a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a96:	f7ff f831 	bl	8000afc <__aeabi_dcmpgt>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <COM_voltages_ok_d+0x84>
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e000      	b.n	8001aa6 <COM_voltages_ok_d+0x86>
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	b2da      	uxtb	r2, r3
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	4915      	ldr	r1, [pc, #84]	; (8001b00 <COM_voltages_ok_d+0xe0>)
 8001aac:	440b      	add	r3, r1
 8001aae:	4619      	mov	r1, r3
 8001ab0:	4610      	mov	r0, r2
 8001ab2:	f7ff ff9b 	bl	80019ec <inc_res>

		if (over_voltages[p] > sample_constraint) {
 8001ab6:	4a11      	ldr	r2, [pc, #68]	; (8001afc <COM_voltages_ok_d+0xdc>)
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	4413      	add	r3, r2
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	b29b      	uxth	r3, r3
 8001ac0:	883a      	ldrh	r2, [r7, #0]
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d201      	bcs.n	8001aca <COM_voltages_ok_d+0xaa>
			return 0;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	e010      	b.n	8001aec <COM_voltages_ok_d+0xcc>
		}
		if (under_voltages[p] > sample_constraint) {
 8001aca:	4a0d      	ldr	r2, [pc, #52]	; (8001b00 <COM_voltages_ok_d+0xe0>)
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	4413      	add	r3, r2
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	883a      	ldrh	r2, [r7, #0]
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d201      	bcs.n	8001ade <COM_voltages_ok_d+0xbe>
			return 0;
 8001ada:	2300      	movs	r3, #0
 8001adc:	e006      	b.n	8001aec <COM_voltages_ok_d+0xcc>
	for (int p = 0; p < 126; p++) {
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	617b      	str	r3, [r7, #20]
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	2b7d      	cmp	r3, #125	; 0x7d
 8001ae8:	dda9      	ble.n	8001a3e <COM_voltages_ok_d+0x1e>
		}
	}

	return 1;
 8001aea:	2301      	movs	r3, #1

}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3718      	adds	r7, #24
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bdb0      	pop	{r4, r5, r7, pc}
 8001af4:	4086147b 	.word	0x4086147b
 8001af8:	4033d70a 	.word	0x4033d70a
 8001afc:	20001490 	.word	0x20001490
 8001b00:	20001510 	.word	0x20001510

08001b04 <COM_temperatures_ok_d>:
 * @Param	A flag which says whether the values are valid or not (due to corruption, etc.)
 * @Param	The sample constraint. How many consecutive samples may be wrong before an error is triggered
 * @retval	1 if there is no error
 */
uint8_t COM_temperatures_ok_d(double *temperatures, uint8_t valid,
		uint16_t sample_constraint) {
 8001b04:	b5b0      	push	{r4, r5, r7, lr}
 8001b06:	b086      	sub	sp, #24
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	70fb      	strb	r3, [r7, #3]
 8001b10:	4613      	mov	r3, r2
 8001b12:	803b      	strh	r3, [r7, #0]
	const float upper_boundary = 60;
 8001b14:	4b30      	ldr	r3, [pc, #192]	; (8001bd8 <COM_temperatures_ok_d+0xd4>)
 8001b16:	613b      	str	r3, [r7, #16]
	const float lower_boundary = -20;
 8001b18:	4b30      	ldr	r3, [pc, #192]	; (8001bdc <COM_temperatures_ok_d+0xd8>)
 8001b1a:	60fb      	str	r3, [r7, #12]

	for (int p = 0; p < 60; p++) {
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	617b      	str	r3, [r7, #20]
 8001b20:	e052      	b.n	8001bc8 <COM_temperatures_ok_d+0xc4>
		inc_res(valid && (temperatures[p] > upper_boundary),
 8001b22:	78fb      	ldrb	r3, [r7, #3]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d013      	beq.n	8001b50 <COM_temperatures_ok_d+0x4c>
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	00db      	lsls	r3, r3, #3
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	4413      	add	r3, r2
 8001b30:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001b34:	6938      	ldr	r0, [r7, #16]
 8001b36:	f7fe fcf9 	bl	800052c <__aeabi_f2d>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	4620      	mov	r0, r4
 8001b40:	4629      	mov	r1, r5
 8001b42:	f7fe ffdb 	bl	8000afc <__aeabi_dcmpgt>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <COM_temperatures_ok_d+0x4c>
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e000      	b.n	8001b52 <COM_temperatures_ok_d+0x4e>
 8001b50:	2300      	movs	r3, #0
 8001b52:	b2da      	uxtb	r2, r3
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	4922      	ldr	r1, [pc, #136]	; (8001be0 <COM_temperatures_ok_d+0xdc>)
 8001b58:	440b      	add	r3, r1
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	4610      	mov	r0, r2
 8001b5e:	f7ff ff45 	bl	80019ec <inc_res>
				&over_temperatures[p]);
		inc_res(valid && (lower_boundary > temperatures[p]),
 8001b62:	78fb      	ldrb	r3, [r7, #3]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d00f      	beq.n	8001b88 <COM_temperatures_ok_d+0x84>
 8001b68:	68f8      	ldr	r0, [r7, #12]
 8001b6a:	f7fe fcdf 	bl	800052c <__aeabi_f2d>
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	00db      	lsls	r3, r3, #3
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	4413      	add	r3, r2
 8001b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b7a:	f7fe ffbf 	bl	8000afc <__aeabi_dcmpgt>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d001      	beq.n	8001b88 <COM_temperatures_ok_d+0x84>
 8001b84:	2301      	movs	r3, #1
 8001b86:	e000      	b.n	8001b8a <COM_temperatures_ok_d+0x86>
 8001b88:	2300      	movs	r3, #0
 8001b8a:	b2da      	uxtb	r2, r3
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	4915      	ldr	r1, [pc, #84]	; (8001be4 <COM_temperatures_ok_d+0xe0>)
 8001b90:	440b      	add	r3, r1
 8001b92:	4619      	mov	r1, r3
 8001b94:	4610      	mov	r0, r2
 8001b96:	f7ff ff29 	bl	80019ec <inc_res>
				&under_temperatures[p]);

		if (over_temperatures[p] > sample_constraint) {
 8001b9a:	4a11      	ldr	r2, [pc, #68]	; (8001be0 <COM_temperatures_ok_d+0xdc>)
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	4413      	add	r3, r2
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	b29b      	uxth	r3, r3
 8001ba4:	883a      	ldrh	r2, [r7, #0]
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d201      	bcs.n	8001bae <COM_temperatures_ok_d+0xaa>
			return 0;
 8001baa:	2300      	movs	r3, #0
 8001bac:	e010      	b.n	8001bd0 <COM_temperatures_ok_d+0xcc>
		}
		if (under_temperatures[p] > sample_constraint) {
 8001bae:	4a0d      	ldr	r2, [pc, #52]	; (8001be4 <COM_temperatures_ok_d+0xe0>)
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	b29b      	uxth	r3, r3
 8001bb8:	883a      	ldrh	r2, [r7, #0]
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d201      	bcs.n	8001bc2 <COM_temperatures_ok_d+0xbe>
			return 0;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	e006      	b.n	8001bd0 <COM_temperatures_ok_d+0xcc>
	for (int p = 0; p < 60; p++) {
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	617b      	str	r3, [r7, #20]
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	2b3b      	cmp	r3, #59	; 0x3b
 8001bcc:	dda9      	ble.n	8001b22 <COM_temperatures_ok_d+0x1e>
		}
	}

	return 1;
 8001bce:	2301      	movs	r3, #1

}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3718      	adds	r7, #24
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bdb0      	pop	{r4, r5, r7, pc}
 8001bd8:	42700000 	.word	0x42700000
 8001bdc:	c1a00000 	.word	0xc1a00000
 8001be0:	20001590 	.word	0x20001590
 8001be4:	200015cc 	.word	0x200015cc

08001be8 <COM_current_ok_d>:
 * @Param	A flag which says whether the value is valid or not (due to corruption, etc.)
 * @Param	The sample constraint. How many consecutive samples may be wrong before an error is triggered
 * @retval	1 if there is no error
 */
uint8_t COM_current_ok_d(double *current, uint8_t valid,
		uint16_t sample_constraint) {
 8001be8:	b5b0      	push	{r4, r5, r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	70fb      	strb	r3, [r7, #3]
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	803b      	strh	r3, [r7, #0]
	const float upper_boundary = 40;
 8001bf8:	4b24      	ldr	r3, [pc, #144]	; (8001c8c <COM_current_ok_d+0xa4>)
 8001bfa:	60fb      	str	r3, [r7, #12]
	const float lower_boundary = -100;
 8001bfc:	4b24      	ldr	r3, [pc, #144]	; (8001c90 <COM_current_ok_d+0xa8>)
 8001bfe:	60bb      	str	r3, [r7, #8]

	inc_res(valid && (current[0] > upper_boundary), &over_current);
 8001c00:	78fb      	ldrb	r3, [r7, #3]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d010      	beq.n	8001c28 <COM_current_ok_d+0x40>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001c0c:	68f8      	ldr	r0, [r7, #12]
 8001c0e:	f7fe fc8d 	bl	800052c <__aeabi_f2d>
 8001c12:	4602      	mov	r2, r0
 8001c14:	460b      	mov	r3, r1
 8001c16:	4620      	mov	r0, r4
 8001c18:	4629      	mov	r1, r5
 8001c1a:	f7fe ff6f 	bl	8000afc <__aeabi_dcmpgt>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <COM_current_ok_d+0x40>
 8001c24:	2301      	movs	r3, #1
 8001c26:	e000      	b.n	8001c2a <COM_current_ok_d+0x42>
 8001c28:	2300      	movs	r3, #0
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	4919      	ldr	r1, [pc, #100]	; (8001c94 <COM_current_ok_d+0xac>)
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7ff fedc 	bl	80019ec <inc_res>
	inc_res(valid && (lower_boundary > current[0]), &under_current);
 8001c34:	78fb      	ldrb	r3, [r7, #3]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d00c      	beq.n	8001c54 <COM_current_ok_d+0x6c>
 8001c3a:	68b8      	ldr	r0, [r7, #8]
 8001c3c:	f7fe fc76 	bl	800052c <__aeabi_f2d>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c46:	f7fe ff59 	bl	8000afc <__aeabi_dcmpgt>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d001      	beq.n	8001c54 <COM_current_ok_d+0x6c>
 8001c50:	2301      	movs	r3, #1
 8001c52:	e000      	b.n	8001c56 <COM_current_ok_d+0x6e>
 8001c54:	2300      	movs	r3, #0
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	490f      	ldr	r1, [pc, #60]	; (8001c98 <COM_current_ok_d+0xb0>)
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7ff fec6 	bl	80019ec <inc_res>

	if (over_current > sample_constraint) {
 8001c60:	4b0c      	ldr	r3, [pc, #48]	; (8001c94 <COM_current_ok_d+0xac>)
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	b29b      	uxth	r3, r3
 8001c66:	883a      	ldrh	r2, [r7, #0]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d201      	bcs.n	8001c70 <COM_current_ok_d+0x88>
		return 0;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	e008      	b.n	8001c82 <COM_current_ok_d+0x9a>
	}
	if (under_current > sample_constraint) {
 8001c70:	4b09      	ldr	r3, [pc, #36]	; (8001c98 <COM_current_ok_d+0xb0>)
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	883a      	ldrh	r2, [r7, #0]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d201      	bcs.n	8001c80 <COM_current_ok_d+0x98>
		return 0;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	e000      	b.n	8001c82 <COM_current_ok_d+0x9a>
	}

	return 1;
 8001c80:	2301      	movs	r3, #1

}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3710      	adds	r7, #16
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bdb0      	pop	{r4, r5, r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	42200000 	.word	0x42200000
 8001c90:	c2c80000 	.word	0xc2c80000
 8001c94:	20001608 	.word	0x20001608
 8001c98:	20001609 	.word	0x20001609

08001c9c <COM_data_valid_ok>:
 * @Param	A single current to check
 * @Param	The sample constraint. How many consecutive samples may be wrong before an error is triggered
 * @retval	1 if there is no error
 */
uint8_t COM_data_valid_ok(uint8_t valid,
		uint16_t sample_constraint) {
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	460a      	mov	r2, r1
 8001ca6:	71fb      	strb	r3, [r7, #7]
 8001ca8:	4613      	mov	r3, r2
 8001caa:	80bb      	strh	r3, [r7, #4]
	inc_res(valid, &invalid);
 8001cac:	79fb      	ldrb	r3, [r7, #7]
 8001cae:	4908      	ldr	r1, [pc, #32]	; (8001cd0 <COM_data_valid_ok+0x34>)
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7ff fe9b 	bl	80019ec <inc_res>

	if (invalid > sample_constraint) {
 8001cb6:	4b06      	ldr	r3, [pc, #24]	; (8001cd0 <COM_data_valid_ok+0x34>)
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	88ba      	ldrh	r2, [r7, #4]
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d201      	bcs.n	8001cc6 <COM_data_valid_ok+0x2a>
		return 0;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	e000      	b.n	8001cc8 <COM_data_valid_ok+0x2c>
	}

	return 1;
 8001cc6:	2301      	movs	r3, #1
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3708      	adds	r7, #8
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	2000160a 	.word	0x2000160a

08001cd4 <FAN_initialize>:
#include "main.h"
#include "programme_data.h"

#include "FAN.h"

void FAN_initialize(TIM_HandleTypeDef *htim) {
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
	const float frequency = 1000;
 8001cdc:	4b10      	ldr	r3, [pc, #64]	; (8001d20 <FAN_initialize+0x4c>)
 8001cde:	60fb      	str	r3, [r7, #12]

	htim->Instance->ARR = 65535 / frequency;
 8001ce0:	eddf 6a10 	vldr	s13, [pc, #64]	; 8001d24 <FAN_initialize+0x50>
 8001ce4:	ed97 7a03 	vldr	s14, [r7, #12]
 8001ce8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001cf4:	ee17 2a90 	vmov	r2, s15
 8001cf8:	62da      	str	r2, [r3, #44]	; 0x2c
	htim->Instance->CCR3 = htim->Instance->ARR / 2;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	0852      	lsrs	r2, r2, #1
 8001d06:	63da      	str	r2, [r3, #60]	; 0x3c
	htim->Instance->CNT = 0;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_PWM_Start(htim, TIM_CHANNEL_3);
 8001d10:	2108      	movs	r1, #8
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f012 fa4a 	bl	80141ac <HAL_TIM_PWM_Start>

}
 8001d18:	bf00      	nop
 8001d1a:	3710      	adds	r7, #16
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	447a0000 	.word	0x447a0000
 8001d24:	477fff00 	.word	0x477fff00

08001d28 <FAN_duty_cycle>:

void FAN_duty_cycle(TIM_HandleTypeDef *htim, float duty_cycle) {
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	ed87 0a00 	vstr	s0, [r7]
	if (duty_cycle < 0) {
 8001d34:	edd7 7a00 	vldr	s15, [r7]
 8001d38:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d40:	d502      	bpl.n	8001d48 <FAN_duty_cycle+0x20>
		duty_cycle = 0;
 8001d42:	f04f 0300 	mov.w	r3, #0
 8001d46:	603b      	str	r3, [r7, #0]
	}
	if (100 < duty_cycle) {
 8001d48:	edd7 7a00 	vldr	s15, [r7]
 8001d4c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001da0 <FAN_duty_cycle+0x78>
 8001d50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d58:	dd01      	ble.n	8001d5e <FAN_duty_cycle+0x36>
		duty_cycle = 100;
 8001d5a:	4b12      	ldr	r3, [pc, #72]	; (8001da4 <FAN_duty_cycle+0x7c>)
 8001d5c:	603b      	str	r3, [r7, #0]
	}

	htim->Instance->CCR3 = (duty_cycle / 100) * htim->Instance->ARR;
 8001d5e:	edd7 7a00 	vldr	s15, [r7]
 8001d62:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8001da0 <FAN_duty_cycle+0x78>
 8001d66:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d70:	ee07 3a90 	vmov	s15, r3
 8001d74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d84:	ee17 2a90 	vmov	r2, s15
 8001d88:	63da      	str	r2, [r3, #60]	; 0x3c
	htim->Instance->CNT = 0;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001d92:	bf00      	nop
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	42c80000 	.word	0x42c80000
 8001da4:	42c80000 	.word	0x42c80000

08001da8 <HAL_TIM_IC_CaptureCallback>:
#include "programme_data.h"
#include "programme_queues.h"

static IMD_t IMD;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b086      	sub	sp, #24
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
	float ante = 0;
 8001db0:	f04f 0300 	mov.w	r3, #0
 8001db4:	617b      	str	r3, [r7, #20]
	float conq = 0;
 8001db6:	f04f 0300 	mov.w	r3, #0
 8001dba:	613b      	str	r3, [r7, #16]

	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	60fb      	str	r3, [r7, #12]

	if (htim->Instance == TIM2) {
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dc8:	d13c      	bne.n	8001e44 <HAL_TIM_IC_CaptureCallback+0x9c>
		ante = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8001dca:	2104      	movs	r1, #4
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f013 f883 	bl	8014ed8 <HAL_TIM_ReadCapturedValue>
 8001dd2:	ee07 0a90 	vmov	s15, r0
 8001dd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001dda:	edc7 7a05 	vstr	s15, [r7, #20]
		conq = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001dde:	2100      	movs	r1, #0
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f013 f879 	bl	8014ed8 <HAL_TIM_ReadCapturedValue>
 8001de6:	ee07 0a90 	vmov	s15, r0
 8001dea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001dee:	edc7 7a04 	vstr	s15, [r7, #16]

		IMD.duty_cycle = ante / conq;
 8001df2:	edd7 6a05 	vldr	s13, [r7, #20]
 8001df6:	ed97 7a04 	vldr	s14, [r7, #16]
 8001dfa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001dfe:	4b13      	ldr	r3, [pc, #76]	; (8001e4c <HAL_TIM_IC_CaptureCallback+0xa4>)
 8001e00:	edc3 7a00 	vstr	s15, [r3]
		IMD.frequency = 100000000 / (conq + 1);
 8001e04:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e08:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001e0c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001e10:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8001e50 <HAL_TIM_IC_CaptureCallback+0xa8>
 8001e14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e18:	4b0c      	ldr	r3, [pc, #48]	; (8001e4c <HAL_TIM_IC_CaptureCallback+0xa4>)
 8001e1a:	edc3 7a01 	vstr	s15, [r3, #4]

		xQueueOverwriteFromISR(IMD_queue, &IMD, &xHigherPriorityTaskWoken);
 8001e1e:	4b0d      	ldr	r3, [pc, #52]	; (8001e54 <HAL_TIM_IC_CaptureCallback+0xac>)
 8001e20:	6818      	ldr	r0, [r3, #0]
 8001e22:	f107 020c 	add.w	r2, r7, #12
 8001e26:	2302      	movs	r3, #2
 8001e28:	4908      	ldr	r1, [pc, #32]	; (8001e4c <HAL_TIM_IC_CaptureCallback+0xa4>)
 8001e2a:	f014 fb19 	bl	8016460 <xQueueGenericSendFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d007      	beq.n	8001e44 <HAL_TIM_IC_CaptureCallback+0x9c>
 8001e34:	4b08      	ldr	r3, [pc, #32]	; (8001e58 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8001e36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e3a:	601a      	str	r2, [r3, #0]
 8001e3c:	f3bf 8f4f 	dsb	sy
 8001e40:	f3bf 8f6f 	isb	sy
	}
}
 8001e44:	bf00      	nop
 8001e46:	3718      	adds	r7, #24
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	2000160c 	.word	0x2000160c
 8001e50:	4cbebc20 	.word	0x4cbebc20
 8001e54:	2001b574 	.word	0x2001b574
 8001e58:	e000ed04 	.word	0xe000ed04

08001e5c <initialize_IMD>:

void initialize_IMD(TIM_HandleTypeDef *htim) {
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
	htim->Instance->ARR = 42000000;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a0b      	ldr	r2, [pc, #44]	; (8001e98 <initialize_IMD+0x3c>)
 8001e6a:	62da      	str	r2, [r3, #44]	; 0x2c

	if (HAL_TIM_IC_Start_IT(htim, TIM_CHANNEL_1) != HAL_OK) {
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f012 fb9a 	bl	80145a8 <HAL_TIM_IC_Start_IT>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <initialize_IMD+0x22>
		Error_Handler();
 8001e7a:	f001 fdff 	bl	8003a7c <Error_Handler>
	}

	if (HAL_TIM_IC_Start(htim, TIM_CHANNEL_2) != HAL_OK) {
 8001e7e:	2104      	movs	r1, #4
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f012 fab5 	bl	80143f0 <HAL_TIM_IC_Start>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d001      	beq.n	8001e90 <initialize_IMD+0x34>
		Error_Handler();
 8001e8c:	f001 fdf6 	bl	8003a7c <Error_Handler>
	}
}
 8001e90:	bf00      	nop
 8001e92:	3708      	adds	r7, #8
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	0280de80 	.word	0x0280de80

08001e9c <PID_progress>:
/*
 * @brief	Progress the PID
 * @param	Input at current timestep
 * @retval	1 if it went through, 0 else
 */
uint8_t PID_progress(PID_t *ctrl, float input) {
 8001e9c:	b480      	push	{r7}
 8001e9e:	b087      	sub	sp, #28
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	ed87 0a00 	vstr	s0, [r7]
	ctrl->input = input;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	683a      	ldr	r2, [r7, #0]
 8001eac:	605a      	str	r2, [r3, #4]
	ctrl->error = ctrl->input - ctrl->reference;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	ed93 7a01 	vldr	s14, [r3, #4]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	edd3 7a03 	vldr	s15, [r3, #12]
 8001eba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	edc3 7a00 	vstr	s15, [r3]

	ctrl->output = arm_pid_f32(&(ctrl->controller), ctrl->error);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f103 0218 	add.w	r2, r3, #24
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	617a      	str	r2, [r7, #20]
 8001ed0:	613b      	str	r3, [r7, #16]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	ed93 7a00 	vldr	s14, [r3]
 8001ed8:	edd7 7a04 	vldr	s15, [r7, #16]
 8001edc:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	edd3 6a01 	vldr	s13, [r3, #4]
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	edd3 7a03 	vldr	s15, [r3, #12]
 8001eec:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8001ef0:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	edd3 6a02 	vldr	s13, [r3, #8]
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	edd3 7a04 	vldr	s15, [r3, #16]
 8001f00:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f04:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8001f0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f12:	edc7 7a03 	vstr	s15, [r7, #12]

    /* Update state */
    S->state[1] = S->state[0];
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	68da      	ldr	r2, [r3, #12]
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	693a      	ldr	r2, [r7, #16]
 8001f22:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	68fa      	ldr	r2, [r7, #12]
 8001f28:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8001f2a:	68fa      	ldr	r2, [r7, #12]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	609a      	str	r2, [r3, #8]

	if (ctrl->output < ctrl->output_lower_bound) {
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	ed93 7a02 	vldr	s14, [r3, #8]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	edd3 7a05 	vldr	s15, [r3, #20]
 8001f3c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f44:	d503      	bpl.n	8001f4e <PID_progress+0xb2>
		ctrl->output = ctrl->output_lower_bound;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	695a      	ldr	r2, [r3, #20]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	609a      	str	r2, [r3, #8]
	}

	if (ctrl->output_upper_bound < ctrl->output) {
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	ed93 7a04 	vldr	s14, [r3, #16]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	edd3 7a02 	vldr	s15, [r3, #8]
 8001f5a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f62:	d503      	bpl.n	8001f6c <PID_progress+0xd0>
		ctrl->output = ctrl->output_upper_bound;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	691a      	ldr	r2, [r3, #16]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	609a      	str	r2, [r3, #8]
	}

	return 1;
 8001f6c:	2301      	movs	r3, #1
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	371c      	adds	r7, #28
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr

08001f7a <PID_initialize>:
 * @param	output upper bound, ex 100 for PWM
 * @retval	1 if it went through, 0 else
 */
uint8_t PID_initialize(PID_t *ctrl, float reference,
		float proportional, float integral, float derivative,
		float output_lower_bound, float output_upper_bound) {
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	b088      	sub	sp, #32
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	61f8      	str	r0, [r7, #28]
 8001f82:	ed87 0a06 	vstr	s0, [r7, #24]
 8001f86:	edc7 0a05 	vstr	s1, [r7, #20]
 8001f8a:	ed87 1a04 	vstr	s2, [r7, #16]
 8001f8e:	edc7 1a03 	vstr	s3, [r7, #12]
 8001f92:	ed87 2a02 	vstr	s4, [r7, #8]
 8001f96:	edc7 2a01 	vstr	s5, [r7, #4]
	if (output_upper_bound < output_lower_bound) {
 8001f9a:	ed97 7a01 	vldr	s14, [r7, #4]
 8001f9e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001fa2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001fa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001faa:	d501      	bpl.n	8001fb0 <PID_initialize+0x36>
		return 0;
 8001fac:	2300      	movs	r3, #0
 8001fae:	e024      	b.n	8001ffa <PID_initialize+0x80>
	}

	ctrl->error = 0.;
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	f04f 0200 	mov.w	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]
	ctrl->input = 0.;
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	f04f 0200 	mov.w	r2, #0
 8001fbe:	605a      	str	r2, [r3, #4]
	ctrl->output = 0.;
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	f04f 0200 	mov.w	r2, #0
 8001fc6:	609a      	str	r2, [r3, #8]
	ctrl->reference = reference;
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	69ba      	ldr	r2, [r7, #24]
 8001fcc:	60da      	str	r2, [r3, #12]

	ctrl->output_upper_bound = output_upper_bound;
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	687a      	ldr	r2, [r7, #4]
 8001fd2:	611a      	str	r2, [r3, #16]
	ctrl->output_lower_bound = output_lower_bound;
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	68ba      	ldr	r2, [r7, #8]
 8001fd8:	615a      	str	r2, [r3, #20]

	ctrl->controller.Kp = proportional;
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	697a      	ldr	r2, [r7, #20]
 8001fde:	631a      	str	r2, [r3, #48]	; 0x30
	ctrl->controller.Ki = integral;
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	693a      	ldr	r2, [r7, #16]
 8001fe4:	635a      	str	r2, [r3, #52]	; 0x34
	ctrl->controller.Kd = derivative;
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	68fa      	ldr	r2, [r7, #12]
 8001fea:	639a      	str	r2, [r3, #56]	; 0x38

	arm_pid_init_f32(&(ctrl->controller), 1);
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	3318      	adds	r3, #24
 8001ff0:	2101      	movs	r1, #1
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f018 f8d2 	bl	801a19c <arm_pid_init_f32>

	return 1;
 8001ff8:	2301      	movs	r3, #1
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3720      	adds	r7, #32
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
	...

08002004 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8002008:	4803      	ldr	r0, [pc, #12]	; (8002018 <_cbSendSystemDesc+0x14>)
 800200a:	f017 fe47 	bl	8019c9c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800200e:	4803      	ldr	r0, [pc, #12]	; (800201c <_cbSendSystemDesc+0x18>)
 8002010:	f017 fe44 	bl	8019c9c <SEGGER_SYSVIEW_SendSysDesc>
}
 8002014:	bf00      	nop
 8002016:	bd80      	pop	{r7, pc}
 8002018:	0801ae58 	.word	0x0801ae58
 800201c:	0801ae84 	.word	0x0801ae84

08002020 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8002024:	4b06      	ldr	r3, [pc, #24]	; (8002040 <SEGGER_SYSVIEW_Conf+0x20>)
 8002026:	6818      	ldr	r0, [r3, #0]
 8002028:	4b05      	ldr	r3, [pc, #20]	; (8002040 <SEGGER_SYSVIEW_Conf+0x20>)
 800202a:	6819      	ldr	r1, [r3, #0]
 800202c:	4b05      	ldr	r3, [pc, #20]	; (8002044 <SEGGER_SYSVIEW_Conf+0x24>)
 800202e:	4a06      	ldr	r2, [pc, #24]	; (8002048 <SEGGER_SYSVIEW_Conf+0x28>)
 8002030:	f017 f9b2 	bl	8019398 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8002034:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8002038:	f017 f9f2 	bl	8019420 <SEGGER_SYSVIEW_SetRAMBase>
}
 800203c:	bf00      	nop
 800203e:	bd80      	pop	{r7, pc}
 8002040:	20000004 	.word	0x20000004
 8002044:	08002005 	.word	0x08002005
 8002048:	0801afac 	.word	0x0801afac

0800204c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 800204c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800204e:	b085      	sub	sp, #20
 8002050:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8002052:	2300      	movs	r3, #0
 8002054:	607b      	str	r3, [r7, #4]
 8002056:	e048      	b.n	80020ea <_cbSendTaskList+0x9e>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
 8002058:	4929      	ldr	r1, [pc, #164]	; (8002100 <_cbSendTaskList+0xb4>)
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	4613      	mov	r3, r2
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	4413      	add	r3, r2
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	440b      	add	r3, r1
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4618      	mov	r0, r3
 800206a:	f015 fce3 	bl	8017a34 <uxTaskGetStackHighWaterMark>
 800206e:	4601      	mov	r1, r0
 8002070:	4823      	ldr	r0, [pc, #140]	; (8002100 <_cbSendTaskList+0xb4>)
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	4613      	mov	r3, r2
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	4413      	add	r3, r2
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	4403      	add	r3, r0
 800207e:	3310      	adds	r3, #16
 8002080:	6019      	str	r1, [r3, #0]
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8002082:	491f      	ldr	r1, [pc, #124]	; (8002100 <_cbSendTaskList+0xb4>)
 8002084:	687a      	ldr	r2, [r7, #4]
 8002086:	4613      	mov	r3, r2
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	4413      	add	r3, r2
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	440b      	add	r3, r1
 8002090:	6818      	ldr	r0, [r3, #0]
 8002092:	491b      	ldr	r1, [pc, #108]	; (8002100 <_cbSendTaskList+0xb4>)
 8002094:	687a      	ldr	r2, [r7, #4]
 8002096:	4613      	mov	r3, r2
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	4413      	add	r3, r2
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	440b      	add	r3, r1
 80020a0:	3304      	adds	r3, #4
 80020a2:	6819      	ldr	r1, [r3, #0]
 80020a4:	4c16      	ldr	r4, [pc, #88]	; (8002100 <_cbSendTaskList+0xb4>)
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	4613      	mov	r3, r2
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	4413      	add	r3, r2
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	4423      	add	r3, r4
 80020b2:	3308      	adds	r3, #8
 80020b4:	681c      	ldr	r4, [r3, #0]
 80020b6:	4d12      	ldr	r5, [pc, #72]	; (8002100 <_cbSendTaskList+0xb4>)
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	4613      	mov	r3, r2
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	4413      	add	r3, r2
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	442b      	add	r3, r5
 80020c4:	330c      	adds	r3, #12
 80020c6:	681d      	ldr	r5, [r3, #0]
 80020c8:	4e0d      	ldr	r6, [pc, #52]	; (8002100 <_cbSendTaskList+0xb4>)
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	4613      	mov	r3, r2
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	4413      	add	r3, r2
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	4433      	add	r3, r6
 80020d6:	3310      	adds	r3, #16
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	9300      	str	r3, [sp, #0]
 80020dc:	462b      	mov	r3, r5
 80020de:	4622      	mov	r2, r4
 80020e0:	f000 f8b6 	bl	8002250 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	3301      	adds	r3, #1
 80020e8:	607b      	str	r3, [r7, #4]
 80020ea:	4b06      	ldr	r3, [pc, #24]	; (8002104 <_cbSendTaskList+0xb8>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d3b1      	bcc.n	8002058 <_cbSendTaskList+0xc>
  }
}
 80020f4:	bf00      	nop
 80020f6:	bf00      	nop
 80020f8:	370c      	adds	r7, #12
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020fe:	bf00      	nop
 8002100:	20001614 	.word	0x20001614
 8002104:	20001754 	.word	0x20001754

08002108 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8002108:	b5b0      	push	{r4, r5, r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 800210e:	f015 f969 	bl	80173e4 <xTaskGetTickCountFromISR>
 8002112:	4603      	mov	r3, r0
 8002114:	461a      	mov	r2, r3
 8002116:	f04f 0300 	mov.w	r3, #0
 800211a:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 800211e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002122:	4602      	mov	r2, r0
 8002124:	460b      	mov	r3, r1
 8002126:	f04f 0400 	mov.w	r4, #0
 800212a:	f04f 0500 	mov.w	r5, #0
 800212e:	015d      	lsls	r5, r3, #5
 8002130:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8002134:	0154      	lsls	r4, r2, #5
 8002136:	4622      	mov	r2, r4
 8002138:	462b      	mov	r3, r5
 800213a:	1a12      	subs	r2, r2, r0
 800213c:	eb63 0301 	sbc.w	r3, r3, r1
 8002140:	f04f 0400 	mov.w	r4, #0
 8002144:	f04f 0500 	mov.w	r5, #0
 8002148:	009d      	lsls	r5, r3, #2
 800214a:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 800214e:	0094      	lsls	r4, r2, #2
 8002150:	4622      	mov	r2, r4
 8002152:	462b      	mov	r3, r5
 8002154:	1812      	adds	r2, r2, r0
 8002156:	eb41 0303 	adc.w	r3, r1, r3
 800215a:	f04f 0000 	mov.w	r0, #0
 800215e:	f04f 0100 	mov.w	r1, #0
 8002162:	00d9      	lsls	r1, r3, #3
 8002164:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002168:	00d0      	lsls	r0, r2, #3
 800216a:	4602      	mov	r2, r0
 800216c:	460b      	mov	r3, r1
 800216e:	e9c7 2300 	strd	r2, r3, [r7]
  return Time;
 8002172:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8002176:	4610      	mov	r0, r2
 8002178:	4619      	mov	r1, r3
 800217a:	3708      	adds	r7, #8
 800217c:	46bd      	mov	sp, r7
 800217e:	bdb0      	pop	{r4, r5, r7, pc}

08002180 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8002180:	b580      	push	{r7, lr}
 8002182:	b086      	sub	sp, #24
 8002184:	af02      	add	r7, sp, #8
 8002186:	60f8      	str	r0, [r7, #12]
 8002188:	60b9      	str	r1, [r7, #8]
 800218a:	607a      	str	r2, [r7, #4]
 800218c:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800218e:	2205      	movs	r2, #5
 8002190:	492b      	ldr	r1, [pc, #172]	; (8002240 <SYSVIEW_AddTask+0xc0>)
 8002192:	68b8      	ldr	r0, [r7, #8]
 8002194:	f018 f84c 	bl	801a230 <memcmp>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d04b      	beq.n	8002236 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800219e:	4b29      	ldr	r3, [pc, #164]	; (8002244 <SYSVIEW_AddTask+0xc4>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2b0f      	cmp	r3, #15
 80021a4:	d903      	bls.n	80021ae <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80021a6:	4828      	ldr	r0, [pc, #160]	; (8002248 <SYSVIEW_AddTask+0xc8>)
 80021a8:	f017 ff9c 	bl	801a0e4 <SEGGER_SYSVIEW_Warn>
    return;
 80021ac:	e044      	b.n	8002238 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80021ae:	4b25      	ldr	r3, [pc, #148]	; (8002244 <SYSVIEW_AddTask+0xc4>)
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	4926      	ldr	r1, [pc, #152]	; (800224c <SYSVIEW_AddTask+0xcc>)
 80021b4:	4613      	mov	r3, r2
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	4413      	add	r3, r2
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	440b      	add	r3, r1
 80021be:	68fa      	ldr	r2, [r7, #12]
 80021c0:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80021c2:	4b20      	ldr	r3, [pc, #128]	; (8002244 <SYSVIEW_AddTask+0xc4>)
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	4921      	ldr	r1, [pc, #132]	; (800224c <SYSVIEW_AddTask+0xcc>)
 80021c8:	4613      	mov	r3, r2
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	4413      	add	r3, r2
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	440b      	add	r3, r1
 80021d2:	3304      	adds	r3, #4
 80021d4:	68ba      	ldr	r2, [r7, #8]
 80021d6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80021d8:	4b1a      	ldr	r3, [pc, #104]	; (8002244 <SYSVIEW_AddTask+0xc4>)
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	491b      	ldr	r1, [pc, #108]	; (800224c <SYSVIEW_AddTask+0xcc>)
 80021de:	4613      	mov	r3, r2
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	4413      	add	r3, r2
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	440b      	add	r3, r1
 80021e8:	3308      	adds	r3, #8
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80021ee:	4b15      	ldr	r3, [pc, #84]	; (8002244 <SYSVIEW_AddTask+0xc4>)
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	4916      	ldr	r1, [pc, #88]	; (800224c <SYSVIEW_AddTask+0xcc>)
 80021f4:	4613      	mov	r3, r2
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	4413      	add	r3, r2
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	440b      	add	r3, r1
 80021fe:	330c      	adds	r3, #12
 8002200:	683a      	ldr	r2, [r7, #0]
 8002202:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8002204:	4b0f      	ldr	r3, [pc, #60]	; (8002244 <SYSVIEW_AddTask+0xc4>)
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	4910      	ldr	r1, [pc, #64]	; (800224c <SYSVIEW_AddTask+0xcc>)
 800220a:	4613      	mov	r3, r2
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	4413      	add	r3, r2
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	440b      	add	r3, r1
 8002214:	3310      	adds	r3, #16
 8002216:	69ba      	ldr	r2, [r7, #24]
 8002218:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800221a:	4b0a      	ldr	r3, [pc, #40]	; (8002244 <SYSVIEW_AddTask+0xc4>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	3301      	adds	r3, #1
 8002220:	4a08      	ldr	r2, [pc, #32]	; (8002244 <SYSVIEW_AddTask+0xc4>)
 8002222:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8002224:	69bb      	ldr	r3, [r7, #24]
 8002226:	9300      	str	r3, [sp, #0]
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	68b9      	ldr	r1, [r7, #8]
 800222e:	68f8      	ldr	r0, [r7, #12]
 8002230:	f000 f80e 	bl	8002250 <SYSVIEW_SendTaskInfo>
 8002234:	e000      	b.n	8002238 <SYSVIEW_AddTask+0xb8>
    return;
 8002236:	bf00      	nop

}
 8002238:	3710      	adds	r7, #16
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	0801ae94 	.word	0x0801ae94
 8002244:	20001754 	.word	0x20001754
 8002248:	0801ae9c 	.word	0x0801ae9c
 800224c:	20001614 	.word	0x20001614

08002250 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8002250:	b580      	push	{r7, lr}
 8002252:	b08a      	sub	sp, #40	; 0x28
 8002254:	af00      	add	r7, sp, #0
 8002256:	60f8      	str	r0, [r7, #12]
 8002258:	60b9      	str	r1, [r7, #8]
 800225a:	607a      	str	r2, [r7, #4]
 800225c:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800225e:	f107 0314 	add.w	r3, r7, #20
 8002262:	2214      	movs	r2, #20
 8002264:	2100      	movs	r1, #0
 8002266:	4618      	mov	r0, r3
 8002268:	f017 fffe 	bl	801a268 <memset>
  TaskInfo.TaskID     = TaskID;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 800227c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800227e:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8002280:	f107 0314 	add.w	r3, r7, #20
 8002284:	4618      	mov	r0, r3
 8002286:	f017 fc11 	bl	8019aac <SEGGER_SYSVIEW_SendTaskInfo>
}
 800228a:	bf00      	nop
 800228c:	3728      	adds	r7, #40	; 0x28
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
	...

08002294 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800229a:	463b      	mov	r3, r7
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]
 80022a0:	605a      	str	r2, [r3, #4]
 80022a2:	609a      	str	r2, [r3, #8]
 80022a4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80022a6:	4b37      	ldr	r3, [pc, #220]	; (8002384 <MX_ADC1_Init+0xf0>)
 80022a8:	4a37      	ldr	r2, [pc, #220]	; (8002388 <MX_ADC1_Init+0xf4>)
 80022aa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80022ac:	4b35      	ldr	r3, [pc, #212]	; (8002384 <MX_ADC1_Init+0xf0>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80022b2:	4b34      	ldr	r3, [pc, #208]	; (8002384 <MX_ADC1_Init+0xf0>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80022b8:	4b32      	ldr	r3, [pc, #200]	; (8002384 <MX_ADC1_Init+0xf0>)
 80022ba:	2201      	movs	r2, #1
 80022bc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80022be:	4b31      	ldr	r3, [pc, #196]	; (8002384 <MX_ADC1_Init+0xf0>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80022c4:	4b2f      	ldr	r3, [pc, #188]	; (8002384 <MX_ADC1_Init+0xf0>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80022cc:	4b2d      	ldr	r3, [pc, #180]	; (8002384 <MX_ADC1_Init+0xf0>)
 80022ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80022d4:	4b2b      	ldr	r3, [pc, #172]	; (8002384 <MX_ADC1_Init+0xf0>)
 80022d6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80022da:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80022dc:	4b29      	ldr	r3, [pc, #164]	; (8002384 <MX_ADC1_Init+0xf0>)
 80022de:	2200      	movs	r2, #0
 80022e0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 80022e2:	4b28      	ldr	r3, [pc, #160]	; (8002384 <MX_ADC1_Init+0xf0>)
 80022e4:	2204      	movs	r2, #4
 80022e6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80022e8:	4b26      	ldr	r3, [pc, #152]	; (8002384 <MX_ADC1_Init+0xf0>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80022f0:	4b24      	ldr	r3, [pc, #144]	; (8002384 <MX_ADC1_Init+0xf0>)
 80022f2:	2201      	movs	r2, #1
 80022f4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80022f6:	4823      	ldr	r0, [pc, #140]	; (8002384 <MX_ADC1_Init+0xf0>)
 80022f8:	f00e fa94 	bl	8010824 <HAL_ADC_Init>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8002302:	f001 fbbb 	bl	8003a7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002306:	2301      	movs	r3, #1
 8002308:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800230a:	2301      	movs	r3, #1
 800230c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 800230e:	2302      	movs	r3, #2
 8002310:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002312:	463b      	mov	r3, r7
 8002314:	4619      	mov	r1, r3
 8002316:	481b      	ldr	r0, [pc, #108]	; (8002384 <MX_ADC1_Init+0xf0>)
 8002318:	f00e fd36 	bl	8010d88 <HAL_ADC_ConfigChannel>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d001      	beq.n	8002326 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8002322:	f001 fbab 	bl	8003a7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002326:	2302      	movs	r3, #2
 8002328:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800232a:	2302      	movs	r3, #2
 800232c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800232e:	463b      	mov	r3, r7
 8002330:	4619      	mov	r1, r3
 8002332:	4814      	ldr	r0, [pc, #80]	; (8002384 <MX_ADC1_Init+0xf0>)
 8002334:	f00e fd28 	bl	8010d88 <HAL_ADC_ConfigChannel>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d001      	beq.n	8002342 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800233e:	f001 fb9d 	bl	8003a7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002342:	2303      	movs	r3, #3
 8002344:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8002346:	2303      	movs	r3, #3
 8002348:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800234a:	463b      	mov	r3, r7
 800234c:	4619      	mov	r1, r3
 800234e:	480d      	ldr	r0, [pc, #52]	; (8002384 <MX_ADC1_Init+0xf0>)
 8002350:	f00e fd1a 	bl	8010d88 <HAL_ADC_ConfigChannel>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d001      	beq.n	800235e <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 800235a:	f001 fb8f 	bl	8003a7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800235e:	2304      	movs	r3, #4
 8002360:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8002362:	2304      	movs	r3, #4
 8002364:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002366:	463b      	mov	r3, r7
 8002368:	4619      	mov	r1, r3
 800236a:	4806      	ldr	r0, [pc, #24]	; (8002384 <MX_ADC1_Init+0xf0>)
 800236c:	f00e fd0c 	bl	8010d88 <HAL_ADC_ConfigChannel>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d001      	beq.n	800237a <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 8002376:	f001 fb81 	bl	8003a7c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800237a:	bf00      	nop
 800237c:	3710      	adds	r7, #16
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	2001b594 	.word	0x2001b594
 8002388:	40012000 	.word	0x40012000

0800238c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b08a      	sub	sp, #40	; 0x28
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002394:	f107 0314 	add.w	r3, r7, #20
 8002398:	2200      	movs	r2, #0
 800239a:	601a      	str	r2, [r3, #0]
 800239c:	605a      	str	r2, [r3, #4]
 800239e:	609a      	str	r2, [r3, #8]
 80023a0:	60da      	str	r2, [r3, #12]
 80023a2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a33      	ldr	r2, [pc, #204]	; (8002478 <HAL_ADC_MspInit+0xec>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d15f      	bne.n	800246e <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80023ae:	2300      	movs	r3, #0
 80023b0:	613b      	str	r3, [r7, #16]
 80023b2:	4b32      	ldr	r3, [pc, #200]	; (800247c <HAL_ADC_MspInit+0xf0>)
 80023b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023b6:	4a31      	ldr	r2, [pc, #196]	; (800247c <HAL_ADC_MspInit+0xf0>)
 80023b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023bc:	6453      	str	r3, [r2, #68]	; 0x44
 80023be:	4b2f      	ldr	r3, [pc, #188]	; (800247c <HAL_ADC_MspInit+0xf0>)
 80023c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c6:	613b      	str	r3, [r7, #16]
 80023c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ca:	2300      	movs	r3, #0
 80023cc:	60fb      	str	r3, [r7, #12]
 80023ce:	4b2b      	ldr	r3, [pc, #172]	; (800247c <HAL_ADC_MspInit+0xf0>)
 80023d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d2:	4a2a      	ldr	r2, [pc, #168]	; (800247c <HAL_ADC_MspInit+0xf0>)
 80023d4:	f043 0301 	orr.w	r3, r3, #1
 80023d8:	6313      	str	r3, [r2, #48]	; 0x30
 80023da:	4b28      	ldr	r3, [pc, #160]	; (800247c <HAL_ADC_MspInit+0xf0>)
 80023dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023de:	f003 0301 	and.w	r3, r3, #1
 80023e2:	60fb      	str	r3, [r7, #12]
 80023e4:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = precharge_resistor_temperature_Pin|fuse_resistor_temperature_Pin|aux_temp1_Pin|aux_temp2_Pin;
 80023e6:	231e      	movs	r3, #30
 80023e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023ea:	2303      	movs	r3, #3
 80023ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ee:	2300      	movs	r3, #0
 80023f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023f2:	f107 0314 	add.w	r3, r7, #20
 80023f6:	4619      	mov	r1, r3
 80023f8:	4821      	ldr	r0, [pc, #132]	; (8002480 <HAL_ADC_MspInit+0xf4>)
 80023fa:	f010 f981 	bl	8012700 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80023fe:	4b21      	ldr	r3, [pc, #132]	; (8002484 <HAL_ADC_MspInit+0xf8>)
 8002400:	4a21      	ldr	r2, [pc, #132]	; (8002488 <HAL_ADC_MspInit+0xfc>)
 8002402:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002404:	4b1f      	ldr	r3, [pc, #124]	; (8002484 <HAL_ADC_MspInit+0xf8>)
 8002406:	2200      	movs	r2, #0
 8002408:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800240a:	4b1e      	ldr	r3, [pc, #120]	; (8002484 <HAL_ADC_MspInit+0xf8>)
 800240c:	2200      	movs	r2, #0
 800240e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002410:	4b1c      	ldr	r3, [pc, #112]	; (8002484 <HAL_ADC_MspInit+0xf8>)
 8002412:	2200      	movs	r2, #0
 8002414:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002416:	4b1b      	ldr	r3, [pc, #108]	; (8002484 <HAL_ADC_MspInit+0xf8>)
 8002418:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800241c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800241e:	4b19      	ldr	r3, [pc, #100]	; (8002484 <HAL_ADC_MspInit+0xf8>)
 8002420:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002424:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002426:	4b17      	ldr	r3, [pc, #92]	; (8002484 <HAL_ADC_MspInit+0xf8>)
 8002428:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800242c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800242e:	4b15      	ldr	r3, [pc, #84]	; (8002484 <HAL_ADC_MspInit+0xf8>)
 8002430:	2200      	movs	r2, #0
 8002432:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8002434:	4b13      	ldr	r3, [pc, #76]	; (8002484 <HAL_ADC_MspInit+0xf8>)
 8002436:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800243a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800243c:	4b11      	ldr	r3, [pc, #68]	; (8002484 <HAL_ADC_MspInit+0xf8>)
 800243e:	2200      	movs	r2, #0
 8002440:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002442:	4810      	ldr	r0, [pc, #64]	; (8002484 <HAL_ADC_MspInit+0xf8>)
 8002444:	f00f fdec 	bl	8012020 <HAL_DMA_Init>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800244e:	f001 fb15 	bl	8003a7c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4a0b      	ldr	r2, [pc, #44]	; (8002484 <HAL_ADC_MspInit+0xf8>)
 8002456:	639a      	str	r2, [r3, #56]	; 0x38
 8002458:	4a0a      	ldr	r2, [pc, #40]	; (8002484 <HAL_ADC_MspInit+0xf8>)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 800245e:	2200      	movs	r2, #0
 8002460:	2105      	movs	r1, #5
 8002462:	2012      	movs	r0, #18
 8002464:	f00f fdb2 	bl	8011fcc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002468:	2012      	movs	r0, #18
 800246a:	f00f fdcb 	bl	8012004 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800246e:	bf00      	nop
 8002470:	3728      	adds	r7, #40	; 0x28
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	40012000 	.word	0x40012000
 800247c:	40023800 	.word	0x40023800
 8002480:	40020000 	.word	0x40020000
 8002484:	2001b5dc 	.word	0x2001b5dc
 8002488:	40026410 	.word	0x40026410
 800248c:	00000000 	.word	0x00000000

08002490 <interpret_ADC_buffer>:
/* USER CODE BEGIN 1 */

uint16_t ADC_FLAG = 1;

void interpret_ADC_buffer(temperatures_t *temperatures,
		uint16_t *adcBuffer, uint8_t L) {
 8002490:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002494:	b08e      	sub	sp, #56	; 0x38
 8002496:	af00      	add	r7, sp, #0
 8002498:	60f8      	str	r0, [r7, #12]
 800249a:	60b9      	str	r1, [r7, #8]
 800249c:	4613      	mov	r3, r2
 800249e:	71fb      	strb	r3, [r7, #7]
	uint16_t i, j;
	float adcAverageBuffer[4];

	float beta = 3500;
 80024a0:	4bdb      	ldr	r3, [pc, #876]	; (8002810 <interpret_ADC_buffer+0x380>)
 80024a2:	633b      	str	r3, [r7, #48]	; 0x30
	float temp = 25 + 273.15;
 80024a4:	4bdb      	ldr	r3, [pc, #876]	; (8002814 <interpret_ADC_buffer+0x384>)
 80024a6:	62fb      	str	r3, [r7, #44]	; 0x2c
	float R0 = 10000 * exp(-beta / temp);
 80024a8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80024ac:	eeb1 7a67 	vneg.f32	s14, s15
 80024b0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80024b4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80024b8:	ee16 0a90 	vmov	r0, s13
 80024bc:	f7fe f836 	bl	800052c <__aeabi_f2d>
 80024c0:	4602      	mov	r2, r0
 80024c2:	460b      	mov	r3, r1
 80024c4:	ec43 2b10 	vmov	d0, r2, r3
 80024c8:	f017 ffee 	bl	801a4a8 <exp>
 80024cc:	ec51 0b10 	vmov	r0, r1, d0
 80024d0:	a3cb      	add	r3, pc, #812	; (adr r3, 8002800 <interpret_ADC_buffer+0x370>)
 80024d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024d6:	f7fe f881 	bl	80005dc <__aeabi_dmul>
 80024da:	4602      	mov	r2, r0
 80024dc:	460b      	mov	r3, r1
 80024de:	4610      	mov	r0, r2
 80024e0:	4619      	mov	r1, r3
 80024e2:	f7fe fb73 	bl	8000bcc <__aeabi_d2f>
 80024e6:	4603      	mov	r3, r0
 80024e8:	62bb      	str	r3, [r7, #40]	; 0x28
	float R = 10000;
 80024ea:	4bcb      	ldr	r3, [pc, #812]	; (8002818 <interpret_ADC_buffer+0x388>)
 80024ec:	627b      	str	r3, [r7, #36]	; 0x24
	float resolution = pow(2, 12) - 1;
 80024ee:	4bcb      	ldr	r3, [pc, #812]	; (800281c <interpret_ADC_buffer+0x38c>)
 80024f0:	623b      	str	r3, [r7, #32]

	for (i = 0; i < 4; i++) {
 80024f2:	2300      	movs	r3, #0
 80024f4:	86fb      	strh	r3, [r7, #54]	; 0x36
 80024f6:	e063      	b.n	80025c0 <interpret_ADC_buffer+0x130>
		adcAverageBuffer[i] = 0;
 80024f8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002500:	4413      	add	r3, r2
 8002502:	3b28      	subs	r3, #40	; 0x28
 8002504:	f04f 0200 	mov.w	r2, #0
 8002508:	601a      	str	r2, [r3, #0]
		for (j = 0; j < L; j++) {
 800250a:	2300      	movs	r3, #0
 800250c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800250e:	e020      	b.n	8002552 <interpret_ADC_buffer+0xc2>
			adcAverageBuffer[i] += adcBuffer[4 * j + i];
 8002510:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002518:	4413      	add	r3, r2
 800251a:	3b28      	subs	r3, #40	; 0x28
 800251c:	ed93 7a00 	vldr	s14, [r3]
 8002520:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002522:	009a      	lsls	r2, r3, #2
 8002524:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002526:	4413      	add	r3, r2
 8002528:	005b      	lsls	r3, r3, #1
 800252a:	68ba      	ldr	r2, [r7, #8]
 800252c:	4413      	add	r3, r2
 800252e:	881b      	ldrh	r3, [r3, #0]
 8002530:	ee07 3a90 	vmov	s15, r3
 8002534:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002538:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800253a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002544:	4413      	add	r3, r2
 8002546:	3b28      	subs	r3, #40	; 0x28
 8002548:	edc3 7a00 	vstr	s15, [r3]
		for (j = 0; j < L; j++) {
 800254c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800254e:	3301      	adds	r3, #1
 8002550:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002552:	79fb      	ldrb	r3, [r7, #7]
 8002554:	b29b      	uxth	r3, r3
 8002556:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002558:	429a      	cmp	r2, r3
 800255a:	d3d9      	bcc.n	8002510 <interpret_ADC_buffer+0x80>
		}
		adcAverageBuffer[i] /= L;
 800255c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002564:	4413      	add	r3, r2
 8002566:	3b28      	subs	r3, #40	; 0x28
 8002568:	edd3 6a00 	vldr	s13, [r3]
 800256c:	79fb      	ldrb	r3, [r7, #7]
 800256e:	ee07 3a90 	vmov	s15, r3
 8002572:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002576:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002578:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002582:	4413      	add	r3, r2
 8002584:	3b28      	subs	r3, #40	; 0x28
 8002586:	edc3 7a00 	vstr	s15, [r3]

		/* The adc value shouldn't be negative, nor should it be 0 */
		if (adcAverageBuffer[i] < 0.25) {
 800258a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002592:	4413      	add	r3, r2
 8002594:	3b28      	subs	r3, #40	; 0x28
 8002596:	edd3 7a00 	vldr	s15, [r3]
 800259a:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 800259e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025a6:	d508      	bpl.n	80025ba <interpret_ADC_buffer+0x12a>
			adcAverageBuffer[i] = 1;
 80025a8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80025b0:	4413      	add	r3, r2
 80025b2:	3b28      	subs	r3, #40	; 0x28
 80025b4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80025b8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < 4; i++) {
 80025ba:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80025bc:	3301      	adds	r3, #1
 80025be:	86fb      	strh	r3, [r7, #54]	; 0x36
 80025c0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80025c2:	2b03      	cmp	r3, #3
 80025c4:	d998      	bls.n	80024f8 <interpret_ADC_buffer+0x68>
	}
	/* temperature = beta / (log(R0 * ( resolution / adcAverageBuffer[i] - 1) ) - log(R)); */
	/* v/vt = ((2^n - 1)*v/vref)/((2^n - 1)*vt/vref) = ((2^n - 1)*v/vref)/adcAverageBuffer[i] */
	/* Assume v = vref, n = 12 */
	temperatures->precharge_resistor = beta
			/ (log(R0 * (resolution / adcAverageBuffer[0] - 1)) - log(R))
 80025c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80025c8:	f7fd ffb0 	bl	800052c <__aeabi_f2d>
 80025cc:	4604      	mov	r4, r0
 80025ce:	460d      	mov	r5, r1
 80025d0:	ed97 7a04 	vldr	s14, [r7, #16]
 80025d4:	edd7 6a08 	vldr	s13, [r7, #32]
 80025d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80025e0:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80025e4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80025e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025ec:	ee17 0a90 	vmov	r0, s15
 80025f0:	f7fd ff9c 	bl	800052c <__aeabi_f2d>
 80025f4:	4602      	mov	r2, r0
 80025f6:	460b      	mov	r3, r1
 80025f8:	ec43 2b10 	vmov	d0, r2, r3
 80025fc:	f017 ffa4 	bl	801a548 <log>
 8002600:	ec59 8b10 	vmov	r8, r9, d0
 8002604:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002606:	f7fd ff91 	bl	800052c <__aeabi_f2d>
 800260a:	4602      	mov	r2, r0
 800260c:	460b      	mov	r3, r1
 800260e:	ec43 2b10 	vmov	d0, r2, r3
 8002612:	f017 ff99 	bl	801a548 <log>
 8002616:	ec53 2b10 	vmov	r2, r3, d0
 800261a:	4640      	mov	r0, r8
 800261c:	4649      	mov	r1, r9
 800261e:	f7fd fe25 	bl	800026c <__aeabi_dsub>
 8002622:	4602      	mov	r2, r0
 8002624:	460b      	mov	r3, r1
 8002626:	4620      	mov	r0, r4
 8002628:	4629      	mov	r1, r5
 800262a:	f7fe f901 	bl	8000830 <__aeabi_ddiv>
 800262e:	4602      	mov	r2, r0
 8002630:	460b      	mov	r3, r1
 8002632:	4610      	mov	r0, r2
 8002634:	4619      	mov	r1, r3
			- 273.15;
 8002636:	a374      	add	r3, pc, #464	; (adr r3, 8002808 <interpret_ADC_buffer+0x378>)
 8002638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800263c:	f7fd fe16 	bl	800026c <__aeabi_dsub>
 8002640:	4602      	mov	r2, r0
 8002642:	460b      	mov	r3, r1
 8002644:	4610      	mov	r0, r2
 8002646:	4619      	mov	r1, r3
 8002648:	f7fe fac0 	bl	8000bcc <__aeabi_d2f>
 800264c:	4602      	mov	r2, r0
	temperatures->precharge_resistor = beta
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	601a      	str	r2, [r3, #0]
	temperatures->fuse = beta
			/ (log(R0 * (resolution / adcAverageBuffer[1] - 1)) - log(R))
 8002652:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002654:	f7fd ff6a 	bl	800052c <__aeabi_f2d>
 8002658:	4604      	mov	r4, r0
 800265a:	460d      	mov	r5, r1
 800265c:	ed97 7a05 	vldr	s14, [r7, #20]
 8002660:	edd7 6a08 	vldr	s13, [r7, #32]
 8002664:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002668:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800266c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002670:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002674:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002678:	ee17 0a90 	vmov	r0, s15
 800267c:	f7fd ff56 	bl	800052c <__aeabi_f2d>
 8002680:	4602      	mov	r2, r0
 8002682:	460b      	mov	r3, r1
 8002684:	ec43 2b10 	vmov	d0, r2, r3
 8002688:	f017 ff5e 	bl	801a548 <log>
 800268c:	ec59 8b10 	vmov	r8, r9, d0
 8002690:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002692:	f7fd ff4b 	bl	800052c <__aeabi_f2d>
 8002696:	4602      	mov	r2, r0
 8002698:	460b      	mov	r3, r1
 800269a:	ec43 2b10 	vmov	d0, r2, r3
 800269e:	f017 ff53 	bl	801a548 <log>
 80026a2:	ec53 2b10 	vmov	r2, r3, d0
 80026a6:	4640      	mov	r0, r8
 80026a8:	4649      	mov	r1, r9
 80026aa:	f7fd fddf 	bl	800026c <__aeabi_dsub>
 80026ae:	4602      	mov	r2, r0
 80026b0:	460b      	mov	r3, r1
 80026b2:	4620      	mov	r0, r4
 80026b4:	4629      	mov	r1, r5
 80026b6:	f7fe f8bb 	bl	8000830 <__aeabi_ddiv>
 80026ba:	4602      	mov	r2, r0
 80026bc:	460b      	mov	r3, r1
 80026be:	4610      	mov	r0, r2
 80026c0:	4619      	mov	r1, r3
			- 273.15;
 80026c2:	a351      	add	r3, pc, #324	; (adr r3, 8002808 <interpret_ADC_buffer+0x378>)
 80026c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026c8:	f7fd fdd0 	bl	800026c <__aeabi_dsub>
 80026cc:	4602      	mov	r2, r0
 80026ce:	460b      	mov	r3, r1
 80026d0:	4610      	mov	r0, r2
 80026d2:	4619      	mov	r1, r3
 80026d4:	f7fe fa7a 	bl	8000bcc <__aeabi_d2f>
 80026d8:	4602      	mov	r2, r0
	temperatures->fuse = beta
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	605a      	str	r2, [r3, #4]
	temperatures->aux_1 = beta
			/ (log(R0 * (resolution / adcAverageBuffer[2] - 1)) - log(R))
 80026de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026e0:	f7fd ff24 	bl	800052c <__aeabi_f2d>
 80026e4:	4604      	mov	r4, r0
 80026e6:	460d      	mov	r5, r1
 80026e8:	ed97 7a06 	vldr	s14, [r7, #24]
 80026ec:	edd7 6a08 	vldr	s13, [r7, #32]
 80026f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80026f8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80026fc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002700:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002704:	ee17 0a90 	vmov	r0, s15
 8002708:	f7fd ff10 	bl	800052c <__aeabi_f2d>
 800270c:	4602      	mov	r2, r0
 800270e:	460b      	mov	r3, r1
 8002710:	ec43 2b10 	vmov	d0, r2, r3
 8002714:	f017 ff18 	bl	801a548 <log>
 8002718:	ec59 8b10 	vmov	r8, r9, d0
 800271c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800271e:	f7fd ff05 	bl	800052c <__aeabi_f2d>
 8002722:	4602      	mov	r2, r0
 8002724:	460b      	mov	r3, r1
 8002726:	ec43 2b10 	vmov	d0, r2, r3
 800272a:	f017 ff0d 	bl	801a548 <log>
 800272e:	ec53 2b10 	vmov	r2, r3, d0
 8002732:	4640      	mov	r0, r8
 8002734:	4649      	mov	r1, r9
 8002736:	f7fd fd99 	bl	800026c <__aeabi_dsub>
 800273a:	4602      	mov	r2, r0
 800273c:	460b      	mov	r3, r1
 800273e:	4620      	mov	r0, r4
 8002740:	4629      	mov	r1, r5
 8002742:	f7fe f875 	bl	8000830 <__aeabi_ddiv>
 8002746:	4602      	mov	r2, r0
 8002748:	460b      	mov	r3, r1
 800274a:	4610      	mov	r0, r2
 800274c:	4619      	mov	r1, r3
			- 273.15;
 800274e:	a32e      	add	r3, pc, #184	; (adr r3, 8002808 <interpret_ADC_buffer+0x378>)
 8002750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002754:	f7fd fd8a 	bl	800026c <__aeabi_dsub>
 8002758:	4602      	mov	r2, r0
 800275a:	460b      	mov	r3, r1
 800275c:	4610      	mov	r0, r2
 800275e:	4619      	mov	r1, r3
 8002760:	f7fe fa34 	bl	8000bcc <__aeabi_d2f>
 8002764:	4602      	mov	r2, r0
	temperatures->aux_1 = beta
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	609a      	str	r2, [r3, #8]
	temperatures->aux_2 = beta
			/ (log(R0 * (resolution / adcAverageBuffer[3] - 1)) - log(R))
 800276a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800276c:	f7fd fede 	bl	800052c <__aeabi_f2d>
 8002770:	4604      	mov	r4, r0
 8002772:	460d      	mov	r5, r1
 8002774:	ed97 7a07 	vldr	s14, [r7, #28]
 8002778:	edd7 6a08 	vldr	s13, [r7, #32]
 800277c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002780:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002784:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002788:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800278c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002790:	ee17 0a90 	vmov	r0, s15
 8002794:	f7fd feca 	bl	800052c <__aeabi_f2d>
 8002798:	4602      	mov	r2, r0
 800279a:	460b      	mov	r3, r1
 800279c:	ec43 2b10 	vmov	d0, r2, r3
 80027a0:	f017 fed2 	bl	801a548 <log>
 80027a4:	ec59 8b10 	vmov	r8, r9, d0
 80027a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80027aa:	f7fd febf 	bl	800052c <__aeabi_f2d>
 80027ae:	4602      	mov	r2, r0
 80027b0:	460b      	mov	r3, r1
 80027b2:	ec43 2b10 	vmov	d0, r2, r3
 80027b6:	f017 fec7 	bl	801a548 <log>
 80027ba:	ec53 2b10 	vmov	r2, r3, d0
 80027be:	4640      	mov	r0, r8
 80027c0:	4649      	mov	r1, r9
 80027c2:	f7fd fd53 	bl	800026c <__aeabi_dsub>
 80027c6:	4602      	mov	r2, r0
 80027c8:	460b      	mov	r3, r1
 80027ca:	4620      	mov	r0, r4
 80027cc:	4629      	mov	r1, r5
 80027ce:	f7fe f82f 	bl	8000830 <__aeabi_ddiv>
 80027d2:	4602      	mov	r2, r0
 80027d4:	460b      	mov	r3, r1
 80027d6:	4610      	mov	r0, r2
 80027d8:	4619      	mov	r1, r3
			- 273.15;
 80027da:	a30b      	add	r3, pc, #44	; (adr r3, 8002808 <interpret_ADC_buffer+0x378>)
 80027dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027e0:	f7fd fd44 	bl	800026c <__aeabi_dsub>
 80027e4:	4602      	mov	r2, r0
 80027e6:	460b      	mov	r3, r1
 80027e8:	4610      	mov	r0, r2
 80027ea:	4619      	mov	r1, r3
 80027ec:	f7fe f9ee 	bl	8000bcc <__aeabi_d2f>
 80027f0:	4602      	mov	r2, r0
	temperatures->aux_2 = beta
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	60da      	str	r2, [r3, #12]

}
 80027f6:	bf00      	nop
 80027f8:	3738      	adds	r7, #56	; 0x38
 80027fa:	46bd      	mov	sp, r7
 80027fc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002800:	00000000 	.word	0x00000000
 8002804:	40c38800 	.word	0x40c38800
 8002808:	66666666 	.word	0x66666666
 800280c:	40711266 	.word	0x40711266
 8002810:	455ac000 	.word	0x455ac000
 8002814:	43951333 	.word	0x43951333
 8002818:	461c4000 	.word	0x461c4000
 800281c:	457ff000 	.word	0x457ff000

08002820 <ADC_initialize>:

void ADC_initialize(TIM_HandleTypeDef* htim) {
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
	htim->Instance->ARR = 65535 / 1000; // 100 Hz sample rate
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2241      	movs	r2, #65	; 0x41
 800282e:	62da      	str	r2, [r3, #44]	; 0x2c
	HAL_TIM_Base_Start(htim);
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f011 fb89 	bl	8013f48 <HAL_TIM_Base_Start>
	ADC_FLAG = 1;
 8002836:	4b03      	ldr	r3, [pc, #12]	; (8002844 <ADC_initialize+0x24>)
 8002838:	2201      	movs	r2, #1
 800283a:	801a      	strh	r2, [r3, #0]
}
 800283c:	bf00      	nop
 800283e:	3708      	adds	r7, #8
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	20000000 	.word	0x20000000

08002848 <ADC_step>:

void ADC_step(uint32_t *buf, uint16_t len) {
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	460b      	mov	r3, r1
 8002852:	807b      	strh	r3, [r7, #2]
	if (ADC_FLAG == 1) {
 8002854:	4b08      	ldr	r3, [pc, #32]	; (8002878 <ADC_step+0x30>)
 8002856:	881b      	ldrh	r3, [r3, #0]
 8002858:	2b01      	cmp	r3, #1
 800285a:	d108      	bne.n	800286e <ADC_step+0x26>
		ADC_FLAG = 0;
 800285c:	4b06      	ldr	r3, [pc, #24]	; (8002878 <ADC_step+0x30>)
 800285e:	2200      	movs	r2, #0
 8002860:	801a      	strh	r2, [r3, #0]
		HAL_ADC_Start_DMA(&hadc1, buf, len);
 8002862:	887b      	ldrh	r3, [r7, #2]
 8002864:	461a      	mov	r2, r3
 8002866:	6879      	ldr	r1, [r7, #4]
 8002868:	4804      	ldr	r0, [pc, #16]	; (800287c <ADC_step+0x34>)
 800286a:	f00e f95f 	bl	8010b2c <HAL_ADC_Start_DMA>
	}
}
 800286e:	bf00      	nop
 8002870:	3708      	adds	r7, #8
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	20000000 	.word	0x20000000
 800287c:	2001b594 	.word	0x2001b594

08002880 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
	ADC_FLAG = 1;
 8002888:	4b04      	ldr	r3, [pc, #16]	; (800289c <HAL_ADC_ConvCpltCallback+0x1c>)
 800288a:	2201      	movs	r2, #1
 800288c:	801a      	strh	r2, [r3, #0]

}
 800288e:	bf00      	nop
 8002890:	370c      	adds	r7, #12
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr
 800289a:	bf00      	nop
 800289c:	20000000 	.word	0x20000000

080028a0 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80028a4:	4b17      	ldr	r3, [pc, #92]	; (8002904 <MX_CAN1_Init+0x64>)
 80028a6:	4a18      	ldr	r2, [pc, #96]	; (8002908 <MX_CAN1_Init+0x68>)
 80028a8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 2;
 80028aa:	4b16      	ldr	r3, [pc, #88]	; (8002904 <MX_CAN1_Init+0x64>)
 80028ac:	2202      	movs	r2, #2
 80028ae:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80028b0:	4b14      	ldr	r3, [pc, #80]	; (8002904 <MX_CAN1_Init+0x64>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80028b6:	4b13      	ldr	r3, [pc, #76]	; (8002904 <MX_CAN1_Init+0x64>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 80028bc:	4b11      	ldr	r3, [pc, #68]	; (8002904 <MX_CAN1_Init+0x64>)
 80028be:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 80028c2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80028c4:	4b0f      	ldr	r3, [pc, #60]	; (8002904 <MX_CAN1_Init+0x64>)
 80028c6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80028ca:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80028cc:	4b0d      	ldr	r3, [pc, #52]	; (8002904 <MX_CAN1_Init+0x64>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80028d2:	4b0c      	ldr	r3, [pc, #48]	; (8002904 <MX_CAN1_Init+0x64>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80028d8:	4b0a      	ldr	r3, [pc, #40]	; (8002904 <MX_CAN1_Init+0x64>)
 80028da:	2200      	movs	r2, #0
 80028dc:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80028de:	4b09      	ldr	r3, [pc, #36]	; (8002904 <MX_CAN1_Init+0x64>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80028e4:	4b07      	ldr	r3, [pc, #28]	; (8002904 <MX_CAN1_Init+0x64>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80028ea:	4b06      	ldr	r3, [pc, #24]	; (8002904 <MX_CAN1_Init+0x64>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80028f0:	4804      	ldr	r0, [pc, #16]	; (8002904 <MX_CAN1_Init+0x64>)
 80028f2:	f00e fcf3 	bl	80112dc <HAL_CAN_Init>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d001      	beq.n	8002900 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80028fc:	f001 f8be 	bl	8003a7c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8002900:	bf00      	nop
 8002902:	bd80      	pop	{r7, pc}
 8002904:	2001b664 	.word	0x2001b664
 8002908:	40006400 	.word	0x40006400

0800290c <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8002910:	4b17      	ldr	r3, [pc, #92]	; (8002970 <MX_CAN2_Init+0x64>)
 8002912:	4a18      	ldr	r2, [pc, #96]	; (8002974 <MX_CAN2_Init+0x68>)
 8002914:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 2;
 8002916:	4b16      	ldr	r3, [pc, #88]	; (8002970 <MX_CAN2_Init+0x64>)
 8002918:	2202      	movs	r2, #2
 800291a:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 800291c:	4b14      	ldr	r3, [pc, #80]	; (8002970 <MX_CAN2_Init+0x64>)
 800291e:	2200      	movs	r2, #0
 8002920:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002922:	4b13      	ldr	r3, [pc, #76]	; (8002970 <MX_CAN2_Init+0x64>)
 8002924:	2200      	movs	r2, #0
 8002926:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_13TQ;
 8002928:	4b11      	ldr	r3, [pc, #68]	; (8002970 <MX_CAN2_Init+0x64>)
 800292a:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 800292e:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 8002930:	4b0f      	ldr	r3, [pc, #60]	; (8002970 <MX_CAN2_Init+0x64>)
 8002932:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002936:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8002938:	4b0d      	ldr	r3, [pc, #52]	; (8002970 <MX_CAN2_Init+0x64>)
 800293a:	2200      	movs	r2, #0
 800293c:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 800293e:	4b0c      	ldr	r3, [pc, #48]	; (8002970 <MX_CAN2_Init+0x64>)
 8002940:	2200      	movs	r2, #0
 8002942:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8002944:	4b0a      	ldr	r3, [pc, #40]	; (8002970 <MX_CAN2_Init+0x64>)
 8002946:	2200      	movs	r2, #0
 8002948:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 800294a:	4b09      	ldr	r3, [pc, #36]	; (8002970 <MX_CAN2_Init+0x64>)
 800294c:	2200      	movs	r2, #0
 800294e:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8002950:	4b07      	ldr	r3, [pc, #28]	; (8002970 <MX_CAN2_Init+0x64>)
 8002952:	2200      	movs	r2, #0
 8002954:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8002956:	4b06      	ldr	r3, [pc, #24]	; (8002970 <MX_CAN2_Init+0x64>)
 8002958:	2200      	movs	r2, #0
 800295a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 800295c:	4804      	ldr	r0, [pc, #16]	; (8002970 <MX_CAN2_Init+0x64>)
 800295e:	f00e fcbd 	bl	80112dc <HAL_CAN_Init>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d001      	beq.n	800296c <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8002968:	f001 f888 	bl	8003a7c <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 800296c:	bf00      	nop
 800296e:	bd80      	pop	{r7, pc}
 8002970:	2001b63c 	.word	0x2001b63c
 8002974:	40006800 	.word	0x40006800

08002978 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b08c      	sub	sp, #48	; 0x30
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002980:	f107 031c 	add.w	r3, r7, #28
 8002984:	2200      	movs	r2, #0
 8002986:	601a      	str	r2, [r3, #0]
 8002988:	605a      	str	r2, [r3, #4]
 800298a:	609a      	str	r2, [r3, #8]
 800298c:	60da      	str	r2, [r3, #12]
 800298e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a5b      	ldr	r2, [pc, #364]	; (8002b04 <HAL_CAN_MspInit+0x18c>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d14e      	bne.n	8002a38 <HAL_CAN_MspInit+0xc0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 800299a:	4b5b      	ldr	r3, [pc, #364]	; (8002b08 <HAL_CAN_MspInit+0x190>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	3301      	adds	r3, #1
 80029a0:	4a59      	ldr	r2, [pc, #356]	; (8002b08 <HAL_CAN_MspInit+0x190>)
 80029a2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80029a4:	4b58      	ldr	r3, [pc, #352]	; (8002b08 <HAL_CAN_MspInit+0x190>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d10d      	bne.n	80029c8 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80029ac:	2300      	movs	r3, #0
 80029ae:	61bb      	str	r3, [r7, #24]
 80029b0:	4b56      	ldr	r3, [pc, #344]	; (8002b0c <HAL_CAN_MspInit+0x194>)
 80029b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b4:	4a55      	ldr	r2, [pc, #340]	; (8002b0c <HAL_CAN_MspInit+0x194>)
 80029b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80029ba:	6413      	str	r3, [r2, #64]	; 0x40
 80029bc:	4b53      	ldr	r3, [pc, #332]	; (8002b0c <HAL_CAN_MspInit+0x194>)
 80029be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029c4:	61bb      	str	r3, [r7, #24]
 80029c6:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029c8:	2300      	movs	r3, #0
 80029ca:	617b      	str	r3, [r7, #20]
 80029cc:	4b4f      	ldr	r3, [pc, #316]	; (8002b0c <HAL_CAN_MspInit+0x194>)
 80029ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d0:	4a4e      	ldr	r2, [pc, #312]	; (8002b0c <HAL_CAN_MspInit+0x194>)
 80029d2:	f043 0301 	orr.w	r3, r3, #1
 80029d6:	6313      	str	r3, [r2, #48]	; 0x30
 80029d8:	4b4c      	ldr	r3, [pc, #304]	; (8002b0c <HAL_CAN_MspInit+0x194>)
 80029da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029dc:	f003 0301 	and.w	r3, r3, #1
 80029e0:	617b      	str	r3, [r7, #20]
 80029e2:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80029e4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80029e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ea:	2302      	movs	r3, #2
 80029ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ee:	2300      	movs	r3, #0
 80029f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029f2:	2303      	movs	r3, #3
 80029f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80029f6:	2309      	movs	r3, #9
 80029f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029fa:	f107 031c 	add.w	r3, r7, #28
 80029fe:	4619      	mov	r1, r3
 8002a00:	4843      	ldr	r0, [pc, #268]	; (8002b10 <HAL_CAN_MspInit+0x198>)
 8002a02:	f00f fe7d 	bl	8012700 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8002a06:	2200      	movs	r2, #0
 8002a08:	2105      	movs	r1, #5
 8002a0a:	2013      	movs	r0, #19
 8002a0c:	f00f fade 	bl	8011fcc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8002a10:	2013      	movs	r0, #19
 8002a12:	f00f faf7 	bl	8012004 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8002a16:	2200      	movs	r2, #0
 8002a18:	2105      	movs	r1, #5
 8002a1a:	2014      	movs	r0, #20
 8002a1c:	f00f fad6 	bl	8011fcc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002a20:	2014      	movs	r0, #20
 8002a22:	f00f faef 	bl	8012004 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8002a26:	2200      	movs	r2, #0
 8002a28:	2105      	movs	r1, #5
 8002a2a:	2015      	movs	r0, #21
 8002a2c:	f00f face 	bl	8011fcc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8002a30:	2015      	movs	r0, #21
 8002a32:	f00f fae7 	bl	8012004 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8002a36:	e060      	b.n	8002afa <HAL_CAN_MspInit+0x182>
  else if(canHandle->Instance==CAN2)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a35      	ldr	r2, [pc, #212]	; (8002b14 <HAL_CAN_MspInit+0x19c>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d15b      	bne.n	8002afa <HAL_CAN_MspInit+0x182>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8002a42:	2300      	movs	r3, #0
 8002a44:	613b      	str	r3, [r7, #16]
 8002a46:	4b31      	ldr	r3, [pc, #196]	; (8002b0c <HAL_CAN_MspInit+0x194>)
 8002a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4a:	4a30      	ldr	r2, [pc, #192]	; (8002b0c <HAL_CAN_MspInit+0x194>)
 8002a4c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002a50:	6413      	str	r3, [r2, #64]	; 0x40
 8002a52:	4b2e      	ldr	r3, [pc, #184]	; (8002b0c <HAL_CAN_MspInit+0x194>)
 8002a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a56:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a5a:	613b      	str	r3, [r7, #16]
 8002a5c:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002a5e:	4b2a      	ldr	r3, [pc, #168]	; (8002b08 <HAL_CAN_MspInit+0x190>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	3301      	adds	r3, #1
 8002a64:	4a28      	ldr	r2, [pc, #160]	; (8002b08 <HAL_CAN_MspInit+0x190>)
 8002a66:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002a68:	4b27      	ldr	r3, [pc, #156]	; (8002b08 <HAL_CAN_MspInit+0x190>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d10d      	bne.n	8002a8c <HAL_CAN_MspInit+0x114>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002a70:	2300      	movs	r3, #0
 8002a72:	60fb      	str	r3, [r7, #12]
 8002a74:	4b25      	ldr	r3, [pc, #148]	; (8002b0c <HAL_CAN_MspInit+0x194>)
 8002a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a78:	4a24      	ldr	r2, [pc, #144]	; (8002b0c <HAL_CAN_MspInit+0x194>)
 8002a7a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a7e:	6413      	str	r3, [r2, #64]	; 0x40
 8002a80:	4b22      	ldr	r3, [pc, #136]	; (8002b0c <HAL_CAN_MspInit+0x194>)
 8002a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a88:	60fb      	str	r3, [r7, #12]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	60bb      	str	r3, [r7, #8]
 8002a90:	4b1e      	ldr	r3, [pc, #120]	; (8002b0c <HAL_CAN_MspInit+0x194>)
 8002a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a94:	4a1d      	ldr	r2, [pc, #116]	; (8002b0c <HAL_CAN_MspInit+0x194>)
 8002a96:	f043 0302 	orr.w	r3, r3, #2
 8002a9a:	6313      	str	r3, [r2, #48]	; 0x30
 8002a9c:	4b1b      	ldr	r3, [pc, #108]	; (8002b0c <HAL_CAN_MspInit+0x194>)
 8002a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa0:	f003 0302 	and.w	r3, r3, #2
 8002aa4:	60bb      	str	r3, [r7, #8]
 8002aa6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002aa8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002aac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aae:	2302      	movs	r3, #2
 8002ab0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8002aba:	2309      	movs	r3, #9
 8002abc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002abe:	f107 031c 	add.w	r3, r7, #28
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	4814      	ldr	r0, [pc, #80]	; (8002b18 <HAL_CAN_MspInit+0x1a0>)
 8002ac6:	f00f fe1b 	bl	8012700 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 5, 0);
 8002aca:	2200      	movs	r2, #0
 8002acc:	2105      	movs	r1, #5
 8002ace:	203f      	movs	r0, #63	; 0x3f
 8002ad0:	f00f fa7c 	bl	8011fcc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 8002ad4:	203f      	movs	r0, #63	; 0x3f
 8002ad6:	f00f fa95 	bl	8012004 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 8002ada:	2200      	movs	r2, #0
 8002adc:	2105      	movs	r1, #5
 8002ade:	2040      	movs	r0, #64	; 0x40
 8002ae0:	f00f fa74 	bl	8011fcc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8002ae4:	2040      	movs	r0, #64	; 0x40
 8002ae6:	f00f fa8d 	bl	8012004 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 5, 0);
 8002aea:	2200      	movs	r2, #0
 8002aec:	2105      	movs	r1, #5
 8002aee:	2041      	movs	r0, #65	; 0x41
 8002af0:	f00f fa6c 	bl	8011fcc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8002af4:	2041      	movs	r0, #65	; 0x41
 8002af6:	f00f fa85 	bl	8012004 <HAL_NVIC_EnableIRQ>
}
 8002afa:	bf00      	nop
 8002afc:	3730      	adds	r7, #48	; 0x30
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	40006400 	.word	0x40006400
 8002b08:	20001758 	.word	0x20001758
 8002b0c:	40023800 	.word	0x40023800
 8002b10:	40020000 	.word	0x40020000
 8002b14:	40006800 	.word	0x40006800
 8002b18:	40020400 	.word	0x40020400

08002b1c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002b22:	2300      	movs	r3, #0
 8002b24:	607b      	str	r3, [r7, #4]
 8002b26:	4b0c      	ldr	r3, [pc, #48]	; (8002b58 <MX_DMA_Init+0x3c>)
 8002b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2a:	4a0b      	ldr	r2, [pc, #44]	; (8002b58 <MX_DMA_Init+0x3c>)
 8002b2c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b30:	6313      	str	r3, [r2, #48]	; 0x30
 8002b32:	4b09      	ldr	r3, [pc, #36]	; (8002b58 <MX_DMA_Init+0x3c>)
 8002b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b3a:	607b      	str	r3, [r7, #4]
 8002b3c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8002b3e:	2200      	movs	r2, #0
 8002b40:	2105      	movs	r1, #5
 8002b42:	2038      	movs	r0, #56	; 0x38
 8002b44:	f00f fa42 	bl	8011fcc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002b48:	2038      	movs	r0, #56	; 0x38
 8002b4a:	f00f fa5b 	bl	8012004 <HAL_NVIC_EnableIRQ>

}
 8002b4e:	bf00      	nop
 8002b50:	3708      	adds	r7, #8
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	40023800 	.word	0x40023800

08002b5c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b08a      	sub	sp, #40	; 0x28
 8002b60:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b62:	f107 0314 	add.w	r3, r7, #20
 8002b66:	2200      	movs	r2, #0
 8002b68:	601a      	str	r2, [r3, #0]
 8002b6a:	605a      	str	r2, [r3, #4]
 8002b6c:	609a      	str	r2, [r3, #8]
 8002b6e:	60da      	str	r2, [r3, #12]
 8002b70:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b72:	2300      	movs	r3, #0
 8002b74:	613b      	str	r3, [r7, #16]
 8002b76:	4b4d      	ldr	r3, [pc, #308]	; (8002cac <MX_GPIO_Init+0x150>)
 8002b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7a:	4a4c      	ldr	r2, [pc, #304]	; (8002cac <MX_GPIO_Init+0x150>)
 8002b7c:	f043 0310 	orr.w	r3, r3, #16
 8002b80:	6313      	str	r3, [r2, #48]	; 0x30
 8002b82:	4b4a      	ldr	r3, [pc, #296]	; (8002cac <MX_GPIO_Init+0x150>)
 8002b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b86:	f003 0310 	and.w	r3, r3, #16
 8002b8a:	613b      	str	r3, [r7, #16]
 8002b8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b8e:	2300      	movs	r3, #0
 8002b90:	60fb      	str	r3, [r7, #12]
 8002b92:	4b46      	ldr	r3, [pc, #280]	; (8002cac <MX_GPIO_Init+0x150>)
 8002b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b96:	4a45      	ldr	r2, [pc, #276]	; (8002cac <MX_GPIO_Init+0x150>)
 8002b98:	f043 0304 	orr.w	r3, r3, #4
 8002b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b9e:	4b43      	ldr	r3, [pc, #268]	; (8002cac <MX_GPIO_Init+0x150>)
 8002ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba2:	f003 0304 	and.w	r3, r3, #4
 8002ba6:	60fb      	str	r3, [r7, #12]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002baa:	2300      	movs	r3, #0
 8002bac:	60bb      	str	r3, [r7, #8]
 8002bae:	4b3f      	ldr	r3, [pc, #252]	; (8002cac <MX_GPIO_Init+0x150>)
 8002bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb2:	4a3e      	ldr	r2, [pc, #248]	; (8002cac <MX_GPIO_Init+0x150>)
 8002bb4:	f043 0301 	orr.w	r3, r3, #1
 8002bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8002bba:	4b3c      	ldr	r3, [pc, #240]	; (8002cac <MX_GPIO_Init+0x150>)
 8002bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bbe:	f003 0301 	and.w	r3, r3, #1
 8002bc2:	60bb      	str	r3, [r7, #8]
 8002bc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	607b      	str	r3, [r7, #4]
 8002bca:	4b38      	ldr	r3, [pc, #224]	; (8002cac <MX_GPIO_Init+0x150>)
 8002bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bce:	4a37      	ldr	r2, [pc, #220]	; (8002cac <MX_GPIO_Init+0x150>)
 8002bd0:	f043 0302 	orr.w	r3, r3, #2
 8002bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8002bd6:	4b35      	ldr	r3, [pc, #212]	; (8002cac <MX_GPIO_Init+0x150>)
 8002bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bda:	f003 0302 	and.w	r3, r3, #2
 8002bde:	607b      	str	r3, [r7, #4]
 8002be0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, enable_AIR_plus_Pin|enable_AIR_minus_Pin|enable_precharge_Pin, GPIO_PIN_RESET);
 8002be2:	2200      	movs	r2, #0
 8002be4:	210e      	movs	r1, #14
 8002be6:	4832      	ldr	r0, [pc, #200]	; (8002cb0 <MX_GPIO_Init+0x154>)
 8002be8:	f00f ff26 	bl	8012a38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, WARNING_LED_Pin|HEARTBEAT_LED_Pin|OK_LED_Pin, GPIO_PIN_RESET);
 8002bec:	2200      	movs	r2, #0
 8002bee:	21e0      	movs	r1, #224	; 0xe0
 8002bf0:	4830      	ldr	r0, [pc, #192]	; (8002cb4 <MX_GPIO_Init+0x158>)
 8002bf2:	f00f ff21 	bl	8012a38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LTC_CS_Pin|error_LED_Pin|AMS_error_Pin|IMD_error_Pin, GPIO_PIN_RESET);
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f44f 712c 	mov.w	r1, #688	; 0x2b0
 8002bfc:	482e      	ldr	r0, [pc, #184]	; (8002cb8 <MX_GPIO_Init+0x15c>)
 8002bfe:	f00f ff1b 	bl	8012a38 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = enable_AIR_plus_Pin|enable_AIR_minus_Pin|enable_precharge_Pin;
 8002c02:	230e      	movs	r3, #14
 8002c04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c06:	2301      	movs	r3, #1
 8002c08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002c12:	f107 0314 	add.w	r3, r7, #20
 8002c16:	4619      	mov	r1, r3
 8002c18:	4825      	ldr	r0, [pc, #148]	; (8002cb0 <MX_GPIO_Init+0x154>)
 8002c1a:	f00f fd71 	bl	8012700 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = AIR_plus_closed_Pin|AIR_minus_closed_Pin|precharge_closed_Pin;
 8002c1e:	2370      	movs	r3, #112	; 0x70
 8002c20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c22:	2300      	movs	r3, #0
 8002c24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002c26:	2302      	movs	r3, #2
 8002c28:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002c2a:	f107 0314 	add.w	r3, r7, #20
 8002c2e:	4619      	mov	r1, r3
 8002c30:	481f      	ldr	r0, [pc, #124]	; (8002cb0 <MX_GPIO_Init+0x154>)
 8002c32:	f00f fd65 	bl	8012700 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = WARNING_LED_Pin|HEARTBEAT_LED_Pin|OK_LED_Pin;
 8002c36:	23e0      	movs	r3, #224	; 0xe0
 8002c38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c42:	2300      	movs	r3, #0
 8002c44:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c46:	f107 0314 	add.w	r3, r7, #20
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	4819      	ldr	r0, [pc, #100]	; (8002cb4 <MX_GPIO_Init+0x158>)
 8002c4e:	f00f fd57 	bl	8012700 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LTC_CS_Pin|error_LED_Pin|AMS_error_Pin|IMD_error_Pin;
 8002c52:	f44f 732c 	mov.w	r3, #688	; 0x2b0
 8002c56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c60:	2300      	movs	r3, #0
 8002c62:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c64:	f107 0314 	add.w	r3, r7, #20
 8002c68:	4619      	mov	r1, r3
 8002c6a:	4813      	ldr	r0, [pc, #76]	; (8002cb8 <MX_GPIO_Init+0x15c>)
 8002c6c:	f00f fd48 	bl	8012700 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SC_probe_Pin|IMD_ok_Pin;
 8002c70:	2306      	movs	r3, #6
 8002c72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c74:	2300      	movs	r3, #0
 8002c76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c7c:	f107 0314 	add.w	r3, r7, #20
 8002c80:	4619      	mov	r1, r3
 8002c82:	480e      	ldr	r0, [pc, #56]	; (8002cbc <MX_GPIO_Init+0x160>)
 8002c84:	f00f fd3c 	bl	8012700 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = AMS_error_latched_Pin|IMD_error_latched_Pin;
 8002c88:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002c8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c92:	2300      	movs	r3, #0
 8002c94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c96:	f107 0314 	add.w	r3, r7, #20
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	4806      	ldr	r0, [pc, #24]	; (8002cb8 <MX_GPIO_Init+0x15c>)
 8002c9e:	f00f fd2f 	bl	8012700 <HAL_GPIO_Init>

}
 8002ca2:	bf00      	nop
 8002ca4:	3728      	adds	r7, #40	; 0x28
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	40023800 	.word	0x40023800
 8002cb0:	40021000 	.word	0x40021000
 8002cb4:	40020000 	.word	0x40020000
 8002cb8:	40020800 	.word	0x40020800
 8002cbc:	40020400 	.word	0x40020400

08002cc0 <main>:
		sizeof(uint8_t), };

const queue_info start_balance_queue_info = { .element_count = 1,
		.element_size = sizeof(uint8_t), };

int main() {
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
	/* INSTRUMENTATE */
	SEGGER_SYSVIEW_Conf();
 8002cc4:	f7ff f9ac 	bl	8002020 <SEGGER_SYSVIEW_Conf>

	/* RESET PERIPHERALS, ETC. */
	HAL_Init();
 8002cc8:	f00d fd46 	bl	8010758 <HAL_Init>

	/* CONFIGURE SYSTEM CLOCK */
	SystemClock_Config();
 8002ccc:	f000 f95a 	bl	8002f84 <SystemClock_Config>

	/* INITIALZE PERIPHERALS */
	MX_GPIO_Init();
 8002cd0:	f7ff ff44 	bl	8002b5c <MX_GPIO_Init>
	MX_SPI2_Init();
 8002cd4:	f001 fa7a 	bl	80041cc <MX_SPI2_Init>
	MX_CAN1_Init();
 8002cd8:	f7ff fde2 	bl	80028a0 <MX_CAN1_Init>
	MX_CAN2_Init();
 8002cdc:	f7ff fe16 	bl	800290c <MX_CAN2_Init>
	MX_TIM1_Init();
 8002ce0:	f001 fc2c 	bl	800453c <MX_TIM1_Init>
	MX_DMA_Init();
 8002ce4:	f7ff ff1a 	bl	8002b1c <MX_DMA_Init>
	MX_TIM3_Init();
 8002ce8:	f001 fd64 	bl	80047b4 <MX_TIM3_Init>
	MX_TIM2_Init();
 8002cec:	f001 fcc6 	bl	800467c <MX_TIM2_Init>
	MX_ADC1_Init();
 8002cf0:	f7ff fad0 	bl	8002294 <MX_ADC1_Init>

	initialize_CAN(&hcan1, &hcan2);
 8002cf4:	4972      	ldr	r1, [pc, #456]	; (8002ec0 <main+0x200>)
 8002cf6:	4873      	ldr	r0, [pc, #460]	; (8002ec4 <main+0x204>)
 8002cf8:	f7fe fe24 	bl	8001944 <initialize_CAN>
	initialize_LTC(&hspi2);
 8002cfc:	4872      	ldr	r0, [pc, #456]	; (8002ec8 <main+0x208>)
 8002cfe:	f000 ff9d 	bl	8003c3c <initialize_LTC>

	/* Initialize kernel */
	osKernelInitialize();
 8002d02:	f012 ff3d 	bl	8015b80 <osKernelInitialize>

	/* INITIALIZE QUEUES */

	GPIO_queue = xQueueCreate(GPIO_queue_info.element_count,
 8002d06:	2301      	movs	r3, #1
 8002d08:	2207      	movs	r2, #7
 8002d0a:	4611      	mov	r1, r2
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f013 fa1c 	bl	801614c <xQueueGenericCreate>
 8002d14:	4603      	mov	r3, r0
 8002d16:	4a6d      	ldr	r2, [pc, #436]	; (8002ecc <main+0x20c>)
 8002d18:	6013      	str	r3, [r2, #0]
			GPIO_queue_info.element_size);

	IMD_queue = xQueueCreate(IMD_queue_info.element_count,
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	2208      	movs	r2, #8
 8002d1e:	4611      	mov	r1, r2
 8002d20:	2200      	movs	r2, #0
 8002d22:	4618      	mov	r0, r3
 8002d24:	f013 fa12 	bl	801614c <xQueueGenericCreate>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	4a69      	ldr	r2, [pc, #420]	; (8002ed0 <main+0x210>)
 8002d2c:	6013      	str	r3, [r2, #0]
			IMD_queue_info.element_size);

	temperatures_queue = xQueueCreate(temperatures_queue_info.element_count,
 8002d2e:	2301      	movs	r3, #1
 8002d30:	2210      	movs	r2, #16
 8002d32:	4611      	mov	r1, r2
 8002d34:	2200      	movs	r2, #0
 8002d36:	4618      	mov	r0, r3
 8002d38:	f013 fa08 	bl	801614c <xQueueGenericCreate>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	4a65      	ldr	r2, [pc, #404]	; (8002ed4 <main+0x214>)
 8002d40:	6013      	str	r3, [r2, #0]
			temperatures_queue_info.element_size);

	accumulator_voltage_queue = xQueueCreate(
 8002d42:	2301      	movs	r3, #1
 8002d44:	2204      	movs	r2, #4
 8002d46:	4611      	mov	r1, r2
 8002d48:	2200      	movs	r2, #0
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f013 f9fe 	bl	801614c <xQueueGenericCreate>
 8002d50:	4603      	mov	r3, r0
 8002d52:	4a61      	ldr	r2, [pc, #388]	; (8002ed8 <main+0x218>)
 8002d54:	6013      	str	r3, [r2, #0]
			accumulator_voltage_queue_info.element_count,
			accumulator_voltage_queue_info.element_size);

	vehicle_voltage_queue = xQueueCreate(
 8002d56:	2301      	movs	r3, #1
 8002d58:	2204      	movs	r2, #4
 8002d5a:	4611      	mov	r1, r2
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f013 f9f4 	bl	801614c <xQueueGenericCreate>
 8002d64:	4603      	mov	r3, r0
 8002d66:	4a5d      	ldr	r2, [pc, #372]	; (8002edc <main+0x21c>)
 8002d68:	6013      	str	r3, [r2, #0]
			vehicle_voltage_queue_info.element_count,
			vehicle_voltage_queue_info.element_size);

	accumulator_current_queue = xQueueCreate(
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	2204      	movs	r2, #4
 8002d6e:	4611      	mov	r1, r2
 8002d70:	2200      	movs	r2, #0
 8002d72:	4618      	mov	r0, r3
 8002d74:	f013 f9ea 	bl	801614c <xQueueGenericCreate>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	4a59      	ldr	r2, [pc, #356]	; (8002ee0 <main+0x220>)
 8002d7c:	6013      	str	r3, [r2, #0]
			accumulator_current_queue_info.element_count,
			accumulator_current_queue_info.element_size);

	cell_voltages_queue = xQueueCreate(cell_voltages_queue_info.element_count,
 8002d7e:	2301      	movs	r3, #1
 8002d80:	2204      	movs	r2, #4
 8002d82:	4611      	mov	r1, r2
 8002d84:	2200      	movs	r2, #0
 8002d86:	4618      	mov	r0, r3
 8002d88:	f013 f9e0 	bl	801614c <xQueueGenericCreate>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	4a55      	ldr	r2, [pc, #340]	; (8002ee4 <main+0x224>)
 8002d90:	6013      	str	r3, [r2, #0]
			cell_voltages_queue_info.element_size);

	cell_temperatures_queue = xQueueCreate(
 8002d92:	2301      	movs	r3, #1
 8002d94:	2204      	movs	r2, #4
 8002d96:	4611      	mov	r1, r2
 8002d98:	2200      	movs	r2, #0
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f013 f9d6 	bl	801614c <xQueueGenericCreate>
 8002da0:	4603      	mov	r3, r0
 8002da2:	4a51      	ldr	r2, [pc, #324]	; (8002ee8 <main+0x228>)
 8002da4:	6013      	str	r3, [r2, #0]
			cell_temperatures_queue_info.element_count,
			cell_temperatures_queue_info.element_size);

	start_drive_queue = xQueueCreate(start_drive_queue_info.element_count,
 8002da6:	2301      	movs	r3, #1
 8002da8:	2201      	movs	r2, #1
 8002daa:	4611      	mov	r1, r2
 8002dac:	2200      	movs	r2, #0
 8002dae:	4618      	mov	r0, r3
 8002db0:	f013 f9cc 	bl	801614c <xQueueGenericCreate>
 8002db4:	4603      	mov	r3, r0
 8002db6:	4a4d      	ldr	r2, [pc, #308]	; (8002eec <main+0x22c>)
 8002db8:	6013      	str	r3, [r2, #0]
			start_drive_queue_info.element_size);

	start_charge_queue = xQueueCreate(start_charge_queue_info.element_count,
 8002dba:	2301      	movs	r3, #1
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	4611      	mov	r1, r2
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f013 f9c2 	bl	801614c <xQueueGenericCreate>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	4a49      	ldr	r2, [pc, #292]	; (8002ef0 <main+0x230>)
 8002dcc:	6013      	str	r3, [r2, #0]
			start_charge_queue_info.element_size);

	start_balance_queue = xQueueCreate(start_balance_queue_info.element_count,
 8002dce:	2301      	movs	r3, #1
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	4611      	mov	r1, r2
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f013 f9b8 	bl	801614c <xQueueGenericCreate>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	4a45      	ldr	r2, [pc, #276]	; (8002ef4 <main+0x234>)
 8002de0:	6013      	str	r3, [r2, #0]
			start_balance_queue_info.element_size);

	/* INITIALIZE TASKS */

	first_tick = 0.25 * TICK2HZ + osKernelGetTickCount(); // Wait for segger, etc
 8002de2:	f012 ff17 	bl	8015c14 <osKernelGetTickCount>
 8002de6:	4603      	mov	r3, r0
 8002de8:	4618      	mov	r0, r3
 8002dea:	f7fd fb7d 	bl	80004e8 <__aeabi_ui2d>
 8002dee:	f04f 0200 	mov.w	r2, #0
 8002df2:	4b41      	ldr	r3, [pc, #260]	; (8002ef8 <main+0x238>)
 8002df4:	f7fd fa3c 	bl	8000270 <__adddf3>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	460b      	mov	r3, r1
 8002dfc:	4610      	mov	r0, r2
 8002dfe:	4619      	mov	r1, r3
 8002e00:	f7fd fec4 	bl	8000b8c <__aeabi_d2uiz>
 8002e04:	4603      	mov	r3, r0
 8002e06:	4a3d      	ldr	r2, [pc, #244]	; (8002efc <main+0x23c>)
 8002e08:	6013      	str	r3, [r2, #0]

	SM_task_handle = osThreadNew(start_SM_task, NULL, &SM_task_info.attributes);
 8002e0a:	4a3d      	ldr	r2, [pc, #244]	; (8002f00 <main+0x240>)
 8002e0c:	2100      	movs	r1, #0
 8002e0e:	483d      	ldr	r0, [pc, #244]	; (8002f04 <main+0x244>)
 8002e10:	f012 ff15 	bl	8015c3e <osThreadNew>
 8002e14:	4603      	mov	r3, r0
 8002e16:	4a3c      	ldr	r2, [pc, #240]	; (8002f08 <main+0x248>)
 8002e18:	6013      	str	r3, [r2, #0]

	SIM_task_handle = osThreadNew(start_SIM_task, NULL,
 8002e1a:	4a3c      	ldr	r2, [pc, #240]	; (8002f0c <main+0x24c>)
 8002e1c:	2100      	movs	r1, #0
 8002e1e:	483c      	ldr	r0, [pc, #240]	; (8002f10 <main+0x250>)
 8002e20:	f012 ff0d 	bl	8015c3e <osThreadNew>
 8002e24:	4603      	mov	r3, r0
 8002e26:	4a3b      	ldr	r2, [pc, #236]	; (8002f14 <main+0x254>)
 8002e28:	6013      	str	r3, [r2, #0]
			&SIM_task_info.attributes);

	CSE_task_handle = osThreadNew(start_CSE_task, NULL,
 8002e2a:	4a3b      	ldr	r2, [pc, #236]	; (8002f18 <main+0x258>)
 8002e2c:	2100      	movs	r1, #0
 8002e2e:	483b      	ldr	r0, [pc, #236]	; (8002f1c <main+0x25c>)
 8002e30:	f012 ff05 	bl	8015c3e <osThreadNew>
 8002e34:	4603      	mov	r3, r0
 8002e36:	4a3a      	ldr	r2, [pc, #232]	; (8002f20 <main+0x260>)
 8002e38:	6013      	str	r3, [r2, #0]
			&CSE_task_info.attributes);

	IMD_task_handle = osThreadNew(start_IMD_task, NULL,
 8002e3a:	4a3a      	ldr	r2, [pc, #232]	; (8002f24 <main+0x264>)
 8002e3c:	2100      	movs	r1, #0
 8002e3e:	483a      	ldr	r0, [pc, #232]	; (8002f28 <main+0x268>)
 8002e40:	f012 fefd 	bl	8015c3e <osThreadNew>
 8002e44:	4603      	mov	r3, r0
 8002e46:	4a39      	ldr	r2, [pc, #228]	; (8002f2c <main+0x26c>)
 8002e48:	6013      	str	r3, [r2, #0]
			&IMD_task_info.attributes);

	GPIO_task_handle = osThreadNew(start_GPIO_task, NULL,
 8002e4a:	4a39      	ldr	r2, [pc, #228]	; (8002f30 <main+0x270>)
 8002e4c:	2100      	movs	r1, #0
 8002e4e:	4839      	ldr	r0, [pc, #228]	; (8002f34 <main+0x274>)
 8002e50:	f012 fef5 	bl	8015c3e <osThreadNew>
 8002e54:	4603      	mov	r3, r0
 8002e56:	4a38      	ldr	r2, [pc, #224]	; (8002f38 <main+0x278>)
 8002e58:	6013      	str	r3, [r2, #0]
			&GPIO_task_info.attributes);

	ADC_task_handle = osThreadNew(start_ADC_task, NULL,
 8002e5a:	4a38      	ldr	r2, [pc, #224]	; (8002f3c <main+0x27c>)
 8002e5c:	2100      	movs	r1, #0
 8002e5e:	4838      	ldr	r0, [pc, #224]	; (8002f40 <main+0x280>)
 8002e60:	f012 feed 	bl	8015c3e <osThreadNew>
 8002e64:	4603      	mov	r3, r0
 8002e66:	4a37      	ldr	r2, [pc, #220]	; (8002f44 <main+0x284>)
 8002e68:	6013      	str	r3, [r2, #0]
			&ADC_task_info.attributes);

	COOL_task_handle = osThreadNew(start_COOL_task, NULL,
 8002e6a:	4a37      	ldr	r2, [pc, #220]	; (8002f48 <main+0x288>)
 8002e6c:	2100      	movs	r1, #0
 8002e6e:	4837      	ldr	r0, [pc, #220]	; (8002f4c <main+0x28c>)
 8002e70:	f012 fee5 	bl	8015c3e <osThreadNew>
 8002e74:	4603      	mov	r3, r0
 8002e76:	4a36      	ldr	r2, [pc, #216]	; (8002f50 <main+0x290>)
 8002e78:	6013      	str	r3, [r2, #0]
			&COOL_task_info.attributes);

	CAN_task_handle = osThreadNew(start_CAN_task, NULL,
 8002e7a:	4a36      	ldr	r2, [pc, #216]	; (8002f54 <main+0x294>)
 8002e7c:	2100      	movs	r1, #0
 8002e7e:	4836      	ldr	r0, [pc, #216]	; (8002f58 <main+0x298>)
 8002e80:	f012 fedd 	bl	8015c3e <osThreadNew>
 8002e84:	4603      	mov	r3, r0
 8002e86:	4a35      	ldr	r2, [pc, #212]	; (8002f5c <main+0x29c>)
 8002e88:	6013      	str	r3, [r2, #0]
			&CAN_task_info.attributes);

	COM_task_handle = osThreadNew(start_COM_task, NULL,
 8002e8a:	4a35      	ldr	r2, [pc, #212]	; (8002f60 <main+0x2a0>)
 8002e8c:	2100      	movs	r1, #0
 8002e8e:	4835      	ldr	r0, [pc, #212]	; (8002f64 <main+0x2a4>)
 8002e90:	f012 fed5 	bl	8015c3e <osThreadNew>
 8002e94:	4603      	mov	r3, r0
 8002e96:	4a34      	ldr	r2, [pc, #208]	; (8002f68 <main+0x2a8>)
 8002e98:	6013      	str	r3, [r2, #0]
			&COM_task_info.attributes);

	IWDG_task_handle = osThreadNew(start_IWDG_task, NULL,
 8002e9a:	4a34      	ldr	r2, [pc, #208]	; (8002f6c <main+0x2ac>)
 8002e9c:	2100      	movs	r1, #0
 8002e9e:	4834      	ldr	r0, [pc, #208]	; (8002f70 <main+0x2b0>)
 8002ea0:	f012 fecd 	bl	8015c3e <osThreadNew>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	4a33      	ldr	r2, [pc, #204]	; (8002f74 <main+0x2b4>)
 8002ea8:	6013      	str	r3, [r2, #0]
			&IWDG_task_info.attributes);

	event_handler_task_handle = osThreadNew(start_event_handler_task, NULL,
 8002eaa:	4a33      	ldr	r2, [pc, #204]	; (8002f78 <main+0x2b8>)
 8002eac:	2100      	movs	r1, #0
 8002eae:	4833      	ldr	r0, [pc, #204]	; (8002f7c <main+0x2bc>)
 8002eb0:	f012 fec5 	bl	8015c3e <osThreadNew>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	4a32      	ldr	r2, [pc, #200]	; (8002f80 <main+0x2c0>)
 8002eb8:	6013      	str	r3, [r2, #0]
			&event_handler_task_info.attributes);

	/* Launch RTOS ! */
	osKernelStart();
 8002eba:	f012 fe85 	bl	8015bc8 <osKernelStart>

	for (;;)
 8002ebe:	e7fe      	b.n	8002ebe <main+0x1fe>
 8002ec0:	2001b63c 	.word	0x2001b63c
 8002ec4:	2001b664 	.word	0x2001b664
 8002ec8:	2001bc50 	.word	0x2001bc50
 8002ecc:	2001b584 	.word	0x2001b584
 8002ed0:	2001b574 	.word	0x2001b574
 8002ed4:	2001b570 	.word	0x2001b570
 8002ed8:	2001b588 	.word	0x2001b588
 8002edc:	2001b580 	.word	0x2001b580
 8002ee0:	2001b590 	.word	0x2001b590
 8002ee4:	2001b568 	.word	0x2001b568
 8002ee8:	2001b57c 	.word	0x2001b57c
 8002eec:	2001b56c 	.word	0x2001b56c
 8002ef0:	2001b578 	.word	0x2001b578
 8002ef4:	2001b58c 	.word	0x2001b58c
 8002ef8:	406f4000 	.word	0x406f4000
 8002efc:	2001b788 	.word	0x2001b788
 8002f00:	0801afb4 	.word	0x0801afb4
 8002f04:	08003059 	.word	0x08003059
 8002f08:	2001b6e0 	.word	0x2001b6e0
 8002f0c:	0801afe4 	.word	0x0801afe4
 8002f10:	08003889 	.word	0x08003889
 8002f14:	2001b774 	.word	0x2001b774
 8002f18:	0801b044 	.word	0x0801b044
 8002f1c:	08003701 	.word	0x08003701
 8002f20:	2001b77c 	.word	0x2001b77c
 8002f24:	0801b134 	.word	0x0801b134
 8002f28:	080032a9 	.word	0x080032a9
 8002f2c:	2001b790 	.word	0x2001b790
 8002f30:	0801b104 	.word	0x0801b104
 8002f34:	08003355 	.word	0x08003355
 8002f38:	2001b6dc 	.word	0x2001b6dc
 8002f3c:	0801b0d4 	.word	0x0801b0d4
 8002f40:	08003411 	.word	0x08003411
 8002f44:	2001b780 	.word	0x2001b780
 8002f48:	0801b014 	.word	0x0801b014
 8002f4c:	08003799 	.word	0x08003799
 8002f50:	2001b778 	.word	0x2001b778
 8002f54:	0801b074 	.word	0x0801b074
 8002f58:	08003691 	.word	0x08003691
 8002f5c:	2001b784 	.word	0x2001b784
 8002f60:	0801b0a4 	.word	0x0801b0a4
 8002f64:	080034cd 	.word	0x080034cd
 8002f68:	2001b69c 	.word	0x2001b69c
 8002f6c:	0801b194 	.word	0x0801b194
 8002f70:	080031c1 	.word	0x080031c1
 8002f74:	2001b78c 	.word	0x2001b78c
 8002f78:	0801b164 	.word	0x0801b164
 8002f7c:	08003239 	.word	0x08003239
 8002f80:	2001b698 	.word	0x2001b698

08002f84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b094      	sub	sp, #80	; 0x50
 8002f88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f8a:	f107 0320 	add.w	r3, r7, #32
 8002f8e:	2230      	movs	r2, #48	; 0x30
 8002f90:	2100      	movs	r1, #0
 8002f92:	4618      	mov	r0, r3
 8002f94:	f017 f968 	bl	801a268 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f98:	f107 030c 	add.w	r3, r7, #12
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	601a      	str	r2, [r3, #0]
 8002fa0:	605a      	str	r2, [r3, #4]
 8002fa2:	609a      	str	r2, [r3, #8]
 8002fa4:	60da      	str	r2, [r3, #12]
 8002fa6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002fa8:	2300      	movs	r3, #0
 8002faa:	60bb      	str	r3, [r7, #8]
 8002fac:	4b28      	ldr	r3, [pc, #160]	; (8003050 <SystemClock_Config+0xcc>)
 8002fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb0:	4a27      	ldr	r2, [pc, #156]	; (8003050 <SystemClock_Config+0xcc>)
 8002fb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fb6:	6413      	str	r3, [r2, #64]	; 0x40
 8002fb8:	4b25      	ldr	r3, [pc, #148]	; (8003050 <SystemClock_Config+0xcc>)
 8002fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fc0:	60bb      	str	r3, [r7, #8]
 8002fc2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	607b      	str	r3, [r7, #4]
 8002fc8:	4b22      	ldr	r3, [pc, #136]	; (8003054 <SystemClock_Config+0xd0>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a21      	ldr	r2, [pc, #132]	; (8003054 <SystemClock_Config+0xd0>)
 8002fce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fd2:	6013      	str	r3, [r2, #0]
 8002fd4:	4b1f      	ldr	r3, [pc, #124]	; (8003054 <SystemClock_Config+0xd0>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fdc:	607b      	str	r3, [r7, #4]
 8002fde:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8002fe0:	230a      	movs	r3, #10
 8002fe2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002fe8:	2310      	movs	r3, #16
 8002fea:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002fec:	2301      	movs	r3, #1
 8002fee:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ff0:	2302      	movs	r3, #2
 8002ff2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002ff8:	2308      	movs	r3, #8
 8002ffa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 8002ffc:	2340      	movs	r3, #64	; 0x40
 8002ffe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003000:	2302      	movs	r3, #2
 8003002:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003004:	2304      	movs	r3, #4
 8003006:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003008:	f107 0320 	add.w	r3, r7, #32
 800300c:	4618      	mov	r0, r3
 800300e:	f00f fd3d 	bl	8012a8c <HAL_RCC_OscConfig>
 8003012:	4603      	mov	r3, r0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d001      	beq.n	800301c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8003018:	f000 fd30 	bl	8003a7c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800301c:	230f      	movs	r3, #15
 800301e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003020:	2302      	movs	r3, #2
 8003022:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 8003024:	2390      	movs	r3, #144	; 0x90
 8003026:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003028:	2300      	movs	r3, #0
 800302a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800302c:	2300      	movs	r3, #0
 800302e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003030:	f107 030c 	add.w	r3, r7, #12
 8003034:	2100      	movs	r1, #0
 8003036:	4618      	mov	r0, r3
 8003038:	f00f ffa0 	bl	8012f7c <HAL_RCC_ClockConfig>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d001      	beq.n	8003046 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003042:	f000 fd1b 	bl	8003a7c <Error_Handler>
  }
}
 8003046:	bf00      	nop
 8003048:	3750      	adds	r7, #80	; 0x50
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	40023800 	.word	0x40023800
 8003054:	40007000 	.word	0x40007000

08003058 <start_SM_task>:
uint8_t vv;
uint8_t av;
uint16_t state;

/* ENTER TASKS */
void start_SM_task(void *argument) {
 8003058:	b580      	push	{r7, lr}
 800305a:	b086      	sub	sp, #24
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
	SEGGER_SYSVIEW_Start();
 8003060:	f016 fbaa 	bl	80197b8 <SEGGER_SYSVIEW_Start>

	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 8003064:	4b45      	ldr	r3, [pc, #276]	; (800317c <start_SM_task+0x124>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	617b      	str	r3, [r7, #20]
	uint32_t tick_increment = TICK2HZ * SM_task_info.periodicity;
 800306a:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8003180 <start_SM_task+0x128>
 800306e:	eddf 7a45 	vldr	s15, [pc, #276]	; 8003184 <start_SM_task+0x12c>
 8003072:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003076:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800307a:	ee17 3a90 	vmov	r3, s15
 800307e:	613b      	str	r3, [r7, #16]

	/* Make task-specific structures */
	ams_parameters.Ts_f32 = SM_task_info.periodicity;
 8003080:	4a41      	ldr	r2, [pc, #260]	; (8003188 <start_SM_task+0x130>)
 8003082:	4b42      	ldr	r3, [pc, #264]	; (800318c <start_SM_task+0x134>)
 8003084:	605a      	str	r2, [r3, #4]
	double *cell_voltages;

	xQueueReceive(start_drive_queue, &ams_inputs.drive_u8, 0);
 8003086:	4b42      	ldr	r3, [pc, #264]	; (8003190 <start_SM_task+0x138>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	2200      	movs	r2, #0
 800308c:	4941      	ldr	r1, [pc, #260]	; (8003194 <start_SM_task+0x13c>)
 800308e:	4618      	mov	r0, r3
 8003090:	f013 fa96 	bl	80165c0 <xQueueReceive>
	xQueueReceive(start_charge_queue, &ams_inputs.charge_u8, 0);
 8003094:	4b40      	ldr	r3, [pc, #256]	; (8003198 <start_SM_task+0x140>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	2200      	movs	r2, #0
 800309a:	4940      	ldr	r1, [pc, #256]	; (800319c <start_SM_task+0x144>)
 800309c:	4618      	mov	r0, r3
 800309e:	f013 fa8f 	bl	80165c0 <xQueueReceive>
	xQueueReceive(start_balance_queue, &ams_inputs.balance_u8, 0);
 80030a2:	4b3f      	ldr	r3, [pc, #252]	; (80031a0 <start_SM_task+0x148>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	2200      	movs	r2, #0
 80030a8:	493e      	ldr	r1, [pc, #248]	; (80031a4 <start_SM_task+0x14c>)
 80030aa:	4618      	mov	r0, r3
 80030ac:	f013 fa88 	bl	80165c0 <xQueueReceive>

	/* Wait until offset */
	next_tick += TICK2HZ * SM_task_info.offset;
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	ee07 3a90 	vmov	s15, r3
 80030b6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80030ba:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80031a8 <start_SM_task+0x150>
 80030be:	eddf 7a31 	vldr	s15, [pc, #196]	; 8003184 <start_SM_task+0x12c>
 80030c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80030ce:	ee17 3a90 	vmov	r3, s15
 80030d2:	617b      	str	r3, [r7, #20]
	osDelayUntil(next_tick);
 80030d4:	6978      	ldr	r0, [r7, #20]
 80030d6:	f012 fe44 	bl	8015d62 <osDelayUntil>

	for (;;) {
		/* Enter periodic behaviour */
		xQueueReceive(cell_voltages_queue, &cell_voltages, 0);
 80030da:	4b34      	ldr	r3, [pc, #208]	; (80031ac <start_SM_task+0x154>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f107 010c 	add.w	r1, r7, #12
 80030e2:	2200      	movs	r2, #0
 80030e4:	4618      	mov	r0, r3
 80030e6:	f013 fa6b 	bl	80165c0 <xQueueReceive>

		ams_inputs.AIR_minus_closed_u8 = get_air_minus_ext();
 80030ea:	f000 fd05 	bl	8003af8 <get_air_minus_ext>
 80030ee:	4603      	mov	r3, r0
 80030f0:	461a      	mov	r2, r3
 80030f2:	4b2f      	ldr	r3, [pc, #188]	; (80031b0 <start_SM_task+0x158>)
 80030f4:	721a      	strb	r2, [r3, #8]
		ams_inputs.AIR_plus_closed_u8 = get_air_plus_ext();
 80030f6:	f000 fcdb 	bl	8003ab0 <get_air_plus_ext>
 80030fa:	4603      	mov	r3, r0
 80030fc:	461a      	mov	r2, r3
 80030fe:	4b2c      	ldr	r3, [pc, #176]	; (80031b0 <start_SM_task+0x158>)
 8003100:	72da      	strb	r2, [r3, #11]
		ams_inputs.precharge_closed_u8 = get_precharge_ext();
 8003102:	f000 fd1d 	bl	8003b40 <get_precharge_ext>
 8003106:	4603      	mov	r3, r0
 8003108:	461a      	mov	r2, r3
 800310a:	4b29      	ldr	r3, [pc, #164]	; (80031b0 <start_SM_task+0x158>)
 800310c:	765a      	strb	r2, [r3, #25]
		ams_inputs.SC_u8 = get_sc_probe_ext();
 800310e:	f000 fd3f 	bl	8003b90 <get_sc_probe_ext>
 8003112:	4603      	mov	r3, r0
 8003114:	461a      	mov	r2, r3
 8003116:	4b26      	ldr	r3, [pc, #152]	; (80031b0 <start_SM_task+0x158>)
 8003118:	769a      	strb	r2, [r3, #26]
		ams_inputs.accumulator_voltage_f64 = SIM0_Y.accumulator_voltage;
 800311a:	4b26      	ldr	r3, [pc, #152]	; (80031b4 <start_SM_task+0x15c>)
 800311c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8003120:	4923      	ldr	r1, [pc, #140]	; (80031b0 <start_SM_task+0x158>)
 8003122:	e9c1 2308 	strd	r2, r3, [r1, #32]
		ams_inputs.vehicle_voltage_f64 = SIM0_Y.vehicle_voltage;
 8003126:	4b23      	ldr	r3, [pc, #140]	; (80031b4 <start_SM_task+0x15c>)
 8003128:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800312c:	4920      	ldr	r1, [pc, #128]	; (80031b0 <start_SM_task+0x158>)
 800312e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		ams_inputs.drive_u8 = 0;
 8003132:	4b1f      	ldr	r3, [pc, #124]	; (80031b0 <start_SM_task+0x158>)
 8003134:	2200      	movs	r2, #0
 8003136:	725a      	strb	r2, [r3, #9]
		ams_inputs.charge_u8 = 1;
 8003138:	4b1d      	ldr	r3, [pc, #116]	; (80031b0 <start_SM_task+0x158>)
 800313a:	2201      	movs	r2, #1
 800313c:	761a      	strb	r2, [r3, #24]
		ams_inputs.charger_is_live_u8 = 1;
 800313e:	4b1c      	ldr	r3, [pc, #112]	; (80031b0 <start_SM_task+0x158>)
 8003140:	2201      	movs	r2, #1
 8003142:	771a      	strb	r2, [r3, #28]
		ams(&state);
 8003144:	481c      	ldr	r0, [pc, #112]	; (80031b8 <start_SM_task+0x160>)
 8003146:	f00d fa89 	bl	801065c <ams>
		set_air_minus_ext(ams_outputs.enable_AIR_minus_u8);
 800314a:	4b1c      	ldr	r3, [pc, #112]	; (80031bc <start_SM_task+0x164>)
 800314c:	785b      	ldrb	r3, [r3, #1]
 800314e:	4618      	mov	r0, r3
 8003150:	f000 fcbe 	bl	8003ad0 <set_air_minus_ext>
		set_air_plus_ext(ams_outputs.enable_AIR_plus_u8);
 8003154:	4b19      	ldr	r3, [pc, #100]	; (80031bc <start_SM_task+0x164>)
 8003156:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800315a:	4618      	mov	r0, r3
 800315c:	f000 fc94 	bl	8003a88 <set_air_plus_ext>
		set_precharge_ext(ams_outputs.enable_precharge_u8);
 8003160:	4b16      	ldr	r3, [pc, #88]	; (80031bc <start_SM_task+0x164>)
 8003162:	789b      	ldrb	r3, [r3, #2]
 8003164:	4618      	mov	r0, r3
 8003166:	f000 fcd7 	bl	8003b18 <set_precharge_ext>

		/* Wait until next period */
		next_tick += tick_increment;
 800316a:	697a      	ldr	r2, [r7, #20]
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	4413      	add	r3, r2
 8003170:	617b      	str	r3, [r7, #20]
		osDelayUntil(next_tick);
 8003172:	6978      	ldr	r0, [r7, #20]
 8003174:	f012 fdf5 	bl	8015d62 <osDelayUntil>
		xQueueReceive(cell_voltages_queue, &cell_voltages, 0);
 8003178:	e7af      	b.n	80030da <start_SM_task+0x82>
 800317a:	bf00      	nop
 800317c:	2001b788 	.word	0x2001b788
 8003180:	3f4ccccd 	.word	0x3f4ccccd
 8003184:	447a0000 	.word	0x447a0000
 8003188:	3f4ccccd 	.word	0x3f4ccccd
 800318c:	2001b6e4 	.word	0x2001b6e4
 8003190:	2001b56c 	.word	0x2001b56c
 8003194:	2001b6b1 	.word	0x2001b6b1
 8003198:	2001b578 	.word	0x2001b578
 800319c:	2001b6c0 	.word	0x2001b6c0
 80031a0:	2001b58c 	.word	0x2001b58c
 80031a4:	2001b6b2 	.word	0x2001b6b2
 80031a8:	00000000 	.word	0x00000000
 80031ac:	2001b568 	.word	0x2001b568
 80031b0:	2001b6a8 	.word	0x2001b6a8
 80031b4:	2001d6a8 	.word	0x2001d6a8
 80031b8:	2001b6da 	.word	0x2001b6da
 80031bc:	2001b6ec 	.word	0x2001b6ec

080031c0 <start_IWDG_task>:
	}
}

void start_IWDG_task(void *argument) {
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 80031c8:	4b16      	ldr	r3, [pc, #88]	; (8003224 <start_IWDG_task+0x64>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	60fb      	str	r3, [r7, #12]
	uint32_t tick_increment = TICK2HZ * IWDG_task_info.periodicity;
 80031ce:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8003228 <start_IWDG_task+0x68>
 80031d2:	eddf 7a16 	vldr	s15, [pc, #88]	; 800322c <start_IWDG_task+0x6c>
 80031d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031de:	ee17 3a90 	vmov	r3, s15
 80031e2:	60bb      	str	r3, [r7, #8]

	/* Make task-specific structures */

	/* Wait until offset */
	next_tick += TICK2HZ * IWDG_task_info.offset;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	ee07 3a90 	vmov	s15, r3
 80031ea:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80031ee:	eddf 6a10 	vldr	s13, [pc, #64]	; 8003230 <start_IWDG_task+0x70>
 80031f2:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800322c <start_IWDG_task+0x6c>
 80031f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003202:	ee17 3a90 	vmov	r3, s15
 8003206:	60fb      	str	r3, [r7, #12]
	osDelayUntil(next_tick);
 8003208:	68f8      	ldr	r0, [r7, #12]
 800320a:	f012 fdaa 	bl	8015d62 <osDelayUntil>

	//initialize_IWDG(&hiwdg, IWDG_task_info.periodicity);

	for (;;) {
		/* Enter periodic behaviour */
		HAL_IWDG_Refresh(&hiwdg);
 800320e:	4809      	ldr	r0, [pc, #36]	; (8003234 <start_IWDG_task+0x74>)
 8003210:	f00f fc2b 	bl	8012a6a <HAL_IWDG_Refresh>

		/* Wait until next period */
		next_tick += tick_increment;
 8003214:	68fa      	ldr	r2, [r7, #12]
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	4413      	add	r3, r2
 800321a:	60fb      	str	r3, [r7, #12]
		osDelayUntil(next_tick);
 800321c:	68f8      	ldr	r0, [r7, #12]
 800321e:	f012 fda0 	bl	8015d62 <osDelayUntil>
		HAL_IWDG_Refresh(&hiwdg);
 8003222:	e7f4      	b.n	800320e <start_IWDG_task+0x4e>
 8003224:	2001b788 	.word	0x2001b788
 8003228:	3f4ccccd 	.word	0x3f4ccccd
 800322c:	447a0000 	.word	0x447a0000
 8003230:	00000000 	.word	0x00000000
 8003234:	2001b68c 	.word	0x2001b68c

08003238 <start_event_handler_task>:
	}
}

void start_event_handler_task(void *argument) {
 8003238:	b580      	push	{r7, lr}
 800323a:	b084      	sub	sp, #16
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 8003240:	4b15      	ldr	r3, [pc, #84]	; (8003298 <start_event_handler_task+0x60>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	60fb      	str	r3, [r7, #12]
	uint32_t tick_increment = TICK2HZ * event_handler_task_info.periodicity;
 8003246:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800329c <start_event_handler_task+0x64>
 800324a:	eddf 7a15 	vldr	s15, [pc, #84]	; 80032a0 <start_event_handler_task+0x68>
 800324e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003252:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003256:	ee17 3a90 	vmov	r3, s15
 800325a:	60bb      	str	r3, [r7, #8]

	/* Make task-specific structures */

	/* Wait until offset */
	next_tick += TICK2HZ * event_handler_task_info.offset;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	ee07 3a90 	vmov	s15, r3
 8003262:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003266:	eddf 6a0f 	vldr	s13, [pc, #60]	; 80032a4 <start_event_handler_task+0x6c>
 800326a:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80032a0 <start_event_handler_task+0x68>
 800326e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003272:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003276:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800327a:	ee17 3a90 	vmov	r3, s15
 800327e:	60fb      	str	r3, [r7, #12]
	osDelayUntil(next_tick);
 8003280:	68f8      	ldr	r0, [r7, #12]
 8003282:	f012 fd6e 	bl	8015d62 <osDelayUntil>

	for (;;) {
		/* Enter periodic behaviour */

		/* Wait until next period */
		next_tick += tick_increment;
 8003286:	68fa      	ldr	r2, [r7, #12]
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	4413      	add	r3, r2
 800328c:	60fb      	str	r3, [r7, #12]
		osDelayUntil(next_tick);
 800328e:	68f8      	ldr	r0, [r7, #12]
 8003290:	f012 fd67 	bl	8015d62 <osDelayUntil>
		next_tick += tick_increment;
 8003294:	e7f7      	b.n	8003286 <start_event_handler_task+0x4e>
 8003296:	bf00      	nop
 8003298:	2001b788 	.word	0x2001b788
 800329c:	3f4ccccd 	.word	0x3f4ccccd
 80032a0:	447a0000 	.word	0x447a0000
 80032a4:	00000000 	.word	0x00000000

080032a8 <start_IMD_task>:
	}
}

void start_IMD_task(void *argument) {
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b088      	sub	sp, #32
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 80032b0:	4b22      	ldr	r3, [pc, #136]	; (800333c <start_IMD_task+0x94>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	61fb      	str	r3, [r7, #28]
	uint32_t tick_increment = TICK2HZ * IMD_task_info.periodicity;
 80032b6:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8003340 <start_IMD_task+0x98>
 80032ba:	eddf 7a22 	vldr	s15, [pc, #136]	; 8003344 <start_IMD_task+0x9c>
 80032be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80032c6:	ee17 3a90 	vmov	r3, s15
 80032ca:	61bb      	str	r3, [r7, #24]

	/* Make task-specific structures */
	IMD_t IMD;
	initialize_IMD(&htim2);
 80032cc:	481e      	ldr	r0, [pc, #120]	; (8003348 <start_IMD_task+0xa0>)
 80032ce:	f7fe fdc5 	bl	8001e5c <initialize_IMD>

	/* Wait until offset */
	next_tick += TICK2HZ * IMD_task_info.offset;
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	ee07 3a90 	vmov	s15, r3
 80032d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80032dc:	eddf 6a1b 	vldr	s13, [pc, #108]	; 800334c <start_IMD_task+0xa4>
 80032e0:	eddf 7a18 	vldr	s15, [pc, #96]	; 8003344 <start_IMD_task+0x9c>
 80032e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80032f0:	ee17 3a90 	vmov	r3, s15
 80032f4:	61fb      	str	r3, [r7, #28]
	osDelayUntil(next_tick);
 80032f6:	69f8      	ldr	r0, [r7, #28]
 80032f8:	f012 fd33 	bl	8015d62 <osDelayUntil>

	for (;;) {
		/* Enter periodic behaviour */

		if (xQueueReceive(IMD_queue, &IMD, 0)) {
 80032fc:	4b14      	ldr	r3, [pc, #80]	; (8003350 <start_IMD_task+0xa8>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f107 010c 	add.w	r1, r7, #12
 8003304:	2200      	movs	r2, #0
 8003306:	4618      	mov	r0, r3
 8003308:	f013 f95a 	bl	80165c0 <xQueueReceive>
 800330c:	4603      	mov	r3, r0
 800330e:	2b00      	cmp	r3, #0
 8003310:	d00b      	beq.n	800332a <start_IMD_task+0x82>
			uint8_t frequency_range = (uint8_t) (IMD.frequency / 10);
 8003312:	ed97 7a04 	vldr	s14, [r7, #16]
 8003316:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800331a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800331e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003322:	edc7 7a00 	vstr	s15, [r7]
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	75fb      	strb	r3, [r7, #23]

		}

		/* Wait until next period */
		next_tick += tick_increment;
 800332a:	69fa      	ldr	r2, [r7, #28]
 800332c:	69bb      	ldr	r3, [r7, #24]
 800332e:	4413      	add	r3, r2
 8003330:	61fb      	str	r3, [r7, #28]
		osDelayUntil(next_tick);
 8003332:	69f8      	ldr	r0, [r7, #28]
 8003334:	f012 fd15 	bl	8015d62 <osDelayUntil>
		if (xQueueReceive(IMD_queue, &IMD, 0)) {
 8003338:	e7e0      	b.n	80032fc <start_IMD_task+0x54>
 800333a:	bf00      	nop
 800333c:	2001b788 	.word	0x2001b788
 8003340:	3f4ccccd 	.word	0x3f4ccccd
 8003344:	447a0000 	.word	0x447a0000
 8003348:	2001bd80 	.word	0x2001bd80
 800334c:	00000000 	.word	0x00000000
 8003350:	2001b574 	.word	0x2001b574

08003354 <start_GPIO_task>:
	}
}

void start_GPIO_task(void *argument) {
 8003354:	b580      	push	{r7, lr}
 8003356:	b086      	sub	sp, #24
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 800335c:	4b27      	ldr	r3, [pc, #156]	; (80033fc <start_GPIO_task+0xa8>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	617b      	str	r3, [r7, #20]
	uint32_t tick_increment = TICK2HZ * GPIO_task_info.periodicity;
 8003362:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8003400 <start_GPIO_task+0xac>
 8003366:	eddf 7a27 	vldr	s15, [pc, #156]	; 8003404 <start_GPIO_task+0xb0>
 800336a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800336e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003372:	ee17 3a90 	vmov	r3, s15
 8003376:	613b      	str	r3, [r7, #16]

	/* Make task-specific structures */
	GPIO_t GPIO;

	/* Wait until offset */
	next_tick += TICK2HZ * GPIO_task_info.offset;
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	ee07 3a90 	vmov	s15, r3
 800337e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003382:	eddf 6a21 	vldr	s13, [pc, #132]	; 8003408 <start_GPIO_task+0xb4>
 8003386:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8003404 <start_GPIO_task+0xb0>
 800338a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800338e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003392:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003396:	ee17 3a90 	vmov	r3, s15
 800339a:	617b      	str	r3, [r7, #20]
	osDelayUntil(next_tick);
 800339c:	6978      	ldr	r0, [r7, #20]
 800339e:	f012 fce0 	bl	8015d62 <osDelayUntil>

	for (;;) {
		/* Enter periodic behaviour */
		GPIO.AMS_error_latched = get_ams_error_latched_ext();
 80033a2:	f000 fbdd 	bl	8003b60 <get_ams_error_latched_ext>
 80033a6:	4603      	mov	r3, r0
 80033a8:	723b      	strb	r3, [r7, #8]
		GPIO.IMD_error_latched = get_imd_error_latched_ext();
 80033aa:	f000 fbe5 	bl	8003b78 <get_imd_error_latched_ext>
 80033ae:	4603      	mov	r3, r0
 80033b0:	727b      	strb	r3, [r7, #9]
		GPIO.SC_probe = get_sc_probe_ext();
 80033b2:	f000 fbed 	bl	8003b90 <get_sc_probe_ext>
 80033b6:	4603      	mov	r3, r0
 80033b8:	72bb      	strb	r3, [r7, #10]
		GPIO.IMD_ok = get_imd_ok_ext();
 80033ba:	f000 fbf9 	bl	8003bb0 <get_imd_ok_ext>
 80033be:	4603      	mov	r3, r0
 80033c0:	72fb      	strb	r3, [r7, #11]
		GPIO.AIR_plus_closed = get_air_plus_ext();
 80033c2:	f000 fb75 	bl	8003ab0 <get_air_plus_ext>
 80033c6:	4603      	mov	r3, r0
 80033c8:	733b      	strb	r3, [r7, #12]
		GPIO.AIR_minus_closed = get_air_minus_ext();
 80033ca:	f000 fb95 	bl	8003af8 <get_air_minus_ext>
 80033ce:	4603      	mov	r3, r0
 80033d0:	737b      	strb	r3, [r7, #13]
		GPIO.precharge_closed = get_precharge_ext();
 80033d2:	f000 fbb5 	bl	8003b40 <get_precharge_ext>
 80033d6:	4603      	mov	r3, r0
 80033d8:	73bb      	strb	r3, [r7, #14]

		xQueueOverwrite(GPIO_queue, &GPIO);
 80033da:	4b0c      	ldr	r3, [pc, #48]	; (800340c <start_GPIO_task+0xb8>)
 80033dc:	6818      	ldr	r0, [r3, #0]
 80033de:	f107 0108 	add.w	r1, r7, #8
 80033e2:	2302      	movs	r3, #2
 80033e4:	2200      	movs	r2, #0
 80033e6:	f012 ff15 	bl	8016214 <xQueueGenericSend>

		/* Wait until next period */
		next_tick += tick_increment;
 80033ea:	697a      	ldr	r2, [r7, #20]
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	4413      	add	r3, r2
 80033f0:	617b      	str	r3, [r7, #20]
		osDelayUntil(next_tick);
 80033f2:	6978      	ldr	r0, [r7, #20]
 80033f4:	f012 fcb5 	bl	8015d62 <osDelayUntil>
		GPIO.AMS_error_latched = get_ams_error_latched_ext();
 80033f8:	e7d3      	b.n	80033a2 <start_GPIO_task+0x4e>
 80033fa:	bf00      	nop
 80033fc:	2001b788 	.word	0x2001b788
 8003400:	3f4ccccd 	.word	0x3f4ccccd
 8003404:	447a0000 	.word	0x447a0000
 8003408:	00000000 	.word	0x00000000
 800340c:	2001b584 	.word	0x2001b584

08003410 <start_ADC_task>:
	}
}

void start_ADC_task(void *argument) {
 8003410:	b580      	push	{r7, lr}
 8003412:	b0a8      	sub	sp, #160	; 0xa0
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 8003418:	4b26      	ldr	r3, [pc, #152]	; (80034b4 <start_ADC_task+0xa4>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	uint32_t tick_increment = TICK2HZ * ADC_task_info.periodicity;
 8003420:	ed9f 7a25 	vldr	s14, [pc, #148]	; 80034b8 <start_ADC_task+0xa8>
 8003424:	eddf 7a25 	vldr	s15, [pc, #148]	; 80034bc <start_ADC_task+0xac>
 8003428:	ee67 7a27 	vmul.f32	s15, s14, s15
 800342c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003430:	ee17 3a90 	vmov	r3, s15
 8003434:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

	/* Make task-specific structures */
	uint16_t adc_readings[4 * 16];
	ADC_initialize(&htim3);
 8003438:	4821      	ldr	r0, [pc, #132]	; (80034c0 <start_ADC_task+0xb0>)
 800343a:	f7ff f9f1 	bl	8002820 <ADC_initialize>
	temperatures_t temperatures;

	/* Wait until offset */
	next_tick += TICK2HZ * ADC_task_info.offset;
 800343e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003442:	ee07 3a90 	vmov	s15, r3
 8003446:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800344a:	eddf 6a1e 	vldr	s13, [pc, #120]	; 80034c4 <start_ADC_task+0xb4>
 800344e:	eddf 7a1b 	vldr	s15, [pc, #108]	; 80034bc <start_ADC_task+0xac>
 8003452:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003456:	ee77 7a27 	vadd.f32	s15, s14, s15
 800345a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800345e:	ee17 3a90 	vmov	r3, s15
 8003462:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	osDelayUntil(next_tick);
 8003466:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800346a:	f012 fc7a 	bl	8015d62 <osDelayUntil>

	for (;;) {
		/* Enter periodic behaviour */
		ADC_step((uint32_t*) &adc_readings, sizeof((uint32_t*) adc_readings));
 800346e:	f107 0318 	add.w	r3, r7, #24
 8003472:	2104      	movs	r1, #4
 8003474:	4618      	mov	r0, r3
 8003476:	f7ff f9e7 	bl	8002848 <ADC_step>
		interpret_ADC_buffer(&temperatures, adc_readings, 16);
 800347a:	f107 0118 	add.w	r1, r7, #24
 800347e:	f107 0308 	add.w	r3, r7, #8
 8003482:	2210      	movs	r2, #16
 8003484:	4618      	mov	r0, r3
 8003486:	f7ff f803 	bl	8002490 <interpret_ADC_buffer>

		xQueueOverwrite(temperatures_queue, &temperatures);
 800348a:	4b0f      	ldr	r3, [pc, #60]	; (80034c8 <start_ADC_task+0xb8>)
 800348c:	6818      	ldr	r0, [r3, #0]
 800348e:	f107 0108 	add.w	r1, r7, #8
 8003492:	2302      	movs	r3, #2
 8003494:	2200      	movs	r2, #0
 8003496:	f012 febd 	bl	8016214 <xQueueGenericSend>

		/* Wait until next period */
		next_tick += tick_increment;
 800349a:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800349e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80034a2:	4413      	add	r3, r2
 80034a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		osDelayUntil(next_tick);
 80034a8:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80034ac:	f012 fc59 	bl	8015d62 <osDelayUntil>
		ADC_step((uint32_t*) &adc_readings, sizeof((uint32_t*) adc_readings));
 80034b0:	e7dd      	b.n	800346e <start_ADC_task+0x5e>
 80034b2:	bf00      	nop
 80034b4:	2001b788 	.word	0x2001b788
 80034b8:	3f4ccccd 	.word	0x3f4ccccd
 80034bc:	447a0000 	.word	0x447a0000
 80034c0:	2001bcf0 	.word	0x2001bcf0
 80034c4:	00000000 	.word	0x00000000
 80034c8:	2001b570 	.word	0x2001b570

080034cc <start_COM_task>:
	}
}

void start_COM_task(void *argument) {
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b090      	sub	sp, #64	; 0x40
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 80034d4:	4b64      	ldr	r3, [pc, #400]	; (8003668 <start_COM_task+0x19c>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t tick_increment = TICK2HZ * COM_task_info.periodicity;
 80034da:	ed9f 7a64 	vldr	s14, [pc, #400]	; 800366c <start_COM_task+0x1a0>
 80034de:	eddf 7a64 	vldr	s15, [pc, #400]	; 8003670 <start_COM_task+0x1a4>
 80034e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034ea:	ee17 3a90 	vmov	r3, s15
 80034ee:	633b      	str	r3, [r7, #48]	; 0x30

	/* Make task-specific structures */
	const float voltage_time_constraint = 0.5;
 80034f0:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 80034f4:	62fb      	str	r3, [r7, #44]	; 0x2c
	const float temperature_time_constraint = 1.0;
 80034f6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80034fa:	62bb      	str	r3, [r7, #40]	; 0x28
	const float current_time_constraint = 0.5;
 80034fc:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8003500:	627b      	str	r3, [r7, #36]	; 0x24
	const float valid_data_time_constraint = 5.0;
 8003502:	4b5c      	ldr	r3, [pc, #368]	; (8003674 <start_COM_task+0x1a8>)
 8003504:	623b      	str	r3, [r7, #32]

	uint16_t voltage_sample_constraint = (voltage_time_constraint
			/ COM_task_info.periodicity);
 8003506:	eddf 6a59 	vldr	s13, [pc, #356]	; 800366c <start_COM_task+0x1a0>
 800350a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800350e:	eec7 7a26 	vdiv.f32	s15, s14, s13
	uint16_t voltage_sample_constraint = (voltage_time_constraint
 8003512:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003516:	ee17 3a90 	vmov	r3, s15
 800351a:	877b      	strh	r3, [r7, #58]	; 0x3a
	if (voltage_sample_constraint < 1) {
 800351c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800351e:	2b00      	cmp	r3, #0
 8003520:	d101      	bne.n	8003526 <start_COM_task+0x5a>
		voltage_sample_constraint = 1;
 8003522:	2301      	movs	r3, #1
 8003524:	877b      	strh	r3, [r7, #58]	; 0x3a
	}

	uint16_t temperature_sample_constraint = (temperature_time_constraint
			/ COM_task_info.periodicity);
 8003526:	eddf 6a51 	vldr	s13, [pc, #324]	; 800366c <start_COM_task+0x1a0>
 800352a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800352e:	eec7 7a26 	vdiv.f32	s15, s14, s13
	uint16_t temperature_sample_constraint = (temperature_time_constraint
 8003532:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003536:	ee17 3a90 	vmov	r3, s15
 800353a:	873b      	strh	r3, [r7, #56]	; 0x38
	if (temperature_sample_constraint < 1) {
 800353c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800353e:	2b00      	cmp	r3, #0
 8003540:	d101      	bne.n	8003546 <start_COM_task+0x7a>
		temperature_sample_constraint = 1;
 8003542:	2301      	movs	r3, #1
 8003544:	873b      	strh	r3, [r7, #56]	; 0x38
	}

	uint16_t current_sample_constraint = (current_time_constraint
			/ COM_task_info.periodicity);
 8003546:	eddf 6a49 	vldr	s13, [pc, #292]	; 800366c <start_COM_task+0x1a0>
 800354a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800354e:	eec7 7a26 	vdiv.f32	s15, s14, s13
	uint16_t current_sample_constraint = (current_time_constraint
 8003552:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003556:	ee17 3a90 	vmov	r3, s15
 800355a:	86fb      	strh	r3, [r7, #54]	; 0x36
	if (current_sample_constraint < 1) {
 800355c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800355e:	2b00      	cmp	r3, #0
 8003560:	d101      	bne.n	8003566 <start_COM_task+0x9a>
		current_sample_constraint = 1;
 8003562:	2301      	movs	r3, #1
 8003564:	86fb      	strh	r3, [r7, #54]	; 0x36
	}

	uint16_t valid_data_sample_constraint = (valid_data_time_constraint
			/ COM_task_info.periodicity);
 8003566:	eddf 6a41 	vldr	s13, [pc, #260]	; 800366c <start_COM_task+0x1a0>
 800356a:	ed97 7a08 	vldr	s14, [r7, #32]
 800356e:	eec7 7a26 	vdiv.f32	s15, s14, s13
	uint16_t valid_data_sample_constraint = (valid_data_time_constraint
 8003572:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003576:	ee17 3a90 	vmov	r3, s15
 800357a:	86bb      	strh	r3, [r7, #52]	; 0x34
	if (valid_data_sample_constraint < 1) {
 800357c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800357e:	2b00      	cmp	r3, #0
 8003580:	d101      	bne.n	8003586 <start_COM_task+0xba>
		valid_data_sample_constraint = 1;
 8003582:	2301      	movs	r3, #1
 8003584:	86bb      	strh	r3, [r7, #52]	; 0x34
	uint16_t cell_temperatures_valid;
	double current;
	uint16_t current_valid;

	/* Wait until offset */
	next_tick += TICK2HZ * COM_task_info.offset;
 8003586:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003588:	ee07 3a90 	vmov	s15, r3
 800358c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003590:	eddf 6a39 	vldr	s13, [pc, #228]	; 8003678 <start_COM_task+0x1ac>
 8003594:	eddf 7a36 	vldr	s15, [pc, #216]	; 8003670 <start_COM_task+0x1a4>
 8003598:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800359c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80035a4:	ee17 3a90 	vmov	r3, s15
 80035a8:	63fb      	str	r3, [r7, #60]	; 0x3c
	osDelayUntil(next_tick);
 80035aa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80035ac:	f012 fbd9 	bl	8015d62 <osDelayUntil>

	for (;;) {
		/* Enter periodic behaviour */

		LTC_acquire_data(1);
 80035b0:	2001      	movs	r0, #1
 80035b2:	f000 fc3f 	bl	8003e34 <LTC_acquire_data>

		cell_voltages = &SIM0_Y.cell_voltages;
 80035b6:	4b31      	ldr	r3, [pc, #196]	; (800367c <start_COM_task+0x1b0>)
 80035b8:	617b      	str	r3, [r7, #20]
		cell_temperatures = &SIM0_Y.cell_temperatures;
 80035ba:	4b31      	ldr	r3, [pc, #196]	; (8003680 <start_COM_task+0x1b4>)
 80035bc:	613b      	str	r3, [r7, #16]
		cell_voltages_valid = 0x3FFF;
 80035be:	f643 73ff 	movw	r3, #16383	; 0x3fff
 80035c2:	83fb      	strh	r3, [r7, #30]
		cell_temperatures_valid = 0x3FFF;
 80035c4:	f643 73ff 	movw	r3, #16383	; 0x3fff
 80035c8:	83bb      	strh	r3, [r7, #28]

		current_valid = xQueueReceive(accumulator_current_queue, &current, 0);
 80035ca:	4b2e      	ldr	r3, [pc, #184]	; (8003684 <start_COM_task+0x1b8>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f107 0108 	add.w	r1, r7, #8
 80035d2:	2200      	movs	r2, #0
 80035d4:	4618      	mov	r0, r3
 80035d6:	f012 fff3 	bl	80165c0 <xQueueReceive>
 80035da:	4603      	mov	r3, r0
 80035dc:	837b      	strh	r3, [r7, #26]

		//cell_voltages = LTC_voltages;
		//cell_temperatures = LTC_temperatures;
		if (!COM_data_valid_ok(
				(cell_voltages_valid == 0x03FF)
						&& (cell_temperatures_valid == 0x03FF) && current_valid,
 80035de:	8bfb      	ldrh	r3, [r7, #30]
 80035e0:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d109      	bne.n	80035fc <start_COM_task+0x130>
 80035e8:	8bbb      	ldrh	r3, [r7, #28]
 80035ea:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d104      	bne.n	80035fc <start_COM_task+0x130>
 80035f2:	8b7b      	ldrh	r3, [r7, #26]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d001      	beq.n	80035fc <start_COM_task+0x130>
 80035f8:	2301      	movs	r3, #1
 80035fa:	e000      	b.n	80035fe <start_COM_task+0x132>
 80035fc:	2300      	movs	r3, #0
		if (!COM_data_valid_ok(
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003602:	4611      	mov	r1, r2
 8003604:	4618      	mov	r0, r3
 8003606:	f7fe fb49 	bl	8001c9c <COM_data_valid_ok>
				valid_data_sample_constraint)) {

			//Error_Handler();
		}

		if (!COM_voltages_ok_d(cell_voltages, cell_voltages_valid,
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	8bfa      	ldrh	r2, [r7, #30]
 800360e:	b2d1      	uxtb	r1, r2
 8003610:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8003612:	4618      	mov	r0, r3
 8003614:	f7fe fa04 	bl	8001a20 <COM_voltages_ok_d>
				voltage_sample_constraint)) {

			//Error_Handler();
		}

		if (!COM_temperatures_ok_d(cell_temperatures, cell_temperatures_valid,
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	8bba      	ldrh	r2, [r7, #28]
 800361c:	b2d1      	uxtb	r1, r2
 800361e:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8003620:	4618      	mov	r0, r3
 8003622:	f7fe fa6f 	bl	8001b04 <COM_temperatures_ok_d>
				temperature_sample_constraint)) {

			//Error_Handler();
		}

		if (!COM_current_ok_d(&current, current_valid,
 8003626:	8b7b      	ldrh	r3, [r7, #26]
 8003628:	b2d9      	uxtb	r1, r3
 800362a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800362c:	f107 0308 	add.w	r3, r7, #8
 8003630:	4618      	mov	r0, r3
 8003632:	f7fe fad9 	bl	8001be8 <COM_current_ok_d>

			//Error_Handler();

		}

		xQueueOverwrite(cell_voltages_queue, &cell_voltages);
 8003636:	4b14      	ldr	r3, [pc, #80]	; (8003688 <start_COM_task+0x1bc>)
 8003638:	6818      	ldr	r0, [r3, #0]
 800363a:	f107 0114 	add.w	r1, r7, #20
 800363e:	2302      	movs	r3, #2
 8003640:	2200      	movs	r2, #0
 8003642:	f012 fde7 	bl	8016214 <xQueueGenericSend>
		xQueueOverwrite(cell_temperatures_queue, &cell_temperatures);
 8003646:	4b11      	ldr	r3, [pc, #68]	; (800368c <start_COM_task+0x1c0>)
 8003648:	6818      	ldr	r0, [r3, #0]
 800364a:	f107 0110 	add.w	r1, r7, #16
 800364e:	2302      	movs	r3, #2
 8003650:	2200      	movs	r2, #0
 8003652:	f012 fddf 	bl	8016214 <xQueueGenericSend>

		/* Wait until next period */
		next_tick += tick_increment;
 8003656:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800365a:	4413      	add	r3, r2
 800365c:	63fb      	str	r3, [r7, #60]	; 0x3c
		osDelayUntil(next_tick);
 800365e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003660:	f012 fb7f 	bl	8015d62 <osDelayUntil>
		LTC_acquire_data(1);
 8003664:	e7a4      	b.n	80035b0 <start_COM_task+0xe4>
 8003666:	bf00      	nop
 8003668:	2001b788 	.word	0x2001b788
 800366c:	3f4ccccd 	.word	0x3f4ccccd
 8003670:	447a0000 	.word	0x447a0000
 8003674:	40a00000 	.word	0x40a00000
 8003678:	00000000 	.word	0x00000000
 800367c:	2001d6e8 	.word	0x2001d6e8
 8003680:	2001e2b8 	.word	0x2001e2b8
 8003684:	2001b590 	.word	0x2001b590
 8003688:	2001b568 	.word	0x2001b568
 800368c:	2001b57c 	.word	0x2001b57c

08003690 <start_CAN_task>:
	}
}

void start_CAN_task(void *argument) {
 8003690:	b580      	push	{r7, lr}
 8003692:	b084      	sub	sp, #16
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 8003698:	4b15      	ldr	r3, [pc, #84]	; (80036f0 <start_CAN_task+0x60>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	60fb      	str	r3, [r7, #12]
	uint32_t tick_increment = TICK2HZ * CAN_task_info.periodicity;
 800369e:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80036f4 <start_CAN_task+0x64>
 80036a2:	eddf 7a15 	vldr	s15, [pc, #84]	; 80036f8 <start_CAN_task+0x68>
 80036a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036ae:	ee17 3a90 	vmov	r3, s15
 80036b2:	60bb      	str	r3, [r7, #8]

	/* Make task-specific structures */

	/* Wait until offset */
	next_tick += TICK2HZ * CAN_task_info.offset;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	ee07 3a90 	vmov	s15, r3
 80036ba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80036be:	eddf 6a0f 	vldr	s13, [pc, #60]	; 80036fc <start_CAN_task+0x6c>
 80036c2:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80036f8 <start_CAN_task+0x68>
 80036c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036d2:	ee17 3a90 	vmov	r3, s15
 80036d6:	60fb      	str	r3, [r7, #12]
	osDelayUntil(next_tick);
 80036d8:	68f8      	ldr	r0, [r7, #12]
 80036da:	f012 fb42 	bl	8015d62 <osDelayUntil>
		/* Enter periodic behaviour */



		/* Wait until next period */
		next_tick += tick_increment;
 80036de:	68fa      	ldr	r2, [r7, #12]
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	4413      	add	r3, r2
 80036e4:	60fb      	str	r3, [r7, #12]
		osDelayUntil(next_tick);
 80036e6:	68f8      	ldr	r0, [r7, #12]
 80036e8:	f012 fb3b 	bl	8015d62 <osDelayUntil>
		next_tick += tick_increment;
 80036ec:	e7f7      	b.n	80036de <start_CAN_task+0x4e>
 80036ee:	bf00      	nop
 80036f0:	2001b788 	.word	0x2001b788
 80036f4:	3f4ccccd 	.word	0x3f4ccccd
 80036f8:	447a0000 	.word	0x447a0000
 80036fc:	00000000 	.word	0x00000000

08003700 <start_CSE_task>:
	}
}

void start_CSE_task(void *argument) {
 8003700:	b580      	push	{r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 8003708:	4b1d      	ldr	r3, [pc, #116]	; (8003780 <start_CSE_task+0x80>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	60fb      	str	r3, [r7, #12]
	uint32_t tick_increment = TICK2HZ * CSE_task_info.periodicity;
 800370e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8003784 <start_CSE_task+0x84>
 8003712:	eddf 7a1d 	vldr	s15, [pc, #116]	; 8003788 <start_CSE_task+0x88>
 8003716:	ee67 7a27 	vmul.f32	s15, s14, s15
 800371a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800371e:	ee17 3a90 	vmov	r3, s15
 8003722:	60bb      	str	r3, [r7, #8]

	/* Make task-specific structures */
	CSE_initialize();
 8003724:	f003 f8cc 	bl	80068c0 <CSE_initialize>

	/* Wait until offset */
	next_tick += TICK2HZ * CSE_task_info.offset;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	ee07 3a90 	vmov	s15, r3
 800372e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003732:	eddf 6a16 	vldr	s13, [pc, #88]	; 800378c <start_CSE_task+0x8c>
 8003736:	eddf 7a14 	vldr	s15, [pc, #80]	; 8003788 <start_CSE_task+0x88>
 800373a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800373e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003742:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003746:	ee17 3a90 	vmov	r3, s15
 800374a:	60fb      	str	r3, [r7, #12]
	osDelayUntil(next_tick);
 800374c:	68f8      	ldr	r0, [r7, #12]
 800374e:	f012 fb08 	bl	8015d62 <osDelayUntil>

	for (;;) {
		/* Enter periodic behaviour */
		CSE_U.current = SIM0_Y.current;
 8003752:	4b0f      	ldr	r3, [pc, #60]	; (8003790 <start_CSE_task+0x90>)
 8003754:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8003758:	490e      	ldr	r1, [pc, #56]	; (8003794 <start_CSE_task+0x94>)
 800375a:	e9c1 2300 	strd	r2, r3, [r1]
		CSE_U.y = SIM0_Y.cell_voltages[0];
 800375e:	4b0c      	ldr	r3, [pc, #48]	; (8003790 <start_CSE_task+0x90>)
 8003760:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8003764:	490b      	ldr	r1, [pc, #44]	; (8003794 <start_CSE_task+0x94>)
 8003766:	e9c1 2302 	strd	r2, r3, [r1, #8]

		CSE_step();
 800376a:	f001 fda5 	bl	80052b8 <CSE_step>

		/* Wait until next period */
		next_tick += tick_increment;
 800376e:	68fa      	ldr	r2, [r7, #12]
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	4413      	add	r3, r2
 8003774:	60fb      	str	r3, [r7, #12]
		osDelayUntil(next_tick);
 8003776:	68f8      	ldr	r0, [r7, #12]
 8003778:	f012 faf3 	bl	8015d62 <osDelayUntil>
		CSE_U.current = SIM0_Y.current;
 800377c:	e7e9      	b.n	8003752 <start_CSE_task+0x52>
 800377e:	bf00      	nop
 8003780:	2001b788 	.word	0x2001b788
 8003784:	3f4ccccd 	.word	0x3f4ccccd
 8003788:	447a0000 	.word	0x447a0000
 800378c:	00000000 	.word	0x00000000
 8003790:	2001d6a8 	.word	0x2001d6a8
 8003794:	2001bdd8 	.word	0x2001bdd8

08003798 <start_COOL_task>:
	}
}

void start_COOL_task(void *argument) {
 8003798:	b580      	push	{r7, lr}
 800379a:	b096      	sub	sp, #88	; 0x58
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 80037a0:	4b31      	ldr	r3, [pc, #196]	; (8003868 <start_COOL_task+0xd0>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t tick_increment = TICK2HZ * COOL_task_info.periodicity;
 80037a6:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800386c <start_COOL_task+0xd4>
 80037aa:	eddf 7a31 	vldr	s15, [pc, #196]	; 8003870 <start_COOL_task+0xd8>
 80037ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80037b6:	ee17 3a90 	vmov	r3, s15
 80037ba:	64fb      	str	r3, [r7, #76]	; 0x4c

	/* Make task-specific structures */
	PID_t PID;
	float temperature = 20;
 80037bc:	4b2d      	ldr	r3, [pc, #180]	; (8003874 <start_COOL_task+0xdc>)
 80037be:	653b      	str	r3, [r7, #80]	; 0x50

	PID_initialize(&PID, // *ptr
 80037c0:	f107 0310 	add.w	r3, r7, #16
 80037c4:	eddf 2a2c 	vldr	s5, [pc, #176]	; 8003878 <start_COOL_task+0xe0>
 80037c8:	eeb3 2a04 	vmov.f32	s4, #52	; 0x41a00000  20.0
 80037cc:	eddf 1a2b 	vldr	s3, [pc, #172]	; 800387c <start_COOL_task+0xe4>
 80037d0:	ed9f 1a2a 	vldr	s2, [pc, #168]	; 800387c <start_COOL_task+0xe4>
 80037d4:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80037d8:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 80037dc:	4618      	mov	r0, r3
 80037de:	f7fe fbcc 	bl	8001f7a <PID_initialize>
			0,	// Proportionate gain
			0,	// Proportionate gain
			20,	// Lower PID output bound
			100	// Upper PID output bound
			);
	FAN_initialize(&htim1);
 80037e2:	4827      	ldr	r0, [pc, #156]	; (8003880 <start_COOL_task+0xe8>)
 80037e4:	f7fe fa76 	bl	8001cd4 <FAN_initialize>

	double *temperatures;

	/* Wait until offset */
	next_tick += TICK2HZ * COOL_task_info.offset;
 80037e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037ea:	ee07 3a90 	vmov	s15, r3
 80037ee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80037f2:	eddf 6a22 	vldr	s13, [pc, #136]	; 800387c <start_COOL_task+0xe4>
 80037f6:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8003870 <start_COOL_task+0xd8>
 80037fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80037fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003802:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003806:	ee17 3a90 	vmov	r3, s15
 800380a:	657b      	str	r3, [r7, #84]	; 0x54
	osDelayUntil(next_tick);
 800380c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800380e:	f012 faa8 	bl	8015d62 <osDelayUntil>

	for (;;) {
		/* Enter periodic behaviour */

		if (xQueuePeek(cell_temperatures_queue, &temperatures, 0)) {
 8003812:	4b1c      	ldr	r3, [pc, #112]	; (8003884 <start_COOL_task+0xec>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f107 010c 	add.w	r1, r7, #12
 800381a:	2200      	movs	r2, #0
 800381c:	4618      	mov	r0, r3
 800381e:	f012 ffdf 	bl	80167e0 <xQueuePeek>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d008      	beq.n	800383a <start_COOL_task+0xa2>
			temperature = temperatures[0];
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800382e:	4610      	mov	r0, r2
 8003830:	4619      	mov	r1, r3
 8003832:	f7fd f9cb 	bl	8000bcc <__aeabi_d2f>
 8003836:	4603      	mov	r3, r0
 8003838:	653b      	str	r3, [r7, #80]	; 0x50
		}

		PID_progress(&PID, temperature);
 800383a:	f107 0310 	add.w	r3, r7, #16
 800383e:	ed97 0a14 	vldr	s0, [r7, #80]	; 0x50
 8003842:	4618      	mov	r0, r3
 8003844:	f7fe fb2a 	bl	8001e9c <PID_progress>
		FAN_duty_cycle(&htim1, PID.output);
 8003848:	edd7 7a06 	vldr	s15, [r7, #24]
 800384c:	eeb0 0a67 	vmov.f32	s0, s15
 8003850:	480b      	ldr	r0, [pc, #44]	; (8003880 <start_COOL_task+0xe8>)
 8003852:	f7fe fa69 	bl	8001d28 <FAN_duty_cycle>

		/* Wait until next period */
		next_tick += tick_increment;
 8003856:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003858:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800385a:	4413      	add	r3, r2
 800385c:	657b      	str	r3, [r7, #84]	; 0x54
		osDelayUntil(next_tick);
 800385e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8003860:	f012 fa7f 	bl	8015d62 <osDelayUntil>
		if (xQueuePeek(cell_temperatures_queue, &temperatures, 0)) {
 8003864:	e7d5      	b.n	8003812 <start_COOL_task+0x7a>
 8003866:	bf00      	nop
 8003868:	2001b788 	.word	0x2001b788
 800386c:	3f4ccccd 	.word	0x3f4ccccd
 8003870:	447a0000 	.word	0x447a0000
 8003874:	41a00000 	.word	0x41a00000
 8003878:	42c80000 	.word	0x42c80000
 800387c:	00000000 	.word	0x00000000
 8003880:	2001bd38 	.word	0x2001bd38
 8003884:	2001b57c 	.word	0x2001b57c

08003888 <start_SIM_task>:
	}
}

void start_SIM_task(void *argument) {
 8003888:	b590      	push	{r4, r7, lr}
 800388a:	b087      	sub	sp, #28
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 8003890:	4b5d      	ldr	r3, [pc, #372]	; (8003a08 <start_SIM_task+0x180>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	617b      	str	r3, [r7, #20]
	uint32_t tick_increment = TICK2HZ * SIM_task_info.periodicity;
 8003896:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8003a0c <start_SIM_task+0x184>
 800389a:	eddf 7a5d 	vldr	s15, [pc, #372]	; 8003a10 <start_SIM_task+0x188>
 800389e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038a6:	ee17 3a90 	vmov	r3, s15
 80038aa:	613b      	str	r3, [r7, #16]

	/* Make task-specific structures */
	SIM0_initialize();
 80038ac:	f004 f964 	bl	8007b78 <SIM0_initialize>

	SIM0_P.Ts = SIM_task_info.periodicity;
 80038b0:	4b58      	ldr	r3, [pc, #352]	; (8003a14 <start_SIM_task+0x18c>)
 80038b2:	4618      	mov	r0, r3
 80038b4:	f7fc fe3a 	bl	800052c <__aeabi_f2d>
 80038b8:	4602      	mov	r2, r0
 80038ba:	460b      	mov	r3, r1
 80038bc:	4956      	ldr	r1, [pc, #344]	; (8003a18 <start_SIM_task+0x190>)
 80038be:	e9c1 233c 	strd	r2, r3, [r1, #240]	; 0xf0
	SIM0_U.SC = 1;
 80038c2:	4956      	ldr	r1, [pc, #344]	; (8003a1c <start_SIM_task+0x194>)
 80038c4:	f04f 0200 	mov.w	r2, #0
 80038c8:	4b55      	ldr	r3, [pc, #340]	; (8003a20 <start_SIM_task+0x198>)
 80038ca:	e9c1 2308 	strd	r2, r3, [r1, #32]
	SIM0_U.drive = 0;
 80038ce:	4953      	ldr	r1, [pc, #332]	; (8003a1c <start_SIM_task+0x194>)
 80038d0:	f04f 0200 	mov.w	r2, #0
 80038d4:	f04f 0300 	mov.w	r3, #0
 80038d8:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	SIM0_U.charge = 1;
 80038dc:	494f      	ldr	r1, [pc, #316]	; (8003a1c <start_SIM_task+0x194>)
 80038de:	f04f 0200 	mov.w	r2, #0
 80038e2:	4b4f      	ldr	r3, [pc, #316]	; (8003a20 <start_SIM_task+0x198>)
 80038e4:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	SIM0_U.drive_current = -100;
 80038e8:	4b4c      	ldr	r3, [pc, #304]	; (8003a1c <start_SIM_task+0x194>)
 80038ea:	f503 618b 	add.w	r1, r3, #1112	; 0x458
 80038ee:	f04f 0200 	mov.w	r2, #0
 80038f2:	4b4c      	ldr	r3, [pc, #304]	; (8003a24 <start_SIM_task+0x19c>)
 80038f4:	e9c1 2300 	strd	r2, r3, [r1]
	{
		uint8_t start_drive = SIM0_U.drive > 0.5;
 80038f8:	4b48      	ldr	r3, [pc, #288]	; (8003a1c <start_SIM_task+0x194>)
 80038fa:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 80038fe:	2301      	movs	r3, #1
 8003900:	461c      	mov	r4, r3
 8003902:	f04f 0200 	mov.w	r2, #0
 8003906:	4b48      	ldr	r3, [pc, #288]	; (8003a28 <start_SIM_task+0x1a0>)
 8003908:	f7fd f8f8 	bl	8000afc <__aeabi_dcmpgt>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d101      	bne.n	8003916 <start_SIM_task+0x8e>
 8003912:	2300      	movs	r3, #0
 8003914:	461c      	mov	r4, r3
 8003916:	b2e3      	uxtb	r3, r4
 8003918:	73fb      	strb	r3, [r7, #15]
		xQueueOverwrite(start_drive_queue, &start_drive);
 800391a:	4b44      	ldr	r3, [pc, #272]	; (8003a2c <start_SIM_task+0x1a4>)
 800391c:	6818      	ldr	r0, [r3, #0]
 800391e:	f107 010f 	add.w	r1, r7, #15
 8003922:	2302      	movs	r3, #2
 8003924:	2200      	movs	r2, #0
 8003926:	f012 fc75 	bl	8016214 <xQueueGenericSend>
	}
	{
		uint8_t start_charge = SIM0_U.charge > 0.5;
 800392a:	4b3c      	ldr	r3, [pc, #240]	; (8003a1c <start_SIM_task+0x194>)
 800392c:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8003930:	2301      	movs	r3, #1
 8003932:	461c      	mov	r4, r3
 8003934:	f04f 0200 	mov.w	r2, #0
 8003938:	4b3b      	ldr	r3, [pc, #236]	; (8003a28 <start_SIM_task+0x1a0>)
 800393a:	f7fd f8df 	bl	8000afc <__aeabi_dcmpgt>
 800393e:	4603      	mov	r3, r0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d101      	bne.n	8003948 <start_SIM_task+0xc0>
 8003944:	2300      	movs	r3, #0
 8003946:	461c      	mov	r4, r3
 8003948:	b2e3      	uxtb	r3, r4
 800394a:	73bb      	strb	r3, [r7, #14]
		xQueueOverwrite(start_charge_queue, &start_charge);
 800394c:	4b38      	ldr	r3, [pc, #224]	; (8003a30 <start_SIM_task+0x1a8>)
 800394e:	6818      	ldr	r0, [r3, #0]
 8003950:	f107 010e 	add.w	r1, r7, #14
 8003954:	2302      	movs	r3, #2
 8003956:	2200      	movs	r2, #0
 8003958:	f012 fc5c 	bl	8016214 <xQueueGenericSend>
	}
	{
		uint8_t start_balance = SIM0_U.drive + SIM0_U.charge > 1.5;
 800395c:	4b2f      	ldr	r3, [pc, #188]	; (8003a1c <start_SIM_task+0x194>)
 800395e:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8003962:	4b2e      	ldr	r3, [pc, #184]	; (8003a1c <start_SIM_task+0x194>)
 8003964:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8003968:	f7fc fc82 	bl	8000270 <__adddf3>
 800396c:	4602      	mov	r2, r0
 800396e:	460b      	mov	r3, r1
 8003970:	4610      	mov	r0, r2
 8003972:	4619      	mov	r1, r3
 8003974:	2301      	movs	r3, #1
 8003976:	461c      	mov	r4, r3
 8003978:	f04f 0200 	mov.w	r2, #0
 800397c:	4b2d      	ldr	r3, [pc, #180]	; (8003a34 <start_SIM_task+0x1ac>)
 800397e:	f7fd f8bd 	bl	8000afc <__aeabi_dcmpgt>
 8003982:	4603      	mov	r3, r0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d101      	bne.n	800398c <start_SIM_task+0x104>
 8003988:	2300      	movs	r3, #0
 800398a:	461c      	mov	r4, r3
 800398c:	b2e3      	uxtb	r3, r4
 800398e:	737b      	strb	r3, [r7, #13]
		xQueueOverwrite(start_balance_queue, &start_balance);
 8003990:	4b29      	ldr	r3, [pc, #164]	; (8003a38 <start_SIM_task+0x1b0>)
 8003992:	6818      	ldr	r0, [r3, #0]
 8003994:	f107 010d 	add.w	r1, r7, #13
 8003998:	2302      	movs	r3, #2
 800399a:	2200      	movs	r2, #0
 800399c:	f012 fc3a 	bl	8016214 <xQueueGenericSend>
	}

	/* Wait until offset */
	next_tick += TICK2HZ * SIM_task_info.offset;
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	ee07 3a90 	vmov	s15, r3
 80039a6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80039aa:	eddf 6a24 	vldr	s13, [pc, #144]	; 8003a3c <start_SIM_task+0x1b4>
 80039ae:	eddf 7a18 	vldr	s15, [pc, #96]	; 8003a10 <start_SIM_task+0x188>
 80039b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80039b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039be:	ee17 3a90 	vmov	r3, s15
 80039c2:	617b      	str	r3, [r7, #20]
	osDelayUntil(next_tick);
 80039c4:	6978      	ldr	r0, [r7, #20]
 80039c6:	f012 f9cc 	bl	8015d62 <osDelayUntil>

	for (;;) {
		/* Enter periodic behaviour */
		SIM0_step();
 80039ca:	f002 ff9d 	bl	8006908 <SIM0_step>

		xQueueOverwrite(accumulator_voltage_queue, &SIM0_Y.accumulator_voltage);
 80039ce:	4b1c      	ldr	r3, [pc, #112]	; (8003a40 <start_SIM_task+0x1b8>)
 80039d0:	6818      	ldr	r0, [r3, #0]
 80039d2:	2302      	movs	r3, #2
 80039d4:	2200      	movs	r2, #0
 80039d6:	491b      	ldr	r1, [pc, #108]	; (8003a44 <start_SIM_task+0x1bc>)
 80039d8:	f012 fc1c 	bl	8016214 <xQueueGenericSend>
		xQueueOverwrite(vehicle_voltage_queue, &SIM0_Y.vehicle_voltage);
 80039dc:	4b1a      	ldr	r3, [pc, #104]	; (8003a48 <start_SIM_task+0x1c0>)
 80039de:	6818      	ldr	r0, [r3, #0]
 80039e0:	2302      	movs	r3, #2
 80039e2:	2200      	movs	r2, #0
 80039e4:	4919      	ldr	r1, [pc, #100]	; (8003a4c <start_SIM_task+0x1c4>)
 80039e6:	f012 fc15 	bl	8016214 <xQueueGenericSend>
		xQueueOverwrite(accumulator_current_queue, &SIM0_Y.current);
 80039ea:	4b19      	ldr	r3, [pc, #100]	; (8003a50 <start_SIM_task+0x1c8>)
 80039ec:	6818      	ldr	r0, [r3, #0]
 80039ee:	2302      	movs	r3, #2
 80039f0:	2200      	movs	r2, #0
 80039f2:	4918      	ldr	r1, [pc, #96]	; (8003a54 <start_SIM_task+0x1cc>)
 80039f4:	f012 fc0e 	bl	8016214 <xQueueGenericSend>

		/* Wait until next period */
		next_tick += tick_increment;
 80039f8:	697a      	ldr	r2, [r7, #20]
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	4413      	add	r3, r2
 80039fe:	617b      	str	r3, [r7, #20]
		osDelayUntil(next_tick);
 8003a00:	6978      	ldr	r0, [r7, #20]
 8003a02:	f012 f9ae 	bl	8015d62 <osDelayUntil>
		SIM0_step();
 8003a06:	e7e0      	b.n	80039ca <start_SIM_task+0x142>
 8003a08:	2001b788 	.word	0x2001b788
 8003a0c:	3f4ccccd 	.word	0x3f4ccccd
 8003a10:	447a0000 	.word	0x447a0000
 8003a14:	3f4ccccd 	.word	0x3f4ccccd
 8003a18:	200002e0 	.word	0x200002e0
 8003a1c:	2001e4a0 	.word	0x2001e4a0
 8003a20:	3ff00000 	.word	0x3ff00000
 8003a24:	c0590000 	.word	0xc0590000
 8003a28:	3fe00000 	.word	0x3fe00000
 8003a2c:	2001b56c 	.word	0x2001b56c
 8003a30:	2001b578 	.word	0x2001b578
 8003a34:	3ff80000 	.word	0x3ff80000
 8003a38:	2001b58c 	.word	0x2001b58c
 8003a3c:	00000000 	.word	0x00000000
 8003a40:	2001b588 	.word	0x2001b588
 8003a44:	2001d6e0 	.word	0x2001d6e0
 8003a48:	2001b580 	.word	0x2001b580
 8003a4c:	2001d6d0 	.word	0x2001d6d0
 8003a50:	2001b590 	.word	0x2001b590
 8003a54:	2001d6d8 	.word	0x2001d6d8

08003a58 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b082      	sub	sp, #8
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a04      	ldr	r2, [pc, #16]	; (8003a78 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d101      	bne.n	8003a6e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003a6a:	f00c fe97 	bl	801079c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003a6e:	bf00      	nop
 8003a70:	3708      	adds	r7, #8
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	40000c00 	.word	0x40000c00

08003a7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003a80:	b672      	cpsid	i
}
 8003a82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003a84:	e7fe      	b.n	8003a84 <Error_Handler+0x8>
	...

08003a88 <set_air_plus_ext>:
#include "main.h"

#include "canlib_callbacks.h"
#include "SIM0.h"

void set_air_plus_ext(uint8_t closed){
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b082      	sub	sp, #8
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	4603      	mov	r3, r0
 8003a90:	71fb      	strb	r3, [r7, #7]
	SIM0_U.EnableAirPlus = closed;
 8003a92:	79fb      	ldrb	r3, [r7, #7]
 8003a94:	4618      	mov	r0, r3
 8003a96:	f7fc fd27 	bl	80004e8 <__aeabi_ui2d>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	460b      	mov	r3, r1
 8003a9e:	4903      	ldr	r1, [pc, #12]	; (8003aac <set_air_plus_ext+0x24>)
 8003aa0:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
}
 8003aa4:	bf00      	nop
 8003aa6:	3708      	adds	r7, #8
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}
 8003aac:	2001e4a0 	.word	0x2001e4a0

08003ab0 <get_air_plus_ext>:

uint8_t get_air_plus_ext(){
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	af00      	add	r7, sp, #0
	return SIM0_Y.AIR_plus_closed;
 8003ab4:	4b05      	ldr	r3, [pc, #20]	; (8003acc <get_air_plus_ext+0x1c>)
 8003ab6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003aba:	4610      	mov	r0, r2
 8003abc:	4619      	mov	r1, r3
 8003abe:	f7fd f865 	bl	8000b8c <__aeabi_d2uiz>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	b2db      	uxtb	r3, r3
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	2001d6a8 	.word	0x2001d6a8

08003ad0 <set_air_minus_ext>:

void set_air_minus_ext(uint8_t closed){
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b082      	sub	sp, #8
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	71fb      	strb	r3, [r7, #7]
	SIM0_U.EnableAirMinus = closed;
 8003ada:	79fb      	ldrb	r3, [r7, #7]
 8003adc:	4618      	mov	r0, r3
 8003ade:	f7fc fd03 	bl	80004e8 <__aeabi_ui2d>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	460b      	mov	r3, r1
 8003ae6:	4903      	ldr	r1, [pc, #12]	; (8003af4 <set_air_minus_ext+0x24>)
 8003ae8:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
}
 8003aec:	bf00      	nop
 8003aee:	3708      	adds	r7, #8
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}
 8003af4:	2001e4a0 	.word	0x2001e4a0

08003af8 <get_air_minus_ext>:

uint8_t get_air_minus_ext(){
 8003af8:	b580      	push	{r7, lr}
 8003afa:	af00      	add	r7, sp, #0
	return SIM0_Y.AIR_minus_closed;
 8003afc:	4b05      	ldr	r3, [pc, #20]	; (8003b14 <get_air_minus_ext+0x1c>)
 8003afe:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003b02:	4610      	mov	r0, r2
 8003b04:	4619      	mov	r1, r3
 8003b06:	f7fd f841 	bl	8000b8c <__aeabi_d2uiz>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	b2db      	uxtb	r3, r3
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	2001d6a8 	.word	0x2001d6a8

08003b18 <set_precharge_ext>:

void set_precharge_ext(uint8_t closed){
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b082      	sub	sp, #8
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	4603      	mov	r3, r0
 8003b20:	71fb      	strb	r3, [r7, #7]
	SIM0_U.EnablePrecharge = closed;
 8003b22:	79fb      	ldrb	r3, [r7, #7]
 8003b24:	4618      	mov	r0, r3
 8003b26:	f7fc fcdf 	bl	80004e8 <__aeabi_ui2d>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	460b      	mov	r3, r1
 8003b2e:	4903      	ldr	r1, [pc, #12]	; (8003b3c <set_precharge_ext+0x24>)
 8003b30:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
}
 8003b34:	bf00      	nop
 8003b36:	3708      	adds	r7, #8
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	2001e4a0 	.word	0x2001e4a0

08003b40 <get_precharge_ext>:

uint8_t get_precharge_ext(){
 8003b40:	b580      	push	{r7, lr}
 8003b42:	af00      	add	r7, sp, #0
	return SIM0_Y.precharge_closed;
 8003b44:	4b05      	ldr	r3, [pc, #20]	; (8003b5c <get_precharge_ext+0x1c>)
 8003b46:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003b4a:	4610      	mov	r0, r2
 8003b4c:	4619      	mov	r1, r3
 8003b4e:	f7fd f81d 	bl	8000b8c <__aeabi_d2uiz>
 8003b52:	4603      	mov	r3, r0
 8003b54:	b2db      	uxtb	r3, r3

}
 8003b56:	4618      	mov	r0, r3
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	2001d6a8 	.word	0x2001d6a8

08003b60 <get_ams_error_latched_ext>:

void set_ams_error_ext(uint8_t raise_error){
	SIM0_U.AMS_error = raise_error;
}

uint8_t get_ams_error_latched_ext(){
 8003b60:	b480      	push	{r7}
 8003b62:	af00      	add	r7, sp, #0
	return SIM0_Y.AMS_error_latched;
 8003b64:	4b03      	ldr	r3, [pc, #12]	; (8003b74 <get_ams_error_latched_ext+0x14>)
 8003b66:	781b      	ldrb	r3, [r3, #0]
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr
 8003b72:	bf00      	nop
 8003b74:	2001d6a8 	.word	0x2001d6a8

08003b78 <get_imd_error_latched_ext>:

void set_imd_error_ext(uint8_t raise_error){
	SIM0_U.IMD_error = raise_error;
}

uint8_t get_imd_error_latched_ext(){
 8003b78:	b480      	push	{r7}
 8003b7a:	af00      	add	r7, sp, #0
	return SIM0_Y.IMD_error_latched;
 8003b7c:	4b03      	ldr	r3, [pc, #12]	; (8003b8c <get_imd_error_latched_ext+0x14>)
 8003b7e:	785b      	ldrb	r3, [r3, #1]
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr
 8003b8a:	bf00      	nop
 8003b8c:	2001d6a8 	.word	0x2001d6a8

08003b90 <get_sc_probe_ext>:

uint8_t get_sc_probe_ext(){
 8003b90:	b580      	push	{r7, lr}
 8003b92:	af00      	add	r7, sp, #0
	return SIM0_Y.SC_probe;
 8003b94:	4b05      	ldr	r3, [pc, #20]	; (8003bac <get_sc_probe_ext+0x1c>)
 8003b96:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003b9a:	4610      	mov	r0, r2
 8003b9c:	4619      	mov	r1, r3
 8003b9e:	f7fc fff5 	bl	8000b8c <__aeabi_d2uiz>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	b2db      	uxtb	r3, r3
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	2001d6a8 	.word	0x2001d6a8

08003bb0 <get_imd_ok_ext>:

uint8_t get_imd_ok_ext(){
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	af00      	add	r7, sp, #0
	return SIM0_Y.IMD_ok;
 8003bb4:	4b06      	ldr	r3, [pc, #24]	; (8003bd0 <get_imd_ok_ext+0x20>)
 8003bb6:	f503 635f 	add.w	r3, r3, #3568	; 0xdf0
 8003bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bbe:	4610      	mov	r0, r2
 8003bc0:	4619      	mov	r1, r3
 8003bc2:	f7fc ffe3 	bl	8000b8c <__aeabi_d2uiz>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	b2db      	uxtb	r3, r3
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	2001d6a8 	.word	0x2001d6a8

08003bd4 <pec15_calc>:
 * @param	The data used to calculate the PEC
 * @retval	The 16-bit PEC code
 */
uint16_t pec15_calc(uint8_t len, // Number of bytes that will be used to calculate a PEC
		uint8_t *data  // Array of data that will be used to calculate  a PEC
		) {
 8003bd4:	b480      	push	{r7}
 8003bd6:	b085      	sub	sp, #20
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	4603      	mov	r3, r0
 8003bdc:	6039      	str	r1, [r7, #0]
 8003bde:	71fb      	strb	r3, [r7, #7]
	uint16_t remainder, addr;
	remainder = 16;                    // initialize the PEC
 8003be0:	2310      	movs	r3, #16
 8003be2:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i < len; i++)  // loops for each byte in data array
 8003be4:	2300      	movs	r3, #0
 8003be6:	737b      	strb	r3, [r7, #13]
 8003be8:	e018      	b.n	8003c1c <pec15_calc+0x48>
			{
		addr = ((remainder >> 7) ^ data[i]) & 0xff; // calculate PEC table address
 8003bea:	89fb      	ldrh	r3, [r7, #14]
 8003bec:	09db      	lsrs	r3, r3, #7
 8003bee:	b29a      	uxth	r2, r3
 8003bf0:	7b7b      	ldrb	r3, [r7, #13]
 8003bf2:	6839      	ldr	r1, [r7, #0]
 8003bf4:	440b      	add	r3, r1
 8003bf6:	781b      	ldrb	r3, [r3, #0]
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	4053      	eors	r3, r2
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	817b      	strh	r3, [r7, #10]
		remainder = (remainder << 8) ^ crc15Table[addr];
 8003c02:	89fb      	ldrh	r3, [r7, #14]
 8003c04:	021b      	lsls	r3, r3, #8
 8003c06:	b29a      	uxth	r2, r3
 8003c08:	897b      	ldrh	r3, [r7, #10]
 8003c0a:	490b      	ldr	r1, [pc, #44]	; (8003c38 <pec15_calc+0x64>)
 8003c0c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	4053      	eors	r3, r2
 8003c14:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i < len; i++)  // loops for each byte in data array
 8003c16:	7b7b      	ldrb	r3, [r7, #13]
 8003c18:	3301      	adds	r3, #1
 8003c1a:	737b      	strb	r3, [r7, #13]
 8003c1c:	7b7a      	ldrb	r2, [r7, #13]
 8003c1e:	79fb      	ldrb	r3, [r7, #7]
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d3e2      	bcc.n	8003bea <pec15_calc+0x16>
	}
	return (remainder * 2);  // The CRC15 has a 0 in the LSB so the remainder
 8003c24:	89fb      	ldrh	r3, [r7, #14]
 8003c26:	005b      	lsls	r3, r3, #1
 8003c28:	b29b      	uxth	r3, r3
							 // must be multiplied by 2
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3714      	adds	r7, #20
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr
 8003c36:	bf00      	nop
 8003c38:	0801b1c4 	.word	0x0801b1c4

08003c3c <initialize_LTC>:
/*
 * @brief	Set the hspi which LTC uses
 * @param	The hspi to be used
 * @retval	None
 */
void initialize_LTC(SPI_HandleTypeDef *hspi) {
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
	hltc = hspi;
 8003c44:	4a04      	ldr	r2, [pc, #16]	; (8003c58 <initialize_LTC+0x1c>)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6013      	str	r3, [r2, #0]
}
 8003c4a:	bf00      	nop
 8003c4c:	370c      	adds	r7, #12
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop
 8003c58:	2001b7a4 	.word	0x2001b7a4

08003c5c <LTC_CS_select>:

/*
 * @brief	Selects CS
 * @retval	None
 */
void LTC_CS_select(void) {
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LTC_CS_GPIO_Port, LTC_CS_Pin, 0);
 8003c60:	2200      	movs	r2, #0
 8003c62:	2110      	movs	r1, #16
 8003c64:	4802      	ldr	r0, [pc, #8]	; (8003c70 <LTC_CS_select+0x14>)
 8003c66:	f00e fee7 	bl	8012a38 <HAL_GPIO_WritePin>
}
 8003c6a:	bf00      	nop
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	40020800 	.word	0x40020800

08003c74 <LTC_CS_deselect>:

/*
 * @brief	Deselects CS
 * @retval	None
 */
void LTC_CS_deselect(void) {
 8003c74:	b580      	push	{r7, lr}
 8003c76:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LTC_CS_GPIO_Port, LTC_CS_Pin, 1);
 8003c78:	2201      	movs	r2, #1
 8003c7a:	2110      	movs	r1, #16
 8003c7c:	4802      	ldr	r0, [pc, #8]	; (8003c88 <LTC_CS_deselect+0x14>)
 8003c7e:	f00e fedb 	bl	8012a38 <HAL_GPIO_WritePin>
}
 8003c82:	bf00      	nop
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	bf00      	nop
 8003c88:	40020800 	.word	0x40020800

08003c8c <LTC_wake>:

/*
 * @brief	A helper function which interfaces with SPI. wakes the isoSPI port from sleep
 * @retval	LTC Status
 */
uint8_t LTC_wake() {
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b082      	sub	sp, #8
 8003c90:	af00      	add	r7, sp, #0
	uint16_t pec;

	// This is the ADSTAT command. Chosen for no specific reason
	uint16_t command = 0b0000010101101000;
 8003c92:	f44f 63ad 	mov.w	r3, #1384	; 0x568
 8003c96:	80fb      	strh	r3, [r7, #6]

	// This is how one would pack the command, calculate the PEC, and the pack the contents.
	LTC_command_buffer[0] = command >> 8;
 8003c98:	88fb      	ldrh	r3, [r7, #6]
 8003c9a:	0a1b      	lsrs	r3, r3, #8
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	b2da      	uxtb	r2, r3
 8003ca0:	4b12      	ldr	r3, [pc, #72]	; (8003cec <LTC_wake+0x60>)
 8003ca2:	701a      	strb	r2, [r3, #0]
	LTC_command_buffer[1] = command;
 8003ca4:	88fb      	ldrh	r3, [r7, #6]
 8003ca6:	b2da      	uxtb	r2, r3
 8003ca8:	4b10      	ldr	r3, [pc, #64]	; (8003cec <LTC_wake+0x60>)
 8003caa:	705a      	strb	r2, [r3, #1]
	pec = pec15_calc(2, LTC_command_buffer);
 8003cac:	490f      	ldr	r1, [pc, #60]	; (8003cec <LTC_wake+0x60>)
 8003cae:	2002      	movs	r0, #2
 8003cb0:	f7ff ff90 	bl	8003bd4 <pec15_calc>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	80bb      	strh	r3, [r7, #4]
	LTC_command_buffer[2] = pec >> 8;
 8003cb8:	88bb      	ldrh	r3, [r7, #4]
 8003cba:	0a1b      	lsrs	r3, r3, #8
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	b2da      	uxtb	r2, r3
 8003cc0:	4b0a      	ldr	r3, [pc, #40]	; (8003cec <LTC_wake+0x60>)
 8003cc2:	709a      	strb	r2, [r3, #2]
	LTC_command_buffer[3] = pec;
 8003cc4:	88bb      	ldrh	r3, [r7, #4]
 8003cc6:	b2da      	uxtb	r2, r3
 8003cc8:	4b08      	ldr	r3, [pc, #32]	; (8003cec <LTC_wake+0x60>)
 8003cca:	70da      	strb	r2, [r3, #3]

	// Simply lock the CS before transmitting and/or receiving
	LTC_CS_select();
 8003ccc:	f7ff ffc6 	bl	8003c5c <LTC_CS_select>
	HAL_SPI_Transmit(hltc, LTC_command_buffer, 4, LTC_COM_TIMEOUT);
 8003cd0:	4b07      	ldr	r3, [pc, #28]	; (8003cf0 <LTC_wake+0x64>)
 8003cd2:	6818      	ldr	r0, [r3, #0]
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	2204      	movs	r2, #4
 8003cd8:	4904      	ldr	r1, [pc, #16]	; (8003cec <LTC_wake+0x60>)
 8003cda:	f00f fbc6 	bl	801346a <HAL_SPI_Transmit>
	LTC_CS_deselect();
 8003cde:	f7ff ffc9 	bl	8003c74 <LTC_CS_deselect>

	return 1;
 8003ce2:	2301      	movs	r3, #1
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	3708      	adds	r7, #8
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}
 8003cec:	2001b7b4 	.word	0x2001b7b4
 8003cf0:	2001b7a4 	.word	0x2001b7a4

08003cf4 <LTC_command>:
 * @brief	A helper function which interfaces with SPI.
 * @param	Wether or not to wake the isoSPI port first
 * @param	Which command to be sent
 * @retval	LTC Status
 */
uint8_t LTC_command(uint8_t wake, uint16_t command) {
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b084      	sub	sp, #16
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	460a      	mov	r2, r1
 8003cfe:	71fb      	strb	r3, [r7, #7]
 8003d00:	4613      	mov	r3, r2
 8003d02:	80bb      	strh	r3, [r7, #4]
	uint16_t pec;

	if (wake) {
 8003d04:	79fb      	ldrb	r3, [r7, #7]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d006      	beq.n	8003d18 <LTC_command+0x24>
		if (!LTC_wake()) {
 8003d0a:	f7ff ffbf 	bl	8003c8c <LTC_wake>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d101      	bne.n	8003d18 <LTC_command+0x24>
			return 0;
 8003d14:	2300      	movs	r3, #0
 8003d16:	e025      	b.n	8003d64 <LTC_command+0x70>
		}
	}

	LTC_command_buffer[0] = command >> 8;
 8003d18:	88bb      	ldrh	r3, [r7, #4]
 8003d1a:	0a1b      	lsrs	r3, r3, #8
 8003d1c:	b29b      	uxth	r3, r3
 8003d1e:	b2da      	uxtb	r2, r3
 8003d20:	4b12      	ldr	r3, [pc, #72]	; (8003d6c <LTC_command+0x78>)
 8003d22:	701a      	strb	r2, [r3, #0]
	LTC_command_buffer[1] = command;
 8003d24:	88bb      	ldrh	r3, [r7, #4]
 8003d26:	b2da      	uxtb	r2, r3
 8003d28:	4b10      	ldr	r3, [pc, #64]	; (8003d6c <LTC_command+0x78>)
 8003d2a:	705a      	strb	r2, [r3, #1]
	pec = pec15_calc(2, LTC_command_buffer);
 8003d2c:	490f      	ldr	r1, [pc, #60]	; (8003d6c <LTC_command+0x78>)
 8003d2e:	2002      	movs	r0, #2
 8003d30:	f7ff ff50 	bl	8003bd4 <pec15_calc>
 8003d34:	4603      	mov	r3, r0
 8003d36:	81fb      	strh	r3, [r7, #14]
	LTC_command_buffer[2] = pec >> 8;
 8003d38:	89fb      	ldrh	r3, [r7, #14]
 8003d3a:	0a1b      	lsrs	r3, r3, #8
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	b2da      	uxtb	r2, r3
 8003d40:	4b0a      	ldr	r3, [pc, #40]	; (8003d6c <LTC_command+0x78>)
 8003d42:	709a      	strb	r2, [r3, #2]
	LTC_command_buffer[3] = pec;
 8003d44:	89fb      	ldrh	r3, [r7, #14]
 8003d46:	b2da      	uxtb	r2, r3
 8003d48:	4b08      	ldr	r3, [pc, #32]	; (8003d6c <LTC_command+0x78>)
 8003d4a:	70da      	strb	r2, [r3, #3]

	LTC_CS_select();
 8003d4c:	f7ff ff86 	bl	8003c5c <LTC_CS_select>
	HAL_SPI_Transmit(hltc, LTC_command_buffer, 4, LTC_COM_TIMEOUT);
 8003d50:	4b07      	ldr	r3, [pc, #28]	; (8003d70 <LTC_command+0x7c>)
 8003d52:	6818      	ldr	r0, [r3, #0]
 8003d54:	2300      	movs	r3, #0
 8003d56:	2204      	movs	r2, #4
 8003d58:	4904      	ldr	r1, [pc, #16]	; (8003d6c <LTC_command+0x78>)
 8003d5a:	f00f fb86 	bl	801346a <HAL_SPI_Transmit>
	LTC_CS_deselect();
 8003d5e:	f7ff ff89 	bl	8003c74 <LTC_CS_deselect>

	return 1;
 8003d62:	2301      	movs	r3, #1
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3710      	adds	r7, #16
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	2001b7b4 	.word	0x2001b7b4
 8003d70:	2001b7a4 	.word	0x2001b7a4

08003d74 <LTC_read_command>:
 * @brief	A helper function which interfaces with SPI. Puts received data in LTC_read_buffer
 * @param	Whether or not to wake the isoSPI port first
 * @param	Which command the received data corresponds to
 * @retval	LTC Status
 */
uint8_t LTC_read_command(uint8_t wake, uint16_t command) {
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b084      	sub	sp, #16
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	460a      	mov	r2, r1
 8003d7e:	71fb      	strb	r3, [r7, #7]
 8003d80:	4613      	mov	r3, r2
 8003d82:	80bb      	strh	r3, [r7, #4]
	uint16_t pec;

	if (wake) {
 8003d84:	79fb      	ldrb	r3, [r7, #7]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d006      	beq.n	8003d98 <LTC_read_command+0x24>
		if (!LTC_wake()) {
 8003d8a:	f7ff ff7f 	bl	8003c8c <LTC_wake>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d101      	bne.n	8003d98 <LTC_read_command+0x24>
			return 0;
 8003d94:	2300      	movs	r3, #0
 8003d96:	e042      	b.n	8003e1e <LTC_read_command+0xaa>
		}
	}

	LTC_command_buffer[0] = command >> 8;
 8003d98:	88bb      	ldrh	r3, [r7, #4]
 8003d9a:	0a1b      	lsrs	r3, r3, #8
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	b2da      	uxtb	r2, r3
 8003da0:	4b21      	ldr	r3, [pc, #132]	; (8003e28 <LTC_read_command+0xb4>)
 8003da2:	701a      	strb	r2, [r3, #0]
	LTC_command_buffer[1] = command;
 8003da4:	88bb      	ldrh	r3, [r7, #4]
 8003da6:	b2da      	uxtb	r2, r3
 8003da8:	4b1f      	ldr	r3, [pc, #124]	; (8003e28 <LTC_read_command+0xb4>)
 8003daa:	705a      	strb	r2, [r3, #1]
	pec = pec15_calc(2, LTC_command_buffer);
 8003dac:	491e      	ldr	r1, [pc, #120]	; (8003e28 <LTC_read_command+0xb4>)
 8003dae:	2002      	movs	r0, #2
 8003db0:	f7ff ff10 	bl	8003bd4 <pec15_calc>
 8003db4:	4603      	mov	r3, r0
 8003db6:	81fb      	strh	r3, [r7, #14]
	LTC_command_buffer[2] = pec >> 8;
 8003db8:	89fb      	ldrh	r3, [r7, #14]
 8003dba:	0a1b      	lsrs	r3, r3, #8
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	b2da      	uxtb	r2, r3
 8003dc0:	4b19      	ldr	r3, [pc, #100]	; (8003e28 <LTC_read_command+0xb4>)
 8003dc2:	709a      	strb	r2, [r3, #2]
	LTC_command_buffer[3] = pec;
 8003dc4:	89fb      	ldrh	r3, [r7, #14]
 8003dc6:	b2da      	uxtb	r2, r3
 8003dc8:	4b17      	ldr	r3, [pc, #92]	; (8003e28 <LTC_read_command+0xb4>)
 8003dca:	70da      	strb	r2, [r3, #3]

	// We receive at the same instance
	LTC_CS_select();
 8003dcc:	f7ff ff46 	bl	8003c5c <LTC_CS_select>
	HAL_SPI_Transmit(hltc, LTC_command_buffer, 4, LTC_COM_TIMEOUT);
 8003dd0:	4b16      	ldr	r3, [pc, #88]	; (8003e2c <LTC_read_command+0xb8>)
 8003dd2:	6818      	ldr	r0, [r3, #0]
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	2204      	movs	r2, #4
 8003dd8:	4913      	ldr	r1, [pc, #76]	; (8003e28 <LTC_read_command+0xb4>)
 8003dda:	f00f fb46 	bl	801346a <HAL_SPI_Transmit>
	HAL_SPI_Receive(hltc, LTC_read_buffer, 10, LTC_COM_TIMEOUT);
 8003dde:	4b13      	ldr	r3, [pc, #76]	; (8003e2c <LTC_read_command+0xb8>)
 8003de0:	6818      	ldr	r0, [r3, #0]
 8003de2:	2300      	movs	r3, #0
 8003de4:	220a      	movs	r2, #10
 8003de6:	4912      	ldr	r1, [pc, #72]	; (8003e30 <LTC_read_command+0xbc>)
 8003de8:	f00f fc7b 	bl	80136e2 <HAL_SPI_Receive>
	LTC_CS_deselect();
 8003dec:	f7ff ff42 	bl	8003c74 <LTC_CS_deselect>

	// We should make sure that the data is correct
	pec = pec15_calc(8, LTC_read_buffer);
 8003df0:	490f      	ldr	r1, [pc, #60]	; (8003e30 <LTC_read_command+0xbc>)
 8003df2:	2008      	movs	r0, #8
 8003df4:	f7ff feee 	bl	8003bd4 <pec15_calc>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	81fb      	strh	r3, [r7, #14]

	// If there is a discrepancy we return an error code
	if (!((((pec >> 8) & 0xff) != LTC_read_buffer[8])
 8003dfc:	89fb      	ldrh	r3, [r7, #14]
 8003dfe:	0a1b      	lsrs	r3, r3, #8
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	4a0a      	ldr	r2, [pc, #40]	; (8003e30 <LTC_read_command+0xbc>)
 8003e06:	7a12      	ldrb	r2, [r2, #8]
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d005      	beq.n	8003e18 <LTC_read_command+0xa4>
			&& (((pec >> 0) & 0xff) != LTC_read_buffer[9]))) {
 8003e0c:	89fb      	ldrh	r3, [r7, #14]
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	4a07      	ldr	r2, [pc, #28]	; (8003e30 <LTC_read_command+0xbc>)
 8003e12:	7a52      	ldrb	r2, [r2, #9]
	if (!((((pec >> 8) & 0xff) != LTC_read_buffer[8])
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d101      	bne.n	8003e1c <LTC_read_command+0xa8>
		return 0;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	e000      	b.n	8003e1e <LTC_read_command+0xaa>
	}

	return 1;
 8003e1c:	2301      	movs	r3, #1
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3710      	adds	r7, #16
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	2001b7b4 	.word	0x2001b7b4
 8003e2c:	2001b7a4 	.word	0x2001b7a4
 8003e30:	2001b7a8 	.word	0x2001b7a8

08003e34 <LTC_acquire_data>:
 * @brief	The function which acquires all of the cell temperatures and voltages, and places them in cell_voltages and cell_temperatures
 * @param	Whether or not to wake the isoSPI port beforehand
 * @param	LTC_ccv[n] is high if the n:th slave has given valid data
 * @retval	LTC Status
 */
uint8_t LTC_acquire_data(uint8_t wake) {
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b08a      	sub	sp, #40	; 0x28
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	71fb      	strb	r3, [r7, #7]
	uint16_t all_read; /* LTC_ccv[n] might only be high if slave n was read (PEC correct, among other things) */
	uint16_t all_zeros; /* LTC_ccv[n] might only be high if the bits are not all zero, as this would constitute a zero voltage reference (or zeroed/floating cell voltages) */
	uint16_t all_ones; /* LTC_ccv[n] might only be high if the bits are not all ones, as this is indicative of the message being corrupted */
	uint16_t all_good; /* LTC_ccv[n] is high if this is high for slave n */

	LTC_ccv = 0;
 8003e3e:	4b51      	ldr	r3, [pc, #324]	; (8003f84 <LTC_acquire_data+0x150>)
 8003e40:	2200      	movs	r2, #0
 8003e42:	801a      	strh	r2, [r3, #0]

	/* ADCV, MD = 10, PUP = 1, DCP = 0, CH = 000 */
	command = 0b0000001101110000;
 8003e44:	f44f 735c 	mov.w	r3, #880	; 0x370
 8003e48:	60fb      	str	r3, [r7, #12]

	LTC_command(wake, command);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	b29a      	uxth	r2, r3
 8003e4e:	79fb      	ldrb	r3, [r7, #7]
 8003e50:	4611      	mov	r1, r2
 8003e52:	4618      	mov	r0, r3
 8003e54:	f7ff ff4e 	bl	8003cf4 <LTC_command>

	//osDelay(configTICK_RATE_HZ * 0.02); // ~2 ms
	HAL_Delay(2);
 8003e58:	2002      	movs	r0, #2
 8003e5a:	f00c fcbf 	bl	80107dc <HAL_Delay>

	/* ADAX : MD = 10, PUP = 1, CH = 000 */
	command = 0b0000010101100000;
 8003e5e:	f44f 63ac 	mov.w	r3, #1376	; 0x560
 8003e62:	60fb      	str	r3, [r7, #12]

	LTC_command(0, command);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	4619      	mov	r1, r3
 8003e6a:	2000      	movs	r0, #0
 8003e6c:	f7ff ff42 	bl	8003cf4 <LTC_command>

	//osDelay(configTICK_RATE_HZ * 0.02); // ~2 ms
	HAL_Delay(2);
 8003e70:	2002      	movs	r0, #2
 8003e72:	f00c fcb3 	bl	80107dc <HAL_Delay>

	// First we fill the cell_voltage buffer with the integer values
	p = 0;
 8003e76:	2300      	movs	r3, #0
 8003e78:	627b      	str	r3, [r7, #36]	; 0x24

	for (k = 0; k < 12; k++) { // 12 segments
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	623b      	str	r3, [r7, #32]
 8003e7e:	e074      	b.n	8003f6a <LTC_acquire_data+0x136>
		all_read = 1;
 8003e80:	2301      	movs	r3, #1
 8003e82:	82fb      	strh	r3, [r7, #22]
		all_zeros = 1;
 8003e84:	2301      	movs	r3, #1
 8003e86:	82bb      	strh	r3, [r7, #20]
		all_read = 1;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	82fb      	strh	r3, [r7, #22]
		all_good = 0;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	817b      	strh	r3, [r7, #10]

		for (i = 0; i < 6; i++) {
 8003e90:	2300      	movs	r3, #0
 8003e92:	61fb      	str	r3, [r7, #28]
 8003e94:	e049      	b.n	8003f2a <LTC_acquire_data+0xf6>
			// We use the RDCVA command and increment it every pass to get RDCVB, RDCVC .. RDAUXB
			command = 0b1000000000000100 | (cellstack_address_map(k) << 11);
 8003e96:	6a3b      	ldr	r3, [r7, #32]
 8003e98:	02db      	lsls	r3, r3, #11
 8003e9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e9e:	f043 0304 	orr.w	r3, r3, #4
 8003ea2:	60fb      	str	r3, [r7, #12]
			command += 2 * i;
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	005b      	lsls	r3, r3, #1
 8003ea8:	68fa      	ldr	r2, [r7, #12]
 8003eaa:	4413      	add	r3, r2
 8003eac:	60fb      	str	r3, [r7, #12]

			all_read &= LTC_read_command(0, command);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	4619      	mov	r1, r3
 8003eb4:	2000      	movs	r0, #0
 8003eb6:	f7ff ff5d 	bl	8003d74 <LTC_read_command>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	b29a      	uxth	r2, r3
 8003ebe:	8afb      	ldrh	r3, [r7, #22]
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	82fb      	strh	r3, [r7, #22]

			for (j = 0; j < 3; j++) {
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	61bb      	str	r3, [r7, #24]
 8003ec8:	e029      	b.n	8003f1e <LTC_acquire_data+0xea>
				LTC_data[p] = LTC_read_buffer[2 * j]
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	005b      	lsls	r3, r3, #1
 8003ece:	4a2e      	ldr	r2, [pc, #184]	; (8003f88 <LTC_acquire_data+0x154>)
 8003ed0:	5cd3      	ldrb	r3, [r2, r3]
 8003ed2:	b21a      	sxth	r2, r3
						| (LTC_read_buffer[2 * j + 1] << 8);
 8003ed4:	69bb      	ldr	r3, [r7, #24]
 8003ed6:	005b      	lsls	r3, r3, #1
 8003ed8:	3301      	adds	r3, #1
 8003eda:	492b      	ldr	r1, [pc, #172]	; (8003f88 <LTC_acquire_data+0x154>)
 8003edc:	5ccb      	ldrb	r3, [r1, r3]
 8003ede:	021b      	lsls	r3, r3, #8
 8003ee0:	b21b      	sxth	r3, r3
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	b21b      	sxth	r3, r3
 8003ee6:	b299      	uxth	r1, r3
				LTC_data[p] = LTC_read_buffer[2 * j]
 8003ee8:	4a28      	ldr	r2, [pc, #160]	; (8003f8c <LTC_acquire_data+0x158>)
 8003eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eec:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

				all_zeros &= (LTC_data[p] == 0);
 8003ef0:	4a26      	ldr	r2, [pc, #152]	; (8003f8c <LTC_acquire_data+0x158>)
 8003ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	bf0c      	ite	eq
 8003efc:	2301      	moveq	r3, #1
 8003efe:	2300      	movne	r3, #0
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	b21a      	sxth	r2, r3
 8003f04:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003f08:	4013      	ands	r3, r2
 8003f0a:	b21b      	sxth	r3, r3
 8003f0c:	82bb      	strh	r3, [r7, #20]
				all_ones &= (LTC_data[p] == -1);
 8003f0e:	2300      	movs	r3, #0
 8003f10:	827b      	strh	r3, [r7, #18]

				p++;
 8003f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f14:	3301      	adds	r3, #1
 8003f16:	627b      	str	r3, [r7, #36]	; 0x24
			for (j = 0; j < 3; j++) {
 8003f18:	69bb      	ldr	r3, [r7, #24]
 8003f1a:	3301      	adds	r3, #1
 8003f1c:	61bb      	str	r3, [r7, #24]
 8003f1e:	69bb      	ldr	r3, [r7, #24]
 8003f20:	2b02      	cmp	r3, #2
 8003f22:	ddd2      	ble.n	8003eca <LTC_acquire_data+0x96>
		for (i = 0; i < 6; i++) {
 8003f24:	69fb      	ldr	r3, [r7, #28]
 8003f26:	3301      	adds	r3, #1
 8003f28:	61fb      	str	r3, [r7, #28]
 8003f2a:	69fb      	ldr	r3, [r7, #28]
 8003f2c:	2b05      	cmp	r3, #5
 8003f2e:	ddb2      	ble.n	8003e96 <LTC_acquire_data+0x62>
			}
		}

		all_good = (all_read && !all_zeros && !all_ones);
 8003f30:	8afb      	ldrh	r3, [r7, #22]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d007      	beq.n	8003f46 <LTC_acquire_data+0x112>
 8003f36:	8abb      	ldrh	r3, [r7, #20]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d104      	bne.n	8003f46 <LTC_acquire_data+0x112>
 8003f3c:	8a7b      	ldrh	r3, [r7, #18]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d101      	bne.n	8003f46 <LTC_acquire_data+0x112>
 8003f42:	2301      	movs	r3, #1
 8003f44:	e000      	b.n	8003f48 <LTC_acquire_data+0x114>
 8003f46:	2300      	movs	r3, #0
 8003f48:	817b      	strh	r3, [r7, #10]
		LTC_ccv |= (all_good << k);
 8003f4a:	897a      	ldrh	r2, [r7, #10]
 8003f4c:	6a3b      	ldr	r3, [r7, #32]
 8003f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f52:	b21a      	sxth	r2, r3
 8003f54:	4b0b      	ldr	r3, [pc, #44]	; (8003f84 <LTC_acquire_data+0x150>)
 8003f56:	881b      	ldrh	r3, [r3, #0]
 8003f58:	b21b      	sxth	r3, r3
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	b21b      	sxth	r3, r3
 8003f5e:	b29a      	uxth	r2, r3
 8003f60:	4b08      	ldr	r3, [pc, #32]	; (8003f84 <LTC_acquire_data+0x150>)
 8003f62:	801a      	strh	r2, [r3, #0]
	for (k = 0; k < 12; k++) { // 12 segments
 8003f64:	6a3b      	ldr	r3, [r7, #32]
 8003f66:	3301      	adds	r3, #1
 8003f68:	623b      	str	r3, [r7, #32]
 8003f6a:	6a3b      	ldr	r3, [r7, #32]
 8003f6c:	2b0b      	cmp	r3, #11
 8003f6e:	dd87      	ble.n	8003e80 <LTC_acquire_data+0x4c>
	}

	LTC_make_voltages();
 8003f70:	f000 f80e 	bl	8003f90 <LTC_make_voltages>
	LTC_make_temperatures();
 8003f74:	f000 f858 	bl	8004028 <LTC_make_temperatures>

	return 1;
 8003f78:	2301      	movs	r3, #1
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3728      	adds	r7, #40	; 0x28
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	bf00      	nop
 8003f84:	2001b794 	.word	0x2001b794
 8003f88:	2001b7a8 	.word	0x2001b7a8
 8003f8c:	2001b9b0 	.word	0x2001b9b0

08003f90 <LTC_make_voltages>:
#define cellstack_voltage_count(cellstack) (11 - (cellstack % 2))
/*
 * @brief	A function which takes data from LTC_data and translates it into LTC_voltages
 * @retval	1 if successful
 */
uint8_t LTC_make_voltages(void) {
 8003f90:	b590      	push	{r4, r7, lr}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
	uint16_t cellstack, K, k, p;

	p = 0;
 8003f96:	2300      	movs	r3, #0
 8003f98:	807b      	strh	r3, [r7, #2]

	for (cellstack = 0; cellstack < 12; cellstack++) {
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	80fb      	strh	r3, [r7, #6]
 8003f9e:	e032      	b.n	8004006 <LTC_make_voltages+0x76>
		K = cellstack_voltage_count(cellstack);
 8003fa0:	88fb      	ldrh	r3, [r7, #6]
 8003fa2:	f003 0301 	and.w	r3, r3, #1
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	f1c3 030b 	rsb	r3, r3, #11
 8003fac:	803b      	strh	r3, [r7, #0]
		for (k = 0; k < K; k++) {
 8003fae:	2300      	movs	r3, #0
 8003fb0:	80bb      	strh	r3, [r7, #4]
 8003fb2:	e021      	b.n	8003ff8 <LTC_make_voltages+0x68>
			LTC_voltages[p] = 0.0001 * LTC_data[18 * cellstack + k];
 8003fb4:	88fa      	ldrh	r2, [r7, #6]
 8003fb6:	4613      	mov	r3, r2
 8003fb8:	00db      	lsls	r3, r3, #3
 8003fba:	4413      	add	r3, r2
 8003fbc:	005b      	lsls	r3, r3, #1
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	88bb      	ldrh	r3, [r7, #4]
 8003fc2:	4413      	add	r3, r2
 8003fc4:	4a16      	ldr	r2, [pc, #88]	; (8004020 <LTC_make_voltages+0x90>)
 8003fc6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f7fc fa9c 	bl	8000508 <__aeabi_i2d>
 8003fd0:	a311      	add	r3, pc, #68	; (adr r3, 8004018 <LTC_make_voltages+0x88>)
 8003fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fd6:	f7fc fb01 	bl	80005dc <__aeabi_dmul>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	460b      	mov	r3, r1
 8003fde:	887c      	ldrh	r4, [r7, #2]
 8003fe0:	4610      	mov	r0, r2
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	f7fc fdf2 	bl	8000bcc <__aeabi_d2f>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	490e      	ldr	r1, [pc, #56]	; (8004024 <LTC_make_voltages+0x94>)
 8003fec:	00a3      	lsls	r3, r4, #2
 8003fee:	440b      	add	r3, r1
 8003ff0:	601a      	str	r2, [r3, #0]
		for (k = 0; k < K; k++) {
 8003ff2:	88bb      	ldrh	r3, [r7, #4]
 8003ff4:	3301      	adds	r3, #1
 8003ff6:	80bb      	strh	r3, [r7, #4]
 8003ff8:	88ba      	ldrh	r2, [r7, #4]
 8003ffa:	883b      	ldrh	r3, [r7, #0]
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d3d9      	bcc.n	8003fb4 <LTC_make_voltages+0x24>
	for (cellstack = 0; cellstack < 12; cellstack++) {
 8004000:	88fb      	ldrh	r3, [r7, #6]
 8004002:	3301      	adds	r3, #1
 8004004:	80fb      	strh	r3, [r7, #6]
 8004006:	88fb      	ldrh	r3, [r7, #6]
 8004008:	2b0b      	cmp	r3, #11
 800400a:	d9c9      	bls.n	8003fa0 <LTC_make_voltages+0x10>
		}
	}

	return 1;
 800400c:	2301      	movs	r3, #1
}
 800400e:	4618      	mov	r0, r3
 8004010:	370c      	adds	r7, #12
 8004012:	46bd      	mov	sp, r7
 8004014:	bd90      	pop	{r4, r7, pc}
 8004016:	bf00      	nop
 8004018:	eb1c432d 	.word	0xeb1c432d
 800401c:	3f1a36e2 	.word	0x3f1a36e2
 8004020:	2001b9b0 	.word	0x2001b9b0
 8004024:	2001b7b8 	.word	0x2001b7b8

08004028 <LTC_make_temperatures>:

/*
 * @brief	A function which takes data from LTC_data and translates it into LTC_temperatures
 * @retval	1 if successful
 */
uint8_t LTC_make_temperatures(void) {
 8004028:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800402c:	b086      	sub	sp, #24
 800402e:	af00      	add	r7, sp, #0
	uint16_t cellstack, K, k, p;

	float beta = 3500;
 8004030:	4b61      	ldr	r3, [pc, #388]	; (80041b8 <LTC_make_temperatures+0x190>)
 8004032:	613b      	str	r3, [r7, #16]
	float temp = 25 + 273.15;
 8004034:	4b61      	ldr	r3, [pc, #388]	; (80041bc <LTC_make_temperatures+0x194>)
 8004036:	60fb      	str	r3, [r7, #12]
	float R0 = 10000 * exp(-beta / temp);
 8004038:	edd7 7a04 	vldr	s15, [r7, #16]
 800403c:	eeb1 7a67 	vneg.f32	s14, s15
 8004040:	edd7 7a03 	vldr	s15, [r7, #12]
 8004044:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004048:	ee16 0a90 	vmov	r0, s13
 800404c:	f7fc fa6e 	bl	800052c <__aeabi_f2d>
 8004050:	4602      	mov	r2, r0
 8004052:	460b      	mov	r3, r1
 8004054:	ec43 2b10 	vmov	d0, r2, r3
 8004058:	f016 fa26 	bl	801a4a8 <exp>
 800405c:	ec51 0b10 	vmov	r0, r1, d0
 8004060:	a351      	add	r3, pc, #324	; (adr r3, 80041a8 <LTC_make_temperatures+0x180>)
 8004062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004066:	f7fc fab9 	bl	80005dc <__aeabi_dmul>
 800406a:	4602      	mov	r2, r0
 800406c:	460b      	mov	r3, r1
 800406e:	4610      	mov	r0, r2
 8004070:	4619      	mov	r1, r3
 8004072:	f7fc fdab 	bl	8000bcc <__aeabi_d2f>
 8004076:	4603      	mov	r3, r0
 8004078:	60bb      	str	r3, [r7, #8]
	float R = 10000;
 800407a:	4b51      	ldr	r3, [pc, #324]	; (80041c0 <LTC_make_temperatures+0x198>)
 800407c:	607b      	str	r3, [r7, #4]

	p = 0;
 800407e:	2300      	movs	r3, #0
 8004080:	807b      	strh	r3, [r7, #2]

	for (cellstack = 0; cellstack < 12; cellstack++) {
 8004082:	2300      	movs	r3, #0
 8004084:	82fb      	strh	r3, [r7, #22]
 8004086:	e082      	b.n	800418e <LTC_make_temperatures+0x166>
		K = 5;
 8004088:	2305      	movs	r3, #5
 800408a:	803b      	strh	r3, [r7, #0]

		for (k = 0; k < K; k++) {
 800408c:	2300      	movs	r3, #0
 800408e:	82bb      	strh	r3, [r7, #20]
 8004090:	e076      	b.n	8004180 <LTC_make_temperatures+0x158>
			LTC_temperatures[p] = beta
					/ (log(R * LTC_data[18 * cellstack + 12 + k])
 8004092:	6938      	ldr	r0, [r7, #16]
 8004094:	f7fc fa4a 	bl	800052c <__aeabi_f2d>
 8004098:	4604      	mov	r4, r0
 800409a:	460d      	mov	r5, r1
 800409c:	8afa      	ldrh	r2, [r7, #22]
 800409e:	4613      	mov	r3, r2
 80040a0:	00db      	lsls	r3, r3, #3
 80040a2:	4413      	add	r3, r2
 80040a4:	005b      	lsls	r3, r3, #1
 80040a6:	f103 020c 	add.w	r2, r3, #12
 80040aa:	8abb      	ldrh	r3, [r7, #20]
 80040ac:	4413      	add	r3, r2
 80040ae:	4a45      	ldr	r2, [pc, #276]	; (80041c4 <LTC_make_temperatures+0x19c>)
 80040b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80040b4:	ee07 3a90 	vmov	s15, r3
 80040b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80040bc:	edd7 7a01 	vldr	s15, [r7, #4]
 80040c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040c4:	ee17 0a90 	vmov	r0, s15
 80040c8:	f7fc fa30 	bl	800052c <__aeabi_f2d>
 80040cc:	4602      	mov	r2, r0
 80040ce:	460b      	mov	r3, r1
 80040d0:	ec43 2b10 	vmov	d0, r2, r3
 80040d4:	f016 fa38 	bl	801a548 <log>
 80040d8:	ec59 8b10 	vmov	r8, r9, d0
							- log(
									-R0
 80040dc:	edd7 7a02 	vldr	s15, [r7, #8]
 80040e0:	eeb1 7a67 	vneg.f32	s14, s15
											* (LTC_data[18 * cellstack + 12 + k]
 80040e4:	8afa      	ldrh	r2, [r7, #22]
 80040e6:	4613      	mov	r3, r2
 80040e8:	00db      	lsls	r3, r3, #3
 80040ea:	4413      	add	r3, r2
 80040ec:	005b      	lsls	r3, r3, #1
 80040ee:	f103 020c 	add.w	r2, r3, #12
 80040f2:	8abb      	ldrh	r3, [r7, #20]
 80040f4:	4413      	add	r3, r2
 80040f6:	4a33      	ldr	r2, [pc, #204]	; (80041c4 <LTC_make_temperatures+0x19c>)
 80040f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80040fc:	4619      	mov	r1, r3
													- LTC_data[18 * cellstack
 80040fe:	8afa      	ldrh	r2, [r7, #22]
 8004100:	4613      	mov	r3, r2
 8004102:	00db      	lsls	r3, r3, #3
 8004104:	4413      	add	r3, r2
 8004106:	005b      	lsls	r3, r3, #1
															+ 12 + K])))
 8004108:	f103 020c 	add.w	r2, r3, #12
 800410c:	883b      	ldrh	r3, [r7, #0]
 800410e:	4413      	add	r3, r2
													- LTC_data[18 * cellstack
 8004110:	4a2c      	ldr	r2, [pc, #176]	; (80041c4 <LTC_make_temperatures+0x19c>)
 8004112:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004116:	1acb      	subs	r3, r1, r3
											* (LTC_data[18 * cellstack + 12 + k]
 8004118:	ee07 3a90 	vmov	s15, r3
 800411c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004120:	ee67 7a27 	vmul.f32	s15, s14, s15
							- log(
 8004124:	ee17 0a90 	vmov	r0, s15
 8004128:	f7fc fa00 	bl	800052c <__aeabi_f2d>
 800412c:	4602      	mov	r2, r0
 800412e:	460b      	mov	r3, r1
 8004130:	ec43 2b10 	vmov	d0, r2, r3
 8004134:	f016 fa08 	bl	801a548 <log>
 8004138:	ec53 2b10 	vmov	r2, r3, d0
 800413c:	4640      	mov	r0, r8
 800413e:	4649      	mov	r1, r9
 8004140:	f7fc f894 	bl	800026c <__aeabi_dsub>
 8004144:	4602      	mov	r2, r0
 8004146:	460b      	mov	r3, r1
					/ (log(R * LTC_data[18 * cellstack + 12 + k])
 8004148:	4620      	mov	r0, r4
 800414a:	4629      	mov	r1, r5
 800414c:	f7fc fb70 	bl	8000830 <__aeabi_ddiv>
 8004150:	4602      	mov	r2, r0
 8004152:	460b      	mov	r3, r1
 8004154:	4610      	mov	r0, r2
 8004156:	4619      	mov	r1, r3
					- 273.15;
 8004158:	a315      	add	r3, pc, #84	; (adr r3, 80041b0 <LTC_make_temperatures+0x188>)
 800415a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800415e:	f7fc f885 	bl	800026c <__aeabi_dsub>
 8004162:	4602      	mov	r2, r0
 8004164:	460b      	mov	r3, r1
			LTC_temperatures[p] = beta
 8004166:	887c      	ldrh	r4, [r7, #2]
					- 273.15;
 8004168:	4610      	mov	r0, r2
 800416a:	4619      	mov	r1, r3
 800416c:	f7fc fd2e 	bl	8000bcc <__aeabi_d2f>
 8004170:	4602      	mov	r2, r0
			LTC_temperatures[p] = beta
 8004172:	4915      	ldr	r1, [pc, #84]	; (80041c8 <LTC_make_temperatures+0x1a0>)
 8004174:	00a3      	lsls	r3, r4, #2
 8004176:	440b      	add	r3, r1
 8004178:	601a      	str	r2, [r3, #0]
		for (k = 0; k < K; k++) {
 800417a:	8abb      	ldrh	r3, [r7, #20]
 800417c:	3301      	adds	r3, #1
 800417e:	82bb      	strh	r3, [r7, #20]
 8004180:	8aba      	ldrh	r2, [r7, #20]
 8004182:	883b      	ldrh	r3, [r7, #0]
 8004184:	429a      	cmp	r2, r3
 8004186:	d384      	bcc.n	8004092 <LTC_make_temperatures+0x6a>
	for (cellstack = 0; cellstack < 12; cellstack++) {
 8004188:	8afb      	ldrh	r3, [r7, #22]
 800418a:	3301      	adds	r3, #1
 800418c:	82fb      	strh	r3, [r7, #22]
 800418e:	8afb      	ldrh	r3, [r7, #22]
 8004190:	2b0b      	cmp	r3, #11
 8004192:	f67f af79 	bls.w	8004088 <LTC_make_temperatures+0x60>

		}
	}

	return 1;
 8004196:	2301      	movs	r3, #1
}
 8004198:	4618      	mov	r0, r3
 800419a:	3718      	adds	r7, #24
 800419c:	46bd      	mov	sp, r7
 800419e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80041a2:	bf00      	nop
 80041a4:	f3af 8000 	nop.w
 80041a8:	00000000 	.word	0x00000000
 80041ac:	40c38800 	.word	0x40c38800
 80041b0:	66666666 	.word	0x66666666
 80041b4:	40711266 	.word	0x40711266
 80041b8:	455ac000 	.word	0x455ac000
 80041bc:	43951333 	.word	0x43951333
 80041c0:	461c4000 	.word	0x461c4000
 80041c4:	2001b9b0 	.word	0x2001b9b0
 80041c8:	2001bb60 	.word	0x2001bb60

080041cc <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80041d0:	4b17      	ldr	r3, [pc, #92]	; (8004230 <MX_SPI2_Init+0x64>)
 80041d2:	4a18      	ldr	r2, [pc, #96]	; (8004234 <MX_SPI2_Init+0x68>)
 80041d4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80041d6:	4b16      	ldr	r3, [pc, #88]	; (8004230 <MX_SPI2_Init+0x64>)
 80041d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80041dc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80041de:	4b14      	ldr	r3, [pc, #80]	; (8004230 <MX_SPI2_Init+0x64>)
 80041e0:	2200      	movs	r2, #0
 80041e2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80041e4:	4b12      	ldr	r3, [pc, #72]	; (8004230 <MX_SPI2_Init+0x64>)
 80041e6:	2200      	movs	r2, #0
 80041e8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80041ea:	4b11      	ldr	r3, [pc, #68]	; (8004230 <MX_SPI2_Init+0x64>)
 80041ec:	2200      	movs	r2, #0
 80041ee:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80041f0:	4b0f      	ldr	r3, [pc, #60]	; (8004230 <MX_SPI2_Init+0x64>)
 80041f2:	2200      	movs	r2, #0
 80041f4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80041f6:	4b0e      	ldr	r3, [pc, #56]	; (8004230 <MX_SPI2_Init+0x64>)
 80041f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041fc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80041fe:	4b0c      	ldr	r3, [pc, #48]	; (8004230 <MX_SPI2_Init+0x64>)
 8004200:	2220      	movs	r2, #32
 8004202:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004204:	4b0a      	ldr	r3, [pc, #40]	; (8004230 <MX_SPI2_Init+0x64>)
 8004206:	2200      	movs	r2, #0
 8004208:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800420a:	4b09      	ldr	r3, [pc, #36]	; (8004230 <MX_SPI2_Init+0x64>)
 800420c:	2200      	movs	r2, #0
 800420e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004210:	4b07      	ldr	r3, [pc, #28]	; (8004230 <MX_SPI2_Init+0x64>)
 8004212:	2200      	movs	r2, #0
 8004214:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8004216:	4b06      	ldr	r3, [pc, #24]	; (8004230 <MX_SPI2_Init+0x64>)
 8004218:	220a      	movs	r2, #10
 800421a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800421c:	4804      	ldr	r0, [pc, #16]	; (8004230 <MX_SPI2_Init+0x64>)
 800421e:	f00f f89b 	bl	8013358 <HAL_SPI_Init>
 8004222:	4603      	mov	r3, r0
 8004224:	2b00      	cmp	r3, #0
 8004226:	d001      	beq.n	800422c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8004228:	f7ff fc28 	bl	8003a7c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800422c:	bf00      	nop
 800422e:	bd80      	pop	{r7, pc}
 8004230:	2001bc50 	.word	0x2001bc50
 8004234:	40003800 	.word	0x40003800

08004238 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b08a      	sub	sp, #40	; 0x28
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004240:	f107 0314 	add.w	r3, r7, #20
 8004244:	2200      	movs	r2, #0
 8004246:	601a      	str	r2, [r3, #0]
 8004248:	605a      	str	r2, [r3, #4]
 800424a:	609a      	str	r2, [r3, #8]
 800424c:	60da      	str	r2, [r3, #12]
 800424e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a28      	ldr	r2, [pc, #160]	; (80042f8 <HAL_SPI_MspInit+0xc0>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d14a      	bne.n	80042f0 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800425a:	2300      	movs	r3, #0
 800425c:	613b      	str	r3, [r7, #16]
 800425e:	4b27      	ldr	r3, [pc, #156]	; (80042fc <HAL_SPI_MspInit+0xc4>)
 8004260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004262:	4a26      	ldr	r2, [pc, #152]	; (80042fc <HAL_SPI_MspInit+0xc4>)
 8004264:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004268:	6413      	str	r3, [r2, #64]	; 0x40
 800426a:	4b24      	ldr	r3, [pc, #144]	; (80042fc <HAL_SPI_MspInit+0xc4>)
 800426c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004272:	613b      	str	r3, [r7, #16]
 8004274:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004276:	2300      	movs	r3, #0
 8004278:	60fb      	str	r3, [r7, #12]
 800427a:	4b20      	ldr	r3, [pc, #128]	; (80042fc <HAL_SPI_MspInit+0xc4>)
 800427c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800427e:	4a1f      	ldr	r2, [pc, #124]	; (80042fc <HAL_SPI_MspInit+0xc4>)
 8004280:	f043 0304 	orr.w	r3, r3, #4
 8004284:	6313      	str	r3, [r2, #48]	; 0x30
 8004286:	4b1d      	ldr	r3, [pc, #116]	; (80042fc <HAL_SPI_MspInit+0xc4>)
 8004288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800428a:	f003 0304 	and.w	r3, r3, #4
 800428e:	60fb      	str	r3, [r7, #12]
 8004290:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004292:	2300      	movs	r3, #0
 8004294:	60bb      	str	r3, [r7, #8]
 8004296:	4b19      	ldr	r3, [pc, #100]	; (80042fc <HAL_SPI_MspInit+0xc4>)
 8004298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800429a:	4a18      	ldr	r2, [pc, #96]	; (80042fc <HAL_SPI_MspInit+0xc4>)
 800429c:	f043 0302 	orr.w	r3, r3, #2
 80042a0:	6313      	str	r3, [r2, #48]	; 0x30
 80042a2:	4b16      	ldr	r3, [pc, #88]	; (80042fc <HAL_SPI_MspInit+0xc4>)
 80042a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a6:	f003 0302 	and.w	r3, r3, #2
 80042aa:	60bb      	str	r3, [r7, #8]
 80042ac:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80042ae:	230c      	movs	r3, #12
 80042b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042b2:	2302      	movs	r3, #2
 80042b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042b6:	2300      	movs	r3, #0
 80042b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042ba:	2303      	movs	r3, #3
 80042bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80042be:	2305      	movs	r3, #5
 80042c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80042c2:	f107 0314 	add.w	r3, r7, #20
 80042c6:	4619      	mov	r1, r3
 80042c8:	480d      	ldr	r0, [pc, #52]	; (8004300 <HAL_SPI_MspInit+0xc8>)
 80042ca:	f00e fa19 	bl	8012700 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80042ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80042d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042d4:	2302      	movs	r3, #2
 80042d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042d8:	2300      	movs	r3, #0
 80042da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042dc:	2303      	movs	r3, #3
 80042de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80042e0:	2305      	movs	r3, #5
 80042e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042e4:	f107 0314 	add.w	r3, r7, #20
 80042e8:	4619      	mov	r1, r3
 80042ea:	4806      	ldr	r0, [pc, #24]	; (8004304 <HAL_SPI_MspInit+0xcc>)
 80042ec:	f00e fa08 	bl	8012700 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80042f0:	bf00      	nop
 80042f2:	3728      	adds	r7, #40	; 0x28
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}
 80042f8:	40003800 	.word	0x40003800
 80042fc:	40023800 	.word	0x40023800
 8004300:	40020800 	.word	0x40020800
 8004304:	40020400 	.word	0x40020400

08004308 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b082      	sub	sp, #8
 800430c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800430e:	2300      	movs	r3, #0
 8004310:	607b      	str	r3, [r7, #4]
 8004312:	4b12      	ldr	r3, [pc, #72]	; (800435c <HAL_MspInit+0x54>)
 8004314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004316:	4a11      	ldr	r2, [pc, #68]	; (800435c <HAL_MspInit+0x54>)
 8004318:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800431c:	6453      	str	r3, [r2, #68]	; 0x44
 800431e:	4b0f      	ldr	r3, [pc, #60]	; (800435c <HAL_MspInit+0x54>)
 8004320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004322:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004326:	607b      	str	r3, [r7, #4]
 8004328:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800432a:	2300      	movs	r3, #0
 800432c:	603b      	str	r3, [r7, #0]
 800432e:	4b0b      	ldr	r3, [pc, #44]	; (800435c <HAL_MspInit+0x54>)
 8004330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004332:	4a0a      	ldr	r2, [pc, #40]	; (800435c <HAL_MspInit+0x54>)
 8004334:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004338:	6413      	str	r3, [r2, #64]	; 0x40
 800433a:	4b08      	ldr	r3, [pc, #32]	; (800435c <HAL_MspInit+0x54>)
 800433c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004342:	603b      	str	r3, [r7, #0]
 8004344:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004346:	2200      	movs	r2, #0
 8004348:	210f      	movs	r1, #15
 800434a:	f06f 0001 	mvn.w	r0, #1
 800434e:	f00d fe3d 	bl	8011fcc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004352:	bf00      	nop
 8004354:	3708      	adds	r7, #8
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}
 800435a:	bf00      	nop
 800435c:	40023800 	.word	0x40023800

08004360 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b08c      	sub	sp, #48	; 0x30
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004368:	2300      	movs	r3, #0
 800436a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800436c:	2300      	movs	r3, #0
 800436e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 8004370:	2200      	movs	r2, #0
 8004372:	6879      	ldr	r1, [r7, #4]
 8004374:	2032      	movs	r0, #50	; 0x32
 8004376:	f00d fe29 	bl	8011fcc <HAL_NVIC_SetPriority>

  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800437a:	2032      	movs	r0, #50	; 0x32
 800437c:	f00d fe42 	bl	8012004 <HAL_NVIC_EnableIRQ>

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8004380:	2300      	movs	r3, #0
 8004382:	60fb      	str	r3, [r7, #12]
 8004384:	4b1e      	ldr	r3, [pc, #120]	; (8004400 <HAL_InitTick+0xa0>)
 8004386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004388:	4a1d      	ldr	r2, [pc, #116]	; (8004400 <HAL_InitTick+0xa0>)
 800438a:	f043 0308 	orr.w	r3, r3, #8
 800438e:	6413      	str	r3, [r2, #64]	; 0x40
 8004390:	4b1b      	ldr	r3, [pc, #108]	; (8004400 <HAL_InitTick+0xa0>)
 8004392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004394:	f003 0308 	and.w	r3, r3, #8
 8004398:	60fb      	str	r3, [r7, #12]
 800439a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800439c:	f107 0210 	add.w	r2, r7, #16
 80043a0:	f107 0314 	add.w	r3, r7, #20
 80043a4:	4611      	mov	r1, r2
 80043a6:	4618      	mov	r0, r3
 80043a8:	f00e ffa4 	bl	80132f4 <HAL_RCC_GetClockConfig>

  /* Compute TIM5 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80043ac:	f00e ff8e 	bl	80132cc <HAL_RCC_GetPCLK1Freq>
 80043b0:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80043b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043b4:	4a13      	ldr	r2, [pc, #76]	; (8004404 <HAL_InitTick+0xa4>)
 80043b6:	fba2 2303 	umull	r2, r3, r2, r3
 80043ba:	0c9b      	lsrs	r3, r3, #18
 80043bc:	3b01      	subs	r3, #1
 80043be:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 80043c0:	4b11      	ldr	r3, [pc, #68]	; (8004408 <HAL_InitTick+0xa8>)
 80043c2:	4a12      	ldr	r2, [pc, #72]	; (800440c <HAL_InitTick+0xac>)
 80043c4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 80043c6:	4b10      	ldr	r3, [pc, #64]	; (8004408 <HAL_InitTick+0xa8>)
 80043c8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80043cc:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 80043ce:	4a0e      	ldr	r2, [pc, #56]	; (8004408 <HAL_InitTick+0xa8>)
 80043d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043d2:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 80043d4:	4b0c      	ldr	r3, [pc, #48]	; (8004408 <HAL_InitTick+0xa8>)
 80043d6:	2200      	movs	r2, #0
 80043d8:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80043da:	4b0b      	ldr	r3, [pc, #44]	; (8004408 <HAL_InitTick+0xa8>)
 80043dc:	2200      	movs	r2, #0
 80043de:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 80043e0:	4809      	ldr	r0, [pc, #36]	; (8004408 <HAL_InitTick+0xa8>)
 80043e2:	f00f fd61 	bl	8013ea8 <HAL_TIM_Base_Init>
 80043e6:	4603      	mov	r3, r0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d104      	bne.n	80043f6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 80043ec:	4806      	ldr	r0, [pc, #24]	; (8004408 <HAL_InitTick+0xa8>)
 80043ee:	f00f fe13 	bl	8014018 <HAL_TIM_Base_Start_IT>
 80043f2:	4603      	mov	r3, r0
 80043f4:	e000      	b.n	80043f8 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3730      	adds	r7, #48	; 0x30
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}
 8004400:	40023800 	.word	0x40023800
 8004404:	431bde83 	.word	0x431bde83
 8004408:	2001bca8 	.word	0x2001bca8
 800440c:	40000c00 	.word	0x40000c00

08004410 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004410:	b480      	push	{r7}
 8004412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004414:	e7fe      	b.n	8004414 <NMI_Handler+0x4>

08004416 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004416:	b480      	push	{r7}
 8004418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800441a:	e7fe      	b.n	800441a <HardFault_Handler+0x4>

0800441c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800441c:	b480      	push	{r7}
 800441e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004420:	e7fe      	b.n	8004420 <MemManage_Handler+0x4>

08004422 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004422:	b480      	push	{r7}
 8004424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004426:	e7fe      	b.n	8004426 <BusFault_Handler+0x4>

08004428 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004428:	b480      	push	{r7}
 800442a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800442c:	e7fe      	b.n	800442c <UsageFault_Handler+0x4>

0800442e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800442e:	b480      	push	{r7}
 8004430:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004432:	bf00      	nop
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr

0800443c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004440:	4802      	ldr	r0, [pc, #8]	; (800444c <ADC_IRQHandler+0x10>)
 8004442:	f00c fa32 	bl	80108aa <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8004446:	bf00      	nop
 8004448:	bd80      	pop	{r7, pc}
 800444a:	bf00      	nop
 800444c:	2001b594 	.word	0x2001b594

08004450 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8004454:	4802      	ldr	r0, [pc, #8]	; (8004460 <CAN1_TX_IRQHandler+0x10>)
 8004456:	f00d fadb 	bl	8011a10 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 800445a:	bf00      	nop
 800445c:	bd80      	pop	{r7, pc}
 800445e:	bf00      	nop
 8004460:	2001b664 	.word	0x2001b664

08004464 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8004468:	4802      	ldr	r0, [pc, #8]	; (8004474 <CAN1_RX0_IRQHandler+0x10>)
 800446a:	f00d fad1 	bl	8011a10 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800446e:	bf00      	nop
 8004470:	bd80      	pop	{r7, pc}
 8004472:	bf00      	nop
 8004474:	2001b664 	.word	0x2001b664

08004478 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800447c:	4802      	ldr	r0, [pc, #8]	; (8004488 <CAN1_RX1_IRQHandler+0x10>)
 800447e:	f00d fac7 	bl	8011a10 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8004482:	bf00      	nop
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop
 8004488:	2001b664 	.word	0x2001b664

0800448c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004490:	4802      	ldr	r0, [pc, #8]	; (800449c <TIM2_IRQHandler+0x10>)
 8004492:	f010 f9b1 	bl	80147f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004496:	bf00      	nop
 8004498:	bd80      	pop	{r7, pc}
 800449a:	bf00      	nop
 800449c:	2001bd80 	.word	0x2001bd80

080044a0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80044a4:	4802      	ldr	r0, [pc, #8]	; (80044b0 <TIM3_IRQHandler+0x10>)
 80044a6:	f010 f9a7 	bl	80147f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80044aa:	bf00      	nop
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	bf00      	nop
 80044b0:	2001bcf0 	.word	0x2001bcf0

080044b4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80044b8:	4802      	ldr	r0, [pc, #8]	; (80044c4 <TIM5_IRQHandler+0x10>)
 80044ba:	f010 f99d 	bl	80147f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80044be:	bf00      	nop
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	bf00      	nop
 80044c4:	2001bca8 	.word	0x2001bca8

080044c8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80044cc:	4802      	ldr	r0, [pc, #8]	; (80044d8 <DMA2_Stream0_IRQHandler+0x10>)
 80044ce:	f00d fead 	bl	801222c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80044d2:	bf00      	nop
 80044d4:	bd80      	pop	{r7, pc}
 80044d6:	bf00      	nop
 80044d8:	2001b5dc 	.word	0x2001b5dc

080044dc <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupts.
  */
void CAN2_TX_IRQHandler(void)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80044e0:	4802      	ldr	r0, [pc, #8]	; (80044ec <CAN2_TX_IRQHandler+0x10>)
 80044e2:	f00d fa95 	bl	8011a10 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 80044e6:	bf00      	nop
 80044e8:	bd80      	pop	{r7, pc}
 80044ea:	bf00      	nop
 80044ec:	2001b63c 	.word	0x2001b63c

080044f0 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80044f4:	4802      	ldr	r0, [pc, #8]	; (8004500 <CAN2_RX0_IRQHandler+0x10>)
 80044f6:	f00d fa8b 	bl	8011a10 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 80044fa:	bf00      	nop
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	bf00      	nop
 8004500:	2001b63c 	.word	0x2001b63c

08004504 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8004508:	4802      	ldr	r0, [pc, #8]	; (8004514 <CAN2_RX1_IRQHandler+0x10>)
 800450a:	f00d fa81 	bl	8011a10 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 800450e:	bf00      	nop
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	2001b63c 	.word	0x2001b63c

08004518 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004518:	b480      	push	{r7}
 800451a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800451c:	4b06      	ldr	r3, [pc, #24]	; (8004538 <SystemInit+0x20>)
 800451e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004522:	4a05      	ldr	r2, [pc, #20]	; (8004538 <SystemInit+0x20>)
 8004524:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004528:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800452c:	bf00      	nop
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr
 8004536:	bf00      	nop
 8004538:	e000ed00 	.word	0xe000ed00

0800453c <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b096      	sub	sp, #88	; 0x58
 8004540:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004542:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004546:	2200      	movs	r2, #0
 8004548:	601a      	str	r2, [r3, #0]
 800454a:	605a      	str	r2, [r3, #4]
 800454c:	609a      	str	r2, [r3, #8]
 800454e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004550:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004554:	2200      	movs	r2, #0
 8004556:	601a      	str	r2, [r3, #0]
 8004558:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800455a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800455e:	2200      	movs	r2, #0
 8004560:	601a      	str	r2, [r3, #0]
 8004562:	605a      	str	r2, [r3, #4]
 8004564:	609a      	str	r2, [r3, #8]
 8004566:	60da      	str	r2, [r3, #12]
 8004568:	611a      	str	r2, [r3, #16]
 800456a:	615a      	str	r2, [r3, #20]
 800456c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800456e:	1d3b      	adds	r3, r7, #4
 8004570:	2220      	movs	r2, #32
 8004572:	2100      	movs	r1, #0
 8004574:	4618      	mov	r0, r3
 8004576:	f015 fe77 	bl	801a268 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800457a:	4b3e      	ldr	r3, [pc, #248]	; (8004674 <MX_TIM1_Init+0x138>)
 800457c:	4a3e      	ldr	r2, [pc, #248]	; (8004678 <MX_TIM1_Init+0x13c>)
 800457e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8004580:	4b3c      	ldr	r3, [pc, #240]	; (8004674 <MX_TIM1_Init+0x138>)
 8004582:	2200      	movs	r2, #0
 8004584:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004586:	4b3b      	ldr	r3, [pc, #236]	; (8004674 <MX_TIM1_Init+0x138>)
 8004588:	2200      	movs	r2, #0
 800458a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800458c:	4b39      	ldr	r3, [pc, #228]	; (8004674 <MX_TIM1_Init+0x138>)
 800458e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004592:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004594:	4b37      	ldr	r3, [pc, #220]	; (8004674 <MX_TIM1_Init+0x138>)
 8004596:	2200      	movs	r2, #0
 8004598:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800459a:	4b36      	ldr	r3, [pc, #216]	; (8004674 <MX_TIM1_Init+0x138>)
 800459c:	2200      	movs	r2, #0
 800459e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80045a0:	4b34      	ldr	r3, [pc, #208]	; (8004674 <MX_TIM1_Init+0x138>)
 80045a2:	2200      	movs	r2, #0
 80045a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80045a6:	4833      	ldr	r0, [pc, #204]	; (8004674 <MX_TIM1_Init+0x138>)
 80045a8:	f00f fc7e 	bl	8013ea8 <HAL_TIM_Base_Init>
 80045ac:	4603      	mov	r3, r0
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d001      	beq.n	80045b6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80045b2:	f7ff fa63 	bl	8003a7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80045b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80045ba:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80045bc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80045c0:	4619      	mov	r1, r3
 80045c2:	482c      	ldr	r0, [pc, #176]	; (8004674 <MX_TIM1_Init+0x138>)
 80045c4:	f010 fb7e 	bl	8014cc4 <HAL_TIM_ConfigClockSource>
 80045c8:	4603      	mov	r3, r0
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d001      	beq.n	80045d2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80045ce:	f7ff fa55 	bl	8003a7c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80045d2:	4828      	ldr	r0, [pc, #160]	; (8004674 <MX_TIM1_Init+0x138>)
 80045d4:	f00f fd90 	bl	80140f8 <HAL_TIM_PWM_Init>
 80045d8:	4603      	mov	r3, r0
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d001      	beq.n	80045e2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80045de:	f7ff fa4d 	bl	8003a7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80045e2:	2300      	movs	r3, #0
 80045e4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80045e6:	2300      	movs	r3, #0
 80045e8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80045ea:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80045ee:	4619      	mov	r1, r3
 80045f0:	4820      	ldr	r0, [pc, #128]	; (8004674 <MX_TIM1_Init+0x138>)
 80045f2:	f011 f99f 	bl	8015934 <HAL_TIMEx_MasterConfigSynchronization>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d001      	beq.n	8004600 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80045fc:	f7ff fa3e 	bl	8003a7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004600:	2360      	movs	r3, #96	; 0x60
 8004602:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8004604:	2300      	movs	r3, #0
 8004606:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004608:	2300      	movs	r3, #0
 800460a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800460c:	2300      	movs	r3, #0
 800460e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004610:	2300      	movs	r3, #0
 8004612:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004614:	2300      	movs	r3, #0
 8004616:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004618:	2300      	movs	r3, #0
 800461a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800461c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004620:	2208      	movs	r2, #8
 8004622:	4619      	mov	r1, r3
 8004624:	4813      	ldr	r0, [pc, #76]	; (8004674 <MX_TIM1_Init+0x138>)
 8004626:	f010 fa8b 	bl	8014b40 <HAL_TIM_PWM_ConfigChannel>
 800462a:	4603      	mov	r3, r0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d001      	beq.n	8004634 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8004630:	f7ff fa24 	bl	8003a7c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004634:	2300      	movs	r3, #0
 8004636:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004638:	2300      	movs	r3, #0
 800463a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800463c:	2300      	movs	r3, #0
 800463e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004640:	2300      	movs	r3, #0
 8004642:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004644:	2300      	movs	r3, #0
 8004646:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004648:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800464c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800464e:	2300      	movs	r3, #0
 8004650:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004652:	1d3b      	adds	r3, r7, #4
 8004654:	4619      	mov	r1, r3
 8004656:	4807      	ldr	r0, [pc, #28]	; (8004674 <MX_TIM1_Init+0x138>)
 8004658:	f011 f9e8 	bl	8015a2c <HAL_TIMEx_ConfigBreakDeadTime>
 800465c:	4603      	mov	r3, r0
 800465e:	2b00      	cmp	r3, #0
 8004660:	d001      	beq.n	8004666 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8004662:	f7ff fa0b 	bl	8003a7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004666:	4803      	ldr	r0, [pc, #12]	; (8004674 <MX_TIM1_Init+0x138>)
 8004668:	f000 f974 	bl	8004954 <HAL_TIM_MspPostInit>

}
 800466c:	bf00      	nop
 800466e:	3758      	adds	r7, #88	; 0x58
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}
 8004674:	2001bd38 	.word	0x2001bd38
 8004678:	40010000 	.word	0x40010000

0800467c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b090      	sub	sp, #64	; 0x40
 8004680:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004682:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004686:	2200      	movs	r2, #0
 8004688:	601a      	str	r2, [r3, #0]
 800468a:	605a      	str	r2, [r3, #4]
 800468c:	609a      	str	r2, [r3, #8]
 800468e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8004690:	f107 031c 	add.w	r3, r7, #28
 8004694:	2200      	movs	r2, #0
 8004696:	601a      	str	r2, [r3, #0]
 8004698:	605a      	str	r2, [r3, #4]
 800469a:	609a      	str	r2, [r3, #8]
 800469c:	60da      	str	r2, [r3, #12]
 800469e:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80046a0:	f107 030c 	add.w	r3, r7, #12
 80046a4:	2200      	movs	r2, #0
 80046a6:	601a      	str	r2, [r3, #0]
 80046a8:	605a      	str	r2, [r3, #4]
 80046aa:	609a      	str	r2, [r3, #8]
 80046ac:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80046ae:	1d3b      	adds	r3, r7, #4
 80046b0:	2200      	movs	r2, #0
 80046b2:	601a      	str	r2, [r3, #0]
 80046b4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80046b6:	4b3e      	ldr	r3, [pc, #248]	; (80047b0 <MX_TIM2_Init+0x134>)
 80046b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80046bc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80046be:	4b3c      	ldr	r3, [pc, #240]	; (80047b0 <MX_TIM2_Init+0x134>)
 80046c0:	2200      	movs	r2, #0
 80046c2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80046c4:	4b3a      	ldr	r3, [pc, #232]	; (80047b0 <MX_TIM2_Init+0x134>)
 80046c6:	2200      	movs	r2, #0
 80046c8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80046ca:	4b39      	ldr	r3, [pc, #228]	; (80047b0 <MX_TIM2_Init+0x134>)
 80046cc:	f04f 32ff 	mov.w	r2, #4294967295
 80046d0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80046d2:	4b37      	ldr	r3, [pc, #220]	; (80047b0 <MX_TIM2_Init+0x134>)
 80046d4:	2200      	movs	r2, #0
 80046d6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80046d8:	4b35      	ldr	r3, [pc, #212]	; (80047b0 <MX_TIM2_Init+0x134>)
 80046da:	2200      	movs	r2, #0
 80046dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80046de:	4834      	ldr	r0, [pc, #208]	; (80047b0 <MX_TIM2_Init+0x134>)
 80046e0:	f00f fbe2 	bl	8013ea8 <HAL_TIM_Base_Init>
 80046e4:	4603      	mov	r3, r0
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d001      	beq.n	80046ee <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80046ea:	f7ff f9c7 	bl	8003a7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80046ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80046f2:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80046f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80046f8:	4619      	mov	r1, r3
 80046fa:	482d      	ldr	r0, [pc, #180]	; (80047b0 <MX_TIM2_Init+0x134>)
 80046fc:	f010 fae2 	bl	8014cc4 <HAL_TIM_ConfigClockSource>
 8004700:	4603      	mov	r3, r0
 8004702:	2b00      	cmp	r3, #0
 8004704:	d001      	beq.n	800470a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8004706:	f7ff f9b9 	bl	8003a7c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800470a:	4829      	ldr	r0, [pc, #164]	; (80047b0 <MX_TIM2_Init+0x134>)
 800470c:	f00f fe16 	bl	801433c <HAL_TIM_IC_Init>
 8004710:	4603      	mov	r3, r0
 8004712:	2b00      	cmp	r3, #0
 8004714:	d001      	beq.n	800471a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8004716:	f7ff f9b1 	bl	8003a7c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800471a:	2304      	movs	r3, #4
 800471c:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 800471e:	2350      	movs	r3, #80	; 0x50
 8004720:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8004722:	2300      	movs	r3, #0
 8004724:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8004726:	2300      	movs	r3, #0
 8004728:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 800472a:	2300      	movs	r3, #0
 800472c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 800472e:	f107 031c 	add.w	r3, r7, #28
 8004732:	4619      	mov	r1, r3
 8004734:	481e      	ldr	r0, [pc, #120]	; (80047b0 <MX_TIM2_Init+0x134>)
 8004736:	f010 fb8c 	bl	8014e52 <HAL_TIM_SlaveConfigSynchro>
 800473a:	4603      	mov	r3, r0
 800473c:	2b00      	cmp	r3, #0
 800473e:	d001      	beq.n	8004744 <MX_TIM2_Init+0xc8>
  {
    Error_Handler();
 8004740:	f7ff f99c 	bl	8003a7c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8004744:	2300      	movs	r3, #0
 8004746:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8004748:	2301      	movs	r3, #1
 800474a:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800474c:	2300      	movs	r3, #0
 800474e:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8004750:	2300      	movs	r3, #0
 8004752:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8004754:	f107 030c 	add.w	r3, r7, #12
 8004758:	2200      	movs	r2, #0
 800475a:	4619      	mov	r1, r3
 800475c:	4814      	ldr	r0, [pc, #80]	; (80047b0 <MX_TIM2_Init+0x134>)
 800475e:	f010 f953 	bl	8014a08 <HAL_TIM_IC_ConfigChannel>
 8004762:	4603      	mov	r3, r0
 8004764:	2b00      	cmp	r3, #0
 8004766:	d001      	beq.n	800476c <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8004768:	f7ff f988 	bl	8003a7c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800476c:	2302      	movs	r3, #2
 800476e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8004770:	2302      	movs	r3, #2
 8004772:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8004774:	f107 030c 	add.w	r3, r7, #12
 8004778:	2204      	movs	r2, #4
 800477a:	4619      	mov	r1, r3
 800477c:	480c      	ldr	r0, [pc, #48]	; (80047b0 <MX_TIM2_Init+0x134>)
 800477e:	f010 f943 	bl	8014a08 <HAL_TIM_IC_ConfigChannel>
 8004782:	4603      	mov	r3, r0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d001      	beq.n	800478c <MX_TIM2_Init+0x110>
  {
    Error_Handler();
 8004788:	f7ff f978 	bl	8003a7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800478c:	2300      	movs	r3, #0
 800478e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004790:	2300      	movs	r3, #0
 8004792:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004794:	1d3b      	adds	r3, r7, #4
 8004796:	4619      	mov	r1, r3
 8004798:	4805      	ldr	r0, [pc, #20]	; (80047b0 <MX_TIM2_Init+0x134>)
 800479a:	f011 f8cb 	bl	8015934 <HAL_TIMEx_MasterConfigSynchronization>
 800479e:	4603      	mov	r3, r0
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d001      	beq.n	80047a8 <MX_TIM2_Init+0x12c>
  {
    Error_Handler();
 80047a4:	f7ff f96a 	bl	8003a7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80047a8:	bf00      	nop
 80047aa:	3740      	adds	r7, #64	; 0x40
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}
 80047b0:	2001bd80 	.word	0x2001bd80

080047b4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b086      	sub	sp, #24
 80047b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80047ba:	f107 0308 	add.w	r3, r7, #8
 80047be:	2200      	movs	r2, #0
 80047c0:	601a      	str	r2, [r3, #0]
 80047c2:	605a      	str	r2, [r3, #4]
 80047c4:	609a      	str	r2, [r3, #8]
 80047c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80047c8:	463b      	mov	r3, r7
 80047ca:	2200      	movs	r2, #0
 80047cc:	601a      	str	r2, [r3, #0]
 80047ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80047d0:	4b1d      	ldr	r3, [pc, #116]	; (8004848 <MX_TIM3_Init+0x94>)
 80047d2:	4a1e      	ldr	r2, [pc, #120]	; (800484c <MX_TIM3_Init+0x98>)
 80047d4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80047d6:	4b1c      	ldr	r3, [pc, #112]	; (8004848 <MX_TIM3_Init+0x94>)
 80047d8:	2200      	movs	r2, #0
 80047da:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80047dc:	4b1a      	ldr	r3, [pc, #104]	; (8004848 <MX_TIM3_Init+0x94>)
 80047de:	2200      	movs	r2, #0
 80047e0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80047e2:	4b19      	ldr	r3, [pc, #100]	; (8004848 <MX_TIM3_Init+0x94>)
 80047e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80047e8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80047ea:	4b17      	ldr	r3, [pc, #92]	; (8004848 <MX_TIM3_Init+0x94>)
 80047ec:	2200      	movs	r2, #0
 80047ee:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80047f0:	4b15      	ldr	r3, [pc, #84]	; (8004848 <MX_TIM3_Init+0x94>)
 80047f2:	2200      	movs	r2, #0
 80047f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80047f6:	4814      	ldr	r0, [pc, #80]	; (8004848 <MX_TIM3_Init+0x94>)
 80047f8:	f00f fb56 	bl	8013ea8 <HAL_TIM_Base_Init>
 80047fc:	4603      	mov	r3, r0
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d001      	beq.n	8004806 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8004802:	f7ff f93b 	bl	8003a7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004806:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800480a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800480c:	f107 0308 	add.w	r3, r7, #8
 8004810:	4619      	mov	r1, r3
 8004812:	480d      	ldr	r0, [pc, #52]	; (8004848 <MX_TIM3_Init+0x94>)
 8004814:	f010 fa56 	bl	8014cc4 <HAL_TIM_ConfigClockSource>
 8004818:	4603      	mov	r3, r0
 800481a:	2b00      	cmp	r3, #0
 800481c:	d001      	beq.n	8004822 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800481e:	f7ff f92d 	bl	8003a7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004822:	2320      	movs	r3, #32
 8004824:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004826:	2300      	movs	r3, #0
 8004828:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800482a:	463b      	mov	r3, r7
 800482c:	4619      	mov	r1, r3
 800482e:	4806      	ldr	r0, [pc, #24]	; (8004848 <MX_TIM3_Init+0x94>)
 8004830:	f011 f880 	bl	8015934 <HAL_TIMEx_MasterConfigSynchronization>
 8004834:	4603      	mov	r3, r0
 8004836:	2b00      	cmp	r3, #0
 8004838:	d001      	beq.n	800483e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800483a:	f7ff f91f 	bl	8003a7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800483e:	bf00      	nop
 8004840:	3718      	adds	r7, #24
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}
 8004846:	bf00      	nop
 8004848:	2001bcf0 	.word	0x2001bcf0
 800484c:	40000400 	.word	0x40000400

08004850 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b08c      	sub	sp, #48	; 0x30
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004858:	f107 031c 	add.w	r3, r7, #28
 800485c:	2200      	movs	r2, #0
 800485e:	601a      	str	r2, [r3, #0]
 8004860:	605a      	str	r2, [r3, #4]
 8004862:	609a      	str	r2, [r3, #8]
 8004864:	60da      	str	r2, [r3, #12]
 8004866:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a35      	ldr	r2, [pc, #212]	; (8004944 <HAL_TIM_Base_MspInit+0xf4>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d10e      	bne.n	8004890 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004872:	2300      	movs	r3, #0
 8004874:	61bb      	str	r3, [r7, #24]
 8004876:	4b34      	ldr	r3, [pc, #208]	; (8004948 <HAL_TIM_Base_MspInit+0xf8>)
 8004878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800487a:	4a33      	ldr	r2, [pc, #204]	; (8004948 <HAL_TIM_Base_MspInit+0xf8>)
 800487c:	f043 0301 	orr.w	r3, r3, #1
 8004880:	6453      	str	r3, [r2, #68]	; 0x44
 8004882:	4b31      	ldr	r3, [pc, #196]	; (8004948 <HAL_TIM_Base_MspInit+0xf8>)
 8004884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004886:	f003 0301 	and.w	r3, r3, #1
 800488a:	61bb      	str	r3, [r7, #24]
 800488c:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800488e:	e055      	b.n	800493c <HAL_TIM_Base_MspInit+0xec>
  else if(tim_baseHandle->Instance==TIM2)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004898:	d135      	bne.n	8004906 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800489a:	2300      	movs	r3, #0
 800489c:	617b      	str	r3, [r7, #20]
 800489e:	4b2a      	ldr	r3, [pc, #168]	; (8004948 <HAL_TIM_Base_MspInit+0xf8>)
 80048a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a2:	4a29      	ldr	r2, [pc, #164]	; (8004948 <HAL_TIM_Base_MspInit+0xf8>)
 80048a4:	f043 0301 	orr.w	r3, r3, #1
 80048a8:	6413      	str	r3, [r2, #64]	; 0x40
 80048aa:	4b27      	ldr	r3, [pc, #156]	; (8004948 <HAL_TIM_Base_MspInit+0xf8>)
 80048ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ae:	f003 0301 	and.w	r3, r3, #1
 80048b2:	617b      	str	r3, [r7, #20]
 80048b4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048b6:	2300      	movs	r3, #0
 80048b8:	613b      	str	r3, [r7, #16]
 80048ba:	4b23      	ldr	r3, [pc, #140]	; (8004948 <HAL_TIM_Base_MspInit+0xf8>)
 80048bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048be:	4a22      	ldr	r2, [pc, #136]	; (8004948 <HAL_TIM_Base_MspInit+0xf8>)
 80048c0:	f043 0301 	orr.w	r3, r3, #1
 80048c4:	6313      	str	r3, [r2, #48]	; 0x30
 80048c6:	4b20      	ldr	r3, [pc, #128]	; (8004948 <HAL_TIM_Base_MspInit+0xf8>)
 80048c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ca:	f003 0301 	and.w	r3, r3, #1
 80048ce:	613b      	str	r3, [r7, #16]
 80048d0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = IMD_data_Pin;
 80048d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048d8:	2302      	movs	r3, #2
 80048da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048dc:	2300      	movs	r3, #0
 80048de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048e0:	2300      	movs	r3, #0
 80048e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80048e4:	2301      	movs	r3, #1
 80048e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(IMD_data_GPIO_Port, &GPIO_InitStruct);
 80048e8:	f107 031c 	add.w	r3, r7, #28
 80048ec:	4619      	mov	r1, r3
 80048ee:	4817      	ldr	r0, [pc, #92]	; (800494c <HAL_TIM_Base_MspInit+0xfc>)
 80048f0:	f00d ff06 	bl	8012700 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80048f4:	2200      	movs	r2, #0
 80048f6:	2105      	movs	r1, #5
 80048f8:	201c      	movs	r0, #28
 80048fa:	f00d fb67 	bl	8011fcc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80048fe:	201c      	movs	r0, #28
 8004900:	f00d fb80 	bl	8012004 <HAL_NVIC_EnableIRQ>
}
 8004904:	e01a      	b.n	800493c <HAL_TIM_Base_MspInit+0xec>
  else if(tim_baseHandle->Instance==TIM3)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a11      	ldr	r2, [pc, #68]	; (8004950 <HAL_TIM_Base_MspInit+0x100>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d115      	bne.n	800493c <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004910:	2300      	movs	r3, #0
 8004912:	60fb      	str	r3, [r7, #12]
 8004914:	4b0c      	ldr	r3, [pc, #48]	; (8004948 <HAL_TIM_Base_MspInit+0xf8>)
 8004916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004918:	4a0b      	ldr	r2, [pc, #44]	; (8004948 <HAL_TIM_Base_MspInit+0xf8>)
 800491a:	f043 0302 	orr.w	r3, r3, #2
 800491e:	6413      	str	r3, [r2, #64]	; 0x40
 8004920:	4b09      	ldr	r3, [pc, #36]	; (8004948 <HAL_TIM_Base_MspInit+0xf8>)
 8004922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004924:	f003 0302 	and.w	r3, r3, #2
 8004928:	60fb      	str	r3, [r7, #12]
 800492a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800492c:	2200      	movs	r2, #0
 800492e:	2105      	movs	r1, #5
 8004930:	201d      	movs	r0, #29
 8004932:	f00d fb4b 	bl	8011fcc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004936:	201d      	movs	r0, #29
 8004938:	f00d fb64 	bl	8012004 <HAL_NVIC_EnableIRQ>
}
 800493c:	bf00      	nop
 800493e:	3730      	adds	r7, #48	; 0x30
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}
 8004944:	40010000 	.word	0x40010000
 8004948:	40023800 	.word	0x40023800
 800494c:	40020000 	.word	0x40020000
 8004950:	40000400 	.word	0x40000400

08004954 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b088      	sub	sp, #32
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800495c:	f107 030c 	add.w	r3, r7, #12
 8004960:	2200      	movs	r2, #0
 8004962:	601a      	str	r2, [r3, #0]
 8004964:	605a      	str	r2, [r3, #4]
 8004966:	609a      	str	r2, [r3, #8]
 8004968:	60da      	str	r2, [r3, #12]
 800496a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a12      	ldr	r2, [pc, #72]	; (80049bc <HAL_TIM_MspPostInit+0x68>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d11e      	bne.n	80049b4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004976:	2300      	movs	r3, #0
 8004978:	60bb      	str	r3, [r7, #8]
 800497a:	4b11      	ldr	r3, [pc, #68]	; (80049c0 <HAL_TIM_MspPostInit+0x6c>)
 800497c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800497e:	4a10      	ldr	r2, [pc, #64]	; (80049c0 <HAL_TIM_MspPostInit+0x6c>)
 8004980:	f043 0310 	orr.w	r3, r3, #16
 8004984:	6313      	str	r3, [r2, #48]	; 0x30
 8004986:	4b0e      	ldr	r3, [pc, #56]	; (80049c0 <HAL_TIM_MspPostInit+0x6c>)
 8004988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800498a:	f003 0310 	and.w	r3, r3, #16
 800498e:	60bb      	str	r3, [r7, #8]
 8004990:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = fan_PWM_Pin;
 8004992:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004996:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004998:	2302      	movs	r3, #2
 800499a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800499c:	2300      	movs	r3, #0
 800499e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049a0:	2300      	movs	r3, #0
 80049a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80049a4:	2301      	movs	r3, #1
 80049a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(fan_PWM_GPIO_Port, &GPIO_InitStruct);
 80049a8:	f107 030c 	add.w	r3, r7, #12
 80049ac:	4619      	mov	r1, r3
 80049ae:	4805      	ldr	r0, [pc, #20]	; (80049c4 <HAL_TIM_MspPostInit+0x70>)
 80049b0:	f00d fea6 	bl	8012700 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80049b4:	bf00      	nop
 80049b6:	3720      	adds	r7, #32
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}
 80049bc:	40010000 	.word	0x40010000
 80049c0:	40023800 	.word	0x40023800
 80049c4:	40021000 	.word	0x40021000

080049c8 <CSE_S_x>:
RT_MODEL_CSE_T *const CSE_M = &CSE_M_;
static void UKFCorrectorAdditive_getPredict(real_T Rs, const real_T X1[3], const
  real_T S[9], real_T alpha, real_T beta, real_T kappa, real_T *Ymean, real_T
  Pxy[3], real_T *Sy);
void CSE_S_x(const real_T rtu_x[3], real_T rty_x_next[3])
{
 80049c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80049cc:	b086      	sub	sp, #24
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	6078      	str	r0, [r7, #4]
 80049d2:	6039      	str	r1, [r7, #0]
  real_T rtb_Divide;
  real_T tmp;
  rtb_Divide = rtu_x[1] / rtu_x[2];
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	3308      	adds	r3, #8
 80049d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	3310      	adds	r3, #16
 80049e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049e4:	f7fb ff24 	bl	8000830 <__aeabi_ddiv>
 80049e8:	4602      	mov	r2, r0
 80049ea:	460b      	mov	r3, r1
 80049ec:	e9c7 2304 	strd	r2, r3, [r7, #16]
  tmp = exp(-CSE_P.Ts / look1_binlxpw(rtb_Divide, CSE_P.soc, CSE_P.tau, 12U));
 80049f0:	4b3e      	ldr	r3, [pc, #248]	; (8004aec <CSE_S_x+0x124>)
 80049f2:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	; 0xd0
 80049f6:	4614      	mov	r4, r2
 80049f8:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80049fc:	220c      	movs	r2, #12
 80049fe:	493c      	ldr	r1, [pc, #240]	; (8004af0 <CSE_S_x+0x128>)
 8004a00:	483c      	ldr	r0, [pc, #240]	; (8004af4 <CSE_S_x+0x12c>)
 8004a02:	ed97 0b04 	vldr	d0, [r7, #16]
 8004a06:	f005 fb73 	bl	800a0f0 <look1_binlxpw>
 8004a0a:	ec53 2b10 	vmov	r2, r3, d0
 8004a0e:	4620      	mov	r0, r4
 8004a10:	4629      	mov	r1, r5
 8004a12:	f7fb ff0d 	bl	8000830 <__aeabi_ddiv>
 8004a16:	4602      	mov	r2, r0
 8004a18:	460b      	mov	r3, r1
 8004a1a:	ec43 2b17 	vmov	d7, r2, r3
 8004a1e:	eeb0 0a47 	vmov.f32	s0, s14
 8004a22:	eef0 0a67 	vmov.f32	s1, s15
 8004a26:	f015 fd3f 	bl	801a4a8 <exp>
 8004a2a:	ed87 0b02 	vstr	d0, [r7, #8]
  rty_x_next[0] = (1.0 - tmp) * CSE_U.current * look1_binlxpw(rtb_Divide,
 8004a2e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a32:	f04f 0000 	mov.w	r0, #0
 8004a36:	4930      	ldr	r1, [pc, #192]	; (8004af8 <CSE_S_x+0x130>)
 8004a38:	f7fb fc18 	bl	800026c <__aeabi_dsub>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	460b      	mov	r3, r1
 8004a40:	4610      	mov	r0, r2
 8004a42:	4619      	mov	r1, r3
 8004a44:	4b2d      	ldr	r3, [pc, #180]	; (8004afc <CSE_S_x+0x134>)
 8004a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a4a:	f7fb fdc7 	bl	80005dc <__aeabi_dmul>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	460b      	mov	r3, r1
 8004a52:	4614      	mov	r4, r2
 8004a54:	461d      	mov	r5, r3
 8004a56:	220c      	movs	r2, #12
 8004a58:	4924      	ldr	r1, [pc, #144]	; (8004aec <CSE_S_x+0x124>)
 8004a5a:	4826      	ldr	r0, [pc, #152]	; (8004af4 <CSE_S_x+0x12c>)
 8004a5c:	ed97 0b04 	vldr	d0, [r7, #16]
 8004a60:	f005 fb46 	bl	800a0f0 <look1_binlxpw>
 8004a64:	ec53 2b10 	vmov	r2, r3, d0
 8004a68:	4620      	mov	r0, r4
 8004a6a:	4629      	mov	r1, r5
 8004a6c:	f7fb fdb6 	bl	80005dc <__aeabi_dmul>
 8004a70:	4602      	mov	r2, r0
 8004a72:	460b      	mov	r3, r1
 8004a74:	4614      	mov	r4, r2
 8004a76:	461d      	mov	r5, r3
    CSE_P.soc, CSE_P.Rp, 12U) + tmp * rtu_x[0];
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004a7e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a82:	f7fb fdab 	bl	80005dc <__aeabi_dmul>
 8004a86:	4602      	mov	r2, r0
 8004a88:	460b      	mov	r3, r1
 8004a8a:	4620      	mov	r0, r4
 8004a8c:	4629      	mov	r1, r5
 8004a8e:	f7fb fbef 	bl	8000270 <__adddf3>
 8004a92:	4602      	mov	r2, r0
 8004a94:	460b      	mov	r3, r1
  rty_x_next[0] = (1.0 - tmp) * CSE_U.current * look1_binlxpw(rtb_Divide,
 8004a96:	6839      	ldr	r1, [r7, #0]
 8004a98:	e9c1 2300 	strd	r2, r3, [r1]
  rty_x_next[1] = CSE_U.current * CSE_P.Ts + rtu_x[1];
 8004a9c:	4b17      	ldr	r3, [pc, #92]	; (8004afc <CSE_S_x+0x134>)
 8004a9e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004aa2:	4b12      	ldr	r3, [pc, #72]	; (8004aec <CSE_S_x+0x124>)
 8004aa4:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	; 0xd0
 8004aa8:	f7fb fd98 	bl	80005dc <__aeabi_dmul>
 8004aac:	4602      	mov	r2, r0
 8004aae:	460b      	mov	r3, r1
 8004ab0:	4690      	mov	r8, r2
 8004ab2:	4699      	mov	r9, r3
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	3308      	adds	r3, #8
 8004ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004abc:	6839      	ldr	r1, [r7, #0]
 8004abe:	f101 0408 	add.w	r4, r1, #8
 8004ac2:	4640      	mov	r0, r8
 8004ac4:	4649      	mov	r1, r9
 8004ac6:	f7fb fbd3 	bl	8000270 <__adddf3>
 8004aca:	4602      	mov	r2, r0
 8004acc:	460b      	mov	r3, r1
 8004ace:	e9c4 2300 	strd	r2, r3, [r4]
  rty_x_next[2] = rtu_x[2];
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	f103 0110 	add.w	r1, r3, #16
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004ade:	e9c1 2300 	strd	r2, r3, [r1]
}
 8004ae2:	bf00      	nop
 8004ae4:	3718      	adds	r7, #24
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004aec:	20000008 	.word	0x20000008
 8004af0:	200001b0 	.word	0x200001b0
 8004af4:	20000148 	.word	0x20000148
 8004af8:	3ff00000 	.word	0x3ff00000
 8004afc:	2001bdd8 	.word	0x2001bdd8

08004b00 <CSE_M_x>:

void CSE_M_x(const real_T rtu_x[3], real_T *rty_y)
{
 8004b00:	b5b0      	push	{r4, r5, r7, lr}
 8004b02:	b084      	sub	sp, #16
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
 8004b08:	6039      	str	r1, [r7, #0]
  real_T rtb_Divide;
  rtb_Divide = rtu_x[1] / rtu_x[2];
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	3308      	adds	r3, #8
 8004b0e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	3310      	adds	r3, #16
 8004b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b1a:	f7fb fe89 	bl	8000830 <__aeabi_ddiv>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	460b      	mov	r3, r1
 8004b22:	e9c7 2302 	strd	r2, r3, [r7, #8]
  *rty_y = (CSE_U.current * look1_binlxpw(rtb_Divide, CSE_P.soc, CSE_P.Rs, 12U)
 8004b26:	4b19      	ldr	r3, [pc, #100]	; (8004b8c <CSE_M_x+0x8c>)
 8004b28:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004b2c:	220c      	movs	r2, #12
 8004b2e:	4918      	ldr	r1, [pc, #96]	; (8004b90 <CSE_M_x+0x90>)
 8004b30:	4818      	ldr	r0, [pc, #96]	; (8004b94 <CSE_M_x+0x94>)
 8004b32:	ed97 0b02 	vldr	d0, [r7, #8]
 8004b36:	f005 fadb 	bl	800a0f0 <look1_binlxpw>
 8004b3a:	ec53 2b10 	vmov	r2, r3, d0
 8004b3e:	4620      	mov	r0, r4
 8004b40:	4629      	mov	r1, r5
 8004b42:	f7fb fd4b 	bl	80005dc <__aeabi_dmul>
 8004b46:	4602      	mov	r2, r0
 8004b48:	460b      	mov	r3, r1
 8004b4a:	4614      	mov	r4, r2
 8004b4c:	461d      	mov	r5, r3
            + look1_binlxpw(rtb_Divide, CSE_P.soc, CSE_P.ocv, 12U)) + rtu_x[0];
 8004b4e:	220c      	movs	r2, #12
 8004b50:	4911      	ldr	r1, [pc, #68]	; (8004b98 <CSE_M_x+0x98>)
 8004b52:	4810      	ldr	r0, [pc, #64]	; (8004b94 <CSE_M_x+0x94>)
 8004b54:	ed97 0b02 	vldr	d0, [r7, #8]
 8004b58:	f005 faca 	bl	800a0f0 <look1_binlxpw>
 8004b5c:	ec53 2b10 	vmov	r2, r3, d0
 8004b60:	4620      	mov	r0, r4
 8004b62:	4629      	mov	r1, r5
 8004b64:	f7fb fb84 	bl	8000270 <__adddf3>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	460b      	mov	r3, r1
 8004b6c:	4610      	mov	r0, r2
 8004b6e:	4619      	mov	r1, r3
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b76:	f7fb fb7b 	bl	8000270 <__adddf3>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	460b      	mov	r3, r1
  *rty_y = (CSE_U.current * look1_binlxpw(rtb_Divide, CSE_P.soc, CSE_P.Rs, 12U)
 8004b7e:	6839      	ldr	r1, [r7, #0]
 8004b80:	e9c1 2300 	strd	r2, r3, [r1]
}
 8004b84:	bf00      	nop
 8004b86:	3710      	adds	r7, #16
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bdb0      	pop	{r4, r5, r7, pc}
 8004b8c:	2001bdd8 	.word	0x2001bdd8
 8004b90:	20000070 	.word	0x20000070
 8004b94:	20000148 	.word	0x20000148
 8004b98:	200000e0 	.word	0x200000e0

08004b9c <UKFCorrectorAdditive_getPredict>:

static void UKFCorrectorAdditive_getPredict(real_T Rs, const real_T X1[3], const
  real_T S[9], real_T alpha, real_T beta, real_T kappa, real_T *Ymean, real_T
  Pxy[3], real_T *Sy)
{
 8004b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ba0:	ed2d 8b02 	vpush	{d8}
 8004ba4:	b0e1      	sub	sp, #388	; 0x184
 8004ba6:	af04      	add	r7, sp, #16
 8004ba8:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8004bac:	ed84 0b00 	vstr	d0, [r4]
 8004bb0:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8004bb4:	6020      	str	r0, [r4, #0]
 8004bb6:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8004bba:	6001      	str	r1, [r0, #0]
 8004bbc:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8004bc0:	ed81 1b00 	vstr	d1, [r1]
 8004bc4:	f107 0120 	add.w	r1, r7, #32
 8004bc8:	ed81 2b00 	vstr	d2, [r1]
 8004bcc:	f107 0118 	add.w	r1, r7, #24
 8004bd0:	ed81 3b00 	vstr	d3, [r1]
 8004bd4:	f107 0114 	add.w	r1, r7, #20
 8004bd8:	600a      	str	r2, [r1, #0]
 8004bda:	f107 0210 	add.w	r2, r7, #16
 8004bde:	6013      	str	r3, [r2, #0]
  real_T Wmean[2];
  real_T tempY;
  real_T tempY_tmp;
  int32_T knt;
  int32_T knt_0;
  tempY_tmp = alpha * alpha;
 8004be0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8004be4:	e9d1 2300 	ldrd	r2, r3, [r1]
 8004be8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004bec:	f7fb fcf6 	bl	80005dc <__aeabi_dmul>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	460b      	mov	r3, r1
 8004bf4:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8004bf8:	e9c1 2300 	strd	r2, r3, [r1]
  tempY = (kappa + 3.0) * tempY_tmp;
 8004bfc:	f107 0118 	add.w	r1, r7, #24
 8004c00:	f04f 0200 	mov.w	r2, #0
 8004c04:	4b96      	ldr	r3, [pc, #600]	; (8004e60 <UKFCorrectorAdditive_getPredict+0x2c4>)
 8004c06:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004c0a:	f7fb fb31 	bl	8000270 <__adddf3>
 8004c0e:	4602      	mov	r2, r0
 8004c10:	460b      	mov	r3, r1
 8004c12:	4610      	mov	r0, r2
 8004c14:	4619      	mov	r1, r3
 8004c16:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c1e:	f7fb fcdd 	bl	80005dc <__aeabi_dmul>
 8004c22:	4602      	mov	r2, r0
 8004c24:	460b      	mov	r3, r1
 8004c26:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8004c2a:	e9c1 2300 	strd	r2, r3, [r1]
  Wmean[0] = 1.0 - 3.0 / tempY;
 8004c2e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c36:	f04f 0000 	mov.w	r0, #0
 8004c3a:	4989      	ldr	r1, [pc, #548]	; (8004e60 <UKFCorrectorAdditive_getPredict+0x2c4>)
 8004c3c:	f7fb fdf8 	bl	8000830 <__aeabi_ddiv>
 8004c40:	4602      	mov	r2, r0
 8004c42:	460b      	mov	r3, r1
 8004c44:	f04f 0000 	mov.w	r0, #0
 8004c48:	4986      	ldr	r1, [pc, #536]	; (8004e64 <UKFCorrectorAdditive_getPredict+0x2c8>)
 8004c4a:	f7fb fb0f 	bl	800026c <__aeabi_dsub>
 8004c4e:	4602      	mov	r2, r0
 8004c50:	460b      	mov	r3, r1
 8004c52:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8004c56:	e9c1 2300 	strd	r2, r3, [r1]
  Wmean[1] = 1.0 / (2.0 * tempY);
 8004c5a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004c5e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004c62:	4602      	mov	r2, r0
 8004c64:	460b      	mov	r3, r1
 8004c66:	f7fb fb03 	bl	8000270 <__adddf3>
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	460b      	mov	r3, r1
 8004c6e:	f04f 0000 	mov.w	r0, #0
 8004c72:	497c      	ldr	r1, [pc, #496]	; (8004e64 <UKFCorrectorAdditive_getPredict+0x2c8>)
 8004c74:	f7fb fddc 	bl	8000830 <__aeabi_ddiv>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	460b      	mov	r3, r1
 8004c7c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8004c80:	e9c1 2302 	strd	r2, r3, [r1, #8]
  Wcov[0] = ((1.0 - tempY_tmp) + beta) + Wmean[0];
 8004c84:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c8c:	f04f 0000 	mov.w	r0, #0
 8004c90:	4974      	ldr	r1, [pc, #464]	; (8004e64 <UKFCorrectorAdditive_getPredict+0x2c8>)
 8004c92:	f7fb faeb 	bl	800026c <__aeabi_dsub>
 8004c96:	4602      	mov	r2, r0
 8004c98:	460b      	mov	r3, r1
 8004c9a:	4610      	mov	r0, r2
 8004c9c:	4619      	mov	r1, r3
 8004c9e:	f107 0320 	add.w	r3, r7, #32
 8004ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ca6:	f7fb fae3 	bl	8000270 <__adddf3>
 8004caa:	4602      	mov	r2, r0
 8004cac:	460b      	mov	r3, r1
 8004cae:	4610      	mov	r0, r2
 8004cb0:	4619      	mov	r1, r3
 8004cb2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cba:	f7fb fad9 	bl	8000270 <__adddf3>
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	460b      	mov	r3, r1
 8004cc2:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8004cc6:	e9c1 2300 	strd	r2, r3, [r1]
  Wcov[1] = Wmean[1];
 8004cca:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004cce:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004cd2:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8004cd6:	e9c1 2302 	strd	r2, r3, [r1, #8]
  if (Wmean[0] != 0.0) {
 8004cda:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004cde:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004ce2:	f04f 0200 	mov.w	r2, #0
 8004ce6:	f04f 0300 	mov.w	r3, #0
 8004cea:	f7fb fedf 	bl	8000aac <__aeabi_dcmpeq>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d154      	bne.n	8004d9e <UKFCorrectorAdditive_getPredict+0x202>
    real_T Wcov_0;
    *Sy = Wmean[0];
 8004cf4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cfc:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 8004d00:	e9c1 2300 	strd	r2, r3, [r1]
    tempY_tmp = Wmean[0];
 8004d04:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d0c:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8004d10:	e9c1 2300 	strd	r2, r3, [r1]
    Wmean[0] /= Wmean[0];
 8004d14:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004d18:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004d1c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d24:	f7fb fd84 	bl	8000830 <__aeabi_ddiv>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	460b      	mov	r3, r1
 8004d2c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8004d30:	e9c1 2300 	strd	r2, r3, [r1]
    Wcov[0] /= *Sy;
 8004d34:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8004d38:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004d3c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d44:	f7fb fd74 	bl	8000830 <__aeabi_ddiv>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	460b      	mov	r3, r1
 8004d4c:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8004d50:	e9c1 2300 	strd	r2, r3, [r1]
    Wcov_0 = Wmean[1];
 8004d54:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004d58:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004d5c:	e9c7 2358 	strd	r2, r3, [r7, #352]	; 0x160
    Wmean[1] /= tempY_tmp;
 8004d60:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004d64:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8004d68:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d70:	f7fb fd5e 	bl	8000830 <__aeabi_ddiv>
 8004d74:	4602      	mov	r2, r0
 8004d76:	460b      	mov	r3, r1
 8004d78:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8004d7c:	e9c1 2302 	strd	r2, r3, [r1, #8]
    Wcov[1] = Wcov_0 / *Sy;
 8004d80:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d88:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	; 0x160
 8004d8c:	f7fb fd50 	bl	8000830 <__aeabi_ddiv>
 8004d90:	4602      	mov	r2, r0
 8004d92:	460b      	mov	r3, r1
 8004d94:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8004d98:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8004d9c:	e006      	b.n	8004dac <UKFCorrectorAdditive_getPredict+0x210>
  } else {
    *Sy = 1.0;
 8004d9e:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 8004da2:	f04f 0200 	mov.w	r2, #0
 8004da6:	4b2f      	ldr	r3, [pc, #188]	; (8004e64 <UKFCorrectorAdditive_getPredict+0x2c8>)
 8004da8:	e9c1 2300 	strd	r2, r3, [r1]
  }

  tempY = sqrt(tempY);
 8004dac:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004db0:	ed93 7b00 	vldr	d7, [r3]
 8004db4:	eeb0 0a47 	vmov.f32	s0, s14
 8004db8:	eef0 0a67 	vmov.f32	s1, s15
 8004dbc:	f015 fc0c 	bl	801a5d8 <sqrt>
 8004dc0:	eeb0 7a40 	vmov.f32	s14, s0
 8004dc4:	eef0 7a60 	vmov.f32	s15, s1
 8004dc8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004dcc:	ed83 7b00 	vstr	d7, [r3]
  for (knt = 0; knt < 9; knt++) {
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8004dd6:	e037      	b.n	8004e48 <UKFCorrectorAdditive_getPredict+0x2ac>
    tempY_tmp = tempY * S[knt];
 8004dd8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004ddc:	00db      	lsls	r3, r3, #3
 8004dde:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004de2:	6812      	ldr	r2, [r2, #0]
 8004de4:	4413      	add	r3, r2
 8004de6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004dea:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004df2:	f7fb fbf3 	bl	80005dc <__aeabi_dmul>
 8004df6:	4602      	mov	r2, r0
 8004df8:	460b      	mov	r3, r1
 8004dfa:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8004dfe:	e9c1 2300 	strd	r2, r3, [r1]
    X2[knt] = tempY_tmp;
 8004e02:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e0a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8004e0e:	00c9      	lsls	r1, r1, #3
 8004e10:	f507 70b8 	add.w	r0, r7, #368	; 0x170
 8004e14:	4401      	add	r1, r0
 8004e16:	39a0      	subs	r1, #160	; 0xa0
 8004e18:	e9c1 2300 	strd	r2, r3, [r1]
    X2[knt + 9] = -tempY_tmp;
 8004e1c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e24:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8004e28:	3109      	adds	r1, #9
 8004e2a:	4690      	mov	r8, r2
 8004e2c:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8004e30:	00cb      	lsls	r3, r1, #3
 8004e32:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8004e36:	4413      	add	r3, r2
 8004e38:	3ba0      	subs	r3, #160	; 0xa0
 8004e3a:	e9c3 8900 	strd	r8, r9, [r3]
  for (knt = 0; knt < 9; knt++) {
 8004e3e:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004e42:	3301      	adds	r3, #1
 8004e44:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8004e48:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004e4c:	2b08      	cmp	r3, #8
 8004e4e:	ddc3      	ble.n	8004dd8 <UKFCorrectorAdditive_getPredict+0x23c>
  }

  knt_0 = 0;
 8004e50:	2300      	movs	r3, #0
 8004e52:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  for (knt = 0; knt < 6; knt++) {
 8004e56:	2300      	movs	r3, #0
 8004e58:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8004e5c:	e065      	b.n	8004f2a <UKFCorrectorAdditive_getPredict+0x38e>
 8004e5e:	bf00      	nop
 8004e60:	40080000 	.word	0x40080000
 8004e64:	3ff00000 	.word	0x3ff00000
    X2[knt_0] += X1[0];
 8004e68:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004e6c:	00db      	lsls	r3, r3, #3
 8004e6e:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8004e72:	4413      	add	r3, r2
 8004e74:	3ba0      	subs	r3, #160	; 0xa0
 8004e76:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004e7a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e84:	f7fb f9f4 	bl	8000270 <__adddf3>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	460b      	mov	r3, r1
 8004e8c:	f8d7 1168 	ldr.w	r1, [r7, #360]	; 0x168
 8004e90:	00c9      	lsls	r1, r1, #3
 8004e92:	f507 70b8 	add.w	r0, r7, #368	; 0x170
 8004e96:	4401      	add	r1, r0
 8004e98:	39a0      	subs	r1, #160	; 0xa0
 8004e9a:	e9c1 2300 	strd	r2, r3, [r1]
    X2[knt_0 + 1] += X1[1];
 8004e9e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004ea2:	3301      	adds	r3, #1
 8004ea4:	00db      	lsls	r3, r3, #3
 8004ea6:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8004eaa:	4413      	add	r3, r2
 8004eac:	3ba0      	subs	r3, #160	; 0xa0
 8004eae:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004eb2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	3308      	adds	r3, #8
 8004eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ebe:	f8d7 4168 	ldr.w	r4, [r7, #360]	; 0x168
 8004ec2:	3401      	adds	r4, #1
 8004ec4:	f7fb f9d4 	bl	8000270 <__adddf3>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	460b      	mov	r3, r1
 8004ecc:	00e1      	lsls	r1, r4, #3
 8004ece:	f507 70b8 	add.w	r0, r7, #368	; 0x170
 8004ed2:	4401      	add	r1, r0
 8004ed4:	39a0      	subs	r1, #160	; 0xa0
 8004ed6:	e9c1 2300 	strd	r2, r3, [r1]
    X2[knt_0 + 2] += X1[2];
 8004eda:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004ede:	3302      	adds	r3, #2
 8004ee0:	00db      	lsls	r3, r3, #3
 8004ee2:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8004ee6:	4413      	add	r3, r2
 8004ee8:	3ba0      	subs	r3, #160	; 0xa0
 8004eea:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004eee:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	3310      	adds	r3, #16
 8004ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004efa:	f8d7 4168 	ldr.w	r4, [r7, #360]	; 0x168
 8004efe:	3402      	adds	r4, #2
 8004f00:	f7fb f9b6 	bl	8000270 <__adddf3>
 8004f04:	4602      	mov	r2, r0
 8004f06:	460b      	mov	r3, r1
 8004f08:	00e1      	lsls	r1, r4, #3
 8004f0a:	f507 70b8 	add.w	r0, r7, #368	; 0x170
 8004f0e:	4401      	add	r1, r0
 8004f10:	39a0      	subs	r1, #160	; 0xa0
 8004f12:	e9c1 2300 	strd	r2, r3, [r1]
    knt_0 += 3;
 8004f16:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004f1a:	3303      	adds	r3, #3
 8004f1c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  for (knt = 0; knt < 6; knt++) {
 8004f20:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004f24:	3301      	adds	r3, #1
 8004f26:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8004f2a:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004f2e:	2b05      	cmp	r3, #5
 8004f30:	dd9a      	ble.n	8004e68 <UKFCorrectorAdditive_getPredict+0x2cc>
  }

  knt_0 = 0;
 8004f32:	2300      	movs	r3, #0
 8004f34:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  for (knt = 0; knt < 6; knt++) {
 8004f38:	2300      	movs	r3, #0
 8004f3a:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8004f3e:	e018      	b.n	8004f72 <UKFCorrectorAdditive_getPredict+0x3d6>
    CSE_M_x(&X2[knt_0], &Y2[knt]);
 8004f40:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8004f44:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004f48:	00db      	lsls	r3, r3, #3
 8004f4a:	18d0      	adds	r0, r2, r3
 8004f4c:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8004f50:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004f54:	00db      	lsls	r3, r3, #3
 8004f56:	4413      	add	r3, r2
 8004f58:	4619      	mov	r1, r3
 8004f5a:	f7ff fdd1 	bl	8004b00 <CSE_M_x>
    knt_0 += 3;
 8004f5e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004f62:	3303      	adds	r3, #3
 8004f64:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  for (knt = 0; knt < 6; knt++) {
 8004f68:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004f6c:	3301      	adds	r3, #1
 8004f6e:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8004f72:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004f76:	2b05      	cmp	r3, #5
 8004f78:	dde2      	ble.n	8004f40 <UKFCorrectorAdditive_getPredict+0x3a4>
  }

  CSE_M_x(X1, &tempY);
 8004f7a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004f7e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004f82:	4611      	mov	r1, r2
 8004f84:	6818      	ldr	r0, [r3, #0]
 8004f86:	f7ff fdbb 	bl	8004b00 <CSE_M_x>
  for (knt = 0; knt < 6; knt++) {
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8004f90:	e027      	b.n	8004fe2 <UKFCorrectorAdditive_getPredict+0x446>
    Y2_0[knt] = (Y2[knt] - tempY) + tempY;
 8004f92:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004f96:	00db      	lsls	r3, r3, #3
 8004f98:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8004f9c:	4413      	add	r3, r2
 8004f9e:	3bd0      	subs	r3, #208	; 0xd0
 8004fa0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004fa4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fac:	f7fb f95e 	bl	800026c <__aeabi_dsub>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	460b      	mov	r3, r1
 8004fb4:	4610      	mov	r0, r2
 8004fb6:	4619      	mov	r1, r3
 8004fb8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fc0:	f7fb f956 	bl	8000270 <__adddf3>
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	460b      	mov	r3, r1
 8004fc8:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8004fcc:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8004fd0:	00c9      	lsls	r1, r1, #3
 8004fd2:	4401      	add	r1, r0
 8004fd4:	e9c1 2300 	strd	r2, r3, [r1]
  for (knt = 0; knt < 6; knt++) {
 8004fd8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004fdc:	3301      	adds	r3, #1
 8004fde:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8004fe2:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004fe6:	2b05      	cmp	r3, #5
 8004fe8:	ddd3      	ble.n	8004f92 <UKFCorrectorAdditive_getPredict+0x3f6>
  }

  UTMeanCovSqrt_C6QfB9Td(Wmean, Wcov, *Sy, tempY, Y2_0, X1, X2, Ymean,
 8004fea:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004fee:	ed93 7b00 	vldr	d7, [r3]
 8004ff2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004ff6:	ed93 6b00 	vldr	d6, [r3]
 8004ffa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004ffe:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8005002:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8005006:	f107 0050 	add.w	r0, r7, #80	; 0x50
 800500a:	f107 0210 	add.w	r2, r7, #16
 800500e:	6812      	ldr	r2, [r2, #0]
 8005010:	9203      	str	r2, [sp, #12]
 8005012:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8005016:	9202      	str	r2, [sp, #8]
 8005018:	f107 0214 	add.w	r2, r7, #20
 800501c:	6812      	ldr	r2, [r2, #0]
 800501e:	9201      	str	r2, [sp, #4]
 8005020:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8005024:	9200      	str	r2, [sp, #0]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4622      	mov	r2, r4
 800502a:	eeb0 1a46 	vmov.f32	s2, s12
 800502e:	eef0 1a66 	vmov.f32	s3, s13
 8005032:	eeb0 0a47 	vmov.f32	s0, s14
 8005036:	eef0 0a67 	vmov.f32	s1, s15
 800503a:	f004 fbff 	bl	800983c <UTMeanCovSqrt_C6QfB9Td>
    &tempY_tmp, Pxy);
  Wmean[0] = tempY_tmp;
 800503e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005046:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800504a:	e9c1 2300 	strd	r2, r3, [r1]
  Wmean[1] = Rs;
 800504e:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8005052:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800505a:	e9c1 2302 	strd	r2, r3, [r1, #8]
  *Sy = tempY_tmp;
 800505e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005066:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 800506a:	e9c1 2300 	strd	r2, r3, [r1]
  tempY = xnrm2_Mnmxg9YT(1, Wmean, 2);
 800506e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005072:	2202      	movs	r2, #2
 8005074:	4619      	mov	r1, r3
 8005076:	2001      	movs	r0, #1
 8005078:	f009 ff10 	bl	800ee9c <xnrm2_Mnmxg9YT>
 800507c:	eeb0 7a40 	vmov.f32	s14, s0
 8005080:	eef0 7a60 	vmov.f32	s15, s1
 8005084:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005088:	ed83 7b00 	vstr	d7, [r3]
  if (tempY != 0.0) {
 800508c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005090:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005094:	f04f 0200 	mov.w	r2, #0
 8005098:	f04f 0300 	mov.w	r3, #0
 800509c:	f7fb fd06 	bl	8000aac <__aeabi_dcmpeq>
 80050a0:	4603      	mov	r3, r0
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d000      	beq.n	80050a8 <UKFCorrectorAdditive_getPredict+0x50c>
      *Sy = tempY;
    } else {
      *Sy = tempY;
    }
  }
}
 80050a6:	e0fa      	b.n	800529e <UKFCorrectorAdditive_getPredict+0x702>
    tempY = rt_hypotd_snf(tempY_tmp, tempY);
 80050a8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80050ac:	ed93 7b00 	vldr	d7, [r3]
 80050b0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80050b4:	ed93 6b00 	vldr	d6, [r3]
 80050b8:	eeb0 1a46 	vmov.f32	s2, s12
 80050bc:	eef0 1a66 	vmov.f32	s3, s13
 80050c0:	eeb0 0a47 	vmov.f32	s0, s14
 80050c4:	eef0 0a67 	vmov.f32	s1, s15
 80050c8:	f007 fb5e 	bl	800c788 <rt_hypotd_snf>
 80050cc:	eeb0 7a40 	vmov.f32	s14, s0
 80050d0:	eef0 7a60 	vmov.f32	s15, s1
 80050d4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80050d8:	ed83 7b00 	vstr	d7, [r3]
    if (tempY_tmp >= 0.0) {
 80050dc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80050e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80050e4:	f04f 0200 	mov.w	r2, #0
 80050e8:	f04f 0300 	mov.w	r3, #0
 80050ec:	f7fb fcfc 	bl	8000ae8 <__aeabi_dcmpge>
 80050f0:	4603      	mov	r3, r0
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d00a      	beq.n	800510c <UKFCorrectorAdditive_getPredict+0x570>
      tempY = -tempY;
 80050f6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80050fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050fe:	4615      	mov	r5, r2
 8005100:	f083 4600 	eor.w	r6, r3, #2147483648	; 0x80000000
 8005104:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005108:	e9c3 5600 	strd	r5, r6, [r3]
    if (fabs(tempY) < 1.0020841800044864E-292) {
 800510c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005114:	60ba      	str	r2, [r7, #8]
 8005116:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800511a:	60fb      	str	r3, [r7, #12]
 800511c:	f04f 0200 	mov.w	r2, #0
 8005120:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 8005124:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005128:	f7fb fcca 	bl	8000ac0 <__aeabi_dcmplt>
 800512c:	4603      	mov	r3, r0
 800512e:	2b00      	cmp	r3, #0
 8005130:	f000 80ad 	beq.w	800528e <UKFCorrectorAdditive_getPredict+0x6f2>
      knt = 0;
 8005134:	2300      	movs	r3, #0
 8005136:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
        knt++;
 800513a:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800513e:	3301      	adds	r3, #1
 8005140:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
        Wmean[1] *= 9.9792015476736E+291;
 8005144:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005148:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800514c:	f04f 0200 	mov.w	r2, #0
 8005150:	4b57      	ldr	r3, [pc, #348]	; (80052b0 <UKFCorrectorAdditive_getPredict+0x714>)
 8005152:	f7fb fa43 	bl	80005dc <__aeabi_dmul>
 8005156:	4602      	mov	r2, r0
 8005158:	460b      	mov	r3, r1
 800515a:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800515e:	e9c1 2302 	strd	r2, r3, [r1, #8]
        tempY *= 9.9792015476736E+291;
 8005162:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005166:	e9d3 0100 	ldrd	r0, r1, [r3]
 800516a:	f04f 0200 	mov.w	r2, #0
 800516e:	4b50      	ldr	r3, [pc, #320]	; (80052b0 <UKFCorrectorAdditive_getPredict+0x714>)
 8005170:	f7fb fa34 	bl	80005dc <__aeabi_dmul>
 8005174:	4602      	mov	r2, r0
 8005176:	460b      	mov	r3, r1
 8005178:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800517c:	e9c1 2300 	strd	r2, r3, [r1]
        *Sy *= 9.9792015476736E+291;
 8005180:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8005184:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005188:	f04f 0200 	mov.w	r2, #0
 800518c:	4b48      	ldr	r3, [pc, #288]	; (80052b0 <UKFCorrectorAdditive_getPredict+0x714>)
 800518e:	f7fb fa25 	bl	80005dc <__aeabi_dmul>
 8005192:	4602      	mov	r2, r0
 8005194:	460b      	mov	r3, r1
 8005196:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 800519a:	e9c1 2300 	strd	r2, r3, [r1]
      } while ((fabs(tempY) < 1.0020841800044864E-292) && (knt < 20));
 800519e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80051a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051a6:	603a      	str	r2, [r7, #0]
 80051a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80051ac:	607b      	str	r3, [r7, #4]
 80051ae:	f04f 0200 	mov.w	r2, #0
 80051b2:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 80051b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80051ba:	f7fb fc81 	bl	8000ac0 <__aeabi_dcmplt>
 80051be:	4603      	mov	r3, r0
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d003      	beq.n	80051cc <UKFCorrectorAdditive_getPredict+0x630>
 80051c4:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80051c8:	2b13      	cmp	r3, #19
 80051ca:	ddb6      	ble.n	800513a <UKFCorrectorAdditive_getPredict+0x59e>
      tempY = rt_hypotd_snf(*Sy, xnrm2_Mnmxg9YT(1, Wmean, 2));
 80051cc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80051d0:	ed93 8b00 	vldr	d8, [r3]
 80051d4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80051d8:	2202      	movs	r2, #2
 80051da:	4619      	mov	r1, r3
 80051dc:	2001      	movs	r0, #1
 80051de:	f009 fe5d 	bl	800ee9c <xnrm2_Mnmxg9YT>
 80051e2:	eeb0 7a40 	vmov.f32	s14, s0
 80051e6:	eef0 7a60 	vmov.f32	s15, s1
 80051ea:	eeb0 1a47 	vmov.f32	s2, s14
 80051ee:	eef0 1a67 	vmov.f32	s3, s15
 80051f2:	eeb0 0a48 	vmov.f32	s0, s16
 80051f6:	eef0 0a68 	vmov.f32	s1, s17
 80051fa:	f007 fac5 	bl	800c788 <rt_hypotd_snf>
 80051fe:	eeb0 7a40 	vmov.f32	s14, s0
 8005202:	eef0 7a60 	vmov.f32	s15, s1
 8005206:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800520a:	ed83 7b00 	vstr	d7, [r3]
      if (*Sy >= 0.0) {
 800520e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8005212:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005216:	f04f 0200 	mov.w	r2, #0
 800521a:	f04f 0300 	mov.w	r3, #0
 800521e:	f7fb fc63 	bl	8000ae8 <__aeabi_dcmpge>
 8005222:	4603      	mov	r3, r0
 8005224:	2b00      	cmp	r3, #0
 8005226:	d00a      	beq.n	800523e <UKFCorrectorAdditive_getPredict+0x6a2>
        tempY = -tempY;
 8005228:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800522c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005230:	4692      	mov	sl, r2
 8005232:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 8005236:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800523a:	e9c3 ab00 	strd	sl, fp, [r3]
      for (knt_0 = 0; knt_0 < knt; knt_0++) {
 800523e:	2300      	movs	r3, #0
 8005240:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8005244:	e014      	b.n	8005270 <UKFCorrectorAdditive_getPredict+0x6d4>
        tempY *= 1.0020841800044864E-292;
 8005246:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800524a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800524e:	f04f 0200 	mov.w	r2, #0
 8005252:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 8005256:	f7fb f9c1 	bl	80005dc <__aeabi_dmul>
 800525a:	4602      	mov	r2, r0
 800525c:	460b      	mov	r3, r1
 800525e:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8005262:	e9c1 2300 	strd	r2, r3, [r1]
      for (knt_0 = 0; knt_0 < knt; knt_0++) {
 8005266:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800526a:	3301      	adds	r3, #1
 800526c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8005270:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 8005274:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005278:	429a      	cmp	r2, r3
 800527a:	dbe4      	blt.n	8005246 <UKFCorrectorAdditive_getPredict+0x6aa>
      *Sy = tempY;
 800527c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005284:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 8005288:	e9c1 2300 	strd	r2, r3, [r1]
}
 800528c:	e007      	b.n	800529e <UKFCorrectorAdditive_getPredict+0x702>
      *Sy = tempY;
 800528e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005296:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 800529a:	e9c1 2300 	strd	r2, r3, [r1]
}
 800529e:	bf00      	nop
 80052a0:	f507 77ba 	add.w	r7, r7, #372	; 0x174
 80052a4:	46bd      	mov	sp, r7
 80052a6:	ecbd 8b02 	vpop	{d8}
 80052aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052ae:	bf00      	nop
 80052b0:	7c900000 	.word	0x7c900000
 80052b4:	00000000 	.word	0x00000000

080052b8 <CSE_step>:

void CSE_step(void)
{
 80052b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80052bc:	f5ad 7d43 	sub.w	sp, sp, #780	; 0x30c
 80052c0:	af06      	add	r7, sp, #24
  int32_T iAcol_0;
  static const real_T Wmean[2] = { 1.0, -0.1666668333335 };

  static const real_T Wcov[2] = { 0.999996999998, -0.1666668333335 };

  if (CSE_P.Enable1_Value) {
 80052c2:	4bb3      	ldr	r3, [pc, #716]	; (8005590 <CSE_step+0x2d8>)
 80052c4:	f893 32d2 	ldrb.w	r3, [r3, #722]	; 0x2d2
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	f001 803e 	beq.w	800634a <CSE_step+0x1092>
    boolean_T errorCondition;
    boolean_T guard1 = false;
 80052ce:	2300      	movs	r3, #0
 80052d0:	f887 32de 	strb.w	r3, [r7, #734]	; 0x2de
    CSE_M_x(CSE_DW.x, &s_0);
 80052d4:	f107 0308 	add.w	r3, r7, #8
 80052d8:	4619      	mov	r1, r3
 80052da:	48ae      	ldr	r0, [pc, #696]	; (8005594 <CSE_step+0x2dc>)
 80052dc:	f7ff fc10 	bl	8004b00 <CSE_M_x>
    UKFCorrectorAdditive_getPredict(CSE_P.R1_Value, CSE_DW.x, CSE_DW.P, 0.001,
 80052e0:	4bab      	ldr	r3, [pc, #684]	; (8005590 <CSE_step+0x2d8>)
 80052e2:	ed93 7b84 	vldr	d7, [r3, #528]	; 0x210
 80052e6:	f107 0110 	add.w	r1, r7, #16
 80052ea:	f107 0208 	add.w	r2, r7, #8
 80052ee:	463b      	mov	r3, r7
 80052f0:	9300      	str	r3, [sp, #0]
 80052f2:	460b      	mov	r3, r1
 80052f4:	ed9f 3ba0 	vldr	d3, [pc, #640]	; 8005578 <CSE_step+0x2c0>
 80052f8:	ed9f 2ba1 	vldr	d2, [pc, #644]	; 8005580 <CSE_step+0x2c8>
 80052fc:	ed9f 1ba2 	vldr	d1, [pc, #648]	; 8005588 <CSE_step+0x2d0>
 8005300:	49a5      	ldr	r1, [pc, #660]	; (8005598 <CSE_step+0x2e0>)
 8005302:	48a4      	ldr	r0, [pc, #656]	; (8005594 <CSE_step+0x2dc>)
 8005304:	eeb0 0a47 	vmov.f32	s0, s14
 8005308:	eef0 0a67 	vmov.f32	s1, s15
 800530c:	f7ff fc46 	bl	8004b9c <UKFCorrectorAdditive_getPredict>
      2.0, 0.0, &s_0, tempY, &temp);
    s_0 = CSE_U.y - s_0;
 8005310:	4ba2      	ldr	r3, [pc, #648]	; (800559c <CSE_step+0x2e4>)
 8005312:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8005316:	f107 0308 	add.w	r3, r7, #8
 800531a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800531e:	f7fa ffa5 	bl	800026c <__aeabi_dsub>
 8005322:	4602      	mov	r2, r0
 8005324:	460b      	mov	r3, r1
 8005326:	f107 0108 	add.w	r1, r7, #8
 800532a:	e9c1 2300 	strd	r2, r3, [r1]
    iAcol_0 = 0;
 800532e:	2300      	movs	r3, #0
 8005330:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
    for (iAcol = 0; iAcol < 3; iAcol++) {
 8005334:	2300      	movs	r3, #0
 8005336:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 800533a:	e04a      	b.n	80053d2 <CSE_step+0x11a>
      R[iAcol_0] = CSE_DW.P[iAcol];
 800533c:	4a96      	ldr	r2, [pc, #600]	; (8005598 <CSE_step+0x2e0>)
 800533e:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005342:	00db      	lsls	r3, r3, #3
 8005344:	4413      	add	r3, r2
 8005346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800534a:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 800534e:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8005352:	00c9      	lsls	r1, r1, #3
 8005354:	4401      	add	r1, r0
 8005356:	e9c1 2300 	strd	r2, r3, [r1]
      R[iAcol_0 + 1] = CSE_DW.P[iAcol + 3];
 800535a:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 800535e:	3303      	adds	r3, #3
 8005360:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8005364:	1c51      	adds	r1, r2, #1
 8005366:	4a8c      	ldr	r2, [pc, #560]	; (8005598 <CSE_step+0x2e0>)
 8005368:	00db      	lsls	r3, r3, #3
 800536a:	4413      	add	r3, r2
 800536c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005370:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8005374:	00c9      	lsls	r1, r1, #3
 8005376:	4401      	add	r1, r0
 8005378:	e9c1 2300 	strd	r2, r3, [r1]
      R[iAcol_0 + 2] = CSE_DW.P[iAcol + 6];
 800537c:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005380:	3306      	adds	r3, #6
 8005382:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8005386:	1c91      	adds	r1, r2, #2
 8005388:	4a83      	ldr	r2, [pc, #524]	; (8005598 <CSE_step+0x2e0>)
 800538a:	00db      	lsls	r3, r3, #3
 800538c:	4413      	add	r3, r2
 800538e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005392:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8005396:	00c9      	lsls	r1, r1, #3
 8005398:	4401      	add	r1, r0
 800539a:	e9c1 2300 	strd	r2, r3, [r1]
      C[iAcol] = tempY[iAcol];
 800539e:	f107 0210 	add.w	r2, r7, #16
 80053a2:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80053a6:	00db      	lsls	r3, r3, #3
 80053a8:	4413      	add	r3, r2
 80053aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ae:	f107 0058 	add.w	r0, r7, #88	; 0x58
 80053b2:	f8d7 12e4 	ldr.w	r1, [r7, #740]	; 0x2e4
 80053b6:	00c9      	lsls	r1, r1, #3
 80053b8:	4401      	add	r1, r0
 80053ba:	e9c1 2300 	strd	r2, r3, [r1]
      iAcol_0 += 3;
 80053be:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80053c2:	3303      	adds	r3, #3
 80053c4:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
    for (iAcol = 0; iAcol < 3; iAcol++) {
 80053c8:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80053cc:	3301      	adds	r3, #1
 80053ce:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 80053d2:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80053d6:	2b02      	cmp	r3, #2
 80053d8:	ddb0      	ble.n	800533c <CSE_step+0x84>
    }

    trisolve_BC1XmAGq(temp, C);
 80053da:	463b      	mov	r3, r7
 80053dc:	ed93 7b00 	vldr	d7, [r3]
 80053e0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80053e4:	4618      	mov	r0, r3
 80053e6:	eeb0 0a47 	vmov.f32	s0, s14
 80053ea:	eef0 0a67 	vmov.f32	s1, s15
 80053ee:	f009 f8ef 	bl	800e5d0 <trisolve_BC1XmAGq>
    K[0] = C[0];
 80053f2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80053f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053fa:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80053fe:	e9c1 2300 	strd	r2, r3, [r1]
    K[1] = C[1];
 8005402:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005406:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800540a:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800540e:	e9c1 2302 	strd	r2, r3, [r1, #8]
    K[2] = C[2];
 8005412:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005416:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800541a:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800541e:	e9c1 2304 	strd	r2, r3, [r1, #16]
    trisolve_BC1XmAGq(temp, K);
 8005422:	463b      	mov	r3, r7
 8005424:	ed93 7b00 	vldr	d7, [r3]
 8005428:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800542c:	4618      	mov	r0, r3
 800542e:	eeb0 0a47 	vmov.f32	s0, s14
 8005432:	eef0 0a67 	vmov.f32	s1, s15
 8005436:	f009 f8cb 	bl	800e5d0 <trisolve_BC1XmAGq>
    tempY[0] = K[0] * temp;
 800543a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800543e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005442:	463b      	mov	r3, r7
 8005444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005448:	f7fb f8c8 	bl	80005dc <__aeabi_dmul>
 800544c:	4602      	mov	r2, r0
 800544e:	460b      	mov	r3, r1
 8005450:	f107 0110 	add.w	r1, r7, #16
 8005454:	e9c1 2300 	strd	r2, r3, [r1]
    for (iAcol = 0; iAcol < 2; iAcol++) {
 8005458:	2300      	movs	r3, #0
 800545a:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 800545e:	e011      	b.n	8005484 <CSE_step+0x1cc>
      R[iAcol + 1] = 0.0;
 8005460:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005464:	3301      	adds	r3, #1
 8005466:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800546a:	00db      	lsls	r3, r3, #3
 800546c:	18d1      	adds	r1, r2, r3
 800546e:	f04f 0200 	mov.w	r2, #0
 8005472:	f04f 0300 	mov.w	r3, #0
 8005476:	e9c1 2300 	strd	r2, r3, [r1]
    for (iAcol = 0; iAcol < 2; iAcol++) {
 800547a:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 800547e:	3301      	adds	r3, #1
 8005480:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8005484:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005488:	2b01      	cmp	r3, #1
 800548a:	dde9      	ble.n	8005460 <CSE_step+0x1a8>
    }

    tempY[1] = K[1] * temp;
 800548c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005490:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8005494:	463b      	mov	r3, r7
 8005496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800549a:	f7fb f89f 	bl	80005dc <__aeabi_dmul>
 800549e:	4602      	mov	r2, r0
 80054a0:	460b      	mov	r3, r1
 80054a2:	f107 0110 	add.w	r1, r7, #16
 80054a6:	e9c1 2302 	strd	r2, r3, [r1, #8]
    R[5] = 0.0;
 80054aa:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 80054ae:	f04f 0200 	mov.w	r2, #0
 80054b2:	f04f 0300 	mov.w	r3, #0
 80054b6:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    tempY[2] = K[2] * temp;
 80054ba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80054be:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80054c2:	463b      	mov	r3, r7
 80054c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054c8:	f7fb f888 	bl	80005dc <__aeabi_dmul>
 80054cc:	4602      	mov	r2, r0
 80054ce:	460b      	mov	r3, r1
 80054d0:	f107 0110 	add.w	r1, r7, #16
 80054d4:	e9c1 2304 	strd	r2, r3, [r1, #16]
    errorCondition = (R[0] == 0.0);
 80054d8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80054dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80054e0:	2301      	movs	r3, #1
 80054e2:	461e      	mov	r6, r3
 80054e4:	f04f 0200 	mov.w	r2, #0
 80054e8:	f04f 0300 	mov.w	r3, #0
 80054ec:	f7fb fade 	bl	8000aac <__aeabi_dcmpeq>
 80054f0:	4603      	mov	r3, r0
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d101      	bne.n	80054fa <CSE_step+0x242>
 80054f6:	2300      	movs	r3, #0
 80054f8:	461e      	mov	r6, r3
 80054fa:	b2f3      	uxtb	r3, r6
 80054fc:	f887 32df 	strb.w	r3, [r7, #735]	; 0x2df
    if (!errorCondition) {
 8005500:	f897 32df 	ldrb.w	r3, [r7, #735]	; 0x2df
 8005504:	2b00      	cmp	r3, #0
 8005506:	d113      	bne.n	8005530 <CSE_step+0x278>
      errorCondition = (R[4] == 0.0);
 8005508:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800550c:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8005510:	2301      	movs	r3, #1
 8005512:	461e      	mov	r6, r3
 8005514:	f04f 0200 	mov.w	r2, #0
 8005518:	f04f 0300 	mov.w	r3, #0
 800551c:	f7fb fac6 	bl	8000aac <__aeabi_dcmpeq>
 8005520:	4603      	mov	r3, r0
 8005522:	2b00      	cmp	r3, #0
 8005524:	d101      	bne.n	800552a <CSE_step+0x272>
 8005526:	2300      	movs	r3, #0
 8005528:	461e      	mov	r6, r3
 800552a:	b2f3      	uxtb	r3, r6
 800552c:	f887 32df 	strb.w	r3, [r7, #735]	; 0x2df
    }

    if (!errorCondition) {
 8005530:	f897 32df 	ldrb.w	r3, [r7, #735]	; 0x2df
 8005534:	2b00      	cmp	r3, #0
 8005536:	d113      	bne.n	8005560 <CSE_step+0x2a8>
      errorCondition = (R[8] == 0.0);
 8005538:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800553c:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8005540:	2301      	movs	r3, #1
 8005542:	461e      	mov	r6, r3
 8005544:	f04f 0200 	mov.w	r2, #0
 8005548:	f04f 0300 	mov.w	r3, #0
 800554c:	f7fb faae 	bl	8000aac <__aeabi_dcmpeq>
 8005550:	4603      	mov	r3, r0
 8005552:	2b00      	cmp	r3, #0
 8005554:	d101      	bne.n	800555a <CSE_step+0x2a2>
 8005556:	2300      	movs	r3, #0
 8005558:	461e      	mov	r6, r3
 800555a:	b2f3      	uxtb	r3, r6
 800555c:	f887 32df 	strb.w	r3, [r7, #735]	; 0x2df
    }

    guard1 = false;
 8005560:	2300      	movs	r3, #0
 8005562:	f887 32de 	strb.w	r3, [r7, #734]	; 0x2de
    if (errorCondition) {
 8005566:	f897 32df 	ldrb.w	r3, [r7, #735]	; 0x2df
 800556a:	2b00      	cmp	r3, #0
 800556c:	d018      	beq.n	80055a0 <CSE_step+0x2e8>
      guard1 = true;
 800556e:	2301      	movs	r3, #1
 8005570:	f887 32de 	strb.w	r3, [r7, #734]	; 0x2de
 8005574:	e395      	b.n	8005ca2 <CSE_step+0x9ea>
 8005576:	bf00      	nop
	...
 8005584:	40000000 	.word	0x40000000
 8005588:	d2f1a9fc 	.word	0xd2f1a9fc
 800558c:	3f50624d 	.word	0x3f50624d
 8005590:	20000008 	.word	0x20000008
 8005594:	2001be30 	.word	0x2001be30
 8005598:	2001bde8 	.word	0x2001bde8
 800559c:	2001bdd8 	.word	0x2001bdd8
    } else {
      real_T absxk;
      real_T scale;
      real_T t;
      C[2] = tempY[2];
 80055a0:	f107 0310 	add.w	r3, r7, #16
 80055a4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80055a8:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80055ac:	e9c1 2304 	strd	r2, r3, [r1, #16]
      C[0] = tempY[0] / R[0];
 80055b0:	f107 0310 	add.w	r3, r7, #16
 80055b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80055b8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80055bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c0:	f7fb f936 	bl	8000830 <__aeabi_ddiv>
 80055c4:	4602      	mov	r2, r0
 80055c6:	460b      	mov	r3, r1
 80055c8:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80055cc:	e9c1 2300 	strd	r2, r3, [r1]
      C[1] = (tempY[1] - C[0] * R[3]) / R[4];
 80055d0:	f107 0310 	add.w	r3, r7, #16
 80055d4:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 80055d8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80055dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80055e0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80055e4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80055e8:	f7fa fff8 	bl	80005dc <__aeabi_dmul>
 80055ec:	4602      	mov	r2, r0
 80055ee:	460b      	mov	r3, r1
 80055f0:	4640      	mov	r0, r8
 80055f2:	4649      	mov	r1, r9
 80055f4:	f7fa fe3a 	bl	800026c <__aeabi_dsub>
 80055f8:	4602      	mov	r2, r0
 80055fa:	460b      	mov	r3, r1
 80055fc:	4610      	mov	r0, r2
 80055fe:	4619      	mov	r1, r3
 8005600:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005604:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005608:	f7fb f912 	bl	8000830 <__aeabi_ddiv>
 800560c:	4602      	mov	r2, r0
 800560e:	460b      	mov	r3, r1
 8005610:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8005614:	e9c1 2302 	strd	r2, r3, [r1, #8]
      temp = tempY[2];
 8005618:	f107 0310 	add.w	r3, r7, #16
 800561c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8005620:	4639      	mov	r1, r7
 8005622:	e9c1 2300 	strd	r2, r3, [r1]
      for (iAcol_0 = 0; iAcol_0 < 2; iAcol_0++) {
 8005626:	2300      	movs	r3, #0
 8005628:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 800562c:	e025      	b.n	800567a <CSE_step+0x3c2>
        temp -= R[iAcol_0 + 6] * C[iAcol_0];
 800562e:	463b      	mov	r3, r7
 8005630:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005634:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005638:	3306      	adds	r3, #6
 800563a:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800563e:	00db      	lsls	r3, r3, #3
 8005640:	4413      	add	r3, r2
 8005642:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005646:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800564a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800564e:	00db      	lsls	r3, r3, #3
 8005650:	4413      	add	r3, r2
 8005652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005656:	f7fa ffc1 	bl	80005dc <__aeabi_dmul>
 800565a:	4602      	mov	r2, r0
 800565c:	460b      	mov	r3, r1
 800565e:	4640      	mov	r0, r8
 8005660:	4649      	mov	r1, r9
 8005662:	f7fa fe03 	bl	800026c <__aeabi_dsub>
 8005666:	4602      	mov	r2, r0
 8005668:	460b      	mov	r3, r1
 800566a:	4639      	mov	r1, r7
 800566c:	e9c1 2300 	strd	r2, r3, [r1]
      for (iAcol_0 = 0; iAcol_0 < 2; iAcol_0++) {
 8005670:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005674:	3301      	adds	r3, #1
 8005676:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 800567a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800567e:	2b01      	cmp	r3, #1
 8005680:	ddd5      	ble.n	800562e <CSE_step+0x376>
      }

      C[2] = temp / R[8];
 8005682:	463b      	mov	r3, r7
 8005684:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005688:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800568c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8005690:	f7fb f8ce 	bl	8000830 <__aeabi_ddiv>
 8005694:	4602      	mov	r2, r0
 8005696:	460b      	mov	r3, r1
 8005698:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800569c:	e9c1 2304 	strd	r2, r3, [r1, #16]
      scale = 3.3121686421112381E-170;
 80056a0:	f04f 0200 	mov.w	r2, #0
 80056a4:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 80056a8:	e9c7 23b4 	strd	r2, r3, [r7, #720]	; 0x2d0
      absxk = fabs(C[0]);
 80056ac:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80056b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056b4:	4611      	mov	r1, r2
 80056b6:	f8c7 12c0 	str.w	r1, [r7, #704]	; 0x2c0
 80056ba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80056be:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
      if (absxk > 3.3121686421112381E-170) {
 80056c2:	f04f 0200 	mov.w	r2, #0
 80056c6:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 80056ca:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	; 0x2c0
 80056ce:	f7fb fa15 	bl	8000afc <__aeabi_dcmpgt>
 80056d2:	4603      	mov	r3, r0
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d00a      	beq.n	80056ee <CSE_step+0x436>
        temp = 1.0;
 80056d8:	4639      	mov	r1, r7
 80056da:	f04f 0200 	mov.w	r2, #0
 80056de:	4bbf      	ldr	r3, [pc, #764]	; (80059dc <CSE_step+0x724>)
 80056e0:	e9c1 2300 	strd	r2, r3, [r1]
        scale = absxk;
 80056e4:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	; 0x2c0
 80056e8:	e9c7 23b4 	strd	r2, r3, [r7, #720]	; 0x2d0
 80056ec:	e016      	b.n	800571c <CSE_step+0x464>
      } else {
        t = absxk / 3.3121686421112381E-170;
 80056ee:	f04f 0200 	mov.w	r2, #0
 80056f2:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 80056f6:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	; 0x2c0
 80056fa:	f7fb f899 	bl	8000830 <__aeabi_ddiv>
 80056fe:	4602      	mov	r2, r0
 8005700:	460b      	mov	r3, r1
 8005702:	e9c7 23ae 	strd	r2, r3, [r7, #696]	; 0x2b8
        temp = t * t;
 8005706:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 800570a:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	; 0x2b8
 800570e:	f7fa ff65 	bl	80005dc <__aeabi_dmul>
 8005712:	4602      	mov	r2, r0
 8005714:	460b      	mov	r3, r1
 8005716:	4639      	mov	r1, r7
 8005718:	e9c1 2300 	strd	r2, r3, [r1]
      }

      absxk = fabs(C[1]);
 800571c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005720:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8005724:	4611      	mov	r1, r2
 8005726:	f8c7 12c0 	str.w	r1, [r7, #704]	; 0x2c0
 800572a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800572e:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
      if (absxk > scale) {
 8005732:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	; 0x2d0
 8005736:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	; 0x2c0
 800573a:	f7fb f9df 	bl	8000afc <__aeabi_dcmpgt>
 800573e:	4603      	mov	r3, r0
 8005740:	2b00      	cmp	r3, #0
 8005742:	d02b      	beq.n	800579c <CSE_step+0x4e4>
        t = scale / absxk;
 8005744:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	; 0x2c0
 8005748:	e9d7 01b4 	ldrd	r0, r1, [r7, #720]	; 0x2d0
 800574c:	f7fb f870 	bl	8000830 <__aeabi_ddiv>
 8005750:	4602      	mov	r2, r0
 8005752:	460b      	mov	r3, r1
 8005754:	e9c7 23ae 	strd	r2, r3, [r7, #696]	; 0x2b8
        temp = temp * t * t + 1.0;
 8005758:	463b      	mov	r3, r7
 800575a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800575e:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 8005762:	f7fa ff3b 	bl	80005dc <__aeabi_dmul>
 8005766:	4602      	mov	r2, r0
 8005768:	460b      	mov	r3, r1
 800576a:	4610      	mov	r0, r2
 800576c:	4619      	mov	r1, r3
 800576e:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 8005772:	f7fa ff33 	bl	80005dc <__aeabi_dmul>
 8005776:	4602      	mov	r2, r0
 8005778:	460b      	mov	r3, r1
 800577a:	4610      	mov	r0, r2
 800577c:	4619      	mov	r1, r3
 800577e:	f04f 0200 	mov.w	r2, #0
 8005782:	4b96      	ldr	r3, [pc, #600]	; (80059dc <CSE_step+0x724>)
 8005784:	f7fa fd74 	bl	8000270 <__adddf3>
 8005788:	4602      	mov	r2, r0
 800578a:	460b      	mov	r3, r1
 800578c:	4639      	mov	r1, r7
 800578e:	e9c1 2300 	strd	r2, r3, [r1]
        scale = absxk;
 8005792:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	; 0x2c0
 8005796:	e9c7 23b4 	strd	r2, r3, [r7, #720]	; 0x2d0
 800579a:	e01d      	b.n	80057d8 <CSE_step+0x520>
      } else {
        t = absxk / scale;
 800579c:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	; 0x2d0
 80057a0:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	; 0x2c0
 80057a4:	f7fb f844 	bl	8000830 <__aeabi_ddiv>
 80057a8:	4602      	mov	r2, r0
 80057aa:	460b      	mov	r3, r1
 80057ac:	e9c7 23ae 	strd	r2, r3, [r7, #696]	; 0x2b8
        temp += t * t;
 80057b0:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 80057b4:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	; 0x2b8
 80057b8:	f7fa ff10 	bl	80005dc <__aeabi_dmul>
 80057bc:	4602      	mov	r2, r0
 80057be:	460b      	mov	r3, r1
 80057c0:	4610      	mov	r0, r2
 80057c2:	4619      	mov	r1, r3
 80057c4:	463b      	mov	r3, r7
 80057c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ca:	f7fa fd51 	bl	8000270 <__adddf3>
 80057ce:	4602      	mov	r2, r0
 80057d0:	460b      	mov	r3, r1
 80057d2:	4639      	mov	r1, r7
 80057d4:	e9c1 2300 	strd	r2, r3, [r1]
      }

      absxk = fabs(C[2]);
 80057d8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80057dc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80057e0:	4611      	mov	r1, r2
 80057e2:	f8c7 12c0 	str.w	r1, [r7, #704]	; 0x2c0
 80057e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80057ea:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
      if (absxk > scale) {
 80057ee:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	; 0x2d0
 80057f2:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	; 0x2c0
 80057f6:	f7fb f981 	bl	8000afc <__aeabi_dcmpgt>
 80057fa:	4603      	mov	r3, r0
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d02b      	beq.n	8005858 <CSE_step+0x5a0>
        t = scale / absxk;
 8005800:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	; 0x2c0
 8005804:	e9d7 01b4 	ldrd	r0, r1, [r7, #720]	; 0x2d0
 8005808:	f7fb f812 	bl	8000830 <__aeabi_ddiv>
 800580c:	4602      	mov	r2, r0
 800580e:	460b      	mov	r3, r1
 8005810:	e9c7 23ae 	strd	r2, r3, [r7, #696]	; 0x2b8
        temp = temp * t * t + 1.0;
 8005814:	463b      	mov	r3, r7
 8005816:	e9d3 0100 	ldrd	r0, r1, [r3]
 800581a:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 800581e:	f7fa fedd 	bl	80005dc <__aeabi_dmul>
 8005822:	4602      	mov	r2, r0
 8005824:	460b      	mov	r3, r1
 8005826:	4610      	mov	r0, r2
 8005828:	4619      	mov	r1, r3
 800582a:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 800582e:	f7fa fed5 	bl	80005dc <__aeabi_dmul>
 8005832:	4602      	mov	r2, r0
 8005834:	460b      	mov	r3, r1
 8005836:	4610      	mov	r0, r2
 8005838:	4619      	mov	r1, r3
 800583a:	f04f 0200 	mov.w	r2, #0
 800583e:	4b67      	ldr	r3, [pc, #412]	; (80059dc <CSE_step+0x724>)
 8005840:	f7fa fd16 	bl	8000270 <__adddf3>
 8005844:	4602      	mov	r2, r0
 8005846:	460b      	mov	r3, r1
 8005848:	4639      	mov	r1, r7
 800584a:	e9c1 2300 	strd	r2, r3, [r1]
        scale = absxk;
 800584e:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	; 0x2c0
 8005852:	e9c7 23b4 	strd	r2, r3, [r7, #720]	; 0x2d0
 8005856:	e01d      	b.n	8005894 <CSE_step+0x5dc>
      } else {
        t = absxk / scale;
 8005858:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	; 0x2d0
 800585c:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	; 0x2c0
 8005860:	f7fa ffe6 	bl	8000830 <__aeabi_ddiv>
 8005864:	4602      	mov	r2, r0
 8005866:	460b      	mov	r3, r1
 8005868:	e9c7 23ae 	strd	r2, r3, [r7, #696]	; 0x2b8
        temp += t * t;
 800586c:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 8005870:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	; 0x2b8
 8005874:	f7fa feb2 	bl	80005dc <__aeabi_dmul>
 8005878:	4602      	mov	r2, r0
 800587a:	460b      	mov	r3, r1
 800587c:	4610      	mov	r0, r2
 800587e:	4619      	mov	r1, r3
 8005880:	463b      	mov	r3, r7
 8005882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005886:	f7fa fcf3 	bl	8000270 <__adddf3>
 800588a:	4602      	mov	r2, r0
 800588c:	460b      	mov	r3, r1
 800588e:	4639      	mov	r1, r7
 8005890:	e9c1 2300 	strd	r2, r3, [r1]
      }

      temp = scale * sqrt(temp);
 8005894:	463b      	mov	r3, r7
 8005896:	ed93 7b00 	vldr	d7, [r3]
 800589a:	eeb0 0a47 	vmov.f32	s0, s14
 800589e:	eef0 0a67 	vmov.f32	s1, s15
 80058a2:	f014 fe99 	bl	801a5d8 <sqrt>
 80058a6:	ec51 0b10 	vmov	r0, r1, d0
 80058aa:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	; 0x2d0
 80058ae:	f7fa fe95 	bl	80005dc <__aeabi_dmul>
 80058b2:	4602      	mov	r2, r0
 80058b4:	460b      	mov	r3, r1
 80058b6:	4639      	mov	r1, r7
 80058b8:	e9c1 2300 	strd	r2, r3, [r1]
      if (temp >= 1.0) {
 80058bc:	463b      	mov	r3, r7
 80058be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80058c2:	f04f 0200 	mov.w	r2, #0
 80058c6:	4b45      	ldr	r3, [pc, #276]	; (80059dc <CSE_step+0x724>)
 80058c8:	f7fb f90e 	bl	8000ae8 <__aeabi_dcmpge>
 80058cc:	4603      	mov	r3, r0
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d003      	beq.n	80058da <CSE_step+0x622>
        guard1 = true;
 80058d2:	2301      	movs	r3, #1
 80058d4:	f887 32de 	strb.w	r3, [r7, #734]	; 0x2de
 80058d8:	e1e3      	b.n	8005ca2 <CSE_step+0x9ea>
      } else {
        rotate_LZ7ctbe0(sqrt(1.0 - temp * temp), C[2], &tempY[2], &s[2], &temp);
 80058da:	463b      	mov	r3, r7
 80058dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80058e0:	463b      	mov	r3, r7
 80058e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058e6:	f7fa fe79 	bl	80005dc <__aeabi_dmul>
 80058ea:	4602      	mov	r2, r0
 80058ec:	460b      	mov	r3, r1
 80058ee:	f04f 0000 	mov.w	r0, #0
 80058f2:	493a      	ldr	r1, [pc, #232]	; (80059dc <CSE_step+0x724>)
 80058f4:	f7fa fcba 	bl	800026c <__aeabi_dsub>
 80058f8:	4602      	mov	r2, r0
 80058fa:	460b      	mov	r3, r1
 80058fc:	ec43 2b17 	vmov	d7, r2, r3
 8005900:	eeb0 0a47 	vmov.f32	s0, s14
 8005904:	eef0 0a67 	vmov.f32	s1, s15
 8005908:	f014 fe66 	bl	801a5d8 <sqrt>
 800590c:	eeb0 6a40 	vmov.f32	s12, s0
 8005910:	eef0 6a60 	vmov.f32	s13, s1
 8005914:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005918:	ed93 7b04 	vldr	d7, [r3, #16]
 800591c:	463a      	mov	r2, r7
 800591e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005922:	f103 0110 	add.w	r1, r3, #16
 8005926:	f107 0310 	add.w	r3, r7, #16
 800592a:	3310      	adds	r3, #16
 800592c:	4618      	mov	r0, r3
 800592e:	eeb0 1a47 	vmov.f32	s2, s14
 8005932:	eef0 1a67 	vmov.f32	s3, s15
 8005936:	eeb0 0a46 	vmov.f32	s0, s12
 800593a:	eef0 0a66 	vmov.f32	s1, s13
 800593e:	f006 fd99 	bl	800c474 <rotate_LZ7ctbe0>
        C[2] = 0.0;
 8005942:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8005946:	f04f 0200 	mov.w	r2, #0
 800594a:	f04f 0300 	mov.w	r3, #0
 800594e:	e9c1 2304 	strd	r2, r3, [r1, #16]
        rotate_LZ7ctbe0(temp, C[1], &tempY[1], &s[1], &temp);
 8005952:	463b      	mov	r3, r7
 8005954:	ed93 7b00 	vldr	d7, [r3]
 8005958:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800595c:	ed93 6b02 	vldr	d6, [r3, #8]
 8005960:	463a      	mov	r2, r7
 8005962:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005966:	f103 0108 	add.w	r1, r3, #8
 800596a:	f107 0310 	add.w	r3, r7, #16
 800596e:	3308      	adds	r3, #8
 8005970:	4618      	mov	r0, r3
 8005972:	eeb0 1a46 	vmov.f32	s2, s12
 8005976:	eef0 1a66 	vmov.f32	s3, s13
 800597a:	eeb0 0a47 	vmov.f32	s0, s14
 800597e:	eef0 0a67 	vmov.f32	s1, s15
 8005982:	f006 fd77 	bl	800c474 <rotate_LZ7ctbe0>
        C[1] = 0.0;
 8005986:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800598a:	f04f 0200 	mov.w	r2, #0
 800598e:	f04f 0300 	mov.w	r3, #0
 8005992:	e9c1 2302 	strd	r2, r3, [r1, #8]
        rotate_LZ7ctbe0(temp, C[0], &tempY[0], &s[0], &temp);
 8005996:	463b      	mov	r3, r7
 8005998:	ed93 7b00 	vldr	d7, [r3]
 800599c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80059a0:	ed93 6b00 	vldr	d6, [r3]
 80059a4:	463a      	mov	r2, r7
 80059a6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80059aa:	f107 0310 	add.w	r3, r7, #16
 80059ae:	4618      	mov	r0, r3
 80059b0:	eeb0 1a46 	vmov.f32	s2, s12
 80059b4:	eef0 1a66 	vmov.f32	s3, s13
 80059b8:	eeb0 0a47 	vmov.f32	s0, s14
 80059bc:	eef0 0a67 	vmov.f32	s1, s15
 80059c0:	f006 fd58 	bl	800c474 <rotate_LZ7ctbe0>
        C[0] = 0.0;
 80059c4:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80059c8:	f04f 0200 	mov.w	r2, #0
 80059cc:	f04f 0300 	mov.w	r3, #0
 80059d0:	e9c1 2300 	strd	r2, r3, [r1]
        for (iAcol_0 = 0; iAcol_0 + 1 > 0; iAcol_0--) {
 80059d4:	2300      	movs	r3, #0
 80059d6:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 80059da:	e06e      	b.n	8005aba <CSE_step+0x802>
 80059dc:	3ff00000 	.word	0x3ff00000
          temp = s[iAcol_0] * R[iAcol_0];
 80059e0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80059e4:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80059e8:	00db      	lsls	r3, r3, #3
 80059ea:	4413      	add	r3, r2
 80059ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 80059f0:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80059f4:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80059f8:	00db      	lsls	r3, r3, #3
 80059fa:	4413      	add	r3, r2
 80059fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a00:	f7fa fdec 	bl	80005dc <__aeabi_dmul>
 8005a04:	4602      	mov	r2, r0
 8005a06:	460b      	mov	r3, r1
 8005a08:	4639      	mov	r1, r7
 8005a0a:	e9c1 2300 	strd	r2, r3, [r1]
          R[iAcol_0] = tempY[iAcol_0] * R[iAcol_0] - s[iAcol_0] * C[0];
 8005a0e:	f107 0210 	add.w	r2, r7, #16
 8005a12:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005a16:	00db      	lsls	r3, r3, #3
 8005a18:	4413      	add	r3, r2
 8005a1a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005a1e:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8005a22:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005a26:	00db      	lsls	r3, r3, #3
 8005a28:	4413      	add	r3, r2
 8005a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a2e:	f7fa fdd5 	bl	80005dc <__aeabi_dmul>
 8005a32:	4602      	mov	r2, r0
 8005a34:	460b      	mov	r3, r1
 8005a36:	4690      	mov	r8, r2
 8005a38:	4699      	mov	r9, r3
 8005a3a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005a3e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005a42:	00db      	lsls	r3, r3, #3
 8005a44:	4413      	add	r3, r2
 8005a46:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005a4a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a52:	f7fa fdc3 	bl	80005dc <__aeabi_dmul>
 8005a56:	4602      	mov	r2, r0
 8005a58:	460b      	mov	r3, r1
 8005a5a:	4640      	mov	r0, r8
 8005a5c:	4649      	mov	r1, r9
 8005a5e:	f7fa fc05 	bl	800026c <__aeabi_dsub>
 8005a62:	4602      	mov	r2, r0
 8005a64:	460b      	mov	r3, r1
 8005a66:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8005a6a:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8005a6e:	00c9      	lsls	r1, r1, #3
 8005a70:	4401      	add	r1, r0
 8005a72:	e9c1 2300 	strd	r2, r3, [r1]
          C[0] = tempY[iAcol_0] * C[0] + temp;
 8005a76:	f107 0210 	add.w	r2, r7, #16
 8005a7a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005a7e:	00db      	lsls	r3, r3, #3
 8005a80:	4413      	add	r3, r2
 8005a82:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005a86:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a8e:	f7fa fda5 	bl	80005dc <__aeabi_dmul>
 8005a92:	4602      	mov	r2, r0
 8005a94:	460b      	mov	r3, r1
 8005a96:	4610      	mov	r0, r2
 8005a98:	4619      	mov	r1, r3
 8005a9a:	463b      	mov	r3, r7
 8005a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aa0:	f7fa fbe6 	bl	8000270 <__adddf3>
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	460b      	mov	r3, r1
 8005aa8:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8005aac:	e9c1 2300 	strd	r2, r3, [r1]
        for (iAcol_0 = 0; iAcol_0 + 1 > 0; iAcol_0--) {
 8005ab0:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005ab4:	3b01      	subs	r3, #1
 8005ab6:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8005aba:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	da8e      	bge.n	80059e0 <CSE_step+0x728>
        }

        for (iAcol_0 = 1; iAcol_0 + 1 > 0; iAcol_0--) {
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8005ac8:	e06f      	b.n	8005baa <CSE_step+0x8f2>
          temp = R[iAcol_0 + 3];
 8005aca:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005ace:	3303      	adds	r3, #3
 8005ad0:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8005ad4:	00db      	lsls	r3, r3, #3
 8005ad6:	4413      	add	r3, r2
 8005ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005adc:	4639      	mov	r1, r7
 8005ade:	e9c1 2300 	strd	r2, r3, [r1]
          R[iAcol_0 + 3] = temp * tempY[iAcol_0] - s[iAcol_0] * C[1];
 8005ae2:	f107 0210 	add.w	r2, r7, #16
 8005ae6:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005aea:	00db      	lsls	r3, r3, #3
 8005aec:	4413      	add	r3, r2
 8005aee:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005af2:	463b      	mov	r3, r7
 8005af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005af8:	f7fa fd70 	bl	80005dc <__aeabi_dmul>
 8005afc:	4602      	mov	r2, r0
 8005afe:	460b      	mov	r3, r1
 8005b00:	4690      	mov	r8, r2
 8005b02:	4699      	mov	r9, r3
 8005b04:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005b08:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005b0c:	00db      	lsls	r3, r3, #3
 8005b0e:	4413      	add	r3, r2
 8005b10:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005b14:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005b18:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8005b1c:	f7fa fd5e 	bl	80005dc <__aeabi_dmul>
 8005b20:	4602      	mov	r2, r0
 8005b22:	460b      	mov	r3, r1
 8005b24:	4610      	mov	r0, r2
 8005b26:	4619      	mov	r1, r3
 8005b28:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005b2c:	1cde      	adds	r6, r3, #3
 8005b2e:	4602      	mov	r2, r0
 8005b30:	460b      	mov	r3, r1
 8005b32:	4640      	mov	r0, r8
 8005b34:	4649      	mov	r1, r9
 8005b36:	f7fa fb99 	bl	800026c <__aeabi_dsub>
 8005b3a:	4602      	mov	r2, r0
 8005b3c:	460b      	mov	r3, r1
 8005b3e:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8005b42:	00f1      	lsls	r1, r6, #3
 8005b44:	4401      	add	r1, r0
 8005b46:	e9c1 2300 	strd	r2, r3, [r1]
          C[1] = tempY[iAcol_0] * C[1] + temp * s[iAcol_0];
 8005b4a:	f107 0210 	add.w	r2, r7, #16
 8005b4e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005b52:	00db      	lsls	r3, r3, #3
 8005b54:	4413      	add	r3, r2
 8005b56:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005b5a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005b5e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8005b62:	f7fa fd3b 	bl	80005dc <__aeabi_dmul>
 8005b66:	4602      	mov	r2, r0
 8005b68:	460b      	mov	r3, r1
 8005b6a:	4690      	mov	r8, r2
 8005b6c:	4699      	mov	r9, r3
 8005b6e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005b72:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005b76:	00db      	lsls	r3, r3, #3
 8005b78:	4413      	add	r3, r2
 8005b7a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005b7e:	463b      	mov	r3, r7
 8005b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b84:	f7fa fd2a 	bl	80005dc <__aeabi_dmul>
 8005b88:	4602      	mov	r2, r0
 8005b8a:	460b      	mov	r3, r1
 8005b8c:	4640      	mov	r0, r8
 8005b8e:	4649      	mov	r1, r9
 8005b90:	f7fa fb6e 	bl	8000270 <__adddf3>
 8005b94:	4602      	mov	r2, r0
 8005b96:	460b      	mov	r3, r1
 8005b98:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8005b9c:	e9c1 2302 	strd	r2, r3, [r1, #8]
        for (iAcol_0 = 1; iAcol_0 + 1 > 0; iAcol_0--) {
 8005ba0:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005ba4:	3b01      	subs	r3, #1
 8005ba6:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8005baa:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	da8b      	bge.n	8005aca <CSE_step+0x812>
        }

        for (iAcol_0 = 2; iAcol_0 + 1 > 0; iAcol_0--) {
 8005bb2:	2302      	movs	r3, #2
 8005bb4:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8005bb8:	e06f      	b.n	8005c9a <CSE_step+0x9e2>
          temp = R[iAcol_0 + 6];
 8005bba:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005bbe:	3306      	adds	r3, #6
 8005bc0:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8005bc4:	00db      	lsls	r3, r3, #3
 8005bc6:	4413      	add	r3, r2
 8005bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bcc:	4639      	mov	r1, r7
 8005bce:	e9c1 2300 	strd	r2, r3, [r1]
          R[iAcol_0 + 6] = temp * tempY[iAcol_0] - s[iAcol_0] * C[2];
 8005bd2:	f107 0210 	add.w	r2, r7, #16
 8005bd6:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005bda:	00db      	lsls	r3, r3, #3
 8005bdc:	4413      	add	r3, r2
 8005bde:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005be2:	463b      	mov	r3, r7
 8005be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005be8:	f7fa fcf8 	bl	80005dc <__aeabi_dmul>
 8005bec:	4602      	mov	r2, r0
 8005bee:	460b      	mov	r3, r1
 8005bf0:	4690      	mov	r8, r2
 8005bf2:	4699      	mov	r9, r3
 8005bf4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005bf8:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005bfc:	00db      	lsls	r3, r3, #3
 8005bfe:	4413      	add	r3, r2
 8005c00:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005c04:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005c08:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8005c0c:	f7fa fce6 	bl	80005dc <__aeabi_dmul>
 8005c10:	4602      	mov	r2, r0
 8005c12:	460b      	mov	r3, r1
 8005c14:	4610      	mov	r0, r2
 8005c16:	4619      	mov	r1, r3
 8005c18:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005c1c:	1d9e      	adds	r6, r3, #6
 8005c1e:	4602      	mov	r2, r0
 8005c20:	460b      	mov	r3, r1
 8005c22:	4640      	mov	r0, r8
 8005c24:	4649      	mov	r1, r9
 8005c26:	f7fa fb21 	bl	800026c <__aeabi_dsub>
 8005c2a:	4602      	mov	r2, r0
 8005c2c:	460b      	mov	r3, r1
 8005c2e:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8005c32:	00f1      	lsls	r1, r6, #3
 8005c34:	4401      	add	r1, r0
 8005c36:	e9c1 2300 	strd	r2, r3, [r1]
          C[2] = tempY[iAcol_0] * C[2] + temp * s[iAcol_0];
 8005c3a:	f107 0210 	add.w	r2, r7, #16
 8005c3e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005c42:	00db      	lsls	r3, r3, #3
 8005c44:	4413      	add	r3, r2
 8005c46:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005c4a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005c4e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8005c52:	f7fa fcc3 	bl	80005dc <__aeabi_dmul>
 8005c56:	4602      	mov	r2, r0
 8005c58:	460b      	mov	r3, r1
 8005c5a:	4690      	mov	r8, r2
 8005c5c:	4699      	mov	r9, r3
 8005c5e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005c62:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005c66:	00db      	lsls	r3, r3, #3
 8005c68:	4413      	add	r3, r2
 8005c6a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005c6e:	463b      	mov	r3, r7
 8005c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c74:	f7fa fcb2 	bl	80005dc <__aeabi_dmul>
 8005c78:	4602      	mov	r2, r0
 8005c7a:	460b      	mov	r3, r1
 8005c7c:	4640      	mov	r0, r8
 8005c7e:	4649      	mov	r1, r9
 8005c80:	f7fa faf6 	bl	8000270 <__adddf3>
 8005c84:	4602      	mov	r2, r0
 8005c86:	460b      	mov	r3, r1
 8005c88:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8005c8c:	e9c1 2304 	strd	r2, r3, [r1, #16]
        for (iAcol_0 = 2; iAcol_0 + 1 > 0; iAcol_0--) {
 8005c90:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005c94:	3b01      	subs	r3, #1
 8005c96:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8005c9a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	da8b      	bge.n	8005bba <CSE_step+0x902>
        }
      }
    }

    if (guard1) {
 8005ca2:	f897 32de 	ldrb.w	r3, [r7, #734]	; 0x2de
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	f000 82e1 	beq.w	800626e <CSE_step+0xfb6>
      int32_T R_tmp;
      boolean_T exitg2;
      iAcol_0 = 0;
 8005cac:	2300      	movs	r3, #0
 8005cae:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
      for (iAcol = 0; iAcol < 3; iAcol++) {
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8005cb8:	e0d6      	b.n	8005e68 <CSE_step+0xbb0>
        coffset = 0;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
        for (aoffset = 0; aoffset < 3; aoffset++) {
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 8005cc6:	e0c0      	b.n	8005e4a <CSE_step+0xb92>
          R_tmp = coffset + iAcol;
 8005cc8:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 8005ccc:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005cd0:	4413      	add	r3, r2
 8005cd2:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
          R_0[R_tmp] = 0.0;
 8005cd6:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8005cda:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8005cde:	00db      	lsls	r3, r3, #3
 8005ce0:	18d1      	adds	r1, r2, r3
 8005ce2:	f04f 0200 	mov.w	r2, #0
 8005ce6:	f04f 0300 	mov.w	r3, #0
 8005cea:	e9c1 2300 	strd	r2, r3, [r1]
          R_0[R_tmp] += R[iAcol_0] * R[coffset];
 8005cee:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8005cf2:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8005cf6:	00db      	lsls	r3, r3, #3
 8005cf8:	4413      	add	r3, r2
 8005cfa:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005cfe:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8005d02:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005d06:	00db      	lsls	r3, r3, #3
 8005d08:	4413      	add	r3, r2
 8005d0a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005d0e:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8005d12:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8005d16:	00db      	lsls	r3, r3, #3
 8005d18:	4413      	add	r3, r2
 8005d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d1e:	f7fa fc5d 	bl	80005dc <__aeabi_dmul>
 8005d22:	4602      	mov	r2, r0
 8005d24:	460b      	mov	r3, r1
 8005d26:	4640      	mov	r0, r8
 8005d28:	4649      	mov	r1, r9
 8005d2a:	f7fa faa1 	bl	8000270 <__adddf3>
 8005d2e:	4602      	mov	r2, r0
 8005d30:	460b      	mov	r3, r1
 8005d32:	f507 7080 	add.w	r0, r7, #256	; 0x100
 8005d36:	f8d7 12b4 	ldr.w	r1, [r7, #692]	; 0x2b4
 8005d3a:	00c9      	lsls	r1, r1, #3
 8005d3c:	4401      	add	r1, r0
 8005d3e:	e9c1 2300 	strd	r2, r3, [r1]
          R_0[R_tmp] += R[iAcol_0 + 1] * R[coffset + 1];
 8005d42:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8005d46:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8005d4a:	00db      	lsls	r3, r3, #3
 8005d4c:	4413      	add	r3, r2
 8005d4e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005d52:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005d56:	3301      	adds	r3, #1
 8005d58:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8005d5c:	00db      	lsls	r3, r3, #3
 8005d5e:	4413      	add	r3, r2
 8005d60:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005d64:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8005d68:	3301      	adds	r3, #1
 8005d6a:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8005d6e:	00db      	lsls	r3, r3, #3
 8005d70:	4413      	add	r3, r2
 8005d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d76:	f7fa fc31 	bl	80005dc <__aeabi_dmul>
 8005d7a:	4602      	mov	r2, r0
 8005d7c:	460b      	mov	r3, r1
 8005d7e:	4640      	mov	r0, r8
 8005d80:	4649      	mov	r1, r9
 8005d82:	f7fa fa75 	bl	8000270 <__adddf3>
 8005d86:	4602      	mov	r2, r0
 8005d88:	460b      	mov	r3, r1
 8005d8a:	f507 7080 	add.w	r0, r7, #256	; 0x100
 8005d8e:	f8d7 12b4 	ldr.w	r1, [r7, #692]	; 0x2b4
 8005d92:	00c9      	lsls	r1, r1, #3
 8005d94:	4401      	add	r1, r0
 8005d96:	e9c1 2300 	strd	r2, r3, [r1]
          R_0[R_tmp] += R[iAcol_0 + 2] * R[coffset + 2];
 8005d9a:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8005d9e:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8005da2:	00db      	lsls	r3, r3, #3
 8005da4:	4413      	add	r3, r2
 8005da6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005daa:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005dae:	3302      	adds	r3, #2
 8005db0:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8005db4:	00db      	lsls	r3, r3, #3
 8005db6:	4413      	add	r3, r2
 8005db8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005dbc:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8005dc0:	3302      	adds	r3, #2
 8005dc2:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8005dc6:	00db      	lsls	r3, r3, #3
 8005dc8:	4413      	add	r3, r2
 8005dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dce:	f7fa fc05 	bl	80005dc <__aeabi_dmul>
 8005dd2:	4602      	mov	r2, r0
 8005dd4:	460b      	mov	r3, r1
 8005dd6:	4640      	mov	r0, r8
 8005dd8:	4649      	mov	r1, r9
 8005dda:	f7fa fa49 	bl	8000270 <__adddf3>
 8005dde:	4602      	mov	r2, r0
 8005de0:	460b      	mov	r3, r1
 8005de2:	f507 7080 	add.w	r0, r7, #256	; 0x100
 8005de6:	f8d7 12b4 	ldr.w	r1, [r7, #692]	; 0x2b4
 8005dea:	00c9      	lsls	r1, r1, #3
 8005dec:	4401      	add	r1, r0
 8005dee:	e9c1 2300 	strd	r2, r3, [r1]
          tempY_0[aoffset + iAcol_0] = tempY[aoffset] * tempY[iAcol];
 8005df2:	f107 0210 	add.w	r2, r7, #16
 8005df6:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8005dfa:	00db      	lsls	r3, r3, #3
 8005dfc:	4413      	add	r3, r2
 8005dfe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005e02:	f107 0210 	add.w	r2, r7, #16
 8005e06:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005e0a:	00db      	lsls	r3, r3, #3
 8005e0c:	4413      	add	r3, r2
 8005e0e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005e12:	f8d7 62ec 	ldr.w	r6, [r7, #748]	; 0x2ec
 8005e16:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005e1a:	4433      	add	r3, r6
 8005e1c:	461e      	mov	r6, r3
 8005e1e:	4642      	mov	r2, r8
 8005e20:	464b      	mov	r3, r9
 8005e22:	f7fa fbdb 	bl	80005dc <__aeabi_dmul>
 8005e26:	4602      	mov	r2, r0
 8005e28:	460b      	mov	r3, r1
 8005e2a:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8005e2e:	00f1      	lsls	r1, r6, #3
 8005e30:	4401      	add	r1, r0
 8005e32:	e9c1 2300 	strd	r2, r3, [r1]
          coffset += 3;
 8005e36:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8005e3a:	3303      	adds	r3, #3
 8005e3c:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
        for (aoffset = 0; aoffset < 3; aoffset++) {
 8005e40:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8005e44:	3301      	adds	r3, #1
 8005e46:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 8005e4a:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8005e4e:	2b02      	cmp	r3, #2
 8005e50:	f77f af3a 	ble.w	8005cc8 <CSE_step+0xa10>
        }

        iAcol_0 += 3;
 8005e54:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005e58:	3303      	adds	r3, #3
 8005e5a:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
      for (iAcol = 0; iAcol < 3; iAcol++) {
 8005e5e:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005e62:	3301      	adds	r3, #1
 8005e64:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8005e68:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005e6c:	2b02      	cmp	r3, #2
 8005e6e:	f77f af24 	ble.w	8005cba <CSE_step+0xa02>
      }

      errorCondition = true;
 8005e72:	2301      	movs	r3, #1
 8005e74:	f887 32df 	strb.w	r3, [r7, #735]	; 0x2df
      for (iAcol = 0; iAcol < 9; iAcol++) {
 8005e78:	2300      	movs	r3, #0
 8005e7a:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8005e7e:	e045      	b.n	8005f0c <CSE_step+0xc54>
        temp = R_0[iAcol] - tempY_0[iAcol];
 8005e80:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8005e84:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005e88:	00db      	lsls	r3, r3, #3
 8005e8a:	4413      	add	r3, r2
 8005e8c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005e90:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8005e94:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005e98:	00db      	lsls	r3, r3, #3
 8005e9a:	4413      	add	r3, r2
 8005e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ea0:	f7fa f9e4 	bl	800026c <__aeabi_dsub>
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	460b      	mov	r3, r1
 8005ea8:	4639      	mov	r1, r7
 8005eaa:	e9c1 2300 	strd	r2, r3, [r1]
        if (errorCondition && (rtIsInf(temp) || rtIsNaN(temp))) {
 8005eae:	f897 32df 	ldrb.w	r3, [r7, #735]	; 0x2df
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d01a      	beq.n	8005eec <CSE_step+0xc34>
 8005eb6:	463b      	mov	r3, r7
 8005eb8:	ed93 7b00 	vldr	d7, [r3]
 8005ebc:	eeb0 0a47 	vmov.f32	s0, s14
 8005ec0:	eef0 0a67 	vmov.f32	s1, s15
 8005ec4:	f006 fd4a 	bl	800c95c <rtIsInf>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d10b      	bne.n	8005ee6 <CSE_step+0xc2e>
 8005ece:	463b      	mov	r3, r7
 8005ed0:	ed93 7b00 	vldr	d7, [r3]
 8005ed4:	eeb0 0a47 	vmov.f32	s0, s14
 8005ed8:	eef0 0a67 	vmov.f32	s1, s15
 8005edc:	f006 fd62 	bl	800c9a4 <rtIsNaN>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d002      	beq.n	8005eec <CSE_step+0xc34>
          errorCondition = false;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	f887 32df 	strb.w	r3, [r7, #735]	; 0x2df
        }

        Ss[iAcol] = temp;
 8005eec:	463b      	mov	r3, r7
 8005eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ef2:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 8005ef6:	f8d7 12e4 	ldr.w	r1, [r7, #740]	; 0x2e4
 8005efa:	00c9      	lsls	r1, r1, #3
 8005efc:	4401      	add	r1, r0
 8005efe:	e9c1 2300 	strd	r2, r3, [r1]
      for (iAcol = 0; iAcol < 9; iAcol++) {
 8005f02:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005f06:	3301      	adds	r3, #1
 8005f08:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8005f0c:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005f10:	2b08      	cmp	r3, #8
 8005f12:	ddb5      	ble.n	8005e80 <CSE_step+0xbc8>
      }

      if (errorCondition) {
 8005f14:	f897 32df 	ldrb.w	r3, [r7, #735]	; 0x2df
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d00a      	beq.n	8005f32 <CSE_step+0xc7a>
        svd_u3DvUgOe(Ss, tempY_0, s, R_0);
 8005f1c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8005f20:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005f24:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8005f28:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 8005f2c:	f006 fd8c 	bl	800ca48 <svd_u3DvUgOe>
 8005f30:	e02c      	b.n	8005f8c <CSE_step+0xcd4>
      } else {
        s[0] = (rtNaN);
 8005f32:	4bd2      	ldr	r3, [pc, #840]	; (800627c <CSE_step+0xfc4>)
 8005f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f38:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8005f3c:	e9c1 2300 	strd	r2, r3, [r1]
        s[1] = (rtNaN);
 8005f40:	4bce      	ldr	r3, [pc, #824]	; (800627c <CSE_step+0xfc4>)
 8005f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f46:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8005f4a:	e9c1 2302 	strd	r2, r3, [r1, #8]
        s[2] = (rtNaN);
 8005f4e:	4bcb      	ldr	r3, [pc, #812]	; (800627c <CSE_step+0xfc4>)
 8005f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f54:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8005f58:	e9c1 2304 	strd	r2, r3, [r1, #16]
        for (iAcol_0 = 0; iAcol_0 < 9; iAcol_0++) {
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8005f62:	e00f      	b.n	8005f84 <CSE_step+0xccc>
          R_0[iAcol_0] = (rtNaN);
 8005f64:	4bc5      	ldr	r3, [pc, #788]	; (800627c <CSE_step+0xfc4>)
 8005f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f6a:	f507 7080 	add.w	r0, r7, #256	; 0x100
 8005f6e:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8005f72:	00c9      	lsls	r1, r1, #3
 8005f74:	4401      	add	r1, r0
 8005f76:	e9c1 2300 	strd	r2, r3, [r1]
        for (iAcol_0 = 0; iAcol_0 < 9; iAcol_0++) {
 8005f7a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005f7e:	3301      	adds	r3, #1
 8005f80:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8005f84:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005f88:	2b08      	cmp	r3, #8
 8005f8a:	ddeb      	ble.n	8005f64 <CSE_step+0xcac>
        }
      }

      memset(&Ss[0], 0, 9U * sizeof(real_T));
 8005f8c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8005f90:	2248      	movs	r2, #72	; 0x48
 8005f92:	2100      	movs	r1, #0
 8005f94:	4618      	mov	r0, r3
 8005f96:	f014 f967 	bl	801a268 <memset>
      Ss[0] = s[0];
 8005f9a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fa2:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 8005fa6:	e9c1 2300 	strd	r2, r3, [r1]
      Ss[4] = s[1];
 8005faa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005fae:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8005fb2:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 8005fb6:	e9c1 2308 	strd	r2, r3, [r1, #32]
      Ss[8] = s[2];
 8005fba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005fbe:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8005fc2:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 8005fc6:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
      for (iAcol_0 = 0; iAcol_0 < 9; iAcol_0++) {
 8005fca:	2300      	movs	r3, #0
 8005fcc:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8005fd0:	e01e      	b.n	8006010 <CSE_step+0xd58>
        Ss[iAcol_0] = sqrt(Ss[iAcol_0]);
 8005fd2:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8005fd6:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005fda:	00db      	lsls	r3, r3, #3
 8005fdc:	4413      	add	r3, r2
 8005fde:	ed93 7b00 	vldr	d7, [r3]
 8005fe2:	eeb0 0a47 	vmov.f32	s0, s14
 8005fe6:	eef0 0a67 	vmov.f32	s1, s15
 8005fea:	f014 faf5 	bl	801a5d8 <sqrt>
 8005fee:	eeb0 7a40 	vmov.f32	s14, s0
 8005ff2:	eef0 7a60 	vmov.f32	s15, s1
 8005ff6:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8005ffa:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005ffe:	00db      	lsls	r3, r3, #3
 8006000:	4413      	add	r3, r2
 8006002:	ed83 7b00 	vstr	d7, [r3]
      for (iAcol_0 = 0; iAcol_0 < 9; iAcol_0++) {
 8006006:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800600a:	3301      	adds	r3, #1
 800600c:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8006010:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006014:	2b08      	cmp	r3, #8
 8006016:	dddc      	ble.n	8005fd2 <CSE_step+0xd1a>
      }

      iAcol_0 = 0;
 8006018:	2300      	movs	r3, #0
 800601a:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
      for (iAcol = 0; iAcol < 3; iAcol++) {
 800601e:	2300      	movs	r3, #0
 8006020:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8006024:	e0b4      	b.n	8006190 <CSE_step+0xed8>
        coffset = 0;
 8006026:	2300      	movs	r3, #0
 8006028:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
        for (aoffset = 0; aoffset < 3; aoffset++) {
 800602c:	2300      	movs	r3, #0
 800602e:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 8006032:	e09e      	b.n	8006172 <CSE_step+0xeba>
          R_tmp = coffset + iAcol;
 8006034:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 8006038:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 800603c:	4413      	add	r3, r2
 800603e:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
          R[R_tmp] = 0.0;
 8006042:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8006046:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 800604a:	00db      	lsls	r3, r3, #3
 800604c:	18d1      	adds	r1, r2, r3
 800604e:	f04f 0200 	mov.w	r2, #0
 8006052:	f04f 0300 	mov.w	r3, #0
 8006056:	e9c1 2300 	strd	r2, r3, [r1]
          R[R_tmp] += Ss[iAcol_0] * R_0[aoffset];
 800605a:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800605e:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8006062:	00db      	lsls	r3, r3, #3
 8006064:	4413      	add	r3, r2
 8006066:	e9d3 8900 	ldrd	r8, r9, [r3]
 800606a:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 800606e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006072:	00db      	lsls	r3, r3, #3
 8006074:	4413      	add	r3, r2
 8006076:	e9d3 0100 	ldrd	r0, r1, [r3]
 800607a:	f507 7280 	add.w	r2, r7, #256	; 0x100
 800607e:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8006082:	00db      	lsls	r3, r3, #3
 8006084:	4413      	add	r3, r2
 8006086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800608a:	f7fa faa7 	bl	80005dc <__aeabi_dmul>
 800608e:	4602      	mov	r2, r0
 8006090:	460b      	mov	r3, r1
 8006092:	4640      	mov	r0, r8
 8006094:	4649      	mov	r1, r9
 8006096:	f7fa f8eb 	bl	8000270 <__adddf3>
 800609a:	4602      	mov	r2, r0
 800609c:	460b      	mov	r3, r1
 800609e:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 80060a2:	f8d7 12b4 	ldr.w	r1, [r7, #692]	; 0x2b4
 80060a6:	00c9      	lsls	r1, r1, #3
 80060a8:	4401      	add	r1, r0
 80060aa:	e9c1 2300 	strd	r2, r3, [r1]
          R[R_tmp] += Ss[iAcol_0 + 1] * R_0[aoffset + 3];
 80060ae:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80060b2:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 80060b6:	00db      	lsls	r3, r3, #3
 80060b8:	4413      	add	r3, r2
 80060ba:	e9d3 8900 	ldrd	r8, r9, [r3]
 80060be:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80060c2:	3301      	adds	r3, #1
 80060c4:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 80060c8:	00db      	lsls	r3, r3, #3
 80060ca:	4413      	add	r3, r2
 80060cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80060d0:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 80060d4:	3303      	adds	r3, #3
 80060d6:	f507 7280 	add.w	r2, r7, #256	; 0x100
 80060da:	00db      	lsls	r3, r3, #3
 80060dc:	4413      	add	r3, r2
 80060de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060e2:	f7fa fa7b 	bl	80005dc <__aeabi_dmul>
 80060e6:	4602      	mov	r2, r0
 80060e8:	460b      	mov	r3, r1
 80060ea:	4640      	mov	r0, r8
 80060ec:	4649      	mov	r1, r9
 80060ee:	f7fa f8bf 	bl	8000270 <__adddf3>
 80060f2:	4602      	mov	r2, r0
 80060f4:	460b      	mov	r3, r1
 80060f6:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 80060fa:	f8d7 12b4 	ldr.w	r1, [r7, #692]	; 0x2b4
 80060fe:	00c9      	lsls	r1, r1, #3
 8006100:	4401      	add	r1, r0
 8006102:	e9c1 2300 	strd	r2, r3, [r1]
          R[R_tmp] += Ss[iAcol_0 + 2] * R_0[aoffset + 6];
 8006106:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800610a:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 800610e:	00db      	lsls	r3, r3, #3
 8006110:	4413      	add	r3, r2
 8006112:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006116:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800611a:	3302      	adds	r3, #2
 800611c:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8006120:	00db      	lsls	r3, r3, #3
 8006122:	4413      	add	r3, r2
 8006124:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006128:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 800612c:	3306      	adds	r3, #6
 800612e:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8006132:	00db      	lsls	r3, r3, #3
 8006134:	4413      	add	r3, r2
 8006136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800613a:	f7fa fa4f 	bl	80005dc <__aeabi_dmul>
 800613e:	4602      	mov	r2, r0
 8006140:	460b      	mov	r3, r1
 8006142:	4640      	mov	r0, r8
 8006144:	4649      	mov	r1, r9
 8006146:	f7fa f893 	bl	8000270 <__adddf3>
 800614a:	4602      	mov	r2, r0
 800614c:	460b      	mov	r3, r1
 800614e:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8006152:	f8d7 12b4 	ldr.w	r1, [r7, #692]	; 0x2b4
 8006156:	00c9      	lsls	r1, r1, #3
 8006158:	4401      	add	r1, r0
 800615a:	e9c1 2300 	strd	r2, r3, [r1]
          coffset += 3;
 800615e:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8006162:	3303      	adds	r3, #3
 8006164:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
        for (aoffset = 0; aoffset < 3; aoffset++) {
 8006168:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 800616c:	3301      	adds	r3, #1
 800616e:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 8006172:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8006176:	2b02      	cmp	r3, #2
 8006178:	f77f af5c 	ble.w	8006034 <CSE_step+0xd7c>
        }

        iAcol_0 += 3;
 800617c:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006180:	3303      	adds	r3, #3
 8006182:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
      for (iAcol = 0; iAcol < 3; iAcol++) {
 8006186:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 800618a:	3301      	adds	r3, #1
 800618c:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8006190:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006194:	2b02      	cmp	r3, #2
 8006196:	f77f af46 	ble.w	8006026 <CSE_step+0xd6e>
      }

      errorCondition = true;
 800619a:	2301      	movs	r3, #1
 800619c:	f887 32df 	strb.w	r3, [r7, #735]	; 0x2df
      iAcol = 0;
 80061a0:	2300      	movs	r3, #0
 80061a2:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
      exitg2 = false;
 80061a6:	2300      	movs	r3, #0
 80061a8:	f887 32cf 	strb.w	r3, [r7, #719]	; 0x2cf
      while ((!exitg2) && (iAcol < 3)) {
 80061ac:	e042      	b.n	8006234 <CSE_step+0xf7c>
        int32_T exitg1;
        iAcol_0 = iAcol + 1;
 80061ae:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80061b2:	3301      	adds	r3, #1
 80061b4:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
        do {
          exitg1 = 0;
 80061b8:	2300      	movs	r3, #0
 80061ba:	f8c7 32c8 	str.w	r3, [r7, #712]	; 0x2c8
          if (iAcol_0 + 1 < 4) {
 80061be:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80061c2:	2b02      	cmp	r3, #2
 80061c4:	dc23      	bgt.n	800620e <CSE_step+0xf56>
            if (!(R[3 * iAcol + iAcol_0] == 0.0)) {
 80061c6:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 80061ca:	4613      	mov	r3, r2
 80061cc:	005b      	lsls	r3, r3, #1
 80061ce:	441a      	add	r2, r3
 80061d0:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80061d4:	4413      	add	r3, r2
 80061d6:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80061da:	00db      	lsls	r3, r3, #3
 80061dc:	4413      	add	r3, r2
 80061de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80061e2:	f04f 0200 	mov.w	r2, #0
 80061e6:	f04f 0300 	mov.w	r3, #0
 80061ea:	f7fa fc5f 	bl	8000aac <__aeabi_dcmpeq>
 80061ee:	4603      	mov	r3, r0
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d106      	bne.n	8006202 <CSE_step+0xf4a>
              errorCondition = false;
 80061f4:	2300      	movs	r3, #0
 80061f6:	f887 32df 	strb.w	r3, [r7, #735]	; 0x2df
              exitg1 = 1;
 80061fa:	2301      	movs	r3, #1
 80061fc:	f8c7 32c8 	str.w	r3, [r7, #712]	; 0x2c8
 8006200:	e00d      	b.n	800621e <CSE_step+0xf66>
            } else {
              iAcol_0++;
 8006202:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006206:	3301      	adds	r3, #1
 8006208:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 800620c:	e007      	b.n	800621e <CSE_step+0xf66>
            }
          } else {
            iAcol++;
 800620e:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006212:	3301      	adds	r3, #1
 8006214:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
            exitg1 = 2;
 8006218:	2302      	movs	r3, #2
 800621a:	f8c7 32c8 	str.w	r3, [r7, #712]	; 0x2c8
          }
        } while (exitg1 == 0);
 800621e:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 8006222:	2b00      	cmp	r3, #0
 8006224:	d0c8      	beq.n	80061b8 <CSE_step+0xf00>

        if (exitg1 == 1) {
 8006226:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 800622a:	2b01      	cmp	r3, #1
 800622c:	d102      	bne.n	8006234 <CSE_step+0xf7c>
          exitg2 = true;
 800622e:	2301      	movs	r3, #1
 8006230:	f887 32cf 	strb.w	r3, [r7, #719]	; 0x2cf
      while ((!exitg2) && (iAcol < 3)) {
 8006234:	f897 32cf 	ldrb.w	r3, [r7, #719]	; 0x2cf
 8006238:	2b00      	cmp	r3, #0
 800623a:	d103      	bne.n	8006244 <CSE_step+0xf8c>
 800623c:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006240:	2b02      	cmp	r3, #2
 8006242:	ddb4      	ble.n	80061ae <CSE_step+0xef6>
        }
      }

      if (!errorCondition) {
 8006244:	f897 32df 	ldrb.w	r3, [r7, #735]	; 0x2df
 8006248:	2b00      	cmp	r3, #0
 800624a:	d110      	bne.n	800626e <CSE_step+0xfb6>
        memcpy(&R_0[0], &R[0], 9U * sizeof(real_T));
 800624c:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 8006250:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8006254:	2248      	movs	r2, #72	; 0x48
 8006256:	4618      	mov	r0, r3
 8006258:	f013 fff8 	bl	801a24c <memcpy>
        qr_5a2P8Gh6(R_0, tempY_0, R);
 800625c:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8006260:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8006264:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8006268:	4618      	mov	r0, r3
 800626a:	f004 f82b 	bl	800a2c4 <qr_5a2P8Gh6>
      }
    }

    iAcol_0 = 0;
 800626e:	2300      	movs	r3, #0
 8006270:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
    for (iAcol = 0; iAcol < 3; iAcol++) {
 8006274:	2300      	movs	r3, #0
 8006276:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 800627a:	e062      	b.n	8006342 <CSE_step+0x108a>
 800627c:	2001e910 	.word	0x2001e910
      CSE_DW.P[iAcol_0] = R[iAcol];
 8006280:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8006284:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006288:	00db      	lsls	r3, r3, #3
 800628a:	4413      	add	r3, r2
 800628c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006290:	48a5      	ldr	r0, [pc, #660]	; (8006528 <CSE_step+0x1270>)
 8006292:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8006296:	00c9      	lsls	r1, r1, #3
 8006298:	4401      	add	r1, r0
 800629a:	e9c1 2300 	strd	r2, r3, [r1]
      CSE_DW.P[iAcol_0 + 1] = R[iAcol + 3];
 800629e:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80062a2:	3303      	adds	r3, #3
 80062a4:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 80062a8:	1c51      	adds	r1, r2, #1
 80062aa:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80062ae:	00db      	lsls	r3, r3, #3
 80062b0:	4413      	add	r3, r2
 80062b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062b6:	489c      	ldr	r0, [pc, #624]	; (8006528 <CSE_step+0x1270>)
 80062b8:	00c9      	lsls	r1, r1, #3
 80062ba:	4401      	add	r1, r0
 80062bc:	e9c1 2300 	strd	r2, r3, [r1]
      CSE_DW.P[iAcol_0 + 2] = R[iAcol + 6];
 80062c0:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80062c4:	3306      	adds	r3, #6
 80062c6:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 80062ca:	1c91      	adds	r1, r2, #2
 80062cc:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80062d0:	00db      	lsls	r3, r3, #3
 80062d2:	4413      	add	r3, r2
 80062d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062d8:	4893      	ldr	r0, [pc, #588]	; (8006528 <CSE_step+0x1270>)
 80062da:	00c9      	lsls	r1, r1, #3
 80062dc:	4401      	add	r1, r0
 80062de:	e9c1 2300 	strd	r2, r3, [r1]
      CSE_DW.x[iAcol] += K[iAcol] * s_0;
 80062e2:	4a91      	ldr	r2, [pc, #580]	; (8006528 <CSE_step+0x1270>)
 80062e4:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80062e8:	3309      	adds	r3, #9
 80062ea:	00db      	lsls	r3, r3, #3
 80062ec:	4413      	add	r3, r2
 80062ee:	e9d3 8900 	ldrd	r8, r9, [r3]
 80062f2:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80062f6:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80062fa:	00db      	lsls	r3, r3, #3
 80062fc:	4413      	add	r3, r2
 80062fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006302:	f107 0308 	add.w	r3, r7, #8
 8006306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800630a:	f7fa f967 	bl	80005dc <__aeabi_dmul>
 800630e:	4602      	mov	r2, r0
 8006310:	460b      	mov	r3, r1
 8006312:	4640      	mov	r0, r8
 8006314:	4649      	mov	r1, r9
 8006316:	f7f9 ffab 	bl	8000270 <__adddf3>
 800631a:	4602      	mov	r2, r0
 800631c:	460b      	mov	r3, r1
 800631e:	4882      	ldr	r0, [pc, #520]	; (8006528 <CSE_step+0x1270>)
 8006320:	f8d7 12e4 	ldr.w	r1, [r7, #740]	; 0x2e4
 8006324:	3109      	adds	r1, #9
 8006326:	00c9      	lsls	r1, r1, #3
 8006328:	4401      	add	r1, r0
 800632a:	e9c1 2300 	strd	r2, r3, [r1]
      iAcol_0 += 3;
 800632e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006332:	3303      	adds	r3, #3
 8006334:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
    for (iAcol = 0; iAcol < 3; iAcol++) {
 8006338:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 800633c:	3301      	adds	r3, #1
 800633e:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8006342:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006346:	2b02      	cmp	r3, #2
 8006348:	dd9a      	ble.n	8006280 <CSE_step+0xfc8>
    }
  }

  CSE_Y.soc = CSE_DW.x[1] / CSE_DW.x[2];
 800634a:	4b77      	ldr	r3, [pc, #476]	; (8006528 <CSE_step+0x1270>)
 800634c:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8006350:	4b75      	ldr	r3, [pc, #468]	; (8006528 <CSE_step+0x1270>)
 8006352:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8006356:	f7fa fa6b 	bl	8000830 <__aeabi_ddiv>
 800635a:	4602      	mov	r2, r0
 800635c:	460b      	mov	r3, r1
 800635e:	4973      	ldr	r1, [pc, #460]	; (800652c <CSE_step+0x1274>)
 8006360:	e9c1 2300 	strd	r2, r3, [r1]
  CSE_Y.capacity = CSE_DW.x[2];
 8006364:	4b70      	ldr	r3, [pc, #448]	; (8006528 <CSE_step+0x1270>)
 8006366:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 800636a:	4970      	ldr	r1, [pc, #448]	; (800652c <CSE_step+0x1274>)
 800636c:	e9c1 2302 	strd	r2, r3, [r1, #8]
  CSE_S_x(CSE_DW.x, tempY);
 8006370:	f107 0310 	add.w	r3, r7, #16
 8006374:	4619      	mov	r1, r3
 8006376:	486e      	ldr	r0, [pc, #440]	; (8006530 <CSE_step+0x1278>)
 8006378:	f7fe fb26 	bl	80049c8 <CSE_S_x>
  for (iAcol_0 = 0; iAcol_0 < 9; iAcol_0++) {
 800637c:	2300      	movs	r3, #0
 800637e:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8006382:	e034      	b.n	80063ee <CSE_step+0x1136>
    s_0 = 0.0017320508075688774 * CSE_DW.P[iAcol_0];
 8006384:	4a68      	ldr	r2, [pc, #416]	; (8006528 <CSE_step+0x1270>)
 8006386:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800638a:	00db      	lsls	r3, r3, #3
 800638c:	4413      	add	r3, r2
 800638e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006392:	a363      	add	r3, pc, #396	; (adr r3, 8006520 <CSE_step+0x1268>)
 8006394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006398:	f7fa f920 	bl	80005dc <__aeabi_dmul>
 800639c:	4602      	mov	r2, r0
 800639e:	460b      	mov	r3, r1
 80063a0:	f107 0108 	add.w	r1, r7, #8
 80063a4:	e9c1 2300 	strd	r2, r3, [r1]
    X2state[iAcol_0] = s_0;
 80063a8:	f107 0308 	add.w	r3, r7, #8
 80063ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063b0:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 80063b4:	00c9      	lsls	r1, r1, #3
 80063b6:	f507 703c 	add.w	r0, r7, #752	; 0x2f0
 80063ba:	4401      	add	r1, r0
 80063bc:	39d0      	subs	r1, #208	; 0xd0
 80063be:	e9c1 2300 	strd	r2, r3, [r1]
    X2state[iAcol_0 + 9] = -s_0;
 80063c2:	f107 0308 	add.w	r3, r7, #8
 80063c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ca:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 80063ce:	3109      	adds	r1, #9
 80063d0:	4614      	mov	r4, r2
 80063d2:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80063d6:	00cb      	lsls	r3, r1, #3
 80063d8:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
 80063dc:	4413      	add	r3, r2
 80063de:	3bd0      	subs	r3, #208	; 0xd0
 80063e0:	e9c3 4500 	strd	r4, r5, [r3]
  for (iAcol_0 = 0; iAcol_0 < 9; iAcol_0++) {
 80063e4:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80063e8:	3301      	adds	r3, #1
 80063ea:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 80063ee:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80063f2:	2b08      	cmp	r3, #8
 80063f4:	ddc6      	ble.n	8006384 <CSE_step+0x10cc>
  }

  iAcol_0 = 0;
 80063f6:	2300      	movs	r3, #0
 80063f8:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
  for (iAcol = 0; iAcol < 6; iAcol++) {
 80063fc:	2300      	movs	r3, #0
 80063fe:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8006402:	e058      	b.n	80064b6 <CSE_step+0x11fe>
    X2state[iAcol_0] += CSE_DW.x[0];
 8006404:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006408:	00db      	lsls	r3, r3, #3
 800640a:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
 800640e:	4413      	add	r3, r2
 8006410:	3bd0      	subs	r3, #208	; 0xd0
 8006412:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006416:	4b44      	ldr	r3, [pc, #272]	; (8006528 <CSE_step+0x1270>)
 8006418:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800641c:	f7f9 ff28 	bl	8000270 <__adddf3>
 8006420:	4602      	mov	r2, r0
 8006422:	460b      	mov	r3, r1
 8006424:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8006428:	00c9      	lsls	r1, r1, #3
 800642a:	f507 703c 	add.w	r0, r7, #752	; 0x2f0
 800642e:	4401      	add	r1, r0
 8006430:	39d0      	subs	r1, #208	; 0xd0
 8006432:	e9c1 2300 	strd	r2, r3, [r1]
    X2state[iAcol_0 + 1] += CSE_DW.x[1];
 8006436:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800643a:	3301      	adds	r3, #1
 800643c:	00db      	lsls	r3, r3, #3
 800643e:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
 8006442:	4413      	add	r3, r2
 8006444:	3bd0      	subs	r3, #208	; 0xd0
 8006446:	e9d3 0100 	ldrd	r0, r1, [r3]
 800644a:	4b37      	ldr	r3, [pc, #220]	; (8006528 <CSE_step+0x1270>)
 800644c:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8006450:	f8d7 42e0 	ldr.w	r4, [r7, #736]	; 0x2e0
 8006454:	3401      	adds	r4, #1
 8006456:	f7f9 ff0b 	bl	8000270 <__adddf3>
 800645a:	4602      	mov	r2, r0
 800645c:	460b      	mov	r3, r1
 800645e:	00e1      	lsls	r1, r4, #3
 8006460:	f507 703c 	add.w	r0, r7, #752	; 0x2f0
 8006464:	4401      	add	r1, r0
 8006466:	39d0      	subs	r1, #208	; 0xd0
 8006468:	e9c1 2300 	strd	r2, r3, [r1]
    X2state[iAcol_0 + 2] += CSE_DW.x[2];
 800646c:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006470:	3302      	adds	r3, #2
 8006472:	00db      	lsls	r3, r3, #3
 8006474:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
 8006478:	4413      	add	r3, r2
 800647a:	3bd0      	subs	r3, #208	; 0xd0
 800647c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006480:	4b29      	ldr	r3, [pc, #164]	; (8006528 <CSE_step+0x1270>)
 8006482:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8006486:	f8d7 42e0 	ldr.w	r4, [r7, #736]	; 0x2e0
 800648a:	3402      	adds	r4, #2
 800648c:	f7f9 fef0 	bl	8000270 <__adddf3>
 8006490:	4602      	mov	r2, r0
 8006492:	460b      	mov	r3, r1
 8006494:	00e1      	lsls	r1, r4, #3
 8006496:	f507 703c 	add.w	r0, r7, #752	; 0x2f0
 800649a:	4401      	add	r1, r0
 800649c:	39d0      	subs	r1, #208	; 0xd0
 800649e:	e9c1 2300 	strd	r2, r3, [r1]
    iAcol_0 += 3;
 80064a2:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80064a6:	3303      	adds	r3, #3
 80064a8:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
  for (iAcol = 0; iAcol < 6; iAcol++) {
 80064ac:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80064b0:	3301      	adds	r3, #1
 80064b2:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 80064b6:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80064ba:	2b05      	cmp	r3, #5
 80064bc:	dda2      	ble.n	8006404 <CSE_step+0x114c>
  }

  iAcol_0 = 0;
 80064be:	2300      	movs	r3, #0
 80064c0:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
  for (iAcol = 0; iAcol < 6; iAcol++) {
 80064c4:	2300      	movs	r3, #0
 80064c6:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 80064ca:	e018      	b.n	80064fe <CSE_step+0x1246>
    CSE_S_x(&X2state[iAcol_0], &Y2[iAcol_0]);
 80064cc:	f507 7208 	add.w	r2, r7, #544	; 0x220
 80064d0:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80064d4:	00db      	lsls	r3, r3, #3
 80064d6:	18d0      	adds	r0, r2, r3
 80064d8:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 80064dc:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80064e0:	00db      	lsls	r3, r3, #3
 80064e2:	4413      	add	r3, r2
 80064e4:	4619      	mov	r1, r3
 80064e6:	f7fe fa6f 	bl	80049c8 <CSE_S_x>
    iAcol_0 += 3;
 80064ea:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80064ee:	3303      	adds	r3, #3
 80064f0:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
  for (iAcol = 0; iAcol < 6; iAcol++) {
 80064f4:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80064f8:	3301      	adds	r3, #1
 80064fa:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 80064fe:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006502:	2b05      	cmp	r3, #5
 8006504:	dde2      	ble.n	80064cc <CSE_step+0x1214>
  }

  CSE_S_x(CSE_DW.x, tempY);
 8006506:	f107 0310 	add.w	r3, r7, #16
 800650a:	4619      	mov	r1, r3
 800650c:	4808      	ldr	r0, [pc, #32]	; (8006530 <CSE_step+0x1278>)
 800650e:	f7fe fa5b 	bl	80049c8 <CSE_S_x>
  for (iAcol_0 = 0; iAcol_0 < 3; iAcol_0++) {
 8006512:	2300      	movs	r3, #0
 8006514:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8006518:	e021      	b.n	800655e <CSE_step+0x12a6>
 800651a:	bf00      	nop
 800651c:	f3af 8000 	nop.w
 8006520:	64b487da 	.word	0x64b487da
 8006524:	3f5c60bf 	.word	0x3f5c60bf
 8006528:	2001bde8 	.word	0x2001bde8
 800652c:	2001bdc8 	.word	0x2001bdc8
 8006530:	2001be30 	.word	0x2001be30
    C[iAcol_0] = CSE_DW.x[iAcol_0];
 8006534:	4ab8      	ldr	r2, [pc, #736]	; (8006818 <CSE_step+0x1560>)
 8006536:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800653a:	3309      	adds	r3, #9
 800653c:	00db      	lsls	r3, r3, #3
 800653e:	4413      	add	r3, r2
 8006540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006544:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8006548:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 800654c:	00c9      	lsls	r1, r1, #3
 800654e:	4401      	add	r1, r0
 8006550:	e9c1 2300 	strd	r2, r3, [r1]
  for (iAcol_0 = 0; iAcol_0 < 3; iAcol_0++) {
 8006554:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006558:	3301      	adds	r3, #1
 800655a:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 800655e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006562:	2b02      	cmp	r3, #2
 8006564:	dde6      	ble.n	8006534 <CSE_step+0x127c>
  }

  UTMeanCovSqrt_C2vgLQ4W(Wmean, Wcov, -999999.0, tempY, Y2, C, X2state, CSE_DW.x,
 8006566:	f507 71c8 	add.w	r1, r7, #400	; 0x190
 800656a:	f107 0210 	add.w	r2, r7, #16
 800656e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006572:	9304      	str	r3, [sp, #16]
 8006574:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8006578:	9303      	str	r3, [sp, #12]
 800657a:	4ba8      	ldr	r3, [pc, #672]	; (800681c <CSE_step+0x1564>)
 800657c:	9302      	str	r3, [sp, #8]
 800657e:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8006582:	9301      	str	r3, [sp, #4]
 8006584:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006588:	9300      	str	r3, [sp, #0]
 800658a:	460b      	mov	r3, r1
 800658c:	ed9f 0ba0 	vldr	d0, [pc, #640]	; 8006810 <CSE_step+0x1558>
 8006590:	49a3      	ldr	r1, [pc, #652]	; (8006820 <CSE_step+0x1568>)
 8006592:	48a4      	ldr	r0, [pc, #656]	; (8006824 <CSE_step+0x156c>)
 8006594:	f001 fc66 	bl	8007e64 <UTMeanCovSqrt_C2vgLQ4W>
    Ss, R);
  memset(&R[0], 0, 9U * sizeof(real_T));
 8006598:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800659c:	2248      	movs	r2, #72	; 0x48
 800659e:	2100      	movs	r1, #0
 80065a0:	4618      	mov	r0, r3
 80065a2:	f013 fe61 	bl	801a268 <memset>
  R[0] = 1.0;
 80065a6:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 80065aa:	f04f 0200 	mov.w	r2, #0
 80065ae:	4b9e      	ldr	r3, [pc, #632]	; (8006828 <CSE_step+0x1570>)
 80065b0:	e9c1 2300 	strd	r2, r3, [r1]
  R[4] = 1.0;
 80065b4:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 80065b8:	f04f 0200 	mov.w	r2, #0
 80065bc:	4b9a      	ldr	r3, [pc, #616]	; (8006828 <CSE_step+0x1570>)
 80065be:	e9c1 2308 	strd	r2, r3, [r1, #32]
  R[8] = 1.0;
 80065c2:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 80065c6:	f04f 0200 	mov.w	r2, #0
 80065ca:	4b97      	ldr	r3, [pc, #604]	; (8006828 <CSE_step+0x1570>)
 80065cc:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
  for (iAcol_0 = 0; iAcol_0 < 3; iAcol_0++) {
 80065d0:	2300      	movs	r3, #0
 80065d2:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 80065d6:	e07e      	b.n	80066d6 <CSE_step+0x141e>
    coffset = iAcol_0 * 3;
 80065d8:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 80065dc:	4613      	mov	r3, r2
 80065de:	005b      	lsls	r3, r3, #1
 80065e0:	4413      	add	r3, r2
 80065e2:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
    for (iAcol = 0; iAcol < 3; iAcol++) {
 80065e6:	2300      	movs	r3, #0
 80065e8:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 80065ec:	e06a      	b.n	80066c4 <CSE_step+0x140c>
      aoffset = iAcol * 3;
 80065ee:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 80065f2:	4613      	mov	r3, r2
 80065f4:	005b      	lsls	r3, r3, #1
 80065f6:	4413      	add	r3, r2
 80065f8:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
      R_0[coffset + iAcol] = (Ss[aoffset + 1] * R[iAcol_0 + 3] + Ss[aoffset] *
 80065fc:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8006600:	3301      	adds	r3, #1
 8006602:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8006606:	00db      	lsls	r3, r3, #3
 8006608:	4413      	add	r3, r2
 800660a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800660e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006612:	3303      	adds	r3, #3
 8006614:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8006618:	00db      	lsls	r3, r3, #3
 800661a:	4413      	add	r3, r2
 800661c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006620:	f7f9 ffdc 	bl	80005dc <__aeabi_dmul>
 8006624:	4602      	mov	r2, r0
 8006626:	460b      	mov	r3, r1
 8006628:	4614      	mov	r4, r2
 800662a:	461d      	mov	r5, r3
 800662c:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8006630:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8006634:	00db      	lsls	r3, r3, #3
 8006636:	4413      	add	r3, r2
 8006638:	e9d3 0100 	ldrd	r0, r1, [r3]
        R[iAcol_0]) + Ss[aoffset + 2] * R[iAcol_0 + 6];
 800663c:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8006640:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006644:	00db      	lsls	r3, r3, #3
 8006646:	4413      	add	r3, r2
 8006648:	e9d3 2300 	ldrd	r2, r3, [r3]
      R_0[coffset + iAcol] = (Ss[aoffset + 1] * R[iAcol_0 + 3] + Ss[aoffset] *
 800664c:	f7f9 ffc6 	bl	80005dc <__aeabi_dmul>
 8006650:	4602      	mov	r2, r0
 8006652:	460b      	mov	r3, r1
 8006654:	4620      	mov	r0, r4
 8006656:	4629      	mov	r1, r5
 8006658:	f7f9 fe0a 	bl	8000270 <__adddf3>
 800665c:	4602      	mov	r2, r0
 800665e:	460b      	mov	r3, r1
 8006660:	4690      	mov	r8, r2
 8006662:	4699      	mov	r9, r3
        R[iAcol_0]) + Ss[aoffset + 2] * R[iAcol_0 + 6];
 8006664:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8006668:	3302      	adds	r3, #2
 800666a:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 800666e:	00db      	lsls	r3, r3, #3
 8006670:	4413      	add	r3, r2
 8006672:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006676:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800667a:	3306      	adds	r3, #6
 800667c:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8006680:	00db      	lsls	r3, r3, #3
 8006682:	4413      	add	r3, r2
 8006684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006688:	f7f9 ffa8 	bl	80005dc <__aeabi_dmul>
 800668c:	4602      	mov	r2, r0
 800668e:	460b      	mov	r3, r1
 8006690:	4610      	mov	r0, r2
 8006692:	4619      	mov	r1, r3
      R_0[coffset + iAcol] = (Ss[aoffset + 1] * R[iAcol_0 + 3] + Ss[aoffset] *
 8006694:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 8006698:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 800669c:	18d4      	adds	r4, r2, r3
        R[iAcol_0]) + Ss[aoffset + 2] * R[iAcol_0 + 6];
 800669e:	4602      	mov	r2, r0
 80066a0:	460b      	mov	r3, r1
 80066a2:	4640      	mov	r0, r8
 80066a4:	4649      	mov	r1, r9
 80066a6:	f7f9 fde3 	bl	8000270 <__adddf3>
 80066aa:	4602      	mov	r2, r0
 80066ac:	460b      	mov	r3, r1
      R_0[coffset + iAcol] = (Ss[aoffset + 1] * R[iAcol_0 + 3] + Ss[aoffset] *
 80066ae:	f507 7080 	add.w	r0, r7, #256	; 0x100
 80066b2:	00e1      	lsls	r1, r4, #3
 80066b4:	4401      	add	r1, r0
 80066b6:	e9c1 2300 	strd	r2, r3, [r1]
    for (iAcol = 0; iAcol < 3; iAcol++) {
 80066ba:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80066be:	3301      	adds	r3, #1
 80066c0:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 80066c4:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80066c8:	2b02      	cmp	r3, #2
 80066ca:	dd90      	ble.n	80065ee <CSE_step+0x1336>
  for (iAcol_0 = 0; iAcol_0 < 3; iAcol_0++) {
 80066cc:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80066d0:	3301      	adds	r3, #1
 80066d2:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 80066d6:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80066da:	2b02      	cmp	r3, #2
 80066dc:	f77f af7c 	ble.w	80065d8 <CSE_step+0x1320>
    }
  }

  iAcol_0 = 0;
 80066e0:	2300      	movs	r3, #0
 80066e2:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
  iAcol = 0;
 80066e6:	2300      	movs	r3, #0
 80066e8:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
  for (coffset = 0; coffset < 3; coffset++) {
 80066ec:	2300      	movs	r3, #0
 80066ee:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
 80066f2:	e077      	b.n	80067e4 <CSE_step+0x152c>
    Y2[iAcol_0] = R_0[iAcol];
 80066f4:	f507 7280 	add.w	r2, r7, #256	; 0x100
 80066f8:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80066fc:	00db      	lsls	r3, r3, #3
 80066fe:	4413      	add	r3, r2
 8006700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006704:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 8006708:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 800670c:	00c9      	lsls	r1, r1, #3
 800670e:	4401      	add	r1, r0
 8006710:	e9c1 2300 	strd	r2, r3, [r1]
    Y2[iAcol_0 + 3] = CSE_P.Q_Value[coffset];
 8006714:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006718:	1cd9      	adds	r1, r3, #3
 800671a:	4a44      	ldr	r2, [pc, #272]	; (800682c <CSE_step+0x1574>)
 800671c:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8006720:	3344      	adds	r3, #68	; 0x44
 8006722:	00db      	lsls	r3, r3, #3
 8006724:	4413      	add	r3, r2
 8006726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800672a:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 800672e:	00c9      	lsls	r1, r1, #3
 8006730:	4401      	add	r1, r0
 8006732:	e9c1 2300 	strd	r2, r3, [r1]
    Y2[iAcol_0 + 1] = R_0[iAcol + 1];
 8006736:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 800673a:	3301      	adds	r3, #1
 800673c:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8006740:	1c51      	adds	r1, r2, #1
 8006742:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8006746:	00db      	lsls	r3, r3, #3
 8006748:	4413      	add	r3, r2
 800674a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800674e:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 8006752:	00c9      	lsls	r1, r1, #3
 8006754:	4401      	add	r1, r0
 8006756:	e9c1 2300 	strd	r2, r3, [r1]
    Y2[iAcol_0 + 4] = CSE_P.Q_Value[coffset + 3];
 800675a:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 800675e:	3303      	adds	r3, #3
 8006760:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8006764:	1d11      	adds	r1, r2, #4
 8006766:	4a31      	ldr	r2, [pc, #196]	; (800682c <CSE_step+0x1574>)
 8006768:	3344      	adds	r3, #68	; 0x44
 800676a:	00db      	lsls	r3, r3, #3
 800676c:	4413      	add	r3, r2
 800676e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006772:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 8006776:	00c9      	lsls	r1, r1, #3
 8006778:	4401      	add	r1, r0
 800677a:	e9c1 2300 	strd	r2, r3, [r1]
    Y2[iAcol_0 + 2] = R_0[iAcol + 2];
 800677e:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006782:	3302      	adds	r3, #2
 8006784:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8006788:	1c91      	adds	r1, r2, #2
 800678a:	f507 7280 	add.w	r2, r7, #256	; 0x100
 800678e:	00db      	lsls	r3, r3, #3
 8006790:	4413      	add	r3, r2
 8006792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006796:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 800679a:	00c9      	lsls	r1, r1, #3
 800679c:	4401      	add	r1, r0
 800679e:	e9c1 2300 	strd	r2, r3, [r1]
    Y2[iAcol_0 + 5] = CSE_P.Q_Value[coffset + 6];
 80067a2:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 80067a6:	3306      	adds	r3, #6
 80067a8:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 80067ac:	1d51      	adds	r1, r2, #5
 80067ae:	4a1f      	ldr	r2, [pc, #124]	; (800682c <CSE_step+0x1574>)
 80067b0:	3344      	adds	r3, #68	; 0x44
 80067b2:	00db      	lsls	r3, r3, #3
 80067b4:	4413      	add	r3, r2
 80067b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ba:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 80067be:	00c9      	lsls	r1, r1, #3
 80067c0:	4401      	add	r1, r0
 80067c2:	e9c1 2300 	strd	r2, r3, [r1]
    iAcol_0 += 6;
 80067c6:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80067ca:	3306      	adds	r3, #6
 80067cc:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
    iAcol += 3;
 80067d0:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80067d4:	3303      	adds	r3, #3
 80067d6:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
  for (coffset = 0; coffset < 3; coffset++) {
 80067da:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 80067de:	3301      	adds	r3, #1
 80067e0:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
 80067e4:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 80067e8:	2b02      	cmp	r3, #2
 80067ea:	dd83      	ble.n	80066f4 <CSE_step+0x143c>
  }

  qr_DvOBrgQi(Y2, X2state, R);
 80067ec:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80067f0:	f507 7108 	add.w	r1, r7, #544	; 0x220
 80067f4:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80067f8:	4618      	mov	r0, r3
 80067fa:	f004 fceb 	bl	800b1d4 <qr_DvOBrgQi>
  iAcol_0 = 0;
 80067fe:	2300      	movs	r3, #0
 8006800:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
  for (iAcol = 0; iAcol < 3; iAcol++) {
 8006804:	2300      	movs	r3, #0
 8006806:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 800680a:	e04c      	b.n	80068a6 <CSE_step+0x15ee>
 800680c:	f3af 8000 	nop.w
 8006810:	00000000 	.word	0x00000000
 8006814:	c12e847e 	.word	0xc12e847e
 8006818:	2001bde8 	.word	0x2001bde8
 800681c:	2001be30 	.word	0x2001be30
 8006820:	0801b5f0 	.word	0x0801b5f0
 8006824:	0801b5e0 	.word	0x0801b5e0
 8006828:	3ff00000 	.word	0x3ff00000
 800682c:	20000008 	.word	0x20000008
    CSE_DW.P[iAcol_0] = R[iAcol];
 8006830:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8006834:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006838:	00db      	lsls	r3, r3, #3
 800683a:	4413      	add	r3, r2
 800683c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006840:	481e      	ldr	r0, [pc, #120]	; (80068bc <CSE_step+0x1604>)
 8006842:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8006846:	00c9      	lsls	r1, r1, #3
 8006848:	4401      	add	r1, r0
 800684a:	e9c1 2300 	strd	r2, r3, [r1]
    CSE_DW.P[iAcol_0 + 1] = R[iAcol + 3];
 800684e:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006852:	3303      	adds	r3, #3
 8006854:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8006858:	1c51      	adds	r1, r2, #1
 800685a:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800685e:	00db      	lsls	r3, r3, #3
 8006860:	4413      	add	r3, r2
 8006862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006866:	4815      	ldr	r0, [pc, #84]	; (80068bc <CSE_step+0x1604>)
 8006868:	00c9      	lsls	r1, r1, #3
 800686a:	4401      	add	r1, r0
 800686c:	e9c1 2300 	strd	r2, r3, [r1]
    CSE_DW.P[iAcol_0 + 2] = R[iAcol + 6];
 8006870:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006874:	3306      	adds	r3, #6
 8006876:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 800687a:	1c91      	adds	r1, r2, #2
 800687c:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8006880:	00db      	lsls	r3, r3, #3
 8006882:	4413      	add	r3, r2
 8006884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006888:	480c      	ldr	r0, [pc, #48]	; (80068bc <CSE_step+0x1604>)
 800688a:	00c9      	lsls	r1, r1, #3
 800688c:	4401      	add	r1, r0
 800688e:	e9c1 2300 	strd	r2, r3, [r1]
    iAcol_0 += 3;
 8006892:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006896:	3303      	adds	r3, #3
 8006898:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
  for (iAcol = 0; iAcol < 3; iAcol++) {
 800689c:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80068a0:	3301      	adds	r3, #1
 80068a2:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 80068a6:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80068aa:	2b02      	cmp	r3, #2
 80068ac:	ddc0      	ble.n	8006830 <CSE_step+0x1578>
  }
}
 80068ae:	bf00      	nop
 80068b0:	bf00      	nop
 80068b2:	f507 773d 	add.w	r7, r7, #756	; 0x2f4
 80068b6:	46bd      	mov	sp, r7
 80068b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80068bc:	2001bde8 	.word	0x2001bde8

080068c0 <CSE_initialize>:

void CSE_initialize(void)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	af00      	add	r7, sp, #0
  rt_InitInfAndNaN(sizeof(real_T));
 80068c4:	2008      	movs	r0, #8
 80068c6:	f006 f805 	bl	800c8d4 <rt_InitInfAndNaN>
  memcpy(&CSE_DW.P[0], &CSE_P.DataStoreMemoryP_InitialValue[0], 9U * sizeof
 80068ca:	2248      	movs	r2, #72	; 0x48
 80068cc:	490b      	ldr	r1, [pc, #44]	; (80068fc <CSE_initialize+0x3c>)
 80068ce:	480c      	ldr	r0, [pc, #48]	; (8006900 <CSE_initialize+0x40>)
 80068d0:	f013 fcbc 	bl	801a24c <memcpy>
         (real_T));
  CSE_DW.x[0] = CSE_P.DataStoreMemoryx_InitialValue[0];
 80068d4:	4b0b      	ldr	r3, [pc, #44]	; (8006904 <CSE_initialize+0x44>)
 80068d6:	e9d3 23ae 	ldrd	r2, r3, [r3, #696]	; 0x2b8
 80068da:	4909      	ldr	r1, [pc, #36]	; (8006900 <CSE_initialize+0x40>)
 80068dc:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
  CSE_DW.x[1] = CSE_P.DataStoreMemoryx_InitialValue[1];
 80068e0:	4b08      	ldr	r3, [pc, #32]	; (8006904 <CSE_initialize+0x44>)
 80068e2:	e9d3 23b0 	ldrd	r2, r3, [r3, #704]	; 0x2c0
 80068e6:	4906      	ldr	r1, [pc, #24]	; (8006900 <CSE_initialize+0x40>)
 80068e8:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
  CSE_DW.x[2] = CSE_P.DataStoreMemoryx_InitialValue[2];
 80068ec:	4b05      	ldr	r3, [pc, #20]	; (8006904 <CSE_initialize+0x44>)
 80068ee:	e9d3 23b2 	ldrd	r2, r3, [r3, #712]	; 0x2c8
 80068f2:	4903      	ldr	r1, [pc, #12]	; (8006900 <CSE_initialize+0x40>)
 80068f4:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
}
 80068f8:	bf00      	nop
 80068fa:	bd80      	pop	{r7, pc}
 80068fc:	20000278 	.word	0x20000278
 8006900:	2001bde8 	.word	0x2001bde8
 8006904:	20000008 	.word	0x20000008

08006908 <SIM0_step>:
ExtU_SIM0_T SIM0_U;
ExtY_SIM0_T SIM0_Y;
static RT_MODEL_SIM0_T SIM0_M_;
RT_MODEL_SIM0_T *const SIM0_M = &SIM0_M_;
void SIM0_step(void)
{
 8006908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800690c:	f5ad 5da0 	sub.w	sp, sp, #5120	; 0x1400
 8006910:	b087      	sub	sp, #28
 8006912:	af00      	add	r7, sp, #0
  int32_T i;
  int32_T iU;
  int32_T rtb_is_charge;
  boolean_T rtb_Logic_idx_0;
  boolean_T rtb_Logic_p_idx_0;
  rtb_Memory20 = SIM0_DW.Memory20_PreviousInput;
 8006914:	4b20      	ldr	r3, [pc, #128]	; (8006998 <SIM0_step+0x90>)
 8006916:	f603 0308 	addw	r3, r3, #2056	; 0x808
 800691a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800691e:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 8006922:	f101 0118 	add.w	r1, r1, #24
 8006926:	e9c1 2300 	strd	r2, r3, [r1]
  rtb_Exp = exp(SIM0_P.Cap_det / (SIM0_P.C_r * 3600.0) *
 800692a:	4b1c      	ldr	r3, [pc, #112]	; (800699c <SIM0_step+0x94>)
 800692c:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
 8006930:	4b1a      	ldr	r3, [pc, #104]	; (800699c <SIM0_step+0x94>)
 8006932:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006936:	a316      	add	r3, pc, #88	; (adr r3, 8006990 <SIM0_step+0x88>)
 8006938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800693c:	f7f9 fe4e 	bl	80005dc <__aeabi_dmul>
 8006940:	4602      	mov	r2, r0
 8006942:	460b      	mov	r3, r1
 8006944:	4650      	mov	r0, sl
 8006946:	4659      	mov	r1, fp
 8006948:	f7f9 ff72 	bl	8000830 <__aeabi_ddiv>
 800694c:	4602      	mov	r2, r0
 800694e:	460b      	mov	r3, r1
 8006950:	4610      	mov	r0, r2
 8006952:	4619      	mov	r1, r3
                SIM0_DW.Memory9_PreviousInput);
 8006954:	4b10      	ldr	r3, [pc, #64]	; (8006998 <SIM0_step+0x90>)
 8006956:	f603 73f8 	addw	r3, r3, #4088	; 0xff8
 800695a:	e9d3 2300 	ldrd	r2, r3, [r3]
  rtb_Exp = exp(SIM0_P.Cap_det / (SIM0_P.C_r * 3600.0) *
 800695e:	f7f9 fe3d 	bl	80005dc <__aeabi_dmul>
 8006962:	4602      	mov	r2, r0
 8006964:	460b      	mov	r3, r1
 8006966:	ec43 2b17 	vmov	d7, r2, r3
 800696a:	eeb0 0a47 	vmov.f32	s0, s14
 800696e:	eef0 0a67 	vmov.f32	s1, s15
 8006972:	f013 fd99 	bl	801a4a8 <exp>
 8006976:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 800697a:	f103 0308 	add.w	r3, r3, #8
 800697e:	ed83 0b00 	vstr	d0, [r3]
  for (i = 0; i < 126; i++) {
 8006982:	2300      	movs	r3, #0
 8006984:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 8006988:	f102 020c 	add.w	r2, r2, #12
 800698c:	6013      	str	r3, [r2, #0]
 800698e:	e1df      	b.n	8006d50 <SIM0_step+0x448>
 8006990:	00000000 	.word	0x00000000
 8006994:	40ac2000 	.word	0x40ac2000
 8006998:	2001be48 	.word	0x2001be48
 800699c:	200002e0 	.word	0x200002e0
    rtb_Memory15[i] = SIM0_DW.Memory15_PreviousInput[i];
 80069a0:	4aca      	ldr	r2, [pc, #808]	; (8006ccc <SIM0_step+0x3c4>)
 80069a2:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 80069a6:	f103 030c 	add.w	r3, r3, #12
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	3305      	adds	r3, #5
 80069ae:	00db      	lsls	r3, r3, #3
 80069b0:	4413      	add	r3, r2
 80069b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069b6:	f607 70c8 	addw	r0, r7, #4040	; 0xfc8
 80069ba:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 80069be:	f101 010c 	add.w	r1, r1, #12
 80069c2:	6809      	ldr	r1, [r1, #0]
 80069c4:	00c9      	lsls	r1, r1, #3
 80069c6:	4401      	add	r1, r0
 80069c8:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_Memory22 = SIM0_DW.Memory_PreviousInput[i] /
 80069cc:	4abf      	ldr	r2, [pc, #764]	; (8006ccc <SIM0_step+0x3c4>)
 80069ce:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 80069d2:	f103 030c 	add.w	r3, r3, #12
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f203 1303 	addw	r3, r3, #259	; 0x103
 80069dc:	00db      	lsls	r3, r3, #3
 80069de:	4413      	add	r3, r2
 80069e0:	e9d3 0100 	ldrd	r0, r1, [r3]
      SIM0_DW.Memory10_PreviousInput[i];
 80069e4:	4ab9      	ldr	r2, [pc, #740]	; (8006ccc <SIM0_step+0x3c4>)
 80069e6:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 80069ea:	f103 030c 	add.w	r3, r3, #12
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f203 1381 	addw	r3, r3, #385	; 0x181
 80069f4:	00db      	lsls	r3, r3, #3
 80069f6:	4413      	add	r3, r2
 80069f8:	e9d3 2300 	ldrd	r2, r3, [r3]
    rtb_Memory22 = SIM0_DW.Memory_PreviousInput[i] /
 80069fc:	f7f9 ff18 	bl	8000830 <__aeabi_ddiv>
 8006a00:	4602      	mov	r2, r0
 8006a02:	460b      	mov	r3, r1
 8006a04:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 8006a08:	f101 0108 	add.w	r1, r1, #8
 8006a0c:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_Product1_n = look1_binlxpw(rtb_Memory22, SIM0_P.soc, SIM0_P.Rs, 12U);
 8006a10:	220c      	movs	r2, #12
 8006a12:	49af      	ldr	r1, [pc, #700]	; (8006cd0 <SIM0_step+0x3c8>)
 8006a14:	48af      	ldr	r0, [pc, #700]	; (8006cd4 <SIM0_step+0x3cc>)
 8006a16:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8006a1a:	f103 0308 	add.w	r3, r3, #8
 8006a1e:	ed93 0b00 	vldr	d0, [r3]
 8006a22:	f003 fb65 	bl	800a0f0 <look1_binlxpw>
 8006a26:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8006a2a:	ed83 0b00 	vstr	d0, [r3]
    rtb_is_drive = look1_binlxpw(rtb_Memory22, SIM0_P.soc, SIM0_P.tau, 12U);
 8006a2e:	220c      	movs	r2, #12
 8006a30:	49a9      	ldr	r1, [pc, #676]	; (8006cd8 <SIM0_step+0x3d0>)
 8006a32:	48a8      	ldr	r0, [pc, #672]	; (8006cd4 <SIM0_step+0x3cc>)
 8006a34:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8006a38:	f103 0308 	add.w	r3, r3, #8
 8006a3c:	ed93 0b00 	vldr	d0, [r3]
 8006a40:	f003 fb56 	bl	800a0f0 <look1_binlxpw>
 8006a44:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8006a48:	f103 0318 	add.w	r3, r3, #24
 8006a4c:	ed83 0b00 	vstr	d0, [r3]
    rtb_Product9 = rtb_Product1_n * rtb_is_drive;
 8006a50:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8006a54:	f103 0318 	add.w	r3, r3, #24
 8006a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a5c:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 8006a60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a64:	f7f9 fdba 	bl	80005dc <__aeabi_dmul>
 8006a68:	4602      	mov	r2, r0
 8006a6a:	460b      	mov	r3, r1
 8006a6c:	f507 519d 	add.w	r1, r7, #5024	; 0x13a0
 8006a70:	f101 0118 	add.w	r1, r1, #24
 8006a74:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_Product1_n = (rtb_Product1_n + look1_binlxpw(rtb_Memory22, SIM0_P.soc,
 8006a78:	220c      	movs	r2, #12
 8006a7a:	4998      	ldr	r1, [pc, #608]	; (8006cdc <SIM0_step+0x3d4>)
 8006a7c:	4895      	ldr	r0, [pc, #596]	; (8006cd4 <SIM0_step+0x3cc>)
 8006a7e:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8006a82:	f103 0308 	add.w	r3, r3, #8
 8006a86:	ed93 0b00 	vldr	d0, [r3]
 8006a8a:	f003 fb31 	bl	800a0f0 <look1_binlxpw>
 8006a8e:	ec51 0b10 	vmov	r0, r1, d0
 8006a92:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8006a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a9a:	f7f9 fbe9 	bl	8000270 <__adddf3>
 8006a9e:	4602      	mov	r2, r0
 8006aa0:	460b      	mov	r3, r1
 8006aa2:	4610      	mov	r0, r2
 8006aa4:	4619      	mov	r1, r3
      SIM0_P.Rp, 12U)) * SIM0_P.Ts;
 8006aa6:	4b8e      	ldr	r3, [pc, #568]	; (8006ce0 <SIM0_step+0x3d8>)
 8006aa8:	e9d3 233c 	ldrd	r2, r3, [r3, #240]	; 0xf0
    rtb_Product1_n = (rtb_Product1_n + look1_binlxpw(rtb_Memory22, SIM0_P.soc,
 8006aac:	f7f9 fd96 	bl	80005dc <__aeabi_dmul>
 8006ab0:	4602      	mov	r2, r0
 8006ab2:	460b      	mov	r3, r1
 8006ab4:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 8006ab8:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_Product1_n = (((2.0 * rtb_Product9 + rtb_Product1_n) * rtb_Memory20 +
 8006abc:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 8006ac0:	f103 0318 	add.w	r3, r3, #24
 8006ac4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006ac8:	4602      	mov	r2, r0
 8006aca:	460b      	mov	r3, r1
 8006acc:	f7f9 fbd0 	bl	8000270 <__adddf3>
 8006ad0:	4602      	mov	r2, r0
 8006ad2:	460b      	mov	r3, r1
 8006ad4:	4610      	mov	r0, r2
 8006ad6:	4619      	mov	r1, r3
 8006ad8:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8006adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ae0:	f7f9 fbc6 	bl	8000270 <__adddf3>
 8006ae4:	4602      	mov	r2, r0
 8006ae6:	460b      	mov	r3, r1
 8006ae8:	4610      	mov	r0, r2
 8006aea:	4619      	mov	r1, r3
 8006aec:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8006af0:	f103 0318 	add.w	r3, r3, #24
 8006af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006af8:	f7f9 fd70 	bl	80005dc <__aeabi_dmul>
 8006afc:	4602      	mov	r2, r0
 8006afe:	460b      	mov	r3, r1
 8006b00:	4692      	mov	sl, r2
 8006b02:	469b      	mov	fp, r3
                       (rtb_Product1_n - 2.0 * rtb_Product9) *
 8006b04:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 8006b08:	f103 0318 	add.w	r3, r3, #24
 8006b0c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006b10:	4602      	mov	r2, r0
 8006b12:	460b      	mov	r3, r1
 8006b14:	f7f9 fbac 	bl	8000270 <__adddf3>
 8006b18:	4602      	mov	r2, r0
 8006b1a:	460b      	mov	r3, r1
 8006b1c:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 8006b20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b24:	f7f9 fba2 	bl	800026c <__aeabi_dsub>
 8006b28:	4602      	mov	r2, r0
 8006b2a:	460b      	mov	r3, r1
 8006b2c:	4610      	mov	r0, r2
 8006b2e:	4619      	mov	r1, r3
                       SIM0_DW.Memory11_PreviousInput) - (SIM0_P.Ts - 2.0 *
 8006b30:	4b66      	ldr	r3, [pc, #408]	; (8006ccc <SIM0_step+0x3c4>)
 8006b32:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 8006b36:	e9d3 2300 	ldrd	r2, r3, [r3]
                       (rtb_Product1_n - 2.0 * rtb_Product9) *
 8006b3a:	f7f9 fd4f 	bl	80005dc <__aeabi_dmul>
 8006b3e:	4602      	mov	r2, r0
 8006b40:	460b      	mov	r3, r1
    rtb_Product1_n = (((2.0 * rtb_Product9 + rtb_Product1_n) * rtb_Memory20 +
 8006b42:	4650      	mov	r0, sl
 8006b44:	4659      	mov	r1, fp
 8006b46:	f7f9 fb93 	bl	8000270 <__adddf3>
 8006b4a:	4602      	mov	r2, r0
 8006b4c:	460b      	mov	r3, r1
 8006b4e:	e9c7 2300 	strd	r2, r3, [r7]
                       SIM0_DW.Memory11_PreviousInput) - (SIM0_P.Ts - 2.0 *
 8006b52:	4b63      	ldr	r3, [pc, #396]	; (8006ce0 <SIM0_step+0x3d8>)
 8006b54:	e9d3 ab3c 	ldrd	sl, fp, [r3, #240]	; 0xf0
 8006b58:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8006b5c:	f103 0318 	add.w	r3, r3, #24
 8006b60:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006b64:	4602      	mov	r2, r0
 8006b66:	460b      	mov	r3, r1
 8006b68:	f7f9 fb82 	bl	8000270 <__adddf3>
 8006b6c:	4602      	mov	r2, r0
 8006b6e:	460b      	mov	r3, r1
 8006b70:	4650      	mov	r0, sl
 8006b72:	4659      	mov	r1, fp
 8006b74:	f7f9 fb7a 	bl	800026c <__aeabi_dsub>
 8006b78:	4602      	mov	r2, r0
 8006b7a:	460b      	mov	r3, r1
 8006b7c:	4610      	mov	r0, r2
 8006b7e:	4619      	mov	r1, r3
      rtb_is_drive) * SIM0_DW.Memory12_PreviousInput[i]) / (2.0 * rtb_is_drive +
 8006b80:	4a52      	ldr	r2, [pc, #328]	; (8006ccc <SIM0_step+0x3c4>)
 8006b82:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8006b86:	f103 030c 	add.w	r3, r3, #12
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	3383      	adds	r3, #131	; 0x83
 8006b8e:	00db      	lsls	r3, r3, #3
 8006b90:	4413      	add	r3, r2
 8006b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b96:	f7f9 fd21 	bl	80005dc <__aeabi_dmul>
 8006b9a:	4602      	mov	r2, r0
 8006b9c:	460b      	mov	r3, r1
                       SIM0_DW.Memory11_PreviousInput) - (SIM0_P.Ts - 2.0 *
 8006b9e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006ba2:	f7f9 fb63 	bl	800026c <__aeabi_dsub>
 8006ba6:	4602      	mov	r2, r0
 8006ba8:	460b      	mov	r3, r1
 8006baa:	4692      	mov	sl, r2
 8006bac:	469b      	mov	fp, r3
      rtb_is_drive) * SIM0_DW.Memory12_PreviousInput[i]) / (2.0 * rtb_is_drive +
 8006bae:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8006bb2:	f103 0318 	add.w	r3, r3, #24
 8006bb6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006bba:	4602      	mov	r2, r0
 8006bbc:	460b      	mov	r3, r1
 8006bbe:	f7f9 fb57 	bl	8000270 <__adddf3>
 8006bc2:	4602      	mov	r2, r0
 8006bc4:	460b      	mov	r3, r1
 8006bc6:	4610      	mov	r0, r2
 8006bc8:	4619      	mov	r1, r3
      SIM0_P.Ts);
 8006bca:	4b45      	ldr	r3, [pc, #276]	; (8006ce0 <SIM0_step+0x3d8>)
 8006bcc:	e9d3 233c 	ldrd	r2, r3, [r3, #240]	; 0xf0
      rtb_is_drive) * SIM0_DW.Memory12_PreviousInput[i]) / (2.0 * rtb_is_drive +
 8006bd0:	f7f9 fb4e 	bl	8000270 <__adddf3>
 8006bd4:	4602      	mov	r2, r0
 8006bd6:	460b      	mov	r3, r1
    rtb_Product1_n = (((2.0 * rtb_Product9 + rtb_Product1_n) * rtb_Memory20 +
 8006bd8:	4650      	mov	r0, sl
 8006bda:	4659      	mov	r1, fp
 8006bdc:	f7f9 fe28 	bl	8000830 <__aeabi_ddiv>
 8006be0:	4602      	mov	r2, r0
 8006be2:	460b      	mov	r3, r1
 8006be4:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 8006be8:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_is_drive = rtb_Product1_n + look1_binlxpw(rtb_Memory22, SIM0_P.soc,
 8006bec:	220c      	movs	r2, #12
 8006bee:	493d      	ldr	r1, [pc, #244]	; (8006ce4 <SIM0_step+0x3dc>)
 8006bf0:	4838      	ldr	r0, [pc, #224]	; (8006cd4 <SIM0_step+0x3cc>)
 8006bf2:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8006bf6:	f103 0308 	add.w	r3, r3, #8
 8006bfa:	ed93 0b00 	vldr	d0, [r3]
 8006bfe:	f003 fa77 	bl	800a0f0 <look1_binlxpw>
 8006c02:	ec53 2b10 	vmov	r2, r3, d0
 8006c06:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 8006c0a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c0e:	f7f9 fb2f 	bl	8000270 <__adddf3>
 8006c12:	4602      	mov	r2, r0
 8006c14:	460b      	mov	r3, r1
 8006c16:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 8006c1a:	f101 0118 	add.w	r1, r1, #24
 8006c1e:	e9c1 2300 	strd	r2, r3, [r1]
      SIM0_P.ocv, 12U);
    SIM0_Y.cell_voltages[i] = rtb_is_drive;
 8006c22:	4a31      	ldr	r2, [pc, #196]	; (8006ce8 <SIM0_step+0x3e0>)
 8006c24:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8006c28:	f103 030c 	add.w	r3, r3, #12
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	3308      	adds	r3, #8
 8006c30:	00db      	lsls	r3, r3, #3
 8006c32:	18d1      	adds	r1, r2, r3
 8006c34:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8006c38:	f103 0318 	add.w	r3, r3, #24
 8006c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c40:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_Y.cell_socs[i] = rtb_Memory22;
 8006c44:	4a28      	ldr	r2, [pc, #160]	; (8006ce8 <SIM0_step+0x3e0>)
 8006c46:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8006c4a:	f103 030c 	add.w	r3, r3, #12
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	3386      	adds	r3, #134	; 0x86
 8006c52:	00db      	lsls	r3, r3, #3
 8006c54:	18d1      	adds	r1, r2, r3
 8006c56:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8006c5a:	f103 0308 	add.w	r3, r3, #8
 8006c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c62:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_Y.cell_capacities[i] = SIM0_DW.Memory10_PreviousInput[i];
 8006c66:	4a19      	ldr	r2, [pc, #100]	; (8006ccc <SIM0_step+0x3c4>)
 8006c68:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8006c6c:	f103 030c 	add.w	r3, r3, #12
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f203 1381 	addw	r3, r3, #385	; 0x181
 8006c76:	00db      	lsls	r3, r3, #3
 8006c78:	4413      	add	r3, r2
 8006c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c7e:	481a      	ldr	r0, [pc, #104]	; (8006ce8 <SIM0_step+0x3e0>)
 8006c80:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 8006c84:	f101 010c 	add.w	r1, r1, #12
 8006c88:	6809      	ldr	r1, [r1, #0]
 8006c8a:	f501 7182 	add.w	r1, r1, #260	; 0x104
 8006c8e:	00c9      	lsls	r1, r1, #3
 8006c90:	4401      	add	r1, r0
 8006c92:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_Memory21[i] = SIM0_DW.Memory10_PreviousInput[i] * rtb_Exp;
 8006c96:	4a0d      	ldr	r2, [pc, #52]	; (8006ccc <SIM0_step+0x3c4>)
 8006c98:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8006c9c:	f103 030c 	add.w	r3, r3, #12
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f203 1381 	addw	r3, r3, #385	; 0x181
 8006ca6:	00db      	lsls	r3, r3, #3
 8006ca8:	4413      	add	r3, r2
 8006caa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006cae:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 8006cb2:	f103 0308 	add.w	r3, r3, #8
 8006cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cba:	f7f9 fc8f 	bl	80005dc <__aeabi_dmul>
 8006cbe:	4602      	mov	r2, r0
 8006cc0:	460b      	mov	r3, r1
 8006cc2:	f607 30d8 	addw	r0, r7, #3032	; 0xbd8
 8006cc6:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 8006cca:	e00f      	b.n	8006cec <SIM0_step+0x3e4>
 8006ccc:	2001be48 	.word	0x2001be48
 8006cd0:	20000368 	.word	0x20000368
 8006cd4:	20000e00 	.word	0x20000e00
 8006cd8:	20000e68 	.word	0x20000e68
 8006cdc:	20000300 	.word	0x20000300
 8006ce0:	200002e0 	.word	0x200002e0
 8006ce4:	20000d98 	.word	0x20000d98
 8006ce8:	2001d6a8 	.word	0x2001d6a8
 8006cec:	f101 010c 	add.w	r1, r1, #12
 8006cf0:	6809      	ldr	r1, [r1, #0]
 8006cf2:	00c9      	lsls	r1, r1, #3
 8006cf4:	4401      	add	r1, r0
 8006cf6:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_Rsz[i] = rtb_Product1_n;
 8006cfa:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 8006cfe:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8006d02:	f103 030c 	add.w	r3, r3, #12
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	00db      	lsls	r3, r3, #3
 8006d0a:	18d1      	adds	r1, r2, r3
 8006d0c:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8006d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d14:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_Rpz[i] = rtb_is_drive;
 8006d18:	f507 62fd 	add.w	r2, r7, #2024	; 0x7e8
 8006d1c:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8006d20:	f103 030c 	add.w	r3, r3, #12
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	00db      	lsls	r3, r3, #3
 8006d28:	18d1      	adds	r1, r2, r3
 8006d2a:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8006d2e:	f103 0318 	add.w	r3, r3, #24
 8006d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d36:	e9c1 2300 	strd	r2, r3, [r1]
  for (i = 0; i < 126; i++) {
 8006d3a:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8006d3e:	f103 030c 	add.w	r3, r3, #12
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	3301      	adds	r3, #1
 8006d46:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 8006d4a:	f102 020c 	add.w	r2, r2, #12
 8006d4e:	6013      	str	r3, [r2, #0]
 8006d50:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8006d54:	f103 030c 	add.w	r3, r3, #12
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	2b7d      	cmp	r3, #125	; 0x7d
 8006d5c:	f77f ae20 	ble.w	80069a0 <SIM0_step+0x98>
  }

  rtb_Exp = SIM0_P.Ts * rtb_Memory20;
 8006d60:	4ba2      	ldr	r3, [pc, #648]	; (8006fec <SIM0_step+0x6e4>)
 8006d62:	e9d3 233c 	ldrd	r2, r3, [r3, #240]	; 0xf0
 8006d66:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 8006d6a:	f101 0118 	add.w	r1, r1, #24
 8006d6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d72:	f7f9 fc33 	bl	80005dc <__aeabi_dmul>
 8006d76:	4602      	mov	r2, r0
 8006d78:	460b      	mov	r3, r1
 8006d7a:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 8006d7e:	f101 0108 	add.w	r1, r1, #8
 8006d82:	e9c1 2300 	strd	r2, r3, [r1]
  for (i = 0; i < 126; i++) {
 8006d86:	2300      	movs	r3, #0
 8006d88:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 8006d8c:	f102 020c 	add.w	r2, r2, #12
 8006d90:	6013      	str	r3, [r2, #0]
 8006d92:	e067      	b.n	8006e64 <SIM0_step+0x55c>
    rtb_Switch[i] = SIM0_DW.Memory21_PreviousInput[i] / SIM0_P.R_short
 8006d94:	4a96      	ldr	r2, [pc, #600]	; (8006ff0 <SIM0_step+0x6e8>)
 8006d96:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8006d9a:	f103 030c 	add.w	r3, r3, #12
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8006da4:	00db      	lsls	r3, r3, #3
 8006da6:	4413      	add	r3, r2
 8006da8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006dac:	4b8f      	ldr	r3, [pc, #572]	; (8006fec <SIM0_step+0x6e4>)
 8006dae:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8006db2:	f7f9 fd3d 	bl	8000830 <__aeabi_ddiv>
 8006db6:	4602      	mov	r2, r0
 8006db8:	460b      	mov	r3, r1
 8006dba:	4610      	mov	r0, r2
 8006dbc:	4619      	mov	r1, r3
      * SIM0_DW.Memory19_PreviousInput[i] * SIM0_P.Gain_Gain + (rtb_Exp +
 8006dbe:	4a8c      	ldr	r2, [pc, #560]	; (8006ff0 <SIM0_step+0x6e8>)
 8006dc0:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8006dc4:	f103 030c 	add.w	r3, r3, #12
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006dce:	00db      	lsls	r3, r3, #3
 8006dd0:	4413      	add	r3, r2
 8006dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dd6:	f7f9 fc01 	bl	80005dc <__aeabi_dmul>
 8006dda:	4602      	mov	r2, r0
 8006ddc:	460b      	mov	r3, r1
 8006dde:	4610      	mov	r0, r2
 8006de0:	4619      	mov	r1, r3
 8006de2:	4b82      	ldr	r3, [pc, #520]	; (8006fec <SIM0_step+0x6e4>)
 8006de4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006de8:	3318      	adds	r3, #24
 8006dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dee:	f7f9 fbf5 	bl	80005dc <__aeabi_dmul>
 8006df2:	4602      	mov	r2, r0
 8006df4:	460b      	mov	r3, r1
 8006df6:	4692      	mov	sl, r2
 8006df8:	469b      	mov	fp, r3
      SIM0_DW.Memory_PreviousInput[i]);
 8006dfa:	4a7d      	ldr	r2, [pc, #500]	; (8006ff0 <SIM0_step+0x6e8>)
 8006dfc:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8006e00:	f103 030c 	add.w	r3, r3, #12
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f203 1303 	addw	r3, r3, #259	; 0x103
 8006e0a:	00db      	lsls	r3, r3, #3
 8006e0c:	4413      	add	r3, r2
 8006e0e:	e9d3 0100 	ldrd	r0, r1, [r3]
      * SIM0_DW.Memory19_PreviousInput[i] * SIM0_P.Gain_Gain + (rtb_Exp +
 8006e12:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 8006e16:	f103 0308 	add.w	r3, r3, #8
 8006e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e1e:	f7f9 fa27 	bl	8000270 <__adddf3>
 8006e22:	4602      	mov	r2, r0
 8006e24:	460b      	mov	r3, r1
 8006e26:	4650      	mov	r0, sl
 8006e28:	4659      	mov	r1, fp
 8006e2a:	f7f9 fa21 	bl	8000270 <__adddf3>
 8006e2e:	4602      	mov	r2, r0
 8006e30:	460b      	mov	r3, r1
 8006e32:	4610      	mov	r0, r2
 8006e34:	4619      	mov	r1, r3
    rtb_Switch[i] = SIM0_DW.Memory21_PreviousInput[i] / SIM0_P.R_short
 8006e36:	f107 0318 	add.w	r3, r7, #24
 8006e3a:	3b10      	subs	r3, #16
 8006e3c:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 8006e40:	f102 020c 	add.w	r2, r2, #12
 8006e44:	6812      	ldr	r2, [r2, #0]
 8006e46:	00d2      	lsls	r2, r2, #3
 8006e48:	4413      	add	r3, r2
 8006e4a:	e9c3 0100 	strd	r0, r1, [r3]
  for (i = 0; i < 126; i++) {
 8006e4e:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8006e52:	f103 030c 	add.w	r3, r3, #12
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	3301      	adds	r3, #1
 8006e5a:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 8006e5e:	f102 020c 	add.w	r2, r2, #12
 8006e62:	6013      	str	r3, [r2, #0]
 8006e64:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8006e68:	f103 030c 	add.w	r3, r3, #12
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	2b7d      	cmp	r3, #125	; 0x7d
 8006e70:	dd90      	ble.n	8006d94 <SIM0_step+0x48c>
  }

  boolean_T rtb_Logic_idx_1;
  i = (int32_T)(((((uint32_T)(SIM0_DW.Memory1_PreviousInput != 0.0) << 1) +
 8006e72:	4b5f      	ldr	r3, [pc, #380]	; (8006ff0 <SIM0_step+0x6e8>)
 8006e74:	f503 53bf 	add.w	r3, r3, #6112	; 0x17e0
 8006e78:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006e7c:	f04f 0200 	mov.w	r2, #0
 8006e80:	f04f 0300 	mov.w	r3, #0
 8006e84:	f7f9 fe12 	bl	8000aac <__aeabi_dcmpeq>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d101      	bne.n	8006e92 <SIM0_step+0x58a>
 8006e8e:	2602      	movs	r6, #2
 8006e90:	e000      	b.n	8006e94 <SIM0_step+0x58c>
 8006e92:	2600      	movs	r6, #0
                  (SIM0_DW.Memory2_PreviousInput != 0.0)) << 1) +
 8006e94:	4b56      	ldr	r3, [pc, #344]	; (8006ff0 <SIM0_step+0x6e8>)
 8006e96:	f503 53bf 	add.w	r3, r3, #6112	; 0x17e0
 8006e9a:	3308      	adds	r3, #8
 8006e9c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	469a      	mov	sl, r3
 8006ea4:	f04f 0200 	mov.w	r2, #0
 8006ea8:	f04f 0300 	mov.w	r3, #0
 8006eac:	f7f9 fdfe 	bl	8000aac <__aeabi_dcmpeq>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d001      	beq.n	8006eba <SIM0_step+0x5b2>
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	469a      	mov	sl, r3
 8006eba:	fa5f f38a 	uxtb.w	r3, sl
  i = (int32_T)(((((uint32_T)(SIM0_DW.Memory1_PreviousInput != 0.0) << 1) +
 8006ebe:	4433      	add	r3, r6
                  (SIM0_DW.Memory2_PreviousInput != 0.0)) << 1) +
 8006ec0:	005a      	lsls	r2, r3, #1
                SIM0_DW.Memory_PreviousInput_m);
 8006ec2:	4b4b      	ldr	r3, [pc, #300]	; (8006ff0 <SIM0_step+0x6e8>)
 8006ec4:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 8006ec8:	3318      	adds	r3, #24
 8006eca:	781b      	ldrb	r3, [r3, #0]
                  (SIM0_DW.Memory2_PreviousInput != 0.0)) << 1) +
 8006ecc:	4413      	add	r3, r2
  i = (int32_T)(((((uint32_T)(SIM0_DW.Memory1_PreviousInput != 0.0) << 1) +
 8006ece:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 8006ed2:	f102 020c 	add.w	r2, r2, #12
 8006ed6:	6013      	str	r3, [r2, #0]
  rtb_Logic_idx_0 = SIM0_P.Logic_table[(uint32_T)i];
 8006ed8:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8006edc:	f103 030c 	add.w	r3, r3, #12
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a42      	ldr	r2, [pc, #264]	; (8006fec <SIM0_step+0x6e4>)
 8006ee4:	4413      	add	r3, r2
 8006ee6:	f503 5385 	add.w	r3, r3, #4256	; 0x10a0
 8006eea:	3318      	adds	r3, #24
 8006eec:	781b      	ldrb	r3, [r3, #0]
 8006eee:	f507 529e 	add.w	r2, r7, #5056	; 0x13c0
 8006ef2:	f102 0217 	add.w	r2, r2, #23
 8006ef6:	7013      	strb	r3, [r2, #0]
  rtb_Logic_idx_1 = SIM0_P.Logic_table[i + 8U];
 8006ef8:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8006efc:	f103 030c 	add.w	r3, r3, #12
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	3308      	adds	r3, #8
 8006f04:	4a39      	ldr	r2, [pc, #228]	; (8006fec <SIM0_step+0x6e4>)
 8006f06:	4413      	add	r3, r2
 8006f08:	f503 5385 	add.w	r3, r3, #4256	; 0x10a0
 8006f0c:	3318      	adds	r3, #24
 8006f0e:	781b      	ldrb	r3, [r3, #0]
 8006f10:	f507 529e 	add.w	r2, r7, #5056	; 0x13c0
 8006f14:	f102 0216 	add.w	r2, r2, #22
 8006f18:	7013      	strb	r3, [r2, #0]
  SIM0_Y.AMS_error_latched = rtb_Logic_idx_0;
 8006f1a:	4a36      	ldr	r2, [pc, #216]	; (8006ff4 <SIM0_step+0x6ec>)
 8006f1c:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8006f20:	f103 0317 	add.w	r3, r3, #23
 8006f24:	781b      	ldrb	r3, [r3, #0]
 8006f26:	7013      	strb	r3, [r2, #0]
  i = (int32_T)(((((uint32_T)(SIM0_DW.Memory3_PreviousInput != 0.0) << 1) +
 8006f28:	4b31      	ldr	r3, [pc, #196]	; (8006ff0 <SIM0_step+0x6e8>)
 8006f2a:	f503 53bf 	add.w	r3, r3, #6112	; 0x17e0
 8006f2e:	3310      	adds	r3, #16
 8006f30:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006f34:	f04f 0200 	mov.w	r2, #0
 8006f38:	f04f 0300 	mov.w	r3, #0
 8006f3c:	f7f9 fdb6 	bl	8000aac <__aeabi_dcmpeq>
 8006f40:	4603      	mov	r3, r0
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d101      	bne.n	8006f4a <SIM0_step+0x642>
 8006f46:	2602      	movs	r6, #2
 8006f48:	e000      	b.n	8006f4c <SIM0_step+0x644>
 8006f4a:	2600      	movs	r6, #0
                  (SIM0_DW.Memory4_PreviousInput != 0.0)) << 1) +
 8006f4c:	4b28      	ldr	r3, [pc, #160]	; (8006ff0 <SIM0_step+0x6e8>)
 8006f4e:	f503 53bf 	add.w	r3, r3, #6112	; 0x17e0
 8006f52:	3318      	adds	r3, #24
 8006f54:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006f58:	2301      	movs	r3, #1
 8006f5a:	469a      	mov	sl, r3
 8006f5c:	f04f 0200 	mov.w	r2, #0
 8006f60:	f04f 0300 	mov.w	r3, #0
 8006f64:	f7f9 fda2 	bl	8000aac <__aeabi_dcmpeq>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d001      	beq.n	8006f72 <SIM0_step+0x66a>
 8006f6e:	2300      	movs	r3, #0
 8006f70:	469a      	mov	sl, r3
 8006f72:	fa5f f38a 	uxtb.w	r3, sl
  i = (int32_T)(((((uint32_T)(SIM0_DW.Memory3_PreviousInput != 0.0) << 1) +
 8006f76:	4433      	add	r3, r6
                  (SIM0_DW.Memory4_PreviousInput != 0.0)) << 1) +
 8006f78:	005a      	lsls	r2, r3, #1
                SIM0_DW.Memory_PreviousInput_c);
 8006f7a:	4b1d      	ldr	r3, [pc, #116]	; (8006ff0 <SIM0_step+0x6e8>)
 8006f7c:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 8006f80:	3319      	adds	r3, #25
 8006f82:	781b      	ldrb	r3, [r3, #0]
                  (SIM0_DW.Memory4_PreviousInput != 0.0)) << 1) +
 8006f84:	4413      	add	r3, r2
  i = (int32_T)(((((uint32_T)(SIM0_DW.Memory3_PreviousInput != 0.0) << 1) +
 8006f86:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 8006f8a:	f102 020c 	add.w	r2, r2, #12
 8006f8e:	6013      	str	r3, [r2, #0]
  rtb_Logic_p_idx_0 = SIM0_P.Logic_table_p[(uint32_T)i];
 8006f90:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8006f94:	f103 030c 	add.w	r3, r3, #12
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4a14      	ldr	r2, [pc, #80]	; (8006fec <SIM0_step+0x6e4>)
 8006f9c:	4413      	add	r3, r2
 8006f9e:	f503 5386 	add.w	r3, r3, #4288	; 0x10c0
 8006fa2:	3308      	adds	r3, #8
 8006fa4:	781b      	ldrb	r3, [r3, #0]
 8006fa6:	f507 529e 	add.w	r2, r7, #5056	; 0x13c0
 8006faa:	f102 0215 	add.w	r2, r2, #21
 8006fae:	7013      	strb	r3, [r2, #0]
  SIM0_Y.IMD_error_latched = rtb_Logic_p_idx_0;
 8006fb0:	4a10      	ldr	r2, [pc, #64]	; (8006ff4 <SIM0_step+0x6ec>)
 8006fb2:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8006fb6:	f103 0315 	add.w	r3, r3, #21
 8006fba:	781b      	ldrb	r3, [r3, #0]
 8006fbc:	7053      	strb	r3, [r2, #1]
  rtb_Memory22 = (rtb_Logic_idx_1 ? (real_T)SIM0_P.Logic_table_p[i + 8U] : 0.0) *
 8006fbe:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8006fc2:	f103 0316 	add.w	r3, r3, #22
 8006fc6:	781b      	ldrb	r3, [r3, #0]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d015      	beq.n	8006ff8 <SIM0_step+0x6f0>
 8006fcc:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8006fd0:	f103 030c 	add.w	r3, r3, #12
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	3308      	adds	r3, #8
 8006fd8:	4a04      	ldr	r2, [pc, #16]	; (8006fec <SIM0_step+0x6e4>)
 8006fda:	4413      	add	r3, r2
 8006fdc:	f503 5386 	add.w	r3, r3, #4288	; 0x10c0
 8006fe0:	3308      	adds	r3, #8
 8006fe2:	781b      	ldrb	r3, [r3, #0]
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	f7f9 fa7f 	bl	80004e8 <__aeabi_ui2d>
 8006fea:	e009      	b.n	8007000 <SIM0_step+0x6f8>
 8006fec:	200002e0 	.word	0x200002e0
 8006ff0:	2001be48 	.word	0x2001be48
 8006ff4:	2001d6a8 	.word	0x2001d6a8
 8006ff8:	f04f 0000 	mov.w	r0, #0
 8006ffc:	f04f 0100 	mov.w	r1, #0
    SIM0_DW.Memory5_PreviousInput;
 8007000:	4bba      	ldr	r3, [pc, #744]	; (80072ec <SIM0_step+0x9e4>)
 8007002:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 8007006:	e9d3 2300 	ldrd	r2, r3, [r3]
  rtb_Memory22 = (rtb_Logic_idx_1 ? (real_T)SIM0_P.Logic_table_p[i + 8U] : 0.0) *
 800700a:	f7f9 fae7 	bl	80005dc <__aeabi_dmul>
 800700e:	4602      	mov	r2, r0
 8007010:	460b      	mov	r3, r1
 8007012:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 8007016:	f101 0108 	add.w	r1, r1, #8
 800701a:	e9c1 2300 	strd	r2, r3, [r1]
  SIM0_Y.SC_probe = rtb_Memory22;
 800701e:	49b4      	ldr	r1, [pc, #720]	; (80072f0 <SIM0_step+0x9e8>)
 8007020:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8007024:	f103 0308 	add.w	r3, r3, #8
 8007028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800702c:	e9c1 2302 	strd	r2, r3, [r1, #8]
  rtb_Exp = rtb_Memory22 * SIM0_DW.Delay1_DSTATE;
 8007030:	4bae      	ldr	r3, [pc, #696]	; (80072ec <SIM0_step+0x9e4>)
 8007032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007036:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 800703a:	f101 0108 	add.w	r1, r1, #8
 800703e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007042:	f7f9 facb 	bl	80005dc <__aeabi_dmul>
 8007046:	4602      	mov	r2, r0
 8007048:	460b      	mov	r3, r1
 800704a:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 800704e:	f101 0108 	add.w	r1, r1, #8
 8007052:	e9c1 2300 	strd	r2, r3, [r1]
  SIM0_Y.precharge_closed = rtb_Exp;
 8007056:	49a6      	ldr	r1, [pc, #664]	; (80072f0 <SIM0_step+0x9e8>)
 8007058:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 800705c:	f103 0308 	add.w	r3, r3, #8
 8007060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007064:	e9c1 2308 	strd	r2, r3, [r1, #32]
  rtb_Product1_n = rtb_Memory22 * SIM0_DW.Delay2_DSTATE[0];
 8007068:	4ba0      	ldr	r3, [pc, #640]	; (80072ec <SIM0_step+0x9e4>)
 800706a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800706e:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 8007072:	f101 0108 	add.w	r1, r1, #8
 8007076:	e9d1 0100 	ldrd	r0, r1, [r1]
 800707a:	f7f9 faaf 	bl	80005dc <__aeabi_dmul>
 800707e:	4602      	mov	r2, r0
 8007080:	460b      	mov	r3, r1
 8007082:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 8007086:	e9c1 2300 	strd	r2, r3, [r1]
  rtb_Memory22 *= SIM0_DW.Delay3_DSTATE[0];
 800708a:	4b98      	ldr	r3, [pc, #608]	; (80072ec <SIM0_step+0x9e4>)
 800708c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8007090:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 8007094:	f101 0108 	add.w	r1, r1, #8
 8007098:	e9d1 0100 	ldrd	r0, r1, [r1]
 800709c:	f7f9 fa9e 	bl	80005dc <__aeabi_dmul>
 80070a0:	4602      	mov	r2, r0
 80070a2:	460b      	mov	r3, r1
 80070a4:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 80070a8:	f101 0108 	add.w	r1, r1, #8
 80070ac:	e9c1 2300 	strd	r2, r3, [r1]
  i = 1;
 80070b0:	2301      	movs	r3, #1
 80070b2:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 80070b6:	f102 020c 	add.w	r2, r2, #12
 80070ba:	6013      	str	r3, [r2, #0]
  rtb_is_charge = 0;
 80070bc:	2300      	movs	r3, #0
 80070be:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 80070c2:	f102 0204 	add.w	r2, r2, #4
 80070c6:	6013      	str	r3, [r2, #0]
  rtb_is_drive = 0.0;
 80070c8:	f04f 0200 	mov.w	r2, #0
 80070cc:	f04f 0300 	mov.w	r3, #0
 80070d0:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 80070d4:	f101 0118 	add.w	r1, r1, #24
 80070d8:	e9c1 2300 	strd	r2, r3, [r1]
  if (SIM0_DW.Memory6_PreviousInput != 0.0) {
 80070dc:	4b83      	ldr	r3, [pc, #524]	; (80072ec <SIM0_step+0x9e4>)
 80070de:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 80070e2:	3308      	adds	r3, #8
 80070e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80070e8:	f04f 0200 	mov.w	r2, #0
 80070ec:	f04f 0300 	mov.w	r3, #0
 80070f0:	f7f9 fcdc 	bl	8000aac <__aeabi_dcmpeq>
 80070f4:	4603      	mov	r3, r0
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d10c      	bne.n	8007114 <SIM0_step+0x80c>
    i = 2;
 80070fa:	2302      	movs	r3, #2
 80070fc:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 8007100:	f102 020c 	add.w	r2, r2, #12
 8007104:	6013      	str	r3, [r2, #0]
    rtb_is_charge = 1;
 8007106:	2301      	movs	r3, #1
 8007108:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 800710c:	f102 0204 	add.w	r2, r2, #4
 8007110:	6013      	str	r3, [r2, #0]
 8007112:	e01d      	b.n	8007150 <SIM0_step+0x848>
  } else if (SIM0_DW.Memory7_PreviousInput != 0.0) {
 8007114:	4b75      	ldr	r3, [pc, #468]	; (80072ec <SIM0_step+0x9e4>)
 8007116:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 800711a:	3310      	adds	r3, #16
 800711c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007120:	f04f 0200 	mov.w	r2, #0
 8007124:	f04f 0300 	mov.w	r3, #0
 8007128:	f7f9 fcc0 	bl	8000aac <__aeabi_dcmpeq>
 800712c:	4603      	mov	r3, r0
 800712e:	2b00      	cmp	r3, #0
 8007130:	d10e      	bne.n	8007150 <SIM0_step+0x848>
    i = 3;
 8007132:	2303      	movs	r3, #3
 8007134:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 8007138:	f102 020c 	add.w	r2, r2, #12
 800713c:	6013      	str	r3, [r2, #0]
    rtb_is_drive = 1.0;
 800713e:	f04f 0200 	mov.w	r2, #0
 8007142:	4b6c      	ldr	r3, [pc, #432]	; (80072f4 <SIM0_step+0x9ec>)
 8007144:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 8007148:	f101 0118 	add.w	r1, r1, #24
 800714c:	e9c1 2300 	strd	r2, r3, [r1]
  }

  rtb_Product9 = rtb_Memory22 * rtb_Product1_n;
 8007150:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8007154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007158:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 800715c:	f101 0108 	add.w	r1, r1, #8
 8007160:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007164:	f7f9 fa3a 	bl	80005dc <__aeabi_dmul>
 8007168:	4602      	mov	r2, r0
 800716a:	460b      	mov	r3, r1
 800716c:	f507 519d 	add.w	r1, r7, #5024	; 0x13a0
 8007170:	f101 0118 	add.w	r1, r1, #24
 8007174:	e9c1 2300 	strd	r2, r3, [r1]
  rtb_is_drive = rtb_is_drive * SIM0_DW.Memory22_PreviousInput * rtb_Product9;
 8007178:	4b5c      	ldr	r3, [pc, #368]	; (80072ec <SIM0_step+0x9e4>)
 800717a:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 800717e:	3318      	adds	r3, #24
 8007180:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007184:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8007188:	f103 0318 	add.w	r3, r3, #24
 800718c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007190:	f7f9 fa24 	bl	80005dc <__aeabi_dmul>
 8007194:	4602      	mov	r2, r0
 8007196:	460b      	mov	r3, r1
 8007198:	f507 519d 	add.w	r1, r7, #5024	; 0x13a0
 800719c:	f101 0118 	add.w	r1, r1, #24
 80071a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80071a4:	f7f9 fa1a 	bl	80005dc <__aeabi_dmul>
 80071a8:	4602      	mov	r2, r0
 80071aa:	460b      	mov	r3, r1
 80071ac:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 80071b0:	f101 0118 	add.w	r1, r1, #24
 80071b4:	e9c1 2300 	strd	r2, r3, [r1]
  rtb_y = rtb_Memory15[0];
 80071b8:	f607 73c8 	addw	r3, r7, #4040	; 0xfc8
 80071bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071c0:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 80071c4:	f101 0110 	add.w	r1, r1, #16
 80071c8:	e9c1 2300 	strd	r2, r3, [r1]
  for (iU = 0; iU < 125; iU++) {
 80071cc:	2300      	movs	r3, #0
 80071ce:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 80071d2:	f102 0208 	add.w	r2, r2, #8
 80071d6:	6013      	str	r3, [r2, #0]
 80071d8:	e026      	b.n	8007228 <SIM0_step+0x920>
    rtb_y += rtb_Memory15[iU + 1];
 80071da:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 80071de:	f103 0308 	add.w	r3, r3, #8
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	3301      	adds	r3, #1
 80071e6:	f607 72c8 	addw	r2, r7, #4040	; 0xfc8
 80071ea:	00db      	lsls	r3, r3, #3
 80071ec:	4413      	add	r3, r2
 80071ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071f2:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 80071f6:	f101 0110 	add.w	r1, r1, #16
 80071fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80071fe:	f7f9 f837 	bl	8000270 <__adddf3>
 8007202:	4602      	mov	r2, r0
 8007204:	460b      	mov	r3, r1
 8007206:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 800720a:	f101 0110 	add.w	r1, r1, #16
 800720e:	e9c1 2300 	strd	r2, r3, [r1]
  for (iU = 0; iU < 125; iU++) {
 8007212:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8007216:	f103 0308 	add.w	r3, r3, #8
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	3301      	adds	r3, #1
 800721e:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 8007222:	f102 0208 	add.w	r2, r2, #8
 8007226:	6013      	str	r3, [r2, #0]
 8007228:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 800722c:	f103 0308 	add.w	r3, r3, #8
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	2b7c      	cmp	r3, #124	; 0x7c
 8007234:	ddd1      	ble.n	80071da <SIM0_step+0x8d2>
  }

  if (SIM0_DW.Memory16_PreviousInput != 0.0) {
 8007236:	4b2d      	ldr	r3, [pc, #180]	; (80072ec <SIM0_step+0x9e4>)
 8007238:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 800723c:	3308      	adds	r3, #8
 800723e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007242:	f04f 0200 	mov.w	r2, #0
 8007246:	f04f 0300 	mov.w	r3, #0
 800724a:	f7f9 fc2f 	bl	8000aac <__aeabi_dcmpeq>
 800724e:	4603      	mov	r3, r0
 8007250:	2b00      	cmp	r3, #0
 8007252:	d151      	bne.n	80072f8 <SIM0_step+0x9f0>
    rtb_Current = SIM0_DW.Memory17_PreviousInput - rtb_y;
 8007254:	4b25      	ldr	r3, [pc, #148]	; (80072ec <SIM0_step+0x9e4>)
 8007256:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 800725a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800725e:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8007262:	f103 0310 	add.w	r3, r3, #16
 8007266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800726a:	f7f8 ffff 	bl	800026c <__aeabi_dsub>
 800726e:	4602      	mov	r2, r0
 8007270:	460b      	mov	r3, r1
 8007272:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 8007276:	f101 0110 	add.w	r1, r1, #16
 800727a:	e9c1 2300 	strd	r2, r3, [r1]
    if (rtb_Current < 0.0) {
 800727e:	f04f 0200 	mov.w	r2, #0
 8007282:	f04f 0300 	mov.w	r3, #0
 8007286:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 800728a:	f101 0110 	add.w	r1, r1, #16
 800728e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007292:	f7f9 fc15 	bl	8000ac0 <__aeabi_dcmplt>
 8007296:	4603      	mov	r3, r0
 8007298:	2b00      	cmp	r3, #0
 800729a:	d009      	beq.n	80072b0 <SIM0_step+0x9a8>
      rtb_Current = 0.0;
 800729c:	f04f 0200 	mov.w	r2, #0
 80072a0:	f04f 0300 	mov.w	r3, #0
 80072a4:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 80072a8:	f101 0110 	add.w	r1, r1, #16
 80072ac:	e9c1 2300 	strd	r2, r3, [r1]
    }

    if (SIM0_DW.Memory18_PreviousInput < rtb_Current) {
 80072b0:	4b0e      	ldr	r3, [pc, #56]	; (80072ec <SIM0_step+0x9e4>)
 80072b2:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 80072b6:	3310      	adds	r3, #16
 80072b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072bc:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 80072c0:	f101 0110 	add.w	r1, r1, #16
 80072c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80072c8:	f7f9 fc18 	bl	8000afc <__aeabi_dcmpgt>
 80072cc:	4603      	mov	r3, r0
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d01c      	beq.n	800730c <SIM0_step+0xa04>
      rtb_Current = SIM0_DW.Memory18_PreviousInput;
 80072d2:	4b06      	ldr	r3, [pc, #24]	; (80072ec <SIM0_step+0x9e4>)
 80072d4:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 80072d8:	3310      	adds	r3, #16
 80072da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072de:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 80072e2:	f101 0110 	add.w	r1, r1, #16
 80072e6:	e9c1 2300 	strd	r2, r3, [r1]
 80072ea:	e00f      	b.n	800730c <SIM0_step+0xa04>
 80072ec:	2001be48 	.word	0x2001be48
 80072f0:	2001d6a8 	.word	0x2001d6a8
 80072f4:	3ff00000 	.word	0x3ff00000
    }
  } else {
    rtb_Current = 0.0;
 80072f8:	f04f 0200 	mov.w	r2, #0
 80072fc:	f04f 0300 	mov.w	r3, #0
 8007300:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 8007304:	f101 0110 	add.w	r1, r1, #16
 8007308:	e9c1 2300 	strd	r2, r3, [r1]
  }

  rtb_current = 0.0;
 800730c:	f04f 0200 	mov.w	r2, #0
 8007310:	f04f 0300 	mov.w	r3, #0
 8007314:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 8007318:	e9c1 2300 	strd	r2, r3, [r1]
  if (i == 1) {
 800731c:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8007320:	f103 030c 	add.w	r3, r3, #12
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	2b01      	cmp	r3, #1
 8007328:	d109      	bne.n	800733e <SIM0_step+0xa36>
    rtb_Exp = -1.0;
 800732a:	f04f 0200 	mov.w	r2, #0
 800732e:	4bc0      	ldr	r3, [pc, #768]	; (8007630 <SIM0_step+0xd28>)
 8007330:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 8007334:	f101 0108 	add.w	r1, r1, #8
 8007338:	e9c1 2300 	strd	r2, r3, [r1]
 800733c:	e1d3      	b.n	80076e6 <SIM0_step+0xdde>
  } else if (i == 2) {
 800733e:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8007342:	f103 030c 	add.w	r3, r3, #12
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	2b02      	cmp	r3, #2
 800734a:	f040 8099 	bne.w	8007480 <SIM0_step+0xb78>
    if (rtb_Memory22 != 0.0) {
 800734e:	f04f 0200 	mov.w	r2, #0
 8007352:	f04f 0300 	mov.w	r3, #0
 8007356:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 800735a:	f101 0108 	add.w	r1, r1, #8
 800735e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007362:	f7f9 fba3 	bl	8000aac <__aeabi_dcmpeq>
 8007366:	4603      	mov	r3, r0
 8007368:	2b00      	cmp	r3, #0
 800736a:	d17f      	bne.n	800746c <SIM0_step+0xb64>
      if ((rtb_Product1_n != 0.0) || (rtb_Exp != 0.0)) {
 800736c:	f04f 0200 	mov.w	r2, #0
 8007370:	f04f 0300 	mov.w	r3, #0
 8007374:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 8007378:	e9d1 0100 	ldrd	r0, r1, [r1]
 800737c:	f7f9 fb96 	bl	8000aac <__aeabi_dcmpeq>
 8007380:	4603      	mov	r3, r0
 8007382:	2b00      	cmp	r3, #0
 8007384:	d00e      	beq.n	80073a4 <SIM0_step+0xa9c>
 8007386:	f04f 0200 	mov.w	r2, #0
 800738a:	f04f 0300 	mov.w	r3, #0
 800738e:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 8007392:	f101 0108 	add.w	r1, r1, #8
 8007396:	e9d1 0100 	ldrd	r0, r1, [r1]
 800739a:	f7f9 fb87 	bl	8000aac <__aeabi_dcmpeq>
 800739e:	4603      	mov	r3, r0
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d141      	bne.n	8007428 <SIM0_step+0xb20>
        rtb_Exp = (rtb_y - SIM0_DW.Memory_PreviousInput_a) +
 80073a4:	4ba3      	ldr	r3, [pc, #652]	; (8007634 <SIM0_step+0xd2c>)
 80073a6:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 80073aa:	3318      	adds	r3, #24
 80073ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073b0:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 80073b4:	f101 0110 	add.w	r1, r1, #16
 80073b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80073bc:	f7f8 ff56 	bl	800026c <__aeabi_dsub>
 80073c0:	4602      	mov	r2, r0
 80073c2:	460b      	mov	r3, r1
 80073c4:	4610      	mov	r0, r2
 80073c6:	4619      	mov	r1, r3
          SIM0_DW.Memory_PreviousInput_a;
 80073c8:	4b9a      	ldr	r3, [pc, #616]	; (8007634 <SIM0_step+0xd2c>)
 80073ca:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 80073ce:	3318      	adds	r3, #24
 80073d0:	e9d3 2300 	ldrd	r2, r3, [r3]
        rtb_Exp = (rtb_y - SIM0_DW.Memory_PreviousInput_a) +
 80073d4:	f7f8 ff4c 	bl	8000270 <__adddf3>
 80073d8:	4602      	mov	r2, r0
 80073da:	460b      	mov	r3, r1
 80073dc:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 80073e0:	f101 0108 	add.w	r1, r1, #8
 80073e4:	e9c1 2300 	strd	r2, r3, [r1]
        rtb_current = (real_T)rtb_is_charge * rtb_Current * rtb_Product9;
 80073e8:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 80073ec:	f103 0304 	add.w	r3, r3, #4
 80073f0:	6818      	ldr	r0, [r3, #0]
 80073f2:	f7f9 f889 	bl	8000508 <__aeabi_i2d>
 80073f6:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 80073fa:	f103 0310 	add.w	r3, r3, #16
 80073fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007402:	f7f9 f8eb 	bl	80005dc <__aeabi_dmul>
 8007406:	4602      	mov	r2, r0
 8007408:	460b      	mov	r3, r1
 800740a:	f507 519d 	add.w	r1, r7, #5024	; 0x13a0
 800740e:	f101 0118 	add.w	r1, r1, #24
 8007412:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007416:	f7f9 f8e1 	bl	80005dc <__aeabi_dmul>
 800741a:	4602      	mov	r2, r0
 800741c:	460b      	mov	r3, r1
 800741e:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 8007422:	e9c1 2300 	strd	r2, r3, [r1]
 8007426:	e15e      	b.n	80076e6 <SIM0_step+0xdde>
      } else {
        rtb_Exp = (SIM0_DW.Memory17_PreviousInput -
 8007428:	4b82      	ldr	r3, [pc, #520]	; (8007634 <SIM0_step+0xd2c>)
 800742a:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 800742e:	e9d3 0100 	ldrd	r0, r1, [r3]
                   SIM0_DW.Memory_PreviousInput_a) +
 8007432:	4b80      	ldr	r3, [pc, #512]	; (8007634 <SIM0_step+0xd2c>)
 8007434:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 8007438:	3318      	adds	r3, #24
 800743a:	e9d3 2300 	ldrd	r2, r3, [r3]
        rtb_Exp = (SIM0_DW.Memory17_PreviousInput -
 800743e:	f7f8 ff15 	bl	800026c <__aeabi_dsub>
 8007442:	4602      	mov	r2, r0
 8007444:	460b      	mov	r3, r1
 8007446:	4610      	mov	r0, r2
 8007448:	4619      	mov	r1, r3
          SIM0_DW.Memory_PreviousInput_a;
 800744a:	4b7a      	ldr	r3, [pc, #488]	; (8007634 <SIM0_step+0xd2c>)
 800744c:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 8007450:	3318      	adds	r3, #24
 8007452:	e9d3 2300 	ldrd	r2, r3, [r3]
        rtb_Exp = (SIM0_DW.Memory17_PreviousInput -
 8007456:	f7f8 ff0b 	bl	8000270 <__adddf3>
 800745a:	4602      	mov	r2, r0
 800745c:	460b      	mov	r3, r1
 800745e:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 8007462:	f101 0108 	add.w	r1, r1, #8
 8007466:	e9c1 2300 	strd	r2, r3, [r1]
 800746a:	e13c      	b.n	80076e6 <SIM0_step+0xdde>
      }
    } else {
      rtb_Exp = -1.0;
 800746c:	f04f 0200 	mov.w	r2, #0
 8007470:	4b6f      	ldr	r3, [pc, #444]	; (8007630 <SIM0_step+0xd28>)
 8007472:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 8007476:	f101 0108 	add.w	r1, r1, #8
 800747a:	e9c1 2300 	strd	r2, r3, [r1]
 800747e:	e132      	b.n	80076e6 <SIM0_step+0xdde>
    }
  } else if (rtb_Memory22 != 0.0) {
 8007480:	f04f 0200 	mov.w	r2, #0
 8007484:	f04f 0300 	mov.w	r3, #0
 8007488:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 800748c:	f101 0108 	add.w	r1, r1, #8
 8007490:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007494:	f7f9 fb0a 	bl	8000aac <__aeabi_dcmpeq>
 8007498:	4603      	mov	r3, r0
 800749a:	2b00      	cmp	r3, #0
 800749c:	f040 811a 	bne.w	80076d4 <SIM0_step+0xdcc>
    if (rtb_Product1_n != 0.0) {
 80074a0:	f04f 0200 	mov.w	r2, #0
 80074a4:	f04f 0300 	mov.w	r3, #0
 80074a8:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 80074ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80074b0:	f7f9 fafc 	bl	8000aac <__aeabi_dcmpeq>
 80074b4:	4603      	mov	r3, r0
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d152      	bne.n	8007560 <SIM0_step+0xc58>
      rtb_Exp = (rtb_y - SIM0_DW.Memory_PreviousInput_a) * 0.8 +
 80074ba:	4b5e      	ldr	r3, [pc, #376]	; (8007634 <SIM0_step+0xd2c>)
 80074bc:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 80074c0:	3318      	adds	r3, #24
 80074c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074c6:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 80074ca:	f101 0110 	add.w	r1, r1, #16
 80074ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80074d2:	f7f8 fecb 	bl	800026c <__aeabi_dsub>
 80074d6:	4602      	mov	r2, r0
 80074d8:	460b      	mov	r3, r1
 80074da:	4610      	mov	r0, r2
 80074dc:	4619      	mov	r1, r3
 80074de:	a352      	add	r3, pc, #328	; (adr r3, 8007628 <SIM0_step+0xd20>)
 80074e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074e4:	f7f9 f87a 	bl	80005dc <__aeabi_dmul>
 80074e8:	4602      	mov	r2, r0
 80074ea:	460b      	mov	r3, r1
 80074ec:	4610      	mov	r0, r2
 80074ee:	4619      	mov	r1, r3
        SIM0_DW.Memory_PreviousInput_a;
 80074f0:	4b50      	ldr	r3, [pc, #320]	; (8007634 <SIM0_step+0xd2c>)
 80074f2:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 80074f6:	3318      	adds	r3, #24
 80074f8:	e9d3 2300 	ldrd	r2, r3, [r3]
      rtb_Exp = (rtb_y - SIM0_DW.Memory_PreviousInput_a) * 0.8 +
 80074fc:	f7f8 feb8 	bl	8000270 <__adddf3>
 8007500:	4602      	mov	r2, r0
 8007502:	460b      	mov	r3, r1
 8007504:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 8007508:	f101 0108 	add.w	r1, r1, #8
 800750c:	e9c1 2300 	strd	r2, r3, [r1]
      rtb_current = rtb_is_drive - (rtb_y - rtb_Exp) / 0.5;
 8007510:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 8007514:	f103 0308 	add.w	r3, r3, #8
 8007518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800751c:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 8007520:	f101 0110 	add.w	r1, r1, #16
 8007524:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007528:	f7f8 fea0 	bl	800026c <__aeabi_dsub>
 800752c:	4602      	mov	r2, r0
 800752e:	460b      	mov	r3, r1
 8007530:	4610      	mov	r0, r2
 8007532:	4619      	mov	r1, r3
 8007534:	f04f 0200 	mov.w	r2, #0
 8007538:	4b3f      	ldr	r3, [pc, #252]	; (8007638 <SIM0_step+0xd30>)
 800753a:	f7f9 f979 	bl	8000830 <__aeabi_ddiv>
 800753e:	4602      	mov	r2, r0
 8007540:	460b      	mov	r3, r1
 8007542:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 8007546:	f101 0118 	add.w	r1, r1, #24
 800754a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800754e:	f7f8 fe8d 	bl	800026c <__aeabi_dsub>
 8007552:	4602      	mov	r2, r0
 8007554:	460b      	mov	r3, r1
 8007556:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 800755a:	e9c1 2300 	strd	r2, r3, [r1]
 800755e:	e0c2      	b.n	80076e6 <SIM0_step+0xdde>
    } else if (rtb_Exp != 0.0) {
 8007560:	f04f 0200 	mov.w	r2, #0
 8007564:	f04f 0300 	mov.w	r3, #0
 8007568:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 800756c:	f101 0108 	add.w	r1, r1, #8
 8007570:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007574:	f7f9 fa9a 	bl	8000aac <__aeabi_dcmpeq>
 8007578:	4603      	mov	r3, r0
 800757a:	2b00      	cmp	r3, #0
 800757c:	d162      	bne.n	8007644 <SIM0_step+0xd3c>
      rtb_Exp = (rtb_y - SIM0_DW.Memory_PreviousInput_a) / 50.0 +
 800757e:	4b2d      	ldr	r3, [pc, #180]	; (8007634 <SIM0_step+0xd2c>)
 8007580:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 8007584:	3318      	adds	r3, #24
 8007586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800758a:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 800758e:	f101 0110 	add.w	r1, r1, #16
 8007592:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007596:	f7f8 fe69 	bl	800026c <__aeabi_dsub>
 800759a:	4602      	mov	r2, r0
 800759c:	460b      	mov	r3, r1
 800759e:	4610      	mov	r0, r2
 80075a0:	4619      	mov	r1, r3
 80075a2:	f04f 0200 	mov.w	r2, #0
 80075a6:	4b25      	ldr	r3, [pc, #148]	; (800763c <SIM0_step+0xd34>)
 80075a8:	f7f9 f942 	bl	8000830 <__aeabi_ddiv>
 80075ac:	4602      	mov	r2, r0
 80075ae:	460b      	mov	r3, r1
 80075b0:	4610      	mov	r0, r2
 80075b2:	4619      	mov	r1, r3
        SIM0_DW.Memory_PreviousInput_a;
 80075b4:	4b1f      	ldr	r3, [pc, #124]	; (8007634 <SIM0_step+0xd2c>)
 80075b6:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 80075ba:	3318      	adds	r3, #24
 80075bc:	e9d3 2300 	ldrd	r2, r3, [r3]
      rtb_Exp = (rtb_y - SIM0_DW.Memory_PreviousInput_a) / 50.0 +
 80075c0:	f7f8 fe56 	bl	8000270 <__adddf3>
 80075c4:	4602      	mov	r2, r0
 80075c6:	460b      	mov	r3, r1
 80075c8:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 80075cc:	f101 0108 	add.w	r1, r1, #8
 80075d0:	e9c1 2300 	strd	r2, r3, [r1]
      rtb_current = rtb_is_drive - (rtb_y - rtb_Exp) / 100.0;
 80075d4:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 80075d8:	f103 0308 	add.w	r3, r3, #8
 80075dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075e0:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 80075e4:	f101 0110 	add.w	r1, r1, #16
 80075e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80075ec:	f7f8 fe3e 	bl	800026c <__aeabi_dsub>
 80075f0:	4602      	mov	r2, r0
 80075f2:	460b      	mov	r3, r1
 80075f4:	4610      	mov	r0, r2
 80075f6:	4619      	mov	r1, r3
 80075f8:	f04f 0200 	mov.w	r2, #0
 80075fc:	4b10      	ldr	r3, [pc, #64]	; (8007640 <SIM0_step+0xd38>)
 80075fe:	f7f9 f917 	bl	8000830 <__aeabi_ddiv>
 8007602:	4602      	mov	r2, r0
 8007604:	460b      	mov	r3, r1
 8007606:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 800760a:	f101 0118 	add.w	r1, r1, #24
 800760e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007612:	f7f8 fe2b 	bl	800026c <__aeabi_dsub>
 8007616:	4602      	mov	r2, r0
 8007618:	460b      	mov	r3, r1
 800761a:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 800761e:	e9c1 2300 	strd	r2, r3, [r1]
 8007622:	e060      	b.n	80076e6 <SIM0_step+0xdde>
 8007624:	f3af 8000 	nop.w
 8007628:	9999999a 	.word	0x9999999a
 800762c:	3fe99999 	.word	0x3fe99999
 8007630:	bff00000 	.word	0xbff00000
 8007634:	2001be48 	.word	0x2001be48
 8007638:	3fe00000 	.word	0x3fe00000
 800763c:	40490000 	.word	0x40490000
 8007640:	40590000 	.word	0x40590000
    } else {
      rtb_Exp = (0.0 - SIM0_DW.Memory_PreviousInput_a) / 5.0 +
 8007644:	4bad      	ldr	r3, [pc, #692]	; (80078fc <SIM0_step+0xff4>)
 8007646:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 800764a:	3318      	adds	r3, #24
 800764c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007650:	f04f 0000 	mov.w	r0, #0
 8007654:	f04f 0100 	mov.w	r1, #0
 8007658:	f7f8 fe08 	bl	800026c <__aeabi_dsub>
 800765c:	4602      	mov	r2, r0
 800765e:	460b      	mov	r3, r1
 8007660:	4610      	mov	r0, r2
 8007662:	4619      	mov	r1, r3
 8007664:	f04f 0200 	mov.w	r2, #0
 8007668:	4ba5      	ldr	r3, [pc, #660]	; (8007900 <SIM0_step+0xff8>)
 800766a:	f7f9 f8e1 	bl	8000830 <__aeabi_ddiv>
 800766e:	4602      	mov	r2, r0
 8007670:	460b      	mov	r3, r1
 8007672:	4610      	mov	r0, r2
 8007674:	4619      	mov	r1, r3
        SIM0_DW.Memory_PreviousInput_a;
 8007676:	4ba1      	ldr	r3, [pc, #644]	; (80078fc <SIM0_step+0xff4>)
 8007678:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 800767c:	3318      	adds	r3, #24
 800767e:	e9d3 2300 	ldrd	r2, r3, [r3]
      rtb_Exp = (0.0 - SIM0_DW.Memory_PreviousInput_a) / 5.0 +
 8007682:	f7f8 fdf5 	bl	8000270 <__adddf3>
 8007686:	4602      	mov	r2, r0
 8007688:	460b      	mov	r3, r1
 800768a:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 800768e:	f101 0108 	add.w	r1, r1, #8
 8007692:	e9c1 2300 	strd	r2, r3, [r1]
      rtb_current = -(0.0 - rtb_Exp) / 10.0;
 8007696:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 800769a:	f103 0308 	add.w	r3, r3, #8
 800769e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076a2:	f04f 0000 	mov.w	r0, #0
 80076a6:	f04f 0100 	mov.w	r1, #0
 80076aa:	f7f8 fddf 	bl	800026c <__aeabi_dsub>
 80076ae:	4602      	mov	r2, r0
 80076b0:	460b      	mov	r3, r1
 80076b2:	4690      	mov	r8, r2
 80076b4:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 80076b8:	f04f 0200 	mov.w	r2, #0
 80076bc:	4b91      	ldr	r3, [pc, #580]	; (8007904 <SIM0_step+0xffc>)
 80076be:	4640      	mov	r0, r8
 80076c0:	4649      	mov	r1, r9
 80076c2:	f7f9 f8b5 	bl	8000830 <__aeabi_ddiv>
 80076c6:	4602      	mov	r2, r0
 80076c8:	460b      	mov	r3, r1
 80076ca:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 80076ce:	e9c1 2300 	strd	r2, r3, [r1]
 80076d2:	e008      	b.n	80076e6 <SIM0_step+0xdde>
    }
  } else {
    rtb_Exp = -1.0;
 80076d4:	f04f 0200 	mov.w	r2, #0
 80076d8:	4b8b      	ldr	r3, [pc, #556]	; (8007908 <SIM0_step+0x1000>)
 80076da:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 80076de:	f101 0108 	add.w	r1, r1, #8
 80076e2:	e9c1 2300 	strd	r2, r3, [r1]
  }

  SIM0_Y.vehicle_voltage = rtb_Exp;
 80076e6:	4989      	ldr	r1, [pc, #548]	; (800790c <SIM0_step+0x1004>)
 80076e8:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 80076ec:	f103 0308 	add.w	r3, r3, #8
 80076f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076f4:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
  SIM0_Y.current = rtb_current;
 80076f8:	4984      	ldr	r1, [pc, #528]	; (800790c <SIM0_step+0x1004>)
 80076fa:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 80076fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007702:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
  SIM0_Y.accumulator_voltage = rtb_y;
 8007706:	4981      	ldr	r1, [pc, #516]	; (800790c <SIM0_step+0x1004>)
 8007708:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 800770c:	f103 0310 	add.w	r3, r3, #16
 8007710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007714:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
  SIM0_Y.AIR_minus_closed = rtb_Memory22;
 8007718:	497c      	ldr	r1, [pc, #496]	; (800790c <SIM0_step+0x1004>)
 800771a:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 800771e:	f103 0308 	add.w	r3, r3, #8
 8007722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007726:	e9c1 2304 	strd	r2, r3, [r1, #16]
  SIM0_Y.AIR_plus_closed = rtb_Product1_n;
 800772a:	4978      	ldr	r1, [pc, #480]	; (800790c <SIM0_step+0x1004>)
 800772c:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8007730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007734:	e9c1 2306 	strd	r2, r3, [r1, #24]
  memcpy(&SIM0_Y.cell_temperatures[0], &SIM0_P.cTmp[0], 60U * sizeof(real_T));
 8007738:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800773c:	4974      	ldr	r1, [pc, #464]	; (8007910 <SIM0_step+0x1008>)
 800773e:	4875      	ldr	r0, [pc, #468]	; (8007914 <SIM0_step+0x100c>)
 8007740:	f012 fd84 	bl	801a24c <memcpy>
  SIM0_Y.IMD_ok = SIM0_P.IMD_ok;
 8007744:	4b74      	ldr	r3, [pc, #464]	; (8007918 <SIM0_step+0x1010>)
 8007746:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800774a:	4970      	ldr	r1, [pc, #448]	; (800790c <SIM0_step+0x1004>)
 800774c:	f501 615f 	add.w	r1, r1, #3568	; 0xdf0
 8007750:	e9c1 2300 	strd	r2, r3, [r1]
  SIM0_DW.Memory20_PreviousInput = rtb_current;
 8007754:	4b69      	ldr	r3, [pc, #420]	; (80078fc <SIM0_step+0xff4>)
 8007756:	f603 0108 	addw	r1, r3, #2056	; 0x808
 800775a:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 800775e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007762:	e9c1 2300 	strd	r2, r3, [r1]
  SIM0_DW.Memory11_PreviousInput = rtb_Memory20;
 8007766:	4b65      	ldr	r3, [pc, #404]	; (80078fc <SIM0_step+0xff4>)
 8007768:	f503 6101 	add.w	r1, r3, #2064	; 0x810
 800776c:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8007770:	f103 0318 	add.w	r3, r3, #24
 8007774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007778:	e9c1 2300 	strd	r2, r3, [r1]
  SIM0_DW.Memory9_PreviousInput = fabs(rtb_Memory20 +
    SIM0_DW.Memory9_PreviousInput);
 800777c:	4b5f      	ldr	r3, [pc, #380]	; (80078fc <SIM0_step+0xff4>)
 800777e:	f603 73f8 	addw	r3, r3, #4088	; 0xff8
 8007782:	e9d3 0100 	ldrd	r0, r1, [r3]
  SIM0_DW.Memory9_PreviousInput = fabs(rtb_Memory20 +
 8007786:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 800778a:	f103 0318 	add.w	r3, r3, #24
 800778e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007792:	f7f8 fd6d 	bl	8000270 <__adddf3>
 8007796:	4602      	mov	r2, r0
 8007798:	460b      	mov	r3, r1
 800779a:	4614      	mov	r4, r2
 800779c:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80077a0:	4b56      	ldr	r3, [pc, #344]	; (80078fc <SIM0_step+0xff4>)
 80077a2:	f603 73f8 	addw	r3, r3, #4088	; 0xff8
 80077a6:	e9c3 4500 	strd	r4, r5, [r3]
  for (i = 0; i < 126; i++) {
 80077aa:	2300      	movs	r3, #0
 80077ac:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 80077b0:	f102 020c 	add.w	r2, r2, #12
 80077b4:	6013      	str	r3, [r2, #0]
 80077b6:	e109      	b.n	80079cc <SIM0_step+0x10c4>
    rtb_Memory22 = rtb_Memory21[i];
 80077b8:	f607 32d8 	addw	r2, r7, #3032	; 0xbd8
 80077bc:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 80077c0:	f103 030c 	add.w	r3, r3, #12
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	00db      	lsls	r3, r3, #3
 80077c8:	4413      	add	r3, r2
 80077ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ce:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 80077d2:	f101 0108 	add.w	r1, r1, #8
 80077d6:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_Memory20 = rtb_Switch[i];
 80077da:	f107 0318 	add.w	r3, r7, #24
 80077de:	3b10      	subs	r3, #16
 80077e0:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 80077e4:	f102 020c 	add.w	r2, r2, #12
 80077e8:	6812      	ldr	r2, [r2, #0]
 80077ea:	00d2      	lsls	r2, r2, #3
 80077ec:	4413      	add	r3, r2
 80077ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077f2:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 80077f6:	f101 0118 	add.w	r1, r1, #24
 80077fa:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_is_drive = rtb_Rpz[i];
 80077fe:	f507 62fd 	add.w	r2, r7, #2024	; 0x7e8
 8007802:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8007806:	f103 030c 	add.w	r3, r3, #12
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	00db      	lsls	r3, r3, #3
 800780e:	4413      	add	r3, r2
 8007810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007814:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 8007818:	f101 0118 	add.w	r1, r1, #24
 800781c:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_DW.Memory15_PreviousInput[i] = rtb_is_drive;
 8007820:	4a36      	ldr	r2, [pc, #216]	; (80078fc <SIM0_step+0xff4>)
 8007822:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8007826:	f103 030c 	add.w	r3, r3, #12
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	3305      	adds	r3, #5
 800782e:	00db      	lsls	r3, r3, #3
 8007830:	18d1      	adds	r1, r2, r3
 8007832:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8007836:	f103 0318 	add.w	r3, r3, #24
 800783a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800783e:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_DW.Memory12_PreviousInput[i] = rtb_Rsz[i];
 8007842:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 8007846:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 800784a:	f103 030c 	add.w	r3, r3, #12
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	00db      	lsls	r3, r3, #3
 8007852:	4413      	add	r3, r2
 8007854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007858:	4828      	ldr	r0, [pc, #160]	; (80078fc <SIM0_step+0xff4>)
 800785a:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 800785e:	f101 010c 	add.w	r1, r1, #12
 8007862:	6809      	ldr	r1, [r1, #0]
 8007864:	3183      	adds	r1, #131	; 0x83
 8007866:	00c9      	lsls	r1, r1, #3
 8007868:	4401      	add	r1, r0
 800786a:	e9c1 2300 	strd	r2, r3, [r1]
    if (rtb_Memory20 > rtb_Memory22) {
 800786e:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8007872:	f103 0308 	add.w	r3, r3, #8
 8007876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800787a:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 800787e:	f101 0118 	add.w	r1, r1, #24
 8007882:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007886:	f7f9 f939 	bl	8000afc <__aeabi_dcmpgt>
 800788a:	4603      	mov	r3, r0
 800788c:	2b00      	cmp	r3, #0
 800788e:	d012      	beq.n	80078b6 <SIM0_step+0xfae>
      SIM0_DW.Memory_PreviousInput[i] = rtb_Memory22;
 8007890:	4a1a      	ldr	r2, [pc, #104]	; (80078fc <SIM0_step+0xff4>)
 8007892:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8007896:	f103 030c 	add.w	r3, r3, #12
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f203 1303 	addw	r3, r3, #259	; 0x103
 80078a0:	00db      	lsls	r3, r3, #3
 80078a2:	18d1      	adds	r1, r2, r3
 80078a4:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 80078a8:	f103 0308 	add.w	r3, r3, #8
 80078ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078b0:	e9c1 2300 	strd	r2, r3, [r1]
 80078b4:	e044      	b.n	8007940 <SIM0_step+0x1038>
    } else if (rtb_Memory20 < SIM0_P.Constant1_Value) {
 80078b6:	4b18      	ldr	r3, [pc, #96]	; (8007918 <SIM0_step+0x1010>)
 80078b8:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80078bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078c0:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 80078c4:	f101 0118 	add.w	r1, r1, #24
 80078c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80078cc:	f7f9 f8f8 	bl	8000ac0 <__aeabi_dcmplt>
 80078d0:	4603      	mov	r3, r0
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d022      	beq.n	800791c <SIM0_step+0x1014>
      SIM0_DW.Memory_PreviousInput[i] = SIM0_P.Constant1_Value;
 80078d6:	4b10      	ldr	r3, [pc, #64]	; (8007918 <SIM0_step+0x1010>)
 80078d8:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80078dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078e0:	4806      	ldr	r0, [pc, #24]	; (80078fc <SIM0_step+0xff4>)
 80078e2:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 80078e6:	f101 010c 	add.w	r1, r1, #12
 80078ea:	6809      	ldr	r1, [r1, #0]
 80078ec:	f201 1103 	addw	r1, r1, #259	; 0x103
 80078f0:	00c9      	lsls	r1, r1, #3
 80078f2:	4401      	add	r1, r0
 80078f4:	e9c1 2300 	strd	r2, r3, [r1]
 80078f8:	e022      	b.n	8007940 <SIM0_step+0x1038>
 80078fa:	bf00      	nop
 80078fc:	2001be48 	.word	0x2001be48
 8007900:	40140000 	.word	0x40140000
 8007904:	40240000 	.word	0x40240000
 8007908:	bff00000 	.word	0xbff00000
 800790c:	2001d6a8 	.word	0x2001d6a8
 8007910:	20000bb8 	.word	0x20000bb8
 8007914:	2001e2b8 	.word	0x2001e2b8
 8007918:	200002e0 	.word	0x200002e0
    } else {
      SIM0_DW.Memory_PreviousInput[i] = rtb_Memory20;
 800791c:	4a94      	ldr	r2, [pc, #592]	; (8007b70 <SIM0_step+0x1268>)
 800791e:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8007922:	f103 030c 	add.w	r3, r3, #12
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f203 1303 	addw	r3, r3, #259	; 0x103
 800792c:	00db      	lsls	r3, r3, #3
 800792e:	18d1      	adds	r1, r2, r3
 8007930:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8007934:	f103 0318 	add.w	r3, r3, #24
 8007938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800793c:	e9c1 2300 	strd	r2, r3, [r1]
    }

    SIM0_DW.Memory10_PreviousInput[i] = rtb_Memory22;
 8007940:	4a8b      	ldr	r2, [pc, #556]	; (8007b70 <SIM0_step+0x1268>)
 8007942:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8007946:	f103 030c 	add.w	r3, r3, #12
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f203 1381 	addw	r3, r3, #385	; 0x181
 8007950:	00db      	lsls	r3, r3, #3
 8007952:	18d1      	adds	r1, r2, r3
 8007954:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8007958:	f103 0308 	add.w	r3, r3, #8
 800795c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007960:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_DW.Memory19_PreviousInput[i] = SIM0_U.BalanceOut[i];
 8007964:	4a83      	ldr	r2, [pc, #524]	; (8007b74 <SIM0_step+0x126c>)
 8007966:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 800796a:	f103 030c 	add.w	r3, r3, #12
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	330d      	adds	r3, #13
 8007972:	00db      	lsls	r3, r3, #3
 8007974:	4413      	add	r3, r2
 8007976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800797a:	487d      	ldr	r0, [pc, #500]	; (8007b70 <SIM0_step+0x1268>)
 800797c:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 8007980:	f101 010c 	add.w	r1, r1, #12
 8007984:	6809      	ldr	r1, [r1, #0]
 8007986:	f501 7100 	add.w	r1, r1, #512	; 0x200
 800798a:	00c9      	lsls	r1, r1, #3
 800798c:	4401      	add	r1, r0
 800798e:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_DW.Memory21_PreviousInput[i] = rtb_is_drive;
 8007992:	4a77      	ldr	r2, [pc, #476]	; (8007b70 <SIM0_step+0x1268>)
 8007994:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8007998:	f103 030c 	add.w	r3, r3, #12
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80079a2:	00db      	lsls	r3, r3, #3
 80079a4:	18d1      	adds	r1, r2, r3
 80079a6:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 80079aa:	f103 0318 	add.w	r3, r3, #24
 80079ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079b2:	e9c1 2300 	strd	r2, r3, [r1]
  for (i = 0; i < 126; i++) {
 80079b6:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 80079ba:	f103 030c 	add.w	r3, r3, #12
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	3301      	adds	r3, #1
 80079c2:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 80079c6:	f102 020c 	add.w	r2, r2, #12
 80079ca:	6013      	str	r3, [r2, #0]
 80079cc:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 80079d0:	f103 030c 	add.w	r3, r3, #12
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	2b7d      	cmp	r3, #125	; 0x7d
 80079d8:	f77f aeee 	ble.w	80077b8 <SIM0_step+0xeb0>
  }

  SIM0_DW.Memory1_PreviousInput = SIM0_U.AMS_error;
 80079dc:	4b65      	ldr	r3, [pc, #404]	; (8007b74 <SIM0_step+0x126c>)
 80079de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079e2:	4963      	ldr	r1, [pc, #396]	; (8007b70 <SIM0_step+0x1268>)
 80079e4:	f501 51bf 	add.w	r1, r1, #6112	; 0x17e0
 80079e8:	e9c1 2300 	strd	r2, r3, [r1]
  SIM0_DW.Memory2_PreviousInput = SIM0_U.AMS_error_reset;
 80079ec:	4b61      	ldr	r3, [pc, #388]	; (8007b74 <SIM0_step+0x126c>)
 80079ee:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80079f2:	4b5f      	ldr	r3, [pc, #380]	; (8007b70 <SIM0_step+0x1268>)
 80079f4:	f503 53bf 	add.w	r3, r3, #6112	; 0x17e0
 80079f8:	3308      	adds	r3, #8
 80079fa:	e9c3 0100 	strd	r0, r1, [r3]
  SIM0_DW.Memory_PreviousInput_m = rtb_Logic_idx_0;
 80079fe:	4b5c      	ldr	r3, [pc, #368]	; (8007b70 <SIM0_step+0x1268>)
 8007a00:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 8007a04:	3318      	adds	r3, #24
 8007a06:	f507 529e 	add.w	r2, r7, #5056	; 0x13c0
 8007a0a:	f102 0217 	add.w	r2, r2, #23
 8007a0e:	7812      	ldrb	r2, [r2, #0]
 8007a10:	701a      	strb	r2, [r3, #0]
  SIM0_DW.Memory3_PreviousInput = SIM0_U.IMD_error;
 8007a12:	4b58      	ldr	r3, [pc, #352]	; (8007b74 <SIM0_step+0x126c>)
 8007a14:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8007a18:	4b55      	ldr	r3, [pc, #340]	; (8007b70 <SIM0_step+0x1268>)
 8007a1a:	f503 53bf 	add.w	r3, r3, #6112	; 0x17e0
 8007a1e:	3310      	adds	r3, #16
 8007a20:	e9c3 0100 	strd	r0, r1, [r3]
  SIM0_DW.Memory4_PreviousInput = SIM0_U.IMD_error_reset;
 8007a24:	4b53      	ldr	r3, [pc, #332]	; (8007b74 <SIM0_step+0x126c>)
 8007a26:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8007a2a:	4b51      	ldr	r3, [pc, #324]	; (8007b70 <SIM0_step+0x1268>)
 8007a2c:	f503 53bf 	add.w	r3, r3, #6112	; 0x17e0
 8007a30:	3318      	adds	r3, #24
 8007a32:	e9c3 0100 	strd	r0, r1, [r3]
  SIM0_DW.Memory_PreviousInput_c = rtb_Logic_p_idx_0;
 8007a36:	4b4e      	ldr	r3, [pc, #312]	; (8007b70 <SIM0_step+0x1268>)
 8007a38:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 8007a3c:	3319      	adds	r3, #25
 8007a3e:	f507 529e 	add.w	r2, r7, #5056	; 0x13c0
 8007a42:	f102 0215 	add.w	r2, r2, #21
 8007a46:	7812      	ldrb	r2, [r2, #0]
 8007a48:	701a      	strb	r2, [r3, #0]
  SIM0_DW.Memory5_PreviousInput = SIM0_U.SC;
 8007a4a:	4b4a      	ldr	r3, [pc, #296]	; (8007b74 <SIM0_step+0x126c>)
 8007a4c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007a50:	4947      	ldr	r1, [pc, #284]	; (8007b70 <SIM0_step+0x1268>)
 8007a52:	f501 51c0 	add.w	r1, r1, #6144	; 0x1800
 8007a56:	e9c1 2300 	strd	r2, r3, [r1]
  SIM0_DW.Delay1_DSTATE = SIM0_DW.Memory14_PreviousInput;
 8007a5a:	4b45      	ldr	r3, [pc, #276]	; (8007b70 <SIM0_step+0x1268>)
 8007a5c:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 8007a60:	3308      	adds	r3, #8
 8007a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a66:	4942      	ldr	r1, [pc, #264]	; (8007b70 <SIM0_step+0x1268>)
 8007a68:	e9c1 2300 	strd	r2, r3, [r1]
  SIM0_DW.Delay3_DSTATE[0] = SIM0_DW.Delay3_DSTATE[1];
 8007a6c:	4b40      	ldr	r3, [pc, #256]	; (8007b70 <SIM0_step+0x1268>)
 8007a6e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8007a72:	493f      	ldr	r1, [pc, #252]	; (8007b70 <SIM0_step+0x1268>)
 8007a74:	e9c1 2302 	strd	r2, r3, [r1, #8]
  SIM0_DW.Delay3_DSTATE[1] = SIM0_DW.Memory8_PreviousInput;
 8007a78:	4b3d      	ldr	r3, [pc, #244]	; (8007b70 <SIM0_step+0x1268>)
 8007a7a:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 8007a7e:	3310      	adds	r3, #16
 8007a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a84:	493a      	ldr	r1, [pc, #232]	; (8007b70 <SIM0_step+0x1268>)
 8007a86:	e9c1 2304 	strd	r2, r3, [r1, #16]
  SIM0_DW.Delay2_DSTATE[0] = SIM0_DW.Delay2_DSTATE[1];
 8007a8a:	4b39      	ldr	r3, [pc, #228]	; (8007b70 <SIM0_step+0x1268>)
 8007a8c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007a90:	4937      	ldr	r1, [pc, #220]	; (8007b70 <SIM0_step+0x1268>)
 8007a92:	e9c1 2306 	strd	r2, r3, [r1, #24]
  SIM0_DW.Delay2_DSTATE[1] = SIM0_DW.Memory13_PreviousInput;
 8007a96:	4b36      	ldr	r3, [pc, #216]	; (8007b70 <SIM0_step+0x1268>)
 8007a98:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 8007a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aa0:	4933      	ldr	r1, [pc, #204]	; (8007b70 <SIM0_step+0x1268>)
 8007aa2:	e9c1 2308 	strd	r2, r3, [r1, #32]
  SIM0_DW.Memory6_PreviousInput = SIM0_U.charge;
 8007aa6:	4b33      	ldr	r3, [pc, #204]	; (8007b74 <SIM0_step+0x126c>)
 8007aa8:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8007aac:	4b30      	ldr	r3, [pc, #192]	; (8007b70 <SIM0_step+0x1268>)
 8007aae:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 8007ab2:	3308      	adds	r3, #8
 8007ab4:	e9c3 0100 	strd	r0, r1, [r3]
  SIM0_DW.Memory7_PreviousInput = SIM0_U.drive;
 8007ab8:	4b2e      	ldr	r3, [pc, #184]	; (8007b74 <SIM0_step+0x126c>)
 8007aba:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8007abe:	4b2c      	ldr	r3, [pc, #176]	; (8007b70 <SIM0_step+0x1268>)
 8007ac0:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 8007ac4:	3310      	adds	r3, #16
 8007ac6:	e9c3 0100 	strd	r0, r1, [r3]
  SIM0_DW.Memory22_PreviousInput = SIM0_U.drive_current;
 8007aca:	4b2a      	ldr	r3, [pc, #168]	; (8007b74 <SIM0_step+0x126c>)
 8007acc:	f503 638b 	add.w	r3, r3, #1112	; 0x458
 8007ad0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007ad4:	4b26      	ldr	r3, [pc, #152]	; (8007b70 <SIM0_step+0x1268>)
 8007ad6:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 8007ada:	3318      	adds	r3, #24
 8007adc:	e9c3 0100 	strd	r0, r1, [r3]
  SIM0_DW.Memory17_PreviousInput = SIM0_U.VoltageLimit;
 8007ae0:	4b24      	ldr	r3, [pc, #144]	; (8007b74 <SIM0_step+0x126c>)
 8007ae2:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8007ae6:	4922      	ldr	r1, [pc, #136]	; (8007b70 <SIM0_step+0x1268>)
 8007ae8:	f501 51c1 	add.w	r1, r1, #6176	; 0x1820
 8007aec:	e9c1 2300 	strd	r2, r3, [r1]
  SIM0_DW.Memory16_PreviousInput = SIM0_U.EnableCharge;
 8007af0:	4b20      	ldr	r3, [pc, #128]	; (8007b74 <SIM0_step+0x126c>)
 8007af2:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8007af6:	4b1e      	ldr	r3, [pc, #120]	; (8007b70 <SIM0_step+0x1268>)
 8007af8:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 8007afc:	3308      	adds	r3, #8
 8007afe:	e9c3 0100 	strd	r0, r1, [r3]
  SIM0_DW.Memory18_PreviousInput = SIM0_U.CurrentLimit;
 8007b02:	4b1c      	ldr	r3, [pc, #112]	; (8007b74 <SIM0_step+0x126c>)
 8007b04:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8007b08:	4b19      	ldr	r3, [pc, #100]	; (8007b70 <SIM0_step+0x1268>)
 8007b0a:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 8007b0e:	3310      	adds	r3, #16
 8007b10:	e9c3 0100 	strd	r0, r1, [r3]
  SIM0_DW.Memory_PreviousInput_a = rtb_Exp;
 8007b14:	4b16      	ldr	r3, [pc, #88]	; (8007b70 <SIM0_step+0x1268>)
 8007b16:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 8007b1a:	3318      	adds	r3, #24
 8007b1c:	f507 52a0 	add.w	r2, r7, #5120	; 0x1400
 8007b20:	f102 0208 	add.w	r2, r2, #8
 8007b24:	e9d2 0100 	ldrd	r0, r1, [r2]
 8007b28:	e9c3 0100 	strd	r0, r1, [r3]
  SIM0_DW.Memory13_PreviousInput = SIM0_U.EnableAirPlus;
 8007b2c:	4b11      	ldr	r3, [pc, #68]	; (8007b74 <SIM0_step+0x126c>)
 8007b2e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8007b32:	490f      	ldr	r1, [pc, #60]	; (8007b70 <SIM0_step+0x1268>)
 8007b34:	f501 51c2 	add.w	r1, r1, #6208	; 0x1840
 8007b38:	e9c1 2300 	strd	r2, r3, [r1]
  SIM0_DW.Memory14_PreviousInput = SIM0_U.EnablePrecharge;
 8007b3c:	4b0d      	ldr	r3, [pc, #52]	; (8007b74 <SIM0_step+0x126c>)
 8007b3e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8007b42:	4b0b      	ldr	r3, [pc, #44]	; (8007b70 <SIM0_step+0x1268>)
 8007b44:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 8007b48:	3308      	adds	r3, #8
 8007b4a:	e9c3 0100 	strd	r0, r1, [r3]
  SIM0_DW.Memory8_PreviousInput = SIM0_U.EnableAirMinus;
 8007b4e:	4b09      	ldr	r3, [pc, #36]	; (8007b74 <SIM0_step+0x126c>)
 8007b50:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8007b54:	4b06      	ldr	r3, [pc, #24]	; (8007b70 <SIM0_step+0x1268>)
 8007b56:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 8007b5a:	3310      	adds	r3, #16
 8007b5c:	e9c3 0100 	strd	r0, r1, [r3]
}
 8007b60:	bf00      	nop
 8007b62:	f507 57a0 	add.w	r7, r7, #5120	; 0x1400
 8007b66:	371c      	adds	r7, #28
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b6e:	bf00      	nop
 8007b70:	2001be48 	.word	0x2001be48
 8007b74:	2001e4a0 	.word	0x2001e4a0

08007b78 <SIM0_initialize>:

void SIM0_initialize(void)
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b083      	sub	sp, #12
 8007b7c:	af00      	add	r7, sp, #0
  {
    int32_T i;
    SIM0_DW.Memory20_PreviousInput = SIM0_P.Memory20_InitialCondition;
 8007b7e:	4b10      	ldr	r3, [pc, #64]	; (8007bc0 <SIM0_initialize+0x48>)
 8007b80:	f503 637f 	add.w	r3, r3, #4080	; 0xff0
 8007b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b88:	490e      	ldr	r1, [pc, #56]	; (8007bc4 <SIM0_initialize+0x4c>)
 8007b8a:	f601 0108 	addw	r1, r1, #2056	; 0x808
 8007b8e:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_DW.Memory11_PreviousInput = SIM0_P.Memory11_InitialCondition;
 8007b92:	4b0b      	ldr	r3, [pc, #44]	; (8007bc0 <SIM0_initialize+0x48>)
 8007b94:	f603 73f8 	addw	r3, r3, #4088	; 0xff8
 8007b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b9c:	4909      	ldr	r1, [pc, #36]	; (8007bc4 <SIM0_initialize+0x4c>)
 8007b9e:	f501 6101 	add.w	r1, r1, #2064	; 0x810
 8007ba2:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_DW.Memory9_PreviousInput = SIM0_P.Memory9_InitialCondition;
 8007ba6:	4b06      	ldr	r3, [pc, #24]	; (8007bc0 <SIM0_initialize+0x48>)
 8007ba8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bb0:	4904      	ldr	r1, [pc, #16]	; (8007bc4 <SIM0_initialize+0x4c>)
 8007bb2:	f601 71f8 	addw	r1, r1, #4088	; 0xff8
 8007bb6:	e9c1 2300 	strd	r2, r3, [r1]
    for (i = 0; i < 126; i++) {
 8007bba:	2300      	movs	r3, #0
 8007bbc:	607b      	str	r3, [r7, #4]
 8007bbe:	e05b      	b.n	8007c78 <SIM0_initialize+0x100>
 8007bc0:	200002e0 	.word	0x200002e0
 8007bc4:	2001be48 	.word	0x2001be48
      SIM0_DW.Memory15_PreviousInput[i] = SIM0_P.Memory15_InitialCondition;
 8007bc8:	4ba4      	ldr	r3, [pc, #656]	; (8007e5c <SIM0_initialize+0x2e4>)
 8007bca:	f603 33f8 	addw	r3, r3, #3064	; 0xbf8
 8007bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bd2:	48a3      	ldr	r0, [pc, #652]	; (8007e60 <SIM0_initialize+0x2e8>)
 8007bd4:	6879      	ldr	r1, [r7, #4]
 8007bd6:	3105      	adds	r1, #5
 8007bd8:	00c9      	lsls	r1, r1, #3
 8007bda:	4401      	add	r1, r0
 8007bdc:	e9c1 2300 	strd	r2, r3, [r1]
      SIM0_DW.Memory12_PreviousInput[i] = SIM0_P.Memory12_InitialCondition[i];
 8007be0:	4a9e      	ldr	r2, [pc, #632]	; (8007e5c <SIM0_initialize+0x2e4>)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8007be8:	00db      	lsls	r3, r3, #3
 8007bea:	4413      	add	r3, r2
 8007bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bf0:	489b      	ldr	r0, [pc, #620]	; (8007e60 <SIM0_initialize+0x2e8>)
 8007bf2:	6879      	ldr	r1, [r7, #4]
 8007bf4:	3183      	adds	r1, #131	; 0x83
 8007bf6:	00c9      	lsls	r1, r1, #3
 8007bf8:	4401      	add	r1, r0
 8007bfa:	e9c1 2300 	strd	r2, r3, [r1]
      SIM0_DW.Memory_PreviousInput[i] = SIM0_P.cQur[i];
 8007bfe:	4a97      	ldr	r2, [pc, #604]	; (8007e5c <SIM0_initialize+0x2e4>)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	339d      	adds	r3, #157	; 0x9d
 8007c04:	00db      	lsls	r3, r3, #3
 8007c06:	4413      	add	r3, r2
 8007c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c0c:	4894      	ldr	r0, [pc, #592]	; (8007e60 <SIM0_initialize+0x2e8>)
 8007c0e:	6879      	ldr	r1, [r7, #4]
 8007c10:	f201 1103 	addw	r1, r1, #259	; 0x103
 8007c14:	00c9      	lsls	r1, r1, #3
 8007c16:	4401      	add	r1, r0
 8007c18:	e9c1 2300 	strd	r2, r3, [r1]
      SIM0_DW.Memory10_PreviousInput[i] = SIM0_P.cCap[i];
 8007c1c:	4a8f      	ldr	r2, [pc, #572]	; (8007e5c <SIM0_initialize+0x2e4>)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	331f      	adds	r3, #31
 8007c22:	00db      	lsls	r3, r3, #3
 8007c24:	4413      	add	r3, r2
 8007c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c2a:	488d      	ldr	r0, [pc, #564]	; (8007e60 <SIM0_initialize+0x2e8>)
 8007c2c:	6879      	ldr	r1, [r7, #4]
 8007c2e:	f201 1181 	addw	r1, r1, #385	; 0x181
 8007c32:	00c9      	lsls	r1, r1, #3
 8007c34:	4401      	add	r1, r0
 8007c36:	e9c1 2300 	strd	r2, r3, [r1]
      SIM0_DW.Memory19_PreviousInput[i] = SIM0_P.Memory19_InitialCondition;
 8007c3a:	4b88      	ldr	r3, [pc, #544]	; (8007e5c <SIM0_initialize+0x2e4>)
 8007c3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c40:	3308      	adds	r3, #8
 8007c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c46:	4886      	ldr	r0, [pc, #536]	; (8007e60 <SIM0_initialize+0x2e8>)
 8007c48:	6879      	ldr	r1, [r7, #4]
 8007c4a:	f501 7100 	add.w	r1, r1, #512	; 0x200
 8007c4e:	00c9      	lsls	r1, r1, #3
 8007c50:	4401      	add	r1, r0
 8007c52:	e9c1 2300 	strd	r2, r3, [r1]
      SIM0_DW.Memory21_PreviousInput[i] = SIM0_P.Memory21_InitialCondition;
 8007c56:	4b81      	ldr	r3, [pc, #516]	; (8007e5c <SIM0_initialize+0x2e4>)
 8007c58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c5c:	3310      	adds	r3, #16
 8007c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c62:	487f      	ldr	r0, [pc, #508]	; (8007e60 <SIM0_initialize+0x2e8>)
 8007c64:	6879      	ldr	r1, [r7, #4]
 8007c66:	f201 217e 	addw	r1, r1, #638	; 0x27e
 8007c6a:	00c9      	lsls	r1, r1, #3
 8007c6c:	4401      	add	r1, r0
 8007c6e:	e9c1 2300 	strd	r2, r3, [r1]
    for (i = 0; i < 126; i++) {
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	3301      	adds	r3, #1
 8007c76:	607b      	str	r3, [r7, #4]
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2b7d      	cmp	r3, #125	; 0x7d
 8007c7c:	dda4      	ble.n	8007bc8 <SIM0_initialize+0x50>
    }

    SIM0_DW.Memory1_PreviousInput = SIM0_P.Memory1_InitialCondition;
 8007c7e:	4b77      	ldr	r3, [pc, #476]	; (8007e5c <SIM0_initialize+0x2e4>)
 8007c80:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8007c84:	3308      	adds	r3, #8
 8007c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c8a:	4975      	ldr	r1, [pc, #468]	; (8007e60 <SIM0_initialize+0x2e8>)
 8007c8c:	f501 51bf 	add.w	r1, r1, #6112	; 0x17e0
 8007c90:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_DW.Memory2_PreviousInput = SIM0_P.Memory2_InitialCondition;
 8007c94:	4b71      	ldr	r3, [pc, #452]	; (8007e5c <SIM0_initialize+0x2e4>)
 8007c96:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8007c9a:	3310      	adds	r3, #16
 8007c9c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007ca0:	4b6f      	ldr	r3, [pc, #444]	; (8007e60 <SIM0_initialize+0x2e8>)
 8007ca2:	f503 53bf 	add.w	r3, r3, #6112	; 0x17e0
 8007ca6:	3308      	adds	r3, #8
 8007ca8:	e9c3 0100 	strd	r0, r1, [r3]
    SIM0_DW.Memory_PreviousInput_m = SIM0_P.SRFlipFlop2_initial_condition;
 8007cac:	4b6b      	ldr	r3, [pc, #428]	; (8007e5c <SIM0_initialize+0x2e4>)
 8007cae:	f893 2bf0 	ldrb.w	r2, [r3, #3056]	; 0xbf0
 8007cb2:	4b6b      	ldr	r3, [pc, #428]	; (8007e60 <SIM0_initialize+0x2e8>)
 8007cb4:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 8007cb8:	3318      	adds	r3, #24
 8007cba:	701a      	strb	r2, [r3, #0]
    SIM0_DW.Memory3_PreviousInput = SIM0_P.Memory3_InitialCondition;
 8007cbc:	4b67      	ldr	r3, [pc, #412]	; (8007e5c <SIM0_initialize+0x2e4>)
 8007cbe:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8007cc2:	3318      	adds	r3, #24
 8007cc4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007cc8:	4b65      	ldr	r3, [pc, #404]	; (8007e60 <SIM0_initialize+0x2e8>)
 8007cca:	f503 53bf 	add.w	r3, r3, #6112	; 0x17e0
 8007cce:	3310      	adds	r3, #16
 8007cd0:	e9c3 0100 	strd	r0, r1, [r3]
    SIM0_DW.Memory4_PreviousInput = SIM0_P.Memory4_InitialCondition;
 8007cd4:	4b61      	ldr	r3, [pc, #388]	; (8007e5c <SIM0_initialize+0x2e4>)
 8007cd6:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8007cda:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007cde:	4b60      	ldr	r3, [pc, #384]	; (8007e60 <SIM0_initialize+0x2e8>)
 8007ce0:	f503 53bf 	add.w	r3, r3, #6112	; 0x17e0
 8007ce4:	3318      	adds	r3, #24
 8007ce6:	e9c3 0100 	strd	r0, r1, [r3]
    SIM0_DW.Memory_PreviousInput_c = SIM0_P.SRFlipFlop1_initial_condition;
 8007cea:	4b5c      	ldr	r3, [pc, #368]	; (8007e5c <SIM0_initialize+0x2e4>)
 8007cec:	f893 2bf1 	ldrb.w	r2, [r3, #3057]	; 0xbf1
 8007cf0:	4b5b      	ldr	r3, [pc, #364]	; (8007e60 <SIM0_initialize+0x2e8>)
 8007cf2:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 8007cf6:	3319      	adds	r3, #25
 8007cf8:	701a      	strb	r2, [r3, #0]
    SIM0_DW.Memory5_PreviousInput = SIM0_P.Memory5_InitialCondition;
 8007cfa:	4b58      	ldr	r3, [pc, #352]	; (8007e5c <SIM0_initialize+0x2e4>)
 8007cfc:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8007d00:	3308      	adds	r3, #8
 8007d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d06:	4956      	ldr	r1, [pc, #344]	; (8007e60 <SIM0_initialize+0x2e8>)
 8007d08:	f501 51c0 	add.w	r1, r1, #6144	; 0x1800
 8007d0c:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_DW.Delay1_DSTATE = SIM0_P.Delay1_InitialCondition;
 8007d10:	4b52      	ldr	r3, [pc, #328]	; (8007e5c <SIM0_initialize+0x2e4>)
 8007d12:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8007d16:	3310      	adds	r3, #16
 8007d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d1c:	4950      	ldr	r1, [pc, #320]	; (8007e60 <SIM0_initialize+0x2e8>)
 8007d1e:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_DW.Delay3_DSTATE[0] = SIM0_P.Delay3_InitialCondition;
 8007d22:	4b4e      	ldr	r3, [pc, #312]	; (8007e5c <SIM0_initialize+0x2e4>)
 8007d24:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8007d28:	3318      	adds	r3, #24
 8007d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d2e:	494c      	ldr	r1, [pc, #304]	; (8007e60 <SIM0_initialize+0x2e8>)
 8007d30:	e9c1 2302 	strd	r2, r3, [r1, #8]
    SIM0_DW.Delay2_DSTATE[0] = SIM0_P.Delay2_InitialCondition;
 8007d34:	4b49      	ldr	r3, [pc, #292]	; (8007e5c <SIM0_initialize+0x2e4>)
 8007d36:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8007d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d3e:	4948      	ldr	r1, [pc, #288]	; (8007e60 <SIM0_initialize+0x2e8>)
 8007d40:	e9c1 2306 	strd	r2, r3, [r1, #24]
    SIM0_DW.Delay3_DSTATE[1] = SIM0_P.Delay3_InitialCondition;
 8007d44:	4b45      	ldr	r3, [pc, #276]	; (8007e5c <SIM0_initialize+0x2e4>)
 8007d46:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8007d4a:	3318      	adds	r3, #24
 8007d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d50:	4943      	ldr	r1, [pc, #268]	; (8007e60 <SIM0_initialize+0x2e8>)
 8007d52:	e9c1 2304 	strd	r2, r3, [r1, #16]
    SIM0_DW.Delay2_DSTATE[1] = SIM0_P.Delay2_InitialCondition;
 8007d56:	4b41      	ldr	r3, [pc, #260]	; (8007e5c <SIM0_initialize+0x2e4>)
 8007d58:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8007d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d60:	493f      	ldr	r1, [pc, #252]	; (8007e60 <SIM0_initialize+0x2e8>)
 8007d62:	e9c1 2308 	strd	r2, r3, [r1, #32]
    SIM0_DW.Memory6_PreviousInput = SIM0_P.Memory6_InitialCondition;
 8007d66:	4b3d      	ldr	r3, [pc, #244]	; (8007e5c <SIM0_initialize+0x2e4>)
 8007d68:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8007d6c:	3308      	adds	r3, #8
 8007d6e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007d72:	4b3b      	ldr	r3, [pc, #236]	; (8007e60 <SIM0_initialize+0x2e8>)
 8007d74:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 8007d78:	3308      	adds	r3, #8
 8007d7a:	e9c3 0100 	strd	r0, r1, [r3]
    SIM0_DW.Memory7_PreviousInput = SIM0_P.Memory7_InitialCondition;
 8007d7e:	4b37      	ldr	r3, [pc, #220]	; (8007e5c <SIM0_initialize+0x2e4>)
 8007d80:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8007d84:	3310      	adds	r3, #16
 8007d86:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007d8a:	4b35      	ldr	r3, [pc, #212]	; (8007e60 <SIM0_initialize+0x2e8>)
 8007d8c:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 8007d90:	3310      	adds	r3, #16
 8007d92:	e9c3 0100 	strd	r0, r1, [r3]
    SIM0_DW.Memory22_PreviousInput = SIM0_P.Memory22_InitialCondition;
 8007d96:	4b31      	ldr	r3, [pc, #196]	; (8007e5c <SIM0_initialize+0x2e4>)
 8007d98:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8007d9c:	3318      	adds	r3, #24
 8007d9e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007da2:	4b2f      	ldr	r3, [pc, #188]	; (8007e60 <SIM0_initialize+0x2e8>)
 8007da4:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 8007da8:	3318      	adds	r3, #24
 8007daa:	e9c3 0100 	strd	r0, r1, [r3]
    SIM0_DW.Memory17_PreviousInput = SIM0_P.Memory17_InitialCondition;
 8007dae:	4b2b      	ldr	r3, [pc, #172]	; (8007e5c <SIM0_initialize+0x2e4>)
 8007db0:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 8007db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007db8:	4929      	ldr	r1, [pc, #164]	; (8007e60 <SIM0_initialize+0x2e8>)
 8007dba:	f501 51c1 	add.w	r1, r1, #6176	; 0x1820
 8007dbe:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_DW.Memory16_PreviousInput = SIM0_P.Memory16_InitialCondition;
 8007dc2:	4b26      	ldr	r3, [pc, #152]	; (8007e5c <SIM0_initialize+0x2e4>)
 8007dc4:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 8007dc8:	3308      	adds	r3, #8
 8007dca:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007dce:	4b24      	ldr	r3, [pc, #144]	; (8007e60 <SIM0_initialize+0x2e8>)
 8007dd0:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 8007dd4:	3308      	adds	r3, #8
 8007dd6:	e9c3 0100 	strd	r0, r1, [r3]
    SIM0_DW.Memory18_PreviousInput = SIM0_P.Memory18_InitialCondition;
 8007dda:	4b20      	ldr	r3, [pc, #128]	; (8007e5c <SIM0_initialize+0x2e4>)
 8007ddc:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 8007de0:	3310      	adds	r3, #16
 8007de2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007de6:	4b1e      	ldr	r3, [pc, #120]	; (8007e60 <SIM0_initialize+0x2e8>)
 8007de8:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 8007dec:	3310      	adds	r3, #16
 8007dee:	e9c3 0100 	strd	r0, r1, [r3]
    SIM0_DW.Memory_PreviousInput_a = SIM0_P.Memory_InitialCondition;
 8007df2:	4b1a      	ldr	r3, [pc, #104]	; (8007e5c <SIM0_initialize+0x2e4>)
 8007df4:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 8007df8:	3318      	adds	r3, #24
 8007dfa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007dfe:	4b18      	ldr	r3, [pc, #96]	; (8007e60 <SIM0_initialize+0x2e8>)
 8007e00:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 8007e04:	3318      	adds	r3, #24
 8007e06:	e9c3 0100 	strd	r0, r1, [r3]
    SIM0_DW.Memory13_PreviousInput = SIM0_P.Memory13_InitialCondition;
 8007e0a:	4b14      	ldr	r3, [pc, #80]	; (8007e5c <SIM0_initialize+0x2e4>)
 8007e0c:	f503 5385 	add.w	r3, r3, #4256	; 0x10a0
 8007e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e14:	4912      	ldr	r1, [pc, #72]	; (8007e60 <SIM0_initialize+0x2e8>)
 8007e16:	f501 51c2 	add.w	r1, r1, #6208	; 0x1840
 8007e1a:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_DW.Memory14_PreviousInput = SIM0_P.Memory14_InitialCondition;
 8007e1e:	4b0f      	ldr	r3, [pc, #60]	; (8007e5c <SIM0_initialize+0x2e4>)
 8007e20:	f503 5385 	add.w	r3, r3, #4256	; 0x10a0
 8007e24:	3308      	adds	r3, #8
 8007e26:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007e2a:	4b0d      	ldr	r3, [pc, #52]	; (8007e60 <SIM0_initialize+0x2e8>)
 8007e2c:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 8007e30:	3308      	adds	r3, #8
 8007e32:	e9c3 0100 	strd	r0, r1, [r3]
    SIM0_DW.Memory8_PreviousInput = SIM0_P.Memory8_InitialCondition;
 8007e36:	4b09      	ldr	r3, [pc, #36]	; (8007e5c <SIM0_initialize+0x2e4>)
 8007e38:	f503 5385 	add.w	r3, r3, #4256	; 0x10a0
 8007e3c:	3310      	adds	r3, #16
 8007e3e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007e42:	4b07      	ldr	r3, [pc, #28]	; (8007e60 <SIM0_initialize+0x2e8>)
 8007e44:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 8007e48:	3310      	adds	r3, #16
 8007e4a:	e9c3 0100 	strd	r0, r1, [r3]
  }
}
 8007e4e:	bf00      	nop
 8007e50:	370c      	adds	r7, #12
 8007e52:	46bd      	mov	sp, r7
 8007e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e58:	4770      	bx	lr
 8007e5a:	bf00      	nop
 8007e5c:	200002e0 	.word	0x200002e0
 8007e60:	2001be48 	.word	0x2001be48

08007e64 <UTMeanCovSqrt_C2vgLQ4W>:
#include "qr_5a2P8Gh6.h"

void UTMeanCovSqrt_C2vgLQ4W(const real_T meanWeights[2], const real_T
  covWeights[2], real_T OOM, real_T Y1[3], real_T Y2[18], const real_T X1[3],
  real_T X2[18], real_T Ymean[3], real_T Sy[9], real_T Pxy[9])
{
 8007e64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007e68:	f5ad 7d2f 	sub.w	sp, sp, #700	; 0x2bc
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	f107 0414 	add.w	r4, r7, #20
 8007e72:	6020      	str	r0, [r4, #0]
 8007e74:	f107 0010 	add.w	r0, r7, #16
 8007e78:	6001      	str	r1, [r0, #0]
 8007e7a:	f107 0108 	add.w	r1, r7, #8
 8007e7e:	ed81 0b00 	vstr	d0, [r1]
 8007e82:	1d39      	adds	r1, r7, #4
 8007e84:	600a      	str	r2, [r1, #0]
 8007e86:	463a      	mov	r2, r7
 8007e88:	6013      	str	r3, [r2, #0]
  int32_T i;
  int32_T iAcol;
  int32_T i_0;
  int32_T i_1;
  int32_T kk;
  Ymean[0] = Y1[0] * meanWeights[0];
 8007e8a:	1d3b      	adds	r3, r7, #4
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007e92:	f107 0314 	add.w	r3, r7, #20
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e9c:	f7f8 fb9e 	bl	80005dc <__aeabi_dmul>
 8007ea0:	4602      	mov	r2, r0
 8007ea2:	460b      	mov	r3, r1
 8007ea4:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8007ea8:	e9c1 2300 	strd	r2, r3, [r1]
  Ymean[1] = meanWeights[0] * Y1[1];
 8007eac:	f107 0314 	add.w	r3, r7, #20
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007eb6:	1d3b      	adds	r3, r7, #4
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	3308      	adds	r3, #8
 8007ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ec0:	f8d7 42e0 	ldr.w	r4, [r7, #736]	; 0x2e0
 8007ec4:	3408      	adds	r4, #8
 8007ec6:	f7f8 fb89 	bl	80005dc <__aeabi_dmul>
 8007eca:	4602      	mov	r2, r0
 8007ecc:	460b      	mov	r3, r1
 8007ece:	e9c4 2300 	strd	r2, r3, [r4]
  Ymean[2] = meanWeights[0] * Y1[2];
 8007ed2:	f107 0314 	add.w	r3, r7, #20
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007edc:	1d3b      	adds	r3, r7, #4
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	3310      	adds	r3, #16
 8007ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ee6:	f8d7 42e0 	ldr.w	r4, [r7, #736]	; 0x2e0
 8007eea:	3410      	adds	r4, #16
 8007eec:	f7f8 fb76 	bl	80005dc <__aeabi_dmul>
 8007ef0:	4602      	mov	r2, r0
 8007ef2:	460b      	mov	r3, r1
 8007ef4:	e9c4 2300 	strd	r2, r3, [r4]
  iAcol = 0;
 8007ef8:	2300      	movs	r3, #0
 8007efa:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
  for (kk = 0; kk < 6; kk++) {
 8007efe:	2300      	movs	r3, #0
 8007f00:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8007f04:	e079      	b.n	8007ffa <UTMeanCovSqrt_C2vgLQ4W+0x196>
    Ymean[0] += Y2[iAcol] * meanWeights[1];
 8007f06:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8007f0a:	e9d3 4500 	ldrd	r4, r5, [r3]
 8007f0e:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8007f12:	00db      	lsls	r3, r3, #3
 8007f14:	463a      	mov	r2, r7
 8007f16:	6812      	ldr	r2, [r2, #0]
 8007f18:	4413      	add	r3, r2
 8007f1a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007f1e:	f107 0314 	add.w	r3, r7, #20
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	3308      	adds	r3, #8
 8007f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f2a:	f7f8 fb57 	bl	80005dc <__aeabi_dmul>
 8007f2e:	4602      	mov	r2, r0
 8007f30:	460b      	mov	r3, r1
 8007f32:	4620      	mov	r0, r4
 8007f34:	4629      	mov	r1, r5
 8007f36:	f7f8 f99b 	bl	8000270 <__adddf3>
 8007f3a:	4602      	mov	r2, r0
 8007f3c:	460b      	mov	r3, r1
 8007f3e:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8007f42:	e9c1 2300 	strd	r2, r3, [r1]
    Ymean[1] += Y2[iAcol + 1] * meanWeights[1];
 8007f46:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8007f4a:	3308      	adds	r3, #8
 8007f4c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8007f50:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8007f54:	3301      	adds	r3, #1
 8007f56:	00db      	lsls	r3, r3, #3
 8007f58:	463a      	mov	r2, r7
 8007f5a:	6812      	ldr	r2, [r2, #0]
 8007f5c:	4413      	add	r3, r2
 8007f5e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007f62:	f107 0314 	add.w	r3, r7, #20
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	3308      	adds	r3, #8
 8007f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f6e:	f7f8 fb35 	bl	80005dc <__aeabi_dmul>
 8007f72:	4602      	mov	r2, r0
 8007f74:	460b      	mov	r3, r1
 8007f76:	4610      	mov	r0, r2
 8007f78:	4619      	mov	r1, r3
 8007f7a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8007f7e:	f103 0608 	add.w	r6, r3, #8
 8007f82:	4602      	mov	r2, r0
 8007f84:	460b      	mov	r3, r1
 8007f86:	4620      	mov	r0, r4
 8007f88:	4629      	mov	r1, r5
 8007f8a:	f7f8 f971 	bl	8000270 <__adddf3>
 8007f8e:	4602      	mov	r2, r0
 8007f90:	460b      	mov	r3, r1
 8007f92:	e9c6 2300 	strd	r2, r3, [r6]
    Ymean[2] += Y2[iAcol + 2] * meanWeights[1];
 8007f96:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8007f9a:	3310      	adds	r3, #16
 8007f9c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8007fa0:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8007fa4:	3302      	adds	r3, #2
 8007fa6:	00db      	lsls	r3, r3, #3
 8007fa8:	463a      	mov	r2, r7
 8007faa:	6812      	ldr	r2, [r2, #0]
 8007fac:	4413      	add	r3, r2
 8007fae:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007fb2:	f107 0314 	add.w	r3, r7, #20
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	3308      	adds	r3, #8
 8007fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fbe:	f7f8 fb0d 	bl	80005dc <__aeabi_dmul>
 8007fc2:	4602      	mov	r2, r0
 8007fc4:	460b      	mov	r3, r1
 8007fc6:	4610      	mov	r0, r2
 8007fc8:	4619      	mov	r1, r3
 8007fca:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8007fce:	f103 0610 	add.w	r6, r3, #16
 8007fd2:	4602      	mov	r2, r0
 8007fd4:	460b      	mov	r3, r1
 8007fd6:	4620      	mov	r0, r4
 8007fd8:	4629      	mov	r1, r5
 8007fda:	f7f8 f949 	bl	8000270 <__adddf3>
 8007fde:	4602      	mov	r2, r0
 8007fe0:	460b      	mov	r3, r1
 8007fe2:	e9c6 2300 	strd	r2, r3, [r6]
    iAcol += 3;
 8007fe6:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8007fea:	3303      	adds	r3, #3
 8007fec:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
  for (kk = 0; kk < 6; kk++) {
 8007ff0:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8007ff4:	3301      	adds	r3, #1
 8007ff6:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8007ffa:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8007ffe:	2b05      	cmp	r3, #5
 8008000:	dd81      	ble.n	8007f06 <UTMeanCovSqrt_C2vgLQ4W+0xa2>
  }

  signOOM = Ymean[0] * OOM;
 8008002:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8008006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800800a:	f107 0108 	add.w	r1, r7, #8
 800800e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008012:	f7f8 fae3 	bl	80005dc <__aeabi_dmul>
 8008016:	4602      	mov	r2, r0
 8008018:	460b      	mov	r3, r1
 800801a:	e9c7 23a8 	strd	r2, r3, [r7, #672]	; 0x2a0
  scale = Y1[0] - signOOM;
 800801e:	1d3b      	adds	r3, r7, #4
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008026:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 800802a:	f7f8 f91f 	bl	800026c <__aeabi_dsub>
 800802e:	4602      	mov	r2, r0
 8008030:	460b      	mov	r3, r1
 8008032:	e9c7 23aa 	strd	r2, r3, [r7, #680]	; 0x2a8
  Ymean[0] = signOOM;
 8008036:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 800803a:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 800803e:	e9c1 2300 	strd	r2, r3, [r1]
  Y1[0] = scale;
 8008042:	1d3b      	adds	r3, r7, #4
 8008044:	6819      	ldr	r1, [r3, #0]
 8008046:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 800804a:	e9c1 2300 	strd	r2, r3, [r1]
  signOOM = Ymean[1] * OOM;
 800804e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8008052:	3308      	adds	r3, #8
 8008054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008058:	f107 0108 	add.w	r1, r7, #8
 800805c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008060:	f7f8 fabc 	bl	80005dc <__aeabi_dmul>
 8008064:	4602      	mov	r2, r0
 8008066:	460b      	mov	r3, r1
 8008068:	e9c7 23a8 	strd	r2, r3, [r7, #672]	; 0x2a0
  absxk = Y1[1] - signOOM;
 800806c:	1d3b      	adds	r3, r7, #4
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	3308      	adds	r3, #8
 8008072:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008076:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 800807a:	f7f8 f8f7 	bl	800026c <__aeabi_dsub>
 800807e:	4602      	mov	r2, r0
 8008080:	460b      	mov	r3, r1
 8008082:	e9c7 239e 	strd	r2, r3, [r7, #632]	; 0x278
  Ymean[1] = signOOM;
 8008086:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800808a:	f103 0108 	add.w	r1, r3, #8
 800808e:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 8008092:	e9c1 2300 	strd	r2, r3, [r1]
  Y1[1] = absxk;
 8008096:	1d3b      	adds	r3, r7, #4
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f103 0108 	add.w	r1, r3, #8
 800809e:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 80080a2:	e9c1 2300 	strd	r2, r3, [r1]
  signOOM = Ymean[2] * OOM;
 80080a6:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80080aa:	3310      	adds	r3, #16
 80080ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080b0:	f107 0108 	add.w	r1, r7, #8
 80080b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80080b8:	f7f8 fa90 	bl	80005dc <__aeabi_dmul>
 80080bc:	4602      	mov	r2, r0
 80080be:	460b      	mov	r3, r1
 80080c0:	e9c7 23a8 	strd	r2, r3, [r7, #672]	; 0x2a0
  b_t = Y1[2] - signOOM;
 80080c4:	1d3b      	adds	r3, r7, #4
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	3310      	adds	r3, #16
 80080ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80080ce:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 80080d2:	f7f8 f8cb 	bl	800026c <__aeabi_dsub>
 80080d6:	4602      	mov	r2, r0
 80080d8:	460b      	mov	r3, r1
 80080da:	e9c7 239c 	strd	r2, r3, [r7, #624]	; 0x270
  Ymean[2] = signOOM;
 80080de:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80080e2:	f103 0110 	add.w	r1, r3, #16
 80080e6:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 80080ea:	e9c1 2300 	strd	r2, r3, [r1]
  Y1[2] = b_t;
 80080ee:	1d3b      	adds	r3, r7, #4
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f103 0110 	add.w	r1, r3, #16
 80080f6:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 80080fa:	e9c1 2300 	strd	r2, r3, [r1]
  iAcol = 0;
 80080fe:	2300      	movs	r3, #0
 8008100:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
  for (kk = 0; kk < 6; kk++) {
 8008104:	2300      	movs	r3, #0
 8008106:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 800810a:	e054      	b.n	80081b6 <UTMeanCovSqrt_C2vgLQ4W+0x352>
    Y2[iAcol] -= Ymean[0];
 800810c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008110:	00db      	lsls	r3, r3, #3
 8008112:	463a      	mov	r2, r7
 8008114:	6812      	ldr	r2, [r2, #0]
 8008116:	4413      	add	r3, r2
 8008118:	e9d3 0100 	ldrd	r0, r1, [r3]
 800811c:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8008120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008124:	f8d7 4298 	ldr.w	r4, [r7, #664]	; 0x298
 8008128:	00e4      	lsls	r4, r4, #3
 800812a:	463d      	mov	r5, r7
 800812c:	682d      	ldr	r5, [r5, #0]
 800812e:	442c      	add	r4, r5
 8008130:	f7f8 f89c 	bl	800026c <__aeabi_dsub>
 8008134:	4602      	mov	r2, r0
 8008136:	460b      	mov	r3, r1
 8008138:	e9c4 2300 	strd	r2, r3, [r4]
    Y2[iAcol + 1] -= Ymean[1];
 800813c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008140:	3301      	adds	r3, #1
 8008142:	00db      	lsls	r3, r3, #3
 8008144:	463a      	mov	r2, r7
 8008146:	6812      	ldr	r2, [r2, #0]
 8008148:	4413      	add	r3, r2
 800814a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800814e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8008152:	3308      	adds	r3, #8
 8008154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008158:	f8d7 4298 	ldr.w	r4, [r7, #664]	; 0x298
 800815c:	3401      	adds	r4, #1
 800815e:	00e4      	lsls	r4, r4, #3
 8008160:	463d      	mov	r5, r7
 8008162:	682d      	ldr	r5, [r5, #0]
 8008164:	442c      	add	r4, r5
 8008166:	f7f8 f881 	bl	800026c <__aeabi_dsub>
 800816a:	4602      	mov	r2, r0
 800816c:	460b      	mov	r3, r1
 800816e:	e9c4 2300 	strd	r2, r3, [r4]
    Y2[iAcol + 2] -= signOOM;
 8008172:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008176:	3302      	adds	r3, #2
 8008178:	00db      	lsls	r3, r3, #3
 800817a:	463a      	mov	r2, r7
 800817c:	6812      	ldr	r2, [r2, #0]
 800817e:	4413      	add	r3, r2
 8008180:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008184:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008188:	3302      	adds	r3, #2
 800818a:	00db      	lsls	r3, r3, #3
 800818c:	463a      	mov	r2, r7
 800818e:	6812      	ldr	r2, [r2, #0]
 8008190:	18d4      	adds	r4, r2, r3
 8008192:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 8008196:	f7f8 f869 	bl	800026c <__aeabi_dsub>
 800819a:	4602      	mov	r2, r0
 800819c:	460b      	mov	r3, r1
 800819e:	e9c4 2300 	strd	r2, r3, [r4]
    iAcol += 3;
 80081a2:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80081a6:	3303      	adds	r3, #3
 80081a8:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
  for (kk = 0; kk < 6; kk++) {
 80081ac:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80081b0:	3301      	adds	r3, #1
 80081b2:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 80081b6:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80081ba:	2b05      	cmp	r3, #5
 80081bc:	dda6      	ble.n	800810c <UTMeanCovSqrt_C2vgLQ4W+0x2a8>
  }

  if (rtIsNaN(OOM)) {
 80081be:	f107 0308 	add.w	r3, r7, #8
 80081c2:	ed93 0b00 	vldr	d0, [r3]
 80081c6:	f004 fbed 	bl	800c9a4 <rtIsNaN>
 80081ca:	4603      	mov	r3, r0
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d006      	beq.n	80081de <UTMeanCovSqrt_C2vgLQ4W+0x37a>
    signOOM = OOM;
 80081d0:	f107 0308 	add.w	r3, r7, #8
 80081d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081d8:	e9c7 23a8 	strd	r2, r3, [r7, #672]	; 0x2a0
 80081dc:	e029      	b.n	8008232 <UTMeanCovSqrt_C2vgLQ4W+0x3ce>
  } else if (OOM < 0.0) {
 80081de:	f107 0108 	add.w	r1, r7, #8
 80081e2:	f04f 0200 	mov.w	r2, #0
 80081e6:	f04f 0300 	mov.w	r3, #0
 80081ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 80081ee:	f7f8 fc67 	bl	8000ac0 <__aeabi_dcmplt>
 80081f2:	4603      	mov	r3, r0
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d005      	beq.n	8008204 <UTMeanCovSqrt_C2vgLQ4W+0x3a0>
    signOOM = -1.0;
 80081f8:	f04f 0200 	mov.w	r2, #0
 80081fc:	4bce      	ldr	r3, [pc, #824]	; (8008538 <UTMeanCovSqrt_C2vgLQ4W+0x6d4>)
 80081fe:	e9c7 23a8 	strd	r2, r3, [r7, #672]	; 0x2a0
 8008202:	e016      	b.n	8008232 <UTMeanCovSqrt_C2vgLQ4W+0x3ce>
  } else {
    signOOM = (OOM > 0.0);
 8008204:	f107 0108 	add.w	r1, r7, #8
 8008208:	f04f 0200 	mov.w	r2, #0
 800820c:	f04f 0300 	mov.w	r3, #0
 8008210:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008214:	f7f8 fc72 	bl	8000afc <__aeabi_dcmpgt>
 8008218:	4603      	mov	r3, r0
 800821a:	2b00      	cmp	r3, #0
 800821c:	d003      	beq.n	8008226 <UTMeanCovSqrt_C2vgLQ4W+0x3c2>
 800821e:	f04f 0200 	mov.w	r2, #0
 8008222:	4bc6      	ldr	r3, [pc, #792]	; (800853c <UTMeanCovSqrt_C2vgLQ4W+0x6d8>)
 8008224:	e003      	b.n	800822e <UTMeanCovSqrt_C2vgLQ4W+0x3ca>
 8008226:	f04f 0200 	mov.w	r2, #0
 800822a:	f04f 0300 	mov.w	r3, #0
 800822e:	e9c7 23a8 	strd	r2, r3, [r7, #672]	; 0x2a0
  }

  covWeights_0 = signOOM * covWeights[0];
 8008232:	f107 0310 	add.w	r3, r7, #16
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800823c:	e9d7 01a8 	ldrd	r0, r1, [r7, #672]	; 0x2a0
 8008240:	f7f8 f9cc 	bl	80005dc <__aeabi_dmul>
 8008244:	4602      	mov	r2, r0
 8008246:	460b      	mov	r3, r1
 8008248:	e9c7 23ac 	strd	r2, r3, [r7, #688]	; 0x2b0
  covWeights_1 = signOOM * covWeights[1];
 800824c:	f107 0310 	add.w	r3, r7, #16
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	3308      	adds	r3, #8
 8008254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008258:	e9d7 01a8 	ldrd	r0, r1, [r7, #672]	; 0x2a0
 800825c:	f7f8 f9be 	bl	80005dc <__aeabi_dmul>
 8008260:	4602      	mov	r2, r0
 8008262:	460b      	mov	r3, r1
 8008264:	e9c7 239a 	strd	r2, r3, [r7, #616]	; 0x268
  OOM *= signOOM;
 8008268:	f107 0408 	add.w	r4, r7, #8
 800826c:	f107 0108 	add.w	r1, r7, #8
 8008270:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 8008274:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008278:	f7f8 f9b0 	bl	80005dc <__aeabi_dmul>
 800827c:	4602      	mov	r2, r0
 800827e:	460b      	mov	r3, r1
 8008280:	e9c4 2300 	strd	r2, r3, [r4]
  signOOM = sqrt(OOM);
 8008284:	f107 0308 	add.w	r3, r7, #8
 8008288:	ed93 0b00 	vldr	d0, [r3]
 800828c:	f012 f9a4 	bl	801a5d8 <sqrt>
 8008290:	ed87 0ba8 	vstr	d0, [r7, #672]	; 0x2a0
  temp = sqrt(covWeights_1);
 8008294:	ed97 0b9a 	vldr	d0, [r7, #616]	; 0x268
 8008298:	f012 f99e 	bl	801a5d8 <sqrt>
 800829c:	eeb0 7a40 	vmov.f32	s14, s0
 80082a0:	eef0 7a60 	vmov.f32	s15, s1
 80082a4:	f107 0318 	add.w	r3, r7, #24
 80082a8:	ed83 7b00 	vstr	d7, [r3]
  kk = 0;
 80082ac:	2300      	movs	r3, #0
 80082ae:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
  for (iAcol = 0; iAcol < 3; iAcol++) {
 80082b2:	2300      	movs	r3, #0
 80082b4:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 80082b8:	e03c      	b.n	8008334 <UTMeanCovSqrt_C2vgLQ4W+0x4d0>
    i_1 = 0;
 80082ba:	2300      	movs	r3, #0
 80082bc:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
    for (i = 0; i < 6; i++) {
 80082c0:	2300      	movs	r3, #0
 80082c2:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 80082c6:	e027      	b.n	8008318 <UTMeanCovSqrt_C2vgLQ4W+0x4b4>
      temp_0[i + kk] = Y2[i_1 + iAcol] * temp;
 80082c8:	f8d7 2290 	ldr.w	r2, [r7, #656]	; 0x290
 80082cc:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80082d0:	4413      	add	r3, r2
 80082d2:	00db      	lsls	r3, r3, #3
 80082d4:	463a      	mov	r2, r7
 80082d6:	6812      	ldr	r2, [r2, #0]
 80082d8:	4413      	add	r3, r2
 80082da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80082de:	f107 0318 	add.w	r3, r7, #24
 80082e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082e6:	f8d7 529c 	ldr.w	r5, [r7, #668]	; 0x29c
 80082ea:	f8d7 428c 	ldr.w	r4, [r7, #652]	; 0x28c
 80082ee:	442c      	add	r4, r5
 80082f0:	f7f8 f974 	bl	80005dc <__aeabi_dmul>
 80082f4:	4602      	mov	r2, r0
 80082f6:	460b      	mov	r3, r1
 80082f8:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 80082fc:	00e1      	lsls	r1, r4, #3
 80082fe:	4401      	add	r1, r0
 8008300:	e9c1 2300 	strd	r2, r3, [r1]
      i_1 += 3;
 8008304:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8008308:	3303      	adds	r3, #3
 800830a:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
    for (i = 0; i < 6; i++) {
 800830e:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8008312:	3301      	adds	r3, #1
 8008314:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 8008318:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 800831c:	2b05      	cmp	r3, #5
 800831e:	ddd3      	ble.n	80082c8 <UTMeanCovSqrt_C2vgLQ4W+0x464>
    }

    kk += 6;
 8008320:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8008324:	3306      	adds	r3, #6
 8008326:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
  for (iAcol = 0; iAcol < 3; iAcol++) {
 800832a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800832e:	3301      	adds	r3, #1
 8008330:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8008334:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008338:	2b02      	cmp	r3, #2
 800833a:	ddbe      	ble.n	80082ba <UTMeanCovSqrt_C2vgLQ4W+0x456>
  }

  qr_DvOBrgQi(temp_0, a__1, Sy);
 800833c:	f507 71e8 	add.w	r1, r7, #464	; 0x1d0
 8008340:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008344:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8008348:	4618      	mov	r0, r3
 800834a:	f002 ff43 	bl	800b1d4 <qr_DvOBrgQi>
  if (!rtIsNaN(covWeights_0)) {
 800834e:	ed97 0bac 	vldr	d0, [r7, #688]	; 0x2b0
 8008352:	f004 fb27 	bl	800c9a4 <rtIsNaN>
 8008356:	4603      	mov	r3, r0
 8008358:	2b00      	cmp	r3, #0
 800835a:	d125      	bne.n	80083a8 <UTMeanCovSqrt_C2vgLQ4W+0x544>
    if (covWeights_0 < 0.0) {
 800835c:	f04f 0200 	mov.w	r2, #0
 8008360:	f04f 0300 	mov.w	r3, #0
 8008364:	e9d7 01ac 	ldrd	r0, r1, [r7, #688]	; 0x2b0
 8008368:	f7f8 fbaa 	bl	8000ac0 <__aeabi_dcmplt>
 800836c:	4603      	mov	r3, r0
 800836e:	2b00      	cmp	r3, #0
 8008370:	d005      	beq.n	800837e <UTMeanCovSqrt_C2vgLQ4W+0x51a>
      covWeights_0 = -1.0;
 8008372:	f04f 0200 	mov.w	r2, #0
 8008376:	4b70      	ldr	r3, [pc, #448]	; (8008538 <UTMeanCovSqrt_C2vgLQ4W+0x6d4>)
 8008378:	e9c7 23ac 	strd	r2, r3, [r7, #688]	; 0x2b0
 800837c:	e014      	b.n	80083a8 <UTMeanCovSqrt_C2vgLQ4W+0x544>
    } else {
      covWeights_0 = (covWeights_0 > 0.0);
 800837e:	f04f 0200 	mov.w	r2, #0
 8008382:	f04f 0300 	mov.w	r3, #0
 8008386:	e9d7 01ac 	ldrd	r0, r1, [r7, #688]	; 0x2b0
 800838a:	f7f8 fbb7 	bl	8000afc <__aeabi_dcmpgt>
 800838e:	4603      	mov	r3, r0
 8008390:	2b00      	cmp	r3, #0
 8008392:	d003      	beq.n	800839c <UTMeanCovSqrt_C2vgLQ4W+0x538>
 8008394:	f04f 0200 	mov.w	r2, #0
 8008398:	4b68      	ldr	r3, [pc, #416]	; (800853c <UTMeanCovSqrt_C2vgLQ4W+0x6d8>)
 800839a:	e003      	b.n	80083a4 <UTMeanCovSqrt_C2vgLQ4W+0x540>
 800839c:	f04f 0200 	mov.w	r2, #0
 80083a0:	f04f 0300 	mov.w	r3, #0
 80083a4:	e9c7 23ac 	strd	r2, r3, [r7, #688]	; 0x2b0
    }
  }

  if (covWeights_0 == 1.0) {
 80083a8:	f04f 0200 	mov.w	r2, #0
 80083ac:	4b63      	ldr	r3, [pc, #396]	; (800853c <UTMeanCovSqrt_C2vgLQ4W+0x6d8>)
 80083ae:	e9d7 01ac 	ldrd	r0, r1, [r7, #688]	; 0x2b0
 80083b2:	f7f8 fb7b 	bl	8000aac <__aeabi_dcmpeq>
 80083b6:	4603      	mov	r3, r0
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	f000 81bd 	beq.w	8008738 <UTMeanCovSqrt_C2vgLQ4W+0x8d4>
    for (iAcol = 0; iAcol < 2; iAcol++) {
 80083be:	2300      	movs	r3, #0
 80083c0:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 80083c4:	e011      	b.n	80083ea <UTMeanCovSqrt_C2vgLQ4W+0x586>
      Sy[iAcol + 1] = 0.0;
 80083c6:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80083ca:	3301      	adds	r3, #1
 80083cc:	00db      	lsls	r3, r3, #3
 80083ce:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 80083d2:	18d1      	adds	r1, r2, r3
 80083d4:	f04f 0200 	mov.w	r2, #0
 80083d8:	f04f 0300 	mov.w	r3, #0
 80083dc:	e9c1 2300 	strd	r2, r3, [r1]
    for (iAcol = 0; iAcol < 2; iAcol++) {
 80083e0:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80083e4:	3301      	adds	r3, #1
 80083e6:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 80083ea:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80083ee:	2b01      	cmp	r3, #1
 80083f0:	dde9      	ble.n	80083c6 <UTMeanCovSqrt_C2vgLQ4W+0x562>
    }

    Sy[5] = 0.0;
 80083f2:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80083f6:	f103 0128 	add.w	r1, r3, #40	; 0x28
 80083fa:	f04f 0200 	mov.w	r2, #0
 80083fe:	f04f 0300 	mov.w	r3, #0
 8008402:	e9c1 2300 	strd	r2, r3, [r1]
    c[2] = 0.0;
 8008406:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800840a:	f04f 0200 	mov.w	r2, #0
 800840e:	f04f 0300 	mov.w	r3, #0
 8008412:	e9c1 2304 	strd	r2, r3, [r1, #16]
    s[2] = 0.0;
 8008416:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800841a:	f04f 0200 	mov.w	r2, #0
 800841e:	f04f 0300 	mov.w	r3, #0
 8008422:	e9c1 2304 	strd	r2, r3, [r1, #16]
    rotate_LZ7ctbe0(Sy[0], scale, &c[0], &s[0], &Sy[0]);
 8008426:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 800842a:	ed93 7b00 	vldr	d7, [r3]
 800842e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8008432:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008436:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 800843a:	4618      	mov	r0, r3
 800843c:	ed97 1baa 	vldr	d1, [r7, #680]	; 0x2a8
 8008440:	eeb0 0a47 	vmov.f32	s0, s14
 8008444:	eef0 0a67 	vmov.f32	s1, s15
 8008448:	f004 f814 	bl	800c474 <rotate_LZ7ctbe0>
    temp = c[0] * absxk - s[0] * Sy[3];
 800844c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008450:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008454:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 8008458:	f7f8 f8c0 	bl	80005dc <__aeabi_dmul>
 800845c:	4602      	mov	r2, r0
 800845e:	460b      	mov	r3, r1
 8008460:	4614      	mov	r4, r2
 8008462:	461d      	mov	r5, r3
 8008464:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008468:	e9d3 0100 	ldrd	r0, r1, [r3]
 800846c:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8008470:	3318      	adds	r3, #24
 8008472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008476:	f7f8 f8b1 	bl	80005dc <__aeabi_dmul>
 800847a:	4602      	mov	r2, r0
 800847c:	460b      	mov	r3, r1
 800847e:	4620      	mov	r0, r4
 8008480:	4629      	mov	r1, r5
 8008482:	f7f7 fef3 	bl	800026c <__aeabi_dsub>
 8008486:	4602      	mov	r2, r0
 8008488:	460b      	mov	r3, r1
 800848a:	f107 0118 	add.w	r1, r7, #24
 800848e:	e9c1 2300 	strd	r2, r3, [r1]
    Sy[3] = c[0] * Sy[3] + s[0] * absxk;
 8008492:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008496:	e9d3 0100 	ldrd	r0, r1, [r3]
 800849a:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 800849e:	3318      	adds	r3, #24
 80084a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084a4:	f7f8 f89a 	bl	80005dc <__aeabi_dmul>
 80084a8:	4602      	mov	r2, r0
 80084aa:	460b      	mov	r3, r1
 80084ac:	4690      	mov	r8, r2
 80084ae:	4699      	mov	r9, r3
 80084b0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80084b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80084b8:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 80084bc:	f7f8 f88e 	bl	80005dc <__aeabi_dmul>
 80084c0:	4602      	mov	r2, r0
 80084c2:	460b      	mov	r3, r1
 80084c4:	4610      	mov	r0, r2
 80084c6:	4619      	mov	r1, r3
 80084c8:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80084cc:	f103 0418 	add.w	r4, r3, #24
 80084d0:	4602      	mov	r2, r0
 80084d2:	460b      	mov	r3, r1
 80084d4:	4640      	mov	r0, r8
 80084d6:	4649      	mov	r1, r9
 80084d8:	f7f7 feca 	bl	8000270 <__adddf3>
 80084dc:	4602      	mov	r2, r0
 80084de:	460b      	mov	r3, r1
 80084e0:	e9c4 2300 	strd	r2, r3, [r4]
    rotate_LZ7ctbe0(Sy[4], temp, &c[1], &s[1], &Sy[4]);
 80084e4:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80084e8:	3320      	adds	r3, #32
 80084ea:	ed93 7b00 	vldr	d7, [r3]
 80084ee:	f107 0318 	add.w	r3, r7, #24
 80084f2:	ed93 6b00 	vldr	d6, [r3]
 80084f6:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80084fa:	f103 0220 	add.w	r2, r3, #32
 80084fe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008502:	f103 0108 	add.w	r1, r3, #8
 8008506:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800850a:	3308      	adds	r3, #8
 800850c:	4618      	mov	r0, r3
 800850e:	eeb0 1a46 	vmov.f32	s2, s12
 8008512:	eef0 1a66 	vmov.f32	s3, s13
 8008516:	eeb0 0a47 	vmov.f32	s0, s14
 800851a:	eef0 0a67 	vmov.f32	s1, s15
 800851e:	f003 ffa9 	bl	800c474 <rotate_LZ7ctbe0>
    temp = b_t;
 8008522:	f107 0118 	add.w	r1, r7, #24
 8008526:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 800852a:	e9c1 2300 	strd	r2, r3, [r1]
    for (iAcol = 0; iAcol < 2; iAcol++) {
 800852e:	2300      	movs	r3, #0
 8008530:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8008534:	e06f      	b.n	8008616 <UTMeanCovSqrt_C2vgLQ4W+0x7b2>
 8008536:	bf00      	nop
 8008538:	bff00000 	.word	0xbff00000
 800853c:	3ff00000 	.word	0x3ff00000
      scale = s[iAcol] * temp;
 8008540:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8008544:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008548:	00db      	lsls	r3, r3, #3
 800854a:	4413      	add	r3, r2
 800854c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008550:	f107 0318 	add.w	r3, r7, #24
 8008554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008558:	f7f8 f840 	bl	80005dc <__aeabi_dmul>
 800855c:	4602      	mov	r2, r0
 800855e:	460b      	mov	r3, r1
 8008560:	e9c7 23aa 	strd	r2, r3, [r7, #680]	; 0x2a8
      absxk = Sy[iAcol + 6];
 8008564:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008568:	3306      	adds	r3, #6
 800856a:	00db      	lsls	r3, r3, #3
 800856c:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8008570:	4413      	add	r3, r2
 8008572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008576:	e9c7 239e 	strd	r2, r3, [r7, #632]	; 0x278
      temp = c[iAcol] * temp - absxk * s[iAcol];
 800857a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800857e:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008582:	00db      	lsls	r3, r3, #3
 8008584:	4413      	add	r3, r2
 8008586:	e9d3 0100 	ldrd	r0, r1, [r3]
 800858a:	f107 0318 	add.w	r3, r7, #24
 800858e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008592:	f7f8 f823 	bl	80005dc <__aeabi_dmul>
 8008596:	4602      	mov	r2, r0
 8008598:	460b      	mov	r3, r1
 800859a:	4614      	mov	r4, r2
 800859c:	461d      	mov	r5, r3
 800859e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80085a2:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80085a6:	00db      	lsls	r3, r3, #3
 80085a8:	4413      	add	r3, r2
 80085aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80085ae:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 80085b2:	f7f8 f813 	bl	80005dc <__aeabi_dmul>
 80085b6:	4602      	mov	r2, r0
 80085b8:	460b      	mov	r3, r1
 80085ba:	4620      	mov	r0, r4
 80085bc:	4629      	mov	r1, r5
 80085be:	f7f7 fe55 	bl	800026c <__aeabi_dsub>
 80085c2:	4602      	mov	r2, r0
 80085c4:	460b      	mov	r3, r1
 80085c6:	f107 0118 	add.w	r1, r7, #24
 80085ca:	e9c1 2300 	strd	r2, r3, [r1]
      Sy[iAcol + 6] = absxk * c[iAcol] + scale;
 80085ce:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80085d2:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80085d6:	00db      	lsls	r3, r3, #3
 80085d8:	4413      	add	r3, r2
 80085da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80085de:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 80085e2:	f7f7 fffb 	bl	80005dc <__aeabi_dmul>
 80085e6:	4602      	mov	r2, r0
 80085e8:	460b      	mov	r3, r1
 80085ea:	4610      	mov	r0, r2
 80085ec:	4619      	mov	r1, r3
 80085ee:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80085f2:	3306      	adds	r3, #6
 80085f4:	00db      	lsls	r3, r3, #3
 80085f6:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 80085fa:	18d4      	adds	r4, r2, r3
 80085fc:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 8008600:	f7f7 fe36 	bl	8000270 <__adddf3>
 8008604:	4602      	mov	r2, r0
 8008606:	460b      	mov	r3, r1
 8008608:	e9c4 2300 	strd	r2, r3, [r4]
    for (iAcol = 0; iAcol < 2; iAcol++) {
 800860c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008610:	3301      	adds	r3, #1
 8008612:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8008616:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800861a:	2b01      	cmp	r3, #1
 800861c:	dd90      	ble.n	8008540 <UTMeanCovSqrt_C2vgLQ4W+0x6dc>
    }

    rotate_LZ7ctbe0(Sy[8], temp, &c[2], &s[2], &Sy[8]);
 800861e:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8008622:	3340      	adds	r3, #64	; 0x40
 8008624:	ed93 7b00 	vldr	d7, [r3]
 8008628:	f107 0318 	add.w	r3, r7, #24
 800862c:	ed93 6b00 	vldr	d6, [r3]
 8008630:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8008634:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8008638:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800863c:	f103 0110 	add.w	r1, r3, #16
 8008640:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008644:	3310      	adds	r3, #16
 8008646:	4618      	mov	r0, r3
 8008648:	eeb0 1a46 	vmov.f32	s2, s12
 800864c:	eef0 1a66 	vmov.f32	s3, s13
 8008650:	eeb0 0a47 	vmov.f32	s0, s14
 8008654:	eef0 0a67 	vmov.f32	s1, s15
 8008658:	f003 ff0c 	bl	800c474 <rotate_LZ7ctbe0>
    kk = 0;
 800865c:	2300      	movs	r3, #0
 800865e:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
    for (iAcol = 0; iAcol < 3; iAcol++) {
 8008662:	2300      	movs	r3, #0
 8008664:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8008668:	e03d      	b.n	80086e6 <UTMeanCovSqrt_C2vgLQ4W+0x882>
      Sy_0[kk] = Sy[iAcol];
 800866a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800866e:	00db      	lsls	r3, r3, #3
 8008670:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8008674:	4413      	add	r3, r2
 8008676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800867a:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 800867e:	f8d7 128c 	ldr.w	r1, [r7, #652]	; 0x28c
 8008682:	00c9      	lsls	r1, r1, #3
 8008684:	4401      	add	r1, r0
 8008686:	e9c1 2300 	strd	r2, r3, [r1]
      Sy_0[kk + 1] = Sy[iAcol + 3];
 800868a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800868e:	3303      	adds	r3, #3
 8008690:	00db      	lsls	r3, r3, #3
 8008692:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8008696:	4413      	add	r3, r2
 8008698:	f8d7 228c 	ldr.w	r2, [r7, #652]	; 0x28c
 800869c:	1c51      	adds	r1, r2, #1
 800869e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086a2:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 80086a6:	00c9      	lsls	r1, r1, #3
 80086a8:	4401      	add	r1, r0
 80086aa:	e9c1 2300 	strd	r2, r3, [r1]
      Sy_0[kk + 2] = Sy[iAcol + 6];
 80086ae:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80086b2:	3306      	adds	r3, #6
 80086b4:	00db      	lsls	r3, r3, #3
 80086b6:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 80086ba:	4413      	add	r3, r2
 80086bc:	f8d7 228c 	ldr.w	r2, [r7, #652]	; 0x28c
 80086c0:	1c91      	adds	r1, r2, #2
 80086c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086c6:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 80086ca:	00c9      	lsls	r1, r1, #3
 80086cc:	4401      	add	r1, r0
 80086ce:	e9c1 2300 	strd	r2, r3, [r1]
      kk += 3;
 80086d2:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80086d6:	3303      	adds	r3, #3
 80086d8:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
    for (iAcol = 0; iAcol < 3; iAcol++) {
 80086dc:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80086e0:	3301      	adds	r3, #1
 80086e2:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 80086e6:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80086ea:	2b02      	cmp	r3, #2
 80086ec:	ddbd      	ble.n	800866a <UTMeanCovSqrt_C2vgLQ4W+0x806>
    }

    for (kk = 0; kk < 9; kk++) {
 80086ee:	2300      	movs	r3, #0
 80086f0:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 80086f4:	e01a      	b.n	800872c <UTMeanCovSqrt_C2vgLQ4W+0x8c8>
      Sy[kk] = signOOM * Sy_0[kk];
 80086f6:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80086fa:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80086fe:	00db      	lsls	r3, r3, #3
 8008700:	4413      	add	r3, r2
 8008702:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008706:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 800870a:	00db      	lsls	r3, r3, #3
 800870c:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8008710:	18d4      	adds	r4, r2, r3
 8008712:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 8008716:	f7f7 ff61 	bl	80005dc <__aeabi_dmul>
 800871a:	4602      	mov	r2, r0
 800871c:	460b      	mov	r3, r1
 800871e:	e9c4 2300 	strd	r2, r3, [r4]
    for (kk = 0; kk < 9; kk++) {
 8008722:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8008726:	3301      	adds	r3, #1
 8008728:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 800872c:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8008730:	2b08      	cmp	r3, #8
 8008732:	dde0      	ble.n	80086f6 <UTMeanCovSqrt_C2vgLQ4W+0x892>
 8008734:	f000 bf6e 	b.w	8009614 <UTMeanCovSqrt_C2vgLQ4W+0x17b0>
    }
  } else {
    boolean_T errorCondition;
    boolean_T guard1 = false;
 8008738:	2300      	movs	r3, #0
 800873a:	f887 328a 	strb.w	r3, [r7, #650]	; 0x28a
    for (iAcol = 0; iAcol < 2; iAcol++) {
 800873e:	2300      	movs	r3, #0
 8008740:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8008744:	e011      	b.n	800876a <UTMeanCovSqrt_C2vgLQ4W+0x906>
      Sy[iAcol + 1] = 0.0;
 8008746:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800874a:	3301      	adds	r3, #1
 800874c:	00db      	lsls	r3, r3, #3
 800874e:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8008752:	18d1      	adds	r1, r2, r3
 8008754:	f04f 0200 	mov.w	r2, #0
 8008758:	f04f 0300 	mov.w	r3, #0
 800875c:	e9c1 2300 	strd	r2, r3, [r1]
    for (iAcol = 0; iAcol < 2; iAcol++) {
 8008760:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008764:	3301      	adds	r3, #1
 8008766:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 800876a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800876e:	2b01      	cmp	r3, #1
 8008770:	dde9      	ble.n	8008746 <UTMeanCovSqrt_C2vgLQ4W+0x8e2>
    }

    Sy[5] = 0.0;
 8008772:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8008776:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800877a:	f04f 0200 	mov.w	r2, #0
 800877e:	f04f 0300 	mov.w	r3, #0
 8008782:	e9c1 2300 	strd	r2, r3, [r1]
    errorCondition = (Sy[0] == 0.0);
 8008786:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 800878a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800878e:	2301      	movs	r3, #1
 8008790:	461c      	mov	r4, r3
 8008792:	f04f 0200 	mov.w	r2, #0
 8008796:	f04f 0300 	mov.w	r3, #0
 800879a:	f7f8 f987 	bl	8000aac <__aeabi_dcmpeq>
 800879e:	4603      	mov	r3, r0
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d101      	bne.n	80087a8 <UTMeanCovSqrt_C2vgLQ4W+0x944>
 80087a4:	2300      	movs	r3, #0
 80087a6:	461c      	mov	r4, r3
 80087a8:	b2e3      	uxtb	r3, r4
 80087aa:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
    if (!errorCondition) {
 80087ae:	f897 328b 	ldrb.w	r3, [r7, #651]	; 0x28b
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d114      	bne.n	80087e0 <UTMeanCovSqrt_C2vgLQ4W+0x97c>
      errorCondition = (Sy[4] == 0.0);
 80087b6:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80087ba:	3320      	adds	r3, #32
 80087bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80087c0:	2301      	movs	r3, #1
 80087c2:	461c      	mov	r4, r3
 80087c4:	f04f 0200 	mov.w	r2, #0
 80087c8:	f04f 0300 	mov.w	r3, #0
 80087cc:	f7f8 f96e 	bl	8000aac <__aeabi_dcmpeq>
 80087d0:	4603      	mov	r3, r0
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d101      	bne.n	80087da <UTMeanCovSqrt_C2vgLQ4W+0x976>
 80087d6:	2300      	movs	r3, #0
 80087d8:	461c      	mov	r4, r3
 80087da:	b2e3      	uxtb	r3, r4
 80087dc:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
    }

    if (!errorCondition) {
 80087e0:	f897 328b 	ldrb.w	r3, [r7, #651]	; 0x28b
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d114      	bne.n	8008812 <UTMeanCovSqrt_C2vgLQ4W+0x9ae>
      errorCondition = (Sy[8] == 0.0);
 80087e8:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80087ec:	3340      	adds	r3, #64	; 0x40
 80087ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80087f2:	2301      	movs	r3, #1
 80087f4:	461c      	mov	r4, r3
 80087f6:	f04f 0200 	mov.w	r2, #0
 80087fa:	f04f 0300 	mov.w	r3, #0
 80087fe:	f7f8 f955 	bl	8000aac <__aeabi_dcmpeq>
 8008802:	4603      	mov	r3, r0
 8008804:	2b00      	cmp	r3, #0
 8008806:	d101      	bne.n	800880c <UTMeanCovSqrt_C2vgLQ4W+0x9a8>
 8008808:	2300      	movs	r3, #0
 800880a:	461c      	mov	r4, r3
 800880c:	b2e3      	uxtb	r3, r4
 800880e:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
    }

    guard1 = false;
 8008812:	2300      	movs	r3, #0
 8008814:	f887 328a 	strb.w	r3, [r7, #650]	; 0x28a
    if (errorCondition) {
 8008818:	f897 328b 	ldrb.w	r3, [r7, #651]	; 0x28b
 800881c:	2b00      	cmp	r3, #0
 800881e:	d003      	beq.n	8008828 <UTMeanCovSqrt_C2vgLQ4W+0x9c4>
      guard1 = true;
 8008820:	2301      	movs	r3, #1
 8008822:	f887 328a 	strb.w	r3, [r7, #650]	; 0x28a
 8008826:	e394      	b.n	8008f52 <UTMeanCovSqrt_C2vgLQ4W+0x10ee>
    } else {
      x[2] = b_t;
 8008828:	f107 0120 	add.w	r1, r7, #32
 800882c:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 8008830:	e9c1 2304 	strd	r2, r3, [r1, #16]
      x[0] = scale / Sy[0];
 8008834:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8008838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800883c:	e9d7 01aa 	ldrd	r0, r1, [r7, #680]	; 0x2a8
 8008840:	f7f7 fff6 	bl	8000830 <__aeabi_ddiv>
 8008844:	4602      	mov	r2, r0
 8008846:	460b      	mov	r3, r1
 8008848:	f107 0120 	add.w	r1, r7, #32
 800884c:	e9c1 2300 	strd	r2, r3, [r1]
      x[1] = (absxk - x[0] * Sy[3]) / Sy[4];
 8008850:	f107 0320 	add.w	r3, r7, #32
 8008854:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008858:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 800885c:	3318      	adds	r3, #24
 800885e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008862:	f7f7 febb 	bl	80005dc <__aeabi_dmul>
 8008866:	4602      	mov	r2, r0
 8008868:	460b      	mov	r3, r1
 800886a:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 800886e:	f7f7 fcfd 	bl	800026c <__aeabi_dsub>
 8008872:	4602      	mov	r2, r0
 8008874:	460b      	mov	r3, r1
 8008876:	4610      	mov	r0, r2
 8008878:	4619      	mov	r1, r3
 800887a:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 800887e:	3320      	adds	r3, #32
 8008880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008884:	f7f7 ffd4 	bl	8000830 <__aeabi_ddiv>
 8008888:	4602      	mov	r2, r0
 800888a:	460b      	mov	r3, r1
 800888c:	f107 0120 	add.w	r1, r7, #32
 8008890:	e9c1 2302 	strd	r2, r3, [r1, #8]
      temp = b_t;
 8008894:	f107 0118 	add.w	r1, r7, #24
 8008898:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 800889c:	e9c1 2300 	strd	r2, r3, [r1]
      for (kk = 0; kk < 2; kk++) {
 80088a0:	2300      	movs	r3, #0
 80088a2:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 80088a6:	e027      	b.n	80088f8 <UTMeanCovSqrt_C2vgLQ4W+0xa94>
        temp -= Sy[kk + 6] * x[kk];
 80088a8:	f107 0318 	add.w	r3, r7, #24
 80088ac:	e9d3 4500 	ldrd	r4, r5, [r3]
 80088b0:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80088b4:	3306      	adds	r3, #6
 80088b6:	00db      	lsls	r3, r3, #3
 80088b8:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 80088bc:	4413      	add	r3, r2
 80088be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80088c2:	f107 0220 	add.w	r2, r7, #32
 80088c6:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80088ca:	00db      	lsls	r3, r3, #3
 80088cc:	4413      	add	r3, r2
 80088ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088d2:	f7f7 fe83 	bl	80005dc <__aeabi_dmul>
 80088d6:	4602      	mov	r2, r0
 80088d8:	460b      	mov	r3, r1
 80088da:	4620      	mov	r0, r4
 80088dc:	4629      	mov	r1, r5
 80088de:	f7f7 fcc5 	bl	800026c <__aeabi_dsub>
 80088e2:	4602      	mov	r2, r0
 80088e4:	460b      	mov	r3, r1
 80088e6:	f107 0118 	add.w	r1, r7, #24
 80088ea:	e9c1 2300 	strd	r2, r3, [r1]
      for (kk = 0; kk < 2; kk++) {
 80088ee:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80088f2:	3301      	adds	r3, #1
 80088f4:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 80088f8:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80088fc:	2b01      	cmp	r3, #1
 80088fe:	ddd3      	ble.n	80088a8 <UTMeanCovSqrt_C2vgLQ4W+0xa44>
      }

      x[2] = temp / Sy[8];
 8008900:	f107 0318 	add.w	r3, r7, #24
 8008904:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008908:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 800890c:	3340      	adds	r3, #64	; 0x40
 800890e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008912:	f7f7 ff8d 	bl	8000830 <__aeabi_ddiv>
 8008916:	4602      	mov	r2, r0
 8008918:	460b      	mov	r3, r1
 800891a:	f107 0120 	add.w	r1, r7, #32
 800891e:	e9c1 2304 	strd	r2, r3, [r1, #16]
      scale = 3.3121686421112381E-170;
 8008922:	f04f 0200 	mov.w	r2, #0
 8008926:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 800892a:	e9c7 23aa 	strd	r2, r3, [r7, #680]	; 0x2a8
      absxk = fabs(x[0]);
 800892e:	f107 0320 	add.w	r3, r7, #32
 8008932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008936:	4611      	mov	r1, r2
 8008938:	f8c7 1278 	str.w	r1, [r7, #632]	; 0x278
 800893c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008940:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
      if (absxk > 3.3121686421112381E-170) {
 8008944:	f04f 0200 	mov.w	r2, #0
 8008948:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 800894c:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 8008950:	f7f8 f8d4 	bl	8000afc <__aeabi_dcmpgt>
 8008954:	4603      	mov	r3, r0
 8008956:	2b00      	cmp	r3, #0
 8008958:	d00b      	beq.n	8008972 <UTMeanCovSqrt_C2vgLQ4W+0xb0e>
        temp = 1.0;
 800895a:	f107 0118 	add.w	r1, r7, #24
 800895e:	f04f 0200 	mov.w	r2, #0
 8008962:	4b85      	ldr	r3, [pc, #532]	; (8008b78 <UTMeanCovSqrt_C2vgLQ4W+0xd14>)
 8008964:	e9c1 2300 	strd	r2, r3, [r1]
        scale = absxk;
 8008968:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 800896c:	e9c7 23aa 	strd	r2, r3, [r7, #680]	; 0x2a8
 8008970:	e017      	b.n	80089a2 <UTMeanCovSqrt_C2vgLQ4W+0xb3e>
      } else {
        b_t = absxk / 3.3121686421112381E-170;
 8008972:	f04f 0200 	mov.w	r2, #0
 8008976:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 800897a:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 800897e:	f7f7 ff57 	bl	8000830 <__aeabi_ddiv>
 8008982:	4602      	mov	r2, r0
 8008984:	460b      	mov	r3, r1
 8008986:	e9c7 239c 	strd	r2, r3, [r7, #624]	; 0x270
        temp = b_t * b_t;
 800898a:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 800898e:	e9d7 019c 	ldrd	r0, r1, [r7, #624]	; 0x270
 8008992:	f7f7 fe23 	bl	80005dc <__aeabi_dmul>
 8008996:	4602      	mov	r2, r0
 8008998:	460b      	mov	r3, r1
 800899a:	f107 0118 	add.w	r1, r7, #24
 800899e:	e9c1 2300 	strd	r2, r3, [r1]
      }

      absxk = fabs(x[1]);
 80089a2:	f107 0320 	add.w	r3, r7, #32
 80089a6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80089aa:	4611      	mov	r1, r2
 80089ac:	f8c7 1278 	str.w	r1, [r7, #632]	; 0x278
 80089b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80089b4:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
      if (absxk > scale) {
 80089b8:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 80089bc:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 80089c0:	f7f8 f89c 	bl	8000afc <__aeabi_dcmpgt>
 80089c4:	4603      	mov	r3, r0
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d02d      	beq.n	8008a26 <UTMeanCovSqrt_C2vgLQ4W+0xbc2>
        b_t = scale / absxk;
 80089ca:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 80089ce:	e9d7 01aa 	ldrd	r0, r1, [r7, #680]	; 0x2a8
 80089d2:	f7f7 ff2d 	bl	8000830 <__aeabi_ddiv>
 80089d6:	4602      	mov	r2, r0
 80089d8:	460b      	mov	r3, r1
 80089da:	e9c7 239c 	strd	r2, r3, [r7, #624]	; 0x270
        temp = temp * b_t * b_t + 1.0;
 80089de:	f107 0318 	add.w	r3, r7, #24
 80089e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80089e6:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 80089ea:	f7f7 fdf7 	bl	80005dc <__aeabi_dmul>
 80089ee:	4602      	mov	r2, r0
 80089f0:	460b      	mov	r3, r1
 80089f2:	4610      	mov	r0, r2
 80089f4:	4619      	mov	r1, r3
 80089f6:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 80089fa:	f7f7 fdef 	bl	80005dc <__aeabi_dmul>
 80089fe:	4602      	mov	r2, r0
 8008a00:	460b      	mov	r3, r1
 8008a02:	4610      	mov	r0, r2
 8008a04:	4619      	mov	r1, r3
 8008a06:	f04f 0200 	mov.w	r2, #0
 8008a0a:	4b5b      	ldr	r3, [pc, #364]	; (8008b78 <UTMeanCovSqrt_C2vgLQ4W+0xd14>)
 8008a0c:	f7f7 fc30 	bl	8000270 <__adddf3>
 8008a10:	4602      	mov	r2, r0
 8008a12:	460b      	mov	r3, r1
 8008a14:	f107 0118 	add.w	r1, r7, #24
 8008a18:	e9c1 2300 	strd	r2, r3, [r1]
        scale = absxk;
 8008a1c:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 8008a20:	e9c7 23aa 	strd	r2, r3, [r7, #680]	; 0x2a8
 8008a24:	e01f      	b.n	8008a66 <UTMeanCovSqrt_C2vgLQ4W+0xc02>
      } else {
        b_t = absxk / scale;
 8008a26:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 8008a2a:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 8008a2e:	f7f7 feff 	bl	8000830 <__aeabi_ddiv>
 8008a32:	4602      	mov	r2, r0
 8008a34:	460b      	mov	r3, r1
 8008a36:	e9c7 239c 	strd	r2, r3, [r7, #624]	; 0x270
        temp += b_t * b_t;
 8008a3a:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 8008a3e:	e9d7 019c 	ldrd	r0, r1, [r7, #624]	; 0x270
 8008a42:	f7f7 fdcb 	bl	80005dc <__aeabi_dmul>
 8008a46:	4602      	mov	r2, r0
 8008a48:	460b      	mov	r3, r1
 8008a4a:	4610      	mov	r0, r2
 8008a4c:	4619      	mov	r1, r3
 8008a4e:	f107 0318 	add.w	r3, r7, #24
 8008a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a56:	f7f7 fc0b 	bl	8000270 <__adddf3>
 8008a5a:	4602      	mov	r2, r0
 8008a5c:	460b      	mov	r3, r1
 8008a5e:	f107 0118 	add.w	r1, r7, #24
 8008a62:	e9c1 2300 	strd	r2, r3, [r1]
      }

      absxk = fabs(x[2]);
 8008a66:	f107 0320 	add.w	r3, r7, #32
 8008a6a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8008a6e:	4611      	mov	r1, r2
 8008a70:	f8c7 1278 	str.w	r1, [r7, #632]	; 0x278
 8008a74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008a78:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
      if (absxk > scale) {
 8008a7c:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 8008a80:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 8008a84:	f7f8 f83a 	bl	8000afc <__aeabi_dcmpgt>
 8008a88:	4603      	mov	r3, r0
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d02d      	beq.n	8008aea <UTMeanCovSqrt_C2vgLQ4W+0xc86>
        b_t = scale / absxk;
 8008a8e:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 8008a92:	e9d7 01aa 	ldrd	r0, r1, [r7, #680]	; 0x2a8
 8008a96:	f7f7 fecb 	bl	8000830 <__aeabi_ddiv>
 8008a9a:	4602      	mov	r2, r0
 8008a9c:	460b      	mov	r3, r1
 8008a9e:	e9c7 239c 	strd	r2, r3, [r7, #624]	; 0x270
        temp = temp * b_t * b_t + 1.0;
 8008aa2:	f107 0318 	add.w	r3, r7, #24
 8008aa6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008aaa:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 8008aae:	f7f7 fd95 	bl	80005dc <__aeabi_dmul>
 8008ab2:	4602      	mov	r2, r0
 8008ab4:	460b      	mov	r3, r1
 8008ab6:	4610      	mov	r0, r2
 8008ab8:	4619      	mov	r1, r3
 8008aba:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 8008abe:	f7f7 fd8d 	bl	80005dc <__aeabi_dmul>
 8008ac2:	4602      	mov	r2, r0
 8008ac4:	460b      	mov	r3, r1
 8008ac6:	4610      	mov	r0, r2
 8008ac8:	4619      	mov	r1, r3
 8008aca:	f04f 0200 	mov.w	r2, #0
 8008ace:	4b2a      	ldr	r3, [pc, #168]	; (8008b78 <UTMeanCovSqrt_C2vgLQ4W+0xd14>)
 8008ad0:	f7f7 fbce 	bl	8000270 <__adddf3>
 8008ad4:	4602      	mov	r2, r0
 8008ad6:	460b      	mov	r3, r1
 8008ad8:	f107 0118 	add.w	r1, r7, #24
 8008adc:	e9c1 2300 	strd	r2, r3, [r1]
        scale = absxk;
 8008ae0:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 8008ae4:	e9c7 23aa 	strd	r2, r3, [r7, #680]	; 0x2a8
 8008ae8:	e01f      	b.n	8008b2a <UTMeanCovSqrt_C2vgLQ4W+0xcc6>
      } else {
        b_t = absxk / scale;
 8008aea:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 8008aee:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 8008af2:	f7f7 fe9d 	bl	8000830 <__aeabi_ddiv>
 8008af6:	4602      	mov	r2, r0
 8008af8:	460b      	mov	r3, r1
 8008afa:	e9c7 239c 	strd	r2, r3, [r7, #624]	; 0x270
        temp += b_t * b_t;
 8008afe:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 8008b02:	e9d7 019c 	ldrd	r0, r1, [r7, #624]	; 0x270
 8008b06:	f7f7 fd69 	bl	80005dc <__aeabi_dmul>
 8008b0a:	4602      	mov	r2, r0
 8008b0c:	460b      	mov	r3, r1
 8008b0e:	4610      	mov	r0, r2
 8008b10:	4619      	mov	r1, r3
 8008b12:	f107 0318 	add.w	r3, r7, #24
 8008b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b1a:	f7f7 fba9 	bl	8000270 <__adddf3>
 8008b1e:	4602      	mov	r2, r0
 8008b20:	460b      	mov	r3, r1
 8008b22:	f107 0118 	add.w	r1, r7, #24
 8008b26:	e9c1 2300 	strd	r2, r3, [r1]
      }

      temp = scale * sqrt(temp);
 8008b2a:	f107 0318 	add.w	r3, r7, #24
 8008b2e:	ed93 7b00 	vldr	d7, [r3]
 8008b32:	eeb0 0a47 	vmov.f32	s0, s14
 8008b36:	eef0 0a67 	vmov.f32	s1, s15
 8008b3a:	f011 fd4d 	bl	801a5d8 <sqrt>
 8008b3e:	ec51 0b10 	vmov	r0, r1, d0
 8008b42:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 8008b46:	f7f7 fd49 	bl	80005dc <__aeabi_dmul>
 8008b4a:	4602      	mov	r2, r0
 8008b4c:	460b      	mov	r3, r1
 8008b4e:	f107 0118 	add.w	r1, r7, #24
 8008b52:	e9c1 2300 	strd	r2, r3, [r1]
      if (temp >= 1.0) {
 8008b56:	f107 0318 	add.w	r3, r7, #24
 8008b5a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008b5e:	f04f 0200 	mov.w	r2, #0
 8008b62:	4b05      	ldr	r3, [pc, #20]	; (8008b78 <UTMeanCovSqrt_C2vgLQ4W+0xd14>)
 8008b64:	f7f7 ffc0 	bl	8000ae8 <__aeabi_dcmpge>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d006      	beq.n	8008b7c <UTMeanCovSqrt_C2vgLQ4W+0xd18>
        guard1 = true;
 8008b6e:	2301      	movs	r3, #1
 8008b70:	f887 328a 	strb.w	r3, [r7, #650]	; 0x28a
 8008b74:	e1ed      	b.n	8008f52 <UTMeanCovSqrt_C2vgLQ4W+0x10ee>
 8008b76:	bf00      	nop
 8008b78:	3ff00000 	.word	0x3ff00000
      } else {
        rotate_LZ7ctbe0(sqrt(1.0 - temp * temp), x[2], &c[2], &s[2], &temp);
 8008b7c:	f107 0318 	add.w	r3, r7, #24
 8008b80:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008b84:	f107 0318 	add.w	r3, r7, #24
 8008b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b8c:	f7f7 fd26 	bl	80005dc <__aeabi_dmul>
 8008b90:	4602      	mov	r2, r0
 8008b92:	460b      	mov	r3, r1
 8008b94:	f04f 0000 	mov.w	r0, #0
 8008b98:	49b4      	ldr	r1, [pc, #720]	; (8008e6c <UTMeanCovSqrt_C2vgLQ4W+0x1008>)
 8008b9a:	f7f7 fb67 	bl	800026c <__aeabi_dsub>
 8008b9e:	4602      	mov	r2, r0
 8008ba0:	460b      	mov	r3, r1
 8008ba2:	ec43 2b17 	vmov	d7, r2, r3
 8008ba6:	eeb0 0a47 	vmov.f32	s0, s14
 8008baa:	eef0 0a67 	vmov.f32	s1, s15
 8008bae:	f011 fd13 	bl	801a5d8 <sqrt>
 8008bb2:	eeb0 6a40 	vmov.f32	s12, s0
 8008bb6:	eef0 6a60 	vmov.f32	s13, s1
 8008bba:	f107 0320 	add.w	r3, r7, #32
 8008bbe:	ed93 7b04 	vldr	d7, [r3, #16]
 8008bc2:	f107 0218 	add.w	r2, r7, #24
 8008bc6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008bca:	f103 0110 	add.w	r1, r3, #16
 8008bce:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008bd2:	3310      	adds	r3, #16
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	eeb0 1a47 	vmov.f32	s2, s14
 8008bda:	eef0 1a67 	vmov.f32	s3, s15
 8008bde:	eeb0 0a46 	vmov.f32	s0, s12
 8008be2:	eef0 0a66 	vmov.f32	s1, s13
 8008be6:	f003 fc45 	bl	800c474 <rotate_LZ7ctbe0>
        x[2] = 0.0;
 8008bea:	f107 0120 	add.w	r1, r7, #32
 8008bee:	f04f 0200 	mov.w	r2, #0
 8008bf2:	f04f 0300 	mov.w	r3, #0
 8008bf6:	e9c1 2304 	strd	r2, r3, [r1, #16]
        rotate_LZ7ctbe0(temp, x[1], &c[1], &s[1], &temp);
 8008bfa:	f107 0318 	add.w	r3, r7, #24
 8008bfe:	ed93 7b00 	vldr	d7, [r3]
 8008c02:	f107 0320 	add.w	r3, r7, #32
 8008c06:	ed93 6b02 	vldr	d6, [r3, #8]
 8008c0a:	f107 0218 	add.w	r2, r7, #24
 8008c0e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008c12:	f103 0108 	add.w	r1, r3, #8
 8008c16:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008c1a:	3308      	adds	r3, #8
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	eeb0 1a46 	vmov.f32	s2, s12
 8008c22:	eef0 1a66 	vmov.f32	s3, s13
 8008c26:	eeb0 0a47 	vmov.f32	s0, s14
 8008c2a:	eef0 0a67 	vmov.f32	s1, s15
 8008c2e:	f003 fc21 	bl	800c474 <rotate_LZ7ctbe0>
        x[1] = 0.0;
 8008c32:	f107 0120 	add.w	r1, r7, #32
 8008c36:	f04f 0200 	mov.w	r2, #0
 8008c3a:	f04f 0300 	mov.w	r3, #0
 8008c3e:	e9c1 2302 	strd	r2, r3, [r1, #8]
        rotate_LZ7ctbe0(temp, x[0], &c[0], &s[0], &temp);
 8008c42:	f107 0318 	add.w	r3, r7, #24
 8008c46:	ed93 7b00 	vldr	d7, [r3]
 8008c4a:	f107 0320 	add.w	r3, r7, #32
 8008c4e:	ed93 6b00 	vldr	d6, [r3]
 8008c52:	f107 0218 	add.w	r2, r7, #24
 8008c56:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8008c5a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008c5e:	4618      	mov	r0, r3
 8008c60:	eeb0 1a46 	vmov.f32	s2, s12
 8008c64:	eef0 1a66 	vmov.f32	s3, s13
 8008c68:	eeb0 0a47 	vmov.f32	s0, s14
 8008c6c:	eef0 0a67 	vmov.f32	s1, s15
 8008c70:	f003 fc00 	bl	800c474 <rotate_LZ7ctbe0>
        x[0] = 0.0;
 8008c74:	f107 0120 	add.w	r1, r7, #32
 8008c78:	f04f 0200 	mov.w	r2, #0
 8008c7c:	f04f 0300 	mov.w	r3, #0
 8008c80:	e9c1 2300 	strd	r2, r3, [r1]
        for (iAcol = 0; iAcol + 1 > 0; iAcol--) {
 8008c84:	2300      	movs	r3, #0
 8008c86:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8008c8a:	e072      	b.n	8008d72 <UTMeanCovSqrt_C2vgLQ4W+0xf0e>
          temp = s[iAcol] * Sy[iAcol];
 8008c8c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8008c90:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008c94:	00db      	lsls	r3, r3, #3
 8008c96:	4413      	add	r3, r2
 8008c98:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008c9c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008ca0:	00db      	lsls	r3, r3, #3
 8008ca2:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8008ca6:	4413      	add	r3, r2
 8008ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cac:	f7f7 fc96 	bl	80005dc <__aeabi_dmul>
 8008cb0:	4602      	mov	r2, r0
 8008cb2:	460b      	mov	r3, r1
 8008cb4:	f107 0118 	add.w	r1, r7, #24
 8008cb8:	e9c1 2300 	strd	r2, r3, [r1]
          Sy[iAcol] = c[iAcol] * Sy[iAcol] - s[iAcol] * x[0];
 8008cbc:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8008cc0:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008cc4:	00db      	lsls	r3, r3, #3
 8008cc6:	4413      	add	r3, r2
 8008cc8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008ccc:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008cd0:	00db      	lsls	r3, r3, #3
 8008cd2:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8008cd6:	4413      	add	r3, r2
 8008cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cdc:	f7f7 fc7e 	bl	80005dc <__aeabi_dmul>
 8008ce0:	4602      	mov	r2, r0
 8008ce2:	460b      	mov	r3, r1
 8008ce4:	4690      	mov	r8, r2
 8008ce6:	4699      	mov	r9, r3
 8008ce8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8008cec:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008cf0:	00db      	lsls	r3, r3, #3
 8008cf2:	4413      	add	r3, r2
 8008cf4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008cf8:	f107 0320 	add.w	r3, r7, #32
 8008cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d00:	f7f7 fc6c 	bl	80005dc <__aeabi_dmul>
 8008d04:	4602      	mov	r2, r0
 8008d06:	460b      	mov	r3, r1
 8008d08:	4610      	mov	r0, r2
 8008d0a:	4619      	mov	r1, r3
 8008d0c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008d10:	00db      	lsls	r3, r3, #3
 8008d12:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8008d16:	18d4      	adds	r4, r2, r3
 8008d18:	4602      	mov	r2, r0
 8008d1a:	460b      	mov	r3, r1
 8008d1c:	4640      	mov	r0, r8
 8008d1e:	4649      	mov	r1, r9
 8008d20:	f7f7 faa4 	bl	800026c <__aeabi_dsub>
 8008d24:	4602      	mov	r2, r0
 8008d26:	460b      	mov	r3, r1
 8008d28:	e9c4 2300 	strd	r2, r3, [r4]
          x[0] = c[iAcol] * x[0] + temp;
 8008d2c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8008d30:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008d34:	00db      	lsls	r3, r3, #3
 8008d36:	4413      	add	r3, r2
 8008d38:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008d3c:	f107 0320 	add.w	r3, r7, #32
 8008d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d44:	f7f7 fc4a 	bl	80005dc <__aeabi_dmul>
 8008d48:	4602      	mov	r2, r0
 8008d4a:	460b      	mov	r3, r1
 8008d4c:	4610      	mov	r0, r2
 8008d4e:	4619      	mov	r1, r3
 8008d50:	f107 0318 	add.w	r3, r7, #24
 8008d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d58:	f7f7 fa8a 	bl	8000270 <__adddf3>
 8008d5c:	4602      	mov	r2, r0
 8008d5e:	460b      	mov	r3, r1
 8008d60:	f107 0120 	add.w	r1, r7, #32
 8008d64:	e9c1 2300 	strd	r2, r3, [r1]
        for (iAcol = 0; iAcol + 1 > 0; iAcol--) {
 8008d68:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008d6c:	3b01      	subs	r3, #1
 8008d6e:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8008d72:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	da88      	bge.n	8008c8c <UTMeanCovSqrt_C2vgLQ4W+0xe28>
        }

        for (iAcol = 1; iAcol + 1 > 0; iAcol--) {
 8008d7a:	2301      	movs	r3, #1
 8008d7c:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8008d80:	e06c      	b.n	8008e5c <UTMeanCovSqrt_C2vgLQ4W+0xff8>
          absxk = Sy[iAcol + 3];
 8008d82:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008d86:	3303      	adds	r3, #3
 8008d88:	00db      	lsls	r3, r3, #3
 8008d8a:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8008d8e:	4413      	add	r3, r2
 8008d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d94:	e9c7 239e 	strd	r2, r3, [r7, #632]	; 0x278
          Sy[iAcol + 3] = absxk * c[iAcol] - s[iAcol] * x[1];
 8008d98:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8008d9c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008da0:	00db      	lsls	r3, r3, #3
 8008da2:	4413      	add	r3, r2
 8008da4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008da8:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 8008dac:	f7f7 fc16 	bl	80005dc <__aeabi_dmul>
 8008db0:	4602      	mov	r2, r0
 8008db2:	460b      	mov	r3, r1
 8008db4:	4690      	mov	r8, r2
 8008db6:	4699      	mov	r9, r3
 8008db8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8008dbc:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008dc0:	00db      	lsls	r3, r3, #3
 8008dc2:	4413      	add	r3, r2
 8008dc4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008dc8:	f107 0320 	add.w	r3, r7, #32
 8008dcc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8008dd0:	f7f7 fc04 	bl	80005dc <__aeabi_dmul>
 8008dd4:	4602      	mov	r2, r0
 8008dd6:	460b      	mov	r3, r1
 8008dd8:	4610      	mov	r0, r2
 8008dda:	4619      	mov	r1, r3
 8008ddc:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008de0:	3303      	adds	r3, #3
 8008de2:	00db      	lsls	r3, r3, #3
 8008de4:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8008de8:	18d4      	adds	r4, r2, r3
 8008dea:	4602      	mov	r2, r0
 8008dec:	460b      	mov	r3, r1
 8008dee:	4640      	mov	r0, r8
 8008df0:	4649      	mov	r1, r9
 8008df2:	f7f7 fa3b 	bl	800026c <__aeabi_dsub>
 8008df6:	4602      	mov	r2, r0
 8008df8:	460b      	mov	r3, r1
 8008dfa:	e9c4 2300 	strd	r2, r3, [r4]
          x[1] = c[iAcol] * x[1] + absxk * s[iAcol];
 8008dfe:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8008e02:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008e06:	00db      	lsls	r3, r3, #3
 8008e08:	4413      	add	r3, r2
 8008e0a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008e0e:	f107 0320 	add.w	r3, r7, #32
 8008e12:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8008e16:	f7f7 fbe1 	bl	80005dc <__aeabi_dmul>
 8008e1a:	4602      	mov	r2, r0
 8008e1c:	460b      	mov	r3, r1
 8008e1e:	4614      	mov	r4, r2
 8008e20:	461d      	mov	r5, r3
 8008e22:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8008e26:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008e2a:	00db      	lsls	r3, r3, #3
 8008e2c:	4413      	add	r3, r2
 8008e2e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008e32:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 8008e36:	f7f7 fbd1 	bl	80005dc <__aeabi_dmul>
 8008e3a:	4602      	mov	r2, r0
 8008e3c:	460b      	mov	r3, r1
 8008e3e:	4620      	mov	r0, r4
 8008e40:	4629      	mov	r1, r5
 8008e42:	f7f7 fa15 	bl	8000270 <__adddf3>
 8008e46:	4602      	mov	r2, r0
 8008e48:	460b      	mov	r3, r1
 8008e4a:	f107 0120 	add.w	r1, r7, #32
 8008e4e:	e9c1 2302 	strd	r2, r3, [r1, #8]
        for (iAcol = 1; iAcol + 1 > 0; iAcol--) {
 8008e52:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008e56:	3b01      	subs	r3, #1
 8008e58:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8008e5c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	da8e      	bge.n	8008d82 <UTMeanCovSqrt_C2vgLQ4W+0xf1e>
        }

        for (iAcol = 2; iAcol + 1 > 0; iAcol--) {
 8008e64:	2302      	movs	r3, #2
 8008e66:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8008e6a:	e06e      	b.n	8008f4a <UTMeanCovSqrt_C2vgLQ4W+0x10e6>
 8008e6c:	3ff00000 	.word	0x3ff00000
          absxk = Sy[iAcol + 6];
 8008e70:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008e74:	3306      	adds	r3, #6
 8008e76:	00db      	lsls	r3, r3, #3
 8008e78:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8008e7c:	4413      	add	r3, r2
 8008e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e82:	e9c7 239e 	strd	r2, r3, [r7, #632]	; 0x278
          Sy[iAcol + 6] = absxk * c[iAcol] - s[iAcol] * x[2];
 8008e86:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8008e8a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008e8e:	00db      	lsls	r3, r3, #3
 8008e90:	4413      	add	r3, r2
 8008e92:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008e96:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 8008e9a:	f7f7 fb9f 	bl	80005dc <__aeabi_dmul>
 8008e9e:	4602      	mov	r2, r0
 8008ea0:	460b      	mov	r3, r1
 8008ea2:	4690      	mov	r8, r2
 8008ea4:	4699      	mov	r9, r3
 8008ea6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8008eaa:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008eae:	00db      	lsls	r3, r3, #3
 8008eb0:	4413      	add	r3, r2
 8008eb2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008eb6:	f107 0320 	add.w	r3, r7, #32
 8008eba:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8008ebe:	f7f7 fb8d 	bl	80005dc <__aeabi_dmul>
 8008ec2:	4602      	mov	r2, r0
 8008ec4:	460b      	mov	r3, r1
 8008ec6:	4610      	mov	r0, r2
 8008ec8:	4619      	mov	r1, r3
 8008eca:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008ece:	3306      	adds	r3, #6
 8008ed0:	00db      	lsls	r3, r3, #3
 8008ed2:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8008ed6:	18d4      	adds	r4, r2, r3
 8008ed8:	4602      	mov	r2, r0
 8008eda:	460b      	mov	r3, r1
 8008edc:	4640      	mov	r0, r8
 8008ede:	4649      	mov	r1, r9
 8008ee0:	f7f7 f9c4 	bl	800026c <__aeabi_dsub>
 8008ee4:	4602      	mov	r2, r0
 8008ee6:	460b      	mov	r3, r1
 8008ee8:	e9c4 2300 	strd	r2, r3, [r4]
          x[2] = c[iAcol] * x[2] + absxk * s[iAcol];
 8008eec:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8008ef0:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008ef4:	00db      	lsls	r3, r3, #3
 8008ef6:	4413      	add	r3, r2
 8008ef8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008efc:	f107 0320 	add.w	r3, r7, #32
 8008f00:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8008f04:	f7f7 fb6a 	bl	80005dc <__aeabi_dmul>
 8008f08:	4602      	mov	r2, r0
 8008f0a:	460b      	mov	r3, r1
 8008f0c:	4614      	mov	r4, r2
 8008f0e:	461d      	mov	r5, r3
 8008f10:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8008f14:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008f18:	00db      	lsls	r3, r3, #3
 8008f1a:	4413      	add	r3, r2
 8008f1c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008f20:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 8008f24:	f7f7 fb5a 	bl	80005dc <__aeabi_dmul>
 8008f28:	4602      	mov	r2, r0
 8008f2a:	460b      	mov	r3, r1
 8008f2c:	4620      	mov	r0, r4
 8008f2e:	4629      	mov	r1, r5
 8008f30:	f7f7 f99e 	bl	8000270 <__adddf3>
 8008f34:	4602      	mov	r2, r0
 8008f36:	460b      	mov	r3, r1
 8008f38:	f107 0120 	add.w	r1, r7, #32
 8008f3c:	e9c1 2304 	strd	r2, r3, [r1, #16]
        for (iAcol = 2; iAcol + 1 > 0; iAcol--) {
 8008f40:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008f44:	3b01      	subs	r3, #1
 8008f46:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8008f4a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	da8e      	bge.n	8008e70 <UTMeanCovSqrt_C2vgLQ4W+0x100c>
        }
      }
    }

    if (guard1) {
 8008f52:	f897 328a 	ldrb.w	r3, [r7, #650]	; 0x28a
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	f000 82f0 	beq.w	800953c <UTMeanCovSqrt_C2vgLQ4W+0x16d8>
      boolean_T exitg2;
      kk = 0;
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
      for (iAcol = 0; iAcol < 3; iAcol++) {
 8008f62:	2300      	movs	r3, #0
 8008f64:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8008f68:	e0d3      	b.n	8009112 <UTMeanCovSqrt_C2vgLQ4W+0x12ae>
        i_1 = 0;
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
        for (i = 0; i < 3; i++) {
 8008f70:	2300      	movs	r3, #0
 8008f72:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 8008f76:	e0bd      	b.n	80090f4 <UTMeanCovSqrt_C2vgLQ4W+0x1290>
          Sy_tmp = i_1 + iAcol;
 8008f78:	f8d7 2290 	ldr.w	r2, [r7, #656]	; 0x290
 8008f7c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008f80:	4413      	add	r3, r2
 8008f82:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
          Sy_0[Sy_tmp] = 0.0;
 8008f86:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8008f8a:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8008f8e:	00db      	lsls	r3, r3, #3
 8008f90:	18d1      	adds	r1, r2, r3
 8008f92:	f04f 0200 	mov.w	r2, #0
 8008f96:	f04f 0300 	mov.w	r3, #0
 8008f9a:	e9c1 2300 	strd	r2, r3, [r1]
          Sy_0[Sy_tmp] += Sy[kk] * Sy[i_1];
 8008f9e:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8008fa2:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8008fa6:	00db      	lsls	r3, r3, #3
 8008fa8:	4413      	add	r3, r2
 8008faa:	e9d3 4500 	ldrd	r4, r5, [r3]
 8008fae:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8008fb2:	00db      	lsls	r3, r3, #3
 8008fb4:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8008fb8:	4413      	add	r3, r2
 8008fba:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008fbe:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8008fc2:	00db      	lsls	r3, r3, #3
 8008fc4:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8008fc8:	4413      	add	r3, r2
 8008fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fce:	f7f7 fb05 	bl	80005dc <__aeabi_dmul>
 8008fd2:	4602      	mov	r2, r0
 8008fd4:	460b      	mov	r3, r1
 8008fd6:	4620      	mov	r0, r4
 8008fd8:	4629      	mov	r1, r5
 8008fda:	f7f7 f949 	bl	8000270 <__adddf3>
 8008fde:	4602      	mov	r2, r0
 8008fe0:	460b      	mov	r3, r1
 8008fe2:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8008fe6:	f8d7 1264 	ldr.w	r1, [r7, #612]	; 0x264
 8008fea:	00c9      	lsls	r1, r1, #3
 8008fec:	4401      	add	r1, r0
 8008fee:	e9c1 2300 	strd	r2, r3, [r1]
          Sy_0[Sy_tmp] += Sy[kk + 1] * Sy[i_1 + 1];
 8008ff2:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8008ff6:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8008ffa:	00db      	lsls	r3, r3, #3
 8008ffc:	4413      	add	r3, r2
 8008ffe:	e9d3 4500 	ldrd	r4, r5, [r3]
 8009002:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8009006:	3301      	adds	r3, #1
 8009008:	00db      	lsls	r3, r3, #3
 800900a:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 800900e:	4413      	add	r3, r2
 8009010:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009014:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8009018:	3301      	adds	r3, #1
 800901a:	00db      	lsls	r3, r3, #3
 800901c:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8009020:	4413      	add	r3, r2
 8009022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009026:	f7f7 fad9 	bl	80005dc <__aeabi_dmul>
 800902a:	4602      	mov	r2, r0
 800902c:	460b      	mov	r3, r1
 800902e:	4620      	mov	r0, r4
 8009030:	4629      	mov	r1, r5
 8009032:	f7f7 f91d 	bl	8000270 <__adddf3>
 8009036:	4602      	mov	r2, r0
 8009038:	460b      	mov	r3, r1
 800903a:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 800903e:	f8d7 1264 	ldr.w	r1, [r7, #612]	; 0x264
 8009042:	00c9      	lsls	r1, r1, #3
 8009044:	4401      	add	r1, r0
 8009046:	e9c1 2300 	strd	r2, r3, [r1]
          Sy_0[Sy_tmp] += Sy[kk + 2] * Sy[i_1 + 2];
 800904a:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800904e:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8009052:	00db      	lsls	r3, r3, #3
 8009054:	4413      	add	r3, r2
 8009056:	e9d3 4500 	ldrd	r4, r5, [r3]
 800905a:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 800905e:	3302      	adds	r3, #2
 8009060:	00db      	lsls	r3, r3, #3
 8009062:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8009066:	4413      	add	r3, r2
 8009068:	e9d3 0100 	ldrd	r0, r1, [r3]
 800906c:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8009070:	3302      	adds	r3, #2
 8009072:	00db      	lsls	r3, r3, #3
 8009074:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8009078:	4413      	add	r3, r2
 800907a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800907e:	f7f7 faad 	bl	80005dc <__aeabi_dmul>
 8009082:	4602      	mov	r2, r0
 8009084:	460b      	mov	r3, r1
 8009086:	4620      	mov	r0, r4
 8009088:	4629      	mov	r1, r5
 800908a:	f7f7 f8f1 	bl	8000270 <__adddf3>
 800908e:	4602      	mov	r2, r0
 8009090:	460b      	mov	r3, r1
 8009092:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8009096:	f8d7 1264 	ldr.w	r1, [r7, #612]	; 0x264
 800909a:	00c9      	lsls	r1, r1, #3
 800909c:	4401      	add	r1, r0
 800909e:	e9c1 2300 	strd	r2, r3, [r1]
          Y1_0[i + kk] = Y1[i] * Y1[iAcol];
 80090a2:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80090a6:	00db      	lsls	r3, r3, #3
 80090a8:	1d3a      	adds	r2, r7, #4
 80090aa:	6812      	ldr	r2, [r2, #0]
 80090ac:	4413      	add	r3, r2
 80090ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80090b2:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80090b6:	00db      	lsls	r3, r3, #3
 80090b8:	1d3a      	adds	r2, r7, #4
 80090ba:	6812      	ldr	r2, [r2, #0]
 80090bc:	4413      	add	r3, r2
 80090be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090c2:	f8d7 529c 	ldr.w	r5, [r7, #668]	; 0x29c
 80090c6:	f8d7 428c 	ldr.w	r4, [r7, #652]	; 0x28c
 80090ca:	442c      	add	r4, r5
 80090cc:	f7f7 fa86 	bl	80005dc <__aeabi_dmul>
 80090d0:	4602      	mov	r2, r0
 80090d2:	460b      	mov	r3, r1
 80090d4:	f107 0068 	add.w	r0, r7, #104	; 0x68
 80090d8:	00e1      	lsls	r1, r4, #3
 80090da:	4401      	add	r1, r0
 80090dc:	e9c1 2300 	strd	r2, r3, [r1]
          i_1 += 3;
 80090e0:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 80090e4:	3303      	adds	r3, #3
 80090e6:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
        for (i = 0; i < 3; i++) {
 80090ea:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80090ee:	3301      	adds	r3, #1
 80090f0:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 80090f4:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80090f8:	2b02      	cmp	r3, #2
 80090fa:	f77f af3d 	ble.w	8008f78 <UTMeanCovSqrt_C2vgLQ4W+0x1114>
        }

        kk += 3;
 80090fe:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8009102:	3303      	adds	r3, #3
 8009104:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
      for (iAcol = 0; iAcol < 3; iAcol++) {
 8009108:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800910c:	3301      	adds	r3, #1
 800910e:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8009112:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8009116:	2b02      	cmp	r3, #2
 8009118:	f77f af27 	ble.w	8008f6a <UTMeanCovSqrt_C2vgLQ4W+0x1106>
      }

      errorCondition = true;
 800911c:	2301      	movs	r3, #1
 800911e:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
      for (iAcol = 0; iAcol < 9; iAcol++) {
 8009122:	2300      	movs	r3, #0
 8009124:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8009128:	e049      	b.n	80091be <UTMeanCovSqrt_C2vgLQ4W+0x135a>
        temp = Sy_0[iAcol] - Y1_0[iAcol];
 800912a:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800912e:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8009132:	00db      	lsls	r3, r3, #3
 8009134:	4413      	add	r3, r2
 8009136:	e9d3 0100 	ldrd	r0, r1, [r3]
 800913a:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800913e:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8009142:	00db      	lsls	r3, r3, #3
 8009144:	4413      	add	r3, r2
 8009146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800914a:	f7f7 f88f 	bl	800026c <__aeabi_dsub>
 800914e:	4602      	mov	r2, r0
 8009150:	460b      	mov	r3, r1
 8009152:	f107 0118 	add.w	r1, r7, #24
 8009156:	e9c1 2300 	strd	r2, r3, [r1]
        if (errorCondition && (rtIsInf(temp) || rtIsNaN(temp))) {
 800915a:	f897 328b 	ldrb.w	r3, [r7, #651]	; 0x28b
 800915e:	2b00      	cmp	r3, #0
 8009160:	d01c      	beq.n	800919c <UTMeanCovSqrt_C2vgLQ4W+0x1338>
 8009162:	f107 0318 	add.w	r3, r7, #24
 8009166:	ed93 7b00 	vldr	d7, [r3]
 800916a:	eeb0 0a47 	vmov.f32	s0, s14
 800916e:	eef0 0a67 	vmov.f32	s1, s15
 8009172:	f003 fbf3 	bl	800c95c <rtIsInf>
 8009176:	4603      	mov	r3, r0
 8009178:	2b00      	cmp	r3, #0
 800917a:	d10c      	bne.n	8009196 <UTMeanCovSqrt_C2vgLQ4W+0x1332>
 800917c:	f107 0318 	add.w	r3, r7, #24
 8009180:	ed93 7b00 	vldr	d7, [r3]
 8009184:	eeb0 0a47 	vmov.f32	s0, s14
 8009188:	eef0 0a67 	vmov.f32	s1, s15
 800918c:	f003 fc0a 	bl	800c9a4 <rtIsNaN>
 8009190:	4603      	mov	r3, r0
 8009192:	2b00      	cmp	r3, #0
 8009194:	d002      	beq.n	800919c <UTMeanCovSqrt_C2vgLQ4W+0x1338>
          errorCondition = false;
 8009196:	2300      	movs	r3, #0
 8009198:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
        }

        Ss[iAcol] = temp;
 800919c:	f107 0318 	add.w	r3, r7, #24
 80091a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091a4:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 80091a8:	f8d7 1298 	ldr.w	r1, [r7, #664]	; 0x298
 80091ac:	00c9      	lsls	r1, r1, #3
 80091ae:	4401      	add	r1, r0
 80091b0:	e9c1 2300 	strd	r2, r3, [r1]
      for (iAcol = 0; iAcol < 9; iAcol++) {
 80091b4:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80091b8:	3301      	adds	r3, #1
 80091ba:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 80091be:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80091c2:	2b08      	cmp	r3, #8
 80091c4:	ddb1      	ble.n	800912a <UTMeanCovSqrt_C2vgLQ4W+0x12c6>
      }

      if (errorCondition) {
 80091c6:	f897 328b 	ldrb.w	r3, [r7, #651]	; 0x28b
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d00a      	beq.n	80091e4 <UTMeanCovSqrt_C2vgLQ4W+0x1380>
        svd_u3DvUgOe(Ss, Y1_0, s, Sy_0);
 80091ce:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80091d2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80091d6:	f107 0168 	add.w	r1, r7, #104	; 0x68
 80091da:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 80091de:	f003 fc33 	bl	800ca48 <svd_u3DvUgOe>
 80091e2:	e02c      	b.n	800923e <UTMeanCovSqrt_C2vgLQ4W+0x13da>
      } else {
        s[0] = (rtNaN);
 80091e4:	4bbc      	ldr	r3, [pc, #752]	; (80094d8 <UTMeanCovSqrt_C2vgLQ4W+0x1674>)
 80091e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ea:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80091ee:	e9c1 2300 	strd	r2, r3, [r1]
        s[1] = (rtNaN);
 80091f2:	4bb9      	ldr	r3, [pc, #740]	; (80094d8 <UTMeanCovSqrt_C2vgLQ4W+0x1674>)
 80091f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091f8:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80091fc:	e9c1 2302 	strd	r2, r3, [r1, #8]
        s[2] = (rtNaN);
 8009200:	4bb5      	ldr	r3, [pc, #724]	; (80094d8 <UTMeanCovSqrt_C2vgLQ4W+0x1674>)
 8009202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009206:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800920a:	e9c1 2304 	strd	r2, r3, [r1, #16]
        for (kk = 0; kk < 9; kk++) {
 800920e:	2300      	movs	r3, #0
 8009210:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8009214:	e00f      	b.n	8009236 <UTMeanCovSqrt_C2vgLQ4W+0x13d2>
          Sy_0[kk] = (rtNaN);
 8009216:	4bb0      	ldr	r3, [pc, #704]	; (80094d8 <UTMeanCovSqrt_C2vgLQ4W+0x1674>)
 8009218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800921c:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8009220:	f8d7 128c 	ldr.w	r1, [r7, #652]	; 0x28c
 8009224:	00c9      	lsls	r1, r1, #3
 8009226:	4401      	add	r1, r0
 8009228:	e9c1 2300 	strd	r2, r3, [r1]
        for (kk = 0; kk < 9; kk++) {
 800922c:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8009230:	3301      	adds	r3, #1
 8009232:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8009236:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 800923a:	2b08      	cmp	r3, #8
 800923c:	ddeb      	ble.n	8009216 <UTMeanCovSqrt_C2vgLQ4W+0x13b2>
        }
      }

      memset(&Ss[0], 0, 9U * sizeof(real_T));
 800923e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8009242:	2248      	movs	r2, #72	; 0x48
 8009244:	2100      	movs	r1, #0
 8009246:	4618      	mov	r0, r3
 8009248:	f011 f80e 	bl	801a268 <memset>
      Ss[0] = s[0];
 800924c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009254:	f107 01f8 	add.w	r1, r7, #248	; 0xf8
 8009258:	e9c1 2300 	strd	r2, r3, [r1]
      Ss[4] = s[1];
 800925c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009260:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8009264:	f107 01f8 	add.w	r1, r7, #248	; 0xf8
 8009268:	e9c1 2308 	strd	r2, r3, [r1, #32]
      Ss[8] = s[2];
 800926c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009270:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8009274:	f107 01f8 	add.w	r1, r7, #248	; 0xf8
 8009278:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
      for (kk = 0; kk < 9; kk++) {
 800927c:	2300      	movs	r3, #0
 800927e:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8009282:	e01e      	b.n	80092c2 <UTMeanCovSqrt_C2vgLQ4W+0x145e>
        Ss[kk] = sqrt(Ss[kk]);
 8009284:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8009288:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 800928c:	00db      	lsls	r3, r3, #3
 800928e:	4413      	add	r3, r2
 8009290:	ed93 7b00 	vldr	d7, [r3]
 8009294:	eeb0 0a47 	vmov.f32	s0, s14
 8009298:	eef0 0a67 	vmov.f32	s1, s15
 800929c:	f011 f99c 	bl	801a5d8 <sqrt>
 80092a0:	eeb0 7a40 	vmov.f32	s14, s0
 80092a4:	eef0 7a60 	vmov.f32	s15, s1
 80092a8:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 80092ac:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80092b0:	00db      	lsls	r3, r3, #3
 80092b2:	4413      	add	r3, r2
 80092b4:	ed83 7b00 	vstr	d7, [r3]
      for (kk = 0; kk < 9; kk++) {
 80092b8:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80092bc:	3301      	adds	r3, #1
 80092be:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 80092c2:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80092c6:	2b08      	cmp	r3, #8
 80092c8:	dddc      	ble.n	8009284 <UTMeanCovSqrt_C2vgLQ4W+0x1420>
      }

      kk = 0;
 80092ca:	2300      	movs	r3, #0
 80092cc:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
      for (iAcol = 0; iAcol < 3; iAcol++) {
 80092d0:	2300      	movs	r3, #0
 80092d2:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 80092d6:	e0c0      	b.n	800945a <UTMeanCovSqrt_C2vgLQ4W+0x15f6>
        i_1 = 0;
 80092d8:	2300      	movs	r3, #0
 80092da:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
        for (i = 0; i < 3; i++) {
 80092de:	2300      	movs	r3, #0
 80092e0:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 80092e4:	e0aa      	b.n	800943c <UTMeanCovSqrt_C2vgLQ4W+0x15d8>
          Sy_tmp = i_1 + iAcol;
 80092e6:	f8d7 2290 	ldr.w	r2, [r7, #656]	; 0x290
 80092ea:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80092ee:	4413      	add	r3, r2
 80092f0:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
          Sy[Sy_tmp] = 0.0;
 80092f4:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 80092f8:	00db      	lsls	r3, r3, #3
 80092fa:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 80092fe:	18d1      	adds	r1, r2, r3
 8009300:	f04f 0200 	mov.w	r2, #0
 8009304:	f04f 0300 	mov.w	r3, #0
 8009308:	e9c1 2300 	strd	r2, r3, [r1]
          Sy[Sy_tmp] += Ss[kk] * Sy_0[i];
 800930c:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8009310:	00db      	lsls	r3, r3, #3
 8009312:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8009316:	4413      	add	r3, r2
 8009318:	e9d3 4500 	ldrd	r4, r5, [r3]
 800931c:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8009320:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8009324:	00db      	lsls	r3, r3, #3
 8009326:	4413      	add	r3, r2
 8009328:	e9d3 0100 	ldrd	r0, r1, [r3]
 800932c:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8009330:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8009334:	00db      	lsls	r3, r3, #3
 8009336:	4413      	add	r3, r2
 8009338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800933c:	f7f7 f94e 	bl	80005dc <__aeabi_dmul>
 8009340:	4602      	mov	r2, r0
 8009342:	460b      	mov	r3, r1
 8009344:	4610      	mov	r0, r2
 8009346:	4619      	mov	r1, r3
 8009348:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 800934c:	00db      	lsls	r3, r3, #3
 800934e:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8009352:	18d6      	adds	r6, r2, r3
 8009354:	4602      	mov	r2, r0
 8009356:	460b      	mov	r3, r1
 8009358:	4620      	mov	r0, r4
 800935a:	4629      	mov	r1, r5
 800935c:	f7f6 ff88 	bl	8000270 <__adddf3>
 8009360:	4602      	mov	r2, r0
 8009362:	460b      	mov	r3, r1
 8009364:	e9c6 2300 	strd	r2, r3, [r6]
          Sy[Sy_tmp] += Ss[kk + 1] * Sy_0[i + 3];
 8009368:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 800936c:	00db      	lsls	r3, r3, #3
 800936e:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8009372:	4413      	add	r3, r2
 8009374:	e9d3 4500 	ldrd	r4, r5, [r3]
 8009378:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 800937c:	3301      	adds	r3, #1
 800937e:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8009382:	00db      	lsls	r3, r3, #3
 8009384:	4413      	add	r3, r2
 8009386:	e9d3 0100 	ldrd	r0, r1, [r3]
 800938a:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 800938e:	3303      	adds	r3, #3
 8009390:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8009394:	00db      	lsls	r3, r3, #3
 8009396:	4413      	add	r3, r2
 8009398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800939c:	f7f7 f91e 	bl	80005dc <__aeabi_dmul>
 80093a0:	4602      	mov	r2, r0
 80093a2:	460b      	mov	r3, r1
 80093a4:	4610      	mov	r0, r2
 80093a6:	4619      	mov	r1, r3
 80093a8:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 80093ac:	00db      	lsls	r3, r3, #3
 80093ae:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 80093b2:	18d6      	adds	r6, r2, r3
 80093b4:	4602      	mov	r2, r0
 80093b6:	460b      	mov	r3, r1
 80093b8:	4620      	mov	r0, r4
 80093ba:	4629      	mov	r1, r5
 80093bc:	f7f6 ff58 	bl	8000270 <__adddf3>
 80093c0:	4602      	mov	r2, r0
 80093c2:	460b      	mov	r3, r1
 80093c4:	e9c6 2300 	strd	r2, r3, [r6]
          Sy[Sy_tmp] += Ss[kk + 2] * Sy_0[i + 6];
 80093c8:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 80093cc:	00db      	lsls	r3, r3, #3
 80093ce:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 80093d2:	4413      	add	r3, r2
 80093d4:	e9d3 4500 	ldrd	r4, r5, [r3]
 80093d8:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80093dc:	3302      	adds	r3, #2
 80093de:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 80093e2:	00db      	lsls	r3, r3, #3
 80093e4:	4413      	add	r3, r2
 80093e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80093ea:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80093ee:	3306      	adds	r3, #6
 80093f0:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80093f4:	00db      	lsls	r3, r3, #3
 80093f6:	4413      	add	r3, r2
 80093f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093fc:	f7f7 f8ee 	bl	80005dc <__aeabi_dmul>
 8009400:	4602      	mov	r2, r0
 8009402:	460b      	mov	r3, r1
 8009404:	4610      	mov	r0, r2
 8009406:	4619      	mov	r1, r3
 8009408:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 800940c:	00db      	lsls	r3, r3, #3
 800940e:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8009412:	18d6      	adds	r6, r2, r3
 8009414:	4602      	mov	r2, r0
 8009416:	460b      	mov	r3, r1
 8009418:	4620      	mov	r0, r4
 800941a:	4629      	mov	r1, r5
 800941c:	f7f6 ff28 	bl	8000270 <__adddf3>
 8009420:	4602      	mov	r2, r0
 8009422:	460b      	mov	r3, r1
 8009424:	e9c6 2300 	strd	r2, r3, [r6]
          i_1 += 3;
 8009428:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 800942c:	3303      	adds	r3, #3
 800942e:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
        for (i = 0; i < 3; i++) {
 8009432:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8009436:	3301      	adds	r3, #1
 8009438:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 800943c:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8009440:	2b02      	cmp	r3, #2
 8009442:	f77f af50 	ble.w	80092e6 <UTMeanCovSqrt_C2vgLQ4W+0x1482>
        }

        kk += 3;
 8009446:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 800944a:	3303      	adds	r3, #3
 800944c:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
      for (iAcol = 0; iAcol < 3; iAcol++) {
 8009450:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8009454:	3301      	adds	r3, #1
 8009456:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 800945a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800945e:	2b02      	cmp	r3, #2
 8009460:	f77f af3a 	ble.w	80092d8 <UTMeanCovSqrt_C2vgLQ4W+0x1474>
      }

      errorCondition = true;
 8009464:	2301      	movs	r3, #1
 8009466:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
      kk = 0;
 800946a:	2300      	movs	r3, #0
 800946c:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
      exitg2 = false;
 8009470:	2300      	movs	r3, #0
 8009472:	f887 3289 	strb.w	r3, [r7, #649]	; 0x289
      while ((!exitg2) && (kk < 3)) {
 8009476:	e044      	b.n	8009502 <UTMeanCovSqrt_C2vgLQ4W+0x169e>
        int32_T exitg1;
        iAcol = kk + 1;
 8009478:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 800947c:	3301      	adds	r3, #1
 800947e:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
        do {
          exitg1 = 0;
 8009482:	2300      	movs	r3, #0
 8009484:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
          if (iAcol + 1 < 4) {
 8009488:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800948c:	2b02      	cmp	r3, #2
 800948e:	dc25      	bgt.n	80094dc <UTMeanCovSqrt_C2vgLQ4W+0x1678>
            if (!(Sy[3 * kk + iAcol] == 0.0)) {
 8009490:	f8d7 228c 	ldr.w	r2, [r7, #652]	; 0x28c
 8009494:	4613      	mov	r3, r2
 8009496:	005b      	lsls	r3, r3, #1
 8009498:	441a      	add	r2, r3
 800949a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800949e:	4413      	add	r3, r2
 80094a0:	00db      	lsls	r3, r3, #3
 80094a2:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 80094a6:	4413      	add	r3, r2
 80094a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80094ac:	f04f 0200 	mov.w	r2, #0
 80094b0:	f04f 0300 	mov.w	r3, #0
 80094b4:	f7f7 fafa 	bl	8000aac <__aeabi_dcmpeq>
 80094b8:	4603      	mov	r3, r0
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d106      	bne.n	80094cc <UTMeanCovSqrt_C2vgLQ4W+0x1668>
              errorCondition = false;
 80094be:	2300      	movs	r3, #0
 80094c0:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
              exitg1 = 1;
 80094c4:	2301      	movs	r3, #1
 80094c6:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 80094ca:	e00f      	b.n	80094ec <UTMeanCovSqrt_C2vgLQ4W+0x1688>
            } else {
              iAcol++;
 80094cc:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80094d0:	3301      	adds	r3, #1
 80094d2:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 80094d6:	e009      	b.n	80094ec <UTMeanCovSqrt_C2vgLQ4W+0x1688>
 80094d8:	2001e910 	.word	0x2001e910
            }
          } else {
            kk++;
 80094dc:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80094e0:	3301      	adds	r3, #1
 80094e2:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
            exitg1 = 2;
 80094e6:	2302      	movs	r3, #2
 80094e8:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
          }
        } while (exitg1 == 0);
 80094ec:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d0c6      	beq.n	8009482 <UTMeanCovSqrt_C2vgLQ4W+0x161e>

        if (exitg1 == 1) {
 80094f4:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 80094f8:	2b01      	cmp	r3, #1
 80094fa:	d102      	bne.n	8009502 <UTMeanCovSqrt_C2vgLQ4W+0x169e>
          exitg2 = true;
 80094fc:	2301      	movs	r3, #1
 80094fe:	f887 3289 	strb.w	r3, [r7, #649]	; 0x289
      while ((!exitg2) && (kk < 3)) {
 8009502:	f897 3289 	ldrb.w	r3, [r7, #649]	; 0x289
 8009506:	2b00      	cmp	r3, #0
 8009508:	d103      	bne.n	8009512 <UTMeanCovSqrt_C2vgLQ4W+0x16ae>
 800950a:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 800950e:	2b02      	cmp	r3, #2
 8009510:	ddb2      	ble.n	8009478 <UTMeanCovSqrt_C2vgLQ4W+0x1614>
        }
      }

      if (!errorCondition) {
 8009512:	f897 328b 	ldrb.w	r3, [r7, #651]	; 0x28b
 8009516:	2b00      	cmp	r3, #0
 8009518:	d110      	bne.n	800953c <UTMeanCovSqrt_C2vgLQ4W+0x16d8>
        memcpy(&Sy_0[0], &Sy[0], 9U * sizeof(real_T));
 800951a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800951e:	2248      	movs	r2, #72	; 0x48
 8009520:	f8d7 12e4 	ldr.w	r1, [r7, #740]	; 0x2e4
 8009524:	4618      	mov	r0, r3
 8009526:	f010 fe91 	bl	801a24c <memcpy>
        qr_5a2P8Gh6(Sy_0, Y1_0, Sy);
 800952a:	f107 0168 	add.w	r1, r7, #104	; 0x68
 800952e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8009532:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8009536:	4618      	mov	r0, r3
 8009538:	f000 fec4 	bl	800a2c4 <qr_5a2P8Gh6>
      }
    }

    kk = 0;
 800953c:	2300      	movs	r3, #0
 800953e:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
    for (iAcol = 0; iAcol < 3; iAcol++) {
 8009542:	2300      	movs	r3, #0
 8009544:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8009548:	e03d      	b.n	80095c6 <UTMeanCovSqrt_C2vgLQ4W+0x1762>
      Sy_0[kk] = Sy[iAcol];
 800954a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800954e:	00db      	lsls	r3, r3, #3
 8009550:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8009554:	4413      	add	r3, r2
 8009556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800955a:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 800955e:	f8d7 128c 	ldr.w	r1, [r7, #652]	; 0x28c
 8009562:	00c9      	lsls	r1, r1, #3
 8009564:	4401      	add	r1, r0
 8009566:	e9c1 2300 	strd	r2, r3, [r1]
      Sy_0[kk + 1] = Sy[iAcol + 3];
 800956a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800956e:	3303      	adds	r3, #3
 8009570:	00db      	lsls	r3, r3, #3
 8009572:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8009576:	4413      	add	r3, r2
 8009578:	f8d7 228c 	ldr.w	r2, [r7, #652]	; 0x28c
 800957c:	1c51      	adds	r1, r2, #1
 800957e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009582:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8009586:	00c9      	lsls	r1, r1, #3
 8009588:	4401      	add	r1, r0
 800958a:	e9c1 2300 	strd	r2, r3, [r1]
      Sy_0[kk + 2] = Sy[iAcol + 6];
 800958e:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8009592:	3306      	adds	r3, #6
 8009594:	00db      	lsls	r3, r3, #3
 8009596:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 800959a:	4413      	add	r3, r2
 800959c:	f8d7 228c 	ldr.w	r2, [r7, #652]	; 0x28c
 80095a0:	1c91      	adds	r1, r2, #2
 80095a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095a6:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 80095aa:	00c9      	lsls	r1, r1, #3
 80095ac:	4401      	add	r1, r0
 80095ae:	e9c1 2300 	strd	r2, r3, [r1]
      kk += 3;
 80095b2:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80095b6:	3303      	adds	r3, #3
 80095b8:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
    for (iAcol = 0; iAcol < 3; iAcol++) {
 80095bc:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80095c0:	3301      	adds	r3, #1
 80095c2:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 80095c6:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80095ca:	2b02      	cmp	r3, #2
 80095cc:	ddbd      	ble.n	800954a <UTMeanCovSqrt_C2vgLQ4W+0x16e6>
    }

    for (kk = 0; kk < 9; kk++) {
 80095ce:	2300      	movs	r3, #0
 80095d0:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 80095d4:	e01a      	b.n	800960c <UTMeanCovSqrt_C2vgLQ4W+0x17a8>
      Sy[kk] = signOOM * Sy_0[kk];
 80095d6:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80095da:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80095de:	00db      	lsls	r3, r3, #3
 80095e0:	4413      	add	r3, r2
 80095e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80095e6:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80095ea:	00db      	lsls	r3, r3, #3
 80095ec:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 80095f0:	18d4      	adds	r4, r2, r3
 80095f2:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 80095f6:	f7f6 fff1 	bl	80005dc <__aeabi_dmul>
 80095fa:	4602      	mov	r2, r0
 80095fc:	460b      	mov	r3, r1
 80095fe:	e9c4 2300 	strd	r2, r3, [r4]
    for (kk = 0; kk < 9; kk++) {
 8009602:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8009606:	3301      	adds	r3, #1
 8009608:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 800960c:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8009610:	2b08      	cmp	r3, #8
 8009612:	dde0      	ble.n	80095d6 <UTMeanCovSqrt_C2vgLQ4W+0x1772>
    }
  }

  iAcol = 0;
 8009614:	2300      	movs	r3, #0
 8009616:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
  for (kk = 0; kk < 6; kk++) {
 800961a:	2300      	movs	r3, #0
 800961c:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8009620:	e057      	b.n	80096d2 <UTMeanCovSqrt_C2vgLQ4W+0x186e>
    X2[iAcol] -= X1[0];
 8009622:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8009626:	00db      	lsls	r3, r3, #3
 8009628:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 800962c:	4413      	add	r3, r2
 800962e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009632:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 8009636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800963a:	f8d7 4298 	ldr.w	r4, [r7, #664]	; 0x298
 800963e:	00e4      	lsls	r4, r4, #3
 8009640:	f8d7 52dc 	ldr.w	r5, [r7, #732]	; 0x2dc
 8009644:	442c      	add	r4, r5
 8009646:	f7f6 fe11 	bl	800026c <__aeabi_dsub>
 800964a:	4602      	mov	r2, r0
 800964c:	460b      	mov	r3, r1
 800964e:	e9c4 2300 	strd	r2, r3, [r4]
    X2[iAcol + 1] -= X1[1];
 8009652:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8009656:	3301      	adds	r3, #1
 8009658:	00db      	lsls	r3, r3, #3
 800965a:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 800965e:	4413      	add	r3, r2
 8009660:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009664:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 8009668:	3308      	adds	r3, #8
 800966a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800966e:	f8d7 4298 	ldr.w	r4, [r7, #664]	; 0x298
 8009672:	3401      	adds	r4, #1
 8009674:	00e4      	lsls	r4, r4, #3
 8009676:	f8d7 52dc 	ldr.w	r5, [r7, #732]	; 0x2dc
 800967a:	442c      	add	r4, r5
 800967c:	f7f6 fdf6 	bl	800026c <__aeabi_dsub>
 8009680:	4602      	mov	r2, r0
 8009682:	460b      	mov	r3, r1
 8009684:	e9c4 2300 	strd	r2, r3, [r4]
    X2[iAcol + 2] -= X1[2];
 8009688:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800968c:	3302      	adds	r3, #2
 800968e:	00db      	lsls	r3, r3, #3
 8009690:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 8009694:	4413      	add	r3, r2
 8009696:	e9d3 0100 	ldrd	r0, r1, [r3]
 800969a:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 800969e:	3310      	adds	r3, #16
 80096a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096a4:	f8d7 4298 	ldr.w	r4, [r7, #664]	; 0x298
 80096a8:	3402      	adds	r4, #2
 80096aa:	00e4      	lsls	r4, r4, #3
 80096ac:	f8d7 52dc 	ldr.w	r5, [r7, #732]	; 0x2dc
 80096b0:	442c      	add	r4, r5
 80096b2:	f7f6 fddb 	bl	800026c <__aeabi_dsub>
 80096b6:	4602      	mov	r2, r0
 80096b8:	460b      	mov	r3, r1
 80096ba:	e9c4 2300 	strd	r2, r3, [r4]
    iAcol += 3;
 80096be:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80096c2:	3303      	adds	r3, #3
 80096c4:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
  for (kk = 0; kk < 6; kk++) {
 80096c8:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80096cc:	3301      	adds	r3, #1
 80096ce:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 80096d2:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80096d6:	2b05      	cmp	r3, #5
 80096d8:	dda3      	ble.n	8009622 <UTMeanCovSqrt_C2vgLQ4W+0x17be>
  }

  signOOM = covWeights_1 * OOM;
 80096da:	f107 0308 	add.w	r3, r7, #8
 80096de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096e2:	e9d7 019a 	ldrd	r0, r1, [r7, #616]	; 0x268
 80096e6:	f7f6 ff79 	bl	80005dc <__aeabi_dmul>
 80096ea:	4602      	mov	r2, r0
 80096ec:	460b      	mov	r3, r1
 80096ee:	e9c7 23a8 	strd	r2, r3, [r7, #672]	; 0x2a0
  for (kk = 0; kk < 3; kk++) {
 80096f2:	2300      	movs	r3, #0
 80096f4:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 80096f8:	e071      	b.n	80097de <UTMeanCovSqrt_C2vgLQ4W+0x197a>
    iAcol = 0;
 80096fa:	2300      	movs	r3, #0
 80096fc:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
    for (i_1 = 0; i_1 < 3; i_1++) {
 8009700:	2300      	movs	r3, #0
 8009702:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
 8009706:	e061      	b.n	80097cc <UTMeanCovSqrt_C2vgLQ4W+0x1968>
      Sy_tmp = iAcol + kk;
 8009708:	f8d7 2298 	ldr.w	r2, [r7, #664]	; 0x298
 800970c:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8009710:	4413      	add	r3, r2
 8009712:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
      Ss[Sy_tmp] = 0.0;
 8009716:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 800971a:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 800971e:	00db      	lsls	r3, r3, #3
 8009720:	18d1      	adds	r1, r2, r3
 8009722:	f04f 0200 	mov.w	r2, #0
 8009726:	f04f 0300 	mov.w	r3, #0
 800972a:	e9c1 2300 	strd	r2, r3, [r1]
      i = 0;
 800972e:	2300      	movs	r3, #0
 8009730:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
      for (i_0 = 0; i_0 < 6; i_0++) {
 8009734:	2300      	movs	r3, #0
 8009736:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 800973a:	e039      	b.n	80097b0 <UTMeanCovSqrt_C2vgLQ4W+0x194c>
        Ss[Sy_tmp] += X2[i + kk] * Y2[i + i_1];
 800973c:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8009740:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8009744:	00db      	lsls	r3, r3, #3
 8009746:	4413      	add	r3, r2
 8009748:	e9d3 4500 	ldrd	r4, r5, [r3]
 800974c:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8009750:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8009754:	4413      	add	r3, r2
 8009756:	00db      	lsls	r3, r3, #3
 8009758:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 800975c:	4413      	add	r3, r2
 800975e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009762:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8009766:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 800976a:	4413      	add	r3, r2
 800976c:	00db      	lsls	r3, r3, #3
 800976e:	463a      	mov	r2, r7
 8009770:	6812      	ldr	r2, [r2, #0]
 8009772:	4413      	add	r3, r2
 8009774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009778:	f7f6 ff30 	bl	80005dc <__aeabi_dmul>
 800977c:	4602      	mov	r2, r0
 800977e:	460b      	mov	r3, r1
 8009780:	4620      	mov	r0, r4
 8009782:	4629      	mov	r1, r5
 8009784:	f7f6 fd74 	bl	8000270 <__adddf3>
 8009788:	4602      	mov	r2, r0
 800978a:	460b      	mov	r3, r1
 800978c:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 8009790:	f8d7 1264 	ldr.w	r1, [r7, #612]	; 0x264
 8009794:	00c9      	lsls	r1, r1, #3
 8009796:	4401      	add	r1, r0
 8009798:	e9c1 2300 	strd	r2, r3, [r1]
        i += 3;
 800979c:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80097a0:	3303      	adds	r3, #3
 80097a2:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
      for (i_0 = 0; i_0 < 6; i_0++) {
 80097a6:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 80097aa:	3301      	adds	r3, #1
 80097ac:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 80097b0:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 80097b4:	2b05      	cmp	r3, #5
 80097b6:	ddc1      	ble.n	800973c <UTMeanCovSqrt_C2vgLQ4W+0x18d8>
      }

      iAcol += 3;
 80097b8:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80097bc:	3303      	adds	r3, #3
 80097be:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
    for (i_1 = 0; i_1 < 3; i_1++) {
 80097c2:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 80097c6:	3301      	adds	r3, #1
 80097c8:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
 80097cc:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 80097d0:	2b02      	cmp	r3, #2
 80097d2:	dd99      	ble.n	8009708 <UTMeanCovSqrt_C2vgLQ4W+0x18a4>
  for (kk = 0; kk < 3; kk++) {
 80097d4:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80097d8:	3301      	adds	r3, #1
 80097da:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 80097de:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80097e2:	2b02      	cmp	r3, #2
 80097e4:	dd89      	ble.n	80096fa <UTMeanCovSqrt_C2vgLQ4W+0x1896>
    }
  }

  for (kk = 0; kk < 9; kk++) {
 80097e6:	2300      	movs	r3, #0
 80097e8:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 80097ec:	e01a      	b.n	8009824 <UTMeanCovSqrt_C2vgLQ4W+0x19c0>
    Pxy[kk] = Ss[kk] * signOOM;
 80097ee:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 80097f2:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80097f6:	00db      	lsls	r3, r3, #3
 80097f8:	4413      	add	r3, r2
 80097fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80097fe:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8009802:	00db      	lsls	r3, r3, #3
 8009804:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 8009808:	18d4      	adds	r4, r2, r3
 800980a:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 800980e:	f7f6 fee5 	bl	80005dc <__aeabi_dmul>
 8009812:	4602      	mov	r2, r0
 8009814:	460b      	mov	r3, r1
 8009816:	e9c4 2300 	strd	r2, r3, [r4]
  for (kk = 0; kk < 9; kk++) {
 800981a:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 800981e:	3301      	adds	r3, #1
 8009820:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8009824:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8009828:	2b08      	cmp	r3, #8
 800982a:	dde0      	ble.n	80097ee <UTMeanCovSqrt_C2vgLQ4W+0x198a>
  }
}
 800982c:	bf00      	nop
 800982e:	bf00      	nop
 8009830:	f507 772f 	add.w	r7, r7, #700	; 0x2bc
 8009834:	46bd      	mov	sp, r7
 8009836:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800983a:	bf00      	nop

0800983c <UTMeanCovSqrt_C6QfB9Td>:
#include "rotate_LZ7ctbe0.h"

void UTMeanCovSqrt_C6QfB9Td(const real_T meanWeights[2], const real_T
  covWeights[2], real_T OOM, real_T Y1, real_T Y2[6], const real_T X1[3], real_T
  X2[18], real_T *Ymean, real_T *Sy, real_T Pxy[3])
{
 800983c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009840:	ed2d 8b02 	vpush	{d8}
 8009844:	b0ac      	sub	sp, #176	; 0xb0
 8009846:	af00      	add	r7, sp, #0
 8009848:	6378      	str	r0, [r7, #52]	; 0x34
 800984a:	6339      	str	r1, [r7, #48]	; 0x30
 800984c:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
 8009850:	ed87 1b08 	vstr	d1, [r7, #32]
 8009854:	61fa      	str	r2, [r7, #28]
 8009856:	61bb      	str	r3, [r7, #24]
  real_T signOOM;
  real_T xnorm;
  int32_T b_k;
  int32_T i;
  int32_T knt;
  *Ymean = Y1 * meanWeights[0];
 8009858:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800985a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800985e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009862:	f7f6 febb 	bl	80005dc <__aeabi_dmul>
 8009866:	4602      	mov	r2, r0
 8009868:	460b      	mov	r3, r1
 800986a:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800986e:	e9c1 2300 	strd	r2, r3, [r1]
  for (knt = 0; knt < 6; knt++) {
 8009872:	2300      	movs	r3, #0
 8009874:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009878:	e021      	b.n	80098be <UTMeanCovSqrt_C6QfB9Td+0x82>
    *Ymean += Y2[knt] * meanWeights[1];
 800987a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800987e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8009882:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009886:	00db      	lsls	r3, r3, #3
 8009888:	69fa      	ldr	r2, [r7, #28]
 800988a:	4413      	add	r3, r2
 800988c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009890:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009892:	3308      	adds	r3, #8
 8009894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009898:	f7f6 fea0 	bl	80005dc <__aeabi_dmul>
 800989c:	4602      	mov	r2, r0
 800989e:	460b      	mov	r3, r1
 80098a0:	4620      	mov	r0, r4
 80098a2:	4629      	mov	r1, r5
 80098a4:	f7f6 fce4 	bl	8000270 <__adddf3>
 80098a8:	4602      	mov	r2, r0
 80098aa:	460b      	mov	r3, r1
 80098ac:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 80098b0:	e9c1 2300 	strd	r2, r3, [r1]
  for (knt = 0; knt < 6; knt++) {
 80098b4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80098b8:	3301      	adds	r3, #1
 80098ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80098be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80098c2:	2b05      	cmp	r3, #5
 80098c4:	ddd9      	ble.n	800987a <UTMeanCovSqrt_C6QfB9Td+0x3e>
  }

  *Ymean *= OOM;
 80098c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80098ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80098ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80098d2:	f7f6 fe83 	bl	80005dc <__aeabi_dmul>
 80098d6:	4602      	mov	r2, r0
 80098d8:	460b      	mov	r3, r1
 80098da:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 80098de:	e9c1 2300 	strd	r2, r3, [r1]
  Y1 -= *Ymean;
 80098e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80098e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ea:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80098ee:	f7f6 fcbd 	bl	800026c <__aeabi_dsub>
 80098f2:	4602      	mov	r2, r0
 80098f4:	460b      	mov	r3, r1
 80098f6:	e9c7 2308 	strd	r2, r3, [r7, #32]
  for (knt = 0; knt < 6; knt++) {
 80098fa:	2300      	movs	r3, #0
 80098fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009900:	e01c      	b.n	800993c <UTMeanCovSqrt_C6QfB9Td+0x100>
    Y2[knt] -= *Ymean;
 8009902:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009906:	00db      	lsls	r3, r3, #3
 8009908:	69fa      	ldr	r2, [r7, #28]
 800990a:	4413      	add	r3, r2
 800990c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009910:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009914:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009918:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800991c:	00db      	lsls	r3, r3, #3
 800991e:	69fa      	ldr	r2, [r7, #28]
 8009920:	18d4      	adds	r4, r2, r3
 8009922:	4642      	mov	r2, r8
 8009924:	464b      	mov	r3, r9
 8009926:	f7f6 fca1 	bl	800026c <__aeabi_dsub>
 800992a:	4602      	mov	r2, r0
 800992c:	460b      	mov	r3, r1
 800992e:	e9c4 2300 	strd	r2, r3, [r4]
  for (knt = 0; knt < 6; knt++) {
 8009932:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009936:	3301      	adds	r3, #1
 8009938:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800993c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009940:	2b05      	cmp	r3, #5
 8009942:	ddde      	ble.n	8009902 <UTMeanCovSqrt_C6QfB9Td+0xc6>
  }

  if (rtIsNaN(OOM)) {
 8009944:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 8009948:	f003 f82c 	bl	800c9a4 <rtIsNaN>
 800994c:	4603      	mov	r3, r0
 800994e:	2b00      	cmp	r3, #0
 8009950:	d004      	beq.n	800995c <UTMeanCovSqrt_C6QfB9Td+0x120>
    signOOM = OOM;
 8009952:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009956:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 800995a:	e025      	b.n	80099a8 <UTMeanCovSqrt_C6QfB9Td+0x16c>
  } else if (OOM < 0.0) {
 800995c:	f04f 0200 	mov.w	r2, #0
 8009960:	f04f 0300 	mov.w	r3, #0
 8009964:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8009968:	f7f7 f8aa 	bl	8000ac0 <__aeabi_dcmplt>
 800996c:	4603      	mov	r3, r0
 800996e:	2b00      	cmp	r3, #0
 8009970:	d005      	beq.n	800997e <UTMeanCovSqrt_C6QfB9Td+0x142>
    signOOM = -1.0;
 8009972:	f04f 0200 	mov.w	r2, #0
 8009976:	4bc3      	ldr	r3, [pc, #780]	; (8009c84 <UTMeanCovSqrt_C6QfB9Td+0x448>)
 8009978:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 800997c:	e014      	b.n	80099a8 <UTMeanCovSqrt_C6QfB9Td+0x16c>
  } else {
    signOOM = (OOM > 0.0);
 800997e:	f04f 0200 	mov.w	r2, #0
 8009982:	f04f 0300 	mov.w	r3, #0
 8009986:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800998a:	f7f7 f8b7 	bl	8000afc <__aeabi_dcmpgt>
 800998e:	4603      	mov	r3, r0
 8009990:	2b00      	cmp	r3, #0
 8009992:	d003      	beq.n	800999c <UTMeanCovSqrt_C6QfB9Td+0x160>
 8009994:	f04f 0200 	mov.w	r2, #0
 8009998:	4bbb      	ldr	r3, [pc, #748]	; (8009c88 <UTMeanCovSqrt_C6QfB9Td+0x44c>)
 800999a:	e003      	b.n	80099a4 <UTMeanCovSqrt_C6QfB9Td+0x168>
 800999c:	f04f 0200 	mov.w	r2, #0
 80099a0:	f04f 0300 	mov.w	r3, #0
 80099a4:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  }

  covWeights_0 = signOOM * covWeights[0];
 80099a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80099ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80099b2:	f7f6 fe13 	bl	80005dc <__aeabi_dmul>
 80099b6:	4602      	mov	r2, r0
 80099b8:	460b      	mov	r3, r1
 80099ba:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
  covWeights_1 = signOOM * covWeights[1];
 80099be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099c0:	3308      	adds	r3, #8
 80099c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80099c6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80099ca:	f7f6 fe07 	bl	80005dc <__aeabi_dmul>
 80099ce:	4602      	mov	r2, r0
 80099d0:	460b      	mov	r3, r1
 80099d2:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
  OOM *= signOOM;
 80099d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80099da:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80099de:	f7f6 fdfd 	bl	80005dc <__aeabi_dmul>
 80099e2:	4602      	mov	r2, r0
 80099e4:	460b      	mov	r3, r1
 80099e6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  signOOM = sqrt(covWeights_1);
 80099ea:	ed97 0b26 	vldr	d0, [r7, #152]	; 0x98
 80099ee:	f010 fdf3 	bl	801a5d8 <sqrt>
 80099f2:	eeb0 7a40 	vmov.f32	s14, s0
 80099f6:	eef0 7a60 	vmov.f32	s15, s1
 80099fa:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
  for (knt = 0; knt < 6; knt++) {
 80099fe:	2300      	movs	r3, #0
 8009a00:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009a04:	e01a      	b.n	8009a3c <UTMeanCovSqrt_C6QfB9Td+0x200>
    A[knt] = signOOM * Y2[knt];
 8009a06:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009a0a:	00db      	lsls	r3, r3, #3
 8009a0c:	69fa      	ldr	r2, [r7, #28]
 8009a0e:	4413      	add	r3, r2
 8009a10:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009a14:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009a18:	f7f6 fde0 	bl	80005dc <__aeabi_dmul>
 8009a1c:	4602      	mov	r2, r0
 8009a1e:	460b      	mov	r3, r1
 8009a20:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009a24:	00c9      	lsls	r1, r1, #3
 8009a26:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8009a2a:	4401      	add	r1, r0
 8009a2c:	3948      	subs	r1, #72	; 0x48
 8009a2e:	e9c1 2300 	strd	r2, r3, [r1]
  for (knt = 0; knt < 6; knt++) {
 8009a32:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009a36:	3301      	adds	r3, #1
 8009a38:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009a3c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009a40:	2b05      	cmp	r3, #5
 8009a42:	dde0      	ble.n	8009a06 <UTMeanCovSqrt_C6QfB9Td+0x1ca>
  }

  signOOM = A[0];
 8009a44:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8009a48:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  xnorm = xnrm2_7bm34mDQ(5, A, 2);
 8009a4c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8009a50:	2202      	movs	r2, #2
 8009a52:	4619      	mov	r1, r3
 8009a54:	2005      	movs	r0, #5
 8009a56:	f005 f973 	bl	800ed40 <xnrm2_7bm34mDQ>
 8009a5a:	eeb0 7a40 	vmov.f32	s14, s0
 8009a5e:	eef0 7a60 	vmov.f32	s15, s1
 8009a62:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
  if (xnorm != 0.0) {
 8009a66:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009a6a:	f04f 0200 	mov.w	r2, #0
 8009a6e:	f04f 0300 	mov.w	r3, #0
 8009a72:	f7f7 f81b 	bl	8000aac <__aeabi_dcmpeq>
 8009a76:	4603      	mov	r3, r0
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	f040 80e7 	bne.w	8009c4c <UTMeanCovSqrt_C6QfB9Td+0x410>
    xnorm = rt_hypotd_snf(A[0], xnorm);
 8009a7e:	ed97 7b1a 	vldr	d7, [r7, #104]	; 0x68
 8009a82:	ed97 6b0e 	vldr	d6, [r7, #56]	; 0x38
 8009a86:	eeb0 1a46 	vmov.f32	s2, s12
 8009a8a:	eef0 1a66 	vmov.f32	s3, s13
 8009a8e:	eeb0 0a47 	vmov.f32	s0, s14
 8009a92:	eef0 0a67 	vmov.f32	s1, s15
 8009a96:	f002 fe77 	bl	800c788 <rt_hypotd_snf>
 8009a9a:	eeb0 7a40 	vmov.f32	s14, s0
 8009a9e:	eef0 7a60 	vmov.f32	s15, s1
 8009aa2:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
    if (A[0] >= 0.0) {
 8009aa6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009aaa:	f04f 0200 	mov.w	r2, #0
 8009aae:	f04f 0300 	mov.w	r3, #0
 8009ab2:	f7f7 f819 	bl	8000ae8 <__aeabi_dcmpge>
 8009ab6:	4603      	mov	r3, r0
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d009      	beq.n	8009ad0 <UTMeanCovSqrt_C6QfB9Td+0x294>
      xnorm = -xnorm;
 8009abc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009ac0:	613a      	str	r2, [r7, #16]
 8009ac2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8009ac6:	617b      	str	r3, [r7, #20]
 8009ac8:	ed97 7b04 	vldr	d7, [r7, #16]
 8009acc:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
    }

    if (fabs(xnorm) < 1.0020841800044864E-292) {
 8009ad0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009ad4:	60ba      	str	r2, [r7, #8]
 8009ad6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009ada:	60fb      	str	r3, [r7, #12]
 8009adc:	f04f 0200 	mov.w	r2, #0
 8009ae0:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 8009ae4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009ae8:	f7f6 ffea 	bl	8000ac0 <__aeabi_dcmplt>
 8009aec:	4603      	mov	r3, r0
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	f000 80a8 	beq.w	8009c44 <UTMeanCovSqrt_C6QfB9Td+0x408>
      knt = 0;
 8009af4:	2300      	movs	r3, #0
 8009af6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
      do {
        knt++;
 8009afa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009afe:	3301      	adds	r3, #1
 8009b00:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        for (b_k = 1; b_k < 6; b_k++) {
 8009b04:	2301      	movs	r3, #1
 8009b06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009b0a:	e01d      	b.n	8009b48 <UTMeanCovSqrt_C6QfB9Td+0x30c>
          A[b_k] *= 9.9792015476736E+291;
 8009b0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009b10:	00db      	lsls	r3, r3, #3
 8009b12:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8009b16:	4413      	add	r3, r2
 8009b18:	3b48      	subs	r3, #72	; 0x48
 8009b1a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009b1e:	f04f 0200 	mov.w	r2, #0
 8009b22:	4b5a      	ldr	r3, [pc, #360]	; (8009c8c <UTMeanCovSqrt_C6QfB9Td+0x450>)
 8009b24:	f7f6 fd5a 	bl	80005dc <__aeabi_dmul>
 8009b28:	4602      	mov	r2, r0
 8009b2a:	460b      	mov	r3, r1
 8009b2c:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8009b30:	00c9      	lsls	r1, r1, #3
 8009b32:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8009b36:	4401      	add	r1, r0
 8009b38:	3948      	subs	r1, #72	; 0x48
 8009b3a:	e9c1 2300 	strd	r2, r3, [r1]
        for (b_k = 1; b_k < 6; b_k++) {
 8009b3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009b42:	3301      	adds	r3, #1
 8009b44:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009b48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009b4c:	2b05      	cmp	r3, #5
 8009b4e:	dddd      	ble.n	8009b0c <UTMeanCovSqrt_C6QfB9Td+0x2d0>
        }

        xnorm *= 9.9792015476736E+291;
 8009b50:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009b54:	f04f 0200 	mov.w	r2, #0
 8009b58:	4b4c      	ldr	r3, [pc, #304]	; (8009c8c <UTMeanCovSqrt_C6QfB9Td+0x450>)
 8009b5a:	f7f6 fd3f 	bl	80005dc <__aeabi_dmul>
 8009b5e:	4602      	mov	r2, r0
 8009b60:	460b      	mov	r3, r1
 8009b62:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
        signOOM *= 9.9792015476736E+291;
 8009b66:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009b6a:	f04f 0200 	mov.w	r2, #0
 8009b6e:	4b47      	ldr	r3, [pc, #284]	; (8009c8c <UTMeanCovSqrt_C6QfB9Td+0x450>)
 8009b70:	f7f6 fd34 	bl	80005dc <__aeabi_dmul>
 8009b74:	4602      	mov	r2, r0
 8009b76:	460b      	mov	r3, r1
 8009b78:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      } while ((fabs(xnorm) < 1.0020841800044864E-292) && (knt < 20));
 8009b7c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009b80:	603a      	str	r2, [r7, #0]
 8009b82:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009b86:	607b      	str	r3, [r7, #4]
 8009b88:	f04f 0200 	mov.w	r2, #0
 8009b8c:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 8009b90:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009b94:	f7f6 ff94 	bl	8000ac0 <__aeabi_dcmplt>
 8009b98:	4603      	mov	r3, r0
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d003      	beq.n	8009ba6 <UTMeanCovSqrt_C6QfB9Td+0x36a>
 8009b9e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009ba2:	2b13      	cmp	r3, #19
 8009ba4:	dda9      	ble.n	8009afa <UTMeanCovSqrt_C6QfB9Td+0x2be>

      xnorm = rt_hypotd_snf(signOOM, xnrm2_7bm34mDQ(5, A, 2));
 8009ba6:	ed97 8b10 	vldr	d8, [r7, #64]	; 0x40
 8009baa:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8009bae:	2202      	movs	r2, #2
 8009bb0:	4619      	mov	r1, r3
 8009bb2:	2005      	movs	r0, #5
 8009bb4:	f005 f8c4 	bl	800ed40 <xnrm2_7bm34mDQ>
 8009bb8:	eeb0 7a40 	vmov.f32	s14, s0
 8009bbc:	eef0 7a60 	vmov.f32	s15, s1
 8009bc0:	eeb0 1a47 	vmov.f32	s2, s14
 8009bc4:	eef0 1a67 	vmov.f32	s3, s15
 8009bc8:	eeb0 0a48 	vmov.f32	s0, s16
 8009bcc:	eef0 0a68 	vmov.f32	s1, s17
 8009bd0:	f002 fdda 	bl	800c788 <rt_hypotd_snf>
 8009bd4:	eeb0 7a40 	vmov.f32	s14, s0
 8009bd8:	eef0 7a60 	vmov.f32	s15, s1
 8009bdc:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
      if (signOOM >= 0.0) {
 8009be0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009be4:	f04f 0200 	mov.w	r2, #0
 8009be8:	f04f 0300 	mov.w	r3, #0
 8009bec:	f7f6 ff7c 	bl	8000ae8 <__aeabi_dcmpge>
 8009bf0:	4603      	mov	r3, r0
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d006      	beq.n	8009c04 <UTMeanCovSqrt_C6QfB9Td+0x3c8>
        xnorm = -xnorm;
 8009bf6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009bfa:	4692      	mov	sl, r2
 8009bfc:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 8009c00:	e9c7 ab0e 	strd	sl, fp, [r7, #56]	; 0x38
      }

      for (b_k = 0; b_k < knt; b_k++) {
 8009c04:	2300      	movs	r3, #0
 8009c06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009c0a:	e010      	b.n	8009c2e <UTMeanCovSqrt_C6QfB9Td+0x3f2>
        xnorm *= 1.0020841800044864E-292;
 8009c0c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009c10:	f04f 0200 	mov.w	r2, #0
 8009c14:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 8009c18:	f7f6 fce0 	bl	80005dc <__aeabi_dmul>
 8009c1c:	4602      	mov	r2, r0
 8009c1e:	460b      	mov	r3, r1
 8009c20:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
      for (b_k = 0; b_k < knt; b_k++) {
 8009c24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009c28:	3301      	adds	r3, #1
 8009c2a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009c2e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009c32:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009c36:	429a      	cmp	r2, r3
 8009c38:	dbe8      	blt.n	8009c0c <UTMeanCovSqrt_C6QfB9Td+0x3d0>
      }

      signOOM = xnorm;
 8009c3a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009c3e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8009c42:	e003      	b.n	8009c4c <UTMeanCovSqrt_C6QfB9Td+0x410>
    } else {
      signOOM = xnorm;
 8009c44:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009c48:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    }
  }

  if (!rtIsNaN(covWeights_0)) {
 8009c4c:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8009c50:	eeb0 0a47 	vmov.f32	s0, s14
 8009c54:	eef0 0a67 	vmov.f32	s1, s15
 8009c58:	f002 fea4 	bl	800c9a4 <rtIsNaN>
 8009c5c:	4603      	mov	r3, r0
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d12b      	bne.n	8009cba <UTMeanCovSqrt_C6QfB9Td+0x47e>
    if (covWeights_0 < 0.0) {
 8009c62:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8009c66:	f04f 0200 	mov.w	r2, #0
 8009c6a:	f04f 0300 	mov.w	r3, #0
 8009c6e:	f7f6 ff27 	bl	8000ac0 <__aeabi_dcmplt>
 8009c72:	4603      	mov	r3, r0
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d00b      	beq.n	8009c90 <UTMeanCovSqrt_C6QfB9Td+0x454>
      covWeights_0 = -1.0;
 8009c78:	f04f 0200 	mov.w	r2, #0
 8009c7c:	4b01      	ldr	r3, [pc, #4]	; (8009c84 <UTMeanCovSqrt_C6QfB9Td+0x448>)
 8009c7e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 8009c82:	e01a      	b.n	8009cba <UTMeanCovSqrt_C6QfB9Td+0x47e>
 8009c84:	bff00000 	.word	0xbff00000
 8009c88:	3ff00000 	.word	0x3ff00000
 8009c8c:	7c900000 	.word	0x7c900000
    } else {
      covWeights_0 = (covWeights_0 > 0.0);
 8009c90:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8009c94:	f04f 0200 	mov.w	r2, #0
 8009c98:	f04f 0300 	mov.w	r3, #0
 8009c9c:	f7f6 ff2e 	bl	8000afc <__aeabi_dcmpgt>
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d003      	beq.n	8009cae <UTMeanCovSqrt_C6QfB9Td+0x472>
 8009ca6:	f04f 0200 	mov.w	r2, #0
 8009caa:	4b99      	ldr	r3, [pc, #612]	; (8009f10 <UTMeanCovSqrt_C6QfB9Td+0x6d4>)
 8009cac:	e003      	b.n	8009cb6 <UTMeanCovSqrt_C6QfB9Td+0x47a>
 8009cae:	f04f 0200 	mov.w	r2, #0
 8009cb2:	f04f 0300 	mov.w	r3, #0
 8009cb6:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    }
  }

  if (covWeights_0 == 1.0) {
 8009cba:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8009cbe:	f04f 0200 	mov.w	r2, #0
 8009cc2:	4b93      	ldr	r3, [pc, #588]	; (8009f10 <UTMeanCovSqrt_C6QfB9Td+0x6d4>)
 8009cc4:	f7f6 fef2 	bl	8000aac <__aeabi_dcmpeq>
 8009cc8:	4603      	mov	r3, r0
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d021      	beq.n	8009d12 <UTMeanCovSqrt_C6QfB9Td+0x4d6>
    rotate_LZ7ctbe0(signOOM, Y1, &signOOM, &xnorm, &covWeights_0);
 8009cce:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8009cd2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009cd6:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8009cda:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009cde:	4618      	mov	r0, r3
 8009ce0:	ed97 1b08 	vldr	d1, [r7, #32]
 8009ce4:	eeb0 0a47 	vmov.f32	s0, s14
 8009ce8:	eef0 0a67 	vmov.f32	s1, s15
 8009cec:	f002 fbc2 	bl	800c474 <rotate_LZ7ctbe0>
    *Sy = sqrt(OOM) * covWeights_0;
 8009cf0:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 8009cf4:	f010 fc70 	bl	801a5d8 <sqrt>
 8009cf8:	ec51 0b10 	vmov	r0, r1, d0
 8009cfc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009d00:	f7f6 fc6c 	bl	80005dc <__aeabi_dmul>
 8009d04:	4602      	mov	r2, r0
 8009d06:	460b      	mov	r3, r1
 8009d08:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 8009d0c:	e9c1 2300 	strd	r2, r3, [r1]
 8009d10:	e016      	b.n	8009d40 <UTMeanCovSqrt_C6QfB9Td+0x504>
  } else {
    cholUpdateFactor_HBMX5a5h(&signOOM, Y1);
 8009d12:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009d16:	ed97 0b08 	vldr	d0, [r7, #32]
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	f000 f8fa 	bl	8009f14 <cholUpdateFactor_HBMX5a5h>
    *Sy = sqrt(OOM) * signOOM;
 8009d20:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 8009d24:	f010 fc58 	bl	801a5d8 <sqrt>
 8009d28:	ec51 0b10 	vmov	r0, r1, d0
 8009d2c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009d30:	f7f6 fc54 	bl	80005dc <__aeabi_dmul>
 8009d34:	4602      	mov	r2, r0
 8009d36:	460b      	mov	r3, r1
 8009d38:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 8009d3c:	e9c1 2300 	strd	r2, r3, [r1]
  }

  b_k = 0;
 8009d40:	2300      	movs	r3, #0
 8009d42:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  for (knt = 0; knt < 6; knt++) {
 8009d46:	2300      	movs	r3, #0
 8009d48:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009d4c:	e054      	b.n	8009df8 <UTMeanCovSqrt_C6QfB9Td+0x5bc>
    X2[b_k] -= X1[0];
 8009d4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009d52:	00db      	lsls	r3, r3, #3
 8009d54:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8009d58:	4413      	add	r3, r2
 8009d5a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009d5e:	69bb      	ldr	r3, [r7, #24]
 8009d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d64:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 8009d68:	00e4      	lsls	r4, r4, #3
 8009d6a:	f8d7 50d8 	ldr.w	r5, [r7, #216]	; 0xd8
 8009d6e:	442c      	add	r4, r5
 8009d70:	f7f6 fa7c 	bl	800026c <__aeabi_dsub>
 8009d74:	4602      	mov	r2, r0
 8009d76:	460b      	mov	r3, r1
 8009d78:	e9c4 2300 	strd	r2, r3, [r4]
    X2[b_k + 1] -= X1[1];
 8009d7c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009d80:	3301      	adds	r3, #1
 8009d82:	00db      	lsls	r3, r3, #3
 8009d84:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8009d88:	4413      	add	r3, r2
 8009d8a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009d8e:	69bb      	ldr	r3, [r7, #24]
 8009d90:	3308      	adds	r3, #8
 8009d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d96:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 8009d9a:	3401      	adds	r4, #1
 8009d9c:	00e4      	lsls	r4, r4, #3
 8009d9e:	f8d7 50d8 	ldr.w	r5, [r7, #216]	; 0xd8
 8009da2:	442c      	add	r4, r5
 8009da4:	f7f6 fa62 	bl	800026c <__aeabi_dsub>
 8009da8:	4602      	mov	r2, r0
 8009daa:	460b      	mov	r3, r1
 8009dac:	e9c4 2300 	strd	r2, r3, [r4]
    X2[b_k + 2] -= X1[2];
 8009db0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009db4:	3302      	adds	r3, #2
 8009db6:	00db      	lsls	r3, r3, #3
 8009db8:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8009dbc:	4413      	add	r3, r2
 8009dbe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009dc2:	69bb      	ldr	r3, [r7, #24]
 8009dc4:	3310      	adds	r3, #16
 8009dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dca:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 8009dce:	3402      	adds	r4, #2
 8009dd0:	00e4      	lsls	r4, r4, #3
 8009dd2:	f8d7 50d8 	ldr.w	r5, [r7, #216]	; 0xd8
 8009dd6:	442c      	add	r4, r5
 8009dd8:	f7f6 fa48 	bl	800026c <__aeabi_dsub>
 8009ddc:	4602      	mov	r2, r0
 8009dde:	460b      	mov	r3, r1
 8009de0:	e9c4 2300 	strd	r2, r3, [r4]
    b_k += 3;
 8009de4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009de8:	3303      	adds	r3, #3
 8009dea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  for (knt = 0; knt < 6; knt++) {
 8009dee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009df2:	3301      	adds	r3, #1
 8009df4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009df8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009dfc:	2b05      	cmp	r3, #5
 8009dfe:	dda6      	ble.n	8009d4e <UTMeanCovSqrt_C6QfB9Td+0x512>
  }

  signOOM = covWeights_1 * OOM;
 8009e00:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009e04:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009e08:	f7f6 fbe8 	bl	80005dc <__aeabi_dmul>
 8009e0c:	4602      	mov	r2, r0
 8009e0e:	460b      	mov	r3, r1
 8009e10:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  for (knt = 0; knt < 3; knt++) {
 8009e14:	2300      	movs	r3, #0
 8009e16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009e1a:	e06c      	b.n	8009ef6 <UTMeanCovSqrt_C6QfB9Td+0x6ba>
    X2_0[knt] = 0.0;
 8009e1c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009e20:	00db      	lsls	r3, r3, #3
 8009e22:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8009e26:	4413      	add	r3, r2
 8009e28:	f1a3 0160 	sub.w	r1, r3, #96	; 0x60
 8009e2c:	f04f 0200 	mov.w	r2, #0
 8009e30:	f04f 0300 	mov.w	r3, #0
 8009e34:	e9c1 2300 	strd	r2, r3, [r1]
    b_k = 0;
 8009e38:	2300      	movs	r3, #0
 8009e3a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    for (i = 0; i < 6; i++) {
 8009e3e:	2300      	movs	r3, #0
 8009e40:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009e44:	e037      	b.n	8009eb6 <UTMeanCovSqrt_C6QfB9Td+0x67a>
      X2_0[knt] += X2[b_k + knt] * Y2[i];
 8009e46:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009e4a:	00db      	lsls	r3, r3, #3
 8009e4c:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8009e50:	4413      	add	r3, r2
 8009e52:	3b60      	subs	r3, #96	; 0x60
 8009e54:	e9d3 4500 	ldrd	r4, r5, [r3]
 8009e58:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009e5c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009e60:	4413      	add	r3, r2
 8009e62:	00db      	lsls	r3, r3, #3
 8009e64:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8009e68:	4413      	add	r3, r2
 8009e6a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009e6e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009e72:	00db      	lsls	r3, r3, #3
 8009e74:	69fa      	ldr	r2, [r7, #28]
 8009e76:	4413      	add	r3, r2
 8009e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e7c:	f7f6 fbae 	bl	80005dc <__aeabi_dmul>
 8009e80:	4602      	mov	r2, r0
 8009e82:	460b      	mov	r3, r1
 8009e84:	4620      	mov	r0, r4
 8009e86:	4629      	mov	r1, r5
 8009e88:	f7f6 f9f2 	bl	8000270 <__adddf3>
 8009e8c:	4602      	mov	r2, r0
 8009e8e:	460b      	mov	r3, r1
 8009e90:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009e94:	00c9      	lsls	r1, r1, #3
 8009e96:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8009e9a:	4401      	add	r1, r0
 8009e9c:	3960      	subs	r1, #96	; 0x60
 8009e9e:	e9c1 2300 	strd	r2, r3, [r1]
      b_k += 3;
 8009ea2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009ea6:	3303      	adds	r3, #3
 8009ea8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    for (i = 0; i < 6; i++) {
 8009eac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009eb0:	3301      	adds	r3, #1
 8009eb2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009eb6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009eba:	2b05      	cmp	r3, #5
 8009ebc:	ddc3      	ble.n	8009e46 <UTMeanCovSqrt_C6QfB9Td+0x60a>
    }

    Pxy[knt] = X2_0[knt] * signOOM;
 8009ebe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009ec2:	00db      	lsls	r3, r3, #3
 8009ec4:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8009ec8:	4413      	add	r3, r2
 8009eca:	3b60      	subs	r3, #96	; 0x60
 8009ecc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009ed0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009ed4:	f8d7 40a4 	ldr.w	r4, [r7, #164]	; 0xa4
 8009ed8:	00e4      	lsls	r4, r4, #3
 8009eda:	f8d7 50e4 	ldr.w	r5, [r7, #228]	; 0xe4
 8009ede:	442c      	add	r4, r5
 8009ee0:	f7f6 fb7c 	bl	80005dc <__aeabi_dmul>
 8009ee4:	4602      	mov	r2, r0
 8009ee6:	460b      	mov	r3, r1
 8009ee8:	e9c4 2300 	strd	r2, r3, [r4]
  for (knt = 0; knt < 3; knt++) {
 8009eec:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009ef0:	3301      	adds	r3, #1
 8009ef2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009ef6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009efa:	2b02      	cmp	r3, #2
 8009efc:	dd8e      	ble.n	8009e1c <UTMeanCovSqrt_C6QfB9Td+0x5e0>
  }
}
 8009efe:	bf00      	nop
 8009f00:	bf00      	nop
 8009f02:	37b0      	adds	r7, #176	; 0xb0
 8009f04:	46bd      	mov	sp, r7
 8009f06:	ecbd 8b02 	vpop	{d8}
 8009f0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009f0e:	bf00      	nop
 8009f10:	3ff00000 	.word	0x3ff00000

08009f14 <cholUpdateFactor_HBMX5a5h>:
#include "rotate_LZ7ctbe0.h"
#include "rt_nonfinite.h"
#include "rtGetNaN.h"

void cholUpdateFactor_HBMX5a5h(real_T *S, real_T U)
{
 8009f14:	b5b0      	push	{r4, r5, r7, lr}
 8009f16:	b090      	sub	sp, #64	; 0x40
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	60f8      	str	r0, [r7, #12]
 8009f1c:	ed87 0b00 	vstr	d0, [r7]
  real_T alpha;
  real_T c;
  real_T nrmx;
  real_T s;
  int8_T p;
  R = *S;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f26:	e9c7 2308 	strd	r2, r3, [r7, #32]
  p = 0;
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (*S == 0.0) {
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009f36:	f04f 0200 	mov.w	r2, #0
 8009f3a:	f04f 0300 	mov.w	r3, #0
 8009f3e:	f7f6 fdb5 	bl	8000aac <__aeabi_dcmpeq>
 8009f42:	4603      	mov	r3, r0
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d003      	beq.n	8009f50 <cholUpdateFactor_HBMX5a5h+0x3c>
    p = 2;
 8009f48:	2302      	movs	r3, #2
 8009f4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009f4e:	e065      	b.n	800a01c <cholUpdateFactor_HBMX5a5h+0x108>
  } else {
    s = U / *S;
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f56:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009f5a:	f7f6 fc69 	bl	8000830 <__aeabi_ddiv>
 8009f5e:	4602      	mov	r2, r0
 8009f60:	460b      	mov	r3, r1
 8009f62:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    nrmx = fabs(s);
 8009f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f68:	63bb      	str	r3, [r7, #56]	; 0x38
 8009f6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f6c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009f70:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (nrmx >= 1.0) {
 8009f72:	f04f 0200 	mov.w	r2, #0
 8009f76:	4b5c      	ldr	r3, [pc, #368]	; (800a0e8 <cholUpdateFactor_HBMX5a5h+0x1d4>)
 8009f78:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009f7c:	f7f6 fdb4 	bl	8000ae8 <__aeabi_dcmpge>
 8009f80:	4603      	mov	r3, r0
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d003      	beq.n	8009f8e <cholUpdateFactor_HBMX5a5h+0x7a>
      p = 1;
 8009f86:	2301      	movs	r3, #1
 8009f88:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009f8c:	e046      	b.n	800a01c <cholUpdateFactor_HBMX5a5h+0x108>
    } else {
      rotate_LZ7ctbe0(sqrt(1.0 - nrmx * nrmx), s, &R, &c, &alpha);
 8009f8e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009f92:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009f96:	f7f6 fb21 	bl	80005dc <__aeabi_dmul>
 8009f9a:	4602      	mov	r2, r0
 8009f9c:	460b      	mov	r3, r1
 8009f9e:	f04f 0000 	mov.w	r0, #0
 8009fa2:	4951      	ldr	r1, [pc, #324]	; (800a0e8 <cholUpdateFactor_HBMX5a5h+0x1d4>)
 8009fa4:	f7f6 f962 	bl	800026c <__aeabi_dsub>
 8009fa8:	4602      	mov	r2, r0
 8009faa:	460b      	mov	r3, r1
 8009fac:	ec43 2b17 	vmov	d7, r2, r3
 8009fb0:	eeb0 0a47 	vmov.f32	s0, s14
 8009fb4:	eef0 0a67 	vmov.f32	s1, s15
 8009fb8:	f010 fb0e 	bl	801a5d8 <sqrt>
 8009fbc:	eeb0 7a40 	vmov.f32	s14, s0
 8009fc0:	eef0 7a60 	vmov.f32	s15, s1
 8009fc4:	f107 0218 	add.w	r2, r7, #24
 8009fc8:	f107 0110 	add.w	r1, r7, #16
 8009fcc:	f107 0320 	add.w	r3, r7, #32
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	ed97 1b0c 	vldr	d1, [r7, #48]	; 0x30
 8009fd6:	eeb0 0a47 	vmov.f32	s0, s14
 8009fda:	eef0 0a67 	vmov.f32	s1, s15
 8009fde:	f002 fa49 	bl	800c474 <rotate_LZ7ctbe0>
      R = R * *S - c * 0.0;
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009fe8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009fec:	f7f6 faf6 	bl	80005dc <__aeabi_dmul>
 8009ff0:	4602      	mov	r2, r0
 8009ff2:	460b      	mov	r3, r1
 8009ff4:	4614      	mov	r4, r2
 8009ff6:	461d      	mov	r5, r3
 8009ff8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8009ffc:	f04f 0200 	mov.w	r2, #0
 800a000:	f04f 0300 	mov.w	r3, #0
 800a004:	f7f6 faea 	bl	80005dc <__aeabi_dmul>
 800a008:	4602      	mov	r2, r0
 800a00a:	460b      	mov	r3, r1
 800a00c:	4620      	mov	r0, r4
 800a00e:	4629      	mov	r1, r5
 800a010:	f7f6 f92c 	bl	800026c <__aeabi_dsub>
 800a014:	4602      	mov	r2, r0
 800a016:	460b      	mov	r3, r1
 800a018:	e9c7 2308 	strd	r2, r3, [r7, #32]
    }
  }

  *S = R;
 800a01c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a020:	68f9      	ldr	r1, [r7, #12]
 800a022:	e9c1 2300 	strd	r2, r3, [r1]
  if (p != 0) {
 800a026:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d057      	beq.n	800a0de <cholUpdateFactor_HBMX5a5h+0x1ca>
    s = R * R - U * U;
 800a02e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800a032:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a036:	f7f6 fad1 	bl	80005dc <__aeabi_dmul>
 800a03a:	4602      	mov	r2, r0
 800a03c:	460b      	mov	r3, r1
 800a03e:	4614      	mov	r4, r2
 800a040:	461d      	mov	r5, r3
 800a042:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a046:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a04a:	f7f6 fac7 	bl	80005dc <__aeabi_dmul>
 800a04e:	4602      	mov	r2, r0
 800a050:	460b      	mov	r3, r1
 800a052:	4620      	mov	r0, r4
 800a054:	4629      	mov	r1, r5
 800a056:	f7f6 f909 	bl	800026c <__aeabi_dsub>
 800a05a:	4602      	mov	r2, r0
 800a05c:	460b      	mov	r3, r1
 800a05e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    if ((!rtIsInf(s)) && (!rtIsNaN(s))) {
 800a062:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 800a066:	f002 fc79 	bl	800c95c <rtIsInf>
 800a06a:	4603      	mov	r3, r0
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d11d      	bne.n	800a0ac <cholUpdateFactor_HBMX5a5h+0x198>
 800a070:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 800a074:	f002 fc96 	bl	800c9a4 <rtIsNaN>
 800a078:	4603      	mov	r3, r0
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d116      	bne.n	800a0ac <cholUpdateFactor_HBMX5a5h+0x198>
      nrmx = 1.0;
 800a07e:	f04f 0200 	mov.w	r2, #0
 800a082:	4b19      	ldr	r3, [pc, #100]	; (800a0e8 <cholUpdateFactor_HBMX5a5h+0x1d4>)
 800a084:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
      if (s != 0.0) {
 800a088:	f04f 0200 	mov.w	r2, #0
 800a08c:	f04f 0300 	mov.w	r3, #0
 800a090:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800a094:	f7f6 fd0a 	bl	8000aac <__aeabi_dcmpeq>
 800a098:	4603      	mov	r3, r0
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d110      	bne.n	800a0c0 <cholUpdateFactor_HBMX5a5h+0x1ac>
        s = fabs(s);
 800a09e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0a0:	633b      	str	r3, [r7, #48]	; 0x30
 800a0a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a0a8:	637b      	str	r3, [r7, #52]	; 0x34
      if (s != 0.0) {
 800a0aa:	e009      	b.n	800a0c0 <cholUpdateFactor_HBMX5a5h+0x1ac>
      }
    } else {
      s = (rtNaN);
 800a0ac:	4b0f      	ldr	r3, [pc, #60]	; (800a0ec <cholUpdateFactor_HBMX5a5h+0x1d8>)
 800a0ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0b2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      nrmx = (rtNaN);
 800a0b6:	4b0d      	ldr	r3, [pc, #52]	; (800a0ec <cholUpdateFactor_HBMX5a5h+0x1d8>)
 800a0b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0bc:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }

    *S = nrmx * sqrt(s);
 800a0c0:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 800a0c4:	f010 fa88 	bl	801a5d8 <sqrt>
 800a0c8:	ec51 0b10 	vmov	r0, r1, d0
 800a0cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a0d0:	f7f6 fa84 	bl	80005dc <__aeabi_dmul>
 800a0d4:	4602      	mov	r2, r0
 800a0d6:	460b      	mov	r3, r1
 800a0d8:	68f9      	ldr	r1, [r7, #12]
 800a0da:	e9c1 2300 	strd	r2, r3, [r1]
  }
}
 800a0de:	bf00      	nop
 800a0e0:	3740      	adds	r7, #64	; 0x40
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bdb0      	pop	{r4, r5, r7, pc}
 800a0e6:	bf00      	nop
 800a0e8:	3ff00000 	.word	0x3ff00000
 800a0ec:	2001e910 	.word	0x2001e910

0800a0f0 <look1_binlxpw>:
#include "look1_binlxpw.h"
#include "rtwtypes.h"

real_T look1_binlxpw(real_T u0, const real_T bp0[], const real_T table[],
                     uint32_T maxIndex)
{
 800a0f0:	b5b0      	push	{r4, r5, r7, lr}
 800a0f2:	b08e      	sub	sp, #56	; 0x38
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	ed87 0b04 	vstr	d0, [r7, #16]
 800a0fa:	60f8      	str	r0, [r7, #12]
 800a0fc:	60b9      	str	r1, [r7, #8]
 800a0fe:	607a      	str	r2, [r7, #4]
  real_T frac;
  real_T yL_0d0;
  uint32_T iLeft;
  if (u0 <= bp0[0U]) {
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a106:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a10a:	f7f6 fce3 	bl	8000ad4 <__aeabi_dcmple>
 800a10e:	4603      	mov	r3, r0
 800a110:	2b00      	cmp	r3, #0
 800a112:	d020      	beq.n	800a156 <look1_binlxpw+0x66>
    iLeft = 0U;
 800a114:	2300      	movs	r3, #0
 800a116:	62fb      	str	r3, [r7, #44]	; 0x2c
    frac = (u0 - bp0[0U]) / (bp0[1U] - bp0[0U]);
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a11e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a122:	f7f6 f8a3 	bl	800026c <__aeabi_dsub>
 800a126:	4602      	mov	r2, r0
 800a128:	460b      	mov	r3, r1
 800a12a:	4614      	mov	r4, r2
 800a12c:	461d      	mov	r5, r3
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	3308      	adds	r3, #8
 800a132:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a13c:	f7f6 f896 	bl	800026c <__aeabi_dsub>
 800a140:	4602      	mov	r2, r0
 800a142:	460b      	mov	r3, r1
 800a144:	4620      	mov	r0, r4
 800a146:	4629      	mov	r1, r5
 800a148:	f7f6 fb72 	bl	8000830 <__aeabi_ddiv>
 800a14c:	4602      	mov	r2, r0
 800a14e:	460b      	mov	r3, r1
 800a150:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 800a154:	e087      	b.n	800a266 <look1_binlxpw+0x176>
  } else if (u0 < bp0[maxIndex]) {
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	00db      	lsls	r3, r3, #3
 800a15a:	68fa      	ldr	r2, [r7, #12]
 800a15c:	4413      	add	r3, r2
 800a15e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a162:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a166:	f7f6 fcab 	bl	8000ac0 <__aeabi_dcmplt>
 800a16a:	4603      	mov	r3, r0
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d04b      	beq.n	800a208 <look1_binlxpw+0x118>
    uint32_T bpIdx;
    uint32_T iRght;
    bpIdx = maxIndex >> 1U;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	085b      	lsrs	r3, r3, #1
 800a174:	62bb      	str	r3, [r7, #40]	; 0x28
    iLeft = 0U;
 800a176:	2300      	movs	r3, #0
 800a178:	62fb      	str	r3, [r7, #44]	; 0x2c
    iRght = maxIndex;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	627b      	str	r3, [r7, #36]	; 0x24
    while (iRght - iLeft > 1U) {
 800a17e:	e016      	b.n	800a1ae <look1_binlxpw+0xbe>
      if (u0 < bp0[bpIdx]) {
 800a180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a182:	00db      	lsls	r3, r3, #3
 800a184:	68fa      	ldr	r2, [r7, #12]
 800a186:	4413      	add	r3, r2
 800a188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a18c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a190:	f7f6 fc96 	bl	8000ac0 <__aeabi_dcmplt>
 800a194:	4603      	mov	r3, r0
 800a196:	2b00      	cmp	r3, #0
 800a198:	d002      	beq.n	800a1a0 <look1_binlxpw+0xb0>
        iRght = bpIdx;
 800a19a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a19c:	627b      	str	r3, [r7, #36]	; 0x24
 800a19e:	e001      	b.n	800a1a4 <look1_binlxpw+0xb4>
      } else {
        iLeft = bpIdx;
 800a1a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1a2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      bpIdx = (iRght + iLeft) >> 1U;
 800a1a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1a8:	4413      	add	r3, r2
 800a1aa:	085b      	lsrs	r3, r3, #1
 800a1ac:	62bb      	str	r3, [r7, #40]	; 0x28
    while (iRght - iLeft > 1U) {
 800a1ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1b2:	1ad3      	subs	r3, r2, r3
 800a1b4:	2b01      	cmp	r3, #1
 800a1b6:	d8e3      	bhi.n	800a180 <look1_binlxpw+0x90>
    }

    frac = (u0 - bp0[iLeft]) / (bp0[iLeft + 1U] - bp0[iLeft]);
 800a1b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1ba:	00db      	lsls	r3, r3, #3
 800a1bc:	68fa      	ldr	r2, [r7, #12]
 800a1be:	4413      	add	r3, r2
 800a1c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1c4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a1c8:	f7f6 f850 	bl	800026c <__aeabi_dsub>
 800a1cc:	4602      	mov	r2, r0
 800a1ce:	460b      	mov	r3, r1
 800a1d0:	4614      	mov	r4, r2
 800a1d2:	461d      	mov	r5, r3
 800a1d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1d6:	3301      	adds	r3, #1
 800a1d8:	00db      	lsls	r3, r3, #3
 800a1da:	68fa      	ldr	r2, [r7, #12]
 800a1dc:	4413      	add	r3, r2
 800a1de:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a1e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1e4:	00db      	lsls	r3, r3, #3
 800a1e6:	68fa      	ldr	r2, [r7, #12]
 800a1e8:	4413      	add	r3, r2
 800a1ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ee:	f7f6 f83d 	bl	800026c <__aeabi_dsub>
 800a1f2:	4602      	mov	r2, r0
 800a1f4:	460b      	mov	r3, r1
 800a1f6:	4620      	mov	r0, r4
 800a1f8:	4629      	mov	r1, r5
 800a1fa:	f7f6 fb19 	bl	8000830 <__aeabi_ddiv>
 800a1fe:	4602      	mov	r2, r0
 800a200:	460b      	mov	r3, r1
 800a202:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 800a206:	e02e      	b.n	800a266 <look1_binlxpw+0x176>
  } else {
    iLeft = maxIndex - 1U;
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	3b01      	subs	r3, #1
 800a20c:	62fb      	str	r3, [r7, #44]	; 0x2c
    frac = (u0 - bp0[maxIndex - 1U]) / (bp0[maxIndex] - bp0[maxIndex - 1U]);
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800a214:	3b01      	subs	r3, #1
 800a216:	00db      	lsls	r3, r3, #3
 800a218:	68fa      	ldr	r2, [r7, #12]
 800a21a:	4413      	add	r3, r2
 800a21c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a220:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a224:	f7f6 f822 	bl	800026c <__aeabi_dsub>
 800a228:	4602      	mov	r2, r0
 800a22a:	460b      	mov	r3, r1
 800a22c:	4614      	mov	r4, r2
 800a22e:	461d      	mov	r5, r3
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	00db      	lsls	r3, r3, #3
 800a234:	68fa      	ldr	r2, [r7, #12]
 800a236:	4413      	add	r3, r2
 800a238:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800a242:	3b01      	subs	r3, #1
 800a244:	00db      	lsls	r3, r3, #3
 800a246:	68fa      	ldr	r2, [r7, #12]
 800a248:	4413      	add	r3, r2
 800a24a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a24e:	f7f6 f80d 	bl	800026c <__aeabi_dsub>
 800a252:	4602      	mov	r2, r0
 800a254:	460b      	mov	r3, r1
 800a256:	4620      	mov	r0, r4
 800a258:	4629      	mov	r1, r5
 800a25a:	f7f6 fae9 	bl	8000830 <__aeabi_ddiv>
 800a25e:	4602      	mov	r2, r0
 800a260:	460b      	mov	r3, r1
 800a262:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  }

  yL_0d0 = table[iLeft];
 800a266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a268:	00db      	lsls	r3, r3, #3
 800a26a:	68ba      	ldr	r2, [r7, #8]
 800a26c:	4413      	add	r3, r2
 800a26e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a272:	e9c7 2306 	strd	r2, r3, [r7, #24]
  return (table[iLeft + 1U] - yL_0d0) * frac + yL_0d0;
 800a276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a278:	3301      	adds	r3, #1
 800a27a:	00db      	lsls	r3, r3, #3
 800a27c:	68ba      	ldr	r2, [r7, #8]
 800a27e:	4413      	add	r3, r2
 800a280:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a284:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a288:	f7f5 fff0 	bl	800026c <__aeabi_dsub>
 800a28c:	4602      	mov	r2, r0
 800a28e:	460b      	mov	r3, r1
 800a290:	4610      	mov	r0, r2
 800a292:	4619      	mov	r1, r3
 800a294:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a298:	f7f6 f9a0 	bl	80005dc <__aeabi_dmul>
 800a29c:	4602      	mov	r2, r0
 800a29e:	460b      	mov	r3, r1
 800a2a0:	4610      	mov	r0, r2
 800a2a2:	4619      	mov	r1, r3
 800a2a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a2a8:	f7f5 ffe2 	bl	8000270 <__adddf3>
 800a2ac:	4602      	mov	r2, r0
 800a2ae:	460b      	mov	r3, r1
 800a2b0:	ec43 2b17 	vmov	d7, r2, r3
}
 800a2b4:	eeb0 0a47 	vmov.f32	s0, s14
 800a2b8:	eef0 0a67 	vmov.f32	s1, s15
 800a2bc:	3738      	adds	r7, #56	; 0x38
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800a2c4 <qr_5a2P8Gh6>:
#include <math.h>
#include "xgemv_fRiR1I1O.h"
#include "xgerc_tNNiazQU.h"

void qr_5a2P8Gh6(const real_T A[9], real_T Q[9], real_T R[9])
{
 800a2c4:	b5b0      	push	{r4, r5, r7, lr}
 800a2c6:	b0c0      	sub	sp, #256	; 0x100
 800a2c8:	af04      	add	r7, sp, #16
 800a2ca:	6578      	str	r0, [r7, #84]	; 0x54
 800a2cc:	6539      	str	r1, [r7, #80]	; 0x50
 800a2ce:	64fa      	str	r2, [r7, #76]	; 0x4c
  int32_T c_lastc;
  int32_T coltop;
  int32_T exitg1;
  int32_T knt;
  boolean_T exitg2;
  memcpy(&b_A[0], &A[0], 9U * sizeof(real_T));
 800a2d0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800a2d4:	2248      	movs	r2, #72	; 0x48
 800a2d6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a2d8:	4618      	mov	r0, r3
 800a2da:	f00f ffb7 	bl	801a24c <memcpy>
  tau_idx_0 = 0.0;
 800a2de:	f04f 0200 	mov.w	r2, #0
 800a2e2:	f04f 0300 	mov.w	r3, #0
 800a2e6:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
  work[0] = 0.0;
 800a2ea:	f04f 0200 	mov.w	r2, #0
 800a2ee:	f04f 0300 	mov.w	r3, #0
 800a2f2:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
  tau_idx_1 = 0.0;
 800a2f6:	f04f 0200 	mov.w	r2, #0
 800a2fa:	f04f 0300 	mov.w	r3, #0
 800a2fe:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
  work[1] = 0.0;
 800a302:	f04f 0200 	mov.w	r2, #0
 800a306:	f04f 0300 	mov.w	r3, #0
 800a30a:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
  work[2] = 0.0;
 800a30e:	f04f 0200 	mov.w	r2, #0
 800a312:	f04f 0300 	mov.w	r3, #0
 800a316:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
  atmp = b_A[0];
 800a31a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800a31e:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
  beta1 = xnrm2_xDOlDEtw(2, b_A, 2);
 800a322:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800a326:	2202      	movs	r2, #2
 800a328:	4619      	mov	r1, r3
 800a32a:	2002      	movs	r0, #2
 800a32c:	f004 ffc0 	bl	800f2b0 <xnrm2_xDOlDEtw>
 800a330:	ed87 0b38 	vstr	d0, [r7, #224]	; 0xe0
  if (beta1 != 0.0) {
 800a334:	f04f 0200 	mov.w	r2, #0
 800a338:	f04f 0300 	mov.w	r3, #0
 800a33c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a340:	f7f6 fbb4 	bl	8000aac <__aeabi_dcmpeq>
 800a344:	4603      	mov	r3, r0
 800a346:	2b00      	cmp	r3, #0
 800a348:	f040 8172 	bne.w	800a630 <qr_5a2P8Gh6+0x36c>
    beta1 = rt_hypotd_snf(b_A[0], beta1);
 800a34c:	ed97 7b1c 	vldr	d7, [r7, #112]	; 0x70
 800a350:	ed97 1b38 	vldr	d1, [r7, #224]	; 0xe0
 800a354:	eeb0 0a47 	vmov.f32	s0, s14
 800a358:	eef0 0a67 	vmov.f32	s1, s15
 800a35c:	f002 fa14 	bl	800c788 <rt_hypotd_snf>
 800a360:	ed87 0b38 	vstr	d0, [r7, #224]	; 0xe0
    if (b_A[0] >= 0.0) {
 800a364:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800a368:	f04f 0200 	mov.w	r2, #0
 800a36c:	f04f 0300 	mov.w	r3, #0
 800a370:	f7f6 fbba 	bl	8000ae8 <__aeabi_dcmpge>
 800a374:	4603      	mov	r3, r0
 800a376:	2b00      	cmp	r3, #0
 800a378:	d009      	beq.n	800a38e <qr_5a2P8Gh6+0xca>
      beta1 = -beta1;
 800a37a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a37e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a382:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a386:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800a38a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    }

    if (fabs(beta1) < 1.0020841800044864E-292) {
 800a38e:	f8d7 40e0 	ldr.w	r4, [r7, #224]	; 0xe0
 800a392:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a396:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800a39a:	f04f 0200 	mov.w	r2, #0
 800a39e:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800a3a2:	4620      	mov	r0, r4
 800a3a4:	4629      	mov	r1, r5
 800a3a6:	f7f6 fb8b 	bl	8000ac0 <__aeabi_dcmplt>
 800a3aa:	4603      	mov	r3, r0
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	f000 80f1 	beq.w	800a594 <qr_5a2P8Gh6+0x2d0>
      knt = 0;
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      do {
        knt++;
 800a3b8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a3bc:	3301      	adds	r3, #1
 800a3be:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
        for (b_coltop = 1; b_coltop < 3; b_coltop++) {
 800a3c2:	2301      	movs	r3, #1
 800a3c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a3c8:	e01f      	b.n	800a40a <qr_5a2P8Gh6+0x146>
          b_A[b_coltop] *= 9.9792015476736E+291;
 800a3ca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a3ce:	00db      	lsls	r3, r3, #3
 800a3d0:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800a3d4:	4413      	add	r3, r2
 800a3d6:	3b80      	subs	r3, #128	; 0x80
 800a3d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a3dc:	f04f 0200 	mov.w	r2, #0
 800a3e0:	4bc9      	ldr	r3, [pc, #804]	; (800a708 <qr_5a2P8Gh6+0x444>)
 800a3e2:	f7f6 f8fb 	bl	80005dc <__aeabi_dmul>
 800a3e6:	4602      	mov	r2, r0
 800a3e8:	460b      	mov	r3, r1
 800a3ea:	4610      	mov	r0, r2
 800a3ec:	4619      	mov	r1, r3
 800a3ee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a3f2:	00db      	lsls	r3, r3, #3
 800a3f4:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800a3f8:	4413      	add	r3, r2
 800a3fa:	3b80      	subs	r3, #128	; 0x80
 800a3fc:	e9c3 0100 	strd	r0, r1, [r3]
        for (b_coltop = 1; b_coltop < 3; b_coltop++) {
 800a400:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a404:	3301      	adds	r3, #1
 800a406:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a40a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a40e:	2b02      	cmp	r3, #2
 800a410:	dddb      	ble.n	800a3ca <qr_5a2P8Gh6+0x106>
        }

        beta1 *= 9.9792015476736E+291;
 800a412:	f04f 0200 	mov.w	r2, #0
 800a416:	4bbc      	ldr	r3, [pc, #752]	; (800a708 <qr_5a2P8Gh6+0x444>)
 800a418:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a41c:	f7f6 f8de 	bl	80005dc <__aeabi_dmul>
 800a420:	4602      	mov	r2, r0
 800a422:	460b      	mov	r3, r1
 800a424:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
        atmp *= 9.9792015476736E+291;
 800a428:	f04f 0200 	mov.w	r2, #0
 800a42c:	4bb6      	ldr	r3, [pc, #728]	; (800a708 <qr_5a2P8Gh6+0x444>)
 800a42e:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 800a432:	f7f6 f8d3 	bl	80005dc <__aeabi_dmul>
 800a436:	4602      	mov	r2, r0
 800a438:	460b      	mov	r3, r1
 800a43a:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
      } while ((fabs(beta1) < 1.0020841800044864E-292) && (knt < 20));
 800a43e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a442:	643b      	str	r3, [r7, #64]	; 0x40
 800a444:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a448:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a44c:	647b      	str	r3, [r7, #68]	; 0x44
 800a44e:	f04f 0200 	mov.w	r2, #0
 800a452:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800a456:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800a45a:	f7f6 fb31 	bl	8000ac0 <__aeabi_dcmplt>
 800a45e:	4603      	mov	r3, r0
 800a460:	2b00      	cmp	r3, #0
 800a462:	d003      	beq.n	800a46c <qr_5a2P8Gh6+0x1a8>
 800a464:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a468:	2b13      	cmp	r3, #19
 800a46a:	dda5      	ble.n	800a3b8 <qr_5a2P8Gh6+0xf4>

      beta1 = rt_hypotd_snf(atmp, xnrm2_xDOlDEtw(2, b_A, 2));
 800a46c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800a470:	2202      	movs	r2, #2
 800a472:	4619      	mov	r1, r3
 800a474:	2002      	movs	r0, #2
 800a476:	f004 ff1b 	bl	800f2b0 <xnrm2_xDOlDEtw>
 800a47a:	eeb0 7a40 	vmov.f32	s14, s0
 800a47e:	eef0 7a60 	vmov.f32	s15, s1
 800a482:	eeb0 1a47 	vmov.f32	s2, s14
 800a486:	eef0 1a67 	vmov.f32	s3, s15
 800a48a:	ed97 0b3a 	vldr	d0, [r7, #232]	; 0xe8
 800a48e:	f002 f97b 	bl	800c788 <rt_hypotd_snf>
 800a492:	ed87 0b38 	vstr	d0, [r7, #224]	; 0xe0
      if (atmp >= 0.0) {
 800a496:	f04f 0200 	mov.w	r2, #0
 800a49a:	f04f 0300 	mov.w	r3, #0
 800a49e:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 800a4a2:	f7f6 fb21 	bl	8000ae8 <__aeabi_dcmpge>
 800a4a6:	4603      	mov	r3, r0
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d009      	beq.n	800a4c0 <qr_5a2P8Gh6+0x1fc>
        beta1 = -beta1;
 800a4ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a4b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a4b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a4b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800a4bc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      }

      tau_idx_0 = (beta1 - atmp) / beta1;
 800a4c0:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 800a4c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a4c8:	f7f5 fed0 	bl	800026c <__aeabi_dsub>
 800a4cc:	4602      	mov	r2, r0
 800a4ce:	460b      	mov	r3, r1
 800a4d0:	4610      	mov	r0, r2
 800a4d2:	4619      	mov	r1, r3
 800a4d4:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800a4d8:	f7f6 f9aa 	bl	8000830 <__aeabi_ddiv>
 800a4dc:	4602      	mov	r2, r0
 800a4de:	460b      	mov	r3, r1
 800a4e0:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
      atmp = 1.0 / (atmp - beta1);
 800a4e4:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800a4e8:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 800a4ec:	f7f5 febe 	bl	800026c <__aeabi_dsub>
 800a4f0:	4602      	mov	r2, r0
 800a4f2:	460b      	mov	r3, r1
 800a4f4:	f04f 0000 	mov.w	r0, #0
 800a4f8:	4984      	ldr	r1, [pc, #528]	; (800a70c <qr_5a2P8Gh6+0x448>)
 800a4fa:	f7f6 f999 	bl	8000830 <__aeabi_ddiv>
 800a4fe:	4602      	mov	r2, r0
 800a500:	460b      	mov	r3, r1
 800a502:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
      for (b_coltop = 1; b_coltop < 3; b_coltop++) {
 800a506:	2301      	movs	r3, #1
 800a508:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a50c:	e01e      	b.n	800a54c <qr_5a2P8Gh6+0x288>
        b_A[b_coltop] *= atmp;
 800a50e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a512:	00db      	lsls	r3, r3, #3
 800a514:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800a518:	4413      	add	r3, r2
 800a51a:	3b80      	subs	r3, #128	; 0x80
 800a51c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a520:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 800a524:	f7f6 f85a 	bl	80005dc <__aeabi_dmul>
 800a528:	4602      	mov	r2, r0
 800a52a:	460b      	mov	r3, r1
 800a52c:	4610      	mov	r0, r2
 800a52e:	4619      	mov	r1, r3
 800a530:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a534:	00db      	lsls	r3, r3, #3
 800a536:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800a53a:	4413      	add	r3, r2
 800a53c:	3b80      	subs	r3, #128	; 0x80
 800a53e:	e9c3 0100 	strd	r0, r1, [r3]
      for (b_coltop = 1; b_coltop < 3; b_coltop++) {
 800a542:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a546:	3301      	adds	r3, #1
 800a548:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a54c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a550:	2b02      	cmp	r3, #2
 800a552:	dddc      	ble.n	800a50e <qr_5a2P8Gh6+0x24a>
      }

      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 800a554:	2300      	movs	r3, #0
 800a556:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a55a:	e010      	b.n	800a57e <qr_5a2P8Gh6+0x2ba>
        beta1 *= 1.0020841800044864E-292;
 800a55c:	f04f 0200 	mov.w	r2, #0
 800a560:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800a564:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a568:	f7f6 f838 	bl	80005dc <__aeabi_dmul>
 800a56c:	4602      	mov	r2, r0
 800a56e:	460b      	mov	r3, r1
 800a570:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 800a574:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a578:	3301      	adds	r3, #1
 800a57a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a57e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a582:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a586:	429a      	cmp	r2, r3
 800a588:	dbe8      	blt.n	800a55c <qr_5a2P8Gh6+0x298>
      }

      atmp = beta1;
 800a58a:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800a58e:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
 800a592:	e04d      	b.n	800a630 <qr_5a2P8Gh6+0x36c>
    } else {
      tau_idx_0 = (beta1 - b_A[0]) / beta1;
 800a594:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800a598:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a59c:	f7f5 fe66 	bl	800026c <__aeabi_dsub>
 800a5a0:	4602      	mov	r2, r0
 800a5a2:	460b      	mov	r3, r1
 800a5a4:	4610      	mov	r0, r2
 800a5a6:	4619      	mov	r1, r3
 800a5a8:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800a5ac:	f7f6 f940 	bl	8000830 <__aeabi_ddiv>
 800a5b0:	4602      	mov	r2, r0
 800a5b2:	460b      	mov	r3, r1
 800a5b4:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
      atmp = 1.0 / (b_A[0] - beta1);
 800a5b8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800a5bc:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800a5c0:	f7f5 fe54 	bl	800026c <__aeabi_dsub>
 800a5c4:	4602      	mov	r2, r0
 800a5c6:	460b      	mov	r3, r1
 800a5c8:	f04f 0000 	mov.w	r0, #0
 800a5cc:	494f      	ldr	r1, [pc, #316]	; (800a70c <qr_5a2P8Gh6+0x448>)
 800a5ce:	f7f6 f92f 	bl	8000830 <__aeabi_ddiv>
 800a5d2:	4602      	mov	r2, r0
 800a5d4:	460b      	mov	r3, r1
 800a5d6:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
      for (c_lastc = 1; c_lastc < 3; c_lastc++) {
 800a5da:	2301      	movs	r3, #1
 800a5dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a5e0:	e01e      	b.n	800a620 <qr_5a2P8Gh6+0x35c>
        b_A[c_lastc] *= atmp;
 800a5e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a5e6:	00db      	lsls	r3, r3, #3
 800a5e8:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800a5ec:	4413      	add	r3, r2
 800a5ee:	3b80      	subs	r3, #128	; 0x80
 800a5f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a5f4:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 800a5f8:	f7f5 fff0 	bl	80005dc <__aeabi_dmul>
 800a5fc:	4602      	mov	r2, r0
 800a5fe:	460b      	mov	r3, r1
 800a600:	4610      	mov	r0, r2
 800a602:	4619      	mov	r1, r3
 800a604:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a608:	00db      	lsls	r3, r3, #3
 800a60a:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800a60e:	4413      	add	r3, r2
 800a610:	3b80      	subs	r3, #128	; 0x80
 800a612:	e9c3 0100 	strd	r0, r1, [r3]
      for (c_lastc = 1; c_lastc < 3; c_lastc++) {
 800a616:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a61a:	3301      	adds	r3, #1
 800a61c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a620:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a624:	2b02      	cmp	r3, #2
 800a626:	dddc      	ble.n	800a5e2 <qr_5a2P8Gh6+0x31e>
      }

      atmp = beta1;
 800a628:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800a62c:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
    }
  }

  b_A[0] = 1.0;
 800a630:	f04f 0200 	mov.w	r2, #0
 800a634:	4b35      	ldr	r3, [pc, #212]	; (800a70c <qr_5a2P8Gh6+0x448>)
 800a636:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  if (tau_idx_0 != 0.0) {
 800a63a:	f04f 0200 	mov.w	r2, #0
 800a63e:	f04f 0300 	mov.w	r3, #0
 800a642:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800a646:	f7f6 fa31 	bl	8000aac <__aeabi_dcmpeq>
 800a64a:	4603      	mov	r3, r0
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	f040 8081 	bne.w	800a754 <qr_5a2P8Gh6+0x490>
    knt = 3;
 800a652:	2303      	movs	r3, #3
 800a654:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    c_lastc = 2;
 800a658:	2302      	movs	r3, #2
 800a65a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    while ((knt > 0) && (b_A[c_lastc] == 0.0)) {
 800a65e:	e009      	b.n	800a674 <qr_5a2P8Gh6+0x3b0>
      knt--;
 800a660:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a664:	3b01      	subs	r3, #1
 800a666:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      c_lastc--;
 800a66a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a66e:	3b01      	subs	r3, #1
 800a670:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    while ((knt > 0) && (b_A[c_lastc] == 0.0)) {
 800a674:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a678:	2b00      	cmp	r3, #0
 800a67a:	dd11      	ble.n	800a6a0 <qr_5a2P8Gh6+0x3dc>
 800a67c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a680:	00db      	lsls	r3, r3, #3
 800a682:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800a686:	4413      	add	r3, r2
 800a688:	3b80      	subs	r3, #128	; 0x80
 800a68a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a68e:	f04f 0200 	mov.w	r2, #0
 800a692:	f04f 0300 	mov.w	r3, #0
 800a696:	f7f6 fa09 	bl	8000aac <__aeabi_dcmpeq>
 800a69a:	4603      	mov	r3, r0
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d1df      	bne.n	800a660 <qr_5a2P8Gh6+0x39c>
    }

    c_lastc = 2;
 800a6a0:	2302      	movs	r3, #2
 800a6a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    exitg2 = false;
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
    while ((!exitg2) && (c_lastc > 0)) {
 800a6ac:	e049      	b.n	800a742 <qr_5a2P8Gh6+0x47e>
      b_coltop = (c_lastc - 1) * 3 + 3;
 800a6ae:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a6b2:	4613      	mov	r3, r2
 800a6b4:	005b      	lsls	r3, r3, #1
 800a6b6:	4413      	add	r3, r2
 800a6b8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
      coltop = b_coltop;
 800a6bc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a6c0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
      do {
        exitg1 = 0;
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
        if (coltop + 1 <= b_coltop + knt) {
 800a6ca:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800a6ce:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a6d2:	441a      	add	r2, r3
 800a6d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a6d8:	4293      	cmp	r3, r2
 800a6da:	da1f      	bge.n	800a71c <qr_5a2P8Gh6+0x458>
          if (b_A[coltop] != 0.0) {
 800a6dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a6e0:	00db      	lsls	r3, r3, #3
 800a6e2:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800a6e6:	4413      	add	r3, r2
 800a6e8:	3b80      	subs	r3, #128	; 0x80
 800a6ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a6ee:	f04f 0200 	mov.w	r2, #0
 800a6f2:	f04f 0300 	mov.w	r3, #0
 800a6f6:	f7f6 f9d9 	bl	8000aac <__aeabi_dcmpeq>
 800a6fa:	4603      	mov	r3, r0
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d107      	bne.n	800a710 <qr_5a2P8Gh6+0x44c>
            exitg1 = 1;
 800a700:	2301      	movs	r3, #1
 800a702:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a706:	e011      	b.n	800a72c <qr_5a2P8Gh6+0x468>
 800a708:	7c900000 	.word	0x7c900000
 800a70c:	3ff00000 	.word	0x3ff00000
          } else {
            coltop++;
 800a710:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a714:	3301      	adds	r3, #1
 800a716:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a71a:	e007      	b.n	800a72c <qr_5a2P8Gh6+0x468>
          }
        } else {
          c_lastc--;
 800a71c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a720:	3b01      	subs	r3, #1
 800a722:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
          exitg1 = 2;
 800a726:	2302      	movs	r3, #2
 800a728:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
        }
      } while (exitg1 == 0);
 800a72c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a730:	2b00      	cmp	r3, #0
 800a732:	d0c7      	beq.n	800a6c4 <qr_5a2P8Gh6+0x400>

      if (exitg1 == 1) {
 800a734:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a738:	2b01      	cmp	r3, #1
 800a73a:	d102      	bne.n	800a742 <qr_5a2P8Gh6+0x47e>
        exitg2 = true;
 800a73c:	2301      	movs	r3, #1
 800a73e:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
    while ((!exitg2) && (c_lastc > 0)) {
 800a742:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 800a746:	2b00      	cmp	r3, #0
 800a748:	d10a      	bne.n	800a760 <qr_5a2P8Gh6+0x49c>
 800a74a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a74e:	2b00      	cmp	r3, #0
 800a750:	dcad      	bgt.n	800a6ae <qr_5a2P8Gh6+0x3ea>
 800a752:	e005      	b.n	800a760 <qr_5a2P8Gh6+0x49c>
      }
    }
  } else {
    knt = 0;
 800a754:	2300      	movs	r3, #0
 800a756:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    c_lastc = 0;
 800a75a:	2300      	movs	r3, #0
 800a75c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  }

  if (knt > 0) {
 800a760:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a764:	2b00      	cmp	r3, #0
 800a766:	dd29      	ble.n	800a7bc <qr_5a2P8Gh6+0x4f8>
    xgemv_fRiR1I1O(knt, c_lastc, b_A, 4, b_A, 1, work);
 800a768:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800a76c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800a770:	9302      	str	r3, [sp, #8]
 800a772:	2301      	movs	r3, #1
 800a774:	9301      	str	r3, [sp, #4]
 800a776:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800a77a:	9300      	str	r3, [sp, #0]
 800a77c:	2304      	movs	r3, #4
 800a77e:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 800a782:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800a786:	f004 f94f 	bl	800ea28 <xgemv_fRiR1I1O>
    xgerc_tNNiazQU(knt, c_lastc, -tau_idx_0, 1, work, b_A, 4);
 800a78a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a78e:	63bb      	str	r3, [r7, #56]	; 0x38
 800a790:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a794:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800a798:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a79a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800a79e:	2304      	movs	r3, #4
 800a7a0:	9301      	str	r3, [sp, #4]
 800a7a2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800a7a6:	9300      	str	r3, [sp, #0]
 800a7a8:	4613      	mov	r3, r2
 800a7aa:	2201      	movs	r2, #1
 800a7ac:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 800a7b0:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 800a7b4:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800a7b8:	f004 fa3f 	bl	800ec3a <xgerc_tNNiazQU>
  }

  b_A[0] = atmp;
 800a7bc:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 800a7c0:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  atmp = b_A[4];
 800a7c4:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800a7c8:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
  beta1 = xnrm2_xDOlDEtw(1, b_A, 6);
 800a7cc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800a7d0:	2206      	movs	r2, #6
 800a7d2:	4619      	mov	r1, r3
 800a7d4:	2001      	movs	r0, #1
 800a7d6:	f004 fd6b 	bl	800f2b0 <xnrm2_xDOlDEtw>
 800a7da:	ed87 0b38 	vstr	d0, [r7, #224]	; 0xe0
  if (beta1 != 0.0) {
 800a7de:	f04f 0200 	mov.w	r2, #0
 800a7e2:	f04f 0300 	mov.w	r3, #0
 800a7e6:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a7ea:	f7f6 f95f 	bl	8000aac <__aeabi_dcmpeq>
 800a7ee:	4603      	mov	r3, r0
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	f040 8170 	bne.w	800aad6 <qr_5a2P8Gh6+0x812>
    beta1 = rt_hypotd_snf(b_A[4], beta1);
 800a7f6:	ed97 7b24 	vldr	d7, [r7, #144]	; 0x90
 800a7fa:	ed97 1b38 	vldr	d1, [r7, #224]	; 0xe0
 800a7fe:	eeb0 0a47 	vmov.f32	s0, s14
 800a802:	eef0 0a67 	vmov.f32	s1, s15
 800a806:	f001 ffbf 	bl	800c788 <rt_hypotd_snf>
 800a80a:	ed87 0b38 	vstr	d0, [r7, #224]	; 0xe0
    if (b_A[4] >= 0.0) {
 800a80e:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800a812:	f04f 0200 	mov.w	r2, #0
 800a816:	f04f 0300 	mov.w	r3, #0
 800a81a:	f7f6 f965 	bl	8000ae8 <__aeabi_dcmpge>
 800a81e:	4603      	mov	r3, r0
 800a820:	2b00      	cmp	r3, #0
 800a822:	d009      	beq.n	800a838 <qr_5a2P8Gh6+0x574>
      beta1 = -beta1;
 800a824:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a828:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a82c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a830:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800a834:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    }

    if (fabs(beta1) < 1.0020841800044864E-292) {
 800a838:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a83c:	633b      	str	r3, [r7, #48]	; 0x30
 800a83e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a842:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a846:	637b      	str	r3, [r7, #52]	; 0x34
 800a848:	f04f 0200 	mov.w	r2, #0
 800a84c:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800a850:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800a854:	f7f6 f934 	bl	8000ac0 <__aeabi_dcmplt>
 800a858:	4603      	mov	r3, r0
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	f000 80ef 	beq.w	800aa3e <qr_5a2P8Gh6+0x77a>
      knt = 0;
 800a860:	2300      	movs	r3, #0
 800a862:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      do {
        knt++;
 800a866:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a86a:	3301      	adds	r3, #1
 800a86c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
        for (b_coltop = 5; b_coltop < 6; b_coltop++) {
 800a870:	2305      	movs	r3, #5
 800a872:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a876:	e01f      	b.n	800a8b8 <qr_5a2P8Gh6+0x5f4>
          b_A[b_coltop] *= 9.9792015476736E+291;
 800a878:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a87c:	00db      	lsls	r3, r3, #3
 800a87e:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800a882:	4413      	add	r3, r2
 800a884:	3b80      	subs	r3, #128	; 0x80
 800a886:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a88a:	f04f 0200 	mov.w	r2, #0
 800a88e:	4bc9      	ldr	r3, [pc, #804]	; (800abb4 <qr_5a2P8Gh6+0x8f0>)
 800a890:	f7f5 fea4 	bl	80005dc <__aeabi_dmul>
 800a894:	4602      	mov	r2, r0
 800a896:	460b      	mov	r3, r1
 800a898:	4610      	mov	r0, r2
 800a89a:	4619      	mov	r1, r3
 800a89c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a8a0:	00db      	lsls	r3, r3, #3
 800a8a2:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800a8a6:	4413      	add	r3, r2
 800a8a8:	3b80      	subs	r3, #128	; 0x80
 800a8aa:	e9c3 0100 	strd	r0, r1, [r3]
        for (b_coltop = 5; b_coltop < 6; b_coltop++) {
 800a8ae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a8b2:	3301      	adds	r3, #1
 800a8b4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a8b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a8bc:	2b05      	cmp	r3, #5
 800a8be:	dddb      	ble.n	800a878 <qr_5a2P8Gh6+0x5b4>
        }

        beta1 *= 9.9792015476736E+291;
 800a8c0:	f04f 0200 	mov.w	r2, #0
 800a8c4:	4bbb      	ldr	r3, [pc, #748]	; (800abb4 <qr_5a2P8Gh6+0x8f0>)
 800a8c6:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a8ca:	f7f5 fe87 	bl	80005dc <__aeabi_dmul>
 800a8ce:	4602      	mov	r2, r0
 800a8d0:	460b      	mov	r3, r1
 800a8d2:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
        atmp *= 9.9792015476736E+291;
 800a8d6:	f04f 0200 	mov.w	r2, #0
 800a8da:	4bb6      	ldr	r3, [pc, #728]	; (800abb4 <qr_5a2P8Gh6+0x8f0>)
 800a8dc:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 800a8e0:	f7f5 fe7c 	bl	80005dc <__aeabi_dmul>
 800a8e4:	4602      	mov	r2, r0
 800a8e6:	460b      	mov	r3, r1
 800a8e8:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
      } while ((fabs(beta1) < 1.0020841800044864E-292) && (knt < 20));
 800a8ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a8f0:	62bb      	str	r3, [r7, #40]	; 0x28
 800a8f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a8f6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a8fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a8fc:	f04f 0200 	mov.w	r2, #0
 800a900:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800a904:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800a908:	f7f6 f8da 	bl	8000ac0 <__aeabi_dcmplt>
 800a90c:	4603      	mov	r3, r0
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d003      	beq.n	800a91a <qr_5a2P8Gh6+0x656>
 800a912:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a916:	2b13      	cmp	r3, #19
 800a918:	dda5      	ble.n	800a866 <qr_5a2P8Gh6+0x5a2>

      beta1 = rt_hypotd_snf(atmp, xnrm2_xDOlDEtw(1, b_A, 6));
 800a91a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800a91e:	2206      	movs	r2, #6
 800a920:	4619      	mov	r1, r3
 800a922:	2001      	movs	r0, #1
 800a924:	f004 fcc4 	bl	800f2b0 <xnrm2_xDOlDEtw>
 800a928:	eeb0 7a40 	vmov.f32	s14, s0
 800a92c:	eef0 7a60 	vmov.f32	s15, s1
 800a930:	eeb0 1a47 	vmov.f32	s2, s14
 800a934:	eef0 1a67 	vmov.f32	s3, s15
 800a938:	ed97 0b3a 	vldr	d0, [r7, #232]	; 0xe8
 800a93c:	f001 ff24 	bl	800c788 <rt_hypotd_snf>
 800a940:	ed87 0b38 	vstr	d0, [r7, #224]	; 0xe0
      if (atmp >= 0.0) {
 800a944:	f04f 0200 	mov.w	r2, #0
 800a948:	f04f 0300 	mov.w	r3, #0
 800a94c:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 800a950:	f7f6 f8ca 	bl	8000ae8 <__aeabi_dcmpge>
 800a954:	4603      	mov	r3, r0
 800a956:	2b00      	cmp	r3, #0
 800a958:	d009      	beq.n	800a96e <qr_5a2P8Gh6+0x6aa>
        beta1 = -beta1;
 800a95a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a95e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a962:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a966:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800a96a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      }

      tau_idx_1 = (beta1 - atmp) / beta1;
 800a96e:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 800a972:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a976:	f7f5 fc79 	bl	800026c <__aeabi_dsub>
 800a97a:	4602      	mov	r2, r0
 800a97c:	460b      	mov	r3, r1
 800a97e:	4610      	mov	r0, r2
 800a980:	4619      	mov	r1, r3
 800a982:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800a986:	f7f5 ff53 	bl	8000830 <__aeabi_ddiv>
 800a98a:	4602      	mov	r2, r0
 800a98c:	460b      	mov	r3, r1
 800a98e:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
      atmp = 1.0 / (atmp - beta1);
 800a992:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800a996:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 800a99a:	f7f5 fc67 	bl	800026c <__aeabi_dsub>
 800a99e:	4602      	mov	r2, r0
 800a9a0:	460b      	mov	r3, r1
 800a9a2:	f04f 0000 	mov.w	r0, #0
 800a9a6:	4984      	ldr	r1, [pc, #528]	; (800abb8 <qr_5a2P8Gh6+0x8f4>)
 800a9a8:	f7f5 ff42 	bl	8000830 <__aeabi_ddiv>
 800a9ac:	4602      	mov	r2, r0
 800a9ae:	460b      	mov	r3, r1
 800a9b0:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
      for (b_coltop = 5; b_coltop < 6; b_coltop++) {
 800a9b4:	2305      	movs	r3, #5
 800a9b6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a9ba:	e01c      	b.n	800a9f6 <qr_5a2P8Gh6+0x732>
        b_A[b_coltop] *= atmp;
 800a9bc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a9c0:	00db      	lsls	r3, r3, #3
 800a9c2:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800a9c6:	4413      	add	r3, r2
 800a9c8:	3b80      	subs	r3, #128	; 0x80
 800a9ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a9ce:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 800a9d2:	f7f5 fe03 	bl	80005dc <__aeabi_dmul>
 800a9d6:	4602      	mov	r2, r0
 800a9d8:	460b      	mov	r3, r1
 800a9da:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 800a9de:	00c9      	lsls	r1, r1, #3
 800a9e0:	f107 00f0 	add.w	r0, r7, #240	; 0xf0
 800a9e4:	4401      	add	r1, r0
 800a9e6:	3980      	subs	r1, #128	; 0x80
 800a9e8:	e9c1 2300 	strd	r2, r3, [r1]
      for (b_coltop = 5; b_coltop < 6; b_coltop++) {
 800a9ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a9f0:	3301      	adds	r3, #1
 800a9f2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a9f6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a9fa:	2b05      	cmp	r3, #5
 800a9fc:	ddde      	ble.n	800a9bc <qr_5a2P8Gh6+0x6f8>
      }

      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 800a9fe:	2300      	movs	r3, #0
 800aa00:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800aa04:	e010      	b.n	800aa28 <qr_5a2P8Gh6+0x764>
        beta1 *= 1.0020841800044864E-292;
 800aa06:	f04f 0200 	mov.w	r2, #0
 800aa0a:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800aa0e:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800aa12:	f7f5 fde3 	bl	80005dc <__aeabi_dmul>
 800aa16:	4602      	mov	r2, r0
 800aa18:	460b      	mov	r3, r1
 800aa1a:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 800aa1e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800aa22:	3301      	adds	r3, #1
 800aa24:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800aa28:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800aa2c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800aa30:	429a      	cmp	r2, r3
 800aa32:	dbe8      	blt.n	800aa06 <qr_5a2P8Gh6+0x742>
      }

      atmp = beta1;
 800aa34:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800aa38:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
 800aa3c:	e04b      	b.n	800aad6 <qr_5a2P8Gh6+0x812>
    } else {
      tau_idx_1 = (beta1 - b_A[4]) / beta1;
 800aa3e:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800aa42:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800aa46:	f7f5 fc11 	bl	800026c <__aeabi_dsub>
 800aa4a:	4602      	mov	r2, r0
 800aa4c:	460b      	mov	r3, r1
 800aa4e:	4610      	mov	r0, r2
 800aa50:	4619      	mov	r1, r3
 800aa52:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800aa56:	f7f5 feeb 	bl	8000830 <__aeabi_ddiv>
 800aa5a:	4602      	mov	r2, r0
 800aa5c:	460b      	mov	r3, r1
 800aa5e:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
      atmp = 1.0 / (b_A[4] - beta1);
 800aa62:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800aa66:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800aa6a:	f7f5 fbff 	bl	800026c <__aeabi_dsub>
 800aa6e:	4602      	mov	r2, r0
 800aa70:	460b      	mov	r3, r1
 800aa72:	f04f 0000 	mov.w	r0, #0
 800aa76:	4950      	ldr	r1, [pc, #320]	; (800abb8 <qr_5a2P8Gh6+0x8f4>)
 800aa78:	f7f5 feda 	bl	8000830 <__aeabi_ddiv>
 800aa7c:	4602      	mov	r2, r0
 800aa7e:	460b      	mov	r3, r1
 800aa80:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
      for (c_lastc = 5; c_lastc < 6; c_lastc++) {
 800aa84:	2305      	movs	r3, #5
 800aa86:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800aa8a:	e01c      	b.n	800aac6 <qr_5a2P8Gh6+0x802>
        b_A[c_lastc] *= atmp;
 800aa8c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800aa90:	00db      	lsls	r3, r3, #3
 800aa92:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800aa96:	4413      	add	r3, r2
 800aa98:	3b80      	subs	r3, #128	; 0x80
 800aa9a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800aa9e:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 800aaa2:	f7f5 fd9b 	bl	80005dc <__aeabi_dmul>
 800aaa6:	4602      	mov	r2, r0
 800aaa8:	460b      	mov	r3, r1
 800aaaa:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 800aaae:	00c9      	lsls	r1, r1, #3
 800aab0:	f107 00f0 	add.w	r0, r7, #240	; 0xf0
 800aab4:	4401      	add	r1, r0
 800aab6:	3980      	subs	r1, #128	; 0x80
 800aab8:	e9c1 2300 	strd	r2, r3, [r1]
      for (c_lastc = 5; c_lastc < 6; c_lastc++) {
 800aabc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800aac0:	3301      	adds	r3, #1
 800aac2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800aac6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800aaca:	2b05      	cmp	r3, #5
 800aacc:	ddde      	ble.n	800aa8c <qr_5a2P8Gh6+0x7c8>
      }

      atmp = beta1;
 800aace:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800aad2:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
    }
  }

  b_A[4] = 1.0;
 800aad6:	f04f 0200 	mov.w	r2, #0
 800aada:	4b37      	ldr	r3, [pc, #220]	; (800abb8 <qr_5a2P8Gh6+0x8f4>)
 800aadc:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
  if (tau_idx_1 != 0.0) {
 800aae0:	f04f 0200 	mov.w	r2, #0
 800aae4:	f04f 0300 	mov.w	r3, #0
 800aae8:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800aaec:	f7f5 ffde 	bl	8000aac <__aeabi_dcmpeq>
 800aaf0:	4603      	mov	r3, r0
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d162      	bne.n	800abbc <qr_5a2P8Gh6+0x8f8>
    knt = 2;
 800aaf6:	2302      	movs	r3, #2
 800aaf8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    c_lastc = 5;
 800aafc:	2305      	movs	r3, #5
 800aafe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    while ((knt > 0) && (b_A[c_lastc] == 0.0)) {
 800ab02:	e009      	b.n	800ab18 <qr_5a2P8Gh6+0x854>
      knt--;
 800ab04:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ab08:	3b01      	subs	r3, #1
 800ab0a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      c_lastc--;
 800ab0e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ab12:	3b01      	subs	r3, #1
 800ab14:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    while ((knt > 0) && (b_A[c_lastc] == 0.0)) {
 800ab18:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	dd11      	ble.n	800ab44 <qr_5a2P8Gh6+0x880>
 800ab20:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ab24:	00db      	lsls	r3, r3, #3
 800ab26:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800ab2a:	4413      	add	r3, r2
 800ab2c:	3b80      	subs	r3, #128	; 0x80
 800ab2e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ab32:	f04f 0200 	mov.w	r2, #0
 800ab36:	f04f 0300 	mov.w	r3, #0
 800ab3a:	f7f5 ffb7 	bl	8000aac <__aeabi_dcmpeq>
 800ab3e:	4603      	mov	r3, r0
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d1df      	bne.n	800ab04 <qr_5a2P8Gh6+0x840>
    }

    c_lastc = 1;
 800ab44:	2301      	movs	r3, #1
 800ab46:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    coltop = 7;
 800ab4a:	2307      	movs	r3, #7
 800ab4c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    do {
      exitg1 = 0;
 800ab50:	2300      	movs	r3, #0
 800ab52:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
      if (coltop + 1 <= knt + 7) {
 800ab56:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ab5a:	3306      	adds	r3, #6
 800ab5c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ab60:	429a      	cmp	r2, r3
 800ab62:	dc1b      	bgt.n	800ab9c <qr_5a2P8Gh6+0x8d8>
        if (b_A[coltop] != 0.0) {
 800ab64:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800ab68:	00db      	lsls	r3, r3, #3
 800ab6a:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800ab6e:	4413      	add	r3, r2
 800ab70:	3b80      	subs	r3, #128	; 0x80
 800ab72:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ab76:	f04f 0200 	mov.w	r2, #0
 800ab7a:	f04f 0300 	mov.w	r3, #0
 800ab7e:	f7f5 ff95 	bl	8000aac <__aeabi_dcmpeq>
 800ab82:	4603      	mov	r3, r0
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d103      	bne.n	800ab90 <qr_5a2P8Gh6+0x8cc>
          exitg1 = 1;
 800ab88:	2301      	movs	r3, #1
 800ab8a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ab8e:	e00b      	b.n	800aba8 <qr_5a2P8Gh6+0x8e4>
        } else {
          coltop++;
 800ab90:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800ab94:	3301      	adds	r3, #1
 800ab96:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ab9a:	e005      	b.n	800aba8 <qr_5a2P8Gh6+0x8e4>
        }
      } else {
        c_lastc = 0;
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
        exitg1 = 1;
 800aba2:	2301      	movs	r3, #1
 800aba4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
      }
    } while (exitg1 == 0);
 800aba8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800abac:	2b00      	cmp	r3, #0
 800abae:	d0cf      	beq.n	800ab50 <qr_5a2P8Gh6+0x88c>
 800abb0:	e00a      	b.n	800abc8 <qr_5a2P8Gh6+0x904>
 800abb2:	bf00      	nop
 800abb4:	7c900000 	.word	0x7c900000
 800abb8:	3ff00000 	.word	0x3ff00000
  } else {
    knt = 0;
 800abbc:	2300      	movs	r3, #0
 800abbe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    c_lastc = 0;
 800abc2:	2300      	movs	r3, #0
 800abc4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  }

  if (knt > 0) {
 800abc8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800abcc:	2b00      	cmp	r3, #0
 800abce:	dd29      	ble.n	800ac24 <qr_5a2P8Gh6+0x960>
    xgemv_fRiR1I1O(knt, c_lastc, b_A, 8, b_A, 5, work);
 800abd0:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800abd4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800abd8:	9302      	str	r3, [sp, #8]
 800abda:	2305      	movs	r3, #5
 800abdc:	9301      	str	r3, [sp, #4]
 800abde:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800abe2:	9300      	str	r3, [sp, #0]
 800abe4:	2308      	movs	r3, #8
 800abe6:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 800abea:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800abee:	f003 ff1b 	bl	800ea28 <xgemv_fRiR1I1O>
    xgerc_tNNiazQU(knt, c_lastc, -tau_idx_1, 5, work, b_A, 8);
 800abf2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800abf6:	623b      	str	r3, [r7, #32]
 800abf8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800abfc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800ac00:	627b      	str	r3, [r7, #36]	; 0x24
 800ac02:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800ac06:	2308      	movs	r3, #8
 800ac08:	9301      	str	r3, [sp, #4]
 800ac0a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800ac0e:	9300      	str	r3, [sp, #0]
 800ac10:	4613      	mov	r3, r2
 800ac12:	2205      	movs	r2, #5
 800ac14:	ed97 0b08 	vldr	d0, [r7, #32]
 800ac18:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 800ac1c:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800ac20:	f004 f80b 	bl	800ec3a <xgerc_tNNiazQU>
  }

  b_A[4] = atmp;
 800ac24:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 800ac28:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
  R[0] = b_A[0];
 800ac2c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800ac30:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800ac32:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 1; c_lastc + 1 < 4; c_lastc++) {
 800ac36:	2301      	movs	r3, #1
 800ac38:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ac3c:	e00f      	b.n	800ac5e <qr_5a2P8Gh6+0x99a>
    R[c_lastc] = 0.0;
 800ac3e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ac42:	00db      	lsls	r3, r3, #3
 800ac44:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ac46:	18d1      	adds	r1, r2, r3
 800ac48:	f04f 0200 	mov.w	r2, #0
 800ac4c:	f04f 0300 	mov.w	r3, #0
 800ac50:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 1; c_lastc + 1 < 4; c_lastc++) {
 800ac54:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ac58:	3301      	adds	r3, #1
 800ac5a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ac5e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ac62:	2b02      	cmp	r3, #2
 800ac64:	ddeb      	ble.n	800ac3e <qr_5a2P8Gh6+0x97a>
  }

  work[0] = 0.0;
 800ac66:	f04f 0200 	mov.w	r2, #0
 800ac6a:	f04f 0300 	mov.w	r3, #0
 800ac6e:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
  for (c_lastc = 0; c_lastc < 2; c_lastc++) {
 800ac72:	2300      	movs	r3, #0
 800ac74:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ac78:	e016      	b.n	800aca8 <qr_5a2P8Gh6+0x9e4>
    R[c_lastc + 3] = b_A[c_lastc + 3];
 800ac7a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ac7e:	3303      	adds	r3, #3
 800ac80:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800ac84:	3203      	adds	r2, #3
 800ac86:	00d2      	lsls	r2, r2, #3
 800ac88:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800ac8a:	4411      	add	r1, r2
 800ac8c:	00db      	lsls	r3, r3, #3
 800ac8e:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800ac92:	4413      	add	r3, r2
 800ac94:	3b80      	subs	r3, #128	; 0x80
 800ac96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac9a:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 0; c_lastc < 2; c_lastc++) {
 800ac9e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800aca2:	3301      	adds	r3, #1
 800aca4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800aca8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800acac:	2b01      	cmp	r3, #1
 800acae:	dde4      	ble.n	800ac7a <qr_5a2P8Gh6+0x9b6>
  }

  while (c_lastc + 1 < 4) {
 800acb0:	e010      	b.n	800acd4 <qr_5a2P8Gh6+0xa10>
    R[c_lastc + 3] = 0.0;
 800acb2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800acb6:	3303      	adds	r3, #3
 800acb8:	00db      	lsls	r3, r3, #3
 800acba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800acbc:	18d1      	adds	r1, r2, r3
 800acbe:	f04f 0200 	mov.w	r2, #0
 800acc2:	f04f 0300 	mov.w	r3, #0
 800acc6:	e9c1 2300 	strd	r2, r3, [r1]
    c_lastc++;
 800acca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800acce:	3301      	adds	r3, #1
 800acd0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  while (c_lastc + 1 < 4) {
 800acd4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800acd8:	2b02      	cmp	r3, #2
 800acda:	ddea      	ble.n	800acb2 <qr_5a2P8Gh6+0x9ee>
  }

  work[1] = 0.0;
 800acdc:	f04f 0200 	mov.w	r2, #0
 800ace0:	f04f 0300 	mov.w	r3, #0
 800ace4:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
  for (c_lastc = 0; c_lastc < 3; c_lastc++) {
 800ace8:	2300      	movs	r3, #0
 800acea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800acee:	e016      	b.n	800ad1e <qr_5a2P8Gh6+0xa5a>
    R[c_lastc + 6] = b_A[c_lastc + 6];
 800acf0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800acf4:	3306      	adds	r3, #6
 800acf6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800acfa:	3206      	adds	r2, #6
 800acfc:	00d2      	lsls	r2, r2, #3
 800acfe:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800ad00:	4411      	add	r1, r2
 800ad02:	00db      	lsls	r3, r3, #3
 800ad04:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800ad08:	4413      	add	r3, r2
 800ad0a:	3b80      	subs	r3, #128	; 0x80
 800ad0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad10:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 0; c_lastc < 3; c_lastc++) {
 800ad14:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ad18:	3301      	adds	r3, #1
 800ad1a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ad1e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ad22:	2b02      	cmp	r3, #2
 800ad24:	dde4      	ble.n	800acf0 <qr_5a2P8Gh6+0xa2c>
  }

  work[2] = 0.0;
 800ad26:	f04f 0200 	mov.w	r2, #0
 800ad2a:	f04f 0300 	mov.w	r3, #0
 800ad2e:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
  b_A[8] = 1.0;
 800ad32:	f04f 0200 	mov.w	r2, #0
 800ad36:	4bc8      	ldr	r3, [pc, #800]	; (800b058 <qr_5a2P8Gh6+0xd94>)
 800ad38:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
  for (c_lastc = 0; c_lastc < 2; c_lastc++) {
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ad42:	e014      	b.n	800ad6e <qr_5a2P8Gh6+0xaaa>
    b_A[7 - c_lastc] = 0.0;
 800ad44:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ad48:	f1c3 0307 	rsb	r3, r3, #7
 800ad4c:	00db      	lsls	r3, r3, #3
 800ad4e:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800ad52:	4413      	add	r3, r2
 800ad54:	f1a3 0180 	sub.w	r1, r3, #128	; 0x80
 800ad58:	f04f 0200 	mov.w	r2, #0
 800ad5c:	f04f 0300 	mov.w	r3, #0
 800ad60:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 0; c_lastc < 2; c_lastc++) {
 800ad64:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ad68:	3301      	adds	r3, #1
 800ad6a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ad6e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ad72:	2b01      	cmp	r3, #1
 800ad74:	dde6      	ble.n	800ad44 <qr_5a2P8Gh6+0xa80>
  }

  b_A[4] = 1.0;
 800ad76:	f04f 0200 	mov.w	r2, #0
 800ad7a:	4bb7      	ldr	r3, [pc, #732]	; (800b058 <qr_5a2P8Gh6+0xd94>)
 800ad7c:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
  if (tau_idx_1 != 0.0) {
 800ad80:	f04f 0200 	mov.w	r2, #0
 800ad84:	f04f 0300 	mov.w	r3, #0
 800ad88:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800ad8c:	f7f5 fe8e 	bl	8000aac <__aeabi_dcmpeq>
 800ad90:	4603      	mov	r3, r0
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d15c      	bne.n	800ae50 <qr_5a2P8Gh6+0xb8c>
    b_coltop = 7;
 800ad96:	2307      	movs	r3, #7
 800ad98:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    while ((c_lastc > 0) && (b_A[b_coltop - 2] == 0.0)) {
 800ad9c:	e009      	b.n	800adb2 <qr_5a2P8Gh6+0xaee>
      c_lastc--;
 800ad9e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ada2:	3b01      	subs	r3, #1
 800ada4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
      b_coltop--;
 800ada8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800adac:	3b01      	subs	r3, #1
 800adae:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    while ((c_lastc > 0) && (b_A[b_coltop - 2] == 0.0)) {
 800adb2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	dd12      	ble.n	800ade0 <qr_5a2P8Gh6+0xb1c>
 800adba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800adbe:	3b02      	subs	r3, #2
 800adc0:	00db      	lsls	r3, r3, #3
 800adc2:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800adc6:	4413      	add	r3, r2
 800adc8:	3b80      	subs	r3, #128	; 0x80
 800adca:	e9d3 0100 	ldrd	r0, r1, [r3]
 800adce:	f04f 0200 	mov.w	r2, #0
 800add2:	f04f 0300 	mov.w	r3, #0
 800add6:	f7f5 fe69 	bl	8000aac <__aeabi_dcmpeq>
 800adda:	4603      	mov	r3, r0
 800addc:	2b00      	cmp	r3, #0
 800adde:	d1de      	bne.n	800ad9e <qr_5a2P8Gh6+0xada>
    }

    b_coltop = 1;
 800ade0:	2301      	movs	r3, #1
 800ade2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    knt = 8;
 800ade6:	2308      	movs	r3, #8
 800ade8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    do {
      exitg1 = 0;
 800adec:	2300      	movs	r3, #0
 800adee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
      if (knt <= c_lastc + 7) {
 800adf2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800adf6:	3307      	adds	r3, #7
 800adf8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800adfc:	429a      	cmp	r2, r3
 800adfe:	dc1c      	bgt.n	800ae3a <qr_5a2P8Gh6+0xb76>
        if (b_A[knt - 1] != 0.0) {
 800ae00:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ae04:	3b01      	subs	r3, #1
 800ae06:	00db      	lsls	r3, r3, #3
 800ae08:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800ae0c:	4413      	add	r3, r2
 800ae0e:	3b80      	subs	r3, #128	; 0x80
 800ae10:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ae14:	f04f 0200 	mov.w	r2, #0
 800ae18:	f04f 0300 	mov.w	r3, #0
 800ae1c:	f7f5 fe46 	bl	8000aac <__aeabi_dcmpeq>
 800ae20:	4603      	mov	r3, r0
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d103      	bne.n	800ae2e <qr_5a2P8Gh6+0xb6a>
          exitg1 = 1;
 800ae26:	2301      	movs	r3, #1
 800ae28:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ae2c:	e00b      	b.n	800ae46 <qr_5a2P8Gh6+0xb82>
        } else {
          knt++;
 800ae2e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ae32:	3301      	adds	r3, #1
 800ae34:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800ae38:	e005      	b.n	800ae46 <qr_5a2P8Gh6+0xb82>
        }
      } else {
        b_coltop = 0;
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
        exitg1 = 1;
 800ae40:	2301      	movs	r3, #1
 800ae42:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
      }
    } while (exitg1 == 0);
 800ae46:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d0ce      	beq.n	800adec <qr_5a2P8Gh6+0xb28>
 800ae4e:	e005      	b.n	800ae5c <qr_5a2P8Gh6+0xb98>
  } else {
    c_lastc = 0;
 800ae50:	2300      	movs	r3, #0
 800ae52:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    b_coltop = 0;
 800ae56:	2300      	movs	r3, #0
 800ae58:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  }

  if (c_lastc > 0) {
 800ae5c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	dd29      	ble.n	800aeb8 <qr_5a2P8Gh6+0xbf4>
    xgemv_fRiR1I1O(c_lastc, b_coltop, b_A, 8, b_A, 5, work);
 800ae64:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800ae68:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ae6c:	9302      	str	r3, [sp, #8]
 800ae6e:	2305      	movs	r3, #5
 800ae70:	9301      	str	r3, [sp, #4]
 800ae72:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800ae76:	9300      	str	r3, [sp, #0]
 800ae78:	2308      	movs	r3, #8
 800ae7a:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 800ae7e:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 800ae82:	f003 fdd1 	bl	800ea28 <xgemv_fRiR1I1O>
    xgerc_tNNiazQU(c_lastc, b_coltop, -tau_idx_1, 5, work, b_A, 8);
 800ae86:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800ae8a:	61bb      	str	r3, [r7, #24]
 800ae8c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ae90:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800ae94:	61fb      	str	r3, [r7, #28]
 800ae96:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800ae9a:	2308      	movs	r3, #8
 800ae9c:	9301      	str	r3, [sp, #4]
 800ae9e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800aea2:	9300      	str	r3, [sp, #0]
 800aea4:	4613      	mov	r3, r2
 800aea6:	2205      	movs	r2, #5
 800aea8:	ed97 0b06 	vldr	d0, [r7, #24]
 800aeac:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 800aeb0:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 800aeb4:	f003 fec1 	bl	800ec3a <xgerc_tNNiazQU>
  }

  for (b_coltop = 5; b_coltop < 6; b_coltop++) {
 800aeb8:	2305      	movs	r3, #5
 800aeba:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800aebe:	e024      	b.n	800af0a <qr_5a2P8Gh6+0xc46>
    b_A[b_coltop] *= -tau_idx_1;
 800aec0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800aec4:	00db      	lsls	r3, r3, #3
 800aec6:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800aeca:	4413      	add	r3, r2
 800aecc:	3b80      	subs	r3, #128	; 0x80
 800aece:	e9d3 0100 	ldrd	r0, r1, [r3]
 800aed2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800aed6:	613b      	str	r3, [r7, #16]
 800aed8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800aedc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800aee0:	617b      	str	r3, [r7, #20]
 800aee2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800aee6:	f7f5 fb79 	bl	80005dc <__aeabi_dmul>
 800aeea:	4602      	mov	r2, r0
 800aeec:	460b      	mov	r3, r1
 800aeee:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 800aef2:	00c9      	lsls	r1, r1, #3
 800aef4:	f107 00f0 	add.w	r0, r7, #240	; 0xf0
 800aef8:	4401      	add	r1, r0
 800aefa:	3980      	subs	r1, #128	; 0x80
 800aefc:	e9c1 2300 	strd	r2, r3, [r1]
  for (b_coltop = 5; b_coltop < 6; b_coltop++) {
 800af00:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800af04:	3301      	adds	r3, #1
 800af06:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800af0a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800af0e:	2b05      	cmp	r3, #5
 800af10:	ddd6      	ble.n	800aec0 <qr_5a2P8Gh6+0xbfc>
  }

  b_A[4] = 1.0 - tau_idx_1;
 800af12:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800af16:	f04f 0000 	mov.w	r0, #0
 800af1a:	494f      	ldr	r1, [pc, #316]	; (800b058 <qr_5a2P8Gh6+0xd94>)
 800af1c:	f7f5 f9a6 	bl	800026c <__aeabi_dsub>
 800af20:	4602      	mov	r2, r0
 800af22:	460b      	mov	r3, r1
 800af24:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
  b_A[3] = 0.0;
 800af28:	f04f 0200 	mov.w	r2, #0
 800af2c:	f04f 0300 	mov.w	r3, #0
 800af30:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
  b_A[0] = 1.0;
 800af34:	f04f 0200 	mov.w	r2, #0
 800af38:	4b47      	ldr	r3, [pc, #284]	; (800b058 <qr_5a2P8Gh6+0xd94>)
 800af3a:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  if (tau_idx_0 != 0.0) {
 800af3e:	f04f 0200 	mov.w	r2, #0
 800af42:	f04f 0300 	mov.w	r3, #0
 800af46:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800af4a:	f7f5 fdaf 	bl	8000aac <__aeabi_dcmpeq>
 800af4e:	4603      	mov	r3, r0
 800af50:	2b00      	cmp	r3, #0
 800af52:	f040 8083 	bne.w	800b05c <qr_5a2P8Gh6+0xd98>
    c_lastc = 3;
 800af56:	2303      	movs	r3, #3
 800af58:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    b_coltop = 4;
 800af5c:	2304      	movs	r3, #4
 800af5e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    while ((c_lastc > 0) && (b_A[b_coltop - 2] == 0.0)) {
 800af62:	e009      	b.n	800af78 <qr_5a2P8Gh6+0xcb4>
      c_lastc--;
 800af64:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800af68:	3b01      	subs	r3, #1
 800af6a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
      b_coltop--;
 800af6e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800af72:	3b01      	subs	r3, #1
 800af74:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    while ((c_lastc > 0) && (b_A[b_coltop - 2] == 0.0)) {
 800af78:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	dd12      	ble.n	800afa6 <qr_5a2P8Gh6+0xce2>
 800af80:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800af84:	3b02      	subs	r3, #2
 800af86:	00db      	lsls	r3, r3, #3
 800af88:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800af8c:	4413      	add	r3, r2
 800af8e:	3b80      	subs	r3, #128	; 0x80
 800af90:	e9d3 0100 	ldrd	r0, r1, [r3]
 800af94:	f04f 0200 	mov.w	r2, #0
 800af98:	f04f 0300 	mov.w	r3, #0
 800af9c:	f7f5 fd86 	bl	8000aac <__aeabi_dcmpeq>
 800afa0:	4603      	mov	r3, r0
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d1de      	bne.n	800af64 <qr_5a2P8Gh6+0xca0>
    }

    b_coltop = 2;
 800afa6:	2302      	movs	r3, #2
 800afa8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    exitg2 = false;
 800afac:	2300      	movs	r3, #0
 800afae:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
    while ((!exitg2) && (b_coltop > 0)) {
 800afb2:	e048      	b.n	800b046 <qr_5a2P8Gh6+0xd82>
      coltop = (b_coltop - 1) * 3 + 4;
 800afb4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800afb8:	1e5a      	subs	r2, r3, #1
 800afba:	4613      	mov	r3, r2
 800afbc:	005b      	lsls	r3, r3, #1
 800afbe:	4413      	add	r3, r2
 800afc0:	3304      	adds	r3, #4
 800afc2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
      knt = coltop;
 800afc6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800afca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      do {
        exitg1 = 0;
 800afce:	2300      	movs	r3, #0
 800afd0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
        if (knt <= (coltop + c_lastc) - 1) {
 800afd4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800afd8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800afdc:	4413      	add	r3, r2
 800afde:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800afe2:	429a      	cmp	r2, r3
 800afe4:	da1c      	bge.n	800b020 <qr_5a2P8Gh6+0xd5c>
          if (b_A[knt - 1] != 0.0) {
 800afe6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800afea:	3b01      	subs	r3, #1
 800afec:	00db      	lsls	r3, r3, #3
 800afee:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800aff2:	4413      	add	r3, r2
 800aff4:	3b80      	subs	r3, #128	; 0x80
 800aff6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800affa:	f04f 0200 	mov.w	r2, #0
 800affe:	f04f 0300 	mov.w	r3, #0
 800b002:	f7f5 fd53 	bl	8000aac <__aeabi_dcmpeq>
 800b006:	4603      	mov	r3, r0
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d103      	bne.n	800b014 <qr_5a2P8Gh6+0xd50>
            exitg1 = 1;
 800b00c:	2301      	movs	r3, #1
 800b00e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b012:	e00d      	b.n	800b030 <qr_5a2P8Gh6+0xd6c>
          } else {
            knt++;
 800b014:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b018:	3301      	adds	r3, #1
 800b01a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b01e:	e007      	b.n	800b030 <qr_5a2P8Gh6+0xd6c>
          }
        } else {
          b_coltop--;
 800b020:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b024:	3b01      	subs	r3, #1
 800b026:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
          exitg1 = 2;
 800b02a:	2302      	movs	r3, #2
 800b02c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
        }
      } while (exitg1 == 0);
 800b030:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b034:	2b00      	cmp	r3, #0
 800b036:	d0ca      	beq.n	800afce <qr_5a2P8Gh6+0xd0a>

      if (exitg1 == 1) {
 800b038:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b03c:	2b01      	cmp	r3, #1
 800b03e:	d102      	bne.n	800b046 <qr_5a2P8Gh6+0xd82>
        exitg2 = true;
 800b040:	2301      	movs	r3, #1
 800b042:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
    while ((!exitg2) && (b_coltop > 0)) {
 800b046:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d10c      	bne.n	800b068 <qr_5a2P8Gh6+0xda4>
 800b04e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b052:	2b00      	cmp	r3, #0
 800b054:	dcae      	bgt.n	800afb4 <qr_5a2P8Gh6+0xcf0>
 800b056:	e007      	b.n	800b068 <qr_5a2P8Gh6+0xda4>
 800b058:	3ff00000 	.word	0x3ff00000
      }
    }
  } else {
    c_lastc = 0;
 800b05c:	2300      	movs	r3, #0
 800b05e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    b_coltop = 0;
 800b062:	2300      	movs	r3, #0
 800b064:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  }

  if (c_lastc > 0) {
 800b068:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	dd29      	ble.n	800b0c4 <qr_5a2P8Gh6+0xe00>
    xgemv_fRiR1I1O(c_lastc, b_coltop, b_A, 4, b_A, 1, work);
 800b070:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800b074:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b078:	9302      	str	r3, [sp, #8]
 800b07a:	2301      	movs	r3, #1
 800b07c:	9301      	str	r3, [sp, #4]
 800b07e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800b082:	9300      	str	r3, [sp, #0]
 800b084:	2304      	movs	r3, #4
 800b086:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 800b08a:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 800b08e:	f003 fccb 	bl	800ea28 <xgemv_fRiR1I1O>
    xgerc_tNNiazQU(c_lastc, b_coltop, -tau_idx_0, 1, work, b_A, 4);
 800b092:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b096:	60bb      	str	r3, [r7, #8]
 800b098:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b09c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800b0a0:	60fb      	str	r3, [r7, #12]
 800b0a2:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800b0a6:	2304      	movs	r3, #4
 800b0a8:	9301      	str	r3, [sp, #4]
 800b0aa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800b0ae:	9300      	str	r3, [sp, #0]
 800b0b0:	4613      	mov	r3, r2
 800b0b2:	2201      	movs	r2, #1
 800b0b4:	ed97 0b02 	vldr	d0, [r7, #8]
 800b0b8:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 800b0bc:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 800b0c0:	f003 fdbb 	bl	800ec3a <xgerc_tNNiazQU>
  }

  for (b_coltop = 1; b_coltop < 3; b_coltop++) {
 800b0c4:	2301      	movs	r3, #1
 800b0c6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b0ca:	e024      	b.n	800b116 <qr_5a2P8Gh6+0xe52>
    b_A[b_coltop] *= -tau_idx_0;
 800b0cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b0d0:	00db      	lsls	r3, r3, #3
 800b0d2:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800b0d6:	4413      	add	r3, r2
 800b0d8:	3b80      	subs	r3, #128	; 0x80
 800b0da:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b0de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b0e2:	603b      	str	r3, [r7, #0]
 800b0e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b0e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800b0ec:	607b      	str	r3, [r7, #4]
 800b0ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b0f2:	f7f5 fa73 	bl	80005dc <__aeabi_dmul>
 800b0f6:	4602      	mov	r2, r0
 800b0f8:	460b      	mov	r3, r1
 800b0fa:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 800b0fe:	00c9      	lsls	r1, r1, #3
 800b100:	f107 00f0 	add.w	r0, r7, #240	; 0xf0
 800b104:	4401      	add	r1, r0
 800b106:	3980      	subs	r1, #128	; 0x80
 800b108:	e9c1 2300 	strd	r2, r3, [r1]
  for (b_coltop = 1; b_coltop < 3; b_coltop++) {
 800b10c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b110:	3301      	adds	r3, #1
 800b112:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b116:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b11a:	2b02      	cmp	r3, #2
 800b11c:	ddd6      	ble.n	800b0cc <qr_5a2P8Gh6+0xe08>
  }

  b_A[0] = 1.0 - tau_idx_0;
 800b11e:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 800b122:	f04f 0000 	mov.w	r0, #0
 800b126:	492a      	ldr	r1, [pc, #168]	; (800b1d0 <qr_5a2P8Gh6+0xf0c>)
 800b128:	f7f5 f8a0 	bl	800026c <__aeabi_dsub>
 800b12c:	4602      	mov	r2, r0
 800b12e:	460b      	mov	r3, r1
 800b130:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  c_lastc = 0;
 800b134:	2300      	movs	r3, #0
 800b136:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  for (b_coltop = 0; b_coltop < 3; b_coltop++) {
 800b13a:	2300      	movs	r3, #0
 800b13c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b140:	e03d      	b.n	800b1be <qr_5a2P8Gh6+0xefa>
    Q[c_lastc] = b_A[c_lastc];
 800b142:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b146:	00db      	lsls	r3, r3, #3
 800b148:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b14a:	18d1      	adds	r1, r2, r3
 800b14c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b150:	00db      	lsls	r3, r3, #3
 800b152:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800b156:	4413      	add	r3, r2
 800b158:	3b80      	subs	r3, #128	; 0x80
 800b15a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b15e:	e9c1 2300 	strd	r2, r3, [r1]
    Q[c_lastc + 1] = b_A[c_lastc + 1];
 800b162:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b166:	3301      	adds	r3, #1
 800b168:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b16c:	3201      	adds	r2, #1
 800b16e:	00d2      	lsls	r2, r2, #3
 800b170:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b172:	4411      	add	r1, r2
 800b174:	00db      	lsls	r3, r3, #3
 800b176:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800b17a:	4413      	add	r3, r2
 800b17c:	3b80      	subs	r3, #128	; 0x80
 800b17e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b182:	e9c1 2300 	strd	r2, r3, [r1]
    Q[c_lastc + 2] = b_A[c_lastc + 2];
 800b186:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b18a:	3302      	adds	r3, #2
 800b18c:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b190:	3202      	adds	r2, #2
 800b192:	00d2      	lsls	r2, r2, #3
 800b194:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b196:	4411      	add	r1, r2
 800b198:	00db      	lsls	r3, r3, #3
 800b19a:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800b19e:	4413      	add	r3, r2
 800b1a0:	3b80      	subs	r3, #128	; 0x80
 800b1a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1a6:	e9c1 2300 	strd	r2, r3, [r1]
    c_lastc += 3;
 800b1aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b1ae:	3303      	adds	r3, #3
 800b1b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  for (b_coltop = 0; b_coltop < 3; b_coltop++) {
 800b1b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b1b8:	3301      	adds	r3, #1
 800b1ba:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b1be:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b1c2:	2b02      	cmp	r3, #2
 800b1c4:	ddbd      	ble.n	800b142 <qr_5a2P8Gh6+0xe7e>
  }
}
 800b1c6:	bf00      	nop
 800b1c8:	bf00      	nop
 800b1ca:	37f0      	adds	r7, #240	; 0xf0
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	bdb0      	pop	{r4, r5, r7, pc}
 800b1d0:	3ff00000 	.word	0x3ff00000

0800b1d4 <qr_DvOBrgQi>:
#include <math.h>
#include "xgemv_NQlWbt2i.h"
#include "xgerc_R09LiDgJ.h"

void qr_DvOBrgQi(const real_T A[18], real_T Q[18], real_T R[9])
{
 800b1d4:	b5b0      	push	{r4, r5, r7, lr}
 800b1d6:	b0da      	sub	sp, #360	; 0x168
 800b1d8:	af04      	add	r7, sp, #16
 800b1da:	66f8      	str	r0, [r7, #108]	; 0x6c
 800b1dc:	66b9      	str	r1, [r7, #104]	; 0x68
 800b1de:	667a      	str	r2, [r7, #100]	; 0x64
  int32_T c_lastc;
  int32_T coltop;
  int32_T exitg1;
  int32_T knt;
  boolean_T exitg2;
  memcpy(&b_A[0], &A[0], 18U * sizeof(real_T));
 800b1e0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800b1e4:	2290      	movs	r2, #144	; 0x90
 800b1e6:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	f00f f82f 	bl	801a24c <memcpy>
  work[0] = 0.0;
 800b1ee:	f04f 0200 	mov.w	r2, #0
 800b1f2:	f04f 0300 	mov.w	r3, #0
 800b1f6:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  work[1] = 0.0;
 800b1fa:	f04f 0200 	mov.w	r2, #0
 800b1fe:	f04f 0300 	mov.w	r3, #0
 800b202:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
  work[2] = 0.0;
 800b206:	f04f 0200 	mov.w	r2, #0
 800b20a:	f04f 0300 	mov.w	r3, #0
 800b20e:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
  atmp = b_A[0];
 800b212:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800b216:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
  tau_idx_0 = 0.0;
 800b21a:	f04f 0200 	mov.w	r2, #0
 800b21e:	f04f 0300 	mov.w	r3, #0
 800b222:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
  beta1 = xnrm2_nLdASVZH(5, b_A, 2);
 800b226:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800b22a:	2202      	movs	r2, #2
 800b22c:	4619      	mov	r1, r3
 800b22e:	2005      	movs	r0, #5
 800b230:	f003 ff90 	bl	800f154 <xnrm2_nLdASVZH>
 800b234:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
  if (beta1 != 0.0) {
 800b238:	f04f 0200 	mov.w	r2, #0
 800b23c:	f04f 0300 	mov.w	r3, #0
 800b240:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800b244:	f7f5 fc32 	bl	8000aac <__aeabi_dcmpeq>
 800b248:	4603      	mov	r3, r0
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	f040 8172 	bne.w	800b534 <qr_DvOBrgQi+0x360>
    beta1 = rt_hypotd_snf(b_A[0], beta1);
 800b250:	ed97 7b22 	vldr	d7, [r7, #136]	; 0x88
 800b254:	ed97 1b52 	vldr	d1, [r7, #328]	; 0x148
 800b258:	eeb0 0a47 	vmov.f32	s0, s14
 800b25c:	eef0 0a67 	vmov.f32	s1, s15
 800b260:	f001 fa92 	bl	800c788 <rt_hypotd_snf>
 800b264:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
    if (b_A[0] >= 0.0) {
 800b268:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800b26c:	f04f 0200 	mov.w	r2, #0
 800b270:	f04f 0300 	mov.w	r3, #0
 800b274:	f7f5 fc38 	bl	8000ae8 <__aeabi_dcmpge>
 800b278:	4603      	mov	r3, r0
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d009      	beq.n	800b292 <qr_DvOBrgQi+0xbe>
      beta1 = -beta1;
 800b27e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800b282:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800b286:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800b28a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800b28e:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    }

    if (fabs(beta1) < 1.0020841800044864E-292) {
 800b292:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 800b296:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800b29a:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800b29e:	f04f 0200 	mov.w	r2, #0
 800b2a2:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800b2a6:	4620      	mov	r0, r4
 800b2a8:	4629      	mov	r1, r5
 800b2aa:	f7f5 fc09 	bl	8000ac0 <__aeabi_dcmplt>
 800b2ae:	4603      	mov	r3, r0
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	f000 80f1 	beq.w	800b498 <qr_DvOBrgQi+0x2c4>
      knt = 0;
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
      do {
        knt++;
 800b2bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800b2c0:	3301      	adds	r3, #1
 800b2c2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        for (b_coltop = 1; b_coltop < 6; b_coltop++) {
 800b2c6:	2301      	movs	r3, #1
 800b2c8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800b2cc:	e01f      	b.n	800b30e <qr_DvOBrgQi+0x13a>
          b_A[b_coltop] *= 9.9792015476736E+291;
 800b2ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b2d2:	00db      	lsls	r3, r3, #3
 800b2d4:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800b2d8:	4413      	add	r3, r2
 800b2da:	3bd0      	subs	r3, #208	; 0xd0
 800b2dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b2e0:	f04f 0200 	mov.w	r2, #0
 800b2e4:	4bca      	ldr	r3, [pc, #808]	; (800b610 <qr_DvOBrgQi+0x43c>)
 800b2e6:	f7f5 f979 	bl	80005dc <__aeabi_dmul>
 800b2ea:	4602      	mov	r2, r0
 800b2ec:	460b      	mov	r3, r1
 800b2ee:	4610      	mov	r0, r2
 800b2f0:	4619      	mov	r1, r3
 800b2f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b2f6:	00db      	lsls	r3, r3, #3
 800b2f8:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800b2fc:	4413      	add	r3, r2
 800b2fe:	3bd0      	subs	r3, #208	; 0xd0
 800b300:	e9c3 0100 	strd	r0, r1, [r3]
        for (b_coltop = 1; b_coltop < 6; b_coltop++) {
 800b304:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b308:	3301      	adds	r3, #1
 800b30a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800b30e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b312:	2b05      	cmp	r3, #5
 800b314:	dddb      	ble.n	800b2ce <qr_DvOBrgQi+0xfa>
        }

        beta1 *= 9.9792015476736E+291;
 800b316:	f04f 0200 	mov.w	r2, #0
 800b31a:	4bbd      	ldr	r3, [pc, #756]	; (800b610 <qr_DvOBrgQi+0x43c>)
 800b31c:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800b320:	f7f5 f95c 	bl	80005dc <__aeabi_dmul>
 800b324:	4602      	mov	r2, r0
 800b326:	460b      	mov	r3, r1
 800b328:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
        atmp *= 9.9792015476736E+291;
 800b32c:	f04f 0200 	mov.w	r2, #0
 800b330:	4bb7      	ldr	r3, [pc, #732]	; (800b610 <qr_DvOBrgQi+0x43c>)
 800b332:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 800b336:	f7f5 f951 	bl	80005dc <__aeabi_dmul>
 800b33a:	4602      	mov	r2, r0
 800b33c:	460b      	mov	r3, r1
 800b33e:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      } while ((fabs(beta1) < 1.0020841800044864E-292) && (knt < 20));
 800b342:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800b346:	65bb      	str	r3, [r7, #88]	; 0x58
 800b348:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800b34c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b350:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b352:	f04f 0200 	mov.w	r2, #0
 800b356:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800b35a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800b35e:	f7f5 fbaf 	bl	8000ac0 <__aeabi_dcmplt>
 800b362:	4603      	mov	r3, r0
 800b364:	2b00      	cmp	r3, #0
 800b366:	d003      	beq.n	800b370 <qr_DvOBrgQi+0x19c>
 800b368:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800b36c:	2b13      	cmp	r3, #19
 800b36e:	dda5      	ble.n	800b2bc <qr_DvOBrgQi+0xe8>

      beta1 = rt_hypotd_snf(atmp, xnrm2_nLdASVZH(5, b_A, 2));
 800b370:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800b374:	2202      	movs	r2, #2
 800b376:	4619      	mov	r1, r3
 800b378:	2005      	movs	r0, #5
 800b37a:	f003 feeb 	bl	800f154 <xnrm2_nLdASVZH>
 800b37e:	eeb0 7a40 	vmov.f32	s14, s0
 800b382:	eef0 7a60 	vmov.f32	s15, s1
 800b386:	eeb0 1a47 	vmov.f32	s2, s14
 800b38a:	eef0 1a67 	vmov.f32	s3, s15
 800b38e:	ed97 0b54 	vldr	d0, [r7, #336]	; 0x150
 800b392:	f001 f9f9 	bl	800c788 <rt_hypotd_snf>
 800b396:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
      if (atmp >= 0.0) {
 800b39a:	f04f 0200 	mov.w	r2, #0
 800b39e:	f04f 0300 	mov.w	r3, #0
 800b3a2:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 800b3a6:	f7f5 fb9f 	bl	8000ae8 <__aeabi_dcmpge>
 800b3aa:	4603      	mov	r3, r0
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d009      	beq.n	800b3c4 <qr_DvOBrgQi+0x1f0>
        beta1 = -beta1;
 800b3b0:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800b3b4:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800b3b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800b3bc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800b3c0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
      }

      tau_idx_0 = (beta1 - atmp) / beta1;
 800b3c4:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 800b3c8:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800b3cc:	f7f4 ff4e 	bl	800026c <__aeabi_dsub>
 800b3d0:	4602      	mov	r2, r0
 800b3d2:	460b      	mov	r3, r1
 800b3d4:	4610      	mov	r0, r2
 800b3d6:	4619      	mov	r1, r3
 800b3d8:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800b3dc:	f7f5 fa28 	bl	8000830 <__aeabi_ddiv>
 800b3e0:	4602      	mov	r2, r0
 800b3e2:	460b      	mov	r3, r1
 800b3e4:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
      atmp = 1.0 / (atmp - beta1);
 800b3e8:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800b3ec:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 800b3f0:	f7f4 ff3c 	bl	800026c <__aeabi_dsub>
 800b3f4:	4602      	mov	r2, r0
 800b3f6:	460b      	mov	r3, r1
 800b3f8:	f04f 0000 	mov.w	r0, #0
 800b3fc:	4985      	ldr	r1, [pc, #532]	; (800b614 <qr_DvOBrgQi+0x440>)
 800b3fe:	f7f5 fa17 	bl	8000830 <__aeabi_ddiv>
 800b402:	4602      	mov	r2, r0
 800b404:	460b      	mov	r3, r1
 800b406:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      for (b_coltop = 1; b_coltop < 6; b_coltop++) {
 800b40a:	2301      	movs	r3, #1
 800b40c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800b410:	e01e      	b.n	800b450 <qr_DvOBrgQi+0x27c>
        b_A[b_coltop] *= atmp;
 800b412:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b416:	00db      	lsls	r3, r3, #3
 800b418:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800b41c:	4413      	add	r3, r2
 800b41e:	3bd0      	subs	r3, #208	; 0xd0
 800b420:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b424:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 800b428:	f7f5 f8d8 	bl	80005dc <__aeabi_dmul>
 800b42c:	4602      	mov	r2, r0
 800b42e:	460b      	mov	r3, r1
 800b430:	4610      	mov	r0, r2
 800b432:	4619      	mov	r1, r3
 800b434:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b438:	00db      	lsls	r3, r3, #3
 800b43a:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800b43e:	4413      	add	r3, r2
 800b440:	3bd0      	subs	r3, #208	; 0xd0
 800b442:	e9c3 0100 	strd	r0, r1, [r3]
      for (b_coltop = 1; b_coltop < 6; b_coltop++) {
 800b446:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b44a:	3301      	adds	r3, #1
 800b44c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800b450:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b454:	2b05      	cmp	r3, #5
 800b456:	dddc      	ble.n	800b412 <qr_DvOBrgQi+0x23e>
      }

      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 800b458:	2300      	movs	r3, #0
 800b45a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800b45e:	e010      	b.n	800b482 <qr_DvOBrgQi+0x2ae>
        beta1 *= 1.0020841800044864E-292;
 800b460:	f04f 0200 	mov.w	r2, #0
 800b464:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800b468:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800b46c:	f7f5 f8b6 	bl	80005dc <__aeabi_dmul>
 800b470:	4602      	mov	r2, r0
 800b472:	460b      	mov	r3, r1
 800b474:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 800b478:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b47c:	3301      	adds	r3, #1
 800b47e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800b482:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800b486:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800b48a:	429a      	cmp	r2, r3
 800b48c:	dbe8      	blt.n	800b460 <qr_DvOBrgQi+0x28c>
      }

      atmp = beta1;
 800b48e:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800b492:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
 800b496:	e04d      	b.n	800b534 <qr_DvOBrgQi+0x360>
    } else {
      tau_idx_0 = (beta1 - b_A[0]) / beta1;
 800b498:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800b49c:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800b4a0:	f7f4 fee4 	bl	800026c <__aeabi_dsub>
 800b4a4:	4602      	mov	r2, r0
 800b4a6:	460b      	mov	r3, r1
 800b4a8:	4610      	mov	r0, r2
 800b4aa:	4619      	mov	r1, r3
 800b4ac:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800b4b0:	f7f5 f9be 	bl	8000830 <__aeabi_ddiv>
 800b4b4:	4602      	mov	r2, r0
 800b4b6:	460b      	mov	r3, r1
 800b4b8:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
      atmp = 1.0 / (b_A[0] - beta1);
 800b4bc:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800b4c0:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800b4c4:	f7f4 fed2 	bl	800026c <__aeabi_dsub>
 800b4c8:	4602      	mov	r2, r0
 800b4ca:	460b      	mov	r3, r1
 800b4cc:	f04f 0000 	mov.w	r0, #0
 800b4d0:	4950      	ldr	r1, [pc, #320]	; (800b614 <qr_DvOBrgQi+0x440>)
 800b4d2:	f7f5 f9ad 	bl	8000830 <__aeabi_ddiv>
 800b4d6:	4602      	mov	r2, r0
 800b4d8:	460b      	mov	r3, r1
 800b4da:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      for (c_lastc = 1; c_lastc < 6; c_lastc++) {
 800b4de:	2301      	movs	r3, #1
 800b4e0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800b4e4:	e01e      	b.n	800b524 <qr_DvOBrgQi+0x350>
        b_A[c_lastc] *= atmp;
 800b4e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b4ea:	00db      	lsls	r3, r3, #3
 800b4ec:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800b4f0:	4413      	add	r3, r2
 800b4f2:	3bd0      	subs	r3, #208	; 0xd0
 800b4f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b4f8:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 800b4fc:	f7f5 f86e 	bl	80005dc <__aeabi_dmul>
 800b500:	4602      	mov	r2, r0
 800b502:	460b      	mov	r3, r1
 800b504:	4610      	mov	r0, r2
 800b506:	4619      	mov	r1, r3
 800b508:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b50c:	00db      	lsls	r3, r3, #3
 800b50e:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800b512:	4413      	add	r3, r2
 800b514:	3bd0      	subs	r3, #208	; 0xd0
 800b516:	e9c3 0100 	strd	r0, r1, [r3]
      for (c_lastc = 1; c_lastc < 6; c_lastc++) {
 800b51a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b51e:	3301      	adds	r3, #1
 800b520:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800b524:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b528:	2b05      	cmp	r3, #5
 800b52a:	dddc      	ble.n	800b4e6 <qr_DvOBrgQi+0x312>
      }

      atmp = beta1;
 800b52c:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800b530:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
    }
  }

  b_A[0] = 1.0;
 800b534:	f04f 0200 	mov.w	r2, #0
 800b538:	4b36      	ldr	r3, [pc, #216]	; (800b614 <qr_DvOBrgQi+0x440>)
 800b53a:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
  if (tau_idx_0 != 0.0) {
 800b53e:	f04f 0200 	mov.w	r2, #0
 800b542:	f04f 0300 	mov.w	r3, #0
 800b546:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 800b54a:	f7f5 faaf 	bl	8000aac <__aeabi_dcmpeq>
 800b54e:	4603      	mov	r3, r0
 800b550:	2b00      	cmp	r3, #0
 800b552:	f040 8083 	bne.w	800b65c <qr_DvOBrgQi+0x488>
    knt = 6;
 800b556:	2306      	movs	r3, #6
 800b558:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    c_lastc = 5;
 800b55c:	2305      	movs	r3, #5
 800b55e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    while ((knt > 0) && (b_A[c_lastc] == 0.0)) {
 800b562:	e009      	b.n	800b578 <qr_DvOBrgQi+0x3a4>
      knt--;
 800b564:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800b568:	3b01      	subs	r3, #1
 800b56a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
      c_lastc--;
 800b56e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b572:	3b01      	subs	r3, #1
 800b574:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    while ((knt > 0) && (b_A[c_lastc] == 0.0)) {
 800b578:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	dd11      	ble.n	800b5a4 <qr_DvOBrgQi+0x3d0>
 800b580:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b584:	00db      	lsls	r3, r3, #3
 800b586:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800b58a:	4413      	add	r3, r2
 800b58c:	3bd0      	subs	r3, #208	; 0xd0
 800b58e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b592:	f04f 0200 	mov.w	r2, #0
 800b596:	f04f 0300 	mov.w	r3, #0
 800b59a:	f7f5 fa87 	bl	8000aac <__aeabi_dcmpeq>
 800b59e:	4603      	mov	r3, r0
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d1df      	bne.n	800b564 <qr_DvOBrgQi+0x390>
    }

    c_lastc = 2;
 800b5a4:	2302      	movs	r3, #2
 800b5a6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    exitg2 = false;
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
    while ((!exitg2) && (c_lastc > 0)) {
 800b5b0:	e04b      	b.n	800b64a <qr_DvOBrgQi+0x476>
      b_coltop = (c_lastc - 1) * 6 + 6;
 800b5b2:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800b5b6:	4613      	mov	r3, r2
 800b5b8:	005b      	lsls	r3, r3, #1
 800b5ba:	4413      	add	r3, r2
 800b5bc:	005b      	lsls	r3, r3, #1
 800b5be:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
      coltop = b_coltop;
 800b5c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b5c6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
      do {
        exitg1 = 0;
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        if (coltop + 1 <= b_coltop + knt) {
 800b5d0:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800b5d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800b5d8:	441a      	add	r2, r3
 800b5da:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800b5de:	4293      	cmp	r3, r2
 800b5e0:	da20      	bge.n	800b624 <qr_DvOBrgQi+0x450>
          if (b_A[coltop] != 0.0) {
 800b5e2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800b5e6:	00db      	lsls	r3, r3, #3
 800b5e8:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800b5ec:	4413      	add	r3, r2
 800b5ee:	3bd0      	subs	r3, #208	; 0xd0
 800b5f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b5f4:	f04f 0200 	mov.w	r2, #0
 800b5f8:	f04f 0300 	mov.w	r3, #0
 800b5fc:	f7f5 fa56 	bl	8000aac <__aeabi_dcmpeq>
 800b600:	4603      	mov	r3, r0
 800b602:	2b00      	cmp	r3, #0
 800b604:	d108      	bne.n	800b618 <qr_DvOBrgQi+0x444>
            exitg1 = 1;
 800b606:	2301      	movs	r3, #1
 800b608:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800b60c:	e012      	b.n	800b634 <qr_DvOBrgQi+0x460>
 800b60e:	bf00      	nop
 800b610:	7c900000 	.word	0x7c900000
 800b614:	3ff00000 	.word	0x3ff00000
          } else {
            coltop++;
 800b618:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800b61c:	3301      	adds	r3, #1
 800b61e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800b622:	e007      	b.n	800b634 <qr_DvOBrgQi+0x460>
          }
        } else {
          c_lastc--;
 800b624:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b628:	3b01      	subs	r3, #1
 800b62a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
          exitg1 = 2;
 800b62e:	2302      	movs	r3, #2
 800b630:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        }
      } while (exitg1 == 0);
 800b634:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d0c6      	beq.n	800b5ca <qr_DvOBrgQi+0x3f6>

      if (exitg1 == 1) {
 800b63c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b640:	2b01      	cmp	r3, #1
 800b642:	d102      	bne.n	800b64a <qr_DvOBrgQi+0x476>
        exitg2 = true;
 800b644:	2301      	movs	r3, #1
 800b646:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
    while ((!exitg2) && (c_lastc > 0)) {
 800b64a:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d10a      	bne.n	800b668 <qr_DvOBrgQi+0x494>
 800b652:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b656:	2b00      	cmp	r3, #0
 800b658:	dcab      	bgt.n	800b5b2 <qr_DvOBrgQi+0x3de>
 800b65a:	e005      	b.n	800b668 <qr_DvOBrgQi+0x494>
      }
    }
  } else {
    knt = 0;
 800b65c:	2300      	movs	r3, #0
 800b65e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    c_lastc = 0;
 800b662:	2300      	movs	r3, #0
 800b664:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }

  if (knt > 0) {
 800b668:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	dd29      	ble.n	800b6c4 <qr_DvOBrgQi+0x4f0>
    xgemv_NQlWbt2i(knt, c_lastc, b_A, 7, b_A, 1, work);
 800b670:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800b674:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800b678:	9302      	str	r3, [sp, #8]
 800b67a:	2301      	movs	r3, #1
 800b67c:	9301      	str	r3, [sp, #4]
 800b67e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800b682:	9300      	str	r3, [sp, #0]
 800b684:	2307      	movs	r3, #7
 800b686:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 800b68a:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800b68e:	f003 f943 	bl	800e918 <xgemv_NQlWbt2i>
    xgerc_R09LiDgJ(knt, c_lastc, -tau_idx_0, 1, work, b_A, 7);
 800b692:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800b696:	653b      	str	r3, [r7, #80]	; 0x50
 800b698:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800b69c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800b6a0:	657b      	str	r3, [r7, #84]	; 0x54
 800b6a2:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800b6a6:	2307      	movs	r3, #7
 800b6a8:	9301      	str	r3, [sp, #4]
 800b6aa:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800b6ae:	9300      	str	r3, [sp, #0]
 800b6b0:	4613      	mov	r3, r2
 800b6b2:	2201      	movs	r2, #1
 800b6b4:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 800b6b8:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 800b6bc:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800b6c0:	f003 fa38 	bl	800eb34 <xgerc_R09LiDgJ>
  }

  b_A[0] = atmp;
 800b6c4:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 800b6c8:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
  atmp = b_A[7];
 800b6cc:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 800b6d0:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
  tau_idx_1 = 0.0;
 800b6d4:	f04f 0200 	mov.w	r2, #0
 800b6d8:	f04f 0300 	mov.w	r3, #0
 800b6dc:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
  beta1 = xnrm2_nLdASVZH(4, b_A, 9);
 800b6e0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800b6e4:	2209      	movs	r2, #9
 800b6e6:	4619      	mov	r1, r3
 800b6e8:	2004      	movs	r0, #4
 800b6ea:	f003 fd33 	bl	800f154 <xnrm2_nLdASVZH>
 800b6ee:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
  if (beta1 != 0.0) {
 800b6f2:	f04f 0200 	mov.w	r2, #0
 800b6f6:	f04f 0300 	mov.w	r3, #0
 800b6fa:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800b6fe:	f7f5 f9d5 	bl	8000aac <__aeabi_dcmpeq>
 800b702:	4603      	mov	r3, r0
 800b704:	2b00      	cmp	r3, #0
 800b706:	f040 8174 	bne.w	800b9f2 <qr_DvOBrgQi+0x81e>
    beta1 = rt_hypotd_snf(b_A[7], beta1);
 800b70a:	ed97 7b30 	vldr	d7, [r7, #192]	; 0xc0
 800b70e:	ed97 1b52 	vldr	d1, [r7, #328]	; 0x148
 800b712:	eeb0 0a47 	vmov.f32	s0, s14
 800b716:	eef0 0a67 	vmov.f32	s1, s15
 800b71a:	f001 f835 	bl	800c788 <rt_hypotd_snf>
 800b71e:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
    if (b_A[7] >= 0.0) {
 800b722:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800b726:	f04f 0200 	mov.w	r2, #0
 800b72a:	f04f 0300 	mov.w	r3, #0
 800b72e:	f7f5 f9db 	bl	8000ae8 <__aeabi_dcmpge>
 800b732:	4603      	mov	r3, r0
 800b734:	2b00      	cmp	r3, #0
 800b736:	d009      	beq.n	800b74c <qr_DvOBrgQi+0x578>
      beta1 = -beta1;
 800b738:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800b73c:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800b740:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800b744:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800b748:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    }

    if (fabs(beta1) < 1.0020841800044864E-292) {
 800b74c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800b750:	64bb      	str	r3, [r7, #72]	; 0x48
 800b752:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800b756:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b75a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b75c:	f04f 0200 	mov.w	r2, #0
 800b760:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800b764:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800b768:	f7f5 f9aa 	bl	8000ac0 <__aeabi_dcmplt>
 800b76c:	4603      	mov	r3, r0
 800b76e:	2b00      	cmp	r3, #0
 800b770:	f000 80f1 	beq.w	800b956 <qr_DvOBrgQi+0x782>
      knt = 0;
 800b774:	2300      	movs	r3, #0
 800b776:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
      do {
        knt++;
 800b77a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800b77e:	3301      	adds	r3, #1
 800b780:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        for (b_coltop = 8; b_coltop < 12; b_coltop++) {
 800b784:	2308      	movs	r3, #8
 800b786:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800b78a:	e01f      	b.n	800b7cc <qr_DvOBrgQi+0x5f8>
          b_A[b_coltop] *= 9.9792015476736E+291;
 800b78c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b790:	00db      	lsls	r3, r3, #3
 800b792:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800b796:	4413      	add	r3, r2
 800b798:	3bd0      	subs	r3, #208	; 0xd0
 800b79a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b79e:	f04f 0200 	mov.w	r2, #0
 800b7a2:	4bc6      	ldr	r3, [pc, #792]	; (800babc <qr_DvOBrgQi+0x8e8>)
 800b7a4:	f7f4 ff1a 	bl	80005dc <__aeabi_dmul>
 800b7a8:	4602      	mov	r2, r0
 800b7aa:	460b      	mov	r3, r1
 800b7ac:	4610      	mov	r0, r2
 800b7ae:	4619      	mov	r1, r3
 800b7b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b7b4:	00db      	lsls	r3, r3, #3
 800b7b6:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800b7ba:	4413      	add	r3, r2
 800b7bc:	3bd0      	subs	r3, #208	; 0xd0
 800b7be:	e9c3 0100 	strd	r0, r1, [r3]
        for (b_coltop = 8; b_coltop < 12; b_coltop++) {
 800b7c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b7c6:	3301      	adds	r3, #1
 800b7c8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800b7cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b7d0:	2b0b      	cmp	r3, #11
 800b7d2:	dddb      	ble.n	800b78c <qr_DvOBrgQi+0x5b8>
        }

        beta1 *= 9.9792015476736E+291;
 800b7d4:	f04f 0200 	mov.w	r2, #0
 800b7d8:	4bb8      	ldr	r3, [pc, #736]	; (800babc <qr_DvOBrgQi+0x8e8>)
 800b7da:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800b7de:	f7f4 fefd 	bl	80005dc <__aeabi_dmul>
 800b7e2:	4602      	mov	r2, r0
 800b7e4:	460b      	mov	r3, r1
 800b7e6:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
        atmp *= 9.9792015476736E+291;
 800b7ea:	f04f 0200 	mov.w	r2, #0
 800b7ee:	4bb3      	ldr	r3, [pc, #716]	; (800babc <qr_DvOBrgQi+0x8e8>)
 800b7f0:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 800b7f4:	f7f4 fef2 	bl	80005dc <__aeabi_dmul>
 800b7f8:	4602      	mov	r2, r0
 800b7fa:	460b      	mov	r3, r1
 800b7fc:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      } while ((fabs(beta1) < 1.0020841800044864E-292) && (knt < 20));
 800b800:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800b804:	643b      	str	r3, [r7, #64]	; 0x40
 800b806:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800b80a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b80e:	647b      	str	r3, [r7, #68]	; 0x44
 800b810:	f04f 0200 	mov.w	r2, #0
 800b814:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800b818:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800b81c:	f7f5 f950 	bl	8000ac0 <__aeabi_dcmplt>
 800b820:	4603      	mov	r3, r0
 800b822:	2b00      	cmp	r3, #0
 800b824:	d003      	beq.n	800b82e <qr_DvOBrgQi+0x65a>
 800b826:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800b82a:	2b13      	cmp	r3, #19
 800b82c:	dda5      	ble.n	800b77a <qr_DvOBrgQi+0x5a6>

      beta1 = rt_hypotd_snf(atmp, xnrm2_nLdASVZH(4, b_A, 9));
 800b82e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800b832:	2209      	movs	r2, #9
 800b834:	4619      	mov	r1, r3
 800b836:	2004      	movs	r0, #4
 800b838:	f003 fc8c 	bl	800f154 <xnrm2_nLdASVZH>
 800b83c:	eeb0 7a40 	vmov.f32	s14, s0
 800b840:	eef0 7a60 	vmov.f32	s15, s1
 800b844:	eeb0 1a47 	vmov.f32	s2, s14
 800b848:	eef0 1a67 	vmov.f32	s3, s15
 800b84c:	ed97 0b54 	vldr	d0, [r7, #336]	; 0x150
 800b850:	f000 ff9a 	bl	800c788 <rt_hypotd_snf>
 800b854:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
      if (atmp >= 0.0) {
 800b858:	f04f 0200 	mov.w	r2, #0
 800b85c:	f04f 0300 	mov.w	r3, #0
 800b860:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 800b864:	f7f5 f940 	bl	8000ae8 <__aeabi_dcmpge>
 800b868:	4603      	mov	r3, r0
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d009      	beq.n	800b882 <qr_DvOBrgQi+0x6ae>
        beta1 = -beta1;
 800b86e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800b872:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800b876:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800b87a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800b87e:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
      }

      tau_idx_1 = (beta1 - atmp) / beta1;
 800b882:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 800b886:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800b88a:	f7f4 fcef 	bl	800026c <__aeabi_dsub>
 800b88e:	4602      	mov	r2, r0
 800b890:	460b      	mov	r3, r1
 800b892:	4610      	mov	r0, r2
 800b894:	4619      	mov	r1, r3
 800b896:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800b89a:	f7f4 ffc9 	bl	8000830 <__aeabi_ddiv>
 800b89e:	4602      	mov	r2, r0
 800b8a0:	460b      	mov	r3, r1
 800b8a2:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
      atmp = 1.0 / (atmp - beta1);
 800b8a6:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800b8aa:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 800b8ae:	f7f4 fcdd 	bl	800026c <__aeabi_dsub>
 800b8b2:	4602      	mov	r2, r0
 800b8b4:	460b      	mov	r3, r1
 800b8b6:	f04f 0000 	mov.w	r0, #0
 800b8ba:	4981      	ldr	r1, [pc, #516]	; (800bac0 <qr_DvOBrgQi+0x8ec>)
 800b8bc:	f7f4 ffb8 	bl	8000830 <__aeabi_ddiv>
 800b8c0:	4602      	mov	r2, r0
 800b8c2:	460b      	mov	r3, r1
 800b8c4:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      for (b_coltop = 8; b_coltop < 12; b_coltop++) {
 800b8c8:	2308      	movs	r3, #8
 800b8ca:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800b8ce:	e01e      	b.n	800b90e <qr_DvOBrgQi+0x73a>
        b_A[b_coltop] *= atmp;
 800b8d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b8d4:	00db      	lsls	r3, r3, #3
 800b8d6:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800b8da:	4413      	add	r3, r2
 800b8dc:	3bd0      	subs	r3, #208	; 0xd0
 800b8de:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b8e2:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 800b8e6:	f7f4 fe79 	bl	80005dc <__aeabi_dmul>
 800b8ea:	4602      	mov	r2, r0
 800b8ec:	460b      	mov	r3, r1
 800b8ee:	4610      	mov	r0, r2
 800b8f0:	4619      	mov	r1, r3
 800b8f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b8f6:	00db      	lsls	r3, r3, #3
 800b8f8:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800b8fc:	4413      	add	r3, r2
 800b8fe:	3bd0      	subs	r3, #208	; 0xd0
 800b900:	e9c3 0100 	strd	r0, r1, [r3]
      for (b_coltop = 8; b_coltop < 12; b_coltop++) {
 800b904:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b908:	3301      	adds	r3, #1
 800b90a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800b90e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b912:	2b0b      	cmp	r3, #11
 800b914:	dddc      	ble.n	800b8d0 <qr_DvOBrgQi+0x6fc>
      }

      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 800b916:	2300      	movs	r3, #0
 800b918:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800b91c:	e010      	b.n	800b940 <qr_DvOBrgQi+0x76c>
        beta1 *= 1.0020841800044864E-292;
 800b91e:	f04f 0200 	mov.w	r2, #0
 800b922:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800b926:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800b92a:	f7f4 fe57 	bl	80005dc <__aeabi_dmul>
 800b92e:	4602      	mov	r2, r0
 800b930:	460b      	mov	r3, r1
 800b932:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 800b936:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b93a:	3301      	adds	r3, #1
 800b93c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800b940:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800b944:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800b948:	429a      	cmp	r2, r3
 800b94a:	dbe8      	blt.n	800b91e <qr_DvOBrgQi+0x74a>
      }

      atmp = beta1;
 800b94c:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800b950:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
 800b954:	e04d      	b.n	800b9f2 <qr_DvOBrgQi+0x81e>
    } else {
      tau_idx_1 = (beta1 - b_A[7]) / beta1;
 800b956:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 800b95a:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800b95e:	f7f4 fc85 	bl	800026c <__aeabi_dsub>
 800b962:	4602      	mov	r2, r0
 800b964:	460b      	mov	r3, r1
 800b966:	4610      	mov	r0, r2
 800b968:	4619      	mov	r1, r3
 800b96a:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800b96e:	f7f4 ff5f 	bl	8000830 <__aeabi_ddiv>
 800b972:	4602      	mov	r2, r0
 800b974:	460b      	mov	r3, r1
 800b976:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
      atmp = 1.0 / (b_A[7] - beta1);
 800b97a:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800b97e:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800b982:	f7f4 fc73 	bl	800026c <__aeabi_dsub>
 800b986:	4602      	mov	r2, r0
 800b988:	460b      	mov	r3, r1
 800b98a:	f04f 0000 	mov.w	r0, #0
 800b98e:	494c      	ldr	r1, [pc, #304]	; (800bac0 <qr_DvOBrgQi+0x8ec>)
 800b990:	f7f4 ff4e 	bl	8000830 <__aeabi_ddiv>
 800b994:	4602      	mov	r2, r0
 800b996:	460b      	mov	r3, r1
 800b998:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      for (c_lastc = 8; c_lastc < 12; c_lastc++) {
 800b99c:	2308      	movs	r3, #8
 800b99e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800b9a2:	e01e      	b.n	800b9e2 <qr_DvOBrgQi+0x80e>
        b_A[c_lastc] *= atmp;
 800b9a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b9a8:	00db      	lsls	r3, r3, #3
 800b9aa:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800b9ae:	4413      	add	r3, r2
 800b9b0:	3bd0      	subs	r3, #208	; 0xd0
 800b9b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b9b6:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 800b9ba:	f7f4 fe0f 	bl	80005dc <__aeabi_dmul>
 800b9be:	4602      	mov	r2, r0
 800b9c0:	460b      	mov	r3, r1
 800b9c2:	4610      	mov	r0, r2
 800b9c4:	4619      	mov	r1, r3
 800b9c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b9ca:	00db      	lsls	r3, r3, #3
 800b9cc:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800b9d0:	4413      	add	r3, r2
 800b9d2:	3bd0      	subs	r3, #208	; 0xd0
 800b9d4:	e9c3 0100 	strd	r0, r1, [r3]
      for (c_lastc = 8; c_lastc < 12; c_lastc++) {
 800b9d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b9dc:	3301      	adds	r3, #1
 800b9de:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800b9e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b9e6:	2b0b      	cmp	r3, #11
 800b9e8:	dddc      	ble.n	800b9a4 <qr_DvOBrgQi+0x7d0>
      }

      atmp = beta1;
 800b9ea:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800b9ee:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
    }
  }

  b_A[7] = 1.0;
 800b9f2:	f04f 0200 	mov.w	r2, #0
 800b9f6:	4b32      	ldr	r3, [pc, #200]	; (800bac0 <qr_DvOBrgQi+0x8ec>)
 800b9f8:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
  if (tau_idx_1 != 0.0) {
 800b9fc:	f04f 0200 	mov.w	r2, #0
 800ba00:	f04f 0300 	mov.w	r3, #0
 800ba04:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 800ba08:	f7f5 f850 	bl	8000aac <__aeabi_dcmpeq>
 800ba0c:	4603      	mov	r3, r0
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d163      	bne.n	800bada <qr_DvOBrgQi+0x906>
    knt = 5;
 800ba12:	2305      	movs	r3, #5
 800ba14:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    c_lastc = 11;
 800ba18:	230b      	movs	r3, #11
 800ba1a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    while ((knt > 0) && (b_A[c_lastc] == 0.0)) {
 800ba1e:	e009      	b.n	800ba34 <qr_DvOBrgQi+0x860>
      knt--;
 800ba20:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800ba24:	3b01      	subs	r3, #1
 800ba26:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
      c_lastc--;
 800ba2a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ba2e:	3b01      	subs	r3, #1
 800ba30:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    while ((knt > 0) && (b_A[c_lastc] == 0.0)) {
 800ba34:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	dd11      	ble.n	800ba60 <qr_DvOBrgQi+0x88c>
 800ba3c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ba40:	00db      	lsls	r3, r3, #3
 800ba42:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800ba46:	4413      	add	r3, r2
 800ba48:	3bd0      	subs	r3, #208	; 0xd0
 800ba4a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ba4e:	f04f 0200 	mov.w	r2, #0
 800ba52:	f04f 0300 	mov.w	r3, #0
 800ba56:	f7f5 f829 	bl	8000aac <__aeabi_dcmpeq>
 800ba5a:	4603      	mov	r3, r0
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d1df      	bne.n	800ba20 <qr_DvOBrgQi+0x84c>
    }

    c_lastc = 1;
 800ba60:	2301      	movs	r3, #1
 800ba62:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    coltop = 13;
 800ba66:	230d      	movs	r3, #13
 800ba68:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    do {
      exitg1 = 0;
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
      if (coltop + 1 <= knt + 13) {
 800ba72:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800ba76:	f103 020c 	add.w	r2, r3, #12
 800ba7a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800ba7e:	4293      	cmp	r3, r2
 800ba80:	dc20      	bgt.n	800bac4 <qr_DvOBrgQi+0x8f0>
        if (b_A[coltop] != 0.0) {
 800ba82:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800ba86:	00db      	lsls	r3, r3, #3
 800ba88:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800ba8c:	4413      	add	r3, r2
 800ba8e:	3bd0      	subs	r3, #208	; 0xd0
 800ba90:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ba94:	f04f 0200 	mov.w	r2, #0
 800ba98:	f04f 0300 	mov.w	r3, #0
 800ba9c:	f7f5 f806 	bl	8000aac <__aeabi_dcmpeq>
 800baa0:	4603      	mov	r3, r0
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d103      	bne.n	800baae <qr_DvOBrgQi+0x8da>
          exitg1 = 1;
 800baa6:	2301      	movs	r3, #1
 800baa8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800baac:	e010      	b.n	800bad0 <qr_DvOBrgQi+0x8fc>
        } else {
          coltop++;
 800baae:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800bab2:	3301      	adds	r3, #1
 800bab4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800bab8:	e00a      	b.n	800bad0 <qr_DvOBrgQi+0x8fc>
 800baba:	bf00      	nop
 800babc:	7c900000 	.word	0x7c900000
 800bac0:	3ff00000 	.word	0x3ff00000
        }
      } else {
        c_lastc = 0;
 800bac4:	2300      	movs	r3, #0
 800bac6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
        exitg1 = 1;
 800baca:	2301      	movs	r3, #1
 800bacc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
      }
    } while (exitg1 == 0);
 800bad0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d0c9      	beq.n	800ba6c <qr_DvOBrgQi+0x898>
 800bad8:	e005      	b.n	800bae6 <qr_DvOBrgQi+0x912>
  } else {
    knt = 0;
 800bada:	2300      	movs	r3, #0
 800badc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    c_lastc = 0;
 800bae0:	2300      	movs	r3, #0
 800bae2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }

  if (knt > 0) {
 800bae6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800baea:	2b00      	cmp	r3, #0
 800baec:	dd29      	ble.n	800bb42 <qr_DvOBrgQi+0x96e>
    xgemv_NQlWbt2i(knt, c_lastc, b_A, 14, b_A, 8, work);
 800baee:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800baf2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800baf6:	9302      	str	r3, [sp, #8]
 800baf8:	2308      	movs	r3, #8
 800bafa:	9301      	str	r3, [sp, #4]
 800bafc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800bb00:	9300      	str	r3, [sp, #0]
 800bb02:	230e      	movs	r3, #14
 800bb04:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 800bb08:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800bb0c:	f002 ff04 	bl	800e918 <xgemv_NQlWbt2i>
    xgerc_R09LiDgJ(knt, c_lastc, -tau_idx_1, 8, work, b_A, 14);
 800bb10:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800bb14:	63bb      	str	r3, [r7, #56]	; 0x38
 800bb16:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800bb1a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800bb1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bb20:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800bb24:	230e      	movs	r3, #14
 800bb26:	9301      	str	r3, [sp, #4]
 800bb28:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800bb2c:	9300      	str	r3, [sp, #0]
 800bb2e:	4613      	mov	r3, r2
 800bb30:	2208      	movs	r2, #8
 800bb32:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 800bb36:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 800bb3a:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800bb3e:	f002 fff9 	bl	800eb34 <xgerc_R09LiDgJ>
  }

  b_A[7] = atmp;
 800bb42:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 800bb46:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
  atmp = b_A[14];
 800bb4a:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 800bb4e:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
  tau_idx_2 = 0.0;
 800bb52:	f04f 0200 	mov.w	r2, #0
 800bb56:	f04f 0300 	mov.w	r3, #0
 800bb5a:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
  beta1 = xnrm2_nLdASVZH(3, b_A, 16);
 800bb5e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800bb62:	2210      	movs	r2, #16
 800bb64:	4619      	mov	r1, r3
 800bb66:	2003      	movs	r0, #3
 800bb68:	f003 faf4 	bl	800f154 <xnrm2_nLdASVZH>
 800bb6c:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
  if (beta1 != 0.0) {
 800bb70:	f04f 0200 	mov.w	r2, #0
 800bb74:	f04f 0300 	mov.w	r3, #0
 800bb78:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800bb7c:	f7f4 ff96 	bl	8000aac <__aeabi_dcmpeq>
 800bb80:	4603      	mov	r3, r0
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	f040 8170 	bne.w	800be68 <qr_DvOBrgQi+0xc94>
    beta1 = rt_hypotd_snf(b_A[14], beta1);
 800bb88:	ed97 7b3e 	vldr	d7, [r7, #248]	; 0xf8
 800bb8c:	ed97 1b52 	vldr	d1, [r7, #328]	; 0x148
 800bb90:	eeb0 0a47 	vmov.f32	s0, s14
 800bb94:	eef0 0a67 	vmov.f32	s1, s15
 800bb98:	f000 fdf6 	bl	800c788 <rt_hypotd_snf>
 800bb9c:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
    if (b_A[14] >= 0.0) {
 800bba0:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 800bba4:	f04f 0200 	mov.w	r2, #0
 800bba8:	f04f 0300 	mov.w	r3, #0
 800bbac:	f7f4 ff9c 	bl	8000ae8 <__aeabi_dcmpge>
 800bbb0:	4603      	mov	r3, r0
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d009      	beq.n	800bbca <qr_DvOBrgQi+0x9f6>
      beta1 = -beta1;
 800bbb6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800bbba:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800bbbe:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800bbc2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800bbc6:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    }

    if (fabs(beta1) < 1.0020841800044864E-292) {
 800bbca:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800bbce:	633b      	str	r3, [r7, #48]	; 0x30
 800bbd0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800bbd4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bbd8:	637b      	str	r3, [r7, #52]	; 0x34
 800bbda:	f04f 0200 	mov.w	r2, #0
 800bbde:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800bbe2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800bbe6:	f7f4 ff6b 	bl	8000ac0 <__aeabi_dcmplt>
 800bbea:	4603      	mov	r3, r0
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	f000 80ef 	beq.w	800bdd0 <qr_DvOBrgQi+0xbfc>
      knt = 0;
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
      do {
        knt++;
 800bbf8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800bbfc:	3301      	adds	r3, #1
 800bbfe:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        for (b_coltop = 15; b_coltop < 18; b_coltop++) {
 800bc02:	230f      	movs	r3, #15
 800bc04:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800bc08:	e01f      	b.n	800bc4a <qr_DvOBrgQi+0xa76>
          b_A[b_coltop] *= 9.9792015476736E+291;
 800bc0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bc0e:	00db      	lsls	r3, r3, #3
 800bc10:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800bc14:	4413      	add	r3, r2
 800bc16:	3bd0      	subs	r3, #208	; 0xd0
 800bc18:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bc1c:	f04f 0200 	mov.w	r2, #0
 800bc20:	4bb5      	ldr	r3, [pc, #724]	; (800bef8 <qr_DvOBrgQi+0xd24>)
 800bc22:	f7f4 fcdb 	bl	80005dc <__aeabi_dmul>
 800bc26:	4602      	mov	r2, r0
 800bc28:	460b      	mov	r3, r1
 800bc2a:	4610      	mov	r0, r2
 800bc2c:	4619      	mov	r1, r3
 800bc2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bc32:	00db      	lsls	r3, r3, #3
 800bc34:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800bc38:	4413      	add	r3, r2
 800bc3a:	3bd0      	subs	r3, #208	; 0xd0
 800bc3c:	e9c3 0100 	strd	r0, r1, [r3]
        for (b_coltop = 15; b_coltop < 18; b_coltop++) {
 800bc40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bc44:	3301      	adds	r3, #1
 800bc46:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800bc4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bc4e:	2b11      	cmp	r3, #17
 800bc50:	dddb      	ble.n	800bc0a <qr_DvOBrgQi+0xa36>
        }

        beta1 *= 9.9792015476736E+291;
 800bc52:	f04f 0200 	mov.w	r2, #0
 800bc56:	4ba8      	ldr	r3, [pc, #672]	; (800bef8 <qr_DvOBrgQi+0xd24>)
 800bc58:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800bc5c:	f7f4 fcbe 	bl	80005dc <__aeabi_dmul>
 800bc60:	4602      	mov	r2, r0
 800bc62:	460b      	mov	r3, r1
 800bc64:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
        atmp *= 9.9792015476736E+291;
 800bc68:	f04f 0200 	mov.w	r2, #0
 800bc6c:	4ba2      	ldr	r3, [pc, #648]	; (800bef8 <qr_DvOBrgQi+0xd24>)
 800bc6e:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 800bc72:	f7f4 fcb3 	bl	80005dc <__aeabi_dmul>
 800bc76:	4602      	mov	r2, r0
 800bc78:	460b      	mov	r3, r1
 800bc7a:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      } while ((fabs(beta1) < 1.0020841800044864E-292) && (knt < 20));
 800bc7e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800bc82:	62bb      	str	r3, [r7, #40]	; 0x28
 800bc84:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800bc88:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bc8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bc8e:	f04f 0200 	mov.w	r2, #0
 800bc92:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800bc96:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800bc9a:	f7f4 ff11 	bl	8000ac0 <__aeabi_dcmplt>
 800bc9e:	4603      	mov	r3, r0
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d003      	beq.n	800bcac <qr_DvOBrgQi+0xad8>
 800bca4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800bca8:	2b13      	cmp	r3, #19
 800bcaa:	dda5      	ble.n	800bbf8 <qr_DvOBrgQi+0xa24>

      beta1 = rt_hypotd_snf(atmp, xnrm2_nLdASVZH(3, b_A, 16));
 800bcac:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800bcb0:	2210      	movs	r2, #16
 800bcb2:	4619      	mov	r1, r3
 800bcb4:	2003      	movs	r0, #3
 800bcb6:	f003 fa4d 	bl	800f154 <xnrm2_nLdASVZH>
 800bcba:	eeb0 7a40 	vmov.f32	s14, s0
 800bcbe:	eef0 7a60 	vmov.f32	s15, s1
 800bcc2:	eeb0 1a47 	vmov.f32	s2, s14
 800bcc6:	eef0 1a67 	vmov.f32	s3, s15
 800bcca:	ed97 0b54 	vldr	d0, [r7, #336]	; 0x150
 800bcce:	f000 fd5b 	bl	800c788 <rt_hypotd_snf>
 800bcd2:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
      if (atmp >= 0.0) {
 800bcd6:	f04f 0200 	mov.w	r2, #0
 800bcda:	f04f 0300 	mov.w	r3, #0
 800bcde:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 800bce2:	f7f4 ff01 	bl	8000ae8 <__aeabi_dcmpge>
 800bce6:	4603      	mov	r3, r0
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d009      	beq.n	800bd00 <qr_DvOBrgQi+0xb2c>
        beta1 = -beta1;
 800bcec:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800bcf0:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800bcf4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800bcf8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800bcfc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
      }

      tau_idx_2 = (beta1 - atmp) / beta1;
 800bd00:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 800bd04:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800bd08:	f7f4 fab0 	bl	800026c <__aeabi_dsub>
 800bd0c:	4602      	mov	r2, r0
 800bd0e:	460b      	mov	r3, r1
 800bd10:	4610      	mov	r0, r2
 800bd12:	4619      	mov	r1, r3
 800bd14:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800bd18:	f7f4 fd8a 	bl	8000830 <__aeabi_ddiv>
 800bd1c:	4602      	mov	r2, r0
 800bd1e:	460b      	mov	r3, r1
 800bd20:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
      atmp = 1.0 / (atmp - beta1);
 800bd24:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800bd28:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 800bd2c:	f7f4 fa9e 	bl	800026c <__aeabi_dsub>
 800bd30:	4602      	mov	r2, r0
 800bd32:	460b      	mov	r3, r1
 800bd34:	f04f 0000 	mov.w	r0, #0
 800bd38:	4970      	ldr	r1, [pc, #448]	; (800befc <qr_DvOBrgQi+0xd28>)
 800bd3a:	f7f4 fd79 	bl	8000830 <__aeabi_ddiv>
 800bd3e:	4602      	mov	r2, r0
 800bd40:	460b      	mov	r3, r1
 800bd42:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      for (b_coltop = 15; b_coltop < 18; b_coltop++) {
 800bd46:	230f      	movs	r3, #15
 800bd48:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800bd4c:	e01c      	b.n	800bd88 <qr_DvOBrgQi+0xbb4>
        b_A[b_coltop] *= atmp;
 800bd4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bd52:	00db      	lsls	r3, r3, #3
 800bd54:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800bd58:	4413      	add	r3, r2
 800bd5a:	3bd0      	subs	r3, #208	; 0xd0
 800bd5c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bd60:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 800bd64:	f7f4 fc3a 	bl	80005dc <__aeabi_dmul>
 800bd68:	4602      	mov	r2, r0
 800bd6a:	460b      	mov	r3, r1
 800bd6c:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 800bd70:	00c9      	lsls	r1, r1, #3
 800bd72:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 800bd76:	4401      	add	r1, r0
 800bd78:	39d0      	subs	r1, #208	; 0xd0
 800bd7a:	e9c1 2300 	strd	r2, r3, [r1]
      for (b_coltop = 15; b_coltop < 18; b_coltop++) {
 800bd7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bd82:	3301      	adds	r3, #1
 800bd84:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800bd88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bd8c:	2b11      	cmp	r3, #17
 800bd8e:	ddde      	ble.n	800bd4e <qr_DvOBrgQi+0xb7a>
      }

      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 800bd90:	2300      	movs	r3, #0
 800bd92:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800bd96:	e010      	b.n	800bdba <qr_DvOBrgQi+0xbe6>
        beta1 *= 1.0020841800044864E-292;
 800bd98:	f04f 0200 	mov.w	r2, #0
 800bd9c:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800bda0:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800bda4:	f7f4 fc1a 	bl	80005dc <__aeabi_dmul>
 800bda8:	4602      	mov	r2, r0
 800bdaa:	460b      	mov	r3, r1
 800bdac:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 800bdb0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bdb4:	3301      	adds	r3, #1
 800bdb6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800bdba:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800bdbe:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800bdc2:	429a      	cmp	r2, r3
 800bdc4:	dbe8      	blt.n	800bd98 <qr_DvOBrgQi+0xbc4>
      }

      atmp = beta1;
 800bdc6:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800bdca:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
 800bdce:	e04b      	b.n	800be68 <qr_DvOBrgQi+0xc94>
    } else {
      tau_idx_2 = (beta1 - b_A[14]) / beta1;
 800bdd0:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 800bdd4:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800bdd8:	f7f4 fa48 	bl	800026c <__aeabi_dsub>
 800bddc:	4602      	mov	r2, r0
 800bdde:	460b      	mov	r3, r1
 800bde0:	4610      	mov	r0, r2
 800bde2:	4619      	mov	r1, r3
 800bde4:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800bde8:	f7f4 fd22 	bl	8000830 <__aeabi_ddiv>
 800bdec:	4602      	mov	r2, r0
 800bdee:	460b      	mov	r3, r1
 800bdf0:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
      atmp = 1.0 / (b_A[14] - beta1);
 800bdf4:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 800bdf8:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800bdfc:	f7f4 fa36 	bl	800026c <__aeabi_dsub>
 800be00:	4602      	mov	r2, r0
 800be02:	460b      	mov	r3, r1
 800be04:	f04f 0000 	mov.w	r0, #0
 800be08:	493c      	ldr	r1, [pc, #240]	; (800befc <qr_DvOBrgQi+0xd28>)
 800be0a:	f7f4 fd11 	bl	8000830 <__aeabi_ddiv>
 800be0e:	4602      	mov	r2, r0
 800be10:	460b      	mov	r3, r1
 800be12:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      for (c_lastc = 15; c_lastc < 18; c_lastc++) {
 800be16:	230f      	movs	r3, #15
 800be18:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800be1c:	e01c      	b.n	800be58 <qr_DvOBrgQi+0xc84>
        b_A[c_lastc] *= atmp;
 800be1e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800be22:	00db      	lsls	r3, r3, #3
 800be24:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800be28:	4413      	add	r3, r2
 800be2a:	3bd0      	subs	r3, #208	; 0xd0
 800be2c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800be30:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 800be34:	f7f4 fbd2 	bl	80005dc <__aeabi_dmul>
 800be38:	4602      	mov	r2, r0
 800be3a:	460b      	mov	r3, r1
 800be3c:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 800be40:	00c9      	lsls	r1, r1, #3
 800be42:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 800be46:	4401      	add	r1, r0
 800be48:	39d0      	subs	r1, #208	; 0xd0
 800be4a:	e9c1 2300 	strd	r2, r3, [r1]
      for (c_lastc = 15; c_lastc < 18; c_lastc++) {
 800be4e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800be52:	3301      	adds	r3, #1
 800be54:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800be58:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800be5c:	2b11      	cmp	r3, #17
 800be5e:	ddde      	ble.n	800be1e <qr_DvOBrgQi+0xc4a>
      }

      atmp = beta1;
 800be60:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800be64:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
    }
  }

  b_A[14] = atmp;
 800be68:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 800be6c:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
  R[0] = b_A[0];
 800be70:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800be74:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800be76:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 1; c_lastc + 1 < 4; c_lastc++) {
 800be7a:	2301      	movs	r3, #1
 800be7c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800be80:	e00f      	b.n	800bea2 <qr_DvOBrgQi+0xcce>
    R[c_lastc] = 0.0;
 800be82:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800be86:	00db      	lsls	r3, r3, #3
 800be88:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800be8a:	18d1      	adds	r1, r2, r3
 800be8c:	f04f 0200 	mov.w	r2, #0
 800be90:	f04f 0300 	mov.w	r3, #0
 800be94:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 1; c_lastc + 1 < 4; c_lastc++) {
 800be98:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800be9c:	3301      	adds	r3, #1
 800be9e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800bea2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bea6:	2b02      	cmp	r3, #2
 800bea8:	ddeb      	ble.n	800be82 <qr_DvOBrgQi+0xcae>
  }

  work[0] = 0.0;
 800beaa:	f04f 0200 	mov.w	r2, #0
 800beae:	f04f 0300 	mov.w	r3, #0
 800beb2:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  for (c_lastc = 0; c_lastc < 2; c_lastc++) {
 800beb6:	2300      	movs	r3, #0
 800beb8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800bebc:	e016      	b.n	800beec <qr_DvOBrgQi+0xd18>
    R[c_lastc + 3] = b_A[c_lastc + 6];
 800bebe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bec2:	3306      	adds	r3, #6
 800bec4:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800bec8:	3203      	adds	r2, #3
 800beca:	00d2      	lsls	r2, r2, #3
 800becc:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800bece:	4411      	add	r1, r2
 800bed0:	00db      	lsls	r3, r3, #3
 800bed2:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800bed6:	4413      	add	r3, r2
 800bed8:	3bd0      	subs	r3, #208	; 0xd0
 800beda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bede:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 0; c_lastc < 2; c_lastc++) {
 800bee2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bee6:	3301      	adds	r3, #1
 800bee8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800beec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bef0:	2b01      	cmp	r3, #1
 800bef2:	dde4      	ble.n	800bebe <qr_DvOBrgQi+0xcea>
  }

  while (c_lastc + 1 < 4) {
 800bef4:	e015      	b.n	800bf22 <qr_DvOBrgQi+0xd4e>
 800bef6:	bf00      	nop
 800bef8:	7c900000 	.word	0x7c900000
 800befc:	3ff00000 	.word	0x3ff00000
    R[c_lastc + 3] = 0.0;
 800bf00:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bf04:	3303      	adds	r3, #3
 800bf06:	00db      	lsls	r3, r3, #3
 800bf08:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bf0a:	18d1      	adds	r1, r2, r3
 800bf0c:	f04f 0200 	mov.w	r2, #0
 800bf10:	f04f 0300 	mov.w	r3, #0
 800bf14:	e9c1 2300 	strd	r2, r3, [r1]
    c_lastc++;
 800bf18:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bf1c:	3301      	adds	r3, #1
 800bf1e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  while (c_lastc + 1 < 4) {
 800bf22:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bf26:	2b02      	cmp	r3, #2
 800bf28:	ddea      	ble.n	800bf00 <qr_DvOBrgQi+0xd2c>
  }

  work[1] = 0.0;
 800bf2a:	f04f 0200 	mov.w	r2, #0
 800bf2e:	f04f 0300 	mov.w	r3, #0
 800bf32:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
  for (c_lastc = 0; c_lastc < 3; c_lastc++) {
 800bf36:	2300      	movs	r3, #0
 800bf38:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800bf3c:	e016      	b.n	800bf6c <qr_DvOBrgQi+0xd98>
    R[c_lastc + 6] = b_A[c_lastc + 12];
 800bf3e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bf42:	330c      	adds	r3, #12
 800bf44:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800bf48:	3206      	adds	r2, #6
 800bf4a:	00d2      	lsls	r2, r2, #3
 800bf4c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800bf4e:	4411      	add	r1, r2
 800bf50:	00db      	lsls	r3, r3, #3
 800bf52:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800bf56:	4413      	add	r3, r2
 800bf58:	3bd0      	subs	r3, #208	; 0xd0
 800bf5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf5e:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 0; c_lastc < 3; c_lastc++) {
 800bf62:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bf66:	3301      	adds	r3, #1
 800bf68:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800bf6c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bf70:	2b02      	cmp	r3, #2
 800bf72:	dde4      	ble.n	800bf3e <qr_DvOBrgQi+0xd6a>
  }

  work[2] = 0.0;
 800bf74:	f04f 0200 	mov.w	r2, #0
 800bf78:	f04f 0300 	mov.w	r3, #0
 800bf7c:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
  for (b_coltop = 15; b_coltop < 18; b_coltop++) {
 800bf80:	230f      	movs	r3, #15
 800bf82:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800bf86:	e024      	b.n	800bfd2 <qr_DvOBrgQi+0xdfe>
    b_A[b_coltop] *= -tau_idx_2;
 800bf88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bf8c:	00db      	lsls	r3, r3, #3
 800bf8e:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800bf92:	4413      	add	r3, r2
 800bf94:	3bd0      	subs	r3, #208	; 0xd0
 800bf96:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bf9a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800bf9e:	623b      	str	r3, [r7, #32]
 800bfa0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800bfa4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800bfa8:	627b      	str	r3, [r7, #36]	; 0x24
 800bfaa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800bfae:	f7f4 fb15 	bl	80005dc <__aeabi_dmul>
 800bfb2:	4602      	mov	r2, r0
 800bfb4:	460b      	mov	r3, r1
 800bfb6:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 800bfba:	00c9      	lsls	r1, r1, #3
 800bfbc:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 800bfc0:	4401      	add	r1, r0
 800bfc2:	39d0      	subs	r1, #208	; 0xd0
 800bfc4:	e9c1 2300 	strd	r2, r3, [r1]
  for (b_coltop = 15; b_coltop < 18; b_coltop++) {
 800bfc8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bfcc:	3301      	adds	r3, #1
 800bfce:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800bfd2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bfd6:	2b11      	cmp	r3, #17
 800bfd8:	ddd6      	ble.n	800bf88 <qr_DvOBrgQi+0xdb4>
  }

  b_A[14] = 1.0 - tau_idx_2;
 800bfda:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 800bfde:	f04f 0000 	mov.w	r0, #0
 800bfe2:	49cc      	ldr	r1, [pc, #816]	; (800c314 <qr_DvOBrgQi+0x1140>)
 800bfe4:	f7f4 f942 	bl	800026c <__aeabi_dsub>
 800bfe8:	4602      	mov	r2, r0
 800bfea:	460b      	mov	r3, r1
 800bfec:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
  for (c_lastc = 0; c_lastc < 2; c_lastc++) {
 800bff0:	2300      	movs	r3, #0
 800bff2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800bff6:	e014      	b.n	800c022 <qr_DvOBrgQi+0xe4e>
    b_A[13 - c_lastc] = 0.0;
 800bff8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bffc:	f1c3 030d 	rsb	r3, r3, #13
 800c000:	00db      	lsls	r3, r3, #3
 800c002:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800c006:	4413      	add	r3, r2
 800c008:	f1a3 01d0 	sub.w	r1, r3, #208	; 0xd0
 800c00c:	f04f 0200 	mov.w	r2, #0
 800c010:	f04f 0300 	mov.w	r3, #0
 800c014:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 0; c_lastc < 2; c_lastc++) {
 800c018:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c01c:	3301      	adds	r3, #1
 800c01e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800c022:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c026:	2b01      	cmp	r3, #1
 800c028:	dde6      	ble.n	800bff8 <qr_DvOBrgQi+0xe24>
  }

  b_A[7] = 1.0;
 800c02a:	f04f 0200 	mov.w	r2, #0
 800c02e:	4bb9      	ldr	r3, [pc, #740]	; (800c314 <qr_DvOBrgQi+0x1140>)
 800c030:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
  if (tau_idx_1 != 0.0) {
 800c034:	f04f 0200 	mov.w	r2, #0
 800c038:	f04f 0300 	mov.w	r3, #0
 800c03c:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 800c040:	f7f4 fd34 	bl	8000aac <__aeabi_dcmpeq>
 800c044:	4603      	mov	r3, r0
 800c046:	2b00      	cmp	r3, #0
 800c048:	d15f      	bne.n	800c10a <qr_DvOBrgQi+0xf36>
    c_lastc = 5;
 800c04a:	2305      	movs	r3, #5
 800c04c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    b_coltop = 13;
 800c050:	230d      	movs	r3, #13
 800c052:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    while ((c_lastc > 0) && (b_A[b_coltop - 2] == 0.0)) {
 800c056:	e009      	b.n	800c06c <qr_DvOBrgQi+0xe98>
      c_lastc--;
 800c058:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c05c:	3b01      	subs	r3, #1
 800c05e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
      b_coltop--;
 800c062:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c066:	3b01      	subs	r3, #1
 800c068:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    while ((c_lastc > 0) && (b_A[b_coltop - 2] == 0.0)) {
 800c06c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c070:	2b00      	cmp	r3, #0
 800c072:	dd12      	ble.n	800c09a <qr_DvOBrgQi+0xec6>
 800c074:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c078:	3b02      	subs	r3, #2
 800c07a:	00db      	lsls	r3, r3, #3
 800c07c:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800c080:	4413      	add	r3, r2
 800c082:	3bd0      	subs	r3, #208	; 0xd0
 800c084:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c088:	f04f 0200 	mov.w	r2, #0
 800c08c:	f04f 0300 	mov.w	r3, #0
 800c090:	f7f4 fd0c 	bl	8000aac <__aeabi_dcmpeq>
 800c094:	4603      	mov	r3, r0
 800c096:	2b00      	cmp	r3, #0
 800c098:	d1de      	bne.n	800c058 <qr_DvOBrgQi+0xe84>
    }

    b_coltop = 1;
 800c09a:	2301      	movs	r3, #1
 800c09c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    knt = 14;
 800c0a0:	230e      	movs	r3, #14
 800c0a2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    do {
      exitg1 = 0;
 800c0a6:	2300      	movs	r3, #0
 800c0a8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
      if (knt <= c_lastc + 13) {
 800c0ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c0b0:	330d      	adds	r3, #13
 800c0b2:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800c0b6:	429a      	cmp	r2, r3
 800c0b8:	dc1c      	bgt.n	800c0f4 <qr_DvOBrgQi+0xf20>
        if (b_A[knt - 1] != 0.0) {
 800c0ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800c0be:	3b01      	subs	r3, #1
 800c0c0:	00db      	lsls	r3, r3, #3
 800c0c2:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800c0c6:	4413      	add	r3, r2
 800c0c8:	3bd0      	subs	r3, #208	; 0xd0
 800c0ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c0ce:	f04f 0200 	mov.w	r2, #0
 800c0d2:	f04f 0300 	mov.w	r3, #0
 800c0d6:	f7f4 fce9 	bl	8000aac <__aeabi_dcmpeq>
 800c0da:	4603      	mov	r3, r0
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d103      	bne.n	800c0e8 <qr_DvOBrgQi+0xf14>
          exitg1 = 1;
 800c0e0:	2301      	movs	r3, #1
 800c0e2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800c0e6:	e00b      	b.n	800c100 <qr_DvOBrgQi+0xf2c>
        } else {
          knt++;
 800c0e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800c0ec:	3301      	adds	r3, #1
 800c0ee:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800c0f2:	e005      	b.n	800c100 <qr_DvOBrgQi+0xf2c>
        }
      } else {
        b_coltop = 0;
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        exitg1 = 1;
 800c0fa:	2301      	movs	r3, #1
 800c0fc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
      }
    } while (exitg1 == 0);
 800c100:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800c104:	2b00      	cmp	r3, #0
 800c106:	d0ce      	beq.n	800c0a6 <qr_DvOBrgQi+0xed2>
 800c108:	e005      	b.n	800c116 <qr_DvOBrgQi+0xf42>
  } else {
    c_lastc = 0;
 800c10a:	2300      	movs	r3, #0
 800c10c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    b_coltop = 0;
 800c110:	2300      	movs	r3, #0
 800c112:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  }

  if (c_lastc > 0) {
 800c116:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	dd29      	ble.n	800c172 <qr_DvOBrgQi+0xf9e>
    xgemv_NQlWbt2i(c_lastc, b_coltop, b_A, 14, b_A, 8, work);
 800c11e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800c122:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800c126:	9302      	str	r3, [sp, #8]
 800c128:	2308      	movs	r3, #8
 800c12a:	9301      	str	r3, [sp, #4]
 800c12c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800c130:	9300      	str	r3, [sp, #0]
 800c132:	230e      	movs	r3, #14
 800c134:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 800c138:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 800c13c:	f002 fbec 	bl	800e918 <xgemv_NQlWbt2i>
    xgerc_R09LiDgJ(c_lastc, b_coltop, -tau_idx_1, 8, work, b_A, 14);
 800c140:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800c144:	61bb      	str	r3, [r7, #24]
 800c146:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800c14a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800c14e:	61fb      	str	r3, [r7, #28]
 800c150:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800c154:	230e      	movs	r3, #14
 800c156:	9301      	str	r3, [sp, #4]
 800c158:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800c15c:	9300      	str	r3, [sp, #0]
 800c15e:	4613      	mov	r3, r2
 800c160:	2208      	movs	r2, #8
 800c162:	ed97 0b06 	vldr	d0, [r7, #24]
 800c166:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 800c16a:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 800c16e:	f002 fce1 	bl	800eb34 <xgerc_R09LiDgJ>
  }

  for (b_coltop = 8; b_coltop < 12; b_coltop++) {
 800c172:	2308      	movs	r3, #8
 800c174:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800c178:	e024      	b.n	800c1c4 <qr_DvOBrgQi+0xff0>
    b_A[b_coltop] *= -tau_idx_1;
 800c17a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c17e:	00db      	lsls	r3, r3, #3
 800c180:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800c184:	4413      	add	r3, r2
 800c186:	3bd0      	subs	r3, #208	; 0xd0
 800c188:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c18c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800c190:	613b      	str	r3, [r7, #16]
 800c192:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800c196:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800c19a:	617b      	str	r3, [r7, #20]
 800c19c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800c1a0:	f7f4 fa1c 	bl	80005dc <__aeabi_dmul>
 800c1a4:	4602      	mov	r2, r0
 800c1a6:	460b      	mov	r3, r1
 800c1a8:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 800c1ac:	00c9      	lsls	r1, r1, #3
 800c1ae:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 800c1b2:	4401      	add	r1, r0
 800c1b4:	39d0      	subs	r1, #208	; 0xd0
 800c1b6:	e9c1 2300 	strd	r2, r3, [r1]
  for (b_coltop = 8; b_coltop < 12; b_coltop++) {
 800c1ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c1be:	3301      	adds	r3, #1
 800c1c0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800c1c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c1c8:	2b0b      	cmp	r3, #11
 800c1ca:	ddd6      	ble.n	800c17a <qr_DvOBrgQi+0xfa6>
  }

  b_A[7] = 1.0 - tau_idx_1;
 800c1cc:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800c1d0:	f04f 0000 	mov.w	r0, #0
 800c1d4:	494f      	ldr	r1, [pc, #316]	; (800c314 <qr_DvOBrgQi+0x1140>)
 800c1d6:	f7f4 f849 	bl	800026c <__aeabi_dsub>
 800c1da:	4602      	mov	r2, r0
 800c1dc:	460b      	mov	r3, r1
 800c1de:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
  b_A[6] = 0.0;
 800c1e2:	f04f 0200 	mov.w	r2, #0
 800c1e6:	f04f 0300 	mov.w	r3, #0
 800c1ea:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
  b_A[0] = 1.0;
 800c1ee:	f04f 0200 	mov.w	r2, #0
 800c1f2:	4b48      	ldr	r3, [pc, #288]	; (800c314 <qr_DvOBrgQi+0x1140>)
 800c1f4:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
  if (tau_idx_0 != 0.0) {
 800c1f8:	f04f 0200 	mov.w	r2, #0
 800c1fc:	f04f 0300 	mov.w	r3, #0
 800c200:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 800c204:	f7f4 fc52 	bl	8000aac <__aeabi_dcmpeq>
 800c208:	4603      	mov	r3, r0
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	f040 8084 	bne.w	800c318 <qr_DvOBrgQi+0x1144>
    c_lastc = 6;
 800c210:	2306      	movs	r3, #6
 800c212:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    b_coltop = 7;
 800c216:	2307      	movs	r3, #7
 800c218:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    while ((c_lastc > 0) && (b_A[b_coltop - 2] == 0.0)) {
 800c21c:	e009      	b.n	800c232 <qr_DvOBrgQi+0x105e>
      c_lastc--;
 800c21e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c222:	3b01      	subs	r3, #1
 800c224:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
      b_coltop--;
 800c228:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c22c:	3b01      	subs	r3, #1
 800c22e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    while ((c_lastc > 0) && (b_A[b_coltop - 2] == 0.0)) {
 800c232:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c236:	2b00      	cmp	r3, #0
 800c238:	dd12      	ble.n	800c260 <qr_DvOBrgQi+0x108c>
 800c23a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c23e:	3b02      	subs	r3, #2
 800c240:	00db      	lsls	r3, r3, #3
 800c242:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800c246:	4413      	add	r3, r2
 800c248:	3bd0      	subs	r3, #208	; 0xd0
 800c24a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c24e:	f04f 0200 	mov.w	r2, #0
 800c252:	f04f 0300 	mov.w	r3, #0
 800c256:	f7f4 fc29 	bl	8000aac <__aeabi_dcmpeq>
 800c25a:	4603      	mov	r3, r0
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d1de      	bne.n	800c21e <qr_DvOBrgQi+0x104a>
    }

    b_coltop = 2;
 800c260:	2302      	movs	r3, #2
 800c262:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    exitg2 = false;
 800c266:	2300      	movs	r3, #0
 800c268:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
    while ((!exitg2) && (b_coltop > 0)) {
 800c26c:	e049      	b.n	800c302 <qr_DvOBrgQi+0x112e>
      coltop = (b_coltop - 1) * 6 + 7;
 800c26e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c272:	1e5a      	subs	r2, r3, #1
 800c274:	4613      	mov	r3, r2
 800c276:	005b      	lsls	r3, r3, #1
 800c278:	4413      	add	r3, r2
 800c27a:	005b      	lsls	r3, r3, #1
 800c27c:	3307      	adds	r3, #7
 800c27e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
      knt = coltop;
 800c282:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800c286:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
      do {
        exitg1 = 0;
 800c28a:	2300      	movs	r3, #0
 800c28c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        if (knt <= (coltop + c_lastc) - 1) {
 800c290:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800c294:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c298:	4413      	add	r3, r2
 800c29a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800c29e:	429a      	cmp	r2, r3
 800c2a0:	da1c      	bge.n	800c2dc <qr_DvOBrgQi+0x1108>
          if (b_A[knt - 1] != 0.0) {
 800c2a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800c2a6:	3b01      	subs	r3, #1
 800c2a8:	00db      	lsls	r3, r3, #3
 800c2aa:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800c2ae:	4413      	add	r3, r2
 800c2b0:	3bd0      	subs	r3, #208	; 0xd0
 800c2b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c2b6:	f04f 0200 	mov.w	r2, #0
 800c2ba:	f04f 0300 	mov.w	r3, #0
 800c2be:	f7f4 fbf5 	bl	8000aac <__aeabi_dcmpeq>
 800c2c2:	4603      	mov	r3, r0
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d103      	bne.n	800c2d0 <qr_DvOBrgQi+0x10fc>
            exitg1 = 1;
 800c2c8:	2301      	movs	r3, #1
 800c2ca:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800c2ce:	e00d      	b.n	800c2ec <qr_DvOBrgQi+0x1118>
          } else {
            knt++;
 800c2d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800c2d4:	3301      	adds	r3, #1
 800c2d6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800c2da:	e007      	b.n	800c2ec <qr_DvOBrgQi+0x1118>
          }
        } else {
          b_coltop--;
 800c2dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c2e0:	3b01      	subs	r3, #1
 800c2e2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          exitg1 = 2;
 800c2e6:	2302      	movs	r3, #2
 800c2e8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        }
      } while (exitg1 == 0);
 800c2ec:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d0ca      	beq.n	800c28a <qr_DvOBrgQi+0x10b6>

      if (exitg1 == 1) {
 800c2f4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800c2f8:	2b01      	cmp	r3, #1
 800c2fa:	d102      	bne.n	800c302 <qr_DvOBrgQi+0x112e>
        exitg2 = true;
 800c2fc:	2301      	movs	r3, #1
 800c2fe:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
    while ((!exitg2) && (b_coltop > 0)) {
 800c302:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800c306:	2b00      	cmp	r3, #0
 800c308:	d10c      	bne.n	800c324 <qr_DvOBrgQi+0x1150>
 800c30a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c30e:	2b00      	cmp	r3, #0
 800c310:	dcad      	bgt.n	800c26e <qr_DvOBrgQi+0x109a>
 800c312:	e007      	b.n	800c324 <qr_DvOBrgQi+0x1150>
 800c314:	3ff00000 	.word	0x3ff00000
      }
    }
  } else {
    c_lastc = 0;
 800c318:	2300      	movs	r3, #0
 800c31a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    b_coltop = 0;
 800c31e:	2300      	movs	r3, #0
 800c320:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  }

  if (c_lastc > 0) {
 800c324:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c328:	2b00      	cmp	r3, #0
 800c32a:	dd29      	ble.n	800c380 <qr_DvOBrgQi+0x11ac>
    xgemv_NQlWbt2i(c_lastc, b_coltop, b_A, 7, b_A, 1, work);
 800c32c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800c330:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800c334:	9302      	str	r3, [sp, #8]
 800c336:	2301      	movs	r3, #1
 800c338:	9301      	str	r3, [sp, #4]
 800c33a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800c33e:	9300      	str	r3, [sp, #0]
 800c340:	2307      	movs	r3, #7
 800c342:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 800c346:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 800c34a:	f002 fae5 	bl	800e918 <xgemv_NQlWbt2i>
    xgerc_R09LiDgJ(c_lastc, b_coltop, -tau_idx_0, 1, work, b_A, 7);
 800c34e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800c352:	60bb      	str	r3, [r7, #8]
 800c354:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800c358:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800c35c:	60fb      	str	r3, [r7, #12]
 800c35e:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800c362:	2307      	movs	r3, #7
 800c364:	9301      	str	r3, [sp, #4]
 800c366:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800c36a:	9300      	str	r3, [sp, #0]
 800c36c:	4613      	mov	r3, r2
 800c36e:	2201      	movs	r2, #1
 800c370:	ed97 0b02 	vldr	d0, [r7, #8]
 800c374:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 800c378:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 800c37c:	f002 fbda 	bl	800eb34 <xgerc_R09LiDgJ>
  }

  for (b_coltop = 1; b_coltop < 6; b_coltop++) {
 800c380:	2301      	movs	r3, #1
 800c382:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800c386:	e024      	b.n	800c3d2 <qr_DvOBrgQi+0x11fe>
    b_A[b_coltop] *= -tau_idx_0;
 800c388:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c38c:	00db      	lsls	r3, r3, #3
 800c38e:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800c392:	4413      	add	r3, r2
 800c394:	3bd0      	subs	r3, #208	; 0xd0
 800c396:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c39a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800c39e:	603b      	str	r3, [r7, #0]
 800c3a0:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800c3a4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800c3a8:	607b      	str	r3, [r7, #4]
 800c3aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c3ae:	f7f4 f915 	bl	80005dc <__aeabi_dmul>
 800c3b2:	4602      	mov	r2, r0
 800c3b4:	460b      	mov	r3, r1
 800c3b6:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 800c3ba:	00c9      	lsls	r1, r1, #3
 800c3bc:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 800c3c0:	4401      	add	r1, r0
 800c3c2:	39d0      	subs	r1, #208	; 0xd0
 800c3c4:	e9c1 2300 	strd	r2, r3, [r1]
  for (b_coltop = 1; b_coltop < 6; b_coltop++) {
 800c3c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c3cc:	3301      	adds	r3, #1
 800c3ce:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800c3d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c3d6:	2b05      	cmp	r3, #5
 800c3d8:	ddd6      	ble.n	800c388 <qr_DvOBrgQi+0x11b4>
  }

  b_A[0] = 1.0 - tau_idx_0;
 800c3da:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 800c3de:	f04f 0000 	mov.w	r0, #0
 800c3e2:	4923      	ldr	r1, [pc, #140]	; (800c470 <qr_DvOBrgQi+0x129c>)
 800c3e4:	f7f3 ff42 	bl	800026c <__aeabi_dsub>
 800c3e8:	4602      	mov	r2, r0
 800c3ea:	460b      	mov	r3, r1
 800c3ec:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
  b_coltop = 0;
 800c3f0:	2300      	movs	r3, #0
 800c3f2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  for (coltop = 0; coltop < 3; coltop++) {
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800c3fc:	e02d      	b.n	800c45a <qr_DvOBrgQi+0x1286>
    for (c_lastc = 0; c_lastc < 6; c_lastc++) {
 800c3fe:	2300      	movs	r3, #0
 800c400:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800c404:	e01b      	b.n	800c43e <qr_DvOBrgQi+0x126a>
      knt = c_lastc + b_coltop;
 800c406:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800c40a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c40e:	4413      	add	r3, r2
 800c410:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
      Q[knt] = b_A[knt];
 800c414:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800c418:	00db      	lsls	r3, r3, #3
 800c41a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c41c:	18d1      	adds	r1, r2, r3
 800c41e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800c422:	00db      	lsls	r3, r3, #3
 800c424:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800c428:	4413      	add	r3, r2
 800c42a:	3bd0      	subs	r3, #208	; 0xd0
 800c42c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c430:	e9c1 2300 	strd	r2, r3, [r1]
    for (c_lastc = 0; c_lastc < 6; c_lastc++) {
 800c434:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c438:	3301      	adds	r3, #1
 800c43a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800c43e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c442:	2b05      	cmp	r3, #5
 800c444:	dddf      	ble.n	800c406 <qr_DvOBrgQi+0x1232>
    }

    b_coltop += 6;
 800c446:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c44a:	3306      	adds	r3, #6
 800c44c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  for (coltop = 0; coltop < 3; coltop++) {
 800c450:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800c454:	3301      	adds	r3, #1
 800c456:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800c45a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800c45e:	2b02      	cmp	r3, #2
 800c460:	ddcd      	ble.n	800c3fe <qr_DvOBrgQi+0x122a>
  }
}
 800c462:	bf00      	nop
 800c464:	bf00      	nop
 800c466:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 800c46a:	46bd      	mov	sp, r7
 800c46c:	bdb0      	pop	{r4, r5, r7, pc}
 800c46e:	bf00      	nop
 800c470:	3ff00000 	.word	0x3ff00000

0800c474 <rotate_LZ7ctbe0>:
#include "rotate_LZ7ctbe0.h"
#include <math.h>
#include "rt_hypotd_snf.h"

void rotate_LZ7ctbe0(real_T x, real_T y, real_T *c, real_T *s, real_T *r)
{
 800c474:	b5b0      	push	{r4, r5, r7, lr}
 800c476:	b092      	sub	sp, #72	; 0x48
 800c478:	af00      	add	r7, sp, #0
 800c47a:	ed87 0b06 	vstr	d0, [r7, #24]
 800c47e:	ed87 1b04 	vstr	d1, [r7, #16]
 800c482:	60f8      	str	r0, [r7, #12]
 800c484:	60b9      	str	r1, [r7, #8]
 800c486:	607a      	str	r2, [r7, #4]
  real_T absx;
  real_T absy;
  absx = fabs(x);
 800c488:	69bb      	ldr	r3, [r7, #24]
 800c48a:	643b      	str	r3, [r7, #64]	; 0x40
 800c48c:	69fb      	ldr	r3, [r7, #28]
 800c48e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c492:	647b      	str	r3, [r7, #68]	; 0x44
  absy = fabs(y);
 800c494:	693b      	ldr	r3, [r7, #16]
 800c496:	63bb      	str	r3, [r7, #56]	; 0x38
 800c498:	697b      	ldr	r3, [r7, #20]
 800c49a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c49e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (absy == 0.0) {
 800c4a0:	f04f 0200 	mov.w	r2, #0
 800c4a4:	f04f 0300 	mov.w	r3, #0
 800c4a8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800c4ac:	f7f4 fafe 	bl	8000aac <__aeabi_dcmpeq>
 800c4b0:	4603      	mov	r3, r0
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d012      	beq.n	800c4dc <rotate_LZ7ctbe0+0x68>
    *c = 1.0;
 800c4b6:	68f9      	ldr	r1, [r7, #12]
 800c4b8:	f04f 0200 	mov.w	r2, #0
 800c4bc:	4b4e      	ldr	r3, [pc, #312]	; (800c5f8 <rotate_LZ7ctbe0+0x184>)
 800c4be:	e9c1 2300 	strd	r2, r3, [r1]
    *s = 0.0;
 800c4c2:	68b9      	ldr	r1, [r7, #8]
 800c4c4:	f04f 0200 	mov.w	r2, #0
 800c4c8:	f04f 0300 	mov.w	r3, #0
 800c4cc:	e9c1 2300 	strd	r2, r3, [r1]
    *r = x;
 800c4d0:	6879      	ldr	r1, [r7, #4]
 800c4d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c4d6:	e9c1 2300 	strd	r2, r3, [r1]
    *c = absx / rho;
    xx /= absx;
    *s = xx * yy / rho;
    *r = rho * absy * xx;
  }
}
 800c4da:	e088      	b.n	800c5ee <rotate_LZ7ctbe0+0x17a>
  } else if (absx == 0.0) {
 800c4dc:	f04f 0200 	mov.w	r2, #0
 800c4e0:	f04f 0300 	mov.w	r3, #0
 800c4e4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800c4e8:	f7f4 fae0 	bl	8000aac <__aeabi_dcmpeq>
 800c4ec:	4603      	mov	r3, r0
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d012      	beq.n	800c518 <rotate_LZ7ctbe0+0xa4>
    *c = 0.0;
 800c4f2:	68f9      	ldr	r1, [r7, #12]
 800c4f4:	f04f 0200 	mov.w	r2, #0
 800c4f8:	f04f 0300 	mov.w	r3, #0
 800c4fc:	e9c1 2300 	strd	r2, r3, [r1]
    *s = 1.0;
 800c500:	68b9      	ldr	r1, [r7, #8]
 800c502:	f04f 0200 	mov.w	r2, #0
 800c506:	4b3c      	ldr	r3, [pc, #240]	; (800c5f8 <rotate_LZ7ctbe0+0x184>)
 800c508:	e9c1 2300 	strd	r2, r3, [r1]
    *r = y;
 800c50c:	6879      	ldr	r1, [r7, #4]
 800c50e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800c512:	e9c1 2300 	strd	r2, r3, [r1]
}
 800c516:	e06a      	b.n	800c5ee <rotate_LZ7ctbe0+0x17a>
    absy += absx;
 800c518:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800c51c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800c520:	f7f3 fea6 	bl	8000270 <__adddf3>
 800c524:	4602      	mov	r2, r0
 800c526:	460b      	mov	r3, r1
 800c528:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xx = x / absy;
 800c52c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800c530:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800c534:	f7f4 f97c 	bl	8000830 <__aeabi_ddiv>
 800c538:	4602      	mov	r2, r0
 800c53a:	460b      	mov	r3, r1
 800c53c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    yy = y / absy;
 800c540:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800c544:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800c548:	f7f4 f972 	bl	8000830 <__aeabi_ddiv>
 800c54c:	4602      	mov	r2, r0
 800c54e:	460b      	mov	r3, r1
 800c550:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    absx = fabs(xx);
 800c554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c556:	643b      	str	r3, [r7, #64]	; 0x40
 800c558:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c55a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c55e:	647b      	str	r3, [r7, #68]	; 0x44
    rho = rt_hypotd_snf(absx, fabs(yy));
 800c560:	6abc      	ldr	r4, [r7, #40]	; 0x28
 800c562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c564:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800c568:	ec45 4b11 	vmov	d1, r4, r5
 800c56c:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 800c570:	f000 f90a 	bl	800c788 <rt_hypotd_snf>
 800c574:	ed87 0b08 	vstr	d0, [r7, #32]
    *c = absx / rho;
 800c578:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c57c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800c580:	f7f4 f956 	bl	8000830 <__aeabi_ddiv>
 800c584:	4602      	mov	r2, r0
 800c586:	460b      	mov	r3, r1
 800c588:	68f9      	ldr	r1, [r7, #12]
 800c58a:	e9c1 2300 	strd	r2, r3, [r1]
    xx /= absx;
 800c58e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800c592:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800c596:	f7f4 f94b 	bl	8000830 <__aeabi_ddiv>
 800c59a:	4602      	mov	r2, r0
 800c59c:	460b      	mov	r3, r1
 800c59e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    *s = xx * yy / rho;
 800c5a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800c5a6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800c5aa:	f7f4 f817 	bl	80005dc <__aeabi_dmul>
 800c5ae:	4602      	mov	r2, r0
 800c5b0:	460b      	mov	r3, r1
 800c5b2:	4610      	mov	r0, r2
 800c5b4:	4619      	mov	r1, r3
 800c5b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c5ba:	f7f4 f939 	bl	8000830 <__aeabi_ddiv>
 800c5be:	4602      	mov	r2, r0
 800c5c0:	460b      	mov	r3, r1
 800c5c2:	68b9      	ldr	r1, [r7, #8]
 800c5c4:	e9c1 2300 	strd	r2, r3, [r1]
    *r = rho * absy * xx;
 800c5c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800c5cc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800c5d0:	f7f4 f804 	bl	80005dc <__aeabi_dmul>
 800c5d4:	4602      	mov	r2, r0
 800c5d6:	460b      	mov	r3, r1
 800c5d8:	4610      	mov	r0, r2
 800c5da:	4619      	mov	r1, r3
 800c5dc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800c5e0:	f7f3 fffc 	bl	80005dc <__aeabi_dmul>
 800c5e4:	4602      	mov	r2, r0
 800c5e6:	460b      	mov	r3, r1
 800c5e8:	6879      	ldr	r1, [r7, #4]
 800c5ea:	e9c1 2300 	strd	r2, r3, [r1]
}
 800c5ee:	bf00      	nop
 800c5f0:	3748      	adds	r7, #72	; 0x48
 800c5f2:	46bd      	mov	sp, r7
 800c5f4:	bdb0      	pop	{r4, r5, r7, pc}
 800c5f6:	bf00      	nop
 800c5f8:	3ff00000 	.word	0x3ff00000

0800c5fc <rtGetInf>:
#include <stddef.h>
#include "rt_nonfinite.h"
#define NumBitsPerChar                 8U

real_T rtGetInf(void)
{
 800c5fc:	b580      	push	{r7, lr}
 800c5fe:	b086      	sub	sp, #24
 800c600:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 800c602:	2340      	movs	r3, #64	; 0x40
 800c604:	60fb      	str	r3, [r7, #12]
  real_T inf = 0.0;
 800c606:	f04f 0200 	mov.w	r2, #0
 800c60a:	f04f 0300 	mov.w	r3, #0
 800c60e:	e9c7 2304 	strd	r2, r3, [r7, #16]
  if (bitsPerReal == 32U) {
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	2b20      	cmp	r3, #32
 800c616:	d10b      	bne.n	800c630 <rtGetInf+0x34>
    inf = rtGetInfF();
 800c618:	f000 f820 	bl	800c65c <rtGetInfF>
 800c61c:	ee10 3a10 	vmov	r3, s0
 800c620:	4618      	mov	r0, r3
 800c622:	f7f3 ff83 	bl	800052c <__aeabi_f2d>
 800c626:	4602      	mov	r2, r0
 800c628:	460b      	mov	r3, r1
 800c62a:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800c62e:	e007      	b.n	800c640 <rtGetInf+0x44>
    union {
      LittleEndianIEEEDouble bitVal;
      real_T fltVal;
    } tmpVal;

    tmpVal.bitVal.words.wordH = 0x7FF00000U;
 800c630:	4b09      	ldr	r3, [pc, #36]	; (800c658 <rtGetInf+0x5c>)
 800c632:	607b      	str	r3, [r7, #4]
    tmpVal.bitVal.words.wordL = 0x00000000U;
 800c634:	2300      	movs	r3, #0
 800c636:	603b      	str	r3, [r7, #0]
    inf = tmpVal.fltVal;
 800c638:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c63c:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  return inf;
 800c640:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800c644:	ec43 2b17 	vmov	d7, r2, r3
}
 800c648:	eeb0 0a47 	vmov.f32	s0, s14
 800c64c:	eef0 0a67 	vmov.f32	s1, s15
 800c650:	3718      	adds	r7, #24
 800c652:	46bd      	mov	sp, r7
 800c654:	bd80      	pop	{r7, pc}
 800c656:	bf00      	nop
 800c658:	7ff00000 	.word	0x7ff00000

0800c65c <rtGetInfF>:

real32_T rtGetInfF(void)
{
 800c65c:	b480      	push	{r7}
 800c65e:	b083      	sub	sp, #12
 800c660:	af00      	add	r7, sp, #0
  IEEESingle infF;
  infF.wordL.wordLuint = 0x7F800000U;
 800c662:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 800c666:	607b      	str	r3, [r7, #4]
  return infF.wordL.wordLreal;
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	ee07 3a90 	vmov	s15, r3
}
 800c66e:	eeb0 0a67 	vmov.f32	s0, s15
 800c672:	370c      	adds	r7, #12
 800c674:	46bd      	mov	sp, r7
 800c676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c67a:	4770      	bx	lr

0800c67c <rtGetMinusInf>:

real_T rtGetMinusInf(void)
{
 800c67c:	b580      	push	{r7, lr}
 800c67e:	b086      	sub	sp, #24
 800c680:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 800c682:	2340      	movs	r3, #64	; 0x40
 800c684:	60fb      	str	r3, [r7, #12]
  real_T minf = 0.0;
 800c686:	f04f 0200 	mov.w	r2, #0
 800c68a:	f04f 0300 	mov.w	r3, #0
 800c68e:	e9c7 2304 	strd	r2, r3, [r7, #16]
  if (bitsPerReal == 32U) {
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	2b20      	cmp	r3, #32
 800c696:	d10b      	bne.n	800c6b0 <rtGetMinusInf+0x34>
    minf = rtGetMinusInfF();
 800c698:	f000 f820 	bl	800c6dc <rtGetMinusInfF>
 800c69c:	ee10 3a10 	vmov	r3, s0
 800c6a0:	4618      	mov	r0, r3
 800c6a2:	f7f3 ff43 	bl	800052c <__aeabi_f2d>
 800c6a6:	4602      	mov	r2, r0
 800c6a8:	460b      	mov	r3, r1
 800c6aa:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800c6ae:	e007      	b.n	800c6c0 <rtGetMinusInf+0x44>
    union {
      LittleEndianIEEEDouble bitVal;
      real_T fltVal;
    } tmpVal;

    tmpVal.bitVal.words.wordH = 0xFFF00000U;
 800c6b0:	4b09      	ldr	r3, [pc, #36]	; (800c6d8 <rtGetMinusInf+0x5c>)
 800c6b2:	607b      	str	r3, [r7, #4]
    tmpVal.bitVal.words.wordL = 0x00000000U;
 800c6b4:	2300      	movs	r3, #0
 800c6b6:	603b      	str	r3, [r7, #0]
    minf = tmpVal.fltVal;
 800c6b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c6bc:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  return minf;
 800c6c0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800c6c4:	ec43 2b17 	vmov	d7, r2, r3
}
 800c6c8:	eeb0 0a47 	vmov.f32	s0, s14
 800c6cc:	eef0 0a67 	vmov.f32	s1, s15
 800c6d0:	3718      	adds	r7, #24
 800c6d2:	46bd      	mov	sp, r7
 800c6d4:	bd80      	pop	{r7, pc}
 800c6d6:	bf00      	nop
 800c6d8:	fff00000 	.word	0xfff00000

0800c6dc <rtGetMinusInfF>:

real32_T rtGetMinusInfF(void)
{
 800c6dc:	b480      	push	{r7}
 800c6de:	b083      	sub	sp, #12
 800c6e0:	af00      	add	r7, sp, #0
  IEEESingle minfF;
  minfF.wordL.wordLuint = 0xFF800000U;
 800c6e2:	4b06      	ldr	r3, [pc, #24]	; (800c6fc <rtGetMinusInfF+0x20>)
 800c6e4:	607b      	str	r3, [r7, #4]
  return minfF.wordL.wordLreal;
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	ee07 3a90 	vmov	s15, r3
}
 800c6ec:	eeb0 0a67 	vmov.f32	s0, s15
 800c6f0:	370c      	adds	r7, #12
 800c6f2:	46bd      	mov	sp, r7
 800c6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f8:	4770      	bx	lr
 800c6fa:	bf00      	nop
 800c6fc:	ff800000 	.word	0xff800000

0800c700 <rtGetNaN>:
#include <stddef.h>
#include "rt_nonfinite.h"
#define NumBitsPerChar                 8U

real_T rtGetNaN(void)
{
 800c700:	b580      	push	{r7, lr}
 800c702:	b086      	sub	sp, #24
 800c704:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 800c706:	2340      	movs	r3, #64	; 0x40
 800c708:	60fb      	str	r3, [r7, #12]
  real_T nan = 0.0;
 800c70a:	f04f 0200 	mov.w	r2, #0
 800c70e:	f04f 0300 	mov.w	r3, #0
 800c712:	e9c7 2304 	strd	r2, r3, [r7, #16]
  if (bitsPerReal == 32U) {
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	2b20      	cmp	r3, #32
 800c71a:	d10b      	bne.n	800c734 <rtGetNaN+0x34>
    nan = rtGetNaNF();
 800c71c:	f000 f820 	bl	800c760 <rtGetNaNF>
 800c720:	ee10 3a10 	vmov	r3, s0
 800c724:	4618      	mov	r0, r3
 800c726:	f7f3 ff01 	bl	800052c <__aeabi_f2d>
 800c72a:	4602      	mov	r2, r0
 800c72c:	460b      	mov	r3, r1
 800c72e:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800c732:	e007      	b.n	800c744 <rtGetNaN+0x44>
    union {
      LittleEndianIEEEDouble bitVal;
      real_T fltVal;
    } tmpVal;

    tmpVal.bitVal.words.wordH = 0xFFF80000U;
 800c734:	4b09      	ldr	r3, [pc, #36]	; (800c75c <rtGetNaN+0x5c>)
 800c736:	607b      	str	r3, [r7, #4]
    tmpVal.bitVal.words.wordL = 0x00000000U;
 800c738:	2300      	movs	r3, #0
 800c73a:	603b      	str	r3, [r7, #0]
    nan = tmpVal.fltVal;
 800c73c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c740:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  return nan;
 800c744:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800c748:	ec43 2b17 	vmov	d7, r2, r3
}
 800c74c:	eeb0 0a47 	vmov.f32	s0, s14
 800c750:	eef0 0a67 	vmov.f32	s1, s15
 800c754:	3718      	adds	r7, #24
 800c756:	46bd      	mov	sp, r7
 800c758:	bd80      	pop	{r7, pc}
 800c75a:	bf00      	nop
 800c75c:	fff80000 	.word	0xfff80000

0800c760 <rtGetNaNF>:

real32_T rtGetNaNF(void)
{
 800c760:	b480      	push	{r7}
 800c762:	b083      	sub	sp, #12
 800c764:	af00      	add	r7, sp, #0
  IEEESingle nanF = { { 0.0F } };
 800c766:	f04f 0300 	mov.w	r3, #0
 800c76a:	607b      	str	r3, [r7, #4]

  nanF.wordL.wordLuint = 0xFFC00000U;
 800c76c:	4b05      	ldr	r3, [pc, #20]	; (800c784 <rtGetNaNF+0x24>)
 800c76e:	607b      	str	r3, [r7, #4]
  return nanF.wordL.wordLreal;
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	ee07 3a90 	vmov	s15, r3
}
 800c776:	eeb0 0a67 	vmov.f32	s0, s15
 800c77a:	370c      	adds	r7, #12
 800c77c:	46bd      	mov	sp, r7
 800c77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c782:	4770      	bx	lr
 800c784:	ffc00000 	.word	0xffc00000

0800c788 <rt_hypotd_snf>:
#include "rt_hypotd_snf.h"
#include <math.h>
#include "rt_nonfinite.h"

real_T rt_hypotd_snf(real_T u0, real_T u1)
{
 800c788:	b580      	push	{r7, lr}
 800c78a:	b088      	sub	sp, #32
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	ed87 0b02 	vstr	d0, [r7, #8]
 800c792:	ed87 1b00 	vstr	d1, [r7]
  real_T a;
  real_T y;
  a = fabs(u0);
 800c796:	68bb      	ldr	r3, [r7, #8]
 800c798:	613b      	str	r3, [r7, #16]
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c7a0:	617b      	str	r3, [r7, #20]
  y = fabs(u1);
 800c7a2:	683b      	ldr	r3, [r7, #0]
 800c7a4:	61bb      	str	r3, [r7, #24]
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c7ac:	61fb      	str	r3, [r7, #28]
  if (a < y) {
 800c7ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c7b2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800c7b6:	f7f4 f983 	bl	8000ac0 <__aeabi_dcmplt>
 800c7ba:	4603      	mov	r3, r0
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d02d      	beq.n	800c81c <rt_hypotd_snf+0x94>
    a /= y;
 800c7c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c7c4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800c7c8:	f7f4 f832 	bl	8000830 <__aeabi_ddiv>
 800c7cc:	4602      	mov	r2, r0
 800c7ce:	460b      	mov	r3, r1
 800c7d0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    y *= sqrt(a * a + 1.0);
 800c7d4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800c7d8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800c7dc:	f7f3 fefe 	bl	80005dc <__aeabi_dmul>
 800c7e0:	4602      	mov	r2, r0
 800c7e2:	460b      	mov	r3, r1
 800c7e4:	4610      	mov	r0, r2
 800c7e6:	4619      	mov	r1, r3
 800c7e8:	f04f 0200 	mov.w	r2, #0
 800c7ec:	4b38      	ldr	r3, [pc, #224]	; (800c8d0 <rt_hypotd_snf+0x148>)
 800c7ee:	f7f3 fd3f 	bl	8000270 <__adddf3>
 800c7f2:	4602      	mov	r2, r0
 800c7f4:	460b      	mov	r3, r1
 800c7f6:	ec43 2b17 	vmov	d7, r2, r3
 800c7fa:	eeb0 0a47 	vmov.f32	s0, s14
 800c7fe:	eef0 0a67 	vmov.f32	s1, s15
 800c802:	f00d fee9 	bl	801a5d8 <sqrt>
 800c806:	ec53 2b10 	vmov	r2, r3, d0
 800c80a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800c80e:	f7f3 fee5 	bl	80005dc <__aeabi_dmul>
 800c812:	4602      	mov	r2, r0
 800c814:	460b      	mov	r3, r1
 800c816:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800c81a:	e048      	b.n	800c8ae <rt_hypotd_snf+0x126>
  } else if (a > y) {
 800c81c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c820:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800c824:	f7f4 f96a 	bl	8000afc <__aeabi_dcmpgt>
 800c828:	4603      	mov	r3, r0
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d02d      	beq.n	800c88a <rt_hypotd_snf+0x102>
    y /= a;
 800c82e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800c832:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800c836:	f7f3 fffb 	bl	8000830 <__aeabi_ddiv>
 800c83a:	4602      	mov	r2, r0
 800c83c:	460b      	mov	r3, r1
 800c83e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    y = sqrt(y * y + 1.0) * a;
 800c842:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c846:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800c84a:	f7f3 fec7 	bl	80005dc <__aeabi_dmul>
 800c84e:	4602      	mov	r2, r0
 800c850:	460b      	mov	r3, r1
 800c852:	4610      	mov	r0, r2
 800c854:	4619      	mov	r1, r3
 800c856:	f04f 0200 	mov.w	r2, #0
 800c85a:	4b1d      	ldr	r3, [pc, #116]	; (800c8d0 <rt_hypotd_snf+0x148>)
 800c85c:	f7f3 fd08 	bl	8000270 <__adddf3>
 800c860:	4602      	mov	r2, r0
 800c862:	460b      	mov	r3, r1
 800c864:	ec43 2b17 	vmov	d7, r2, r3
 800c868:	eeb0 0a47 	vmov.f32	s0, s14
 800c86c:	eef0 0a67 	vmov.f32	s1, s15
 800c870:	f00d feb2 	bl	801a5d8 <sqrt>
 800c874:	ec53 2b10 	vmov	r2, r3, d0
 800c878:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800c87c:	f7f3 feae 	bl	80005dc <__aeabi_dmul>
 800c880:	4602      	mov	r2, r0
 800c882:	460b      	mov	r3, r1
 800c884:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800c888:	e011      	b.n	800c8ae <rt_hypotd_snf+0x126>
  } else if (!rtIsNaN(y)) {
 800c88a:	ed97 0b06 	vldr	d0, [r7, #24]
 800c88e:	f000 f889 	bl	800c9a4 <rtIsNaN>
 800c892:	4603      	mov	r3, r0
 800c894:	2b00      	cmp	r3, #0
 800c896:	d10a      	bne.n	800c8ae <rt_hypotd_snf+0x126>
    y = a * 1.4142135623730951;
 800c898:	a30b      	add	r3, pc, #44	; (adr r3, 800c8c8 <rt_hypotd_snf+0x140>)
 800c89a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c89e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800c8a2:	f7f3 fe9b 	bl	80005dc <__aeabi_dmul>
 800c8a6:	4602      	mov	r2, r0
 800c8a8:	460b      	mov	r3, r1
 800c8aa:	e9c7 2306 	strd	r2, r3, [r7, #24]
  }

  return y;
 800c8ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c8b2:	ec43 2b17 	vmov	d7, r2, r3
}
 800c8b6:	eeb0 0a47 	vmov.f32	s0, s14
 800c8ba:	eef0 0a67 	vmov.f32	s1, s15
 800c8be:	3720      	adds	r7, #32
 800c8c0:	46bd      	mov	sp, r7
 800c8c2:	bd80      	pop	{r7, pc}
 800c8c4:	f3af 8000 	nop.w
 800c8c8:	667f3bcd 	.word	0x667f3bcd
 800c8cc:	3ff6a09e 	.word	0x3ff6a09e
 800c8d0:	3ff00000 	.word	0x3ff00000

0800c8d4 <rt_InitInfAndNaN>:
real_T rtNaN;
real32_T rtInfF;
real32_T rtMinusInfF;
real32_T rtNaNF;
void rt_InitInfAndNaN(size_t realSize)
{
 800c8d4:	b580      	push	{r7, lr}
 800c8d6:	b082      	sub	sp, #8
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	6078      	str	r0, [r7, #4]
  (void) (realSize);
  rtNaN = rtGetNaN();
 800c8dc:	f7ff ff10 	bl	800c700 <rtGetNaN>
 800c8e0:	eeb0 7a40 	vmov.f32	s14, s0
 800c8e4:	eef0 7a60 	vmov.f32	s15, s1
 800c8e8:	4b16      	ldr	r3, [pc, #88]	; (800c944 <rt_InitInfAndNaN+0x70>)
 800c8ea:	ed83 7b00 	vstr	d7, [r3]
  rtNaNF = rtGetNaNF();
 800c8ee:	f7ff ff37 	bl	800c760 <rtGetNaNF>
 800c8f2:	eef0 7a40 	vmov.f32	s15, s0
 800c8f6:	4b14      	ldr	r3, [pc, #80]	; (800c948 <rt_InitInfAndNaN+0x74>)
 800c8f8:	edc3 7a00 	vstr	s15, [r3]
  rtInf = rtGetInf();
 800c8fc:	f7ff fe7e 	bl	800c5fc <rtGetInf>
 800c900:	eeb0 7a40 	vmov.f32	s14, s0
 800c904:	eef0 7a60 	vmov.f32	s15, s1
 800c908:	4b10      	ldr	r3, [pc, #64]	; (800c94c <rt_InitInfAndNaN+0x78>)
 800c90a:	ed83 7b00 	vstr	d7, [r3]
  rtInfF = rtGetInfF();
 800c90e:	f7ff fea5 	bl	800c65c <rtGetInfF>
 800c912:	eef0 7a40 	vmov.f32	s15, s0
 800c916:	4b0e      	ldr	r3, [pc, #56]	; (800c950 <rt_InitInfAndNaN+0x7c>)
 800c918:	edc3 7a00 	vstr	s15, [r3]
  rtMinusInf = rtGetMinusInf();
 800c91c:	f7ff feae 	bl	800c67c <rtGetMinusInf>
 800c920:	eeb0 7a40 	vmov.f32	s14, s0
 800c924:	eef0 7a60 	vmov.f32	s15, s1
 800c928:	4b0a      	ldr	r3, [pc, #40]	; (800c954 <rt_InitInfAndNaN+0x80>)
 800c92a:	ed83 7b00 	vstr	d7, [r3]
  rtMinusInfF = rtGetMinusInfF();
 800c92e:	f7ff fed5 	bl	800c6dc <rtGetMinusInfF>
 800c932:	eef0 7a40 	vmov.f32	s15, s0
 800c936:	4b08      	ldr	r3, [pc, #32]	; (800c958 <rt_InitInfAndNaN+0x84>)
 800c938:	edc3 7a00 	vstr	s15, [r3]
}
 800c93c:	bf00      	nop
 800c93e:	3708      	adds	r7, #8
 800c940:	46bd      	mov	sp, r7
 800c942:	bd80      	pop	{r7, pc}
 800c944:	2001e910 	.word	0x2001e910
 800c948:	2001e900 	.word	0x2001e900
 800c94c:	2001e908 	.word	0x2001e908
 800c950:	2001e904 	.word	0x2001e904
 800c954:	2001e918 	.word	0x2001e918
 800c958:	2001e920 	.word	0x2001e920

0800c95c <rtIsInf>:

boolean_T rtIsInf(real_T value)
{
 800c95c:	b580      	push	{r7, lr}
 800c95e:	b082      	sub	sp, #8
 800c960:	af00      	add	r7, sp, #0
 800c962:	ed87 0b00 	vstr	d0, [r7]
  return (boolean_T)((value==rtInf || value==rtMinusInf) ? 1U : 0U);
 800c966:	4b0d      	ldr	r3, [pc, #52]	; (800c99c <rtIsInf+0x40>)
 800c968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c96c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c970:	f7f4 f89c 	bl	8000aac <__aeabi_dcmpeq>
 800c974:	4603      	mov	r3, r0
 800c976:	2b00      	cmp	r3, #0
 800c978:	d109      	bne.n	800c98e <rtIsInf+0x32>
 800c97a:	4b09      	ldr	r3, [pc, #36]	; (800c9a0 <rtIsInf+0x44>)
 800c97c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c980:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c984:	f7f4 f892 	bl	8000aac <__aeabi_dcmpeq>
 800c988:	4603      	mov	r3, r0
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d001      	beq.n	800c992 <rtIsInf+0x36>
 800c98e:	2301      	movs	r3, #1
 800c990:	e000      	b.n	800c994 <rtIsInf+0x38>
 800c992:	2300      	movs	r3, #0
}
 800c994:	4618      	mov	r0, r3
 800c996:	3708      	adds	r7, #8
 800c998:	46bd      	mov	sp, r7
 800c99a:	bd80      	pop	{r7, pc}
 800c99c:	2001e908 	.word	0x2001e908
 800c9a0:	2001e918 	.word	0x2001e918

0800c9a4 <rtIsNaN>:
{
  return (boolean_T)(((value)==rtInfF || (value)==rtMinusInfF) ? 1U : 0U);
}

boolean_T rtIsNaN(real_T value)
{
 800c9a4:	b580      	push	{r7, lr}
 800c9a6:	b086      	sub	sp, #24
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	ed87 0b00 	vstr	d0, [r7]
  boolean_T result = (boolean_T) 0;
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	75fb      	strb	r3, [r7, #23]
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 800c9b2:	2340      	movs	r3, #64	; 0x40
 800c9b4:	613b      	str	r3, [r7, #16]
  if (bitsPerReal == 32U) {
 800c9b6:	693b      	ldr	r3, [r7, #16]
 800c9b8:	2b20      	cmp	r3, #32
 800c9ba:	d10b      	bne.n	800c9d4 <rtIsNaN+0x30>
    result = rtIsNaNF((real32_T)value);
 800c9bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c9c0:	f7f4 f904 	bl	8000bcc <__aeabi_d2f>
 800c9c4:	4603      	mov	r3, r0
 800c9c6:	ee00 3a10 	vmov	s0, r3
 800c9ca:	f000 f821 	bl	800ca10 <rtIsNaNF>
 800c9ce:	4603      	mov	r3, r0
 800c9d0:	75fb      	strb	r3, [r7, #23]
 800c9d2:	e015      	b.n	800ca00 <rtIsNaN+0x5c>
    union {
      LittleEndianIEEEDouble bitVal;
      real_T fltVal;
    } tmpVal;

    tmpVal.fltVal = value;
 800c9d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c9d8:	e9c7 2302 	strd	r2, r3, [r7, #8]
    result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) == 0x7FF00000 &&
 800c9dc:	68fa      	ldr	r2, [r7, #12]
 800c9de:	4b0b      	ldr	r3, [pc, #44]	; (800ca0c <rtIsNaN+0x68>)
 800c9e0:	4013      	ands	r3, r2
 800c9e2:	4a0a      	ldr	r2, [pc, #40]	; (800ca0c <rtIsNaN+0x68>)
 800c9e4:	4293      	cmp	r3, r2
 800c9e6:	d109      	bne.n	800c9fc <rtIsNaN+0x58>
                         ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
    result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) == 0x7FF00000 &&
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d102      	bne.n	800c9f8 <rtIsNaN+0x54>
                          (tmpVal.bitVal.words.wordL != 0) ));
 800c9f2:	68bb      	ldr	r3, [r7, #8]
                         ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d001      	beq.n	800c9fc <rtIsNaN+0x58>
    result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) == 0x7FF00000 &&
 800c9f8:	2301      	movs	r3, #1
 800c9fa:	e000      	b.n	800c9fe <rtIsNaN+0x5a>
 800c9fc:	2300      	movs	r3, #0
 800c9fe:	75fb      	strb	r3, [r7, #23]
  }

  return result;
 800ca00:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca02:	4618      	mov	r0, r3
 800ca04:	3718      	adds	r7, #24
 800ca06:	46bd      	mov	sp, r7
 800ca08:	bd80      	pop	{r7, pc}
 800ca0a:	bf00      	nop
 800ca0c:	7ff00000 	.word	0x7ff00000

0800ca10 <rtIsNaNF>:

boolean_T rtIsNaNF(real32_T value)
{
 800ca10:	b480      	push	{r7}
 800ca12:	b085      	sub	sp, #20
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	ed87 0a01 	vstr	s0, [r7, #4]
  IEEESingle tmp;
  tmp.wordL.wordLreal = value;
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	60fb      	str	r3, [r7, #12]
  return (boolean_T)( (tmp.wordL.wordLuint & 0x7F800000) == 0x7F800000 &&
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	f003 43ff 	and.w	r3, r3, #2139095040	; 0x7f800000
 800ca24:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800ca28:	d106      	bne.n	800ca38 <rtIsNaNF+0x28>
                     (tmp.wordL.wordLuint & 0x007FFFFF) != 0 );
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	f3c3 0316 	ubfx	r3, r3, #0, #23
  return (boolean_T)( (tmp.wordL.wordLuint & 0x7F800000) == 0x7F800000 &&
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d001      	beq.n	800ca38 <rtIsNaNF+0x28>
 800ca34:	2301      	movs	r3, #1
 800ca36:	e000      	b.n	800ca3a <rtIsNaNF+0x2a>
 800ca38:	2300      	movs	r3, #0
 800ca3a:	b2db      	uxtb	r3, r3
}
 800ca3c:	4618      	mov	r0, r3
 800ca3e:	3714      	adds	r7, #20
 800ca40:	46bd      	mov	sp, r7
 800ca42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca46:	4770      	bx	lr

0800ca48 <svd_u3DvUgOe>:
#include "xrotg_XzIjz1eG.h"
#include "xrot_i7f01JoJ.h"
#include "xswap_JoAqPjUv.h"

void svd_u3DvUgOe(const real_T A[9], real_T U[9], real_T s[3], real_T V[9])
{
 800ca48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ca4c:	ed2d 8b02 	vpush	{d8}
 800ca50:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800ca54:	af02      	add	r7, sp, #8
 800ca56:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 800ca5a:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 800ca5e:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 800ca62:	f507 7280 	add.w	r2, r7, #256	; 0x100
 800ca66:	6013      	str	r3, [r2, #0]
  int32_T kase;
  int32_T m;
  int32_T qjj;
  int32_T qq;
  boolean_T apply_transform;
  e[0] = 0.0;
 800ca68:	f04f 0200 	mov.w	r2, #0
 800ca6c:	f04f 0300 	mov.w	r3, #0
 800ca70:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
  work[0] = 0.0;
 800ca74:	f04f 0200 	mov.w	r2, #0
 800ca78:	f04f 0300 	mov.w	r3, #0
 800ca7c:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
  e[1] = 0.0;
 800ca80:	f04f 0200 	mov.w	r2, #0
 800ca84:	f04f 0300 	mov.w	r3, #0
 800ca88:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
  work[1] = 0.0;
 800ca8c:	f04f 0200 	mov.w	r2, #0
 800ca90:	f04f 0300 	mov.w	r3, #0
 800ca94:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
  e[2] = 0.0;
 800ca98:	f04f 0200 	mov.w	r2, #0
 800ca9c:	f04f 0300 	mov.w	r3, #0
 800caa0:	e9c7 2356 	strd	r2, r3, [r7, #344]	; 0x158
  work[2] = 0.0;
 800caa4:	f04f 0200 	mov.w	r2, #0
 800caa8:	f04f 0300 	mov.w	r3, #0
 800caac:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
  for (qq = 0; qq < 9; qq++) {
 800cab0:	2300      	movs	r3, #0
 800cab2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800cab6:	e02e      	b.n	800cb16 <svd_u3DvUgOe+0xce>
    b_A[qq] = A[qq];
 800cab8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800cabc:	00da      	lsls	r2, r3, #3
 800cabe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cac2:	4413      	add	r3, r2
 800cac4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cac8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800cacc:	00db      	lsls	r3, r3, #3
 800cace:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800cad2:	4413      	add	r3, r2
 800cad4:	3b88      	subs	r3, #136	; 0x88
 800cad6:	e9c3 0100 	strd	r0, r1, [r3]
    U[qq] = 0.0;
 800cada:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800cade:	00da      	lsls	r2, r3, #3
 800cae0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800cae4:	1899      	adds	r1, r3, r2
 800cae6:	f04f 0200 	mov.w	r2, #0
 800caea:	f04f 0300 	mov.w	r3, #0
 800caee:	e9c1 2300 	strd	r2, r3, [r1]
    V[qq] = 0.0;
 800caf2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800caf6:	00da      	lsls	r2, r3, #3
 800caf8:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	1899      	adds	r1, r3, r2
 800cb00:	f04f 0200 	mov.w	r2, #0
 800cb04:	f04f 0300 	mov.w	r3, #0
 800cb08:	e9c1 2300 	strd	r2, r3, [r1]
  for (qq = 0; qq < 9; qq++) {
 800cb0c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800cb10:	3301      	adds	r3, #1
 800cb12:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800cb16:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800cb1a:	2b08      	cmp	r3, #8
 800cb1c:	ddcc      	ble.n	800cab8 <svd_u3DvUgOe+0x70>
  }

  qq = 0;
 800cb1e:	2300      	movs	r3, #0
 800cb20:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  apply_transform = false;
 800cb24:	2300      	movs	r3, #0
 800cb26:	f887 31eb 	strb.w	r3, [r7, #491]	; 0x1eb
  nrm = xnrm2_xDOlDEtw(3, b_A, 1);
 800cb2a:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800cb2e:	2201      	movs	r2, #1
 800cb30:	4619      	mov	r1, r3
 800cb32:	2003      	movs	r0, #3
 800cb34:	f002 fbbc 	bl	800f2b0 <xnrm2_xDOlDEtw>
 800cb38:	ed87 0b72 	vstr	d0, [r7, #456]	; 0x1c8
  if (nrm > 0.0) {
 800cb3c:	f04f 0200 	mov.w	r2, #0
 800cb40:	f04f 0300 	mov.w	r3, #0
 800cb44:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	; 0x1c8
 800cb48:	f7f3 ffd8 	bl	8000afc <__aeabi_dcmpgt>
 800cb4c:	4603      	mov	r3, r0
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d07b      	beq.n	800cc4a <svd_u3DvUgOe+0x202>
    apply_transform = true;
 800cb52:	2301      	movs	r3, #1
 800cb54:	f887 31eb 	strb.w	r3, [r7, #491]	; 0x1eb
    if (b_A[0] < 0.0) {
 800cb58:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 800cb5c:	f04f 0200 	mov.w	r2, #0
 800cb60:	f04f 0300 	mov.w	r3, #0
 800cb64:	f7f3 ffac 	bl	8000ac0 <__aeabi_dcmplt>
 800cb68:	4603      	mov	r3, r0
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d008      	beq.n	800cb80 <svd_u3DvUgOe+0x138>
      b_s[0] = -nrm;
 800cb6e:	f8d7 41c8 	ldr.w	r4, [r7, #456]	; 0x1c8
 800cb72:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800cb76:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800cb7a:	e9c7 4558 	strd	r4, r5, [r7, #352]	; 0x160
 800cb7e:	e003      	b.n	800cb88 <svd_u3DvUgOe+0x140>
    } else {
      b_s[0] = nrm;
 800cb80:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 800cb84:	e9c7 2358 	strd	r2, r3, [r7, #352]	; 0x160
    }

    if (fabs(b_s[0]) >= 1.0020841800044864E-292) {
 800cb88:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 800cb8c:	4690      	mov	r8, r2
 800cb8e:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 800cb92:	f04f 0200 	mov.w	r2, #0
 800cb96:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800cb9a:	4640      	mov	r0, r8
 800cb9c:	4649      	mov	r1, r9
 800cb9e:	f7f3 ffa3 	bl	8000ae8 <__aeabi_dcmpge>
 800cba2:	4603      	mov	r3, r0
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d016      	beq.n	800cbd6 <svd_u3DvUgOe+0x18e>
      xscal_59GtRAwv(3, 1.0 / b_s[0], b_A, 1);
 800cba8:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 800cbac:	f04f 0000 	mov.w	r0, #0
 800cbb0:	49c1      	ldr	r1, [pc, #772]	; (800ceb8 <svd_u3DvUgOe+0x470>)
 800cbb2:	f7f3 fe3d 	bl	8000830 <__aeabi_ddiv>
 800cbb6:	4602      	mov	r2, r0
 800cbb8:	460b      	mov	r3, r1
 800cbba:	ec43 2b17 	vmov	d7, r2, r3
 800cbbe:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800cbc2:	2201      	movs	r2, #1
 800cbc4:	4619      	mov	r1, r3
 800cbc6:	eeb0 0a47 	vmov.f32	s0, s14
 800cbca:	eef0 0a67 	vmov.f32	s1, s15
 800cbce:	2003      	movs	r0, #3
 800cbd0:	f002 fe36 	bl	800f840 <xscal_59GtRAwv>
 800cbd4:	e026      	b.n	800cc24 <svd_u3DvUgOe+0x1dc>
    } else {
      for (qjj = 0; qjj < 3; qjj++) {
 800cbd6:	2300      	movs	r3, #0
 800cbd8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800cbdc:	e01e      	b.n	800cc1c <svd_u3DvUgOe+0x1d4>
        b_A[qjj] /= b_s[0];
 800cbde:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800cbe2:	00db      	lsls	r3, r3, #3
 800cbe4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800cbe8:	4413      	add	r3, r2
 800cbea:	3b88      	subs	r3, #136	; 0x88
 800cbec:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cbf0:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 800cbf4:	f7f3 fe1c 	bl	8000830 <__aeabi_ddiv>
 800cbf8:	4602      	mov	r2, r0
 800cbfa:	460b      	mov	r3, r1
 800cbfc:	4610      	mov	r0, r2
 800cbfe:	4619      	mov	r1, r3
 800cc00:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800cc04:	00db      	lsls	r3, r3, #3
 800cc06:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800cc0a:	4413      	add	r3, r2
 800cc0c:	3b88      	subs	r3, #136	; 0x88
 800cc0e:	e9c3 0100 	strd	r0, r1, [r3]
      for (qjj = 0; qjj < 3; qjj++) {
 800cc12:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800cc16:	3301      	adds	r3, #1
 800cc18:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800cc1c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800cc20:	2b02      	cmp	r3, #2
 800cc22:	dddc      	ble.n	800cbde <svd_u3DvUgOe+0x196>
      }
    }

    b_A[0]++;
 800cc24:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 800cc28:	f04f 0200 	mov.w	r2, #0
 800cc2c:	4ba2      	ldr	r3, [pc, #648]	; (800ceb8 <svd_u3DvUgOe+0x470>)
 800cc2e:	f7f3 fb1f 	bl	8000270 <__adddf3>
 800cc32:	4602      	mov	r2, r0
 800cc34:	460b      	mov	r3, r1
 800cc36:	e9c7 235e 	strd	r2, r3, [r7, #376]	; 0x178
    b_s[0] = -b_s[0];
 800cc3a:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 800cc3e:	4692      	mov	sl, r2
 800cc40:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 800cc44:	e9c7 ab58 	strd	sl, fp, [r7, #352]	; 0x160
 800cc48:	e005      	b.n	800cc56 <svd_u3DvUgOe+0x20e>
  } else {
    b_s[0] = 0.0;
 800cc4a:	f04f 0200 	mov.w	r2, #0
 800cc4e:	f04f 0300 	mov.w	r3, #0
 800cc52:	e9c7 2358 	strd	r2, r3, [r7, #352]	; 0x160
  }

  for (d = 1; d + 1 < 4; d++) {
 800cc56:	2301      	movs	r3, #1
 800cc58:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 800cc5c:	e047      	b.n	800ccee <svd_u3DvUgOe+0x2a6>
    qjj = 3 * d;
 800cc5e:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 800cc62:	4613      	mov	r3, r2
 800cc64:	005b      	lsls	r3, r3, #1
 800cc66:	4413      	add	r3, r2
 800cc68:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    if (apply_transform) {
 800cc6c:	f897 31eb 	ldrb.w	r3, [r7, #491]	; 0x1eb
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d025      	beq.n	800ccc0 <svd_u3DvUgOe+0x278>
      xaxpy_guu0hJif(3, -(xdotc_mznw4aLl(3, b_A, 1, b_A, qjj + 1) / b_A[0]), 1,
 800cc74:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800cc78:	3301      	adds	r3, #1
 800cc7a:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 800cc7e:	f507 71bc 	add.w	r1, r7, #376	; 0x178
 800cc82:	9300      	str	r3, [sp, #0]
 800cc84:	4613      	mov	r3, r2
 800cc86:	2201      	movs	r2, #1
 800cc88:	2003      	movs	r0, #3
 800cc8a:	f001 fdf8 	bl	800e87e <xdotc_mznw4aLl>
 800cc8e:	ec51 0b10 	vmov	r0, r1, d0
 800cc92:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 800cc96:	f7f3 fdcb 	bl	8000830 <__aeabi_ddiv>
 800cc9a:	4602      	mov	r2, r0
 800cc9c:	460b      	mov	r3, r1
 800cc9e:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 800cca2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800cca6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800ccaa:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800ccae:	3301      	adds	r3, #1
 800ccb0:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 800ccb4:	2101      	movs	r1, #1
 800ccb6:	ed97 0b3e 	vldr	d0, [r7, #248]	; 0xf8
 800ccba:	2003      	movs	r0, #3
 800ccbc:	f001 fd8b 	bl	800e7d6 <xaxpy_guu0hJif>
                     b_A, qjj + 1);
    }

    e[d] = b_A[qjj];
 800ccc0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800ccc4:	00db      	lsls	r3, r3, #3
 800ccc6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800ccca:	4413      	add	r3, r2
 800cccc:	3b88      	subs	r3, #136	; 0x88
 800ccce:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ccd2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800ccd6:	00db      	lsls	r3, r3, #3
 800ccd8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800ccdc:	4413      	add	r3, r2
 800ccde:	3bb8      	subs	r3, #184	; 0xb8
 800cce0:	e9c3 0100 	strd	r0, r1, [r3]
  for (d = 1; d + 1 < 4; d++) {
 800cce4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800cce8:	3301      	adds	r3, #1
 800ccea:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 800ccee:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800ccf2:	2b02      	cmp	r3, #2
 800ccf4:	ddb3      	ble.n	800cc5e <svd_u3DvUgOe+0x216>
  }

  while (qq + 1 < 4) {
 800ccf6:	e015      	b.n	800cd24 <svd_u3DvUgOe+0x2dc>
    U[qq] = b_A[qq];
 800ccf8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800ccfc:	00da      	lsls	r2, r3, #3
 800ccfe:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800cd02:	1899      	adds	r1, r3, r2
 800cd04:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800cd08:	00db      	lsls	r3, r3, #3
 800cd0a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800cd0e:	4413      	add	r3, r2
 800cd10:	3b88      	subs	r3, #136	; 0x88
 800cd12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd16:	e9c1 2300 	strd	r2, r3, [r1]
    qq++;
 800cd1a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800cd1e:	3301      	adds	r3, #1
 800cd20:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  while (qq + 1 < 4) {
 800cd24:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800cd28:	2b02      	cmp	r3, #2
 800cd2a:	dde5      	ble.n	800ccf8 <svd_u3DvUgOe+0x2b0>
  }

  nrm = xnrm2_Rlk0oxWw(2, e, 2);
 800cd2c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800cd30:	2202      	movs	r2, #2
 800cd32:	4619      	mov	r1, r3
 800cd34:	2002      	movs	r0, #2
 800cd36:	f002 f95f 	bl	800eff8 <xnrm2_Rlk0oxWw>
 800cd3a:	ed87 0b72 	vstr	d0, [r7, #456]	; 0x1c8
  if (nrm == 0.0) {
 800cd3e:	f04f 0200 	mov.w	r2, #0
 800cd42:	f04f 0300 	mov.w	r3, #0
 800cd46:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	; 0x1c8
 800cd4a:	f7f3 feaf 	bl	8000aac <__aeabi_dcmpeq>
 800cd4e:	4603      	mov	r3, r0
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d006      	beq.n	800cd62 <svd_u3DvUgOe+0x31a>
    e[0] = 0.0;
 800cd54:	f04f 0200 	mov.w	r2, #0
 800cd58:	f04f 0300 	mov.w	r3, #0
 800cd5c:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
 800cd60:	e10d      	b.n	800cf7e <svd_u3DvUgOe+0x536>
  } else {
    if (e[1] < 0.0) {
 800cd62:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 800cd66:	f04f 0200 	mov.w	r2, #0
 800cd6a:	f04f 0300 	mov.w	r3, #0
 800cd6e:	f7f3 fea7 	bl	8000ac0 <__aeabi_dcmplt>
 800cd72:	4603      	mov	r3, r0
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d00e      	beq.n	800cd96 <svd_u3DvUgOe+0x34e>
      e[0] = -nrm;
 800cd78:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800cd7c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800cd80:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800cd84:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800cd88:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800cd8c:	ed97 7b3c 	vldr	d7, [r7, #240]	; 0xf0
 800cd90:	ed87 7b52 	vstr	d7, [r7, #328]	; 0x148
 800cd94:	e003      	b.n	800cd9e <svd_u3DvUgOe+0x356>
    } else {
      e[0] = nrm;
 800cd96:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 800cd9a:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
    }

    nrm = e[0];
 800cd9e:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800cda2:	e9c7 2372 	strd	r2, r3, [r7, #456]	; 0x1c8
    if (fabs(e[0]) >= 1.0020841800044864E-292) {
 800cda6:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800cdaa:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 800cdae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cdb2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800cdb6:	f04f 0200 	mov.w	r2, #0
 800cdba:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800cdbe:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 800cdc2:	f7f3 fe91 	bl	8000ae8 <__aeabi_dcmpge>
 800cdc6:	4603      	mov	r3, r0
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d016      	beq.n	800cdfa <svd_u3DvUgOe+0x3b2>
      xscal_PLmmUlD2(2, 1.0 / e[0], e, 2);
 800cdcc:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800cdd0:	f04f 0000 	mov.w	r0, #0
 800cdd4:	4938      	ldr	r1, [pc, #224]	; (800ceb8 <svd_u3DvUgOe+0x470>)
 800cdd6:	f7f3 fd2b 	bl	8000830 <__aeabi_ddiv>
 800cdda:	4602      	mov	r2, r0
 800cddc:	460b      	mov	r3, r1
 800cdde:	ec43 2b17 	vmov	d7, r2, r3
 800cde2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800cde6:	2202      	movs	r2, #2
 800cde8:	4619      	mov	r1, r3
 800cdea:	eeb0 0a47 	vmov.f32	s0, s14
 800cdee:	eef0 0a67 	vmov.f32	s1, s15
 800cdf2:	2002      	movs	r0, #2
 800cdf4:	f002 fd58 	bl	800f8a8 <xscal_PLmmUlD2>
 800cdf8:	e026      	b.n	800ce48 <svd_u3DvUgOe+0x400>
    } else {
      for (qq = 1; qq < 3; qq++) {
 800cdfa:	2301      	movs	r3, #1
 800cdfc:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800ce00:	e01e      	b.n	800ce40 <svd_u3DvUgOe+0x3f8>
        e[qq] /= nrm;
 800ce02:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800ce06:	00db      	lsls	r3, r3, #3
 800ce08:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800ce0c:	4413      	add	r3, r2
 800ce0e:	3bb8      	subs	r3, #184	; 0xb8
 800ce10:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ce14:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 800ce18:	f7f3 fd0a 	bl	8000830 <__aeabi_ddiv>
 800ce1c:	4602      	mov	r2, r0
 800ce1e:	460b      	mov	r3, r1
 800ce20:	4610      	mov	r0, r2
 800ce22:	4619      	mov	r1, r3
 800ce24:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800ce28:	00db      	lsls	r3, r3, #3
 800ce2a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800ce2e:	4413      	add	r3, r2
 800ce30:	3bb8      	subs	r3, #184	; 0xb8
 800ce32:	e9c3 0100 	strd	r0, r1, [r3]
      for (qq = 1; qq < 3; qq++) {
 800ce36:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800ce3a:	3301      	adds	r3, #1
 800ce3c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800ce40:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800ce44:	2b02      	cmp	r3, #2
 800ce46:	dddc      	ble.n	800ce02 <svd_u3DvUgOe+0x3ba>
      }
    }

    e[1]++;
 800ce48:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 800ce4c:	f04f 0200 	mov.w	r2, #0
 800ce50:	4b19      	ldr	r3, [pc, #100]	; (800ceb8 <svd_u3DvUgOe+0x470>)
 800ce52:	f7f3 fa0d 	bl	8000270 <__adddf3>
 800ce56:	4602      	mov	r2, r0
 800ce58:	460b      	mov	r3, r1
 800ce5a:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
    e[0] = -e[0];
 800ce5e:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800ce62:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 800ce66:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800ce6a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ce6e:	ed97 7b38 	vldr	d7, [r7, #224]	; 0xe0
 800ce72:	ed87 7b52 	vstr	d7, [r7, #328]	; 0x148
    for (qq = 2; qq < 4; qq++) {
 800ce76:	2302      	movs	r3, #2
 800ce78:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800ce7c:	e013      	b.n	800cea6 <svd_u3DvUgOe+0x45e>
      work[qq - 1] = 0.0;
 800ce7e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800ce82:	3b01      	subs	r3, #1
 800ce84:	00db      	lsls	r3, r3, #3
 800ce86:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800ce8a:	4413      	add	r3, r2
 800ce8c:	f1a3 01d0 	sub.w	r1, r3, #208	; 0xd0
 800ce90:	f04f 0200 	mov.w	r2, #0
 800ce94:	f04f 0300 	mov.w	r3, #0
 800ce98:	e9c1 2300 	strd	r2, r3, [r1]
    for (qq = 2; qq < 4; qq++) {
 800ce9c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800cea0:	3301      	adds	r3, #1
 800cea2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800cea6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800ceaa:	2b03      	cmp	r3, #3
 800ceac:	dde7      	ble.n	800ce7e <svd_u3DvUgOe+0x436>
    }

    for (qq = 1; qq + 1 < 4; qq++) {
 800ceae:	2301      	movs	r3, #1
 800ceb0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800ceb4:	e025      	b.n	800cf02 <svd_u3DvUgOe+0x4ba>
 800ceb6:	bf00      	nop
 800ceb8:	3ff00000 	.word	0x3ff00000
      xaxpy_OQ28XA21(2, e[qq], b_A, 3 * qq + 2, work, 2);
 800cebc:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800cec0:	00db      	lsls	r3, r3, #3
 800cec2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800cec6:	4413      	add	r3, r2
 800cec8:	3bb8      	subs	r3, #184	; 0xb8
 800ceca:	ed93 7b00 	vldr	d7, [r3]
 800cece:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 800ced2:	4613      	mov	r3, r2
 800ced4:	005b      	lsls	r3, r3, #1
 800ced6:	4413      	add	r3, r2
 800ced8:	1c98      	adds	r0, r3, #2
 800ceda:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800cede:	f507 71bc 	add.w	r1, r7, #376	; 0x178
 800cee2:	2302      	movs	r3, #2
 800cee4:	9300      	str	r3, [sp, #0]
 800cee6:	4613      	mov	r3, r2
 800cee8:	4602      	mov	r2, r0
 800ceea:	eeb0 0a47 	vmov.f32	s0, s14
 800ceee:	eef0 0a67 	vmov.f32	s1, s15
 800cef2:	2002      	movs	r0, #2
 800cef4:	f001 fbc7 	bl	800e686 <xaxpy_OQ28XA21>
    for (qq = 1; qq + 1 < 4; qq++) {
 800cef8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800cefc:	3301      	adds	r3, #1
 800cefe:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800cf02:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800cf06:	2b02      	cmp	r3, #2
 800cf08:	ddd8      	ble.n	800cebc <svd_u3DvUgOe+0x474>
    }

    for (qq = 1; qq + 1 < 4; qq++) {
 800cf0a:	2301      	movs	r3, #1
 800cf0c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800cf10:	e031      	b.n	800cf76 <svd_u3DvUgOe+0x52e>
      xaxpy_Wxch84Fl(2, -e[qq] / e[1], work, 2, b_A, 3 * qq + 2);
 800cf12:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800cf16:	00db      	lsls	r3, r3, #3
 800cf18:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800cf1c:	4413      	add	r3, r2
 800cf1e:	3bb8      	subs	r3, #184	; 0xb8
 800cf20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf24:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 800cf28:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800cf2c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800cf30:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 800cf34:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800cf38:	f7f3 fc7a 	bl	8000830 <__aeabi_ddiv>
 800cf3c:	4602      	mov	r2, r0
 800cf3e:	460b      	mov	r3, r1
 800cf40:	ec43 2b17 	vmov	d7, r2, r3
 800cf44:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 800cf48:	4613      	mov	r3, r2
 800cf4a:	005b      	lsls	r3, r3, #1
 800cf4c:	4413      	add	r3, r2
 800cf4e:	3302      	adds	r3, #2
 800cf50:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 800cf54:	f507 7198 	add.w	r1, r7, #304	; 0x130
 800cf58:	9300      	str	r3, [sp, #0]
 800cf5a:	4613      	mov	r3, r2
 800cf5c:	2202      	movs	r2, #2
 800cf5e:	eeb0 0a47 	vmov.f32	s0, s14
 800cf62:	eef0 0a67 	vmov.f32	s1, s15
 800cf66:	2002      	movs	r0, #2
 800cf68:	f001 fbe1 	bl	800e72e <xaxpy_Wxch84Fl>
    for (qq = 1; qq + 1 < 4; qq++) {
 800cf6c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800cf70:	3301      	adds	r3, #1
 800cf72:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800cf76:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800cf7a:	2b02      	cmp	r3, #2
 800cf7c:	ddc9      	ble.n	800cf12 <svd_u3DvUgOe+0x4ca>
    }
  }

  for (qq = 1; qq + 1 < 4; qq++) {
 800cf7e:	2301      	movs	r3, #1
 800cf80:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800cf84:	e016      	b.n	800cfb4 <svd_u3DvUgOe+0x56c>
    V[qq] = e[qq];
 800cf86:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800cf8a:	00da      	lsls	r2, r3, #3
 800cf8c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	1899      	adds	r1, r3, r2
 800cf94:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800cf98:	00db      	lsls	r3, r3, #3
 800cf9a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800cf9e:	4413      	add	r3, r2
 800cfa0:	3bb8      	subs	r3, #184	; 0xb8
 800cfa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfa6:	e9c1 2300 	strd	r2, r3, [r1]
  for (qq = 1; qq + 1 < 4; qq++) {
 800cfaa:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800cfae:	3301      	adds	r3, #1
 800cfb0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800cfb4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800cfb8:	2b02      	cmp	r3, #2
 800cfba:	dde4      	ble.n	800cf86 <svd_u3DvUgOe+0x53e>
  }

  apply_transform = false;
 800cfbc:	2300      	movs	r3, #0
 800cfbe:	f887 31eb 	strb.w	r3, [r7, #491]	; 0x1eb
  nrm = xnrm2_xDOlDEtw(2, b_A, 5);
 800cfc2:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800cfc6:	2205      	movs	r2, #5
 800cfc8:	4619      	mov	r1, r3
 800cfca:	2002      	movs	r0, #2
 800cfcc:	f002 f970 	bl	800f2b0 <xnrm2_xDOlDEtw>
 800cfd0:	ed87 0b72 	vstr	d0, [r7, #456]	; 0x1c8
  if (nrm > 0.0) {
 800cfd4:	f04f 0200 	mov.w	r2, #0
 800cfd8:	f04f 0300 	mov.w	r3, #0
 800cfdc:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	; 0x1c8
 800cfe0:	f7f3 fd8c 	bl	8000afc <__aeabi_dcmpgt>
 800cfe4:	4603      	mov	r3, r0
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	f000 808a 	beq.w	800d100 <svd_u3DvUgOe+0x6b8>
    apply_transform = true;
 800cfec:	2301      	movs	r3, #1
 800cfee:	f887 31eb 	strb.w	r3, [r7, #491]	; 0x1eb
    if (b_A[4] < 0.0) {
 800cff2:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800cff6:	f04f 0200 	mov.w	r2, #0
 800cffa:	f04f 0300 	mov.w	r3, #0
 800cffe:	f7f3 fd5f 	bl	8000ac0 <__aeabi_dcmplt>
 800d002:	4603      	mov	r3, r0
 800d004:	2b00      	cmp	r3, #0
 800d006:	d00e      	beq.n	800d026 <svd_u3DvUgOe+0x5de>
      b_s[1] = -nrm;
 800d008:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800d00c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d010:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800d014:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800d018:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800d01c:	ed97 7b34 	vldr	d7, [r7, #208]	; 0xd0
 800d020:	ed87 7b5a 	vstr	d7, [r7, #360]	; 0x168
 800d024:	e003      	b.n	800d02e <svd_u3DvUgOe+0x5e6>
    } else {
      b_s[1] = nrm;
 800d026:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 800d02a:	e9c7 235a 	strd	r2, r3, [r7, #360]	; 0x168
    }

    if (fabs(b_s[1]) >= 1.0020841800044864E-292) {
 800d02e:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 800d032:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 800d036:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d03a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800d03e:	f04f 0200 	mov.w	r2, #0
 800d042:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800d046:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800d04a:	f7f3 fd4d 	bl	8000ae8 <__aeabi_dcmpge>
 800d04e:	4603      	mov	r3, r0
 800d050:	2b00      	cmp	r3, #0
 800d052:	d016      	beq.n	800d082 <svd_u3DvUgOe+0x63a>
      xscal_59GtRAwv(2, 1.0 / b_s[1], b_A, 5);
 800d054:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 800d058:	f04f 0000 	mov.w	r0, #0
 800d05c:	49d6      	ldr	r1, [pc, #856]	; (800d3b8 <svd_u3DvUgOe+0x970>)
 800d05e:	f7f3 fbe7 	bl	8000830 <__aeabi_ddiv>
 800d062:	4602      	mov	r2, r0
 800d064:	460b      	mov	r3, r1
 800d066:	ec43 2b17 	vmov	d7, r2, r3
 800d06a:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800d06e:	2205      	movs	r2, #5
 800d070:	4619      	mov	r1, r3
 800d072:	eeb0 0a47 	vmov.f32	s0, s14
 800d076:	eef0 0a67 	vmov.f32	s1, s15
 800d07a:	2002      	movs	r0, #2
 800d07c:	f002 fbe0 	bl	800f840 <xscal_59GtRAwv>
 800d080:	e026      	b.n	800d0d0 <svd_u3DvUgOe+0x688>
    } else {
      for (qjj = 4; qjj < 6; qjj++) {
 800d082:	2304      	movs	r3, #4
 800d084:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800d088:	e01e      	b.n	800d0c8 <svd_u3DvUgOe+0x680>
        b_A[qjj] /= b_s[1];
 800d08a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800d08e:	00db      	lsls	r3, r3, #3
 800d090:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d094:	4413      	add	r3, r2
 800d096:	3b88      	subs	r3, #136	; 0x88
 800d098:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d09c:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 800d0a0:	f7f3 fbc6 	bl	8000830 <__aeabi_ddiv>
 800d0a4:	4602      	mov	r2, r0
 800d0a6:	460b      	mov	r3, r1
 800d0a8:	4610      	mov	r0, r2
 800d0aa:	4619      	mov	r1, r3
 800d0ac:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800d0b0:	00db      	lsls	r3, r3, #3
 800d0b2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d0b6:	4413      	add	r3, r2
 800d0b8:	3b88      	subs	r3, #136	; 0x88
 800d0ba:	e9c3 0100 	strd	r0, r1, [r3]
      for (qjj = 4; qjj < 6; qjj++) {
 800d0be:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800d0c2:	3301      	adds	r3, #1
 800d0c4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800d0c8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800d0cc:	2b05      	cmp	r3, #5
 800d0ce:	dddc      	ble.n	800d08a <svd_u3DvUgOe+0x642>
      }
    }

    b_A[4]++;
 800d0d0:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800d0d4:	f04f 0200 	mov.w	r2, #0
 800d0d8:	4bb7      	ldr	r3, [pc, #732]	; (800d3b8 <svd_u3DvUgOe+0x970>)
 800d0da:	f7f3 f8c9 	bl	8000270 <__adddf3>
 800d0de:	4602      	mov	r2, r0
 800d0e0:	460b      	mov	r3, r1
 800d0e2:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
    b_s[1] = -b_s[1];
 800d0e6:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 800d0ea:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 800d0ee:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800d0f2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d0f6:	ed97 7b30 	vldr	d7, [r7, #192]	; 0xc0
 800d0fa:	ed87 7b5a 	vstr	d7, [r7, #360]	; 0x168
 800d0fe:	e005      	b.n	800d10c <svd_u3DvUgOe+0x6c4>
  } else {
    b_s[1] = 0.0;
 800d100:	f04f 0200 	mov.w	r2, #0
 800d104:	f04f 0300 	mov.w	r3, #0
 800d108:	e9c7 235a 	strd	r2, r3, [r7, #360]	; 0x168
  }

  for (d = 2; d + 1 < 4; d++) {
 800d10c:	2302      	movs	r3, #2
 800d10e:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 800d112:	e048      	b.n	800d1a6 <svd_u3DvUgOe+0x75e>
    qjj = 3 * d + 1;
 800d114:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 800d118:	4613      	mov	r3, r2
 800d11a:	005b      	lsls	r3, r3, #1
 800d11c:	4413      	add	r3, r2
 800d11e:	3301      	adds	r3, #1
 800d120:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    if (apply_transform) {
 800d124:	f897 31eb 	ldrb.w	r3, [r7, #491]	; 0x1eb
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d025      	beq.n	800d178 <svd_u3DvUgOe+0x730>
      xaxpy_guu0hJif(2, -(xdotc_mznw4aLl(2, b_A, 5, b_A, qjj + 1) / b_A[4]), 5,
 800d12c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800d130:	3301      	adds	r3, #1
 800d132:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 800d136:	f507 71bc 	add.w	r1, r7, #376	; 0x178
 800d13a:	9300      	str	r3, [sp, #0]
 800d13c:	4613      	mov	r3, r2
 800d13e:	2205      	movs	r2, #5
 800d140:	2002      	movs	r0, #2
 800d142:	f001 fb9c 	bl	800e87e <xdotc_mznw4aLl>
 800d146:	ec51 0b10 	vmov	r0, r1, d0
 800d14a:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 800d14e:	f7f3 fb6f 	bl	8000830 <__aeabi_ddiv>
 800d152:	4602      	mov	r2, r0
 800d154:	460b      	mov	r3, r1
 800d156:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 800d15a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800d15e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800d162:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800d166:	3301      	adds	r3, #1
 800d168:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 800d16c:	2105      	movs	r1, #5
 800d16e:	ed97 0b2e 	vldr	d0, [r7, #184]	; 0xb8
 800d172:	2002      	movs	r0, #2
 800d174:	f001 fb2f 	bl	800e7d6 <xaxpy_guu0hJif>
                     b_A, qjj + 1);
    }

    e[d] = b_A[qjj];
 800d178:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800d17c:	00db      	lsls	r3, r3, #3
 800d17e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d182:	4413      	add	r3, r2
 800d184:	3b88      	subs	r3, #136	; 0x88
 800d186:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d18a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800d18e:	00db      	lsls	r3, r3, #3
 800d190:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d194:	4413      	add	r3, r2
 800d196:	3bb8      	subs	r3, #184	; 0xb8
 800d198:	e9c3 0100 	strd	r0, r1, [r3]
  for (d = 2; d + 1 < 4; d++) {
 800d19c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800d1a0:	3301      	adds	r3, #1
 800d1a2:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 800d1a6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800d1aa:	2b02      	cmp	r3, #2
 800d1ac:	ddb2      	ble.n	800d114 <svd_u3DvUgOe+0x6cc>
  }

  for (qq = 1; qq + 1 < 4; qq++) {
 800d1ae:	2301      	movs	r3, #1
 800d1b0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800d1b4:	e017      	b.n	800d1e6 <svd_u3DvUgOe+0x79e>
    U[qq + 3] = b_A[qq + 3];
 800d1b6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d1ba:	1cd8      	adds	r0, r3, #3
 800d1bc:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d1c0:	3303      	adds	r3, #3
 800d1c2:	00da      	lsls	r2, r3, #3
 800d1c4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d1c8:	1899      	adds	r1, r3, r2
 800d1ca:	00c3      	lsls	r3, r0, #3
 800d1cc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d1d0:	4413      	add	r3, r2
 800d1d2:	3b88      	subs	r3, #136	; 0x88
 800d1d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1d8:	e9c1 2300 	strd	r2, r3, [r1]
  for (qq = 1; qq + 1 < 4; qq++) {
 800d1dc:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d1e0:	3301      	adds	r3, #1
 800d1e2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800d1e6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d1ea:	2b02      	cmp	r3, #2
 800d1ec:	dde3      	ble.n	800d1b6 <svd_u3DvUgOe+0x76e>
  }

  m = 1;
 800d1ee:	2301      	movs	r3, #1
 800d1f0:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  b_s[2] = b_A[8];
 800d1f4:	e9d7 236e 	ldrd	r2, r3, [r7, #440]	; 0x1b8
 800d1f8:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170
  U[6] = 0.0;
 800d1fc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d200:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d204:	f04f 0200 	mov.w	r2, #0
 800d208:	f04f 0300 	mov.w	r3, #0
 800d20c:	e9c1 2300 	strd	r2, r3, [r1]
  U[7] = 0.0;
 800d210:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d214:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d218:	f04f 0200 	mov.w	r2, #0
 800d21c:	f04f 0300 	mov.w	r3, #0
 800d220:	e9c1 2300 	strd	r2, r3, [r1]
  U[8] = 1.0;
 800d224:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d228:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800d22c:	f04f 0200 	mov.w	r2, #0
 800d230:	4b61      	ldr	r3, [pc, #388]	; (800d3b8 <svd_u3DvUgOe+0x970>)
 800d232:	e9c1 2300 	strd	r2, r3, [r1]
  for (d = 1; d >= 0; d--) {
 800d236:	2301      	movs	r3, #1
 800d238:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 800d23c:	e100      	b.n	800d440 <svd_u3DvUgOe+0x9f8>
    qq = 3 * d + d;
 800d23e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800d242:	009b      	lsls	r3, r3, #2
 800d244:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    if (b_s[d] != 0.0) {
 800d248:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800d24c:	00db      	lsls	r3, r3, #3
 800d24e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d252:	4413      	add	r3, r2
 800d254:	3ba0      	subs	r3, #160	; 0xa0
 800d256:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d25a:	f04f 0200 	mov.w	r2, #0
 800d25e:	f04f 0300 	mov.w	r3, #0
 800d262:	f7f3 fc23 	bl	8000aac <__aeabi_dcmpeq>
 800d266:	4603      	mov	r3, r0
 800d268:	2b00      	cmp	r3, #0
 800d26a:	f040 80a7 	bne.w	800d3bc <svd_u3DvUgOe+0x974>
      for (kase = d + 1; kase + 1 < 4; kase++) {
 800d26e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800d272:	3301      	adds	r3, #1
 800d274:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 800d278:	e043      	b.n	800d302 <svd_u3DvUgOe+0x8ba>
        qjj = (3 * kase + d) + 1;
 800d27a:	f8d7 21f8 	ldr.w	r2, [r7, #504]	; 0x1f8
 800d27e:	4613      	mov	r3, r2
 800d280:	005b      	lsls	r3, r3, #1
 800d282:	441a      	add	r2, r3
 800d284:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800d288:	4413      	add	r3, r2
 800d28a:	3301      	adds	r3, #1
 800d28c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
        xaxpy_guu0hJif(3 - d, -(xdotc_mznw4aLl(3 - d, U, qq + 1, U, qjj) / U[qq]),
 800d290:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800d294:	f1c3 0403 	rsb	r4, r3, #3
 800d298:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800d29c:	f1c3 0003 	rsb	r0, r3, #3
 800d2a0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d2a4:	1c5a      	adds	r2, r3, #1
 800d2a6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800d2aa:	9300      	str	r3, [sp, #0]
 800d2ac:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d2b0:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 800d2b4:	f001 fae3 	bl	800e87e <xdotc_mznw4aLl>
 800d2b8:	ec51 0b10 	vmov	r0, r1, d0
 800d2bc:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d2c0:	00da      	lsls	r2, r3, #3
 800d2c2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d2c6:	4413      	add	r3, r2
 800d2c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2cc:	f7f3 fab0 	bl	8000830 <__aeabi_ddiv>
 800d2d0:	4602      	mov	r2, r0
 800d2d2:	460b      	mov	r3, r1
 800d2d4:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 800d2d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800d2dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d2e0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d2e4:	1c59      	adds	r1, r3, #1
 800d2e6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800d2ea:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 800d2ee:	ed97 0b2c 	vldr	d0, [r7, #176]	; 0xb0
 800d2f2:	4620      	mov	r0, r4
 800d2f4:	f001 fa6f 	bl	800e7d6 <xaxpy_guu0hJif>
      for (kase = d + 1; kase + 1 < 4; kase++) {
 800d2f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800d2fc:	3301      	adds	r3, #1
 800d2fe:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 800d302:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800d306:	2b02      	cmp	r3, #2
 800d308:	ddb7      	ble.n	800d27a <svd_u3DvUgOe+0x832>
                       qq + 1, U, qjj);
      }

      for (qjj = d; qjj + 1 < 4; qjj++) {
 800d30a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800d30e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800d312:	e026      	b.n	800d362 <svd_u3DvUgOe+0x91a>
        kase = 3 * d + qjj;
 800d314:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 800d318:	4613      	mov	r3, r2
 800d31a:	005b      	lsls	r3, r3, #1
 800d31c:	441a      	add	r2, r3
 800d31e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800d322:	4413      	add	r3, r2
 800d324:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        U[kase] = -U[kase];
 800d328:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800d32c:	00da      	lsls	r2, r3, #3
 800d32e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d332:	4413      	add	r3, r2
 800d334:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d338:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800d33c:	00da      	lsls	r2, r3, #3
 800d33e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d342:	4413      	add	r3, r2
 800d344:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
 800d348:	f081 4200 	eor.w	r2, r1, #2147483648	; 0x80000000
 800d34c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800d350:	ed97 7b2a 	vldr	d7, [r7, #168]	; 0xa8
 800d354:	ed83 7b00 	vstr	d7, [r3]
      for (qjj = d; qjj + 1 < 4; qjj++) {
 800d358:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800d35c:	3301      	adds	r3, #1
 800d35e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800d362:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800d366:	2b02      	cmp	r3, #2
 800d368:	ddd4      	ble.n	800d314 <svd_u3DvUgOe+0x8cc>
      }

      U[qq]++;
 800d36a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d36e:	00da      	lsls	r2, r3, #3
 800d370:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d374:	189c      	adds	r4, r3, r2
 800d376:	e9d4 0100 	ldrd	r0, r1, [r4]
 800d37a:	f04f 0200 	mov.w	r2, #0
 800d37e:	4b0e      	ldr	r3, [pc, #56]	; (800d3b8 <svd_u3DvUgOe+0x970>)
 800d380:	f7f2 ff76 	bl	8000270 <__adddf3>
 800d384:	4602      	mov	r2, r0
 800d386:	460b      	mov	r3, r1
 800d388:	e9c4 2300 	strd	r2, r3, [r4]
      if (d - 1 >= 0) {
 800d38c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800d390:	2b00      	cmp	r3, #0
 800d392:	dd50      	ble.n	800d436 <svd_u3DvUgOe+0x9ee>
        U[3 * d] = 0.0;
 800d394:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 800d398:	4613      	mov	r3, r2
 800d39a:	005b      	lsls	r3, r3, #1
 800d39c:	4413      	add	r3, r2
 800d39e:	00db      	lsls	r3, r3, #3
 800d3a0:	461a      	mov	r2, r3
 800d3a2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d3a6:	1899      	adds	r1, r3, r2
 800d3a8:	f04f 0200 	mov.w	r2, #0
 800d3ac:	f04f 0300 	mov.w	r3, #0
 800d3b0:	e9c1 2300 	strd	r2, r3, [r1]
 800d3b4:	e03f      	b.n	800d436 <svd_u3DvUgOe+0x9ee>
 800d3b6:	bf00      	nop
 800d3b8:	3ff00000 	.word	0x3ff00000
      }
    } else {
      U[3 * d] = 0.0;
 800d3bc:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 800d3c0:	4613      	mov	r3, r2
 800d3c2:	005b      	lsls	r3, r3, #1
 800d3c4:	4413      	add	r3, r2
 800d3c6:	00db      	lsls	r3, r3, #3
 800d3c8:	461a      	mov	r2, r3
 800d3ca:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d3ce:	1899      	adds	r1, r3, r2
 800d3d0:	f04f 0200 	mov.w	r2, #0
 800d3d4:	f04f 0300 	mov.w	r3, #0
 800d3d8:	e9c1 2300 	strd	r2, r3, [r1]
      U[3 * d + 1] = 0.0;
 800d3dc:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 800d3e0:	4613      	mov	r3, r2
 800d3e2:	005b      	lsls	r3, r3, #1
 800d3e4:	4413      	add	r3, r2
 800d3e6:	00db      	lsls	r3, r3, #3
 800d3e8:	f103 0208 	add.w	r2, r3, #8
 800d3ec:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d3f0:	1899      	adds	r1, r3, r2
 800d3f2:	f04f 0200 	mov.w	r2, #0
 800d3f6:	f04f 0300 	mov.w	r3, #0
 800d3fa:	e9c1 2300 	strd	r2, r3, [r1]
      U[3 * d + 2] = 0.0;
 800d3fe:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 800d402:	4613      	mov	r3, r2
 800d404:	005b      	lsls	r3, r3, #1
 800d406:	4413      	add	r3, r2
 800d408:	00db      	lsls	r3, r3, #3
 800d40a:	f103 0210 	add.w	r2, r3, #16
 800d40e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d412:	1899      	adds	r1, r3, r2
 800d414:	f04f 0200 	mov.w	r2, #0
 800d418:	f04f 0300 	mov.w	r3, #0
 800d41c:	e9c1 2300 	strd	r2, r3, [r1]
      U[qq] = 1.0;
 800d420:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d424:	00da      	lsls	r2, r3, #3
 800d426:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d42a:	1899      	adds	r1, r3, r2
 800d42c:	f04f 0200 	mov.w	r2, #0
 800d430:	4b11      	ldr	r3, [pc, #68]	; (800d478 <svd_u3DvUgOe+0xa30>)
 800d432:	e9c1 2300 	strd	r2, r3, [r1]
  for (d = 1; d >= 0; d--) {
 800d436:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800d43a:	3b01      	subs	r3, #1
 800d43c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 800d440:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800d444:	2b00      	cmp	r3, #0
 800d446:	f6bf aefa 	bge.w	800d23e <svd_u3DvUgOe+0x7f6>
    }
  }

  for (qq = 2; qq >= 0; qq--) {
 800d44a:	2302      	movs	r3, #2
 800d44c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800d450:	e096      	b.n	800d580 <svd_u3DvUgOe+0xb38>
    if ((qq + 1 <= 1) && (e[0] != 0.0)) {
 800d452:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d456:	2b00      	cmp	r3, #0
 800d458:	dc4c      	bgt.n	800d4f4 <svd_u3DvUgOe+0xaac>
 800d45a:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800d45e:	f04f 0200 	mov.w	r2, #0
 800d462:	f04f 0300 	mov.w	r3, #0
 800d466:	f7f3 fb21 	bl	8000aac <__aeabi_dcmpeq>
 800d46a:	4603      	mov	r3, r0
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d141      	bne.n	800d4f4 <svd_u3DvUgOe+0xaac>
      for (d = 2; d < 4; d++) {
 800d470:	2302      	movs	r3, #2
 800d472:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 800d476:	e039      	b.n	800d4ec <svd_u3DvUgOe+0xaa4>
 800d478:	3ff00000 	.word	0x3ff00000
        qjj = (d - 1) * 3 + 2;
 800d47c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800d480:	1e5a      	subs	r2, r3, #1
 800d482:	4613      	mov	r3, r2
 800d484:	005b      	lsls	r3, r3, #1
 800d486:	4413      	add	r3, r2
 800d488:	3302      	adds	r3, #2
 800d48a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
        xaxpy_guu0hJif(2, -(xdotc_mznw4aLl(2, V, 2, V, qjj) / V[1]), 2, V, qjj);
 800d48e:	f507 7280 	add.w	r2, r7, #256	; 0x100
 800d492:	f507 7180 	add.w	r1, r7, #256	; 0x100
 800d496:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800d49a:	9300      	str	r3, [sp, #0]
 800d49c:	6813      	ldr	r3, [r2, #0]
 800d49e:	2202      	movs	r2, #2
 800d4a0:	6809      	ldr	r1, [r1, #0]
 800d4a2:	2002      	movs	r0, #2
 800d4a4:	f001 f9eb 	bl	800e87e <xdotc_mznw4aLl>
 800d4a8:	ec51 0b10 	vmov	r0, r1, d0
 800d4ac:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	3308      	adds	r3, #8
 800d4b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4b8:	f7f3 f9ba 	bl	8000830 <__aeabi_ddiv>
 800d4bc:	4602      	mov	r2, r0
 800d4be:	460b      	mov	r3, r1
 800d4c0:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 800d4c4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800d4c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800d4cc:	f507 7280 	add.w	r2, r7, #256	; 0x100
 800d4d0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800d4d4:	6812      	ldr	r2, [r2, #0]
 800d4d6:	2102      	movs	r1, #2
 800d4d8:	ed97 0b28 	vldr	d0, [r7, #160]	; 0xa0
 800d4dc:	2002      	movs	r0, #2
 800d4de:	f001 f97a 	bl	800e7d6 <xaxpy_guu0hJif>
      for (d = 2; d < 4; d++) {
 800d4e2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800d4e6:	3301      	adds	r3, #1
 800d4e8:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 800d4ec:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800d4f0:	2b03      	cmp	r3, #3
 800d4f2:	ddc3      	ble.n	800d47c <svd_u3DvUgOe+0xa34>
      }
    }

    V[3 * qq] = 0.0;
 800d4f4:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 800d4f8:	4613      	mov	r3, r2
 800d4fa:	005b      	lsls	r3, r3, #1
 800d4fc:	4413      	add	r3, r2
 800d4fe:	00db      	lsls	r3, r3, #3
 800d500:	461a      	mov	r2, r3
 800d502:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	1899      	adds	r1, r3, r2
 800d50a:	f04f 0200 	mov.w	r2, #0
 800d50e:	f04f 0300 	mov.w	r3, #0
 800d512:	e9c1 2300 	strd	r2, r3, [r1]
    V[3 * qq + 1] = 0.0;
 800d516:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 800d51a:	4613      	mov	r3, r2
 800d51c:	005b      	lsls	r3, r3, #1
 800d51e:	4413      	add	r3, r2
 800d520:	00db      	lsls	r3, r3, #3
 800d522:	f103 0208 	add.w	r2, r3, #8
 800d526:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	1899      	adds	r1, r3, r2
 800d52e:	f04f 0200 	mov.w	r2, #0
 800d532:	f04f 0300 	mov.w	r3, #0
 800d536:	e9c1 2300 	strd	r2, r3, [r1]
    V[3 * qq + 2] = 0.0;
 800d53a:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 800d53e:	4613      	mov	r3, r2
 800d540:	005b      	lsls	r3, r3, #1
 800d542:	4413      	add	r3, r2
 800d544:	00db      	lsls	r3, r3, #3
 800d546:	f103 0210 	add.w	r2, r3, #16
 800d54a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	1899      	adds	r1, r3, r2
 800d552:	f04f 0200 	mov.w	r2, #0
 800d556:	f04f 0300 	mov.w	r3, #0
 800d55a:	e9c1 2300 	strd	r2, r3, [r1]
    V[qq + 3 * qq] = 1.0;
 800d55e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d562:	015a      	lsls	r2, r3, #5
 800d564:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	1899      	adds	r1, r3, r2
 800d56c:	f04f 0200 	mov.w	r2, #0
 800d570:	4bbd      	ldr	r3, [pc, #756]	; (800d868 <svd_u3DvUgOe+0xe20>)
 800d572:	e9c1 2300 	strd	r2, r3, [r1]
  for (qq = 2; qq >= 0; qq--) {
 800d576:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d57a:	3b01      	subs	r3, #1
 800d57c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800d580:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d584:	2b00      	cmp	r3, #0
 800d586:	f6bf af64 	bge.w	800d452 <svd_u3DvUgOe+0xa0a>
  }

  ztest = e[0];
 800d58a:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800d58e:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
  if (b_s[0] != 0.0) {
 800d592:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	; 0x160
 800d596:	f04f 0200 	mov.w	r2, #0
 800d59a:	f04f 0300 	mov.w	r3, #0
 800d59e:	f7f3 fa85 	bl	8000aac <__aeabi_dcmpeq>
 800d5a2:	4603      	mov	r3, r0
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d12a      	bne.n	800d5fe <svd_u3DvUgOe+0xbb6>
    rt = fabs(b_s[0]);
 800d5a8:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 800d5ac:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 800d5b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d5b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d5b8:	ed97 7b26 	vldr	d7, [r7, #152]	; 0x98
 800d5bc:	ed87 7b4a 	vstr	d7, [r7, #296]	; 0x128
    nrm = b_s[0] / rt;
 800d5c0:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	; 0x160
 800d5c4:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800d5c8:	f7f3 f932 	bl	8000830 <__aeabi_ddiv>
 800d5cc:	4602      	mov	r2, r0
 800d5ce:	460b      	mov	r3, r1
 800d5d0:	e9c7 2372 	strd	r2, r3, [r7, #456]	; 0x1c8
    b_s[0] = rt;
 800d5d4:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800d5d8:	e9c7 2358 	strd	r2, r3, [r7, #352]	; 0x160
    ztest = e[0] / nrm;
 800d5dc:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800d5e0:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 800d5e4:	f7f3 f924 	bl	8000830 <__aeabi_ddiv>
 800d5e8:	4602      	mov	r2, r0
 800d5ea:	460b      	mov	r3, r1
 800d5ec:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
    xscal_eaAxXsvQ(nrm, U, 1);
 800d5f0:	2101      	movs	r1, #1
 800d5f2:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 800d5f6:	ed97 0b72 	vldr	d0, [r7, #456]	; 0x1c8
 800d5fa:	f002 f989 	bl	800f910 <xscal_eaAxXsvQ>
  }

  if (ztest != 0.0) {
 800d5fe:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 800d602:	f04f 0200 	mov.w	r2, #0
 800d606:	f04f 0300 	mov.w	r3, #0
 800d60a:	f7f3 fa4f 	bl	8000aac <__aeabi_dcmpeq>
 800d60e:	4603      	mov	r3, r0
 800d610:	2b00      	cmp	r3, #0
 800d612:	d12b      	bne.n	800d66c <svd_u3DvUgOe+0xc24>
    rt = fabs(ztest);
 800d614:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800d618:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800d61c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d620:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d624:	ed97 7b24 	vldr	d7, [r7, #144]	; 0x90
 800d628:	ed87 7b4a 	vstr	d7, [r7, #296]	; 0x128
    nrm = rt / ztest;
 800d62c:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800d630:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800d634:	f7f3 f8fc 	bl	8000830 <__aeabi_ddiv>
 800d638:	4602      	mov	r2, r0
 800d63a:	460b      	mov	r3, r1
 800d63c:	e9c7 2372 	strd	r2, r3, [r7, #456]	; 0x1c8
    ztest = rt;
 800d640:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800d644:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
    b_s[1] *= nrm;
 800d648:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	; 0x168
 800d64c:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 800d650:	f7f2 ffc4 	bl	80005dc <__aeabi_dmul>
 800d654:	4602      	mov	r2, r0
 800d656:	460b      	mov	r3, r1
 800d658:	e9c7 235a 	strd	r2, r3, [r7, #360]	; 0x168
    xscal_eaAxXsvQ(nrm, V, 4);
 800d65c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800d660:	2104      	movs	r1, #4
 800d662:	6818      	ldr	r0, [r3, #0]
 800d664:	ed97 0b72 	vldr	d0, [r7, #456]	; 0x1c8
 800d668:	f002 f952 	bl	800f910 <xscal_eaAxXsvQ>
  }

  e[0] = ztest;
 800d66c:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800d670:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
  ztest = b_A[7];
 800d674:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	; 0x1b0
 800d678:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
  if (b_s[1] != 0.0) {
 800d67c:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	; 0x168
 800d680:	f04f 0200 	mov.w	r2, #0
 800d684:	f04f 0300 	mov.w	r3, #0
 800d688:	f7f3 fa10 	bl	8000aac <__aeabi_dcmpeq>
 800d68c:	4603      	mov	r3, r0
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d12a      	bne.n	800d6e8 <svd_u3DvUgOe+0xca0>
    rt = fabs(b_s[1]);
 800d692:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 800d696:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800d69a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d69e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800d6a2:	ed97 7b22 	vldr	d7, [r7, #136]	; 0x88
 800d6a6:	ed87 7b4a 	vstr	d7, [r7, #296]	; 0x128
    nrm = b_s[1] / rt;
 800d6aa:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	; 0x168
 800d6ae:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800d6b2:	f7f3 f8bd 	bl	8000830 <__aeabi_ddiv>
 800d6b6:	4602      	mov	r2, r0
 800d6b8:	460b      	mov	r3, r1
 800d6ba:	e9c7 2372 	strd	r2, r3, [r7, #456]	; 0x1c8
    b_s[1] = rt;
 800d6be:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800d6c2:	e9c7 235a 	strd	r2, r3, [r7, #360]	; 0x168
    ztest = b_A[7] / nrm;
 800d6c6:	e9d7 016c 	ldrd	r0, r1, [r7, #432]	; 0x1b0
 800d6ca:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 800d6ce:	f7f3 f8af 	bl	8000830 <__aeabi_ddiv>
 800d6d2:	4602      	mov	r2, r0
 800d6d4:	460b      	mov	r3, r1
 800d6d6:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
    xscal_eaAxXsvQ(nrm, U, 4);
 800d6da:	2104      	movs	r1, #4
 800d6dc:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 800d6e0:	ed97 0b72 	vldr	d0, [r7, #456]	; 0x1c8
 800d6e4:	f002 f914 	bl	800f910 <xscal_eaAxXsvQ>
  }

  if (ztest != 0.0) {
 800d6e8:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 800d6ec:	f04f 0200 	mov.w	r2, #0
 800d6f0:	f04f 0300 	mov.w	r3, #0
 800d6f4:	f7f3 f9da 	bl	8000aac <__aeabi_dcmpeq>
 800d6f8:	4603      	mov	r3, r0
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d12b      	bne.n	800d756 <svd_u3DvUgOe+0xd0e>
    rt = fabs(ztest);
 800d6fe:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800d702:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d706:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d70a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d70e:	ed97 7b20 	vldr	d7, [r7, #128]	; 0x80
 800d712:	ed87 7b4a 	vstr	d7, [r7, #296]	; 0x128
    nrm = rt / ztest;
 800d716:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800d71a:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800d71e:	f7f3 f887 	bl	8000830 <__aeabi_ddiv>
 800d722:	4602      	mov	r2, r0
 800d724:	460b      	mov	r3, r1
 800d726:	e9c7 2372 	strd	r2, r3, [r7, #456]	; 0x1c8
    ztest = rt;
 800d72a:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800d72e:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
    b_s[2] = b_A[8] * nrm;
 800d732:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 800d736:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 800d73a:	f7f2 ff4f 	bl	80005dc <__aeabi_dmul>
 800d73e:	4602      	mov	r2, r0
 800d740:	460b      	mov	r3, r1
 800d742:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170
    xscal_eaAxXsvQ(nrm, V, 7);
 800d746:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800d74a:	2107      	movs	r1, #7
 800d74c:	6818      	ldr	r0, [r3, #0]
 800d74e:	ed97 0b72 	vldr	d0, [r7, #456]	; 0x1c8
 800d752:	f002 f8dd 	bl	800f910 <xscal_eaAxXsvQ>
  }

  e[1] = ztest;
 800d756:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800d75a:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
  if (b_s[2] != 0.0) {
 800d75e:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 800d762:	f04f 0200 	mov.w	r2, #0
 800d766:	f04f 0300 	mov.w	r3, #0
 800d76a:	f7f3 f99f 	bl	8000aac <__aeabi_dcmpeq>
 800d76e:	4603      	mov	r3, r0
 800d770:	2b00      	cmp	r3, #0
 800d772:	d11e      	bne.n	800d7b2 <svd_u3DvUgOe+0xd6a>
    rt = fabs(b_s[2]);
 800d774:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800d778:	67ba      	str	r2, [r7, #120]	; 0x78
 800d77a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d77e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d780:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 800d784:	ed87 7b4a 	vstr	d7, [r7, #296]	; 0x128
    nrm = b_s[2] / rt;
 800d788:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 800d78c:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800d790:	f7f3 f84e 	bl	8000830 <__aeabi_ddiv>
 800d794:	4602      	mov	r2, r0
 800d796:	460b      	mov	r3, r1
 800d798:	e9c7 2372 	strd	r2, r3, [r7, #456]	; 0x1c8
    b_s[2] = rt;
 800d79c:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800d7a0:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170
    xscal_eaAxXsvQ(nrm, U, 7);
 800d7a4:	2107      	movs	r1, #7
 800d7a6:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 800d7aa:	ed97 0b72 	vldr	d0, [r7, #456]	; 0x1c8
 800d7ae:	f002 f8af 	bl	800f910 <xscal_eaAxXsvQ>
  }

  e[2] = 0.0;
 800d7b2:	f04f 0200 	mov.w	r2, #0
 800d7b6:	f04f 0300 	mov.w	r3, #0
 800d7ba:	e9c7 2356 	strd	r2, r3, [r7, #344]	; 0x158
  qq = 0;
 800d7be:	2300      	movs	r3, #0
 800d7c0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  nrm = fmax(fmax(fmax(b_s[0], e[0]), fmax(b_s[1], ztest)), fmax(b_s[2], 0.0));
 800d7c4:	ed97 7b58 	vldr	d7, [r7, #352]	; 0x160
 800d7c8:	ed97 6b52 	vldr	d6, [r7, #328]	; 0x148
 800d7cc:	eeb0 1a46 	vmov.f32	s2, s12
 800d7d0:	eef0 1a66 	vmov.f32	s3, s13
 800d7d4:	eeb0 0a47 	vmov.f32	s0, s14
 800d7d8:	eef0 0a67 	vmov.f32	s1, s15
 800d7dc:	f00c fe12 	bl	801a404 <fmax>
 800d7e0:	eeb0 8a40 	vmov.f32	s16, s0
 800d7e4:	eef0 8a60 	vmov.f32	s17, s1
 800d7e8:	ed97 7b5a 	vldr	d7, [r7, #360]	; 0x168
 800d7ec:	ed97 6b44 	vldr	d6, [r7, #272]	; 0x110
 800d7f0:	eeb0 1a46 	vmov.f32	s2, s12
 800d7f4:	eef0 1a66 	vmov.f32	s3, s13
 800d7f8:	eeb0 0a47 	vmov.f32	s0, s14
 800d7fc:	eef0 0a67 	vmov.f32	s1, s15
 800d800:	f00c fe00 	bl	801a404 <fmax>
 800d804:	eeb0 7a40 	vmov.f32	s14, s0
 800d808:	eef0 7a60 	vmov.f32	s15, s1
 800d80c:	eeb0 1a47 	vmov.f32	s2, s14
 800d810:	eef0 1a67 	vmov.f32	s3, s15
 800d814:	eeb0 0a48 	vmov.f32	s0, s16
 800d818:	eef0 0a68 	vmov.f32	s1, s17
 800d81c:	f00c fdf2 	bl	801a404 <fmax>
 800d820:	eeb0 8a40 	vmov.f32	s16, s0
 800d824:	eef0 8a60 	vmov.f32	s17, s1
 800d828:	ed97 7b5c 	vldr	d7, [r7, #368]	; 0x170
 800d82c:	ed9f 1b0c 	vldr	d1, [pc, #48]	; 800d860 <svd_u3DvUgOe+0xe18>
 800d830:	eeb0 0a47 	vmov.f32	s0, s14
 800d834:	eef0 0a67 	vmov.f32	s1, s15
 800d838:	f00c fde4 	bl	801a404 <fmax>
 800d83c:	eeb0 7a40 	vmov.f32	s14, s0
 800d840:	eef0 7a60 	vmov.f32	s15, s1
 800d844:	eeb0 1a47 	vmov.f32	s2, s14
 800d848:	eef0 1a67 	vmov.f32	s3, s15
 800d84c:	eeb0 0a48 	vmov.f32	s0, s16
 800d850:	eef0 0a68 	vmov.f32	s1, s17
 800d854:	f00c fdd6 	bl	801a404 <fmax>
 800d858:	ed87 0b72 	vstr	d0, [r7, #456]	; 0x1c8
  while ((m + 2 > 0) && (qq < 75)) {
 800d85c:	f000 be8a 	b.w	800e574 <svd_u3DvUgOe+0x1b2c>
	...
 800d868:	3ff00000 	.word	0x3ff00000
    kase = m + 1;
 800d86c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800d870:	3301      	adds	r3, #1
 800d872:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
    int32_T exitg1;
    do {
      exitg1 = 0;
 800d876:	2300      	movs	r3, #0
 800d878:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
      d = kase;
 800d87c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800d880:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
      if (kase == 0) {
 800d884:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d103      	bne.n	800d894 <svd_u3DvUgOe+0xe4c>
        exitg1 = 1;
 800d88c:	2301      	movs	r3, #1
 800d88e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800d892:	e092      	b.n	800d9ba <svd_u3DvUgOe+0xf72>
      } else {
        rt = fabs(e[kase - 1]);
 800d894:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800d898:	3b01      	subs	r3, #1
 800d89a:	00db      	lsls	r3, r3, #3
 800d89c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d8a0:	4413      	add	r3, r2
 800d8a2:	3bb8      	subs	r3, #184	; 0xb8
 800d8a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8a8:	673a      	str	r2, [r7, #112]	; 0x70
 800d8aa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d8ae:	677b      	str	r3, [r7, #116]	; 0x74
 800d8b0:	ed97 7b1c 	vldr	d7, [r7, #112]	; 0x70
 800d8b4:	ed87 7b4a 	vstr	d7, [r7, #296]	; 0x128
        if (rt <= (fabs(b_s[kase - 1]) + fabs(b_s[kase])) *
 800d8b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800d8bc:	3b01      	subs	r3, #1
 800d8be:	00db      	lsls	r3, r3, #3
 800d8c0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d8c4:	4413      	add	r3, r2
 800d8c6:	3ba0      	subs	r3, #160	; 0xa0
 800d8c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8cc:	66ba      	str	r2, [r7, #104]	; 0x68
 800d8ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d8d2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d8d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800d8d8:	00db      	lsls	r3, r3, #3
 800d8da:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d8de:	4413      	add	r3, r2
 800d8e0:	3ba0      	subs	r3, #160	; 0xa0
 800d8e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8e6:	663a      	str	r2, [r7, #96]	; 0x60
 800d8e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d8ec:	667b      	str	r3, [r7, #100]	; 0x64
 800d8ee:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800d8f2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800d8f6:	f7f2 fcbb 	bl	8000270 <__adddf3>
 800d8fa:	4602      	mov	r2, r0
 800d8fc:	460b      	mov	r3, r1
 800d8fe:	4610      	mov	r0, r2
 800d900:	4619      	mov	r1, r3
 800d902:	f04f 0200 	mov.w	r2, #0
 800d906:	4bb2      	ldr	r3, [pc, #712]	; (800dbd0 <svd_u3DvUgOe+0x1188>)
 800d908:	f7f2 fe68 	bl	80005dc <__aeabi_dmul>
 800d90c:	4602      	mov	r2, r0
 800d90e:	460b      	mov	r3, r1
 800d910:	4610      	mov	r0, r2
 800d912:	4619      	mov	r1, r3
 800d914:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800d918:	f7f3 f8e6 	bl	8000ae8 <__aeabi_dcmpge>
 800d91c:	4603      	mov	r3, r0
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d012      	beq.n	800d948 <svd_u3DvUgOe+0xf00>
            2.2204460492503131E-16) {
          e[kase - 1] = 0.0;
 800d922:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800d926:	3b01      	subs	r3, #1
 800d928:	00db      	lsls	r3, r3, #3
 800d92a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d92e:	4413      	add	r3, r2
 800d930:	f1a3 01b8 	sub.w	r1, r3, #184	; 0xb8
 800d934:	f04f 0200 	mov.w	r2, #0
 800d938:	f04f 0300 	mov.w	r3, #0
 800d93c:	e9c1 2300 	strd	r2, r3, [r1]
          exitg1 = 1;
 800d940:	2301      	movs	r3, #1
 800d942:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800d946:	e038      	b.n	800d9ba <svd_u3DvUgOe+0xf72>
        } else if ((rt <= 1.0020841800044864E-292) || ((qq > 20) && (rt <=
 800d948:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800d94c:	f04f 0200 	mov.w	r2, #0
 800d950:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800d954:	f7f3 f8be 	bl	8000ad4 <__aeabi_dcmple>
 800d958:	4603      	mov	r3, r0
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d115      	bne.n	800d98a <svd_u3DvUgOe+0xf42>
 800d95e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d962:	2b14      	cmp	r3, #20
 800d964:	dd24      	ble.n	800d9b0 <svd_u3DvUgOe+0xf68>
                     2.2204460492503131E-16 * nrm))) {
 800d966:	f04f 0200 	mov.w	r2, #0
 800d96a:	4b99      	ldr	r3, [pc, #612]	; (800dbd0 <svd_u3DvUgOe+0x1188>)
 800d96c:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	; 0x1c8
 800d970:	f7f2 fe34 	bl	80005dc <__aeabi_dmul>
 800d974:	4602      	mov	r2, r0
 800d976:	460b      	mov	r3, r1
 800d978:	4610      	mov	r0, r2
 800d97a:	4619      	mov	r1, r3
        } else if ((rt <= 1.0020841800044864E-292) || ((qq > 20) && (rt <=
 800d97c:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800d980:	f7f3 f8b2 	bl	8000ae8 <__aeabi_dcmpge>
 800d984:	4603      	mov	r3, r0
 800d986:	2b00      	cmp	r3, #0
 800d988:	d012      	beq.n	800d9b0 <svd_u3DvUgOe+0xf68>
          e[kase - 1] = 0.0;
 800d98a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800d98e:	3b01      	subs	r3, #1
 800d990:	00db      	lsls	r3, r3, #3
 800d992:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d996:	4413      	add	r3, r2
 800d998:	f1a3 01b8 	sub.w	r1, r3, #184	; 0xb8
 800d99c:	f04f 0200 	mov.w	r2, #0
 800d9a0:	f04f 0300 	mov.w	r3, #0
 800d9a4:	e9c1 2300 	strd	r2, r3, [r1]
          exitg1 = 1;
 800d9a8:	2301      	movs	r3, #1
 800d9aa:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800d9ae:	e004      	b.n	800d9ba <svd_u3DvUgOe+0xf72>
        } else {
          kase--;
 800d9b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800d9b4:	3b01      	subs	r3, #1
 800d9b6:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        }
      }
    } while (exitg1 == 0);
 800d9ba:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	f43f af59 	beq.w	800d876 <svd_u3DvUgOe+0xe2e>

    if (m + 1 == kase) {
 800d9c4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800d9c8:	1c5a      	adds	r2, r3, #1
 800d9ca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800d9ce:	4293      	cmp	r3, r2
 800d9d0:	d103      	bne.n	800d9da <svd_u3DvUgOe+0xf92>
      kase = 4;
 800d9d2:	2304      	movs	r3, #4
 800d9d4:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 800d9d8:	e0c7      	b.n	800db6a <svd_u3DvUgOe+0x1122>
    } else {
      int32_T k_ii;
      boolean_T exitg2;
      qjj = m + 2;
 800d9da:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800d9de:	3302      	adds	r3, #2
 800d9e0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
      k_ii = m + 2;
 800d9e4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800d9e8:	3302      	adds	r3, #2
 800d9ea:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
      exitg2 = false;
 800d9ee:	2300      	movs	r3, #0
 800d9f0:	f887 31df 	strb.w	r3, [r7, #479]	; 0x1df
      while ((!exitg2) && (k_ii >= kase)) {
 800d9f4:	e092      	b.n	800db1c <svd_u3DvUgOe+0x10d4>
        qjj = k_ii;
 800d9f6:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800d9fa:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
        if (k_ii == kase) {
 800d9fe:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 800da02:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800da06:	429a      	cmp	r2, r3
 800da08:	d103      	bne.n	800da12 <svd_u3DvUgOe+0xfca>
          exitg2 = true;
 800da0a:	2301      	movs	r3, #1
 800da0c:	f887 31df 	strb.w	r3, [r7, #479]	; 0x1df
 800da10:	e084      	b.n	800db1c <svd_u3DvUgOe+0x10d4>
        } else {
          rt = 0.0;
 800da12:	f04f 0200 	mov.w	r2, #0
 800da16:	f04f 0300 	mov.w	r3, #0
 800da1a:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
          if (k_ii < m + 2) {
 800da1e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800da22:	1c5a      	adds	r2, r3, #1
 800da24:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800da28:	4293      	cmp	r3, r2
 800da2a:	dc11      	bgt.n	800da50 <svd_u3DvUgOe+0x1008>
            rt = fabs(e[k_ii - 1]);
 800da2c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800da30:	3b01      	subs	r3, #1
 800da32:	00db      	lsls	r3, r3, #3
 800da34:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800da38:	4413      	add	r3, r2
 800da3a:	3bb8      	subs	r3, #184	; 0xb8
 800da3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da40:	65ba      	str	r2, [r7, #88]	; 0x58
 800da42:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800da46:	65fb      	str	r3, [r7, #92]	; 0x5c
 800da48:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 800da4c:	ed87 7b4a 	vstr	d7, [r7, #296]	; 0x128
          }

          if (k_ii > kase + 1) {
 800da50:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800da54:	1c5a      	adds	r2, r3, #1
 800da56:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800da5a:	4293      	cmp	r3, r2
 800da5c:	dd17      	ble.n	800da8e <svd_u3DvUgOe+0x1046>
            rt += fabs(e[k_ii - 2]);
 800da5e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800da62:	3b02      	subs	r3, #2
 800da64:	00db      	lsls	r3, r3, #3
 800da66:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800da6a:	4413      	add	r3, r2
 800da6c:	3bb8      	subs	r3, #184	; 0xb8
 800da6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da72:	653a      	str	r2, [r7, #80]	; 0x50
 800da74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800da78:	657b      	str	r3, [r7, #84]	; 0x54
 800da7a:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800da7e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800da82:	f7f2 fbf5 	bl	8000270 <__adddf3>
 800da86:	4602      	mov	r2, r0
 800da88:	460b      	mov	r3, r1
 800da8a:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
          }

          ztest = fabs(b_s[k_ii - 1]);
 800da8e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800da92:	3b01      	subs	r3, #1
 800da94:	00db      	lsls	r3, r3, #3
 800da96:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800da9a:	4413      	add	r3, r2
 800da9c:	3ba0      	subs	r3, #160	; 0xa0
 800da9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daa2:	64ba      	str	r2, [r7, #72]	; 0x48
 800daa4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800daa8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800daaa:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 800daae:	ed87 7b44 	vstr	d7, [r7, #272]	; 0x110
          if ((ztest <= 2.2204460492503131E-16 * rt) || (ztest <=
 800dab2:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800dab6:	f04f 0200 	mov.w	r2, #0
 800daba:	4b45      	ldr	r3, [pc, #276]	; (800dbd0 <svd_u3DvUgOe+0x1188>)
 800dabc:	f7f2 fd8e 	bl	80005dc <__aeabi_dmul>
 800dac0:	4602      	mov	r2, r0
 800dac2:	460b      	mov	r3, r1
 800dac4:	4610      	mov	r0, r2
 800dac6:	4619      	mov	r1, r3
 800dac8:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800dacc:	f7f3 f80c 	bl	8000ae8 <__aeabi_dcmpge>
 800dad0:	4603      	mov	r3, r0
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d10a      	bne.n	800daec <svd_u3DvUgOe+0x10a4>
 800dad6:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 800dada:	f04f 0200 	mov.w	r2, #0
 800dade:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800dae2:	f7f2 fff7 	bl	8000ad4 <__aeabi_dcmple>
 800dae6:	4603      	mov	r3, r0
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d012      	beq.n	800db12 <svd_u3DvUgOe+0x10ca>
               1.0020841800044864E-292)) {
            b_s[k_ii - 1] = 0.0;
 800daec:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800daf0:	3b01      	subs	r3, #1
 800daf2:	00db      	lsls	r3, r3, #3
 800daf4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800daf8:	4413      	add	r3, r2
 800dafa:	f1a3 01a0 	sub.w	r1, r3, #160	; 0xa0
 800dafe:	f04f 0200 	mov.w	r2, #0
 800db02:	f04f 0300 	mov.w	r3, #0
 800db06:	e9c1 2300 	strd	r2, r3, [r1]
            exitg2 = true;
 800db0a:	2301      	movs	r3, #1
 800db0c:	f887 31df 	strb.w	r3, [r7, #479]	; 0x1df
 800db10:	e004      	b.n	800db1c <svd_u3DvUgOe+0x10d4>
          } else {
            k_ii--;
 800db12:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800db16:	3b01      	subs	r3, #1
 800db18:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
      while ((!exitg2) && (k_ii >= kase)) {
 800db1c:	f897 31df 	ldrb.w	r3, [r7, #479]	; 0x1df
 800db20:	2b00      	cmp	r3, #0
 800db22:	d106      	bne.n	800db32 <svd_u3DvUgOe+0x10ea>
 800db24:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 800db28:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800db2c:	429a      	cmp	r2, r3
 800db2e:	f6bf af62 	bge.w	800d9f6 <svd_u3DvUgOe+0xfae>
          }
        }
      }

      if (qjj == kase) {
 800db32:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 800db36:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800db3a:	429a      	cmp	r2, r3
 800db3c:	d103      	bne.n	800db46 <svd_u3DvUgOe+0x10fe>
        kase = 3;
 800db3e:	2303      	movs	r3, #3
 800db40:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 800db44:	e011      	b.n	800db6a <svd_u3DvUgOe+0x1122>
      } else if (m + 2 == qjj) {
 800db46:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800db4a:	1c9a      	adds	r2, r3, #2
 800db4c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800db50:	4293      	cmp	r3, r2
 800db52:	d103      	bne.n	800db5c <svd_u3DvUgOe+0x1114>
        kase = 1;
 800db54:	2301      	movs	r3, #1
 800db56:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 800db5a:	e006      	b.n	800db6a <svd_u3DvUgOe+0x1122>
      } else {
        kase = 2;
 800db5c:	2302      	movs	r3, #2
 800db5e:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        d = qjj;
 800db62:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800db66:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
      }
    }

    switch (kase) {
 800db6a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800db6e:	2b03      	cmp	r3, #3
 800db70:	f000 8113 	beq.w	800dd9a <svd_u3DvUgOe+0x1352>
 800db74:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800db78:	2b03      	cmp	r3, #3
 800db7a:	f300 8443 	bgt.w	800e404 <svd_u3DvUgOe+0x19bc>
 800db7e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800db82:	2b01      	cmp	r3, #1
 800db84:	d005      	beq.n	800db92 <svd_u3DvUgOe+0x114a>
 800db86:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800db8a:	2b02      	cmp	r3, #2
 800db8c:	d07b      	beq.n	800dc86 <svd_u3DvUgOe+0x123e>
 800db8e:	f000 bc39 	b.w	800e404 <svd_u3DvUgOe+0x19bc>
     case 1:
      rt = e[m];
 800db92:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800db96:	00db      	lsls	r3, r3, #3
 800db98:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800db9c:	4413      	add	r3, r2
 800db9e:	3bb8      	subs	r3, #184	; 0xb8
 800dba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dba4:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
      e[m] = 0.0;
 800dba8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800dbac:	00db      	lsls	r3, r3, #3
 800dbae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800dbb2:	4413      	add	r3, r2
 800dbb4:	f1a3 01b8 	sub.w	r1, r3, #184	; 0xb8
 800dbb8:	f04f 0200 	mov.w	r2, #0
 800dbbc:	f04f 0300 	mov.w	r3, #0
 800dbc0:	e9c1 2300 	strd	r2, r3, [r1]
      for (qjj = m; qjj + 1 >= d + 1; qjj--) {
 800dbc4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800dbc8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800dbcc:	e053      	b.n	800dc76 <svd_u3DvUgOe+0x122e>
 800dbce:	bf00      	nop
 800dbd0:	3cb00000 	.word	0x3cb00000
        xrotg_XzIjz1eG(&b_s[qjj], &rt, &ztest, &sqds);
 800dbd4:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 800dbd8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800dbdc:	00db      	lsls	r3, r3, #3
 800dbde:	18d0      	adds	r0, r2, r3
 800dbe0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800dbe4:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800dbe8:	f507 7194 	add.w	r1, r7, #296	; 0x128
 800dbec:	f001 fd2a 	bl	800f644 <xrotg_XzIjz1eG>
        if (qjj + 1 > d + 1) {
 800dbf0:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 800dbf4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800dbf8:	429a      	cmp	r2, r3
 800dbfa:	dd19      	ble.n	800dc30 <svd_u3DvUgOe+0x11e8>
          rt = -sqds * e[0];
 800dbfc:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800dc00:	643a      	str	r2, [r7, #64]	; 0x40
 800dc02:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800dc06:	647b      	str	r3, [r7, #68]	; 0x44
 800dc08:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800dc0c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800dc10:	f7f2 fce4 	bl	80005dc <__aeabi_dmul>
 800dc14:	4602      	mov	r2, r0
 800dc16:	460b      	mov	r3, r1
 800dc18:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
          e[0] *= ztest;
 800dc1c:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800dc20:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800dc24:	f7f2 fcda 	bl	80005dc <__aeabi_dmul>
 800dc28:	4602      	mov	r2, r0
 800dc2a:	460b      	mov	r3, r1
 800dc2c:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
        }

        xrot_i7f01JoJ(V, 3 * qjj + 1, 3 * (m + 1) + 1, ztest, sqds);
 800dc30:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 800dc34:	4613      	mov	r3, r2
 800dc36:	005b      	lsls	r3, r3, #1
 800dc38:	4413      	add	r3, r2
 800dc3a:	1c59      	adds	r1, r3, #1
 800dc3c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800dc40:	1c5a      	adds	r2, r3, #1
 800dc42:	4613      	mov	r3, r2
 800dc44:	005b      	lsls	r3, r3, #1
 800dc46:	4413      	add	r3, r2
 800dc48:	1c5a      	adds	r2, r3, #1
 800dc4a:	ed97 7b44 	vldr	d7, [r7, #272]	; 0x110
 800dc4e:	ed97 6b46 	vldr	d6, [r7, #280]	; 0x118
 800dc52:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800dc56:	eeb0 1a46 	vmov.f32	s2, s12
 800dc5a:	eef0 1a66 	vmov.f32	s3, s13
 800dc5e:	eeb0 0a47 	vmov.f32	s0, s14
 800dc62:	eef0 0a67 	vmov.f32	s1, s15
 800dc66:	6818      	ldr	r0, [r3, #0]
 800dc68:	f001 fbd0 	bl	800f40c <xrot_i7f01JoJ>
      for (qjj = m; qjj + 1 >= d + 1; qjj--) {
 800dc6c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800dc70:	3b01      	subs	r3, #1
 800dc72:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800dc76:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 800dc7a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800dc7e:	429a      	cmp	r2, r3
 800dc80:	daa8      	bge.n	800dbd4 <svd_u3DvUgOe+0x118c>
      }
      break;
 800dc82:	f000 bc77 	b.w	800e574 <svd_u3DvUgOe+0x1b2c>

     case 2:
      rt = e[d - 1];
 800dc86:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800dc8a:	3b01      	subs	r3, #1
 800dc8c:	00db      	lsls	r3, r3, #3
 800dc8e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800dc92:	4413      	add	r3, r2
 800dc94:	3bb8      	subs	r3, #184	; 0xb8
 800dc96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc9a:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
      e[d - 1] = 0.0;
 800dc9e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800dca2:	3b01      	subs	r3, #1
 800dca4:	00db      	lsls	r3, r3, #3
 800dca6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800dcaa:	4413      	add	r3, r2
 800dcac:	f1a3 01b8 	sub.w	r1, r3, #184	; 0xb8
 800dcb0:	f04f 0200 	mov.w	r2, #0
 800dcb4:	f04f 0300 	mov.w	r3, #0
 800dcb8:	e9c1 2300 	strd	r2, r3, [r1]
      for (qjj = d; qjj < m + 2; qjj++) {
 800dcbc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800dcc0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800dcc4:	e061      	b.n	800dd8a <svd_u3DvUgOe+0x1342>
        xrotg_XzIjz1eG(&b_s[qjj], &rt, &ztest, &sqds);
 800dcc6:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 800dcca:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800dcce:	00db      	lsls	r3, r3, #3
 800dcd0:	18d0      	adds	r0, r2, r3
 800dcd2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800dcd6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800dcda:	f507 7194 	add.w	r1, r7, #296	; 0x128
 800dcde:	f001 fcb1 	bl	800f644 <xrotg_XzIjz1eG>
        rt = -sqds * e[qjj];
 800dce2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800dce6:	63ba      	str	r2, [r7, #56]	; 0x38
 800dce8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800dcec:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dcee:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800dcf2:	00db      	lsls	r3, r3, #3
 800dcf4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800dcf8:	4413      	add	r3, r2
 800dcfa:	3bb8      	subs	r3, #184	; 0xb8
 800dcfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd00:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800dd04:	f7f2 fc6a 	bl	80005dc <__aeabi_dmul>
 800dd08:	4602      	mov	r2, r0
 800dd0a:	460b      	mov	r3, r1
 800dd0c:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
        e[qjj] *= ztest;
 800dd10:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800dd14:	00db      	lsls	r3, r3, #3
 800dd16:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800dd1a:	4413      	add	r3, r2
 800dd1c:	3bb8      	subs	r3, #184	; 0xb8
 800dd1e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800dd22:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800dd26:	f7f2 fc59 	bl	80005dc <__aeabi_dmul>
 800dd2a:	4602      	mov	r2, r0
 800dd2c:	460b      	mov	r3, r1
 800dd2e:	4610      	mov	r0, r2
 800dd30:	4619      	mov	r1, r3
 800dd32:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800dd36:	00db      	lsls	r3, r3, #3
 800dd38:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800dd3c:	4413      	add	r3, r2
 800dd3e:	3bb8      	subs	r3, #184	; 0xb8
 800dd40:	e9c3 0100 	strd	r0, r1, [r3]
        xrot_i7f01JoJ(U, 3 * qjj + 1, 3 * (d - 1) + 1, ztest, sqds);
 800dd44:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 800dd48:	4613      	mov	r3, r2
 800dd4a:	005b      	lsls	r3, r3, #1
 800dd4c:	4413      	add	r3, r2
 800dd4e:	1c59      	adds	r1, r3, #1
 800dd50:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800dd54:	1e5a      	subs	r2, r3, #1
 800dd56:	4613      	mov	r3, r2
 800dd58:	005b      	lsls	r3, r3, #1
 800dd5a:	4413      	add	r3, r2
 800dd5c:	3301      	adds	r3, #1
 800dd5e:	ed97 7b44 	vldr	d7, [r7, #272]	; 0x110
 800dd62:	ed97 6b46 	vldr	d6, [r7, #280]	; 0x118
 800dd66:	eeb0 1a46 	vmov.f32	s2, s12
 800dd6a:	eef0 1a66 	vmov.f32	s3, s13
 800dd6e:	eeb0 0a47 	vmov.f32	s0, s14
 800dd72:	eef0 0a67 	vmov.f32	s1, s15
 800dd76:	461a      	mov	r2, r3
 800dd78:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 800dd7c:	f001 fb46 	bl	800f40c <xrot_i7f01JoJ>
      for (qjj = d; qjj < m + 2; qjj++) {
 800dd80:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800dd84:	3301      	adds	r3, #1
 800dd86:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800dd8a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800dd8e:	1c5a      	adds	r2, r3, #1
 800dd90:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800dd94:	4293      	cmp	r3, r2
 800dd96:	dd96      	ble.n	800dcc6 <svd_u3DvUgOe+0x127e>
      }
      break;
 800dd98:	e3ec      	b.n	800e574 <svd_u3DvUgOe+0x1b2c>

     case 3:
      {
        real_T emm1;
        real_T shift;
        sqds = b_s[m + 1];
 800dd9a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800dd9e:	3301      	adds	r3, #1
 800dda0:	00db      	lsls	r3, r3, #3
 800dda2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800dda6:	4413      	add	r3, r2
 800dda8:	3ba0      	subs	r3, #160	; 0xa0
 800ddaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddae:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
        ztest = fmax(fmax(fmax(fmax(fabs(sqds), fabs(b_s[m])), fabs(e[m])), fabs
 800ddb2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800ddb6:	633a      	str	r2, [r7, #48]	; 0x30
 800ddb8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ddbc:	637b      	str	r3, [r7, #52]	; 0x34
 800ddbe:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800ddc2:	00db      	lsls	r3, r3, #3
 800ddc4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800ddc8:	4413      	add	r3, r2
 800ddca:	3ba0      	subs	r3, #160	; 0xa0
 800ddcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddd0:	62ba      	str	r2, [r7, #40]	; 0x28
 800ddd2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ddd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ddd8:	ed97 1b0a 	vldr	d1, [r7, #40]	; 0x28
 800dddc:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 800dde0:	f00c fb10 	bl	801a404 <fmax>
 800dde4:	eeb0 7a40 	vmov.f32	s14, s0
 800dde8:	eef0 7a60 	vmov.f32	s15, s1
 800ddec:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800ddf0:	00db      	lsls	r3, r3, #3
 800ddf2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800ddf6:	4413      	add	r3, r2
 800ddf8:	3bb8      	subs	r3, #184	; 0xb8
 800ddfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddfe:	623a      	str	r2, [r7, #32]
 800de00:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800de04:	627b      	str	r3, [r7, #36]	; 0x24
 800de06:	ed97 1b08 	vldr	d1, [r7, #32]
 800de0a:	eeb0 0a47 	vmov.f32	s0, s14
 800de0e:	eef0 0a67 	vmov.f32	s1, s15
 800de12:	f00c faf7 	bl	801a404 <fmax>
 800de16:	eeb0 7a40 	vmov.f32	s14, s0
 800de1a:	eef0 7a60 	vmov.f32	s15, s1
                          (b_s[d])), fabs(e[d]));
 800de1e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800de22:	00db      	lsls	r3, r3, #3
 800de24:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800de28:	4413      	add	r3, r2
 800de2a:	3ba0      	subs	r3, #160	; 0xa0
 800de2c:	e9d3 2300 	ldrd	r2, r3, [r3]
        ztest = fmax(fmax(fmax(fmax(fabs(sqds), fabs(b_s[m])), fabs(e[m])), fabs
 800de30:	61ba      	str	r2, [r7, #24]
 800de32:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800de36:	61fb      	str	r3, [r7, #28]
 800de38:	ed97 1b06 	vldr	d1, [r7, #24]
 800de3c:	eeb0 0a47 	vmov.f32	s0, s14
 800de40:	eef0 0a67 	vmov.f32	s1, s15
 800de44:	f00c fade 	bl	801a404 <fmax>
 800de48:	eeb0 7a40 	vmov.f32	s14, s0
 800de4c:	eef0 7a60 	vmov.f32	s15, s1
                          (b_s[d])), fabs(e[d]));
 800de50:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800de54:	00db      	lsls	r3, r3, #3
 800de56:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800de5a:	4413      	add	r3, r2
 800de5c:	3bb8      	subs	r3, #184	; 0xb8
 800de5e:	e9d3 2300 	ldrd	r2, r3, [r3]
        ztest = fmax(fmax(fmax(fmax(fabs(sqds), fabs(b_s[m])), fabs(e[m])), fabs
 800de62:	613a      	str	r2, [r7, #16]
 800de64:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800de68:	617b      	str	r3, [r7, #20]
 800de6a:	ed97 1b04 	vldr	d1, [r7, #16]
 800de6e:	eeb0 0a47 	vmov.f32	s0, s14
 800de72:	eef0 0a67 	vmov.f32	s1, s15
 800de76:	f00c fac5 	bl	801a404 <fmax>
 800de7a:	eeb0 7a40 	vmov.f32	s14, s0
 800de7e:	eef0 7a60 	vmov.f32	s15, s1
 800de82:	ed87 7b44 	vstr	d7, [r7, #272]	; 0x110
        rt = sqds / ztest;
 800de86:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800de8a:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800de8e:	f7f2 fccf 	bl	8000830 <__aeabi_ddiv>
 800de92:	4602      	mov	r2, r0
 800de94:	460b      	mov	r3, r1
 800de96:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
        smm1 = b_s[m] / ztest;
 800de9a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800de9e:	00db      	lsls	r3, r3, #3
 800dea0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800dea4:	4413      	add	r3, r2
 800dea6:	3ba0      	subs	r3, #160	; 0xa0
 800dea8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800deac:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800deb0:	f7f2 fcbe 	bl	8000830 <__aeabi_ddiv>
 800deb4:	4602      	mov	r2, r0
 800deb6:	460b      	mov	r3, r1
 800deb8:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
        emm1 = e[m] / ztest;
 800debc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800dec0:	00db      	lsls	r3, r3, #3
 800dec2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800dec6:	4413      	add	r3, r2
 800dec8:	3bb8      	subs	r3, #184	; 0xb8
 800deca:	e9d3 0100 	ldrd	r0, r1, [r3]
 800dece:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800ded2:	f7f2 fcad 	bl	8000830 <__aeabi_ddiv>
 800ded6:	4602      	mov	r2, r0
 800ded8:	460b      	mov	r3, r1
 800deda:	e9c7 2370 	strd	r2, r3, [r7, #448]	; 0x1c0
        sqds = b_s[d] / ztest;
 800dede:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800dee2:	00db      	lsls	r3, r3, #3
 800dee4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800dee8:	4413      	add	r3, r2
 800deea:	3ba0      	subs	r3, #160	; 0xa0
 800deec:	e9d3 0100 	ldrd	r0, r1, [r3]
 800def0:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800def4:	f7f2 fc9c 	bl	8000830 <__aeabi_ddiv>
 800def8:	4602      	mov	r2, r0
 800defa:	460b      	mov	r3, r1
 800defc:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
        smm1 = ((smm1 + rt) * (smm1 - rt) + emm1 * emm1) / 2.0;
 800df00:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 800df04:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800df08:	f7f2 f9b2 	bl	8000270 <__adddf3>
 800df0c:	4602      	mov	r2, r0
 800df0e:	460b      	mov	r3, r1
 800df10:	4614      	mov	r4, r2
 800df12:	461d      	mov	r5, r3
 800df14:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 800df18:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800df1c:	f7f2 f9a6 	bl	800026c <__aeabi_dsub>
 800df20:	4602      	mov	r2, r0
 800df22:	460b      	mov	r3, r1
 800df24:	4620      	mov	r0, r4
 800df26:	4629      	mov	r1, r5
 800df28:	f7f2 fb58 	bl	80005dc <__aeabi_dmul>
 800df2c:	4602      	mov	r2, r0
 800df2e:	460b      	mov	r3, r1
 800df30:	4614      	mov	r4, r2
 800df32:	461d      	mov	r5, r3
 800df34:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	; 0x1c0
 800df38:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	; 0x1c0
 800df3c:	f7f2 fb4e 	bl	80005dc <__aeabi_dmul>
 800df40:	4602      	mov	r2, r0
 800df42:	460b      	mov	r3, r1
 800df44:	4620      	mov	r0, r4
 800df46:	4629      	mov	r1, r5
 800df48:	f7f2 f992 	bl	8000270 <__adddf3>
 800df4c:	4602      	mov	r2, r0
 800df4e:	460b      	mov	r3, r1
 800df50:	4610      	mov	r0, r2
 800df52:	4619      	mov	r1, r3
 800df54:	f04f 0200 	mov.w	r2, #0
 800df58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800df5c:	f7f2 fc68 	bl	8000830 <__aeabi_ddiv>
 800df60:	4602      	mov	r2, r0
 800df62:	460b      	mov	r3, r1
 800df64:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
        emm1 *= rt;
 800df68:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800df6c:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	; 0x1c0
 800df70:	f7f2 fb34 	bl	80005dc <__aeabi_dmul>
 800df74:	4602      	mov	r2, r0
 800df76:	460b      	mov	r3, r1
 800df78:	e9c7 2370 	strd	r2, r3, [r7, #448]	; 0x1c0
        emm1 *= emm1;
 800df7c:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	; 0x1c0
 800df80:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	; 0x1c0
 800df84:	f7f2 fb2a 	bl	80005dc <__aeabi_dmul>
 800df88:	4602      	mov	r2, r0
 800df8a:	460b      	mov	r3, r1
 800df8c:	e9c7 2370 	strd	r2, r3, [r7, #448]	; 0x1c0
        if ((smm1 != 0.0) || (emm1 != 0.0)) {
 800df90:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 800df94:	f04f 0200 	mov.w	r2, #0
 800df98:	f04f 0300 	mov.w	r3, #0
 800df9c:	f7f2 fd86 	bl	8000aac <__aeabi_dcmpeq>
 800dfa0:	4603      	mov	r3, r0
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d00a      	beq.n	800dfbc <svd_u3DvUgOe+0x1574>
 800dfa6:	f04f 0200 	mov.w	r2, #0
 800dfaa:	f04f 0300 	mov.w	r3, #0
 800dfae:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	; 0x1c0
 800dfb2:	f7f2 fd7b 	bl	8000aac <__aeabi_dcmpeq>
 800dfb6:	4603      	mov	r3, r0
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d13f      	bne.n	800e03c <svd_u3DvUgOe+0x15f4>
          shift = sqrt(smm1 * smm1 + emm1);
 800dfbc:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 800dfc0:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800dfc4:	f7f2 fb0a 	bl	80005dc <__aeabi_dmul>
 800dfc8:	4602      	mov	r2, r0
 800dfca:	460b      	mov	r3, r1
 800dfcc:	4610      	mov	r0, r2
 800dfce:	4619      	mov	r1, r3
 800dfd0:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	; 0x1c0
 800dfd4:	f7f2 f94c 	bl	8000270 <__adddf3>
 800dfd8:	4602      	mov	r2, r0
 800dfda:	460b      	mov	r3, r1
 800dfdc:	ec43 2b17 	vmov	d7, r2, r3
 800dfe0:	eeb0 0a47 	vmov.f32	s0, s14
 800dfe4:	eef0 0a67 	vmov.f32	s1, s15
 800dfe8:	f00c faf6 	bl	801a5d8 <sqrt>
 800dfec:	ed87 0b74 	vstr	d0, [r7, #464]	; 0x1d0
          if (smm1 < 0.0) {
 800dff0:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 800dff4:	f04f 0200 	mov.w	r2, #0
 800dff8:	f04f 0300 	mov.w	r3, #0
 800dffc:	f7f2 fd60 	bl	8000ac0 <__aeabi_dcmplt>
 800e000:	4603      	mov	r3, r0
 800e002:	2b00      	cmp	r3, #0
 800e004:	d009      	beq.n	800e01a <svd_u3DvUgOe+0x15d2>
            shift = -shift;
 800e006:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800e00a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 800e00e:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800e012:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800e016:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
          }

          shift = emm1 / (smm1 + shift);
 800e01a:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 800e01e:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	; 0x1d0
 800e022:	f7f2 f925 	bl	8000270 <__adddf3>
 800e026:	4602      	mov	r2, r0
 800e028:	460b      	mov	r3, r1
 800e02a:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	; 0x1c0
 800e02e:	f7f2 fbff 	bl	8000830 <__aeabi_ddiv>
 800e032:	4602      	mov	r2, r0
 800e034:	460b      	mov	r3, r1
 800e036:	e9c7 2374 	strd	r2, r3, [r7, #464]	; 0x1d0
 800e03a:	e005      	b.n	800e048 <svd_u3DvUgOe+0x1600>
        } else {
          shift = 0.0;
 800e03c:	f04f 0200 	mov.w	r2, #0
 800e040:	f04f 0300 	mov.w	r3, #0
 800e044:	e9c7 2374 	strd	r2, r3, [r7, #464]	; 0x1d0
        }

        rt = (sqds + rt) * (sqds - rt) + shift;
 800e048:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800e04c:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800e050:	f7f2 f90e 	bl	8000270 <__adddf3>
 800e054:	4602      	mov	r2, r0
 800e056:	460b      	mov	r3, r1
 800e058:	4614      	mov	r4, r2
 800e05a:	461d      	mov	r5, r3
 800e05c:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800e060:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800e064:	f7f2 f902 	bl	800026c <__aeabi_dsub>
 800e068:	4602      	mov	r2, r0
 800e06a:	460b      	mov	r3, r1
 800e06c:	4620      	mov	r0, r4
 800e06e:	4629      	mov	r1, r5
 800e070:	f7f2 fab4 	bl	80005dc <__aeabi_dmul>
 800e074:	4602      	mov	r2, r0
 800e076:	460b      	mov	r3, r1
 800e078:	4610      	mov	r0, r2
 800e07a:	4619      	mov	r1, r3
 800e07c:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	; 0x1d0
 800e080:	f7f2 f8f6 	bl	8000270 <__adddf3>
 800e084:	4602      	mov	r2, r0
 800e086:	460b      	mov	r3, r1
 800e088:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
        ztest = e[d] / ztest * sqds;
 800e08c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800e090:	00db      	lsls	r3, r3, #3
 800e092:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e096:	4413      	add	r3, r2
 800e098:	3bb8      	subs	r3, #184	; 0xb8
 800e09a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e09e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800e0a2:	f7f2 fbc5 	bl	8000830 <__aeabi_ddiv>
 800e0a6:	4602      	mov	r2, r0
 800e0a8:	460b      	mov	r3, r1
 800e0aa:	4610      	mov	r0, r2
 800e0ac:	4619      	mov	r1, r3
 800e0ae:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800e0b2:	f7f2 fa93 	bl	80005dc <__aeabi_dmul>
 800e0b6:	4602      	mov	r2, r0
 800e0b8:	460b      	mov	r3, r1
 800e0ba:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
        for (qjj = d + 1; qjj <= m + 1; qjj++) {
 800e0be:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800e0c2:	3301      	adds	r3, #1
 800e0c4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800e0c8:	e183      	b.n	800e3d2 <svd_u3DvUgOe+0x198a>
          xrotg_XzIjz1eG(&rt, &ztest, &sqds, &smm1);
 800e0ca:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800e0ce:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800e0d2:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800e0d6:	f507 7094 	add.w	r0, r7, #296	; 0x128
 800e0da:	f001 fab3 	bl	800f644 <xrotg_XzIjz1eG>
          if (qjj > d + 1) {
 800e0de:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800e0e2:	1c5a      	adds	r2, r3, #1
 800e0e4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800e0e8:	4293      	cmp	r3, r2
 800e0ea:	dd03      	ble.n	800e0f4 <svd_u3DvUgOe+0x16ac>
            e[0] = rt;
 800e0ec:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800e0f0:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
          }

          rt = e[qjj - 1];
 800e0f4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800e0f8:	3b01      	subs	r3, #1
 800e0fa:	00db      	lsls	r3, r3, #3
 800e0fc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e100:	4413      	add	r3, r2
 800e102:	3bb8      	subs	r3, #184	; 0xb8
 800e104:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e108:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
          emm1 = b_s[qjj - 1];
 800e10c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800e110:	3b01      	subs	r3, #1
 800e112:	00db      	lsls	r3, r3, #3
 800e114:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e118:	4413      	add	r3, r2
 800e11a:	3ba0      	subs	r3, #160	; 0xa0
 800e11c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e120:	e9c7 2370 	strd	r2, r3, [r7, #448]	; 0x1c0
          e[qjj - 1] = rt * sqds - emm1 * smm1;
 800e124:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800e128:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800e12c:	f7f2 fa56 	bl	80005dc <__aeabi_dmul>
 800e130:	4602      	mov	r2, r0
 800e132:	460b      	mov	r3, r1
 800e134:	4690      	mov	r8, r2
 800e136:	4699      	mov	r9, r3
 800e138:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 800e13c:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	; 0x1c0
 800e140:	f7f2 fa4c 	bl	80005dc <__aeabi_dmul>
 800e144:	4602      	mov	r2, r0
 800e146:	460b      	mov	r3, r1
 800e148:	4610      	mov	r0, r2
 800e14a:	4619      	mov	r1, r3
 800e14c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800e150:	1e5c      	subs	r4, r3, #1
 800e152:	4602      	mov	r2, r0
 800e154:	460b      	mov	r3, r1
 800e156:	4640      	mov	r0, r8
 800e158:	4649      	mov	r1, r9
 800e15a:	f7f2 f887 	bl	800026c <__aeabi_dsub>
 800e15e:	4602      	mov	r2, r0
 800e160:	460b      	mov	r3, r1
 800e162:	4610      	mov	r0, r2
 800e164:	4619      	mov	r1, r3
 800e166:	00e3      	lsls	r3, r4, #3
 800e168:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e16c:	4413      	add	r3, r2
 800e16e:	3bb8      	subs	r3, #184	; 0xb8
 800e170:	e9c3 0100 	strd	r0, r1, [r3]
          ztest = smm1 * b_s[qjj];
 800e174:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800e178:	00db      	lsls	r3, r3, #3
 800e17a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e17e:	4413      	add	r3, r2
 800e180:	3ba0      	subs	r3, #160	; 0xa0
 800e182:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e186:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800e18a:	f7f2 fa27 	bl	80005dc <__aeabi_dmul>
 800e18e:	4602      	mov	r2, r0
 800e190:	460b      	mov	r3, r1
 800e192:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
          b_s[qjj] *= sqds;
 800e196:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800e19a:	00db      	lsls	r3, r3, #3
 800e19c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e1a0:	4413      	add	r3, r2
 800e1a2:	3ba0      	subs	r3, #160	; 0xa0
 800e1a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e1a8:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800e1ac:	f7f2 fa16 	bl	80005dc <__aeabi_dmul>
 800e1b0:	4602      	mov	r2, r0
 800e1b2:	460b      	mov	r3, r1
 800e1b4:	4610      	mov	r0, r2
 800e1b6:	4619      	mov	r1, r3
 800e1b8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800e1bc:	00db      	lsls	r3, r3, #3
 800e1be:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e1c2:	4413      	add	r3, r2
 800e1c4:	3ba0      	subs	r3, #160	; 0xa0
 800e1c6:	e9c3 0100 	strd	r0, r1, [r3]
          xrot_i7f01JoJ(V, 3 * (qjj - 1) + 1, 3 * qjj + 1, sqds, smm1);
 800e1ca:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800e1ce:	1e5a      	subs	r2, r3, #1
 800e1d0:	4613      	mov	r3, r2
 800e1d2:	005b      	lsls	r3, r3, #1
 800e1d4:	4413      	add	r3, r2
 800e1d6:	1c59      	adds	r1, r3, #1
 800e1d8:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 800e1dc:	4613      	mov	r3, r2
 800e1de:	005b      	lsls	r3, r3, #1
 800e1e0:	4413      	add	r3, r2
 800e1e2:	1c5a      	adds	r2, r3, #1
 800e1e4:	ed97 7b46 	vldr	d7, [r7, #280]	; 0x118
 800e1e8:	ed97 6b48 	vldr	d6, [r7, #288]	; 0x120
 800e1ec:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800e1f0:	eeb0 1a46 	vmov.f32	s2, s12
 800e1f4:	eef0 1a66 	vmov.f32	s3, s13
 800e1f8:	eeb0 0a47 	vmov.f32	s0, s14
 800e1fc:	eef0 0a67 	vmov.f32	s1, s15
 800e200:	6818      	ldr	r0, [r3, #0]
 800e202:	f001 f903 	bl	800f40c <xrot_i7f01JoJ>
          b_s[qjj - 1] = emm1 * sqds + rt * smm1;
 800e206:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800e20a:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	; 0x1c0
 800e20e:	f7f2 f9e5 	bl	80005dc <__aeabi_dmul>
 800e212:	4602      	mov	r2, r0
 800e214:	460b      	mov	r3, r1
 800e216:	4690      	mov	r8, r2
 800e218:	4699      	mov	r9, r3
 800e21a:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800e21e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800e222:	f7f2 f9db 	bl	80005dc <__aeabi_dmul>
 800e226:	4602      	mov	r2, r0
 800e228:	460b      	mov	r3, r1
 800e22a:	4610      	mov	r0, r2
 800e22c:	4619      	mov	r1, r3
 800e22e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800e232:	1e5c      	subs	r4, r3, #1
 800e234:	4602      	mov	r2, r0
 800e236:	460b      	mov	r3, r1
 800e238:	4640      	mov	r0, r8
 800e23a:	4649      	mov	r1, r9
 800e23c:	f7f2 f818 	bl	8000270 <__adddf3>
 800e240:	4602      	mov	r2, r0
 800e242:	460b      	mov	r3, r1
 800e244:	4610      	mov	r0, r2
 800e246:	4619      	mov	r1, r3
 800e248:	00e3      	lsls	r3, r4, #3
 800e24a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e24e:	4413      	add	r3, r2
 800e250:	3ba0      	subs	r3, #160	; 0xa0
 800e252:	e9c3 0100 	strd	r0, r1, [r3]
          xrotg_XzIjz1eG(&b_s[qjj - 1], &ztest, &sqds, &smm1);
 800e256:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800e25a:	3b01      	subs	r3, #1
 800e25c:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 800e260:	00db      	lsls	r3, r3, #3
 800e262:	18d0      	adds	r0, r2, r3
 800e264:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800e268:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800e26c:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800e270:	f001 f9e8 	bl	800f644 <xrotg_XzIjz1eG>
          rt = e[qjj - 1] * sqds + smm1 * b_s[qjj];
 800e274:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800e278:	3b01      	subs	r3, #1
 800e27a:	00db      	lsls	r3, r3, #3
 800e27c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e280:	4413      	add	r3, r2
 800e282:	3bb8      	subs	r3, #184	; 0xb8
 800e284:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e288:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800e28c:	f7f2 f9a6 	bl	80005dc <__aeabi_dmul>
 800e290:	4602      	mov	r2, r0
 800e292:	460b      	mov	r3, r1
 800e294:	4614      	mov	r4, r2
 800e296:	461d      	mov	r5, r3
 800e298:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800e29c:	00db      	lsls	r3, r3, #3
 800e29e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e2a2:	4413      	add	r3, r2
 800e2a4:	3ba0      	subs	r3, #160	; 0xa0
 800e2a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e2aa:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800e2ae:	f7f2 f995 	bl	80005dc <__aeabi_dmul>
 800e2b2:	4602      	mov	r2, r0
 800e2b4:	460b      	mov	r3, r1
 800e2b6:	4620      	mov	r0, r4
 800e2b8:	4629      	mov	r1, r5
 800e2ba:	f7f1 ffd9 	bl	8000270 <__adddf3>
 800e2be:	4602      	mov	r2, r0
 800e2c0:	460b      	mov	r3, r1
 800e2c2:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
          b_s[qjj] = e[qjj - 1] * -smm1 + sqds * b_s[qjj];
 800e2c6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800e2ca:	3b01      	subs	r3, #1
 800e2cc:	00db      	lsls	r3, r3, #3
 800e2ce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e2d2:	4413      	add	r3, r2
 800e2d4:	3bb8      	subs	r3, #184	; 0xb8
 800e2d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e2da:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800e2de:	60ba      	str	r2, [r7, #8]
 800e2e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800e2e4:	60fb      	str	r3, [r7, #12]
 800e2e6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e2ea:	f7f2 f977 	bl	80005dc <__aeabi_dmul>
 800e2ee:	4602      	mov	r2, r0
 800e2f0:	460b      	mov	r3, r1
 800e2f2:	4614      	mov	r4, r2
 800e2f4:	461d      	mov	r5, r3
 800e2f6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800e2fa:	00db      	lsls	r3, r3, #3
 800e2fc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e300:	4413      	add	r3, r2
 800e302:	3ba0      	subs	r3, #160	; 0xa0
 800e304:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e308:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800e30c:	f7f2 f966 	bl	80005dc <__aeabi_dmul>
 800e310:	4602      	mov	r2, r0
 800e312:	460b      	mov	r3, r1
 800e314:	4620      	mov	r0, r4
 800e316:	4629      	mov	r1, r5
 800e318:	f7f1 ffaa 	bl	8000270 <__adddf3>
 800e31c:	4602      	mov	r2, r0
 800e31e:	460b      	mov	r3, r1
 800e320:	4610      	mov	r0, r2
 800e322:	4619      	mov	r1, r3
 800e324:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800e328:	00db      	lsls	r3, r3, #3
 800e32a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e32e:	4413      	add	r3, r2
 800e330:	3ba0      	subs	r3, #160	; 0xa0
 800e332:	e9c3 0100 	strd	r0, r1, [r3]
          ztest = smm1 * e[qjj];
 800e336:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800e33a:	00db      	lsls	r3, r3, #3
 800e33c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e340:	4413      	add	r3, r2
 800e342:	3bb8      	subs	r3, #184	; 0xb8
 800e344:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e348:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800e34c:	f7f2 f946 	bl	80005dc <__aeabi_dmul>
 800e350:	4602      	mov	r2, r0
 800e352:	460b      	mov	r3, r1
 800e354:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
          e[qjj] *= sqds;
 800e358:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800e35c:	00db      	lsls	r3, r3, #3
 800e35e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e362:	4413      	add	r3, r2
 800e364:	3bb8      	subs	r3, #184	; 0xb8
 800e366:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e36a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800e36e:	f7f2 f935 	bl	80005dc <__aeabi_dmul>
 800e372:	4602      	mov	r2, r0
 800e374:	460b      	mov	r3, r1
 800e376:	4610      	mov	r0, r2
 800e378:	4619      	mov	r1, r3
 800e37a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800e37e:	00db      	lsls	r3, r3, #3
 800e380:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e384:	4413      	add	r3, r2
 800e386:	3bb8      	subs	r3, #184	; 0xb8
 800e388:	e9c3 0100 	strd	r0, r1, [r3]
          xrot_i7f01JoJ(U, 3 * (qjj - 1) + 1, 3 * qjj + 1, sqds, smm1);
 800e38c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800e390:	1e5a      	subs	r2, r3, #1
 800e392:	4613      	mov	r3, r2
 800e394:	005b      	lsls	r3, r3, #1
 800e396:	4413      	add	r3, r2
 800e398:	1c59      	adds	r1, r3, #1
 800e39a:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 800e39e:	4613      	mov	r3, r2
 800e3a0:	005b      	lsls	r3, r3, #1
 800e3a2:	4413      	add	r3, r2
 800e3a4:	3301      	adds	r3, #1
 800e3a6:	ed97 7b46 	vldr	d7, [r7, #280]	; 0x118
 800e3aa:	ed97 6b48 	vldr	d6, [r7, #288]	; 0x120
 800e3ae:	eeb0 1a46 	vmov.f32	s2, s12
 800e3b2:	eef0 1a66 	vmov.f32	s3, s13
 800e3b6:	eeb0 0a47 	vmov.f32	s0, s14
 800e3ba:	eef0 0a67 	vmov.f32	s1, s15
 800e3be:	461a      	mov	r2, r3
 800e3c0:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 800e3c4:	f001 f822 	bl	800f40c <xrot_i7f01JoJ>
        for (qjj = d + 1; qjj <= m + 1; qjj++) {
 800e3c8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800e3cc:	3301      	adds	r3, #1
 800e3ce:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800e3d2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800e3d6:	1c5a      	adds	r2, r3, #1
 800e3d8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800e3dc:	4293      	cmp	r3, r2
 800e3de:	f77f ae74 	ble.w	800e0ca <svd_u3DvUgOe+0x1682>
        }

        e[m] = rt;
 800e3e2:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800e3e6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800e3ea:	00db      	lsls	r3, r3, #3
 800e3ec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e3f0:	4413      	add	r3, r2
 800e3f2:	3bb8      	subs	r3, #184	; 0xb8
 800e3f4:	e9c3 0100 	strd	r0, r1, [r3]
        qq++;
 800e3f8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800e3fc:	3301      	adds	r3, #1
 800e3fe:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
      }
      break;
 800e402:	e0b7      	b.n	800e574 <svd_u3DvUgOe+0x1b2c>

     default:
      if (b_s[d] < 0.0) {
 800e404:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800e408:	00db      	lsls	r3, r3, #3
 800e40a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e40e:	4413      	add	r3, r2
 800e410:	3ba0      	subs	r3, #160	; 0xa0
 800e412:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e416:	f04f 0200 	mov.w	r2, #0
 800e41a:	f04f 0300 	mov.w	r3, #0
 800e41e:	f7f2 fb4f 	bl	8000ac0 <__aeabi_dcmplt>
 800e422:	4603      	mov	r3, r0
 800e424:	2b00      	cmp	r3, #0
 800e426:	d025      	beq.n	800e474 <svd_u3DvUgOe+0x1a2c>
        b_s[d] = -b_s[d];
 800e428:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800e42c:	00db      	lsls	r3, r3, #3
 800e42e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e432:	4413      	add	r3, r2
 800e434:	3ba0      	subs	r3, #160	; 0xa0
 800e436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e43a:	603a      	str	r2, [r7, #0]
 800e43c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800e440:	607b      	str	r3, [r7, #4]
 800e442:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800e446:	00db      	lsls	r3, r3, #3
 800e448:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e44c:	4413      	add	r3, r2
 800e44e:	3ba0      	subs	r3, #160	; 0xa0
 800e450:	ed97 7b00 	vldr	d7, [r7]
 800e454:	ed83 7b00 	vstr	d7, [r3]
        xscal_eaAxXsvQ(-1.0, V, 3 * d + 1);
 800e458:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 800e45c:	4613      	mov	r3, r2
 800e45e:	005b      	lsls	r3, r3, #1
 800e460:	4413      	add	r3, r2
 800e462:	1c5a      	adds	r2, r3, #1
 800e464:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800e468:	4611      	mov	r1, r2
 800e46a:	6818      	ldr	r0, [r3, #0]
 800e46c:	ed9f 0b56 	vldr	d0, [pc, #344]	; 800e5c8 <svd_u3DvUgOe+0x1b80>
 800e470:	f001 fa4e 	bl	800f910 <xscal_eaAxXsvQ>
      }

      qq = d + 1;
 800e474:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800e478:	3301      	adds	r3, #1
 800e47a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
      while ((d + 1 < 3) && (b_s[d] < b_s[qq])) {
 800e47e:	e055      	b.n	800e52c <svd_u3DvUgOe+0x1ae4>
        rt = b_s[d];
 800e480:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800e484:	00db      	lsls	r3, r3, #3
 800e486:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e48a:	4413      	add	r3, r2
 800e48c:	3ba0      	subs	r3, #160	; 0xa0
 800e48e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e492:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
        b_s[d] = b_s[qq];
 800e496:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800e49a:	00db      	lsls	r3, r3, #3
 800e49c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e4a0:	4413      	add	r3, r2
 800e4a2:	3ba0      	subs	r3, #160	; 0xa0
 800e4a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e4a8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800e4ac:	00db      	lsls	r3, r3, #3
 800e4ae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e4b2:	4413      	add	r3, r2
 800e4b4:	3ba0      	subs	r3, #160	; 0xa0
 800e4b6:	e9c3 0100 	strd	r0, r1, [r3]
        b_s[qq] = rt;
 800e4ba:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800e4be:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800e4c2:	00db      	lsls	r3, r3, #3
 800e4c4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e4c8:	4413      	add	r3, r2
 800e4ca:	3ba0      	subs	r3, #160	; 0xa0
 800e4cc:	e9c3 0100 	strd	r0, r1, [r3]
        xswap_JoAqPjUv(V, 3 * d + 1, 3 * (d + 1) + 1);
 800e4d0:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 800e4d4:	4613      	mov	r3, r2
 800e4d6:	005b      	lsls	r3, r3, #1
 800e4d8:	4413      	add	r3, r2
 800e4da:	1c59      	adds	r1, r3, #1
 800e4dc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800e4e0:	1c5a      	adds	r2, r3, #1
 800e4e2:	4613      	mov	r3, r2
 800e4e4:	005b      	lsls	r3, r3, #1
 800e4e6:	4413      	add	r3, r2
 800e4e8:	3301      	adds	r3, #1
 800e4ea:	f507 7080 	add.w	r0, r7, #256	; 0x100
 800e4ee:	461a      	mov	r2, r3
 800e4f0:	6800      	ldr	r0, [r0, #0]
 800e4f2:	f001 fa3c 	bl	800f96e <xswap_JoAqPjUv>
        xswap_JoAqPjUv(U, 3 * d + 1, 3 * (d + 1) + 1);
 800e4f6:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 800e4fa:	4613      	mov	r3, r2
 800e4fc:	005b      	lsls	r3, r3, #1
 800e4fe:	4413      	add	r3, r2
 800e500:	1c59      	adds	r1, r3, #1
 800e502:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800e506:	1c5a      	adds	r2, r3, #1
 800e508:	4613      	mov	r3, r2
 800e50a:	005b      	lsls	r3, r3, #1
 800e50c:	4413      	add	r3, r2
 800e50e:	3301      	adds	r3, #1
 800e510:	461a      	mov	r2, r3
 800e512:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 800e516:	f001 fa2a 	bl	800f96e <xswap_JoAqPjUv>
        d = qq;
 800e51a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800e51e:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
        qq++;
 800e522:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800e526:	3301      	adds	r3, #1
 800e528:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
      while ((d + 1 < 3) && (b_s[d] < b_s[qq])) {
 800e52c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800e530:	2b01      	cmp	r3, #1
 800e532:	dc16      	bgt.n	800e562 <svd_u3DvUgOe+0x1b1a>
 800e534:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800e538:	00db      	lsls	r3, r3, #3
 800e53a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e53e:	4413      	add	r3, r2
 800e540:	3ba0      	subs	r3, #160	; 0xa0
 800e542:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e546:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800e54a:	00db      	lsls	r3, r3, #3
 800e54c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e550:	4413      	add	r3, r2
 800e552:	3ba0      	subs	r3, #160	; 0xa0
 800e554:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e558:	f7f2 fab2 	bl	8000ac0 <__aeabi_dcmplt>
 800e55c:	4603      	mov	r3, r0
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d18e      	bne.n	800e480 <svd_u3DvUgOe+0x1a38>
      }

      qq = 0;
 800e562:	2300      	movs	r3, #0
 800e564:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
      m--;
 800e568:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800e56c:	3b01      	subs	r3, #1
 800e56e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
      break;
 800e572:	bf00      	nop
  while ((m + 2 > 0) && (qq < 75)) {
 800e574:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800e578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e57c:	db04      	blt.n	800e588 <svd_u3DvUgOe+0x1b40>
 800e57e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800e582:	2b4a      	cmp	r3, #74	; 0x4a
 800e584:	f77f a972 	ble.w	800d86c <svd_u3DvUgOe+0xe24>
    }
  }

  s[0] = b_s[0];
 800e588:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 800e58c:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 800e590:	e9c1 2300 	strd	r2, r3, [r1]
  s[1] = b_s[1];
 800e594:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e598:	f103 0108 	add.w	r1, r3, #8
 800e59c:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 800e5a0:	e9c1 2300 	strd	r2, r3, [r1]
  s[2] = b_s[2];
 800e5a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e5a8:	f103 0110 	add.w	r1, r3, #16
 800e5ac:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800e5b0:	e9c1 2300 	strd	r2, r3, [r1]
}
 800e5b4:	bf00      	nop
 800e5b6:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800e5ba:	46bd      	mov	sp, r7
 800e5bc:	ecbd 8b02 	vpop	{d8}
 800e5c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e5c4:	f3af 8000 	nop.w
 800e5c8:	00000000 	.word	0x00000000
 800e5cc:	bff00000 	.word	0xbff00000

0800e5d0 <trisolve_BC1XmAGq>:
#include "rtwtypes.h"
#include "trisolve_BC1XmAGq.h"

void trisolve_BC1XmAGq(real_T A, real_T B[3])
{
 800e5d0:	b590      	push	{r4, r7, lr}
 800e5d2:	b085      	sub	sp, #20
 800e5d4:	af00      	add	r7, sp, #0
 800e5d6:	ed87 0b02 	vstr	d0, [r7, #8]
 800e5da:	6078      	str	r0, [r7, #4]
  if (B[0] != 0.0) {
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e5e2:	f04f 0200 	mov.w	r2, #0
 800e5e6:	f04f 0300 	mov.w	r3, #0
 800e5ea:	f7f2 fa5f 	bl	8000aac <__aeabi_dcmpeq>
 800e5ee:	4603      	mov	r3, r0
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d10b      	bne.n	800e60c <trisolve_BC1XmAGq+0x3c>
    B[0] /= A;
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e5fa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e5fe:	f7f2 f917 	bl	8000830 <__aeabi_ddiv>
 800e602:	4602      	mov	r2, r0
 800e604:	460b      	mov	r3, r1
 800e606:	6879      	ldr	r1, [r7, #4]
 800e608:	e9c1 2300 	strd	r2, r3, [r1]
  }

  if (B[1] != 0.0) {
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	3308      	adds	r3, #8
 800e610:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e614:	f04f 0200 	mov.w	r2, #0
 800e618:	f04f 0300 	mov.w	r3, #0
 800e61c:	f7f2 fa46 	bl	8000aac <__aeabi_dcmpeq>
 800e620:	4603      	mov	r3, r0
 800e622:	2b00      	cmp	r3, #0
 800e624:	d10e      	bne.n	800e644 <trisolve_BC1XmAGq+0x74>
    B[1] /= A;
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	3308      	adds	r3, #8
 800e62a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	f103 0408 	add.w	r4, r3, #8
 800e634:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e638:	f7f2 f8fa 	bl	8000830 <__aeabi_ddiv>
 800e63c:	4602      	mov	r2, r0
 800e63e:	460b      	mov	r3, r1
 800e640:	e9c4 2300 	strd	r2, r3, [r4]
  }

  if (B[2] != 0.0) {
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	3310      	adds	r3, #16
 800e648:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e64c:	f04f 0200 	mov.w	r2, #0
 800e650:	f04f 0300 	mov.w	r3, #0
 800e654:	f7f2 fa2a 	bl	8000aac <__aeabi_dcmpeq>
 800e658:	4603      	mov	r3, r0
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d000      	beq.n	800e660 <trisolve_BC1XmAGq+0x90>
    B[2] /= A;
  }
}
 800e65e:	e00e      	b.n	800e67e <trisolve_BC1XmAGq+0xae>
    B[2] /= A;
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	3310      	adds	r3, #16
 800e664:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	f103 0410 	add.w	r4, r3, #16
 800e66e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e672:	f7f2 f8dd 	bl	8000830 <__aeabi_ddiv>
 800e676:	4602      	mov	r2, r0
 800e678:	460b      	mov	r3, r1
 800e67a:	e9c4 2300 	strd	r2, r3, [r4]
}
 800e67e:	bf00      	nop
 800e680:	3714      	adds	r7, #20
 800e682:	46bd      	mov	sp, r7
 800e684:	bd90      	pop	{r4, r7, pc}

0800e686 <xaxpy_OQ28XA21>:
#include "rtwtypes.h"
#include "xaxpy_OQ28XA21.h"

void xaxpy_OQ28XA21(int32_T n, real_T a, const real_T x[9], int32_T ix0, real_T
                    y[3], int32_T iy0)
{
 800e686:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e688:	b08b      	sub	sp, #44	; 0x2c
 800e68a:	af00      	add	r7, sp, #0
 800e68c:	6178      	str	r0, [r7, #20]
 800e68e:	ed87 0b02 	vstr	d0, [r7, #8]
 800e692:	6139      	str	r1, [r7, #16]
 800e694:	607a      	str	r2, [r7, #4]
 800e696:	603b      	str	r3, [r7, #0]
  int32_T k;
  if ((n >= 1) && (!(a == 0.0))) {
 800e698:	697b      	ldr	r3, [r7, #20]
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	dd43      	ble.n	800e726 <xaxpy_OQ28XA21+0xa0>
 800e69e:	f04f 0200 	mov.w	r2, #0
 800e6a2:	f04f 0300 	mov.w	r3, #0
 800e6a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e6aa:	f7f2 f9ff 	bl	8000aac <__aeabi_dcmpeq>
 800e6ae:	4603      	mov	r3, r0
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d000      	beq.n	800e6b6 <xaxpy_OQ28XA21+0x30>
      y[iy] += a * x[ix];
      ix++;
      iy++;
    }
  }
}
 800e6b4:	e037      	b.n	800e726 <xaxpy_OQ28XA21+0xa0>
    ix = ix0 - 1;
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	3b01      	subs	r3, #1
 800e6ba:	623b      	str	r3, [r7, #32]
    iy = iy0 - 1;
 800e6bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e6be:	3b01      	subs	r3, #1
 800e6c0:	61fb      	str	r3, [r7, #28]
    for (k = 0; k < n; k++) {
 800e6c2:	2300      	movs	r3, #0
 800e6c4:	627b      	str	r3, [r7, #36]	; 0x24
 800e6c6:	e02a      	b.n	800e71e <xaxpy_OQ28XA21+0x98>
      y[iy] += a * x[ix];
 800e6c8:	69fb      	ldr	r3, [r7, #28]
 800e6ca:	00db      	lsls	r3, r3, #3
 800e6cc:	683a      	ldr	r2, [r7, #0]
 800e6ce:	4413      	add	r3, r2
 800e6d0:	e9d3 4500 	ldrd	r4, r5, [r3]
 800e6d4:	6a3b      	ldr	r3, [r7, #32]
 800e6d6:	00db      	lsls	r3, r3, #3
 800e6d8:	693a      	ldr	r2, [r7, #16]
 800e6da:	4413      	add	r3, r2
 800e6dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e6e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e6e4:	f7f1 ff7a 	bl	80005dc <__aeabi_dmul>
 800e6e8:	4602      	mov	r2, r0
 800e6ea:	460b      	mov	r3, r1
 800e6ec:	4610      	mov	r0, r2
 800e6ee:	4619      	mov	r1, r3
 800e6f0:	69fb      	ldr	r3, [r7, #28]
 800e6f2:	00db      	lsls	r3, r3, #3
 800e6f4:	683a      	ldr	r2, [r7, #0]
 800e6f6:	18d6      	adds	r6, r2, r3
 800e6f8:	4602      	mov	r2, r0
 800e6fa:	460b      	mov	r3, r1
 800e6fc:	4620      	mov	r0, r4
 800e6fe:	4629      	mov	r1, r5
 800e700:	f7f1 fdb6 	bl	8000270 <__adddf3>
 800e704:	4602      	mov	r2, r0
 800e706:	460b      	mov	r3, r1
 800e708:	e9c6 2300 	strd	r2, r3, [r6]
      ix++;
 800e70c:	6a3b      	ldr	r3, [r7, #32]
 800e70e:	3301      	adds	r3, #1
 800e710:	623b      	str	r3, [r7, #32]
      iy++;
 800e712:	69fb      	ldr	r3, [r7, #28]
 800e714:	3301      	adds	r3, #1
 800e716:	61fb      	str	r3, [r7, #28]
    for (k = 0; k < n; k++) {
 800e718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e71a:	3301      	adds	r3, #1
 800e71c:	627b      	str	r3, [r7, #36]	; 0x24
 800e71e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e720:	697b      	ldr	r3, [r7, #20]
 800e722:	429a      	cmp	r2, r3
 800e724:	dbd0      	blt.n	800e6c8 <xaxpy_OQ28XA21+0x42>
}
 800e726:	bf00      	nop
 800e728:	372c      	adds	r7, #44	; 0x2c
 800e72a:	46bd      	mov	sp, r7
 800e72c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e72e <xaxpy_Wxch84Fl>:
#include "rtwtypes.h"
#include "xaxpy_Wxch84Fl.h"

void xaxpy_Wxch84Fl(int32_T n, real_T a, const real_T x[3], int32_T ix0, real_T
                    y[9], int32_T iy0)
{
 800e72e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e730:	b08b      	sub	sp, #44	; 0x2c
 800e732:	af00      	add	r7, sp, #0
 800e734:	6178      	str	r0, [r7, #20]
 800e736:	ed87 0b02 	vstr	d0, [r7, #8]
 800e73a:	6139      	str	r1, [r7, #16]
 800e73c:	607a      	str	r2, [r7, #4]
 800e73e:	603b      	str	r3, [r7, #0]
  int32_T k;
  if ((n >= 1) && (!(a == 0.0))) {
 800e740:	697b      	ldr	r3, [r7, #20]
 800e742:	2b00      	cmp	r3, #0
 800e744:	dd43      	ble.n	800e7ce <xaxpy_Wxch84Fl+0xa0>
 800e746:	f04f 0200 	mov.w	r2, #0
 800e74a:	f04f 0300 	mov.w	r3, #0
 800e74e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e752:	f7f2 f9ab 	bl	8000aac <__aeabi_dcmpeq>
 800e756:	4603      	mov	r3, r0
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d000      	beq.n	800e75e <xaxpy_Wxch84Fl+0x30>
      y[iy] += a * x[ix];
      ix++;
      iy++;
    }
  }
}
 800e75c:	e037      	b.n	800e7ce <xaxpy_Wxch84Fl+0xa0>
    ix = ix0 - 1;
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	3b01      	subs	r3, #1
 800e762:	623b      	str	r3, [r7, #32]
    iy = iy0 - 1;
 800e764:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e766:	3b01      	subs	r3, #1
 800e768:	61fb      	str	r3, [r7, #28]
    for (k = 0; k < n; k++) {
 800e76a:	2300      	movs	r3, #0
 800e76c:	627b      	str	r3, [r7, #36]	; 0x24
 800e76e:	e02a      	b.n	800e7c6 <xaxpy_Wxch84Fl+0x98>
      y[iy] += a * x[ix];
 800e770:	69fb      	ldr	r3, [r7, #28]
 800e772:	00db      	lsls	r3, r3, #3
 800e774:	683a      	ldr	r2, [r7, #0]
 800e776:	4413      	add	r3, r2
 800e778:	e9d3 4500 	ldrd	r4, r5, [r3]
 800e77c:	6a3b      	ldr	r3, [r7, #32]
 800e77e:	00db      	lsls	r3, r3, #3
 800e780:	693a      	ldr	r2, [r7, #16]
 800e782:	4413      	add	r3, r2
 800e784:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e788:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e78c:	f7f1 ff26 	bl	80005dc <__aeabi_dmul>
 800e790:	4602      	mov	r2, r0
 800e792:	460b      	mov	r3, r1
 800e794:	4610      	mov	r0, r2
 800e796:	4619      	mov	r1, r3
 800e798:	69fb      	ldr	r3, [r7, #28]
 800e79a:	00db      	lsls	r3, r3, #3
 800e79c:	683a      	ldr	r2, [r7, #0]
 800e79e:	18d6      	adds	r6, r2, r3
 800e7a0:	4602      	mov	r2, r0
 800e7a2:	460b      	mov	r3, r1
 800e7a4:	4620      	mov	r0, r4
 800e7a6:	4629      	mov	r1, r5
 800e7a8:	f7f1 fd62 	bl	8000270 <__adddf3>
 800e7ac:	4602      	mov	r2, r0
 800e7ae:	460b      	mov	r3, r1
 800e7b0:	e9c6 2300 	strd	r2, r3, [r6]
      ix++;
 800e7b4:	6a3b      	ldr	r3, [r7, #32]
 800e7b6:	3301      	adds	r3, #1
 800e7b8:	623b      	str	r3, [r7, #32]
      iy++;
 800e7ba:	69fb      	ldr	r3, [r7, #28]
 800e7bc:	3301      	adds	r3, #1
 800e7be:	61fb      	str	r3, [r7, #28]
    for (k = 0; k < n; k++) {
 800e7c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7c2:	3301      	adds	r3, #1
 800e7c4:	627b      	str	r3, [r7, #36]	; 0x24
 800e7c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e7c8:	697b      	ldr	r3, [r7, #20]
 800e7ca:	429a      	cmp	r2, r3
 800e7cc:	dbd0      	blt.n	800e770 <xaxpy_Wxch84Fl+0x42>
}
 800e7ce:	bf00      	nop
 800e7d0:	372c      	adds	r7, #44	; 0x2c
 800e7d2:	46bd      	mov	sp, r7
 800e7d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e7d6 <xaxpy_guu0hJif>:
#include "rtwtypes.h"
#include "xaxpy_guu0hJif.h"

void xaxpy_guu0hJif(int32_T n, real_T a, int32_T ix0, real_T y[9], int32_T iy0)
{
 800e7d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e7d8:	b08b      	sub	sp, #44	; 0x2c
 800e7da:	af00      	add	r7, sp, #0
 800e7dc:	6178      	str	r0, [r7, #20]
 800e7de:	ed87 0b02 	vstr	d0, [r7, #8]
 800e7e2:	6139      	str	r1, [r7, #16]
 800e7e4:	607a      	str	r2, [r7, #4]
 800e7e6:	603b      	str	r3, [r7, #0]
  int32_T k;
  if ((n >= 1) && (!(a == 0.0))) {
 800e7e8:	697b      	ldr	r3, [r7, #20]
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	dd43      	ble.n	800e876 <xaxpy_guu0hJif+0xa0>
 800e7ee:	f04f 0200 	mov.w	r2, #0
 800e7f2:	f04f 0300 	mov.w	r3, #0
 800e7f6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e7fa:	f7f2 f957 	bl	8000aac <__aeabi_dcmpeq>
 800e7fe:	4603      	mov	r3, r0
 800e800:	2b00      	cmp	r3, #0
 800e802:	d000      	beq.n	800e806 <xaxpy_guu0hJif+0x30>
      y[iy] += a * y[ix];
      ix++;
      iy++;
    }
  }
}
 800e804:	e037      	b.n	800e876 <xaxpy_guu0hJif+0xa0>
    ix = ix0 - 1;
 800e806:	693b      	ldr	r3, [r7, #16]
 800e808:	3b01      	subs	r3, #1
 800e80a:	623b      	str	r3, [r7, #32]
    iy = iy0 - 1;
 800e80c:	683b      	ldr	r3, [r7, #0]
 800e80e:	3b01      	subs	r3, #1
 800e810:	61fb      	str	r3, [r7, #28]
    for (k = 0; k < n; k++) {
 800e812:	2300      	movs	r3, #0
 800e814:	627b      	str	r3, [r7, #36]	; 0x24
 800e816:	e02a      	b.n	800e86e <xaxpy_guu0hJif+0x98>
      y[iy] += a * y[ix];
 800e818:	69fb      	ldr	r3, [r7, #28]
 800e81a:	00db      	lsls	r3, r3, #3
 800e81c:	687a      	ldr	r2, [r7, #4]
 800e81e:	4413      	add	r3, r2
 800e820:	e9d3 4500 	ldrd	r4, r5, [r3]
 800e824:	6a3b      	ldr	r3, [r7, #32]
 800e826:	00db      	lsls	r3, r3, #3
 800e828:	687a      	ldr	r2, [r7, #4]
 800e82a:	4413      	add	r3, r2
 800e82c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e830:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e834:	f7f1 fed2 	bl	80005dc <__aeabi_dmul>
 800e838:	4602      	mov	r2, r0
 800e83a:	460b      	mov	r3, r1
 800e83c:	4610      	mov	r0, r2
 800e83e:	4619      	mov	r1, r3
 800e840:	69fb      	ldr	r3, [r7, #28]
 800e842:	00db      	lsls	r3, r3, #3
 800e844:	687a      	ldr	r2, [r7, #4]
 800e846:	18d6      	adds	r6, r2, r3
 800e848:	4602      	mov	r2, r0
 800e84a:	460b      	mov	r3, r1
 800e84c:	4620      	mov	r0, r4
 800e84e:	4629      	mov	r1, r5
 800e850:	f7f1 fd0e 	bl	8000270 <__adddf3>
 800e854:	4602      	mov	r2, r0
 800e856:	460b      	mov	r3, r1
 800e858:	e9c6 2300 	strd	r2, r3, [r6]
      ix++;
 800e85c:	6a3b      	ldr	r3, [r7, #32]
 800e85e:	3301      	adds	r3, #1
 800e860:	623b      	str	r3, [r7, #32]
      iy++;
 800e862:	69fb      	ldr	r3, [r7, #28]
 800e864:	3301      	adds	r3, #1
 800e866:	61fb      	str	r3, [r7, #28]
    for (k = 0; k < n; k++) {
 800e868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e86a:	3301      	adds	r3, #1
 800e86c:	627b      	str	r3, [r7, #36]	; 0x24
 800e86e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e870:	697b      	ldr	r3, [r7, #20]
 800e872:	429a      	cmp	r2, r3
 800e874:	dbd0      	blt.n	800e818 <xaxpy_guu0hJif+0x42>
}
 800e876:	bf00      	nop
 800e878:	372c      	adds	r7, #44	; 0x2c
 800e87a:	46bd      	mov	sp, r7
 800e87c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e87e <xdotc_mznw4aLl>:
#include "rtwtypes.h"
#include "xdotc_mznw4aLl.h"

real_T xdotc_mznw4aLl(int32_T n, const real_T x[9], int32_T ix0, const real_T y
                      [9], int32_T iy0)
{
 800e87e:	b580      	push	{r7, lr}
 800e880:	b08a      	sub	sp, #40	; 0x28
 800e882:	af00      	add	r7, sp, #0
 800e884:	60f8      	str	r0, [r7, #12]
 800e886:	60b9      	str	r1, [r7, #8]
 800e888:	607a      	str	r2, [r7, #4]
 800e88a:	603b      	str	r3, [r7, #0]
  real_T d;
  int32_T k;
  d = 0.0;
 800e88c:	f04f 0200 	mov.w	r2, #0
 800e890:	f04f 0300 	mov.w	r3, #0
 800e894:	e9c7 2308 	strd	r2, r3, [r7, #32]
  if (n >= 1) {
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	dd31      	ble.n	800e902 <xdotc_mznw4aLl+0x84>
    int32_T ix;
    int32_T iy;
    ix = ix0;
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	61bb      	str	r3, [r7, #24]
    iy = iy0;
 800e8a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8a4:	617b      	str	r3, [r7, #20]
    for (k = 0; k < n; k++) {
 800e8a6:	2300      	movs	r3, #0
 800e8a8:	61fb      	str	r3, [r7, #28]
 800e8aa:	e026      	b.n	800e8fa <xdotc_mznw4aLl+0x7c>
      d += x[ix - 1] * y[iy - 1];
 800e8ac:	69bb      	ldr	r3, [r7, #24]
 800e8ae:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800e8b2:	3b01      	subs	r3, #1
 800e8b4:	00db      	lsls	r3, r3, #3
 800e8b6:	68ba      	ldr	r2, [r7, #8]
 800e8b8:	4413      	add	r3, r2
 800e8ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e8be:	697b      	ldr	r3, [r7, #20]
 800e8c0:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800e8c4:	3b01      	subs	r3, #1
 800e8c6:	00db      	lsls	r3, r3, #3
 800e8c8:	683a      	ldr	r2, [r7, #0]
 800e8ca:	4413      	add	r3, r2
 800e8cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8d0:	f7f1 fe84 	bl	80005dc <__aeabi_dmul>
 800e8d4:	4602      	mov	r2, r0
 800e8d6:	460b      	mov	r3, r1
 800e8d8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800e8dc:	f7f1 fcc8 	bl	8000270 <__adddf3>
 800e8e0:	4602      	mov	r2, r0
 800e8e2:	460b      	mov	r3, r1
 800e8e4:	e9c7 2308 	strd	r2, r3, [r7, #32]
      ix++;
 800e8e8:	69bb      	ldr	r3, [r7, #24]
 800e8ea:	3301      	adds	r3, #1
 800e8ec:	61bb      	str	r3, [r7, #24]
      iy++;
 800e8ee:	697b      	ldr	r3, [r7, #20]
 800e8f0:	3301      	adds	r3, #1
 800e8f2:	617b      	str	r3, [r7, #20]
    for (k = 0; k < n; k++) {
 800e8f4:	69fb      	ldr	r3, [r7, #28]
 800e8f6:	3301      	adds	r3, #1
 800e8f8:	61fb      	str	r3, [r7, #28]
 800e8fa:	69fa      	ldr	r2, [r7, #28]
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	429a      	cmp	r2, r3
 800e900:	dbd4      	blt.n	800e8ac <xdotc_mznw4aLl+0x2e>
    }
  }

  return d;
 800e902:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800e906:	ec43 2b17 	vmov	d7, r2, r3
}
 800e90a:	eeb0 0a47 	vmov.f32	s0, s14
 800e90e:	eef0 0a67 	vmov.f32	s1, s15
 800e912:	3728      	adds	r7, #40	; 0x28
 800e914:	46bd      	mov	sp, r7
 800e916:	bd80      	pop	{r7, pc}

0800e918 <xgemv_NQlWbt2i>:
#include "rtwtypes.h"
#include "xgemv_NQlWbt2i.h"

void xgemv_NQlWbt2i(int32_T m, int32_T n, const real_T A[18], int32_T ia0, const
                    real_T x[18], int32_T ix0, real_T y[3])
{
 800e918:	b590      	push	{r4, r7, lr}
 800e91a:	b08f      	sub	sp, #60	; 0x3c
 800e91c:	af00      	add	r7, sp, #0
 800e91e:	60f8      	str	r0, [r7, #12]
 800e920:	60b9      	str	r1, [r7, #8]
 800e922:	607a      	str	r2, [r7, #4]
 800e924:	603b      	str	r3, [r7, #0]
  int32_T b_iy;
  int32_T ia;
  int32_T iac;
  if ((m != 0) && (n != 0)) {
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d079      	beq.n	800ea20 <xgemv_NQlWbt2i+0x108>
 800e92c:	68bb      	ldr	r3, [r7, #8]
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d076      	beq.n	800ea20 <xgemv_NQlWbt2i+0x108>
    int32_T b;
    for (b_iy = 0; b_iy < n; b_iy++) {
 800e932:	2300      	movs	r3, #0
 800e934:	637b      	str	r3, [r7, #52]	; 0x34
 800e936:	e00c      	b.n	800e952 <xgemv_NQlWbt2i+0x3a>
      y[b_iy] = 0.0;
 800e938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e93a:	00db      	lsls	r3, r3, #3
 800e93c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e93e:	18d1      	adds	r1, r2, r3
 800e940:	f04f 0200 	mov.w	r2, #0
 800e944:	f04f 0300 	mov.w	r3, #0
 800e948:	e9c1 2300 	strd	r2, r3, [r1]
    for (b_iy = 0; b_iy < n; b_iy++) {
 800e94c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e94e:	3301      	adds	r3, #1
 800e950:	637b      	str	r3, [r7, #52]	; 0x34
 800e952:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e954:	68bb      	ldr	r3, [r7, #8]
 800e956:	429a      	cmp	r2, r3
 800e958:	dbee      	blt.n	800e938 <xgemv_NQlWbt2i+0x20>
    }

    b_iy = 0;
 800e95a:	2300      	movs	r3, #0
 800e95c:	637b      	str	r3, [r7, #52]	; 0x34
    b = (n - 1) * 6 + ia0;
 800e95e:	68bb      	ldr	r3, [r7, #8]
 800e960:	1e5a      	subs	r2, r3, #1
 800e962:	4613      	mov	r3, r2
 800e964:	005b      	lsls	r3, r3, #1
 800e966:	4413      	add	r3, r2
 800e968:	005b      	lsls	r3, r3, #1
 800e96a:	461a      	mov	r2, r3
 800e96c:	683b      	ldr	r3, [r7, #0]
 800e96e:	4413      	add	r3, r2
 800e970:	61bb      	str	r3, [r7, #24]
    for (iac = ia0; iac <= b; iac += 6) {
 800e972:	683b      	ldr	r3, [r7, #0]
 800e974:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e976:	e04f      	b.n	800ea18 <xgemv_NQlWbt2i+0x100>
      real_T c;
      int32_T d;
      int32_T ix;
      ix = ix0;
 800e978:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e97a:	61fb      	str	r3, [r7, #28]
      c = 0.0;
 800e97c:	f04f 0200 	mov.w	r2, #0
 800e980:	f04f 0300 	mov.w	r3, #0
 800e984:	e9c7 2308 	strd	r2, r3, [r7, #32]
      d = (iac + m) - 1;
 800e988:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	4413      	add	r3, r2
 800e98e:	3b01      	subs	r3, #1
 800e990:	617b      	str	r3, [r7, #20]
      for (ia = iac; ia <= d; ia++) {
 800e992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e994:	633b      	str	r3, [r7, #48]	; 0x30
 800e996:	e023      	b.n	800e9e0 <xgemv_NQlWbt2i+0xc8>
        c += A[ia - 1] * x[ix - 1];
 800e998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e99a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800e99e:	3b01      	subs	r3, #1
 800e9a0:	00db      	lsls	r3, r3, #3
 800e9a2:	687a      	ldr	r2, [r7, #4]
 800e9a4:	4413      	add	r3, r2
 800e9a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e9aa:	69fb      	ldr	r3, [r7, #28]
 800e9ac:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800e9b0:	3b01      	subs	r3, #1
 800e9b2:	00db      	lsls	r3, r3, #3
 800e9b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e9b6:	4413      	add	r3, r2
 800e9b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9bc:	f7f1 fe0e 	bl	80005dc <__aeabi_dmul>
 800e9c0:	4602      	mov	r2, r0
 800e9c2:	460b      	mov	r3, r1
 800e9c4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800e9c8:	f7f1 fc52 	bl	8000270 <__adddf3>
 800e9cc:	4602      	mov	r2, r0
 800e9ce:	460b      	mov	r3, r1
 800e9d0:	e9c7 2308 	strd	r2, r3, [r7, #32]
        ix++;
 800e9d4:	69fb      	ldr	r3, [r7, #28]
 800e9d6:	3301      	adds	r3, #1
 800e9d8:	61fb      	str	r3, [r7, #28]
      for (ia = iac; ia <= d; ia++) {
 800e9da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9dc:	3301      	adds	r3, #1
 800e9de:	633b      	str	r3, [r7, #48]	; 0x30
 800e9e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e9e2:	697b      	ldr	r3, [r7, #20]
 800e9e4:	429a      	cmp	r2, r3
 800e9e6:	ddd7      	ble.n	800e998 <xgemv_NQlWbt2i+0x80>
      }

      y[b_iy] += c;
 800e9e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e9ea:	00db      	lsls	r3, r3, #3
 800e9ec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e9ee:	4413      	add	r3, r2
 800e9f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e9f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e9f6:	00db      	lsls	r3, r3, #3
 800e9f8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e9fa:	18d4      	adds	r4, r2, r3
 800e9fc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ea00:	f7f1 fc36 	bl	8000270 <__adddf3>
 800ea04:	4602      	mov	r2, r0
 800ea06:	460b      	mov	r3, r1
 800ea08:	e9c4 2300 	strd	r2, r3, [r4]
      b_iy++;
 800ea0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea0e:	3301      	adds	r3, #1
 800ea10:	637b      	str	r3, [r7, #52]	; 0x34
    for (iac = ia0; iac <= b; iac += 6) {
 800ea12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea14:	3306      	adds	r3, #6
 800ea16:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ea18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ea1a:	69bb      	ldr	r3, [r7, #24]
 800ea1c:	429a      	cmp	r2, r3
 800ea1e:	ddab      	ble.n	800e978 <xgemv_NQlWbt2i+0x60>
    }
  }
}
 800ea20:	bf00      	nop
 800ea22:	373c      	adds	r7, #60	; 0x3c
 800ea24:	46bd      	mov	sp, r7
 800ea26:	bd90      	pop	{r4, r7, pc}

0800ea28 <xgemv_fRiR1I1O>:
#include "rtwtypes.h"
#include "xgemv_fRiR1I1O.h"

void xgemv_fRiR1I1O(int32_T m, int32_T n, const real_T A[9], int32_T ia0, const
                    real_T x[9], int32_T ix0, real_T y[3])
{
 800ea28:	b590      	push	{r4, r7, lr}
 800ea2a:	b08f      	sub	sp, #60	; 0x3c
 800ea2c:	af00      	add	r7, sp, #0
 800ea2e:	60f8      	str	r0, [r7, #12]
 800ea30:	60b9      	str	r1, [r7, #8]
 800ea32:	607a      	str	r2, [r7, #4]
 800ea34:	603b      	str	r3, [r7, #0]
  int32_T b_iy;
  int32_T ia;
  int32_T iac;
  if ((m != 0) && (n != 0)) {
 800ea36:	68fb      	ldr	r3, [r7, #12]
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d077      	beq.n	800eb2c <xgemv_fRiR1I1O+0x104>
 800ea3c:	68bb      	ldr	r3, [r7, #8]
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d074      	beq.n	800eb2c <xgemv_fRiR1I1O+0x104>
    int32_T b;
    for (b_iy = 0; b_iy < n; b_iy++) {
 800ea42:	2300      	movs	r3, #0
 800ea44:	637b      	str	r3, [r7, #52]	; 0x34
 800ea46:	e00c      	b.n	800ea62 <xgemv_fRiR1I1O+0x3a>
      y[b_iy] = 0.0;
 800ea48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea4a:	00db      	lsls	r3, r3, #3
 800ea4c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ea4e:	18d1      	adds	r1, r2, r3
 800ea50:	f04f 0200 	mov.w	r2, #0
 800ea54:	f04f 0300 	mov.w	r3, #0
 800ea58:	e9c1 2300 	strd	r2, r3, [r1]
    for (b_iy = 0; b_iy < n; b_iy++) {
 800ea5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea5e:	3301      	adds	r3, #1
 800ea60:	637b      	str	r3, [r7, #52]	; 0x34
 800ea62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ea64:	68bb      	ldr	r3, [r7, #8]
 800ea66:	429a      	cmp	r2, r3
 800ea68:	dbee      	blt.n	800ea48 <xgemv_fRiR1I1O+0x20>
    }

    b_iy = 0;
 800ea6a:	2300      	movs	r3, #0
 800ea6c:	637b      	str	r3, [r7, #52]	; 0x34
    b = (n - 1) * 3 + ia0;
 800ea6e:	68bb      	ldr	r3, [r7, #8]
 800ea70:	1e5a      	subs	r2, r3, #1
 800ea72:	4613      	mov	r3, r2
 800ea74:	005b      	lsls	r3, r3, #1
 800ea76:	4413      	add	r3, r2
 800ea78:	683a      	ldr	r2, [r7, #0]
 800ea7a:	4413      	add	r3, r2
 800ea7c:	61bb      	str	r3, [r7, #24]
    for (iac = ia0; iac <= b; iac += 3) {
 800ea7e:	683b      	ldr	r3, [r7, #0]
 800ea80:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ea82:	e04f      	b.n	800eb24 <xgemv_fRiR1I1O+0xfc>
      real_T c;
      int32_T d;
      int32_T ix;
      ix = ix0;
 800ea84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ea86:	61fb      	str	r3, [r7, #28]
      c = 0.0;
 800ea88:	f04f 0200 	mov.w	r2, #0
 800ea8c:	f04f 0300 	mov.w	r3, #0
 800ea90:	e9c7 2308 	strd	r2, r3, [r7, #32]
      d = (iac + m) - 1;
 800ea94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	4413      	add	r3, r2
 800ea9a:	3b01      	subs	r3, #1
 800ea9c:	617b      	str	r3, [r7, #20]
      for (ia = iac; ia <= d; ia++) {
 800ea9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eaa0:	633b      	str	r3, [r7, #48]	; 0x30
 800eaa2:	e023      	b.n	800eaec <xgemv_fRiR1I1O+0xc4>
        c += A[ia - 1] * x[ix - 1];
 800eaa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eaa6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800eaaa:	3b01      	subs	r3, #1
 800eaac:	00db      	lsls	r3, r3, #3
 800eaae:	687a      	ldr	r2, [r7, #4]
 800eab0:	4413      	add	r3, r2
 800eab2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800eab6:	69fb      	ldr	r3, [r7, #28]
 800eab8:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800eabc:	3b01      	subs	r3, #1
 800eabe:	00db      	lsls	r3, r3, #3
 800eac0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800eac2:	4413      	add	r3, r2
 800eac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eac8:	f7f1 fd88 	bl	80005dc <__aeabi_dmul>
 800eacc:	4602      	mov	r2, r0
 800eace:	460b      	mov	r3, r1
 800ead0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800ead4:	f7f1 fbcc 	bl	8000270 <__adddf3>
 800ead8:	4602      	mov	r2, r0
 800eada:	460b      	mov	r3, r1
 800eadc:	e9c7 2308 	strd	r2, r3, [r7, #32]
        ix++;
 800eae0:	69fb      	ldr	r3, [r7, #28]
 800eae2:	3301      	adds	r3, #1
 800eae4:	61fb      	str	r3, [r7, #28]
      for (ia = iac; ia <= d; ia++) {
 800eae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eae8:	3301      	adds	r3, #1
 800eaea:	633b      	str	r3, [r7, #48]	; 0x30
 800eaec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eaee:	697b      	ldr	r3, [r7, #20]
 800eaf0:	429a      	cmp	r2, r3
 800eaf2:	ddd7      	ble.n	800eaa4 <xgemv_fRiR1I1O+0x7c>
      }

      y[b_iy] += c;
 800eaf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eaf6:	00db      	lsls	r3, r3, #3
 800eaf8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800eafa:	4413      	add	r3, r2
 800eafc:	e9d3 0100 	ldrd	r0, r1, [r3]
 800eb00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb02:	00db      	lsls	r3, r3, #3
 800eb04:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800eb06:	18d4      	adds	r4, r2, r3
 800eb08:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800eb0c:	f7f1 fbb0 	bl	8000270 <__adddf3>
 800eb10:	4602      	mov	r2, r0
 800eb12:	460b      	mov	r3, r1
 800eb14:	e9c4 2300 	strd	r2, r3, [r4]
      b_iy++;
 800eb18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb1a:	3301      	adds	r3, #1
 800eb1c:	637b      	str	r3, [r7, #52]	; 0x34
    for (iac = ia0; iac <= b; iac += 3) {
 800eb1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb20:	3303      	adds	r3, #3
 800eb22:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eb24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eb26:	69bb      	ldr	r3, [r7, #24]
 800eb28:	429a      	cmp	r2, r3
 800eb2a:	ddab      	ble.n	800ea84 <xgemv_fRiR1I1O+0x5c>
    }
  }
}
 800eb2c:	bf00      	nop
 800eb2e:	373c      	adds	r7, #60	; 0x3c
 800eb30:	46bd      	mov	sp, r7
 800eb32:	bd90      	pop	{r4, r7, pc}

0800eb34 <xgerc_R09LiDgJ>:
#include "rtwtypes.h"
#include "xgerc_R09LiDgJ.h"

void xgerc_R09LiDgJ(int32_T m, int32_T n, real_T alpha1, int32_T ix0, const
                    real_T y[3], real_T A[18], int32_T ia0)
{
 800eb34:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eb36:	b091      	sub	sp, #68	; 0x44
 800eb38:	af00      	add	r7, sp, #0
 800eb3a:	6178      	str	r0, [r7, #20]
 800eb3c:	6139      	str	r1, [r7, #16]
 800eb3e:	ed87 0b02 	vstr	d0, [r7, #8]
 800eb42:	607a      	str	r2, [r7, #4]
 800eb44:	603b      	str	r3, [r7, #0]
  int32_T j;
  if (!(alpha1 == 0.0)) {
 800eb46:	f04f 0200 	mov.w	r2, #0
 800eb4a:	f04f 0300 	mov.w	r3, #0
 800eb4e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800eb52:	f7f1 ffab 	bl	8000aac <__aeabi_dcmpeq>
 800eb56:	4603      	mov	r3, r0
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d000      	beq.n	800eb5e <xgerc_R09LiDgJ+0x2a>

      jy++;
      jA += 6;
    }
  }
}
 800eb5c:	e069      	b.n	800ec32 <xgerc_R09LiDgJ+0xfe>
    jA = ia0 - 1;
 800eb5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eb60:	3b01      	subs	r3, #1
 800eb62:	63bb      	str	r3, [r7, #56]	; 0x38
    jy = 0;
 800eb64:	2300      	movs	r3, #0
 800eb66:	637b      	str	r3, [r7, #52]	; 0x34
    for (j = 0; j < n; j++) {
 800eb68:	2300      	movs	r3, #0
 800eb6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800eb6c:	e05d      	b.n	800ec2a <xgerc_R09LiDgJ+0xf6>
      if (y[jy] != 0.0) {
 800eb6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb70:	00db      	lsls	r3, r3, #3
 800eb72:	683a      	ldr	r2, [r7, #0]
 800eb74:	4413      	add	r3, r2
 800eb76:	e9d3 0100 	ldrd	r0, r1, [r3]
 800eb7a:	f04f 0200 	mov.w	r2, #0
 800eb7e:	f04f 0300 	mov.w	r3, #0
 800eb82:	f7f1 ff93 	bl	8000aac <__aeabi_dcmpeq>
 800eb86:	4603      	mov	r3, r0
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d145      	bne.n	800ec18 <xgerc_R09LiDgJ+0xe4>
        temp = y[jy] * alpha1;
 800eb8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb8e:	00db      	lsls	r3, r3, #3
 800eb90:	683a      	ldr	r2, [r7, #0]
 800eb92:	4413      	add	r3, r2
 800eb94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb98:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800eb9c:	f7f1 fd1e 	bl	80005dc <__aeabi_dmul>
 800eba0:	4602      	mov	r2, r0
 800eba2:	460b      	mov	r3, r1
 800eba4:	e9c7 2308 	strd	r2, r3, [r7, #32]
        ix = ix0;
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	62fb      	str	r3, [r7, #44]	; 0x2c
        ijA = jA;
 800ebac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebae:	633b      	str	r3, [r7, #48]	; 0x30
        b = m + jA;
 800ebb0:	697a      	ldr	r2, [r7, #20]
 800ebb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebb4:	4413      	add	r3, r2
 800ebb6:	61fb      	str	r3, [r7, #28]
        while (ijA + 1 <= b) {
 800ebb8:	e02a      	b.n	800ec10 <xgerc_R09LiDgJ+0xdc>
          A[ijA] += A[ix - 1] * temp;
 800ebba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebbc:	00db      	lsls	r3, r3, #3
 800ebbe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ebc0:	4413      	add	r3, r2
 800ebc2:	e9d3 4500 	ldrd	r4, r5, [r3]
 800ebc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebc8:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800ebcc:	3b01      	subs	r3, #1
 800ebce:	00db      	lsls	r3, r3, #3
 800ebd0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ebd2:	4413      	add	r3, r2
 800ebd4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ebd8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ebdc:	f7f1 fcfe 	bl	80005dc <__aeabi_dmul>
 800ebe0:	4602      	mov	r2, r0
 800ebe2:	460b      	mov	r3, r1
 800ebe4:	4610      	mov	r0, r2
 800ebe6:	4619      	mov	r1, r3
 800ebe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebea:	00db      	lsls	r3, r3, #3
 800ebec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ebee:	18d6      	adds	r6, r2, r3
 800ebf0:	4602      	mov	r2, r0
 800ebf2:	460b      	mov	r3, r1
 800ebf4:	4620      	mov	r0, r4
 800ebf6:	4629      	mov	r1, r5
 800ebf8:	f7f1 fb3a 	bl	8000270 <__adddf3>
 800ebfc:	4602      	mov	r2, r0
 800ebfe:	460b      	mov	r3, r1
 800ec00:	e9c6 2300 	strd	r2, r3, [r6]
          ix++;
 800ec04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec06:	3301      	adds	r3, #1
 800ec08:	62fb      	str	r3, [r7, #44]	; 0x2c
          ijA++;
 800ec0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec0c:	3301      	adds	r3, #1
 800ec0e:	633b      	str	r3, [r7, #48]	; 0x30
        while (ijA + 1 <= b) {
 800ec10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ec12:	69fb      	ldr	r3, [r7, #28]
 800ec14:	429a      	cmp	r2, r3
 800ec16:	dbd0      	blt.n	800ebba <xgerc_R09LiDgJ+0x86>
      jy++;
 800ec18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec1a:	3301      	adds	r3, #1
 800ec1c:	637b      	str	r3, [r7, #52]	; 0x34
      jA += 6;
 800ec1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec20:	3306      	adds	r3, #6
 800ec22:	63bb      	str	r3, [r7, #56]	; 0x38
    for (j = 0; j < n; j++) {
 800ec24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec26:	3301      	adds	r3, #1
 800ec28:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ec2a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ec2c:	693b      	ldr	r3, [r7, #16]
 800ec2e:	429a      	cmp	r2, r3
 800ec30:	db9d      	blt.n	800eb6e <xgerc_R09LiDgJ+0x3a>
}
 800ec32:	bf00      	nop
 800ec34:	3744      	adds	r7, #68	; 0x44
 800ec36:	46bd      	mov	sp, r7
 800ec38:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ec3a <xgerc_tNNiazQU>:
#include "rtwtypes.h"
#include "xgerc_tNNiazQU.h"

void xgerc_tNNiazQU(int32_T m, int32_T n, real_T alpha1, int32_T ix0, const
                    real_T y[3], real_T A[9], int32_T ia0)
{
 800ec3a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec3c:	b091      	sub	sp, #68	; 0x44
 800ec3e:	af00      	add	r7, sp, #0
 800ec40:	6178      	str	r0, [r7, #20]
 800ec42:	6139      	str	r1, [r7, #16]
 800ec44:	ed87 0b02 	vstr	d0, [r7, #8]
 800ec48:	607a      	str	r2, [r7, #4]
 800ec4a:	603b      	str	r3, [r7, #0]
  int32_T j;
  if (!(alpha1 == 0.0)) {
 800ec4c:	f04f 0200 	mov.w	r2, #0
 800ec50:	f04f 0300 	mov.w	r3, #0
 800ec54:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ec58:	f7f1 ff28 	bl	8000aac <__aeabi_dcmpeq>
 800ec5c:	4603      	mov	r3, r0
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d000      	beq.n	800ec64 <xgerc_tNNiazQU+0x2a>

      jy++;
      jA += 3;
    }
  }
}
 800ec62:	e069      	b.n	800ed38 <xgerc_tNNiazQU+0xfe>
    jA = ia0 - 1;
 800ec64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ec66:	3b01      	subs	r3, #1
 800ec68:	63bb      	str	r3, [r7, #56]	; 0x38
    jy = 0;
 800ec6a:	2300      	movs	r3, #0
 800ec6c:	637b      	str	r3, [r7, #52]	; 0x34
    for (j = 0; j < n; j++) {
 800ec6e:	2300      	movs	r3, #0
 800ec70:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ec72:	e05d      	b.n	800ed30 <xgerc_tNNiazQU+0xf6>
      if (y[jy] != 0.0) {
 800ec74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec76:	00db      	lsls	r3, r3, #3
 800ec78:	683a      	ldr	r2, [r7, #0]
 800ec7a:	4413      	add	r3, r2
 800ec7c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ec80:	f04f 0200 	mov.w	r2, #0
 800ec84:	f04f 0300 	mov.w	r3, #0
 800ec88:	f7f1 ff10 	bl	8000aac <__aeabi_dcmpeq>
 800ec8c:	4603      	mov	r3, r0
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d145      	bne.n	800ed1e <xgerc_tNNiazQU+0xe4>
        temp = y[jy] * alpha1;
 800ec92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec94:	00db      	lsls	r3, r3, #3
 800ec96:	683a      	ldr	r2, [r7, #0]
 800ec98:	4413      	add	r3, r2
 800ec9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec9e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800eca2:	f7f1 fc9b 	bl	80005dc <__aeabi_dmul>
 800eca6:	4602      	mov	r2, r0
 800eca8:	460b      	mov	r3, r1
 800ecaa:	e9c7 2308 	strd	r2, r3, [r7, #32]
        ix = ix0;
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ijA = jA;
 800ecb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecb4:	633b      	str	r3, [r7, #48]	; 0x30
        b = m + jA;
 800ecb6:	697a      	ldr	r2, [r7, #20]
 800ecb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecba:	4413      	add	r3, r2
 800ecbc:	61fb      	str	r3, [r7, #28]
        while (ijA + 1 <= b) {
 800ecbe:	e02a      	b.n	800ed16 <xgerc_tNNiazQU+0xdc>
          A[ijA] += A[ix - 1] * temp;
 800ecc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecc2:	00db      	lsls	r3, r3, #3
 800ecc4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ecc6:	4413      	add	r3, r2
 800ecc8:	e9d3 4500 	ldrd	r4, r5, [r3]
 800eccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecce:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800ecd2:	3b01      	subs	r3, #1
 800ecd4:	00db      	lsls	r3, r3, #3
 800ecd6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ecd8:	4413      	add	r3, r2
 800ecda:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ecde:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ece2:	f7f1 fc7b 	bl	80005dc <__aeabi_dmul>
 800ece6:	4602      	mov	r2, r0
 800ece8:	460b      	mov	r3, r1
 800ecea:	4610      	mov	r0, r2
 800ecec:	4619      	mov	r1, r3
 800ecee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecf0:	00db      	lsls	r3, r3, #3
 800ecf2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ecf4:	18d6      	adds	r6, r2, r3
 800ecf6:	4602      	mov	r2, r0
 800ecf8:	460b      	mov	r3, r1
 800ecfa:	4620      	mov	r0, r4
 800ecfc:	4629      	mov	r1, r5
 800ecfe:	f7f1 fab7 	bl	8000270 <__adddf3>
 800ed02:	4602      	mov	r2, r0
 800ed04:	460b      	mov	r3, r1
 800ed06:	e9c6 2300 	strd	r2, r3, [r6]
          ix++;
 800ed0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed0c:	3301      	adds	r3, #1
 800ed0e:	62fb      	str	r3, [r7, #44]	; 0x2c
          ijA++;
 800ed10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed12:	3301      	adds	r3, #1
 800ed14:	633b      	str	r3, [r7, #48]	; 0x30
        while (ijA + 1 <= b) {
 800ed16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ed18:	69fb      	ldr	r3, [r7, #28]
 800ed1a:	429a      	cmp	r2, r3
 800ed1c:	dbd0      	blt.n	800ecc0 <xgerc_tNNiazQU+0x86>
      jy++;
 800ed1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed20:	3301      	adds	r3, #1
 800ed22:	637b      	str	r3, [r7, #52]	; 0x34
      jA += 3;
 800ed24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed26:	3303      	adds	r3, #3
 800ed28:	63bb      	str	r3, [r7, #56]	; 0x38
    for (j = 0; j < n; j++) {
 800ed2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed2c:	3301      	adds	r3, #1
 800ed2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ed30:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ed32:	693b      	ldr	r3, [r7, #16]
 800ed34:	429a      	cmp	r2, r3
 800ed36:	db9d      	blt.n	800ec74 <xgerc_tNNiazQU+0x3a>
}
 800ed38:	bf00      	nop
 800ed3a:	3744      	adds	r7, #68	; 0x44
 800ed3c:	46bd      	mov	sp, r7
 800ed3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ed40 <xnrm2_7bm34mDQ>:
#include "rtwtypes.h"
#include "xnrm2_7bm34mDQ.h"
#include <math.h>

real_T xnrm2_7bm34mDQ(int32_T n, const real_T x[6], int32_T ix0)
{
 800ed40:	b580      	push	{r7, lr}
 800ed42:	b092      	sub	sp, #72	; 0x48
 800ed44:	af00      	add	r7, sp, #0
 800ed46:	60f8      	str	r0, [r7, #12]
 800ed48:	60b9      	str	r1, [r7, #8]
 800ed4a:	607a      	str	r2, [r7, #4]
  real_T y;
  int32_T k;
  y = 0.0;
 800ed4c:	f04f 0200 	mov.w	r2, #0
 800ed50:	f04f 0300 	mov.w	r3, #0
 800ed54:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  if (n >= 1) {
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	f340 8090 	ble.w	800ee80 <xnrm2_7bm34mDQ+0x140>
    if (n == 1) {
 800ed60:	68fb      	ldr	r3, [r7, #12]
 800ed62:	2b01      	cmp	r3, #1
 800ed64:	d10e      	bne.n	800ed84 <xnrm2_7bm34mDQ+0x44>
      y = fabs(x[ix0 - 1]);
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800ed6c:	3b01      	subs	r3, #1
 800ed6e:	00db      	lsls	r3, r3, #3
 800ed70:	68ba      	ldr	r2, [r7, #8]
 800ed72:	4413      	add	r3, r2
 800ed74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed78:	4611      	mov	r1, r2
 800ed7a:	6439      	str	r1, [r7, #64]	; 0x40
 800ed7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ed80:	647b      	str	r3, [r7, #68]	; 0x44
 800ed82:	e07d      	b.n	800ee80 <xnrm2_7bm34mDQ+0x140>
    } else {
      real_T scale;
      int32_T kend;
      scale = 3.3121686421112381E-170;
 800ed84:	f04f 0200 	mov.w	r2, #0
 800ed88:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 800ed8c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      kend = (ix0 + n) - 1;
 800ed90:	687a      	ldr	r2, [r7, #4]
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	4413      	add	r3, r2
 800ed96:	3b01      	subs	r3, #1
 800ed98:	62fb      	str	r3, [r7, #44]	; 0x2c
      for (k = ix0; k <= kend; k++) {
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ed9e:	e05d      	b.n	800ee5c <xnrm2_7bm34mDQ+0x11c>
        real_T absxk;
        absxk = fabs(x[k - 1]);
 800eda0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eda2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800eda6:	3b01      	subs	r3, #1
 800eda8:	00db      	lsls	r3, r3, #3
 800edaa:	68ba      	ldr	r2, [r7, #8]
 800edac:	4413      	add	r3, r2
 800edae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edb2:	4611      	mov	r1, r2
 800edb4:	6239      	str	r1, [r7, #32]
 800edb6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800edba:	627b      	str	r3, [r7, #36]	; 0x24
        if (absxk > scale) {
 800edbc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800edc0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800edc4:	f7f1 fe9a 	bl	8000afc <__aeabi_dcmpgt>
 800edc8:	4603      	mov	r3, r0
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d029      	beq.n	800ee22 <xnrm2_7bm34mDQ+0xe2>
          real_T t;
          t = scale / absxk;
 800edce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800edd2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800edd6:	f7f1 fd2b 	bl	8000830 <__aeabi_ddiv>
 800edda:	4602      	mov	r2, r0
 800eddc:	460b      	mov	r3, r1
 800edde:	e9c7 2304 	strd	r2, r3, [r7, #16]
          y = y * t * t + 1.0;
 800ede2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ede6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800edea:	f7f1 fbf7 	bl	80005dc <__aeabi_dmul>
 800edee:	4602      	mov	r2, r0
 800edf0:	460b      	mov	r3, r1
 800edf2:	4610      	mov	r0, r2
 800edf4:	4619      	mov	r1, r3
 800edf6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800edfa:	f7f1 fbef 	bl	80005dc <__aeabi_dmul>
 800edfe:	4602      	mov	r2, r0
 800ee00:	460b      	mov	r3, r1
 800ee02:	4610      	mov	r0, r2
 800ee04:	4619      	mov	r1, r3
 800ee06:	f04f 0200 	mov.w	r2, #0
 800ee0a:	4b23      	ldr	r3, [pc, #140]	; (800ee98 <xnrm2_7bm34mDQ+0x158>)
 800ee0c:	f7f1 fa30 	bl	8000270 <__adddf3>
 800ee10:	4602      	mov	r2, r0
 800ee12:	460b      	mov	r3, r1
 800ee14:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
          scale = absxk;
 800ee18:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ee1c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 800ee20:	e019      	b.n	800ee56 <xnrm2_7bm34mDQ+0x116>
        } else {
          real_T t;
          t = absxk / scale;
 800ee22:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800ee26:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800ee2a:	f7f1 fd01 	bl	8000830 <__aeabi_ddiv>
 800ee2e:	4602      	mov	r2, r0
 800ee30:	460b      	mov	r3, r1
 800ee32:	e9c7 2306 	strd	r2, r3, [r7, #24]
          y += t * t;
 800ee36:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ee3a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800ee3e:	f7f1 fbcd 	bl	80005dc <__aeabi_dmul>
 800ee42:	4602      	mov	r2, r0
 800ee44:	460b      	mov	r3, r1
 800ee46:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800ee4a:	f7f1 fa11 	bl	8000270 <__adddf3>
 800ee4e:	4602      	mov	r2, r0
 800ee50:	460b      	mov	r3, r1
 800ee52:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      for (k = ix0; k <= kend; k++) {
 800ee56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee58:	3301      	adds	r3, #1
 800ee5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ee5c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ee5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee60:	429a      	cmp	r2, r3
 800ee62:	dd9d      	ble.n	800eda0 <xnrm2_7bm34mDQ+0x60>
        }
      }

      y = scale * sqrt(y);
 800ee64:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 800ee68:	f00b fbb6 	bl	801a5d8 <sqrt>
 800ee6c:	ec53 2b10 	vmov	r2, r3, d0
 800ee70:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800ee74:	f7f1 fbb2 	bl	80005dc <__aeabi_dmul>
 800ee78:	4602      	mov	r2, r0
 800ee7a:	460b      	mov	r3, r1
 800ee7c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    }
  }

  return y;
 800ee80:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800ee84:	ec43 2b17 	vmov	d7, r2, r3
}
 800ee88:	eeb0 0a47 	vmov.f32	s0, s14
 800ee8c:	eef0 0a67 	vmov.f32	s1, s15
 800ee90:	3748      	adds	r7, #72	; 0x48
 800ee92:	46bd      	mov	sp, r7
 800ee94:	bd80      	pop	{r7, pc}
 800ee96:	bf00      	nop
 800ee98:	3ff00000 	.word	0x3ff00000

0800ee9c <xnrm2_Mnmxg9YT>:
#include "rtwtypes.h"
#include "xnrm2_Mnmxg9YT.h"
#include <math.h>

real_T xnrm2_Mnmxg9YT(int32_T n, const real_T x[2], int32_T ix0)
{
 800ee9c:	b580      	push	{r7, lr}
 800ee9e:	b092      	sub	sp, #72	; 0x48
 800eea0:	af00      	add	r7, sp, #0
 800eea2:	60f8      	str	r0, [r7, #12]
 800eea4:	60b9      	str	r1, [r7, #8]
 800eea6:	607a      	str	r2, [r7, #4]
  real_T y;
  int32_T k;
  y = 0.0;
 800eea8:	f04f 0200 	mov.w	r2, #0
 800eeac:	f04f 0300 	mov.w	r3, #0
 800eeb0:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  if (n >= 1) {
 800eeb4:	68fb      	ldr	r3, [r7, #12]
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	f340 8090 	ble.w	800efdc <xnrm2_Mnmxg9YT+0x140>
    if (n == 1) {
 800eebc:	68fb      	ldr	r3, [r7, #12]
 800eebe:	2b01      	cmp	r3, #1
 800eec0:	d10e      	bne.n	800eee0 <xnrm2_Mnmxg9YT+0x44>
      y = fabs(x[ix0 - 1]);
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800eec8:	3b01      	subs	r3, #1
 800eeca:	00db      	lsls	r3, r3, #3
 800eecc:	68ba      	ldr	r2, [r7, #8]
 800eece:	4413      	add	r3, r2
 800eed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eed4:	4611      	mov	r1, r2
 800eed6:	6439      	str	r1, [r7, #64]	; 0x40
 800eed8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800eedc:	647b      	str	r3, [r7, #68]	; 0x44
 800eede:	e07d      	b.n	800efdc <xnrm2_Mnmxg9YT+0x140>
    } else {
      real_T scale;
      int32_T kend;
      scale = 3.3121686421112381E-170;
 800eee0:	f04f 0200 	mov.w	r2, #0
 800eee4:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 800eee8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      kend = (ix0 + n) - 1;
 800eeec:	687a      	ldr	r2, [r7, #4]
 800eeee:	68fb      	ldr	r3, [r7, #12]
 800eef0:	4413      	add	r3, r2
 800eef2:	3b01      	subs	r3, #1
 800eef4:	62fb      	str	r3, [r7, #44]	; 0x2c
      for (k = ix0; k <= kend; k++) {
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800eefa:	e05d      	b.n	800efb8 <xnrm2_Mnmxg9YT+0x11c>
        real_T absxk;
        absxk = fabs(x[k - 1]);
 800eefc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eefe:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800ef02:	3b01      	subs	r3, #1
 800ef04:	00db      	lsls	r3, r3, #3
 800ef06:	68ba      	ldr	r2, [r7, #8]
 800ef08:	4413      	add	r3, r2
 800ef0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef0e:	4611      	mov	r1, r2
 800ef10:	6239      	str	r1, [r7, #32]
 800ef12:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ef16:	627b      	str	r3, [r7, #36]	; 0x24
        if (absxk > scale) {
 800ef18:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800ef1c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800ef20:	f7f1 fdec 	bl	8000afc <__aeabi_dcmpgt>
 800ef24:	4603      	mov	r3, r0
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d029      	beq.n	800ef7e <xnrm2_Mnmxg9YT+0xe2>
          real_T t;
          t = scale / absxk;
 800ef2a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ef2e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800ef32:	f7f1 fc7d 	bl	8000830 <__aeabi_ddiv>
 800ef36:	4602      	mov	r2, r0
 800ef38:	460b      	mov	r3, r1
 800ef3a:	e9c7 2304 	strd	r2, r3, [r7, #16]
          y = y * t * t + 1.0;
 800ef3e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ef42:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800ef46:	f7f1 fb49 	bl	80005dc <__aeabi_dmul>
 800ef4a:	4602      	mov	r2, r0
 800ef4c:	460b      	mov	r3, r1
 800ef4e:	4610      	mov	r0, r2
 800ef50:	4619      	mov	r1, r3
 800ef52:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ef56:	f7f1 fb41 	bl	80005dc <__aeabi_dmul>
 800ef5a:	4602      	mov	r2, r0
 800ef5c:	460b      	mov	r3, r1
 800ef5e:	4610      	mov	r0, r2
 800ef60:	4619      	mov	r1, r3
 800ef62:	f04f 0200 	mov.w	r2, #0
 800ef66:	4b23      	ldr	r3, [pc, #140]	; (800eff4 <xnrm2_Mnmxg9YT+0x158>)
 800ef68:	f7f1 f982 	bl	8000270 <__adddf3>
 800ef6c:	4602      	mov	r2, r0
 800ef6e:	460b      	mov	r3, r1
 800ef70:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
          scale = absxk;
 800ef74:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ef78:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 800ef7c:	e019      	b.n	800efb2 <xnrm2_Mnmxg9YT+0x116>
        } else {
          real_T t;
          t = absxk / scale;
 800ef7e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800ef82:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800ef86:	f7f1 fc53 	bl	8000830 <__aeabi_ddiv>
 800ef8a:	4602      	mov	r2, r0
 800ef8c:	460b      	mov	r3, r1
 800ef8e:	e9c7 2306 	strd	r2, r3, [r7, #24]
          y += t * t;
 800ef92:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ef96:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800ef9a:	f7f1 fb1f 	bl	80005dc <__aeabi_dmul>
 800ef9e:	4602      	mov	r2, r0
 800efa0:	460b      	mov	r3, r1
 800efa2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800efa6:	f7f1 f963 	bl	8000270 <__adddf3>
 800efaa:	4602      	mov	r2, r0
 800efac:	460b      	mov	r3, r1
 800efae:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      for (k = ix0; k <= kend; k++) {
 800efb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800efb4:	3301      	adds	r3, #1
 800efb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800efb8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800efba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efbc:	429a      	cmp	r2, r3
 800efbe:	dd9d      	ble.n	800eefc <xnrm2_Mnmxg9YT+0x60>
        }
      }

      y = scale * sqrt(y);
 800efc0:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 800efc4:	f00b fb08 	bl	801a5d8 <sqrt>
 800efc8:	ec53 2b10 	vmov	r2, r3, d0
 800efcc:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800efd0:	f7f1 fb04 	bl	80005dc <__aeabi_dmul>
 800efd4:	4602      	mov	r2, r0
 800efd6:	460b      	mov	r3, r1
 800efd8:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    }
  }

  return y;
 800efdc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800efe0:	ec43 2b17 	vmov	d7, r2, r3
}
 800efe4:	eeb0 0a47 	vmov.f32	s0, s14
 800efe8:	eef0 0a67 	vmov.f32	s1, s15
 800efec:	3748      	adds	r7, #72	; 0x48
 800efee:	46bd      	mov	sp, r7
 800eff0:	bd80      	pop	{r7, pc}
 800eff2:	bf00      	nop
 800eff4:	3ff00000 	.word	0x3ff00000

0800eff8 <xnrm2_Rlk0oxWw>:
#include "rtwtypes.h"
#include "xnrm2_Rlk0oxWw.h"
#include <math.h>

real_T xnrm2_Rlk0oxWw(int32_T n, const real_T x[3], int32_T ix0)
{
 800eff8:	b580      	push	{r7, lr}
 800effa:	b092      	sub	sp, #72	; 0x48
 800effc:	af00      	add	r7, sp, #0
 800effe:	60f8      	str	r0, [r7, #12]
 800f000:	60b9      	str	r1, [r7, #8]
 800f002:	607a      	str	r2, [r7, #4]
  real_T y;
  int32_T k;
  y = 0.0;
 800f004:	f04f 0200 	mov.w	r2, #0
 800f008:	f04f 0300 	mov.w	r3, #0
 800f00c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  if (n >= 1) {
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	2b00      	cmp	r3, #0
 800f014:	f340 8090 	ble.w	800f138 <xnrm2_Rlk0oxWw+0x140>
    if (n == 1) {
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	2b01      	cmp	r3, #1
 800f01c:	d10e      	bne.n	800f03c <xnrm2_Rlk0oxWw+0x44>
      y = fabs(x[ix0 - 1]);
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800f024:	3b01      	subs	r3, #1
 800f026:	00db      	lsls	r3, r3, #3
 800f028:	68ba      	ldr	r2, [r7, #8]
 800f02a:	4413      	add	r3, r2
 800f02c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f030:	4611      	mov	r1, r2
 800f032:	6439      	str	r1, [r7, #64]	; 0x40
 800f034:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f038:	647b      	str	r3, [r7, #68]	; 0x44
 800f03a:	e07d      	b.n	800f138 <xnrm2_Rlk0oxWw+0x140>
    } else {
      real_T scale;
      int32_T kend;
      scale = 3.3121686421112381E-170;
 800f03c:	f04f 0200 	mov.w	r2, #0
 800f040:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 800f044:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      kend = (ix0 + n) - 1;
 800f048:	687a      	ldr	r2, [r7, #4]
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	4413      	add	r3, r2
 800f04e:	3b01      	subs	r3, #1
 800f050:	62fb      	str	r3, [r7, #44]	; 0x2c
      for (k = ix0; k <= kend; k++) {
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f056:	e05d      	b.n	800f114 <xnrm2_Rlk0oxWw+0x11c>
        real_T absxk;
        absxk = fabs(x[k - 1]);
 800f058:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f05a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800f05e:	3b01      	subs	r3, #1
 800f060:	00db      	lsls	r3, r3, #3
 800f062:	68ba      	ldr	r2, [r7, #8]
 800f064:	4413      	add	r3, r2
 800f066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f06a:	4611      	mov	r1, r2
 800f06c:	6239      	str	r1, [r7, #32]
 800f06e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f072:	627b      	str	r3, [r7, #36]	; 0x24
        if (absxk > scale) {
 800f074:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f078:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800f07c:	f7f1 fd3e 	bl	8000afc <__aeabi_dcmpgt>
 800f080:	4603      	mov	r3, r0
 800f082:	2b00      	cmp	r3, #0
 800f084:	d029      	beq.n	800f0da <xnrm2_Rlk0oxWw+0xe2>
          real_T t;
          t = scale / absxk;
 800f086:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800f08a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800f08e:	f7f1 fbcf 	bl	8000830 <__aeabi_ddiv>
 800f092:	4602      	mov	r2, r0
 800f094:	460b      	mov	r3, r1
 800f096:	e9c7 2304 	strd	r2, r3, [r7, #16]
          y = y * t * t + 1.0;
 800f09a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800f09e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800f0a2:	f7f1 fa9b 	bl	80005dc <__aeabi_dmul>
 800f0a6:	4602      	mov	r2, r0
 800f0a8:	460b      	mov	r3, r1
 800f0aa:	4610      	mov	r0, r2
 800f0ac:	4619      	mov	r1, r3
 800f0ae:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800f0b2:	f7f1 fa93 	bl	80005dc <__aeabi_dmul>
 800f0b6:	4602      	mov	r2, r0
 800f0b8:	460b      	mov	r3, r1
 800f0ba:	4610      	mov	r0, r2
 800f0bc:	4619      	mov	r1, r3
 800f0be:	f04f 0200 	mov.w	r2, #0
 800f0c2:	4b23      	ldr	r3, [pc, #140]	; (800f150 <xnrm2_Rlk0oxWw+0x158>)
 800f0c4:	f7f1 f8d4 	bl	8000270 <__adddf3>
 800f0c8:	4602      	mov	r2, r0
 800f0ca:	460b      	mov	r3, r1
 800f0cc:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
          scale = absxk;
 800f0d0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800f0d4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 800f0d8:	e019      	b.n	800f10e <xnrm2_Rlk0oxWw+0x116>
        } else {
          real_T t;
          t = absxk / scale;
 800f0da:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f0de:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800f0e2:	f7f1 fba5 	bl	8000830 <__aeabi_ddiv>
 800f0e6:	4602      	mov	r2, r0
 800f0e8:	460b      	mov	r3, r1
 800f0ea:	e9c7 2306 	strd	r2, r3, [r7, #24]
          y += t * t;
 800f0ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800f0f2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800f0f6:	f7f1 fa71 	bl	80005dc <__aeabi_dmul>
 800f0fa:	4602      	mov	r2, r0
 800f0fc:	460b      	mov	r3, r1
 800f0fe:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800f102:	f7f1 f8b5 	bl	8000270 <__adddf3>
 800f106:	4602      	mov	r2, r0
 800f108:	460b      	mov	r3, r1
 800f10a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      for (k = ix0; k <= kend; k++) {
 800f10e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f110:	3301      	adds	r3, #1
 800f112:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f114:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f118:	429a      	cmp	r2, r3
 800f11a:	dd9d      	ble.n	800f058 <xnrm2_Rlk0oxWw+0x60>
        }
      }

      y = scale * sqrt(y);
 800f11c:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 800f120:	f00b fa5a 	bl	801a5d8 <sqrt>
 800f124:	ec53 2b10 	vmov	r2, r3, d0
 800f128:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800f12c:	f7f1 fa56 	bl	80005dc <__aeabi_dmul>
 800f130:	4602      	mov	r2, r0
 800f132:	460b      	mov	r3, r1
 800f134:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    }
  }

  return y;
 800f138:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800f13c:	ec43 2b17 	vmov	d7, r2, r3
}
 800f140:	eeb0 0a47 	vmov.f32	s0, s14
 800f144:	eef0 0a67 	vmov.f32	s1, s15
 800f148:	3748      	adds	r7, #72	; 0x48
 800f14a:	46bd      	mov	sp, r7
 800f14c:	bd80      	pop	{r7, pc}
 800f14e:	bf00      	nop
 800f150:	3ff00000 	.word	0x3ff00000

0800f154 <xnrm2_nLdASVZH>:
#include "rtwtypes.h"
#include "xnrm2_nLdASVZH.h"
#include <math.h>

real_T xnrm2_nLdASVZH(int32_T n, const real_T x[18], int32_T ix0)
{
 800f154:	b580      	push	{r7, lr}
 800f156:	b092      	sub	sp, #72	; 0x48
 800f158:	af00      	add	r7, sp, #0
 800f15a:	60f8      	str	r0, [r7, #12]
 800f15c:	60b9      	str	r1, [r7, #8]
 800f15e:	607a      	str	r2, [r7, #4]
  real_T y;
  int32_T k;
  y = 0.0;
 800f160:	f04f 0200 	mov.w	r2, #0
 800f164:	f04f 0300 	mov.w	r3, #0
 800f168:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  if (n >= 1) {
 800f16c:	68fb      	ldr	r3, [r7, #12]
 800f16e:	2b00      	cmp	r3, #0
 800f170:	f340 8090 	ble.w	800f294 <xnrm2_nLdASVZH+0x140>
    if (n == 1) {
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	2b01      	cmp	r3, #1
 800f178:	d10e      	bne.n	800f198 <xnrm2_nLdASVZH+0x44>
      y = fabs(x[ix0 - 1]);
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800f180:	3b01      	subs	r3, #1
 800f182:	00db      	lsls	r3, r3, #3
 800f184:	68ba      	ldr	r2, [r7, #8]
 800f186:	4413      	add	r3, r2
 800f188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f18c:	4611      	mov	r1, r2
 800f18e:	6439      	str	r1, [r7, #64]	; 0x40
 800f190:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f194:	647b      	str	r3, [r7, #68]	; 0x44
 800f196:	e07d      	b.n	800f294 <xnrm2_nLdASVZH+0x140>
    } else {
      real_T scale;
      int32_T kend;
      scale = 3.3121686421112381E-170;
 800f198:	f04f 0200 	mov.w	r2, #0
 800f19c:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 800f1a0:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      kend = (ix0 + n) - 1;
 800f1a4:	687a      	ldr	r2, [r7, #4]
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	4413      	add	r3, r2
 800f1aa:	3b01      	subs	r3, #1
 800f1ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      for (k = ix0; k <= kend; k++) {
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f1b2:	e05d      	b.n	800f270 <xnrm2_nLdASVZH+0x11c>
        real_T absxk;
        absxk = fabs(x[k - 1]);
 800f1b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f1b6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800f1ba:	3b01      	subs	r3, #1
 800f1bc:	00db      	lsls	r3, r3, #3
 800f1be:	68ba      	ldr	r2, [r7, #8]
 800f1c0:	4413      	add	r3, r2
 800f1c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1c6:	4611      	mov	r1, r2
 800f1c8:	6239      	str	r1, [r7, #32]
 800f1ca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f1ce:	627b      	str	r3, [r7, #36]	; 0x24
        if (absxk > scale) {
 800f1d0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f1d4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800f1d8:	f7f1 fc90 	bl	8000afc <__aeabi_dcmpgt>
 800f1dc:	4603      	mov	r3, r0
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d029      	beq.n	800f236 <xnrm2_nLdASVZH+0xe2>
          real_T t;
          t = scale / absxk;
 800f1e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800f1e6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800f1ea:	f7f1 fb21 	bl	8000830 <__aeabi_ddiv>
 800f1ee:	4602      	mov	r2, r0
 800f1f0:	460b      	mov	r3, r1
 800f1f2:	e9c7 2304 	strd	r2, r3, [r7, #16]
          y = y * t * t + 1.0;
 800f1f6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800f1fa:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800f1fe:	f7f1 f9ed 	bl	80005dc <__aeabi_dmul>
 800f202:	4602      	mov	r2, r0
 800f204:	460b      	mov	r3, r1
 800f206:	4610      	mov	r0, r2
 800f208:	4619      	mov	r1, r3
 800f20a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800f20e:	f7f1 f9e5 	bl	80005dc <__aeabi_dmul>
 800f212:	4602      	mov	r2, r0
 800f214:	460b      	mov	r3, r1
 800f216:	4610      	mov	r0, r2
 800f218:	4619      	mov	r1, r3
 800f21a:	f04f 0200 	mov.w	r2, #0
 800f21e:	4b23      	ldr	r3, [pc, #140]	; (800f2ac <xnrm2_nLdASVZH+0x158>)
 800f220:	f7f1 f826 	bl	8000270 <__adddf3>
 800f224:	4602      	mov	r2, r0
 800f226:	460b      	mov	r3, r1
 800f228:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
          scale = absxk;
 800f22c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800f230:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 800f234:	e019      	b.n	800f26a <xnrm2_nLdASVZH+0x116>
        } else {
          real_T t;
          t = absxk / scale;
 800f236:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f23a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800f23e:	f7f1 faf7 	bl	8000830 <__aeabi_ddiv>
 800f242:	4602      	mov	r2, r0
 800f244:	460b      	mov	r3, r1
 800f246:	e9c7 2306 	strd	r2, r3, [r7, #24]
          y += t * t;
 800f24a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800f24e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800f252:	f7f1 f9c3 	bl	80005dc <__aeabi_dmul>
 800f256:	4602      	mov	r2, r0
 800f258:	460b      	mov	r3, r1
 800f25a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800f25e:	f7f1 f807 	bl	8000270 <__adddf3>
 800f262:	4602      	mov	r2, r0
 800f264:	460b      	mov	r3, r1
 800f266:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      for (k = ix0; k <= kend; k++) {
 800f26a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f26c:	3301      	adds	r3, #1
 800f26e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f270:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f274:	429a      	cmp	r2, r3
 800f276:	dd9d      	ble.n	800f1b4 <xnrm2_nLdASVZH+0x60>
        }
      }

      y = scale * sqrt(y);
 800f278:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 800f27c:	f00b f9ac 	bl	801a5d8 <sqrt>
 800f280:	ec53 2b10 	vmov	r2, r3, d0
 800f284:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800f288:	f7f1 f9a8 	bl	80005dc <__aeabi_dmul>
 800f28c:	4602      	mov	r2, r0
 800f28e:	460b      	mov	r3, r1
 800f290:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    }
  }

  return y;
 800f294:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800f298:	ec43 2b17 	vmov	d7, r2, r3
}
 800f29c:	eeb0 0a47 	vmov.f32	s0, s14
 800f2a0:	eef0 0a67 	vmov.f32	s1, s15
 800f2a4:	3748      	adds	r7, #72	; 0x48
 800f2a6:	46bd      	mov	sp, r7
 800f2a8:	bd80      	pop	{r7, pc}
 800f2aa:	bf00      	nop
 800f2ac:	3ff00000 	.word	0x3ff00000

0800f2b0 <xnrm2_xDOlDEtw>:
#include "rtwtypes.h"
#include "xnrm2_xDOlDEtw.h"
#include <math.h>

real_T xnrm2_xDOlDEtw(int32_T n, const real_T x[9], int32_T ix0)
{
 800f2b0:	b580      	push	{r7, lr}
 800f2b2:	b092      	sub	sp, #72	; 0x48
 800f2b4:	af00      	add	r7, sp, #0
 800f2b6:	60f8      	str	r0, [r7, #12]
 800f2b8:	60b9      	str	r1, [r7, #8]
 800f2ba:	607a      	str	r2, [r7, #4]
  real_T y;
  int32_T k;
  y = 0.0;
 800f2bc:	f04f 0200 	mov.w	r2, #0
 800f2c0:	f04f 0300 	mov.w	r3, #0
 800f2c4:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  if (n >= 1) {
 800f2c8:	68fb      	ldr	r3, [r7, #12]
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	f340 8090 	ble.w	800f3f0 <xnrm2_xDOlDEtw+0x140>
    if (n == 1) {
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	2b01      	cmp	r3, #1
 800f2d4:	d10e      	bne.n	800f2f4 <xnrm2_xDOlDEtw+0x44>
      y = fabs(x[ix0 - 1]);
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800f2dc:	3b01      	subs	r3, #1
 800f2de:	00db      	lsls	r3, r3, #3
 800f2e0:	68ba      	ldr	r2, [r7, #8]
 800f2e2:	4413      	add	r3, r2
 800f2e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2e8:	4611      	mov	r1, r2
 800f2ea:	6439      	str	r1, [r7, #64]	; 0x40
 800f2ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f2f0:	647b      	str	r3, [r7, #68]	; 0x44
 800f2f2:	e07d      	b.n	800f3f0 <xnrm2_xDOlDEtw+0x140>
    } else {
      real_T scale;
      int32_T kend;
      scale = 3.3121686421112381E-170;
 800f2f4:	f04f 0200 	mov.w	r2, #0
 800f2f8:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 800f2fc:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      kend = (ix0 + n) - 1;
 800f300:	687a      	ldr	r2, [r7, #4]
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	4413      	add	r3, r2
 800f306:	3b01      	subs	r3, #1
 800f308:	62fb      	str	r3, [r7, #44]	; 0x2c
      for (k = ix0; k <= kend; k++) {
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f30e:	e05d      	b.n	800f3cc <xnrm2_xDOlDEtw+0x11c>
        real_T absxk;
        absxk = fabs(x[k - 1]);
 800f310:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f312:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800f316:	3b01      	subs	r3, #1
 800f318:	00db      	lsls	r3, r3, #3
 800f31a:	68ba      	ldr	r2, [r7, #8]
 800f31c:	4413      	add	r3, r2
 800f31e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f322:	4611      	mov	r1, r2
 800f324:	6239      	str	r1, [r7, #32]
 800f326:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f32a:	627b      	str	r3, [r7, #36]	; 0x24
        if (absxk > scale) {
 800f32c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f330:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800f334:	f7f1 fbe2 	bl	8000afc <__aeabi_dcmpgt>
 800f338:	4603      	mov	r3, r0
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d029      	beq.n	800f392 <xnrm2_xDOlDEtw+0xe2>
          real_T t;
          t = scale / absxk;
 800f33e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800f342:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800f346:	f7f1 fa73 	bl	8000830 <__aeabi_ddiv>
 800f34a:	4602      	mov	r2, r0
 800f34c:	460b      	mov	r3, r1
 800f34e:	e9c7 2304 	strd	r2, r3, [r7, #16]
          y = y * t * t + 1.0;
 800f352:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800f356:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800f35a:	f7f1 f93f 	bl	80005dc <__aeabi_dmul>
 800f35e:	4602      	mov	r2, r0
 800f360:	460b      	mov	r3, r1
 800f362:	4610      	mov	r0, r2
 800f364:	4619      	mov	r1, r3
 800f366:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800f36a:	f7f1 f937 	bl	80005dc <__aeabi_dmul>
 800f36e:	4602      	mov	r2, r0
 800f370:	460b      	mov	r3, r1
 800f372:	4610      	mov	r0, r2
 800f374:	4619      	mov	r1, r3
 800f376:	f04f 0200 	mov.w	r2, #0
 800f37a:	4b23      	ldr	r3, [pc, #140]	; (800f408 <xnrm2_xDOlDEtw+0x158>)
 800f37c:	f7f0 ff78 	bl	8000270 <__adddf3>
 800f380:	4602      	mov	r2, r0
 800f382:	460b      	mov	r3, r1
 800f384:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
          scale = absxk;
 800f388:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800f38c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 800f390:	e019      	b.n	800f3c6 <xnrm2_xDOlDEtw+0x116>
        } else {
          real_T t;
          t = absxk / scale;
 800f392:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f396:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800f39a:	f7f1 fa49 	bl	8000830 <__aeabi_ddiv>
 800f39e:	4602      	mov	r2, r0
 800f3a0:	460b      	mov	r3, r1
 800f3a2:	e9c7 2306 	strd	r2, r3, [r7, #24]
          y += t * t;
 800f3a6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800f3aa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800f3ae:	f7f1 f915 	bl	80005dc <__aeabi_dmul>
 800f3b2:	4602      	mov	r2, r0
 800f3b4:	460b      	mov	r3, r1
 800f3b6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800f3ba:	f7f0 ff59 	bl	8000270 <__adddf3>
 800f3be:	4602      	mov	r2, r0
 800f3c0:	460b      	mov	r3, r1
 800f3c2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      for (k = ix0; k <= kend; k++) {
 800f3c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f3c8:	3301      	adds	r3, #1
 800f3ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f3cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f3ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3d0:	429a      	cmp	r2, r3
 800f3d2:	dd9d      	ble.n	800f310 <xnrm2_xDOlDEtw+0x60>
        }
      }

      y = scale * sqrt(y);
 800f3d4:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 800f3d8:	f00b f8fe 	bl	801a5d8 <sqrt>
 800f3dc:	ec53 2b10 	vmov	r2, r3, d0
 800f3e0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800f3e4:	f7f1 f8fa 	bl	80005dc <__aeabi_dmul>
 800f3e8:	4602      	mov	r2, r0
 800f3ea:	460b      	mov	r3, r1
 800f3ec:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    }
  }

  return y;
 800f3f0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800f3f4:	ec43 2b17 	vmov	d7, r2, r3
}
 800f3f8:	eeb0 0a47 	vmov.f32	s0, s14
 800f3fc:	eef0 0a67 	vmov.f32	s1, s15
 800f400:	3748      	adds	r7, #72	; 0x48
 800f402:	46bd      	mov	sp, r7
 800f404:	bd80      	pop	{r7, pc}
 800f406:	bf00      	nop
 800f408:	3ff00000 	.word	0x3ff00000

0800f40c <xrot_i7f01JoJ>:
#include "rtwtypes.h"
#include "xrot_i7f01JoJ.h"

void xrot_i7f01JoJ(real_T x[9], int32_T ix0, int32_T iy0, real_T c, real_T s)
{
 800f40c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800f410:	b08c      	sub	sp, #48	; 0x30
 800f412:	af00      	add	r7, sp, #0
 800f414:	61f8      	str	r0, [r7, #28]
 800f416:	61b9      	str	r1, [r7, #24]
 800f418:	617a      	str	r2, [r7, #20]
 800f41a:	ed87 0b02 	vstr	d0, [r7, #8]
 800f41e:	ed87 1b00 	vstr	d1, [r7]
  real_T temp;
  real_T temp_tmp;
  temp = x[iy0 - 1];
 800f422:	697b      	ldr	r3, [r7, #20]
 800f424:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800f428:	3b01      	subs	r3, #1
 800f42a:	00db      	lsls	r3, r3, #3
 800f42c:	69fa      	ldr	r2, [r7, #28]
 800f42e:	4413      	add	r3, r2
 800f430:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f434:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  temp_tmp = x[ix0 - 1];
 800f438:	69bb      	ldr	r3, [r7, #24]
 800f43a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800f43e:	3b01      	subs	r3, #1
 800f440:	00db      	lsls	r3, r3, #3
 800f442:	69fa      	ldr	r2, [r7, #28]
 800f444:	4413      	add	r3, r2
 800f446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f44a:	e9c7 2308 	strd	r2, r3, [r7, #32]
  x[iy0 - 1] = temp * c - temp_tmp * s;
 800f44e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800f452:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800f456:	f7f1 f8c1 	bl	80005dc <__aeabi_dmul>
 800f45a:	4602      	mov	r2, r0
 800f45c:	460b      	mov	r3, r1
 800f45e:	4690      	mov	r8, r2
 800f460:	4699      	mov	r9, r3
 800f462:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f466:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800f46a:	f7f1 f8b7 	bl	80005dc <__aeabi_dmul>
 800f46e:	4602      	mov	r2, r0
 800f470:	460b      	mov	r3, r1
 800f472:	4610      	mov	r0, r2
 800f474:	4619      	mov	r1, r3
 800f476:	697b      	ldr	r3, [r7, #20]
 800f478:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800f47c:	3b01      	subs	r3, #1
 800f47e:	00db      	lsls	r3, r3, #3
 800f480:	69fa      	ldr	r2, [r7, #28]
 800f482:	18d4      	adds	r4, r2, r3
 800f484:	4602      	mov	r2, r0
 800f486:	460b      	mov	r3, r1
 800f488:	4640      	mov	r0, r8
 800f48a:	4649      	mov	r1, r9
 800f48c:	f7f0 feee 	bl	800026c <__aeabi_dsub>
 800f490:	4602      	mov	r2, r0
 800f492:	460b      	mov	r3, r1
 800f494:	e9c4 2300 	strd	r2, r3, [r4]
  x[ix0 - 1] = temp_tmp * c + temp * s;
 800f498:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800f49c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800f4a0:	f7f1 f89c 	bl	80005dc <__aeabi_dmul>
 800f4a4:	4602      	mov	r2, r0
 800f4a6:	460b      	mov	r3, r1
 800f4a8:	4690      	mov	r8, r2
 800f4aa:	4699      	mov	r9, r3
 800f4ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f4b0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800f4b4:	f7f1 f892 	bl	80005dc <__aeabi_dmul>
 800f4b8:	4602      	mov	r2, r0
 800f4ba:	460b      	mov	r3, r1
 800f4bc:	4610      	mov	r0, r2
 800f4be:	4619      	mov	r1, r3
 800f4c0:	69bb      	ldr	r3, [r7, #24]
 800f4c2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800f4c6:	3b01      	subs	r3, #1
 800f4c8:	00db      	lsls	r3, r3, #3
 800f4ca:	69fa      	ldr	r2, [r7, #28]
 800f4cc:	18d4      	adds	r4, r2, r3
 800f4ce:	4602      	mov	r2, r0
 800f4d0:	460b      	mov	r3, r1
 800f4d2:	4640      	mov	r0, r8
 800f4d4:	4649      	mov	r1, r9
 800f4d6:	f7f0 fecb 	bl	8000270 <__adddf3>
 800f4da:	4602      	mov	r2, r0
 800f4dc:	460b      	mov	r3, r1
 800f4de:	e9c4 2300 	strd	r2, r3, [r4]
  temp = x[ix0] * c + x[iy0] * s;
 800f4e2:	69bb      	ldr	r3, [r7, #24]
 800f4e4:	00db      	lsls	r3, r3, #3
 800f4e6:	69fa      	ldr	r2, [r7, #28]
 800f4e8:	4413      	add	r3, r2
 800f4ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f4ee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800f4f2:	f7f1 f873 	bl	80005dc <__aeabi_dmul>
 800f4f6:	4602      	mov	r2, r0
 800f4f8:	460b      	mov	r3, r1
 800f4fa:	4614      	mov	r4, r2
 800f4fc:	461d      	mov	r5, r3
 800f4fe:	697b      	ldr	r3, [r7, #20]
 800f500:	00db      	lsls	r3, r3, #3
 800f502:	69fa      	ldr	r2, [r7, #28]
 800f504:	4413      	add	r3, r2
 800f506:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f50a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f50e:	f7f1 f865 	bl	80005dc <__aeabi_dmul>
 800f512:	4602      	mov	r2, r0
 800f514:	460b      	mov	r3, r1
 800f516:	4620      	mov	r0, r4
 800f518:	4629      	mov	r1, r5
 800f51a:	f7f0 fea9 	bl	8000270 <__adddf3>
 800f51e:	4602      	mov	r2, r0
 800f520:	460b      	mov	r3, r1
 800f522:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  x[iy0] = x[iy0] * c - x[ix0] * s;
 800f526:	697b      	ldr	r3, [r7, #20]
 800f528:	00db      	lsls	r3, r3, #3
 800f52a:	69fa      	ldr	r2, [r7, #28]
 800f52c:	4413      	add	r3, r2
 800f52e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f532:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800f536:	f7f1 f851 	bl	80005dc <__aeabi_dmul>
 800f53a:	4602      	mov	r2, r0
 800f53c:	460b      	mov	r3, r1
 800f53e:	4690      	mov	r8, r2
 800f540:	4699      	mov	r9, r3
 800f542:	69bb      	ldr	r3, [r7, #24]
 800f544:	00db      	lsls	r3, r3, #3
 800f546:	69fa      	ldr	r2, [r7, #28]
 800f548:	4413      	add	r3, r2
 800f54a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f54e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f552:	f7f1 f843 	bl	80005dc <__aeabi_dmul>
 800f556:	4602      	mov	r2, r0
 800f558:	460b      	mov	r3, r1
 800f55a:	4610      	mov	r0, r2
 800f55c:	4619      	mov	r1, r3
 800f55e:	697b      	ldr	r3, [r7, #20]
 800f560:	00db      	lsls	r3, r3, #3
 800f562:	69fa      	ldr	r2, [r7, #28]
 800f564:	18d4      	adds	r4, r2, r3
 800f566:	4602      	mov	r2, r0
 800f568:	460b      	mov	r3, r1
 800f56a:	4640      	mov	r0, r8
 800f56c:	4649      	mov	r1, r9
 800f56e:	f7f0 fe7d 	bl	800026c <__aeabi_dsub>
 800f572:	4602      	mov	r2, r0
 800f574:	460b      	mov	r3, r1
 800f576:	e9c4 2300 	strd	r2, r3, [r4]
  x[ix0] = temp;
 800f57a:	69bb      	ldr	r3, [r7, #24]
 800f57c:	00db      	lsls	r3, r3, #3
 800f57e:	69fa      	ldr	r2, [r7, #28]
 800f580:	18d1      	adds	r1, r2, r3
 800f582:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800f586:	e9c1 2300 	strd	r2, r3, [r1]
  temp = x[iy0 + 1];
 800f58a:	697b      	ldr	r3, [r7, #20]
 800f58c:	3301      	adds	r3, #1
 800f58e:	00db      	lsls	r3, r3, #3
 800f590:	69fa      	ldr	r2, [r7, #28]
 800f592:	4413      	add	r3, r2
 800f594:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f598:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  temp_tmp = x[ix0 + 1];
 800f59c:	69bb      	ldr	r3, [r7, #24]
 800f59e:	3301      	adds	r3, #1
 800f5a0:	00db      	lsls	r3, r3, #3
 800f5a2:	69fa      	ldr	r2, [r7, #28]
 800f5a4:	4413      	add	r3, r2
 800f5a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5aa:	e9c7 2308 	strd	r2, r3, [r7, #32]
  x[iy0 + 1] = temp * c - temp_tmp * s;
 800f5ae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800f5b2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800f5b6:	f7f1 f811 	bl	80005dc <__aeabi_dmul>
 800f5ba:	4602      	mov	r2, r0
 800f5bc:	460b      	mov	r3, r1
 800f5be:	4690      	mov	r8, r2
 800f5c0:	4699      	mov	r9, r3
 800f5c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f5c6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800f5ca:	f7f1 f807 	bl	80005dc <__aeabi_dmul>
 800f5ce:	4602      	mov	r2, r0
 800f5d0:	460b      	mov	r3, r1
 800f5d2:	4610      	mov	r0, r2
 800f5d4:	4619      	mov	r1, r3
 800f5d6:	697b      	ldr	r3, [r7, #20]
 800f5d8:	3301      	adds	r3, #1
 800f5da:	00db      	lsls	r3, r3, #3
 800f5dc:	69fa      	ldr	r2, [r7, #28]
 800f5de:	18d4      	adds	r4, r2, r3
 800f5e0:	4602      	mov	r2, r0
 800f5e2:	460b      	mov	r3, r1
 800f5e4:	4640      	mov	r0, r8
 800f5e6:	4649      	mov	r1, r9
 800f5e8:	f7f0 fe40 	bl	800026c <__aeabi_dsub>
 800f5ec:	4602      	mov	r2, r0
 800f5ee:	460b      	mov	r3, r1
 800f5f0:	e9c4 2300 	strd	r2, r3, [r4]
  x[ix0 + 1] = temp_tmp * c + temp * s;
 800f5f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800f5f8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800f5fc:	f7f0 ffee 	bl	80005dc <__aeabi_dmul>
 800f600:	4602      	mov	r2, r0
 800f602:	460b      	mov	r3, r1
 800f604:	4690      	mov	r8, r2
 800f606:	4699      	mov	r9, r3
 800f608:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f60c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800f610:	f7f0 ffe4 	bl	80005dc <__aeabi_dmul>
 800f614:	4602      	mov	r2, r0
 800f616:	460b      	mov	r3, r1
 800f618:	4610      	mov	r0, r2
 800f61a:	4619      	mov	r1, r3
 800f61c:	69bb      	ldr	r3, [r7, #24]
 800f61e:	3301      	adds	r3, #1
 800f620:	00db      	lsls	r3, r3, #3
 800f622:	69fa      	ldr	r2, [r7, #28]
 800f624:	18d4      	adds	r4, r2, r3
 800f626:	4602      	mov	r2, r0
 800f628:	460b      	mov	r3, r1
 800f62a:	4640      	mov	r0, r8
 800f62c:	4649      	mov	r1, r9
 800f62e:	f7f0 fe1f 	bl	8000270 <__adddf3>
 800f632:	4602      	mov	r2, r0
 800f634:	460b      	mov	r3, r1
 800f636:	e9c4 2300 	strd	r2, r3, [r4]
}
 800f63a:	bf00      	nop
 800f63c:	3730      	adds	r7, #48	; 0x30
 800f63e:	46bd      	mov	sp, r7
 800f640:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800f644 <xrotg_XzIjz1eG>:
#include "rtwtypes.h"
#include "xrotg_XzIjz1eG.h"
#include <math.h>

void xrotg_XzIjz1eG(real_T *a, real_T *b, real_T *c, real_T *s)
{
 800f644:	b5b0      	push	{r4, r5, r7, lr}
 800f646:	b090      	sub	sp, #64	; 0x40
 800f648:	af00      	add	r7, sp, #0
 800f64a:	60f8      	str	r0, [r7, #12]
 800f64c:	60b9      	str	r1, [r7, #8]
 800f64e:	607a      	str	r2, [r7, #4]
 800f650:	603b      	str	r3, [r7, #0]
  real_T absa;
  real_T absb;
  real_T roe;
  real_T scale;
  roe = *b;
 800f652:	68bb      	ldr	r3, [r7, #8]
 800f654:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f658:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  absa = fabs(*a);
 800f65c:	68fb      	ldr	r3, [r7, #12]
 800f65e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f662:	4611      	mov	r1, r2
 800f664:	62b9      	str	r1, [r7, #40]	; 0x28
 800f666:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f66a:	62fb      	str	r3, [r7, #44]	; 0x2c
  absb = fabs(*b);
 800f66c:	68bb      	ldr	r3, [r7, #8]
 800f66e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f672:	4611      	mov	r1, r2
 800f674:	6239      	str	r1, [r7, #32]
 800f676:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f67a:	627b      	str	r3, [r7, #36]	; 0x24
  if (absa > absb) {
 800f67c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800f680:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800f684:	f7f1 fa3a 	bl	8000afc <__aeabi_dcmpgt>
 800f688:	4603      	mov	r3, r0
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d004      	beq.n	800f698 <xrotg_XzIjz1eG+0x54>
    roe = *a;
 800f68e:	68fb      	ldr	r3, [r7, #12]
 800f690:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f694:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  }

  scale = absa + absb;
 800f698:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800f69c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800f6a0:	f7f0 fde6 	bl	8000270 <__adddf3>
 800f6a4:	4602      	mov	r2, r0
 800f6a6:	460b      	mov	r3, r1
 800f6a8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  if (scale == 0.0) {
 800f6ac:	f04f 0200 	mov.w	r2, #0
 800f6b0:	f04f 0300 	mov.w	r3, #0
 800f6b4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800f6b8:	f7f1 f9f8 	bl	8000aac <__aeabi_dcmpeq>
 800f6bc:	4603      	mov	r3, r0
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d01b      	beq.n	800f6fa <xrotg_XzIjz1eG+0xb6>
    *s = 0.0;
 800f6c2:	6839      	ldr	r1, [r7, #0]
 800f6c4:	f04f 0200 	mov.w	r2, #0
 800f6c8:	f04f 0300 	mov.w	r3, #0
 800f6cc:	e9c1 2300 	strd	r2, r3, [r1]
    *c = 1.0;
 800f6d0:	6879      	ldr	r1, [r7, #4]
 800f6d2:	f04f 0200 	mov.w	r2, #0
 800f6d6:	4b59      	ldr	r3, [pc, #356]	; (800f83c <xrotg_XzIjz1eG+0x1f8>)
 800f6d8:	e9c1 2300 	strd	r2, r3, [r1]
    *a = 0.0;
 800f6dc:	68f9      	ldr	r1, [r7, #12]
 800f6de:	f04f 0200 	mov.w	r2, #0
 800f6e2:	f04f 0300 	mov.w	r3, #0
 800f6e6:	e9c1 2300 	strd	r2, r3, [r1]
    *b = 0.0;
 800f6ea:	68b9      	ldr	r1, [r7, #8]
 800f6ec:	f04f 0200 	mov.w	r2, #0
 800f6f0:	f04f 0300 	mov.w	r3, #0
 800f6f4:	e9c1 2300 	strd	r2, r3, [r1]
      *b = 1.0;
    }

    *a = scale;
  }
}
 800f6f8:	e09b      	b.n	800f832 <xrotg_XzIjz1eG+0x1ee>
    ads = absa / scale;
 800f6fa:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f6fe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800f702:	f7f1 f895 	bl	8000830 <__aeabi_ddiv>
 800f706:	4602      	mov	r2, r0
 800f708:	460b      	mov	r3, r1
 800f70a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    bds = absb / scale;
 800f70e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f712:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800f716:	f7f1 f88b 	bl	8000830 <__aeabi_ddiv>
 800f71a:	4602      	mov	r2, r0
 800f71c:	460b      	mov	r3, r1
 800f71e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    scale *= sqrt(ads * ads + bds * bds);
 800f722:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800f726:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800f72a:	f7f0 ff57 	bl	80005dc <__aeabi_dmul>
 800f72e:	4602      	mov	r2, r0
 800f730:	460b      	mov	r3, r1
 800f732:	4614      	mov	r4, r2
 800f734:	461d      	mov	r5, r3
 800f736:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800f73a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800f73e:	f7f0 ff4d 	bl	80005dc <__aeabi_dmul>
 800f742:	4602      	mov	r2, r0
 800f744:	460b      	mov	r3, r1
 800f746:	4620      	mov	r0, r4
 800f748:	4629      	mov	r1, r5
 800f74a:	f7f0 fd91 	bl	8000270 <__adddf3>
 800f74e:	4602      	mov	r2, r0
 800f750:	460b      	mov	r3, r1
 800f752:	ec43 2b17 	vmov	d7, r2, r3
 800f756:	eeb0 0a47 	vmov.f32	s0, s14
 800f75a:	eef0 0a67 	vmov.f32	s1, s15
 800f75e:	f00a ff3b 	bl	801a5d8 <sqrt>
 800f762:	ec53 2b10 	vmov	r2, r3, d0
 800f766:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800f76a:	f7f0 ff37 	bl	80005dc <__aeabi_dmul>
 800f76e:	4602      	mov	r2, r0
 800f770:	460b      	mov	r3, r1
 800f772:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    if (roe < 0.0) {
 800f776:	f04f 0200 	mov.w	r2, #0
 800f77a:	f04f 0300 	mov.w	r3, #0
 800f77e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800f782:	f7f1 f99d 	bl	8000ac0 <__aeabi_dcmplt>
 800f786:	4603      	mov	r3, r0
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d005      	beq.n	800f798 <xrotg_XzIjz1eG+0x154>
      scale = -scale;
 800f78c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f78e:	633b      	str	r3, [r7, #48]	; 0x30
 800f790:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f792:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800f796:	637b      	str	r3, [r7, #52]	; 0x34
    *c = *a / scale;
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f79e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f7a2:	f7f1 f845 	bl	8000830 <__aeabi_ddiv>
 800f7a6:	4602      	mov	r2, r0
 800f7a8:	460b      	mov	r3, r1
 800f7aa:	6879      	ldr	r1, [r7, #4]
 800f7ac:	e9c1 2300 	strd	r2, r3, [r1]
    *s = *b / scale;
 800f7b0:	68bb      	ldr	r3, [r7, #8]
 800f7b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f7b6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f7ba:	f7f1 f839 	bl	8000830 <__aeabi_ddiv>
 800f7be:	4602      	mov	r2, r0
 800f7c0:	460b      	mov	r3, r1
 800f7c2:	6839      	ldr	r1, [r7, #0]
 800f7c4:	e9c1 2300 	strd	r2, r3, [r1]
    if (absa > absb) {
 800f7c8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800f7cc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800f7d0:	f7f1 f994 	bl	8000afc <__aeabi_dcmpgt>
 800f7d4:	4603      	mov	r3, r0
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d006      	beq.n	800f7e8 <xrotg_XzIjz1eG+0x1a4>
      *b = *s;
 800f7da:	683b      	ldr	r3, [r7, #0]
 800f7dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7e0:	68b9      	ldr	r1, [r7, #8]
 800f7e2:	e9c1 2300 	strd	r2, r3, [r1]
 800f7e6:	e01f      	b.n	800f828 <xrotg_XzIjz1eG+0x1e4>
    } else if (*c != 0.0) {
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f7ee:	f04f 0200 	mov.w	r2, #0
 800f7f2:	f04f 0300 	mov.w	r3, #0
 800f7f6:	f7f1 f959 	bl	8000aac <__aeabi_dcmpeq>
 800f7fa:	4603      	mov	r3, r0
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d10d      	bne.n	800f81c <xrotg_XzIjz1eG+0x1d8>
      *b = 1.0 / *c;
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f806:	f04f 0000 	mov.w	r0, #0
 800f80a:	490c      	ldr	r1, [pc, #48]	; (800f83c <xrotg_XzIjz1eG+0x1f8>)
 800f80c:	f7f1 f810 	bl	8000830 <__aeabi_ddiv>
 800f810:	4602      	mov	r2, r0
 800f812:	460b      	mov	r3, r1
 800f814:	68b9      	ldr	r1, [r7, #8]
 800f816:	e9c1 2300 	strd	r2, r3, [r1]
 800f81a:	e005      	b.n	800f828 <xrotg_XzIjz1eG+0x1e4>
      *b = 1.0;
 800f81c:	68b9      	ldr	r1, [r7, #8]
 800f81e:	f04f 0200 	mov.w	r2, #0
 800f822:	4b06      	ldr	r3, [pc, #24]	; (800f83c <xrotg_XzIjz1eG+0x1f8>)
 800f824:	e9c1 2300 	strd	r2, r3, [r1]
    *a = scale;
 800f828:	68f9      	ldr	r1, [r7, #12]
 800f82a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f82e:	e9c1 2300 	strd	r2, r3, [r1]
}
 800f832:	bf00      	nop
 800f834:	3740      	adds	r7, #64	; 0x40
 800f836:	46bd      	mov	sp, r7
 800f838:	bdb0      	pop	{r4, r5, r7, pc}
 800f83a:	bf00      	nop
 800f83c:	3ff00000 	.word	0x3ff00000

0800f840 <xscal_59GtRAwv>:
#include "rtwtypes.h"
#include "xscal_59GtRAwv.h"

void xscal_59GtRAwv(int32_T n, real_T a, real_T x[9], int32_T ix0)
{
 800f840:	b590      	push	{r4, r7, lr}
 800f842:	b089      	sub	sp, #36	; 0x24
 800f844:	af00      	add	r7, sp, #0
 800f846:	6178      	str	r0, [r7, #20]
 800f848:	ed87 0b02 	vstr	d0, [r7, #8]
 800f84c:	6139      	str	r1, [r7, #16]
 800f84e:	607a      	str	r2, [r7, #4]
  int32_T b;
  int32_T k;
  b = (ix0 + n) - 1;
 800f850:	687a      	ldr	r2, [r7, #4]
 800f852:	697b      	ldr	r3, [r7, #20]
 800f854:	4413      	add	r3, r2
 800f856:	3b01      	subs	r3, #1
 800f858:	61bb      	str	r3, [r7, #24]
  for (k = ix0; k <= b; k++) {
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	61fb      	str	r3, [r7, #28]
 800f85e:	e01a      	b.n	800f896 <xscal_59GtRAwv+0x56>
    x[k - 1] *= a;
 800f860:	69fb      	ldr	r3, [r7, #28]
 800f862:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800f866:	3b01      	subs	r3, #1
 800f868:	00db      	lsls	r3, r3, #3
 800f86a:	693a      	ldr	r2, [r7, #16]
 800f86c:	4413      	add	r3, r2
 800f86e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f872:	69fb      	ldr	r3, [r7, #28]
 800f874:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800f878:	3b01      	subs	r3, #1
 800f87a:	00db      	lsls	r3, r3, #3
 800f87c:	693a      	ldr	r2, [r7, #16]
 800f87e:	18d4      	adds	r4, r2, r3
 800f880:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800f884:	f7f0 feaa 	bl	80005dc <__aeabi_dmul>
 800f888:	4602      	mov	r2, r0
 800f88a:	460b      	mov	r3, r1
 800f88c:	e9c4 2300 	strd	r2, r3, [r4]
  for (k = ix0; k <= b; k++) {
 800f890:	69fb      	ldr	r3, [r7, #28]
 800f892:	3301      	adds	r3, #1
 800f894:	61fb      	str	r3, [r7, #28]
 800f896:	69fa      	ldr	r2, [r7, #28]
 800f898:	69bb      	ldr	r3, [r7, #24]
 800f89a:	429a      	cmp	r2, r3
 800f89c:	dde0      	ble.n	800f860 <xscal_59GtRAwv+0x20>
  }
}
 800f89e:	bf00      	nop
 800f8a0:	bf00      	nop
 800f8a2:	3724      	adds	r7, #36	; 0x24
 800f8a4:	46bd      	mov	sp, r7
 800f8a6:	bd90      	pop	{r4, r7, pc}

0800f8a8 <xscal_PLmmUlD2>:
#include "rtwtypes.h"
#include "xscal_PLmmUlD2.h"

void xscal_PLmmUlD2(int32_T n, real_T a, real_T x[3], int32_T ix0)
{
 800f8a8:	b590      	push	{r4, r7, lr}
 800f8aa:	b089      	sub	sp, #36	; 0x24
 800f8ac:	af00      	add	r7, sp, #0
 800f8ae:	6178      	str	r0, [r7, #20]
 800f8b0:	ed87 0b02 	vstr	d0, [r7, #8]
 800f8b4:	6139      	str	r1, [r7, #16]
 800f8b6:	607a      	str	r2, [r7, #4]
  int32_T b;
  int32_T k;
  b = (ix0 + n) - 1;
 800f8b8:	687a      	ldr	r2, [r7, #4]
 800f8ba:	697b      	ldr	r3, [r7, #20]
 800f8bc:	4413      	add	r3, r2
 800f8be:	3b01      	subs	r3, #1
 800f8c0:	61bb      	str	r3, [r7, #24]
  for (k = ix0; k <= b; k++) {
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	61fb      	str	r3, [r7, #28]
 800f8c6:	e01a      	b.n	800f8fe <xscal_PLmmUlD2+0x56>
    x[k - 1] *= a;
 800f8c8:	69fb      	ldr	r3, [r7, #28]
 800f8ca:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800f8ce:	3b01      	subs	r3, #1
 800f8d0:	00db      	lsls	r3, r3, #3
 800f8d2:	693a      	ldr	r2, [r7, #16]
 800f8d4:	4413      	add	r3, r2
 800f8d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f8da:	69fb      	ldr	r3, [r7, #28]
 800f8dc:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800f8e0:	3b01      	subs	r3, #1
 800f8e2:	00db      	lsls	r3, r3, #3
 800f8e4:	693a      	ldr	r2, [r7, #16]
 800f8e6:	18d4      	adds	r4, r2, r3
 800f8e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800f8ec:	f7f0 fe76 	bl	80005dc <__aeabi_dmul>
 800f8f0:	4602      	mov	r2, r0
 800f8f2:	460b      	mov	r3, r1
 800f8f4:	e9c4 2300 	strd	r2, r3, [r4]
  for (k = ix0; k <= b; k++) {
 800f8f8:	69fb      	ldr	r3, [r7, #28]
 800f8fa:	3301      	adds	r3, #1
 800f8fc:	61fb      	str	r3, [r7, #28]
 800f8fe:	69fa      	ldr	r2, [r7, #28]
 800f900:	69bb      	ldr	r3, [r7, #24]
 800f902:	429a      	cmp	r2, r3
 800f904:	dde0      	ble.n	800f8c8 <xscal_PLmmUlD2+0x20>
  }
}
 800f906:	bf00      	nop
 800f908:	bf00      	nop
 800f90a:	3724      	adds	r7, #36	; 0x24
 800f90c:	46bd      	mov	sp, r7
 800f90e:	bd90      	pop	{r4, r7, pc}

0800f910 <xscal_eaAxXsvQ>:
#include "rtwtypes.h"
#include "xscal_eaAxXsvQ.h"

void xscal_eaAxXsvQ(real_T a, real_T x[9], int32_T ix0)
{
 800f910:	b590      	push	{r4, r7, lr}
 800f912:	b087      	sub	sp, #28
 800f914:	af00      	add	r7, sp, #0
 800f916:	ed87 0b02 	vstr	d0, [r7, #8]
 800f91a:	6078      	str	r0, [r7, #4]
 800f91c:	6039      	str	r1, [r7, #0]
  int32_T k;
  for (k = ix0; k <= ix0 + 2; k++) {
 800f91e:	683b      	ldr	r3, [r7, #0]
 800f920:	617b      	str	r3, [r7, #20]
 800f922:	e01a      	b.n	800f95a <xscal_eaAxXsvQ+0x4a>
    x[k - 1] *= a;
 800f924:	697b      	ldr	r3, [r7, #20]
 800f926:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800f92a:	3b01      	subs	r3, #1
 800f92c:	00db      	lsls	r3, r3, #3
 800f92e:	687a      	ldr	r2, [r7, #4]
 800f930:	4413      	add	r3, r2
 800f932:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f936:	697b      	ldr	r3, [r7, #20]
 800f938:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800f93c:	3b01      	subs	r3, #1
 800f93e:	00db      	lsls	r3, r3, #3
 800f940:	687a      	ldr	r2, [r7, #4]
 800f942:	18d4      	adds	r4, r2, r3
 800f944:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800f948:	f7f0 fe48 	bl	80005dc <__aeabi_dmul>
 800f94c:	4602      	mov	r2, r0
 800f94e:	460b      	mov	r3, r1
 800f950:	e9c4 2300 	strd	r2, r3, [r4]
  for (k = ix0; k <= ix0 + 2; k++) {
 800f954:	697b      	ldr	r3, [r7, #20]
 800f956:	3301      	adds	r3, #1
 800f958:	617b      	str	r3, [r7, #20]
 800f95a:	683b      	ldr	r3, [r7, #0]
 800f95c:	3302      	adds	r3, #2
 800f95e:	697a      	ldr	r2, [r7, #20]
 800f960:	429a      	cmp	r2, r3
 800f962:	dddf      	ble.n	800f924 <xscal_eaAxXsvQ+0x14>
  }
}
 800f964:	bf00      	nop
 800f966:	bf00      	nop
 800f968:	371c      	adds	r7, #28
 800f96a:	46bd      	mov	sp, r7
 800f96c:	bd90      	pop	{r4, r7, pc}

0800f96e <xswap_JoAqPjUv>:
#include "rtwtypes.h"
#include "xswap_JoAqPjUv.h"

void xswap_JoAqPjUv(real_T x[9], int32_T ix0, int32_T iy0)
{
 800f96e:	b480      	push	{r7}
 800f970:	b087      	sub	sp, #28
 800f972:	af00      	add	r7, sp, #0
 800f974:	60f8      	str	r0, [r7, #12]
 800f976:	60b9      	str	r1, [r7, #8]
 800f978:	607a      	str	r2, [r7, #4]
  real_T temp;
  temp = x[ix0 - 1];
 800f97a:	68bb      	ldr	r3, [r7, #8]
 800f97c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800f980:	3b01      	subs	r3, #1
 800f982:	00db      	lsls	r3, r3, #3
 800f984:	68fa      	ldr	r2, [r7, #12]
 800f986:	4413      	add	r3, r2
 800f988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f98c:	e9c7 2304 	strd	r2, r3, [r7, #16]
  x[ix0 - 1] = x[iy0 - 1];
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800f996:	3b01      	subs	r3, #1
 800f998:	00db      	lsls	r3, r3, #3
 800f99a:	68fa      	ldr	r2, [r7, #12]
 800f99c:	441a      	add	r2, r3
 800f99e:	68bb      	ldr	r3, [r7, #8]
 800f9a0:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800f9a4:	3b01      	subs	r3, #1
 800f9a6:	00db      	lsls	r3, r3, #3
 800f9a8:	68f9      	ldr	r1, [r7, #12]
 800f9aa:	4419      	add	r1, r3
 800f9ac:	e9d2 2300 	ldrd	r2, r3, [r2]
 800f9b0:	e9c1 2300 	strd	r2, r3, [r1]
  x[iy0 - 1] = temp;
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800f9ba:	3b01      	subs	r3, #1
 800f9bc:	00db      	lsls	r3, r3, #3
 800f9be:	68fa      	ldr	r2, [r7, #12]
 800f9c0:	18d1      	adds	r1, r2, r3
 800f9c2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800f9c6:	e9c1 2300 	strd	r2, r3, [r1]
  temp = x[ix0];
 800f9ca:	68bb      	ldr	r3, [r7, #8]
 800f9cc:	00db      	lsls	r3, r3, #3
 800f9ce:	68fa      	ldr	r2, [r7, #12]
 800f9d0:	4413      	add	r3, r2
 800f9d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9d6:	e9c7 2304 	strd	r2, r3, [r7, #16]
  x[ix0] = x[iy0];
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	00db      	lsls	r3, r3, #3
 800f9de:	68fa      	ldr	r2, [r7, #12]
 800f9e0:	4413      	add	r3, r2
 800f9e2:	68ba      	ldr	r2, [r7, #8]
 800f9e4:	00d2      	lsls	r2, r2, #3
 800f9e6:	68f9      	ldr	r1, [r7, #12]
 800f9e8:	4411      	add	r1, r2
 800f9ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9ee:	e9c1 2300 	strd	r2, r3, [r1]
  x[iy0] = temp;
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	00db      	lsls	r3, r3, #3
 800f9f6:	68fa      	ldr	r2, [r7, #12]
 800f9f8:	18d1      	adds	r1, r2, r3
 800f9fa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800f9fe:	e9c1 2300 	strd	r2, r3, [r1]
  temp = x[ix0 + 1];
 800fa02:	68bb      	ldr	r3, [r7, #8]
 800fa04:	3301      	adds	r3, #1
 800fa06:	00db      	lsls	r3, r3, #3
 800fa08:	68fa      	ldr	r2, [r7, #12]
 800fa0a:	4413      	add	r3, r2
 800fa0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa10:	e9c7 2304 	strd	r2, r3, [r7, #16]
  x[ix0 + 1] = x[iy0 + 1];
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	3301      	adds	r3, #1
 800fa18:	00db      	lsls	r3, r3, #3
 800fa1a:	68fa      	ldr	r2, [r7, #12]
 800fa1c:	4413      	add	r3, r2
 800fa1e:	68ba      	ldr	r2, [r7, #8]
 800fa20:	3201      	adds	r2, #1
 800fa22:	00d2      	lsls	r2, r2, #3
 800fa24:	68f9      	ldr	r1, [r7, #12]
 800fa26:	4411      	add	r1, r2
 800fa28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa2c:	e9c1 2300 	strd	r2, r3, [r1]
  x[iy0 + 1] = temp;
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	3301      	adds	r3, #1
 800fa34:	00db      	lsls	r3, r3, #3
 800fa36:	68fa      	ldr	r2, [r7, #12]
 800fa38:	18d1      	adds	r1, r2, r3
 800fa3a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800fa3e:	e9c1 2300 	strd	r2, r3, [r1]
}
 800fa42:	bf00      	nop
 800fa44:	371c      	adds	r7, #28
 800fa46:	46bd      	mov	sp, r7
 800fa48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa4c:	4770      	bx	lr
	...

0800fa50 <after>:
#include "smile_callbacks.h"
#include "smile_data.h"
#include "smile.h"


uint8_t after(uint32_t* timer, float boundary) {
 800fa50:	b480      	push	{r7}
 800fa52:	b083      	sub	sp, #12
 800fa54:	af00      	add	r7, sp, #0
 800fa56:	6078      	str	r0, [r7, #4]
 800fa58:	ed87 0a00 	vstr	s0, [r7]
   return !(timer[0]*ams_parameters.Ts_f32 < boundary);
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	681b      	ldr	r3, [r3, #0]
 800fa60:	ee07 3a90 	vmov	s15, r3
 800fa64:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800fa68:	4b0c      	ldr	r3, [pc, #48]	; (800fa9c <after+0x4c>)
 800fa6a:	edd3 7a01 	vldr	s15, [r3, #4]
 800fa6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fa72:	ed97 7a00 	vldr	s14, [r7]
 800fa76:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800fa7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa7e:	bfcc      	ite	gt
 800fa80:	2301      	movgt	r3, #1
 800fa82:	2300      	movle	r3, #0
 800fa84:	b2db      	uxtb	r3, r3
 800fa86:	f083 0301 	eor.w	r3, r3, #1
 800fa8a:	b2db      	uxtb	r3, r3
 800fa8c:	b2db      	uxtb	r3, r3
}
 800fa8e:	4618      	mov	r0, r3
 800fa90:	370c      	adds	r7, #12
 800fa92:	46bd      	mov	sp, r7
 800fa94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa98:	4770      	bx	lr
 800fa9a:	bf00      	nop
 800fa9c:	2001b6e4 	.word	0x2001b6e4

0800faa0 <before>:

uint8_t before(uint32_t* timer, float boundary) {
 800faa0:	b480      	push	{r7}
 800faa2:	b083      	sub	sp, #12
 800faa4:	af00      	add	r7, sp, #0
 800faa6:	6078      	str	r0, [r7, #4]
 800faa8:	ed87 0a00 	vstr	s0, [r7]
   return (timer[0]*ams_parameters.Ts_f32 < boundary);
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	ee07 3a90 	vmov	s15, r3
 800fab4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800fab8:	4b0a      	ldr	r3, [pc, #40]	; (800fae4 <before+0x44>)
 800faba:	edd3 7a01 	vldr	s15, [r3, #4]
 800fabe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fac2:	ed97 7a00 	vldr	s14, [r7]
 800fac6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800faca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800face:	bfcc      	ite	gt
 800fad0:	2301      	movgt	r3, #1
 800fad2:	2300      	movle	r3, #0
 800fad4:	b2db      	uxtb	r3, r3
}
 800fad6:	4618      	mov	r0, r3
 800fad8:	370c      	adds	r7, #12
 800fada:	46bd      	mov	sp, r7
 800fadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fae0:	4770      	bx	lr
 800fae2:	bf00      	nop
 800fae4:	2001b6e4 	.word	0x2001b6e4

0800fae8 <do_balance_v0>:

__weak void do_balance_v0() {
 800fae8:	b480      	push	{r7}
 800faea:	af00      	add	r7, sp, #0
   /* Type your actual code somewhere else */
}
 800faec:	bf00      	nop
 800faee:	46bd      	mov	sp, r7
 800faf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faf4:	4770      	bx	lr

0800faf6 <zero_out_balance_v0>:
__weak void zero_out_balance_v0() {
 800faf6:	b480      	push	{r7}
 800faf8:	af00      	add	r7, sp, #0
   /* Type your actual code somewhere else */
}
 800fafa:	bf00      	nop
 800fafc:	46bd      	mov	sp, r7
 800fafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb02:	4770      	bx	lr

0800fb04 <ams_0>:
void ams_0(uint32_t* super_timer, uint8_t* super_state) {
 800fb04:	b480      	push	{r7}
 800fb06:	b083      	sub	sp, #12
 800fb08:	af00      	add	r7, sp, #0
 800fb0a:	6078      	str	r0, [r7, #4]
 800fb0c:	6039      	str	r1, [r7, #0]
   if(1) {
       ams_outputs.balances_126u8;
       super_timer[0] = 0;
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	2200      	movs	r2, #0
 800fb12:	601a      	str	r2, [r3, #0]
       super_state[0] = AMS_ENTRY_STATE;
 800fb14:	683b      	ldr	r3, [r7, #0]
 800fb16:	2201      	movs	r2, #1
 800fb18:	701a      	strb	r2, [r3, #0]
   }

}
 800fb1a:	bf00      	nop
 800fb1c:	370c      	adds	r7, #12
 800fb1e:	46bd      	mov	sp, r7
 800fb20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb24:	4770      	bx	lr
	...

0800fb28 <ams_entry>:
void ams_entry(uint32_t* super_timer, uint8_t* super_state) {
 800fb28:	b580      	push	{r7, lr}
 800fb2a:	b082      	sub	sp, #8
 800fb2c:	af00      	add	r7, sp, #0
 800fb2e:	6078      	str	r0, [r7, #4]
 800fb30:	6039      	str	r1, [r7, #0]
   static uint32_t timer = 0;
   timer++;
 800fb32:	4b19      	ldr	r3, [pc, #100]	; (800fb98 <ams_entry+0x70>)
 800fb34:	681b      	ldr	r3, [r3, #0]
 800fb36:	3301      	adds	r3, #1
 800fb38:	4a17      	ldr	r2, [pc, #92]	; (800fb98 <ams_entry+0x70>)
 800fb3a:	6013      	str	r3, [r2, #0]
   if (super_timer[0] == 0) {
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	681b      	ldr	r3, [r3, #0]
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d102      	bne.n	800fb4a <ams_entry+0x22>
       timer = 0;
 800fb44:	4b14      	ldr	r3, [pc, #80]	; (800fb98 <ams_entry+0x70>)
 800fb46:	2200      	movs	r2, #0
 800fb48:	601a      	str	r2, [r3, #0]
   }

   if(1) {
       ams_parameters.precharge_drive_complete_u8=0;
 800fb4a:	4b14      	ldr	r3, [pc, #80]	; (800fb9c <ams_entry+0x74>)
 800fb4c:	2200      	movs	r2, #0
 800fb4e:	701a      	strb	r2, [r3, #0]
       ams_parameters.precharge_charge_complete_u8=0;
 800fb50:	4b12      	ldr	r3, [pc, #72]	; (800fb9c <ams_entry+0x74>)
 800fb52:	2200      	movs	r2, #0
 800fb54:	70da      	strb	r2, [r3, #3]
       zero_out_balance_v0();
 800fb56:	f7ff ffce 	bl	800faf6 <zero_out_balance_v0>
       ams_outputs.enable_charge_u8=0;
 800fb5a:	4b11      	ldr	r3, [pc, #68]	; (800fba0 <ams_entry+0x78>)
 800fb5c:	2200      	movs	r2, #0
 800fb5e:	701a      	strb	r2, [r3, #0]
       ams_outputs.enable_precharge_u8=0;
 800fb60:	4b0f      	ldr	r3, [pc, #60]	; (800fba0 <ams_entry+0x78>)
 800fb62:	2200      	movs	r2, #0
 800fb64:	709a      	strb	r2, [r3, #2]
       ams_outputs.enable_AIR_plus_u8=0;
 800fb66:	4b0e      	ldr	r3, [pc, #56]	; (800fba0 <ams_entry+0x78>)
 800fb68:	2200      	movs	r2, #0
 800fb6a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
       ams_outputs.enable_AIR_minus_u8=0;
 800fb6e:	4b0c      	ldr	r3, [pc, #48]	; (800fba0 <ams_entry+0x78>)
 800fb70:	2200      	movs	r2, #0
 800fb72:	705a      	strb	r2, [r3, #1]
   }
   if(after(&timer,5)) {
 800fb74:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 800fb78:	4807      	ldr	r0, [pc, #28]	; (800fb98 <ams_entry+0x70>)
 800fb7a:	f7ff ff69 	bl	800fa50 <after>
 800fb7e:	4603      	mov	r3, r0
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d005      	beq.n	800fb90 <ams_entry+0x68>
       super_timer[0] = 0;
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	2200      	movs	r2, #0
 800fb88:	601a      	str	r2, [r3, #0]
       super_state[0] = AMS_IDLE_STATE;
 800fb8a:	683b      	ldr	r3, [r7, #0]
 800fb8c:	2202      	movs	r2, #2
 800fb8e:	701a      	strb	r2, [r3, #0]
   }

}
 800fb90:	bf00      	nop
 800fb92:	3708      	adds	r7, #8
 800fb94:	46bd      	mov	sp, r7
 800fb96:	bd80      	pop	{r7, pc}
 800fb98:	2000175c 	.word	0x2000175c
 800fb9c:	2001b6e4 	.word	0x2001b6e4
 800fba0:	2001b6ec 	.word	0x2001b6ec

0800fba4 <ams_idle>:
void ams_idle(uint32_t* super_timer, uint8_t* super_state) {
 800fba4:	b480      	push	{r7}
 800fba6:	b083      	sub	sp, #12
 800fba8:	af00      	add	r7, sp, #0
 800fbaa:	6078      	str	r0, [r7, #4]
 800fbac:	6039      	str	r1, [r7, #0]
   if(ams_inputs.SC_u8&&ams_inputs.balance_u8) {
 800fbae:	4b18      	ldr	r3, [pc, #96]	; (800fc10 <ams_idle+0x6c>)
 800fbb0:	7e9b      	ldrb	r3, [r3, #26]
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	d009      	beq.n	800fbca <ams_idle+0x26>
 800fbb6:	4b16      	ldr	r3, [pc, #88]	; (800fc10 <ams_idle+0x6c>)
 800fbb8:	7a9b      	ldrb	r3, [r3, #10]
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d005      	beq.n	800fbca <ams_idle+0x26>
       super_timer[0] = 0;
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	2200      	movs	r2, #0
 800fbc2:	601a      	str	r2, [r3, #0]
       super_state[0] = AMS_BALANCE_STATE;
 800fbc4:	683b      	ldr	r3, [r7, #0]
 800fbc6:	2203      	movs	r2, #3
 800fbc8:	701a      	strb	r2, [r3, #0]
   }
   if(ams_inputs.SC_u8&&ams_inputs.drive_u8) {
 800fbca:	4b11      	ldr	r3, [pc, #68]	; (800fc10 <ams_idle+0x6c>)
 800fbcc:	7e9b      	ldrb	r3, [r3, #26]
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d009      	beq.n	800fbe6 <ams_idle+0x42>
 800fbd2:	4b0f      	ldr	r3, [pc, #60]	; (800fc10 <ams_idle+0x6c>)
 800fbd4:	7a5b      	ldrb	r3, [r3, #9]
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d005      	beq.n	800fbe6 <ams_idle+0x42>
       super_timer[0] = 0;
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	2200      	movs	r2, #0
 800fbde:	601a      	str	r2, [r3, #0]
       super_state[0] = AMS_PRECHARGE_DRIVE_STATE;
 800fbe0:	683b      	ldr	r3, [r7, #0]
 800fbe2:	2204      	movs	r2, #4
 800fbe4:	701a      	strb	r2, [r3, #0]
   }
   if(ams_inputs.SC_u8&&ams_inputs.charge_u8) {
 800fbe6:	4b0a      	ldr	r3, [pc, #40]	; (800fc10 <ams_idle+0x6c>)
 800fbe8:	7e9b      	ldrb	r3, [r3, #26]
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	d009      	beq.n	800fc02 <ams_idle+0x5e>
 800fbee:	4b08      	ldr	r3, [pc, #32]	; (800fc10 <ams_idle+0x6c>)
 800fbf0:	7e1b      	ldrb	r3, [r3, #24]
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d005      	beq.n	800fc02 <ams_idle+0x5e>
       super_timer[0] = 0;
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	2200      	movs	r2, #0
 800fbfa:	601a      	str	r2, [r3, #0]
       super_state[0] = AMS_PRECHARGE_CHARGE_STATE;
 800fbfc:	683b      	ldr	r3, [r7, #0]
 800fbfe:	2207      	movs	r2, #7
 800fc00:	701a      	strb	r2, [r3, #0]
   }

}
 800fc02:	bf00      	nop
 800fc04:	370c      	adds	r7, #12
 800fc06:	46bd      	mov	sp, r7
 800fc08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc0c:	4770      	bx	lr
 800fc0e:	bf00      	nop
 800fc10:	2001b6a8 	.word	0x2001b6a8
 800fc14:	00000000 	.word	0x00000000

0800fc18 <ams_balance>:
void ams_balance(uint32_t* super_timer, uint8_t* super_state) {
 800fc18:	b580      	push	{r7, lr}
 800fc1a:	b082      	sub	sp, #8
 800fc1c:	af00      	add	r7, sp, #0
 800fc1e:	6078      	str	r0, [r7, #4]
 800fc20:	6039      	str	r1, [r7, #0]
   static uint32_t timer = 0;
   timer++;
 800fc22:	4b19      	ldr	r3, [pc, #100]	; (800fc88 <ams_balance+0x70>)
 800fc24:	681b      	ldr	r3, [r3, #0]
 800fc26:	3301      	adds	r3, #1
 800fc28:	4a17      	ldr	r2, [pc, #92]	; (800fc88 <ams_balance+0x70>)
 800fc2a:	6013      	str	r3, [r2, #0]
   if (super_timer[0] == 0) {
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d102      	bne.n	800fc3a <ams_balance+0x22>
       timer = 0;
 800fc34:	4b14      	ldr	r3, [pc, #80]	; (800fc88 <ams_balance+0x70>)
 800fc36:	2200      	movs	r2, #0
 800fc38:	601a      	str	r2, [r3, #0]
   }

   if(after(&timer,60)) {
 800fc3a:	ed9f 0a14 	vldr	s0, [pc, #80]	; 800fc8c <ams_balance+0x74>
 800fc3e:	4812      	ldr	r0, [pc, #72]	; (800fc88 <ams_balance+0x70>)
 800fc40:	f7ff ff06 	bl	800fa50 <after>
 800fc44:	4603      	mov	r3, r0
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	d001      	beq.n	800fc4e <ams_balance+0x36>
       do_balance_v0();
 800fc4a:	f7ff ff4d 	bl	800fae8 <do_balance_v0>
   }
   if(ams_inputs.U_variance_f64<0.00001) {
 800fc4e:	4b10      	ldr	r3, [pc, #64]	; (800fc90 <ams_balance+0x78>)
 800fc50:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800fc54:	a30a      	add	r3, pc, #40	; (adr r3, 800fc80 <ams_balance+0x68>)
 800fc56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc5a:	f7f0 ff31 	bl	8000ac0 <__aeabi_dcmplt>
 800fc5e:	4603      	mov	r3, r0
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d100      	bne.n	800fc66 <ams_balance+0x4e>
       zero_out_balance_v0();
       super_timer[0] = 0;
       super_state[0] = AMS_IDLE_STATE;
   }

}
 800fc64:	e007      	b.n	800fc76 <ams_balance+0x5e>
       zero_out_balance_v0();
 800fc66:	f7ff ff46 	bl	800faf6 <zero_out_balance_v0>
       super_timer[0] = 0;
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	2200      	movs	r2, #0
 800fc6e:	601a      	str	r2, [r3, #0]
       super_state[0] = AMS_IDLE_STATE;
 800fc70:	683b      	ldr	r3, [r7, #0]
 800fc72:	2202      	movs	r2, #2
 800fc74:	701a      	strb	r2, [r3, #0]
}
 800fc76:	bf00      	nop
 800fc78:	3708      	adds	r7, #8
 800fc7a:	46bd      	mov	sp, r7
 800fc7c:	bd80      	pop	{r7, pc}
 800fc7e:	bf00      	nop
 800fc80:	88e368f1 	.word	0x88e368f1
 800fc84:	3ee4f8b5 	.word	0x3ee4f8b5
 800fc88:	20001760 	.word	0x20001760
 800fc8c:	42700000 	.word	0x42700000
 800fc90:	2001b6a8 	.word	0x2001b6a8

0800fc94 <ams_precharge_drive_0>:
void ams_precharge_drive_0(uint32_t* super_timer, uint8_t* super_state) {
 800fc94:	b480      	push	{r7}
 800fc96:	b083      	sub	sp, #12
 800fc98:	af00      	add	r7, sp, #0
 800fc9a:	6078      	str	r0, [r7, #4]
 800fc9c:	6039      	str	r1, [r7, #0]
   if(1) {
       ams_outputs.enable_AIR_minus_u8=1;
 800fc9e:	4b07      	ldr	r3, [pc, #28]	; (800fcbc <ams_precharge_drive_0+0x28>)
 800fca0:	2201      	movs	r2, #1
 800fca2:	705a      	strb	r2, [r3, #1]
       super_timer[0] = 0;
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	2200      	movs	r2, #0
 800fca8:	601a      	str	r2, [r3, #0]
       super_state[0] = AMS_PRECHARGE_DRIVE_CLOSE_AIR_MINUS_STATE;
 800fcaa:	683b      	ldr	r3, [r7, #0]
 800fcac:	2201      	movs	r2, #1
 800fcae:	701a      	strb	r2, [r3, #0]
   }

}
 800fcb0:	bf00      	nop
 800fcb2:	370c      	adds	r7, #12
 800fcb4:	46bd      	mov	sp, r7
 800fcb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcba:	4770      	bx	lr
 800fcbc:	2001b6ec 	.word	0x2001b6ec

0800fcc0 <ams_precharge_drive_close_air_minus>:
void ams_precharge_drive_close_air_minus(uint32_t* super_timer, uint8_t* super_state) {
 800fcc0:	b580      	push	{r7, lr}
 800fcc2:	b082      	sub	sp, #8
 800fcc4:	af00      	add	r7, sp, #0
 800fcc6:	6078      	str	r0, [r7, #4]
 800fcc8:	6039      	str	r1, [r7, #0]
   static uint32_t timer = 0;
   timer++;
 800fcca:	4b19      	ldr	r3, [pc, #100]	; (800fd30 <ams_precharge_drive_close_air_minus+0x70>)
 800fccc:	681b      	ldr	r3, [r3, #0]
 800fcce:	3301      	adds	r3, #1
 800fcd0:	4a17      	ldr	r2, [pc, #92]	; (800fd30 <ams_precharge_drive_close_air_minus+0x70>)
 800fcd2:	6013      	str	r3, [r2, #0]
   if (super_timer[0] == 0) {
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	681b      	ldr	r3, [r3, #0]
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	d102      	bne.n	800fce2 <ams_precharge_drive_close_air_minus+0x22>
       timer = 0;
 800fcdc:	4b14      	ldr	r3, [pc, #80]	; (800fd30 <ams_precharge_drive_close_air_minus+0x70>)
 800fcde:	2200      	movs	r2, #0
 800fce0:	601a      	str	r2, [r3, #0]
   }

   if(before(&timer,2)&&(ams_inputs.AIR_minus_closed_u8==1)) {
 800fce2:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800fce6:	4812      	ldr	r0, [pc, #72]	; (800fd30 <ams_precharge_drive_close_air_minus+0x70>)
 800fce8:	f7ff feda 	bl	800faa0 <before>
 800fcec:	4603      	mov	r3, r0
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	d00c      	beq.n	800fd0c <ams_precharge_drive_close_air_minus+0x4c>
 800fcf2:	4b10      	ldr	r3, [pc, #64]	; (800fd34 <ams_precharge_drive_close_air_minus+0x74>)
 800fcf4:	7a1b      	ldrb	r3, [r3, #8]
 800fcf6:	2b01      	cmp	r3, #1
 800fcf8:	d108      	bne.n	800fd0c <ams_precharge_drive_close_air_minus+0x4c>
       ams_outputs.enable_precharge_u8=1;
 800fcfa:	4b0f      	ldr	r3, [pc, #60]	; (800fd38 <ams_precharge_drive_close_air_minus+0x78>)
 800fcfc:	2201      	movs	r2, #1
 800fcfe:	709a      	strb	r2, [r3, #2]
       super_timer[0] = 0;
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	2200      	movs	r2, #0
 800fd04:	601a      	str	r2, [r3, #0]
       super_state[0] = AMS_PRECHARGE_DRIVE_CLOSE_PRECHARGE_STATE;
 800fd06:	683b      	ldr	r3, [r7, #0]
 800fd08:	2202      	movs	r2, #2
 800fd0a:	701a      	strb	r2, [r3, #0]
   }
   if(after(&timer,2)) {
 800fd0c:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800fd10:	4807      	ldr	r0, [pc, #28]	; (800fd30 <ams_precharge_drive_close_air_minus+0x70>)
 800fd12:	f7ff fe9d 	bl	800fa50 <after>
 800fd16:	4603      	mov	r3, r0
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d005      	beq.n	800fd28 <ams_precharge_drive_close_air_minus+0x68>
       super_timer[0] = 0;
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	2200      	movs	r2, #0
 800fd20:	601a      	str	r2, [r3, #0]
       super_state[0] = AMS_PRECHARGE_DRIVE_ERROR_STATE;
 800fd22:	683b      	ldr	r3, [r7, #0]
 800fd24:	2203      	movs	r2, #3
 800fd26:	701a      	strb	r2, [r3, #0]
   }

}
 800fd28:	bf00      	nop
 800fd2a:	3708      	adds	r7, #8
 800fd2c:	46bd      	mov	sp, r7
 800fd2e:	bd80      	pop	{r7, pc}
 800fd30:	20001764 	.word	0x20001764
 800fd34:	2001b6a8 	.word	0x2001b6a8
 800fd38:	2001b6ec 	.word	0x2001b6ec

0800fd3c <ams_precharge_drive_close_precharge>:
void ams_precharge_drive_close_precharge(uint32_t* super_timer, uint8_t* super_state) {
 800fd3c:	b580      	push	{r7, lr}
 800fd3e:	b082      	sub	sp, #8
 800fd40:	af00      	add	r7, sp, #0
 800fd42:	6078      	str	r0, [r7, #4]
 800fd44:	6039      	str	r1, [r7, #0]
   static uint32_t timer = 0;
   timer++;
 800fd46:	4b19      	ldr	r3, [pc, #100]	; (800fdac <ams_precharge_drive_close_precharge+0x70>)
 800fd48:	681b      	ldr	r3, [r3, #0]
 800fd4a:	3301      	adds	r3, #1
 800fd4c:	4a17      	ldr	r2, [pc, #92]	; (800fdac <ams_precharge_drive_close_precharge+0x70>)
 800fd4e:	6013      	str	r3, [r2, #0]
   if (super_timer[0] == 0) {
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	681b      	ldr	r3, [r3, #0]
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d102      	bne.n	800fd5e <ams_precharge_drive_close_precharge+0x22>
       timer = 0;
 800fd58:	4b14      	ldr	r3, [pc, #80]	; (800fdac <ams_precharge_drive_close_precharge+0x70>)
 800fd5a:	2200      	movs	r2, #0
 800fd5c:	601a      	str	r2, [r3, #0]
   }

   if(before(&timer,2)&&(ams_inputs.precharge_closed_u8==1)) {
 800fd5e:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800fd62:	4812      	ldr	r0, [pc, #72]	; (800fdac <ams_precharge_drive_close_precharge+0x70>)
 800fd64:	f7ff fe9c 	bl	800faa0 <before>
 800fd68:	4603      	mov	r3, r0
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d00c      	beq.n	800fd88 <ams_precharge_drive_close_precharge+0x4c>
 800fd6e:	4b10      	ldr	r3, [pc, #64]	; (800fdb0 <ams_precharge_drive_close_precharge+0x74>)
 800fd70:	7e5b      	ldrb	r3, [r3, #25]
 800fd72:	2b01      	cmp	r3, #1
 800fd74:	d108      	bne.n	800fd88 <ams_precharge_drive_close_precharge+0x4c>
       ams_outputs.enable_driver_u8=1;
 800fd76:	4b0f      	ldr	r3, [pc, #60]	; (800fdb4 <ams_precharge_drive_close_precharge+0x78>)
 800fd78:	2201      	movs	r2, #1
 800fd7a:	70da      	strb	r2, [r3, #3]
       super_timer[0] = 0;
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	2200      	movs	r2, #0
 800fd80:	601a      	str	r2, [r3, #0]
       super_state[0] = AMS_PRECHARGE_DRIVE_WAIT_STATE;
 800fd82:	683b      	ldr	r3, [r7, #0]
 800fd84:	2204      	movs	r2, #4
 800fd86:	701a      	strb	r2, [r3, #0]
   }
   if(after(&timer,2)) {
 800fd88:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800fd8c:	4807      	ldr	r0, [pc, #28]	; (800fdac <ams_precharge_drive_close_precharge+0x70>)
 800fd8e:	f7ff fe5f 	bl	800fa50 <after>
 800fd92:	4603      	mov	r3, r0
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d005      	beq.n	800fda4 <ams_precharge_drive_close_precharge+0x68>
       super_timer[0] = 0;
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	2200      	movs	r2, #0
 800fd9c:	601a      	str	r2, [r3, #0]
       super_state[0] = AMS_PRECHARGE_DRIVE_ERROR_STATE;
 800fd9e:	683b      	ldr	r3, [r7, #0]
 800fda0:	2203      	movs	r2, #3
 800fda2:	701a      	strb	r2, [r3, #0]
   }

}
 800fda4:	bf00      	nop
 800fda6:	3708      	adds	r7, #8
 800fda8:	46bd      	mov	sp, r7
 800fdaa:	bd80      	pop	{r7, pc}
 800fdac:	20001768 	.word	0x20001768
 800fdb0:	2001b6a8 	.word	0x2001b6a8
 800fdb4:	2001b6ec 	.word	0x2001b6ec

0800fdb8 <ams_precharge_drive_error>:
void ams_precharge_drive_error(uint32_t* super_timer, uint8_t* super_state) {
 800fdb8:	b480      	push	{r7}
 800fdba:	b083      	sub	sp, #12
 800fdbc:	af00      	add	r7, sp, #0
 800fdbe:	6078      	str	r0, [r7, #4]
 800fdc0:	6039      	str	r1, [r7, #0]
   if(1) {
       ams_parameters.precharge_drive_error_u8=1;
 800fdc2:	4b04      	ldr	r3, [pc, #16]	; (800fdd4 <ams_precharge_drive_error+0x1c>)
 800fdc4:	2201      	movs	r2, #1
 800fdc6:	705a      	strb	r2, [r3, #1]
   }

}
 800fdc8:	bf00      	nop
 800fdca:	370c      	adds	r7, #12
 800fdcc:	46bd      	mov	sp, r7
 800fdce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdd2:	4770      	bx	lr
 800fdd4:	2001b6e4 	.word	0x2001b6e4

0800fdd8 <ams_precharge_drive_wait>:
void ams_precharge_drive_wait(uint32_t* super_timer, uint8_t* super_state) {
 800fdd8:	b580      	push	{r7, lr}
 800fdda:	b082      	sub	sp, #8
 800fddc:	af00      	add	r7, sp, #0
 800fdde:	6078      	str	r0, [r7, #4]
 800fde0:	6039      	str	r1, [r7, #0]
   static uint32_t timer = 0;
   timer++;
 800fde2:	4b29      	ldr	r3, [pc, #164]	; (800fe88 <ams_precharge_drive_wait+0xb0>)
 800fde4:	681b      	ldr	r3, [r3, #0]
 800fde6:	3301      	adds	r3, #1
 800fde8:	4a27      	ldr	r2, [pc, #156]	; (800fe88 <ams_precharge_drive_wait+0xb0>)
 800fdea:	6013      	str	r3, [r2, #0]
   if (super_timer[0] == 0) {
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	681b      	ldr	r3, [r3, #0]
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d102      	bne.n	800fdfa <ams_precharge_drive_wait+0x22>
       timer = 0;
 800fdf4:	4b24      	ldr	r3, [pc, #144]	; (800fe88 <ams_precharge_drive_wait+0xb0>)
 800fdf6:	2200      	movs	r2, #0
 800fdf8:	601a      	str	r2, [r3, #0]
   }

   if(after(&timer,2)&&before(&timer,25)&&(0.95*ams_inputs.accumulator_voltage_f64<ams_inputs.vehicle_voltage_f64)) {
 800fdfa:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800fdfe:	4822      	ldr	r0, [pc, #136]	; (800fe88 <ams_precharge_drive_wait+0xb0>)
 800fe00:	f7ff fe26 	bl	800fa50 <after>
 800fe04:	4603      	mov	r3, r0
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	d025      	beq.n	800fe56 <ams_precharge_drive_wait+0x7e>
 800fe0a:	eeb3 0a09 	vmov.f32	s0, #57	; 0x41c80000  25.0
 800fe0e:	481e      	ldr	r0, [pc, #120]	; (800fe88 <ams_precharge_drive_wait+0xb0>)
 800fe10:	f7ff fe46 	bl	800faa0 <before>
 800fe14:	4603      	mov	r3, r0
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	d01d      	beq.n	800fe56 <ams_precharge_drive_wait+0x7e>
 800fe1a:	4b1c      	ldr	r3, [pc, #112]	; (800fe8c <ams_precharge_drive_wait+0xb4>)
 800fe1c:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800fe20:	a317      	add	r3, pc, #92	; (adr r3, 800fe80 <ams_precharge_drive_wait+0xa8>)
 800fe22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe26:	f7f0 fbd9 	bl	80005dc <__aeabi_dmul>
 800fe2a:	4602      	mov	r2, r0
 800fe2c:	460b      	mov	r3, r1
 800fe2e:	4610      	mov	r0, r2
 800fe30:	4619      	mov	r1, r3
 800fe32:	4b16      	ldr	r3, [pc, #88]	; (800fe8c <ams_precharge_drive_wait+0xb4>)
 800fe34:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800fe38:	f7f0 fe42 	bl	8000ac0 <__aeabi_dcmplt>
 800fe3c:	4603      	mov	r3, r0
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d009      	beq.n	800fe56 <ams_precharge_drive_wait+0x7e>
       ams_outputs.enable_AIR_plus_u8=1;
 800fe42:	4b13      	ldr	r3, [pc, #76]	; (800fe90 <ams_precharge_drive_wait+0xb8>)
 800fe44:	2201      	movs	r2, #1
 800fe46:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
       super_timer[0] = 0;
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	2200      	movs	r2, #0
 800fe4e:	601a      	str	r2, [r3, #0]
       super_state[0] = AMS_PRECHARGE_DRIVE_CLOSE_AIR_PLUS_STATE;
 800fe50:	683b      	ldr	r3, [r7, #0]
 800fe52:	2205      	movs	r2, #5
 800fe54:	701a      	strb	r2, [r3, #0]
   }
   if(after(&timer,25)) {
 800fe56:	eeb3 0a09 	vmov.f32	s0, #57	; 0x41c80000  25.0
 800fe5a:	480b      	ldr	r0, [pc, #44]	; (800fe88 <ams_precharge_drive_wait+0xb0>)
 800fe5c:	f7ff fdf8 	bl	800fa50 <after>
 800fe60:	4603      	mov	r3, r0
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d005      	beq.n	800fe72 <ams_precharge_drive_wait+0x9a>
       super_timer[0] = 0;
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	2200      	movs	r2, #0
 800fe6a:	601a      	str	r2, [r3, #0]
       super_state[0] = AMS_PRECHARGE_DRIVE_ERROR_STATE;
 800fe6c:	683b      	ldr	r3, [r7, #0]
 800fe6e:	2203      	movs	r2, #3
 800fe70:	701a      	strb	r2, [r3, #0]
   }

}
 800fe72:	bf00      	nop
 800fe74:	3708      	adds	r7, #8
 800fe76:	46bd      	mov	sp, r7
 800fe78:	bd80      	pop	{r7, pc}
 800fe7a:	bf00      	nop
 800fe7c:	f3af 8000 	nop.w
 800fe80:	66666666 	.word	0x66666666
 800fe84:	3fee6666 	.word	0x3fee6666
 800fe88:	2000176c 	.word	0x2000176c
 800fe8c:	2001b6a8 	.word	0x2001b6a8
 800fe90:	2001b6ec 	.word	0x2001b6ec

0800fe94 <ams_precharge_drive_close_air_plus>:
void ams_precharge_drive_close_air_plus(uint32_t* super_timer, uint8_t* super_state) {
 800fe94:	b580      	push	{r7, lr}
 800fe96:	b082      	sub	sp, #8
 800fe98:	af00      	add	r7, sp, #0
 800fe9a:	6078      	str	r0, [r7, #4]
 800fe9c:	6039      	str	r1, [r7, #0]
   static uint32_t timer = 0;
   timer++;
 800fe9e:	4b19      	ldr	r3, [pc, #100]	; (800ff04 <ams_precharge_drive_close_air_plus+0x70>)
 800fea0:	681b      	ldr	r3, [r3, #0]
 800fea2:	3301      	adds	r3, #1
 800fea4:	4a17      	ldr	r2, [pc, #92]	; (800ff04 <ams_precharge_drive_close_air_plus+0x70>)
 800fea6:	6013      	str	r3, [r2, #0]
   if (super_timer[0] == 0) {
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	681b      	ldr	r3, [r3, #0]
 800feac:	2b00      	cmp	r3, #0
 800feae:	d102      	bne.n	800feb6 <ams_precharge_drive_close_air_plus+0x22>
       timer = 0;
 800feb0:	4b14      	ldr	r3, [pc, #80]	; (800ff04 <ams_precharge_drive_close_air_plus+0x70>)
 800feb2:	2200      	movs	r2, #0
 800feb4:	601a      	str	r2, [r3, #0]
   }

   if(before(&timer,2)&&(ams_inputs.AIR_plus_closed_u8==1)) {
 800feb6:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800feba:	4812      	ldr	r0, [pc, #72]	; (800ff04 <ams_precharge_drive_close_air_plus+0x70>)
 800febc:	f7ff fdf0 	bl	800faa0 <before>
 800fec0:	4603      	mov	r3, r0
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	d00c      	beq.n	800fee0 <ams_precharge_drive_close_air_plus+0x4c>
 800fec6:	4b10      	ldr	r3, [pc, #64]	; (800ff08 <ams_precharge_drive_close_air_plus+0x74>)
 800fec8:	7adb      	ldrb	r3, [r3, #11]
 800feca:	2b01      	cmp	r3, #1
 800fecc:	d108      	bne.n	800fee0 <ams_precharge_drive_close_air_plus+0x4c>
       ams_outputs.enable_precharge_u8=0;
 800fece:	4b0f      	ldr	r3, [pc, #60]	; (800ff0c <ams_precharge_drive_close_air_plus+0x78>)
 800fed0:	2200      	movs	r2, #0
 800fed2:	709a      	strb	r2, [r3, #2]
       super_timer[0] = 0;
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	2200      	movs	r2, #0
 800fed8:	601a      	str	r2, [r3, #0]
       super_state[0] = AMS_PRECHARGE_DRIVE_OPEN_PRECHARGE_STATE;
 800feda:	683b      	ldr	r3, [r7, #0]
 800fedc:	2206      	movs	r2, #6
 800fede:	701a      	strb	r2, [r3, #0]
   }
   if(after(&timer,2)) {
 800fee0:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800fee4:	4807      	ldr	r0, [pc, #28]	; (800ff04 <ams_precharge_drive_close_air_plus+0x70>)
 800fee6:	f7ff fdb3 	bl	800fa50 <after>
 800feea:	4603      	mov	r3, r0
 800feec:	2b00      	cmp	r3, #0
 800feee:	d005      	beq.n	800fefc <ams_precharge_drive_close_air_plus+0x68>
       super_timer[0] = 0;
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	2200      	movs	r2, #0
 800fef4:	601a      	str	r2, [r3, #0]
       super_state[0] = AMS_PRECHARGE_DRIVE_ERROR_STATE;
 800fef6:	683b      	ldr	r3, [r7, #0]
 800fef8:	2203      	movs	r2, #3
 800fefa:	701a      	strb	r2, [r3, #0]
   }

}
 800fefc:	bf00      	nop
 800fefe:	3708      	adds	r7, #8
 800ff00:	46bd      	mov	sp, r7
 800ff02:	bd80      	pop	{r7, pc}
 800ff04:	20001770 	.word	0x20001770
 800ff08:	2001b6a8 	.word	0x2001b6a8
 800ff0c:	2001b6ec 	.word	0x2001b6ec

0800ff10 <ams_precharge_drive_open_precharge>:
void ams_precharge_drive_open_precharge(uint32_t* super_timer, uint8_t* super_state) {
 800ff10:	b580      	push	{r7, lr}
 800ff12:	b082      	sub	sp, #8
 800ff14:	af00      	add	r7, sp, #0
 800ff16:	6078      	str	r0, [r7, #4]
 800ff18:	6039      	str	r1, [r7, #0]
   static uint32_t timer = 0;
   timer++;
 800ff1a:	4b19      	ldr	r3, [pc, #100]	; (800ff80 <ams_precharge_drive_open_precharge+0x70>)
 800ff1c:	681b      	ldr	r3, [r3, #0]
 800ff1e:	3301      	adds	r3, #1
 800ff20:	4a17      	ldr	r2, [pc, #92]	; (800ff80 <ams_precharge_drive_open_precharge+0x70>)
 800ff22:	6013      	str	r3, [r2, #0]
   if (super_timer[0] == 0) {
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	681b      	ldr	r3, [r3, #0]
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d102      	bne.n	800ff32 <ams_precharge_drive_open_precharge+0x22>
       timer = 0;
 800ff2c:	4b14      	ldr	r3, [pc, #80]	; (800ff80 <ams_precharge_drive_open_precharge+0x70>)
 800ff2e:	2200      	movs	r2, #0
 800ff30:	601a      	str	r2, [r3, #0]
   }

   if(before(&timer,2)&&(ams_inputs.precharge_closed_u8==1)) {
 800ff32:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800ff36:	4812      	ldr	r0, [pc, #72]	; (800ff80 <ams_precharge_drive_open_precharge+0x70>)
 800ff38:	f7ff fdb2 	bl	800faa0 <before>
 800ff3c:	4603      	mov	r3, r0
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d00c      	beq.n	800ff5c <ams_precharge_drive_open_precharge+0x4c>
 800ff42:	4b10      	ldr	r3, [pc, #64]	; (800ff84 <ams_precharge_drive_open_precharge+0x74>)
 800ff44:	7e5b      	ldrb	r3, [r3, #25]
 800ff46:	2b01      	cmp	r3, #1
 800ff48:	d108      	bne.n	800ff5c <ams_precharge_drive_open_precharge+0x4c>
       ams_parameters.precharge_drive_complete_u8=1;
 800ff4a:	4b0f      	ldr	r3, [pc, #60]	; (800ff88 <ams_precharge_drive_open_precharge+0x78>)
 800ff4c:	2201      	movs	r2, #1
 800ff4e:	701a      	strb	r2, [r3, #0]
       super_timer[0] = 0;
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	2200      	movs	r2, #0
 800ff54:	601a      	str	r2, [r3, #0]
       super_state[0] = AMS_PRECHARGE_DRIVE_EXIT_STATE;
 800ff56:	683b      	ldr	r3, [r7, #0]
 800ff58:	2207      	movs	r2, #7
 800ff5a:	701a      	strb	r2, [r3, #0]
   }
   if(after(&timer,2)) {
 800ff5c:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800ff60:	4807      	ldr	r0, [pc, #28]	; (800ff80 <ams_precharge_drive_open_precharge+0x70>)
 800ff62:	f7ff fd75 	bl	800fa50 <after>
 800ff66:	4603      	mov	r3, r0
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d005      	beq.n	800ff78 <ams_precharge_drive_open_precharge+0x68>
       super_timer[0] = 0;
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	2200      	movs	r2, #0
 800ff70:	601a      	str	r2, [r3, #0]
       super_state[0] = AMS_PRECHARGE_DRIVE_ERROR_STATE;
 800ff72:	683b      	ldr	r3, [r7, #0]
 800ff74:	2203      	movs	r2, #3
 800ff76:	701a      	strb	r2, [r3, #0]
   }

}
 800ff78:	bf00      	nop
 800ff7a:	3708      	adds	r7, #8
 800ff7c:	46bd      	mov	sp, r7
 800ff7e:	bd80      	pop	{r7, pc}
 800ff80:	20001774 	.word	0x20001774
 800ff84:	2001b6a8 	.word	0x2001b6a8
 800ff88:	2001b6e4 	.word	0x2001b6e4

0800ff8c <ams_precharge_drive_exit>:
void ams_precharge_drive_exit(uint32_t* super_timer, uint8_t* super_state) {
 800ff8c:	b480      	push	{r7}
 800ff8e:	b083      	sub	sp, #12
 800ff90:	af00      	add	r7, sp, #0
 800ff92:	6078      	str	r0, [r7, #4]
 800ff94:	6039      	str	r1, [r7, #0]

}
 800ff96:	bf00      	nop
 800ff98:	370c      	adds	r7, #12
 800ff9a:	46bd      	mov	sp, r7
 800ff9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffa0:	4770      	bx	lr
	...

0800ffa4 <ams_precharge_drive>:
void ams_precharge_drive(uint32_t* super_timer, uint8_t* super_state) {
 800ffa4:	b580      	push	{r7, lr}
 800ffa6:	b082      	sub	sp, #8
 800ffa8:	af00      	add	r7, sp, #0
 800ffaa:	6078      	str	r0, [r7, #4]
 800ffac:	6039      	str	r1, [r7, #0]
   static ams_precharge_drive_t state = AMS_PRECHARGE_DRIVE_0_STATE;
   static uint32_t timer = 0;
   timer++;
 800ffae:	4b37      	ldr	r3, [pc, #220]	; (801008c <ams_precharge_drive+0xe8>)
 800ffb0:	681b      	ldr	r3, [r3, #0]
 800ffb2:	3301      	adds	r3, #1
 800ffb4:	4a35      	ldr	r2, [pc, #212]	; (801008c <ams_precharge_drive+0xe8>)
 800ffb6:	6013      	str	r3, [r2, #0]
   if (super_timer[0] == 0) {
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	681b      	ldr	r3, [r3, #0]
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	d105      	bne.n	800ffcc <ams_precharge_drive+0x28>
       timer = 0;
 800ffc0:	4b32      	ldr	r3, [pc, #200]	; (801008c <ams_precharge_drive+0xe8>)
 800ffc2:	2200      	movs	r2, #0
 800ffc4:	601a      	str	r2, [r3, #0]
       state = AMS_PRECHARGE_DRIVE_0_STATE;
 800ffc6:	4b32      	ldr	r3, [pc, #200]	; (8010090 <ams_precharge_drive+0xec>)
 800ffc8:	2200      	movs	r2, #0
 800ffca:	701a      	strb	r2, [r3, #0]
   }

   switch(state) {
 800ffcc:	4b30      	ldr	r3, [pc, #192]	; (8010090 <ams_precharge_drive+0xec>)
 800ffce:	781b      	ldrb	r3, [r3, #0]
 800ffd0:	2b07      	cmp	r3, #7
 800ffd2:	d83b      	bhi.n	801004c <ams_precharge_drive+0xa8>
 800ffd4:	a201      	add	r2, pc, #4	; (adr r2, 800ffdc <ams_precharge_drive+0x38>)
 800ffd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ffda:	bf00      	nop
 800ffdc:	0800fffd 	.word	0x0800fffd
 800ffe0:	08010007 	.word	0x08010007
 800ffe4:	08010011 	.word	0x08010011
 800ffe8:	0801001b 	.word	0x0801001b
 800ffec:	08010025 	.word	0x08010025
 800fff0:	0801002f 	.word	0x0801002f
 800fff4:	08010039 	.word	0x08010039
 800fff8:	08010043 	.word	0x08010043
       case AMS_PRECHARGE_DRIVE_0_STATE:
           ams_precharge_drive_0(&timer, &state);
 800fffc:	4924      	ldr	r1, [pc, #144]	; (8010090 <ams_precharge_drive+0xec>)
 800fffe:	4823      	ldr	r0, [pc, #140]	; (801008c <ams_precharge_drive+0xe8>)
 8010000:	f7ff fe48 	bl	800fc94 <ams_precharge_drive_0>
           break;
 8010004:	e022      	b.n	801004c <ams_precharge_drive+0xa8>
       case AMS_PRECHARGE_DRIVE_CLOSE_AIR_MINUS_STATE:
           ams_precharge_drive_close_air_minus(&timer, &state);
 8010006:	4922      	ldr	r1, [pc, #136]	; (8010090 <ams_precharge_drive+0xec>)
 8010008:	4820      	ldr	r0, [pc, #128]	; (801008c <ams_precharge_drive+0xe8>)
 801000a:	f7ff fe59 	bl	800fcc0 <ams_precharge_drive_close_air_minus>
           break;
 801000e:	e01d      	b.n	801004c <ams_precharge_drive+0xa8>
       case AMS_PRECHARGE_DRIVE_CLOSE_PRECHARGE_STATE:
           ams_precharge_drive_close_precharge(&timer, &state);
 8010010:	491f      	ldr	r1, [pc, #124]	; (8010090 <ams_precharge_drive+0xec>)
 8010012:	481e      	ldr	r0, [pc, #120]	; (801008c <ams_precharge_drive+0xe8>)
 8010014:	f7ff fe92 	bl	800fd3c <ams_precharge_drive_close_precharge>
           break;
 8010018:	e018      	b.n	801004c <ams_precharge_drive+0xa8>
       case AMS_PRECHARGE_DRIVE_ERROR_STATE:
           ams_precharge_drive_error(&timer, &state);
 801001a:	491d      	ldr	r1, [pc, #116]	; (8010090 <ams_precharge_drive+0xec>)
 801001c:	481b      	ldr	r0, [pc, #108]	; (801008c <ams_precharge_drive+0xe8>)
 801001e:	f7ff fecb 	bl	800fdb8 <ams_precharge_drive_error>
           break;
 8010022:	e013      	b.n	801004c <ams_precharge_drive+0xa8>
       case AMS_PRECHARGE_DRIVE_WAIT_STATE:
           ams_precharge_drive_wait(&timer, &state);
 8010024:	491a      	ldr	r1, [pc, #104]	; (8010090 <ams_precharge_drive+0xec>)
 8010026:	4819      	ldr	r0, [pc, #100]	; (801008c <ams_precharge_drive+0xe8>)
 8010028:	f7ff fed6 	bl	800fdd8 <ams_precharge_drive_wait>
           break;
 801002c:	e00e      	b.n	801004c <ams_precharge_drive+0xa8>
       case AMS_PRECHARGE_DRIVE_CLOSE_AIR_PLUS_STATE:
           ams_precharge_drive_close_air_plus(&timer, &state);
 801002e:	4918      	ldr	r1, [pc, #96]	; (8010090 <ams_precharge_drive+0xec>)
 8010030:	4816      	ldr	r0, [pc, #88]	; (801008c <ams_precharge_drive+0xe8>)
 8010032:	f7ff ff2f 	bl	800fe94 <ams_precharge_drive_close_air_plus>
           break;
 8010036:	e009      	b.n	801004c <ams_precharge_drive+0xa8>
       case AMS_PRECHARGE_DRIVE_OPEN_PRECHARGE_STATE:
           ams_precharge_drive_open_precharge(&timer, &state);
 8010038:	4915      	ldr	r1, [pc, #84]	; (8010090 <ams_precharge_drive+0xec>)
 801003a:	4814      	ldr	r0, [pc, #80]	; (801008c <ams_precharge_drive+0xe8>)
 801003c:	f7ff ff68 	bl	800ff10 <ams_precharge_drive_open_precharge>
           break;
 8010040:	e004      	b.n	801004c <ams_precharge_drive+0xa8>
       case AMS_PRECHARGE_DRIVE_EXIT_STATE:
           ams_precharge_drive_exit(&timer, &state);
 8010042:	4913      	ldr	r1, [pc, #76]	; (8010090 <ams_precharge_drive+0xec>)
 8010044:	4811      	ldr	r0, [pc, #68]	; (801008c <ams_precharge_drive+0xe8>)
 8010046:	f7ff ffa1 	bl	800ff8c <ams_precharge_drive_exit>
           break;
 801004a:	bf00      	nop
   }

   if(ams_parameters.precharge_drive_complete_u8==1) {
 801004c:	4b11      	ldr	r3, [pc, #68]	; (8010094 <ams_precharge_drive+0xf0>)
 801004e:	781b      	ldrb	r3, [r3, #0]
 8010050:	2b01      	cmp	r3, #1
 8010052:	d105      	bne.n	8010060 <ams_precharge_drive+0xbc>
       super_timer[0] = 0;
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	2200      	movs	r2, #0
 8010058:	601a      	str	r2, [r3, #0]
       super_state[0] = AMS_DRIVE_STATE;
 801005a:	683b      	ldr	r3, [r7, #0]
 801005c:	2205      	movs	r2, #5
 801005e:	701a      	strb	r2, [r3, #0]
   }
   if((ams_parameters.precharge_drive_error_u8==1)||ams_inputs.error_u8) {
 8010060:	4b0c      	ldr	r3, [pc, #48]	; (8010094 <ams_precharge_drive+0xf0>)
 8010062:	785b      	ldrb	r3, [r3, #1]
 8010064:	2b01      	cmp	r3, #1
 8010066:	d003      	beq.n	8010070 <ams_precharge_drive+0xcc>
 8010068:	4b0b      	ldr	r3, [pc, #44]	; (8010098 <ams_precharge_drive+0xf4>)
 801006a:	7edb      	ldrb	r3, [r3, #27]
 801006c:	2b00      	cmp	r3, #0
 801006e:	d008      	beq.n	8010082 <ams_precharge_drive+0xde>
       ams_outputs.AMS_error_u8=1;
 8010070:	4b0a      	ldr	r3, [pc, #40]	; (801009c <ams_precharge_drive+0xf8>)
 8010072:	2201      	movs	r2, #1
 8010074:	715a      	strb	r2, [r3, #5]
       super_timer[0] = 0;
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	2200      	movs	r2, #0
 801007a:	601a      	str	r2, [r3, #0]
       super_state[0] = AMS_ERROR_STATE;
 801007c:	683b      	ldr	r3, [r7, #0]
 801007e:	2206      	movs	r2, #6
 8010080:	701a      	strb	r2, [r3, #0]
   }

}
 8010082:	bf00      	nop
 8010084:	3708      	adds	r7, #8
 8010086:	46bd      	mov	sp, r7
 8010088:	bd80      	pop	{r7, pc}
 801008a:	bf00      	nop
 801008c:	20001778 	.word	0x20001778
 8010090:	2000177c 	.word	0x2000177c
 8010094:	2001b6e4 	.word	0x2001b6e4
 8010098:	2001b6a8 	.word	0x2001b6a8
 801009c:	2001b6ec 	.word	0x2001b6ec

080100a0 <ams_drive>:
void ams_drive(uint32_t* super_timer, uint8_t* super_state) {
 80100a0:	b480      	push	{r7}
 80100a2:	b083      	sub	sp, #12
 80100a4:	af00      	add	r7, sp, #0
 80100a6:	6078      	str	r0, [r7, #4]
 80100a8:	6039      	str	r1, [r7, #0]
   if(ams_inputs.drive_u8==0) {
 80100aa:	4b17      	ldr	r3, [pc, #92]	; (8010108 <ams_drive+0x68>)
 80100ac:	7a5b      	ldrb	r3, [r3, #9]
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	d10f      	bne.n	80100d2 <ams_drive+0x32>
       ams_outputs.enable_precharge_u8=0;
 80100b2:	4b16      	ldr	r3, [pc, #88]	; (801010c <ams_drive+0x6c>)
 80100b4:	2200      	movs	r2, #0
 80100b6:	709a      	strb	r2, [r3, #2]
       ams_outputs.enable_AIR_plus_u8=0;
 80100b8:	4b14      	ldr	r3, [pc, #80]	; (801010c <ams_drive+0x6c>)
 80100ba:	2200      	movs	r2, #0
 80100bc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
       ams_outputs.enable_AIR_minus_u8=0;
 80100c0:	4b12      	ldr	r3, [pc, #72]	; (801010c <ams_drive+0x6c>)
 80100c2:	2200      	movs	r2, #0
 80100c4:	705a      	strb	r2, [r3, #1]
       super_timer[0] = 0;
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	2200      	movs	r2, #0
 80100ca:	601a      	str	r2, [r3, #0]
       super_state[0] = AMS_IDLE_STATE;
 80100cc:	683b      	ldr	r3, [r7, #0]
 80100ce:	2202      	movs	r2, #2
 80100d0:	701a      	strb	r2, [r3, #0]
   }
   if(ams_inputs.error_u8) {
 80100d2:	4b0d      	ldr	r3, [pc, #52]	; (8010108 <ams_drive+0x68>)
 80100d4:	7edb      	ldrb	r3, [r3, #27]
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	d00f      	beq.n	80100fa <ams_drive+0x5a>
       ams_outputs.enable_precharge_u8=0;
 80100da:	4b0c      	ldr	r3, [pc, #48]	; (801010c <ams_drive+0x6c>)
 80100dc:	2200      	movs	r2, #0
 80100de:	709a      	strb	r2, [r3, #2]
       ams_outputs.enable_AIR_plus_u8=0;
 80100e0:	4b0a      	ldr	r3, [pc, #40]	; (801010c <ams_drive+0x6c>)
 80100e2:	2200      	movs	r2, #0
 80100e4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
       ams_outputs.enable_AIR_minus_u8=0;
 80100e8:	4b08      	ldr	r3, [pc, #32]	; (801010c <ams_drive+0x6c>)
 80100ea:	2200      	movs	r2, #0
 80100ec:	705a      	strb	r2, [r3, #1]
       super_timer[0] = 0;
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	2200      	movs	r2, #0
 80100f2:	601a      	str	r2, [r3, #0]
       super_state[0] = AMS_ERROR_STATE;
 80100f4:	683b      	ldr	r3, [r7, #0]
 80100f6:	2206      	movs	r2, #6
 80100f8:	701a      	strb	r2, [r3, #0]
   }

}
 80100fa:	bf00      	nop
 80100fc:	370c      	adds	r7, #12
 80100fe:	46bd      	mov	sp, r7
 8010100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010104:	4770      	bx	lr
 8010106:	bf00      	nop
 8010108:	2001b6a8 	.word	0x2001b6a8
 801010c:	2001b6ec 	.word	0x2001b6ec

08010110 <ams_error>:
void ams_error(uint32_t* super_timer, uint8_t* super_state) {
 8010110:	b480      	push	{r7}
 8010112:	b083      	sub	sp, #12
 8010114:	af00      	add	r7, sp, #0
 8010116:	6078      	str	r0, [r7, #4]
 8010118:	6039      	str	r1, [r7, #0]
   if(1) {
       ams_outputs.enable_precharge_u8=0;
 801011a:	4b0d      	ldr	r3, [pc, #52]	; (8010150 <ams_error+0x40>)
 801011c:	2200      	movs	r2, #0
 801011e:	709a      	strb	r2, [r3, #2]
       ams_outputs.enable_AIR_plus_u8=0;
 8010120:	4b0b      	ldr	r3, [pc, #44]	; (8010150 <ams_error+0x40>)
 8010122:	2200      	movs	r2, #0
 8010124:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
       ams_outputs.enable_AIR_minus_u8=0;
 8010128:	4b09      	ldr	r3, [pc, #36]	; (8010150 <ams_error+0x40>)
 801012a:	2200      	movs	r2, #0
 801012c:	705a      	strb	r2, [r3, #1]
   }
   if(!ams_inputs.error_u8) {
 801012e:	4b09      	ldr	r3, [pc, #36]	; (8010154 <ams_error+0x44>)
 8010130:	7edb      	ldrb	r3, [r3, #27]
 8010132:	2b00      	cmp	r3, #0
 8010134:	d105      	bne.n	8010142 <ams_error+0x32>
       super_timer[0] = 0;
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	2200      	movs	r2, #0
 801013a:	601a      	str	r2, [r3, #0]
       super_state[0] = AMS_IDLE_STATE;
 801013c:	683b      	ldr	r3, [r7, #0]
 801013e:	2202      	movs	r2, #2
 8010140:	701a      	strb	r2, [r3, #0]
   }

}
 8010142:	bf00      	nop
 8010144:	370c      	adds	r7, #12
 8010146:	46bd      	mov	sp, r7
 8010148:	f85d 7b04 	ldr.w	r7, [sp], #4
 801014c:	4770      	bx	lr
 801014e:	bf00      	nop
 8010150:	2001b6ec 	.word	0x2001b6ec
 8010154:	2001b6a8 	.word	0x2001b6a8

08010158 <ams_precharge_charge_0>:
void ams_precharge_charge_0(uint32_t* super_timer, uint8_t* super_state) {
 8010158:	b480      	push	{r7}
 801015a:	b083      	sub	sp, #12
 801015c:	af00      	add	r7, sp, #0
 801015e:	6078      	str	r0, [r7, #4]
 8010160:	6039      	str	r1, [r7, #0]

}
 8010162:	bf00      	nop
 8010164:	370c      	adds	r7, #12
 8010166:	46bd      	mov	sp, r7
 8010168:	f85d 7b04 	ldr.w	r7, [sp], #4
 801016c:	4770      	bx	lr
	...

08010170 <ams_precharge_charge_start_charger>:
void ams_precharge_charge_start_charger(uint32_t* super_timer, uint8_t* super_state) {
 8010170:	b580      	push	{r7, lr}
 8010172:	b082      	sub	sp, #8
 8010174:	af00      	add	r7, sp, #0
 8010176:	6078      	str	r0, [r7, #4]
 8010178:	6039      	str	r1, [r7, #0]
   static uint32_t timer = 0;
   timer++;
 801017a:	4b19      	ldr	r3, [pc, #100]	; (80101e0 <ams_precharge_charge_start_charger+0x70>)
 801017c:	681b      	ldr	r3, [r3, #0]
 801017e:	3301      	adds	r3, #1
 8010180:	4a17      	ldr	r2, [pc, #92]	; (80101e0 <ams_precharge_charge_start_charger+0x70>)
 8010182:	6013      	str	r3, [r2, #0]
   if (super_timer[0] == 0) {
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	681b      	ldr	r3, [r3, #0]
 8010188:	2b00      	cmp	r3, #0
 801018a:	d102      	bne.n	8010192 <ams_precharge_charge_start_charger+0x22>
       timer = 0;
 801018c:	4b14      	ldr	r3, [pc, #80]	; (80101e0 <ams_precharge_charge_start_charger+0x70>)
 801018e:	2200      	movs	r2, #0
 8010190:	601a      	str	r2, [r3, #0]
   }

   if(before(&timer,10)&&(ams_inputs.charger_is_live_u8)) {
 8010192:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8010196:	4812      	ldr	r0, [pc, #72]	; (80101e0 <ams_precharge_charge_start_charger+0x70>)
 8010198:	f7ff fc82 	bl	800faa0 <before>
 801019c:	4603      	mov	r3, r0
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d00c      	beq.n	80101bc <ams_precharge_charge_start_charger+0x4c>
 80101a2:	4b10      	ldr	r3, [pc, #64]	; (80101e4 <ams_precharge_charge_start_charger+0x74>)
 80101a4:	7f1b      	ldrb	r3, [r3, #28]
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d008      	beq.n	80101bc <ams_precharge_charge_start_charger+0x4c>
       ams_outputs.enable_AIR_minus_u8=1;
 80101aa:	4b0f      	ldr	r3, [pc, #60]	; (80101e8 <ams_precharge_charge_start_charger+0x78>)
 80101ac:	2201      	movs	r2, #1
 80101ae:	705a      	strb	r2, [r3, #1]
       super_timer[0] = 0;
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	2200      	movs	r2, #0
 80101b4:	601a      	str	r2, [r3, #0]
       super_state[0] = AMS_PRECHARGE_CHARGE_CLOSE_AIR_MINUS_STATE;
 80101b6:	683b      	ldr	r3, [r7, #0]
 80101b8:	2202      	movs	r2, #2
 80101ba:	701a      	strb	r2, [r3, #0]
   }
   if(after(&timer,10)) {
 80101bc:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80101c0:	4807      	ldr	r0, [pc, #28]	; (80101e0 <ams_precharge_charge_start_charger+0x70>)
 80101c2:	f7ff fc45 	bl	800fa50 <after>
 80101c6:	4603      	mov	r3, r0
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	d005      	beq.n	80101d8 <ams_precharge_charge_start_charger+0x68>
       super_timer[0] = 0;
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	2200      	movs	r2, #0
 80101d0:	601a      	str	r2, [r3, #0]
       super_state[0] = AMS_PRECHARGE_CHARGE_ERROR_STATE;
 80101d2:	683b      	ldr	r3, [r7, #0]
 80101d4:	2203      	movs	r2, #3
 80101d6:	701a      	strb	r2, [r3, #0]
   }

}
 80101d8:	bf00      	nop
 80101da:	3708      	adds	r7, #8
 80101dc:	46bd      	mov	sp, r7
 80101de:	bd80      	pop	{r7, pc}
 80101e0:	20001780 	.word	0x20001780
 80101e4:	2001b6a8 	.word	0x2001b6a8
 80101e8:	2001b6ec 	.word	0x2001b6ec

080101ec <ams_precharge_charge_close_air_minus>:
void ams_precharge_charge_close_air_minus(uint32_t* super_timer, uint8_t* super_state) {
 80101ec:	b580      	push	{r7, lr}
 80101ee:	b082      	sub	sp, #8
 80101f0:	af00      	add	r7, sp, #0
 80101f2:	6078      	str	r0, [r7, #4]
 80101f4:	6039      	str	r1, [r7, #0]
   static uint32_t timer = 0;
   timer++;
 80101f6:	4b19      	ldr	r3, [pc, #100]	; (801025c <ams_precharge_charge_close_air_minus+0x70>)
 80101f8:	681b      	ldr	r3, [r3, #0]
 80101fa:	3301      	adds	r3, #1
 80101fc:	4a17      	ldr	r2, [pc, #92]	; (801025c <ams_precharge_charge_close_air_minus+0x70>)
 80101fe:	6013      	str	r3, [r2, #0]
   if (super_timer[0] == 0) {
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	681b      	ldr	r3, [r3, #0]
 8010204:	2b00      	cmp	r3, #0
 8010206:	d102      	bne.n	801020e <ams_precharge_charge_close_air_minus+0x22>
       timer = 0;
 8010208:	4b14      	ldr	r3, [pc, #80]	; (801025c <ams_precharge_charge_close_air_minus+0x70>)
 801020a:	2200      	movs	r2, #0
 801020c:	601a      	str	r2, [r3, #0]
   }

   if(before(&timer,2)&&(ams_inputs.AIR_minus_closed_u8==1)) {
 801020e:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8010212:	4812      	ldr	r0, [pc, #72]	; (801025c <ams_precharge_charge_close_air_minus+0x70>)
 8010214:	f7ff fc44 	bl	800faa0 <before>
 8010218:	4603      	mov	r3, r0
 801021a:	2b00      	cmp	r3, #0
 801021c:	d00c      	beq.n	8010238 <ams_precharge_charge_close_air_minus+0x4c>
 801021e:	4b10      	ldr	r3, [pc, #64]	; (8010260 <ams_precharge_charge_close_air_minus+0x74>)
 8010220:	7a1b      	ldrb	r3, [r3, #8]
 8010222:	2b01      	cmp	r3, #1
 8010224:	d108      	bne.n	8010238 <ams_precharge_charge_close_air_minus+0x4c>
       ams_outputs.enable_precharge_u8=1;
 8010226:	4b0f      	ldr	r3, [pc, #60]	; (8010264 <ams_precharge_charge_close_air_minus+0x78>)
 8010228:	2201      	movs	r2, #1
 801022a:	709a      	strb	r2, [r3, #2]
       super_timer[0] = 0;
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	2200      	movs	r2, #0
 8010230:	601a      	str	r2, [r3, #0]
       super_state[0] = AMS_PRECHARGE_CHARGE_CLOSE_PRECHARGE_STATE;
 8010232:	683b      	ldr	r3, [r7, #0]
 8010234:	2204      	movs	r2, #4
 8010236:	701a      	strb	r2, [r3, #0]
   }
   if(after(&timer,2)) {
 8010238:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 801023c:	4807      	ldr	r0, [pc, #28]	; (801025c <ams_precharge_charge_close_air_minus+0x70>)
 801023e:	f7ff fc07 	bl	800fa50 <after>
 8010242:	4603      	mov	r3, r0
 8010244:	2b00      	cmp	r3, #0
 8010246:	d005      	beq.n	8010254 <ams_precharge_charge_close_air_minus+0x68>
       super_timer[0] = 0;
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	2200      	movs	r2, #0
 801024c:	601a      	str	r2, [r3, #0]
       super_state[0] = AMS_PRECHARGE_CHARGE_ERROR_STATE;
 801024e:	683b      	ldr	r3, [r7, #0]
 8010250:	2203      	movs	r2, #3
 8010252:	701a      	strb	r2, [r3, #0]
   }

}
 8010254:	bf00      	nop
 8010256:	3708      	adds	r7, #8
 8010258:	46bd      	mov	sp, r7
 801025a:	bd80      	pop	{r7, pc}
 801025c:	20001784 	.word	0x20001784
 8010260:	2001b6a8 	.word	0x2001b6a8
 8010264:	2001b6ec 	.word	0x2001b6ec

08010268 <ams_precharge_charge_error>:
void ams_precharge_charge_error(uint32_t* super_timer, uint8_t* super_state) {
 8010268:	b480      	push	{r7}
 801026a:	b083      	sub	sp, #12
 801026c:	af00      	add	r7, sp, #0
 801026e:	6078      	str	r0, [r7, #4]
 8010270:	6039      	str	r1, [r7, #0]
   if(1) {
       ams_parameters.precharge_charge_error_u8=1;
 8010272:	4b04      	ldr	r3, [pc, #16]	; (8010284 <ams_precharge_charge_error+0x1c>)
 8010274:	2201      	movs	r2, #1
 8010276:	709a      	strb	r2, [r3, #2]
   }

}
 8010278:	bf00      	nop
 801027a:	370c      	adds	r7, #12
 801027c:	46bd      	mov	sp, r7
 801027e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010282:	4770      	bx	lr
 8010284:	2001b6e4 	.word	0x2001b6e4

08010288 <ams_precharge_charge_close_precharge>:
void ams_precharge_charge_close_precharge(uint32_t* super_timer, uint8_t* super_state) {
 8010288:	b580      	push	{r7, lr}
 801028a:	b082      	sub	sp, #8
 801028c:	af00      	add	r7, sp, #0
 801028e:	6078      	str	r0, [r7, #4]
 8010290:	6039      	str	r1, [r7, #0]
   static uint32_t timer = 0;
   timer++;
 8010292:	4b18      	ldr	r3, [pc, #96]	; (80102f4 <ams_precharge_charge_close_precharge+0x6c>)
 8010294:	681b      	ldr	r3, [r3, #0]
 8010296:	3301      	adds	r3, #1
 8010298:	4a16      	ldr	r2, [pc, #88]	; (80102f4 <ams_precharge_charge_close_precharge+0x6c>)
 801029a:	6013      	str	r3, [r2, #0]
   if (super_timer[0] == 0) {
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	681b      	ldr	r3, [r3, #0]
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	d102      	bne.n	80102aa <ams_precharge_charge_close_precharge+0x22>
       timer = 0;
 80102a4:	4b13      	ldr	r3, [pc, #76]	; (80102f4 <ams_precharge_charge_close_precharge+0x6c>)
 80102a6:	2200      	movs	r2, #0
 80102a8:	601a      	str	r2, [r3, #0]
   }

   if(before(&timer,2)&&(ams_inputs.precharge_closed_u8==1)) {
 80102aa:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80102ae:	4811      	ldr	r0, [pc, #68]	; (80102f4 <ams_precharge_charge_close_precharge+0x6c>)
 80102b0:	f7ff fbf6 	bl	800faa0 <before>
 80102b4:	4603      	mov	r3, r0
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d009      	beq.n	80102ce <ams_precharge_charge_close_precharge+0x46>
 80102ba:	4b0f      	ldr	r3, [pc, #60]	; (80102f8 <ams_precharge_charge_close_precharge+0x70>)
 80102bc:	7e5b      	ldrb	r3, [r3, #25]
 80102be:	2b01      	cmp	r3, #1
 80102c0:	d105      	bne.n	80102ce <ams_precharge_charge_close_precharge+0x46>
       super_timer[0] = 0;
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	2200      	movs	r2, #0
 80102c6:	601a      	str	r2, [r3, #0]
       super_state[0] = AMS_PRECHARGE_CHARGE_WAIT_STATE;
 80102c8:	683b      	ldr	r3, [r7, #0]
 80102ca:	2205      	movs	r2, #5
 80102cc:	701a      	strb	r2, [r3, #0]
   }
   if(after(&timer,2)) {
 80102ce:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80102d2:	4808      	ldr	r0, [pc, #32]	; (80102f4 <ams_precharge_charge_close_precharge+0x6c>)
 80102d4:	f7ff fbbc 	bl	800fa50 <after>
 80102d8:	4603      	mov	r3, r0
 80102da:	2b00      	cmp	r3, #0
 80102dc:	d005      	beq.n	80102ea <ams_precharge_charge_close_precharge+0x62>
       super_timer[0] = 0;
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	2200      	movs	r2, #0
 80102e2:	601a      	str	r2, [r3, #0]
       super_state[0] = AMS_PRECHARGE_CHARGE_ERROR_STATE;
 80102e4:	683b      	ldr	r3, [r7, #0]
 80102e6:	2203      	movs	r2, #3
 80102e8:	701a      	strb	r2, [r3, #0]
   }

}
 80102ea:	bf00      	nop
 80102ec:	3708      	adds	r7, #8
 80102ee:	46bd      	mov	sp, r7
 80102f0:	bd80      	pop	{r7, pc}
 80102f2:	bf00      	nop
 80102f4:	20001788 	.word	0x20001788
 80102f8:	2001b6a8 	.word	0x2001b6a8
 80102fc:	00000000 	.word	0x00000000

08010300 <ams_precharge_charge_wait>:
void ams_precharge_charge_wait(uint32_t* super_timer, uint8_t* super_state) {
 8010300:	b580      	push	{r7, lr}
 8010302:	b082      	sub	sp, #8
 8010304:	af00      	add	r7, sp, #0
 8010306:	6078      	str	r0, [r7, #4]
 8010308:	6039      	str	r1, [r7, #0]
   static uint32_t timer = 0;
   timer++;
 801030a:	4b29      	ldr	r3, [pc, #164]	; (80103b0 <ams_precharge_charge_wait+0xb0>)
 801030c:	681b      	ldr	r3, [r3, #0]
 801030e:	3301      	adds	r3, #1
 8010310:	4a27      	ldr	r2, [pc, #156]	; (80103b0 <ams_precharge_charge_wait+0xb0>)
 8010312:	6013      	str	r3, [r2, #0]
   if (super_timer[0] == 0) {
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	681b      	ldr	r3, [r3, #0]
 8010318:	2b00      	cmp	r3, #0
 801031a:	d102      	bne.n	8010322 <ams_precharge_charge_wait+0x22>
       timer = 0;
 801031c:	4b24      	ldr	r3, [pc, #144]	; (80103b0 <ams_precharge_charge_wait+0xb0>)
 801031e:	2200      	movs	r2, #0
 8010320:	601a      	str	r2, [r3, #0]
   }

   if(after(&timer,2)&&before(&timer,25)&&(0.95*ams_inputs.accumulator_voltage_f64<ams_inputs.vehicle_voltage_f64)) {
 8010322:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8010326:	4822      	ldr	r0, [pc, #136]	; (80103b0 <ams_precharge_charge_wait+0xb0>)
 8010328:	f7ff fb92 	bl	800fa50 <after>
 801032c:	4603      	mov	r3, r0
 801032e:	2b00      	cmp	r3, #0
 8010330:	d025      	beq.n	801037e <ams_precharge_charge_wait+0x7e>
 8010332:	eeb3 0a09 	vmov.f32	s0, #57	; 0x41c80000  25.0
 8010336:	481e      	ldr	r0, [pc, #120]	; (80103b0 <ams_precharge_charge_wait+0xb0>)
 8010338:	f7ff fbb2 	bl	800faa0 <before>
 801033c:	4603      	mov	r3, r0
 801033e:	2b00      	cmp	r3, #0
 8010340:	d01d      	beq.n	801037e <ams_precharge_charge_wait+0x7e>
 8010342:	4b1c      	ldr	r3, [pc, #112]	; (80103b4 <ams_precharge_charge_wait+0xb4>)
 8010344:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8010348:	a317      	add	r3, pc, #92	; (adr r3, 80103a8 <ams_precharge_charge_wait+0xa8>)
 801034a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801034e:	f7f0 f945 	bl	80005dc <__aeabi_dmul>
 8010352:	4602      	mov	r2, r0
 8010354:	460b      	mov	r3, r1
 8010356:	4610      	mov	r0, r2
 8010358:	4619      	mov	r1, r3
 801035a:	4b16      	ldr	r3, [pc, #88]	; (80103b4 <ams_precharge_charge_wait+0xb4>)
 801035c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8010360:	f7f0 fbae 	bl	8000ac0 <__aeabi_dcmplt>
 8010364:	4603      	mov	r3, r0
 8010366:	2b00      	cmp	r3, #0
 8010368:	d009      	beq.n	801037e <ams_precharge_charge_wait+0x7e>
       ams_outputs.enable_AIR_plus_u8=1;
 801036a:	4b13      	ldr	r3, [pc, #76]	; (80103b8 <ams_precharge_charge_wait+0xb8>)
 801036c:	2201      	movs	r2, #1
 801036e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
       super_timer[0] = 0;
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	2200      	movs	r2, #0
 8010376:	601a      	str	r2, [r3, #0]
       super_state[0] = AMS_PRECHARGE_CHARGE_CLOSE_AIR_PLUS_STATE;
 8010378:	683b      	ldr	r3, [r7, #0]
 801037a:	2206      	movs	r2, #6
 801037c:	701a      	strb	r2, [r3, #0]
   }
   if(after(&timer,25)) {
 801037e:	eeb3 0a09 	vmov.f32	s0, #57	; 0x41c80000  25.0
 8010382:	480b      	ldr	r0, [pc, #44]	; (80103b0 <ams_precharge_charge_wait+0xb0>)
 8010384:	f7ff fb64 	bl	800fa50 <after>
 8010388:	4603      	mov	r3, r0
 801038a:	2b00      	cmp	r3, #0
 801038c:	d005      	beq.n	801039a <ams_precharge_charge_wait+0x9a>
       super_timer[0] = 0;
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	2200      	movs	r2, #0
 8010392:	601a      	str	r2, [r3, #0]
       super_state[0] = AMS_PRECHARGE_CHARGE_ERROR_STATE;
 8010394:	683b      	ldr	r3, [r7, #0]
 8010396:	2203      	movs	r2, #3
 8010398:	701a      	strb	r2, [r3, #0]
   }

}
 801039a:	bf00      	nop
 801039c:	3708      	adds	r7, #8
 801039e:	46bd      	mov	sp, r7
 80103a0:	bd80      	pop	{r7, pc}
 80103a2:	bf00      	nop
 80103a4:	f3af 8000 	nop.w
 80103a8:	66666666 	.word	0x66666666
 80103ac:	3fee6666 	.word	0x3fee6666
 80103b0:	2000178c 	.word	0x2000178c
 80103b4:	2001b6a8 	.word	0x2001b6a8
 80103b8:	2001b6ec 	.word	0x2001b6ec

080103bc <ams_precharge_charge_close_air_plus>:
void ams_precharge_charge_close_air_plus(uint32_t* super_timer, uint8_t* super_state) {
 80103bc:	b580      	push	{r7, lr}
 80103be:	b082      	sub	sp, #8
 80103c0:	af00      	add	r7, sp, #0
 80103c2:	6078      	str	r0, [r7, #4]
 80103c4:	6039      	str	r1, [r7, #0]
   static uint32_t timer = 0;
   timer++;
 80103c6:	4b19      	ldr	r3, [pc, #100]	; (801042c <ams_precharge_charge_close_air_plus+0x70>)
 80103c8:	681b      	ldr	r3, [r3, #0]
 80103ca:	3301      	adds	r3, #1
 80103cc:	4a17      	ldr	r2, [pc, #92]	; (801042c <ams_precharge_charge_close_air_plus+0x70>)
 80103ce:	6013      	str	r3, [r2, #0]
   if (super_timer[0] == 0) {
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	681b      	ldr	r3, [r3, #0]
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d102      	bne.n	80103de <ams_precharge_charge_close_air_plus+0x22>
       timer = 0;
 80103d8:	4b14      	ldr	r3, [pc, #80]	; (801042c <ams_precharge_charge_close_air_plus+0x70>)
 80103da:	2200      	movs	r2, #0
 80103dc:	601a      	str	r2, [r3, #0]
   }

   if(before(&timer,2)&&(ams_inputs.AIR_plus_closed_u8==1)) {
 80103de:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80103e2:	4812      	ldr	r0, [pc, #72]	; (801042c <ams_precharge_charge_close_air_plus+0x70>)
 80103e4:	f7ff fb5c 	bl	800faa0 <before>
 80103e8:	4603      	mov	r3, r0
 80103ea:	2b00      	cmp	r3, #0
 80103ec:	d00c      	beq.n	8010408 <ams_precharge_charge_close_air_plus+0x4c>
 80103ee:	4b10      	ldr	r3, [pc, #64]	; (8010430 <ams_precharge_charge_close_air_plus+0x74>)
 80103f0:	7adb      	ldrb	r3, [r3, #11]
 80103f2:	2b01      	cmp	r3, #1
 80103f4:	d108      	bne.n	8010408 <ams_precharge_charge_close_air_plus+0x4c>
       ams_outputs.enable_precharge_u8=0;
 80103f6:	4b0f      	ldr	r3, [pc, #60]	; (8010434 <ams_precharge_charge_close_air_plus+0x78>)
 80103f8:	2200      	movs	r2, #0
 80103fa:	709a      	strb	r2, [r3, #2]
       super_timer[0] = 0;
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	2200      	movs	r2, #0
 8010400:	601a      	str	r2, [r3, #0]
       super_state[0] = AMS_PRECHARGE_CHARGE_OPEN_PRECHARGE_STATE;
 8010402:	683b      	ldr	r3, [r7, #0]
 8010404:	2207      	movs	r2, #7
 8010406:	701a      	strb	r2, [r3, #0]
   }
   if(after(&timer,2)) {
 8010408:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 801040c:	4807      	ldr	r0, [pc, #28]	; (801042c <ams_precharge_charge_close_air_plus+0x70>)
 801040e:	f7ff fb1f 	bl	800fa50 <after>
 8010412:	4603      	mov	r3, r0
 8010414:	2b00      	cmp	r3, #0
 8010416:	d005      	beq.n	8010424 <ams_precharge_charge_close_air_plus+0x68>
       super_timer[0] = 0;
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	2200      	movs	r2, #0
 801041c:	601a      	str	r2, [r3, #0]
       super_state[0] = AMS_PRECHARGE_CHARGE_ERROR_STATE;
 801041e:	683b      	ldr	r3, [r7, #0]
 8010420:	2203      	movs	r2, #3
 8010422:	701a      	strb	r2, [r3, #0]
   }

}
 8010424:	bf00      	nop
 8010426:	3708      	adds	r7, #8
 8010428:	46bd      	mov	sp, r7
 801042a:	bd80      	pop	{r7, pc}
 801042c:	20001790 	.word	0x20001790
 8010430:	2001b6a8 	.word	0x2001b6a8
 8010434:	2001b6ec 	.word	0x2001b6ec

08010438 <ams_precharge_charge_open_precharge>:
void ams_precharge_charge_open_precharge(uint32_t* super_timer, uint8_t* super_state) {
 8010438:	b580      	push	{r7, lr}
 801043a:	b082      	sub	sp, #8
 801043c:	af00      	add	r7, sp, #0
 801043e:	6078      	str	r0, [r7, #4]
 8010440:	6039      	str	r1, [r7, #0]
   static uint32_t timer = 0;
   timer++;
 8010442:	4b19      	ldr	r3, [pc, #100]	; (80104a8 <ams_precharge_charge_open_precharge+0x70>)
 8010444:	681b      	ldr	r3, [r3, #0]
 8010446:	3301      	adds	r3, #1
 8010448:	4a17      	ldr	r2, [pc, #92]	; (80104a8 <ams_precharge_charge_open_precharge+0x70>)
 801044a:	6013      	str	r3, [r2, #0]
   if (super_timer[0] == 0) {
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	681b      	ldr	r3, [r3, #0]
 8010450:	2b00      	cmp	r3, #0
 8010452:	d102      	bne.n	801045a <ams_precharge_charge_open_precharge+0x22>
       timer = 0;
 8010454:	4b14      	ldr	r3, [pc, #80]	; (80104a8 <ams_precharge_charge_open_precharge+0x70>)
 8010456:	2200      	movs	r2, #0
 8010458:	601a      	str	r2, [r3, #0]
   }

   if(before(&timer,2)&&(ams_inputs.precharge_closed_u8==1)) {
 801045a:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 801045e:	4812      	ldr	r0, [pc, #72]	; (80104a8 <ams_precharge_charge_open_precharge+0x70>)
 8010460:	f7ff fb1e 	bl	800faa0 <before>
 8010464:	4603      	mov	r3, r0
 8010466:	2b00      	cmp	r3, #0
 8010468:	d00c      	beq.n	8010484 <ams_precharge_charge_open_precharge+0x4c>
 801046a:	4b10      	ldr	r3, [pc, #64]	; (80104ac <ams_precharge_charge_open_precharge+0x74>)
 801046c:	7e5b      	ldrb	r3, [r3, #25]
 801046e:	2b01      	cmp	r3, #1
 8010470:	d108      	bne.n	8010484 <ams_precharge_charge_open_precharge+0x4c>
       ams_parameters.precharge_charge_complete_u8=1;
 8010472:	4b0f      	ldr	r3, [pc, #60]	; (80104b0 <ams_precharge_charge_open_precharge+0x78>)
 8010474:	2201      	movs	r2, #1
 8010476:	70da      	strb	r2, [r3, #3]
       super_timer[0] = 0;
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	2200      	movs	r2, #0
 801047c:	601a      	str	r2, [r3, #0]
       super_state[0] = AMS_PRECHARGE_CHARGE_EXIT_STATE;
 801047e:	683b      	ldr	r3, [r7, #0]
 8010480:	2208      	movs	r2, #8
 8010482:	701a      	strb	r2, [r3, #0]
   }
   if(after(&timer,2)) {
 8010484:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8010488:	4807      	ldr	r0, [pc, #28]	; (80104a8 <ams_precharge_charge_open_precharge+0x70>)
 801048a:	f7ff fae1 	bl	800fa50 <after>
 801048e:	4603      	mov	r3, r0
 8010490:	2b00      	cmp	r3, #0
 8010492:	d005      	beq.n	80104a0 <ams_precharge_charge_open_precharge+0x68>
       super_timer[0] = 0;
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	2200      	movs	r2, #0
 8010498:	601a      	str	r2, [r3, #0]
       super_state[0] = AMS_PRECHARGE_CHARGE_ERROR_STATE;
 801049a:	683b      	ldr	r3, [r7, #0]
 801049c:	2203      	movs	r2, #3
 801049e:	701a      	strb	r2, [r3, #0]
   }

}
 80104a0:	bf00      	nop
 80104a2:	3708      	adds	r7, #8
 80104a4:	46bd      	mov	sp, r7
 80104a6:	bd80      	pop	{r7, pc}
 80104a8:	20001794 	.word	0x20001794
 80104ac:	2001b6a8 	.word	0x2001b6a8
 80104b0:	2001b6e4 	.word	0x2001b6e4

080104b4 <ams_precharge_charge_exit>:
void ams_precharge_charge_exit(uint32_t* super_timer, uint8_t* super_state) {
 80104b4:	b480      	push	{r7}
 80104b6:	b083      	sub	sp, #12
 80104b8:	af00      	add	r7, sp, #0
 80104ba:	6078      	str	r0, [r7, #4]
 80104bc:	6039      	str	r1, [r7, #0]

}
 80104be:	bf00      	nop
 80104c0:	370c      	adds	r7, #12
 80104c2:	46bd      	mov	sp, r7
 80104c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104c8:	4770      	bx	lr
	...

080104cc <ams_precharge_charge>:
void ams_precharge_charge(uint32_t* super_timer, uint8_t* super_state) {
 80104cc:	b580      	push	{r7, lr}
 80104ce:	b082      	sub	sp, #8
 80104d0:	af00      	add	r7, sp, #0
 80104d2:	6078      	str	r0, [r7, #4]
 80104d4:	6039      	str	r1, [r7, #0]
   static ams_precharge_charge_t state = AMS_PRECHARGE_CHARGE_0_STATE;
   static uint32_t timer = 0;
   timer++;
 80104d6:	4b32      	ldr	r3, [pc, #200]	; (80105a0 <ams_precharge_charge+0xd4>)
 80104d8:	681b      	ldr	r3, [r3, #0]
 80104da:	3301      	adds	r3, #1
 80104dc:	4a30      	ldr	r2, [pc, #192]	; (80105a0 <ams_precharge_charge+0xd4>)
 80104de:	6013      	str	r3, [r2, #0]
   if (super_timer[0] == 0) {
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	681b      	ldr	r3, [r3, #0]
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	d105      	bne.n	80104f4 <ams_precharge_charge+0x28>
       timer = 0;
 80104e8:	4b2d      	ldr	r3, [pc, #180]	; (80105a0 <ams_precharge_charge+0xd4>)
 80104ea:	2200      	movs	r2, #0
 80104ec:	601a      	str	r2, [r3, #0]
       state = AMS_PRECHARGE_CHARGE_0_STATE;
 80104ee:	4b2d      	ldr	r3, [pc, #180]	; (80105a4 <ams_precharge_charge+0xd8>)
 80104f0:	2200      	movs	r2, #0
 80104f2:	701a      	strb	r2, [r3, #0]
   }

   switch(state) {
 80104f4:	4b2b      	ldr	r3, [pc, #172]	; (80105a4 <ams_precharge_charge+0xd8>)
 80104f6:	781b      	ldrb	r3, [r3, #0]
 80104f8:	2b08      	cmp	r3, #8
 80104fa:	d842      	bhi.n	8010582 <ams_precharge_charge+0xb6>
 80104fc:	a201      	add	r2, pc, #4	; (adr r2, 8010504 <ams_precharge_charge+0x38>)
 80104fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010502:	bf00      	nop
 8010504:	08010529 	.word	0x08010529
 8010508:	08010533 	.word	0x08010533
 801050c:	0801053d 	.word	0x0801053d
 8010510:	08010547 	.word	0x08010547
 8010514:	08010551 	.word	0x08010551
 8010518:	0801055b 	.word	0x0801055b
 801051c:	08010565 	.word	0x08010565
 8010520:	0801056f 	.word	0x0801056f
 8010524:	08010579 	.word	0x08010579
       case AMS_PRECHARGE_CHARGE_0_STATE:
           ams_precharge_charge_0(&timer, &state);
 8010528:	491e      	ldr	r1, [pc, #120]	; (80105a4 <ams_precharge_charge+0xd8>)
 801052a:	481d      	ldr	r0, [pc, #116]	; (80105a0 <ams_precharge_charge+0xd4>)
 801052c:	f7ff fe14 	bl	8010158 <ams_precharge_charge_0>
           break;
 8010530:	e027      	b.n	8010582 <ams_precharge_charge+0xb6>
       case AMS_PRECHARGE_CHARGE_START_CHARGER_STATE:
           ams_precharge_charge_start_charger(&timer, &state);
 8010532:	491c      	ldr	r1, [pc, #112]	; (80105a4 <ams_precharge_charge+0xd8>)
 8010534:	481a      	ldr	r0, [pc, #104]	; (80105a0 <ams_precharge_charge+0xd4>)
 8010536:	f7ff fe1b 	bl	8010170 <ams_precharge_charge_start_charger>
           break;
 801053a:	e022      	b.n	8010582 <ams_precharge_charge+0xb6>
       case AMS_PRECHARGE_CHARGE_CLOSE_AIR_MINUS_STATE:
           ams_precharge_charge_close_air_minus(&timer, &state);
 801053c:	4919      	ldr	r1, [pc, #100]	; (80105a4 <ams_precharge_charge+0xd8>)
 801053e:	4818      	ldr	r0, [pc, #96]	; (80105a0 <ams_precharge_charge+0xd4>)
 8010540:	f7ff fe54 	bl	80101ec <ams_precharge_charge_close_air_minus>
           break;
 8010544:	e01d      	b.n	8010582 <ams_precharge_charge+0xb6>
       case AMS_PRECHARGE_CHARGE_ERROR_STATE:
           ams_precharge_charge_error(&timer, &state);
 8010546:	4917      	ldr	r1, [pc, #92]	; (80105a4 <ams_precharge_charge+0xd8>)
 8010548:	4815      	ldr	r0, [pc, #84]	; (80105a0 <ams_precharge_charge+0xd4>)
 801054a:	f7ff fe8d 	bl	8010268 <ams_precharge_charge_error>
           break;
 801054e:	e018      	b.n	8010582 <ams_precharge_charge+0xb6>
       case AMS_PRECHARGE_CHARGE_CLOSE_PRECHARGE_STATE:
           ams_precharge_charge_close_precharge(&timer, &state);
 8010550:	4914      	ldr	r1, [pc, #80]	; (80105a4 <ams_precharge_charge+0xd8>)
 8010552:	4813      	ldr	r0, [pc, #76]	; (80105a0 <ams_precharge_charge+0xd4>)
 8010554:	f7ff fe98 	bl	8010288 <ams_precharge_charge_close_precharge>
           break;
 8010558:	e013      	b.n	8010582 <ams_precharge_charge+0xb6>
       case AMS_PRECHARGE_CHARGE_WAIT_STATE:
           ams_precharge_charge_wait(&timer, &state);
 801055a:	4912      	ldr	r1, [pc, #72]	; (80105a4 <ams_precharge_charge+0xd8>)
 801055c:	4810      	ldr	r0, [pc, #64]	; (80105a0 <ams_precharge_charge+0xd4>)
 801055e:	f7ff fecf 	bl	8010300 <ams_precharge_charge_wait>
           break;
 8010562:	e00e      	b.n	8010582 <ams_precharge_charge+0xb6>
       case AMS_PRECHARGE_CHARGE_CLOSE_AIR_PLUS_STATE:
           ams_precharge_charge_close_air_plus(&timer, &state);
 8010564:	490f      	ldr	r1, [pc, #60]	; (80105a4 <ams_precharge_charge+0xd8>)
 8010566:	480e      	ldr	r0, [pc, #56]	; (80105a0 <ams_precharge_charge+0xd4>)
 8010568:	f7ff ff28 	bl	80103bc <ams_precharge_charge_close_air_plus>
           break;
 801056c:	e009      	b.n	8010582 <ams_precharge_charge+0xb6>
       case AMS_PRECHARGE_CHARGE_OPEN_PRECHARGE_STATE:
           ams_precharge_charge_open_precharge(&timer, &state);
 801056e:	490d      	ldr	r1, [pc, #52]	; (80105a4 <ams_precharge_charge+0xd8>)
 8010570:	480b      	ldr	r0, [pc, #44]	; (80105a0 <ams_precharge_charge+0xd4>)
 8010572:	f7ff ff61 	bl	8010438 <ams_precharge_charge_open_precharge>
           break;
 8010576:	e004      	b.n	8010582 <ams_precharge_charge+0xb6>
       case AMS_PRECHARGE_CHARGE_EXIT_STATE:
           ams_precharge_charge_exit(&timer, &state);
 8010578:	490a      	ldr	r1, [pc, #40]	; (80105a4 <ams_precharge_charge+0xd8>)
 801057a:	4809      	ldr	r0, [pc, #36]	; (80105a0 <ams_precharge_charge+0xd4>)
 801057c:	f7ff ff9a 	bl	80104b4 <ams_precharge_charge_exit>
           break;
 8010580:	bf00      	nop
   }

   if(ams_parameters.precharge_charge_complete_u8) {
 8010582:	4b09      	ldr	r3, [pc, #36]	; (80105a8 <ams_precharge_charge+0xdc>)
 8010584:	78db      	ldrb	r3, [r3, #3]
 8010586:	2b00      	cmp	r3, #0
 8010588:	d005      	beq.n	8010596 <ams_precharge_charge+0xca>
       super_timer[0] = 0;
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	2200      	movs	r2, #0
 801058e:	601a      	str	r2, [r3, #0]
       super_state[0] = AMS_CHARGE_STATE;
 8010590:	683b      	ldr	r3, [r7, #0]
 8010592:	2208      	movs	r2, #8
 8010594:	701a      	strb	r2, [r3, #0]
   }

}
 8010596:	bf00      	nop
 8010598:	3708      	adds	r7, #8
 801059a:	46bd      	mov	sp, r7
 801059c:	bd80      	pop	{r7, pc}
 801059e:	bf00      	nop
 80105a0:	20001798 	.word	0x20001798
 80105a4:	2000179c 	.word	0x2000179c
 80105a8:	2001b6e4 	.word	0x2001b6e4
 80105ac:	00000000 	.word	0x00000000

080105b0 <ams_charge>:
void ams_charge(uint32_t* super_timer, uint8_t* super_state) {
 80105b0:	b580      	push	{r7, lr}
 80105b2:	b082      	sub	sp, #8
 80105b4:	af00      	add	r7, sp, #0
 80105b6:	6078      	str	r0, [r7, #4]
 80105b8:	6039      	str	r1, [r7, #0]
   if((ams_inputs.charge_u8==0)||(0.995*ams_inputs.sought_voltage_f64<ams_inputs.accumulator_voltage_f64)) {
 80105ba:	4b25      	ldr	r3, [pc, #148]	; (8010650 <ams_charge+0xa0>)
 80105bc:	7e1b      	ldrb	r3, [r3, #24]
 80105be:	2b00      	cmp	r3, #0
 80105c0:	d013      	beq.n	80105ea <ams_charge+0x3a>
 80105c2:	4b23      	ldr	r3, [pc, #140]	; (8010650 <ams_charge+0xa0>)
 80105c4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80105c8:	a31f      	add	r3, pc, #124	; (adr r3, 8010648 <ams_charge+0x98>)
 80105ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105ce:	f7f0 f805 	bl	80005dc <__aeabi_dmul>
 80105d2:	4602      	mov	r2, r0
 80105d4:	460b      	mov	r3, r1
 80105d6:	4610      	mov	r0, r2
 80105d8:	4619      	mov	r1, r3
 80105da:	4b1d      	ldr	r3, [pc, #116]	; (8010650 <ams_charge+0xa0>)
 80105dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80105e0:	f7f0 fa6e 	bl	8000ac0 <__aeabi_dcmplt>
 80105e4:	4603      	mov	r3, r0
 80105e6:	2b00      	cmp	r3, #0
 80105e8:	d012      	beq.n	8010610 <ams_charge+0x60>
       ams_outputs.enable_charger_u8=0;
 80105ea:	4b1a      	ldr	r3, [pc, #104]	; (8010654 <ams_charge+0xa4>)
 80105ec:	2200      	movs	r2, #0
 80105ee:	711a      	strb	r2, [r3, #4]
       ams_outputs.enable_precharge_u8=0;
 80105f0:	4b18      	ldr	r3, [pc, #96]	; (8010654 <ams_charge+0xa4>)
 80105f2:	2200      	movs	r2, #0
 80105f4:	709a      	strb	r2, [r3, #2]
       ams_outputs.enable_AIR_plus_u8=0;
 80105f6:	4b17      	ldr	r3, [pc, #92]	; (8010654 <ams_charge+0xa4>)
 80105f8:	2200      	movs	r2, #0
 80105fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
       ams_outputs.enable_AIR_minus_u8=0;
 80105fe:	4b15      	ldr	r3, [pc, #84]	; (8010654 <ams_charge+0xa4>)
 8010600:	2200      	movs	r2, #0
 8010602:	705a      	strb	r2, [r3, #1]
       super_timer[0] = 0;
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	2200      	movs	r2, #0
 8010608:	601a      	str	r2, [r3, #0]
       super_state[0] = AMS_IDLE_STATE;
 801060a:	683b      	ldr	r3, [r7, #0]
 801060c:	2202      	movs	r2, #2
 801060e:	701a      	strb	r2, [r3, #0]
   }
   if(ams_inputs.error_u8||ams_parameters.precharge_charge_error_u8) {
 8010610:	4b0f      	ldr	r3, [pc, #60]	; (8010650 <ams_charge+0xa0>)
 8010612:	7edb      	ldrb	r3, [r3, #27]
 8010614:	2b00      	cmp	r3, #0
 8010616:	d103      	bne.n	8010620 <ams_charge+0x70>
 8010618:	4b0f      	ldr	r3, [pc, #60]	; (8010658 <ams_charge+0xa8>)
 801061a:	789b      	ldrb	r3, [r3, #2]
 801061c:	2b00      	cmp	r3, #0
 801061e:	d00f      	beq.n	8010640 <ams_charge+0x90>
       ams_outputs.enable_precharge_u8=0;
 8010620:	4b0c      	ldr	r3, [pc, #48]	; (8010654 <ams_charge+0xa4>)
 8010622:	2200      	movs	r2, #0
 8010624:	709a      	strb	r2, [r3, #2]
       ams_outputs.enable_AIR_plus_u8=0;
 8010626:	4b0b      	ldr	r3, [pc, #44]	; (8010654 <ams_charge+0xa4>)
 8010628:	2200      	movs	r2, #0
 801062a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
       ams_outputs.enable_AIR_minus_u8=0;
 801062e:	4b09      	ldr	r3, [pc, #36]	; (8010654 <ams_charge+0xa4>)
 8010630:	2200      	movs	r2, #0
 8010632:	705a      	strb	r2, [r3, #1]
       super_timer[0] = 0;
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	2200      	movs	r2, #0
 8010638:	601a      	str	r2, [r3, #0]
       super_state[0] = AMS_ERROR_STATE;
 801063a:	683b      	ldr	r3, [r7, #0]
 801063c:	2206      	movs	r2, #6
 801063e:	701a      	strb	r2, [r3, #0]
   }

}
 8010640:	bf00      	nop
 8010642:	3708      	adds	r7, #8
 8010644:	46bd      	mov	sp, r7
 8010646:	bd80      	pop	{r7, pc}
 8010648:	3d70a3d7 	.word	0x3d70a3d7
 801064c:	3fefd70a 	.word	0x3fefd70a
 8010650:	2001b6a8 	.word	0x2001b6a8
 8010654:	2001b6ec 	.word	0x2001b6ec
 8010658:	2001b6e4 	.word	0x2001b6e4

0801065c <ams>:
void ams() {
 801065c:	b580      	push	{r7, lr}
 801065e:	af00      	add	r7, sp, #0
   static ams_t state = AMS_0_STATE;
   static uint32_t timer = 0;
   timer++;
 8010660:	4b26      	ldr	r3, [pc, #152]	; (80106fc <ams+0xa0>)
 8010662:	681b      	ldr	r3, [r3, #0]
 8010664:	3301      	adds	r3, #1
 8010666:	4a25      	ldr	r2, [pc, #148]	; (80106fc <ams+0xa0>)
 8010668:	6013      	str	r3, [r2, #0]
   switch(state) {
 801066a:	4b25      	ldr	r3, [pc, #148]	; (8010700 <ams+0xa4>)
 801066c:	781b      	ldrb	r3, [r3, #0]
 801066e:	2b08      	cmp	r3, #8
 8010670:	d841      	bhi.n	80106f6 <ams+0x9a>
 8010672:	a201      	add	r2, pc, #4	; (adr r2, 8010678 <ams+0x1c>)
 8010674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010678:	0801069d 	.word	0x0801069d
 801067c:	080106a7 	.word	0x080106a7
 8010680:	080106b1 	.word	0x080106b1
 8010684:	080106bb 	.word	0x080106bb
 8010688:	080106c5 	.word	0x080106c5
 801068c:	080106cf 	.word	0x080106cf
 8010690:	080106d9 	.word	0x080106d9
 8010694:	080106e3 	.word	0x080106e3
 8010698:	080106ed 	.word	0x080106ed
       case AMS_0_STATE:
           ams_0(&timer, &state);
 801069c:	4918      	ldr	r1, [pc, #96]	; (8010700 <ams+0xa4>)
 801069e:	4817      	ldr	r0, [pc, #92]	; (80106fc <ams+0xa0>)
 80106a0:	f7ff fa30 	bl	800fb04 <ams_0>
           break;
 80106a4:	e027      	b.n	80106f6 <ams+0x9a>
       case AMS_ENTRY_STATE:
           ams_entry(&timer, &state);
 80106a6:	4916      	ldr	r1, [pc, #88]	; (8010700 <ams+0xa4>)
 80106a8:	4814      	ldr	r0, [pc, #80]	; (80106fc <ams+0xa0>)
 80106aa:	f7ff fa3d 	bl	800fb28 <ams_entry>
           break;
 80106ae:	e022      	b.n	80106f6 <ams+0x9a>
       case AMS_IDLE_STATE:
           ams_idle(&timer, &state);
 80106b0:	4913      	ldr	r1, [pc, #76]	; (8010700 <ams+0xa4>)
 80106b2:	4812      	ldr	r0, [pc, #72]	; (80106fc <ams+0xa0>)
 80106b4:	f7ff fa76 	bl	800fba4 <ams_idle>
           break;
 80106b8:	e01d      	b.n	80106f6 <ams+0x9a>
       case AMS_BALANCE_STATE:
           ams_balance(&timer, &state);
 80106ba:	4911      	ldr	r1, [pc, #68]	; (8010700 <ams+0xa4>)
 80106bc:	480f      	ldr	r0, [pc, #60]	; (80106fc <ams+0xa0>)
 80106be:	f7ff faab 	bl	800fc18 <ams_balance>
           break;
 80106c2:	e018      	b.n	80106f6 <ams+0x9a>
       case AMS_PRECHARGE_DRIVE_STATE:
           ams_precharge_drive(&timer, &state);
 80106c4:	490e      	ldr	r1, [pc, #56]	; (8010700 <ams+0xa4>)
 80106c6:	480d      	ldr	r0, [pc, #52]	; (80106fc <ams+0xa0>)
 80106c8:	f7ff fc6c 	bl	800ffa4 <ams_precharge_drive>
           break;
 80106cc:	e013      	b.n	80106f6 <ams+0x9a>
       case AMS_DRIVE_STATE:
           ams_drive(&timer, &state);
 80106ce:	490c      	ldr	r1, [pc, #48]	; (8010700 <ams+0xa4>)
 80106d0:	480a      	ldr	r0, [pc, #40]	; (80106fc <ams+0xa0>)
 80106d2:	f7ff fce5 	bl	80100a0 <ams_drive>
           break;
 80106d6:	e00e      	b.n	80106f6 <ams+0x9a>
       case AMS_ERROR_STATE:
           ams_error(&timer, &state);
 80106d8:	4909      	ldr	r1, [pc, #36]	; (8010700 <ams+0xa4>)
 80106da:	4808      	ldr	r0, [pc, #32]	; (80106fc <ams+0xa0>)
 80106dc:	f7ff fd18 	bl	8010110 <ams_error>
           break;
 80106e0:	e009      	b.n	80106f6 <ams+0x9a>
       case AMS_PRECHARGE_CHARGE_STATE:
           ams_precharge_charge(&timer, &state);
 80106e2:	4907      	ldr	r1, [pc, #28]	; (8010700 <ams+0xa4>)
 80106e4:	4805      	ldr	r0, [pc, #20]	; (80106fc <ams+0xa0>)
 80106e6:	f7ff fef1 	bl	80104cc <ams_precharge_charge>
           break;
 80106ea:	e004      	b.n	80106f6 <ams+0x9a>
       case AMS_CHARGE_STATE:
           ams_charge(&timer, &state);
 80106ec:	4904      	ldr	r1, [pc, #16]	; (8010700 <ams+0xa4>)
 80106ee:	4803      	ldr	r0, [pc, #12]	; (80106fc <ams+0xa0>)
 80106f0:	f7ff ff5e 	bl	80105b0 <ams_charge>
           break;
 80106f4:	bf00      	nop
   }


}
 80106f6:	bf00      	nop
 80106f8:	bd80      	pop	{r7, pc}
 80106fa:	bf00      	nop
 80106fc:	200017a0 	.word	0x200017a0
 8010700:	200017a4 	.word	0x200017a4

08010704 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8010704:	f8df d034 	ldr.w	sp, [pc, #52]	; 801073c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8010708:	480d      	ldr	r0, [pc, #52]	; (8010740 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 801070a:	490e      	ldr	r1, [pc, #56]	; (8010744 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 801070c:	4a0e      	ldr	r2, [pc, #56]	; (8010748 <LoopFillZerobss+0x1e>)
  movs r3, #0
 801070e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8010710:	e002      	b.n	8010718 <LoopCopyDataInit>

08010712 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8010712:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8010714:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8010716:	3304      	adds	r3, #4

08010718 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8010718:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 801071a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 801071c:	d3f9      	bcc.n	8010712 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 801071e:	4a0b      	ldr	r2, [pc, #44]	; (801074c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8010720:	4c0b      	ldr	r4, [pc, #44]	; (8010750 <LoopFillZerobss+0x26>)
  movs r3, #0
 8010722:	2300      	movs	r3, #0
  b LoopFillZerobss
 8010724:	e001      	b.n	801072a <LoopFillZerobss>

08010726 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8010726:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8010728:	3204      	adds	r2, #4

0801072a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 801072a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 801072c:	d3fb      	bcc.n	8010726 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 801072e:	f7f3 fef3 	bl	8004518 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8010732:	f009 fd57 	bl	801a1e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8010736:	f7f2 fac3 	bl	8002cc0 <main>
  bx  lr    
 801073a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 801073c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8010740:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8010744:	2000142c 	.word	0x2000142c
  ldr r2, =_sidata
 8010748:	0801b6b8 	.word	0x0801b6b8
  ldr r2, =_sbss
 801074c:	20001430 	.word	0x20001430
  ldr r4, =_ebss
 8010750:	2001ea1c 	.word	0x2001ea1c

08010754 <CAN1_SCE_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8010754:	e7fe      	b.n	8010754 <CAN1_SCE_IRQHandler>
	...

08010758 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8010758:	b580      	push	{r7, lr}
 801075a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 801075c:	4b0e      	ldr	r3, [pc, #56]	; (8010798 <HAL_Init+0x40>)
 801075e:	681b      	ldr	r3, [r3, #0]
 8010760:	4a0d      	ldr	r2, [pc, #52]	; (8010798 <HAL_Init+0x40>)
 8010762:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8010766:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8010768:	4b0b      	ldr	r3, [pc, #44]	; (8010798 <HAL_Init+0x40>)
 801076a:	681b      	ldr	r3, [r3, #0]
 801076c:	4a0a      	ldr	r2, [pc, #40]	; (8010798 <HAL_Init+0x40>)
 801076e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8010772:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8010774:	4b08      	ldr	r3, [pc, #32]	; (8010798 <HAL_Init+0x40>)
 8010776:	681b      	ldr	r3, [r3, #0]
 8010778:	4a07      	ldr	r2, [pc, #28]	; (8010798 <HAL_Init+0x40>)
 801077a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801077e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8010780:	2003      	movs	r0, #3
 8010782:	f001 fc18 	bl	8011fb6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8010786:	200f      	movs	r0, #15
 8010788:	f7f3 fdea 	bl	8004360 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 801078c:	f7f3 fdbc 	bl	8004308 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8010790:	2300      	movs	r3, #0
}
 8010792:	4618      	mov	r0, r3
 8010794:	bd80      	pop	{r7, pc}
 8010796:	bf00      	nop
 8010798:	40023c00 	.word	0x40023c00

0801079c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 801079c:	b480      	push	{r7}
 801079e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80107a0:	4b06      	ldr	r3, [pc, #24]	; (80107bc <HAL_IncTick+0x20>)
 80107a2:	781b      	ldrb	r3, [r3, #0]
 80107a4:	461a      	mov	r2, r3
 80107a6:	4b06      	ldr	r3, [pc, #24]	; (80107c0 <HAL_IncTick+0x24>)
 80107a8:	681b      	ldr	r3, [r3, #0]
 80107aa:	4413      	add	r3, r2
 80107ac:	4a04      	ldr	r2, [pc, #16]	; (80107c0 <HAL_IncTick+0x24>)
 80107ae:	6013      	str	r3, [r2, #0]
}
 80107b0:	bf00      	nop
 80107b2:	46bd      	mov	sp, r7
 80107b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107b8:	4770      	bx	lr
 80107ba:	bf00      	nop
 80107bc:	200013bc 	.word	0x200013bc
 80107c0:	2001e924 	.word	0x2001e924

080107c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80107c4:	b480      	push	{r7}
 80107c6:	af00      	add	r7, sp, #0
  return uwTick;
 80107c8:	4b03      	ldr	r3, [pc, #12]	; (80107d8 <HAL_GetTick+0x14>)
 80107ca:	681b      	ldr	r3, [r3, #0]
}
 80107cc:	4618      	mov	r0, r3
 80107ce:	46bd      	mov	sp, r7
 80107d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107d4:	4770      	bx	lr
 80107d6:	bf00      	nop
 80107d8:	2001e924 	.word	0x2001e924

080107dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80107dc:	b580      	push	{r7, lr}
 80107de:	b084      	sub	sp, #16
 80107e0:	af00      	add	r7, sp, #0
 80107e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80107e4:	f7ff ffee 	bl	80107c4 <HAL_GetTick>
 80107e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80107ee:	68fb      	ldr	r3, [r7, #12]
 80107f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80107f4:	d005      	beq.n	8010802 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80107f6:	4b0a      	ldr	r3, [pc, #40]	; (8010820 <HAL_Delay+0x44>)
 80107f8:	781b      	ldrb	r3, [r3, #0]
 80107fa:	461a      	mov	r2, r3
 80107fc:	68fb      	ldr	r3, [r7, #12]
 80107fe:	4413      	add	r3, r2
 8010800:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8010802:	bf00      	nop
 8010804:	f7ff ffde 	bl	80107c4 <HAL_GetTick>
 8010808:	4602      	mov	r2, r0
 801080a:	68bb      	ldr	r3, [r7, #8]
 801080c:	1ad3      	subs	r3, r2, r3
 801080e:	68fa      	ldr	r2, [r7, #12]
 8010810:	429a      	cmp	r2, r3
 8010812:	d8f7      	bhi.n	8010804 <HAL_Delay+0x28>
  {
  }
}
 8010814:	bf00      	nop
 8010816:	bf00      	nop
 8010818:	3710      	adds	r7, #16
 801081a:	46bd      	mov	sp, r7
 801081c:	bd80      	pop	{r7, pc}
 801081e:	bf00      	nop
 8010820:	200013bc 	.word	0x200013bc

08010824 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8010824:	b580      	push	{r7, lr}
 8010826:	b084      	sub	sp, #16
 8010828:	af00      	add	r7, sp, #0
 801082a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 801082c:	2300      	movs	r3, #0
 801082e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	2b00      	cmp	r3, #0
 8010834:	d101      	bne.n	801083a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8010836:	2301      	movs	r3, #1
 8010838:	e033      	b.n	80108a2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801083e:	2b00      	cmp	r3, #0
 8010840:	d109      	bne.n	8010856 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8010842:	6878      	ldr	r0, [r7, #4]
 8010844:	f7f1 fda2 	bl	800238c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	2200      	movs	r2, #0
 801084c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	2200      	movs	r2, #0
 8010852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801085a:	f003 0310 	and.w	r3, r3, #16
 801085e:	2b00      	cmp	r3, #0
 8010860:	d118      	bne.n	8010894 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010866:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 801086a:	f023 0302 	bic.w	r3, r3, #2
 801086e:	f043 0202 	orr.w	r2, r3, #2
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8010876:	6878      	ldr	r0, [r7, #4]
 8010878:	f000 fba8 	bl	8010fcc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	2200      	movs	r2, #0
 8010880:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010886:	f023 0303 	bic.w	r3, r3, #3
 801088a:	f043 0201 	orr.w	r2, r3, #1
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	641a      	str	r2, [r3, #64]	; 0x40
 8010892:	e001      	b.n	8010898 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8010894:	2301      	movs	r3, #1
 8010896:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	2200      	movs	r2, #0
 801089c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80108a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80108a2:	4618      	mov	r0, r3
 80108a4:	3710      	adds	r7, #16
 80108a6:	46bd      	mov	sp, r7
 80108a8:	bd80      	pop	{r7, pc}

080108aa <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80108aa:	b580      	push	{r7, lr}
 80108ac:	b084      	sub	sp, #16
 80108ae:	af00      	add	r7, sp, #0
 80108b0:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80108b2:	2300      	movs	r3, #0
 80108b4:	60fb      	str	r3, [r7, #12]
 80108b6:	2300      	movs	r3, #0
 80108b8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	681b      	ldr	r3, [r3, #0]
 80108be:	681b      	ldr	r3, [r3, #0]
 80108c0:	f003 0302 	and.w	r3, r3, #2
 80108c4:	2b02      	cmp	r3, #2
 80108c6:	bf0c      	ite	eq
 80108c8:	2301      	moveq	r3, #1
 80108ca:	2300      	movne	r3, #0
 80108cc:	b2db      	uxtb	r3, r3
 80108ce:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	681b      	ldr	r3, [r3, #0]
 80108d4:	685b      	ldr	r3, [r3, #4]
 80108d6:	f003 0320 	and.w	r3, r3, #32
 80108da:	2b20      	cmp	r3, #32
 80108dc:	bf0c      	ite	eq
 80108de:	2301      	moveq	r3, #1
 80108e0:	2300      	movne	r3, #0
 80108e2:	b2db      	uxtb	r3, r3
 80108e4:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80108e6:	68fb      	ldr	r3, [r7, #12]
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	d049      	beq.n	8010980 <HAL_ADC_IRQHandler+0xd6>
 80108ec:	68bb      	ldr	r3, [r7, #8]
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	d046      	beq.n	8010980 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80108f6:	f003 0310 	and.w	r3, r3, #16
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	d105      	bne.n	801090a <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010902:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	681b      	ldr	r3, [r3, #0]
 801090e:	689b      	ldr	r3, [r3, #8]
 8010910:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8010914:	2b00      	cmp	r3, #0
 8010916:	d12b      	bne.n	8010970 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 801091c:	2b00      	cmp	r3, #0
 801091e:	d127      	bne.n	8010970 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	681b      	ldr	r3, [r3, #0]
 8010924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010926:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 801092a:	2b00      	cmp	r3, #0
 801092c:	d006      	beq.n	801093c <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	681b      	ldr	r3, [r3, #0]
 8010932:	689b      	ldr	r3, [r3, #8]
 8010934:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8010938:	2b00      	cmp	r3, #0
 801093a:	d119      	bne.n	8010970 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	685a      	ldr	r2, [r3, #4]
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	681b      	ldr	r3, [r3, #0]
 8010946:	f022 0220 	bic.w	r2, r2, #32
 801094a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010950:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801095c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8010960:	2b00      	cmp	r3, #0
 8010962:	d105      	bne.n	8010970 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010968:	f043 0201 	orr.w	r2, r3, #1
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8010970:	6878      	ldr	r0, [r7, #4]
 8010972:	f7f1 ff85 	bl	8002880 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	681b      	ldr	r3, [r3, #0]
 801097a:	f06f 0212 	mvn.w	r2, #18
 801097e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	681b      	ldr	r3, [r3, #0]
 8010984:	681b      	ldr	r3, [r3, #0]
 8010986:	f003 0304 	and.w	r3, r3, #4
 801098a:	2b04      	cmp	r3, #4
 801098c:	bf0c      	ite	eq
 801098e:	2301      	moveq	r3, #1
 8010990:	2300      	movne	r3, #0
 8010992:	b2db      	uxtb	r3, r3
 8010994:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	681b      	ldr	r3, [r3, #0]
 801099a:	685b      	ldr	r3, [r3, #4]
 801099c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80109a0:	2b80      	cmp	r3, #128	; 0x80
 80109a2:	bf0c      	ite	eq
 80109a4:	2301      	moveq	r3, #1
 80109a6:	2300      	movne	r3, #0
 80109a8:	b2db      	uxtb	r3, r3
 80109aa:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80109ac:	68fb      	ldr	r3, [r7, #12]
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	d057      	beq.n	8010a62 <HAL_ADC_IRQHandler+0x1b8>
 80109b2:	68bb      	ldr	r3, [r7, #8]
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	d054      	beq.n	8010a62 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80109bc:	f003 0310 	and.w	r3, r3, #16
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	d105      	bne.n	80109d0 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80109c8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	681b      	ldr	r3, [r3, #0]
 80109d4:	689b      	ldr	r3, [r3, #8]
 80109d6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80109da:	2b00      	cmp	r3, #0
 80109dc:	d139      	bne.n	8010a52 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	681b      	ldr	r3, [r3, #0]
 80109e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80109e4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	d006      	beq.n	80109fa <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	681b      	ldr	r3, [r3, #0]
 80109f0:	689b      	ldr	r3, [r3, #8]
 80109f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	d12b      	bne.n	8010a52 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	681b      	ldr	r3, [r3, #0]
 80109fe:	685b      	ldr	r3, [r3, #4]
 8010a00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	d124      	bne.n	8010a52 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	681b      	ldr	r3, [r3, #0]
 8010a0c:	689b      	ldr	r3, [r3, #8]
 8010a0e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8010a12:	2b00      	cmp	r3, #0
 8010a14:	d11d      	bne.n	8010a52 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	d119      	bne.n	8010a52 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	681b      	ldr	r3, [r3, #0]
 8010a22:	685a      	ldr	r2, [r3, #4]
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	681b      	ldr	r3, [r3, #0]
 8010a28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010a2c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d105      	bne.n	8010a52 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a4a:	f043 0201 	orr.w	r2, r3, #1
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8010a52:	6878      	ldr	r0, [r7, #4]
 8010a54:	f000 fc38 	bl	80112c8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	681b      	ldr	r3, [r3, #0]
 8010a5c:	f06f 020c 	mvn.w	r2, #12
 8010a60:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	681b      	ldr	r3, [r3, #0]
 8010a66:	681b      	ldr	r3, [r3, #0]
 8010a68:	f003 0301 	and.w	r3, r3, #1
 8010a6c:	2b01      	cmp	r3, #1
 8010a6e:	bf0c      	ite	eq
 8010a70:	2301      	moveq	r3, #1
 8010a72:	2300      	movne	r3, #0
 8010a74:	b2db      	uxtb	r3, r3
 8010a76:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	681b      	ldr	r3, [r3, #0]
 8010a7c:	685b      	ldr	r3, [r3, #4]
 8010a7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010a82:	2b40      	cmp	r3, #64	; 0x40
 8010a84:	bf0c      	ite	eq
 8010a86:	2301      	moveq	r3, #1
 8010a88:	2300      	movne	r3, #0
 8010a8a:	b2db      	uxtb	r3, r3
 8010a8c:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8010a8e:	68fb      	ldr	r3, [r7, #12]
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	d017      	beq.n	8010ac4 <HAL_ADC_IRQHandler+0x21a>
 8010a94:	68bb      	ldr	r3, [r7, #8]
 8010a96:	2b00      	cmp	r3, #0
 8010a98:	d014      	beq.n	8010ac4 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	681b      	ldr	r3, [r3, #0]
 8010a9e:	681b      	ldr	r3, [r3, #0]
 8010aa0:	f003 0301 	and.w	r3, r3, #1
 8010aa4:	2b01      	cmp	r3, #1
 8010aa6:	d10d      	bne.n	8010ac4 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010aac:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8010ab4:	6878      	ldr	r0, [r7, #4]
 8010ab6:	f000 f953 	bl	8010d60 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	681b      	ldr	r3, [r3, #0]
 8010abe:	f06f 0201 	mvn.w	r2, #1
 8010ac2:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	681b      	ldr	r3, [r3, #0]
 8010ac8:	681b      	ldr	r3, [r3, #0]
 8010aca:	f003 0320 	and.w	r3, r3, #32
 8010ace:	2b20      	cmp	r3, #32
 8010ad0:	bf0c      	ite	eq
 8010ad2:	2301      	moveq	r3, #1
 8010ad4:	2300      	movne	r3, #0
 8010ad6:	b2db      	uxtb	r3, r3
 8010ad8:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	681b      	ldr	r3, [r3, #0]
 8010ade:	685b      	ldr	r3, [r3, #4]
 8010ae0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010ae4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8010ae8:	bf0c      	ite	eq
 8010aea:	2301      	moveq	r3, #1
 8010aec:	2300      	movne	r3, #0
 8010aee:	b2db      	uxtb	r3, r3
 8010af0:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8010af2:	68fb      	ldr	r3, [r7, #12]
 8010af4:	2b00      	cmp	r3, #0
 8010af6:	d015      	beq.n	8010b24 <HAL_ADC_IRQHandler+0x27a>
 8010af8:	68bb      	ldr	r3, [r7, #8]
 8010afa:	2b00      	cmp	r3, #0
 8010afc:	d012      	beq.n	8010b24 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010b02:	f043 0202 	orr.w	r2, r3, #2
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	681b      	ldr	r3, [r3, #0]
 8010b0e:	f06f 0220 	mvn.w	r2, #32
 8010b12:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8010b14:	6878      	ldr	r0, [r7, #4]
 8010b16:	f000 f92d 	bl	8010d74 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	681b      	ldr	r3, [r3, #0]
 8010b1e:	f06f 0220 	mvn.w	r2, #32
 8010b22:	601a      	str	r2, [r3, #0]
  }
}
 8010b24:	bf00      	nop
 8010b26:	3710      	adds	r7, #16
 8010b28:	46bd      	mov	sp, r7
 8010b2a:	bd80      	pop	{r7, pc}

08010b2c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8010b2c:	b580      	push	{r7, lr}
 8010b2e:	b086      	sub	sp, #24
 8010b30:	af00      	add	r7, sp, #0
 8010b32:	60f8      	str	r0, [r7, #12]
 8010b34:	60b9      	str	r1, [r7, #8]
 8010b36:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8010b38:	2300      	movs	r3, #0
 8010b3a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8010b3c:	68fb      	ldr	r3, [r7, #12]
 8010b3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010b42:	2b01      	cmp	r3, #1
 8010b44:	d101      	bne.n	8010b4a <HAL_ADC_Start_DMA+0x1e>
 8010b46:	2302      	movs	r3, #2
 8010b48:	e0e9      	b.n	8010d1e <HAL_ADC_Start_DMA+0x1f2>
 8010b4a:	68fb      	ldr	r3, [r7, #12]
 8010b4c:	2201      	movs	r2, #1
 8010b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8010b52:	68fb      	ldr	r3, [r7, #12]
 8010b54:	681b      	ldr	r3, [r3, #0]
 8010b56:	689b      	ldr	r3, [r3, #8]
 8010b58:	f003 0301 	and.w	r3, r3, #1
 8010b5c:	2b01      	cmp	r3, #1
 8010b5e:	d018      	beq.n	8010b92 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8010b60:	68fb      	ldr	r3, [r7, #12]
 8010b62:	681b      	ldr	r3, [r3, #0]
 8010b64:	689a      	ldr	r2, [r3, #8]
 8010b66:	68fb      	ldr	r3, [r7, #12]
 8010b68:	681b      	ldr	r3, [r3, #0]
 8010b6a:	f042 0201 	orr.w	r2, r2, #1
 8010b6e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8010b70:	4b6d      	ldr	r3, [pc, #436]	; (8010d28 <HAL_ADC_Start_DMA+0x1fc>)
 8010b72:	681b      	ldr	r3, [r3, #0]
 8010b74:	4a6d      	ldr	r2, [pc, #436]	; (8010d2c <HAL_ADC_Start_DMA+0x200>)
 8010b76:	fba2 2303 	umull	r2, r3, r2, r3
 8010b7a:	0c9a      	lsrs	r2, r3, #18
 8010b7c:	4613      	mov	r3, r2
 8010b7e:	005b      	lsls	r3, r3, #1
 8010b80:	4413      	add	r3, r2
 8010b82:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8010b84:	e002      	b.n	8010b8c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8010b86:	693b      	ldr	r3, [r7, #16]
 8010b88:	3b01      	subs	r3, #1
 8010b8a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8010b8c:	693b      	ldr	r3, [r7, #16]
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	d1f9      	bne.n	8010b86 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8010b92:	68fb      	ldr	r3, [r7, #12]
 8010b94:	681b      	ldr	r3, [r3, #0]
 8010b96:	689b      	ldr	r3, [r3, #8]
 8010b98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010b9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010ba0:	d107      	bne.n	8010bb2 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8010ba2:	68fb      	ldr	r3, [r7, #12]
 8010ba4:	681b      	ldr	r3, [r3, #0]
 8010ba6:	689a      	ldr	r2, [r3, #8]
 8010ba8:	68fb      	ldr	r3, [r7, #12]
 8010baa:	681b      	ldr	r3, [r3, #0]
 8010bac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8010bb0:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8010bb2:	68fb      	ldr	r3, [r7, #12]
 8010bb4:	681b      	ldr	r3, [r3, #0]
 8010bb6:	689b      	ldr	r3, [r3, #8]
 8010bb8:	f003 0301 	and.w	r3, r3, #1
 8010bbc:	2b01      	cmp	r3, #1
 8010bbe:	f040 80a1 	bne.w	8010d04 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8010bc2:	68fb      	ldr	r3, [r7, #12]
 8010bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010bc6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8010bca:	f023 0301 	bic.w	r3, r3, #1
 8010bce:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8010bd2:	68fb      	ldr	r3, [r7, #12]
 8010bd4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8010bd6:	68fb      	ldr	r3, [r7, #12]
 8010bd8:	681b      	ldr	r3, [r3, #0]
 8010bda:	685b      	ldr	r3, [r3, #4]
 8010bdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	d007      	beq.n	8010bf4 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8010be4:	68fb      	ldr	r3, [r7, #12]
 8010be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010be8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8010bec:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8010bf0:	68fb      	ldr	r3, [r7, #12]
 8010bf2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8010bf4:	68fb      	ldr	r3, [r7, #12]
 8010bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010bf8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8010bfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010c00:	d106      	bne.n	8010c10 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8010c02:	68fb      	ldr	r3, [r7, #12]
 8010c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010c06:	f023 0206 	bic.w	r2, r3, #6
 8010c0a:	68fb      	ldr	r3, [r7, #12]
 8010c0c:	645a      	str	r2, [r3, #68]	; 0x44
 8010c0e:	e002      	b.n	8010c16 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8010c10:	68fb      	ldr	r3, [r7, #12]
 8010c12:	2200      	movs	r2, #0
 8010c14:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8010c16:	68fb      	ldr	r3, [r7, #12]
 8010c18:	2200      	movs	r2, #0
 8010c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8010c1e:	4b44      	ldr	r3, [pc, #272]	; (8010d30 <HAL_ADC_Start_DMA+0x204>)
 8010c20:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8010c22:	68fb      	ldr	r3, [r7, #12]
 8010c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c26:	4a43      	ldr	r2, [pc, #268]	; (8010d34 <HAL_ADC_Start_DMA+0x208>)
 8010c28:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8010c2a:	68fb      	ldr	r3, [r7, #12]
 8010c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c2e:	4a42      	ldr	r2, [pc, #264]	; (8010d38 <HAL_ADC_Start_DMA+0x20c>)
 8010c30:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8010c32:	68fb      	ldr	r3, [r7, #12]
 8010c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c36:	4a41      	ldr	r2, [pc, #260]	; (8010d3c <HAL_ADC_Start_DMA+0x210>)
 8010c38:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8010c3a:	68fb      	ldr	r3, [r7, #12]
 8010c3c:	681b      	ldr	r3, [r3, #0]
 8010c3e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8010c42:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8010c44:	68fb      	ldr	r3, [r7, #12]
 8010c46:	681b      	ldr	r3, [r3, #0]
 8010c48:	685a      	ldr	r2, [r3, #4]
 8010c4a:	68fb      	ldr	r3, [r7, #12]
 8010c4c:	681b      	ldr	r3, [r3, #0]
 8010c4e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8010c52:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8010c54:	68fb      	ldr	r3, [r7, #12]
 8010c56:	681b      	ldr	r3, [r3, #0]
 8010c58:	689a      	ldr	r2, [r3, #8]
 8010c5a:	68fb      	ldr	r3, [r7, #12]
 8010c5c:	681b      	ldr	r3, [r3, #0]
 8010c5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010c62:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8010c64:	68fb      	ldr	r3, [r7, #12]
 8010c66:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8010c68:	68fb      	ldr	r3, [r7, #12]
 8010c6a:	681b      	ldr	r3, [r3, #0]
 8010c6c:	334c      	adds	r3, #76	; 0x4c
 8010c6e:	4619      	mov	r1, r3
 8010c70:	68ba      	ldr	r2, [r7, #8]
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	f001 fa82 	bl	801217c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8010c78:	697b      	ldr	r3, [r7, #20]
 8010c7a:	685b      	ldr	r3, [r3, #4]
 8010c7c:	f003 031f 	and.w	r3, r3, #31
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	d12a      	bne.n	8010cda <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8010c84:	68fb      	ldr	r3, [r7, #12]
 8010c86:	681b      	ldr	r3, [r3, #0]
 8010c88:	4a2d      	ldr	r2, [pc, #180]	; (8010d40 <HAL_ADC_Start_DMA+0x214>)
 8010c8a:	4293      	cmp	r3, r2
 8010c8c:	d015      	beq.n	8010cba <HAL_ADC_Start_DMA+0x18e>
 8010c8e:	68fb      	ldr	r3, [r7, #12]
 8010c90:	681b      	ldr	r3, [r3, #0]
 8010c92:	4a2c      	ldr	r2, [pc, #176]	; (8010d44 <HAL_ADC_Start_DMA+0x218>)
 8010c94:	4293      	cmp	r3, r2
 8010c96:	d105      	bne.n	8010ca4 <HAL_ADC_Start_DMA+0x178>
 8010c98:	4b25      	ldr	r3, [pc, #148]	; (8010d30 <HAL_ADC_Start_DMA+0x204>)
 8010c9a:	685b      	ldr	r3, [r3, #4]
 8010c9c:	f003 031f 	and.w	r3, r3, #31
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d00a      	beq.n	8010cba <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8010ca4:	68fb      	ldr	r3, [r7, #12]
 8010ca6:	681b      	ldr	r3, [r3, #0]
 8010ca8:	4a27      	ldr	r2, [pc, #156]	; (8010d48 <HAL_ADC_Start_DMA+0x21c>)
 8010caa:	4293      	cmp	r3, r2
 8010cac:	d136      	bne.n	8010d1c <HAL_ADC_Start_DMA+0x1f0>
 8010cae:	4b20      	ldr	r3, [pc, #128]	; (8010d30 <HAL_ADC_Start_DMA+0x204>)
 8010cb0:	685b      	ldr	r3, [r3, #4]
 8010cb2:	f003 0310 	and.w	r3, r3, #16
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	d130      	bne.n	8010d1c <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8010cba:	68fb      	ldr	r3, [r7, #12]
 8010cbc:	681b      	ldr	r3, [r3, #0]
 8010cbe:	689b      	ldr	r3, [r3, #8]
 8010cc0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	d129      	bne.n	8010d1c <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8010cc8:	68fb      	ldr	r3, [r7, #12]
 8010cca:	681b      	ldr	r3, [r3, #0]
 8010ccc:	689a      	ldr	r2, [r3, #8]
 8010cce:	68fb      	ldr	r3, [r7, #12]
 8010cd0:	681b      	ldr	r3, [r3, #0]
 8010cd2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8010cd6:	609a      	str	r2, [r3, #8]
 8010cd8:	e020      	b.n	8010d1c <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8010cda:	68fb      	ldr	r3, [r7, #12]
 8010cdc:	681b      	ldr	r3, [r3, #0]
 8010cde:	4a18      	ldr	r2, [pc, #96]	; (8010d40 <HAL_ADC_Start_DMA+0x214>)
 8010ce0:	4293      	cmp	r3, r2
 8010ce2:	d11b      	bne.n	8010d1c <HAL_ADC_Start_DMA+0x1f0>
 8010ce4:	68fb      	ldr	r3, [r7, #12]
 8010ce6:	681b      	ldr	r3, [r3, #0]
 8010ce8:	689b      	ldr	r3, [r3, #8]
 8010cea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	d114      	bne.n	8010d1c <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8010cf2:	68fb      	ldr	r3, [r7, #12]
 8010cf4:	681b      	ldr	r3, [r3, #0]
 8010cf6:	689a      	ldr	r2, [r3, #8]
 8010cf8:	68fb      	ldr	r3, [r7, #12]
 8010cfa:	681b      	ldr	r3, [r3, #0]
 8010cfc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8010d00:	609a      	str	r2, [r3, #8]
 8010d02:	e00b      	b.n	8010d1c <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8010d04:	68fb      	ldr	r3, [r7, #12]
 8010d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d08:	f043 0210 	orr.w	r2, r3, #16
 8010d0c:	68fb      	ldr	r3, [r7, #12]
 8010d0e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8010d10:	68fb      	ldr	r3, [r7, #12]
 8010d12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010d14:	f043 0201 	orr.w	r2, r3, #1
 8010d18:	68fb      	ldr	r3, [r7, #12]
 8010d1a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8010d1c:	2300      	movs	r3, #0
}
 8010d1e:	4618      	mov	r0, r3
 8010d20:	3718      	adds	r7, #24
 8010d22:	46bd      	mov	sp, r7
 8010d24:	bd80      	pop	{r7, pc}
 8010d26:	bf00      	nop
 8010d28:	20000004 	.word	0x20000004
 8010d2c:	431bde83 	.word	0x431bde83
 8010d30:	40012300 	.word	0x40012300
 8010d34:	080111c5 	.word	0x080111c5
 8010d38:	0801127f 	.word	0x0801127f
 8010d3c:	0801129b 	.word	0x0801129b
 8010d40:	40012000 	.word	0x40012000
 8010d44:	40012100 	.word	0x40012100
 8010d48:	40012200 	.word	0x40012200

08010d4c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8010d4c:	b480      	push	{r7}
 8010d4e:	b083      	sub	sp, #12
 8010d50:	af00      	add	r7, sp, #0
 8010d52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8010d54:	bf00      	nop
 8010d56:	370c      	adds	r7, #12
 8010d58:	46bd      	mov	sp, r7
 8010d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d5e:	4770      	bx	lr

08010d60 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8010d60:	b480      	push	{r7}
 8010d62:	b083      	sub	sp, #12
 8010d64:	af00      	add	r7, sp, #0
 8010d66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8010d68:	bf00      	nop
 8010d6a:	370c      	adds	r7, #12
 8010d6c:	46bd      	mov	sp, r7
 8010d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d72:	4770      	bx	lr

08010d74 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8010d74:	b480      	push	{r7}
 8010d76:	b083      	sub	sp, #12
 8010d78:	af00      	add	r7, sp, #0
 8010d7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8010d7c:	bf00      	nop
 8010d7e:	370c      	adds	r7, #12
 8010d80:	46bd      	mov	sp, r7
 8010d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d86:	4770      	bx	lr

08010d88 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8010d88:	b480      	push	{r7}
 8010d8a:	b085      	sub	sp, #20
 8010d8c:	af00      	add	r7, sp, #0
 8010d8e:	6078      	str	r0, [r7, #4]
 8010d90:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8010d92:	2300      	movs	r3, #0
 8010d94:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010d9c:	2b01      	cmp	r3, #1
 8010d9e:	d101      	bne.n	8010da4 <HAL_ADC_ConfigChannel+0x1c>
 8010da0:	2302      	movs	r3, #2
 8010da2:	e105      	b.n	8010fb0 <HAL_ADC_ConfigChannel+0x228>
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	2201      	movs	r2, #1
 8010da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8010dac:	683b      	ldr	r3, [r7, #0]
 8010dae:	681b      	ldr	r3, [r3, #0]
 8010db0:	2b09      	cmp	r3, #9
 8010db2:	d925      	bls.n	8010e00 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	681b      	ldr	r3, [r3, #0]
 8010db8:	68d9      	ldr	r1, [r3, #12]
 8010dba:	683b      	ldr	r3, [r7, #0]
 8010dbc:	681b      	ldr	r3, [r3, #0]
 8010dbe:	b29b      	uxth	r3, r3
 8010dc0:	461a      	mov	r2, r3
 8010dc2:	4613      	mov	r3, r2
 8010dc4:	005b      	lsls	r3, r3, #1
 8010dc6:	4413      	add	r3, r2
 8010dc8:	3b1e      	subs	r3, #30
 8010dca:	2207      	movs	r2, #7
 8010dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8010dd0:	43da      	mvns	r2, r3
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	681b      	ldr	r3, [r3, #0]
 8010dd6:	400a      	ands	r2, r1
 8010dd8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	681b      	ldr	r3, [r3, #0]
 8010dde:	68d9      	ldr	r1, [r3, #12]
 8010de0:	683b      	ldr	r3, [r7, #0]
 8010de2:	689a      	ldr	r2, [r3, #8]
 8010de4:	683b      	ldr	r3, [r7, #0]
 8010de6:	681b      	ldr	r3, [r3, #0]
 8010de8:	b29b      	uxth	r3, r3
 8010dea:	4618      	mov	r0, r3
 8010dec:	4603      	mov	r3, r0
 8010dee:	005b      	lsls	r3, r3, #1
 8010df0:	4403      	add	r3, r0
 8010df2:	3b1e      	subs	r3, #30
 8010df4:	409a      	lsls	r2, r3
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	681b      	ldr	r3, [r3, #0]
 8010dfa:	430a      	orrs	r2, r1
 8010dfc:	60da      	str	r2, [r3, #12]
 8010dfe:	e022      	b.n	8010e46 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	681b      	ldr	r3, [r3, #0]
 8010e04:	6919      	ldr	r1, [r3, #16]
 8010e06:	683b      	ldr	r3, [r7, #0]
 8010e08:	681b      	ldr	r3, [r3, #0]
 8010e0a:	b29b      	uxth	r3, r3
 8010e0c:	461a      	mov	r2, r3
 8010e0e:	4613      	mov	r3, r2
 8010e10:	005b      	lsls	r3, r3, #1
 8010e12:	4413      	add	r3, r2
 8010e14:	2207      	movs	r2, #7
 8010e16:	fa02 f303 	lsl.w	r3, r2, r3
 8010e1a:	43da      	mvns	r2, r3
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	681b      	ldr	r3, [r3, #0]
 8010e20:	400a      	ands	r2, r1
 8010e22:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	681b      	ldr	r3, [r3, #0]
 8010e28:	6919      	ldr	r1, [r3, #16]
 8010e2a:	683b      	ldr	r3, [r7, #0]
 8010e2c:	689a      	ldr	r2, [r3, #8]
 8010e2e:	683b      	ldr	r3, [r7, #0]
 8010e30:	681b      	ldr	r3, [r3, #0]
 8010e32:	b29b      	uxth	r3, r3
 8010e34:	4618      	mov	r0, r3
 8010e36:	4603      	mov	r3, r0
 8010e38:	005b      	lsls	r3, r3, #1
 8010e3a:	4403      	add	r3, r0
 8010e3c:	409a      	lsls	r2, r3
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	681b      	ldr	r3, [r3, #0]
 8010e42:	430a      	orrs	r2, r1
 8010e44:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8010e46:	683b      	ldr	r3, [r7, #0]
 8010e48:	685b      	ldr	r3, [r3, #4]
 8010e4a:	2b06      	cmp	r3, #6
 8010e4c:	d824      	bhi.n	8010e98 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	681b      	ldr	r3, [r3, #0]
 8010e52:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8010e54:	683b      	ldr	r3, [r7, #0]
 8010e56:	685a      	ldr	r2, [r3, #4]
 8010e58:	4613      	mov	r3, r2
 8010e5a:	009b      	lsls	r3, r3, #2
 8010e5c:	4413      	add	r3, r2
 8010e5e:	3b05      	subs	r3, #5
 8010e60:	221f      	movs	r2, #31
 8010e62:	fa02 f303 	lsl.w	r3, r2, r3
 8010e66:	43da      	mvns	r2, r3
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	681b      	ldr	r3, [r3, #0]
 8010e6c:	400a      	ands	r2, r1
 8010e6e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	681b      	ldr	r3, [r3, #0]
 8010e74:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8010e76:	683b      	ldr	r3, [r7, #0]
 8010e78:	681b      	ldr	r3, [r3, #0]
 8010e7a:	b29b      	uxth	r3, r3
 8010e7c:	4618      	mov	r0, r3
 8010e7e:	683b      	ldr	r3, [r7, #0]
 8010e80:	685a      	ldr	r2, [r3, #4]
 8010e82:	4613      	mov	r3, r2
 8010e84:	009b      	lsls	r3, r3, #2
 8010e86:	4413      	add	r3, r2
 8010e88:	3b05      	subs	r3, #5
 8010e8a:	fa00 f203 	lsl.w	r2, r0, r3
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	681b      	ldr	r3, [r3, #0]
 8010e92:	430a      	orrs	r2, r1
 8010e94:	635a      	str	r2, [r3, #52]	; 0x34
 8010e96:	e04c      	b.n	8010f32 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8010e98:	683b      	ldr	r3, [r7, #0]
 8010e9a:	685b      	ldr	r3, [r3, #4]
 8010e9c:	2b0c      	cmp	r3, #12
 8010e9e:	d824      	bhi.n	8010eea <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	681b      	ldr	r3, [r3, #0]
 8010ea4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8010ea6:	683b      	ldr	r3, [r7, #0]
 8010ea8:	685a      	ldr	r2, [r3, #4]
 8010eaa:	4613      	mov	r3, r2
 8010eac:	009b      	lsls	r3, r3, #2
 8010eae:	4413      	add	r3, r2
 8010eb0:	3b23      	subs	r3, #35	; 0x23
 8010eb2:	221f      	movs	r2, #31
 8010eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8010eb8:	43da      	mvns	r2, r3
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	681b      	ldr	r3, [r3, #0]
 8010ebe:	400a      	ands	r2, r1
 8010ec0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	681b      	ldr	r3, [r3, #0]
 8010ec6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8010ec8:	683b      	ldr	r3, [r7, #0]
 8010eca:	681b      	ldr	r3, [r3, #0]
 8010ecc:	b29b      	uxth	r3, r3
 8010ece:	4618      	mov	r0, r3
 8010ed0:	683b      	ldr	r3, [r7, #0]
 8010ed2:	685a      	ldr	r2, [r3, #4]
 8010ed4:	4613      	mov	r3, r2
 8010ed6:	009b      	lsls	r3, r3, #2
 8010ed8:	4413      	add	r3, r2
 8010eda:	3b23      	subs	r3, #35	; 0x23
 8010edc:	fa00 f203 	lsl.w	r2, r0, r3
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	681b      	ldr	r3, [r3, #0]
 8010ee4:	430a      	orrs	r2, r1
 8010ee6:	631a      	str	r2, [r3, #48]	; 0x30
 8010ee8:	e023      	b.n	8010f32 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	681b      	ldr	r3, [r3, #0]
 8010eee:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8010ef0:	683b      	ldr	r3, [r7, #0]
 8010ef2:	685a      	ldr	r2, [r3, #4]
 8010ef4:	4613      	mov	r3, r2
 8010ef6:	009b      	lsls	r3, r3, #2
 8010ef8:	4413      	add	r3, r2
 8010efa:	3b41      	subs	r3, #65	; 0x41
 8010efc:	221f      	movs	r2, #31
 8010efe:	fa02 f303 	lsl.w	r3, r2, r3
 8010f02:	43da      	mvns	r2, r3
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	681b      	ldr	r3, [r3, #0]
 8010f08:	400a      	ands	r2, r1
 8010f0a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	681b      	ldr	r3, [r3, #0]
 8010f10:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8010f12:	683b      	ldr	r3, [r7, #0]
 8010f14:	681b      	ldr	r3, [r3, #0]
 8010f16:	b29b      	uxth	r3, r3
 8010f18:	4618      	mov	r0, r3
 8010f1a:	683b      	ldr	r3, [r7, #0]
 8010f1c:	685a      	ldr	r2, [r3, #4]
 8010f1e:	4613      	mov	r3, r2
 8010f20:	009b      	lsls	r3, r3, #2
 8010f22:	4413      	add	r3, r2
 8010f24:	3b41      	subs	r3, #65	; 0x41
 8010f26:	fa00 f203 	lsl.w	r2, r0, r3
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	681b      	ldr	r3, [r3, #0]
 8010f2e:	430a      	orrs	r2, r1
 8010f30:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8010f32:	4b22      	ldr	r3, [pc, #136]	; (8010fbc <HAL_ADC_ConfigChannel+0x234>)
 8010f34:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	681b      	ldr	r3, [r3, #0]
 8010f3a:	4a21      	ldr	r2, [pc, #132]	; (8010fc0 <HAL_ADC_ConfigChannel+0x238>)
 8010f3c:	4293      	cmp	r3, r2
 8010f3e:	d109      	bne.n	8010f54 <HAL_ADC_ConfigChannel+0x1cc>
 8010f40:	683b      	ldr	r3, [r7, #0]
 8010f42:	681b      	ldr	r3, [r3, #0]
 8010f44:	2b12      	cmp	r3, #18
 8010f46:	d105      	bne.n	8010f54 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8010f48:	68fb      	ldr	r3, [r7, #12]
 8010f4a:	685b      	ldr	r3, [r3, #4]
 8010f4c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8010f50:	68fb      	ldr	r3, [r7, #12]
 8010f52:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	681b      	ldr	r3, [r3, #0]
 8010f58:	4a19      	ldr	r2, [pc, #100]	; (8010fc0 <HAL_ADC_ConfigChannel+0x238>)
 8010f5a:	4293      	cmp	r3, r2
 8010f5c:	d123      	bne.n	8010fa6 <HAL_ADC_ConfigChannel+0x21e>
 8010f5e:	683b      	ldr	r3, [r7, #0]
 8010f60:	681b      	ldr	r3, [r3, #0]
 8010f62:	2b10      	cmp	r3, #16
 8010f64:	d003      	beq.n	8010f6e <HAL_ADC_ConfigChannel+0x1e6>
 8010f66:	683b      	ldr	r3, [r7, #0]
 8010f68:	681b      	ldr	r3, [r3, #0]
 8010f6a:	2b11      	cmp	r3, #17
 8010f6c:	d11b      	bne.n	8010fa6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8010f6e:	68fb      	ldr	r3, [r7, #12]
 8010f70:	685b      	ldr	r3, [r3, #4]
 8010f72:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8010f76:	68fb      	ldr	r3, [r7, #12]
 8010f78:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8010f7a:	683b      	ldr	r3, [r7, #0]
 8010f7c:	681b      	ldr	r3, [r3, #0]
 8010f7e:	2b10      	cmp	r3, #16
 8010f80:	d111      	bne.n	8010fa6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8010f82:	4b10      	ldr	r3, [pc, #64]	; (8010fc4 <HAL_ADC_ConfigChannel+0x23c>)
 8010f84:	681b      	ldr	r3, [r3, #0]
 8010f86:	4a10      	ldr	r2, [pc, #64]	; (8010fc8 <HAL_ADC_ConfigChannel+0x240>)
 8010f88:	fba2 2303 	umull	r2, r3, r2, r3
 8010f8c:	0c9a      	lsrs	r2, r3, #18
 8010f8e:	4613      	mov	r3, r2
 8010f90:	009b      	lsls	r3, r3, #2
 8010f92:	4413      	add	r3, r2
 8010f94:	005b      	lsls	r3, r3, #1
 8010f96:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8010f98:	e002      	b.n	8010fa0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8010f9a:	68bb      	ldr	r3, [r7, #8]
 8010f9c:	3b01      	subs	r3, #1
 8010f9e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8010fa0:	68bb      	ldr	r3, [r7, #8]
 8010fa2:	2b00      	cmp	r3, #0
 8010fa4:	d1f9      	bne.n	8010f9a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	2200      	movs	r2, #0
 8010faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8010fae:	2300      	movs	r3, #0
}
 8010fb0:	4618      	mov	r0, r3
 8010fb2:	3714      	adds	r7, #20
 8010fb4:	46bd      	mov	sp, r7
 8010fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fba:	4770      	bx	lr
 8010fbc:	40012300 	.word	0x40012300
 8010fc0:	40012000 	.word	0x40012000
 8010fc4:	20000004 	.word	0x20000004
 8010fc8:	431bde83 	.word	0x431bde83

08010fcc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8010fcc:	b480      	push	{r7}
 8010fce:	b085      	sub	sp, #20
 8010fd0:	af00      	add	r7, sp, #0
 8010fd2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8010fd4:	4b79      	ldr	r3, [pc, #484]	; (80111bc <ADC_Init+0x1f0>)
 8010fd6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8010fd8:	68fb      	ldr	r3, [r7, #12]
 8010fda:	685b      	ldr	r3, [r3, #4]
 8010fdc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8010fe0:	68fb      	ldr	r3, [r7, #12]
 8010fe2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8010fe4:	68fb      	ldr	r3, [r7, #12]
 8010fe6:	685a      	ldr	r2, [r3, #4]
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	685b      	ldr	r3, [r3, #4]
 8010fec:	431a      	orrs	r2, r3
 8010fee:	68fb      	ldr	r3, [r7, #12]
 8010ff0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	681b      	ldr	r3, [r3, #0]
 8010ff6:	685a      	ldr	r2, [r3, #4]
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	681b      	ldr	r3, [r3, #0]
 8010ffc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8011000:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	681b      	ldr	r3, [r3, #0]
 8011006:	6859      	ldr	r1, [r3, #4]
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	691b      	ldr	r3, [r3, #16]
 801100c:	021a      	lsls	r2, r3, #8
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	681b      	ldr	r3, [r3, #0]
 8011012:	430a      	orrs	r2, r1
 8011014:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	681b      	ldr	r3, [r3, #0]
 801101a:	685a      	ldr	r2, [r3, #4]
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	681b      	ldr	r3, [r3, #0]
 8011020:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8011024:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	681b      	ldr	r3, [r3, #0]
 801102a:	6859      	ldr	r1, [r3, #4]
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	689a      	ldr	r2, [r3, #8]
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	681b      	ldr	r3, [r3, #0]
 8011034:	430a      	orrs	r2, r1
 8011036:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	681b      	ldr	r3, [r3, #0]
 801103c:	689a      	ldr	r2, [r3, #8]
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	681b      	ldr	r3, [r3, #0]
 8011042:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8011046:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	681b      	ldr	r3, [r3, #0]
 801104c:	6899      	ldr	r1, [r3, #8]
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	68da      	ldr	r2, [r3, #12]
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	681b      	ldr	r3, [r3, #0]
 8011056:	430a      	orrs	r2, r1
 8011058:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801105e:	4a58      	ldr	r2, [pc, #352]	; (80111c0 <ADC_Init+0x1f4>)
 8011060:	4293      	cmp	r3, r2
 8011062:	d022      	beq.n	80110aa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	681b      	ldr	r3, [r3, #0]
 8011068:	689a      	ldr	r2, [r3, #8]
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	681b      	ldr	r3, [r3, #0]
 801106e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8011072:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	681b      	ldr	r3, [r3, #0]
 8011078:	6899      	ldr	r1, [r3, #8]
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	681b      	ldr	r3, [r3, #0]
 8011082:	430a      	orrs	r2, r1
 8011084:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	681b      	ldr	r3, [r3, #0]
 801108a:	689a      	ldr	r2, [r3, #8]
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	681b      	ldr	r3, [r3, #0]
 8011090:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8011094:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	681b      	ldr	r3, [r3, #0]
 801109a:	6899      	ldr	r1, [r3, #8]
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	681b      	ldr	r3, [r3, #0]
 80110a4:	430a      	orrs	r2, r1
 80110a6:	609a      	str	r2, [r3, #8]
 80110a8:	e00f      	b.n	80110ca <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	681b      	ldr	r3, [r3, #0]
 80110ae:	689a      	ldr	r2, [r3, #8]
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	681b      	ldr	r3, [r3, #0]
 80110b4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80110b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	681b      	ldr	r3, [r3, #0]
 80110be:	689a      	ldr	r2, [r3, #8]
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	681b      	ldr	r3, [r3, #0]
 80110c4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80110c8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	681b      	ldr	r3, [r3, #0]
 80110ce:	689a      	ldr	r2, [r3, #8]
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	681b      	ldr	r3, [r3, #0]
 80110d4:	f022 0202 	bic.w	r2, r2, #2
 80110d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	681b      	ldr	r3, [r3, #0]
 80110de:	6899      	ldr	r1, [r3, #8]
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	7e1b      	ldrb	r3, [r3, #24]
 80110e4:	005a      	lsls	r2, r3, #1
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	681b      	ldr	r3, [r3, #0]
 80110ea:	430a      	orrs	r2, r1
 80110ec:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	d01b      	beq.n	8011130 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	681b      	ldr	r3, [r3, #0]
 80110fc:	685a      	ldr	r2, [r3, #4]
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	681b      	ldr	r3, [r3, #0]
 8011102:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011106:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	681b      	ldr	r3, [r3, #0]
 801110c:	685a      	ldr	r2, [r3, #4]
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	681b      	ldr	r3, [r3, #0]
 8011112:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8011116:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	681b      	ldr	r3, [r3, #0]
 801111c:	6859      	ldr	r1, [r3, #4]
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011122:	3b01      	subs	r3, #1
 8011124:	035a      	lsls	r2, r3, #13
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	681b      	ldr	r3, [r3, #0]
 801112a:	430a      	orrs	r2, r1
 801112c:	605a      	str	r2, [r3, #4]
 801112e:	e007      	b.n	8011140 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	681b      	ldr	r3, [r3, #0]
 8011134:	685a      	ldr	r2, [r3, #4]
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	681b      	ldr	r3, [r3, #0]
 801113a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801113e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	681b      	ldr	r3, [r3, #0]
 8011144:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	681b      	ldr	r3, [r3, #0]
 801114a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 801114e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	681b      	ldr	r3, [r3, #0]
 8011154:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	69db      	ldr	r3, [r3, #28]
 801115a:	3b01      	subs	r3, #1
 801115c:	051a      	lsls	r2, r3, #20
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	681b      	ldr	r3, [r3, #0]
 8011162:	430a      	orrs	r2, r1
 8011164:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	681b      	ldr	r3, [r3, #0]
 801116a:	689a      	ldr	r2, [r3, #8]
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	681b      	ldr	r3, [r3, #0]
 8011170:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8011174:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	681b      	ldr	r3, [r3, #0]
 801117a:	6899      	ldr	r1, [r3, #8]
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011182:	025a      	lsls	r2, r3, #9
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	681b      	ldr	r3, [r3, #0]
 8011188:	430a      	orrs	r2, r1
 801118a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	681b      	ldr	r3, [r3, #0]
 8011190:	689a      	ldr	r2, [r3, #8]
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	681b      	ldr	r3, [r3, #0]
 8011196:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801119a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	681b      	ldr	r3, [r3, #0]
 80111a0:	6899      	ldr	r1, [r3, #8]
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	695b      	ldr	r3, [r3, #20]
 80111a6:	029a      	lsls	r2, r3, #10
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	681b      	ldr	r3, [r3, #0]
 80111ac:	430a      	orrs	r2, r1
 80111ae:	609a      	str	r2, [r3, #8]
}
 80111b0:	bf00      	nop
 80111b2:	3714      	adds	r7, #20
 80111b4:	46bd      	mov	sp, r7
 80111b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111ba:	4770      	bx	lr
 80111bc:	40012300 	.word	0x40012300
 80111c0:	0f000001 	.word	0x0f000001

080111c4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80111c4:	b580      	push	{r7, lr}
 80111c6:	b084      	sub	sp, #16
 80111c8:	af00      	add	r7, sp, #0
 80111ca:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80111d0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80111d2:	68fb      	ldr	r3, [r7, #12]
 80111d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80111d6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80111da:	2b00      	cmp	r3, #0
 80111dc:	d13c      	bne.n	8011258 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80111de:	68fb      	ldr	r3, [r7, #12]
 80111e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80111e2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80111e6:	68fb      	ldr	r3, [r7, #12]
 80111e8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80111ea:	68fb      	ldr	r3, [r7, #12]
 80111ec:	681b      	ldr	r3, [r3, #0]
 80111ee:	689b      	ldr	r3, [r3, #8]
 80111f0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	d12b      	bne.n	8011250 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80111f8:	68fb      	ldr	r3, [r7, #12]
 80111fa:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80111fc:	2b00      	cmp	r3, #0
 80111fe:	d127      	bne.n	8011250 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8011200:	68fb      	ldr	r3, [r7, #12]
 8011202:	681b      	ldr	r3, [r3, #0]
 8011204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011206:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 801120a:	2b00      	cmp	r3, #0
 801120c:	d006      	beq.n	801121c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 801120e:	68fb      	ldr	r3, [r7, #12]
 8011210:	681b      	ldr	r3, [r3, #0]
 8011212:	689b      	ldr	r3, [r3, #8]
 8011214:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8011218:	2b00      	cmp	r3, #0
 801121a:	d119      	bne.n	8011250 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 801121c:	68fb      	ldr	r3, [r7, #12]
 801121e:	681b      	ldr	r3, [r3, #0]
 8011220:	685a      	ldr	r2, [r3, #4]
 8011222:	68fb      	ldr	r3, [r7, #12]
 8011224:	681b      	ldr	r3, [r3, #0]
 8011226:	f022 0220 	bic.w	r2, r2, #32
 801122a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 801122c:	68fb      	ldr	r3, [r7, #12]
 801122e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011230:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8011234:	68fb      	ldr	r3, [r7, #12]
 8011236:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8011238:	68fb      	ldr	r3, [r7, #12]
 801123a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801123c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8011240:	2b00      	cmp	r3, #0
 8011242:	d105      	bne.n	8011250 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8011244:	68fb      	ldr	r3, [r7, #12]
 8011246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011248:	f043 0201 	orr.w	r2, r3, #1
 801124c:	68fb      	ldr	r3, [r7, #12]
 801124e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8011250:	68f8      	ldr	r0, [r7, #12]
 8011252:	f7f1 fb15 	bl	8002880 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8011256:	e00e      	b.n	8011276 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8011258:	68fb      	ldr	r3, [r7, #12]
 801125a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801125c:	f003 0310 	and.w	r3, r3, #16
 8011260:	2b00      	cmp	r3, #0
 8011262:	d003      	beq.n	801126c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8011264:	68f8      	ldr	r0, [r7, #12]
 8011266:	f7ff fd85 	bl	8010d74 <HAL_ADC_ErrorCallback>
}
 801126a:	e004      	b.n	8011276 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 801126c:	68fb      	ldr	r3, [r7, #12]
 801126e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011272:	6878      	ldr	r0, [r7, #4]
 8011274:	4798      	blx	r3
}
 8011276:	bf00      	nop
 8011278:	3710      	adds	r7, #16
 801127a:	46bd      	mov	sp, r7
 801127c:	bd80      	pop	{r7, pc}

0801127e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 801127e:	b580      	push	{r7, lr}
 8011280:	b084      	sub	sp, #16
 8011282:	af00      	add	r7, sp, #0
 8011284:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801128a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 801128c:	68f8      	ldr	r0, [r7, #12]
 801128e:	f7ff fd5d 	bl	8010d4c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8011292:	bf00      	nop
 8011294:	3710      	adds	r7, #16
 8011296:	46bd      	mov	sp, r7
 8011298:	bd80      	pop	{r7, pc}

0801129a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 801129a:	b580      	push	{r7, lr}
 801129c:	b084      	sub	sp, #16
 801129e:	af00      	add	r7, sp, #0
 80112a0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80112a6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80112a8:	68fb      	ldr	r3, [r7, #12]
 80112aa:	2240      	movs	r2, #64	; 0x40
 80112ac:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80112ae:	68fb      	ldr	r3, [r7, #12]
 80112b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80112b2:	f043 0204 	orr.w	r2, r3, #4
 80112b6:	68fb      	ldr	r3, [r7, #12]
 80112b8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80112ba:	68f8      	ldr	r0, [r7, #12]
 80112bc:	f7ff fd5a 	bl	8010d74 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80112c0:	bf00      	nop
 80112c2:	3710      	adds	r7, #16
 80112c4:	46bd      	mov	sp, r7
 80112c6:	bd80      	pop	{r7, pc}

080112c8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80112c8:	b480      	push	{r7}
 80112ca:	b083      	sub	sp, #12
 80112cc:	af00      	add	r7, sp, #0
 80112ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80112d0:	bf00      	nop
 80112d2:	370c      	adds	r7, #12
 80112d4:	46bd      	mov	sp, r7
 80112d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112da:	4770      	bx	lr

080112dc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80112dc:	b580      	push	{r7, lr}
 80112de:	b084      	sub	sp, #16
 80112e0:	af00      	add	r7, sp, #0
 80112e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	d101      	bne.n	80112ee <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80112ea:	2301      	movs	r3, #1
 80112ec:	e0ed      	b.n	80114ca <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80112f4:	b2db      	uxtb	r3, r3
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	d102      	bne.n	8011300 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80112fa:	6878      	ldr	r0, [r7, #4]
 80112fc:	f7f1 fb3c 	bl	8002978 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	681b      	ldr	r3, [r3, #0]
 8011304:	681a      	ldr	r2, [r3, #0]
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	681b      	ldr	r3, [r3, #0]
 801130a:	f042 0201 	orr.w	r2, r2, #1
 801130e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8011310:	f7ff fa58 	bl	80107c4 <HAL_GetTick>
 8011314:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8011316:	e012      	b.n	801133e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8011318:	f7ff fa54 	bl	80107c4 <HAL_GetTick>
 801131c:	4602      	mov	r2, r0
 801131e:	68fb      	ldr	r3, [r7, #12]
 8011320:	1ad3      	subs	r3, r2, r3
 8011322:	2b0a      	cmp	r3, #10
 8011324:	d90b      	bls.n	801133e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801132a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	2205      	movs	r2, #5
 8011336:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 801133a:	2301      	movs	r3, #1
 801133c:	e0c5      	b.n	80114ca <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	681b      	ldr	r3, [r3, #0]
 8011342:	685b      	ldr	r3, [r3, #4]
 8011344:	f003 0301 	and.w	r3, r3, #1
 8011348:	2b00      	cmp	r3, #0
 801134a:	d0e5      	beq.n	8011318 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	681b      	ldr	r3, [r3, #0]
 8011350:	681a      	ldr	r2, [r3, #0]
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	681b      	ldr	r3, [r3, #0]
 8011356:	f022 0202 	bic.w	r2, r2, #2
 801135a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 801135c:	f7ff fa32 	bl	80107c4 <HAL_GetTick>
 8011360:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8011362:	e012      	b.n	801138a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8011364:	f7ff fa2e 	bl	80107c4 <HAL_GetTick>
 8011368:	4602      	mov	r2, r0
 801136a:	68fb      	ldr	r3, [r7, #12]
 801136c:	1ad3      	subs	r3, r2, r3
 801136e:	2b0a      	cmp	r3, #10
 8011370:	d90b      	bls.n	801138a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011376:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	2205      	movs	r2, #5
 8011382:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8011386:	2301      	movs	r3, #1
 8011388:	e09f      	b.n	80114ca <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	681b      	ldr	r3, [r3, #0]
 801138e:	685b      	ldr	r3, [r3, #4]
 8011390:	f003 0302 	and.w	r3, r3, #2
 8011394:	2b00      	cmp	r3, #0
 8011396:	d1e5      	bne.n	8011364 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	7e1b      	ldrb	r3, [r3, #24]
 801139c:	2b01      	cmp	r3, #1
 801139e:	d108      	bne.n	80113b2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	681b      	ldr	r3, [r3, #0]
 80113a4:	681a      	ldr	r2, [r3, #0]
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	681b      	ldr	r3, [r3, #0]
 80113aa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80113ae:	601a      	str	r2, [r3, #0]
 80113b0:	e007      	b.n	80113c2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	681b      	ldr	r3, [r3, #0]
 80113b6:	681a      	ldr	r2, [r3, #0]
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	681b      	ldr	r3, [r3, #0]
 80113bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80113c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	7e5b      	ldrb	r3, [r3, #25]
 80113c6:	2b01      	cmp	r3, #1
 80113c8:	d108      	bne.n	80113dc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	681b      	ldr	r3, [r3, #0]
 80113ce:	681a      	ldr	r2, [r3, #0]
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	681b      	ldr	r3, [r3, #0]
 80113d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80113d8:	601a      	str	r2, [r3, #0]
 80113da:	e007      	b.n	80113ec <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	681b      	ldr	r3, [r3, #0]
 80113e0:	681a      	ldr	r2, [r3, #0]
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	681b      	ldr	r3, [r3, #0]
 80113e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80113ea:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	7e9b      	ldrb	r3, [r3, #26]
 80113f0:	2b01      	cmp	r3, #1
 80113f2:	d108      	bne.n	8011406 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	681b      	ldr	r3, [r3, #0]
 80113f8:	681a      	ldr	r2, [r3, #0]
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	681b      	ldr	r3, [r3, #0]
 80113fe:	f042 0220 	orr.w	r2, r2, #32
 8011402:	601a      	str	r2, [r3, #0]
 8011404:	e007      	b.n	8011416 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	681b      	ldr	r3, [r3, #0]
 801140a:	681a      	ldr	r2, [r3, #0]
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	681b      	ldr	r3, [r3, #0]
 8011410:	f022 0220 	bic.w	r2, r2, #32
 8011414:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	7edb      	ldrb	r3, [r3, #27]
 801141a:	2b01      	cmp	r3, #1
 801141c:	d108      	bne.n	8011430 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	681b      	ldr	r3, [r3, #0]
 8011422:	681a      	ldr	r2, [r3, #0]
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	681b      	ldr	r3, [r3, #0]
 8011428:	f022 0210 	bic.w	r2, r2, #16
 801142c:	601a      	str	r2, [r3, #0]
 801142e:	e007      	b.n	8011440 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	681b      	ldr	r3, [r3, #0]
 8011434:	681a      	ldr	r2, [r3, #0]
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	681b      	ldr	r3, [r3, #0]
 801143a:	f042 0210 	orr.w	r2, r2, #16
 801143e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	7f1b      	ldrb	r3, [r3, #28]
 8011444:	2b01      	cmp	r3, #1
 8011446:	d108      	bne.n	801145a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	681b      	ldr	r3, [r3, #0]
 801144c:	681a      	ldr	r2, [r3, #0]
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	681b      	ldr	r3, [r3, #0]
 8011452:	f042 0208 	orr.w	r2, r2, #8
 8011456:	601a      	str	r2, [r3, #0]
 8011458:	e007      	b.n	801146a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	681b      	ldr	r3, [r3, #0]
 801145e:	681a      	ldr	r2, [r3, #0]
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	681b      	ldr	r3, [r3, #0]
 8011464:	f022 0208 	bic.w	r2, r2, #8
 8011468:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	7f5b      	ldrb	r3, [r3, #29]
 801146e:	2b01      	cmp	r3, #1
 8011470:	d108      	bne.n	8011484 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	681b      	ldr	r3, [r3, #0]
 8011476:	681a      	ldr	r2, [r3, #0]
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	681b      	ldr	r3, [r3, #0]
 801147c:	f042 0204 	orr.w	r2, r2, #4
 8011480:	601a      	str	r2, [r3, #0]
 8011482:	e007      	b.n	8011494 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	681b      	ldr	r3, [r3, #0]
 8011488:	681a      	ldr	r2, [r3, #0]
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	681b      	ldr	r3, [r3, #0]
 801148e:	f022 0204 	bic.w	r2, r2, #4
 8011492:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	689a      	ldr	r2, [r3, #8]
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	68db      	ldr	r3, [r3, #12]
 801149c:	431a      	orrs	r2, r3
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	691b      	ldr	r3, [r3, #16]
 80114a2:	431a      	orrs	r2, r3
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	695b      	ldr	r3, [r3, #20]
 80114a8:	ea42 0103 	orr.w	r1, r2, r3
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	685b      	ldr	r3, [r3, #4]
 80114b0:	1e5a      	subs	r2, r3, #1
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	681b      	ldr	r3, [r3, #0]
 80114b6:	430a      	orrs	r2, r1
 80114b8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	2200      	movs	r2, #0
 80114be:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	2201      	movs	r2, #1
 80114c4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80114c8:	2300      	movs	r3, #0
}
 80114ca:	4618      	mov	r0, r3
 80114cc:	3710      	adds	r7, #16
 80114ce:	46bd      	mov	sp, r7
 80114d0:	bd80      	pop	{r7, pc}
	...

080114d4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80114d4:	b480      	push	{r7}
 80114d6:	b087      	sub	sp, #28
 80114d8:	af00      	add	r7, sp, #0
 80114da:	6078      	str	r0, [r7, #4]
 80114dc:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	681b      	ldr	r3, [r3, #0]
 80114e2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80114ea:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80114ec:	7cfb      	ldrb	r3, [r7, #19]
 80114ee:	2b01      	cmp	r3, #1
 80114f0:	d003      	beq.n	80114fa <HAL_CAN_ConfigFilter+0x26>
 80114f2:	7cfb      	ldrb	r3, [r7, #19]
 80114f4:	2b02      	cmp	r3, #2
 80114f6:	f040 80be 	bne.w	8011676 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80114fa:	4b65      	ldr	r3, [pc, #404]	; (8011690 <HAL_CAN_ConfigFilter+0x1bc>)
 80114fc:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80114fe:	697b      	ldr	r3, [r7, #20]
 8011500:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011504:	f043 0201 	orr.w	r2, r3, #1
 8011508:	697b      	ldr	r3, [r7, #20]
 801150a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 801150e:	697b      	ldr	r3, [r7, #20]
 8011510:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011514:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8011518:	697b      	ldr	r3, [r7, #20]
 801151a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 801151e:	697b      	ldr	r3, [r7, #20]
 8011520:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8011524:	683b      	ldr	r3, [r7, #0]
 8011526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011528:	021b      	lsls	r3, r3, #8
 801152a:	431a      	orrs	r2, r3
 801152c:	697b      	ldr	r3, [r7, #20]
 801152e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8011532:	683b      	ldr	r3, [r7, #0]
 8011534:	695b      	ldr	r3, [r3, #20]
 8011536:	f003 031f 	and.w	r3, r3, #31
 801153a:	2201      	movs	r2, #1
 801153c:	fa02 f303 	lsl.w	r3, r2, r3
 8011540:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8011542:	697b      	ldr	r3, [r7, #20]
 8011544:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8011548:	68fb      	ldr	r3, [r7, #12]
 801154a:	43db      	mvns	r3, r3
 801154c:	401a      	ands	r2, r3
 801154e:	697b      	ldr	r3, [r7, #20]
 8011550:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8011554:	683b      	ldr	r3, [r7, #0]
 8011556:	69db      	ldr	r3, [r3, #28]
 8011558:	2b00      	cmp	r3, #0
 801155a:	d123      	bne.n	80115a4 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 801155c:	697b      	ldr	r3, [r7, #20]
 801155e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8011562:	68fb      	ldr	r3, [r7, #12]
 8011564:	43db      	mvns	r3, r3
 8011566:	401a      	ands	r2, r3
 8011568:	697b      	ldr	r3, [r7, #20]
 801156a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 801156e:	683b      	ldr	r3, [r7, #0]
 8011570:	68db      	ldr	r3, [r3, #12]
 8011572:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8011574:	683b      	ldr	r3, [r7, #0]
 8011576:	685b      	ldr	r3, [r3, #4]
 8011578:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 801157a:	683a      	ldr	r2, [r7, #0]
 801157c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 801157e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8011580:	697b      	ldr	r3, [r7, #20]
 8011582:	3248      	adds	r2, #72	; 0x48
 8011584:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8011588:	683b      	ldr	r3, [r7, #0]
 801158a:	689b      	ldr	r3, [r3, #8]
 801158c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 801158e:	683b      	ldr	r3, [r7, #0]
 8011590:	681b      	ldr	r3, [r3, #0]
 8011592:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8011594:	683b      	ldr	r3, [r7, #0]
 8011596:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8011598:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 801159a:	6979      	ldr	r1, [r7, #20]
 801159c:	3348      	adds	r3, #72	; 0x48
 801159e:	00db      	lsls	r3, r3, #3
 80115a0:	440b      	add	r3, r1
 80115a2:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80115a4:	683b      	ldr	r3, [r7, #0]
 80115a6:	69db      	ldr	r3, [r3, #28]
 80115a8:	2b01      	cmp	r3, #1
 80115aa:	d122      	bne.n	80115f2 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80115ac:	697b      	ldr	r3, [r7, #20]
 80115ae:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80115b2:	68fb      	ldr	r3, [r7, #12]
 80115b4:	431a      	orrs	r2, r3
 80115b6:	697b      	ldr	r3, [r7, #20]
 80115b8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80115bc:	683b      	ldr	r3, [r7, #0]
 80115be:	681b      	ldr	r3, [r3, #0]
 80115c0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80115c2:	683b      	ldr	r3, [r7, #0]
 80115c4:	685b      	ldr	r3, [r3, #4]
 80115c6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80115c8:	683a      	ldr	r2, [r7, #0]
 80115ca:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80115cc:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80115ce:	697b      	ldr	r3, [r7, #20]
 80115d0:	3248      	adds	r2, #72	; 0x48
 80115d2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80115d6:	683b      	ldr	r3, [r7, #0]
 80115d8:	689b      	ldr	r3, [r3, #8]
 80115da:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80115dc:	683b      	ldr	r3, [r7, #0]
 80115de:	68db      	ldr	r3, [r3, #12]
 80115e0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80115e2:	683b      	ldr	r3, [r7, #0]
 80115e4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80115e6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80115e8:	6979      	ldr	r1, [r7, #20]
 80115ea:	3348      	adds	r3, #72	; 0x48
 80115ec:	00db      	lsls	r3, r3, #3
 80115ee:	440b      	add	r3, r1
 80115f0:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80115f2:	683b      	ldr	r3, [r7, #0]
 80115f4:	699b      	ldr	r3, [r3, #24]
 80115f6:	2b00      	cmp	r3, #0
 80115f8:	d109      	bne.n	801160e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80115fa:	697b      	ldr	r3, [r7, #20]
 80115fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011600:	68fb      	ldr	r3, [r7, #12]
 8011602:	43db      	mvns	r3, r3
 8011604:	401a      	ands	r2, r3
 8011606:	697b      	ldr	r3, [r7, #20]
 8011608:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 801160c:	e007      	b.n	801161e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 801160e:	697b      	ldr	r3, [r7, #20]
 8011610:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011614:	68fb      	ldr	r3, [r7, #12]
 8011616:	431a      	orrs	r2, r3
 8011618:	697b      	ldr	r3, [r7, #20]
 801161a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 801161e:	683b      	ldr	r3, [r7, #0]
 8011620:	691b      	ldr	r3, [r3, #16]
 8011622:	2b00      	cmp	r3, #0
 8011624:	d109      	bne.n	801163a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8011626:	697b      	ldr	r3, [r7, #20]
 8011628:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 801162c:	68fb      	ldr	r3, [r7, #12]
 801162e:	43db      	mvns	r3, r3
 8011630:	401a      	ands	r2, r3
 8011632:	697b      	ldr	r3, [r7, #20]
 8011634:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8011638:	e007      	b.n	801164a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 801163a:	697b      	ldr	r3, [r7, #20]
 801163c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8011640:	68fb      	ldr	r3, [r7, #12]
 8011642:	431a      	orrs	r2, r3
 8011644:	697b      	ldr	r3, [r7, #20]
 8011646:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 801164a:	683b      	ldr	r3, [r7, #0]
 801164c:	6a1b      	ldr	r3, [r3, #32]
 801164e:	2b01      	cmp	r3, #1
 8011650:	d107      	bne.n	8011662 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8011652:	697b      	ldr	r3, [r7, #20]
 8011654:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8011658:	68fb      	ldr	r3, [r7, #12]
 801165a:	431a      	orrs	r2, r3
 801165c:	697b      	ldr	r3, [r7, #20]
 801165e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8011662:	697b      	ldr	r3, [r7, #20]
 8011664:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011668:	f023 0201 	bic.w	r2, r3, #1
 801166c:	697b      	ldr	r3, [r7, #20]
 801166e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8011672:	2300      	movs	r3, #0
 8011674:	e006      	b.n	8011684 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801167a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8011682:	2301      	movs	r3, #1
  }
}
 8011684:	4618      	mov	r0, r3
 8011686:	371c      	adds	r7, #28
 8011688:	46bd      	mov	sp, r7
 801168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801168e:	4770      	bx	lr
 8011690:	40006400 	.word	0x40006400

08011694 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8011694:	b580      	push	{r7, lr}
 8011696:	b084      	sub	sp, #16
 8011698:	af00      	add	r7, sp, #0
 801169a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80116a2:	b2db      	uxtb	r3, r3
 80116a4:	2b01      	cmp	r3, #1
 80116a6:	d12e      	bne.n	8011706 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	2202      	movs	r2, #2
 80116ac:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	681b      	ldr	r3, [r3, #0]
 80116b4:	681a      	ldr	r2, [r3, #0]
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	681b      	ldr	r3, [r3, #0]
 80116ba:	f022 0201 	bic.w	r2, r2, #1
 80116be:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80116c0:	f7ff f880 	bl	80107c4 <HAL_GetTick>
 80116c4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80116c6:	e012      	b.n	80116ee <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80116c8:	f7ff f87c 	bl	80107c4 <HAL_GetTick>
 80116cc:	4602      	mov	r2, r0
 80116ce:	68fb      	ldr	r3, [r7, #12]
 80116d0:	1ad3      	subs	r3, r2, r3
 80116d2:	2b0a      	cmp	r3, #10
 80116d4:	d90b      	bls.n	80116ee <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116da:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	2205      	movs	r2, #5
 80116e6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80116ea:	2301      	movs	r3, #1
 80116ec:	e012      	b.n	8011714 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	681b      	ldr	r3, [r3, #0]
 80116f2:	685b      	ldr	r3, [r3, #4]
 80116f4:	f003 0301 	and.w	r3, r3, #1
 80116f8:	2b00      	cmp	r3, #0
 80116fa:	d1e5      	bne.n	80116c8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	2200      	movs	r2, #0
 8011700:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8011702:	2300      	movs	r3, #0
 8011704:	e006      	b.n	8011714 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801170a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8011712:	2301      	movs	r3, #1
  }
}
 8011714:	4618      	mov	r0, r3
 8011716:	3710      	adds	r7, #16
 8011718:	46bd      	mov	sp, r7
 801171a:	bd80      	pop	{r7, pc}

0801171c <HAL_CAN_WakeUp>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_CAN_WakeUp(CAN_HandleTypeDef *hcan)
{
 801171c:	b480      	push	{r7}
 801171e:	b087      	sub	sp, #28
 8011720:	af00      	add	r7, sp, #0
 8011722:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 8011724:	2300      	movs	r3, #0
 8011726:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = 1000000U;
 8011728:	4b1c      	ldr	r3, [pc, #112]	; (801179c <HAL_CAN_WakeUp+0x80>)
 801172a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011732:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8011734:	7cfb      	ldrb	r3, [r7, #19]
 8011736:	2b01      	cmp	r3, #1
 8011738:	d002      	beq.n	8011740 <HAL_CAN_WakeUp+0x24>
 801173a:	7cfb      	ldrb	r3, [r7, #19]
 801173c:	2b02      	cmp	r3, #2
 801173e:	d11f      	bne.n	8011780 <HAL_CAN_WakeUp+0x64>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Wake up request */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	681b      	ldr	r3, [r3, #0]
 8011744:	681a      	ldr	r2, [r3, #0]
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	681b      	ldr	r3, [r3, #0]
 801174a:	f022 0202 	bic.w	r2, r2, #2
 801174e:	601a      	str	r2, [r3, #0]

    /* Wait sleep mode is exited */
    do
    {
      /* Increment counter */
      count++;
 8011750:	68fb      	ldr	r3, [r7, #12]
 8011752:	3301      	adds	r3, #1
 8011754:	60fb      	str	r3, [r7, #12]

      /* Check if timeout is reached */
      if (count > timeout)
 8011756:	68fb      	ldr	r3, [r7, #12]
 8011758:	697a      	ldr	r2, [r7, #20]
 801175a:	429a      	cmp	r2, r3
 801175c:	d207      	bcs.n	801176e <HAL_CAN_WakeUp+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011762:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 801176a:	2301      	movs	r3, #1
 801176c:	e00f      	b.n	801178e <HAL_CAN_WakeUp+0x72>
      }
    }
    while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U);
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	681b      	ldr	r3, [r3, #0]
 8011772:	685b      	ldr	r3, [r3, #4]
 8011774:	f003 0302 	and.w	r3, r3, #2
 8011778:	2b00      	cmp	r3, #0
 801177a:	d1e9      	bne.n	8011750 <HAL_CAN_WakeUp+0x34>

    /* Return function status */
    return HAL_OK;
 801177c:	2300      	movs	r3, #0
 801177e:	e006      	b.n	801178e <HAL_CAN_WakeUp+0x72>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011784:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 801178c:	2301      	movs	r3, #1
  }
}
 801178e:	4618      	mov	r0, r3
 8011790:	371c      	adds	r7, #28
 8011792:	46bd      	mov	sp, r7
 8011794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011798:	4770      	bx	lr
 801179a:	bf00      	nop
 801179c:	000f4240 	.word	0x000f4240

080117a0 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80117a0:	b480      	push	{r7}
 80117a2:	b087      	sub	sp, #28
 80117a4:	af00      	add	r7, sp, #0
 80117a6:	60f8      	str	r0, [r7, #12]
 80117a8:	60b9      	str	r1, [r7, #8]
 80117aa:	607a      	str	r2, [r7, #4]
 80117ac:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80117ae:	68fb      	ldr	r3, [r7, #12]
 80117b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80117b4:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80117b6:	7dfb      	ldrb	r3, [r7, #23]
 80117b8:	2b01      	cmp	r3, #1
 80117ba:	d003      	beq.n	80117c4 <HAL_CAN_GetRxMessage+0x24>
 80117bc:	7dfb      	ldrb	r3, [r7, #23]
 80117be:	2b02      	cmp	r3, #2
 80117c0:	f040 80f3 	bne.w	80119aa <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80117c4:	68bb      	ldr	r3, [r7, #8]
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	d10e      	bne.n	80117e8 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80117ca:	68fb      	ldr	r3, [r7, #12]
 80117cc:	681b      	ldr	r3, [r3, #0]
 80117ce:	68db      	ldr	r3, [r3, #12]
 80117d0:	f003 0303 	and.w	r3, r3, #3
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	d116      	bne.n	8011806 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80117d8:	68fb      	ldr	r3, [r7, #12]
 80117da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80117dc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80117e0:	68fb      	ldr	r3, [r7, #12]
 80117e2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80117e4:	2301      	movs	r3, #1
 80117e6:	e0e7      	b.n	80119b8 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80117e8:	68fb      	ldr	r3, [r7, #12]
 80117ea:	681b      	ldr	r3, [r3, #0]
 80117ec:	691b      	ldr	r3, [r3, #16]
 80117ee:	f003 0303 	and.w	r3, r3, #3
 80117f2:	2b00      	cmp	r3, #0
 80117f4:	d107      	bne.n	8011806 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80117f6:	68fb      	ldr	r3, [r7, #12]
 80117f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80117fa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80117fe:	68fb      	ldr	r3, [r7, #12]
 8011800:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8011802:	2301      	movs	r3, #1
 8011804:	e0d8      	b.n	80119b8 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8011806:	68fb      	ldr	r3, [r7, #12]
 8011808:	681a      	ldr	r2, [r3, #0]
 801180a:	68bb      	ldr	r3, [r7, #8]
 801180c:	331b      	adds	r3, #27
 801180e:	011b      	lsls	r3, r3, #4
 8011810:	4413      	add	r3, r2
 8011812:	681b      	ldr	r3, [r3, #0]
 8011814:	f003 0204 	and.w	r2, r3, #4
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	689b      	ldr	r3, [r3, #8]
 8011820:	2b00      	cmp	r3, #0
 8011822:	d10c      	bne.n	801183e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8011824:	68fb      	ldr	r3, [r7, #12]
 8011826:	681a      	ldr	r2, [r3, #0]
 8011828:	68bb      	ldr	r3, [r7, #8]
 801182a:	331b      	adds	r3, #27
 801182c:	011b      	lsls	r3, r3, #4
 801182e:	4413      	add	r3, r2
 8011830:	681b      	ldr	r3, [r3, #0]
 8011832:	0d5b      	lsrs	r3, r3, #21
 8011834:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	601a      	str	r2, [r3, #0]
 801183c:	e00b      	b.n	8011856 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 801183e:	68fb      	ldr	r3, [r7, #12]
 8011840:	681a      	ldr	r2, [r3, #0]
 8011842:	68bb      	ldr	r3, [r7, #8]
 8011844:	331b      	adds	r3, #27
 8011846:	011b      	lsls	r3, r3, #4
 8011848:	4413      	add	r3, r2
 801184a:	681b      	ldr	r3, [r3, #0]
 801184c:	08db      	lsrs	r3, r3, #3
 801184e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8011856:	68fb      	ldr	r3, [r7, #12]
 8011858:	681a      	ldr	r2, [r3, #0]
 801185a:	68bb      	ldr	r3, [r7, #8]
 801185c:	331b      	adds	r3, #27
 801185e:	011b      	lsls	r3, r3, #4
 8011860:	4413      	add	r3, r2
 8011862:	681b      	ldr	r3, [r3, #0]
 8011864:	f003 0202 	and.w	r2, r3, #2
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 801186c:	68fb      	ldr	r3, [r7, #12]
 801186e:	681a      	ldr	r2, [r3, #0]
 8011870:	68bb      	ldr	r3, [r7, #8]
 8011872:	331b      	adds	r3, #27
 8011874:	011b      	lsls	r3, r3, #4
 8011876:	4413      	add	r3, r2
 8011878:	3304      	adds	r3, #4
 801187a:	681b      	ldr	r3, [r3, #0]
 801187c:	f003 020f 	and.w	r2, r3, #15
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8011884:	68fb      	ldr	r3, [r7, #12]
 8011886:	681a      	ldr	r2, [r3, #0]
 8011888:	68bb      	ldr	r3, [r7, #8]
 801188a:	331b      	adds	r3, #27
 801188c:	011b      	lsls	r3, r3, #4
 801188e:	4413      	add	r3, r2
 8011890:	3304      	adds	r3, #4
 8011892:	681b      	ldr	r3, [r3, #0]
 8011894:	0a1b      	lsrs	r3, r3, #8
 8011896:	b2da      	uxtb	r2, r3
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 801189c:	68fb      	ldr	r3, [r7, #12]
 801189e:	681a      	ldr	r2, [r3, #0]
 80118a0:	68bb      	ldr	r3, [r7, #8]
 80118a2:	331b      	adds	r3, #27
 80118a4:	011b      	lsls	r3, r3, #4
 80118a6:	4413      	add	r3, r2
 80118a8:	3304      	adds	r3, #4
 80118aa:	681b      	ldr	r3, [r3, #0]
 80118ac:	0c1b      	lsrs	r3, r3, #16
 80118ae:	b29a      	uxth	r2, r3
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80118b4:	68fb      	ldr	r3, [r7, #12]
 80118b6:	681a      	ldr	r2, [r3, #0]
 80118b8:	68bb      	ldr	r3, [r7, #8]
 80118ba:	011b      	lsls	r3, r3, #4
 80118bc:	4413      	add	r3, r2
 80118be:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80118c2:	681b      	ldr	r3, [r3, #0]
 80118c4:	b2da      	uxtb	r2, r3
 80118c6:	683b      	ldr	r3, [r7, #0]
 80118c8:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80118ca:	68fb      	ldr	r3, [r7, #12]
 80118cc:	681a      	ldr	r2, [r3, #0]
 80118ce:	68bb      	ldr	r3, [r7, #8]
 80118d0:	011b      	lsls	r3, r3, #4
 80118d2:	4413      	add	r3, r2
 80118d4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80118d8:	681b      	ldr	r3, [r3, #0]
 80118da:	0a1a      	lsrs	r2, r3, #8
 80118dc:	683b      	ldr	r3, [r7, #0]
 80118de:	3301      	adds	r3, #1
 80118e0:	b2d2      	uxtb	r2, r2
 80118e2:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80118e4:	68fb      	ldr	r3, [r7, #12]
 80118e6:	681a      	ldr	r2, [r3, #0]
 80118e8:	68bb      	ldr	r3, [r7, #8]
 80118ea:	011b      	lsls	r3, r3, #4
 80118ec:	4413      	add	r3, r2
 80118ee:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80118f2:	681b      	ldr	r3, [r3, #0]
 80118f4:	0c1a      	lsrs	r2, r3, #16
 80118f6:	683b      	ldr	r3, [r7, #0]
 80118f8:	3302      	adds	r3, #2
 80118fa:	b2d2      	uxtb	r2, r2
 80118fc:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80118fe:	68fb      	ldr	r3, [r7, #12]
 8011900:	681a      	ldr	r2, [r3, #0]
 8011902:	68bb      	ldr	r3, [r7, #8]
 8011904:	011b      	lsls	r3, r3, #4
 8011906:	4413      	add	r3, r2
 8011908:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 801190c:	681b      	ldr	r3, [r3, #0]
 801190e:	0e1a      	lsrs	r2, r3, #24
 8011910:	683b      	ldr	r3, [r7, #0]
 8011912:	3303      	adds	r3, #3
 8011914:	b2d2      	uxtb	r2, r2
 8011916:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8011918:	68fb      	ldr	r3, [r7, #12]
 801191a:	681a      	ldr	r2, [r3, #0]
 801191c:	68bb      	ldr	r3, [r7, #8]
 801191e:	011b      	lsls	r3, r3, #4
 8011920:	4413      	add	r3, r2
 8011922:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8011926:	681a      	ldr	r2, [r3, #0]
 8011928:	683b      	ldr	r3, [r7, #0]
 801192a:	3304      	adds	r3, #4
 801192c:	b2d2      	uxtb	r2, r2
 801192e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8011930:	68fb      	ldr	r3, [r7, #12]
 8011932:	681a      	ldr	r2, [r3, #0]
 8011934:	68bb      	ldr	r3, [r7, #8]
 8011936:	011b      	lsls	r3, r3, #4
 8011938:	4413      	add	r3, r2
 801193a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 801193e:	681b      	ldr	r3, [r3, #0]
 8011940:	0a1a      	lsrs	r2, r3, #8
 8011942:	683b      	ldr	r3, [r7, #0]
 8011944:	3305      	adds	r3, #5
 8011946:	b2d2      	uxtb	r2, r2
 8011948:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 801194a:	68fb      	ldr	r3, [r7, #12]
 801194c:	681a      	ldr	r2, [r3, #0]
 801194e:	68bb      	ldr	r3, [r7, #8]
 8011950:	011b      	lsls	r3, r3, #4
 8011952:	4413      	add	r3, r2
 8011954:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8011958:	681b      	ldr	r3, [r3, #0]
 801195a:	0c1a      	lsrs	r2, r3, #16
 801195c:	683b      	ldr	r3, [r7, #0]
 801195e:	3306      	adds	r3, #6
 8011960:	b2d2      	uxtb	r2, r2
 8011962:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8011964:	68fb      	ldr	r3, [r7, #12]
 8011966:	681a      	ldr	r2, [r3, #0]
 8011968:	68bb      	ldr	r3, [r7, #8]
 801196a:	011b      	lsls	r3, r3, #4
 801196c:	4413      	add	r3, r2
 801196e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8011972:	681b      	ldr	r3, [r3, #0]
 8011974:	0e1a      	lsrs	r2, r3, #24
 8011976:	683b      	ldr	r3, [r7, #0]
 8011978:	3307      	adds	r3, #7
 801197a:	b2d2      	uxtb	r2, r2
 801197c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 801197e:	68bb      	ldr	r3, [r7, #8]
 8011980:	2b00      	cmp	r3, #0
 8011982:	d108      	bne.n	8011996 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8011984:	68fb      	ldr	r3, [r7, #12]
 8011986:	681b      	ldr	r3, [r3, #0]
 8011988:	68da      	ldr	r2, [r3, #12]
 801198a:	68fb      	ldr	r3, [r7, #12]
 801198c:	681b      	ldr	r3, [r3, #0]
 801198e:	f042 0220 	orr.w	r2, r2, #32
 8011992:	60da      	str	r2, [r3, #12]
 8011994:	e007      	b.n	80119a6 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8011996:	68fb      	ldr	r3, [r7, #12]
 8011998:	681b      	ldr	r3, [r3, #0]
 801199a:	691a      	ldr	r2, [r3, #16]
 801199c:	68fb      	ldr	r3, [r7, #12]
 801199e:	681b      	ldr	r3, [r3, #0]
 80119a0:	f042 0220 	orr.w	r2, r2, #32
 80119a4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80119a6:	2300      	movs	r3, #0
 80119a8:	e006      	b.n	80119b8 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80119aa:	68fb      	ldr	r3, [r7, #12]
 80119ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80119ae:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80119b2:	68fb      	ldr	r3, [r7, #12]
 80119b4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80119b6:	2301      	movs	r3, #1
  }
}
 80119b8:	4618      	mov	r0, r3
 80119ba:	371c      	adds	r7, #28
 80119bc:	46bd      	mov	sp, r7
 80119be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119c2:	4770      	bx	lr

080119c4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80119c4:	b480      	push	{r7}
 80119c6:	b085      	sub	sp, #20
 80119c8:	af00      	add	r7, sp, #0
 80119ca:	6078      	str	r0, [r7, #4]
 80119cc:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80119d4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80119d6:	7bfb      	ldrb	r3, [r7, #15]
 80119d8:	2b01      	cmp	r3, #1
 80119da:	d002      	beq.n	80119e2 <HAL_CAN_ActivateNotification+0x1e>
 80119dc:	7bfb      	ldrb	r3, [r7, #15]
 80119de:	2b02      	cmp	r3, #2
 80119e0:	d109      	bne.n	80119f6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	681b      	ldr	r3, [r3, #0]
 80119e6:	6959      	ldr	r1, [r3, #20]
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	681b      	ldr	r3, [r3, #0]
 80119ec:	683a      	ldr	r2, [r7, #0]
 80119ee:	430a      	orrs	r2, r1
 80119f0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80119f2:	2300      	movs	r3, #0
 80119f4:	e006      	b.n	8011a04 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80119fa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8011a02:	2301      	movs	r3, #1
  }
}
 8011a04:	4618      	mov	r0, r3
 8011a06:	3714      	adds	r7, #20
 8011a08:	46bd      	mov	sp, r7
 8011a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a0e:	4770      	bx	lr

08011a10 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8011a10:	b580      	push	{r7, lr}
 8011a12:	b08a      	sub	sp, #40	; 0x28
 8011a14:	af00      	add	r7, sp, #0
 8011a16:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8011a18:	2300      	movs	r3, #0
 8011a1a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	681b      	ldr	r3, [r3, #0]
 8011a20:	695b      	ldr	r3, [r3, #20]
 8011a22:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	681b      	ldr	r3, [r3, #0]
 8011a28:	685b      	ldr	r3, [r3, #4]
 8011a2a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	681b      	ldr	r3, [r3, #0]
 8011a30:	689b      	ldr	r3, [r3, #8]
 8011a32:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	681b      	ldr	r3, [r3, #0]
 8011a38:	68db      	ldr	r3, [r3, #12]
 8011a3a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	681b      	ldr	r3, [r3, #0]
 8011a40:	691b      	ldr	r3, [r3, #16]
 8011a42:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	681b      	ldr	r3, [r3, #0]
 8011a48:	699b      	ldr	r3, [r3, #24]
 8011a4a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8011a4c:	6a3b      	ldr	r3, [r7, #32]
 8011a4e:	f003 0301 	and.w	r3, r3, #1
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	d07c      	beq.n	8011b50 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8011a56:	69bb      	ldr	r3, [r7, #24]
 8011a58:	f003 0301 	and.w	r3, r3, #1
 8011a5c:	2b00      	cmp	r3, #0
 8011a5e:	d023      	beq.n	8011aa8 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	681b      	ldr	r3, [r3, #0]
 8011a64:	2201      	movs	r2, #1
 8011a66:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8011a68:	69bb      	ldr	r3, [r7, #24]
 8011a6a:	f003 0302 	and.w	r3, r3, #2
 8011a6e:	2b00      	cmp	r3, #0
 8011a70:	d003      	beq.n	8011a7a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8011a72:	6878      	ldr	r0, [r7, #4]
 8011a74:	f000 f983 	bl	8011d7e <HAL_CAN_TxMailbox0CompleteCallback>
 8011a78:	e016      	b.n	8011aa8 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8011a7a:	69bb      	ldr	r3, [r7, #24]
 8011a7c:	f003 0304 	and.w	r3, r3, #4
 8011a80:	2b00      	cmp	r3, #0
 8011a82:	d004      	beq.n	8011a8e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8011a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a86:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8011a8a:	627b      	str	r3, [r7, #36]	; 0x24
 8011a8c:	e00c      	b.n	8011aa8 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8011a8e:	69bb      	ldr	r3, [r7, #24]
 8011a90:	f003 0308 	and.w	r3, r3, #8
 8011a94:	2b00      	cmp	r3, #0
 8011a96:	d004      	beq.n	8011aa2 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8011a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a9a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8011a9e:	627b      	str	r3, [r7, #36]	; 0x24
 8011aa0:	e002      	b.n	8011aa8 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8011aa2:	6878      	ldr	r0, [r7, #4]
 8011aa4:	f000 f989 	bl	8011dba <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8011aa8:	69bb      	ldr	r3, [r7, #24]
 8011aaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011aae:	2b00      	cmp	r3, #0
 8011ab0:	d024      	beq.n	8011afc <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	681b      	ldr	r3, [r3, #0]
 8011ab6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011aba:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8011abc:	69bb      	ldr	r3, [r7, #24]
 8011abe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	d003      	beq.n	8011ace <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8011ac6:	6878      	ldr	r0, [r7, #4]
 8011ac8:	f000 f963 	bl	8011d92 <HAL_CAN_TxMailbox1CompleteCallback>
 8011acc:	e016      	b.n	8011afc <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8011ace:	69bb      	ldr	r3, [r7, #24]
 8011ad0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011ad4:	2b00      	cmp	r3, #0
 8011ad6:	d004      	beq.n	8011ae2 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8011ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ada:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8011ade:	627b      	str	r3, [r7, #36]	; 0x24
 8011ae0:	e00c      	b.n	8011afc <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8011ae2:	69bb      	ldr	r3, [r7, #24]
 8011ae4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011ae8:	2b00      	cmp	r3, #0
 8011aea:	d004      	beq.n	8011af6 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8011aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011aee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8011af2:	627b      	str	r3, [r7, #36]	; 0x24
 8011af4:	e002      	b.n	8011afc <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8011af6:	6878      	ldr	r0, [r7, #4]
 8011af8:	f000 f969 	bl	8011dce <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8011afc:	69bb      	ldr	r3, [r7, #24]
 8011afe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011b02:	2b00      	cmp	r3, #0
 8011b04:	d024      	beq.n	8011b50 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	681b      	ldr	r3, [r3, #0]
 8011b0a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8011b0e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8011b10:	69bb      	ldr	r3, [r7, #24]
 8011b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011b16:	2b00      	cmp	r3, #0
 8011b18:	d003      	beq.n	8011b22 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8011b1a:	6878      	ldr	r0, [r7, #4]
 8011b1c:	f000 f943 	bl	8011da6 <HAL_CAN_TxMailbox2CompleteCallback>
 8011b20:	e016      	b.n	8011b50 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8011b22:	69bb      	ldr	r3, [r7, #24]
 8011b24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8011b28:	2b00      	cmp	r3, #0
 8011b2a:	d004      	beq.n	8011b36 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8011b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011b32:	627b      	str	r3, [r7, #36]	; 0x24
 8011b34:	e00c      	b.n	8011b50 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8011b36:	69bb      	ldr	r3, [r7, #24]
 8011b38:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8011b3c:	2b00      	cmp	r3, #0
 8011b3e:	d004      	beq.n	8011b4a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8011b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011b46:	627b      	str	r3, [r7, #36]	; 0x24
 8011b48:	e002      	b.n	8011b50 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8011b4a:	6878      	ldr	r0, [r7, #4]
 8011b4c:	f000 f949 	bl	8011de2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8011b50:	6a3b      	ldr	r3, [r7, #32]
 8011b52:	f003 0308 	and.w	r3, r3, #8
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	d00c      	beq.n	8011b74 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8011b5a:	697b      	ldr	r3, [r7, #20]
 8011b5c:	f003 0310 	and.w	r3, r3, #16
 8011b60:	2b00      	cmp	r3, #0
 8011b62:	d007      	beq.n	8011b74 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8011b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8011b6a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	681b      	ldr	r3, [r3, #0]
 8011b70:	2210      	movs	r2, #16
 8011b72:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8011b74:	6a3b      	ldr	r3, [r7, #32]
 8011b76:	f003 0304 	and.w	r3, r3, #4
 8011b7a:	2b00      	cmp	r3, #0
 8011b7c:	d00b      	beq.n	8011b96 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8011b7e:	697b      	ldr	r3, [r7, #20]
 8011b80:	f003 0308 	and.w	r3, r3, #8
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	d006      	beq.n	8011b96 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	681b      	ldr	r3, [r3, #0]
 8011b8c:	2208      	movs	r2, #8
 8011b8e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8011b90:	6878      	ldr	r0, [r7, #4]
 8011b92:	f000 f930 	bl	8011df6 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8011b96:	6a3b      	ldr	r3, [r7, #32]
 8011b98:	f003 0302 	and.w	r3, r3, #2
 8011b9c:	2b00      	cmp	r3, #0
 8011b9e:	d009      	beq.n	8011bb4 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	681b      	ldr	r3, [r3, #0]
 8011ba4:	68db      	ldr	r3, [r3, #12]
 8011ba6:	f003 0303 	and.w	r3, r3, #3
 8011baa:	2b00      	cmp	r3, #0
 8011bac:	d002      	beq.n	8011bb4 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8011bae:	6878      	ldr	r0, [r7, #4]
 8011bb0:	f7ef fdde 	bl	8001770 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8011bb4:	6a3b      	ldr	r3, [r7, #32]
 8011bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011bba:	2b00      	cmp	r3, #0
 8011bbc:	d00c      	beq.n	8011bd8 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8011bbe:	693b      	ldr	r3, [r7, #16]
 8011bc0:	f003 0310 	and.w	r3, r3, #16
 8011bc4:	2b00      	cmp	r3, #0
 8011bc6:	d007      	beq.n	8011bd8 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8011bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8011bce:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	681b      	ldr	r3, [r3, #0]
 8011bd4:	2210      	movs	r2, #16
 8011bd6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8011bd8:	6a3b      	ldr	r3, [r7, #32]
 8011bda:	f003 0320 	and.w	r3, r3, #32
 8011bde:	2b00      	cmp	r3, #0
 8011be0:	d00b      	beq.n	8011bfa <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8011be2:	693b      	ldr	r3, [r7, #16]
 8011be4:	f003 0308 	and.w	r3, r3, #8
 8011be8:	2b00      	cmp	r3, #0
 8011bea:	d006      	beq.n	8011bfa <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	681b      	ldr	r3, [r3, #0]
 8011bf0:	2208      	movs	r2, #8
 8011bf2:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8011bf4:	6878      	ldr	r0, [r7, #4]
 8011bf6:	f000 f908 	bl	8011e0a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8011bfa:	6a3b      	ldr	r3, [r7, #32]
 8011bfc:	f003 0310 	and.w	r3, r3, #16
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	d009      	beq.n	8011c18 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	681b      	ldr	r3, [r3, #0]
 8011c08:	691b      	ldr	r3, [r3, #16]
 8011c0a:	f003 0303 	and.w	r3, r3, #3
 8011c0e:	2b00      	cmp	r3, #0
 8011c10:	d002      	beq.n	8011c18 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8011c12:	6878      	ldr	r0, [r7, #4]
 8011c14:	f7ef fdf8 	bl	8001808 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8011c18:	6a3b      	ldr	r3, [r7, #32]
 8011c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011c1e:	2b00      	cmp	r3, #0
 8011c20:	d00b      	beq.n	8011c3a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8011c22:	69fb      	ldr	r3, [r7, #28]
 8011c24:	f003 0310 	and.w	r3, r3, #16
 8011c28:	2b00      	cmp	r3, #0
 8011c2a:	d006      	beq.n	8011c3a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	681b      	ldr	r3, [r3, #0]
 8011c30:	2210      	movs	r2, #16
 8011c32:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8011c34:	6878      	ldr	r0, [r7, #4]
 8011c36:	f000 f8f2 	bl	8011e1e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8011c3a:	6a3b      	ldr	r3, [r7, #32]
 8011c3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011c40:	2b00      	cmp	r3, #0
 8011c42:	d00b      	beq.n	8011c5c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8011c44:	69fb      	ldr	r3, [r7, #28]
 8011c46:	f003 0308 	and.w	r3, r3, #8
 8011c4a:	2b00      	cmp	r3, #0
 8011c4c:	d006      	beq.n	8011c5c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	681b      	ldr	r3, [r3, #0]
 8011c52:	2208      	movs	r2, #8
 8011c54:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8011c56:	6878      	ldr	r0, [r7, #4]
 8011c58:	f000 f8eb 	bl	8011e32 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8011c5c:	6a3b      	ldr	r3, [r7, #32]
 8011c5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011c62:	2b00      	cmp	r3, #0
 8011c64:	d07b      	beq.n	8011d5e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8011c66:	69fb      	ldr	r3, [r7, #28]
 8011c68:	f003 0304 	and.w	r3, r3, #4
 8011c6c:	2b00      	cmp	r3, #0
 8011c6e:	d072      	beq.n	8011d56 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8011c70:	6a3b      	ldr	r3, [r7, #32]
 8011c72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011c76:	2b00      	cmp	r3, #0
 8011c78:	d008      	beq.n	8011c8c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8011c7a:	68fb      	ldr	r3, [r7, #12]
 8011c7c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	d003      	beq.n	8011c8c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8011c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c86:	f043 0301 	orr.w	r3, r3, #1
 8011c8a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8011c8c:	6a3b      	ldr	r3, [r7, #32]
 8011c8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011c92:	2b00      	cmp	r3, #0
 8011c94:	d008      	beq.n	8011ca8 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8011c96:	68fb      	ldr	r3, [r7, #12]
 8011c98:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8011c9c:	2b00      	cmp	r3, #0
 8011c9e:	d003      	beq.n	8011ca8 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8011ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ca2:	f043 0302 	orr.w	r3, r3, #2
 8011ca6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8011ca8:	6a3b      	ldr	r3, [r7, #32]
 8011caa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	d008      	beq.n	8011cc4 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8011cb2:	68fb      	ldr	r3, [r7, #12]
 8011cb4:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8011cb8:	2b00      	cmp	r3, #0
 8011cba:	d003      	beq.n	8011cc4 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8011cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cbe:	f043 0304 	orr.w	r3, r3, #4
 8011cc2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8011cc4:	6a3b      	ldr	r3, [r7, #32]
 8011cc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011cca:	2b00      	cmp	r3, #0
 8011ccc:	d043      	beq.n	8011d56 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8011cce:	68fb      	ldr	r3, [r7, #12]
 8011cd0:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8011cd4:	2b00      	cmp	r3, #0
 8011cd6:	d03e      	beq.n	8011d56 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8011cd8:	68fb      	ldr	r3, [r7, #12]
 8011cda:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8011cde:	2b60      	cmp	r3, #96	; 0x60
 8011ce0:	d02b      	beq.n	8011d3a <HAL_CAN_IRQHandler+0x32a>
 8011ce2:	2b60      	cmp	r3, #96	; 0x60
 8011ce4:	d82e      	bhi.n	8011d44 <HAL_CAN_IRQHandler+0x334>
 8011ce6:	2b50      	cmp	r3, #80	; 0x50
 8011ce8:	d022      	beq.n	8011d30 <HAL_CAN_IRQHandler+0x320>
 8011cea:	2b50      	cmp	r3, #80	; 0x50
 8011cec:	d82a      	bhi.n	8011d44 <HAL_CAN_IRQHandler+0x334>
 8011cee:	2b40      	cmp	r3, #64	; 0x40
 8011cf0:	d019      	beq.n	8011d26 <HAL_CAN_IRQHandler+0x316>
 8011cf2:	2b40      	cmp	r3, #64	; 0x40
 8011cf4:	d826      	bhi.n	8011d44 <HAL_CAN_IRQHandler+0x334>
 8011cf6:	2b30      	cmp	r3, #48	; 0x30
 8011cf8:	d010      	beq.n	8011d1c <HAL_CAN_IRQHandler+0x30c>
 8011cfa:	2b30      	cmp	r3, #48	; 0x30
 8011cfc:	d822      	bhi.n	8011d44 <HAL_CAN_IRQHandler+0x334>
 8011cfe:	2b10      	cmp	r3, #16
 8011d00:	d002      	beq.n	8011d08 <HAL_CAN_IRQHandler+0x2f8>
 8011d02:	2b20      	cmp	r3, #32
 8011d04:	d005      	beq.n	8011d12 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8011d06:	e01d      	b.n	8011d44 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8011d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d0a:	f043 0308 	orr.w	r3, r3, #8
 8011d0e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8011d10:	e019      	b.n	8011d46 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8011d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d14:	f043 0310 	orr.w	r3, r3, #16
 8011d18:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8011d1a:	e014      	b.n	8011d46 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8011d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d1e:	f043 0320 	orr.w	r3, r3, #32
 8011d22:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8011d24:	e00f      	b.n	8011d46 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8011d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011d2c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8011d2e:	e00a      	b.n	8011d46 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8011d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011d36:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8011d38:	e005      	b.n	8011d46 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8011d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011d40:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8011d42:	e000      	b.n	8011d46 <HAL_CAN_IRQHandler+0x336>
            break;
 8011d44:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	681b      	ldr	r3, [r3, #0]
 8011d4a:	699a      	ldr	r2, [r3, #24]
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	681b      	ldr	r3, [r3, #0]
 8011d50:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8011d54:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	681b      	ldr	r3, [r3, #0]
 8011d5a:	2204      	movs	r2, #4
 8011d5c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8011d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	d008      	beq.n	8011d76 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d6a:	431a      	orrs	r2, r3
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8011d70:	6878      	ldr	r0, [r7, #4]
 8011d72:	f000 f868 	bl	8011e46 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8011d76:	bf00      	nop
 8011d78:	3728      	adds	r7, #40	; 0x28
 8011d7a:	46bd      	mov	sp, r7
 8011d7c:	bd80      	pop	{r7, pc}

08011d7e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8011d7e:	b480      	push	{r7}
 8011d80:	b083      	sub	sp, #12
 8011d82:	af00      	add	r7, sp, #0
 8011d84:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8011d86:	bf00      	nop
 8011d88:	370c      	adds	r7, #12
 8011d8a:	46bd      	mov	sp, r7
 8011d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d90:	4770      	bx	lr

08011d92 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8011d92:	b480      	push	{r7}
 8011d94:	b083      	sub	sp, #12
 8011d96:	af00      	add	r7, sp, #0
 8011d98:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8011d9a:	bf00      	nop
 8011d9c:	370c      	adds	r7, #12
 8011d9e:	46bd      	mov	sp, r7
 8011da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011da4:	4770      	bx	lr

08011da6 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8011da6:	b480      	push	{r7}
 8011da8:	b083      	sub	sp, #12
 8011daa:	af00      	add	r7, sp, #0
 8011dac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8011dae:	bf00      	nop
 8011db0:	370c      	adds	r7, #12
 8011db2:	46bd      	mov	sp, r7
 8011db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011db8:	4770      	bx	lr

08011dba <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8011dba:	b480      	push	{r7}
 8011dbc:	b083      	sub	sp, #12
 8011dbe:	af00      	add	r7, sp, #0
 8011dc0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8011dc2:	bf00      	nop
 8011dc4:	370c      	adds	r7, #12
 8011dc6:	46bd      	mov	sp, r7
 8011dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dcc:	4770      	bx	lr

08011dce <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8011dce:	b480      	push	{r7}
 8011dd0:	b083      	sub	sp, #12
 8011dd2:	af00      	add	r7, sp, #0
 8011dd4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8011dd6:	bf00      	nop
 8011dd8:	370c      	adds	r7, #12
 8011dda:	46bd      	mov	sp, r7
 8011ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011de0:	4770      	bx	lr

08011de2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8011de2:	b480      	push	{r7}
 8011de4:	b083      	sub	sp, #12
 8011de6:	af00      	add	r7, sp, #0
 8011de8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8011dea:	bf00      	nop
 8011dec:	370c      	adds	r7, #12
 8011dee:	46bd      	mov	sp, r7
 8011df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011df4:	4770      	bx	lr

08011df6 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8011df6:	b480      	push	{r7}
 8011df8:	b083      	sub	sp, #12
 8011dfa:	af00      	add	r7, sp, #0
 8011dfc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8011dfe:	bf00      	nop
 8011e00:	370c      	adds	r7, #12
 8011e02:	46bd      	mov	sp, r7
 8011e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e08:	4770      	bx	lr

08011e0a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8011e0a:	b480      	push	{r7}
 8011e0c:	b083      	sub	sp, #12
 8011e0e:	af00      	add	r7, sp, #0
 8011e10:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8011e12:	bf00      	nop
 8011e14:	370c      	adds	r7, #12
 8011e16:	46bd      	mov	sp, r7
 8011e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e1c:	4770      	bx	lr

08011e1e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8011e1e:	b480      	push	{r7}
 8011e20:	b083      	sub	sp, #12
 8011e22:	af00      	add	r7, sp, #0
 8011e24:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8011e26:	bf00      	nop
 8011e28:	370c      	adds	r7, #12
 8011e2a:	46bd      	mov	sp, r7
 8011e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e30:	4770      	bx	lr

08011e32 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8011e32:	b480      	push	{r7}
 8011e34:	b083      	sub	sp, #12
 8011e36:	af00      	add	r7, sp, #0
 8011e38:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8011e3a:	bf00      	nop
 8011e3c:	370c      	adds	r7, #12
 8011e3e:	46bd      	mov	sp, r7
 8011e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e44:	4770      	bx	lr

08011e46 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8011e46:	b480      	push	{r7}
 8011e48:	b083      	sub	sp, #12
 8011e4a:	af00      	add	r7, sp, #0
 8011e4c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8011e4e:	bf00      	nop
 8011e50:	370c      	adds	r7, #12
 8011e52:	46bd      	mov	sp, r7
 8011e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e58:	4770      	bx	lr
	...

08011e5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8011e5c:	b480      	push	{r7}
 8011e5e:	b085      	sub	sp, #20
 8011e60:	af00      	add	r7, sp, #0
 8011e62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	f003 0307 	and.w	r3, r3, #7
 8011e6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8011e6c:	4b0c      	ldr	r3, [pc, #48]	; (8011ea0 <__NVIC_SetPriorityGrouping+0x44>)
 8011e6e:	68db      	ldr	r3, [r3, #12]
 8011e70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8011e72:	68ba      	ldr	r2, [r7, #8]
 8011e74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8011e78:	4013      	ands	r3, r2
 8011e7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8011e7c:	68fb      	ldr	r3, [r7, #12]
 8011e7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8011e80:	68bb      	ldr	r3, [r7, #8]
 8011e82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8011e84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8011e88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011e8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8011e8e:	4a04      	ldr	r2, [pc, #16]	; (8011ea0 <__NVIC_SetPriorityGrouping+0x44>)
 8011e90:	68bb      	ldr	r3, [r7, #8]
 8011e92:	60d3      	str	r3, [r2, #12]
}
 8011e94:	bf00      	nop
 8011e96:	3714      	adds	r7, #20
 8011e98:	46bd      	mov	sp, r7
 8011e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e9e:	4770      	bx	lr
 8011ea0:	e000ed00 	.word	0xe000ed00

08011ea4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8011ea4:	b480      	push	{r7}
 8011ea6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8011ea8:	4b04      	ldr	r3, [pc, #16]	; (8011ebc <__NVIC_GetPriorityGrouping+0x18>)
 8011eaa:	68db      	ldr	r3, [r3, #12]
 8011eac:	0a1b      	lsrs	r3, r3, #8
 8011eae:	f003 0307 	and.w	r3, r3, #7
}
 8011eb2:	4618      	mov	r0, r3
 8011eb4:	46bd      	mov	sp, r7
 8011eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eba:	4770      	bx	lr
 8011ebc:	e000ed00 	.word	0xe000ed00

08011ec0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8011ec0:	b480      	push	{r7}
 8011ec2:	b083      	sub	sp, #12
 8011ec4:	af00      	add	r7, sp, #0
 8011ec6:	4603      	mov	r3, r0
 8011ec8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8011eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011ece:	2b00      	cmp	r3, #0
 8011ed0:	db0b      	blt.n	8011eea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8011ed2:	79fb      	ldrb	r3, [r7, #7]
 8011ed4:	f003 021f 	and.w	r2, r3, #31
 8011ed8:	4907      	ldr	r1, [pc, #28]	; (8011ef8 <__NVIC_EnableIRQ+0x38>)
 8011eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011ede:	095b      	lsrs	r3, r3, #5
 8011ee0:	2001      	movs	r0, #1
 8011ee2:	fa00 f202 	lsl.w	r2, r0, r2
 8011ee6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8011eea:	bf00      	nop
 8011eec:	370c      	adds	r7, #12
 8011eee:	46bd      	mov	sp, r7
 8011ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ef4:	4770      	bx	lr
 8011ef6:	bf00      	nop
 8011ef8:	e000e100 	.word	0xe000e100

08011efc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8011efc:	b480      	push	{r7}
 8011efe:	b083      	sub	sp, #12
 8011f00:	af00      	add	r7, sp, #0
 8011f02:	4603      	mov	r3, r0
 8011f04:	6039      	str	r1, [r7, #0]
 8011f06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8011f08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011f0c:	2b00      	cmp	r3, #0
 8011f0e:	db0a      	blt.n	8011f26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011f10:	683b      	ldr	r3, [r7, #0]
 8011f12:	b2da      	uxtb	r2, r3
 8011f14:	490c      	ldr	r1, [pc, #48]	; (8011f48 <__NVIC_SetPriority+0x4c>)
 8011f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011f1a:	0112      	lsls	r2, r2, #4
 8011f1c:	b2d2      	uxtb	r2, r2
 8011f1e:	440b      	add	r3, r1
 8011f20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8011f24:	e00a      	b.n	8011f3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011f26:	683b      	ldr	r3, [r7, #0]
 8011f28:	b2da      	uxtb	r2, r3
 8011f2a:	4908      	ldr	r1, [pc, #32]	; (8011f4c <__NVIC_SetPriority+0x50>)
 8011f2c:	79fb      	ldrb	r3, [r7, #7]
 8011f2e:	f003 030f 	and.w	r3, r3, #15
 8011f32:	3b04      	subs	r3, #4
 8011f34:	0112      	lsls	r2, r2, #4
 8011f36:	b2d2      	uxtb	r2, r2
 8011f38:	440b      	add	r3, r1
 8011f3a:	761a      	strb	r2, [r3, #24]
}
 8011f3c:	bf00      	nop
 8011f3e:	370c      	adds	r7, #12
 8011f40:	46bd      	mov	sp, r7
 8011f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f46:	4770      	bx	lr
 8011f48:	e000e100 	.word	0xe000e100
 8011f4c:	e000ed00 	.word	0xe000ed00

08011f50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8011f50:	b480      	push	{r7}
 8011f52:	b089      	sub	sp, #36	; 0x24
 8011f54:	af00      	add	r7, sp, #0
 8011f56:	60f8      	str	r0, [r7, #12]
 8011f58:	60b9      	str	r1, [r7, #8]
 8011f5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8011f5c:	68fb      	ldr	r3, [r7, #12]
 8011f5e:	f003 0307 	and.w	r3, r3, #7
 8011f62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8011f64:	69fb      	ldr	r3, [r7, #28]
 8011f66:	f1c3 0307 	rsb	r3, r3, #7
 8011f6a:	2b04      	cmp	r3, #4
 8011f6c:	bf28      	it	cs
 8011f6e:	2304      	movcs	r3, #4
 8011f70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8011f72:	69fb      	ldr	r3, [r7, #28]
 8011f74:	3304      	adds	r3, #4
 8011f76:	2b06      	cmp	r3, #6
 8011f78:	d902      	bls.n	8011f80 <NVIC_EncodePriority+0x30>
 8011f7a:	69fb      	ldr	r3, [r7, #28]
 8011f7c:	3b03      	subs	r3, #3
 8011f7e:	e000      	b.n	8011f82 <NVIC_EncodePriority+0x32>
 8011f80:	2300      	movs	r3, #0
 8011f82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8011f84:	f04f 32ff 	mov.w	r2, #4294967295
 8011f88:	69bb      	ldr	r3, [r7, #24]
 8011f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8011f8e:	43da      	mvns	r2, r3
 8011f90:	68bb      	ldr	r3, [r7, #8]
 8011f92:	401a      	ands	r2, r3
 8011f94:	697b      	ldr	r3, [r7, #20]
 8011f96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8011f98:	f04f 31ff 	mov.w	r1, #4294967295
 8011f9c:	697b      	ldr	r3, [r7, #20]
 8011f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8011fa2:	43d9      	mvns	r1, r3
 8011fa4:	687b      	ldr	r3, [r7, #4]
 8011fa6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8011fa8:	4313      	orrs	r3, r2
         );
}
 8011faa:	4618      	mov	r0, r3
 8011fac:	3724      	adds	r7, #36	; 0x24
 8011fae:	46bd      	mov	sp, r7
 8011fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fb4:	4770      	bx	lr

08011fb6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8011fb6:	b580      	push	{r7, lr}
 8011fb8:	b082      	sub	sp, #8
 8011fba:	af00      	add	r7, sp, #0
 8011fbc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8011fbe:	6878      	ldr	r0, [r7, #4]
 8011fc0:	f7ff ff4c 	bl	8011e5c <__NVIC_SetPriorityGrouping>
}
 8011fc4:	bf00      	nop
 8011fc6:	3708      	adds	r7, #8
 8011fc8:	46bd      	mov	sp, r7
 8011fca:	bd80      	pop	{r7, pc}

08011fcc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8011fcc:	b580      	push	{r7, lr}
 8011fce:	b086      	sub	sp, #24
 8011fd0:	af00      	add	r7, sp, #0
 8011fd2:	4603      	mov	r3, r0
 8011fd4:	60b9      	str	r1, [r7, #8]
 8011fd6:	607a      	str	r2, [r7, #4]
 8011fd8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8011fda:	2300      	movs	r3, #0
 8011fdc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8011fde:	f7ff ff61 	bl	8011ea4 <__NVIC_GetPriorityGrouping>
 8011fe2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8011fe4:	687a      	ldr	r2, [r7, #4]
 8011fe6:	68b9      	ldr	r1, [r7, #8]
 8011fe8:	6978      	ldr	r0, [r7, #20]
 8011fea:	f7ff ffb1 	bl	8011f50 <NVIC_EncodePriority>
 8011fee:	4602      	mov	r2, r0
 8011ff0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011ff4:	4611      	mov	r1, r2
 8011ff6:	4618      	mov	r0, r3
 8011ff8:	f7ff ff80 	bl	8011efc <__NVIC_SetPriority>
}
 8011ffc:	bf00      	nop
 8011ffe:	3718      	adds	r7, #24
 8012000:	46bd      	mov	sp, r7
 8012002:	bd80      	pop	{r7, pc}

08012004 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8012004:	b580      	push	{r7, lr}
 8012006:	b082      	sub	sp, #8
 8012008:	af00      	add	r7, sp, #0
 801200a:	4603      	mov	r3, r0
 801200c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 801200e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012012:	4618      	mov	r0, r3
 8012014:	f7ff ff54 	bl	8011ec0 <__NVIC_EnableIRQ>
}
 8012018:	bf00      	nop
 801201a:	3708      	adds	r7, #8
 801201c:	46bd      	mov	sp, r7
 801201e:	bd80      	pop	{r7, pc}

08012020 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8012020:	b580      	push	{r7, lr}
 8012022:	b086      	sub	sp, #24
 8012024:	af00      	add	r7, sp, #0
 8012026:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8012028:	2300      	movs	r3, #0
 801202a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 801202c:	f7fe fbca 	bl	80107c4 <HAL_GetTick>
 8012030:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	2b00      	cmp	r3, #0
 8012036:	d101      	bne.n	801203c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8012038:	2301      	movs	r3, #1
 801203a:	e099      	b.n	8012170 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	2202      	movs	r2, #2
 8012040:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	2200      	movs	r2, #0
 8012048:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	681b      	ldr	r3, [r3, #0]
 8012050:	681a      	ldr	r2, [r3, #0]
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	681b      	ldr	r3, [r3, #0]
 8012056:	f022 0201 	bic.w	r2, r2, #1
 801205a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 801205c:	e00f      	b.n	801207e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 801205e:	f7fe fbb1 	bl	80107c4 <HAL_GetTick>
 8012062:	4602      	mov	r2, r0
 8012064:	693b      	ldr	r3, [r7, #16]
 8012066:	1ad3      	subs	r3, r2, r3
 8012068:	2b05      	cmp	r3, #5
 801206a:	d908      	bls.n	801207e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	2220      	movs	r2, #32
 8012070:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	2203      	movs	r2, #3
 8012076:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 801207a:	2303      	movs	r3, #3
 801207c:	e078      	b.n	8012170 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	681b      	ldr	r3, [r3, #0]
 8012082:	681b      	ldr	r3, [r3, #0]
 8012084:	f003 0301 	and.w	r3, r3, #1
 8012088:	2b00      	cmp	r3, #0
 801208a:	d1e8      	bne.n	801205e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	681b      	ldr	r3, [r3, #0]
 8012090:	681b      	ldr	r3, [r3, #0]
 8012092:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8012094:	697a      	ldr	r2, [r7, #20]
 8012096:	4b38      	ldr	r3, [pc, #224]	; (8012178 <HAL_DMA_Init+0x158>)
 8012098:	4013      	ands	r3, r2
 801209a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	685a      	ldr	r2, [r3, #4]
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	689b      	ldr	r3, [r3, #8]
 80120a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80120aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	691b      	ldr	r3, [r3, #16]
 80120b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80120b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	699b      	ldr	r3, [r3, #24]
 80120bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80120c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	6a1b      	ldr	r3, [r3, #32]
 80120c8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80120ca:	697a      	ldr	r2, [r7, #20]
 80120cc:	4313      	orrs	r3, r2
 80120ce:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80120d4:	2b04      	cmp	r3, #4
 80120d6:	d107      	bne.n	80120e8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80120e0:	4313      	orrs	r3, r2
 80120e2:	697a      	ldr	r2, [r7, #20]
 80120e4:	4313      	orrs	r3, r2
 80120e6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	681b      	ldr	r3, [r3, #0]
 80120ec:	697a      	ldr	r2, [r7, #20]
 80120ee:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	681b      	ldr	r3, [r3, #0]
 80120f4:	695b      	ldr	r3, [r3, #20]
 80120f6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80120f8:	697b      	ldr	r3, [r7, #20]
 80120fa:	f023 0307 	bic.w	r3, r3, #7
 80120fe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012104:	697a      	ldr	r2, [r7, #20]
 8012106:	4313      	orrs	r3, r2
 8012108:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801210e:	2b04      	cmp	r3, #4
 8012110:	d117      	bne.n	8012142 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012116:	697a      	ldr	r2, [r7, #20]
 8012118:	4313      	orrs	r3, r2
 801211a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012120:	2b00      	cmp	r3, #0
 8012122:	d00e      	beq.n	8012142 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8012124:	6878      	ldr	r0, [r7, #4]
 8012126:	f000 fa6f 	bl	8012608 <DMA_CheckFifoParam>
 801212a:	4603      	mov	r3, r0
 801212c:	2b00      	cmp	r3, #0
 801212e:	d008      	beq.n	8012142 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	2240      	movs	r2, #64	; 0x40
 8012134:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	2201      	movs	r2, #1
 801213a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 801213e:	2301      	movs	r3, #1
 8012140:	e016      	b.n	8012170 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	681b      	ldr	r3, [r3, #0]
 8012146:	697a      	ldr	r2, [r7, #20]
 8012148:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 801214a:	6878      	ldr	r0, [r7, #4]
 801214c:	f000 fa26 	bl	801259c <DMA_CalcBaseAndBitshift>
 8012150:	4603      	mov	r3, r0
 8012152:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012158:	223f      	movs	r2, #63	; 0x3f
 801215a:	409a      	lsls	r2, r3
 801215c:	68fb      	ldr	r3, [r7, #12]
 801215e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	2200      	movs	r2, #0
 8012164:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	2201      	movs	r2, #1
 801216a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 801216e:	2300      	movs	r3, #0
}
 8012170:	4618      	mov	r0, r3
 8012172:	3718      	adds	r7, #24
 8012174:	46bd      	mov	sp, r7
 8012176:	bd80      	pop	{r7, pc}
 8012178:	f010803f 	.word	0xf010803f

0801217c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 801217c:	b580      	push	{r7, lr}
 801217e:	b086      	sub	sp, #24
 8012180:	af00      	add	r7, sp, #0
 8012182:	60f8      	str	r0, [r7, #12]
 8012184:	60b9      	str	r1, [r7, #8]
 8012186:	607a      	str	r2, [r7, #4]
 8012188:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801218a:	2300      	movs	r3, #0
 801218c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801218e:	68fb      	ldr	r3, [r7, #12]
 8012190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012192:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8012194:	68fb      	ldr	r3, [r7, #12]
 8012196:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801219a:	2b01      	cmp	r3, #1
 801219c:	d101      	bne.n	80121a2 <HAL_DMA_Start_IT+0x26>
 801219e:	2302      	movs	r3, #2
 80121a0:	e040      	b.n	8012224 <HAL_DMA_Start_IT+0xa8>
 80121a2:	68fb      	ldr	r3, [r7, #12]
 80121a4:	2201      	movs	r2, #1
 80121a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80121aa:	68fb      	ldr	r3, [r7, #12]
 80121ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80121b0:	b2db      	uxtb	r3, r3
 80121b2:	2b01      	cmp	r3, #1
 80121b4:	d12f      	bne.n	8012216 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80121b6:	68fb      	ldr	r3, [r7, #12]
 80121b8:	2202      	movs	r2, #2
 80121ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80121be:	68fb      	ldr	r3, [r7, #12]
 80121c0:	2200      	movs	r2, #0
 80121c2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80121c4:	683b      	ldr	r3, [r7, #0]
 80121c6:	687a      	ldr	r2, [r7, #4]
 80121c8:	68b9      	ldr	r1, [r7, #8]
 80121ca:	68f8      	ldr	r0, [r7, #12]
 80121cc:	f000 f9b8 	bl	8012540 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80121d0:	68fb      	ldr	r3, [r7, #12]
 80121d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80121d4:	223f      	movs	r2, #63	; 0x3f
 80121d6:	409a      	lsls	r2, r3
 80121d8:	693b      	ldr	r3, [r7, #16]
 80121da:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80121dc:	68fb      	ldr	r3, [r7, #12]
 80121de:	681b      	ldr	r3, [r3, #0]
 80121e0:	681a      	ldr	r2, [r3, #0]
 80121e2:	68fb      	ldr	r3, [r7, #12]
 80121e4:	681b      	ldr	r3, [r3, #0]
 80121e6:	f042 0216 	orr.w	r2, r2, #22
 80121ea:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80121ec:	68fb      	ldr	r3, [r7, #12]
 80121ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80121f0:	2b00      	cmp	r3, #0
 80121f2:	d007      	beq.n	8012204 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80121f4:	68fb      	ldr	r3, [r7, #12]
 80121f6:	681b      	ldr	r3, [r3, #0]
 80121f8:	681a      	ldr	r2, [r3, #0]
 80121fa:	68fb      	ldr	r3, [r7, #12]
 80121fc:	681b      	ldr	r3, [r3, #0]
 80121fe:	f042 0208 	orr.w	r2, r2, #8
 8012202:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8012204:	68fb      	ldr	r3, [r7, #12]
 8012206:	681b      	ldr	r3, [r3, #0]
 8012208:	681a      	ldr	r2, [r3, #0]
 801220a:	68fb      	ldr	r3, [r7, #12]
 801220c:	681b      	ldr	r3, [r3, #0]
 801220e:	f042 0201 	orr.w	r2, r2, #1
 8012212:	601a      	str	r2, [r3, #0]
 8012214:	e005      	b.n	8012222 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8012216:	68fb      	ldr	r3, [r7, #12]
 8012218:	2200      	movs	r2, #0
 801221a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 801221e:	2302      	movs	r3, #2
 8012220:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8012222:	7dfb      	ldrb	r3, [r7, #23]
}
 8012224:	4618      	mov	r0, r3
 8012226:	3718      	adds	r7, #24
 8012228:	46bd      	mov	sp, r7
 801222a:	bd80      	pop	{r7, pc}

0801222c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 801222c:	b580      	push	{r7, lr}
 801222e:	b086      	sub	sp, #24
 8012230:	af00      	add	r7, sp, #0
 8012232:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8012234:	2300      	movs	r3, #0
 8012236:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8012238:	4b92      	ldr	r3, [pc, #584]	; (8012484 <HAL_DMA_IRQHandler+0x258>)
 801223a:	681b      	ldr	r3, [r3, #0]
 801223c:	4a92      	ldr	r2, [pc, #584]	; (8012488 <HAL_DMA_IRQHandler+0x25c>)
 801223e:	fba2 2303 	umull	r2, r3, r2, r3
 8012242:	0a9b      	lsrs	r3, r3, #10
 8012244:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8012246:	687b      	ldr	r3, [r7, #4]
 8012248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801224a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 801224c:	693b      	ldr	r3, [r7, #16]
 801224e:	681b      	ldr	r3, [r3, #0]
 8012250:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012256:	2208      	movs	r2, #8
 8012258:	409a      	lsls	r2, r3
 801225a:	68fb      	ldr	r3, [r7, #12]
 801225c:	4013      	ands	r3, r2
 801225e:	2b00      	cmp	r3, #0
 8012260:	d01a      	beq.n	8012298 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	681b      	ldr	r3, [r3, #0]
 8012266:	681b      	ldr	r3, [r3, #0]
 8012268:	f003 0304 	and.w	r3, r3, #4
 801226c:	2b00      	cmp	r3, #0
 801226e:	d013      	beq.n	8012298 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	681b      	ldr	r3, [r3, #0]
 8012274:	681a      	ldr	r2, [r3, #0]
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	681b      	ldr	r3, [r3, #0]
 801227a:	f022 0204 	bic.w	r2, r2, #4
 801227e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012284:	2208      	movs	r2, #8
 8012286:	409a      	lsls	r2, r3
 8012288:	693b      	ldr	r3, [r7, #16]
 801228a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012290:	f043 0201 	orr.w	r2, r3, #1
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801229c:	2201      	movs	r2, #1
 801229e:	409a      	lsls	r2, r3
 80122a0:	68fb      	ldr	r3, [r7, #12]
 80122a2:	4013      	ands	r3, r2
 80122a4:	2b00      	cmp	r3, #0
 80122a6:	d012      	beq.n	80122ce <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80122a8:	687b      	ldr	r3, [r7, #4]
 80122aa:	681b      	ldr	r3, [r3, #0]
 80122ac:	695b      	ldr	r3, [r3, #20]
 80122ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80122b2:	2b00      	cmp	r3, #0
 80122b4:	d00b      	beq.n	80122ce <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80122ba:	2201      	movs	r2, #1
 80122bc:	409a      	lsls	r2, r3
 80122be:	693b      	ldr	r3, [r7, #16]
 80122c0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80122c6:	f043 0202 	orr.w	r2, r3, #2
 80122ca:	687b      	ldr	r3, [r7, #4]
 80122cc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80122d2:	2204      	movs	r2, #4
 80122d4:	409a      	lsls	r2, r3
 80122d6:	68fb      	ldr	r3, [r7, #12]
 80122d8:	4013      	ands	r3, r2
 80122da:	2b00      	cmp	r3, #0
 80122dc:	d012      	beq.n	8012304 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80122de:	687b      	ldr	r3, [r7, #4]
 80122e0:	681b      	ldr	r3, [r3, #0]
 80122e2:	681b      	ldr	r3, [r3, #0]
 80122e4:	f003 0302 	and.w	r3, r3, #2
 80122e8:	2b00      	cmp	r3, #0
 80122ea:	d00b      	beq.n	8012304 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80122f0:	2204      	movs	r2, #4
 80122f2:	409a      	lsls	r2, r3
 80122f4:	693b      	ldr	r3, [r7, #16]
 80122f6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80122fc:	f043 0204 	orr.w	r2, r3, #4
 8012300:	687b      	ldr	r3, [r7, #4]
 8012302:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012308:	2210      	movs	r2, #16
 801230a:	409a      	lsls	r2, r3
 801230c:	68fb      	ldr	r3, [r7, #12]
 801230e:	4013      	ands	r3, r2
 8012310:	2b00      	cmp	r3, #0
 8012312:	d043      	beq.n	801239c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	681b      	ldr	r3, [r3, #0]
 8012318:	681b      	ldr	r3, [r3, #0]
 801231a:	f003 0308 	and.w	r3, r3, #8
 801231e:	2b00      	cmp	r3, #0
 8012320:	d03c      	beq.n	801239c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012326:	2210      	movs	r2, #16
 8012328:	409a      	lsls	r2, r3
 801232a:	693b      	ldr	r3, [r7, #16]
 801232c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	681b      	ldr	r3, [r3, #0]
 8012332:	681b      	ldr	r3, [r3, #0]
 8012334:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8012338:	2b00      	cmp	r3, #0
 801233a:	d018      	beq.n	801236e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	681b      	ldr	r3, [r3, #0]
 8012340:	681b      	ldr	r3, [r3, #0]
 8012342:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8012346:	2b00      	cmp	r3, #0
 8012348:	d108      	bne.n	801235c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801234e:	2b00      	cmp	r3, #0
 8012350:	d024      	beq.n	801239c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012356:	6878      	ldr	r0, [r7, #4]
 8012358:	4798      	blx	r3
 801235a:	e01f      	b.n	801239c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012360:	2b00      	cmp	r3, #0
 8012362:	d01b      	beq.n	801239c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012368:	6878      	ldr	r0, [r7, #4]
 801236a:	4798      	blx	r3
 801236c:	e016      	b.n	801239c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	681b      	ldr	r3, [r3, #0]
 8012372:	681b      	ldr	r3, [r3, #0]
 8012374:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012378:	2b00      	cmp	r3, #0
 801237a:	d107      	bne.n	801238c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	681b      	ldr	r3, [r3, #0]
 8012380:	681a      	ldr	r2, [r3, #0]
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	681b      	ldr	r3, [r3, #0]
 8012386:	f022 0208 	bic.w	r2, r2, #8
 801238a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012390:	2b00      	cmp	r3, #0
 8012392:	d003      	beq.n	801239c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012398:	6878      	ldr	r0, [r7, #4]
 801239a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80123a0:	2220      	movs	r2, #32
 80123a2:	409a      	lsls	r2, r3
 80123a4:	68fb      	ldr	r3, [r7, #12]
 80123a6:	4013      	ands	r3, r2
 80123a8:	2b00      	cmp	r3, #0
 80123aa:	f000 808e 	beq.w	80124ca <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	681b      	ldr	r3, [r3, #0]
 80123b2:	681b      	ldr	r3, [r3, #0]
 80123b4:	f003 0310 	and.w	r3, r3, #16
 80123b8:	2b00      	cmp	r3, #0
 80123ba:	f000 8086 	beq.w	80124ca <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80123c2:	2220      	movs	r2, #32
 80123c4:	409a      	lsls	r2, r3
 80123c6:	693b      	ldr	r3, [r7, #16]
 80123c8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80123d0:	b2db      	uxtb	r3, r3
 80123d2:	2b05      	cmp	r3, #5
 80123d4:	d136      	bne.n	8012444 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	681b      	ldr	r3, [r3, #0]
 80123da:	681a      	ldr	r2, [r3, #0]
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	681b      	ldr	r3, [r3, #0]
 80123e0:	f022 0216 	bic.w	r2, r2, #22
 80123e4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	681b      	ldr	r3, [r3, #0]
 80123ea:	695a      	ldr	r2, [r3, #20]
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	681b      	ldr	r3, [r3, #0]
 80123f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80123f4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80123fa:	2b00      	cmp	r3, #0
 80123fc:	d103      	bne.n	8012406 <HAL_DMA_IRQHandler+0x1da>
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012402:	2b00      	cmp	r3, #0
 8012404:	d007      	beq.n	8012416 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	681b      	ldr	r3, [r3, #0]
 801240a:	681a      	ldr	r2, [r3, #0]
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	681b      	ldr	r3, [r3, #0]
 8012410:	f022 0208 	bic.w	r2, r2, #8
 8012414:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801241a:	223f      	movs	r2, #63	; 0x3f
 801241c:	409a      	lsls	r2, r3
 801241e:	693b      	ldr	r3, [r7, #16]
 8012420:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	2201      	movs	r2, #1
 8012426:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	2200      	movs	r2, #0
 801242e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012436:	2b00      	cmp	r3, #0
 8012438:	d07d      	beq.n	8012536 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801243e:	6878      	ldr	r0, [r7, #4]
 8012440:	4798      	blx	r3
        }
        return;
 8012442:	e078      	b.n	8012536 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	681b      	ldr	r3, [r3, #0]
 8012448:	681b      	ldr	r3, [r3, #0]
 801244a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801244e:	2b00      	cmp	r3, #0
 8012450:	d01c      	beq.n	801248c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	681b      	ldr	r3, [r3, #0]
 8012456:	681b      	ldr	r3, [r3, #0]
 8012458:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801245c:	2b00      	cmp	r3, #0
 801245e:	d108      	bne.n	8012472 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012464:	2b00      	cmp	r3, #0
 8012466:	d030      	beq.n	80124ca <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801246c:	6878      	ldr	r0, [r7, #4]
 801246e:	4798      	blx	r3
 8012470:	e02b      	b.n	80124ca <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8012472:	687b      	ldr	r3, [r7, #4]
 8012474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012476:	2b00      	cmp	r3, #0
 8012478:	d027      	beq.n	80124ca <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801247e:	6878      	ldr	r0, [r7, #4]
 8012480:	4798      	blx	r3
 8012482:	e022      	b.n	80124ca <HAL_DMA_IRQHandler+0x29e>
 8012484:	20000004 	.word	0x20000004
 8012488:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	681b      	ldr	r3, [r3, #0]
 8012490:	681b      	ldr	r3, [r3, #0]
 8012492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012496:	2b00      	cmp	r3, #0
 8012498:	d10f      	bne.n	80124ba <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	681b      	ldr	r3, [r3, #0]
 801249e:	681a      	ldr	r2, [r3, #0]
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	681b      	ldr	r3, [r3, #0]
 80124a4:	f022 0210 	bic.w	r2, r2, #16
 80124a8:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	2201      	movs	r2, #1
 80124ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	2200      	movs	r2, #0
 80124b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80124be:	2b00      	cmp	r3, #0
 80124c0:	d003      	beq.n	80124ca <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80124c6:	6878      	ldr	r0, [r7, #4]
 80124c8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80124ce:	2b00      	cmp	r3, #0
 80124d0:	d032      	beq.n	8012538 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80124d6:	f003 0301 	and.w	r3, r3, #1
 80124da:	2b00      	cmp	r3, #0
 80124dc:	d022      	beq.n	8012524 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	2205      	movs	r2, #5
 80124e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	681b      	ldr	r3, [r3, #0]
 80124ea:	681a      	ldr	r2, [r3, #0]
 80124ec:	687b      	ldr	r3, [r7, #4]
 80124ee:	681b      	ldr	r3, [r3, #0]
 80124f0:	f022 0201 	bic.w	r2, r2, #1
 80124f4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80124f6:	68bb      	ldr	r3, [r7, #8]
 80124f8:	3301      	adds	r3, #1
 80124fa:	60bb      	str	r3, [r7, #8]
 80124fc:	697a      	ldr	r2, [r7, #20]
 80124fe:	429a      	cmp	r2, r3
 8012500:	d307      	bcc.n	8012512 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	681b      	ldr	r3, [r3, #0]
 8012506:	681b      	ldr	r3, [r3, #0]
 8012508:	f003 0301 	and.w	r3, r3, #1
 801250c:	2b00      	cmp	r3, #0
 801250e:	d1f2      	bne.n	80124f6 <HAL_DMA_IRQHandler+0x2ca>
 8012510:	e000      	b.n	8012514 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8012512:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	2201      	movs	r2, #1
 8012518:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	2200      	movs	r2, #0
 8012520:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012528:	2b00      	cmp	r3, #0
 801252a:	d005      	beq.n	8012538 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012530:	6878      	ldr	r0, [r7, #4]
 8012532:	4798      	blx	r3
 8012534:	e000      	b.n	8012538 <HAL_DMA_IRQHandler+0x30c>
        return;
 8012536:	bf00      	nop
    }
  }
}
 8012538:	3718      	adds	r7, #24
 801253a:	46bd      	mov	sp, r7
 801253c:	bd80      	pop	{r7, pc}
 801253e:	bf00      	nop

08012540 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8012540:	b480      	push	{r7}
 8012542:	b085      	sub	sp, #20
 8012544:	af00      	add	r7, sp, #0
 8012546:	60f8      	str	r0, [r7, #12]
 8012548:	60b9      	str	r1, [r7, #8]
 801254a:	607a      	str	r2, [r7, #4]
 801254c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 801254e:	68fb      	ldr	r3, [r7, #12]
 8012550:	681b      	ldr	r3, [r3, #0]
 8012552:	681a      	ldr	r2, [r3, #0]
 8012554:	68fb      	ldr	r3, [r7, #12]
 8012556:	681b      	ldr	r3, [r3, #0]
 8012558:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 801255c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 801255e:	68fb      	ldr	r3, [r7, #12]
 8012560:	681b      	ldr	r3, [r3, #0]
 8012562:	683a      	ldr	r2, [r7, #0]
 8012564:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8012566:	68fb      	ldr	r3, [r7, #12]
 8012568:	689b      	ldr	r3, [r3, #8]
 801256a:	2b40      	cmp	r3, #64	; 0x40
 801256c:	d108      	bne.n	8012580 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 801256e:	68fb      	ldr	r3, [r7, #12]
 8012570:	681b      	ldr	r3, [r3, #0]
 8012572:	687a      	ldr	r2, [r7, #4]
 8012574:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8012576:	68fb      	ldr	r3, [r7, #12]
 8012578:	681b      	ldr	r3, [r3, #0]
 801257a:	68ba      	ldr	r2, [r7, #8]
 801257c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 801257e:	e007      	b.n	8012590 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8012580:	68fb      	ldr	r3, [r7, #12]
 8012582:	681b      	ldr	r3, [r3, #0]
 8012584:	68ba      	ldr	r2, [r7, #8]
 8012586:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8012588:	68fb      	ldr	r3, [r7, #12]
 801258a:	681b      	ldr	r3, [r3, #0]
 801258c:	687a      	ldr	r2, [r7, #4]
 801258e:	60da      	str	r2, [r3, #12]
}
 8012590:	bf00      	nop
 8012592:	3714      	adds	r7, #20
 8012594:	46bd      	mov	sp, r7
 8012596:	f85d 7b04 	ldr.w	r7, [sp], #4
 801259a:	4770      	bx	lr

0801259c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 801259c:	b480      	push	{r7}
 801259e:	b085      	sub	sp, #20
 80125a0:	af00      	add	r7, sp, #0
 80125a2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80125a4:	687b      	ldr	r3, [r7, #4]
 80125a6:	681b      	ldr	r3, [r3, #0]
 80125a8:	b2db      	uxtb	r3, r3
 80125aa:	3b10      	subs	r3, #16
 80125ac:	4a14      	ldr	r2, [pc, #80]	; (8012600 <DMA_CalcBaseAndBitshift+0x64>)
 80125ae:	fba2 2303 	umull	r2, r3, r2, r3
 80125b2:	091b      	lsrs	r3, r3, #4
 80125b4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80125b6:	4a13      	ldr	r2, [pc, #76]	; (8012604 <DMA_CalcBaseAndBitshift+0x68>)
 80125b8:	68fb      	ldr	r3, [r7, #12]
 80125ba:	4413      	add	r3, r2
 80125bc:	781b      	ldrb	r3, [r3, #0]
 80125be:	461a      	mov	r2, r3
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80125c4:	68fb      	ldr	r3, [r7, #12]
 80125c6:	2b03      	cmp	r3, #3
 80125c8:	d909      	bls.n	80125de <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	681b      	ldr	r3, [r3, #0]
 80125ce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80125d2:	f023 0303 	bic.w	r3, r3, #3
 80125d6:	1d1a      	adds	r2, r3, #4
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	659a      	str	r2, [r3, #88]	; 0x58
 80125dc:	e007      	b.n	80125ee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	681b      	ldr	r3, [r3, #0]
 80125e2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80125e6:	f023 0303 	bic.w	r3, r3, #3
 80125ea:	687a      	ldr	r2, [r7, #4]
 80125ec:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80125ee:	687b      	ldr	r3, [r7, #4]
 80125f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80125f2:	4618      	mov	r0, r3
 80125f4:	3714      	adds	r7, #20
 80125f6:	46bd      	mov	sp, r7
 80125f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125fc:	4770      	bx	lr
 80125fe:	bf00      	nop
 8012600:	aaaaaaab 	.word	0xaaaaaaab
 8012604:	0801b600 	.word	0x0801b600

08012608 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8012608:	b480      	push	{r7}
 801260a:	b085      	sub	sp, #20
 801260c:	af00      	add	r7, sp, #0
 801260e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8012610:	2300      	movs	r3, #0
 8012612:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012618:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	699b      	ldr	r3, [r3, #24]
 801261e:	2b00      	cmp	r3, #0
 8012620:	d11f      	bne.n	8012662 <DMA_CheckFifoParam+0x5a>
 8012622:	68bb      	ldr	r3, [r7, #8]
 8012624:	2b03      	cmp	r3, #3
 8012626:	d856      	bhi.n	80126d6 <DMA_CheckFifoParam+0xce>
 8012628:	a201      	add	r2, pc, #4	; (adr r2, 8012630 <DMA_CheckFifoParam+0x28>)
 801262a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801262e:	bf00      	nop
 8012630:	08012641 	.word	0x08012641
 8012634:	08012653 	.word	0x08012653
 8012638:	08012641 	.word	0x08012641
 801263c:	080126d7 	.word	0x080126d7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012644:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8012648:	2b00      	cmp	r3, #0
 801264a:	d046      	beq.n	80126da <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 801264c:	2301      	movs	r3, #1
 801264e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8012650:	e043      	b.n	80126da <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012656:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 801265a:	d140      	bne.n	80126de <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 801265c:	2301      	movs	r3, #1
 801265e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8012660:	e03d      	b.n	80126de <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	699b      	ldr	r3, [r3, #24]
 8012666:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801266a:	d121      	bne.n	80126b0 <DMA_CheckFifoParam+0xa8>
 801266c:	68bb      	ldr	r3, [r7, #8]
 801266e:	2b03      	cmp	r3, #3
 8012670:	d837      	bhi.n	80126e2 <DMA_CheckFifoParam+0xda>
 8012672:	a201      	add	r2, pc, #4	; (adr r2, 8012678 <DMA_CheckFifoParam+0x70>)
 8012674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012678:	08012689 	.word	0x08012689
 801267c:	0801268f 	.word	0x0801268f
 8012680:	08012689 	.word	0x08012689
 8012684:	080126a1 	.word	0x080126a1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8012688:	2301      	movs	r3, #1
 801268a:	73fb      	strb	r3, [r7, #15]
      break;
 801268c:	e030      	b.n	80126f0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012692:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8012696:	2b00      	cmp	r3, #0
 8012698:	d025      	beq.n	80126e6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 801269a:	2301      	movs	r3, #1
 801269c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801269e:	e022      	b.n	80126e6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80126a4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80126a8:	d11f      	bne.n	80126ea <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80126aa:	2301      	movs	r3, #1
 80126ac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80126ae:	e01c      	b.n	80126ea <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80126b0:	68bb      	ldr	r3, [r7, #8]
 80126b2:	2b02      	cmp	r3, #2
 80126b4:	d903      	bls.n	80126be <DMA_CheckFifoParam+0xb6>
 80126b6:	68bb      	ldr	r3, [r7, #8]
 80126b8:	2b03      	cmp	r3, #3
 80126ba:	d003      	beq.n	80126c4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80126bc:	e018      	b.n	80126f0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80126be:	2301      	movs	r3, #1
 80126c0:	73fb      	strb	r3, [r7, #15]
      break;
 80126c2:	e015      	b.n	80126f0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80126c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80126cc:	2b00      	cmp	r3, #0
 80126ce:	d00e      	beq.n	80126ee <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80126d0:	2301      	movs	r3, #1
 80126d2:	73fb      	strb	r3, [r7, #15]
      break;
 80126d4:	e00b      	b.n	80126ee <DMA_CheckFifoParam+0xe6>
      break;
 80126d6:	bf00      	nop
 80126d8:	e00a      	b.n	80126f0 <DMA_CheckFifoParam+0xe8>
      break;
 80126da:	bf00      	nop
 80126dc:	e008      	b.n	80126f0 <DMA_CheckFifoParam+0xe8>
      break;
 80126de:	bf00      	nop
 80126e0:	e006      	b.n	80126f0 <DMA_CheckFifoParam+0xe8>
      break;
 80126e2:	bf00      	nop
 80126e4:	e004      	b.n	80126f0 <DMA_CheckFifoParam+0xe8>
      break;
 80126e6:	bf00      	nop
 80126e8:	e002      	b.n	80126f0 <DMA_CheckFifoParam+0xe8>
      break;   
 80126ea:	bf00      	nop
 80126ec:	e000      	b.n	80126f0 <DMA_CheckFifoParam+0xe8>
      break;
 80126ee:	bf00      	nop
    }
  } 
  
  return status; 
 80126f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80126f2:	4618      	mov	r0, r3
 80126f4:	3714      	adds	r7, #20
 80126f6:	46bd      	mov	sp, r7
 80126f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126fc:	4770      	bx	lr
 80126fe:	bf00      	nop

08012700 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8012700:	b480      	push	{r7}
 8012702:	b089      	sub	sp, #36	; 0x24
 8012704:	af00      	add	r7, sp, #0
 8012706:	6078      	str	r0, [r7, #4]
 8012708:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 801270a:	2300      	movs	r3, #0
 801270c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 801270e:	2300      	movs	r3, #0
 8012710:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8012712:	2300      	movs	r3, #0
 8012714:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8012716:	2300      	movs	r3, #0
 8012718:	61fb      	str	r3, [r7, #28]
 801271a:	e16b      	b.n	80129f4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 801271c:	2201      	movs	r2, #1
 801271e:	69fb      	ldr	r3, [r7, #28]
 8012720:	fa02 f303 	lsl.w	r3, r2, r3
 8012724:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8012726:	683b      	ldr	r3, [r7, #0]
 8012728:	681b      	ldr	r3, [r3, #0]
 801272a:	697a      	ldr	r2, [r7, #20]
 801272c:	4013      	ands	r3, r2
 801272e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8012730:	693a      	ldr	r2, [r7, #16]
 8012732:	697b      	ldr	r3, [r7, #20]
 8012734:	429a      	cmp	r2, r3
 8012736:	f040 815a 	bne.w	80129ee <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 801273a:	683b      	ldr	r3, [r7, #0]
 801273c:	685b      	ldr	r3, [r3, #4]
 801273e:	f003 0303 	and.w	r3, r3, #3
 8012742:	2b01      	cmp	r3, #1
 8012744:	d005      	beq.n	8012752 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8012746:	683b      	ldr	r3, [r7, #0]
 8012748:	685b      	ldr	r3, [r3, #4]
 801274a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 801274e:	2b02      	cmp	r3, #2
 8012750:	d130      	bne.n	80127b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8012752:	687b      	ldr	r3, [r7, #4]
 8012754:	689b      	ldr	r3, [r3, #8]
 8012756:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8012758:	69fb      	ldr	r3, [r7, #28]
 801275a:	005b      	lsls	r3, r3, #1
 801275c:	2203      	movs	r2, #3
 801275e:	fa02 f303 	lsl.w	r3, r2, r3
 8012762:	43db      	mvns	r3, r3
 8012764:	69ba      	ldr	r2, [r7, #24]
 8012766:	4013      	ands	r3, r2
 8012768:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801276a:	683b      	ldr	r3, [r7, #0]
 801276c:	68da      	ldr	r2, [r3, #12]
 801276e:	69fb      	ldr	r3, [r7, #28]
 8012770:	005b      	lsls	r3, r3, #1
 8012772:	fa02 f303 	lsl.w	r3, r2, r3
 8012776:	69ba      	ldr	r2, [r7, #24]
 8012778:	4313      	orrs	r3, r2
 801277a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 801277c:	687b      	ldr	r3, [r7, #4]
 801277e:	69ba      	ldr	r2, [r7, #24]
 8012780:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	685b      	ldr	r3, [r3, #4]
 8012786:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8012788:	2201      	movs	r2, #1
 801278a:	69fb      	ldr	r3, [r7, #28]
 801278c:	fa02 f303 	lsl.w	r3, r2, r3
 8012790:	43db      	mvns	r3, r3
 8012792:	69ba      	ldr	r2, [r7, #24]
 8012794:	4013      	ands	r3, r2
 8012796:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8012798:	683b      	ldr	r3, [r7, #0]
 801279a:	685b      	ldr	r3, [r3, #4]
 801279c:	091b      	lsrs	r3, r3, #4
 801279e:	f003 0201 	and.w	r2, r3, #1
 80127a2:	69fb      	ldr	r3, [r7, #28]
 80127a4:	fa02 f303 	lsl.w	r3, r2, r3
 80127a8:	69ba      	ldr	r2, [r7, #24]
 80127aa:	4313      	orrs	r3, r2
 80127ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80127ae:	687b      	ldr	r3, [r7, #4]
 80127b0:	69ba      	ldr	r2, [r7, #24]
 80127b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80127b4:	683b      	ldr	r3, [r7, #0]
 80127b6:	685b      	ldr	r3, [r3, #4]
 80127b8:	f003 0303 	and.w	r3, r3, #3
 80127bc:	2b03      	cmp	r3, #3
 80127be:	d017      	beq.n	80127f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80127c0:	687b      	ldr	r3, [r7, #4]
 80127c2:	68db      	ldr	r3, [r3, #12]
 80127c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80127c6:	69fb      	ldr	r3, [r7, #28]
 80127c8:	005b      	lsls	r3, r3, #1
 80127ca:	2203      	movs	r2, #3
 80127cc:	fa02 f303 	lsl.w	r3, r2, r3
 80127d0:	43db      	mvns	r3, r3
 80127d2:	69ba      	ldr	r2, [r7, #24]
 80127d4:	4013      	ands	r3, r2
 80127d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80127d8:	683b      	ldr	r3, [r7, #0]
 80127da:	689a      	ldr	r2, [r3, #8]
 80127dc:	69fb      	ldr	r3, [r7, #28]
 80127de:	005b      	lsls	r3, r3, #1
 80127e0:	fa02 f303 	lsl.w	r3, r2, r3
 80127e4:	69ba      	ldr	r2, [r7, #24]
 80127e6:	4313      	orrs	r3, r2
 80127e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80127ea:	687b      	ldr	r3, [r7, #4]
 80127ec:	69ba      	ldr	r2, [r7, #24]
 80127ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80127f0:	683b      	ldr	r3, [r7, #0]
 80127f2:	685b      	ldr	r3, [r3, #4]
 80127f4:	f003 0303 	and.w	r3, r3, #3
 80127f8:	2b02      	cmp	r3, #2
 80127fa:	d123      	bne.n	8012844 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80127fc:	69fb      	ldr	r3, [r7, #28]
 80127fe:	08da      	lsrs	r2, r3, #3
 8012800:	687b      	ldr	r3, [r7, #4]
 8012802:	3208      	adds	r2, #8
 8012804:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012808:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 801280a:	69fb      	ldr	r3, [r7, #28]
 801280c:	f003 0307 	and.w	r3, r3, #7
 8012810:	009b      	lsls	r3, r3, #2
 8012812:	220f      	movs	r2, #15
 8012814:	fa02 f303 	lsl.w	r3, r2, r3
 8012818:	43db      	mvns	r3, r3
 801281a:	69ba      	ldr	r2, [r7, #24]
 801281c:	4013      	ands	r3, r2
 801281e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8012820:	683b      	ldr	r3, [r7, #0]
 8012822:	691a      	ldr	r2, [r3, #16]
 8012824:	69fb      	ldr	r3, [r7, #28]
 8012826:	f003 0307 	and.w	r3, r3, #7
 801282a:	009b      	lsls	r3, r3, #2
 801282c:	fa02 f303 	lsl.w	r3, r2, r3
 8012830:	69ba      	ldr	r2, [r7, #24]
 8012832:	4313      	orrs	r3, r2
 8012834:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8012836:	69fb      	ldr	r3, [r7, #28]
 8012838:	08da      	lsrs	r2, r3, #3
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	3208      	adds	r2, #8
 801283e:	69b9      	ldr	r1, [r7, #24]
 8012840:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	681b      	ldr	r3, [r3, #0]
 8012848:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 801284a:	69fb      	ldr	r3, [r7, #28]
 801284c:	005b      	lsls	r3, r3, #1
 801284e:	2203      	movs	r2, #3
 8012850:	fa02 f303 	lsl.w	r3, r2, r3
 8012854:	43db      	mvns	r3, r3
 8012856:	69ba      	ldr	r2, [r7, #24]
 8012858:	4013      	ands	r3, r2
 801285a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 801285c:	683b      	ldr	r3, [r7, #0]
 801285e:	685b      	ldr	r3, [r3, #4]
 8012860:	f003 0203 	and.w	r2, r3, #3
 8012864:	69fb      	ldr	r3, [r7, #28]
 8012866:	005b      	lsls	r3, r3, #1
 8012868:	fa02 f303 	lsl.w	r3, r2, r3
 801286c:	69ba      	ldr	r2, [r7, #24]
 801286e:	4313      	orrs	r3, r2
 8012870:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	69ba      	ldr	r2, [r7, #24]
 8012876:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8012878:	683b      	ldr	r3, [r7, #0]
 801287a:	685b      	ldr	r3, [r3, #4]
 801287c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8012880:	2b00      	cmp	r3, #0
 8012882:	f000 80b4 	beq.w	80129ee <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8012886:	2300      	movs	r3, #0
 8012888:	60fb      	str	r3, [r7, #12]
 801288a:	4b60      	ldr	r3, [pc, #384]	; (8012a0c <HAL_GPIO_Init+0x30c>)
 801288c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801288e:	4a5f      	ldr	r2, [pc, #380]	; (8012a0c <HAL_GPIO_Init+0x30c>)
 8012890:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8012894:	6453      	str	r3, [r2, #68]	; 0x44
 8012896:	4b5d      	ldr	r3, [pc, #372]	; (8012a0c <HAL_GPIO_Init+0x30c>)
 8012898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801289a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801289e:	60fb      	str	r3, [r7, #12]
 80128a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80128a2:	4a5b      	ldr	r2, [pc, #364]	; (8012a10 <HAL_GPIO_Init+0x310>)
 80128a4:	69fb      	ldr	r3, [r7, #28]
 80128a6:	089b      	lsrs	r3, r3, #2
 80128a8:	3302      	adds	r3, #2
 80128aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80128ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80128b0:	69fb      	ldr	r3, [r7, #28]
 80128b2:	f003 0303 	and.w	r3, r3, #3
 80128b6:	009b      	lsls	r3, r3, #2
 80128b8:	220f      	movs	r2, #15
 80128ba:	fa02 f303 	lsl.w	r3, r2, r3
 80128be:	43db      	mvns	r3, r3
 80128c0:	69ba      	ldr	r2, [r7, #24]
 80128c2:	4013      	ands	r3, r2
 80128c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	4a52      	ldr	r2, [pc, #328]	; (8012a14 <HAL_GPIO_Init+0x314>)
 80128ca:	4293      	cmp	r3, r2
 80128cc:	d02b      	beq.n	8012926 <HAL_GPIO_Init+0x226>
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	4a51      	ldr	r2, [pc, #324]	; (8012a18 <HAL_GPIO_Init+0x318>)
 80128d2:	4293      	cmp	r3, r2
 80128d4:	d025      	beq.n	8012922 <HAL_GPIO_Init+0x222>
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	4a50      	ldr	r2, [pc, #320]	; (8012a1c <HAL_GPIO_Init+0x31c>)
 80128da:	4293      	cmp	r3, r2
 80128dc:	d01f      	beq.n	801291e <HAL_GPIO_Init+0x21e>
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	4a4f      	ldr	r2, [pc, #316]	; (8012a20 <HAL_GPIO_Init+0x320>)
 80128e2:	4293      	cmp	r3, r2
 80128e4:	d019      	beq.n	801291a <HAL_GPIO_Init+0x21a>
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	4a4e      	ldr	r2, [pc, #312]	; (8012a24 <HAL_GPIO_Init+0x324>)
 80128ea:	4293      	cmp	r3, r2
 80128ec:	d013      	beq.n	8012916 <HAL_GPIO_Init+0x216>
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	4a4d      	ldr	r2, [pc, #308]	; (8012a28 <HAL_GPIO_Init+0x328>)
 80128f2:	4293      	cmp	r3, r2
 80128f4:	d00d      	beq.n	8012912 <HAL_GPIO_Init+0x212>
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	4a4c      	ldr	r2, [pc, #304]	; (8012a2c <HAL_GPIO_Init+0x32c>)
 80128fa:	4293      	cmp	r3, r2
 80128fc:	d007      	beq.n	801290e <HAL_GPIO_Init+0x20e>
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	4a4b      	ldr	r2, [pc, #300]	; (8012a30 <HAL_GPIO_Init+0x330>)
 8012902:	4293      	cmp	r3, r2
 8012904:	d101      	bne.n	801290a <HAL_GPIO_Init+0x20a>
 8012906:	2307      	movs	r3, #7
 8012908:	e00e      	b.n	8012928 <HAL_GPIO_Init+0x228>
 801290a:	2308      	movs	r3, #8
 801290c:	e00c      	b.n	8012928 <HAL_GPIO_Init+0x228>
 801290e:	2306      	movs	r3, #6
 8012910:	e00a      	b.n	8012928 <HAL_GPIO_Init+0x228>
 8012912:	2305      	movs	r3, #5
 8012914:	e008      	b.n	8012928 <HAL_GPIO_Init+0x228>
 8012916:	2304      	movs	r3, #4
 8012918:	e006      	b.n	8012928 <HAL_GPIO_Init+0x228>
 801291a:	2303      	movs	r3, #3
 801291c:	e004      	b.n	8012928 <HAL_GPIO_Init+0x228>
 801291e:	2302      	movs	r3, #2
 8012920:	e002      	b.n	8012928 <HAL_GPIO_Init+0x228>
 8012922:	2301      	movs	r3, #1
 8012924:	e000      	b.n	8012928 <HAL_GPIO_Init+0x228>
 8012926:	2300      	movs	r3, #0
 8012928:	69fa      	ldr	r2, [r7, #28]
 801292a:	f002 0203 	and.w	r2, r2, #3
 801292e:	0092      	lsls	r2, r2, #2
 8012930:	4093      	lsls	r3, r2
 8012932:	69ba      	ldr	r2, [r7, #24]
 8012934:	4313      	orrs	r3, r2
 8012936:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8012938:	4935      	ldr	r1, [pc, #212]	; (8012a10 <HAL_GPIO_Init+0x310>)
 801293a:	69fb      	ldr	r3, [r7, #28]
 801293c:	089b      	lsrs	r3, r3, #2
 801293e:	3302      	adds	r3, #2
 8012940:	69ba      	ldr	r2, [r7, #24]
 8012942:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8012946:	4b3b      	ldr	r3, [pc, #236]	; (8012a34 <HAL_GPIO_Init+0x334>)
 8012948:	681b      	ldr	r3, [r3, #0]
 801294a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801294c:	693b      	ldr	r3, [r7, #16]
 801294e:	43db      	mvns	r3, r3
 8012950:	69ba      	ldr	r2, [r7, #24]
 8012952:	4013      	ands	r3, r2
 8012954:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8012956:	683b      	ldr	r3, [r7, #0]
 8012958:	685b      	ldr	r3, [r3, #4]
 801295a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801295e:	2b00      	cmp	r3, #0
 8012960:	d003      	beq.n	801296a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8012962:	69ba      	ldr	r2, [r7, #24]
 8012964:	693b      	ldr	r3, [r7, #16]
 8012966:	4313      	orrs	r3, r2
 8012968:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 801296a:	4a32      	ldr	r2, [pc, #200]	; (8012a34 <HAL_GPIO_Init+0x334>)
 801296c:	69bb      	ldr	r3, [r7, #24]
 801296e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8012970:	4b30      	ldr	r3, [pc, #192]	; (8012a34 <HAL_GPIO_Init+0x334>)
 8012972:	685b      	ldr	r3, [r3, #4]
 8012974:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8012976:	693b      	ldr	r3, [r7, #16]
 8012978:	43db      	mvns	r3, r3
 801297a:	69ba      	ldr	r2, [r7, #24]
 801297c:	4013      	ands	r3, r2
 801297e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8012980:	683b      	ldr	r3, [r7, #0]
 8012982:	685b      	ldr	r3, [r3, #4]
 8012984:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012988:	2b00      	cmp	r3, #0
 801298a:	d003      	beq.n	8012994 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 801298c:	69ba      	ldr	r2, [r7, #24]
 801298e:	693b      	ldr	r3, [r7, #16]
 8012990:	4313      	orrs	r3, r2
 8012992:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8012994:	4a27      	ldr	r2, [pc, #156]	; (8012a34 <HAL_GPIO_Init+0x334>)
 8012996:	69bb      	ldr	r3, [r7, #24]
 8012998:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 801299a:	4b26      	ldr	r3, [pc, #152]	; (8012a34 <HAL_GPIO_Init+0x334>)
 801299c:	689b      	ldr	r3, [r3, #8]
 801299e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80129a0:	693b      	ldr	r3, [r7, #16]
 80129a2:	43db      	mvns	r3, r3
 80129a4:	69ba      	ldr	r2, [r7, #24]
 80129a6:	4013      	ands	r3, r2
 80129a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80129aa:	683b      	ldr	r3, [r7, #0]
 80129ac:	685b      	ldr	r3, [r3, #4]
 80129ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80129b2:	2b00      	cmp	r3, #0
 80129b4:	d003      	beq.n	80129be <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80129b6:	69ba      	ldr	r2, [r7, #24]
 80129b8:	693b      	ldr	r3, [r7, #16]
 80129ba:	4313      	orrs	r3, r2
 80129bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80129be:	4a1d      	ldr	r2, [pc, #116]	; (8012a34 <HAL_GPIO_Init+0x334>)
 80129c0:	69bb      	ldr	r3, [r7, #24]
 80129c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80129c4:	4b1b      	ldr	r3, [pc, #108]	; (8012a34 <HAL_GPIO_Init+0x334>)
 80129c6:	68db      	ldr	r3, [r3, #12]
 80129c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80129ca:	693b      	ldr	r3, [r7, #16]
 80129cc:	43db      	mvns	r3, r3
 80129ce:	69ba      	ldr	r2, [r7, #24]
 80129d0:	4013      	ands	r3, r2
 80129d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80129d4:	683b      	ldr	r3, [r7, #0]
 80129d6:	685b      	ldr	r3, [r3, #4]
 80129d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80129dc:	2b00      	cmp	r3, #0
 80129de:	d003      	beq.n	80129e8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80129e0:	69ba      	ldr	r2, [r7, #24]
 80129e2:	693b      	ldr	r3, [r7, #16]
 80129e4:	4313      	orrs	r3, r2
 80129e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80129e8:	4a12      	ldr	r2, [pc, #72]	; (8012a34 <HAL_GPIO_Init+0x334>)
 80129ea:	69bb      	ldr	r3, [r7, #24]
 80129ec:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80129ee:	69fb      	ldr	r3, [r7, #28]
 80129f0:	3301      	adds	r3, #1
 80129f2:	61fb      	str	r3, [r7, #28]
 80129f4:	69fb      	ldr	r3, [r7, #28]
 80129f6:	2b0f      	cmp	r3, #15
 80129f8:	f67f ae90 	bls.w	801271c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80129fc:	bf00      	nop
 80129fe:	bf00      	nop
 8012a00:	3724      	adds	r7, #36	; 0x24
 8012a02:	46bd      	mov	sp, r7
 8012a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a08:	4770      	bx	lr
 8012a0a:	bf00      	nop
 8012a0c:	40023800 	.word	0x40023800
 8012a10:	40013800 	.word	0x40013800
 8012a14:	40020000 	.word	0x40020000
 8012a18:	40020400 	.word	0x40020400
 8012a1c:	40020800 	.word	0x40020800
 8012a20:	40020c00 	.word	0x40020c00
 8012a24:	40021000 	.word	0x40021000
 8012a28:	40021400 	.word	0x40021400
 8012a2c:	40021800 	.word	0x40021800
 8012a30:	40021c00 	.word	0x40021c00
 8012a34:	40013c00 	.word	0x40013c00

08012a38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8012a38:	b480      	push	{r7}
 8012a3a:	b083      	sub	sp, #12
 8012a3c:	af00      	add	r7, sp, #0
 8012a3e:	6078      	str	r0, [r7, #4]
 8012a40:	460b      	mov	r3, r1
 8012a42:	807b      	strh	r3, [r7, #2]
 8012a44:	4613      	mov	r3, r2
 8012a46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8012a48:	787b      	ldrb	r3, [r7, #1]
 8012a4a:	2b00      	cmp	r3, #0
 8012a4c:	d003      	beq.n	8012a56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8012a4e:	887a      	ldrh	r2, [r7, #2]
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8012a54:	e003      	b.n	8012a5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8012a56:	887b      	ldrh	r3, [r7, #2]
 8012a58:	041a      	lsls	r2, r3, #16
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	619a      	str	r2, [r3, #24]
}
 8012a5e:	bf00      	nop
 8012a60:	370c      	adds	r7, #12
 8012a62:	46bd      	mov	sp, r7
 8012a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a68:	4770      	bx	lr

08012a6a <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8012a6a:	b480      	push	{r7}
 8012a6c:	b083      	sub	sp, #12
 8012a6e:	af00      	add	r7, sp, #0
 8012a70:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	681b      	ldr	r3, [r3, #0]
 8012a76:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8012a7a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8012a7c:	2300      	movs	r3, #0
}
 8012a7e:	4618      	mov	r0, r3
 8012a80:	370c      	adds	r7, #12
 8012a82:	46bd      	mov	sp, r7
 8012a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a88:	4770      	bx	lr
	...

08012a8c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8012a8c:	b580      	push	{r7, lr}
 8012a8e:	b086      	sub	sp, #24
 8012a90:	af00      	add	r7, sp, #0
 8012a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	2b00      	cmp	r3, #0
 8012a98:	d101      	bne.n	8012a9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8012a9a:	2301      	movs	r3, #1
 8012a9c:	e264      	b.n	8012f68 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8012a9e:	687b      	ldr	r3, [r7, #4]
 8012aa0:	681b      	ldr	r3, [r3, #0]
 8012aa2:	f003 0301 	and.w	r3, r3, #1
 8012aa6:	2b00      	cmp	r3, #0
 8012aa8:	d075      	beq.n	8012b96 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8012aaa:	4ba3      	ldr	r3, [pc, #652]	; (8012d38 <HAL_RCC_OscConfig+0x2ac>)
 8012aac:	689b      	ldr	r3, [r3, #8]
 8012aae:	f003 030c 	and.w	r3, r3, #12
 8012ab2:	2b04      	cmp	r3, #4
 8012ab4:	d00c      	beq.n	8012ad0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8012ab6:	4ba0      	ldr	r3, [pc, #640]	; (8012d38 <HAL_RCC_OscConfig+0x2ac>)
 8012ab8:	689b      	ldr	r3, [r3, #8]
 8012aba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8012abe:	2b08      	cmp	r3, #8
 8012ac0:	d112      	bne.n	8012ae8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8012ac2:	4b9d      	ldr	r3, [pc, #628]	; (8012d38 <HAL_RCC_OscConfig+0x2ac>)
 8012ac4:	685b      	ldr	r3, [r3, #4]
 8012ac6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012aca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8012ace:	d10b      	bne.n	8012ae8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8012ad0:	4b99      	ldr	r3, [pc, #612]	; (8012d38 <HAL_RCC_OscConfig+0x2ac>)
 8012ad2:	681b      	ldr	r3, [r3, #0]
 8012ad4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012ad8:	2b00      	cmp	r3, #0
 8012ada:	d05b      	beq.n	8012b94 <HAL_RCC_OscConfig+0x108>
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	685b      	ldr	r3, [r3, #4]
 8012ae0:	2b00      	cmp	r3, #0
 8012ae2:	d157      	bne.n	8012b94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8012ae4:	2301      	movs	r3, #1
 8012ae6:	e23f      	b.n	8012f68 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	685b      	ldr	r3, [r3, #4]
 8012aec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012af0:	d106      	bne.n	8012b00 <HAL_RCC_OscConfig+0x74>
 8012af2:	4b91      	ldr	r3, [pc, #580]	; (8012d38 <HAL_RCC_OscConfig+0x2ac>)
 8012af4:	681b      	ldr	r3, [r3, #0]
 8012af6:	4a90      	ldr	r2, [pc, #576]	; (8012d38 <HAL_RCC_OscConfig+0x2ac>)
 8012af8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8012afc:	6013      	str	r3, [r2, #0]
 8012afe:	e01d      	b.n	8012b3c <HAL_RCC_OscConfig+0xb0>
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	685b      	ldr	r3, [r3, #4]
 8012b04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8012b08:	d10c      	bne.n	8012b24 <HAL_RCC_OscConfig+0x98>
 8012b0a:	4b8b      	ldr	r3, [pc, #556]	; (8012d38 <HAL_RCC_OscConfig+0x2ac>)
 8012b0c:	681b      	ldr	r3, [r3, #0]
 8012b0e:	4a8a      	ldr	r2, [pc, #552]	; (8012d38 <HAL_RCC_OscConfig+0x2ac>)
 8012b10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8012b14:	6013      	str	r3, [r2, #0]
 8012b16:	4b88      	ldr	r3, [pc, #544]	; (8012d38 <HAL_RCC_OscConfig+0x2ac>)
 8012b18:	681b      	ldr	r3, [r3, #0]
 8012b1a:	4a87      	ldr	r2, [pc, #540]	; (8012d38 <HAL_RCC_OscConfig+0x2ac>)
 8012b1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8012b20:	6013      	str	r3, [r2, #0]
 8012b22:	e00b      	b.n	8012b3c <HAL_RCC_OscConfig+0xb0>
 8012b24:	4b84      	ldr	r3, [pc, #528]	; (8012d38 <HAL_RCC_OscConfig+0x2ac>)
 8012b26:	681b      	ldr	r3, [r3, #0]
 8012b28:	4a83      	ldr	r2, [pc, #524]	; (8012d38 <HAL_RCC_OscConfig+0x2ac>)
 8012b2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8012b2e:	6013      	str	r3, [r2, #0]
 8012b30:	4b81      	ldr	r3, [pc, #516]	; (8012d38 <HAL_RCC_OscConfig+0x2ac>)
 8012b32:	681b      	ldr	r3, [r3, #0]
 8012b34:	4a80      	ldr	r2, [pc, #512]	; (8012d38 <HAL_RCC_OscConfig+0x2ac>)
 8012b36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8012b3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8012b3c:	687b      	ldr	r3, [r7, #4]
 8012b3e:	685b      	ldr	r3, [r3, #4]
 8012b40:	2b00      	cmp	r3, #0
 8012b42:	d013      	beq.n	8012b6c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012b44:	f7fd fe3e 	bl	80107c4 <HAL_GetTick>
 8012b48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8012b4a:	e008      	b.n	8012b5e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8012b4c:	f7fd fe3a 	bl	80107c4 <HAL_GetTick>
 8012b50:	4602      	mov	r2, r0
 8012b52:	693b      	ldr	r3, [r7, #16]
 8012b54:	1ad3      	subs	r3, r2, r3
 8012b56:	2b64      	cmp	r3, #100	; 0x64
 8012b58:	d901      	bls.n	8012b5e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8012b5a:	2303      	movs	r3, #3
 8012b5c:	e204      	b.n	8012f68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8012b5e:	4b76      	ldr	r3, [pc, #472]	; (8012d38 <HAL_RCC_OscConfig+0x2ac>)
 8012b60:	681b      	ldr	r3, [r3, #0]
 8012b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012b66:	2b00      	cmp	r3, #0
 8012b68:	d0f0      	beq.n	8012b4c <HAL_RCC_OscConfig+0xc0>
 8012b6a:	e014      	b.n	8012b96 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012b6c:	f7fd fe2a 	bl	80107c4 <HAL_GetTick>
 8012b70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8012b72:	e008      	b.n	8012b86 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8012b74:	f7fd fe26 	bl	80107c4 <HAL_GetTick>
 8012b78:	4602      	mov	r2, r0
 8012b7a:	693b      	ldr	r3, [r7, #16]
 8012b7c:	1ad3      	subs	r3, r2, r3
 8012b7e:	2b64      	cmp	r3, #100	; 0x64
 8012b80:	d901      	bls.n	8012b86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8012b82:	2303      	movs	r3, #3
 8012b84:	e1f0      	b.n	8012f68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8012b86:	4b6c      	ldr	r3, [pc, #432]	; (8012d38 <HAL_RCC_OscConfig+0x2ac>)
 8012b88:	681b      	ldr	r3, [r3, #0]
 8012b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012b8e:	2b00      	cmp	r3, #0
 8012b90:	d1f0      	bne.n	8012b74 <HAL_RCC_OscConfig+0xe8>
 8012b92:	e000      	b.n	8012b96 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8012b94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8012b96:	687b      	ldr	r3, [r7, #4]
 8012b98:	681b      	ldr	r3, [r3, #0]
 8012b9a:	f003 0302 	and.w	r3, r3, #2
 8012b9e:	2b00      	cmp	r3, #0
 8012ba0:	d063      	beq.n	8012c6a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8012ba2:	4b65      	ldr	r3, [pc, #404]	; (8012d38 <HAL_RCC_OscConfig+0x2ac>)
 8012ba4:	689b      	ldr	r3, [r3, #8]
 8012ba6:	f003 030c 	and.w	r3, r3, #12
 8012baa:	2b00      	cmp	r3, #0
 8012bac:	d00b      	beq.n	8012bc6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8012bae:	4b62      	ldr	r3, [pc, #392]	; (8012d38 <HAL_RCC_OscConfig+0x2ac>)
 8012bb0:	689b      	ldr	r3, [r3, #8]
 8012bb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8012bb6:	2b08      	cmp	r3, #8
 8012bb8:	d11c      	bne.n	8012bf4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8012bba:	4b5f      	ldr	r3, [pc, #380]	; (8012d38 <HAL_RCC_OscConfig+0x2ac>)
 8012bbc:	685b      	ldr	r3, [r3, #4]
 8012bbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012bc2:	2b00      	cmp	r3, #0
 8012bc4:	d116      	bne.n	8012bf4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8012bc6:	4b5c      	ldr	r3, [pc, #368]	; (8012d38 <HAL_RCC_OscConfig+0x2ac>)
 8012bc8:	681b      	ldr	r3, [r3, #0]
 8012bca:	f003 0302 	and.w	r3, r3, #2
 8012bce:	2b00      	cmp	r3, #0
 8012bd0:	d005      	beq.n	8012bde <HAL_RCC_OscConfig+0x152>
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	68db      	ldr	r3, [r3, #12]
 8012bd6:	2b01      	cmp	r3, #1
 8012bd8:	d001      	beq.n	8012bde <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8012bda:	2301      	movs	r3, #1
 8012bdc:	e1c4      	b.n	8012f68 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8012bde:	4b56      	ldr	r3, [pc, #344]	; (8012d38 <HAL_RCC_OscConfig+0x2ac>)
 8012be0:	681b      	ldr	r3, [r3, #0]
 8012be2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8012be6:	687b      	ldr	r3, [r7, #4]
 8012be8:	691b      	ldr	r3, [r3, #16]
 8012bea:	00db      	lsls	r3, r3, #3
 8012bec:	4952      	ldr	r1, [pc, #328]	; (8012d38 <HAL_RCC_OscConfig+0x2ac>)
 8012bee:	4313      	orrs	r3, r2
 8012bf0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8012bf2:	e03a      	b.n	8012c6a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8012bf4:	687b      	ldr	r3, [r7, #4]
 8012bf6:	68db      	ldr	r3, [r3, #12]
 8012bf8:	2b00      	cmp	r3, #0
 8012bfa:	d020      	beq.n	8012c3e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8012bfc:	4b4f      	ldr	r3, [pc, #316]	; (8012d3c <HAL_RCC_OscConfig+0x2b0>)
 8012bfe:	2201      	movs	r2, #1
 8012c00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012c02:	f7fd fddf 	bl	80107c4 <HAL_GetTick>
 8012c06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012c08:	e008      	b.n	8012c1c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8012c0a:	f7fd fddb 	bl	80107c4 <HAL_GetTick>
 8012c0e:	4602      	mov	r2, r0
 8012c10:	693b      	ldr	r3, [r7, #16]
 8012c12:	1ad3      	subs	r3, r2, r3
 8012c14:	2b02      	cmp	r3, #2
 8012c16:	d901      	bls.n	8012c1c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8012c18:	2303      	movs	r3, #3
 8012c1a:	e1a5      	b.n	8012f68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012c1c:	4b46      	ldr	r3, [pc, #280]	; (8012d38 <HAL_RCC_OscConfig+0x2ac>)
 8012c1e:	681b      	ldr	r3, [r3, #0]
 8012c20:	f003 0302 	and.w	r3, r3, #2
 8012c24:	2b00      	cmp	r3, #0
 8012c26:	d0f0      	beq.n	8012c0a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8012c28:	4b43      	ldr	r3, [pc, #268]	; (8012d38 <HAL_RCC_OscConfig+0x2ac>)
 8012c2a:	681b      	ldr	r3, [r3, #0]
 8012c2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8012c30:	687b      	ldr	r3, [r7, #4]
 8012c32:	691b      	ldr	r3, [r3, #16]
 8012c34:	00db      	lsls	r3, r3, #3
 8012c36:	4940      	ldr	r1, [pc, #256]	; (8012d38 <HAL_RCC_OscConfig+0x2ac>)
 8012c38:	4313      	orrs	r3, r2
 8012c3a:	600b      	str	r3, [r1, #0]
 8012c3c:	e015      	b.n	8012c6a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8012c3e:	4b3f      	ldr	r3, [pc, #252]	; (8012d3c <HAL_RCC_OscConfig+0x2b0>)
 8012c40:	2200      	movs	r2, #0
 8012c42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012c44:	f7fd fdbe 	bl	80107c4 <HAL_GetTick>
 8012c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8012c4a:	e008      	b.n	8012c5e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8012c4c:	f7fd fdba 	bl	80107c4 <HAL_GetTick>
 8012c50:	4602      	mov	r2, r0
 8012c52:	693b      	ldr	r3, [r7, #16]
 8012c54:	1ad3      	subs	r3, r2, r3
 8012c56:	2b02      	cmp	r3, #2
 8012c58:	d901      	bls.n	8012c5e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8012c5a:	2303      	movs	r3, #3
 8012c5c:	e184      	b.n	8012f68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8012c5e:	4b36      	ldr	r3, [pc, #216]	; (8012d38 <HAL_RCC_OscConfig+0x2ac>)
 8012c60:	681b      	ldr	r3, [r3, #0]
 8012c62:	f003 0302 	and.w	r3, r3, #2
 8012c66:	2b00      	cmp	r3, #0
 8012c68:	d1f0      	bne.n	8012c4c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8012c6a:	687b      	ldr	r3, [r7, #4]
 8012c6c:	681b      	ldr	r3, [r3, #0]
 8012c6e:	f003 0308 	and.w	r3, r3, #8
 8012c72:	2b00      	cmp	r3, #0
 8012c74:	d030      	beq.n	8012cd8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	695b      	ldr	r3, [r3, #20]
 8012c7a:	2b00      	cmp	r3, #0
 8012c7c:	d016      	beq.n	8012cac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8012c7e:	4b30      	ldr	r3, [pc, #192]	; (8012d40 <HAL_RCC_OscConfig+0x2b4>)
 8012c80:	2201      	movs	r2, #1
 8012c82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012c84:	f7fd fd9e 	bl	80107c4 <HAL_GetTick>
 8012c88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8012c8a:	e008      	b.n	8012c9e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8012c8c:	f7fd fd9a 	bl	80107c4 <HAL_GetTick>
 8012c90:	4602      	mov	r2, r0
 8012c92:	693b      	ldr	r3, [r7, #16]
 8012c94:	1ad3      	subs	r3, r2, r3
 8012c96:	2b02      	cmp	r3, #2
 8012c98:	d901      	bls.n	8012c9e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8012c9a:	2303      	movs	r3, #3
 8012c9c:	e164      	b.n	8012f68 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8012c9e:	4b26      	ldr	r3, [pc, #152]	; (8012d38 <HAL_RCC_OscConfig+0x2ac>)
 8012ca0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012ca2:	f003 0302 	and.w	r3, r3, #2
 8012ca6:	2b00      	cmp	r3, #0
 8012ca8:	d0f0      	beq.n	8012c8c <HAL_RCC_OscConfig+0x200>
 8012caa:	e015      	b.n	8012cd8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8012cac:	4b24      	ldr	r3, [pc, #144]	; (8012d40 <HAL_RCC_OscConfig+0x2b4>)
 8012cae:	2200      	movs	r2, #0
 8012cb0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8012cb2:	f7fd fd87 	bl	80107c4 <HAL_GetTick>
 8012cb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8012cb8:	e008      	b.n	8012ccc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8012cba:	f7fd fd83 	bl	80107c4 <HAL_GetTick>
 8012cbe:	4602      	mov	r2, r0
 8012cc0:	693b      	ldr	r3, [r7, #16]
 8012cc2:	1ad3      	subs	r3, r2, r3
 8012cc4:	2b02      	cmp	r3, #2
 8012cc6:	d901      	bls.n	8012ccc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8012cc8:	2303      	movs	r3, #3
 8012cca:	e14d      	b.n	8012f68 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8012ccc:	4b1a      	ldr	r3, [pc, #104]	; (8012d38 <HAL_RCC_OscConfig+0x2ac>)
 8012cce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012cd0:	f003 0302 	and.w	r3, r3, #2
 8012cd4:	2b00      	cmp	r3, #0
 8012cd6:	d1f0      	bne.n	8012cba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8012cd8:	687b      	ldr	r3, [r7, #4]
 8012cda:	681b      	ldr	r3, [r3, #0]
 8012cdc:	f003 0304 	and.w	r3, r3, #4
 8012ce0:	2b00      	cmp	r3, #0
 8012ce2:	f000 80a0 	beq.w	8012e26 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8012ce6:	2300      	movs	r3, #0
 8012ce8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8012cea:	4b13      	ldr	r3, [pc, #76]	; (8012d38 <HAL_RCC_OscConfig+0x2ac>)
 8012cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012cee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012cf2:	2b00      	cmp	r3, #0
 8012cf4:	d10f      	bne.n	8012d16 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8012cf6:	2300      	movs	r3, #0
 8012cf8:	60bb      	str	r3, [r7, #8]
 8012cfa:	4b0f      	ldr	r3, [pc, #60]	; (8012d38 <HAL_RCC_OscConfig+0x2ac>)
 8012cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012cfe:	4a0e      	ldr	r2, [pc, #56]	; (8012d38 <HAL_RCC_OscConfig+0x2ac>)
 8012d00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012d04:	6413      	str	r3, [r2, #64]	; 0x40
 8012d06:	4b0c      	ldr	r3, [pc, #48]	; (8012d38 <HAL_RCC_OscConfig+0x2ac>)
 8012d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012d0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012d0e:	60bb      	str	r3, [r7, #8]
 8012d10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8012d12:	2301      	movs	r3, #1
 8012d14:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8012d16:	4b0b      	ldr	r3, [pc, #44]	; (8012d44 <HAL_RCC_OscConfig+0x2b8>)
 8012d18:	681b      	ldr	r3, [r3, #0]
 8012d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012d1e:	2b00      	cmp	r3, #0
 8012d20:	d121      	bne.n	8012d66 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8012d22:	4b08      	ldr	r3, [pc, #32]	; (8012d44 <HAL_RCC_OscConfig+0x2b8>)
 8012d24:	681b      	ldr	r3, [r3, #0]
 8012d26:	4a07      	ldr	r2, [pc, #28]	; (8012d44 <HAL_RCC_OscConfig+0x2b8>)
 8012d28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012d2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8012d2e:	f7fd fd49 	bl	80107c4 <HAL_GetTick>
 8012d32:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8012d34:	e011      	b.n	8012d5a <HAL_RCC_OscConfig+0x2ce>
 8012d36:	bf00      	nop
 8012d38:	40023800 	.word	0x40023800
 8012d3c:	42470000 	.word	0x42470000
 8012d40:	42470e80 	.word	0x42470e80
 8012d44:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8012d48:	f7fd fd3c 	bl	80107c4 <HAL_GetTick>
 8012d4c:	4602      	mov	r2, r0
 8012d4e:	693b      	ldr	r3, [r7, #16]
 8012d50:	1ad3      	subs	r3, r2, r3
 8012d52:	2b02      	cmp	r3, #2
 8012d54:	d901      	bls.n	8012d5a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8012d56:	2303      	movs	r3, #3
 8012d58:	e106      	b.n	8012f68 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8012d5a:	4b85      	ldr	r3, [pc, #532]	; (8012f70 <HAL_RCC_OscConfig+0x4e4>)
 8012d5c:	681b      	ldr	r3, [r3, #0]
 8012d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012d62:	2b00      	cmp	r3, #0
 8012d64:	d0f0      	beq.n	8012d48 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8012d66:	687b      	ldr	r3, [r7, #4]
 8012d68:	689b      	ldr	r3, [r3, #8]
 8012d6a:	2b01      	cmp	r3, #1
 8012d6c:	d106      	bne.n	8012d7c <HAL_RCC_OscConfig+0x2f0>
 8012d6e:	4b81      	ldr	r3, [pc, #516]	; (8012f74 <HAL_RCC_OscConfig+0x4e8>)
 8012d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012d72:	4a80      	ldr	r2, [pc, #512]	; (8012f74 <HAL_RCC_OscConfig+0x4e8>)
 8012d74:	f043 0301 	orr.w	r3, r3, #1
 8012d78:	6713      	str	r3, [r2, #112]	; 0x70
 8012d7a:	e01c      	b.n	8012db6 <HAL_RCC_OscConfig+0x32a>
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	689b      	ldr	r3, [r3, #8]
 8012d80:	2b05      	cmp	r3, #5
 8012d82:	d10c      	bne.n	8012d9e <HAL_RCC_OscConfig+0x312>
 8012d84:	4b7b      	ldr	r3, [pc, #492]	; (8012f74 <HAL_RCC_OscConfig+0x4e8>)
 8012d86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012d88:	4a7a      	ldr	r2, [pc, #488]	; (8012f74 <HAL_RCC_OscConfig+0x4e8>)
 8012d8a:	f043 0304 	orr.w	r3, r3, #4
 8012d8e:	6713      	str	r3, [r2, #112]	; 0x70
 8012d90:	4b78      	ldr	r3, [pc, #480]	; (8012f74 <HAL_RCC_OscConfig+0x4e8>)
 8012d92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012d94:	4a77      	ldr	r2, [pc, #476]	; (8012f74 <HAL_RCC_OscConfig+0x4e8>)
 8012d96:	f043 0301 	orr.w	r3, r3, #1
 8012d9a:	6713      	str	r3, [r2, #112]	; 0x70
 8012d9c:	e00b      	b.n	8012db6 <HAL_RCC_OscConfig+0x32a>
 8012d9e:	4b75      	ldr	r3, [pc, #468]	; (8012f74 <HAL_RCC_OscConfig+0x4e8>)
 8012da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012da2:	4a74      	ldr	r2, [pc, #464]	; (8012f74 <HAL_RCC_OscConfig+0x4e8>)
 8012da4:	f023 0301 	bic.w	r3, r3, #1
 8012da8:	6713      	str	r3, [r2, #112]	; 0x70
 8012daa:	4b72      	ldr	r3, [pc, #456]	; (8012f74 <HAL_RCC_OscConfig+0x4e8>)
 8012dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012dae:	4a71      	ldr	r2, [pc, #452]	; (8012f74 <HAL_RCC_OscConfig+0x4e8>)
 8012db0:	f023 0304 	bic.w	r3, r3, #4
 8012db4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8012db6:	687b      	ldr	r3, [r7, #4]
 8012db8:	689b      	ldr	r3, [r3, #8]
 8012dba:	2b00      	cmp	r3, #0
 8012dbc:	d015      	beq.n	8012dea <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012dbe:	f7fd fd01 	bl	80107c4 <HAL_GetTick>
 8012dc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8012dc4:	e00a      	b.n	8012ddc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012dc6:	f7fd fcfd 	bl	80107c4 <HAL_GetTick>
 8012dca:	4602      	mov	r2, r0
 8012dcc:	693b      	ldr	r3, [r7, #16]
 8012dce:	1ad3      	subs	r3, r2, r3
 8012dd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8012dd4:	4293      	cmp	r3, r2
 8012dd6:	d901      	bls.n	8012ddc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8012dd8:	2303      	movs	r3, #3
 8012dda:	e0c5      	b.n	8012f68 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8012ddc:	4b65      	ldr	r3, [pc, #404]	; (8012f74 <HAL_RCC_OscConfig+0x4e8>)
 8012dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012de0:	f003 0302 	and.w	r3, r3, #2
 8012de4:	2b00      	cmp	r3, #0
 8012de6:	d0ee      	beq.n	8012dc6 <HAL_RCC_OscConfig+0x33a>
 8012de8:	e014      	b.n	8012e14 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8012dea:	f7fd fceb 	bl	80107c4 <HAL_GetTick>
 8012dee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8012df0:	e00a      	b.n	8012e08 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012df2:	f7fd fce7 	bl	80107c4 <HAL_GetTick>
 8012df6:	4602      	mov	r2, r0
 8012df8:	693b      	ldr	r3, [r7, #16]
 8012dfa:	1ad3      	subs	r3, r2, r3
 8012dfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8012e00:	4293      	cmp	r3, r2
 8012e02:	d901      	bls.n	8012e08 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8012e04:	2303      	movs	r3, #3
 8012e06:	e0af      	b.n	8012f68 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8012e08:	4b5a      	ldr	r3, [pc, #360]	; (8012f74 <HAL_RCC_OscConfig+0x4e8>)
 8012e0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012e0c:	f003 0302 	and.w	r3, r3, #2
 8012e10:	2b00      	cmp	r3, #0
 8012e12:	d1ee      	bne.n	8012df2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8012e14:	7dfb      	ldrb	r3, [r7, #23]
 8012e16:	2b01      	cmp	r3, #1
 8012e18:	d105      	bne.n	8012e26 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8012e1a:	4b56      	ldr	r3, [pc, #344]	; (8012f74 <HAL_RCC_OscConfig+0x4e8>)
 8012e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012e1e:	4a55      	ldr	r2, [pc, #340]	; (8012f74 <HAL_RCC_OscConfig+0x4e8>)
 8012e20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012e24:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8012e26:	687b      	ldr	r3, [r7, #4]
 8012e28:	699b      	ldr	r3, [r3, #24]
 8012e2a:	2b00      	cmp	r3, #0
 8012e2c:	f000 809b 	beq.w	8012f66 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8012e30:	4b50      	ldr	r3, [pc, #320]	; (8012f74 <HAL_RCC_OscConfig+0x4e8>)
 8012e32:	689b      	ldr	r3, [r3, #8]
 8012e34:	f003 030c 	and.w	r3, r3, #12
 8012e38:	2b08      	cmp	r3, #8
 8012e3a:	d05c      	beq.n	8012ef6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8012e3c:	687b      	ldr	r3, [r7, #4]
 8012e3e:	699b      	ldr	r3, [r3, #24]
 8012e40:	2b02      	cmp	r3, #2
 8012e42:	d141      	bne.n	8012ec8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8012e44:	4b4c      	ldr	r3, [pc, #304]	; (8012f78 <HAL_RCC_OscConfig+0x4ec>)
 8012e46:	2200      	movs	r2, #0
 8012e48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012e4a:	f7fd fcbb 	bl	80107c4 <HAL_GetTick>
 8012e4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8012e50:	e008      	b.n	8012e64 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8012e52:	f7fd fcb7 	bl	80107c4 <HAL_GetTick>
 8012e56:	4602      	mov	r2, r0
 8012e58:	693b      	ldr	r3, [r7, #16]
 8012e5a:	1ad3      	subs	r3, r2, r3
 8012e5c:	2b02      	cmp	r3, #2
 8012e5e:	d901      	bls.n	8012e64 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8012e60:	2303      	movs	r3, #3
 8012e62:	e081      	b.n	8012f68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8012e64:	4b43      	ldr	r3, [pc, #268]	; (8012f74 <HAL_RCC_OscConfig+0x4e8>)
 8012e66:	681b      	ldr	r3, [r3, #0]
 8012e68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012e6c:	2b00      	cmp	r3, #0
 8012e6e:	d1f0      	bne.n	8012e52 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8012e70:	687b      	ldr	r3, [r7, #4]
 8012e72:	69da      	ldr	r2, [r3, #28]
 8012e74:	687b      	ldr	r3, [r7, #4]
 8012e76:	6a1b      	ldr	r3, [r3, #32]
 8012e78:	431a      	orrs	r2, r3
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e7e:	019b      	lsls	r3, r3, #6
 8012e80:	431a      	orrs	r2, r3
 8012e82:	687b      	ldr	r3, [r7, #4]
 8012e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012e86:	085b      	lsrs	r3, r3, #1
 8012e88:	3b01      	subs	r3, #1
 8012e8a:	041b      	lsls	r3, r3, #16
 8012e8c:	431a      	orrs	r2, r3
 8012e8e:	687b      	ldr	r3, [r7, #4]
 8012e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e92:	061b      	lsls	r3, r3, #24
 8012e94:	4937      	ldr	r1, [pc, #220]	; (8012f74 <HAL_RCC_OscConfig+0x4e8>)
 8012e96:	4313      	orrs	r3, r2
 8012e98:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8012e9a:	4b37      	ldr	r3, [pc, #220]	; (8012f78 <HAL_RCC_OscConfig+0x4ec>)
 8012e9c:	2201      	movs	r2, #1
 8012e9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012ea0:	f7fd fc90 	bl	80107c4 <HAL_GetTick>
 8012ea4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8012ea6:	e008      	b.n	8012eba <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8012ea8:	f7fd fc8c 	bl	80107c4 <HAL_GetTick>
 8012eac:	4602      	mov	r2, r0
 8012eae:	693b      	ldr	r3, [r7, #16]
 8012eb0:	1ad3      	subs	r3, r2, r3
 8012eb2:	2b02      	cmp	r3, #2
 8012eb4:	d901      	bls.n	8012eba <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8012eb6:	2303      	movs	r3, #3
 8012eb8:	e056      	b.n	8012f68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8012eba:	4b2e      	ldr	r3, [pc, #184]	; (8012f74 <HAL_RCC_OscConfig+0x4e8>)
 8012ebc:	681b      	ldr	r3, [r3, #0]
 8012ebe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012ec2:	2b00      	cmp	r3, #0
 8012ec4:	d0f0      	beq.n	8012ea8 <HAL_RCC_OscConfig+0x41c>
 8012ec6:	e04e      	b.n	8012f66 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8012ec8:	4b2b      	ldr	r3, [pc, #172]	; (8012f78 <HAL_RCC_OscConfig+0x4ec>)
 8012eca:	2200      	movs	r2, #0
 8012ecc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012ece:	f7fd fc79 	bl	80107c4 <HAL_GetTick>
 8012ed2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8012ed4:	e008      	b.n	8012ee8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8012ed6:	f7fd fc75 	bl	80107c4 <HAL_GetTick>
 8012eda:	4602      	mov	r2, r0
 8012edc:	693b      	ldr	r3, [r7, #16]
 8012ede:	1ad3      	subs	r3, r2, r3
 8012ee0:	2b02      	cmp	r3, #2
 8012ee2:	d901      	bls.n	8012ee8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8012ee4:	2303      	movs	r3, #3
 8012ee6:	e03f      	b.n	8012f68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8012ee8:	4b22      	ldr	r3, [pc, #136]	; (8012f74 <HAL_RCC_OscConfig+0x4e8>)
 8012eea:	681b      	ldr	r3, [r3, #0]
 8012eec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012ef0:	2b00      	cmp	r3, #0
 8012ef2:	d1f0      	bne.n	8012ed6 <HAL_RCC_OscConfig+0x44a>
 8012ef4:	e037      	b.n	8012f66 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8012ef6:	687b      	ldr	r3, [r7, #4]
 8012ef8:	699b      	ldr	r3, [r3, #24]
 8012efa:	2b01      	cmp	r3, #1
 8012efc:	d101      	bne.n	8012f02 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8012efe:	2301      	movs	r3, #1
 8012f00:	e032      	b.n	8012f68 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8012f02:	4b1c      	ldr	r3, [pc, #112]	; (8012f74 <HAL_RCC_OscConfig+0x4e8>)
 8012f04:	685b      	ldr	r3, [r3, #4]
 8012f06:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	699b      	ldr	r3, [r3, #24]
 8012f0c:	2b01      	cmp	r3, #1
 8012f0e:	d028      	beq.n	8012f62 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8012f10:	68fb      	ldr	r3, [r7, #12]
 8012f12:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8012f1a:	429a      	cmp	r2, r3
 8012f1c:	d121      	bne.n	8012f62 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8012f1e:	68fb      	ldr	r3, [r7, #12]
 8012f20:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8012f24:	687b      	ldr	r3, [r7, #4]
 8012f26:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8012f28:	429a      	cmp	r2, r3
 8012f2a:	d11a      	bne.n	8012f62 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8012f2c:	68fa      	ldr	r2, [r7, #12]
 8012f2e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8012f32:	4013      	ands	r3, r2
 8012f34:	687a      	ldr	r2, [r7, #4]
 8012f36:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8012f38:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8012f3a:	4293      	cmp	r3, r2
 8012f3c:	d111      	bne.n	8012f62 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8012f3e:	68fb      	ldr	r3, [r7, #12]
 8012f40:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8012f44:	687b      	ldr	r3, [r7, #4]
 8012f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012f48:	085b      	lsrs	r3, r3, #1
 8012f4a:	3b01      	subs	r3, #1
 8012f4c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8012f4e:	429a      	cmp	r2, r3
 8012f50:	d107      	bne.n	8012f62 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8012f52:	68fb      	ldr	r3, [r7, #12]
 8012f54:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f5c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8012f5e:	429a      	cmp	r2, r3
 8012f60:	d001      	beq.n	8012f66 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8012f62:	2301      	movs	r3, #1
 8012f64:	e000      	b.n	8012f68 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8012f66:	2300      	movs	r3, #0
}
 8012f68:	4618      	mov	r0, r3
 8012f6a:	3718      	adds	r7, #24
 8012f6c:	46bd      	mov	sp, r7
 8012f6e:	bd80      	pop	{r7, pc}
 8012f70:	40007000 	.word	0x40007000
 8012f74:	40023800 	.word	0x40023800
 8012f78:	42470060 	.word	0x42470060

08012f7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8012f7c:	b580      	push	{r7, lr}
 8012f7e:	b084      	sub	sp, #16
 8012f80:	af00      	add	r7, sp, #0
 8012f82:	6078      	str	r0, [r7, #4]
 8012f84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	2b00      	cmp	r3, #0
 8012f8a:	d101      	bne.n	8012f90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8012f8c:	2301      	movs	r3, #1
 8012f8e:	e0cc      	b.n	801312a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8012f90:	4b68      	ldr	r3, [pc, #416]	; (8013134 <HAL_RCC_ClockConfig+0x1b8>)
 8012f92:	681b      	ldr	r3, [r3, #0]
 8012f94:	f003 0307 	and.w	r3, r3, #7
 8012f98:	683a      	ldr	r2, [r7, #0]
 8012f9a:	429a      	cmp	r2, r3
 8012f9c:	d90c      	bls.n	8012fb8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8012f9e:	4b65      	ldr	r3, [pc, #404]	; (8013134 <HAL_RCC_ClockConfig+0x1b8>)
 8012fa0:	683a      	ldr	r2, [r7, #0]
 8012fa2:	b2d2      	uxtb	r2, r2
 8012fa4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8012fa6:	4b63      	ldr	r3, [pc, #396]	; (8013134 <HAL_RCC_ClockConfig+0x1b8>)
 8012fa8:	681b      	ldr	r3, [r3, #0]
 8012faa:	f003 0307 	and.w	r3, r3, #7
 8012fae:	683a      	ldr	r2, [r7, #0]
 8012fb0:	429a      	cmp	r2, r3
 8012fb2:	d001      	beq.n	8012fb8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8012fb4:	2301      	movs	r3, #1
 8012fb6:	e0b8      	b.n	801312a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	681b      	ldr	r3, [r3, #0]
 8012fbc:	f003 0302 	and.w	r3, r3, #2
 8012fc0:	2b00      	cmp	r3, #0
 8012fc2:	d020      	beq.n	8013006 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8012fc4:	687b      	ldr	r3, [r7, #4]
 8012fc6:	681b      	ldr	r3, [r3, #0]
 8012fc8:	f003 0304 	and.w	r3, r3, #4
 8012fcc:	2b00      	cmp	r3, #0
 8012fce:	d005      	beq.n	8012fdc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8012fd0:	4b59      	ldr	r3, [pc, #356]	; (8013138 <HAL_RCC_ClockConfig+0x1bc>)
 8012fd2:	689b      	ldr	r3, [r3, #8]
 8012fd4:	4a58      	ldr	r2, [pc, #352]	; (8013138 <HAL_RCC_ClockConfig+0x1bc>)
 8012fd6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8012fda:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8012fdc:	687b      	ldr	r3, [r7, #4]
 8012fde:	681b      	ldr	r3, [r3, #0]
 8012fe0:	f003 0308 	and.w	r3, r3, #8
 8012fe4:	2b00      	cmp	r3, #0
 8012fe6:	d005      	beq.n	8012ff4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8012fe8:	4b53      	ldr	r3, [pc, #332]	; (8013138 <HAL_RCC_ClockConfig+0x1bc>)
 8012fea:	689b      	ldr	r3, [r3, #8]
 8012fec:	4a52      	ldr	r2, [pc, #328]	; (8013138 <HAL_RCC_ClockConfig+0x1bc>)
 8012fee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8012ff2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8012ff4:	4b50      	ldr	r3, [pc, #320]	; (8013138 <HAL_RCC_ClockConfig+0x1bc>)
 8012ff6:	689b      	ldr	r3, [r3, #8]
 8012ff8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8012ffc:	687b      	ldr	r3, [r7, #4]
 8012ffe:	689b      	ldr	r3, [r3, #8]
 8013000:	494d      	ldr	r1, [pc, #308]	; (8013138 <HAL_RCC_ClockConfig+0x1bc>)
 8013002:	4313      	orrs	r3, r2
 8013004:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8013006:	687b      	ldr	r3, [r7, #4]
 8013008:	681b      	ldr	r3, [r3, #0]
 801300a:	f003 0301 	and.w	r3, r3, #1
 801300e:	2b00      	cmp	r3, #0
 8013010:	d044      	beq.n	801309c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	685b      	ldr	r3, [r3, #4]
 8013016:	2b01      	cmp	r3, #1
 8013018:	d107      	bne.n	801302a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801301a:	4b47      	ldr	r3, [pc, #284]	; (8013138 <HAL_RCC_ClockConfig+0x1bc>)
 801301c:	681b      	ldr	r3, [r3, #0]
 801301e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013022:	2b00      	cmp	r3, #0
 8013024:	d119      	bne.n	801305a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8013026:	2301      	movs	r3, #1
 8013028:	e07f      	b.n	801312a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	685b      	ldr	r3, [r3, #4]
 801302e:	2b02      	cmp	r3, #2
 8013030:	d003      	beq.n	801303a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8013032:	687b      	ldr	r3, [r7, #4]
 8013034:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8013036:	2b03      	cmp	r3, #3
 8013038:	d107      	bne.n	801304a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801303a:	4b3f      	ldr	r3, [pc, #252]	; (8013138 <HAL_RCC_ClockConfig+0x1bc>)
 801303c:	681b      	ldr	r3, [r3, #0]
 801303e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013042:	2b00      	cmp	r3, #0
 8013044:	d109      	bne.n	801305a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8013046:	2301      	movs	r3, #1
 8013048:	e06f      	b.n	801312a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801304a:	4b3b      	ldr	r3, [pc, #236]	; (8013138 <HAL_RCC_ClockConfig+0x1bc>)
 801304c:	681b      	ldr	r3, [r3, #0]
 801304e:	f003 0302 	and.w	r3, r3, #2
 8013052:	2b00      	cmp	r3, #0
 8013054:	d101      	bne.n	801305a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8013056:	2301      	movs	r3, #1
 8013058:	e067      	b.n	801312a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801305a:	4b37      	ldr	r3, [pc, #220]	; (8013138 <HAL_RCC_ClockConfig+0x1bc>)
 801305c:	689b      	ldr	r3, [r3, #8]
 801305e:	f023 0203 	bic.w	r2, r3, #3
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	685b      	ldr	r3, [r3, #4]
 8013066:	4934      	ldr	r1, [pc, #208]	; (8013138 <HAL_RCC_ClockConfig+0x1bc>)
 8013068:	4313      	orrs	r3, r2
 801306a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 801306c:	f7fd fbaa 	bl	80107c4 <HAL_GetTick>
 8013070:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8013072:	e00a      	b.n	801308a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8013074:	f7fd fba6 	bl	80107c4 <HAL_GetTick>
 8013078:	4602      	mov	r2, r0
 801307a:	68fb      	ldr	r3, [r7, #12]
 801307c:	1ad3      	subs	r3, r2, r3
 801307e:	f241 3288 	movw	r2, #5000	; 0x1388
 8013082:	4293      	cmp	r3, r2
 8013084:	d901      	bls.n	801308a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8013086:	2303      	movs	r3, #3
 8013088:	e04f      	b.n	801312a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801308a:	4b2b      	ldr	r3, [pc, #172]	; (8013138 <HAL_RCC_ClockConfig+0x1bc>)
 801308c:	689b      	ldr	r3, [r3, #8]
 801308e:	f003 020c 	and.w	r2, r3, #12
 8013092:	687b      	ldr	r3, [r7, #4]
 8013094:	685b      	ldr	r3, [r3, #4]
 8013096:	009b      	lsls	r3, r3, #2
 8013098:	429a      	cmp	r2, r3
 801309a:	d1eb      	bne.n	8013074 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 801309c:	4b25      	ldr	r3, [pc, #148]	; (8013134 <HAL_RCC_ClockConfig+0x1b8>)
 801309e:	681b      	ldr	r3, [r3, #0]
 80130a0:	f003 0307 	and.w	r3, r3, #7
 80130a4:	683a      	ldr	r2, [r7, #0]
 80130a6:	429a      	cmp	r2, r3
 80130a8:	d20c      	bcs.n	80130c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80130aa:	4b22      	ldr	r3, [pc, #136]	; (8013134 <HAL_RCC_ClockConfig+0x1b8>)
 80130ac:	683a      	ldr	r2, [r7, #0]
 80130ae:	b2d2      	uxtb	r2, r2
 80130b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80130b2:	4b20      	ldr	r3, [pc, #128]	; (8013134 <HAL_RCC_ClockConfig+0x1b8>)
 80130b4:	681b      	ldr	r3, [r3, #0]
 80130b6:	f003 0307 	and.w	r3, r3, #7
 80130ba:	683a      	ldr	r2, [r7, #0]
 80130bc:	429a      	cmp	r2, r3
 80130be:	d001      	beq.n	80130c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80130c0:	2301      	movs	r3, #1
 80130c2:	e032      	b.n	801312a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80130c4:	687b      	ldr	r3, [r7, #4]
 80130c6:	681b      	ldr	r3, [r3, #0]
 80130c8:	f003 0304 	and.w	r3, r3, #4
 80130cc:	2b00      	cmp	r3, #0
 80130ce:	d008      	beq.n	80130e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80130d0:	4b19      	ldr	r3, [pc, #100]	; (8013138 <HAL_RCC_ClockConfig+0x1bc>)
 80130d2:	689b      	ldr	r3, [r3, #8]
 80130d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80130d8:	687b      	ldr	r3, [r7, #4]
 80130da:	68db      	ldr	r3, [r3, #12]
 80130dc:	4916      	ldr	r1, [pc, #88]	; (8013138 <HAL_RCC_ClockConfig+0x1bc>)
 80130de:	4313      	orrs	r3, r2
 80130e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80130e2:	687b      	ldr	r3, [r7, #4]
 80130e4:	681b      	ldr	r3, [r3, #0]
 80130e6:	f003 0308 	and.w	r3, r3, #8
 80130ea:	2b00      	cmp	r3, #0
 80130ec:	d009      	beq.n	8013102 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80130ee:	4b12      	ldr	r3, [pc, #72]	; (8013138 <HAL_RCC_ClockConfig+0x1bc>)
 80130f0:	689b      	ldr	r3, [r3, #8]
 80130f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80130f6:	687b      	ldr	r3, [r7, #4]
 80130f8:	691b      	ldr	r3, [r3, #16]
 80130fa:	00db      	lsls	r3, r3, #3
 80130fc:	490e      	ldr	r1, [pc, #56]	; (8013138 <HAL_RCC_ClockConfig+0x1bc>)
 80130fe:	4313      	orrs	r3, r2
 8013100:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8013102:	f000 f821 	bl	8013148 <HAL_RCC_GetSysClockFreq>
 8013106:	4602      	mov	r2, r0
 8013108:	4b0b      	ldr	r3, [pc, #44]	; (8013138 <HAL_RCC_ClockConfig+0x1bc>)
 801310a:	689b      	ldr	r3, [r3, #8]
 801310c:	091b      	lsrs	r3, r3, #4
 801310e:	f003 030f 	and.w	r3, r3, #15
 8013112:	490a      	ldr	r1, [pc, #40]	; (801313c <HAL_RCC_ClockConfig+0x1c0>)
 8013114:	5ccb      	ldrb	r3, [r1, r3]
 8013116:	fa22 f303 	lsr.w	r3, r2, r3
 801311a:	4a09      	ldr	r2, [pc, #36]	; (8013140 <HAL_RCC_ClockConfig+0x1c4>)
 801311c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 801311e:	4b09      	ldr	r3, [pc, #36]	; (8013144 <HAL_RCC_ClockConfig+0x1c8>)
 8013120:	681b      	ldr	r3, [r3, #0]
 8013122:	4618      	mov	r0, r3
 8013124:	f7f1 f91c 	bl	8004360 <HAL_InitTick>

  return HAL_OK;
 8013128:	2300      	movs	r3, #0
}
 801312a:	4618      	mov	r0, r3
 801312c:	3710      	adds	r7, #16
 801312e:	46bd      	mov	sp, r7
 8013130:	bd80      	pop	{r7, pc}
 8013132:	bf00      	nop
 8013134:	40023c00 	.word	0x40023c00
 8013138:	40023800 	.word	0x40023800
 801313c:	0801b5c4 	.word	0x0801b5c4
 8013140:	20000004 	.word	0x20000004
 8013144:	200013b8 	.word	0x200013b8

08013148 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8013148:	b5b0      	push	{r4, r5, r7, lr}
 801314a:	b084      	sub	sp, #16
 801314c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 801314e:	2100      	movs	r1, #0
 8013150:	6079      	str	r1, [r7, #4]
 8013152:	2100      	movs	r1, #0
 8013154:	60f9      	str	r1, [r7, #12]
 8013156:	2100      	movs	r1, #0
 8013158:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 801315a:	2100      	movs	r1, #0
 801315c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 801315e:	4952      	ldr	r1, [pc, #328]	; (80132a8 <HAL_RCC_GetSysClockFreq+0x160>)
 8013160:	6889      	ldr	r1, [r1, #8]
 8013162:	f001 010c 	and.w	r1, r1, #12
 8013166:	2908      	cmp	r1, #8
 8013168:	d00d      	beq.n	8013186 <HAL_RCC_GetSysClockFreq+0x3e>
 801316a:	2908      	cmp	r1, #8
 801316c:	f200 8094 	bhi.w	8013298 <HAL_RCC_GetSysClockFreq+0x150>
 8013170:	2900      	cmp	r1, #0
 8013172:	d002      	beq.n	801317a <HAL_RCC_GetSysClockFreq+0x32>
 8013174:	2904      	cmp	r1, #4
 8013176:	d003      	beq.n	8013180 <HAL_RCC_GetSysClockFreq+0x38>
 8013178:	e08e      	b.n	8013298 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 801317a:	4b4c      	ldr	r3, [pc, #304]	; (80132ac <HAL_RCC_GetSysClockFreq+0x164>)
 801317c:	60bb      	str	r3, [r7, #8]
       break;
 801317e:	e08e      	b.n	801329e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8013180:	4b4b      	ldr	r3, [pc, #300]	; (80132b0 <HAL_RCC_GetSysClockFreq+0x168>)
 8013182:	60bb      	str	r3, [r7, #8]
      break;
 8013184:	e08b      	b.n	801329e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8013186:	4948      	ldr	r1, [pc, #288]	; (80132a8 <HAL_RCC_GetSysClockFreq+0x160>)
 8013188:	6849      	ldr	r1, [r1, #4]
 801318a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 801318e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8013190:	4945      	ldr	r1, [pc, #276]	; (80132a8 <HAL_RCC_GetSysClockFreq+0x160>)
 8013192:	6849      	ldr	r1, [r1, #4]
 8013194:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8013198:	2900      	cmp	r1, #0
 801319a:	d024      	beq.n	80131e6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801319c:	4942      	ldr	r1, [pc, #264]	; (80132a8 <HAL_RCC_GetSysClockFreq+0x160>)
 801319e:	6849      	ldr	r1, [r1, #4]
 80131a0:	0989      	lsrs	r1, r1, #6
 80131a2:	4608      	mov	r0, r1
 80131a4:	f04f 0100 	mov.w	r1, #0
 80131a8:	f240 14ff 	movw	r4, #511	; 0x1ff
 80131ac:	f04f 0500 	mov.w	r5, #0
 80131b0:	ea00 0204 	and.w	r2, r0, r4
 80131b4:	ea01 0305 	and.w	r3, r1, r5
 80131b8:	493d      	ldr	r1, [pc, #244]	; (80132b0 <HAL_RCC_GetSysClockFreq+0x168>)
 80131ba:	fb01 f003 	mul.w	r0, r1, r3
 80131be:	2100      	movs	r1, #0
 80131c0:	fb01 f102 	mul.w	r1, r1, r2
 80131c4:	1844      	adds	r4, r0, r1
 80131c6:	493a      	ldr	r1, [pc, #232]	; (80132b0 <HAL_RCC_GetSysClockFreq+0x168>)
 80131c8:	fba2 0101 	umull	r0, r1, r2, r1
 80131cc:	1863      	adds	r3, r4, r1
 80131ce:	4619      	mov	r1, r3
 80131d0:	687b      	ldr	r3, [r7, #4]
 80131d2:	461a      	mov	r2, r3
 80131d4:	f04f 0300 	mov.w	r3, #0
 80131d8:	f7ed fd48 	bl	8000c6c <__aeabi_uldivmod>
 80131dc:	4602      	mov	r2, r0
 80131de:	460b      	mov	r3, r1
 80131e0:	4613      	mov	r3, r2
 80131e2:	60fb      	str	r3, [r7, #12]
 80131e4:	e04a      	b.n	801327c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80131e6:	4b30      	ldr	r3, [pc, #192]	; (80132a8 <HAL_RCC_GetSysClockFreq+0x160>)
 80131e8:	685b      	ldr	r3, [r3, #4]
 80131ea:	099b      	lsrs	r3, r3, #6
 80131ec:	461a      	mov	r2, r3
 80131ee:	f04f 0300 	mov.w	r3, #0
 80131f2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80131f6:	f04f 0100 	mov.w	r1, #0
 80131fa:	ea02 0400 	and.w	r4, r2, r0
 80131fe:	ea03 0501 	and.w	r5, r3, r1
 8013202:	4620      	mov	r0, r4
 8013204:	4629      	mov	r1, r5
 8013206:	f04f 0200 	mov.w	r2, #0
 801320a:	f04f 0300 	mov.w	r3, #0
 801320e:	014b      	lsls	r3, r1, #5
 8013210:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8013214:	0142      	lsls	r2, r0, #5
 8013216:	4610      	mov	r0, r2
 8013218:	4619      	mov	r1, r3
 801321a:	1b00      	subs	r0, r0, r4
 801321c:	eb61 0105 	sbc.w	r1, r1, r5
 8013220:	f04f 0200 	mov.w	r2, #0
 8013224:	f04f 0300 	mov.w	r3, #0
 8013228:	018b      	lsls	r3, r1, #6
 801322a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 801322e:	0182      	lsls	r2, r0, #6
 8013230:	1a12      	subs	r2, r2, r0
 8013232:	eb63 0301 	sbc.w	r3, r3, r1
 8013236:	f04f 0000 	mov.w	r0, #0
 801323a:	f04f 0100 	mov.w	r1, #0
 801323e:	00d9      	lsls	r1, r3, #3
 8013240:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8013244:	00d0      	lsls	r0, r2, #3
 8013246:	4602      	mov	r2, r0
 8013248:	460b      	mov	r3, r1
 801324a:	1912      	adds	r2, r2, r4
 801324c:	eb45 0303 	adc.w	r3, r5, r3
 8013250:	f04f 0000 	mov.w	r0, #0
 8013254:	f04f 0100 	mov.w	r1, #0
 8013258:	0299      	lsls	r1, r3, #10
 801325a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 801325e:	0290      	lsls	r0, r2, #10
 8013260:	4602      	mov	r2, r0
 8013262:	460b      	mov	r3, r1
 8013264:	4610      	mov	r0, r2
 8013266:	4619      	mov	r1, r3
 8013268:	687b      	ldr	r3, [r7, #4]
 801326a:	461a      	mov	r2, r3
 801326c:	f04f 0300 	mov.w	r3, #0
 8013270:	f7ed fcfc 	bl	8000c6c <__aeabi_uldivmod>
 8013274:	4602      	mov	r2, r0
 8013276:	460b      	mov	r3, r1
 8013278:	4613      	mov	r3, r2
 801327a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 801327c:	4b0a      	ldr	r3, [pc, #40]	; (80132a8 <HAL_RCC_GetSysClockFreq+0x160>)
 801327e:	685b      	ldr	r3, [r3, #4]
 8013280:	0c1b      	lsrs	r3, r3, #16
 8013282:	f003 0303 	and.w	r3, r3, #3
 8013286:	3301      	adds	r3, #1
 8013288:	005b      	lsls	r3, r3, #1
 801328a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 801328c:	68fa      	ldr	r2, [r7, #12]
 801328e:	683b      	ldr	r3, [r7, #0]
 8013290:	fbb2 f3f3 	udiv	r3, r2, r3
 8013294:	60bb      	str	r3, [r7, #8]
      break;
 8013296:	e002      	b.n	801329e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8013298:	4b04      	ldr	r3, [pc, #16]	; (80132ac <HAL_RCC_GetSysClockFreq+0x164>)
 801329a:	60bb      	str	r3, [r7, #8]
      break;
 801329c:	bf00      	nop
    }
  }
  return sysclockfreq;
 801329e:	68bb      	ldr	r3, [r7, #8]
}
 80132a0:	4618      	mov	r0, r3
 80132a2:	3710      	adds	r7, #16
 80132a4:	46bd      	mov	sp, r7
 80132a6:	bdb0      	pop	{r4, r5, r7, pc}
 80132a8:	40023800 	.word	0x40023800
 80132ac:	00f42400 	.word	0x00f42400
 80132b0:	017d7840 	.word	0x017d7840

080132b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80132b4:	b480      	push	{r7}
 80132b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80132b8:	4b03      	ldr	r3, [pc, #12]	; (80132c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80132ba:	681b      	ldr	r3, [r3, #0]
}
 80132bc:	4618      	mov	r0, r3
 80132be:	46bd      	mov	sp, r7
 80132c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132c4:	4770      	bx	lr
 80132c6:	bf00      	nop
 80132c8:	20000004 	.word	0x20000004

080132cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80132cc:	b580      	push	{r7, lr}
 80132ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80132d0:	f7ff fff0 	bl	80132b4 <HAL_RCC_GetHCLKFreq>
 80132d4:	4602      	mov	r2, r0
 80132d6:	4b05      	ldr	r3, [pc, #20]	; (80132ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80132d8:	689b      	ldr	r3, [r3, #8]
 80132da:	0a9b      	lsrs	r3, r3, #10
 80132dc:	f003 0307 	and.w	r3, r3, #7
 80132e0:	4903      	ldr	r1, [pc, #12]	; (80132f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80132e2:	5ccb      	ldrb	r3, [r1, r3]
 80132e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80132e8:	4618      	mov	r0, r3
 80132ea:	bd80      	pop	{r7, pc}
 80132ec:	40023800 	.word	0x40023800
 80132f0:	0801b5d4 	.word	0x0801b5d4

080132f4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80132f4:	b480      	push	{r7}
 80132f6:	b083      	sub	sp, #12
 80132f8:	af00      	add	r7, sp, #0
 80132fa:	6078      	str	r0, [r7, #4]
 80132fc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	220f      	movs	r2, #15
 8013302:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8013304:	4b12      	ldr	r3, [pc, #72]	; (8013350 <HAL_RCC_GetClockConfig+0x5c>)
 8013306:	689b      	ldr	r3, [r3, #8]
 8013308:	f003 0203 	and.w	r2, r3, #3
 801330c:	687b      	ldr	r3, [r7, #4]
 801330e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8013310:	4b0f      	ldr	r3, [pc, #60]	; (8013350 <HAL_RCC_GetClockConfig+0x5c>)
 8013312:	689b      	ldr	r3, [r3, #8]
 8013314:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8013318:	687b      	ldr	r3, [r7, #4]
 801331a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 801331c:	4b0c      	ldr	r3, [pc, #48]	; (8013350 <HAL_RCC_GetClockConfig+0x5c>)
 801331e:	689b      	ldr	r3, [r3, #8]
 8013320:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8013324:	687b      	ldr	r3, [r7, #4]
 8013326:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8013328:	4b09      	ldr	r3, [pc, #36]	; (8013350 <HAL_RCC_GetClockConfig+0x5c>)
 801332a:	689b      	ldr	r3, [r3, #8]
 801332c:	08db      	lsrs	r3, r3, #3
 801332e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8013332:	687b      	ldr	r3, [r7, #4]
 8013334:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8013336:	4b07      	ldr	r3, [pc, #28]	; (8013354 <HAL_RCC_GetClockConfig+0x60>)
 8013338:	681b      	ldr	r3, [r3, #0]
 801333a:	f003 0207 	and.w	r2, r3, #7
 801333e:	683b      	ldr	r3, [r7, #0]
 8013340:	601a      	str	r2, [r3, #0]
}
 8013342:	bf00      	nop
 8013344:	370c      	adds	r7, #12
 8013346:	46bd      	mov	sp, r7
 8013348:	f85d 7b04 	ldr.w	r7, [sp], #4
 801334c:	4770      	bx	lr
 801334e:	bf00      	nop
 8013350:	40023800 	.word	0x40023800
 8013354:	40023c00 	.word	0x40023c00

08013358 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8013358:	b580      	push	{r7, lr}
 801335a:	b082      	sub	sp, #8
 801335c:	af00      	add	r7, sp, #0
 801335e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	2b00      	cmp	r3, #0
 8013364:	d101      	bne.n	801336a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8013366:	2301      	movs	r3, #1
 8013368:	e07b      	b.n	8013462 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801336e:	2b00      	cmp	r3, #0
 8013370:	d108      	bne.n	8013384 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8013372:	687b      	ldr	r3, [r7, #4]
 8013374:	685b      	ldr	r3, [r3, #4]
 8013376:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801337a:	d009      	beq.n	8013390 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	2200      	movs	r2, #0
 8013380:	61da      	str	r2, [r3, #28]
 8013382:	e005      	b.n	8013390 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8013384:	687b      	ldr	r3, [r7, #4]
 8013386:	2200      	movs	r2, #0
 8013388:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 801338a:	687b      	ldr	r3, [r7, #4]
 801338c:	2200      	movs	r2, #0
 801338e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	2200      	movs	r2, #0
 8013394:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801339c:	b2db      	uxtb	r3, r3
 801339e:	2b00      	cmp	r3, #0
 80133a0:	d106      	bne.n	80133b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80133a2:	687b      	ldr	r3, [r7, #4]
 80133a4:	2200      	movs	r2, #0
 80133a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80133aa:	6878      	ldr	r0, [r7, #4]
 80133ac:	f7f0 ff44 	bl	8004238 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	2202      	movs	r2, #2
 80133b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80133b8:	687b      	ldr	r3, [r7, #4]
 80133ba:	681b      	ldr	r3, [r3, #0]
 80133bc:	681a      	ldr	r2, [r3, #0]
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	681b      	ldr	r3, [r3, #0]
 80133c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80133c6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	685b      	ldr	r3, [r3, #4]
 80133cc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80133d0:	687b      	ldr	r3, [r7, #4]
 80133d2:	689b      	ldr	r3, [r3, #8]
 80133d4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80133d8:	431a      	orrs	r2, r3
 80133da:	687b      	ldr	r3, [r7, #4]
 80133dc:	68db      	ldr	r3, [r3, #12]
 80133de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80133e2:	431a      	orrs	r2, r3
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	691b      	ldr	r3, [r3, #16]
 80133e8:	f003 0302 	and.w	r3, r3, #2
 80133ec:	431a      	orrs	r2, r3
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	695b      	ldr	r3, [r3, #20]
 80133f2:	f003 0301 	and.w	r3, r3, #1
 80133f6:	431a      	orrs	r2, r3
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	699b      	ldr	r3, [r3, #24]
 80133fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8013400:	431a      	orrs	r2, r3
 8013402:	687b      	ldr	r3, [r7, #4]
 8013404:	69db      	ldr	r3, [r3, #28]
 8013406:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801340a:	431a      	orrs	r2, r3
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	6a1b      	ldr	r3, [r3, #32]
 8013410:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013414:	ea42 0103 	orr.w	r1, r2, r3
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801341c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8013420:	687b      	ldr	r3, [r7, #4]
 8013422:	681b      	ldr	r3, [r3, #0]
 8013424:	430a      	orrs	r2, r1
 8013426:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	699b      	ldr	r3, [r3, #24]
 801342c:	0c1b      	lsrs	r3, r3, #16
 801342e:	f003 0104 	and.w	r1, r3, #4
 8013432:	687b      	ldr	r3, [r7, #4]
 8013434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013436:	f003 0210 	and.w	r2, r3, #16
 801343a:	687b      	ldr	r3, [r7, #4]
 801343c:	681b      	ldr	r3, [r3, #0]
 801343e:	430a      	orrs	r2, r1
 8013440:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	681b      	ldr	r3, [r3, #0]
 8013446:	69da      	ldr	r2, [r3, #28]
 8013448:	687b      	ldr	r3, [r7, #4]
 801344a:	681b      	ldr	r3, [r3, #0]
 801344c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8013450:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8013452:	687b      	ldr	r3, [r7, #4]
 8013454:	2200      	movs	r2, #0
 8013456:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8013458:	687b      	ldr	r3, [r7, #4]
 801345a:	2201      	movs	r2, #1
 801345c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8013460:	2300      	movs	r3, #0
}
 8013462:	4618      	mov	r0, r3
 8013464:	3708      	adds	r7, #8
 8013466:	46bd      	mov	sp, r7
 8013468:	bd80      	pop	{r7, pc}

0801346a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801346a:	b580      	push	{r7, lr}
 801346c:	b088      	sub	sp, #32
 801346e:	af00      	add	r7, sp, #0
 8013470:	60f8      	str	r0, [r7, #12]
 8013472:	60b9      	str	r1, [r7, #8]
 8013474:	603b      	str	r3, [r7, #0]
 8013476:	4613      	mov	r3, r2
 8013478:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801347a:	2300      	movs	r3, #0
 801347c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801347e:	68fb      	ldr	r3, [r7, #12]
 8013480:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8013484:	2b01      	cmp	r3, #1
 8013486:	d101      	bne.n	801348c <HAL_SPI_Transmit+0x22>
 8013488:	2302      	movs	r3, #2
 801348a:	e126      	b.n	80136da <HAL_SPI_Transmit+0x270>
 801348c:	68fb      	ldr	r3, [r7, #12]
 801348e:	2201      	movs	r2, #1
 8013490:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8013494:	f7fd f996 	bl	80107c4 <HAL_GetTick>
 8013498:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 801349a:	88fb      	ldrh	r3, [r7, #6]
 801349c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 801349e:	68fb      	ldr	r3, [r7, #12]
 80134a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80134a4:	b2db      	uxtb	r3, r3
 80134a6:	2b01      	cmp	r3, #1
 80134a8:	d002      	beq.n	80134b0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80134aa:	2302      	movs	r3, #2
 80134ac:	77fb      	strb	r3, [r7, #31]
    goto error;
 80134ae:	e10b      	b.n	80136c8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80134b0:	68bb      	ldr	r3, [r7, #8]
 80134b2:	2b00      	cmp	r3, #0
 80134b4:	d002      	beq.n	80134bc <HAL_SPI_Transmit+0x52>
 80134b6:	88fb      	ldrh	r3, [r7, #6]
 80134b8:	2b00      	cmp	r3, #0
 80134ba:	d102      	bne.n	80134c2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80134bc:	2301      	movs	r3, #1
 80134be:	77fb      	strb	r3, [r7, #31]
    goto error;
 80134c0:	e102      	b.n	80136c8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80134c2:	68fb      	ldr	r3, [r7, #12]
 80134c4:	2203      	movs	r2, #3
 80134c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80134ca:	68fb      	ldr	r3, [r7, #12]
 80134cc:	2200      	movs	r2, #0
 80134ce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80134d0:	68fb      	ldr	r3, [r7, #12]
 80134d2:	68ba      	ldr	r2, [r7, #8]
 80134d4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80134d6:	68fb      	ldr	r3, [r7, #12]
 80134d8:	88fa      	ldrh	r2, [r7, #6]
 80134da:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80134dc:	68fb      	ldr	r3, [r7, #12]
 80134de:	88fa      	ldrh	r2, [r7, #6]
 80134e0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80134e2:	68fb      	ldr	r3, [r7, #12]
 80134e4:	2200      	movs	r2, #0
 80134e6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80134e8:	68fb      	ldr	r3, [r7, #12]
 80134ea:	2200      	movs	r2, #0
 80134ec:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80134ee:	68fb      	ldr	r3, [r7, #12]
 80134f0:	2200      	movs	r2, #0
 80134f2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80134f4:	68fb      	ldr	r3, [r7, #12]
 80134f6:	2200      	movs	r2, #0
 80134f8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80134fa:	68fb      	ldr	r3, [r7, #12]
 80134fc:	2200      	movs	r2, #0
 80134fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8013500:	68fb      	ldr	r3, [r7, #12]
 8013502:	689b      	ldr	r3, [r3, #8]
 8013504:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013508:	d10f      	bne.n	801352a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801350a:	68fb      	ldr	r3, [r7, #12]
 801350c:	681b      	ldr	r3, [r3, #0]
 801350e:	681a      	ldr	r2, [r3, #0]
 8013510:	68fb      	ldr	r3, [r7, #12]
 8013512:	681b      	ldr	r3, [r3, #0]
 8013514:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013518:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 801351a:	68fb      	ldr	r3, [r7, #12]
 801351c:	681b      	ldr	r3, [r3, #0]
 801351e:	681a      	ldr	r2, [r3, #0]
 8013520:	68fb      	ldr	r3, [r7, #12]
 8013522:	681b      	ldr	r3, [r3, #0]
 8013524:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8013528:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801352a:	68fb      	ldr	r3, [r7, #12]
 801352c:	681b      	ldr	r3, [r3, #0]
 801352e:	681b      	ldr	r3, [r3, #0]
 8013530:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013534:	2b40      	cmp	r3, #64	; 0x40
 8013536:	d007      	beq.n	8013548 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8013538:	68fb      	ldr	r3, [r7, #12]
 801353a:	681b      	ldr	r3, [r3, #0]
 801353c:	681a      	ldr	r2, [r3, #0]
 801353e:	68fb      	ldr	r3, [r7, #12]
 8013540:	681b      	ldr	r3, [r3, #0]
 8013542:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013546:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8013548:	68fb      	ldr	r3, [r7, #12]
 801354a:	68db      	ldr	r3, [r3, #12]
 801354c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013550:	d14b      	bne.n	80135ea <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8013552:	68fb      	ldr	r3, [r7, #12]
 8013554:	685b      	ldr	r3, [r3, #4]
 8013556:	2b00      	cmp	r3, #0
 8013558:	d002      	beq.n	8013560 <HAL_SPI_Transmit+0xf6>
 801355a:	8afb      	ldrh	r3, [r7, #22]
 801355c:	2b01      	cmp	r3, #1
 801355e:	d13e      	bne.n	80135de <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8013560:	68fb      	ldr	r3, [r7, #12]
 8013562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013564:	881a      	ldrh	r2, [r3, #0]
 8013566:	68fb      	ldr	r3, [r7, #12]
 8013568:	681b      	ldr	r3, [r3, #0]
 801356a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801356c:	68fb      	ldr	r3, [r7, #12]
 801356e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013570:	1c9a      	adds	r2, r3, #2
 8013572:	68fb      	ldr	r3, [r7, #12]
 8013574:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8013576:	68fb      	ldr	r3, [r7, #12]
 8013578:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801357a:	b29b      	uxth	r3, r3
 801357c:	3b01      	subs	r3, #1
 801357e:	b29a      	uxth	r2, r3
 8013580:	68fb      	ldr	r3, [r7, #12]
 8013582:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8013584:	e02b      	b.n	80135de <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8013586:	68fb      	ldr	r3, [r7, #12]
 8013588:	681b      	ldr	r3, [r3, #0]
 801358a:	689b      	ldr	r3, [r3, #8]
 801358c:	f003 0302 	and.w	r3, r3, #2
 8013590:	2b02      	cmp	r3, #2
 8013592:	d112      	bne.n	80135ba <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8013594:	68fb      	ldr	r3, [r7, #12]
 8013596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013598:	881a      	ldrh	r2, [r3, #0]
 801359a:	68fb      	ldr	r3, [r7, #12]
 801359c:	681b      	ldr	r3, [r3, #0]
 801359e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80135a0:	68fb      	ldr	r3, [r7, #12]
 80135a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80135a4:	1c9a      	adds	r2, r3, #2
 80135a6:	68fb      	ldr	r3, [r7, #12]
 80135a8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80135aa:	68fb      	ldr	r3, [r7, #12]
 80135ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80135ae:	b29b      	uxth	r3, r3
 80135b0:	3b01      	subs	r3, #1
 80135b2:	b29a      	uxth	r2, r3
 80135b4:	68fb      	ldr	r3, [r7, #12]
 80135b6:	86da      	strh	r2, [r3, #54]	; 0x36
 80135b8:	e011      	b.n	80135de <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80135ba:	f7fd f903 	bl	80107c4 <HAL_GetTick>
 80135be:	4602      	mov	r2, r0
 80135c0:	69bb      	ldr	r3, [r7, #24]
 80135c2:	1ad3      	subs	r3, r2, r3
 80135c4:	683a      	ldr	r2, [r7, #0]
 80135c6:	429a      	cmp	r2, r3
 80135c8:	d803      	bhi.n	80135d2 <HAL_SPI_Transmit+0x168>
 80135ca:	683b      	ldr	r3, [r7, #0]
 80135cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80135d0:	d102      	bne.n	80135d8 <HAL_SPI_Transmit+0x16e>
 80135d2:	683b      	ldr	r3, [r7, #0]
 80135d4:	2b00      	cmp	r3, #0
 80135d6:	d102      	bne.n	80135de <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80135d8:	2303      	movs	r3, #3
 80135da:	77fb      	strb	r3, [r7, #31]
          goto error;
 80135dc:	e074      	b.n	80136c8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80135de:	68fb      	ldr	r3, [r7, #12]
 80135e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80135e2:	b29b      	uxth	r3, r3
 80135e4:	2b00      	cmp	r3, #0
 80135e6:	d1ce      	bne.n	8013586 <HAL_SPI_Transmit+0x11c>
 80135e8:	e04c      	b.n	8013684 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80135ea:	68fb      	ldr	r3, [r7, #12]
 80135ec:	685b      	ldr	r3, [r3, #4]
 80135ee:	2b00      	cmp	r3, #0
 80135f0:	d002      	beq.n	80135f8 <HAL_SPI_Transmit+0x18e>
 80135f2:	8afb      	ldrh	r3, [r7, #22]
 80135f4:	2b01      	cmp	r3, #1
 80135f6:	d140      	bne.n	801367a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80135f8:	68fb      	ldr	r3, [r7, #12]
 80135fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80135fc:	68fb      	ldr	r3, [r7, #12]
 80135fe:	681b      	ldr	r3, [r3, #0]
 8013600:	330c      	adds	r3, #12
 8013602:	7812      	ldrb	r2, [r2, #0]
 8013604:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8013606:	68fb      	ldr	r3, [r7, #12]
 8013608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801360a:	1c5a      	adds	r2, r3, #1
 801360c:	68fb      	ldr	r3, [r7, #12]
 801360e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8013610:	68fb      	ldr	r3, [r7, #12]
 8013612:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013614:	b29b      	uxth	r3, r3
 8013616:	3b01      	subs	r3, #1
 8013618:	b29a      	uxth	r2, r3
 801361a:	68fb      	ldr	r3, [r7, #12]
 801361c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 801361e:	e02c      	b.n	801367a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8013620:	68fb      	ldr	r3, [r7, #12]
 8013622:	681b      	ldr	r3, [r3, #0]
 8013624:	689b      	ldr	r3, [r3, #8]
 8013626:	f003 0302 	and.w	r3, r3, #2
 801362a:	2b02      	cmp	r3, #2
 801362c:	d113      	bne.n	8013656 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801362e:	68fb      	ldr	r3, [r7, #12]
 8013630:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013632:	68fb      	ldr	r3, [r7, #12]
 8013634:	681b      	ldr	r3, [r3, #0]
 8013636:	330c      	adds	r3, #12
 8013638:	7812      	ldrb	r2, [r2, #0]
 801363a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 801363c:	68fb      	ldr	r3, [r7, #12]
 801363e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013640:	1c5a      	adds	r2, r3, #1
 8013642:	68fb      	ldr	r3, [r7, #12]
 8013644:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8013646:	68fb      	ldr	r3, [r7, #12]
 8013648:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801364a:	b29b      	uxth	r3, r3
 801364c:	3b01      	subs	r3, #1
 801364e:	b29a      	uxth	r2, r3
 8013650:	68fb      	ldr	r3, [r7, #12]
 8013652:	86da      	strh	r2, [r3, #54]	; 0x36
 8013654:	e011      	b.n	801367a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8013656:	f7fd f8b5 	bl	80107c4 <HAL_GetTick>
 801365a:	4602      	mov	r2, r0
 801365c:	69bb      	ldr	r3, [r7, #24]
 801365e:	1ad3      	subs	r3, r2, r3
 8013660:	683a      	ldr	r2, [r7, #0]
 8013662:	429a      	cmp	r2, r3
 8013664:	d803      	bhi.n	801366e <HAL_SPI_Transmit+0x204>
 8013666:	683b      	ldr	r3, [r7, #0]
 8013668:	f1b3 3fff 	cmp.w	r3, #4294967295
 801366c:	d102      	bne.n	8013674 <HAL_SPI_Transmit+0x20a>
 801366e:	683b      	ldr	r3, [r7, #0]
 8013670:	2b00      	cmp	r3, #0
 8013672:	d102      	bne.n	801367a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8013674:	2303      	movs	r3, #3
 8013676:	77fb      	strb	r3, [r7, #31]
          goto error;
 8013678:	e026      	b.n	80136c8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 801367a:	68fb      	ldr	r3, [r7, #12]
 801367c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801367e:	b29b      	uxth	r3, r3
 8013680:	2b00      	cmp	r3, #0
 8013682:	d1cd      	bne.n	8013620 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8013684:	69ba      	ldr	r2, [r7, #24]
 8013686:	6839      	ldr	r1, [r7, #0]
 8013688:	68f8      	ldr	r0, [r7, #12]
 801368a:	f000 fbcb 	bl	8013e24 <SPI_EndRxTxTransaction>
 801368e:	4603      	mov	r3, r0
 8013690:	2b00      	cmp	r3, #0
 8013692:	d002      	beq.n	801369a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8013694:	68fb      	ldr	r3, [r7, #12]
 8013696:	2220      	movs	r2, #32
 8013698:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801369a:	68fb      	ldr	r3, [r7, #12]
 801369c:	689b      	ldr	r3, [r3, #8]
 801369e:	2b00      	cmp	r3, #0
 80136a0:	d10a      	bne.n	80136b8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80136a2:	2300      	movs	r3, #0
 80136a4:	613b      	str	r3, [r7, #16]
 80136a6:	68fb      	ldr	r3, [r7, #12]
 80136a8:	681b      	ldr	r3, [r3, #0]
 80136aa:	68db      	ldr	r3, [r3, #12]
 80136ac:	613b      	str	r3, [r7, #16]
 80136ae:	68fb      	ldr	r3, [r7, #12]
 80136b0:	681b      	ldr	r3, [r3, #0]
 80136b2:	689b      	ldr	r3, [r3, #8]
 80136b4:	613b      	str	r3, [r7, #16]
 80136b6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80136b8:	68fb      	ldr	r3, [r7, #12]
 80136ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80136bc:	2b00      	cmp	r3, #0
 80136be:	d002      	beq.n	80136c6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80136c0:	2301      	movs	r3, #1
 80136c2:	77fb      	strb	r3, [r7, #31]
 80136c4:	e000      	b.n	80136c8 <HAL_SPI_Transmit+0x25e>
  }

error:
 80136c6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80136c8:	68fb      	ldr	r3, [r7, #12]
 80136ca:	2201      	movs	r2, #1
 80136cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80136d0:	68fb      	ldr	r3, [r7, #12]
 80136d2:	2200      	movs	r2, #0
 80136d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80136d8:	7ffb      	ldrb	r3, [r7, #31]
}
 80136da:	4618      	mov	r0, r3
 80136dc:	3720      	adds	r7, #32
 80136de:	46bd      	mov	sp, r7
 80136e0:	bd80      	pop	{r7, pc}

080136e2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80136e2:	b580      	push	{r7, lr}
 80136e4:	b088      	sub	sp, #32
 80136e6:	af02      	add	r7, sp, #8
 80136e8:	60f8      	str	r0, [r7, #12]
 80136ea:	60b9      	str	r1, [r7, #8]
 80136ec:	603b      	str	r3, [r7, #0]
 80136ee:	4613      	mov	r3, r2
 80136f0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80136f2:	2300      	movs	r3, #0
 80136f4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80136f6:	68fb      	ldr	r3, [r7, #12]
 80136f8:	685b      	ldr	r3, [r3, #4]
 80136fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80136fe:	d112      	bne.n	8013726 <HAL_SPI_Receive+0x44>
 8013700:	68fb      	ldr	r3, [r7, #12]
 8013702:	689b      	ldr	r3, [r3, #8]
 8013704:	2b00      	cmp	r3, #0
 8013706:	d10e      	bne.n	8013726 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8013708:	68fb      	ldr	r3, [r7, #12]
 801370a:	2204      	movs	r2, #4
 801370c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8013710:	88fa      	ldrh	r2, [r7, #6]
 8013712:	683b      	ldr	r3, [r7, #0]
 8013714:	9300      	str	r3, [sp, #0]
 8013716:	4613      	mov	r3, r2
 8013718:	68ba      	ldr	r2, [r7, #8]
 801371a:	68b9      	ldr	r1, [r7, #8]
 801371c:	68f8      	ldr	r0, [r7, #12]
 801371e:	f000 f8f1 	bl	8013904 <HAL_SPI_TransmitReceive>
 8013722:	4603      	mov	r3, r0
 8013724:	e0ea      	b.n	80138fc <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8013726:	68fb      	ldr	r3, [r7, #12]
 8013728:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801372c:	2b01      	cmp	r3, #1
 801372e:	d101      	bne.n	8013734 <HAL_SPI_Receive+0x52>
 8013730:	2302      	movs	r3, #2
 8013732:	e0e3      	b.n	80138fc <HAL_SPI_Receive+0x21a>
 8013734:	68fb      	ldr	r3, [r7, #12]
 8013736:	2201      	movs	r2, #1
 8013738:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801373c:	f7fd f842 	bl	80107c4 <HAL_GetTick>
 8013740:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8013742:	68fb      	ldr	r3, [r7, #12]
 8013744:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013748:	b2db      	uxtb	r3, r3
 801374a:	2b01      	cmp	r3, #1
 801374c:	d002      	beq.n	8013754 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 801374e:	2302      	movs	r3, #2
 8013750:	75fb      	strb	r3, [r7, #23]
    goto error;
 8013752:	e0ca      	b.n	80138ea <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8013754:	68bb      	ldr	r3, [r7, #8]
 8013756:	2b00      	cmp	r3, #0
 8013758:	d002      	beq.n	8013760 <HAL_SPI_Receive+0x7e>
 801375a:	88fb      	ldrh	r3, [r7, #6]
 801375c:	2b00      	cmp	r3, #0
 801375e:	d102      	bne.n	8013766 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8013760:	2301      	movs	r3, #1
 8013762:	75fb      	strb	r3, [r7, #23]
    goto error;
 8013764:	e0c1      	b.n	80138ea <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8013766:	68fb      	ldr	r3, [r7, #12]
 8013768:	2204      	movs	r2, #4
 801376a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801376e:	68fb      	ldr	r3, [r7, #12]
 8013770:	2200      	movs	r2, #0
 8013772:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8013774:	68fb      	ldr	r3, [r7, #12]
 8013776:	68ba      	ldr	r2, [r7, #8]
 8013778:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 801377a:	68fb      	ldr	r3, [r7, #12]
 801377c:	88fa      	ldrh	r2, [r7, #6]
 801377e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8013780:	68fb      	ldr	r3, [r7, #12]
 8013782:	88fa      	ldrh	r2, [r7, #6]
 8013784:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8013786:	68fb      	ldr	r3, [r7, #12]
 8013788:	2200      	movs	r2, #0
 801378a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 801378c:	68fb      	ldr	r3, [r7, #12]
 801378e:	2200      	movs	r2, #0
 8013790:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8013792:	68fb      	ldr	r3, [r7, #12]
 8013794:	2200      	movs	r2, #0
 8013796:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8013798:	68fb      	ldr	r3, [r7, #12]
 801379a:	2200      	movs	r2, #0
 801379c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 801379e:	68fb      	ldr	r3, [r7, #12]
 80137a0:	2200      	movs	r2, #0
 80137a2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80137a4:	68fb      	ldr	r3, [r7, #12]
 80137a6:	689b      	ldr	r3, [r3, #8]
 80137a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80137ac:	d10f      	bne.n	80137ce <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80137ae:	68fb      	ldr	r3, [r7, #12]
 80137b0:	681b      	ldr	r3, [r3, #0]
 80137b2:	681a      	ldr	r2, [r3, #0]
 80137b4:	68fb      	ldr	r3, [r7, #12]
 80137b6:	681b      	ldr	r3, [r3, #0]
 80137b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80137bc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80137be:	68fb      	ldr	r3, [r7, #12]
 80137c0:	681b      	ldr	r3, [r3, #0]
 80137c2:	681a      	ldr	r2, [r3, #0]
 80137c4:	68fb      	ldr	r3, [r7, #12]
 80137c6:	681b      	ldr	r3, [r3, #0]
 80137c8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80137cc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80137ce:	68fb      	ldr	r3, [r7, #12]
 80137d0:	681b      	ldr	r3, [r3, #0]
 80137d2:	681b      	ldr	r3, [r3, #0]
 80137d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80137d8:	2b40      	cmp	r3, #64	; 0x40
 80137da:	d007      	beq.n	80137ec <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80137dc:	68fb      	ldr	r3, [r7, #12]
 80137de:	681b      	ldr	r3, [r3, #0]
 80137e0:	681a      	ldr	r2, [r3, #0]
 80137e2:	68fb      	ldr	r3, [r7, #12]
 80137e4:	681b      	ldr	r3, [r3, #0]
 80137e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80137ea:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80137ec:	68fb      	ldr	r3, [r7, #12]
 80137ee:	68db      	ldr	r3, [r3, #12]
 80137f0:	2b00      	cmp	r3, #0
 80137f2:	d162      	bne.n	80138ba <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80137f4:	e02e      	b.n	8013854 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80137f6:	68fb      	ldr	r3, [r7, #12]
 80137f8:	681b      	ldr	r3, [r3, #0]
 80137fa:	689b      	ldr	r3, [r3, #8]
 80137fc:	f003 0301 	and.w	r3, r3, #1
 8013800:	2b01      	cmp	r3, #1
 8013802:	d115      	bne.n	8013830 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8013804:	68fb      	ldr	r3, [r7, #12]
 8013806:	681b      	ldr	r3, [r3, #0]
 8013808:	f103 020c 	add.w	r2, r3, #12
 801380c:	68fb      	ldr	r3, [r7, #12]
 801380e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013810:	7812      	ldrb	r2, [r2, #0]
 8013812:	b2d2      	uxtb	r2, r2
 8013814:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8013816:	68fb      	ldr	r3, [r7, #12]
 8013818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801381a:	1c5a      	adds	r2, r3, #1
 801381c:	68fb      	ldr	r3, [r7, #12]
 801381e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8013820:	68fb      	ldr	r3, [r7, #12]
 8013822:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013824:	b29b      	uxth	r3, r3
 8013826:	3b01      	subs	r3, #1
 8013828:	b29a      	uxth	r2, r3
 801382a:	68fb      	ldr	r3, [r7, #12]
 801382c:	87da      	strh	r2, [r3, #62]	; 0x3e
 801382e:	e011      	b.n	8013854 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8013830:	f7fc ffc8 	bl	80107c4 <HAL_GetTick>
 8013834:	4602      	mov	r2, r0
 8013836:	693b      	ldr	r3, [r7, #16]
 8013838:	1ad3      	subs	r3, r2, r3
 801383a:	683a      	ldr	r2, [r7, #0]
 801383c:	429a      	cmp	r2, r3
 801383e:	d803      	bhi.n	8013848 <HAL_SPI_Receive+0x166>
 8013840:	683b      	ldr	r3, [r7, #0]
 8013842:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013846:	d102      	bne.n	801384e <HAL_SPI_Receive+0x16c>
 8013848:	683b      	ldr	r3, [r7, #0]
 801384a:	2b00      	cmp	r3, #0
 801384c:	d102      	bne.n	8013854 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 801384e:	2303      	movs	r3, #3
 8013850:	75fb      	strb	r3, [r7, #23]
          goto error;
 8013852:	e04a      	b.n	80138ea <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8013854:	68fb      	ldr	r3, [r7, #12]
 8013856:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013858:	b29b      	uxth	r3, r3
 801385a:	2b00      	cmp	r3, #0
 801385c:	d1cb      	bne.n	80137f6 <HAL_SPI_Receive+0x114>
 801385e:	e031      	b.n	80138c4 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8013860:	68fb      	ldr	r3, [r7, #12]
 8013862:	681b      	ldr	r3, [r3, #0]
 8013864:	689b      	ldr	r3, [r3, #8]
 8013866:	f003 0301 	and.w	r3, r3, #1
 801386a:	2b01      	cmp	r3, #1
 801386c:	d113      	bne.n	8013896 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801386e:	68fb      	ldr	r3, [r7, #12]
 8013870:	681b      	ldr	r3, [r3, #0]
 8013872:	68da      	ldr	r2, [r3, #12]
 8013874:	68fb      	ldr	r3, [r7, #12]
 8013876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013878:	b292      	uxth	r2, r2
 801387a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801387c:	68fb      	ldr	r3, [r7, #12]
 801387e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013880:	1c9a      	adds	r2, r3, #2
 8013882:	68fb      	ldr	r3, [r7, #12]
 8013884:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8013886:	68fb      	ldr	r3, [r7, #12]
 8013888:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801388a:	b29b      	uxth	r3, r3
 801388c:	3b01      	subs	r3, #1
 801388e:	b29a      	uxth	r2, r3
 8013890:	68fb      	ldr	r3, [r7, #12]
 8013892:	87da      	strh	r2, [r3, #62]	; 0x3e
 8013894:	e011      	b.n	80138ba <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8013896:	f7fc ff95 	bl	80107c4 <HAL_GetTick>
 801389a:	4602      	mov	r2, r0
 801389c:	693b      	ldr	r3, [r7, #16]
 801389e:	1ad3      	subs	r3, r2, r3
 80138a0:	683a      	ldr	r2, [r7, #0]
 80138a2:	429a      	cmp	r2, r3
 80138a4:	d803      	bhi.n	80138ae <HAL_SPI_Receive+0x1cc>
 80138a6:	683b      	ldr	r3, [r7, #0]
 80138a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80138ac:	d102      	bne.n	80138b4 <HAL_SPI_Receive+0x1d2>
 80138ae:	683b      	ldr	r3, [r7, #0]
 80138b0:	2b00      	cmp	r3, #0
 80138b2:	d102      	bne.n	80138ba <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80138b4:	2303      	movs	r3, #3
 80138b6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80138b8:	e017      	b.n	80138ea <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80138ba:	68fb      	ldr	r3, [r7, #12]
 80138bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80138be:	b29b      	uxth	r3, r3
 80138c0:	2b00      	cmp	r3, #0
 80138c2:	d1cd      	bne.n	8013860 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80138c4:	693a      	ldr	r2, [r7, #16]
 80138c6:	6839      	ldr	r1, [r7, #0]
 80138c8:	68f8      	ldr	r0, [r7, #12]
 80138ca:	f000 fa45 	bl	8013d58 <SPI_EndRxTransaction>
 80138ce:	4603      	mov	r3, r0
 80138d0:	2b00      	cmp	r3, #0
 80138d2:	d002      	beq.n	80138da <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80138d4:	68fb      	ldr	r3, [r7, #12]
 80138d6:	2220      	movs	r2, #32
 80138d8:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80138da:	68fb      	ldr	r3, [r7, #12]
 80138dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80138de:	2b00      	cmp	r3, #0
 80138e0:	d002      	beq.n	80138e8 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80138e2:	2301      	movs	r3, #1
 80138e4:	75fb      	strb	r3, [r7, #23]
 80138e6:	e000      	b.n	80138ea <HAL_SPI_Receive+0x208>
  }

error :
 80138e8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80138ea:	68fb      	ldr	r3, [r7, #12]
 80138ec:	2201      	movs	r2, #1
 80138ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80138f2:	68fb      	ldr	r3, [r7, #12]
 80138f4:	2200      	movs	r2, #0
 80138f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80138fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80138fc:	4618      	mov	r0, r3
 80138fe:	3718      	adds	r7, #24
 8013900:	46bd      	mov	sp, r7
 8013902:	bd80      	pop	{r7, pc}

08013904 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8013904:	b580      	push	{r7, lr}
 8013906:	b08c      	sub	sp, #48	; 0x30
 8013908:	af00      	add	r7, sp, #0
 801390a:	60f8      	str	r0, [r7, #12]
 801390c:	60b9      	str	r1, [r7, #8]
 801390e:	607a      	str	r2, [r7, #4]
 8013910:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8013912:	2301      	movs	r3, #1
 8013914:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8013916:	2300      	movs	r3, #0
 8013918:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801391c:	68fb      	ldr	r3, [r7, #12]
 801391e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8013922:	2b01      	cmp	r3, #1
 8013924:	d101      	bne.n	801392a <HAL_SPI_TransmitReceive+0x26>
 8013926:	2302      	movs	r3, #2
 8013928:	e18a      	b.n	8013c40 <HAL_SPI_TransmitReceive+0x33c>
 801392a:	68fb      	ldr	r3, [r7, #12]
 801392c:	2201      	movs	r2, #1
 801392e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8013932:	f7fc ff47 	bl	80107c4 <HAL_GetTick>
 8013936:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8013938:	68fb      	ldr	r3, [r7, #12]
 801393a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801393e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8013942:	68fb      	ldr	r3, [r7, #12]
 8013944:	685b      	ldr	r3, [r3, #4]
 8013946:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8013948:	887b      	ldrh	r3, [r7, #2]
 801394a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 801394c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013950:	2b01      	cmp	r3, #1
 8013952:	d00f      	beq.n	8013974 <HAL_SPI_TransmitReceive+0x70>
 8013954:	69fb      	ldr	r3, [r7, #28]
 8013956:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801395a:	d107      	bne.n	801396c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 801395c:	68fb      	ldr	r3, [r7, #12]
 801395e:	689b      	ldr	r3, [r3, #8]
 8013960:	2b00      	cmp	r3, #0
 8013962:	d103      	bne.n	801396c <HAL_SPI_TransmitReceive+0x68>
 8013964:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013968:	2b04      	cmp	r3, #4
 801396a:	d003      	beq.n	8013974 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 801396c:	2302      	movs	r3, #2
 801396e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8013972:	e15b      	b.n	8013c2c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8013974:	68bb      	ldr	r3, [r7, #8]
 8013976:	2b00      	cmp	r3, #0
 8013978:	d005      	beq.n	8013986 <HAL_SPI_TransmitReceive+0x82>
 801397a:	687b      	ldr	r3, [r7, #4]
 801397c:	2b00      	cmp	r3, #0
 801397e:	d002      	beq.n	8013986 <HAL_SPI_TransmitReceive+0x82>
 8013980:	887b      	ldrh	r3, [r7, #2]
 8013982:	2b00      	cmp	r3, #0
 8013984:	d103      	bne.n	801398e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8013986:	2301      	movs	r3, #1
 8013988:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 801398c:	e14e      	b.n	8013c2c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801398e:	68fb      	ldr	r3, [r7, #12]
 8013990:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013994:	b2db      	uxtb	r3, r3
 8013996:	2b04      	cmp	r3, #4
 8013998:	d003      	beq.n	80139a2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 801399a:	68fb      	ldr	r3, [r7, #12]
 801399c:	2205      	movs	r2, #5
 801399e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80139a2:	68fb      	ldr	r3, [r7, #12]
 80139a4:	2200      	movs	r2, #0
 80139a6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80139a8:	68fb      	ldr	r3, [r7, #12]
 80139aa:	687a      	ldr	r2, [r7, #4]
 80139ac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80139ae:	68fb      	ldr	r3, [r7, #12]
 80139b0:	887a      	ldrh	r2, [r7, #2]
 80139b2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80139b4:	68fb      	ldr	r3, [r7, #12]
 80139b6:	887a      	ldrh	r2, [r7, #2]
 80139b8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80139ba:	68fb      	ldr	r3, [r7, #12]
 80139bc:	68ba      	ldr	r2, [r7, #8]
 80139be:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80139c0:	68fb      	ldr	r3, [r7, #12]
 80139c2:	887a      	ldrh	r2, [r7, #2]
 80139c4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80139c6:	68fb      	ldr	r3, [r7, #12]
 80139c8:	887a      	ldrh	r2, [r7, #2]
 80139ca:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80139cc:	68fb      	ldr	r3, [r7, #12]
 80139ce:	2200      	movs	r2, #0
 80139d0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80139d2:	68fb      	ldr	r3, [r7, #12]
 80139d4:	2200      	movs	r2, #0
 80139d6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80139d8:	68fb      	ldr	r3, [r7, #12]
 80139da:	681b      	ldr	r3, [r3, #0]
 80139dc:	681b      	ldr	r3, [r3, #0]
 80139de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80139e2:	2b40      	cmp	r3, #64	; 0x40
 80139e4:	d007      	beq.n	80139f6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80139e6:	68fb      	ldr	r3, [r7, #12]
 80139e8:	681b      	ldr	r3, [r3, #0]
 80139ea:	681a      	ldr	r2, [r3, #0]
 80139ec:	68fb      	ldr	r3, [r7, #12]
 80139ee:	681b      	ldr	r3, [r3, #0]
 80139f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80139f4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80139f6:	68fb      	ldr	r3, [r7, #12]
 80139f8:	68db      	ldr	r3, [r3, #12]
 80139fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80139fe:	d178      	bne.n	8013af2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8013a00:	68fb      	ldr	r3, [r7, #12]
 8013a02:	685b      	ldr	r3, [r3, #4]
 8013a04:	2b00      	cmp	r3, #0
 8013a06:	d002      	beq.n	8013a0e <HAL_SPI_TransmitReceive+0x10a>
 8013a08:	8b7b      	ldrh	r3, [r7, #26]
 8013a0a:	2b01      	cmp	r3, #1
 8013a0c:	d166      	bne.n	8013adc <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8013a0e:	68fb      	ldr	r3, [r7, #12]
 8013a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013a12:	881a      	ldrh	r2, [r3, #0]
 8013a14:	68fb      	ldr	r3, [r7, #12]
 8013a16:	681b      	ldr	r3, [r3, #0]
 8013a18:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8013a1a:	68fb      	ldr	r3, [r7, #12]
 8013a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013a1e:	1c9a      	adds	r2, r3, #2
 8013a20:	68fb      	ldr	r3, [r7, #12]
 8013a22:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8013a24:	68fb      	ldr	r3, [r7, #12]
 8013a26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013a28:	b29b      	uxth	r3, r3
 8013a2a:	3b01      	subs	r3, #1
 8013a2c:	b29a      	uxth	r2, r3
 8013a2e:	68fb      	ldr	r3, [r7, #12]
 8013a30:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8013a32:	e053      	b.n	8013adc <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8013a34:	68fb      	ldr	r3, [r7, #12]
 8013a36:	681b      	ldr	r3, [r3, #0]
 8013a38:	689b      	ldr	r3, [r3, #8]
 8013a3a:	f003 0302 	and.w	r3, r3, #2
 8013a3e:	2b02      	cmp	r3, #2
 8013a40:	d11b      	bne.n	8013a7a <HAL_SPI_TransmitReceive+0x176>
 8013a42:	68fb      	ldr	r3, [r7, #12]
 8013a44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013a46:	b29b      	uxth	r3, r3
 8013a48:	2b00      	cmp	r3, #0
 8013a4a:	d016      	beq.n	8013a7a <HAL_SPI_TransmitReceive+0x176>
 8013a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a4e:	2b01      	cmp	r3, #1
 8013a50:	d113      	bne.n	8013a7a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8013a52:	68fb      	ldr	r3, [r7, #12]
 8013a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013a56:	881a      	ldrh	r2, [r3, #0]
 8013a58:	68fb      	ldr	r3, [r7, #12]
 8013a5a:	681b      	ldr	r3, [r3, #0]
 8013a5c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8013a5e:	68fb      	ldr	r3, [r7, #12]
 8013a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013a62:	1c9a      	adds	r2, r3, #2
 8013a64:	68fb      	ldr	r3, [r7, #12]
 8013a66:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8013a68:	68fb      	ldr	r3, [r7, #12]
 8013a6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013a6c:	b29b      	uxth	r3, r3
 8013a6e:	3b01      	subs	r3, #1
 8013a70:	b29a      	uxth	r2, r3
 8013a72:	68fb      	ldr	r3, [r7, #12]
 8013a74:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8013a76:	2300      	movs	r3, #0
 8013a78:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8013a7a:	68fb      	ldr	r3, [r7, #12]
 8013a7c:	681b      	ldr	r3, [r3, #0]
 8013a7e:	689b      	ldr	r3, [r3, #8]
 8013a80:	f003 0301 	and.w	r3, r3, #1
 8013a84:	2b01      	cmp	r3, #1
 8013a86:	d119      	bne.n	8013abc <HAL_SPI_TransmitReceive+0x1b8>
 8013a88:	68fb      	ldr	r3, [r7, #12]
 8013a8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013a8c:	b29b      	uxth	r3, r3
 8013a8e:	2b00      	cmp	r3, #0
 8013a90:	d014      	beq.n	8013abc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8013a92:	68fb      	ldr	r3, [r7, #12]
 8013a94:	681b      	ldr	r3, [r3, #0]
 8013a96:	68da      	ldr	r2, [r3, #12]
 8013a98:	68fb      	ldr	r3, [r7, #12]
 8013a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013a9c:	b292      	uxth	r2, r2
 8013a9e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8013aa0:	68fb      	ldr	r3, [r7, #12]
 8013aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013aa4:	1c9a      	adds	r2, r3, #2
 8013aa6:	68fb      	ldr	r3, [r7, #12]
 8013aa8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8013aaa:	68fb      	ldr	r3, [r7, #12]
 8013aac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013aae:	b29b      	uxth	r3, r3
 8013ab0:	3b01      	subs	r3, #1
 8013ab2:	b29a      	uxth	r2, r3
 8013ab4:	68fb      	ldr	r3, [r7, #12]
 8013ab6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8013ab8:	2301      	movs	r3, #1
 8013aba:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8013abc:	f7fc fe82 	bl	80107c4 <HAL_GetTick>
 8013ac0:	4602      	mov	r2, r0
 8013ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ac4:	1ad3      	subs	r3, r2, r3
 8013ac6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013ac8:	429a      	cmp	r2, r3
 8013aca:	d807      	bhi.n	8013adc <HAL_SPI_TransmitReceive+0x1d8>
 8013acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ace:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013ad2:	d003      	beq.n	8013adc <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8013ad4:	2303      	movs	r3, #3
 8013ad6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8013ada:	e0a7      	b.n	8013c2c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8013adc:	68fb      	ldr	r3, [r7, #12]
 8013ade:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013ae0:	b29b      	uxth	r3, r3
 8013ae2:	2b00      	cmp	r3, #0
 8013ae4:	d1a6      	bne.n	8013a34 <HAL_SPI_TransmitReceive+0x130>
 8013ae6:	68fb      	ldr	r3, [r7, #12]
 8013ae8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013aea:	b29b      	uxth	r3, r3
 8013aec:	2b00      	cmp	r3, #0
 8013aee:	d1a1      	bne.n	8013a34 <HAL_SPI_TransmitReceive+0x130>
 8013af0:	e07c      	b.n	8013bec <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8013af2:	68fb      	ldr	r3, [r7, #12]
 8013af4:	685b      	ldr	r3, [r3, #4]
 8013af6:	2b00      	cmp	r3, #0
 8013af8:	d002      	beq.n	8013b00 <HAL_SPI_TransmitReceive+0x1fc>
 8013afa:	8b7b      	ldrh	r3, [r7, #26]
 8013afc:	2b01      	cmp	r3, #1
 8013afe:	d16b      	bne.n	8013bd8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8013b00:	68fb      	ldr	r3, [r7, #12]
 8013b02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013b04:	68fb      	ldr	r3, [r7, #12]
 8013b06:	681b      	ldr	r3, [r3, #0]
 8013b08:	330c      	adds	r3, #12
 8013b0a:	7812      	ldrb	r2, [r2, #0]
 8013b0c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8013b0e:	68fb      	ldr	r3, [r7, #12]
 8013b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013b12:	1c5a      	adds	r2, r3, #1
 8013b14:	68fb      	ldr	r3, [r7, #12]
 8013b16:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8013b18:	68fb      	ldr	r3, [r7, #12]
 8013b1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013b1c:	b29b      	uxth	r3, r3
 8013b1e:	3b01      	subs	r3, #1
 8013b20:	b29a      	uxth	r2, r3
 8013b22:	68fb      	ldr	r3, [r7, #12]
 8013b24:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8013b26:	e057      	b.n	8013bd8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8013b28:	68fb      	ldr	r3, [r7, #12]
 8013b2a:	681b      	ldr	r3, [r3, #0]
 8013b2c:	689b      	ldr	r3, [r3, #8]
 8013b2e:	f003 0302 	and.w	r3, r3, #2
 8013b32:	2b02      	cmp	r3, #2
 8013b34:	d11c      	bne.n	8013b70 <HAL_SPI_TransmitReceive+0x26c>
 8013b36:	68fb      	ldr	r3, [r7, #12]
 8013b38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013b3a:	b29b      	uxth	r3, r3
 8013b3c:	2b00      	cmp	r3, #0
 8013b3e:	d017      	beq.n	8013b70 <HAL_SPI_TransmitReceive+0x26c>
 8013b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b42:	2b01      	cmp	r3, #1
 8013b44:	d114      	bne.n	8013b70 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8013b46:	68fb      	ldr	r3, [r7, #12]
 8013b48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013b4a:	68fb      	ldr	r3, [r7, #12]
 8013b4c:	681b      	ldr	r3, [r3, #0]
 8013b4e:	330c      	adds	r3, #12
 8013b50:	7812      	ldrb	r2, [r2, #0]
 8013b52:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8013b54:	68fb      	ldr	r3, [r7, #12]
 8013b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013b58:	1c5a      	adds	r2, r3, #1
 8013b5a:	68fb      	ldr	r3, [r7, #12]
 8013b5c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8013b5e:	68fb      	ldr	r3, [r7, #12]
 8013b60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013b62:	b29b      	uxth	r3, r3
 8013b64:	3b01      	subs	r3, #1
 8013b66:	b29a      	uxth	r2, r3
 8013b68:	68fb      	ldr	r3, [r7, #12]
 8013b6a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8013b6c:	2300      	movs	r3, #0
 8013b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8013b70:	68fb      	ldr	r3, [r7, #12]
 8013b72:	681b      	ldr	r3, [r3, #0]
 8013b74:	689b      	ldr	r3, [r3, #8]
 8013b76:	f003 0301 	and.w	r3, r3, #1
 8013b7a:	2b01      	cmp	r3, #1
 8013b7c:	d119      	bne.n	8013bb2 <HAL_SPI_TransmitReceive+0x2ae>
 8013b7e:	68fb      	ldr	r3, [r7, #12]
 8013b80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013b82:	b29b      	uxth	r3, r3
 8013b84:	2b00      	cmp	r3, #0
 8013b86:	d014      	beq.n	8013bb2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8013b88:	68fb      	ldr	r3, [r7, #12]
 8013b8a:	681b      	ldr	r3, [r3, #0]
 8013b8c:	68da      	ldr	r2, [r3, #12]
 8013b8e:	68fb      	ldr	r3, [r7, #12]
 8013b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013b92:	b2d2      	uxtb	r2, r2
 8013b94:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8013b96:	68fb      	ldr	r3, [r7, #12]
 8013b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013b9a:	1c5a      	adds	r2, r3, #1
 8013b9c:	68fb      	ldr	r3, [r7, #12]
 8013b9e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8013ba0:	68fb      	ldr	r3, [r7, #12]
 8013ba2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013ba4:	b29b      	uxth	r3, r3
 8013ba6:	3b01      	subs	r3, #1
 8013ba8:	b29a      	uxth	r2, r3
 8013baa:	68fb      	ldr	r3, [r7, #12]
 8013bac:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8013bae:	2301      	movs	r3, #1
 8013bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8013bb2:	f7fc fe07 	bl	80107c4 <HAL_GetTick>
 8013bb6:	4602      	mov	r2, r0
 8013bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bba:	1ad3      	subs	r3, r2, r3
 8013bbc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013bbe:	429a      	cmp	r2, r3
 8013bc0:	d803      	bhi.n	8013bca <HAL_SPI_TransmitReceive+0x2c6>
 8013bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013bc8:	d102      	bne.n	8013bd0 <HAL_SPI_TransmitReceive+0x2cc>
 8013bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013bcc:	2b00      	cmp	r3, #0
 8013bce:	d103      	bne.n	8013bd8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8013bd0:	2303      	movs	r3, #3
 8013bd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8013bd6:	e029      	b.n	8013c2c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8013bd8:	68fb      	ldr	r3, [r7, #12]
 8013bda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013bdc:	b29b      	uxth	r3, r3
 8013bde:	2b00      	cmp	r3, #0
 8013be0:	d1a2      	bne.n	8013b28 <HAL_SPI_TransmitReceive+0x224>
 8013be2:	68fb      	ldr	r3, [r7, #12]
 8013be4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013be6:	b29b      	uxth	r3, r3
 8013be8:	2b00      	cmp	r3, #0
 8013bea:	d19d      	bne.n	8013b28 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8013bec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013bee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013bf0:	68f8      	ldr	r0, [r7, #12]
 8013bf2:	f000 f917 	bl	8013e24 <SPI_EndRxTxTransaction>
 8013bf6:	4603      	mov	r3, r0
 8013bf8:	2b00      	cmp	r3, #0
 8013bfa:	d006      	beq.n	8013c0a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8013bfc:	2301      	movs	r3, #1
 8013bfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8013c02:	68fb      	ldr	r3, [r7, #12]
 8013c04:	2220      	movs	r2, #32
 8013c06:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8013c08:	e010      	b.n	8013c2c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8013c0a:	68fb      	ldr	r3, [r7, #12]
 8013c0c:	689b      	ldr	r3, [r3, #8]
 8013c0e:	2b00      	cmp	r3, #0
 8013c10:	d10b      	bne.n	8013c2a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8013c12:	2300      	movs	r3, #0
 8013c14:	617b      	str	r3, [r7, #20]
 8013c16:	68fb      	ldr	r3, [r7, #12]
 8013c18:	681b      	ldr	r3, [r3, #0]
 8013c1a:	68db      	ldr	r3, [r3, #12]
 8013c1c:	617b      	str	r3, [r7, #20]
 8013c1e:	68fb      	ldr	r3, [r7, #12]
 8013c20:	681b      	ldr	r3, [r3, #0]
 8013c22:	689b      	ldr	r3, [r3, #8]
 8013c24:	617b      	str	r3, [r7, #20]
 8013c26:	697b      	ldr	r3, [r7, #20]
 8013c28:	e000      	b.n	8013c2c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8013c2a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8013c2c:	68fb      	ldr	r3, [r7, #12]
 8013c2e:	2201      	movs	r2, #1
 8013c30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8013c34:	68fb      	ldr	r3, [r7, #12]
 8013c36:	2200      	movs	r2, #0
 8013c38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8013c3c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8013c40:	4618      	mov	r0, r3
 8013c42:	3730      	adds	r7, #48	; 0x30
 8013c44:	46bd      	mov	sp, r7
 8013c46:	bd80      	pop	{r7, pc}

08013c48 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8013c48:	b580      	push	{r7, lr}
 8013c4a:	b088      	sub	sp, #32
 8013c4c:	af00      	add	r7, sp, #0
 8013c4e:	60f8      	str	r0, [r7, #12]
 8013c50:	60b9      	str	r1, [r7, #8]
 8013c52:	603b      	str	r3, [r7, #0]
 8013c54:	4613      	mov	r3, r2
 8013c56:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8013c58:	f7fc fdb4 	bl	80107c4 <HAL_GetTick>
 8013c5c:	4602      	mov	r2, r0
 8013c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c60:	1a9b      	subs	r3, r3, r2
 8013c62:	683a      	ldr	r2, [r7, #0]
 8013c64:	4413      	add	r3, r2
 8013c66:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8013c68:	f7fc fdac 	bl	80107c4 <HAL_GetTick>
 8013c6c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8013c6e:	4b39      	ldr	r3, [pc, #228]	; (8013d54 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8013c70:	681b      	ldr	r3, [r3, #0]
 8013c72:	015b      	lsls	r3, r3, #5
 8013c74:	0d1b      	lsrs	r3, r3, #20
 8013c76:	69fa      	ldr	r2, [r7, #28]
 8013c78:	fb02 f303 	mul.w	r3, r2, r3
 8013c7c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8013c7e:	e054      	b.n	8013d2a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8013c80:	683b      	ldr	r3, [r7, #0]
 8013c82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013c86:	d050      	beq.n	8013d2a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8013c88:	f7fc fd9c 	bl	80107c4 <HAL_GetTick>
 8013c8c:	4602      	mov	r2, r0
 8013c8e:	69bb      	ldr	r3, [r7, #24]
 8013c90:	1ad3      	subs	r3, r2, r3
 8013c92:	69fa      	ldr	r2, [r7, #28]
 8013c94:	429a      	cmp	r2, r3
 8013c96:	d902      	bls.n	8013c9e <SPI_WaitFlagStateUntilTimeout+0x56>
 8013c98:	69fb      	ldr	r3, [r7, #28]
 8013c9a:	2b00      	cmp	r3, #0
 8013c9c:	d13d      	bne.n	8013d1a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8013c9e:	68fb      	ldr	r3, [r7, #12]
 8013ca0:	681b      	ldr	r3, [r3, #0]
 8013ca2:	685a      	ldr	r2, [r3, #4]
 8013ca4:	68fb      	ldr	r3, [r7, #12]
 8013ca6:	681b      	ldr	r3, [r3, #0]
 8013ca8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8013cac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8013cae:	68fb      	ldr	r3, [r7, #12]
 8013cb0:	685b      	ldr	r3, [r3, #4]
 8013cb2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013cb6:	d111      	bne.n	8013cdc <SPI_WaitFlagStateUntilTimeout+0x94>
 8013cb8:	68fb      	ldr	r3, [r7, #12]
 8013cba:	689b      	ldr	r3, [r3, #8]
 8013cbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013cc0:	d004      	beq.n	8013ccc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8013cc2:	68fb      	ldr	r3, [r7, #12]
 8013cc4:	689b      	ldr	r3, [r3, #8]
 8013cc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013cca:	d107      	bne.n	8013cdc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8013ccc:	68fb      	ldr	r3, [r7, #12]
 8013cce:	681b      	ldr	r3, [r3, #0]
 8013cd0:	681a      	ldr	r2, [r3, #0]
 8013cd2:	68fb      	ldr	r3, [r7, #12]
 8013cd4:	681b      	ldr	r3, [r3, #0]
 8013cd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013cda:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8013cdc:	68fb      	ldr	r3, [r7, #12]
 8013cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013ce0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8013ce4:	d10f      	bne.n	8013d06 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8013ce6:	68fb      	ldr	r3, [r7, #12]
 8013ce8:	681b      	ldr	r3, [r3, #0]
 8013cea:	681a      	ldr	r2, [r3, #0]
 8013cec:	68fb      	ldr	r3, [r7, #12]
 8013cee:	681b      	ldr	r3, [r3, #0]
 8013cf0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8013cf4:	601a      	str	r2, [r3, #0]
 8013cf6:	68fb      	ldr	r3, [r7, #12]
 8013cf8:	681b      	ldr	r3, [r3, #0]
 8013cfa:	681a      	ldr	r2, [r3, #0]
 8013cfc:	68fb      	ldr	r3, [r7, #12]
 8013cfe:	681b      	ldr	r3, [r3, #0]
 8013d00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8013d04:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8013d06:	68fb      	ldr	r3, [r7, #12]
 8013d08:	2201      	movs	r2, #1
 8013d0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8013d0e:	68fb      	ldr	r3, [r7, #12]
 8013d10:	2200      	movs	r2, #0
 8013d12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8013d16:	2303      	movs	r3, #3
 8013d18:	e017      	b.n	8013d4a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8013d1a:	697b      	ldr	r3, [r7, #20]
 8013d1c:	2b00      	cmp	r3, #0
 8013d1e:	d101      	bne.n	8013d24 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8013d20:	2300      	movs	r3, #0
 8013d22:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8013d24:	697b      	ldr	r3, [r7, #20]
 8013d26:	3b01      	subs	r3, #1
 8013d28:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8013d2a:	68fb      	ldr	r3, [r7, #12]
 8013d2c:	681b      	ldr	r3, [r3, #0]
 8013d2e:	689a      	ldr	r2, [r3, #8]
 8013d30:	68bb      	ldr	r3, [r7, #8]
 8013d32:	4013      	ands	r3, r2
 8013d34:	68ba      	ldr	r2, [r7, #8]
 8013d36:	429a      	cmp	r2, r3
 8013d38:	bf0c      	ite	eq
 8013d3a:	2301      	moveq	r3, #1
 8013d3c:	2300      	movne	r3, #0
 8013d3e:	b2db      	uxtb	r3, r3
 8013d40:	461a      	mov	r2, r3
 8013d42:	79fb      	ldrb	r3, [r7, #7]
 8013d44:	429a      	cmp	r2, r3
 8013d46:	d19b      	bne.n	8013c80 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8013d48:	2300      	movs	r3, #0
}
 8013d4a:	4618      	mov	r0, r3
 8013d4c:	3720      	adds	r7, #32
 8013d4e:	46bd      	mov	sp, r7
 8013d50:	bd80      	pop	{r7, pc}
 8013d52:	bf00      	nop
 8013d54:	20000004 	.word	0x20000004

08013d58 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8013d58:	b580      	push	{r7, lr}
 8013d5a:	b086      	sub	sp, #24
 8013d5c:	af02      	add	r7, sp, #8
 8013d5e:	60f8      	str	r0, [r7, #12]
 8013d60:	60b9      	str	r1, [r7, #8]
 8013d62:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8013d64:	68fb      	ldr	r3, [r7, #12]
 8013d66:	685b      	ldr	r3, [r3, #4]
 8013d68:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013d6c:	d111      	bne.n	8013d92 <SPI_EndRxTransaction+0x3a>
 8013d6e:	68fb      	ldr	r3, [r7, #12]
 8013d70:	689b      	ldr	r3, [r3, #8]
 8013d72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013d76:	d004      	beq.n	8013d82 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8013d78:	68fb      	ldr	r3, [r7, #12]
 8013d7a:	689b      	ldr	r3, [r3, #8]
 8013d7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013d80:	d107      	bne.n	8013d92 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8013d82:	68fb      	ldr	r3, [r7, #12]
 8013d84:	681b      	ldr	r3, [r3, #0]
 8013d86:	681a      	ldr	r2, [r3, #0]
 8013d88:	68fb      	ldr	r3, [r7, #12]
 8013d8a:	681b      	ldr	r3, [r3, #0]
 8013d8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013d90:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8013d92:	68fb      	ldr	r3, [r7, #12]
 8013d94:	685b      	ldr	r3, [r3, #4]
 8013d96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013d9a:	d12a      	bne.n	8013df2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8013d9c:	68fb      	ldr	r3, [r7, #12]
 8013d9e:	689b      	ldr	r3, [r3, #8]
 8013da0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013da4:	d012      	beq.n	8013dcc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8013da6:	687b      	ldr	r3, [r7, #4]
 8013da8:	9300      	str	r3, [sp, #0]
 8013daa:	68bb      	ldr	r3, [r7, #8]
 8013dac:	2200      	movs	r2, #0
 8013dae:	2180      	movs	r1, #128	; 0x80
 8013db0:	68f8      	ldr	r0, [r7, #12]
 8013db2:	f7ff ff49 	bl	8013c48 <SPI_WaitFlagStateUntilTimeout>
 8013db6:	4603      	mov	r3, r0
 8013db8:	2b00      	cmp	r3, #0
 8013dba:	d02d      	beq.n	8013e18 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8013dbc:	68fb      	ldr	r3, [r7, #12]
 8013dbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013dc0:	f043 0220 	orr.w	r2, r3, #32
 8013dc4:	68fb      	ldr	r3, [r7, #12]
 8013dc6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8013dc8:	2303      	movs	r3, #3
 8013dca:	e026      	b.n	8013e1a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8013dcc:	687b      	ldr	r3, [r7, #4]
 8013dce:	9300      	str	r3, [sp, #0]
 8013dd0:	68bb      	ldr	r3, [r7, #8]
 8013dd2:	2200      	movs	r2, #0
 8013dd4:	2101      	movs	r1, #1
 8013dd6:	68f8      	ldr	r0, [r7, #12]
 8013dd8:	f7ff ff36 	bl	8013c48 <SPI_WaitFlagStateUntilTimeout>
 8013ddc:	4603      	mov	r3, r0
 8013dde:	2b00      	cmp	r3, #0
 8013de0:	d01a      	beq.n	8013e18 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8013de2:	68fb      	ldr	r3, [r7, #12]
 8013de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013de6:	f043 0220 	orr.w	r2, r3, #32
 8013dea:	68fb      	ldr	r3, [r7, #12]
 8013dec:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8013dee:	2303      	movs	r3, #3
 8013df0:	e013      	b.n	8013e1a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8013df2:	687b      	ldr	r3, [r7, #4]
 8013df4:	9300      	str	r3, [sp, #0]
 8013df6:	68bb      	ldr	r3, [r7, #8]
 8013df8:	2200      	movs	r2, #0
 8013dfa:	2101      	movs	r1, #1
 8013dfc:	68f8      	ldr	r0, [r7, #12]
 8013dfe:	f7ff ff23 	bl	8013c48 <SPI_WaitFlagStateUntilTimeout>
 8013e02:	4603      	mov	r3, r0
 8013e04:	2b00      	cmp	r3, #0
 8013e06:	d007      	beq.n	8013e18 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8013e08:	68fb      	ldr	r3, [r7, #12]
 8013e0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013e0c:	f043 0220 	orr.w	r2, r3, #32
 8013e10:	68fb      	ldr	r3, [r7, #12]
 8013e12:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8013e14:	2303      	movs	r3, #3
 8013e16:	e000      	b.n	8013e1a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8013e18:	2300      	movs	r3, #0
}
 8013e1a:	4618      	mov	r0, r3
 8013e1c:	3710      	adds	r7, #16
 8013e1e:	46bd      	mov	sp, r7
 8013e20:	bd80      	pop	{r7, pc}
	...

08013e24 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8013e24:	b580      	push	{r7, lr}
 8013e26:	b088      	sub	sp, #32
 8013e28:	af02      	add	r7, sp, #8
 8013e2a:	60f8      	str	r0, [r7, #12]
 8013e2c:	60b9      	str	r1, [r7, #8]
 8013e2e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8013e30:	4b1b      	ldr	r3, [pc, #108]	; (8013ea0 <SPI_EndRxTxTransaction+0x7c>)
 8013e32:	681b      	ldr	r3, [r3, #0]
 8013e34:	4a1b      	ldr	r2, [pc, #108]	; (8013ea4 <SPI_EndRxTxTransaction+0x80>)
 8013e36:	fba2 2303 	umull	r2, r3, r2, r3
 8013e3a:	0d5b      	lsrs	r3, r3, #21
 8013e3c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8013e40:	fb02 f303 	mul.w	r3, r2, r3
 8013e44:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8013e46:	68fb      	ldr	r3, [r7, #12]
 8013e48:	685b      	ldr	r3, [r3, #4]
 8013e4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013e4e:	d112      	bne.n	8013e76 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8013e50:	687b      	ldr	r3, [r7, #4]
 8013e52:	9300      	str	r3, [sp, #0]
 8013e54:	68bb      	ldr	r3, [r7, #8]
 8013e56:	2200      	movs	r2, #0
 8013e58:	2180      	movs	r1, #128	; 0x80
 8013e5a:	68f8      	ldr	r0, [r7, #12]
 8013e5c:	f7ff fef4 	bl	8013c48 <SPI_WaitFlagStateUntilTimeout>
 8013e60:	4603      	mov	r3, r0
 8013e62:	2b00      	cmp	r3, #0
 8013e64:	d016      	beq.n	8013e94 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8013e66:	68fb      	ldr	r3, [r7, #12]
 8013e68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013e6a:	f043 0220 	orr.w	r2, r3, #32
 8013e6e:	68fb      	ldr	r3, [r7, #12]
 8013e70:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8013e72:	2303      	movs	r3, #3
 8013e74:	e00f      	b.n	8013e96 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8013e76:	697b      	ldr	r3, [r7, #20]
 8013e78:	2b00      	cmp	r3, #0
 8013e7a:	d00a      	beq.n	8013e92 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8013e7c:	697b      	ldr	r3, [r7, #20]
 8013e7e:	3b01      	subs	r3, #1
 8013e80:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8013e82:	68fb      	ldr	r3, [r7, #12]
 8013e84:	681b      	ldr	r3, [r3, #0]
 8013e86:	689b      	ldr	r3, [r3, #8]
 8013e88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013e8c:	2b80      	cmp	r3, #128	; 0x80
 8013e8e:	d0f2      	beq.n	8013e76 <SPI_EndRxTxTransaction+0x52>
 8013e90:	e000      	b.n	8013e94 <SPI_EndRxTxTransaction+0x70>
        break;
 8013e92:	bf00      	nop
  }

  return HAL_OK;
 8013e94:	2300      	movs	r3, #0
}
 8013e96:	4618      	mov	r0, r3
 8013e98:	3718      	adds	r7, #24
 8013e9a:	46bd      	mov	sp, r7
 8013e9c:	bd80      	pop	{r7, pc}
 8013e9e:	bf00      	nop
 8013ea0:	20000004 	.word	0x20000004
 8013ea4:	165e9f81 	.word	0x165e9f81

08013ea8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8013ea8:	b580      	push	{r7, lr}
 8013eaa:	b082      	sub	sp, #8
 8013eac:	af00      	add	r7, sp, #0
 8013eae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8013eb0:	687b      	ldr	r3, [r7, #4]
 8013eb2:	2b00      	cmp	r3, #0
 8013eb4:	d101      	bne.n	8013eba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8013eb6:	2301      	movs	r3, #1
 8013eb8:	e041      	b.n	8013f3e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8013eba:	687b      	ldr	r3, [r7, #4]
 8013ebc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013ec0:	b2db      	uxtb	r3, r3
 8013ec2:	2b00      	cmp	r3, #0
 8013ec4:	d106      	bne.n	8013ed4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8013ec6:	687b      	ldr	r3, [r7, #4]
 8013ec8:	2200      	movs	r2, #0
 8013eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8013ece:	6878      	ldr	r0, [r7, #4]
 8013ed0:	f7f0 fcbe 	bl	8004850 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013ed4:	687b      	ldr	r3, [r7, #4]
 8013ed6:	2202      	movs	r2, #2
 8013ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8013edc:	687b      	ldr	r3, [r7, #4]
 8013ede:	681a      	ldr	r2, [r3, #0]
 8013ee0:	687b      	ldr	r3, [r7, #4]
 8013ee2:	3304      	adds	r3, #4
 8013ee4:	4619      	mov	r1, r3
 8013ee6:	4610      	mov	r0, r2
 8013ee8:	f001 f858 	bl	8014f9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8013eec:	687b      	ldr	r3, [r7, #4]
 8013eee:	2201      	movs	r2, #1
 8013ef0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8013ef4:	687b      	ldr	r3, [r7, #4]
 8013ef6:	2201      	movs	r2, #1
 8013ef8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8013efc:	687b      	ldr	r3, [r7, #4]
 8013efe:	2201      	movs	r2, #1
 8013f00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8013f04:	687b      	ldr	r3, [r7, #4]
 8013f06:	2201      	movs	r2, #1
 8013f08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8013f0c:	687b      	ldr	r3, [r7, #4]
 8013f0e:	2201      	movs	r2, #1
 8013f10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8013f14:	687b      	ldr	r3, [r7, #4]
 8013f16:	2201      	movs	r2, #1
 8013f18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8013f1c:	687b      	ldr	r3, [r7, #4]
 8013f1e:	2201      	movs	r2, #1
 8013f20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8013f24:	687b      	ldr	r3, [r7, #4]
 8013f26:	2201      	movs	r2, #1
 8013f28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013f2c:	687b      	ldr	r3, [r7, #4]
 8013f2e:	2201      	movs	r2, #1
 8013f30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8013f34:	687b      	ldr	r3, [r7, #4]
 8013f36:	2201      	movs	r2, #1
 8013f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8013f3c:	2300      	movs	r3, #0
}
 8013f3e:	4618      	mov	r0, r3
 8013f40:	3708      	adds	r7, #8
 8013f42:	46bd      	mov	sp, r7
 8013f44:	bd80      	pop	{r7, pc}
	...

08013f48 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8013f48:	b480      	push	{r7}
 8013f4a:	b085      	sub	sp, #20
 8013f4c:	af00      	add	r7, sp, #0
 8013f4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8013f50:	687b      	ldr	r3, [r7, #4]
 8013f52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013f56:	b2db      	uxtb	r3, r3
 8013f58:	2b01      	cmp	r3, #1
 8013f5a:	d001      	beq.n	8013f60 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8013f5c:	2301      	movs	r3, #1
 8013f5e:	e046      	b.n	8013fee <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013f60:	687b      	ldr	r3, [r7, #4]
 8013f62:	2202      	movs	r2, #2
 8013f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	681b      	ldr	r3, [r3, #0]
 8013f6c:	4a23      	ldr	r2, [pc, #140]	; (8013ffc <HAL_TIM_Base_Start+0xb4>)
 8013f6e:	4293      	cmp	r3, r2
 8013f70:	d022      	beq.n	8013fb8 <HAL_TIM_Base_Start+0x70>
 8013f72:	687b      	ldr	r3, [r7, #4]
 8013f74:	681b      	ldr	r3, [r3, #0]
 8013f76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013f7a:	d01d      	beq.n	8013fb8 <HAL_TIM_Base_Start+0x70>
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	681b      	ldr	r3, [r3, #0]
 8013f80:	4a1f      	ldr	r2, [pc, #124]	; (8014000 <HAL_TIM_Base_Start+0xb8>)
 8013f82:	4293      	cmp	r3, r2
 8013f84:	d018      	beq.n	8013fb8 <HAL_TIM_Base_Start+0x70>
 8013f86:	687b      	ldr	r3, [r7, #4]
 8013f88:	681b      	ldr	r3, [r3, #0]
 8013f8a:	4a1e      	ldr	r2, [pc, #120]	; (8014004 <HAL_TIM_Base_Start+0xbc>)
 8013f8c:	4293      	cmp	r3, r2
 8013f8e:	d013      	beq.n	8013fb8 <HAL_TIM_Base_Start+0x70>
 8013f90:	687b      	ldr	r3, [r7, #4]
 8013f92:	681b      	ldr	r3, [r3, #0]
 8013f94:	4a1c      	ldr	r2, [pc, #112]	; (8014008 <HAL_TIM_Base_Start+0xc0>)
 8013f96:	4293      	cmp	r3, r2
 8013f98:	d00e      	beq.n	8013fb8 <HAL_TIM_Base_Start+0x70>
 8013f9a:	687b      	ldr	r3, [r7, #4]
 8013f9c:	681b      	ldr	r3, [r3, #0]
 8013f9e:	4a1b      	ldr	r2, [pc, #108]	; (801400c <HAL_TIM_Base_Start+0xc4>)
 8013fa0:	4293      	cmp	r3, r2
 8013fa2:	d009      	beq.n	8013fb8 <HAL_TIM_Base_Start+0x70>
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	681b      	ldr	r3, [r3, #0]
 8013fa8:	4a19      	ldr	r2, [pc, #100]	; (8014010 <HAL_TIM_Base_Start+0xc8>)
 8013faa:	4293      	cmp	r3, r2
 8013fac:	d004      	beq.n	8013fb8 <HAL_TIM_Base_Start+0x70>
 8013fae:	687b      	ldr	r3, [r7, #4]
 8013fb0:	681b      	ldr	r3, [r3, #0]
 8013fb2:	4a18      	ldr	r2, [pc, #96]	; (8014014 <HAL_TIM_Base_Start+0xcc>)
 8013fb4:	4293      	cmp	r3, r2
 8013fb6:	d111      	bne.n	8013fdc <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8013fb8:	687b      	ldr	r3, [r7, #4]
 8013fba:	681b      	ldr	r3, [r3, #0]
 8013fbc:	689b      	ldr	r3, [r3, #8]
 8013fbe:	f003 0307 	and.w	r3, r3, #7
 8013fc2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013fc4:	68fb      	ldr	r3, [r7, #12]
 8013fc6:	2b06      	cmp	r3, #6
 8013fc8:	d010      	beq.n	8013fec <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8013fca:	687b      	ldr	r3, [r7, #4]
 8013fcc:	681b      	ldr	r3, [r3, #0]
 8013fce:	681a      	ldr	r2, [r3, #0]
 8013fd0:	687b      	ldr	r3, [r7, #4]
 8013fd2:	681b      	ldr	r3, [r3, #0]
 8013fd4:	f042 0201 	orr.w	r2, r2, #1
 8013fd8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013fda:	e007      	b.n	8013fec <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8013fdc:	687b      	ldr	r3, [r7, #4]
 8013fde:	681b      	ldr	r3, [r3, #0]
 8013fe0:	681a      	ldr	r2, [r3, #0]
 8013fe2:	687b      	ldr	r3, [r7, #4]
 8013fe4:	681b      	ldr	r3, [r3, #0]
 8013fe6:	f042 0201 	orr.w	r2, r2, #1
 8013fea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8013fec:	2300      	movs	r3, #0
}
 8013fee:	4618      	mov	r0, r3
 8013ff0:	3714      	adds	r7, #20
 8013ff2:	46bd      	mov	sp, r7
 8013ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ff8:	4770      	bx	lr
 8013ffa:	bf00      	nop
 8013ffc:	40010000 	.word	0x40010000
 8014000:	40000400 	.word	0x40000400
 8014004:	40000800 	.word	0x40000800
 8014008:	40000c00 	.word	0x40000c00
 801400c:	40010400 	.word	0x40010400
 8014010:	40014000 	.word	0x40014000
 8014014:	40001800 	.word	0x40001800

08014018 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8014018:	b480      	push	{r7}
 801401a:	b085      	sub	sp, #20
 801401c:	af00      	add	r7, sp, #0
 801401e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8014020:	687b      	ldr	r3, [r7, #4]
 8014022:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014026:	b2db      	uxtb	r3, r3
 8014028:	2b01      	cmp	r3, #1
 801402a:	d001      	beq.n	8014030 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801402c:	2301      	movs	r3, #1
 801402e:	e04e      	b.n	80140ce <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8014030:	687b      	ldr	r3, [r7, #4]
 8014032:	2202      	movs	r2, #2
 8014034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8014038:	687b      	ldr	r3, [r7, #4]
 801403a:	681b      	ldr	r3, [r3, #0]
 801403c:	68da      	ldr	r2, [r3, #12]
 801403e:	687b      	ldr	r3, [r7, #4]
 8014040:	681b      	ldr	r3, [r3, #0]
 8014042:	f042 0201 	orr.w	r2, r2, #1
 8014046:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8014048:	687b      	ldr	r3, [r7, #4]
 801404a:	681b      	ldr	r3, [r3, #0]
 801404c:	4a23      	ldr	r2, [pc, #140]	; (80140dc <HAL_TIM_Base_Start_IT+0xc4>)
 801404e:	4293      	cmp	r3, r2
 8014050:	d022      	beq.n	8014098 <HAL_TIM_Base_Start_IT+0x80>
 8014052:	687b      	ldr	r3, [r7, #4]
 8014054:	681b      	ldr	r3, [r3, #0]
 8014056:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801405a:	d01d      	beq.n	8014098 <HAL_TIM_Base_Start_IT+0x80>
 801405c:	687b      	ldr	r3, [r7, #4]
 801405e:	681b      	ldr	r3, [r3, #0]
 8014060:	4a1f      	ldr	r2, [pc, #124]	; (80140e0 <HAL_TIM_Base_Start_IT+0xc8>)
 8014062:	4293      	cmp	r3, r2
 8014064:	d018      	beq.n	8014098 <HAL_TIM_Base_Start_IT+0x80>
 8014066:	687b      	ldr	r3, [r7, #4]
 8014068:	681b      	ldr	r3, [r3, #0]
 801406a:	4a1e      	ldr	r2, [pc, #120]	; (80140e4 <HAL_TIM_Base_Start_IT+0xcc>)
 801406c:	4293      	cmp	r3, r2
 801406e:	d013      	beq.n	8014098 <HAL_TIM_Base_Start_IT+0x80>
 8014070:	687b      	ldr	r3, [r7, #4]
 8014072:	681b      	ldr	r3, [r3, #0]
 8014074:	4a1c      	ldr	r2, [pc, #112]	; (80140e8 <HAL_TIM_Base_Start_IT+0xd0>)
 8014076:	4293      	cmp	r3, r2
 8014078:	d00e      	beq.n	8014098 <HAL_TIM_Base_Start_IT+0x80>
 801407a:	687b      	ldr	r3, [r7, #4]
 801407c:	681b      	ldr	r3, [r3, #0]
 801407e:	4a1b      	ldr	r2, [pc, #108]	; (80140ec <HAL_TIM_Base_Start_IT+0xd4>)
 8014080:	4293      	cmp	r3, r2
 8014082:	d009      	beq.n	8014098 <HAL_TIM_Base_Start_IT+0x80>
 8014084:	687b      	ldr	r3, [r7, #4]
 8014086:	681b      	ldr	r3, [r3, #0]
 8014088:	4a19      	ldr	r2, [pc, #100]	; (80140f0 <HAL_TIM_Base_Start_IT+0xd8>)
 801408a:	4293      	cmp	r3, r2
 801408c:	d004      	beq.n	8014098 <HAL_TIM_Base_Start_IT+0x80>
 801408e:	687b      	ldr	r3, [r7, #4]
 8014090:	681b      	ldr	r3, [r3, #0]
 8014092:	4a18      	ldr	r2, [pc, #96]	; (80140f4 <HAL_TIM_Base_Start_IT+0xdc>)
 8014094:	4293      	cmp	r3, r2
 8014096:	d111      	bne.n	80140bc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8014098:	687b      	ldr	r3, [r7, #4]
 801409a:	681b      	ldr	r3, [r3, #0]
 801409c:	689b      	ldr	r3, [r3, #8]
 801409e:	f003 0307 	and.w	r3, r3, #7
 80140a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80140a4:	68fb      	ldr	r3, [r7, #12]
 80140a6:	2b06      	cmp	r3, #6
 80140a8:	d010      	beq.n	80140cc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	681b      	ldr	r3, [r3, #0]
 80140ae:	681a      	ldr	r2, [r3, #0]
 80140b0:	687b      	ldr	r3, [r7, #4]
 80140b2:	681b      	ldr	r3, [r3, #0]
 80140b4:	f042 0201 	orr.w	r2, r2, #1
 80140b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80140ba:	e007      	b.n	80140cc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80140bc:	687b      	ldr	r3, [r7, #4]
 80140be:	681b      	ldr	r3, [r3, #0]
 80140c0:	681a      	ldr	r2, [r3, #0]
 80140c2:	687b      	ldr	r3, [r7, #4]
 80140c4:	681b      	ldr	r3, [r3, #0]
 80140c6:	f042 0201 	orr.w	r2, r2, #1
 80140ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80140cc:	2300      	movs	r3, #0
}
 80140ce:	4618      	mov	r0, r3
 80140d0:	3714      	adds	r7, #20
 80140d2:	46bd      	mov	sp, r7
 80140d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140d8:	4770      	bx	lr
 80140da:	bf00      	nop
 80140dc:	40010000 	.word	0x40010000
 80140e0:	40000400 	.word	0x40000400
 80140e4:	40000800 	.word	0x40000800
 80140e8:	40000c00 	.word	0x40000c00
 80140ec:	40010400 	.word	0x40010400
 80140f0:	40014000 	.word	0x40014000
 80140f4:	40001800 	.word	0x40001800

080140f8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80140f8:	b580      	push	{r7, lr}
 80140fa:	b082      	sub	sp, #8
 80140fc:	af00      	add	r7, sp, #0
 80140fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8014100:	687b      	ldr	r3, [r7, #4]
 8014102:	2b00      	cmp	r3, #0
 8014104:	d101      	bne.n	801410a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8014106:	2301      	movs	r3, #1
 8014108:	e041      	b.n	801418e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801410a:	687b      	ldr	r3, [r7, #4]
 801410c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014110:	b2db      	uxtb	r3, r3
 8014112:	2b00      	cmp	r3, #0
 8014114:	d106      	bne.n	8014124 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8014116:	687b      	ldr	r3, [r7, #4]
 8014118:	2200      	movs	r2, #0
 801411a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801411e:	6878      	ldr	r0, [r7, #4]
 8014120:	f000 f839 	bl	8014196 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8014124:	687b      	ldr	r3, [r7, #4]
 8014126:	2202      	movs	r2, #2
 8014128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801412c:	687b      	ldr	r3, [r7, #4]
 801412e:	681a      	ldr	r2, [r3, #0]
 8014130:	687b      	ldr	r3, [r7, #4]
 8014132:	3304      	adds	r3, #4
 8014134:	4619      	mov	r1, r3
 8014136:	4610      	mov	r0, r2
 8014138:	f000 ff30 	bl	8014f9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801413c:	687b      	ldr	r3, [r7, #4]
 801413e:	2201      	movs	r2, #1
 8014140:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8014144:	687b      	ldr	r3, [r7, #4]
 8014146:	2201      	movs	r2, #1
 8014148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801414c:	687b      	ldr	r3, [r7, #4]
 801414e:	2201      	movs	r2, #1
 8014150:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8014154:	687b      	ldr	r3, [r7, #4]
 8014156:	2201      	movs	r2, #1
 8014158:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	2201      	movs	r2, #1
 8014160:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8014164:	687b      	ldr	r3, [r7, #4]
 8014166:	2201      	movs	r2, #1
 8014168:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801416c:	687b      	ldr	r3, [r7, #4]
 801416e:	2201      	movs	r2, #1
 8014170:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8014174:	687b      	ldr	r3, [r7, #4]
 8014176:	2201      	movs	r2, #1
 8014178:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801417c:	687b      	ldr	r3, [r7, #4]
 801417e:	2201      	movs	r2, #1
 8014180:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8014184:	687b      	ldr	r3, [r7, #4]
 8014186:	2201      	movs	r2, #1
 8014188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801418c:	2300      	movs	r3, #0
}
 801418e:	4618      	mov	r0, r3
 8014190:	3708      	adds	r7, #8
 8014192:	46bd      	mov	sp, r7
 8014194:	bd80      	pop	{r7, pc}

08014196 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8014196:	b480      	push	{r7}
 8014198:	b083      	sub	sp, #12
 801419a:	af00      	add	r7, sp, #0
 801419c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 801419e:	bf00      	nop
 80141a0:	370c      	adds	r7, #12
 80141a2:	46bd      	mov	sp, r7
 80141a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141a8:	4770      	bx	lr
	...

080141ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80141ac:	b580      	push	{r7, lr}
 80141ae:	b084      	sub	sp, #16
 80141b0:	af00      	add	r7, sp, #0
 80141b2:	6078      	str	r0, [r7, #4]
 80141b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80141b6:	683b      	ldr	r3, [r7, #0]
 80141b8:	2b00      	cmp	r3, #0
 80141ba:	d109      	bne.n	80141d0 <HAL_TIM_PWM_Start+0x24>
 80141bc:	687b      	ldr	r3, [r7, #4]
 80141be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80141c2:	b2db      	uxtb	r3, r3
 80141c4:	2b01      	cmp	r3, #1
 80141c6:	bf14      	ite	ne
 80141c8:	2301      	movne	r3, #1
 80141ca:	2300      	moveq	r3, #0
 80141cc:	b2db      	uxtb	r3, r3
 80141ce:	e022      	b.n	8014216 <HAL_TIM_PWM_Start+0x6a>
 80141d0:	683b      	ldr	r3, [r7, #0]
 80141d2:	2b04      	cmp	r3, #4
 80141d4:	d109      	bne.n	80141ea <HAL_TIM_PWM_Start+0x3e>
 80141d6:	687b      	ldr	r3, [r7, #4]
 80141d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80141dc:	b2db      	uxtb	r3, r3
 80141de:	2b01      	cmp	r3, #1
 80141e0:	bf14      	ite	ne
 80141e2:	2301      	movne	r3, #1
 80141e4:	2300      	moveq	r3, #0
 80141e6:	b2db      	uxtb	r3, r3
 80141e8:	e015      	b.n	8014216 <HAL_TIM_PWM_Start+0x6a>
 80141ea:	683b      	ldr	r3, [r7, #0]
 80141ec:	2b08      	cmp	r3, #8
 80141ee:	d109      	bne.n	8014204 <HAL_TIM_PWM_Start+0x58>
 80141f0:	687b      	ldr	r3, [r7, #4]
 80141f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80141f6:	b2db      	uxtb	r3, r3
 80141f8:	2b01      	cmp	r3, #1
 80141fa:	bf14      	ite	ne
 80141fc:	2301      	movne	r3, #1
 80141fe:	2300      	moveq	r3, #0
 8014200:	b2db      	uxtb	r3, r3
 8014202:	e008      	b.n	8014216 <HAL_TIM_PWM_Start+0x6a>
 8014204:	687b      	ldr	r3, [r7, #4]
 8014206:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801420a:	b2db      	uxtb	r3, r3
 801420c:	2b01      	cmp	r3, #1
 801420e:	bf14      	ite	ne
 8014210:	2301      	movne	r3, #1
 8014212:	2300      	moveq	r3, #0
 8014214:	b2db      	uxtb	r3, r3
 8014216:	2b00      	cmp	r3, #0
 8014218:	d001      	beq.n	801421e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 801421a:	2301      	movs	r3, #1
 801421c:	e07c      	b.n	8014318 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801421e:	683b      	ldr	r3, [r7, #0]
 8014220:	2b00      	cmp	r3, #0
 8014222:	d104      	bne.n	801422e <HAL_TIM_PWM_Start+0x82>
 8014224:	687b      	ldr	r3, [r7, #4]
 8014226:	2202      	movs	r2, #2
 8014228:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801422c:	e013      	b.n	8014256 <HAL_TIM_PWM_Start+0xaa>
 801422e:	683b      	ldr	r3, [r7, #0]
 8014230:	2b04      	cmp	r3, #4
 8014232:	d104      	bne.n	801423e <HAL_TIM_PWM_Start+0x92>
 8014234:	687b      	ldr	r3, [r7, #4]
 8014236:	2202      	movs	r2, #2
 8014238:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801423c:	e00b      	b.n	8014256 <HAL_TIM_PWM_Start+0xaa>
 801423e:	683b      	ldr	r3, [r7, #0]
 8014240:	2b08      	cmp	r3, #8
 8014242:	d104      	bne.n	801424e <HAL_TIM_PWM_Start+0xa2>
 8014244:	687b      	ldr	r3, [r7, #4]
 8014246:	2202      	movs	r2, #2
 8014248:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801424c:	e003      	b.n	8014256 <HAL_TIM_PWM_Start+0xaa>
 801424e:	687b      	ldr	r3, [r7, #4]
 8014250:	2202      	movs	r2, #2
 8014252:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8014256:	687b      	ldr	r3, [r7, #4]
 8014258:	681b      	ldr	r3, [r3, #0]
 801425a:	2201      	movs	r2, #1
 801425c:	6839      	ldr	r1, [r7, #0]
 801425e:	4618      	mov	r0, r3
 8014260:	f001 fb42 	bl	80158e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8014264:	687b      	ldr	r3, [r7, #4]
 8014266:	681b      	ldr	r3, [r3, #0]
 8014268:	4a2d      	ldr	r2, [pc, #180]	; (8014320 <HAL_TIM_PWM_Start+0x174>)
 801426a:	4293      	cmp	r3, r2
 801426c:	d004      	beq.n	8014278 <HAL_TIM_PWM_Start+0xcc>
 801426e:	687b      	ldr	r3, [r7, #4]
 8014270:	681b      	ldr	r3, [r3, #0]
 8014272:	4a2c      	ldr	r2, [pc, #176]	; (8014324 <HAL_TIM_PWM_Start+0x178>)
 8014274:	4293      	cmp	r3, r2
 8014276:	d101      	bne.n	801427c <HAL_TIM_PWM_Start+0xd0>
 8014278:	2301      	movs	r3, #1
 801427a:	e000      	b.n	801427e <HAL_TIM_PWM_Start+0xd2>
 801427c:	2300      	movs	r3, #0
 801427e:	2b00      	cmp	r3, #0
 8014280:	d007      	beq.n	8014292 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8014282:	687b      	ldr	r3, [r7, #4]
 8014284:	681b      	ldr	r3, [r3, #0]
 8014286:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014288:	687b      	ldr	r3, [r7, #4]
 801428a:	681b      	ldr	r3, [r3, #0]
 801428c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8014290:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8014292:	687b      	ldr	r3, [r7, #4]
 8014294:	681b      	ldr	r3, [r3, #0]
 8014296:	4a22      	ldr	r2, [pc, #136]	; (8014320 <HAL_TIM_PWM_Start+0x174>)
 8014298:	4293      	cmp	r3, r2
 801429a:	d022      	beq.n	80142e2 <HAL_TIM_PWM_Start+0x136>
 801429c:	687b      	ldr	r3, [r7, #4]
 801429e:	681b      	ldr	r3, [r3, #0]
 80142a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80142a4:	d01d      	beq.n	80142e2 <HAL_TIM_PWM_Start+0x136>
 80142a6:	687b      	ldr	r3, [r7, #4]
 80142a8:	681b      	ldr	r3, [r3, #0]
 80142aa:	4a1f      	ldr	r2, [pc, #124]	; (8014328 <HAL_TIM_PWM_Start+0x17c>)
 80142ac:	4293      	cmp	r3, r2
 80142ae:	d018      	beq.n	80142e2 <HAL_TIM_PWM_Start+0x136>
 80142b0:	687b      	ldr	r3, [r7, #4]
 80142b2:	681b      	ldr	r3, [r3, #0]
 80142b4:	4a1d      	ldr	r2, [pc, #116]	; (801432c <HAL_TIM_PWM_Start+0x180>)
 80142b6:	4293      	cmp	r3, r2
 80142b8:	d013      	beq.n	80142e2 <HAL_TIM_PWM_Start+0x136>
 80142ba:	687b      	ldr	r3, [r7, #4]
 80142bc:	681b      	ldr	r3, [r3, #0]
 80142be:	4a1c      	ldr	r2, [pc, #112]	; (8014330 <HAL_TIM_PWM_Start+0x184>)
 80142c0:	4293      	cmp	r3, r2
 80142c2:	d00e      	beq.n	80142e2 <HAL_TIM_PWM_Start+0x136>
 80142c4:	687b      	ldr	r3, [r7, #4]
 80142c6:	681b      	ldr	r3, [r3, #0]
 80142c8:	4a16      	ldr	r2, [pc, #88]	; (8014324 <HAL_TIM_PWM_Start+0x178>)
 80142ca:	4293      	cmp	r3, r2
 80142cc:	d009      	beq.n	80142e2 <HAL_TIM_PWM_Start+0x136>
 80142ce:	687b      	ldr	r3, [r7, #4]
 80142d0:	681b      	ldr	r3, [r3, #0]
 80142d2:	4a18      	ldr	r2, [pc, #96]	; (8014334 <HAL_TIM_PWM_Start+0x188>)
 80142d4:	4293      	cmp	r3, r2
 80142d6:	d004      	beq.n	80142e2 <HAL_TIM_PWM_Start+0x136>
 80142d8:	687b      	ldr	r3, [r7, #4]
 80142da:	681b      	ldr	r3, [r3, #0]
 80142dc:	4a16      	ldr	r2, [pc, #88]	; (8014338 <HAL_TIM_PWM_Start+0x18c>)
 80142de:	4293      	cmp	r3, r2
 80142e0:	d111      	bne.n	8014306 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80142e2:	687b      	ldr	r3, [r7, #4]
 80142e4:	681b      	ldr	r3, [r3, #0]
 80142e6:	689b      	ldr	r3, [r3, #8]
 80142e8:	f003 0307 	and.w	r3, r3, #7
 80142ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80142ee:	68fb      	ldr	r3, [r7, #12]
 80142f0:	2b06      	cmp	r3, #6
 80142f2:	d010      	beq.n	8014316 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80142f4:	687b      	ldr	r3, [r7, #4]
 80142f6:	681b      	ldr	r3, [r3, #0]
 80142f8:	681a      	ldr	r2, [r3, #0]
 80142fa:	687b      	ldr	r3, [r7, #4]
 80142fc:	681b      	ldr	r3, [r3, #0]
 80142fe:	f042 0201 	orr.w	r2, r2, #1
 8014302:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8014304:	e007      	b.n	8014316 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8014306:	687b      	ldr	r3, [r7, #4]
 8014308:	681b      	ldr	r3, [r3, #0]
 801430a:	681a      	ldr	r2, [r3, #0]
 801430c:	687b      	ldr	r3, [r7, #4]
 801430e:	681b      	ldr	r3, [r3, #0]
 8014310:	f042 0201 	orr.w	r2, r2, #1
 8014314:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8014316:	2300      	movs	r3, #0
}
 8014318:	4618      	mov	r0, r3
 801431a:	3710      	adds	r7, #16
 801431c:	46bd      	mov	sp, r7
 801431e:	bd80      	pop	{r7, pc}
 8014320:	40010000 	.word	0x40010000
 8014324:	40010400 	.word	0x40010400
 8014328:	40000400 	.word	0x40000400
 801432c:	40000800 	.word	0x40000800
 8014330:	40000c00 	.word	0x40000c00
 8014334:	40014000 	.word	0x40014000
 8014338:	40001800 	.word	0x40001800

0801433c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 801433c:	b580      	push	{r7, lr}
 801433e:	b082      	sub	sp, #8
 8014340:	af00      	add	r7, sp, #0
 8014342:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8014344:	687b      	ldr	r3, [r7, #4]
 8014346:	2b00      	cmp	r3, #0
 8014348:	d101      	bne.n	801434e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 801434a:	2301      	movs	r3, #1
 801434c:	e041      	b.n	80143d2 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801434e:	687b      	ldr	r3, [r7, #4]
 8014350:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014354:	b2db      	uxtb	r3, r3
 8014356:	2b00      	cmp	r3, #0
 8014358:	d106      	bne.n	8014368 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801435a:	687b      	ldr	r3, [r7, #4]
 801435c:	2200      	movs	r2, #0
 801435e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8014362:	6878      	ldr	r0, [r7, #4]
 8014364:	f000 f839 	bl	80143da <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8014368:	687b      	ldr	r3, [r7, #4]
 801436a:	2202      	movs	r2, #2
 801436c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8014370:	687b      	ldr	r3, [r7, #4]
 8014372:	681a      	ldr	r2, [r3, #0]
 8014374:	687b      	ldr	r3, [r7, #4]
 8014376:	3304      	adds	r3, #4
 8014378:	4619      	mov	r1, r3
 801437a:	4610      	mov	r0, r2
 801437c:	f000 fe0e 	bl	8014f9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8014380:	687b      	ldr	r3, [r7, #4]
 8014382:	2201      	movs	r2, #1
 8014384:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8014388:	687b      	ldr	r3, [r7, #4]
 801438a:	2201      	movs	r2, #1
 801438c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8014390:	687b      	ldr	r3, [r7, #4]
 8014392:	2201      	movs	r2, #1
 8014394:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8014398:	687b      	ldr	r3, [r7, #4]
 801439a:	2201      	movs	r2, #1
 801439c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80143a0:	687b      	ldr	r3, [r7, #4]
 80143a2:	2201      	movs	r2, #1
 80143a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80143a8:	687b      	ldr	r3, [r7, #4]
 80143aa:	2201      	movs	r2, #1
 80143ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80143b0:	687b      	ldr	r3, [r7, #4]
 80143b2:	2201      	movs	r2, #1
 80143b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80143b8:	687b      	ldr	r3, [r7, #4]
 80143ba:	2201      	movs	r2, #1
 80143bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80143c0:	687b      	ldr	r3, [r7, #4]
 80143c2:	2201      	movs	r2, #1
 80143c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80143c8:	687b      	ldr	r3, [r7, #4]
 80143ca:	2201      	movs	r2, #1
 80143cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80143d0:	2300      	movs	r3, #0
}
 80143d2:	4618      	mov	r0, r3
 80143d4:	3708      	adds	r7, #8
 80143d6:	46bd      	mov	sp, r7
 80143d8:	bd80      	pop	{r7, pc}

080143da <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80143da:	b480      	push	{r7}
 80143dc:	b083      	sub	sp, #12
 80143de:	af00      	add	r7, sp, #0
 80143e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80143e2:	bf00      	nop
 80143e4:	370c      	adds	r7, #12
 80143e6:	46bd      	mov	sp, r7
 80143e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143ec:	4770      	bx	lr
	...

080143f0 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80143f0:	b580      	push	{r7, lr}
 80143f2:	b084      	sub	sp, #16
 80143f4:	af00      	add	r7, sp, #0
 80143f6:	6078      	str	r0, [r7, #4]
 80143f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80143fa:	683b      	ldr	r3, [r7, #0]
 80143fc:	2b00      	cmp	r3, #0
 80143fe:	d104      	bne.n	801440a <HAL_TIM_IC_Start+0x1a>
 8014400:	687b      	ldr	r3, [r7, #4]
 8014402:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8014406:	b2db      	uxtb	r3, r3
 8014408:	e013      	b.n	8014432 <HAL_TIM_IC_Start+0x42>
 801440a:	683b      	ldr	r3, [r7, #0]
 801440c:	2b04      	cmp	r3, #4
 801440e:	d104      	bne.n	801441a <HAL_TIM_IC_Start+0x2a>
 8014410:	687b      	ldr	r3, [r7, #4]
 8014412:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8014416:	b2db      	uxtb	r3, r3
 8014418:	e00b      	b.n	8014432 <HAL_TIM_IC_Start+0x42>
 801441a:	683b      	ldr	r3, [r7, #0]
 801441c:	2b08      	cmp	r3, #8
 801441e:	d104      	bne.n	801442a <HAL_TIM_IC_Start+0x3a>
 8014420:	687b      	ldr	r3, [r7, #4]
 8014422:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014426:	b2db      	uxtb	r3, r3
 8014428:	e003      	b.n	8014432 <HAL_TIM_IC_Start+0x42>
 801442a:	687b      	ldr	r3, [r7, #4]
 801442c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8014430:	b2db      	uxtb	r3, r3
 8014432:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8014434:	683b      	ldr	r3, [r7, #0]
 8014436:	2b00      	cmp	r3, #0
 8014438:	d104      	bne.n	8014444 <HAL_TIM_IC_Start+0x54>
 801443a:	687b      	ldr	r3, [r7, #4]
 801443c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014440:	b2db      	uxtb	r3, r3
 8014442:	e013      	b.n	801446c <HAL_TIM_IC_Start+0x7c>
 8014444:	683b      	ldr	r3, [r7, #0]
 8014446:	2b04      	cmp	r3, #4
 8014448:	d104      	bne.n	8014454 <HAL_TIM_IC_Start+0x64>
 801444a:	687b      	ldr	r3, [r7, #4]
 801444c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014450:	b2db      	uxtb	r3, r3
 8014452:	e00b      	b.n	801446c <HAL_TIM_IC_Start+0x7c>
 8014454:	683b      	ldr	r3, [r7, #0]
 8014456:	2b08      	cmp	r3, #8
 8014458:	d104      	bne.n	8014464 <HAL_TIM_IC_Start+0x74>
 801445a:	687b      	ldr	r3, [r7, #4]
 801445c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014460:	b2db      	uxtb	r3, r3
 8014462:	e003      	b.n	801446c <HAL_TIM_IC_Start+0x7c>
 8014464:	687b      	ldr	r3, [r7, #4]
 8014466:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801446a:	b2db      	uxtb	r3, r3
 801446c:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 801446e:	7bfb      	ldrb	r3, [r7, #15]
 8014470:	2b01      	cmp	r3, #1
 8014472:	d102      	bne.n	801447a <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8014474:	7bbb      	ldrb	r3, [r7, #14]
 8014476:	2b01      	cmp	r3, #1
 8014478:	d001      	beq.n	801447e <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 801447a:	2301      	movs	r3, #1
 801447c:	e081      	b.n	8014582 <HAL_TIM_IC_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801447e:	683b      	ldr	r3, [r7, #0]
 8014480:	2b00      	cmp	r3, #0
 8014482:	d104      	bne.n	801448e <HAL_TIM_IC_Start+0x9e>
 8014484:	687b      	ldr	r3, [r7, #4]
 8014486:	2202      	movs	r2, #2
 8014488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801448c:	e013      	b.n	80144b6 <HAL_TIM_IC_Start+0xc6>
 801448e:	683b      	ldr	r3, [r7, #0]
 8014490:	2b04      	cmp	r3, #4
 8014492:	d104      	bne.n	801449e <HAL_TIM_IC_Start+0xae>
 8014494:	687b      	ldr	r3, [r7, #4]
 8014496:	2202      	movs	r2, #2
 8014498:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801449c:	e00b      	b.n	80144b6 <HAL_TIM_IC_Start+0xc6>
 801449e:	683b      	ldr	r3, [r7, #0]
 80144a0:	2b08      	cmp	r3, #8
 80144a2:	d104      	bne.n	80144ae <HAL_TIM_IC_Start+0xbe>
 80144a4:	687b      	ldr	r3, [r7, #4]
 80144a6:	2202      	movs	r2, #2
 80144a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80144ac:	e003      	b.n	80144b6 <HAL_TIM_IC_Start+0xc6>
 80144ae:	687b      	ldr	r3, [r7, #4]
 80144b0:	2202      	movs	r2, #2
 80144b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80144b6:	683b      	ldr	r3, [r7, #0]
 80144b8:	2b00      	cmp	r3, #0
 80144ba:	d104      	bne.n	80144c6 <HAL_TIM_IC_Start+0xd6>
 80144bc:	687b      	ldr	r3, [r7, #4]
 80144be:	2202      	movs	r2, #2
 80144c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80144c4:	e013      	b.n	80144ee <HAL_TIM_IC_Start+0xfe>
 80144c6:	683b      	ldr	r3, [r7, #0]
 80144c8:	2b04      	cmp	r3, #4
 80144ca:	d104      	bne.n	80144d6 <HAL_TIM_IC_Start+0xe6>
 80144cc:	687b      	ldr	r3, [r7, #4]
 80144ce:	2202      	movs	r2, #2
 80144d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80144d4:	e00b      	b.n	80144ee <HAL_TIM_IC_Start+0xfe>
 80144d6:	683b      	ldr	r3, [r7, #0]
 80144d8:	2b08      	cmp	r3, #8
 80144da:	d104      	bne.n	80144e6 <HAL_TIM_IC_Start+0xf6>
 80144dc:	687b      	ldr	r3, [r7, #4]
 80144de:	2202      	movs	r2, #2
 80144e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80144e4:	e003      	b.n	80144ee <HAL_TIM_IC_Start+0xfe>
 80144e6:	687b      	ldr	r3, [r7, #4]
 80144e8:	2202      	movs	r2, #2
 80144ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80144ee:	687b      	ldr	r3, [r7, #4]
 80144f0:	681b      	ldr	r3, [r3, #0]
 80144f2:	2201      	movs	r2, #1
 80144f4:	6839      	ldr	r1, [r7, #0]
 80144f6:	4618      	mov	r0, r3
 80144f8:	f001 f9f6 	bl	80158e8 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80144fc:	687b      	ldr	r3, [r7, #4]
 80144fe:	681b      	ldr	r3, [r3, #0]
 8014500:	4a22      	ldr	r2, [pc, #136]	; (801458c <HAL_TIM_IC_Start+0x19c>)
 8014502:	4293      	cmp	r3, r2
 8014504:	d022      	beq.n	801454c <HAL_TIM_IC_Start+0x15c>
 8014506:	687b      	ldr	r3, [r7, #4]
 8014508:	681b      	ldr	r3, [r3, #0]
 801450a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801450e:	d01d      	beq.n	801454c <HAL_TIM_IC_Start+0x15c>
 8014510:	687b      	ldr	r3, [r7, #4]
 8014512:	681b      	ldr	r3, [r3, #0]
 8014514:	4a1e      	ldr	r2, [pc, #120]	; (8014590 <HAL_TIM_IC_Start+0x1a0>)
 8014516:	4293      	cmp	r3, r2
 8014518:	d018      	beq.n	801454c <HAL_TIM_IC_Start+0x15c>
 801451a:	687b      	ldr	r3, [r7, #4]
 801451c:	681b      	ldr	r3, [r3, #0]
 801451e:	4a1d      	ldr	r2, [pc, #116]	; (8014594 <HAL_TIM_IC_Start+0x1a4>)
 8014520:	4293      	cmp	r3, r2
 8014522:	d013      	beq.n	801454c <HAL_TIM_IC_Start+0x15c>
 8014524:	687b      	ldr	r3, [r7, #4]
 8014526:	681b      	ldr	r3, [r3, #0]
 8014528:	4a1b      	ldr	r2, [pc, #108]	; (8014598 <HAL_TIM_IC_Start+0x1a8>)
 801452a:	4293      	cmp	r3, r2
 801452c:	d00e      	beq.n	801454c <HAL_TIM_IC_Start+0x15c>
 801452e:	687b      	ldr	r3, [r7, #4]
 8014530:	681b      	ldr	r3, [r3, #0]
 8014532:	4a1a      	ldr	r2, [pc, #104]	; (801459c <HAL_TIM_IC_Start+0x1ac>)
 8014534:	4293      	cmp	r3, r2
 8014536:	d009      	beq.n	801454c <HAL_TIM_IC_Start+0x15c>
 8014538:	687b      	ldr	r3, [r7, #4]
 801453a:	681b      	ldr	r3, [r3, #0]
 801453c:	4a18      	ldr	r2, [pc, #96]	; (80145a0 <HAL_TIM_IC_Start+0x1b0>)
 801453e:	4293      	cmp	r3, r2
 8014540:	d004      	beq.n	801454c <HAL_TIM_IC_Start+0x15c>
 8014542:	687b      	ldr	r3, [r7, #4]
 8014544:	681b      	ldr	r3, [r3, #0]
 8014546:	4a17      	ldr	r2, [pc, #92]	; (80145a4 <HAL_TIM_IC_Start+0x1b4>)
 8014548:	4293      	cmp	r3, r2
 801454a:	d111      	bne.n	8014570 <HAL_TIM_IC_Start+0x180>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801454c:	687b      	ldr	r3, [r7, #4]
 801454e:	681b      	ldr	r3, [r3, #0]
 8014550:	689b      	ldr	r3, [r3, #8]
 8014552:	f003 0307 	and.w	r3, r3, #7
 8014556:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8014558:	68bb      	ldr	r3, [r7, #8]
 801455a:	2b06      	cmp	r3, #6
 801455c:	d010      	beq.n	8014580 <HAL_TIM_IC_Start+0x190>
    {
      __HAL_TIM_ENABLE(htim);
 801455e:	687b      	ldr	r3, [r7, #4]
 8014560:	681b      	ldr	r3, [r3, #0]
 8014562:	681a      	ldr	r2, [r3, #0]
 8014564:	687b      	ldr	r3, [r7, #4]
 8014566:	681b      	ldr	r3, [r3, #0]
 8014568:	f042 0201 	orr.w	r2, r2, #1
 801456c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801456e:	e007      	b.n	8014580 <HAL_TIM_IC_Start+0x190>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8014570:	687b      	ldr	r3, [r7, #4]
 8014572:	681b      	ldr	r3, [r3, #0]
 8014574:	681a      	ldr	r2, [r3, #0]
 8014576:	687b      	ldr	r3, [r7, #4]
 8014578:	681b      	ldr	r3, [r3, #0]
 801457a:	f042 0201 	orr.w	r2, r2, #1
 801457e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8014580:	2300      	movs	r3, #0
}
 8014582:	4618      	mov	r0, r3
 8014584:	3710      	adds	r7, #16
 8014586:	46bd      	mov	sp, r7
 8014588:	bd80      	pop	{r7, pc}
 801458a:	bf00      	nop
 801458c:	40010000 	.word	0x40010000
 8014590:	40000400 	.word	0x40000400
 8014594:	40000800 	.word	0x40000800
 8014598:	40000c00 	.word	0x40000c00
 801459c:	40010400 	.word	0x40010400
 80145a0:	40014000 	.word	0x40014000
 80145a4:	40001800 	.word	0x40001800

080145a8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80145a8:	b580      	push	{r7, lr}
 80145aa:	b084      	sub	sp, #16
 80145ac:	af00      	add	r7, sp, #0
 80145ae:	6078      	str	r0, [r7, #4]
 80145b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80145b2:	2300      	movs	r3, #0
 80145b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80145b6:	683b      	ldr	r3, [r7, #0]
 80145b8:	2b00      	cmp	r3, #0
 80145ba:	d104      	bne.n	80145c6 <HAL_TIM_IC_Start_IT+0x1e>
 80145bc:	687b      	ldr	r3, [r7, #4]
 80145be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80145c2:	b2db      	uxtb	r3, r3
 80145c4:	e013      	b.n	80145ee <HAL_TIM_IC_Start_IT+0x46>
 80145c6:	683b      	ldr	r3, [r7, #0]
 80145c8:	2b04      	cmp	r3, #4
 80145ca:	d104      	bne.n	80145d6 <HAL_TIM_IC_Start_IT+0x2e>
 80145cc:	687b      	ldr	r3, [r7, #4]
 80145ce:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80145d2:	b2db      	uxtb	r3, r3
 80145d4:	e00b      	b.n	80145ee <HAL_TIM_IC_Start_IT+0x46>
 80145d6:	683b      	ldr	r3, [r7, #0]
 80145d8:	2b08      	cmp	r3, #8
 80145da:	d104      	bne.n	80145e6 <HAL_TIM_IC_Start_IT+0x3e>
 80145dc:	687b      	ldr	r3, [r7, #4]
 80145de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80145e2:	b2db      	uxtb	r3, r3
 80145e4:	e003      	b.n	80145ee <HAL_TIM_IC_Start_IT+0x46>
 80145e6:	687b      	ldr	r3, [r7, #4]
 80145e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80145ec:	b2db      	uxtb	r3, r3
 80145ee:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80145f0:	683b      	ldr	r3, [r7, #0]
 80145f2:	2b00      	cmp	r3, #0
 80145f4:	d104      	bne.n	8014600 <HAL_TIM_IC_Start_IT+0x58>
 80145f6:	687b      	ldr	r3, [r7, #4]
 80145f8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80145fc:	b2db      	uxtb	r3, r3
 80145fe:	e013      	b.n	8014628 <HAL_TIM_IC_Start_IT+0x80>
 8014600:	683b      	ldr	r3, [r7, #0]
 8014602:	2b04      	cmp	r3, #4
 8014604:	d104      	bne.n	8014610 <HAL_TIM_IC_Start_IT+0x68>
 8014606:	687b      	ldr	r3, [r7, #4]
 8014608:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801460c:	b2db      	uxtb	r3, r3
 801460e:	e00b      	b.n	8014628 <HAL_TIM_IC_Start_IT+0x80>
 8014610:	683b      	ldr	r3, [r7, #0]
 8014612:	2b08      	cmp	r3, #8
 8014614:	d104      	bne.n	8014620 <HAL_TIM_IC_Start_IT+0x78>
 8014616:	687b      	ldr	r3, [r7, #4]
 8014618:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801461c:	b2db      	uxtb	r3, r3
 801461e:	e003      	b.n	8014628 <HAL_TIM_IC_Start_IT+0x80>
 8014620:	687b      	ldr	r3, [r7, #4]
 8014622:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014626:	b2db      	uxtb	r3, r3
 8014628:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 801462a:	7bbb      	ldrb	r3, [r7, #14]
 801462c:	2b01      	cmp	r3, #1
 801462e:	d102      	bne.n	8014636 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8014630:	7b7b      	ldrb	r3, [r7, #13]
 8014632:	2b01      	cmp	r3, #1
 8014634:	d001      	beq.n	801463a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8014636:	2301      	movs	r3, #1
 8014638:	e0cc      	b.n	80147d4 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801463a:	683b      	ldr	r3, [r7, #0]
 801463c:	2b00      	cmp	r3, #0
 801463e:	d104      	bne.n	801464a <HAL_TIM_IC_Start_IT+0xa2>
 8014640:	687b      	ldr	r3, [r7, #4]
 8014642:	2202      	movs	r2, #2
 8014644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8014648:	e013      	b.n	8014672 <HAL_TIM_IC_Start_IT+0xca>
 801464a:	683b      	ldr	r3, [r7, #0]
 801464c:	2b04      	cmp	r3, #4
 801464e:	d104      	bne.n	801465a <HAL_TIM_IC_Start_IT+0xb2>
 8014650:	687b      	ldr	r3, [r7, #4]
 8014652:	2202      	movs	r2, #2
 8014654:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8014658:	e00b      	b.n	8014672 <HAL_TIM_IC_Start_IT+0xca>
 801465a:	683b      	ldr	r3, [r7, #0]
 801465c:	2b08      	cmp	r3, #8
 801465e:	d104      	bne.n	801466a <HAL_TIM_IC_Start_IT+0xc2>
 8014660:	687b      	ldr	r3, [r7, #4]
 8014662:	2202      	movs	r2, #2
 8014664:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8014668:	e003      	b.n	8014672 <HAL_TIM_IC_Start_IT+0xca>
 801466a:	687b      	ldr	r3, [r7, #4]
 801466c:	2202      	movs	r2, #2
 801466e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8014672:	683b      	ldr	r3, [r7, #0]
 8014674:	2b00      	cmp	r3, #0
 8014676:	d104      	bne.n	8014682 <HAL_TIM_IC_Start_IT+0xda>
 8014678:	687b      	ldr	r3, [r7, #4]
 801467a:	2202      	movs	r2, #2
 801467c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8014680:	e013      	b.n	80146aa <HAL_TIM_IC_Start_IT+0x102>
 8014682:	683b      	ldr	r3, [r7, #0]
 8014684:	2b04      	cmp	r3, #4
 8014686:	d104      	bne.n	8014692 <HAL_TIM_IC_Start_IT+0xea>
 8014688:	687b      	ldr	r3, [r7, #4]
 801468a:	2202      	movs	r2, #2
 801468c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8014690:	e00b      	b.n	80146aa <HAL_TIM_IC_Start_IT+0x102>
 8014692:	683b      	ldr	r3, [r7, #0]
 8014694:	2b08      	cmp	r3, #8
 8014696:	d104      	bne.n	80146a2 <HAL_TIM_IC_Start_IT+0xfa>
 8014698:	687b      	ldr	r3, [r7, #4]
 801469a:	2202      	movs	r2, #2
 801469c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80146a0:	e003      	b.n	80146aa <HAL_TIM_IC_Start_IT+0x102>
 80146a2:	687b      	ldr	r3, [r7, #4]
 80146a4:	2202      	movs	r2, #2
 80146a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80146aa:	683b      	ldr	r3, [r7, #0]
 80146ac:	2b0c      	cmp	r3, #12
 80146ae:	d841      	bhi.n	8014734 <HAL_TIM_IC_Start_IT+0x18c>
 80146b0:	a201      	add	r2, pc, #4	; (adr r2, 80146b8 <HAL_TIM_IC_Start_IT+0x110>)
 80146b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80146b6:	bf00      	nop
 80146b8:	080146ed 	.word	0x080146ed
 80146bc:	08014735 	.word	0x08014735
 80146c0:	08014735 	.word	0x08014735
 80146c4:	08014735 	.word	0x08014735
 80146c8:	080146ff 	.word	0x080146ff
 80146cc:	08014735 	.word	0x08014735
 80146d0:	08014735 	.word	0x08014735
 80146d4:	08014735 	.word	0x08014735
 80146d8:	08014711 	.word	0x08014711
 80146dc:	08014735 	.word	0x08014735
 80146e0:	08014735 	.word	0x08014735
 80146e4:	08014735 	.word	0x08014735
 80146e8:	08014723 	.word	0x08014723
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80146ec:	687b      	ldr	r3, [r7, #4]
 80146ee:	681b      	ldr	r3, [r3, #0]
 80146f0:	68da      	ldr	r2, [r3, #12]
 80146f2:	687b      	ldr	r3, [r7, #4]
 80146f4:	681b      	ldr	r3, [r3, #0]
 80146f6:	f042 0202 	orr.w	r2, r2, #2
 80146fa:	60da      	str	r2, [r3, #12]
      break;
 80146fc:	e01d      	b.n	801473a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80146fe:	687b      	ldr	r3, [r7, #4]
 8014700:	681b      	ldr	r3, [r3, #0]
 8014702:	68da      	ldr	r2, [r3, #12]
 8014704:	687b      	ldr	r3, [r7, #4]
 8014706:	681b      	ldr	r3, [r3, #0]
 8014708:	f042 0204 	orr.w	r2, r2, #4
 801470c:	60da      	str	r2, [r3, #12]
      break;
 801470e:	e014      	b.n	801473a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8014710:	687b      	ldr	r3, [r7, #4]
 8014712:	681b      	ldr	r3, [r3, #0]
 8014714:	68da      	ldr	r2, [r3, #12]
 8014716:	687b      	ldr	r3, [r7, #4]
 8014718:	681b      	ldr	r3, [r3, #0]
 801471a:	f042 0208 	orr.w	r2, r2, #8
 801471e:	60da      	str	r2, [r3, #12]
      break;
 8014720:	e00b      	b.n	801473a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8014722:	687b      	ldr	r3, [r7, #4]
 8014724:	681b      	ldr	r3, [r3, #0]
 8014726:	68da      	ldr	r2, [r3, #12]
 8014728:	687b      	ldr	r3, [r7, #4]
 801472a:	681b      	ldr	r3, [r3, #0]
 801472c:	f042 0210 	orr.w	r2, r2, #16
 8014730:	60da      	str	r2, [r3, #12]
      break;
 8014732:	e002      	b.n	801473a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8014734:	2301      	movs	r3, #1
 8014736:	73fb      	strb	r3, [r7, #15]
      break;
 8014738:	bf00      	nop
  }

  if (status == HAL_OK)
 801473a:	7bfb      	ldrb	r3, [r7, #15]
 801473c:	2b00      	cmp	r3, #0
 801473e:	d148      	bne.n	80147d2 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8014740:	687b      	ldr	r3, [r7, #4]
 8014742:	681b      	ldr	r3, [r3, #0]
 8014744:	2201      	movs	r2, #1
 8014746:	6839      	ldr	r1, [r7, #0]
 8014748:	4618      	mov	r0, r3
 801474a:	f001 f8cd 	bl	80158e8 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801474e:	687b      	ldr	r3, [r7, #4]
 8014750:	681b      	ldr	r3, [r3, #0]
 8014752:	4a22      	ldr	r2, [pc, #136]	; (80147dc <HAL_TIM_IC_Start_IT+0x234>)
 8014754:	4293      	cmp	r3, r2
 8014756:	d022      	beq.n	801479e <HAL_TIM_IC_Start_IT+0x1f6>
 8014758:	687b      	ldr	r3, [r7, #4]
 801475a:	681b      	ldr	r3, [r3, #0]
 801475c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014760:	d01d      	beq.n	801479e <HAL_TIM_IC_Start_IT+0x1f6>
 8014762:	687b      	ldr	r3, [r7, #4]
 8014764:	681b      	ldr	r3, [r3, #0]
 8014766:	4a1e      	ldr	r2, [pc, #120]	; (80147e0 <HAL_TIM_IC_Start_IT+0x238>)
 8014768:	4293      	cmp	r3, r2
 801476a:	d018      	beq.n	801479e <HAL_TIM_IC_Start_IT+0x1f6>
 801476c:	687b      	ldr	r3, [r7, #4]
 801476e:	681b      	ldr	r3, [r3, #0]
 8014770:	4a1c      	ldr	r2, [pc, #112]	; (80147e4 <HAL_TIM_IC_Start_IT+0x23c>)
 8014772:	4293      	cmp	r3, r2
 8014774:	d013      	beq.n	801479e <HAL_TIM_IC_Start_IT+0x1f6>
 8014776:	687b      	ldr	r3, [r7, #4]
 8014778:	681b      	ldr	r3, [r3, #0]
 801477a:	4a1b      	ldr	r2, [pc, #108]	; (80147e8 <HAL_TIM_IC_Start_IT+0x240>)
 801477c:	4293      	cmp	r3, r2
 801477e:	d00e      	beq.n	801479e <HAL_TIM_IC_Start_IT+0x1f6>
 8014780:	687b      	ldr	r3, [r7, #4]
 8014782:	681b      	ldr	r3, [r3, #0]
 8014784:	4a19      	ldr	r2, [pc, #100]	; (80147ec <HAL_TIM_IC_Start_IT+0x244>)
 8014786:	4293      	cmp	r3, r2
 8014788:	d009      	beq.n	801479e <HAL_TIM_IC_Start_IT+0x1f6>
 801478a:	687b      	ldr	r3, [r7, #4]
 801478c:	681b      	ldr	r3, [r3, #0]
 801478e:	4a18      	ldr	r2, [pc, #96]	; (80147f0 <HAL_TIM_IC_Start_IT+0x248>)
 8014790:	4293      	cmp	r3, r2
 8014792:	d004      	beq.n	801479e <HAL_TIM_IC_Start_IT+0x1f6>
 8014794:	687b      	ldr	r3, [r7, #4]
 8014796:	681b      	ldr	r3, [r3, #0]
 8014798:	4a16      	ldr	r2, [pc, #88]	; (80147f4 <HAL_TIM_IC_Start_IT+0x24c>)
 801479a:	4293      	cmp	r3, r2
 801479c:	d111      	bne.n	80147c2 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801479e:	687b      	ldr	r3, [r7, #4]
 80147a0:	681b      	ldr	r3, [r3, #0]
 80147a2:	689b      	ldr	r3, [r3, #8]
 80147a4:	f003 0307 	and.w	r3, r3, #7
 80147a8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80147aa:	68bb      	ldr	r3, [r7, #8]
 80147ac:	2b06      	cmp	r3, #6
 80147ae:	d010      	beq.n	80147d2 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 80147b0:	687b      	ldr	r3, [r7, #4]
 80147b2:	681b      	ldr	r3, [r3, #0]
 80147b4:	681a      	ldr	r2, [r3, #0]
 80147b6:	687b      	ldr	r3, [r7, #4]
 80147b8:	681b      	ldr	r3, [r3, #0]
 80147ba:	f042 0201 	orr.w	r2, r2, #1
 80147be:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80147c0:	e007      	b.n	80147d2 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80147c2:	687b      	ldr	r3, [r7, #4]
 80147c4:	681b      	ldr	r3, [r3, #0]
 80147c6:	681a      	ldr	r2, [r3, #0]
 80147c8:	687b      	ldr	r3, [r7, #4]
 80147ca:	681b      	ldr	r3, [r3, #0]
 80147cc:	f042 0201 	orr.w	r2, r2, #1
 80147d0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80147d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80147d4:	4618      	mov	r0, r3
 80147d6:	3710      	adds	r7, #16
 80147d8:	46bd      	mov	sp, r7
 80147da:	bd80      	pop	{r7, pc}
 80147dc:	40010000 	.word	0x40010000
 80147e0:	40000400 	.word	0x40000400
 80147e4:	40000800 	.word	0x40000800
 80147e8:	40000c00 	.word	0x40000c00
 80147ec:	40010400 	.word	0x40010400
 80147f0:	40014000 	.word	0x40014000
 80147f4:	40001800 	.word	0x40001800

080147f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80147f8:	b580      	push	{r7, lr}
 80147fa:	b082      	sub	sp, #8
 80147fc:	af00      	add	r7, sp, #0
 80147fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8014800:	687b      	ldr	r3, [r7, #4]
 8014802:	681b      	ldr	r3, [r3, #0]
 8014804:	691b      	ldr	r3, [r3, #16]
 8014806:	f003 0302 	and.w	r3, r3, #2
 801480a:	2b02      	cmp	r3, #2
 801480c:	d122      	bne.n	8014854 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801480e:	687b      	ldr	r3, [r7, #4]
 8014810:	681b      	ldr	r3, [r3, #0]
 8014812:	68db      	ldr	r3, [r3, #12]
 8014814:	f003 0302 	and.w	r3, r3, #2
 8014818:	2b02      	cmp	r3, #2
 801481a:	d11b      	bne.n	8014854 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801481c:	687b      	ldr	r3, [r7, #4]
 801481e:	681b      	ldr	r3, [r3, #0]
 8014820:	f06f 0202 	mvn.w	r2, #2
 8014824:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8014826:	687b      	ldr	r3, [r7, #4]
 8014828:	2201      	movs	r2, #1
 801482a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801482c:	687b      	ldr	r3, [r7, #4]
 801482e:	681b      	ldr	r3, [r3, #0]
 8014830:	699b      	ldr	r3, [r3, #24]
 8014832:	f003 0303 	and.w	r3, r3, #3
 8014836:	2b00      	cmp	r3, #0
 8014838:	d003      	beq.n	8014842 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801483a:	6878      	ldr	r0, [r7, #4]
 801483c:	f7ed fab4 	bl	8001da8 <HAL_TIM_IC_CaptureCallback>
 8014840:	e005      	b.n	801484e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8014842:	6878      	ldr	r0, [r7, #4]
 8014844:	f000 fb8c 	bl	8014f60 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8014848:	6878      	ldr	r0, [r7, #4]
 801484a:	f000 fb93 	bl	8014f74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801484e:	687b      	ldr	r3, [r7, #4]
 8014850:	2200      	movs	r2, #0
 8014852:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8014854:	687b      	ldr	r3, [r7, #4]
 8014856:	681b      	ldr	r3, [r3, #0]
 8014858:	691b      	ldr	r3, [r3, #16]
 801485a:	f003 0304 	and.w	r3, r3, #4
 801485e:	2b04      	cmp	r3, #4
 8014860:	d122      	bne.n	80148a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8014862:	687b      	ldr	r3, [r7, #4]
 8014864:	681b      	ldr	r3, [r3, #0]
 8014866:	68db      	ldr	r3, [r3, #12]
 8014868:	f003 0304 	and.w	r3, r3, #4
 801486c:	2b04      	cmp	r3, #4
 801486e:	d11b      	bne.n	80148a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8014870:	687b      	ldr	r3, [r7, #4]
 8014872:	681b      	ldr	r3, [r3, #0]
 8014874:	f06f 0204 	mvn.w	r2, #4
 8014878:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801487a:	687b      	ldr	r3, [r7, #4]
 801487c:	2202      	movs	r2, #2
 801487e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8014880:	687b      	ldr	r3, [r7, #4]
 8014882:	681b      	ldr	r3, [r3, #0]
 8014884:	699b      	ldr	r3, [r3, #24]
 8014886:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801488a:	2b00      	cmp	r3, #0
 801488c:	d003      	beq.n	8014896 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801488e:	6878      	ldr	r0, [r7, #4]
 8014890:	f7ed fa8a 	bl	8001da8 <HAL_TIM_IC_CaptureCallback>
 8014894:	e005      	b.n	80148a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8014896:	6878      	ldr	r0, [r7, #4]
 8014898:	f000 fb62 	bl	8014f60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801489c:	6878      	ldr	r0, [r7, #4]
 801489e:	f000 fb69 	bl	8014f74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80148a2:	687b      	ldr	r3, [r7, #4]
 80148a4:	2200      	movs	r2, #0
 80148a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80148a8:	687b      	ldr	r3, [r7, #4]
 80148aa:	681b      	ldr	r3, [r3, #0]
 80148ac:	691b      	ldr	r3, [r3, #16]
 80148ae:	f003 0308 	and.w	r3, r3, #8
 80148b2:	2b08      	cmp	r3, #8
 80148b4:	d122      	bne.n	80148fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80148b6:	687b      	ldr	r3, [r7, #4]
 80148b8:	681b      	ldr	r3, [r3, #0]
 80148ba:	68db      	ldr	r3, [r3, #12]
 80148bc:	f003 0308 	and.w	r3, r3, #8
 80148c0:	2b08      	cmp	r3, #8
 80148c2:	d11b      	bne.n	80148fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80148c4:	687b      	ldr	r3, [r7, #4]
 80148c6:	681b      	ldr	r3, [r3, #0]
 80148c8:	f06f 0208 	mvn.w	r2, #8
 80148cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80148ce:	687b      	ldr	r3, [r7, #4]
 80148d0:	2204      	movs	r2, #4
 80148d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80148d4:	687b      	ldr	r3, [r7, #4]
 80148d6:	681b      	ldr	r3, [r3, #0]
 80148d8:	69db      	ldr	r3, [r3, #28]
 80148da:	f003 0303 	and.w	r3, r3, #3
 80148de:	2b00      	cmp	r3, #0
 80148e0:	d003      	beq.n	80148ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80148e2:	6878      	ldr	r0, [r7, #4]
 80148e4:	f7ed fa60 	bl	8001da8 <HAL_TIM_IC_CaptureCallback>
 80148e8:	e005      	b.n	80148f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80148ea:	6878      	ldr	r0, [r7, #4]
 80148ec:	f000 fb38 	bl	8014f60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80148f0:	6878      	ldr	r0, [r7, #4]
 80148f2:	f000 fb3f 	bl	8014f74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80148f6:	687b      	ldr	r3, [r7, #4]
 80148f8:	2200      	movs	r2, #0
 80148fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80148fc:	687b      	ldr	r3, [r7, #4]
 80148fe:	681b      	ldr	r3, [r3, #0]
 8014900:	691b      	ldr	r3, [r3, #16]
 8014902:	f003 0310 	and.w	r3, r3, #16
 8014906:	2b10      	cmp	r3, #16
 8014908:	d122      	bne.n	8014950 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801490a:	687b      	ldr	r3, [r7, #4]
 801490c:	681b      	ldr	r3, [r3, #0]
 801490e:	68db      	ldr	r3, [r3, #12]
 8014910:	f003 0310 	and.w	r3, r3, #16
 8014914:	2b10      	cmp	r3, #16
 8014916:	d11b      	bne.n	8014950 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8014918:	687b      	ldr	r3, [r7, #4]
 801491a:	681b      	ldr	r3, [r3, #0]
 801491c:	f06f 0210 	mvn.w	r2, #16
 8014920:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8014922:	687b      	ldr	r3, [r7, #4]
 8014924:	2208      	movs	r2, #8
 8014926:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8014928:	687b      	ldr	r3, [r7, #4]
 801492a:	681b      	ldr	r3, [r3, #0]
 801492c:	69db      	ldr	r3, [r3, #28]
 801492e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8014932:	2b00      	cmp	r3, #0
 8014934:	d003      	beq.n	801493e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8014936:	6878      	ldr	r0, [r7, #4]
 8014938:	f7ed fa36 	bl	8001da8 <HAL_TIM_IC_CaptureCallback>
 801493c:	e005      	b.n	801494a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801493e:	6878      	ldr	r0, [r7, #4]
 8014940:	f000 fb0e 	bl	8014f60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8014944:	6878      	ldr	r0, [r7, #4]
 8014946:	f000 fb15 	bl	8014f74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801494a:	687b      	ldr	r3, [r7, #4]
 801494c:	2200      	movs	r2, #0
 801494e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8014950:	687b      	ldr	r3, [r7, #4]
 8014952:	681b      	ldr	r3, [r3, #0]
 8014954:	691b      	ldr	r3, [r3, #16]
 8014956:	f003 0301 	and.w	r3, r3, #1
 801495a:	2b01      	cmp	r3, #1
 801495c:	d10e      	bne.n	801497c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801495e:	687b      	ldr	r3, [r7, #4]
 8014960:	681b      	ldr	r3, [r3, #0]
 8014962:	68db      	ldr	r3, [r3, #12]
 8014964:	f003 0301 	and.w	r3, r3, #1
 8014968:	2b01      	cmp	r3, #1
 801496a:	d107      	bne.n	801497c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801496c:	687b      	ldr	r3, [r7, #4]
 801496e:	681b      	ldr	r3, [r3, #0]
 8014970:	f06f 0201 	mvn.w	r2, #1
 8014974:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8014976:	6878      	ldr	r0, [r7, #4]
 8014978:	f7ef f86e 	bl	8003a58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801497c:	687b      	ldr	r3, [r7, #4]
 801497e:	681b      	ldr	r3, [r3, #0]
 8014980:	691b      	ldr	r3, [r3, #16]
 8014982:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014986:	2b80      	cmp	r3, #128	; 0x80
 8014988:	d10e      	bne.n	80149a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801498a:	687b      	ldr	r3, [r7, #4]
 801498c:	681b      	ldr	r3, [r3, #0]
 801498e:	68db      	ldr	r3, [r3, #12]
 8014990:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014994:	2b80      	cmp	r3, #128	; 0x80
 8014996:	d107      	bne.n	80149a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8014998:	687b      	ldr	r3, [r7, #4]
 801499a:	681b      	ldr	r3, [r3, #0]
 801499c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80149a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80149a2:	6878      	ldr	r0, [r7, #4]
 80149a4:	f001 f89e 	bl	8015ae4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80149a8:	687b      	ldr	r3, [r7, #4]
 80149aa:	681b      	ldr	r3, [r3, #0]
 80149ac:	691b      	ldr	r3, [r3, #16]
 80149ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80149b2:	2b40      	cmp	r3, #64	; 0x40
 80149b4:	d10e      	bne.n	80149d4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80149b6:	687b      	ldr	r3, [r7, #4]
 80149b8:	681b      	ldr	r3, [r3, #0]
 80149ba:	68db      	ldr	r3, [r3, #12]
 80149bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80149c0:	2b40      	cmp	r3, #64	; 0x40
 80149c2:	d107      	bne.n	80149d4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80149c4:	687b      	ldr	r3, [r7, #4]
 80149c6:	681b      	ldr	r3, [r3, #0]
 80149c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80149cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80149ce:	6878      	ldr	r0, [r7, #4]
 80149d0:	f000 fada 	bl	8014f88 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80149d4:	687b      	ldr	r3, [r7, #4]
 80149d6:	681b      	ldr	r3, [r3, #0]
 80149d8:	691b      	ldr	r3, [r3, #16]
 80149da:	f003 0320 	and.w	r3, r3, #32
 80149de:	2b20      	cmp	r3, #32
 80149e0:	d10e      	bne.n	8014a00 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80149e2:	687b      	ldr	r3, [r7, #4]
 80149e4:	681b      	ldr	r3, [r3, #0]
 80149e6:	68db      	ldr	r3, [r3, #12]
 80149e8:	f003 0320 	and.w	r3, r3, #32
 80149ec:	2b20      	cmp	r3, #32
 80149ee:	d107      	bne.n	8014a00 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80149f0:	687b      	ldr	r3, [r7, #4]
 80149f2:	681b      	ldr	r3, [r3, #0]
 80149f4:	f06f 0220 	mvn.w	r2, #32
 80149f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80149fa:	6878      	ldr	r0, [r7, #4]
 80149fc:	f001 f868 	bl	8015ad0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8014a00:	bf00      	nop
 8014a02:	3708      	adds	r7, #8
 8014a04:	46bd      	mov	sp, r7
 8014a06:	bd80      	pop	{r7, pc}

08014a08 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8014a08:	b580      	push	{r7, lr}
 8014a0a:	b086      	sub	sp, #24
 8014a0c:	af00      	add	r7, sp, #0
 8014a0e:	60f8      	str	r0, [r7, #12]
 8014a10:	60b9      	str	r1, [r7, #8]
 8014a12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8014a14:	2300      	movs	r3, #0
 8014a16:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8014a18:	68fb      	ldr	r3, [r7, #12]
 8014a1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8014a1e:	2b01      	cmp	r3, #1
 8014a20:	d101      	bne.n	8014a26 <HAL_TIM_IC_ConfigChannel+0x1e>
 8014a22:	2302      	movs	r3, #2
 8014a24:	e088      	b.n	8014b38 <HAL_TIM_IC_ConfigChannel+0x130>
 8014a26:	68fb      	ldr	r3, [r7, #12]
 8014a28:	2201      	movs	r2, #1
 8014a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8014a2e:	687b      	ldr	r3, [r7, #4]
 8014a30:	2b00      	cmp	r3, #0
 8014a32:	d11b      	bne.n	8014a6c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8014a34:	68fb      	ldr	r3, [r7, #12]
 8014a36:	6818      	ldr	r0, [r3, #0]
 8014a38:	68bb      	ldr	r3, [r7, #8]
 8014a3a:	6819      	ldr	r1, [r3, #0]
 8014a3c:	68bb      	ldr	r3, [r7, #8]
 8014a3e:	685a      	ldr	r2, [r3, #4]
 8014a40:	68bb      	ldr	r3, [r7, #8]
 8014a42:	68db      	ldr	r3, [r3, #12]
 8014a44:	f000 fd8c 	bl	8015560 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8014a48:	68fb      	ldr	r3, [r7, #12]
 8014a4a:	681b      	ldr	r3, [r3, #0]
 8014a4c:	699a      	ldr	r2, [r3, #24]
 8014a4e:	68fb      	ldr	r3, [r7, #12]
 8014a50:	681b      	ldr	r3, [r3, #0]
 8014a52:	f022 020c 	bic.w	r2, r2, #12
 8014a56:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8014a58:	68fb      	ldr	r3, [r7, #12]
 8014a5a:	681b      	ldr	r3, [r3, #0]
 8014a5c:	6999      	ldr	r1, [r3, #24]
 8014a5e:	68bb      	ldr	r3, [r7, #8]
 8014a60:	689a      	ldr	r2, [r3, #8]
 8014a62:	68fb      	ldr	r3, [r7, #12]
 8014a64:	681b      	ldr	r3, [r3, #0]
 8014a66:	430a      	orrs	r2, r1
 8014a68:	619a      	str	r2, [r3, #24]
 8014a6a:	e060      	b.n	8014b2e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8014a6c:	687b      	ldr	r3, [r7, #4]
 8014a6e:	2b04      	cmp	r3, #4
 8014a70:	d11c      	bne.n	8014aac <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8014a72:	68fb      	ldr	r3, [r7, #12]
 8014a74:	6818      	ldr	r0, [r3, #0]
 8014a76:	68bb      	ldr	r3, [r7, #8]
 8014a78:	6819      	ldr	r1, [r3, #0]
 8014a7a:	68bb      	ldr	r3, [r7, #8]
 8014a7c:	685a      	ldr	r2, [r3, #4]
 8014a7e:	68bb      	ldr	r3, [r7, #8]
 8014a80:	68db      	ldr	r3, [r3, #12]
 8014a82:	f000 fe10 	bl	80156a6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8014a86:	68fb      	ldr	r3, [r7, #12]
 8014a88:	681b      	ldr	r3, [r3, #0]
 8014a8a:	699a      	ldr	r2, [r3, #24]
 8014a8c:	68fb      	ldr	r3, [r7, #12]
 8014a8e:	681b      	ldr	r3, [r3, #0]
 8014a90:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8014a94:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8014a96:	68fb      	ldr	r3, [r7, #12]
 8014a98:	681b      	ldr	r3, [r3, #0]
 8014a9a:	6999      	ldr	r1, [r3, #24]
 8014a9c:	68bb      	ldr	r3, [r7, #8]
 8014a9e:	689b      	ldr	r3, [r3, #8]
 8014aa0:	021a      	lsls	r2, r3, #8
 8014aa2:	68fb      	ldr	r3, [r7, #12]
 8014aa4:	681b      	ldr	r3, [r3, #0]
 8014aa6:	430a      	orrs	r2, r1
 8014aa8:	619a      	str	r2, [r3, #24]
 8014aaa:	e040      	b.n	8014b2e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8014aac:	687b      	ldr	r3, [r7, #4]
 8014aae:	2b08      	cmp	r3, #8
 8014ab0:	d11b      	bne.n	8014aea <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8014ab2:	68fb      	ldr	r3, [r7, #12]
 8014ab4:	6818      	ldr	r0, [r3, #0]
 8014ab6:	68bb      	ldr	r3, [r7, #8]
 8014ab8:	6819      	ldr	r1, [r3, #0]
 8014aba:	68bb      	ldr	r3, [r7, #8]
 8014abc:	685a      	ldr	r2, [r3, #4]
 8014abe:	68bb      	ldr	r3, [r7, #8]
 8014ac0:	68db      	ldr	r3, [r3, #12]
 8014ac2:	f000 fe5d 	bl	8015780 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8014ac6:	68fb      	ldr	r3, [r7, #12]
 8014ac8:	681b      	ldr	r3, [r3, #0]
 8014aca:	69da      	ldr	r2, [r3, #28]
 8014acc:	68fb      	ldr	r3, [r7, #12]
 8014ace:	681b      	ldr	r3, [r3, #0]
 8014ad0:	f022 020c 	bic.w	r2, r2, #12
 8014ad4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8014ad6:	68fb      	ldr	r3, [r7, #12]
 8014ad8:	681b      	ldr	r3, [r3, #0]
 8014ada:	69d9      	ldr	r1, [r3, #28]
 8014adc:	68bb      	ldr	r3, [r7, #8]
 8014ade:	689a      	ldr	r2, [r3, #8]
 8014ae0:	68fb      	ldr	r3, [r7, #12]
 8014ae2:	681b      	ldr	r3, [r3, #0]
 8014ae4:	430a      	orrs	r2, r1
 8014ae6:	61da      	str	r2, [r3, #28]
 8014ae8:	e021      	b.n	8014b2e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8014aea:	687b      	ldr	r3, [r7, #4]
 8014aec:	2b0c      	cmp	r3, #12
 8014aee:	d11c      	bne.n	8014b2a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8014af0:	68fb      	ldr	r3, [r7, #12]
 8014af2:	6818      	ldr	r0, [r3, #0]
 8014af4:	68bb      	ldr	r3, [r7, #8]
 8014af6:	6819      	ldr	r1, [r3, #0]
 8014af8:	68bb      	ldr	r3, [r7, #8]
 8014afa:	685a      	ldr	r2, [r3, #4]
 8014afc:	68bb      	ldr	r3, [r7, #8]
 8014afe:	68db      	ldr	r3, [r3, #12]
 8014b00:	f000 fe7a 	bl	80157f8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8014b04:	68fb      	ldr	r3, [r7, #12]
 8014b06:	681b      	ldr	r3, [r3, #0]
 8014b08:	69da      	ldr	r2, [r3, #28]
 8014b0a:	68fb      	ldr	r3, [r7, #12]
 8014b0c:	681b      	ldr	r3, [r3, #0]
 8014b0e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8014b12:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8014b14:	68fb      	ldr	r3, [r7, #12]
 8014b16:	681b      	ldr	r3, [r3, #0]
 8014b18:	69d9      	ldr	r1, [r3, #28]
 8014b1a:	68bb      	ldr	r3, [r7, #8]
 8014b1c:	689b      	ldr	r3, [r3, #8]
 8014b1e:	021a      	lsls	r2, r3, #8
 8014b20:	68fb      	ldr	r3, [r7, #12]
 8014b22:	681b      	ldr	r3, [r3, #0]
 8014b24:	430a      	orrs	r2, r1
 8014b26:	61da      	str	r2, [r3, #28]
 8014b28:	e001      	b.n	8014b2e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8014b2a:	2301      	movs	r3, #1
 8014b2c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8014b2e:	68fb      	ldr	r3, [r7, #12]
 8014b30:	2200      	movs	r2, #0
 8014b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8014b36:	7dfb      	ldrb	r3, [r7, #23]
}
 8014b38:	4618      	mov	r0, r3
 8014b3a:	3718      	adds	r7, #24
 8014b3c:	46bd      	mov	sp, r7
 8014b3e:	bd80      	pop	{r7, pc}

08014b40 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8014b40:	b580      	push	{r7, lr}
 8014b42:	b086      	sub	sp, #24
 8014b44:	af00      	add	r7, sp, #0
 8014b46:	60f8      	str	r0, [r7, #12]
 8014b48:	60b9      	str	r1, [r7, #8]
 8014b4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8014b4c:	2300      	movs	r3, #0
 8014b4e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8014b50:	68fb      	ldr	r3, [r7, #12]
 8014b52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8014b56:	2b01      	cmp	r3, #1
 8014b58:	d101      	bne.n	8014b5e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8014b5a:	2302      	movs	r3, #2
 8014b5c:	e0ae      	b.n	8014cbc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8014b5e:	68fb      	ldr	r3, [r7, #12]
 8014b60:	2201      	movs	r2, #1
 8014b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8014b66:	687b      	ldr	r3, [r7, #4]
 8014b68:	2b0c      	cmp	r3, #12
 8014b6a:	f200 809f 	bhi.w	8014cac <HAL_TIM_PWM_ConfigChannel+0x16c>
 8014b6e:	a201      	add	r2, pc, #4	; (adr r2, 8014b74 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8014b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014b74:	08014ba9 	.word	0x08014ba9
 8014b78:	08014cad 	.word	0x08014cad
 8014b7c:	08014cad 	.word	0x08014cad
 8014b80:	08014cad 	.word	0x08014cad
 8014b84:	08014be9 	.word	0x08014be9
 8014b88:	08014cad 	.word	0x08014cad
 8014b8c:	08014cad 	.word	0x08014cad
 8014b90:	08014cad 	.word	0x08014cad
 8014b94:	08014c2b 	.word	0x08014c2b
 8014b98:	08014cad 	.word	0x08014cad
 8014b9c:	08014cad 	.word	0x08014cad
 8014ba0:	08014cad 	.word	0x08014cad
 8014ba4:	08014c6b 	.word	0x08014c6b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8014ba8:	68fb      	ldr	r3, [r7, #12]
 8014baa:	681b      	ldr	r3, [r3, #0]
 8014bac:	68b9      	ldr	r1, [r7, #8]
 8014bae:	4618      	mov	r0, r3
 8014bb0:	f000 fa94 	bl	80150dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8014bb4:	68fb      	ldr	r3, [r7, #12]
 8014bb6:	681b      	ldr	r3, [r3, #0]
 8014bb8:	699a      	ldr	r2, [r3, #24]
 8014bba:	68fb      	ldr	r3, [r7, #12]
 8014bbc:	681b      	ldr	r3, [r3, #0]
 8014bbe:	f042 0208 	orr.w	r2, r2, #8
 8014bc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8014bc4:	68fb      	ldr	r3, [r7, #12]
 8014bc6:	681b      	ldr	r3, [r3, #0]
 8014bc8:	699a      	ldr	r2, [r3, #24]
 8014bca:	68fb      	ldr	r3, [r7, #12]
 8014bcc:	681b      	ldr	r3, [r3, #0]
 8014bce:	f022 0204 	bic.w	r2, r2, #4
 8014bd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8014bd4:	68fb      	ldr	r3, [r7, #12]
 8014bd6:	681b      	ldr	r3, [r3, #0]
 8014bd8:	6999      	ldr	r1, [r3, #24]
 8014bda:	68bb      	ldr	r3, [r7, #8]
 8014bdc:	691a      	ldr	r2, [r3, #16]
 8014bde:	68fb      	ldr	r3, [r7, #12]
 8014be0:	681b      	ldr	r3, [r3, #0]
 8014be2:	430a      	orrs	r2, r1
 8014be4:	619a      	str	r2, [r3, #24]
      break;
 8014be6:	e064      	b.n	8014cb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8014be8:	68fb      	ldr	r3, [r7, #12]
 8014bea:	681b      	ldr	r3, [r3, #0]
 8014bec:	68b9      	ldr	r1, [r7, #8]
 8014bee:	4618      	mov	r0, r3
 8014bf0:	f000 fae4 	bl	80151bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8014bf4:	68fb      	ldr	r3, [r7, #12]
 8014bf6:	681b      	ldr	r3, [r3, #0]
 8014bf8:	699a      	ldr	r2, [r3, #24]
 8014bfa:	68fb      	ldr	r3, [r7, #12]
 8014bfc:	681b      	ldr	r3, [r3, #0]
 8014bfe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8014c02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8014c04:	68fb      	ldr	r3, [r7, #12]
 8014c06:	681b      	ldr	r3, [r3, #0]
 8014c08:	699a      	ldr	r2, [r3, #24]
 8014c0a:	68fb      	ldr	r3, [r7, #12]
 8014c0c:	681b      	ldr	r3, [r3, #0]
 8014c0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8014c12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8014c14:	68fb      	ldr	r3, [r7, #12]
 8014c16:	681b      	ldr	r3, [r3, #0]
 8014c18:	6999      	ldr	r1, [r3, #24]
 8014c1a:	68bb      	ldr	r3, [r7, #8]
 8014c1c:	691b      	ldr	r3, [r3, #16]
 8014c1e:	021a      	lsls	r2, r3, #8
 8014c20:	68fb      	ldr	r3, [r7, #12]
 8014c22:	681b      	ldr	r3, [r3, #0]
 8014c24:	430a      	orrs	r2, r1
 8014c26:	619a      	str	r2, [r3, #24]
      break;
 8014c28:	e043      	b.n	8014cb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8014c2a:	68fb      	ldr	r3, [r7, #12]
 8014c2c:	681b      	ldr	r3, [r3, #0]
 8014c2e:	68b9      	ldr	r1, [r7, #8]
 8014c30:	4618      	mov	r0, r3
 8014c32:	f000 fb39 	bl	80152a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8014c36:	68fb      	ldr	r3, [r7, #12]
 8014c38:	681b      	ldr	r3, [r3, #0]
 8014c3a:	69da      	ldr	r2, [r3, #28]
 8014c3c:	68fb      	ldr	r3, [r7, #12]
 8014c3e:	681b      	ldr	r3, [r3, #0]
 8014c40:	f042 0208 	orr.w	r2, r2, #8
 8014c44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8014c46:	68fb      	ldr	r3, [r7, #12]
 8014c48:	681b      	ldr	r3, [r3, #0]
 8014c4a:	69da      	ldr	r2, [r3, #28]
 8014c4c:	68fb      	ldr	r3, [r7, #12]
 8014c4e:	681b      	ldr	r3, [r3, #0]
 8014c50:	f022 0204 	bic.w	r2, r2, #4
 8014c54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8014c56:	68fb      	ldr	r3, [r7, #12]
 8014c58:	681b      	ldr	r3, [r3, #0]
 8014c5a:	69d9      	ldr	r1, [r3, #28]
 8014c5c:	68bb      	ldr	r3, [r7, #8]
 8014c5e:	691a      	ldr	r2, [r3, #16]
 8014c60:	68fb      	ldr	r3, [r7, #12]
 8014c62:	681b      	ldr	r3, [r3, #0]
 8014c64:	430a      	orrs	r2, r1
 8014c66:	61da      	str	r2, [r3, #28]
      break;
 8014c68:	e023      	b.n	8014cb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8014c6a:	68fb      	ldr	r3, [r7, #12]
 8014c6c:	681b      	ldr	r3, [r3, #0]
 8014c6e:	68b9      	ldr	r1, [r7, #8]
 8014c70:	4618      	mov	r0, r3
 8014c72:	f000 fb8d 	bl	8015390 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8014c76:	68fb      	ldr	r3, [r7, #12]
 8014c78:	681b      	ldr	r3, [r3, #0]
 8014c7a:	69da      	ldr	r2, [r3, #28]
 8014c7c:	68fb      	ldr	r3, [r7, #12]
 8014c7e:	681b      	ldr	r3, [r3, #0]
 8014c80:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8014c84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8014c86:	68fb      	ldr	r3, [r7, #12]
 8014c88:	681b      	ldr	r3, [r3, #0]
 8014c8a:	69da      	ldr	r2, [r3, #28]
 8014c8c:	68fb      	ldr	r3, [r7, #12]
 8014c8e:	681b      	ldr	r3, [r3, #0]
 8014c90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8014c94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8014c96:	68fb      	ldr	r3, [r7, #12]
 8014c98:	681b      	ldr	r3, [r3, #0]
 8014c9a:	69d9      	ldr	r1, [r3, #28]
 8014c9c:	68bb      	ldr	r3, [r7, #8]
 8014c9e:	691b      	ldr	r3, [r3, #16]
 8014ca0:	021a      	lsls	r2, r3, #8
 8014ca2:	68fb      	ldr	r3, [r7, #12]
 8014ca4:	681b      	ldr	r3, [r3, #0]
 8014ca6:	430a      	orrs	r2, r1
 8014ca8:	61da      	str	r2, [r3, #28]
      break;
 8014caa:	e002      	b.n	8014cb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8014cac:	2301      	movs	r3, #1
 8014cae:	75fb      	strb	r3, [r7, #23]
      break;
 8014cb0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8014cb2:	68fb      	ldr	r3, [r7, #12]
 8014cb4:	2200      	movs	r2, #0
 8014cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8014cba:	7dfb      	ldrb	r3, [r7, #23]
}
 8014cbc:	4618      	mov	r0, r3
 8014cbe:	3718      	adds	r7, #24
 8014cc0:	46bd      	mov	sp, r7
 8014cc2:	bd80      	pop	{r7, pc}

08014cc4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8014cc4:	b580      	push	{r7, lr}
 8014cc6:	b084      	sub	sp, #16
 8014cc8:	af00      	add	r7, sp, #0
 8014cca:	6078      	str	r0, [r7, #4]
 8014ccc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8014cce:	2300      	movs	r3, #0
 8014cd0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8014cd2:	687b      	ldr	r3, [r7, #4]
 8014cd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8014cd8:	2b01      	cmp	r3, #1
 8014cda:	d101      	bne.n	8014ce0 <HAL_TIM_ConfigClockSource+0x1c>
 8014cdc:	2302      	movs	r3, #2
 8014cde:	e0b4      	b.n	8014e4a <HAL_TIM_ConfigClockSource+0x186>
 8014ce0:	687b      	ldr	r3, [r7, #4]
 8014ce2:	2201      	movs	r2, #1
 8014ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8014ce8:	687b      	ldr	r3, [r7, #4]
 8014cea:	2202      	movs	r2, #2
 8014cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8014cf0:	687b      	ldr	r3, [r7, #4]
 8014cf2:	681b      	ldr	r3, [r3, #0]
 8014cf4:	689b      	ldr	r3, [r3, #8]
 8014cf6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8014cf8:	68bb      	ldr	r3, [r7, #8]
 8014cfa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8014cfe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8014d00:	68bb      	ldr	r3, [r7, #8]
 8014d02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8014d06:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8014d08:	687b      	ldr	r3, [r7, #4]
 8014d0a:	681b      	ldr	r3, [r3, #0]
 8014d0c:	68ba      	ldr	r2, [r7, #8]
 8014d0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8014d10:	683b      	ldr	r3, [r7, #0]
 8014d12:	681b      	ldr	r3, [r3, #0]
 8014d14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8014d18:	d03e      	beq.n	8014d98 <HAL_TIM_ConfigClockSource+0xd4>
 8014d1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8014d1e:	f200 8087 	bhi.w	8014e30 <HAL_TIM_ConfigClockSource+0x16c>
 8014d22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014d26:	f000 8086 	beq.w	8014e36 <HAL_TIM_ConfigClockSource+0x172>
 8014d2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014d2e:	d87f      	bhi.n	8014e30 <HAL_TIM_ConfigClockSource+0x16c>
 8014d30:	2b70      	cmp	r3, #112	; 0x70
 8014d32:	d01a      	beq.n	8014d6a <HAL_TIM_ConfigClockSource+0xa6>
 8014d34:	2b70      	cmp	r3, #112	; 0x70
 8014d36:	d87b      	bhi.n	8014e30 <HAL_TIM_ConfigClockSource+0x16c>
 8014d38:	2b60      	cmp	r3, #96	; 0x60
 8014d3a:	d050      	beq.n	8014dde <HAL_TIM_ConfigClockSource+0x11a>
 8014d3c:	2b60      	cmp	r3, #96	; 0x60
 8014d3e:	d877      	bhi.n	8014e30 <HAL_TIM_ConfigClockSource+0x16c>
 8014d40:	2b50      	cmp	r3, #80	; 0x50
 8014d42:	d03c      	beq.n	8014dbe <HAL_TIM_ConfigClockSource+0xfa>
 8014d44:	2b50      	cmp	r3, #80	; 0x50
 8014d46:	d873      	bhi.n	8014e30 <HAL_TIM_ConfigClockSource+0x16c>
 8014d48:	2b40      	cmp	r3, #64	; 0x40
 8014d4a:	d058      	beq.n	8014dfe <HAL_TIM_ConfigClockSource+0x13a>
 8014d4c:	2b40      	cmp	r3, #64	; 0x40
 8014d4e:	d86f      	bhi.n	8014e30 <HAL_TIM_ConfigClockSource+0x16c>
 8014d50:	2b30      	cmp	r3, #48	; 0x30
 8014d52:	d064      	beq.n	8014e1e <HAL_TIM_ConfigClockSource+0x15a>
 8014d54:	2b30      	cmp	r3, #48	; 0x30
 8014d56:	d86b      	bhi.n	8014e30 <HAL_TIM_ConfigClockSource+0x16c>
 8014d58:	2b20      	cmp	r3, #32
 8014d5a:	d060      	beq.n	8014e1e <HAL_TIM_ConfigClockSource+0x15a>
 8014d5c:	2b20      	cmp	r3, #32
 8014d5e:	d867      	bhi.n	8014e30 <HAL_TIM_ConfigClockSource+0x16c>
 8014d60:	2b00      	cmp	r3, #0
 8014d62:	d05c      	beq.n	8014e1e <HAL_TIM_ConfigClockSource+0x15a>
 8014d64:	2b10      	cmp	r3, #16
 8014d66:	d05a      	beq.n	8014e1e <HAL_TIM_ConfigClockSource+0x15a>
 8014d68:	e062      	b.n	8014e30 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8014d6a:	687b      	ldr	r3, [r7, #4]
 8014d6c:	6818      	ldr	r0, [r3, #0]
 8014d6e:	683b      	ldr	r3, [r7, #0]
 8014d70:	6899      	ldr	r1, [r3, #8]
 8014d72:	683b      	ldr	r3, [r7, #0]
 8014d74:	685a      	ldr	r2, [r3, #4]
 8014d76:	683b      	ldr	r3, [r7, #0]
 8014d78:	68db      	ldr	r3, [r3, #12]
 8014d7a:	f000 fd95 	bl	80158a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8014d7e:	687b      	ldr	r3, [r7, #4]
 8014d80:	681b      	ldr	r3, [r3, #0]
 8014d82:	689b      	ldr	r3, [r3, #8]
 8014d84:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8014d86:	68bb      	ldr	r3, [r7, #8]
 8014d88:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8014d8c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8014d8e:	687b      	ldr	r3, [r7, #4]
 8014d90:	681b      	ldr	r3, [r3, #0]
 8014d92:	68ba      	ldr	r2, [r7, #8]
 8014d94:	609a      	str	r2, [r3, #8]
      break;
 8014d96:	e04f      	b.n	8014e38 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8014d98:	687b      	ldr	r3, [r7, #4]
 8014d9a:	6818      	ldr	r0, [r3, #0]
 8014d9c:	683b      	ldr	r3, [r7, #0]
 8014d9e:	6899      	ldr	r1, [r3, #8]
 8014da0:	683b      	ldr	r3, [r7, #0]
 8014da2:	685a      	ldr	r2, [r3, #4]
 8014da4:	683b      	ldr	r3, [r7, #0]
 8014da6:	68db      	ldr	r3, [r3, #12]
 8014da8:	f000 fd7e 	bl	80158a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8014dac:	687b      	ldr	r3, [r7, #4]
 8014dae:	681b      	ldr	r3, [r3, #0]
 8014db0:	689a      	ldr	r2, [r3, #8]
 8014db2:	687b      	ldr	r3, [r7, #4]
 8014db4:	681b      	ldr	r3, [r3, #0]
 8014db6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8014dba:	609a      	str	r2, [r3, #8]
      break;
 8014dbc:	e03c      	b.n	8014e38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8014dbe:	687b      	ldr	r3, [r7, #4]
 8014dc0:	6818      	ldr	r0, [r3, #0]
 8014dc2:	683b      	ldr	r3, [r7, #0]
 8014dc4:	6859      	ldr	r1, [r3, #4]
 8014dc6:	683b      	ldr	r3, [r7, #0]
 8014dc8:	68db      	ldr	r3, [r3, #12]
 8014dca:	461a      	mov	r2, r3
 8014dcc:	f000 fc3c 	bl	8015648 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8014dd0:	687b      	ldr	r3, [r7, #4]
 8014dd2:	681b      	ldr	r3, [r3, #0]
 8014dd4:	2150      	movs	r1, #80	; 0x50
 8014dd6:	4618      	mov	r0, r3
 8014dd8:	f000 fd4b 	bl	8015872 <TIM_ITRx_SetConfig>
      break;
 8014ddc:	e02c      	b.n	8014e38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8014dde:	687b      	ldr	r3, [r7, #4]
 8014de0:	6818      	ldr	r0, [r3, #0]
 8014de2:	683b      	ldr	r3, [r7, #0]
 8014de4:	6859      	ldr	r1, [r3, #4]
 8014de6:	683b      	ldr	r3, [r7, #0]
 8014de8:	68db      	ldr	r3, [r3, #12]
 8014dea:	461a      	mov	r2, r3
 8014dec:	f000 fc98 	bl	8015720 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8014df0:	687b      	ldr	r3, [r7, #4]
 8014df2:	681b      	ldr	r3, [r3, #0]
 8014df4:	2160      	movs	r1, #96	; 0x60
 8014df6:	4618      	mov	r0, r3
 8014df8:	f000 fd3b 	bl	8015872 <TIM_ITRx_SetConfig>
      break;
 8014dfc:	e01c      	b.n	8014e38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8014dfe:	687b      	ldr	r3, [r7, #4]
 8014e00:	6818      	ldr	r0, [r3, #0]
 8014e02:	683b      	ldr	r3, [r7, #0]
 8014e04:	6859      	ldr	r1, [r3, #4]
 8014e06:	683b      	ldr	r3, [r7, #0]
 8014e08:	68db      	ldr	r3, [r3, #12]
 8014e0a:	461a      	mov	r2, r3
 8014e0c:	f000 fc1c 	bl	8015648 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8014e10:	687b      	ldr	r3, [r7, #4]
 8014e12:	681b      	ldr	r3, [r3, #0]
 8014e14:	2140      	movs	r1, #64	; 0x40
 8014e16:	4618      	mov	r0, r3
 8014e18:	f000 fd2b 	bl	8015872 <TIM_ITRx_SetConfig>
      break;
 8014e1c:	e00c      	b.n	8014e38 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8014e1e:	687b      	ldr	r3, [r7, #4]
 8014e20:	681a      	ldr	r2, [r3, #0]
 8014e22:	683b      	ldr	r3, [r7, #0]
 8014e24:	681b      	ldr	r3, [r3, #0]
 8014e26:	4619      	mov	r1, r3
 8014e28:	4610      	mov	r0, r2
 8014e2a:	f000 fd22 	bl	8015872 <TIM_ITRx_SetConfig>
      break;
 8014e2e:	e003      	b.n	8014e38 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8014e30:	2301      	movs	r3, #1
 8014e32:	73fb      	strb	r3, [r7, #15]
      break;
 8014e34:	e000      	b.n	8014e38 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8014e36:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8014e38:	687b      	ldr	r3, [r7, #4]
 8014e3a:	2201      	movs	r2, #1
 8014e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8014e40:	687b      	ldr	r3, [r7, #4]
 8014e42:	2200      	movs	r2, #0
 8014e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8014e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8014e4a:	4618      	mov	r0, r3
 8014e4c:	3710      	adds	r7, #16
 8014e4e:	46bd      	mov	sp, r7
 8014e50:	bd80      	pop	{r7, pc}

08014e52 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8014e52:	b580      	push	{r7, lr}
 8014e54:	b082      	sub	sp, #8
 8014e56:	af00      	add	r7, sp, #0
 8014e58:	6078      	str	r0, [r7, #4]
 8014e5a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8014e5c:	687b      	ldr	r3, [r7, #4]
 8014e5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8014e62:	2b01      	cmp	r3, #1
 8014e64:	d101      	bne.n	8014e6a <HAL_TIM_SlaveConfigSynchro+0x18>
 8014e66:	2302      	movs	r3, #2
 8014e68:	e031      	b.n	8014ece <HAL_TIM_SlaveConfigSynchro+0x7c>
 8014e6a:	687b      	ldr	r3, [r7, #4]
 8014e6c:	2201      	movs	r2, #1
 8014e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8014e72:	687b      	ldr	r3, [r7, #4]
 8014e74:	2202      	movs	r2, #2
 8014e76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8014e7a:	6839      	ldr	r1, [r7, #0]
 8014e7c:	6878      	ldr	r0, [r7, #4]
 8014e7e:	f000 fadd 	bl	801543c <TIM_SlaveTimer_SetConfig>
 8014e82:	4603      	mov	r3, r0
 8014e84:	2b00      	cmp	r3, #0
 8014e86:	d009      	beq.n	8014e9c <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8014e88:	687b      	ldr	r3, [r7, #4]
 8014e8a:	2201      	movs	r2, #1
 8014e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8014e90:	687b      	ldr	r3, [r7, #4]
 8014e92:	2200      	movs	r2, #0
 8014e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8014e98:	2301      	movs	r3, #1
 8014e9a:	e018      	b.n	8014ece <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8014e9c:	687b      	ldr	r3, [r7, #4]
 8014e9e:	681b      	ldr	r3, [r3, #0]
 8014ea0:	68da      	ldr	r2, [r3, #12]
 8014ea2:	687b      	ldr	r3, [r7, #4]
 8014ea4:	681b      	ldr	r3, [r3, #0]
 8014ea6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8014eaa:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8014eac:	687b      	ldr	r3, [r7, #4]
 8014eae:	681b      	ldr	r3, [r3, #0]
 8014eb0:	68da      	ldr	r2, [r3, #12]
 8014eb2:	687b      	ldr	r3, [r7, #4]
 8014eb4:	681b      	ldr	r3, [r3, #0]
 8014eb6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8014eba:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8014ebc:	687b      	ldr	r3, [r7, #4]
 8014ebe:	2201      	movs	r2, #1
 8014ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8014ec4:	687b      	ldr	r3, [r7, #4]
 8014ec6:	2200      	movs	r2, #0
 8014ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8014ecc:	2300      	movs	r3, #0
}
 8014ece:	4618      	mov	r0, r3
 8014ed0:	3708      	adds	r7, #8
 8014ed2:	46bd      	mov	sp, r7
 8014ed4:	bd80      	pop	{r7, pc}
	...

08014ed8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8014ed8:	b480      	push	{r7}
 8014eda:	b085      	sub	sp, #20
 8014edc:	af00      	add	r7, sp, #0
 8014ede:	6078      	str	r0, [r7, #4]
 8014ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8014ee2:	2300      	movs	r3, #0
 8014ee4:	60fb      	str	r3, [r7, #12]
 8014ee6:	683b      	ldr	r3, [r7, #0]
 8014ee8:	2b0c      	cmp	r3, #12
 8014eea:	d831      	bhi.n	8014f50 <HAL_TIM_ReadCapturedValue+0x78>
 8014eec:	a201      	add	r2, pc, #4	; (adr r2, 8014ef4 <HAL_TIM_ReadCapturedValue+0x1c>)
 8014eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014ef2:	bf00      	nop
 8014ef4:	08014f29 	.word	0x08014f29
 8014ef8:	08014f51 	.word	0x08014f51
 8014efc:	08014f51 	.word	0x08014f51
 8014f00:	08014f51 	.word	0x08014f51
 8014f04:	08014f33 	.word	0x08014f33
 8014f08:	08014f51 	.word	0x08014f51
 8014f0c:	08014f51 	.word	0x08014f51
 8014f10:	08014f51 	.word	0x08014f51
 8014f14:	08014f3d 	.word	0x08014f3d
 8014f18:	08014f51 	.word	0x08014f51
 8014f1c:	08014f51 	.word	0x08014f51
 8014f20:	08014f51 	.word	0x08014f51
 8014f24:	08014f47 	.word	0x08014f47
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8014f28:	687b      	ldr	r3, [r7, #4]
 8014f2a:	681b      	ldr	r3, [r3, #0]
 8014f2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014f2e:	60fb      	str	r3, [r7, #12]

      break;
 8014f30:	e00f      	b.n	8014f52 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8014f32:	687b      	ldr	r3, [r7, #4]
 8014f34:	681b      	ldr	r3, [r3, #0]
 8014f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014f38:	60fb      	str	r3, [r7, #12]

      break;
 8014f3a:	e00a      	b.n	8014f52 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8014f3c:	687b      	ldr	r3, [r7, #4]
 8014f3e:	681b      	ldr	r3, [r3, #0]
 8014f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014f42:	60fb      	str	r3, [r7, #12]

      break;
 8014f44:	e005      	b.n	8014f52 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8014f46:	687b      	ldr	r3, [r7, #4]
 8014f48:	681b      	ldr	r3, [r3, #0]
 8014f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014f4c:	60fb      	str	r3, [r7, #12]

      break;
 8014f4e:	e000      	b.n	8014f52 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8014f50:	bf00      	nop
  }

  return tmpreg;
 8014f52:	68fb      	ldr	r3, [r7, #12]
}
 8014f54:	4618      	mov	r0, r3
 8014f56:	3714      	adds	r7, #20
 8014f58:	46bd      	mov	sp, r7
 8014f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f5e:	4770      	bx	lr

08014f60 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8014f60:	b480      	push	{r7}
 8014f62:	b083      	sub	sp, #12
 8014f64:	af00      	add	r7, sp, #0
 8014f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8014f68:	bf00      	nop
 8014f6a:	370c      	adds	r7, #12
 8014f6c:	46bd      	mov	sp, r7
 8014f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f72:	4770      	bx	lr

08014f74 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8014f74:	b480      	push	{r7}
 8014f76:	b083      	sub	sp, #12
 8014f78:	af00      	add	r7, sp, #0
 8014f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8014f7c:	bf00      	nop
 8014f7e:	370c      	adds	r7, #12
 8014f80:	46bd      	mov	sp, r7
 8014f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f86:	4770      	bx	lr

08014f88 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8014f88:	b480      	push	{r7}
 8014f8a:	b083      	sub	sp, #12
 8014f8c:	af00      	add	r7, sp, #0
 8014f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8014f90:	bf00      	nop
 8014f92:	370c      	adds	r7, #12
 8014f94:	46bd      	mov	sp, r7
 8014f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f9a:	4770      	bx	lr

08014f9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8014f9c:	b480      	push	{r7}
 8014f9e:	b085      	sub	sp, #20
 8014fa0:	af00      	add	r7, sp, #0
 8014fa2:	6078      	str	r0, [r7, #4]
 8014fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8014fa6:	687b      	ldr	r3, [r7, #4]
 8014fa8:	681b      	ldr	r3, [r3, #0]
 8014faa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8014fac:	687b      	ldr	r3, [r7, #4]
 8014fae:	4a40      	ldr	r2, [pc, #256]	; (80150b0 <TIM_Base_SetConfig+0x114>)
 8014fb0:	4293      	cmp	r3, r2
 8014fb2:	d013      	beq.n	8014fdc <TIM_Base_SetConfig+0x40>
 8014fb4:	687b      	ldr	r3, [r7, #4]
 8014fb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014fba:	d00f      	beq.n	8014fdc <TIM_Base_SetConfig+0x40>
 8014fbc:	687b      	ldr	r3, [r7, #4]
 8014fbe:	4a3d      	ldr	r2, [pc, #244]	; (80150b4 <TIM_Base_SetConfig+0x118>)
 8014fc0:	4293      	cmp	r3, r2
 8014fc2:	d00b      	beq.n	8014fdc <TIM_Base_SetConfig+0x40>
 8014fc4:	687b      	ldr	r3, [r7, #4]
 8014fc6:	4a3c      	ldr	r2, [pc, #240]	; (80150b8 <TIM_Base_SetConfig+0x11c>)
 8014fc8:	4293      	cmp	r3, r2
 8014fca:	d007      	beq.n	8014fdc <TIM_Base_SetConfig+0x40>
 8014fcc:	687b      	ldr	r3, [r7, #4]
 8014fce:	4a3b      	ldr	r2, [pc, #236]	; (80150bc <TIM_Base_SetConfig+0x120>)
 8014fd0:	4293      	cmp	r3, r2
 8014fd2:	d003      	beq.n	8014fdc <TIM_Base_SetConfig+0x40>
 8014fd4:	687b      	ldr	r3, [r7, #4]
 8014fd6:	4a3a      	ldr	r2, [pc, #232]	; (80150c0 <TIM_Base_SetConfig+0x124>)
 8014fd8:	4293      	cmp	r3, r2
 8014fda:	d108      	bne.n	8014fee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8014fdc:	68fb      	ldr	r3, [r7, #12]
 8014fde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014fe2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8014fe4:	683b      	ldr	r3, [r7, #0]
 8014fe6:	685b      	ldr	r3, [r3, #4]
 8014fe8:	68fa      	ldr	r2, [r7, #12]
 8014fea:	4313      	orrs	r3, r2
 8014fec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8014fee:	687b      	ldr	r3, [r7, #4]
 8014ff0:	4a2f      	ldr	r2, [pc, #188]	; (80150b0 <TIM_Base_SetConfig+0x114>)
 8014ff2:	4293      	cmp	r3, r2
 8014ff4:	d02b      	beq.n	801504e <TIM_Base_SetConfig+0xb2>
 8014ff6:	687b      	ldr	r3, [r7, #4]
 8014ff8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014ffc:	d027      	beq.n	801504e <TIM_Base_SetConfig+0xb2>
 8014ffe:	687b      	ldr	r3, [r7, #4]
 8015000:	4a2c      	ldr	r2, [pc, #176]	; (80150b4 <TIM_Base_SetConfig+0x118>)
 8015002:	4293      	cmp	r3, r2
 8015004:	d023      	beq.n	801504e <TIM_Base_SetConfig+0xb2>
 8015006:	687b      	ldr	r3, [r7, #4]
 8015008:	4a2b      	ldr	r2, [pc, #172]	; (80150b8 <TIM_Base_SetConfig+0x11c>)
 801500a:	4293      	cmp	r3, r2
 801500c:	d01f      	beq.n	801504e <TIM_Base_SetConfig+0xb2>
 801500e:	687b      	ldr	r3, [r7, #4]
 8015010:	4a2a      	ldr	r2, [pc, #168]	; (80150bc <TIM_Base_SetConfig+0x120>)
 8015012:	4293      	cmp	r3, r2
 8015014:	d01b      	beq.n	801504e <TIM_Base_SetConfig+0xb2>
 8015016:	687b      	ldr	r3, [r7, #4]
 8015018:	4a29      	ldr	r2, [pc, #164]	; (80150c0 <TIM_Base_SetConfig+0x124>)
 801501a:	4293      	cmp	r3, r2
 801501c:	d017      	beq.n	801504e <TIM_Base_SetConfig+0xb2>
 801501e:	687b      	ldr	r3, [r7, #4]
 8015020:	4a28      	ldr	r2, [pc, #160]	; (80150c4 <TIM_Base_SetConfig+0x128>)
 8015022:	4293      	cmp	r3, r2
 8015024:	d013      	beq.n	801504e <TIM_Base_SetConfig+0xb2>
 8015026:	687b      	ldr	r3, [r7, #4]
 8015028:	4a27      	ldr	r2, [pc, #156]	; (80150c8 <TIM_Base_SetConfig+0x12c>)
 801502a:	4293      	cmp	r3, r2
 801502c:	d00f      	beq.n	801504e <TIM_Base_SetConfig+0xb2>
 801502e:	687b      	ldr	r3, [r7, #4]
 8015030:	4a26      	ldr	r2, [pc, #152]	; (80150cc <TIM_Base_SetConfig+0x130>)
 8015032:	4293      	cmp	r3, r2
 8015034:	d00b      	beq.n	801504e <TIM_Base_SetConfig+0xb2>
 8015036:	687b      	ldr	r3, [r7, #4]
 8015038:	4a25      	ldr	r2, [pc, #148]	; (80150d0 <TIM_Base_SetConfig+0x134>)
 801503a:	4293      	cmp	r3, r2
 801503c:	d007      	beq.n	801504e <TIM_Base_SetConfig+0xb2>
 801503e:	687b      	ldr	r3, [r7, #4]
 8015040:	4a24      	ldr	r2, [pc, #144]	; (80150d4 <TIM_Base_SetConfig+0x138>)
 8015042:	4293      	cmp	r3, r2
 8015044:	d003      	beq.n	801504e <TIM_Base_SetConfig+0xb2>
 8015046:	687b      	ldr	r3, [r7, #4]
 8015048:	4a23      	ldr	r2, [pc, #140]	; (80150d8 <TIM_Base_SetConfig+0x13c>)
 801504a:	4293      	cmp	r3, r2
 801504c:	d108      	bne.n	8015060 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801504e:	68fb      	ldr	r3, [r7, #12]
 8015050:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8015054:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8015056:	683b      	ldr	r3, [r7, #0]
 8015058:	68db      	ldr	r3, [r3, #12]
 801505a:	68fa      	ldr	r2, [r7, #12]
 801505c:	4313      	orrs	r3, r2
 801505e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8015060:	68fb      	ldr	r3, [r7, #12]
 8015062:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8015066:	683b      	ldr	r3, [r7, #0]
 8015068:	695b      	ldr	r3, [r3, #20]
 801506a:	4313      	orrs	r3, r2
 801506c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801506e:	687b      	ldr	r3, [r7, #4]
 8015070:	68fa      	ldr	r2, [r7, #12]
 8015072:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8015074:	683b      	ldr	r3, [r7, #0]
 8015076:	689a      	ldr	r2, [r3, #8]
 8015078:	687b      	ldr	r3, [r7, #4]
 801507a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801507c:	683b      	ldr	r3, [r7, #0]
 801507e:	681a      	ldr	r2, [r3, #0]
 8015080:	687b      	ldr	r3, [r7, #4]
 8015082:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8015084:	687b      	ldr	r3, [r7, #4]
 8015086:	4a0a      	ldr	r2, [pc, #40]	; (80150b0 <TIM_Base_SetConfig+0x114>)
 8015088:	4293      	cmp	r3, r2
 801508a:	d003      	beq.n	8015094 <TIM_Base_SetConfig+0xf8>
 801508c:	687b      	ldr	r3, [r7, #4]
 801508e:	4a0c      	ldr	r2, [pc, #48]	; (80150c0 <TIM_Base_SetConfig+0x124>)
 8015090:	4293      	cmp	r3, r2
 8015092:	d103      	bne.n	801509c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8015094:	683b      	ldr	r3, [r7, #0]
 8015096:	691a      	ldr	r2, [r3, #16]
 8015098:	687b      	ldr	r3, [r7, #4]
 801509a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801509c:	687b      	ldr	r3, [r7, #4]
 801509e:	2201      	movs	r2, #1
 80150a0:	615a      	str	r2, [r3, #20]
}
 80150a2:	bf00      	nop
 80150a4:	3714      	adds	r7, #20
 80150a6:	46bd      	mov	sp, r7
 80150a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150ac:	4770      	bx	lr
 80150ae:	bf00      	nop
 80150b0:	40010000 	.word	0x40010000
 80150b4:	40000400 	.word	0x40000400
 80150b8:	40000800 	.word	0x40000800
 80150bc:	40000c00 	.word	0x40000c00
 80150c0:	40010400 	.word	0x40010400
 80150c4:	40014000 	.word	0x40014000
 80150c8:	40014400 	.word	0x40014400
 80150cc:	40014800 	.word	0x40014800
 80150d0:	40001800 	.word	0x40001800
 80150d4:	40001c00 	.word	0x40001c00
 80150d8:	40002000 	.word	0x40002000

080150dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80150dc:	b480      	push	{r7}
 80150de:	b087      	sub	sp, #28
 80150e0:	af00      	add	r7, sp, #0
 80150e2:	6078      	str	r0, [r7, #4]
 80150e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80150e6:	687b      	ldr	r3, [r7, #4]
 80150e8:	6a1b      	ldr	r3, [r3, #32]
 80150ea:	f023 0201 	bic.w	r2, r3, #1
 80150ee:	687b      	ldr	r3, [r7, #4]
 80150f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80150f2:	687b      	ldr	r3, [r7, #4]
 80150f4:	6a1b      	ldr	r3, [r3, #32]
 80150f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80150f8:	687b      	ldr	r3, [r7, #4]
 80150fa:	685b      	ldr	r3, [r3, #4]
 80150fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80150fe:	687b      	ldr	r3, [r7, #4]
 8015100:	699b      	ldr	r3, [r3, #24]
 8015102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8015104:	68fb      	ldr	r3, [r7, #12]
 8015106:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801510a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801510c:	68fb      	ldr	r3, [r7, #12]
 801510e:	f023 0303 	bic.w	r3, r3, #3
 8015112:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8015114:	683b      	ldr	r3, [r7, #0]
 8015116:	681b      	ldr	r3, [r3, #0]
 8015118:	68fa      	ldr	r2, [r7, #12]
 801511a:	4313      	orrs	r3, r2
 801511c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801511e:	697b      	ldr	r3, [r7, #20]
 8015120:	f023 0302 	bic.w	r3, r3, #2
 8015124:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8015126:	683b      	ldr	r3, [r7, #0]
 8015128:	689b      	ldr	r3, [r3, #8]
 801512a:	697a      	ldr	r2, [r7, #20]
 801512c:	4313      	orrs	r3, r2
 801512e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8015130:	687b      	ldr	r3, [r7, #4]
 8015132:	4a20      	ldr	r2, [pc, #128]	; (80151b4 <TIM_OC1_SetConfig+0xd8>)
 8015134:	4293      	cmp	r3, r2
 8015136:	d003      	beq.n	8015140 <TIM_OC1_SetConfig+0x64>
 8015138:	687b      	ldr	r3, [r7, #4]
 801513a:	4a1f      	ldr	r2, [pc, #124]	; (80151b8 <TIM_OC1_SetConfig+0xdc>)
 801513c:	4293      	cmp	r3, r2
 801513e:	d10c      	bne.n	801515a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8015140:	697b      	ldr	r3, [r7, #20]
 8015142:	f023 0308 	bic.w	r3, r3, #8
 8015146:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8015148:	683b      	ldr	r3, [r7, #0]
 801514a:	68db      	ldr	r3, [r3, #12]
 801514c:	697a      	ldr	r2, [r7, #20]
 801514e:	4313      	orrs	r3, r2
 8015150:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8015152:	697b      	ldr	r3, [r7, #20]
 8015154:	f023 0304 	bic.w	r3, r3, #4
 8015158:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801515a:	687b      	ldr	r3, [r7, #4]
 801515c:	4a15      	ldr	r2, [pc, #84]	; (80151b4 <TIM_OC1_SetConfig+0xd8>)
 801515e:	4293      	cmp	r3, r2
 8015160:	d003      	beq.n	801516a <TIM_OC1_SetConfig+0x8e>
 8015162:	687b      	ldr	r3, [r7, #4]
 8015164:	4a14      	ldr	r2, [pc, #80]	; (80151b8 <TIM_OC1_SetConfig+0xdc>)
 8015166:	4293      	cmp	r3, r2
 8015168:	d111      	bne.n	801518e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801516a:	693b      	ldr	r3, [r7, #16]
 801516c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8015170:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8015172:	693b      	ldr	r3, [r7, #16]
 8015174:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8015178:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801517a:	683b      	ldr	r3, [r7, #0]
 801517c:	695b      	ldr	r3, [r3, #20]
 801517e:	693a      	ldr	r2, [r7, #16]
 8015180:	4313      	orrs	r3, r2
 8015182:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8015184:	683b      	ldr	r3, [r7, #0]
 8015186:	699b      	ldr	r3, [r3, #24]
 8015188:	693a      	ldr	r2, [r7, #16]
 801518a:	4313      	orrs	r3, r2
 801518c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801518e:	687b      	ldr	r3, [r7, #4]
 8015190:	693a      	ldr	r2, [r7, #16]
 8015192:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8015194:	687b      	ldr	r3, [r7, #4]
 8015196:	68fa      	ldr	r2, [r7, #12]
 8015198:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801519a:	683b      	ldr	r3, [r7, #0]
 801519c:	685a      	ldr	r2, [r3, #4]
 801519e:	687b      	ldr	r3, [r7, #4]
 80151a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80151a2:	687b      	ldr	r3, [r7, #4]
 80151a4:	697a      	ldr	r2, [r7, #20]
 80151a6:	621a      	str	r2, [r3, #32]
}
 80151a8:	bf00      	nop
 80151aa:	371c      	adds	r7, #28
 80151ac:	46bd      	mov	sp, r7
 80151ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151b2:	4770      	bx	lr
 80151b4:	40010000 	.word	0x40010000
 80151b8:	40010400 	.word	0x40010400

080151bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80151bc:	b480      	push	{r7}
 80151be:	b087      	sub	sp, #28
 80151c0:	af00      	add	r7, sp, #0
 80151c2:	6078      	str	r0, [r7, #4]
 80151c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80151c6:	687b      	ldr	r3, [r7, #4]
 80151c8:	6a1b      	ldr	r3, [r3, #32]
 80151ca:	f023 0210 	bic.w	r2, r3, #16
 80151ce:	687b      	ldr	r3, [r7, #4]
 80151d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80151d2:	687b      	ldr	r3, [r7, #4]
 80151d4:	6a1b      	ldr	r3, [r3, #32]
 80151d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80151d8:	687b      	ldr	r3, [r7, #4]
 80151da:	685b      	ldr	r3, [r3, #4]
 80151dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80151de:	687b      	ldr	r3, [r7, #4]
 80151e0:	699b      	ldr	r3, [r3, #24]
 80151e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80151e4:	68fb      	ldr	r3, [r7, #12]
 80151e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80151ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80151ec:	68fb      	ldr	r3, [r7, #12]
 80151ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80151f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80151f4:	683b      	ldr	r3, [r7, #0]
 80151f6:	681b      	ldr	r3, [r3, #0]
 80151f8:	021b      	lsls	r3, r3, #8
 80151fa:	68fa      	ldr	r2, [r7, #12]
 80151fc:	4313      	orrs	r3, r2
 80151fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8015200:	697b      	ldr	r3, [r7, #20]
 8015202:	f023 0320 	bic.w	r3, r3, #32
 8015206:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8015208:	683b      	ldr	r3, [r7, #0]
 801520a:	689b      	ldr	r3, [r3, #8]
 801520c:	011b      	lsls	r3, r3, #4
 801520e:	697a      	ldr	r2, [r7, #20]
 8015210:	4313      	orrs	r3, r2
 8015212:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8015214:	687b      	ldr	r3, [r7, #4]
 8015216:	4a22      	ldr	r2, [pc, #136]	; (80152a0 <TIM_OC2_SetConfig+0xe4>)
 8015218:	4293      	cmp	r3, r2
 801521a:	d003      	beq.n	8015224 <TIM_OC2_SetConfig+0x68>
 801521c:	687b      	ldr	r3, [r7, #4]
 801521e:	4a21      	ldr	r2, [pc, #132]	; (80152a4 <TIM_OC2_SetConfig+0xe8>)
 8015220:	4293      	cmp	r3, r2
 8015222:	d10d      	bne.n	8015240 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8015224:	697b      	ldr	r3, [r7, #20]
 8015226:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801522a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 801522c:	683b      	ldr	r3, [r7, #0]
 801522e:	68db      	ldr	r3, [r3, #12]
 8015230:	011b      	lsls	r3, r3, #4
 8015232:	697a      	ldr	r2, [r7, #20]
 8015234:	4313      	orrs	r3, r2
 8015236:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8015238:	697b      	ldr	r3, [r7, #20]
 801523a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801523e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8015240:	687b      	ldr	r3, [r7, #4]
 8015242:	4a17      	ldr	r2, [pc, #92]	; (80152a0 <TIM_OC2_SetConfig+0xe4>)
 8015244:	4293      	cmp	r3, r2
 8015246:	d003      	beq.n	8015250 <TIM_OC2_SetConfig+0x94>
 8015248:	687b      	ldr	r3, [r7, #4]
 801524a:	4a16      	ldr	r2, [pc, #88]	; (80152a4 <TIM_OC2_SetConfig+0xe8>)
 801524c:	4293      	cmp	r3, r2
 801524e:	d113      	bne.n	8015278 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8015250:	693b      	ldr	r3, [r7, #16]
 8015252:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8015256:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8015258:	693b      	ldr	r3, [r7, #16]
 801525a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801525e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8015260:	683b      	ldr	r3, [r7, #0]
 8015262:	695b      	ldr	r3, [r3, #20]
 8015264:	009b      	lsls	r3, r3, #2
 8015266:	693a      	ldr	r2, [r7, #16]
 8015268:	4313      	orrs	r3, r2
 801526a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801526c:	683b      	ldr	r3, [r7, #0]
 801526e:	699b      	ldr	r3, [r3, #24]
 8015270:	009b      	lsls	r3, r3, #2
 8015272:	693a      	ldr	r2, [r7, #16]
 8015274:	4313      	orrs	r3, r2
 8015276:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8015278:	687b      	ldr	r3, [r7, #4]
 801527a:	693a      	ldr	r2, [r7, #16]
 801527c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801527e:	687b      	ldr	r3, [r7, #4]
 8015280:	68fa      	ldr	r2, [r7, #12]
 8015282:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8015284:	683b      	ldr	r3, [r7, #0]
 8015286:	685a      	ldr	r2, [r3, #4]
 8015288:	687b      	ldr	r3, [r7, #4]
 801528a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801528c:	687b      	ldr	r3, [r7, #4]
 801528e:	697a      	ldr	r2, [r7, #20]
 8015290:	621a      	str	r2, [r3, #32]
}
 8015292:	bf00      	nop
 8015294:	371c      	adds	r7, #28
 8015296:	46bd      	mov	sp, r7
 8015298:	f85d 7b04 	ldr.w	r7, [sp], #4
 801529c:	4770      	bx	lr
 801529e:	bf00      	nop
 80152a0:	40010000 	.word	0x40010000
 80152a4:	40010400 	.word	0x40010400

080152a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80152a8:	b480      	push	{r7}
 80152aa:	b087      	sub	sp, #28
 80152ac:	af00      	add	r7, sp, #0
 80152ae:	6078      	str	r0, [r7, #4]
 80152b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80152b2:	687b      	ldr	r3, [r7, #4]
 80152b4:	6a1b      	ldr	r3, [r3, #32]
 80152b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80152ba:	687b      	ldr	r3, [r7, #4]
 80152bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80152be:	687b      	ldr	r3, [r7, #4]
 80152c0:	6a1b      	ldr	r3, [r3, #32]
 80152c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80152c4:	687b      	ldr	r3, [r7, #4]
 80152c6:	685b      	ldr	r3, [r3, #4]
 80152c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80152ca:	687b      	ldr	r3, [r7, #4]
 80152cc:	69db      	ldr	r3, [r3, #28]
 80152ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80152d0:	68fb      	ldr	r3, [r7, #12]
 80152d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80152d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80152d8:	68fb      	ldr	r3, [r7, #12]
 80152da:	f023 0303 	bic.w	r3, r3, #3
 80152de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80152e0:	683b      	ldr	r3, [r7, #0]
 80152e2:	681b      	ldr	r3, [r3, #0]
 80152e4:	68fa      	ldr	r2, [r7, #12]
 80152e6:	4313      	orrs	r3, r2
 80152e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80152ea:	697b      	ldr	r3, [r7, #20]
 80152ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80152f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80152f2:	683b      	ldr	r3, [r7, #0]
 80152f4:	689b      	ldr	r3, [r3, #8]
 80152f6:	021b      	lsls	r3, r3, #8
 80152f8:	697a      	ldr	r2, [r7, #20]
 80152fa:	4313      	orrs	r3, r2
 80152fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80152fe:	687b      	ldr	r3, [r7, #4]
 8015300:	4a21      	ldr	r2, [pc, #132]	; (8015388 <TIM_OC3_SetConfig+0xe0>)
 8015302:	4293      	cmp	r3, r2
 8015304:	d003      	beq.n	801530e <TIM_OC3_SetConfig+0x66>
 8015306:	687b      	ldr	r3, [r7, #4]
 8015308:	4a20      	ldr	r2, [pc, #128]	; (801538c <TIM_OC3_SetConfig+0xe4>)
 801530a:	4293      	cmp	r3, r2
 801530c:	d10d      	bne.n	801532a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801530e:	697b      	ldr	r3, [r7, #20]
 8015310:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8015314:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8015316:	683b      	ldr	r3, [r7, #0]
 8015318:	68db      	ldr	r3, [r3, #12]
 801531a:	021b      	lsls	r3, r3, #8
 801531c:	697a      	ldr	r2, [r7, #20]
 801531e:	4313      	orrs	r3, r2
 8015320:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8015322:	697b      	ldr	r3, [r7, #20]
 8015324:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8015328:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801532a:	687b      	ldr	r3, [r7, #4]
 801532c:	4a16      	ldr	r2, [pc, #88]	; (8015388 <TIM_OC3_SetConfig+0xe0>)
 801532e:	4293      	cmp	r3, r2
 8015330:	d003      	beq.n	801533a <TIM_OC3_SetConfig+0x92>
 8015332:	687b      	ldr	r3, [r7, #4]
 8015334:	4a15      	ldr	r2, [pc, #84]	; (801538c <TIM_OC3_SetConfig+0xe4>)
 8015336:	4293      	cmp	r3, r2
 8015338:	d113      	bne.n	8015362 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801533a:	693b      	ldr	r3, [r7, #16]
 801533c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015340:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8015342:	693b      	ldr	r3, [r7, #16]
 8015344:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8015348:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801534a:	683b      	ldr	r3, [r7, #0]
 801534c:	695b      	ldr	r3, [r3, #20]
 801534e:	011b      	lsls	r3, r3, #4
 8015350:	693a      	ldr	r2, [r7, #16]
 8015352:	4313      	orrs	r3, r2
 8015354:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8015356:	683b      	ldr	r3, [r7, #0]
 8015358:	699b      	ldr	r3, [r3, #24]
 801535a:	011b      	lsls	r3, r3, #4
 801535c:	693a      	ldr	r2, [r7, #16]
 801535e:	4313      	orrs	r3, r2
 8015360:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8015362:	687b      	ldr	r3, [r7, #4]
 8015364:	693a      	ldr	r2, [r7, #16]
 8015366:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8015368:	687b      	ldr	r3, [r7, #4]
 801536a:	68fa      	ldr	r2, [r7, #12]
 801536c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801536e:	683b      	ldr	r3, [r7, #0]
 8015370:	685a      	ldr	r2, [r3, #4]
 8015372:	687b      	ldr	r3, [r7, #4]
 8015374:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8015376:	687b      	ldr	r3, [r7, #4]
 8015378:	697a      	ldr	r2, [r7, #20]
 801537a:	621a      	str	r2, [r3, #32]
}
 801537c:	bf00      	nop
 801537e:	371c      	adds	r7, #28
 8015380:	46bd      	mov	sp, r7
 8015382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015386:	4770      	bx	lr
 8015388:	40010000 	.word	0x40010000
 801538c:	40010400 	.word	0x40010400

08015390 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8015390:	b480      	push	{r7}
 8015392:	b087      	sub	sp, #28
 8015394:	af00      	add	r7, sp, #0
 8015396:	6078      	str	r0, [r7, #4]
 8015398:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801539a:	687b      	ldr	r3, [r7, #4]
 801539c:	6a1b      	ldr	r3, [r3, #32]
 801539e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80153a2:	687b      	ldr	r3, [r7, #4]
 80153a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80153a6:	687b      	ldr	r3, [r7, #4]
 80153a8:	6a1b      	ldr	r3, [r3, #32]
 80153aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80153ac:	687b      	ldr	r3, [r7, #4]
 80153ae:	685b      	ldr	r3, [r3, #4]
 80153b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80153b2:	687b      	ldr	r3, [r7, #4]
 80153b4:	69db      	ldr	r3, [r3, #28]
 80153b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80153b8:	68fb      	ldr	r3, [r7, #12]
 80153ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80153be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80153c0:	68fb      	ldr	r3, [r7, #12]
 80153c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80153c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80153c8:	683b      	ldr	r3, [r7, #0]
 80153ca:	681b      	ldr	r3, [r3, #0]
 80153cc:	021b      	lsls	r3, r3, #8
 80153ce:	68fa      	ldr	r2, [r7, #12]
 80153d0:	4313      	orrs	r3, r2
 80153d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80153d4:	693b      	ldr	r3, [r7, #16]
 80153d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80153da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80153dc:	683b      	ldr	r3, [r7, #0]
 80153de:	689b      	ldr	r3, [r3, #8]
 80153e0:	031b      	lsls	r3, r3, #12
 80153e2:	693a      	ldr	r2, [r7, #16]
 80153e4:	4313      	orrs	r3, r2
 80153e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80153e8:	687b      	ldr	r3, [r7, #4]
 80153ea:	4a12      	ldr	r2, [pc, #72]	; (8015434 <TIM_OC4_SetConfig+0xa4>)
 80153ec:	4293      	cmp	r3, r2
 80153ee:	d003      	beq.n	80153f8 <TIM_OC4_SetConfig+0x68>
 80153f0:	687b      	ldr	r3, [r7, #4]
 80153f2:	4a11      	ldr	r2, [pc, #68]	; (8015438 <TIM_OC4_SetConfig+0xa8>)
 80153f4:	4293      	cmp	r3, r2
 80153f6:	d109      	bne.n	801540c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80153f8:	697b      	ldr	r3, [r7, #20]
 80153fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80153fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8015400:	683b      	ldr	r3, [r7, #0]
 8015402:	695b      	ldr	r3, [r3, #20]
 8015404:	019b      	lsls	r3, r3, #6
 8015406:	697a      	ldr	r2, [r7, #20]
 8015408:	4313      	orrs	r3, r2
 801540a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801540c:	687b      	ldr	r3, [r7, #4]
 801540e:	697a      	ldr	r2, [r7, #20]
 8015410:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8015412:	687b      	ldr	r3, [r7, #4]
 8015414:	68fa      	ldr	r2, [r7, #12]
 8015416:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8015418:	683b      	ldr	r3, [r7, #0]
 801541a:	685a      	ldr	r2, [r3, #4]
 801541c:	687b      	ldr	r3, [r7, #4]
 801541e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8015420:	687b      	ldr	r3, [r7, #4]
 8015422:	693a      	ldr	r2, [r7, #16]
 8015424:	621a      	str	r2, [r3, #32]
}
 8015426:	bf00      	nop
 8015428:	371c      	adds	r7, #28
 801542a:	46bd      	mov	sp, r7
 801542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015430:	4770      	bx	lr
 8015432:	bf00      	nop
 8015434:	40010000 	.word	0x40010000
 8015438:	40010400 	.word	0x40010400

0801543c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 801543c:	b580      	push	{r7, lr}
 801543e:	b086      	sub	sp, #24
 8015440:	af00      	add	r7, sp, #0
 8015442:	6078      	str	r0, [r7, #4]
 8015444:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8015446:	2300      	movs	r3, #0
 8015448:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801544a:	687b      	ldr	r3, [r7, #4]
 801544c:	681b      	ldr	r3, [r3, #0]
 801544e:	689b      	ldr	r3, [r3, #8]
 8015450:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8015452:	693b      	ldr	r3, [r7, #16]
 8015454:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8015458:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 801545a:	683b      	ldr	r3, [r7, #0]
 801545c:	685b      	ldr	r3, [r3, #4]
 801545e:	693a      	ldr	r2, [r7, #16]
 8015460:	4313      	orrs	r3, r2
 8015462:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8015464:	693b      	ldr	r3, [r7, #16]
 8015466:	f023 0307 	bic.w	r3, r3, #7
 801546a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 801546c:	683b      	ldr	r3, [r7, #0]
 801546e:	681b      	ldr	r3, [r3, #0]
 8015470:	693a      	ldr	r2, [r7, #16]
 8015472:	4313      	orrs	r3, r2
 8015474:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8015476:	687b      	ldr	r3, [r7, #4]
 8015478:	681b      	ldr	r3, [r3, #0]
 801547a:	693a      	ldr	r2, [r7, #16]
 801547c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 801547e:	683b      	ldr	r3, [r7, #0]
 8015480:	685b      	ldr	r3, [r3, #4]
 8015482:	2b70      	cmp	r3, #112	; 0x70
 8015484:	d01a      	beq.n	80154bc <TIM_SlaveTimer_SetConfig+0x80>
 8015486:	2b70      	cmp	r3, #112	; 0x70
 8015488:	d860      	bhi.n	801554c <TIM_SlaveTimer_SetConfig+0x110>
 801548a:	2b60      	cmp	r3, #96	; 0x60
 801548c:	d054      	beq.n	8015538 <TIM_SlaveTimer_SetConfig+0xfc>
 801548e:	2b60      	cmp	r3, #96	; 0x60
 8015490:	d85c      	bhi.n	801554c <TIM_SlaveTimer_SetConfig+0x110>
 8015492:	2b50      	cmp	r3, #80	; 0x50
 8015494:	d046      	beq.n	8015524 <TIM_SlaveTimer_SetConfig+0xe8>
 8015496:	2b50      	cmp	r3, #80	; 0x50
 8015498:	d858      	bhi.n	801554c <TIM_SlaveTimer_SetConfig+0x110>
 801549a:	2b40      	cmp	r3, #64	; 0x40
 801549c:	d019      	beq.n	80154d2 <TIM_SlaveTimer_SetConfig+0x96>
 801549e:	2b40      	cmp	r3, #64	; 0x40
 80154a0:	d854      	bhi.n	801554c <TIM_SlaveTimer_SetConfig+0x110>
 80154a2:	2b30      	cmp	r3, #48	; 0x30
 80154a4:	d055      	beq.n	8015552 <TIM_SlaveTimer_SetConfig+0x116>
 80154a6:	2b30      	cmp	r3, #48	; 0x30
 80154a8:	d850      	bhi.n	801554c <TIM_SlaveTimer_SetConfig+0x110>
 80154aa:	2b20      	cmp	r3, #32
 80154ac:	d051      	beq.n	8015552 <TIM_SlaveTimer_SetConfig+0x116>
 80154ae:	2b20      	cmp	r3, #32
 80154b0:	d84c      	bhi.n	801554c <TIM_SlaveTimer_SetConfig+0x110>
 80154b2:	2b00      	cmp	r3, #0
 80154b4:	d04d      	beq.n	8015552 <TIM_SlaveTimer_SetConfig+0x116>
 80154b6:	2b10      	cmp	r3, #16
 80154b8:	d04b      	beq.n	8015552 <TIM_SlaveTimer_SetConfig+0x116>
 80154ba:	e047      	b.n	801554c <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80154bc:	687b      	ldr	r3, [r7, #4]
 80154be:	6818      	ldr	r0, [r3, #0]
 80154c0:	683b      	ldr	r3, [r7, #0]
 80154c2:	68d9      	ldr	r1, [r3, #12]
 80154c4:	683b      	ldr	r3, [r7, #0]
 80154c6:	689a      	ldr	r2, [r3, #8]
 80154c8:	683b      	ldr	r3, [r7, #0]
 80154ca:	691b      	ldr	r3, [r3, #16]
 80154cc:	f000 f9ec 	bl	80158a8 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 80154d0:	e040      	b.n	8015554 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80154d2:	683b      	ldr	r3, [r7, #0]
 80154d4:	681b      	ldr	r3, [r3, #0]
 80154d6:	2b05      	cmp	r3, #5
 80154d8:	d101      	bne.n	80154de <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80154da:	2301      	movs	r3, #1
 80154dc:	e03b      	b.n	8015556 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80154de:	687b      	ldr	r3, [r7, #4]
 80154e0:	681b      	ldr	r3, [r3, #0]
 80154e2:	6a1b      	ldr	r3, [r3, #32]
 80154e4:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80154e6:	687b      	ldr	r3, [r7, #4]
 80154e8:	681b      	ldr	r3, [r3, #0]
 80154ea:	6a1a      	ldr	r2, [r3, #32]
 80154ec:	687b      	ldr	r3, [r7, #4]
 80154ee:	681b      	ldr	r3, [r3, #0]
 80154f0:	f022 0201 	bic.w	r2, r2, #1
 80154f4:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80154f6:	687b      	ldr	r3, [r7, #4]
 80154f8:	681b      	ldr	r3, [r3, #0]
 80154fa:	699b      	ldr	r3, [r3, #24]
 80154fc:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80154fe:	68bb      	ldr	r3, [r7, #8]
 8015500:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8015504:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8015506:	683b      	ldr	r3, [r7, #0]
 8015508:	691b      	ldr	r3, [r3, #16]
 801550a:	011b      	lsls	r3, r3, #4
 801550c:	68ba      	ldr	r2, [r7, #8]
 801550e:	4313      	orrs	r3, r2
 8015510:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8015512:	687b      	ldr	r3, [r7, #4]
 8015514:	681b      	ldr	r3, [r3, #0]
 8015516:	68ba      	ldr	r2, [r7, #8]
 8015518:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 801551a:	687b      	ldr	r3, [r7, #4]
 801551c:	681b      	ldr	r3, [r3, #0]
 801551e:	68fa      	ldr	r2, [r7, #12]
 8015520:	621a      	str	r2, [r3, #32]
      break;
 8015522:	e017      	b.n	8015554 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8015524:	687b      	ldr	r3, [r7, #4]
 8015526:	6818      	ldr	r0, [r3, #0]
 8015528:	683b      	ldr	r3, [r7, #0]
 801552a:	6899      	ldr	r1, [r3, #8]
 801552c:	683b      	ldr	r3, [r7, #0]
 801552e:	691b      	ldr	r3, [r3, #16]
 8015530:	461a      	mov	r2, r3
 8015532:	f000 f889 	bl	8015648 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8015536:	e00d      	b.n	8015554 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8015538:	687b      	ldr	r3, [r7, #4]
 801553a:	6818      	ldr	r0, [r3, #0]
 801553c:	683b      	ldr	r3, [r7, #0]
 801553e:	6899      	ldr	r1, [r3, #8]
 8015540:	683b      	ldr	r3, [r7, #0]
 8015542:	691b      	ldr	r3, [r3, #16]
 8015544:	461a      	mov	r2, r3
 8015546:	f000 f8eb 	bl	8015720 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 801554a:	e003      	b.n	8015554 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 801554c:	2301      	movs	r3, #1
 801554e:	75fb      	strb	r3, [r7, #23]
      break;
 8015550:	e000      	b.n	8015554 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8015552:	bf00      	nop
  }

  return status;
 8015554:	7dfb      	ldrb	r3, [r7, #23]
}
 8015556:	4618      	mov	r0, r3
 8015558:	3718      	adds	r7, #24
 801555a:	46bd      	mov	sp, r7
 801555c:	bd80      	pop	{r7, pc}
	...

08015560 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8015560:	b480      	push	{r7}
 8015562:	b087      	sub	sp, #28
 8015564:	af00      	add	r7, sp, #0
 8015566:	60f8      	str	r0, [r7, #12]
 8015568:	60b9      	str	r1, [r7, #8]
 801556a:	607a      	str	r2, [r7, #4]
 801556c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801556e:	68fb      	ldr	r3, [r7, #12]
 8015570:	6a1b      	ldr	r3, [r3, #32]
 8015572:	f023 0201 	bic.w	r2, r3, #1
 8015576:	68fb      	ldr	r3, [r7, #12]
 8015578:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801557a:	68fb      	ldr	r3, [r7, #12]
 801557c:	699b      	ldr	r3, [r3, #24]
 801557e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8015580:	68fb      	ldr	r3, [r7, #12]
 8015582:	6a1b      	ldr	r3, [r3, #32]
 8015584:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8015586:	68fb      	ldr	r3, [r7, #12]
 8015588:	4a28      	ldr	r2, [pc, #160]	; (801562c <TIM_TI1_SetConfig+0xcc>)
 801558a:	4293      	cmp	r3, r2
 801558c:	d01b      	beq.n	80155c6 <TIM_TI1_SetConfig+0x66>
 801558e:	68fb      	ldr	r3, [r7, #12]
 8015590:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015594:	d017      	beq.n	80155c6 <TIM_TI1_SetConfig+0x66>
 8015596:	68fb      	ldr	r3, [r7, #12]
 8015598:	4a25      	ldr	r2, [pc, #148]	; (8015630 <TIM_TI1_SetConfig+0xd0>)
 801559a:	4293      	cmp	r3, r2
 801559c:	d013      	beq.n	80155c6 <TIM_TI1_SetConfig+0x66>
 801559e:	68fb      	ldr	r3, [r7, #12]
 80155a0:	4a24      	ldr	r2, [pc, #144]	; (8015634 <TIM_TI1_SetConfig+0xd4>)
 80155a2:	4293      	cmp	r3, r2
 80155a4:	d00f      	beq.n	80155c6 <TIM_TI1_SetConfig+0x66>
 80155a6:	68fb      	ldr	r3, [r7, #12]
 80155a8:	4a23      	ldr	r2, [pc, #140]	; (8015638 <TIM_TI1_SetConfig+0xd8>)
 80155aa:	4293      	cmp	r3, r2
 80155ac:	d00b      	beq.n	80155c6 <TIM_TI1_SetConfig+0x66>
 80155ae:	68fb      	ldr	r3, [r7, #12]
 80155b0:	4a22      	ldr	r2, [pc, #136]	; (801563c <TIM_TI1_SetConfig+0xdc>)
 80155b2:	4293      	cmp	r3, r2
 80155b4:	d007      	beq.n	80155c6 <TIM_TI1_SetConfig+0x66>
 80155b6:	68fb      	ldr	r3, [r7, #12]
 80155b8:	4a21      	ldr	r2, [pc, #132]	; (8015640 <TIM_TI1_SetConfig+0xe0>)
 80155ba:	4293      	cmp	r3, r2
 80155bc:	d003      	beq.n	80155c6 <TIM_TI1_SetConfig+0x66>
 80155be:	68fb      	ldr	r3, [r7, #12]
 80155c0:	4a20      	ldr	r2, [pc, #128]	; (8015644 <TIM_TI1_SetConfig+0xe4>)
 80155c2:	4293      	cmp	r3, r2
 80155c4:	d101      	bne.n	80155ca <TIM_TI1_SetConfig+0x6a>
 80155c6:	2301      	movs	r3, #1
 80155c8:	e000      	b.n	80155cc <TIM_TI1_SetConfig+0x6c>
 80155ca:	2300      	movs	r3, #0
 80155cc:	2b00      	cmp	r3, #0
 80155ce:	d008      	beq.n	80155e2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80155d0:	697b      	ldr	r3, [r7, #20]
 80155d2:	f023 0303 	bic.w	r3, r3, #3
 80155d6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80155d8:	697a      	ldr	r2, [r7, #20]
 80155da:	687b      	ldr	r3, [r7, #4]
 80155dc:	4313      	orrs	r3, r2
 80155de:	617b      	str	r3, [r7, #20]
 80155e0:	e003      	b.n	80155ea <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80155e2:	697b      	ldr	r3, [r7, #20]
 80155e4:	f043 0301 	orr.w	r3, r3, #1
 80155e8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80155ea:	697b      	ldr	r3, [r7, #20]
 80155ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80155f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80155f2:	683b      	ldr	r3, [r7, #0]
 80155f4:	011b      	lsls	r3, r3, #4
 80155f6:	b2db      	uxtb	r3, r3
 80155f8:	697a      	ldr	r2, [r7, #20]
 80155fa:	4313      	orrs	r3, r2
 80155fc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80155fe:	693b      	ldr	r3, [r7, #16]
 8015600:	f023 030a 	bic.w	r3, r3, #10
 8015604:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8015606:	68bb      	ldr	r3, [r7, #8]
 8015608:	f003 030a 	and.w	r3, r3, #10
 801560c:	693a      	ldr	r2, [r7, #16]
 801560e:	4313      	orrs	r3, r2
 8015610:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8015612:	68fb      	ldr	r3, [r7, #12]
 8015614:	697a      	ldr	r2, [r7, #20]
 8015616:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8015618:	68fb      	ldr	r3, [r7, #12]
 801561a:	693a      	ldr	r2, [r7, #16]
 801561c:	621a      	str	r2, [r3, #32]
}
 801561e:	bf00      	nop
 8015620:	371c      	adds	r7, #28
 8015622:	46bd      	mov	sp, r7
 8015624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015628:	4770      	bx	lr
 801562a:	bf00      	nop
 801562c:	40010000 	.word	0x40010000
 8015630:	40000400 	.word	0x40000400
 8015634:	40000800 	.word	0x40000800
 8015638:	40000c00 	.word	0x40000c00
 801563c:	40010400 	.word	0x40010400
 8015640:	40014000 	.word	0x40014000
 8015644:	40001800 	.word	0x40001800

08015648 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8015648:	b480      	push	{r7}
 801564a:	b087      	sub	sp, #28
 801564c:	af00      	add	r7, sp, #0
 801564e:	60f8      	str	r0, [r7, #12]
 8015650:	60b9      	str	r1, [r7, #8]
 8015652:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8015654:	68fb      	ldr	r3, [r7, #12]
 8015656:	6a1b      	ldr	r3, [r3, #32]
 8015658:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801565a:	68fb      	ldr	r3, [r7, #12]
 801565c:	6a1b      	ldr	r3, [r3, #32]
 801565e:	f023 0201 	bic.w	r2, r3, #1
 8015662:	68fb      	ldr	r3, [r7, #12]
 8015664:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8015666:	68fb      	ldr	r3, [r7, #12]
 8015668:	699b      	ldr	r3, [r3, #24]
 801566a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801566c:	693b      	ldr	r3, [r7, #16]
 801566e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8015672:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8015674:	687b      	ldr	r3, [r7, #4]
 8015676:	011b      	lsls	r3, r3, #4
 8015678:	693a      	ldr	r2, [r7, #16]
 801567a:	4313      	orrs	r3, r2
 801567c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801567e:	697b      	ldr	r3, [r7, #20]
 8015680:	f023 030a 	bic.w	r3, r3, #10
 8015684:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8015686:	697a      	ldr	r2, [r7, #20]
 8015688:	68bb      	ldr	r3, [r7, #8]
 801568a:	4313      	orrs	r3, r2
 801568c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801568e:	68fb      	ldr	r3, [r7, #12]
 8015690:	693a      	ldr	r2, [r7, #16]
 8015692:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8015694:	68fb      	ldr	r3, [r7, #12]
 8015696:	697a      	ldr	r2, [r7, #20]
 8015698:	621a      	str	r2, [r3, #32]
}
 801569a:	bf00      	nop
 801569c:	371c      	adds	r7, #28
 801569e:	46bd      	mov	sp, r7
 80156a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156a4:	4770      	bx	lr

080156a6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80156a6:	b480      	push	{r7}
 80156a8:	b087      	sub	sp, #28
 80156aa:	af00      	add	r7, sp, #0
 80156ac:	60f8      	str	r0, [r7, #12]
 80156ae:	60b9      	str	r1, [r7, #8]
 80156b0:	607a      	str	r2, [r7, #4]
 80156b2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80156b4:	68fb      	ldr	r3, [r7, #12]
 80156b6:	6a1b      	ldr	r3, [r3, #32]
 80156b8:	f023 0210 	bic.w	r2, r3, #16
 80156bc:	68fb      	ldr	r3, [r7, #12]
 80156be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80156c0:	68fb      	ldr	r3, [r7, #12]
 80156c2:	699b      	ldr	r3, [r3, #24]
 80156c4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80156c6:	68fb      	ldr	r3, [r7, #12]
 80156c8:	6a1b      	ldr	r3, [r3, #32]
 80156ca:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80156cc:	697b      	ldr	r3, [r7, #20]
 80156ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80156d2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80156d4:	687b      	ldr	r3, [r7, #4]
 80156d6:	021b      	lsls	r3, r3, #8
 80156d8:	697a      	ldr	r2, [r7, #20]
 80156da:	4313      	orrs	r3, r2
 80156dc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80156de:	697b      	ldr	r3, [r7, #20]
 80156e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80156e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80156e6:	683b      	ldr	r3, [r7, #0]
 80156e8:	031b      	lsls	r3, r3, #12
 80156ea:	b29b      	uxth	r3, r3
 80156ec:	697a      	ldr	r2, [r7, #20]
 80156ee:	4313      	orrs	r3, r2
 80156f0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80156f2:	693b      	ldr	r3, [r7, #16]
 80156f4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80156f8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80156fa:	68bb      	ldr	r3, [r7, #8]
 80156fc:	011b      	lsls	r3, r3, #4
 80156fe:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8015702:	693a      	ldr	r2, [r7, #16]
 8015704:	4313      	orrs	r3, r2
 8015706:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8015708:	68fb      	ldr	r3, [r7, #12]
 801570a:	697a      	ldr	r2, [r7, #20]
 801570c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801570e:	68fb      	ldr	r3, [r7, #12]
 8015710:	693a      	ldr	r2, [r7, #16]
 8015712:	621a      	str	r2, [r3, #32]
}
 8015714:	bf00      	nop
 8015716:	371c      	adds	r7, #28
 8015718:	46bd      	mov	sp, r7
 801571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801571e:	4770      	bx	lr

08015720 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8015720:	b480      	push	{r7}
 8015722:	b087      	sub	sp, #28
 8015724:	af00      	add	r7, sp, #0
 8015726:	60f8      	str	r0, [r7, #12]
 8015728:	60b9      	str	r1, [r7, #8]
 801572a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801572c:	68fb      	ldr	r3, [r7, #12]
 801572e:	6a1b      	ldr	r3, [r3, #32]
 8015730:	f023 0210 	bic.w	r2, r3, #16
 8015734:	68fb      	ldr	r3, [r7, #12]
 8015736:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8015738:	68fb      	ldr	r3, [r7, #12]
 801573a:	699b      	ldr	r3, [r3, #24]
 801573c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801573e:	68fb      	ldr	r3, [r7, #12]
 8015740:	6a1b      	ldr	r3, [r3, #32]
 8015742:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8015744:	697b      	ldr	r3, [r7, #20]
 8015746:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801574a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801574c:	687b      	ldr	r3, [r7, #4]
 801574e:	031b      	lsls	r3, r3, #12
 8015750:	697a      	ldr	r2, [r7, #20]
 8015752:	4313      	orrs	r3, r2
 8015754:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8015756:	693b      	ldr	r3, [r7, #16]
 8015758:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801575c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 801575e:	68bb      	ldr	r3, [r7, #8]
 8015760:	011b      	lsls	r3, r3, #4
 8015762:	693a      	ldr	r2, [r7, #16]
 8015764:	4313      	orrs	r3, r2
 8015766:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8015768:	68fb      	ldr	r3, [r7, #12]
 801576a:	697a      	ldr	r2, [r7, #20]
 801576c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801576e:	68fb      	ldr	r3, [r7, #12]
 8015770:	693a      	ldr	r2, [r7, #16]
 8015772:	621a      	str	r2, [r3, #32]
}
 8015774:	bf00      	nop
 8015776:	371c      	adds	r7, #28
 8015778:	46bd      	mov	sp, r7
 801577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801577e:	4770      	bx	lr

08015780 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8015780:	b480      	push	{r7}
 8015782:	b087      	sub	sp, #28
 8015784:	af00      	add	r7, sp, #0
 8015786:	60f8      	str	r0, [r7, #12]
 8015788:	60b9      	str	r1, [r7, #8]
 801578a:	607a      	str	r2, [r7, #4]
 801578c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801578e:	68fb      	ldr	r3, [r7, #12]
 8015790:	6a1b      	ldr	r3, [r3, #32]
 8015792:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8015796:	68fb      	ldr	r3, [r7, #12]
 8015798:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 801579a:	68fb      	ldr	r3, [r7, #12]
 801579c:	69db      	ldr	r3, [r3, #28]
 801579e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80157a0:	68fb      	ldr	r3, [r7, #12]
 80157a2:	6a1b      	ldr	r3, [r3, #32]
 80157a4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80157a6:	697b      	ldr	r3, [r7, #20]
 80157a8:	f023 0303 	bic.w	r3, r3, #3
 80157ac:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80157ae:	697a      	ldr	r2, [r7, #20]
 80157b0:	687b      	ldr	r3, [r7, #4]
 80157b2:	4313      	orrs	r3, r2
 80157b4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80157b6:	697b      	ldr	r3, [r7, #20]
 80157b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80157bc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80157be:	683b      	ldr	r3, [r7, #0]
 80157c0:	011b      	lsls	r3, r3, #4
 80157c2:	b2db      	uxtb	r3, r3
 80157c4:	697a      	ldr	r2, [r7, #20]
 80157c6:	4313      	orrs	r3, r2
 80157c8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80157ca:	693b      	ldr	r3, [r7, #16]
 80157cc:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80157d0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80157d2:	68bb      	ldr	r3, [r7, #8]
 80157d4:	021b      	lsls	r3, r3, #8
 80157d6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80157da:	693a      	ldr	r2, [r7, #16]
 80157dc:	4313      	orrs	r3, r2
 80157de:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80157e0:	68fb      	ldr	r3, [r7, #12]
 80157e2:	697a      	ldr	r2, [r7, #20]
 80157e4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80157e6:	68fb      	ldr	r3, [r7, #12]
 80157e8:	693a      	ldr	r2, [r7, #16]
 80157ea:	621a      	str	r2, [r3, #32]
}
 80157ec:	bf00      	nop
 80157ee:	371c      	adds	r7, #28
 80157f0:	46bd      	mov	sp, r7
 80157f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157f6:	4770      	bx	lr

080157f8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80157f8:	b480      	push	{r7}
 80157fa:	b087      	sub	sp, #28
 80157fc:	af00      	add	r7, sp, #0
 80157fe:	60f8      	str	r0, [r7, #12]
 8015800:	60b9      	str	r1, [r7, #8]
 8015802:	607a      	str	r2, [r7, #4]
 8015804:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8015806:	68fb      	ldr	r3, [r7, #12]
 8015808:	6a1b      	ldr	r3, [r3, #32]
 801580a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801580e:	68fb      	ldr	r3, [r7, #12]
 8015810:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8015812:	68fb      	ldr	r3, [r7, #12]
 8015814:	69db      	ldr	r3, [r3, #28]
 8015816:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8015818:	68fb      	ldr	r3, [r7, #12]
 801581a:	6a1b      	ldr	r3, [r3, #32]
 801581c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 801581e:	697b      	ldr	r3, [r7, #20]
 8015820:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8015824:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8015826:	687b      	ldr	r3, [r7, #4]
 8015828:	021b      	lsls	r3, r3, #8
 801582a:	697a      	ldr	r2, [r7, #20]
 801582c:	4313      	orrs	r3, r2
 801582e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8015830:	697b      	ldr	r3, [r7, #20]
 8015832:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8015836:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8015838:	683b      	ldr	r3, [r7, #0]
 801583a:	031b      	lsls	r3, r3, #12
 801583c:	b29b      	uxth	r3, r3
 801583e:	697a      	ldr	r2, [r7, #20]
 8015840:	4313      	orrs	r3, r2
 8015842:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8015844:	693b      	ldr	r3, [r7, #16]
 8015846:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 801584a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 801584c:	68bb      	ldr	r3, [r7, #8]
 801584e:	031b      	lsls	r3, r3, #12
 8015850:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8015854:	693a      	ldr	r2, [r7, #16]
 8015856:	4313      	orrs	r3, r2
 8015858:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 801585a:	68fb      	ldr	r3, [r7, #12]
 801585c:	697a      	ldr	r2, [r7, #20]
 801585e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8015860:	68fb      	ldr	r3, [r7, #12]
 8015862:	693a      	ldr	r2, [r7, #16]
 8015864:	621a      	str	r2, [r3, #32]
}
 8015866:	bf00      	nop
 8015868:	371c      	adds	r7, #28
 801586a:	46bd      	mov	sp, r7
 801586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015870:	4770      	bx	lr

08015872 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8015872:	b480      	push	{r7}
 8015874:	b085      	sub	sp, #20
 8015876:	af00      	add	r7, sp, #0
 8015878:	6078      	str	r0, [r7, #4]
 801587a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801587c:	687b      	ldr	r3, [r7, #4]
 801587e:	689b      	ldr	r3, [r3, #8]
 8015880:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8015882:	68fb      	ldr	r3, [r7, #12]
 8015884:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8015888:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801588a:	683a      	ldr	r2, [r7, #0]
 801588c:	68fb      	ldr	r3, [r7, #12]
 801588e:	4313      	orrs	r3, r2
 8015890:	f043 0307 	orr.w	r3, r3, #7
 8015894:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8015896:	687b      	ldr	r3, [r7, #4]
 8015898:	68fa      	ldr	r2, [r7, #12]
 801589a:	609a      	str	r2, [r3, #8]
}
 801589c:	bf00      	nop
 801589e:	3714      	adds	r7, #20
 80158a0:	46bd      	mov	sp, r7
 80158a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158a6:	4770      	bx	lr

080158a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80158a8:	b480      	push	{r7}
 80158aa:	b087      	sub	sp, #28
 80158ac:	af00      	add	r7, sp, #0
 80158ae:	60f8      	str	r0, [r7, #12]
 80158b0:	60b9      	str	r1, [r7, #8]
 80158b2:	607a      	str	r2, [r7, #4]
 80158b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80158b6:	68fb      	ldr	r3, [r7, #12]
 80158b8:	689b      	ldr	r3, [r3, #8]
 80158ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80158bc:	697b      	ldr	r3, [r7, #20]
 80158be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80158c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80158c4:	683b      	ldr	r3, [r7, #0]
 80158c6:	021a      	lsls	r2, r3, #8
 80158c8:	687b      	ldr	r3, [r7, #4]
 80158ca:	431a      	orrs	r2, r3
 80158cc:	68bb      	ldr	r3, [r7, #8]
 80158ce:	4313      	orrs	r3, r2
 80158d0:	697a      	ldr	r2, [r7, #20]
 80158d2:	4313      	orrs	r3, r2
 80158d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80158d6:	68fb      	ldr	r3, [r7, #12]
 80158d8:	697a      	ldr	r2, [r7, #20]
 80158da:	609a      	str	r2, [r3, #8]
}
 80158dc:	bf00      	nop
 80158de:	371c      	adds	r7, #28
 80158e0:	46bd      	mov	sp, r7
 80158e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158e6:	4770      	bx	lr

080158e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80158e8:	b480      	push	{r7}
 80158ea:	b087      	sub	sp, #28
 80158ec:	af00      	add	r7, sp, #0
 80158ee:	60f8      	str	r0, [r7, #12]
 80158f0:	60b9      	str	r1, [r7, #8]
 80158f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80158f4:	68bb      	ldr	r3, [r7, #8]
 80158f6:	f003 031f 	and.w	r3, r3, #31
 80158fa:	2201      	movs	r2, #1
 80158fc:	fa02 f303 	lsl.w	r3, r2, r3
 8015900:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8015902:	68fb      	ldr	r3, [r7, #12]
 8015904:	6a1a      	ldr	r2, [r3, #32]
 8015906:	697b      	ldr	r3, [r7, #20]
 8015908:	43db      	mvns	r3, r3
 801590a:	401a      	ands	r2, r3
 801590c:	68fb      	ldr	r3, [r7, #12]
 801590e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8015910:	68fb      	ldr	r3, [r7, #12]
 8015912:	6a1a      	ldr	r2, [r3, #32]
 8015914:	68bb      	ldr	r3, [r7, #8]
 8015916:	f003 031f 	and.w	r3, r3, #31
 801591a:	6879      	ldr	r1, [r7, #4]
 801591c:	fa01 f303 	lsl.w	r3, r1, r3
 8015920:	431a      	orrs	r2, r3
 8015922:	68fb      	ldr	r3, [r7, #12]
 8015924:	621a      	str	r2, [r3, #32]
}
 8015926:	bf00      	nop
 8015928:	371c      	adds	r7, #28
 801592a:	46bd      	mov	sp, r7
 801592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015930:	4770      	bx	lr
	...

08015934 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8015934:	b480      	push	{r7}
 8015936:	b085      	sub	sp, #20
 8015938:	af00      	add	r7, sp, #0
 801593a:	6078      	str	r0, [r7, #4]
 801593c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801593e:	687b      	ldr	r3, [r7, #4]
 8015940:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015944:	2b01      	cmp	r3, #1
 8015946:	d101      	bne.n	801594c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8015948:	2302      	movs	r3, #2
 801594a:	e05a      	b.n	8015a02 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 801594c:	687b      	ldr	r3, [r7, #4]
 801594e:	2201      	movs	r2, #1
 8015950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015954:	687b      	ldr	r3, [r7, #4]
 8015956:	2202      	movs	r2, #2
 8015958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801595c:	687b      	ldr	r3, [r7, #4]
 801595e:	681b      	ldr	r3, [r3, #0]
 8015960:	685b      	ldr	r3, [r3, #4]
 8015962:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8015964:	687b      	ldr	r3, [r7, #4]
 8015966:	681b      	ldr	r3, [r3, #0]
 8015968:	689b      	ldr	r3, [r3, #8]
 801596a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801596c:	68fb      	ldr	r3, [r7, #12]
 801596e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8015972:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8015974:	683b      	ldr	r3, [r7, #0]
 8015976:	681b      	ldr	r3, [r3, #0]
 8015978:	68fa      	ldr	r2, [r7, #12]
 801597a:	4313      	orrs	r3, r2
 801597c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801597e:	687b      	ldr	r3, [r7, #4]
 8015980:	681b      	ldr	r3, [r3, #0]
 8015982:	68fa      	ldr	r2, [r7, #12]
 8015984:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8015986:	687b      	ldr	r3, [r7, #4]
 8015988:	681b      	ldr	r3, [r3, #0]
 801598a:	4a21      	ldr	r2, [pc, #132]	; (8015a10 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 801598c:	4293      	cmp	r3, r2
 801598e:	d022      	beq.n	80159d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8015990:	687b      	ldr	r3, [r7, #4]
 8015992:	681b      	ldr	r3, [r3, #0]
 8015994:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015998:	d01d      	beq.n	80159d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801599a:	687b      	ldr	r3, [r7, #4]
 801599c:	681b      	ldr	r3, [r3, #0]
 801599e:	4a1d      	ldr	r2, [pc, #116]	; (8015a14 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80159a0:	4293      	cmp	r3, r2
 80159a2:	d018      	beq.n	80159d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80159a4:	687b      	ldr	r3, [r7, #4]
 80159a6:	681b      	ldr	r3, [r3, #0]
 80159a8:	4a1b      	ldr	r2, [pc, #108]	; (8015a18 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80159aa:	4293      	cmp	r3, r2
 80159ac:	d013      	beq.n	80159d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80159ae:	687b      	ldr	r3, [r7, #4]
 80159b0:	681b      	ldr	r3, [r3, #0]
 80159b2:	4a1a      	ldr	r2, [pc, #104]	; (8015a1c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80159b4:	4293      	cmp	r3, r2
 80159b6:	d00e      	beq.n	80159d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80159b8:	687b      	ldr	r3, [r7, #4]
 80159ba:	681b      	ldr	r3, [r3, #0]
 80159bc:	4a18      	ldr	r2, [pc, #96]	; (8015a20 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80159be:	4293      	cmp	r3, r2
 80159c0:	d009      	beq.n	80159d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80159c2:	687b      	ldr	r3, [r7, #4]
 80159c4:	681b      	ldr	r3, [r3, #0]
 80159c6:	4a17      	ldr	r2, [pc, #92]	; (8015a24 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80159c8:	4293      	cmp	r3, r2
 80159ca:	d004      	beq.n	80159d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80159cc:	687b      	ldr	r3, [r7, #4]
 80159ce:	681b      	ldr	r3, [r3, #0]
 80159d0:	4a15      	ldr	r2, [pc, #84]	; (8015a28 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80159d2:	4293      	cmp	r3, r2
 80159d4:	d10c      	bne.n	80159f0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80159d6:	68bb      	ldr	r3, [r7, #8]
 80159d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80159dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80159de:	683b      	ldr	r3, [r7, #0]
 80159e0:	685b      	ldr	r3, [r3, #4]
 80159e2:	68ba      	ldr	r2, [r7, #8]
 80159e4:	4313      	orrs	r3, r2
 80159e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80159e8:	687b      	ldr	r3, [r7, #4]
 80159ea:	681b      	ldr	r3, [r3, #0]
 80159ec:	68ba      	ldr	r2, [r7, #8]
 80159ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80159f0:	687b      	ldr	r3, [r7, #4]
 80159f2:	2201      	movs	r2, #1
 80159f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80159f8:	687b      	ldr	r3, [r7, #4]
 80159fa:	2200      	movs	r2, #0
 80159fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8015a00:	2300      	movs	r3, #0
}
 8015a02:	4618      	mov	r0, r3
 8015a04:	3714      	adds	r7, #20
 8015a06:	46bd      	mov	sp, r7
 8015a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a0c:	4770      	bx	lr
 8015a0e:	bf00      	nop
 8015a10:	40010000 	.word	0x40010000
 8015a14:	40000400 	.word	0x40000400
 8015a18:	40000800 	.word	0x40000800
 8015a1c:	40000c00 	.word	0x40000c00
 8015a20:	40010400 	.word	0x40010400
 8015a24:	40014000 	.word	0x40014000
 8015a28:	40001800 	.word	0x40001800

08015a2c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8015a2c:	b480      	push	{r7}
 8015a2e:	b085      	sub	sp, #20
 8015a30:	af00      	add	r7, sp, #0
 8015a32:	6078      	str	r0, [r7, #4]
 8015a34:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8015a36:	2300      	movs	r3, #0
 8015a38:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8015a3a:	687b      	ldr	r3, [r7, #4]
 8015a3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015a40:	2b01      	cmp	r3, #1
 8015a42:	d101      	bne.n	8015a48 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8015a44:	2302      	movs	r3, #2
 8015a46:	e03d      	b.n	8015ac4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8015a48:	687b      	ldr	r3, [r7, #4]
 8015a4a:	2201      	movs	r2, #1
 8015a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8015a50:	68fb      	ldr	r3, [r7, #12]
 8015a52:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8015a56:	683b      	ldr	r3, [r7, #0]
 8015a58:	68db      	ldr	r3, [r3, #12]
 8015a5a:	4313      	orrs	r3, r2
 8015a5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8015a5e:	68fb      	ldr	r3, [r7, #12]
 8015a60:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8015a64:	683b      	ldr	r3, [r7, #0]
 8015a66:	689b      	ldr	r3, [r3, #8]
 8015a68:	4313      	orrs	r3, r2
 8015a6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8015a6c:	68fb      	ldr	r3, [r7, #12]
 8015a6e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8015a72:	683b      	ldr	r3, [r7, #0]
 8015a74:	685b      	ldr	r3, [r3, #4]
 8015a76:	4313      	orrs	r3, r2
 8015a78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8015a7a:	68fb      	ldr	r3, [r7, #12]
 8015a7c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8015a80:	683b      	ldr	r3, [r7, #0]
 8015a82:	681b      	ldr	r3, [r3, #0]
 8015a84:	4313      	orrs	r3, r2
 8015a86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8015a88:	68fb      	ldr	r3, [r7, #12]
 8015a8a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8015a8e:	683b      	ldr	r3, [r7, #0]
 8015a90:	691b      	ldr	r3, [r3, #16]
 8015a92:	4313      	orrs	r3, r2
 8015a94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8015a96:	68fb      	ldr	r3, [r7, #12]
 8015a98:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8015a9c:	683b      	ldr	r3, [r7, #0]
 8015a9e:	695b      	ldr	r3, [r3, #20]
 8015aa0:	4313      	orrs	r3, r2
 8015aa2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8015aa4:	68fb      	ldr	r3, [r7, #12]
 8015aa6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8015aaa:	683b      	ldr	r3, [r7, #0]
 8015aac:	69db      	ldr	r3, [r3, #28]
 8015aae:	4313      	orrs	r3, r2
 8015ab0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8015ab2:	687b      	ldr	r3, [r7, #4]
 8015ab4:	681b      	ldr	r3, [r3, #0]
 8015ab6:	68fa      	ldr	r2, [r7, #12]
 8015ab8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8015aba:	687b      	ldr	r3, [r7, #4]
 8015abc:	2200      	movs	r2, #0
 8015abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8015ac2:	2300      	movs	r3, #0
}
 8015ac4:	4618      	mov	r0, r3
 8015ac6:	3714      	adds	r7, #20
 8015ac8:	46bd      	mov	sp, r7
 8015aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ace:	4770      	bx	lr

08015ad0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8015ad0:	b480      	push	{r7}
 8015ad2:	b083      	sub	sp, #12
 8015ad4:	af00      	add	r7, sp, #0
 8015ad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8015ad8:	bf00      	nop
 8015ada:	370c      	adds	r7, #12
 8015adc:	46bd      	mov	sp, r7
 8015ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ae2:	4770      	bx	lr

08015ae4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8015ae4:	b480      	push	{r7}
 8015ae6:	b083      	sub	sp, #12
 8015ae8:	af00      	add	r7, sp, #0
 8015aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8015aec:	bf00      	nop
 8015aee:	370c      	adds	r7, #12
 8015af0:	46bd      	mov	sp, r7
 8015af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015af6:	4770      	bx	lr

08015af8 <__NVIC_SetPriority>:
{
 8015af8:	b480      	push	{r7}
 8015afa:	b083      	sub	sp, #12
 8015afc:	af00      	add	r7, sp, #0
 8015afe:	4603      	mov	r3, r0
 8015b00:	6039      	str	r1, [r7, #0]
 8015b02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8015b04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015b08:	2b00      	cmp	r3, #0
 8015b0a:	db0a      	blt.n	8015b22 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015b0c:	683b      	ldr	r3, [r7, #0]
 8015b0e:	b2da      	uxtb	r2, r3
 8015b10:	490c      	ldr	r1, [pc, #48]	; (8015b44 <__NVIC_SetPriority+0x4c>)
 8015b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015b16:	0112      	lsls	r2, r2, #4
 8015b18:	b2d2      	uxtb	r2, r2
 8015b1a:	440b      	add	r3, r1
 8015b1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8015b20:	e00a      	b.n	8015b38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015b22:	683b      	ldr	r3, [r7, #0]
 8015b24:	b2da      	uxtb	r2, r3
 8015b26:	4908      	ldr	r1, [pc, #32]	; (8015b48 <__NVIC_SetPriority+0x50>)
 8015b28:	79fb      	ldrb	r3, [r7, #7]
 8015b2a:	f003 030f 	and.w	r3, r3, #15
 8015b2e:	3b04      	subs	r3, #4
 8015b30:	0112      	lsls	r2, r2, #4
 8015b32:	b2d2      	uxtb	r2, r2
 8015b34:	440b      	add	r3, r1
 8015b36:	761a      	strb	r2, [r3, #24]
}
 8015b38:	bf00      	nop
 8015b3a:	370c      	adds	r7, #12
 8015b3c:	46bd      	mov	sp, r7
 8015b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b42:	4770      	bx	lr
 8015b44:	e000e100 	.word	0xe000e100
 8015b48:	e000ed00 	.word	0xe000ed00

08015b4c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8015b4c:	b580      	push	{r7, lr}
 8015b4e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8015b50:	4b05      	ldr	r3, [pc, #20]	; (8015b68 <SysTick_Handler+0x1c>)
 8015b52:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8015b54:	f001 ffde 	bl	8017b14 <xTaskGetSchedulerState>
 8015b58:	4603      	mov	r3, r0
 8015b5a:	2b01      	cmp	r3, #1
 8015b5c:	d001      	beq.n	8015b62 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8015b5e:	f002 fdcb 	bl	80186f8 <xPortSysTickHandler>
  }
}
 8015b62:	bf00      	nop
 8015b64:	bd80      	pop	{r7, pc}
 8015b66:	bf00      	nop
 8015b68:	e000e010 	.word	0xe000e010

08015b6c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8015b6c:	b580      	push	{r7, lr}
 8015b6e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8015b70:	2100      	movs	r1, #0
 8015b72:	f06f 0004 	mvn.w	r0, #4
 8015b76:	f7ff ffbf 	bl	8015af8 <__NVIC_SetPriority>
#endif
}
 8015b7a:	bf00      	nop
 8015b7c:	bd80      	pop	{r7, pc}
	...

08015b80 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8015b80:	b480      	push	{r7}
 8015b82:	b083      	sub	sp, #12
 8015b84:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015b86:	f3ef 8305 	mrs	r3, IPSR
 8015b8a:	603b      	str	r3, [r7, #0]
  return(result);
 8015b8c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8015b8e:	2b00      	cmp	r3, #0
 8015b90:	d003      	beq.n	8015b9a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8015b92:	f06f 0305 	mvn.w	r3, #5
 8015b96:	607b      	str	r3, [r7, #4]
 8015b98:	e00c      	b.n	8015bb4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8015b9a:	4b0a      	ldr	r3, [pc, #40]	; (8015bc4 <osKernelInitialize+0x44>)
 8015b9c:	681b      	ldr	r3, [r3, #0]
 8015b9e:	2b00      	cmp	r3, #0
 8015ba0:	d105      	bne.n	8015bae <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8015ba2:	4b08      	ldr	r3, [pc, #32]	; (8015bc4 <osKernelInitialize+0x44>)
 8015ba4:	2201      	movs	r2, #1
 8015ba6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8015ba8:	2300      	movs	r3, #0
 8015baa:	607b      	str	r3, [r7, #4]
 8015bac:	e002      	b.n	8015bb4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8015bae:	f04f 33ff 	mov.w	r3, #4294967295
 8015bb2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8015bb4:	687b      	ldr	r3, [r7, #4]
}
 8015bb6:	4618      	mov	r0, r3
 8015bb8:	370c      	adds	r7, #12
 8015bba:	46bd      	mov	sp, r7
 8015bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bc0:	4770      	bx	lr
 8015bc2:	bf00      	nop
 8015bc4:	200017a8 	.word	0x200017a8

08015bc8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8015bc8:	b580      	push	{r7, lr}
 8015bca:	b082      	sub	sp, #8
 8015bcc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015bce:	f3ef 8305 	mrs	r3, IPSR
 8015bd2:	603b      	str	r3, [r7, #0]
  return(result);
 8015bd4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8015bd6:	2b00      	cmp	r3, #0
 8015bd8:	d003      	beq.n	8015be2 <osKernelStart+0x1a>
    stat = osErrorISR;
 8015bda:	f06f 0305 	mvn.w	r3, #5
 8015bde:	607b      	str	r3, [r7, #4]
 8015be0:	e010      	b.n	8015c04 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8015be2:	4b0b      	ldr	r3, [pc, #44]	; (8015c10 <osKernelStart+0x48>)
 8015be4:	681b      	ldr	r3, [r3, #0]
 8015be6:	2b01      	cmp	r3, #1
 8015be8:	d109      	bne.n	8015bfe <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8015bea:	f7ff ffbf 	bl	8015b6c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8015bee:	4b08      	ldr	r3, [pc, #32]	; (8015c10 <osKernelStart+0x48>)
 8015bf0:	2202      	movs	r2, #2
 8015bf2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8015bf4:	f001 fab4 	bl	8017160 <vTaskStartScheduler>
      stat = osOK;
 8015bf8:	2300      	movs	r3, #0
 8015bfa:	607b      	str	r3, [r7, #4]
 8015bfc:	e002      	b.n	8015c04 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8015bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8015c02:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8015c04:	687b      	ldr	r3, [r7, #4]
}
 8015c06:	4618      	mov	r0, r3
 8015c08:	3708      	adds	r7, #8
 8015c0a:	46bd      	mov	sp, r7
 8015c0c:	bd80      	pop	{r7, pc}
 8015c0e:	bf00      	nop
 8015c10:	200017a8 	.word	0x200017a8

08015c14 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8015c14:	b580      	push	{r7, lr}
 8015c16:	b082      	sub	sp, #8
 8015c18:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015c1a:	f3ef 8305 	mrs	r3, IPSR
 8015c1e:	603b      	str	r3, [r7, #0]
  return(result);
 8015c20:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8015c22:	2b00      	cmp	r3, #0
 8015c24:	d003      	beq.n	8015c2e <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8015c26:	f001 fbdd 	bl	80173e4 <xTaskGetTickCountFromISR>
 8015c2a:	6078      	str	r0, [r7, #4]
 8015c2c:	e002      	b.n	8015c34 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8015c2e:	f001 fbc9 	bl	80173c4 <xTaskGetTickCount>
 8015c32:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8015c34:	687b      	ldr	r3, [r7, #4]
}
 8015c36:	4618      	mov	r0, r3
 8015c38:	3708      	adds	r7, #8
 8015c3a:	46bd      	mov	sp, r7
 8015c3c:	bd80      	pop	{r7, pc}

08015c3e <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8015c3e:	b580      	push	{r7, lr}
 8015c40:	b08e      	sub	sp, #56	; 0x38
 8015c42:	af04      	add	r7, sp, #16
 8015c44:	60f8      	str	r0, [r7, #12]
 8015c46:	60b9      	str	r1, [r7, #8]
 8015c48:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8015c4a:	2300      	movs	r3, #0
 8015c4c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015c4e:	f3ef 8305 	mrs	r3, IPSR
 8015c52:	617b      	str	r3, [r7, #20]
  return(result);
 8015c54:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8015c56:	2b00      	cmp	r3, #0
 8015c58:	d17e      	bne.n	8015d58 <osThreadNew+0x11a>
 8015c5a:	68fb      	ldr	r3, [r7, #12]
 8015c5c:	2b00      	cmp	r3, #0
 8015c5e:	d07b      	beq.n	8015d58 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8015c60:	2380      	movs	r3, #128	; 0x80
 8015c62:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8015c64:	2318      	movs	r3, #24
 8015c66:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8015c68:	2300      	movs	r3, #0
 8015c6a:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8015c6c:	f04f 33ff 	mov.w	r3, #4294967295
 8015c70:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8015c72:	687b      	ldr	r3, [r7, #4]
 8015c74:	2b00      	cmp	r3, #0
 8015c76:	d045      	beq.n	8015d04 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8015c78:	687b      	ldr	r3, [r7, #4]
 8015c7a:	681b      	ldr	r3, [r3, #0]
 8015c7c:	2b00      	cmp	r3, #0
 8015c7e:	d002      	beq.n	8015c86 <osThreadNew+0x48>
        name = attr->name;
 8015c80:	687b      	ldr	r3, [r7, #4]
 8015c82:	681b      	ldr	r3, [r3, #0]
 8015c84:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8015c86:	687b      	ldr	r3, [r7, #4]
 8015c88:	699b      	ldr	r3, [r3, #24]
 8015c8a:	2b00      	cmp	r3, #0
 8015c8c:	d002      	beq.n	8015c94 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8015c8e:	687b      	ldr	r3, [r7, #4]
 8015c90:	699b      	ldr	r3, [r3, #24]
 8015c92:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8015c94:	69fb      	ldr	r3, [r7, #28]
 8015c96:	2b00      	cmp	r3, #0
 8015c98:	d008      	beq.n	8015cac <osThreadNew+0x6e>
 8015c9a:	69fb      	ldr	r3, [r7, #28]
 8015c9c:	2b38      	cmp	r3, #56	; 0x38
 8015c9e:	d805      	bhi.n	8015cac <osThreadNew+0x6e>
 8015ca0:	687b      	ldr	r3, [r7, #4]
 8015ca2:	685b      	ldr	r3, [r3, #4]
 8015ca4:	f003 0301 	and.w	r3, r3, #1
 8015ca8:	2b00      	cmp	r3, #0
 8015caa:	d001      	beq.n	8015cb0 <osThreadNew+0x72>
        return (NULL);
 8015cac:	2300      	movs	r3, #0
 8015cae:	e054      	b.n	8015d5a <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8015cb0:	687b      	ldr	r3, [r7, #4]
 8015cb2:	695b      	ldr	r3, [r3, #20]
 8015cb4:	2b00      	cmp	r3, #0
 8015cb6:	d003      	beq.n	8015cc0 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8015cb8:	687b      	ldr	r3, [r7, #4]
 8015cba:	695b      	ldr	r3, [r3, #20]
 8015cbc:	089b      	lsrs	r3, r3, #2
 8015cbe:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8015cc0:	687b      	ldr	r3, [r7, #4]
 8015cc2:	689b      	ldr	r3, [r3, #8]
 8015cc4:	2b00      	cmp	r3, #0
 8015cc6:	d00e      	beq.n	8015ce6 <osThreadNew+0xa8>
 8015cc8:	687b      	ldr	r3, [r7, #4]
 8015cca:	68db      	ldr	r3, [r3, #12]
 8015ccc:	2bcb      	cmp	r3, #203	; 0xcb
 8015cce:	d90a      	bls.n	8015ce6 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8015cd0:	687b      	ldr	r3, [r7, #4]
 8015cd2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8015cd4:	2b00      	cmp	r3, #0
 8015cd6:	d006      	beq.n	8015ce6 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8015cd8:	687b      	ldr	r3, [r7, #4]
 8015cda:	695b      	ldr	r3, [r3, #20]
 8015cdc:	2b00      	cmp	r3, #0
 8015cde:	d002      	beq.n	8015ce6 <osThreadNew+0xa8>
        mem = 1;
 8015ce0:	2301      	movs	r3, #1
 8015ce2:	61bb      	str	r3, [r7, #24]
 8015ce4:	e010      	b.n	8015d08 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8015ce6:	687b      	ldr	r3, [r7, #4]
 8015ce8:	689b      	ldr	r3, [r3, #8]
 8015cea:	2b00      	cmp	r3, #0
 8015cec:	d10c      	bne.n	8015d08 <osThreadNew+0xca>
 8015cee:	687b      	ldr	r3, [r7, #4]
 8015cf0:	68db      	ldr	r3, [r3, #12]
 8015cf2:	2b00      	cmp	r3, #0
 8015cf4:	d108      	bne.n	8015d08 <osThreadNew+0xca>
 8015cf6:	687b      	ldr	r3, [r7, #4]
 8015cf8:	691b      	ldr	r3, [r3, #16]
 8015cfa:	2b00      	cmp	r3, #0
 8015cfc:	d104      	bne.n	8015d08 <osThreadNew+0xca>
          mem = 0;
 8015cfe:	2300      	movs	r3, #0
 8015d00:	61bb      	str	r3, [r7, #24]
 8015d02:	e001      	b.n	8015d08 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8015d04:	2300      	movs	r3, #0
 8015d06:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8015d08:	69bb      	ldr	r3, [r7, #24]
 8015d0a:	2b01      	cmp	r3, #1
 8015d0c:	d110      	bne.n	8015d30 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8015d0e:	687b      	ldr	r3, [r7, #4]
 8015d10:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8015d12:	687a      	ldr	r2, [r7, #4]
 8015d14:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8015d16:	9202      	str	r2, [sp, #8]
 8015d18:	9301      	str	r3, [sp, #4]
 8015d1a:	69fb      	ldr	r3, [r7, #28]
 8015d1c:	9300      	str	r3, [sp, #0]
 8015d1e:	68bb      	ldr	r3, [r7, #8]
 8015d20:	6a3a      	ldr	r2, [r7, #32]
 8015d22:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015d24:	68f8      	ldr	r0, [r7, #12]
 8015d26:	f000 ffc5 	bl	8016cb4 <xTaskCreateStatic>
 8015d2a:	4603      	mov	r3, r0
 8015d2c:	613b      	str	r3, [r7, #16]
 8015d2e:	e013      	b.n	8015d58 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8015d30:	69bb      	ldr	r3, [r7, #24]
 8015d32:	2b00      	cmp	r3, #0
 8015d34:	d110      	bne.n	8015d58 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8015d36:	6a3b      	ldr	r3, [r7, #32]
 8015d38:	b29a      	uxth	r2, r3
 8015d3a:	f107 0310 	add.w	r3, r7, #16
 8015d3e:	9301      	str	r3, [sp, #4]
 8015d40:	69fb      	ldr	r3, [r7, #28]
 8015d42:	9300      	str	r3, [sp, #0]
 8015d44:	68bb      	ldr	r3, [r7, #8]
 8015d46:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015d48:	68f8      	ldr	r0, [r7, #12]
 8015d4a:	f001 f810 	bl	8016d6e <xTaskCreate>
 8015d4e:	4603      	mov	r3, r0
 8015d50:	2b01      	cmp	r3, #1
 8015d52:	d001      	beq.n	8015d58 <osThreadNew+0x11a>
            hTask = NULL;
 8015d54:	2300      	movs	r3, #0
 8015d56:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8015d58:	693b      	ldr	r3, [r7, #16]
}
 8015d5a:	4618      	mov	r0, r3
 8015d5c:	3728      	adds	r7, #40	; 0x28
 8015d5e:	46bd      	mov	sp, r7
 8015d60:	bd80      	pop	{r7, pc}

08015d62 <osDelayUntil>:
  }

  return (stat);
}

osStatus_t osDelayUntil (uint32_t ticks) {
 8015d62:	b580      	push	{r7, lr}
 8015d64:	b086      	sub	sp, #24
 8015d66:	af00      	add	r7, sp, #0
 8015d68:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015d6a:	f3ef 8305 	mrs	r3, IPSR
 8015d6e:	60fb      	str	r3, [r7, #12]
  return(result);
 8015d70:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 8015d72:	2b00      	cmp	r3, #0
 8015d74:	d003      	beq.n	8015d7e <osDelayUntil+0x1c>
    stat = osErrorISR;
 8015d76:	f06f 0305 	mvn.w	r3, #5
 8015d7a:	617b      	str	r3, [r7, #20]
 8015d7c:	e019      	b.n	8015db2 <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 8015d7e:	2300      	movs	r3, #0
 8015d80:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 8015d82:	f001 fb1f 	bl	80173c4 <xTaskGetTickCount>
 8015d86:	4603      	mov	r3, r0
 8015d88:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 8015d8a:	68bb      	ldr	r3, [r7, #8]
 8015d8c:	687a      	ldr	r2, [r7, #4]
 8015d8e:	1ad3      	subs	r3, r2, r3
 8015d90:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 8015d92:	693b      	ldr	r3, [r7, #16]
 8015d94:	2b00      	cmp	r3, #0
 8015d96:	d009      	beq.n	8015dac <osDelayUntil+0x4a>
 8015d98:	693b      	ldr	r3, [r7, #16]
 8015d9a:	2b00      	cmp	r3, #0
 8015d9c:	db06      	blt.n	8015dac <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 8015d9e:	f107 0308 	add.w	r3, r7, #8
 8015da2:	6939      	ldr	r1, [r7, #16]
 8015da4:	4618      	mov	r0, r3
 8015da6:	f001 f95b 	bl	8017060 <vTaskDelayUntil>
 8015daa:	e002      	b.n	8015db2 <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 8015dac:	f06f 0303 	mvn.w	r3, #3
 8015db0:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8015db2:	697b      	ldr	r3, [r7, #20]
}
 8015db4:	4618      	mov	r0, r3
 8015db6:	3718      	adds	r7, #24
 8015db8:	46bd      	mov	sp, r7
 8015dba:	bd80      	pop	{r7, pc}

08015dbc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8015dbc:	b480      	push	{r7}
 8015dbe:	b085      	sub	sp, #20
 8015dc0:	af00      	add	r7, sp, #0
 8015dc2:	60f8      	str	r0, [r7, #12]
 8015dc4:	60b9      	str	r1, [r7, #8]
 8015dc6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8015dc8:	68fb      	ldr	r3, [r7, #12]
 8015dca:	4a07      	ldr	r2, [pc, #28]	; (8015de8 <vApplicationGetIdleTaskMemory+0x2c>)
 8015dcc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8015dce:	68bb      	ldr	r3, [r7, #8]
 8015dd0:	4a06      	ldr	r2, [pc, #24]	; (8015dec <vApplicationGetIdleTaskMemory+0x30>)
 8015dd2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8015dd4:	687b      	ldr	r3, [r7, #4]
 8015dd6:	2280      	movs	r2, #128	; 0x80
 8015dd8:	601a      	str	r2, [r3, #0]
}
 8015dda:	bf00      	nop
 8015ddc:	3714      	adds	r7, #20
 8015dde:	46bd      	mov	sp, r7
 8015de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015de4:	4770      	bx	lr
 8015de6:	bf00      	nop
 8015de8:	200017ac 	.word	0x200017ac
 8015dec:	20001878 	.word	0x20001878

08015df0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8015df0:	b480      	push	{r7}
 8015df2:	b085      	sub	sp, #20
 8015df4:	af00      	add	r7, sp, #0
 8015df6:	60f8      	str	r0, [r7, #12]
 8015df8:	60b9      	str	r1, [r7, #8]
 8015dfa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8015dfc:	68fb      	ldr	r3, [r7, #12]
 8015dfe:	4a07      	ldr	r2, [pc, #28]	; (8015e1c <vApplicationGetTimerTaskMemory+0x2c>)
 8015e00:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8015e02:	68bb      	ldr	r3, [r7, #8]
 8015e04:	4a06      	ldr	r2, [pc, #24]	; (8015e20 <vApplicationGetTimerTaskMemory+0x30>)
 8015e06:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8015e08:	687b      	ldr	r3, [r7, #4]
 8015e0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8015e0e:	601a      	str	r2, [r3, #0]
}
 8015e10:	bf00      	nop
 8015e12:	3714      	adds	r7, #20
 8015e14:	46bd      	mov	sp, r7
 8015e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e1a:	4770      	bx	lr
 8015e1c:	20001a78 	.word	0x20001a78
 8015e20:	20001b44 	.word	0x20001b44

08015e24 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8015e24:	b480      	push	{r7}
 8015e26:	b083      	sub	sp, #12
 8015e28:	af00      	add	r7, sp, #0
 8015e2a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8015e2c:	687b      	ldr	r3, [r7, #4]
 8015e2e:	f103 0208 	add.w	r2, r3, #8
 8015e32:	687b      	ldr	r3, [r7, #4]
 8015e34:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8015e36:	687b      	ldr	r3, [r7, #4]
 8015e38:	f04f 32ff 	mov.w	r2, #4294967295
 8015e3c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8015e3e:	687b      	ldr	r3, [r7, #4]
 8015e40:	f103 0208 	add.w	r2, r3, #8
 8015e44:	687b      	ldr	r3, [r7, #4]
 8015e46:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8015e48:	687b      	ldr	r3, [r7, #4]
 8015e4a:	f103 0208 	add.w	r2, r3, #8
 8015e4e:	687b      	ldr	r3, [r7, #4]
 8015e50:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8015e52:	687b      	ldr	r3, [r7, #4]
 8015e54:	2200      	movs	r2, #0
 8015e56:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8015e58:	bf00      	nop
 8015e5a:	370c      	adds	r7, #12
 8015e5c:	46bd      	mov	sp, r7
 8015e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e62:	4770      	bx	lr

08015e64 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8015e64:	b480      	push	{r7}
 8015e66:	b083      	sub	sp, #12
 8015e68:	af00      	add	r7, sp, #0
 8015e6a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8015e6c:	687b      	ldr	r3, [r7, #4]
 8015e6e:	2200      	movs	r2, #0
 8015e70:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8015e72:	bf00      	nop
 8015e74:	370c      	adds	r7, #12
 8015e76:	46bd      	mov	sp, r7
 8015e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e7c:	4770      	bx	lr

08015e7e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8015e7e:	b480      	push	{r7}
 8015e80:	b085      	sub	sp, #20
 8015e82:	af00      	add	r7, sp, #0
 8015e84:	6078      	str	r0, [r7, #4]
 8015e86:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8015e88:	687b      	ldr	r3, [r7, #4]
 8015e8a:	685b      	ldr	r3, [r3, #4]
 8015e8c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8015e8e:	683b      	ldr	r3, [r7, #0]
 8015e90:	68fa      	ldr	r2, [r7, #12]
 8015e92:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8015e94:	68fb      	ldr	r3, [r7, #12]
 8015e96:	689a      	ldr	r2, [r3, #8]
 8015e98:	683b      	ldr	r3, [r7, #0]
 8015e9a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8015e9c:	68fb      	ldr	r3, [r7, #12]
 8015e9e:	689b      	ldr	r3, [r3, #8]
 8015ea0:	683a      	ldr	r2, [r7, #0]
 8015ea2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8015ea4:	68fb      	ldr	r3, [r7, #12]
 8015ea6:	683a      	ldr	r2, [r7, #0]
 8015ea8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8015eaa:	683b      	ldr	r3, [r7, #0]
 8015eac:	687a      	ldr	r2, [r7, #4]
 8015eae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8015eb0:	687b      	ldr	r3, [r7, #4]
 8015eb2:	681b      	ldr	r3, [r3, #0]
 8015eb4:	1c5a      	adds	r2, r3, #1
 8015eb6:	687b      	ldr	r3, [r7, #4]
 8015eb8:	601a      	str	r2, [r3, #0]
}
 8015eba:	bf00      	nop
 8015ebc:	3714      	adds	r7, #20
 8015ebe:	46bd      	mov	sp, r7
 8015ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ec4:	4770      	bx	lr

08015ec6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8015ec6:	b480      	push	{r7}
 8015ec8:	b085      	sub	sp, #20
 8015eca:	af00      	add	r7, sp, #0
 8015ecc:	6078      	str	r0, [r7, #4]
 8015ece:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8015ed0:	683b      	ldr	r3, [r7, #0]
 8015ed2:	681b      	ldr	r3, [r3, #0]
 8015ed4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8015ed6:	68bb      	ldr	r3, [r7, #8]
 8015ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015edc:	d103      	bne.n	8015ee6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8015ede:	687b      	ldr	r3, [r7, #4]
 8015ee0:	691b      	ldr	r3, [r3, #16]
 8015ee2:	60fb      	str	r3, [r7, #12]
 8015ee4:	e00c      	b.n	8015f00 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8015ee6:	687b      	ldr	r3, [r7, #4]
 8015ee8:	3308      	adds	r3, #8
 8015eea:	60fb      	str	r3, [r7, #12]
 8015eec:	e002      	b.n	8015ef4 <vListInsert+0x2e>
 8015eee:	68fb      	ldr	r3, [r7, #12]
 8015ef0:	685b      	ldr	r3, [r3, #4]
 8015ef2:	60fb      	str	r3, [r7, #12]
 8015ef4:	68fb      	ldr	r3, [r7, #12]
 8015ef6:	685b      	ldr	r3, [r3, #4]
 8015ef8:	681b      	ldr	r3, [r3, #0]
 8015efa:	68ba      	ldr	r2, [r7, #8]
 8015efc:	429a      	cmp	r2, r3
 8015efe:	d2f6      	bcs.n	8015eee <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8015f00:	68fb      	ldr	r3, [r7, #12]
 8015f02:	685a      	ldr	r2, [r3, #4]
 8015f04:	683b      	ldr	r3, [r7, #0]
 8015f06:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8015f08:	683b      	ldr	r3, [r7, #0]
 8015f0a:	685b      	ldr	r3, [r3, #4]
 8015f0c:	683a      	ldr	r2, [r7, #0]
 8015f0e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8015f10:	683b      	ldr	r3, [r7, #0]
 8015f12:	68fa      	ldr	r2, [r7, #12]
 8015f14:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8015f16:	68fb      	ldr	r3, [r7, #12]
 8015f18:	683a      	ldr	r2, [r7, #0]
 8015f1a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8015f1c:	683b      	ldr	r3, [r7, #0]
 8015f1e:	687a      	ldr	r2, [r7, #4]
 8015f20:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8015f22:	687b      	ldr	r3, [r7, #4]
 8015f24:	681b      	ldr	r3, [r3, #0]
 8015f26:	1c5a      	adds	r2, r3, #1
 8015f28:	687b      	ldr	r3, [r7, #4]
 8015f2a:	601a      	str	r2, [r3, #0]
}
 8015f2c:	bf00      	nop
 8015f2e:	3714      	adds	r7, #20
 8015f30:	46bd      	mov	sp, r7
 8015f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f36:	4770      	bx	lr

08015f38 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8015f38:	b480      	push	{r7}
 8015f3a:	b085      	sub	sp, #20
 8015f3c:	af00      	add	r7, sp, #0
 8015f3e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8015f40:	687b      	ldr	r3, [r7, #4]
 8015f42:	691b      	ldr	r3, [r3, #16]
 8015f44:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8015f46:	687b      	ldr	r3, [r7, #4]
 8015f48:	685b      	ldr	r3, [r3, #4]
 8015f4a:	687a      	ldr	r2, [r7, #4]
 8015f4c:	6892      	ldr	r2, [r2, #8]
 8015f4e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8015f50:	687b      	ldr	r3, [r7, #4]
 8015f52:	689b      	ldr	r3, [r3, #8]
 8015f54:	687a      	ldr	r2, [r7, #4]
 8015f56:	6852      	ldr	r2, [r2, #4]
 8015f58:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8015f5a:	68fb      	ldr	r3, [r7, #12]
 8015f5c:	685b      	ldr	r3, [r3, #4]
 8015f5e:	687a      	ldr	r2, [r7, #4]
 8015f60:	429a      	cmp	r2, r3
 8015f62:	d103      	bne.n	8015f6c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8015f64:	687b      	ldr	r3, [r7, #4]
 8015f66:	689a      	ldr	r2, [r3, #8]
 8015f68:	68fb      	ldr	r3, [r7, #12]
 8015f6a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8015f6c:	687b      	ldr	r3, [r7, #4]
 8015f6e:	2200      	movs	r2, #0
 8015f70:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8015f72:	68fb      	ldr	r3, [r7, #12]
 8015f74:	681b      	ldr	r3, [r3, #0]
 8015f76:	1e5a      	subs	r2, r3, #1
 8015f78:	68fb      	ldr	r3, [r7, #12]
 8015f7a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8015f7c:	68fb      	ldr	r3, [r7, #12]
 8015f7e:	681b      	ldr	r3, [r3, #0]
}
 8015f80:	4618      	mov	r0, r3
 8015f82:	3714      	adds	r7, #20
 8015f84:	46bd      	mov	sp, r7
 8015f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f8a:	4770      	bx	lr

08015f8c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8015f8c:	b580      	push	{r7, lr}
 8015f8e:	b084      	sub	sp, #16
 8015f90:	af00      	add	r7, sp, #0
 8015f92:	6078      	str	r0, [r7, #4]
 8015f94:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8015f96:	687b      	ldr	r3, [r7, #4]
 8015f98:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8015f9a:	68fb      	ldr	r3, [r7, #12]
 8015f9c:	2b00      	cmp	r3, #0
 8015f9e:	d10a      	bne.n	8015fb6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8015fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015fa4:	f383 8811 	msr	BASEPRI, r3
 8015fa8:	f3bf 8f6f 	isb	sy
 8015fac:	f3bf 8f4f 	dsb	sy
 8015fb0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8015fb2:	bf00      	nop
 8015fb4:	e7fe      	b.n	8015fb4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8015fb6:	f002 fb0d 	bl	80185d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015fba:	68fb      	ldr	r3, [r7, #12]
 8015fbc:	681a      	ldr	r2, [r3, #0]
 8015fbe:	68fb      	ldr	r3, [r7, #12]
 8015fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015fc2:	68f9      	ldr	r1, [r7, #12]
 8015fc4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8015fc6:	fb01 f303 	mul.w	r3, r1, r3
 8015fca:	441a      	add	r2, r3
 8015fcc:	68fb      	ldr	r3, [r7, #12]
 8015fce:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8015fd0:	68fb      	ldr	r3, [r7, #12]
 8015fd2:	2200      	movs	r2, #0
 8015fd4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8015fd6:	68fb      	ldr	r3, [r7, #12]
 8015fd8:	681a      	ldr	r2, [r3, #0]
 8015fda:	68fb      	ldr	r3, [r7, #12]
 8015fdc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015fde:	68fb      	ldr	r3, [r7, #12]
 8015fe0:	681a      	ldr	r2, [r3, #0]
 8015fe2:	68fb      	ldr	r3, [r7, #12]
 8015fe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015fe6:	3b01      	subs	r3, #1
 8015fe8:	68f9      	ldr	r1, [r7, #12]
 8015fea:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8015fec:	fb01 f303 	mul.w	r3, r1, r3
 8015ff0:	441a      	add	r2, r3
 8015ff2:	68fb      	ldr	r3, [r7, #12]
 8015ff4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8015ff6:	68fb      	ldr	r3, [r7, #12]
 8015ff8:	22ff      	movs	r2, #255	; 0xff
 8015ffa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8015ffe:	68fb      	ldr	r3, [r7, #12]
 8016000:	22ff      	movs	r2, #255	; 0xff
 8016002:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8016006:	683b      	ldr	r3, [r7, #0]
 8016008:	2b00      	cmp	r3, #0
 801600a:	d114      	bne.n	8016036 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801600c:	68fb      	ldr	r3, [r7, #12]
 801600e:	691b      	ldr	r3, [r3, #16]
 8016010:	2b00      	cmp	r3, #0
 8016012:	d01a      	beq.n	801604a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016014:	68fb      	ldr	r3, [r7, #12]
 8016016:	3310      	adds	r3, #16
 8016018:	4618      	mov	r0, r3
 801601a:	f001 fb7d 	bl	8017718 <xTaskRemoveFromEventList>
 801601e:	4603      	mov	r3, r0
 8016020:	2b00      	cmp	r3, #0
 8016022:	d012      	beq.n	801604a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8016024:	4b0c      	ldr	r3, [pc, #48]	; (8016058 <xQueueGenericReset+0xcc>)
 8016026:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801602a:	601a      	str	r2, [r3, #0]
 801602c:	f3bf 8f4f 	dsb	sy
 8016030:	f3bf 8f6f 	isb	sy
 8016034:	e009      	b.n	801604a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8016036:	68fb      	ldr	r3, [r7, #12]
 8016038:	3310      	adds	r3, #16
 801603a:	4618      	mov	r0, r3
 801603c:	f7ff fef2 	bl	8015e24 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8016040:	68fb      	ldr	r3, [r7, #12]
 8016042:	3324      	adds	r3, #36	; 0x24
 8016044:	4618      	mov	r0, r3
 8016046:	f7ff feed 	bl	8015e24 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801604a:	f002 faf3 	bl	8018634 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801604e:	2301      	movs	r3, #1
}
 8016050:	4618      	mov	r0, r3
 8016052:	3710      	adds	r7, #16
 8016054:	46bd      	mov	sp, r7
 8016056:	bd80      	pop	{r7, pc}
 8016058:	e000ed04 	.word	0xe000ed04

0801605c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 801605c:	b580      	push	{r7, lr}
 801605e:	b08e      	sub	sp, #56	; 0x38
 8016060:	af02      	add	r7, sp, #8
 8016062:	60f8      	str	r0, [r7, #12]
 8016064:	60b9      	str	r1, [r7, #8]
 8016066:	607a      	str	r2, [r7, #4]
 8016068:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801606a:	68fb      	ldr	r3, [r7, #12]
 801606c:	2b00      	cmp	r3, #0
 801606e:	d10a      	bne.n	8016086 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8016070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016074:	f383 8811 	msr	BASEPRI, r3
 8016078:	f3bf 8f6f 	isb	sy
 801607c:	f3bf 8f4f 	dsb	sy
 8016080:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8016082:	bf00      	nop
 8016084:	e7fe      	b.n	8016084 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8016086:	683b      	ldr	r3, [r7, #0]
 8016088:	2b00      	cmp	r3, #0
 801608a:	d10a      	bne.n	80160a2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 801608c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016090:	f383 8811 	msr	BASEPRI, r3
 8016094:	f3bf 8f6f 	isb	sy
 8016098:	f3bf 8f4f 	dsb	sy
 801609c:	627b      	str	r3, [r7, #36]	; 0x24
}
 801609e:	bf00      	nop
 80160a0:	e7fe      	b.n	80160a0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80160a2:	687b      	ldr	r3, [r7, #4]
 80160a4:	2b00      	cmp	r3, #0
 80160a6:	d002      	beq.n	80160ae <xQueueGenericCreateStatic+0x52>
 80160a8:	68bb      	ldr	r3, [r7, #8]
 80160aa:	2b00      	cmp	r3, #0
 80160ac:	d001      	beq.n	80160b2 <xQueueGenericCreateStatic+0x56>
 80160ae:	2301      	movs	r3, #1
 80160b0:	e000      	b.n	80160b4 <xQueueGenericCreateStatic+0x58>
 80160b2:	2300      	movs	r3, #0
 80160b4:	2b00      	cmp	r3, #0
 80160b6:	d10a      	bne.n	80160ce <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80160b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80160bc:	f383 8811 	msr	BASEPRI, r3
 80160c0:	f3bf 8f6f 	isb	sy
 80160c4:	f3bf 8f4f 	dsb	sy
 80160c8:	623b      	str	r3, [r7, #32]
}
 80160ca:	bf00      	nop
 80160cc:	e7fe      	b.n	80160cc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80160ce:	687b      	ldr	r3, [r7, #4]
 80160d0:	2b00      	cmp	r3, #0
 80160d2:	d102      	bne.n	80160da <xQueueGenericCreateStatic+0x7e>
 80160d4:	68bb      	ldr	r3, [r7, #8]
 80160d6:	2b00      	cmp	r3, #0
 80160d8:	d101      	bne.n	80160de <xQueueGenericCreateStatic+0x82>
 80160da:	2301      	movs	r3, #1
 80160dc:	e000      	b.n	80160e0 <xQueueGenericCreateStatic+0x84>
 80160de:	2300      	movs	r3, #0
 80160e0:	2b00      	cmp	r3, #0
 80160e2:	d10a      	bne.n	80160fa <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80160e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80160e8:	f383 8811 	msr	BASEPRI, r3
 80160ec:	f3bf 8f6f 	isb	sy
 80160f0:	f3bf 8f4f 	dsb	sy
 80160f4:	61fb      	str	r3, [r7, #28]
}
 80160f6:	bf00      	nop
 80160f8:	e7fe      	b.n	80160f8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80160fa:	2350      	movs	r3, #80	; 0x50
 80160fc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80160fe:	697b      	ldr	r3, [r7, #20]
 8016100:	2b50      	cmp	r3, #80	; 0x50
 8016102:	d00a      	beq.n	801611a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8016104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016108:	f383 8811 	msr	BASEPRI, r3
 801610c:	f3bf 8f6f 	isb	sy
 8016110:	f3bf 8f4f 	dsb	sy
 8016114:	61bb      	str	r3, [r7, #24]
}
 8016116:	bf00      	nop
 8016118:	e7fe      	b.n	8016118 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801611a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801611c:	683b      	ldr	r3, [r7, #0]
 801611e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8016120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016122:	2b00      	cmp	r3, #0
 8016124:	d00d      	beq.n	8016142 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8016126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016128:	2201      	movs	r2, #1
 801612a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801612e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8016132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016134:	9300      	str	r3, [sp, #0]
 8016136:	4613      	mov	r3, r2
 8016138:	687a      	ldr	r2, [r7, #4]
 801613a:	68b9      	ldr	r1, [r7, #8]
 801613c:	68f8      	ldr	r0, [r7, #12]
 801613e:	f000 f83f 	bl	80161c0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8016142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8016144:	4618      	mov	r0, r3
 8016146:	3730      	adds	r7, #48	; 0x30
 8016148:	46bd      	mov	sp, r7
 801614a:	bd80      	pop	{r7, pc}

0801614c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 801614c:	b580      	push	{r7, lr}
 801614e:	b08a      	sub	sp, #40	; 0x28
 8016150:	af02      	add	r7, sp, #8
 8016152:	60f8      	str	r0, [r7, #12]
 8016154:	60b9      	str	r1, [r7, #8]
 8016156:	4613      	mov	r3, r2
 8016158:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801615a:	68fb      	ldr	r3, [r7, #12]
 801615c:	2b00      	cmp	r3, #0
 801615e:	d10a      	bne.n	8016176 <xQueueGenericCreate+0x2a>
	__asm volatile
 8016160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016164:	f383 8811 	msr	BASEPRI, r3
 8016168:	f3bf 8f6f 	isb	sy
 801616c:	f3bf 8f4f 	dsb	sy
 8016170:	613b      	str	r3, [r7, #16]
}
 8016172:	bf00      	nop
 8016174:	e7fe      	b.n	8016174 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016176:	68fb      	ldr	r3, [r7, #12]
 8016178:	68ba      	ldr	r2, [r7, #8]
 801617a:	fb02 f303 	mul.w	r3, r2, r3
 801617e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8016180:	69fb      	ldr	r3, [r7, #28]
 8016182:	3350      	adds	r3, #80	; 0x50
 8016184:	4618      	mov	r0, r3
 8016186:	f002 fb47 	bl	8018818 <pvPortMalloc>
 801618a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 801618c:	69bb      	ldr	r3, [r7, #24]
 801618e:	2b00      	cmp	r3, #0
 8016190:	d011      	beq.n	80161b6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8016192:	69bb      	ldr	r3, [r7, #24]
 8016194:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016196:	697b      	ldr	r3, [r7, #20]
 8016198:	3350      	adds	r3, #80	; 0x50
 801619a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 801619c:	69bb      	ldr	r3, [r7, #24]
 801619e:	2200      	movs	r2, #0
 80161a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80161a4:	79fa      	ldrb	r2, [r7, #7]
 80161a6:	69bb      	ldr	r3, [r7, #24]
 80161a8:	9300      	str	r3, [sp, #0]
 80161aa:	4613      	mov	r3, r2
 80161ac:	697a      	ldr	r2, [r7, #20]
 80161ae:	68b9      	ldr	r1, [r7, #8]
 80161b0:	68f8      	ldr	r0, [r7, #12]
 80161b2:	f000 f805 	bl	80161c0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80161b6:	69bb      	ldr	r3, [r7, #24]
	}
 80161b8:	4618      	mov	r0, r3
 80161ba:	3720      	adds	r7, #32
 80161bc:	46bd      	mov	sp, r7
 80161be:	bd80      	pop	{r7, pc}

080161c0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80161c0:	b580      	push	{r7, lr}
 80161c2:	b084      	sub	sp, #16
 80161c4:	af00      	add	r7, sp, #0
 80161c6:	60f8      	str	r0, [r7, #12]
 80161c8:	60b9      	str	r1, [r7, #8]
 80161ca:	607a      	str	r2, [r7, #4]
 80161cc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80161ce:	68bb      	ldr	r3, [r7, #8]
 80161d0:	2b00      	cmp	r3, #0
 80161d2:	d103      	bne.n	80161dc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80161d4:	69bb      	ldr	r3, [r7, #24]
 80161d6:	69ba      	ldr	r2, [r7, #24]
 80161d8:	601a      	str	r2, [r3, #0]
 80161da:	e002      	b.n	80161e2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80161dc:	69bb      	ldr	r3, [r7, #24]
 80161de:	687a      	ldr	r2, [r7, #4]
 80161e0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80161e2:	69bb      	ldr	r3, [r7, #24]
 80161e4:	68fa      	ldr	r2, [r7, #12]
 80161e6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80161e8:	69bb      	ldr	r3, [r7, #24]
 80161ea:	68ba      	ldr	r2, [r7, #8]
 80161ec:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80161ee:	2101      	movs	r1, #1
 80161f0:	69b8      	ldr	r0, [r7, #24]
 80161f2:	f7ff fecb 	bl	8015f8c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80161f6:	69bb      	ldr	r3, [r7, #24]
 80161f8:	78fa      	ldrb	r2, [r7, #3]
 80161fa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 80161fe:	78fb      	ldrb	r3, [r7, #3]
 8016200:	68ba      	ldr	r2, [r7, #8]
 8016202:	68f9      	ldr	r1, [r7, #12]
 8016204:	2073      	movs	r0, #115	; 0x73
 8016206:	f003 f9cf 	bl	80195a8 <SEGGER_SYSVIEW_RecordU32x3>
}
 801620a:	bf00      	nop
 801620c:	3710      	adds	r7, #16
 801620e:	46bd      	mov	sp, r7
 8016210:	bd80      	pop	{r7, pc}
	...

08016214 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8016214:	b580      	push	{r7, lr}
 8016216:	b090      	sub	sp, #64	; 0x40
 8016218:	af02      	add	r7, sp, #8
 801621a:	60f8      	str	r0, [r7, #12]
 801621c:	60b9      	str	r1, [r7, #8]
 801621e:	607a      	str	r2, [r7, #4]
 8016220:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8016222:	2300      	movs	r3, #0
 8016224:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8016226:	68fb      	ldr	r3, [r7, #12]
 8016228:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801622a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801622c:	2b00      	cmp	r3, #0
 801622e:	d10a      	bne.n	8016246 <xQueueGenericSend+0x32>
	__asm volatile
 8016230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016234:	f383 8811 	msr	BASEPRI, r3
 8016238:	f3bf 8f6f 	isb	sy
 801623c:	f3bf 8f4f 	dsb	sy
 8016240:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8016242:	bf00      	nop
 8016244:	e7fe      	b.n	8016244 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016246:	68bb      	ldr	r3, [r7, #8]
 8016248:	2b00      	cmp	r3, #0
 801624a:	d103      	bne.n	8016254 <xQueueGenericSend+0x40>
 801624c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801624e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016250:	2b00      	cmp	r3, #0
 8016252:	d101      	bne.n	8016258 <xQueueGenericSend+0x44>
 8016254:	2301      	movs	r3, #1
 8016256:	e000      	b.n	801625a <xQueueGenericSend+0x46>
 8016258:	2300      	movs	r3, #0
 801625a:	2b00      	cmp	r3, #0
 801625c:	d10a      	bne.n	8016274 <xQueueGenericSend+0x60>
	__asm volatile
 801625e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016262:	f383 8811 	msr	BASEPRI, r3
 8016266:	f3bf 8f6f 	isb	sy
 801626a:	f3bf 8f4f 	dsb	sy
 801626e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8016270:	bf00      	nop
 8016272:	e7fe      	b.n	8016272 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8016274:	683b      	ldr	r3, [r7, #0]
 8016276:	2b02      	cmp	r3, #2
 8016278:	d103      	bne.n	8016282 <xQueueGenericSend+0x6e>
 801627a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801627c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801627e:	2b01      	cmp	r3, #1
 8016280:	d101      	bne.n	8016286 <xQueueGenericSend+0x72>
 8016282:	2301      	movs	r3, #1
 8016284:	e000      	b.n	8016288 <xQueueGenericSend+0x74>
 8016286:	2300      	movs	r3, #0
 8016288:	2b00      	cmp	r3, #0
 801628a:	d10a      	bne.n	80162a2 <xQueueGenericSend+0x8e>
	__asm volatile
 801628c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016290:	f383 8811 	msr	BASEPRI, r3
 8016294:	f3bf 8f6f 	isb	sy
 8016298:	f3bf 8f4f 	dsb	sy
 801629c:	623b      	str	r3, [r7, #32]
}
 801629e:	bf00      	nop
 80162a0:	e7fe      	b.n	80162a0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80162a2:	f001 fc37 	bl	8017b14 <xTaskGetSchedulerState>
 80162a6:	4603      	mov	r3, r0
 80162a8:	2b00      	cmp	r3, #0
 80162aa:	d102      	bne.n	80162b2 <xQueueGenericSend+0x9e>
 80162ac:	687b      	ldr	r3, [r7, #4]
 80162ae:	2b00      	cmp	r3, #0
 80162b0:	d101      	bne.n	80162b6 <xQueueGenericSend+0xa2>
 80162b2:	2301      	movs	r3, #1
 80162b4:	e000      	b.n	80162b8 <xQueueGenericSend+0xa4>
 80162b6:	2300      	movs	r3, #0
 80162b8:	2b00      	cmp	r3, #0
 80162ba:	d10a      	bne.n	80162d2 <xQueueGenericSend+0xbe>
	__asm volatile
 80162bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80162c0:	f383 8811 	msr	BASEPRI, r3
 80162c4:	f3bf 8f6f 	isb	sy
 80162c8:	f3bf 8f4f 	dsb	sy
 80162cc:	61fb      	str	r3, [r7, #28]
}
 80162ce:	bf00      	nop
 80162d0:	e7fe      	b.n	80162d0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80162d2:	f002 f97f 	bl	80185d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80162d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80162da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80162de:	429a      	cmp	r2, r3
 80162e0:	d302      	bcc.n	80162e8 <xQueueGenericSend+0xd4>
 80162e2:	683b      	ldr	r3, [r7, #0]
 80162e4:	2b02      	cmp	r3, #2
 80162e6:	d136      	bne.n	8016356 <xQueueGenericSend+0x142>
			{
				traceQUEUE_SEND( pxQueue );
 80162e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162ea:	4618      	mov	r0, r3
 80162ec:	f003 fe0e 	bl	8019f0c <SEGGER_SYSVIEW_ShrinkId>
 80162f0:	68ba      	ldr	r2, [r7, #8]
 80162f2:	6879      	ldr	r1, [r7, #4]
 80162f4:	683b      	ldr	r3, [r7, #0]
 80162f6:	9300      	str	r3, [sp, #0]
 80162f8:	460b      	mov	r3, r1
 80162fa:	4601      	mov	r1, r0
 80162fc:	205a      	movs	r0, #90	; 0x5a
 80162fe:	f003 f9c9 	bl	8019694 <SEGGER_SYSVIEW_RecordU32x4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8016302:	683a      	ldr	r2, [r7, #0]
 8016304:	68b9      	ldr	r1, [r7, #8]
 8016306:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016308:	f000 fb5e 	bl	80169c8 <prvCopyDataToQueue>
 801630c:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801630e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016312:	2b00      	cmp	r3, #0
 8016314:	d010      	beq.n	8016338 <xQueueGenericSend+0x124>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016318:	3324      	adds	r3, #36	; 0x24
 801631a:	4618      	mov	r0, r3
 801631c:	f001 f9fc 	bl	8017718 <xTaskRemoveFromEventList>
 8016320:	4603      	mov	r3, r0
 8016322:	2b00      	cmp	r3, #0
 8016324:	d013      	beq.n	801634e <xQueueGenericSend+0x13a>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8016326:	4b4d      	ldr	r3, [pc, #308]	; (801645c <xQueueGenericSend+0x248>)
 8016328:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801632c:	601a      	str	r2, [r3, #0]
 801632e:	f3bf 8f4f 	dsb	sy
 8016332:	f3bf 8f6f 	isb	sy
 8016336:	e00a      	b.n	801634e <xQueueGenericSend+0x13a>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8016338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801633a:	2b00      	cmp	r3, #0
 801633c:	d007      	beq.n	801634e <xQueueGenericSend+0x13a>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 801633e:	4b47      	ldr	r3, [pc, #284]	; (801645c <xQueueGenericSend+0x248>)
 8016340:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016344:	601a      	str	r2, [r3, #0]
 8016346:	f3bf 8f4f 	dsb	sy
 801634a:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 801634e:	f002 f971 	bl	8018634 <vPortExitCritical>
				return pdPASS;
 8016352:	2301      	movs	r3, #1
 8016354:	e07d      	b.n	8016452 <xQueueGenericSend+0x23e>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8016356:	687b      	ldr	r3, [r7, #4]
 8016358:	2b00      	cmp	r3, #0
 801635a:	d110      	bne.n	801637e <xQueueGenericSend+0x16a>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801635c:	f002 f96a 	bl	8018634 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 8016360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016362:	4618      	mov	r0, r3
 8016364:	f003 fdd2 	bl	8019f0c <SEGGER_SYSVIEW_ShrinkId>
 8016368:	68ba      	ldr	r2, [r7, #8]
 801636a:	6879      	ldr	r1, [r7, #4]
 801636c:	683b      	ldr	r3, [r7, #0]
 801636e:	9300      	str	r3, [sp, #0]
 8016370:	460b      	mov	r3, r1
 8016372:	4601      	mov	r1, r0
 8016374:	205a      	movs	r0, #90	; 0x5a
 8016376:	f003 f98d 	bl	8019694 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_FULL;
 801637a:	2300      	movs	r3, #0
 801637c:	e069      	b.n	8016452 <xQueueGenericSend+0x23e>
				}
				else if( xEntryTimeSet == pdFALSE )
 801637e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016380:	2b00      	cmp	r3, #0
 8016382:	d106      	bne.n	8016392 <xQueueGenericSend+0x17e>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8016384:	f107 0314 	add.w	r3, r7, #20
 8016388:	4618      	mov	r0, r3
 801638a:	f001 fa2d 	bl	80177e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801638e:	2301      	movs	r3, #1
 8016390:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8016392:	f002 f94f 	bl	8018634 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8016396:	f000 ff65 	bl	8017264 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801639a:	f002 f91b 	bl	80185d4 <vPortEnterCritical>
 801639e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80163a4:	b25b      	sxtb	r3, r3
 80163a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80163aa:	d103      	bne.n	80163b4 <xQueueGenericSend+0x1a0>
 80163ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163ae:	2200      	movs	r2, #0
 80163b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80163b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80163ba:	b25b      	sxtb	r3, r3
 80163bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80163c0:	d103      	bne.n	80163ca <xQueueGenericSend+0x1b6>
 80163c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163c4:	2200      	movs	r2, #0
 80163c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80163ca:	f002 f933 	bl	8018634 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80163ce:	1d3a      	adds	r2, r7, #4
 80163d0:	f107 0314 	add.w	r3, r7, #20
 80163d4:	4611      	mov	r1, r2
 80163d6:	4618      	mov	r0, r3
 80163d8:	f001 fa1c 	bl	8017814 <xTaskCheckForTimeOut>
 80163dc:	4603      	mov	r3, r0
 80163de:	2b00      	cmp	r3, #0
 80163e0:	d124      	bne.n	801642c <xQueueGenericSend+0x218>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80163e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80163e4:	f000 fbe8 	bl	8016bb8 <prvIsQueueFull>
 80163e8:	4603      	mov	r3, r0
 80163ea:	2b00      	cmp	r3, #0
 80163ec:	d018      	beq.n	8016420 <xQueueGenericSend+0x20c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80163ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163f0:	3310      	adds	r3, #16
 80163f2:	687a      	ldr	r2, [r7, #4]
 80163f4:	4611      	mov	r1, r2
 80163f6:	4618      	mov	r0, r3
 80163f8:	f001 f93c 	bl	8017674 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80163fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80163fe:	f000 fb73 	bl	8016ae8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8016402:	f000 ff3d 	bl	8017280 <xTaskResumeAll>
 8016406:	4603      	mov	r3, r0
 8016408:	2b00      	cmp	r3, #0
 801640a:	f47f af62 	bne.w	80162d2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 801640e:	4b13      	ldr	r3, [pc, #76]	; (801645c <xQueueGenericSend+0x248>)
 8016410:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016414:	601a      	str	r2, [r3, #0]
 8016416:	f3bf 8f4f 	dsb	sy
 801641a:	f3bf 8f6f 	isb	sy
 801641e:	e758      	b.n	80162d2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8016420:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016422:	f000 fb61 	bl	8016ae8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8016426:	f000 ff2b 	bl	8017280 <xTaskResumeAll>
 801642a:	e752      	b.n	80162d2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 801642c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801642e:	f000 fb5b 	bl	8016ae8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8016432:	f000 ff25 	bl	8017280 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 8016436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016438:	4618      	mov	r0, r3
 801643a:	f003 fd67 	bl	8019f0c <SEGGER_SYSVIEW_ShrinkId>
 801643e:	68ba      	ldr	r2, [r7, #8]
 8016440:	6879      	ldr	r1, [r7, #4]
 8016442:	683b      	ldr	r3, [r7, #0]
 8016444:	9300      	str	r3, [sp, #0]
 8016446:	460b      	mov	r3, r1
 8016448:	4601      	mov	r1, r0
 801644a:	205a      	movs	r0, #90	; 0x5a
 801644c:	f003 f922 	bl	8019694 <SEGGER_SYSVIEW_RecordU32x4>
			return errQUEUE_FULL;
 8016450:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8016452:	4618      	mov	r0, r3
 8016454:	3738      	adds	r7, #56	; 0x38
 8016456:	46bd      	mov	sp, r7
 8016458:	bd80      	pop	{r7, pc}
 801645a:	bf00      	nop
 801645c:	e000ed04 	.word	0xe000ed04

08016460 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8016460:	b580      	push	{r7, lr}
 8016462:	b090      	sub	sp, #64	; 0x40
 8016464:	af00      	add	r7, sp, #0
 8016466:	60f8      	str	r0, [r7, #12]
 8016468:	60b9      	str	r1, [r7, #8]
 801646a:	607a      	str	r2, [r7, #4]
 801646c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801646e:	68fb      	ldr	r3, [r7, #12]
 8016470:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8016472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016474:	2b00      	cmp	r3, #0
 8016476:	d10a      	bne.n	801648e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8016478:	f04f 0350 	mov.w	r3, #80	; 0x50
 801647c:	f383 8811 	msr	BASEPRI, r3
 8016480:	f3bf 8f6f 	isb	sy
 8016484:	f3bf 8f4f 	dsb	sy
 8016488:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801648a:	bf00      	nop
 801648c:	e7fe      	b.n	801648c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801648e:	68bb      	ldr	r3, [r7, #8]
 8016490:	2b00      	cmp	r3, #0
 8016492:	d103      	bne.n	801649c <xQueueGenericSendFromISR+0x3c>
 8016494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016498:	2b00      	cmp	r3, #0
 801649a:	d101      	bne.n	80164a0 <xQueueGenericSendFromISR+0x40>
 801649c:	2301      	movs	r3, #1
 801649e:	e000      	b.n	80164a2 <xQueueGenericSendFromISR+0x42>
 80164a0:	2300      	movs	r3, #0
 80164a2:	2b00      	cmp	r3, #0
 80164a4:	d10a      	bne.n	80164bc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80164a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80164aa:	f383 8811 	msr	BASEPRI, r3
 80164ae:	f3bf 8f6f 	isb	sy
 80164b2:	f3bf 8f4f 	dsb	sy
 80164b6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80164b8:	bf00      	nop
 80164ba:	e7fe      	b.n	80164ba <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80164bc:	683b      	ldr	r3, [r7, #0]
 80164be:	2b02      	cmp	r3, #2
 80164c0:	d103      	bne.n	80164ca <xQueueGenericSendFromISR+0x6a>
 80164c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80164c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80164c6:	2b01      	cmp	r3, #1
 80164c8:	d101      	bne.n	80164ce <xQueueGenericSendFromISR+0x6e>
 80164ca:	2301      	movs	r3, #1
 80164cc:	e000      	b.n	80164d0 <xQueueGenericSendFromISR+0x70>
 80164ce:	2300      	movs	r3, #0
 80164d0:	2b00      	cmp	r3, #0
 80164d2:	d10a      	bne.n	80164ea <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80164d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80164d8:	f383 8811 	msr	BASEPRI, r3
 80164dc:	f3bf 8f6f 	isb	sy
 80164e0:	f3bf 8f4f 	dsb	sy
 80164e4:	623b      	str	r3, [r7, #32]
}
 80164e6:	bf00      	nop
 80164e8:	e7fe      	b.n	80164e8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80164ea:	f002 f955 	bl	8018798 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80164ee:	f3ef 8211 	mrs	r2, BASEPRI
 80164f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80164f6:	f383 8811 	msr	BASEPRI, r3
 80164fa:	f3bf 8f6f 	isb	sy
 80164fe:	f3bf 8f4f 	dsb	sy
 8016502:	61fa      	str	r2, [r7, #28]
 8016504:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8016506:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8016508:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801650a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801650c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801650e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016512:	429a      	cmp	r2, r3
 8016514:	d302      	bcc.n	801651c <xQueueGenericSendFromISR+0xbc>
 8016516:	683b      	ldr	r3, [r7, #0]
 8016518:	2b02      	cmp	r3, #2
 801651a:	d139      	bne.n	8016590 <xQueueGenericSendFromISR+0x130>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801651c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801651e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016522:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801652a:	62fb      	str	r3, [r7, #44]	; 0x2c

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 801652c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801652e:	4618      	mov	r0, r3
 8016530:	f003 fcec 	bl	8019f0c <SEGGER_SYSVIEW_ShrinkId>
 8016534:	4601      	mov	r1, r0
 8016536:	687b      	ldr	r3, [r7, #4]
 8016538:	461a      	mov	r2, r3
 801653a:	2060      	movs	r0, #96	; 0x60
 801653c:	f002 ffda 	bl	80194f4 <SEGGER_SYSVIEW_RecordU32x2>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8016540:	683a      	ldr	r2, [r7, #0]
 8016542:	68b9      	ldr	r1, [r7, #8]
 8016544:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8016546:	f000 fa3f 	bl	80169c8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801654a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 801654e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016552:	d112      	bne.n	801657a <xQueueGenericSendFromISR+0x11a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016558:	2b00      	cmp	r3, #0
 801655a:	d016      	beq.n	801658a <xQueueGenericSendFromISR+0x12a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801655c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801655e:	3324      	adds	r3, #36	; 0x24
 8016560:	4618      	mov	r0, r3
 8016562:	f001 f8d9 	bl	8017718 <xTaskRemoveFromEventList>
 8016566:	4603      	mov	r3, r0
 8016568:	2b00      	cmp	r3, #0
 801656a:	d00e      	beq.n	801658a <xQueueGenericSendFromISR+0x12a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801656c:	687b      	ldr	r3, [r7, #4]
 801656e:	2b00      	cmp	r3, #0
 8016570:	d00b      	beq.n	801658a <xQueueGenericSendFromISR+0x12a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8016572:	687b      	ldr	r3, [r7, #4]
 8016574:	2201      	movs	r2, #1
 8016576:	601a      	str	r2, [r3, #0]
 8016578:	e007      	b.n	801658a <xQueueGenericSendFromISR+0x12a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801657a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801657e:	3301      	adds	r3, #1
 8016580:	b2db      	uxtb	r3, r3
 8016582:	b25a      	sxtb	r2, r3
 8016584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016586:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801658a:	2301      	movs	r3, #1
 801658c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 801658e:	e00b      	b.n	80165a8 <xQueueGenericSendFromISR+0x148>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8016590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016592:	4618      	mov	r0, r3
 8016594:	f003 fcba 	bl	8019f0c <SEGGER_SYSVIEW_ShrinkId>
 8016598:	4601      	mov	r1, r0
 801659a:	687b      	ldr	r3, [r7, #4]
 801659c:	461a      	mov	r2, r3
 801659e:	2060      	movs	r0, #96	; 0x60
 80165a0:	f002 ffa8 	bl	80194f4 <SEGGER_SYSVIEW_RecordU32x2>
			xReturn = errQUEUE_FULL;
 80165a4:	2300      	movs	r3, #0
 80165a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80165a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80165aa:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80165ac:	697b      	ldr	r3, [r7, #20]
 80165ae:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80165b2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80165b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80165b6:	4618      	mov	r0, r3
 80165b8:	3740      	adds	r7, #64	; 0x40
 80165ba:	46bd      	mov	sp, r7
 80165bc:	bd80      	pop	{r7, pc}
	...

080165c0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80165c0:	b590      	push	{r4, r7, lr}
 80165c2:	b08f      	sub	sp, #60	; 0x3c
 80165c4:	af02      	add	r7, sp, #8
 80165c6:	60f8      	str	r0, [r7, #12]
 80165c8:	60b9      	str	r1, [r7, #8]
 80165ca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80165cc:	2300      	movs	r3, #0
 80165ce:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80165d0:	68fb      	ldr	r3, [r7, #12]
 80165d2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80165d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165d6:	2b00      	cmp	r3, #0
 80165d8:	d10a      	bne.n	80165f0 <xQueueReceive+0x30>
	__asm volatile
 80165da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80165de:	f383 8811 	msr	BASEPRI, r3
 80165e2:	f3bf 8f6f 	isb	sy
 80165e6:	f3bf 8f4f 	dsb	sy
 80165ea:	623b      	str	r3, [r7, #32]
}
 80165ec:	bf00      	nop
 80165ee:	e7fe      	b.n	80165ee <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80165f0:	68bb      	ldr	r3, [r7, #8]
 80165f2:	2b00      	cmp	r3, #0
 80165f4:	d103      	bne.n	80165fe <xQueueReceive+0x3e>
 80165f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80165fa:	2b00      	cmp	r3, #0
 80165fc:	d101      	bne.n	8016602 <xQueueReceive+0x42>
 80165fe:	2301      	movs	r3, #1
 8016600:	e000      	b.n	8016604 <xQueueReceive+0x44>
 8016602:	2300      	movs	r3, #0
 8016604:	2b00      	cmp	r3, #0
 8016606:	d10a      	bne.n	801661e <xQueueReceive+0x5e>
	__asm volatile
 8016608:	f04f 0350 	mov.w	r3, #80	; 0x50
 801660c:	f383 8811 	msr	BASEPRI, r3
 8016610:	f3bf 8f6f 	isb	sy
 8016614:	f3bf 8f4f 	dsb	sy
 8016618:	61fb      	str	r3, [r7, #28]
}
 801661a:	bf00      	nop
 801661c:	e7fe      	b.n	801661c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801661e:	f001 fa79 	bl	8017b14 <xTaskGetSchedulerState>
 8016622:	4603      	mov	r3, r0
 8016624:	2b00      	cmp	r3, #0
 8016626:	d102      	bne.n	801662e <xQueueReceive+0x6e>
 8016628:	687b      	ldr	r3, [r7, #4]
 801662a:	2b00      	cmp	r3, #0
 801662c:	d101      	bne.n	8016632 <xQueueReceive+0x72>
 801662e:	2301      	movs	r3, #1
 8016630:	e000      	b.n	8016634 <xQueueReceive+0x74>
 8016632:	2300      	movs	r3, #0
 8016634:	2b00      	cmp	r3, #0
 8016636:	d10a      	bne.n	801664e <xQueueReceive+0x8e>
	__asm volatile
 8016638:	f04f 0350 	mov.w	r3, #80	; 0x50
 801663c:	f383 8811 	msr	BASEPRI, r3
 8016640:	f3bf 8f6f 	isb	sy
 8016644:	f3bf 8f4f 	dsb	sy
 8016648:	61bb      	str	r3, [r7, #24]
}
 801664a:	bf00      	nop
 801664c:	e7fe      	b.n	801664c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801664e:	f001 ffc1 	bl	80185d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016656:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8016658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801665a:	2b00      	cmp	r3, #0
 801665c:	d02f      	beq.n	80166be <xQueueReceive+0xfe>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801665e:	68b9      	ldr	r1, [r7, #8]
 8016660:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016662:	f000 fa1b 	bl	8016a9c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
 8016666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016668:	4618      	mov	r0, r3
 801666a:	f003 fc4f 	bl	8019f0c <SEGGER_SYSVIEW_ShrinkId>
 801666e:	4604      	mov	r4, r0
 8016670:	2000      	movs	r0, #0
 8016672:	f003 fc4b 	bl	8019f0c <SEGGER_SYSVIEW_ShrinkId>
 8016676:	4602      	mov	r2, r0
 8016678:	687b      	ldr	r3, [r7, #4]
 801667a:	2101      	movs	r1, #1
 801667c:	9100      	str	r1, [sp, #0]
 801667e:	4621      	mov	r1, r4
 8016680:	205c      	movs	r0, #92	; 0x5c
 8016682:	f003 f807 	bl	8019694 <SEGGER_SYSVIEW_RecordU32x4>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8016686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016688:	1e5a      	subs	r2, r3, #1
 801668a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801668c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801668e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016690:	691b      	ldr	r3, [r3, #16]
 8016692:	2b00      	cmp	r3, #0
 8016694:	d00f      	beq.n	80166b6 <xQueueReceive+0xf6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016698:	3310      	adds	r3, #16
 801669a:	4618      	mov	r0, r3
 801669c:	f001 f83c 	bl	8017718 <xTaskRemoveFromEventList>
 80166a0:	4603      	mov	r3, r0
 80166a2:	2b00      	cmp	r3, #0
 80166a4:	d007      	beq.n	80166b6 <xQueueReceive+0xf6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80166a6:	4b4d      	ldr	r3, [pc, #308]	; (80167dc <xQueueReceive+0x21c>)
 80166a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80166ac:	601a      	str	r2, [r3, #0]
 80166ae:	f3bf 8f4f 	dsb	sy
 80166b2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80166b6:	f001 ffbd 	bl	8018634 <vPortExitCritical>
				return pdPASS;
 80166ba:	2301      	movs	r3, #1
 80166bc:	e08a      	b.n	80167d4 <xQueueReceive+0x214>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80166be:	687b      	ldr	r3, [r7, #4]
 80166c0:	2b00      	cmp	r3, #0
 80166c2:	d113      	bne.n	80166ec <xQueueReceive+0x12c>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80166c4:	f001 ffb6 	bl	8018634 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 80166c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80166ca:	4618      	mov	r0, r3
 80166cc:	f003 fc1e 	bl	8019f0c <SEGGER_SYSVIEW_ShrinkId>
 80166d0:	4604      	mov	r4, r0
 80166d2:	2000      	movs	r0, #0
 80166d4:	f003 fc1a 	bl	8019f0c <SEGGER_SYSVIEW_ShrinkId>
 80166d8:	4602      	mov	r2, r0
 80166da:	687b      	ldr	r3, [r7, #4]
 80166dc:	2101      	movs	r1, #1
 80166de:	9100      	str	r1, [sp, #0]
 80166e0:	4621      	mov	r1, r4
 80166e2:	205c      	movs	r0, #92	; 0x5c
 80166e4:	f002 ffd6 	bl	8019694 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 80166e8:	2300      	movs	r3, #0
 80166ea:	e073      	b.n	80167d4 <xQueueReceive+0x214>
				}
				else if( xEntryTimeSet == pdFALSE )
 80166ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80166ee:	2b00      	cmp	r3, #0
 80166f0:	d106      	bne.n	8016700 <xQueueReceive+0x140>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80166f2:	f107 0310 	add.w	r3, r7, #16
 80166f6:	4618      	mov	r0, r3
 80166f8:	f001 f876 	bl	80177e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80166fc:	2301      	movs	r3, #1
 80166fe:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8016700:	f001 ff98 	bl	8018634 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8016704:	f000 fdae 	bl	8017264 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8016708:	f001 ff64 	bl	80185d4 <vPortEnterCritical>
 801670c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801670e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016712:	b25b      	sxtb	r3, r3
 8016714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016718:	d103      	bne.n	8016722 <xQueueReceive+0x162>
 801671a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801671c:	2200      	movs	r2, #0
 801671e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8016722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016724:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016728:	b25b      	sxtb	r3, r3
 801672a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801672e:	d103      	bne.n	8016738 <xQueueReceive+0x178>
 8016730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016732:	2200      	movs	r2, #0
 8016734:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8016738:	f001 ff7c 	bl	8018634 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801673c:	1d3a      	adds	r2, r7, #4
 801673e:	f107 0310 	add.w	r3, r7, #16
 8016742:	4611      	mov	r1, r2
 8016744:	4618      	mov	r0, r3
 8016746:	f001 f865 	bl	8017814 <xTaskCheckForTimeOut>
 801674a:	4603      	mov	r3, r0
 801674c:	2b00      	cmp	r3, #0
 801674e:	d124      	bne.n	801679a <xQueueReceive+0x1da>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8016750:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016752:	f000 fa1b 	bl	8016b8c <prvIsQueueEmpty>
 8016756:	4603      	mov	r3, r0
 8016758:	2b00      	cmp	r3, #0
 801675a:	d018      	beq.n	801678e <xQueueReceive+0x1ce>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801675c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801675e:	3324      	adds	r3, #36	; 0x24
 8016760:	687a      	ldr	r2, [r7, #4]
 8016762:	4611      	mov	r1, r2
 8016764:	4618      	mov	r0, r3
 8016766:	f000 ff85 	bl	8017674 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801676a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801676c:	f000 f9bc 	bl	8016ae8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8016770:	f000 fd86 	bl	8017280 <xTaskResumeAll>
 8016774:	4603      	mov	r3, r0
 8016776:	2b00      	cmp	r3, #0
 8016778:	f47f af69 	bne.w	801664e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 801677c:	4b17      	ldr	r3, [pc, #92]	; (80167dc <xQueueReceive+0x21c>)
 801677e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016782:	601a      	str	r2, [r3, #0]
 8016784:	f3bf 8f4f 	dsb	sy
 8016788:	f3bf 8f6f 	isb	sy
 801678c:	e75f      	b.n	801664e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801678e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016790:	f000 f9aa 	bl	8016ae8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8016794:	f000 fd74 	bl	8017280 <xTaskResumeAll>
 8016798:	e759      	b.n	801664e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801679a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801679c:	f000 f9a4 	bl	8016ae8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80167a0:	f000 fd6e 	bl	8017280 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80167a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80167a6:	f000 f9f1 	bl	8016b8c <prvIsQueueEmpty>
 80167aa:	4603      	mov	r3, r0
 80167ac:	2b00      	cmp	r3, #0
 80167ae:	f43f af4e 	beq.w	801664e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 80167b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80167b4:	4618      	mov	r0, r3
 80167b6:	f003 fba9 	bl	8019f0c <SEGGER_SYSVIEW_ShrinkId>
 80167ba:	4604      	mov	r4, r0
 80167bc:	2000      	movs	r0, #0
 80167be:	f003 fba5 	bl	8019f0c <SEGGER_SYSVIEW_ShrinkId>
 80167c2:	4602      	mov	r2, r0
 80167c4:	687b      	ldr	r3, [r7, #4]
 80167c6:	2101      	movs	r1, #1
 80167c8:	9100      	str	r1, [sp, #0]
 80167ca:	4621      	mov	r1, r4
 80167cc:	205c      	movs	r0, #92	; 0x5c
 80167ce:	f002 ff61 	bl	8019694 <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 80167d2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80167d4:	4618      	mov	r0, r3
 80167d6:	3734      	adds	r7, #52	; 0x34
 80167d8:	46bd      	mov	sp, r7
 80167da:	bd90      	pop	{r4, r7, pc}
 80167dc:	e000ed04 	.word	0xe000ed04

080167e0 <xQueuePeek>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80167e0:	b590      	push	{r4, r7, lr}
 80167e2:	b091      	sub	sp, #68	; 0x44
 80167e4:	af02      	add	r7, sp, #8
 80167e6:	60f8      	str	r0, [r7, #12]
 80167e8:	60b9      	str	r1, [r7, #8]
 80167ea:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80167ec:	2300      	movs	r3, #0
 80167ee:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = xQueue;
 80167f0:	68fb      	ldr	r3, [r7, #12]
 80167f2:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80167f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80167f6:	2b00      	cmp	r3, #0
 80167f8:	d10a      	bne.n	8016810 <xQueuePeek+0x30>
	__asm volatile
 80167fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80167fe:	f383 8811 	msr	BASEPRI, r3
 8016802:	f3bf 8f6f 	isb	sy
 8016806:	f3bf 8f4f 	dsb	sy
 801680a:	627b      	str	r3, [r7, #36]	; 0x24
}
 801680c:	bf00      	nop
 801680e:	e7fe      	b.n	801680e <xQueuePeek+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016810:	68bb      	ldr	r3, [r7, #8]
 8016812:	2b00      	cmp	r3, #0
 8016814:	d103      	bne.n	801681e <xQueuePeek+0x3e>
 8016816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801681a:	2b00      	cmp	r3, #0
 801681c:	d101      	bne.n	8016822 <xQueuePeek+0x42>
 801681e:	2301      	movs	r3, #1
 8016820:	e000      	b.n	8016824 <xQueuePeek+0x44>
 8016822:	2300      	movs	r3, #0
 8016824:	2b00      	cmp	r3, #0
 8016826:	d10a      	bne.n	801683e <xQueuePeek+0x5e>
	__asm volatile
 8016828:	f04f 0350 	mov.w	r3, #80	; 0x50
 801682c:	f383 8811 	msr	BASEPRI, r3
 8016830:	f3bf 8f6f 	isb	sy
 8016834:	f3bf 8f4f 	dsb	sy
 8016838:	623b      	str	r3, [r7, #32]
}
 801683a:	bf00      	nop
 801683c:	e7fe      	b.n	801683c <xQueuePeek+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801683e:	f001 f969 	bl	8017b14 <xTaskGetSchedulerState>
 8016842:	4603      	mov	r3, r0
 8016844:	2b00      	cmp	r3, #0
 8016846:	d102      	bne.n	801684e <xQueuePeek+0x6e>
 8016848:	687b      	ldr	r3, [r7, #4]
 801684a:	2b00      	cmp	r3, #0
 801684c:	d101      	bne.n	8016852 <xQueuePeek+0x72>
 801684e:	2301      	movs	r3, #1
 8016850:	e000      	b.n	8016854 <xQueuePeek+0x74>
 8016852:	2300      	movs	r3, #0
 8016854:	2b00      	cmp	r3, #0
 8016856:	d10a      	bne.n	801686e <xQueuePeek+0x8e>
	__asm volatile
 8016858:	f04f 0350 	mov.w	r3, #80	; 0x50
 801685c:	f383 8811 	msr	BASEPRI, r3
 8016860:	f3bf 8f6f 	isb	sy
 8016864:	f3bf 8f4f 	dsb	sy
 8016868:	61fb      	str	r3, [r7, #28]
}
 801686a:	bf00      	nop
 801686c:	e7fe      	b.n	801686c <xQueuePeek+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801686e:	f001 feb1 	bl	80185d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016876:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8016878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801687a:	2b00      	cmp	r3, #0
 801687c:	d032      	beq.n	80168e4 <xQueuePeek+0x104>
			{
				/* Remember the read position so it can be reset after the data
				is read from the queue as this function is only peeking the
				data, not removing it. */
				pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 801687e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016880:	68db      	ldr	r3, [r3, #12]
 8016882:	62bb      	str	r3, [r7, #40]	; 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8016884:	68b9      	ldr	r1, [r7, #8]
 8016886:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016888:	f000 f908 	bl	8016a9c <prvCopyDataFromQueue>
				traceQUEUE_PEEK( pxQueue );
 801688c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801688e:	4618      	mov	r0, r3
 8016890:	f003 fb3c 	bl	8019f0c <SEGGER_SYSVIEW_ShrinkId>
 8016894:	4604      	mov	r4, r0
 8016896:	68bb      	ldr	r3, [r7, #8]
 8016898:	4618      	mov	r0, r3
 801689a:	f003 fb37 	bl	8019f0c <SEGGER_SYSVIEW_ShrinkId>
 801689e:	4602      	mov	r2, r0
 80168a0:	687b      	ldr	r3, [r7, #4]
 80168a2:	2101      	movs	r1, #1
 80168a4:	9100      	str	r1, [sp, #0]
 80168a6:	4621      	mov	r1, r4
 80168a8:	205c      	movs	r0, #92	; 0x5c
 80168aa:	f002 fef3 	bl	8019694 <SEGGER_SYSVIEW_RecordU32x4>

				/* The data is not being removed, so reset the read pointer. */
				pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 80168ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80168b2:	60da      	str	r2, [r3, #12]

				/* The data is being left in the queue, so see if there are
				any other tasks waiting for the data. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80168b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80168b8:	2b00      	cmp	r3, #0
 80168ba:	d00f      	beq.n	80168dc <xQueuePeek+0xfc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80168bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168be:	3324      	adds	r3, #36	; 0x24
 80168c0:	4618      	mov	r0, r3
 80168c2:	f000 ff29 	bl	8017718 <xTaskRemoveFromEventList>
 80168c6:	4603      	mov	r3, r0
 80168c8:	2b00      	cmp	r3, #0
 80168ca:	d007      	beq.n	80168dc <xQueuePeek+0xfc>
					{
						/* The task waiting has a higher priority than this task. */
						queueYIELD_IF_USING_PREEMPTION();
 80168cc:	4b3d      	ldr	r3, [pc, #244]	; (80169c4 <xQueuePeek+0x1e4>)
 80168ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80168d2:	601a      	str	r2, [r3, #0]
 80168d4:	f3bf 8f4f 	dsb	sy
 80168d8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80168dc:	f001 feaa 	bl	8018634 <vPortExitCritical>
				return pdPASS;
 80168e0:	2301      	movs	r3, #1
 80168e2:	e06a      	b.n	80169ba <xQueuePeek+0x1da>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80168e4:	687b      	ldr	r3, [r7, #4]
 80168e6:	2b00      	cmp	r3, #0
 80168e8:	d103      	bne.n	80168f2 <xQueuePeek+0x112>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80168ea:	f001 fea3 	bl	8018634 <vPortExitCritical>
					traceQUEUE_PEEK_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80168ee:	2300      	movs	r3, #0
 80168f0:	e063      	b.n	80169ba <xQueuePeek+0x1da>
				}
				else if( xEntryTimeSet == pdFALSE )
 80168f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80168f4:	2b00      	cmp	r3, #0
 80168f6:	d106      	bne.n	8016906 <xQueuePeek+0x126>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure ready to enter the blocked
					state. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80168f8:	f107 0314 	add.w	r3, r7, #20
 80168fc:	4618      	mov	r0, r3
 80168fe:	f000 ff73 	bl	80177e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8016902:	2301      	movs	r3, #1
 8016904:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8016906:	f001 fe95 	bl	8018634 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801690a:	f000 fcab 	bl	8017264 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801690e:	f001 fe61 	bl	80185d4 <vPortEnterCritical>
 8016912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016914:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016918:	b25b      	sxtb	r3, r3
 801691a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801691e:	d103      	bne.n	8016928 <xQueuePeek+0x148>
 8016920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016922:	2200      	movs	r2, #0
 8016924:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8016928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801692a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801692e:	b25b      	sxtb	r3, r3
 8016930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016934:	d103      	bne.n	801693e <xQueuePeek+0x15e>
 8016936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016938:	2200      	movs	r2, #0
 801693a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801693e:	f001 fe79 	bl	8018634 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8016942:	1d3a      	adds	r2, r7, #4
 8016944:	f107 0314 	add.w	r3, r7, #20
 8016948:	4611      	mov	r1, r2
 801694a:	4618      	mov	r0, r3
 801694c:	f000 ff62 	bl	8017814 <xTaskCheckForTimeOut>
 8016950:	4603      	mov	r3, r0
 8016952:	2b00      	cmp	r3, #0
 8016954:	d124      	bne.n	80169a0 <xQueuePeek+0x1c0>
		{
			/* Timeout has not expired yet, check to see if there is data in the
			queue now, and if not enter the Blocked state to wait for data. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8016956:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016958:	f000 f918 	bl	8016b8c <prvIsQueueEmpty>
 801695c:	4603      	mov	r3, r0
 801695e:	2b00      	cmp	r3, #0
 8016960:	d018      	beq.n	8016994 <xQueuePeek+0x1b4>
			{
				traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8016962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016964:	3324      	adds	r3, #36	; 0x24
 8016966:	687a      	ldr	r2, [r7, #4]
 8016968:	4611      	mov	r1, r2
 801696a:	4618      	mov	r0, r3
 801696c:	f000 fe82 	bl	8017674 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8016970:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016972:	f000 f8b9 	bl	8016ae8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8016976:	f000 fc83 	bl	8017280 <xTaskResumeAll>
 801697a:	4603      	mov	r3, r0
 801697c:	2b00      	cmp	r3, #0
 801697e:	f47f af76 	bne.w	801686e <xQueuePeek+0x8e>
				{
					portYIELD_WITHIN_API();
 8016982:	4b10      	ldr	r3, [pc, #64]	; (80169c4 <xQueuePeek+0x1e4>)
 8016984:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016988:	601a      	str	r2, [r3, #0]
 801698a:	f3bf 8f4f 	dsb	sy
 801698e:	f3bf 8f6f 	isb	sy
 8016992:	e76c      	b.n	801686e <xQueuePeek+0x8e>
			}
			else
			{
				/* There is data in the queue now, so don't enter the blocked
				state, instead return to try and obtain the data. */
				prvUnlockQueue( pxQueue );
 8016994:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016996:	f000 f8a7 	bl	8016ae8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801699a:	f000 fc71 	bl	8017280 <xTaskResumeAll>
 801699e:	e766      	b.n	801686e <xQueuePeek+0x8e>
		}
		else
		{
			/* The timeout has expired.  If there is still no data in the queue
			exit, otherwise go back and try to read the data again. */
			prvUnlockQueue( pxQueue );
 80169a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80169a2:	f000 f8a1 	bl	8016ae8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80169a6:	f000 fc6b 	bl	8017280 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80169aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80169ac:	f000 f8ee 	bl	8016b8c <prvIsQueueEmpty>
 80169b0:	4603      	mov	r3, r0
 80169b2:	2b00      	cmp	r3, #0
 80169b4:	f43f af5b 	beq.w	801686e <xQueuePeek+0x8e>
			{
				traceQUEUE_PEEK_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80169b8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80169ba:	4618      	mov	r0, r3
 80169bc:	373c      	adds	r7, #60	; 0x3c
 80169be:	46bd      	mov	sp, r7
 80169c0:	bd90      	pop	{r4, r7, pc}
 80169c2:	bf00      	nop
 80169c4:	e000ed04 	.word	0xe000ed04

080169c8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80169c8:	b580      	push	{r7, lr}
 80169ca:	b086      	sub	sp, #24
 80169cc:	af00      	add	r7, sp, #0
 80169ce:	60f8      	str	r0, [r7, #12]
 80169d0:	60b9      	str	r1, [r7, #8]
 80169d2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80169d4:	2300      	movs	r3, #0
 80169d6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80169d8:	68fb      	ldr	r3, [r7, #12]
 80169da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80169dc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80169de:	68fb      	ldr	r3, [r7, #12]
 80169e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80169e2:	2b00      	cmp	r3, #0
 80169e4:	d10d      	bne.n	8016a02 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80169e6:	68fb      	ldr	r3, [r7, #12]
 80169e8:	681b      	ldr	r3, [r3, #0]
 80169ea:	2b00      	cmp	r3, #0
 80169ec:	d14d      	bne.n	8016a8a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80169ee:	68fb      	ldr	r3, [r7, #12]
 80169f0:	689b      	ldr	r3, [r3, #8]
 80169f2:	4618      	mov	r0, r3
 80169f4:	f001 f8ac 	bl	8017b50 <xTaskPriorityDisinherit>
 80169f8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80169fa:	68fb      	ldr	r3, [r7, #12]
 80169fc:	2200      	movs	r2, #0
 80169fe:	609a      	str	r2, [r3, #8]
 8016a00:	e043      	b.n	8016a8a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8016a02:	687b      	ldr	r3, [r7, #4]
 8016a04:	2b00      	cmp	r3, #0
 8016a06:	d119      	bne.n	8016a3c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8016a08:	68fb      	ldr	r3, [r7, #12]
 8016a0a:	6858      	ldr	r0, [r3, #4]
 8016a0c:	68fb      	ldr	r3, [r7, #12]
 8016a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016a10:	461a      	mov	r2, r3
 8016a12:	68b9      	ldr	r1, [r7, #8]
 8016a14:	f003 fc1a 	bl	801a24c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8016a18:	68fb      	ldr	r3, [r7, #12]
 8016a1a:	685a      	ldr	r2, [r3, #4]
 8016a1c:	68fb      	ldr	r3, [r7, #12]
 8016a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016a20:	441a      	add	r2, r3
 8016a22:	68fb      	ldr	r3, [r7, #12]
 8016a24:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8016a26:	68fb      	ldr	r3, [r7, #12]
 8016a28:	685a      	ldr	r2, [r3, #4]
 8016a2a:	68fb      	ldr	r3, [r7, #12]
 8016a2c:	689b      	ldr	r3, [r3, #8]
 8016a2e:	429a      	cmp	r2, r3
 8016a30:	d32b      	bcc.n	8016a8a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8016a32:	68fb      	ldr	r3, [r7, #12]
 8016a34:	681a      	ldr	r2, [r3, #0]
 8016a36:	68fb      	ldr	r3, [r7, #12]
 8016a38:	605a      	str	r2, [r3, #4]
 8016a3a:	e026      	b.n	8016a8a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8016a3c:	68fb      	ldr	r3, [r7, #12]
 8016a3e:	68d8      	ldr	r0, [r3, #12]
 8016a40:	68fb      	ldr	r3, [r7, #12]
 8016a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016a44:	461a      	mov	r2, r3
 8016a46:	68b9      	ldr	r1, [r7, #8]
 8016a48:	f003 fc00 	bl	801a24c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8016a4c:	68fb      	ldr	r3, [r7, #12]
 8016a4e:	68da      	ldr	r2, [r3, #12]
 8016a50:	68fb      	ldr	r3, [r7, #12]
 8016a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016a54:	425b      	negs	r3, r3
 8016a56:	441a      	add	r2, r3
 8016a58:	68fb      	ldr	r3, [r7, #12]
 8016a5a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8016a5c:	68fb      	ldr	r3, [r7, #12]
 8016a5e:	68da      	ldr	r2, [r3, #12]
 8016a60:	68fb      	ldr	r3, [r7, #12]
 8016a62:	681b      	ldr	r3, [r3, #0]
 8016a64:	429a      	cmp	r2, r3
 8016a66:	d207      	bcs.n	8016a78 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8016a68:	68fb      	ldr	r3, [r7, #12]
 8016a6a:	689a      	ldr	r2, [r3, #8]
 8016a6c:	68fb      	ldr	r3, [r7, #12]
 8016a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016a70:	425b      	negs	r3, r3
 8016a72:	441a      	add	r2, r3
 8016a74:	68fb      	ldr	r3, [r7, #12]
 8016a76:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8016a78:	687b      	ldr	r3, [r7, #4]
 8016a7a:	2b02      	cmp	r3, #2
 8016a7c:	d105      	bne.n	8016a8a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8016a7e:	693b      	ldr	r3, [r7, #16]
 8016a80:	2b00      	cmp	r3, #0
 8016a82:	d002      	beq.n	8016a8a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8016a84:	693b      	ldr	r3, [r7, #16]
 8016a86:	3b01      	subs	r3, #1
 8016a88:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8016a8a:	693b      	ldr	r3, [r7, #16]
 8016a8c:	1c5a      	adds	r2, r3, #1
 8016a8e:	68fb      	ldr	r3, [r7, #12]
 8016a90:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8016a92:	697b      	ldr	r3, [r7, #20]
}
 8016a94:	4618      	mov	r0, r3
 8016a96:	3718      	adds	r7, #24
 8016a98:	46bd      	mov	sp, r7
 8016a9a:	bd80      	pop	{r7, pc}

08016a9c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8016a9c:	b580      	push	{r7, lr}
 8016a9e:	b082      	sub	sp, #8
 8016aa0:	af00      	add	r7, sp, #0
 8016aa2:	6078      	str	r0, [r7, #4]
 8016aa4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8016aa6:	687b      	ldr	r3, [r7, #4]
 8016aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016aaa:	2b00      	cmp	r3, #0
 8016aac:	d018      	beq.n	8016ae0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8016aae:	687b      	ldr	r3, [r7, #4]
 8016ab0:	68da      	ldr	r2, [r3, #12]
 8016ab2:	687b      	ldr	r3, [r7, #4]
 8016ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016ab6:	441a      	add	r2, r3
 8016ab8:	687b      	ldr	r3, [r7, #4]
 8016aba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8016abc:	687b      	ldr	r3, [r7, #4]
 8016abe:	68da      	ldr	r2, [r3, #12]
 8016ac0:	687b      	ldr	r3, [r7, #4]
 8016ac2:	689b      	ldr	r3, [r3, #8]
 8016ac4:	429a      	cmp	r2, r3
 8016ac6:	d303      	bcc.n	8016ad0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8016ac8:	687b      	ldr	r3, [r7, #4]
 8016aca:	681a      	ldr	r2, [r3, #0]
 8016acc:	687b      	ldr	r3, [r7, #4]
 8016ace:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8016ad0:	687b      	ldr	r3, [r7, #4]
 8016ad2:	68d9      	ldr	r1, [r3, #12]
 8016ad4:	687b      	ldr	r3, [r7, #4]
 8016ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016ad8:	461a      	mov	r2, r3
 8016ada:	6838      	ldr	r0, [r7, #0]
 8016adc:	f003 fbb6 	bl	801a24c <memcpy>
	}
}
 8016ae0:	bf00      	nop
 8016ae2:	3708      	adds	r7, #8
 8016ae4:	46bd      	mov	sp, r7
 8016ae6:	bd80      	pop	{r7, pc}

08016ae8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8016ae8:	b580      	push	{r7, lr}
 8016aea:	b084      	sub	sp, #16
 8016aec:	af00      	add	r7, sp, #0
 8016aee:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8016af0:	f001 fd70 	bl	80185d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8016af4:	687b      	ldr	r3, [r7, #4]
 8016af6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016afa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8016afc:	e011      	b.n	8016b22 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016afe:	687b      	ldr	r3, [r7, #4]
 8016b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016b02:	2b00      	cmp	r3, #0
 8016b04:	d012      	beq.n	8016b2c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016b06:	687b      	ldr	r3, [r7, #4]
 8016b08:	3324      	adds	r3, #36	; 0x24
 8016b0a:	4618      	mov	r0, r3
 8016b0c:	f000 fe04 	bl	8017718 <xTaskRemoveFromEventList>
 8016b10:	4603      	mov	r3, r0
 8016b12:	2b00      	cmp	r3, #0
 8016b14:	d001      	beq.n	8016b1a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8016b16:	f000 fedf 	bl	80178d8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8016b1a:	7bfb      	ldrb	r3, [r7, #15]
 8016b1c:	3b01      	subs	r3, #1
 8016b1e:	b2db      	uxtb	r3, r3
 8016b20:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8016b22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016b26:	2b00      	cmp	r3, #0
 8016b28:	dce9      	bgt.n	8016afe <prvUnlockQueue+0x16>
 8016b2a:	e000      	b.n	8016b2e <prvUnlockQueue+0x46>
					break;
 8016b2c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8016b2e:	687b      	ldr	r3, [r7, #4]
 8016b30:	22ff      	movs	r2, #255	; 0xff
 8016b32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8016b36:	f001 fd7d 	bl	8018634 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8016b3a:	f001 fd4b 	bl	80185d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8016b3e:	687b      	ldr	r3, [r7, #4]
 8016b40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016b44:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8016b46:	e011      	b.n	8016b6c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016b48:	687b      	ldr	r3, [r7, #4]
 8016b4a:	691b      	ldr	r3, [r3, #16]
 8016b4c:	2b00      	cmp	r3, #0
 8016b4e:	d012      	beq.n	8016b76 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016b50:	687b      	ldr	r3, [r7, #4]
 8016b52:	3310      	adds	r3, #16
 8016b54:	4618      	mov	r0, r3
 8016b56:	f000 fddf 	bl	8017718 <xTaskRemoveFromEventList>
 8016b5a:	4603      	mov	r3, r0
 8016b5c:	2b00      	cmp	r3, #0
 8016b5e:	d001      	beq.n	8016b64 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8016b60:	f000 feba 	bl	80178d8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8016b64:	7bbb      	ldrb	r3, [r7, #14]
 8016b66:	3b01      	subs	r3, #1
 8016b68:	b2db      	uxtb	r3, r3
 8016b6a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8016b6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016b70:	2b00      	cmp	r3, #0
 8016b72:	dce9      	bgt.n	8016b48 <prvUnlockQueue+0x60>
 8016b74:	e000      	b.n	8016b78 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8016b76:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8016b78:	687b      	ldr	r3, [r7, #4]
 8016b7a:	22ff      	movs	r2, #255	; 0xff
 8016b7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8016b80:	f001 fd58 	bl	8018634 <vPortExitCritical>
}
 8016b84:	bf00      	nop
 8016b86:	3710      	adds	r7, #16
 8016b88:	46bd      	mov	sp, r7
 8016b8a:	bd80      	pop	{r7, pc}

08016b8c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8016b8c:	b580      	push	{r7, lr}
 8016b8e:	b084      	sub	sp, #16
 8016b90:	af00      	add	r7, sp, #0
 8016b92:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8016b94:	f001 fd1e 	bl	80185d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8016b98:	687b      	ldr	r3, [r7, #4]
 8016b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016b9c:	2b00      	cmp	r3, #0
 8016b9e:	d102      	bne.n	8016ba6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8016ba0:	2301      	movs	r3, #1
 8016ba2:	60fb      	str	r3, [r7, #12]
 8016ba4:	e001      	b.n	8016baa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8016ba6:	2300      	movs	r3, #0
 8016ba8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8016baa:	f001 fd43 	bl	8018634 <vPortExitCritical>

	return xReturn;
 8016bae:	68fb      	ldr	r3, [r7, #12]
}
 8016bb0:	4618      	mov	r0, r3
 8016bb2:	3710      	adds	r7, #16
 8016bb4:	46bd      	mov	sp, r7
 8016bb6:	bd80      	pop	{r7, pc}

08016bb8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8016bb8:	b580      	push	{r7, lr}
 8016bba:	b084      	sub	sp, #16
 8016bbc:	af00      	add	r7, sp, #0
 8016bbe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8016bc0:	f001 fd08 	bl	80185d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8016bc4:	687b      	ldr	r3, [r7, #4]
 8016bc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8016bc8:	687b      	ldr	r3, [r7, #4]
 8016bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016bcc:	429a      	cmp	r2, r3
 8016bce:	d102      	bne.n	8016bd6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8016bd0:	2301      	movs	r3, #1
 8016bd2:	60fb      	str	r3, [r7, #12]
 8016bd4:	e001      	b.n	8016bda <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8016bd6:	2300      	movs	r3, #0
 8016bd8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8016bda:	f001 fd2b 	bl	8018634 <vPortExitCritical>

	return xReturn;
 8016bde:	68fb      	ldr	r3, [r7, #12]
}
 8016be0:	4618      	mov	r0, r3
 8016be2:	3710      	adds	r7, #16
 8016be4:	46bd      	mov	sp, r7
 8016be6:	bd80      	pop	{r7, pc}

08016be8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8016be8:	b580      	push	{r7, lr}
 8016bea:	b084      	sub	sp, #16
 8016bec:	af00      	add	r7, sp, #0
 8016bee:	6078      	str	r0, [r7, #4]
 8016bf0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8016bf2:	2300      	movs	r3, #0
 8016bf4:	60fb      	str	r3, [r7, #12]
 8016bf6:	e01e      	b.n	8016c36 <vQueueAddToRegistry+0x4e>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8016bf8:	4a13      	ldr	r2, [pc, #76]	; (8016c48 <vQueueAddToRegistry+0x60>)
 8016bfa:	68fb      	ldr	r3, [r7, #12]
 8016bfc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8016c00:	2b00      	cmp	r3, #0
 8016c02:	d115      	bne.n	8016c30 <vQueueAddToRegistry+0x48>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8016c04:	4910      	ldr	r1, [pc, #64]	; (8016c48 <vQueueAddToRegistry+0x60>)
 8016c06:	68fb      	ldr	r3, [r7, #12]
 8016c08:	683a      	ldr	r2, [r7, #0]
 8016c0a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8016c0e:	4a0e      	ldr	r2, [pc, #56]	; (8016c48 <vQueueAddToRegistry+0x60>)
 8016c10:	68fb      	ldr	r3, [r7, #12]
 8016c12:	00db      	lsls	r3, r3, #3
 8016c14:	4413      	add	r3, r2
 8016c16:	687a      	ldr	r2, [r7, #4]
 8016c18:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8016c1a:	687b      	ldr	r3, [r7, #4]
 8016c1c:	4618      	mov	r0, r3
 8016c1e:	f003 f975 	bl	8019f0c <SEGGER_SYSVIEW_ShrinkId>
 8016c22:	4601      	mov	r1, r0
 8016c24:	683b      	ldr	r3, [r7, #0]
 8016c26:	461a      	mov	r2, r3
 8016c28:	2071      	movs	r0, #113	; 0x71
 8016c2a:	f002 fc63 	bl	80194f4 <SEGGER_SYSVIEW_RecordU32x2>
				break;
 8016c2e:	e006      	b.n	8016c3e <vQueueAddToRegistry+0x56>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8016c30:	68fb      	ldr	r3, [r7, #12]
 8016c32:	3301      	adds	r3, #1
 8016c34:	60fb      	str	r3, [r7, #12]
 8016c36:	68fb      	ldr	r3, [r7, #12]
 8016c38:	2b07      	cmp	r3, #7
 8016c3a:	d9dd      	bls.n	8016bf8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8016c3c:	bf00      	nop
 8016c3e:	bf00      	nop
 8016c40:	3710      	adds	r7, #16
 8016c42:	46bd      	mov	sp, r7
 8016c44:	bd80      	pop	{r7, pc}
 8016c46:	bf00      	nop
 8016c48:	2001e928 	.word	0x2001e928

08016c4c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8016c4c:	b580      	push	{r7, lr}
 8016c4e:	b086      	sub	sp, #24
 8016c50:	af00      	add	r7, sp, #0
 8016c52:	60f8      	str	r0, [r7, #12]
 8016c54:	60b9      	str	r1, [r7, #8]
 8016c56:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8016c58:	68fb      	ldr	r3, [r7, #12]
 8016c5a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8016c5c:	f001 fcba 	bl	80185d4 <vPortEnterCritical>
 8016c60:	697b      	ldr	r3, [r7, #20]
 8016c62:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016c66:	b25b      	sxtb	r3, r3
 8016c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016c6c:	d103      	bne.n	8016c76 <vQueueWaitForMessageRestricted+0x2a>
 8016c6e:	697b      	ldr	r3, [r7, #20]
 8016c70:	2200      	movs	r2, #0
 8016c72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8016c76:	697b      	ldr	r3, [r7, #20]
 8016c78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016c7c:	b25b      	sxtb	r3, r3
 8016c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016c82:	d103      	bne.n	8016c8c <vQueueWaitForMessageRestricted+0x40>
 8016c84:	697b      	ldr	r3, [r7, #20]
 8016c86:	2200      	movs	r2, #0
 8016c88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8016c8c:	f001 fcd2 	bl	8018634 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8016c90:	697b      	ldr	r3, [r7, #20]
 8016c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016c94:	2b00      	cmp	r3, #0
 8016c96:	d106      	bne.n	8016ca6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8016c98:	697b      	ldr	r3, [r7, #20]
 8016c9a:	3324      	adds	r3, #36	; 0x24
 8016c9c:	687a      	ldr	r2, [r7, #4]
 8016c9e:	68b9      	ldr	r1, [r7, #8]
 8016ca0:	4618      	mov	r0, r3
 8016ca2:	f000 fd0b 	bl	80176bc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8016ca6:	6978      	ldr	r0, [r7, #20]
 8016ca8:	f7ff ff1e 	bl	8016ae8 <prvUnlockQueue>
	}
 8016cac:	bf00      	nop
 8016cae:	3718      	adds	r7, #24
 8016cb0:	46bd      	mov	sp, r7
 8016cb2:	bd80      	pop	{r7, pc}

08016cb4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8016cb4:	b580      	push	{r7, lr}
 8016cb6:	b08e      	sub	sp, #56	; 0x38
 8016cb8:	af04      	add	r7, sp, #16
 8016cba:	60f8      	str	r0, [r7, #12]
 8016cbc:	60b9      	str	r1, [r7, #8]
 8016cbe:	607a      	str	r2, [r7, #4]
 8016cc0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8016cc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016cc4:	2b00      	cmp	r3, #0
 8016cc6:	d10a      	bne.n	8016cde <xTaskCreateStatic+0x2a>
	__asm volatile
 8016cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ccc:	f383 8811 	msr	BASEPRI, r3
 8016cd0:	f3bf 8f6f 	isb	sy
 8016cd4:	f3bf 8f4f 	dsb	sy
 8016cd8:	623b      	str	r3, [r7, #32]
}
 8016cda:	bf00      	nop
 8016cdc:	e7fe      	b.n	8016cdc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8016cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ce0:	2b00      	cmp	r3, #0
 8016ce2:	d10a      	bne.n	8016cfa <xTaskCreateStatic+0x46>
	__asm volatile
 8016ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ce8:	f383 8811 	msr	BASEPRI, r3
 8016cec:	f3bf 8f6f 	isb	sy
 8016cf0:	f3bf 8f4f 	dsb	sy
 8016cf4:	61fb      	str	r3, [r7, #28]
}
 8016cf6:	bf00      	nop
 8016cf8:	e7fe      	b.n	8016cf8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8016cfa:	23cc      	movs	r3, #204	; 0xcc
 8016cfc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8016cfe:	693b      	ldr	r3, [r7, #16]
 8016d00:	2bcc      	cmp	r3, #204	; 0xcc
 8016d02:	d00a      	beq.n	8016d1a <xTaskCreateStatic+0x66>
	__asm volatile
 8016d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d08:	f383 8811 	msr	BASEPRI, r3
 8016d0c:	f3bf 8f6f 	isb	sy
 8016d10:	f3bf 8f4f 	dsb	sy
 8016d14:	61bb      	str	r3, [r7, #24]
}
 8016d16:	bf00      	nop
 8016d18:	e7fe      	b.n	8016d18 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8016d1a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8016d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016d1e:	2b00      	cmp	r3, #0
 8016d20:	d01e      	beq.n	8016d60 <xTaskCreateStatic+0xac>
 8016d22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016d24:	2b00      	cmp	r3, #0
 8016d26:	d01b      	beq.n	8016d60 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8016d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016d2a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8016d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016d30:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8016d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d34:	2202      	movs	r2, #2
 8016d36:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8016d3a:	2300      	movs	r3, #0
 8016d3c:	9303      	str	r3, [sp, #12]
 8016d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d40:	9302      	str	r3, [sp, #8]
 8016d42:	f107 0314 	add.w	r3, r7, #20
 8016d46:	9301      	str	r3, [sp, #4]
 8016d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d4a:	9300      	str	r3, [sp, #0]
 8016d4c:	683b      	ldr	r3, [r7, #0]
 8016d4e:	687a      	ldr	r2, [r7, #4]
 8016d50:	68b9      	ldr	r1, [r7, #8]
 8016d52:	68f8      	ldr	r0, [r7, #12]
 8016d54:	f000 f850 	bl	8016df8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8016d58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016d5a:	f000 f8f3 	bl	8016f44 <prvAddNewTaskToReadyList>
 8016d5e:	e001      	b.n	8016d64 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8016d60:	2300      	movs	r3, #0
 8016d62:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8016d64:	697b      	ldr	r3, [r7, #20]
	}
 8016d66:	4618      	mov	r0, r3
 8016d68:	3728      	adds	r7, #40	; 0x28
 8016d6a:	46bd      	mov	sp, r7
 8016d6c:	bd80      	pop	{r7, pc}

08016d6e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8016d6e:	b580      	push	{r7, lr}
 8016d70:	b08c      	sub	sp, #48	; 0x30
 8016d72:	af04      	add	r7, sp, #16
 8016d74:	60f8      	str	r0, [r7, #12]
 8016d76:	60b9      	str	r1, [r7, #8]
 8016d78:	603b      	str	r3, [r7, #0]
 8016d7a:	4613      	mov	r3, r2
 8016d7c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8016d7e:	88fb      	ldrh	r3, [r7, #6]
 8016d80:	009b      	lsls	r3, r3, #2
 8016d82:	4618      	mov	r0, r3
 8016d84:	f001 fd48 	bl	8018818 <pvPortMalloc>
 8016d88:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8016d8a:	697b      	ldr	r3, [r7, #20]
 8016d8c:	2b00      	cmp	r3, #0
 8016d8e:	d00e      	beq.n	8016dae <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8016d90:	20cc      	movs	r0, #204	; 0xcc
 8016d92:	f001 fd41 	bl	8018818 <pvPortMalloc>
 8016d96:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8016d98:	69fb      	ldr	r3, [r7, #28]
 8016d9a:	2b00      	cmp	r3, #0
 8016d9c:	d003      	beq.n	8016da6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8016d9e:	69fb      	ldr	r3, [r7, #28]
 8016da0:	697a      	ldr	r2, [r7, #20]
 8016da2:	631a      	str	r2, [r3, #48]	; 0x30
 8016da4:	e005      	b.n	8016db2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8016da6:	6978      	ldr	r0, [r7, #20]
 8016da8:	f001 fe02 	bl	80189b0 <vPortFree>
 8016dac:	e001      	b.n	8016db2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8016dae:	2300      	movs	r3, #0
 8016db0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8016db2:	69fb      	ldr	r3, [r7, #28]
 8016db4:	2b00      	cmp	r3, #0
 8016db6:	d017      	beq.n	8016de8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8016db8:	69fb      	ldr	r3, [r7, #28]
 8016dba:	2200      	movs	r2, #0
 8016dbc:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8016dc0:	88fa      	ldrh	r2, [r7, #6]
 8016dc2:	2300      	movs	r3, #0
 8016dc4:	9303      	str	r3, [sp, #12]
 8016dc6:	69fb      	ldr	r3, [r7, #28]
 8016dc8:	9302      	str	r3, [sp, #8]
 8016dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016dcc:	9301      	str	r3, [sp, #4]
 8016dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016dd0:	9300      	str	r3, [sp, #0]
 8016dd2:	683b      	ldr	r3, [r7, #0]
 8016dd4:	68b9      	ldr	r1, [r7, #8]
 8016dd6:	68f8      	ldr	r0, [r7, #12]
 8016dd8:	f000 f80e 	bl	8016df8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8016ddc:	69f8      	ldr	r0, [r7, #28]
 8016dde:	f000 f8b1 	bl	8016f44 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8016de2:	2301      	movs	r3, #1
 8016de4:	61bb      	str	r3, [r7, #24]
 8016de6:	e002      	b.n	8016dee <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8016de8:	f04f 33ff 	mov.w	r3, #4294967295
 8016dec:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8016dee:	69bb      	ldr	r3, [r7, #24]
	}
 8016df0:	4618      	mov	r0, r3
 8016df2:	3720      	adds	r7, #32
 8016df4:	46bd      	mov	sp, r7
 8016df6:	bd80      	pop	{r7, pc}

08016df8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8016df8:	b580      	push	{r7, lr}
 8016dfa:	b088      	sub	sp, #32
 8016dfc:	af00      	add	r7, sp, #0
 8016dfe:	60f8      	str	r0, [r7, #12]
 8016e00:	60b9      	str	r1, [r7, #8]
 8016e02:	607a      	str	r2, [r7, #4]
 8016e04:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8016e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e08:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8016e0a:	687b      	ldr	r3, [r7, #4]
 8016e0c:	009b      	lsls	r3, r3, #2
 8016e0e:	461a      	mov	r2, r3
 8016e10:	21a5      	movs	r1, #165	; 0xa5
 8016e12:	f003 fa29 	bl	801a268 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8016e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8016e1a:	687b      	ldr	r3, [r7, #4]
 8016e1c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8016e20:	3b01      	subs	r3, #1
 8016e22:	009b      	lsls	r3, r3, #2
 8016e24:	4413      	add	r3, r2
 8016e26:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8016e28:	69bb      	ldr	r3, [r7, #24]
 8016e2a:	f023 0307 	bic.w	r3, r3, #7
 8016e2e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8016e30:	69bb      	ldr	r3, [r7, #24]
 8016e32:	f003 0307 	and.w	r3, r3, #7
 8016e36:	2b00      	cmp	r3, #0
 8016e38:	d00a      	beq.n	8016e50 <prvInitialiseNewTask+0x58>
	__asm volatile
 8016e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e3e:	f383 8811 	msr	BASEPRI, r3
 8016e42:	f3bf 8f6f 	isb	sy
 8016e46:	f3bf 8f4f 	dsb	sy
 8016e4a:	617b      	str	r3, [r7, #20]
}
 8016e4c:	bf00      	nop
 8016e4e:	e7fe      	b.n	8016e4e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8016e50:	68bb      	ldr	r3, [r7, #8]
 8016e52:	2b00      	cmp	r3, #0
 8016e54:	d01f      	beq.n	8016e96 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8016e56:	2300      	movs	r3, #0
 8016e58:	61fb      	str	r3, [r7, #28]
 8016e5a:	e012      	b.n	8016e82 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8016e5c:	68ba      	ldr	r2, [r7, #8]
 8016e5e:	69fb      	ldr	r3, [r7, #28]
 8016e60:	4413      	add	r3, r2
 8016e62:	7819      	ldrb	r1, [r3, #0]
 8016e64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016e66:	69fb      	ldr	r3, [r7, #28]
 8016e68:	4413      	add	r3, r2
 8016e6a:	3334      	adds	r3, #52	; 0x34
 8016e6c:	460a      	mov	r2, r1
 8016e6e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8016e70:	68ba      	ldr	r2, [r7, #8]
 8016e72:	69fb      	ldr	r3, [r7, #28]
 8016e74:	4413      	add	r3, r2
 8016e76:	781b      	ldrb	r3, [r3, #0]
 8016e78:	2b00      	cmp	r3, #0
 8016e7a:	d006      	beq.n	8016e8a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8016e7c:	69fb      	ldr	r3, [r7, #28]
 8016e7e:	3301      	adds	r3, #1
 8016e80:	61fb      	str	r3, [r7, #28]
 8016e82:	69fb      	ldr	r3, [r7, #28]
 8016e84:	2b1f      	cmp	r3, #31
 8016e86:	d9e9      	bls.n	8016e5c <prvInitialiseNewTask+0x64>
 8016e88:	e000      	b.n	8016e8c <prvInitialiseNewTask+0x94>
			{
				break;
 8016e8a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8016e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e8e:	2200      	movs	r2, #0
 8016e90:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8016e94:	e003      	b.n	8016e9e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8016e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e98:	2200      	movs	r2, #0
 8016e9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8016e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ea0:	2b37      	cmp	r3, #55	; 0x37
 8016ea2:	d901      	bls.n	8016ea8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8016ea4:	2337      	movs	r3, #55	; 0x37
 8016ea6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8016ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016eaa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016eac:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8016eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016eb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016eb2:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->uxMutexesHeld = 0;
 8016eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016eb6:	2200      	movs	r2, #0
 8016eb8:	661a      	str	r2, [r3, #96]	; 0x60
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8016eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ebc:	3304      	adds	r3, #4
 8016ebe:	4618      	mov	r0, r3
 8016ec0:	f7fe ffd0 	bl	8015e64 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8016ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ec6:	3318      	adds	r3, #24
 8016ec8:	4618      	mov	r0, r3
 8016eca:	f7fe ffcb 	bl	8015e64 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8016ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ed0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016ed2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ed6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8016eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016edc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8016ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ee0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016ee2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8016ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ee6:	2200      	movs	r2, #0
 8016ee8:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8016eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016eee:	2200      	movs	r2, #0
 8016ef0:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8016ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ef6:	3364      	adds	r3, #100	; 0x64
 8016ef8:	2260      	movs	r2, #96	; 0x60
 8016efa:	2100      	movs	r1, #0
 8016efc:	4618      	mov	r0, r3
 8016efe:	f003 f9b3 	bl	801a268 <memset>
 8016f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f04:	4a0c      	ldr	r2, [pc, #48]	; (8016f38 <prvInitialiseNewTask+0x140>)
 8016f06:	669a      	str	r2, [r3, #104]	; 0x68
 8016f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f0a:	4a0c      	ldr	r2, [pc, #48]	; (8016f3c <prvInitialiseNewTask+0x144>)
 8016f0c:	66da      	str	r2, [r3, #108]	; 0x6c
 8016f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f10:	4a0b      	ldr	r2, [pc, #44]	; (8016f40 <prvInitialiseNewTask+0x148>)
 8016f12:	671a      	str	r2, [r3, #112]	; 0x70
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8016f14:	683a      	ldr	r2, [r7, #0]
 8016f16:	68f9      	ldr	r1, [r7, #12]
 8016f18:	69b8      	ldr	r0, [r7, #24]
 8016f1a:	f001 fa31 	bl	8018380 <pxPortInitialiseStack>
 8016f1e:	4602      	mov	r2, r0
 8016f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f22:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8016f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f26:	2b00      	cmp	r3, #0
 8016f28:	d002      	beq.n	8016f30 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8016f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016f2e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016f30:	bf00      	nop
 8016f32:	3720      	adds	r7, #32
 8016f34:	46bd      	mov	sp, r7
 8016f36:	bd80      	pop	{r7, pc}
 8016f38:	0801b634 	.word	0x0801b634
 8016f3c:	0801b654 	.word	0x0801b654
 8016f40:	0801b614 	.word	0x0801b614

08016f44 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8016f44:	b5b0      	push	{r4, r5, r7, lr}
 8016f46:	b084      	sub	sp, #16
 8016f48:	af02      	add	r7, sp, #8
 8016f4a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8016f4c:	f001 fb42 	bl	80185d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8016f50:	4b3c      	ldr	r3, [pc, #240]	; (8017044 <prvAddNewTaskToReadyList+0x100>)
 8016f52:	681b      	ldr	r3, [r3, #0]
 8016f54:	3301      	adds	r3, #1
 8016f56:	4a3b      	ldr	r2, [pc, #236]	; (8017044 <prvAddNewTaskToReadyList+0x100>)
 8016f58:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8016f5a:	4b3b      	ldr	r3, [pc, #236]	; (8017048 <prvAddNewTaskToReadyList+0x104>)
 8016f5c:	681b      	ldr	r3, [r3, #0]
 8016f5e:	2b00      	cmp	r3, #0
 8016f60:	d109      	bne.n	8016f76 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8016f62:	4a39      	ldr	r2, [pc, #228]	; (8017048 <prvAddNewTaskToReadyList+0x104>)
 8016f64:	687b      	ldr	r3, [r7, #4]
 8016f66:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8016f68:	4b36      	ldr	r3, [pc, #216]	; (8017044 <prvAddNewTaskToReadyList+0x100>)
 8016f6a:	681b      	ldr	r3, [r3, #0]
 8016f6c:	2b01      	cmp	r3, #1
 8016f6e:	d110      	bne.n	8016f92 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8016f70:	f000 fcd6 	bl	8017920 <prvInitialiseTaskLists>
 8016f74:	e00d      	b.n	8016f92 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8016f76:	4b35      	ldr	r3, [pc, #212]	; (801704c <prvAddNewTaskToReadyList+0x108>)
 8016f78:	681b      	ldr	r3, [r3, #0]
 8016f7a:	2b00      	cmp	r3, #0
 8016f7c:	d109      	bne.n	8016f92 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8016f7e:	4b32      	ldr	r3, [pc, #200]	; (8017048 <prvAddNewTaskToReadyList+0x104>)
 8016f80:	681b      	ldr	r3, [r3, #0]
 8016f82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016f84:	687b      	ldr	r3, [r7, #4]
 8016f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016f88:	429a      	cmp	r2, r3
 8016f8a:	d802      	bhi.n	8016f92 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8016f8c:	4a2e      	ldr	r2, [pc, #184]	; (8017048 <prvAddNewTaskToReadyList+0x104>)
 8016f8e:	687b      	ldr	r3, [r7, #4]
 8016f90:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8016f92:	4b2f      	ldr	r3, [pc, #188]	; (8017050 <prvAddNewTaskToReadyList+0x10c>)
 8016f94:	681b      	ldr	r3, [r3, #0]
 8016f96:	3301      	adds	r3, #1
 8016f98:	4a2d      	ldr	r2, [pc, #180]	; (8017050 <prvAddNewTaskToReadyList+0x10c>)
 8016f9a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8016f9c:	4b2c      	ldr	r3, [pc, #176]	; (8017050 <prvAddNewTaskToReadyList+0x10c>)
 8016f9e:	681a      	ldr	r2, [r3, #0]
 8016fa0:	687b      	ldr	r3, [r7, #4]
 8016fa2:	655a      	str	r2, [r3, #84]	; 0x54
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 8016fa4:	687b      	ldr	r3, [r7, #4]
 8016fa6:	2b00      	cmp	r3, #0
 8016fa8:	d016      	beq.n	8016fd8 <prvAddNewTaskToReadyList+0x94>
 8016faa:	687b      	ldr	r3, [r7, #4]
 8016fac:	4618      	mov	r0, r3
 8016fae:	f002 fee7 	bl	8019d80 <SEGGER_SYSVIEW_OnTaskCreate>
 8016fb2:	6878      	ldr	r0, [r7, #4]
 8016fb4:	687b      	ldr	r3, [r7, #4]
 8016fb6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8016fba:	687b      	ldr	r3, [r7, #4]
 8016fbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016fbe:	687b      	ldr	r3, [r7, #4]
 8016fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016fc2:	461d      	mov	r5, r3
 8016fc4:	687b      	ldr	r3, [r7, #4]
 8016fc6:	681b      	ldr	r3, [r3, #0]
 8016fc8:	461c      	mov	r4, r3
 8016fca:	687b      	ldr	r3, [r7, #4]
 8016fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016fce:	1ae3      	subs	r3, r4, r3
 8016fd0:	9300      	str	r3, [sp, #0]
 8016fd2:	462b      	mov	r3, r5
 8016fd4:	f7eb f8d4 	bl	8002180 <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 8016fd8:	687b      	ldr	r3, [r7, #4]
 8016fda:	4618      	mov	r0, r3
 8016fdc:	f002 ff54 	bl	8019e88 <SEGGER_SYSVIEW_OnTaskStartReady>
 8016fe0:	687b      	ldr	r3, [r7, #4]
 8016fe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016fe4:	4b1b      	ldr	r3, [pc, #108]	; (8017054 <prvAddNewTaskToReadyList+0x110>)
 8016fe6:	681b      	ldr	r3, [r3, #0]
 8016fe8:	429a      	cmp	r2, r3
 8016fea:	d903      	bls.n	8016ff4 <prvAddNewTaskToReadyList+0xb0>
 8016fec:	687b      	ldr	r3, [r7, #4]
 8016fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016ff0:	4a18      	ldr	r2, [pc, #96]	; (8017054 <prvAddNewTaskToReadyList+0x110>)
 8016ff2:	6013      	str	r3, [r2, #0]
 8016ff4:	687b      	ldr	r3, [r7, #4]
 8016ff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016ff8:	4613      	mov	r3, r2
 8016ffa:	009b      	lsls	r3, r3, #2
 8016ffc:	4413      	add	r3, r2
 8016ffe:	009b      	lsls	r3, r3, #2
 8017000:	4a15      	ldr	r2, [pc, #84]	; (8017058 <prvAddNewTaskToReadyList+0x114>)
 8017002:	441a      	add	r2, r3
 8017004:	687b      	ldr	r3, [r7, #4]
 8017006:	3304      	adds	r3, #4
 8017008:	4619      	mov	r1, r3
 801700a:	4610      	mov	r0, r2
 801700c:	f7fe ff37 	bl	8015e7e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8017010:	f001 fb10 	bl	8018634 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8017014:	4b0d      	ldr	r3, [pc, #52]	; (801704c <prvAddNewTaskToReadyList+0x108>)
 8017016:	681b      	ldr	r3, [r3, #0]
 8017018:	2b00      	cmp	r3, #0
 801701a:	d00e      	beq.n	801703a <prvAddNewTaskToReadyList+0xf6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801701c:	4b0a      	ldr	r3, [pc, #40]	; (8017048 <prvAddNewTaskToReadyList+0x104>)
 801701e:	681b      	ldr	r3, [r3, #0]
 8017020:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017022:	687b      	ldr	r3, [r7, #4]
 8017024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017026:	429a      	cmp	r2, r3
 8017028:	d207      	bcs.n	801703a <prvAddNewTaskToReadyList+0xf6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801702a:	4b0c      	ldr	r3, [pc, #48]	; (801705c <prvAddNewTaskToReadyList+0x118>)
 801702c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017030:	601a      	str	r2, [r3, #0]
 8017032:	f3bf 8f4f 	dsb	sy
 8017036:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801703a:	bf00      	nop
 801703c:	3708      	adds	r7, #8
 801703e:	46bd      	mov	sp, r7
 8017040:	bdb0      	pop	{r4, r5, r7, pc}
 8017042:	bf00      	nop
 8017044:	20002418 	.word	0x20002418
 8017048:	20001f44 	.word	0x20001f44
 801704c:	20002424 	.word	0x20002424
 8017050:	20002434 	.word	0x20002434
 8017054:	20002420 	.word	0x20002420
 8017058:	20001f48 	.word	0x20001f48
 801705c:	e000ed04 	.word	0xe000ed04

08017060 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8017060:	b580      	push	{r7, lr}
 8017062:	b08a      	sub	sp, #40	; 0x28
 8017064:	af00      	add	r7, sp, #0
 8017066:	6078      	str	r0, [r7, #4]
 8017068:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 801706a:	2300      	movs	r3, #0
 801706c:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 801706e:	687b      	ldr	r3, [r7, #4]
 8017070:	2b00      	cmp	r3, #0
 8017072:	d10a      	bne.n	801708a <vTaskDelayUntil+0x2a>
	__asm volatile
 8017074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017078:	f383 8811 	msr	BASEPRI, r3
 801707c:	f3bf 8f6f 	isb	sy
 8017080:	f3bf 8f4f 	dsb	sy
 8017084:	617b      	str	r3, [r7, #20]
}
 8017086:	bf00      	nop
 8017088:	e7fe      	b.n	8017088 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 801708a:	683b      	ldr	r3, [r7, #0]
 801708c:	2b00      	cmp	r3, #0
 801708e:	d10a      	bne.n	80170a6 <vTaskDelayUntil+0x46>
	__asm volatile
 8017090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017094:	f383 8811 	msr	BASEPRI, r3
 8017098:	f3bf 8f6f 	isb	sy
 801709c:	f3bf 8f4f 	dsb	sy
 80170a0:	613b      	str	r3, [r7, #16]
}
 80170a2:	bf00      	nop
 80170a4:	e7fe      	b.n	80170a4 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 80170a6:	4b2b      	ldr	r3, [pc, #172]	; (8017154 <vTaskDelayUntil+0xf4>)
 80170a8:	681b      	ldr	r3, [r3, #0]
 80170aa:	2b00      	cmp	r3, #0
 80170ac:	d00a      	beq.n	80170c4 <vTaskDelayUntil+0x64>
	__asm volatile
 80170ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80170b2:	f383 8811 	msr	BASEPRI, r3
 80170b6:	f3bf 8f6f 	isb	sy
 80170ba:	f3bf 8f4f 	dsb	sy
 80170be:	60fb      	str	r3, [r7, #12]
}
 80170c0:	bf00      	nop
 80170c2:	e7fe      	b.n	80170c2 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 80170c4:	f000 f8ce 	bl	8017264 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80170c8:	4b23      	ldr	r3, [pc, #140]	; (8017158 <vTaskDelayUntil+0xf8>)
 80170ca:	681b      	ldr	r3, [r3, #0]
 80170cc:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80170ce:	687b      	ldr	r3, [r7, #4]
 80170d0:	681b      	ldr	r3, [r3, #0]
 80170d2:	683a      	ldr	r2, [r7, #0]
 80170d4:	4413      	add	r3, r2
 80170d6:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80170d8:	687b      	ldr	r3, [r7, #4]
 80170da:	681b      	ldr	r3, [r3, #0]
 80170dc:	6a3a      	ldr	r2, [r7, #32]
 80170de:	429a      	cmp	r2, r3
 80170e0:	d20b      	bcs.n	80170fa <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80170e2:	687b      	ldr	r3, [r7, #4]
 80170e4:	681b      	ldr	r3, [r3, #0]
 80170e6:	69fa      	ldr	r2, [r7, #28]
 80170e8:	429a      	cmp	r2, r3
 80170ea:	d211      	bcs.n	8017110 <vTaskDelayUntil+0xb0>
 80170ec:	69fa      	ldr	r2, [r7, #28]
 80170ee:	6a3b      	ldr	r3, [r7, #32]
 80170f0:	429a      	cmp	r2, r3
 80170f2:	d90d      	bls.n	8017110 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 80170f4:	2301      	movs	r3, #1
 80170f6:	627b      	str	r3, [r7, #36]	; 0x24
 80170f8:	e00a      	b.n	8017110 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80170fa:	687b      	ldr	r3, [r7, #4]
 80170fc:	681b      	ldr	r3, [r3, #0]
 80170fe:	69fa      	ldr	r2, [r7, #28]
 8017100:	429a      	cmp	r2, r3
 8017102:	d303      	bcc.n	801710c <vTaskDelayUntil+0xac>
 8017104:	69fa      	ldr	r2, [r7, #28]
 8017106:	6a3b      	ldr	r3, [r7, #32]
 8017108:	429a      	cmp	r2, r3
 801710a:	d901      	bls.n	8017110 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 801710c:	2301      	movs	r3, #1
 801710e:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8017110:	687b      	ldr	r3, [r7, #4]
 8017112:	69fa      	ldr	r2, [r7, #28]
 8017114:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8017116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017118:	2b00      	cmp	r3, #0
 801711a:	d009      	beq.n	8017130 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );
 801711c:	2024      	movs	r0, #36	; 0x24
 801711e:	f002 f98f 	bl	8019440 <SEGGER_SYSVIEW_RecordVoid>

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8017122:	69fa      	ldr	r2, [r7, #28]
 8017124:	6a3b      	ldr	r3, [r7, #32]
 8017126:	1ad3      	subs	r3, r2, r3
 8017128:	2100      	movs	r1, #0
 801712a:	4618      	mov	r0, r3
 801712c:	f000 fd86 	bl	8017c3c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8017130:	f000 f8a6 	bl	8017280 <xTaskResumeAll>
 8017134:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8017136:	69bb      	ldr	r3, [r7, #24]
 8017138:	2b00      	cmp	r3, #0
 801713a:	d107      	bne.n	801714c <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 801713c:	4b07      	ldr	r3, [pc, #28]	; (801715c <vTaskDelayUntil+0xfc>)
 801713e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017142:	601a      	str	r2, [r3, #0]
 8017144:	f3bf 8f4f 	dsb	sy
 8017148:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801714c:	bf00      	nop
 801714e:	3728      	adds	r7, #40	; 0x28
 8017150:	46bd      	mov	sp, r7
 8017152:	bd80      	pop	{r7, pc}
 8017154:	20002440 	.word	0x20002440
 8017158:	2000241c 	.word	0x2000241c
 801715c:	e000ed04 	.word	0xe000ed04

08017160 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8017160:	b580      	push	{r7, lr}
 8017162:	b08a      	sub	sp, #40	; 0x28
 8017164:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8017166:	2300      	movs	r3, #0
 8017168:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801716a:	2300      	movs	r3, #0
 801716c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801716e:	463a      	mov	r2, r7
 8017170:	1d39      	adds	r1, r7, #4
 8017172:	f107 0308 	add.w	r3, r7, #8
 8017176:	4618      	mov	r0, r3
 8017178:	f7fe fe20 	bl	8015dbc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801717c:	6839      	ldr	r1, [r7, #0]
 801717e:	687b      	ldr	r3, [r7, #4]
 8017180:	68ba      	ldr	r2, [r7, #8]
 8017182:	9202      	str	r2, [sp, #8]
 8017184:	9301      	str	r3, [sp, #4]
 8017186:	2300      	movs	r3, #0
 8017188:	9300      	str	r3, [sp, #0]
 801718a:	2300      	movs	r3, #0
 801718c:	460a      	mov	r2, r1
 801718e:	492d      	ldr	r1, [pc, #180]	; (8017244 <vTaskStartScheduler+0xe4>)
 8017190:	482d      	ldr	r0, [pc, #180]	; (8017248 <vTaskStartScheduler+0xe8>)
 8017192:	f7ff fd8f 	bl	8016cb4 <xTaskCreateStatic>
 8017196:	4603      	mov	r3, r0
 8017198:	4a2c      	ldr	r2, [pc, #176]	; (801724c <vTaskStartScheduler+0xec>)
 801719a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801719c:	4b2b      	ldr	r3, [pc, #172]	; (801724c <vTaskStartScheduler+0xec>)
 801719e:	681b      	ldr	r3, [r3, #0]
 80171a0:	2b00      	cmp	r3, #0
 80171a2:	d002      	beq.n	80171aa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80171a4:	2301      	movs	r3, #1
 80171a6:	617b      	str	r3, [r7, #20]
 80171a8:	e001      	b.n	80171ae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80171aa:	2300      	movs	r3, #0
 80171ac:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80171ae:	697b      	ldr	r3, [r7, #20]
 80171b0:	2b01      	cmp	r3, #1
 80171b2:	d102      	bne.n	80171ba <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80171b4:	f000 fd96 	bl	8017ce4 <xTimerCreateTimerTask>
 80171b8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80171ba:	697b      	ldr	r3, [r7, #20]
 80171bc:	2b01      	cmp	r3, #1
 80171be:	d12e      	bne.n	801721e <vTaskStartScheduler+0xbe>
	__asm volatile
 80171c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80171c4:	f383 8811 	msr	BASEPRI, r3
 80171c8:	f3bf 8f6f 	isb	sy
 80171cc:	f3bf 8f4f 	dsb	sy
 80171d0:	613b      	str	r3, [r7, #16]
}
 80171d2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80171d4:	4b1e      	ldr	r3, [pc, #120]	; (8017250 <vTaskStartScheduler+0xf0>)
 80171d6:	681b      	ldr	r3, [r3, #0]
 80171d8:	3364      	adds	r3, #100	; 0x64
 80171da:	4a1e      	ldr	r2, [pc, #120]	; (8017254 <vTaskStartScheduler+0xf4>)
 80171dc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80171de:	4b1e      	ldr	r3, [pc, #120]	; (8017258 <vTaskStartScheduler+0xf8>)
 80171e0:	f04f 32ff 	mov.w	r2, #4294967295
 80171e4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80171e6:	4b1d      	ldr	r3, [pc, #116]	; (801725c <vTaskStartScheduler+0xfc>)
 80171e8:	2201      	movs	r2, #1
 80171ea:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80171ec:	4b1c      	ldr	r3, [pc, #112]	; (8017260 <vTaskStartScheduler+0x100>)
 80171ee:	2200      	movs	r2, #0
 80171f0:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 80171f2:	4b17      	ldr	r3, [pc, #92]	; (8017250 <vTaskStartScheduler+0xf0>)
 80171f4:	681b      	ldr	r3, [r3, #0]
 80171f6:	3334      	adds	r3, #52	; 0x34
 80171f8:	2205      	movs	r2, #5
 80171fa:	4912      	ldr	r1, [pc, #72]	; (8017244 <vTaskStartScheduler+0xe4>)
 80171fc:	4618      	mov	r0, r3
 80171fe:	f003 f817 	bl	801a230 <memcmp>
 8017202:	4603      	mov	r3, r0
 8017204:	2b00      	cmp	r3, #0
 8017206:	d005      	beq.n	8017214 <vTaskStartScheduler+0xb4>
 8017208:	4b11      	ldr	r3, [pc, #68]	; (8017250 <vTaskStartScheduler+0xf0>)
 801720a:	681b      	ldr	r3, [r3, #0]
 801720c:	4618      	mov	r0, r3
 801720e:	f002 fdf9 	bl	8019e04 <SEGGER_SYSVIEW_OnTaskStartExec>
 8017212:	e001      	b.n	8017218 <vTaskStartScheduler+0xb8>
 8017214:	f002 fd98 	bl	8019d48 <SEGGER_SYSVIEW_OnIdle>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8017218:	f001 f93a 	bl	8018490 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801721c:	e00e      	b.n	801723c <vTaskStartScheduler+0xdc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801721e:	697b      	ldr	r3, [r7, #20]
 8017220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017224:	d10a      	bne.n	801723c <vTaskStartScheduler+0xdc>
	__asm volatile
 8017226:	f04f 0350 	mov.w	r3, #80	; 0x50
 801722a:	f383 8811 	msr	BASEPRI, r3
 801722e:	f3bf 8f6f 	isb	sy
 8017232:	f3bf 8f4f 	dsb	sy
 8017236:	60fb      	str	r3, [r7, #12]
}
 8017238:	bf00      	nop
 801723a:	e7fe      	b.n	801723a <vTaskStartScheduler+0xda>
}
 801723c:	bf00      	nop
 801723e:	3718      	adds	r7, #24
 8017240:	46bd      	mov	sp, r7
 8017242:	bd80      	pop	{r7, pc}
 8017244:	0801af74 	.word	0x0801af74
 8017248:	080178f1 	.word	0x080178f1
 801724c:	2000243c 	.word	0x2000243c
 8017250:	20001f44 	.word	0x20001f44
 8017254:	200013c4 	.word	0x200013c4
 8017258:	20002438 	.word	0x20002438
 801725c:	20002424 	.word	0x20002424
 8017260:	2000241c 	.word	0x2000241c

08017264 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8017264:	b480      	push	{r7}
 8017266:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8017268:	4b04      	ldr	r3, [pc, #16]	; (801727c <vTaskSuspendAll+0x18>)
 801726a:	681b      	ldr	r3, [r3, #0]
 801726c:	3301      	adds	r3, #1
 801726e:	4a03      	ldr	r2, [pc, #12]	; (801727c <vTaskSuspendAll+0x18>)
 8017270:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8017272:	bf00      	nop
 8017274:	46bd      	mov	sp, r7
 8017276:	f85d 7b04 	ldr.w	r7, [sp], #4
 801727a:	4770      	bx	lr
 801727c:	20002440 	.word	0x20002440

08017280 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8017280:	b580      	push	{r7, lr}
 8017282:	b084      	sub	sp, #16
 8017284:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8017286:	2300      	movs	r3, #0
 8017288:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801728a:	2300      	movs	r3, #0
 801728c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801728e:	4b44      	ldr	r3, [pc, #272]	; (80173a0 <xTaskResumeAll+0x120>)
 8017290:	681b      	ldr	r3, [r3, #0]
 8017292:	2b00      	cmp	r3, #0
 8017294:	d10a      	bne.n	80172ac <xTaskResumeAll+0x2c>
	__asm volatile
 8017296:	f04f 0350 	mov.w	r3, #80	; 0x50
 801729a:	f383 8811 	msr	BASEPRI, r3
 801729e:	f3bf 8f6f 	isb	sy
 80172a2:	f3bf 8f4f 	dsb	sy
 80172a6:	603b      	str	r3, [r7, #0]
}
 80172a8:	bf00      	nop
 80172aa:	e7fe      	b.n	80172aa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80172ac:	f001 f992 	bl	80185d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80172b0:	4b3b      	ldr	r3, [pc, #236]	; (80173a0 <xTaskResumeAll+0x120>)
 80172b2:	681b      	ldr	r3, [r3, #0]
 80172b4:	3b01      	subs	r3, #1
 80172b6:	4a3a      	ldr	r2, [pc, #232]	; (80173a0 <xTaskResumeAll+0x120>)
 80172b8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80172ba:	4b39      	ldr	r3, [pc, #228]	; (80173a0 <xTaskResumeAll+0x120>)
 80172bc:	681b      	ldr	r3, [r3, #0]
 80172be:	2b00      	cmp	r3, #0
 80172c0:	d166      	bne.n	8017390 <xTaskResumeAll+0x110>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80172c2:	4b38      	ldr	r3, [pc, #224]	; (80173a4 <xTaskResumeAll+0x124>)
 80172c4:	681b      	ldr	r3, [r3, #0]
 80172c6:	2b00      	cmp	r3, #0
 80172c8:	d062      	beq.n	8017390 <xTaskResumeAll+0x110>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80172ca:	e033      	b.n	8017334 <xTaskResumeAll+0xb4>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80172cc:	4b36      	ldr	r3, [pc, #216]	; (80173a8 <xTaskResumeAll+0x128>)
 80172ce:	68db      	ldr	r3, [r3, #12]
 80172d0:	68db      	ldr	r3, [r3, #12]
 80172d2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80172d4:	68fb      	ldr	r3, [r7, #12]
 80172d6:	3318      	adds	r3, #24
 80172d8:	4618      	mov	r0, r3
 80172da:	f7fe fe2d 	bl	8015f38 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80172de:	68fb      	ldr	r3, [r7, #12]
 80172e0:	3304      	adds	r3, #4
 80172e2:	4618      	mov	r0, r3
 80172e4:	f7fe fe28 	bl	8015f38 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80172e8:	68fb      	ldr	r3, [r7, #12]
 80172ea:	4618      	mov	r0, r3
 80172ec:	f002 fdcc 	bl	8019e88 <SEGGER_SYSVIEW_OnTaskStartReady>
 80172f0:	68fb      	ldr	r3, [r7, #12]
 80172f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80172f4:	4b2d      	ldr	r3, [pc, #180]	; (80173ac <xTaskResumeAll+0x12c>)
 80172f6:	681b      	ldr	r3, [r3, #0]
 80172f8:	429a      	cmp	r2, r3
 80172fa:	d903      	bls.n	8017304 <xTaskResumeAll+0x84>
 80172fc:	68fb      	ldr	r3, [r7, #12]
 80172fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017300:	4a2a      	ldr	r2, [pc, #168]	; (80173ac <xTaskResumeAll+0x12c>)
 8017302:	6013      	str	r3, [r2, #0]
 8017304:	68fb      	ldr	r3, [r7, #12]
 8017306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017308:	4613      	mov	r3, r2
 801730a:	009b      	lsls	r3, r3, #2
 801730c:	4413      	add	r3, r2
 801730e:	009b      	lsls	r3, r3, #2
 8017310:	4a27      	ldr	r2, [pc, #156]	; (80173b0 <xTaskResumeAll+0x130>)
 8017312:	441a      	add	r2, r3
 8017314:	68fb      	ldr	r3, [r7, #12]
 8017316:	3304      	adds	r3, #4
 8017318:	4619      	mov	r1, r3
 801731a:	4610      	mov	r0, r2
 801731c:	f7fe fdaf 	bl	8015e7e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8017320:	68fb      	ldr	r3, [r7, #12]
 8017322:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017324:	4b23      	ldr	r3, [pc, #140]	; (80173b4 <xTaskResumeAll+0x134>)
 8017326:	681b      	ldr	r3, [r3, #0]
 8017328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801732a:	429a      	cmp	r2, r3
 801732c:	d302      	bcc.n	8017334 <xTaskResumeAll+0xb4>
					{
						xYieldPending = pdTRUE;
 801732e:	4b22      	ldr	r3, [pc, #136]	; (80173b8 <xTaskResumeAll+0x138>)
 8017330:	2201      	movs	r2, #1
 8017332:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8017334:	4b1c      	ldr	r3, [pc, #112]	; (80173a8 <xTaskResumeAll+0x128>)
 8017336:	681b      	ldr	r3, [r3, #0]
 8017338:	2b00      	cmp	r3, #0
 801733a:	d1c7      	bne.n	80172cc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801733c:	68fb      	ldr	r3, [r7, #12]
 801733e:	2b00      	cmp	r3, #0
 8017340:	d001      	beq.n	8017346 <xTaskResumeAll+0xc6>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8017342:	f000 fbc7 	bl	8017ad4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8017346:	4b1d      	ldr	r3, [pc, #116]	; (80173bc <xTaskResumeAll+0x13c>)
 8017348:	681b      	ldr	r3, [r3, #0]
 801734a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 801734c:	687b      	ldr	r3, [r7, #4]
 801734e:	2b00      	cmp	r3, #0
 8017350:	d010      	beq.n	8017374 <xTaskResumeAll+0xf4>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8017352:	f000 f859 	bl	8017408 <xTaskIncrementTick>
 8017356:	4603      	mov	r3, r0
 8017358:	2b00      	cmp	r3, #0
 801735a:	d002      	beq.n	8017362 <xTaskResumeAll+0xe2>
							{
								xYieldPending = pdTRUE;
 801735c:	4b16      	ldr	r3, [pc, #88]	; (80173b8 <xTaskResumeAll+0x138>)
 801735e:	2201      	movs	r2, #1
 8017360:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8017362:	687b      	ldr	r3, [r7, #4]
 8017364:	3b01      	subs	r3, #1
 8017366:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8017368:	687b      	ldr	r3, [r7, #4]
 801736a:	2b00      	cmp	r3, #0
 801736c:	d1f1      	bne.n	8017352 <xTaskResumeAll+0xd2>

						xPendedTicks = 0;
 801736e:	4b13      	ldr	r3, [pc, #76]	; (80173bc <xTaskResumeAll+0x13c>)
 8017370:	2200      	movs	r2, #0
 8017372:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8017374:	4b10      	ldr	r3, [pc, #64]	; (80173b8 <xTaskResumeAll+0x138>)
 8017376:	681b      	ldr	r3, [r3, #0]
 8017378:	2b00      	cmp	r3, #0
 801737a:	d009      	beq.n	8017390 <xTaskResumeAll+0x110>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801737c:	2301      	movs	r3, #1
 801737e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8017380:	4b0f      	ldr	r3, [pc, #60]	; (80173c0 <xTaskResumeAll+0x140>)
 8017382:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017386:	601a      	str	r2, [r3, #0]
 8017388:	f3bf 8f4f 	dsb	sy
 801738c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8017390:	f001 f950 	bl	8018634 <vPortExitCritical>

	return xAlreadyYielded;
 8017394:	68bb      	ldr	r3, [r7, #8]
}
 8017396:	4618      	mov	r0, r3
 8017398:	3710      	adds	r7, #16
 801739a:	46bd      	mov	sp, r7
 801739c:	bd80      	pop	{r7, pc}
 801739e:	bf00      	nop
 80173a0:	20002440 	.word	0x20002440
 80173a4:	20002418 	.word	0x20002418
 80173a8:	200023d8 	.word	0x200023d8
 80173ac:	20002420 	.word	0x20002420
 80173b0:	20001f48 	.word	0x20001f48
 80173b4:	20001f44 	.word	0x20001f44
 80173b8:	2000242c 	.word	0x2000242c
 80173bc:	20002428 	.word	0x20002428
 80173c0:	e000ed04 	.word	0xe000ed04

080173c4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80173c4:	b480      	push	{r7}
 80173c6:	b083      	sub	sp, #12
 80173c8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80173ca:	4b05      	ldr	r3, [pc, #20]	; (80173e0 <xTaskGetTickCount+0x1c>)
 80173cc:	681b      	ldr	r3, [r3, #0]
 80173ce:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80173d0:	687b      	ldr	r3, [r7, #4]
}
 80173d2:	4618      	mov	r0, r3
 80173d4:	370c      	adds	r7, #12
 80173d6:	46bd      	mov	sp, r7
 80173d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173dc:	4770      	bx	lr
 80173de:	bf00      	nop
 80173e0:	2000241c 	.word	0x2000241c

080173e4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80173e4:	b580      	push	{r7, lr}
 80173e6:	b082      	sub	sp, #8
 80173e8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80173ea:	f001 f9d5 	bl	8018798 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80173ee:	2300      	movs	r3, #0
 80173f0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80173f2:	4b04      	ldr	r3, [pc, #16]	; (8017404 <xTaskGetTickCountFromISR+0x20>)
 80173f4:	681b      	ldr	r3, [r3, #0]
 80173f6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80173f8:	683b      	ldr	r3, [r7, #0]
}
 80173fa:	4618      	mov	r0, r3
 80173fc:	3708      	adds	r7, #8
 80173fe:	46bd      	mov	sp, r7
 8017400:	bd80      	pop	{r7, pc}
 8017402:	bf00      	nop
 8017404:	2000241c 	.word	0x2000241c

08017408 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8017408:	b580      	push	{r7, lr}
 801740a:	b086      	sub	sp, #24
 801740c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801740e:	2300      	movs	r3, #0
 8017410:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017412:	4b51      	ldr	r3, [pc, #324]	; (8017558 <xTaskIncrementTick+0x150>)
 8017414:	681b      	ldr	r3, [r3, #0]
 8017416:	2b00      	cmp	r3, #0
 8017418:	f040 8093 	bne.w	8017542 <xTaskIncrementTick+0x13a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801741c:	4b4f      	ldr	r3, [pc, #316]	; (801755c <xTaskIncrementTick+0x154>)
 801741e:	681b      	ldr	r3, [r3, #0]
 8017420:	3301      	adds	r3, #1
 8017422:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8017424:	4a4d      	ldr	r2, [pc, #308]	; (801755c <xTaskIncrementTick+0x154>)
 8017426:	693b      	ldr	r3, [r7, #16]
 8017428:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801742a:	693b      	ldr	r3, [r7, #16]
 801742c:	2b00      	cmp	r3, #0
 801742e:	d120      	bne.n	8017472 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8017430:	4b4b      	ldr	r3, [pc, #300]	; (8017560 <xTaskIncrementTick+0x158>)
 8017432:	681b      	ldr	r3, [r3, #0]
 8017434:	681b      	ldr	r3, [r3, #0]
 8017436:	2b00      	cmp	r3, #0
 8017438:	d00a      	beq.n	8017450 <xTaskIncrementTick+0x48>
	__asm volatile
 801743a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801743e:	f383 8811 	msr	BASEPRI, r3
 8017442:	f3bf 8f6f 	isb	sy
 8017446:	f3bf 8f4f 	dsb	sy
 801744a:	603b      	str	r3, [r7, #0]
}
 801744c:	bf00      	nop
 801744e:	e7fe      	b.n	801744e <xTaskIncrementTick+0x46>
 8017450:	4b43      	ldr	r3, [pc, #268]	; (8017560 <xTaskIncrementTick+0x158>)
 8017452:	681b      	ldr	r3, [r3, #0]
 8017454:	60fb      	str	r3, [r7, #12]
 8017456:	4b43      	ldr	r3, [pc, #268]	; (8017564 <xTaskIncrementTick+0x15c>)
 8017458:	681b      	ldr	r3, [r3, #0]
 801745a:	4a41      	ldr	r2, [pc, #260]	; (8017560 <xTaskIncrementTick+0x158>)
 801745c:	6013      	str	r3, [r2, #0]
 801745e:	4a41      	ldr	r2, [pc, #260]	; (8017564 <xTaskIncrementTick+0x15c>)
 8017460:	68fb      	ldr	r3, [r7, #12]
 8017462:	6013      	str	r3, [r2, #0]
 8017464:	4b40      	ldr	r3, [pc, #256]	; (8017568 <xTaskIncrementTick+0x160>)
 8017466:	681b      	ldr	r3, [r3, #0]
 8017468:	3301      	adds	r3, #1
 801746a:	4a3f      	ldr	r2, [pc, #252]	; (8017568 <xTaskIncrementTick+0x160>)
 801746c:	6013      	str	r3, [r2, #0]
 801746e:	f000 fb31 	bl	8017ad4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8017472:	4b3e      	ldr	r3, [pc, #248]	; (801756c <xTaskIncrementTick+0x164>)
 8017474:	681b      	ldr	r3, [r3, #0]
 8017476:	693a      	ldr	r2, [r7, #16]
 8017478:	429a      	cmp	r2, r3
 801747a:	d34d      	bcc.n	8017518 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801747c:	4b38      	ldr	r3, [pc, #224]	; (8017560 <xTaskIncrementTick+0x158>)
 801747e:	681b      	ldr	r3, [r3, #0]
 8017480:	681b      	ldr	r3, [r3, #0]
 8017482:	2b00      	cmp	r3, #0
 8017484:	d104      	bne.n	8017490 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017486:	4b39      	ldr	r3, [pc, #228]	; (801756c <xTaskIncrementTick+0x164>)
 8017488:	f04f 32ff 	mov.w	r2, #4294967295
 801748c:	601a      	str	r2, [r3, #0]
					break;
 801748e:	e043      	b.n	8017518 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017490:	4b33      	ldr	r3, [pc, #204]	; (8017560 <xTaskIncrementTick+0x158>)
 8017492:	681b      	ldr	r3, [r3, #0]
 8017494:	68db      	ldr	r3, [r3, #12]
 8017496:	68db      	ldr	r3, [r3, #12]
 8017498:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801749a:	68bb      	ldr	r3, [r7, #8]
 801749c:	685b      	ldr	r3, [r3, #4]
 801749e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80174a0:	693a      	ldr	r2, [r7, #16]
 80174a2:	687b      	ldr	r3, [r7, #4]
 80174a4:	429a      	cmp	r2, r3
 80174a6:	d203      	bcs.n	80174b0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80174a8:	4a30      	ldr	r2, [pc, #192]	; (801756c <xTaskIncrementTick+0x164>)
 80174aa:	687b      	ldr	r3, [r7, #4]
 80174ac:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80174ae:	e033      	b.n	8017518 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80174b0:	68bb      	ldr	r3, [r7, #8]
 80174b2:	3304      	adds	r3, #4
 80174b4:	4618      	mov	r0, r3
 80174b6:	f7fe fd3f 	bl	8015f38 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80174ba:	68bb      	ldr	r3, [r7, #8]
 80174bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80174be:	2b00      	cmp	r3, #0
 80174c0:	d004      	beq.n	80174cc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80174c2:	68bb      	ldr	r3, [r7, #8]
 80174c4:	3318      	adds	r3, #24
 80174c6:	4618      	mov	r0, r3
 80174c8:	f7fe fd36 	bl	8015f38 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80174cc:	68bb      	ldr	r3, [r7, #8]
 80174ce:	4618      	mov	r0, r3
 80174d0:	f002 fcda 	bl	8019e88 <SEGGER_SYSVIEW_OnTaskStartReady>
 80174d4:	68bb      	ldr	r3, [r7, #8]
 80174d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80174d8:	4b25      	ldr	r3, [pc, #148]	; (8017570 <xTaskIncrementTick+0x168>)
 80174da:	681b      	ldr	r3, [r3, #0]
 80174dc:	429a      	cmp	r2, r3
 80174de:	d903      	bls.n	80174e8 <xTaskIncrementTick+0xe0>
 80174e0:	68bb      	ldr	r3, [r7, #8]
 80174e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80174e4:	4a22      	ldr	r2, [pc, #136]	; (8017570 <xTaskIncrementTick+0x168>)
 80174e6:	6013      	str	r3, [r2, #0]
 80174e8:	68bb      	ldr	r3, [r7, #8]
 80174ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80174ec:	4613      	mov	r3, r2
 80174ee:	009b      	lsls	r3, r3, #2
 80174f0:	4413      	add	r3, r2
 80174f2:	009b      	lsls	r3, r3, #2
 80174f4:	4a1f      	ldr	r2, [pc, #124]	; (8017574 <xTaskIncrementTick+0x16c>)
 80174f6:	441a      	add	r2, r3
 80174f8:	68bb      	ldr	r3, [r7, #8]
 80174fa:	3304      	adds	r3, #4
 80174fc:	4619      	mov	r1, r3
 80174fe:	4610      	mov	r0, r2
 8017500:	f7fe fcbd 	bl	8015e7e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8017504:	68bb      	ldr	r3, [r7, #8]
 8017506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017508:	4b1b      	ldr	r3, [pc, #108]	; (8017578 <xTaskIncrementTick+0x170>)
 801750a:	681b      	ldr	r3, [r3, #0]
 801750c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801750e:	429a      	cmp	r2, r3
 8017510:	d3b4      	bcc.n	801747c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8017512:	2301      	movs	r3, #1
 8017514:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8017516:	e7b1      	b.n	801747c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8017518:	4b17      	ldr	r3, [pc, #92]	; (8017578 <xTaskIncrementTick+0x170>)
 801751a:	681b      	ldr	r3, [r3, #0]
 801751c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801751e:	4915      	ldr	r1, [pc, #84]	; (8017574 <xTaskIncrementTick+0x16c>)
 8017520:	4613      	mov	r3, r2
 8017522:	009b      	lsls	r3, r3, #2
 8017524:	4413      	add	r3, r2
 8017526:	009b      	lsls	r3, r3, #2
 8017528:	440b      	add	r3, r1
 801752a:	681b      	ldr	r3, [r3, #0]
 801752c:	2b01      	cmp	r3, #1
 801752e:	d901      	bls.n	8017534 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8017530:	2301      	movs	r3, #1
 8017532:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8017534:	4b11      	ldr	r3, [pc, #68]	; (801757c <xTaskIncrementTick+0x174>)
 8017536:	681b      	ldr	r3, [r3, #0]
 8017538:	2b00      	cmp	r3, #0
 801753a:	d007      	beq.n	801754c <xTaskIncrementTick+0x144>
			{
				xSwitchRequired = pdTRUE;
 801753c:	2301      	movs	r3, #1
 801753e:	617b      	str	r3, [r7, #20]
 8017540:	e004      	b.n	801754c <xTaskIncrementTick+0x144>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8017542:	4b0f      	ldr	r3, [pc, #60]	; (8017580 <xTaskIncrementTick+0x178>)
 8017544:	681b      	ldr	r3, [r3, #0]
 8017546:	3301      	adds	r3, #1
 8017548:	4a0d      	ldr	r2, [pc, #52]	; (8017580 <xTaskIncrementTick+0x178>)
 801754a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 801754c:	697b      	ldr	r3, [r7, #20]
}
 801754e:	4618      	mov	r0, r3
 8017550:	3718      	adds	r7, #24
 8017552:	46bd      	mov	sp, r7
 8017554:	bd80      	pop	{r7, pc}
 8017556:	bf00      	nop
 8017558:	20002440 	.word	0x20002440
 801755c:	2000241c 	.word	0x2000241c
 8017560:	200023d0 	.word	0x200023d0
 8017564:	200023d4 	.word	0x200023d4
 8017568:	20002430 	.word	0x20002430
 801756c:	20002438 	.word	0x20002438
 8017570:	20002420 	.word	0x20002420
 8017574:	20001f48 	.word	0x20001f48
 8017578:	20001f44 	.word	0x20001f44
 801757c:	2000242c 	.word	0x2000242c
 8017580:	20002428 	.word	0x20002428

08017584 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8017584:	b580      	push	{r7, lr}
 8017586:	b084      	sub	sp, #16
 8017588:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801758a:	4b33      	ldr	r3, [pc, #204]	; (8017658 <vTaskSwitchContext+0xd4>)
 801758c:	681b      	ldr	r3, [r3, #0]
 801758e:	2b00      	cmp	r3, #0
 8017590:	d003      	beq.n	801759a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8017592:	4b32      	ldr	r3, [pc, #200]	; (801765c <vTaskSwitchContext+0xd8>)
 8017594:	2201      	movs	r2, #1
 8017596:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8017598:	e059      	b.n	801764e <vTaskSwitchContext+0xca>
		xYieldPending = pdFALSE;
 801759a:	4b30      	ldr	r3, [pc, #192]	; (801765c <vTaskSwitchContext+0xd8>)
 801759c:	2200      	movs	r2, #0
 801759e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80175a0:	4b2f      	ldr	r3, [pc, #188]	; (8017660 <vTaskSwitchContext+0xdc>)
 80175a2:	681b      	ldr	r3, [r3, #0]
 80175a4:	60fb      	str	r3, [r7, #12]
 80175a6:	e010      	b.n	80175ca <vTaskSwitchContext+0x46>
 80175a8:	68fb      	ldr	r3, [r7, #12]
 80175aa:	2b00      	cmp	r3, #0
 80175ac:	d10a      	bne.n	80175c4 <vTaskSwitchContext+0x40>
	__asm volatile
 80175ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80175b2:	f383 8811 	msr	BASEPRI, r3
 80175b6:	f3bf 8f6f 	isb	sy
 80175ba:	f3bf 8f4f 	dsb	sy
 80175be:	607b      	str	r3, [r7, #4]
}
 80175c0:	bf00      	nop
 80175c2:	e7fe      	b.n	80175c2 <vTaskSwitchContext+0x3e>
 80175c4:	68fb      	ldr	r3, [r7, #12]
 80175c6:	3b01      	subs	r3, #1
 80175c8:	60fb      	str	r3, [r7, #12]
 80175ca:	4926      	ldr	r1, [pc, #152]	; (8017664 <vTaskSwitchContext+0xe0>)
 80175cc:	68fa      	ldr	r2, [r7, #12]
 80175ce:	4613      	mov	r3, r2
 80175d0:	009b      	lsls	r3, r3, #2
 80175d2:	4413      	add	r3, r2
 80175d4:	009b      	lsls	r3, r3, #2
 80175d6:	440b      	add	r3, r1
 80175d8:	681b      	ldr	r3, [r3, #0]
 80175da:	2b00      	cmp	r3, #0
 80175dc:	d0e4      	beq.n	80175a8 <vTaskSwitchContext+0x24>
 80175de:	68fa      	ldr	r2, [r7, #12]
 80175e0:	4613      	mov	r3, r2
 80175e2:	009b      	lsls	r3, r3, #2
 80175e4:	4413      	add	r3, r2
 80175e6:	009b      	lsls	r3, r3, #2
 80175e8:	4a1e      	ldr	r2, [pc, #120]	; (8017664 <vTaskSwitchContext+0xe0>)
 80175ea:	4413      	add	r3, r2
 80175ec:	60bb      	str	r3, [r7, #8]
 80175ee:	68bb      	ldr	r3, [r7, #8]
 80175f0:	685b      	ldr	r3, [r3, #4]
 80175f2:	685a      	ldr	r2, [r3, #4]
 80175f4:	68bb      	ldr	r3, [r7, #8]
 80175f6:	605a      	str	r2, [r3, #4]
 80175f8:	68bb      	ldr	r3, [r7, #8]
 80175fa:	685a      	ldr	r2, [r3, #4]
 80175fc:	68bb      	ldr	r3, [r7, #8]
 80175fe:	3308      	adds	r3, #8
 8017600:	429a      	cmp	r2, r3
 8017602:	d104      	bne.n	801760e <vTaskSwitchContext+0x8a>
 8017604:	68bb      	ldr	r3, [r7, #8]
 8017606:	685b      	ldr	r3, [r3, #4]
 8017608:	685a      	ldr	r2, [r3, #4]
 801760a:	68bb      	ldr	r3, [r7, #8]
 801760c:	605a      	str	r2, [r3, #4]
 801760e:	68bb      	ldr	r3, [r7, #8]
 8017610:	685b      	ldr	r3, [r3, #4]
 8017612:	68db      	ldr	r3, [r3, #12]
 8017614:	4a14      	ldr	r2, [pc, #80]	; (8017668 <vTaskSwitchContext+0xe4>)
 8017616:	6013      	str	r3, [r2, #0]
 8017618:	4a11      	ldr	r2, [pc, #68]	; (8017660 <vTaskSwitchContext+0xdc>)
 801761a:	68fb      	ldr	r3, [r7, #12]
 801761c:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 801761e:	4b12      	ldr	r3, [pc, #72]	; (8017668 <vTaskSwitchContext+0xe4>)
 8017620:	681b      	ldr	r3, [r3, #0]
 8017622:	3334      	adds	r3, #52	; 0x34
 8017624:	2205      	movs	r2, #5
 8017626:	4911      	ldr	r1, [pc, #68]	; (801766c <vTaskSwitchContext+0xe8>)
 8017628:	4618      	mov	r0, r3
 801762a:	f002 fe01 	bl	801a230 <memcmp>
 801762e:	4603      	mov	r3, r0
 8017630:	2b00      	cmp	r3, #0
 8017632:	d005      	beq.n	8017640 <vTaskSwitchContext+0xbc>
 8017634:	4b0c      	ldr	r3, [pc, #48]	; (8017668 <vTaskSwitchContext+0xe4>)
 8017636:	681b      	ldr	r3, [r3, #0]
 8017638:	4618      	mov	r0, r3
 801763a:	f002 fbe3 	bl	8019e04 <SEGGER_SYSVIEW_OnTaskStartExec>
 801763e:	e001      	b.n	8017644 <vTaskSwitchContext+0xc0>
 8017640:	f002 fb82 	bl	8019d48 <SEGGER_SYSVIEW_OnIdle>
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8017644:	4b08      	ldr	r3, [pc, #32]	; (8017668 <vTaskSwitchContext+0xe4>)
 8017646:	681b      	ldr	r3, [r3, #0]
 8017648:	3364      	adds	r3, #100	; 0x64
 801764a:	4a09      	ldr	r2, [pc, #36]	; (8017670 <vTaskSwitchContext+0xec>)
 801764c:	6013      	str	r3, [r2, #0]
}
 801764e:	bf00      	nop
 8017650:	3710      	adds	r7, #16
 8017652:	46bd      	mov	sp, r7
 8017654:	bd80      	pop	{r7, pc}
 8017656:	bf00      	nop
 8017658:	20002440 	.word	0x20002440
 801765c:	2000242c 	.word	0x2000242c
 8017660:	20002420 	.word	0x20002420
 8017664:	20001f48 	.word	0x20001f48
 8017668:	20001f44 	.word	0x20001f44
 801766c:	0801af74 	.word	0x0801af74
 8017670:	200013c4 	.word	0x200013c4

08017674 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8017674:	b580      	push	{r7, lr}
 8017676:	b084      	sub	sp, #16
 8017678:	af00      	add	r7, sp, #0
 801767a:	6078      	str	r0, [r7, #4]
 801767c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801767e:	687b      	ldr	r3, [r7, #4]
 8017680:	2b00      	cmp	r3, #0
 8017682:	d10a      	bne.n	801769a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8017684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017688:	f383 8811 	msr	BASEPRI, r3
 801768c:	f3bf 8f6f 	isb	sy
 8017690:	f3bf 8f4f 	dsb	sy
 8017694:	60fb      	str	r3, [r7, #12]
}
 8017696:	bf00      	nop
 8017698:	e7fe      	b.n	8017698 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801769a:	4b07      	ldr	r3, [pc, #28]	; (80176b8 <vTaskPlaceOnEventList+0x44>)
 801769c:	681b      	ldr	r3, [r3, #0]
 801769e:	3318      	adds	r3, #24
 80176a0:	4619      	mov	r1, r3
 80176a2:	6878      	ldr	r0, [r7, #4]
 80176a4:	f7fe fc0f 	bl	8015ec6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80176a8:	2101      	movs	r1, #1
 80176aa:	6838      	ldr	r0, [r7, #0]
 80176ac:	f000 fac6 	bl	8017c3c <prvAddCurrentTaskToDelayedList>
}
 80176b0:	bf00      	nop
 80176b2:	3710      	adds	r7, #16
 80176b4:	46bd      	mov	sp, r7
 80176b6:	bd80      	pop	{r7, pc}
 80176b8:	20001f44 	.word	0x20001f44

080176bc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80176bc:	b580      	push	{r7, lr}
 80176be:	b086      	sub	sp, #24
 80176c0:	af00      	add	r7, sp, #0
 80176c2:	60f8      	str	r0, [r7, #12]
 80176c4:	60b9      	str	r1, [r7, #8]
 80176c6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80176c8:	68fb      	ldr	r3, [r7, #12]
 80176ca:	2b00      	cmp	r3, #0
 80176cc:	d10a      	bne.n	80176e4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80176ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80176d2:	f383 8811 	msr	BASEPRI, r3
 80176d6:	f3bf 8f6f 	isb	sy
 80176da:	f3bf 8f4f 	dsb	sy
 80176de:	617b      	str	r3, [r7, #20]
}
 80176e0:	bf00      	nop
 80176e2:	e7fe      	b.n	80176e2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80176e4:	4b0b      	ldr	r3, [pc, #44]	; (8017714 <vTaskPlaceOnEventListRestricted+0x58>)
 80176e6:	681b      	ldr	r3, [r3, #0]
 80176e8:	3318      	adds	r3, #24
 80176ea:	4619      	mov	r1, r3
 80176ec:	68f8      	ldr	r0, [r7, #12]
 80176ee:	f7fe fbc6 	bl	8015e7e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80176f2:	687b      	ldr	r3, [r7, #4]
 80176f4:	2b00      	cmp	r3, #0
 80176f6:	d002      	beq.n	80176fe <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80176f8:	f04f 33ff 	mov.w	r3, #4294967295
 80176fc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 80176fe:	2024      	movs	r0, #36	; 0x24
 8017700:	f001 fe9e 	bl	8019440 <SEGGER_SYSVIEW_RecordVoid>
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8017704:	6879      	ldr	r1, [r7, #4]
 8017706:	68b8      	ldr	r0, [r7, #8]
 8017708:	f000 fa98 	bl	8017c3c <prvAddCurrentTaskToDelayedList>
	}
 801770c:	bf00      	nop
 801770e:	3718      	adds	r7, #24
 8017710:	46bd      	mov	sp, r7
 8017712:	bd80      	pop	{r7, pc}
 8017714:	20001f44 	.word	0x20001f44

08017718 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8017718:	b580      	push	{r7, lr}
 801771a:	b086      	sub	sp, #24
 801771c:	af00      	add	r7, sp, #0
 801771e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017720:	687b      	ldr	r3, [r7, #4]
 8017722:	68db      	ldr	r3, [r3, #12]
 8017724:	68db      	ldr	r3, [r3, #12]
 8017726:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8017728:	693b      	ldr	r3, [r7, #16]
 801772a:	2b00      	cmp	r3, #0
 801772c:	d10a      	bne.n	8017744 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 801772e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017732:	f383 8811 	msr	BASEPRI, r3
 8017736:	f3bf 8f6f 	isb	sy
 801773a:	f3bf 8f4f 	dsb	sy
 801773e:	60fb      	str	r3, [r7, #12]
}
 8017740:	bf00      	nop
 8017742:	e7fe      	b.n	8017742 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8017744:	693b      	ldr	r3, [r7, #16]
 8017746:	3318      	adds	r3, #24
 8017748:	4618      	mov	r0, r3
 801774a:	f7fe fbf5 	bl	8015f38 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801774e:	4b20      	ldr	r3, [pc, #128]	; (80177d0 <xTaskRemoveFromEventList+0xb8>)
 8017750:	681b      	ldr	r3, [r3, #0]
 8017752:	2b00      	cmp	r3, #0
 8017754:	d121      	bne.n	801779a <xTaskRemoveFromEventList+0x82>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8017756:	693b      	ldr	r3, [r7, #16]
 8017758:	3304      	adds	r3, #4
 801775a:	4618      	mov	r0, r3
 801775c:	f7fe fbec 	bl	8015f38 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8017760:	693b      	ldr	r3, [r7, #16]
 8017762:	4618      	mov	r0, r3
 8017764:	f002 fb90 	bl	8019e88 <SEGGER_SYSVIEW_OnTaskStartReady>
 8017768:	693b      	ldr	r3, [r7, #16]
 801776a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801776c:	4b19      	ldr	r3, [pc, #100]	; (80177d4 <xTaskRemoveFromEventList+0xbc>)
 801776e:	681b      	ldr	r3, [r3, #0]
 8017770:	429a      	cmp	r2, r3
 8017772:	d903      	bls.n	801777c <xTaskRemoveFromEventList+0x64>
 8017774:	693b      	ldr	r3, [r7, #16]
 8017776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017778:	4a16      	ldr	r2, [pc, #88]	; (80177d4 <xTaskRemoveFromEventList+0xbc>)
 801777a:	6013      	str	r3, [r2, #0]
 801777c:	693b      	ldr	r3, [r7, #16]
 801777e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017780:	4613      	mov	r3, r2
 8017782:	009b      	lsls	r3, r3, #2
 8017784:	4413      	add	r3, r2
 8017786:	009b      	lsls	r3, r3, #2
 8017788:	4a13      	ldr	r2, [pc, #76]	; (80177d8 <xTaskRemoveFromEventList+0xc0>)
 801778a:	441a      	add	r2, r3
 801778c:	693b      	ldr	r3, [r7, #16]
 801778e:	3304      	adds	r3, #4
 8017790:	4619      	mov	r1, r3
 8017792:	4610      	mov	r0, r2
 8017794:	f7fe fb73 	bl	8015e7e <vListInsertEnd>
 8017798:	e005      	b.n	80177a6 <xTaskRemoveFromEventList+0x8e>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801779a:	693b      	ldr	r3, [r7, #16]
 801779c:	3318      	adds	r3, #24
 801779e:	4619      	mov	r1, r3
 80177a0:	480e      	ldr	r0, [pc, #56]	; (80177dc <xTaskRemoveFromEventList+0xc4>)
 80177a2:	f7fe fb6c 	bl	8015e7e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80177a6:	693b      	ldr	r3, [r7, #16]
 80177a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80177aa:	4b0d      	ldr	r3, [pc, #52]	; (80177e0 <xTaskRemoveFromEventList+0xc8>)
 80177ac:	681b      	ldr	r3, [r3, #0]
 80177ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80177b0:	429a      	cmp	r2, r3
 80177b2:	d905      	bls.n	80177c0 <xTaskRemoveFromEventList+0xa8>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80177b4:	2301      	movs	r3, #1
 80177b6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80177b8:	4b0a      	ldr	r3, [pc, #40]	; (80177e4 <xTaskRemoveFromEventList+0xcc>)
 80177ba:	2201      	movs	r2, #1
 80177bc:	601a      	str	r2, [r3, #0]
 80177be:	e001      	b.n	80177c4 <xTaskRemoveFromEventList+0xac>
	}
	else
	{
		xReturn = pdFALSE;
 80177c0:	2300      	movs	r3, #0
 80177c2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80177c4:	697b      	ldr	r3, [r7, #20]
}
 80177c6:	4618      	mov	r0, r3
 80177c8:	3718      	adds	r7, #24
 80177ca:	46bd      	mov	sp, r7
 80177cc:	bd80      	pop	{r7, pc}
 80177ce:	bf00      	nop
 80177d0:	20002440 	.word	0x20002440
 80177d4:	20002420 	.word	0x20002420
 80177d8:	20001f48 	.word	0x20001f48
 80177dc:	200023d8 	.word	0x200023d8
 80177e0:	20001f44 	.word	0x20001f44
 80177e4:	2000242c 	.word	0x2000242c

080177e8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80177e8:	b480      	push	{r7}
 80177ea:	b083      	sub	sp, #12
 80177ec:	af00      	add	r7, sp, #0
 80177ee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80177f0:	4b06      	ldr	r3, [pc, #24]	; (801780c <vTaskInternalSetTimeOutState+0x24>)
 80177f2:	681a      	ldr	r2, [r3, #0]
 80177f4:	687b      	ldr	r3, [r7, #4]
 80177f6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80177f8:	4b05      	ldr	r3, [pc, #20]	; (8017810 <vTaskInternalSetTimeOutState+0x28>)
 80177fa:	681a      	ldr	r2, [r3, #0]
 80177fc:	687b      	ldr	r3, [r7, #4]
 80177fe:	605a      	str	r2, [r3, #4]
}
 8017800:	bf00      	nop
 8017802:	370c      	adds	r7, #12
 8017804:	46bd      	mov	sp, r7
 8017806:	f85d 7b04 	ldr.w	r7, [sp], #4
 801780a:	4770      	bx	lr
 801780c:	20002430 	.word	0x20002430
 8017810:	2000241c 	.word	0x2000241c

08017814 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8017814:	b580      	push	{r7, lr}
 8017816:	b088      	sub	sp, #32
 8017818:	af00      	add	r7, sp, #0
 801781a:	6078      	str	r0, [r7, #4]
 801781c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801781e:	687b      	ldr	r3, [r7, #4]
 8017820:	2b00      	cmp	r3, #0
 8017822:	d10a      	bne.n	801783a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8017824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017828:	f383 8811 	msr	BASEPRI, r3
 801782c:	f3bf 8f6f 	isb	sy
 8017830:	f3bf 8f4f 	dsb	sy
 8017834:	613b      	str	r3, [r7, #16]
}
 8017836:	bf00      	nop
 8017838:	e7fe      	b.n	8017838 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801783a:	683b      	ldr	r3, [r7, #0]
 801783c:	2b00      	cmp	r3, #0
 801783e:	d10a      	bne.n	8017856 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8017840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017844:	f383 8811 	msr	BASEPRI, r3
 8017848:	f3bf 8f6f 	isb	sy
 801784c:	f3bf 8f4f 	dsb	sy
 8017850:	60fb      	str	r3, [r7, #12]
}
 8017852:	bf00      	nop
 8017854:	e7fe      	b.n	8017854 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8017856:	f000 febd 	bl	80185d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801785a:	4b1d      	ldr	r3, [pc, #116]	; (80178d0 <xTaskCheckForTimeOut+0xbc>)
 801785c:	681b      	ldr	r3, [r3, #0]
 801785e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8017860:	687b      	ldr	r3, [r7, #4]
 8017862:	685b      	ldr	r3, [r3, #4]
 8017864:	69ba      	ldr	r2, [r7, #24]
 8017866:	1ad3      	subs	r3, r2, r3
 8017868:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801786a:	683b      	ldr	r3, [r7, #0]
 801786c:	681b      	ldr	r3, [r3, #0]
 801786e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017872:	d102      	bne.n	801787a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8017874:	2300      	movs	r3, #0
 8017876:	61fb      	str	r3, [r7, #28]
 8017878:	e023      	b.n	80178c2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801787a:	687b      	ldr	r3, [r7, #4]
 801787c:	681a      	ldr	r2, [r3, #0]
 801787e:	4b15      	ldr	r3, [pc, #84]	; (80178d4 <xTaskCheckForTimeOut+0xc0>)
 8017880:	681b      	ldr	r3, [r3, #0]
 8017882:	429a      	cmp	r2, r3
 8017884:	d007      	beq.n	8017896 <xTaskCheckForTimeOut+0x82>
 8017886:	687b      	ldr	r3, [r7, #4]
 8017888:	685b      	ldr	r3, [r3, #4]
 801788a:	69ba      	ldr	r2, [r7, #24]
 801788c:	429a      	cmp	r2, r3
 801788e:	d302      	bcc.n	8017896 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8017890:	2301      	movs	r3, #1
 8017892:	61fb      	str	r3, [r7, #28]
 8017894:	e015      	b.n	80178c2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8017896:	683b      	ldr	r3, [r7, #0]
 8017898:	681b      	ldr	r3, [r3, #0]
 801789a:	697a      	ldr	r2, [r7, #20]
 801789c:	429a      	cmp	r2, r3
 801789e:	d20b      	bcs.n	80178b8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80178a0:	683b      	ldr	r3, [r7, #0]
 80178a2:	681a      	ldr	r2, [r3, #0]
 80178a4:	697b      	ldr	r3, [r7, #20]
 80178a6:	1ad2      	subs	r2, r2, r3
 80178a8:	683b      	ldr	r3, [r7, #0]
 80178aa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80178ac:	6878      	ldr	r0, [r7, #4]
 80178ae:	f7ff ff9b 	bl	80177e8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80178b2:	2300      	movs	r3, #0
 80178b4:	61fb      	str	r3, [r7, #28]
 80178b6:	e004      	b.n	80178c2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80178b8:	683b      	ldr	r3, [r7, #0]
 80178ba:	2200      	movs	r2, #0
 80178bc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80178be:	2301      	movs	r3, #1
 80178c0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80178c2:	f000 feb7 	bl	8018634 <vPortExitCritical>

	return xReturn;
 80178c6:	69fb      	ldr	r3, [r7, #28]
}
 80178c8:	4618      	mov	r0, r3
 80178ca:	3720      	adds	r7, #32
 80178cc:	46bd      	mov	sp, r7
 80178ce:	bd80      	pop	{r7, pc}
 80178d0:	2000241c 	.word	0x2000241c
 80178d4:	20002430 	.word	0x20002430

080178d8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80178d8:	b480      	push	{r7}
 80178da:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80178dc:	4b03      	ldr	r3, [pc, #12]	; (80178ec <vTaskMissedYield+0x14>)
 80178de:	2201      	movs	r2, #1
 80178e0:	601a      	str	r2, [r3, #0]
}
 80178e2:	bf00      	nop
 80178e4:	46bd      	mov	sp, r7
 80178e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178ea:	4770      	bx	lr
 80178ec:	2000242c 	.word	0x2000242c

080178f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80178f0:	b580      	push	{r7, lr}
 80178f2:	b082      	sub	sp, #8
 80178f4:	af00      	add	r7, sp, #0
 80178f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80178f8:	f000 f852 	bl	80179a0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80178fc:	4b06      	ldr	r3, [pc, #24]	; (8017918 <prvIdleTask+0x28>)
 80178fe:	681b      	ldr	r3, [r3, #0]
 8017900:	2b01      	cmp	r3, #1
 8017902:	d9f9      	bls.n	80178f8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8017904:	4b05      	ldr	r3, [pc, #20]	; (801791c <prvIdleTask+0x2c>)
 8017906:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801790a:	601a      	str	r2, [r3, #0]
 801790c:	f3bf 8f4f 	dsb	sy
 8017910:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8017914:	e7f0      	b.n	80178f8 <prvIdleTask+0x8>
 8017916:	bf00      	nop
 8017918:	20001f48 	.word	0x20001f48
 801791c:	e000ed04 	.word	0xe000ed04

08017920 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8017920:	b580      	push	{r7, lr}
 8017922:	b082      	sub	sp, #8
 8017924:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8017926:	2300      	movs	r3, #0
 8017928:	607b      	str	r3, [r7, #4]
 801792a:	e00c      	b.n	8017946 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801792c:	687a      	ldr	r2, [r7, #4]
 801792e:	4613      	mov	r3, r2
 8017930:	009b      	lsls	r3, r3, #2
 8017932:	4413      	add	r3, r2
 8017934:	009b      	lsls	r3, r3, #2
 8017936:	4a12      	ldr	r2, [pc, #72]	; (8017980 <prvInitialiseTaskLists+0x60>)
 8017938:	4413      	add	r3, r2
 801793a:	4618      	mov	r0, r3
 801793c:	f7fe fa72 	bl	8015e24 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8017940:	687b      	ldr	r3, [r7, #4]
 8017942:	3301      	adds	r3, #1
 8017944:	607b      	str	r3, [r7, #4]
 8017946:	687b      	ldr	r3, [r7, #4]
 8017948:	2b37      	cmp	r3, #55	; 0x37
 801794a:	d9ef      	bls.n	801792c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801794c:	480d      	ldr	r0, [pc, #52]	; (8017984 <prvInitialiseTaskLists+0x64>)
 801794e:	f7fe fa69 	bl	8015e24 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8017952:	480d      	ldr	r0, [pc, #52]	; (8017988 <prvInitialiseTaskLists+0x68>)
 8017954:	f7fe fa66 	bl	8015e24 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8017958:	480c      	ldr	r0, [pc, #48]	; (801798c <prvInitialiseTaskLists+0x6c>)
 801795a:	f7fe fa63 	bl	8015e24 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801795e:	480c      	ldr	r0, [pc, #48]	; (8017990 <prvInitialiseTaskLists+0x70>)
 8017960:	f7fe fa60 	bl	8015e24 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8017964:	480b      	ldr	r0, [pc, #44]	; (8017994 <prvInitialiseTaskLists+0x74>)
 8017966:	f7fe fa5d 	bl	8015e24 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801796a:	4b0b      	ldr	r3, [pc, #44]	; (8017998 <prvInitialiseTaskLists+0x78>)
 801796c:	4a05      	ldr	r2, [pc, #20]	; (8017984 <prvInitialiseTaskLists+0x64>)
 801796e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8017970:	4b0a      	ldr	r3, [pc, #40]	; (801799c <prvInitialiseTaskLists+0x7c>)
 8017972:	4a05      	ldr	r2, [pc, #20]	; (8017988 <prvInitialiseTaskLists+0x68>)
 8017974:	601a      	str	r2, [r3, #0]
}
 8017976:	bf00      	nop
 8017978:	3708      	adds	r7, #8
 801797a:	46bd      	mov	sp, r7
 801797c:	bd80      	pop	{r7, pc}
 801797e:	bf00      	nop
 8017980:	20001f48 	.word	0x20001f48
 8017984:	200023a8 	.word	0x200023a8
 8017988:	200023bc 	.word	0x200023bc
 801798c:	200023d8 	.word	0x200023d8
 8017990:	200023ec 	.word	0x200023ec
 8017994:	20002404 	.word	0x20002404
 8017998:	200023d0 	.word	0x200023d0
 801799c:	200023d4 	.word	0x200023d4

080179a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80179a0:	b580      	push	{r7, lr}
 80179a2:	b082      	sub	sp, #8
 80179a4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80179a6:	e019      	b.n	80179dc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80179a8:	f000 fe14 	bl	80185d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80179ac:	4b10      	ldr	r3, [pc, #64]	; (80179f0 <prvCheckTasksWaitingTermination+0x50>)
 80179ae:	68db      	ldr	r3, [r3, #12]
 80179b0:	68db      	ldr	r3, [r3, #12]
 80179b2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80179b4:	687b      	ldr	r3, [r7, #4]
 80179b6:	3304      	adds	r3, #4
 80179b8:	4618      	mov	r0, r3
 80179ba:	f7fe fabd 	bl	8015f38 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80179be:	4b0d      	ldr	r3, [pc, #52]	; (80179f4 <prvCheckTasksWaitingTermination+0x54>)
 80179c0:	681b      	ldr	r3, [r3, #0]
 80179c2:	3b01      	subs	r3, #1
 80179c4:	4a0b      	ldr	r2, [pc, #44]	; (80179f4 <prvCheckTasksWaitingTermination+0x54>)
 80179c6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80179c8:	4b0b      	ldr	r3, [pc, #44]	; (80179f8 <prvCheckTasksWaitingTermination+0x58>)
 80179ca:	681b      	ldr	r3, [r3, #0]
 80179cc:	3b01      	subs	r3, #1
 80179ce:	4a0a      	ldr	r2, [pc, #40]	; (80179f8 <prvCheckTasksWaitingTermination+0x58>)
 80179d0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80179d2:	f000 fe2f 	bl	8018634 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80179d6:	6878      	ldr	r0, [r7, #4]
 80179d8:	f000 f848 	bl	8017a6c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80179dc:	4b06      	ldr	r3, [pc, #24]	; (80179f8 <prvCheckTasksWaitingTermination+0x58>)
 80179de:	681b      	ldr	r3, [r3, #0]
 80179e0:	2b00      	cmp	r3, #0
 80179e2:	d1e1      	bne.n	80179a8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80179e4:	bf00      	nop
 80179e6:	bf00      	nop
 80179e8:	3708      	adds	r7, #8
 80179ea:	46bd      	mov	sp, r7
 80179ec:	bd80      	pop	{r7, pc}
 80179ee:	bf00      	nop
 80179f0:	200023ec 	.word	0x200023ec
 80179f4:	20002418 	.word	0x20002418
 80179f8:	20002400 	.word	0x20002400

080179fc <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 80179fc:	b480      	push	{r7}
 80179fe:	b085      	sub	sp, #20
 8017a00:	af00      	add	r7, sp, #0
 8017a02:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8017a04:	2300      	movs	r3, #0
 8017a06:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8017a08:	e005      	b.n	8017a16 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8017a0a:	687b      	ldr	r3, [r7, #4]
 8017a0c:	3301      	adds	r3, #1
 8017a0e:	607b      	str	r3, [r7, #4]
			ulCount++;
 8017a10:	68fb      	ldr	r3, [r7, #12]
 8017a12:	3301      	adds	r3, #1
 8017a14:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8017a16:	687b      	ldr	r3, [r7, #4]
 8017a18:	781b      	ldrb	r3, [r3, #0]
 8017a1a:	2ba5      	cmp	r3, #165	; 0xa5
 8017a1c:	d0f5      	beq.n	8017a0a <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8017a1e:	68fb      	ldr	r3, [r7, #12]
 8017a20:	089b      	lsrs	r3, r3, #2
 8017a22:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8017a24:	68fb      	ldr	r3, [r7, #12]
 8017a26:	b29b      	uxth	r3, r3
	}
 8017a28:	4618      	mov	r0, r3
 8017a2a:	3714      	adds	r7, #20
 8017a2c:	46bd      	mov	sp, r7
 8017a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a32:	4770      	bx	lr

08017a34 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 8017a34:	b580      	push	{r7, lr}
 8017a36:	b086      	sub	sp, #24
 8017a38:	af00      	add	r7, sp, #0
 8017a3a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 8017a3c:	687b      	ldr	r3, [r7, #4]
 8017a3e:	2b00      	cmp	r3, #0
 8017a40:	d102      	bne.n	8017a48 <uxTaskGetStackHighWaterMark+0x14>
 8017a42:	4b09      	ldr	r3, [pc, #36]	; (8017a68 <uxTaskGetStackHighWaterMark+0x34>)
 8017a44:	681b      	ldr	r3, [r3, #0]
 8017a46:	e000      	b.n	8017a4a <uxTaskGetStackHighWaterMark+0x16>
 8017a48:	687b      	ldr	r3, [r7, #4]
 8017a4a:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8017a4c:	697b      	ldr	r3, [r7, #20]
 8017a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017a50:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 8017a52:	6938      	ldr	r0, [r7, #16]
 8017a54:	f7ff ffd2 	bl	80179fc <prvTaskCheckFreeStackSpace>
 8017a58:	4603      	mov	r3, r0
 8017a5a:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 8017a5c:	68fb      	ldr	r3, [r7, #12]
	}
 8017a5e:	4618      	mov	r0, r3
 8017a60:	3718      	adds	r7, #24
 8017a62:	46bd      	mov	sp, r7
 8017a64:	bd80      	pop	{r7, pc}
 8017a66:	bf00      	nop
 8017a68:	20001f44 	.word	0x20001f44

08017a6c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8017a6c:	b580      	push	{r7, lr}
 8017a6e:	b084      	sub	sp, #16
 8017a70:	af00      	add	r7, sp, #0
 8017a72:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8017a74:	687b      	ldr	r3, [r7, #4]
 8017a76:	3364      	adds	r3, #100	; 0x64
 8017a78:	4618      	mov	r0, r3
 8017a7a:	f002 fc0b 	bl	801a294 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8017a7e:	687b      	ldr	r3, [r7, #4]
 8017a80:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 8017a84:	2b00      	cmp	r3, #0
 8017a86:	d108      	bne.n	8017a9a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8017a88:	687b      	ldr	r3, [r7, #4]
 8017a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017a8c:	4618      	mov	r0, r3
 8017a8e:	f000 ff8f 	bl	80189b0 <vPortFree>
				vPortFree( pxTCB );
 8017a92:	6878      	ldr	r0, [r7, #4]
 8017a94:	f000 ff8c 	bl	80189b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8017a98:	e018      	b.n	8017acc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8017a9a:	687b      	ldr	r3, [r7, #4]
 8017a9c:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 8017aa0:	2b01      	cmp	r3, #1
 8017aa2:	d103      	bne.n	8017aac <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8017aa4:	6878      	ldr	r0, [r7, #4]
 8017aa6:	f000 ff83 	bl	80189b0 <vPortFree>
	}
 8017aaa:	e00f      	b.n	8017acc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8017aac:	687b      	ldr	r3, [r7, #4]
 8017aae:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 8017ab2:	2b02      	cmp	r3, #2
 8017ab4:	d00a      	beq.n	8017acc <prvDeleteTCB+0x60>
	__asm volatile
 8017ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017aba:	f383 8811 	msr	BASEPRI, r3
 8017abe:	f3bf 8f6f 	isb	sy
 8017ac2:	f3bf 8f4f 	dsb	sy
 8017ac6:	60fb      	str	r3, [r7, #12]
}
 8017ac8:	bf00      	nop
 8017aca:	e7fe      	b.n	8017aca <prvDeleteTCB+0x5e>
	}
 8017acc:	bf00      	nop
 8017ace:	3710      	adds	r7, #16
 8017ad0:	46bd      	mov	sp, r7
 8017ad2:	bd80      	pop	{r7, pc}

08017ad4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8017ad4:	b480      	push	{r7}
 8017ad6:	b083      	sub	sp, #12
 8017ad8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8017ada:	4b0c      	ldr	r3, [pc, #48]	; (8017b0c <prvResetNextTaskUnblockTime+0x38>)
 8017adc:	681b      	ldr	r3, [r3, #0]
 8017ade:	681b      	ldr	r3, [r3, #0]
 8017ae0:	2b00      	cmp	r3, #0
 8017ae2:	d104      	bne.n	8017aee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8017ae4:	4b0a      	ldr	r3, [pc, #40]	; (8017b10 <prvResetNextTaskUnblockTime+0x3c>)
 8017ae6:	f04f 32ff 	mov.w	r2, #4294967295
 8017aea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8017aec:	e008      	b.n	8017b00 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017aee:	4b07      	ldr	r3, [pc, #28]	; (8017b0c <prvResetNextTaskUnblockTime+0x38>)
 8017af0:	681b      	ldr	r3, [r3, #0]
 8017af2:	68db      	ldr	r3, [r3, #12]
 8017af4:	68db      	ldr	r3, [r3, #12]
 8017af6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8017af8:	687b      	ldr	r3, [r7, #4]
 8017afa:	685b      	ldr	r3, [r3, #4]
 8017afc:	4a04      	ldr	r2, [pc, #16]	; (8017b10 <prvResetNextTaskUnblockTime+0x3c>)
 8017afe:	6013      	str	r3, [r2, #0]
}
 8017b00:	bf00      	nop
 8017b02:	370c      	adds	r7, #12
 8017b04:	46bd      	mov	sp, r7
 8017b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b0a:	4770      	bx	lr
 8017b0c:	200023d0 	.word	0x200023d0
 8017b10:	20002438 	.word	0x20002438

08017b14 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8017b14:	b480      	push	{r7}
 8017b16:	b083      	sub	sp, #12
 8017b18:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8017b1a:	4b0b      	ldr	r3, [pc, #44]	; (8017b48 <xTaskGetSchedulerState+0x34>)
 8017b1c:	681b      	ldr	r3, [r3, #0]
 8017b1e:	2b00      	cmp	r3, #0
 8017b20:	d102      	bne.n	8017b28 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8017b22:	2301      	movs	r3, #1
 8017b24:	607b      	str	r3, [r7, #4]
 8017b26:	e008      	b.n	8017b3a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017b28:	4b08      	ldr	r3, [pc, #32]	; (8017b4c <xTaskGetSchedulerState+0x38>)
 8017b2a:	681b      	ldr	r3, [r3, #0]
 8017b2c:	2b00      	cmp	r3, #0
 8017b2e:	d102      	bne.n	8017b36 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8017b30:	2302      	movs	r3, #2
 8017b32:	607b      	str	r3, [r7, #4]
 8017b34:	e001      	b.n	8017b3a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8017b36:	2300      	movs	r3, #0
 8017b38:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8017b3a:	687b      	ldr	r3, [r7, #4]
	}
 8017b3c:	4618      	mov	r0, r3
 8017b3e:	370c      	adds	r7, #12
 8017b40:	46bd      	mov	sp, r7
 8017b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b46:	4770      	bx	lr
 8017b48:	20002424 	.word	0x20002424
 8017b4c:	20002440 	.word	0x20002440

08017b50 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8017b50:	b580      	push	{r7, lr}
 8017b52:	b086      	sub	sp, #24
 8017b54:	af00      	add	r7, sp, #0
 8017b56:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8017b58:	687b      	ldr	r3, [r7, #4]
 8017b5a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8017b5c:	2300      	movs	r3, #0
 8017b5e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8017b60:	687b      	ldr	r3, [r7, #4]
 8017b62:	2b00      	cmp	r3, #0
 8017b64:	d05f      	beq.n	8017c26 <xTaskPriorityDisinherit+0xd6>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8017b66:	4b32      	ldr	r3, [pc, #200]	; (8017c30 <xTaskPriorityDisinherit+0xe0>)
 8017b68:	681b      	ldr	r3, [r3, #0]
 8017b6a:	693a      	ldr	r2, [r7, #16]
 8017b6c:	429a      	cmp	r2, r3
 8017b6e:	d00a      	beq.n	8017b86 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8017b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b74:	f383 8811 	msr	BASEPRI, r3
 8017b78:	f3bf 8f6f 	isb	sy
 8017b7c:	f3bf 8f4f 	dsb	sy
 8017b80:	60fb      	str	r3, [r7, #12]
}
 8017b82:	bf00      	nop
 8017b84:	e7fe      	b.n	8017b84 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8017b86:	693b      	ldr	r3, [r7, #16]
 8017b88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017b8a:	2b00      	cmp	r3, #0
 8017b8c:	d10a      	bne.n	8017ba4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8017b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b92:	f383 8811 	msr	BASEPRI, r3
 8017b96:	f3bf 8f6f 	isb	sy
 8017b9a:	f3bf 8f4f 	dsb	sy
 8017b9e:	60bb      	str	r3, [r7, #8]
}
 8017ba0:	bf00      	nop
 8017ba2:	e7fe      	b.n	8017ba2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8017ba4:	693b      	ldr	r3, [r7, #16]
 8017ba6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017ba8:	1e5a      	subs	r2, r3, #1
 8017baa:	693b      	ldr	r3, [r7, #16]
 8017bac:	661a      	str	r2, [r3, #96]	; 0x60

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8017bae:	693b      	ldr	r3, [r7, #16]
 8017bb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017bb2:	693b      	ldr	r3, [r7, #16]
 8017bb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017bb6:	429a      	cmp	r2, r3
 8017bb8:	d035      	beq.n	8017c26 <xTaskPriorityDisinherit+0xd6>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8017bba:	693b      	ldr	r3, [r7, #16]
 8017bbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017bbe:	2b00      	cmp	r3, #0
 8017bc0:	d131      	bne.n	8017c26 <xTaskPriorityDisinherit+0xd6>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017bc2:	693b      	ldr	r3, [r7, #16]
 8017bc4:	3304      	adds	r3, #4
 8017bc6:	4618      	mov	r0, r3
 8017bc8:	f7fe f9b6 	bl	8015f38 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8017bcc:	687b      	ldr	r3, [r7, #4]
 8017bce:	4619      	mov	r1, r3
 8017bd0:	204a      	movs	r0, #74	; 0x4a
 8017bd2:	f001 fc53 	bl	801947c <SEGGER_SYSVIEW_RecordU32>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8017bd6:	693b      	ldr	r3, [r7, #16]
 8017bd8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8017bda:	693b      	ldr	r3, [r7, #16]
 8017bdc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017bde:	693b      	ldr	r3, [r7, #16]
 8017be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017be2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8017be6:	693b      	ldr	r3, [r7, #16]
 8017be8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8017bea:	693b      	ldr	r3, [r7, #16]
 8017bec:	4618      	mov	r0, r3
 8017bee:	f002 f94b 	bl	8019e88 <SEGGER_SYSVIEW_OnTaskStartReady>
 8017bf2:	693b      	ldr	r3, [r7, #16]
 8017bf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017bf6:	4b0f      	ldr	r3, [pc, #60]	; (8017c34 <xTaskPriorityDisinherit+0xe4>)
 8017bf8:	681b      	ldr	r3, [r3, #0]
 8017bfa:	429a      	cmp	r2, r3
 8017bfc:	d903      	bls.n	8017c06 <xTaskPriorityDisinherit+0xb6>
 8017bfe:	693b      	ldr	r3, [r7, #16]
 8017c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017c02:	4a0c      	ldr	r2, [pc, #48]	; (8017c34 <xTaskPriorityDisinherit+0xe4>)
 8017c04:	6013      	str	r3, [r2, #0]
 8017c06:	693b      	ldr	r3, [r7, #16]
 8017c08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017c0a:	4613      	mov	r3, r2
 8017c0c:	009b      	lsls	r3, r3, #2
 8017c0e:	4413      	add	r3, r2
 8017c10:	009b      	lsls	r3, r3, #2
 8017c12:	4a09      	ldr	r2, [pc, #36]	; (8017c38 <xTaskPriorityDisinherit+0xe8>)
 8017c14:	441a      	add	r2, r3
 8017c16:	693b      	ldr	r3, [r7, #16]
 8017c18:	3304      	adds	r3, #4
 8017c1a:	4619      	mov	r1, r3
 8017c1c:	4610      	mov	r0, r2
 8017c1e:	f7fe f92e 	bl	8015e7e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8017c22:	2301      	movs	r3, #1
 8017c24:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8017c26:	697b      	ldr	r3, [r7, #20]
	}
 8017c28:	4618      	mov	r0, r3
 8017c2a:	3718      	adds	r7, #24
 8017c2c:	46bd      	mov	sp, r7
 8017c2e:	bd80      	pop	{r7, pc}
 8017c30:	20001f44 	.word	0x20001f44
 8017c34:	20002420 	.word	0x20002420
 8017c38:	20001f48 	.word	0x20001f48

08017c3c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8017c3c:	b580      	push	{r7, lr}
 8017c3e:	b084      	sub	sp, #16
 8017c40:	af00      	add	r7, sp, #0
 8017c42:	6078      	str	r0, [r7, #4]
 8017c44:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8017c46:	4b21      	ldr	r3, [pc, #132]	; (8017ccc <prvAddCurrentTaskToDelayedList+0x90>)
 8017c48:	681b      	ldr	r3, [r3, #0]
 8017c4a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017c4c:	4b20      	ldr	r3, [pc, #128]	; (8017cd0 <prvAddCurrentTaskToDelayedList+0x94>)
 8017c4e:	681b      	ldr	r3, [r3, #0]
 8017c50:	3304      	adds	r3, #4
 8017c52:	4618      	mov	r0, r3
 8017c54:	f7fe f970 	bl	8015f38 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8017c58:	687b      	ldr	r3, [r7, #4]
 8017c5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017c5e:	d10a      	bne.n	8017c76 <prvAddCurrentTaskToDelayedList+0x3a>
 8017c60:	683b      	ldr	r3, [r7, #0]
 8017c62:	2b00      	cmp	r3, #0
 8017c64:	d007      	beq.n	8017c76 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8017c66:	4b1a      	ldr	r3, [pc, #104]	; (8017cd0 <prvAddCurrentTaskToDelayedList+0x94>)
 8017c68:	681b      	ldr	r3, [r3, #0]
 8017c6a:	3304      	adds	r3, #4
 8017c6c:	4619      	mov	r1, r3
 8017c6e:	4819      	ldr	r0, [pc, #100]	; (8017cd4 <prvAddCurrentTaskToDelayedList+0x98>)
 8017c70:	f7fe f905 	bl	8015e7e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8017c74:	e026      	b.n	8017cc4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8017c76:	68fa      	ldr	r2, [r7, #12]
 8017c78:	687b      	ldr	r3, [r7, #4]
 8017c7a:	4413      	add	r3, r2
 8017c7c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8017c7e:	4b14      	ldr	r3, [pc, #80]	; (8017cd0 <prvAddCurrentTaskToDelayedList+0x94>)
 8017c80:	681b      	ldr	r3, [r3, #0]
 8017c82:	68ba      	ldr	r2, [r7, #8]
 8017c84:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8017c86:	68ba      	ldr	r2, [r7, #8]
 8017c88:	68fb      	ldr	r3, [r7, #12]
 8017c8a:	429a      	cmp	r2, r3
 8017c8c:	d209      	bcs.n	8017ca2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8017c8e:	4b12      	ldr	r3, [pc, #72]	; (8017cd8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8017c90:	681a      	ldr	r2, [r3, #0]
 8017c92:	4b0f      	ldr	r3, [pc, #60]	; (8017cd0 <prvAddCurrentTaskToDelayedList+0x94>)
 8017c94:	681b      	ldr	r3, [r3, #0]
 8017c96:	3304      	adds	r3, #4
 8017c98:	4619      	mov	r1, r3
 8017c9a:	4610      	mov	r0, r2
 8017c9c:	f7fe f913 	bl	8015ec6 <vListInsert>
}
 8017ca0:	e010      	b.n	8017cc4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8017ca2:	4b0e      	ldr	r3, [pc, #56]	; (8017cdc <prvAddCurrentTaskToDelayedList+0xa0>)
 8017ca4:	681a      	ldr	r2, [r3, #0]
 8017ca6:	4b0a      	ldr	r3, [pc, #40]	; (8017cd0 <prvAddCurrentTaskToDelayedList+0x94>)
 8017ca8:	681b      	ldr	r3, [r3, #0]
 8017caa:	3304      	adds	r3, #4
 8017cac:	4619      	mov	r1, r3
 8017cae:	4610      	mov	r0, r2
 8017cb0:	f7fe f909 	bl	8015ec6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8017cb4:	4b0a      	ldr	r3, [pc, #40]	; (8017ce0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8017cb6:	681b      	ldr	r3, [r3, #0]
 8017cb8:	68ba      	ldr	r2, [r7, #8]
 8017cba:	429a      	cmp	r2, r3
 8017cbc:	d202      	bcs.n	8017cc4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8017cbe:	4a08      	ldr	r2, [pc, #32]	; (8017ce0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8017cc0:	68bb      	ldr	r3, [r7, #8]
 8017cc2:	6013      	str	r3, [r2, #0]
}
 8017cc4:	bf00      	nop
 8017cc6:	3710      	adds	r7, #16
 8017cc8:	46bd      	mov	sp, r7
 8017cca:	bd80      	pop	{r7, pc}
 8017ccc:	2000241c 	.word	0x2000241c
 8017cd0:	20001f44 	.word	0x20001f44
 8017cd4:	20002404 	.word	0x20002404
 8017cd8:	200023d4 	.word	0x200023d4
 8017cdc:	200023d0 	.word	0x200023d0
 8017ce0:	20002438 	.word	0x20002438

08017ce4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8017ce4:	b580      	push	{r7, lr}
 8017ce6:	b08a      	sub	sp, #40	; 0x28
 8017ce8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8017cea:	2300      	movs	r3, #0
 8017cec:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8017cee:	f000 fb07 	bl	8018300 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8017cf2:	4b1c      	ldr	r3, [pc, #112]	; (8017d64 <xTimerCreateTimerTask+0x80>)
 8017cf4:	681b      	ldr	r3, [r3, #0]
 8017cf6:	2b00      	cmp	r3, #0
 8017cf8:	d021      	beq.n	8017d3e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8017cfa:	2300      	movs	r3, #0
 8017cfc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8017cfe:	2300      	movs	r3, #0
 8017d00:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8017d02:	1d3a      	adds	r2, r7, #4
 8017d04:	f107 0108 	add.w	r1, r7, #8
 8017d08:	f107 030c 	add.w	r3, r7, #12
 8017d0c:	4618      	mov	r0, r3
 8017d0e:	f7fe f86f 	bl	8015df0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8017d12:	6879      	ldr	r1, [r7, #4]
 8017d14:	68bb      	ldr	r3, [r7, #8]
 8017d16:	68fa      	ldr	r2, [r7, #12]
 8017d18:	9202      	str	r2, [sp, #8]
 8017d1a:	9301      	str	r3, [sp, #4]
 8017d1c:	2302      	movs	r3, #2
 8017d1e:	9300      	str	r3, [sp, #0]
 8017d20:	2300      	movs	r3, #0
 8017d22:	460a      	mov	r2, r1
 8017d24:	4910      	ldr	r1, [pc, #64]	; (8017d68 <xTimerCreateTimerTask+0x84>)
 8017d26:	4811      	ldr	r0, [pc, #68]	; (8017d6c <xTimerCreateTimerTask+0x88>)
 8017d28:	f7fe ffc4 	bl	8016cb4 <xTaskCreateStatic>
 8017d2c:	4603      	mov	r3, r0
 8017d2e:	4a10      	ldr	r2, [pc, #64]	; (8017d70 <xTimerCreateTimerTask+0x8c>)
 8017d30:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8017d32:	4b0f      	ldr	r3, [pc, #60]	; (8017d70 <xTimerCreateTimerTask+0x8c>)
 8017d34:	681b      	ldr	r3, [r3, #0]
 8017d36:	2b00      	cmp	r3, #0
 8017d38:	d001      	beq.n	8017d3e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8017d3a:	2301      	movs	r3, #1
 8017d3c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8017d3e:	697b      	ldr	r3, [r7, #20]
 8017d40:	2b00      	cmp	r3, #0
 8017d42:	d10a      	bne.n	8017d5a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8017d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d48:	f383 8811 	msr	BASEPRI, r3
 8017d4c:	f3bf 8f6f 	isb	sy
 8017d50:	f3bf 8f4f 	dsb	sy
 8017d54:	613b      	str	r3, [r7, #16]
}
 8017d56:	bf00      	nop
 8017d58:	e7fe      	b.n	8017d58 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8017d5a:	697b      	ldr	r3, [r7, #20]
}
 8017d5c:	4618      	mov	r0, r3
 8017d5e:	3718      	adds	r7, #24
 8017d60:	46bd      	mov	sp, r7
 8017d62:	bd80      	pop	{r7, pc}
 8017d64:	20002474 	.word	0x20002474
 8017d68:	0801af7c 	.word	0x0801af7c
 8017d6c:	08017ea9 	.word	0x08017ea9
 8017d70:	20002478 	.word	0x20002478

08017d74 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8017d74:	b580      	push	{r7, lr}
 8017d76:	b08a      	sub	sp, #40	; 0x28
 8017d78:	af00      	add	r7, sp, #0
 8017d7a:	60f8      	str	r0, [r7, #12]
 8017d7c:	60b9      	str	r1, [r7, #8]
 8017d7e:	607a      	str	r2, [r7, #4]
 8017d80:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8017d82:	2300      	movs	r3, #0
 8017d84:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8017d86:	68fb      	ldr	r3, [r7, #12]
 8017d88:	2b00      	cmp	r3, #0
 8017d8a:	d10a      	bne.n	8017da2 <xTimerGenericCommand+0x2e>
	__asm volatile
 8017d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d90:	f383 8811 	msr	BASEPRI, r3
 8017d94:	f3bf 8f6f 	isb	sy
 8017d98:	f3bf 8f4f 	dsb	sy
 8017d9c:	623b      	str	r3, [r7, #32]
}
 8017d9e:	bf00      	nop
 8017da0:	e7fe      	b.n	8017da0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8017da2:	4b1a      	ldr	r3, [pc, #104]	; (8017e0c <xTimerGenericCommand+0x98>)
 8017da4:	681b      	ldr	r3, [r3, #0]
 8017da6:	2b00      	cmp	r3, #0
 8017da8:	d02a      	beq.n	8017e00 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8017daa:	68bb      	ldr	r3, [r7, #8]
 8017dac:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8017dae:	687b      	ldr	r3, [r7, #4]
 8017db0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8017db2:	68fb      	ldr	r3, [r7, #12]
 8017db4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8017db6:	68bb      	ldr	r3, [r7, #8]
 8017db8:	2b05      	cmp	r3, #5
 8017dba:	dc18      	bgt.n	8017dee <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8017dbc:	f7ff feaa 	bl	8017b14 <xTaskGetSchedulerState>
 8017dc0:	4603      	mov	r3, r0
 8017dc2:	2b02      	cmp	r3, #2
 8017dc4:	d109      	bne.n	8017dda <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8017dc6:	4b11      	ldr	r3, [pc, #68]	; (8017e0c <xTimerGenericCommand+0x98>)
 8017dc8:	6818      	ldr	r0, [r3, #0]
 8017dca:	f107 0110 	add.w	r1, r7, #16
 8017dce:	2300      	movs	r3, #0
 8017dd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017dd2:	f7fe fa1f 	bl	8016214 <xQueueGenericSend>
 8017dd6:	6278      	str	r0, [r7, #36]	; 0x24
 8017dd8:	e012      	b.n	8017e00 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8017dda:	4b0c      	ldr	r3, [pc, #48]	; (8017e0c <xTimerGenericCommand+0x98>)
 8017ddc:	6818      	ldr	r0, [r3, #0]
 8017dde:	f107 0110 	add.w	r1, r7, #16
 8017de2:	2300      	movs	r3, #0
 8017de4:	2200      	movs	r2, #0
 8017de6:	f7fe fa15 	bl	8016214 <xQueueGenericSend>
 8017dea:	6278      	str	r0, [r7, #36]	; 0x24
 8017dec:	e008      	b.n	8017e00 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8017dee:	4b07      	ldr	r3, [pc, #28]	; (8017e0c <xTimerGenericCommand+0x98>)
 8017df0:	6818      	ldr	r0, [r3, #0]
 8017df2:	f107 0110 	add.w	r1, r7, #16
 8017df6:	2300      	movs	r3, #0
 8017df8:	683a      	ldr	r2, [r7, #0]
 8017dfa:	f7fe fb31 	bl	8016460 <xQueueGenericSendFromISR>
 8017dfe:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8017e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8017e02:	4618      	mov	r0, r3
 8017e04:	3728      	adds	r7, #40	; 0x28
 8017e06:	46bd      	mov	sp, r7
 8017e08:	bd80      	pop	{r7, pc}
 8017e0a:	bf00      	nop
 8017e0c:	20002474 	.word	0x20002474

08017e10 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8017e10:	b580      	push	{r7, lr}
 8017e12:	b088      	sub	sp, #32
 8017e14:	af02      	add	r7, sp, #8
 8017e16:	6078      	str	r0, [r7, #4]
 8017e18:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017e1a:	4b22      	ldr	r3, [pc, #136]	; (8017ea4 <prvProcessExpiredTimer+0x94>)
 8017e1c:	681b      	ldr	r3, [r3, #0]
 8017e1e:	68db      	ldr	r3, [r3, #12]
 8017e20:	68db      	ldr	r3, [r3, #12]
 8017e22:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8017e24:	697b      	ldr	r3, [r7, #20]
 8017e26:	3304      	adds	r3, #4
 8017e28:	4618      	mov	r0, r3
 8017e2a:	f7fe f885 	bl	8015f38 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8017e2e:	697b      	ldr	r3, [r7, #20]
 8017e30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017e34:	f003 0304 	and.w	r3, r3, #4
 8017e38:	2b00      	cmp	r3, #0
 8017e3a:	d022      	beq.n	8017e82 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8017e3c:	697b      	ldr	r3, [r7, #20]
 8017e3e:	699a      	ldr	r2, [r3, #24]
 8017e40:	687b      	ldr	r3, [r7, #4]
 8017e42:	18d1      	adds	r1, r2, r3
 8017e44:	687b      	ldr	r3, [r7, #4]
 8017e46:	683a      	ldr	r2, [r7, #0]
 8017e48:	6978      	ldr	r0, [r7, #20]
 8017e4a:	f000 f8d1 	bl	8017ff0 <prvInsertTimerInActiveList>
 8017e4e:	4603      	mov	r3, r0
 8017e50:	2b00      	cmp	r3, #0
 8017e52:	d01f      	beq.n	8017e94 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8017e54:	2300      	movs	r3, #0
 8017e56:	9300      	str	r3, [sp, #0]
 8017e58:	2300      	movs	r3, #0
 8017e5a:	687a      	ldr	r2, [r7, #4]
 8017e5c:	2100      	movs	r1, #0
 8017e5e:	6978      	ldr	r0, [r7, #20]
 8017e60:	f7ff ff88 	bl	8017d74 <xTimerGenericCommand>
 8017e64:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8017e66:	693b      	ldr	r3, [r7, #16]
 8017e68:	2b00      	cmp	r3, #0
 8017e6a:	d113      	bne.n	8017e94 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8017e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e70:	f383 8811 	msr	BASEPRI, r3
 8017e74:	f3bf 8f6f 	isb	sy
 8017e78:	f3bf 8f4f 	dsb	sy
 8017e7c:	60fb      	str	r3, [r7, #12]
}
 8017e7e:	bf00      	nop
 8017e80:	e7fe      	b.n	8017e80 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8017e82:	697b      	ldr	r3, [r7, #20]
 8017e84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017e88:	f023 0301 	bic.w	r3, r3, #1
 8017e8c:	b2da      	uxtb	r2, r3
 8017e8e:	697b      	ldr	r3, [r7, #20]
 8017e90:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8017e94:	697b      	ldr	r3, [r7, #20]
 8017e96:	6a1b      	ldr	r3, [r3, #32]
 8017e98:	6978      	ldr	r0, [r7, #20]
 8017e9a:	4798      	blx	r3
}
 8017e9c:	bf00      	nop
 8017e9e:	3718      	adds	r7, #24
 8017ea0:	46bd      	mov	sp, r7
 8017ea2:	bd80      	pop	{r7, pc}
 8017ea4:	2000246c 	.word	0x2000246c

08017ea8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8017ea8:	b580      	push	{r7, lr}
 8017eaa:	b084      	sub	sp, #16
 8017eac:	af00      	add	r7, sp, #0
 8017eae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8017eb0:	f107 0308 	add.w	r3, r7, #8
 8017eb4:	4618      	mov	r0, r3
 8017eb6:	f000 f857 	bl	8017f68 <prvGetNextExpireTime>
 8017eba:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8017ebc:	68bb      	ldr	r3, [r7, #8]
 8017ebe:	4619      	mov	r1, r3
 8017ec0:	68f8      	ldr	r0, [r7, #12]
 8017ec2:	f000 f803 	bl	8017ecc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8017ec6:	f000 f8d5 	bl	8018074 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8017eca:	e7f1      	b.n	8017eb0 <prvTimerTask+0x8>

08017ecc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8017ecc:	b580      	push	{r7, lr}
 8017ece:	b084      	sub	sp, #16
 8017ed0:	af00      	add	r7, sp, #0
 8017ed2:	6078      	str	r0, [r7, #4]
 8017ed4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8017ed6:	f7ff f9c5 	bl	8017264 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8017eda:	f107 0308 	add.w	r3, r7, #8
 8017ede:	4618      	mov	r0, r3
 8017ee0:	f000 f866 	bl	8017fb0 <prvSampleTimeNow>
 8017ee4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8017ee6:	68bb      	ldr	r3, [r7, #8]
 8017ee8:	2b00      	cmp	r3, #0
 8017eea:	d130      	bne.n	8017f4e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8017eec:	683b      	ldr	r3, [r7, #0]
 8017eee:	2b00      	cmp	r3, #0
 8017ef0:	d10a      	bne.n	8017f08 <prvProcessTimerOrBlockTask+0x3c>
 8017ef2:	687a      	ldr	r2, [r7, #4]
 8017ef4:	68fb      	ldr	r3, [r7, #12]
 8017ef6:	429a      	cmp	r2, r3
 8017ef8:	d806      	bhi.n	8017f08 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8017efa:	f7ff f9c1 	bl	8017280 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8017efe:	68f9      	ldr	r1, [r7, #12]
 8017f00:	6878      	ldr	r0, [r7, #4]
 8017f02:	f7ff ff85 	bl	8017e10 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8017f06:	e024      	b.n	8017f52 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8017f08:	683b      	ldr	r3, [r7, #0]
 8017f0a:	2b00      	cmp	r3, #0
 8017f0c:	d008      	beq.n	8017f20 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8017f0e:	4b13      	ldr	r3, [pc, #76]	; (8017f5c <prvProcessTimerOrBlockTask+0x90>)
 8017f10:	681b      	ldr	r3, [r3, #0]
 8017f12:	681b      	ldr	r3, [r3, #0]
 8017f14:	2b00      	cmp	r3, #0
 8017f16:	d101      	bne.n	8017f1c <prvProcessTimerOrBlockTask+0x50>
 8017f18:	2301      	movs	r3, #1
 8017f1a:	e000      	b.n	8017f1e <prvProcessTimerOrBlockTask+0x52>
 8017f1c:	2300      	movs	r3, #0
 8017f1e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8017f20:	4b0f      	ldr	r3, [pc, #60]	; (8017f60 <prvProcessTimerOrBlockTask+0x94>)
 8017f22:	6818      	ldr	r0, [r3, #0]
 8017f24:	687a      	ldr	r2, [r7, #4]
 8017f26:	68fb      	ldr	r3, [r7, #12]
 8017f28:	1ad3      	subs	r3, r2, r3
 8017f2a:	683a      	ldr	r2, [r7, #0]
 8017f2c:	4619      	mov	r1, r3
 8017f2e:	f7fe fe8d 	bl	8016c4c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8017f32:	f7ff f9a5 	bl	8017280 <xTaskResumeAll>
 8017f36:	4603      	mov	r3, r0
 8017f38:	2b00      	cmp	r3, #0
 8017f3a:	d10a      	bne.n	8017f52 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8017f3c:	4b09      	ldr	r3, [pc, #36]	; (8017f64 <prvProcessTimerOrBlockTask+0x98>)
 8017f3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017f42:	601a      	str	r2, [r3, #0]
 8017f44:	f3bf 8f4f 	dsb	sy
 8017f48:	f3bf 8f6f 	isb	sy
}
 8017f4c:	e001      	b.n	8017f52 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8017f4e:	f7ff f997 	bl	8017280 <xTaskResumeAll>
}
 8017f52:	bf00      	nop
 8017f54:	3710      	adds	r7, #16
 8017f56:	46bd      	mov	sp, r7
 8017f58:	bd80      	pop	{r7, pc}
 8017f5a:	bf00      	nop
 8017f5c:	20002470 	.word	0x20002470
 8017f60:	20002474 	.word	0x20002474
 8017f64:	e000ed04 	.word	0xe000ed04

08017f68 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8017f68:	b480      	push	{r7}
 8017f6a:	b085      	sub	sp, #20
 8017f6c:	af00      	add	r7, sp, #0
 8017f6e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8017f70:	4b0e      	ldr	r3, [pc, #56]	; (8017fac <prvGetNextExpireTime+0x44>)
 8017f72:	681b      	ldr	r3, [r3, #0]
 8017f74:	681b      	ldr	r3, [r3, #0]
 8017f76:	2b00      	cmp	r3, #0
 8017f78:	d101      	bne.n	8017f7e <prvGetNextExpireTime+0x16>
 8017f7a:	2201      	movs	r2, #1
 8017f7c:	e000      	b.n	8017f80 <prvGetNextExpireTime+0x18>
 8017f7e:	2200      	movs	r2, #0
 8017f80:	687b      	ldr	r3, [r7, #4]
 8017f82:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8017f84:	687b      	ldr	r3, [r7, #4]
 8017f86:	681b      	ldr	r3, [r3, #0]
 8017f88:	2b00      	cmp	r3, #0
 8017f8a:	d105      	bne.n	8017f98 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8017f8c:	4b07      	ldr	r3, [pc, #28]	; (8017fac <prvGetNextExpireTime+0x44>)
 8017f8e:	681b      	ldr	r3, [r3, #0]
 8017f90:	68db      	ldr	r3, [r3, #12]
 8017f92:	681b      	ldr	r3, [r3, #0]
 8017f94:	60fb      	str	r3, [r7, #12]
 8017f96:	e001      	b.n	8017f9c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8017f98:	2300      	movs	r3, #0
 8017f9a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8017f9c:	68fb      	ldr	r3, [r7, #12]
}
 8017f9e:	4618      	mov	r0, r3
 8017fa0:	3714      	adds	r7, #20
 8017fa2:	46bd      	mov	sp, r7
 8017fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fa8:	4770      	bx	lr
 8017faa:	bf00      	nop
 8017fac:	2000246c 	.word	0x2000246c

08017fb0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8017fb0:	b580      	push	{r7, lr}
 8017fb2:	b084      	sub	sp, #16
 8017fb4:	af00      	add	r7, sp, #0
 8017fb6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8017fb8:	f7ff fa04 	bl	80173c4 <xTaskGetTickCount>
 8017fbc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8017fbe:	4b0b      	ldr	r3, [pc, #44]	; (8017fec <prvSampleTimeNow+0x3c>)
 8017fc0:	681b      	ldr	r3, [r3, #0]
 8017fc2:	68fa      	ldr	r2, [r7, #12]
 8017fc4:	429a      	cmp	r2, r3
 8017fc6:	d205      	bcs.n	8017fd4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8017fc8:	f000 f936 	bl	8018238 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8017fcc:	687b      	ldr	r3, [r7, #4]
 8017fce:	2201      	movs	r2, #1
 8017fd0:	601a      	str	r2, [r3, #0]
 8017fd2:	e002      	b.n	8017fda <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8017fd4:	687b      	ldr	r3, [r7, #4]
 8017fd6:	2200      	movs	r2, #0
 8017fd8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8017fda:	4a04      	ldr	r2, [pc, #16]	; (8017fec <prvSampleTimeNow+0x3c>)
 8017fdc:	68fb      	ldr	r3, [r7, #12]
 8017fde:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8017fe0:	68fb      	ldr	r3, [r7, #12]
}
 8017fe2:	4618      	mov	r0, r3
 8017fe4:	3710      	adds	r7, #16
 8017fe6:	46bd      	mov	sp, r7
 8017fe8:	bd80      	pop	{r7, pc}
 8017fea:	bf00      	nop
 8017fec:	2000247c 	.word	0x2000247c

08017ff0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8017ff0:	b580      	push	{r7, lr}
 8017ff2:	b086      	sub	sp, #24
 8017ff4:	af00      	add	r7, sp, #0
 8017ff6:	60f8      	str	r0, [r7, #12]
 8017ff8:	60b9      	str	r1, [r7, #8]
 8017ffa:	607a      	str	r2, [r7, #4]
 8017ffc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8017ffe:	2300      	movs	r3, #0
 8018000:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8018002:	68fb      	ldr	r3, [r7, #12]
 8018004:	68ba      	ldr	r2, [r7, #8]
 8018006:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8018008:	68fb      	ldr	r3, [r7, #12]
 801800a:	68fa      	ldr	r2, [r7, #12]
 801800c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801800e:	68ba      	ldr	r2, [r7, #8]
 8018010:	687b      	ldr	r3, [r7, #4]
 8018012:	429a      	cmp	r2, r3
 8018014:	d812      	bhi.n	801803c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018016:	687a      	ldr	r2, [r7, #4]
 8018018:	683b      	ldr	r3, [r7, #0]
 801801a:	1ad2      	subs	r2, r2, r3
 801801c:	68fb      	ldr	r3, [r7, #12]
 801801e:	699b      	ldr	r3, [r3, #24]
 8018020:	429a      	cmp	r2, r3
 8018022:	d302      	bcc.n	801802a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8018024:	2301      	movs	r3, #1
 8018026:	617b      	str	r3, [r7, #20]
 8018028:	e01b      	b.n	8018062 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801802a:	4b10      	ldr	r3, [pc, #64]	; (801806c <prvInsertTimerInActiveList+0x7c>)
 801802c:	681a      	ldr	r2, [r3, #0]
 801802e:	68fb      	ldr	r3, [r7, #12]
 8018030:	3304      	adds	r3, #4
 8018032:	4619      	mov	r1, r3
 8018034:	4610      	mov	r0, r2
 8018036:	f7fd ff46 	bl	8015ec6 <vListInsert>
 801803a:	e012      	b.n	8018062 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801803c:	687a      	ldr	r2, [r7, #4]
 801803e:	683b      	ldr	r3, [r7, #0]
 8018040:	429a      	cmp	r2, r3
 8018042:	d206      	bcs.n	8018052 <prvInsertTimerInActiveList+0x62>
 8018044:	68ba      	ldr	r2, [r7, #8]
 8018046:	683b      	ldr	r3, [r7, #0]
 8018048:	429a      	cmp	r2, r3
 801804a:	d302      	bcc.n	8018052 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801804c:	2301      	movs	r3, #1
 801804e:	617b      	str	r3, [r7, #20]
 8018050:	e007      	b.n	8018062 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8018052:	4b07      	ldr	r3, [pc, #28]	; (8018070 <prvInsertTimerInActiveList+0x80>)
 8018054:	681a      	ldr	r2, [r3, #0]
 8018056:	68fb      	ldr	r3, [r7, #12]
 8018058:	3304      	adds	r3, #4
 801805a:	4619      	mov	r1, r3
 801805c:	4610      	mov	r0, r2
 801805e:	f7fd ff32 	bl	8015ec6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8018062:	697b      	ldr	r3, [r7, #20]
}
 8018064:	4618      	mov	r0, r3
 8018066:	3718      	adds	r7, #24
 8018068:	46bd      	mov	sp, r7
 801806a:	bd80      	pop	{r7, pc}
 801806c:	20002470 	.word	0x20002470
 8018070:	2000246c 	.word	0x2000246c

08018074 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8018074:	b580      	push	{r7, lr}
 8018076:	b08e      	sub	sp, #56	; 0x38
 8018078:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801807a:	e0ca      	b.n	8018212 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801807c:	687b      	ldr	r3, [r7, #4]
 801807e:	2b00      	cmp	r3, #0
 8018080:	da18      	bge.n	80180b4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8018082:	1d3b      	adds	r3, r7, #4
 8018084:	3304      	adds	r3, #4
 8018086:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8018088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801808a:	2b00      	cmp	r3, #0
 801808c:	d10a      	bne.n	80180a4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 801808e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018092:	f383 8811 	msr	BASEPRI, r3
 8018096:	f3bf 8f6f 	isb	sy
 801809a:	f3bf 8f4f 	dsb	sy
 801809e:	61fb      	str	r3, [r7, #28]
}
 80180a0:	bf00      	nop
 80180a2:	e7fe      	b.n	80180a2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80180a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80180a6:	681b      	ldr	r3, [r3, #0]
 80180a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80180aa:	6850      	ldr	r0, [r2, #4]
 80180ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80180ae:	6892      	ldr	r2, [r2, #8]
 80180b0:	4611      	mov	r1, r2
 80180b2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80180b4:	687b      	ldr	r3, [r7, #4]
 80180b6:	2b00      	cmp	r3, #0
 80180b8:	f2c0 80aa 	blt.w	8018210 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80180bc:	68fb      	ldr	r3, [r7, #12]
 80180be:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80180c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180c2:	695b      	ldr	r3, [r3, #20]
 80180c4:	2b00      	cmp	r3, #0
 80180c6:	d004      	beq.n	80180d2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80180c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180ca:	3304      	adds	r3, #4
 80180cc:	4618      	mov	r0, r3
 80180ce:	f7fd ff33 	bl	8015f38 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80180d2:	463b      	mov	r3, r7
 80180d4:	4618      	mov	r0, r3
 80180d6:	f7ff ff6b 	bl	8017fb0 <prvSampleTimeNow>
 80180da:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80180dc:	687b      	ldr	r3, [r7, #4]
 80180de:	2b09      	cmp	r3, #9
 80180e0:	f200 8097 	bhi.w	8018212 <prvProcessReceivedCommands+0x19e>
 80180e4:	a201      	add	r2, pc, #4	; (adr r2, 80180ec <prvProcessReceivedCommands+0x78>)
 80180e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80180ea:	bf00      	nop
 80180ec:	08018115 	.word	0x08018115
 80180f0:	08018115 	.word	0x08018115
 80180f4:	08018115 	.word	0x08018115
 80180f8:	08018189 	.word	0x08018189
 80180fc:	0801819d 	.word	0x0801819d
 8018100:	080181e7 	.word	0x080181e7
 8018104:	08018115 	.word	0x08018115
 8018108:	08018115 	.word	0x08018115
 801810c:	08018189 	.word	0x08018189
 8018110:	0801819d 	.word	0x0801819d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8018114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018116:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801811a:	f043 0301 	orr.w	r3, r3, #1
 801811e:	b2da      	uxtb	r2, r3
 8018120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018122:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8018126:	68ba      	ldr	r2, [r7, #8]
 8018128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801812a:	699b      	ldr	r3, [r3, #24]
 801812c:	18d1      	adds	r1, r2, r3
 801812e:	68bb      	ldr	r3, [r7, #8]
 8018130:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018132:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018134:	f7ff ff5c 	bl	8017ff0 <prvInsertTimerInActiveList>
 8018138:	4603      	mov	r3, r0
 801813a:	2b00      	cmp	r3, #0
 801813c:	d069      	beq.n	8018212 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801813e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018140:	6a1b      	ldr	r3, [r3, #32]
 8018142:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018144:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8018146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018148:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801814c:	f003 0304 	and.w	r3, r3, #4
 8018150:	2b00      	cmp	r3, #0
 8018152:	d05e      	beq.n	8018212 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8018154:	68ba      	ldr	r2, [r7, #8]
 8018156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018158:	699b      	ldr	r3, [r3, #24]
 801815a:	441a      	add	r2, r3
 801815c:	2300      	movs	r3, #0
 801815e:	9300      	str	r3, [sp, #0]
 8018160:	2300      	movs	r3, #0
 8018162:	2100      	movs	r1, #0
 8018164:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018166:	f7ff fe05 	bl	8017d74 <xTimerGenericCommand>
 801816a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 801816c:	6a3b      	ldr	r3, [r7, #32]
 801816e:	2b00      	cmp	r3, #0
 8018170:	d14f      	bne.n	8018212 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8018172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018176:	f383 8811 	msr	BASEPRI, r3
 801817a:	f3bf 8f6f 	isb	sy
 801817e:	f3bf 8f4f 	dsb	sy
 8018182:	61bb      	str	r3, [r7, #24]
}
 8018184:	bf00      	nop
 8018186:	e7fe      	b.n	8018186 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8018188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801818a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801818e:	f023 0301 	bic.w	r3, r3, #1
 8018192:	b2da      	uxtb	r2, r3
 8018194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018196:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 801819a:	e03a      	b.n	8018212 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801819c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801819e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80181a2:	f043 0301 	orr.w	r3, r3, #1
 80181a6:	b2da      	uxtb	r2, r3
 80181a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80181aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80181ae:	68ba      	ldr	r2, [r7, #8]
 80181b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80181b2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80181b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80181b6:	699b      	ldr	r3, [r3, #24]
 80181b8:	2b00      	cmp	r3, #0
 80181ba:	d10a      	bne.n	80181d2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80181bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80181c0:	f383 8811 	msr	BASEPRI, r3
 80181c4:	f3bf 8f6f 	isb	sy
 80181c8:	f3bf 8f4f 	dsb	sy
 80181cc:	617b      	str	r3, [r7, #20]
}
 80181ce:	bf00      	nop
 80181d0:	e7fe      	b.n	80181d0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80181d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80181d4:	699a      	ldr	r2, [r3, #24]
 80181d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181d8:	18d1      	adds	r1, r2, r3
 80181da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80181de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80181e0:	f7ff ff06 	bl	8017ff0 <prvInsertTimerInActiveList>
					break;
 80181e4:	e015      	b.n	8018212 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80181e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80181e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80181ec:	f003 0302 	and.w	r3, r3, #2
 80181f0:	2b00      	cmp	r3, #0
 80181f2:	d103      	bne.n	80181fc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80181f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80181f6:	f000 fbdb 	bl	80189b0 <vPortFree>
 80181fa:	e00a      	b.n	8018212 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80181fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80181fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018202:	f023 0301 	bic.w	r3, r3, #1
 8018206:	b2da      	uxtb	r2, r3
 8018208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801820a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801820e:	e000      	b.n	8018212 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8018210:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8018212:	4b08      	ldr	r3, [pc, #32]	; (8018234 <prvProcessReceivedCommands+0x1c0>)
 8018214:	681b      	ldr	r3, [r3, #0]
 8018216:	1d39      	adds	r1, r7, #4
 8018218:	2200      	movs	r2, #0
 801821a:	4618      	mov	r0, r3
 801821c:	f7fe f9d0 	bl	80165c0 <xQueueReceive>
 8018220:	4603      	mov	r3, r0
 8018222:	2b00      	cmp	r3, #0
 8018224:	f47f af2a 	bne.w	801807c <prvProcessReceivedCommands+0x8>
	}
}
 8018228:	bf00      	nop
 801822a:	bf00      	nop
 801822c:	3730      	adds	r7, #48	; 0x30
 801822e:	46bd      	mov	sp, r7
 8018230:	bd80      	pop	{r7, pc}
 8018232:	bf00      	nop
 8018234:	20002474 	.word	0x20002474

08018238 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8018238:	b580      	push	{r7, lr}
 801823a:	b088      	sub	sp, #32
 801823c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801823e:	e048      	b.n	80182d2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8018240:	4b2d      	ldr	r3, [pc, #180]	; (80182f8 <prvSwitchTimerLists+0xc0>)
 8018242:	681b      	ldr	r3, [r3, #0]
 8018244:	68db      	ldr	r3, [r3, #12]
 8018246:	681b      	ldr	r3, [r3, #0]
 8018248:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801824a:	4b2b      	ldr	r3, [pc, #172]	; (80182f8 <prvSwitchTimerLists+0xc0>)
 801824c:	681b      	ldr	r3, [r3, #0]
 801824e:	68db      	ldr	r3, [r3, #12]
 8018250:	68db      	ldr	r3, [r3, #12]
 8018252:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8018254:	68fb      	ldr	r3, [r7, #12]
 8018256:	3304      	adds	r3, #4
 8018258:	4618      	mov	r0, r3
 801825a:	f7fd fe6d 	bl	8015f38 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801825e:	68fb      	ldr	r3, [r7, #12]
 8018260:	6a1b      	ldr	r3, [r3, #32]
 8018262:	68f8      	ldr	r0, [r7, #12]
 8018264:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8018266:	68fb      	ldr	r3, [r7, #12]
 8018268:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801826c:	f003 0304 	and.w	r3, r3, #4
 8018270:	2b00      	cmp	r3, #0
 8018272:	d02e      	beq.n	80182d2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8018274:	68fb      	ldr	r3, [r7, #12]
 8018276:	699b      	ldr	r3, [r3, #24]
 8018278:	693a      	ldr	r2, [r7, #16]
 801827a:	4413      	add	r3, r2
 801827c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801827e:	68ba      	ldr	r2, [r7, #8]
 8018280:	693b      	ldr	r3, [r7, #16]
 8018282:	429a      	cmp	r2, r3
 8018284:	d90e      	bls.n	80182a4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8018286:	68fb      	ldr	r3, [r7, #12]
 8018288:	68ba      	ldr	r2, [r7, #8]
 801828a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801828c:	68fb      	ldr	r3, [r7, #12]
 801828e:	68fa      	ldr	r2, [r7, #12]
 8018290:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8018292:	4b19      	ldr	r3, [pc, #100]	; (80182f8 <prvSwitchTimerLists+0xc0>)
 8018294:	681a      	ldr	r2, [r3, #0]
 8018296:	68fb      	ldr	r3, [r7, #12]
 8018298:	3304      	adds	r3, #4
 801829a:	4619      	mov	r1, r3
 801829c:	4610      	mov	r0, r2
 801829e:	f7fd fe12 	bl	8015ec6 <vListInsert>
 80182a2:	e016      	b.n	80182d2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80182a4:	2300      	movs	r3, #0
 80182a6:	9300      	str	r3, [sp, #0]
 80182a8:	2300      	movs	r3, #0
 80182aa:	693a      	ldr	r2, [r7, #16]
 80182ac:	2100      	movs	r1, #0
 80182ae:	68f8      	ldr	r0, [r7, #12]
 80182b0:	f7ff fd60 	bl	8017d74 <xTimerGenericCommand>
 80182b4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80182b6:	687b      	ldr	r3, [r7, #4]
 80182b8:	2b00      	cmp	r3, #0
 80182ba:	d10a      	bne.n	80182d2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80182bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80182c0:	f383 8811 	msr	BASEPRI, r3
 80182c4:	f3bf 8f6f 	isb	sy
 80182c8:	f3bf 8f4f 	dsb	sy
 80182cc:	603b      	str	r3, [r7, #0]
}
 80182ce:	bf00      	nop
 80182d0:	e7fe      	b.n	80182d0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80182d2:	4b09      	ldr	r3, [pc, #36]	; (80182f8 <prvSwitchTimerLists+0xc0>)
 80182d4:	681b      	ldr	r3, [r3, #0]
 80182d6:	681b      	ldr	r3, [r3, #0]
 80182d8:	2b00      	cmp	r3, #0
 80182da:	d1b1      	bne.n	8018240 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80182dc:	4b06      	ldr	r3, [pc, #24]	; (80182f8 <prvSwitchTimerLists+0xc0>)
 80182de:	681b      	ldr	r3, [r3, #0]
 80182e0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80182e2:	4b06      	ldr	r3, [pc, #24]	; (80182fc <prvSwitchTimerLists+0xc4>)
 80182e4:	681b      	ldr	r3, [r3, #0]
 80182e6:	4a04      	ldr	r2, [pc, #16]	; (80182f8 <prvSwitchTimerLists+0xc0>)
 80182e8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80182ea:	4a04      	ldr	r2, [pc, #16]	; (80182fc <prvSwitchTimerLists+0xc4>)
 80182ec:	697b      	ldr	r3, [r7, #20]
 80182ee:	6013      	str	r3, [r2, #0]
}
 80182f0:	bf00      	nop
 80182f2:	3718      	adds	r7, #24
 80182f4:	46bd      	mov	sp, r7
 80182f6:	bd80      	pop	{r7, pc}
 80182f8:	2000246c 	.word	0x2000246c
 80182fc:	20002470 	.word	0x20002470

08018300 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8018300:	b580      	push	{r7, lr}
 8018302:	b082      	sub	sp, #8
 8018304:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8018306:	f000 f965 	bl	80185d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801830a:	4b15      	ldr	r3, [pc, #84]	; (8018360 <prvCheckForValidListAndQueue+0x60>)
 801830c:	681b      	ldr	r3, [r3, #0]
 801830e:	2b00      	cmp	r3, #0
 8018310:	d120      	bne.n	8018354 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8018312:	4814      	ldr	r0, [pc, #80]	; (8018364 <prvCheckForValidListAndQueue+0x64>)
 8018314:	f7fd fd86 	bl	8015e24 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8018318:	4813      	ldr	r0, [pc, #76]	; (8018368 <prvCheckForValidListAndQueue+0x68>)
 801831a:	f7fd fd83 	bl	8015e24 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801831e:	4b13      	ldr	r3, [pc, #76]	; (801836c <prvCheckForValidListAndQueue+0x6c>)
 8018320:	4a10      	ldr	r2, [pc, #64]	; (8018364 <prvCheckForValidListAndQueue+0x64>)
 8018322:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8018324:	4b12      	ldr	r3, [pc, #72]	; (8018370 <prvCheckForValidListAndQueue+0x70>)
 8018326:	4a10      	ldr	r2, [pc, #64]	; (8018368 <prvCheckForValidListAndQueue+0x68>)
 8018328:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801832a:	2300      	movs	r3, #0
 801832c:	9300      	str	r3, [sp, #0]
 801832e:	4b11      	ldr	r3, [pc, #68]	; (8018374 <prvCheckForValidListAndQueue+0x74>)
 8018330:	4a11      	ldr	r2, [pc, #68]	; (8018378 <prvCheckForValidListAndQueue+0x78>)
 8018332:	2110      	movs	r1, #16
 8018334:	200a      	movs	r0, #10
 8018336:	f7fd fe91 	bl	801605c <xQueueGenericCreateStatic>
 801833a:	4603      	mov	r3, r0
 801833c:	4a08      	ldr	r2, [pc, #32]	; (8018360 <prvCheckForValidListAndQueue+0x60>)
 801833e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8018340:	4b07      	ldr	r3, [pc, #28]	; (8018360 <prvCheckForValidListAndQueue+0x60>)
 8018342:	681b      	ldr	r3, [r3, #0]
 8018344:	2b00      	cmp	r3, #0
 8018346:	d005      	beq.n	8018354 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8018348:	4b05      	ldr	r3, [pc, #20]	; (8018360 <prvCheckForValidListAndQueue+0x60>)
 801834a:	681b      	ldr	r3, [r3, #0]
 801834c:	490b      	ldr	r1, [pc, #44]	; (801837c <prvCheckForValidListAndQueue+0x7c>)
 801834e:	4618      	mov	r0, r3
 8018350:	f7fe fc4a 	bl	8016be8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8018354:	f000 f96e 	bl	8018634 <vPortExitCritical>
}
 8018358:	bf00      	nop
 801835a:	46bd      	mov	sp, r7
 801835c:	bd80      	pop	{r7, pc}
 801835e:	bf00      	nop
 8018360:	20002474 	.word	0x20002474
 8018364:	20002444 	.word	0x20002444
 8018368:	20002458 	.word	0x20002458
 801836c:	2000246c 	.word	0x2000246c
 8018370:	20002470 	.word	0x20002470
 8018374:	20002520 	.word	0x20002520
 8018378:	20002480 	.word	0x20002480
 801837c:	0801af84 	.word	0x0801af84

08018380 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8018380:	b480      	push	{r7}
 8018382:	b085      	sub	sp, #20
 8018384:	af00      	add	r7, sp, #0
 8018386:	60f8      	str	r0, [r7, #12]
 8018388:	60b9      	str	r1, [r7, #8]
 801838a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801838c:	68fb      	ldr	r3, [r7, #12]
 801838e:	3b04      	subs	r3, #4
 8018390:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8018392:	68fb      	ldr	r3, [r7, #12]
 8018394:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8018398:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801839a:	68fb      	ldr	r3, [r7, #12]
 801839c:	3b04      	subs	r3, #4
 801839e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80183a0:	68bb      	ldr	r3, [r7, #8]
 80183a2:	f023 0201 	bic.w	r2, r3, #1
 80183a6:	68fb      	ldr	r3, [r7, #12]
 80183a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80183aa:	68fb      	ldr	r3, [r7, #12]
 80183ac:	3b04      	subs	r3, #4
 80183ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80183b0:	4a0c      	ldr	r2, [pc, #48]	; (80183e4 <pxPortInitialiseStack+0x64>)
 80183b2:	68fb      	ldr	r3, [r7, #12]
 80183b4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80183b6:	68fb      	ldr	r3, [r7, #12]
 80183b8:	3b14      	subs	r3, #20
 80183ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80183bc:	687a      	ldr	r2, [r7, #4]
 80183be:	68fb      	ldr	r3, [r7, #12]
 80183c0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80183c2:	68fb      	ldr	r3, [r7, #12]
 80183c4:	3b04      	subs	r3, #4
 80183c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80183c8:	68fb      	ldr	r3, [r7, #12]
 80183ca:	f06f 0202 	mvn.w	r2, #2
 80183ce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80183d0:	68fb      	ldr	r3, [r7, #12]
 80183d2:	3b20      	subs	r3, #32
 80183d4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80183d6:	68fb      	ldr	r3, [r7, #12]
}
 80183d8:	4618      	mov	r0, r3
 80183da:	3714      	adds	r7, #20
 80183dc:	46bd      	mov	sp, r7
 80183de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183e2:	4770      	bx	lr
 80183e4:	080183e9 	.word	0x080183e9

080183e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80183e8:	b480      	push	{r7}
 80183ea:	b085      	sub	sp, #20
 80183ec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80183ee:	2300      	movs	r3, #0
 80183f0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80183f2:	4b12      	ldr	r3, [pc, #72]	; (801843c <prvTaskExitError+0x54>)
 80183f4:	681b      	ldr	r3, [r3, #0]
 80183f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80183fa:	d00a      	beq.n	8018412 <prvTaskExitError+0x2a>
	__asm volatile
 80183fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018400:	f383 8811 	msr	BASEPRI, r3
 8018404:	f3bf 8f6f 	isb	sy
 8018408:	f3bf 8f4f 	dsb	sy
 801840c:	60fb      	str	r3, [r7, #12]
}
 801840e:	bf00      	nop
 8018410:	e7fe      	b.n	8018410 <prvTaskExitError+0x28>
	__asm volatile
 8018412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018416:	f383 8811 	msr	BASEPRI, r3
 801841a:	f3bf 8f6f 	isb	sy
 801841e:	f3bf 8f4f 	dsb	sy
 8018422:	60bb      	str	r3, [r7, #8]
}
 8018424:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8018426:	bf00      	nop
 8018428:	687b      	ldr	r3, [r7, #4]
 801842a:	2b00      	cmp	r3, #0
 801842c:	d0fc      	beq.n	8018428 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801842e:	bf00      	nop
 8018430:	bf00      	nop
 8018432:	3714      	adds	r7, #20
 8018434:	46bd      	mov	sp, r7
 8018436:	f85d 7b04 	ldr.w	r7, [sp], #4
 801843a:	4770      	bx	lr
 801843c:	200013c0 	.word	0x200013c0

08018440 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8018440:	4b07      	ldr	r3, [pc, #28]	; (8018460 <pxCurrentTCBConst2>)
 8018442:	6819      	ldr	r1, [r3, #0]
 8018444:	6808      	ldr	r0, [r1, #0]
 8018446:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801844a:	f380 8809 	msr	PSP, r0
 801844e:	f3bf 8f6f 	isb	sy
 8018452:	f04f 0000 	mov.w	r0, #0
 8018456:	f380 8811 	msr	BASEPRI, r0
 801845a:	4770      	bx	lr
 801845c:	f3af 8000 	nop.w

08018460 <pxCurrentTCBConst2>:
 8018460:	20001f44 	.word	0x20001f44
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8018464:	bf00      	nop
 8018466:	bf00      	nop

08018468 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8018468:	4808      	ldr	r0, [pc, #32]	; (801848c <prvPortStartFirstTask+0x24>)
 801846a:	6800      	ldr	r0, [r0, #0]
 801846c:	6800      	ldr	r0, [r0, #0]
 801846e:	f380 8808 	msr	MSP, r0
 8018472:	f04f 0000 	mov.w	r0, #0
 8018476:	f380 8814 	msr	CONTROL, r0
 801847a:	b662      	cpsie	i
 801847c:	b661      	cpsie	f
 801847e:	f3bf 8f4f 	dsb	sy
 8018482:	f3bf 8f6f 	isb	sy
 8018486:	df00      	svc	0
 8018488:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801848a:	bf00      	nop
 801848c:	e000ed08 	.word	0xe000ed08

08018490 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8018490:	b580      	push	{r7, lr}
 8018492:	b086      	sub	sp, #24
 8018494:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8018496:	4b46      	ldr	r3, [pc, #280]	; (80185b0 <xPortStartScheduler+0x120>)
 8018498:	681b      	ldr	r3, [r3, #0]
 801849a:	4a46      	ldr	r2, [pc, #280]	; (80185b4 <xPortStartScheduler+0x124>)
 801849c:	4293      	cmp	r3, r2
 801849e:	d10a      	bne.n	80184b6 <xPortStartScheduler+0x26>
	__asm volatile
 80184a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80184a4:	f383 8811 	msr	BASEPRI, r3
 80184a8:	f3bf 8f6f 	isb	sy
 80184ac:	f3bf 8f4f 	dsb	sy
 80184b0:	613b      	str	r3, [r7, #16]
}
 80184b2:	bf00      	nop
 80184b4:	e7fe      	b.n	80184b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80184b6:	4b3e      	ldr	r3, [pc, #248]	; (80185b0 <xPortStartScheduler+0x120>)
 80184b8:	681b      	ldr	r3, [r3, #0]
 80184ba:	4a3f      	ldr	r2, [pc, #252]	; (80185b8 <xPortStartScheduler+0x128>)
 80184bc:	4293      	cmp	r3, r2
 80184be:	d10a      	bne.n	80184d6 <xPortStartScheduler+0x46>
	__asm volatile
 80184c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80184c4:	f383 8811 	msr	BASEPRI, r3
 80184c8:	f3bf 8f6f 	isb	sy
 80184cc:	f3bf 8f4f 	dsb	sy
 80184d0:	60fb      	str	r3, [r7, #12]
}
 80184d2:	bf00      	nop
 80184d4:	e7fe      	b.n	80184d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80184d6:	4b39      	ldr	r3, [pc, #228]	; (80185bc <xPortStartScheduler+0x12c>)
 80184d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80184da:	697b      	ldr	r3, [r7, #20]
 80184dc:	781b      	ldrb	r3, [r3, #0]
 80184de:	b2db      	uxtb	r3, r3
 80184e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80184e2:	697b      	ldr	r3, [r7, #20]
 80184e4:	22ff      	movs	r2, #255	; 0xff
 80184e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80184e8:	697b      	ldr	r3, [r7, #20]
 80184ea:	781b      	ldrb	r3, [r3, #0]
 80184ec:	b2db      	uxtb	r3, r3
 80184ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80184f0:	78fb      	ldrb	r3, [r7, #3]
 80184f2:	b2db      	uxtb	r3, r3
 80184f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80184f8:	b2da      	uxtb	r2, r3
 80184fa:	4b31      	ldr	r3, [pc, #196]	; (80185c0 <xPortStartScheduler+0x130>)
 80184fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80184fe:	4b31      	ldr	r3, [pc, #196]	; (80185c4 <xPortStartScheduler+0x134>)
 8018500:	2207      	movs	r2, #7
 8018502:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8018504:	e009      	b.n	801851a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8018506:	4b2f      	ldr	r3, [pc, #188]	; (80185c4 <xPortStartScheduler+0x134>)
 8018508:	681b      	ldr	r3, [r3, #0]
 801850a:	3b01      	subs	r3, #1
 801850c:	4a2d      	ldr	r2, [pc, #180]	; (80185c4 <xPortStartScheduler+0x134>)
 801850e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8018510:	78fb      	ldrb	r3, [r7, #3]
 8018512:	b2db      	uxtb	r3, r3
 8018514:	005b      	lsls	r3, r3, #1
 8018516:	b2db      	uxtb	r3, r3
 8018518:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801851a:	78fb      	ldrb	r3, [r7, #3]
 801851c:	b2db      	uxtb	r3, r3
 801851e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018522:	2b80      	cmp	r3, #128	; 0x80
 8018524:	d0ef      	beq.n	8018506 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8018526:	4b27      	ldr	r3, [pc, #156]	; (80185c4 <xPortStartScheduler+0x134>)
 8018528:	681b      	ldr	r3, [r3, #0]
 801852a:	f1c3 0307 	rsb	r3, r3, #7
 801852e:	2b04      	cmp	r3, #4
 8018530:	d00a      	beq.n	8018548 <xPortStartScheduler+0xb8>
	__asm volatile
 8018532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018536:	f383 8811 	msr	BASEPRI, r3
 801853a:	f3bf 8f6f 	isb	sy
 801853e:	f3bf 8f4f 	dsb	sy
 8018542:	60bb      	str	r3, [r7, #8]
}
 8018544:	bf00      	nop
 8018546:	e7fe      	b.n	8018546 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8018548:	4b1e      	ldr	r3, [pc, #120]	; (80185c4 <xPortStartScheduler+0x134>)
 801854a:	681b      	ldr	r3, [r3, #0]
 801854c:	021b      	lsls	r3, r3, #8
 801854e:	4a1d      	ldr	r2, [pc, #116]	; (80185c4 <xPortStartScheduler+0x134>)
 8018550:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8018552:	4b1c      	ldr	r3, [pc, #112]	; (80185c4 <xPortStartScheduler+0x134>)
 8018554:	681b      	ldr	r3, [r3, #0]
 8018556:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801855a:	4a1a      	ldr	r2, [pc, #104]	; (80185c4 <xPortStartScheduler+0x134>)
 801855c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801855e:	687b      	ldr	r3, [r7, #4]
 8018560:	b2da      	uxtb	r2, r3
 8018562:	697b      	ldr	r3, [r7, #20]
 8018564:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8018566:	4b18      	ldr	r3, [pc, #96]	; (80185c8 <xPortStartScheduler+0x138>)
 8018568:	681b      	ldr	r3, [r3, #0]
 801856a:	4a17      	ldr	r2, [pc, #92]	; (80185c8 <xPortStartScheduler+0x138>)
 801856c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8018570:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8018572:	4b15      	ldr	r3, [pc, #84]	; (80185c8 <xPortStartScheduler+0x138>)
 8018574:	681b      	ldr	r3, [r3, #0]
 8018576:	4a14      	ldr	r2, [pc, #80]	; (80185c8 <xPortStartScheduler+0x138>)
 8018578:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801857c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801857e:	f000 f8dd 	bl	801873c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8018582:	4b12      	ldr	r3, [pc, #72]	; (80185cc <xPortStartScheduler+0x13c>)
 8018584:	2200      	movs	r2, #0
 8018586:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8018588:	f000 f8fc 	bl	8018784 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801858c:	4b10      	ldr	r3, [pc, #64]	; (80185d0 <xPortStartScheduler+0x140>)
 801858e:	681b      	ldr	r3, [r3, #0]
 8018590:	4a0f      	ldr	r2, [pc, #60]	; (80185d0 <xPortStartScheduler+0x140>)
 8018592:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8018596:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8018598:	f7ff ff66 	bl	8018468 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801859c:	f7fe fff2 	bl	8017584 <vTaskSwitchContext>
	prvTaskExitError();
 80185a0:	f7ff ff22 	bl	80183e8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80185a4:	2300      	movs	r3, #0
}
 80185a6:	4618      	mov	r0, r3
 80185a8:	3718      	adds	r7, #24
 80185aa:	46bd      	mov	sp, r7
 80185ac:	bd80      	pop	{r7, pc}
 80185ae:	bf00      	nop
 80185b0:	e000ed00 	.word	0xe000ed00
 80185b4:	410fc271 	.word	0x410fc271
 80185b8:	410fc270 	.word	0x410fc270
 80185bc:	e000e400 	.word	0xe000e400
 80185c0:	20002570 	.word	0x20002570
 80185c4:	20002574 	.word	0x20002574
 80185c8:	e000ed20 	.word	0xe000ed20
 80185cc:	200013c0 	.word	0x200013c0
 80185d0:	e000ef34 	.word	0xe000ef34

080185d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80185d4:	b480      	push	{r7}
 80185d6:	b083      	sub	sp, #12
 80185d8:	af00      	add	r7, sp, #0
	__asm volatile
 80185da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80185de:	f383 8811 	msr	BASEPRI, r3
 80185e2:	f3bf 8f6f 	isb	sy
 80185e6:	f3bf 8f4f 	dsb	sy
 80185ea:	607b      	str	r3, [r7, #4]
}
 80185ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80185ee:	4b0f      	ldr	r3, [pc, #60]	; (801862c <vPortEnterCritical+0x58>)
 80185f0:	681b      	ldr	r3, [r3, #0]
 80185f2:	3301      	adds	r3, #1
 80185f4:	4a0d      	ldr	r2, [pc, #52]	; (801862c <vPortEnterCritical+0x58>)
 80185f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80185f8:	4b0c      	ldr	r3, [pc, #48]	; (801862c <vPortEnterCritical+0x58>)
 80185fa:	681b      	ldr	r3, [r3, #0]
 80185fc:	2b01      	cmp	r3, #1
 80185fe:	d10f      	bne.n	8018620 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8018600:	4b0b      	ldr	r3, [pc, #44]	; (8018630 <vPortEnterCritical+0x5c>)
 8018602:	681b      	ldr	r3, [r3, #0]
 8018604:	b2db      	uxtb	r3, r3
 8018606:	2b00      	cmp	r3, #0
 8018608:	d00a      	beq.n	8018620 <vPortEnterCritical+0x4c>
	__asm volatile
 801860a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801860e:	f383 8811 	msr	BASEPRI, r3
 8018612:	f3bf 8f6f 	isb	sy
 8018616:	f3bf 8f4f 	dsb	sy
 801861a:	603b      	str	r3, [r7, #0]
}
 801861c:	bf00      	nop
 801861e:	e7fe      	b.n	801861e <vPortEnterCritical+0x4a>
	}
}
 8018620:	bf00      	nop
 8018622:	370c      	adds	r7, #12
 8018624:	46bd      	mov	sp, r7
 8018626:	f85d 7b04 	ldr.w	r7, [sp], #4
 801862a:	4770      	bx	lr
 801862c:	200013c0 	.word	0x200013c0
 8018630:	e000ed04 	.word	0xe000ed04

08018634 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8018634:	b480      	push	{r7}
 8018636:	b083      	sub	sp, #12
 8018638:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801863a:	4b12      	ldr	r3, [pc, #72]	; (8018684 <vPortExitCritical+0x50>)
 801863c:	681b      	ldr	r3, [r3, #0]
 801863e:	2b00      	cmp	r3, #0
 8018640:	d10a      	bne.n	8018658 <vPortExitCritical+0x24>
	__asm volatile
 8018642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018646:	f383 8811 	msr	BASEPRI, r3
 801864a:	f3bf 8f6f 	isb	sy
 801864e:	f3bf 8f4f 	dsb	sy
 8018652:	607b      	str	r3, [r7, #4]
}
 8018654:	bf00      	nop
 8018656:	e7fe      	b.n	8018656 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8018658:	4b0a      	ldr	r3, [pc, #40]	; (8018684 <vPortExitCritical+0x50>)
 801865a:	681b      	ldr	r3, [r3, #0]
 801865c:	3b01      	subs	r3, #1
 801865e:	4a09      	ldr	r2, [pc, #36]	; (8018684 <vPortExitCritical+0x50>)
 8018660:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8018662:	4b08      	ldr	r3, [pc, #32]	; (8018684 <vPortExitCritical+0x50>)
 8018664:	681b      	ldr	r3, [r3, #0]
 8018666:	2b00      	cmp	r3, #0
 8018668:	d105      	bne.n	8018676 <vPortExitCritical+0x42>
 801866a:	2300      	movs	r3, #0
 801866c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801866e:	683b      	ldr	r3, [r7, #0]
 8018670:	f383 8811 	msr	BASEPRI, r3
}
 8018674:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8018676:	bf00      	nop
 8018678:	370c      	adds	r7, #12
 801867a:	46bd      	mov	sp, r7
 801867c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018680:	4770      	bx	lr
 8018682:	bf00      	nop
 8018684:	200013c0 	.word	0x200013c0
	...

08018690 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8018690:	f3ef 8009 	mrs	r0, PSP
 8018694:	f3bf 8f6f 	isb	sy
 8018698:	4b15      	ldr	r3, [pc, #84]	; (80186f0 <pxCurrentTCBConst>)
 801869a:	681a      	ldr	r2, [r3, #0]
 801869c:	f01e 0f10 	tst.w	lr, #16
 80186a0:	bf08      	it	eq
 80186a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80186a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80186aa:	6010      	str	r0, [r2, #0]
 80186ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80186b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80186b4:	f380 8811 	msr	BASEPRI, r0
 80186b8:	f3bf 8f4f 	dsb	sy
 80186bc:	f3bf 8f6f 	isb	sy
 80186c0:	f7fe ff60 	bl	8017584 <vTaskSwitchContext>
 80186c4:	f04f 0000 	mov.w	r0, #0
 80186c8:	f380 8811 	msr	BASEPRI, r0
 80186cc:	bc09      	pop	{r0, r3}
 80186ce:	6819      	ldr	r1, [r3, #0]
 80186d0:	6808      	ldr	r0, [r1, #0]
 80186d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80186d6:	f01e 0f10 	tst.w	lr, #16
 80186da:	bf08      	it	eq
 80186dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80186e0:	f380 8809 	msr	PSP, r0
 80186e4:	f3bf 8f6f 	isb	sy
 80186e8:	4770      	bx	lr
 80186ea:	bf00      	nop
 80186ec:	f3af 8000 	nop.w

080186f0 <pxCurrentTCBConst>:
 80186f0:	20001f44 	.word	0x20001f44
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80186f4:	bf00      	nop
 80186f6:	bf00      	nop

080186f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80186f8:	b580      	push	{r7, lr}
 80186fa:	b082      	sub	sp, #8
 80186fc:	af00      	add	r7, sp, #0
	__asm volatile
 80186fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018702:	f383 8811 	msr	BASEPRI, r3
 8018706:	f3bf 8f6f 	isb	sy
 801870a:	f3bf 8f4f 	dsb	sy
 801870e:	607b      	str	r3, [r7, #4]
}
 8018710:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8018712:	f7fe fe79 	bl	8017408 <xTaskIncrementTick>
 8018716:	4603      	mov	r3, r0
 8018718:	2b00      	cmp	r3, #0
 801871a:	d003      	beq.n	8018724 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801871c:	4b06      	ldr	r3, [pc, #24]	; (8018738 <xPortSysTickHandler+0x40>)
 801871e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018722:	601a      	str	r2, [r3, #0]
 8018724:	2300      	movs	r3, #0
 8018726:	603b      	str	r3, [r7, #0]
	__asm volatile
 8018728:	683b      	ldr	r3, [r7, #0]
 801872a:	f383 8811 	msr	BASEPRI, r3
}
 801872e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8018730:	bf00      	nop
 8018732:	3708      	adds	r7, #8
 8018734:	46bd      	mov	sp, r7
 8018736:	bd80      	pop	{r7, pc}
 8018738:	e000ed04 	.word	0xe000ed04

0801873c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801873c:	b480      	push	{r7}
 801873e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8018740:	4b0b      	ldr	r3, [pc, #44]	; (8018770 <vPortSetupTimerInterrupt+0x34>)
 8018742:	2200      	movs	r2, #0
 8018744:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8018746:	4b0b      	ldr	r3, [pc, #44]	; (8018774 <vPortSetupTimerInterrupt+0x38>)
 8018748:	2200      	movs	r2, #0
 801874a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801874c:	4b0a      	ldr	r3, [pc, #40]	; (8018778 <vPortSetupTimerInterrupt+0x3c>)
 801874e:	681b      	ldr	r3, [r3, #0]
 8018750:	4a0a      	ldr	r2, [pc, #40]	; (801877c <vPortSetupTimerInterrupt+0x40>)
 8018752:	fba2 2303 	umull	r2, r3, r2, r3
 8018756:	099b      	lsrs	r3, r3, #6
 8018758:	4a09      	ldr	r2, [pc, #36]	; (8018780 <vPortSetupTimerInterrupt+0x44>)
 801875a:	3b01      	subs	r3, #1
 801875c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801875e:	4b04      	ldr	r3, [pc, #16]	; (8018770 <vPortSetupTimerInterrupt+0x34>)
 8018760:	2207      	movs	r2, #7
 8018762:	601a      	str	r2, [r3, #0]
}
 8018764:	bf00      	nop
 8018766:	46bd      	mov	sp, r7
 8018768:	f85d 7b04 	ldr.w	r7, [sp], #4
 801876c:	4770      	bx	lr
 801876e:	bf00      	nop
 8018770:	e000e010 	.word	0xe000e010
 8018774:	e000e018 	.word	0xe000e018
 8018778:	20000004 	.word	0x20000004
 801877c:	10624dd3 	.word	0x10624dd3
 8018780:	e000e014 	.word	0xe000e014

08018784 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8018784:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8018794 <vPortEnableVFP+0x10>
 8018788:	6801      	ldr	r1, [r0, #0]
 801878a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801878e:	6001      	str	r1, [r0, #0]
 8018790:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8018792:	bf00      	nop
 8018794:	e000ed88 	.word	0xe000ed88

08018798 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8018798:	b480      	push	{r7}
 801879a:	b085      	sub	sp, #20
 801879c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801879e:	f3ef 8305 	mrs	r3, IPSR
 80187a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80187a4:	68fb      	ldr	r3, [r7, #12]
 80187a6:	2b0f      	cmp	r3, #15
 80187a8:	d914      	bls.n	80187d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80187aa:	4a17      	ldr	r2, [pc, #92]	; (8018808 <vPortValidateInterruptPriority+0x70>)
 80187ac:	68fb      	ldr	r3, [r7, #12]
 80187ae:	4413      	add	r3, r2
 80187b0:	781b      	ldrb	r3, [r3, #0]
 80187b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80187b4:	4b15      	ldr	r3, [pc, #84]	; (801880c <vPortValidateInterruptPriority+0x74>)
 80187b6:	781b      	ldrb	r3, [r3, #0]
 80187b8:	7afa      	ldrb	r2, [r7, #11]
 80187ba:	429a      	cmp	r2, r3
 80187bc:	d20a      	bcs.n	80187d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80187be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80187c2:	f383 8811 	msr	BASEPRI, r3
 80187c6:	f3bf 8f6f 	isb	sy
 80187ca:	f3bf 8f4f 	dsb	sy
 80187ce:	607b      	str	r3, [r7, #4]
}
 80187d0:	bf00      	nop
 80187d2:	e7fe      	b.n	80187d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80187d4:	4b0e      	ldr	r3, [pc, #56]	; (8018810 <vPortValidateInterruptPriority+0x78>)
 80187d6:	681b      	ldr	r3, [r3, #0]
 80187d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80187dc:	4b0d      	ldr	r3, [pc, #52]	; (8018814 <vPortValidateInterruptPriority+0x7c>)
 80187de:	681b      	ldr	r3, [r3, #0]
 80187e0:	429a      	cmp	r2, r3
 80187e2:	d90a      	bls.n	80187fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80187e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80187e8:	f383 8811 	msr	BASEPRI, r3
 80187ec:	f3bf 8f6f 	isb	sy
 80187f0:	f3bf 8f4f 	dsb	sy
 80187f4:	603b      	str	r3, [r7, #0]
}
 80187f6:	bf00      	nop
 80187f8:	e7fe      	b.n	80187f8 <vPortValidateInterruptPriority+0x60>
	}
 80187fa:	bf00      	nop
 80187fc:	3714      	adds	r7, #20
 80187fe:	46bd      	mov	sp, r7
 8018800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018804:	4770      	bx	lr
 8018806:	bf00      	nop
 8018808:	e000e3f0 	.word	0xe000e3f0
 801880c:	20002570 	.word	0x20002570
 8018810:	e000ed0c 	.word	0xe000ed0c
 8018814:	20002574 	.word	0x20002574

08018818 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8018818:	b580      	push	{r7, lr}
 801881a:	b08a      	sub	sp, #40	; 0x28
 801881c:	af00      	add	r7, sp, #0
 801881e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8018820:	2300      	movs	r3, #0
 8018822:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8018824:	f7fe fd1e 	bl	8017264 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8018828:	4b5b      	ldr	r3, [pc, #364]	; (8018998 <pvPortMalloc+0x180>)
 801882a:	681b      	ldr	r3, [r3, #0]
 801882c:	2b00      	cmp	r3, #0
 801882e:	d101      	bne.n	8018834 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8018830:	f000 f920 	bl	8018a74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8018834:	4b59      	ldr	r3, [pc, #356]	; (801899c <pvPortMalloc+0x184>)
 8018836:	681a      	ldr	r2, [r3, #0]
 8018838:	687b      	ldr	r3, [r7, #4]
 801883a:	4013      	ands	r3, r2
 801883c:	2b00      	cmp	r3, #0
 801883e:	f040 8093 	bne.w	8018968 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8018842:	687b      	ldr	r3, [r7, #4]
 8018844:	2b00      	cmp	r3, #0
 8018846:	d01d      	beq.n	8018884 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8018848:	2208      	movs	r2, #8
 801884a:	687b      	ldr	r3, [r7, #4]
 801884c:	4413      	add	r3, r2
 801884e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8018850:	687b      	ldr	r3, [r7, #4]
 8018852:	f003 0307 	and.w	r3, r3, #7
 8018856:	2b00      	cmp	r3, #0
 8018858:	d014      	beq.n	8018884 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801885a:	687b      	ldr	r3, [r7, #4]
 801885c:	f023 0307 	bic.w	r3, r3, #7
 8018860:	3308      	adds	r3, #8
 8018862:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8018864:	687b      	ldr	r3, [r7, #4]
 8018866:	f003 0307 	and.w	r3, r3, #7
 801886a:	2b00      	cmp	r3, #0
 801886c:	d00a      	beq.n	8018884 <pvPortMalloc+0x6c>
	__asm volatile
 801886e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018872:	f383 8811 	msr	BASEPRI, r3
 8018876:	f3bf 8f6f 	isb	sy
 801887a:	f3bf 8f4f 	dsb	sy
 801887e:	617b      	str	r3, [r7, #20]
}
 8018880:	bf00      	nop
 8018882:	e7fe      	b.n	8018882 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8018884:	687b      	ldr	r3, [r7, #4]
 8018886:	2b00      	cmp	r3, #0
 8018888:	d06e      	beq.n	8018968 <pvPortMalloc+0x150>
 801888a:	4b45      	ldr	r3, [pc, #276]	; (80189a0 <pvPortMalloc+0x188>)
 801888c:	681b      	ldr	r3, [r3, #0]
 801888e:	687a      	ldr	r2, [r7, #4]
 8018890:	429a      	cmp	r2, r3
 8018892:	d869      	bhi.n	8018968 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8018894:	4b43      	ldr	r3, [pc, #268]	; (80189a4 <pvPortMalloc+0x18c>)
 8018896:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8018898:	4b42      	ldr	r3, [pc, #264]	; (80189a4 <pvPortMalloc+0x18c>)
 801889a:	681b      	ldr	r3, [r3, #0]
 801889c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801889e:	e004      	b.n	80188aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80188a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80188a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188a6:	681b      	ldr	r3, [r3, #0]
 80188a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80188aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188ac:	685b      	ldr	r3, [r3, #4]
 80188ae:	687a      	ldr	r2, [r7, #4]
 80188b0:	429a      	cmp	r2, r3
 80188b2:	d903      	bls.n	80188bc <pvPortMalloc+0xa4>
 80188b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188b6:	681b      	ldr	r3, [r3, #0]
 80188b8:	2b00      	cmp	r3, #0
 80188ba:	d1f1      	bne.n	80188a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80188bc:	4b36      	ldr	r3, [pc, #216]	; (8018998 <pvPortMalloc+0x180>)
 80188be:	681b      	ldr	r3, [r3, #0]
 80188c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80188c2:	429a      	cmp	r2, r3
 80188c4:	d050      	beq.n	8018968 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80188c6:	6a3b      	ldr	r3, [r7, #32]
 80188c8:	681b      	ldr	r3, [r3, #0]
 80188ca:	2208      	movs	r2, #8
 80188cc:	4413      	add	r3, r2
 80188ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80188d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188d2:	681a      	ldr	r2, [r3, #0]
 80188d4:	6a3b      	ldr	r3, [r7, #32]
 80188d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80188d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188da:	685a      	ldr	r2, [r3, #4]
 80188dc:	687b      	ldr	r3, [r7, #4]
 80188de:	1ad2      	subs	r2, r2, r3
 80188e0:	2308      	movs	r3, #8
 80188e2:	005b      	lsls	r3, r3, #1
 80188e4:	429a      	cmp	r2, r3
 80188e6:	d91f      	bls.n	8018928 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80188e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80188ea:	687b      	ldr	r3, [r7, #4]
 80188ec:	4413      	add	r3, r2
 80188ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80188f0:	69bb      	ldr	r3, [r7, #24]
 80188f2:	f003 0307 	and.w	r3, r3, #7
 80188f6:	2b00      	cmp	r3, #0
 80188f8:	d00a      	beq.n	8018910 <pvPortMalloc+0xf8>
	__asm volatile
 80188fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80188fe:	f383 8811 	msr	BASEPRI, r3
 8018902:	f3bf 8f6f 	isb	sy
 8018906:	f3bf 8f4f 	dsb	sy
 801890a:	613b      	str	r3, [r7, #16]
}
 801890c:	bf00      	nop
 801890e:	e7fe      	b.n	801890e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8018910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018912:	685a      	ldr	r2, [r3, #4]
 8018914:	687b      	ldr	r3, [r7, #4]
 8018916:	1ad2      	subs	r2, r2, r3
 8018918:	69bb      	ldr	r3, [r7, #24]
 801891a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801891c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801891e:	687a      	ldr	r2, [r7, #4]
 8018920:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8018922:	69b8      	ldr	r0, [r7, #24]
 8018924:	f000 f90a 	bl	8018b3c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8018928:	4b1d      	ldr	r3, [pc, #116]	; (80189a0 <pvPortMalloc+0x188>)
 801892a:	681a      	ldr	r2, [r3, #0]
 801892c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801892e:	685b      	ldr	r3, [r3, #4]
 8018930:	1ad3      	subs	r3, r2, r3
 8018932:	4a1b      	ldr	r2, [pc, #108]	; (80189a0 <pvPortMalloc+0x188>)
 8018934:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8018936:	4b1a      	ldr	r3, [pc, #104]	; (80189a0 <pvPortMalloc+0x188>)
 8018938:	681a      	ldr	r2, [r3, #0]
 801893a:	4b1b      	ldr	r3, [pc, #108]	; (80189a8 <pvPortMalloc+0x190>)
 801893c:	681b      	ldr	r3, [r3, #0]
 801893e:	429a      	cmp	r2, r3
 8018940:	d203      	bcs.n	801894a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8018942:	4b17      	ldr	r3, [pc, #92]	; (80189a0 <pvPortMalloc+0x188>)
 8018944:	681b      	ldr	r3, [r3, #0]
 8018946:	4a18      	ldr	r2, [pc, #96]	; (80189a8 <pvPortMalloc+0x190>)
 8018948:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801894a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801894c:	685a      	ldr	r2, [r3, #4]
 801894e:	4b13      	ldr	r3, [pc, #76]	; (801899c <pvPortMalloc+0x184>)
 8018950:	681b      	ldr	r3, [r3, #0]
 8018952:	431a      	orrs	r2, r3
 8018954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018956:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8018958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801895a:	2200      	movs	r2, #0
 801895c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801895e:	4b13      	ldr	r3, [pc, #76]	; (80189ac <pvPortMalloc+0x194>)
 8018960:	681b      	ldr	r3, [r3, #0]
 8018962:	3301      	adds	r3, #1
 8018964:	4a11      	ldr	r2, [pc, #68]	; (80189ac <pvPortMalloc+0x194>)
 8018966:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8018968:	f7fe fc8a 	bl	8017280 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801896c:	69fb      	ldr	r3, [r7, #28]
 801896e:	f003 0307 	and.w	r3, r3, #7
 8018972:	2b00      	cmp	r3, #0
 8018974:	d00a      	beq.n	801898c <pvPortMalloc+0x174>
	__asm volatile
 8018976:	f04f 0350 	mov.w	r3, #80	; 0x50
 801897a:	f383 8811 	msr	BASEPRI, r3
 801897e:	f3bf 8f6f 	isb	sy
 8018982:	f3bf 8f4f 	dsb	sy
 8018986:	60fb      	str	r3, [r7, #12]
}
 8018988:	bf00      	nop
 801898a:	e7fe      	b.n	801898a <pvPortMalloc+0x172>
	return pvReturn;
 801898c:	69fb      	ldr	r3, [r7, #28]
}
 801898e:	4618      	mov	r0, r3
 8018990:	3728      	adds	r7, #40	; 0x28
 8018992:	46bd      	mov	sp, r7
 8018994:	bd80      	pop	{r7, pc}
 8018996:	bf00      	nop
 8018998:	2001ac20 	.word	0x2001ac20
 801899c:	2001ac34 	.word	0x2001ac34
 80189a0:	2001ac24 	.word	0x2001ac24
 80189a4:	2001ac18 	.word	0x2001ac18
 80189a8:	2001ac28 	.word	0x2001ac28
 80189ac:	2001ac2c 	.word	0x2001ac2c

080189b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80189b0:	b580      	push	{r7, lr}
 80189b2:	b086      	sub	sp, #24
 80189b4:	af00      	add	r7, sp, #0
 80189b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80189b8:	687b      	ldr	r3, [r7, #4]
 80189ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80189bc:	687b      	ldr	r3, [r7, #4]
 80189be:	2b00      	cmp	r3, #0
 80189c0:	d04d      	beq.n	8018a5e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80189c2:	2308      	movs	r3, #8
 80189c4:	425b      	negs	r3, r3
 80189c6:	697a      	ldr	r2, [r7, #20]
 80189c8:	4413      	add	r3, r2
 80189ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80189cc:	697b      	ldr	r3, [r7, #20]
 80189ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80189d0:	693b      	ldr	r3, [r7, #16]
 80189d2:	685a      	ldr	r2, [r3, #4]
 80189d4:	4b24      	ldr	r3, [pc, #144]	; (8018a68 <vPortFree+0xb8>)
 80189d6:	681b      	ldr	r3, [r3, #0]
 80189d8:	4013      	ands	r3, r2
 80189da:	2b00      	cmp	r3, #0
 80189dc:	d10a      	bne.n	80189f4 <vPortFree+0x44>
	__asm volatile
 80189de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80189e2:	f383 8811 	msr	BASEPRI, r3
 80189e6:	f3bf 8f6f 	isb	sy
 80189ea:	f3bf 8f4f 	dsb	sy
 80189ee:	60fb      	str	r3, [r7, #12]
}
 80189f0:	bf00      	nop
 80189f2:	e7fe      	b.n	80189f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80189f4:	693b      	ldr	r3, [r7, #16]
 80189f6:	681b      	ldr	r3, [r3, #0]
 80189f8:	2b00      	cmp	r3, #0
 80189fa:	d00a      	beq.n	8018a12 <vPortFree+0x62>
	__asm volatile
 80189fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018a00:	f383 8811 	msr	BASEPRI, r3
 8018a04:	f3bf 8f6f 	isb	sy
 8018a08:	f3bf 8f4f 	dsb	sy
 8018a0c:	60bb      	str	r3, [r7, #8]
}
 8018a0e:	bf00      	nop
 8018a10:	e7fe      	b.n	8018a10 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8018a12:	693b      	ldr	r3, [r7, #16]
 8018a14:	685a      	ldr	r2, [r3, #4]
 8018a16:	4b14      	ldr	r3, [pc, #80]	; (8018a68 <vPortFree+0xb8>)
 8018a18:	681b      	ldr	r3, [r3, #0]
 8018a1a:	4013      	ands	r3, r2
 8018a1c:	2b00      	cmp	r3, #0
 8018a1e:	d01e      	beq.n	8018a5e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8018a20:	693b      	ldr	r3, [r7, #16]
 8018a22:	681b      	ldr	r3, [r3, #0]
 8018a24:	2b00      	cmp	r3, #0
 8018a26:	d11a      	bne.n	8018a5e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8018a28:	693b      	ldr	r3, [r7, #16]
 8018a2a:	685a      	ldr	r2, [r3, #4]
 8018a2c:	4b0e      	ldr	r3, [pc, #56]	; (8018a68 <vPortFree+0xb8>)
 8018a2e:	681b      	ldr	r3, [r3, #0]
 8018a30:	43db      	mvns	r3, r3
 8018a32:	401a      	ands	r2, r3
 8018a34:	693b      	ldr	r3, [r7, #16]
 8018a36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8018a38:	f7fe fc14 	bl	8017264 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8018a3c:	693b      	ldr	r3, [r7, #16]
 8018a3e:	685a      	ldr	r2, [r3, #4]
 8018a40:	4b0a      	ldr	r3, [pc, #40]	; (8018a6c <vPortFree+0xbc>)
 8018a42:	681b      	ldr	r3, [r3, #0]
 8018a44:	4413      	add	r3, r2
 8018a46:	4a09      	ldr	r2, [pc, #36]	; (8018a6c <vPortFree+0xbc>)
 8018a48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8018a4a:	6938      	ldr	r0, [r7, #16]
 8018a4c:	f000 f876 	bl	8018b3c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8018a50:	4b07      	ldr	r3, [pc, #28]	; (8018a70 <vPortFree+0xc0>)
 8018a52:	681b      	ldr	r3, [r3, #0]
 8018a54:	3301      	adds	r3, #1
 8018a56:	4a06      	ldr	r2, [pc, #24]	; (8018a70 <vPortFree+0xc0>)
 8018a58:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8018a5a:	f7fe fc11 	bl	8017280 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8018a5e:	bf00      	nop
 8018a60:	3718      	adds	r7, #24
 8018a62:	46bd      	mov	sp, r7
 8018a64:	bd80      	pop	{r7, pc}
 8018a66:	bf00      	nop
 8018a68:	2001ac34 	.word	0x2001ac34
 8018a6c:	2001ac24 	.word	0x2001ac24
 8018a70:	2001ac30 	.word	0x2001ac30

08018a74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8018a74:	b480      	push	{r7}
 8018a76:	b085      	sub	sp, #20
 8018a78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8018a7a:	4b29      	ldr	r3, [pc, #164]	; (8018b20 <prvHeapInit+0xac>)
 8018a7c:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8018a7e:	4b29      	ldr	r3, [pc, #164]	; (8018b24 <prvHeapInit+0xb0>)
 8018a80:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8018a82:	68fb      	ldr	r3, [r7, #12]
 8018a84:	f003 0307 	and.w	r3, r3, #7
 8018a88:	2b00      	cmp	r3, #0
 8018a8a:	d00c      	beq.n	8018aa6 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8018a8c:	68fb      	ldr	r3, [r7, #12]
 8018a8e:	3307      	adds	r3, #7
 8018a90:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8018a92:	68fb      	ldr	r3, [r7, #12]
 8018a94:	f023 0307 	bic.w	r3, r3, #7
 8018a98:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8018a9a:	68ba      	ldr	r2, [r7, #8]
 8018a9c:	68fb      	ldr	r3, [r7, #12]
 8018a9e:	1ad3      	subs	r3, r2, r3
 8018aa0:	4a20      	ldr	r2, [pc, #128]	; (8018b24 <prvHeapInit+0xb0>)
 8018aa2:	4413      	add	r3, r2
 8018aa4:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8018aa6:	68fb      	ldr	r3, [r7, #12]
 8018aa8:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8018aaa:	4a1f      	ldr	r2, [pc, #124]	; (8018b28 <prvHeapInit+0xb4>)
 8018aac:	687b      	ldr	r3, [r7, #4]
 8018aae:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8018ab0:	4b1d      	ldr	r3, [pc, #116]	; (8018b28 <prvHeapInit+0xb4>)
 8018ab2:	2200      	movs	r2, #0
 8018ab4:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8018ab6:	687b      	ldr	r3, [r7, #4]
 8018ab8:	68ba      	ldr	r2, [r7, #8]
 8018aba:	4413      	add	r3, r2
 8018abc:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8018abe:	2208      	movs	r2, #8
 8018ac0:	68fb      	ldr	r3, [r7, #12]
 8018ac2:	1a9b      	subs	r3, r3, r2
 8018ac4:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8018ac6:	68fb      	ldr	r3, [r7, #12]
 8018ac8:	f023 0307 	bic.w	r3, r3, #7
 8018acc:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8018ace:	68fb      	ldr	r3, [r7, #12]
 8018ad0:	4a16      	ldr	r2, [pc, #88]	; (8018b2c <prvHeapInit+0xb8>)
 8018ad2:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8018ad4:	4b15      	ldr	r3, [pc, #84]	; (8018b2c <prvHeapInit+0xb8>)
 8018ad6:	681b      	ldr	r3, [r3, #0]
 8018ad8:	2200      	movs	r2, #0
 8018ada:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8018adc:	4b13      	ldr	r3, [pc, #76]	; (8018b2c <prvHeapInit+0xb8>)
 8018ade:	681b      	ldr	r3, [r3, #0]
 8018ae0:	2200      	movs	r2, #0
 8018ae2:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8018ae4:	687b      	ldr	r3, [r7, #4]
 8018ae6:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8018ae8:	683b      	ldr	r3, [r7, #0]
 8018aea:	68fa      	ldr	r2, [r7, #12]
 8018aec:	1ad2      	subs	r2, r2, r3
 8018aee:	683b      	ldr	r3, [r7, #0]
 8018af0:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8018af2:	4b0e      	ldr	r3, [pc, #56]	; (8018b2c <prvHeapInit+0xb8>)
 8018af4:	681a      	ldr	r2, [r3, #0]
 8018af6:	683b      	ldr	r3, [r7, #0]
 8018af8:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8018afa:	683b      	ldr	r3, [r7, #0]
 8018afc:	685b      	ldr	r3, [r3, #4]
 8018afe:	4a0c      	ldr	r2, [pc, #48]	; (8018b30 <prvHeapInit+0xbc>)
 8018b00:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8018b02:	683b      	ldr	r3, [r7, #0]
 8018b04:	685b      	ldr	r3, [r3, #4]
 8018b06:	4a0b      	ldr	r2, [pc, #44]	; (8018b34 <prvHeapInit+0xc0>)
 8018b08:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8018b0a:	4b0b      	ldr	r3, [pc, #44]	; (8018b38 <prvHeapInit+0xc4>)
 8018b0c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8018b10:	601a      	str	r2, [r3, #0]
}
 8018b12:	bf00      	nop
 8018b14:	3714      	adds	r7, #20
 8018b16:	46bd      	mov	sp, r7
 8018b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b1c:	4770      	bx	lr
 8018b1e:	bf00      	nop
 8018b20:	000186a0 	.word	0x000186a0
 8018b24:	20002578 	.word	0x20002578
 8018b28:	2001ac18 	.word	0x2001ac18
 8018b2c:	2001ac20 	.word	0x2001ac20
 8018b30:	2001ac28 	.word	0x2001ac28
 8018b34:	2001ac24 	.word	0x2001ac24
 8018b38:	2001ac34 	.word	0x2001ac34

08018b3c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8018b3c:	b480      	push	{r7}
 8018b3e:	b085      	sub	sp, #20
 8018b40:	af00      	add	r7, sp, #0
 8018b42:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8018b44:	4b28      	ldr	r3, [pc, #160]	; (8018be8 <prvInsertBlockIntoFreeList+0xac>)
 8018b46:	60fb      	str	r3, [r7, #12]
 8018b48:	e002      	b.n	8018b50 <prvInsertBlockIntoFreeList+0x14>
 8018b4a:	68fb      	ldr	r3, [r7, #12]
 8018b4c:	681b      	ldr	r3, [r3, #0]
 8018b4e:	60fb      	str	r3, [r7, #12]
 8018b50:	68fb      	ldr	r3, [r7, #12]
 8018b52:	681b      	ldr	r3, [r3, #0]
 8018b54:	687a      	ldr	r2, [r7, #4]
 8018b56:	429a      	cmp	r2, r3
 8018b58:	d8f7      	bhi.n	8018b4a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8018b5a:	68fb      	ldr	r3, [r7, #12]
 8018b5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8018b5e:	68fb      	ldr	r3, [r7, #12]
 8018b60:	685b      	ldr	r3, [r3, #4]
 8018b62:	68ba      	ldr	r2, [r7, #8]
 8018b64:	4413      	add	r3, r2
 8018b66:	687a      	ldr	r2, [r7, #4]
 8018b68:	429a      	cmp	r2, r3
 8018b6a:	d108      	bne.n	8018b7e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8018b6c:	68fb      	ldr	r3, [r7, #12]
 8018b6e:	685a      	ldr	r2, [r3, #4]
 8018b70:	687b      	ldr	r3, [r7, #4]
 8018b72:	685b      	ldr	r3, [r3, #4]
 8018b74:	441a      	add	r2, r3
 8018b76:	68fb      	ldr	r3, [r7, #12]
 8018b78:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8018b7a:	68fb      	ldr	r3, [r7, #12]
 8018b7c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8018b7e:	687b      	ldr	r3, [r7, #4]
 8018b80:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8018b82:	687b      	ldr	r3, [r7, #4]
 8018b84:	685b      	ldr	r3, [r3, #4]
 8018b86:	68ba      	ldr	r2, [r7, #8]
 8018b88:	441a      	add	r2, r3
 8018b8a:	68fb      	ldr	r3, [r7, #12]
 8018b8c:	681b      	ldr	r3, [r3, #0]
 8018b8e:	429a      	cmp	r2, r3
 8018b90:	d118      	bne.n	8018bc4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8018b92:	68fb      	ldr	r3, [r7, #12]
 8018b94:	681a      	ldr	r2, [r3, #0]
 8018b96:	4b15      	ldr	r3, [pc, #84]	; (8018bec <prvInsertBlockIntoFreeList+0xb0>)
 8018b98:	681b      	ldr	r3, [r3, #0]
 8018b9a:	429a      	cmp	r2, r3
 8018b9c:	d00d      	beq.n	8018bba <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8018b9e:	687b      	ldr	r3, [r7, #4]
 8018ba0:	685a      	ldr	r2, [r3, #4]
 8018ba2:	68fb      	ldr	r3, [r7, #12]
 8018ba4:	681b      	ldr	r3, [r3, #0]
 8018ba6:	685b      	ldr	r3, [r3, #4]
 8018ba8:	441a      	add	r2, r3
 8018baa:	687b      	ldr	r3, [r7, #4]
 8018bac:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8018bae:	68fb      	ldr	r3, [r7, #12]
 8018bb0:	681b      	ldr	r3, [r3, #0]
 8018bb2:	681a      	ldr	r2, [r3, #0]
 8018bb4:	687b      	ldr	r3, [r7, #4]
 8018bb6:	601a      	str	r2, [r3, #0]
 8018bb8:	e008      	b.n	8018bcc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8018bba:	4b0c      	ldr	r3, [pc, #48]	; (8018bec <prvInsertBlockIntoFreeList+0xb0>)
 8018bbc:	681a      	ldr	r2, [r3, #0]
 8018bbe:	687b      	ldr	r3, [r7, #4]
 8018bc0:	601a      	str	r2, [r3, #0]
 8018bc2:	e003      	b.n	8018bcc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8018bc4:	68fb      	ldr	r3, [r7, #12]
 8018bc6:	681a      	ldr	r2, [r3, #0]
 8018bc8:	687b      	ldr	r3, [r7, #4]
 8018bca:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8018bcc:	68fa      	ldr	r2, [r7, #12]
 8018bce:	687b      	ldr	r3, [r7, #4]
 8018bd0:	429a      	cmp	r2, r3
 8018bd2:	d002      	beq.n	8018bda <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8018bd4:	68fb      	ldr	r3, [r7, #12]
 8018bd6:	687a      	ldr	r2, [r7, #4]
 8018bd8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8018bda:	bf00      	nop
 8018bdc:	3714      	adds	r7, #20
 8018bde:	46bd      	mov	sp, r7
 8018be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018be4:	4770      	bx	lr
 8018be6:	bf00      	nop
 8018be8:	2001ac18 	.word	0x2001ac18
 8018bec:	2001ac20 	.word	0x2001ac20

08018bf0 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8018bf0:	b480      	push	{r7}
 8018bf2:	b083      	sub	sp, #12
 8018bf4:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8018bf6:	4b24      	ldr	r3, [pc, #144]	; (8018c88 <_DoInit+0x98>)
 8018bf8:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8018bfa:	687b      	ldr	r3, [r7, #4]
 8018bfc:	2203      	movs	r2, #3
 8018bfe:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8018c00:	687b      	ldr	r3, [r7, #4]
 8018c02:	2203      	movs	r2, #3
 8018c04:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8018c06:	687b      	ldr	r3, [r7, #4]
 8018c08:	4a20      	ldr	r2, [pc, #128]	; (8018c8c <_DoInit+0x9c>)
 8018c0a:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8018c0c:	687b      	ldr	r3, [r7, #4]
 8018c0e:	4a20      	ldr	r2, [pc, #128]	; (8018c90 <_DoInit+0xa0>)
 8018c10:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8018c12:	687b      	ldr	r3, [r7, #4]
 8018c14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8018c18:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8018c1a:	687b      	ldr	r3, [r7, #4]
 8018c1c:	2200      	movs	r2, #0
 8018c1e:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8018c20:	687b      	ldr	r3, [r7, #4]
 8018c22:	2200      	movs	r2, #0
 8018c24:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8018c26:	687b      	ldr	r3, [r7, #4]
 8018c28:	2200      	movs	r2, #0
 8018c2a:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8018c2c:	687b      	ldr	r3, [r7, #4]
 8018c2e:	4a17      	ldr	r2, [pc, #92]	; (8018c8c <_DoInit+0x9c>)
 8018c30:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8018c32:	687b      	ldr	r3, [r7, #4]
 8018c34:	4a17      	ldr	r2, [pc, #92]	; (8018c94 <_DoInit+0xa4>)
 8018c36:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8018c38:	687b      	ldr	r3, [r7, #4]
 8018c3a:	2210      	movs	r2, #16
 8018c3c:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8018c3e:	687b      	ldr	r3, [r7, #4]
 8018c40:	2200      	movs	r2, #0
 8018c42:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8018c44:	687b      	ldr	r3, [r7, #4]
 8018c46:	2200      	movs	r2, #0
 8018c48:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8018c4a:	687b      	ldr	r3, [r7, #4]
 8018c4c:	2200      	movs	r2, #0
 8018c4e:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8018c50:	687b      	ldr	r3, [r7, #4]
 8018c52:	3307      	adds	r3, #7
 8018c54:	4a10      	ldr	r2, [pc, #64]	; (8018c98 <_DoInit+0xa8>)
 8018c56:	6810      	ldr	r0, [r2, #0]
 8018c58:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8018c5a:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8018c5e:	687b      	ldr	r3, [r7, #4]
 8018c60:	4a0e      	ldr	r2, [pc, #56]	; (8018c9c <_DoInit+0xac>)
 8018c62:	6810      	ldr	r0, [r2, #0]
 8018c64:	6018      	str	r0, [r3, #0]
 8018c66:	8891      	ldrh	r1, [r2, #4]
 8018c68:	7992      	ldrb	r2, [r2, #6]
 8018c6a:	8099      	strh	r1, [r3, #4]
 8018c6c:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8018c6e:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8018c72:	687b      	ldr	r3, [r7, #4]
 8018c74:	2220      	movs	r2, #32
 8018c76:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8018c78:	f3bf 8f5f 	dmb	sy
}
 8018c7c:	bf00      	nop
 8018c7e:	370c      	adds	r7, #12
 8018c80:	46bd      	mov	sp, r7
 8018c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c86:	4770      	bx	lr
 8018c88:	2001e968 	.word	0x2001e968
 8018c8c:	0801af8c 	.word	0x0801af8c
 8018c90:	2001ac38 	.word	0x2001ac38
 8018c94:	2001b038 	.word	0x2001b038
 8018c98:	0801af98 	.word	0x0801af98
 8018c9c:	0801af9c 	.word	0x0801af9c

08018ca0 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8018ca0:	b580      	push	{r7, lr}
 8018ca2:	b08c      	sub	sp, #48	; 0x30
 8018ca4:	af00      	add	r7, sp, #0
 8018ca6:	60f8      	str	r0, [r7, #12]
 8018ca8:	60b9      	str	r1, [r7, #8]
 8018caa:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8018cac:	4b3e      	ldr	r3, [pc, #248]	; (8018da8 <SEGGER_RTT_ReadNoLock+0x108>)
 8018cae:	623b      	str	r3, [r7, #32]
 8018cb0:	6a3b      	ldr	r3, [r7, #32]
 8018cb2:	781b      	ldrb	r3, [r3, #0]
 8018cb4:	b2db      	uxtb	r3, r3
 8018cb6:	2b00      	cmp	r3, #0
 8018cb8:	d101      	bne.n	8018cbe <SEGGER_RTT_ReadNoLock+0x1e>
 8018cba:	f7ff ff99 	bl	8018bf0 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8018cbe:	68fa      	ldr	r2, [r7, #12]
 8018cc0:	4613      	mov	r3, r2
 8018cc2:	005b      	lsls	r3, r3, #1
 8018cc4:	4413      	add	r3, r2
 8018cc6:	00db      	lsls	r3, r3, #3
 8018cc8:	3360      	adds	r3, #96	; 0x60
 8018cca:	4a37      	ldr	r2, [pc, #220]	; (8018da8 <SEGGER_RTT_ReadNoLock+0x108>)
 8018ccc:	4413      	add	r3, r2
 8018cce:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8018cd0:	68bb      	ldr	r3, [r7, #8]
 8018cd2:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8018cd4:	69fb      	ldr	r3, [r7, #28]
 8018cd6:	691b      	ldr	r3, [r3, #16]
 8018cd8:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8018cda:	69fb      	ldr	r3, [r7, #28]
 8018cdc:	68db      	ldr	r3, [r3, #12]
 8018cde:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8018ce0:	2300      	movs	r3, #0
 8018ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8018ce4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018ce6:	69bb      	ldr	r3, [r7, #24]
 8018ce8:	429a      	cmp	r2, r3
 8018cea:	d92b      	bls.n	8018d44 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8018cec:	69fb      	ldr	r3, [r7, #28]
 8018cee:	689a      	ldr	r2, [r3, #8]
 8018cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018cf2:	1ad3      	subs	r3, r2, r3
 8018cf4:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8018cf6:	697a      	ldr	r2, [r7, #20]
 8018cf8:	687b      	ldr	r3, [r7, #4]
 8018cfa:	4293      	cmp	r3, r2
 8018cfc:	bf28      	it	cs
 8018cfe:	4613      	movcs	r3, r2
 8018d00:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8018d02:	69fb      	ldr	r3, [r7, #28]
 8018d04:	685a      	ldr	r2, [r3, #4]
 8018d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018d08:	4413      	add	r3, r2
 8018d0a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8018d0c:	697a      	ldr	r2, [r7, #20]
 8018d0e:	6939      	ldr	r1, [r7, #16]
 8018d10:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018d12:	f001 fa9b 	bl	801a24c <memcpy>
    NumBytesRead += NumBytesRem;
 8018d16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018d18:	697b      	ldr	r3, [r7, #20]
 8018d1a:	4413      	add	r3, r2
 8018d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8018d1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018d20:	697b      	ldr	r3, [r7, #20]
 8018d22:	4413      	add	r3, r2
 8018d24:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8018d26:	687a      	ldr	r2, [r7, #4]
 8018d28:	697b      	ldr	r3, [r7, #20]
 8018d2a:	1ad3      	subs	r3, r2, r3
 8018d2c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8018d2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018d30:	697b      	ldr	r3, [r7, #20]
 8018d32:	4413      	add	r3, r2
 8018d34:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8018d36:	69fb      	ldr	r3, [r7, #28]
 8018d38:	689b      	ldr	r3, [r3, #8]
 8018d3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018d3c:	429a      	cmp	r2, r3
 8018d3e:	d101      	bne.n	8018d44 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8018d40:	2300      	movs	r3, #0
 8018d42:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8018d44:	69ba      	ldr	r2, [r7, #24]
 8018d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018d48:	1ad3      	subs	r3, r2, r3
 8018d4a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8018d4c:	697a      	ldr	r2, [r7, #20]
 8018d4e:	687b      	ldr	r3, [r7, #4]
 8018d50:	4293      	cmp	r3, r2
 8018d52:	bf28      	it	cs
 8018d54:	4613      	movcs	r3, r2
 8018d56:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8018d58:	697b      	ldr	r3, [r7, #20]
 8018d5a:	2b00      	cmp	r3, #0
 8018d5c:	d019      	beq.n	8018d92 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8018d5e:	69fb      	ldr	r3, [r7, #28]
 8018d60:	685a      	ldr	r2, [r3, #4]
 8018d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018d64:	4413      	add	r3, r2
 8018d66:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8018d68:	697a      	ldr	r2, [r7, #20]
 8018d6a:	6939      	ldr	r1, [r7, #16]
 8018d6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018d6e:	f001 fa6d 	bl	801a24c <memcpy>
    NumBytesRead += NumBytesRem;
 8018d72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018d74:	697b      	ldr	r3, [r7, #20]
 8018d76:	4413      	add	r3, r2
 8018d78:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8018d7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018d7c:	697b      	ldr	r3, [r7, #20]
 8018d7e:	4413      	add	r3, r2
 8018d80:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8018d82:	687a      	ldr	r2, [r7, #4]
 8018d84:	697b      	ldr	r3, [r7, #20]
 8018d86:	1ad3      	subs	r3, r2, r3
 8018d88:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8018d8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018d8c:	697b      	ldr	r3, [r7, #20]
 8018d8e:	4413      	add	r3, r2
 8018d90:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8018d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018d94:	2b00      	cmp	r3, #0
 8018d96:	d002      	beq.n	8018d9e <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8018d98:	69fb      	ldr	r3, [r7, #28]
 8018d9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018d9c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8018d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8018da0:	4618      	mov	r0, r3
 8018da2:	3730      	adds	r7, #48	; 0x30
 8018da4:	46bd      	mov	sp, r7
 8018da6:	bd80      	pop	{r7, pc}
 8018da8:	2001e968 	.word	0x2001e968

08018dac <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8018dac:	b580      	push	{r7, lr}
 8018dae:	b088      	sub	sp, #32
 8018db0:	af00      	add	r7, sp, #0
 8018db2:	60f8      	str	r0, [r7, #12]
 8018db4:	60b9      	str	r1, [r7, #8]
 8018db6:	607a      	str	r2, [r7, #4]
 8018db8:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8018dba:	4b3d      	ldr	r3, [pc, #244]	; (8018eb0 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8018dbc:	61bb      	str	r3, [r7, #24]
 8018dbe:	69bb      	ldr	r3, [r7, #24]
 8018dc0:	781b      	ldrb	r3, [r3, #0]
 8018dc2:	b2db      	uxtb	r3, r3
 8018dc4:	2b00      	cmp	r3, #0
 8018dc6:	d101      	bne.n	8018dcc <SEGGER_RTT_AllocUpBuffer+0x20>
 8018dc8:	f7ff ff12 	bl	8018bf0 <_DoInit>
  SEGGER_RTT_LOCK();
 8018dcc:	f3ef 8311 	mrs	r3, BASEPRI
 8018dd0:	f04f 0120 	mov.w	r1, #32
 8018dd4:	f381 8811 	msr	BASEPRI, r1
 8018dd8:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8018dda:	4b35      	ldr	r3, [pc, #212]	; (8018eb0 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8018ddc:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8018dde:	2300      	movs	r3, #0
 8018de0:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8018de2:	6939      	ldr	r1, [r7, #16]
 8018de4:	69fb      	ldr	r3, [r7, #28]
 8018de6:	1c5a      	adds	r2, r3, #1
 8018de8:	4613      	mov	r3, r2
 8018dea:	005b      	lsls	r3, r3, #1
 8018dec:	4413      	add	r3, r2
 8018dee:	00db      	lsls	r3, r3, #3
 8018df0:	440b      	add	r3, r1
 8018df2:	3304      	adds	r3, #4
 8018df4:	681b      	ldr	r3, [r3, #0]
 8018df6:	2b00      	cmp	r3, #0
 8018df8:	d008      	beq.n	8018e0c <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8018dfa:	69fb      	ldr	r3, [r7, #28]
 8018dfc:	3301      	adds	r3, #1
 8018dfe:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8018e00:	693b      	ldr	r3, [r7, #16]
 8018e02:	691b      	ldr	r3, [r3, #16]
 8018e04:	69fa      	ldr	r2, [r7, #28]
 8018e06:	429a      	cmp	r2, r3
 8018e08:	dbeb      	blt.n	8018de2 <SEGGER_RTT_AllocUpBuffer+0x36>
 8018e0a:	e000      	b.n	8018e0e <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8018e0c:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8018e0e:	693b      	ldr	r3, [r7, #16]
 8018e10:	691b      	ldr	r3, [r3, #16]
 8018e12:	69fa      	ldr	r2, [r7, #28]
 8018e14:	429a      	cmp	r2, r3
 8018e16:	da3f      	bge.n	8018e98 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8018e18:	6939      	ldr	r1, [r7, #16]
 8018e1a:	69fb      	ldr	r3, [r7, #28]
 8018e1c:	1c5a      	adds	r2, r3, #1
 8018e1e:	4613      	mov	r3, r2
 8018e20:	005b      	lsls	r3, r3, #1
 8018e22:	4413      	add	r3, r2
 8018e24:	00db      	lsls	r3, r3, #3
 8018e26:	440b      	add	r3, r1
 8018e28:	68fa      	ldr	r2, [r7, #12]
 8018e2a:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8018e2c:	6939      	ldr	r1, [r7, #16]
 8018e2e:	69fb      	ldr	r3, [r7, #28]
 8018e30:	1c5a      	adds	r2, r3, #1
 8018e32:	4613      	mov	r3, r2
 8018e34:	005b      	lsls	r3, r3, #1
 8018e36:	4413      	add	r3, r2
 8018e38:	00db      	lsls	r3, r3, #3
 8018e3a:	440b      	add	r3, r1
 8018e3c:	3304      	adds	r3, #4
 8018e3e:	68ba      	ldr	r2, [r7, #8]
 8018e40:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8018e42:	6939      	ldr	r1, [r7, #16]
 8018e44:	69fa      	ldr	r2, [r7, #28]
 8018e46:	4613      	mov	r3, r2
 8018e48:	005b      	lsls	r3, r3, #1
 8018e4a:	4413      	add	r3, r2
 8018e4c:	00db      	lsls	r3, r3, #3
 8018e4e:	440b      	add	r3, r1
 8018e50:	3320      	adds	r3, #32
 8018e52:	687a      	ldr	r2, [r7, #4]
 8018e54:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8018e56:	6939      	ldr	r1, [r7, #16]
 8018e58:	69fa      	ldr	r2, [r7, #28]
 8018e5a:	4613      	mov	r3, r2
 8018e5c:	005b      	lsls	r3, r3, #1
 8018e5e:	4413      	add	r3, r2
 8018e60:	00db      	lsls	r3, r3, #3
 8018e62:	440b      	add	r3, r1
 8018e64:	3328      	adds	r3, #40	; 0x28
 8018e66:	2200      	movs	r2, #0
 8018e68:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8018e6a:	6939      	ldr	r1, [r7, #16]
 8018e6c:	69fa      	ldr	r2, [r7, #28]
 8018e6e:	4613      	mov	r3, r2
 8018e70:	005b      	lsls	r3, r3, #1
 8018e72:	4413      	add	r3, r2
 8018e74:	00db      	lsls	r3, r3, #3
 8018e76:	440b      	add	r3, r1
 8018e78:	3324      	adds	r3, #36	; 0x24
 8018e7a:	2200      	movs	r2, #0
 8018e7c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8018e7e:	6939      	ldr	r1, [r7, #16]
 8018e80:	69fa      	ldr	r2, [r7, #28]
 8018e82:	4613      	mov	r3, r2
 8018e84:	005b      	lsls	r3, r3, #1
 8018e86:	4413      	add	r3, r2
 8018e88:	00db      	lsls	r3, r3, #3
 8018e8a:	440b      	add	r3, r1
 8018e8c:	332c      	adds	r3, #44	; 0x2c
 8018e8e:	683a      	ldr	r2, [r7, #0]
 8018e90:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8018e92:	f3bf 8f5f 	dmb	sy
 8018e96:	e002      	b.n	8018e9e <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8018e98:	f04f 33ff 	mov.w	r3, #4294967295
 8018e9c:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8018e9e:	697b      	ldr	r3, [r7, #20]
 8018ea0:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8018ea4:	69fb      	ldr	r3, [r7, #28]
}
 8018ea6:	4618      	mov	r0, r3
 8018ea8:	3720      	adds	r7, #32
 8018eaa:	46bd      	mov	sp, r7
 8018eac:	bd80      	pop	{r7, pc}
 8018eae:	bf00      	nop
 8018eb0:	2001e968 	.word	0x2001e968

08018eb4 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8018eb4:	b580      	push	{r7, lr}
 8018eb6:	b08a      	sub	sp, #40	; 0x28
 8018eb8:	af00      	add	r7, sp, #0
 8018eba:	60f8      	str	r0, [r7, #12]
 8018ebc:	60b9      	str	r1, [r7, #8]
 8018ebe:	607a      	str	r2, [r7, #4]
 8018ec0:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8018ec2:	4b21      	ldr	r3, [pc, #132]	; (8018f48 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8018ec4:	623b      	str	r3, [r7, #32]
 8018ec6:	6a3b      	ldr	r3, [r7, #32]
 8018ec8:	781b      	ldrb	r3, [r3, #0]
 8018eca:	b2db      	uxtb	r3, r3
 8018ecc:	2b00      	cmp	r3, #0
 8018ece:	d101      	bne.n	8018ed4 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8018ed0:	f7ff fe8e 	bl	8018bf0 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8018ed4:	4b1c      	ldr	r3, [pc, #112]	; (8018f48 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8018ed6:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8018ed8:	68fb      	ldr	r3, [r7, #12]
 8018eda:	2b02      	cmp	r3, #2
 8018edc:	d82c      	bhi.n	8018f38 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8018ede:	f3ef 8311 	mrs	r3, BASEPRI
 8018ee2:	f04f 0120 	mov.w	r1, #32
 8018ee6:	f381 8811 	msr	BASEPRI, r1
 8018eea:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8018eec:	68fa      	ldr	r2, [r7, #12]
 8018eee:	4613      	mov	r3, r2
 8018ef0:	005b      	lsls	r3, r3, #1
 8018ef2:	4413      	add	r3, r2
 8018ef4:	00db      	lsls	r3, r3, #3
 8018ef6:	3360      	adds	r3, #96	; 0x60
 8018ef8:	69fa      	ldr	r2, [r7, #28]
 8018efa:	4413      	add	r3, r2
 8018efc:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8018efe:	68fb      	ldr	r3, [r7, #12]
 8018f00:	2b00      	cmp	r3, #0
 8018f02:	d00e      	beq.n	8018f22 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8018f04:	697b      	ldr	r3, [r7, #20]
 8018f06:	68ba      	ldr	r2, [r7, #8]
 8018f08:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8018f0a:	697b      	ldr	r3, [r7, #20]
 8018f0c:	687a      	ldr	r2, [r7, #4]
 8018f0e:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8018f10:	697b      	ldr	r3, [r7, #20]
 8018f12:	683a      	ldr	r2, [r7, #0]
 8018f14:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8018f16:	697b      	ldr	r3, [r7, #20]
 8018f18:	2200      	movs	r2, #0
 8018f1a:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8018f1c:	697b      	ldr	r3, [r7, #20]
 8018f1e:	2200      	movs	r2, #0
 8018f20:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8018f22:	697b      	ldr	r3, [r7, #20]
 8018f24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018f26:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8018f28:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8018f2c:	69bb      	ldr	r3, [r7, #24]
 8018f2e:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8018f32:	2300      	movs	r3, #0
 8018f34:	627b      	str	r3, [r7, #36]	; 0x24
 8018f36:	e002      	b.n	8018f3e <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8018f38:	f04f 33ff 	mov.w	r3, #4294967295
 8018f3c:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8018f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8018f40:	4618      	mov	r0, r3
 8018f42:	3728      	adds	r7, #40	; 0x28
 8018f44:	46bd      	mov	sp, r7
 8018f46:	bd80      	pop	{r7, pc}
 8018f48:	2001e968 	.word	0x2001e968

08018f4c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8018f4c:	b480      	push	{r7}
 8018f4e:	b087      	sub	sp, #28
 8018f50:	af00      	add	r7, sp, #0
 8018f52:	60f8      	str	r0, [r7, #12]
 8018f54:	60b9      	str	r1, [r7, #8]
 8018f56:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8018f58:	2300      	movs	r3, #0
 8018f5a:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 8018f5c:	68bb      	ldr	r3, [r7, #8]
 8018f5e:	2b00      	cmp	r3, #0
 8018f60:	d00f      	beq.n	8018f82 <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 8018f62:	e002      	b.n	8018f6a <_EncodeStr+0x1e>
      Len++;
 8018f64:	693b      	ldr	r3, [r7, #16]
 8018f66:	3301      	adds	r3, #1
 8018f68:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 8018f6a:	68ba      	ldr	r2, [r7, #8]
 8018f6c:	693b      	ldr	r3, [r7, #16]
 8018f6e:	4413      	add	r3, r2
 8018f70:	781b      	ldrb	r3, [r3, #0]
 8018f72:	2b00      	cmp	r3, #0
 8018f74:	d1f6      	bne.n	8018f64 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 8018f76:	693a      	ldr	r2, [r7, #16]
 8018f78:	687b      	ldr	r3, [r7, #4]
 8018f7a:	429a      	cmp	r2, r3
 8018f7c:	d901      	bls.n	8018f82 <_EncodeStr+0x36>
      Len = Limit;
 8018f7e:	687b      	ldr	r3, [r7, #4]
 8018f80:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8018f82:	693b      	ldr	r3, [r7, #16]
 8018f84:	2bfe      	cmp	r3, #254	; 0xfe
 8018f86:	d806      	bhi.n	8018f96 <_EncodeStr+0x4a>
    *pPayload++ = Len; 
 8018f88:	68fb      	ldr	r3, [r7, #12]
 8018f8a:	1c5a      	adds	r2, r3, #1
 8018f8c:	60fa      	str	r2, [r7, #12]
 8018f8e:	693a      	ldr	r2, [r7, #16]
 8018f90:	b2d2      	uxtb	r2, r2
 8018f92:	701a      	strb	r2, [r3, #0]
 8018f94:	e011      	b.n	8018fba <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 8018f96:	68fb      	ldr	r3, [r7, #12]
 8018f98:	1c5a      	adds	r2, r3, #1
 8018f9a:	60fa      	str	r2, [r7, #12]
 8018f9c:	22ff      	movs	r2, #255	; 0xff
 8018f9e:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8018fa0:	68fb      	ldr	r3, [r7, #12]
 8018fa2:	1c5a      	adds	r2, r3, #1
 8018fa4:	60fa      	str	r2, [r7, #12]
 8018fa6:	693a      	ldr	r2, [r7, #16]
 8018fa8:	b2d2      	uxtb	r2, r2
 8018faa:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8018fac:	693b      	ldr	r3, [r7, #16]
 8018fae:	0a19      	lsrs	r1, r3, #8
 8018fb0:	68fb      	ldr	r3, [r7, #12]
 8018fb2:	1c5a      	adds	r2, r3, #1
 8018fb4:	60fa      	str	r2, [r7, #12]
 8018fb6:	b2ca      	uxtb	r2, r1
 8018fb8:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8018fba:	2300      	movs	r3, #0
 8018fbc:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8018fbe:	e00a      	b.n	8018fd6 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 8018fc0:	68ba      	ldr	r2, [r7, #8]
 8018fc2:	1c53      	adds	r3, r2, #1
 8018fc4:	60bb      	str	r3, [r7, #8]
 8018fc6:	68fb      	ldr	r3, [r7, #12]
 8018fc8:	1c59      	adds	r1, r3, #1
 8018fca:	60f9      	str	r1, [r7, #12]
 8018fcc:	7812      	ldrb	r2, [r2, #0]
 8018fce:	701a      	strb	r2, [r3, #0]
    n++;
 8018fd0:	697b      	ldr	r3, [r7, #20]
 8018fd2:	3301      	adds	r3, #1
 8018fd4:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8018fd6:	697a      	ldr	r2, [r7, #20]
 8018fd8:	693b      	ldr	r3, [r7, #16]
 8018fda:	429a      	cmp	r2, r3
 8018fdc:	d3f0      	bcc.n	8018fc0 <_EncodeStr+0x74>
  }
  return pPayload;
 8018fde:	68fb      	ldr	r3, [r7, #12]
}
 8018fe0:	4618      	mov	r0, r3
 8018fe2:	371c      	adds	r7, #28
 8018fe4:	46bd      	mov	sp, r7
 8018fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018fea:	4770      	bx	lr

08018fec <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8018fec:	b480      	push	{r7}
 8018fee:	b083      	sub	sp, #12
 8018ff0:	af00      	add	r7, sp, #0
 8018ff2:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8018ff4:	687b      	ldr	r3, [r7, #4]
 8018ff6:	3304      	adds	r3, #4
}
 8018ff8:	4618      	mov	r0, r3
 8018ffa:	370c      	adds	r7, #12
 8018ffc:	46bd      	mov	sp, r7
 8018ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019002:	4770      	bx	lr

08019004 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8019004:	b580      	push	{r7, lr}
 8019006:	b082      	sub	sp, #8
 8019008:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 801900a:	4b36      	ldr	r3, [pc, #216]	; (80190e4 <_HandleIncomingPacket+0xe0>)
 801900c:	7e1b      	ldrb	r3, [r3, #24]
 801900e:	4618      	mov	r0, r3
 8019010:	1cfb      	adds	r3, r7, #3
 8019012:	2201      	movs	r2, #1
 8019014:	4619      	mov	r1, r3
 8019016:	f7ff fe43 	bl	8018ca0 <SEGGER_RTT_ReadNoLock>
 801901a:	4603      	mov	r3, r0
 801901c:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 801901e:	687b      	ldr	r3, [r7, #4]
 8019020:	2b00      	cmp	r3, #0
 8019022:	dd54      	ble.n	80190ce <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8019024:	78fb      	ldrb	r3, [r7, #3]
 8019026:	2b80      	cmp	r3, #128	; 0x80
 8019028:	d032      	beq.n	8019090 <_HandleIncomingPacket+0x8c>
 801902a:	2b80      	cmp	r3, #128	; 0x80
 801902c:	dc42      	bgt.n	80190b4 <_HandleIncomingPacket+0xb0>
 801902e:	2b07      	cmp	r3, #7
 8019030:	dc16      	bgt.n	8019060 <_HandleIncomingPacket+0x5c>
 8019032:	2b00      	cmp	r3, #0
 8019034:	dd3e      	ble.n	80190b4 <_HandleIncomingPacket+0xb0>
 8019036:	3b01      	subs	r3, #1
 8019038:	2b06      	cmp	r3, #6
 801903a:	d83b      	bhi.n	80190b4 <_HandleIncomingPacket+0xb0>
 801903c:	a201      	add	r2, pc, #4	; (adr r2, 8019044 <_HandleIncomingPacket+0x40>)
 801903e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019042:	bf00      	nop
 8019044:	08019067 	.word	0x08019067
 8019048:	0801906d 	.word	0x0801906d
 801904c:	08019073 	.word	0x08019073
 8019050:	08019079 	.word	0x08019079
 8019054:	0801907f 	.word	0x0801907f
 8019058:	08019085 	.word	0x08019085
 801905c:	0801908b 	.word	0x0801908b
 8019060:	2b7f      	cmp	r3, #127	; 0x7f
 8019062:	d036      	beq.n	80190d2 <_HandleIncomingPacket+0xce>
 8019064:	e026      	b.n	80190b4 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8019066:	f000 fba7 	bl	80197b8 <SEGGER_SYSVIEW_Start>
      break;
 801906a:	e037      	b.n	80190dc <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 801906c:	f000 fc5e 	bl	801992c <SEGGER_SYSVIEW_Stop>
      break;
 8019070:	e034      	b.n	80190dc <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8019072:	f000 fe37 	bl	8019ce4 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8019076:	e031      	b.n	80190dc <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8019078:	f000 fdfc 	bl	8019c74 <SEGGER_SYSVIEW_SendTaskList>
      break;
 801907c:	e02e      	b.n	80190dc <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 801907e:	f000 fc7b 	bl	8019978 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8019082:	e02b      	b.n	80190dc <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8019084:	f000 fff0 	bl	801a068 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8019088:	e028      	b.n	80190dc <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 801908a:	f000 ffcf 	bl	801a02c <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 801908e:	e025      	b.n	80190dc <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8019090:	4b14      	ldr	r3, [pc, #80]	; (80190e4 <_HandleIncomingPacket+0xe0>)
 8019092:	7e1b      	ldrb	r3, [r3, #24]
 8019094:	4618      	mov	r0, r3
 8019096:	1cfb      	adds	r3, r7, #3
 8019098:	2201      	movs	r2, #1
 801909a:	4619      	mov	r1, r3
 801909c:	f7ff fe00 	bl	8018ca0 <SEGGER_RTT_ReadNoLock>
 80190a0:	4603      	mov	r3, r0
 80190a2:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 80190a4:	687b      	ldr	r3, [r7, #4]
 80190a6:	2b00      	cmp	r3, #0
 80190a8:	dd15      	ble.n	80190d6 <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80190aa:	78fb      	ldrb	r3, [r7, #3]
 80190ac:	4618      	mov	r0, r3
 80190ae:	f000 ff3d 	bl	8019f2c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80190b2:	e010      	b.n	80190d6 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80190b4:	78fb      	ldrb	r3, [r7, #3]
 80190b6:	b25b      	sxtb	r3, r3
 80190b8:	2b00      	cmp	r3, #0
 80190ba:	da0e      	bge.n	80190da <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80190bc:	4b09      	ldr	r3, [pc, #36]	; (80190e4 <_HandleIncomingPacket+0xe0>)
 80190be:	7e1b      	ldrb	r3, [r3, #24]
 80190c0:	4618      	mov	r0, r3
 80190c2:	1cfb      	adds	r3, r7, #3
 80190c4:	2201      	movs	r2, #1
 80190c6:	4619      	mov	r1, r3
 80190c8:	f7ff fdea 	bl	8018ca0 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80190cc:	e005      	b.n	80190da <_HandleIncomingPacket+0xd6>
    }
  }
 80190ce:	bf00      	nop
 80190d0:	e004      	b.n	80190dc <_HandleIncomingPacket+0xd8>
      break;
 80190d2:	bf00      	nop
 80190d4:	e002      	b.n	80190dc <_HandleIncomingPacket+0xd8>
      break;
 80190d6:	bf00      	nop
 80190d8:	e000      	b.n	80190dc <_HandleIncomingPacket+0xd8>
      break;
 80190da:	bf00      	nop
}
 80190dc:	bf00      	nop
 80190de:	3708      	adds	r7, #8
 80190e0:	46bd      	mov	sp, r7
 80190e2:	bd80      	pop	{r7, pc}
 80190e4:	2001b450 	.word	0x2001b450

080190e8 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80190e8:	b580      	push	{r7, lr}
 80190ea:	b08c      	sub	sp, #48	; 0x30
 80190ec:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80190ee:	2301      	movs	r3, #1
 80190f0:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80190f2:	1d3b      	adds	r3, r7, #4
 80190f4:	3301      	adds	r3, #1
 80190f6:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80190f8:	69fb      	ldr	r3, [r7, #28]
 80190fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80190fc:	4b31      	ldr	r3, [pc, #196]	; (80191c4 <_TrySendOverflowPacket+0xdc>)
 80190fe:	695b      	ldr	r3, [r3, #20]
 8019100:	62bb      	str	r3, [r7, #40]	; 0x28
 8019102:	e00b      	b.n	801911c <_TrySendOverflowPacket+0x34>
 8019104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019106:	b2da      	uxtb	r2, r3
 8019108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801910a:	1c59      	adds	r1, r3, #1
 801910c:	62f9      	str	r1, [r7, #44]	; 0x2c
 801910e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8019112:	b2d2      	uxtb	r2, r2
 8019114:	701a      	strb	r2, [r3, #0]
 8019116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019118:	09db      	lsrs	r3, r3, #7
 801911a:	62bb      	str	r3, [r7, #40]	; 0x28
 801911c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801911e:	2b7f      	cmp	r3, #127	; 0x7f
 8019120:	d8f0      	bhi.n	8019104 <_TrySendOverflowPacket+0x1c>
 8019122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019124:	1c5a      	adds	r2, r3, #1
 8019126:	62fa      	str	r2, [r7, #44]	; 0x2c
 8019128:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801912a:	b2d2      	uxtb	r2, r2
 801912c:	701a      	strb	r2, [r3, #0]
 801912e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019130:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8019132:	4b25      	ldr	r3, [pc, #148]	; (80191c8 <_TrySendOverflowPacket+0xe0>)
 8019134:	681b      	ldr	r3, [r3, #0]
 8019136:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8019138:	4b22      	ldr	r3, [pc, #136]	; (80191c4 <_TrySendOverflowPacket+0xdc>)
 801913a:	68db      	ldr	r3, [r3, #12]
 801913c:	69ba      	ldr	r2, [r7, #24]
 801913e:	1ad3      	subs	r3, r2, r3
 8019140:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8019142:	69fb      	ldr	r3, [r7, #28]
 8019144:	627b      	str	r3, [r7, #36]	; 0x24
 8019146:	697b      	ldr	r3, [r7, #20]
 8019148:	623b      	str	r3, [r7, #32]
 801914a:	e00b      	b.n	8019164 <_TrySendOverflowPacket+0x7c>
 801914c:	6a3b      	ldr	r3, [r7, #32]
 801914e:	b2da      	uxtb	r2, r3
 8019150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019152:	1c59      	adds	r1, r3, #1
 8019154:	6279      	str	r1, [r7, #36]	; 0x24
 8019156:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801915a:	b2d2      	uxtb	r2, r2
 801915c:	701a      	strb	r2, [r3, #0]
 801915e:	6a3b      	ldr	r3, [r7, #32]
 8019160:	09db      	lsrs	r3, r3, #7
 8019162:	623b      	str	r3, [r7, #32]
 8019164:	6a3b      	ldr	r3, [r7, #32]
 8019166:	2b7f      	cmp	r3, #127	; 0x7f
 8019168:	d8f0      	bhi.n	801914c <_TrySendOverflowPacket+0x64>
 801916a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801916c:	1c5a      	adds	r2, r3, #1
 801916e:	627a      	str	r2, [r7, #36]	; 0x24
 8019170:	6a3a      	ldr	r2, [r7, #32]
 8019172:	b2d2      	uxtb	r2, r2
 8019174:	701a      	strb	r2, [r3, #0]
 8019176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019178:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 801917a:	4b12      	ldr	r3, [pc, #72]	; (80191c4 <_TrySendOverflowPacket+0xdc>)
 801917c:	785b      	ldrb	r3, [r3, #1]
 801917e:	4618      	mov	r0, r3
 8019180:	1d3b      	adds	r3, r7, #4
 8019182:	69fa      	ldr	r2, [r7, #28]
 8019184:	1ad3      	subs	r3, r2, r3
 8019186:	461a      	mov	r2, r3
 8019188:	1d3b      	adds	r3, r7, #4
 801918a:	4619      	mov	r1, r3
 801918c:	f7e7 f820 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8019190:	4603      	mov	r3, r0
 8019192:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8019194:	693b      	ldr	r3, [r7, #16]
 8019196:	2b00      	cmp	r3, #0
 8019198:	d009      	beq.n	80191ae <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 801919a:	4a0a      	ldr	r2, [pc, #40]	; (80191c4 <_TrySendOverflowPacket+0xdc>)
 801919c:	69bb      	ldr	r3, [r7, #24]
 801919e:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80191a0:	4b08      	ldr	r3, [pc, #32]	; (80191c4 <_TrySendOverflowPacket+0xdc>)
 80191a2:	781b      	ldrb	r3, [r3, #0]
 80191a4:	3b01      	subs	r3, #1
 80191a6:	b2da      	uxtb	r2, r3
 80191a8:	4b06      	ldr	r3, [pc, #24]	; (80191c4 <_TrySendOverflowPacket+0xdc>)
 80191aa:	701a      	strb	r2, [r3, #0]
 80191ac:	e004      	b.n	80191b8 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80191ae:	4b05      	ldr	r3, [pc, #20]	; (80191c4 <_TrySendOverflowPacket+0xdc>)
 80191b0:	695b      	ldr	r3, [r3, #20]
 80191b2:	3301      	adds	r3, #1
 80191b4:	4a03      	ldr	r2, [pc, #12]	; (80191c4 <_TrySendOverflowPacket+0xdc>)
 80191b6:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80191b8:	693b      	ldr	r3, [r7, #16]
}
 80191ba:	4618      	mov	r0, r3
 80191bc:	3730      	adds	r7, #48	; 0x30
 80191be:	46bd      	mov	sp, r7
 80191c0:	bd80      	pop	{r7, pc}
 80191c2:	bf00      	nop
 80191c4:	2001b450 	.word	0x2001b450
 80191c8:	e0001004 	.word	0xe0001004

080191cc <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80191cc:	b580      	push	{r7, lr}
 80191ce:	b08a      	sub	sp, #40	; 0x28
 80191d0:	af00      	add	r7, sp, #0
 80191d2:	60f8      	str	r0, [r7, #12]
 80191d4:	60b9      	str	r1, [r7, #8]
 80191d6:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80191d8:	4b6c      	ldr	r3, [pc, #432]	; (801938c <_SendPacket+0x1c0>)
 80191da:	781b      	ldrb	r3, [r3, #0]
 80191dc:	2b01      	cmp	r3, #1
 80191de:	d010      	beq.n	8019202 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80191e0:	4b6a      	ldr	r3, [pc, #424]	; (801938c <_SendPacket+0x1c0>)
 80191e2:	781b      	ldrb	r3, [r3, #0]
 80191e4:	2b00      	cmp	r3, #0
 80191e6:	f000 80a3 	beq.w	8019330 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80191ea:	4b68      	ldr	r3, [pc, #416]	; (801938c <_SendPacket+0x1c0>)
 80191ec:	781b      	ldrb	r3, [r3, #0]
 80191ee:	2b02      	cmp	r3, #2
 80191f0:	d109      	bne.n	8019206 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80191f2:	f7ff ff79 	bl	80190e8 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80191f6:	4b65      	ldr	r3, [pc, #404]	; (801938c <_SendPacket+0x1c0>)
 80191f8:	781b      	ldrb	r3, [r3, #0]
 80191fa:	2b01      	cmp	r3, #1
 80191fc:	f040 809a 	bne.w	8019334 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 8019200:	e001      	b.n	8019206 <_SendPacket+0x3a>
    goto Send;
 8019202:	bf00      	nop
 8019204:	e000      	b.n	8019208 <_SendPacket+0x3c>
Send:
 8019206:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8019208:	687b      	ldr	r3, [r7, #4]
 801920a:	2b1f      	cmp	r3, #31
 801920c:	d809      	bhi.n	8019222 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 801920e:	4b5f      	ldr	r3, [pc, #380]	; (801938c <_SendPacket+0x1c0>)
 8019210:	69da      	ldr	r2, [r3, #28]
 8019212:	687b      	ldr	r3, [r7, #4]
 8019214:	fa22 f303 	lsr.w	r3, r2, r3
 8019218:	f003 0301 	and.w	r3, r3, #1
 801921c:	2b00      	cmp	r3, #0
 801921e:	f040 808b 	bne.w	8019338 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8019222:	687b      	ldr	r3, [r7, #4]
 8019224:	2b17      	cmp	r3, #23
 8019226:	d807      	bhi.n	8019238 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8019228:	68fb      	ldr	r3, [r7, #12]
 801922a:	3b01      	subs	r3, #1
 801922c:	60fb      	str	r3, [r7, #12]
 801922e:	687b      	ldr	r3, [r7, #4]
 8019230:	b2da      	uxtb	r2, r3
 8019232:	68fb      	ldr	r3, [r7, #12]
 8019234:	701a      	strb	r2, [r3, #0]
 8019236:	e03d      	b.n	80192b4 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8019238:	68ba      	ldr	r2, [r7, #8]
 801923a:	68fb      	ldr	r3, [r7, #12]
 801923c:	1ad3      	subs	r3, r2, r3
 801923e:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8019240:	69fb      	ldr	r3, [r7, #28]
 8019242:	2b7f      	cmp	r3, #127	; 0x7f
 8019244:	d912      	bls.n	801926c <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8019246:	69fb      	ldr	r3, [r7, #28]
 8019248:	09da      	lsrs	r2, r3, #7
 801924a:	68fb      	ldr	r3, [r7, #12]
 801924c:	3b01      	subs	r3, #1
 801924e:	60fb      	str	r3, [r7, #12]
 8019250:	b2d2      	uxtb	r2, r2
 8019252:	68fb      	ldr	r3, [r7, #12]
 8019254:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8019256:	69fb      	ldr	r3, [r7, #28]
 8019258:	b2db      	uxtb	r3, r3
 801925a:	68fa      	ldr	r2, [r7, #12]
 801925c:	3a01      	subs	r2, #1
 801925e:	60fa      	str	r2, [r7, #12]
 8019260:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8019264:	b2da      	uxtb	r2, r3
 8019266:	68fb      	ldr	r3, [r7, #12]
 8019268:	701a      	strb	r2, [r3, #0]
 801926a:	e006      	b.n	801927a <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 801926c:	68fb      	ldr	r3, [r7, #12]
 801926e:	3b01      	subs	r3, #1
 8019270:	60fb      	str	r3, [r7, #12]
 8019272:	69fb      	ldr	r3, [r7, #28]
 8019274:	b2da      	uxtb	r2, r3
 8019276:	68fb      	ldr	r3, [r7, #12]
 8019278:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 801927a:	687b      	ldr	r3, [r7, #4]
 801927c:	2b7f      	cmp	r3, #127	; 0x7f
 801927e:	d912      	bls.n	80192a6 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8019280:	687b      	ldr	r3, [r7, #4]
 8019282:	09da      	lsrs	r2, r3, #7
 8019284:	68fb      	ldr	r3, [r7, #12]
 8019286:	3b01      	subs	r3, #1
 8019288:	60fb      	str	r3, [r7, #12]
 801928a:	b2d2      	uxtb	r2, r2
 801928c:	68fb      	ldr	r3, [r7, #12]
 801928e:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8019290:	687b      	ldr	r3, [r7, #4]
 8019292:	b2db      	uxtb	r3, r3
 8019294:	68fa      	ldr	r2, [r7, #12]
 8019296:	3a01      	subs	r2, #1
 8019298:	60fa      	str	r2, [r7, #12]
 801929a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801929e:	b2da      	uxtb	r2, r3
 80192a0:	68fb      	ldr	r3, [r7, #12]
 80192a2:	701a      	strb	r2, [r3, #0]
 80192a4:	e006      	b.n	80192b4 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 80192a6:	68fb      	ldr	r3, [r7, #12]
 80192a8:	3b01      	subs	r3, #1
 80192aa:	60fb      	str	r3, [r7, #12]
 80192ac:	687b      	ldr	r3, [r7, #4]
 80192ae:	b2da      	uxtb	r2, r3
 80192b0:	68fb      	ldr	r3, [r7, #12]
 80192b2:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80192b4:	4b36      	ldr	r3, [pc, #216]	; (8019390 <_SendPacket+0x1c4>)
 80192b6:	681b      	ldr	r3, [r3, #0]
 80192b8:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80192ba:	4b34      	ldr	r3, [pc, #208]	; (801938c <_SendPacket+0x1c0>)
 80192bc:	68db      	ldr	r3, [r3, #12]
 80192be:	69ba      	ldr	r2, [r7, #24]
 80192c0:	1ad3      	subs	r3, r2, r3
 80192c2:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80192c4:	68bb      	ldr	r3, [r7, #8]
 80192c6:	627b      	str	r3, [r7, #36]	; 0x24
 80192c8:	697b      	ldr	r3, [r7, #20]
 80192ca:	623b      	str	r3, [r7, #32]
 80192cc:	e00b      	b.n	80192e6 <_SendPacket+0x11a>
 80192ce:	6a3b      	ldr	r3, [r7, #32]
 80192d0:	b2da      	uxtb	r2, r3
 80192d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80192d4:	1c59      	adds	r1, r3, #1
 80192d6:	6279      	str	r1, [r7, #36]	; 0x24
 80192d8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80192dc:	b2d2      	uxtb	r2, r2
 80192de:	701a      	strb	r2, [r3, #0]
 80192e0:	6a3b      	ldr	r3, [r7, #32]
 80192e2:	09db      	lsrs	r3, r3, #7
 80192e4:	623b      	str	r3, [r7, #32]
 80192e6:	6a3b      	ldr	r3, [r7, #32]
 80192e8:	2b7f      	cmp	r3, #127	; 0x7f
 80192ea:	d8f0      	bhi.n	80192ce <_SendPacket+0x102>
 80192ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80192ee:	1c5a      	adds	r2, r3, #1
 80192f0:	627a      	str	r2, [r7, #36]	; 0x24
 80192f2:	6a3a      	ldr	r2, [r7, #32]
 80192f4:	b2d2      	uxtb	r2, r2
 80192f6:	701a      	strb	r2, [r3, #0]
 80192f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80192fa:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 80192fc:	4b23      	ldr	r3, [pc, #140]	; (801938c <_SendPacket+0x1c0>)
 80192fe:	785b      	ldrb	r3, [r3, #1]
 8019300:	4618      	mov	r0, r3
 8019302:	68ba      	ldr	r2, [r7, #8]
 8019304:	68fb      	ldr	r3, [r7, #12]
 8019306:	1ad3      	subs	r3, r2, r3
 8019308:	461a      	mov	r2, r3
 801930a:	68f9      	ldr	r1, [r7, #12]
 801930c:	f7e6 ff60 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8019310:	4603      	mov	r3, r0
 8019312:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8019314:	693b      	ldr	r3, [r7, #16]
 8019316:	2b00      	cmp	r3, #0
 8019318:	d003      	beq.n	8019322 <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 801931a:	4a1c      	ldr	r2, [pc, #112]	; (801938c <_SendPacket+0x1c0>)
 801931c:	69bb      	ldr	r3, [r7, #24]
 801931e:	60d3      	str	r3, [r2, #12]
 8019320:	e00b      	b.n	801933a <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8019322:	4b1a      	ldr	r3, [pc, #104]	; (801938c <_SendPacket+0x1c0>)
 8019324:	781b      	ldrb	r3, [r3, #0]
 8019326:	3301      	adds	r3, #1
 8019328:	b2da      	uxtb	r2, r3
 801932a:	4b18      	ldr	r3, [pc, #96]	; (801938c <_SendPacket+0x1c0>)
 801932c:	701a      	strb	r2, [r3, #0]
 801932e:	e004      	b.n	801933a <_SendPacket+0x16e>
    goto SendDone;
 8019330:	bf00      	nop
 8019332:	e002      	b.n	801933a <_SendPacket+0x16e>
      goto SendDone;
 8019334:	bf00      	nop
 8019336:	e000      	b.n	801933a <_SendPacket+0x16e>
      goto SendDone;
 8019338:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 801933a:	4b14      	ldr	r3, [pc, #80]	; (801938c <_SendPacket+0x1c0>)
 801933c:	7e1b      	ldrb	r3, [r3, #24]
 801933e:	4619      	mov	r1, r3
 8019340:	4a14      	ldr	r2, [pc, #80]	; (8019394 <_SendPacket+0x1c8>)
 8019342:	460b      	mov	r3, r1
 8019344:	005b      	lsls	r3, r3, #1
 8019346:	440b      	add	r3, r1
 8019348:	00db      	lsls	r3, r3, #3
 801934a:	4413      	add	r3, r2
 801934c:	336c      	adds	r3, #108	; 0x6c
 801934e:	681a      	ldr	r2, [r3, #0]
 8019350:	4b0e      	ldr	r3, [pc, #56]	; (801938c <_SendPacket+0x1c0>)
 8019352:	7e1b      	ldrb	r3, [r3, #24]
 8019354:	4618      	mov	r0, r3
 8019356:	490f      	ldr	r1, [pc, #60]	; (8019394 <_SendPacket+0x1c8>)
 8019358:	4603      	mov	r3, r0
 801935a:	005b      	lsls	r3, r3, #1
 801935c:	4403      	add	r3, r0
 801935e:	00db      	lsls	r3, r3, #3
 8019360:	440b      	add	r3, r1
 8019362:	3370      	adds	r3, #112	; 0x70
 8019364:	681b      	ldr	r3, [r3, #0]
 8019366:	429a      	cmp	r2, r3
 8019368:	d00b      	beq.n	8019382 <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 801936a:	4b08      	ldr	r3, [pc, #32]	; (801938c <_SendPacket+0x1c0>)
 801936c:	789b      	ldrb	r3, [r3, #2]
 801936e:	2b00      	cmp	r3, #0
 8019370:	d107      	bne.n	8019382 <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8019372:	4b06      	ldr	r3, [pc, #24]	; (801938c <_SendPacket+0x1c0>)
 8019374:	2201      	movs	r2, #1
 8019376:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8019378:	f7ff fe44 	bl	8019004 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 801937c:	4b03      	ldr	r3, [pc, #12]	; (801938c <_SendPacket+0x1c0>)
 801937e:	2200      	movs	r2, #0
 8019380:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8019382:	bf00      	nop
 8019384:	3728      	adds	r7, #40	; 0x28
 8019386:	46bd      	mov	sp, r7
 8019388:	bd80      	pop	{r7, pc}
 801938a:	bf00      	nop
 801938c:	2001b450 	.word	0x2001b450
 8019390:	e0001004 	.word	0xe0001004
 8019394:	2001e968 	.word	0x2001e968

08019398 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8019398:	b580      	push	{r7, lr}
 801939a:	b086      	sub	sp, #24
 801939c:	af02      	add	r7, sp, #8
 801939e:	60f8      	str	r0, [r7, #12]
 80193a0:	60b9      	str	r1, [r7, #8]
 80193a2:	607a      	str	r2, [r7, #4]
 80193a4:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80193a6:	2300      	movs	r3, #0
 80193a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80193ac:	4917      	ldr	r1, [pc, #92]	; (801940c <SEGGER_SYSVIEW_Init+0x74>)
 80193ae:	4818      	ldr	r0, [pc, #96]	; (8019410 <SEGGER_SYSVIEW_Init+0x78>)
 80193b0:	f7ff fcfc 	bl	8018dac <SEGGER_RTT_AllocUpBuffer>
 80193b4:	4603      	mov	r3, r0
 80193b6:	b2da      	uxtb	r2, r3
 80193b8:	4b16      	ldr	r3, [pc, #88]	; (8019414 <SEGGER_SYSVIEW_Init+0x7c>)
 80193ba:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80193bc:	4b15      	ldr	r3, [pc, #84]	; (8019414 <SEGGER_SYSVIEW_Init+0x7c>)
 80193be:	785a      	ldrb	r2, [r3, #1]
 80193c0:	4b14      	ldr	r3, [pc, #80]	; (8019414 <SEGGER_SYSVIEW_Init+0x7c>)
 80193c2:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80193c4:	4b13      	ldr	r3, [pc, #76]	; (8019414 <SEGGER_SYSVIEW_Init+0x7c>)
 80193c6:	7e1b      	ldrb	r3, [r3, #24]
 80193c8:	4618      	mov	r0, r3
 80193ca:	2300      	movs	r3, #0
 80193cc:	9300      	str	r3, [sp, #0]
 80193ce:	2308      	movs	r3, #8
 80193d0:	4a11      	ldr	r2, [pc, #68]	; (8019418 <SEGGER_SYSVIEW_Init+0x80>)
 80193d2:	490f      	ldr	r1, [pc, #60]	; (8019410 <SEGGER_SYSVIEW_Init+0x78>)
 80193d4:	f7ff fd6e 	bl	8018eb4 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80193d8:	4b0e      	ldr	r3, [pc, #56]	; (8019414 <SEGGER_SYSVIEW_Init+0x7c>)
 80193da:	2200      	movs	r2, #0
 80193dc:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80193de:	4b0f      	ldr	r3, [pc, #60]	; (801941c <SEGGER_SYSVIEW_Init+0x84>)
 80193e0:	681b      	ldr	r3, [r3, #0]
 80193e2:	4a0c      	ldr	r2, [pc, #48]	; (8019414 <SEGGER_SYSVIEW_Init+0x7c>)
 80193e4:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80193e6:	4a0b      	ldr	r2, [pc, #44]	; (8019414 <SEGGER_SYSVIEW_Init+0x7c>)
 80193e8:	687b      	ldr	r3, [r7, #4]
 80193ea:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80193ec:	4a09      	ldr	r2, [pc, #36]	; (8019414 <SEGGER_SYSVIEW_Init+0x7c>)
 80193ee:	68fb      	ldr	r3, [r7, #12]
 80193f0:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80193f2:	4a08      	ldr	r2, [pc, #32]	; (8019414 <SEGGER_SYSVIEW_Init+0x7c>)
 80193f4:	68bb      	ldr	r3, [r7, #8]
 80193f6:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80193f8:	4a06      	ldr	r2, [pc, #24]	; (8019414 <SEGGER_SYSVIEW_Init+0x7c>)
 80193fa:	683b      	ldr	r3, [r7, #0]
 80193fc:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80193fe:	4b05      	ldr	r3, [pc, #20]	; (8019414 <SEGGER_SYSVIEW_Init+0x7c>)
 8019400:	2200      	movs	r2, #0
 8019402:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8019404:	bf00      	nop
 8019406:	3710      	adds	r7, #16
 8019408:	46bd      	mov	sp, r7
 801940a:	bd80      	pop	{r7, pc}
 801940c:	2001b048 	.word	0x2001b048
 8019410:	0801afa4 	.word	0x0801afa4
 8019414:	2001b450 	.word	0x2001b450
 8019418:	2001b448 	.word	0x2001b448
 801941c:	e0001004 	.word	0xe0001004

08019420 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8019420:	b480      	push	{r7}
 8019422:	b083      	sub	sp, #12
 8019424:	af00      	add	r7, sp, #0
 8019426:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8019428:	4a04      	ldr	r2, [pc, #16]	; (801943c <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 801942a:	687b      	ldr	r3, [r7, #4]
 801942c:	6113      	str	r3, [r2, #16]
}
 801942e:	bf00      	nop
 8019430:	370c      	adds	r7, #12
 8019432:	46bd      	mov	sp, r7
 8019434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019438:	4770      	bx	lr
 801943a:	bf00      	nop
 801943c:	2001b450 	.word	0x2001b450

08019440 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8019440:	b580      	push	{r7, lr}
 8019442:	b084      	sub	sp, #16
 8019444:	af00      	add	r7, sp, #0
 8019446:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8019448:	f3ef 8311 	mrs	r3, BASEPRI
 801944c:	f04f 0120 	mov.w	r1, #32
 8019450:	f381 8811 	msr	BASEPRI, r1
 8019454:	60fb      	str	r3, [r7, #12]
 8019456:	4808      	ldr	r0, [pc, #32]	; (8019478 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8019458:	f7ff fdc8 	bl	8018fec <_PreparePacket>
 801945c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 801945e:	687a      	ldr	r2, [r7, #4]
 8019460:	68b9      	ldr	r1, [r7, #8]
 8019462:	68b8      	ldr	r0, [r7, #8]
 8019464:	f7ff feb2 	bl	80191cc <_SendPacket>
  RECORD_END();
 8019468:	68fb      	ldr	r3, [r7, #12]
 801946a:	f383 8811 	msr	BASEPRI, r3
}
 801946e:	bf00      	nop
 8019470:	3710      	adds	r7, #16
 8019472:	46bd      	mov	sp, r7
 8019474:	bd80      	pop	{r7, pc}
 8019476:	bf00      	nop
 8019478:	2001b480 	.word	0x2001b480

0801947c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 801947c:	b580      	push	{r7, lr}
 801947e:	b088      	sub	sp, #32
 8019480:	af00      	add	r7, sp, #0
 8019482:	6078      	str	r0, [r7, #4]
 8019484:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8019486:	f3ef 8311 	mrs	r3, BASEPRI
 801948a:	f04f 0120 	mov.w	r1, #32
 801948e:	f381 8811 	msr	BASEPRI, r1
 8019492:	617b      	str	r3, [r7, #20]
 8019494:	4816      	ldr	r0, [pc, #88]	; (80194f0 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8019496:	f7ff fda9 	bl	8018fec <_PreparePacket>
 801949a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 801949c:	693b      	ldr	r3, [r7, #16]
 801949e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80194a0:	68fb      	ldr	r3, [r7, #12]
 80194a2:	61fb      	str	r3, [r7, #28]
 80194a4:	683b      	ldr	r3, [r7, #0]
 80194a6:	61bb      	str	r3, [r7, #24]
 80194a8:	e00b      	b.n	80194c2 <SEGGER_SYSVIEW_RecordU32+0x46>
 80194aa:	69bb      	ldr	r3, [r7, #24]
 80194ac:	b2da      	uxtb	r2, r3
 80194ae:	69fb      	ldr	r3, [r7, #28]
 80194b0:	1c59      	adds	r1, r3, #1
 80194b2:	61f9      	str	r1, [r7, #28]
 80194b4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80194b8:	b2d2      	uxtb	r2, r2
 80194ba:	701a      	strb	r2, [r3, #0]
 80194bc:	69bb      	ldr	r3, [r7, #24]
 80194be:	09db      	lsrs	r3, r3, #7
 80194c0:	61bb      	str	r3, [r7, #24]
 80194c2:	69bb      	ldr	r3, [r7, #24]
 80194c4:	2b7f      	cmp	r3, #127	; 0x7f
 80194c6:	d8f0      	bhi.n	80194aa <SEGGER_SYSVIEW_RecordU32+0x2e>
 80194c8:	69fb      	ldr	r3, [r7, #28]
 80194ca:	1c5a      	adds	r2, r3, #1
 80194cc:	61fa      	str	r2, [r7, #28]
 80194ce:	69ba      	ldr	r2, [r7, #24]
 80194d0:	b2d2      	uxtb	r2, r2
 80194d2:	701a      	strb	r2, [r3, #0]
 80194d4:	69fb      	ldr	r3, [r7, #28]
 80194d6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80194d8:	687a      	ldr	r2, [r7, #4]
 80194da:	68f9      	ldr	r1, [r7, #12]
 80194dc:	6938      	ldr	r0, [r7, #16]
 80194de:	f7ff fe75 	bl	80191cc <_SendPacket>
  RECORD_END();
 80194e2:	697b      	ldr	r3, [r7, #20]
 80194e4:	f383 8811 	msr	BASEPRI, r3
}
 80194e8:	bf00      	nop
 80194ea:	3720      	adds	r7, #32
 80194ec:	46bd      	mov	sp, r7
 80194ee:	bd80      	pop	{r7, pc}
 80194f0:	2001b480 	.word	0x2001b480

080194f4 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80194f4:	b580      	push	{r7, lr}
 80194f6:	b08c      	sub	sp, #48	; 0x30
 80194f8:	af00      	add	r7, sp, #0
 80194fa:	60f8      	str	r0, [r7, #12]
 80194fc:	60b9      	str	r1, [r7, #8]
 80194fe:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8019500:	f3ef 8311 	mrs	r3, BASEPRI
 8019504:	f04f 0120 	mov.w	r1, #32
 8019508:	f381 8811 	msr	BASEPRI, r1
 801950c:	61fb      	str	r3, [r7, #28]
 801950e:	4825      	ldr	r0, [pc, #148]	; (80195a4 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8019510:	f7ff fd6c 	bl	8018fec <_PreparePacket>
 8019514:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8019516:	69bb      	ldr	r3, [r7, #24]
 8019518:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 801951a:	697b      	ldr	r3, [r7, #20]
 801951c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801951e:	68bb      	ldr	r3, [r7, #8]
 8019520:	62bb      	str	r3, [r7, #40]	; 0x28
 8019522:	e00b      	b.n	801953c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8019524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019526:	b2da      	uxtb	r2, r3
 8019528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801952a:	1c59      	adds	r1, r3, #1
 801952c:	62f9      	str	r1, [r7, #44]	; 0x2c
 801952e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8019532:	b2d2      	uxtb	r2, r2
 8019534:	701a      	strb	r2, [r3, #0]
 8019536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019538:	09db      	lsrs	r3, r3, #7
 801953a:	62bb      	str	r3, [r7, #40]	; 0x28
 801953c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801953e:	2b7f      	cmp	r3, #127	; 0x7f
 8019540:	d8f0      	bhi.n	8019524 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8019542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019544:	1c5a      	adds	r2, r3, #1
 8019546:	62fa      	str	r2, [r7, #44]	; 0x2c
 8019548:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801954a:	b2d2      	uxtb	r2, r2
 801954c:	701a      	strb	r2, [r3, #0]
 801954e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019550:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8019552:	697b      	ldr	r3, [r7, #20]
 8019554:	627b      	str	r3, [r7, #36]	; 0x24
 8019556:	687b      	ldr	r3, [r7, #4]
 8019558:	623b      	str	r3, [r7, #32]
 801955a:	e00b      	b.n	8019574 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 801955c:	6a3b      	ldr	r3, [r7, #32]
 801955e:	b2da      	uxtb	r2, r3
 8019560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019562:	1c59      	adds	r1, r3, #1
 8019564:	6279      	str	r1, [r7, #36]	; 0x24
 8019566:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801956a:	b2d2      	uxtb	r2, r2
 801956c:	701a      	strb	r2, [r3, #0]
 801956e:	6a3b      	ldr	r3, [r7, #32]
 8019570:	09db      	lsrs	r3, r3, #7
 8019572:	623b      	str	r3, [r7, #32]
 8019574:	6a3b      	ldr	r3, [r7, #32]
 8019576:	2b7f      	cmp	r3, #127	; 0x7f
 8019578:	d8f0      	bhi.n	801955c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 801957a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801957c:	1c5a      	adds	r2, r3, #1
 801957e:	627a      	str	r2, [r7, #36]	; 0x24
 8019580:	6a3a      	ldr	r2, [r7, #32]
 8019582:	b2d2      	uxtb	r2, r2
 8019584:	701a      	strb	r2, [r3, #0]
 8019586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019588:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 801958a:	68fa      	ldr	r2, [r7, #12]
 801958c:	6979      	ldr	r1, [r7, #20]
 801958e:	69b8      	ldr	r0, [r7, #24]
 8019590:	f7ff fe1c 	bl	80191cc <_SendPacket>
  RECORD_END();
 8019594:	69fb      	ldr	r3, [r7, #28]
 8019596:	f383 8811 	msr	BASEPRI, r3
}
 801959a:	bf00      	nop
 801959c:	3730      	adds	r7, #48	; 0x30
 801959e:	46bd      	mov	sp, r7
 80195a0:	bd80      	pop	{r7, pc}
 80195a2:	bf00      	nop
 80195a4:	2001b480 	.word	0x2001b480

080195a8 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 80195a8:	b580      	push	{r7, lr}
 80195aa:	b08e      	sub	sp, #56	; 0x38
 80195ac:	af00      	add	r7, sp, #0
 80195ae:	60f8      	str	r0, [r7, #12]
 80195b0:	60b9      	str	r1, [r7, #8]
 80195b2:	607a      	str	r2, [r7, #4]
 80195b4:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 80195b6:	f3ef 8311 	mrs	r3, BASEPRI
 80195ba:	f04f 0120 	mov.w	r1, #32
 80195be:	f381 8811 	msr	BASEPRI, r1
 80195c2:	61fb      	str	r3, [r7, #28]
 80195c4:	4832      	ldr	r0, [pc, #200]	; (8019690 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 80195c6:	f7ff fd11 	bl	8018fec <_PreparePacket>
 80195ca:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80195cc:	69bb      	ldr	r3, [r7, #24]
 80195ce:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80195d0:	697b      	ldr	r3, [r7, #20]
 80195d2:	637b      	str	r3, [r7, #52]	; 0x34
 80195d4:	68bb      	ldr	r3, [r7, #8]
 80195d6:	633b      	str	r3, [r7, #48]	; 0x30
 80195d8:	e00b      	b.n	80195f2 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 80195da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80195dc:	b2da      	uxtb	r2, r3
 80195de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80195e0:	1c59      	adds	r1, r3, #1
 80195e2:	6379      	str	r1, [r7, #52]	; 0x34
 80195e4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80195e8:	b2d2      	uxtb	r2, r2
 80195ea:	701a      	strb	r2, [r3, #0]
 80195ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80195ee:	09db      	lsrs	r3, r3, #7
 80195f0:	633b      	str	r3, [r7, #48]	; 0x30
 80195f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80195f4:	2b7f      	cmp	r3, #127	; 0x7f
 80195f6:	d8f0      	bhi.n	80195da <SEGGER_SYSVIEW_RecordU32x3+0x32>
 80195f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80195fa:	1c5a      	adds	r2, r3, #1
 80195fc:	637a      	str	r2, [r7, #52]	; 0x34
 80195fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019600:	b2d2      	uxtb	r2, r2
 8019602:	701a      	strb	r2, [r3, #0]
 8019604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019606:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8019608:	697b      	ldr	r3, [r7, #20]
 801960a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801960c:	687b      	ldr	r3, [r7, #4]
 801960e:	62bb      	str	r3, [r7, #40]	; 0x28
 8019610:	e00b      	b.n	801962a <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8019612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019614:	b2da      	uxtb	r2, r3
 8019616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019618:	1c59      	adds	r1, r3, #1
 801961a:	62f9      	str	r1, [r7, #44]	; 0x2c
 801961c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8019620:	b2d2      	uxtb	r2, r2
 8019622:	701a      	strb	r2, [r3, #0]
 8019624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019626:	09db      	lsrs	r3, r3, #7
 8019628:	62bb      	str	r3, [r7, #40]	; 0x28
 801962a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801962c:	2b7f      	cmp	r3, #127	; 0x7f
 801962e:	d8f0      	bhi.n	8019612 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8019630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019632:	1c5a      	adds	r2, r3, #1
 8019634:	62fa      	str	r2, [r7, #44]	; 0x2c
 8019636:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019638:	b2d2      	uxtb	r2, r2
 801963a:	701a      	strb	r2, [r3, #0]
 801963c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801963e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8019640:	697b      	ldr	r3, [r7, #20]
 8019642:	627b      	str	r3, [r7, #36]	; 0x24
 8019644:	683b      	ldr	r3, [r7, #0]
 8019646:	623b      	str	r3, [r7, #32]
 8019648:	e00b      	b.n	8019662 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 801964a:	6a3b      	ldr	r3, [r7, #32]
 801964c:	b2da      	uxtb	r2, r3
 801964e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019650:	1c59      	adds	r1, r3, #1
 8019652:	6279      	str	r1, [r7, #36]	; 0x24
 8019654:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8019658:	b2d2      	uxtb	r2, r2
 801965a:	701a      	strb	r2, [r3, #0]
 801965c:	6a3b      	ldr	r3, [r7, #32]
 801965e:	09db      	lsrs	r3, r3, #7
 8019660:	623b      	str	r3, [r7, #32]
 8019662:	6a3b      	ldr	r3, [r7, #32]
 8019664:	2b7f      	cmp	r3, #127	; 0x7f
 8019666:	d8f0      	bhi.n	801964a <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8019668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801966a:	1c5a      	adds	r2, r3, #1
 801966c:	627a      	str	r2, [r7, #36]	; 0x24
 801966e:	6a3a      	ldr	r2, [r7, #32]
 8019670:	b2d2      	uxtb	r2, r2
 8019672:	701a      	strb	r2, [r3, #0]
 8019674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019676:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8019678:	68fa      	ldr	r2, [r7, #12]
 801967a:	6979      	ldr	r1, [r7, #20]
 801967c:	69b8      	ldr	r0, [r7, #24]
 801967e:	f7ff fda5 	bl	80191cc <_SendPacket>
  RECORD_END();
 8019682:	69fb      	ldr	r3, [r7, #28]
 8019684:	f383 8811 	msr	BASEPRI, r3
}
 8019688:	bf00      	nop
 801968a:	3738      	adds	r7, #56	; 0x38
 801968c:	46bd      	mov	sp, r7
 801968e:	bd80      	pop	{r7, pc}
 8019690:	2001b480 	.word	0x2001b480

08019694 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8019694:	b580      	push	{r7, lr}
 8019696:	b090      	sub	sp, #64	; 0x40
 8019698:	af00      	add	r7, sp, #0
 801969a:	60f8      	str	r0, [r7, #12]
 801969c:	60b9      	str	r1, [r7, #8]
 801969e:	607a      	str	r2, [r7, #4]
 80196a0:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80196a2:	f3ef 8311 	mrs	r3, BASEPRI
 80196a6:	f04f 0120 	mov.w	r1, #32
 80196aa:	f381 8811 	msr	BASEPRI, r1
 80196ae:	61fb      	str	r3, [r7, #28]
 80196b0:	4840      	ldr	r0, [pc, #256]	; (80197b4 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 80196b2:	f7ff fc9b 	bl	8018fec <_PreparePacket>
 80196b6:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80196b8:	69bb      	ldr	r3, [r7, #24]
 80196ba:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80196bc:	697b      	ldr	r3, [r7, #20]
 80196be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80196c0:	68bb      	ldr	r3, [r7, #8]
 80196c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80196c4:	e00b      	b.n	80196de <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 80196c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80196c8:	b2da      	uxtb	r2, r3
 80196ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80196cc:	1c59      	adds	r1, r3, #1
 80196ce:	63f9      	str	r1, [r7, #60]	; 0x3c
 80196d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80196d4:	b2d2      	uxtb	r2, r2
 80196d6:	701a      	strb	r2, [r3, #0]
 80196d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80196da:	09db      	lsrs	r3, r3, #7
 80196dc:	63bb      	str	r3, [r7, #56]	; 0x38
 80196de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80196e0:	2b7f      	cmp	r3, #127	; 0x7f
 80196e2:	d8f0      	bhi.n	80196c6 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 80196e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80196e6:	1c5a      	adds	r2, r3, #1
 80196e8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80196ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80196ec:	b2d2      	uxtb	r2, r2
 80196ee:	701a      	strb	r2, [r3, #0]
 80196f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80196f2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80196f4:	697b      	ldr	r3, [r7, #20]
 80196f6:	637b      	str	r3, [r7, #52]	; 0x34
 80196f8:	687b      	ldr	r3, [r7, #4]
 80196fa:	633b      	str	r3, [r7, #48]	; 0x30
 80196fc:	e00b      	b.n	8019716 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 80196fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019700:	b2da      	uxtb	r2, r3
 8019702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019704:	1c59      	adds	r1, r3, #1
 8019706:	6379      	str	r1, [r7, #52]	; 0x34
 8019708:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801970c:	b2d2      	uxtb	r2, r2
 801970e:	701a      	strb	r2, [r3, #0]
 8019710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019712:	09db      	lsrs	r3, r3, #7
 8019714:	633b      	str	r3, [r7, #48]	; 0x30
 8019716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019718:	2b7f      	cmp	r3, #127	; 0x7f
 801971a:	d8f0      	bhi.n	80196fe <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 801971c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801971e:	1c5a      	adds	r2, r3, #1
 8019720:	637a      	str	r2, [r7, #52]	; 0x34
 8019722:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019724:	b2d2      	uxtb	r2, r2
 8019726:	701a      	strb	r2, [r3, #0]
 8019728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801972a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 801972c:	697b      	ldr	r3, [r7, #20]
 801972e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019730:	683b      	ldr	r3, [r7, #0]
 8019732:	62bb      	str	r3, [r7, #40]	; 0x28
 8019734:	e00b      	b.n	801974e <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8019736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019738:	b2da      	uxtb	r2, r3
 801973a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801973c:	1c59      	adds	r1, r3, #1
 801973e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8019740:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8019744:	b2d2      	uxtb	r2, r2
 8019746:	701a      	strb	r2, [r3, #0]
 8019748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801974a:	09db      	lsrs	r3, r3, #7
 801974c:	62bb      	str	r3, [r7, #40]	; 0x28
 801974e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019750:	2b7f      	cmp	r3, #127	; 0x7f
 8019752:	d8f0      	bhi.n	8019736 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8019754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019756:	1c5a      	adds	r2, r3, #1
 8019758:	62fa      	str	r2, [r7, #44]	; 0x2c
 801975a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801975c:	b2d2      	uxtb	r2, r2
 801975e:	701a      	strb	r2, [r3, #0]
 8019760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019762:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8019764:	697b      	ldr	r3, [r7, #20]
 8019766:	627b      	str	r3, [r7, #36]	; 0x24
 8019768:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801976a:	623b      	str	r3, [r7, #32]
 801976c:	e00b      	b.n	8019786 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 801976e:	6a3b      	ldr	r3, [r7, #32]
 8019770:	b2da      	uxtb	r2, r3
 8019772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019774:	1c59      	adds	r1, r3, #1
 8019776:	6279      	str	r1, [r7, #36]	; 0x24
 8019778:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801977c:	b2d2      	uxtb	r2, r2
 801977e:	701a      	strb	r2, [r3, #0]
 8019780:	6a3b      	ldr	r3, [r7, #32]
 8019782:	09db      	lsrs	r3, r3, #7
 8019784:	623b      	str	r3, [r7, #32]
 8019786:	6a3b      	ldr	r3, [r7, #32]
 8019788:	2b7f      	cmp	r3, #127	; 0x7f
 801978a:	d8f0      	bhi.n	801976e <SEGGER_SYSVIEW_RecordU32x4+0xda>
 801978c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801978e:	1c5a      	adds	r2, r3, #1
 8019790:	627a      	str	r2, [r7, #36]	; 0x24
 8019792:	6a3a      	ldr	r2, [r7, #32]
 8019794:	b2d2      	uxtb	r2, r2
 8019796:	701a      	strb	r2, [r3, #0]
 8019798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801979a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 801979c:	68fa      	ldr	r2, [r7, #12]
 801979e:	6979      	ldr	r1, [r7, #20]
 80197a0:	69b8      	ldr	r0, [r7, #24]
 80197a2:	f7ff fd13 	bl	80191cc <_SendPacket>
  RECORD_END();
 80197a6:	69fb      	ldr	r3, [r7, #28]
 80197a8:	f383 8811 	msr	BASEPRI, r3
}
 80197ac:	bf00      	nop
 80197ae:	3740      	adds	r7, #64	; 0x40
 80197b0:	46bd      	mov	sp, r7
 80197b2:	bd80      	pop	{r7, pc}
 80197b4:	2001b480 	.word	0x2001b480

080197b8 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80197b8:	b580      	push	{r7, lr}
 80197ba:	b08c      	sub	sp, #48	; 0x30
 80197bc:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80197be:	4b58      	ldr	r3, [pc, #352]	; (8019920 <SEGGER_SYSVIEW_Start+0x168>)
 80197c0:	2201      	movs	r2, #1
 80197c2:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80197c4:	f3ef 8311 	mrs	r3, BASEPRI
 80197c8:	f04f 0120 	mov.w	r1, #32
 80197cc:	f381 8811 	msr	BASEPRI, r1
 80197d0:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80197d2:	4b53      	ldr	r3, [pc, #332]	; (8019920 <SEGGER_SYSVIEW_Start+0x168>)
 80197d4:	785b      	ldrb	r3, [r3, #1]
 80197d6:	220a      	movs	r2, #10
 80197d8:	4952      	ldr	r1, [pc, #328]	; (8019924 <SEGGER_SYSVIEW_Start+0x16c>)
 80197da:	4618      	mov	r0, r3
 80197dc:	f7e6 fcf8 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80197e0:	68fb      	ldr	r3, [r7, #12]
 80197e2:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80197e6:	200a      	movs	r0, #10
 80197e8:	f7ff fe2a 	bl	8019440 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80197ec:	f3ef 8311 	mrs	r3, BASEPRI
 80197f0:	f04f 0120 	mov.w	r1, #32
 80197f4:	f381 8811 	msr	BASEPRI, r1
 80197f8:	60bb      	str	r3, [r7, #8]
 80197fa:	484b      	ldr	r0, [pc, #300]	; (8019928 <SEGGER_SYSVIEW_Start+0x170>)
 80197fc:	f7ff fbf6 	bl	8018fec <_PreparePacket>
 8019800:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8019802:	687b      	ldr	r3, [r7, #4]
 8019804:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8019806:	683b      	ldr	r3, [r7, #0]
 8019808:	62fb      	str	r3, [r7, #44]	; 0x2c
 801980a:	4b45      	ldr	r3, [pc, #276]	; (8019920 <SEGGER_SYSVIEW_Start+0x168>)
 801980c:	685b      	ldr	r3, [r3, #4]
 801980e:	62bb      	str	r3, [r7, #40]	; 0x28
 8019810:	e00b      	b.n	801982a <SEGGER_SYSVIEW_Start+0x72>
 8019812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019814:	b2da      	uxtb	r2, r3
 8019816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019818:	1c59      	adds	r1, r3, #1
 801981a:	62f9      	str	r1, [r7, #44]	; 0x2c
 801981c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8019820:	b2d2      	uxtb	r2, r2
 8019822:	701a      	strb	r2, [r3, #0]
 8019824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019826:	09db      	lsrs	r3, r3, #7
 8019828:	62bb      	str	r3, [r7, #40]	; 0x28
 801982a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801982c:	2b7f      	cmp	r3, #127	; 0x7f
 801982e:	d8f0      	bhi.n	8019812 <SEGGER_SYSVIEW_Start+0x5a>
 8019830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019832:	1c5a      	adds	r2, r3, #1
 8019834:	62fa      	str	r2, [r7, #44]	; 0x2c
 8019836:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019838:	b2d2      	uxtb	r2, r2
 801983a:	701a      	strb	r2, [r3, #0]
 801983c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801983e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8019840:	683b      	ldr	r3, [r7, #0]
 8019842:	627b      	str	r3, [r7, #36]	; 0x24
 8019844:	4b36      	ldr	r3, [pc, #216]	; (8019920 <SEGGER_SYSVIEW_Start+0x168>)
 8019846:	689b      	ldr	r3, [r3, #8]
 8019848:	623b      	str	r3, [r7, #32]
 801984a:	e00b      	b.n	8019864 <SEGGER_SYSVIEW_Start+0xac>
 801984c:	6a3b      	ldr	r3, [r7, #32]
 801984e:	b2da      	uxtb	r2, r3
 8019850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019852:	1c59      	adds	r1, r3, #1
 8019854:	6279      	str	r1, [r7, #36]	; 0x24
 8019856:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801985a:	b2d2      	uxtb	r2, r2
 801985c:	701a      	strb	r2, [r3, #0]
 801985e:	6a3b      	ldr	r3, [r7, #32]
 8019860:	09db      	lsrs	r3, r3, #7
 8019862:	623b      	str	r3, [r7, #32]
 8019864:	6a3b      	ldr	r3, [r7, #32]
 8019866:	2b7f      	cmp	r3, #127	; 0x7f
 8019868:	d8f0      	bhi.n	801984c <SEGGER_SYSVIEW_Start+0x94>
 801986a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801986c:	1c5a      	adds	r2, r3, #1
 801986e:	627a      	str	r2, [r7, #36]	; 0x24
 8019870:	6a3a      	ldr	r2, [r7, #32]
 8019872:	b2d2      	uxtb	r2, r2
 8019874:	701a      	strb	r2, [r3, #0]
 8019876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019878:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 801987a:	683b      	ldr	r3, [r7, #0]
 801987c:	61fb      	str	r3, [r7, #28]
 801987e:	4b28      	ldr	r3, [pc, #160]	; (8019920 <SEGGER_SYSVIEW_Start+0x168>)
 8019880:	691b      	ldr	r3, [r3, #16]
 8019882:	61bb      	str	r3, [r7, #24]
 8019884:	e00b      	b.n	801989e <SEGGER_SYSVIEW_Start+0xe6>
 8019886:	69bb      	ldr	r3, [r7, #24]
 8019888:	b2da      	uxtb	r2, r3
 801988a:	69fb      	ldr	r3, [r7, #28]
 801988c:	1c59      	adds	r1, r3, #1
 801988e:	61f9      	str	r1, [r7, #28]
 8019890:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8019894:	b2d2      	uxtb	r2, r2
 8019896:	701a      	strb	r2, [r3, #0]
 8019898:	69bb      	ldr	r3, [r7, #24]
 801989a:	09db      	lsrs	r3, r3, #7
 801989c:	61bb      	str	r3, [r7, #24]
 801989e:	69bb      	ldr	r3, [r7, #24]
 80198a0:	2b7f      	cmp	r3, #127	; 0x7f
 80198a2:	d8f0      	bhi.n	8019886 <SEGGER_SYSVIEW_Start+0xce>
 80198a4:	69fb      	ldr	r3, [r7, #28]
 80198a6:	1c5a      	adds	r2, r3, #1
 80198a8:	61fa      	str	r2, [r7, #28]
 80198aa:	69ba      	ldr	r2, [r7, #24]
 80198ac:	b2d2      	uxtb	r2, r2
 80198ae:	701a      	strb	r2, [r3, #0]
 80198b0:	69fb      	ldr	r3, [r7, #28]
 80198b2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80198b4:	683b      	ldr	r3, [r7, #0]
 80198b6:	617b      	str	r3, [r7, #20]
 80198b8:	2300      	movs	r3, #0
 80198ba:	613b      	str	r3, [r7, #16]
 80198bc:	e00b      	b.n	80198d6 <SEGGER_SYSVIEW_Start+0x11e>
 80198be:	693b      	ldr	r3, [r7, #16]
 80198c0:	b2da      	uxtb	r2, r3
 80198c2:	697b      	ldr	r3, [r7, #20]
 80198c4:	1c59      	adds	r1, r3, #1
 80198c6:	6179      	str	r1, [r7, #20]
 80198c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80198cc:	b2d2      	uxtb	r2, r2
 80198ce:	701a      	strb	r2, [r3, #0]
 80198d0:	693b      	ldr	r3, [r7, #16]
 80198d2:	09db      	lsrs	r3, r3, #7
 80198d4:	613b      	str	r3, [r7, #16]
 80198d6:	693b      	ldr	r3, [r7, #16]
 80198d8:	2b7f      	cmp	r3, #127	; 0x7f
 80198da:	d8f0      	bhi.n	80198be <SEGGER_SYSVIEW_Start+0x106>
 80198dc:	697b      	ldr	r3, [r7, #20]
 80198de:	1c5a      	adds	r2, r3, #1
 80198e0:	617a      	str	r2, [r7, #20]
 80198e2:	693a      	ldr	r2, [r7, #16]
 80198e4:	b2d2      	uxtb	r2, r2
 80198e6:	701a      	strb	r2, [r3, #0]
 80198e8:	697b      	ldr	r3, [r7, #20]
 80198ea:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80198ec:	2218      	movs	r2, #24
 80198ee:	6839      	ldr	r1, [r7, #0]
 80198f0:	6878      	ldr	r0, [r7, #4]
 80198f2:	f7ff fc6b 	bl	80191cc <_SendPacket>
      RECORD_END();
 80198f6:	68bb      	ldr	r3, [r7, #8]
 80198f8:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80198fc:	4b08      	ldr	r3, [pc, #32]	; (8019920 <SEGGER_SYSVIEW_Start+0x168>)
 80198fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019900:	2b00      	cmp	r3, #0
 8019902:	d002      	beq.n	801990a <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8019904:	4b06      	ldr	r3, [pc, #24]	; (8019920 <SEGGER_SYSVIEW_Start+0x168>)
 8019906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019908:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 801990a:	f000 f9eb 	bl	8019ce4 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 801990e:	f000 f9b1 	bl	8019c74 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8019912:	f000 fba9 	bl	801a068 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8019916:	bf00      	nop
 8019918:	3730      	adds	r7, #48	; 0x30
 801991a:	46bd      	mov	sp, r7
 801991c:	bd80      	pop	{r7, pc}
 801991e:	bf00      	nop
 8019920:	2001b450 	.word	0x2001b450
 8019924:	0801b608 	.word	0x0801b608
 8019928:	2001b480 	.word	0x2001b480

0801992c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 801992c:	b580      	push	{r7, lr}
 801992e:	b082      	sub	sp, #8
 8019930:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8019932:	f3ef 8311 	mrs	r3, BASEPRI
 8019936:	f04f 0120 	mov.w	r1, #32
 801993a:	f381 8811 	msr	BASEPRI, r1
 801993e:	607b      	str	r3, [r7, #4]
 8019940:	480b      	ldr	r0, [pc, #44]	; (8019970 <SEGGER_SYSVIEW_Stop+0x44>)
 8019942:	f7ff fb53 	bl	8018fec <_PreparePacket>
 8019946:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8019948:	4b0a      	ldr	r3, [pc, #40]	; (8019974 <SEGGER_SYSVIEW_Stop+0x48>)
 801994a:	781b      	ldrb	r3, [r3, #0]
 801994c:	2b00      	cmp	r3, #0
 801994e:	d007      	beq.n	8019960 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8019950:	220b      	movs	r2, #11
 8019952:	6839      	ldr	r1, [r7, #0]
 8019954:	6838      	ldr	r0, [r7, #0]
 8019956:	f7ff fc39 	bl	80191cc <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 801995a:	4b06      	ldr	r3, [pc, #24]	; (8019974 <SEGGER_SYSVIEW_Stop+0x48>)
 801995c:	2200      	movs	r2, #0
 801995e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8019960:	687b      	ldr	r3, [r7, #4]
 8019962:	f383 8811 	msr	BASEPRI, r3
}
 8019966:	bf00      	nop
 8019968:	3708      	adds	r7, #8
 801996a:	46bd      	mov	sp, r7
 801996c:	bd80      	pop	{r7, pc}
 801996e:	bf00      	nop
 8019970:	2001b480 	.word	0x2001b480
 8019974:	2001b450 	.word	0x2001b450

08019978 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8019978:	b580      	push	{r7, lr}
 801997a:	b08c      	sub	sp, #48	; 0x30
 801997c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 801997e:	f3ef 8311 	mrs	r3, BASEPRI
 8019982:	f04f 0120 	mov.w	r1, #32
 8019986:	f381 8811 	msr	BASEPRI, r1
 801998a:	60fb      	str	r3, [r7, #12]
 801998c:	4845      	ldr	r0, [pc, #276]	; (8019aa4 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 801998e:	f7ff fb2d 	bl	8018fec <_PreparePacket>
 8019992:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8019994:	68bb      	ldr	r3, [r7, #8]
 8019996:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8019998:	687b      	ldr	r3, [r7, #4]
 801999a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801999c:	4b42      	ldr	r3, [pc, #264]	; (8019aa8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 801999e:	685b      	ldr	r3, [r3, #4]
 80199a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80199a2:	e00b      	b.n	80199bc <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80199a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80199a6:	b2da      	uxtb	r2, r3
 80199a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80199aa:	1c59      	adds	r1, r3, #1
 80199ac:	62f9      	str	r1, [r7, #44]	; 0x2c
 80199ae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80199b2:	b2d2      	uxtb	r2, r2
 80199b4:	701a      	strb	r2, [r3, #0]
 80199b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80199b8:	09db      	lsrs	r3, r3, #7
 80199ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80199bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80199be:	2b7f      	cmp	r3, #127	; 0x7f
 80199c0:	d8f0      	bhi.n	80199a4 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80199c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80199c4:	1c5a      	adds	r2, r3, #1
 80199c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80199c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80199ca:	b2d2      	uxtb	r2, r2
 80199cc:	701a      	strb	r2, [r3, #0]
 80199ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80199d0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80199d2:	687b      	ldr	r3, [r7, #4]
 80199d4:	627b      	str	r3, [r7, #36]	; 0x24
 80199d6:	4b34      	ldr	r3, [pc, #208]	; (8019aa8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80199d8:	689b      	ldr	r3, [r3, #8]
 80199da:	623b      	str	r3, [r7, #32]
 80199dc:	e00b      	b.n	80199f6 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80199de:	6a3b      	ldr	r3, [r7, #32]
 80199e0:	b2da      	uxtb	r2, r3
 80199e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80199e4:	1c59      	adds	r1, r3, #1
 80199e6:	6279      	str	r1, [r7, #36]	; 0x24
 80199e8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80199ec:	b2d2      	uxtb	r2, r2
 80199ee:	701a      	strb	r2, [r3, #0]
 80199f0:	6a3b      	ldr	r3, [r7, #32]
 80199f2:	09db      	lsrs	r3, r3, #7
 80199f4:	623b      	str	r3, [r7, #32]
 80199f6:	6a3b      	ldr	r3, [r7, #32]
 80199f8:	2b7f      	cmp	r3, #127	; 0x7f
 80199fa:	d8f0      	bhi.n	80199de <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80199fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80199fe:	1c5a      	adds	r2, r3, #1
 8019a00:	627a      	str	r2, [r7, #36]	; 0x24
 8019a02:	6a3a      	ldr	r2, [r7, #32]
 8019a04:	b2d2      	uxtb	r2, r2
 8019a06:	701a      	strb	r2, [r3, #0]
 8019a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a0a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8019a0c:	687b      	ldr	r3, [r7, #4]
 8019a0e:	61fb      	str	r3, [r7, #28]
 8019a10:	4b25      	ldr	r3, [pc, #148]	; (8019aa8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8019a12:	691b      	ldr	r3, [r3, #16]
 8019a14:	61bb      	str	r3, [r7, #24]
 8019a16:	e00b      	b.n	8019a30 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8019a18:	69bb      	ldr	r3, [r7, #24]
 8019a1a:	b2da      	uxtb	r2, r3
 8019a1c:	69fb      	ldr	r3, [r7, #28]
 8019a1e:	1c59      	adds	r1, r3, #1
 8019a20:	61f9      	str	r1, [r7, #28]
 8019a22:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8019a26:	b2d2      	uxtb	r2, r2
 8019a28:	701a      	strb	r2, [r3, #0]
 8019a2a:	69bb      	ldr	r3, [r7, #24]
 8019a2c:	09db      	lsrs	r3, r3, #7
 8019a2e:	61bb      	str	r3, [r7, #24]
 8019a30:	69bb      	ldr	r3, [r7, #24]
 8019a32:	2b7f      	cmp	r3, #127	; 0x7f
 8019a34:	d8f0      	bhi.n	8019a18 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8019a36:	69fb      	ldr	r3, [r7, #28]
 8019a38:	1c5a      	adds	r2, r3, #1
 8019a3a:	61fa      	str	r2, [r7, #28]
 8019a3c:	69ba      	ldr	r2, [r7, #24]
 8019a3e:	b2d2      	uxtb	r2, r2
 8019a40:	701a      	strb	r2, [r3, #0]
 8019a42:	69fb      	ldr	r3, [r7, #28]
 8019a44:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8019a46:	687b      	ldr	r3, [r7, #4]
 8019a48:	617b      	str	r3, [r7, #20]
 8019a4a:	2300      	movs	r3, #0
 8019a4c:	613b      	str	r3, [r7, #16]
 8019a4e:	e00b      	b.n	8019a68 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8019a50:	693b      	ldr	r3, [r7, #16]
 8019a52:	b2da      	uxtb	r2, r3
 8019a54:	697b      	ldr	r3, [r7, #20]
 8019a56:	1c59      	adds	r1, r3, #1
 8019a58:	6179      	str	r1, [r7, #20]
 8019a5a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8019a5e:	b2d2      	uxtb	r2, r2
 8019a60:	701a      	strb	r2, [r3, #0]
 8019a62:	693b      	ldr	r3, [r7, #16]
 8019a64:	09db      	lsrs	r3, r3, #7
 8019a66:	613b      	str	r3, [r7, #16]
 8019a68:	693b      	ldr	r3, [r7, #16]
 8019a6a:	2b7f      	cmp	r3, #127	; 0x7f
 8019a6c:	d8f0      	bhi.n	8019a50 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8019a6e:	697b      	ldr	r3, [r7, #20]
 8019a70:	1c5a      	adds	r2, r3, #1
 8019a72:	617a      	str	r2, [r7, #20]
 8019a74:	693a      	ldr	r2, [r7, #16]
 8019a76:	b2d2      	uxtb	r2, r2
 8019a78:	701a      	strb	r2, [r3, #0]
 8019a7a:	697b      	ldr	r3, [r7, #20]
 8019a7c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8019a7e:	2218      	movs	r2, #24
 8019a80:	6879      	ldr	r1, [r7, #4]
 8019a82:	68b8      	ldr	r0, [r7, #8]
 8019a84:	f7ff fba2 	bl	80191cc <_SendPacket>
  RECORD_END();
 8019a88:	68fb      	ldr	r3, [r7, #12]
 8019a8a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8019a8e:	4b06      	ldr	r3, [pc, #24]	; (8019aa8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8019a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019a92:	2b00      	cmp	r3, #0
 8019a94:	d002      	beq.n	8019a9c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8019a96:	4b04      	ldr	r3, [pc, #16]	; (8019aa8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8019a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019a9a:	4798      	blx	r3
  }
}
 8019a9c:	bf00      	nop
 8019a9e:	3730      	adds	r7, #48	; 0x30
 8019aa0:	46bd      	mov	sp, r7
 8019aa2:	bd80      	pop	{r7, pc}
 8019aa4:	2001b480 	.word	0x2001b480
 8019aa8:	2001b450 	.word	0x2001b450

08019aac <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8019aac:	b580      	push	{r7, lr}
 8019aae:	b092      	sub	sp, #72	; 0x48
 8019ab0:	af00      	add	r7, sp, #0
 8019ab2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8019ab4:	f3ef 8311 	mrs	r3, BASEPRI
 8019ab8:	f04f 0120 	mov.w	r1, #32
 8019abc:	f381 8811 	msr	BASEPRI, r1
 8019ac0:	617b      	str	r3, [r7, #20]
 8019ac2:	486a      	ldr	r0, [pc, #424]	; (8019c6c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8019ac4:	f7ff fa92 	bl	8018fec <_PreparePacket>
 8019ac8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8019aca:	693b      	ldr	r3, [r7, #16]
 8019acc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8019ace:	68fb      	ldr	r3, [r7, #12]
 8019ad0:	647b      	str	r3, [r7, #68]	; 0x44
 8019ad2:	687b      	ldr	r3, [r7, #4]
 8019ad4:	681a      	ldr	r2, [r3, #0]
 8019ad6:	4b66      	ldr	r3, [pc, #408]	; (8019c70 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8019ad8:	691b      	ldr	r3, [r3, #16]
 8019ada:	1ad3      	subs	r3, r2, r3
 8019adc:	643b      	str	r3, [r7, #64]	; 0x40
 8019ade:	e00b      	b.n	8019af8 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8019ae0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019ae2:	b2da      	uxtb	r2, r3
 8019ae4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019ae6:	1c59      	adds	r1, r3, #1
 8019ae8:	6479      	str	r1, [r7, #68]	; 0x44
 8019aea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8019aee:	b2d2      	uxtb	r2, r2
 8019af0:	701a      	strb	r2, [r3, #0]
 8019af2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019af4:	09db      	lsrs	r3, r3, #7
 8019af6:	643b      	str	r3, [r7, #64]	; 0x40
 8019af8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019afa:	2b7f      	cmp	r3, #127	; 0x7f
 8019afc:	d8f0      	bhi.n	8019ae0 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8019afe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019b00:	1c5a      	adds	r2, r3, #1
 8019b02:	647a      	str	r2, [r7, #68]	; 0x44
 8019b04:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8019b06:	b2d2      	uxtb	r2, r2
 8019b08:	701a      	strb	r2, [r3, #0]
 8019b0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019b0c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8019b0e:	68fb      	ldr	r3, [r7, #12]
 8019b10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8019b12:	687b      	ldr	r3, [r7, #4]
 8019b14:	689b      	ldr	r3, [r3, #8]
 8019b16:	63bb      	str	r3, [r7, #56]	; 0x38
 8019b18:	e00b      	b.n	8019b32 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8019b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019b1c:	b2da      	uxtb	r2, r3
 8019b1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019b20:	1c59      	adds	r1, r3, #1
 8019b22:	63f9      	str	r1, [r7, #60]	; 0x3c
 8019b24:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8019b28:	b2d2      	uxtb	r2, r2
 8019b2a:	701a      	strb	r2, [r3, #0]
 8019b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019b2e:	09db      	lsrs	r3, r3, #7
 8019b30:	63bb      	str	r3, [r7, #56]	; 0x38
 8019b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019b34:	2b7f      	cmp	r3, #127	; 0x7f
 8019b36:	d8f0      	bhi.n	8019b1a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8019b38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019b3a:	1c5a      	adds	r2, r3, #1
 8019b3c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8019b3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019b40:	b2d2      	uxtb	r2, r2
 8019b42:	701a      	strb	r2, [r3, #0]
 8019b44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019b46:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8019b48:	687b      	ldr	r3, [r7, #4]
 8019b4a:	685b      	ldr	r3, [r3, #4]
 8019b4c:	2220      	movs	r2, #32
 8019b4e:	4619      	mov	r1, r3
 8019b50:	68f8      	ldr	r0, [r7, #12]
 8019b52:	f7ff f9fb 	bl	8018f4c <_EncodeStr>
 8019b56:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8019b58:	2209      	movs	r2, #9
 8019b5a:	68f9      	ldr	r1, [r7, #12]
 8019b5c:	6938      	ldr	r0, [r7, #16]
 8019b5e:	f7ff fb35 	bl	80191cc <_SendPacket>
  //
  pPayload = pPayloadStart;
 8019b62:	693b      	ldr	r3, [r7, #16]
 8019b64:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8019b66:	68fb      	ldr	r3, [r7, #12]
 8019b68:	637b      	str	r3, [r7, #52]	; 0x34
 8019b6a:	687b      	ldr	r3, [r7, #4]
 8019b6c:	681a      	ldr	r2, [r3, #0]
 8019b6e:	4b40      	ldr	r3, [pc, #256]	; (8019c70 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8019b70:	691b      	ldr	r3, [r3, #16]
 8019b72:	1ad3      	subs	r3, r2, r3
 8019b74:	633b      	str	r3, [r7, #48]	; 0x30
 8019b76:	e00b      	b.n	8019b90 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8019b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019b7a:	b2da      	uxtb	r2, r3
 8019b7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019b7e:	1c59      	adds	r1, r3, #1
 8019b80:	6379      	str	r1, [r7, #52]	; 0x34
 8019b82:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8019b86:	b2d2      	uxtb	r2, r2
 8019b88:	701a      	strb	r2, [r3, #0]
 8019b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019b8c:	09db      	lsrs	r3, r3, #7
 8019b8e:	633b      	str	r3, [r7, #48]	; 0x30
 8019b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019b92:	2b7f      	cmp	r3, #127	; 0x7f
 8019b94:	d8f0      	bhi.n	8019b78 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8019b96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019b98:	1c5a      	adds	r2, r3, #1
 8019b9a:	637a      	str	r2, [r7, #52]	; 0x34
 8019b9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019b9e:	b2d2      	uxtb	r2, r2
 8019ba0:	701a      	strb	r2, [r3, #0]
 8019ba2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019ba4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8019ba6:	68fb      	ldr	r3, [r7, #12]
 8019ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019baa:	687b      	ldr	r3, [r7, #4]
 8019bac:	68db      	ldr	r3, [r3, #12]
 8019bae:	62bb      	str	r3, [r7, #40]	; 0x28
 8019bb0:	e00b      	b.n	8019bca <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8019bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019bb4:	b2da      	uxtb	r2, r3
 8019bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019bb8:	1c59      	adds	r1, r3, #1
 8019bba:	62f9      	str	r1, [r7, #44]	; 0x2c
 8019bbc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8019bc0:	b2d2      	uxtb	r2, r2
 8019bc2:	701a      	strb	r2, [r3, #0]
 8019bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019bc6:	09db      	lsrs	r3, r3, #7
 8019bc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8019bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019bcc:	2b7f      	cmp	r3, #127	; 0x7f
 8019bce:	d8f0      	bhi.n	8019bb2 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8019bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019bd2:	1c5a      	adds	r2, r3, #1
 8019bd4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8019bd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019bd8:	b2d2      	uxtb	r2, r2
 8019bda:	701a      	strb	r2, [r3, #0]
 8019bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019bde:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8019be0:	68fb      	ldr	r3, [r7, #12]
 8019be2:	627b      	str	r3, [r7, #36]	; 0x24
 8019be4:	687b      	ldr	r3, [r7, #4]
 8019be6:	691b      	ldr	r3, [r3, #16]
 8019be8:	623b      	str	r3, [r7, #32]
 8019bea:	e00b      	b.n	8019c04 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8019bec:	6a3b      	ldr	r3, [r7, #32]
 8019bee:	b2da      	uxtb	r2, r3
 8019bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019bf2:	1c59      	adds	r1, r3, #1
 8019bf4:	6279      	str	r1, [r7, #36]	; 0x24
 8019bf6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8019bfa:	b2d2      	uxtb	r2, r2
 8019bfc:	701a      	strb	r2, [r3, #0]
 8019bfe:	6a3b      	ldr	r3, [r7, #32]
 8019c00:	09db      	lsrs	r3, r3, #7
 8019c02:	623b      	str	r3, [r7, #32]
 8019c04:	6a3b      	ldr	r3, [r7, #32]
 8019c06:	2b7f      	cmp	r3, #127	; 0x7f
 8019c08:	d8f0      	bhi.n	8019bec <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8019c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c0c:	1c5a      	adds	r2, r3, #1
 8019c0e:	627a      	str	r2, [r7, #36]	; 0x24
 8019c10:	6a3a      	ldr	r2, [r7, #32]
 8019c12:	b2d2      	uxtb	r2, r2
 8019c14:	701a      	strb	r2, [r3, #0]
 8019c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c18:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8019c1a:	68fb      	ldr	r3, [r7, #12]
 8019c1c:	61fb      	str	r3, [r7, #28]
 8019c1e:	2300      	movs	r3, #0
 8019c20:	61bb      	str	r3, [r7, #24]
 8019c22:	e00b      	b.n	8019c3c <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8019c24:	69bb      	ldr	r3, [r7, #24]
 8019c26:	b2da      	uxtb	r2, r3
 8019c28:	69fb      	ldr	r3, [r7, #28]
 8019c2a:	1c59      	adds	r1, r3, #1
 8019c2c:	61f9      	str	r1, [r7, #28]
 8019c2e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8019c32:	b2d2      	uxtb	r2, r2
 8019c34:	701a      	strb	r2, [r3, #0]
 8019c36:	69bb      	ldr	r3, [r7, #24]
 8019c38:	09db      	lsrs	r3, r3, #7
 8019c3a:	61bb      	str	r3, [r7, #24]
 8019c3c:	69bb      	ldr	r3, [r7, #24]
 8019c3e:	2b7f      	cmp	r3, #127	; 0x7f
 8019c40:	d8f0      	bhi.n	8019c24 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8019c42:	69fb      	ldr	r3, [r7, #28]
 8019c44:	1c5a      	adds	r2, r3, #1
 8019c46:	61fa      	str	r2, [r7, #28]
 8019c48:	69ba      	ldr	r2, [r7, #24]
 8019c4a:	b2d2      	uxtb	r2, r2
 8019c4c:	701a      	strb	r2, [r3, #0]
 8019c4e:	69fb      	ldr	r3, [r7, #28]
 8019c50:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8019c52:	2215      	movs	r2, #21
 8019c54:	68f9      	ldr	r1, [r7, #12]
 8019c56:	6938      	ldr	r0, [r7, #16]
 8019c58:	f7ff fab8 	bl	80191cc <_SendPacket>
  RECORD_END();
 8019c5c:	697b      	ldr	r3, [r7, #20]
 8019c5e:	f383 8811 	msr	BASEPRI, r3
}
 8019c62:	bf00      	nop
 8019c64:	3748      	adds	r7, #72	; 0x48
 8019c66:	46bd      	mov	sp, r7
 8019c68:	bd80      	pop	{r7, pc}
 8019c6a:	bf00      	nop
 8019c6c:	2001b480 	.word	0x2001b480
 8019c70:	2001b450 	.word	0x2001b450

08019c74 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8019c74:	b580      	push	{r7, lr}
 8019c76:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8019c78:	4b07      	ldr	r3, [pc, #28]	; (8019c98 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8019c7a:	6a1b      	ldr	r3, [r3, #32]
 8019c7c:	2b00      	cmp	r3, #0
 8019c7e:	d008      	beq.n	8019c92 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8019c80:	4b05      	ldr	r3, [pc, #20]	; (8019c98 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8019c82:	6a1b      	ldr	r3, [r3, #32]
 8019c84:	685b      	ldr	r3, [r3, #4]
 8019c86:	2b00      	cmp	r3, #0
 8019c88:	d003      	beq.n	8019c92 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8019c8a:	4b03      	ldr	r3, [pc, #12]	; (8019c98 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8019c8c:	6a1b      	ldr	r3, [r3, #32]
 8019c8e:	685b      	ldr	r3, [r3, #4]
 8019c90:	4798      	blx	r3
  }
}
 8019c92:	bf00      	nop
 8019c94:	bd80      	pop	{r7, pc}
 8019c96:	bf00      	nop
 8019c98:	2001b450 	.word	0x2001b450

08019c9c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8019c9c:	b580      	push	{r7, lr}
 8019c9e:	b086      	sub	sp, #24
 8019ca0:	af00      	add	r7, sp, #0
 8019ca2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8019ca4:	f3ef 8311 	mrs	r3, BASEPRI
 8019ca8:	f04f 0120 	mov.w	r1, #32
 8019cac:	f381 8811 	msr	BASEPRI, r1
 8019cb0:	617b      	str	r3, [r7, #20]
 8019cb2:	480b      	ldr	r0, [pc, #44]	; (8019ce0 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8019cb4:	f7ff f99a 	bl	8018fec <_PreparePacket>
 8019cb8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8019cba:	2280      	movs	r2, #128	; 0x80
 8019cbc:	6879      	ldr	r1, [r7, #4]
 8019cbe:	6938      	ldr	r0, [r7, #16]
 8019cc0:	f7ff f944 	bl	8018f4c <_EncodeStr>
 8019cc4:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8019cc6:	220e      	movs	r2, #14
 8019cc8:	68f9      	ldr	r1, [r7, #12]
 8019cca:	6938      	ldr	r0, [r7, #16]
 8019ccc:	f7ff fa7e 	bl	80191cc <_SendPacket>
  RECORD_END();
 8019cd0:	697b      	ldr	r3, [r7, #20]
 8019cd2:	f383 8811 	msr	BASEPRI, r3
}
 8019cd6:	bf00      	nop
 8019cd8:	3718      	adds	r7, #24
 8019cda:	46bd      	mov	sp, r7
 8019cdc:	bd80      	pop	{r7, pc}
 8019cde:	bf00      	nop
 8019ce0:	2001b480 	.word	0x2001b480

08019ce4 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8019ce4:	b590      	push	{r4, r7, lr}
 8019ce6:	b083      	sub	sp, #12
 8019ce8:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8019cea:	4b15      	ldr	r3, [pc, #84]	; (8019d40 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8019cec:	6a1b      	ldr	r3, [r3, #32]
 8019cee:	2b00      	cmp	r3, #0
 8019cf0:	d01a      	beq.n	8019d28 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8019cf2:	4b13      	ldr	r3, [pc, #76]	; (8019d40 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8019cf4:	6a1b      	ldr	r3, [r3, #32]
 8019cf6:	681b      	ldr	r3, [r3, #0]
 8019cf8:	2b00      	cmp	r3, #0
 8019cfa:	d015      	beq.n	8019d28 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8019cfc:	4b10      	ldr	r3, [pc, #64]	; (8019d40 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8019cfe:	6a1b      	ldr	r3, [r3, #32]
 8019d00:	681b      	ldr	r3, [r3, #0]
 8019d02:	4798      	blx	r3
 8019d04:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8019d08:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8019d0a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8019d0e:	f04f 0200 	mov.w	r2, #0
 8019d12:	f04f 0300 	mov.w	r3, #0
 8019d16:	000a      	movs	r2, r1
 8019d18:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8019d1a:	4613      	mov	r3, r2
 8019d1c:	461a      	mov	r2, r3
 8019d1e:	4621      	mov	r1, r4
 8019d20:	200d      	movs	r0, #13
 8019d22:	f7ff fbe7 	bl	80194f4 <SEGGER_SYSVIEW_RecordU32x2>
 8019d26:	e006      	b.n	8019d36 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8019d28:	4b06      	ldr	r3, [pc, #24]	; (8019d44 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8019d2a:	681b      	ldr	r3, [r3, #0]
 8019d2c:	4619      	mov	r1, r3
 8019d2e:	200c      	movs	r0, #12
 8019d30:	f7ff fba4 	bl	801947c <SEGGER_SYSVIEW_RecordU32>
  }
}
 8019d34:	bf00      	nop
 8019d36:	bf00      	nop
 8019d38:	370c      	adds	r7, #12
 8019d3a:	46bd      	mov	sp, r7
 8019d3c:	bd90      	pop	{r4, r7, pc}
 8019d3e:	bf00      	nop
 8019d40:	2001b450 	.word	0x2001b450
 8019d44:	e0001004 	.word	0xe0001004

08019d48 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8019d48:	b580      	push	{r7, lr}
 8019d4a:	b082      	sub	sp, #8
 8019d4c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8019d4e:	f3ef 8311 	mrs	r3, BASEPRI
 8019d52:	f04f 0120 	mov.w	r1, #32
 8019d56:	f381 8811 	msr	BASEPRI, r1
 8019d5a:	607b      	str	r3, [r7, #4]
 8019d5c:	4807      	ldr	r0, [pc, #28]	; (8019d7c <SEGGER_SYSVIEW_OnIdle+0x34>)
 8019d5e:	f7ff f945 	bl	8018fec <_PreparePacket>
 8019d62:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8019d64:	2211      	movs	r2, #17
 8019d66:	6839      	ldr	r1, [r7, #0]
 8019d68:	6838      	ldr	r0, [r7, #0]
 8019d6a:	f7ff fa2f 	bl	80191cc <_SendPacket>
  RECORD_END();
 8019d6e:	687b      	ldr	r3, [r7, #4]
 8019d70:	f383 8811 	msr	BASEPRI, r3
}
 8019d74:	bf00      	nop
 8019d76:	3708      	adds	r7, #8
 8019d78:	46bd      	mov	sp, r7
 8019d7a:	bd80      	pop	{r7, pc}
 8019d7c:	2001b480 	.word	0x2001b480

08019d80 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8019d80:	b580      	push	{r7, lr}
 8019d82:	b088      	sub	sp, #32
 8019d84:	af00      	add	r7, sp, #0
 8019d86:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8019d88:	f3ef 8311 	mrs	r3, BASEPRI
 8019d8c:	f04f 0120 	mov.w	r1, #32
 8019d90:	f381 8811 	msr	BASEPRI, r1
 8019d94:	617b      	str	r3, [r7, #20]
 8019d96:	4819      	ldr	r0, [pc, #100]	; (8019dfc <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8019d98:	f7ff f928 	bl	8018fec <_PreparePacket>
 8019d9c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8019d9e:	693b      	ldr	r3, [r7, #16]
 8019da0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8019da2:	4b17      	ldr	r3, [pc, #92]	; (8019e00 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8019da4:	691b      	ldr	r3, [r3, #16]
 8019da6:	687a      	ldr	r2, [r7, #4]
 8019da8:	1ad3      	subs	r3, r2, r3
 8019daa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8019dac:	68fb      	ldr	r3, [r7, #12]
 8019dae:	61fb      	str	r3, [r7, #28]
 8019db0:	687b      	ldr	r3, [r7, #4]
 8019db2:	61bb      	str	r3, [r7, #24]
 8019db4:	e00b      	b.n	8019dce <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8019db6:	69bb      	ldr	r3, [r7, #24]
 8019db8:	b2da      	uxtb	r2, r3
 8019dba:	69fb      	ldr	r3, [r7, #28]
 8019dbc:	1c59      	adds	r1, r3, #1
 8019dbe:	61f9      	str	r1, [r7, #28]
 8019dc0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8019dc4:	b2d2      	uxtb	r2, r2
 8019dc6:	701a      	strb	r2, [r3, #0]
 8019dc8:	69bb      	ldr	r3, [r7, #24]
 8019dca:	09db      	lsrs	r3, r3, #7
 8019dcc:	61bb      	str	r3, [r7, #24]
 8019dce:	69bb      	ldr	r3, [r7, #24]
 8019dd0:	2b7f      	cmp	r3, #127	; 0x7f
 8019dd2:	d8f0      	bhi.n	8019db6 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8019dd4:	69fb      	ldr	r3, [r7, #28]
 8019dd6:	1c5a      	adds	r2, r3, #1
 8019dd8:	61fa      	str	r2, [r7, #28]
 8019dda:	69ba      	ldr	r2, [r7, #24]
 8019ddc:	b2d2      	uxtb	r2, r2
 8019dde:	701a      	strb	r2, [r3, #0]
 8019de0:	69fb      	ldr	r3, [r7, #28]
 8019de2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8019de4:	2208      	movs	r2, #8
 8019de6:	68f9      	ldr	r1, [r7, #12]
 8019de8:	6938      	ldr	r0, [r7, #16]
 8019dea:	f7ff f9ef 	bl	80191cc <_SendPacket>
  RECORD_END();
 8019dee:	697b      	ldr	r3, [r7, #20]
 8019df0:	f383 8811 	msr	BASEPRI, r3
}
 8019df4:	bf00      	nop
 8019df6:	3720      	adds	r7, #32
 8019df8:	46bd      	mov	sp, r7
 8019dfa:	bd80      	pop	{r7, pc}
 8019dfc:	2001b480 	.word	0x2001b480
 8019e00:	2001b450 	.word	0x2001b450

08019e04 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8019e04:	b580      	push	{r7, lr}
 8019e06:	b088      	sub	sp, #32
 8019e08:	af00      	add	r7, sp, #0
 8019e0a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8019e0c:	f3ef 8311 	mrs	r3, BASEPRI
 8019e10:	f04f 0120 	mov.w	r1, #32
 8019e14:	f381 8811 	msr	BASEPRI, r1
 8019e18:	617b      	str	r3, [r7, #20]
 8019e1a:	4819      	ldr	r0, [pc, #100]	; (8019e80 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8019e1c:	f7ff f8e6 	bl	8018fec <_PreparePacket>
 8019e20:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8019e22:	693b      	ldr	r3, [r7, #16]
 8019e24:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8019e26:	4b17      	ldr	r3, [pc, #92]	; (8019e84 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8019e28:	691b      	ldr	r3, [r3, #16]
 8019e2a:	687a      	ldr	r2, [r7, #4]
 8019e2c:	1ad3      	subs	r3, r2, r3
 8019e2e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8019e30:	68fb      	ldr	r3, [r7, #12]
 8019e32:	61fb      	str	r3, [r7, #28]
 8019e34:	687b      	ldr	r3, [r7, #4]
 8019e36:	61bb      	str	r3, [r7, #24]
 8019e38:	e00b      	b.n	8019e52 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8019e3a:	69bb      	ldr	r3, [r7, #24]
 8019e3c:	b2da      	uxtb	r2, r3
 8019e3e:	69fb      	ldr	r3, [r7, #28]
 8019e40:	1c59      	adds	r1, r3, #1
 8019e42:	61f9      	str	r1, [r7, #28]
 8019e44:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8019e48:	b2d2      	uxtb	r2, r2
 8019e4a:	701a      	strb	r2, [r3, #0]
 8019e4c:	69bb      	ldr	r3, [r7, #24]
 8019e4e:	09db      	lsrs	r3, r3, #7
 8019e50:	61bb      	str	r3, [r7, #24]
 8019e52:	69bb      	ldr	r3, [r7, #24]
 8019e54:	2b7f      	cmp	r3, #127	; 0x7f
 8019e56:	d8f0      	bhi.n	8019e3a <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8019e58:	69fb      	ldr	r3, [r7, #28]
 8019e5a:	1c5a      	adds	r2, r3, #1
 8019e5c:	61fa      	str	r2, [r7, #28]
 8019e5e:	69ba      	ldr	r2, [r7, #24]
 8019e60:	b2d2      	uxtb	r2, r2
 8019e62:	701a      	strb	r2, [r3, #0]
 8019e64:	69fb      	ldr	r3, [r7, #28]
 8019e66:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8019e68:	2204      	movs	r2, #4
 8019e6a:	68f9      	ldr	r1, [r7, #12]
 8019e6c:	6938      	ldr	r0, [r7, #16]
 8019e6e:	f7ff f9ad 	bl	80191cc <_SendPacket>
  RECORD_END();
 8019e72:	697b      	ldr	r3, [r7, #20]
 8019e74:	f383 8811 	msr	BASEPRI, r3
}
 8019e78:	bf00      	nop
 8019e7a:	3720      	adds	r7, #32
 8019e7c:	46bd      	mov	sp, r7
 8019e7e:	bd80      	pop	{r7, pc}
 8019e80:	2001b480 	.word	0x2001b480
 8019e84:	2001b450 	.word	0x2001b450

08019e88 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8019e88:	b580      	push	{r7, lr}
 8019e8a:	b088      	sub	sp, #32
 8019e8c:	af00      	add	r7, sp, #0
 8019e8e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8019e90:	f3ef 8311 	mrs	r3, BASEPRI
 8019e94:	f04f 0120 	mov.w	r1, #32
 8019e98:	f381 8811 	msr	BASEPRI, r1
 8019e9c:	617b      	str	r3, [r7, #20]
 8019e9e:	4819      	ldr	r0, [pc, #100]	; (8019f04 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8019ea0:	f7ff f8a4 	bl	8018fec <_PreparePacket>
 8019ea4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8019ea6:	693b      	ldr	r3, [r7, #16]
 8019ea8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8019eaa:	4b17      	ldr	r3, [pc, #92]	; (8019f08 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8019eac:	691b      	ldr	r3, [r3, #16]
 8019eae:	687a      	ldr	r2, [r7, #4]
 8019eb0:	1ad3      	subs	r3, r2, r3
 8019eb2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8019eb4:	68fb      	ldr	r3, [r7, #12]
 8019eb6:	61fb      	str	r3, [r7, #28]
 8019eb8:	687b      	ldr	r3, [r7, #4]
 8019eba:	61bb      	str	r3, [r7, #24]
 8019ebc:	e00b      	b.n	8019ed6 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8019ebe:	69bb      	ldr	r3, [r7, #24]
 8019ec0:	b2da      	uxtb	r2, r3
 8019ec2:	69fb      	ldr	r3, [r7, #28]
 8019ec4:	1c59      	adds	r1, r3, #1
 8019ec6:	61f9      	str	r1, [r7, #28]
 8019ec8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8019ecc:	b2d2      	uxtb	r2, r2
 8019ece:	701a      	strb	r2, [r3, #0]
 8019ed0:	69bb      	ldr	r3, [r7, #24]
 8019ed2:	09db      	lsrs	r3, r3, #7
 8019ed4:	61bb      	str	r3, [r7, #24]
 8019ed6:	69bb      	ldr	r3, [r7, #24]
 8019ed8:	2b7f      	cmp	r3, #127	; 0x7f
 8019eda:	d8f0      	bhi.n	8019ebe <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8019edc:	69fb      	ldr	r3, [r7, #28]
 8019ede:	1c5a      	adds	r2, r3, #1
 8019ee0:	61fa      	str	r2, [r7, #28]
 8019ee2:	69ba      	ldr	r2, [r7, #24]
 8019ee4:	b2d2      	uxtb	r2, r2
 8019ee6:	701a      	strb	r2, [r3, #0]
 8019ee8:	69fb      	ldr	r3, [r7, #28]
 8019eea:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8019eec:	2206      	movs	r2, #6
 8019eee:	68f9      	ldr	r1, [r7, #12]
 8019ef0:	6938      	ldr	r0, [r7, #16]
 8019ef2:	f7ff f96b 	bl	80191cc <_SendPacket>
  RECORD_END();
 8019ef6:	697b      	ldr	r3, [r7, #20]
 8019ef8:	f383 8811 	msr	BASEPRI, r3
}
 8019efc:	bf00      	nop
 8019efe:	3720      	adds	r7, #32
 8019f00:	46bd      	mov	sp, r7
 8019f02:	bd80      	pop	{r7, pc}
 8019f04:	2001b480 	.word	0x2001b480
 8019f08:	2001b450 	.word	0x2001b450

08019f0c <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8019f0c:	b480      	push	{r7}
 8019f0e:	b083      	sub	sp, #12
 8019f10:	af00      	add	r7, sp, #0
 8019f12:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8019f14:	4b04      	ldr	r3, [pc, #16]	; (8019f28 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8019f16:	691b      	ldr	r3, [r3, #16]
 8019f18:	687a      	ldr	r2, [r7, #4]
 8019f1a:	1ad3      	subs	r3, r2, r3
}
 8019f1c:	4618      	mov	r0, r3
 8019f1e:	370c      	adds	r7, #12
 8019f20:	46bd      	mov	sp, r7
 8019f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f26:	4770      	bx	lr
 8019f28:	2001b450 	.word	0x2001b450

08019f2c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8019f2c:	b580      	push	{r7, lr}
 8019f2e:	b08c      	sub	sp, #48	; 0x30
 8019f30:	af00      	add	r7, sp, #0
 8019f32:	4603      	mov	r3, r0
 8019f34:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8019f36:	4b3b      	ldr	r3, [pc, #236]	; (801a024 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8019f38:	681b      	ldr	r3, [r3, #0]
 8019f3a:	2b00      	cmp	r3, #0
 8019f3c:	d06d      	beq.n	801a01a <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8019f3e:	4b39      	ldr	r3, [pc, #228]	; (801a024 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8019f40:	681b      	ldr	r3, [r3, #0]
 8019f42:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8019f44:	2300      	movs	r3, #0
 8019f46:	62bb      	str	r3, [r7, #40]	; 0x28
 8019f48:	e008      	b.n	8019f5c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8019f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f4c:	691b      	ldr	r3, [r3, #16]
 8019f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8019f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f52:	2b00      	cmp	r3, #0
 8019f54:	d007      	beq.n	8019f66 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8019f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f58:	3301      	adds	r3, #1
 8019f5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8019f5c:	79fb      	ldrb	r3, [r7, #7]
 8019f5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019f60:	429a      	cmp	r2, r3
 8019f62:	d3f2      	bcc.n	8019f4a <SEGGER_SYSVIEW_SendModule+0x1e>
 8019f64:	e000      	b.n	8019f68 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8019f66:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8019f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f6a:	2b00      	cmp	r3, #0
 8019f6c:	d055      	beq.n	801a01a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8019f6e:	f3ef 8311 	mrs	r3, BASEPRI
 8019f72:	f04f 0120 	mov.w	r1, #32
 8019f76:	f381 8811 	msr	BASEPRI, r1
 8019f7a:	617b      	str	r3, [r7, #20]
 8019f7c:	482a      	ldr	r0, [pc, #168]	; (801a028 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8019f7e:	f7ff f835 	bl	8018fec <_PreparePacket>
 8019f82:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8019f84:	693b      	ldr	r3, [r7, #16]
 8019f86:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8019f88:	68fb      	ldr	r3, [r7, #12]
 8019f8a:	627b      	str	r3, [r7, #36]	; 0x24
 8019f8c:	79fb      	ldrb	r3, [r7, #7]
 8019f8e:	623b      	str	r3, [r7, #32]
 8019f90:	e00b      	b.n	8019faa <SEGGER_SYSVIEW_SendModule+0x7e>
 8019f92:	6a3b      	ldr	r3, [r7, #32]
 8019f94:	b2da      	uxtb	r2, r3
 8019f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f98:	1c59      	adds	r1, r3, #1
 8019f9a:	6279      	str	r1, [r7, #36]	; 0x24
 8019f9c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8019fa0:	b2d2      	uxtb	r2, r2
 8019fa2:	701a      	strb	r2, [r3, #0]
 8019fa4:	6a3b      	ldr	r3, [r7, #32]
 8019fa6:	09db      	lsrs	r3, r3, #7
 8019fa8:	623b      	str	r3, [r7, #32]
 8019faa:	6a3b      	ldr	r3, [r7, #32]
 8019fac:	2b7f      	cmp	r3, #127	; 0x7f
 8019fae:	d8f0      	bhi.n	8019f92 <SEGGER_SYSVIEW_SendModule+0x66>
 8019fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019fb2:	1c5a      	adds	r2, r3, #1
 8019fb4:	627a      	str	r2, [r7, #36]	; 0x24
 8019fb6:	6a3a      	ldr	r2, [r7, #32]
 8019fb8:	b2d2      	uxtb	r2, r2
 8019fba:	701a      	strb	r2, [r3, #0]
 8019fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019fbe:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8019fc0:	68fb      	ldr	r3, [r7, #12]
 8019fc2:	61fb      	str	r3, [r7, #28]
 8019fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019fc6:	689b      	ldr	r3, [r3, #8]
 8019fc8:	61bb      	str	r3, [r7, #24]
 8019fca:	e00b      	b.n	8019fe4 <SEGGER_SYSVIEW_SendModule+0xb8>
 8019fcc:	69bb      	ldr	r3, [r7, #24]
 8019fce:	b2da      	uxtb	r2, r3
 8019fd0:	69fb      	ldr	r3, [r7, #28]
 8019fd2:	1c59      	adds	r1, r3, #1
 8019fd4:	61f9      	str	r1, [r7, #28]
 8019fd6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8019fda:	b2d2      	uxtb	r2, r2
 8019fdc:	701a      	strb	r2, [r3, #0]
 8019fde:	69bb      	ldr	r3, [r7, #24]
 8019fe0:	09db      	lsrs	r3, r3, #7
 8019fe2:	61bb      	str	r3, [r7, #24]
 8019fe4:	69bb      	ldr	r3, [r7, #24]
 8019fe6:	2b7f      	cmp	r3, #127	; 0x7f
 8019fe8:	d8f0      	bhi.n	8019fcc <SEGGER_SYSVIEW_SendModule+0xa0>
 8019fea:	69fb      	ldr	r3, [r7, #28]
 8019fec:	1c5a      	adds	r2, r3, #1
 8019fee:	61fa      	str	r2, [r7, #28]
 8019ff0:	69ba      	ldr	r2, [r7, #24]
 8019ff2:	b2d2      	uxtb	r2, r2
 8019ff4:	701a      	strb	r2, [r3, #0]
 8019ff6:	69fb      	ldr	r3, [r7, #28]
 8019ff8:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8019ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ffc:	681b      	ldr	r3, [r3, #0]
 8019ffe:	2280      	movs	r2, #128	; 0x80
 801a000:	4619      	mov	r1, r3
 801a002:	68f8      	ldr	r0, [r7, #12]
 801a004:	f7fe ffa2 	bl	8018f4c <_EncodeStr>
 801a008:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 801a00a:	2216      	movs	r2, #22
 801a00c:	68f9      	ldr	r1, [r7, #12]
 801a00e:	6938      	ldr	r0, [r7, #16]
 801a010:	f7ff f8dc 	bl	80191cc <_SendPacket>
      RECORD_END();
 801a014:	697b      	ldr	r3, [r7, #20]
 801a016:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 801a01a:	bf00      	nop
 801a01c:	3730      	adds	r7, #48	; 0x30
 801a01e:	46bd      	mov	sp, r7
 801a020:	bd80      	pop	{r7, pc}
 801a022:	bf00      	nop
 801a024:	2001b478 	.word	0x2001b478
 801a028:	2001b480 	.word	0x2001b480

0801a02c <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 801a02c:	b580      	push	{r7, lr}
 801a02e:	b082      	sub	sp, #8
 801a030:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 801a032:	4b0c      	ldr	r3, [pc, #48]	; (801a064 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 801a034:	681b      	ldr	r3, [r3, #0]
 801a036:	2b00      	cmp	r3, #0
 801a038:	d00f      	beq.n	801a05a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 801a03a:	4b0a      	ldr	r3, [pc, #40]	; (801a064 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 801a03c:	681b      	ldr	r3, [r3, #0]
 801a03e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 801a040:	687b      	ldr	r3, [r7, #4]
 801a042:	68db      	ldr	r3, [r3, #12]
 801a044:	2b00      	cmp	r3, #0
 801a046:	d002      	beq.n	801a04e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 801a048:	687b      	ldr	r3, [r7, #4]
 801a04a:	68db      	ldr	r3, [r3, #12]
 801a04c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 801a04e:	687b      	ldr	r3, [r7, #4]
 801a050:	691b      	ldr	r3, [r3, #16]
 801a052:	607b      	str	r3, [r7, #4]
    } while (pModule);
 801a054:	687b      	ldr	r3, [r7, #4]
 801a056:	2b00      	cmp	r3, #0
 801a058:	d1f2      	bne.n	801a040 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 801a05a:	bf00      	nop
 801a05c:	3708      	adds	r7, #8
 801a05e:	46bd      	mov	sp, r7
 801a060:	bd80      	pop	{r7, pc}
 801a062:	bf00      	nop
 801a064:	2001b478 	.word	0x2001b478

0801a068 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 801a068:	b580      	push	{r7, lr}
 801a06a:	b086      	sub	sp, #24
 801a06c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 801a06e:	f3ef 8311 	mrs	r3, BASEPRI
 801a072:	f04f 0120 	mov.w	r1, #32
 801a076:	f381 8811 	msr	BASEPRI, r1
 801a07a:	60fb      	str	r3, [r7, #12]
 801a07c:	4817      	ldr	r0, [pc, #92]	; (801a0dc <SEGGER_SYSVIEW_SendNumModules+0x74>)
 801a07e:	f7fe ffb5 	bl	8018fec <_PreparePacket>
 801a082:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 801a084:	68bb      	ldr	r3, [r7, #8]
 801a086:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 801a088:	687b      	ldr	r3, [r7, #4]
 801a08a:	617b      	str	r3, [r7, #20]
 801a08c:	4b14      	ldr	r3, [pc, #80]	; (801a0e0 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 801a08e:	781b      	ldrb	r3, [r3, #0]
 801a090:	613b      	str	r3, [r7, #16]
 801a092:	e00b      	b.n	801a0ac <SEGGER_SYSVIEW_SendNumModules+0x44>
 801a094:	693b      	ldr	r3, [r7, #16]
 801a096:	b2da      	uxtb	r2, r3
 801a098:	697b      	ldr	r3, [r7, #20]
 801a09a:	1c59      	adds	r1, r3, #1
 801a09c:	6179      	str	r1, [r7, #20]
 801a09e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801a0a2:	b2d2      	uxtb	r2, r2
 801a0a4:	701a      	strb	r2, [r3, #0]
 801a0a6:	693b      	ldr	r3, [r7, #16]
 801a0a8:	09db      	lsrs	r3, r3, #7
 801a0aa:	613b      	str	r3, [r7, #16]
 801a0ac:	693b      	ldr	r3, [r7, #16]
 801a0ae:	2b7f      	cmp	r3, #127	; 0x7f
 801a0b0:	d8f0      	bhi.n	801a094 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 801a0b2:	697b      	ldr	r3, [r7, #20]
 801a0b4:	1c5a      	adds	r2, r3, #1
 801a0b6:	617a      	str	r2, [r7, #20]
 801a0b8:	693a      	ldr	r2, [r7, #16]
 801a0ba:	b2d2      	uxtb	r2, r2
 801a0bc:	701a      	strb	r2, [r3, #0]
 801a0be:	697b      	ldr	r3, [r7, #20]
 801a0c0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 801a0c2:	221b      	movs	r2, #27
 801a0c4:	6879      	ldr	r1, [r7, #4]
 801a0c6:	68b8      	ldr	r0, [r7, #8]
 801a0c8:	f7ff f880 	bl	80191cc <_SendPacket>
  RECORD_END();
 801a0cc:	68fb      	ldr	r3, [r7, #12]
 801a0ce:	f383 8811 	msr	BASEPRI, r3
}
 801a0d2:	bf00      	nop
 801a0d4:	3718      	adds	r7, #24
 801a0d6:	46bd      	mov	sp, r7
 801a0d8:	bd80      	pop	{r7, pc}
 801a0da:	bf00      	nop
 801a0dc:	2001b480 	.word	0x2001b480
 801a0e0:	2001b47c 	.word	0x2001b47c

0801a0e4 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 801a0e4:	b580      	push	{r7, lr}
 801a0e6:	b08a      	sub	sp, #40	; 0x28
 801a0e8:	af00      	add	r7, sp, #0
 801a0ea:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 801a0ec:	f3ef 8311 	mrs	r3, BASEPRI
 801a0f0:	f04f 0120 	mov.w	r1, #32
 801a0f4:	f381 8811 	msr	BASEPRI, r1
 801a0f8:	617b      	str	r3, [r7, #20]
 801a0fa:	4827      	ldr	r0, [pc, #156]	; (801a198 <SEGGER_SYSVIEW_Warn+0xb4>)
 801a0fc:	f7fe ff76 	bl	8018fec <_PreparePacket>
 801a100:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 801a102:	2280      	movs	r2, #128	; 0x80
 801a104:	6879      	ldr	r1, [r7, #4]
 801a106:	6938      	ldr	r0, [r7, #16]
 801a108:	f7fe ff20 	bl	8018f4c <_EncodeStr>
 801a10c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 801a10e:	68fb      	ldr	r3, [r7, #12]
 801a110:	627b      	str	r3, [r7, #36]	; 0x24
 801a112:	2301      	movs	r3, #1
 801a114:	623b      	str	r3, [r7, #32]
 801a116:	e00b      	b.n	801a130 <SEGGER_SYSVIEW_Warn+0x4c>
 801a118:	6a3b      	ldr	r3, [r7, #32]
 801a11a:	b2da      	uxtb	r2, r3
 801a11c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a11e:	1c59      	adds	r1, r3, #1
 801a120:	6279      	str	r1, [r7, #36]	; 0x24
 801a122:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801a126:	b2d2      	uxtb	r2, r2
 801a128:	701a      	strb	r2, [r3, #0]
 801a12a:	6a3b      	ldr	r3, [r7, #32]
 801a12c:	09db      	lsrs	r3, r3, #7
 801a12e:	623b      	str	r3, [r7, #32]
 801a130:	6a3b      	ldr	r3, [r7, #32]
 801a132:	2b7f      	cmp	r3, #127	; 0x7f
 801a134:	d8f0      	bhi.n	801a118 <SEGGER_SYSVIEW_Warn+0x34>
 801a136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a138:	1c5a      	adds	r2, r3, #1
 801a13a:	627a      	str	r2, [r7, #36]	; 0x24
 801a13c:	6a3a      	ldr	r2, [r7, #32]
 801a13e:	b2d2      	uxtb	r2, r2
 801a140:	701a      	strb	r2, [r3, #0]
 801a142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a144:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 801a146:	68fb      	ldr	r3, [r7, #12]
 801a148:	61fb      	str	r3, [r7, #28]
 801a14a:	2300      	movs	r3, #0
 801a14c:	61bb      	str	r3, [r7, #24]
 801a14e:	e00b      	b.n	801a168 <SEGGER_SYSVIEW_Warn+0x84>
 801a150:	69bb      	ldr	r3, [r7, #24]
 801a152:	b2da      	uxtb	r2, r3
 801a154:	69fb      	ldr	r3, [r7, #28]
 801a156:	1c59      	adds	r1, r3, #1
 801a158:	61f9      	str	r1, [r7, #28]
 801a15a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801a15e:	b2d2      	uxtb	r2, r2
 801a160:	701a      	strb	r2, [r3, #0]
 801a162:	69bb      	ldr	r3, [r7, #24]
 801a164:	09db      	lsrs	r3, r3, #7
 801a166:	61bb      	str	r3, [r7, #24]
 801a168:	69bb      	ldr	r3, [r7, #24]
 801a16a:	2b7f      	cmp	r3, #127	; 0x7f
 801a16c:	d8f0      	bhi.n	801a150 <SEGGER_SYSVIEW_Warn+0x6c>
 801a16e:	69fb      	ldr	r3, [r7, #28]
 801a170:	1c5a      	adds	r2, r3, #1
 801a172:	61fa      	str	r2, [r7, #28]
 801a174:	69ba      	ldr	r2, [r7, #24]
 801a176:	b2d2      	uxtb	r2, r2
 801a178:	701a      	strb	r2, [r3, #0]
 801a17a:	69fb      	ldr	r3, [r7, #28]
 801a17c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 801a17e:	221a      	movs	r2, #26
 801a180:	68f9      	ldr	r1, [r7, #12]
 801a182:	6938      	ldr	r0, [r7, #16]
 801a184:	f7ff f822 	bl	80191cc <_SendPacket>
  RECORD_END();
 801a188:	697b      	ldr	r3, [r7, #20]
 801a18a:	f383 8811 	msr	BASEPRI, r3
}
 801a18e:	bf00      	nop
 801a190:	3728      	adds	r7, #40	; 0x28
 801a192:	46bd      	mov	sp, r7
 801a194:	bd80      	pop	{r7, pc}
 801a196:	bf00      	nop
 801a198:	2001b480 	.word	0x2001b480

0801a19c <arm_pid_init_f32>:
 801a19c:	edd0 6a08 	vldr	s13, [r0, #32]
 801a1a0:	edd0 7a06 	vldr	s15, [r0, #24]
 801a1a4:	ed90 7a07 	vldr	s14, [r0, #28]
 801a1a8:	edc0 6a02 	vstr	s13, [r0, #8]
 801a1ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 801a1b0:	ee36 6aa6 	vadd.f32	s12, s13, s13
 801a1b4:	eef1 7a67 	vneg.f32	s15, s15
 801a1b8:	ee37 7a26 	vadd.f32	s14, s14, s13
 801a1bc:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801a1c0:	ed80 7a00 	vstr	s14, [r0]
 801a1c4:	edc0 7a01 	vstr	s15, [r0, #4]
 801a1c8:	b901      	cbnz	r1, 801a1cc <arm_pid_init_f32+0x30>
 801a1ca:	4770      	bx	lr
 801a1cc:	2300      	movs	r3, #0
 801a1ce:	60c3      	str	r3, [r0, #12]
 801a1d0:	6103      	str	r3, [r0, #16]
 801a1d2:	6143      	str	r3, [r0, #20]
 801a1d4:	4770      	bx	lr
 801a1d6:	bf00      	nop

0801a1d8 <__errno>:
 801a1d8:	4b01      	ldr	r3, [pc, #4]	; (801a1e0 <__errno+0x8>)
 801a1da:	6818      	ldr	r0, [r3, #0]
 801a1dc:	4770      	bx	lr
 801a1de:	bf00      	nop
 801a1e0:	200013c4 	.word	0x200013c4

0801a1e4 <__libc_init_array>:
 801a1e4:	b570      	push	{r4, r5, r6, lr}
 801a1e6:	4d0d      	ldr	r5, [pc, #52]	; (801a21c <__libc_init_array+0x38>)
 801a1e8:	4c0d      	ldr	r4, [pc, #52]	; (801a220 <__libc_init_array+0x3c>)
 801a1ea:	1b64      	subs	r4, r4, r5
 801a1ec:	10a4      	asrs	r4, r4, #2
 801a1ee:	2600      	movs	r6, #0
 801a1f0:	42a6      	cmp	r6, r4
 801a1f2:	d109      	bne.n	801a208 <__libc_init_array+0x24>
 801a1f4:	4d0b      	ldr	r5, [pc, #44]	; (801a224 <__libc_init_array+0x40>)
 801a1f6:	4c0c      	ldr	r4, [pc, #48]	; (801a228 <__libc_init_array+0x44>)
 801a1f8:	f000 fe22 	bl	801ae40 <_init>
 801a1fc:	1b64      	subs	r4, r4, r5
 801a1fe:	10a4      	asrs	r4, r4, #2
 801a200:	2600      	movs	r6, #0
 801a202:	42a6      	cmp	r6, r4
 801a204:	d105      	bne.n	801a212 <__libc_init_array+0x2e>
 801a206:	bd70      	pop	{r4, r5, r6, pc}
 801a208:	f855 3b04 	ldr.w	r3, [r5], #4
 801a20c:	4798      	blx	r3
 801a20e:	3601      	adds	r6, #1
 801a210:	e7ee      	b.n	801a1f0 <__libc_init_array+0xc>
 801a212:	f855 3b04 	ldr.w	r3, [r5], #4
 801a216:	4798      	blx	r3
 801a218:	3601      	adds	r6, #1
 801a21a:	e7f2      	b.n	801a202 <__libc_init_array+0x1e>
 801a21c:	0801b6b0 	.word	0x0801b6b0
 801a220:	0801b6b0 	.word	0x0801b6b0
 801a224:	0801b6b0 	.word	0x0801b6b0
 801a228:	0801b6b4 	.word	0x0801b6b4

0801a22c <__retarget_lock_acquire_recursive>:
 801a22c:	4770      	bx	lr

0801a22e <__retarget_lock_release_recursive>:
 801a22e:	4770      	bx	lr

0801a230 <memcmp>:
 801a230:	b530      	push	{r4, r5, lr}
 801a232:	3901      	subs	r1, #1
 801a234:	2400      	movs	r4, #0
 801a236:	42a2      	cmp	r2, r4
 801a238:	d101      	bne.n	801a23e <memcmp+0xe>
 801a23a:	2000      	movs	r0, #0
 801a23c:	e005      	b.n	801a24a <memcmp+0x1a>
 801a23e:	5d03      	ldrb	r3, [r0, r4]
 801a240:	3401      	adds	r4, #1
 801a242:	5d0d      	ldrb	r5, [r1, r4]
 801a244:	42ab      	cmp	r3, r5
 801a246:	d0f6      	beq.n	801a236 <memcmp+0x6>
 801a248:	1b58      	subs	r0, r3, r5
 801a24a:	bd30      	pop	{r4, r5, pc}

0801a24c <memcpy>:
 801a24c:	440a      	add	r2, r1
 801a24e:	4291      	cmp	r1, r2
 801a250:	f100 33ff 	add.w	r3, r0, #4294967295
 801a254:	d100      	bne.n	801a258 <memcpy+0xc>
 801a256:	4770      	bx	lr
 801a258:	b510      	push	{r4, lr}
 801a25a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a25e:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a262:	4291      	cmp	r1, r2
 801a264:	d1f9      	bne.n	801a25a <memcpy+0xe>
 801a266:	bd10      	pop	{r4, pc}

0801a268 <memset>:
 801a268:	4402      	add	r2, r0
 801a26a:	4603      	mov	r3, r0
 801a26c:	4293      	cmp	r3, r2
 801a26e:	d100      	bne.n	801a272 <memset+0xa>
 801a270:	4770      	bx	lr
 801a272:	f803 1b01 	strb.w	r1, [r3], #1
 801a276:	e7f9      	b.n	801a26c <memset+0x4>

0801a278 <cleanup_glue>:
 801a278:	b538      	push	{r3, r4, r5, lr}
 801a27a:	460c      	mov	r4, r1
 801a27c:	6809      	ldr	r1, [r1, #0]
 801a27e:	4605      	mov	r5, r0
 801a280:	b109      	cbz	r1, 801a286 <cleanup_glue+0xe>
 801a282:	f7ff fff9 	bl	801a278 <cleanup_glue>
 801a286:	4621      	mov	r1, r4
 801a288:	4628      	mov	r0, r5
 801a28a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a28e:	f000 b869 	b.w	801a364 <_free_r>
	...

0801a294 <_reclaim_reent>:
 801a294:	4b2c      	ldr	r3, [pc, #176]	; (801a348 <_reclaim_reent+0xb4>)
 801a296:	681b      	ldr	r3, [r3, #0]
 801a298:	4283      	cmp	r3, r0
 801a29a:	b570      	push	{r4, r5, r6, lr}
 801a29c:	4604      	mov	r4, r0
 801a29e:	d051      	beq.n	801a344 <_reclaim_reent+0xb0>
 801a2a0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801a2a2:	b143      	cbz	r3, 801a2b6 <_reclaim_reent+0x22>
 801a2a4:	68db      	ldr	r3, [r3, #12]
 801a2a6:	2b00      	cmp	r3, #0
 801a2a8:	d14a      	bne.n	801a340 <_reclaim_reent+0xac>
 801a2aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a2ac:	6819      	ldr	r1, [r3, #0]
 801a2ae:	b111      	cbz	r1, 801a2b6 <_reclaim_reent+0x22>
 801a2b0:	4620      	mov	r0, r4
 801a2b2:	f000 f857 	bl	801a364 <_free_r>
 801a2b6:	6961      	ldr	r1, [r4, #20]
 801a2b8:	b111      	cbz	r1, 801a2c0 <_reclaim_reent+0x2c>
 801a2ba:	4620      	mov	r0, r4
 801a2bc:	f000 f852 	bl	801a364 <_free_r>
 801a2c0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801a2c2:	b111      	cbz	r1, 801a2ca <_reclaim_reent+0x36>
 801a2c4:	4620      	mov	r0, r4
 801a2c6:	f000 f84d 	bl	801a364 <_free_r>
 801a2ca:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801a2cc:	b111      	cbz	r1, 801a2d4 <_reclaim_reent+0x40>
 801a2ce:	4620      	mov	r0, r4
 801a2d0:	f000 f848 	bl	801a364 <_free_r>
 801a2d4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801a2d6:	b111      	cbz	r1, 801a2de <_reclaim_reent+0x4a>
 801a2d8:	4620      	mov	r0, r4
 801a2da:	f000 f843 	bl	801a364 <_free_r>
 801a2de:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801a2e0:	b111      	cbz	r1, 801a2e8 <_reclaim_reent+0x54>
 801a2e2:	4620      	mov	r0, r4
 801a2e4:	f000 f83e 	bl	801a364 <_free_r>
 801a2e8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801a2ea:	b111      	cbz	r1, 801a2f2 <_reclaim_reent+0x5e>
 801a2ec:	4620      	mov	r0, r4
 801a2ee:	f000 f839 	bl	801a364 <_free_r>
 801a2f2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801a2f4:	b111      	cbz	r1, 801a2fc <_reclaim_reent+0x68>
 801a2f6:	4620      	mov	r0, r4
 801a2f8:	f000 f834 	bl	801a364 <_free_r>
 801a2fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a2fe:	b111      	cbz	r1, 801a306 <_reclaim_reent+0x72>
 801a300:	4620      	mov	r0, r4
 801a302:	f000 f82f 	bl	801a364 <_free_r>
 801a306:	69a3      	ldr	r3, [r4, #24]
 801a308:	b1e3      	cbz	r3, 801a344 <_reclaim_reent+0xb0>
 801a30a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801a30c:	4620      	mov	r0, r4
 801a30e:	4798      	blx	r3
 801a310:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801a312:	b1b9      	cbz	r1, 801a344 <_reclaim_reent+0xb0>
 801a314:	4620      	mov	r0, r4
 801a316:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a31a:	f7ff bfad 	b.w	801a278 <cleanup_glue>
 801a31e:	5949      	ldr	r1, [r1, r5]
 801a320:	b941      	cbnz	r1, 801a334 <_reclaim_reent+0xa0>
 801a322:	3504      	adds	r5, #4
 801a324:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a326:	2d80      	cmp	r5, #128	; 0x80
 801a328:	68d9      	ldr	r1, [r3, #12]
 801a32a:	d1f8      	bne.n	801a31e <_reclaim_reent+0x8a>
 801a32c:	4620      	mov	r0, r4
 801a32e:	f000 f819 	bl	801a364 <_free_r>
 801a332:	e7ba      	b.n	801a2aa <_reclaim_reent+0x16>
 801a334:	680e      	ldr	r6, [r1, #0]
 801a336:	4620      	mov	r0, r4
 801a338:	f000 f814 	bl	801a364 <_free_r>
 801a33c:	4631      	mov	r1, r6
 801a33e:	e7ef      	b.n	801a320 <_reclaim_reent+0x8c>
 801a340:	2500      	movs	r5, #0
 801a342:	e7ef      	b.n	801a324 <_reclaim_reent+0x90>
 801a344:	bd70      	pop	{r4, r5, r6, pc}
 801a346:	bf00      	nop
 801a348:	200013c4 	.word	0x200013c4

0801a34c <__malloc_lock>:
 801a34c:	4801      	ldr	r0, [pc, #4]	; (801a354 <__malloc_lock+0x8>)
 801a34e:	f7ff bf6d 	b.w	801a22c <__retarget_lock_acquire_recursive>
 801a352:	bf00      	nop
 801a354:	2001ea14 	.word	0x2001ea14

0801a358 <__malloc_unlock>:
 801a358:	4801      	ldr	r0, [pc, #4]	; (801a360 <__malloc_unlock+0x8>)
 801a35a:	f7ff bf68 	b.w	801a22e <__retarget_lock_release_recursive>
 801a35e:	bf00      	nop
 801a360:	2001ea14 	.word	0x2001ea14

0801a364 <_free_r>:
 801a364:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a366:	2900      	cmp	r1, #0
 801a368:	d048      	beq.n	801a3fc <_free_r+0x98>
 801a36a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a36e:	9001      	str	r0, [sp, #4]
 801a370:	2b00      	cmp	r3, #0
 801a372:	f1a1 0404 	sub.w	r4, r1, #4
 801a376:	bfb8      	it	lt
 801a378:	18e4      	addlt	r4, r4, r3
 801a37a:	f7ff ffe7 	bl	801a34c <__malloc_lock>
 801a37e:	4a20      	ldr	r2, [pc, #128]	; (801a400 <_free_r+0x9c>)
 801a380:	9801      	ldr	r0, [sp, #4]
 801a382:	6813      	ldr	r3, [r2, #0]
 801a384:	4615      	mov	r5, r2
 801a386:	b933      	cbnz	r3, 801a396 <_free_r+0x32>
 801a388:	6063      	str	r3, [r4, #4]
 801a38a:	6014      	str	r4, [r2, #0]
 801a38c:	b003      	add	sp, #12
 801a38e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a392:	f7ff bfe1 	b.w	801a358 <__malloc_unlock>
 801a396:	42a3      	cmp	r3, r4
 801a398:	d90b      	bls.n	801a3b2 <_free_r+0x4e>
 801a39a:	6821      	ldr	r1, [r4, #0]
 801a39c:	1862      	adds	r2, r4, r1
 801a39e:	4293      	cmp	r3, r2
 801a3a0:	bf04      	itt	eq
 801a3a2:	681a      	ldreq	r2, [r3, #0]
 801a3a4:	685b      	ldreq	r3, [r3, #4]
 801a3a6:	6063      	str	r3, [r4, #4]
 801a3a8:	bf04      	itt	eq
 801a3aa:	1852      	addeq	r2, r2, r1
 801a3ac:	6022      	streq	r2, [r4, #0]
 801a3ae:	602c      	str	r4, [r5, #0]
 801a3b0:	e7ec      	b.n	801a38c <_free_r+0x28>
 801a3b2:	461a      	mov	r2, r3
 801a3b4:	685b      	ldr	r3, [r3, #4]
 801a3b6:	b10b      	cbz	r3, 801a3bc <_free_r+0x58>
 801a3b8:	42a3      	cmp	r3, r4
 801a3ba:	d9fa      	bls.n	801a3b2 <_free_r+0x4e>
 801a3bc:	6811      	ldr	r1, [r2, #0]
 801a3be:	1855      	adds	r5, r2, r1
 801a3c0:	42a5      	cmp	r5, r4
 801a3c2:	d10b      	bne.n	801a3dc <_free_r+0x78>
 801a3c4:	6824      	ldr	r4, [r4, #0]
 801a3c6:	4421      	add	r1, r4
 801a3c8:	1854      	adds	r4, r2, r1
 801a3ca:	42a3      	cmp	r3, r4
 801a3cc:	6011      	str	r1, [r2, #0]
 801a3ce:	d1dd      	bne.n	801a38c <_free_r+0x28>
 801a3d0:	681c      	ldr	r4, [r3, #0]
 801a3d2:	685b      	ldr	r3, [r3, #4]
 801a3d4:	6053      	str	r3, [r2, #4]
 801a3d6:	4421      	add	r1, r4
 801a3d8:	6011      	str	r1, [r2, #0]
 801a3da:	e7d7      	b.n	801a38c <_free_r+0x28>
 801a3dc:	d902      	bls.n	801a3e4 <_free_r+0x80>
 801a3de:	230c      	movs	r3, #12
 801a3e0:	6003      	str	r3, [r0, #0]
 801a3e2:	e7d3      	b.n	801a38c <_free_r+0x28>
 801a3e4:	6825      	ldr	r5, [r4, #0]
 801a3e6:	1961      	adds	r1, r4, r5
 801a3e8:	428b      	cmp	r3, r1
 801a3ea:	bf04      	itt	eq
 801a3ec:	6819      	ldreq	r1, [r3, #0]
 801a3ee:	685b      	ldreq	r3, [r3, #4]
 801a3f0:	6063      	str	r3, [r4, #4]
 801a3f2:	bf04      	itt	eq
 801a3f4:	1949      	addeq	r1, r1, r5
 801a3f6:	6021      	streq	r1, [r4, #0]
 801a3f8:	6054      	str	r4, [r2, #4]
 801a3fa:	e7c7      	b.n	801a38c <_free_r+0x28>
 801a3fc:	b003      	add	sp, #12
 801a3fe:	bd30      	pop	{r4, r5, pc}
 801a400:	2001b564 	.word	0x2001b564

0801a404 <fmax>:
 801a404:	b508      	push	{r3, lr}
 801a406:	ed2d 8b04 	vpush	{d8-d9}
 801a40a:	eeb0 8a40 	vmov.f32	s16, s0
 801a40e:	eef0 8a60 	vmov.f32	s17, s1
 801a412:	eeb0 9a41 	vmov.f32	s18, s2
 801a416:	eef0 9a61 	vmov.f32	s19, s3
 801a41a:	f000 f81b 	bl	801a454 <__fpclassifyd>
 801a41e:	b168      	cbz	r0, 801a43c <fmax+0x38>
 801a420:	eeb0 0a49 	vmov.f32	s0, s18
 801a424:	eef0 0a69 	vmov.f32	s1, s19
 801a428:	f000 f814 	bl	801a454 <__fpclassifyd>
 801a42c:	b150      	cbz	r0, 801a444 <fmax+0x40>
 801a42e:	ec53 2b19 	vmov	r2, r3, d9
 801a432:	ec51 0b18 	vmov	r0, r1, d8
 801a436:	f7e6 fb61 	bl	8000afc <__aeabi_dcmpgt>
 801a43a:	b918      	cbnz	r0, 801a444 <fmax+0x40>
 801a43c:	eeb0 8a49 	vmov.f32	s16, s18
 801a440:	eef0 8a69 	vmov.f32	s17, s19
 801a444:	eeb0 0a48 	vmov.f32	s0, s16
 801a448:	eef0 0a68 	vmov.f32	s1, s17
 801a44c:	ecbd 8b04 	vpop	{d8-d9}
 801a450:	bd08      	pop	{r3, pc}
	...

0801a454 <__fpclassifyd>:
 801a454:	ec51 0b10 	vmov	r0, r1, d0
 801a458:	b510      	push	{r4, lr}
 801a45a:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
 801a45e:	460b      	mov	r3, r1
 801a460:	d019      	beq.n	801a496 <__fpclassifyd+0x42>
 801a462:	f5a1 1280 	sub.w	r2, r1, #1048576	; 0x100000
 801a466:	490e      	ldr	r1, [pc, #56]	; (801a4a0 <__fpclassifyd+0x4c>)
 801a468:	428a      	cmp	r2, r1
 801a46a:	d90e      	bls.n	801a48a <__fpclassifyd+0x36>
 801a46c:	f103 42ff 	add.w	r2, r3, #2139095040	; 0x7f800000
 801a470:	f502 02e0 	add.w	r2, r2, #7340032	; 0x700000
 801a474:	428a      	cmp	r2, r1
 801a476:	d908      	bls.n	801a48a <__fpclassifyd+0x36>
 801a478:	4a0a      	ldr	r2, [pc, #40]	; (801a4a4 <__fpclassifyd+0x50>)
 801a47a:	4213      	tst	r3, r2
 801a47c:	d007      	beq.n	801a48e <__fpclassifyd+0x3a>
 801a47e:	4294      	cmp	r4, r2
 801a480:	d107      	bne.n	801a492 <__fpclassifyd+0x3e>
 801a482:	fab0 f080 	clz	r0, r0
 801a486:	0940      	lsrs	r0, r0, #5
 801a488:	bd10      	pop	{r4, pc}
 801a48a:	2004      	movs	r0, #4
 801a48c:	e7fc      	b.n	801a488 <__fpclassifyd+0x34>
 801a48e:	2003      	movs	r0, #3
 801a490:	e7fa      	b.n	801a488 <__fpclassifyd+0x34>
 801a492:	2000      	movs	r0, #0
 801a494:	e7f8      	b.n	801a488 <__fpclassifyd+0x34>
 801a496:	2800      	cmp	r0, #0
 801a498:	d1ee      	bne.n	801a478 <__fpclassifyd+0x24>
 801a49a:	2002      	movs	r0, #2
 801a49c:	e7f4      	b.n	801a488 <__fpclassifyd+0x34>
 801a49e:	bf00      	nop
 801a4a0:	7fdfffff 	.word	0x7fdfffff
 801a4a4:	7ff00000 	.word	0x7ff00000

0801a4a8 <exp>:
 801a4a8:	b538      	push	{r3, r4, r5, lr}
 801a4aa:	ed2d 8b02 	vpush	{d8}
 801a4ae:	ec55 4b10 	vmov	r4, r5, d0
 801a4b2:	f000 f8c5 	bl	801a640 <__ieee754_exp>
 801a4b6:	4b22      	ldr	r3, [pc, #136]	; (801a540 <exp+0x98>)
 801a4b8:	eeb0 8a40 	vmov.f32	s16, s0
 801a4bc:	eef0 8a60 	vmov.f32	s17, s1
 801a4c0:	f993 3000 	ldrsb.w	r3, [r3]
 801a4c4:	3301      	adds	r3, #1
 801a4c6:	d012      	beq.n	801a4ee <exp+0x46>
 801a4c8:	ec45 4b10 	vmov	d0, r4, r5
 801a4cc:	f000 fca2 	bl	801ae14 <finite>
 801a4d0:	b168      	cbz	r0, 801a4ee <exp+0x46>
 801a4d2:	a313      	add	r3, pc, #76	; (adr r3, 801a520 <exp+0x78>)
 801a4d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a4d8:	4620      	mov	r0, r4
 801a4da:	4629      	mov	r1, r5
 801a4dc:	f7e6 fb0e 	bl	8000afc <__aeabi_dcmpgt>
 801a4e0:	b160      	cbz	r0, 801a4fc <exp+0x54>
 801a4e2:	f7ff fe79 	bl	801a1d8 <__errno>
 801a4e6:	ed9f 8b10 	vldr	d8, [pc, #64]	; 801a528 <exp+0x80>
 801a4ea:	2322      	movs	r3, #34	; 0x22
 801a4ec:	6003      	str	r3, [r0, #0]
 801a4ee:	eeb0 0a48 	vmov.f32	s0, s16
 801a4f2:	eef0 0a68 	vmov.f32	s1, s17
 801a4f6:	ecbd 8b02 	vpop	{d8}
 801a4fa:	bd38      	pop	{r3, r4, r5, pc}
 801a4fc:	a30c      	add	r3, pc, #48	; (adr r3, 801a530 <exp+0x88>)
 801a4fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a502:	4620      	mov	r0, r4
 801a504:	4629      	mov	r1, r5
 801a506:	f7e6 fadb 	bl	8000ac0 <__aeabi_dcmplt>
 801a50a:	2800      	cmp	r0, #0
 801a50c:	d0ef      	beq.n	801a4ee <exp+0x46>
 801a50e:	f7ff fe63 	bl	801a1d8 <__errno>
 801a512:	2322      	movs	r3, #34	; 0x22
 801a514:	ed9f 8b08 	vldr	d8, [pc, #32]	; 801a538 <exp+0x90>
 801a518:	6003      	str	r3, [r0, #0]
 801a51a:	e7e8      	b.n	801a4ee <exp+0x46>
 801a51c:	f3af 8000 	nop.w
 801a520:	fefa39ef 	.word	0xfefa39ef
 801a524:	40862e42 	.word	0x40862e42
 801a528:	00000000 	.word	0x00000000
 801a52c:	7ff00000 	.word	0x7ff00000
 801a530:	d52d3051 	.word	0xd52d3051
 801a534:	c0874910 	.word	0xc0874910
	...
 801a540:	20001428 	.word	0x20001428
 801a544:	00000000 	.word	0x00000000

0801a548 <log>:
 801a548:	b538      	push	{r3, r4, r5, lr}
 801a54a:	ed2d 8b02 	vpush	{d8}
 801a54e:	ec55 4b10 	vmov	r4, r5, d0
 801a552:	f000 f9f1 	bl	801a938 <__ieee754_log>
 801a556:	4b1e      	ldr	r3, [pc, #120]	; (801a5d0 <log+0x88>)
 801a558:	eeb0 8a40 	vmov.f32	s16, s0
 801a55c:	eef0 8a60 	vmov.f32	s17, s1
 801a560:	f993 3000 	ldrsb.w	r3, [r3]
 801a564:	3301      	adds	r3, #1
 801a566:	d01a      	beq.n	801a59e <log+0x56>
 801a568:	4622      	mov	r2, r4
 801a56a:	462b      	mov	r3, r5
 801a56c:	4620      	mov	r0, r4
 801a56e:	4629      	mov	r1, r5
 801a570:	f7e6 face 	bl	8000b10 <__aeabi_dcmpun>
 801a574:	b998      	cbnz	r0, 801a59e <log+0x56>
 801a576:	2200      	movs	r2, #0
 801a578:	2300      	movs	r3, #0
 801a57a:	4620      	mov	r0, r4
 801a57c:	4629      	mov	r1, r5
 801a57e:	f7e6 fabd 	bl	8000afc <__aeabi_dcmpgt>
 801a582:	b960      	cbnz	r0, 801a59e <log+0x56>
 801a584:	2200      	movs	r2, #0
 801a586:	2300      	movs	r3, #0
 801a588:	4620      	mov	r0, r4
 801a58a:	4629      	mov	r1, r5
 801a58c:	f7e6 fa8e 	bl	8000aac <__aeabi_dcmpeq>
 801a590:	b160      	cbz	r0, 801a5ac <log+0x64>
 801a592:	f7ff fe21 	bl	801a1d8 <__errno>
 801a596:	ed9f 8b0c 	vldr	d8, [pc, #48]	; 801a5c8 <log+0x80>
 801a59a:	2322      	movs	r3, #34	; 0x22
 801a59c:	6003      	str	r3, [r0, #0]
 801a59e:	eeb0 0a48 	vmov.f32	s0, s16
 801a5a2:	eef0 0a68 	vmov.f32	s1, s17
 801a5a6:	ecbd 8b02 	vpop	{d8}
 801a5aa:	bd38      	pop	{r3, r4, r5, pc}
 801a5ac:	f7ff fe14 	bl	801a1d8 <__errno>
 801a5b0:	ecbd 8b02 	vpop	{d8}
 801a5b4:	2321      	movs	r3, #33	; 0x21
 801a5b6:	6003      	str	r3, [r0, #0]
 801a5b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a5bc:	4805      	ldr	r0, [pc, #20]	; (801a5d4 <log+0x8c>)
 801a5be:	f000 bc37 	b.w	801ae30 <nan>
 801a5c2:	bf00      	nop
 801a5c4:	f3af 8000 	nop.w
 801a5c8:	00000000 	.word	0x00000000
 801a5cc:	fff00000 	.word	0xfff00000
 801a5d0:	20001428 	.word	0x20001428
 801a5d4:	0801b674 	.word	0x0801b674

0801a5d8 <sqrt>:
 801a5d8:	b538      	push	{r3, r4, r5, lr}
 801a5da:	ed2d 8b02 	vpush	{d8}
 801a5de:	ec55 4b10 	vmov	r4, r5, d0
 801a5e2:	f000 fb63 	bl	801acac <__ieee754_sqrt>
 801a5e6:	4b15      	ldr	r3, [pc, #84]	; (801a63c <sqrt+0x64>)
 801a5e8:	eeb0 8a40 	vmov.f32	s16, s0
 801a5ec:	eef0 8a60 	vmov.f32	s17, s1
 801a5f0:	f993 3000 	ldrsb.w	r3, [r3]
 801a5f4:	3301      	adds	r3, #1
 801a5f6:	d019      	beq.n	801a62c <sqrt+0x54>
 801a5f8:	4622      	mov	r2, r4
 801a5fa:	462b      	mov	r3, r5
 801a5fc:	4620      	mov	r0, r4
 801a5fe:	4629      	mov	r1, r5
 801a600:	f7e6 fa86 	bl	8000b10 <__aeabi_dcmpun>
 801a604:	b990      	cbnz	r0, 801a62c <sqrt+0x54>
 801a606:	2200      	movs	r2, #0
 801a608:	2300      	movs	r3, #0
 801a60a:	4620      	mov	r0, r4
 801a60c:	4629      	mov	r1, r5
 801a60e:	f7e6 fa57 	bl	8000ac0 <__aeabi_dcmplt>
 801a612:	b158      	cbz	r0, 801a62c <sqrt+0x54>
 801a614:	f7ff fde0 	bl	801a1d8 <__errno>
 801a618:	2321      	movs	r3, #33	; 0x21
 801a61a:	6003      	str	r3, [r0, #0]
 801a61c:	2200      	movs	r2, #0
 801a61e:	2300      	movs	r3, #0
 801a620:	4610      	mov	r0, r2
 801a622:	4619      	mov	r1, r3
 801a624:	f7e6 f904 	bl	8000830 <__aeabi_ddiv>
 801a628:	ec41 0b18 	vmov	d8, r0, r1
 801a62c:	eeb0 0a48 	vmov.f32	s0, s16
 801a630:	eef0 0a68 	vmov.f32	s1, s17
 801a634:	ecbd 8b02 	vpop	{d8}
 801a638:	bd38      	pop	{r3, r4, r5, pc}
 801a63a:	bf00      	nop
 801a63c:	20001428 	.word	0x20001428

0801a640 <__ieee754_exp>:
 801a640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a644:	ec55 4b10 	vmov	r4, r5, d0
 801a648:	49b1      	ldr	r1, [pc, #708]	; (801a910 <__ieee754_exp+0x2d0>)
 801a64a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801a64e:	428b      	cmp	r3, r1
 801a650:	ed2d 8b04 	vpush	{d8-d9}
 801a654:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 801a658:	d937      	bls.n	801a6ca <__ieee754_exp+0x8a>
 801a65a:	49ae      	ldr	r1, [pc, #696]	; (801a914 <__ieee754_exp+0x2d4>)
 801a65c:	428b      	cmp	r3, r1
 801a65e:	d916      	bls.n	801a68e <__ieee754_exp+0x4e>
 801a660:	ee10 3a10 	vmov	r3, s0
 801a664:	f3c5 0213 	ubfx	r2, r5, #0, #20
 801a668:	4313      	orrs	r3, r2
 801a66a:	d009      	beq.n	801a680 <__ieee754_exp+0x40>
 801a66c:	ee10 2a10 	vmov	r2, s0
 801a670:	462b      	mov	r3, r5
 801a672:	4620      	mov	r0, r4
 801a674:	4629      	mov	r1, r5
 801a676:	f7e5 fdfb 	bl	8000270 <__adddf3>
 801a67a:	4604      	mov	r4, r0
 801a67c:	460d      	mov	r5, r1
 801a67e:	e000      	b.n	801a682 <__ieee754_exp+0x42>
 801a680:	bb06      	cbnz	r6, 801a6c4 <__ieee754_exp+0x84>
 801a682:	ecbd 8b04 	vpop	{d8-d9}
 801a686:	ec45 4b10 	vmov	d0, r4, r5
 801a68a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a68e:	a38a      	add	r3, pc, #552	; (adr r3, 801a8b8 <__ieee754_exp+0x278>)
 801a690:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a694:	ee10 0a10 	vmov	r0, s0
 801a698:	4629      	mov	r1, r5
 801a69a:	f7e6 fa2f 	bl	8000afc <__aeabi_dcmpgt>
 801a69e:	b138      	cbz	r0, 801a6b0 <__ieee754_exp+0x70>
 801a6a0:	a387      	add	r3, pc, #540	; (adr r3, 801a8c0 <__ieee754_exp+0x280>)
 801a6a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a6a6:	4610      	mov	r0, r2
 801a6a8:	4619      	mov	r1, r3
 801a6aa:	f7e5 ff97 	bl	80005dc <__aeabi_dmul>
 801a6ae:	e7e4      	b.n	801a67a <__ieee754_exp+0x3a>
 801a6b0:	a385      	add	r3, pc, #532	; (adr r3, 801a8c8 <__ieee754_exp+0x288>)
 801a6b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a6b6:	4620      	mov	r0, r4
 801a6b8:	4629      	mov	r1, r5
 801a6ba:	f7e6 fa01 	bl	8000ac0 <__aeabi_dcmplt>
 801a6be:	2800      	cmp	r0, #0
 801a6c0:	f000 8087 	beq.w	801a7d2 <__ieee754_exp+0x192>
 801a6c4:	2400      	movs	r4, #0
 801a6c6:	2500      	movs	r5, #0
 801a6c8:	e7db      	b.n	801a682 <__ieee754_exp+0x42>
 801a6ca:	4a93      	ldr	r2, [pc, #588]	; (801a918 <__ieee754_exp+0x2d8>)
 801a6cc:	4293      	cmp	r3, r2
 801a6ce:	f240 80ac 	bls.w	801a82a <__ieee754_exp+0x1ea>
 801a6d2:	4a92      	ldr	r2, [pc, #584]	; (801a91c <__ieee754_exp+0x2dc>)
 801a6d4:	4293      	cmp	r3, r2
 801a6d6:	d87c      	bhi.n	801a7d2 <__ieee754_exp+0x192>
 801a6d8:	4b91      	ldr	r3, [pc, #580]	; (801a920 <__ieee754_exp+0x2e0>)
 801a6da:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801a6de:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a6e2:	ee10 0a10 	vmov	r0, s0
 801a6e6:	4629      	mov	r1, r5
 801a6e8:	f7e5 fdc0 	bl	800026c <__aeabi_dsub>
 801a6ec:	4b8d      	ldr	r3, [pc, #564]	; (801a924 <__ieee754_exp+0x2e4>)
 801a6ee:	00f7      	lsls	r7, r6, #3
 801a6f0:	443b      	add	r3, r7
 801a6f2:	ed93 7b00 	vldr	d7, [r3]
 801a6f6:	f1c6 0a01 	rsb	sl, r6, #1
 801a6fa:	4680      	mov	r8, r0
 801a6fc:	4689      	mov	r9, r1
 801a6fe:	ebaa 0a06 	sub.w	sl, sl, r6
 801a702:	eeb0 8a47 	vmov.f32	s16, s14
 801a706:	eef0 8a67 	vmov.f32	s17, s15
 801a70a:	ec53 2b18 	vmov	r2, r3, d8
 801a70e:	4640      	mov	r0, r8
 801a710:	4649      	mov	r1, r9
 801a712:	f7e5 fdab 	bl	800026c <__aeabi_dsub>
 801a716:	4604      	mov	r4, r0
 801a718:	460d      	mov	r5, r1
 801a71a:	4622      	mov	r2, r4
 801a71c:	462b      	mov	r3, r5
 801a71e:	4620      	mov	r0, r4
 801a720:	4629      	mov	r1, r5
 801a722:	f7e5 ff5b 	bl	80005dc <__aeabi_dmul>
 801a726:	a36a      	add	r3, pc, #424	; (adr r3, 801a8d0 <__ieee754_exp+0x290>)
 801a728:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a72c:	4606      	mov	r6, r0
 801a72e:	460f      	mov	r7, r1
 801a730:	f7e5 ff54 	bl	80005dc <__aeabi_dmul>
 801a734:	a368      	add	r3, pc, #416	; (adr r3, 801a8d8 <__ieee754_exp+0x298>)
 801a736:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a73a:	f7e5 fd97 	bl	800026c <__aeabi_dsub>
 801a73e:	4632      	mov	r2, r6
 801a740:	463b      	mov	r3, r7
 801a742:	f7e5 ff4b 	bl	80005dc <__aeabi_dmul>
 801a746:	a366      	add	r3, pc, #408	; (adr r3, 801a8e0 <__ieee754_exp+0x2a0>)
 801a748:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a74c:	f7e5 fd90 	bl	8000270 <__adddf3>
 801a750:	4632      	mov	r2, r6
 801a752:	463b      	mov	r3, r7
 801a754:	f7e5 ff42 	bl	80005dc <__aeabi_dmul>
 801a758:	a363      	add	r3, pc, #396	; (adr r3, 801a8e8 <__ieee754_exp+0x2a8>)
 801a75a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a75e:	f7e5 fd85 	bl	800026c <__aeabi_dsub>
 801a762:	4632      	mov	r2, r6
 801a764:	463b      	mov	r3, r7
 801a766:	f7e5 ff39 	bl	80005dc <__aeabi_dmul>
 801a76a:	a361      	add	r3, pc, #388	; (adr r3, 801a8f0 <__ieee754_exp+0x2b0>)
 801a76c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a770:	f7e5 fd7e 	bl	8000270 <__adddf3>
 801a774:	4632      	mov	r2, r6
 801a776:	463b      	mov	r3, r7
 801a778:	f7e5 ff30 	bl	80005dc <__aeabi_dmul>
 801a77c:	4602      	mov	r2, r0
 801a77e:	460b      	mov	r3, r1
 801a780:	4620      	mov	r0, r4
 801a782:	4629      	mov	r1, r5
 801a784:	f7e5 fd72 	bl	800026c <__aeabi_dsub>
 801a788:	4602      	mov	r2, r0
 801a78a:	460b      	mov	r3, r1
 801a78c:	4606      	mov	r6, r0
 801a78e:	460f      	mov	r7, r1
 801a790:	4620      	mov	r0, r4
 801a792:	4629      	mov	r1, r5
 801a794:	f7e5 ff22 	bl	80005dc <__aeabi_dmul>
 801a798:	ec41 0b19 	vmov	d9, r0, r1
 801a79c:	f1ba 0f00 	cmp.w	sl, #0
 801a7a0:	d15d      	bne.n	801a85e <__ieee754_exp+0x21e>
 801a7a2:	2200      	movs	r2, #0
 801a7a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801a7a8:	4630      	mov	r0, r6
 801a7aa:	4639      	mov	r1, r7
 801a7ac:	f7e5 fd5e 	bl	800026c <__aeabi_dsub>
 801a7b0:	4602      	mov	r2, r0
 801a7b2:	460b      	mov	r3, r1
 801a7b4:	ec51 0b19 	vmov	r0, r1, d9
 801a7b8:	f7e6 f83a 	bl	8000830 <__aeabi_ddiv>
 801a7bc:	4622      	mov	r2, r4
 801a7be:	462b      	mov	r3, r5
 801a7c0:	f7e5 fd54 	bl	800026c <__aeabi_dsub>
 801a7c4:	4602      	mov	r2, r0
 801a7c6:	460b      	mov	r3, r1
 801a7c8:	2000      	movs	r0, #0
 801a7ca:	4957      	ldr	r1, [pc, #348]	; (801a928 <__ieee754_exp+0x2e8>)
 801a7cc:	f7e5 fd4e 	bl	800026c <__aeabi_dsub>
 801a7d0:	e753      	b.n	801a67a <__ieee754_exp+0x3a>
 801a7d2:	4856      	ldr	r0, [pc, #344]	; (801a92c <__ieee754_exp+0x2ec>)
 801a7d4:	a348      	add	r3, pc, #288	; (adr r3, 801a8f8 <__ieee754_exp+0x2b8>)
 801a7d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a7da:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 801a7de:	4629      	mov	r1, r5
 801a7e0:	4620      	mov	r0, r4
 801a7e2:	f7e5 fefb 	bl	80005dc <__aeabi_dmul>
 801a7e6:	e9d6 2300 	ldrd	r2, r3, [r6]
 801a7ea:	f7e5 fd41 	bl	8000270 <__adddf3>
 801a7ee:	f7e6 f9a5 	bl	8000b3c <__aeabi_d2iz>
 801a7f2:	4682      	mov	sl, r0
 801a7f4:	f7e5 fe88 	bl	8000508 <__aeabi_i2d>
 801a7f8:	a341      	add	r3, pc, #260	; (adr r3, 801a900 <__ieee754_exp+0x2c0>)
 801a7fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a7fe:	4606      	mov	r6, r0
 801a800:	460f      	mov	r7, r1
 801a802:	f7e5 feeb 	bl	80005dc <__aeabi_dmul>
 801a806:	4602      	mov	r2, r0
 801a808:	460b      	mov	r3, r1
 801a80a:	4620      	mov	r0, r4
 801a80c:	4629      	mov	r1, r5
 801a80e:	f7e5 fd2d 	bl	800026c <__aeabi_dsub>
 801a812:	a33d      	add	r3, pc, #244	; (adr r3, 801a908 <__ieee754_exp+0x2c8>)
 801a814:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a818:	4680      	mov	r8, r0
 801a81a:	4689      	mov	r9, r1
 801a81c:	4630      	mov	r0, r6
 801a81e:	4639      	mov	r1, r7
 801a820:	f7e5 fedc 	bl	80005dc <__aeabi_dmul>
 801a824:	ec41 0b18 	vmov	d8, r0, r1
 801a828:	e76f      	b.n	801a70a <__ieee754_exp+0xca>
 801a82a:	4a41      	ldr	r2, [pc, #260]	; (801a930 <__ieee754_exp+0x2f0>)
 801a82c:	4293      	cmp	r3, r2
 801a82e:	d811      	bhi.n	801a854 <__ieee754_exp+0x214>
 801a830:	a323      	add	r3, pc, #140	; (adr r3, 801a8c0 <__ieee754_exp+0x280>)
 801a832:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a836:	ee10 0a10 	vmov	r0, s0
 801a83a:	4629      	mov	r1, r5
 801a83c:	f7e5 fd18 	bl	8000270 <__adddf3>
 801a840:	4b39      	ldr	r3, [pc, #228]	; (801a928 <__ieee754_exp+0x2e8>)
 801a842:	2200      	movs	r2, #0
 801a844:	f7e6 f95a 	bl	8000afc <__aeabi_dcmpgt>
 801a848:	b138      	cbz	r0, 801a85a <__ieee754_exp+0x21a>
 801a84a:	4b37      	ldr	r3, [pc, #220]	; (801a928 <__ieee754_exp+0x2e8>)
 801a84c:	2200      	movs	r2, #0
 801a84e:	4620      	mov	r0, r4
 801a850:	4629      	mov	r1, r5
 801a852:	e710      	b.n	801a676 <__ieee754_exp+0x36>
 801a854:	f04f 0a00 	mov.w	sl, #0
 801a858:	e75f      	b.n	801a71a <__ieee754_exp+0xda>
 801a85a:	4682      	mov	sl, r0
 801a85c:	e75d      	b.n	801a71a <__ieee754_exp+0xda>
 801a85e:	4632      	mov	r2, r6
 801a860:	463b      	mov	r3, r7
 801a862:	2000      	movs	r0, #0
 801a864:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 801a868:	f7e5 fd00 	bl	800026c <__aeabi_dsub>
 801a86c:	4602      	mov	r2, r0
 801a86e:	460b      	mov	r3, r1
 801a870:	ec51 0b19 	vmov	r0, r1, d9
 801a874:	f7e5 ffdc 	bl	8000830 <__aeabi_ddiv>
 801a878:	4602      	mov	r2, r0
 801a87a:	460b      	mov	r3, r1
 801a87c:	ec51 0b18 	vmov	r0, r1, d8
 801a880:	f7e5 fcf4 	bl	800026c <__aeabi_dsub>
 801a884:	4642      	mov	r2, r8
 801a886:	464b      	mov	r3, r9
 801a888:	f7e5 fcf0 	bl	800026c <__aeabi_dsub>
 801a88c:	4602      	mov	r2, r0
 801a88e:	460b      	mov	r3, r1
 801a890:	2000      	movs	r0, #0
 801a892:	4925      	ldr	r1, [pc, #148]	; (801a928 <__ieee754_exp+0x2e8>)
 801a894:	f7e5 fcea 	bl	800026c <__aeabi_dsub>
 801a898:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 801a89c:	4592      	cmp	sl, r2
 801a89e:	db02      	blt.n	801a8a6 <__ieee754_exp+0x266>
 801a8a0:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 801a8a4:	e6e9      	b.n	801a67a <__ieee754_exp+0x3a>
 801a8a6:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 801a8aa:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 801a8ae:	2200      	movs	r2, #0
 801a8b0:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 801a8b4:	e6f9      	b.n	801a6aa <__ieee754_exp+0x6a>
 801a8b6:	bf00      	nop
 801a8b8:	fefa39ef 	.word	0xfefa39ef
 801a8bc:	40862e42 	.word	0x40862e42
 801a8c0:	8800759c 	.word	0x8800759c
 801a8c4:	7e37e43c 	.word	0x7e37e43c
 801a8c8:	d52d3051 	.word	0xd52d3051
 801a8cc:	c0874910 	.word	0xc0874910
 801a8d0:	72bea4d0 	.word	0x72bea4d0
 801a8d4:	3e663769 	.word	0x3e663769
 801a8d8:	c5d26bf1 	.word	0xc5d26bf1
 801a8dc:	3ebbbd41 	.word	0x3ebbbd41
 801a8e0:	af25de2c 	.word	0xaf25de2c
 801a8e4:	3f11566a 	.word	0x3f11566a
 801a8e8:	16bebd93 	.word	0x16bebd93
 801a8ec:	3f66c16c 	.word	0x3f66c16c
 801a8f0:	5555553e 	.word	0x5555553e
 801a8f4:	3fc55555 	.word	0x3fc55555
 801a8f8:	652b82fe 	.word	0x652b82fe
 801a8fc:	3ff71547 	.word	0x3ff71547
 801a900:	fee00000 	.word	0xfee00000
 801a904:	3fe62e42 	.word	0x3fe62e42
 801a908:	35793c76 	.word	0x35793c76
 801a90c:	3dea39ef 	.word	0x3dea39ef
 801a910:	40862e41 	.word	0x40862e41
 801a914:	7fefffff 	.word	0x7fefffff
 801a918:	3fd62e42 	.word	0x3fd62e42
 801a91c:	3ff0a2b1 	.word	0x3ff0a2b1
 801a920:	0801b688 	.word	0x0801b688
 801a924:	0801b698 	.word	0x0801b698
 801a928:	3ff00000 	.word	0x3ff00000
 801a92c:	0801b678 	.word	0x0801b678
 801a930:	3e2fffff 	.word	0x3e2fffff
 801a934:	00000000 	.word	0x00000000

0801a938 <__ieee754_log>:
 801a938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a93c:	ec51 0b10 	vmov	r0, r1, d0
 801a940:	ed2d 8b04 	vpush	{d8-d9}
 801a944:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 801a948:	b083      	sub	sp, #12
 801a94a:	460d      	mov	r5, r1
 801a94c:	da29      	bge.n	801a9a2 <__ieee754_log+0x6a>
 801a94e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801a952:	4303      	orrs	r3, r0
 801a954:	ee10 2a10 	vmov	r2, s0
 801a958:	d10c      	bne.n	801a974 <__ieee754_log+0x3c>
 801a95a:	49cf      	ldr	r1, [pc, #828]	; (801ac98 <__ieee754_log+0x360>)
 801a95c:	2200      	movs	r2, #0
 801a95e:	2300      	movs	r3, #0
 801a960:	2000      	movs	r0, #0
 801a962:	f7e5 ff65 	bl	8000830 <__aeabi_ddiv>
 801a966:	ec41 0b10 	vmov	d0, r0, r1
 801a96a:	b003      	add	sp, #12
 801a96c:	ecbd 8b04 	vpop	{d8-d9}
 801a970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a974:	2900      	cmp	r1, #0
 801a976:	da05      	bge.n	801a984 <__ieee754_log+0x4c>
 801a978:	460b      	mov	r3, r1
 801a97a:	f7e5 fc77 	bl	800026c <__aeabi_dsub>
 801a97e:	2200      	movs	r2, #0
 801a980:	2300      	movs	r3, #0
 801a982:	e7ee      	b.n	801a962 <__ieee754_log+0x2a>
 801a984:	4bc5      	ldr	r3, [pc, #788]	; (801ac9c <__ieee754_log+0x364>)
 801a986:	2200      	movs	r2, #0
 801a988:	f7e5 fe28 	bl	80005dc <__aeabi_dmul>
 801a98c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 801a990:	460d      	mov	r5, r1
 801a992:	4ac3      	ldr	r2, [pc, #780]	; (801aca0 <__ieee754_log+0x368>)
 801a994:	4295      	cmp	r5, r2
 801a996:	dd06      	ble.n	801a9a6 <__ieee754_log+0x6e>
 801a998:	4602      	mov	r2, r0
 801a99a:	460b      	mov	r3, r1
 801a99c:	f7e5 fc68 	bl	8000270 <__adddf3>
 801a9a0:	e7e1      	b.n	801a966 <__ieee754_log+0x2e>
 801a9a2:	2300      	movs	r3, #0
 801a9a4:	e7f5      	b.n	801a992 <__ieee754_log+0x5a>
 801a9a6:	152c      	asrs	r4, r5, #20
 801a9a8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 801a9ac:	f3c5 0513 	ubfx	r5, r5, #0, #20
 801a9b0:	441c      	add	r4, r3
 801a9b2:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 801a9b6:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 801a9ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801a9be:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 801a9c2:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 801a9c6:	ea42 0105 	orr.w	r1, r2, r5
 801a9ca:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 801a9ce:	2200      	movs	r2, #0
 801a9d0:	4bb4      	ldr	r3, [pc, #720]	; (801aca4 <__ieee754_log+0x36c>)
 801a9d2:	f7e5 fc4b 	bl	800026c <__aeabi_dsub>
 801a9d6:	1cab      	adds	r3, r5, #2
 801a9d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801a9dc:	2b02      	cmp	r3, #2
 801a9de:	4682      	mov	sl, r0
 801a9e0:	468b      	mov	fp, r1
 801a9e2:	f04f 0200 	mov.w	r2, #0
 801a9e6:	dc53      	bgt.n	801aa90 <__ieee754_log+0x158>
 801a9e8:	2300      	movs	r3, #0
 801a9ea:	f7e6 f85f 	bl	8000aac <__aeabi_dcmpeq>
 801a9ee:	b1d0      	cbz	r0, 801aa26 <__ieee754_log+0xee>
 801a9f0:	2c00      	cmp	r4, #0
 801a9f2:	f000 8122 	beq.w	801ac3a <__ieee754_log+0x302>
 801a9f6:	4620      	mov	r0, r4
 801a9f8:	f7e5 fd86 	bl	8000508 <__aeabi_i2d>
 801a9fc:	a390      	add	r3, pc, #576	; (adr r3, 801ac40 <__ieee754_log+0x308>)
 801a9fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa02:	4606      	mov	r6, r0
 801aa04:	460f      	mov	r7, r1
 801aa06:	f7e5 fde9 	bl	80005dc <__aeabi_dmul>
 801aa0a:	a38f      	add	r3, pc, #572	; (adr r3, 801ac48 <__ieee754_log+0x310>)
 801aa0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa10:	4604      	mov	r4, r0
 801aa12:	460d      	mov	r5, r1
 801aa14:	4630      	mov	r0, r6
 801aa16:	4639      	mov	r1, r7
 801aa18:	f7e5 fde0 	bl	80005dc <__aeabi_dmul>
 801aa1c:	4602      	mov	r2, r0
 801aa1e:	460b      	mov	r3, r1
 801aa20:	4620      	mov	r0, r4
 801aa22:	4629      	mov	r1, r5
 801aa24:	e7ba      	b.n	801a99c <__ieee754_log+0x64>
 801aa26:	a38a      	add	r3, pc, #552	; (adr r3, 801ac50 <__ieee754_log+0x318>)
 801aa28:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa2c:	4650      	mov	r0, sl
 801aa2e:	4659      	mov	r1, fp
 801aa30:	f7e5 fdd4 	bl	80005dc <__aeabi_dmul>
 801aa34:	4602      	mov	r2, r0
 801aa36:	460b      	mov	r3, r1
 801aa38:	2000      	movs	r0, #0
 801aa3a:	499b      	ldr	r1, [pc, #620]	; (801aca8 <__ieee754_log+0x370>)
 801aa3c:	f7e5 fc16 	bl	800026c <__aeabi_dsub>
 801aa40:	4652      	mov	r2, sl
 801aa42:	4606      	mov	r6, r0
 801aa44:	460f      	mov	r7, r1
 801aa46:	465b      	mov	r3, fp
 801aa48:	4650      	mov	r0, sl
 801aa4a:	4659      	mov	r1, fp
 801aa4c:	f7e5 fdc6 	bl	80005dc <__aeabi_dmul>
 801aa50:	4602      	mov	r2, r0
 801aa52:	460b      	mov	r3, r1
 801aa54:	4630      	mov	r0, r6
 801aa56:	4639      	mov	r1, r7
 801aa58:	f7e5 fdc0 	bl	80005dc <__aeabi_dmul>
 801aa5c:	4606      	mov	r6, r0
 801aa5e:	460f      	mov	r7, r1
 801aa60:	b914      	cbnz	r4, 801aa68 <__ieee754_log+0x130>
 801aa62:	4632      	mov	r2, r6
 801aa64:	463b      	mov	r3, r7
 801aa66:	e0a2      	b.n	801abae <__ieee754_log+0x276>
 801aa68:	4620      	mov	r0, r4
 801aa6a:	f7e5 fd4d 	bl	8000508 <__aeabi_i2d>
 801aa6e:	a374      	add	r3, pc, #464	; (adr r3, 801ac40 <__ieee754_log+0x308>)
 801aa70:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa74:	4680      	mov	r8, r0
 801aa76:	4689      	mov	r9, r1
 801aa78:	f7e5 fdb0 	bl	80005dc <__aeabi_dmul>
 801aa7c:	a372      	add	r3, pc, #456	; (adr r3, 801ac48 <__ieee754_log+0x310>)
 801aa7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa82:	4604      	mov	r4, r0
 801aa84:	460d      	mov	r5, r1
 801aa86:	4640      	mov	r0, r8
 801aa88:	4649      	mov	r1, r9
 801aa8a:	f7e5 fda7 	bl	80005dc <__aeabi_dmul>
 801aa8e:	e0a7      	b.n	801abe0 <__ieee754_log+0x2a8>
 801aa90:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801aa94:	f7e5 fbec 	bl	8000270 <__adddf3>
 801aa98:	4602      	mov	r2, r0
 801aa9a:	460b      	mov	r3, r1
 801aa9c:	4650      	mov	r0, sl
 801aa9e:	4659      	mov	r1, fp
 801aaa0:	f7e5 fec6 	bl	8000830 <__aeabi_ddiv>
 801aaa4:	ec41 0b18 	vmov	d8, r0, r1
 801aaa8:	4620      	mov	r0, r4
 801aaaa:	f7e5 fd2d 	bl	8000508 <__aeabi_i2d>
 801aaae:	ec53 2b18 	vmov	r2, r3, d8
 801aab2:	ec41 0b19 	vmov	d9, r0, r1
 801aab6:	ec51 0b18 	vmov	r0, r1, d8
 801aaba:	f7e5 fd8f 	bl	80005dc <__aeabi_dmul>
 801aabe:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 801aac2:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 801aac6:	9301      	str	r3, [sp, #4]
 801aac8:	4602      	mov	r2, r0
 801aaca:	460b      	mov	r3, r1
 801aacc:	4680      	mov	r8, r0
 801aace:	4689      	mov	r9, r1
 801aad0:	f7e5 fd84 	bl	80005dc <__aeabi_dmul>
 801aad4:	a360      	add	r3, pc, #384	; (adr r3, 801ac58 <__ieee754_log+0x320>)
 801aad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aada:	4606      	mov	r6, r0
 801aadc:	460f      	mov	r7, r1
 801aade:	f7e5 fd7d 	bl	80005dc <__aeabi_dmul>
 801aae2:	a35f      	add	r3, pc, #380	; (adr r3, 801ac60 <__ieee754_log+0x328>)
 801aae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aae8:	f7e5 fbc2 	bl	8000270 <__adddf3>
 801aaec:	4632      	mov	r2, r6
 801aaee:	463b      	mov	r3, r7
 801aaf0:	f7e5 fd74 	bl	80005dc <__aeabi_dmul>
 801aaf4:	a35c      	add	r3, pc, #368	; (adr r3, 801ac68 <__ieee754_log+0x330>)
 801aaf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aafa:	f7e5 fbb9 	bl	8000270 <__adddf3>
 801aafe:	4632      	mov	r2, r6
 801ab00:	463b      	mov	r3, r7
 801ab02:	f7e5 fd6b 	bl	80005dc <__aeabi_dmul>
 801ab06:	a35a      	add	r3, pc, #360	; (adr r3, 801ac70 <__ieee754_log+0x338>)
 801ab08:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab0c:	f7e5 fbb0 	bl	8000270 <__adddf3>
 801ab10:	4642      	mov	r2, r8
 801ab12:	464b      	mov	r3, r9
 801ab14:	f7e5 fd62 	bl	80005dc <__aeabi_dmul>
 801ab18:	a357      	add	r3, pc, #348	; (adr r3, 801ac78 <__ieee754_log+0x340>)
 801ab1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab1e:	4680      	mov	r8, r0
 801ab20:	4689      	mov	r9, r1
 801ab22:	4630      	mov	r0, r6
 801ab24:	4639      	mov	r1, r7
 801ab26:	f7e5 fd59 	bl	80005dc <__aeabi_dmul>
 801ab2a:	a355      	add	r3, pc, #340	; (adr r3, 801ac80 <__ieee754_log+0x348>)
 801ab2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab30:	f7e5 fb9e 	bl	8000270 <__adddf3>
 801ab34:	4632      	mov	r2, r6
 801ab36:	463b      	mov	r3, r7
 801ab38:	f7e5 fd50 	bl	80005dc <__aeabi_dmul>
 801ab3c:	a352      	add	r3, pc, #328	; (adr r3, 801ac88 <__ieee754_log+0x350>)
 801ab3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab42:	f7e5 fb95 	bl	8000270 <__adddf3>
 801ab46:	4632      	mov	r2, r6
 801ab48:	463b      	mov	r3, r7
 801ab4a:	f7e5 fd47 	bl	80005dc <__aeabi_dmul>
 801ab4e:	460b      	mov	r3, r1
 801ab50:	4602      	mov	r2, r0
 801ab52:	4649      	mov	r1, r9
 801ab54:	4640      	mov	r0, r8
 801ab56:	f7e5 fb8b 	bl	8000270 <__adddf3>
 801ab5a:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 801ab5e:	9b01      	ldr	r3, [sp, #4]
 801ab60:	3551      	adds	r5, #81	; 0x51
 801ab62:	431d      	orrs	r5, r3
 801ab64:	2d00      	cmp	r5, #0
 801ab66:	4680      	mov	r8, r0
 801ab68:	4689      	mov	r9, r1
 801ab6a:	dd48      	ble.n	801abfe <__ieee754_log+0x2c6>
 801ab6c:	4b4e      	ldr	r3, [pc, #312]	; (801aca8 <__ieee754_log+0x370>)
 801ab6e:	2200      	movs	r2, #0
 801ab70:	4650      	mov	r0, sl
 801ab72:	4659      	mov	r1, fp
 801ab74:	f7e5 fd32 	bl	80005dc <__aeabi_dmul>
 801ab78:	4652      	mov	r2, sl
 801ab7a:	465b      	mov	r3, fp
 801ab7c:	f7e5 fd2e 	bl	80005dc <__aeabi_dmul>
 801ab80:	4602      	mov	r2, r0
 801ab82:	460b      	mov	r3, r1
 801ab84:	4606      	mov	r6, r0
 801ab86:	460f      	mov	r7, r1
 801ab88:	4640      	mov	r0, r8
 801ab8a:	4649      	mov	r1, r9
 801ab8c:	f7e5 fb70 	bl	8000270 <__adddf3>
 801ab90:	ec53 2b18 	vmov	r2, r3, d8
 801ab94:	f7e5 fd22 	bl	80005dc <__aeabi_dmul>
 801ab98:	4680      	mov	r8, r0
 801ab9a:	4689      	mov	r9, r1
 801ab9c:	b964      	cbnz	r4, 801abb8 <__ieee754_log+0x280>
 801ab9e:	4602      	mov	r2, r0
 801aba0:	460b      	mov	r3, r1
 801aba2:	4630      	mov	r0, r6
 801aba4:	4639      	mov	r1, r7
 801aba6:	f7e5 fb61 	bl	800026c <__aeabi_dsub>
 801abaa:	4602      	mov	r2, r0
 801abac:	460b      	mov	r3, r1
 801abae:	4650      	mov	r0, sl
 801abb0:	4659      	mov	r1, fp
 801abb2:	f7e5 fb5b 	bl	800026c <__aeabi_dsub>
 801abb6:	e6d6      	b.n	801a966 <__ieee754_log+0x2e>
 801abb8:	a321      	add	r3, pc, #132	; (adr r3, 801ac40 <__ieee754_log+0x308>)
 801abba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801abbe:	ec51 0b19 	vmov	r0, r1, d9
 801abc2:	f7e5 fd0b 	bl	80005dc <__aeabi_dmul>
 801abc6:	a320      	add	r3, pc, #128	; (adr r3, 801ac48 <__ieee754_log+0x310>)
 801abc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801abcc:	4604      	mov	r4, r0
 801abce:	460d      	mov	r5, r1
 801abd0:	ec51 0b19 	vmov	r0, r1, d9
 801abd4:	f7e5 fd02 	bl	80005dc <__aeabi_dmul>
 801abd8:	4642      	mov	r2, r8
 801abda:	464b      	mov	r3, r9
 801abdc:	f7e5 fb48 	bl	8000270 <__adddf3>
 801abe0:	4602      	mov	r2, r0
 801abe2:	460b      	mov	r3, r1
 801abe4:	4630      	mov	r0, r6
 801abe6:	4639      	mov	r1, r7
 801abe8:	f7e5 fb40 	bl	800026c <__aeabi_dsub>
 801abec:	4652      	mov	r2, sl
 801abee:	465b      	mov	r3, fp
 801abf0:	f7e5 fb3c 	bl	800026c <__aeabi_dsub>
 801abf4:	4602      	mov	r2, r0
 801abf6:	460b      	mov	r3, r1
 801abf8:	4620      	mov	r0, r4
 801abfa:	4629      	mov	r1, r5
 801abfc:	e7d9      	b.n	801abb2 <__ieee754_log+0x27a>
 801abfe:	4602      	mov	r2, r0
 801ac00:	460b      	mov	r3, r1
 801ac02:	4650      	mov	r0, sl
 801ac04:	4659      	mov	r1, fp
 801ac06:	f7e5 fb31 	bl	800026c <__aeabi_dsub>
 801ac0a:	ec53 2b18 	vmov	r2, r3, d8
 801ac0e:	f7e5 fce5 	bl	80005dc <__aeabi_dmul>
 801ac12:	4606      	mov	r6, r0
 801ac14:	460f      	mov	r7, r1
 801ac16:	2c00      	cmp	r4, #0
 801ac18:	f43f af23 	beq.w	801aa62 <__ieee754_log+0x12a>
 801ac1c:	a308      	add	r3, pc, #32	; (adr r3, 801ac40 <__ieee754_log+0x308>)
 801ac1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac22:	ec51 0b19 	vmov	r0, r1, d9
 801ac26:	f7e5 fcd9 	bl	80005dc <__aeabi_dmul>
 801ac2a:	a307      	add	r3, pc, #28	; (adr r3, 801ac48 <__ieee754_log+0x310>)
 801ac2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac30:	4604      	mov	r4, r0
 801ac32:	460d      	mov	r5, r1
 801ac34:	ec51 0b19 	vmov	r0, r1, d9
 801ac38:	e727      	b.n	801aa8a <__ieee754_log+0x152>
 801ac3a:	ed9f 0b15 	vldr	d0, [pc, #84]	; 801ac90 <__ieee754_log+0x358>
 801ac3e:	e694      	b.n	801a96a <__ieee754_log+0x32>
 801ac40:	fee00000 	.word	0xfee00000
 801ac44:	3fe62e42 	.word	0x3fe62e42
 801ac48:	35793c76 	.word	0x35793c76
 801ac4c:	3dea39ef 	.word	0x3dea39ef
 801ac50:	55555555 	.word	0x55555555
 801ac54:	3fd55555 	.word	0x3fd55555
 801ac58:	df3e5244 	.word	0xdf3e5244
 801ac5c:	3fc2f112 	.word	0x3fc2f112
 801ac60:	96cb03de 	.word	0x96cb03de
 801ac64:	3fc74664 	.word	0x3fc74664
 801ac68:	94229359 	.word	0x94229359
 801ac6c:	3fd24924 	.word	0x3fd24924
 801ac70:	55555593 	.word	0x55555593
 801ac74:	3fe55555 	.word	0x3fe55555
 801ac78:	d078c69f 	.word	0xd078c69f
 801ac7c:	3fc39a09 	.word	0x3fc39a09
 801ac80:	1d8e78af 	.word	0x1d8e78af
 801ac84:	3fcc71c5 	.word	0x3fcc71c5
 801ac88:	9997fa04 	.word	0x9997fa04
 801ac8c:	3fd99999 	.word	0x3fd99999
	...
 801ac98:	c3500000 	.word	0xc3500000
 801ac9c:	43500000 	.word	0x43500000
 801aca0:	7fefffff 	.word	0x7fefffff
 801aca4:	3ff00000 	.word	0x3ff00000
 801aca8:	3fe00000 	.word	0x3fe00000

0801acac <__ieee754_sqrt>:
 801acac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801acb0:	ec55 4b10 	vmov	r4, r5, d0
 801acb4:	4e56      	ldr	r6, [pc, #344]	; (801ae10 <__ieee754_sqrt+0x164>)
 801acb6:	43ae      	bics	r6, r5
 801acb8:	ee10 0a10 	vmov	r0, s0
 801acbc:	ee10 3a10 	vmov	r3, s0
 801acc0:	4629      	mov	r1, r5
 801acc2:	462a      	mov	r2, r5
 801acc4:	d110      	bne.n	801ace8 <__ieee754_sqrt+0x3c>
 801acc6:	ee10 2a10 	vmov	r2, s0
 801acca:	462b      	mov	r3, r5
 801accc:	f7e5 fc86 	bl	80005dc <__aeabi_dmul>
 801acd0:	4602      	mov	r2, r0
 801acd2:	460b      	mov	r3, r1
 801acd4:	4620      	mov	r0, r4
 801acd6:	4629      	mov	r1, r5
 801acd8:	f7e5 faca 	bl	8000270 <__adddf3>
 801acdc:	4604      	mov	r4, r0
 801acde:	460d      	mov	r5, r1
 801ace0:	ec45 4b10 	vmov	d0, r4, r5
 801ace4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ace8:	2d00      	cmp	r5, #0
 801acea:	dc10      	bgt.n	801ad0e <__ieee754_sqrt+0x62>
 801acec:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801acf0:	4330      	orrs	r0, r6
 801acf2:	d0f5      	beq.n	801ace0 <__ieee754_sqrt+0x34>
 801acf4:	b15d      	cbz	r5, 801ad0e <__ieee754_sqrt+0x62>
 801acf6:	ee10 2a10 	vmov	r2, s0
 801acfa:	462b      	mov	r3, r5
 801acfc:	ee10 0a10 	vmov	r0, s0
 801ad00:	f7e5 fab4 	bl	800026c <__aeabi_dsub>
 801ad04:	4602      	mov	r2, r0
 801ad06:	460b      	mov	r3, r1
 801ad08:	f7e5 fd92 	bl	8000830 <__aeabi_ddiv>
 801ad0c:	e7e6      	b.n	801acdc <__ieee754_sqrt+0x30>
 801ad0e:	1509      	asrs	r1, r1, #20
 801ad10:	d076      	beq.n	801ae00 <__ieee754_sqrt+0x154>
 801ad12:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801ad16:	07ce      	lsls	r6, r1, #31
 801ad18:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 801ad1c:	bf5e      	ittt	pl
 801ad1e:	0fda      	lsrpl	r2, r3, #31
 801ad20:	005b      	lslpl	r3, r3, #1
 801ad22:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 801ad26:	0fda      	lsrs	r2, r3, #31
 801ad28:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 801ad2c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 801ad30:	2000      	movs	r0, #0
 801ad32:	106d      	asrs	r5, r5, #1
 801ad34:	005b      	lsls	r3, r3, #1
 801ad36:	f04f 0e16 	mov.w	lr, #22
 801ad3a:	4684      	mov	ip, r0
 801ad3c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801ad40:	eb0c 0401 	add.w	r4, ip, r1
 801ad44:	4294      	cmp	r4, r2
 801ad46:	bfde      	ittt	le
 801ad48:	1b12      	suble	r2, r2, r4
 801ad4a:	eb04 0c01 	addle.w	ip, r4, r1
 801ad4e:	1840      	addle	r0, r0, r1
 801ad50:	0052      	lsls	r2, r2, #1
 801ad52:	f1be 0e01 	subs.w	lr, lr, #1
 801ad56:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801ad5a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801ad5e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801ad62:	d1ed      	bne.n	801ad40 <__ieee754_sqrt+0x94>
 801ad64:	4671      	mov	r1, lr
 801ad66:	2720      	movs	r7, #32
 801ad68:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801ad6c:	4562      	cmp	r2, ip
 801ad6e:	eb04 060e 	add.w	r6, r4, lr
 801ad72:	dc02      	bgt.n	801ad7a <__ieee754_sqrt+0xce>
 801ad74:	d113      	bne.n	801ad9e <__ieee754_sqrt+0xf2>
 801ad76:	429e      	cmp	r6, r3
 801ad78:	d811      	bhi.n	801ad9e <__ieee754_sqrt+0xf2>
 801ad7a:	2e00      	cmp	r6, #0
 801ad7c:	eb06 0e04 	add.w	lr, r6, r4
 801ad80:	da43      	bge.n	801ae0a <__ieee754_sqrt+0x15e>
 801ad82:	f1be 0f00 	cmp.w	lr, #0
 801ad86:	db40      	blt.n	801ae0a <__ieee754_sqrt+0x15e>
 801ad88:	f10c 0801 	add.w	r8, ip, #1
 801ad8c:	eba2 020c 	sub.w	r2, r2, ip
 801ad90:	429e      	cmp	r6, r3
 801ad92:	bf88      	it	hi
 801ad94:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801ad98:	1b9b      	subs	r3, r3, r6
 801ad9a:	4421      	add	r1, r4
 801ad9c:	46c4      	mov	ip, r8
 801ad9e:	0052      	lsls	r2, r2, #1
 801ada0:	3f01      	subs	r7, #1
 801ada2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801ada6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801adaa:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801adae:	d1dd      	bne.n	801ad6c <__ieee754_sqrt+0xc0>
 801adb0:	4313      	orrs	r3, r2
 801adb2:	d006      	beq.n	801adc2 <__ieee754_sqrt+0x116>
 801adb4:	1c4c      	adds	r4, r1, #1
 801adb6:	bf13      	iteet	ne
 801adb8:	3101      	addne	r1, #1
 801adba:	3001      	addeq	r0, #1
 801adbc:	4639      	moveq	r1, r7
 801adbe:	f021 0101 	bicne.w	r1, r1, #1
 801adc2:	1043      	asrs	r3, r0, #1
 801adc4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801adc8:	0849      	lsrs	r1, r1, #1
 801adca:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801adce:	07c2      	lsls	r2, r0, #31
 801add0:	bf48      	it	mi
 801add2:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 801add6:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 801adda:	460c      	mov	r4, r1
 801addc:	463d      	mov	r5, r7
 801adde:	e77f      	b.n	801ace0 <__ieee754_sqrt+0x34>
 801ade0:	0ada      	lsrs	r2, r3, #11
 801ade2:	3815      	subs	r0, #21
 801ade4:	055b      	lsls	r3, r3, #21
 801ade6:	2a00      	cmp	r2, #0
 801ade8:	d0fa      	beq.n	801ade0 <__ieee754_sqrt+0x134>
 801adea:	02d7      	lsls	r7, r2, #11
 801adec:	d50a      	bpl.n	801ae04 <__ieee754_sqrt+0x158>
 801adee:	f1c1 0420 	rsb	r4, r1, #32
 801adf2:	fa23 f404 	lsr.w	r4, r3, r4
 801adf6:	1e4d      	subs	r5, r1, #1
 801adf8:	408b      	lsls	r3, r1
 801adfa:	4322      	orrs	r2, r4
 801adfc:	1b41      	subs	r1, r0, r5
 801adfe:	e788      	b.n	801ad12 <__ieee754_sqrt+0x66>
 801ae00:	4608      	mov	r0, r1
 801ae02:	e7f0      	b.n	801ade6 <__ieee754_sqrt+0x13a>
 801ae04:	0052      	lsls	r2, r2, #1
 801ae06:	3101      	adds	r1, #1
 801ae08:	e7ef      	b.n	801adea <__ieee754_sqrt+0x13e>
 801ae0a:	46e0      	mov	r8, ip
 801ae0c:	e7be      	b.n	801ad8c <__ieee754_sqrt+0xe0>
 801ae0e:	bf00      	nop
 801ae10:	7ff00000 	.word	0x7ff00000

0801ae14 <finite>:
 801ae14:	b082      	sub	sp, #8
 801ae16:	ed8d 0b00 	vstr	d0, [sp]
 801ae1a:	9801      	ldr	r0, [sp, #4]
 801ae1c:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801ae20:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801ae24:	0fc0      	lsrs	r0, r0, #31
 801ae26:	b002      	add	sp, #8
 801ae28:	4770      	bx	lr
 801ae2a:	0000      	movs	r0, r0
 801ae2c:	0000      	movs	r0, r0
	...

0801ae30 <nan>:
 801ae30:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801ae38 <nan+0x8>
 801ae34:	4770      	bx	lr
 801ae36:	bf00      	nop
 801ae38:	00000000 	.word	0x00000000
 801ae3c:	7ff80000 	.word	0x7ff80000

0801ae40 <_init>:
 801ae40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ae42:	bf00      	nop
 801ae44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ae46:	bc08      	pop	{r3}
 801ae48:	469e      	mov	lr, r3
 801ae4a:	4770      	bx	lr

0801ae4c <_fini>:
 801ae4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ae4e:	bf00      	nop
 801ae50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ae52:	bc08      	pop	{r3}
 801ae54:	469e      	mov	lr, r3
 801ae56:	4770      	bx	lr
